{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,1 +128,0 @@\n-\n@@ -131,1 +130,0 @@\n-\n@@ -136,1 +134,1 @@\n-  assert(log2i_exact(HeapRegionBounds::min_size()) == LOG_M, \"inv\");\n+  assert(log2i_exact(G1HeapRegionBounds::min_size()) == LOG_M, \"inv\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-  HeapRegionRemSet::invalidate_from_card_cache(start_idx, num_regions);\n+  G1HeapRegionRemSet::invalidate_from_card_cache(start_idx, num_regions);\n@@ -165,1 +165,1 @@\n-                                          HeapRegionType type,\n+                                          G1HeapRegionType type,\n@@ -713,1 +713,1 @@\n-class PostCompactionPrinterClosure: public HeapRegionClosure {\n+class PostCompactionPrinterClosure: public G1HeapRegionClosure {\n@@ -1073,1 +1073,1 @@\n-class OldRegionSetChecker : public HeapRegionSetChecker {\n+class OldRegionSetChecker : public G1HeapRegionSetChecker {\n@@ -1101,1 +1101,1 @@\n-class HumongousRegionSetChecker : public HeapRegionSetChecker {\n+class HumongousRegionSetChecker : public G1HeapRegionSetChecker {\n@@ -1355,1 +1355,1 @@\n-  HeapRegionRemSet::initialize(_reserved);\n+  G1HeapRegionRemSet::initialize(_reserved);\n@@ -1357,1 +1357,1 @@\n-  FreeRegionList::set_unrealistically_long_length(max_regions() + 1);\n+  G1FreeRegionList::set_unrealistically_long_length(max_regions() + 1);\n@@ -1539,1 +1539,1 @@\n-class SumUsedClosure: public HeapRegionClosure {\n+class SumUsedClosure: public G1HeapRegionClosure {\n@@ -1890,1 +1890,1 @@\n-class IterateObjectClosureRegionClosure: public HeapRegionClosure {\n+class IterateObjectClosureRegionClosure: public G1HeapRegionClosure {\n@@ -1910,1 +1910,1 @@\n-  HeapRegionClaimer _claimer;\n+  G1HeapRegionClaimer _claimer;\n@@ -1926,1 +1926,1 @@\n-void G1CollectedHeap::object_iterate_parallel(ObjectClosure* cl, uint worker_id, HeapRegionClaimer* claimer) {\n+void G1CollectedHeap::object_iterate_parallel(ObjectClosure* cl, uint worker_id, G1HeapRegionClaimer* claimer) {\n@@ -1935,1 +1935,1 @@\n-void G1CollectedHeap::heap_region_iterate(HeapRegionClosure* cl) const {\n+void G1CollectedHeap::heap_region_iterate(G1HeapRegionClosure* cl) const {\n@@ -1939,1 +1939,1 @@\n-void G1CollectedHeap::heap_region_iterate(HeapRegionIndexClosure* cl) const {\n+void G1CollectedHeap::heap_region_iterate(G1HeapRegionIndexClosure* cl) const {\n@@ -1943,2 +1943,2 @@\n-void G1CollectedHeap::heap_region_par_iterate_from_worker_offset(HeapRegionClosure* cl,\n-                                                                 HeapRegionClaimer *hrclaimer,\n+void G1CollectedHeap::heap_region_par_iterate_from_worker_offset(G1HeapRegionClosure* cl,\n+                                                                 G1HeapRegionClaimer *hrclaimer,\n@@ -1949,2 +1949,2 @@\n-void G1CollectedHeap::heap_region_par_iterate_from_start(HeapRegionClosure* cl,\n-                                                         HeapRegionClaimer *hrclaimer) const {\n+void G1CollectedHeap::heap_region_par_iterate_from_start(G1HeapRegionClosure* cl,\n+                                                         G1HeapRegionClaimer *hrclaimer) const {\n@@ -1954,1 +1954,1 @@\n-void G1CollectedHeap::collection_set_iterate_all(HeapRegionClosure* cl) {\n+void G1CollectedHeap::collection_set_iterate_all(G1HeapRegionClosure* cl) {\n@@ -1958,2 +1958,2 @@\n-void G1CollectedHeap::collection_set_par_iterate_all(HeapRegionClosure* cl,\n-                                                     HeapRegionClaimer* hr_claimer,\n+void G1CollectedHeap::collection_set_par_iterate_all(G1HeapRegionClosure* cl,\n+                                                     G1HeapRegionClaimer* hr_claimer,\n@@ -1964,2 +1964,2 @@\n-void G1CollectedHeap::collection_set_iterate_increment_from(HeapRegionClosure *cl,\n-                                                            HeapRegionClaimer* hr_claimer,\n+void G1CollectedHeap::collection_set_iterate_increment_from(G1HeapRegionClosure *cl,\n+                                                            G1HeapRegionClaimer* hr_claimer,\n@@ -1970,2 +1970,2 @@\n-void G1CollectedHeap::par_iterate_regions_array(HeapRegionClosure* cl,\n-                                                HeapRegionClaimer* hr_claimer,\n+void G1CollectedHeap::par_iterate_regions_array(G1HeapRegionClosure* cl,\n+                                                G1HeapRegionClaimer* hr_claimer,\n@@ -2049,1 +2049,1 @@\n-class PrintRegionClosure: public HeapRegionClosure {\n+class G1PrintRegionClosure: public G1HeapRegionClosure {\n@@ -2052,1 +2052,1 @@\n-  PrintRegionClosure(outputStream* st) : _st(st) {}\n+  G1PrintRegionClosure(outputStream* st) : _st(st) {}\n@@ -2124,1 +2124,1 @@\n-  PrintRegionClosure blk(st);\n+  G1PrintRegionClosure blk(st);\n@@ -2284,1 +2284,1 @@\n-  HeapRegionRemSet* rem_set = r->rem_set();\n+  G1HeapRegionRemSet* rem_set = r->rem_set();\n@@ -2291,1 +2291,1 @@\n-  class VerifyRegionAttrRemSet : public HeapRegionClosure {\n+  class VerifyRegionAttrRemSet : public G1HeapRegionClosure {\n@@ -2541,1 +2541,1 @@\n-  HeapRegionClaimer _hrclaimer;\n+  G1HeapRegionClaimer _hrclaimer;\n@@ -2543,1 +2543,1 @@\n-  class UnregisterNMethodsHeapRegionClosure : public HeapRegionClosure {\n+  class UnregisterNMethodsHeapRegionClosure : public G1HeapRegionClosure {\n@@ -2617,1 +2617,1 @@\n-void G1CollectedHeap::free_region(G1HeapRegion* hr, FreeRegionList* free_list) {\n+void G1CollectedHeap::free_region(G1HeapRegion* hr, G1FreeRegionList* free_list) {\n@@ -2639,1 +2639,1 @@\n-                                            FreeRegionList* free_list) {\n+                                            G1FreeRegionList* free_list) {\n@@ -2655,1 +2655,1 @@\n-void G1CollectedHeap::prepend_to_freelist(FreeRegionList* list) {\n+void G1CollectedHeap::prepend_to_freelist(G1FreeRegionList* list) {\n@@ -2681,1 +2681,1 @@\n-class G1AbandonCollectionSetClosure : public HeapRegionClosure {\n+class G1AbandonCollectionSetClosure : public G1HeapRegionClosure {\n@@ -2710,1 +2710,1 @@\n-class NoYoungRegionsClosure: public HeapRegionClosure {\n+class NoYoungRegionsClosure: public G1HeapRegionClosure {\n@@ -2771,1 +2771,1 @@\n-class RebuildRegionSetsClosure : public HeapRegionClosure {\n+class RebuildRegionSetsClosure : public G1HeapRegionClosure {\n@@ -2775,2 +2775,2 @@\n-  HeapRegionSet* _old_set;\n-  HeapRegionSet* _humongous_set;\n+  G1HeapRegionSet* _old_set;\n+  G1HeapRegionSet* _humongous_set;\n@@ -2778,1 +2778,1 @@\n-  HeapRegionManager* _hrm;\n+  G1HeapRegionManager* _hrm;\n@@ -2784,3 +2784,3 @@\n-                           HeapRegionSet* old_set,\n-                           HeapRegionSet* humongous_set,\n-                           HeapRegionManager* hrm) :\n+                           G1HeapRegionSet* old_set,\n+                           G1HeapRegionSet* humongous_set,\n+                           G1HeapRegionManager* hrm) :\n@@ -2852,1 +2852,1 @@\n-                                                HeapRegionType::Eden,\n+                                                G1HeapRegionType::Eden,\n@@ -2898,1 +2898,1 @@\n-  HeapRegionType type;\n+  G1HeapRegionType type;\n@@ -2900,1 +2900,1 @@\n-    type = HeapRegionType::Survivor;\n+    type = G1HeapRegionType::Survivor;\n@@ -2902,1 +2902,1 @@\n-    type = HeapRegionType::Old;\n+    type = G1HeapRegionType::Old;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":47,"deletions":47,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-  friend class HeapRegionClaimer;\n+  friend class G1HeapRegionClaimer;\n@@ -183,2 +183,2 @@\n-  HeapRegionSet _old_set;\n-  HeapRegionSet _humongous_set;\n+  G1HeapRegionSet _old_set;\n+  G1HeapRegionSet _humongous_set;\n@@ -215,1 +215,1 @@\n-  HeapRegionManager _hrm;\n+  G1HeapRegionManager _hrm;\n@@ -389,1 +389,1 @@\n-  \/\/ Old, Eden, Humongous, Survivor defined in HeapRegionType.)\n+  \/\/ Old, Eden, Humongous, Survivor defined in G1HeapRegionType.)\n@@ -391,1 +391,1 @@\n-                           HeapRegionType type,\n+                           G1HeapRegionType type,\n@@ -682,1 +682,1 @@\n-  void free_region(G1HeapRegion* hr, FreeRegionList* free_list);\n+  void free_region(G1HeapRegion* hr, G1FreeRegionList* free_list);\n@@ -700,1 +700,1 @@\n-                             FreeRegionList* free_list);\n+                             G1FreeRegionList* free_list);\n@@ -1025,1 +1025,1 @@\n-  void prepend_to_freelist(FreeRegionList* list);\n+  void prepend_to_freelist(G1FreeRegionList* list);\n@@ -1063,1 +1063,1 @@\n-  void object_iterate_parallel(ObjectClosure* cl, uint worker_id, HeapRegionClaimer* claimer);\n+  void object_iterate_parallel(ObjectClosure* cl, uint worker_id, G1HeapRegionClaimer* claimer);\n@@ -1075,2 +1075,2 @@\n-  void heap_region_iterate(HeapRegionClosure* blk) const;\n-  void heap_region_iterate(HeapRegionIndexClosure* blk) const;\n+  void heap_region_iterate(G1HeapRegionClosure* blk) const;\n+  void heap_region_iterate(G1HeapRegionIndexClosure* blk) const;\n@@ -1094,1 +1094,1 @@\n-  \/\/ compete using the HeapRegionClaimer to claim the regions before\n+  \/\/ compete using the G1HeapRegionClaimer to claim the regions before\n@@ -1096,1 +1096,1 @@\n-  \/\/ The _from_worker_offset version uses the HeapRegionClaimer and\n+  \/\/ The _from_worker_offset version uses the G1HeapRegionClaimer and\n@@ -1099,2 +1099,2 @@\n-  void heap_region_par_iterate_from_worker_offset(HeapRegionClosure* cl,\n-                                                  HeapRegionClaimer* hrclaimer,\n+  void heap_region_par_iterate_from_worker_offset(G1HeapRegionClosure* cl,\n+                                                  G1HeapRegionClaimer* hrclaimer,\n@@ -1103,2 +1103,2 @@\n-  void heap_region_par_iterate_from_start(HeapRegionClosure* cl,\n-                                          HeapRegionClaimer* hrclaimer) const;\n+  void heap_region_par_iterate_from_start(G1HeapRegionClosure* cl,\n+                                          G1HeapRegionClaimer* hrclaimer) const;\n@@ -1107,2 +1107,2 @@\n-  void collection_set_par_iterate_all(HeapRegionClosure* cl,\n-                                      HeapRegionClaimer* hr_claimer,\n+  void collection_set_par_iterate_all(G1HeapRegionClosure* cl,\n+                                      G1HeapRegionClaimer* hr_claimer,\n@@ -1112,1 +1112,1 @@\n-  void collection_set_iterate_all(HeapRegionClosure* blk);\n+  void collection_set_iterate_all(G1HeapRegionClosure* blk);\n@@ -1118,1 +1118,1 @@\n-  \/\/ The variant with the HeapRegionClaimer guarantees that the closure will be\n+  \/\/ The variant with the G1HeapRegionClaimer guarantees that the closure will be\n@@ -1120,1 +1120,1 @@\n-  void collection_set_iterate_increment_from(HeapRegionClosure *blk, uint worker_id) {\n+  void collection_set_iterate_increment_from(G1HeapRegionClosure *blk, uint worker_id) {\n@@ -1123,1 +1123,1 @@\n-  void collection_set_iterate_increment_from(HeapRegionClosure *blk, HeapRegionClaimer* hr_claimer, uint worker_id);\n+  void collection_set_iterate_increment_from(G1HeapRegionClosure *blk, G1HeapRegionClaimer* hr_claimer, uint worker_id);\n@@ -1125,1 +1125,1 @@\n-  \/\/ the given HeapRegionClosure on each region. The worker_id will determine where\n+  \/\/ the given G1HeapRegionClosure on each region. The worker_id will determine where\n@@ -1127,2 +1127,2 @@\n-  void par_iterate_regions_array(HeapRegionClosure* cl,\n-                                 HeapRegionClaimer* hr_claimer,\n+  void par_iterate_regions_array(G1HeapRegionClosure* cl,\n+                                 G1HeapRegionClaimer* hr_claimer,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,1 +132,1 @@\n-void G1CollectionSet::iterate(HeapRegionClosure* cl) const {\n+void G1CollectionSet::iterate(G1HeapRegionClosure* cl) const {\n@@ -146,2 +146,2 @@\n-void G1CollectionSet::par_iterate(HeapRegionClosure* cl,\n-                                  HeapRegionClaimer* hr_claimer,\n+void G1CollectionSet::par_iterate(G1HeapRegionClosure* cl,\n+                                  G1HeapRegionClaimer* hr_claimer,\n@@ -152,1 +152,1 @@\n-void G1CollectionSet::iterate_optional(HeapRegionClosure* cl) const {\n+void G1CollectionSet::iterate_optional(G1HeapRegionClosure* cl) const {\n@@ -161,2 +161,2 @@\n-void G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure* cl,\n-                                                    HeapRegionClaimer* hr_claimer,\n+void G1CollectionSet::iterate_incremental_part_from(G1HeapRegionClosure* cl,\n+                                                    G1HeapRegionClaimer* hr_claimer,\n@@ -167,2 +167,2 @@\n-void G1CollectionSet::iterate_part_from(HeapRegionClosure* cl,\n-                                        HeapRegionClaimer* hr_claimer,\n+void G1CollectionSet::iterate_part_from(G1HeapRegionClosure* cl,\n+                                        G1HeapRegionClaimer* hr_claimer,\n@@ -210,1 +210,1 @@\n-class G1VerifyYoungAgesClosure : public HeapRegionClosure {\n+class G1VerifyYoungAgesClosure : public G1HeapRegionClosure {\n@@ -214,1 +214,1 @@\n-  G1VerifyYoungAgesClosure() : HeapRegionClosure(), _valid(true) { }\n+  G1VerifyYoungAgesClosure() : G1HeapRegionClosure(), _valid(true) { }\n@@ -249,1 +249,1 @@\n-class G1PrintCollectionSetDetailClosure : public HeapRegionClosure {\n+class G1PrintCollectionSetDetailClosure : public G1HeapRegionClosure {\n@@ -252,1 +252,1 @@\n-  G1PrintCollectionSetDetailClosure(outputStream* st) : HeapRegionClosure(), _st(st) { }\n+  G1PrintCollectionSetDetailClosure(outputStream* st) : G1HeapRegionClosure(), _st(st) { }\n@@ -474,1 +474,1 @@\n-class G1VerifyYoungCSetIndicesClosure : public HeapRegionClosure {\n+class G1VerifyYoungCSetIndicesClosure : public G1HeapRegionClosure {\n@@ -479,1 +479,1 @@\n-  G1VerifyYoungCSetIndicesClosure(size_t young_length) : HeapRegionClosure(), _young_length(young_length) {\n+  G1VerifyYoungCSetIndicesClosure(size_t young_length) : G1HeapRegionClosure(), _young_length(young_length) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-class HeapRegionClaimer;\n-class HeapRegionClosure;\n+class G1HeapRegionClaimer;\n+class G1HeapRegionClosure;\n@@ -200,1 +200,1 @@\n-  \/\/ HeapRegionClosure. The worker_id will determine where in the part to start the iteration\n+  \/\/ G1HeapRegionClosure. The worker_id will determine where in the part to start the iteration\n@@ -202,2 +202,2 @@\n-  void iterate_part_from(HeapRegionClosure* cl,\n-                         HeapRegionClaimer* hr_claimer,\n+  void iterate_part_from(G1HeapRegionClosure* cl,\n+                         G1HeapRegionClaimer* hr_claimer,\n@@ -246,1 +246,1 @@\n-  \/\/ Iterate over the current collection set increment applying the given HeapRegionClosure\n+  \/\/ Iterate over the current collection set increment applying the given G1HeapRegionClosure\n@@ -248,1 +248,1 @@\n-  void iterate_incremental_part_from(HeapRegionClosure* cl, HeapRegionClaimer* hr_claimer, uint worker_id) const;\n+  void iterate_incremental_part_from(G1HeapRegionClosure* cl, G1HeapRegionClaimer* hr_claimer, uint worker_id) const;\n@@ -256,4 +256,4 @@\n-  \/\/ the given HeapRegionClosure on all of them.\n-  void iterate(HeapRegionClosure* cl) const;\n-  void par_iterate(HeapRegionClosure* cl,\n-                   HeapRegionClaimer* hr_claimer,\n+  \/\/ the given G1HeapRegionClosure on all of them.\n+  void iterate(G1HeapRegionClosure* cl) const;\n+  void par_iterate(G1HeapRegionClosure* cl,\n+                   G1HeapRegionClaimer* hr_claimer,\n@@ -262,1 +262,1 @@\n-  void iterate_optional(HeapRegionClosure* cl) const;\n+  void iterate_optional(G1HeapRegionClosure* cl) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-class HeapRegionClosure;\n+class G1HeapRegionClosure;\n@@ -113,1 +113,1 @@\n-  \/\/ Removes any HeapRegions stored in this list also in the other list. The other\n+  \/\/ Removes any heap regions stored in this list also in the other list. The other\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  class G1BuildCandidateRegionsClosure : public HeapRegionClosure {\n+  class G1BuildCandidateRegionsClosure : public G1HeapRegionClosure {\n@@ -180,1 +180,1 @@\n-  HeapRegionClaimer _hrclaimer;\n+  G1HeapRegionClaimer _hrclaimer;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-HeapRegionRange::HeapRegionRange(uint start, uint end) :\n+G1HeapRegionRange::G1HeapRegionRange(uint start, uint end) :\n@@ -100,1 +100,1 @@\n-HeapRegionRange G1CommittedRegionMap::next_active_range(uint offset) const {\n+G1HeapRegionRange G1CommittedRegionMap::next_active_range(uint offset) const {\n@@ -105,1 +105,1 @@\n-    return HeapRegionRange(max_length(), max_length());\n+    return G1HeapRegionRange(max_length(), max_length());\n@@ -111,1 +111,1 @@\n-  return HeapRegionRange(start, end);\n+  return G1HeapRegionRange(start, end);\n@@ -114,1 +114,1 @@\n-HeapRegionRange G1CommittedRegionMap::next_committable_range(uint offset) const {\n+G1HeapRegionRange G1CommittedRegionMap::next_committable_range(uint offset) const {\n@@ -122,1 +122,1 @@\n-    return HeapRegionRange(max_length(), max_length());\n+    return G1HeapRegionRange(max_length(), max_length());\n@@ -128,1 +128,1 @@\n-  return HeapRegionRange(start, end);\n+  return G1HeapRegionRange(start, end);\n@@ -131,1 +131,1 @@\n-HeapRegionRange G1CommittedRegionMap::next_inactive_range(uint offset) const {\n+G1HeapRegionRange G1CommittedRegionMap::next_inactive_range(uint offset) const {\n@@ -137,1 +137,1 @@\n-    return HeapRegionRange(max_length(), max_length());\n+    return G1HeapRegionRange(max_length(), max_length());\n@@ -143,1 +143,1 @@\n-  return HeapRegionRange(start, end);\n+  return G1HeapRegionRange(start, end);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-class HeapRegionRange : public StackObj {\n+class G1HeapRegionRange : public StackObj {\n@@ -39,1 +39,1 @@\n-  HeapRegionRange(uint start, uint end);\n+  G1HeapRegionRange(uint start, uint end);\n@@ -104,1 +104,1 @@\n-  HeapRegionRange next_active_range(uint offset) const;\n+  G1HeapRegionRange next_active_range(uint offset) const;\n@@ -106,1 +106,1 @@\n-  HeapRegionRange next_inactive_range(uint offset) const;\n+  G1HeapRegionRange next_inactive_range(uint offset) const;\n@@ -110,1 +110,1 @@\n-  HeapRegionRange next_committable_range(uint offset) const;\n+  G1HeapRegionRange next_committable_range(uint offset) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -678,1 +678,1 @@\n-  class G1ClearBitmapHRClosure : public HeapRegionClosure {\n+  class G1ClearBitmapHRClosure : public G1HeapRegionClosure {\n@@ -718,1 +718,1 @@\n-      HeapRegionClosure(),\n+      G1HeapRegionClosure(),\n@@ -762,1 +762,1 @@\n-  HeapRegionClaimer _hr_claimer;\n+  G1HeapRegionClaimer _hr_claimer;\n@@ -846,1 +846,1 @@\n-  HeapRegionClaimer _claimer;\n+  G1HeapRegionClaimer _claimer;\n@@ -866,1 +866,1 @@\n-class NoteStartOfMarkHRClosure : public HeapRegionClosure {\n+class NoteStartOfMarkHRClosure : public G1HeapRegionClosure {\n@@ -870,1 +870,1 @@\n-  NoteStartOfMarkHRClosure() : HeapRegionClosure(), _cm(G1CollectedHeap::heap()->concurrent_mark()) { }\n+  NoteStartOfMarkHRClosure() : G1HeapRegionClosure(), _cm(G1CollectedHeap::heap()->concurrent_mark()) { }\n@@ -1207,1 +1207,1 @@\n-  HeapRegionClaimer _hrclaimer;\n+  G1HeapRegionClaimer _hrclaimer;\n@@ -1212,1 +1212,1 @@\n-  FreeRegionList _cleanup_list;\n+  G1FreeRegionList _cleanup_list;\n@@ -1214,1 +1214,1 @@\n-  struct G1OnRegionClosure : public HeapRegionClosure {\n+  struct G1OnRegionClosure : public G1HeapRegionClosure {\n@@ -1223,1 +1223,1 @@\n-    FreeRegionList* _local_cleanup_list;\n+    G1FreeRegionList* _local_cleanup_list;\n@@ -1227,1 +1227,1 @@\n-                      FreeRegionList* local_cleanup_list) :\n+                      G1FreeRegionList* local_cleanup_list) :\n@@ -1328,1 +1328,1 @@\n-    FreeRegionList local_cleanup_list(\"Local Cleanup List\");\n+    G1FreeRegionList local_cleanup_list(\"Local Cleanup List\");\n@@ -1355,1 +1355,1 @@\n-class G1UpdateRegionsAfterRebuild : public HeapRegionClosure {\n+class G1UpdateRegionsAfterRebuild : public G1HeapRegionClosure {\n@@ -3081,1 +3081,1 @@\n-  _total_remset_bytes += HeapRegionRemSet::static_mem_size();\n+  _total_remset_bytes += G1HeapRegionRemSet::static_mem_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -952,1 +952,1 @@\n-class G1PrintRegionLivenessInfoClosure : public HeapRegionClosure {\n+class G1PrintRegionLivenessInfoClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  HeapRegionClaimer _hr_claimer;\n+  G1HeapRegionClaimer _hr_claimer;\n@@ -70,1 +70,1 @@\n-  class G1RebuildRSAndScrubRegionClosure : public HeapRegionClosure {\n+  class G1RebuildRSAndScrubRegionClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRebuildAndScrub.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,1 +256,1 @@\n-class G1ConcurrentRefine::RemSetSamplingClosure : public HeapRegionClosure {\n+class G1ConcurrentRefine::RemSetSamplingClosure : public G1HeapRegionClosure {\n@@ -266,1 +266,1 @@\n-    HeapRegionRemSet* rem_set = r->rem_set();\n+    G1HeapRegionRemSet* rem_set = r->rem_set();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-void G1EvacFailureRegions::par_iterate(HeapRegionClosure* closure,\n-                                       HeapRegionClaimer* hrclaimer,\n+void G1EvacFailureRegions::par_iterate(G1HeapRegionClosure* closure,\n+                                       G1HeapRegionClaimer* hrclaimer,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-class HeapRegionClosure;\n-class HeapRegionClaimer;\n+class G1HeapRegionClaimer;\n+class G1HeapRegionClosure;\n@@ -73,2 +73,2 @@\n-  void par_iterate(HeapRegionClosure* closure,\n-                   HeapRegionClaimer* hrclaimer,\n+  void par_iterate(G1HeapRegionClosure* closure,\n+                   G1HeapRegionClaimer* hrclaimer,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-class PrepareRegionsClosure : public HeapRegionClosure {\n+class PrepareRegionsClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-class G1AdjustRegionClosure : public HeapRegionClosure {\n+class G1AdjustRegionClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-  HeapRegionClaimer        _hrclaimer;\n+  G1HeapRegionClaimer      _hrclaimer;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-  HeapRegionClaimer _claimer;\n+  G1HeapRegionClaimer _claimer;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-\/\/ This table is used to store attribute values of all HeapRegions that need\n+\/\/ This table is used to store attribute values of all heap regions that need\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-class G1DetermineCompactionQueueClosure : public HeapRegionClosure {\n+class G1DetermineCompactionQueueClosure : public G1HeapRegionClosure {\n@@ -65,1 +65,1 @@\n-  HeapRegionClaimer _hrclaimer;\n+  G1HeapRegionClaimer _hrclaimer;\n@@ -77,1 +77,1 @@\n-  class G1CalculatePointersClosure : public HeapRegionClosure {\n+  class G1CalculatePointersClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-  HeapRegionClaimer _claimer;\n+  G1HeapRegionClaimer _claimer;\n@@ -34,1 +34,1 @@\n-  class G1ResetMetadataClosure : public HeapRegionClosure {\n+  class G1ResetMetadataClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCResetMetadataTask.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  return HeapRegionBounds::max_size();\n+  return G1HeapRegionBounds::max_size();\n@@ -62,1 +62,1 @@\n-  return HeapRegionBounds::min_size() >> LogHeapWordSize;\n+  return G1HeapRegionBounds::min_size() >> LogHeapWordSize;\n@@ -69,3 +69,3 @@\n-    region_size = clamp(max_heap_size \/ HeapRegionBounds::target_number(),\n-                        HeapRegionBounds::min_size(),\n-                        HeapRegionBounds::max_ergonomics_size());\n+    region_size = clamp(max_heap_size \/ G1HeapRegionBounds::target_number(),\n+                        G1HeapRegionBounds::min_size(),\n+                        G1HeapRegionBounds::max_ergonomics_size());\n@@ -79,1 +79,1 @@\n-  region_size = clamp(region_size, HeapRegionBounds::min_size(), HeapRegionBounds::max_size());\n+  region_size = clamp(region_size, G1HeapRegionBounds::min_size(), G1HeapRegionBounds::max_size());\n@@ -250,1 +250,1 @@\n-  _rem_set = new HeapRegionRemSet(this, config);\n+  _rem_set = new G1HeapRegionRemSet(this, config);\n@@ -267,5 +267,5 @@\n-  HeapRegionTracer::send_region_type_change(_hrm_index,\n-                                            get_trace_type(),\n-                                            to,\n-                                            (uintptr_t)bottom(),\n-                                            used());\n+  G1HeapRegionTracer::send_region_type_change(_hrm_index,\n+                                              get_trace_type(),\n+                                              to,\n+                                              (uintptr_t)bottom(),\n+                                              used());\n@@ -380,1 +380,1 @@\n-  HeapRegionRemSet* hrrs = rem_set();\n+  G1HeapRegionRemSet* hrrs = rem_set();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-class HeapRegionRemSet;\n@@ -45,1 +44,2 @@\n-class HeapRegionSetBase;\n+class G1HeapRegionRemSet;\n+class G1HeapRegionSetBase;\n@@ -200,1 +200,1 @@\n-  HeapRegionRemSet* _rem_set;\n+  G1HeapRegionRemSet* _rem_set;\n@@ -205,1 +205,1 @@\n-  HeapRegionType _type;\n+  G1HeapRegionType _type;\n@@ -216,1 +216,1 @@\n-  \/\/ Fields used by the HeapRegionSetBase class and subclasses.\n+  \/\/ Fields used by the G1HeapRegionSetBase class and subclasses.\n@@ -220,1 +220,1 @@\n-  HeapRegionSetBase* _containing_set;\n+  G1HeapRegionSetBase* _containing_set;\n@@ -281,1 +281,1 @@\n-  \/\/ If this region is a member of a HeapRegionManager, the index in that\n+  \/\/ If this region is a member of a G1HeapRegionManager, the index in that\n@@ -423,1 +423,1 @@\n-  void set_rem_set(HeapRegionRemSet* rem_set) { _rem_set = rem_set; }\n+  void set_rem_set(G1HeapRegionRemSet* rem_set) { _rem_set = rem_set; }\n@@ -425,1 +425,1 @@\n-  HeapRegionRemSet* rem_set() const {\n+  G1HeapRegionRemSet* rem_set() const {\n@@ -433,1 +433,1 @@\n-  \/\/ Methods used by the HeapRegionSetBase class and subclasses.\n+  \/\/ Methods used by the G1HeapRegionSetBase class and subclasses.\n@@ -450,1 +450,1 @@\n-  void set_containing_set(HeapRegionSetBase* containing_set) {\n+  void set_containing_set(G1HeapRegionSetBase* containing_set) {\n@@ -460,1 +460,1 @@\n-  HeapRegionSetBase* containing_set() { return _containing_set; }\n+  G1HeapRegionSetBase* containing_set() { return _containing_set; }\n@@ -462,1 +462,1 @@\n-  void set_containing_set(HeapRegionSetBase* containing_set) { }\n+  void set_containing_set(G1HeapRegionSetBase* containing_set) { }\n@@ -557,1 +557,1 @@\n-\/\/ HeapRegionClosure is used for iterating over regions.\n+\/\/ G1HeapRegionClosure is used for iterating over regions.\n@@ -559,2 +559,2 @@\n-class HeapRegionClosure : public StackObj {\n-  friend class HeapRegionManager;\n+class G1HeapRegionClosure : public StackObj {\n+  friend class G1HeapRegionManager;\n@@ -568,1 +568,1 @@\n-  HeapRegionClosure(): _is_complete(true) {}\n+  G1HeapRegionClosure(): _is_complete(true) {}\n@@ -578,2 +578,2 @@\n-class HeapRegionIndexClosure : public StackObj {\n-  friend class HeapRegionManager;\n+class G1HeapRegionIndexClosure : public StackObj {\n+  friend class G1HeapRegionManager;\n@@ -587,1 +587,1 @@\n-  HeapRegionIndexClosure(): _is_complete(true) {}\n+  G1HeapRegionIndexClosure(): _is_complete(true) {}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-class HeapRegionBounds : public AllStatic {\n+class G1HeapRegionBounds : public AllStatic {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionBounds.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-size_t HeapRegionBounds::min_size() {\n+size_t G1HeapRegionBounds::min_size() {\n@@ -34,1 +34,1 @@\n-size_t HeapRegionBounds::max_ergonomics_size() {\n+size_t G1HeapRegionBounds::max_ergonomics_size() {\n@@ -38,1 +38,1 @@\n-size_t HeapRegionBounds::max_size() {\n+size_t G1HeapRegionBounds::max_size() {\n@@ -42,1 +42,1 @@\n-size_t HeapRegionBounds::target_number() {\n+size_t G1HeapRegionBounds::target_number() {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionBounds.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-class DumpEventInfoClosure : public HeapRegionClosure {\n+class DumpEventInfoClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionEventSender.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-class MasterFreeRegionListChecker : public HeapRegionSetChecker {\n+class G1MasterFreeRegionListChecker : public G1HeapRegionSetChecker {\n@@ -65,1 +65,1 @@\n-HeapRegionManager::HeapRegionManager() :\n+G1HeapRegionManager::G1HeapRegionManager() :\n@@ -72,1 +72,1 @@\n-  _free_list(\"Free list\", new MasterFreeRegionListChecker())\n+  _free_list(\"Free list\", new G1MasterFreeRegionListChecker())\n@@ -75,4 +75,4 @@\n-void HeapRegionManager::initialize(G1RegionToSpaceMapper* heap_storage,\n-                                   G1RegionToSpaceMapper* bitmap,\n-                                   G1RegionToSpaceMapper* bot,\n-                                   G1RegionToSpaceMapper* cardtable) {\n+void G1HeapRegionManager::initialize(G1RegionToSpaceMapper* heap_storage,\n+                                     G1RegionToSpaceMapper* bitmap,\n+                                     G1RegionToSpaceMapper* bot,\n+                                     G1RegionToSpaceMapper* cardtable) {\n@@ -93,1 +93,1 @@\n-G1HeapRegion* HeapRegionManager::allocate_free_region(HeapRegionType type, uint requested_node_index) {\n+G1HeapRegion* G1HeapRegionManager::allocate_free_region(G1HeapRegionType type, uint requested_node_index) {\n@@ -121,1 +121,1 @@\n-G1HeapRegion* HeapRegionManager::allocate_humongous_from_free_list(uint num_regions) {\n+G1HeapRegion* G1HeapRegionManager::allocate_humongous_from_free_list(uint num_regions) {\n@@ -129,1 +129,1 @@\n-G1HeapRegion* HeapRegionManager::allocate_humongous_allow_expand(uint num_regions) {\n+G1HeapRegion* G1HeapRegionManager::allocate_humongous_allow_expand(uint num_regions) {\n@@ -138,1 +138,1 @@\n-G1HeapRegion* HeapRegionManager::allocate_humongous(uint num_regions) {\n+G1HeapRegion* G1HeapRegionManager::allocate_humongous(uint num_regions) {\n@@ -141,1 +141,1 @@\n-    return allocate_free_region(HeapRegionType::Humongous, G1NUMA::AnyNodeIndex);\n+    return allocate_free_region(G1HeapRegionType::Humongous, G1NUMA::AnyNodeIndex);\n@@ -146,1 +146,1 @@\n-G1HeapRegion* HeapRegionManager::expand_and_allocate_humongous(uint num_regions) {\n+G1HeapRegion* G1HeapRegionManager::expand_and_allocate_humongous(uint num_regions) {\n@@ -151,1 +151,1 @@\n-bool HeapRegionManager::is_free(G1HeapRegion* hr) const {\n+bool G1HeapRegionManager::is_free(G1HeapRegion* hr) const {\n@@ -156,1 +156,1 @@\n-G1HeapRegion* HeapRegionManager::new_heap_region(uint hrm_index) {\n+G1HeapRegion* G1HeapRegionManager::new_heap_region(uint hrm_index) {\n@@ -164,1 +164,1 @@\n-void HeapRegionManager::expand(uint start, uint num_regions, WorkerThreads* pretouch_workers) {\n+void G1HeapRegionManager::expand(uint start, uint num_regions, WorkerThreads* pretouch_workers) {\n@@ -179,1 +179,1 @@\n-void HeapRegionManager::commit_regions(uint index, size_t num_regions, WorkerThreads* pretouch_workers) {\n+void G1HeapRegionManager::commit_regions(uint index, size_t num_regions, WorkerThreads* pretouch_workers) {\n@@ -193,1 +193,1 @@\n-void HeapRegionManager::uncommit_regions(uint start, uint num_regions) {\n+void G1HeapRegionManager::uncommit_regions(uint start, uint num_regions) {\n@@ -218,1 +218,1 @@\n-void HeapRegionManager::initialize_regions(uint start, uint num_regions) {\n+void G1HeapRegionManager::initialize_regions(uint start, uint num_regions) {\n@@ -230,1 +230,1 @@\n-void HeapRegionManager::activate_regions(uint start, uint num_regions) {\n+void G1HeapRegionManager::activate_regions(uint start, uint num_regions) {\n@@ -235,1 +235,1 @@\n-void HeapRegionManager::reactivate_regions(uint start, uint num_regions) {\n+void G1HeapRegionManager::reactivate_regions(uint start, uint num_regions) {\n@@ -244,1 +244,1 @@\n-void HeapRegionManager::deactivate_regions(uint start, uint num_regions) {\n+void G1HeapRegionManager::deactivate_regions(uint start, uint num_regions) {\n@@ -259,1 +259,1 @@\n-void HeapRegionManager::clear_auxiliary_data_structures(uint start, uint num_regions) {\n+void G1HeapRegionManager::clear_auxiliary_data_structures(uint start, uint num_regions) {\n@@ -268,1 +268,1 @@\n-MemoryUsage HeapRegionManager::get_auxiliary_data_memory_usage() const {\n+MemoryUsage G1HeapRegionManager::get_auxiliary_data_memory_usage() const {\n@@ -282,1 +282,1 @@\n-bool HeapRegionManager::has_inactive_regions() const {\n+bool G1HeapRegionManager::has_inactive_regions() const {\n@@ -286,1 +286,1 @@\n-uint HeapRegionManager::uncommit_inactive_regions(uint limit) {\n+uint G1HeapRegionManager::uncommit_inactive_regions(uint limit) {\n@@ -293,1 +293,1 @@\n-    HeapRegionRange range = _committed_map.next_inactive_range(offset);\n+    G1HeapRegionRange range = _committed_map.next_inactive_range(offset);\n@@ -310,1 +310,1 @@\n-uint HeapRegionManager::expand_inactive(uint num_regions) {\n+uint G1HeapRegionManager::expand_inactive(uint num_regions) {\n@@ -315,1 +315,1 @@\n-    HeapRegionRange regions = _committed_map.next_inactive_range(offset);\n+    G1HeapRegionRange regions = _committed_map.next_inactive_range(offset);\n@@ -330,1 +330,1 @@\n-uint HeapRegionManager::expand_any(uint num_regions, WorkerThreads* pretouch_workers) {\n+uint G1HeapRegionManager::expand_any(uint num_regions, WorkerThreads* pretouch_workers) {\n@@ -337,1 +337,1 @@\n-    HeapRegionRange regions = _committed_map.next_committable_range(offset);\n+    G1HeapRegionRange regions = _committed_map.next_committable_range(offset);\n@@ -352,1 +352,1 @@\n-uint HeapRegionManager::expand_by(uint num_regions, WorkerThreads* pretouch_workers) {\n+uint G1HeapRegionManager::expand_by(uint num_regions, WorkerThreads* pretouch_workers) {\n@@ -368,1 +368,1 @@\n-void HeapRegionManager::expand_exact(uint start, uint num_regions, WorkerThreads* pretouch_workers) {\n+void G1HeapRegionManager::expand_exact(uint start, uint num_regions, WorkerThreads* pretouch_workers) {\n@@ -396,1 +396,1 @@\n-uint HeapRegionManager::expand_on_preferred_node(uint preferred_index) {\n+uint G1HeapRegionManager::expand_on_preferred_node(uint preferred_index) {\n@@ -423,1 +423,1 @@\n-bool HeapRegionManager::is_on_preferred_index(uint region_index, uint preferred_node_index) {\n+bool G1HeapRegionManager::is_on_preferred_index(uint region_index, uint preferred_node_index) {\n@@ -429,1 +429,1 @@\n-void HeapRegionManager::assert_contiguous_range(uint start, uint num_regions) {\n+void G1HeapRegionManager::assert_contiguous_range(uint start, uint num_regions) {\n@@ -442,1 +442,1 @@\n-uint HeapRegionManager::find_contiguous_in_range(uint start, uint end, uint num_regions) {\n+uint G1HeapRegionManager::find_contiguous_in_range(uint start, uint end, uint num_regions) {\n@@ -468,1 +468,1 @@\n-uint HeapRegionManager::find_contiguous_in_free_list(uint num_regions) {\n+uint G1HeapRegionManager::find_contiguous_in_free_list(uint num_regions) {\n@@ -470,1 +470,1 @@\n-  HeapRegionRange range(0,0);\n+  G1HeapRegionRange range(0,0);\n@@ -480,1 +480,1 @@\n-uint HeapRegionManager::find_contiguous_allow_expand(uint num_regions) {\n+uint G1HeapRegionManager::find_contiguous_allow_expand(uint num_regions) {\n@@ -489,1 +489,1 @@\n-G1HeapRegion* HeapRegionManager::next_region_in_heap(const G1HeapRegion* r) const {\n+G1HeapRegion* G1HeapRegionManager::next_region_in_heap(const G1HeapRegion* r) const {\n@@ -501,1 +501,1 @@\n-void HeapRegionManager::iterate(HeapRegionClosure* blk) const {\n+void G1HeapRegionManager::iterate(G1HeapRegionClosure* blk) const {\n@@ -517,1 +517,1 @@\n-void HeapRegionManager::iterate(HeapRegionIndexClosure* blk) const {\n+void G1HeapRegionManager::iterate(G1HeapRegionIndexClosure* blk) const {\n@@ -532,1 +532,1 @@\n-uint HeapRegionManager::find_highest_free(bool* expanded) {\n+uint G1HeapRegionManager::find_highest_free(bool* expanded) {\n@@ -554,1 +554,1 @@\n-bool HeapRegionManager::allocate_containing_regions(MemRegion range, size_t* commit_count, WorkerThreads* pretouch_workers) {\n+bool G1HeapRegionManager::allocate_containing_regions(MemRegion range, size_t* commit_count, WorkerThreads* pretouch_workers) {\n@@ -577,1 +577,1 @@\n-void HeapRegionManager::par_iterate(HeapRegionClosure* blk, HeapRegionClaimer* hrclaimer, const uint start_index) const {\n+void G1HeapRegionManager::par_iterate(G1HeapRegionClosure* blk, G1HeapRegionClaimer* hrclaimer, const uint start_index) const {\n@@ -606,1 +606,1 @@\n-uint HeapRegionManager::shrink_by(uint num_regions_to_remove) {\n+uint G1HeapRegionManager::shrink_by(uint num_regions_to_remove) {\n@@ -636,1 +636,1 @@\n-void HeapRegionManager::shrink_at(uint index, size_t num_regions) {\n+void G1HeapRegionManager::shrink_at(uint index, size_t num_regions) {\n@@ -648,1 +648,1 @@\n-uint HeapRegionManager::find_empty_from_idx_reverse(uint start_idx, uint* res_idx) const {\n+uint G1HeapRegionManager::find_empty_from_idx_reverse(uint start_idx, uint* res_idx) const {\n@@ -682,1 +682,1 @@\n-void HeapRegionManager::verify() {\n+void G1HeapRegionManager::verify() {\n@@ -727,1 +727,1 @@\n-void HeapRegionManager::verify_optional() {\n+void G1HeapRegionManager::verify_optional() {\n@@ -732,1 +732,1 @@\n-HeapRegionClaimer::HeapRegionClaimer(uint n_workers) :\n+G1HeapRegionClaimer::G1HeapRegionClaimer(uint n_workers) :\n@@ -739,1 +739,1 @@\n-HeapRegionClaimer::~HeapRegionClaimer() {\n+G1HeapRegionClaimer::~G1HeapRegionClaimer() {\n@@ -743,1 +743,1 @@\n-uint HeapRegionClaimer::offset_for_worker(uint worker_id) const {\n+uint G1HeapRegionClaimer::offset_for_worker(uint worker_id) const {\n@@ -749,1 +749,1 @@\n-bool HeapRegionClaimer::is_region_claimed(uint region_index) const {\n+bool G1HeapRegionClaimer::is_region_claimed(uint region_index) const {\n@@ -754,1 +754,1 @@\n-bool HeapRegionClaimer::claim_region(uint region_index) {\n+bool G1HeapRegionClaimer::claim_region(uint region_index) {\n@@ -761,4 +761,4 @@\n-  HeapRegionManager* _hrm;\n-  FreeRegionList*    _worker_freelists;\n-  uint               _worker_chunk_size;\n-  uint               _num_workers;\n+  G1HeapRegionManager* _hrm;\n+  G1FreeRegionList*    _worker_freelists;\n+  uint                 _worker_chunk_size;\n+  uint                 _num_workers;\n@@ -767,1 +767,1 @@\n-  G1RebuildFreeListTask(HeapRegionManager* hrm, uint num_workers) :\n+  G1RebuildFreeListTask(G1HeapRegionManager* hrm, uint num_workers) :\n@@ -770,1 +770,1 @@\n-      _worker_freelists(NEW_C_HEAP_ARRAY(FreeRegionList, num_workers, mtGC)),\n+      _worker_freelists(NEW_C_HEAP_ARRAY(G1FreeRegionList, num_workers, mtGC)),\n@@ -774,1 +774,1 @@\n-      ::new (&_worker_freelists[worker]) FreeRegionList(\"Appendable Worker Free List\");\n+      ::new (&_worker_freelists[worker]) G1FreeRegionList(\"Appendable Worker Free List\");\n@@ -780,1 +780,1 @@\n-      _worker_freelists[worker].~FreeRegionList();\n+      _worker_freelists[worker].~G1FreeRegionList();\n@@ -782,1 +782,1 @@\n-    FREE_C_HEAP_ARRAY(FreeRegionList, _worker_freelists);\n+    FREE_C_HEAP_ARRAY(G1FreeRegionList, _worker_freelists);\n@@ -785,1 +785,1 @@\n-  FreeRegionList* worker_freelist(uint worker) {\n+  G1FreeRegionList* worker_freelist(uint worker) {\n@@ -803,1 +803,1 @@\n-    FreeRegionList* free_list = worker_freelist(worker_id);\n+    G1FreeRegionList* free_list = worker_freelist(worker_id);\n@@ -818,1 +818,1 @@\n-void HeapRegionManager::rebuild_free_list(WorkerThreads* workers) {\n+void G1HeapRegionManager::rebuild_free_list(WorkerThreads* workers) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":69,"deletions":69,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,3 @@\n-class HeapRegionClosure;\n-class HeapRegionClaimer;\n-class FreeRegionList;\n+class G1HeapRegionClaimer;\n+class G1HeapRegionClosure;\n+class G1FreeRegionList;\n@@ -52,1 +52,1 @@\n-\/\/ HeapRegions are kept in the _regions array in address order. A region's\n+\/\/ G1HeapRegions are kept in the _regions array in address order. A region's\n@@ -68,1 +68,1 @@\n-\/\/   number of regions+1 for which we have HeapRegions.\n+\/\/   number of regions+1 for which we have G1HeapRegions.\n@@ -73,1 +73,1 @@\n-class HeapRegionManager: public CHeapObj<mtGC> {\n+class G1HeapRegionManager: public CHeapObj<mtGC> {\n@@ -75,1 +75,1 @@\n-  friend class HeapRegionClaimer;\n+  friend class G1HeapRegionClaimer;\n@@ -93,1 +93,1 @@\n-  \/\/ Initialize the HeapRegions in the range and put them on the free list.\n+  \/\/ Initialize the G1HeapRegions in the range and put them on the free list.\n@@ -126,1 +126,1 @@\n-  FreeRegionList _free_list;\n+  G1FreeRegionList _free_list;\n@@ -160,1 +160,1 @@\n-  HeapRegionManager();\n+  G1HeapRegionManager();\n@@ -199,1 +199,1 @@\n-  void insert_list_into_free_list(FreeRegionList* list) {\n+  void insert_list_into_free_list(G1FreeRegionList* list) {\n@@ -204,1 +204,1 @@\n-  G1HeapRegion* allocate_free_region(HeapRegionType type, uint requested_node_index);\n+  G1HeapRegion* allocate_free_region(G1HeapRegionType type, uint requested_node_index);\n@@ -249,1 +249,1 @@\n-  \/\/ HeapRegions, or re-use existing ones. Returns the number of regions the\n+  \/\/ G1HeapRegions, or re-use existing ones. Returns the number of regions the\n@@ -271,2 +271,2 @@\n-  void iterate(HeapRegionClosure* blk) const;\n-  void iterate(HeapRegionIndexClosure* blk) const;\n+  void iterate(G1HeapRegionClosure* blk) const;\n+  void iterate(G1HeapRegionIndexClosure* blk) const;\n@@ -274,1 +274,1 @@\n-  void par_iterate(HeapRegionClosure* blk, HeapRegionClaimer* hrclaimer, const uint start_index) const;\n+  void par_iterate(G1HeapRegionClosure* blk, G1HeapRegionClaimer* hrclaimer, const uint start_index) const;\n@@ -297,1 +297,1 @@\n-\/\/ The HeapRegionClaimer is used during parallel iteration over heap regions,\n+\/\/ The G1HeapRegionClaimer is used during parallel iteration over heap regions,\n@@ -299,1 +299,1 @@\n-class HeapRegionClaimer : public StackObj {\n+class G1HeapRegionClaimer : public StackObj {\n@@ -308,2 +308,2 @@\n-  HeapRegionClaimer(uint n_workers);\n-  ~HeapRegionClaimer();\n+  G1HeapRegionClaimer(uint n_workers);\n+  ~G1HeapRegionClaimer();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-inline bool HeapRegionManager::is_available(uint region) const {\n+inline bool G1HeapRegionManager::is_available(uint region) const {\n@@ -38,1 +38,1 @@\n-inline G1HeapRegion* HeapRegionManager::addr_to_region(HeapWord* addr) const {\n+inline G1HeapRegion* G1HeapRegionManager::addr_to_region(HeapWord* addr) const {\n@@ -46,1 +46,1 @@\n-inline G1HeapRegion* HeapRegionManager::at(uint index) const {\n+inline G1HeapRegion* G1HeapRegionManager::at(uint index) const {\n@@ -54,1 +54,1 @@\n-inline G1HeapRegion* HeapRegionManager::at_or_null(uint index) const {\n+inline G1HeapRegion* G1HeapRegionManager::at_or_null(uint index) const {\n@@ -64,1 +64,1 @@\n-inline G1HeapRegion* HeapRegionManager::next_region_in_humongous(G1HeapRegion* hr) const {\n+inline G1HeapRegion* G1HeapRegionManager::next_region_in_humongous(G1HeapRegion* hr) const {\n@@ -76,1 +76,1 @@\n-inline void HeapRegionManager::insert_into_free_list(G1HeapRegion* hr) {\n+inline void G1HeapRegionManager::insert_into_free_list(G1HeapRegion* hr) {\n@@ -80,1 +80,1 @@\n-inline G1HeapRegion* HeapRegionManager::allocate_free_regions_starting_at(uint first, uint num_regions) {\n+inline G1HeapRegion* G1HeapRegionManager::allocate_free_regions_starting_at(uint first, uint num_regions) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-class FreeRegionList;\n+class G1FreeRegionList;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-HeapWord* HeapRegionRemSet::_heap_base_address = nullptr;\n+HeapWord* G1HeapRegionRemSet::_heap_base_address = nullptr;\n@@ -50,2 +50,2 @@\n-const char* HeapRegionRemSet::_state_strings[] =  {\"Untracked\", \"Updating\", \"Complete\"};\n-const char* HeapRegionRemSet::_short_state_strings[] =  {\"UNTRA\", \"UPDAT\", \"CMPLT\"};\n+const char* G1HeapRegionRemSet::_state_strings[] =  {\"Untracked\", \"Updating\", \"Complete\"};\n+const char* G1HeapRegionRemSet::_short_state_strings[] =  {\"UNTRA\", \"UPDAT\", \"CMPLT\"};\n@@ -53,1 +53,1 @@\n-void HeapRegionRemSet::initialize(MemRegion reserved) {\n+void G1HeapRegionRemSet::initialize(MemRegion reserved) {\n@@ -58,1 +58,1 @@\n-HeapRegionRemSet::HeapRegionRemSet(G1HeapRegion* hr,\n+G1HeapRegionRemSet::G1HeapRegionRemSet(G1HeapRegion* hr,\n@@ -66,1 +66,1 @@\n-void HeapRegionRemSet::clear_fcc() {\n+void G1HeapRegionRemSet::clear_fcc() {\n@@ -70,1 +70,1 @@\n-void HeapRegionRemSet::clear(bool only_cardset, bool keep_tracked) {\n+void G1HeapRegionRemSet::clear(bool only_cardset, bool keep_tracked) {\n@@ -84,1 +84,1 @@\n-void HeapRegionRemSet::reset_table_scanner() {\n+void G1HeapRegionRemSet::reset_table_scanner() {\n@@ -89,1 +89,1 @@\n-G1MonotonicArenaMemoryStats HeapRegionRemSet::card_set_memory_stats() const {\n+G1MonotonicArenaMemoryStats G1HeapRegionRemSet::card_set_memory_stats() const {\n@@ -93,2 +93,2 @@\n-void HeapRegionRemSet::print_static_mem_size(outputStream* out) {\n-  out->print_cr(\"  Static structures = \" SIZE_FORMAT, HeapRegionRemSet::static_mem_size());\n+void G1HeapRegionRemSet::print_static_mem_size(outputStream* out) {\n+  out->print_cr(\"  Static structures = \" SIZE_FORMAT, G1HeapRegionRemSet::static_mem_size());\n@@ -104,1 +104,1 @@\n-void HeapRegionRemSet::add_code_root(nmethod* nm) {\n+void G1HeapRegionRemSet::add_code_root(nmethod* nm) {\n@@ -109,1 +109,1 @@\n-void HeapRegionRemSet::remove_code_root(nmethod* nm) {\n+void G1HeapRegionRemSet::remove_code_root(nmethod* nm) {\n@@ -118,1 +118,1 @@\n-void HeapRegionRemSet::bulk_remove_code_roots() {\n+void G1HeapRegionRemSet::bulk_remove_code_roots() {\n@@ -122,1 +122,1 @@\n-void HeapRegionRemSet::code_roots_do(NMethodClosure* blk) const {\n+void G1HeapRegionRemSet::code_roots_do(NMethodClosure* blk) const {\n@@ -126,1 +126,1 @@\n-void HeapRegionRemSet::clean_code_roots(G1HeapRegion* hr) {\n+void G1HeapRegionRemSet::clean_code_roots(G1HeapRegion* hr) {\n@@ -130,1 +130,1 @@\n-size_t HeapRegionRemSet::code_roots_mem_size() {\n+size_t G1HeapRegionRemSet::code_roots_mem_size() {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-class HeapRegionRemSet : public CHeapObj<mtGC> {\n+class G1HeapRegionRemSet : public CHeapObj<mtGC> {\n@@ -60,1 +60,1 @@\n-  HeapRegionRemSet(G1HeapRegion* hr, G1CardSetConfiguration* config);\n+  G1HeapRegionRemSet(G1HeapRegion* hr, G1CardSetConfiguration* config);\n@@ -129,1 +129,1 @@\n-           + (sizeof(HeapRegionRemSet) - sizeof(G1CardSet)) \/\/ Avoid double-counting G1CardSet.\n+           + (sizeof(G1HeapRegionRemSet) - sizeof(G1CardSet)) \/\/ Avoid double-counting G1CardSet.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-void HeapRegionRemSet::set_state_untracked() {\n+void G1HeapRegionRemSet::set_state_untracked() {\n@@ -46,1 +46,1 @@\n-void HeapRegionRemSet::set_state_updating() {\n+void G1HeapRegionRemSet::set_state_updating() {\n@@ -53,1 +53,1 @@\n-void HeapRegionRemSet::set_state_complete() {\n+void G1HeapRegionRemSet::set_state_complete() {\n@@ -110,1 +110,1 @@\n-inline void HeapRegionRemSet::iterate_for_merge(CardOrRangeVisitor& cl) {\n+inline void G1HeapRegionRemSet::iterate_for_merge(CardOrRangeVisitor& cl) {\n@@ -119,1 +119,1 @@\n-uintptr_t HeapRegionRemSet::to_card(OopOrNarrowOopStar from) const {\n+uintptr_t G1HeapRegionRemSet::to_card(OopOrNarrowOopStar from) const {\n@@ -123,1 +123,1 @@\n-void HeapRegionRemSet::add_reference(OopOrNarrowOopStar from, uint tid) {\n+void G1HeapRegionRemSet::add_reference(OopOrNarrowOopStar from, uint tid) {\n@@ -139,1 +139,1 @@\n-bool HeapRegionRemSet::contains_reference(OopOrNarrowOopStar from) {\n+bool G1HeapRegionRemSet::contains_reference(OopOrNarrowOopStar from) {\n@@ -143,1 +143,1 @@\n-void HeapRegionRemSet::print_info(outputStream* st, OopOrNarrowOopStar from) {\n+void G1HeapRegionRemSet::print_info(outputStream* st, OopOrNarrowOopStar from) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.inline.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-uint FreeRegionList::_unrealistically_long_length = 0;\n+uint G1FreeRegionList::_unrealistically_long_length = 0;\n@@ -34,1 +34,1 @@\n-void HeapRegionSetBase::verify_region(G1HeapRegion* hr) {\n+void G1HeapRegionSetBase::verify_region(G1HeapRegion* hr) {\n@@ -44,1 +44,1 @@\n-void HeapRegionSetBase::verify() {\n+void G1HeapRegionSetBase::verify() {\n@@ -56,1 +56,1 @@\n-void HeapRegionSetBase::verify_start() {\n+void G1HeapRegionSetBase::verify_start() {\n@@ -62,1 +62,1 @@\n-  HeapRegionSetBase::verify();\n+  G1HeapRegionSetBase::verify();\n@@ -67,1 +67,1 @@\n-void HeapRegionSetBase::verify_end() {\n+void G1HeapRegionSetBase::verify_end() {\n@@ -75,1 +75,1 @@\n-void HeapRegionSetBase::print_on(outputStream* out, bool print_contents) {\n+void G1HeapRegionSetBase::print_on(outputStream* out, bool print_contents) {\n@@ -82,1 +82,1 @@\n-HeapRegionSetBase::HeapRegionSetBase(const char* name, HeapRegionSetChecker* checker)\n+G1HeapRegionSetBase::G1HeapRegionSetBase(const char* name, G1HeapRegionSetChecker* checker)\n@@ -87,1 +87,1 @@\n-void FreeRegionList::set_unrealistically_long_length(uint len) {\n+void G1FreeRegionList::set_unrealistically_long_length(uint len) {\n@@ -92,1 +92,1 @@\n-void FreeRegionList::abandon() {\n+void G1FreeRegionList::abandon() {\n@@ -98,1 +98,1 @@\n-void FreeRegionList::remove_all() {\n+void G1FreeRegionList::remove_all() {\n@@ -120,1 +120,1 @@\n-void FreeRegionList::add_list_common_start(FreeRegionList* from_list) {\n+void G1FreeRegionList::add_list_common_start(G1FreeRegionList* from_list) {\n@@ -135,1 +135,1 @@\n-  FreeRegionListIterator iter(from_list);\n+  G1FreeRegionListIterator iter(from_list);\n@@ -147,1 +147,1 @@\n-void FreeRegionList::add_list_common_end(FreeRegionList* from_list) {\n+void G1FreeRegionList::add_list_common_end(G1FreeRegionList* from_list) {\n@@ -155,1 +155,1 @@\n-void FreeRegionList::append_ordered(FreeRegionList* from_list) {\n+void G1FreeRegionList::append_ordered(G1FreeRegionList* from_list) {\n@@ -180,1 +180,1 @@\n-void FreeRegionList::add_ordered(FreeRegionList* from_list) {\n+void G1FreeRegionList::add_ordered(G1FreeRegionList* from_list) {\n@@ -230,1 +230,1 @@\n-void FreeRegionList::verify_region_to_remove(G1HeapRegion* curr, G1HeapRegion* next) {\n+void G1FreeRegionList::verify_region_to_remove(G1HeapRegion* curr, G1HeapRegion* next) {\n@@ -247,1 +247,1 @@\n-void FreeRegionList::remove_starting_at(G1HeapRegion* first, uint num_regions) {\n+void G1FreeRegionList::remove_starting_at(G1HeapRegion* first, uint num_regions) {\n@@ -307,2 +307,2 @@\n-void FreeRegionList::verify() {\n-  \/\/ See comment in HeapRegionSetBase::verify() about MT safety and\n+void G1FreeRegionList::verify() {\n+  \/\/ See comment in G1HeapRegionSetBase::verify() about MT safety and\n@@ -320,1 +320,1 @@\n-void FreeRegionList::clear() {\n+void G1FreeRegionList::clear() {\n@@ -331,1 +331,1 @@\n-void FreeRegionList::verify_list() {\n+void G1FreeRegionList::verify_list() {\n@@ -367,2 +367,2 @@\n-FreeRegionList::FreeRegionList(const char* name, HeapRegionSetChecker* checker):\n-  HeapRegionSetBase(name, checker),\n+G1FreeRegionList::G1FreeRegionList(const char* name, G1HeapRegionSetChecker* checker):\n+  G1HeapRegionSetBase(name, checker),\n@@ -374,1 +374,1 @@\n-FreeRegionList::~FreeRegionList() {\n+G1FreeRegionList::~G1FreeRegionList() {\n@@ -380,2 +380,2 @@\n-FreeRegionList::NodeInfo::NodeInfo() : _numa(G1NUMA::numa()), _length_of_node(nullptr),\n-                                       _num_nodes(_numa->num_active_nodes()) {\n+G1FreeRegionList::NodeInfo::NodeInfo() : _numa(G1NUMA::numa()), _length_of_node(nullptr),\n+                                         _num_nodes(_numa->num_active_nodes()) {\n@@ -387,1 +387,1 @@\n-FreeRegionList::NodeInfo::~NodeInfo() {\n+G1FreeRegionList::NodeInfo::~NodeInfo() {\n@@ -391,1 +391,1 @@\n-void FreeRegionList::NodeInfo::clear() {\n+void G1FreeRegionList::NodeInfo::clear() {\n@@ -397,1 +397,1 @@\n-void FreeRegionList::NodeInfo::add(NodeInfo* info) {\n+void G1FreeRegionList::NodeInfo::add(NodeInfo* info) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionSet.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-\/\/ HeapRegionSets.\n-class HeapRegionSetChecker : public CHeapObj<mtGC> {\n+\/\/ G1HeapRegionSets.\n+class G1HeapRegionSetChecker : public CHeapObj<mtGC> {\n@@ -54,1 +54,1 @@\n-  \/\/ Verify MT safety for this HeapRegionSet.\n+  \/\/ Verify MT safety for this G1HeapRegionSet.\n@@ -56,1 +56,1 @@\n-  \/\/ Returns true if the given G1HeapRegion is of the correct type for this HeapRegionSet.\n+  \/\/ Returns true if the given G1HeapRegion is of the correct type for this G1HeapRegionSet.\n@@ -58,1 +58,1 @@\n-  \/\/ Return a description of the type of regions this HeapRegionSet contains.\n+  \/\/ Return a description of the type of regions this G1HeapRegionSet contains.\n@@ -67,1 +67,1 @@\n-class HeapRegionSetBase {\n+class G1HeapRegionSetBase {\n@@ -70,1 +70,1 @@\n-  HeapRegionSetChecker* _checker;\n+  G1HeapRegionSetChecker* _checker;\n@@ -90,1 +90,1 @@\n-  HeapRegionSetBase(const char* name, HeapRegionSetChecker* verifier);\n+  G1HeapRegionSetBase(const char* name, G1HeapRegionSetChecker* verifier);\n@@ -120,1 +120,1 @@\n-\/\/ the same interface (namely, the HeapRegionSetBase API).\n+\/\/ the same interface (namely, the G1HeapRegionSetBase API).\n@@ -122,1 +122,1 @@\n-class HeapRegionSet : public HeapRegionSetBase {\n+class G1HeapRegionSet : public G1HeapRegionSetBase {\n@@ -124,2 +124,2 @@\n-  HeapRegionSet(const char* name, HeapRegionSetChecker* checker):\n-    HeapRegionSetBase(name, checker) {\n+  G1HeapRegionSet(const char* name, G1HeapRegionSetChecker* checker):\n+    G1HeapRegionSetBase(name, checker) {\n@@ -138,1 +138,1 @@\n-class FreeRegionListIterator;\n+class G1FreeRegionListIterator;\n@@ -141,2 +141,2 @@\n-class FreeRegionList : public HeapRegionSetBase {\n-  friend class FreeRegionListIterator;\n+class G1FreeRegionList : public G1HeapRegionSetBase {\n+  friend class G1FreeRegionListIterator;\n@@ -184,2 +184,2 @@\n-  void add_list_common_start(FreeRegionList* from_list);\n-  void add_list_common_end(FreeRegionList* from_list);\n+  void add_list_common_start(G1FreeRegionList* from_list);\n+  void add_list_common_end(G1FreeRegionList* from_list);\n@@ -189,1 +189,1 @@\n-  \/\/ See the comment for HeapRegionSetBase::clear()\n+  \/\/ See the comment for G1HeapRegionSetBase::clear()\n@@ -193,2 +193,2 @@\n-  FreeRegionList(const char* name, HeapRegionSetChecker* checker = nullptr);\n-  ~FreeRegionList();\n+  G1FreeRegionList(const char* name, G1HeapRegionSetChecker* checker = nullptr);\n+  ~G1FreeRegionList();\n@@ -221,2 +221,2 @@\n-  void add_ordered(FreeRegionList* from_list);\n-  void append_ordered(FreeRegionList* from_list);\n+  void add_ordered(G1FreeRegionList* from_list);\n+  void append_ordered(G1FreeRegionList* from_list);\n@@ -238,1 +238,1 @@\n-  using HeapRegionSetBase::length;\n+  using G1HeapRegionSetBase::length;\n@@ -245,1 +245,1 @@\n-class FreeRegionListIterator : public StackObj {\n+class G1FreeRegionListIterator : public StackObj {\n@@ -247,1 +247,1 @@\n-  FreeRegionList* _list;\n+  G1FreeRegionList* _list;\n@@ -268,1 +268,1 @@\n-  FreeRegionListIterator(FreeRegionList* list)\n+  G1FreeRegionListIterator(G1FreeRegionList* list)\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionSet.hpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-inline void HeapRegionSetBase::add(G1HeapRegion* hr) {\n+inline void G1HeapRegionSetBase::add(G1HeapRegion* hr) {\n@@ -43,1 +43,1 @@\n-inline void HeapRegionSetBase::remove(G1HeapRegion* hr) {\n+inline void G1HeapRegionSetBase::remove(G1HeapRegion* hr) {\n@@ -54,1 +54,1 @@\n-inline void FreeRegionList::add_to_tail(G1HeapRegion* region_to_add) {\n+inline void G1FreeRegionList::add_to_tail(G1HeapRegion* region_to_add) {\n@@ -74,1 +74,1 @@\n-inline void FreeRegionList::add_ordered(G1HeapRegion* hr) {\n+inline void G1FreeRegionList::add_ordered(G1HeapRegion* hr) {\n@@ -123,1 +123,1 @@\n-inline G1HeapRegion* FreeRegionList::remove_from_head_impl() {\n+inline G1HeapRegion* G1FreeRegionList::remove_from_head_impl() {\n@@ -135,1 +135,1 @@\n-inline G1HeapRegion* FreeRegionList::remove_from_tail_impl() {\n+inline G1HeapRegion* G1FreeRegionList::remove_from_tail_impl() {\n@@ -148,1 +148,1 @@\n-inline G1HeapRegion* FreeRegionList::remove_region(bool from_head) {\n+inline G1HeapRegion* G1FreeRegionList::remove_region(bool from_head) {\n@@ -177,1 +177,1 @@\n-inline G1HeapRegion* FreeRegionList::remove_region_with_node_index(bool from_head,\n+inline G1HeapRegion* G1FreeRegionList::remove_region_with_node_index(bool from_head,\n@@ -235,1 +235,1 @@\n-inline void FreeRegionList::NodeInfo::increase_length(uint node_index) {\n+inline void G1FreeRegionList::NodeInfo::increase_length(uint node_index) {\n@@ -241,1 +241,1 @@\n-inline void FreeRegionList::NodeInfo::decrease_length(uint node_index) {\n+inline void G1FreeRegionList::NodeInfo::decrease_length(uint node_index) {\n@@ -250,1 +250,1 @@\n-inline uint FreeRegionList::NodeInfo::length(uint node_index) const {\n+inline uint G1FreeRegionList::NodeInfo::length(uint node_index) const {\n@@ -254,1 +254,1 @@\n-inline void FreeRegionList::increase_length(uint node_index) {\n+inline void G1FreeRegionList::increase_length(uint node_index) {\n@@ -260,1 +260,1 @@\n-inline void FreeRegionList::decrease_length(uint node_index) {\n+inline void G1FreeRegionList::decrease_length(uint node_index) {\n@@ -266,1 +266,1 @@\n-inline uint FreeRegionList::length(uint node_index) const {\n+inline uint G1FreeRegionList::length(uint node_index) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionSet.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-void HeapRegionTracer::send_region_type_change(uint index,\n+void G1HeapRegionTracer::send_region_type_change(uint index,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionTracer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-class HeapRegionTracer : AllStatic {\n+class G1HeapRegionTracer : AllStatic {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionTracer.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,4 @@\n-const HeapRegionType HeapRegionType::Eden      = HeapRegionType(EdenTag);\n-const HeapRegionType HeapRegionType::Survivor  = HeapRegionType(SurvTag);\n-const HeapRegionType HeapRegionType::Old       = HeapRegionType(OldTag);\n-const HeapRegionType HeapRegionType::Humongous = HeapRegionType(StartsHumongousTag);\n+const G1HeapRegionType G1HeapRegionType::Eden      = G1HeapRegionType(EdenTag);\n+const G1HeapRegionType G1HeapRegionType::Survivor  = G1HeapRegionType(SurvTag);\n+const G1HeapRegionType G1HeapRegionType::Old       = G1HeapRegionType(OldTag);\n+const G1HeapRegionType G1HeapRegionType::Humongous = G1HeapRegionType(StartsHumongousTag);\n@@ -34,1 +34,1 @@\n-bool HeapRegionType::is_valid(Tag tag) {\n+bool G1HeapRegionType::is_valid(Tag tag) {\n@@ -48,1 +48,1 @@\n-const char* HeapRegionType::get_str() const {\n+const char* G1HeapRegionType::get_str() const {\n@@ -63,1 +63,1 @@\n-const char* HeapRegionType::get_short_str() const {\n+const char* G1HeapRegionType::get_short_str() const {\n@@ -78,1 +78,1 @@\n-G1HeapRegionTraceType::Type HeapRegionType::get_trace_type() {\n+G1HeapRegionTraceType::Type G1HeapRegionType::get_trace_type() {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionType.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-class HeapRegionType {\n+class G1HeapRegionType {\n@@ -104,1 +104,1 @@\n-  HeapRegionType(Tag t) : _tag(t) { hrt_assert_is_valid(_tag); }\n+  G1HeapRegionType(Tag t) : _tag(t) { hrt_assert_is_valid(_tag); }\n@@ -162,1 +162,1 @@\n-  HeapRegionType() : _tag(FreeTag) { hrt_assert_is_valid(_tag); }\n+  G1HeapRegionType() : _tag(FreeTag) { hrt_assert_is_valid(_tag); }\n@@ -164,4 +164,4 @@\n-  static const HeapRegionType Eden;\n-  static const HeapRegionType Survivor;\n-  static const HeapRegionType Old;\n-  static const HeapRegionType Humongous;\n+  static const G1HeapRegionType Eden;\n+  static const G1HeapRegionType Survivor;\n+  static const G1HeapRegionType Old;\n+  static const G1HeapRegionType Humongous;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionType.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-class G1HeapTransition::DetailedUsageClosure: public HeapRegionClosure {\n+class G1HeapTransition::DetailedUsageClosure: public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-      HeapRegionRemSet* hrrs = hr->rem_set();\n+      G1HeapRegionRemSet* hrrs = hr->rem_set();\n@@ -234,1 +234,1 @@\n-class VerifyRegionClosure: public HeapRegionClosure {\n+class VerifyRegionClosure: public G1HeapRegionClosure {\n@@ -290,4 +290,4 @@\n-  G1CollectedHeap*  _g1h;\n-  VerifyOption      _vo;\n-  bool              _failures;\n-  HeapRegionClaimer _hrclaimer;\n+  G1CollectedHeap*    _g1h;\n+  VerifyOption        _vo;\n+  bool                _failures;\n+  G1HeapRegionClaimer _hrclaimer;\n@@ -380,1 +380,1 @@\n-class VerifyRegionListsClosure : public HeapRegionClosure {\n+class VerifyRegionListsClosure : public G1HeapRegionClosure {\n@@ -382,3 +382,3 @@\n-  HeapRegionSet*   _old_set;\n-  HeapRegionSet*   _humongous_set;\n-  HeapRegionManager* _hrm;\n+  G1HeapRegionSet*     _old_set;\n+  G1HeapRegionSet*     _humongous_set;\n+  G1HeapRegionManager* _hrm;\n@@ -391,3 +391,3 @@\n-  VerifyRegionListsClosure(HeapRegionSet* old_set,\n-                           HeapRegionSet* humongous_set,\n-                           HeapRegionManager* hrm) :\n+  VerifyRegionListsClosure(G1HeapRegionSet* old_set,\n+                           G1HeapRegionSet* humongous_set,\n+                           G1HeapRegionManager* hrm) :\n@@ -415,1 +415,1 @@\n-  void verify_counts(HeapRegionSet* old_set, HeapRegionSet* humongous_set, HeapRegionManager* free_list) {\n+  void verify_counts(G1HeapRegionSet* old_set, G1HeapRegionSet* humongous_set, G1HeapRegionManager* free_list) {\n@@ -438,1 +438,1 @@\n-class G1VerifyRegionMarkingStateClosure : public HeapRegionClosure {\n+class G1VerifyRegionMarkingStateClosure : public G1HeapRegionClosure {\n@@ -538,1 +538,1 @@\n-  class G1VerifyBitmapClear : public HeapRegionClosure {\n+  class G1VerifyBitmapClear : public G1HeapRegionClosure {\n@@ -560,1 +560,1 @@\n-class G1VerifyCardTableCleanup: public HeapRegionClosure {\n+class G1VerifyCardTableCleanup: public G1HeapRegionClosure {\n@@ -606,1 +606,1 @@\n-class G1VerifyDirtyYoungListClosure : public HeapRegionClosure {\n+class G1VerifyDirtyYoungListClosure : public G1HeapRegionClosure {\n@@ -610,1 +610,1 @@\n-  G1VerifyDirtyYoungListClosure(G1HeapVerifier* verifier) : HeapRegionClosure(), _verifier(verifier) { }\n+  G1VerifyDirtyYoungListClosure(G1HeapVerifier* verifier) : G1HeapRegionClosure(), _verifier(verifier) { }\n@@ -622,1 +622,1 @@\n-class G1CheckRegionAttrTableClosure : public HeapRegionClosure {\n+class G1CheckRegionAttrTableClosure : public G1HeapRegionClosure {\n@@ -627,1 +627,1 @@\n-  G1CheckRegionAttrTableClosure() : HeapRegionClosure(), _failures(false) { }\n+  G1CheckRegionAttrTableClosure() : G1HeapRegionClosure(), _failures(false) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,1 @@\n-  \/\/ There would be some cases that 1 page may be consisted of multiple HeapRegions.\n+  \/\/ There would be some cases that 1 page may be consisted of multiple heap regions.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-  \/\/ This assumes that HeapRegions are evenly spit, so we can decide preferred index\n+  \/\/ This assumes that heap regions are evenly spit, so we can decide preferred index\n@@ -130,1 +130,1 @@\n-class G1NodeIndexCheckClosure : public HeapRegionClosure {\n+class G1NodeIndexCheckClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,1 +149,1 @@\n-  HeapRegionRemSet* to_rem_set = _g1h->heap_region_containing(obj)->rem_set();\n+  G1HeapRegionRemSet* to_rem_set = _g1h->heap_region_containing(obj)->rem_set();\n@@ -269,1 +269,1 @@\n-  HeapRegionRemSet* rem_set = to->rem_set();\n+  G1HeapRegionRemSet* rem_set = to->rem_set();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -368,1 +368,1 @@\n-  void iterate_dirty_regions_from(HeapRegionClosure* cl, uint worker_id) {\n+  void iterate_dirty_regions_from(G1HeapRegionClosure* cl, uint worker_id) {\n@@ -484,1 +484,1 @@\n-class G1ScanHRForRegionClosure : public HeapRegionClosure {\n+class G1ScanHRForRegionClosure : public G1HeapRegionClosure {\n@@ -758,1 +758,1 @@\n-class G1ScanCollectionSetRegionClosure : public HeapRegionClosure {\n+class G1ScanCollectionSetRegionClosure : public G1HeapRegionClosure {\n@@ -975,1 +975,1 @@\n-  \/\/ table. This is in addition to being the HeapRegionClosure to iterate over\n+  \/\/ table. This is in addition to being the HG1eapRegionClosure to iterate over\n@@ -981,1 +981,1 @@\n-  class G1MergeCardSetClosure : public HeapRegionClosure {\n+  class G1MergeCardSetClosure : public G1HeapRegionClosure {\n@@ -1077,1 +1077,1 @@\n-      HeapRegionRemSet* rem_set = r->rem_set();\n+      G1HeapRegionRemSet* rem_set = r->rem_set();\n@@ -1101,1 +1101,1 @@\n-  class G1ClearBitmapClosure : public HeapRegionClosure {\n+  class G1ClearBitmapClosure : public G1HeapRegionClosure {\n@@ -1147,3 +1147,3 @@\n-  class G1CombinedClosure : public HeapRegionClosure {\n-    HeapRegionClosure* _closure1;\n-    HeapRegionClosure* _closure2;\n+  class G1CombinedClosure : public G1HeapRegionClosure {\n+    G1HeapRegionClosure* _closure1;\n+    G1HeapRegionClosure* _closure2;\n@@ -1151,1 +1151,1 @@\n-    G1CombinedClosure(HeapRegionClosure* cl1, HeapRegionClosure* cl2) :\n+    G1CombinedClosure(G1HeapRegionClosure* cl1, G1HeapRegionClosure* cl2) :\n@@ -1163,1 +1163,1 @@\n-  class G1FlushHumongousCandidateRemSets : public HeapRegionIndexClosure {\n+  class G1FlushHumongousCandidateRemSets : public G1HeapRegionIndexClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+class G1HeapRegionClaimer;\n@@ -52,1 +53,0 @@\n-class HeapRegionClaimer;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,1 +184,1 @@\n-class HRRSStatsIter: public HeapRegionClosure {\n+class HRRSStatsIter: public G1HeapRegionClosure {\n@@ -219,1 +219,1 @@\n-    HeapRegionRemSet* hrrs = r->rem_set();\n+    G1HeapRegionRemSet* hrrs = r->rem_set();\n@@ -221,1 +221,1 @@\n-    \/\/ HeapRegionRemSet::mem_size() includes the\n+    \/\/ G1HeapRegionRemSet::mem_size() includes the\n@@ -277,1 +277,1 @@\n-    HeapRegionRemSet* rem_set = max_rs_mem_sz_region()->rem_set();\n+    G1HeapRegionRemSet* rem_set = max_rs_mem_sz_region()->rem_set();\n@@ -284,1 +284,1 @@\n-    HeapRegionRemSet::print_static_mem_size(out);\n+    G1HeapRegionRemSet::print_static_mem_size(out);\n@@ -289,1 +289,1 @@\n-    HeapRegionRemSet* max_code_root_rem_set = max_code_root_mem_sz_region()->rem_set();\n+    G1HeapRegionRemSet* max_code_root_rem_set = max_code_root_mem_sz_region()->rem_set();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-class G1PrintCollectionSetClosure : public HeapRegionClosure {\n+class G1PrintCollectionSetClosure : public G1HeapRegionClosure {\n@@ -289,1 +289,1 @@\n-  class G1PrepareRegionsClosure : public HeapRegionClosure {\n+  class G1PrepareRegionsClosure : public G1HeapRegionClosure {\n@@ -421,1 +421,1 @@\n-  HeapRegionClaimer _claimer;\n+  G1HeapRegionClaimer _claimer;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-class SelectAllocationFailureRegionClosure : public HeapRegionClosure {\n+class SelectAllocationFailureRegionClosure : public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCAllocationFailureInjector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -336,1 +336,1 @@\n-class G1FreeHumongousRegionClosure : public HeapRegionIndexClosure {\n+class G1FreeHumongousRegionClosure : public G1HeapRegionIndexClosure {\n@@ -540,1 +540,1 @@\n-  HeapRegionClaimer _claimer;\n+  G1HeapRegionClaimer _claimer;\n@@ -542,1 +542,1 @@\n-  class ProcessEvacuationFailedRegionsClosure : public HeapRegionClosure {\n+  class ProcessEvacuationFailedRegionsClosure : public G1HeapRegionClosure {\n@@ -709,1 +709,1 @@\n-class FreeCSetClosure : public HeapRegionClosure {\n+class FreeCSetClosure : public G1HeapRegionClosure {\n@@ -810,1 +810,1 @@\n-      HeapRegionClosure(),\n+      G1HeapRegionClosure(),\n@@ -856,6 +856,6 @@\n-  G1CollectedHeap*  _g1h;\n-  G1EvacInfo*       _evacuation_info;\n-  FreeCSetStats*    _worker_stats;\n-  HeapRegionClaimer _claimer;\n-  const size_t*     _surviving_young_words;\n-  uint              _active_workers;\n+  G1CollectedHeap*    _g1h;\n+  G1EvacInfo*         _evacuation_info;\n+  FreeCSetStats*      _worker_stats;\n+  G1HeapRegionClaimer _claimer;\n+  const size_t*       _surviving_young_words;\n+  uint                _active_workers;\n@@ -863,1 +863,1 @@\n-  volatile uint     _num_retained_regions;\n+  volatile uint       _num_retained_regions;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-  if (FLAG_IS_CMDLINE(G1HeapRegionSize) && (value < HeapRegionBounds::min_size())) {\n+  if (FLAG_IS_CMDLINE(G1HeapRegionSize) && (value < G1HeapRegionBounds::min_size())) {\n@@ -183,1 +183,1 @@\n-  return HeapRegionBounds::max_size();\n+  return G1HeapRegionBounds::max_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/jvmFlagConstraintsG1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  nonstatic_field(G1HeapRegion, _type,           HeapRegionType)              \\\n+  nonstatic_field(G1HeapRegion, _type,           G1HeapRegionType)            \\\n@@ -46,1 +46,1 @@\n-  nonstatic_field(HeapRegionType, _tag,       HeapRegionType::Tag volatile)   \\\n+  nonstatic_field(G1HeapRegionType, _tag,   G1HeapRegionType::Tag volatile)   \\\n@@ -55,1 +55,1 @@\n-  nonstatic_field(HeapRegionManager, _regions,          G1HeapRegionTable)    \\\n+  nonstatic_field(G1HeapRegionManager, _regions,        G1HeapRegionTable)    \\\n@@ -58,1 +58,1 @@\n-  nonstatic_field(G1CollectedHeap, _hrm,                HeapRegionManager)    \\\n+  nonstatic_field(G1CollectedHeap, _hrm,                G1HeapRegionManager)  \\\n@@ -60,2 +60,2 @@\n-  nonstatic_field(G1CollectedHeap, _old_set,            HeapRegionSetBase)    \\\n-  nonstatic_field(G1CollectedHeap, _humongous_set,      HeapRegionSetBase)    \\\n+  nonstatic_field(G1CollectedHeap, _old_set,            G1HeapRegionSetBase)  \\\n+  nonstatic_field(G1CollectedHeap, _humongous_set,      G1HeapRegionSetBase)  \\\n@@ -70,1 +70,1 @@\n-  nonstatic_field(HeapRegionSetBase,   _length,         uint)                 \\\n+  nonstatic_field(G1HeapRegionSetBase,   _length,       uint)                 \\\n@@ -77,8 +77,8 @@\n-  declare_constant(HeapRegionType::FreeTag)                                   \\\n-  declare_constant(HeapRegionType::YoungMask)                                 \\\n-  declare_constant(HeapRegionType::EdenTag)                                   \\\n-  declare_constant(HeapRegionType::SurvTag)                                   \\\n-  declare_constant(HeapRegionType::HumongousMask)                             \\\n-  declare_constant(HeapRegionType::StartsHumongousTag)                        \\\n-  declare_constant(HeapRegionType::ContinuesHumongousTag)                     \\\n-  declare_constant(HeapRegionType::OldMask)                                   \\\n+  declare_constant(G1HeapRegionType::FreeTag)                                 \\\n+  declare_constant(G1HeapRegionType::YoungMask)                               \\\n+  declare_constant(G1HeapRegionType::EdenTag)                                 \\\n+  declare_constant(G1HeapRegionType::SurvTag)                                 \\\n+  declare_constant(G1HeapRegionType::HumongousMask)                           \\\n+  declare_constant(G1HeapRegionType::StartsHumongousTag)                      \\\n+  declare_constant(G1HeapRegionType::ContinuesHumongousTag)                   \\\n+  declare_constant(G1HeapRegionType::OldMask)                                 \\\n@@ -97,2 +97,2 @@\n-  declare_toplevel_type(HeapRegionManager)                                    \\\n-  declare_toplevel_type(HeapRegionSetBase)                                    \\\n+  declare_toplevel_type(G1HeapRegionManager)                                  \\\n+  declare_toplevel_type(G1HeapRegionSetBase)                                  \\\n@@ -101,1 +101,1 @@\n-  declare_toplevel_type(HeapRegionType)                                       \\\n+  declare_toplevel_type(G1HeapRegionType)                                     \\\n@@ -109,1 +109,1 @@\n-  declare_integer_type(HeapRegionType::Tag volatile)\n+  declare_integer_type(G1HeapRegionType::Tag volatile)\n","filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -611,1 +611,1 @@\n-class OldRegionsLivenessClosure: public HeapRegionClosure {\n+class OldRegionsLivenessClosure: public G1HeapRegionClosure {\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import sun.jvm.hotspot.gc.g1.HeapRegionClosure;\n-import sun.jvm.hotspot.gc.g1.PrintRegionClosure;\n+import sun.jvm.hotspot.gc.g1.G1HeapRegionClosure;\n+import sun.jvm.hotspot.gc.g1.G1PrintRegionClosure;\n@@ -50,1 +50,1 @@\n-    \/\/ HeapRegionManager _hrm;\n+    \/\/ G1HeapRegionManager _hrm;\n@@ -58,1 +58,1 @@\n-    \/\/ HeapRegionSet _old_set;\n+    \/\/ G1HeapRegionSet _old_set;\n@@ -60,1 +60,1 @@\n-    \/\/ HeapRegionSet _humongous_set;\n+    \/\/ G1HeapRegionSet _humongous_set;\n@@ -93,1 +93,1 @@\n-    public HeapRegionManager hrm() {\n+    public G1HeapRegionManager hrm() {\n@@ -95,1 +95,1 @@\n-        return VMObjectFactory.newObject(HeapRegionManager.class, hrmAddr);\n+        return VMObjectFactory.newObject(G1HeapRegionManager.class, hrmAddr);\n@@ -103,1 +103,1 @@\n-    public HeapRegionSetBase oldSet() {\n+    public G1HeapRegionSetBase oldSet() {\n@@ -105,1 +105,1 @@\n-        return VMObjectFactory.newObject(HeapRegionSetBase.class, oldSetAddr);\n+        return VMObjectFactory.newObject(G1HeapRegionSetBase.class, oldSetAddr);\n@@ -108,1 +108,1 @@\n-    public HeapRegionSetBase humongousSet() {\n+    public G1HeapRegionSetBase humongousSet() {\n@@ -110,1 +110,1 @@\n-        return VMObjectFactory.newObject(HeapRegionSetBase.class, humongousSetAddr);\n+        return VMObjectFactory.newObject(G1HeapRegionSetBase.class, humongousSetAddr);\n@@ -117,1 +117,1 @@\n-    public void heapRegionIterate(HeapRegionClosure hrcl) {\n+    public void heapRegionIterate(G1HeapRegionClosure hrcl) {\n@@ -162,1 +162,1 @@\n-        PrintRegionClosure prc = new PrintRegionClosure(tty);\n+        G1PrintRegionClosure prc = new G1PrintRegionClosure(tty);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1CollectedHeap.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    private HeapRegionType type;\n+    private G1HeapRegionType type;\n@@ -91,1 +91,1 @@\n-        type = VMObjectFactory.newObject(HeapRegionType.class, typeAddr);\n+        type = VMObjectFactory.newObject(G1HeapRegionType.class, typeAddr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegion.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.gc.g1;\n+\n+public interface G1HeapRegionClosure {\n+    public void doHeapRegion(G1HeapRegion hr);\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionClosure.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -40,1 +40,1 @@\n-\/\/ Mirror class for HeapRegionManager.\n+\/\/ Mirror class for G1HeapRegionManager.\n@@ -42,1 +42,1 @@\n-public class HeapRegionManager extends VMObject {\n+public class G1HeapRegionManager extends VMObject {\n@@ -55,1 +55,1 @@\n-        Type type = db.lookupType(\"HeapRegionManager\");\n+        Type type = db.lookupType(\"G1HeapRegionManager\");\n@@ -77,1 +77,1 @@\n-    public HeapRegionManager(Address addr) {\n+    public G1HeapRegionManager(Address addr) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionManager.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionManager.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-\/\/ Mirror class for HeapRegionSetBase. Represents a group of regions.\n+\/\/ Mirror class for G1HeapRegionSetBase. Represents a group of regions.\n@@ -42,1 +42,1 @@\n-public class HeapRegionSetBase extends VMObject {\n+public class G1HeapRegionSetBase extends VMObject {\n@@ -56,1 +56,1 @@\n-        Type type = db.lookupType(\"HeapRegionSetBase\");\n+        Type type = db.lookupType(\"G1HeapRegionSetBase\");\n@@ -65,1 +65,1 @@\n-    public HeapRegionSetBase(Address addr) {\n+    public G1HeapRegionSetBase(Address addr) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionSetBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionSetBase.java","status":"renamed"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.gc.g1;\n+\n+import sun.jvm.hotspot.utilities.Observable;\n+import sun.jvm.hotspot.utilities.Observer;\n+import sun.jvm.hotspot.debugger.Address;\n+import sun.jvm.hotspot.runtime.VM;\n+import sun.jvm.hotspot.runtime.VMObject;\n+import sun.jvm.hotspot.types.CIntegerField;\n+import sun.jvm.hotspot.types.Type;\n+import sun.jvm.hotspot.types.TypeDataBase;\n+\n+\/\/ Mirror class for G1HeapRegionType. Currently we don't actually include\n+\/\/ any of its fields but only iterate over it.\n+\n+public class G1HeapRegionType extends VMObject {\n+\n+    private static int freeTag;\n+    private static int youngMask;\n+    private static int edenTag;\n+    private static int survTag;\n+    private static int humongousMask;\n+    private static int startsHumongousTag;\n+    private static int continuesHumongousTag;\n+    private static int oldMask;\n+    private static CIntegerField tagField;\n+    private int tag;\n+\n+    static {\n+        VM.registerVMInitializedObserver(new Observer() {\n+                public void update(Observable o, Object data) {\n+                    initialize(VM.getVM().getTypeDataBase());\n+                }\n+        });\n+    }\n+\n+    private static synchronized void initialize(TypeDataBase db) {\n+        Type type = db.lookupType(\"G1HeapRegionType\");\n+\n+        tagField = type.getCIntegerField(\"_tag\");\n+\n+        freeTag = db.lookupIntConstant(\"G1HeapRegionType::FreeTag\");\n+        youngMask = db.lookupIntConstant(\"G1HeapRegionType::YoungMask\");\n+        edenTag = db.lookupIntConstant(\"G1HeapRegionType::EdenTag\");\n+        survTag = db.lookupIntConstant(\"G1HeapRegionType::SurvTag\");\n+        startsHumongousTag = db.lookupIntConstant(\"G1HeapRegionType::StartsHumongousTag\");\n+        continuesHumongousTag = db.lookupIntConstant(\"G1HeapRegionType::ContinuesHumongousTag\");\n+        humongousMask = db.lookupIntConstant(\"G1HeapRegionType::HumongousMask\");\n+        oldMask = db.lookupIntConstant(\"G1HeapRegionType::OldMask\");\n+    }\n+\n+    public boolean isFree() {\n+        return tagField.getValue(addr) == freeTag;\n+    }\n+\n+    public boolean isEden() {\n+        return tagField.getValue(addr) == edenTag;\n+    }\n+\n+    public boolean isSurvivor() {\n+        return tagField.getValue(addr) == survTag;\n+    }\n+\n+    public boolean isYoung() {\n+        return (tagField.getValue(addr) & youngMask) != 0;\n+    }\n+\n+    public boolean isHumongous() {\n+        return (tagField.getValue(addr) & humongousMask) != 0;\n+    }\n+\n+    public boolean isStartsHumongous() {\n+        return tagField.getValue(addr) == startsHumongousTag;\n+    }\n+\n+    public boolean isContinuesHumongous() {\n+        return tagField.getValue(addr) == continuesHumongousTag;\n+    }\n+\n+    public boolean isOld() {\n+        return (tagField.getValue(addr) & oldMask) != 0;\n+    }\n+\n+    public G1HeapRegionType(Address addr) {\n+        super(addr);\n+    }\n+\n+    public String typeAnnotation() {\n+        if (isFree()) {\n+            return \"Free\";\n+        }\n+        if (isEden()) {\n+            return \"Eden\";\n+        }\n+        if (isSurvivor()) {\n+            return \"Survivor\";\n+        }\n+        if (isStartsHumongous()) {\n+            return \"StartsHumongous\";\n+        }\n+        if (isContinuesHumongous()) {\n+            return \"ContinuesHumongous\";\n+        }\n+        if (isOld()) {\n+            return \"Old\";\n+        }\n+        return \"Unknown Region Type\";\n+    }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionType.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n-public class PrintRegionClosure implements HeapRegionClosure {\n+public class G1PrintRegionClosure implements G1HeapRegionClosure {\n@@ -33,1 +33,1 @@\n-    public PrintRegionClosure(PrintStream tty) {\n+    public G1PrintRegionClosure(PrintStream tty) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1PrintRegionClosure.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/PrintRegionClosure.java","status":"renamed"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.gc.g1;\n-\n-public interface HeapRegionClosure {\n-    public void doHeapRegion(G1HeapRegion hr);\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionClosure.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,132 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.gc.g1;\n-\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-import sun.jvm.hotspot.debugger.Address;\n-import sun.jvm.hotspot.runtime.VM;\n-import sun.jvm.hotspot.runtime.VMObject;\n-import sun.jvm.hotspot.types.CIntegerField;\n-import sun.jvm.hotspot.types.Type;\n-import sun.jvm.hotspot.types.TypeDataBase;\n-\n-\/\/ Mirror class for HeapRegionType. Currently we don't actually include\n-\/\/ any of its fields but only iterate over it.\n-\n-public class HeapRegionType extends VMObject {\n-\n-    private static int freeTag;\n-    private static int youngMask;\n-    private static int edenTag;\n-    private static int survTag;\n-    private static int humongousMask;\n-    private static int startsHumongousTag;\n-    private static int continuesHumongousTag;\n-    private static int oldMask;\n-    private static CIntegerField tagField;\n-    private int tag;\n-\n-    static {\n-        VM.registerVMInitializedObserver(new Observer() {\n-                public void update(Observable o, Object data) {\n-                    initialize(VM.getVM().getTypeDataBase());\n-                }\n-        });\n-    }\n-\n-    private static synchronized void initialize(TypeDataBase db) {\n-        Type type = db.lookupType(\"HeapRegionType\");\n-\n-        tagField = type.getCIntegerField(\"_tag\");\n-\n-        freeTag = db.lookupIntConstant(\"HeapRegionType::FreeTag\");\n-        youngMask = db.lookupIntConstant(\"HeapRegionType::YoungMask\");\n-        edenTag = db.lookupIntConstant(\"HeapRegionType::EdenTag\");\n-        survTag = db.lookupIntConstant(\"HeapRegionType::SurvTag\");\n-        startsHumongousTag = db.lookupIntConstant(\"HeapRegionType::StartsHumongousTag\");\n-        continuesHumongousTag = db.lookupIntConstant(\"HeapRegionType::ContinuesHumongousTag\");\n-        humongousMask = db.lookupIntConstant(\"HeapRegionType::HumongousMask\");\n-        oldMask = db.lookupIntConstant(\"HeapRegionType::OldMask\");\n-    }\n-\n-    public boolean isFree() {\n-        return tagField.getValue(addr) == freeTag;\n-    }\n-\n-    public boolean isEden() {\n-        return tagField.getValue(addr) == edenTag;\n-    }\n-\n-    public boolean isSurvivor() {\n-        return tagField.getValue(addr) == survTag;\n-    }\n-\n-    public boolean isYoung() {\n-        return (tagField.getValue(addr) & youngMask) != 0;\n-    }\n-\n-    public boolean isHumongous() {\n-        return (tagField.getValue(addr) & humongousMask) != 0;\n-    }\n-\n-    public boolean isStartsHumongous() {\n-        return tagField.getValue(addr) == startsHumongousTag;\n-    }\n-\n-    public boolean isContinuesHumongous() {\n-        return tagField.getValue(addr) == continuesHumongousTag;\n-    }\n-\n-    public boolean isOld() {\n-        return (tagField.getValue(addr) & oldMask) != 0;\n-    }\n-\n-    public HeapRegionType(Address addr) {\n-        super(addr);\n-    }\n-\n-    public String typeAnnotation() {\n-        if (isFree()) {\n-            return \"Free\";\n-        }\n-        if (isEden()) {\n-            return \"Eden\";\n-        }\n-        if (isSurvivor()) {\n-            return \"Survivor\";\n-        }\n-        if (isStartsHumongous()) {\n-            return \"StartsHumongous\";\n-        }\n-        if (isContinuesHumongous()) {\n-            return \"ContinuesHumongous\";\n-        }\n-        if (isOld()) {\n-            return \"Old\";\n-        }\n-        return \"Unknown Region Type\";\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionType.java","additions":0,"deletions":132,"binary":false,"changes":132,"status":"deleted"},{"patch":"@@ -255,2 +255,2 @@\n-      HeapRegionSetBase oldSet = g1h.oldSet();\n-      HeapRegionSetBase humongousSet = g1h.humongousSet();\n+      G1HeapRegionSetBase oldSet = g1h.oldSet();\n+      G1HeapRegionSetBase humongousSet = g1h.humongousSet();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/HeapSummary.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-TEST_OTHER_VM(FreeRegionList, length) {\n+TEST_OTHER_VM(G1FreeRegionList, length) {\n@@ -42,1 +42,1 @@\n-  FreeRegionList l(\"test\");\n+  G1FreeRegionList l(\"test\");\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -239,2 +239,2 @@\n-  uint const min = (uint)log2i(HeapRegionBounds::min_size());\n-  uint const max = (uint)log2i(HeapRegionBounds::max_size());\n+  uint const min = (uint)log2i(G1HeapRegionBounds::min_size());\n+  uint const max = (uint)log2i(G1HeapRegionBounds::max_size());\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSetContainers.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    HeapRegionRange current = map->next_active_range(current_offset);\n+    G1HeapRegionRange current = map->next_active_range(current_offset);\n@@ -82,1 +82,1 @@\n-    HeapRegionRange current = map->next_inactive_range(current_offset);\n+    G1HeapRegionRange current = map->next_inactive_range(current_offset);\n@@ -97,1 +97,1 @@\n-    HeapRegionRange current = map->next_committable_range(current_offset);\n+    G1HeapRegionRange current = map->next_committable_range(current_offset);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1RegionMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}