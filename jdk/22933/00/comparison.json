{"files":[{"patch":"@@ -183,1 +183,0 @@\n-  regulator_thread()->stop();\n@@ -185,0 +184,1 @@\n+  regulator_thread()->stop();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -541,1 +541,0 @@\n-  _mmu_tracker(),\n@@ -635,0 +634,2 @@\n+\n+  \/\/ Schedule periodic task to report on gc thread CPU utilization\n@@ -2087,0 +2088,3 @@\n+  \/\/ Step 0a. Stop reporting on gc thread cpu utilization\n+  mmu_tracker()->stop();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    assert(!thread->has_terminated(), \"Cannot get cpu time for terminated thread: \" UINTX_FORMAT, thread->osthread()->thread_id_for_printing());\n@@ -68,1 +69,0 @@\n-  _mmu_periodic_task->disenroll();\n@@ -178,0 +178,4 @@\n+void ShenandoahMmuTracker::stop() const {\n+  _mmu_periodic_task->disenroll();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -104,0 +104,4 @@\n+\n+  \/\/ Unenrolls the periodic task that collects CPU utilization for GC threads. This must happen _before_ the\n+  \/\/ gc threads are stopped and terminated.\n+  void stop() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}