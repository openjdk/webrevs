{"files":[{"patch":"@@ -1038,0 +1038,35 @@\n+\n+void AOTClassLocationConfig::print() {\n+  if (CDSConfig::is_dumping_archive()) {\n+    tty->print_cr(\"AOTClassLocationConfig::_dumptime_instance = %p\", _dumptime_instance);\n+    if (_dumptime_instance != nullptr) {\n+      _dumptime_instance->print_on(tty);\n+    }\n+  }\n+  if (CDSConfig::is_using_archive()) {\n+    tty->print_cr(\"AOTClassLocationConfig::_runtime_instance = %p\", _runtime_instance);\n+    if (_runtime_instance != nullptr) {\n+      _runtime_instance->print_on(tty);\n+    }\n+  }\n+}\n+\n+void AOTClassLocationConfig::print_on(outputStream* st) const {\n+  int n = class_locations()->length();\n+  for (int i = 0; i < n; i++) {\n+    const AOTClassLocation* cs = class_location_at(i);\n+    const char* path;\n+    if (i == 0) {\n+      path = ClassLoader::get_jrt_entry()->name();\n+    } else {\n+      path = cs->path();\n+    }\n+    st->print_cr(\"[%d] = %s\", i, path);\n+    if (i == boot_cp_end_index() && i < n) {\n+      st->print_cr(\"--- end of boot\");\n+    }\n+    if (i == app_cp_end_index() && i < n) {\n+      st->print_cr(\"--- end of app\");\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/share\/cds\/aotClassLocation.cpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -204,0 +205,3 @@\n+\n+  void print_on(outputStream* st) const;\n+\n@@ -271,0 +275,2 @@\n+\n+  static void print();\n","filename":"src\/hotspot\/share\/cds\/aotClassLocation.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1203,0 +1203,8 @@\n+  if (!SystemDictionaryShared::is_builtin_loader(ik->class_loader_data())) {\n+    \/\/ A class loaded by a user-defined classloader.\n+    assert(ik->shared_classpath_index() < 0, \"not assigned yet\");\n+    ik->set_shared_classpath_index(UNREGISTERED_INDEX);\n+    SystemDictionaryShared::set_shared_class_misc_info(ik, (ClassFileStream*)stream);\n+    return;\n+  }\n+\n@@ -1207,0 +1215,2 @@\n+  bool found_invalid = false;\n+\n@@ -1221,1 +1231,0 @@\n-    bool found_invalid = false;\n@@ -1248,2 +1257,0 @@\n-                ik->set_shared_classpath_index(-1);\n-                ik->set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n@@ -1265,1 +1272,1 @@\n-        return false; \/\/ quit iterating\n+        return false; \/\/ Break the AOTClassLocationConfig::dumptime_iterate() loop.\n@@ -1270,0 +1277,1 @@\n+  }\n@@ -1271,12 +1279,2 @@\n-    if (found_invalid) {\n-      return;\n-    }\n-\n-    \/\/ No path entry found for this class: most likely a shared class loaded by the\n-    \/\/ user defined classloader.\n-    if (classpath_index < 0 && !SystemDictionaryShared::is_builtin_loader(ik->class_loader_data())) {\n-      assert(ik->shared_classpath_index() < 0, \"not assigned yet\");\n-      ik->set_shared_classpath_index(UNREGISTERED_INDEX);\n-      SystemDictionaryShared::set_shared_class_misc_info(ik, (ClassFileStream*)stream);\n-      return;\n-    }\n+  if (found_invalid) {\n+    assert(classpath_index == -1, \"sanity\");\n@@ -1289,1 +1287,1 @@\n-  ClassLoaderExt::record_result(checked_cast<s2>(classpath_index), ik, redefined);\n+  ClassLoaderExt::record_result_for_builtin_loader(checked_cast<s2>(classpath_index), ik, redefined);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-void ClassLoaderExt::record_result(s2 classpath_index, InstanceKlass* result, bool redefined) {\n+void ClassLoaderExt::record_result_for_builtin_loader(s2 classpath_index, InstanceKlass* result, bool redefined) {\n@@ -73,1 +73,0 @@\n-  \/\/ We need to remember where the class comes from during dumping.\n@@ -75,1 +74,1 @@\n-  s2 classloader_type = ClassLoader::BOOT_LOADER;\n+  s2 classloader_type;\n@@ -82,0 +81,3 @@\n+  } else {\n+    precond(loader == nullptr);\n+    classloader_type = ClassLoader::BOOT_LOADER;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  static void record_result(s2 classpath_index, InstanceKlass* result, bool redefined);\n+  static void record_result_for_builtin_loader(s2 classpath_index, InstanceKlass* result, bool redefined);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8353298\n+ * @bug 8353298 8356838\n@@ -40,0 +40,2 @@\n+import java.lang.module.Configuration;\n+import java.lang.module.ModuleFinder;\n@@ -43,0 +45,5 @@\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import jdk.test.lib.cds.CDSJarUtils;\n+import jdk.test.lib.cds.CDSModulePackager;\n@@ -47,0 +54,2 @@\n+    static final Path SRC = Paths.get(System.getProperty(\"test.src\")).resolve(\"modules\");\n+\n@@ -48,0 +57,4 @@\n+        CDSModulePackager modulePackager = new CDSModulePackager(SRC);\n+        String modulePath = modulePackager.getOutputDir().toString();\n+        modulePackager.createModularJar(\"com.test\");\n+\n@@ -50,2 +63,4 @@\n-            .addVmArgs(\"-Xlog:cds+class=debug\", \"-Xlog:cds\")\n-            .appCommandLine(\"AppWithCustomLoaders\")\n+            .addVmArgs(\"-Xlog:cds+class=debug\", \"-Xlog:cds\",\n+                       \"--module-path=\" + modulePath,\n+                       \"--add-modules=com.test\")\n+            .appCommandLine(\"AppWithCustomLoaders\", modulePath)\n@@ -54,0 +69,1 @@\n+                       .shouldMatch(\"cds,class.*unreg com.test.Foo\")\n@@ -70,1 +86,9 @@\n-        \/\/ Test 1: array class of MyLoadeeA (JDK-8353298)\n+        test1(loader);\n+        test2(loader);\n+        test3(args[0]);\n+\n+        \/\/ TODO: more test cases JDK-8354557\n+    }\n+\n+    \/\/ Test 1: array class of MyLoadeeA (JDK-8353298)\n+    static void test1(MyLoader loader) throws Exception {\n@@ -73,0 +97,1 @@\n+    }\n@@ -74,1 +99,2 @@\n-        \/\/ Test 2: VerificationType::is_reference_assignable_from() cannot be skipped (JDK-8356407)\n+    \/\/ Test 2: VerificationType::is_reference_assignable_from() cannot be skipped (JDK-8356407)\n+    static void test2(MyLoader loader) throws Exception {\n@@ -83,0 +109,1 @@\n+    }\n@@ -84,1 +111,33 @@\n-        \/\/ TODO: more test cases JDK-8354557\n+    \/\/ Test 3: custom loader defines a class from the exact location as a class defined in the boot layer.\n+    static void test3(String modulePath) throws Exception {\n+        Class<?> c0 = Class.forName(\"com.test.Foo\");\n+        System.out.println(c0);\n+        System.out.println(System.identityHashCode(c0.getModule()));\n+        System.out.println(c0.getModule().getName());\n+        System.out.println(c0.getClassLoader());\n+\n+        \/\/ Regression test for JDK-8356838\n+        \/\/\n+        \/\/ We create a new layer that loads the com.test module from the modulePath into\n+        \/\/ a different class loader.\n+        ModuleFinder finder = ModuleFinder.of(Paths.get(modulePath));\n+        ModuleLayer parent = ModuleLayer.boot();\n+        Configuration cf = parent.configuration().resolve(finder, ModuleFinder.of(), Set.of(\"com.test\"));\n+        ClassLoader scl = ClassLoader.getSystemClassLoader();\n+        ModuleLayer layer = parent.defineModulesWithOneLoader(cf, scl);\n+        Class<?> c1 = layer.findLoader(\"com.test\").loadClass(\"com.test.Foo\");\n+\n+        System.out.println(c1);\n+        System.out.println(System.identityHashCode(c1.getModule()));\n+        System.out.println(c1.getModule().getName());\n+        System.out.println(c1.getClassLoader());\n+\n+        if (!c1.getModule().getName().equals(\"com.test\")) {\n+            throw new RuntimeException(\"Unexpected module: \" + c1.getModule());\n+        }\n+        if (c1.getModule() == c0.getModule()) {\n+            throw new RuntimeException(\"Unexpected module: \" + c1.getModule());\n+        }\n+        if (c1.getClassLoader() == c0.getClassLoader()) {\n+            throw new RuntimeException(\"Unexpected class loader: \" + c1.getClassLoader());\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTCacheSupportForCustomLoaders.java","additions":65,"deletions":6,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -25,3 +25,3 @@\n-module com.needsjdkaddexport {\n-    exports com.needsjdkaddexport;\n-}\n+package com.test;\n+\n+public class Foo {}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/modules\/com.test\/com\/test\/Foo.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsjdkaddexport\/module-info.java","status":"copied"},{"patch":"@@ -25,2 +25,2 @@\n-module com.needsjdkaddexport {\n-    exports com.needsjdkaddexport;\n+module com.test {\n+  exports com.test;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/modules\/com.test\/module-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsjdkaddexport\/module-info.java","status":"copied"}]}