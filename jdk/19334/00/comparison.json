{"files":[{"patch":"@@ -261,1 +261,13 @@\n-    sample = _list->reuse(_priority_queue->pop());\n+    ObjectSample* popped = _priority_queue->pop();\n+    size_t popped_span = popped->span();\n+    ObjectSample* previous = popped->prev();\n+    sample = _list->reuse(popped);\n+    assert(sample != nullptr, \"invariant\");\n+    if (previous != nullptr) {\n+      push_span(previous, popped_span);\n+      sample->set_span(span);\n+    } else {\n+      \/\/ The removed sample was the youngest sample in the list, which means the new sample is now the youngest\n+      \/\/ sample. It should cover the spans of both.\n+      sample->set_span(span + popped_span);\n+    }\n@@ -264,0 +276,2 @@\n+    assert(sample != nullptr, \"invariant\");\n+    sample->set_span(span);\n@@ -266,1 +280,0 @@\n-  assert(sample != nullptr, \"invariant\");\n@@ -281,1 +294,0 @@\n-  sample->set_span(allocated);\n@@ -308,3 +320,1 @@\n-    _priority_queue->remove(previous);\n-    previous->add_span(sample->span());\n-    _priority_queue->push(previous);\n+    push_span(previous, sample->span());\n@@ -316,0 +326,6 @@\n+void ObjectSampler::push_span(ObjectSample* sample, size_t span) {\n+    _priority_queue->remove(sample);\n+    sample->add_span(span);\n+    _priority_queue->push(sample);\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+  void push_span(ObjectSample* sample, size_t span);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}