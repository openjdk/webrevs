{"files":[{"patch":"@@ -1197,1 +1197,1 @@\n-  Assembler::Condition booltest_cond_to_assembler_cond(BoolTest::mask cond);\n+  Assembler::Condition to_assembler_cond(BoolTest::mask cond);\n@@ -2536,1 +2536,2 @@\n-Assembler::Condition booltest_cond_to_assembler_cond(BoolTest::mask cond) {\n+Assembler::Condition to_assembler_cond(BoolTest::mask cond) {\n+  Assembler::Condition result;\n@@ -2539,1 +2540,1 @@\n-      return Assembler::EQ;\n+      result = Assembler::EQ; break;\n@@ -2541,1 +2542,1 @@\n-      return Assembler::NE;\n+      result = Assembler::NE; break;\n@@ -2543,1 +2544,1 @@\n-      return Assembler::LE;\n+      result = Assembler::LE; break;\n@@ -2545,1 +2546,1 @@\n-      return Assembler::GE;\n+      result = Assembler::GE; break;\n@@ -2547,1 +2548,1 @@\n-      return Assembler::LT;\n+      result = Assembler::LT; break;\n@@ -2549,1 +2550,1 @@\n-      return Assembler::GT;\n+      result = Assembler::GT; break;\n@@ -2551,1 +2552,1 @@\n-      return Assembler::LS;\n+      result = Assembler::LS; break;\n@@ -2553,1 +2554,1 @@\n-      return Assembler::HS;\n+      result = Assembler::HS; break;\n@@ -2555,1 +2556,1 @@\n-      return Assembler::LO;\n+      result = Assembler::LO; break;\n@@ -2557,1 +2558,1 @@\n-      return Assembler::HI;\n+      result = Assembler::HI; break;\n@@ -2559,1 +2560,1 @@\n-      return Assembler::VS;\n+      result = Assembler::VS; break;\n@@ -2561,1 +2562,1 @@\n-      return Assembler::VC;\n+      result = Assembler::VC; break;\n@@ -2566,0 +2567,9 @@\n+\n+  \/\/ Check conversion\n+  if (cond & BoolTest::unsigned_compare) {\n+    assert(cmpOpUOper((BoolTest::mask)((int)cond & 0b1111)).ccode() == result, \"Invalid conversion\");\n+  } else {\n+    assert(cmpOpOper(cond).ccode() == result, \"Invalid conversion\");\n+  }\n+\n+  return result;\n@@ -4309,4 +4319,0 @@\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n@@ -4314,5 +4320,0 @@\n-\/\/ BoolTest condition for unsigned compare\n-operand immI_cmpU_cond()\n-%{\n-  predicate(n->get_int() > (int)(BoolTest::unsigned_compare));\n-  match(ConI);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -5147,1 +5147,1 @@\n-    Assembler::Condition condition = booltest_cond_to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5161,1 +5161,1 @@\n-    Assembler::Condition condition = booltest_cond_to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5174,1 +5174,1 @@\n-    Assembler::Condition condition = booltest_cond_to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5187,1 +5187,1 @@\n-    Assembler::Condition condition = booltest_cond_to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3563,1 +3563,1 @@\n-    Assembler::Condition condition = booltest_cond_to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -3580,1 +3580,1 @@\n-    Assembler::Condition condition = booltest_cond_to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2656,6 +2656,0 @@\n-  \/\/ Zero compare.\n-  INSN(cmeq,   0, 0b100000100110, 3); \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmge,   1, 0b100000100010, 3); \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmgt,   0, 0b100000100010, 3); \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmle,   1, 0b100000100110, 3); \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmlt,   0, 0b100000101010, 3); \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n@@ -3193,0 +3187,21 @@\n+  \/\/ AdvSIMD compare with zero (vector)\n+  void cm(Condition cond, FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn) {\n+    starti;\n+    assert(T != T1Q && T != T1D, \"invalid arrangement\");\n+    int cond_op;\n+    switch (cond) {\n+      case EQ: cond_op = 0b001; break;\n+      case GE: cond_op = 0b100; break;\n+      case GT: cond_op = 0b000; break;\n+      case LE: cond_op = 0b101; break;\n+      case LT: cond_op = 0b010; break;\n+      default:\n+        ShouldNotReachHere();\n+        break;\n+    }\n+\n+    f(0, 31), f((int)T & 1, 30), f((cond_op >> 2) & 1, 29);\n+    f(0b01110, 28, 24), f((int)T >> 1, 23, 22), f(0b10000010, 21, 14);\n+    f(cond_op & 0b11, 13, 12), f(0b10, 11, 10), rf(Vn, 5), rf(Vd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -973,14 +973,5 @@\n-    switch (cond) {\n-      case Assembler::EQ: cmeq(dst, size, src); break;\n-      case Assembler::NE: {\n-        cmeq(dst, size, src);\n-        notr(dst, isQ ? T16B : T8B, dst);\n-        break;\n-      }\n-      case Assembler::GE: cmge(dst, size, src); break;\n-      case Assembler::GT: cmgt(dst, size, src); break;\n-      case Assembler::LE: cmle(dst, size, src); break;\n-      case Assembler::LT: cmlt(dst, size, src); break;\n-      default:\n-        assert(false, \"unsupported\");\n-        ShouldNotReachHere();\n+    if (cond == Assembler::NE) {\n+      cm(Assembler::EQ, dst, size, src);\n+      notr(dst, isQ ? T16B : T8B, dst);\n+    } else {\n+      cm(cond, dst, size, src);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -5601,1 +5601,1 @@\n-    umov(chk, vhix, D, 1);      ASCII(cmlt(vlox, T16B, vlox));\n+    umov(chk, vhix, D, 1);      ASCII(cm(LT, vlox, T16B, vlox));\n@@ -5627,1 +5627,1 @@\n-                                ASCII(cmlt(vtmp2, T16B, vlo));\n+                                ASCII(cm(LT, vtmp2, T16B, vlo));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}