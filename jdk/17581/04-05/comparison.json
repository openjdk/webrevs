{"files":[{"patch":"@@ -294,6 +294,2 @@\n-    return (jlong)(OSContainer::memory_and_swap_limit_in_bytes() - OSContainer::memory_limit_in_bytes());\n-  } else {\n-    struct sysinfo si;\n-    int ret = sysinfo(&si);\n-    if (ret != 0) {\n-      return -1;\n+    if (OSContainer::memory_limit_in_bytes() > 0) {\n+      return (jlong)(OSContainer::memory_and_swap_limit_in_bytes() - OSContainer::memory_limit_in_bytes());\n@@ -301,1 +297,0 @@\n-    return  (jlong)(si.totalswap * si.mem_unit);\n@@ -303,4 +298,0 @@\n-}\n-\n-jlong os::free_swap_space() {\n-  \/\/ TODO support free swap space in container APIs\n@@ -312,1 +303,15 @@\n-  return (jlong)(si.freeswap * si.mem_unit);\n+  return  (jlong)(si.totalswap * si.mem_unit);\n+}\n+\n+jlong os::free_swap_space() {\n+  if (OSContainer::is_containerized()) {\n+    \/\/ TODO add a good implementation\n+    return -1;\n+  } else {\n+    struct sysinfo si;\n+    int ret = sysinfo(&si);\n+    if (ret != 0) {\n+      return -1;\n+    }\n+    return (jlong)(si.freeswap * si.mem_unit);\n+  }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-            Events.assertField(event, \"freeSize\").atLeast(0L).atMost(totalSize);\n+            Events.assertField(event, \"freeSize\").atLeast(-1L); \/\/ we still get on Linux -1 in container envs\n+            Events.assertField(event, \"freeSize\").atMost(totalSize);\n","filename":"test\/jdk\/jdk\/jfr\/event\/os\/TestSwapSpaceEvent.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}