{"files":[{"patch":"@@ -276,0 +276,16 @@\n+jlong os::total_swap_space() {\n+  perfstat_memory_total_t memory_info;\n+  if (libperfstat::perfstat_memory_total(NULL, &memory_info, sizeof(perfstat_memory_total_t), 1) == -1) {\n+    return -1;\n+  }\n+  return (jlong)(memory_info.pgsp_total * 4 * K);\n+}\n+\n+jlong os::free_swap_space() {\n+  perfstat_memory_total_t memory_info;\n+  if (libperfstat::perfstat_memory_total(NULL, &memory_info, sizeof(perfstat_memory_total_t), 1) == -1) {\n+    return -1;\n+  }\n+  return (jlong)(memory_info.pgsp_free * 4 * K);\n+}\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,0 +184,26 @@\n+jlong os::total_swap_space() {\n+#if defined(__APPLE__)\n+  struct xsw_usage vmusage;\n+  size_t size = sizeof(vmusage);\n+  if (sysctlbyname(\"vm.swapusage\", &vmusage, &size, NULL, 0) != 0) {\n+    return -1;\n+  }\n+  return (jlong)vmusage.xsu_total;\n+#else\n+  return -1;\n+#endif\n+}\n+\n+jlong os::free_swap_space() {\n+#if defined(__APPLE__)\n+  struct xsw_usage vmusage;\n+  size_t size = sizeof(vmusage);\n+  if (sysctlbyname(\"vm.swapusage\", &vmusage, &size, NULL, 0) != 0) {\n+    return -1;\n+  }\n+  return (jlong)vmusage.xsu_avail;\n+#else\n+  return -1;\n+#endif\n+}\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -292,0 +292,23 @@\n+jlong os::total_swap_space() {\n+  if (OSContainer::is_containerized()) {\n+    return (jlong)(OSContainer::memory_and_swap_limit_in_bytes() - OSContainer::memory_limit_in_bytes());\n+  } else {\n+    struct sysinfo si;\n+    int ret = sysinfo(&si);\n+    if (ret != 0) {\n+      return -1;\n+    }\n+    return  (jlong)(si.totalswap * si.mem_unit);\n+  }\n+}\n+\n+jlong os::free_swap_space() {\n+  \/\/ TODO support free swap space in container APIs\n+  struct sysinfo si;\n+  int ret = sysinfo(&si);\n+  if (ret != 0) {\n+    return -1;\n+  }\n+  return (jlong)(si.freeswap * si.mem_unit);\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -843,0 +843,14 @@\n+jlong os::total_swap_space() {\n+  MEMORYSTATUSEX ms;\n+  ms.dwLength = sizeof(ms);\n+  GlobalMemoryStatusEx(&ms);\n+  return (jlong) ms.ullTotalPageFile;\n+}\n+\n+jlong os::free_swap_space() {\n+  MEMORYSTATUSEX ms;\n+  ms.dwLength = sizeof(ms);\n+  GlobalMemoryStatusEx(&ms);\n+  return (jlong) ms.ullAvailPageFile;\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -930,0 +930,5 @@\n+  <Event name=\"SwapSpace\" category=\"Operating System, Memory\" label=\"Swap Space\" description=\"OS Swap Space\" period=\"everyChunk\">\n+    <Field type=\"long\" contentType=\"bytes\" name=\"totalSize\" label=\"Total Size\" description=\"Total swap space available to the OS\" \/>\n+    <Field type=\"long\" contentType=\"bytes\" name=\"freeSize\" label=\"Free Size\" description=\"Free swap space\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -530,0 +530,7 @@\n+TRACE_REQUEST_FUNC(SwapSpace) {\n+  EventSwapSpace event;\n+  event.set_totalSize(os::total_swap_space());\n+  event.set_freeSize(os::free_swap_space());\n+  event.commit();\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -327,0 +327,3 @@\n+  static jlong total_swap_space();\n+  static jlong free_swap_space();\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -681,0 +681,5 @@\n+    <event name=\"jdk.SwapSpace\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">everyChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -681,0 +681,5 @@\n+    <event name=\"jdk.SwapSpace\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">everyChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.os;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.event.os.TestSwapSpaceEvent\n+ *\/\n+public class TestSwapSpaceEvent {\n+    private final static String EVENT_NAME = EventNames.SwapSpace;\n+\n+    public static void main(String[] args) throws Throwable {\n+        Recording recording = new Recording();\n+        recording.enable(EVENT_NAME);\n+        recording.start();\n+        recording.stop();\n+        List<RecordedEvent> events = Events.fromRecording(recording);\n+        Events.hasEvents(events);\n+        for (RecordedEvent event : events) {\n+            System.out.println(\"Event: \" + event);\n+            long totalSize = Events.assertField(event, \"totalSize\").atLeast(0L).getValue();\n+            Events.assertField(event, \"freeSize\").atLeast(0L).atMost(totalSize);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/os\/TestSwapSpaceEvent.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -189,0 +189,1 @@\n+    public static final String SwapSpace = PREFIX + \"SwapSpace\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}