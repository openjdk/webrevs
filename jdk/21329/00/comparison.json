{"files":[{"patch":"@@ -66,0 +66,1 @@\n+#include \"memory\/oopFactory.hpp\"\n@@ -754,2 +755,10 @@\n-  \/\/ Exercise the manifest processing code to ensure classes used by CDS at runtime\n-  \/\/ are always archived\n+  \/\/ Some classes are used at CDS runtime but are not loaded, and therefore archived, at\n+  \/\/ dumptime. We can perform dummmy calls to these classes at dumptime to ensure they\n+  \/\/ are archived.\n+  make_dummy_calls(CHECK);\n+\n+  log_info(cds)(\"Loading classes to share: done.\");\n+}\n+\n+void MetaspaceShared::make_dummy_calls(TRAPS) {\n+  \/\/ Exercise the manifest processing code\n@@ -759,1 +768,19 @@\n-  log_info(cds)(\"Loading classes to share: done.\");\n+  \/\/ Exercise JarVerifier\n+  Handle manifest_name = java_lang_String::create_from_str(\"dummy.jar\", CHECK);\n+  typeArrayOop bytes = oopFactory::new_byteArray(0, CHECK);\n+  Handle dummy_bytes(THREAD, bytes);\n+  JavaCalls::construct_new_instance(vmClasses::Jar_Verifier_klass(),\n+                                    vmSymbols::JarVerifier_constructor_signature(),\n+                                    manifest_name, dummy_bytes,\n+                                    CHECK);\n+\n+  \/\/ Exercise FileSystem and URL code\n+  JavaValue result(T_OBJECT);\n+  Handle path_string = java_lang_String::create_from_str(\"dummy.jar\", CHECK);\n+  JavaCalls::call_static(&result,\n+                         vmClasses::jdk_internal_loader_ClassLoaders_klass(),\n+                         vmSymbols::toFileURL_name(),\n+                         vmSymbols::toFileURL_signature(),\n+                         path_string,\n+                         CHECK);\n+\n@@ -802,10 +829,0 @@\n-  \/\/ Dummy call to load classes used at CDS runtime\n-  JavaValue result(T_OBJECT);\n-  Handle path_string = java_lang_String::create_from_str(\"dummy.jar\", CHECK);\n-  JavaCalls::call_static(&result,\n-                         vmClasses::jdk_internal_loader_ClassLoaders_klass(),\n-                         vmSymbols::toFileURL_name(),\n-                         vmSymbols::toFileURL_signature(),\n-                         path_string,\n-                         CHECK);\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":30,"deletions":13,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+  static void make_dummy_calls(TRAPS) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,0 +149,1 @@\n+  do_klass(Jar_Verifier_klass,                          java_util_jar_JarVerifier                             ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+  template(java_util_jar_JarVerifier,                 \"java\/util\/jar\/JarVerifier\")                \\\n@@ -745,0 +746,1 @@\n+  template(JarVerifier_constructor_signature,               \"(Ljava\/lang\/String;[B)V\")                            \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}