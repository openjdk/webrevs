{"files":[{"patch":"@@ -72,0 +72,1 @@\n+import jdk.internal.net.http.common.ValidatingHeadersConsumer.Context;\n@@ -987,1 +988,1 @@\n-                        orphanedConsumer = new ValidatingHeadersConsumer();\n+                        orphanedConsumer = new ValidatingHeadersConsumer(Context.RESPONSE);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1874,1 +1874,6 @@\n-    private class HeadersConsumer extends ValidatingHeadersConsumer implements DecodingCallback {\n+    private final class HeadersConsumer extends ValidatingHeadersConsumer\n+            implements DecodingCallback {\n+\n+        private HeadersConsumer() {\n+            super(Context.RESPONSE);\n+        }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+        super(Context.REQUEST);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/HeaderDecoder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.Map;\n@@ -36,2 +37,21 @@\n-    private static final Set<String> PSEUDO_HEADERS =\n-            Set.of(\":authority\", \":method\", \":path\", \":scheme\", \":status\");\n+    private final Context context;\n+\n+    public ValidatingHeadersConsumer(Context context) {\n+        this.context = context;\n+    }\n+\n+    public enum Context {\n+        REQUEST,\n+        RESPONSE,\n+    }\n+    private static final Map<String, Context> PSEUDO_HEADERS =\n+            Map.of(\":authority\", Context.REQUEST,\n+                    \":method\", Context.REQUEST,\n+                    \":path\", Context.REQUEST,\n+                    \":scheme\", Context.REQUEST,\n+                    \":status\", Context.RESPONSE);\n+\n+    \/\/ connection-specific, prohibited by RFC 9113 section 8.2.2\n+    private static final Set<String> PROHIBITED_HEADERS =\n+            Set.of(\"connection\", \"proxy-connection\", \"keep-alive\",\n+                    \"transfer-encoding\", \"upgrade\");\n@@ -63,2 +83,7 @@\n-            } else if (!PSEUDO_HEADERS.contains(n)) {\n-                throw newException(\"Unknown pseudo-header '%s'\", n);\n+            } else {\n+                Context expectedContext = PSEUDO_HEADERS.get(n);\n+                if (expectedContext == null) {\n+                    throw newException(\"Unknown pseudo-header '%s'\", n);\n+                } else if (expectedContext != context) {\n+                    throw newException(\"Pseudo-header '%s' is not valid in context \" + context, n);\n+                }\n@@ -68,0 +93,9 @@\n+            \/\/ Check for prohibited connection-specific headers.\n+            \/\/ Some servers echo request headers in push promises.\n+            \/\/ If the request was a HTTP\/1.1 upgrade, it included some prohibited headers.\n+            \/\/ For compatibility, we ignore prohibited headers in push promises.\n+            if (context != Context.REQUEST) {\n+                if (PROHIBITED_HEADERS.contains(n)) {\n+                    throw newException(\"Prohibited header name '%s'\", n);\n+                }\n+            }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/ValidatingHeadersConsumer.java","additions":39,"deletions":5,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8303965\n+ * @bug 8303965 8354276\n@@ -30,0 +30,3 @@\n+ * @summary This test verifies the behaviour of the HttpClient when presented\n+ *          with a HEADERS frame followed by CONTINUATION frames, and when presented\n+ *          with bad header fields.\n@@ -79,0 +82,2 @@\n+        of(entry(\":status\", \"200\"),  entry(\"connection\", \"close\")),                \/\/ Prohibited connection-specific header\n+        of(entry(\":status\", \"200\"),  entry(\":scheme\", \"https\")),                   \/\/ Request pseudo-header in response\n@@ -89,1 +94,1 @@\n-     * A function that returns a list of 1) a HEADERS frame ( with an empty\n+     * A function that returns a list of 1) one HEADERS frame ( with an empty\n@@ -103,1 +108,1 @@\n-     * A function that returns a list of a HEADERS frame followed by a number of\n+     * A function that returns a list of one HEADERS frame followed by a number of\n@@ -192,1 +197,1 @@\n-            } catch (Throwable t0) {\n+            } catch (Exception t0) {\n@@ -195,1 +200,3 @@\n-                    t0 = t0.getCause();\n+                    t = t0.getCause();\n+                } else {\n+                    t = t0;\n@@ -197,1 +204,0 @@\n-                t = t0;\n@@ -215,1 +221,7 @@\n-            } else if (iterationIndex == 4) { \/\/ unexpected\n+            } else if (iterationIndex == 4) { \/\/ prohibited\n+                assertTrue(throwable.getMessage().contains(\"Prohibited header name\"),\n+                        \"Expected \\\"Prohibited header name\\\" in: \" + throwable.getMessage());\n+            } else if (iterationIndex == 5) { \/\/ unexpected type\n+                assertTrue(throwable.getMessage().contains(\"not valid in context\"),\n+                        \"Expected \\\"not valid in context\\\" in: \" + throwable.getMessage());\n+            } else if (iterationIndex == 6) { \/\/ unexpected sequence\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/BadHeadersTest.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"}]}