{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Arrays;\n@@ -50,1 +51,1 @@\n-    public static void compileJavaSources(List<SourceCode> javaSources, Path sourceDir, Path classesDir) {\n+    public static void compileJavaSources(List<SourceCode> javaSources, Path sourceDir, Path classesDir, String[] javacFlags) {\n@@ -58,1 +59,1 @@\n-        compileJavaFiles(javaFilePaths, classesDir);\n+        compileJavaFiles(javaFilePaths, classesDir, javacFlags);\n@@ -66,1 +67,1 @@\n-    private static void compileJavaFiles(List<Path> paths, Path classesDir) {\n+    private static void compileJavaFiles(List<Path> paths, Path classesDir, String[] javacFlags) {\n@@ -70,0 +71,3 @@\n+        if (javacFlags != null) {\n+            command.addAll(Arrays.asList(javacFlags));\n+        }\n@@ -195,1 +199,2 @@\n-        if (exitCode != 0 || !output.isEmpty()) {\n+        \/\/ Note: the output can be non-empty even if the compilation succeeds, e.g. for warnings.\n+        if (exitCode != 0) {\n@@ -197,0 +202,1 @@\n+            System.err.println(\"Command: \" + command);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/Compile.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+     *\n+     * @param javacFlags: optional, list of additional flags for javac, e.g. to make modules\n+     *                    visible.\n@@ -75,1 +78,1 @@\n-    public void compile() {\n+    public void compile(String... javacFlags) {\n@@ -89,1 +92,1 @@\n-        Compile.compileJavaSources(javaSources, sourceDir, classesDir);\n+        Compile.compileJavaSources(javaSources, sourceDir, classesDir, javacFlags);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/compile_framework\/CompileFramework.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Example test to use the Compile Framework together with the IR Framework (i.e. TestFramework),\n+ *          and the VectorAPI.\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules jdk.incubator.vector\n+ * @library \/test\/lib \/\n+ * @compile ..\/..\/..\/compiler\/lib\/ir_framework\/TestFramework.java\n+ * @run driver compile_framework.examples.IRFrameworkWithVectorAPIExample\n+ *\/\n+\n+package compile_framework.examples;\n+\n+import compiler.lib.compile_framework.*;\n+import jdk.test.lib.Utils;\n+import jdk.incubator.vector.IntVector;\n+import jdk.test.lib.Platform;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/**\n+ * This test shows that the IR verification can be done on code compiled by the Compile Framework.\n+ * The \"@compile\" command for JTREG is required so that the IRFramework is compiled, other javac\n+ * might not compile it because it is not present in the class, only in the dynamically compiled\n+ * code.\n+ * <p>\n+ * Additionally, we must set the classpath for the Test-VM, so that it has access to all compiled\n+ * classes (see {@link CompileFramework#getEscapedClassPathOfCompiledClasses}).\n+ *\/\n+public class IRFrameworkWithVectorAPIExample {\n+\n+    public static void main(String[] args) {\n+        \/\/ Create a new CompileFramework instance.\n+        CompileFramework comp = new CompileFramework();\n+\n+        \/\/ Add a java source file.\n+        comp.addJavaSourceCode(\"InnerTest\", generateInnerTest(comp));\n+\n+        \/\/ Compile the source file. \"javac\" needs to know that it is ok to compile with the\n+        \/\/ VectorAPI module.\n+        comp.compile(\"--add-modules=jdk.incubator.vector\");\n+\n+        \/\/ InnerTest.main();\n+        comp.invoke(\"InnerTest\", \"main\", new Object[] {null});\n+    }\n+\n+    \/\/ Generate a source java file as String\n+    public static String generateInnerTest(CompileFramework comp) {\n+        return String.format(\"\"\"\n+               import compiler.lib.ir_framework.*;\n+               import jdk.incubator.vector.*;\n+\n+               public class InnerTest {\n+                   public static void main(String args[]) {\n+                       TestFramework framework = new TestFramework(X1.class);\n+                       \/\/ Also the TestFramework must allow the test VM to see the VectorAPI module.\n+                       framework.addFlags(\"-classpath\", \"%s\", \"--add-modules=jdk.incubator.vector\");\n+                       framework.start();\n+                   }\n+\n+                   @Test\n+                   static Object test() {\n+                       return IntVector.broadcast(IntVector.SPECIES_64, 42);\n+                   }\n+               }\n+               \"\"\", comp.getEscapedClassPathOfCompiledClasses());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compile_framework\/examples\/IRFrameworkWithVectorAPIExample.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}