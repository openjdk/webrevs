{"files":[{"patch":"@@ -3749,1 +3749,1 @@\n-                res, intf.getMethodsRecursive(name, parameterTypes, includeStatic, publicOnly));\n+                res, intf.getMethodsRecursive(name, parameterTypes, \/* includeStatic *\/ false, publicOnly));\n@@ -4818,0 +4818,19 @@\n+     * @throws  SecurityException\n+     *          If a security manager, <i>s<\/i>, is present and any of the\n+     *          following conditions is met:\n+     *          <ul>\n+     *          <li> the caller's class loader is not the same as the\n+     *          class loader of this class and invocation of\n+     *          {@link SecurityManager#checkPermission\n+     *          s.checkPermission} method with\n+     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n+     *          denies access to the declared methods within this class\n+     *          <li> the caller's class loader is not the same as or an\n+     *          ancestor of the class loader for the current class and\n+     *          invocation of {@link SecurityManager#checkPackageAccess\n+     *          s.checkPackageAccess()} denies access to the package\n+     *          of this class\n+     *          <\/ul>\n+     * @jls 8.2 Class Members\n+     * @jls 8.4 Method Declarations\n+     * @jls 8.4.2 Method Signature\n@@ -4821,0 +4840,1 @@\n+    @CallerSensitive\n@@ -4822,0 +4842,6 @@\n+        @SuppressWarnings(\"removal\")\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"}]}