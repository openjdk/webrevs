{"files":[{"patch":"@@ -4797,2 +4797,2 @@\n-     * Return the first method that meets the requirements of an application main method.\n-     * The method must:\n+     * Return the first method that meets the requirements of an application main method\n+     * {@jls 12.1.4}. The method must:\n@@ -4800,1 +4800,1 @@\n-     * <li>be declared this class's hierarchy<\/li>\n+     * <li>be declared in this class's hierarchy<\/li>\n@@ -4802,1 +4802,1 @@\n-     * <li>have no arguments or a single argument of type {@code String[]}<\/li>\n+     * <li>have a single argument of type {@code String[]} or no argument<\/li>\n@@ -4806,5 +4806,11 @@\n-     * <\/ul>\n-     * Main methods that have a {@code String[]} argument will be chosen over main\n-     * methods with no argument.\n-     * @apiNote The method returned may be declared in this class, a parent class\n-     * or as a default method of an interface that the class or parent class\n+     *<\/ul>\n+     *\n+     * Searching continues until a main method is found or the search is exhausted. The\n+     * primary search occurs in two phases, once for a main method with a {@code\n+     * String[]} argument and failing that, once for a main method with a no arguments.\n+     * The search itself uses recursion to first look at methods in this class, then\n+     * default methods in this class's interface hierarchy and then repeating these steps\n+     * with the class's super class.\n+     *\n+     * @apiNote The method returned may be declared in this class, a super class\n+     * or as a default method of an interface that the class or super class\n@@ -4812,1 +4818,1 @@\n-     * method with the same signature in the same class. (@jls 8.4.2) states that\n+     * method with the same signature in the same class. {@jls 8.4.2} states that\n@@ -4815,1 +4821,2 @@\n-     * @return the candidate main method or null if none found\n+     *\n+     * @return the main method or null if none found\n@@ -4835,0 +4842,1 @@\n+     * @jls 12.1.4 Invoke a main method\n@@ -4839,1 +4847,1 @@\n-    public Method getMainMethod() {\n+    public Method findMainMethod() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -896,1 +896,1 @@\n-            mainMethod = mainClass.getMainMethod();\n+            mainMethod = mainClass.findMainMethod();\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-        Method mainMethod = appClass.getMainMethod();\n+        Method mainMethod = appClass.findMainMethod();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/Main.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}