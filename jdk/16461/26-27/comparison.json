{"files":[{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315458\n+ * @enablePreview\n+ * @summary Make sure nesting classes don't create symbol conflicts with implicit name.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main NestedClasses\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import toolbox.ToolBox;\n+import toolbox.JavaTask;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class NestedClasses {\n+    private static ToolBox TOOLBOX = new ToolBox();\n+    private static final String JAVA_VERSION = System.getProperty(\"java.specification.version\");\n+\n+    public static void main(String... arg) throws IOException {\n+        compPass(\"A.java\", \"\"\"\n+            void main() {}\n+            class A {} \/\/ okay\n+            \"\"\");\n+\n+        compPass(\"A.java\", \"\"\"\n+            void main() {}\n+            class B {\n+               class A { } \/\/ okay\n+            }\n+            \"\"\");\n+\n+        compFail(\"A.java\", \"\"\"\n+            void main() {}\n+            class B {\n+               class B { } \/\/error\n+            }\n+            \"\"\");\n+    }\n+\n+    \/*\n+     * Test source for successful compile.\n+     *\/\n+    static void compPass(String fileName, String code) throws IOException {\n+        Path path = Path.of(fileName);\n+        Files.writeString(path, code);\n+        String output = new JavacTask(TOOLBOX)\n+                .files(List.of(path))\n+                .classpath(\".\")\n+                .options(\"-encoding\", \"utf8\", \"--enable-preview\", \"-source\", JAVA_VERSION)\n+                .run()\n+                .writeAll()\n+                .getOutput(Task.OutputKind.DIRECT);\n+\n+        if (output.contains(\"compiler.err\")) {\n+            throw new RuntimeException(\"Error detected\");\n+        }\n+    }\n+\n+    \/*\n+     * Test source for unsuccessful compile and specific error.\n+     *\/\n+    static void compFail(String fileName, String code) throws IOException {\n+        Path path = Path.of(fileName);\n+        Files.writeString(path, code);\n+        String output = new JavacTask(TOOLBOX)\n+                .files(List.of(path))\n+                .classpath(\".\")\n+                .options(\"-XDrawDiagnostics\", \"-encoding\", \"utf8\", \"--enable-preview\", \"-source\", JAVA_VERSION)\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutput(Task.OutputKind.DIRECT);\n+\n+        if (!output.contains(\"compiler.err\")) {\n+            throw new RuntimeException(\"No error detected\");\n+        }\n+    }\n+\n+ }\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/NestedClasses.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}