{"files":[{"patch":"@@ -4802,1 +4802,1 @@\n-     * <li>have a single argument of type {@code String[]} or no argument<\/li>\n+     * <li>have a single argument of type {@code String[]}, {@code String...} or no argument<\/li>\n@@ -4810,4 +4810,4 @@\n-     * String[]} argument and failing that, once for a main method with a no arguments.\n-     * The search itself uses recursion to first look at methods in this class, then\n-     * default methods in this class's interface hierarchy and then repeating these steps\n-     * with the class's super class.\n+     * String[]} or {@code String...} argument and failing that, once for a main method\n+     * with a no arguments. The search itself uses recursion to first look at methods\n+     * in this class, then default methods in this class's interface hierarchy and\n+     * then repeating these steps with the class's super class.\n@@ -4817,1 +4817,2 @@\n-     * implements. It is not possible to declare a static main method and instance main\n+     * implements.\n+     * <p>It is not possible to declare a static main method and instance main\n@@ -4821,0 +4822,4 @@\n+     * <p>{@link SecurityException SecurityExceptions} can halt\n+     * the search. In this case, a null is returned.\n+     *\n+     * @return the main method if a method found or null if no method is found\n@@ -4822,17 +4827,0 @@\n-     * @return the main method or null if none found\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *          <ul>\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared methods within this class\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n-     *          <\/ul>\n@@ -4853,2 +4841,6 @@\n-            checkMemberAccess(sm, isPreview ? Member.DECLARED : Member.PUBLIC,\n-                    Reflection.getCallerClass(), true);\n+            try {\n+                checkMemberAccess(sm, isPreview ? Member.DECLARED : Member.PUBLIC,\n+                        Reflection.getCallerClass(), true);\n+            } catch (SecurityException ex) {\n+                return null;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":17,"deletions":25,"binary":false,"changes":42,"status":"modified"}]}