{"files":[{"patch":"@@ -4791,5 +4791,0 @@\n-    private Method findMethod(boolean publicOnly, String name, Class<?>... parameterTypes) {\n-        PublicMethods.MethodList res = getMethodsRecursive(name, parameterTypes, true, publicOnly);\n-        return res == null ? null : getReflectionFactory().copyMethod(res.getMostSpecific());\n-    }\n-\n@@ -4797,35 +4792,1 @@\n-     * Return the first method that meets the requirements of an application main method\n-     * {@jls 12.1.4}. The method must:\n-     * <ul>\n-     * <li>be declared in this class's hierarchy<\/li>\n-     * <li>have the name \"main\"<\/li>\n-     * <li>have a single argument of type {@code String[]}, {@code String...} or no argument<\/li>\n-     * <li>have the return type of void<\/li>\n-     * <li>be public, protected or package private<\/li>\n-     * <li>not be abstract<\/li>\n-     *<\/ul>\n-     *\n-     * Searching continues until a main method is found or the search is exhausted. The\n-     * primary search occurs in two phases, once for a main method with a {@code\n-     * String[]} or {@code String...} argument and failing that, once for a main method\n-     * with a no arguments. The search itself uses recursion to first look at methods\n-     * in this class, then default methods in this class's interface hierarchy and\n-     * then repeating these steps with the class's super class.\n-     *\n-     * @apiNote The method returned may be declared in this class, a super class\n-     * or as a default method of an interface that the class or super class\n-     * implements.\n-     * <p>It is not possible to declare a static main method and instance main\n-     * method with the same signature in the same class. {@jls 8.4.2} states that\n-     * \"It is a compile-time error to declare two methods with override-equivalent\n-     * signatures in a class.\"\n-     * <p>{@link SecurityException SecurityExceptions} can halt\n-     * the search. In this case, a null is returned.\n-     *\n-     * @return the main method if a method found or null if no method is found\n-     *\n-     * @jls 8.2 Class Members\n-     * @jls 8.4 Method Declarations\n-     * @jls 8.4.2 Method Signature\n-     * @jls 12.1.4 Invoke a main method\n-     * @since 22\n+     * Return most specific method that matches name and parameterTypes.\n@@ -4833,36 +4794,3 @@\n-    @PreviewFeature(feature=PreviewFeature.Feature.IMPLICIT_CLASSES)\n-    @CallerSensitive\n-    public Method findMainMethod() {\n-        boolean isPreview = PreviewFeatures.isEnabled();\n-\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                checkMemberAccess(sm, isPreview ? Member.DECLARED : Member.PUBLIC,\n-                        Reflection.getCallerClass(), true);\n-            } catch (SecurityException ex) {\n-                return null;\n-            }\n-        }\n-\n-        Method mainMethod = findMethod(!isPreview, \"main\", String[].class);\n-\n-        if (isPreview && mainMethod == null) {\n-            mainMethod = findMethod(false, \"main\");\n-        }\n-\n-        if (mainMethod == null) {\n-            return null;\n-        }\n-\n-        int mods = mainMethod.getModifiers();\n-\n-        if (Modifier.isAbstract(mods) ||\n-                mainMethod.getReturnType() != void.class ||\n-                (isPreview && Modifier.isPrivate(mods)) ||\n-                (!isPreview && !Modifier.isStatic(mods))) {\n-            return null;\n-        }\n-\n-        return mainMethod;\n+    Method findMethod(boolean publicOnly, String name, Class<?>... parameterTypes) {\n+        PublicMethods.MethodList res = getMethodsRecursive(name, parameterTypes, true, publicOnly);\n+        return res == null ? null : getReflectionFactory().copyMethod(res.getMostSpecific());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":4,"deletions":76,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2348,0 +2348,3 @@\n+            public Method findMethod(Class<?> klass, boolean publicOnly, String name, Class<?>... parameterTypes) {\n+                return klass.findMethod(publicOnly, name, parameterTypes);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,0 +69,5 @@\n+    \/**\n+     * Return most specific method that matches name and parameterTypes.\n+     *\/\n+    Method findMethod(Class<?> klass, boolean publicOnly, String name, Class<?>... parameterTypes);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.misc;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n+public class MethodFinder {\n+\n+    private MethodFinder() {\n+        throw new AssertionError(\"private constructor\");\n+    }\n+\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n+    public static Method findMainMethod(Class<?> cls) {\n+        boolean isPreview = PreviewFeatures.isEnabled();\n+\n+        Method mainMethod = JLA.findMethod(cls, !isPreview, \"main\", String[].class);\n+\n+        if (isPreview && mainMethod == null) {\n+            mainMethod = JLA.findMethod(cls, false, \"main\");\n+        }\n+\n+        if (mainMethod == null) {\n+            return null;\n+        }\n+\n+        int mods = mainMethod.getModifiers();\n+\n+        if (Modifier.isAbstract(mods) ||\n+                mainMethod.getReturnType() != void.class ||\n+                (isPreview && Modifier.isPrivate(mods)) ||\n+                (!isPreview && !Modifier.isStatic(mods))) {\n+            return null;\n+        }\n+\n+        return mainMethod;\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/MethodFinder.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -74,0 +74,1 @@\n+import jdk.internal.misc.MethodFinder;\n@@ -896,1 +897,1 @@\n-            mainMethod = mainClass.findMainMethod();\n+            mainMethod = MethodFinder.findMainMethod(mainClass);\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+import jdk.internal.misc.MethodFinder;\n@@ -436,1 +437,1 @@\n-        Method mainMethod = appClass.findMainMethod();\n+        Method mainMethod = MethodFinder.findMainMethod(appClass);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/Main.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}