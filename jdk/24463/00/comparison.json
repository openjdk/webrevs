{"files":[{"patch":"@@ -77,1 +77,1 @@\n-        \/\/ Platform defined encoding cannot be overridden on the command line\n+        \/\/ Platform defined encodings cannot be overridden on the command line\n@@ -79,3 +79,1 @@\n-        var nativeEncoding = ((raw.propDefault(Raw._file_encoding_NDX) == null)\n-                ? raw.propDefault(Raw._sun_jnu_encoding_NDX)\n-                : raw.propDefault(Raw._file_encoding_NDX));\n+        var nativeEncoding = raw.propDefault(Raw._native_encoding_NDX);\n@@ -86,2 +84,4 @@\n-        var fileEncoding = props.getOrDefault(\"file.encoding\", \"UTF-8\");\n-        if (\"COMPAT\".equals(fileEncoding)) {\n+        var fileEncoding = props.get(\"file.encoding\");\n+        if (fileEncoding == null) {\n+            put(props, \"file.encoding\", \"UTF-8\");\n+        } else if (\"COMPAT\".equals(fileEncoding)) {\n@@ -89,2 +89,0 @@\n-        } else {\n-            putIfAbsent(props, \"file.encoding\", fileEncoding);\n@@ -212,1 +210,2 @@\n-     * Read the raw properties from native System.c.\n+     * Read raw property values from the JVM command line and from\n+     * platform-specific code using native methods in System.c.\n@@ -215,1 +214,1 @@\n-        \/\/ Array indices written by native vmProperties()\n+        \/\/ Indexes of array elements written by native platformProperties()\n@@ -221,2 +220,1 @@\n-        @Native private static final int _file_encoding_NDX = 1 + _display_variant_NDX;\n-        @Native private static final int _file_separator_NDX = 1 + _file_encoding_NDX;\n+        @Native private static final int _file_separator_NDX = 1 + _display_variant_NDX;\n@@ -237,1 +235,2 @@\n-        @Native private static final int _os_arch_NDX = 1 + _line_separator_NDX;\n+        @Native private static final int _native_encoding_NDX = 1 + _line_separator_NDX;\n+        @Native private static final int _os_arch_NDX = 1 + _native_encoding_NDX;\n@@ -258,1 +257,1 @@\n-        \/\/ Array of Strings returned from the VM and Command line properties\n+        \/\/ Array of property values returned from platform-specific native code\n@@ -267,3 +266,3 @@\n-         * Return the value for a well known default from native.\n-         * @param index the index of the known property\n-         * @return the value\n+         * Returns a property value obtained from platform-specific native code.\n+         * @param index the index of the property\n+         * @return the property value, may be null\n@@ -276,3 +275,2 @@\n-         * Return a Properties instance of the command line and VM options\n-         * defined by name and value.\n-         * The Properties instance is sized to include the fixed properties.\n+         * Returns a HashMap containing properties obtained from the command line\n+         * and from the JVM. The HashMap is sized to include the platform properties.\n@@ -280,1 +278,1 @@\n-         * @return return a Properties instance of the command line and VM options\n+         * @return return a HashMap containing command line and JVM properties\n@@ -284,4 +282,4 @@\n-            \/\/ While optimal initialCapacity here would be the exact number of properties\n-            \/\/ divided by LOAD_FACTOR, a large portion of the properties in Raw are\n-            \/\/ usually not set, so for typical cases the chosen capacity avoids resizing\n-            var cmdProps = new HashMap<String, String>((vmProps.length \/ 2) + Raw.FIXED_LENGTH);\n+            \/\/ Many platformProperties are null, so this initial size is an overestimate.\n+            \/\/ However, more properties are added later, including encoding properties\n+            \/\/ and version properties, so the excess space is justified.\n+            HashMap<String, String> cmdProps = HashMap.newHashMap((vmProps.length \/ 2) + Raw.FIXED_LENGTH);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/SystemProps.java","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+    \/* basic encoding properties, always non-NULL *\/\n@@ -154,1 +155,1 @@\n-    PUTPROP(propArray, _file_encoding_NDX, sprops->encoding);\n+    PUTPROP(propArray, _native_encoding_NDX, sprops->encoding);\n@@ -156,1 +157,1 @@\n-    PUTPROP(propArray, _file_encoding_NDX, sprops->sun_jnu_encoding);\n+    PUTPROP(propArray, _native_encoding_NDX, sprops->sun_jnu_encoding);\n@@ -160,3 +161,1 @@\n-    \/*\n-     * file encoding for stdout and stderr\n-     *\/\n+    \/* encodings for standard streams, may be NULL *\/\n","filename":"src\/java.base\/share\/native\/libjava\/System.c","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -66,2 +66,2 @@\n-    char *encoding;\n-    char *sun_jnu_encoding;\n+    char *encoding;             \/* always set non-NULL by platform code *\/\n+    char *sun_jnu_encoding;     \/* always set non-NULL by platform code *\/\n","filename":"src\/java.base\/share\/native\/libjava\/java_props.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include <assert.h>\n@@ -466,0 +467,4 @@\n+\n+    assert(sprops.encoding != NULL);\n+    assert(sprops.sun_jnu_encoding != NULL);\n+\n","filename":"src\/java.base\/unix\/native\/libjava\/java_props_md.c","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include <assert.h>\n@@ -670,0 +671,4 @@\n+            if (sprops.encoding == NULL) {\n+                sprops.encoding = \"UTF-8\";\n+            }\n+\n@@ -674,0 +679,1 @@\n+\n@@ -686,0 +692,3 @@\n+            assert(sprops.encoding != NULL);\n+            assert(sprops.sun_jnu_encoding != NULL);\n+\n","filename":"src\/java.base\/windows\/native\/libjava\/java_props_md.c","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}