{"files":[{"patch":"@@ -223,0 +223,6 @@\n+      case Op_CompressBitsV:\n+      case Op_ExpandBitsV:\n+        if (UseSVE < 2 || !VM_Version::supports_svebitperm()) {\n+          return false;\n+        }\n+        break;\n@@ -243,0 +249,2 @@\n+      case Op_CompressBitsV:\n+      case Op_ExpandBitsV:\n@@ -6622,0 +6630,28 @@\n+\n+\/\/ ---------------------------------- CompressBitsV --------------------------------\n+\n+instruct vcompressBits(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (CompressBitsV src1 src2));\n+  format %{ \"vcompressBits $dst, $src1, $src2\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_bext($dst$$FloatRegister, size,\n+                $src1$$FloatRegister, $src2$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ----------------------------------- ExpandBitsV ---------------------------------\n+\n+instruct vexpandBits(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (ExpandBitsV src1 src2));\n+  format %{ \"vexpandBits $dst, $src1, $src2\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_bdep($dst$$FloatRegister, size,\n+                $src1$$FloatRegister, $src2$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -213,0 +213,6 @@\n+      case Op_CompressBitsV:\n+      case Op_ExpandBitsV:\n+        if (UseSVE < 2 || !VM_Version::supports_svebitperm()) {\n+          return false;\n+        }\n+        break;\n@@ -233,0 +239,2 @@\n+      case Op_CompressBitsV:\n+      case Op_ExpandBitsV:\n@@ -4953,0 +4961,22 @@\n+\n+dnl\n+dnl BITPERM($1,        $2,      $3  )\n+dnl BITPERM(insn_name, op_name, insn)\n+define(`BITPERM', `\n+instruct $1(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst ($2 src1 src2));\n+  format %{ \"$1 $dst, $src1, $src2\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ $3($dst$$FloatRegister, size,\n+                $src1$$FloatRegister, $src2$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+\/\/ ---------------------------------- CompressBitsV --------------------------------\n+BITPERM(vcompressBits, CompressBitsV, sve_bext)\n+\n+\/\/ ----------------------------------- ExpandBitsV ---------------------------------\n+BITPERM(vexpandBits, ExpandBitsV, sve_bdep)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -4213,1 +4213,1 @@\n-    \"CompressV\", \"ExpandV\", \"CompressM\",\n+    \"CompressV\", \"ExpandV\", \"CompressM\", \"CompressBitsV\", \"ExpandBitsV\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,0 +80,2 @@\n+macro(CompressBitsV)\n+macro(ExpandBitsV)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,2 +185,1 @@\n-    \/\/ Not implemented. Returning 0 temporarily\n-    return 0;\n+    return (bt == T_INT || bt == T_LONG ? Op_CompressBitsV : 0);\n@@ -188,2 +187,1 @@\n-    \/\/ Not implemented. Returning 0 temporarily\n-    return 0;\n+    return (bt == T_INT || bt == T_LONG ? Op_ExpandBitsV : 0);\n@@ -705,0 +703,2 @@\n+  case Op_CompressBitsV: return new CompressBitsVNode(n1, n2, vt);\n+  case Op_ExpandBitsV: return new ExpandBitsVNode(n1, n2, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1805,0 +1805,14 @@\n+class CompressBitsVNode : public VectorNode {\n+public:\n+  CompressBitsVNode(Node* in, Node* mask, const TypeVect* vt)\n+  : VectorNode(in, mask, vt) {}\n+  virtual int Opcode() const;\n+};\n+\n+class ExpandBitsVNode : public VectorNode {\n+public:\n+  ExpandBitsVNode(Node* in, Node* mask, const TypeVect* vt)\n+  : VectorNode(in, mask, vt) {}\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1767,0 +1767,2 @@\n+  declare_c2_type(CompressBitsVNode, VectorNode)                          \\\n+  declare_c2_type(ExpandBitsVNode, VectorNode)                            \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1411,0 +1411,10 @@\n+    public static final String COMPRESS_BITSV = PREFIX + \"COMPRESS_BITSV\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COMPRESS_BITSV, \"CompressBitsV\");\n+    }\n+\n+    public static final String EXPAND_BITSV = PREFIX + \"EXPAND_BITSV\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(EXPAND_BITSV, \"ExpandBitsV\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.ir_framework.*;\n+\n+import java.util.Random;\n+\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.LongVector;\n+import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * @test\n+ * @bug 8301012\n+ * @library \/test\/lib \/\n+ * @requires os.arch == \"aarch64\" & vm.cpu.features ~= \".*sve2.*\" & vm.cpu.features ~= \".*svebitperm.*\"\n+ * @summary [vectorapi]: Intrinsify CompressBitsV\/ExpandBitsV and add the AArch64 SVE backend implementation\n+ * @modules jdk.incubator.vector\n+ * @run driver compiler.vectorapi.TestVectorCompressExpandBits\n+ *\/\n+\n+public class TestVectorCompressExpandBits {\n+    private static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_PREFERRED;\n+\n+    private static int LENGTH = 1024;\n+    private static final Random RD = Utils.getRandomInstance();\n+\n+    private static int[] ia;\n+    private static int[] ib;\n+    private static int[] ir;\n+    private static long[] la;\n+    private static long[] lb;\n+    private static long[] lr;\n+\n+    static {\n+        ia = new int[LENGTH];\n+        ib = new int[LENGTH];\n+        ir = new int[LENGTH];\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        lr = new long[LENGTH];\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            ia[i] = RD.nextInt(25);\n+            ib[i] = RD.nextInt(25);\n+            la[i] = RD.nextLong(25);\n+            lb[i] = RD.nextLong(25);\n+        }\n+    }\n+\n+    \/\/ Test for vectorized Integer.compress operation in SVE2\n+    @Test\n+    @IR(counts = {IRNode.COMPRESS_BITSV, \"> 0\"})\n+    public static void testIntCompress() {\n+        for (int i = 0; i < LENGTH; i += I_SPECIES.length()) {\n+            IntVector av = IntVector.fromArray(I_SPECIES, ia, i);\n+            IntVector bv = IntVector.fromArray(I_SPECIES, ib, i);\n+            av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(ir, i);\n+        }\n+    }\n+\n+    @Run(test = \"testIntCompress\")\n+    public static void testIntCompress_runner() {\n+        testIntCompress();\n+        for (int i = 0; i < LENGTH; i++) {\n+            Asserts.assertEquals(Integer.compress(ia[i], ib[i]), ir[i]);\n+        }\n+    }\n+\n+    \/\/ Test for vectorized Integer.expand operation in SVE2\n+    @Test\n+    @IR(counts = {IRNode.EXPAND_BITSV, \"> 0\"})\n+    public static void testIntExpand() {\n+        for (int i = 0; i < LENGTH; i += I_SPECIES.length()) {\n+            IntVector av = IntVector.fromArray(I_SPECIES, ia, i);\n+            IntVector bv = IntVector.fromArray(I_SPECIES, ib, i);\n+            av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(ir, i);\n+        }\n+    }\n+\n+    @Run(test = \"testIntExpand\")\n+    public static void testIntExpand_runner() {\n+        testIntExpand();\n+        for (int i = 0; i < LENGTH; i++) {\n+            Asserts.assertEquals(Integer.expand(ia[i], ib[i]), ir[i]);\n+        }\n+    }\n+\n+    \/\/ Test for vectorized Long.compress operation in SVE2\n+    @Test\n+    @IR(counts = {IRNode.COMPRESS_BITSV, \"> 0\"})\n+    public static void testLongCompress() {\n+        for (int i = 0; i < LENGTH; i += L_SPECIES.length()) {\n+            LongVector av = LongVector.fromArray(L_SPECIES, la, i);\n+            LongVector bv = LongVector.fromArray(L_SPECIES, lb, i);\n+            av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(lr, i);\n+        }\n+    }\n+\n+    @Run(test = \"testLongCompress\")\n+    public static void testLongCompress_runner() {\n+        testLongCompress();\n+        for (int i = 0; i < LENGTH; i++) {\n+            Asserts.assertEquals(Long.compress(la[i], lb[i]), lr[i]);\n+        }\n+    }\n+\n+    \/\/ Test for vectorized Long.expand operation in SVE2\n+    @Test\n+    @IR(counts = {IRNode.EXPAND_BITSV, \"> 0\"})\n+    public static void testLongExpand() {\n+        for (int i = 0; i < LENGTH; i += L_SPECIES.length()) {\n+            LongVector av = LongVector.fromArray(L_SPECIES, la, i);\n+            LongVector bv = LongVector.fromArray(L_SPECIES, lb, i);\n+            av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(lr, i);\n+        }\n+    }\n+\n+    @Run(test = \"testLongExpand\")\n+    public static void testLongExpand_runner() {\n+        testLongExpand();\n+        for (int i = 0; i < LENGTH; i++) {\n+            Asserts.assertEquals(Long.expand(la[i], lb[i]), lr[i]);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\",\n+                                   \"-XX:UseSVE=2\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorCompressExpandBits.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}