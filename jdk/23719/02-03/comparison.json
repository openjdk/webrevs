{"files":[{"patch":"@@ -105,0 +105,2 @@\n+ *                                                     | 0| 0| 0|a5|a4|a3|a2|a1|\n+ *          Acc1 += A *  B                            *|bi|bi|bi|bi|bi|bi|bi|bi|\n@@ -106,2 +108,0 @@\n- *                                                    *| 0| 0| 0|a5|a4|a3|a2|a1|\n- *          Acc1 += A *  B                             |bi|bi|bi|bi|bi|bi|bi|bi|\n@@ -109,3 +109,3 @@\n- *                                               Acc2+=| 0| 0| 0| 0| 0| 0| 0| 0|\n- *                                                   *h| 0| 0| 0|a5|a4|a3|a2|a1|\n- *          Acc2 += A *h B                             |bi|bi|bi|bi|bi|bi|bi|bi|\n+ *                                                     | 0| 0| 0|a5|a4|a3|a2|a1|\n+ *          Acc2 += A *h B                           *h|bi|bi|bi|bi|bi|bi|bi|bi|\n+ *                                               Acc2+=| 0| 0| 0| d5|d4|d3|d2|d1|\n@@ -116,3 +116,3 @@\n- *                                               Acc1+=| 0| 0| 0|c5|c4|c3|c2|c1|\n- *                                                    *| 0| 0| 0|m5|m4|m3|m2|m1|\n- *          Acc1 += M *  N                             |n0|n0|n0|n0|n0|n0|n0|n0| Note: 52 low bits of Acc1[0] == 0 due to Montgomery!\n+ *                                                     | 0| 0| 0|m5|m4|m3|m2|m1|\n+ *          Acc1 += M *  N                            *|n0|n0|n0|n0|n0|n0|n0|n0|\n+ *                                               Acc1+=| 0| 0| 0|c5|c4|c3|c2|c1| Note: 52 low bits of c1 == 0 due to Montgomery!\n@@ -120,0 +120,2 @@\n+ *                                                     | 0| 0| 0|m5|m4|m3|m2|m1|\n+ *          Acc2 += M *h N                           *h|n0|n0|n0|n0|n0|n0|n0|n0|\n@@ -121,2 +123,0 @@\n- *                                                   *h| 0| 0| 0|m5|m4|m3|m2|m1|\n- *          Acc2 += M *h N                             |n0|n0|n0|n0|n0|n0|n0|n0|\n@@ -138,0 +138,25 @@\n+ *\n+ * Carry = Acc1[0] >> 52\n+ * Acc1L = Acc1[0] & mask52\n+ * Acc1  = Acc1 shift one q element>>\n+ * Acc1 += Carry\n+ *\n+ * Carry = Acc2[0] >> 52\n+ * Acc2L = Acc2[0] & mask52\n+ * Acc2  = Acc2 shift one q element>>\n+ * Acc2 += Carry\n+ *\n+ * for col:=1 to 4\n+ *   Carry = Acc2[col]>>52\n+ *   Carry = Carry shift one q element<<\n+ *   Acc2 += Carry\n+ *\n+ *   Carry = Acc1[col]>>52\n+ *   Carry = Carry shift one q element<<\n+ *   Acc1 += Carry\n+ * done\n+ *\n+ * Acc1 &= mask52\n+ * Acc2 &= mask52\n+ * Mask = sign(Acc2)\n+ * Result = select(Mask ? Acc1 or Acc2)\n@@ -222,4 +247,4 @@\n-  \/\/ At this point the result in Acc1 needs carry propagation\n-  \/\/ It also can overflow by 1 Modulus. Subtract one modulus\n-  \/\/ then do carry propagation simultaneously on both results\n-  \/\/ Carry out from the last limb becomes the mask to select the correct result\n+  \/\/ At this point the result is in Acc1, but needs to be normailized to 52bit\n+  \/\/ limbs (i.e. needs carry propagation) It can also overflow by 1 modulus.\n+  \/\/ Subtract one modulus from Acc1 into Acc2 then carry propagate both\n+  \/\/ simultaneously\n@@ -231,1 +256,3 @@\n-  \/\/ digit 0 (Output to Acc1L & Acc2L)\n+  \/\/ digit 0 carry out\n+  \/\/ Also split Acc1 and Acc2 into two 256-bit vectors each {Acc1, Acc1L} and\n+  \/\/ {Acc2, Acc2L} to use 256bit operations\n@@ -242,4 +269,16 @@\n-  \/\/ Do carry propagation while remaining in vector domain. Carry register\n-  \/\/ contains just the carry for the particular column, everything else is masked\n-  \/\/ out.\n-  \/\/ Note: element 'shift' with vpermq is more expensive, vpalignr if possible\n+ \/* remaining digits carry\n+  * Note1: Carry register contains just the carry for the particular\n+  * column (zero-mask the rest) and gets progressively shifted left\n+  * Note2: 'element shift' with vpermq is more expensive, so using vpalignr when\n+  * possible. vpalignr shifts 'right' not left, so place the carry appropiately\n+  *                               +--+--+--+--+    +--+--+--+--+         +--+--+\n+  * vpalignr(X, X, X, 8):         |x4|x3|x2|x1| >> |x2|x1|x2|x1|         |x1|x2|\n+  *                               +--+--+--+--+    +--+--+--+--+ >>      +--+--+\n+  *                                     |          +--+--+--+--+   +--+--+\n+  *                                     |          |x4|x3|x4|x3|   |x3|x4|\n+  *                                     |          +--+--+--+--+   +--+--+\n+  *                                     |                                vv\n+  *                                     |                          +--+--+--+--+\n+  *  (x3 and x1 is effectively shifted  +------------------------> |x3|x4|x1|x2|\n+  *   left; zero-mask everything but one column of interest)       +--+--+--+--+\n+  *\/\n@@ -264,1 +303,3 @@\n-  \/\/ Mask\n+  \/\/ Iff Acc2 is negative, then Acc1 contains the result.\n+  \/\/ if Acc2 is negative, upper 12 bits will be set; arithmetic shift by 64 bits\n+  \/\/ generates a mask from Acc2 sign bit\n@@ -349,1 +390,1 @@\n- *   Result = Mask\n+ *   Result = select(Mask ? Acc1 or Acc2)\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_poly_mont.cpp","additions":62,"deletions":21,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -422,6 +422,5 @@\n-        \/\/ either {c0-4} or {c5-9}. `If statements` are not allowed here, so use\n-        \/\/ boolean algebra (i.e. a mask). If statement would had been `if {c0-4}\n-        \/\/ is negative`, which essentially means 'what is the sign bit of c4'\n-        \/\/ A signed shift is the easiest way to broadcast c4-sign-bit into a\n-        \/\/ mask\n-        long mask = c4 >> BITS_PER_LIMB;\n+        \/\/ either {c0-4} or {c5-9}. Iff {c0-4} is negative, then {c5-9} contains\n+        \/\/ the result. (After carry propagation) IF c4 is negative, {c0-4} is\n+        \/\/ negative. Arithmetic shift by 64 bits generates a mask from c4 that\n+        \/\/ can be used to select 'constant time' either {c0-4} or {c5-9}.\n+        long mask = c4 >> 63;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/MontgomeryIntegerPolynomialP256.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}