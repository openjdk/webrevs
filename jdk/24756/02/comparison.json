{"files":[{"patch":"@@ -67,1 +67,1 @@\n-            type = \"SunX509\";\n+            type = \"PKIX\";\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/KeyManagerFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-ssl.KeyManagerFactory.algorithm=SunX509\n+ssl.KeyManagerFactory.algorithm=PKIX\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @library \/test\/lib\/\n+ * @library \/javax\/net\/ssl\/templates\n+ *          \/test\/lib\/\n@@ -39,2 +40,0 @@\n-import java.io.IOException;\n-import java.io.File;\n@@ -52,1 +51,5 @@\n-public class SSLSocketParametersTest implements Serializable {\n+public class SSLSocketParametersTest extends SSLContextTemplate {\n+\n+    public SSLSocketParametersTest() throws Exception {\n+        SSLContext.setDefault(createServerSSLContext());\n+    }\n@@ -58,1 +61,1 @@\n-    public class HelloImpl implements Hello {\n+    public static class HelloImpl implements Hello {\n@@ -137,16 +140,0 @@\n-        \/\/ Set keystore properties (server-side)\n-        \/\/\n-        final String keystore = System.getProperty(\"test.src\") +\n-                File.separator + \"keystore\";\n-        System.out.println(\"KeyStore = \" + keystore);\n-        System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n-\n-        \/\/ Set truststore properties (client-side)\n-        \/\/\n-        final String truststore = System.getProperty(\"test.src\") +\n-                File.separator + \"truststore\";\n-        System.out.println(\"TrustStore = \" + truststore);\n-        System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"trustword\");\n-\n@@ -156,1 +143,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/javax\/rmi\/ssl\/SSLSocketParametersTest.java","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"filename":"test\/jdk\/javax\/rmi\/ssl\/keystore","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/rmi\/ssl\/truststore","binary":true,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+ * @modules java.base\/sun.security.x509\n+ *          java.base\/sun.security.util\n@@ -35,2 +37,3 @@\n- * @run main\/othervm ServerIdentityTest dnsstore localhost\n- * @run main\/othervm ServerIdentityTest ipstore 127.0.0.1\n+ *          \/test\/lib\n+ * @run main\/othervm ServerIdentityTest dns localhost\n+ * @run main\/othervm ServerIdentityTest ip 127.0.0.1\n@@ -41,1 +44,2 @@\n-import java.io.InputStream;\n+import static jdk.test.lib.Asserts.fail;\n+\n@@ -43,0 +47,2 @@\n+import java.io.IOException;\n+import java.io.InputStream;\n@@ -44,0 +50,1 @@\n+import java.math.BigInteger;\n@@ -49,1 +56,13 @@\n-\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Date;\n+import java.util.List;\n@@ -51,0 +70,1 @@\n+import javax.net.ssl.KeyManagerFactory;\n@@ -53,0 +73,8 @@\n+import javax.net.ssl.TrustManagerFactory;\n+import jdk.test.lib.security.CertificateBuilder;\n+import sun.security.x509.AuthorityKeyIdentifierExtension;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.KeyIdentifier;\n+import sun.security.x509.SerialNumber;\n+import sun.security.x509.X500Name;\n@@ -56,1 +84,0 @@\n-    private static String keystore;\n@@ -58,1 +85,1 @@\n-    private static SSLContext context;\n+    private static SSLContext serverContext;\n@@ -67,1 +94,1 @@\n-        (new ServerIdentityTest()).run();\n+        new ServerIdentityTest().run();\n@@ -98,1 +125,1 @@\n-            urlc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n+            urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n@@ -112,6 +139,1 @@\n-        return context;\n-    }\n-\n-    @Override\n-    protected SSLContext createClientSSLContext() throws Exception {\n-        return context;\n+        return serverContext;\n@@ -121,1 +143,1 @@\n-        keystore = args[0];\n+        String mode = args[0];\n@@ -124,5 +146,9 @@\n-        String password = \"changeit\";\n-        String keyFilename =\n-                System.getProperty(\"test.src\", \".\") + \"\/\" + keystore;\n-        String trustFilename =\n-                System.getProperty(\"test.src\", \".\") + \"\/\" + keystore;\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        KeyPair serverKeys = kpg.generateKeyPair();\n+        KeyPair clientKeys = kpg.generateKeyPair();\n+\n+        CertificateBuilder serverCertificateBuilder = customCertificateBuilder(\n+                \"CN=server, O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n+                serverKeys.getPublic(), caKeys.getPublic())\n+                .addBasicConstraintsExt(false, false, -1);\n@@ -130,4 +156,24 @@\n-        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", password);\n-        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", password);\n+        if (mode.equalsIgnoreCase(\"dns\")) {\n+            serverCertificateBuilder.addSubjectAltNameDNSExt(List.of(hostname));\n+        } else if (mode.equalsIgnoreCase(\"ip\")) {\n+            serverCertificateBuilder.addSubjectAltNameIPExt(List.of(hostname));\n+        } else {\n+            fail(\"Unknown mode: \" + mode);\n+        }\n+\n+        X509Certificate trustedCert = createTrustedCert(caKeys);\n+\n+        X509Certificate serverCert = serverCertificateBuilder.build(\n+                trustedCert, caKeys.getPrivate(), \"SHA256WithRSA\");\n+\n+        X509Certificate clientCert = customCertificateBuilder(\n+                \"CN=localhost, OU=SSL-Client, O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n+                clientKeys.getPublic(), caKeys.getPublic())\n+                .addBasicConstraintsExt(false, false, -1)\n+                .build(trustedCert, caKeys.getPrivate(), \"SHA256WithRSA\");\n+\n+        serverContext = getSSLContext(\n+                trustedCert, serverCert, serverKeys.getPrivate());\n+\n+        SSLContext clientContext = getSSLContext(\n+                trustedCert, clientCert, clientKeys.getPrivate());\n@@ -135,1 +181,0 @@\n-        context = SSLContext.getDefault();\n@@ -137,1 +182,1 @@\n-                context.getSocketFactory());\n+                clientContext.getSocketFactory());\n@@ -139,0 +184,78 @@\n+\n+    private static SSLContext getSSLContext(\n+            X509Certificate trustedCertificate, X509Certificate keyCertificate,\n+            PrivateKey privateKey)\n+            throws Exception {\n+\n+        \/\/ create a key store\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(null, null);\n+\n+        \/\/ import the trusted cert\n+        ks.setCertificateEntry(\"TLS Signer\", trustedCertificate);\n+\n+        \/\/ generate certificate chain\n+        Certificate[] chain = new Certificate[2];\n+        chain[0] = keyCertificate;\n+        chain[1] = trustedCertificate;\n+\n+        \/\/ import the key entry.\n+        final char[] passphrase = \"passphrase\".toCharArray();\n+        ks.setKeyEntry(\"Whatever\", privateKey, passphrase, chain);\n+\n+        \/\/ Using PKIX TrustManager\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(ks);\n+\n+        \/\/ Using PKIX KeyManager\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"PKIX\");\n+\n+        \/\/ create SSL context\n+        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        kmf.init(ks, passphrase);\n+        ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+        return ctx;\n+    }\n+\n+    private static X509Certificate createTrustedCert(KeyPair caKeys)\n+            throws Exception {\n+        SecureRandom random = new SecureRandom();\n+\n+        KeyIdentifier kid = new KeyIdentifier(caKeys.getPublic());\n+        GeneralNames gns = new GeneralNames();\n+        GeneralName name = new GeneralName(new X500Name(\n+                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\"));\n+        gns.add(name);\n+        BigInteger serialNumber = BigInteger.valueOf(\n+                random.nextLong(1000000) + 1);\n+        return customCertificateBuilder(\n+                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n+                caKeys.getPublic(), caKeys.getPublic())\n+                .setSerialNumber(serialNumber)\n+                .addExtension(new AuthorityKeyIdentifierExtension(kid, gns,\n+                        new SerialNumber(serialNumber)))\n+                .addBasicConstraintsExt(true, true, -1)\n+                .build(null, caKeys.getPrivate(), \"SHA256WithRSA\");\n+    }\n+\n+    private static CertificateBuilder customCertificateBuilder(\n+            String subjectName, PublicKey publicKey, PublicKey caKey)\n+            throws CertificateException, IOException {\n+        SecureRandom random = new SecureRandom();\n+\n+        CertificateBuilder builder = new CertificateBuilder()\n+                .setSubjectName(subjectName)\n+                .setPublicKey(publicKey)\n+                .setNotAfter(\n+                        Date.from(Instant.now().minus(1, ChronoUnit.HOURS)))\n+                .setNotAfter(Date.from(Instant.now().plus(1, ChronoUnit.HOURS)))\n+                .setSerialNumber(\n+                        BigInteger.valueOf(random.nextLong(1000000) + 1))\n+                .addSubjectKeyIdExt(publicKey)\n+                .addAuthorityKeyIdExt(caKey);\n+        builder.addKeyUsageExt(\n+                new boolean[]{true, true, true, true, true, true});\n+\n+        return builder;\n+    }\n+\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsClient\/ServerIdentityTest.java","additions":150,"deletions":27,"binary":false,"changes":177,"status":"modified"},{"filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsClient\/dnsstore","binary":true,"status":"deleted"},{"filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsClient\/ipstore","binary":true,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import java.security.Security;\n@@ -51,0 +52,5 @@\n+        \/\/ Using \"SunX509\" KeyManager which doesn't check peer supported\n+        \/\/ signature algorithms, so we can make keytool print certificate\n+        \/\/ with weak MD5withRSA signature algorithm.\n+        Security.setProperty(\"ssl.KeyManagerFactory.algorithm\", \"SunX509\");\n+\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/PrintSSL.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import sun.security.x509.IPAddressName;\n@@ -236,0 +237,20 @@\n+    \/**\n+     * Helper method to add IPAddress types for the SAN extension\n+     *\n+     * @param IPAddresses A {@code List} of names to add as IPAddress\n+     *         types\n+     * @throws IOException if an encoding error occurs.\n+     *\/\n+    public CertificateBuilder addSubjectAltNameIPExt(List<String> IPAddresses)\n+            throws IOException {\n+        if (!IPAddresses.isEmpty()) {\n+            GeneralNames gNames = new GeneralNames();\n+            for (String name : IPAddresses) {\n+                gNames.add(new GeneralName(new IPAddressName(name)));\n+            }\n+            addExtension(new SubjectAlternativeNameExtension(false,\n+                    gNames));\n+        }\n+        return this;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/CertificateBuilder.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}