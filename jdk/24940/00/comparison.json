{"files":[{"patch":"@@ -485,11 +485,8 @@\n-    \/\/ It's possible the gc cycle was cancelled after the last time\n-    \/\/ the collection checked for cancellation. In which case, the\n-    \/\/ old gc cycle is still completed, and we have to deal with this\n-    \/\/ cancellation. We set the degeneration point to be outside\n-    \/\/ the cycle because if this is an allocation failure, that is\n-    \/\/ what must be done (there is no degenerated old cycle). If the\n-    \/\/ cancellation was due to a heuristic wanting to start a young\n-    \/\/ cycle, then we are not actually going to a degenerated cycle,\n-    \/\/ so the degenerated point doesn't matter here.\n-    check_cancellation_or_degen(ShenandoahGC::_degenerated_outside_cycle);\n-    if (cause == GCCause::_shenandoah_concurrent_gc) {\n+    \/\/ It's possible the gc cycle was cancelled after the last time the collection checked for cancellation. In which\n+    \/\/ case, the old gc cycle is still completed, and we have to deal with this cancellation. We set the degeneration\n+    \/\/ point to be outside the cycle because if this is an allocation failure, that is what must be done (there is no\n+    \/\/ degenerated old cycle). If the cancellation was due to a heuristic wanting to start a young cycle, then we are\n+    \/\/ not actually going to a degenerated cycle, so don't set the degeneration point here.\n+    if (ShenandoahCollectorPolicy::is_allocation_failure(cause)) {\n+      check_cancellation_or_degen(ShenandoahGC::_degenerated_outside_cycle);\n+    } else if (cause == GCCause::_shenandoah_concurrent_gc) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"}]}