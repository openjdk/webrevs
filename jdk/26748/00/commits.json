[{"commit":{"message":"8365147: AArch64: Replace DMB + LD + DMB with LDAR for C1 volatile loads\n\nReplaces the DMB ISH + LD + DMB ISHLD sequence with LDAR\nfor volatile field loads - for example, AtomicLong::get.\n\nThis is valid, as originally the DMBs were necessary due to\nthe case described here - https:\/\/bugs.openjdk.org\/browse\/JDK-8179954.\nAs in the rare case where the LD can be reordered with an LDAR\nor STLR from the C2 implementation for stores and loads, these\nDMBs are required.\nHowever, acquire\/release operations use a sequentially consistent model\nwhich does not allow reordering between them. Hence, the LD can be\nreplaced with an LDAR to disallow reordering with a STLR\/LDAR\nand the first DMB can be removed.\n\nThe LDAR has acquire semantics, so it's impossible for\nmemory accesses after to be reordered before; the DMB ISHLD is\nnot required. Therefore, a singular LDAR is sufficient.\n\nThis excludes floats and doubles, as they do not have\nequivalent load-acquire instructions.\n\nChange-Id: Ia93607f8bb20c2d974fe6b2e586dd3239bb2728c"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp"},{"filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp"},{"filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.hpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.cpp"}],"sha":"287c566b69d9388d73862260a0062fe4cf3665c3"}]