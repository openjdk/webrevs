{"files":[{"patch":"@@ -1645,1 +1645,1 @@\n-    if(!OptoReg::is_valid(OptoReg::add(reg,-chunk)) && is_infinite_stack) {\n+    if (!OptoReg::is_valid(OptoReg::add(reg, -chunk)) && is_infinite_stack) {\n@@ -1654,1 +1654,1 @@\n-    else if( OptoReg::is_valid(reg)) {\n+    else if (OptoReg::is_valid(reg)) {\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  static const uint InfiniteStack_size = 0xFFFFF; \/\/ This mask size is used to tell that the mask of this LRG supports stack positions\n+  static const uint INFINITE_STACK_SIZE = 0xFFFFF; \/\/ This mask size is used to tell that the mask of this LRG supports stack positions\n@@ -86,1 +86,1 @@\n-    assert(!_mask.is_infinite_stack() || (_mask.is_infinite_stack() && lo_degree()), \"_eff_degree can't be bigger than InfiniteStack_size - _num_regs if the mask supports stack registers\");\n+    assert(!_mask.is_infinite_stack() || (_mask.is_infinite_stack() && lo_degree()), \"_eff_degree can't be bigger than INFINITE_STACK_SIZE - _num_regs if the mask supports stack registers\");\n@@ -93,1 +93,1 @@\n-    assert(!_mask.is_infinite_stack() || (_mask.is_infinite_stack() && lo_degree()), \"_eff_degree can't be bigger than InfiniteStack_size - _num_regs if the mask supports stack registers\");\n+    assert(!_mask.is_infinite_stack() || (_mask.is_infinite_stack() && lo_degree()), \"_eff_degree can't be bigger than INFINITE_STACK_SIZE - _num_regs if the mask supports stack registers\");\n@@ -108,1 +108,1 @@\n-  int compute_mask_size() const { return _mask.is_infinite_stack() ? InfiniteStack_size : _mask.Size(); }\n+  int compute_mask_size() const { return _mask.is_infinite_stack() ? INFINITE_STACK_SIZE : _mask.Size(); }\n@@ -110,1 +110,1 @@\n-    assert((size == (int)InfiniteStack_size) || (size == (int)_mask.Size()), \"\");\n+    assert((size == (int)INFINITE_STACK_SIZE) || (size == (int)_mask.Size()), \"\");\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -701,1 +701,1 @@\n-  if (UseFPUForSpilling && rm.is_infinite_stack() ) {\n+  if (UseFPUForSpilling && rm.is_infinite_stack()) {\n@@ -710,1 +710,3 @@\n-  if( rm.is_infinite_stack() ) rm_size += 1000000;\n+  if (rm.is_infinite_stack()) {\n+    rm_size += 1000000;\n+  }\n","filename":"src\/hotspot\/share\/opto\/coalesce.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -751,1 +751,1 @@\n-        interfering_lrg.set_mask_size(interfering_lrg.mask().is_infinite_stack() ? LRG::InfiniteStack_size : old_size - 1);\n+        interfering_lrg.set_mask_size(interfering_lrg.mask().is_infinite_stack() ? LRG::INFINITE_STACK_SIZE : old_size - 1);\n","filename":"src\/hotspot\/share\/opto\/ifg.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,2 +176,2 @@\n-  bool can_use = ( RegMask::can_represent(def_reg) ? (use_mask.Member(def_reg) != 0)\n-                                                   : (use_mask.is_infinite_stack() != 0));\n+  bool can_use = (RegMask::can_represent(def_reg) ? (use_mask.Member(def_reg) != 0)\n+                                                  : (use_mask.is_infinite_stack() != 0));\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-      assert(!lrgs(bidx).mask().is_infinite_stack(),\"Infinite stack mask should color\");\n+      assert(!lrgs(bidx).mask().is_infinite_stack(), \"Infinite stack mask should color\");\n@@ -1040,1 +1040,1 @@\n-            if( !umask.is_infinite_stack() &&\n+            if (!umask.is_infinite_stack() &&\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -154,1 +154,3 @@\n-  if (is_infinite_stack()) return false;\n+  if (is_infinite_stack()) {\n+    return false;\n+  }\n@@ -180,1 +182,3 @@\n-  if (is_infinite_stack()) return false;\n+  if (is_infinite_stack()) {\n+    return false;\n+  }\n@@ -249,1 +253,1 @@\n-      return OptoReg::Name((i<<LogBitsPerWord) + find_lowest_bit(_rm_word[i]) + (size - 1));\n+      return OptoReg::Name((i << LogBitsPerWord) + find_lowest_bit(_rm_word[i]) + (size - 1));\n@@ -343,1 +347,3 @@\n-  if (is_infinite_stack()) return false;\n+  if (is_infinite_stack()) {\n+    return false;\n+  }\n@@ -358,1 +364,1 @@\n-        if ((all & ~(bit-1)) != _rm_word[i]) {\n+        if ((all & ~(bit - 1)) != _rm_word[i]) {\n@@ -386,1 +392,1 @@\n-  if (is_infinite_stack())\n+  if (is_infinite_stack()) {\n@@ -388,0 +394,1 @@\n+  }\n@@ -448,1 +455,3 @@\n-    if (is_infinite_stack()) st->print(\"...\");\n+    if (is_infinite_stack()) {\n+      st->print(\"...\");\n+    }\n","filename":"src\/hotspot\/share\/opto\/regmask.cpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    int       _rm_int[RM_SIZE_IN_INTS];\n+    int _rm_int[RM_SIZE_IN_INTS];\n@@ -129,2 +129,6 @@\n-    while (_hwm > 0      && _rm_word[_hwm] == 0) _hwm--;\n-    while ((_lwm < _hwm) && _rm_word[_lwm] == 0) _lwm++;\n+    while (_hwm > 0 && _rm_word[_hwm] == 0) {\n+      _hwm--;\n+    }\n+    while ((_lwm < _hwm) && _rm_word[_lwm] == 0) {\n+      _lwm++;\n+    }\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}