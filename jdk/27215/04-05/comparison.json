{"files":[{"patch":"@@ -1581,1 +1581,1 @@\n-    const int is_infinite = lrg->mask().is_infinite();\n+    const int is_infinite_stack = lrg->mask().is_infinite_stack();\n@@ -1632,1 +1632,1 @@\n-    \/\/assert(is_infinite == lrg->mask().is_infinite(), \"nbrs must not change InfiniteStackedness\");\n+    \/\/assert(is_infinite_stack == lrg->mask().is_infinite_stack(), \"nbrs must not change InfiniteStackedness\");\n@@ -1645,1 +1645,1 @@\n-    if(!OptoReg::is_valid(OptoReg::add(reg,-chunk)) && is_infinite) {\n+    if(!OptoReg::is_valid(OptoReg::add(reg,-chunk)) && is_infinite_stack) {\n@@ -1711,1 +1711,1 @@\n-      assert( !orig_mask.is_infinite(), \"infinite does not spill\" );\n+      assert( !orig_mask.is_infinite_stack(), \"infinite stack does not spill\" );\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    assert(!_mask.is_infinite() || (_mask.is_infinite() && lo_degree()), \"_eff_degree can't be bigger than InfiniteStack_size - _num_regs if the mask supports stack registers\");\n+    assert(!_mask.is_infinite_stack() || (_mask.is_infinite_stack() && lo_degree()), \"_eff_degree can't be bigger than InfiniteStack_size - _num_regs if the mask supports stack registers\");\n@@ -93,1 +93,1 @@\n-    assert(!_mask.is_infinite() || (_mask.is_infinite() && lo_degree()), \"_eff_degree can't be bigger than InfiniteStack_size - _num_regs if the mask supports stack registers\");\n+    assert(!_mask.is_infinite_stack() || (_mask.is_infinite_stack() && lo_degree()), \"_eff_degree can't be bigger than InfiniteStack_size - _num_regs if the mask supports stack registers\");\n@@ -108,1 +108,1 @@\n-  int compute_mask_size() const { return _mask.is_infinite() ? InfiniteStack_size : _mask.Size(); }\n+  int compute_mask_size() const { return _mask.is_infinite_stack() ? InfiniteStack_size : _mask.Size(); }\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -584,1 +584,1 @@\n-          if( !lrgs(lidx).mask().is_infinite() ) {\n+          if( !lrgs(lidx).mask().is_infinite_stack() ) {\n@@ -701,1 +701,1 @@\n-  if (UseFPUForSpilling && rm.is_infinite() ) {\n+  if (UseFPUForSpilling && rm.is_infinite_stack() ) {\n@@ -710,1 +710,1 @@\n-  if( rm.is_infinite() ) rm_size += 1000000;\n+  if( rm.is_infinite_stack() ) rm_size += 1000000;\n","filename":"src\/hotspot\/share\/opto\/coalesce.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -751,1 +751,1 @@\n-        interfering_lrg.set_mask_size(interfering_lrg.mask().is_infinite() ? LRG::InfiniteStack_size : old_size - 1);\n+        interfering_lrg.set_mask_size(interfering_lrg.mask().is_infinite_stack() ? LRG::InfiniteStack_size : old_size - 1);\n","filename":"src\/hotspot\/share\/opto\/ifg.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-        if (!lrg.mask().is_infinite()) {\n+        if (!lrg.mask().is_infinite_stack()) {\n@@ -201,1 +201,1 @@\n-          if (!lrg.mask().is_infinite()) {\n+          if (!lrg.mask().is_infinite_stack()) {\n","filename":"src\/hotspot\/share\/opto\/indexSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -566,1 +566,1 @@\n-  assert(aligned_stack_mask.is_infinite(), \"should be infinite stack\");\n+  assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n@@ -623,1 +623,1 @@\n-     assert(aligned_stack_mask.is_infinite(), \"should be infinite stack\");\n+     assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n@@ -638,1 +638,1 @@\n-     assert(aligned_stack_mask.is_infinite(), \"should be infinite stack\");\n+     assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n@@ -653,1 +653,1 @@\n-     assert(aligned_stack_mask.is_infinite(), \"should be infinite stack\");\n+     assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n@@ -673,1 +673,1 @@\n-      assert(scalable_stack_mask.is_infinite(), \"should be infinite stack\");\n+      assert(scalable_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n@@ -687,1 +687,1 @@\n-     assert(scalable_stack_mask.is_infinite(), \"should be infinite stack\");\n+     assert(scalable_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-                                                   : (use_mask.is_infinite() != 0));\n+                                                   : (use_mask.is_infinite_stack() != 0));\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-      assert(!lrgs(bidx).mask().is_infinite(),\"Infinite mask should color\");\n+      assert(!lrgs(bidx).mask().is_infinite_stack(),\"Infinite stack mask should color\");\n@@ -1040,1 +1040,1 @@\n-            if( !umask.is_infinite() &&\n+            if( !umask.is_infinite_stack() &&\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-  if (is_infinite()) return false;\n+  if (is_infinite_stack()) return false;\n@@ -180,1 +180,1 @@\n-  if (is_infinite()) return false;\n+  if (is_infinite_stack()) return false;\n@@ -343,1 +343,1 @@\n-  if (is_infinite()) return false;\n+  if (is_infinite_stack()) return false;\n@@ -386,1 +386,1 @@\n-  if (is_infinite())\n+  if (is_infinite_stack())\n@@ -448,1 +448,1 @@\n-    if (is_infinite()) st->print(\"...\");\n+    if (is_infinite_stack()) st->print(\"...\");\n","filename":"src\/hotspot\/share\/opto\/regmask.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-  bool is_infinite() const {\n+  bool is_infinite_stack() const {\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    ASSERT_TRUE(!rm.is_infinite());\n+    ASSERT_TRUE(!rm.is_infinite_stack());\n@@ -88,1 +88,1 @@\n-  ASSERT_TRUE(rm.is_infinite());\n+  ASSERT_TRUE(rm.is_infinite_stack());\n@@ -138,1 +138,1 @@\n-  ASSERT_TRUE(rm1.is_infinite());\n+  ASSERT_TRUE(rm1.is_infinite_stack());\n","filename":"test\/hotspot\/gtest\/opto\/test_regmask.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}