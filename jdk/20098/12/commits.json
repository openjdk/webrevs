[{"commit":{"message":"Add simple reduction benchmarks on top of multiply ones"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxVector.java"}],"sha":"d0e793a397ace1628a95240a2ab96047481e99ca"},{"commit":{"message":"Merge branch 'master' into topic.intrinsify-max-min-long"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java"}],"sha":"a190ae68a53bd84033b94a5928d566e63a719711"},{"commit":{"message":"Fix typo"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxInlining.java"}],"sha":"724a346a63957e22be891f7529032c1b33900e81"},{"commit":{"message":"Renaming methods and variables and add docu on algorithms"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Long.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxVector.java"}],"sha":"f83d8863e8180b495900f733c66214644e3f6ea9"},{"commit":{"message":"Fix copyright years"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxInlining.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Long.java"}],"sha":"94397d3219899591e1ee82859856d70c35dd0dc0"},{"commit":{"message":"Make sure it runs with cpus with either avx512 or asimd"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Long.java"}],"sha":"abbaf875f5558270511fb379251ef0edfb49f9a7"},{"commit":{"message":"Test can only run with 256 bit registers or bigger\n\n* Remove platform dependant check\nand use platform independent configuration instead."},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Long.java"}],"sha":"c04919873fa545b6c4a95e489063af6853893519"},{"commit":{"message":"Fix license header"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Long.java"}],"sha":"fb0f731fca29e774327448d7f3dcd2481c400f2d"},{"commit":{"message":"Tests should also run on aarch64 asimd=true envs"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxInlining.java"}],"sha":"4d4753fdb7a5068391f87321b5fd03c19fc45c4e"},{"commit":{"message":"Added comment around the assertions"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxInlining.java"}],"sha":"130b4755c43b77a27d45016f35a40594acbd94af"},{"commit":{"message":"Adjust min\/max identity IR test expectations after changes"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestMinMaxIdentities.java"}],"sha":"7353a07231db4c779312df653cd2bbdedc7cb9c4"},{"commit":{"message":"Fix style"},"files":[{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"}],"sha":"cfe0239f937d93bae0484625d8f9276e0f8f86f1"},{"commit":{"message":"Add max reduction test"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Long.java"}],"sha":"c964c264f57bcb42bcb478c31565c4f81a3c4b75"},{"commit":{"message":"Add empty line"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxVector.java"}],"sha":"65e2e48c033a87c11bb563b5a476cbf3952c250c"},{"commit":{"message":"Merge branch 'master' into topic.intrinsify-max-min-long"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"}],"sha":"aca09222fa4a16d6dcf1c857c33251c865c8eeec"},{"commit":{"message":"Use same default size as in other vector reduction benchmarks"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxVector.java"}],"sha":"0a8718e13b5069542cf2402e9d752d8e8fc7a077"},{"commit":{"message":"Renamed benchmark class"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxVector.java"}],"sha":"f6f02449135b25cc392d7ded4f1755ea45ed722b"},{"commit":{"message":"Double\/Float tests only when avx enabled"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxInlining.java"}],"sha":"b19fc816014bcfdf4687ae3acd6690f388dff8d6"},{"commit":{"message":"Make state class non-final"},"files":[],"sha":"dcf6b547c5cd8afde66f44641bb3c4ebef4696fe"},{"commit":{"message":"Restore previous benchmark iterations and default param size"},"files":[],"sha":"e6698934f020abda8d5bf061ca8959d415ff03e0"},{"commit":{"message":"Add clipping range benchmark that uses min\/max"},"files":[],"sha":"0b19789919c62b2d1554881e66f87cc73096af9b"},{"commit":{"message":"Encapsulate benchmark state within an inner class"},"files":[],"sha":"c9560127634aab56a3fb1cccf3ef1d272f8ae4c7"},{"commit":{"message":"Avoid creating result array in benchmark method"},"files":[],"sha":"6cc5484d58a79e0905156f2c90557ba5202ecfa1"},{"commit":{"message":"Merge branch 'master' into topic.intrinsify-max-min-long"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java"}],"sha":"3f712e23a2c8a02195c78020fa91faa99d0b270a"},{"commit":{"message":"Revert \"Implement cmovL as a jump+mov branch\"\n\nThis reverts commit 1522e26bf66c47b780ebd0d0d0c4f78a4c564e44."},"files":[],"sha":"16ae2a33c8a9d7bee1922d841aafbf3bcb967d18"},{"commit":{"message":"Revert \"Switch movl to movq\"\n\nThis reverts commit a64fcdab7d6c63125c8dfd427ae8a56ff5fa2bb7."},"files":[],"sha":"7a07aa826a0178cacaeec846aca4fa014365a83b"},{"commit":{"message":"Revert \"Fix format of assembly for the movl to movq switch\"\n\nThis reverts commit 13ed87295cff50ff6ef30f909f6dcb35d15af047."},"files":[],"sha":"bc648aa2d4f06213efe37d611d0e6199705e6d18"},{"commit":{"message":"Remove previous benchmark effort"},"files":[],"sha":"28778c847e97fc5a6a6d8799441444d69f566a38"},{"commit":{"message":"Multiply array value in reduction for vectorization to kick in"},"files":[],"sha":"c06e869a9758f493b10462c518d4d9cb738b2cf4"},{"commit":{"message":"Renamed benchmark methods"},"files":[],"sha":"93799d5daa1810aec47f17033b3c0e68992a9a98"},{"commit":{"message":"Add min\/max benchmark that includes loops and reductions"},"files":[],"sha":"6fd8805f6f87e44cacf9db382876d1d1b04c5239"},{"commit":{"message":"Skip single array benchmarks"},"files":[],"sha":"f622852d88c0a81f578960b718da93fb39a6cf24"},{"commit":{"message":"Add an intermediate % that is more representative of real life"},"files":[],"sha":"0047a4b2fafea93d11861066eb2fd886bc5711ea"},{"commit":{"message":"Fix compilation error"},"files":[],"sha":"fe3aff41cda9a56bc0faeb558117f175bbcc4001"},{"commit":{"message":"Fix min case to distribute numbers as per probability"},"files":[],"sha":"0b71cb5dbd44a2b18c8fcfdb95fa18e2255f9d18"},{"commit":{"message":"Distribute values targetting a branch percentage\n\n* Use a random increment algorithm,\nto create an array of values such that min\/max\nbranch percentage matches."},"files":[],"sha":"da720c5af28c3f187242b288be473b32efe01b66"},{"commit":{"message":"Fix format of assembly for the movl to movq switch"},"files":[],"sha":"13ed87295cff50ff6ef30f909f6dcb35d15af047"},{"commit":{"message":"Switch movl to movq\n\n* movl only moves 4 bytes which is not enough here.\nmovq is needed which moves 8 bytes, a java long."},"files":[],"sha":"a64fcdab7d6c63125c8dfd427ae8a56ff5fa2bb7"},{"commit":{"message":"Implement cmovL as a jump+mov branch"},"files":[],"sha":"1522e26bf66c47b780ebd0d0d0c4f78a4c564e44"},{"commit":{"message":"Fix multi long tests to use long arrays"},"files":[],"sha":"605a78a4f0a617ad8dc4816aa1d2e910be94040e"},{"commit":{"message":"Rename benchmark class to MathLoopBench"},"files":[],"sha":"8d66f7bff3abfa576c75e74e3fdaa835905e4a23"},{"commit":{"message":"Add math vectorized JMH benchmark"},"files":[],"sha":"ce71a0e66edb884d6427079f766b9ed625191af6"},{"commit":{"message":"Refactor inline methods to unify their implementations"},"files":[{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"}],"sha":"f91073932b77a4fd5dd92227c6ecfe0a78a8bd88"},{"commit":{"message":"Add IR test"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxInlining.java"}],"sha":"e43b390789d7500c1708277417d1a8730a4a9427"},{"commit":{"message":"8307513: C2: intrinsify Math.max(long,long) and Math.min(long,long)"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java"}],"sha":"3dd72b89f7235a7ea5d149f9716a8018478daa43"}]