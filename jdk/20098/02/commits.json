[{"commit":{"message":"Revert \"Implement cmovL as a jump+mov branch\"\n\nThis reverts commit 1522e26bf66c47b780ebd0d0d0c4f78a4c564e44."},"files":[],"sha":"16ae2a33c8a9d7bee1922d841aafbf3bcb967d18"},{"commit":{"message":"Revert \"Switch movl to movq\"\n\nThis reverts commit a64fcdab7d6c63125c8dfd427ae8a56ff5fa2bb7."},"files":[],"sha":"7a07aa826a0178cacaeec846aca4fa014365a83b"},{"commit":{"message":"Revert \"Fix format of assembly for the movl to movq switch\"\n\nThis reverts commit 13ed87295cff50ff6ef30f909f6dcb35d15af047."},"files":[],"sha":"bc648aa2d4f06213efe37d611d0e6199705e6d18"},{"commit":{"message":"Remove previous benchmark effort"},"files":[],"sha":"28778c847e97fc5a6a6d8799441444d69f566a38"},{"commit":{"message":"Multiply array value in reduction for vectorization to kick in"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxLoopBench.java"}],"sha":"c06e869a9758f493b10462c518d4d9cb738b2cf4"},{"commit":{"message":"Renamed benchmark methods"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxLoopBench.java"}],"sha":"93799d5daa1810aec47f17033b3c0e68992a9a98"},{"commit":{"message":"Add min\/max benchmark that includes loops and reductions"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MinMaxLoopBench.java"}],"sha":"6fd8805f6f87e44cacf9db382876d1d1b04c5239"},{"commit":{"message":"Skip single array benchmarks"},"files":[],"sha":"f622852d88c0a81f578960b718da93fb39a6cf24"},{"commit":{"message":"Add an intermediate % that is more representative of real life"},"files":[],"sha":"0047a4b2fafea93d11861066eb2fd886bc5711ea"},{"commit":{"message":"Fix compilation error"},"files":[],"sha":"fe3aff41cda9a56bc0faeb558117f175bbcc4001"},{"commit":{"message":"Fix min case to distribute numbers as per probability"},"files":[],"sha":"0b71cb5dbd44a2b18c8fcfdb95fa18e2255f9d18"},{"commit":{"message":"Distribute values targetting a branch percentage\n\n* Use a random increment algorithm,\nto create an array of values such that min\/max\nbranch percentage matches."},"files":[],"sha":"da720c5af28c3f187242b288be473b32efe01b66"},{"commit":{"message":"Fix format of assembly for the movl to movq switch"},"files":[],"sha":"13ed87295cff50ff6ef30f909f6dcb35d15af047"},{"commit":{"message":"Switch movl to movq\n\n* movl only moves 4 bytes which is not enough here.\nmovq is needed which moves 8 bytes, a java long."},"files":[],"sha":"a64fcdab7d6c63125c8dfd427ae8a56ff5fa2bb7"},{"commit":{"message":"Implement cmovL as a jump+mov branch"},"files":[],"sha":"1522e26bf66c47b780ebd0d0d0c4f78a4c564e44"},{"commit":{"message":"Fix multi long tests to use long arrays"},"files":[],"sha":"605a78a4f0a617ad8dc4816aa1d2e910be94040e"},{"commit":{"message":"Rename benchmark class to MathLoopBench"},"files":[],"sha":"8d66f7bff3abfa576c75e74e3fdaa835905e4a23"},{"commit":{"message":"Add math vectorized JMH benchmark"},"files":[],"sha":"ce71a0e66edb884d6427079f766b9ed625191af6"},{"commit":{"message":"Refactor inline methods to unify their implementations"},"files":[{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"}],"sha":"f91073932b77a4fd5dd92227c6ecfe0a78a8bd88"},{"commit":{"message":"Add IR test"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxInlining.java"}],"sha":"e43b390789d7500c1708277417d1a8730a4a9427"},{"commit":{"message":"8307513: C2: intrinsify Math.max(long,long) and Math.min(long,long)"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java"}],"sha":"3dd72b89f7235a7ea5d149f9716a8018478daa43"}]