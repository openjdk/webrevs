{"files":[{"patch":"@@ -1612,2 +1612,1 @@\n-  \/\/ The very first entry is the InstanceKlass of the root method of the current compilation in order to get the right\n-  \/\/ (class loader???) protection domain to load subsequent classes during replay compilation.\n+  \/\/ The very first entry is the InstanceKlass of the root method of the current compilation.\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4692,41 +4692,0 @@\n-\/\/ Support for java_security_AccessControlContext\n-\n-int java_security_AccessControlContext::_context_offset;\n-int java_security_AccessControlContext::_privilegedContext_offset;\n-int java_security_AccessControlContext::_isPrivileged_offset;\n-int java_security_AccessControlContext::_isAuthorized_offset;\n-\n-#define ACCESSCONTROLCONTEXT_FIELDS_DO(macro) \\\n-  macro(_context_offset,           k, \"context\",      protectiondomain_signature, false); \\\n-  macro(_privilegedContext_offset, k, \"privilegedContext\", accesscontrolcontext_signature, false); \\\n-  macro(_isPrivileged_offset,      k, \"isPrivileged\", bool_signature, false); \\\n-  macro(_isAuthorized_offset,      k, \"isAuthorized\", bool_signature, false)\n-\n-void java_security_AccessControlContext::compute_offsets() {\n-  assert(_isPrivileged_offset == 0, \"offsets should be initialized only once\");\n-  InstanceKlass* k = vmClasses::AccessControlContext_klass();\n-  ACCESSCONTROLCONTEXT_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n-}\n-\n-#if INCLUDE_CDS\n-void java_security_AccessControlContext::serialize_offsets(SerializeClosure* f) {\n-  ACCESSCONTROLCONTEXT_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n-}\n-#endif\n-\n-oop java_security_AccessControlContext::create(objArrayHandle context, bool isPrivileged, Handle privileged_context, TRAPS) {\n-  assert(_isPrivileged_offset != 0, \"offsets should have been initialized\");\n-  assert(_isAuthorized_offset != 0, \"offsets should have been initialized\");\n-  \/\/ Ensure klass is initialized\n-  vmClasses::AccessControlContext_klass()->initialize(CHECK_NULL);\n-  \/\/ Allocate result\n-  oop result = vmClasses::AccessControlContext_klass()->allocate_instance(CHECK_NULL);\n-  \/\/ Fill in values\n-  result->obj_field_put(_context_offset, context());\n-  result->obj_field_put(_privilegedContext_offset, privileged_context());\n-  result->bool_field_put(_isPrivileged_offset, isPrivileged);\n-  result->bool_field_put(_isAuthorized_offset, true);\n-  return result;\n-}\n-\n-\n@@ -5383,1 +5342,0 @@\n-  f(java_security_AccessControlContext) \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1466,21 +1466,0 @@\n-\/\/ Interface to java.security.AccessControlContext objects\n-\n-class java_security_AccessControlContext: AllStatic {\n- private:\n-  \/\/ Note that for this class the layout changed between JDK1.2 and JDK1.3,\n-  \/\/ so we compute the offsets at startup rather than hard-wiring them.\n-  static int _context_offset;\n-  static int _privilegedContext_offset;\n-  static int _isPrivileged_offset;\n-  static int _isAuthorized_offset;\n-\n-  static void compute_offsets();\n- public:\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n-  static oop create(objArrayHandle context, bool isPrivileged, Handle privileged_context, TRAPS);\n-\n-  \/\/ Debugging\/initialization\n-  friend class JavaClasses;\n-};\n-\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-  \/\/ callee will fill in CL from AK, if they are needed\n+  \/\/ Callee will fill in CL from the accessing klass, if they are needed.\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,0 @@\n-  do_klass(AccessControlContext_klass,                  java_security_AccessControlContext                    ) \\\n-  do_klass(AccessController_klass,                      java_security_AccessController                        ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -123,3 +123,0 @@\n-  template(java_security_AccessControlContext,        \"java\/security\/AccessControlContext\")       \\\n-  template(java_security_AccessController,            \"java\/security\/AccessController\")           \\\n-  template(executePrivileged_name,                    \"executePrivileged\")                        \\\n@@ -490,1 +487,0 @@\n-  template(security_manager_signature,                \"Ljava\/lang\/SecurityManager;\")              \\\n@@ -604,3 +600,0 @@\n-  template(protectiondomain_signature,                \"[Ljava\/security\/ProtectionDomain;\")                        \\\n-  template(accesscontrolcontext_signature,            \"Ljava\/security\/AccessControlContext;\")                     \\\n-  template(class_protectiondomain_signature,          \"(Ljava\/lang\/Class;Ljava\/security\/ProtectionDomain;)V\")     \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1367,0 +1367,1 @@\n+  \/\/ This also looks obsolete\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -165,0 +165,1 @@\n+    \/\/ It was this thing - is this no longer needed also?  We won't have these frames anymore, right (except class loader)?\n@@ -3066,0 +3067,1 @@\n+    \/\/ Also this?\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}