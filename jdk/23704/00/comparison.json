{"files":[{"patch":"@@ -2377,1 +2377,6 @@\n-                noteCyclic(pos, (ClassSymbol)c);\n+                log.error(pos, Errors.CyclicInheritance(c));\n+                seenClasses.stream()\n+                  .filter(s -> !s.type.isErroneous())\n+                  .filter(ClassSymbol.class::isInstance)\n+                  .map(ClassSymbol.class::cast)\n+                  .forEach(Check.this::handleCyclic);\n@@ -2454,1 +2459,2 @@\n-            noteCyclic(pos, (ClassSymbol)c);\n+            log.error(pos, Errors.CyclicInheritance(c));\n+            handleCyclic((ClassSymbol)c);\n@@ -2481,3 +2487,4 @@\n-    \/** Note that we found an inheritance cycle. *\/\n-    private void noteCyclic(DiagnosticPosition pos, ClassSymbol c) {\n-        log.error(pos, Errors.CyclicInheritance(c));\n+    \/** Handle finding an inheritance cycle on a class by setting\n+     *  the class' and its supertypes' types to the error type.\n+     **\/\n+    private void handleCyclic(ClassSymbol c) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8320220\n+ * @summary Fix infinite recursion in cyclic inheritance situation\n+ * @compile\/fail\/ref=ClassCycle4.out -XDrawDiagnostics ClassCycle4.java\n+ *\/\n+\n+interface ClassCycle4 extends I1, I2 {}\n+interface I1 extends ClassCycle4 {}\n+interface I2 extends ClassCycle4 {}\n","filename":"test\/langtools\/tools\/javac\/ClassCycle\/ClassCycle4.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+ClassCycle4.java:8:1: compiler.err.cyclic.inheritance: ClassCycle4\n+1 error\n","filename":"test\/langtools\/tools\/javac\/ClassCycle\/ClassCycle4.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}