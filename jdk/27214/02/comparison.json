{"files":[{"patch":"@@ -1,148 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4369903\n- * @summary Focus on window activation does not work correctly\n- * @key headful\n- * @run main ActivateFocusTest\n- *\/\n-\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.Frame;\n-import java.awt.Graphics;\n-import java.awt.Toolkit;\n-import java.awt.event.FocusEvent;\n-import java.awt.event.FocusListener;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-\n-public class ActivateFocusTest {\n-\n-    public static void main(final String[] args) {\n-        ActivateFocusTest app = new ActivateFocusTest();\n-        app.doTest();\n-    }\n-\n-    public void doTest() {\n-      ActivateFocus[] af = new ActivateFocus[2];\n-      boolean testFailed = false;\n-      Dimension scrSize = Toolkit.getDefaultToolkit().getScreenSize();\n-      for (int i = 0; i < 2; i++) {\n-          af[i] = new ActivateFocus(i);\n-          af[i].setLocation(i * 160 + scrSize.width \/ 2, scrSize.height \/ 2);\n-          af[i].setVisible(true);\n-      }\n-      try {\n-          Thread.sleep(5000);\n-      } catch (InterruptedException ie) {\n-          throw new RuntimeException(\"TEST FAILED - thread was interrupted\");\n-      }\n-      for (int i = 0; i < 2; i++) {\n-          testFailed = (af[i].lw.focusCounter > 1);\n-      }\n-      if (testFailed) {\n-          throw new RuntimeException(\"TEST FAILED - focus is gained more than one time\");\n-      } else {\n-          System.out.println(\"TEST PASSED\");\n-      }\n-    }\n-\n- }\n-\n-class ActivateFocus extends Frame {\n-\n-    public LightWeight lw = null;\n-    int num;\n-\n-    public String toString() {\n-        return (\"Window \" + num);\n-    }\n-\n-    public ActivateFocus(int i) {\n-        setTitle(\"Window \" + i);\n-        lw = new LightWeight(i);\n-        num=i;\n-        addWindowListener(new WindowAdapter() {\n-            public void windowActivated(WindowEvent e) {\n-                if(lw != null) {\n-                    lw.requestFocus();\n-                }\n-            }\n-        });\n-        add(lw);\n-        pack();\n-    }\n-\n-    \/\/ A very simple lightweight component\n-    class LightWeight extends Component implements FocusListener {\n-\n-        boolean focused = false;\n-        int num;\n-        public int focusCounter = 0;\n-\n-        public LightWeight(int num) {\n-            this.num = num;\n-            addFocusListener(this);\n-        }\n-\n-        public void paint(Graphics g) {\n-            Dimension size = getSize();\n-            int w = size.width;\n-            int h = size.height;\n-            g.setColor(getBackground());\n-            g.fillRect(0, 0, w, h);\n-            g.setColor(Color.black);\n-            g.drawOval(0, 0, w-1, h-1);\n-            if (focused) {\n-                g.drawLine(w\/2, 0, w\/2, h);\n-                g.drawLine(0, h\/2, w, h\/2);\n-            }\n-\n-        }\n-\n-        public Dimension getPreferredSize() {\n-            return new Dimension(150, 150);\n-        }\n-\n-        public void focusGained(FocusEvent e) {\n-            focused = true;\n-            focusCounter++;\n-            System.out.println(\"focusGained on \" + e.getComponent());\n-            repaint();\n-        }\n-\n-        public void focusLost(FocusEvent e) {\n-            focused = false;\n-            System.out.println(\"focusLost on \" + e.getComponent());\n-            repaint();\n-        }\n-\n-        public String toString() {\n-            return (\"Component \" + num);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Focus\/ActivateFocusTest.java","additions":0,"deletions":148,"binary":false,"changes":148,"status":"deleted"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4369903\n+ * @summary Focus on window activation does not work correctly\n+ * @key headful\n+ * @run main WindowActivationFocusTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Toolkit;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class WindowActivationFocusTest {\n+\n+    private static final int NUM_FRAMES = 2;\n+    private static ActivateFocus[] af;\n+\n+    public static void main(final String[] args) throws Exception {\n+        try {\n+            WindowActivationFocusTest app = new WindowActivationFocusTest();\n+            EventQueue.invokeAndWait(() -> app.doTest());\n+\n+            Thread.sleep(1000);\n+            boolean testFailed = false;\n+            for (int i = 0; i < NUM_FRAMES; i++) {\n+                testFailed |= (af[i].lw.focusCounter > 1);\n+                System.out.println(\"testFailed \" + testFailed);\n+            }\n+            if (testFailed) {\n+                throw new RuntimeException(\"TEST FAILED - focus is gained more than one time\");\n+            } else {\n+                System.out.println(\"TEST PASSED\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                for (int i = 0; i < NUM_FRAMES; i++) {\n+                    af[i].dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void doTest() {\n+      af = new ActivateFocus[NUM_FRAMES];\n+      Dimension scrSize = Toolkit.getDefaultToolkit().getScreenSize();\n+      for (int i = 0; i < NUM_FRAMES; i++) {\n+          af[i] = new ActivateFocus(i);\n+          af[i].setLocation(i * 160 + scrSize.width \/ 2, scrSize.height \/ 2);\n+          af[i].setVisible(true);\n+      }\n+    }\n+\n+ }\n+\n+class ActivateFocus extends Frame {\n+\n+    public LightWeight lw = null;\n+    int num;\n+\n+    public String toString() {\n+        return (\"Window \" + num);\n+    }\n+\n+    public ActivateFocus(int i) {\n+        setTitle(\"Window \" + i);\n+        lw = new LightWeight(i);\n+        num=i;\n+        addWindowListener(new WindowAdapter() {\n+            public void windowActivated(WindowEvent e) {\n+                if(lw != null) {\n+                    lw.requestFocus();\n+                }\n+            }\n+        });\n+        add(lw);\n+        pack();\n+    }\n+\n+    \/\/ A very simple lightweight component\n+    class LightWeight extends Component implements FocusListener {\n+\n+        boolean focused = false;\n+        int num;\n+        public int focusCounter = 0;\n+\n+        public LightWeight(int num) {\n+            this.num = num;\n+            addFocusListener(this);\n+        }\n+\n+        public void paint(Graphics g) {\n+            Dimension size = getSize();\n+            int w = size.width;\n+            int h = size.height;\n+            g.setColor(getBackground());\n+            g.fillRect(0, 0, w, h);\n+            g.setColor(Color.black);\n+            g.drawOval(0, 0, w-1, h-1);\n+            if (focused) {\n+                g.drawLine(w\/2, 0, w\/2, h);\n+                g.drawLine(0, h\/2, w, h\/2);\n+            }\n+\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(150, 150);\n+        }\n+\n+        public void focusGained(FocusEvent e) {\n+            focused = true;\n+            focusCounter++;\n+            System.out.println(\"focusGained on \" + e.getComponent());\n+            repaint();\n+        }\n+\n+        public void focusLost(FocusEvent e) {\n+            focused = false;\n+            System.out.println(\"focusLost on \" + e.getComponent());\n+            repaint();\n+        }\n+\n+        public String toString() {\n+            return (\"Component \" + num);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/WindowActivationFocusTest.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}