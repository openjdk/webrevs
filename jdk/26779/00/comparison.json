{"files":[{"patch":"@@ -282,1 +282,2 @@\n-  {\n+  for (uint loop_count = 0; \/* empty *\/; ++loop_count) {\n+    \/\/ Try young-gen first.\n@@ -287,1 +288,0 @@\n-  }\n@@ -289,2 +289,9 @@\n-  uint loop_count = 0;\n-  uint gc_count = 0;\n+    \/\/ Try allocating from the old gen for non-TLAB in certain scenarios.\n+    if (!is_tlab) {\n+      if (!should_alloc_in_eden(size) || _is_heap_almost_full) {\n+        result = old_gen()->cas_allocate_noexpand(size);\n+        if (result != nullptr) {\n+          return result;\n+        }\n+      }\n+    }\n@@ -292,1 +299,0 @@\n-  while (true) {\n@@ -304,0 +310,1 @@\n+    uint gc_count;\n@@ -307,15 +314,0 @@\n-\n-      HeapWord* result = young_gen()->allocate(size);\n-      if (result != nullptr) {\n-        return result;\n-      }\n-\n-      \/\/ Try allocating from the old gen for non-TLAB in certain scenarios.\n-      if (!is_tlab) {\n-        if (!should_alloc_in_eden(size) || _is_heap_almost_full) {\n-          result = old_gen()->cas_allocate_noexpand(size);\n-          if (result != nullptr) {\n-            return result;\n-          }\n-        }\n-      }\n@@ -328,3 +320,0 @@\n-      \/\/ Did the VM operation execute? If so, return the result directly.\n-      \/\/ This prevents us from looping until time out on requests that can\n-      \/\/ not be satisfied.\n@@ -333,1 +322,0 @@\n-\n@@ -336,4 +324,0 @@\n-      \/\/ Was the gc-overhead reached inside the safepoint? If so, this mutator should return null as well for global consistency.\n-      if (_gc_overhead_counter >= GCOverheadLimitThreshold) {\n-        return nullptr;\n-      }\n@@ -342,1 +326,6 @@\n-    loop_count++;\n+    \/\/ Was the gc-overhead reached inside the safepoint? If so, this mutator\n+    \/\/ should return null as well for global consistency.\n+    if (_gc_overhead_counter >= GCOverheadLimitThreshold) {\n+      return nullptr;\n+    }\n+\n@@ -345,2 +334,1 @@\n-      log_warning(gc)(\"ParallelScavengeHeap::mem_allocate retries %d times\", loop_count);\n-      log_warning(gc)(\"\\tsize=%zu\", size);\n+      log_warning(gc)(\"ParallelScavengeHeap::mem_allocate retries %d times, size=%zu\", loop_count, size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":19,"deletions":31,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  \/\/ Invoked by mutators and GC-workers.\n+  \/\/ Used by GC-workers during GC or for CDS at startup.\n@@ -123,1 +123,0 @@\n-    assert_locked_or_safepoint(Heap_lock);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}