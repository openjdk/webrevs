{"files":[{"patch":"@@ -2641,0 +2641,8 @@\n+            public byte stringInitCoder() {\n+                return String.COMPACT_STRINGS ? String.LATIN1 : String.UTF16;\n+            }\n+\n+            public byte stringCoder(String str) {\n+                return str.coder();\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+    private static final int REUSE_THRESHOLD;\n@@ -130,0 +131,3 @@\n+        String reuseThreshold = VM.getSavedProperty(\"java.lang.invoke.StringConcat.reuseThreshold\");\n+        REUSE_THRESHOLD = reuseThreshold != null ? Integer.parseInt(reuseThreshold) : 16;\n+\n@@ -1184,1 +1188,1 @@\n-        private static MethodTypeDesc prependArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc prependArgs(MethodType concatArgs, boolean staticConcat) {\n@@ -1186,1 +1190,2 @@\n-            var paramTypes = new ClassDesc[parameterCount + 4];\n+            int prefixArgs = staticConcat ? 3 : 4;\n+            var paramTypes = new ClassDesc[parameterCount + prefixArgs];\n@@ -1190,1 +1195,4 @@\n-            paramTypes[3] = CD_Array_String; \/\/ constants\n+\n+            if (!staticConcat) {\n+                paramTypes[3] = CD_Array_String; \/\/ constants\n+            }\n@@ -1194,1 +1202,1 @@\n-                paramTypes[i + 4] = needStringOf(cl) ? CD_String : ConstantUtils.classDesc(cl);\n+                paramTypes[i + prefixArgs] = needStringOf(cl) ? CD_String : ConstantUtils.classDesc(cl);\n@@ -1201,1 +1209,2 @@\n-         * Only parameter types which can be UTF16 are added. Returns null if no such parameter exists.\n+         * Only parameter types which can be UTF16 are added.\n+         * Returns null if no such parameter exists or CompactStrings is off.\n@@ -1213,1 +1222,1 @@\n-            if (maybeUTF16Count == 0) {\n+            if (maybeUTF16Count == 0 || JLA.stringInitCoder() != 0) {\n@@ -1254,9 +1263,14 @@\n-            var weakConstructorHandle = CACHE.get(concatArgs);\n-            if (weakConstructorHandle != null) {\n-                MethodHandlePair handlePair = weakConstructorHandle.get();\n-                if (handlePair != null) {\n-                    try {\n-                        var instance = handlePair.constructor.invoke(constants);\n-                        return handlePair.concatenator.bindTo(instance);\n-                    } catch (Throwable e) {\n-                        throw new StringConcatException(\"Exception while utilizing the hidden class\", e);\n+            boolean forceInline  = concatArgs.parameterCount() <  FORCE_INLINE_THRESHOLD;\n+            boolean staticConcat = concatArgs.parameterCount() >= REUSE_THRESHOLD;\n+\n+            if (!staticConcat) {\n+                var weakConstructorHandle = CACHE.get(concatArgs);\n+                if (weakConstructorHandle != null) {\n+                    MethodHandlePair handlePair = weakConstructorHandle.get();\n+                    if (handlePair != null) {\n+                        try {\n+                            var instance = handlePair.constructor.invoke(constants);\n+                            return handlePair.concatenator.bindTo(instance);\n+                        } catch (Throwable e) {\n+                            throw new StringConcatException(\"Exception while utilizing the hidden class\", e);\n+                        }\n@@ -1266,0 +1280,1 @@\n+\n@@ -1268,1 +1283,1 @@\n-                           prependArgs = prependArgs(concatArgs);\n+                           prependArgs = prependArgs(concatArgs, staticConcat);\n@@ -1272,2 +1287,0 @@\n-                        final boolean forceInline = concatArgs.parameterCount() < FORCE_INLINE_THRESHOLD;\n-\n@@ -1276,4 +1289,10 @@\n-                            clb.withSuperclass(CD_StringConcatBase)\n-                                .withFlags(ACC_FINAL | ACC_SUPER | ACC_SYNTHETIC)\n-                                .withMethodBody(INIT_NAME, MTD_INIT, 0, CONSTRUCTOR_BUILDER)\n-                                .withMethod(\"length\",\n+                            if (staticConcat) {\n+                                clb.withSuperclass(CD_Object)\n+                                   .withFlags(ACC_FINAL | ACC_SUPER | ACC_SYNTHETIC);\n+                            } else {\n+                                clb.withSuperclass(CD_StringConcatBase)\n+                                   .withFlags(ACC_FINAL | ACC_SUPER | ACC_SYNTHETIC)\n+                                   .withMethodBody(INIT_NAME, MTD_INIT, 0, CONSTRUCTOR_BUILDER);\n+                            }\n+\n+                            clb.withMethod(\"length\",\n@@ -1298,1 +1317,1 @@\n-                                                mb.withCode(generatePrependMethod(prependArgs));\n+                                                mb.withCode(generatePrependMethod(prependArgs, staticConcat, constants));\n@@ -1303,1 +1322,1 @@\n-                                        ACC_FINAL,\n+                                        staticConcat ? ACC_STATIC | ACC_FINAL : ACC_FINAL,\n@@ -1310,0 +1329,2 @@\n+                                                        staticConcat,\n+                                                        constants,\n@@ -1335,0 +1356,5 @@\n+\n+                if (staticConcat) {\n+                    return lookup.findStatic(hiddenClass, METHOD_NAME, concatArgs);\n+                }\n+\n@@ -1410,0 +1436,2 @@\n+                boolean        staticConcat,\n+                String[]       constants,\n@@ -1421,1 +1449,1 @@\n-                        thisSlot      = cb.receiverSlot(),\n+                        thisSlot      = staticConcat ? 0 : cb.receiverSlot(),\n@@ -1457,0 +1485,9 @@\n+                    int coder  = JLA.stringInitCoder(),\n+                        length = 0;\n+                    if (staticConcat) {\n+                        for (var constant : constants) {\n+                            coder |= JLA.stringCoder(constant);\n+                            length += constant.length();\n+                        }\n+                    }\n+\n@@ -1460,2 +1497,7 @@\n-                    cb.aload(thisSlot)\n-                      .getfield(concatClass, \"coder\", CD_byte);\n+                    if (staticConcat) {\n+                        cb.ldc(coder);\n+                    } else {\n+                        cb.aload(thisSlot)\n+                          .getfield(concatClass, \"coder\", CD_byte);\n+                    }\n+\n@@ -1480,2 +1522,7 @@\n-                    cb.aload(thisSlot)\n-                      .getfield(concatClass, \"length\", CD_int);\n+                    if (staticConcat) {\n+                        cb.ldc(length);\n+                    } else {\n+                        cb.aload(thisSlot)\n+                          .getfield(concatClass, \"length\", CD_int);\n+                    }\n+\n@@ -1498,11 +1545,17 @@\n-                    cb.aload(thisSlot)\n-                      .getfield(concatClass, \"constants\", CD_Array_String)\n-                      .dup()\n-                      .astore(constantsSlot)\n-                      .ldc(paramCount)\n-                      .aaload()\n-                      .dup()\n-                      .astore(suffixSlot)\n-                      .invokevirtual(CD_String, \"length\", MTD_int)\n-                      .isub()\n-                      .istore(lengthSlot);\n+                    if (staticConcat) {\n+                        cb.ldc(constants[paramCount].length())\n+                          .isub()\n+                          .istore(lengthSlot);\n+                    } else {\n+                        cb.aload(thisSlot)\n+                          .getfield(concatClass, \"constants\", CD_Array_String)\n+                          .dup()\n+                          .astore(constantsSlot)\n+                          .ldc(paramCount)\n+                          .aaload()\n+                          .dup()\n+                          .astore(suffixSlot)\n+                          .invokevirtual(CD_String, \"length\", MTD_int)\n+                          .isub()\n+                          .istore(lengthSlot);\n+                    }\n@@ -1515,2 +1568,6 @@\n-                    cb.aload(suffixSlot)\n-                      .iload(lengthSlot)\n+                    if (staticConcat) {\n+                        cb.ldc(constants[paramCount]);\n+                    } else {\n+                        cb.aload(suffixSlot);\n+                    }\n+                    cb.iload(lengthSlot)\n@@ -1526,2 +1583,4 @@\n-                      .aload(bufSlot)\n-                      .aload(constantsSlot);\n+                      .aload(bufSlot);\n+                    if (!staticConcat) {\n+                        cb.aload(constantsSlot);\n+                    }\n@@ -1651,1 +1710,4 @@\n-        private static Consumer<CodeBuilder> generatePrependMethod(MethodTypeDesc prependArgs) {\n+        private static Consumer<CodeBuilder> generatePrependMethod(\n+                MethodTypeDesc prependArgs,\n+                boolean staticConcat, String[] constants\n+        ) {\n@@ -1670,1 +1732,1 @@\n-                    for (int i = prependArgs.parameterCount() - 1; i >= 4; i--) {\n+                    for (int i = prependArgs.parameterCount() - 1, end = staticConcat ? 3 : 4; i >= end; i--) {\n@@ -1691,5 +1753,11 @@\n-                          .loadLocal(kind, cb.parameterSlot(i))\n-                          .aload(constantsSlot)\n-                          .ldc(i - 4)\n-                          .aaload()\n-                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n+                          .loadLocal(kind, cb.parameterSlot(i));\n+\n+                        if (staticConcat) {\n+                            cb.ldc(constants[i - 3]);\n+                        } else {\n+                            cb.aload(constantsSlot)\n+                              .ldc(i - 4)\n+                              .aaload();\n+                        }\n+\n+                        cb.invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":119,"deletions":51,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -455,0 +455,4 @@\n+    byte stringInitCoder();\n+\n+    byte stringCoder(String str);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}