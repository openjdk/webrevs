{"files":[{"patch":"@@ -2630,0 +2630,8 @@\n+            public byte stringInitCoder() {\n+                return String.COMPACT_STRINGS ? String.LATIN1 : String.UTF16;\n+            }\n+\n+            public byte stringCoder(String str) {\n+                return str.coder();\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n@@ -1169,1 +1170,1 @@\n-            return changed ? MethodType.methodType(args.returnType(), paramTypes) : args;\n+            return changed ? MethodType.methodType(args.returnType(), paramTypes, true) : args;\n@@ -1182,1 +1183,1 @@\n-        private static MethodTypeDesc prependArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc prependArgs(MethodType concatArgs, boolean staticConcat) {\n@@ -1184,1 +1185,2 @@\n-            var paramTypes = new ClassDesc[parameterCount + 4];\n+            int prefixArgs = staticConcat ? 3 : 4;\n+            var paramTypes = new ClassDesc[parameterCount + prefixArgs];\n@@ -1188,1 +1190,4 @@\n-            paramTypes[3] = CD_Array_String; \/\/ constants\n+\n+            if (!staticConcat) {\n+                paramTypes[3] = CD_Array_String; \/\/ constants\n+            }\n@@ -1192,1 +1197,1 @@\n-                paramTypes[i + 4] = needStringOf(cl) ? CD_String : ConstantUtils.classDesc(cl);\n+                paramTypes[i + prefixArgs] = needStringOf(cl) ? CD_String : ConstantUtils.classDesc(cl);\n@@ -1194,1 +1199,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1198,1 +1203,1 @@\n-         * Construct the MethodType of the coder method,\n+         * Construct the MethodType of the coder method, if there are no parameters it may be UTF16, return null.\n@@ -1201,1 +1206,1 @@\n-        private static MethodTypeDesc coderArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc coderArgsIfMaybeUTF16(MethodType concatArgs) {\n@@ -1203,2 +1208,2 @@\n-            List<ClassDesc> paramTypes = new ArrayList<>();\n-            paramTypes.add(CD_int); \/\/ init coder\n+\n+            int maybeUTF16Count = 0;\n@@ -1206,0 +1211,12 @@\n+                if (maybeUTF16(concatArgs.parameterType(i))) {\n+                    maybeUTF16Count++;\n+                }\n+            }\n+\n+            if (maybeUTF16Count == 0) {\n+                return null;\n+            }\n+\n+            var paramTypes = new ClassDesc[maybeUTF16Count + 1];\n+            paramTypes[0] = CD_int; \/\/ init coder\n+            for (int i = 0, paramIndex = 1; i < parameterCount; i++) {\n@@ -1208,1 +1225,1 @@\n-                    paramTypes.add(cl == char.class ? CD_char : CD_String);\n+                    paramTypes[paramIndex++] = cl == char.class ? CD_char : CD_String;\n@@ -1211,1 +1228,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1226,1 +1243,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1240,9 +1257,14 @@\n-            var weakConstructorHandle = CACHE.get(concatArgs);\n-            if (weakConstructorHandle != null) {\n-                MethodHandlePair handlePair = weakConstructorHandle.get();\n-                if (handlePair != null) {\n-                    try {\n-                        var instance = handlePair.constructor.invoke(constants);\n-                        return handlePair.concatenator.bindTo(instance);\n-                    } catch (Throwable e) {\n-                        throw new StringConcatException(\"Exception while utilizing the hidden class\", e);\n+            final boolean forceInline = concatArgs.parameterCount() < FORCE_INLINE_THRESHOLD;\n+            boolean staticConcat = !forceInline;\n+\n+            if (!staticConcat) {\n+                var weakConstructorHandle = CACHE.get(concatArgs);\n+                if (weakConstructorHandle != null) {\n+                    MethodHandlePair handlePair = weakConstructorHandle.get();\n+                    if (handlePair != null) {\n+                        try {\n+                            var instance = handlePair.constructor.invoke(constants);\n+                            return handlePair.concatenator.bindTo(instance);\n+                        } catch (Throwable e) {\n+                            throw new StringConcatException(\"Exception while utilizing the hidden class\", e);\n+                        }\n@@ -1252,0 +1274,1 @@\n+\n@@ -1253,2 +1276,2 @@\n-                           coderArgs   = parameterMaybeUTF16(concatArgs) ? coderArgs(concatArgs) : null,\n-                           prependArgs = prependArgs(concatArgs);\n+                           coderArgs   = coderArgsIfMaybeUTF16(concatArgs),\n+                           prependArgs = prependArgs(concatArgs, staticConcat);\n@@ -1258,2 +1281,0 @@\n-                        final boolean forceInline = concatArgs.parameterCount() < FORCE_INLINE_THRESHOLD;\n-\n@@ -1262,4 +1283,10 @@\n-                            clb.withSuperclass(CD_StringConcatBase)\n-                                .withFlags(ACC_FINAL | ACC_SUPER | ACC_SYNTHETIC)\n-                                .withMethodBody(INIT_NAME, MTD_INIT, 0, CONSTRUCTOR_BUILDER)\n-                                .withMethod(\"length\",\n+                            if (staticConcat) {\n+                                clb.withSuperclass(CD_Object)\n+                                   .withFlags(ACC_FINAL | ACC_SUPER | ACC_SYNTHETIC);\n+                            } else {\n+                                clb.withSuperclass(CD_StringConcatBase)\n+                                   .withFlags(ACC_FINAL | ACC_SUPER | ACC_SYNTHETIC)\n+                                   .withMethodBody(INIT_NAME, MTD_INIT, 0, CONSTRUCTOR_BUILDER);\n+                            }\n+\n+                            clb.withMethod(\"length\",\n@@ -1284,1 +1311,1 @@\n-                                                mb.withCode(generatePrependMethod(prependArgs));\n+                                                mb.withCode(generatePrependMethod(prependArgs, staticConcat, constants));\n@@ -1289,1 +1316,1 @@\n-                                        ACC_FINAL,\n+                                        staticConcat ? ACC_STATIC | ACC_FINAL : ACC_FINAL,\n@@ -1296,0 +1323,2 @@\n+                                                        staticConcat,\n+                                                        constants,\n@@ -1321,0 +1350,5 @@\n+\n+                if (staticConcat) {\n+                    return lookup.findStatic(hiddenClass, METHOD_NAME, concatArgs);\n+                }\n+\n@@ -1396,0 +1430,2 @@\n+                boolean        staticConcat,\n+                String[]       constants,\n@@ -1407,1 +1443,1 @@\n-                        thisSlot      = cb.receiverSlot(),\n+                        thisSlot      = staticConcat ? 0 : cb.receiverSlot(),\n@@ -1443,0 +1479,9 @@\n+                    int coder  = JLA.stringInitCoder(),\n+                        length = 0;\n+                    if (staticConcat) {\n+                        for (var constant : constants) {\n+                            coder |= JLA.stringCoder(constant);\n+                            length += constant.length();\n+                        }\n+                    }\n+\n@@ -1446,2 +1491,7 @@\n-                    cb.aload(thisSlot)\n-                      .getfield(concatClass, \"coder\", CD_byte);\n+                    if (staticConcat) {\n+                        cb.ldc(coder);\n+                    } else {\n+                        cb.aload(thisSlot)\n+                          .getfield(concatClass, \"coder\", CD_byte);\n+                    }\n+\n@@ -1466,2 +1516,7 @@\n-                    cb.aload(thisSlot)\n-                      .getfield(concatClass, \"length\", CD_int);\n+                    if (staticConcat) {\n+                        cb.ldc(length);\n+                    } else {\n+                        cb.aload(thisSlot)\n+                          .getfield(concatClass, \"length\", CD_int);\n+                    }\n+\n@@ -1481,1 +1536,1 @@\n-                     * suffix  = constants[paranCount];\n+                     * suffix  = constants[paramCount];\n@@ -1484,11 +1539,17 @@\n-                    cb.aload(thisSlot)\n-                      .getfield(concatClass, \"constants\", CD_Array_String)\n-                      .dup()\n-                      .astore(constantsSlot)\n-                      .ldc(paramCount)\n-                      .aaload()\n-                      .dup()\n-                      .astore(suffixSlot)\n-                      .invokevirtual(CD_String, \"length\", MTD_int)\n-                      .isub()\n-                      .istore(lengthSlot);\n+                    if (staticConcat) {\n+                        cb.ldc(constants[paramCount].length())\n+                          .isub()\n+                          .istore(lengthSlot);\n+                    } else {\n+                        cb.aload(thisSlot)\n+                          .getfield(concatClass, \"constants\", CD_Array_String)\n+                          .dup()\n+                          .astore(constantsSlot)\n+                          .ldc(paramCount)\n+                          .aaload()\n+                          .dup()\n+                          .astore(suffixSlot)\n+                          .invokevirtual(CD_String, \"length\", MTD_int)\n+                          .isub()\n+                          .istore(lengthSlot);\n+                    }\n@@ -1501,2 +1562,6 @@\n-                    cb.aload(suffixSlot)\n-                      .iload(lengthSlot)\n+                    if (staticConcat) {\n+                        cb.ldc(constants[paramCount]);\n+                    } else {\n+                        cb.aload(suffixSlot);\n+                    }\n+                    cb.iload(lengthSlot)\n@@ -1512,2 +1577,4 @@\n-                      .aload(bufSlot)\n-                      .aload(constantsSlot);\n+                      .aload(bufSlot);\n+                    if (!staticConcat) {\n+                        cb.aload(constantsSlot);\n+                    }\n@@ -1637,1 +1704,4 @@\n-        private static Consumer<CodeBuilder> generatePrependMethod(MethodTypeDesc prependArgs) {\n+        private static Consumer<CodeBuilder> generatePrependMethod(\n+                MethodTypeDesc prependArgs,\n+                boolean staticConcat, String[] constants\n+        ) {\n@@ -1656,1 +1726,1 @@\n-                    for (int i = prependArgs.parameterCount() - 1; i >= 4; i--) {\n+                    for (int i = prependArgs.parameterCount() - 1, end = staticConcat ? 3 : 4; i >= end; i--) {\n@@ -1677,5 +1747,11 @@\n-                          .loadLocal(kind, cb.parameterSlot(i))\n-                          .aload(constantsSlot)\n-                          .ldc(i - 4)\n-                          .aaload()\n-                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n+                          .loadLocal(kind, cb.parameterSlot(i));\n+\n+                        if (staticConcat) {\n+                            cb.ldc(constants[i - 3]);\n+                        } else {\n+                            cb.aload(constantsSlot)\n+                              .ldc(i - 4)\n+                              .aaload();\n+                        }\n+\n+                        cb.invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n@@ -1695,9 +1771,0 @@\n-\n-        static boolean parameterMaybeUTF16(MethodType args) {\n-            for (int i = 0; i < args.parameterCount(); i++) {\n-                if (maybeUTF16(args.parameterType(i))) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":136,"deletions":69,"binary":false,"changes":205,"status":"modified"},{"patch":"@@ -451,0 +451,4 @@\n+    byte stringInitCoder();\n+\n+    byte stringCoder(String str);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}