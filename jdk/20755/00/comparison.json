{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,3 @@\n-    cmdQueueLock = debugMonitorCreate(\"JDWP Command Queue Lock\");\n+    if (cmdQueueLock == NULL) {\n+      cmdQueueLock = debugMonitorCreate(\"JDWP Command Queue Lock\");\n+    }\n@@ -193,1 +195,0 @@\n-    debugMonitorDestroy(cmdQueueLock);\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/debugLoop.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import com.sun.jdi.Bootstrap;\n+import com.sun.jdi.VirtualMachine;\n+import com.sun.jdi.connect.AttachingConnector;\n+import com.sun.jdi.connect.Connector;\n+import com.sun.jdi.connect.IllegalConnectorArgumentsException;\n+\n+\/**\n+ * @test\n+ * @bug 8338708\n+ * @summary Stress test for reattaching to a debuggee\n+ * @library \/test\/lib\n+ * @modules jdk.jdi\n+ * @run driver ProcessAttachTest\n+ *\/\n+\n+class ReattachStressTestTarg {\n+    public static void main(String args[]) throws Exception {\n+        System.out.println(\"Debuggee started\");\n+        while (true) {\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException e) {\n+            }\n+        }\n+    }\n+}\n+\n+public class ReattachStressTest {\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Test 1: Debuggee start with suspend=n\");\n+        runTest(\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n\");\n+\n+        System.out.println(\"Test 2: Debuggee start with suspend=y\");\n+        runTest(\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y\");\n+    }\n+\n+    private static void runTest(String jdwpArg) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                jdwpArg,\n+                \"ReattachStressTestTarg\");\n+        Process p = null;\n+        try {\n+            p = pb.start();\n+\n+            \/\/ Read the first character of output to make sure we've waited until the\n+            \/\/ debuggee is ready. This will be the debug agent's \"Listening...\" message.\n+            InputStream is = p.getInputStream();\n+            is.read();\n+\n+            \/\/ Attach a debugger\n+            tryDebug(p.pid(), is);\n+        } finally {\n+            p.destroyForcibly();\n+        }\n+    }\n+\n+    private static void tryDebug(long pid, InputStream is) throws IOException,\n+            IllegalConnectorArgumentsException {\n+        \/\/ Get the ProcessAttachingConnector, which can attach using the pid of the debuggee.\n+        AttachingConnector ac = Bootstrap.virtualMachineManager().attachingConnectors()\n+                .stream()\n+                .filter(c -> c.name().equals(\"com.sun.jdi.ProcessAttach\"))\n+                .findFirst()\n+                .orElseThrow(() -> new RuntimeException(\"Unable to locate ProcessAttachingConnector\"));\n+\n+        \/\/ Set the connector's \"pid\" argument to the pid of the debuggee.\n+        Map<String, Connector.Argument> args = ac.defaultArguments();\n+        Connector.StringArgument arg = (Connector.StringArgument) args.get(\"pid\");\n+        arg.setValue(\"\" + pid);\n+\n+        \/\/ Loop that will repeatedly attach and detach from the same debuggee.\n+        for (int i = 0; i < 500; i++) {\n+            System.out.println(i + \": Debugger is attaching to: \" + pid + \" ...\");\n+\n+            \/\/ Attach to the debuggee.\n+            VirtualMachine vm = ac.attach(args);\n+\n+            \/\/ Drain remaining \"Listening...\" output.  Otherwise too much\n+            \/\/ output will buffer up and the debuggee may block until it is cleared.\n+            while (is.available() > 0) {\n+                is.read();\n+            }\n+\n+            \/\/ We've attached. Do some things that will send JDWP commands.\n+            System.out.println(\"Attached!\");\n+            System.out.println(\"JVM name: \" + vm.name());\n+            System.out.println(\"Num threads: \" + vm.allThreads().size());\n+\n+            \/\/ We're all done with this debugger connection.\n+            vm.dispose();\n+\n+            \/\/ Wait for first char of next \"Listening...\" output.\n+            is.read();\n+        }\n+        System.out.println(\"Debugger done.\");\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jdi\/ReattachStressTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}