{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,6 @@\n-        return this.nameMap.computeIfAbsent(string, s -> new NameImpl(this, intern ? s.intern() : s));\n+        Name name = nameMap.get(string);\n+        if (name == null) {\n+            name = new NameImpl(this, intern ? string.intern() : string);\n+            nameMap.put(string, name);\n+        }\n+        return name;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/StringNameTable.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.tools;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import javax.tools.JavaCompiler;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.StandardLocation;\n+import javax.tools.ToolProvider;\n+import java.io.IOException;\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 3, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 2, jvmArgs = \"-Xmx1g\")\n+public class JavacNameTable {\n+\n+    private List<JavaSourceFromString> compilationUnits;\n+    private JavaCompiler compiler;\n+    private StandardJavaFileManager fileManager;\n+    private File classDir;\n+\n+    @Setup\n+    public void prepare() throws IOException {\n+\n+        \/\/ Create a source file with lots of names\n+        StringBuilder buf = new StringBuilder();\n+        buf.append(\"class BigSource {\\n\");\n+        for (int i = 0; i < 20000; i++) {\n+            buf.append(String.format(\n+                \/\/\"final String name%05d = \\\"some text #%5d\\\";\\n\", i, i));\n+                \"String name%05d;\\n\", i, i));\n+        }\n+        buf.append(\"}\\n\");\n+        String bigSource = buf.toString();\n+\n+        compiler = ToolProvider.getSystemJavaCompiler();\n+\n+        fileManager = compiler.getStandardFileManager(null, null, null);\n+        classDir = Files.createTempDirectory(\n+          JavacNameTable.class.getName()).toFile();\n+        fileManager.setLocation(StandardLocation.CLASS_OUTPUT,\n+          Collections.singleton(classDir));\n+\n+        compilationUnits = new ArrayList<>();\n+        compilationUnits.add(new JavaSourceFromString(\"BigSource\", bigSource));\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        for (File f : classDir.listFiles()) {\n+            if (f.isFile()) {\n+                f.delete();\n+            } else {\n+                throw new IllegalStateException(\"Unexpected non-file: \" + f);\n+            }\n+        }\n+        classDir.delete();\n+    }\n+\n+    @Benchmark\n+    public Boolean testSharedTable() throws Exception {\n+        return testCompile(null);\n+    }\n+\n+    @Benchmark\n+    public Boolean testUnsharedTable() throws Exception {\n+        return testCompile(\"-XDuseUnsharedTable=true\");\n+    }\n+\n+    @Benchmark\n+    public Boolean testStringTable() throws Exception {\n+        return testCompile(\"-XDuseStringTable=true\");\n+    }\n+\n+    @Benchmark\n+    public Boolean testInternStringTable() throws Exception {\n+        return testCompile(\"-XDinternStringTable=true\");\n+    }\n+\n+    public Boolean testCompile(String flag) throws Exception {\n+        final List<String> options = flag != null ?\n+          Collections.singletonList(flag) : null;\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager,\n+          null, options, null, compilationUnits);\n+        return task.call();\n+    }\n+\n+    private static class JavaSourceFromString extends SimpleJavaFileObject {\n+\n+        private final String code;\n+\n+        JavaSourceFromString(String name, String code) {\n+            super(URI.create(\"string:\/\/\/\"\n+              + name.replace('.', '\/') + Kind.SOURCE.extension), Kind.SOURCE);\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+            return code;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/tools\/JavacNameTable.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"}]}