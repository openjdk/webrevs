{"files":[{"patch":"@@ -31,0 +31,3 @@\n+ *\n+ * @run main\/othervm -Djava.security.krb5.realm=R -Djava.security.krb5.kdc=127.0.0.1 Krb5NameEquals\n+ * @run main\/othervm -Dsun.security.jgss.native=true Krb5NameEquals\n@@ -33,1 +36,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -37,2 +39,0 @@\n-import java.util.Arrays;\n-\n@@ -41,9 +41,3 @@\n-    public static void main(String[] argv) throws Exception {\n-        var os = System.getProperty(\"os.name\");\n-        var arch = System.getProperty(\"os.arch\");\n-\n-        var isNative = false;\n-\n-        if (os.equals(\"Linux\") || os.equals(\"Mac OS X\")) {\n-\n-            isNative = true;\n+    private static final String NAME_STR1 = \"service@localhost\";\n+    private static final String NAME_STR2 = \"service2@localhost\";\n+    private static final Oid MECH;\n@@ -51,62 +45,6 @@\n-            \/\/ Not all *nix has native GSS libs installed\n-            final var krb5ConfigCheck = ProcessTools.executeCommand(\n-                    \"sh\",\n-                    \"-c\",\n-                    \"krb5-config --libs 2> \/dev\/null\"\n-            );\n-\n-            if (krb5ConfigCheck.getExitValue() != 0) {\n-\n-                \/\/ Fedora has a different path\n-                final var krb5ConfigCheck2 = ProcessTools.executeCommand(\n-                        \"sh\",\n-                        \"-c\",\n-                        \"\/usr\/kerberos\/bin\/krb5-config --libs 2> \/dev\/null\"\n-                );\n-                if (krb5ConfigCheck2.getExitValue() != 0) {\n-                    isNative = false;\n-                }\n-            }\n-        }\n-\n-        if (isNative) {\n-\n-            final var testCommand = new String[]{\"-Dsun.security.jgss.native=true\",\n-                    Krb5NameEquals.Krb5NameEqualsTest.class.getName()\n-            };\n-\n-            final var result = ProcessTools.executeTestJava(testCommand);\n-\n-            if (result.getExitValue() != 0) {\n-                if (os.equals(\"Linux\") &&\n-                    (arch.equals(\"x86_64\") || arch.equals(\"amd64\"))) {\n-                    final var javaPropCommand = new String[]{System.getProperty(\"java.home\"),\n-                            \"-XshowSettings:properties\",\n-                            \"-version 2\"\n-                    };\n-\n-                    final var javaPropCommandResult = ProcessTools.executeTestJava(javaPropCommand);\n-\n-                    final var installationIssue = Arrays.stream(javaPropCommandResult.getStdout().split(\"\\n\"))\n-                            .anyMatch(line -> line.contains(\"sun.arch.data.model\") && line.contains(\"32\"));\n-\n-                    if (installationIssue) {\n-                        throw new SkippedException(\"\"\"\n-                                Running 32-bit JDK on 64-bit Linux. Maybe only 64-bit library is installed.\n-                                Please manually check if this is the case. Treated as PASSED now.\"\"\");\n-                    }\n-                } else {\n-                    result.shouldHaveExitValue(0);\n-                }\n-            } else {\n-                result.shouldHaveExitValue(0);\n-            }\n-        } else {\n-\n-            final var testCommand = new String[]{\"-Djava.security.krb5.realm=R\",\n-                    \"-Djava.security.krb5.kdc=127.0.0.1\",\n-                    Krb5NameEquals.Krb5NameEqualsTest.class.getName()\n-            };\n-\n-            final var result = ProcessTools.executeTestJava(testCommand);\n-            result.shouldHaveExitValue(0);\n+    static {\n+        try {\n+            MECH = new Oid(\"1.2.840.113554.1.2.2\"); \/\/ KRB5\n+        } catch (Exception e) {\n+            \/\/ should never happen\n+            throw new RuntimeException(\"Exception initialising Oid\", e);\n@@ -116,5 +54,2 @@\n-    static class Krb5NameEqualsTest {\n-\n-        private static final String NAME_STR1 = \"service@localhost\";\n-        private static final String NAME_STR2 = \"service2@localhost\";\n-        private static final Oid MECH;\n+    public static void main(String[] argv) throws Exception {\n+        final GSSManager mgr = GSSManager.getInstance();\n@@ -122,7 +57,4 @@\n-        static {\n-            try {\n-                MECH = new Oid(\"1.2.840.113554.1.2.2\"); \/\/ KRB5\n-            } catch (Exception e) {\n-                \/\/ should never happen\n-                throw new RuntimeException(\"Exception initialising Oid\", e);\n-            }\n+        \/\/ Checking if native GSS is installed, throwing skip exception if it's not.\n+        final var mechs = mgr.getMechs();\n+        if (mechs == null || mechs.length == 0) {\n+            throw new SkippedException(\"NativeGSS not not supported\");\n@@ -131,16 +63,13 @@\n-        public static void main(String[] argv) throws Exception {\n-            final GSSManager mgr = GSSManager.getInstance();\n-\n-            \/\/ Create GSSName and check their equals(), hashCode() impl\n-            final GSSName name1 = mgr.createName(NAME_STR1,\n-                    GSSName.NT_HOSTBASED_SERVICE, MECH);\n-            final GSSName name2 = mgr.createName(NAME_STR2,\n-                    GSSName.NT_HOSTBASED_SERVICE, MECH);\n-            final GSSName name3 = mgr.createName(NAME_STR1,\n-                    GSSName.NT_HOSTBASED_SERVICE, MECH);\n-\n-            if ( !name1.equals(name3) || !name1.equals((Object) name3)) {\n-                throw new RuntimeException(\"Error: should be the same name\");\n-            } else if (name1.hashCode() != name3.hashCode()) {\n-                throw new RuntimeException(\"Error: should have same hash\");\n-            }\n+        \/\/ Create GSSName and check their equals(), hashCode() impl\n+        final GSSName name1 = mgr.createName(NAME_STR1,\n+                GSSName.NT_HOSTBASED_SERVICE, MECH);\n+        final GSSName name2 = mgr.createName(NAME_STR2,\n+                GSSName.NT_HOSTBASED_SERVICE, MECH);\n+        final GSSName name3 = mgr.createName(NAME_STR1,\n+                GSSName.NT_HOSTBASED_SERVICE, MECH);\n+\n+        if (!name1.equals(name3) || !name1.equals((Object) name3)) {\n+            throw new RuntimeException(\"Error: should be the same name\");\n+        } else if (name1.hashCode() != name3.hashCode()) {\n+            throw new RuntimeException(\"Error: should have same hash\");\n+        }\n@@ -148,4 +77,2 @@\n-            if (name1.equals(name2) || name1.equals((Object) name2)) {\n-                throw new RuntimeException(\"Error: should be different names\");\n-            }\n-            System.out.println(\"Done\");\n+        if (name1.equals(name2) || name1.equals((Object) name2)) {\n+            throw new RuntimeException(\"Error: should be different names\");\n@@ -153,0 +80,1 @@\n+        System.out.println(\"Done\");\n@@ -154,1 +82,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/krb5\/Krb5NameEquals.java","additions":35,"deletions":107,"binary":false,"changes":142,"status":"modified"}]}