{"files":[{"patch":"@@ -36,1 +36,1 @@\n-    private static final Map<Integer, Integer> expanded_casefolding = Map.ofEntries(\n+    private static final Map<Integer, Integer> expanded_case_map = Map.ofEntries(\n@@ -40,0 +40,5 @@\n+    private static final int[] expanded_case_cps = expanded_case_map.keySet()\n+      .stream()\n+      .mapToInt(Integer::intValue)\n+      .toArray();\n+\n@@ -99,2 +104,1 @@\n-        int[] expanded = new int[expanded_casefolding.size()];\n-        int cp = start;\n+        int[] expanded = new int[expanded_case_cps.length];\n@@ -102,4 +106,4 @@\n-        while (cp <= end && off < expanded.length) {\n-            if (expanded_casefolding.containsKey(cp)) {\n-                int folding = expanded_casefolding.get(cp);\n-                if (folding < start || folding > end)\n+        for (int cp : expanded_case_cps) {\n+            if (cp >= start && cp <= end) {\n+                int folding = expanded_case_map.get(cp);\n+                if (folding < start || folding > end) {\n@@ -107,0 +111,1 @@\n+                }\n@@ -108,1 +113,0 @@\n-            cp++;\n@@ -112,1 +116,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/regex\/CaseFolding.java.template","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-                \/\/ the case's folding codepoint doesn't map back to the original codepoint.\n-                 return Character.toUpperCase(cp2) != cp1 && Character.toLowerCase(cp2) != cp1;\n+                \/\/ the folding codepoint doesn't map back to the original codepoint.\n+                return Character.toUpperCase(cp2) != cp1 && Character.toLowerCase(cp2) != cp1;\n@@ -126,2 +126,2 @@\n-                ? String.format(\"\\\\u%04x\\\\u%04x\", (int)Character.highSurrogate(cp), (int)Character.lowSurrogate(cp))\n-                : String.format(\"\\\\u%04x\", cp);\n+            ? String.format(\"\\\\u%04x\\\\u%04x\", (int)Character.highSurrogate(cp), (int)Character.lowSurrogate(cp))\n+            : String.format(\"\\\\u%04x\", cp);\n","filename":"test\/jdk\/java\/util\/regex\/CaseFoldingTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1276,0 +1276,25 @@\n+\n+\/\/\n+(?ui)\\u00df\n+\\u1e9e\n+true \\u1e9e 0\n+\n+(?ui)[\\u00df]\n+\\u1e9e\n+true \\u1e9e 0\n+\n+(?ui)[\\u00df-\\u00df]\n+\\u1e9e\n+true \\u1e9e 0\n+\n+(?ui)\\u1e9e\n+\\u00df\n+true \\u00df 0\n+\n+(?ui)[\\u1e9e]\n+\\u00df\n+true \\u00df 0\n+\n+(?ui)[\\u1e9e-\\u1e9e]\n+\\u00df\n+true \\u00df 0\n","filename":"test\/jdk\/java\/util\/regex\/TestCases.txt","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}