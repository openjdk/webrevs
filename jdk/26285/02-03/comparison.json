{"files":[{"patch":"@@ -5987,1 +5987,1 @@\n-            int lo = Character.toLowerCase(ch);\n+            int lo = Character.toLowerCase(up);\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,5 +50,6 @@\n-          \/\/ these 'S' characters failed for known reason, doesn;t map to each with with\n-          \/\/ toUpperCase or toLowerCase, only map withcase-folding. exclude for now.\n-          0x1fd3,    \/\/ 1FD3 [lo: 1fd3, up: 1fd3]  0390 [lo: 0390, up: 0390]\n-          0x1fe3,    \/\/ 1FE3 [lo: 1fe3, up: 1fe3]  03B0 [lo: 03b0, up: 03b0]\n-          0xfb05     \/\/ FB05 [lo: fb05, up: fb05]  FB06 [lo: fb06, up: fb06]\n+            \/\/ these 'S' characters failed for known reason. they don't map to their\n+            \/\/ fording form with toUpperCase or toLowerCase, only map with case-folding.\n+            \/\/ exclude them for now.\n+            0x1fd3,  \/\/ 1FD3 [lo: 1fd3, up: 1fd3]  0390 [lo: 0390, up: 0390]\n+            0x1fe3,  \/\/ 1FE3 [lo: 1fe3, up: 1fe3]  03B0 [lo: 03b0, up: 03b0]\n+            0xfb05   \/\/ FB05 [lo: fb05, up: fb05]  FB06 [lo: fb06, up: fb06]\n@@ -144,0 +145,19 @@\n+\n+        \/\/ small range\n+        var end_cp = cp + 16;\n+        var end_cp_str = Character.isSupplementaryCodePoint(end_cp)\n+                ? String.format(\"\\\\u%04x\\\\u%04x\", (int)Character.highSurrogate(end_cp), (int)Character.lowSurrogate(end_cp))\n+                : String.format(\"\\\\u%04x\", end_cp);\n+        p = String.format(\"(?iu)[%s-%s]\", cp_str, end_cp_str);\n+        if (Pattern.compile(p).matcher(t).matches() == false) {\n+            errors.add(String.format(\"     [FAILED] range:  %-20s  t: u+%04x  (%s)\\n\", p, folding, type));\n+        }\n+\n+        end_cp = cp + 128;  \/\/ bigger than the expanded_casefolding_map.\n+        end_cp_str = Character.isSupplementaryCodePoint(end_cp)\n+                ? String.format(\"\\\\u%04x\\\\u%04x\", (int)Character.highSurrogate(end_cp), (int)Character.lowSurrogate(end_cp))\n+                : String.format(\"\\\\u%04x\", end_cp);\n+        p = String.format(\"(?iu)[%s-%s]\", cp_str, end_cp_str);\n+        if (Pattern.compile(p).matcher(t).matches() == false) {\n+            errors.add(String.format(\"     [FAILED] range:  %-20s  t: u+%04x  (%s)\\n\", p, folding, type));\n+        }\n","filename":"test\/jdk\/java\/util\/regex\/CaseFoldingTest.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}