{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -745,2 +745,3 @@\n-        int digitRadix = (radix == 8 ? 10 : radix);\n-        int firstDigit = digit(pos, Math.max(10, digitRadix));\n+        boolean permitFloatingPoint = radix == 8 || radix == 10;\n+        int digitRadix = Math.max(10, radix);\n+        int firstDigit = digit(pos, digitRadix);\n@@ -758,1 +759,1 @@\n-        } else if (digitRadix == 10 && is('.')) {\n+        } else if (permitFloatingPoint && is('.')) {\n@@ -761,1 +762,1 @@\n-        } else if (digitRadix == 10 && isOneOf('e', 'E', 'f', 'F', 'd', 'D')) {\n+        } else if (permitFloatingPoint && isOneOf('e', 'E', 'f', 'F', 'd', 'D')) {\n@@ -774,7 +775,0 @@\n-            \/\/ If it is not a floating point literal,\n-            \/\/ the octal number should be rescanned correctly.\n-            if (radix == 8) {\n-                sb.setLength(0);\n-                reset(pos);\n-                scanDigits(pos, 8);\n-            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -773,1 +773,1 @@\n-                log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.IntNumberTooLarge(strval(prefix)));\n+                reportIntegralLiteralError(prefix, pos);\n@@ -782,1 +782,1 @@\n-                log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.IntNumberTooLarge(strval(prefix)));\n+                reportIntegralLiteralError(prefix, pos);\n@@ -865,0 +865,22 @@\n+        void reportIntegralLiteralError(Name prefix, int pos) {\n+            int radix = token.radix();\n+            if (radix == 2 || radix == 8) {\n+                \/\/attempt to produce more user-friendly error message for\n+                \/\/binary and octal literals with wrong digits:\n+                String value = strval(prefix);\n+                char[] cs = value.toCharArray();\n+                for (int i = 0; i < cs.length; i++) {\n+                    char c = cs[i];\n+                    int d = Character.digit(c, radix);\n+                    if (d == (-1)) {\n+                        Error err = radix == 2 ? Errors.IllegalDigitInBinaryLiteral\n+                                               : Errors.IllegalDigitInOctalLiteral;\n+                        log.error(DiagnosticFlag.SYNTAX,\n+                                  token.pos + i,\n+                                  err);\n+                        return ;\n+                    }\n+                }\n+            }\n+            log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.IntNumberTooLarge(strval(prefix)));\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -743,0 +743,6 @@\n+compiler.err.illegal.digit.in.binary.literal=\\\n+    illegal digit in an binary literal\n+\n+compiler.err.illegal.digit.in.octal.literal=\\\n+    illegal digit in an octal literal\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -25,1 +24,1 @@\n-package sun.jvm.hotspot.gc.x;\n+\/\/ key:  compiler.err.illegal.digit.in.binary.literal\n@@ -27,2 +26,2 @@\n-class XForwardingTableCursor {\n-    long _value;\n+class IllegalDigitInOctalLiteral {\n+    int i = 0b8;\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IllegalDigitInBinaryLiteral.java","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/x\/XForwardingTableCursor.java","status":"copied"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -25,1 +24,1 @@\n-package sun.jvm.hotspot.gc.x;\n+\/\/ key:  compiler.err.illegal.digit.in.octal.literal\n@@ -27,2 +26,2 @@\n-class XForwardingTableCursor {\n-    long _value;\n+class IllegalDigitInOctalLiteral {\n+    int i = 08;\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IllegalDigitInOctalLiteral.java","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/x\/XForwardingTableCursor.java","status":"copied"},{"patch":"@@ -27,1 +27,1 @@\n-    int i = 0b201000010;\n+    int i = 0b;\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidBinaryNumber.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,0 @@\n-            new TestTuple(LONGLITERAL,   \"0b20L\"),\n","filename":"test\/langtools\/tools\/javac\/lexer\/JavaLexerTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 8267361\n- * @summary JavaTokenizer reads octal numbers mistakenly\n+ * @bug 8267361 8325440\n+ * @summary Verify meaniningfull errors for broken octal literals.\n@@ -65,0 +65,3 @@\n+                    int f = 0b;\n+                    int g = 0b2;\n+                    int h = 0b12;\n@@ -73,3 +76,4 @@\n-                \"Digit.java:3:14: compiler.err.expected: ';'\",\n-                \"Digit.java:4:16: compiler.err.expected: ';'\",\n-                \"Digit.java:5:15: compiler.err.expected: ';'\",\n+                \"Digit.java:3:14: compiler.err.illegal.digit.in.octal.literal\",\n+                \"Digit.java:4:16: compiler.err.illegal.digit.in.octal.literal\",\n+                \"Digit.java:5:15: compiler.err.illegal.digit.in.octal.literal\",\n+                \"Digit.java:5:16: compiler.err.expected: ';'\",\n@@ -79,1 +83,4 @@\n-                \"6 errors\");\n+                \"Digit.java:7:13: compiler.err.invalid.binary.number\",\n+                \"Digit.java:8:13: compiler.err.illegal.digit.in.binary.literal\",\n+                \"Digit.java:9:14: compiler.err.illegal.digit.in.binary.literal\",\n+                \"10 errors\");\n","filename":"test\/langtools\/tools\/javac\/lexer\/OctalNumberTest.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-BadBinaryLiterals.java:10:24: compiler.err.expected: ';'\n+BadBinaryLiterals.java:10:22: compiler.err.illegal.digit.in.binary.literal\n","filename":"test\/langtools\/tools\/javac\/literals\/BadBinaryLiterals.7.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}