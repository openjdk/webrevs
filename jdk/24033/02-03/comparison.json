{"files":[{"patch":"@@ -109,1 +109,1 @@\n-            new Masker().reset(mask).applyMask(src, dst);\n+            new Masker().setMask(mask).applyMask(src, dst);\n@@ -117,1 +117,1 @@\n-        public Masker reset(int mask) {\n+        public Masker setMask(int mask) {\n@@ -138,2 +138,2 @@\n-                initGallopingMask(src, dst);\n-                applyGallopingMask(src, dst);\n+                initVectorMask(src, dst);\n+                applyVectorMask(src, dst);\n@@ -145,1 +145,1 @@\n-         * Positions the {@link #offset} at 0, which is needed for galloping, by masking necessary amount of bytes.\n+         * Positions the {@link #offset} at 0, which is needed for vectorized masking, by masking necessary amount of bytes.\n@@ -147,2 +147,2 @@\n-        private void initGallopingMask(ByteBuffer src, ByteBuffer dst) {\n-            assert src.order() == dst.order() : \"galloping is only allowed on matching byte orders\";\n+        private void initVectorMask(ByteBuffer src, ByteBuffer dst) {\n+            assert src.order() == dst.order() : \"vectorized masking is only allowed on matching byte orders\";\n@@ -166,2 +166,2 @@\n-        private void applyGallopingMask(ByteBuffer src, ByteBuffer dst) {\n-            assert src.order() == dst.order() : \"galloping is only allowed on matching byte orders\";\n+        private void applyVectorMask(ByteBuffer src, ByteBuffer dst) {\n+            assert src.order() == dst.order() : \"vectorized masking is only allowed on matching byte orders\";\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/Frame.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-        payloadMasker.reset(mask);\n+        payloadMasker.setMask(mask);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/MessageEncoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                        masker.reset(value);\n+                        masker.setMask(value);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/AutomaticPong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-            masker.reset(value);\n+            masker.setMask(value);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/DummyWebSocketServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                    masker.reset(mask);\n+                    masker.setMask(mask);\n@@ -82,1 +82,1 @@\n-        masker.reset(m);\n+        masker.setMask(m);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/MaskerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}