{"files":[{"patch":"@@ -1971,18 +1971,1 @@\n-\n-            \/* For every long value s in [0, 2^32) such that x == s * s,\n-             * it is true that s - 1 <= (long) Math.sqrt(x >= 0 ? x : x + 0x1p64) <= s,\n-             * and if x == 2^64 - 1, then (long) Math.sqrt(x >= 0 ? x : x + 0x1p64) == 2^32.\n-             * This means that the value returned by Math.sqrt()\n-             * for a long value in the range [0, 2^64) is either correct,\n-             * or rounded up\/down by one if the value is too high\n-             * and too close to a perfect square.\n-             *\/\n-            long s = (long) Math.sqrt(x >= 0 ? x : x + 0x1p64);\n-            if (s > LONG_MASK \/\/ avoid overflow of s * s\n-                    || Long.compareUnsigned(x, s * s) < 0) {\n-                s--;\n-            } else if (s < LONG_MASK) { \/\/ avoid overflow of (s + 1) * (s + 1)\n-                long s1 = s + 1;\n-                if (Long.compareUnsigned(x, s1 * s1) >= 0)\n-                    s = s1;\n-            }\n+            long s = ulongSqrt(x);\n@@ -2031,0 +2014,21 @@\n+    private static long ulongSqrt(long x) {\n+        \/* For every long value s in [0, 2^32) such that x == s * s,\n+         * it is true that s - 1 <= (long) Math.sqrt(x >= 0 ? x : x + 0x1p64) <= s,\n+         * and if x == 2^64 - 1, then (long) Math.sqrt(x >= 0 ? x : x + 0x1p64) == 2^32.\n+         * This means that the value returned by Math.sqrt()\n+         * for a long value in the range [0, 2^64) is either correct,\n+         * or rounded up\/down by one if the value is too high\n+         * and too close to a perfect square.\n+         *\/\n+        long s = (long) Math.sqrt(x >= 0 ? x : x + 0x1p64);\n+        if (s > LONG_MASK \/\/ avoid overflow of s * s\n+                || Long.compareUnsigned(x, s * s) < 0) {\n+            s--;\n+        } else if (s < LONG_MASK) { \/\/ avoid overflow of (s + 1) * (s + 1)\n+            long s1 = s + 1;\n+            if (Long.compareUnsigned(x, s1 * s1) >= 0)\n+                s = s1;\n+        }\n+        return s;\n+    }\n+\n@@ -2040,6 +2044,1 @@\n-            long s = (long) Math.sqrt(x >= 0 ? x : x + 0x1p64);\n-            if (s > LONG_MASK || Long.compareUnsigned(x, s * s) < 0) {\n-                s--;\n-            } else if (s < LONG_MASK && Long.compareUnsigned(x, (s + 1) * (s + 1)) >= 0) {\n-                s++;\n-            }\n+            long s = ulongSqrt(x);\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"}]}