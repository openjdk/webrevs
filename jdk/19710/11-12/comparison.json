{"files":[{"patch":"@@ -2722,1 +2722,4 @@\n-        return sqrtAndRemainder()[0];\n+        if (this.signum < 0)\n+            throw new ArithmeticException(\"Negative BigInteger\");\n+\n+        return new MutableBigInteger(this.mag).sqrtRem(false)[0].toBigInteger();\n@@ -2744,1 +2747,1 @@\n-        MutableBigInteger[] sqrtRem = new MutableBigInteger(this.mag).sqrtRem();\n+        MutableBigInteger[] sqrtRem = new MutableBigInteger(this.mag).sqrtRem(true);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1908,2 +1908,2 @@\n-     * Calculate the integer square root {@code floor(sqrt(this))} and the remainder,\n-     * where {@code sqrt(.)} denotes the mathematical square root.\n+     * Calculate the integer square root {@code floor(sqrt(this))} and the remainder\n+     * if needed, where {@code sqrt(.)} denotes the mathematical square root.\n@@ -1914,1 +1914,1 @@\n-     * @return the integer square root of {@code this}\n+     * @return the integer square root of {@code this} and the remainder if needed\n@@ -1916,1 +1916,1 @@\n-    MutableBigInteger[] sqrtRem() {\n+    MutableBigInteger[] sqrtRem(boolean needRemainder) {\n@@ -1919,1 +1919,3 @@\n-            return new MutableBigInteger[] { new MutableBigInteger(), new MutableBigInteger() };\n+            return new MutableBigInteger[] {\n+                    new MutableBigInteger(), needRemainder ? new MutableBigInteger() : null\n+            };\n@@ -1925,1 +1927,3 @@\n-                    return new MutableBigInteger[] { ONE, new MutableBigInteger((int) (x - 1)) };\n+                    return new MutableBigInteger[] {\n+                            ONE, needRemainder ? new MutableBigInteger((int) (x - 1)) : null\n+                    };\n@@ -1929,1 +1933,2 @@\n-                        new MutableBigInteger((int) s), new MutableBigInteger((int) (x - s * s))\n+                        new MutableBigInteger((int) s),\n+                        needRemainder ? new MutableBigInteger((int) (x - s * s)) : null\n@@ -1940,1 +1945,4 @@\n-            return new MutableBigInteger[] { new MutableBigInteger((int) s), new MutableBigInteger(x - s * s) };\n+            return new MutableBigInteger[] {\n+                    new MutableBigInteger((int) s),\n+                    needRemainder ? new MutableBigInteger(x - s * s) : null\n+            };\n@@ -1955,1 +1963,1 @@\n-        MutableBigInteger[] sqrtRem = x.sqrtRemZimmermann(x.intLen);\n+        MutableBigInteger[] sqrtRem = x.sqrtRemZimmermann(x.intLen, needRemainder);\n@@ -1960,1 +1968,1 @@\n-            if (!sqrtRem[1].isZero()) {\n+            if (needRemainder && !sqrtRem[1].isZero()) {\n@@ -1984,1 +1992,1 @@\n-    private MutableBigInteger[] sqrtRemZimmermann(int len) {\n+    private MutableBigInteger[] sqrtRemZimmermann(int len, boolean needRemainder) {\n@@ -1998,0 +2006,1 @@\n+            \/\/ The first invocation is never a base case, so the remainder is needed\n@@ -2008,1 +2017,1 @@\n-        MutableBigInteger[] sr = sqrtRemZimmermann(len >> 1); \/\/ Recursive invocation\n+        MutableBigInteger[] sr = sqrtRemZimmermann(len >> 1, true); \/\/ Recursive invocation\n@@ -2023,3 +2032,3 @@\n-        MutableBigInteger rem = u;\n-        rem.leftShift(blockBitLen);\n-        rem.add(getBlockZimmermann(0, len, limit, blockLen));\n+        MutableBigInteger chunk = u;\n+        chunk.leftShift(blockBitLen);\n+        chunk.add(getBlockZimmermann(0, len, limit, blockLen));\n@@ -2027,1 +2036,6 @@\n-        int rSign = rem.subtract(new MutableBigInteger(qBig.multiply(qBig).mag));\n+        MutableBigInteger qSqr = new MutableBigInteger(qBig.multiply(qBig).mag);\n+\n+        MutableBigInteger rem;\n+        if (needRemainder) {\n+            rem = chunk;\n+            int rSign = rem.subtract(qSqr);\n@@ -2029,3 +2043,3 @@\n-        if (rSign == -1) {\n-            twiceSqrt = new MutableBigInteger(sqrt);\n-            twiceSqrt.leftShift(1);\n+            if (rSign == -1) {\n+                twiceSqrt = new MutableBigInteger(sqrt);\n+                twiceSqrt.leftShift(1);\n@@ -2033,3 +2047,8 @@\n-            rem.add(ONE);\n-            rem.subtract(twiceSqrt);\n-            sqrt.subtract(ONE);\n+                rem.add(ONE);\n+                rem.subtract(twiceSqrt);\n+                sqrt.subtract(ONE);\n+            }\n+        } else {\n+            rem = null;\n+            if (chunk.compare(qSqr) == -1)\n+                sqrt.subtract(ONE);\n@@ -2041,1 +2060,1 @@\n-            if (!rem.isZero()) {\n+            if (needRemainder && !rem.isZero()) {\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":42,"deletions":23,"binary":false,"changes":65,"status":"modified"}]}