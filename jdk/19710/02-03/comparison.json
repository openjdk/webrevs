{"files":[{"patch":"@@ -114,0 +114,19 @@\n+        init(val);\n+    }\n+\n+    \/**\n+     * Construct a new MutableBigInteger with a magnitude specified by\n+     * the long val.\n+     *\/\n+    MutableBigInteger(long val) {\n+        if ((val & LONG_MASK) == val) {\n+            init((int) val);\n+        } else {\n+            value = new int[2];\n+            intLen = 2;\n+            value[0] = (int) (val >>> 32);\n+            value[1] = (int) val;\n+        }\n+    }\n+\n+    private void init(int val) {\n@@ -1928,6 +1947,1 @@\n-            long r = x - s * s;\n-            return new MutableBigInteger[] {\n-                    new MutableBigInteger((int) s),\n-                    r <= LONG_MASK ? new MutableBigInteger((int) r)\n-                    : new MutableBigInteger(new int[] { 1,  (int) r})\n-            };\n+            return new MutableBigInteger[] { new MutableBigInteger((int) s), new MutableBigInteger(x - s * s) };\n@@ -1990,4 +2004,1 @@\n-            return new MutableBigInteger[] { sqrt,\n-                    r <= LONG_MASK ? new MutableBigInteger((int) r)\n-                    : new MutableBigInteger(new int[] { 1,  (int) r})\n-            };\n+            return new MutableBigInteger[] { sqrt, new MutableBigInteger(x - s * s) };\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"}]}