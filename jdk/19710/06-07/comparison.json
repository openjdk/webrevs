{"files":[{"patch":"@@ -2063,1 +2063,1 @@\n-        for(; from < to && value[from] == 0; from++);\n+        for (; from < to && value[from] == 0; from++);\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.math;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class BigIntegerSquareRoot {\n+\n+    private BigInteger[] hugeArray, largeArray, smallArray;\n+    private static final int TESTSIZE = 1000;\n+\n+    @Setup\n+    public void setup() {\n+        Random r = new Random(1123);\n+        int numbits = r.nextInt(16384);\n+\n+        hugeArray = new BigInteger[TESTSIZE]; \/*\n+         * Huge numbers larger than\n+         * MAX_LONG\n+         *\/\n+        largeArray = new BigInteger[TESTSIZE]; \/*\n+         * Large numbers less than\n+         * MAX_LONG but larger than\n+         * MAX_INT\n+         *\/\n+        smallArray = new BigInteger[TESTSIZE]; \/*\n+         * Small number less than\n+         * MAX_INT\n+         *\/\n+\n+        for (int i = 0; i < TESTSIZE; i++) {\n+            int value = Math.abs(r.nextInt());\n+\n+            hugeArray[i] = new BigInteger(\"\" + ((long) value + (long) Integer.MAX_VALUE)\n+                    + ((long) value + (long) Integer.MAX_VALUE));\n+            largeArray[i] = new BigInteger(\"\" + ((long) value + (long) Integer.MAX_VALUE));\n+            smallArray[i] = new BigInteger(\"\" + ((long) value \/ 1000));\n+        }\n+    }\n+\n+    \/** Test BigInteger.sqrtAndRemainder() with huge numbers larger than MAX_LONG *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testHugeSqrtAndRemainder(Blackhole bh) {\n+        for (BigInteger s : hugeArray) {\n+            bh.consume(s.sqrtAndRemainder());\n+        }\n+    }\n+\n+    \/** Test BigInteger.sqrtAndRemainder() with large numbers less than MAX_LONG but larger than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testLargeSqrtAndRemainder(Blackhole bh) {\n+        for (BigInteger s : largeArray) {\n+            bh.consume(s.sqrtAndRemainder());\n+        }\n+    }\n+\n+    \/** Test BigInteger.sqrtAndRemainder() with small numbers less than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testSmallSqrtAndRemainder(Blackhole bh) {\n+        for (BigInteger s : smallArray) {\n+            bh.consume(s.sqrtAndRemainder());\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerSquareRoot.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}