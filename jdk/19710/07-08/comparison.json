{"files":[{"patch":"@@ -492,1 +492,1 @@\n-    BigInteger(int signum, int[] magnitude) {\n+    private BigInteger(int signum, int[] magnitude) {\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2012,1 +2012,1 @@\n-        dividend.add(getBlockZimmermann(1, len, limit, blockLen));\n+        dividend.add(new MutableBigInteger(getBlockZimmermann(1, len, limit, blockLen)));\n@@ -2024,1 +2024,1 @@\n-        rem.add(getBlockZimmermann(0, len, limit, blockLen));\n+        rem.add(new MutableBigInteger(getBlockZimmermann(0, len, limit, blockLen)));\n@@ -2041,4 +2041,4 @@\n-                final int sqrtEnd = sqrt.offset + sqrt.intLen, s0Len = (halfShift + 31) >> 5;\n-                int[] s0Mag = Arrays.copyOfRange(sqrt.value, sqrtEnd - s0Len, sqrtEnd);\n-                if ((halfShift & 31) != 0)\n-                    s0Mag[0] &= (1 << halfShift) - 1;\n+                final int s0Len = (halfShift + 31) >> 5;\n+                int[] s0Mag = sqrt.getBlockZimmermann(0, sqrt.intLen, sqrt.intLen, s0Len);\n+                if (s0Mag.length == s0Len && (halfShift & 31) != 0)\n+                    s0Mag[0] &= (1 << halfShift) - 1; \/\/ Remove excess bits\n@@ -2046,1 +2046,1 @@\n-                BigInteger s0 = new BigInteger(1, s0Mag);\n+                BigInteger s0 = new BigInteger(s0Mag, 1);\n@@ -2058,3 +2058,3 @@\n-    private MutableBigInteger getBlockZimmermann(int blockIndex, int len, int limit, int blockLen) {\n-        int blockEnd = offset + len - blockIndex * blockLen;\n-        int from = blockEnd - blockLen, to = Math.min(blockEnd, offset + limit);\n+    private int[] getBlockZimmermann(int blockIndex, int len, int limit, int blockLen) {\n+        final int blockEnd = offset + len - blockIndex * blockLen;\n+        final int to = Math.min(blockEnd, offset + limit);\n@@ -2063,1 +2063,2 @@\n-        for (; from < to && value[from] == 0; from++);\n+        int from;\n+        for (from = blockEnd - blockLen; from < to && value[from] == 0; from++);\n@@ -2066,1 +2067,1 @@\n-            return new MutableBigInteger();\n+            return new int[0];\n@@ -2070,1 +2071,1 @@\n-        return new MutableBigInteger(block);\n+        return block;\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}