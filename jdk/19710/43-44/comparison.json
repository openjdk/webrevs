{"files":[{"patch":"@@ -51,1 +51,1 @@\n-    private BigInteger[] hugeArray, largeArray, smallArray;\n+    private BigInteger[] hugeArray, bigArray, largeArray, smallArray;\n@@ -59,1 +59,5 @@\n-         * Huge numbers larger than\n+         * Each array entry is atmost 16k bits\n+         * in size\n+         *\/\n+        bigArray = new BigInteger[TESTSIZE]; \/*\n+         * Big numbers larger than\n@@ -73,1 +77,3 @@\n-            long value = Math.abs((long) r.nextInt());\n+            int nBits = r.nextInt(32);\n+            long hi = r.nextLong(1L << nBits);\n+            long value = r.nextLong(1L << 31);\n@@ -75,4 +81,4 @@\n-            hugeArray[i] = new BigInteger(\"\" + (value + (long) Integer.MAX_VALUE)\n-                    + (value + (long) Integer.MAX_VALUE));\n-            largeArray[i] = new BigInteger(\"\" + (value + (long) Integer.MAX_VALUE));\n-            smallArray[i] = new BigInteger(\"\" + (value \/ 1000));\n+            hugeArray[i] = new BigInteger(r.nextInt(16384), r);\n+            bigArray[i] = new BigInteger(\"\" + hi + (value + Integer.MAX_VALUE));\n+            largeArray[i] = new BigInteger(\"\" + (value \/ 1000));\n+            smallArray[i] = new BigInteger(\"\" + hi);\n@@ -82,1 +88,1 @@\n-    \/** Test BigInteger.sqrtAndRemainder() with huge numbers larger than MAX_LONG *\/\n+    \/** Test BigInteger.sqrtAndRemainder() with huge numbers long at most 16k bits  *\/\n@@ -91,0 +97,9 @@\n+    \/** Test BigInteger.sqrtAndRemainder() with big numbers larger than MAX_LONG *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testBigSqrtAndRemainder(Blackhole bh) {\n+        for (BigInteger s : bigArray) {\n+            bh.consume(s.sqrtAndRemainder());\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerSquareRoot.java","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"}]}