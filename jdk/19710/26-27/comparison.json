{"files":[{"patch":"@@ -933,0 +933,52 @@\n+    \/**\n+     * Shifts {@code this} of {@code n} ints to the left and adds {@code addend}.\n+     * Assumes {@code n > 0} for speed.\n+     *\/\n+    void shiftAdd(MutableBigInteger addend, int n) {\n+        \/\/ Fast cases\n+        if (addend.intLen <= n) {\n+            shiftAddDisjoint(addend, n);\n+        } else if (intLen == 0) {\n+            copyValue(addend);\n+        } else {\n+            leftShift(n << 5);\n+            add(addend);\n+        }\n+    }\n+\n+    \/**\n+     * Shifts {@code this} of {@code n} ints to the left and adds {@code addend}.\n+     * Assume {@code addend.intLen <= n}.\n+     *\/\n+    void shiftAddDisjoint(MutableBigInteger addend, int n) {\n+        if (intLen == 0) { \/\/ Avoid unnormal values\n+            copyValue(addend);\n+            return;\n+        }\n+\n+        int[] res;\n+        final int resLen = intLen + n, resOffset;\n+        if (resLen > value.length) {\n+            res = new int[resLen];\n+            System.arraycopy(value, offset, res, 0, intLen);\n+            resOffset = 0;\n+        } else {\n+            res = value;\n+            if (offset + resLen > value.length) {\n+                System.arraycopy(value, offset, res, 0, intLen);\n+                resOffset = 0;\n+            } else {\n+                resOffset = offset;\n+            }\n+            \/\/ Clear words where necessary\n+            if (addend.intLen < n)\n+                Arrays.fill(res, resOffset + intLen, resOffset + resLen - addend.intLen, 0);\n+        }\n+\n+        System.arraycopy(addend.value, addend.offset, res, resOffset + resLen - addend.intLen, addend.intLen);\n+\n+        value = res;\n+        offset = resOffset;\n+        intLen = resLen;\n+    }\n+\n@@ -2022,2 +2074,1 @@\n-        sqrt.leftShift(blockLen << 5);\n-        sqrt.add(q);\n+        sqrt.shiftAdd(q, blockLen);\n@@ -2075,36 +2126,0 @@\n-    \/**\n-     * Shifts {@code this} of {@code n} ints to the left and adds {@code addend}.\n-     * Assume {@code addend.intLen <= n}.\n-     *\/\n-    private void shiftAddDisjoint(MutableBigInteger addend, int n) {\n-        if (intLen == 0) { \/\/ Avoid unnormal values\n-            copyValue(addend);\n-            return;\n-        }\n-\n-        int[] res;\n-        final int resLen = intLen + n, resOffset;\n-        if (resLen > value.length) {\n-            res = new int[resLen];\n-            System.arraycopy(value, offset, res, 0, intLen);\n-            resOffset = 0;\n-        } else {\n-            res = value;\n-            if (offset + resLen > value.length) {\n-                System.arraycopy(value, offset, res, 0, intLen);\n-                resOffset = 0;\n-            } else {\n-                resOffset = offset;\n-            }\n-            \/\/ Clear words where necessary\n-            if (addend.intLen < n)\n-                Arrays.fill(res, resOffset + intLen, resOffset + resLen - addend.intLen, 0);\n-        }\n-\n-        System.arraycopy(addend.value, addend.offset, res, resOffset + resLen - addend.intLen, addend.intLen);\n-\n-        value = res;\n-        offset = resOffset;\n-        intLen = resLen;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":53,"deletions":38,"binary":false,"changes":91,"status":"modified"}]}