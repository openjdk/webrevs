{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.foreign.Arena;\n@@ -29,0 +30,2 @@\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n@@ -43,4 +46,10 @@\n-        var linker = Linker.nativeLinker();\n-        var func = linker.defaultLookup()\n-                         .find(\"sleep\")\n-                         .get();\n+        MemorySegment func;\n+        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+            func = SymbolLookup.libraryLookup(\"Kernel32\", Arena.global())\n+                               .findOrThrow(\"Sleep\");\n+        } else {\n+            func = Linker.nativeLinker()\n+                         .defaultLookup()\n+                         .findOrThrow(\"sleep\");\n+        }\n+\n@@ -48,1 +57,1 @@\n-        hndSleep = linker.downcallHandle(func, desc);\n+        hndSleep = Linker.nativeLinker().downcallHandle(func, desc);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/LingeredAppWithVirtualThread.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @requires (os.family == \"linux\") & (vm.hasSA)\n+ * @requires vm.hasSA\n@@ -50,1 +50,0 @@\n-        launcher.addToolArg(\"--mixed\");\n@@ -64,2 +63,0 @@\n-        out.shouldContain(\"<StubRoutines (continuation stubs)>\");\n-        out.shouldNotContain(\"<interpreter> return entry points\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJhsdbJstackMixedWithVirtualThread.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}