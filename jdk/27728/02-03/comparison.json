{"files":[{"patch":"@@ -0,0 +1,74 @@\n+\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, NTT DATA\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.ValueLayout;\n+import java.util.concurrent.CountDownLatch;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+\n+public class LingeredAppWithVirtualThread extends LingeredApp implements Runnable {\n+\n+    private static final String THREAD_NAME = \"target thread\";\n+\n+    private static final MethodHandle hndSleep;\n+\n+    private static final CountDownLatch signal = new CountDownLatch(1);\n+\n+    static {\n+        var linker = Linker.nativeLinker();\n+        var func = linker.defaultLookup()\n+                         .find(\"sleep\")\n+                         .get();\n+        var desc = FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT);\n+        hndSleep = linker.downcallHandle(func, desc);\n+    }\n+\n+    @Override\n+    public void run() {\n+        signal.countDown();\n+        Thread.yield();\n+        try {\n+            hndSleep.invoke(3600);\n+        } catch(Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        try {\n+            Thread.ofVirtual()\n+                  .name(THREAD_NAME)\n+                  .start(new LingeredAppWithVirtualThread());\n+\n+            signal.await();\n+            LingeredApp.main(args);\n+        } catch(Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/LingeredAppWithVirtualThread.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, NTT DATA\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.SA.SATestUtils;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @bug 8369505\n+ * @requires (os.family == \"linux\") & (vm.hasSA)\n+ * @requires (os.arch == \"amd64\" | os.arch == \"aarch64\")\n+ * @library \/test\/lib\n+ * @run driver TestJhsdbJstackMixedWithVirtualThread\n+ *\/\n+public class TestJhsdbJstackMixedWithVirtualThread {\n+\n+    private static void runJstackMixed(LingeredApp app) throws Exception {\n+        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+        launcher.addVMArgs(Utils.getTestJavaOpts());\n+        launcher.addToolArg(\"jstack\");\n+        launcher.addToolArg(\"--mixed\");\n+        launcher.addToolArg(\"--pid\");\n+        launcher.addToolArg(Long.toString(app.getPid()));\n+\n+        ProcessBuilder pb = SATestUtils.createProcessBuilder(launcher);\n+        Process jhsdb = pb.start();\n+        OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+\n+        jhsdb.waitFor();\n+\n+        System.out.println(out.getStdout());\n+        System.err.println(out.getStderr());\n+\n+        out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+        out.shouldContain(\"<StubRoutines (continuation stubs)>\");\n+        out.shouldNotContain(\"<interpreter> return entry points\");\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        LingeredApp app = null;\n+\n+        try {\n+            app = new LingeredAppWithVirtualThread();\n+            LingeredApp.startApp(app);\n+            System.out.println(\"Started LingeredApp with pid \" + app.getPid());\n+            runJstackMixed(app);\n+            System.out.println(\"Test Completed\");\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            throw e;\n+        } finally {\n+            LingeredApp.stopApp(app);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJhsdbJstackMixedWithVirtualThread.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}