{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import static java.util.stream.Collectors.toSet;\n@@ -37,1 +38,0 @@\n-import jdk.jpackage.test.Annotations.Parameter;\n@@ -40,0 +40,1 @@\n+import jdk.jpackage.test.HelloApp;\n@@ -42,0 +43,1 @@\n+import jdk.jpackage.test.PackageType;\n@@ -61,0 +63,13 @@\n+        for (var packageTypes : List.of(PackageType.IMAGE.toString(), ALL_NATIVE_PACKAGE_TYPES)) {\n+            data.addAll(List.of(new Object[][]{\n+                {packageTypes, wrap(InOutPathTest::outputDirInInputDir, \"--dest in --input\")},\n+                {packageTypes, wrap(InOutPathTest::outputDirSameAsInputDir, \"--dest same as --input\")},\n+                {packageTypes, wrap(InOutPathTest::tempDirInInputDir, \"--temp in --input\")},\n+                {packageTypes, wrap(cmd -> {\n+                    outputDirInInputDir(cmd);\n+                    tempDirInInputDir(cmd);\n+                }, \"--dest and --temp in --input\")},\n+            }));\n+            data.addAll(additionalContentInput(packageTypes, \"--app-content\"));\n+        }\n+\n@@ -62,7 +77,3 @@\n-            {wrap(InOutPathTest::outputDirInInputDir, \"--dest:subdir\")},\n-            {wrap(InOutPathTest::outputDirSameAsInputDir, \"--dest:same\")},\n-            {wrap(InOutPathTest::tempDirInInputDir, \"--temp\")},\n-            {wrap(cmd -> {\n-                outputDirInInputDir(cmd);\n-                tempDirInInputDir(cmd);\n-            }, \"--dest:subdir and --temp\")},\n+            {PackageType.IMAGE.toString(), wrap(cmd -> {\n+                additionalContent(cmd, \"--app-content\", cmd.outputBundle());\n+            }, \"--app-content same as output bundle\")},\n@@ -71,0 +82,5 @@\n+        if (TKit.isOSX()) {\n+            data.addAll(additionalContentInput(PackageType.MAC_DMG.toString(),\n+                    \"--mac-dmg-content\"));\n+        }\n+\n@@ -74,1 +90,30 @@\n-    public InOutPathTest(Envelope configure) {\n+    private static List<Object[]> additionalContentInput(String packageTypes, String argName) {\n+        return List.of(new Object[][]{\n+            {packageTypes, wrap(cmd -> {\n+                additionalContent(cmd, argName, cmd.inputDir().resolve(\"foo\"));\n+            }, argName + \" in --input\")},\n+            {packageTypes, wrap(cmd -> {\n+                additionalContent(cmd, argName, cmd.inputDir());\n+            }, argName + \" same as --input\")},\n+            {packageTypes, wrap(cmd -> {\n+                additionalContent(cmd, argName, cmd.outputDir().resolve(\"bar\"));\n+            }, argName + \" in --dest\")},\n+            {packageTypes, wrap(cmd -> {\n+                additionalContent(cmd, argName, cmd.outputDir());\n+            }, argName + \" same as --dest\")},\n+            {packageTypes, wrap(cmd -> {\n+                tempDirInInputDir(cmd);\n+                var tempDir = cmd.getArgumentValue(\"--temp\");\n+                Files.createDirectory(Path.of(tempDir));\n+                cmd.addArguments(argName, tempDir);\n+            }, argName + \" as --temp; --temp in --input\")},\n+        });\n+    }\n+\n+    public InOutPathTest(String packageTypes, Envelope configure) {\n+        if (ALL_NATIVE_PACKAGE_TYPES.equals(packageTypes)) {\n+            this.packageTypes = PackageType.NATIVE;\n+        } else {\n+            this.packageTypes = Stream.of(packageTypes.split(\",\")).map(\n+                    PackageType::valueOf).collect(toSet());\n+        }\n@@ -79,4 +124,2 @@\n-    @Parameter(\"true\")\n-    @Parameter(\"false\")\n-    public void test(boolean appImage) throws Throwable {\n-        runTest(appImage, configure);\n+    public void test() throws Throwable {\n+        runTest(packageTypes, configure);\n@@ -89,1 +132,5 @@\n-    private static void runTest(boolean appImage,\n+    private static boolean isAppImageValid(JPackageCommand cmd) {\n+        return !cmd.hasArgument(\"--app-content\") && !cmd.hasArgument(\"--dmg-app-content\");\n+    }\n+\n+    private static void runTest(Set<PackageType> packageTypes,\n@@ -106,1 +153,1 @@\n-        if (appImage) {\n+        if (packageTypes.contains(PackageType.IMAGE)) {\n@@ -110,1 +157,6 @@\n-            verifyAppImage(cmd);\n+            if (isAppImageValid(cmd)) {\n+                verifyAppImage(cmd);\n+            } else {\n+                cmd.execute();\n+                HelloApp.executeLauncherAndVerifyOutput(cmd);\n+            }\n@@ -113,0 +165,1 @@\n+                    .forTypes(packageTypes)\n@@ -140,0 +193,9 @@\n+    private static void additionalContent(JPackageCommand cmd,\n+            String argName, Path base) throws IOException {\n+        Path appContentFile = base.resolve(base.toString().replaceAll(\"[\\\\\\\\\/]\",\n+                \"-\") + \"-foo.txt\");\n+        TKit.createDirectories(appContentFile.getParent());\n+        TKit.createTextFile(appContentFile, List.of(\"Hello Duke!\"));\n+        cmd.addArguments(argName, appContentFile.getParent());\n+    }\n+\n@@ -141,0 +203,7 @@\n+        if (!isAppImageValid(cmd)) {\n+            \/\/ Don't verify the contents of app image as it is invalid.\n+            \/\/ jpackage exited without getting stuck in infinite spiral.\n+            \/\/ No more expectations from the tool for the give arguments.\n+            return;\n+        }\n+\n@@ -174,0 +243,1 @@\n+    private final Set<PackageType> packageTypes;\n@@ -177,0 +247,2 @@\n+\n+    private final static String ALL_NATIVE_PACKAGE_TYPES = \"NATIVE\";\n","filename":"test\/jdk\/tools\/jpackage\/share\/InOutPathTest.java","additions":88,"deletions":16,"binary":false,"changes":104,"status":"modified"}]}