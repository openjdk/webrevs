{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Test;\n@@ -34,0 +33,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n- * @run testng FSInfoTest\n+ * @run junit FSInfoTest\n","filename":"test\/langtools\/tools\/javac\/file\/FSInfoTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng MultiReleaseJarAwareSJFM\n+ * @run junit MultiReleaseJarAwareSJFM\n@@ -36,5 +36,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -53,0 +48,6 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -58,0 +59,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -116,1 +118,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -143,1 +145,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -162,1 +164,0 @@\n-    @DataProvider(name = \"versions\")\n@@ -172,1 +173,2 @@\n-    @Test(dataProvider = \"versions\")\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n@@ -186,1 +188,1 @@\n-        Assert.assertEquals(v, expected);\n+        Assertions.assertEquals(expected, v);\n","filename":"test\/langtools\/tools\/javac\/file\/MultiReleaseJar\/MultiReleaseJarAwareSJFM.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run testng\/timeout=480 MultiReleaseJarTest\n+ * @run junit\/timeout=480 MultiReleaseJarTest\n@@ -36,4 +36,5 @@\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -47,0 +48,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -87,1 +89,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -114,1 +116,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -123,1 +125,1 @@\n-    @Test(dataProvider=\"modes\")\n+    @ParameterizedTest\n@@ -125,0 +127,1 @@\n+    @MethodSource(\"createModes\")\n@@ -137,1 +140,1 @@\n-    @Test(dataProvider=\"modes\")\n+    @ParameterizedTest\n@@ -139,0 +142,1 @@\n+    @MethodSource(\"createModes\")\n@@ -151,1 +155,1 @@\n-    @Test(dataProvider=\"modes\")\n+    @ParameterizedTest\n@@ -153,0 +157,1 @@\n+    @MethodSource(\"createModes\")\n@@ -165,1 +170,1 @@\n-    @Test(dataProvider=\"modes\")\n+    @ParameterizedTest\n@@ -167,0 +172,1 @@\n+    @MethodSource(\"createModes\")\n@@ -179,1 +185,1 @@\n-    @Test(dataProvider=\"modes\")\n+    @ParameterizedTest\n@@ -181,0 +187,1 @@\n+    @MethodSource(\"createModes\")\n@@ -193,1 +200,1 @@\n-    @Test(dataProvider=\"modes\")\n+    @ParameterizedTest\n@@ -195,0 +202,1 @@\n+    @MethodSource(\"createModes\")\n@@ -207,1 +215,0 @@\n-    @DataProvider(name=\"modes\")\n","filename":"test\/langtools\/tools\/javac\/file\/MultiReleaseJar\/MultiReleaseJarTest.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng InInterface\n+ * @run junit InInterface\n@@ -31,2 +31,2 @@\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -54,1 +54,0 @@\n-@Test\n@@ -57,0 +56,1 @@\n+    @Test\n@@ -58,2 +58,2 @@\n-        assertEquals(t1().m(), \"yo\");\n-        assertEquals(t2().m(\"p\"), \"snurp\");\n+        assertEquals(\"yo\", t1().m());\n+        assertEquals(\"snurp\", t2().m(\"p\"));\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaExecution\/InInterface.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng InnerConstructor\n+ * @run junit InnerConstructor\n@@ -31,2 +31,2 @@\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +34,0 @@\n-@Test\n@@ -37,0 +36,1 @@\n+    @Test\n@@ -38,2 +38,2 @@\n-        assertEquals(seq1().m().toString(), \"Cbl:nada\");\n-        assertEquals(seq2().m(\"rats\").toString(), \"Cbl:rats\");\n+        assertEquals(\"Cbl:nada\", seq1().m().toString());\n+        assertEquals(\"Cbl:rats\", seq2().m(\"rats\").toString());\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaExecution\/InnerConstructor.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Duser.language=en -Duser.country=US LambdaTranslationTest1\n+ * @run junit\/othervm -Duser.language=en -Duser.country=US LambdaTranslationTest1\n@@ -31,1 +31,2 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -33,3 +34,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n@@ -46,1 +44,1 @@\n-        assertEquals(result.get().toString(), expected);\n+        assertEquals(expected, result.get().toString());\n@@ -69,0 +67,1 @@\n+    @Test\n@@ -130,0 +129,1 @@\n+    @Test\n@@ -150,0 +150,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaExecution\/LambdaTranslationTest1.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Duser.language=en -Duser.country=US LambdaTranslationTest2\n+ * @run junit\/othervm -Duser.language=en -Duser.country=US LambdaTranslationTest2\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -36,2 +35,3 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -48,0 +47,1 @@\n+    @Test\n@@ -103,0 +103,1 @@\n+    @Test\n@@ -115,0 +116,1 @@\n+    @Test\n@@ -124,0 +126,1 @@\n+    @Test\n@@ -133,0 +136,1 @@\n+    @Test\n@@ -204,0 +208,1 @@\n+    @Test\n@@ -228,0 +233,1 @@\n+    @Test\n@@ -233,0 +239,1 @@\n+    @Test\n@@ -242,0 +249,1 @@\n+    @Test\n@@ -250,0 +258,1 @@\n+    @Test\n@@ -256,0 +265,1 @@\n+    @Test\n@@ -269,0 +279,1 @@\n+    @Test\n@@ -278,0 +289,1 @@\n+    @Test\n@@ -287,0 +299,1 @@\n+    @Test\n@@ -291,1 +304,1 @@\n-                assertEquals((int) maxer.op(i,j), Math.max(i,j));\n+                assertEquals(Math.max(i,j), (int) maxer.op(i,j));\n@@ -299,0 +312,1 @@\n+    @Test\n@@ -334,0 +348,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaExecution\/LambdaTranslationTest2.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestFDCCE\n+ * @run junit MethodReferenceTestFDCCE\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -34,3 +33,4 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -48,1 +47,1 @@\n-        assertEquals(t.getClass().getName(), \"java.lang.ClassCastException\");\n+        assertEquals(\"java.lang.ClassCastException\", t.getClass().getName());\n@@ -82,0 +81,1 @@\n+    @Test\n@@ -88,0 +88,1 @@\n+    @Test\n@@ -94,0 +95,1 @@\n+    @Test\n@@ -105,0 +107,1 @@\n+    @Test\n@@ -116,0 +119,1 @@\n+    @Test\n@@ -122,0 +126,1 @@\n+    @Test\n@@ -133,0 +138,1 @@\n+    @Test\n@@ -138,0 +144,1 @@\n+    @Test\n@@ -143,0 +150,1 @@\n+    @Test\n@@ -145,1 +153,1 @@\n-        assertEquals(p.too(15).getClass().getName(), \"java.lang.Integer\");\n+        assertEquals(\"java.lang.Integer\", p.too(15).getClass().getName());\n@@ -148,0 +156,1 @@\n+    @Test\n@@ -150,1 +159,1 @@\n-        assertEquals(p.m(), (Short)(short)123);\n+        assertEquals((Short)(short)123, p.m());\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestFDCCE.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestInnerDefault\n+ * @run junit MethodReferenceTestInnerDefault\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -63,1 +62,0 @@\n-@Test\n@@ -66,0 +64,1 @@\n+    @Test\n@@ -76,1 +75,1 @@\n-            assertEquals(q.m(\"*\"), \"A__xsA:*\");\n+            assertEquals(\"A__xsA:*\", q.m(\"*\"));\n@@ -79,1 +78,1 @@\n-            assertEquals(q.m(\"*\"), \"AB_xsB:*\");\n+            assertEquals(\"AB_xsB:*\", q.m(\"*\"));\n@@ -82,1 +81,1 @@\n-            assertEquals(q.m(\"*\"), \"_B_xsB:*\");\n+            assertEquals(\"_B_xsB:*\", q.m(\"*\"));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestInnerDefault.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestInnerInstance\n+ * @run junit MethodReferenceTestInnerInstance\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -42,0 +40,1 @@\n+    @Test\n@@ -46,0 +45,1 @@\n+    @Test\n@@ -66,1 +66,1 @@\n-                assertEquals(q.m(55), \"xI:55\");\n+                assertEquals(\"xI:55\", q.m(55));\n@@ -73,1 +73,1 @@\n-                assertEquals(q.m(77), \"ExI:77\");\n+                assertEquals(\"ExI:77\", q.m(77));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestInnerInstance.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestInnerVarArgsThis\n+ * @run junit MethodReferenceTestInnerVarArgsThis\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -34,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-@Test\n@@ -137,1 +136,1 @@\n-                assertEquals(q.m(55, 66), \"xvO:55*66*\");\n+                assertEquals(\"xvO:55*66*\", q.m(55, 66));\n@@ -144,1 +143,1 @@\n-                assertEquals(q.m(new int[]{55, 66}), \"xvO:[55,66,]*\");\n+                assertEquals(\"xvO:[55,66,]*\", q.m(new int[]{55, 66}));\n@@ -151,1 +150,1 @@\n-                assertEquals(q.m(33, 7), \"xvI:33-7-\");\n+                assertEquals(\"xvI:33-7-\", q.m(33, 7));\n@@ -154,1 +153,1 @@\n-                assertEquals(q.m(50, 40), \"xIvI:5040-\");\n+                assertEquals(\"xIvI:5040-\", q.m(50, 40));\n@@ -157,1 +156,1 @@\n-                assertEquals(q.m(100, 23), \"xvi:123\");\n+                assertEquals(\"xvi:123\", q.m(100, 23));\n@@ -160,1 +159,1 @@\n-                assertEquals(q.m(9, 21), \"xIvi:(9)21\");\n+                assertEquals(\"xIvi:(9)21\", q.m(9, 21));\n@@ -167,1 +166,1 @@\n-                assertEquals(q.m(3, 2, 1), \"xvI:3-2-1-\");\n+                assertEquals(\"xvI:3-2-1-\", q.m(3, 2, 1));\n@@ -170,1 +169,1 @@\n-                assertEquals(q.m(888, 99, 2), \"xIvI:88899-2-\");\n+                assertEquals(\"xIvI:88899-2-\", q.m(888, 99, 2));\n@@ -173,1 +172,1 @@\n-                assertEquals(q.m(900, 80, 7), \"xvi:987\");\n+                assertEquals(\"xvi:987\", q.m(900, 80, 7));\n@@ -176,1 +175,1 @@\n-                assertEquals(q.m(333, 27, 72), \"xIvi:(333)99\");\n+                assertEquals(\"xIvi:(333)99\", q.m(333, 27, 72));\n@@ -183,1 +182,1 @@\n-                assertEquals(q.m(3), \"xvI:3-\");\n+                assertEquals(\"xvI:3-\", q.m(3));\n@@ -186,1 +185,1 @@\n-                assertEquals(q.m(888), \"xIvI:888\");\n+                assertEquals(\"xIvI:888\", q.m(888));\n@@ -189,1 +188,1 @@\n-                assertEquals(q.m(900), \"xvi:900\");\n+                assertEquals(\"xvi:900\", q.m(900));\n@@ -192,1 +191,1 @@\n-                assertEquals(q.m(333), \"xIvi:(333)0\");\n+                assertEquals(\"xIvi:(333)0\", q.m(333));\n@@ -200,1 +199,1 @@\n-                assertEquals(q.m(new String[]{\"yo\", \"there\", \"dude\"}), \"xvO:yo*there*dude*\");\n+                assertEquals(\"xvO:yo*there*dude*\", q.m(new String[]{\"yo\", \"there\", \"dude\"}));\n@@ -221,0 +220,1 @@\n+    @Test\n@@ -225,0 +225,1 @@\n+    @Test\n@@ -229,0 +230,1 @@\n+    @Test\n@@ -233,0 +235,1 @@\n+    @Test\n@@ -237,0 +240,1 @@\n+    @Test\n@@ -243,0 +247,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestInnerVarArgsThis.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestInstance\n+ * @run junit MethodReferenceTestInstance\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +44,0 @@\n-@Test\n@@ -54,0 +52,1 @@\n+    @Test\n@@ -58,1 +57,1 @@\n-        assertEquals(q.m(55), \"xI:55\");\n+        assertEquals(\"xI:55\", q.m(55));\n@@ -61,0 +60,1 @@\n+    @Test\n@@ -65,1 +65,1 @@\n-        assertEquals(q.m(77), \"ExI:77\");\n+        assertEquals(\"ExI:77\", q.m(77));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestInstance.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestKinds\n+ * @run junit MethodReferenceTestKinds\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -68,4 +66,0 @@\n-    MethodReferenceTestKinds(String val) {\n-        super(val);\n-    }\n-\n@@ -77,1 +71,3 @@\n-        return new MethodReferenceTestKinds(val);\n+        var inst = new MethodReferenceTestKinds();\n+        inst.val = val; \/\/ simulate `MethodReferenceTestKinds(String val)` constructor\n+        return inst;\n@@ -80,0 +76,1 @@\n+    @Test\n@@ -82,1 +79,1 @@\n-        assertEquals(var.get(), \"IM:0-MethodReferenceTestKinds(blank)\");\n+        assertEquals(\"IM:0-MethodReferenceTestKinds(blank)\", var.get());\n@@ -85,0 +82,1 @@\n+    @Test\n@@ -87,1 +85,1 @@\n-        assertEquals(var.get(inst(\"arg\")), \"IM:1-MethodReferenceTestKinds(blank)MethodReferenceTestKinds(arg)\");\n+        assertEquals(\"IM:1-MethodReferenceTestKinds(blank)MethodReferenceTestKinds(arg)\", var.get(inst(\"arg\")));\n@@ -90,0 +88,1 @@\n+    @Test\n@@ -92,1 +91,1 @@\n-        assertEquals(var.get(inst(\"rcvr\")), \"IM:0-MethodReferenceTestKinds(rcvr)\");\n+        assertEquals(\"IM:0-MethodReferenceTestKinds(rcvr)\", var.get(inst(\"rcvr\")));\n@@ -95,0 +94,1 @@\n+    @Test\n@@ -97,1 +97,1 @@\n-        assertEquals(var.get(inst(\"rcvr\"), inst(\"arg\")), \"IM:1-MethodReferenceTestKinds(rcvr)MethodReferenceTestKinds(arg)\");\n+        assertEquals(\"IM:1-MethodReferenceTestKinds(rcvr)MethodReferenceTestKinds(arg)\", var.get(inst(\"rcvr\"), inst(\"arg\")));\n@@ -100,0 +100,1 @@\n+    @Test\n@@ -102,1 +103,1 @@\n-        assertEquals(var.get(), \"SIM:0-MethodReferenceTestKinds(blank)\");\n+        assertEquals(\"SIM:0-MethodReferenceTestKinds(blank)\", var.get());\n@@ -105,0 +106,1 @@\n+    @Test\n@@ -107,1 +109,1 @@\n-        assertEquals(var.get(inst(\"arg\")), \"SIM:1-MethodReferenceTestKinds(blank)MethodReferenceTestKinds(arg)\");\n+        assertEquals(\"SIM:1-MethodReferenceTestKinds(blank)MethodReferenceTestKinds(arg)\", var.get(inst(\"arg\")));\n@@ -110,0 +112,1 @@\n+    @Test\n@@ -112,1 +115,1 @@\n-        assertEquals(var.get(), \"SM:0\");\n+        assertEquals(\"SM:0\", var.get());\n@@ -115,0 +118,1 @@\n+    @Test\n@@ -117,1 +121,1 @@\n-        assertEquals(var.get(inst(\"arg\")), \"SM:1-MethodReferenceTestKinds(arg)\");\n+        assertEquals(\"SM:1-MethodReferenceTestKinds(arg)\", var.get(inst(\"arg\")));\n@@ -120,0 +124,1 @@\n+    @Test\n@@ -122,1 +127,1 @@\n-        assertEquals(var.make().toString(), \"MethodReferenceTestKindsBase(blank)\");\n+        assertEquals(\"MethodReferenceTestKindsBase(blank)\", var.make().toString());\n@@ -125,0 +130,1 @@\n+    @Test\n@@ -127,1 +133,1 @@\n-        assertEquals(var.make(\"name\").toString(), \"MethodReferenceTestKindsBase(name)\");\n+        assertEquals(\"MethodReferenceTestKindsBase(name)\", var.make(\"name\").toString());\n@@ -130,0 +136,1 @@\n+    @Test\n@@ -132,1 +139,1 @@\n-        assertEquals(var.make().toString(), \"In(blank)\");\n+        assertEquals(\"In(blank)\", var.make().toString());\n@@ -135,0 +142,1 @@\n+    @Test\n@@ -137,1 +145,1 @@\n-        assertEquals(var.make(\"name\").toString(), \"In(name)\");\n+        assertEquals(\"In(name)\", var.make(\"name\").toString());\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestKinds.java","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestMethodHandle\n+ * @run junit MethodReferenceTestMethodHandle\n@@ -34,2 +34,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,0 @@\n-@Test\n@@ -54,0 +53,1 @@\n+    @Test\n@@ -72,0 +72,1 @@\n+    @Test\n@@ -86,0 +87,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestMethodHandle.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestNew\n+ * @run junit MethodReferenceTestNew\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -108,0 +106,1 @@\n+    @Test\n@@ -112,1 +111,1 @@\n-        assertEquals(q.m().getClass().getSimpleName(), \"N0\");\n+        assertEquals(\"N0\", q.m().getClass().getSimpleName());\n@@ -115,0 +114,1 @@\n+    @Test\n@@ -119,1 +119,1 @@\n-        assertEquals(q.m(14).getClass().getSimpleName(), \"N1\");\n+        assertEquals(\"N1\", q.m(14).getClass().getSimpleName());\n@@ -122,0 +122,1 @@\n+    @Test\n@@ -126,1 +127,1 @@\n-        assertEquals(q.m(7, \"hi\").toString(), \"N2(7,hi)\");\n+        assertEquals(\"N2(7,hi)\", q.m(7, \"hi\").toString());\n@@ -129,0 +130,1 @@\n+    @Test\n@@ -133,1 +135,1 @@\n-        assertEquals(q.m(5, 45).toString(), \"NV(50)\");\n+        assertEquals(\"NV(50)\", q.m(5, 45).toString());\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestNew.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestNewInner\n+ * @run junit MethodReferenceTestNewInner\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -123,0 +121,1 @@\n+    @Test\n@@ -127,1 +126,1 @@\n-        assertEquals(q.m().getClass().getSimpleName(), \"N0\");\n+        assertEquals(\"N0\", q.m().getClass().getSimpleName());\n@@ -130,0 +129,1 @@\n+    @Test\n@@ -134,1 +134,1 @@\n-        assertEquals(q.m(14).getClass().getSimpleName(), \"N1\");\n+        assertEquals(\"N1\", q.m(14).getClass().getSimpleName());\n@@ -137,0 +137,1 @@\n+    @Test\n@@ -142,1 +143,1 @@\n-        assertEquals(q.m(7, \"hi\").toString(), \"T2:N2(7,hi)\");\n+        assertEquals(\"T2:N2(7,hi)\", q.m(7, \"hi\").toString());\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestNewInner.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestNewInnerImplicitArgs\n+ * @run junit MethodReferenceTestNewInnerImplicitArgs\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +41,0 @@\n-@Test\n@@ -59,1 +57,2 @@\n-    public static void testConstructorReferenceImplicitParameters() {\n+    @Test\n+    public void testConstructorReferenceImplicitParameters() {\n@@ -69,1 +68,1 @@\n-        assertEquals(result.m().b, \"Hey!!!\");\n+        assertEquals(\"Hey!!!\", result.m().b);\n@@ -78,1 +77,1 @@\n-        assertEquals(result2.m(8, 4).b, \"Hey8!!!4\");\n+        assertEquals(\"Hey8!!!4\", result2.m(8, 4).b);\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestNewInnerImplicitArgs.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestSueCase1\n+ * @run junit MethodReferenceTestSueCase1\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -49,0 +47,1 @@\n+    @Test\n@@ -50,1 +49,1 @@\n-        assertEquals(m(), \"2\");\n+        assertEquals(\"2\", m());\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestSueCase1.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestSueCase2\n+ * @run junit MethodReferenceTestSueCase2\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -49,0 +47,1 @@\n+    @Test\n@@ -50,1 +49,1 @@\n-        assertEquals(m(), \"2\");\n+        assertEquals(\"2\", m());\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestSueCase2.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestSueCase4\n+ * @run junit MethodReferenceTestSueCase4\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -54,0 +52,1 @@\n+    @Test\n@@ -55,1 +54,1 @@\n-        assertEquals(m(), \"2\");\n+        assertEquals(\"2\", m());\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestSueCase4.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestSuper\n+ * @run junit MethodReferenceTestSuper\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -80,1 +79,0 @@\n-@Test\n@@ -96,0 +94,1 @@\n+    @Test\n@@ -100,1 +99,1 @@\n-        assertEquals(q.m(\"*\"), \"A__xsA:*\");\n+        assertEquals(\"A__xsA:*\", q.m(\"*\"));\n@@ -103,1 +102,1 @@\n-        assertEquals(q.m(\"*\"), \"A_MxsA:*\");\n+        assertEquals(\"A_MxsA:*\", q.m(\"*\"));\n@@ -106,1 +105,1 @@\n-        assertEquals(q.m(\"*\"), \"AB_xsB:*\");\n+        assertEquals(\"AB_xsB:*\", q.m(\"*\"));\n@@ -109,1 +108,1 @@\n-        assertEquals(q.m(\"*\"), \"ABMxsB:*\");\n+        assertEquals(\"ABMxsB:*\", q.m(\"*\"));\n@@ -112,1 +111,1 @@\n-        assertEquals(q.m(\"*\"), \"_B_xsB:*\");\n+        assertEquals(\"_B_xsB:*\", q.m(\"*\"));\n@@ -115,1 +114,1 @@\n-        assertEquals(q.m(\"*\"), \"_BMxsB:*\");\n+        assertEquals(\"_BMxsB:*\", q.m(\"*\"));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestSuper.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestSuperDefault\n+ * @run junit MethodReferenceTestSuperDefault\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -64,1 +63,0 @@\n-@Test\n@@ -67,0 +65,1 @@\n+    @Test\n@@ -71,1 +70,1 @@\n-        assertEquals(q.m(\"*\"), \"A__xsA:*\");\n+        assertEquals(\"A__xsA:*\", q.m(\"*\"));\n@@ -74,1 +73,1 @@\n-        assertEquals(q.m(\"*\"), \"AB_xsB:*\");\n+        assertEquals(\"AB_xsB:*\", q.m(\"*\"));\n@@ -77,1 +76,1 @@\n-        assertEquals(q.m(\"*\"), \"_B_xsB:*\");\n+        assertEquals(\"_B_xsB:*\", q.m(\"*\"));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestSuperDefault.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestTypeConversion\n+ * @run junit MethodReferenceTestTypeConversion\n@@ -31,3 +31,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +42,0 @@\n-@Test\n@@ -50,0 +48,1 @@\n+    @Test\n@@ -52,1 +51,1 @@\n-        assertEquals(q.m((short)77), (short)77);\n+        assertEquals((short)77, q.m((short)77));\n@@ -55,0 +54,1 @@\n+    @Test\n@@ -57,1 +57,1 @@\n-        assertEquals(q.m('@'), '@');\n+        assertEquals('@', q.m('@'));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestTypeConversion.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestVarArgs\n+ * @run junit MethodReferenceTestVarArgs\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -34,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-@Test\n@@ -130,0 +129,1 @@\n+    @Test\n@@ -134,1 +134,1 @@\n-        assertEquals(q.m(55,66), \"xvO:55*66*\");\n+        assertEquals(\"xvO:55*66*\", q.m(55,66));\n@@ -137,0 +137,1 @@\n+    @Test\n@@ -141,1 +142,1 @@\n-        assertEquals(q.m(new int[] { 55,66 } ), \"xvO:[55,66,]*\");\n+        assertEquals(\"xvO:[55,66,]*\", q.m(new int[] { 55,66 } ));\n@@ -144,0 +145,1 @@\n+    @Test\n@@ -148,1 +150,1 @@\n-        assertEquals(q.m(33,7), \"xvI:33-7-\");\n+        assertEquals(\"xvI:33-7-\", q.m(33,7));\n@@ -151,1 +153,1 @@\n-        assertEquals(q.m(50,40), \"xIvI:5040-\");\n+        assertEquals(\"xIvI:5040-\", q.m(50,40));\n@@ -154,1 +156,1 @@\n-        assertEquals(q.m(100,23), \"xvi:123\");\n+        assertEquals(\"xvi:123\", q.m(100,23));\n@@ -157,1 +159,1 @@\n-        assertEquals(q.m(9,21), \"xIvi:(9)21\");\n+        assertEquals(\"xIvi:(9)21\", q.m(9,21));\n@@ -160,0 +162,1 @@\n+    @Test\n@@ -164,1 +167,1 @@\n-        assertEquals(q.m(3, 2, 1), \"xvI:3-2-1-\");\n+        assertEquals(\"xvI:3-2-1-\", q.m(3, 2, 1));\n@@ -167,1 +170,1 @@\n-        assertEquals(q.m(888, 99, 2), \"xIvI:88899-2-\");\n+        assertEquals(\"xIvI:88899-2-\", q.m(888, 99, 2));\n@@ -170,1 +173,1 @@\n-        assertEquals(q.m(900,80,7), \"xvi:987\");\n+        assertEquals(\"xvi:987\", q.m(900,80,7));\n@@ -173,1 +176,1 @@\n-        assertEquals(q.m(333,27, 72), \"xIvi:(333)99\");\n+        assertEquals(\"xIvi:(333)99\", q.m(333,27, 72));\n@@ -176,0 +179,1 @@\n+    @Test\n@@ -180,1 +184,1 @@\n-        assertEquals(q.m(3), \"xvI:3-\");\n+        assertEquals(\"xvI:3-\", q.m(3));\n@@ -183,1 +187,1 @@\n-        assertEquals(q.m(888), \"xIvI:888\");\n+        assertEquals(\"xIvI:888\", q.m(888));\n@@ -186,1 +190,1 @@\n-        assertEquals(q.m(900), \"xvi:900\");\n+        assertEquals(\"xvi:900\", q.m(900));\n@@ -189,1 +193,1 @@\n-        assertEquals(q.m(333), \"xIvi:(333)0\");\n+        assertEquals(\"xIvi:(333)0\", q.m(333));\n@@ -194,0 +198,1 @@\n+    @Test\n@@ -198,1 +203,1 @@\n-        assertEquals(q.m(new String[] { \"yo\", \"there\", \"dude\" }), \"xvO:yo*there*dude*\");\n+        assertEquals(\"xvO:yo*there*dude*\", q.m(new String[] { \"yo\", \"there\", \"dude\" }));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestVarArgs.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestVarArgsExt\n+ * @run junit MethodReferenceTestVarArgsExt\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -34,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +52,0 @@\n-@Test\n@@ -57,0 +56,1 @@\n+    @Test\n@@ -61,1 +61,1 @@\n-        assertEquals(q.m(55,66), \"xvO:55*66*\");\n+        assertEquals(\"xvO:55*66*\", q.m(55,66));\n@@ -64,0 +64,1 @@\n+    @Test\n@@ -68,1 +69,1 @@\n-        assertEquals(q.m(new int[] { 55,66 } ), \"xvO:[55,66,]*\");\n+        assertEquals(\"xvO:[55,66,]*\", q.m(new int[] { 55,66 } ));\n@@ -71,0 +72,1 @@\n+    @Test\n@@ -75,1 +77,1 @@\n-        assertEquals(q.m(33,7), \"xvI:33-7-\");\n+        assertEquals(\"xvI:33-7-\", q.m(33,7));\n@@ -78,1 +80,1 @@\n-        assertEquals(q.m(50,40), \"xIvI:5040-\");\n+        assertEquals(\"xIvI:5040-\", q.m(50,40));\n@@ -81,1 +83,1 @@\n-        assertEquals(q.m(100,23), \"xvi:123\");\n+        assertEquals(\"xvi:123\", q.m(100,23));\n@@ -84,1 +86,1 @@\n-        assertEquals(q.m(9,21), \"xIvi:(9)21\");\n+        assertEquals(\"xIvi:(9)21\", q.m(9,21));\n@@ -87,0 +89,1 @@\n+    @Test\n@@ -91,1 +94,1 @@\n-        assertEquals(q.m(3, 2, 1), \"xvI:3-2-1-\");\n+        assertEquals(\"xvI:3-2-1-\", q.m(3, 2, 1));\n@@ -94,1 +97,1 @@\n-        assertEquals(q.m(888, 99, 2), \"xIvI:88899-2-\");\n+        assertEquals(\"xIvI:88899-2-\", q.m(888, 99, 2));\n@@ -97,1 +100,1 @@\n-        assertEquals(q.m(900,80,7), \"xvi:987\");\n+        assertEquals(\"xvi:987\", q.m(900,80,7));\n@@ -100,1 +103,1 @@\n-        assertEquals(q.m(333,27, 72), \"xIvi:(333)99\");\n+        assertEquals(\"xIvi:(333)99\", q.m(333,27, 72));\n@@ -103,0 +106,1 @@\n+    @Test\n@@ -107,1 +111,1 @@\n-        assertEquals(q.m(3), \"xvI:3-\");\n+        assertEquals(\"xvI:3-\", q.m(3));\n@@ -110,1 +114,1 @@\n-        assertEquals(q.m(888), \"xIvI:888\");\n+        assertEquals(\"xIvI:888\", q.m(888));\n@@ -113,1 +117,1 @@\n-        assertEquals(q.m(900), \"xvi:900\");\n+        assertEquals(\"xvi:900\", q.m(900));\n@@ -116,1 +120,1 @@\n-        assertEquals(q.m(333), \"xIvi:(333)0\");\n+        assertEquals(\"xIvi:(333)0\", q.m(333));\n@@ -121,0 +125,1 @@\n+    @Test\n@@ -125,1 +130,1 @@\n-        assertEquals(q.m(new String[] { \"yo\", \"there\", \"dude\" }), \"xvO:yo*there*dude*\");\n+        assertEquals(\"xvO:yo*there*dude*\", q.m(new String[] { \"yo\", \"there\", \"dude\" }));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestVarArgsExt.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestVarArgsSuper\n+ * @run junit MethodReferenceTestVarArgsSuper\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -34,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -98,1 +98,0 @@\n-@Test\n@@ -135,0 +134,1 @@\n+    @Test\n@@ -139,1 +139,1 @@\n-        assertEquals(q.m(55,66), \"xvO:55*66*\");\n+        assertEquals(\"xvO:55*66*\", q.m(55,66));\n@@ -142,0 +142,1 @@\n+    @Test\n@@ -146,1 +147,1 @@\n-        assertEquals(q.m(new int[] { 55,66 } ), \"xvO:[55,66,]*\");\n+        assertEquals(\"xvO:[55,66,]*\", q.m(new int[] { 55,66 } ));\n@@ -149,0 +150,1 @@\n+    @Test\n@@ -153,1 +155,1 @@\n-        assertEquals(q.m(33,7), \"xvI:33-7-\");\n+        assertEquals(\"xvI:33-7-\", q.m(33,7));\n@@ -156,1 +158,1 @@\n-        assertEquals(q.m(50,40), \"xIvI:5040-\");\n+        assertEquals(\"xIvI:5040-\", q.m(50,40));\n@@ -159,1 +161,1 @@\n-        assertEquals(q.m(100,23), \"xvi:123\");\n+        assertEquals(\"xvi:123\", q.m(100,23));\n@@ -162,1 +164,1 @@\n-        assertEquals(q.m(9,21), \"xIvi:(9)21\");\n+        assertEquals(\"xIvi:(9)21\", q.m(9,21));\n@@ -165,0 +167,1 @@\n+    @Test\n@@ -169,1 +172,1 @@\n-        assertEquals(q.m(3, 2, 1), \"xvI:3-2-1-\");\n+        assertEquals(\"xvI:3-2-1-\", q.m(3, 2, 1));\n@@ -172,1 +175,1 @@\n-        assertEquals(q.m(888, 99, 2), \"xIvI:88899-2-\");\n+        assertEquals(\"xIvI:88899-2-\", q.m(888, 99, 2));\n@@ -175,1 +178,1 @@\n-        assertEquals(q.m(900,80,7), \"xvi:987\");\n+        assertEquals(\"xvi:987\", q.m(900,80,7));\n@@ -178,1 +181,1 @@\n-        assertEquals(q.m(333,27, 72), \"xIvi:(333)99\");\n+        assertEquals(\"xIvi:(333)99\", q.m(333,27, 72));\n@@ -181,0 +184,1 @@\n+    @Test\n@@ -185,1 +189,1 @@\n-        assertEquals(q.m(3), \"xvI:3-\");\n+        assertEquals(\"xvI:3-\", q.m(3));\n@@ -188,1 +192,1 @@\n-        assertEquals(q.m(888), \"xIvI:888\");\n+        assertEquals(\"xIvI:888\", q.m(888));\n@@ -191,1 +195,1 @@\n-        assertEquals(q.m(900), \"xvi:900\");\n+        assertEquals(\"xvi:900\", q.m(900));\n@@ -194,1 +198,1 @@\n-        assertEquals(q.m(333), \"xIvi:(333)0\");\n+        assertEquals(\"xIvi:(333)0\", q.m(333));\n@@ -199,0 +203,1 @@\n+    @Test\n@@ -203,1 +208,1 @@\n-        assertEquals(q.m(new String[] { \"yo\", \"there\", \"dude\" }), \"xvO:yo*there*dude*\");\n+        assertEquals(\"xvO:yo*there*dude*\", q.m(new String[] { \"yo\", \"there\", \"dude\" }));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestVarArgsSuper.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestVarArgsSuperDefault\n+ * @run junit MethodReferenceTestVarArgsSuperDefault\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -34,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -98,1 +98,0 @@\n-@Test\n@@ -115,0 +114,1 @@\n+    @Test\n@@ -119,1 +119,1 @@\n-        assertEquals(q.m(55,66), \"xvO:55*66*\");\n+        assertEquals(\"xvO:55*66*\", q.m(55,66));\n@@ -122,0 +122,1 @@\n+    @Test\n@@ -126,1 +127,1 @@\n-        assertEquals(q.m(new int[] { 55,66 } ), \"xvO:[55,66,]*\");\n+        assertEquals(\"xvO:[55,66,]*\", q.m(new int[] { 55,66 } ));\n@@ -129,0 +130,1 @@\n+    @Test\n@@ -133,1 +135,1 @@\n-        assertEquals(q.m(33,7), \"xvI:33-7-\");\n+        assertEquals(\"xvI:33-7-\", q.m(33,7));\n@@ -136,1 +138,1 @@\n-        assertEquals(q.m(50,40), \"xIvI:5040-\");\n+        assertEquals(\"xIvI:5040-\", q.m(50,40));\n@@ -139,1 +141,1 @@\n-        assertEquals(q.m(100,23), \"xvi:123\");\n+        assertEquals(\"xvi:123\", q.m(100,23));\n@@ -142,1 +144,1 @@\n-        assertEquals(q.m(9,21), \"xIvi:(9)21\");\n+        assertEquals(\"xIvi:(9)21\", q.m(9,21));\n@@ -145,0 +147,1 @@\n+    @Test\n@@ -149,1 +152,1 @@\n-        assertEquals(q.m(3, 2, 1), \"xvI:3-2-1-\");\n+        assertEquals(\"xvI:3-2-1-\", q.m(3, 2, 1));\n@@ -152,1 +155,1 @@\n-        assertEquals(q.m(888, 99, 2), \"xIvI:88899-2-\");\n+        assertEquals(\"xIvI:88899-2-\", q.m(888, 99, 2));\n@@ -155,1 +158,1 @@\n-        assertEquals(q.m(900,80,7), \"xvi:987\");\n+        assertEquals(\"xvi:987\", q.m(900,80,7));\n@@ -158,1 +161,1 @@\n-        assertEquals(q.m(333,27, 72), \"xIvi:(333)99\");\n+        assertEquals(\"xIvi:(333)99\", q.m(333,27, 72));\n@@ -161,0 +164,1 @@\n+    @Test\n@@ -165,1 +169,1 @@\n-        assertEquals(q.m(3), \"xvI:3-\");\n+        assertEquals(\"xvI:3-\", q.m(3));\n@@ -168,1 +172,1 @@\n-        assertEquals(q.m(888), \"xIvI:888\");\n+        assertEquals(\"xIvI:888\", q.m(888));\n@@ -171,1 +175,1 @@\n-        assertEquals(q.m(900), \"xvi:900\");\n+        assertEquals(\"xvi:900\", q.m(900));\n@@ -174,1 +178,1 @@\n-        assertEquals(q.m(333), \"xIvi:(333)0\");\n+        assertEquals(\"xIvi:(333)0\", q.m(333));\n@@ -179,0 +183,1 @@\n+    @Test\n@@ -183,1 +188,1 @@\n-        assertEquals(q.m(new String[] { \"yo\", \"there\", \"dude\" }), \"xvO:yo*there*dude*\");\n+        assertEquals(\"xvO:yo*there*dude*\", q.m(new String[] { \"yo\", \"there\", \"dude\" }));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestVarArgsSuperDefault.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng MethodReferenceTestVarArgsThis\n+ * @run junit MethodReferenceTestVarArgsThis\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -34,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +52,0 @@\n-@Test\n@@ -112,0 +111,1 @@\n+    @Test\n@@ -116,1 +116,1 @@\n-        assertEquals(q.m(55,66), \"xvO:55*66*\");\n+        assertEquals(\"xvO:55*66*\", q.m(55,66));\n@@ -119,0 +119,1 @@\n+    @Test\n@@ -123,1 +124,1 @@\n-        assertEquals(q.m(new int[] { 55,66 } ), \"xvO:[55,66,]*\");\n+        assertEquals(\"xvO:[55,66,]*\", q.m(new int[] { 55,66 } ));\n@@ -126,0 +127,1 @@\n+    @Test\n@@ -130,1 +132,1 @@\n-        assertEquals(q.m(33,7), \"xvI:33-7-\");\n+        assertEquals(\"xvI:33-7-\", q.m(33,7));\n@@ -133,1 +135,1 @@\n-        assertEquals(q.m(50,40), \"xIvI:5040-\");\n+        assertEquals(\"xIvI:5040-\", q.m(50,40));\n@@ -136,1 +138,1 @@\n-        assertEquals(q.m(100,23), \"xvi:123\");\n+        assertEquals(\"xvi:123\", q.m(100,23));\n@@ -139,1 +141,1 @@\n-        assertEquals(q.m(9,21), \"xIvi:(9)21\");\n+        assertEquals(\"xIvi:(9)21\", q.m(9,21));\n@@ -142,0 +144,1 @@\n+    @Test\n@@ -146,1 +149,1 @@\n-        assertEquals(q.m(3, 2, 1), \"xvI:3-2-1-\");\n+        assertEquals(\"xvI:3-2-1-\", q.m(3, 2, 1));\n@@ -149,1 +152,1 @@\n-        assertEquals(q.m(888, 99, 2), \"xIvI:88899-2-\");\n+        assertEquals(\"xIvI:88899-2-\", q.m(888, 99, 2));\n@@ -152,1 +155,1 @@\n-        assertEquals(q.m(900,80,7), \"xvi:987\");\n+        assertEquals(\"xvi:987\", q.m(900,80,7));\n@@ -155,1 +158,1 @@\n-        assertEquals(q.m(333,27, 72), \"xIvi:(333)99\");\n+        assertEquals(\"xIvi:(333)99\", q.m(333,27, 72));\n@@ -158,0 +161,1 @@\n+    @Test\n@@ -162,1 +166,1 @@\n-        assertEquals(q.m(3), \"xvI:3-\");\n+        assertEquals(\"xvI:3-\", q.m(3));\n@@ -165,1 +169,1 @@\n-        assertEquals(q.m(888), \"xIvI:888\");\n+        assertEquals(\"xIvI:888\", q.m(888));\n@@ -168,1 +172,1 @@\n-        assertEquals(q.m(900), \"xvi:900\");\n+        assertEquals(\"xvi:900\", q.m(900));\n@@ -171,1 +175,1 @@\n-        assertEquals(q.m(333), \"xIvi:(333)0\");\n+        assertEquals(\"xIvi:(333)0\", q.m(333));\n@@ -176,0 +180,1 @@\n+    @Test\n@@ -180,1 +185,1 @@\n-        assertEquals(q.m(new String[] { \"yo\", \"there\", \"dude\" }), \"xvO:yo*there*dude*\");\n+        assertEquals(\"xvO:yo*there*dude*\", q.m(new String[] { \"yo\", \"there\", \"dude\" }));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestVarArgsThis.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run testng MethodReferenceTestVarHandle\n+ * @run junit MethodReferenceTestVarHandle\n@@ -33,2 +33,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-@Test\n@@ -47,0 +46,1 @@\n+    @Test\n@@ -57,0 +57,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceTestVarHandle.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TestNG.dirs = tools\/javac\/lambdaShapes\n+JUnit.dirs = tools\/javac\/lambdaShapes\n","filename":"test\/langtools\/tools\/javac\/lambdaShapes\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,5 +45,6 @@\n-import org.testng.annotations.AfterSuite;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeSuite;\n-import org.testng.annotations.DataProvider;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.AfterAll;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedClass;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -51,0 +52,2 @@\n+@ParameterizedClass\n+@MethodSource(\"caseGenerator\")\n@@ -66,1 +69,1 @@\n-    @BeforeSuite\n+    @BeforeAll\n@@ -75,1 +78,1 @@\n-    @AfterSuite\n+    @AfterAll\n@@ -90,2 +93,2 @@\n-    @Test(dataProvider = \"fdCases\")\n-    public void testOneCase(TestKind tk, Hierarchy hs)\n+    @Test\n+    public void testOneCase()\n@@ -96,2 +99,1 @@\n-    @DataProvider(name = \"fdCases\")\n-    public Object[][] caseGenerator() {\n+    public static Object[][] caseGenerator() {\n@@ -130,2 +132,0 @@\n-    public FDTest() {}\n-\n","filename":"test\/langtools\/tools\/javac\/lambdaShapes\/org\/openjdk\/tests\/javac\/FDTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n@@ -33,0 +31,1 @@\n+import org.junit.jupiter.api.AfterEach;\n@@ -36,1 +35,1 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -72,1 +71,1 @@\n-    @AfterMethod\n+    @AfterEach\n@@ -90,10 +89,0 @@\n-    @AfterMethod\n-    public void printError(ITestResult result) {\n-        if (result.getStatus() == ITestResult.FAILURE) {\n-            String clsName = result.getTestClass().getName();\n-            clsName = clsName.substring(clsName.lastIndexOf(\".\") + 1);\n-            System.out.println(\"Test \" + clsName + \".\" +\n-                               result.getName() + \" FAILED\");\n-        }\n-    }\n-\n@@ -196,1 +185,1 @@\n-                assertEquals(res, value);\n+                assertEquals(value, res);\n","filename":"test\/langtools\/tools\/javac\/lambdaShapes\/org\/openjdk\/tests\/separate\/TestHarness.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.testng.annotations.Test;\n@@ -39,3 +38,4 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNotNull;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test(groups = \"vm\")\n@@ -54,0 +53,1 @@\n+    @Test\n@@ -65,0 +65,1 @@\n+    @Test\n@@ -76,0 +77,1 @@\n+    @Test\n@@ -88,0 +90,1 @@\n+    @Test\n@@ -105,0 +108,1 @@\n+    @Test\n@@ -124,0 +128,1 @@\n+    @Test\n@@ -141,0 +146,1 @@\n+    @Test\n@@ -157,0 +163,1 @@\n+    @Test\n@@ -174,0 +181,1 @@\n+    @Test\n@@ -191,0 +199,1 @@\n+    @Test\n@@ -210,0 +219,1 @@\n+    @Test\n@@ -229,0 +239,1 @@\n+    @Test\n@@ -246,0 +257,1 @@\n+    @Test\n@@ -262,0 +274,1 @@\n+    @Test\n@@ -277,0 +290,1 @@\n+    @Test\n@@ -296,0 +310,1 @@\n+    @Test\n@@ -323,0 +338,1 @@\n+    @Test\n@@ -346,0 +362,1 @@\n+    @Test\n@@ -363,0 +380,1 @@\n+    @Test\n@@ -382,0 +400,1 @@\n+    @Test\n@@ -399,0 +418,1 @@\n+    @Test\n@@ -429,0 +449,1 @@\n+    @Test\n@@ -471,1 +492,1 @@\n-        assertEquals(res.intValue(), 99);\n+        assertEquals(99, res.intValue());\n@@ -488,0 +509,1 @@\n+    @Test\n@@ -541,0 +563,1 @@\n+    @Test\n@@ -562,0 +585,1 @@\n+    @Test\n@@ -584,0 +608,1 @@\n+    @Test\n@@ -603,0 +628,1 @@\n+    @Test\n@@ -624,0 +650,1 @@\n+    @Test\n@@ -649,0 +676,1 @@\n+    @Test\n@@ -675,0 +703,1 @@\n+    @Test\n@@ -703,0 +732,1 @@\n+    @Test\n@@ -735,0 +765,1 @@\n+    @Test\n@@ -758,0 +789,1 @@\n+    @Test\n@@ -812,0 +844,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/lambdaShapes\/org\/openjdk\/tests\/vm\/DefaultMethodsTest.java","additions":40,"deletions":7,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,5 +31,2 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.AfterSuite;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n@@ -44,1 +41,4 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -58,1 +58,0 @@\n-    @DataProvider(name = \"allShapes\", parallel = true)\n@@ -95,1 +94,3 @@\n-    @Test(enabled = false, groups = \"vm\", dataProvider = \"allShapes\")\n+    @Disabled\n+    @ParameterizedTest\n+    @MethodSource(\"hierarchyGenerator\")\n@@ -121,11 +122,2 @@\n-    @AfterMethod\n-    public void printCaseError(ITestResult result) {\n-        if (result.getStatus() == ITestResult.FAILURE) {\n-            Hierarchy hs = (Hierarchy)result.getParameters()[0];\n-            System.out.println(\"Separate compilation case \" + hs);\n-            printCaseDetails(hs);\n-        }\n-    }\n-\n-    @AfterSuite\n-    public void cleanupCompilerCache() {\n+    @AfterAll\n+    public static void cleanupCompilerCache() {\n","filename":"test\/langtools\/tools\/javac\/lambdaShapes\/org\/openjdk\/tests\/vm\/FDSeparateCompilationTest.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng BigRecordsToStringTest\n+ * @run junit BigRecordsToStringTest\n@@ -39,2 +39,2 @@\n-import org.testng.annotations.*;\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,0 @@\n-@Test\n@@ -167,0 +166,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/records\/BigRecordsToStringTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng RecordMemberTests\n+ * @run junit RecordMemberTests\n@@ -39,2 +39,2 @@\n-import org.testng.annotations.*;\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,0 @@\n-@Test\n@@ -66,0 +65,1 @@\n+    @Test\n@@ -69,1 +69,1 @@\n-            assertEquals(i, 1);\n+            assertEquals(1, i);\n@@ -73,1 +73,1 @@\n-            assertEquals(j, 2);\n+            assertEquals(2, j);\n@@ -75,2 +75,2 @@\n-        assertEquals(r4.i, 0);\n-        assertEquals(r4.j, 0);\n+        assertEquals(0, r4.i);\n+        assertEquals(0, r4.j);\n@@ -79,0 +79,1 @@\n+    @Test\n@@ -84,3 +85,3 @@\n-            assertEquals(parameters.length, 2);\n-            assertEquals(parameters[0].getName(), \"i\");\n-            assertEquals(parameters[1].getName(), \"j\");\n+            assertEquals(2, parameters.length);\n+            assertEquals(\"i\", parameters[0].getName());\n+            assertEquals(\"j\", parameters[1].getName());\n@@ -90,0 +91,1 @@\n+    @Test\n@@ -91,1 +93,1 @@\n-        assertEquals(R1.class.getSuperclass(), Record.class);\n+        assertEquals(Record.class, R1.class.getSuperclass());\n@@ -96,0 +98,1 @@\n+    @Test\n@@ -98,1 +101,1 @@\n-        assertEquals(R1.class.getDeclaredFields().length, 2);\n+        assertEquals(2, R1.class.getDeclaredFields().length);\n@@ -101,2 +104,2 @@\n-            assertEquals(iField.getType(), int.class);\n-            assertEquals((iField.getModifiers() & Modifier.STATIC), 0);\n+            assertEquals(int.class, iField.getType());\n+            assertEquals(0, (iField.getModifiers() & Modifier.STATIC));\n@@ -110,3 +113,3 @@\n-            assertEquals(iMethod.getReturnType(), int.class);\n-            assertEquals(iMethod.getParameterCount(), 0);\n-            assertEquals((iMethod.getModifiers() & (Modifier.PRIVATE | Modifier.PROTECTED | Modifier.STATIC | Modifier.ABSTRACT)), 0);\n+            assertEquals(int.class, iMethod.getReturnType());\n+            assertEquals(0, iMethod.getParameterCount());\n+            assertEquals(0, (iMethod.getModifiers() & (Modifier.PRIVATE | Modifier.PROTECTED | Modifier.STATIC | Modifier.ABSTRACT)));\n@@ -117,2 +120,2 @@\n-        assertEquals(r1.i(), 1);\n-        assertEquals(r1.j(), 2);\n+        assertEquals(1, r1.i());\n+        assertEquals(2, r1.j());\n@@ -127,0 +130,1 @@\n+    @Test\n@@ -129,1 +133,1 @@\n-        assertEquals(OrdinaryMembers.ssf(), \"foo\");\n+        assertEquals(\"foo\", OrdinaryMembers.ssf());\n@@ -131,1 +135,1 @@\n-        assertEquals(o.sf(), \"instance\");\n+        assertEquals(\"instance\", o.sf());\n@@ -137,1 +141,1 @@\n-            assertEquals(new R(x).x(), x);\n+            assertEquals(x, new R(x).x());\n@@ -142,0 +146,1 @@\n+    @Test\n@@ -184,0 +189,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/records\/RecordMemberTests.java","additions":30,"deletions":24,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,1 @@\n- * @run testng VarargsRecordsTest\n+ * @run junit VarargsRecordsTest\n@@ -39,1 +39,0 @@\n-@Test\n@@ -52,0 +51,1 @@\n+    @Test\n@@ -53,6 +53,6 @@\n-        assertEquals(r1.xs.length, 0);\n-        assertEquals(r2.xs.length, 1);\n-        assertEquals(r3.xs.length, 2);\n-        assertEquals(r4.xs.length, 0);\n-        assertEquals(r5.xs.length, 1);\n-        assertEquals(r6.xs.length, 2);\n+        assertEquals(0, r1.xs.length);\n+        assertEquals(1, r2.xs.length);\n+        assertEquals(2, r3.xs.length);\n+        assertEquals(0, r4.xs.length);\n+        assertEquals(1, r5.xs.length);\n+        assertEquals(2, r6.xs.length);\n@@ -60,3 +60,3 @@\n-        assertEquals(r2.xs[0], 1);\n-        assertEquals(r3.xs[0], 1);\n-        assertEquals(r3.xs[1], 2);\n+        assertEquals(1, r2.xs[0]);\n+        assertEquals(1, r3.xs[0]);\n+        assertEquals(2, r3.xs[1]);\n@@ -64,3 +64,3 @@\n-        assertEquals(r5.xs[0], 2);\n-        assertEquals(r6.xs[0], 2);\n-        assertEquals(r6.xs[1], 3);\n+        assertEquals(2, r5.xs[0]);\n+        assertEquals(2, r6.xs[0]);\n+        assertEquals(3, r6.xs[1]);\n@@ -69,0 +69,1 @@\n+    @Test\n@@ -74,2 +75,2 @@\n-        assertEquals(parameters.length, 1);\n-        assertEquals(parameters[0].getName(), \"xs\");\n+        assertEquals(1, parameters.length);\n+        assertEquals(\"xs\", parameters[0].getName());\n@@ -78,2 +79,2 @@\n-        assertEquals(ri.xs()[0], 1);\n-        assertEquals(ri.xs()[1], 2);\n+        assertEquals(1, ri.xs()[0]);\n+        assertEquals(2, ri.xs()[1]);\n@@ -82,2 +83,2 @@\n-        assertEquals(xsField.getType(), int[].class);\n-        assertEquals((xsField.getModifiers() & Modifier.STATIC), 0);\n+        assertEquals(int[].class, xsField.getType());\n+        assertEquals(0, (xsField.getModifiers() & Modifier.STATIC));\n@@ -86,1 +87,1 @@\n-        assertEquals(((int[]) xsField.get(ri))[0], 1);\n+        assertEquals(1, ((int[]) xsField.get(ri))[0]);\n@@ -89,4 +90,4 @@\n-        assertEquals(xsMethod.getReturnType(), int[].class);\n-        assertEquals(xsMethod.getParameterCount(), 0);\n-        assertEquals((xsMethod.getModifiers() & (Modifier.PRIVATE | Modifier.PROTECTED | Modifier.STATIC | Modifier.ABSTRACT)), 0);\n-        assertEquals(((int[]) xsMethod.invoke(ri))[0], 1);\n+        assertEquals(int[].class, xsMethod.getReturnType());\n+        assertEquals(0, xsMethod.getParameterCount());\n+        assertEquals(0, (xsMethod.getModifiers() & (Modifier.PRIVATE | Modifier.PROTECTED | Modifier.STATIC | Modifier.ABSTRACT)));\n+        assertEquals(1, ((int[]) xsMethod.invoke(ri))[0]);\n@@ -95,0 +96,1 @@\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/records\/VarargsRecordsTest.java","additions":30,"deletions":28,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng T8024415\n+ * @run junit T8024415\n@@ -36,1 +36,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Test;\n@@ -50,0 +49,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +56,0 @@\n-@Test\n@@ -75,0 +74,1 @@\n+    @Test\n@@ -83,2 +83,2 @@\n-        assertEquals(prettyLeft.replaceAll(\"\\\\s\", \"\"),  \"(x?x:x)?x:x\");\n-        assertEquals(prettyRight.replaceAll(\"\\\\s\", \"\"), \"x?x:x?x:x\");\n+        assertEquals(\"(x?x:x)?x:x\", prettyLeft.replaceAll(\"\\\\s\", \"\"));\n+        assertEquals(\"x?x:x?x:x\", prettyRight.replaceAll(\"\\\\s\", \"\"));\n@@ -92,0 +92,1 @@\n+    @Test\n@@ -102,3 +103,3 @@\n-        assertEquals(prettyLeft.replaceAll(\"\\\\s\", \"\"),   \"(x=x)?x:x\");\n-        assertEquals(prettyMiddle.replaceAll(\"\\\\s\", \"\"), \"x?x=x:x\");\n-        assertEquals(prettyRight.replaceAll(\"\\\\s\", \"\"),  \"x?x:(x=x)\");\n+        assertEquals(\"(x=x)?x:x\", prettyLeft.replaceAll(\"\\\\s\", \"\"));\n+        assertEquals(\"x?x=x:x\", prettyMiddle.replaceAll(\"\\\\s\", \"\"));\n+        assertEquals(\"x?x:(x=x)\", prettyRight.replaceAll(\"\\\\s\", \"\"));\n","filename":"test\/langtools\/tools\/javac\/tree\/T8024415.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run testng TypeVariableCastTest\n+ * @run junit TypeVariableCastTest\n@@ -32,1 +32,2 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,0 @@\n-@Test\n@@ -44,3 +44,5 @@\n-    @Test(expectedExceptions = ClassCastException.class)\n-    static void testMethodF() {\n-        f();\n+    @Test\n+    void testMethodF() {\n+        Assertions.assertThrows(ClassCastException.class, () -> {\n+            f();\n+        });\n@@ -49,3 +51,5 @@\n-    @Test(expectedExceptions = ClassCastException.class)\n-    static void testMethodG() {\n-        g();\n+    @Test\n+    void testMethodG() {\n+        Assertions.assertThrows(ClassCastException.class, () -> {\n+            g();\n+        });\n","filename":"test\/langtools\/tools\/javac\/typeVariableCast\/TypeVariableCastTest.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}