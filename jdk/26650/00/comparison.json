{"files":[{"patch":"@@ -74,6 +74,0 @@\n-\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        \/\/ Empty finalizer (for improved performance; no need to call\n-        \/\/ super.finalize() in this case)\n-    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/common\/SubImageInputStream.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -149,7 +149,0 @@\n-\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        \/\/ Empty finalizer (for improved performance; no need to call\n-        \/\/ super.finalize() in this case)\n-    }\n@@ -286,7 +279,0 @@\n-\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        \/\/ Empty finalizer (for improved performance; no need to call\n-        \/\/ super.finalize() in this case)\n-    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/png\/PNGImageWriter.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.imageio.stream;\n-\n-import java.io.IOException;\n-import javax.imageio.stream.ImageInputStream;\n-\n-\/**\n- * Small class to assist in properly closing an ImageInputStream instance\n- * prior to garbage collection.  The ImageInputStreamImpl class defines a\n- * finalize() method, but in a number of its public subclasses\n- * (e.g. FileImageInputStream) we override the finalize() method to be\n- * empty for performance reasons, and instead rely on the Disposer mechanism\n- * for closing\/disposing resources.  This is fine when one of these classes\n- * is instantiated directly (e.g. new FileImageInputStream()) but in the\n- * unlikely case where a user defines their own subclass of one of those\n- * streams, we need some way to get back to the behavior of\n- * ImageInputStreamImpl, which will call close() as part of finalization.\n- *\n- * Typically an Image{Input,Output}Stream will construct an instance of\n- * StreamFinalizer in its constructor if it detects that it has been\n- * subclassed by the user.  The ImageInputStream instance will hold a\n- * reference to the StreamFinalizer, and the StreamFinalizer will hold a\n- * reference back to the ImageInputStream from which it was created.  When\n- * both are no longer reachable, the StreamFinalizer.finalize() method will\n- * be called, which will take care of closing down the ImageInputStream.\n- *\n- * Clearly this is a bit of a hack, but it will likely only be used in the\n- * rarest of circumstances: when a user has subclassed one of the public\n- * stream classes.  (It should be no worse than the old days when the public\n- * stream classes had non-empty finalize() methods.)\n- *\/\n-public class StreamFinalizer {\n-    private ImageInputStream stream;\n-\n-    public StreamFinalizer(ImageInputStream stream) {\n-        this.stream = stream;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        try {\n-            stream.close();\n-        } catch (IOException e) {\n-        } finally {\n-            stream = null;\n-            super.finalize();\n-        }\n-    }\n-}\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/stream\/StreamFinalizer.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.imageio.stream.StreamFinalizer;\n@@ -61,1 +60,1 @@\n-    private final Object disposerReferent;\n+    private final Object disposerReferent = new Object();\n@@ -112,6 +111,1 @@\n-        if (getClass() == FileCacheImageInputStream.class) {\n-            disposerReferent = new Object();\n-            Disposer.addRecord(disposerReferent, disposerRecord);\n-        } else {\n-            disposerReferent = new StreamFinalizer(this);\n-        }\n+        Disposer.addRecord(disposerReferent, disposerRecord);\n@@ -261,15 +255,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @deprecated Finalization has been deprecated for removal.  See\n-     * {@link java.lang.Object#finalize} for background information and details\n-     * about migration options.\n-     *\/\n-    @Deprecated(since=\"9\", forRemoval=true)\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        \/\/ Empty finalizer: for performance reasons we instead use the\n-        \/\/ Disposer mechanism for ensuring that the underlying\n-        \/\/ RandomAccessFile is closed\/deleted prior to garbage collection\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/FileCacheImageInputStream.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import sun.java2d.Disposer;\n+import sun.java2d.DisposerRecord;\n@@ -49,0 +51,3 @@\n+    private final Object disposerReferent = new Object();\n+\n+    private final FileCacheDisposerRecord disposerRecord;\n@@ -94,0 +99,7 @@\n+        \/\/ If this instance becomes unreachable the disposer will clean up resources\n+        \/\/ used for caching. This can't flush any un-flushed cache.\n+        this.disposerRecord = new FileCacheDisposerRecord(cacheFile, cache);\n+        Disposer.addRecord(this.disposerReferent, this.disposerRecord);\n+        \/\/ If the VM is exiting and this instance is still reachable,\n+        \/\/ StreamCloser will call close() to flush the cache and clean up resources.\n+        \/\/ However closing the java.io.OutputStream is the application's responsibility.\n@@ -220,0 +232,26 @@\n+    private static class FileCacheDisposerRecord implements DisposerRecord {\n+\n+        private final File cacheFile;\n+        private final RandomAccessFile cache;\n+        private volatile boolean disposed;\n+\n+        public FileCacheDisposerRecord(File cacheFile, RandomAccessFile cache) {\n+            this.cacheFile = cacheFile;\n+            this.cache = cache;\n+        }\n+\n+        @Override\n+        public synchronized void dispose() {\n+            if (disposed) {\n+                return;\n+            }\n+            try {\n+                cache.close();\n+                cacheFile.delete();\n+            } catch (IOException e) {\n+            } finally {\n+                 disposed = true;\n+            }\n+       }\n+    }\n+\n@@ -234,1 +272,2 @@\n-        cache.close();\n+        disposerRecord.dispose();\n+        \/\/cache.close();\n@@ -236,1 +275,1 @@\n-        cacheFile.delete();\n+        \/\/cacheFile.delete();\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/FileCacheImageOutputStream.java","additions":41,"deletions":2,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.imageio.stream.StreamFinalizer;\n@@ -48,1 +47,1 @@\n-    private final Object disposerReferent;\n+    private final Object disposerReferent = new Object();\n@@ -98,6 +97,1 @@\n-        if (getClass() == FileImageInputStream.class) {\n-            disposerReferent = new Object();\n-            Disposer.addRecord(disposerReferent, disposerRecord);\n-        } else {\n-            disposerReferent = new StreamFinalizer(this);\n-        }\n+        Disposer.addRecord(disposerReferent, disposerRecord);\n@@ -157,15 +151,0 @@\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @deprecated Finalization has been deprecated for removal.  See\n-     * {@link java.lang.Object#finalize} for background information and details\n-     * about migration options.\n-     *\/\n-    @Deprecated(since=\"9\", forRemoval=true)\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        \/\/ Empty finalizer: for performance reasons we instead use the\n-        \/\/ Disposer mechanism for ensuring that the underlying\n-        \/\/ RandomAccessFile is closed prior to garbage collection\n-    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/FileImageInputStream.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.imageio.stream.StreamFinalizer;\n@@ -47,1 +46,1 @@\n-    private final Object disposerReferent;\n+    private final Object disposerReferent = new Object();\n@@ -90,6 +89,1 @@\n-        if (getClass() == FileImageOutputStream.class) {\n-            disposerReferent = new Object();\n-            Disposer.addRecord(disposerReferent, disposerRecord);\n-        } else {\n-            disposerReferent = new StreamFinalizer(this);\n-        }\n+        Disposer.addRecord(disposerReferent, disposerRecord);\n@@ -165,15 +159,0 @@\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @deprecated Finalization has been deprecated for removal.  See\n-     * {@link java.lang.Object#finalize} for background information and details\n-     * about migration options.\n-     *\/\n-    @Deprecated(since=\"9\", forRemoval=true)\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        \/\/ Empty finalizer: for performance reasons we instead use the\n-        \/\/ Disposer mechanism for ensuring that the underlying\n-        \/\/ RandomAccessFile is closed prior to garbage collection\n-    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/FileImageOutputStream.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -844,25 +844,0 @@\n-\n-    \/**\n-     * Finalizes this object prior to garbage collection.  The\n-     * {@code close} method is called to close any open input\n-     * source.  This method should not be called from application\n-     * code.\n-     *\n-     * @throws Throwable if an error occurs during superclass\n-     * finalization.\n-     *\n-     * @deprecated Finalization has been deprecated for removal.  See\n-     * {@link java.lang.Object#finalize} for background information and details\n-     * about migration options.\n-     *\/\n-    @Deprecated(since=\"9\", forRemoval=true)\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        if (!isClosed) {\n-            try {\n-                close();\n-            } catch (IOException e) {\n-            }\n-        }\n-        super.finalize();\n-    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/ImageInputStreamImpl.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.imageio.stream.StreamFinalizer;\n@@ -53,1 +52,1 @@\n-    private final Object disposerReferent;\n+    private final Object disposerReferent = new Object();\n@@ -74,6 +73,1 @@\n-        if (getClass() == MemoryCacheImageInputStream.class) {\n-            disposerReferent = new Object();\n-            Disposer.addRecord(disposerReferent, disposerRecord);\n-        } else {\n-            disposerReferent = new StreamFinalizer(this);\n-        }\n+        Disposer.addRecord(disposerReferent, disposerRecord);\n@@ -179,15 +173,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @deprecated Finalization has been deprecated for removal.  See\n-     * {@link java.lang.Object#finalize} for background information and details\n-     * about migration options.\n-     *\/\n-    @Deprecated(since=\"9\", forRemoval=true)\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        \/\/ Empty finalizer: for performance reasons we instead use the\n-        \/\/ Disposer mechanism for ensuring that the underlying\n-        \/\/ MemoryCache is reset prior to garbage collection\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/MemoryCacheImageInputStream.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -47,1 +47,25 @@\n- *\n+ * <p>\n+ * An {@code ImageInputStream} or {@code ImageInputStream} may internally allocate\n+ * system resources, such as a temporary cache file.\n+ * Clients are encouraged to use a try-with-resources statement to ensure the\n+ * {@link ImageInputStream#close()} or {@link ImageOutputStream#close()}\n+ * method is called which can promptly free those native resources.\n+ * Otherwise there is the possibility they will leak and eventually cause the\n+ * application to fail as well the possibility that not all data is flushed\n+ * to the underlying output stream. A logical consequence of that is that\n+ * this should be done before closing the destination {@link java.io.OutputStream}.\n+ * A simple pattern would be\n+ * {@snippet lang='java':\n+ * try (FileOutputStream fos = new FileOutputStream(\"out.jpg\");\n+ *     (ImageOutputStream ios = new FileCacheImageOutputStream(fos, null)) {\n+ *     ImageIO.write(img, \"jpg\", ios);\n+ * } catch (IOException e) {\n+ * } \/\/ implicit finally block closes the streams in the reverse order to opening\n+ * }\n+ * <p>\n+ * Sub-classers of these Image I\/O API stream types can to a limited extent protect\n+ * the application from the consequences of failures to close by adopting mechanisms\n+ * such as {@link java.lang.ref.Cleaner} to free internal resources when it\n+ * is no longer reachable. This is only necessary if there are any resources to release.\n+ * However applications cannot rely on this, either for resource management, or\n+ * for program correctness.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/package-info.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"}]}