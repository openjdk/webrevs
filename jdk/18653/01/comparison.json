{"files":[{"patch":"@@ -688,0 +688,8 @@\n+void CodeCache::nmethods_do(NMethodClosure* cl) {\n+  assert_locked_or_safepoint(CodeCache_lock);\n+  NMethodIterator iter(NMethodIterator::all_blobs);\n+  while(iter.next()) {\n+    cl->do_nmethod(iter.method());\n+  }\n+}\n+\n@@ -886,14 +894,0 @@\n-void CodeCache::blobs_do(CodeBlobClosure* f) {\n-  assert_locked_or_safepoint(CodeCache_lock);\n-  FOR_ALL_ALLOCABLE_HEAPS(heap) {\n-    FOR_ALL_BLOBS(cb, *heap) {\n-      f->do_code_blob(cb);\n-#ifdef ASSERT\n-      if (cb->is_nmethod()) {\n-        Universe::heap()->verify_nmethod((nmethod*)cb);\n-      }\n-#endif \/\/ASSERT\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -156,1 +156,0 @@\n-  static void blobs_do(CodeBlobClosure* f);                \/\/ iterates over all CodeBlobs\n@@ -158,0 +157,1 @@\n+  static void nmethods_do(NMethodClosure* cl);             \/\/ iterates over all nmethods\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"code\/nmethod.hpp\"\n-#include \"gc\/g1\/g1CodeBlobClosure.hpp\"\n-#include \"gc\/g1\/g1CollectedHeap.inline.hpp\"\n-#include \"gc\/g1\/g1ConcurrentMark.inline.hpp\"\n-#include \"gc\/g1\/g1HeapRegion.hpp\"\n-#include \"gc\/g1\/g1HeapRegionRemSet.inline.hpp\"\n-#include \"gc\/shared\/barrierSetNMethod.hpp\"\n-#include \"oops\/access.inline.hpp\"\n-#include \"oops\/compressedOops.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-\n-template <typename T>\n-void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop_work(T* p) {\n-  _work->do_oop(p);\n-  T oop_or_narrowoop = RawAccess<>::oop_load(p);\n-  if (!CompressedOops::is_null(oop_or_narrowoop)) {\n-    oop o = CompressedOops::decode_not_null(oop_or_narrowoop);\n-    HeapRegion* hr = _g1h->heap_region_containing(o);\n-    assert(!_g1h->is_in_cset(o) || hr->rem_set()->code_roots_list_contains(_nm), \"if o still in collection set then evacuation failed and nm must already be in the remset\");\n-    hr->add_code_root(_nm);\n-  }\n-}\n-\n-void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oop* o) {\n-  do_oop_work(o);\n-}\n-\n-void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(narrowOop* o) {\n-  do_oop_work(o);\n-}\n-\n-template<typename T>\n-void G1CodeBlobClosure::MarkingOopClosure::do_oop_work(T* p) {\n-  T oop_or_narrowoop = RawAccess<>::oop_load(p);\n-  if (!CompressedOops::is_null(oop_or_narrowoop)) {\n-    oop o = CompressedOops::decode_not_null(oop_or_narrowoop);\n-    _cm->mark_in_bitmap(_worker_id, o);\n-  }\n-}\n-\n-G1CodeBlobClosure::MarkingOopClosure::MarkingOopClosure(uint worker_id) :\n-  _cm(G1CollectedHeap::heap()->concurrent_mark()), _worker_id(worker_id) { }\n-\n-void G1CodeBlobClosure::MarkingOopClosure::do_oop(oop* o) {\n-  do_oop_work(o);\n-}\n-\n-void G1CodeBlobClosure::MarkingOopClosure::do_oop(narrowOop* o) {\n-  do_oop_work(o);\n-}\n-\n-void G1CodeBlobClosure::do_evacuation_and_fixup(nmethod* nm) {\n-  _oc.set_nm(nm);\n-\n-  \/\/ Evacuate objects pointed to by the nmethod\n-  nm->oops_do(&_oc);\n-\n-  if (_strong) {\n-    \/\/ CodeCache unloading support\n-    nm->mark_as_maybe_on_stack();\n-\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != nullptr) {\n-      bs_nm->disarm(nm);\n-    }\n-  }\n-\n-  nm->fix_oop_relocations();\n-}\n-\n-void G1CodeBlobClosure::do_marking(nmethod* nm) {\n-  \/\/ Mark through oops in the nmethod\n-  nm->oops_do(&_marking_oc);\n-\n-  \/\/ CodeCache unloading support\n-  nm->mark_as_maybe_on_stack();\n-\n-  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs_nm != nullptr) {\n-    bs_nm->disarm(nm);\n-  }\n-\n-  \/\/ The oops were only marked, no need to update oop relocations.\n-}\n-\n-class G1NmethodProcessor : public nmethod::OopsDoProcessor {\n-  G1CodeBlobClosure* _cl;\n-\n-public:\n-  G1NmethodProcessor(G1CodeBlobClosure* cl) : _cl(cl) { }\n-\n-  void do_regular_processing(nmethod* nm) {\n-    _cl->do_evacuation_and_fixup(nm);\n-  }\n-\n-  void do_remaining_strong_processing(nmethod* nm) {\n-    _cl->do_marking(nm);\n-  }\n-};\n-\n-void G1CodeBlobClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* nm = cb->as_nmethod_or_null();\n-  if (nm == nullptr) {\n-    return;\n-  }\n-\n-  G1NmethodProcessor cl(this);\n-\n-  if (_strong) {\n-    nm->oops_do_process_strong(&cl);\n-  } else {\n-    nm->oops_do_process_weak(&cl);\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeBlobClosure.cpp","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1CODEBLOBCLOSURE_HPP\n-#define SHARE_GC_G1_G1CODEBLOBCLOSURE_HPP\n-\n-#include \"gc\/g1\/g1CollectedHeap.hpp\"\n-#include \"memory\/iterator.hpp\"\n-\n-class G1ConcurrentMark;\n-class nmethod;\n-\n-class G1CodeBlobClosure : public CodeBlobClosure {\n-  \/\/ Gather nmethod remembered set entries.\n-  class HeapRegionGatheringOopClosure : public OopClosure {\n-    G1CollectedHeap* _g1h;\n-    OopClosure* _work;\n-    nmethod* _nm;\n-\n-    template <typename T>\n-    void do_oop_work(T* p);\n-\n-  public:\n-    HeapRegionGatheringOopClosure(OopClosure* oc) : _g1h(G1CollectedHeap::heap()), _work(oc), _nm(nullptr) {}\n-\n-    void do_oop(oop* o);\n-    void do_oop(narrowOop* o);\n-\n-    void set_nm(nmethod* nm) {\n-      _nm = nm;\n-    }\n-  };\n-\n-  \/\/ Mark all oops below TAMS.\n-  class MarkingOopClosure : public OopClosure {\n-    G1ConcurrentMark* _cm;\n-    uint _worker_id;\n-\n-    template <typename T>\n-    void do_oop_work(T* p);\n-\n-  public:\n-    MarkingOopClosure(uint worker_id);\n-\n-    void do_oop(oop* o);\n-    void do_oop(narrowOop* o);\n-  };\n-\n-  HeapRegionGatheringOopClosure _oc;\n-  MarkingOopClosure _marking_oc;\n-\n-  bool _strong;\n-public:\n-  G1CodeBlobClosure(uint worker_id, OopClosure* oc, bool strong) :\n-    _oc(oc), _marking_oc(worker_id), _strong(strong) { }\n-\n-  void do_evacuation_and_fixup(nmethod* nm);\n-  void do_marking(nmethod* nm);\n-\n-  void do_code_blob(CodeBlob* cb);\n-};\n-\n-#endif \/\/ SHARE_GC_G1_G1CODEBLOBCLOSURE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeBlobClosure.hpp","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -155,1 +155,1 @@\n-  void iterate_at_safepoint(CodeBlobClosure* blk) {\n+  void iterate_at_safepoint(NMethodClosure* blk) {\n@@ -164,1 +164,1 @@\n-        blk->do_code_blob(*value);\n+        blk->do_nmethod(*value);\n@@ -291,1 +291,1 @@\n-void G1CodeRootSet::nmethods_do(CodeBlobClosure* blk) const {\n+void G1CodeRootSet::nmethods_do(NMethodClosure* blk) const {\n@@ -320,1 +320,1 @@\n-  CodeBlobToOopClosure _blobs;\n+  NMethodToOopClosure _nmethod_cl;\n@@ -323,1 +323,1 @@\n-  CleanCallback(HeapRegion* hr) : _detector(hr), _blobs(&_detector, !CodeBlobToOopClosure::FixRelocations) {}\n+  CleanCallback(HeapRegion* hr) : _detector(hr), _nmethod_cl(&_detector, !NMethodToOopClosure::FixRelocations) {}\n@@ -327,1 +327,1 @@\n-    _blobs.do_code_blob(*value);\n+    _nmethod_cl.do_nmethod(*value);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  void nmethods_do(CodeBlobClosure* blk) const;\n+  void nmethods_do(NMethodClosure* blk) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2521,1 +2521,1 @@\n-                            false \/* lock_codeblob_free_separately *\/);\n+                            false \/* lock_nmethod_free_separately *\/);\n@@ -2538,1 +2538,1 @@\n-    ctx.free_code_blobs();\n+    ctx.free_nmethods();\n@@ -3019,1 +3019,1 @@\n-class RebuildCodeRootClosure: public CodeBlobClosure {\n+class RebuildCodeRootClosure: public NMethodClosure {\n@@ -3026,5 +3026,3 @@\n-  void do_code_blob(CodeBlob* cb) {\n-    nmethod* nm = cb->as_nmethod_or_null();\n-    if (nm != nullptr) {\n-      _g1h->register_nmethod(nm);\n-    }\n+  void do_nmethod(nmethod* nm) {\n+    assert(nm != nullptr, \"Sanity\");\n+    _g1h->register_nmethod(nm);\n@@ -3035,2 +3033,2 @@\n-  RebuildCodeRootClosure blob_cl(this);\n-  CodeCache::blobs_do(&blob_cl);\n+  RebuildCodeRootClosure nmethod_cl(this);\n+  CodeCache::nmethods_do(&nmethod_cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  CodeBlobToOopClosure adjust_code(&_adjust, CodeBlobToOopClosure::FixRelocations);\n+  NMethodToOopClosure adjust_code(&_adjust, NMethodToOopClosure::FixRelocations);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  MarkingCodeBlobClosure code_closure(marker->mark_closure(), !CodeBlobToOopClosure::FixRelocations, true \/* keepalive nmethods *\/);\n+  MarkingNMethodClosure code_closure(marker->mark_closure(), !NMethodToOopClosure::FixRelocations, true \/* keepalive nmethods *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-void HeapRegion::code_roots_do(CodeBlobClosure* blk) const {\n+void HeapRegion::code_roots_do(NMethodClosure* blk) const {\n@@ -331,1 +331,1 @@\n-class VerifyCodeRootCodeBlobClosure: public CodeBlobClosure {\n+class VerifyCodeRootNMethodClosure: public NMethodClosure {\n@@ -335,1 +335,1 @@\n-  VerifyCodeRootCodeBlobClosure(const HeapRegion* hr) :\n+  VerifyCodeRootNMethodClosure(const HeapRegion* hr) :\n@@ -338,15 +338,14 @@\n-  void do_code_blob(CodeBlob* cb) {\n-    nmethod* nm = (cb == nullptr) ? nullptr : cb->as_nmethod_or_null();\n-    if (nm != nullptr) {\n-      \/\/ Verify that the nemthod is live\n-      VerifyCodeRootOopClosure oop_cl(_hr);\n-      nm->oops_do(&oop_cl);\n-      if (!oop_cl.has_oops_in_region()) {\n-        log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has nmethod \" PTR_FORMAT \" in its code roots with no pointers into region\",\n-                              p2i(_hr->bottom()), p2i(_hr->end()), p2i(nm));\n-        _failures = true;\n-      } else if (oop_cl.failures()) {\n-        log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has other failures for nmethod \" PTR_FORMAT,\n-                              p2i(_hr->bottom()), p2i(_hr->end()), p2i(nm));\n-        _failures = true;\n-      }\n+  void do_nmethod(nmethod* nm) {\n+    assert(nm != nullptr, \"Sanity\");\n+\n+    \/\/ Verify that the nmethod is live\n+    VerifyCodeRootOopClosure oop_cl(_hr);\n+    nm->oops_do(&oop_cl);\n+    if (!oop_cl.has_oops_in_region()) {\n+      log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has nmethod \" PTR_FORMAT \" in its code roots with no pointers into region\",\n+          p2i(_hr->bottom()), p2i(_hr->end()), p2i(nm));\n+      _failures = true;\n+    } else if (oop_cl.failures()) {\n+      log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has other failures for nmethod \" PTR_FORMAT,\n+          p2i(_hr->bottom()), p2i(_hr->end()), p2i(nm));\n+      _failures = true;\n@@ -398,2 +397,2 @@\n-  VerifyCodeRootCodeBlobClosure cb_cl(this);\n-  code_roots_do(&cb_cl);\n+  VerifyCodeRootNMethodClosure nm_cl(this);\n+  code_roots_do(&nm_cl);\n@@ -401,1 +400,1 @@\n-  return cb_cl.failures();\n+  return nm_cl.failures();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -543,1 +543,1 @@\n-  \/\/ Applies blk->do_code_blob() to each of the entries in\n+  \/\/ Applies blk->do_nmethod() to each of the entries in\n@@ -545,1 +545,1 @@\n-  void code_roots_do(CodeBlobClosure* blk) const;\n+  void code_roots_do(NMethodClosure* blk) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-void HeapRegionRemSet::code_roots_do(CodeBlobClosure* blk) const {\n+void HeapRegionRemSet::code_roots_do(NMethodClosure* blk) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  \/\/ A set of code blobs (nmethods) whose code contains pointers into\n+  \/\/ A set of nmethods whose code contains pointers into\n@@ -155,2 +155,2 @@\n-  \/\/ Applies blk->do_code_blob() to each of the entries in _code_roots\n-  void code_roots_do(CodeBlobClosure* blk) const;\n+  \/\/ Applies blk->do_nmethod() to each of the entries in _code_roots\n+  void code_roots_do(NMethodClosure* blk) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-class G1VerifyCodeRootBlobClosure: public CodeBlobClosure {\n+class G1VerifyCodeRootNMethodClosure: public NMethodClosure {\n@@ -142,1 +142,1 @@\n-  G1VerifyCodeRootBlobClosure(G1VerifyCodeRootOopClosure* oop_cl):\n+  G1VerifyCodeRootNMethodClosure(G1VerifyCodeRootOopClosure* oop_cl):\n@@ -145,6 +145,4 @@\n-  void do_code_blob(CodeBlob* cb) {\n-    nmethod* nm = cb->as_nmethod_or_null();\n-    if (nm != nullptr) {\n-      _oop_cl->set_nmethod(nm);\n-      nm->oops_do(_oop_cl);\n-    }\n+  void do_nmethod(nmethod* nm) {\n+    assert(nm != nullptr, \"Sanity\");\n+    _oop_cl->set_nmethod(nm);\n+    nm->oops_do(_oop_cl);\n@@ -343,1 +341,1 @@\n-  G1VerifyCodeRootBlobClosure blobsCl(&codeRootsCl);\n+  G1VerifyCodeRootNMethodClosure blobsCl(&codeRootsCl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"code\/nmethod.hpp\"\n+#include \"gc\/g1\/g1NMethodClosure.hpp\"\n+#include \"gc\/g1\/g1CollectedHeap.inline.hpp\"\n+#include \"gc\/g1\/g1ConcurrentMark.inline.hpp\"\n+#include \"gc\/g1\/g1HeapRegion.hpp\"\n+#include \"gc\/g1\/g1HeapRegionRemSet.inline.hpp\"\n+#include \"gc\/shared\/barrierSetNMethod.hpp\"\n+#include \"oops\/access.inline.hpp\"\n+#include \"oops\/compressedOops.inline.hpp\"\n+#include \"oops\/oop.inline.hpp\"\n+\n+template <typename T>\n+void G1NMethodClosure::HeapRegionGatheringOopClosure::do_oop_work(T* p) {\n+  _work->do_oop(p);\n+  T oop_or_narrowoop = RawAccess<>::oop_load(p);\n+  if (!CompressedOops::is_null(oop_or_narrowoop)) {\n+    oop o = CompressedOops::decode_not_null(oop_or_narrowoop);\n+    HeapRegion* hr = _g1h->heap_region_containing(o);\n+    assert(!_g1h->is_in_cset(o) || hr->rem_set()->code_roots_list_contains(_nm), \"if o still in collection set then evacuation failed and nm must already be in the remset\");\n+    hr->add_code_root(_nm);\n+  }\n+}\n+\n+void G1NMethodClosure::HeapRegionGatheringOopClosure::do_oop(oop* o) {\n+  do_oop_work(o);\n+}\n+\n+void G1NMethodClosure::HeapRegionGatheringOopClosure::do_oop(narrowOop* o) {\n+  do_oop_work(o);\n+}\n+\n+template<typename T>\n+void G1NMethodClosure::MarkingOopClosure::do_oop_work(T* p) {\n+  T oop_or_narrowoop = RawAccess<>::oop_load(p);\n+  if (!CompressedOops::is_null(oop_or_narrowoop)) {\n+    oop o = CompressedOops::decode_not_null(oop_or_narrowoop);\n+    _cm->mark_in_bitmap(_worker_id, o);\n+  }\n+}\n+\n+G1NMethodClosure::MarkingOopClosure::MarkingOopClosure(uint worker_id) :\n+  _cm(G1CollectedHeap::heap()->concurrent_mark()), _worker_id(worker_id) { }\n+\n+void G1NMethodClosure::MarkingOopClosure::do_oop(oop* o) {\n+  do_oop_work(o);\n+}\n+\n+void G1NMethodClosure::MarkingOopClosure::do_oop(narrowOop* o) {\n+  do_oop_work(o);\n+}\n+\n+void G1NMethodClosure::do_evacuation_and_fixup(nmethod* nm) {\n+  _oc.set_nm(nm);\n+\n+  \/\/ Evacuate objects pointed to by the nmethod\n+  nm->oops_do(&_oc);\n+\n+  if (_strong) {\n+    \/\/ CodeCache unloading support\n+    nm->mark_as_maybe_on_stack();\n+\n+    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n+    if (bs_nm != nullptr) {\n+      bs_nm->disarm(nm);\n+    }\n+  }\n+\n+  nm->fix_oop_relocations();\n+}\n+\n+void G1NMethodClosure::do_marking(nmethod* nm) {\n+  \/\/ Mark through oops in the nmethod\n+  nm->oops_do(&_marking_oc);\n+\n+  \/\/ CodeCache unloading support\n+  nm->mark_as_maybe_on_stack();\n+\n+  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n+  if (bs_nm != nullptr) {\n+    bs_nm->disarm(nm);\n+  }\n+\n+  \/\/ The oops were only marked, no need to update oop relocations.\n+}\n+\n+class G1NmethodProcessor : public nmethod::OopsDoProcessor {\n+  G1NMethodClosure* _cl;\n+\n+public:\n+  G1NmethodProcessor(G1NMethodClosure* cl) : _cl(cl) { }\n+\n+  void do_regular_processing(nmethod* nm) {\n+    _cl->do_evacuation_and_fixup(nm);\n+  }\n+\n+  void do_remaining_strong_processing(nmethod* nm) {\n+    _cl->do_marking(nm);\n+  }\n+};\n+\n+void G1NMethodClosure::do_nmethod(nmethod* nm) {\n+  assert(nm != nullptr, \"Sanity\");\n+\n+  G1NmethodProcessor cl(this);\n+\n+  if (_strong) {\n+    nm->oops_do_process_strong(&cl);\n+  } else {\n+    nm->oops_do_process_weak(&cl);\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.cpp","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_G1_G1NMETHODCLOSURE_HPP\n+#define SHARE_GC_G1_G1NMETHODCLOSURE_HPP\n+\n+#include \"gc\/g1\/g1CollectedHeap.hpp\"\n+#include \"memory\/iterator.hpp\"\n+\n+class G1ConcurrentMark;\n+class nmethod;\n+\n+class G1NMethodClosure : public NMethodClosure {\n+  \/\/ Gather nmethod remembered set entries.\n+  class HeapRegionGatheringOopClosure : public OopClosure {\n+    G1CollectedHeap* _g1h;\n+    OopClosure* _work;\n+    nmethod* _nm;\n+\n+    template <typename T>\n+    void do_oop_work(T* p);\n+\n+  public:\n+    HeapRegionGatheringOopClosure(OopClosure* oc) : _g1h(G1CollectedHeap::heap()), _work(oc), _nm(nullptr) {}\n+\n+    void do_oop(oop* o);\n+    void do_oop(narrowOop* o);\n+\n+    void set_nm(nmethod* nm) {\n+      _nm = nm;\n+    }\n+  };\n+\n+  \/\/ Mark all oops below TAMS.\n+  class MarkingOopClosure : public OopClosure {\n+    G1ConcurrentMark* _cm;\n+    uint _worker_id;\n+\n+    template <typename T>\n+    void do_oop_work(T* p);\n+\n+  public:\n+    MarkingOopClosure(uint worker_id);\n+\n+    void do_oop(oop* o);\n+    void do_oop(narrowOop* o);\n+  };\n+\n+  HeapRegionGatheringOopClosure _oc;\n+  MarkingOopClosure _marking_oc;\n+\n+  bool _strong;\n+public:\n+  G1NMethodClosure(uint worker_id, OopClosure* oc, bool strong) :\n+    _oc(oc), _marking_oc(worker_id), _strong(strong) { }\n+\n+  void do_evacuation_and_fixup(nmethod* nm);\n+  void do_marking(nmethod* nm);\n+\n+  void do_nmethod(nmethod* nm);\n+};\n+\n+#endif \/\/ SHARE_GC_G1_G1NMETHODCLOSURE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.hpp","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -737,3 +737,3 @@\n-\/\/ Wrapper around a CodeBlobClosure to count the number of code blobs scanned.\n-class G1ScanAndCountCodeBlobClosure : public CodeBlobClosure {\n-  CodeBlobClosure* _cl;\n+\/\/ Wrapper around a NMethodClosure to count the number of nmethods scanned.\n+class G1ScanAndCountNMethodClosure : public NMethodClosure {\n+  NMethodClosure* _cl;\n@@ -743,1 +743,1 @@\n-  G1ScanAndCountCodeBlobClosure(CodeBlobClosure* cl) : _cl(cl), _count(0) {\n+  G1ScanAndCountNMethodClosure(NMethodClosure* cl) : _cl(cl), _count(0) {\n@@ -746,2 +746,2 @@\n-  void do_code_blob(CodeBlob* cb) override {\n-    _cl->do_code_blob(cb);\n+  void do_nmethod(nmethod* nm) override {\n+    _cl->do_nmethod(nm);\n@@ -823,1 +823,1 @@\n-      G1ScanAndCountCodeBlobClosure cl(_pss->closures()->weak_codeblobs());\n+      G1ScanAndCountNMethodClosure cl(_pss->closures()->weak_nmethods());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-class CodeBlobClosure;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-  CodeBlobClosure* strong_codeblobs()      { return &_closures._codeblobs; }\n-  CodeBlobClosure* weak_codeblobs()        { return &_closures._codeblobs; }\n+  NMethodClosure* strong_nmethods()   { return &_closures._nmethods; }\n+  NMethodClosure* weak_nmethods()     { return &_closures._nmethods; }\n@@ -68,2 +68,2 @@\n-  CodeBlobClosure* strong_codeblobs()      { return &_strong._codeblobs; }\n-  CodeBlobClosure* weak_codeblobs()        { return &_weak._codeblobs; }\n+  NMethodClosure* strong_nmethods()   { return &_strong._nmethods; }\n+  NMethodClosure* weak_nmethods()     { return &_weak._nmethods; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootClosures.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-  \/\/ Applied to code blobs reachable as strong roots.\n-  virtual CodeBlobClosure* strong_codeblobs() = 0;\n+  \/\/ Applied to nmethods reachable as strong roots.\n+  virtual NMethodClosure* strong_nmethods() = 0;\n@@ -49,2 +49,2 @@\n-  \/\/ Applied to code blobs treated as weak roots.\n-  virtual CodeBlobClosure* weak_codeblobs() = 0;\n+  \/\/ Applied to nmethods treated as weak roots.\n+  virtual NMethodClosure* weak_nmethods() = 0;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootClosures.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/g1\/g1CodeBlobClosure.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"gc\/g1\/g1NMethodClosure.hpp\"\n@@ -83,1 +83,1 @@\n-  CodeBlobClosure* _blobs;\n+  NMethodClosure* _nmethods;\n@@ -85,2 +85,2 @@\n-  StrongRootsClosures(OopClosure* roots, CLDClosure* clds, CodeBlobClosure* blobs) :\n-      _roots(roots), _clds(clds), _blobs(blobs) {}\n+  StrongRootsClosures(OopClosure* roots, CLDClosure* clds, NMethodClosure* nmethods) :\n+      _roots(roots), _clds(clds), _nmethods(nmethods) {}\n@@ -93,1 +93,1 @@\n-  CodeBlobClosure* strong_codeblobs() { return _blobs; }\n+  NMethodClosure* strong_nmethods() { return _nmethods; }\n@@ -98,2 +98,2 @@\n-                                           CodeBlobClosure* blobs) {\n-  StrongRootsClosures closures(oops, clds, blobs);\n+                                           NMethodClosure* nmethods) {\n+  StrongRootsClosures closures(oops, clds, nmethods);\n@@ -126,1 +126,1 @@\n-  \/\/ We don't want to visit code blobs more than once, so we return null for the\n+  \/\/ We don't want to visit nmethods more than once, so we return null for the\n@@ -128,1 +128,1 @@\n-  CodeBlobClosure* strong_codeblobs() { return nullptr; }\n+  NMethodClosure* strong_nmethods() { return nullptr; }\n@@ -133,1 +133,1 @@\n-                                        CodeBlobClosure* blobs) {\n+                                        NMethodClosure* nmethods) {\n@@ -139,1 +139,1 @@\n-  process_code_cache_roots(blobs, nullptr, 0);\n+  process_code_cache_roots(nmethods, nullptr, 0);\n@@ -152,1 +152,1 @@\n-  \/\/ the G1RootClosures::strong_codeblobs() closure on them. The closure\n+  \/\/ the G1RootClosures::strong_nmethods() closure on them. The closure\n@@ -162,1 +162,1 @@\n-  \/\/ G1CodeRootSet). G1 applies the G1RootClosures::weak_codeblobs() closure on\n+  \/\/ G1CodeRootSet). G1 applies the G1RootClosures::weak_nmethods() closure on\n@@ -182,1 +182,1 @@\n-                                       closures->strong_codeblobs());\n+                                       closures->strong_nmethods());\n@@ -203,1 +203,1 @@\n-void G1RootProcessor::process_code_cache_roots(CodeBlobClosure* code_closure,\n+void G1RootProcessor::process_code_cache_roots(NMethodClosure* nmethod_closure,\n@@ -210,1 +210,1 @@\n-    CodeCache::blobs_do(code_closure);\n+    CodeCache::nmethods_do(nmethod_closure);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-class CodeBlobClosure;\n@@ -71,1 +70,1 @@\n-  void process_code_cache_roots(CodeBlobClosure* code_closure,\n+  void process_code_cache_roots(NMethodClosure* nmethods_closure,\n@@ -86,1 +85,1 @@\n-                            CodeBlobClosure* blobs);\n+                            NMethodClosure* nmethods);\n@@ -91,1 +90,1 @@\n-                         CodeBlobClosure* blobs);\n+                         NMethodClosure* nmethods);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-#include \"gc\/g1\/g1CodeBlobClosure.hpp\"\n+#include \"gc\/g1\/g1NMethodClosure.hpp\"\n@@ -48,1 +48,1 @@\n-  G1CodeBlobClosure               _codeblobs;\n+  G1NMethodClosure                _nmethods;\n@@ -55,1 +55,1 @@\n-    _codeblobs(pss->worker_id(), &_oops_in_nmethod, should_mark) {}\n+    _nmethods(pss->worker_id(), &_oops_in_nmethod, should_mark) {}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SharedClosures.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1411,1 +1411,1 @@\n-                              false \/* lock_codeblob_free_separately *\/);\n+                              false \/* lock_nmethod_free_separately *\/);\n@@ -1563,1 +1563,1 @@\n-    MarkingCodeBlobClosure mark_and_push_in_blobs(&mark_and_push_closure, !CodeBlobToOopClosure::FixRelocations, true \/* keepalive nmethods *\/);\n+    MarkingNMethodClosure mark_and_push_in_blobs(&mark_and_push_closure, !NMethodToOopClosure::FixRelocations, true \/* keepalive nmethods *\/);\n@@ -1734,1 +1734,1 @@\n-      ctx->free_code_blobs();\n+      ctx->free_nmethods();\n@@ -1800,2 +1800,2 @@\n-      CodeBlobToOopClosure adjust_code(&adjust, CodeBlobToOopClosure::FixRelocations);\n-      CodeCache::blobs_do(&adjust_code);\n+      NMethodToOopClosure adjust_code(&adjust, NMethodToOopClosure::FixRelocations);\n+      CodeCache::nmethods_do(&adjust_code);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-        MarkingCodeBlobClosure code_closure(&roots_to_old_closure, CodeBlobToOopClosure::FixRelocations, false \/* keepalive nmethods *\/);\n+        MarkingNMethodClosure code_closure(&roots_to_old_closure, NMethodToOopClosure::FixRelocations, false \/* keepalive nmethods *\/);\n@@ -271,1 +271,1 @@\n-    MarkingCodeBlobClosure roots_in_blobs(&roots_closure, CodeBlobToOopClosure::FixRelocations, false \/* keepalive nmethods *\/);\n+    MarkingNMethodClosure roots_in_nmethods(&roots_closure, NMethodToOopClosure::FixRelocations, false \/* keepalive nmethods *\/);\n@@ -273,1 +273,1 @@\n-    thread->oops_do(&roots_closure, &roots_in_blobs);\n+    thread->oops_do(&roots_closure, &roots_in_nmethods);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -705,3 +705,3 @@\n-    MarkingCodeBlobClosure code_cl(&root_cl,\n-                                   CodeBlobToOopClosure::FixRelocations,\n-                                   false \/* keepalive_nmethods *\/);\n+    MarkingNMethodClosure code_cl(&root_cl,\n+                                  NMethodToOopClosure::FixRelocations,\n+                                  false \/* keepalive_nmethods *\/);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -478,1 +478,1 @@\n-    MarkingCodeBlobClosure mark_code_closure(&follow_root_closure, !CodeBlobToOopClosure::FixRelocations, true);\n+    MarkingNMethodClosure mark_code_closure(&follow_root_closure, !NMethodToOopClosure::FixRelocations, true);\n@@ -532,1 +532,1 @@\n-      ctx->free_code_blobs();\n+      ctx->free_nmethods();\n@@ -700,1 +700,1 @@\n-    CodeBlobToOopClosure code_closure(&adjust_pointer_closure, CodeBlobToOopClosure::FixRelocations);\n+    NMethodToOopClosure code_closure(&adjust_pointer_closure, NMethodToOopClosure::FixRelocations);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -588,1 +588,1 @@\n-                              false \/* lock_codeblob_free_separately *\/);\n+                              false \/* lock_nmethod_free_separately *\/);\n@@ -732,1 +732,1 @@\n-                               CodeBlobToOopClosure* code_roots) {\n+                               NMethodToOopClosure* code_roots) {\n@@ -739,1 +739,1 @@\n-  CodeBlobToOopClosure* roots_from_code_p = (so & SO_AllCodeCache) ? nullptr : code_roots;\n+  NMethodToOopClosure* roots_from_code_p = (so & SO_AllCodeCache) ? nullptr : code_roots;\n@@ -756,1 +756,1 @@\n-    CodeCache::blobs_do(code_roots);\n+    CodeCache::nmethods_do(code_roots);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-                     CodeBlobToOopClosure* code_roots);\n+                     NMethodToOopClosure* code_roots);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-                                             bool lock_codeblob_free_separately) :\n+                                             bool lock_nmethod_free_separately) :\n@@ -42,1 +42,1 @@\n-  _lock_codeblob_free_separately(lock_codeblob_free_separately) {\n+  _lock_nmethod_free_separately(lock_nmethod_free_separately) {\n@@ -126,1 +126,1 @@\n-void ClassUnloadingContext::free_code_blobs() {\n+void ClassUnloadingContext::free_nmethods() {\n@@ -162,1 +162,1 @@\n-  if (_lock_codeblob_free_separately) {\n+  if (_lock_nmethod_free_separately) {\n","filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  bool _lock_codeblob_free_separately;\n+  bool _lock_nmethod_free_separately;\n@@ -56,2 +56,2 @@\n-  \/\/ lock_codeblob_free_separately determines whether freeing the code blobs takes\n-  \/\/     the CodeCache_lock during the whole operation (=false) or per code blob\n+  \/\/ lock_nmethod_free_separately determines whether freeing the nmethods takes\n+  \/\/     the CodeCache_lock during the whole operation (=false) or per nmethod\n@@ -61,1 +61,1 @@\n-                        bool lock_codeblob_free_separately);\n+                        bool lock_nmethod_free_separately);\n@@ -74,1 +74,1 @@\n-  void free_code_blobs();\n+  void free_nmethods();\n@@ -78,1 +78,1 @@\n-    free_code_blobs();\n+    free_nmethods();\n","filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-void ScavengableNMethods::nmethods_do_and_prune(CodeBlobToOopClosure* cl) {\n+void ScavengableNMethods::nmethods_do_and_prune(NMethodToOopClosure* cl) {\n@@ -145,1 +145,1 @@\n-      cl->do_code_blob(cur);\n+      cl->do_nmethod(cur);\n@@ -195,1 +195,1 @@\n-void ScavengableNMethods::nmethods_do(CodeBlobToOopClosure* cl) {\n+void ScavengableNMethods::nmethods_do(NMethodToOopClosure* cl) {\n","filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-class CodeBlobClosure;\n-class CodeBlobToOopClosure;\n@@ -35,0 +33,1 @@\n+class NMethodToOopClosure;\n@@ -56,1 +55,1 @@\n-  static void nmethods_do(CodeBlobToOopClosure* cl);\n+  static void nmethods_do(NMethodToOopClosure* cl);\n@@ -59,1 +58,1 @@\n-  static void nmethods_do_and_prune(CodeBlobToOopClosure* cl);\n+  static void nmethods_do_and_prune(NMethodToOopClosure* cl);\n","filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-class ShenandoahCodeBlobAndDisarmClosure: public CodeBlobToOopClosure {\n+class ShenandoahNMethodAndDisarmClosure: public NMethodToOopClosure {\n@@ -127,2 +127,2 @@\n-  inline ShenandoahCodeBlobAndDisarmClosure(OopClosure* cl);\n-  inline void do_code_blob(CodeBlob* cb);\n+  inline ShenandoahNMethodAndDisarmClosure(OopClosure* cl);\n+  inline void do_nmethod(nmethod* nm);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -195,2 +195,2 @@\n-ShenandoahCodeBlobAndDisarmClosure::ShenandoahCodeBlobAndDisarmClosure(OopClosure* cl) :\n-  CodeBlobToOopClosure(cl, true \/* fix_relocations *\/),\n+ShenandoahNMethodAndDisarmClosure::ShenandoahNMethodAndDisarmClosure(OopClosure* cl) :\n+  NMethodToOopClosure(cl, true \/* fix_relocations *\/),\n@@ -200,7 +200,5 @@\n-void ShenandoahCodeBlobAndDisarmClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* const nm = cb->as_nmethod_or_null();\n-  if (nm != nullptr) {\n-    assert(!ShenandoahNMethod::gc_data(nm)->is_unregistered(), \"Should not be here\");\n-    CodeBlobToOopClosure::do_code_blob(cb);\n-    _bs->disarm(nm);\n-  }\n+void ShenandoahNMethodAndDisarmClosure::do_nmethod(nmethod* nm) {\n+  assert(nm != nullptr, \"Sanity\");\n+  assert(!ShenandoahNMethod::gc_data(nm)->is_unregistered(), \"Should not be here\");\n+  NMethodToOopClosure::do_nmethod(nm);\n+  _bs->disarm(nm);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-void ShenandoahCodeRootsIterator::possibly_parallel_blobs_do(CodeBlobClosure *f) {\n+void ShenandoahCodeRootsIterator::possibly_parallel_nmethods_do(NMethodClosure *f) {\n@@ -221,1 +221,1 @@\n-  _table_snapshot->parallel_blobs_do(f);\n+  _table_snapshot->parallel_nmethods_do(f);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  void possibly_parallel_blobs_do(CodeBlobClosure *f);\n+  void possibly_parallel_nmethods_do(NMethodClosure *f);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1893,1 +1893,1 @@\n-                            false \/* lock_codeblob_free_separately *\/);\n+                            false \/* lock_nmethod_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-void ShenandoahNMethodTableSnapshot::parallel_blobs_do(CodeBlobClosure *f) {\n+void ShenandoahNMethodTableSnapshot::parallel_nmethods_do(NMethodClosure *f) {\n@@ -450,1 +450,1 @@\n-      f->do_code_blob(nmr->nm());\n+      f->do_nmethod(nmr->nm());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-  void parallel_blobs_do(CodeBlobClosure *f);\n+  void parallel_nmethods_do(NMethodClosure *f);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-void ShenandoahThreadRoots::oops_do(OopClosure* oops_cl, CodeBlobClosure* code_cl, uint worker_id) {\n+void ShenandoahThreadRoots::oops_do(OopClosure* oops_cl, NMethodClosure* code_cl, uint worker_id) {\n@@ -85,1 +85,1 @@\n-void ShenandoahCodeCacheRoots::code_blobs_do(CodeBlobClosure* blob_cl, uint worker_id) {\n+void ShenandoahCodeCacheRoots::nmethods_do(NMethodClosure* nmethod_cl, uint worker_id) {\n@@ -87,1 +87,1 @@\n-  _coderoots_iterator.possibly_parallel_blobs_do(blob_cl);\n+  _coderoots_iterator.possibly_parallel_nmethods_do(nmethod_cl);\n@@ -162,2 +162,2 @@\n-      CodeBlobToOopClosure blobs(oops, !CodeBlobToOopClosure::FixRelocations);\n-      _codecache_snapshot->parallel_blobs_do(&blobs);\n+      NMethodToOopClosure nmethods(oops, !NMethodToOopClosure::FixRelocations);\n+      _codecache_snapshot->parallel_nmethods_do(&nmethods);\n@@ -206,5 +206,5 @@\n-  CodeBlobToOopClosure code_blob_cl(oops, CodeBlobToOopClosure::FixRelocations);\n-  ShenandoahCodeBlobAndDisarmClosure blobs_and_disarm_Cl(oops);\n-  CodeBlobToOopClosure* adjust_code_closure = ShenandoahCodeRoots::use_nmethod_barriers_for_mark() ?\n-                                              static_cast<CodeBlobToOopClosure*>(&blobs_and_disarm_Cl) :\n-                                              static_cast<CodeBlobToOopClosure*>(&code_blob_cl);\n+  NMethodToOopClosure code_blob_cl(oops, NMethodToOopClosure::FixRelocations);\n+  ShenandoahNMethodAndDisarmClosure nmethods_and_disarm_Cl(oops);\n+  NMethodToOopClosure* adjust_code_closure = ShenandoahCodeRoots::use_nmethod_barriers_for_mark() ?\n+                                             static_cast<NMethodToOopClosure*>(&nmethods_and_disarm_Cl) :\n+                                             static_cast<NMethodToOopClosure*>(&code_blob_cl);\n@@ -219,1 +219,1 @@\n-  _code_roots.code_blobs_do(adjust_code_closure, worker_id);\n+  _code_roots.nmethods_do(adjust_code_closure, worker_id);\n@@ -232,1 +232,1 @@\n-class ShenandoahMarkCodeBlobClosure : public CodeBlobClosure {\n+class ShenandoahMarkNMethodClosure : public NMethodClosure {\n@@ -238,1 +238,1 @@\n-  ShenandoahMarkCodeBlobClosure(OopClosure* oops) :\n+  ShenandoahMarkNMethodClosure(OopClosure* oops) :\n@@ -242,10 +242,5 @@\n-  virtual void do_code_blob(CodeBlob* cb) {\n-    nmethod* const nm = cb->as_nmethod_or_null();\n-    if (nm != nullptr) {\n-      if (_bs_nm != nullptr) {\n-        \/\/ Make sure it only sees to-space objects\n-        _bs_nm->nmethod_entry_barrier(nm);\n-      }\n-      ShenandoahNMethod* const snm = ShenandoahNMethod::gc_data(nm);\n-      assert(snm != nullptr, \"Sanity\");\n-      snm->oops_do(_oops, false \/*fix_relocations*\/);\n+  virtual void do_nmethod(nmethod* nm) {\n+    assert(nm != nullptr, \"Sanity\");\n+    if (_bs_nm != nullptr) {\n+      \/\/ Make sure it only sees to-space objects\n+      _bs_nm->nmethod_entry_barrier(nm);\n@@ -253,0 +248,3 @@\n+    ShenandoahNMethod* const snm = ShenandoahNMethod::gc_data(nm);\n+    assert(snm != nullptr, \"Sanity\");\n+    snm->oops_do(_oops, false \/*fix_relocations*\/);\n@@ -259,1 +257,1 @@\n-  ShenandoahMarkCodeBlobClosure code(oops);\n+  ShenandoahMarkNMethodClosure code(oops);\n@@ -270,1 +268,1 @@\n-  _code_roots.code_blobs_do(&code, 0);\n+  _code_roots.nmethods_do(&code, 0);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  void oops_do(OopClosure* oops_cl, CodeBlobClosure* code_cl, uint worker_id);\n+  void oops_do(OopClosure* oops_cl, NMethodClosure* code_cl, uint worker_id);\n@@ -106,1 +106,1 @@\n-  void code_blobs_do(CodeBlobClosure* blob_cl, uint worker_id);\n+  void nmethods_do(NMethodClosure* nmethod_cl, uint worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-  CodeBlobClosure* _cf;\n+  NMethodClosure* _cf;\n@@ -133,1 +133,1 @@\n-  ShenandoahParallelOopsDoThreadClosure(OopClosure* f, CodeBlobClosure* cf, ThreadClosure* thread_cl) :\n+  ShenandoahParallelOopsDoThreadClosure(OopClosure* f, NMethodClosure* cf, ThreadClosure* thread_cl) :\n@@ -155,1 +155,1 @@\n-  MarkingCodeBlobClosure blobs_cl(oops, !CodeBlobToOopClosure::FixRelocations, true \/*FIXME*\/);\n+  MarkingNMethodClosure nmethods_cl(oops, !NMethodToOopClosure::FixRelocations, true \/*FIXME*\/);\n@@ -160,1 +160,1 @@\n-    _thread_roots.oops_do(oops, &blobs_cl, worker_id);\n+    _thread_roots.oops_do(oops, &nmethods_cl, worker_id);\n@@ -164,1 +164,1 @@\n-    _code_roots.code_blobs_do(&blobs_cl, worker_id);\n+    _code_roots.nmethods_do(&nmethods_cl, worker_id);\n@@ -173,5 +173,5 @@\n-  CodeBlobToOopClosure update_blobs(keep_alive, CodeBlobToOopClosure::FixRelocations);\n-  ShenandoahCodeBlobAndDisarmClosure blobs_and_disarm_Cl(keep_alive);\n-  CodeBlobToOopClosure* codes_cl = ShenandoahCodeRoots::use_nmethod_barriers_for_mark() ?\n-                                   static_cast<CodeBlobToOopClosure*>(&blobs_and_disarm_Cl) :\n-                                   static_cast<CodeBlobToOopClosure*>(&update_blobs);\n+  NMethodToOopClosure update_nmethods(keep_alive, NMethodToOopClosure::FixRelocations);\n+  ShenandoahNMethodAndDisarmClosure nmethods_and_disarm_Cl(keep_alive);\n+  NMethodToOopClosure* codes_cl = ShenandoahCodeRoots::use_nmethod_barriers_for_mark() ?\n+                                  static_cast<NMethodToOopClosure*>(&nmethods_and_disarm_Cl) :\n+                                  static_cast<NMethodToOopClosure*>(&update_nmethods);\n@@ -187,1 +187,1 @@\n-  _code_roots.code_blobs_do(codes_cl, worker_id);\n+  _code_roots.nmethods_do(codes_cl, worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-  CodeBlobToOopClosure blobs(oops, !CodeBlobToOopClosure::FixRelocations);\n-  CodeCache::blobs_do(&blobs);\n+  NMethodToOopClosure blobs(oops, !NMethodToOopClosure::FixRelocations);\n+  CodeCache::nmethods_do(&blobs);\n@@ -89,2 +89,2 @@\n-  CodeBlobToOopClosure blobs(oops, !CodeBlobToOopClosure::FixRelocations);\n-  Threads::possibly_parallel_oops_do(true, oops, &blobs);\n+  NMethodToOopClosure nmethods(oops, !NMethodToOopClosure::FixRelocations);\n+  Threads::possibly_parallel_oops_do(true, oops, &nmethods);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-ShenandoahOnStackCodeBlobClosure::ShenandoahOnStackCodeBlobClosure() :\n+ShenandoahOnStackNMethodClosure::ShenandoahOnStackNMethodClosure() :\n@@ -41,6 +41,4 @@\n-void ShenandoahOnStackCodeBlobClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* const nm = cb->as_nmethod_or_null();\n-  if (nm != nullptr) {\n-    const bool result = _bs_nm->nmethod_entry_barrier(nm);\n-    assert(result, \"NMethod on-stack must be alive\");\n-  }\n+void ShenandoahOnStackNMethodClosure::do_nmethod(nmethod* nm) {\n+  assert(nm != nullptr, \"Sanity\");\n+  const bool result = _bs_nm->nmethod_entry_barrier(nm);\n+  assert(result, \"NMethod on-stack must be alive\");\n@@ -68,1 +66,1 @@\n-  _cb_cl() {}\n+  _nm_cl() {}\n@@ -101,1 +99,1 @@\n-    _jt->oops_do_no_frames(closure_from_context(context), &_cb_cl);\n+    _jt->oops_do_no_frames(closure_from_context(context), &_nm_cl);\n@@ -111,1 +109,1 @@\n-    _jt->oops_do_no_frames(closure_from_context(context), &_cb_cl);\n+    _jt->oops_do_no_frames(closure_from_context(context), &_nm_cl);\n@@ -138,1 +136,1 @@\n-  fr.oops_do(oops, &_cb_cl, &register_map, DerivedPointerIterationMode::_directly);\n+  fr.oops_do(oops, &_nm_cl, &register_map, DerivedPointerIterationMode::_directly);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStackWatermark.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-class ShenandoahOnStackCodeBlobClosure : public CodeBlobClosure {\n+class ShenandoahOnStackNMethodClosure : public NMethodClosure {\n@@ -45,1 +45,1 @@\n-  void do_code_blob(CodeBlob* cb);\n+  void do_nmethod(nmethod* nm);\n@@ -47,1 +47,1 @@\n-  ShenandoahOnStackCodeBlobClosure();\n+  ShenandoahOnStackNMethodClosure();\n@@ -59,1 +59,1 @@\n-  ShenandoahOnStackCodeBlobClosure     _cb_cl;\n+  ShenandoahOnStackNMethodClosure      _nm_cl;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStackWatermark.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-                            true \/* lock_codeblob_free_separately *\/);\n+                            true \/* lock_nmethod_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-                            true \/* lock_codeblob_free_separately *\/);\n+                            true \/* lock_nmethod_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/x\/xHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,2 +306,2 @@\n-  OopClosure* const        _cl;\n-  CodeBlobToNMethodClosure _cb_cl;\n+  OopClosure* const     _cl;\n+  NMethodClosure* const _nm_cl;\n@@ -312,1 +312,1 @@\n-      _cb_cl(nm_cl) {}\n+      _nm_cl(nm_cl) {}\n@@ -315,1 +315,1 @@\n-    thread->oops_do(_cl, &_cb_cl);\n+    thread->oops_do(_cl, _nm_cl);\n","filename":"src\/hotspot\/share\/gc\/x\/xHeapIterator.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-XOnStackCodeBlobClosure::XOnStackCodeBlobClosure() :\n+XOnStackNMethodClosure::XOnStackNMethodClosure() :\n@@ -39,6 +39,3 @@\n-void XOnStackCodeBlobClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* const nm = cb->as_nmethod_or_null();\n-  if (nm != nullptr) {\n-    const bool result = _bs_nm->nmethod_entry_barrier(nm);\n-    assert(result, \"NMethod on-stack must be alive\");\n-  }\n+void XOnStackNMethodClosure::do_nmethod(nmethod* nm) {\n+  const bool result = _bs_nm->nmethod_entry_barrier(nm);\n+  assert(result, \"NMethod on-stack must be alive\");\n@@ -58,1 +55,1 @@\n-    _cb_cl(),\n+    _nm_cl(),\n@@ -75,1 +72,1 @@\n-  _jt->oops_do_no_frames(closure_from_context(context), &_cb_cl);\n+  _jt->oops_do_no_frames(closure_from_context(context), &_nm_cl);\n@@ -98,1 +95,1 @@\n-  fr.oops_do(closure_from_context(context), &_cb_cl, &register_map, DerivedPointerIterationMode::_directly);\n+  fr.oops_do(closure_from_context(context), &_nm_cl, &register_map, DerivedPointerIterationMode::_directly);\n","filename":"src\/hotspot\/share\/gc\/x\/xStackWatermark.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-class XOnStackCodeBlobClosure : public CodeBlobClosure {\n+class XOnStackNMethodClosure : public NMethodClosure {\n@@ -44,1 +44,1 @@\n-  virtual void do_code_blob(CodeBlob* cb);\n+  virtual void do_nmethod(nmethod* nm);\n@@ -47,1 +47,1 @@\n-  XOnStackCodeBlobClosure();\n+  XOnStackNMethodClosure();\n@@ -52,3 +52,3 @@\n-  XLoadBarrierOopClosure  _jt_cl;\n-  XOnStackCodeBlobClosure _cb_cl;\n-  ThreadLocalAllocStats   _stats;\n+  XLoadBarrierOopClosure _jt_cl;\n+  XOnStackNMethodClosure _nm_cl;\n+  ThreadLocalAllocStats  _stats;\n","filename":"src\/hotspot\/share\/gc\/x\/xStackWatermark.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -100,10 +100,0 @@\n-class XVerifyCodeBlobClosure : public CodeBlobToOopClosure {\n-public:\n-  XVerifyCodeBlobClosure(XVerifyRootClosure* _cl) :\n-      CodeBlobToOopClosure(_cl, false \/* fix_relocations *\/) {}\n-\n-  virtual void do_code_blob(CodeBlob* cb) {\n-    CodeBlobToOopClosure::do_code_blob(cb);\n-  }\n-};\n-\n@@ -169,1 +159,1 @@\n-    XVerifyCodeBlobClosure cb_cl(_cl);\n+    NMethodToOopClosure nm_cl(_cl, false \/* fix_relocations *\/);\n@@ -174,1 +164,1 @@\n-      frame.oops_do(this, &cb_cl, frames.register_map(), DerivedPointerIterationMode::_ignore);\n+      frame.oops_do(this, &nm_cl, frames.register_map(), DerivedPointerIterationMode::_ignore);\n","filename":"src\/hotspot\/share\/gc\/x\/xVerify.cpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1326,1 +1326,1 @@\n-                            true \/* lock_codeblob_free_separately *\/);\n+                            true \/* lock_nmethod_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -378,2 +378,2 @@\n-  OopClosure* const        _cl;\n-  CodeBlobToNMethodClosure _cb_cl;\n+  OopClosure* const     _cl;\n+  NMethodClosure* const _nm_cl;\n@@ -384,1 +384,1 @@\n-      _cb_cl(nm_cl) {}\n+      _nm_cl(nm_cl) {}\n@@ -387,1 +387,1 @@\n-    thread->oops_do(_cl, &_cb_cl);\n+    thread->oops_do(_cl, _nm_cl);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-ZOnStackCodeBlobClosure::ZOnStackCodeBlobClosure()\n+ZOnStackNMethodClosure::ZOnStackNMethodClosure()\n@@ -43,6 +43,4 @@\n-void ZOnStackCodeBlobClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* const nm = cb->as_nmethod_or_null();\n-  if (nm != nullptr) {\n-    const bool result = _bs_nm->nmethod_entry_barrier(nm);\n-    assert(result, \"NMethod on-stack must be alive\");\n-  }\n+void ZOnStackNMethodClosure::do_nmethod(nmethod* nm) {\n+  assert(nm != nullptr, \"Sanity\");\n+  const bool result = _bs_nm->nmethod_entry_barrier(nm);\n+  assert(result, \"NMethod on-stack must be alive\");\n@@ -169,1 +167,1 @@\n-  ZOnStackCodeBlobClosure cb_cl;\n+  ZOnStackNMethodClosure nm_cl;\n@@ -171,1 +169,1 @@\n-  _jt->oops_do_no_frames(&cl, &cb_cl);\n+  _jt->oops_do_no_frames(&cl, &nm_cl);\n@@ -212,1 +210,1 @@\n-  ZOnStackCodeBlobClosure cb_cl;\n+  ZOnStackNMethodClosure nm_cl;\n@@ -214,1 +212,1 @@\n-  fr.oops_do(&cl, &cb_cl, &register_map, DerivedPointerIterationMode::_directly);\n+  fr.oops_do(&cl, &nm_cl, &register_map, DerivedPointerIterationMode::_directly);\n","filename":"src\/hotspot\/share\/gc\/z\/zStackWatermark.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-class ZOnStackCodeBlobClosure : public CodeBlobClosure {\n+class ZOnStackNMethodClosure : public NMethodClosure {\n@@ -45,1 +45,1 @@\n-  virtual void do_code_blob(CodeBlob* cb);\n+  virtual void do_nmethod(nmethod* nm);\n@@ -48,1 +48,1 @@\n-  ZOnStackCodeBlobClosure();\n+  ZOnStackNMethodClosure();\n","filename":"src\/hotspot\/share\/gc\/z\/zStackWatermark.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -243,10 +243,0 @@\n-class ZVerifyCodeBlobClosure : public CodeBlobToOopClosure {\n-public:\n-  ZVerifyCodeBlobClosure(OopClosure* cl)\n-    : CodeBlobToOopClosure(cl, false \/* fix_relocations *\/) {}\n-\n-  virtual void do_code_blob(CodeBlob* cb) {\n-    CodeBlobToOopClosure::do_code_blob(cb);\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-void CodeBlobToOopClosure::do_nmethod(nmethod* nm) {\n+void NMethodToOopClosure::do_nmethod(nmethod* nm) {\n@@ -51,10 +51,3 @@\n-void CodeBlobToOopClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* nm = cb->as_nmethod_or_null();\n-  if (nm != nullptr) {\n-    do_nmethod(nm);\n-  }\n-}\n-\n-void MarkingCodeBlobClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* nm = cb->as_nmethod_or_null();\n-  if (nm != nullptr && nm->oops_do_try_claim()) {\n+void MarkingNMethodClosure::do_nmethod(nmethod* nm) {\n+  assert(nm != nullptr, \"Unexpected nullptr\");\n+  if (nm->oops_do_try_claim()) {\n@@ -79,7 +72,0 @@\n-\n-void CodeBlobToNMethodClosure::do_code_blob(CodeBlob* cb) {\n-  nmethod* nm = cb->as_nmethod_or_null();\n-  if (nm != nullptr) {\n-    _nm_cl->do_nmethod(nm);\n-  }\n-}\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-\/\/ CodeBlobClosure is used for iterating through code blobs\n+\/\/ NMethodClosure is used for iterating through nmethods\n@@ -238,1 +238,1 @@\n-class CodeBlobClosure : public Closure {\n+class NMethodClosure : public Closure {\n@@ -240,2 +240,1 @@\n-  \/\/ Called for each code blob.\n-  virtual void do_code_blob(CodeBlob* cb) = 0;\n+  virtual void do_nmethod(nmethod* n) = 0;\n@@ -244,1 +243,1 @@\n-\/\/ Applies an oop closure to all ref fields in code blobs\n+\/\/ Applies an oop closure to all ref fields in nmethods\n@@ -246,1 +245,1 @@\n-class CodeBlobToOopClosure : public CodeBlobClosure {\n+class NMethodToOopClosure : public NMethodClosure {\n@@ -250,1 +249,0 @@\n-  void do_nmethod(nmethod* nm);\n@@ -254,2 +252,2 @@\n-  CodeBlobToOopClosure(OopClosure* cl, bool fix_relocations) : _cl(cl), _fix_relocations(fix_relocations) {}\n-  virtual void do_code_blob(CodeBlob* cb);\n+  NMethodToOopClosure(OopClosure* cl, bool fix_relocations) : _cl(cl), _fix_relocations(fix_relocations) {}\n+  void do_nmethod(nmethod* nm) override;\n@@ -261,1 +259,1 @@\n-class MarkingCodeBlobClosure : public CodeBlobToOopClosure {\n+class MarkingNMethodClosure : public NMethodToOopClosure {\n@@ -265,2 +263,2 @@\n-  MarkingCodeBlobClosure(OopClosure* cl, bool fix_relocations, bool keepalive_nmethods) :\n-      CodeBlobToOopClosure(cl, fix_relocations),\n+  MarkingNMethodClosure(OopClosure* cl, bool fix_relocations, bool keepalive_nmethods) :\n+      NMethodToOopClosure(cl, fix_relocations),\n@@ -269,16 +267,2 @@\n-  \/\/ Called for each code blob, but at most once per unique blob.\n-  virtual void do_code_blob(CodeBlob* cb);\n-};\n-\n-class NMethodClosure : public Closure {\n- public:\n-  virtual void do_nmethod(nmethod* n) = 0;\n-};\n-\n-class CodeBlobToNMethodClosure : public CodeBlobClosure {\n-  NMethodClosure* const _nm_cl;\n-\n- public:\n-  CodeBlobToNMethodClosure(NMethodClosure* nm_cl) : _nm_cl(nm_cl) {}\n-\n-  virtual void do_code_blob(CodeBlob* cb);\n+  \/\/ Called for each nmethod.\n+  virtual void do_nmethod(nmethod* nm);\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":12,"deletions":28,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1017,1 +1017,1 @@\n-void JvmtiDeferredEvent::oops_do(OopClosure* f, CodeBlobClosure* cf) {\n+void JvmtiDeferredEvent::oops_do(OopClosure* f, NMethodClosure* cf) {\n@@ -1019,1 +1019,1 @@\n-    cf->do_code_blob(_event_data.compiled_method_load);\n+    cf->do_nmethod(_event_data.compiled_method_load);\n@@ -1025,1 +1025,1 @@\n-void JvmtiDeferredEvent::nmethods_do(CodeBlobClosure* cf) {\n+void JvmtiDeferredEvent::nmethods_do(NMethodClosure* cf) {\n@@ -1027,1 +1027,1 @@\n-    cf->do_code_blob(_event_data.compiled_method_load);\n+    cf->do_nmethod(_event_data.compiled_method_load);\n@@ -1095,1 +1095,1 @@\n-void JvmtiDeferredEventQueue::oops_do(OopClosure* f, CodeBlobClosure* cf) {\n+void JvmtiDeferredEventQueue::oops_do(OopClosure* f, NMethodClosure* cf) {\n@@ -1101,1 +1101,1 @@\n-void JvmtiDeferredEventQueue::nmethods_do(CodeBlobClosure* cf) {\n+void JvmtiDeferredEventQueue::nmethods_do(NMethodClosure* cf) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-  void nmethods_do(CodeBlobClosure* cf) NOT_JVMTI_RETURN;\n+  void nmethods_do(NMethodClosure* cf) NOT_JVMTI_RETURN;\n@@ -504,1 +504,1 @@\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf) NOT_JVMTI_RETURN;\n+  void oops_do(OopClosure* f, NMethodClosure* cf) NOT_JVMTI_RETURN;\n@@ -545,1 +545,1 @@\n-  void nmethods_do(CodeBlobClosure* cf) NOT_JVMTI_RETURN;\n+  void nmethods_do(NMethodClosure* cf) NOT_JVMTI_RETURN;\n@@ -547,1 +547,1 @@\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf) NOT_JVMTI_RETURN;\n+  void oops_do(OopClosure* f, NMethodClosure* cf) NOT_JVMTI_RETURN;\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -987,1 +987,1 @@\n-void JvmtiThreadState::oops_do(OopClosure* f, CodeBlobClosure* cf) {\n+void JvmtiThreadState::oops_do(OopClosure* f, NMethodClosure* cf) {\n@@ -996,1 +996,1 @@\n-void JvmtiThreadState::nmethods_do(CodeBlobClosure* cf) {\n+void JvmtiThreadState::nmethods_do(NMethodClosure* cf) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -528,2 +528,2 @@\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf) NOT_JVMTI_RETURN; \/\/ GC support\n-  void nmethods_do(CodeBlobClosure* cf) NOT_JVMTI_RETURN;\n+  void oops_do(OopClosure* f, NMethodClosure* cf) NOT_JVMTI_RETURN; \/\/ GC support\n+  void nmethods_do(NMethodClosure* cf) NOT_JVMTI_RETURN;\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2537,1 +2537,1 @@\n-  CodeBlobToOopClosure cf(&cl, false);\n+  NMethodToOopClosure cf(&cl, false);\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -965,1 +965,1 @@\n-void frame::oops_code_blob_do(OopClosure* f, CodeBlobClosure* cf, DerivedOopClosure* df, DerivedPointerIterationMode derived_mode, const RegisterMap* reg_map) const {\n+void frame::oops_nmethod_do(OopClosure* f, NMethodClosure* cf, DerivedOopClosure* df, DerivedPointerIterationMode derived_mode, const RegisterMap* reg_map) const {\n@@ -986,2 +986,2 @@\n-  if (cf != nullptr)\n-    cf->do_code_blob(_cb);\n+  if (cf != nullptr && _cb->is_nmethod())\n+    cf->do_nmethod(_cb->as_nmethod());\n@@ -1134,1 +1134,1 @@\n-void frame::oops_do_internal(OopClosure* f, CodeBlobClosure* cf,\n+void frame::oops_do_internal(OopClosure* f, NMethodClosure* cf,\n@@ -1151,1 +1151,1 @@\n-    oops_code_blob_do(f, cf, df, derived_mode, map);\n+    oops_nmethod_do(f, cf, df, derived_mode, map);\n@@ -1157,1 +1157,1 @@\n-void frame::nmethods_do(CodeBlobClosure* cf) const {\n+void frame::nmethod_do(NMethodClosure* cf) const {\n@@ -1159,1 +1159,1 @@\n-    cf->do_code_blob(_cb);\n+    cf->do_nmethod(_cb->as_nmethod());\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-  void oops_do_internal(OopClosure* f, CodeBlobClosure* cf,\n+  void oops_do_internal(OopClosure* f, NMethodClosure* cf,\n@@ -458,3 +458,3 @@\n-  void oops_code_blob_do(OopClosure* f, CodeBlobClosure* cf,\n-                         DerivedOopClosure* df, DerivedPointerIterationMode derived_mode,\n-                         const RegisterMap* map) const;\n+  void oops_nmethod_do(OopClosure* f, NMethodClosure* cf,\n+                       DerivedOopClosure* df, DerivedPointerIterationMode derived_mode,\n+                       const RegisterMap* map) const;\n@@ -463,1 +463,1 @@\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf, const RegisterMap* map) {\n+  void oops_do(OopClosure* f, NMethodClosure* cf, const RegisterMap* map) {\n@@ -474,1 +474,1 @@\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf, DerivedOopClosure* df, const RegisterMap* map) {\n+  void oops_do(OopClosure* f, NMethodClosure* cf, DerivedOopClosure* df, const RegisterMap* map) {\n@@ -478,1 +478,1 @@\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf, const RegisterMap* map,\n+  void oops_do(OopClosure* f, NMethodClosure* cf, const RegisterMap* map,\n@@ -483,1 +483,1 @@\n-  void nmethods_do(CodeBlobClosure* cf) const;\n+  void nmethod_do(NMethodClosure* cf) const;\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1384,1 +1384,1 @@\n-void JavaThread::oops_do_no_frames(OopClosure* f, CodeBlobClosure* cf) {\n+void JavaThread::oops_do_no_frames(OopClosure* f, NMethodClosure* cf) {\n@@ -1442,1 +1442,1 @@\n-void JavaThread::oops_do_frames(OopClosure* f, CodeBlobClosure* cf) {\n+void JavaThread::oops_do_frames(OopClosure* f, NMethodClosure* cf) {\n@@ -1461,1 +1461,1 @@\n-void JavaThread::nmethods_do(CodeBlobClosure* cf) {\n+void JavaThread::nmethods_do(NMethodClosure* cf) {\n@@ -1468,1 +1468,1 @@\n-      fst.current()->nmethods_do(cf);\n+      fst.current()->nmethod_do(cf);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -894,2 +894,2 @@\n-  void oops_do_frames(OopClosure* f, CodeBlobClosure* cf);\n-  void oops_do_no_frames(OopClosure* f, CodeBlobClosure* cf);\n+  void oops_do_frames(OopClosure* f, NMethodClosure* cf);\n+  void oops_do_no_frames(OopClosure* f, NMethodClosure* cf);\n@@ -898,1 +898,1 @@\n-  virtual void nmethods_do(CodeBlobClosure* cf);\n+  virtual void nmethods_do(NMethodClosure* cf);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-void ServiceThread::oops_do_no_frames(OopClosure* f, CodeBlobClosure* cf) {\n+void ServiceThread::oops_do_no_frames(OopClosure* f, NMethodClosure* cf) {\n@@ -223,1 +223,1 @@\n-void ServiceThread::nmethods_do(CodeBlobClosure* cf) {\n+void ServiceThread::nmethods_do(NMethodClosure* cf) {\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  void oops_do_no_frames(OopClosure* f, CodeBlobClosure* cf);\n-  void nmethods_do(CodeBlobClosure* cf);\n+  void oops_do_no_frames(OopClosure* f, NMethodClosure* cf);\n+  void nmethods_do(NMethodClosure* cf);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-void Thread::oops_do_no_frames(OopClosure* f, CodeBlobClosure* cf) {\n+void Thread::oops_do_no_frames(OopClosure* f, NMethodClosure* cf) {\n@@ -432,1 +432,1 @@\n-void Thread::oops_do(OopClosure* f, CodeBlobClosure* cf) {\n+void Thread::oops_do(OopClosure* f, NMethodClosure* cf) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+class NMethodClosure;\n@@ -52,0 +53,1 @@\n+class OopClosure;\n@@ -61,2 +63,0 @@\n-class OopClosure;\n-class CodeBlobClosure;\n@@ -446,4 +446,4 @@\n-  \/\/ Apply \"cf->do_code_blob\" (if !nullptr) to all code blobs active in frames\n-  virtual void oops_do_no_frames(OopClosure* f, CodeBlobClosure* cf);\n-  virtual void oops_do_frames(OopClosure* f, CodeBlobClosure* cf) {}\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf);\n+  \/\/ Apply \"cf->do_nmethod\" (if !nullptr) to all nmethods active in frames\n+  virtual void oops_do_no_frames(OopClosure* f, NMethodClosure* cf);\n+  virtual void oops_do_frames(OopClosure* f, NMethodClosure* cf) {}\n+  void oops_do(OopClosure* f, NMethodClosure* cf);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1094,1 +1094,1 @@\n-void Threads::oops_do(OopClosure* f, CodeBlobClosure* cf) {\n+void Threads::oops_do(OopClosure* f, NMethodClosure* cf) {\n@@ -1151,1 +1151,1 @@\n-  CodeBlobClosure* _cf;\n+  NMethodClosure* _cf;\n@@ -1153,1 +1153,1 @@\n-  ParallelOopsDoThreadClosure(OopClosure* f, CodeBlobClosure* cf) : _f(f), _cf(cf) {}\n+  ParallelOopsDoThreadClosure(OopClosure* f, NMethodClosure* cf) : _f(f), _cf(cf) {}\n@@ -1159,1 +1159,1 @@\n-void Threads::possibly_parallel_oops_do(bool is_par, OopClosure* f, CodeBlobClosure* cf) {\n+void Threads::possibly_parallel_oops_do(bool is_par, OopClosure* f, NMethodClosure* cf) {\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+class MetadataClosure;\n+class OopClosure;\n@@ -41,4 +43,0 @@\n-class CodeBlobClosure;\n-class MetadataClosure;\n-class OopClosure;\n-\n@@ -109,1 +107,1 @@\n-  static void oops_do(OopClosure* f, CodeBlobClosure* cf);\n+  static void oops_do(OopClosure* f, NMethodClosure* cf);\n@@ -111,1 +109,1 @@\n-  static void possibly_parallel_oops_do(bool is_par, OopClosure* f, CodeBlobClosure* cf);\n+  static void possibly_parallel_oops_do(bool is_par, OopClosure* f, NMethodClosure* cf);\n","filename":"src\/hotspot\/share\/runtime\/threads.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}