{"files":[{"patch":"@@ -5040,1 +5040,1 @@\n-    public boolean checkUnconditionallyExact(Type source, Type target) {\n+    public boolean isUnconditionallyExact(Type source, Type target) {\n@@ -5046,1 +5046,1 @@\n-                ? checkUnconditionallyExactPrimitives(source, target)\n+                ? isUnconditionallyExactPrimitives(source, target)\n@@ -5060,1 +5060,1 @@\n-    public boolean checkUnconditionallyExactPrimitives(Type selectorType, Type targetType) {\n+    public boolean isUnconditionallyExactPrimitives(Type selectorType, Type targetType) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1799,1 +1799,1 @@\n-                            log.error(label.pos(), Errors.UnconditionalPatternAndDefault); \/\/ TODO improve error\n+                            log.error(label.pos(), Errors.DefaultAndBothBooleanValues);\n@@ -1837,1 +1837,1 @@\n-                                types.checkUnconditionallyExact(seltype, patternType);\n+                                types.isUnconditionallyExact(seltype, patternType);\n@@ -1844,1 +1844,1 @@\n-                                log.error(pat.pos(), Errors.UnconditionalPatternAndDefault); \/\/ TODO improve error\n+                                log.error(pat.pos(), Errors.UnconditionalPatternAndBothBooleanValues);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4839,1 +4839,1 @@\n-                    if (types.checkUnconditionallyExact(currentType, testType) &&\n+                    if (types.isUnconditionallyExact(currentType, testType) &&\n@@ -4877,1 +4877,1 @@\n-            if (!types.checkUnconditionallyExact(currentPatternType, existingPatternType)) {\n+            if (!types.isUnconditionallyExact(currentPatternType, existingPatternType)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1308,1 +1308,1 @@\n-                if (types.checkUnconditionallyExact(seltype, bp.type)) {\n+                if (types.isUnconditionallyExact(seltype, bp.type)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2983,1 +2983,1 @@\n-            if (types.checkUnconditionallyExact(tree.expr.type, tree.pattern.type)) {\n+            if (types.isUnconditionallyExact(tree.expr.type, tree.pattern.type)) {\n@@ -2992,1 +2992,1 @@\n-                if (types.checkUnconditionallyExactPrimitives(types.unboxedType(tree.expr.type), tree.pattern.type)) {\n+                if (types.isUnconditionallyExact(types.unboxedType(tree.expr.type), tree.pattern.type)) {\n@@ -3079,3 +3079,1 @@\n-        Symbol ecsym = rs.resolveQualifiedMethod(null,\n-                attrEnv,\n-                syms.exactConversionsSupportType,\n+        Symbol ecsym = lookupMethod(tree.pos(),\n@@ -3083,2 +3081,2 @@\n-                List.of(pair.from.type),\n-                List.nil());\n+                syms.exactConversionsSupportType,\n+                List.of(pair.from.type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -904,1 +904,1 @@\n-                                types.checkUnconditionallyExact(commonNestedExpression.type, types.erasure(binding.type))) &&\n+                                types.isUnconditionallyExact(commonNestedExpression.type, types.erasure(binding.type))) &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -552,0 +552,6 @@\n+compiler.err.unconditional.pattern.and.both.boolean.values=\\\n+    switch has both boolean values and an unconditional pattern\n+\n+compiler.err.default.and.both.boolean.values=\\\n+    switch has both boolean values and a default label\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.default.and.both.boolean.values\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --source 23\n+public class DefaultAndBothBoolean {\n+    private int test(boolean sel) {\n+        return switch (sel) {\n+            case true -> 1;\n+            case false -> 2;\n+            default -> 3;\n+        };\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/DefaultAndBothBoolean.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.preview.feature.disabled.plural\n-\/\/ key: compiler.misc.feature.primitive.patterns\n-\n-class NotApplicableTypes {\n-    void t(int i) {\n-        switch (i) {\n-            case Integer j -> {}\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NotApplicableTypes.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.preview.feature.disabled.plural\n-\/\/ key: compiler.misc.feature.primitive.patterns\n-\n-public class SelectorTypeNotAllowed {\n-    private void noLong(long sel) {\n-        switch (sel) {\n-            default -> {}\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SelectorTypeNotAllowed.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.unconditional.pattern.and.both.boolean.values\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --source 23\n+public class UnconditionalPatternAndBothBoolean {\n+    private int test(boolean sel) {\n+        return switch (sel) {\n+            case true -> 1;\n+            case false -> 2;\n+            case boolean b -> 3;\n+        };\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnconditionalPatternAndBothBoolean.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -11,3 +11,3 @@\n-PrimitivePatternsSwitchErrors.java:114:13: compiler.err.unconditional.pattern.and.default\n-PrimitivePatternsSwitchErrors.java:122:13: compiler.err.unconditional.pattern.and.default\n-PrimitivePatternsSwitchErrors.java:130:18: compiler.err.unconditional.pattern.and.default\n+PrimitivePatternsSwitchErrors.java:114:13: compiler.err.default.and.both.boolean.values\n+PrimitivePatternsSwitchErrors.java:122:13: compiler.err.default.and.both.boolean.values\n+PrimitivePatternsSwitchErrors.java:130:18: compiler.err.unconditional.pattern.and.both.boolean.values\n@@ -26,1 +26,1 @@\n-PrimitivePatternsSwitchErrors.java:189:18: compiler.err.unconditional.pattern.and.default\n+PrimitivePatternsSwitchErrors.java:189:18: compiler.err.unconditional.pattern.and.both.boolean.values\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchErrors.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}