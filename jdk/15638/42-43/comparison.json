{"files":[{"patch":"@@ -29,7 +29,22 @@\n- * of information or throwing an exception. Otherwise, it is inexact. The\n- * methods in this class provide the run-time support for the exactness checks\n- * of testing conversions from a primitive type to primitive type. These methods\n- * may be used, for example, by Java compiler implementations to implement\n- * checks for {@code instanceof} and pattern matching runtime implementations.\n- * Unconditionally exact testing conversions do not require a corresponding\n- * action at run time.\n+ * of information or throwing an exception. Otherwise, it is inexact. Some\n+ * conversions are always exact regardless of the value. These conversions are\n+ * said to be unconditionally exact.\n+ * <p>\n+ * For example, a conversion from {@code int} to {@code byte} for the value 10\n+ * is exact because the result, 10, is the same as the original value. In\n+ * contrast, if the {@code int} variable {@code i} stores the value 1000 then a\n+ * narrowing primitive conversion to {@code byte} will yield the result -24.\n+ * Loss of information has occurred: both the magnitude and the sign of the\n+ * result are different than those of the original value. As such, a conversion\n+ * from {@code int} to {@code byte} for the value 1000 is inexact. Finally a\n+ * widening primitive conversion from {@code byte} to {@code int} is\n+ * unconditionally exact because it will always succeed with no loss of\n+ * information about the magnitude of the numeric value.\n+ * <p>\n+ * The methods in this class provide the run-time support for the exactness\n+ * checks of testing conversions from a primitive type to primitive type. These\n+ * methods may be used, for example, by Java compiler implementations to\n+ * implement checks for {@code instanceof} and pattern matching runtime\n+ * implementations. Unconditionally exact testing conversions do not require a\n+ * corresponding action at run time and, for this reason, methods corresponding\n+ * to these exactness checks are omitted here.\n@@ -56,11 +71,8 @@\n- * @implNote Some exactness checks describe a test which\n- * can be redirected safely through one of the existing methods.\n- * Those are omitted too\n- * (i.e., {@code byte} to {@code char} can be redirected  to\n- * {@link ExactConversionsSupport#isIntToCharExact(int)},\n- * {@code short} to {@code byte} can be redirected to\n- * {@link ExactConversionsSupport#isIntToByteExact(int)}\n- * and similarly for\n- * {@code short} to {@code char},\n- * {@code char} to {@code byte} and\n- * {@code char} to {@code short} to the corresponding methods that take an {@code int}).\n+ * @implNote Some exactness checks describe a test which can be redirected\n+ * safely through one of the existing methods. Those are omitted too (i.e.,\n+ * {@code byte} to {@code char} can be redirected  to\n+ * {@link ExactConversionsSupport#isIntToCharExact(int)}, {@code short} to\n+ * {@code byte} can be redirected to\n+ * {@link ExactConversionsSupport#isIntToByteExact(int)} and similarly for\n+ * {@code short} to {@code char}, {@code char} to {@code byte} and {@code char}\n+ * to {@code short} to the corresponding methods that take an {@code int}).\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ExactConversionsSupport.java","additions":30,"deletions":18,"binary":false,"changes":48,"status":"modified"}]}