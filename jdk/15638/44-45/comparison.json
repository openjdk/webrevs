{"files":[{"patch":"@@ -5,1 +5,2 @@\n- * @compile\/fail\/ref=PrimitiveInstanceOfErrors.out --enable-preview -source ${jdk.version} -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitiveInstanceOfErrors.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=PrimitiveInstanceOfErrors.out -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitiveInstanceOfErrors.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfErrors.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,5 +1,5 @@\n-PrimitiveInstanceOfErrors.java:12:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Long, int)\n-PrimitiveInstanceOfErrors.java:12:55: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Long, int)\n-PrimitiveInstanceOfErrors.java:16:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: T, byte)\n-PrimitiveInstanceOfErrors.java:23:24: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.Double)\n-PrimitiveInstanceOfErrors.java:24:24: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.Short)\n+PrimitiveInstanceOfErrors.java:13:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Long, int)\n+PrimitiveInstanceOfErrors.java:13:55: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Long, int)\n+PrimitiveInstanceOfErrors.java:17:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: T, byte)\n+PrimitiveInstanceOfErrors.java:24:24: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.Double)\n+PrimitiveInstanceOfErrors.java:25:24: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.Short)\n@@ -8,1 +8,1 @@\n-5 errors\n+5 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfErrors.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @compile -g --enable-preview -source ${jdk.version} PrimitiveInstanceOfNumericValueTests.java\n- * @run main\/othervm --enable-preview PrimitiveInstanceOfNumericValueTests\n+ * @enablePreview\n+ * @compile PrimitiveInstanceOfNumericValueTests.java\n+ * @run main\/othervm PrimitiveInstanceOfNumericValueTests\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfNumericValueTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @compile -g --enable-preview -source ${jdk.version} PrimitiveInstanceOfPatternOpWithRecordPatterns.java\n- * @run main\/othervm --enable-preview PrimitiveInstanceOfPatternOpWithRecordPatterns\n+ * @enablePreview\n+ * @compile PrimitiveInstanceOfPatternOpWithRecordPatterns.java\n+ * @run main\/othervm PrimitiveInstanceOfPatternOpWithRecordPatterns\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfPatternOpWithRecordPatterns.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @compile -g --enable-preview -source ${jdk.version} PrimitiveInstanceOfTypeComparisonOp.java\n- * @run main\/othervm --enable-preview PrimitiveInstanceOfTypeComparisonOp\n+ * @enablePreview\n+ * @compile PrimitiveInstanceOfTypeComparisonOp.java\n+ * @run main\/othervm PrimitiveInstanceOfTypeComparisonOp\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfTypeComparisonOp.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,1 +5,2 @@\n- * @compile\/fail\/ref=PrimitivePatternsSwitchErrors.out --enable-preview -source ${jdk.version} -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitivePatternsSwitchErrors.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=PrimitivePatternsSwitchErrors.out -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitivePatternsSwitchErrors.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchErrors.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,34 +1,34 @@\n-PrimitivePatternsSwitchErrors.java:14:18: compiler.err.pattern.dominated\n-PrimitivePatternsSwitchErrors.java:23:18: compiler.err.pattern.dominated\n-PrimitivePatternsSwitchErrors.java:30:24: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.Long)\n-PrimitivePatternsSwitchErrors.java:61:18: compiler.err.pattern.dominated\n-PrimitivePatternsSwitchErrors.java:69:18: compiler.err.pattern.dominated\n-PrimitivePatternsSwitchErrors.java:77:18: compiler.err.pattern.dominated\n-PrimitivePatternsSwitchErrors.java:83:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: long, byte)\n-PrimitivePatternsSwitchErrors.java:89:18: compiler.err.constant.label.not.compatible: int, float\n-PrimitivePatternsSwitchErrors.java:91:18: compiler.err.constant.label.not.compatible: int, float\n-PrimitivePatternsSwitchErrors.java:102:13: compiler.err.duplicate.case.label\n-PrimitivePatternsSwitchErrors.java:113:13: compiler.err.unconditional.pattern.and.default\n-PrimitivePatternsSwitchErrors.java:121:13: compiler.err.unconditional.pattern.and.default\n-PrimitivePatternsSwitchErrors.java:129:18: compiler.err.unconditional.pattern.and.default\n-PrimitivePatternsSwitchErrors.java:142:18: compiler.err.constant.label.not.compatible: long, float\n-PrimitivePatternsSwitchErrors.java:144:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: double, float)\n-PrimitivePatternsSwitchErrors.java:150:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: float, long)\n-PrimitivePatternsSwitchErrors.java:151:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: double, long)\n-PrimitivePatternsSwitchErrors.java:156:18: compiler.err.constant.label.not.compatible: long, double\n-PrimitivePatternsSwitchErrors.java:157:18: compiler.err.constant.label.not.compatible: float, double\n-PrimitivePatternsSwitchErrors.java:163:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: long, java.lang.Float)\n-PrimitivePatternsSwitchErrors.java:165:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: double, java.lang.Float)\n-PrimitivePatternsSwitchErrors.java:171:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: float, java.lang.Long)\n-PrimitivePatternsSwitchErrors.java:172:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: double, java.lang.Long)\n-PrimitivePatternsSwitchErrors.java:177:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: long, java.lang.Double)\n-PrimitivePatternsSwitchErrors.java:178:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: float, java.lang.Double)\n-PrimitivePatternsSwitchErrors.java:188:18: compiler.err.unconditional.pattern.and.default\n-PrimitivePatternsSwitchErrors.java:195:18: compiler.err.duplicate.unconditional.pattern\n-PrimitivePatternsSwitchErrors.java:215:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, int)\n-PrimitivePatternsSwitchErrors.java:29:16: compiler.err.not.exhaustive\n-PrimitivePatternsSwitchErrors.java:36:16: compiler.err.not.exhaustive\n-PrimitivePatternsSwitchErrors.java:43:16: compiler.err.not.exhaustive\n-PrimitivePatternsSwitchErrors.java:51:16: compiler.err.not.exhaustive\n-PrimitivePatternsSwitchErrors.java:200:16: compiler.err.not.exhaustive\n-PrimitivePatternsSwitchErrors.java:206:9: compiler.err.not.exhaustive.statement\n+PrimitivePatternsSwitchErrors.java:15:18: compiler.err.pattern.dominated\n+PrimitivePatternsSwitchErrors.java:24:18: compiler.err.pattern.dominated\n+PrimitivePatternsSwitchErrors.java:31:24: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.Long)\n+PrimitivePatternsSwitchErrors.java:62:18: compiler.err.pattern.dominated\n+PrimitivePatternsSwitchErrors.java:70:18: compiler.err.pattern.dominated\n+PrimitivePatternsSwitchErrors.java:78:18: compiler.err.pattern.dominated\n+PrimitivePatternsSwitchErrors.java:84:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: long, byte)\n+PrimitivePatternsSwitchErrors.java:90:18: compiler.err.constant.label.not.compatible: int, float\n+PrimitivePatternsSwitchErrors.java:92:18: compiler.err.constant.label.not.compatible: int, float\n+PrimitivePatternsSwitchErrors.java:103:13: compiler.err.duplicate.case.label\n+PrimitivePatternsSwitchErrors.java:114:13: compiler.err.unconditional.pattern.and.default\n+PrimitivePatternsSwitchErrors.java:122:13: compiler.err.unconditional.pattern.and.default\n+PrimitivePatternsSwitchErrors.java:130:18: compiler.err.unconditional.pattern.and.default\n+PrimitivePatternsSwitchErrors.java:143:18: compiler.err.constant.label.not.compatible: long, float\n+PrimitivePatternsSwitchErrors.java:145:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: double, float)\n+PrimitivePatternsSwitchErrors.java:151:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: float, long)\n+PrimitivePatternsSwitchErrors.java:152:18: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: double, long)\n+PrimitivePatternsSwitchErrors.java:157:18: compiler.err.constant.label.not.compatible: long, double\n+PrimitivePatternsSwitchErrors.java:158:18: compiler.err.constant.label.not.compatible: float, double\n+PrimitivePatternsSwitchErrors.java:164:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: long, java.lang.Float)\n+PrimitivePatternsSwitchErrors.java:166:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: double, java.lang.Float)\n+PrimitivePatternsSwitchErrors.java:172:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: float, java.lang.Long)\n+PrimitivePatternsSwitchErrors.java:173:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: double, java.lang.Long)\n+PrimitivePatternsSwitchErrors.java:178:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: long, java.lang.Double)\n+PrimitivePatternsSwitchErrors.java:179:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: float, java.lang.Double)\n+PrimitivePatternsSwitchErrors.java:189:18: compiler.err.unconditional.pattern.and.default\n+PrimitivePatternsSwitchErrors.java:196:18: compiler.err.duplicate.unconditional.pattern\n+PrimitivePatternsSwitchErrors.java:216:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, int)\n+PrimitivePatternsSwitchErrors.java:30:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:37:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:44:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:52:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:201:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:207:9: compiler.err.not.exhaustive.statement\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchErrors.out","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"}]}