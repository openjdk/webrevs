{"files":[{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.io.Serializable;\n+import java.lang.Enum.EnumDesc;\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.runtime.ExactConversionsSupport;\n+import java.lang.runtime.SwitchBootstraps;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.testng.Assert.*;\n+\n+\/**\n+ * @test\n+ * @bug 8304487\n+ * @summary Compiler Implementation for Primitive types in patterns, instanceof, and switch (Preview)\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile\n+ * @compile ExactnessConversionsSupportTest.java\n+ * @run testng\/othervm ExactnessConversionsSupportTest\n+ *\/\n+@Test\n+public class ExactnessConversionsSupportTest {\n+\n+    public static void main(String[] args) {\n+        testByte();\n+        testShort();\n+        testChar();\n+        testInt();\n+        testLong();\n+        testFloat();\n+        testDouble();\n+    }\n+\n+    public static void testByte() {\n+        assertEquals(true,  ExactConversionsSupport.isIntToByteExact((byte) (Byte.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToByteExact((byte) (0)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToByteExact((byte) (Byte.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isIntToByteExact((short) (Short.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToByteExact((short) (0)));\n+        assertEquals(false, ExactConversionsSupport.isIntToByteExact((short) (Short.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isIntToByteExact((char) (Character.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToByteExact((char) (Character.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isIntToByteExact(Integer.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isIntToByteExact(0));\n+        assertEquals(false, ExactConversionsSupport.isIntToByteExact(Integer.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isLongToByteExact(Long.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isLongToByteExact(0L));\n+        assertEquals(false, ExactConversionsSupport.isLongToByteExact(Long.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isFloatToByteExact(Float.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToByteExact((float) 0));\n+        assertEquals(false, ExactConversionsSupport.isFloatToByteExact(Float.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isFloatToByteExact(Float.NaN));\n+        assertEquals(false, ExactConversionsSupport.isFloatToByteExact(Float.POSITIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isFloatToByteExact(Float.NEGATIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isFloatToByteExact(-0.0f));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToByteExact(+0.0f));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToByteExact(Double.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToByteExact(0d));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToByteExact(Double.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToByteExact(Double.NaN));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToByteExact(Double.POSITIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToByteExact(Double.NEGATIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToByteExact(-0.0d));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToByteExact(+0.0d));\n+    }\n+    public static void testShort() {\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((byte) (Byte.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((byte) (0)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((byte) (Byte.MIN_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((short) (Short.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((short) (0)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((short) (Short.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isIntToShortExact((char) (Character.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((char) (Character.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isIntToShortExact((Integer.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToShortExact((0)));\n+        assertEquals(false, ExactConversionsSupport.isIntToShortExact((Integer.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isLongToShortExact(Long.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isLongToShortExact(0L));\n+        assertEquals(false, ExactConversionsSupport.isLongToShortExact(Long.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isFloatToShortExact(Float.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToShortExact(0f));\n+        assertEquals(false, ExactConversionsSupport.isFloatToShortExact(Float.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isFloatToShortExact(Float.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isFloatToShortExact(Float.NaN));\n+        assertEquals(false, ExactConversionsSupport.isFloatToShortExact(Float.POSITIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isFloatToShortExact(Float.NEGATIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isFloatToShortExact(-0.0f));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToShortExact(+0.0f));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToShortExact(Double.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToShortExact((double) 0));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToShortExact(Double.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToShortExact(Double.NaN));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToShortExact(Double.POSITIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToShortExact(Double.NEGATIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToShortExact(-0.0d));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToShortExact(+0.0d));\n+    }\n+    public static void testChar() {\n+        assertEquals(true,  ExactConversionsSupport.isIntToCharExact((byte) (Byte.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToCharExact((byte) (0)));\n+        assertEquals(false, ExactConversionsSupport.isIntToCharExact((byte) (Byte.MIN_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToCharExact((short) (Short.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToCharExact((short) (0)));\n+        assertEquals(false, ExactConversionsSupport.isIntToCharExact((short) (Short.MIN_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToCharExact((char) (Character.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToCharExact((char) (Character.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isIntToCharExact (Integer.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isIntToCharExact(0));\n+        assertEquals(false, ExactConversionsSupport.isIntToCharExact(Integer.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isLongToCharExact(Long.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isLongToCharExact(0l));\n+        assertEquals(false, ExactConversionsSupport.isLongToCharExact(Long.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isFloatToCharExact(Float.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToCharExact((float) 0));\n+        assertEquals(false, ExactConversionsSupport.isFloatToCharExact(Float.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isFloatToCharExact(Float.NaN));\n+        assertEquals(false, ExactConversionsSupport.isFloatToCharExact(Float.POSITIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isFloatToCharExact(Float.NEGATIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isFloatToCharExact(-0.0f));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToCharExact(+0.0f));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToCharExact(Double.MAX_VALUE));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToCharExact((double) 0));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToCharExact(Double.MIN_VALUE));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToCharExact(Double.NaN));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToCharExact(Double.POSITIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToCharExact(Double.NEGATIVE_INFINITY));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToCharExact(-0.0d));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToCharExact(+0.0d));\n+    }\n+    public static void testInt() {\n+        assertEquals(false, ExactConversionsSupport.isLongToIntExact((Long.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isLongToIntExact((0L)));\n+        assertEquals(false, ExactConversionsSupport.isLongToIntExact((Long.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToIntExact((Float.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToIntExact(((float) 0)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToIntExact((Float.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToIntExact((Float.NaN)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToIntExact((Float.POSITIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToIntExact((Float.NEGATIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToIntExact((-0.0f)));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToIntExact((+0.0f)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToIntExact((Double.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToIntExact(((double) 0)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToIntExact((Double.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToIntExact((Double.NaN)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToIntExact((Double.POSITIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToIntExact((Double.NEGATIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToIntExact((-0.0d)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToIntExact((+0.0d)));\n+    }\n+    public static void testLong() {\n+        assertEquals(false, ExactConversionsSupport.isFloatToLongExact((Float.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToLongExact(((float) 0)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToLongExact((Float.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToLongExact((Float.NaN)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToLongExact((Float.POSITIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToLongExact((Float.NEGATIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isFloatToLongExact((-0.0f)));\n+        assertEquals(true,  ExactConversionsSupport.isFloatToLongExact((+0.0f)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToLongExact((Double.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToLongExact(((double) 0)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToLongExact((Double.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToLongExact((Double.NaN)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToLongExact((Double.POSITIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToLongExact((Double.NEGATIVE_INFINITY)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToLongExact((-0.0d)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToLongExact((+0.0d)));\n+    }\n+    public static void testFloat() {\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((byte) (Byte.MAX_VALUE))));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((byte) (0))));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((byte) (Byte.MIN_VALUE))));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((short) (Short.MAX_VALUE))));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((short) (0))));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((short) (Short.MIN_VALUE))));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((char) (Character.MAX_VALUE))));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact(((char) (Character.MIN_VALUE))));\n+        assertEquals(false, ExactConversionsSupport.isIntToFloatExact( (Integer.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact((0)));\n+        assertEquals(true,  ExactConversionsSupport.isIntToFloatExact((Integer.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isLongToFloatExact((Long.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isLongToFloatExact((0l)));\n+        assertEquals(true,  ExactConversionsSupport.isLongToFloatExact((Long.MIN_VALUE)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToFloatExact((Double.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToFloatExact(((double) 0)));\n+        assertEquals(false, ExactConversionsSupport.isDoubleToFloatExact((Double.MIN_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToFloatExact((Double.NaN)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToFloatExact((Double.POSITIVE_INFINITY)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToFloatExact((Double.NEGATIVE_INFINITY)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToFloatExact((-0.0d)));\n+        assertEquals(true,  ExactConversionsSupport.isDoubleToFloatExact((+0.0d)));\n+    }\n+    public static void testDouble() {\n+        assertEquals(false, ExactConversionsSupport.isLongToDoubleExact((Long.MAX_VALUE)));\n+        assertEquals(true,  ExactConversionsSupport.isLongToDoubleExact((0L)));\n+        assertEquals(true,  ExactConversionsSupport.isLongToDoubleExact((Long.MIN_VALUE)));\n+    }\n+\n+    static void assertEquals(boolean expected, boolean actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected: \" + expected + \", actual: \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/runtime\/ExactnessConversionsSupportTest.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"},{"patch":"@@ -57,1 +57,1 @@\n-        assertEquals(true,  (0) instanceof byte);\n+        assertEquals(true,  (0L) instanceof byte);\n@@ -89,1 +89,1 @@\n-        assertEquals(true, (0) instanceof short);\n+        assertEquals(true, (0L) instanceof short);\n@@ -122,1 +122,1 @@\n-        assertEquals(true, (0) instanceof char);\n+        assertEquals(true, (0L) instanceof char);\n@@ -154,1 +154,1 @@\n-        assertEquals(true, (0) instanceof int);\n+        assertEquals(true, (0L) instanceof int);\n@@ -183,1 +183,1 @@\n-        assertEquals(true, (0) instanceof long);\n+        assertEquals(true, (0L) instanceof long);\n@@ -218,1 +218,1 @@\n-        assertEquals(true, (0) instanceof float);\n+        assertEquals(true, (0L) instanceof float);\n@@ -250,1 +250,1 @@\n-        assertEquals(true, (0) instanceof double);\n+        assertEquals(true, (0L) instanceof double);\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfNumericValueTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}