{"files":[{"patch":"@@ -2927,7 +2927,6 @@\n-     * All the exactness checks between primitive types that require a run-time check\n-     * are in `java.lang.runtime.ExactConversionsSupport`. Those methods are in the\n-     * form `ExactConversionsSupport.<S>_<T>` where both `S` and `T` are primitive\n-     * types and correspond to the runtime check that will be executed when the program\n-     * needs to check whether a certain value (that is passed as a parameter) can be\n-     * converted to T without loss of information.\n-     * Rewrite instanceof if expr : Object and Type is primitive type\n+     * All the exactness checks between primitive types that require a run-time\n+     * check are in {@code java.lang.runtime.ExactConversionsSupport}. Those methods\n+     * are in the form {@code ExactConversionsSupport.is<S>To<T>Exact} where both\n+     * {@code S} and {@code T} are primitive types and correspond to the runtime\n+     * action that will be executed to check whether a certain value (that is passed\n+     * as a parameter) can be converted to {@code T} without loss of information.\n@@ -2935,5 +2934,1 @@\n-     * According to the Table 5.5-A. Casting conversions to primitive types in the JLS this\n-     * conversion is permitted under a casting context, and employs a narrowing reference conversion\n-     * followed by an unboxing conversion. As a result the only check that needs to be done is an\n-     * `instanceof` to `Float`. The unboxing conversion from `Float` to `float` is always exact\n-     * so if `v` is `Float` then `v` will be `instanceof float` too (without further checks).\n+     * Rewrite {@code instanceof if expr : Object} and Type is primitive type:\n@@ -2941,0 +2936,1 @@\n+     * {@snippet :\n@@ -2944,1 +2940,2 @@\n-     *   if (v instanceof Float)\n+     *   if (let tmp$123 = v; tmp$123 instanceof Float)\n+     * }\n@@ -2946,1 +2943,1 @@\n-     * Rewrite instanceof if expr : wrapper reference type\n+     * Rewrite {@code instanceof if expr : wrapper reference type}\n@@ -2948,0 +2945,1 @@\n+     * {@snippet :\n@@ -2952,0 +2950,1 @@\n+     * }\n@@ -2953,1 +2952,1 @@\n-     * Rewrite instanceof if expr : primitive\n+     * Rewrite {@code instanceof if expr : primitive}\n@@ -2955,0 +2954,1 @@\n+     * {@snippet :\n@@ -2959,0 +2959,1 @@\n+     * }\n@@ -2961,4 +2962,7 @@\n-     *\n-     * - If the `instanceof` check is unconditionally exact rewrite to true.\n-     * - If expression type is `Byte`, `Short`, `Integer`, an unboxing conversion followed by a widening primitive conversion.\n-     * - If expression type is a supertype: `Number`, a narrowing reference conversion followed by an unboxing conversion\n+     * <ul>\n+     * <li>If the `instanceof` check is unconditionally exact rewrite to true.<\/li>\n+     * <li>If expression type is {@code Byte}, {@code Short}, {@code Integer}, ..., an\n+     *     unboxing conversion followed by a widening primitive conversion.<\/li>\n+     * <li>If expression type is a supertype: {@code Number}, a narrowing reference\n+     *     conversion followed by an unboxing conversion.<\/li>\n+     * <\/ul>\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"}]}