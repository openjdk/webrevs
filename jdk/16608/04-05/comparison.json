{"files":[{"patch":"@@ -16448,1 +16448,1 @@\n-  format %{ \"fastlock $object,$box\\t! kills $tmp,$tmp2,tmp3\" %}\n+  format %{ \"fastlock $object,$box\\t! kills $tmp,$tmp2,$tmp3\" %}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,14 +274,0 @@\n-    \/\/ Load-Acquire Exclusive Register to match Store Exclusive Register below.\n-    \/\/ Acquire to satisfy the JMM.\n-    ldaxr(mark, obj);\n-\n-    \/\/ Recheck for monitor (0b10).\n-    tbnz(mark, exact_log2(markWord::monitor_value), inflated);\n-\n-    \/\/ Check that obj is unlocked (0b01).\n-    orr(t, mark, markWord::unlocked_value);\n-    cmp(mark, t);\n-    br(Assembler::NE, slow_path);\n-\n-    \/\/ Clear unlock bit (0b01 => 0b00).\n-    andr(mark, mark, ~markWord::unlocked_value);\n@@ -290,2 +276,5 @@\n-    stxr(t, mark, obj);\n-    cmpw(t, zr);\n+    orr(mark, mark, markWord::unlocked_value);\n+    eor(t, mark, markWord::unlocked_value);\n+    \/\/ Acquire to satisfy the JMM.\n+    cmpxchg(\/*addr*\/ obj, \/*expected*\/ mark, \/*new*\/ t, Assembler::xword,\n+            \/*acquire*\/ true, \/*release*\/ false, \/*weak*\/ false, noreg);\n@@ -385,3 +374,2 @@\n-    assert(oopDesc::mark_offset_in_bytes() == 0, \"required to avoid a lea\");\n-    \/\/ Load Exclusive Register to match Store-Release Exclusive Register below.\n-    ldxr(mark, obj);\n+    \/\/ Load Mark.\n+    ldr(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n@@ -393,0 +381,1 @@\n+    assert(oopDesc::mark_offset_in_bytes() == 0, \"required to avoid lea\");\n@@ -395,2 +384,2 @@\n-    stlxr(rscratch1, t, obj);\n-    cmpw(rscratch1, 0u);\n+    cmpxchg(\/*addr*\/ obj, \/*expected*\/ mark, \/*new*\/ t, Assembler::xword,\n+            \/*acquire*\/ false, \/*release*\/ true, \/*weak*\/ false, noreg);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"}]}