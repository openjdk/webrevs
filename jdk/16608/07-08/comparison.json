{"files":[{"patch":"@@ -84,4 +84,1 @@\n-    \/\/ If DiagnoseSyncOnValueBasedClasses is turned off we must instruct\n-    \/\/ lightweight_lock to preload the markWord as implicit null check.\n-    const bool preload_mark = DiagnoseSyncOnValueBasedClasses == 0;\n-    lightweight_lock(obj, hdr, temp, rscratch2, slow_case, preload_mark);\n+    lightweight_lock(obj, hdr, temp, rscratch2, slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-      lightweight_lock(obj_reg, tmp, tmp2, tmp3, slow_case, \/* preload_mark *\/ false);\n+      lightweight_lock(obj_reg, tmp, tmp2, tmp3, slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6335,3 +6335,1 @@\n-\/\/  - preload_mark: signals if the markWord needs to be loaded as  the first\n-\/\/                  instruction emitted. May be required by C1.\n-void MacroAssembler::lightweight_lock(Register obj, Register t1, Register t2, Register t3, Label& slow, bool preload_mark) {\n+void MacroAssembler::lightweight_lock(Register obj, Register t1, Register t2, Register t3, Label& slow) {\n@@ -6346,5 +6344,3 @@\n-  if (preload_mark) {\n-    \/\/ C1 requires the first instruction emitted to trap if obj is null as\n-    \/\/ an implicit null check.\n-    ldr(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n-  }\n+  \/\/ Preload the markWord. It is important that this is the first\n+  \/\/ instruction emitted as it is part of C1's null check semantics.\n+  ldr(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n@@ -6364,3 +6360,0 @@\n-  if (!preload_mark) {\n-    ldr(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n-  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1608,1 +1608,1 @@\n-  void lightweight_lock(Register obj, Register t1, Register t2, Register t3, Label& slow, bool preload_mark);\n+  void lightweight_lock(Register obj, Register t1, Register t2, Register t3, Label& slow);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1817,1 +1817,1 @@\n-      __ lightweight_lock(obj_reg, swap_reg, tmp, lock_tmp, slow_path_lock, \/* preload_mark *\/ false);\n+      __ lightweight_lock(obj_reg, swap_reg, tmp, lock_tmp, slow_path_lock);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}