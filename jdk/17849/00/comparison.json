{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,5 @@\n-# When you read this source. Remember that $(sort ...) has the side effect\n-# of removing duplicates. It is actually this side effect that is\n-# desired whenever sort is used below!\n+################################################################################\n+# This is the top-level entry point for our native compilation and linking.\n+# It contains the SetupNativeCompilation function, but is supported by helper\n+# functions in the make\/common\/native directory.\n+################################################################################\n@@ -37,261 +39,6 @@\n-################################################################################\n-# Create exported symbols file for static libraries\n-################################################################################\n-\n-# get the exported symbols from mapfiles and if there\n-# is no mapfile, get them from the archive\n-define GetSymbols\n-  $(RM) $$(@D)\/$$(basename $$(@F)).symbols; \\\n-  if [ ! -z $$($1_MAPFILE) -a -e $$($1_MAPFILE) ]; then \\\n-    $(ECHO) \"Getting symbols from mapfile $$($1_MAPFILE)\"; \\\n-    $(AWK) '\/global:\/','\/local:\/' $$($1_MAPFILE) | \\\n-        $(SED) -e 's\/#.*\/\/;s\/global:\/\/;s\/local:\/\/;s\/\\;\/\/;s\/^[ \t]*\/_\/;\/^_$$$$\/d' | \\\n-        $(EGREP) -v \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" > \\\n-        $$(@D)\/$$(basename $$(@F)).symbols || true; \\\n-    $(NM) $(NMFLAGS) $$($1_TARGET) | $(GREP)  \" T \" | \\\n-        $(EGREP) \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" | \\\n-        $(CUT) -d ' ' -f 3 >>  $$(@D)\/$$(basename $$(@F)).symbols || true;\\\n-  else \\\n-    $(ECHO) \"Getting symbols from nm\"; \\\n-    $(NM) $(NMFLAGS) -m $$($1_TARGET) | $(GREP)  \"__TEXT\" | \\\n-        $(EGREP) -v \"non-external|private extern|__TEXT,__eh_frame\" | \\\n-        $(SED) -e  's\/.* \/\/' > $$(@D)\/$$(basename $$(@F)).symbols; \\\n-  fi\n-endef\n-\n-################################################################################\n-# Creates a recipe that creates a compile_commands.json fragment. Remove any\n-# occurrences of FIXPATH programs from the command to show the actual invocation.\n-#\n-# Param 1: Name of file to create\n-# Param 2: Working directory\n-# Param 3: Source file\n-# Param 4: Compile command\n-################################################################################\n-define WriteCompileCommandsFragment\n-  $(call LogInfo, Creating compile commands fragment for $(notdir $3))\n-  $(call MakeDir, $(dir $1))\n-  $(call WriteFile,{ \\\n-      \"directory\": \"$(strip $(call FixPath, $2))\"$(COMMA) \\\n-      \"file\": \"$(strip $(call FixPath, $3))\"$(COMMA) \\\n-      \"command\": \"$(strip $(subst $(DQUOTE),\\$(DQUOTE),$(subst \\,\\\\,\\\n-        $(subst $(FIXPATH),,$(call FixPath, $4)))))\" \\\n-    }$(COMMA), \\\n-    $1)\n-endef\n-\n-################################################################################\n-# Define a native toolchain configuration that can be used by\n-# SetupNativeCompilation calls\n-#\n-# Parameter 1 is the name of the toolchain definition\n-#\n-# Remaining parameters are named arguments:\n-#   EXTENDS - Optional parent definition to get defaults from\n-#   CC - The C compiler\n-#   CXX - The C++ compiler\n-#   LD - The Linker\n-#   AR - Static linker\n-#   AS - Assembler\n-#   MT - Windows MT tool\n-#   RC - Windows RC tool\n-#   OBJCOPY - The objcopy tool for debug symbol handling\n-#   STRIP - The tool to use for stripping debug symbols\n-#   SYSROOT_CFLAGS - Compiler flags for using the specific sysroot\n-#   SYSROOT_LDFLAGS - Linker flags for using the specific sysroot\n-DefineNativeToolchain = $(NamedParamsMacroTemplate)\n-define DefineNativeToolchainBody\n-  # If extending another definition, get default values from that,\n-  # otherwise, nothing more needs to be done as variable assignments\n-  # already happened in NamedParamsMacroTemplate.\n-  ifneq ($$($1_EXTENDS), )\n-    $$(call SetIfEmpty, $1_CC, $$($$($1_EXTENDS)_CC))\n-    $$(call SetIfEmpty, $1_CXX, $$($$($1_EXTENDS)_CXX))\n-    $$(call SetIfEmpty, $1_LD, $$($$($1_EXTENDS)_LD))\n-    $$(call SetIfEmpty, $1_AR, $$($$($1_EXTENDS)_AR))\n-    $$(call SetIfEmpty, $1_AS, $$($$($1_EXTENDS)_AS))\n-    $$(call SetIfEmpty, $1_MT, $$($$($1_EXTENDS)_MT))\n-    $$(call SetIfEmpty, $1_RC, $$($$($1_EXTENDS)_RC))\n-    $$(call SetIfEmpty, $1_OBJCOPY, $$($$($1_EXTENDS)_OBJCOPY))\n-    $$(call SetIfEmpty, $1_STRIP, $$($$($1_EXTENDS)_STRIP))\n-    $$(call SetIfEmpty, $1_SYSROOT_CFLAGS, $$($$($1_EXTENDS)_SYSROOT_CFLAGS))\n-    $$(call SetIfEmpty, $1_SYSROOT_LDFLAGS, $$($$($1_EXTENDS)_SYSROOT_LDFLAGS))\n-  endif\n-endef\n-\n-# Create a default toolchain with the main compiler and linker\n-$(eval $(call DefineNativeToolchain, TOOLCHAIN_DEFAULT, \\\n-    CC := $(CC), \\\n-    CXX := $(CXX), \\\n-    LD := $(LD), \\\n-    AR := $(AR), \\\n-    AS := $(AS), \\\n-    MT := $(MT), \\\n-    RC := $(RC), \\\n-    OBJCOPY := $(OBJCOPY), \\\n-    STRIP := $(STRIP), \\\n-    SYSROOT_CFLAGS := $(SYSROOT_CFLAGS), \\\n-    SYSROOT_LDFLAGS := $(SYSROOT_LDFLAGS), \\\n-))\n-\n-# Create a toolchain where linking is done with the C++ linker\n-$(eval $(call DefineNativeToolchain, TOOLCHAIN_LINK_CXX, \\\n-    EXTENDS := TOOLCHAIN_DEFAULT, \\\n-    LD := $(LDCXX), \\\n-))\n-\n-# Create a toolchain with the BUILD compiler, used for build tools that\n-# are to be run during the build.\n-$(eval $(call DefineNativeToolchain, TOOLCHAIN_BUILD, \\\n-    CC := $(BUILD_CC), \\\n-    CXX := $(BUILD_CXX), \\\n-    LD := $(BUILD_LD), \\\n-    AR := $(BUILD_AR), \\\n-    AS := $(BUILD_AS), \\\n-    OBJCOPY := $(BUILD_OBJCOPY), \\\n-    STRIP := $(BUILD_STRIP), \\\n-    SYSROOT_CFLAGS := $(BUILD_SYSROOT_CFLAGS), \\\n-    SYSROOT_LDFLAGS := $(BUILD_SYSROOT_LDFLAGS), \\\n-))\n-\n-# BUILD toolchain with the C++ linker\n-$(eval $(call DefineNativeToolchain, TOOLCHAIN_BUILD_LINK_CXX, \\\n-    EXTENDS := TOOLCHAIN_BUILD, \\\n-    LD := $(BUILD_LDCXX), \\\n-))\n-\n-################################################################################\n-\n-# Extensions of files handled by this macro.\n-NATIVE_SOURCE_EXTENSIONS := %.S %.c %.cpp %.cc %.m %.mm\n-\n-# Replaces native source extensions with the object file extension in a string.\n-# Param 1: the string containing source file names with extensions\n-# The surrounding strip is needed to keep additional whitespace out\n-define replace_with_obj_extension\n-$(strip \\\n-  $(foreach extension, $(NATIVE_SOURCE_EXTENSIONS), \\\n-      $(patsubst $(extension),%$(OBJ_SUFFIX), $(filter $(extension), $1))) \\\n-)\n-endef\n-\n-# This pattern is used to transform the output of the microsoft CL compiler\n-# into a make syntax dependency file (.d)\n-WINDOWS_SHOWINCLUDE_SED_PATTERN := \\\n-    -e '\/^Note: including file:\/!d' \\\n-    -e 's|Note: including file: *||' \\\n-    -e 's|\\r||g' \\\n-    -e 's|\\\\|\/|g' \\\n-    -e 's|^\\([a-zA-Z]\\):|$(WINENV_PREFIX)\/\\1|g' \\\n-    -e '\\|$(TOPDIR)|I !d' \\\n-    -e 's|$$$$| \\\\|g' \\\n-    #\n-\n-# This pattern is used to transform a dependency file (.d) to a list\n-# of make targets for dependent files (.d.targets)\n-DEPENDENCY_TARGET_SED_PATTERN := \\\n-    -e 's\/\\#.*\/\/' \\\n-    -e 's\/^[^:]*: *\/\/' \\\n-    -e 's\/ *\\\\$$$$\/\/' \\\n-    -e 's\/^[\t ]*\/\/' \\\n-    -e '\/^$$$$\/ d' \\\n-    -e 's\/$$$$\/ :\/' \\\n-    #\n-\n-################################################################################\n-# When absolute paths are not allowed in the output, and the compiler does not\n-# support any options to avoid it, we need to rewrite compile commands to use\n-# relative paths. By doing this, the __FILE__ macro will resolve to relative\n-# paths. The relevant input paths on the command line are the -I flags and the\n-# path to the source file itself.\n-#\n-# The macro MakeCommandRelative is used to rewrite the command line like this:\n-# 'CD $(WORKSPACE_ROOT) && <cmd>'\n-# and changes all paths in cmd to be relative to the workspace root. This only\n-# works properly if the build dir is inside the workspace root. If it's not,\n-# relative paths are still calculated, but depending on the distance between the\n-# dirs, paths in the build dir may end up as essentially absolute anyway.\n-#\n-# The fix-deps-file macro is used to adjust the contents of the generated make\n-# dependency files to contain paths compatible with make.\n-#\n-REWRITE_PATHS_RELATIVE = false\n-ifeq ($(ALLOW_ABSOLUTE_PATHS_IN_OUTPUT)-$(FILE_MACRO_CFLAGS), false-)\n-  REWRITE_PATHS_RELATIVE = true\n-endif\n-\n-# CCACHE_BASEDIR needs fix-deps-file as makefiles use absolute filenames for\n-# object files while CCACHE_BASEDIR will make ccache relativize all paths for\n-# its compiler. The compiler then produces relative dependency files.\n-# make does not know a relative and absolute filename is the same so it will\n-# ignore such dependencies. This only applies when the OUTPUTDIR is inside\n-# the WORKSPACE_ROOT.\n-ifneq ($(CCACHE), )\n-  ifneq ($(filter $(WORKSPACE_ROOT)\/%, $(OUTPUTDIR)), )\n-    REWRITE_PATHS_RELATIVE = true\n-  endif\n-endif\n-\n-ifeq ($(REWRITE_PATHS_RELATIVE), true)\n-  # Need to handle -I flags as both '-Ifoo' and '-I foo'.\n-  MakeCommandRelative = \\\n-      $(CD) $(WORKSPACE_ROOT) && \\\n-      $(foreach o, $1, \\\n-        $(if $(filter $(WORKSPACE_ROOT)\/% $(OUTPUTDIR)\/%, $o), \\\n-          $(call RelativePath, $o, $(WORKSPACE_ROOT)) \\\n-        , \\\n-          $(if $(filter -I$(WORKSPACE_ROOT)\/%, $o), \\\n-            -I$(call RelativePath, $(patsubst -I%, %, $o), $(WORKSPACE_ROOT)) \\\n-          , \\\n-            $o \\\n-          ) \\\n-        ) \\\n-      )\n-\n-  # When compiling with relative paths, the deps file may come out with relative\n-  # paths, and that path may start with '.\/'. First remove any leading .\/, then\n-  # add WORKSPACE_ROOT to any line not starting with \/, while allowing for\n-  # leading spaces. There may also be multiple entries on the same line, so start\n-  # with splitting such lines.\n-  # Non GNU sed (BSD on macosx) cannot substitute in literal \\n using regex.\n-  # Instead use a bash escaped literal newline. To avoid having unmatched quotes\n-  # ruin the ability for an editor to properly syntax highlight this file, define\n-  # that newline sequence as a separate variable and add the closing quote behind\n-  # a comment.\n-  sed_newline := \\'$$'\\n''#'\n-  define fix-deps-file\n-\t$(SED) \\\n-\t    -e 's|\\([^ ]\\) \\{1,\\}\\([^\\\\:]\\)|\\1 \\\\$(sed_newline) \\2|g' \\\n-\t    $1.tmp \\\n-\t    | $(SED) \\\n-\t        -e 's|^\\([ ]*\\)\\.\/|\\1|' \\\n-\t        -e '\/^[ ]*[^\/ ]\/s|^\\([ ]*\\)|\\1$(WORKSPACE_ROOT)\/|' \\\n-\t        > $1\n-  endef\n-else\n-  # By default the MakeCommandRelative macro does nothing.\n-  MakeCommandRelative = $1\n-\n-  # No adjustment is needed.\n-  define fix-deps-file\n-\t$(MV) $1.tmp $1\n-  endef\n-endif\n-\n-################################################################################\n-# GetEntitlementsFile\n-# Find entitlements file for executable when signing on macosx. If no\n-# specialized file is found, returns the default file.\n-# $1 Executable to find entitlements file for.\n-ENTITLEMENTS_DIR := $(TOPDIR)\/make\/data\/macosxsigning\n-ifeq ($(MACOSX_CODESIGN_MODE), debug)\n-  CODESIGN_PLIST_SUFFIX := -debug\n-else\n-  CODESIGN_PLIST_SUFFIX :=\n-endif\n-DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default$(CODESIGN_PLIST_SUFFIX).plist\n-\n-GetEntitlementsFile = \\\n-    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1))$(CODESIGN_PLIST_SUFFIX).plist, \\\n-      $(if $(wildcard $f), $f, $(DEFAULT_ENTITLEMENTS_FILE)) \\\n-    )\n+include native\/CompileFile.gmk\n+include native\/DebugSymbols.gmk\n+include native\/Flags.gmk\n+include native\/Link.gmk\n+include native\/Paths.gmk\n+include native\/ToolchainDefinitions.gmk\n@@ -300,194 +47,0 @@\n-# Create the recipe needed to compile a single native source file.\n-#\n-# Parameter 1 is the name of the rule, based on the name of the library\/\n-# program being build and the name of the source code file, e.g.\n-# BUILD_LIBFOO_fooMain.cpp.\n-#\n-# Remaining parameters are named arguments:\n-#   FILE - The full path of the source file to compiler\n-#   BASE - The name of the rule for the entire binary to build ($1)\n-#\n-SetupCompileNativeFile = $(NamedParamsMacroTemplate)\n-define SetupCompileNativeFileBody\n-  $1_FILENAME := $$(notdir $$($1_FILE))\n-\n-  # The target file to be generated.\n-  $1_OBJ := $$($$($1_BASE)_OBJECT_DIR)\/$$(call replace_with_obj_extension, \\\n-      $$($1_FILENAME))\n-\n-  # Generate the corresponding compile_commands.json fragment.\n-  $1_OBJ_JSON = $$(MAKESUPPORT_OUTPUTDIR)\/compile-commands\/$$(subst \/,_,$$(subst \\\n-      $$(OUTPUTDIR)\/,,$$($1_OBJ))).json\n-  $$($1_BASE)_ALL_OBJS_JSON += $$($1_OBJ_JSON)\n-\n-  # Only continue if this object file hasn't been processed already. This lets\n-  # the first found source file override any other with the same name.\n-  ifeq ($$($1_OBJ_PROCESSED), )\n-    $1_OBJ_PROCESSED := true\n-    # This is the definite source file to use for $1_FILENAME.\n-    $1_SRC_FILE := $$($1_FILE)\n-\n-    ifeq ($$($1_OPTIMIZATION), )\n-      $1_OPT_CFLAGS := $$($$($1_BASE)_OPT_CFLAGS)\n-      $1_OPT_CXXFLAGS := $$($$($1_BASE)_OPT_CXXFLAGS)\n-    else\n-      ifeq ($$($1_OPTIMIZATION), NONE)\n-        $1_OPT_CFLAGS := $(C_O_FLAG_NONE)\n-        $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NONE)\n-      else ifeq ($$($1_OPTIMIZATION), LOW)\n-        $1_OPT_CFLAGS := $(C_O_FLAG_NORM)\n-        $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NORM)\n-      else ifeq ($$($1_OPTIMIZATION), HIGH)\n-        $1_OPT_CFLAGS := $(C_O_FLAG_HI)\n-        $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HI)\n-      else ifeq ($$($1_OPTIMIZATION), HIGHEST)\n-        $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST)\n-        $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST)\n-      else ifeq ($$($1_OPTIMIZATION), HIGHEST_JVM)\n-        $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST_JVM)\n-        $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST_JVM)\n-      else ifeq ($$($1_OPTIMIZATION), SIZE)\n-        $1_OPT_CFLAGS := $(C_O_FLAG_SIZE)\n-        $1_OPT_CXXFLAGS := $(CXX_O_FLAG_SIZE)\n-      else\n-        $$(error Unknown value for file OPTIMIZATION: $$($1_OPTIMIZATION))\n-      endif\n-    endif\n-\n-    ifneq ($$($$($1_BASE)_PRECOMPILED_HEADER), )\n-      ifeq ($$(filter $$($1_FILENAME), $$($$($1_BASE)_PRECOMPILED_HEADER_EXCLUDE)), )\n-        $1_USE_PCH_FLAGS := $$($$($1_BASE)_USE_PCH_FLAGS)\n-      endif\n-    endif\n-\n-    ifneq ($(DISABLE_WARNING_PREFIX), )\n-      $1_WARNINGS_FLAGS := $$(addprefix $(DISABLE_WARNING_PREFIX), \\\n-        $$($$($1_BASE)_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$$($1_FILENAME)) \\\n-        $$($$($1_BASE)_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)_$$($1_FILENAME)))\n-    endif\n-\n-    $1_BASE_CFLAGS :=  $$($$($1_BASE)_CFLAGS) $$($$($1_BASE)_EXTRA_CFLAGS) \\\n-        $$($$($1_BASE)_SYSROOT_CFLAGS)\n-    $1_BASE_CXXFLAGS := $$($$($1_BASE)_CXXFLAGS) $$($$($1_BASE)_EXTRA_CXXFLAGS) \\\n-        $$($$($1_BASE)_SYSROOT_CFLAGS) $$($1_EXTRA_CXXFLAGS)\n-    $1_BASE_ASFLAGS := $$($$($1_BASE)_ASFLAGS) $$($$($1_BASE)_EXTRA_ASFLAGS)\n-\n-    ifneq ($$(filter %.c, $$($1_FILENAME)), )\n-      # Compile as a C file\n-      $1_CFLAGS += $$($1_WARNINGS_FLAGS)\n-      $1_FLAGS := $(CFLAGS_CCACHE) $$($1_USE_PCH_FLAGS) $$($1_BASE_CFLAGS) \\\n-          $$($1_OPT_CFLAGS) $$($1_CFLAGS) -c\n-      $1_COMPILER := $$($$($1_BASE)_CC)\n-    else ifneq ($$(filter %.m, $$($1_FILENAME)), )\n-      # Compile as an Objective-C file\n-      $1_CFLAGS += $$($1_WARNINGS_FLAGS)\n-      $1_FLAGS := -x objective-c $(CFLAGS_CCACHE) $$($1_USE_PCH_FLAGS) \\\n-          $$($1_BASE_CFLAGS) $$($1_OPT_CFLAGS) $$($1_CFLAGS) -c\n-      $1_COMPILER := $$($$($1_BASE)_CC)\n-    else ifneq ($$(filter %.S, $$($1_FILENAME)), )\n-      # Compile as preprocessed assembler file\n-      $1_FLAGS := $(BASIC_ASFLAGS) $$($1_BASE_ASFLAGS)\n-      $1_COMPILER := $(AS)\n-\n-      # gcc or clang assembly files must contain an appropriate relative .file\n-      # path for reproducible builds.\n-      ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n-        # If no absolute paths allowed, work out relative source file path\n-        # for assembly .file substitution, otherwise use full file path\n-        ifeq ($(ALLOW_ABSOLUTE_PATHS_IN_OUTPUT), false)\n-          $1_REL_ASM_SRC := $$(call RelativePath, $$($1_FILE), $(WORKSPACE_ROOT))\n-        else\n-          $1_REL_ASM_SRC := $$($1_FILE)\n-        endif\n-        $1_FLAGS := $$($1_FLAGS) -DASSEMBLY_SRC_FILE='\"$$($1_REL_ASM_SRC)\"' \\\n-            -include $(TOPDIR)\/make\/data\/autoheaders\/assemblyprefix.h\n-      endif\n-    else ifneq ($$(filter %.cpp %.cc %.mm, $$($1_FILENAME)), )\n-      # Compile as a C++ or Objective-C++ file\n-      $1_CXXFLAGS += $$($1_WARNINGS_FLAGS)\n-      $1_FLAGS := $(CFLAGS_CCACHE) $$($1_USE_PCH_FLAGS) $$($1_BASE_CXXFLAGS) \\\n-          $$($1_OPT_CXXFLAGS) $$($1_CXXFLAGS) -c\n-      $1_COMPILER := $$($$($1_BASE)_CXX)\n-    else\n-      $$(error Internal error in NativeCompilation.gmk: no compiler for file $$($1_FILENAME))\n-    endif\n-\n-    # And this is the dependency file for this obj file.\n-    $1_DEPS_FILE := $$(patsubst %$(OBJ_SUFFIX),%.d,$$($1_OBJ))\n-    # The dependency target file lists all dependencies as empty targets to\n-    # avoid make error \"No rule to make target\" for removed files\n-    $1_DEPS_TARGETS_FILE := $$(patsubst %$(OBJ_SUFFIX),%.d.targets,$$($1_OBJ))\n-\n-    # Only try to load individual dependency information files if the global\n-    # file hasn't been loaded (could happen if make was interrupted).\n-    ifneq ($$($$($1_BASE)_DEPS_FILE_LOADED), true)\n-      # Include previously generated dependency information. (if it exists)\n-      -include $$($1_DEPS_FILE)\n-      -include $$($1_DEPS_TARGETS_FILE)\n-    endif\n-\n-    ifneq ($$(strip $$($1_CFLAGS) $$($1_CXXFLAGS) $$($1_OPTIMIZATION)), )\n-      $1_VARDEPS := $$($1_CFLAGS) $$($1_CXXFLAGS) $$($1_OPTIMIZATION)\n-      $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, $$($1_OBJ).vardeps)\n-    endif\n-\n-    $1_OBJ_DEPS := $$($1_SRC_FILE) $$($$($1_BASE)_COMPILE_VARDEPS_FILE) \\\n-        $$($$($1_BASE)_EXTRA_DEPS) $$($1_VARDEPS_FILE)\n-    $1_COMPILE_OPTIONS := $$($1_FLAGS) $(CC_OUT_OPTION)$$($1_OBJ) $$($1_SRC_FILE)\n-    # For reproducible builds with gcc and clang ensure random symbol generation is\n-    # seeded deterministically\n-    ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n-      $1_COMPILE_OPTIONS += -frandom-seed=\"$$($1_FILENAME)\"\n-    endif\n-\n-    $$($1_OBJ_JSON): $$($1_OBJ_DEPS)\n-\t$$(call WriteCompileCommandsFragment, $$@, $$(PWD), $$($1_SRC_FILE), \\\n-\t    $$($1_COMPILER) $$($1_COMPILE_OPTIONS))\n-\n-    $$($1_OBJ): $$($1_OBJ_DEPS) | $$($$($1_BASE)_BUILD_INFO)\n-\t$$(call LogInfo, Compiling $$($1_FILENAME) (for $$($$($1_BASE)_BASENAME)))\n-\t$$(call MakeDir, $$(@D))\n-        ifneq ($(TOOLCHAIN_TYPE), microsoft)\n-\t  $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n-\t      $$($1_COMPILER) $$(GENDEPS_FLAGS) \\\n-\t      $$(addsuffix .tmp, $$($1_DEPS_FILE)) \\\n-\t      $$($1_COMPILE_OPTIONS)))\n-          ifneq ($$($1_DEPS_FILE), )\n-\t    $$(call fix-deps-file, $$($1_DEPS_FILE))\n-            # Create a dependency target file from the dependency file.\n-            # Solution suggested by:\n-            # http:\/\/make.mad-scientist.net\/papers\/advanced-auto-dependency-generation\/\n-\t    $(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_DEPS_FILE) \\\n-\t        > $$($1_DEPS_TARGETS_FILE)\n-          endif\n-        else\n-          # The Visual Studio compiler lacks a feature for generating make\n-          # dependencies, but by setting -showIncludes, all included files are\n-          # printed. These are filtered out and parsed into make dependences.\n-          #\n-          # Keep as much as possible on one execution line for best performance\n-          # on Windows. No need to save exit code from compilation since\n-          # pipefail is always active on Windows.\n-          ifeq ($$(filter %.S, $$($1_FILENAME)), )\n-\t    $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n-\t        $$($1_COMPILER) -showIncludes $$($1_COMPILE_OPTIONS))) \\\n-\t        | $(TR) -d '\\r' | $(GREP) -v -e \"^Note: including file:\" \\\n-\t            -e \"^$$($1_FILENAME)$$$$\" || test \"$$$$?\" = \"1\" ; \\\n-\t    $(ECHO) $$@: \\\\ > $$($1_DEPS_FILE) ; \\\n-\t    $(SED) $(WINDOWS_SHOWINCLUDE_SED_PATTERN) $$($1_OBJ).log \\\n-\t        | $(SORT) -u >> $$($1_DEPS_FILE) ; \\\n-\t    $(ECHO) >> $$($1_DEPS_FILE) ; \\\n-\t    $(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_DEPS_FILE) > $$($1_DEPS_TARGETS_FILE)\n-          else\n-            # For assembler calls just create empty dependency lists\n-\t    $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n-\t        $$($1_COMPILER) $$($1_FLAGS) \\\n-\t        $(CC_OUT_OPTION)$$($1_OBJ) -Ta $$($1_SRC_FILE))) \\\n-\t        | $(TR) -d '\\r' | $(GREP) -v -e \"Assembling:\" || test \"$$$$?\" = \"1\" ; \\\n-\t    $(ECHO) > $$($1_DEPS_FILE) ; \\\n-\t    $(ECHO) > $$($1_DEPS_TARGETS_FILE)\n-          endif\n-        endif\n-  endif\n-endef\n-\n@@ -576,0 +129,1 @@\n+#\n@@ -578,0 +132,56 @@\n+  # Setup variables for the rest of the function to work with\n+  $$(eval $$(call SetupBasicVariables1,$1))\n+  $$(eval $$(call SetupDebugSymbols,$1))\n+  $$(eval $$(call SetupBasicVariables2,$1))\n+  $$(eval $$(call VerifyArguments,$1))\n+  $$(eval $$(call SetupBasicVariables3,$1))\n+\n+  # Need to make sure TARGET is first on list\n+  $1 := $$($1_TARGET)\n+\n+  # Setup the toolchain to be used\n+  $$(eval $$(call SetupToolchain,$1))\n+\n+  # Figure out all source files to compile\n+  $$(eval $$(call LocateSourceFiles,$1))\n+\n+  # ... and what the output object files will be\n+  $$(eval $$(call SetupOutputFiles,$1))\n+\n+  # Setup CFLAGS\/CXXFLAGS based on warnings, optimizations, extra flags etc.\n+  $$(eval $$(call SetupCompilerFlags,$1))\n+\n+  # Machinery needed for the build to function properly\n+  $$(eval $$(call SetupBuildSystemSupport,$1))\n+\n+  # Create a PCH, if requested\n+  $$(eval $$(call CreatePrecompiledHeader,$1))\n+\n+  # Now call SetupCompileNativeFile for each source file we are going to compile.\n+  $$(foreach file, $$($1_SRCS), \\\n+      $$(eval $$(call SetupCompileNativeFile,$1_$$(notdir $$(file)),\\\n+          FILE := $$(file), \\\n+          BASE := $1, \\\n+      )) \\\n+  )\n+\n+  # Have make print information about the library when we start compiling\n+  $$(eval $$(call PrintInfo,$1))\n+\n+  ifeq ($(call isTargetOs, windows), true)\n+    # On windows we need to create a resource file\n+    $$(eval $$(call CreateWindowsResourceFile,$1))\n+  endif\n+\n+  # Setup a library-wide dependency file from individual object file dependency\n+  # files, and import it in the makefile.\n+  $$(eval $$(call CreateDependencyFile,$1))\n+  $$(eval $$(call ImportDependencyFile,$1))\n+\n+  # Prepare for linking\n+  $$(eval $$(call SetupLinkerFlags,$1))\n+\n+  $$(eval $$(call SetupMapfile,$1))\n+\n+  # Handle native debug symbols\n+  $$(eval $$(call CreateDebugSymbols,$1))\n@@ -579,0 +189,16 @@\n+  $$(eval $$(call SetupStrip,$1))\n+\n+  $$(eval $$(call SetupObjectFileList,$1))\n+\n+  # Link the individually compiled files into a single unit\n+  $$(eval $$(call CreateLinkedResult,$1))\n+\n+  ifeq ($(GENERATE_COMPILE_COMMANDS_ONLY), true)\n+    # Override all targets (this is a hack)\n+    $1 := $$($1_ALL_OBJS_JSON)\n+  endif\n+endef\n+\n+################################################################################\n+# Setup basic variables, part 1\n+define SetupBasicVariables1\n@@ -591,0 +217,1 @@\n+endef\n@@ -592,2 +219,3 @@\n-  $$(call SetIfEmpty, $1_COMPILE_WITH_DEBUG_SYMBOLS, $$(COMPILE_WITH_DEBUG_SYMBOLS))\n-\n+################################################################################\n+# Setup basic variables, part 2\n+define SetupBasicVariables2\n@@ -603,9 +231,0 @@\n-    # For release builds where debug symbols are configured to be moved to\n-    # separate debuginfo files, disable debug symbols for static libs instead.\n-    # We don't currently support this configuration and we don't want symbol\n-    # information in release builds unless explicitly asked to provide it.\n-    ifeq ($(DEBUG_LEVEL), release)\n-      ifeq ($(COPY_DEBUG_SYMBOLS), true)\n-        $1_COMPILE_WITH_DEBUG_SYMBOLS := false\n-      endif\n-    endif\n@@ -631,0 +250,1 @@\n+endef\n@@ -632,0 +252,3 @@\n+################################################################################\n+# Verify that user passed arguments are valid\n+define VerifyArguments\n@@ -642,1 +265,1 @@\n-    $$(error OUTPUT_DIR is missing in $1)\n+    $$(error OUTPUT_DIR is missing in $1, looking in variable: $1_OUTPUT_DIR with value $$($1_OUTPUT_DIR))\n@@ -649,0 +272,1 @@\n+endef\n@@ -650,0 +274,3 @@\n+################################################################################\n+# Setup basic variables, part 3\n+define SetupBasicVariables3\n@@ -653,218 +280,2 @@\n-  $1_SAFE_NAME := $$(strip $$(subst \/,_, $1))\n-\n-# Need to make sure TARGET is first on list\n-  $1 := $$($1_TARGET)\n-\n-  # Setup the toolchain to be used\n-  $$(call SetIfEmpty, $1_TOOLCHAIN, TOOLCHAIN_DEFAULT)\n-  $$(call SetIfEmpty, $1_CC, $$($$($1_TOOLCHAIN)_CC))\n-  $$(call SetIfEmpty, $1_CXX, $$($$($1_TOOLCHAIN)_CXX))\n-  $$(call SetIfEmpty, $1_LD, $$($$($1_TOOLCHAIN)_LD))\n-  $$(call SetIfEmpty, $1_AR, $$($$($1_TOOLCHAIN)_AR))\n-  $$(call SetIfEmpty, $1_AS, $$($$($1_TOOLCHAIN)_AS))\n-  $$(call SetIfEmpty, $1_MT, $$($$($1_TOOLCHAIN)_MT))\n-  $$(call SetIfEmpty, $1_RC, $$($$($1_TOOLCHAIN)_RC))\n-  $$(call SetIfEmpty, $1_OBJCOPY, $$($$($1_TOOLCHAIN)_OBJCOPY))\n-  $$(call SetIfEmpty, $1_STRIP, $$($$($1_TOOLCHAIN)_STRIP))\n-  $$(call SetIfEmpty, $1_SYSROOT_CFLAGS, $$($$($1_TOOLCHAIN)_SYSROOT_CFLAGS))\n-  $$(call SetIfEmpty, $1_SYSROOT_LDFLAGS, $$($$($1_TOOLCHAIN)_SYSROOT_LDFLAGS))\n-\n-  $$(foreach d, $$($1_SRC), $$(if $$(wildcard $$d), , \\\n-      $$(error SRC specified to SetupNativeCompilation $1 contains missing directory $$d)))\n-\n-  $1_SRCS_RAW := $$(call FindFiles, $$($1_SRC))\n-  # Order src files according to the order of the src dirs\n-  $1_SRCS := $$(foreach d, $$($1_SRC), $$(filter $$d%, $$($1_SRCS_RAW)))\n-  $1_SRCS := $$(filter $$(NATIVE_SOURCE_EXTENSIONS), $$($1_SRCS))\n-  # Extract the C\/C++ files.\n-  ifneq ($$($1_EXCLUDE_PATTERNS), )\n-    # We must not match the exclude pattern against the src root(s).\n-    $1_SRCS_WITHOUT_ROOTS := $$($1_SRCS)\n-    $$(foreach i, $$($1_SRC), $$(eval $1_SRCS_WITHOUT_ROOTS := $$(patsubst \\\n-        $$i\/%,%, $$($1_SRCS_WITHOUT_ROOTS))))\n-    $1_ALL_EXCLUDE_FILES :=  $$(call containing, $$($1_EXCLUDE_PATTERNS), \\\n-        $$($1_SRCS_WITHOUT_ROOTS))\n-  endif\n-  ifneq ($$($1_EXCLUDE_FILES), )\n-    $1_ALL_EXCLUDE_FILES += $$($1_EXCLUDE_FILES)\n-  endif\n-  ifneq ($$($1_ALL_EXCLUDE_FILES), )\n-    $1_EXCLUDE_FILES_PAT := $$($1_ALL_EXCLUDE_FILES) \\\n-        $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$($1_ALL_EXCLUDE_FILES)))\n-    $1_EXCLUDE_FILES_PAT := $$(addprefix %, $$($1_EXCLUDE_FILES_PAT))\n-    $1_SRCS := $$(filter-out $$($1_EXCLUDE_FILES_PAT), $$($1_SRCS))\n-  endif\n-  ifneq ($$($1_INCLUDE_FILES), )\n-    $1_INCLUDE_FILES_PAT := $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$($1_INCLUDE_FILES)))\n-    $1_SRCS := $$(filter $$($1_INCLUDE_FILES_PAT), $$($1_SRCS))\n-  endif\n-  # There can be only a single bin dir root, no need to foreach over the roots.\n-  $1_BINS := $$(wildcard $$($1_OBJECT_DIR)\/*$(OBJ_SUFFIX))\n-  # Now we have a list of all c\/c++ files to compile: $$($1_SRCS)\n-  # and we have a list of all existing object files: $$($1_BINS)\n-\n-  # Prepend the source\/bin path to the filter expressions. Then do the filtering.\n-  ifneq ($$($1_INCLUDES), )\n-    $1_SRC_INCLUDES := $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$(addsuffix \/%, $$($1_INCLUDES))))\n-    $1_SRCS := $$(filter $$($1_SRC_INCLUDES), $$($1_SRCS))\n-  endif\n-  ifneq ($$($1_EXCLUDES), )\n-    $1_SRC_EXCLUDES := $$(addsuffix \/%, $$($1_EXCLUDES))\n-    $1_SRC_EXCLUDES += $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$(addsuffix \/%, $$($1_EXCLUDES))))\n-    $1_SRCS := $$(filter-out $$($1_SRC_EXCLUDES), $$($1_SRCS))\n-  endif\n-\n-  $1_SRCS += $$($1_EXTRA_FILES)\n-\n-  ifeq ($$($1_SRCS), )\n-    $$(error No sources found for $1 when looking inside the dirs $$($1_SRC))\n-  endif\n-\n-  ifeq ($$($1_TYPE), EXECUTABLE)\n-    ifeq ($(UBSAN_ENABLED), true)\n-      # We need to set the default options for UBSan. This needs to be included in every executable.\n-      # Rather than copy and paste code to everything with a main function, we add an additional\n-      # source file to every executable that exports __ubsan_default_options.\n-      ifneq ($$(filter %.cpp %.cc, $$($1_SRCS)), )\n-        $1_SRCS += $(TOPDIR)\/make\/data\/ubsan\/ubsan_default_options.cpp\n-      else\n-        $1_SRCS += $(TOPDIR)\/make\/data\/ubsan\/ubsan_default_options.c\n-      endif\n-    endif\n-  endif\n-\n-  # Calculate the expected output from compiling the sources\n-  $1_EXPECTED_OBJS_FILENAMES := $$(call replace_with_obj_extension, $$(notdir $$($1_SRCS)))\n-  $1_EXPECTED_OBJS := $$(addprefix $$($1_OBJECT_DIR)\/, $$($1_EXPECTED_OBJS_FILENAMES))\n-  # Are there too many object files on disk? Perhaps because some source file was removed?\n-  $1_SUPERFLOUS_OBJS := $$(sort $$(filter-out $$($1_EXPECTED_OBJS), $$($1_BINS)))\n-  # Clean out the superfluous object files.\n-  ifneq ($$($1_SUPERFLUOUS_OBJS), )\n-    $$(shell $(RM) -f $$($1_SUPERFLUOUS_OBJS))\n-  endif\n-  # Sort to remove duplicates and provide a reproducible order on the input files to the linker.\n-  $1_ALL_OBJS := $$(sort $$($1_EXPECTED_OBJS) $$($1_EXTRA_OBJECT_FILES))\n-  ifeq ($(STATIC_LIBS), true)\n-    # Exclude the object files that match with $1_STATIC_LIB_EXCLUDE_OBJS.\n-    ifneq ($$($1_STATIC_LIB_EXCLUDE_OBJS), )\n-      $1_ALL_OBJS := $$(call not-containing, $$($1_STATIC_LIB_EXCLUDE_OBJS), $$($1_ALL_OBJS))\n-    endif\n-  endif\n-\n-  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS, TOOLCHAIN_TYPE and\n-  # OPENJDK_TARGET_OS plus OPENJDK_TARGET_CPU pair dependent variables for CFLAGS.\n-  $1_EXTRA_CFLAGS := $$($1_CFLAGS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_CFLAGS_$(OPENJDK_TARGET_OS)) \\\n-      $$($1_CFLAGS_$(TOOLCHAIN_TYPE)) \\\n-      $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU))\n-\n-  ifneq ($(DEBUG_LEVEL), release)\n-    # Pickup extra debug dependent variables for CFLAGS\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_debug)\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS_TYPE)_debug)\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_debug)\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU)_debug)\n-  else\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_release)\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS_TYPE)_release)\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_release)\n-    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU)_release)\n-  endif\n-  ifeq ($(STATIC_LIBS), true)\n-    $1_EXTRA_CFLAGS += $$(STATIC_LIBS_CFLAGS)\n-  endif\n-\n-  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS and\/or TOOLCHAIN_TYPE\n-  # dependent variables for CXXFLAGS.\n-  $1_EXTRA_CXXFLAGS := $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)) \\\n-      $$($1_CXXFLAGS_$(TOOLCHAIN_TYPE))\n-\n-  ifneq ($(DEBUG_LEVEL), release)\n-    # Pickup extra debug dependent variables for CXXFLAGS\n-    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_debug)\n-    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_TYPE)_debug)\n-    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)_debug)\n-  else\n-    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_release)\n-    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_TYPE)_release)\n-    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)_release)\n-  endif\n-  ifeq ($(STATIC_LIBS), true)\n-    $1_EXTRA_CXXFLAGS += $$(STATIC_LIB_CFLAGS)\n-  endif\n-\n-  # If no C++ flags are explicitly set, default to using the C flags.\n-  # After that, we can set additional C++ flags that should not interfere\n-  # with the mechanism for copying the C flags by default.\n-  ifeq ($$($1_CXXFLAGS), )\n-    $1_CXXFLAGS := $$($1_CFLAGS)\n-  endif\n-  ifeq ($$(strip $$($1_EXTRA_CXXFLAGS)), )\n-    $1_EXTRA_CXXFLAGS := $$($1_EXTRA_CFLAGS)\n-  endif\n-\n-  ifeq ($$($1_COMPILE_WITH_DEBUG_SYMBOLS), true)\n-    $1_EXTRA_CFLAGS += $$(CFLAGS_DEBUG_SYMBOLS)\n-    $1_EXTRA_CXXFLAGS += $$(CFLAGS_DEBUG_SYMBOLS)\n-    $1_EXTRA_ASFLAGS += $$(ASFLAGS_DEBUG_SYMBOLS)\n-  endif\n-\n-  # Pass the library name for static JNI library naming\n-  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n-    $1_EXTRA_CFLAGS += -DLIBRARY_NAME=$$($1_NAME)\n-    $1_EXTRA_CXXFLAGS += -DLIBRARY_NAME=$$($1_NAME)\n-  endif\n-\n-  # Pick up disabled warnings, if possible on this platform.\n-  ifneq ($(DISABLE_WARNING_PREFIX), )\n-    $1_EXTRA_CFLAGS += $$(addprefix $(DISABLE_WARNING_PREFIX), \\\n-        $$(DISABLED_WARNINGS) \\\n-        $$(DISABLED_WARNINGS_C) \\\n-        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)) \\\n-        $$($1_DISABLED_WARNINGS_C_$(TOOLCHAIN_TYPE)) \\\n-        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)) \\\n-        $$($1_DISABLED_WARNINGS_C_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)))\n-    $1_EXTRA_CXXFLAGS += $$(addprefix $(DISABLE_WARNING_PREFIX), \\\n-        $$(DISABLED_WARNINGS) \\\n-        $$(DISABLED_WARNINGS_CXX) \\\n-        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)) \\\n-        $$($1_DISABLED_WARNINGS_CXX_$(TOOLCHAIN_TYPE)) \\\n-        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)) \\\n-        $$($1_DISABLED_WARNINGS_CXX_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)))\n-  endif\n-\n-  # Check if warnings should be considered errors.\n-  # Pick first binary and toolchain specific, then binary specific, then general setting.\n-  ifeq ($$($1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE)), )\n-    ifeq ($$($1_WARNINGS_AS_ERRORS), )\n-      $1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE) := $$(WARNINGS_AS_ERRORS)\n-    else\n-      $1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE) := $$($1_WARNINGS_AS_ERRORS)\n-    endif\n-  endif\n-\n-  ifeq ($$($1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE)), true)\n-    $1_EXTRA_CFLAGS += $(CFLAGS_WARNINGS_ARE_ERRORS)\n-    $1_EXTRA_CXXFLAGS += $(CFLAGS_WARNINGS_ARE_ERRORS)\n-  endif\n-\n-  ifeq (NONE, $$($1_OPTIMIZATION))\n-    $1_OPT_CFLAGS := $(C_O_FLAG_NONE)\n-    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NONE)\n-  else ifeq (LOW, $$($1_OPTIMIZATION))\n-    $1_OPT_CFLAGS := $(C_O_FLAG_NORM)\n-    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NORM)\n-  else ifeq (HIGH, $$($1_OPTIMIZATION))\n-    $1_OPT_CFLAGS := $(C_O_FLAG_HI)\n-    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HI)\n-  else ifeq (HIGHEST, $$($1_OPTIMIZATION))\n-    $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST)\n-    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST)\n-  else ifeq (HIGHEST_JVM, $$($1_OPTIMIZATION))\n-    $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST_JVM)\n-    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST_JVM)\n-  else ifeq (SIZE, $$($1_OPTIMIZATION))\n-    $1_OPT_CFLAGS := $(C_O_FLAG_SIZE)\n-    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_SIZE)\n-  else ifneq (, $$($1_OPTIMIZATION))\n-    $$(error Unknown value for OPTIMIZATION: $$($1_OPTIMIZATION))\n-  endif\n+  $1_SAFE_NAME := $$(strip $$(subst \/,_,$1))\n+endef\n@@ -872,0 +283,3 @@\n+################################################################################\n+# Setup machinery needed by the build system\n+define SetupBuildSystemSupport\n@@ -880,1 +294,1 @@\n-  $1_COMPILE_VARDEPS_FILE := $$(call DependOnVariable, $1_COMPILE_VARDEPS, \\\n+  $1_COMPILE_VARDEPS_FILE := $$(call DependOnVariable,$1_COMPILE_VARDEPS, \\\n@@ -882,0 +296,1 @@\n+endef\n@@ -883,74 +298,3 @@\n-  ifneq ($$($1_PRECOMPILED_HEADER), )\n-    ifeq ($(USE_PRECOMPILED_HEADER), true)\n-      ifeq ($(TOOLCHAIN_TYPE), microsoft)\n-        $1_PCH_FILE := $$($1_OBJECT_DIR)\/$1.pch\n-        $1_GENERATED_PCH_SRC := $$($1_OBJECT_DIR)\/$1_pch.cpp\n-        $1_GENERATED_PCH_OBJ := $$($1_OBJECT_DIR)\/$1_pch$(OBJ_SUFFIX)\n-\n-        $$(eval $$(call SetupCompileNativeFile, $1_$$(notdir $$($1_GENERATED_PCH_SRC)), \\\n-            FILE := $$($1_GENERATED_PCH_SRC), \\\n-            BASE := $1, \\\n-            EXTRA_CXXFLAGS := -Fp$$($1_PCH_FILE) -Yc$$(notdir $$($1_PRECOMPILED_HEADER)), \\\n-        ))\n-\n-        $1_USE_PCH_FLAGS := \\\n-            -Fp$$($1_PCH_FILE) -Yu$$(notdir $$($1_PRECOMPILED_HEADER))\n-\n-        $$($1_ALL_OBJS): $$($1_GENERATED_PCH_OBJ)\n-\n-        # Explicitly add the pch obj file first to ease comparing to old\n-        # hotspot build.\n-        $1_ALL_OBJS := $$($1_GENERATED_PCH_OBJ) $$($1_ALL_OBJS)\n-\n-        $$($1_GENERATED_PCH_SRC):\n-\t\t$(ECHO) \"#include \\\"$$(notdir $$($1_PRECOMPILED_HEADER))\\\"\" > $$@\n-\n-      else ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n-        ifeq ($(TOOLCHAIN_TYPE), gcc)\n-          $1_PCH_FILE := $$($1_OBJECT_DIR)\/precompiled\/$$(notdir $$($1_PRECOMPILED_HEADER)).gch\n-          $1_USE_PCH_FLAGS := -I$$($1_OBJECT_DIR)\/precompiled\n-        else ifeq ($(TOOLCHAIN_TYPE), clang)\n-          $1_PCH_FILE := $$($1_OBJECT_DIR)\/precompiled\/$$(notdir $$($1_PRECOMPILED_HEADER)).pch\n-          $1_USE_PCH_FLAGS := -include-pch $$($1_PCH_FILE)\n-        endif\n-        $1_PCH_DEPS_FILE := $$($1_PCH_FILE).d\n-        $1_PCH_DEPS_TARGETS_FILE := $$($1_PCH_FILE).d.targets\n-\n-        -include $$($1_PCH_DEPS_FILE)\n-        -include $$($1_PCH_DEPS_TARGETS_FILE)\n-\n-        $1_PCH_COMMAND := $$($1_CC) $$($1_CFLAGS) $$($1_EXTRA_CFLAGS) $$($1_SYSROOT_CFLAGS) \\\n-            $$($1_OPT_CFLAGS) -x c++-header -c $(GENDEPS_FLAGS) \\\n-            $$(addsuffix .tmp, $$($1_PCH_DEPS_FILE))\n-\n-        $$($1_PCH_FILE): $$($1_PRECOMPILED_HEADER) $$($1_COMPILE_VARDEPS_FILE)\n-\t\t$$(call LogInfo, Generating precompiled header)\n-\t\t$$(call MakeDir, $$(@D))\n-\t\t$$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n-\t\t    $$($1_PCH_COMMAND) $$< -o $$@))\n-\t\t$$(call fix-deps-file, $$($1_PCH_DEPS_FILE))\n-\t\t$(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_PCH_DEPS_FILE) \\\n-\t\t    > $$($1_PCH_DEPS_TARGETS_FILE)\n-\n-        $$($1_ALL_OBJS): $$($1_PCH_FILE)\n-\n-        # Generate the corresponding compile_commands.json fragment.\n-        $1_PCH_FILE_JSON := $$(MAKESUPPORT_OUTPUTDIR)\/compile-commands\/$$(subst \/,_,$$(subst \\\n-            $$(OUTPUTDIR)\/,,$$($1_PCH_FILE))).json\n-        $1_ALL_OBJS_JSON += $$($1_PCH_FILE_JSON)\n-\n-        $$($1_PCH_FILE_JSON): $$($1_PRECOMPILED_HEADER) $$($1_COMPILE_VARDEPS_FILE)\n-\t\t$$(call WriteCompileCommandsFragment, $$@, $$(PWD), $$<, \\\n-\t\t    $$($1_PCH_COMMAND) $$< -o $$($1_PCH_FILE))\n-      endif\n-    endif\n-  endif\n-\n-  # Now call SetupCompileNativeFile for each source file we are going to compile.\n-  $$(foreach file, $$($1_SRCS), \\\n-      $$(eval $$(call SetupCompileNativeFile, $1_$$(notdir $$(file)),\\\n-          FILE := $$(file), \\\n-          BASE := $1, \\\n-      )) \\\n-  )\n-\n+################################################################################\n+# Have make print information about the library when we start compiling\n+define PrintInfo\n@@ -961,1 +305,1 @@\n-  $$(call SetIfEmpty, $1_BUILD_INFO_LOG_MACRO, LogWarn)\n+  $$(call SetIfEmpty,$1_BUILD_INFO_LOG_MACRO, LogWarn)\n@@ -976,0 +320,1 @@\n+endef\n@@ -977,40 +322,4 @@\n-  # On windows we need to create a resource file\n-  ifeq ($(call isTargetOs, windows), true)\n-    ifneq ($$($1_VERSIONINFO_RESOURCE), )\n-      $1_RES := $$($1_OBJECT_DIR)\/$$($1_BASENAME).res\n-      $1_RES_DEPS_FILE := $$($1_RES).d\n-      $1_RES_DEPS_TARGETS_FILE := $$($1_RES).d.targets\n-      -include $$($1_RES_DEPS_FILE)\n-      -include $$($1_RES_DEPS_TARGETS_FILE)\n-\n-      $1_RES_VARDEPS := $$($1_RC) $$($1_RCFLAGS)\n-      $1_RES_VARDEPS_FILE := $$(call DependOnVariable, $1_RES_VARDEPS, \\\n-          $$($1_RES).vardeps)\n-\n-      $$($1_RES): $$($1_VERSIONINFO_RESOURCE) $$($1_RES_VARDEPS_FILE)\n-\t\t$$(call LogInfo, Compiling resource $$(notdir $$($1_VERSIONINFO_RESOURCE)) (for $$($1_BASENAME)))\n-\t\t$$(call MakeDir, $$(@D) $$($1_OBJECT_DIR))\n-\t\t$$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n-\t\t    $$($1_RC) $$($1_RCFLAGS) $$($1_SYSROOT_CFLAGS) $(CC_OUT_OPTION)$$@ \\\n-\t\t    $$($1_VERSIONINFO_RESOURCE) 2>&1 ))\n-                # Windows RC compiler does not support -showIncludes, so we mis-use CL\n-                # for this. Filter out RC specific arguments that are unknown to CL.\n-                # For some unknown reason, in this case CL actually outputs the show\n-                # includes to stderr so need to redirect it to hide the output from the\n-                # main log.\n-\t\t$$(call ExecuteWithLog, $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX), \\\n-\t\t    $$($1_CC) $$(filter-out -l%, $$($1_RCFLAGS)) \\\n-\t\t        $$($1_SYSROOT_CFLAGS) -showIncludes -nologo -TC \\\n-\t\t        $(CC_OUT_OPTION)$$($1_RES_DEPS_FILE)$(OBJ_SUFFIX) -P -Fi$$($1_RES_DEPS_FILE).pp \\\n-\t\t        $$($1_VERSIONINFO_RESOURCE)) 2>&1 \\\n-\t\t    | $(TR) -d '\\r' | $(GREP) -v -e \"^Note: including file:\" \\\n-\t\t        -e \"^$$(notdir $$($1_VERSIONINFO_RESOURCE))$$$$\" || test \"$$$$?\" = \"1\" ; \\\n-\t\t$(ECHO) $$($1_RES): \\\\ > $$($1_RES_DEPS_FILE) ; \\\n-\t\t$(SED) $(WINDOWS_SHOWINCLUDE_SED_PATTERN) $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX).log \\\n-\t\t    >> $$($1_RES_DEPS_FILE) ; \\\n-\t\t$(ECHO) >> $$($1_RES_DEPS_FILE) ;\\\n-\t\t$(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_RES_DEPS_FILE) \\\n-\t\t    > $$($1_RES_DEPS_TARGETS_FILE)\n-    endif\n-  endif\n-\n+################################################################################\n+# Setup a library-wide dependency file from individual object file dependency\n+# files\n+define CreateDependencyFile\n@@ -1034,0 +343,1 @@\n+endef\n@@ -1035,0 +345,3 @@\n+################################################################################\n+# Import the dependency file into the makefile\n+define ImportDependencyFile\n@@ -1044,322 +357,0 @@\n-\n-  ifneq ($(DISABLE_MAPFILES), true)\n-    $1_REAL_MAPFILE := $$($1_MAPFILE)\n-  endif\n-\n-  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS and TOOLCHAIN_TYPE\n-  # dependent variables for LDFLAGS and LIBS, and additionally the pair dependent\n-  # TOOLCHAIN_TYPE plus OPENJDK_TARGET_OS\n-  $1_EXTRA_LDFLAGS += $$($1_LDFLAGS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_LDFLAGS_$(OPENJDK_TARGET_OS)) \\\n-      $$($1_LDFLAGS_$(TOOLCHAIN_TYPE)) $$($1_LDFLAGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS))\n-  $1_EXTRA_LIBS += $$($1_LIBS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_LIBS_$(OPENJDK_TARGET_OS)) \\\n-      $$($1_LIBS_$(TOOLCHAIN_TYPE)) $$($1_LIBS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS))\n-\n-  ifneq ($$($1_REAL_MAPFILE), )\n-    $1_EXTRA_LDFLAGS += $(call SET_SHARED_LIBRARY_MAPFILE,$$($1_REAL_MAPFILE))\n-  endif\n-\n-  ifneq ($$($1_COPY_DEBUG_SYMBOLS), false)\n-    $1_COPY_DEBUG_SYMBOLS := $(COPY_DEBUG_SYMBOLS)\n-  endif\n-\n-  ifneq ($$($1_ZIP_EXTERNAL_DEBUG_SYMBOLS), false)\n-    $1_ZIP_EXTERNAL_DEBUG_SYMBOLS := $(ZIP_EXTERNAL_DEBUG_SYMBOLS)\n-  endif\n-\n-  ifeq ($$($1_COPY_DEBUG_SYMBOLS), true)\n-    ifneq ($$($1_DEBUG_SYMBOLS), false)\n-      $$(call SetIfEmpty, $1_SYMBOLS_DIR, $$($1_OUTPUT_DIR))\n-      # Only copy debug symbols for dynamic libraries and programs.\n-      ifneq ($$($1_TYPE), STATIC_LIBRARY)\n-        # Generate debuginfo files.\n-        ifeq ($(call isTargetOs, windows), true)\n-          $1_EXTRA_LDFLAGS += -debug \"-pdb:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb\" \\\n-              \"-map:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\"\n-          ifeq ($(SHIP_DEBUG_SYMBOLS), public)\n-            $1_EXTRA_LDFLAGS += \"-pdbstripped:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).stripped.pdb\"\n-          endif\n-          $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb \\\n-              $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\n-\n-        else ifeq ($(call isTargetOs, linux), true)\n-          $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_NOSUFFIX).debuginfo\n-          # Setup the command line creating debuginfo files, to be run after linking.\n-          # It cannot be run separately since it updates the original target file\n-          # Creating the debuglink is done in another command rather than all at once\n-          # so we can run it after strip is called, since strip can sometimes mangle the\n-          # embedded debuglink, which we want to avoid.\n-          $1_CREATE_DEBUGINFO_CMDS := \\\n-              $$($1_OBJCOPY) --only-keep-debug $$($1_TARGET) $$($1_DEBUGINFO_FILES) $$(NEWLINE)\n-          $1_CREATE_DEBUGLINK_CMDS := $(CD) $$($1_SYMBOLS_DIR) && \\\n-              $$($1_OBJCOPY) --add-gnu-debuglink=$$($1_DEBUGINFO_FILES) $$($1_TARGET)\n-\n-        else ifeq ($(call isTargetOs, aix), true)\n-          # AIX does not provide the equivalent of OBJCOPY to extract debug symbols,\n-          # so we copy the compiled object with symbols to the .debuginfo file, which\n-          # happens prior to the STRIP_CMD on the original target object file.\n-          $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_NOSUFFIX).debuginfo\n-          $1_CREATE_DEBUGINFO_CMDS := $(CP) $$($1_TARGET) $$($1_DEBUGINFO_FILES)\n-\n-        else ifeq ($(call isTargetOs, macosx), true)\n-          $1_DEBUGINFO_FILES := \\\n-              $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Info.plist \\\n-              $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Resources\/DWARF\/$$($1_BASENAME)\n-          $1_CREATE_DEBUGINFO_CMDS := \\\n-              $(DSYMUTIL) --out $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).dSYM $$($1_TARGET)\n-        endif\n-\n-        # Since the link rule creates more than one file that we want to track,\n-        # we have to use some tricks to get make to cooperate. To properly\n-        # trigger downstream dependants of $$($1_DEBUGINFO_FILES), we must have\n-        # a recipe in the rule below. To avoid rerunning the recipe every time\n-        # have it touch the target. If a debuginfo file is deleted by something\n-        # external, explicitly delete the TARGET to trigger a rebuild of both.\n-        ifneq ($$(wildcard $$($1_DEBUGINFO_FILES)), $$($1_DEBUGINFO_FILES))\n-          $$(call LogDebug, Deleting $$($1_BASENAME) because debuginfo files are missing)\n-          $$(shell $(RM) $$($1_TARGET))\n-        endif\n-        $$($1_DEBUGINFO_FILES): $$($1_TARGET)\n-\t\t$$(if $$(CORRECT_FUNCTION_IN_RECIPE_EVALUATION), \\\n-\t\t  $$(if $$(wildcard $$@), , $$(error $$@ was not created for $$<)) \\\n-\t\t)\n-\t\t$(TOUCH) $$@\n-\n-        $1 += $$($1_DEBUGINFO_FILES)\n-\n-        ifeq ($$($1_ZIP_EXTERNAL_DEBUG_SYMBOLS), true)\n-          ifeq ($(call isTargetOs, windows), true)\n-            $1_DEBUGINFO_ZIP := $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).diz\n-          else\n-            $1_DEBUGINFO_ZIP := $$($1_SYMBOLS_DIR)\/$$($1_NOSUFFIX).diz\n-          endif\n-          $1 += $$($1_DEBUGINFO_ZIP)\n-\n-          # The dependency on TARGET is needed for debuginfo files\n-          # to be rebuilt properly.\n-          $$($1_DEBUGINFO_ZIP): $$($1_DEBUGINFO_FILES) $$($1_TARGET)\n-\t\t$(CD) $$($1_SYMBOLS_DIR) && \\\n-\t\t    $(ZIPEXE) -q -r $$@ $$(subst $$($1_SYMBOLS_DIR)\/,, $$($1_DEBUGINFO_FILES))\n-\n-        endif\n-       endif # !STATIC_LIBRARY\n-    endif # $1_DEBUG_SYMBOLS != false\n-  endif # COPY_DEBUG_SYMBOLS\n-\n-  # Unless specifically set, stripping should only happen if symbols are also\n-  # being copied.\n-  $$(call SetIfEmpty, $1_STRIP_SYMBOLS, $$($1_COPY_DEBUG_SYMBOLS))\n-\n-  ifneq ($$($1_STRIP_SYMBOLS), false)\n-    ifneq ($$($1_STRIP), )\n-      # Default to using the global STRIPFLAGS. Allow for overriding with an empty value\n-      $1_STRIPFLAGS ?= $(STRIPFLAGS)\n-      $1_STRIP_CMD := $$($1_STRIP) $$($1_STRIPFLAGS) $$($1_TARGET)\n-    endif\n-  endif\n-\n-  $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n-\n-  # If there are many object files, use an @-file...\n-  ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n-    $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n-    ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n-      $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n-    else\n-      # ...except for toolchains which don't support them.\n-      $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n-    endif\n-\n-    # If we are building static library, 'AR' on macosx\/aix may not support @-file.\n-    ifeq ($$($1_TYPE), STATIC_LIBRARY)\n-      ifeq ($(call isTargetOs, macosx aix), true)\n-        $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n-      endif\n-    endif\n-  endif\n-\n-  # Unfortunately the @-file trick does not work reliably when using clang.\n-  # Clang does not propagate the @-file parameter to the ld sub process, but\n-  # instead puts the full content on the command line. At least the llvm ld\n-  # does not even support an @-file.\n-  #\n-  # When linking a large amount of object files, we risk hitting the limit\n-  # of the command line length even on posix systems if the path length of\n-  # the output dir is very long due to our use of absolute paths. To\n-  # mitigate this, use paths relative to the output dir when linking over\n-  # 500 files with clang and the output dir path is deep.\n-  ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n-    ifeq ($$(TOOLCHAIN_TYPE), clang)\n-      # There is no strlen function in make, but checking path depth is a\n-      # reasonable approximation.\n-      ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n-        $1_LINK_OBJS_RELATIVE := true\n-        $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n-      endif\n-    endif\n-  endif\n-\n-  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n-    # Include partial linking when building the static library with clang on linux.\n-    ifeq ($(call isTargetOs, linux), true)\n-      ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n-        $1_ENABLE_PARTIAL_LINKING := true\n-      endif\n-    endif\n-\n-    $1_VARDEPS := $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $$($1_LIBS) \\\n-        $$($1_EXTRA_LIBS)\n-    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-      $1_VARDEPS += $$($1_LD) $$($1_SYSROOT_LDFLAGS)\n-    endif\n-    $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n-        $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n-\n-    # Generating a static library, ie object file archive.\n-    ifeq ($(STATIC_BUILD), true)\n-      ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n-        STATIC_MAPFILE_DEP := $$($1_MAPFILE)\n-      endif\n-    endif\n-\n-    $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE) $$(STATIC_MAPFILE_DEP)\n-\n-    $1_AR_OBJ_ARG := $$($1_LD_OBJ_ARG)\n-    # With clang on linux, partial linking is enabled and 'AR' takes the output\n-    # object from the partial linking step.\n-    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-      $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n-      $1_AR_OBJ_ARG := $$($1_TARGET_RELOCATABLE)\n-    endif\n-\n-    $$($1_TARGET): $$($1_TARGET_DEPS)\n-        ifneq ($$($1_OBJ_FILE_LIST), )\n-          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n-          else\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n-          endif\n-        endif\n-\t$$(call LogInfo, Building static library $$($1_BASENAME))\n-\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n-        # Do partial linking.\n-        ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_partial_link, \\\n-\t    $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n-\t      $$($1_LD) $(LDFLAGS_CXX_PARTIAL_LINKING) $$($1_SYSROOT_LDFLAGS) \\\n-\t        $(LD_OUT_OPTION)$$($1_TARGET_RELOCATABLE) \\\n-                $$($1_LD_OBJ_ARG))\n-        endif\n-\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t  $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n-\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_AR_OBJ_ARG) \\\n-\t        $$($1_RES))\n-        ifeq ($(STATIC_BUILD), true)\n-          ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n-\t    $(CP) $$($1_MAPFILE) $$(@D)\/$$(basename $$(@F)).symbols\n-          else\n-\t    $(GetSymbols)\n-          endif\n-        endif\n-  else\n-    # A shared dynamic library or an executable binary has been specified\n-    ifeq ($$($1_TYPE), LIBRARY)\n-      # Generating a dynamic library.\n-      $1_EXTRA_LDFLAGS += $$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n-\n-      # Create loadmap on AIX. Helps in diagnosing some problems.\n-      ifneq ($(COMPILER_BINDCMD_FILE_FLAG), )\n-        $1_EXTRA_LDFLAGS += $(COMPILER_BINDCMD_FILE_FLAG)$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).loadmap\n-      endif\n-    endif\n-\n-    ifeq ($(call isTargetOs, windows), true)\n-      ifeq ($$($1_EMBED_MANIFEST), true)\n-        $1_EXTRA_LDFLAGS += -manifest:embed\n-      endif\n-\n-      $1_IMPORT_LIBRARY := $$($1_OBJECT_DIR)\/$$($1_NAME).lib\n-      $1_EXTRA_LDFLAGS += \"-implib:$$($1_IMPORT_LIBRARY)\"\n-      ifeq ($$($1_TYPE), LIBRARY)\n-        # To properly trigger downstream dependants of the import library, just as\n-        # for debug files, we must have a recipe in the rule. To avoid rerunning\n-        # the recipe every time have it touch the target. If an import library\n-        # file is deleted by something external, explicitly delete the target to\n-        # trigger a rebuild of both.\n-        ifneq ($$(wildcard $$($1_IMPORT_LIBRARY)), $$($1_IMPORT_LIBRARY))\n-          $$(call LogDebug, Deleting $$($1_BASENAME) because import library is missing)\n-          $$(shell $(RM) $$($1_TARGET))\n-        endif\n-        $$($1_IMPORT_LIBRARY): $$($1_TARGET)\n-\t\t$(TOUCH) $$@\n-\n-        $1 += $$($1_IMPORT_LIBRARY)\n-      endif\n-    endif\n-\n-    $1_VARDEPS := $$($1_LD) $$($1_SYSROOT_LDFLAGS) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) \\\n-        $$($1_LIBS) $$($1_EXTRA_LIBS) $$($1_MT) \\\n-        $$($1_CREATE_DEBUGINFO_CMDS) $$($1_MANIFEST_VERSION) \\\n-        $$($1_STRIP_CMD) $$($1_CREATE_DEBUGLINK_CMDS)\n-    $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n-        $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n-\n-    $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_MANIFEST) \\\n-        $$($1_REAL_MAPFILE) $$($1_VARDEPS_FILE)\n-\n-    $$($1_TARGET): $$($1_TARGET_DEPS)\n-                ifneq ($$($1_OBJ_FILE_LIST), )\n-                  ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n-\t\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n-                  else\n-\t\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n-                  endif\n-                endif\n-                # Keep as much as possible on one execution line for best performance\n-                # on Windows\n-\t\t$$(call LogInfo, Linking $$($1_BASENAME))\n-\t\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n-                ifeq ($(call isTargetOs, windows), true)\n-\n-\t\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n-\t\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n-\t\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) \\\n-\t\t      | $(GREP) -v \"^   Creating library .*\\.lib and object .*\\.exp\" || \\\n-\t\t          test \"$$$$?\" = \"1\" ; \\\n-\t\t  $$($1_CREATE_DEBUGINFO_CMDS)\n-\t\t  $$($1_STRIP_CMD)\n-\t\t  $$($1_CREATE_DEBUGLINK_CMDS)\n-                 ifeq ($(call isBuildOsEnv, windows.wsl2), true)\n-\t\t    $$(CHMOD) +x $$($1_TARGET)\n-                 endif\n-                else\n-\t\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t\t      $$(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n-\t\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n-\t\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n-\t\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) ; \\\n-\t\t  $$($1_CREATE_DEBUGINFO_CMDS)\n-\t\t  $$($1_STRIP_CMD)\n-\t\t  $$($1_CREATE_DEBUGLINK_CMDS)\n-                endif\n-                ifeq ($(call isTargetOs, windows), true)\n-                  ifneq ($$($1_MANIFEST), )\n-\t\t    $$($1_MT) -nologo -manifest $$($1_MANIFEST) -identity:\"$$($1_NAME).exe, version=$$($1_MANIFEST_VERSION)\" -outputresource:$$@;#1\n-                  endif\n-                endif\n-                # On macosx, optionally run codesign on every binary.\n-                # Remove signature explicitly first to avoid warnings if the linker\n-                # added a default adhoc signature.\n-                ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n-\t\t  $(CODESIGN) --remove-signature $$@\n-\t\t  $(CODESIGN) -f -s \"$(MACOSX_CODESIGN_IDENTITY)\" --timestamp --options runtime \\\n-\t\t      --entitlements $$(call GetEntitlementsFile, $$@) $$@\n-                else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n-\t\t  $(CODESIGN) --remove-signature $$@\n-\t\t  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@\n-                endif\n-  endif\n-\n-  ifeq ($(GENERATE_COMPILE_COMMANDS_ONLY), true)\n-    $1 := $$($1_ALL_OBJS_JSON)\n-  endif\n","filename":"make\/common\/NativeCompilation.gmk","additions":118,"deletions":1127,"binary":false,"changes":1245,"status":"modified"},{"patch":"@@ -0,0 +1,351 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to compiling a single native source\n+# file (C, C++ or Objective-C) into an object file. It also harbours related\n+# functionality for generating PCH (precompiled headers) and Windows resource\n+# files.\n+\n+################################################################################\n+# Creates a recipe that creates a compile_commands.json fragment. Remove any\n+# occurrences of FIXPATH programs from the command to show the actual invocation.\n+#\n+# Param 1: Name of file to create\n+# Param 2: Working directory\n+# Param 3: Source file\n+# Param 4: Compile command\n+################################################################################\n+define WriteCompileCommandsFragment\n+  $(call LogInfo, Creating compile commands fragment for $(notdir $3))\n+  $(call MakeDir, $(dir $1))\n+  $(call WriteFile,{ \\\n+      \"directory\": \"$(strip $(call FixPath, $2))\"$(COMMA) \\\n+      \"file\": \"$(strip $(call FixPath, $3))\"$(COMMA) \\\n+      \"command\": \"$(strip $(subst $(DQUOTE),\\$(DQUOTE),$(subst \\,\\\\,\\\n+        $(subst $(FIXPATH),,$(call FixPath, $4)))))\" \\\n+    }$(COMMA), \\\n+    $1)\n+endef\n+\n+################################################################################\n+# Extensions of files handled by this macro.\n+NATIVE_SOURCE_EXTENSIONS := %.S %.c %.cpp %.cc %.m %.mm\n+\n+# Replaces native source extensions with the object file extension in a string.\n+# Param 1: the string containing source file names with extensions\n+# The surrounding strip is needed to keep additional whitespace out\n+define replace_with_obj_extension\n+$(strip \\\n+  $(foreach extension, $(NATIVE_SOURCE_EXTENSIONS), \\\n+      $(patsubst $(extension),%$(OBJ_SUFFIX), $(filter $(extension), $1))) \\\n+)\n+endef\n+\n+################################################################################\n+# This pattern is used to transform the output of the microsoft CL compiler\n+# into a make syntax dependency file (.d)\n+WINDOWS_SHOWINCLUDE_SED_PATTERN := \\\n+    -e '\/^Note: including file:\/!d' \\\n+    -e 's|Note: including file: *||' \\\n+    -e 's|\\r||g' \\\n+    -e 's|\\\\|\/|g' \\\n+    -e 's|^\\([a-zA-Z]\\):|$(WINENV_PREFIX)\/\\1|g' \\\n+    -e '\\|$(TOPDIR)|I !d' \\\n+    -e 's|$$$$| \\\\|g' \\\n+    #\n+\n+################################################################################\n+# This pattern is used to transform a dependency file (.d) to a list\n+# of make targets for dependent files (.d.targets)\n+DEPENDENCY_TARGET_SED_PATTERN := \\\n+    -e 's\/\\#.*\/\/' \\\n+    -e 's\/^[^:]*: *\/\/' \\\n+    -e 's\/ *\\\\$$$$\/\/' \\\n+    -e 's\/^[\t ]*\/\/' \\\n+    -e '\/^$$$$\/ d' \\\n+    -e 's\/$$$$\/ :\/' \\\n+    #\n+\n+################################################################################\n+# Create the recipe needed to compile a single native source file.\n+#\n+# Parameter 1 is the name of the rule, based on the name of the library\/\n+# program being build and the name of the source code file, e.g.\n+# BUILD_LIBFOO_fooMain.cpp.\n+#\n+# Remaining parameters are named arguments:\n+#   FILE - The full path of the source file to compiler\n+#   BASE - The name of the rule for the entire binary to build ($1)\n+#\n+SetupCompileNativeFile = $(NamedParamsMacroTemplate)\n+define SetupCompileNativeFileBody\n+  $1_FILENAME := $$(notdir $$($1_FILE))\n+\n+  # The target file to be generated.\n+  $1_OBJ := $$($$($1_BASE)_OBJECT_DIR)\/$$(call replace_with_obj_extension, \\\n+      $$($1_FILENAME))\n+\n+  # Generate the corresponding compile_commands.json fragment.\n+  $1_OBJ_JSON = $$(MAKESUPPORT_OUTPUTDIR)\/compile-commands\/$$(subst \/,_,$$(subst \\\n+      $$(OUTPUTDIR)\/,,$$($1_OBJ))).json\n+  $$($1_BASE)_ALL_OBJS_JSON += $$($1_OBJ_JSON)\n+\n+  # Only continue if this object file hasn't been processed already. This lets\n+  # the first found source file override any other with the same name.\n+  ifeq ($$($1_OBJ_PROCESSED), )\n+    $1_OBJ_PROCESSED := true\n+    # This is the definite source file to use for $1_FILENAME.\n+    $1_SRC_FILE := $$($1_FILE)\n+\n+    $$(eval $$(call SetupCompileFileFlags,$1))\n+\n+    ifneq ($$(filter %.c, $$($1_FILENAME)), )\n+      # Compile as a C file\n+      $1_CFLAGS += $$($1_WARNINGS_FLAGS)\n+      $1_FLAGS := $(CFLAGS_CCACHE) $$($1_USE_PCH_FLAGS) $$($1_BASE_CFLAGS) \\\n+          $$($1_OPT_CFLAGS) $$($1_CFLAGS) -c\n+      $1_COMPILER := $$($$($1_BASE)_CC)\n+    else ifneq ($$(filter %.m, $$($1_FILENAME)), )\n+      # Compile as an Objective-C file\n+      $1_CFLAGS += $$($1_WARNINGS_FLAGS)\n+      $1_FLAGS := -x objective-c $(CFLAGS_CCACHE) $$($1_USE_PCH_FLAGS) \\\n+          $$($1_BASE_CFLAGS) $$($1_OPT_CFLAGS) $$($1_CFLAGS) -c\n+      $1_COMPILER := $$($$($1_BASE)_CC)\n+    else ifneq ($$(filter %.S, $$($1_FILENAME)), )\n+      # Compile as preprocessed assembler file\n+      $1_FLAGS := $(BASIC_ASFLAGS) $$($1_BASE_ASFLAGS)\n+      $1_COMPILER := $(AS)\n+\n+      # gcc or clang assembly files must contain an appropriate relative .file\n+      # path for reproducible builds.\n+      ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n+        # If no absolute paths allowed, work out relative source file path\n+        # for assembly .file substitution, otherwise use full file path\n+        ifeq ($(ALLOW_ABSOLUTE_PATHS_IN_OUTPUT), false)\n+          $1_REL_ASM_SRC := $$(call RelativePath, $$($1_FILE), $(WORKSPACE_ROOT))\n+        else\n+          $1_REL_ASM_SRC := $$($1_FILE)\n+        endif\n+        $1_FLAGS := $$($1_FLAGS) -DASSEMBLY_SRC_FILE='\"$$($1_REL_ASM_SRC)\"' \\\n+            -include $(TOPDIR)\/make\/data\/autoheaders\/assemblyprefix.h\n+      endif\n+    else ifneq ($$(filter %.cpp %.cc %.mm, $$($1_FILENAME)), )\n+      # Compile as a C++ or Objective-C++ file\n+      $1_CXXFLAGS += $$($1_WARNINGS_FLAGS)\n+      $1_FLAGS := $(CFLAGS_CCACHE) $$($1_USE_PCH_FLAGS) $$($1_BASE_CXXFLAGS) \\\n+          $$($1_OPT_CXXFLAGS) $$($1_CXXFLAGS) -c\n+      $1_COMPILER := $$($$($1_BASE)_CXX)\n+    else\n+      $$(error Internal error in NativeCompilation.gmk: no compiler for file $$($1_FILENAME))\n+    endif\n+\n+    # And this is the dependency file for this obj file.\n+    $1_DEPS_FILE := $$(patsubst %$(OBJ_SUFFIX),%.d,$$($1_OBJ))\n+    # The dependency target file lists all dependencies as empty targets to\n+    # avoid make error \"No rule to make target\" for removed files\n+    $1_DEPS_TARGETS_FILE := $$(patsubst %$(OBJ_SUFFIX),%.d.targets,$$($1_OBJ))\n+\n+    # Only try to load individual dependency information files if the global\n+    # file hasn't been loaded (could happen if make was interrupted).\n+    ifneq ($$($$($1_BASE)_DEPS_FILE_LOADED), true)\n+      # Include previously generated dependency information. (if it exists)\n+      -include $$($1_DEPS_FILE)\n+      -include $$($1_DEPS_TARGETS_FILE)\n+    endif\n+\n+    ifneq ($$(strip $$($1_CFLAGS) $$($1_CXXFLAGS) $$($1_OPTIMIZATION)), )\n+      $1_VARDEPS := $$($1_CFLAGS) $$($1_CXXFLAGS) $$($1_OPTIMIZATION)\n+      $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, $$($1_OBJ).vardeps)\n+    endif\n+\n+    $1_OBJ_DEPS := $$($1_SRC_FILE) $$($$($1_BASE)_COMPILE_VARDEPS_FILE) \\\n+        $$($$($1_BASE)_EXTRA_DEPS) $$($1_VARDEPS_FILE)\n+    $1_COMPILE_OPTIONS := $$($1_FLAGS) $(CC_OUT_OPTION)$$($1_OBJ) $$($1_SRC_FILE)\n+    # For reproducible builds with gcc and clang ensure random symbol generation is\n+    # seeded deterministically\n+    ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n+      $1_COMPILE_OPTIONS += -frandom-seed=\"$$($1_FILENAME)\"\n+    endif\n+\n+    $$($1_OBJ_JSON): $$($1_OBJ_DEPS)\n+\t$$(call WriteCompileCommandsFragment, $$@, $$(PWD), $$($1_SRC_FILE), \\\n+\t    $$($1_COMPILER) $$($1_COMPILE_OPTIONS))\n+\n+    $$($1_OBJ): $$($1_OBJ_DEPS) | $$($$($1_BASE)_BUILD_INFO)\n+\t$$(call LogInfo, Compiling $$($1_FILENAME) (for $$($$($1_BASE)_BASENAME)))\n+\t$$(call MakeDir, $$(@D))\n+        ifneq ($(TOOLCHAIN_TYPE), microsoft)\n+\t  $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n+\t      $$($1_COMPILER) $$(GENDEPS_FLAGS) \\\n+\t      $$(addsuffix .tmp, $$($1_DEPS_FILE)) \\\n+\t      $$($1_COMPILE_OPTIONS)))\n+          ifneq ($$($1_DEPS_FILE), )\n+\t    $$(call fix-deps-file, $$($1_DEPS_FILE))\n+            # Create a dependency target file from the dependency file.\n+            # Solution suggested by:\n+            # http:\/\/make.mad-scientist.net\/papers\/advanced-auto-dependency-generation\/\n+\t    $(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_DEPS_FILE) \\\n+\t        > $$($1_DEPS_TARGETS_FILE)\n+          endif\n+        else\n+          # The Visual Studio compiler lacks a feature for generating make\n+          # dependencies, but by setting -showIncludes, all included files are\n+          # printed. These are filtered out and parsed into make dependences.\n+          #\n+          # Keep as much as possible on one execution line for best performance\n+          # on Windows. No need to save exit code from compilation since\n+          # pipefail is always active on Windows.\n+          ifeq ($$(filter %.S, $$($1_FILENAME)), )\n+\t    $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n+\t        $$($1_COMPILER) -showIncludes $$($1_COMPILE_OPTIONS))) \\\n+\t        | $(TR) -d '\\r' | $(GREP) -v -e \"^Note: including file:\" \\\n+\t            -e \"^$$($1_FILENAME)$$$$\" || test \"$$$$?\" = \"1\" ; \\\n+\t    $(ECHO) $$@: \\\\ > $$($1_DEPS_FILE) ; \\\n+\t    $(SED) $(WINDOWS_SHOWINCLUDE_SED_PATTERN) $$($1_OBJ).log \\\n+\t        | $(SORT) -u >> $$($1_DEPS_FILE) ; \\\n+\t    $(ECHO) >> $$($1_DEPS_FILE) ; \\\n+\t    $(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_DEPS_FILE) > $$($1_DEPS_TARGETS_FILE)\n+          else\n+            # For assembler calls just create empty dependency lists\n+\t    $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n+\t        $$($1_COMPILER) $$($1_FLAGS) \\\n+\t        $(CC_OUT_OPTION)$$($1_OBJ) -Ta $$($1_SRC_FILE))) \\\n+\t        | $(TR) -d '\\r' | $(GREP) -v -e \"Assembling:\" || test \"$$$$?\" = \"1\" ; \\\n+\t    $(ECHO) > $$($1_DEPS_FILE) ; \\\n+\t    $(ECHO) > $$($1_DEPS_TARGETS_FILE)\n+          endif\n+        endif\n+  endif\n+endef\n+\n+################################################################################\n+define CreatePrecompiledHeader\n+  ifneq ($$($1_PRECOMPILED_HEADER), )\n+    ifeq ($(USE_PRECOMPILED_HEADER), true)\n+      ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+        $1_PCH_FILE := $$($1_OBJECT_DIR)\/$1.pch\n+        $1_GENERATED_PCH_SRC := $$($1_OBJECT_DIR)\/$1_pch.cpp\n+        $1_GENERATED_PCH_OBJ := $$($1_OBJECT_DIR)\/$1_pch$(OBJ_SUFFIX)\n+\n+        $$(eval $$(call SetupCompileNativeFile, $1_$$(notdir $$($1_GENERATED_PCH_SRC)), \\\n+            FILE := $$($1_GENERATED_PCH_SRC), \\\n+            BASE := $1, \\\n+            EXTRA_CXXFLAGS := -Fp$$($1_PCH_FILE) -Yc$$(notdir $$($1_PRECOMPILED_HEADER)), \\\n+        ))\n+\n+        $1_USE_PCH_FLAGS := \\\n+            -Fp$$($1_PCH_FILE) -Yu$$(notdir $$($1_PRECOMPILED_HEADER))\n+\n+        $$($1_ALL_OBJS): $$($1_GENERATED_PCH_OBJ)\n+\n+        # Explicitly add the pch obj file first to ease comparing to old\n+        # hotspot build.\n+        $1_ALL_OBJS := $$($1_GENERATED_PCH_OBJ) $$($1_ALL_OBJS)\n+\n+        $$($1_GENERATED_PCH_SRC):\n+\t\t$(ECHO) \"#include \\\"$$(notdir $$($1_PRECOMPILED_HEADER))\\\"\" > $$@\n+\n+      else ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n+        ifeq ($(TOOLCHAIN_TYPE), gcc)\n+          $1_PCH_FILE := $$($1_OBJECT_DIR)\/precompiled\/$$(notdir $$($1_PRECOMPILED_HEADER)).gch\n+          $1_USE_PCH_FLAGS := -I$$($1_OBJECT_DIR)\/precompiled\n+        else ifeq ($(TOOLCHAIN_TYPE), clang)\n+          $1_PCH_FILE := $$($1_OBJECT_DIR)\/precompiled\/$$(notdir $$($1_PRECOMPILED_HEADER)).pch\n+          $1_USE_PCH_FLAGS := -include-pch $$($1_PCH_FILE)\n+        endif\n+        $1_PCH_DEPS_FILE := $$($1_PCH_FILE).d\n+        $1_PCH_DEPS_TARGETS_FILE := $$($1_PCH_FILE).d.targets\n+\n+        -include $$($1_PCH_DEPS_FILE)\n+        -include $$($1_PCH_DEPS_TARGETS_FILE)\n+\n+        $1_PCH_COMMAND := $$($1_CC) $$($1_CFLAGS) $$($1_EXTRA_CFLAGS) $$($1_SYSROOT_CFLAGS) \\\n+            $$($1_OPT_CFLAGS) -x c++-header -c $(GENDEPS_FLAGS) \\\n+            $$(addsuffix .tmp, $$($1_PCH_DEPS_FILE))\n+\n+        $$($1_PCH_FILE): $$($1_PRECOMPILED_HEADER) $$($1_COMPILE_VARDEPS_FILE)\n+\t\t$$(call LogInfo, Generating precompiled header)\n+\t\t$$(call MakeDir, $$(@D))\n+\t\t$$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n+\t\t    $$($1_PCH_COMMAND) $$< -o $$@))\n+\t\t$$(call fix-deps-file, $$($1_PCH_DEPS_FILE))\n+\t\t$(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_PCH_DEPS_FILE) \\\n+\t\t    > $$($1_PCH_DEPS_TARGETS_FILE)\n+\n+        $$($1_ALL_OBJS): $$($1_PCH_FILE)\n+\n+        # Generate the corresponding compile_commands.json fragment.\n+        $1_PCH_FILE_JSON := $$(MAKESUPPORT_OUTPUTDIR)\/compile-commands\/$$(subst \/,_,$$(subst \\\n+            $$(OUTPUTDIR)\/,,$$($1_PCH_FILE))).json\n+        $1_ALL_OBJS_JSON += $$($1_PCH_FILE_JSON)\n+\n+        $$($1_PCH_FILE_JSON): $$($1_PRECOMPILED_HEADER) $$($1_COMPILE_VARDEPS_FILE)\n+\t\t$$(call WriteCompileCommandsFragment, $$@, $$(PWD), $$<, \\\n+\t\t    $$($1_PCH_COMMAND) $$< -o $$($1_PCH_FILE))\n+      endif\n+    endif\n+  endif\n+endef\n+\n+################################################################################\n+define CreateWindowsResourceFile\n+  ifneq ($$($1_VERSIONINFO_RESOURCE), )\n+    $1_RES := $$($1_OBJECT_DIR)\/$$($1_BASENAME).res\n+    $1_RES_DEPS_FILE := $$($1_RES).d\n+    $1_RES_DEPS_TARGETS_FILE := $$($1_RES).d.targets\n+    -include $$($1_RES_DEPS_FILE)\n+    -include $$($1_RES_DEPS_TARGETS_FILE)\n+\n+    $1_RES_VARDEPS := $$($1_RC) $$($1_RCFLAGS)\n+    $1_RES_VARDEPS_FILE := $$(call DependOnVariable, $1_RES_VARDEPS, \\\n+        $$($1_RES).vardeps)\n+\n+    $$($1_RES): $$($1_VERSIONINFO_RESOURCE) $$($1_RES_VARDEPS_FILE)\n+\t\t$$(call LogInfo, Compiling resource $$(notdir $$($1_VERSIONINFO_RESOURCE)) (for $$($1_BASENAME)))\n+\t\t$$(call MakeDir, $$(@D) $$($1_OBJECT_DIR))\n+\t\t$$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n+\t\t    $$($1_RC) $$($1_RCFLAGS) $$($1_SYSROOT_CFLAGS) $(CC_OUT_OPTION)$$@ \\\n+\t\t    $$($1_VERSIONINFO_RESOURCE) 2>&1 ))\n+                # Windows RC compiler does not support -showIncludes, so we mis-use CL\n+                # for this. Filter out RC specific arguments that are unknown to CL.\n+                # For some unknown reason, in this case CL actually outputs the show\n+                # includes to stderr so need to redirect it to hide the output from the\n+                # main log.\n+\t\t$$(call ExecuteWithLog, $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX), \\\n+\t\t    $$($1_CC) $$(filter-out -l%, $$($1_RCFLAGS)) \\\n+\t\t        $$($1_SYSROOT_CFLAGS) -showIncludes -nologo -TC \\\n+\t\t        $(CC_OUT_OPTION)$$($1_RES_DEPS_FILE)$(OBJ_SUFFIX) -P -Fi$$($1_RES_DEPS_FILE).pp \\\n+\t\t        $$($1_VERSIONINFO_RESOURCE)) 2>&1 \\\n+\t\t    | $(TR) -d '\\r' | $(GREP) -v -e \"^Note: including file:\" \\\n+\t\t        -e \"^$$(notdir $$($1_VERSIONINFO_RESOURCE))$$$$\" || test \"$$$$?\" = \"1\" ; \\\n+\t\t$(ECHO) $$($1_RES): \\\\ > $$($1_RES_DEPS_FILE) ; \\\n+\t\t$(SED) $(WINDOWS_SHOWINCLUDE_SED_PATTERN) $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX).log \\\n+\t\t    >> $$($1_RES_DEPS_FILE) ; \\\n+\t\t$(ECHO) >> $$($1_RES_DEPS_FILE) ;\\\n+\t\t$(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_RES_DEPS_FILE) \\\n+\t\t    > $$($1_RES_DEPS_TARGETS_FILE)\n+  endif\n+endef\n","filename":"make\/common\/native\/CompileFile.gmk","additions":351,"deletions":0,"binary":false,"changes":351,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to native debug symbol handling.\n+\n+################################################################################\n+define SetupDebugSymbols\n+  $$(call SetIfEmpty, $1_COMPILE_WITH_DEBUG_SYMBOLS, $$(COMPILE_WITH_DEBUG_SYMBOLS))\n+\n+  ifeq ($(STATIC_LIBS), true)\n+    # For release builds where debug symbols are configured to be moved to\n+    # separate debuginfo files, disable debug symbols for static libs instead.\n+    # We don't currently support this configuration and we don't want symbol\n+    # information in release builds unless explicitly asked to provide it.\n+    ifeq ($(DEBUG_LEVEL), release)\n+      ifeq ($(COPY_DEBUG_SYMBOLS), true)\n+        $1_COMPILE_WITH_DEBUG_SYMBOLS := false\n+      endif\n+    endif\n+  endif\n+endef\n+\n+################################################################################\n+define CreateDebugSymbols\n+  ifneq ($$($1_COPY_DEBUG_SYMBOLS), false)\n+    $1_COPY_DEBUG_SYMBOLS := $(COPY_DEBUG_SYMBOLS)\n+  endif\n+\n+  ifneq ($$($1_ZIP_EXTERNAL_DEBUG_SYMBOLS), false)\n+    $1_ZIP_EXTERNAL_DEBUG_SYMBOLS := $(ZIP_EXTERNAL_DEBUG_SYMBOLS)\n+  endif\n+\n+  ifeq ($$($1_COPY_DEBUG_SYMBOLS), true)\n+    ifneq ($$($1_DEBUG_SYMBOLS), false)\n+      $$(call SetIfEmpty, $1_SYMBOLS_DIR, $$($1_OUTPUT_DIR))\n+      # Only copy debug symbols for dynamic libraries and programs.\n+      ifneq ($$($1_TYPE), STATIC_LIBRARY)\n+        # Generate debuginfo files.\n+        ifeq ($(call isTargetOs, windows), true)\n+          $1_EXTRA_LDFLAGS += -debug \"-pdb:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb\" \\\n+              \"-map:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\"\n+          ifeq ($(SHIP_DEBUG_SYMBOLS), public)\n+            $1_EXTRA_LDFLAGS += \"-pdbstripped:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).stripped.pdb\"\n+          endif\n+          $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb \\\n+              $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\n+\n+        else ifeq ($(call isTargetOs, linux), true)\n+          $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_NOSUFFIX).debuginfo\n+          # Setup the command line creating debuginfo files, to be run after linking.\n+          # It cannot be run separately since it updates the original target file\n+          # Creating the debuglink is done in another command rather than all at once\n+          # so we can run it after strip is called, since strip can sometimes mangle the\n+          # embedded debuglink, which we want to avoid.\n+          $1_CREATE_DEBUGINFO_CMDS := \\\n+              $$($1_OBJCOPY) --only-keep-debug $$($1_TARGET) $$($1_DEBUGINFO_FILES) $$(NEWLINE)\n+          $1_CREATE_DEBUGLINK_CMDS := $(CD) $$($1_SYMBOLS_DIR) && \\\n+              $$($1_OBJCOPY) --add-gnu-debuglink=$$($1_DEBUGINFO_FILES) $$($1_TARGET)\n+\n+        else ifeq ($(call isTargetOs, aix), true)\n+          # AIX does not provide the equivalent of OBJCOPY to extract debug symbols,\n+          # so we copy the compiled object with symbols to the .debuginfo file, which\n+          # happens prior to the STRIP_CMD on the original target object file.\n+          $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_NOSUFFIX).debuginfo\n+          $1_CREATE_DEBUGINFO_CMDS := $(CP) $$($1_TARGET) $$($1_DEBUGINFO_FILES)\n+\n+        else ifeq ($(call isTargetOs, macosx), true)\n+          $1_DEBUGINFO_FILES := \\\n+              $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Info.plist \\\n+              $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Resources\/DWARF\/$$($1_BASENAME)\n+          $1_CREATE_DEBUGINFO_CMDS := \\\n+              $(DSYMUTIL) --out $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).dSYM $$($1_TARGET)\n+        endif\n+\n+        # Since the link rule creates more than one file that we want to track,\n+        # we have to use some tricks to get make to cooperate. To properly\n+        # trigger downstream dependants of $$($1_DEBUGINFO_FILES), we must have\n+        # a recipe in the rule below. To avoid rerunning the recipe every time\n+        # have it touch the target. If a debuginfo file is deleted by something\n+        # external, explicitly delete the TARGET to trigger a rebuild of both.\n+        ifneq ($$(wildcard $$($1_DEBUGINFO_FILES)), $$($1_DEBUGINFO_FILES))\n+          $$(call LogDebug, Deleting $$($1_BASENAME) because debuginfo files are missing)\n+          $$(shell $(RM) $$($1_TARGET))\n+        endif\n+        $$($1_DEBUGINFO_FILES): $$($1_TARGET)\n+\t\t$$(if $$(CORRECT_FUNCTION_IN_RECIPE_EVALUATION), \\\n+\t\t  $$(if $$(wildcard $$@), , $$(error $$@ was not created for $$<)) \\\n+\t\t)\n+\t\t$(TOUCH) $$@\n+\n+        $1 += $$($1_DEBUGINFO_FILES)\n+\n+        ifeq ($$($1_ZIP_EXTERNAL_DEBUG_SYMBOLS), true)\n+          ifeq ($(call isTargetOs, windows), true)\n+            $1_DEBUGINFO_ZIP := $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).diz\n+          else\n+            $1_DEBUGINFO_ZIP := $$($1_SYMBOLS_DIR)\/$$($1_NOSUFFIX).diz\n+          endif\n+          $1 += $$($1_DEBUGINFO_ZIP)\n+\n+          # The dependency on TARGET is needed for debuginfo files\n+          # to be rebuilt properly.\n+          $$($1_DEBUGINFO_ZIP): $$($1_DEBUGINFO_FILES) $$($1_TARGET)\n+\t\t$(CD) $$($1_SYMBOLS_DIR) && \\\n+\t\t    $(ZIPEXE) -q -r $$@ $$(subst $$($1_SYMBOLS_DIR)\/,, $$($1_DEBUGINFO_FILES))\n+\n+        endif\n+       endif # !STATIC_LIBRARY\n+    endif # $1_DEBUG_SYMBOLS != false\n+  endif # COPY_DEBUG_SYMBOLS\n+endef\n","filename":"make\/common\/native\/DebugSymbols.gmk","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,209 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to setting up compiler and linker\n+# flags, based on various more abstract sources of compilation description,\n+# like optimization level.\n+\n+################################################################################\n+define SetupCompileFileFlags\n+  ifeq ($$($1_OPTIMIZATION), )\n+    $1_OPT_CFLAGS := $$($$($1_BASE)_OPT_CFLAGS)\n+    $1_OPT_CXXFLAGS := $$($$($1_BASE)_OPT_CXXFLAGS)\n+  else\n+    ifeq ($$($1_OPTIMIZATION), NONE)\n+      $1_OPT_CFLAGS := $(C_O_FLAG_NONE)\n+      $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NONE)\n+    else ifeq ($$($1_OPTIMIZATION), LOW)\n+      $1_OPT_CFLAGS := $(C_O_FLAG_NORM)\n+      $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NORM)\n+    else ifeq ($$($1_OPTIMIZATION), HIGH)\n+      $1_OPT_CFLAGS := $(C_O_FLAG_HI)\n+      $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HI)\n+    else ifeq ($$($1_OPTIMIZATION), HIGHEST)\n+      $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST)\n+      $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST)\n+    else ifeq ($$($1_OPTIMIZATION), HIGHEST_JVM)\n+      $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST_JVM)\n+      $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST_JVM)\n+    else ifeq ($$($1_OPTIMIZATION), SIZE)\n+      $1_OPT_CFLAGS := $(C_O_FLAG_SIZE)\n+      $1_OPT_CXXFLAGS := $(CXX_O_FLAG_SIZE)\n+    else\n+      $$(error Unknown value for file OPTIMIZATION: $$($1_OPTIMIZATION))\n+    endif\n+  endif\n+\n+  ifneq ($$($$($1_BASE)_PRECOMPILED_HEADER), )\n+    ifeq ($$(filter $$($1_FILENAME), $$($$($1_BASE)_PRECOMPILED_HEADER_EXCLUDE)), )\n+      $1_USE_PCH_FLAGS := $$($$($1_BASE)_USE_PCH_FLAGS)\n+    endif\n+  endif\n+\n+  ifneq ($(DISABLE_WARNING_PREFIX), )\n+    $1_WARNINGS_FLAGS := $$(addprefix $(DISABLE_WARNING_PREFIX), \\\n+      $$($$($1_BASE)_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$$($1_FILENAME)) \\\n+      $$($$($1_BASE)_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)_$$($1_FILENAME)))\n+  endif\n+\n+  $1_BASE_CFLAGS :=  $$($$($1_BASE)_CFLAGS) $$($$($1_BASE)_EXTRA_CFLAGS) \\\n+      $$($$($1_BASE)_SYSROOT_CFLAGS)\n+  $1_BASE_CXXFLAGS := $$($$($1_BASE)_CXXFLAGS) $$($$($1_BASE)_EXTRA_CXXFLAGS) \\\n+      $$($$($1_BASE)_SYSROOT_CFLAGS) $$($1_EXTRA_CXXFLAGS)\n+  $1_BASE_ASFLAGS := $$($$($1_BASE)_ASFLAGS) $$($$($1_BASE)_EXTRA_ASFLAGS)\n+endef\n+\n+################################################################################\n+define SetupCompilerFlags\n+  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS, TOOLCHAIN_TYPE and\n+  # OPENJDK_TARGET_OS plus OPENJDK_TARGET_CPU pair dependent variables for CFLAGS.\n+  $1_EXTRA_CFLAGS := $$($1_CFLAGS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_CFLAGS_$(OPENJDK_TARGET_OS)) \\\n+      $$($1_CFLAGS_$(TOOLCHAIN_TYPE)) \\\n+      $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU))\n+\n+  ifneq ($(DEBUG_LEVEL), release)\n+    # Pickup extra debug dependent variables for CFLAGS\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_debug)\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS_TYPE)_debug)\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_debug)\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU)_debug)\n+  else\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_release)\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS_TYPE)_release)\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_release)\n+    $1_EXTRA_CFLAGS += $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU)_release)\n+  endif\n+  ifeq ($(STATIC_LIBS), true)\n+    $1_EXTRA_CFLAGS += $$(STATIC_LIBS_CFLAGS)\n+  endif\n+\n+  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS and\/or TOOLCHAIN_TYPE\n+  # dependent variables for CXXFLAGS.\n+  $1_EXTRA_CXXFLAGS := $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)) \\\n+      $$($1_CXXFLAGS_$(TOOLCHAIN_TYPE))\n+\n+  ifneq ($(DEBUG_LEVEL), release)\n+    # Pickup extra debug dependent variables for CXXFLAGS\n+    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_debug)\n+    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_TYPE)_debug)\n+    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)_debug)\n+  else\n+    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_release)\n+    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_TYPE)_release)\n+    $1_EXTRA_CXXFLAGS += $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)_release)\n+  endif\n+  ifeq ($(STATIC_LIBS), true)\n+    $1_EXTRA_CXXFLAGS += $$(STATIC_LIB_CFLAGS)\n+  endif\n+\n+  # If no C++ flags are explicitly set, default to using the C flags.\n+  # After that, we can set additional C++ flags that should not interfere\n+  # with the mechanism for copying the C flags by default.\n+  ifeq ($$($1_CXXFLAGS), )\n+    $1_CXXFLAGS := $$($1_CFLAGS)\n+  endif\n+  ifeq ($$(strip $$($1_EXTRA_CXXFLAGS)), )\n+    $1_EXTRA_CXXFLAGS := $$($1_EXTRA_CFLAGS)\n+  endif\n+\n+  ifeq ($$($1_COMPILE_WITH_DEBUG_SYMBOLS), true)\n+    $1_EXTRA_CFLAGS += $$(CFLAGS_DEBUG_SYMBOLS)\n+    $1_EXTRA_CXXFLAGS += $$(CFLAGS_DEBUG_SYMBOLS)\n+    $1_EXTRA_ASFLAGS += $$(ASFLAGS_DEBUG_SYMBOLS)\n+  endif\n+\n+  # Pass the library name for static JNI library naming\n+  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n+    $1_EXTRA_CFLAGS += -DLIBRARY_NAME=$$($1_NAME)\n+    $1_EXTRA_CXXFLAGS += -DLIBRARY_NAME=$$($1_NAME)\n+  endif\n+\n+  # Pick up disabled warnings, if possible on this platform.\n+  ifneq ($(DISABLE_WARNING_PREFIX), )\n+    $1_EXTRA_CFLAGS += $$(addprefix $(DISABLE_WARNING_PREFIX), \\\n+        $$(DISABLED_WARNINGS) \\\n+        $$(DISABLED_WARNINGS_C) \\\n+        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)) \\\n+        $$($1_DISABLED_WARNINGS_C_$(TOOLCHAIN_TYPE)) \\\n+        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)) \\\n+        $$($1_DISABLED_WARNINGS_C_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)))\n+    $1_EXTRA_CXXFLAGS += $$(addprefix $(DISABLE_WARNING_PREFIX), \\\n+        $$(DISABLED_WARNINGS) \\\n+        $$(DISABLED_WARNINGS_CXX) \\\n+        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)) \\\n+        $$($1_DISABLED_WARNINGS_CXX_$(TOOLCHAIN_TYPE)) \\\n+        $$($1_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)) \\\n+        $$($1_DISABLED_WARNINGS_CXX_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)))\n+  endif\n+\n+  # Check if warnings should be considered errors.\n+  # Pick first binary and toolchain specific, then binary specific, then general setting.\n+  ifeq ($$($1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE)), )\n+    ifeq ($$($1_WARNINGS_AS_ERRORS), )\n+      $1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE) := $$(WARNINGS_AS_ERRORS)\n+    else\n+      $1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE) := $$($1_WARNINGS_AS_ERRORS)\n+    endif\n+  endif\n+\n+  ifeq ($$($1_WARNINGS_AS_ERRORS_$(TOOLCHAIN_TYPE)), true)\n+    $1_EXTRA_CFLAGS += $(CFLAGS_WARNINGS_ARE_ERRORS)\n+    $1_EXTRA_CXXFLAGS += $(CFLAGS_WARNINGS_ARE_ERRORS)\n+  endif\n+\n+  ifeq (NONE, $$($1_OPTIMIZATION))\n+    $1_OPT_CFLAGS := $(C_O_FLAG_NONE)\n+    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NONE)\n+  else ifeq (LOW, $$($1_OPTIMIZATION))\n+    $1_OPT_CFLAGS := $(C_O_FLAG_NORM)\n+    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_NORM)\n+  else ifeq (HIGH, $$($1_OPTIMIZATION))\n+    $1_OPT_CFLAGS := $(C_O_FLAG_HI)\n+    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HI)\n+  else ifeq (HIGHEST, $$($1_OPTIMIZATION))\n+    $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST)\n+    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST)\n+  else ifeq (HIGHEST_JVM, $$($1_OPTIMIZATION))\n+    $1_OPT_CFLAGS := $(C_O_FLAG_HIGHEST_JVM)\n+    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_HIGHEST_JVM)\n+  else ifeq (SIZE, $$($1_OPTIMIZATION))\n+    $1_OPT_CFLAGS := $(C_O_FLAG_SIZE)\n+    $1_OPT_CXXFLAGS := $(CXX_O_FLAG_SIZE)\n+  else ifneq (, $$($1_OPTIMIZATION))\n+    $$(error Unknown value for OPTIMIZATION: $$($1_OPTIMIZATION))\n+  endif\n+endef\n+\n+################################################################################\n+define SetupLinkerFlags\n+  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS and TOOLCHAIN_TYPE\n+  # dependent variables for LDFLAGS and LIBS, and additionally the pair dependent\n+  # TOOLCHAIN_TYPE plus OPENJDK_TARGET_OS\n+  $1_EXTRA_LDFLAGS += $$($1_LDFLAGS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_LDFLAGS_$(OPENJDK_TARGET_OS)) \\\n+      $$($1_LDFLAGS_$(TOOLCHAIN_TYPE)) $$($1_LDFLAGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS))\n+  $1_EXTRA_LIBS += $$($1_LIBS_$(OPENJDK_TARGET_OS_TYPE)) $$($1_LIBS_$(OPENJDK_TARGET_OS)) \\\n+      $$($1_LIBS_$(TOOLCHAIN_TYPE)) $$($1_LIBS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS))\n+endef\n","filename":"make\/common\/native\/Flags.gmk","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"},{"patch":"@@ -0,0 +1,262 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to linking a native binary;\n+# creating either a dynamic library, a static library or an executable.\n+\n+################################################################################\n+# Create exported symbols file for static libraries\n+################################################################################\n+\n+# get the exported symbols from mapfiles and if there\n+# is no mapfile, get them from the archive\n+define GetSymbols\n+  $(RM) $$(@D)\/$$(basename $$(@F)).symbols; \\\n+  if [ ! -z $$($1_MAPFILE) -a -e $$($1_MAPFILE) ]; then \\\n+    $(ECHO) \"Getting symbols from mapfile $$($1_MAPFILE)\"; \\\n+    $(AWK) '\/global:\/','\/local:\/' $$($1_MAPFILE) | \\\n+        $(SED) -e 's\/#.*\/\/;s\/global:\/\/;s\/local:\/\/;s\/\\;\/\/;s\/^[ \t]*\/_\/;\/^_$$$$\/d' | \\\n+        $(EGREP) -v \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" > \\\n+        $$(@D)\/$$(basename $$(@F)).symbols || true; \\\n+    $(NM) $(NMFLAGS) $$($1_TARGET) | $(GREP)  \" T \" | \\\n+        $(EGREP) \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" | \\\n+        $(CUT) -d ' ' -f 3 >>  $$(@D)\/$$(basename $$(@F)).symbols || true;\\\n+  else \\\n+    $(ECHO) \"Getting symbols from nm\"; \\\n+    $(NM) $(NMFLAGS) -m $$($1_TARGET) | $(GREP)  \"__TEXT\" | \\\n+        $(EGREP) -v \"non-external|private extern|__TEXT,__eh_frame\" | \\\n+        $(SED) -e  's\/.* \/\/' > $$(@D)\/$$(basename $$(@F)).symbols; \\\n+  fi\n+endef\n+\n+################################################################################\n+# GetEntitlementsFile\n+# Find entitlements file for executable when signing on macosx. If no\n+# specialized file is found, returns the default file.\n+# $1 Executable to find entitlements file for.\n+ENTITLEMENTS_DIR := $(TOPDIR)\/make\/data\/macosxsigning\n+ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+  CODESIGN_PLIST_SUFFIX := -debug\n+else\n+  CODESIGN_PLIST_SUFFIX :=\n+endif\n+DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default$(CODESIGN_PLIST_SUFFIX).plist\n+\n+GetEntitlementsFile = \\\n+    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1))$(CODESIGN_PLIST_SUFFIX).plist, \\\n+      $(if $(wildcard $f), $f, $(DEFAULT_ENTITLEMENTS_FILE)) \\\n+    )\n+\n+################################################################################\n+define SetupMapfile\n+  ifneq ($(DISABLE_MAPFILES), true)\n+    $1_REAL_MAPFILE := $$($1_MAPFILE)\n+  endif\n+\n+  ifneq ($$($1_REAL_MAPFILE), )\n+    $1_EXTRA_LDFLAGS += $(call SET_SHARED_LIBRARY_MAPFILE,$$($1_REAL_MAPFILE))\n+  endif\n+endef\n+\n+################################################################################\n+define SetupStrip\n+  # Unless specifically set, stripping should only happen if symbols are also\n+  # being copied.\n+  $$(call SetIfEmpty, $1_STRIP_SYMBOLS, $$($1_COPY_DEBUG_SYMBOLS))\n+\n+  ifneq ($$($1_STRIP_SYMBOLS), false)\n+    ifneq ($$($1_STRIP), )\n+      # Default to using the global STRIPFLAGS. Allow for overriding with an empty value\n+      $1_STRIPFLAGS ?= $(STRIPFLAGS)\n+      $1_STRIP_CMD := $$($1_STRIP) $$($1_STRIPFLAGS) $$($1_TARGET)\n+    endif\n+  endif\n+endef\n+\n+################################################################################\n+define CreateLinkedResult\n+  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n+    # Include partial linking when building the static library with clang on linux.\n+    ifeq ($(call isTargetOs, linux), true)\n+      ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n+        $1_ENABLE_PARTIAL_LINKING := true\n+      endif\n+    endif\n+\n+    $1_VARDEPS := $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $$($1_LIBS) \\\n+        $$($1_EXTRA_LIBS)\n+    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+      $1_VARDEPS += $$($1_LD) $$($1_SYSROOT_LDFLAGS)\n+    endif\n+    $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+        $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+\n+    # Generating a static library, ie object file archive.\n+    ifeq ($(STATIC_BUILD), true)\n+      ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n+        STATIC_MAPFILE_DEP := $$($1_MAPFILE)\n+      endif\n+    endif\n+\n+    $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE) $$(STATIC_MAPFILE_DEP)\n+\n+    $1_AR_OBJ_ARG := $$($1_LD_OBJ_ARG)\n+    # With clang on linux, partial linking is enabled and 'AR' takes the output\n+    # object from the partial linking step.\n+    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+      $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n+      $1_AR_OBJ_ARG := $$($1_TARGET_RELOCATABLE)\n+    endif\n+\n+    $$($1_TARGET): $$($1_TARGET_DEPS)\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+          else\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+          endif\n+        endif\n+\t$$(call LogInfo, Building static library $$($1_BASENAME))\n+\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n+        # Do partial linking.\n+        ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_partial_link, \\\n+\t    $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t      $$($1_LD) $(LDFLAGS_CXX_PARTIAL_LINKING) $$($1_SYSROOT_LDFLAGS) \\\n+\t        $(LD_OUT_OPTION)$$($1_TARGET_RELOCATABLE) \\\n+                $$($1_LD_OBJ_ARG))\n+        endif\n+\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t  $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_AR_OBJ_ARG) \\\n+\t        $$($1_RES))\n+        ifeq ($(STATIC_BUILD), true)\n+          ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n+\t    $(CP) $$($1_MAPFILE) $$(@D)\/$$(basename $$(@F)).symbols\n+          else\n+\t    $(GetSymbols)\n+          endif\n+        endif\n+  else\n+    # A shared dynamic library or an executable binary has been specified\n+    ifeq ($$($1_TYPE), LIBRARY)\n+      # Generating a dynamic library.\n+      $1_EXTRA_LDFLAGS += $$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n+\n+      # Create loadmap on AIX. Helps in diagnosing some problems.\n+      ifneq ($(COMPILER_BINDCMD_FILE_FLAG), )\n+        $1_EXTRA_LDFLAGS += $(COMPILER_BINDCMD_FILE_FLAG)$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).loadmap\n+      endif\n+    endif\n+\n+    ifeq ($(call isTargetOs, windows), true)\n+      ifeq ($$($1_EMBED_MANIFEST), true)\n+        $1_EXTRA_LDFLAGS += -manifest:embed\n+      endif\n+\n+      $1_IMPORT_LIBRARY := $$($1_OBJECT_DIR)\/$$($1_NAME).lib\n+      $1_EXTRA_LDFLAGS += \"-implib:$$($1_IMPORT_LIBRARY)\"\n+      ifeq ($$($1_TYPE), LIBRARY)\n+        # To properly trigger downstream dependants of the import library, just as\n+        # for debug files, we must have a recipe in the rule. To avoid rerunning\n+        # the recipe every time have it touch the target. If an import library\n+        # file is deleted by something external, explicitly delete the target to\n+        # trigger a rebuild of both.\n+        ifneq ($$(wildcard $$($1_IMPORT_LIBRARY)), $$($1_IMPORT_LIBRARY))\n+          $$(call LogDebug, Deleting $$($1_BASENAME) because import library is missing)\n+          $$(shell $(RM) $$($1_TARGET))\n+        endif\n+        $$($1_IMPORT_LIBRARY): $$($1_TARGET)\n+\t\t$(TOUCH) $$@\n+\n+        $1 += $$($1_IMPORT_LIBRARY)\n+      endif\n+    endif\n+\n+    $1_VARDEPS := $$($1_LD) $$($1_SYSROOT_LDFLAGS) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) \\\n+        $$($1_LIBS) $$($1_EXTRA_LIBS) $$($1_MT) \\\n+        $$($1_CREATE_DEBUGINFO_CMDS) $$($1_MANIFEST_VERSION) \\\n+        $$($1_STRIP_CMD) $$($1_CREATE_DEBUGLINK_CMDS)\n+    $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+        $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+\n+    $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_MANIFEST) \\\n+        $$($1_REAL_MAPFILE) $$($1_VARDEPS_FILE)\n+\n+    $$($1_TARGET): $$($1_TARGET_DEPS)\n+                ifneq ($$($1_OBJ_FILE_LIST), )\n+                  ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+                  else\n+\t\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+                  endif\n+                endif\n+                # Keep as much as possible on one execution line for best performance\n+                # on Windows\n+\t\t$$(call LogInfo, Linking $$($1_BASENAME))\n+\t\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n+                ifeq ($(call isTargetOs, windows), true)\n+\n+\t\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n+\t\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n+\t\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) \\\n+\t\t      | $(GREP) -v \"^   Creating library .*\\.lib and object .*\\.exp\" || \\\n+\t\t          test \"$$$$?\" = \"1\" ; \\\n+\t\t  $$($1_CREATE_DEBUGINFO_CMDS)\n+\t\t  $$($1_STRIP_CMD)\n+\t\t  $$($1_CREATE_DEBUGLINK_CMDS)\n+                 ifeq ($(call isBuildOsEnv, windows.wsl2), true)\n+\t\t    $$(CHMOD) +x $$($1_TARGET)\n+                 endif\n+                else\n+\t\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t\t      $$(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n+\t\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n+\t\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) ; \\\n+\t\t  $$($1_CREATE_DEBUGINFO_CMDS)\n+\t\t  $$($1_STRIP_CMD)\n+\t\t  $$($1_CREATE_DEBUGLINK_CMDS)\n+                endif\n+                ifeq ($(call isTargetOs, windows), true)\n+                  ifneq ($$($1_MANIFEST), )\n+\t\t    $$($1_MT) -nologo -manifest $$($1_MANIFEST) -identity:\"$$($1_NAME).exe, version=$$($1_MANIFEST_VERSION)\" -outputresource:$$@;#1\n+                  endif\n+                endif\n+                # On macosx, optionally run codesign on every binary.\n+                # Remove signature explicitly first to avoid warnings if the linker\n+                # added a default adhoc signature.\n+                ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n+\t\t  $(CODESIGN) --remove-signature $$@\n+\t\t  $(CODESIGN) -f -s \"$(MACOSX_CODESIGN_IDENTITY)\" --timestamp --options runtime \\\n+\t\t      --entitlements $$(call GetEntitlementsFile, $$@) $$@\n+                else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+\t\t  $(CODESIGN) --remove-signature $$@\n+\t\t  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@\n+                endif\n+  endif\n+endef\n","filename":"make\/common\/native\/Link.gmk","additions":262,"deletions":0,"binary":false,"changes":262,"status":"added"},{"patch":"@@ -0,0 +1,245 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to handling paths for source files\n+# and object files. This is complicated by the fact that we usually, but not\n+# always, use absolute instead of relative paths. It is further complicated\n+# by the fact that not all tools allow inputting large lists of files as\n+# \"@-files\", which we normally use to avoid hitting command line length limits.\n+# Finally this file contains functionality for locating all source code files\n+# that should be included in the compilation.\n+\n+################################################################################\n+# When absolute paths are not allowed in the output, and the compiler does not\n+# support any options to avoid it, we need to rewrite compile commands to use\n+# relative paths. By doing this, the __FILE__ macro will resolve to relative\n+# paths. The relevant input paths on the command line are the -I flags and the\n+# path to the source file itself.\n+#\n+# The macro MakeCommandRelative is used to rewrite the command line like this:\n+# 'CD $(WORKSPACE_ROOT) && <cmd>'\n+# and changes all paths in cmd to be relative to the workspace root. This only\n+# works properly if the build dir is inside the workspace root. If it's not,\n+# relative paths are still calculated, but depending on the distance between the\n+# dirs, paths in the build dir may end up as essentially absolute anyway.\n+#\n+# The fix-deps-file macro is used to adjust the contents of the generated make\n+# dependency files to contain paths compatible with make.\n+#\n+REWRITE_PATHS_RELATIVE = false\n+ifeq ($(ALLOW_ABSOLUTE_PATHS_IN_OUTPUT)-$(FILE_MACRO_CFLAGS), false-)\n+  REWRITE_PATHS_RELATIVE = true\n+endif\n+\n+# CCACHE_BASEDIR needs fix-deps-file as makefiles use absolute filenames for\n+# object files while CCACHE_BASEDIR will make ccache relativize all paths for\n+# its compiler. The compiler then produces relative dependency files.\n+# make does not know a relative and absolute filename is the same so it will\n+# ignore such dependencies. This only applies when the OUTPUTDIR is inside\n+# the WORKSPACE_ROOT.\n+ifneq ($(CCACHE), )\n+  ifneq ($(filter $(WORKSPACE_ROOT)\/%, $(OUTPUTDIR)), )\n+    REWRITE_PATHS_RELATIVE = true\n+  endif\n+endif\n+\n+ifeq ($(REWRITE_PATHS_RELATIVE), true)\n+  # Need to handle -I flags as both '-Ifoo' and '-I foo'.\n+  MakeCommandRelative = \\\n+      $(CD) $(WORKSPACE_ROOT) && \\\n+      $(foreach o, $1, \\\n+        $(if $(filter $(WORKSPACE_ROOT)\/% $(OUTPUTDIR)\/%, $o), \\\n+          $(call RelativePath, $o, $(WORKSPACE_ROOT)) \\\n+        , \\\n+          $(if $(filter -I$(WORKSPACE_ROOT)\/%, $o), \\\n+            -I$(call RelativePath, $(patsubst -I%, %, $o), $(WORKSPACE_ROOT)) \\\n+          , \\\n+            $o \\\n+          ) \\\n+        ) \\\n+      )\n+\n+  # When compiling with relative paths, the deps file may come out with relative\n+  # paths, and that path may start with '.\/'. First remove any leading .\/, then\n+  # add WORKSPACE_ROOT to any line not starting with \/, while allowing for\n+  # leading spaces. There may also be multiple entries on the same line, so start\n+  # with splitting such lines.\n+  # Non GNU sed (BSD on macosx) cannot substitute in literal \\n using regex.\n+  # Instead use a bash escaped literal newline. To avoid having unmatched quotes\n+  # ruin the ability for an editor to properly syntax highlight this file, define\n+  # that newline sequence as a separate variable and add the closing quote behind\n+  # a comment.\n+  sed_newline := \\'$$'\\n''#'\n+  define fix-deps-file\n+\t$(SED) \\\n+\t    -e 's|\\([^ ]\\) \\{1,\\}\\([^\\\\:]\\)|\\1 \\\\$(sed_newline) \\2|g' \\\n+\t    $1.tmp \\\n+\t    | $(SED) \\\n+\t        -e 's|^\\([ ]*\\)\\.\/|\\1|' \\\n+\t        -e '\/^[ ]*[^\/ ]\/s|^\\([ ]*\\)|\\1$(WORKSPACE_ROOT)\/|' \\\n+\t        > $1\n+  endef\n+else\n+  # By default the MakeCommandRelative macro does nothing.\n+  MakeCommandRelative = $1\n+\n+  # No adjustment is needed.\n+  define fix-deps-file\n+\t$(MV) $1.tmp $1\n+  endef\n+endif\n+\n+################################################################################\n+define LocateSourceFiles\n+  $$(foreach d, $$($1_SRC), $$(if $$(wildcard $$d), , \\\n+      $$(error SRC specified to SetupNativeCompilation $1 contains missing directory $$d)))\n+\n+  $1_SRCS_RAW := $$(call FindFiles, $$($1_SRC))\n+  # Order src files according to the order of the src dirs\n+  $1_SRCS := $$(foreach d, $$($1_SRC), $$(filter $$d%, $$($1_SRCS_RAW)))\n+  $1_SRCS := $$(filter $$(NATIVE_SOURCE_EXTENSIONS), $$($1_SRCS))\n+  # Extract the C\/C++ files.\n+  ifneq ($$($1_EXCLUDE_PATTERNS), )\n+    # We must not match the exclude pattern against the src root(s).\n+    $1_SRCS_WITHOUT_ROOTS := $$($1_SRCS)\n+    $$(foreach i, $$($1_SRC), $$(eval $1_SRCS_WITHOUT_ROOTS := $$(patsubst \\\n+        $$i\/%,%, $$($1_SRCS_WITHOUT_ROOTS))))\n+    $1_ALL_EXCLUDE_FILES :=  $$(call containing, $$($1_EXCLUDE_PATTERNS), \\\n+        $$($1_SRCS_WITHOUT_ROOTS))\n+  endif\n+  ifneq ($$($1_EXCLUDE_FILES), )\n+    $1_ALL_EXCLUDE_FILES += $$($1_EXCLUDE_FILES)\n+  endif\n+  ifneq ($$($1_ALL_EXCLUDE_FILES), )\n+    $1_EXCLUDE_FILES_PAT := $$($1_ALL_EXCLUDE_FILES) \\\n+        $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$($1_ALL_EXCLUDE_FILES)))\n+    $1_EXCLUDE_FILES_PAT := $$(addprefix %, $$($1_EXCLUDE_FILES_PAT))\n+    $1_SRCS := $$(filter-out $$($1_EXCLUDE_FILES_PAT), $$($1_SRCS))\n+  endif\n+  ifneq ($$($1_INCLUDE_FILES), )\n+    $1_INCLUDE_FILES_PAT := $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$($1_INCLUDE_FILES)))\n+    $1_SRCS := $$(filter $$($1_INCLUDE_FILES_PAT), $$($1_SRCS))\n+  endif\n+  # There can be only a single bin dir root, no need to foreach over the roots.\n+  $1_BINS := $$(wildcard $$($1_OBJECT_DIR)\/*$(OBJ_SUFFIX))\n+  # Now we have a list of all c\/c++ files to compile: $$($1_SRCS)\n+  # and we have a list of all existing object files: $$($1_BINS)\n+\n+  # Prepend the source\/bin path to the filter expressions. Then do the filtering.\n+  ifneq ($$($1_INCLUDES), )\n+    $1_SRC_INCLUDES := $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$(addsuffix \/%, $$($1_INCLUDES))))\n+    $1_SRCS := $$(filter $$($1_SRC_INCLUDES), $$($1_SRCS))\n+  endif\n+  ifneq ($$($1_EXCLUDES), )\n+    $1_SRC_EXCLUDES := $$(addsuffix \/%, $$($1_EXCLUDES))\n+    $1_SRC_EXCLUDES += $$(foreach i, $$($1_SRC), $$(addprefix $$i\/, $$(addsuffix \/%, $$($1_EXCLUDES))))\n+    $1_SRCS := $$(filter-out $$($1_SRC_EXCLUDES), $$($1_SRCS))\n+  endif\n+\n+  $1_SRCS += $$($1_EXTRA_FILES)\n+\n+  ifeq ($$($1_SRCS), )\n+    $$(error No sources found for $1 when looking inside the dirs $$($1_SRC))\n+  endif\n+\n+  ifeq ($$($1_TYPE), EXECUTABLE)\n+    ifeq ($(UBSAN_ENABLED), true)\n+      # We need to set the default options for UBSan. This needs to be included in every executable.\n+      # Rather than copy and paste code to everything with a main function, we add an additional\n+      # source file to every executable that exports __ubsan_default_options.\n+      ifneq ($$(filter %.cpp %.cc, $$($1_SRCS)), )\n+        $1_SRCS += $(TOPDIR)\/make\/data\/ubsan\/ubsan_default_options.cpp\n+      else\n+        $1_SRCS += $(TOPDIR)\/make\/data\/ubsan\/ubsan_default_options.c\n+      endif\n+    endif\n+  endif\n+endef\n+\n+################################################################################\n+define SetupOutputFiles\n+  # Calculate the expected output from compiling the sources\n+  $1_EXPECTED_OBJS_FILENAMES := $$(call replace_with_obj_extension, $$(notdir $$($1_SRCS)))\n+  $1_EXPECTED_OBJS := $$(addprefix $$($1_OBJECT_DIR)\/, $$($1_EXPECTED_OBJS_FILENAMES))\n+  # Are there too many object files on disk? Perhaps because some source file was removed?\n+  $1_SUPERFLOUS_OBJS := $$(sort $$(filter-out $$($1_EXPECTED_OBJS), $$($1_BINS)))\n+  # Clean out the superfluous object files.\n+  ifneq ($$($1_SUPERFLUOUS_OBJS), )\n+    $$(shell $(RM) -f $$($1_SUPERFLUOUS_OBJS))\n+  endif\n+  # Sort to remove duplicates and provide a reproducible order on the input files to the linker.\n+  $1_ALL_OBJS := $$(sort $$($1_EXPECTED_OBJS) $$($1_EXTRA_OBJECT_FILES))\n+  ifeq ($(STATIC_LIBS), true)\n+    # Exclude the object files that match with $1_STATIC_LIB_EXCLUDE_OBJS.\n+    ifneq ($$($1_STATIC_LIB_EXCLUDE_OBJS), )\n+      $1_ALL_OBJS := $$(call not-containing, $$($1_STATIC_LIB_EXCLUDE_OBJS), $$($1_ALL_OBJS))\n+    endif\n+  endif\n+endef\n+\n+################################################################################\n+define SetupObjectFileList\n+  $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n+\n+  # If there are many object files, use an @-file...\n+  ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n+    $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n+    ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n+      $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n+    else\n+      # ...except for toolchains which don't support them.\n+      $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n+    endif\n+\n+    # If we are building static library, 'AR' on macosx\/aix may not support @-file.\n+    ifeq ($$($1_TYPE), STATIC_LIBRARY)\n+      ifeq ($(call isTargetOs, macosx aix), true)\n+        $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n+      endif\n+    endif\n+  endif\n+\n+  # Unfortunately the @-file trick does not work reliably when using clang.\n+  # Clang does not propagate the @-file parameter to the ld sub process, but\n+  # instead puts the full content on the command line. At least the llvm ld\n+  # does not even support an @-file.\n+  #\n+  # When linking a large amount of object files, we risk hitting the limit\n+  # of the command line length even on posix systems if the path length of\n+  # the output dir is very long due to our use of absolute paths. To\n+  # mitigate this, use paths relative to the output dir when linking over\n+  # 500 files with clang and the output dir path is deep.\n+  ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n+    ifeq ($$(TOOLCHAIN_TYPE), clang)\n+      # There is no strlen function in make, but checking path depth is a\n+      # reasonable approximation.\n+      ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n+        $1_LINK_OBJS_RELATIVE := true\n+        $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n+      endif\n+    endif\n+  endif\n+endef\n","filename":"make\/common\/native\/Paths.gmk","additions":245,"deletions":0,"binary":false,"changes":245,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to setting up our toolchain\n+# definition variables.\n+\n+################################################################################\n+# Define a native toolchain configuration that can be used by\n+# SetupNativeCompilation calls\n+#\n+# Parameter 1 is the name of the toolchain definition\n+#\n+# Remaining parameters are named arguments:\n+#   EXTENDS - Optional parent definition to get defaults from\n+#   CC - The C compiler\n+#   CXX - The C++ compiler\n+#   LD - The Linker\n+#   AR - Static linker\n+#   AS - Assembler\n+#   MT - Windows MT tool\n+#   RC - Windows RC tool\n+#   OBJCOPY - The objcopy tool for debug symbol handling\n+#   STRIP - The tool to use for stripping debug symbols\n+#   SYSROOT_CFLAGS - Compiler flags for using the specific sysroot\n+#   SYSROOT_LDFLAGS - Linker flags for using the specific sysroot\n+DefineNativeToolchain = $(NamedParamsMacroTemplate)\n+define DefineNativeToolchainBody\n+  # If extending another definition, get default values from that,\n+  # otherwise, nothing more needs to be done as variable assignments\n+  # already happened in NamedParamsMacroTemplate.\n+  ifneq ($$($1_EXTENDS), )\n+    $$(call SetIfEmpty, $1_CC, $$($$($1_EXTENDS)_CC))\n+    $$(call SetIfEmpty, $1_CXX, $$($$($1_EXTENDS)_CXX))\n+    $$(call SetIfEmpty, $1_LD, $$($$($1_EXTENDS)_LD))\n+    $$(call SetIfEmpty, $1_AR, $$($$($1_EXTENDS)_AR))\n+    $$(call SetIfEmpty, $1_AS, $$($$($1_EXTENDS)_AS))\n+    $$(call SetIfEmpty, $1_MT, $$($$($1_EXTENDS)_MT))\n+    $$(call SetIfEmpty, $1_RC, $$($$($1_EXTENDS)_RC))\n+    $$(call SetIfEmpty, $1_OBJCOPY, $$($$($1_EXTENDS)_OBJCOPY))\n+    $$(call SetIfEmpty, $1_STRIP, $$($$($1_EXTENDS)_STRIP))\n+    $$(call SetIfEmpty, $1_SYSROOT_CFLAGS, $$($$($1_EXTENDS)_SYSROOT_CFLAGS))\n+    $$(call SetIfEmpty, $1_SYSROOT_LDFLAGS, $$($$($1_EXTENDS)_SYSROOT_LDFLAGS))\n+  endif\n+endef\n+\n+# Create a default toolchain with the main compiler and linker\n+$(eval $(call DefineNativeToolchain, TOOLCHAIN_DEFAULT, \\\n+    CC := $(CC), \\\n+    CXX := $(CXX), \\\n+    LD := $(LD), \\\n+    AR := $(AR), \\\n+    AS := $(AS), \\\n+    MT := $(MT), \\\n+    RC := $(RC), \\\n+    OBJCOPY := $(OBJCOPY), \\\n+    STRIP := $(STRIP), \\\n+    SYSROOT_CFLAGS := $(SYSROOT_CFLAGS), \\\n+    SYSROOT_LDFLAGS := $(SYSROOT_LDFLAGS), \\\n+))\n+\n+# Create a toolchain where linking is done with the C++ linker\n+$(eval $(call DefineNativeToolchain, TOOLCHAIN_LINK_CXX, \\\n+    EXTENDS := TOOLCHAIN_DEFAULT, \\\n+    LD := $(LDCXX), \\\n+))\n+\n+# Create a toolchain with the BUILD compiler, used for build tools that\n+# are to be run during the build.\n+$(eval $(call DefineNativeToolchain, TOOLCHAIN_BUILD, \\\n+    CC := $(BUILD_CC), \\\n+    CXX := $(BUILD_CXX), \\\n+    LD := $(BUILD_LD), \\\n+    AR := $(BUILD_AR), \\\n+    AS := $(BUILD_AS), \\\n+    OBJCOPY := $(BUILD_OBJCOPY), \\\n+    STRIP := $(BUILD_STRIP), \\\n+    SYSROOT_CFLAGS := $(BUILD_SYSROOT_CFLAGS), \\\n+    SYSROOT_LDFLAGS := $(BUILD_SYSROOT_LDFLAGS), \\\n+))\n+\n+# BUILD toolchain with the C++ linker\n+$(eval $(call DefineNativeToolchain, TOOLCHAIN_BUILD_LINK_CXX, \\\n+    EXTENDS := TOOLCHAIN_BUILD, \\\n+    LD := $(BUILD_LDCXX), \\\n+))\n+\n+################################################################################\n+# Setup the toolchain to be used\n+define SetupToolchain\n+  $$(call SetIfEmpty, $1_TOOLCHAIN, TOOLCHAIN_DEFAULT)\n+  $$(call SetIfEmpty, $1_CC, $$($$($1_TOOLCHAIN)_CC))\n+  $$(call SetIfEmpty, $1_CXX, $$($$($1_TOOLCHAIN)_CXX))\n+  $$(call SetIfEmpty, $1_LD, $$($$($1_TOOLCHAIN)_LD))\n+  $$(call SetIfEmpty, $1_AR, $$($$($1_TOOLCHAIN)_AR))\n+  $$(call SetIfEmpty, $1_AS, $$($$($1_TOOLCHAIN)_AS))\n+  $$(call SetIfEmpty, $1_MT, $$($$($1_TOOLCHAIN)_MT))\n+  $$(call SetIfEmpty, $1_RC, $$($$($1_TOOLCHAIN)_RC))\n+  $$(call SetIfEmpty, $1_OBJCOPY, $$($$($1_TOOLCHAIN)_OBJCOPY))\n+  $$(call SetIfEmpty, $1_STRIP, $$($$($1_TOOLCHAIN)_STRIP))\n+  $$(call SetIfEmpty, $1_SYSROOT_CFLAGS, $$($$($1_TOOLCHAIN)_SYSROOT_CFLAGS))\n+  $$(call SetIfEmpty, $1_SYSROOT_LDFLAGS, $$($$($1_TOOLCHAIN)_SYSROOT_LDFLAGS))\n+endef\n","filename":"make\/common\/native\/ToolchainDefinitions.gmk","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}