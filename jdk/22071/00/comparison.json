{"files":[{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+\n@@ -34,1 +35,0 @@\n-import static sun.security.action.GetPropertyAction.privilegedGetProperty;\n@@ -53,1 +53,1 @@\n-        String abi = privilegedGetProperty(\"jdk.internal.foreign.CABI\");\n+        String abi = System.getProperty(\"jdk.internal.foreign.CABI\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import sun.security.action.GetIntegerAction;\n@@ -296,1 +295,1 @@\n-        final int power = GetIntegerAction.privilegedGetProperty(PROPERTY_PATH + name, defaultPower);\n+        final int power = Integer.getInteger(PROPERTY_PATH + name, defaultPower);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentBulkOperations.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import sun.security.action.GetPropertyAction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -39,1 +37,1 @@\n-import sun.security.action.GetPropertyAction;\n+import jdk.internal.util.OperatingSystem;\n@@ -63,1 +61,1 @@\n-            if (Utils.IS_WINDOWS) {\n+            if (OperatingSystem.isWindows()) {\n@@ -77,7 +75,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String systemRoot = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public String run() {\n-                return System.getenv(\"SystemRoot\");\n-            }\n-        });\n+        String systemRoot = System.getenv(\"SystemRoot\");\n@@ -88,7 +80,1 @@\n-        @SuppressWarnings(\"removal\")\n-        boolean useUCRT = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Boolean run() {\n-                return Files.exists(ucrtbase);\n-            }\n-        });\n+        boolean useUCRT = Files.exists(ucrtbase);\n@@ -142,2 +128,2 @@\n-        Path javahome = Path.of(GetPropertyAction.privilegedGetProperty(\"java.home\"));\n-        String lib = Utils.IS_WINDOWS ? \"bin\" : \"lib\";\n+        Path javahome = Path.of(System.getProperty(\"java.home\"));\n+        String lib = OperatingSystem.isWindows() ? \"bin\" : \"lib\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-import static sun.security.action.GetPropertyAction.privilegedGetProperty;\n-\n@@ -58,2 +56,0 @@\n-    public static final boolean IS_WINDOWS = privilegedGetProperty(\"os.name\").startsWith(\"Windows\");\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\n@@ -51,3 +52,0 @@\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.GetIntegerAction;\n-import sun.security.action.GetPropertyAction;\n@@ -81,1 +79,1 @@\n-        = GetPropertyAction.privilegedGetProperty(\"jdk.internal.foreign.abi.Specializer.DUMP_CLASSES_DIR\");\n+            = System.getProperty(\"jdk.internal.foreign.abi.Specializer.DUMP_CLASSES_DIR\");\n@@ -83,1 +81,1 @@\n-        = GetBooleanAction.privilegedGetProperty(\"jdk.internal.foreign.abi.Specializer.PERFORM_VERIFICATION\");\n+            = Boolean.getBoolean(\"jdk.internal.foreign.abi.Specializer.PERFORM_VERIFICATION\");\n@@ -85,1 +83,1 @@\n-            = GetIntegerAction.privilegedGetProperty(\"jdk.internal.foreign.abi.Specializer.SCOPE_DEDUP_DEPTH\", 2);\n+            = Integer.getInteger(\"jdk.internal.foreign.abi.Specializer.SCOPE_DEDUP_DEPTH\", 2);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -41,1 +42,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -57,1 +57,1 @@\n-            GetPropertyAction.privilegedGetProperty(\"java.lang.foreign.VERIFY_BINDINGS\", \"true\"));\n+            System.getProperty(\"java.lang.foreign.VERIFY_BINDINGS\", \"true\"));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -27,1 +28,1 @@\n-import jdk.internal.foreign.Utils;\n+import jdk.internal.util.OperatingSystem;\n@@ -38,2 +39,2 @@\n-    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0, Utils.IS_WINDOWS),\n-    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1, Utils.IS_WINDOWS),\n+    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0, OperatingSystem.isWindows()),\n+    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1, OperatingSystem.isWindows()),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CapturableState.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\n@@ -30,1 +31,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -55,1 +55,1 @@\n-        GetPropertyAction.privilegedGetProperty(\"jdk.internal.foreign.DowncallLinker.USE_SPEC\", \"true\"));\n+            System.getProperty(\"jdk.internal.foreign.DowncallLinker.USE_SPEC\", \"true\"));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -46,1 +45,0 @@\n-import static sun.security.action.GetBooleanAction.privilegedGetProperty;\n@@ -50,1 +48,1 @@\n-        privilegedGetProperty(\"jdk.internal.foreign.UpcallLinker.DEBUG\");\n+            Boolean.getBoolean(\"jdk.internal.foreign.UpcallLinker.DEBUG\");\n@@ -52,1 +50,1 @@\n-        GetPropertyAction.privilegedGetProperty(\"jdk.internal.foreign.UpcallLinker.USE_SPEC\", \"true\"));\n+            System.getProperty(\"jdk.internal.foreign.UpcallLinker.USE_SPEC\", \"true\"));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallLinker.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings({\"restricted\"})\n@@ -41,15 +41,10 @@\n-        return java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<>() {\n-                    public Boolean run() {\n-                        try {\n-                            System.loadLibrary(\"fallbackLinker\");\n-                        } catch (UnsatisfiedLinkError ule) {\n-                            return false;\n-                        }\n-                        if (!init()) {\n-                            \/\/ library failed to initialize. Do not silently mark as unsupported\n-                            throw new ExceptionInInitializerError(\"Fallback library failed to initialize\");\n-                        }\n-                        return true;\n-                    }\n-                });\n+        try {\n+            System.loadLibrary(\"fallbackLinker\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            return false;\n+        }\n+        if (!init()) {\n+            \/\/ library failed to initialize. Do not silently mark as unsupported\n+            throw new ExceptionInInitializerError(\"Fallback library failed to initialize\");\n+        }\n+        return true;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"}]}