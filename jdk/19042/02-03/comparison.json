{"files":[{"patch":"@@ -14392,0 +14392,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -425,19 +425,1 @@\n-  __ subq(rsp, 16 * wordSize);\n-  __ movq(Address(rsp, 15 * wordSize), rax);\n-  __ movq(Address(rsp, 14 * wordSize), rcx);\n-  __ movq(Address(rsp, 13 * wordSize), rdx);\n-  __ movq(Address(rsp, 12 * wordSize), rbx);\n-  \/\/ Skip rsp as the value is normally not used. There are a few places where\n-  \/\/ the original value of rsp needs to be known but that can be computed\n-  \/\/ from the value of rsp immediately after pusha (rsp + 16 * wordSize).\n-  __ movq(Address(rsp, 10 * wordSize), rbp);\n-  __ movq(Address(rsp, 9 * wordSize), rsi);\n-  __ movq(Address(rsp, 8 * wordSize), rdi);\n-  __ movq(Address(rsp, 7 * wordSize), r8);\n-  __ movq(Address(rsp, 6 * wordSize), r9);\n-  __ movq(Address(rsp, 5 * wordSize), r10);\n-  __ movq(Address(rsp, 4 * wordSize), r11);\n-  __ movq(Address(rsp, 3 * wordSize), r12);\n-  __ movq(Address(rsp, 2 * wordSize), r13);\n-  __ movq(Address(rsp, wordSize), r14);\n-  __ movq(Address(rsp, 0), r15);\n+  __ save_legacy_gprs();\n@@ -587,18 +569,1 @@\n-  __ movq(r15, Address(rsp, 0));\n-  __ movq(r14, Address(rsp, wordSize));\n-  __ movq(r13, Address(rsp, 2 * wordSize));\n-  __ movq(r12, Address(rsp, 3 * wordSize));\n-  __ movq(r11, Address(rsp, 4 * wordSize));\n-  __ movq(r10, Address(rsp, 5 * wordSize));\n-  __ movq(r9,  Address(rsp, 6 * wordSize));\n-  __ movq(r8,  Address(rsp, 7 * wordSize));\n-  __ movq(rdi, Address(rsp, 8 * wordSize));\n-  __ movq(rsi, Address(rsp, 9 * wordSize));\n-  __ movq(rbp, Address(rsp, 10 * wordSize));\n-  \/\/ Skip rsp as it is restored automatically to the value\n-  \/\/ before the corresponding pusha when popa is done.\n-  __ movq(rbx, Address(rsp, 12 * wordSize));\n-  __ movq(rdx, Address(rsp, 13 * wordSize));\n-  __ movq(rcx, Address(rsp, 14 * wordSize));\n-  __ movq(rax, Address(rsp, 15 * wordSize));\n-  __ addq(rsp, 16 * wordSize);\n+  __ restore_legacy_gprs();\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":2,"deletions":37,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -10387,0 +10387,41 @@\n+\n+\/\/ Saves legacy GPRs state on stack.\n+void MacroAssembler::save_legacy_gprs() {\n+  subq(rsp, 16 * wordSize);\n+  movq(Address(rsp, 15 * wordSize), rax);\n+  movq(Address(rsp, 14 * wordSize), rcx);\n+  movq(Address(rsp, 13 * wordSize), rdx);\n+  movq(Address(rsp, 12 * wordSize), rbx);\n+  movq(Address(rsp, 10 * wordSize), rbp);\n+  movq(Address(rsp, 9 * wordSize), rsi);\n+  movq(Address(rsp, 8 * wordSize), rdi);\n+  movq(Address(rsp, 7 * wordSize), r8);\n+  movq(Address(rsp, 6 * wordSize), r9);\n+  movq(Address(rsp, 5 * wordSize), r10);\n+  movq(Address(rsp, 4 * wordSize), r11);\n+  movq(Address(rsp, 3 * wordSize), r12);\n+  movq(Address(rsp, 2 * wordSize), r13);\n+  movq(Address(rsp, wordSize), r14);\n+  movq(Address(rsp, 0), r15);\n+}\n+\n+\n+\/\/ Resotres back legacy GPRs state from stack.\n+void MacroAssembler::restore_legacy_gprs() {\n+  movq(r15, Address(rsp, 0));\n+  movq(r14, Address(rsp, wordSize));\n+  movq(r13, Address(rsp, 2 * wordSize));\n+  movq(r12, Address(rsp, 3 * wordSize));\n+  movq(r11, Address(rsp, 4 * wordSize));\n+  movq(r10, Address(rsp, 5 * wordSize));\n+  movq(r9,  Address(rsp, 6 * wordSize));\n+  movq(r8,  Address(rsp, 7 * wordSize));\n+  movq(rdi, Address(rsp, 8 * wordSize));\n+  movq(rsi, Address(rsp, 9 * wordSize));\n+  movq(rbp, Address(rsp, 10 * wordSize));\n+  movq(rbx, Address(rsp, 12 * wordSize));\n+  movq(rdx, Address(rsp, 13 * wordSize));\n+  movq(rcx, Address(rsp, 14 * wordSize));\n+  movq(rax, Address(rsp, 15 * wordSize));\n+  addq(rsp, 16 * wordSize);\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2153,0 +2153,3 @@\n+\n+  void save_legacy_gprs();\n+  void restore_legacy_gprs();\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -468,1 +468,0 @@\n-\/\/FIXME: Currently not being used in hotspot code base, extend it to support REX2 prefix.\n@@ -574,1 +573,0 @@\n-\/\/FIXME: Currently not being used in hotspot code base, extend it to support REX2 prefix.\n@@ -628,2 +626,0 @@\n-\/\/FIXME: Register indirect jump interface, currently not being used in hotspot code base,\n-\/\/ extend it to support REX2 prefix if needed.\n@@ -670,1 +666,0 @@\n-\/\/FIXME: Currently not being used in hotspot code base, extend it to support REX2 prefix.\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -224,20 +224,1 @@\n-  __ subq(rsp, 16 * wordSize);\n-\n-  __ movq(Address(rsp, 15 * wordSize), rax);\n-  __ movq(Address(rsp, 14 * wordSize), rcx);\n-  __ movq(Address(rsp, 13 * wordSize), rdx);\n-  __ movq(Address(rsp, 12 * wordSize), rbx);\n-  \/\/ Skip rsp as the value is normally not used. There are a few places where\n-  \/\/ the original value of rsp needs to be known but that can be computed\n-  \/\/ from the value of rsp immediately after pusha (rsp + 16 * wordSize).\n-  __ movq(Address(rsp, 10 * wordSize), rbp);\n-  __ movq(Address(rsp, 9 * wordSize), rsi);\n-  __ movq(Address(rsp, 8 * wordSize), rdi);\n-  __ movq(Address(rsp, 7 * wordSize), r8);\n-  __ movq(Address(rsp, 6 * wordSize), r9);\n-  __ movq(Address(rsp, 5 * wordSize), r10);\n-  __ movq(Address(rsp, 4 * wordSize), r11);\n-  __ movq(Address(rsp, 3 * wordSize), r12);\n-  __ movq(Address(rsp, 2 * wordSize), r13);\n-  __ movq(Address(rsp, wordSize), r14);\n-  __ movq(Address(rsp, 0), r15);\n+  __ save_legacy_gprs();\n@@ -534,19 +515,1 @@\n-\n-  __ movq(r15, Address(rsp, 0));\n-  __ movq(r14, Address(rsp, wordSize));\n-  __ movq(r13, Address(rsp, 2 * wordSize));\n-  __ movq(r12, Address(rsp, 3 * wordSize));\n-  __ movq(r11, Address(rsp, 4 * wordSize));\n-  __ movq(r10, Address(rsp, 5 * wordSize));\n-  __ movq(r9,  Address(rsp, 6 * wordSize));\n-  __ movq(r8,  Address(rsp, 7 * wordSize));\n-  __ movq(rdi, Address(rsp, 8 * wordSize));\n-  __ movq(rsi, Address(rsp, 9 * wordSize));\n-  __ movq(rbp, Address(rsp, 10 * wordSize));\n-  \/\/ Skip rsp as it is restored automatically to the value\n-  \/\/ before the corresponding pusha when popa is done.\n-  __ movq(rbx, Address(rsp, 12 * wordSize));\n-  __ movq(rdx, Address(rsp, 13 * wordSize));\n-  __ movq(rcx, Address(rsp, 14 * wordSize));\n-  __ movq(rax, Address(rsp, 15 * wordSize));\n-  __ addq(rsp, 16 * wordSize);\n+  __ restore_legacy_gprs();\n@@ -3375,1 +3338,1 @@\n-  CodeBuffer buffer(name, 1752, 512);\n+  CodeBuffer buffer(name, 1552, 512);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":3,"deletions":40,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-#if !defined(PRODUCT) && defined(_LP64)\n+#if defined(_LP64)\n@@ -422,1 +422,1 @@\n-#if !defined(PRODUCT) && defined(_LP64)\n+#if defined(_LP64)\n@@ -2169,1 +2169,1 @@\n-#if !defined(PRODUCT) && defined(_LP64)\n+#if defined(_LP64)\n@@ -2192,1 +2192,1 @@\n-#if !defined(PRODUCT) &&  defined(_LP64)\n+#if defined(_LP64)\n@@ -3186,0 +3186,3 @@\n+  \/\/ Enable APX support for product builds after\n+  \/\/ completion of planned features listed in JDK-8329030.\n+#if !defined(PRODUCT)\n@@ -3191,0 +3194,3 @@\n+#else\n+  return false;\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -638,1 +638,1 @@\n-  NOT_PRODUCT(LP64_ONLY(static void clear_apx_test_state()));\n+  LP64_ONLY(static void clear_apx_test_state());\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}