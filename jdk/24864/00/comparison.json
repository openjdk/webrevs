{"files":[{"patch":"@@ -368,0 +368,4 @@\n+        return appendTo(\n+                new StringBuilder(estimatedLength))\n+                .toString();\n+    }\n@@ -369,1 +373,5 @@\n-        StringBuilder sb = new StringBuilder(estimatedLength);\n+    \/**\n+     * Prints the toString result to the given buf, avoiding extra string allocations.\n+     *\/\n+    StringBuilder appendTo(StringBuilder sb) {\n+        int startingLength = sb.length();\n@@ -381,1 +389,1 @@\n-        if (sb.length() > 0) {\n+        if (sb.length() != startingLength) {\n@@ -396,3 +404,1 @@\n-        sb.append(')');\n-\n-        return sb.toString();\n+        return sb.append(')');\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackTraceElement.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -690,5 +690,0 @@\n-        \/\/ Guard against malicious overrides of Throwable.equals by\n-        \/\/ using a Set with identity equality semantics.\n-        Set<Throwable> dejaVu = Collections.newSetFromMap(new IdentityHashMap<>());\n-        dejaVu.add(this);\n-\n@@ -698,0 +693,4 @@\n+            var lineBuffer = new StringBuilder(128); \/\/ arbitrary size\n+            lineBuffer.append(\"\\tat \");\n+            int prefixLen = lineBuffer.length();\n+\n@@ -699,2 +698,7 @@\n-            for (StackTraceElement traceElement : trace)\n-                s.println(\"\\tat \" + traceElement);\n+            for (int i = 0; i < trace.length; i++) {\n+                if (i != 0) {\n+                    lineBuffer.setLength(prefixLen);\n+                }\n+                trace[i].appendTo(lineBuffer);\n+                s.println(lineBuffer.toString());\n+            }\n@@ -702,3 +706,2 @@\n-            \/\/ Print suppressed exceptions, if any\n-            for (Throwable se : getSuppressed())\n-                se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION, \"\\t\", dejaVu);\n+            var suppressed = getSuppressed();\n+            var ourCause = getCause();\n@@ -706,4 +709,18 @@\n-            \/\/ Print cause, if any\n-            Throwable ourCause = getCause();\n-            if (ourCause != null)\n-                ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, \"\", dejaVu);\n+            if (suppressed.length > 0 || ourCause != null) {\n+                \/*\n+                 * Guard against malicious overrides of Throwable.equals by\n+                 * using a Set with identity equality semantics.\n+                 *\/\n+                Set<Throwable> dejaVu = Collections.newSetFromMap(new IdentityHashMap<>());\n+                dejaVu.add(this);\n+\n+                \/\/ Print suppressed exceptions, if any\n+                for (Throwable se : suppressed)\n+                    se.printEnclosedStackTrace(s, lineBuffer, trace, SUPPRESSED_CAPTION, \"\\t\", dejaVu);\n+\n+                \/\/ Print cause, if any\n+\n+                if (ourCause != null) {\n+                    ourCause.printEnclosedStackTrace(s, lineBuffer, trace, CAUSE_CAPTION, \"\", dejaVu);\n+                }\n+            }\n@@ -718,0 +735,1 @@\n+                                         StringBuilder lineBuffer,\n@@ -723,0 +741,1 @@\n+        lineBuffer.setLength(0);\n@@ -724,1 +743,2 @@\n-            s.println(prefix + caption + \"[CIRCULAR REFERENCE: \" + this + \"]\");\n+            s.println(\n+                    lineBuffer.append(prefix).append(caption).append(\"[CIRCULAR REFERENCE: \").append(this).append(\"]\"));\n@@ -737,5 +757,17 @@\n-            s.println(prefix + caption + this);\n-            for (int i = 0; i <= m; i++)\n-                s.println(prefix + \"\\tat \" + trace[i]);\n-            if (framesInCommon != 0)\n-                s.println(prefix + \"\\t... \" + framesInCommon + \" more\");\n+            s.println(\n+                    lineBuffer.append(prefix).append(caption).append(this));\n+            lineBuffer.setLength(prefix.length());\n+            lineBuffer.append(\"\\tat \");\n+            int indent = lineBuffer.length();\n+            for (int i = 0; i <= m; i++) {\n+                if (i != 0) {\n+                    lineBuffer.setLength(indent);\n+                }\n+                s.println(\n+                        trace[i].appendTo(lineBuffer));\n+            }\n+            if (framesInCommon != 0) {\n+                lineBuffer.setLength(prefix.length());\n+                s.println(\n+                        lineBuffer.append(\"\\t... \").append(framesInCommon).append(\" more\"));\n+            }\n@@ -745,2 +777,2 @@\n-                se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION,\n-                                           prefix +\"\\t\", dejaVu);\n+                se.printEnclosedStackTrace(s, lineBuffer, trace, SUPPRESSED_CAPTION,\n+                        prefix.concat(\"\\t\"), dejaVu);\n@@ -751,1 +783,1 @@\n-                ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, prefix, dejaVu);\n+                ourCause.printEnclosedStackTrace(s, lineBuffer, trace, CAUSE_CAPTION, prefix, dejaVu);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Throwable.java","additions":56,"deletions":24,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class Throwables {\n+    private OutputStream byteArrayOutputStream;\n+\n+    @Setup\n+    public void setup() {\n+        byteArrayOutputStream = new OutputStream() {\n+            @Override\n+            public void write(int b) throws IOException {}\n+        };\n+    }\n+\n+    @Benchmark\n+    public PrintStream printStackTrace() {\n+        Exception error = null;\n+        try {\n+            x0();\n+        } catch (Exception e1) {\n+            error = e1;\n+        }\n+        PrintStream printStream = new PrintStream(byteArrayOutputStream);\n+        error.printStackTrace(printStream);\n+        return printStream;\n+    }\n+\n+    @Benchmark\n+    public PrintStream printEnclosedStackTrace() {\n+        Exception error = null;\n+        try {\n+            f0();\n+        } catch (Exception e1) {\n+            error = e1;\n+        }\n+        PrintStream printStream = new PrintStream(byteArrayOutputStream);\n+        error.printStackTrace(printStream);\n+        return printStream;\n+    }\n+\n+    private static void fN() {\n+        throw new RuntimeException();\n+    }\n+\n+    private static void f9() {\n+        fN();\n+    }\n+\n+    private static void f8() {\n+        f9();\n+    }\n+\n+    private static void f7() {\n+        f8();\n+    }\n+\n+    private static void f6() {\n+        f7();\n+    }\n+\n+    private static void f5() {\n+        f6();\n+    }\n+\n+    private static void f4() {\n+        f5();\n+    }\n+\n+    private static void f3() {\n+        f4();\n+    }\n+\n+    private static void f2() {\n+        f3();\n+    }\n+\n+    private static void f1() {\n+        f2();\n+    }\n+\n+    private static void f0() {\n+        f1();\n+    }\n+\n+    private static void xn() {\n+        try {\n+            f0();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void x9() {\n+        xn();\n+    }\n+\n+    private static void x8() {\n+        x9();\n+    }\n+\n+    private static void x7() {\n+        x8();\n+    }\n+\n+    private static void x6() {\n+        x7();\n+    }\n+\n+    private static void x5() {\n+        x6();\n+    }\n+\n+    private static void x4() {\n+        x5();\n+    }\n+\n+    private static void x3() {\n+        x4();\n+    }\n+\n+    private static void x2() {\n+        x3();\n+    }\n+\n+    private static void x1() {\n+        x2();\n+    }\n+\n+    private static void x0() {\n+        x1();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Throwables.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"}]}