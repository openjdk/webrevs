{"files":[{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\/*\n+ * @test\n+ * @bug     8355636\n+ * @library \/test\/lib\n+ * @run testng PrintStackTrace\n+ * @summary Verify PrintStackTrace results\n+ *\/\n+\n+public class PrintStackTrace {\n+\n+    private static void fn() {\n+        throw new RuntimeException();\n+    }\n+\n+    private static void f9() {\n+        fn();\n+    }\n+\n+    private static void f8() {\n+        f9();\n+    }\n+\n+    private static void f7() {\n+        f8();\n+    }\n+\n+    private static void f6() {\n+        f7();\n+    }\n+\n+    private static void f5() {\n+        f6();\n+    }\n+\n+    private static void f4() {\n+        f5();\n+    }\n+\n+    private static void f3() {\n+        f4();\n+    }\n+\n+    private static void f2() {\n+        f3();\n+    }\n+\n+    private static void f1() {\n+        f2();\n+    }\n+\n+    private static void f0() {\n+        f1();\n+    }\n+\n+\n+    private static void yn() {\n+        try {\n+            f0();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void y9() {\n+        yn();\n+    }\n+\n+    private static void y8() {\n+        y9();\n+    }\n+\n+    private static void y7() {\n+        y8();\n+    }\n+\n+    private static void y6() {\n+        y7();\n+    }\n+\n+    private static void y5() {\n+        y6();\n+    }\n+\n+    private static void y4() {\n+        y5();\n+    }\n+\n+    private static void y3() {\n+        y4();\n+    }\n+\n+    private static void y2() {\n+        y3();\n+    }\n+\n+    private static void y1() {\n+        y2();\n+    }\n+\n+    private static void y0() {\n+        y1();\n+    }\n+\n+    private static void xn() {\n+        try {\n+            y0();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void x9() {\n+        xn();\n+    }\n+\n+    private static void x8() {\n+        x9();\n+    }\n+\n+    private static void x7() {\n+        x8();\n+    }\n+\n+    private static void x6() {\n+        x7();\n+    }\n+\n+    private static void x5() {\n+        x6();\n+    }\n+\n+    private static void x4() {\n+        x5();\n+    }\n+\n+    private static void x3() {\n+        x4();\n+    }\n+\n+    private static void x2() {\n+        x3();\n+    }\n+\n+    private static void x1() {\n+        x2();\n+    }\n+\n+    private static void x0() {\n+        x1();\n+    }\n+\n+    public static void main(String[] args) {\n+        Exception error = null;\n+        try {\n+            x0();\n+        } catch (Exception e1) {\n+            error = e1;\n+        }\n+        var byteout = new ByteArrayOutputStream();\n+        Charset charset = StandardCharsets.UTF_8;\n+        PrintStream printStream = new PrintStream(byteout, true, charset);\n+        error.printStackTrace(printStream);\n+\n+        String expect =\n+                \"\"\"\n+                        java.lang.RuntimeException: java.lang.RuntimeException: java.lang.RuntimeException\n+                        \tat PrintStackTrace.xn(PrintStackTrace.java:139)\n+                        \tat PrintStackTrace.x9(PrintStackTrace.java:144)\n+                        \tat PrintStackTrace.x8(PrintStackTrace.java:148)\n+                        \tat PrintStackTrace.x7(PrintStackTrace.java:152)\n+                        \tat PrintStackTrace.x6(PrintStackTrace.java:156)\n+                        \tat PrintStackTrace.x5(PrintStackTrace.java:160)\n+                        \tat PrintStackTrace.x4(PrintStackTrace.java:164)\n+                        \tat PrintStackTrace.x3(PrintStackTrace.java:168)\n+                        \tat PrintStackTrace.x2(PrintStackTrace.java:172)\n+                        \tat PrintStackTrace.x1(PrintStackTrace.java:176)\n+                        \tat PrintStackTrace.x0(PrintStackTrace.java:180)\n+                        \tat PrintStackTrace.main(PrintStackTrace.java:186)\n+                        Caused by: java.lang.RuntimeException: java.lang.RuntimeException\n+                        \tat PrintStackTrace.yn(PrintStackTrace.java:91)\n+                        \tat PrintStackTrace.y9(PrintStackTrace.java:96)\n+                        \tat PrintStackTrace.y8(PrintStackTrace.java:100)\n+                        \tat PrintStackTrace.y7(PrintStackTrace.java:104)\n+                        \tat PrintStackTrace.y6(PrintStackTrace.java:108)\n+                        \tat PrintStackTrace.y5(PrintStackTrace.java:112)\n+                        \tat PrintStackTrace.y4(PrintStackTrace.java:116)\n+                        \tat PrintStackTrace.y3(PrintStackTrace.java:120)\n+                        \tat PrintStackTrace.y2(PrintStackTrace.java:124)\n+                        \tat PrintStackTrace.y1(PrintStackTrace.java:128)\n+                        \tat PrintStackTrace.y0(PrintStackTrace.java:132)\n+                        \tat PrintStackTrace.xn(PrintStackTrace.java:137)\n+                        \t... 11 more\n+                        Caused by: java.lang.RuntimeException\n+                        \tat PrintStackTrace.fn(PrintStackTrace.java:43)\n+                        \tat PrintStackTrace.f9(PrintStackTrace.java:47)\n+                        \tat PrintStackTrace.f8(PrintStackTrace.java:51)\n+                        \tat PrintStackTrace.f7(PrintStackTrace.java:55)\n+                        \tat PrintStackTrace.f6(PrintStackTrace.java:59)\n+                        \tat PrintStackTrace.f5(PrintStackTrace.java:63)\n+                        \tat PrintStackTrace.f4(PrintStackTrace.java:67)\n+                        \tat PrintStackTrace.f3(PrintStackTrace.java:71)\n+                        \tat PrintStackTrace.f2(PrintStackTrace.java:75)\n+                        \tat PrintStackTrace.f1(PrintStackTrace.java:79)\n+                        \tat PrintStackTrace.f0(PrintStackTrace.java:83)\n+                        \tat PrintStackTrace.yn(PrintStackTrace.java:89)\n+                        \t... 22 more\n+                        \"\"\";\n+        String s = byteout.toString();\n+        if (!expect.equals(s)) {\n+            System.err.println(s);\n+            throw new RuntimeException(\"stackTrace error\");\n+        }\n+    }\n+\n+    \/**\n+     * Execute \"java\" with the given arguments, returning the exit code.\n+     *\/\n+    @Test\n+    public void exec() throws Exception {\n+        int exitValue = jdk.test.lib.process.ProcessTools.executeTestJava(\"PrintStackTrace\")\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue();\n+        assertTrue(exitValue == 0);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Throwable\/PrintStackTrace.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"}]}