{"files":[{"patch":"@@ -27,3 +27,0 @@\n-\n-import java.util.Random;\n-\n@@ -33,0 +30,2 @@\n+import java.util.Random;\n+\n@@ -48,1 +47,5 @@\n-        TestFramework.run();\n+        TestFramework.runWithFlags(\n+                \"-XX:+IgnoreUnrecognizedVMOptions\", \/\/ StressLongCountedLoop is only available in debug builds\n+                \"-XX:StressLongCountedLoop=0\", \/\/ Don't convert int counted loops to long ones\n+                \"-XX:PerMethodTrapLimit=100\" \/\/ allow slow-path loop limit checks\n+        );\n@@ -56,1 +59,1 @@\n-     * For good measures, a randomly initialized static final stride and stride2 is also tested.\n+     * For good measures, randomly initialized static final stride and stride2 is also tested.\n@@ -61,2 +64,2 @@\n-    @Arguments(values = {Argument.NUMBER_42}) \/\/ otherwise a large number may take too long\n-    @IR(counts = {IRNode.COUNTED_LOOP, \">=1\"})\n+    @Arguments(values = { Argument.NUMBER_42 }) \/\/ otherwise a large number may take too long\n+    @IR(counts = { IRNode.COUNTED_LOOP, \">=1\" })\n@@ -73,1 +76,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -90,18 +93,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n-    private static int testIntCountedLoopWithIntIVLeq(int stop) {\n-        int a = 0;\n-        for (int i = 0; i <= stop; i++) {\n-            a += 1;\n-        }\n-\n-        return a;\n-    }\n-\n-    @Run(test = \"testIntCountedLoopWithIntIVLeq\")\n-    private static void runTestIntCountedLoopWithIntIVLeq() {\n-        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n-        Asserts.assertEQ(s + 1, testIntCountedLoopWithIntIVLeq(s));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -124,1 +110,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -141,1 +127,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -158,1 +144,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -175,1 +161,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -194,1 +180,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -211,1 +197,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -229,1 +215,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -249,1 +235,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -266,18 +252,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n-    private static long testIntCountedLoopWithLongIVLeq(int stop) {\n-        long a = 0;\n-        for (int i = 0; i <= stop; i++) {\n-            a += 1;\n-        }\n-\n-        return a;\n-    }\n-\n-    @Run(test = \"testIntCountedLoopWithLongIVLeq\")\n-    private static void runTestIntCountedLoopWithLongIVLeq() {\n-        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n-        Asserts.assertEQ((long) s + 1L, testIntCountedLoopWithLongIVLeq(s));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -300,1 +269,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -317,1 +286,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -334,1 +303,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -351,1 +320,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -368,1 +337,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -385,1 +354,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n@@ -403,1 +372,1 @@\n-    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/parallel_iv\/TestParallelIvInIntCountedLoop.java","additions":28,"deletions":59,"binary":false,"changes":87,"status":"modified"}]}