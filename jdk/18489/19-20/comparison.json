{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.util.function.Function;\n@@ -32,0 +31,1 @@\n+import jdk.test.lib.Utils;\n@@ -41,2 +41,1 @@\n-    private static final int stride;\n-    private static final int stride2;\n+    private static final Random RNG = Utils.getRandomInstance();\n@@ -44,7 +43,3 @@\n-    static {\n-        Random rng = new Random();\n-\n-        \/\/ stride2 must be a multiple of stride and must not overflow for the optimization to work\n-        stride = rng.nextInt(1, Integer.MAX_VALUE \/ 16);\n-        stride2 = stride * rng.nextInt(1, 16);\n-    }\n+    \/\/ stride2 must be a multiple of stride and must not overflow for the optimization to work\n+    private static final int STRIDE = RNG.nextInt(1, Integer.MAX_VALUE \/ 16);\n+    private static final int STRIDE_2 = STRIDE * RNG.nextInt(1, 16);\n@@ -54,1 +49,0 @@\n-        testCorrectness();\n@@ -79,1 +73,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -90,0 +83,6 @@\n+    @Run(test = \"testIntCountedLoopWithIntIV\")\n+    private static void runTestIntCountedLoopWithIntIv() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s, testIntCountedLoopWithIntIV(s));\n+    }\n+\n@@ -91,1 +90,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -102,0 +100,6 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVLeq\")\n+    private static void runTestIntCountedLoopWithIntIVLeq() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s + 1, testIntCountedLoopWithIntIVLeq(s));\n+    }\n+\n@@ -103,1 +107,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -114,0 +117,6 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVZero\")\n+    private static void runTestIntCountedLoopWithIntIVZero() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(0, testIntCountedLoopWithIntIVZero(s));\n+    }\n+\n@@ -115,1 +124,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -126,0 +134,6 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVMax\")\n+    private static void runTestIntCountedLoopWithIntIVMax() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s * Integer.MAX_VALUE, testIntCountedLoopWithIntIVMax(s));\n+    }\n+\n@@ -127,1 +141,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -138,0 +151,6 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVMaxMinusOne\")\n+    private static void runTestIntCountedLoopWithIntIVMaxMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s * (Integer.MAX_VALUE - 1), testIntCountedLoopWithIntIVMaxMinusOne(s));\n+    }\n+\n@@ -139,1 +158,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -150,0 +168,6 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVMaxPlusOne\")\n+    private static void runTestIntCountedLoopWithIntIVMaxPlusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s * (Integer.MAX_VALUE + 1), testIntCountedLoopWithIntIVMaxPlusOne(s));\n+    }\n+\n@@ -151,1 +175,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -162,0 +185,8 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVWithStrideTwo\")\n+    private static void runTestIntCountedLoopWithIntIVWithStrideTwo() {\n+        \/\/ Since we can't easily determine expected values if loop variables overflow when incrementing, we make sure\n+        \/\/ `stop` is less than (MAX_VALUE - stride).\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - 2);\n+        Asserts.assertEQ(Math.ceilDiv(s, 2) * 2, testIntCountedLoopWithIntIVWithStrideTwo(s));\n+    }\n+\n@@ -163,1 +194,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -174,0 +204,6 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVWithStrideMinusOne\")\n+    private static void runTestIntCountedLoopWithIntIVWithStrideMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s, testIntCountedLoopWithIntIVWithStrideMinusOne(s));\n+    }\n+\n@@ -175,1 +211,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -179,2 +214,2 @@\n-        for (int i = 0; i < stop; i += stride) {\n-            a += stride2;\n+        for (int i = 0; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n@@ -186,0 +221,7 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVWithRandomStrides\")\n+    private static void runTestIntCountedLoopWithIntIVWithRandomStrides() {\n+        \/\/ Make sure `stop` is less than (MAX_VALUE - stride) to avoid overflows.\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        Asserts.assertEQ(Math.ceilDiv(s, STRIDE) * STRIDE_2, testIntCountedLoopWithIntIVWithRandomStrides(s));\n+    }\n+\n@@ -187,1 +229,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n@@ -191,2 +232,2 @@\n-        for (int i = init2; i < stop; i += stride) {\n-            a += stride2;\n+        for (int i = init2; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n@@ -198,0 +239,9 @@\n+    @Run(test = \"testIntCountedLoopWithIntIVWithRandomStridesAndInits\")\n+    private static void runTestIntCountedLoopWithIntIVWithRandomStridesAndInits() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        int init1 = RNG.nextInt();\n+        int init2 = RNG.nextInt(Integer.MIN_VALUE + s + 1, s); \/\/ Limit bounds to avoid loop variables from overflowing.\n+        Asserts.assertEQ(Math.ceilDiv((s - init2), STRIDE) * STRIDE_2 + init1,\n+                testIntCountedLoopWithIntIVWithRandomStridesAndInits(init1, init2, s));\n+    }\n+\n@@ -199,1 +249,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -210,0 +259,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIV\")\n+    private static void runTestIntCountedLoopWithLongIV() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s, testIntCountedLoopWithLongIV(s));\n+    }\n+\n@@ -211,1 +266,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -222,0 +276,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVLeq\")\n+    private static void runTestIntCountedLoopWithLongIVLeq() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s + 1L, testIntCountedLoopWithLongIVLeq(s));\n+    }\n+\n@@ -223,1 +283,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -234,0 +293,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVZero\")\n+    private static void runTestIntCountedLoopWithLongIVZero() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) 0, testIntCountedLoopWithLongIVZero(s));\n+    }\n+\n@@ -235,1 +300,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -246,0 +310,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVMax\")\n+    private static void runTestIntCountedLoopWithLongIVMax() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s * Long.MAX_VALUE, testIntCountedLoopWithLongIVMax(s));\n+    }\n+\n@@ -247,1 +317,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -258,0 +327,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVMaxMinusOne\")\n+    private static void runTestIntCountedLoopWithLongIVMaxMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s * (Long.MAX_VALUE - 1L), testIntCountedLoopWithLongIVMaxMinusOne(s));\n+    }\n+\n@@ -259,1 +334,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -270,0 +344,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVMaxPlusOne\")\n+    private static void runTestIntCountedLoopWithLongIVMaxPlusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s * (Long.MAX_VALUE + 1L), testIntCountedLoopWithLongIVMaxPlusOne(s));\n+    }\n+\n@@ -271,1 +351,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -282,0 +361,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVWithStrideTwo\")\n+    private static void runTestIntCountedLoopWithLongIVWithStrideTwo() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - 2);\n+        Asserts.assertEQ(Math.ceilDiv(s, 2L) * 2L, testIntCountedLoopWithLongIVWithStrideTwo(s));\n+    }\n+\n@@ -283,1 +368,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -294,0 +378,6 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVWithStrideMinusOne\")\n+    private static void runTestIntCountedLoopWithLongIVWithStrideMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s, testIntCountedLoopWithLongIVWithStrideMinusOne(s));\n+    }\n+\n@@ -295,1 +385,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE})\n@@ -299,2 +388,2 @@\n-        for (int i = 0; i < stop; i += stride) {\n-            a += (long) stride2;\n+        for (int i = 0; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n@@ -306,0 +395,7 @@\n+    @Run(test = \"testIntCountedLoopWithLongIVWithRandomStrides\")\n+    private static void runTestIntCountedLoopWithLongIVWithRandomStrides() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        Asserts.assertEQ(Math.ceilDiv(s, (long) STRIDE) * (long) STRIDE_2,\n+                testIntCountedLoopWithLongIVWithRandomStrides(s));\n+    }\n+\n@@ -307,1 +403,0 @@\n-    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n@@ -311,2 +406,2 @@\n-        for (int i = init2; i < stop; i += stride) {\n-            a += stride2;\n+        for (int i = init2; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n@@ -318,40 +413,7 @@\n-    private static void testCorrectness() {\n-        Random rng = new Random();\n-\n-        \/\/ Since we can't easily determine expected values if loop variables overflow, we make sure i is less than (MAX_VALUE - stride).\n-        int[] iterations = {0, 1, 2, 42, 100, rng.nextInt(0, Integer.MAX_VALUE - stride)};\n-\n-        for (int i : iterations) {\n-            Asserts.assertEQ(i, testIntCountedLoopWithIntIV(i));\n-            Asserts.assertEQ(i + 1, testIntCountedLoopWithIntIVLeq(i));\n-            Asserts.assertEQ(0, testIntCountedLoopWithIntIVZero(i));\n-            Asserts.assertEQ(i * Integer.MAX_VALUE, testIntCountedLoopWithIntIVMax(i));\n-            Asserts.assertEQ(i * (Integer.MAX_VALUE - 1), testIntCountedLoopWithIntIVMaxMinusOne(i));\n-            Asserts.assertEQ(i * (Integer.MAX_VALUE + 1), testIntCountedLoopWithIntIVMaxPlusOne(i));\n-            Asserts.assertEQ(Math.ceilDiv(i, 2) * 2, testIntCountedLoopWithIntIVWithStrideTwo(i));\n-            Asserts.assertEQ(i, testIntCountedLoopWithIntIVWithStrideMinusOne(i));\n-\n-            Asserts.assertEQ((long) i, testIntCountedLoopWithLongIV(i));\n-            Asserts.assertEQ((long) i + 1l, testIntCountedLoopWithLongIVLeq(i));\n-            Asserts.assertEQ((long) 0, testIntCountedLoopWithLongIVZero(i));\n-            Asserts.assertEQ((long) i * Long.MAX_VALUE, testIntCountedLoopWithLongIVMax(i));\n-            Asserts.assertEQ((long) i * (Long.MAX_VALUE - 1l), testIntCountedLoopWithLongIVMaxMinusOne(i));\n-            Asserts.assertEQ((long) i * (Long.MAX_VALUE + 1l), testIntCountedLoopWithLongIVMaxPlusOne(i));\n-            Asserts.assertEQ(Math.ceilDiv(i, 2l) * 2l, testIntCountedLoopWithLongIVWithStrideTwo(i));\n-            Asserts.assertEQ((long) i, testIntCountedLoopWithLongIVWithStrideMinusOne(i));\n-\n-            \/\/ test with random stride and stride2\n-            Asserts.assertEQ(Math.ceilDiv(i, stride) * stride2, testIntCountedLoopWithIntIVWithRandomStrides(i));\n-            Asserts.assertEQ(Math.ceilDiv(i, (long) stride) * (long) stride2, testIntCountedLoopWithLongIVWithRandomStrides(i));\n-\n-            \/\/ also test with random init and init2\n-            int init1 = rng.nextInt();\n-            int init2 = rng.nextInt(Integer.MIN_VALUE + i + 1, i); \/\/ Limit bounds to avoid loop variables from overflowing.\n-            long init1L = rng.nextLong();\n-\n-            Asserts.assertEQ(Math.ceilDiv((i - init2), stride) * stride2 + init1,\n-                    testIntCountedLoopWithIntIVWithRandomStridesAndInits(init1, init2, i));\n-\n-            Asserts.assertEQ(Math.ceilDiv(((long) i - init2), (long) stride) * (long) stride2 + init1L,\n-                    testIntCountedLoopWithLongIVWithRandomStridesAndInits(init1L, init2, i));\n-        }\n+    @Run(test = \"testIntCountedLoopWithLongIVWithRandomStridesAndInits\")\n+    private static void runTestIntCountedLoopWithLongIVWithRandomStridesAndInits() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        long init1 = RNG.nextLong();\n+        int init2 = RNG.nextInt(Integer.MIN_VALUE + s + 1, s); \/\/ Limit bounds to avoid loop variables from overflowing.\n+        Asserts.assertEQ(Math.ceilDiv(((long) s - init2), (long) STRIDE) * (long) STRIDE_2 + init1,\n+                testIntCountedLoopWithLongIVWithRandomStridesAndInits(init1, init2, s));\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/parallel_iv\/TestParallelIvInIntCountedLoop.java","additions":141,"deletions":79,"binary":false,"changes":220,"status":"modified"}]}