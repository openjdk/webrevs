{"files":[{"patch":"@@ -3910,0 +3910,20 @@\n+\/\/ This optimization looks for patterns similar to:\n+\/\/\n+\/\/    int a = init2;\n+\/\/    for (int i = init; i < limit; i += stride) {\n+\/\/      a += stride2;\n+\/\/    }\n+\/\/\n+\/\/ and transforms it to:\n+\/\/\n+\/\/    int a = init2\n+\/\/    for (int i = init; i < limit; i += stride) {\n+\/\/      a = init2 + (i - init) * (stride2 \/ stride)\n+\/\/    }\n+\/\/\n+\/\/ so that the loop can be eliminated. Notice that the above is equivalently expressed as\n+\/\/\n+\/\/    (phi * stride_con2 \/ stride_con) + (init2 - (init * stride_con2 \/ stride_con))\n+\/\/\n+\/\/ which corresponds to the structure of transformed subgraph below.\n+\/\/\n@@ -3922,1 +3942,1 @@\n-  int stride_con = cl->stride_con();\n+  jlong stride_con = cl->stride_con();\n@@ -3939,1 +3959,1 @@\n-        incr2->Opcode() != Op_AddI ||\n+        (incr2->Opcode() != Op_AddI && incr2->Opcode() != Op_AddL) ||\n@@ -3955,1 +3975,4 @@\n-    int stride_con2 = incr2->in(2)->get_int();\n+\n+    \/\/ determine the basic type of the stride constant (and the iv being incremented)\n+    BasicType stride_con2_bt = incr2->Opcode() == Op_AddI ? T_INT : T_LONG;\n+    jlong stride_con2 = incr2->in(2)->get_integer_as_long(stride_con2_bt);\n@@ -3959,1 +3982,3 @@\n-    if (stride_con2 == min_jint && stride_con == -1) {\n+    if (((stride_con2_bt == T_INT && stride_con2 == min_jint) ||\n+        (stride_con2_bt == T_LONG && stride_con2 == min_jlong)) &&\n+        stride_con == -1) {\n@@ -3970,1 +3995,1 @@\n-    int ratio_con = stride_con2\/stride_con;\n+    jlong ratio_con = stride_con2 \/ stride_con;\n@@ -3983,1 +4008,1 @@\n-      Node* ratio = _igvn.intcon(ratio_con);\n+      Node* ratio = _igvn.integercon(ratio_con, stride_con2_bt);\n@@ -3985,2 +4010,10 @@\n-      Node* ratio_init = new MulINode(init, ratio);\n-      _igvn.register_new_node_with_optimizer(ratio_init, init);\n+\n+      Node* init_converted = init;\n+      if (stride_con2_bt == T_LONG) {\n+        init_converted = new ConvI2LNode(init);\n+        _igvn.register_new_node_with_optimizer(init_converted, init);\n+        set_early_ctrl(init_converted, false);\n+      }\n+\n+      Node* ratio_init = MulNode::make(init_converted, ratio, stride_con2_bt);\n+      _igvn.register_new_node_with_optimizer(ratio_init, init_converted);\n@@ -3988,1 +4021,1 @@\n-      Node* diff = new SubINode(init2, ratio_init);\n+      Node* diff = SubNode::make(init2, ratio_init, stride_con2_bt);\n@@ -3991,2 +4024,10 @@\n-      Node* ratio_idx = new MulINode(phi, ratio);\n-      _igvn.register_new_node_with_optimizer(ratio_idx, phi);\n+\n+      Node* phi_converted = phi;\n+      if (stride_con2_bt == T_LONG) {\n+        phi_converted = new ConvI2LNode(phi);\n+        _igvn.register_new_node_with_optimizer(phi_converted, phi);\n+        set_early_ctrl(phi_converted, false);\n+      }\n+\n+      Node* ratio_idx = MulNode::make(phi_converted, ratio, stride_con2_bt);\n+      _igvn.register_new_node_with_optimizer(ratio_idx, phi_converted);\n@@ -3994,1 +4035,1 @@\n-      Node* add = new AddINode(ratio_idx, diff);\n+      Node* add = AddNode::make(ratio_idx, diff, stride_con2_bt);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":53,"deletions":12,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2024 Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.Argument;\n+import compiler.lib.ir_framework.Arguments;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+\n+import java.util.function.Function;\n+\n+\/**\n+ * @test\n+ * @bug 8328528\n+ * @summary test the long typed parallel iv replacing transformation for int counted loop\n+ * @library \/test\/lib \/\n+ * @run main compiler.c2.irTests.TestCountedLoopIV\n+ *\/\n+public class TestCountedLoopIV {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+        testCorrectness();\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIV(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    private static int testIntCountedLoopWithIntIVZero(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 0; \/\/ we unfortunately have to repeat ourselves because the operand has to be a constant\n+        }\n+\n+        return a;\n+    }\n+\n+    private static int testIntCountedLoopWithIntIVMax(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Integer.MAX_VALUE;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIV(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    private static long testIntCountedLoopWithLongIVZero(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 0;\n+        }\n+\n+        return a;\n+    }\n+\n+    private static long testIntCountedLoopWithLongIVMax(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Long.MAX_VALUE;\n+        }\n+\n+        return a;\n+    }\n+\n+    private static <T extends Number> void test(Function<Integer, T> function, int iteration, T expected) {\n+        T result = function.apply(iteration);\n+        if (!result.equals(expected)) {\n+            throw new RuntimeException(\"Bad result for IV with stop = \" + iteration + \", expected \" + expected\n+                    + \", got \" + result);\n+        }\n+    }\n+\n+    private static void testCorrectness() {\n+        int[] iterations = {0, 1, 2, 42, 100};\n+\n+        for (int i : iterations) {\n+            test(TestCountedLoopIV::testIntCountedLoopWithIntIV, i, i);\n+            test(TestCountedLoopIV::testIntCountedLoopWithIntIVZero, i, 0);\n+            test(TestCountedLoopIV::testIntCountedLoopWithIntIVMax, i, i * Integer.MAX_VALUE);\n+            test(TestCountedLoopIV::testIntCountedLoopWithLongIV, i, (long) i);\n+            test(TestCountedLoopIV::testIntCountedLoopWithLongIVZero, i, (long) 0);\n+            test(TestCountedLoopIV::testIntCountedLoopWithLongIVMax, i, (long) i * Long.MAX_VALUE);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountedLoopIV.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}