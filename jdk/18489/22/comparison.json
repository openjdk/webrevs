{"files":[{"patch":"@@ -3940,0 +3940,30 @@\n+\/\/ This optimization looks for patterns similar to:\n+\/\/\n+\/\/    int a = init2;\n+\/\/    for (int phi = init; phi < limit; phi += stride_con) {\n+\/\/      a += stride_con2;\n+\/\/    }\n+\/\/\n+\/\/ and transforms it to:\n+\/\/\n+\/\/    int a = init2\n+\/\/    for (int phi = init; phi < limit; phi += stride_con) {\n+\/\/      a = init2 + (phi - init) * (stride_con2 \/ stride_con)\n+\/\/    }\n+\/\/\n+\/\/ Such transformation introduces more optimization opportunities. In this\n+\/\/ particular example, the loop can be eliminated entirely given that\n+\/\/ `stride_con2 \/ stride_con` is exact  (i.e., no remainder). Checks are in\n+\/\/ place to only perform this optimization if such a division is exact. This\n+\/\/ example will be transformed into its semantic equivalence:\n+\/\/\n+\/\/     int a = (phi * stride_con2 \/ stride_con) + (init2 - (init * stride_con2 \/ stride_con))\n+\/\/\n+\/\/ which corresponds to the structure of transformed subgraph.\n+\/\/\n+\/\/ However, if there is a mismatch between types of the loop and the parallel\n+\/\/ induction variable (e.g., a long-typed IV in an int-typed loop), type\n+\/\/ conversions are required:\n+\/\/\n+\/\/     long a = ((long) phi * stride_con2 \/ stride_con) + (init2 - ((long) init * stride_con2 \/ stride_con))\n+\/\/\n@@ -3952,1 +3982,1 @@\n-  int stride_con = cl->stride_con();\n+  jlong stride_con = cl->stride_con();\n@@ -3969,1 +3999,1 @@\n-        incr2->Opcode() != Op_AddI ||\n+        (incr2->Opcode() != Op_AddI && incr2->Opcode() != Op_AddL) ||\n@@ -3985,1 +4015,4 @@\n-    int stride_con2 = incr2->in(2)->get_int();\n+\n+    \/\/ Determine the basic type of the stride constant (and the iv being incremented).\n+    BasicType stride_con2_bt = incr2->Opcode() == Op_AddI ? T_INT : T_LONG;\n+    jlong stride_con2 = incr2->in(2)->get_integer_as_long(stride_con2_bt);\n@@ -3988,2 +4021,3 @@\n-    \/\/ if stride_con2 is min_int and stride_con is -1.\n-    if (stride_con2 == min_jint && stride_con == -1) {\n+    \/\/ if stride_con2 is min_jint (or min_jlong, respectively) and\n+    \/\/ stride_con is -1.\n+    if (stride_con2 == min_signed_integer(stride_con2_bt) && stride_con == -1) {\n@@ -4000,1 +4034,1 @@\n-    int ratio_con = stride_con2\/stride_con;\n+    jlong ratio_con = stride_con2 \/ stride_con;\n@@ -4013,1 +4047,1 @@\n-      Node* ratio = _igvn.intcon(ratio_con);\n+      Node* ratio = _igvn.integercon(ratio_con, stride_con2_bt);\n@@ -4015,2 +4049,6 @@\n-      Node* ratio_init = new MulINode(init, ratio);\n-      _igvn.register_new_node_with_optimizer(ratio_init, init);\n+\n+      Node* init_converted = insert_convert_node_if_needed(stride_con2_bt, init);\n+      Node* phi_converted = insert_convert_node_if_needed(stride_con2_bt, phi);\n+\n+      Node* ratio_init = MulNode::make(init_converted, ratio, stride_con2_bt);\n+      _igvn.register_new_node_with_optimizer(ratio_init, init_converted);\n@@ -4018,1 +4056,2 @@\n-      Node* diff = new SubINode(init2, ratio_init);\n+\n+      Node* diff = SubNode::make(init2, ratio_init, stride_con2_bt);\n@@ -4021,2 +4060,3 @@\n-      Node* ratio_idx = new MulINode(phi, ratio);\n-      _igvn.register_new_node_with_optimizer(ratio_idx, phi);\n+\n+      Node* ratio_idx = MulNode::make(phi_converted, ratio, stride_con2_bt);\n+      _igvn.register_new_node_with_optimizer(ratio_idx, phi_converted);\n@@ -4024,1 +4064,2 @@\n-      Node* add = new AddINode(ratio_idx, diff);\n+\n+      Node* add = AddNode::make(ratio_idx, diff, stride_con2_bt);\n@@ -4027,0 +4068,1 @@\n+\n@@ -4038,0 +4080,13 @@\n+Node* PhaseIdealLoop::insert_convert_node_if_needed(BasicType target, Node* input) {\n+  BasicType source = _igvn.type(input)->basic_type();\n+  if (source == target) {\n+    return input;\n+  }\n+\n+  Node* converted = ConvertNode::create_convert(source, target, input);\n+  _igvn.register_new_node_with_optimizer(converted, input);\n+  set_early_ctrl(converted, false);\n+\n+  return converted;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":68,"deletions":13,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -1135,0 +1135,2 @@\n+  Node* insert_convert_node_if_needed(BasicType target, Node* input);\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,391 @@\n+\/*\n+ * Copyright (c) 2024 Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts.parallel_iv;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n+\n+\/**\n+ * @test\n+ * @bug 8328528\n+ * @summary test the long typed parallel iv replacing transformation for int counted loop\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.loopopts.parallel_iv.TestParallelIvInIntCountedLoop\n+ *\/\n+public class TestParallelIvInIntCountedLoop {\n+    private static final Random RNG = Utils.getRandomInstance();\n+\n+    \/\/ stride2 must be a multiple of stride and must not overflow for the optimization to work\n+    private static final int STRIDE = RNG.nextInt(1, Integer.MAX_VALUE \/ 16);\n+    private static final int STRIDE_2 = STRIDE * RNG.nextInt(1, 16);\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\n+                \"-XX:+IgnoreUnrecognizedVMOptions\", \/\/ StressLongCountedLoop is only available in debug builds\n+                \"-XX:StressLongCountedLoop=0\", \/\/ Don't convert int counted loops to long ones\n+                \"-XX:PerMethodTrapLimit=100\" \/\/ allow slow-path loop limit checks\n+        );\n+    }\n+\n+    \/*\n+     * The IR framework can only test against static code, and the transformation relies on strides being constants to\n+     * perform constant propagation. Therefore, we have no choice but repeating the same test case multiple times with\n+     * different numbers.\n+     *\n+     * For good measures, randomly initialized static final stride and stride2 is also tested.\n+     *\/\n+\n+    \/\/ A controlled test making sure a simple non-counted loop can be found by the test framework.\n+    @Test\n+    @Arguments(values = { Argument.NUMBER_42 }) \/\/ otherwise a large number may take too long\n+    @IR(counts = { IRNode.COUNTED_LOOP, \">=1\" })\n+    private static int testControlledSimpleLoop(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += i; \/\/ cannot be extracted to multiplications\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIV(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIV\")\n+    private static void runTestIntCountedLoopWithIntIv() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s, testIntCountedLoopWithIntIV(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVZero(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 0;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVZero\")\n+    private static void runTestIntCountedLoopWithIntIVZero() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(0, testIntCountedLoopWithIntIVZero(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVMax(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Integer.MAX_VALUE;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVMax\")\n+    private static void runTestIntCountedLoopWithIntIVMax() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s * Integer.MAX_VALUE, testIntCountedLoopWithIntIVMax(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVMaxMinusOne(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Integer.MAX_VALUE - 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVMaxMinusOne\")\n+    private static void runTestIntCountedLoopWithIntIVMaxMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s * (Integer.MAX_VALUE - 1), testIntCountedLoopWithIntIVMaxMinusOne(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVMaxPlusOne(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Integer.MAX_VALUE + 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVMaxPlusOne\")\n+    private static void runTestIntCountedLoopWithIntIVMaxPlusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s * (Integer.MAX_VALUE + 1), testIntCountedLoopWithIntIVMaxPlusOne(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVWithStrideTwo(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i += 2) {\n+            a += 2; \/\/ this stride2 constant must be a multiple of the first stride (i += ...) for optimization\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVWithStrideTwo\")\n+    private static void runTestIntCountedLoopWithIntIVWithStrideTwo() {\n+        \/\/ Since we can't easily determine expected values if loop variables overflow when incrementing, we make sure\n+        \/\/ `stop` is less than (MAX_VALUE - stride).\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - 2);\n+        Asserts.assertEQ(Math.ceilDiv(s, 2) * 2, testIntCountedLoopWithIntIVWithStrideTwo(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVWithStrideMinusOne(int stop) {\n+        int a = 0;\n+        for (int i = stop; i > 0; i += -1) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVWithStrideMinusOne\")\n+    private static void runTestIntCountedLoopWithIntIVWithStrideMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ(s, testIntCountedLoopWithIntIVWithStrideMinusOne(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVWithRandomStrides(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVWithRandomStrides\")\n+    private static void runTestIntCountedLoopWithIntIVWithRandomStrides() {\n+        \/\/ Make sure `stop` is less than (MAX_VALUE - stride) to avoid overflows.\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        Asserts.assertEQ(Math.ceilDiv(s, STRIDE) * STRIDE_2, testIntCountedLoopWithIntIVWithRandomStrides(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static int testIntCountedLoopWithIntIVWithRandomStridesAndInits(int init, int init2, int stop) {\n+        int a = init;\n+        for (int i = init2; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithIntIVWithRandomStridesAndInits\")\n+    private static void runTestIntCountedLoopWithIntIVWithRandomStridesAndInits() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        int init1 = RNG.nextInt();\n+        int init2 = RNG.nextInt(Integer.MIN_VALUE + s + 1, s); \/\/ Limit bounds to avoid loop variables from overflowing.\n+        Asserts.assertEQ(Math.ceilDiv((s - init2), STRIDE) * STRIDE_2 + init1,\n+                testIntCountedLoopWithIntIVWithRandomStridesAndInits(init1, init2, s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIV(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIV\")\n+    private static void runTestIntCountedLoopWithLongIV() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s, testIntCountedLoopWithLongIV(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVZero(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 0;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVZero\")\n+    private static void runTestIntCountedLoopWithLongIVZero() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) 0, testIntCountedLoopWithLongIVZero(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVMax(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Long.MAX_VALUE;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVMax\")\n+    private static void runTestIntCountedLoopWithLongIVMax() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s * Long.MAX_VALUE, testIntCountedLoopWithLongIVMax(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVMaxMinusOne(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Long.MAX_VALUE - 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVMaxMinusOne\")\n+    private static void runTestIntCountedLoopWithLongIVMaxMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s * (Long.MAX_VALUE - 1L), testIntCountedLoopWithLongIVMaxMinusOne(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVMaxPlusOne(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Long.MAX_VALUE + 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVMaxPlusOne\")\n+    private static void runTestIntCountedLoopWithLongIVMaxPlusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s * (Long.MAX_VALUE + 1L), testIntCountedLoopWithLongIVMaxPlusOne(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVWithStrideTwo(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i += 2) {\n+            a += 2;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVWithStrideTwo\")\n+    private static void runTestIntCountedLoopWithLongIVWithStrideTwo() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - 2);\n+        Asserts.assertEQ(Math.ceilDiv(s, 2L) * 2L, testIntCountedLoopWithLongIVWithStrideTwo(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVWithStrideMinusOne(int stop) {\n+        long a = 0;\n+        for (int i = stop; i > 0; i += -1) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVWithStrideMinusOne\")\n+    private static void runTestIntCountedLoopWithLongIVWithStrideMinusOne() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE);\n+        Asserts.assertEQ((long) s, testIntCountedLoopWithLongIVWithStrideMinusOne(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVWithRandomStrides(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVWithRandomStrides\")\n+    private static void runTestIntCountedLoopWithLongIVWithRandomStrides() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        Asserts.assertEQ(Math.ceilDiv(s, (long) STRIDE) * (long) STRIDE_2,\n+                testIntCountedLoopWithLongIVWithRandomStrides(s));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP })\n+    private static long testIntCountedLoopWithLongIVWithRandomStridesAndInits(long init, int init2, int stop) {\n+        long a = init;\n+        for (int i = init2; i < stop; i += STRIDE) {\n+            a += STRIDE_2;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = \"testIntCountedLoopWithLongIVWithRandomStridesAndInits\")\n+    private static void runTestIntCountedLoopWithLongIVWithRandomStridesAndInits() {\n+        int s = RNG.nextInt(0, Integer.MAX_VALUE - STRIDE);\n+        long init1 = RNG.nextLong();\n+        int init2 = RNG.nextInt(Integer.MIN_VALUE + s + 1, s); \/\/ Limit bounds to avoid loop variables from overflowing.\n+        Asserts.assertEQ(Math.ceilDiv(((long) s - init2), (long) STRIDE) * (long) STRIDE_2 + init1,\n+                testIntCountedLoopWithLongIVWithRandomStridesAndInits(init1, init2, s));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/parallel_iv\/TestParallelIvInIntCountedLoop.java","additions":391,"deletions":0,"binary":false,"changes":391,"status":"added"}]}