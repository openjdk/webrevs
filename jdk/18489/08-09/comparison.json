{"files":[{"patch":"@@ -3995,1 +3995,1 @@\n-    \/\/ determine the basic type of the stride constant (and the iv being incremented)\n+    \/\/ Determine the basic type of the stride constant (and the iv being incremented).\n@@ -4000,1 +4000,2 @@\n-    \/\/ if stride_con2 is min_int and stride_con is -1.\n+    \/\/ if stride_con2 is min_jint (or min_jlong, respectively) and\n+    \/\/ stride_con is -1.\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,6 +26,1 @@\n-import compiler.lib.ir_framework.Argument;\n-import compiler.lib.ir_framework.Arguments;\n-import compiler.lib.ir_framework.IR;\n-import compiler.lib.ir_framework.IRNode;\n-import compiler.lib.ir_framework.Test;\n-import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.*;\n@@ -36,0 +31,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -48,0 +45,2 @@\n+        Random rng = new Random();\n+\n@@ -49,2 +48,2 @@\n-        stride = new Random().nextInt(1, Integer.MAX_VALUE \/ 16);\n-        stride2 = stride * new Random().nextInt(1, 16);\n+        stride = rng.nextInt(1, Integer.MAX_VALUE \/ 16);\n+        stride2 = stride * rng.nextInt(1, 16);\n@@ -65,0 +64,14 @@\n+\n+    \/\/ A controlled test making sure a simple non-counted loop can be found by the test framework.\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42}) \/\/ otherwise a large number may take too long\n+    @IR(counts = {IRNode.COUNTED_LOOP, \">=1\"})\n+    private static int testControlledSimpleLoop(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += i; \/\/ cannot be extracted to multiplications\n+        }\n+\n+        return a;\n+    }\n+\n@@ -67,1 +80,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -79,1 +92,13 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVLeq(int stop) {\n+        int a = 0;\n+        for (int i = 0; i <= stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -91,1 +116,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -103,1 +128,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -115,1 +140,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -127,1 +152,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -139,1 +164,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -151,1 +176,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -161,0 +186,12 @@\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVWithRandomStridesAndInits(int init, int init2, int stop) {\n+        int a = init;\n+        for (int i = init2; i < stop; i += stride) {\n+            a += stride2;\n+        }\n+\n+        return a;\n+    }\n+\n@@ -163,1 +200,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -175,1 +212,13 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVLeq(int stop) {\n+        long a = 0;\n+        for (int i = 0; i <= stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -187,1 +236,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -199,1 +248,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -211,1 +260,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -223,1 +272,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -235,1 +284,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -247,1 +296,1 @@\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -257,5 +306,7 @@\n-    private static <T extends Number> void test(Function<Integer, T> function, int iteration, T expected) {\n-        T result = function.apply(iteration);\n-        if (!result.equals(expected)) {\n-            throw new RuntimeException(\"Bad result for IV with stop = \" + iteration + \", expected \" + expected\n-                    + \", got \" + result);\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVWithRandomStridesAndInits(long init, int init2, int stop) {\n+        long a = init;\n+        for (int i = init2; i < stop; i += stride) {\n+            a += stride2;\n@@ -263,0 +314,2 @@\n+\n+        return a;\n@@ -266,1 +319,3 @@\n-        int[] iterations = {0, 1, 2, 42, 100};\n+        Random rng = new Random();\n+\n+        int[] iterations = {0, 1, 2, 42, 100, rng.nextInt(0, Integer.MAX_VALUE)};\n@@ -269,19 +324,31 @@\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIV, i, i);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVZero, i, 0);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVMax, i, i * Integer.MAX_VALUE);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVMaxMinusOne, i, i * (Integer.MAX_VALUE - 1));\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVMaxPlusOne, i, i * (Integer.MAX_VALUE + 1));\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVWithStrideTwo, i, Math.ceilDiv(i, 2) * 2);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVWithStrideMinusOne, i, i);\n-\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIV, i, (long) i);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVZero, i, (long) 0);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVMax, i, (long) i * Long.MAX_VALUE);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVMaxMinusOne, i, (long) i * (Long.MAX_VALUE - 1));\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVMaxPlusOne, i, (long) i * (Long.MAX_VALUE + 1));\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVWithStrideTwo, i, Math.ceilDiv(i, (long) 2) * 2);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVWithStrideMinusOne, i, (long) i);\n-\n-            \/\/ test with random stride and stride2 for good measure\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVWithRandomStrides, i, Math.ceilDiv(i, stride) * stride2);\n-            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVWithRandomStrides, i, Math.ceilDiv(i, (long) stride) * stride2);\n+            Asserts.assertEQ(i, testIntCountedLoopWithIntIV(i));\n+            Asserts.assertEQ(i + 1, testIntCountedLoopWithIntIVLeq(i));\n+            Asserts.assertEQ(0, testIntCountedLoopWithIntIVZero(i));\n+            Asserts.assertEQ(i * Integer.MAX_VALUE, testIntCountedLoopWithIntIVMax(i));\n+            Asserts.assertEQ(i * (Integer.MAX_VALUE - 1), testIntCountedLoopWithIntIVMaxMinusOne(i));\n+            Asserts.assertEQ(i * (Integer.MAX_VALUE + 1), testIntCountedLoopWithIntIVMaxPlusOne(i));\n+            Asserts.assertEQ(Math.ceilDiv(i, 2) * 2, testIntCountedLoopWithIntIVWithStrideTwo(i));\n+            Asserts.assertEQ(i, testIntCountedLoopWithIntIVWithStrideMinusOne(i));\n+\n+            Asserts.assertEQ((long) i, testIntCountedLoopWithLongIV(i));\n+            Asserts.assertEQ((long) i + 1l, testIntCountedLoopWithLongIVLeq(i));\n+            Asserts.assertEQ((long) 0, testIntCountedLoopWithLongIVZero(i));\n+            Asserts.assertEQ((long) i * Long.MAX_VALUE, testIntCountedLoopWithLongIVMax(i));\n+            Asserts.assertEQ((long) i * (Long.MAX_VALUE - 1l), testIntCountedLoopWithLongIVMaxMinusOne(i));\n+            Asserts.assertEQ((long) i * (Long.MAX_VALUE + 1l), testIntCountedLoopWithLongIVMaxPlusOne(i));\n+            Asserts.assertEQ(Math.ceilDiv(i, 2l) * 2l, testIntCountedLoopWithLongIVWithStrideTwo(i));\n+            Asserts.assertEQ((long) i, testIntCountedLoopWithLongIVWithStrideMinusOne(i));\n+\n+            \/\/ test with random stride and stride2\n+            Asserts.assertEQ(Math.ceilDiv(i, stride) * stride2, testIntCountedLoopWithIntIVWithRandomStrides(i));\n+            Asserts.assertEQ(Math.ceilDiv(i, (long) stride) * (long) stride2, testIntCountedLoopWithLongIVWithRandomStrides(i));\n+\n+            \/\/ also test with random init and init2\n+            int init1 = rng.nextInt();\n+            int init2 = rng.nextInt(Integer.MIN_VALUE, i);\n+            Asserts.assertEQ(Math.ceilDiv((i - init2), stride) * stride2 + init1,\n+                    testIntCountedLoopWithIntIVWithRandomStridesAndInits(init1, init2, i));\n+\n+            long init1L = rng.nextLong(Long.MIN_VALUE, i);\n+            Asserts.assertEQ(Math.ceilDiv(((long) i - init2), (long) stride) * (long) stride2 + init1L,\n+                    testIntCountedLoopWithLongIVWithRandomStridesAndInits(init1L, init2, i));\n@@ -290,1 +357,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/parallel_iv\/TestParallelIvInIntCountedLoop.java","additions":117,"deletions":50,"binary":false,"changes":167,"status":"modified"}]}