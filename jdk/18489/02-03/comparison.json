{"files":[{"patch":"@@ -3923,2 +3923,2 @@\n-\/\/    for (int i = init; i < limit; i += stride) {\n-\/\/      a += stride2;\n+\/\/    for (int phi = init; phi < limit; phi += stride_con) {\n+\/\/      a += stride_con2;\n@@ -3930,2 +3930,2 @@\n-\/\/    for (int i = init; i < limit; i += stride) {\n-\/\/      a = init2 + (i - init) * (stride2 \/ stride)\n+\/\/    for (int phi = init; phi < limit; phi += stride_con) {\n+\/\/      a = init2 + (phi - init) * (stride_con2 \/ stride_con)\n@@ -3934,2 +3934,4 @@\n-\/\/ so that the loop can be eliminated. Notice that the above is equivalently\n-\/\/ expressed as\n+\/\/ so that the loop can be eliminated given that `stride_con2 \/ stride_con` is\n+\/\/ exact (i.e., no remainder). Checks are in place to only perform this\n+\/\/ optimization if such a division is exact. The example will be transformed\n+\/\/ into its semantic equivalence:\n@@ -3937,1 +3939,1 @@\n-\/\/     (phi * stride_con2 \/ stride_con) + (init2 - (init * stride_con2 \/ stride_con))\n+\/\/     int a = (phi * stride_con2 \/ stride_con) + (init2 - (init * stride_con2 \/ stride_con))\n@@ -3939,1 +3941,1 @@\n-\/\/ which corresponds to the structure of transformed subgraph below.\n+\/\/ which corresponds to the structure of transformed subgraph.\n@@ -3945,1 +3947,1 @@\n-\/\/     ((long) phi * stride_con2 \/ stride_con) + (init2 - ((long) init * stride_con2 \/ stride_con))\n+\/\/     long a = ((long) phi * stride_con2 \/ stride_con) + (init2 - ((long) init * stride_con2 \/ stride_con))\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2024 Red Hat and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import compiler.lib.ir_framework.Argument;\n-import compiler.lib.ir_framework.Arguments;\n-import compiler.lib.ir_framework.IR;\n-import compiler.lib.ir_framework.IRNode;\n-import compiler.lib.ir_framework.Test;\n-import compiler.lib.ir_framework.TestFramework;\n-\n-import java.util.function.Function;\n-\n-\/**\n- * @test\n- * @bug 8328528\n- * @summary test the long typed parallel iv replacing transformation for int counted loop\n- * @library \/test\/lib \/\n- * @run main compiler.c2.irTests.TestCountedLoopIV\n- *\/\n-public class TestCountedLoopIV {\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-        testCorrectness();\n-    }\n-\n-    @Test\n-    @Arguments(values = {Argument.DEFAULT})\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n-    private static int testIntCountedLoopWithIntIV(int stop) {\n-        int a = 0;\n-        for (int i = 0; i < stop; i++) {\n-            a += 1;\n-        }\n-\n-        return a;\n-    }\n-\n-    private static int testIntCountedLoopWithIntIVZero(int stop) {\n-        int a = 0;\n-        for (int i = 0; i < stop; i++) {\n-            a += 0; \/\/ we unfortunately have to repeat ourselves because the operand has to be a constant\n-        }\n-\n-        return a;\n-    }\n-\n-    private static int testIntCountedLoopWithIntIVMax(int stop) {\n-        int a = 0;\n-        for (int i = 0; i < stop; i++) {\n-            a += Integer.MAX_VALUE;\n-        }\n-\n-        return a;\n-    }\n-\n-    @Test\n-    @Arguments(values = {Argument.DEFAULT})\n-    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n-    private static long testIntCountedLoopWithLongIV(int stop) {\n-        long a = 0;\n-        for (int i = 0; i < stop; i++) {\n-            a += 1;\n-        }\n-\n-        return a;\n-    }\n-\n-    private static long testIntCountedLoopWithLongIVZero(int stop) {\n-        long a = 0;\n-        for (int i = 0; i < stop; i++) {\n-            a += 0;\n-        }\n-\n-        return a;\n-    }\n-\n-    private static long testIntCountedLoopWithLongIVMax(int stop) {\n-        long a = 0;\n-        for (int i = 0; i < stop; i++) {\n-            a += Long.MAX_VALUE;\n-        }\n-\n-        return a;\n-    }\n-\n-    private static <T extends Number> void test(Function<Integer, T> function, int iteration, T expected) {\n-        T result = function.apply(iteration);\n-        if (!result.equals(expected)) {\n-            throw new RuntimeException(\"Bad result for IV with stop = \" + iteration + \", expected \" + expected\n-                    + \", got \" + result);\n-        }\n-    }\n-\n-    private static void testCorrectness() {\n-        int[] iterations = {0, 1, 2, 42, 100};\n-\n-        for (int i : iterations) {\n-            test(TestCountedLoopIV::testIntCountedLoopWithIntIV, i, i);\n-            test(TestCountedLoopIV::testIntCountedLoopWithIntIVZero, i, 0);\n-            test(TestCountedLoopIV::testIntCountedLoopWithIntIVMax, i, i * Integer.MAX_VALUE);\n-            test(TestCountedLoopIV::testIntCountedLoopWithLongIV, i, (long) i);\n-            test(TestCountedLoopIV::testIntCountedLoopWithLongIVZero, i, (long) 0);\n-            test(TestCountedLoopIV::testIntCountedLoopWithLongIVMax, i, (long) i * Long.MAX_VALUE);\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountedLoopIV.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -0,0 +1,250 @@\n+\/*\n+ * Copyright (c) 2024 Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts.parallel_iv;\n+\n+import compiler.lib.ir_framework.Argument;\n+import compiler.lib.ir_framework.Arguments;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+\n+import java.util.function.Function;\n+\n+\/**\n+ * @test\n+ * @bug 8328528\n+ * @summary test the long typed parallel iv replacing transformation for int counted loop\n+ * @library \/test\/lib \/\n+ * @run main compiler.c2.irTests.TestCountedLoopIV\n+ *\/\n+public class TestParallelIvInIntCountedLoop {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+        testCorrectness();\n+    }\n+\n+    \/*\n+     * The IR framework can only test against static code, and the transformation relies on strides being constants to\n+     * perform constant propagation. Therefore, we have no choice but repeating the same test case multiple times with\n+     * different numbers.\n+     *\/\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIV(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVZero(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 0;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVMax(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Integer.MAX_VALUE;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVMaxMinusOne(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Integer.MAX_VALUE - 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVMaxPlusOne(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Integer.MAX_VALUE + 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVWithStrideTwo(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i += 2) {\n+            a += 2; \/\/ this stride2 constant must be multiple of the first stride (i += ...) for optimization\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVWithStrideMinusOne(int stop) {\n+        int a = 0;\n+        for (int i = stop; i > 0; i += -1) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIV(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVZero(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += 0;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVMax(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Long.MAX_VALUE;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVMaxMinusOne(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Long.MAX_VALUE - 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVMaxPlusOne(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i++) {\n+            a += Long.MAX_VALUE + 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVWithStrideTwo(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i += 2) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVWithStrideMinusOne(int stop) {\n+        long a = 0;\n+        for (int i = stop; i > 0; i += -1) {\n+            a += 1;\n+        }\n+\n+        return a;\n+    }\n+\n+    private static <T extends Number> void test(Function<Integer, T> function, int iteration, T expected) {\n+        T result = function.apply(iteration);\n+        if (!result.equals(expected)) {\n+            throw new RuntimeException(\"Bad result for IV with stop = \" + iteration + \", expected \" + expected\n+                    + \", got \" + result);\n+        }\n+    }\n+\n+    private static void testCorrectness() {\n+        int[] iterations = {0, 1, 2, 42, 100};\n+\n+        for (int i : iterations) {\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIV, i, i);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVZero, i, 0);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVMax, i, i * Integer.MAX_VALUE);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVMaxMinusOne, i, i * (Integer.MAX_VALUE - 1));\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVMaxPlusOne, i, i * (Integer.MAX_VALUE + 1));\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVWithStrideTwo, i, i);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVWithStrideMinusOne, i, i);\n+\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIV, i, (long) i);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVZero, i, (long) 0);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVMax, i, (long) i * Long.MAX_VALUE);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVMaxMinusOne, i, (long) i * (Long.MAX_VALUE - 1));\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVMaxPlusOne, i, (long) i * (Long.MAX_VALUE + 1));\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVWithStrideTwo, i, (long) i);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVWithStrideMinusOne, i, (long) i);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/parallel_iv\/TestParallelIvInIntCountedLoop.java","additions":250,"deletions":0,"binary":false,"changes":250,"status":"added"}]}