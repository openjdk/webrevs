{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Random;\n@@ -43,0 +44,9 @@\n+    private static final int stride;\n+    private static final int stride2;\n+\n+    static {\n+        \/\/ stride2 must be a multiple of stride and must not overflow for the optimization to work\n+        stride = new Random().nextInt(1, Integer.MAX_VALUE \/ 16);\n+        stride2 = stride * new Random().nextInt(1, 16);\n+    }\n+\n@@ -137,0 +147,12 @@\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static int testIntCountedLoopWithIntIVWithRandomStrides(int stop) {\n+        int a = 0;\n+        for (int i = 0; i < stop; i += stride) {\n+            a += stride2;\n+        }\n+\n+        return a;\n+    }\n+\n@@ -221,0 +243,12 @@\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT})\n+    @IR(failOn = {IRNode.LOOP, IRNode.COUNTED_LOOP})\n+    private static long testIntCountedLoopWithLongIVWithRandomStrides(int stop) {\n+        long a = 0;\n+        for (int i = 0; i < stop; i += stride) {\n+            a += (long) stride2;\n+        }\n+\n+        return a;\n+    }\n+\n@@ -248,0 +282,5 @@\n+\n+\n+            \/\/ test with random stride and stride2 for good measure\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithIntIVWithRandomStrides, i, Math.ceilDiv(i, stride) * stride2);\n+            test(TestParallelIvInIntCountedLoop::testIntCountedLoopWithLongIVWithRandomStrides, i, Math.ceilDiv(i, (long) stride) * stride2);\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/parallel_iv\/TestParallelIvInIntCountedLoop.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"}]}