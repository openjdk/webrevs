{"files":[{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"oops\/markWord.hpp\"\n+#include \"oops\/objLayout.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+ObjLayout::Mode ObjLayout::_klass_mode = ObjLayout::Undefined;\n+int ObjLayout::_oop_base_offset_in_bytes = 0;\n+bool ObjLayout::_oop_has_klass_gap = false;\n+\n+void ObjLayout::initialize() {\n+  assert(_klass_mode == Undefined, \"ObjLayout initialized twice\");\n+  if (UseCompactObjectHeaders) {\n+    _klass_mode = Compact;\n+    _oop_base_offset_in_bytes = sizeof(markWord);\n+    _oop_has_klass_gap = false;\n+  } else if (UseCompressedClassPointers) {\n+    _klass_mode = Compressed;\n+    _oop_base_offset_in_bytes = sizeof(markWord) + sizeof(narrowKlass);\n+    _oop_has_klass_gap = true;\n+  } else {\n+    _klass_mode = Uncompressed;\n+    _oop_base_offset_in_bytes = sizeof(markWord) + sizeof(Klass*);\n+    _oop_has_klass_gap = false;\n+  }\n+}\n","filename":"src\/hotspot\/share\/oops\/objLayout.cpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_OBJLAYOUT_HPP\n+#define SHARE_OOPS_OBJLAYOUT_HPP\n+\n+\/*\n+ * This class helps to avoid loading more than one flag when\n+ * accessing the Klass* in oopDesc::klass(). This is important\n+ * on some performance critical paths where the Klass* is\n+ * accessed frequently, especially by GC oop iterators.\n+ *\n+ * Instead of doing:\n+ * if (UseCompactObjectHeaders) { \/\/ Load first flag\n+ *   ..\n+ * } else if (UseCompressedClassPointers) { \/\/ Load second flag\n+ *   ..\n+ * } else {\n+ *   ..\n+ * }\n+ *\n+ * we can do:\n+ * switch (ObjLayout::klass_mode()) {\n+ * case Compact:\n+ *   ..\n+ * case Compressed:\n+ *   ..\n+ * case Uncompressed:\n+ *   ..\n+ * }\n+ *\/\n+class ObjLayout {\n+public:\n+  enum Mode {\n+    \/\/ +UseCompactObjectHeaders (implies +UseCompressedClassPointers)\n+    Compact,\n+    \/\/ +UseCompressedClassPointers (-UseCompactObjectHeaders)\n+    Compressed,\n+    \/\/ -UseCompressedClassPointers (-UseCompactObjectHeaders)\n+    Uncompressed,\n+    \/\/ Not yet initialized\n+    Undefined\n+  };\n+\n+private:\n+  static Mode _klass_mode;\n+  static int  _oop_base_offset_in_bytes;\n+  static bool _oop_has_klass_gap;\n+\n+public:\n+  static void initialize();\n+  static inline Mode klass_mode();\n+  static inline int oop_base_offset_in_bytes() {\n+    return _oop_base_offset_in_bytes;\n+  }\n+  static inline bool oop_has_klass_gap() {\n+    return _oop_has_klass_gap;\n+  }\n+};\n+\n+#endif \/\/ SHARE_OOPS_OBJLAYOUT_HPP\n","filename":"src\/hotspot\/share\/oops\/objLayout.hpp","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_OBJLAYOUT_INLINE_HPP\n+#define SHARE_OOPS_OBJLAYOUT_INLINE_HPP\n+\n+#include \"oops\/objLayout.hpp\"\n+\n+inline ObjLayout::Mode ObjLayout::klass_mode() {\n+#ifdef ASSERT\n+  assert(_klass_mode != Undefined, \"KlassMode not yet initialized\");\n+  if (UseCompactObjectHeaders) {\n+    assert(_klass_mode == Compact, \"Klass mode does not match flags\");\n+  } else if (UseCompressedClassPointers) {\n+    assert(_klass_mode == Compressed, \"Klass mode does not match flags\");\n+  } else {\n+    assert(_klass_mode == Uncompressed, \"Klass mode does not match flags\");\n+  }\n+#endif\n+#ifdef _LP64\n+  return _klass_mode;\n+#else\n+  return Uncompressed;\n+#endif\n+}\n+\n+#endif \/\/ SHARE_OOPS_OBJLAYOUT_INLINE_HPP\n","filename":"src\/hotspot\/share\/oops\/objLayout.inline.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -155,4 +155,0 @@\n-bool oopDesc::has_klass_gap() {\n-  return UseCompressedClassPointers && !UseCompactObjectHeaders;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/objLayout.hpp\"\n@@ -327,1 +328,1 @@\n-  static bool has_klass_gap();\n+  inline static bool has_klass_gap();\n@@ -353,9 +354,1 @@\n-    if (UseCompactObjectHeaders) {\n-      \/\/ With compact headers, the Klass* field is not used for the Klass*\n-      \/\/ and is used for the object fields instead.\n-      return sizeof(markWord);\n-    } else if (UseCompressedClassPointers) {\n-      return sizeof(markWord) + sizeof(narrowKlass);\n-    } else {\n-      return sizeof(markWord) + sizeof(Klass*);\n-    }\n+    return ObjLayout::oop_base_offset_in_bytes();\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/objLayout.inline.hpp\"\n@@ -98,6 +99,7 @@\n-  if (UseCompactObjectHeaders) {\n-    return mark().klass();\n-  } else if (UseCompressedClassPointers) {\n-     return CompressedKlassPointers::decode_not_null(_metadata._compressed_klass);\n-  } else {\n-    return _metadata._klass;\n+  switch (ObjLayout::klass_mode()) {\n+    case ObjLayout::Compact:\n+      return mark().klass();\n+    case ObjLayout::Compressed:\n+      return CompressedKlassPointers::decode_not_null(_metadata._compressed_klass);\n+    default:\n+      return _metadata._klass;\n@@ -108,6 +110,7 @@\n-  if (UseCompactObjectHeaders) {\n-    return mark().klass_or_null();\n-  } else if (UseCompressedClassPointers) {\n-    return CompressedKlassPointers::decode(_metadata._compressed_klass);\n-  } else {\n-    return _metadata._klass;\n+  switch (ObjLayout::klass_mode()) {\n+    case ObjLayout::Compact:\n+      return mark().klass_or_null();\n+    case ObjLayout::Compressed:\n+      return CompressedKlassPointers::decode(_metadata._compressed_klass);\n+    default:\n+      return _metadata._klass;\n@@ -118,7 +121,9 @@\n-  if (UseCompactObjectHeaders) {\n-    return mark_acquire().klass();\n-  } else if (UseCompressedClassPointers) {\n-    narrowKlass narrow_klass = Atomic::load_acquire(&_metadata._compressed_klass);\n-    return CompressedKlassPointers::decode(narrow_klass);\n-  } else {\n-    return Atomic::load_acquire(&_metadata._klass);\n+  switch (ObjLayout::klass_mode()) {\n+    case ObjLayout::Compact:\n+      return mark_acquire().klass();\n+    case ObjLayout::Compressed: {\n+      narrowKlass narrow_klass = Atomic::load_acquire(&_metadata._compressed_klass);\n+      return CompressedKlassPointers::decode(narrow_klass);\n+    }\n+    default:\n+      return Atomic::load_acquire(&_metadata._klass);\n@@ -129,6 +134,7 @@\n-  if (UseCompactObjectHeaders) {\n-    return mark().klass_without_asserts();\n-  } else if (UseCompressedClassPointers) {\n-    return CompressedKlassPointers::decode_without_asserts(_metadata._compressed_klass);\n-  } else {\n-    return _metadata._klass;\n+  switch (ObjLayout::klass_mode()) {\n+    case ObjLayout::Compact:\n+      return mark().klass_without_asserts();\n+    case ObjLayout::Compressed:\n+      return CompressedKlassPointers::decode_without_asserts(_metadata._compressed_klass);\n+    default:\n+      return _metadata._klass;\n@@ -160,0 +166,4 @@\n+inline bool oopDesc::has_klass_gap() {\n+  return ObjLayout::oop_has_klass_gap();\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":35,"deletions":25,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"oops\/objLayout.hpp\"\n@@ -3676,0 +3677,1 @@\n+  ObjLayout::initialize();\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}