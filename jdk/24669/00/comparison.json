{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.nio.file.Path;\n@@ -38,0 +39,1 @@\n+import java.util.function.Predicate;\n@@ -49,0 +51,1 @@\n+import jdk.jfr.internal.consumer.filter.ChunkWriter.RemovedEvents;\n@@ -151,0 +154,5 @@\n+\n+            @Override\n+            public List<RemovedEvents> write(RecordingFile file, Path output, Predicate<RecordedEvent> filter) throws IOException {\n+                return file.write(output, filter, true);\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedObject.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import jdk.jfr.internal.consumer.filter.ChunkWriter.RemovedEvents;\n@@ -232,1 +233,6 @@\n-        try (ChunkWriter cw = new ChunkWriter(file.toPath(), destination, filter)) {\n+        write(destination, filter, false);\n+    }\n+\n+    \/\/ package private\n+    List<RemovedEvents> write(Path destination, Predicate<RecordedEvent> filter, boolean collectResults) throws IOException {\n+        try (ChunkWriter cw = new ChunkWriter(file.toPath(), destination, filter, collectResults)) {\n@@ -238,0 +244,1 @@\n+            return cw.getRemovedEventTypes();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingFile.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -29,0 +30,1 @@\n+import java.util.List;\n@@ -268,0 +270,11 @@\n+\n+    public List<T> values() {\n+        List<T> list = new ArrayList<>(count);\n+        for (int i = 0; i < keys.length; i++) {\n+            T o = objects[i];\n+            if (o != null) {\n+                list.add(o);\n+            }\n+        }\n+        return list;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/LongMap.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.nio.file.Path;\n@@ -31,0 +32,1 @@\n+import java.util.function.Predicate;\n@@ -46,0 +48,1 @@\n+import jdk.jfr.internal.consumer.filter.ChunkWriter.RemovedEvents;;\n@@ -108,0 +111,1 @@\n+    public abstract List<RemovedEvents> write(RecordingFile file, Path output, Predicate<RecordedEvent> filter) throws IOException;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/JdkJfrConsumer.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.List;\n@@ -54,0 +55,22 @@\n+    public static class RemovedEvents implements Comparable<RemovedEvents> {\n+        public final String name;\n+        private long count;\n+        private long removed;\n+\n+        private RemovedEvents(String name) {\n+            this.name = name;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public String share() {\n+            return removed + \"\/\" + count;\n+        }\n+\n+        @Override\n+        public int compareTo(RemovedEvents that) {\n+            return this.getName().compareTo(that.getName());\n+        }\n+    }\n@@ -61,0 +84,2 @@\n+    private final LongMap<RemovedEvents> removedEvents = new LongMap<>();\n+    private final boolean collectResults;\n@@ -66,1 +91,1 @@\n-    public ChunkWriter(Path source, Path destination, Predicate<RecordedEvent> filter) throws IOException {\n+    public ChunkWriter(Path source, Path destination, Predicate<RecordedEvent> filter, boolean collectResults) throws IOException {\n@@ -71,0 +96,1 @@\n+        this.collectResults = collectResults;\n@@ -90,1 +116,19 @@\n-        return filter.test(event);\n+        if (!collectResults) {\n+            return filter.test(event);\n+        }\n+        long id = event.getEventType().getId();\n+        RemovedEvents r = removedEvents.get(id);\n+        if (r == null) {\n+            r = new RemovedEvents(event.getEventType().getName());\n+            removedEvents.put(id, r);\n+        }\n+        r.count++;\n+        if (filter.test(event)) {\n+            return true;\n+        }\n+        r.removed++;\n+        return false;\n+    }\n+\n+    public List<RemovedEvents> getRemovedEventTypes() {\n+        return removedEvents.values().stream().filter(r -> r.removed > 0).sorted().toList();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/filter\/ChunkWriter.java","additions":46,"deletions":2,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -321,0 +321,4 @@\n+    protected final void printf(String text, Object ... args) {\n+        System.out.printf(text, args);\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Command.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+import jdk.jfr.internal.consumer.JdkJfrConsumer;\n+import jdk.jfr.internal.consumer.filter.ChunkWriter.RemovedEvents;\n@@ -144,1 +146,17 @@\n-            rf.write(output, filter);\n+            List<RemovedEvents> result = JdkJfrConsumer.instance().write(rf, output, filter);\n+            println(\"Scrubbed recording file written to:\");\n+            println(output.toRealPath().toString());\n+            if (result.isEmpty()) {\n+                println(\"No events removed.\");\n+                return;\n+            }\n+            int maxName = 0;\n+            int maxShare = 0;\n+            for (RemovedEvents re : result) {\n+                maxName = Math.max(maxName, re.getName().length());\n+                maxShare = Math.max(maxShare, re.share().length());\n+            }\n+            println(\"Removed events:\");\n+            for (RemovedEvents re : result) {\n+                printf(\"%-\" + maxName + \"s %\" + maxShare + \"s\\n\", re.getName(), re.share());\n+            }\n@@ -148,2 +166,0 @@\n-        println(\"Scrubbed recording file written to:\");\n-        println(output.toAbsolutePath().toString());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Scrub.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-                System.out.printf(\" %-\" + minWidth + \"s%10d  %12d\\n\", s.name, s.count, s.size);\n+                printf(\" %-\" + minWidth + \"s%10d  %12d\\n\", s.name, s.count, s.size);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Summary.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,3 +72,10 @@\n-            emit(100, \"India\", TigerEvent.class);\n-            emit(100, \"Namibia\", ZebraEvent.class);\n-            emit(10000, \"Lake Tanganyika\", TigerfishEvent.class);\n+            emit(50, \"India\", TigerEvent.class);\n+            emit(50, \"Namibia\", ZebraEvent.class);\n+            emit(5000, \"Lake Tanganyika\", TigerfishEvent.class);\n+            \/\/ Force rotation\n+            try (Recording s = new Recording()) {\n+               s.start();\n+            }\n+            emit(50, \"India\", TigerEvent.class);\n+            emit(50, \"Namibia\", ZebraEvent.class);\n+            emit(5000, \"Lake Tanganyika\", TigerfishEvent.class);\n@@ -92,0 +99,1 @@\n+        testSummary(file);\n@@ -278,0 +286,17 @@\n+\n+    private static void testSummary(Path file) throws Throwable {\n+        String inputFile = file.toAbsolutePath().toString();\n+\n+        String removedZebras = Path.of(\"removed-zebras.jfr\").toAbsolutePath().toString();\n+        var outp = ExecuteHelper.jfr(\"scrub\", \"--exclude-events\", \"Zebra\", inputFile, removedZebras);\n+        outp.shouldContain(\"Removed events:\");\n+        outp.shouldContain(\"example.Zebra 100\/100\");\n+        outp.shouldNotContain(\"Tiger\");\n+        outp.shouldNotContain(\"No events removed\");\n+\n+        String noneRemoved = Path.of(\"none-removed.jfr\").toAbsolutePath().toString();\n+        outp = ExecuteHelper.jfr(\"scrub\", \"--exclude-events\", \"jdk.JVMInformation\", inputFile, noneRemoved);\n+        outp.shouldContain(\"No events removed\");\n+        outp.shouldNotContain(\"jdk.JVMInformation\");\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestScrub.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"}]}