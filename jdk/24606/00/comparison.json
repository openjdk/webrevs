{"files":[{"patch":"@@ -150,0 +150,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassType\/invokeMethod\/invokemethod001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -162,0 +162,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassType\/newInstance\/newinstance001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -146,0 +146,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/getValue\/getvalue001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StackFrame\/getValues\/getvalues001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -79,0 +79,4 @@\n+    public forceEarlyReturn002() {\n+        includeVirtualThreads();\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/forceEarlyReturn\/forceEarlyReturn002\/forceEarlyReturn002.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/name\/name001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/stop\/stop001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -145,0 +145,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/suspend\/suspend001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/suspendCount\/suspendcount001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -143,0 +143,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/dispose\/dispose002.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -136,0 +136,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/dispose\/dispose003.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/dispose\/dispose004.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -148,0 +148,1 @@\n+        binder.includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/suspend\/suspend001.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+ *      -includevirtualthreads\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/stress\/serial\/forceEarlyReturn001\/TestDescription.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+ *      -includevirtualthreads\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/stress\/serial\/forceEarlyReturn002\/TestDescription.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,0 +66,5 @@\n+    private boolean includeVThreads = false; \/\/ true if debuggee should be launched with includevirtualthreads=y\n+    public void includeVirtualThreads() {\n+        includeVThreads = true;\n+    }\n+\n@@ -521,1 +526,1 @@\n-        arg.setValue(\"y\");\n+        arg.setValue(includeVThreads ? \"y\" : \"n\");\n@@ -753,1 +758,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/Binder.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -114,0 +114,2 @@\n+            } else if (args[i].equals(\"-includevirtualthreads\")) {\n+                includeVirtualThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/SerialExecutionDebugger.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,0 +131,6 @@\n+    private boolean includeVThreads = false; \/\/ true if debuggee should be launched with includevirtualthreads=y\n+    public void includeVirtualThreads() {\n+        includeVThreads = true;\n+    }\n+\n+\n@@ -174,0 +180,3 @@\n+        if (includeVThreads) {\n+            binder.includeVirtualThreads();\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/TestDebuggerType2.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}