{"files":[{"patch":"@@ -1544,0 +1544,1 @@\n+int java_lang_Thread::_interruptLock_offset;\n@@ -1557,0 +1558,1 @@\n+  macro(_interruptLock_offset, k, \"interruptLock\", object_signature, false); \\\n@@ -1639,0 +1641,3 @@\n+oop java_lang_Thread::interrupt_lock(oop java_thread) {\n+  return java_thread->obj_field(_interruptLock_offset);\n+} \n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -358,0 +358,1 @@\n+  static int _interruptLock_offset;\n@@ -377,0 +378,2 @@\n+  \/\/ interruptLock\n+  static oop interrupt_lock(oop java_thread);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -569,0 +569,7 @@\n+  JavaThread* current = JavaThread::current();\n+  HandleMark hm(current);\n+\n+  Handle thread_h(current, vthread_or_thread());\n+  ObjectLocker lock(Handle(current, java_lang_Thread::interrupt_lock(thread_h())), current);\n+\n+  bool interrupted = java_lang_Thread::interrupted(thread_h());\n@@ -570,18 +577,0 @@\n-  oop thread_oop = vthread_or_thread();\n-  bool interrupted = java_lang_Thread::interrupted(thread_oop);\n-\n-  \/\/ NOTE that since there is no \"lock\" around the interrupt and\n-  \/\/ is_interrupted operations, there is the possibility that the\n-  \/\/ interrupted flag will be \"false\" but that the\n-  \/\/ low-level events will be in the signaled state. This is\n-  \/\/ intentional. The effect of this is that Object.wait() and\n-  \/\/ LockSupport.park() will appear to have a spurious wakeup, which\n-  \/\/ is allowed and not harmful, and the possibility is so rare that\n-  \/\/ it is not worth the added complexity to add yet another lock.\n-  \/\/ For the sleep event an explicit reset is performed on entry\n-  \/\/ to JavaThread::sleep, so there is no early return. It has also been\n-  \/\/ recommended not to put the interrupted flag into the \"event\"\n-  \/\/ structure because it hides the issue.\n-  \/\/ Also, because there is no lock, we must only clear the interrupt\n-  \/\/ state if we are going to report that we were interrupted; otherwise\n-  \/\/ an interrupt that happens just after we read the field would be lost.\n@@ -590,2 +579,2 @@\n-    java_lang_Thread::set_interrupted(thread_oop, false);\n-    if (thread_oop != threadObj()) {\n+    java_lang_Thread::set_interrupted(thread_h(), false);\n+    if (thread_h() != threadObj()) {\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":9,"deletions":20,"binary":false,"changes":29,"status":"modified"}]}