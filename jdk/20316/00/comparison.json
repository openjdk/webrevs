{"files":[{"patch":"@@ -44,2 +44,0 @@\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, rscratch2);\n-\n@@ -105,4 +103,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -303,8 +303,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    __ push_call_clobbered_registers();\n-    satb_write_barrier_pre(masm, noreg, dst, rthread, tmp, rscratch1, true, false);\n-    __ pop_call_clobbered_registers();\n-  }\n-}\n-\n@@ -401,2 +393,1 @@\n-    iu_barrier(masm, val, tmp1);\n-    \/\/ G1 barrier needs uncompressed oop for region cross check.\n+    \/\/ Barrier needs uncompressed oop for region cross check.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -63,3 +63,0 @@\n-\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,5 +46,0 @@\n-  if (ShenandoahIUBarrier) {\n-    ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), new_val, tmp1, tmp2,\n-                                                  MacroAssembler::PRESERVATION_FRAME_LR_GP_FP_REGS);\n-  }\n-\n@@ -125,4 +120,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_ppc.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,14 +64,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler *masm,\n-                                               Register val,\n-                                               Register tmp1, Register tmp2,\n-                                               MacroAssembler::PreservationLevel preservation_level,\n-                                               DecoratorSet decorators) {\n-  \/\/ IU barriers are also employed to avoid resurrection of weak references,\n-  \/\/ even if Shenandoah does not operate in incremental update mode.\n-  if (ShenandoahIUBarrier || ShenandoahSATBBarrier) {\n-    __ block_comment(\"iu_barrier (shenandoahgc) {\");\n-    satb_write_barrier_impl(masm, decorators, noreg, noreg, val, tmp1, tmp2, preservation_level);\n-    __ block_comment(\"} iu_barrier (shenandoahgc)\");\n-  }\n-}\n-\n@@ -113,1 +99,1 @@\n-  if ((!ShenandoahSATBBarrier || dest_uninitialized) && !ShenandoahIUBarrier && !ShenandoahLoadRefBarrier) {\n+  if ((!ShenandoahSATBBarrier || dest_uninitialized) && !ShenandoahLoadRefBarrier) {\n@@ -585,1 +571,5 @@\n-    iu_barrier(masm, dst, tmp1, tmp2, preservation_level);\n+    if (ShenandoahSATBBarrier) {\n+      __ block_comment(\"keep_alive_barrier (shenandoahgc) {\");\n+      satb_write_barrier_impl(masm, 0, noreg, noreg, dst, tmp1, tmp2, preservation_level);\n+      __ block_comment(\"} keep_alive_barrier (shenandoahgc)\");\n+    }\n@@ -600,4 +590,0 @@\n-\n-    if (ShenandoahIUBarrier && val != noreg) {\n-      iu_barrier(masm, val, tmp1, tmp2, preservation_level, decorators);\n-    }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -85,5 +85,0 @@\n-  void iu_barrier(MacroAssembler* masm,\n-                        Register val,\n-                        Register tmp1, Register tmp2,\n-                        MacroAssembler::PreservationLevel preservation_level, DecoratorSet decorators = 0);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, t1);\n-\n@@ -97,4 +95,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_riscv.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -311,10 +311,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    __ push_call_clobbered_registers();\n-\n-    satb_write_barrier_pre(masm, noreg, dst, xthread, tmp, t0, true, false);\n-\n-    __ pop_call_clobbered_registers();\n-  }\n-}\n-\n@@ -423,2 +413,1 @@\n-    iu_barrier(masm, val, tmp1);\n-    \/\/ G1 barrier needs uncompressed oop for region cross check.\n+    \/\/ Barrier needs uncompressed oop for region cross check.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -66,2 +66,0 @@\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,3 +49,0 @@\n-  \/\/ Apply IU barrier to newval.\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, tmp1);\n-\n@@ -104,4 +101,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -475,34 +475,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    iu_barrier_impl(masm, dst, tmp);\n-  }\n-}\n-\n-void ShenandoahBarrierSetAssembler::iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp) {\n-  assert(ShenandoahIUBarrier, \"should be enabled\");\n-\n-  if (dst == noreg) return;\n-\n-  if (ShenandoahIUBarrier) {\n-    save_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n-\n-#ifdef _LP64\n-    Register thread = r15_thread;\n-#else\n-    Register thread = rcx;\n-    if (thread == dst || thread == tmp) {\n-      thread = rdi;\n-    }\n-    if (thread == dst || thread == tmp) {\n-      thread = rbx;\n-    }\n-    __ get_thread(thread);\n-#endif\n-    assert_different_registers(dst, tmp, thread);\n-\n-    satb_write_barrier_pre(masm, noreg, dst, thread, tmp, true, false);\n-\n-    restore_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n-  }\n-}\n-\n@@ -629,6 +595,1 @@\n-    if (val == noreg) {\n-      BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n-    } else {\n-      iu_barrier(masm, val, tmp3);\n-      BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n-    }\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":2,"deletions":41,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-  void iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp);\n-\n@@ -62,1 +60,0 @@\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -186,8 +186,0 @@\n-LIR_Opr ShenandoahBarrierSetC1::iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators) {\n-  if (ShenandoahIUBarrier) {\n-    obj = ensure_in_register(gen, obj, T_OBJECT);\n-    pre_barrier(gen, info, decorators, LIR_OprFact::illegalOpr, obj);\n-  }\n-  return obj;\n-}\n-\n@@ -199,1 +191,0 @@\n-    value = iu_barrier(access.gen(), value, access.access_emit_info(), access.decorators());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -203,1 +203,0 @@\n-  LIR_Opr iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,19 +51,1 @@\n-  : _iu_barriers(new (comp_arena) GrowableArray<ShenandoahIUBarrierNode*>(comp_arena, 8,  0, nullptr)),\n-    _load_reference_barriers(new (comp_arena) GrowableArray<ShenandoahLoadReferenceBarrierNode*>(comp_arena, 8,  0, nullptr)) {\n-}\n-\n-int ShenandoahBarrierSetC2State::iu_barriers_count() const {\n-  return _iu_barriers->length();\n-}\n-\n-ShenandoahIUBarrierNode* ShenandoahBarrierSetC2State::iu_barrier(int idx) const {\n-  return _iu_barriers->at(idx);\n-}\n-\n-void ShenandoahBarrierSetC2State::add_iu_barrier(ShenandoahIUBarrierNode* n) {\n-  assert(!_iu_barriers->contains(n), \"duplicate entry in barrier list\");\n-  _iu_barriers->append(n);\n-}\n-\n-void ShenandoahBarrierSetC2State::remove_iu_barrier(ShenandoahIUBarrierNode* n) {\n-  _iu_barriers->remove_if_existing(n);\n+  : _load_reference_barriers(new (comp_arena) GrowableArray<ShenandoahLoadReferenceBarrierNode*>(comp_arena, 8,  0, nullptr)) {\n@@ -91,7 +73,0 @@\n-Node* ShenandoahBarrierSetC2::shenandoah_iu_barrier(GraphKit* kit, Node* obj) const {\n-  if (ShenandoahIUBarrier) {\n-    return kit->gvn().transform(new ShenandoahIUBarrierNode(obj));\n-  }\n-  return obj;\n-}\n-\n@@ -511,3 +486,0 @@\n-    Node* value = val.node();\n-    value = shenandoah_iu_barrier(kit, value);\n-    val.set_node(value);\n@@ -516,10 +488,0 @@\n-  } else {\n-    assert(access.is_opt_access(), \"only for optimization passes\");\n-    assert(((decorators & C2_TIGHTLY_COUPLED_ALLOC) != 0 || !ShenandoahSATBBarrier) && (decorators & C2_ARRAY_COPY) != 0, \"unexpected caller of this code\");\n-    C2OptAccess& opt_access = static_cast<C2OptAccess&>(access);\n-    PhaseGVN& gvn =  opt_access.gvn();\n-\n-    if (ShenandoahIUBarrier) {\n-      Node* enqueue = gvn.transform(new ShenandoahIUBarrierNode(val.node()));\n-      val.set_node(enqueue);\n-    }\n@@ -601,1 +563,0 @@\n-    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -649,1 +610,0 @@\n-    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -702,3 +662,0 @@\n-  if (access.is_oop()) {\n-    val = shenandoah_iu_barrier(kit, val);\n-  }\n@@ -722,1 +679,1 @@\n-  if (node->Opcode() == Op_ShenandoahLoadReferenceBarrier || node->Opcode() == Op_ShenandoahIUBarrier) return true;\n+  if (node->Opcode() == Op_ShenandoahLoadReferenceBarrier) return true;\n@@ -743,3 +700,0 @@\n-  if (c->Opcode() == Op_ShenandoahIUBarrier) {\n-    c = c->in(1);\n-  }\n@@ -778,3 +732,0 @@\n-  if (phase == Optimization) {\n-    return !ShenandoahIUBarrier;\n-  }\n@@ -839,5 +790,1 @@\n-    int flags = ShenandoahHeap::HAS_FORWARDED;\n-    if (ShenandoahIUBarrier) {\n-      flags |= ShenandoahHeap::MARKING;\n-    }\n-    Node* stable_and  = phase->transform_later(new AndINode(gc_state, phase->igvn().intcon(flags)));\n+    Node* stable_and  = phase->transform_later(new AndINode(gc_state, phase->igvn().intcon(ShenandoahHeap::HAS_FORWARDED)));\n@@ -892,3 +839,0 @@\n-  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n-    state()->add_iu_barrier((ShenandoahIUBarrierNode*) node);\n-  }\n@@ -901,3 +845,0 @@\n-  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n-    state()->remove_iu_barrier((ShenandoahIUBarrierNode*) node);\n-  }\n@@ -951,6 +892,1 @@\n-  for (int i = state()->iu_barriers_count() - 1; i >= 0; i--) {\n-    ShenandoahIUBarrierNode* n = state()->iu_barrier(i);\n-    if (!useful.member(n)) {\n-      state()->remove_iu_barrier(n);\n-    }\n-  }\n+\n@@ -1193,3 +1129,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      conn_graph->add_local_var_and_edge(n, PointsToNode::NoEscape, n->in(1), delayed_worklist);\n-      break;\n@@ -1219,3 +1152,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      conn_graph->add_local_var_and_edge(n, PointsToNode::NoEscape, n->in(1), nullptr);\n-      return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":4,"deletions":74,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-  GrowableArray<ShenandoahIUBarrierNode*>* _iu_barriers;\n@@ -40,5 +39,0 @@\n-  int iu_barriers_count() const;\n-  ShenandoahIUBarrierNode* iu_barrier(int idx) const;\n-  void add_iu_barrier(ShenandoahIUBarrierNode* n);\n-  void remove_iu_barrier(ShenandoahIUBarrierNode * n);\n-\n@@ -76,2 +70,0 @@\n-  Node* shenandoah_iu_barrier(GraphKit* kit, Node* obj) const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-  if ((state->iu_barriers_count() +\n-       state->load_reference_barriers_count()) > 0) {\n+  if (state->load_reference_barriers_count() > 0) {\n@@ -189,10 +188,1 @@\n-          uint i = 0;\n-          for (; i < phis.size(); i++) {\n-            Node* n = phis.node_at(i);\n-            if (n->Opcode() == Op_ShenandoahIUBarrier) {\n-              break;\n-            }\n-          }\n-          if (i == phis.size()) {\n-            return false;\n-          }\n+          return false;\n@@ -202,9 +192,0 @@\n-      } else if (in->Opcode() == Op_ShenandoahIUBarrier) {\n-        if (t != ShenandoahOopStore) {\n-          in = in->in(1);\n-          continue;\n-        }\n-        if (trace) {tty->print(\"Found enqueue barrier\"); in->dump();}\n-        phis.push(in, in->req());\n-        in = in->in(1);\n-        continue;\n@@ -329,1 +310,1 @@\n-        if (verify && !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahIUBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n+        if (verify && !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahValue, trace, barriers_used)) {\n@@ -371,1 +352,1 @@\n-          !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahIUBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n+          !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahValue, trace, barriers_used)) {\n@@ -535,1 +516,1 @@\n-    } else if (n->Opcode() == Op_ShenandoahIUBarrier || n->Opcode() == Op_ShenandoahLoadReferenceBarrier) {\n+    } else if (n->Opcode() == Op_ShenandoahLoadReferenceBarrier) {\n@@ -1116,14 +1097,0 @@\n-  for (int i = 0; i < state->iu_barriers_count(); i++) {\n-    Node* barrier = state->iu_barrier(i);\n-    Node* ctrl = phase->get_ctrl(barrier);\n-    IdealLoopTree* loop = phase->get_loop(ctrl);\n-    Node* head = loop->head();\n-    if (head->is_OuterStripMinedLoop()) {\n-      \/\/ Expanding a barrier here will break loop strip mining\n-      \/\/ verification. Transform the loop so the loop nest doesn't\n-      \/\/ appear as strip mined.\n-      OuterStripMinedLoopNode* outer = head->as_OuterStripMinedLoop();\n-      hide_strip_mined_loop(outer, outer->unique_ctrl_out()->as_CountedLoop(), phase);\n-    }\n-  }\n-\n@@ -1462,151 +1429,0 @@\n-\n-  for (int i = state->iu_barriers_count() - 1; i >= 0; i--) {\n-    Node* barrier = state->iu_barrier(i);\n-    Node* pre_val = barrier->in(1);\n-\n-    if (phase->igvn().type(pre_val)->higher_equal(TypePtr::NULL_PTR)) {\n-      ShouldNotReachHere();\n-      continue;\n-    }\n-\n-    Node* ctrl = phase->get_ctrl(barrier);\n-\n-    if (ctrl->is_Proj() && ctrl->in(0)->is_CallJava()) {\n-      assert(is_dominator(phase->get_ctrl(pre_val), ctrl->in(0)->in(0), pre_val, ctrl->in(0), phase), \"can't move\");\n-      ctrl = ctrl->in(0)->in(0);\n-      phase->set_ctrl(barrier, ctrl);\n-    } else if (ctrl->is_CallRuntime()) {\n-      assert(is_dominator(phase->get_ctrl(pre_val), ctrl->in(0), pre_val, ctrl, phase), \"can't move\");\n-      ctrl = ctrl->in(0);\n-      phase->set_ctrl(barrier, ctrl);\n-    }\n-\n-    Node* init_ctrl = ctrl;\n-    IdealLoopTree* loop = phase->get_loop(ctrl);\n-    Node* raw_mem = fixer.find_mem(ctrl, barrier);\n-    Node* init_raw_mem = raw_mem;\n-    Node* raw_mem_for_ctrl = fixer.find_mem(ctrl, nullptr);\n-    Node* heap_stable_ctrl = nullptr;\n-    Node* null_ctrl = nullptr;\n-    uint last = phase->C->unique();\n-\n-    enum { _heap_stable = 1, _heap_unstable, PATH_LIMIT };\n-    Node* region = new RegionNode(PATH_LIMIT);\n-    Node* phi = PhiNode::make(region, raw_mem, Type::MEMORY, TypeRawPtr::BOTTOM);\n-\n-    enum { _fast_path = 1, _slow_path, _null_path, PATH_LIMIT2 };\n-    Node* region2 = new RegionNode(PATH_LIMIT2);\n-    Node* phi2 = PhiNode::make(region2, raw_mem, Type::MEMORY, TypeRawPtr::BOTTOM);\n-\n-    \/\/ Stable path.\n-    test_gc_state(ctrl, raw_mem, heap_stable_ctrl, phase, ShenandoahHeap::MARKING);\n-    region->init_req(_heap_stable, heap_stable_ctrl);\n-    phi->init_req(_heap_stable, raw_mem);\n-\n-    \/\/ Null path\n-    Node* reg2_ctrl = nullptr;\n-    test_null(ctrl, pre_val, null_ctrl, phase);\n-    if (null_ctrl != nullptr) {\n-      reg2_ctrl = null_ctrl->in(0);\n-      region2->init_req(_null_path, null_ctrl);\n-      phi2->init_req(_null_path, raw_mem);\n-    } else {\n-      region2->del_req(_null_path);\n-      phi2->del_req(_null_path);\n-    }\n-\n-    const int index_offset = in_bytes(ShenandoahThreadLocalData::satb_mark_queue_index_offset());\n-    const int buffer_offset = in_bytes(ShenandoahThreadLocalData::satb_mark_queue_buffer_offset());\n-    Node* thread = new ThreadLocalNode();\n-    phase->register_new_node(thread, ctrl);\n-    Node* buffer_adr = new AddPNode(phase->C->top(), thread, phase->igvn().MakeConX(buffer_offset));\n-    phase->register_new_node(buffer_adr, ctrl);\n-    Node* index_adr = new AddPNode(phase->C->top(), thread, phase->igvn().MakeConX(index_offset));\n-    phase->register_new_node(index_adr, ctrl);\n-\n-    BasicType index_bt = TypeX_X->basic_type();\n-    assert(sizeof(size_t) == type2aelembytes(index_bt), \"Loading Shenandoah SATBMarkQueue::_index with wrong size.\");\n-    const TypePtr* adr_type = TypeRawPtr::BOTTOM;\n-    Node* index = new LoadXNode(ctrl, raw_mem, index_adr, adr_type, TypeX_X, MemNode::unordered);\n-    phase->register_new_node(index, ctrl);\n-    Node* index_cmp = new CmpXNode(index, phase->igvn().MakeConX(0));\n-    phase->register_new_node(index_cmp, ctrl);\n-    Node* index_test = new BoolNode(index_cmp, BoolTest::ne);\n-    phase->register_new_node(index_test, ctrl);\n-    IfNode* queue_full_iff = new IfNode(ctrl, index_test, PROB_LIKELY(0.999), COUNT_UNKNOWN);\n-    if (reg2_ctrl == nullptr) reg2_ctrl = queue_full_iff;\n-    phase->register_control(queue_full_iff, loop, ctrl);\n-    Node* not_full = new IfTrueNode(queue_full_iff);\n-    phase->register_control(not_full, loop, queue_full_iff);\n-    Node* full = new IfFalseNode(queue_full_iff);\n-    phase->register_control(full, loop, queue_full_iff);\n-\n-    ctrl = not_full;\n-\n-    Node* next_index = new SubXNode(index, phase->igvn().MakeConX(sizeof(intptr_t)));\n-    phase->register_new_node(next_index, ctrl);\n-\n-    Node* buffer  = new LoadPNode(ctrl, raw_mem, buffer_adr, adr_type, TypeRawPtr::NOTNULL, MemNode::unordered);\n-    phase->register_new_node(buffer, ctrl);\n-    Node *log_addr = new AddPNode(phase->C->top(), buffer, next_index);\n-    phase->register_new_node(log_addr, ctrl);\n-    Node* log_store = new StorePNode(ctrl, raw_mem, log_addr, adr_type, pre_val, MemNode::unordered);\n-    phase->register_new_node(log_store, ctrl);\n-    \/\/ update the index\n-    Node* index_update = new StoreXNode(ctrl, log_store, index_adr, adr_type, next_index, MemNode::unordered);\n-    phase->register_new_node(index_update, ctrl);\n-\n-    \/\/ Fast-path case\n-    region2->init_req(_fast_path, ctrl);\n-    phi2->init_req(_fast_path, index_update);\n-\n-    ctrl = full;\n-\n-    Node* base = find_bottom_mem(ctrl, phase);\n-\n-    MergeMemNode* mm = MergeMemNode::make(base);\n-    mm->set_memory_at(Compile::AliasIdxRaw, raw_mem);\n-    phase->register_new_node(mm, ctrl);\n-\n-    Node* call = new CallLeafNode(ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type(), CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), \"shenandoah_wb_pre\", TypeRawPtr::BOTTOM);\n-    call->init_req(TypeFunc::Control, ctrl);\n-    call->init_req(TypeFunc::I_O, phase->C->top());\n-    call->init_req(TypeFunc::Memory, mm);\n-    call->init_req(TypeFunc::FramePtr, phase->C->top());\n-    call->init_req(TypeFunc::ReturnAdr, phase->C->top());\n-    call->init_req(TypeFunc::Parms, pre_val);\n-    call->init_req(TypeFunc::Parms+1, thread);\n-    phase->register_control(call, loop, ctrl);\n-\n-    Node* ctrl_proj = new ProjNode(call, TypeFunc::Control);\n-    phase->register_control(ctrl_proj, loop, call);\n-    Node* mem_proj = new ProjNode(call, TypeFunc::Memory);\n-    phase->register_new_node(mem_proj, call);\n-\n-    \/\/ Slow-path case\n-    region2->init_req(_slow_path, ctrl_proj);\n-    phi2->init_req(_slow_path, mem_proj);\n-\n-    phase->register_control(region2, loop, reg2_ctrl);\n-    phase->register_new_node(phi2, region2);\n-\n-    region->init_req(_heap_unstable, region2);\n-    phi->init_req(_heap_unstable, phi2);\n-\n-    phase->register_control(region, loop, heap_stable_ctrl->in(0));\n-    phase->register_new_node(phi, region);\n-\n-    fix_ctrl(barrier, region, fixer, uses, uses_to_ignore, last, phase);\n-    for(uint next = 0; next < uses.size(); next++ ) {\n-      Node *n = uses.at(next);\n-      assert(phase->get_ctrl(n) == init_ctrl, \"bad control\");\n-      assert(n != init_raw_mem, \"should leave input raw mem above the barrier\");\n-      phase->set_ctrl(n, region);\n-      follow_barrier_uses(n, init_ctrl, uses, phase);\n-    }\n-    fixer.fix_mem(init_ctrl, region, init_raw_mem, raw_mem_for_ctrl, phi, uses);\n-\n-    phase->igvn().replace_node(barrier, pre_val);\n-  }\n-  assert(state->iu_barriers_count() == 0, \"all enqueue barrier nodes should have been replaced\");\n-\n@@ -1665,2 +1481,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      return get_load_addr(phase, visited, in->in(1));\n@@ -1914,120 +1728,0 @@\n-ShenandoahIUBarrierNode::ShenandoahIUBarrierNode(Node* val) : Node(nullptr, val) {\n-  ShenandoahBarrierSetC2::bsc2()->state()->add_iu_barrier(this);\n-}\n-\n-const Type* ShenandoahIUBarrierNode::bottom_type() const {\n-  if (in(1) == nullptr || in(1)->is_top()) {\n-    return Type::TOP;\n-  }\n-  const Type* t = in(1)->bottom_type();\n-  if (t == TypePtr::NULL_PTR) {\n-    return t;\n-  }\n-  return t->is_oopptr();\n-}\n-\n-const Type* ShenandoahIUBarrierNode::Value(PhaseGVN* phase) const {\n-  if (in(1) == nullptr) {\n-    return Type::TOP;\n-  }\n-  const Type* t = phase->type(in(1));\n-  if (t == Type::TOP) {\n-    return Type::TOP;\n-  }\n-  if (t == TypePtr::NULL_PTR) {\n-    return t;\n-  }\n-  return t->is_oopptr();\n-}\n-\n-int ShenandoahIUBarrierNode::needed(Node* n) {\n-  if (n == nullptr ||\n-      n->is_Allocate() ||\n-      n->Opcode() == Op_ShenandoahIUBarrier ||\n-      n->bottom_type() == TypePtr::NULL_PTR ||\n-      (n->bottom_type()->make_oopptr() != nullptr && n->bottom_type()->make_oopptr()->const_oop() != nullptr)) {\n-    return NotNeeded;\n-  }\n-  if (n->is_Phi() ||\n-      n->is_CMove()) {\n-    return MaybeNeeded;\n-  }\n-  return Needed;\n-}\n-\n-Node* ShenandoahIUBarrierNode::next(Node* n) {\n-  for (;;) {\n-    if (n == nullptr) {\n-      return n;\n-    } else if (n->bottom_type() == TypePtr::NULL_PTR) {\n-      return n;\n-    } else if (n->bottom_type()->make_oopptr() != nullptr && n->bottom_type()->make_oopptr()->const_oop() != nullptr) {\n-      return n;\n-    } else if (n->is_ConstraintCast() ||\n-               n->Opcode() == Op_DecodeN ||\n-               n->Opcode() == Op_EncodeP) {\n-      n = n->in(1);\n-    } else if (n->is_Proj()) {\n-      n = n->in(0);\n-    } else {\n-      return n;\n-    }\n-  }\n-  ShouldNotReachHere();\n-  return nullptr;\n-}\n-\n-Node* ShenandoahIUBarrierNode::Identity(PhaseGVN* phase) {\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n-\n-  Node* n = next(in(1));\n-\n-  int cont = needed(n);\n-\n-  if (cont == NotNeeded) {\n-    return in(1);\n-  } else if (cont == MaybeNeeded) {\n-    if (igvn == nullptr) {\n-      phase->record_for_igvn(this);\n-      return this;\n-    } else {\n-      ResourceMark rm;\n-      Unique_Node_List wq;\n-      uint wq_i = 0;\n-\n-      for (;;) {\n-        if (n->is_Phi()) {\n-          for (uint i = 1; i < n->req(); i++) {\n-            Node* m = n->in(i);\n-            if (m != nullptr) {\n-              wq.push(m);\n-            }\n-          }\n-        } else {\n-          assert(n->is_CMove(), \"nothing else here\");\n-          Node* m = n->in(CMoveNode::IfFalse);\n-          wq.push(m);\n-          m = n->in(CMoveNode::IfTrue);\n-          wq.push(m);\n-        }\n-        Node* orig_n = nullptr;\n-        do {\n-          if (wq_i >= wq.size()) {\n-            return in(1);\n-          }\n-          n = wq.at(wq_i);\n-          wq_i++;\n-          orig_n = n;\n-          n = next(n);\n-          cont = needed(n);\n-          if (cont == Needed) {\n-            return this;\n-          }\n-        } while (cont != MaybeNeeded || (orig_n != n && wq.member(n)));\n-      }\n-    }\n-  }\n-\n-  return this;\n-}\n-\n@@ -3017,2 +2711,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      return needs_barrier_impl(phase, n->in(1), visited);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":5,"deletions":313,"binary":false,"changes":318,"status":"modified"},{"patch":"@@ -90,17 +90,0 @@\n-class ShenandoahIUBarrierNode : public Node {\n-public:\n-  ShenandoahIUBarrierNode(Node* val);\n-\n-  const Type *bottom_type() const;\n-  const Type* Value(PhaseGVN* phase) const;\n-  Node* Identity(PhaseGVN* phase);\n-\n-  int Opcode() const;\n-\n-private:\n-  enum { Needed, NotNeeded, MaybeNeeded };\n-\n-  static int needed(Node* n);\n-  static Node* next(Node* n);\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2022, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahIUMode.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n-#include \"logging\/log.hpp\"\n-#include \"logging\/logTag.hpp\"\n-#include \"runtime\/globals_extension.hpp\"\n-#include \"runtime\/java.hpp\"\n-\n-void ShenandoahIUMode::initialize_flags() const {\n-  if (FLAG_IS_CMDLINE(ClassUnloadingWithConcurrentMark) && ClassUnloading) {\n-    log_warning(gc)(\"Shenandoah I-U mode sets -XX:-ClassUnloadingWithConcurrentMark; see JDK-8261341 for details\");\n-  }\n-  FLAG_SET_DEFAULT(ClassUnloadingWithConcurrentMark, false);\n-\n-  if (ClassUnloading) {\n-    FLAG_SET_DEFAULT(VerifyBeforeExit, false);\n-  }\n-\n-  if (FLAG_IS_DEFAULT(ShenandoahIUBarrier)) {\n-    FLAG_SET_DEFAULT(ShenandoahIUBarrier, true);\n-  }\n-  if (FLAG_IS_DEFAULT(ShenandoahSATBBarrier)) {\n-    FLAG_SET_DEFAULT(ShenandoahSATBBarrier, false);\n-  }\n-\n-  SHENANDOAH_ERGO_ENABLE_FLAG(ExplicitGCInvokesConcurrent);\n-  SHENANDOAH_ERGO_ENABLE_FLAG(ShenandoahImplicitGCInvokesConcurrent);\n-\n-  \/\/ Final configuration checks\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahLoadRefBarrier);\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahSATBBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahIUBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahCASBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahCloneBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahStackWatermarkBarrier);\n-}\n-\n-ShenandoahHeuristics* ShenandoahIUMode::initialize_heuristics() const {\n-  if (ShenandoahGCHeuristics == nullptr) {\n-    vm_exit_during_initialization(\"Unknown -XX:ShenandoahGCHeuristics option (null)\");\n-  }\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  if (strcmp(ShenandoahGCHeuristics, \"aggressive\") == 0) {\n-    return new ShenandoahAggressiveHeuristics(heap);\n-  } else if (strcmp(ShenandoahGCHeuristics, \"static\") == 0) {\n-    return new ShenandoahStaticHeuristics(heap);\n-  } else if (strcmp(ShenandoahGCHeuristics, \"adaptive\") == 0) {\n-    return new ShenandoahAdaptiveHeuristics(heap);\n-  } else if (strcmp(ShenandoahGCHeuristics, \"compact\") == 0) {\n-    return new ShenandoahCompactHeuristics(heap);\n-  }\n-  vm_exit_during_initialization(\"Unknown -XX:ShenandoahGCHeuristics option\");\n-  return nullptr;\n-}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_MODE_SHENANDOAHIUMODE_HPP\n-#define SHARE_GC_SHENANDOAH_MODE_SHENANDOAHIUMODE_HPP\n-\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n-\n-class ShenandoahHeuristics;\n-\n-class ShenandoahIUMode : public ShenandoahMode {\n-public:\n-  virtual void initialize_flags() const;\n-  virtual ShenandoahHeuristics* initialize_heuristics() const;\n-\n-  virtual const char* name()     { return \"Incremental-Update (IU)\"; }\n-  virtual bool is_diagnostic()   { return false; }\n-  virtual bool is_experimental() { return true; }\n-};\n-\n-#endif \/\/ SHARE_GC_SHENANDOAH_MODE_SHENANDOAHIUMODE_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.hpp","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -50,1 +50,0 @@\n-  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  FLAG_SET_DEFAULT(ShenandoahIUBarrier,              false);\n@@ -145,1 +144,0 @@\n-           !FLAG_IS_DEFAULT(ShenandoahIUBarrier)              ||\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  if (_heap->has_forwarded_objects() || (ShenandoahIUBarrier && _heap->is_concurrent_mark_in_progress())) {\n+  if (_heap->has_forwarded_objects()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-  inline void iu_barrier(oop obj);\n@@ -123,1 +122,0 @@\n-  inline void clone_marking(oop src);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,6 +167,0 @@\n-inline void ShenandoahBarrierSet::iu_barrier(oop obj) {\n-  if (ShenandoahIUBarrier && obj != nullptr && _heap->is_concurrent_mark_in_progress()) {\n-    enqueue(obj);\n-  }\n-}\n-\n@@ -192,1 +186,0 @@\n-  iu_barrier(new_value);\n@@ -210,1 +203,0 @@\n-  iu_barrier(new_value);\n@@ -248,1 +240,0 @@\n-  bs->iu_barrier(value);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,9 +77,0 @@\n-void ShenandoahBarrierSet::clone_marking(oop obj) {\n-  assert(_heap->is_concurrent_mark_in_progress(), \"only during marking\");\n-  assert(ShenandoahIUBarrier, \"only with incremental-update\");\n-  if (!_heap->marking_context()->allocated_after_mark_start(obj)) {\n-    ShenandoahUpdateRefsForOopClosure<\/* has_fwd = *\/ false, \/* evac = *\/ false, \/* enqueue *\/ true> cl;\n-    obj->oop_iterate(&cl);\n-  }\n-}\n-\n@@ -108,3 +99,1 @@\n-  if ((gc_state & ShenandoahHeap::MARKING) != 0) {\n-    clone_marking(obj);\n-  } else if ((gc_state & ShenandoahHeap::EVACUATION) != 0) {\n+  if ((gc_state & ShenandoahHeap::EVACUATION) != 0) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetClone.inline.hpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -122,2 +122,1 @@\n-      ShenandoahSATBAndRemarkThreadsClosure tc(satb_mq_set,\n-                                               ShenandoahIUBarrier ? &mark_cl : nullptr);\n+      ShenandoahSATBAndRemarkThreadsClosure tc(satb_mq_set, nullptr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahIUMode.hpp\"\n@@ -449,2 +448,0 @@\n-    } else if (strcmp(ShenandoahGCMode, \"iu\") == 0) {\n-      _gc_mode = new ShenandoahIUMode();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -336,3 +336,0 @@\n-  product(bool, ShenandoahIUBarrier, false, DIAGNOSTIC,                     \\\n-          \"Turn on\/off I-U barriers barriers in Shenandoah\")                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -327,1 +327,1 @@\n-shmacro(ShenandoahIUBarrier)\n+\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,2 +42,1 @@\n- *                    Shenandoah,\n- *                    ShenandoahIU}\n+ *                    Shenandoah}\n@@ -98,7 +97,0 @@\n-        case \"ShenandoahIU\":\n-            argcount = 11;\n-            procArgs = new String[argcount];\n-            procArgs[argcount - 4] = \"-XX:+UnlockExperimentalVMOptions\";\n-            procArgs[argcount - 3] = \"-XX:+UseShenandoahGC\";\n-            procArgs[argcount - 2] = \"-XX:ShenandoahGCMode=iu\";\n-            break;\n@@ -289,1 +281,0 @@\n-        case \"ShenandoahIU\":\n@@ -361,1 +352,0 @@\n-        case \"ShenandoahIU\":\n@@ -448,1 +438,0 @@\n-        case \"ShenandoahIU\":\n@@ -515,1 +504,0 @@\n-        case \"ShenandoahIU\":\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestVolatiles.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -74,27 +74,0 @@\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestVolatileLoad ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestVolatileStore ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileLoad ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileStore ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileCAS ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileWeakCAS ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileCAE ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileGAS ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileGAA ShenandoahIU\n- *\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestVolatilesShenandoah.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -123,45 +123,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocHumongousFragment\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocHumongousFragment\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocHumongousFragment.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -138,50 +138,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocIntArrays\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocIntArrays\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocIntArrays.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -138,50 +138,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocObjectArrays\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocObjectArrays\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjectArrays.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -115,46 +115,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjects.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -85,22 +85,0 @@\n- *\/\n-\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n- *      TestDynamicSoftMaxHeapSize\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -79,18 +79,0 @@\n-\/**\n- * @test id=iu\n- * @summary Test Shenandoah GC uses concurrent\/parallel threads correctly\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:ConcGCThreads=2 -XX:ParallelGCThreads=4\n- *      -Dtarget=1000\n- *      TestGCThreadGroups\n- *\n- * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:ConcGCThreads=2 -XX:ParallelGCThreads=4\n- *      -Dtarget=1000\n- *      TestGCThreadGroups\n-*\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestGCThreadGroups.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -87,21 +87,0 @@\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestHeapUncommit\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestHeapUncommit\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestHeapUncommit\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestHeapUncommit.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -97,32 +97,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @library \/test\/lib\n- * @modules jdk.attach\/com.sun.tools.attach\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestJcmdHeapDump\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestJcmdHeapDump\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestJcmdHeapDump\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules jdk.attach\/com.sun.tools.attach\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestJcmdHeapDump\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestJcmdHeapDump.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -94,32 +94,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dtarget=10000\n- *      TestLotsOfCycles\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestLotsOfCycles.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-             {{\"iu\"},      {\"adaptive\", \"aggressive\"}},\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestObjItrWithHeapDump.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,30 +100,0 @@\n-        testWith(\"Zero interval with iu mode\",\n-                 false,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=0\"\n-        );\n-\n-        testWith(\"Short interval with iu mode\",\n-                 true,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=1000\"\n-        );\n-\n-        testWith(\"Long interval with iu mode\",\n-                 false,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=100000\" \/\/ deliberately too long\n-        );\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -38,12 +38,0 @@\n-\/* @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.shenandoah.TestReferenceRefersToShenandoah\n- *\/\n-\n@@ -63,13 +51,0 @@\n-\/* @test id=iu-100\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @modules java.base\n- * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n- *      gc.shenandoah.TestReferenceRefersToShenandoah\n- *\/\n-\n@@ -203,4 +178,0 @@\n-    private static boolean isShenandoahIUMode() {\n-        return \"iu\".equals(WB.getStringVMFlag(\"ShenandoahGCMode\"));\n-    }\n-\n@@ -242,8 +213,1 @@\n-            \/\/ This is true for all currently supported concurrent collectors,\n-            \/\/ except Shenandoah+IU, which allows clearing refs even when\n-            \/\/ accessed during concurrent marking.\n-            if (isShenandoahIUMode()) {\n-              expectCleared(testWeak4, \"testWeak4\");\n-            } else {\n-              expectNotCleared(testWeak4, \"testWeak4\");\n-            }\n+            expectNotCleared(testWeak4, \"testWeak4\");\n@@ -264,6 +228,4 @@\n-            if (!isShenandoahIUMode()) {\n-                if (obj4 == null) {\n-                    fail(\"testWeak4.get() returned null\");\n-                } else if (obj4.value != 4) {\n-                    fail(\"testWeak4.get().value is \" + obj4.value);\n-                }\n+            if (obj4 == null) {\n+                fail(\"testWeak4.get() returned null\");\n+            } else if (obj4.value != 4) {\n+                fail(\"testWeak4.get().value is \" + obj4.value);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":5,"deletions":43,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -39,13 +39,0 @@\n-\/* @test id=iu-100\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @modules java.base\n- * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n- *      gc.shenandoah.TestReferenceShortcutCycle\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceShortcutCycle.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,19 +44,0 @@\n-\/*\n- * @test id=iu\n- * @summary Test that null references\/referents work fine\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestRefprocSanity\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRefprocSanity\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRefprocSanity\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRefprocSanity.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -76,19 +76,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahRegionSampling\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRegionSampling\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahRegionSampling\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRegionSampling\n- *\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRegionSampling.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -141,40 +141,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key randomness\n- * @summary Test that Shenandoah is able to work with(out) resizeable TLABs\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      -XX:+ResizeTLAB\n- *      TestResizeTLAB\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      -XX:-ResizeTLAB\n- *      TestResizeTLAB\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key randomness\n- * @summary Test that Shenandoah is able to work with(out) resizeable TLABs\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      -XX:+ResizeTLAB\n- *      TestResizeTLAB\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      -XX:-ResizeTLAB\n- *      TestResizeTLAB\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestResizeTLAB.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -117,35 +117,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRetainObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRetainObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRetainObjects.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -130,39 +130,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestSieveObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestSieveObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestSieveObjects.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -68,18 +68,0 @@\n-\/*\n- * @test id=iu\n- * @summary Test Shenandoah string deduplication implementation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules java.base\/java.lang:open\n- *          java.management\n- *\n- * @run main\/othervm -Xmx256m -Xlog:gc+stats -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:StringDeduplicationAgeThreshold=3\n- *      TestStringDedup\n- *\n- * @run main\/othervm -Xmx256m -Xlog:gc+stats -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive -XX:StringDeduplicationAgeThreshold=3\n- *      TestStringDedup\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedup.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -75,31 +75,0 @@\n- \/*\n- * @test id=iu\n- * @summary Test Shenandoah string deduplication implementation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules java.base\/java.lang:open\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedupStress.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -78,20 +78,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that Shenandoah cleans up interned strings\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestStringInternCleanup\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      TestStringInternCleanup\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestStringInternCleanup\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringInternCleanup.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -61,27 +61,0 @@\n-\/*\n- * @test id=iu\n- * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestVerifyJCStress\n- *\/\n-\n-\/*\n- * @test id=iu-c1\n- * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify -XX:TieredStopAtLevel=1\n- *      TestVerifyJCStress\n- *\/\n-\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestVerifyJCStress.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n- * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC                         TestWrongArrayMember\n- * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu TestWrongArrayMember\n+ * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC TestWrongArrayMember\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestWrongArrayMember.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n- *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/BarrierInInfiniteLoop.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * bug 8280885\n- * @summary Shenandoah: Some tests failed with \"EA: missing allocation reference path\"\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=iu\n- *                   -XX:CompileCommand=dontinline,TestUnexpectedIUBarrierEA::notInlined TestUnexpectedIUBarrierEA\n- *\/\n-\n-public class TestUnexpectedIUBarrierEA {\n-\n-    private static Object field;\n-\n-    public static void main(String[] args) {\n-        for (int i = 0; i < 20_000; i++) {\n-            test(false);\n-        }\n-    }\n-\n-    private static void test(boolean flag) {\n-        A a = new A();\n-        B b = new B();\n-        b.field = a;\n-        notInlined();\n-        Object o = b.field;\n-        if (!(o instanceof A)) {\n-\n-        }\n-        C c = new C();\n-        c.field = o;\n-        if (flag) {\n-            field = c.field;\n-        }\n-    }\n-\n-    private static void notInlined() {\n-\n-    }\n-\n-    private static class A {\n-    }\n-\n-    private static class B {\n-        public Object field;\n-    }\n-\n-    private static class C {\n-        public Object field;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnexpectedIUBarrierEA.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -90,17 +90,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that MX notifications are reported for all cycles\n- * @library \/test\/lib \/\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dprecise=false\n- *      TestChurnNotifications\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dprecise=false\n- *      TestChurnNotifications\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestChurnNotifications.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -86,15 +86,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that MX notifications are reported for all cycles\n- * @library \/test\/lib \/\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestPauseNotifications\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestPauseNotifications\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestPauseNotifications.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -127,1 +127,0 @@\n-             {{\"iu\"},      {\"adaptive\", \"aggressive\"}},\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestClassLoaderLeak.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -128,18 +128,0 @@\n-\n-        {\n-            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n-                    \"-Xmx128m\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    \"-Xlog:gc\",\n-                    \"-XX:+ExplicitGCInvokesConcurrent\",\n-                    \"-XX:ShenandoahGCMode=iu\",\n-                    TestExplicitGC.class.getName(),\n-                    \"test\");\n-            for (String p : full) {\n-                output.shouldNotContain(p);\n-            }\n-            for (String p : concNormal) {\n-                output.shouldContain(p);\n-            }\n-         }\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestExplicitGC.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-        testWith(\"-XX:ShenandoahGCMode=iu\",      Mode.EXPERIMENTAL);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestModeUnlock.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                new String[] { \"ShenandoahSATBBarrier\", \"ShenandoahIUBarrier\" },\n+                new String[] { \"ShenandoahSATBBarrier\" },\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSelectiveBarrierFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,7 +47,0 @@\n-        String[] iu = {\n-                \"ShenandoahLoadRefBarrier\",\n-                \"ShenandoahIUBarrier\",\n-                \"ShenandoahCASBarrier\",\n-                \"ShenandoahCloneBarrier\",\n-                \"ShenandoahStackWatermarkBarrier\",\n-        };\n@@ -59,1 +52,0 @@\n-        shouldFailAll(\"-XX:ShenandoahGCMode=iu\",               iu);\n@@ -61,1 +53,0 @@\n-        shouldPassAll(\"-XX:ShenandoahGCMode=passive\",          iu);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierDisable.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Test that disabling wrong barriers fails early\n+ * @summary Test that SATB barrier may be enabled for all modes\n@@ -41,3 +41,0 @@\n-                \"ShenandoahIUBarrier\",\n-        };\n-        String[] iu = {\n@@ -46,6 +43,4 @@\n-\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=adaptive\",   concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=static\",     concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=compact\",    concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=aggressive\", concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCMode=iu\",               iu);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=adaptive\",   concurrent);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=static\",     concurrent);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=compact\",    concurrent);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=aggressive\", concurrent);\n@@ -53,1 +48,0 @@\n-        shouldPassAll(\"-XX:ShenandoahGCMode=passive\",          iu);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierEnable.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -102,41 +102,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient\n- * @summary Stress the Shenandoah GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient\n- * @summary Stress the Shenandoah GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n@@ -224,47 +183,0 @@\n-\/*\n- * @test id=iu-aggressive-deopt-nmethod\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient & vm.opt.ClassUnloading != false\n- * @summary Stress Shenandoah GC with nmethod barrier forced deoptimization enabled.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\/*\n- * @test id=iu-deopt-nmethod\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient & vm.opt.ClassUnloading != false\n- * @summary Stress Shenandoah GC with nmethod barrier forced deoptimization enabled.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcbasher\/TestGCBasherWithShenandoah.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -105,39 +105,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key stress randomness\n- * @library \/ \/test\/lib\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key stress randomness\n- * @library \/ \/test\/lib\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=600 -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithShenandoah.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -43,14 +43,0 @@\n-\n-\/*\n- * @test id=iu\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the Shenandoah GC full GC by allocating objects of different lifetimes concurrently with System.gc().\n- *\n- * @run main\/othervm\/timeout=300 -Xlog:gc*=info -Xmx512m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.systemgc.TestSystemGCWithShenandoah 270\n- *\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/systemgc\/TestSystemGCWithShenandoah.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}