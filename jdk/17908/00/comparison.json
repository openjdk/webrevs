{"files":[{"patch":"@@ -66,1 +66,1 @@\n-To launch a single source-file program:\n+To launch a source-file program:\n@@ -103,1 +103,1 @@\n-Only used to launch a single source-file program.\n+Only used to launch a source-file program.\n@@ -106,2 +106,1 @@\n-See \\f[B]Using Source-File Mode to Launch Single-File Source-Code\n-Programs\\f[R]\n+See \\f[B]Using Source-File Mode to Launch Source-Code Programs\\f[R]\n@@ -131,2 +130,2 @@\n-See \\f[B]Using Source-File Mode to Launch Single-File Source-Code\n-Programs\\f[R] for a description of using the source-file mode.\n+See \\f[B]Using Source-File Mode to Launch Source-Code Programs\\f[R] for\n+a description of using the source-file mode.\n@@ -160,1 +159,1 @@\n-.SH USING SOURCE-FILE MODE TO LAUNCH SINGLE-FILE SOURCE-CODE PROGRAMS\n+.SH USING SOURCE-FILE MODE TO LAUNCH SOURCE-CODE PROGRAMS\n@@ -208,1 +207,1 @@\n-contained a class named \\f[V]hello.World\\f[R], then the source-file mode\n+contained a class named \\f[V]HelloWorld\\f[R], then the source-file mode\n@@ -215,2 +214,0 @@\n-The example illustrates that the class can be in a named package, and\n-does not need to be in the unnamed package.\n@@ -218,2 +215,1 @@\n-following two commands where \\f[V]hello.World\\f[R] is the name of the\n-class in the package:\n+following two commands:\n@@ -223,2 +219,2 @@\n-javac -d <memory> HelloWorld.java\n-java -cp <memory> hello.World\n+javac -d <memory> --source-path <source-root> HelloWorld.java\n+java --class-path <memory> HelloWorld\n@@ -228,0 +224,2 @@\n+where \\f[V]<source-root>\\f[R] is computed\n+.PP\n@@ -256,0 +254,14 @@\n+These include:\n+\\f[V]--class-path\\f[R]\/\\f[V]-classpath\\f[R]\/\\f[V]-cp\\f[R],\n+\\f[V]--module-path\\f[R]\/\\f[V]-p\\f[R], \\f[V]--add-exports\\f[R],\n+\\f[V]--add-modules\\f[R], \\f[V]--limit-modules\\f[R],\n+\\f[V]--patch-module\\f[R], \\f[V]--upgrade-module-path\\f[R],\n+\\f[V]--enable-preview\\f[R].\n+.IP \\[bu] 2\n+The root of the source tree, \\f[V]<source-root>\\f[R] is computed from\n+the package of the class being launched.\n+For example, if \\f[V]HelloWorld.java\\f[R] declared its classes to be in\n+the \\f[V]hello\\f[R] package, then the file \\f[V]HelloWorld.java\\f[R] is\n+expected to reside in the directory \\f[V]somedir\/hello\/\\f[R].\n+In this case, \\f[V]somedir\\f[R] is computed to be the root of the source\n+tree.\n@@ -257,2 +269,3 @@\n-No other source files are found and compiled, as if the source path is\n-set to an empty value.\n+The root of the source tree serves as the source-path for compilation,\n+so that other source files found in that tree and are needed by\n+\\f[V]HelloWorld\\f[R] could be compiled.\n@@ -269,1 +282,6 @@\n-The source file is compiled in the context of an unnamed module.\n+If a \\f[V]module-info.java\\f[R] file exists in the\n+\\f[V]<source-root>\\f[R] directory, its module declaration is used to\n+define a named module that will contain all the classes compiled from\n+\\f[V].java\\f[R] files in the source tree.\n+If \\f[V]module-info.java\\f[R] does not exist, all the classes compiled\n+from source files will be compiled in the context of the unnamed module.\n@@ -271,2 +289,2 @@\n-The source file should contain one or more top-level classes, the first\n-of which is taken as the class to be executed.\n+The source file that is launched should contain one or more top-level\n+classes, the first of which is taken as the class to be executed.\n@@ -274,4 +292,4 @@\n-The compiler does not enforce the optional restriction defined at the\n-end of JLS 7.6, that a type in a named package should exist in a file\n-whose name is composed from the type name followed by the\n-\\f[V].java\\f[R] extension.\n+For the source file that is launched, the compiler does not enforce the\n+optional restriction defined at the end of JLS 7.6, that a type in a\n+named package should exist in a file whose name is composed from the\n+type name followed by the \\f[V].java\\f[R] extension.\n@@ -279,3 +297,3 @@\n-If the source file contains errors, appropriate error messages are\n-written to the standard error stream, and the launcher exits with a\n-non-zero exit code.\n+If a source file contains errors, appropriate error messages are written\n+to the standard error stream, and the launcher exits with a non-zero\n+exit code.\n@@ -287,2 +305,1 @@\n-It must contain a declaration of the standard\n-\\f[V]public static void main(String[])\\f[R] method.\n+It must contain a declaration of an entry \\f[V]main\\f[R] method.\n@@ -293,1 +310,1 @@\n-refer to any classes declared in the source file.\n+refer to any classes declared in source files.\n@@ -295,2 +312,7 @@\n-The compiled classes are executed in the context of an unnamed module,\n-as though \\f[V]--add-modules=ALL-DEFAULT\\f[R] is in effect.\n+If a \\f[V]module-info.java\\f[R] file exists in the\n+\\f[V]<source-root>\\f[R] directory, then all the classes compiled from\n+\\f[V].java\\f[R] files in the source tree will be in that module, which\n+will serve as the root module for the execution of the program.\n+If \\f[V]module-info.java\\f[R] does not exist, the compiled classes are\n+executed in the context of an unnamed module, as though\n+\\f[V]--add-modules=ALL-DEFAULT\\f[R] is in effect.\n@@ -301,1 +323,1 @@\n-are passed to the standard main method in the obvious way.\n+are passed to the main method in the obvious way.\n@@ -306,2 +328,2 @@\n-See \\f[B]JEP 330: Launch Single-File Source-Code Programs\\f[R]\n-[https:\/\/openjdk.org\/jeps\/330] for complete details.\n+See \\f[B]JEP 458: Launch Multi-File Source-Code Programs\\f[R]\n+[https:\/\/openjdk.org\/jeps\/458] for complete details.\n","filename":"src\/java.base\/share\/man\/java.1","additions":56,"deletions":34,"binary":false,"changes":90,"status":"modified"}]}