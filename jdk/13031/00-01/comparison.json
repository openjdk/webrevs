{"files":[{"patch":"@@ -1311,4 +1311,8 @@\n-                    \/\/ Make sure that the (potential) minimum week has the\n-                    \/\/ current DAY_OF_WEEK\n-                    if (newWeekOfYear == 1 && isInvalidWeek1()) {\n-                        newWeekOfYear+=1;\n+                    \/\/ Final check to ensure that the first week has the\n+                    \/\/ current DAY_OF_WEEK. Only make a check for\n+                    \/\/ rolling up into week 1, as the existing checks\n+                    \/\/ sufficiently handle rolling down into week 1.\n+                    if (newWeekOfYear == 1 && (isInvalidWeek1())) {\n+                        if (amount > 0) {\n+                            newWeekOfYear++;\n+                        }\n@@ -3005,0 +3009,23 @@\n+    private int getDaysInLastWeek(int dec31dow) {\n+        int daysInLastWeek;\n+        if (getFirstDayOfWeek() <= dec31dow) {\n+            \/\/ Add wrap around days\n+            daysInLastWeek = dec31dow - getFirstDayOfWeek() + 1;\n+        } else {\n+            daysInLastWeek = (7 - getFirstDayOfWeek()) + dec31dow;\n+        }\n+        return daysInLastWeek;\n+    }\n+\n+    \/\/ revisit the logic here\n+    private boolean isInvalidWeekMax() {\n+        \/\/ Calculate the DAY_OF_WEEK for Jan 1 of the current YEAR\n+        long dec31Fd =  gcal.getFixedDate(internalGet(YEAR), 12, 31, null);\n+        int dec31dow = BaseCalendar.getDayOfWeekFromFixedDate(dec31Fd);\n+        int daysInLastWeek = getDaysInLastWeek(dec31dow);\n+\n+        \/\/ If the week is minimum, check if the DAY_OF_WEEK does not exist\n+        return isMinWeek(daysInLastWeek) &&\n+                dayNotInMinWeek(internalGet(DAY_OF_WEEK), getFirstDayOfWeek() - 1, dec31dow);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/GregorianCalendar.java","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @summary Test the behavior of Calendar.roll(WEEK_OF_YEAR) when the week\n- * is rolled into a minimal week 1\n+ * @summary Test the behavior of Calendar.roll(WEEK_OF_YEAR) when the last week\n+ * is rolled up into a minimal week 1 of the same year\n@@ -32,2 +32,2 @@\n-import java.util.Calendar;\n-import java.util.Locale;\n+\n+import java.util.*;\n@@ -35,0 +35,1 @@\n+import static java.util.Calendar.*;\n@@ -40,0 +41,6 @@\n+\/**\n+ * Test to validate the behavior of Calendar.roll(WEEK_OF_YEAR, +1)\n+ * when rolling into a minimal week 1 from the max week. WEEK_OF_YEAR can\n+ * not be rolled to a week with a non-existent DAY_OF_WEEK. This only\n+ * test the implementation of the Gregorian Calendar roll\n+ *\/\n@@ -41,15 +48,0 @@\n-\n-    \/**\n-     * Test to validate the behavior of Calendar.roll(WEEK_OF_YEAR)\n-     * when rolling into a minimal week 1. Since other methods\n-     * will call complete(), and rolling WEEK_OF_YEAR will cause field mask\n-     * to compute the new time using WEEK_OF_YEAR and DAY_OF_WEEK, these values\n-     * must represent a valid date. If the DAY_OF_WEEK does not exist in the\n-     * minimum first week, WEEK_OF_YEAR should be incremented by 1 to provide a\n-     * valid combination.\n-     *\n-     * For example, (Locale.US) rolling December 29th, 2019 by 1 week will\n-     * produce WEEK_OF_YEAR = 1, and DAY_OF_WEEK = 1. However, there is no\n-     * Sunday in the first week of 2019, and WEEK_OF_YEAR should be\n-     * incremented by 1 to a value of 2.\n-     *\/\n@@ -57,2 +49,10 @@\n-    @MethodSource(\"calendarProvider\")\n-    public void testRollToMinWeek1(Calendar calendar, String expectedDate) {\n+    @MethodSource(\"rollUpCalProvider\")\n+    public void rollUpTest(Calendar calendar, String[] validDates){\n+        if (calendar instanceof GregorianCalendar) {\n+            testRoll(calendar, validDates, +1);\n+        } else {\n+            fail(String.format(\"Calendar is not Gregorian: %s\", calendar));\n+        }\n+    }\n+\n+    private void testRoll(Calendar calendar, String[] validDates, int amount) {\n@@ -60,1 +60,1 @@\n-        calendar.roll(Calendar.WEEK_OF_YEAR, +1);\n+        calendar.roll(Calendar.WEEK_OF_YEAR, amount);\n@@ -62,1 +62,1 @@\n-        if (!rolledDate.equals(expectedDate)) {\n+        if (!Arrays.asList(validDates).contains(rolledDate)) {\n@@ -64,2 +64,4 @@\n-            {$$$ Failed: Rolled: \"%s\" by 1 week, expecting: \"%s\", but got: \"%s\"},\n-            \"\"\", originalDate, expectedDate, rolledDate));\n+            {$$$ Failed: Rolled: \"%s\" by %s week, where the first day of the week\n+            is: %s with a minimum week length of: %s and was expecting one of: \"%s\", but got: \"%s\"},\n+            \"\"\", originalDate, amount, calendar.getFirstDayOfWeek(),\n+                    calendar.getMinimalDaysInFirstWeek(), Arrays.toString(validDates), rolledDate));\n@@ -68,2 +70,4 @@\n-            {$$$ Passed: Rolled: \"%s\" by 1 week and successfully got: \"%s\"},\n-            \"\"\", originalDate, rolledDate);\n+            {$$$ Passed: Rolled: \"%s\" by %s week where the first day of the week\n+            is: %s with a minimum week length of: %s and successfully got: \"%s\"},\n+            \"\"\", originalDate, amount, calendar.getFirstDayOfWeek(),\n+                    calendar.getMinimalDaysInFirstWeek(), rolledDate);\n@@ -73,19 +77,15 @@\n-    \/**\n-     * Data provider for testing firstWeek().\n-     *\/\n-    private static Stream<Arguments> calendarProvider() {\n-        return Stream.of(\n-                \/\/ Test a variety of rolls that previously produced incorrect results\n-                Arguments.of(buildCalendar(27, 11, 2020, Locale.ENGLISH),\n-                        \"Sunday, 5 January 2020\"),\n-                Arguments.of(buildCalendar(28, 11, 2020, Locale.ENGLISH),\n-                        \"Monday, 6 January 2020\"),\n-                Arguments.of(buildCalendar(29, 11, 2020, Locale.ENGLISH),\n-                        \"Tuesday, 7 January 2020\"),\n-                Arguments.of(buildCalendar(29, 11, 2019, Locale.ENGLISH),\n-                        \"Sunday, 6 January 2019\"),\n-                Arguments.of(buildCalendar(30, 11, 2019, Locale.ENGLISH),\n-                        \"Monday, 7 January 2019\"),\n-                Arguments.of(buildCalendar(30, 11, 2019, Locale.FRANCE),\n-                        \"Monday, 7 January 2019\")\n-        );\n+    \/\/ This implicitly tests the Iso8601 calendar as\n+    \/\/ MinWeek = 4 and FirstDayOfWeek = Monday is included in the provider\n+    private static Stream<Arguments> rollUpCalProvider() {\n+        ArrayList<Arguments> calList = new ArrayList<Arguments>();\n+        for (int weekLength = 1; weekLength <= 7; weekLength++) {\n+            for (int firstDay = 1; firstDay <= 7; firstDay++) {\n+                \/\/ Week 1, Week 2 are all potential dates to roll into\n+                String[] validDates = {\"Sunday, 6 January 2019\", \"Sunday, 13 January 2019\"};\n+                calList.add(Arguments.of(buildCalendar(\"gregory\", firstDay, weekLength,\n+                                29, 11, 2019), validDates)\n+                        \/\/ Roll from week Max to week 1 with non-existent day of week\n+                );\n+            }\n+        }\n+        return calList.stream();\n@@ -94,6 +94,8 @@\n-    private static Calendar buildCalendar(int day, int month, int year, Locale locale) {\n-        Calendar calendar = Calendar.getInstance(locale);\n-        calendar.set(Calendar.YEAR, year);\n-        calendar.set(Calendar.MONTH, month);\n-        calendar.set(Calendar.DAY_OF_MONTH, day);\n-        return calendar;\n+    private static Calendar buildCalendar(String type, int firstDayOfWeek,\n+                                 int minimumWeekLength, int dayOfMonth,\n+                                 int month, int year) {\n+        Calendar.Builder calBuilder = new Builder();\n+        calBuilder.setCalendarType(type);\n+        calBuilder.setWeekDefinition(firstDayOfWeek, minimumWeekLength);\n+        calBuilder.setDate(year, month, dayOfMonth);\n+        return calBuilder.build();\n@@ -102,1 +104,1 @@\n-    private String longDateString(Calendar calendar) {\n+    private static String longDateString(Calendar calendar) {\n@@ -107,1 +109,1 @@\n-                calendar.get(Calendar.YEAR));\n+                calendar.get(YEAR));\n","filename":"test\/jdk\/java\/util\/Calendar\/RollToMinWeek.java","additions":56,"deletions":54,"binary":false,"changes":110,"status":"modified"}]}