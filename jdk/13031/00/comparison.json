{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1310,1 +1310,7 @@\n-                    set(field, getRolledValue(woy, amount, min, max));\n+                    int newWeekOfYear = getRolledValue(woy, amount, min, max);\n+                    \/\/ Make sure that the (potential) minimum week has the\n+                    \/\/ current DAY_OF_WEEK\n+                    if (newWeekOfYear == 1 && isInvalidWeek1()) {\n+                        newWeekOfYear+=1;\n+                    }\n+                    set(field, newWeekOfYear);\n@@ -2975,0 +2981,50 @@\n+    \/**\n+     * {@return {@code true} if the first week of the current year is minimum\n+     * and the {@code DAY_OF_WEEK} does not exist in that week}\n+     *\n+     * This method is used to check the validity of a {@code WEEK_OF_YEAR} and\n+     * {@code DAY_OF_WEEK} combo when WEEK_OF_YEAR is rolled to a value of 1.\n+     * This prevents other methods from calling complete() with an invalid combo.\n+     *\/\n+    private boolean isInvalidWeek1() {\n+        \/\/ Calculate the DAY_OF_WEEK for Jan 1 of the current YEAR\n+        long jan1Fd =  gcal.getFixedDate(internalGet(YEAR), 1, 1, null);\n+        int jan1Dow = BaseCalendar.getDayOfWeekFromFixedDate(jan1Fd);\n+        int daysInFirstWeek;\n+        if (getFirstDayOfWeek() <= jan1Dow) {\n+            \/\/ Add wrap around days\n+            daysInFirstWeek = (7 - jan1Dow) + getFirstDayOfWeek();\n+        } else {\n+            daysInFirstWeek = getFirstDayOfWeek() - jan1Dow;\n+        }\n+        \/\/ If the week is minimum, check if the DAY_OF_WEEK does not exist\n+        return isMinWeek(daysInFirstWeek) &&\n+                dayNotInMinWeek(internalGet(DAY_OF_WEEK), jan1Dow, getFirstDayOfWeek() - 1);\n+    }\n+\n+    \/**\n+     * Determines if the specified amount of days can make up\n+     * a valid minimum week.\n+     *\/\n+    private boolean isMinWeek (int days) {\n+        return days >= getMinimalDaysInFirstWeek();\n+    }\n+\n+    \/**\n+     * Determines if the specified day exists in the minimum week.\n+     * For example, dayNotInMinWeek(4, 6, 3) returns false since Wednesday\n+     * is not between the minimum week given by [Friday, Saturday,\n+     * Sunday, Monday, Tuesday].\n+     *\/\n+    private boolean dayNotInMinWeek (int day, int startDay, int endDay) {\n+        if (endDay >= startDay) {\n+            \/\/ dayNotInMinWeek(2, 3, 6), check that 2 is\n+            \/\/ not between 3 4 5 6\n+            return !(day >= startDay && day <= endDay);\n+        } else {\n+            \/\/ dayNotInMinWeek(4, 6, 3), check that 4 is\n+            \/\/ not between 6 7 1 2 3\n+            return !(day >= startDay || day <= endDay);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/GregorianCalendar.java","additions":58,"deletions":2,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8225641\n+ * @summary Test the behavior of Calendar.roll(WEEK_OF_YEAR) when the week\n+ * is rolled into a minimal week 1\n+ * @run junit RollToMinWeek\n+ *\/\n+\n+import java.util.Calendar;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public class RollToMinWeek {\n+\n+    \/**\n+     * Test to validate the behavior of Calendar.roll(WEEK_OF_YEAR)\n+     * when rolling into a minimal week 1. Since other methods\n+     * will call complete(), and rolling WEEK_OF_YEAR will cause field mask\n+     * to compute the new time using WEEK_OF_YEAR and DAY_OF_WEEK, these values\n+     * must represent a valid date. If the DAY_OF_WEEK does not exist in the\n+     * minimum first week, WEEK_OF_YEAR should be incremented by 1 to provide a\n+     * valid combination.\n+     *\n+     * For example, (Locale.US) rolling December 29th, 2019 by 1 week will\n+     * produce WEEK_OF_YEAR = 1, and DAY_OF_WEEK = 1. However, there is no\n+     * Sunday in the first week of 2019, and WEEK_OF_YEAR should be\n+     * incremented by 1 to a value of 2.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"calendarProvider\")\n+    public void testRollToMinWeek1(Calendar calendar, String expectedDate) {\n+        String originalDate = longDateString(calendar);\n+        calendar.roll(Calendar.WEEK_OF_YEAR, +1);\n+        String rolledDate = longDateString(calendar);\n+        if (!rolledDate.equals(expectedDate)) {\n+            fail(String.format(\"\"\"\n+            {$$$ Failed: Rolled: \"%s\" by 1 week, expecting: \"%s\", but got: \"%s\"},\n+            \"\"\", originalDate, expectedDate, rolledDate));\n+        } else {\n+            System.out.printf(\"\"\"\n+            {$$$ Passed: Rolled: \"%s\" by 1 week and successfully got: \"%s\"},\n+            \"\"\", originalDate, rolledDate);\n+        }\n+    }\n+\n+    \/**\n+     * Data provider for testing firstWeek().\n+     *\/\n+    private static Stream<Arguments> calendarProvider() {\n+        return Stream.of(\n+                \/\/ Test a variety of rolls that previously produced incorrect results\n+                Arguments.of(buildCalendar(27, 11, 2020, Locale.ENGLISH),\n+                        \"Sunday, 5 January 2020\"),\n+                Arguments.of(buildCalendar(28, 11, 2020, Locale.ENGLISH),\n+                        \"Monday, 6 January 2020\"),\n+                Arguments.of(buildCalendar(29, 11, 2020, Locale.ENGLISH),\n+                        \"Tuesday, 7 January 2020\"),\n+                Arguments.of(buildCalendar(29, 11, 2019, Locale.ENGLISH),\n+                        \"Sunday, 6 January 2019\"),\n+                Arguments.of(buildCalendar(30, 11, 2019, Locale.ENGLISH),\n+                        \"Monday, 7 January 2019\"),\n+                Arguments.of(buildCalendar(30, 11, 2019, Locale.FRANCE),\n+                        \"Monday, 7 January 2019\")\n+        );\n+    }\n+\n+    private static Calendar buildCalendar(int day, int month, int year, Locale locale) {\n+        Calendar calendar = Calendar.getInstance(locale);\n+        calendar.set(Calendar.YEAR, year);\n+        calendar.set(Calendar.MONTH, month);\n+        calendar.set(Calendar.DAY_OF_MONTH, day);\n+        return calendar;\n+    }\n+\n+    private String longDateString(Calendar calendar) {\n+        return String.format(\"%s, %s %s %s\",\n+                calendar.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.ENGLISH),\n+                calendar.get(Calendar.DAY_OF_MONTH),\n+                calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.ENGLISH),\n+                calendar.get(Calendar.YEAR));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Calendar\/RollToMinWeek.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}