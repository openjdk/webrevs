{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import javax.swing.*;\n-import javax.swing.event.*;\n-import javax.swing.border.*;\n-\n-import java.awt.Component;\n@@ -34,0 +29,1 @@\n+import java.awt.Component;\n@@ -35,1 +31,0 @@\n-\n@@ -37,0 +32,5 @@\n+\n+import javax.swing.border.Border;\n+import javax.swing.border.EmptyBorder;\n+import javax.swing.plaf.synth.SynthListUI;\n+\n@@ -160,1 +160,5 @@\n-        setEnabled(list.isEnabled());\n+        if (list.getName() == null || !list.getName().equals(\"ComboBox.list\")\n+                || !(list.getUI() instanceof SynthListUI)) {\n+            setEnabled(list.isEnabled());\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/DefaultListCellRenderer.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import javax.swing.DefaultListCellRenderer;\n@@ -111,0 +112,2 @@\n+    private DlcrEnabledHandler dlcrEnabledHandler;\n+\n@@ -190,0 +193,1 @@\n+        dlcrEnabledHandler = new DlcrEnabledHandler(comboBox);\n@@ -222,0 +226,1 @@\n+        dlcrEnabledHandler.unregister();\n@@ -825,0 +830,32 @@\n+\n+    \/**\n+     * Handler for updating combobox enabled status when renderer enabled\n+     * status changes\n+     *\/\n+    private static class DlcrEnabledHandler implements PropertyChangeListener {\n+        private JComboBox<?> comboBox;\n+\n+        private DlcrEnabledHandler(JComboBox<?> comboBox) {\n+            this.comboBox = comboBox;\n+            comboBox.addPropertyChangeListener(\"enabled\",this);\n+        }\n+\n+        public void unregister() {\n+            comboBox.removePropertyChangeListener(\"enabled\", this);\n+        }\n+\n+        \/**\n+         * Called when the combos enabled status changes\n+         *\n+         * @param evt A PropertyChangeEvent object describing the event source\n+         *            and the property that has changed.\n+         *\/\n+        public void propertyChange(PropertyChangeEvent evt) {\n+            if (evt.getPropertyName().equals(\"enabled\")) {\n+                if (comboBox.getRenderer() instanceof DefaultListCellRenderer) {\n+                    ((DefaultListCellRenderer) comboBox.getRenderer())\n+                            .setEnabled((boolean) evt.getNewValue());\n+                }\n+            }\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthComboBoxUI.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7093691\n+ * @summary Tests if JComboBox has correct font when disabled\/enabled\n+ * @run main DisabledComboBoxFontTestAuto\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.DefaultListCellRenderer;\n+import javax.swing.JComboBox;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+public class DisabledComboBoxFontTestAuto {\n+    private static JComboBox combo, combo2;\n+    private static BufferedImage enabledImage, disabledImage, enabledImage2, disabledImage2;\n+    private static Path testDir;\n+    private static String lafName;\n+    private static StringBuffer failingLafs;\n+    private static int COMBO_HEIGHT, COMBO_WIDTH, COMBO2_HEIGHT, COMBO2_WIDTH;\n+\n+    private static void createCombo() {\n+        combo = new JComboBox();\n+        combo.addItem(\"Simple JComboBox\");\n+        combo.setRenderer(new DefaultListCellRenderer());\n+        combo2 = new JComboBox();\n+        combo2.addItem(\"Simple JComboBox\");\n+        COMBO_WIDTH = (int) combo.getPreferredSize().getWidth();\n+        COMBO_HEIGHT = (int) combo.getPreferredSize().getHeight();\n+        COMBO2_WIDTH = (int) combo2.getPreferredSize().getWidth();\n+        COMBO2_HEIGHT = (int) combo2.getPreferredSize().getHeight();\n+        combo.setSize(COMBO_WIDTH, COMBO_HEIGHT);\n+        combo2.setSize(COMBO2_WIDTH, COMBO2_HEIGHT);\n+    }\n+\n+    private static void paintCombo() {\n+        combo.setEnabled(true);\n+        enabledImage = new BufferedImage(COMBO_WIDTH, COMBO_HEIGHT, TYPE_INT_ARGB);\n+        Graphics2D graphics2D = enabledImage.createGraphics();\n+        combo.paint(graphics2D);\n+        graphics2D.dispose();\n+        combo.setEnabled(false);\n+        disabledImage = new BufferedImage(COMBO_WIDTH, COMBO_HEIGHT, TYPE_INT_ARGB);\n+        graphics2D = disabledImage.createGraphics();\n+        combo.paint(graphics2D);\n+        graphics2D.dispose();\n+        combo2.setEnabled(true);\n+        enabledImage2 = new BufferedImage(COMBO2_WIDTH, COMBO2_HEIGHT, TYPE_INT_ARGB);\n+        graphics2D = enabledImage2.createGraphics();\n+        combo2.paint(graphics2D);\n+        graphics2D.dispose();\n+        combo2.setEnabled(false);\n+        disabledImage2 = new BufferedImage(COMBO2_WIDTH, COMBO2_HEIGHT, TYPE_INT_ARGB);\n+        graphics2D = disabledImage2.createGraphics();\n+        combo2.paint(graphics2D);\n+        graphics2D.dispose();\n+    }\n+\n+    private static void testMethod() throws IOException {\n+        ImageIO.write(enabledImage, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"Enabled.png\"));\n+        ImageIO.write(disabledImage, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"Disabled.png\"));\n+        ImageIO.write(enabledImage2, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"EnabledDLCR.png\"));\n+        ImageIO.write(disabledImage2, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"DisabledDLCR.png\"));\n+\n+        boolean isIdentical = true;\n+        Color eColor1, eColor2, dColor1, dColor2;\n+\n+        \/\/ Use center line to compare RGB values\n+        int y = 10;\n+        for (int x = (enabledImage.getWidth() \/ 2) - 20;\n+             x < (enabledImage.getWidth() \/ 2) + 20; x++) {\n+            \/\/ Nimbus has a pixel offset in coordinates since Nimbus is 2px\n+            \/\/ smaller in width than other L&F's\n+            if (lafName.equals(\"Nimbus\")) {\n+                eColor1 = new Color(enabledImage.getRGB(x + 1, y));\n+                eColor2 = new Color(enabledImage2.getRGB(x, y));\n+                dColor1 = new Color(disabledImage.getRGB(x + 1, y));\n+                dColor2 = new Color(disabledImage2.getRGB(x, y));\n+            } else {\n+                eColor1 = new Color(enabledImage.getRGB(x, y));\n+                eColor2 = new Color(enabledImage2.getRGB(x, y));\n+                dColor1 = new Color(disabledImage.getRGB(x, y));\n+                dColor2 = new Color(disabledImage2.getRGB(x, y));\n+            }\n+            if ((!isColorMatching(eColor1, eColor2)) || (!isColorMatching(dColor1, dColor2))) {\n+                isIdentical = false;\n+                break;\n+            }\n+        }\n+\n+        if (isIdentical) {\n+            System.out.println(\"PASSED\");\n+        } else {\n+            failingLafs.append(lafName + \", \");\n+        }\n+    }\n+\n+    private static boolean isColorMatching(Color c1, Color c2) {\n+        if ((c1.getRed() != c2.getRed())\n+                || (c1.getBlue() != c2.getBlue())\n+                || (c1.getGreen() != c2.getGreen())) {\n+\n+            System.out.println(lafName + \" Enabled RGB failure: \"\n+                    + c1.getRed() + \", \"\n+                    + c1.getBlue() + \", \"\n+                    + c1.getGreen() + \" vs \"\n+                    + c2.getRed() + \", \"\n+                    + c2.getBlue() + \", \"\n+                    + c2.getGreen());\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored){\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        lafName = \"null\";\n+        failingLafs = new StringBuffer();\n+        testDir = Path.of(System.getProperty(\"test.classes\", \".\"));\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            \/\/ Change Motif LAF name to avoid using slash in saved image file path\n+            lafName = laf.getName().equals(\"CDE\/Motif\") ? \"Motif\" : laf.getName();\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            SwingUtilities.invokeAndWait(DisabledComboBoxFontTestAuto::createCombo);\n+            SwingUtilities.invokeAndWait(DisabledComboBoxFontTestAuto::paintCombo);\n+            testMethod();\n+        }\n+        if (!failingLafs.isEmpty()) {\n+            \/\/ Remove trailing comma and whitespace\n+            failingLafs.setLength(failingLafs.length() - 2);\n+            throw new RuntimeException(\"FAIL - Enabled and disabled ComboBox \" +\n+                    \"does not match in these LAFs: \" + failingLafs);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/DisabledComboBoxFontTestAuto.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}