{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1859,0 +1859,8 @@\n+            \/\/ Don't check under, historically we have allowed values under\n+            \/\/ BEFORE_MEIJI to be ignored during normalization\n+            \/\/ We check against eras.length (not the highest constant ERA value)\n+            \/\/ due to future added eras, or additional eras via\n+            \/\/ \"jdk.calendar.japanese.supplemental.era\"\n+            if (era >= eras.length) {\n+                throw new IllegalArgumentException(\"Invalid era\");\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/JapaneseImperialCalendar.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4745761\n+ * @bug 4745761 8350646\n@@ -28,0 +28,1 @@\n+ * @run main BuilderTest\n@@ -248,0 +249,5 @@\n+        \/\/ JDK-8350646 : Ensure IAE (instead of AIOOBE) for ERA over largest supported\n+        calb = builder().setCalendarType(\"japanese\").setFields(ERA, 6);\n+        checkException(calb, IllegalArgumentException.class);\n+        \/\/ Note that we don't check ERAs under BEFORE_MEIJI, i.e. -1, -2, ... as\n+        \/\/ historically JapaneseImperialCalendar ignores such values when normalizing\n","filename":"test\/jdk\/java\/util\/Calendar\/Builder\/BuilderTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,16 @@\n+        \/\/ JDK-8350646: Ensure that IAE is thrown for out of range era, when\n+        \/\/ additional era is defined\n+        try {\n+            new Calendar.Builder()\n+                    .setCalendarType(\"japanese\")\n+                    .setFields(ERA, JapaneseEra.values().length + 2)\n+                    .build();\n+            System.err.println(\"Out of range era should have thrown IAE\");\n+            errors++;\n+        } catch (Exception e) {\n+            if (!(e instanceof IllegalArgumentException)) {\n+                System.err.printf(\"Out of range era threw \\\"%s\\\" instead of IAE\\n\", e);\n+                errors++;\n+            }\n+        }\n+\n","filename":"test\/jdk\/java\/util\/Calendar\/SupplementalJapaneseEraTest.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8048123 8054214 8173423\n+ * @bug 8048123 8054214 8173423 8350646\n","filename":"test\/jdk\/java\/util\/Calendar\/SupplementalJapaneseEraTestRun.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}