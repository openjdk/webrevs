{"files":[{"patch":"@@ -35,4 +35,1 @@\n-import javax.swing.JDialog;\n-import javax.swing.JPanel;\n-import javax.swing.JTextArea;\n-import javax.swing.SwingUtilities;\n+import javax.swing.JFrame;\n@@ -40,4 +37,1 @@\n-import java.awt.BorderLayout;\n-import java.awt.Dialog;\n-import java.awt.FlowLayout;\n-import java.awt.Frame;\n+import java.awt.Dimension;\n@@ -46,3 +40,0 @@\n-import java.awt.Window;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n@@ -54,0 +45,1 @@\n+import java.util.List;\n@@ -60,0 +52,2 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -67,4 +61,23 @@\n-    private static final long TIMEOUT = 5 * 60_000;\n-    private static volatile boolean testPassed = false;\n-    private static volatile boolean testFinished = false;\n-    private static volatile boolean intime = false;\n+    private static final List<MediaSizeName> ALLOWED_MEDIA_LIST = List.of(MediaSizeName.ISO_A4, MediaSizeName.NA_LETTER);\n+    private static final double DPI = 72.0;\n+    private static final double MM_PER_INCH = 2.54;\n+    private static final String INSTRUCTIONS_FORMAT = \"\"\"\n+            <html>\n+                <h3>The <b>'%s'<\/b> paper size should be used for this test.<\/h3>\n+                <div>\n+                The test checks that the media margins fetched from the printer's PPD file are correct.<br>\n+                Press the '<b>Print sample<\/b>' button to print a test page.<br>\n+                A passing test will print the page with a black rectangle along the printable area.\n+                Ensure that all sides of the rectangle are printed.<br>\n+                Expected margins: \n+                <ul>\n+                    <li>left: %.1f mm.<\/li>\n+                    <li>bottom: %.1f mm.<\/li>\n+                    <li>right: %.1f mm.<\/li>\n+                    <li>top: %.1f mm.<\/li>\n+                <\/ul>\n+                Click '<b>Pass<\/b>' button, or click '<b>Fail<\/b>' button if the test failed.\n+                <\/div>\n+            <html>\n+            \"\"\";\n+\n@@ -77,0 +90,43 @@\n+        MediaSizeName testMedia = getTestMediaSizeName();\n+        PageFormat pageFormat = createTestPageFormat(testMedia);\n+\n+        \/\/ margins: left, bottom, right, top\n+        double[] margins = new double[] {\n+                pageFormat.getImageableX(),\n+                pageFormat.getHeight() - pageFormat.getImageableHeight() - pageFormat.getImageableY(),\n+                pageFormat.getWidth() - pageFormat.getImageableWidth() - pageFormat.getImageableX(),\n+                pageFormat.getImageableY()\n+        };\n+\n+        final String instructions = INSTRUCTIONS_FORMAT.formatted(testMedia.toString(),\n+                inchesToMM(margins[0]), inchesToMM(margins[1]), inchesToMM(margins[2]), inchesToMM(margins[3]));\n+\n+        PassFailJFrame.builder()\n+                .instructions(instructions)\n+                .testUI(createTestUI(pageFormat))\n+                .columns(55)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI(PageFormat pageFormat) {\n+        final JFrame f = new JFrame(\"CUPS Printer imageable area test\");\n+        JButton printButton = new JButton(\"Print sample\");\n+        printButton.setPreferredSize(new Dimension(200, 80));\n+        printButton.addActionListener((e) -> {\n+            printButton.setEnabled(false);\n+            PrinterJob job = PrinterJob.getPrinterJob();\n+            job.setPrintable(new RectPrintable(), pageFormat);\n+            try {\n+                job.print();\n+            } catch (PrinterException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        });\n+        f.add(printButton);\n+        f.pack();\n+        return f;\n+    }\n+\n+    private static MediaSizeName getTestMediaSizeName() {\n+        \/\/Use printer's default media or one of the alloed medias\n@@ -85,1 +141,1 @@\n-                if (media == MediaSizeName.ISO_A4 || media == MediaSizeName.NA_LETTER) {\n+                if (ALLOWED_MEDIA_LIST.contains(media)) {\n@@ -94,1 +150,5 @@\n-        MediaSize ms = MediaSize.getMediaSizeForName((MediaSizeName)testMedia);\n+        return (MediaSizeName)testMedia;\n+    }\n+\n+    private static PageFormat createTestPageFormat(MediaSizeName testMedia) {\n+        MediaSize ms = MediaSize.getMediaSizeForName(testMedia);\n@@ -98,1 +158,1 @@\n-        MediaPrintableArea mpa = getMaximumMediaPrintableArea((MediaSizeName)testMedia, ms);\n+        MediaPrintableArea mpa = getMaximumMediaPrintableArea(testMedia, ms);\n@@ -103,1 +163,1 @@\n-        final PageFormat pageFormat = new PageFormat();\n+        PageFormat pageFormat = new PageFormat();\n@@ -106,6 +166,5 @@\n-\n-        paper.setSize(ms.getX(MediaSize.INCH) * 72, ms.getY(MediaSize.INCH) * 72);\n-        paper.setImageableArea(mpa.getX(MediaPrintableArea.INCH) * 72,\n-                mpa.getY(MediaPrintableArea.INCH) * 72,\n-                mpa.getWidth(MediaPrintableArea.INCH) * 72,\n-                mpa.getHeight(MediaPrintableArea.INCH) * 72);\n+        paper.setSize(ms.getX(MediaSize.INCH) * DPI, ms.getY(MediaSize.INCH) * DPI);\n+        paper.setImageableArea(mpa.getX(MediaPrintableArea.INCH) * DPI,\n+                mpa.getY(MediaPrintableArea.INCH) * DPI,\n+                mpa.getWidth(MediaPrintableArea.INCH) * DPI,\n+                mpa.getHeight(MediaPrintableArea.INCH) * DPI);\n@@ -113,113 +172,1 @@\n-\n-        \/\/ margins: left, bottom, right, top\n-        final float[] margins = new float[] {\n-                mpa.getX(MediaPrintableArea.MM),\n-                ms.getY(MediaSize.MM) - mpa.getY(MediaPrintableArea.MM) - mpa.getHeight(MediaPrintableArea.MM),\n-                ms.getX(MediaSize.MM) - mpa.getX(MediaPrintableArea.MM) - mpa.getWidth(MediaPrintableArea.MM),\n-                mpa.getY(MediaPrintableArea.MM),\n-        };\n-\n-        final String testMediaSizeName = testMedia.toString();\n-\n-        SwingUtilities.invokeLater(() -> {\n-            try {\n-                testPrint(pageFormat, testMediaSizeName, margins);\n-            } catch (PrinterException e) {\n-                fail();\n-            }\n-            testFinished = true;\n-        });\n-\n-        long time = System.currentTimeMillis() + TIMEOUT;\n-\n-        while (intime = (System.currentTimeMillis() < time)) {\n-            if (testFinished) {\n-                break;\n-            }\n-            Thread.sleep(500);\n-        }\n-\n-        closeDialogs();\n-\n-        if (!intime) {\n-            throw new Exception(\"Timeout\");\n-        }\n-\n-        if (!testPassed) {\n-            throw new Exception(\"Test failed!\");\n-        }\n-    }\n-\n-    private static void testPrint(PageFormat pageFormat, String mediaName, float[] margins) throws PrinterException {\n-        String[] instructions = {\n-                \"This test checks that the media margins \",\n-                \"fetched from the printer's PPD file are correct.\",\n-                \"The '\" + mediaName + \"' will be used for the test.\",\n-                \"Press the 'Start Test' button to print a test page.\",\n-                \"A passing test will print the page with \",\n-                \"a black rectangle along the printable area.\",\n-                \"Ensure that all sides of the rectangle are printed.\",\n-                String.format(\"Margin sizes: left %.1f mm., bottom %.1f mm., right %.1f mm., top %.1f mm.\",\n-                        margins[0], margins[1], margins[2], margins[3])\n-        };\n-\n-        String title = \"Media margins test\";\n-        final JDialog dialog = new JDialog((Frame) null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n-        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n-        textArea.setEditable(false);\n-        final JButton testButton = new JButton(\"Start Test\");\n-        final JButton passButton = new JButton(\"PASS\");\n-        passButton.setEnabled(false);\n-        passButton.addActionListener((e) -> {\n-            pass();\n-            dialog.dispose();\n-        });\n-        final JButton failButton = new JButton(\"FAIL\");\n-        failButton.setEnabled(false);\n-        failButton.addActionListener((e) -> {\n-            fail();\n-            dialog.dispose();\n-        });\n-        testButton.addActionListener((e) -> {\n-            testButton.setEnabled(false);\n-            PrinterJob job = PrinterJob.getPrinterJob();\n-            job.setPrintable(new RectPrintable(), pageFormat);\n-            try {\n-                job.print();\n-            } catch (PrinterException ex) {\n-                fail();\n-            }\n-            passButton.setEnabled(true);\n-            failButton.setEnabled(true);\n-        });\n-\n-        JPanel mainPanel = new JPanel(new BorderLayout());\n-        mainPanel.add(textArea, BorderLayout.CENTER);\n-        JPanel buttonPanel = new JPanel(new FlowLayout());\n-        buttonPanel.add(testButton);\n-        buttonPanel.add(passButton);\n-        buttonPanel.add(failButton);\n-        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n-        dialog.add(mainPanel);\n-        dialog.pack();\n-        dialog.addWindowListener(new WindowAdapter() {\n-            @Override\n-            public void windowClosing(WindowEvent e) {\n-                fail();\n-            }\n-        });\n-        dialog.setVisible(true);\n-    }\n-\n-    private static void closeDialogs() {\n-        for (Window w : Dialog.getWindows()) {\n-            w.dispose();\n-        }\n-    }\n-\n-    private static void pass() {\n-        testPassed = true;\n-    }\n-\n-    private static void fail() {\n-        testPassed = false;\n+        return pageFormat;\n@@ -255,0 +202,4 @@\n+    private static double inchesToMM(double inches) {\n+        return inches \/ MM_PER_INCH;\n+    }\n+\n","filename":"test\/jdk\/javax\/print\/CUPSPrinterImageableAreaTest.java","additions":89,"deletions":138,"binary":false,"changes":227,"status":"modified"}]}