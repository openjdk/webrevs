{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -577,1 +577,1 @@\n-                \/\/ paper printable area\n+                \/\/ paper printable area. x and y coordinates of the lower left corner, width and height\n@@ -579,2 +579,2 @@\n-                dims[(i*6)+3] = size->top;\n-                dims[(i*6)+4] = size->right;\n+                dims[(i*6)+3] = size->top - size->bottom;\n+                dims[(i*6)+4] = size->right - size->left;\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/CUPSfuncs.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,338 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BasicStroke;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Graphics;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.LayoutManager;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.print.PrintService;\n+import javax.print.PrintServiceLookup;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.Size2DSyntax;\n+import javax.print.attribute.standard.Media;\n+import javax.print.attribute.standard.MediaPrintableArea;\n+import javax.print.attribute.standard.MediaSize;\n+import javax.print.attribute.standard.MediaSizeName;\n+import javax.swing.DefaultComboBoxModel;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.SwingConstants;\n+import javax.swing.plaf.basic.BasicComboBoxRenderer;\n+\n+\/*\n+ * @test\n+ * @bug 8344119\n+ * @key printer\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary CUPSPrinter imageable area\n+ * @run main\/manual CUPSPrinterImageableAreaTest\n+ *\/\n+\n+public class CUPSPrinterImageableAreaTest {\n+\n+    private static final List<MediaSizeName> ALLOWED_MEDIA_LIST = List.of(MediaSizeName.ISO_A4, MediaSizeName.NA_LETTER);\n+    private static final double DPI = 72.0;\n+    private static final double MM_PER_INCH = 2.54;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            <html>\n+                <div>\n+                The test checks that the media margins fetched from the printer's PPD file are correct.<br>\n+                Press the '<b>Print sample<\/b>' button to print a test page.<br>\n+                Required paper size and expected margins will be shown on the print dialog.\n+                A passing test will print the page with a black rectangle along the printable area.\n+                Ensure that all sides of the rectangle are printed.<br>\n+                Click '<b>Pass<\/b>' button, or click '<b>Fail<\/b>' button if the test failed.\n+                <\/div>\n+            <html>\n+            \"\"\";\n+    private static final String PAPER_INSTRUCTIONS_FORMAT = \"\"\"\n+            <html><body style='margin: 0; text-align:left;'>\n+            Required paper size: <ul><li>%s<\/li><\/ul>\n+            Expected margins: <ul><li>left: %.1f<\/li>\n+            <li>bottom: %.1f<\/li>\n+            <li>right: %.1f<\/li>\n+            <li>top: %.1f<\/li>\n+            <\/ul><\/body><\/html>\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(createTestUI())\n+                .columns(55)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        final TestServiceData[] testServiceList = getTestServiceList();\n+        if (testServiceList.length == 0) {\n+            throw new RuntimeException(\"Print services support borderless print only\");\n+        }\n+\n+        final JFrame frame = new JFrame(\"CUPS Printer imageable area test\");\n+        JPanel pnlRoot = new JPanel();\n+        JLabel lblPrintServices = new JLabel(\"Select a print service for the test\");\n+        JComboBox<String> cbPrintServices = new JComboBox<>();\n+        JPanel pnlInstruction = new JPanel();\n+        JLabel lblInstruction = new JLabel();\n+        JButton btnPrint = new JButton(\"Print sample\");\n+\n+        lblPrintServices.setLabelFor(cbPrintServices);\n+        lblPrintServices.setAlignmentX(SwingConstants.LEFT);\n+\n+        lblInstruction.setPreferredSize(new Dimension(250, 150));\n+        pnlInstruction.setBackground(Color.white);\n+        pnlInstruction.add(lblInstruction);\n+\n+        cbPrintServices.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                int selectedIndex = cbPrintServices.getSelectedIndex();\n+                if (selectedIndex < 0) {\n+                    lblInstruction.setText(\"\");\n+                    btnPrint.setEnabled(false);\n+                    return;\n+                }\n+\n+                TestServiceData testServiceData = testServiceList[selectedIndex];\n+                PageFormat pageFormat = testServiceData.pageFormat;\n+                \/\/ margins: left, bottom, right, top\n+                double[] margins = new double[]{\n+                        pageFormat.getImageableX(),\n+                        pageFormat.getHeight() - pageFormat.getImageableHeight() - pageFormat.getImageableY(),\n+                        pageFormat.getWidth() - pageFormat.getImageableWidth() - pageFormat.getImageableX(),\n+                        pageFormat.getImageableY()\n+                };\n+                String printServiceInstructions = PAPER_INSTRUCTIONS_FORMAT.formatted(\n+                        testServiceData.mediaSizeName.toString(), inchesToMM(margins[0]),\n+                        inchesToMM(margins[1]), inchesToMM(margins[2]), inchesToMM(margins[3]));\n+                lblInstruction.setText(printServiceInstructions);\n+                btnPrint.setEnabled(true);\n+            }\n+        });\n+\n+        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();\n+        for(TestServiceData tsd : testServiceList) {\n+            model.addElement(tsd.printService.getName());\n+        }\n+        cbPrintServices.setModel(model);\n+        cbPrintServices.setSelectedIndex(-1);\n+        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();\n+        if (defaultPrintService != null && model.getIndexOf(defaultPrintService.getName()) >= 0) {\n+            cbPrintServices.setSelectedItem(defaultPrintService.getName());\n+        } else {\n+            cbPrintServices.setSelectedIndex(0);\n+        }\n+\n+        btnPrint.setPreferredSize(new Dimension(200, 80));\n+        btnPrint.addActionListener((e) -> {\n+            int selectedIndex = cbPrintServices.getSelectedIndex();\n+            if (selectedIndex < 0) {\n+                return;\n+            }\n+            btnPrint.setEnabled(false);\n+            cbPrintServices.setEnabled(false);\n+            TestServiceData testServiceData = testServiceList[selectedIndex];\n+            PrinterJob job = PrinterJob.getPrinterJob();\n+            try {\n+                job.setPrintService(testServiceData.printService);\n+                job.setPrintable(new RectPrintable(), testServiceData.pageFormat);\n+                job.print();\n+            } catch (PrinterException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        });\n+\n+        LayoutManager layout = new GridBagLayout();\n+        pnlRoot.setLayout(layout);\n+\n+        addGridBagComponent(pnlRoot, lblPrintServices, 0);\n+        addGridBagComponent(pnlRoot, cbPrintServices, 1);\n+        addGridBagComponent(pnlRoot, pnlInstruction, 2);\n+        addGridBagComponent(pnlRoot, btnPrint, 3);\n+\n+        frame.add(pnlRoot);\n+        frame.pack();\n+        frame.setResizable(false);\n+        return frame;\n+    }\n+\n+    private static TestServiceData[] getTestServiceList() {\n+        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, null);\n+        if (printServices == null || printServices.length == 0) {\n+            throw new RuntimeException(\"Print services not found\");\n+        }\n+\n+        List<TestServiceData> testServiceList = new ArrayList<>();\n+        for (PrintService ps : printServices) {\n+            try {\n+                MediaSizeName msn = getTestMediaSizeName(ps);\n+                PageFormat pf = createTestPageFormat(msn, ps);\n+                testServiceList.add(new TestServiceData(ps, msn, pf));\n+            } catch (Exception ignore) { \/\/in case if can't create required PageFormat\n+            }\n+        }\n+        return testServiceList.toArray(TestServiceData[]::new);\n+    }\n+\n+    private static MediaSizeName getTestMediaSizeName(PrintService printService) {\n+        \/\/Use printer's default media or one of the alloed medias\n+        Media testMedia = (Media) printService.getDefaultAttributeValue(Media.class);\n+        if (testMedia == null) {\n+            Media[] medias = (Media[]) printService\n+                    .getSupportedAttributeValues(Media.class, null, null);\n+            if (medias == null || medias.length == 0) {\n+                throw new RuntimeException(\"Medias not found\");\n+            }\n+            for (Media media : medias) {\n+                if (ALLOWED_MEDIA_LIST.contains(media)) {\n+                    testMedia = media;\n+                    break;\n+                }\n+            }\n+        }\n+        if (!(testMedia instanceof MediaSizeName)) {\n+            throw new RuntimeException(\"Test media not found\");\n+        }\n+        return (MediaSizeName) testMedia;\n+    }\n+\n+    private static PageFormat createTestPageFormat(MediaSizeName testMedia, PrintService printService) {\n+        MediaSize ms = MediaSize.getMediaSizeForName(testMedia);\n+        if (ms == null) {\n+            throw new RuntimeException(\"Media size not defined\");\n+        }\n+\n+        MediaPrintableArea mpa = getMaximumMediaPrintableArea(testMedia, ms, printService);\n+        if (mpa == null) {\n+            throw new RuntimeException(\"Media printable area not defined\");\n+        }\n+\n+        PageFormat pageFormat = new PageFormat();\n+        pageFormat.setOrientation(PageFormat.PORTRAIT);\n+        Paper paper = new Paper();\n+        paper.setSize(ms.getX(MediaSize.INCH) * DPI, ms.getY(MediaSize.INCH) * DPI);\n+        paper.setImageableArea(mpa.getX(MediaPrintableArea.INCH) * DPI,\n+                mpa.getY(MediaPrintableArea.INCH) * DPI,\n+                mpa.getWidth(MediaPrintableArea.INCH) * DPI,\n+                mpa.getHeight(MediaPrintableArea.INCH) * DPI);\n+        pageFormat.setPaper(paper);\n+        return pageFormat;\n+    }\n+\n+    private static MediaPrintableArea getMaximumMediaPrintableArea(MediaSizeName msn, MediaSize ms,\n+                                                                   PrintService printService) {\n+        final float paperSizeX = ms.getX(Size2DSyntax.MM);\n+        final float paperSizeY = ms.getY(Size2DSyntax.MM);\n+        final float sizeDev = 0.2f;\n+\n+        PrintRequestAttributeSet attrs = new HashPrintRequestAttributeSet();\n+        attrs.add(msn);\n+        MediaPrintableArea[] mpas = (MediaPrintableArea[]) printService\n+                .getSupportedAttributeValues(MediaPrintableArea.class, null, attrs);\n+        if (mpas == null || mpas.length == 0) {\n+            throw new RuntimeException(\"Printable area not found\");\n+        }\n+\n+        MediaPrintableArea mpa = null;\n+        for (MediaPrintableArea area : mpas) {\n+            float mpaSize = area.getWidth(MediaPrintableArea.MM) * area.getHeight(MediaPrintableArea.MM);\n+            \/\/do not use borderless printable area\n+            if (sizeDev >= Math.abs(paperSizeX - area.getWidth(MediaPrintableArea.MM)) &&\n+                    sizeDev >= Math.abs(paperSizeY - area.getHeight(MediaPrintableArea.MM))) {\n+                continue;\n+            }\n+            if (mpa == null) {\n+                mpa = area;\n+            } else if (mpaSize > (area.getWidth(MediaPrintableArea.MM) * area.getHeight(MediaPrintableArea.MM))) {\n+                mpa = area;\n+            }\n+        }\n+        return mpa;\n+    }\n+\n+    private static double inchesToMM(double inches) {\n+        return inches \/ MM_PER_INCH;\n+    }\n+\n+    private static void addGridBagComponent(JPanel p, Component c, int y) {\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.fill = GridBagConstraints.HORIZONTAL;\n+        constraints.insets = new Insets(4, 4, 4, 4);\n+        constraints.gridx = 0;\n+        constraints.gridy = y;\n+        p.add(c, constraints);\n+    }\n+\n+    private static class RectPrintable implements Printable {\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+            if (pageIndex == 0) {\n+                Graphics2D g = (Graphics2D) graphics;\n+                g.setStroke(new BasicStroke(3));\n+                g.drawRect((int) pageFormat.getImageableX(), (int) pageFormat.getImageableY(),\n+                        (int) pageFormat.getImageableWidth(), (int) pageFormat.getImageableHeight());\n+                return PAGE_EXISTS;\n+            }\n+            return NO_SUCH_PAGE;\n+        }\n+    }\n+\n+    private static class TestServiceData {\n+\n+        final PrintService printService;\n+        final MediaSizeName mediaSizeName;\n+        final PageFormat pageFormat;\n+\n+        private TestServiceData(PrintService printService, MediaSizeName mediaSizeName, PageFormat pageFormat) {\n+            this.printService = printService;\n+            this.mediaSizeName = mediaSizeName;\n+            this.pageFormat = pageFormat;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/CUPSPrinterImageableAreaTest.java","additions":338,"deletions":0,"binary":false,"changes":338,"status":"added"}]}