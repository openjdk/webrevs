{"files":[{"patch":"@@ -25,0 +25,19 @@\n+import java.awt.BasicStroke;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Graphics;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.LayoutManager;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -34,0 +53,1 @@\n+import javax.swing.DefaultComboBoxModel;\n@@ -35,0 +55,1 @@\n+import javax.swing.JComboBox;\n@@ -36,10 +57,5 @@\n-import java.awt.BasicStroke;\n-import java.awt.Dimension;\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.print.PageFormat;\n-import java.awt.print.Paper;\n-import java.awt.print.Printable;\n-import java.awt.print.PrinterException;\n-import java.awt.print.PrinterJob;\n-import java.util.List;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.SwingConstants;\n+import javax.swing.plaf.basic.BasicComboBoxRenderer;\n@@ -60,1 +76,0 @@\n-    private static PrintService printService;\n@@ -64,1 +79,1 @@\n-    private static final String INSTRUCTIONS_FORMAT = \"\"\"\n+    private static final String INSTRUCTIONS = \"\"\"\n@@ -66,1 +81,0 @@\n-                <h3>The <b>'%s'<\/b> paper size should be used for this test.<\/h3>\n@@ -70,0 +84,1 @@\n+                Required paper size and expected margins will be shown on the print dialog.\n@@ -72,7 +87,0 @@\n-                Expected margins:\n-                <ul>\n-                    <li>left: %.1f mm.<\/li>\n-                    <li>bottom: %.1f mm.<\/li>\n-                    <li>right: %.1f mm.<\/li>\n-                    <li>top: %.1f mm.<\/li>\n-                <\/ul>\n@@ -83,1 +91,9 @@\n-\n+    private static final String PAPER_INSTRUCTIONS_FORMAT = \"\"\"\n+            <html><body style='margin: 0; text-align:left;'>\n+            Required paper size: <ul><li>%s<\/li><\/ul>\n+            Expected margins: <ul><li>left: %.1f<\/li>\n+            <li>bottom: %.1f<\/li>\n+            <li>right: %.1f<\/li>\n+            <li>top: %.1f<\/li>\n+            <\/ul><\/body><\/html>\n+            \"\"\";\n@@ -86,18 +102,0 @@\n-        printService = PrintServiceLookup.lookupDefaultPrintService();\n-        if (printService == null) {\n-            throw new RuntimeException(\"Print service not found\");\n-        }\n-        MediaSizeName testMedia = getTestMediaSizeName();\n-        PageFormat pageFormat = createTestPageFormat(testMedia);\n-\n-        \/\/ margins: left, bottom, right, top\n-        double[] margins = new double[] {\n-                pageFormat.getImageableX(),\n-                pageFormat.getHeight() - pageFormat.getImageableHeight() - pageFormat.getImageableY(),\n-                pageFormat.getWidth() - pageFormat.getImageableWidth() - pageFormat.getImageableX(),\n-                pageFormat.getImageableY()\n-        };\n-\n-        final String instructions = INSTRUCTIONS_FORMAT.formatted(testMedia.toString(),\n-                inchesToMM(margins[0]), inchesToMM(margins[1]), inchesToMM(margins[2]), inchesToMM(margins[3]));\n-\n@@ -105,2 +103,2 @@\n-                .instructions(instructions)\n-                .testUI(createTestUI(pageFormat))\n+                .instructions(INSTRUCTIONS)\n+                .testUI(createTestUI())\n@@ -112,6 +110,70 @@\n-    private static JFrame createTestUI(PageFormat pageFormat) {\n-        final JFrame f = new JFrame(\"CUPS Printer imageable area test\");\n-        JButton printButton = new JButton(\"Print sample\");\n-        printButton.setPreferredSize(new Dimension(200, 80));\n-        printButton.addActionListener((e) -> {\n-            printButton.setEnabled(false);\n+    private static JFrame createTestUI() {\n+        final TestServiceData[] testServiceList = getTestServiceList();\n+        if (testServiceList.length == 0) {\n+            throw new RuntimeException(\"Print services support borderless print only\");\n+        }\n+\n+        final JFrame frame = new JFrame(\"CUPS Printer imageable area test\");\n+        JPanel pnlRoot = new JPanel();\n+        JLabel lblPrintServices = new JLabel(\"Select a print service for the test\");\n+        JComboBox<String> cbPrintServices = new JComboBox<>();\n+        JPanel pnlInstruction = new JPanel();\n+        JLabel lblInstruction = new JLabel();\n+        JButton btnPrint = new JButton(\"Print sample\");\n+\n+        lblPrintServices.setLabelFor(cbPrintServices);\n+        lblPrintServices.setAlignmentX(SwingConstants.LEFT);\n+\n+        lblInstruction.setPreferredSize(new Dimension(250, 150));\n+        pnlInstruction.setBackground(Color.white);\n+        pnlInstruction.add(lblInstruction);\n+\n+        cbPrintServices.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                int selectedIndex = cbPrintServices.getSelectedIndex();\n+                if (selectedIndex < 0) {\n+                    lblInstruction.setText(\"\");\n+                    btnPrint.setEnabled(false);\n+                    return;\n+                }\n+\n+                TestServiceData testServiceData = testServiceList[selectedIndex];\n+                PageFormat pageFormat = testServiceData.pageFormat;\n+                \/\/ margins: left, bottom, right, top\n+                double[] margins = new double[]{\n+                        pageFormat.getImageableX(),\n+                        pageFormat.getHeight() - pageFormat.getImageableHeight() - pageFormat.getImageableY(),\n+                        pageFormat.getWidth() - pageFormat.getImageableWidth() - pageFormat.getImageableX(),\n+                        pageFormat.getImageableY()\n+                };\n+                String printServiceInstructions = PAPER_INSTRUCTIONS_FORMAT.formatted(\n+                        testServiceData.mediaSizeName.toString(), inchesToMM(margins[0]),\n+                        inchesToMM(margins[1]), inchesToMM(margins[2]), inchesToMM(margins[3]));\n+                lblInstruction.setText(printServiceInstructions);\n+                btnPrint.setEnabled(true);\n+            }\n+        });\n+\n+        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();\n+        for(TestServiceData tsd : testServiceList) {\n+            model.addElement(tsd.printService.getName());\n+        }\n+        cbPrintServices.setModel(model);\n+        cbPrintServices.setSelectedIndex(-1);\n+        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();\n+        if (defaultPrintService != null && model.getIndexOf(defaultPrintService.getName()) >= 0) {\n+            cbPrintServices.setSelectedItem(defaultPrintService.getName());\n+        } else {\n+            cbPrintServices.setSelectedIndex(0);\n+        }\n+\n+        btnPrint.setPreferredSize(new Dimension(200, 80));\n+        btnPrint.addActionListener((e) -> {\n+            int selectedIndex = cbPrintServices.getSelectedIndex();\n+            if (selectedIndex < 0) {\n+                return;\n+            }\n+            btnPrint.setEnabled(false);\n+            cbPrintServices.setEnabled(false);\n+            TestServiceData testServiceData = testServiceList[selectedIndex];\n@@ -119,1 +181,0 @@\n-            job.setPrintable(new RectPrintable(), pageFormat);\n@@ -121,0 +182,2 @@\n+                job.setPrintService(testServiceData.printService);\n+                job.setPrintable(new RectPrintable(), testServiceData.pageFormat);\n@@ -126,3 +189,13 @@\n-        f.add(printButton);\n-        f.pack();\n-        return f;\n+\n+        LayoutManager layout = new GridBagLayout();\n+        pnlRoot.setLayout(layout);\n+\n+        addGridBagComponent(pnlRoot, lblPrintServices, 0);\n+        addGridBagComponent(pnlRoot, cbPrintServices, 1);\n+        addGridBagComponent(pnlRoot, pnlInstruction, 2);\n+        addGridBagComponent(pnlRoot, btnPrint, 3);\n+\n+        frame.add(pnlRoot);\n+        frame.pack();\n+        frame.setResizable(false);\n+        return frame;\n@@ -131,1 +204,19 @@\n-    private static MediaSizeName getTestMediaSizeName() {\n+    private static TestServiceData[] getTestServiceList() {\n+        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, null);\n+        if (printServices == null || printServices.length == 0) {\n+            throw new RuntimeException(\"Print services not found\");\n+        }\n+\n+        List<TestServiceData> testServiceList = new ArrayList<>();\n+        for (PrintService ps : printServices) {\n+            try {\n+                MediaSizeName msn = getTestMediaSizeName(ps);\n+                PageFormat pf = createTestPageFormat(msn, ps);\n+                testServiceList.add(new TestServiceData(ps, msn, pf));\n+            } catch (Exception ignore) { \/\/in case if can't create required PageFormat\n+            }\n+        }\n+        return testServiceList.toArray(TestServiceData[]::new);\n+    }\n+\n+    private static MediaSizeName getTestMediaSizeName(PrintService printService) {\n@@ -140,1 +231,1 @@\n-            for (Media media: medias) {\n+            for (Media media : medias) {\n@@ -150,1 +241,1 @@\n-        return (MediaSizeName)testMedia;\n+        return (MediaSizeName) testMedia;\n@@ -153,1 +244,1 @@\n-    private static PageFormat createTestPageFormat(MediaSizeName testMedia) {\n+    private static PageFormat createTestPageFormat(MediaSizeName testMedia, PrintService printService) {\n@@ -158,1 +249,2 @@\n-        MediaPrintableArea mpa = getMaximumMediaPrintableArea(testMedia, ms);\n+\n+        MediaPrintableArea mpa = getMaximumMediaPrintableArea(testMedia, ms, printService);\n@@ -175,3 +267,6 @@\n-    private static MediaPrintableArea getMaximumMediaPrintableArea(MediaSizeName msn, MediaSize ms) {\n-        final float paperSize = ms.getX(Size2DSyntax.MM) * ms.getY(Size2DSyntax.MM);\n-        final float sizeDev = 0.2f * 0.2f;\n+    private static MediaPrintableArea getMaximumMediaPrintableArea(MediaSizeName msn, MediaSize ms,\n+                                                                   PrintService printService) {\n+        final float paperSizeX = ms.getX(Size2DSyntax.MM);\n+        final float paperSizeY = ms.getY(Size2DSyntax.MM);\n+        final float sizeDev = 0.2f;\n+\n@@ -187,1 +282,1 @@\n-        for (MediaPrintableArea area: mpas) {\n+        for (MediaPrintableArea area : mpas) {\n@@ -190,1 +285,2 @@\n-            if (sizeDev >= Math.abs(paperSize - mpaSize)) {\n+            if (sizeDev >= Math.abs(paperSizeX - area.getWidth(MediaPrintableArea.MM)) &&\n+                    sizeDev >= Math.abs(paperSizeY - area.getHeight(MediaPrintableArea.MM))) {\n@@ -206,0 +302,9 @@\n+    private static void addGridBagComponent(JPanel p, Component c, int y) {\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.fill = GridBagConstraints.HORIZONTAL;\n+        constraints.insets = new Insets(4, 4, 4, 4);\n+        constraints.gridx = 0;\n+        constraints.gridy = y;\n+        p.add(c, constraints);\n+    }\n+\n@@ -213,2 +318,2 @@\n-                g.drawRect((int)pageFormat.getImageableX(), (int)pageFormat.getImageableY(),\n-                        (int)pageFormat.getImageableWidth(), (int)pageFormat.getImageableHeight());\n+                g.drawRect((int) pageFormat.getImageableX(), (int) pageFormat.getImageableY(),\n+                        (int) pageFormat.getImageableWidth(), (int) pageFormat.getImageableHeight());\n@@ -221,0 +326,12 @@\n+    private static class TestServiceData {\n+\n+        final PrintService printService;\n+        final MediaSizeName mediaSizeName;\n+        final PageFormat pageFormat;\n+\n+        private TestServiceData(PrintService printService, MediaSizeName mediaSizeName, PageFormat pageFormat) {\n+            this.printService = printService;\n+            this.mediaSizeName = mediaSizeName;\n+            this.pageFormat = pageFormat;\n+        }\n+    }\n","filename":"test\/jdk\/javax\/print\/CUPSPrinterImageableAreaTest.java","additions":180,"deletions":63,"binary":false,"changes":243,"status":"modified"}]}