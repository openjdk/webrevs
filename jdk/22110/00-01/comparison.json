{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -239,0 +239,2 @@\n+            h = (float)(pageSizes[i*6+3]\/PRINTER_DPI);\n+            w = (float)(pageSizes[i*6+4]\/PRINTER_DPI);\n@@ -240,2 +242,0 @@\n-            w = (float)(pageSizes[i*6+4]\/PRINTER_DPI) - x;\n-            h = (float)(pageSizes[i*6+3]\/PRINTER_DPI) - y;\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/CUPSPrinter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -577,1 +577,1 @@\n-                \/\/ paper printable area\n+                \/\/ paper printable area. x and y coordinates of the lower left corner, width and height\n@@ -579,2 +579,2 @@\n-                dims[(i*6)+3] = size->top;\n-                dims[(i*6)+4] = size->right;\n+                dims[(i*6)+3] = size->top - size->bottom;\n+                dims[(i*6)+4] = size->right - size->left;\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/CUPSfuncs.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.print.PrintService;\n+import javax.print.PrintServiceLookup;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.Size2DSyntax;\n+import javax.print.attribute.standard.Media;\n+import javax.print.attribute.standard.MediaPrintableArea;\n+import javax.print.attribute.standard.MediaSize;\n+import javax.print.attribute.standard.MediaSizeName;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import java.awt.BasicStroke;\n+import java.awt.BorderLayout;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Window;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 8344119\n+ * @key printer\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n+ * @summary CUPSPrinter imageable area\n+ * @run main\/manual CUPSPrinterImageableAreaTest\n+ *\/\n+\n+public class CUPSPrinterImageableAreaTest {\n+\n+    private static PrintService printService;\n+    private static final long TIMEOUT = 5 * 60_000;\n+    private static volatile boolean testPassed = false;\n+    private static volatile boolean testFinished = false;\n+    private static volatile boolean intime = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        printService = PrintServiceLookup.lookupDefaultPrintService();\n+        if (printService == null) {\n+            throw new RuntimeException(\"Print service not found\");\n+        }\n+        Media testMedia = (Media) printService.getDefaultAttributeValue(Media.class);\n+        if (testMedia == null) {\n+            Media[] medias = (Media[]) printService\n+                    .getSupportedAttributeValues(Media.class, null, null);\n+            if (medias == null || medias.length == 0) {\n+                throw new RuntimeException(\"Medias not found\");\n+            }\n+            for (Media media: medias) {\n+                if (media == MediaSizeName.ISO_A4 || media == MediaSizeName.NA_LETTER) {\n+                    testMedia = media;\n+                    break;\n+                }\n+            }\n+        }\n+        if (!(testMedia instanceof MediaSizeName)) {\n+            throw new RuntimeException(\"Test media not found\");\n+        }\n+        MediaSize ms = MediaSize.getMediaSizeForName((MediaSizeName)testMedia);\n+        if (ms == null) {\n+            throw new RuntimeException(\"Media size not defined\");\n+        }\n+        MediaPrintableArea mpa = getMaximumMediaPrintableArea((MediaSizeName)testMedia, ms);\n+        if (mpa == null) {\n+            throw new RuntimeException(\"Media printable area not defined\");\n+        }\n+\n+        PageFormat pageFormat = new PageFormat();\n+        pageFormat.setOrientation(PageFormat.PORTRAIT);\n+        Paper paper = new Paper();\n+\n+        paper.setSize(ms.getX(MediaSize.INCH) * 72, ms.getY(MediaSize.INCH) * 72);\n+        paper.setImageableArea(mpa.getX(MediaPrintableArea.INCH) * 72,\n+                mpa.getY(MediaPrintableArea.INCH) * 72,\n+                mpa.getWidth(MediaPrintableArea.INCH) * 72,\n+                mpa.getHeight(MediaPrintableArea.INCH) * 72);\n+        pageFormat.setPaper(paper);\n+\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                testPrint(pageFormat);\n+            } catch (PrinterException e) {\n+                fail();\n+            }\n+            testFinished = true;\n+        });\n+\n+        long time = System.currentTimeMillis() + TIMEOUT;\n+\n+        while (intime = (System.currentTimeMillis() < time)) {\n+            if (testFinished) {\n+                break;\n+            }\n+            Thread.sleep(500);\n+        }\n+\n+        closeDialogs();\n+\n+        if (!intime) {\n+            throw new Exception(\"Timeout\");\n+        }\n+\n+        if (!testPassed) {\n+            throw new Exception(\"Test failed!\");\n+        }\n+    }\n+\n+    private static void testPrint(PageFormat pageFormat) throws PrinterException {\n+        String[] instructions = {\n+                \"This test checks that the media margins \",\n+                \"fetched from the printer's PPD file are correct.\",\n+                \"Press the 'Start Test' button to print a test page.\",\n+                \"A passing test will print the page with \", +\n+                \"a black rectangle along the printable margins.\",\n+                \"Ensure that all borders are printed (top, left, bottom, right).\"\n+        };\n+\n+        String title = \"Media margins test\";\n+        final JDialog dialog = new JDialog((Frame) null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n+        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n+        textArea.setEditable(false);\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            pass();\n+            dialog.dispose();\n+        });\n+        final JButton failButton = new JButton(\"FAIL\");\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            fail();\n+            dialog.dispose();\n+        });\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            PrinterJob job = PrinterJob.getPrinterJob();\n+            job.setPrintable(new RectPrintable(), pageFormat);\n+            try {\n+                job.print();\n+            } catch (PrinterException ex) {\n+                fail();\n+            }\n+            passButton.setEnabled(true);\n+            failButton.setEnabled(true);\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                fail();\n+            }\n+        });\n+        dialog.setVisible(true);\n+    }\n+\n+    private static void closeDialogs() {\n+        for (Window w : Dialog.getWindows()) {\n+            w.dispose();\n+        }\n+    }\n+\n+    private static void pass() {\n+        testPassed = true;\n+    }\n+\n+    private static void fail() {\n+        testPassed = false;\n+    }\n+\n+    private static MediaPrintableArea getMaximumMediaPrintableArea(MediaSizeName msn, MediaSize ms) {\n+        final float paperSize = ms.getX(Size2DSyntax.MM) * ms.getY(Size2DSyntax.MM);\n+        final float sizeDev = 0.2f * 0.2f;\n+        PrintRequestAttributeSet attrs = new HashPrintRequestAttributeSet();\n+        attrs.add(msn);\n+        MediaPrintableArea[] mpas = (MediaPrintableArea[]) printService\n+                .getSupportedAttributeValues(MediaPrintableArea.class, null, attrs);\n+        if (mpas == null || mpas.length == 0) {\n+            throw new RuntimeException(\"Printable area not found\");\n+        }\n+\n+        MediaPrintableArea mpa = null;\n+        for (MediaPrintableArea area: mpas) {\n+            float mpaSize = area.getWidth(MediaPrintableArea.MM) * area.getHeight(MediaPrintableArea.MM);\n+            \/\/do not use borderless printable area\n+            if (sizeDev >= Math.abs(paperSize - mpaSize)) {\n+                continue;\n+            }\n+            if (mpa == null) {\n+                mpa = area;\n+            } else if (mpaSize > (area.getWidth(MediaPrintableArea.MM) * area.getHeight(MediaPrintableArea.MM))) {\n+                mpa = area;\n+            }\n+        }\n+        return mpa;\n+    }\n+\n+    private static class RectPrintable implements Printable {\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+            if (pageIndex == 0) {\n+                Graphics2D g = (Graphics2D) graphics;\n+                g.setStroke(new BasicStroke(3));\n+                g.drawRect((int)pageFormat.getImageableX(), (int)pageFormat.getImageableY(),\n+                        (int)pageFormat.getImageableWidth(), (int)pageFormat.getImageableHeight());\n+                return PAGE_EXISTS;\n+            }\n+            return NO_SUCH_PAGE;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/print\/CUPSPrinterImageableAreaTest.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"}]}