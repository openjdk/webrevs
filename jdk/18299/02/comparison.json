{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,15 @@\n-\/**\n+import java.awt.Frame;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterJob;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.print.PrintService;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.swing.BorderFactory;\n+import javax.swing.Box;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n@@ -28,1 +42,5 @@\n- * @run main\/othervm\/manual -Djava.security.manager=allow SecurityDialogTest\n+ * @summary tests native and cross-platform page and print dialog\n+ *          when security manager is installed\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual\/othervm -Djava.security.manager=allow SecurityDialogTest\n@@ -30,8 +48,0 @@\n-\n-import java.awt.* ;\n-import java.awt.print.* ;\n-import java.io.*;\n-import java.security.*;\n-import javax.print.*;\n-import javax.print.attribute.*;\n-\n@@ -39,0 +49,19 @@\n+    private static final String INSTRUCTIONS =\n+            \"This test brings up a native and cross-platform page and print dialogs.\\n\" +\n+            \"\\n\" +\n+            \"If the dialog has an option to save to file, the option ought \" +\n+            \"to be disabled.\\n\" +\n+            \"\\n\" +\n+            \"Press the Pass button if the \\\"Print to file\\\" option was disabled in\\n\" +\n+            \"all the dialogs where it was present.\\n\" +\n+            \"Otherwise, press the Fail button.\\n\" +\n+            \"\\n\" +\n+            \"The dialogs should be displayed even when \" +\n+            \"there is no queuePrintJob permission.\";\n+\n+    private static JLabel dialogType;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new RuntimeException(\"Printer not configured or available.\");\n+        }\n@@ -40,0 +69,6 @@\n+        PassFailJFrame passFailJFrame =  PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .splitUIBottom(SecurityDialogTest::createTestUI)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -41,16 +76,1 @@\n-    public static void main ( String args[] ) {\n-\n-        String[] instructions =\n-           {\n-            \"You must have a printer available to perform this test.\",\n-            \"This test brings up a native and cross-platform page and\",\n-            \"print dialogs.\",\n-            \"The dialogs should be displayed even when \",\n-            \"there is no queuePrintJob permission.\",\n-            \"If the dialog has an option to save to file, the option ought\",\n-            \"to be disabled if there is no read\/write file permission.\",\n-            \"You should test this by trying different policy files.\"\n-          };\n-\n-         Sysout.createDialog( );\n-         Sysout.printInstructions( instructions );\n+        displayDialogs();\n@@ -58,1 +78,1 @@\n-        SecurityDialogTest pjc = new SecurityDialogTest() ;\n+        passFailJFrame.awaitAndCheck();\n@@ -61,0 +81,2 @@\n+    private static JComponent createTestUI() {\n+        dialogType = new JLabel(\" \");\n@@ -62,41 +84,7 @@\n-  public SecurityDialogTest() {\n-\n-      PrinterJob pj = PrinterJob.getPrinterJob() ;\n-\n-      \/\/ Install a security manager which does not allow reading and\n-      \/\/ writing of files.\n-      \/\/PrintTestSecurityManager ptsm = new PrintTestSecurityManager();\n-      SecurityManager ptsm = new SecurityManager();\n-\n-      try {\n-          System.setSecurityManager(ptsm);\n-      } catch (SecurityException e) {\n-          System.out.println(\"Could not run test - security exception\");\n-      }\n-\n-      try {\n-          PrintJob pjob = Toolkit.getDefaultToolkit().getPrintJob(new Frame(), \"Printing\", null, null);\n-          Sysout.println(\"If the value of pjob is null, the test fails.\\n\");\n-          Sysout.println(\"        pjob = \"+pjob);\n-      } catch (SecurityException e) {\n-      }\n-\n-      PrintService[] services = PrinterJob.lookupPrintServices();\n-      for (int i=0; i<services.length; i++) {\n-          System.out.println(\"SecurityDialogTest service \"+i+\" : \"+services[i]);\n-      }\n-\n-      PrintService defservice = pj.getPrintService();\n-      System.out.println(\"SecurityDialogTest default service : \"+defservice);\n-\n-      System.out.println(\"SecurityDialogTest native PageDialog \");\n-      PageFormat pf1 = pj.pageDialog(new PageFormat());\n-\n-      System.out.println(\"SecurityDialogTest swing PageDialog \");\n-      PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet();\n-      PageFormat pf2 = pj.pageDialog(attributes);\n-\n-      \/\/ With the security manager installed, save to file should now\n-      \/\/ be denied.\n-      System.out.println(\"SecurityDialogTest native printDialog \");\n-      pj.printDialog();\n+        Box main = Box.createVerticalBox();\n+        main.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));\n+        main.add(new JLabel(\"Current Dialog:\"));\n+        main.add(Box.createVerticalStrut(4));\n+        main.add(dialogType);\n+        return main;\n+    }\n@@ -104,3 +92,3 @@\n-      System.out.println(\"SecurityDialogTest swing printDialog \");\n-      pj.printDialog(attributes);\n-  }\n+    private static void displayDialogs()\n+            throws InterruptedException, InvocationTargetException {\n+        final PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -108,0 +96,4 @@\n+        \/\/ Install a security manager which does not allow reading and\n+        \/\/ writing of files.\n+        SecurityManager ptsm = new SecurityManager();\n+        System.setSecurityManager(ptsm);\n@@ -109,4 +101,3 @@\n-    class PrintTestSecurityManager extends SecurityManager {\n-        public void checkPackageAccess(String pkg) {\n-        }\n-        public void checkPropertyAccess(String key) {\n+        PrintService[] services = PrinterJob.lookupPrintServices();\n+        for (int i = 0; i < services.length; i++) {\n+            System.out.println(\"SecurityDialogTest service \" + i + \" : \" + services[i]);\n@@ -115,1 +106,1 @@\n-    }\n+        System.out.println(\"SecurityDialogTest default service : \" + pj.getPrintService());\n@@ -117,20 +108,2 @@\n-}\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+        setDialogType(\"Native Page Dialog\");\n+        pj.pageDialog(new PageFormat());\n@@ -138,0 +111,3 @@\n+        setDialogType(\"Swing Page Dialog\");\n+        PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet();\n+        pj.pageDialog(attributes);\n@@ -139,4 +115,4 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+        \/\/ With the security manager installed, save to file should now\n+        \/\/ be denied.\n+        setDialogType(\"Native Print Dialog\");\n+        pj.printDialog();\n@@ -144,0 +120,2 @@\n+        setDialogType(\"Swing Print Dialog\");\n+        pj.printDialog(attributes);\n@@ -145,3 +123,1 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+        setDialogType(\"Test completed\");\n@@ -150,78 +126,3 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+    private static void setDialogType(String type)\n+            throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> dialogType.setText(type));\n@@ -229,2 +130,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/SecurityDialogTest.java","additions":84,"deletions":184,"binary":false,"changes":268,"status":"modified"}]}