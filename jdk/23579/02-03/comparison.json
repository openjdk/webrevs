{"files":[{"patch":"@@ -6230,1 +6230,1 @@\n-  \/\/ LZCNT = 32 - (biased_exp - 127)\n+  \/\/ LZCNT = 31 - (biased_exp - 127)\n@@ -6237,7 +6237,4 @@\n-  \/\/ As Â±2^24 is the range in which all contiguous integers can be represented by floats, special handling has to be\n-  \/\/ done to avoid losing precision by potentially rounding up when outside of this range. To avoid that, we shift the\n-  \/\/ input by 24 bits, to isolate any high bits that are set. The source is then masked with the inverse of this shift,\n-  \/\/ to remove low set bits. This removes a corresponding amount of low bits as there are set bits above position 24.\n-  \/\/ As the rounding issue only occurs when the high bits are all set to 1, this prevents the floating point representation\n-  \/\/ from overflowing while not changing the output as the high bits are kept intact.\n-  vpsrld(xtmp2, src, 24, vec_enc);\n+  \/\/ Remove the bit to the right of the highest set bit ensuring that the conversion to float cannot round up to a higher\n+  \/\/ power of 2, which has a higher exponent than the input. This transformation is valid as only the highest set bit\n+  \/\/ contributes to the leading number of zeros.\n+  vpsrld(xtmp2, src, 1, vec_enc);\n@@ -6256,1 +6253,1 @@\n-  \/\/ Exponent = Exponent  + 1\n+  \/\/ Exponent_plus_one = Exponent + 1\n@@ -6269,1 +6266,1 @@\n-  \/\/ LZCNT = 32 - exponent\n+  \/\/ LZCNT = 32 - exponent_plus_one\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8349637\n+ * @summary Ensure that vectorization of numberOfLeadingZeros and numberOfTrailingZeros outputs correct values\n+ * @library \/test\/lib \/\n+ * @run main\/othervm compiler.vectorization.TestVectorZeroCount\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import java.util.Random;\n+\n+import jdk.test.lib.Utils;\n+\n+public class TestVectorZeroCount {\n+    private static final int SIZE = 1024;\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    private static final int[] INT_VALUES = new int[SIZE];\n+    private static final int[] INT_EXPECTED_LEADING = new int[SIZE];\n+    private static final int[] INT_RESULT_LEADING = new int[SIZE];\n+    private static final int[] INT_EXPECTED_TRAILING = new int[SIZE];\n+    private static final int[] INT_RESULT_TRAILING = new int[SIZE];\n+\n+    private static final long[] LONG_VALUES = new long[SIZE];\n+    private static final long[] LONG_EXPECTED_LEADING = new long[SIZE];\n+    private static final long[] LONG_RESULT_LEADING = new long[SIZE];\n+    private static final long[] LONG_EXPECTED_TRAILING = new long[SIZE];\n+    private static final long[] LONG_RESULT_TRAILING = new long[SIZE];\n+\n+    private static int intCounter = Integer.MIN_VALUE;\n+    private static int longIterations = 100_000_000;\n+\n+    public static boolean testInt() {\n+        boolean done = false;\n+\n+        \/\/ Non-vectorized loop as baseline (not vectorized because source array is initialized)\n+        for (int i = 0; i < SIZE; ++i) {\n+            INT_VALUES[i] = intCounter++;\n+            if (intCounter == Integer.MAX_VALUE) {\n+                done = true;\n+            }\n+            INT_EXPECTED_LEADING[i] = Integer.numberOfLeadingZeros(INT_VALUES[i]);\n+            INT_EXPECTED_TRAILING[i] = Integer.numberOfTrailingZeros(INT_VALUES[i]);\n+        }\n+        \/\/ Vectorized loop\n+        for (int i = 0; i < SIZE; ++i) {\n+            INT_RESULT_LEADING[i] = Integer.numberOfLeadingZeros(INT_VALUES[i]);\n+        }\n+        for (int i = 0; i < SIZE; ++i) {\n+            INT_RESULT_TRAILING[i] = Integer.numberOfTrailingZeros(INT_VALUES[i]);\n+        }\n+\n+        \/\/ Compare results\n+        for (int i = 0; i < SIZE; ++i) {\n+            if (INT_RESULT_LEADING[i] != INT_EXPECTED_LEADING[i]) {\n+                throw new RuntimeException(\"Unexpected result for Integer.numberOfLeadingZeros(\" + INT_VALUES[i] + \"): \" + INT_RESULT_LEADING[i] + \", expected \" + INT_EXPECTED_LEADING[i]);\n+            }\n+            if (INT_RESULT_TRAILING[i] != INT_EXPECTED_TRAILING[i]) {\n+                throw new RuntimeException(\"Unexpected result for Integer.numberOfTrailingZeros(\" + INT_VALUES[i] + \"): \" + INT_RESULT_TRAILING[i] + \", expected \" + INT_EXPECTED_TRAILING[i]);\n+            }\n+        }\n+        return done;\n+    }\n+\n+    public static boolean testLong() {\n+        boolean done = false;\n+\n+        \/\/ Non-vectorized loop as baseline (not vectorized because source array is initialized)\n+        for (int i = 0; i < SIZE; ++i) {\n+            \/\/ Use random values because the long range is too large to iterate over it\n+            LONG_VALUES[i] = RANDOM.nextLong();\n+            if (longIterations-- == 0) {\n+                done = true;\n+            }\n+            LONG_EXPECTED_LEADING[i] = Long.numberOfLeadingZeros(LONG_VALUES[i]);\n+            LONG_EXPECTED_TRAILING[i] = Long.numberOfTrailingZeros(LONG_VALUES[i]);\n+        }\n+        \/\/ Vectorized loop\n+        for (int i = 0; i < SIZE; ++i) {\n+            LONG_RESULT_LEADING[i] = Long.numberOfLeadingZeros(LONG_VALUES[i]);\n+        }\n+        for (int i = 0; i < SIZE; ++i) {\n+            LONG_RESULT_TRAILING[i] = Long.numberOfTrailingZeros(LONG_VALUES[i]);\n+        }\n+\n+        \/\/ Compare results\n+        for (int i = 0; i < SIZE; ++i) {\n+            if (LONG_RESULT_LEADING[i] != LONG_EXPECTED_LEADING[i]) {\n+                throw new RuntimeException(\"Unexpected result for Long.numberOfLeadingZeros(\" + LONG_VALUES[i] + \"): \" + LONG_RESULT_LEADING[i] + \", expected \" + LONG_EXPECTED_LEADING[i]);\n+            }\n+            if (LONG_RESULT_TRAILING[i] != LONG_EXPECTED_TRAILING[i]) {\n+                throw new RuntimeException(\"Unexpected result for Long.numberOfTrailingZeros(\" + LONG_VALUES[i] + \"): \" + LONG_RESULT_TRAILING[i] + \", expected \" + LONG_EXPECTED_TRAILING[i]);\n+            }\n+        }\n+        return done;\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Run twice to make sure compiled code is used from the beginning\n+        for (int i = 0; i < 2; ++i) {\n+            while (!testLong()) ;\n+            while (!testInt()) ;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestVectorZeroCount.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}