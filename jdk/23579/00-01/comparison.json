{"files":[{"patch":"@@ -6237,4 +6237,4 @@\n-  \/\/ As 2^24 is the largest possible integer that can be exactly represented by a float value, special handling has to be\n-  \/\/ done to avoid losing precision by potentially rounding up. To avoid that, we construct a mask to remove low set bits\n-  \/\/ when the number has the upper 8 bits set. This is a valid transformation as it only removes low bits, and keeps the high bits intact.\n-  vpxor(xtmp2, xtmp2, xtmp2, vec_enc);\n+  \/\/ As Â±2^24 is the range in which all contiguous integers can be represented by floats, special handling has to be\n+  \/\/ done to avoid losing precision by potentially rounding up when outside of this range. To avoid that, we construct a\n+  \/\/ mask to remove low set bits when the number has the upper 8 bits set. This is a valid transformation as it only removes\n+  \/\/ low bits, and keeps the high bits intact.\n@@ -6242,1 +6242,1 @@\n-  vpandn(src, xtmp2, src, vec_enc);\n+  vpandn(xtmp3, xtmp2, src, vec_enc);\n@@ -6245,1 +6245,1 @@\n-  vcvtdq2ps(dst, src, vec_enc);\n+  vcvtdq2ps(dst, xtmp3, vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.test.lib.Utils;\n@@ -45,1 +46,1 @@\n-    private static final int[] SPECIAL = { 0x01FFFFFF, 0x03FFFFFE, 0x07FFFFFC, 0x0FFFFFF8, 0x1FFFFFF0, 0x3FFFFFE0 };\n+    private static final int[] SPECIAL = { 0x01FFFFFF, 0x03FFFFFE, 0x07FFFFFC, 0x0FFFFFF8, 0x1FFFFFF0, 0x3FFFFFE0, 0xFFFFFFFF };\n@@ -62,1 +63,1 @@\n-        rng = new Random();\n+        rng = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestNumberOfContinuousZeros.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}