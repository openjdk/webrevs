{"files":[{"patch":"@@ -6238,3 +6238,5 @@\n-  \/\/ done to avoid losing precision by potentially rounding up when outside of this range. To avoid that, we construct a\n-  \/\/ mask to remove low set bits when the number has the upper 8 bits set. This is a valid transformation as it only removes\n-  \/\/ low bits, and keeps the high bits intact.\n+  \/\/ done to avoid losing precision by potentially rounding up when outside of this range. To avoid that, we shift the\n+  \/\/ input by 24 bits, to isolate any high bits that are set. The source is then masked with the inverse of this shift,\n+  \/\/ to remove low set bits. This removes a corresponding amount of low bits as there are set bits above position 24.\n+  \/\/ As the rounding issue only occurs when the high bits are all set to 1, this prevents the floating point representation\n+  \/\/ from overflowing while not changing the output as the high bits are kept intact.\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}