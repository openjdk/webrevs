{"files":[{"patch":"@@ -6237,0 +6237,7 @@\n+  \/\/ As 2^24 is the largest possible integer that can be exactly represented by a float value, special handling has to be\n+  \/\/ done to avoid losing precision by potentially rounding up. To avoid that, we construct a mask to remove low set bits\n+  \/\/ when the number has the upper 8 bits set. This is a valid transformation as it only removes low bits, and keeps the high bits intact.\n+  vpxor(xtmp2, xtmp2, xtmp2, vec_enc);\n+  vpsrld(xtmp2, src, 24, vec_enc);\n+  vpandn(src, xtmp2, src, vec_enc);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +27,1 @@\n+* @bug 8297172 8331993 8349637\n@@ -43,0 +45,1 @@\n+    private static final int[] SPECIAL = { 0x01FFFFFF, 0x03FFFFFE, 0x07FFFFFC, 0x0FFFFFF8, 0x1FFFFFF0, 0x3FFFFFE0 };\n@@ -59,1 +62,1 @@\n-        rng = new Random(42);\n+        rng = new Random();\n@@ -122,0 +125,38 @@\n+\n+    @Setup\n+    static Object[] setupSpecialIntArray() {\n+        int[] res = new int[LEN];\n+\n+        for (int i = 0; i < LEN; i++) {\n+            res[i] = SPECIAL[i % SPECIAL.length];\n+        }\n+\n+        return new Object[] { res };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_VI, \"> 0\"})\n+    @Arguments(setup = \"setupSpecialIntArray\")\n+    public Object[] testSpecialIntLeadingZeros(int[] ints) {\n+        int[] res = new int[LEN];\n+\n+        for (int i = 0; i < LEN; ++i) {\n+            res[i] = Integer.numberOfLeadingZeros(ints[i]);\n+        }\n+\n+        return new Object[] { ints, res };\n+    }\n+\n+    @Check(test = \"testSpecialIntLeadingZeros\")\n+    public void checkSpecialIntLeadingZeros(Object[] vals) {\n+        int[] in = (int[]) vals[0];\n+        int[] out = (int[]) vals[1];\n+\n+        for (int i = 0; i < LEN; ++i) {\n+            int value = Integer.numberOfLeadingZeros(in[i]);\n+\n+            if (out[i] != value) {\n+                throw new IllegalStateException(\"Expected lzcnt(\" + in[i] + \") to be \" + value + \" but got \" + out[i]);\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestNumberOfContinuousZeros.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"}]}