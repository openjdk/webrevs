{"files":[{"patch":"@@ -2507,1 +2507,2 @@\n-\/\/ Physical cpus of the host machine (including containers), Linux only.\n+\/\/ Available cpus of the host machine, Linux only.\n+\/\/ Used in container testing.\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8322420 8217338\n@@ -30,0 +31,1 @@\n+ * @modules java.base\/jdk.internal.platform\n@@ -34,4 +36,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.NoSuchFileException;\n-import jdk.test.lib.Platform;\n-import jdk.test.whitebox.WhiteBox;\n@@ -40,1 +38,1 @@\n-import jdk.test.lib.containers.systemd.SystemdTestUtils.ResultFiles;\n+import jdk.test.whitebox.WhiteBox;\n@@ -42,1 +40,0 @@\n-import jtreg.SkippedException;\n@@ -46,0 +43,1 @@\n+    private static final int MB = 1024 * 1024;\n@@ -47,0 +45,1 @@\n+    private static final String TEST_SLICE_NAME = SystemdMemoryAwarenessTest.class.getSimpleName() + \"HS\";\n@@ -49,3 +48,0 @@\n-       if (!Platform.isRoot()) {\n-           throw new SkippedException(\"Test requires to be run as root\");\n-       }\n@@ -57,2 +53,5 @@\n-        \/\/ 1 GB memory\n-        opts.memoryLimit(\"1000M\");\n+        \/\/ 1 GB memory, but the limit in the lower hierarchy is 512M\n+        opts.memoryLimit(\"1024M\");\n+        int expectedMemLimit = 512;\n+        \/\/ expected detected limit we test for, 512MB\n+        opts.sliceDMemoryLimit(String.format(\"%dM\", expectedMemLimit));\n@@ -67,1 +66,1 @@\n-        opts.sliceName(SystemdMemoryAwarenessTest.class.getSimpleName());\n+        opts.sliceName(TEST_SLICE_NAME);\n@@ -69,16 +68,5 @@\n-        ResultFiles files = SystemdTestUtils.buildSystemdSlices(opts);\n-\n-        try {\n-            SystemdTestUtils.systemdRunJava(opts)\n-                .shouldHaveExitValue(0)\n-                .shouldContain(\"Hello Systemd\")\n-                .shouldContain(\"OSContainer::active_processor_count: \" + coreLimit)\n-                .shouldContain(\"Memory Limit is: 1048576000\"); \/\/ 1 GB\n-        } finally {\n-            try {\n-                Files.delete(files.memory());\n-                Files.delete(files.cpu());\n-            } catch (NoSuchFileException e) {\n-                \/\/ ignore\n-            }\n-        }\n+        SystemdTestUtils.buildAndRunSystemdJava(opts)\n+            .shouldHaveExitValue(0)\n+            .shouldContain(\"Hello Systemd\")\n+            .shouldContain(\"OSContainer::active_processor_count: \" + coreLimit)\n+            .shouldContain(String.format(\"Memory Limit is: %d\", (expectedMemLimit * MB)));\n","filename":"test\/hotspot\/jtreg\/containers\/systemd\/SystemdMemoryAwarenessTest.java","additions":16,"deletions":28,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+    public String sliceDMemoryLimit; \/\/ used in jdk_internal.slice.d\n+    public String sliceDCpuLimit;    \/\/ used in jdk_internal.slice.d\n@@ -83,0 +85,7 @@\n+    \/**\n+     * The memory limit set with a .slice file in the systemd\n+     * config directory.\n+     *\n+     * @param memLimit The memory limit to set (e.g. 1000M).\n+     * @return The run options.\n+     *\/\n@@ -88,0 +97,19 @@\n+    \/**\n+     * The memory limit to set in the top-level jdk_internal.slice.d\n+     * systemd config directory.\n+     *\n+     * @param memoryLimit The memory limit to set.\n+     * @return The run options.\n+     *\/\n+    public SystemdRunOptions sliceDMemoryLimit(String memoryLimit) {\n+        this.sliceDMemoryLimit = memoryLimit;\n+        return this;\n+    }\n+\n+    \/**\n+     * The CPU limit set with a .slice file in the systemd\n+     * config directory.\n+     *\n+     * @param cpuLimit\n+     * @return The run options.\n+     *\/\n@@ -93,0 +121,12 @@\n+    \/**\n+     * The Cpu limit set in the top-level jdk_internal.slice.d\n+     * systemd config directory.\n+     *\n+     * @param cpuLimit The CPU limit to set to.\n+     * @return The run options.\n+     *\/\n+    public SystemdRunOptions sliceDCpuLimit(String cpuLimit) {\n+        this.sliceDCpuLimit = cpuLimit;\n+        return this;\n+    }\n+\n@@ -107,0 +147,5 @@\n+\n+    public boolean hasSliceDLimit() {\n+        return this.sliceDMemoryLimit != null ||\n+                this.sliceDCpuLimit != null;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/systemd\/SystemdRunOptions.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.NoSuchFileException;\n@@ -34,0 +35,2 @@\n+import jdk.internal.platform.Metrics;\n+import jdk.test.lib.Platform;\n@@ -36,0 +39,2 @@\n+import jdk.test.lib.util.FileUtils;\n+import jtreg.SkippedException;\n@@ -39,1 +44,10 @@\n-    private static final Path SYSTEMD_CONFIG_HOME = Path.of(\"\/\", \"etc\", \"systemd\", \"system\");\n+    private static final String CGROUPS_PROVIDER = Metrics.systemMetrics().getProvider();\n+    private static boolean CGROUPS_V2 = \"cgroupv2\".equals(CGROUPS_PROVIDER);\n+    private static boolean RUN_AS_USER = !Platform.isRoot() && CGROUPS_V2;\n+    private static final String SLICE_NAMESPACE_PREFIX = \"jdk_internal\";\n+    private static final String SLICE_D_MEM_CONFIG_FILE = \"memory-limit.conf\";\n+    private static final String SLICE_D_CPU_CONFIG_FILE = \"cpu-limit.conf\";\n+    private static final String USER_HOME = System.getProperty(\"user.home\");\n+    private static final Path SYSTEMD_CONFIG_HOME_ROOT = Path.of(\"\/\", \"etc\", \"systemd\", \"system\");\n+    private static final Path SYSTEMD_CONFIG_HOME_USER = Path.of(USER_HOME, \".config\", \"systemd\", \"user\");\n+    private static final Path SYSTEMD_CONFIG_HOME = Platform.isRoot() ? SYSTEMD_CONFIG_HOME_ROOT : SYSTEMD_CONFIG_HOME_USER;\n@@ -47,12 +61,1 @@\n-    public record ResultFiles(Path memory, Path cpu) {}\n-\n-    \/**\n-     * Run Java inside a systemd slice with specified parameters and options.\n-     *\n-     * @param opts The systemd slice options when running java\n-     * @return\n-     * @throws Exception\n-     *\/\n-    public static OutputAnalyzer systemdRunJava(SystemdRunOptions opts) throws Exception {\n-        return execute(buildJavaCommand(opts));\n-    }\n+    public record ResultFiles(Path memory, Path cpu, Path sliceDotDDir) {}\n@@ -74,0 +77,38 @@\n+    \/**\n+     * Run Java inside a systemd slice with specified parameters and options.\n+     *\n+     * @param opts The systemd slice options when running java\n+     * @return An OutputAnalyzer of the output of the command than ran.\n+     * @throws Exception If something went wrong.\n+     * @throws SkippedException If the test cannot be run (i.e. non-root user\n+     *         on cgroups v1).\n+     *\/\n+    public static OutputAnalyzer buildAndRunSystemdJava(SystemdRunOptions opts) throws Exception, SkippedException {\n+        if (!Platform.isRoot() && !CGROUPS_V2) {\n+            throw new SkippedException(\"Systemd tests require root on cgroup v1. Test skipped!\");\n+        }\n+        ResultFiles files = SystemdTestUtils.buildSystemdSlices(opts);\n+\n+        try {\n+            return SystemdTestUtils.systemdRunJava(opts);\n+        } finally {\n+            try {\n+                if (files.memory() != null) {\n+                    Files.delete(files.memory());\n+                }\n+                if (files.cpu() != null) {\n+                    Files.delete(files.cpu());\n+                }\n+                if (files.sliceDotDDir() != null) {\n+                    FileUtils.deleteFileTreeUnchecked(files.sliceDotDDir());\n+                }\n+            } catch (NoSuchFileException e) {\n+                \/\/ ignore\n+            }\n+        }\n+    }\n+\n+    private static OutputAnalyzer systemdRunJava(SystemdRunOptions opts) throws Exception {\n+        return execute(buildJavaCommand(opts));\n+    }\n+\n@@ -83,1 +124,1 @@\n-    public static ResultFiles buildSystemdSlices(SystemdRunOptions runOpts) throws Exception {\n+    private static ResultFiles buildSystemdSlices(SystemdRunOptions runOpts) throws Exception {\n@@ -91,0 +132,18 @@\n+        \/\/ Ensure base directory exists\n+        Files.createDirectories(SYSTEMD_CONFIG_HOME);\n+        Path sliceDotDDir = null;\n+        if (runOpts.hasSliceDLimit()) {\n+            String dirName = String.format(\"%s.slice.d\", SLICE_NAMESPACE_PREFIX);\n+            sliceDotDDir = SYSTEMD_CONFIG_HOME.resolve(Path.of(dirName));\n+            Files.createDirectory(sliceDotDDir);\n+\n+            if (runOpts.sliceDMemoryLimit != null) {\n+                Path memoryConfig = sliceDotDDir.resolve(Path.of(SLICE_D_MEM_CONFIG_FILE));\n+                Files.writeString(memoryConfig, getMemoryDSliceContent(runOpts));\n+            }\n+            if (runOpts.sliceDCpuLimit != null) {\n+                Path cpuConfig = sliceDotDDir.resolve(Path.of(SLICE_D_CPU_CONFIG_FILE));\n+                Files.writeString(cpuConfig, getCPUDSliceContent(runOpts));\n+            }\n+        }\n+\n@@ -95,0 +154,1 @@\n+            \/\/ cpu slice nested in memory\n@@ -104,1 +164,1 @@\n-        return new ResultFiles(memory, cpu);\n+        return new ResultFiles(memory, cpu, sliceDotDDir);\n@@ -110,1 +170,1 @@\n-        return \"jdk_internal_\" + runOpts.sliceName.replace(\"-\", \"_\");\n+        return SLICE_NAMESPACE_PREFIX + \"-\" + runOpts.sliceName.replace(\"-\", \"_\");\n@@ -119,2 +179,2 @@\n-        List<String> daemonReload = List.of(\"systemctl\", \"daemon-reload\");\n-        List<String> restartSlice = List.of(\"systemctl\", \"restart\", cpu.getFileName().toString());\n+        List<String> daemonReload = systemCtl();\n+        daemonReload.add(\"daemon-reload\");\n@@ -125,2 +185,19 @@\n-        if (execute(restartSlice).getExitValue() != 0) {\n-            throw new AssertionError(\"Failed to restart the systemd slice\");\n+    }\n+\n+    private static List<String> systemCtl() {\n+        return commandWithUser(\"systemctl\");\n+    }\n+\n+    \/**\n+     * 'baseCommand' or 'baseCommand --user' as list, depending on the cgroups\n+     * version and running user.\n+     *\n+     * @return 'baseCommand' if we are the root user, 'systemctl --user' if\n+     *         the current user is non-root and we are on cgroups v2. Note:\n+     *         Cgroups v1 and non-root is not possible as tests are skipped then.\n+     *\/\n+    private static List<String> commandWithUser(String baseCommand) {\n+        List<String> command = new ArrayList<>();\n+        command.add(baseCommand);\n+        if (RUN_AS_USER) {\n+            command.add(\"--user\");\n@@ -128,0 +205,1 @@\n+        return command;\n@@ -132,1 +210,1 @@\n-        return String.format(basicSliceFormat, sliceName, getMemoryCPUSliceContent(runOpts));\n+        return String.format(basicSliceFormat, sliceName, getCPUSliceContent(runOpts));\n@@ -135,6 +213,2 @@\n-    private static Object getMemoryCPUSliceContent(SystemdRunOptions runOpts) {\n-        String format =\n-                \"\"\"\n-                CPUAccounting=true\n-                CPUQuota=%s\n-                \"\"\";\n+    private static String getCPUSliceContent(SystemdRunOptions runOpts) {\n+        String format = basicCPUContentFormat();\n@@ -149,6 +223,27 @@\n-    private static Object getMemorySliceContent(SystemdRunOptions runOpts) {\n-        String format =\n-               \"\"\"\n-               MemoryAccounting=true\n-               MemoryLimit=%s\n-               \"\"\";\n+    private static String getMemoryDSliceContent(SystemdRunOptions runOpts) {\n+        String format = \"[Slice]\\n\" + basicMemoryContentFormat();\n+        return String.format(format, runOpts.sliceDMemoryLimit);\n+    }\n+\n+    private static String getCPUDSliceContent(SystemdRunOptions runOpts) {\n+        String format = \"[Slice]\\n\" + basicCPUContentFormat();\n+        return String.format(format, runOpts.sliceDCpuLimit);\n+    }\n+\n+    private static String basicCPUContentFormat() {\n+        return \"\"\"\n+                CPUAccounting=true\n+                CPUQuota=%s\n+                \"\"\";\n+    }\n+\n+    private static String basicMemoryContentFormat() {\n+        return \"\"\"\n+                MemoryAccounting=true\n+                MemoryLimit=%s\n+                \"\"\";\n+    }\n+\n+    private static String getMemorySliceContent(SystemdRunOptions runOpts) {\n+        String format = basicMemoryContentFormat();\n+\n@@ -182,3 +277,2 @@\n-        List<String> javaCmd = new ArrayList<>();\n-        \/\/ systemd-run --slice <slice-name>.slice --scope <java>\n-        javaCmd.add(\"systemd-run\");\n+        \/\/ systemd-run [--user] --slice <slice-name>.slice --scope <java>\n+        List<String> javaCmd = systemdRun();\n@@ -194,0 +288,4 @@\n+\n+    private static List<String> systemdRun() {\n+        return commandWithUser(\"systemd-run\");\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/systemd\/SystemdTestUtils.java","additions":134,"deletions":36,"binary":false,"changes":170,"status":"modified"}]}