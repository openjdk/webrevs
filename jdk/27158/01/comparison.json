{"files":[{"patch":"@@ -787,1 +787,1 @@\n-      InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(mirror.resolve()));\n+      InstanceKlass* ik = java_lang_Class::as_InstanceKlass(mirror.resolve());\n@@ -807,1 +807,1 @@\n-      InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(mirror.resolve()));\n+      InstanceKlass* ik = java_lang_Class::as_InstanceKlass(mirror.resolve());\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  return InstanceKlass::cast(java_lang_Class::as_Klass(result.get_oop()));\n+  return java_lang_Class::as_InstanceKlass(result.get_oop());\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -993,1 +993,1 @@\n-void java_lang_Class::initialize_mirror_fields(Klass* k,\n+void java_lang_Class::initialize_mirror_fields(InstanceKlass* ik,\n@@ -1008,1 +1008,1 @@\n-  InstanceKlass::cast(k)->do_local_static_fields(&initialize_static_field, mirror, CHECK);\n+  ik->do_local_static_fields(&initialize_static_field, mirror, CHECK);\n@@ -1114,2 +1114,1 @@\n-\n-    initialize_mirror_fields(k, mirror, protection_domain, classData, THREAD);\n+    initialize_mirror_fields(InstanceKlass::cast(k), mirror, protection_domain, classData, THREAD);\n@@ -2593,1 +2592,1 @@\n-  InstanceKlass* holder = InstanceKlass::cast(java_lang_Class::as_Klass(mirror()));\n+  InstanceKlass* holder = java_lang_Class::as_InstanceKlass(mirror());\n@@ -2972,1 +2971,1 @@\n-    InstanceKlass* holder = InstanceKlass::cast(java_lang_Class::as_Klass(bte._mirror()));\n+    InstanceKlass* holder = java_lang_Class::as_InstanceKlass(bte._mirror());\n@@ -3058,1 +3057,1 @@\n-  InstanceKlass* holder = InstanceKlass::cast(java_lang_Class::as_Klass(bte._mirror()));\n+  InstanceKlass* holder = java_lang_Class::as_InstanceKlass(bte._mirror());\n@@ -3444,1 +3443,1 @@\n-  Klass* klass = vmClasses::reflect_Method_klass();\n+  InstanceKlass* klass = vmClasses::reflect_Method_klass();\n@@ -3447,2 +3446,2 @@\n-  assert(InstanceKlass::cast(klass)->is_initialized(), \"must be initialized\");\n-  return InstanceKlass::cast(klass)->allocate_instance_handle(THREAD);\n+  assert(klass->is_initialized(), \"must be initialized\");\n+  return klass->allocate_instance_handle(THREAD);\n@@ -3917,1 +3916,0 @@\n-\n@@ -3919,2 +3917,1 @@\n-  Klass* k = java_lang_Class::as_Klass(mirror);\n-  assert(k->is_instance_klass(), \"Must be\");\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(mirror);\n@@ -3927,1 +3924,1 @@\n-  return InstanceKlass::cast(k)->constants();\n+  return ik->constants();\n@@ -5534,1 +5531,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(klass());\n+  InstanceKlass* ik = klass();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  static void initialize_mirror_fields(Klass* k, Handle mirror, Handle protection_domain,\n+  static void initialize_mirror_fields(InstanceKlass* ik, Handle mirror, Handle protection_domain,\n@@ -296,1 +296,1 @@\n-  \/\/ Conversion\n+  \/\/ Conversion -- java_class must not be null. The return value is null only if java_class is a primitive type.\n@@ -298,0 +298,4 @@\n+  static Klass* as_Klass(jobject java_class);\n+  static InstanceKlass* as_InstanceKlass(oop java_class);\n+  static InstanceKlass* as_InstanceKlass(jobject java_class);\n+\n@@ -1901,1 +1905,1 @@\n-  Klass* klass() const      { return vmClasses::klass_at(klass_id); }\n+  InstanceKlass* klass() const { return vmClasses::klass_at(klass_id); }\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/jniHandles.inline.hpp\"\n@@ -294,0 +295,14 @@\n+inline Klass* java_lang_Class::as_Klass(jobject java_class) {\n+  return as_Klass(JNIHandles::resolve_non_null(java_class));\n+}\n+\n+inline InstanceKlass* java_lang_Class::as_InstanceKlass(oop java_class) {\n+  Klass* k = as_Klass(java_class);\n+  assert(k == nullptr || k->is_instance_klass(), \"type check\");\n+  return static_cast<InstanceKlass*>(k);\n+}\n+\n+inline InstanceKlass* java_lang_Class::as_InstanceKlass(jobject java_class) {\n+  return as_InstanceKlass(JNIHandles::resolve_non_null(java_class));\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1280,1 +1280,1 @@\n-    \/\/ Primitive classes return null since forName() can not be\n+    \/\/ Primitive classes return null since forName() cannot be\n@@ -1283,1 +1283,1 @@\n-      InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(obj));\n+      InstanceKlass* k = java_lang_Class::as_InstanceKlass(obj);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -870,1 +870,1 @@\n-  const Klass* const k = java_lang_Class::as_Klass(resolve_non_null(clazz));\n+  const Klass* const k = java_lang_Class::as_Klass(clazz);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    ik = InstanceKlass::cast(java_lang_Class::as_Klass(ref_owner));\n+    ik = java_lang_Class::as_InstanceKlass(ref_owner);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -690,1 +690,1 @@\n-  klass = java_lang_Class::as_Klass(JNIHandles::resolve(mirror));\n+  klass = java_lang_Class::as_Klass(mirror);\n@@ -2610,1 +2610,1 @@\n-  Klass* klass = java_lang_Class::as_Klass(JNIHandles::resolve(mirror));\n+  Klass* klass = java_lang_Class::as_Klass(mirror);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  InstanceKlass* klass = InstanceKlass::cast(java_lang_Class::as_Klass(type_mirror));\n+  InstanceKlass* klass = java_lang_Class::as_InstanceKlass(type_mirror);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-    trace_class_resolution(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(result)));\n+    trace_class_resolution(java_lang_Class::as_Klass(result));\n@@ -529,1 +529,1 @@\n-  InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz)));\n+  InstanceKlass* k = java_lang_Class::as_InstanceKlass(clazz);\n@@ -1044,2 +1044,1 @@\n-    Klass* k = java_lang_Class::as_Klass(\n-      JNIHandles::resolve_non_null(clazz));\n+    Klass* k = java_lang_Class::as_Klass(clazz);\n@@ -1604,1 +1603,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(cls)); \\\n+  Klass* k = java_lang_Class::as_Klass(cls); \\\n@@ -1749,1 +1748,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n+  Klass* k = java_lang_Class::as_Klass(clazz);\n@@ -1943,1 +1942,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(cls));\n+  Klass* k = java_lang_Class::as_Klass(cls);\n@@ -1984,1 +1983,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n+  Klass* k = java_lang_Class::as_Klass(clazz);\n@@ -2285,1 +2284,1 @@\n-  Klass* ek = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(elementClass));\n+  Klass* ek = java_lang_Class::as_Klass(elementClass);\n@@ -2630,1 +2629,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n+  Klass* k = java_lang_Class::as_Klass(clazz);\n@@ -2693,1 +2692,1 @@\n-  Klass* k   = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n+  Klass* k   = java_lang_Class::as_Klass(clazz);\n@@ -2929,1 +2928,1 @@\n-    trace_class_resolution(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(result)));\n+    trace_class_resolution(java_lang_Class::as_Klass(result));\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -818,1 +818,1 @@\n-    trace_class_resolution(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(result)));\n+    trace_class_resolution(java_lang_Class::as_Klass(result));\n@@ -843,8 +843,3 @@\n-    oop from_mirror = JNIHandles::resolve_non_null(from);\n-    Klass* from_class = java_lang_Class::as_Klass(from_mirror);\n-    const char * from_name = from_class->external_name();\n-\n-    oop mirror = JNIHandles::resolve_non_null(result);\n-    Klass* to_class = java_lang_Class::as_Klass(mirror);\n-    const char * to = to_class->external_name();\n-    log_debug(class, resolve)(\"%s %s (verification)\", from_name, to);\n+    const char * from_name = java_lang_Class::as_Klass(from)->external_name();\n+    const char * to_name = java_lang_Class::as_Klass(result)->external_name();\n+    log_debug(class, resolve)(\"%s %s (verification)\", from_name, to_name);\n@@ -914,2 +909,2 @@\n-  Klass* lookup_k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(lookup));\n-  \/\/ Lookup class must be a non-null instance\n+  InstanceKlass* lookup_k = java_lang_Class::as_InstanceKlass(lookup);\n+  \/\/ Lookup class must not be a primitive class (whose mirror null Klass*)\n@@ -917,1 +912,1 @@\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Lookup class is null\");\n+    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Lookup class is primitive\");\n@@ -919,1 +914,0 @@\n-  assert(lookup_k->is_instance_klass(), \"Lookup class must be an instance klass\");\n@@ -930,1 +924,1 @@\n-    host_class = InstanceKlass::cast(lookup_k)->nest_host(CHECK_NULL);\n+    host_class = lookup_k->nest_host(CHECK_NULL);\n@@ -1261,1 +1255,1 @@\n-  InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(ofMirror));\n+  InstanceKlass* k = java_lang_Class::as_InstanceKlass(ofMirror);\n@@ -1400,1 +1394,0 @@\n-  Klass* k    = java_lang_Class::as_Klass(mirror);\n@@ -1404,1 +1397,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(k);\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(mirror);\n@@ -1440,1 +1433,1 @@\n-  Klass* k = java_lang_Class::as_Klass(mirror);\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(mirror);\n@@ -1442,1 +1435,1 @@\n-  Method* m = InstanceKlass::cast(k)->method_with_idnum(slot);\n+  Method* m = ik->method_with_idnum(slot);\n@@ -1454,1 +1447,1 @@\n-    Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve(cls));\n+    Klass* k = java_lang_Class::as_Klass(cls);\n@@ -1566,1 +1559,1 @@\n-  InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(ofMirror));\n+  InstanceKlass* k = java_lang_Class::as_InstanceKlass(ofMirror);\n@@ -1606,1 +1599,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(cls));\n+  Klass* k = java_lang_Class::as_Klass(cls);\n@@ -1623,3 +1616,1 @@\n-  Klass* c = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(ofClass));\n-  assert(c->is_instance_klass(), \"must be\");\n-  InstanceKlass* ik = InstanceKlass::cast(c);\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(ofClass);\n@@ -1667,1 +1658,1 @@\n-  InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(ofMirror));\n+  InstanceKlass* k = java_lang_Class::as_InstanceKlass(ofMirror);\n@@ -1746,7 +1737,3 @@\n-  Klass* c = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(current));\n-  assert(c->is_instance_klass(), \"must be\");\n-  InstanceKlass* ck = InstanceKlass::cast(c);\n-  Klass* m = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(member));\n-  assert(m->is_instance_klass(), \"must be\");\n-  InstanceKlass* mk = InstanceKlass::cast(m);\n-  return ck->has_nestmate_access_to(mk, THREAD);\n+  InstanceKlass* c = java_lang_Class::as_InstanceKlass(current);\n+  InstanceKlass* m = java_lang_Class::as_InstanceKlass(member);\n+  return c->has_nestmate_access_to(m, THREAD);\n@@ -1759,4 +1746,2 @@\n-  Klass* c = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(current));\n-  assert(c->is_instance_klass(), \"must be\");\n-  InstanceKlass* ck = InstanceKlass::cast(c);\n-  InstanceKlass* host = ck->nest_host(THREAD);\n+  InstanceKlass* c = java_lang_Class::as_InstanceKlass(current);\n+  InstanceKlass* host = c->nest_host(THREAD);\n@@ -1772,4 +1757,2 @@\n-  Klass* c = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(current));\n-  assert(c->is_instance_klass(), \"must be\");\n-  InstanceKlass* ck = InstanceKlass::cast(c);\n-  InstanceKlass* host = ck->nest_host(THREAD);\n+  InstanceKlass* c = java_lang_Class::as_InstanceKlass(current);\n+  InstanceKlass* host = c->nest_host(THREAD);\n@@ -1778,1 +1761,1 @@\n-                              ck->external_name(), host->external_name());\n+                              c->external_name(), host->external_name());\n@@ -1841,1 +1824,1 @@\n-      assert(host == ck || ck->is_hidden(), \"must be singleton nest or dynamic nestmate\");\n+      assert(host == c || c->is_hidden(), \"must be singleton nest or dynamic nestmate\");\n@@ -1852,3 +1835,2 @@\n-  Klass* c = java_lang_Class::as_Klass(mirror);\n-  assert(c->is_instance_klass(), \"must be\");\n-  InstanceKlass* ik = InstanceKlass::cast(c);\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(mirror);\n+\n@@ -3358,1 +3340,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve(cls));\n+  Klass* k = java_lang_Class::as_Klass(cls);\n@@ -3375,2 +3357,2 @@\n-  Klass* caller_k = java_lang_Class::as_Klass(JNIHandles::resolve(caller));\n-  InstanceKlass* caller_ik = InstanceKlass::cast(caller_k);\n+  Klass* caller_k = java_lang_Class::as_Klass(caller);\n+  InstanceKlass* caller_ik = java_lang_Class::as_InstanceKlass(JNIHandles::resolve(caller));\n@@ -3383,2 +3365,1 @@\n-  Klass* lambda_k = java_lang_Class::as_Klass(JNIHandles::resolve(lambdaProxyClass));\n-  InstanceKlass* lambda_ik = InstanceKlass::cast(lambda_k);\n+  InstanceKlass* lambda_ik = java_lang_Class::as_InstanceKlass(lambdaProxyClass);\n@@ -3424,2 +3405,1 @@\n-  Klass* caller_k = java_lang_Class::as_Klass(JNIHandles::resolve(caller));\n-  InstanceKlass* caller_ik = InstanceKlass::cast(caller_k);\n+  InstanceKlass* caller_ik = java_lang_Class::as_InstanceKlass(caller);\n@@ -3522,1 +3502,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve(cls));\n+  Klass* k = java_lang_Class::as_Klass(cls);\n@@ -3821,5 +3801,1 @@\n-  assert(!java_lang_Class::as_Klass(mirror)->is_array_klass(), \"unexpected array class\");\n-\n-  Klass* c = java_lang_Class::as_Klass(mirror);\n-  assert(c->is_instance_klass(), \"must be\");\n-  InstanceKlass* ik = InstanceKlass::cast(c);\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(mirror);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":35,"deletions":59,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -905,1 +905,1 @@\n-      InstanceKlass* defc = InstanceKlass::cast(java_lang_Class::as_Klass(clazz));\n+      InstanceKlass* defc = java_lang_Class::as_InstanceKlass(clazz);\n@@ -1097,1 +1097,1 @@\n-      Klass* caller = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(caller_jh));\n+      Klass* caller = java_lang_Class::as_Klass(caller_jh);\n@@ -1114,1 +1114,1 @@\n-                     java_lang_Class::as_Klass(JNIHandles::resolve_non_null(caller_jh));\n+                     java_lang_Class::as_Klass(caller_jh);\n@@ -1242,1 +1242,1 @@\n-  Klass* caller_k = java_lang_Class::as_Klass(JNIHandles::resolve(caller_jh));\n+  Klass* caller_k = java_lang_Class::as_Klass(caller_jh);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -492,1 +492,1 @@\n-  InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz)));\n+  InstanceKlass* k = java_lang_Class::as_InstanceKlass(clazz);\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1159,1 +1159,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1939,1 +1939,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1944,1 +1944,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1950,1 +1950,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1959,1 +1959,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1968,1 +1968,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1977,1 +1977,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1986,1 +1986,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -1995,1 +1995,1 @@\n-  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  InstanceKlass* ik = java_lang_Class::as_InstanceKlass(klass);\n@@ -2158,1 +2158,1 @@\n-  return (jboolean)AOTMetaspace::in_aot_cache(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz)));\n+  return (jboolean)AOTMetaspace::in_aot_cache(java_lang_Class::as_Klass(clazz));\n@@ -2166,3 +2166,4 @@\n-  Klass *k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n-  if (!k->is_instance_klass()) {\n-    return;\n+  Klass *k = java_lang_Class::as_Klass(clazz);\n+  if (k->is_instance_klass()) {\n+    InstanceKlass *ik = InstanceKlass::cast(k);\n+    ik->link_class(THREAD); \/\/ may throw verification error\n@@ -2170,2 +2171,0 @@\n-  InstanceKlass *ik = InstanceKlass::cast(k);\n-  ik->link_class(THREAD); \/\/ may throw verification error\n@@ -2389,4 +2388,2 @@\n-  \/\/Get the class of our object\n-  Klass* arg_klass = object->klass();\n-  \/\/Turn it into an instance-klass\n-  InstanceKlass* ik = InstanceKlass::cast(arg_klass);\n+  \/\/Only non-array oops have fields. Don't call this function on arrays!\n+  InstanceKlass* ik = InstanceKlass::cast(object->klass());\n@@ -2434,1 +2431,1 @@\n-  Klass* klass = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(wbclass));\n+  Klass* klass = java_lang_Class::as_Klass(wbclass);\n@@ -2576,1 +2573,1 @@\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve(mirror));\n+  Klass* k = java_lang_Class::as_Klass(mirror);\n@@ -3068,1 +3065,1 @@\n-      InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(wbclass)));\n+      InstanceKlass* ik = java_lang_Class::as_InstanceKlass(wbclass);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1139,1 +1139,1 @@\n-  InstanceKlass* klass = InstanceKlass::cast(java_lang_Class::as_Klass(mirror));\n+  InstanceKlass* klass = java_lang_Class::as_InstanceKlass(mirror);\n@@ -1156,1 +1156,1 @@\n-  InstanceKlass* klass = InstanceKlass::cast(java_lang_Class::as_Klass(mirror));\n+  InstanceKlass* klass = java_lang_Class::as_InstanceKlass(mirror);\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -884,2 +884,2 @@\n-  Klass* k = vmClasses::StackOverflowError_klass();\n-  oop exception_oop = InstanceKlass::cast(k)->allocate_instance(CHECK);\n+  InstanceKlass* k = vmClasses::StackOverflowError_klass();\n+  oop exception_oop = k->allocate_instance(CHECK);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}