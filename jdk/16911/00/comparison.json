{"files":[{"patch":"@@ -53,0 +53,7 @@\n+  \/\/ ICStub_from_destination_address looks up Stub* address from code entry address,\n+  \/\/ which means all code entry and stub alignments should agree. Setting it to\n+  \/\/ CodeEntryAlignment would waste a lot of memory in ICBuffer. Aligning the code\n+  \/\/ section is normally done for performance reasons, which do not apply to ICStubs,\n+  \/\/ as these stubs are transitional. Align everything to the machine word size instead.\n+  static const int IC_STUB_ALIGN = HeapWordSize;\n+\n@@ -65,3 +72,1 @@\n-  \/\/ ICStub_from_destination_address looks up Stub* address from code entry address,\n-  \/\/ which unfortunately means the stub head should be at the same alignment as the code.\n-  static  int alignment()                        { return CodeEntryAlignment; }\n+  static  int alignment()                        { return IC_STUB_ALIGN; }\n@@ -74,1 +79,1 @@\n-  address code_begin() const                     { return align_up((address)this + sizeof(ICStub), CodeEntryAlignment); }\n+  address code_begin() const                     { return align_up((address)this + sizeof(ICStub), IC_STUB_ALIGN); }\n@@ -96,1 +101,1 @@\n-  ICStub* stub = (ICStub*) (destination_address - align_up(sizeof(ICStub), CodeEntryAlignment));\n+  ICStub* stub = (ICStub*) (destination_address - align_up(sizeof(ICStub), ICStub::IC_STUB_ALIGN));\n","filename":"src\/hotspot\/share\/code\/icBuffer.hpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}