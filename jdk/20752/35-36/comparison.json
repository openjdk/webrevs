{"files":[{"patch":"@@ -393,1 +393,3 @@\n-  void renew_enqueue_buffer_if_needed();\n+  const JfrBuffer* get_enqueue_buffer();\n+  const JfrBuffer* renew_if_full(const JfrBuffer* enqueue_buffer);\n+\n@@ -575,0 +577,4 @@\n+  const JfrBuffer* enqueue_buffer = get_enqueue_buffer();\n+  assert(enqueue_buffer != nullptr, \"invariant\");\n+  enqueue_buffer = renew_if_full(enqueue_buffer);\n+\n@@ -577,1 +583,0 @@\n-    renew_enqueue_buffer_if_needed();\n@@ -614,0 +619,1 @@\n+    enqueue_buffer = renew_if_full(enqueue_buffer);\n@@ -623,1 +629,1 @@\n-void JfrCPUTimeThreadSampler::renew_enqueue_buffer_if_needed() {\n+const JfrBuffer* JfrCPUTimeThreadSampler::get_enqueue_buffer() {\n@@ -625,3 +631,6 @@\n-  if (buffer == nullptr || buffer->free_size() < 4 * _max_frames_per_trace * 100) {\n-    JfrTraceIdLoadBarrier::renew_sampler_enqueue_buffer(this);\n-  }\n+  return buffer != nullptr ? renew_if_full(buffer) : JfrTraceIdLoadBarrier::renew_sampler_enqueue_buffer(this);\n+}\n+\n+const JfrBuffer* JfrCPUTimeThreadSampler::renew_if_full(const JfrBuffer* enqueue_buffer) {\n+  assert(enqueue_buffer != nullptr, \"invariant\");\n+  return enqueue_buffer->free_size() < _max_frames_per_trace * 2 * wordSize ? JfrTraceIdLoadBarrier::renew_sampler_enqueue_buffer(this) : enqueue_buffer;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"}]}