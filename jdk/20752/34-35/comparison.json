{"files":[{"patch":"@@ -25,0 +25,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -740,0 +741,1 @@\n+  NoResourceMark rm;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -186,0 +187,1 @@\n+  NoResourceMark rm;\n@@ -238,0 +240,1 @@\n+  NoResourceMark rm;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -127,0 +127,7 @@\n+  #ifdef ASSERT\n+  Thread* t = Thread::current_or_null_safe();\n+  if (t != nullptr && t->resource_area() != nullptr) {\n+    \/\/ Just to make sure that we're allowed to allocate\n+    t->resource_area()->verify_no_NoResourceMark();\n+  }\n+  #endif\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -42,0 +43,1 @@\n+    area->verify_no_NoResourceMark();\n@@ -48,1 +50,1 @@\n-  if (_nesting <= 0 && !VMError::is_error_reported()) {\n+  if ((_nesting <= 0 || _no_resource_mark_nesting > 0) && !VMError::is_error_reported()) {\n@@ -55,1 +57,5 @@\n-        fatal(\"memory leak: allocating without ResourceMark\");\n+        if (_nesting <= 0) {\n+          fatal(\"memory leak: allocating without ResourceMark\");\n+        } else {\n+          fatal(\"memory leak: allocating with NoResourceMark\");\n+        }\n@@ -81,0 +87,17 @@\n+\n+#ifdef ASSERT\n+\n+NoResourceMark::NoResourceMark() {\n+  ResourceArea* area = Thread::current()->resource_area();\n+  area->_no_resource_mark_nesting++;\n+  assert(area->_no_resource_mark_nesting > 0, \"must stack allocate NoResourceMark\" );\n+}\n+\n+\n+NoResourceMark::~NoResourceMark() {\n+  ResourceArea* area = Thread::current()->resource_area();\n+  assert(area->_no_resource_mark_nesting > 0, \"must stack allocate NoResourceMark\" );\n+  area->_no_resource_mark_nesting--;\n+}\n+\n+#endif \/\/ ASSERT\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/memory\/resourceArea.cpp","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+  friend class NoResourceMark;\n@@ -49,1 +50,2 @@\n-  int _nesting;                 \/\/ current # of nested ResourceMarks\n+  int _nesting;                  \/\/ current # of nested ResourceMarks\n+  int _no_resource_mark_nesting; \/\/ current # of nested NoResourceMarks\n@@ -55,1 +57,1 @@\n-    Arena(mem_tag, Arena::Tag::tag_ra) DEBUG_ONLY(COMMA _nesting(0)) {}\n+    Arena(mem_tag, Arena::Tag::tag_ra) DEBUG_ONLY(COMMA _nesting(0) COMMA _no_resource_mark_nesting(0)) {}\n@@ -58,1 +60,1 @@\n-    Arena(mem_tag, Arena::Tag::tag_ra, init_size) DEBUG_ONLY(COMMA _nesting(0)) {\n+    Arena(mem_tag, Arena::Tag::tag_ra, init_size) DEBUG_ONLY(COMMA _nesting(0) COMMA _no_resource_mark_nesting(0)) {\n@@ -63,0 +65,1 @@\n+  DEBUG_ONLY(void verify_no_NoResourceMark() const { assert(_no_resource_mark_nesting == 0, \"Allocating inside NoResourceMark\"); })\n@@ -179,0 +182,2 @@\n+\/\/ ResourceMark to mark that new resource area allocations are allowed\n+\/\/ Voided by the NoResourceMark stack object\n@@ -216,0 +221,15 @@\n+\/\/------------------------------------------------------------------------------------------------------------------------\n+\/\/ A NoResourceMark stack object will verify that no resource areas or new chunks are allocated\n+\/\/ in its scope. Enabled in debug mode only.\n+\n+class NoResourceMark: public StackObj {\n+ public:\n+#ifdef ASSERT\n+  NoResourceMark();\n+  ~NoResourceMark();\n+#else\n+  NoResourceMark()  {}\n+  ~NoResourceMark() {}\n+#endif\n+};\n+\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -578,0 +579,2 @@\n+  NoResourceMark rm;\n+\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}