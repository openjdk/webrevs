{"files":[{"patch":"@@ -26,1 +26,0 @@\n-#include \"jfr\/recorder\/service\/jfrOptionSet.hpp\"\n@@ -28,0 +27,4 @@\n+\n+#if defined(LINUX)\n+\n+#include \"jfr\/recorder\/service\/jfrOptionSet.hpp\"\n@@ -30,0 +33,1 @@\n+#include \"jfr\/utilities\/jfrThreadIterator.hpp\"\n@@ -36,1 +40,1 @@\n-#include \"runtime\/mutexLocker.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n@@ -40,0 +44,2 @@\n+#include \"runtime\/vmOperation.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n@@ -41,1 +47,0 @@\n-#if defined(LINUX)\n@@ -346,2 +351,0 @@\n-class JfrCPUTimeFillCallback;\n-\n@@ -352,1 +355,0 @@\n-  friend class JfrCPUTimeFillCallback;\n@@ -401,1 +403,0 @@\n-  void set_timer_time(timer_t timerid, int64_t period_millis);\n@@ -728,1 +729,1 @@\n-void JfrCPUTimeThreadSampler::set_timer_time(timer_t timerid, int64_t period_nanos) {\n+static void set_timer_time(timer_t timerid, int64_t period_nanos) {\n@@ -771,0 +772,17 @@\n+class VM_CPUTimeSamplerThreadInitializer : public VM_Operation {\n+ private:\n+  JfrCPUTimeThreadSampler *_sampler;\n+ public:\n+\n+  VM_CPUTimeSamplerThreadInitializer(JfrCPUTimeThreadSampler* sampler) : _sampler(sampler) {\n+  }\n+\n+  VMOp_Type type() const { return VMOp_CPUTimeSamplerThreadInitializer; }\n+  void doit() {\n+    JfrJavaThreadIterator iter;\n+    while (iter.has_next()) {\n+      _sampler->on_javathread_create(iter.next());\n+    }\n+  };\n+};\n+\n@@ -775,6 +793,2 @@\n-  \/\/ create timers for all existing threads\n-  MutexLocker tlock(Threads_lock);\n-  ThreadsListHandle tlh;\n-  for (size_t i = 0; i < tlh.length(); i++) {\n-    on_javathread_create(tlh.thread_at(i));\n-  }\n+  VM_CPUTimeSamplerThreadInitializer op(this);\n+  VMThread::execute(&op);\n@@ -783,10 +797,6 @@\n-void JfrCPUTimeThreadSampler::stop_timer() {\n-  MutexLocker tlock(Threads_lock);\n-  ThreadsListHandle tlh;\n-  for (size_t i = 0; i < tlh.length(); i++) {\n-    JavaThread* thread = tlh.thread_at(i);\n-    JfrThreadLocal* jfr_thread_local = thread->jfr_thread_local();\n-    if (jfr_thread_local != nullptr && jfr_thread_local->has_timerid()) {\n-      timer_delete(jfr_thread_local->timerid());\n-      thread->jfr_thread_local()->unset_timerid();\n-    }\n+class VM_CPUTimeSamplerThreadTerminator : public VM_Operation {\n+ private:\n+  JfrCPUTimeThreadSampler *_sampler;\n+ public:\n+\n+  VM_CPUTimeSamplerThreadTerminator(JfrCPUTimeThreadSampler* sampler) : _sampler(sampler) {\n@@ -794,0 +804,18 @@\n+\n+  VMOp_Type type() const { return VMOp_CPUTimeSamplerThreadTerminator; }\n+  void doit() {\n+    JfrJavaThreadIterator iter;\n+    while (iter.has_next()) {\n+      JavaThread *thread = iter.next();\n+      JfrThreadLocal* jfr_thread_local = thread->jfr_thread_local();\n+      if (jfr_thread_local != nullptr && jfr_thread_local->has_timerid()) {\n+        timer_delete(jfr_thread_local->timerid());\n+        thread->jfr_thread_local()->unset_timerid();\n+      }\n+    }\n+  };\n+};\n+\n+void JfrCPUTimeThreadSampler::stop_timer() {\n+  VM_CPUTimeSamplerThreadTerminator op(this);\n+  VMThread::execute(&op);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":52,"deletions":24,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-      assert(!node->retired(), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrMemorySpaceRetrieval.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -118,1 +118,3 @@\n-  template(RendezvousGCThreads)\n+  template(RendezvousGCThreads)                   \\\n+  template(CPUTimeSamplerThreadInitializer)       \\\n+  template(CPUTimeSamplerThreadTerminator)        \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        Asserts.assertTrue(rate > 950 && rate < 1050, \"Expected around 1000 events per second, got \" + rate);\n+        Asserts.assertTrue(rate > 900 && rate < 1100, \"Expected around 1000 events per second, got \" + rate);\n@@ -90,0 +90,1 @@\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleThrottling.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}