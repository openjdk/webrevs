{"files":[{"patch":"@@ -372,1 +372,1 @@\n-  Thread* _sampler_thread;\n+  NonJavaThread* _sampler_thread;\n@@ -850,0 +850,7 @@\n+NonJavaThread* JfrCPUTimeThreadSampling::get_worker_thread_or_null() {\n+  if (_instance != nullptr) {\n+    return _instance->_sampler->_sampler_thread;\n+  }\n+  return nullptr;\n+}\n+\n@@ -889,0 +896,4 @@\n+NonJavaThread* JfrCPUTimeThreadSampling::get_worker_thread_or_null() {\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+class NonJavaThread;\n@@ -61,0 +62,2 @@\n+\n+  static NonJavaThread* get_worker_thread_or_null();\n@@ -80,0 +83,2 @@\n+\n+  static NonJavaThread* get_worker_thread_or_null();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -132,0 +132,3 @@\n+#ifdef INCLUDE_JFR\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n+#endif\n@@ -190,0 +193,10 @@\n+WB_ENTRY(jint, WB_GetCPUTimeSampleWorkerThreadId(JNIEnv* env, jobject o))\n+#ifdef INCLUDE_JFR\n+  NonJavaThread *worker = JfrCPUTimeThreadSampling::get_worker_thread_or_null();\n+  if (worker != nullptr) {\n+    return worker->osthread()->thread_id();\n+  }\n+#endif\n+  return 0;\n+WB_END\n+\n@@ -2972,0 +2985,1 @@\n+  {CC\"getCPUTimeSampleWorkerThreadId\", CC\"()I\",       (void*)&WB_GetCPUTimeSampleWorkerThreadId},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -809,0 +809,3 @@\n+\n+  \/\/ OS id of the CPU time sampler working thread\n+  public native int getCPUTimeSampleWorkerThreadId();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}