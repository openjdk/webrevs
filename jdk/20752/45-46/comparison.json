{"files":[{"patch":"@@ -225,0 +225,35 @@\n+JfrLocalCPUTimeTraceStack::JfrLocalCPUTimeTraceStack(u4 capacity) : _capacity(capacity), _head(0) {\n+  _data = JfrCHeapObj::new_array<JfrCPUTimeTrace*>(capacity);\n+}\n+\n+JfrLocalCPUTimeTraceStack::~JfrLocalCPUTimeTraceStack() {\n+  JfrCHeapObj::free(_data, sizeof(JfrCPUTimeTrace*) * _capacity);\n+}\n+\n+bool JfrLocalCPUTimeTraceStack::enqueue(JfrCPUTimeTrace* element) {\n+  u4 elementIndex = _head;\n+  if (elementIndex >= _capacity) {\n+    return false;\n+  }\n+  _head++;\n+  _data[elementIndex] = element;\n+  return true;\n+}\n+\n+JfrCPUTimeTrace* JfrLocalCPUTimeTraceStack::dequeue() {\n+  u4 elementIndex = _head;\n+  if (elementIndex == 0) {\n+    return nullptr;\n+  }\n+  _head--;\n+  return _data[elementIndex];\n+}\n+\n+void JfrLocalCPUTimeTraceStack::set_capacity(u4 capacity) {\n+  _head = 0;\n+  JfrCPUTimeTrace** new_data = JfrCHeapObj::new_array<JfrCPUTimeTrace*>(capacity);\n+  JfrCHeapObj::free(_data, _capacity * sizeof(JfrCPUTimeTrace*));\n+  _data = new_data;\n+  _capacity = capacity;\n+}\n+\n@@ -591,1 +626,1 @@\n-  JfrCPUTimeTraceStack& stack = jtl->cpu_time_jfr_stack();\n+  JfrLocalCPUTimeTraceStack& stack = jtl->cpu_time_jfr_stack();\n@@ -610,1 +645,1 @@\n-  if (trace->successful() && trace->stacktrace().nr_of_frames() > 0) {\n+  if (trace->stacktrace().nr_of_frames() > 0) {\n@@ -625,1 +660,1 @@\n-    log_trace(jfr)(\"CPU time sample %ld\\n\", Atomic::load(&count));\n+    log_trace(jfr)(\"CPU time sample %zu\\n\", Atomic::load(&count));\n@@ -649,2 +684,1 @@\n-\n-  JfrCPUTimeTraceStack& stack = jtl->cpu_time_jfr_stack();\n+  JfrLocalCPUTimeTraceStack& stack = jtl->cpu_time_jfr_stack();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":39,"deletions":5,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-\/\/ Fixed size async-signal-safe SPSC linear queue backed by an array.\n+\/\/ Fixed size stack abstraction.\n@@ -41,2 +41,1 @@\n-template <class T>\n-class JfrCPUTimeStack {\n+class JfrLocalCPUTimeTraceStack {\n@@ -44,1 +43,1 @@\n-  T* _data;\n+  JfrCPUTimeTrace** _data;\n@@ -47,1 +46,1 @@\n-  volatile u4 _head;\n+  u4 _head;\n@@ -50,3 +49,1 @@\n-  JfrCPUTimeStack(u4 capacity) : _capacity(capacity), _head(0) {\n-    _data = JfrCHeapObj::new_array<T>(capacity);\n-  }\n+  JfrLocalCPUTimeTraceStack(u4 capacity);\n@@ -54,3 +51,1 @@\n-  ~JfrCPUTimeStack() {\n-    JfrCHeapObj::free(_data, sizeof(T) * _capacity);\n-  }\n+  ~JfrLocalCPUTimeTraceStack();\n@@ -58,11 +53,1 @@\n-  bool enqueue(T element) {\n-    u4 elementIndex;\n-    do {\n-      elementIndex = Atomic::load_acquire(&_head);\n-      if (elementIndex >= _capacity) {\n-        return false;\n-      }\n-    } while (Atomic::cmpxchg(&_head, elementIndex, elementIndex + 1) != elementIndex);\n-    _data[elementIndex] = element;\n-    return true;\n-  }\n+  bool enqueue(JfrCPUTimeTrace* element);\n@@ -70,10 +55,4 @@\n-  T dequeue() {\n-    u4 elementIndex;\n-    do {\n-      elementIndex = Atomic::load_acquire(&_head);\n-      if (elementIndex == 0) {\n-        return nullptr;\n-      }\n-    } while (Atomic::cmpxchg(&_head, elementIndex, elementIndex - 1) != elementIndex);\n-    return _data[--elementIndex];\n-  }\n+  JfrCPUTimeTrace* dequeue();\n+\n+  \/\/ deletes all samples in the queue\n+  void set_capacity(u4 capacity);\n@@ -81,1 +60,1 @@\n-  T at(u4 index) {\n+  JfrCPUTimeTrace* at(u4 index) {\n@@ -87,1 +66,1 @@\n-    return Atomic::load(&_head);\n+    return _head;\n@@ -91,1 +70,1 @@\n-    Atomic::store(&_head, size);\n+    _head = size;\n@@ -98,8 +77,0 @@\n-  \/\/ deletes all samples in the queue\n-  void set_capacity(u4 capacity) {\n-    _head = 0;\n-    T* new_data = JfrCHeapObj::new_array<T>(capacity);\n-    JfrCHeapObj::free(_data, _capacity * sizeof(T));\n-    _data = new_data;\n-    _capacity = capacity;\n-  }\n@@ -122,1 +93,1 @@\n-    Atomic::release_store(&_head, (u4)0);\n+    _head = 0;\n@@ -126,3 +97,0 @@\n-\/\/ Used as a per thread sampling stack\n-typedef JfrCPUTimeStack<JfrCPUTimeTrace*> JfrCPUTimeTraceStack;\n-\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":15,"deletions":47,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -154,0 +154,1 @@\n+\n@@ -602,1 +603,1 @@\n-JfrCPUTimeTraceStack& JfrThreadLocal::cpu_time_jfr_stack() {\n+JfrLocalCPUTimeTraceStack& JfrThreadLocal::cpu_time_jfr_stack() {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-  JfrCPUTimeTraceStack _cpu_time_jfr_stack{100};\n+  JfrLocalCPUTimeTraceStack _cpu_time_jfr_stack{100};\n@@ -327,1 +327,1 @@\n-  JfrCPUTimeTraceStack& cpu_time_jfr_stack();\n+  JfrLocalCPUTimeTraceStack& cpu_time_jfr_stack();\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}