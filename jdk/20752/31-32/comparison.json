{"files":[{"patch":"@@ -877,1 +877,1 @@\n-      Atomic::store(&_current_sampling_period_ns, compute_sampling_period(rate));\n+    Atomic::store(&_current_sampling_period_ns, compute_sampling_period(rate));\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-static void assert_epoch_identity(JavaThread* jt, u2 current_epoch) {\n+static bool check_and_assert_epoch_identity(JavaThread* jt, u2 current_epoch) {\n@@ -50,1 +50,1 @@\n-  assert(vthread_epoch == current_epoch, \"invariant\");\n+  return vthread_epoch == current_epoch; \/\/ might be false for the CPU-time sampler\n@@ -64,3 +64,6 @@\n-    DEBUG_ONLY(assert_epoch_identity(jt, current_epoch);)\n-    ThreadInVMfromJava transition(jt);\n-    return JfrJavaEventWriter::event_writer(jt);\n+    if (check_and_assert_epoch_identity(jt, current_epoch)) {\n+      \/\/ the CPU-time sampler can cause the invariant to fail,\n+      \/\/ so we have to check it\n+      ThreadInVMfromJava transition(jt);\n+      return JfrJavaEventWriter::event_writer(jt);\n+    }\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}