{"files":[{"patch":"@@ -41,1 +41,4 @@\n-            var period = ValueParser.parseTimespanWithInfinity(text);\n+            var period = ValueParser.parseTimespanWithInfinity(text, Long.MAX_VALUE);\n+            if (period == Long.MAX_VALUE) {\n+                return null;\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/TimespanRate.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -94,0 +94,3 @@\n+    \/\/ Subset of the experimental events that should have tests\n+    private static final Set<String> experimentalButTestedEvents = Set.of(\"CPUTimeSample\");\n+\n@@ -113,1 +116,3 @@\n-        for (String event : jfrEventTypes) {\n+        Set<String> checkedEvents = new HashSet<>(jfrEventTypes);\n+        checkedEvents.addAll(experimentalButTestedEvents);\n+        for (String event : checkedEvents) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestLookForUntestedEvents.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm jdk.jfr.event.profiling.TestCPUTimeFullStackTrace\n+ * @run main\/othervm jdk.jfr.event.profiling.TestCPUTimeSampleFullStackTrace\n@@ -36,1 +36,1 @@\n-public class TestCPUTimeFullStackTrace {\n+public class TestCPUTimeSampleFullStackTrace {\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleFullStackTrace.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeFullStackTrace.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n- * @run main jdk.jfr.event.profiling.TestCPUTimeMultipleRecordings\n+ * @run main jdk.jfr.event.profiling.TestCPUTimeSampleMultipleRecordings\n@@ -42,1 +42,1 @@\n-public class TestCPUTimeMultipleRecordings {\n+public class TestCPUTimeSampleMultipleRecordings {\n@@ -49,1 +49,1 @@\n-        Thread t = new Thread(TestCPUTimeMultipleRecordings::nativeMethod);\n+        Thread t = new Thread(TestCPUTimeSampleMultipleRecordings::nativeMethod);\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleMultipleRecordings.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeMultipleRecordings.java","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n- * @run main jdk.jfr.event.profiling.TestCPUTimeNative\n+ * @run main jdk.jfr.event.profiling.TestCPUTimeSampleNative\n@@ -41,1 +41,1 @@\n-public class TestCPUTimeNative {\n+public class TestCPUTimeSampleNative {\n@@ -54,1 +54,1 @@\n-            Thread t = new Thread(TestCPUTimeNative::nativeMethod);\n+            Thread t = new Thread(TestCPUTimeSampleNative::nativeMethod);\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleNative.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeNative.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main\/othervm jdk.jfr.event.profiling.TestCPUTimeEventThrottling\n+ * @run main\/othervm jdk.jfr.event.profiling.TestCPUTimeSampleThrottling\n@@ -44,1 +44,1 @@\n-public class TestCPUTimeEventThrottling {\n+public class TestCPUTimeSampleThrottling {\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleThrottling.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeEventThrottling.java","status":"renamed"}]}