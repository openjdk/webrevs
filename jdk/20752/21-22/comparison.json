{"files":[{"patch":"@@ -48,0 +48,1 @@\n+#include <sys\/utsname.h>\n@@ -369,0 +370,6 @@\n+static const int64_t MINIMAL_PERIOD_NOT_FOUND = -1;\n+static const int64_t MINIMAL_PERIOD_NOT_SET = -2;\n+\n+static int64_t _minimal_period = MINIMAL_PERIOD_NOT_SET;\n+\n+static int64_t get_minimal_period();\n@@ -841,0 +848,48 @@\n+\/\/ obtain the maximum frequency of CPU time events\n+static int64_t obtain_kernel_frequency() {\n+  const int BUFFER_SIZE = 256;\n+  struct utsname uname_data;\n+  char filename[BUFFER_SIZE];\n+  char buffer[BUFFER_SIZE];\n+  char config_hz_prefix[] = \"CONFIG_HZ=\";\n+  FILE *file;\n+\n+  \/\/ Get kernel version using uname\n+  if (uname(&uname_data) != 0) {\n+    return -1;\n+  }\n+\n+  \/\/ Construct the filename: \/boot\/config-<kernel_version>\n+  snprintf(filename, sizeof(filename), \"\/boot\/config-%s\", uname_data.release);\n+\n+  \/\/ Open the file\n+  file = fopen(filename, \"r\");\n+  if (!file) {\n+    return -1;\n+  }\n+\n+  \/\/ Read each line and look for the CONFIG_HZ setting\n+  while (fgets(buffer, sizeof(buffer), file)) {\n+    if (strncmp(buffer, config_hz_prefix, strlen(config_hz_prefix)) == 0) {\n+      \/\/ Extract the value after \"CONFIG_HZ=\"\n+      char *value = buffer + strlen(config_hz_prefix);\n+      int64_t hz_value = strtoll(value, NULL, 10);\n+      fclose(file);\n+      return hz_value;\n+    }\n+  }\n+  fclose(file);\n+  return -1;\n+}\n+\n+int64_t get_minimal_period() {\n+  if (_minimal_period == MINIMAL_PERIOD_NOT_SET) {\n+    int64_t hz = obtain_kernel_frequency();\n+    if (hz == 0) {\n+      _minimal_period = -1;\n+    } else if (hz != -1) {\n+      _minimal_period = 1000000000 \/ hz;\n+    }\n+  }\n+  return _minimal_period;\n+}\n@@ -846,1 +901,5 @@\n-  return os::active_processor_count() * 1000000000.0 \/ rate;\n+  int64_t period = os::active_processor_count() * 1000000000.0 \/ rate;\n+  if (get_minimal_period() > 0 && period < get_minimal_period()) {\n+    return get_minimal_period();\n+  }\n+  return period;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"}]}