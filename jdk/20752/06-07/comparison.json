{"files":[{"patch":"@@ -110,16 +110,6 @@\n-class JfrAsyncStackTraceStoreCallback : public CrashProtectionCallback {\n- public:\n-  JfrAsyncStackTraceStoreCallback(const JfrAsyncStackTrace* asyncTrace, JfrStackTrace* trace) :\n-  _asyncTrace(asyncTrace), _trace(trace), _success(false) {}\n-  virtual void call() {\n-    _success = _asyncTrace->inner_store(_trace);\n-  }\n-  bool success() { return _success; }\n-\n- private:\n-  const JfrAsyncStackTrace* _asyncTrace;\n-  JfrStackTrace* _trace;\n-  bool _success;\n-};\n-\n-bool JfrAsyncStackTrace::inner_store(JfrStackTrace* trace) const {\n+bool JfrAsyncStackTrace::store(JfrStackTrace* trace) const {\n+  assert(trace != nullptr, \"invariant\");\n+  Thread* current_thread = Thread::current();\n+  assert(current_thread->is_JfrSampler_thread() || current_thread->in_asgct(), \"invariant\");\n+  trace->set_nr_of_frames(_nr_of_frames);\n+  trace->set_reached_root(_reached_root);\n@@ -141,19 +131,0 @@\n-  return true;\n-}\n-\n-bool JfrAsyncStackTrace::store(JfrStackTrace* trace) const {\n-  assert(trace != nullptr, \"invariant\");\n-  Thread* current_thread = Thread::current();\n-  assert(current_thread->is_JfrSampler_thread() || current_thread->in_asgct(), \"invariant\");\n-  trace->set_nr_of_frames(_nr_of_frames);\n-  trace->set_reached_root(_reached_root);\n-\n-  JfrAsyncStackTraceStoreCallback cb(this, trace);\n-  ThreadCrashProtection crash_protection;\n-  if (!crash_protection.call(cb)) {\n-    log_warning(jfr)(\"JFR CPU time method resolver crashed\");\n-  }\n-  if (!cb.success()) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.cpp","additions":6,"deletions":35,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -87,2 +87,0 @@\n-  bool inner_store(JfrStackTrace* trace) const;\n-\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}