{"files":[{"patch":"@@ -290,1 +290,2 @@\n-    while (true) {\n+    int count = 10000;\n+    while (count -- > 0) {\n@@ -295,1 +296,1 @@\n-        if (Atomic::cmpxchg(&_tail, tail, tail + 1) == tail) {\n+        if (Atomic::cmpxchg(&_tail, tail, tail + 1, memory_order_seq_cst) == tail) {\n@@ -307,0 +308,2 @@\n+    printf(\"JfrTraceQueue::enqueue failed\\n\");\n+    return false;\n@@ -309,0 +312,2 @@\n+  volatile u4 _dropped_because_endless = 0;\n+\n@@ -310,1 +315,2 @@\n-    while (true) {\n+    int count = 10000;\n+    while (count-- > 0) {\n@@ -315,1 +321,1 @@\n-        if (Atomic::cmpxchg(&_head, head, head + 1) == head) {\n+        if (Atomic::cmpxchg(&_head, head, head + 1, memory_order_seq_cst) == head) {\n@@ -328,0 +334,5 @@\n+    Atomic::inc(&_dropped_because_endless);\n+    u4 head = Atomic::load_acquire(&_head);\n+    auto head_state = Atomic::load_acquire(&element(head)->_state);\n+    printf(\"JfrTraceQueue::dequeue failed: head: %d, tail: %d is_full: %d is_empty: %d   count %d \\n\", head, Atomic::load(&_tail), head_state == state_full(head), head_state == state_empty(head), Atomic::load(&_dropped_because_endless));\n+    return nullptr; \/\/ prevent hanging\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"}]}