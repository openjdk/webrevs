{"files":[{"patch":"@@ -797,1 +797,2 @@\n-  vmassert(last_Java_pc() == nullptr, \"already walkable\");\n+  \/\/ two threads can walk this stack concurrently\n+  \/\/ so _last_java_pc might already be set\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -639,1 +639,2 @@\n-  vmassert(last_Java_pc() == nullptr, \"already walkable\");\n+  \/\/ two threads can walk this stack concurrently\n+  \/\/ so _last_java_pc might already be set\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -670,1 +670,2 @@\n-  vmassert(last_Java_pc() == nullptr, \"already walkable\");\n+  \/\/ two threads can walk this stack concurrently\n+  \/\/ so _last_java_pc might already be set\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,8 +29,0 @@\n-Thread* ThreadCrashProtection::_protected_thread = nullptr;\n-ThreadCrashProtection* ThreadCrashProtection::_crash_protection = nullptr;\n-\n-ThreadCrashProtection::ThreadCrashProtection() {\n-  _protected_thread = Thread::current();\n-  assert(_protected_thread->is_JfrSampler_thread(), \"should be JFRSampler\");\n-}\n-\n@@ -50,0 +42,5 @@\n+\n+  Thread* current_thread = Thread::current();\n+  assert(current_thread->is_JfrSampler_thread(), \"should be JFRSampler\");\n+  assert(current_thread->crash_protection() == nullptr, \"not reentrant\");\n+\n@@ -51,3 +48,1 @@\n-    \/\/ make sure we can see in the signal handler that we have crash protection\n-    \/\/ installed\n-    _crash_protection = this;\n+    current_thread->set_crash_protection(this);\n@@ -55,3 +50,1 @@\n-    \/\/ and clear the crash protection\n-    _crash_protection = nullptr;\n-    _protected_thread = nullptr;\n+    current_thread->set_crash_protection(nullptr);\n@@ -61,0 +54,1 @@\n+  current_thread->set_crash_protection(nullptr);\n@@ -62,2 +56,0 @@\n-  _crash_protection = nullptr;\n-  _protected_thread = nullptr;\n@@ -68,1 +60,0 @@\n-  assert(_crash_protection != nullptr, \"must have crash protection\");\n@@ -72,7 +63,2 @@\n-void ThreadCrashProtection::check_crash_protection(int sig,\n-    Thread* thread) {\n-\n-  if (thread != nullptr &&\n-      thread == _protected_thread &&\n-      _crash_protection != nullptr) {\n-\n+void ThreadCrashProtection::check_crash_protection(int sig, Thread* thread) {\n+  if (thread != nullptr && thread->crash_protection() != nullptr) {\n@@ -80,1 +66,1 @@\n-      _crash_protection->restore();\n+      thread->crash_protection()->restore();\n","filename":"src\/hotspot\/os\/posix\/threadCrashProtection_posix.cpp","additions":11,"deletions":25,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    return _crash_protection != nullptr && _protected_thread == thr;\n+    return thr != nullptr && thr->crash_protection() != nullptr;\n@@ -50,1 +50,0 @@\n-  ThreadCrashProtection();\n@@ -55,2 +54,0 @@\n-  static Thread* _protected_thread;\n-  static ThreadCrashProtection* _crash_protection;\n","filename":"src\/hotspot\/os\/posix\/threadCrashProtection_posix.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,8 +29,0 @@\n-Thread* ThreadCrashProtection::_protected_thread = nullptr;\n-ThreadCrashProtection* ThreadCrashProtection::_crash_protection = nullptr;\n-\n-ThreadCrashProtection::ThreadCrashProtection() {\n-  _protected_thread = Thread::current();\n-  assert(_protected_thread->is_JfrSampler_thread(), \"should be JFRSampler\");\n-}\n-\n@@ -44,0 +36,4 @@\n+  Thread* current_thread = Thread::current();\n+  assert(current_thread->is_JfrSampler_thread(), \"should be JFRSampler\");\n+  assert(current_thread->crash_protection() == nullptr, \"not reentrant\");\n+\n@@ -46,1 +42,1 @@\n-    _crash_protection = this;\n+    current_thread->set_crash_protection(this);\n@@ -52,2 +48,1 @@\n-  _crash_protection = nullptr;\n-  _protected_thread = nullptr;\n+  current_thread->set_crash_protection(nullptr);\n","filename":"src\/hotspot\/os\/windows\/threadCrashProtection_windows.cpp","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    return _crash_protection != nullptr && _protected_thread == thr;\n+    return thr != nullptr && thr->crash_protection() != nullptr;\n@@ -47,1 +47,0 @@\n-  ThreadCrashProtection();\n@@ -49,3 +48,0 @@\n-private:\n-  static Thread* _protected_thread;\n-  static ThreadCrashProtection* _crash_protection;\n","filename":"src\/hotspot\/os\/windows\/threadCrashProtection_windows.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n@@ -172,0 +173,6 @@\n+JVM_ENTRY_NO_ENV(jboolean, jfr_set_cpu_throttle(JNIEnv* env, jclass jvm, jdouble rate, jboolean autoadapt))\n+  JfrEventSetting::set_enabled(JfrCPUTimeSampleEvent, rate > 0);\n+  JfrCPUTimeThreadSampling::set_rate(rate, autoadapt == JNI_TRUE);\n+  return JNI_TRUE;\n+JVM_END\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -132,0 +132,2 @@\n+jboolean JNICALL jfr_set_cpu_throttle(JNIEnv* env, jclass jvm, jdouble rate, jboolean autoadapt);\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+      (char*)\"setCPUThrottle\", (char*)\"(DZ)Z\", (void*)jfr_set_cpu_throttle,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -939,0 +939,14 @@\n+  <Event name=\"CPUTimeSample\" category=\"Java Virtual Machine, Profiling\" label=\"CPU Time Method Sample\"\n+    description=\"Snapshot of a threads state from the CPU time sampler. The throttle can be either an upper bound for the event emission rate, e.g. 100\/s, or the cpu-time period, e.g. 10ms, with s, ms, us and ns supported as time units.\"\n+    throttle=\"true\" thread=\"false\" experimental=\"true\">\n+    <Field type=\"StackTrace\" name=\"stackTrace\" label=\"Stack Trace\" \/>\n+    <Field type=\"Thread\" name=\"eventThread\" label=\"Thread\" \/>\n+    <Field type=\"boolean\" name=\"failed\" label=\"Failed\" description=\"Failed to obtain the stack trace\" \/>\n+    <Field type=\"Tickspan\" name=\"samplingPeriod\" label=\"CPU Time Sampling Period\"\/>\n+  <\/Event>\n+\n+  <Event name=\"CPUTimeSampleLoss\" category=\"Java Virtual Machine, Profiling\" label=\"CPU Time Method Profiling Lost Samples\" description=\"Records that the CPU time sampler lost samples because of internal throttling\"\n+    thread=\"false\" stackTrace=\"false\" startTime=\"false\" experimental=\"true\">\n+    <Field type=\"int\" name=\"lostSamples\" label=\"Lost Samples\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  <\/xs:simpleType> \n+  <\/xs:simpleType>\n@@ -126,1 +126,1 @@\n-<\/xs:schema>\n\\ No newline at end of file\n+<\/xs:schema>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xsd","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,889 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"jfr\/recorder\/service\/jfrOptionSet.hpp\"\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n+#include \"jfr\/recorder\/service\/jfrEvent.hpp\"\n+#include \"jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.hpp\"\n+#include \"jfr\/utilities\/jfrTypes.hpp\"\n+#include \"jfr\/recorder\/jfrRecorder.hpp\"\n+#include \"jfr\/periodic\/sampling\/jfrCallTrace.hpp\"\n+#include \"jfr\/recorder\/storage\/jfrBuffer.hpp\"\n+#include \"jfr\/utilities\/jfrTime.hpp\"\n+#include \"jfrfiles\/jfrEventClasses.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+#include \"runtime\/threadSMR.hpp\"\n+#include \"runtime\/threadCrashProtection.hpp\"\n+#include \"runtime\/osThread.hpp\"\n+\n+#if defined(LINUX)\n+#include \"signals_posix.hpp\"\n+\n+const int64_t AUTOADAPT_INTERVAL_MS = 100;\n+\n+enum JfrSampleType {\n+  \/\/ no sample, because thread not in walkable state\n+  NO_SAMPLE = 0,\n+  \/\/ sample from thread while in Java\n+  JAVA_SAMPLE = 1,\n+  \/\/ sample from thread while in native\n+  NATIVE_SAMPLE = 2\n+};\n+\n+static bool thread_state_in_java(JavaThread* thread) {\n+  assert(thread != nullptr, \"invariant\");\n+  switch(thread->thread_state()) {\n+    case _thread_new:\n+    case _thread_uninitialized:\n+    case _thread_new_trans:\n+    case _thread_in_vm_trans:\n+    case _thread_blocked_trans:\n+    case _thread_in_native_trans:\n+    case _thread_blocked:\n+    case _thread_in_vm:\n+    case _thread_in_native:\n+      break;\n+    case _thread_in_Java_trans:\n+    case _thread_in_Java:\n+      return true;\n+    default:\n+      ShouldNotReachHere();\n+      break;\n+  }\n+  return false;\n+}\n+\n+static bool thread_state_in_native(JavaThread* thread) {\n+  assert(thread != nullptr, \"invariant\");\n+  switch(thread->thread_state()) {\n+    case _thread_new:\n+    case _thread_uninitialized:\n+    case _thread_new_trans:\n+    case _thread_in_Java_trans:\n+    case _thread_in_Java:\n+          break;\n+    case _thread_blocked_trans:\n+    case _thread_in_vm_trans:\n+    case _thread_in_native_trans:\n+    case _thread_blocked:\n+    case _thread_in_native:\n+    case _thread_in_vm:\n+      return true;\n+    default:\n+      ShouldNotReachHere();\n+      break;\n+  }\n+  return false;\n+}\n+\n+static bool is_excluded(JavaThread* thread) {\n+  return thread->is_hidden_from_external_view() || thread->jfr_thread_local()->is_excluded();\n+}\n+\n+static JavaThread* get_java_thread_if_valid() {\n+  Thread* raw_thread = Thread::current_or_null_safe();\n+  JavaThread* jt;\n+\n+  if (raw_thread == nullptr || !raw_thread->is_Java_thread() ||\n+      (jt = JavaThread::cast(raw_thread))->is_exiting()) {\n+    return nullptr;\n+  }\n+\n+  if (is_excluded(jt)) {\n+    return nullptr;\n+  }\n+  return jt;\n+}\n+\n+\/\/ A trace of stack frames, contains all information\n+\/\/ collected in the signal handler, required to create\n+\/\/ a JFR event with a stack trace\n+class JfrCPUTimeTrace {\n+  friend class JfrTraceQueue;\n+  u4 _index;\n+  JfrAsyncStackFrame* _frames;\n+  JfrAsyncStackTrace _stacktrace;\n+  u4 _max_frames;\n+  \/\/ error code for the trace, 0 if no error\n+  u4 _error;\n+  int64_t _sampling_period;\n+\n+  JfrSampleType _type;\n+  JfrTicks _start_time;\n+  JfrTicks _end_time;\n+  JavaThread* _sampled_thread;\n+\n+public:\n+  JfrCPUTimeTrace(u4 index, JfrAsyncStackFrame* frames, u4 max_frames):\n+    _index(index), _frames(frames), _stacktrace(_frames, max_frames),\n+    _max_frames(max_frames) {\n+\n+    }\n+\n+  JfrAsyncStackFrame* frames() { return _frames; }\n+  u4 max_frames() const { return _max_frames; }\n+\n+  bool successful() const { return _error == NO_ERROR; }\n+\n+  JfrSampleType type() const { return _type; }\n+\n+  JfrTicks start_time() const { return _start_time; }\n+  void set_end_time(JfrTicks end_time) { _end_time = end_time; }\n+  JfrTicks end_time() const { return _end_time; }\n+  void set_sampled_thread(JavaThread* thread) { _sampled_thread = thread; }\n+  JavaThread* sampled_thread() const { return _sampled_thread; }\n+\n+  JfrAsyncStackTrace& stacktrace() { return _stacktrace; }\n+\n+  int64_t sampling_period() const { return _sampling_period; }\n+\n+  enum SampleError {\n+    NO_ERROR = 0,\n+    ERROR_NO_TRACE = 1,\n+    ERROR_NO_TOPFRAME = 2,\n+    ERROR_JAVA_WALK_FAILED = 3,\n+    ERROR_NATIVE_WALK_FAILED = 4,\n+    ERROR_NO_TOP_METHOD = 5,\n+    ERROR_NO_LAST_JAVA_FRAME = 6\n+  };\n+\n+  \/\/ Record a trace of the current thread\n+  void record_trace(JavaThread* jt, void* ucontext, int64_t sampling_period) {\n+    _stacktrace = JfrAsyncStackTrace(_frames, _max_frames);\n+    set_sampled_thread(jt);\n+    _type = NO_SAMPLE;\n+    _error = ERROR_NO_TRACE;\n+    _start_time = _end_time = JfrTicks::now();\n+    _sampling_period = sampling_period;\n+    if (!jt->in_deopt_handler() && !Universe::heap()->is_stw_gc_active())  {\n+      ThreadInAsgct tia(jt);\n+      if (thread_state_in_java(jt)) {\n+        record_java_trace(jt, ucontext);\n+      } else if (thread_state_in_native(jt)) {\n+        record_native_trace(jt, ucontext);\n+      }\n+    }\n+    _end_time = JfrTicks::now();\n+  }\n+\n+private:\n+\n+  void record_java_trace(JavaThread* jt, void* ucontext) {\n+    _type = JAVA_SAMPLE;\n+    JfrGetCallTrace trace(true, jt);\n+    frame topframe;\n+    if (trace.get_topframe(ucontext, topframe)) {\n+      _error = _stacktrace.record_async(jt, topframe) ? NO_ERROR : ERROR_JAVA_WALK_FAILED;\n+    }\n+  }\n+\n+  void record_native_trace(JavaThread* jt, void* ucontext) {\n+    \/\/ When a thread is only attach it will be native without a last java frame\n+   _type = NATIVE_SAMPLE;\n+    _error = ERROR_NO_TRACE;\n+    if (!jt->has_last_Java_frame()) {\n+      _error = ERROR_NO_LAST_JAVA_FRAME;\n+      return;\n+    }\n+    frame topframe;\n+    if (!jt->pd_get_top_frame_for_signal_handler(&topframe, ucontext, false)) {\n+      _error = ERROR_NO_TOPFRAME;\n+      return;\n+    }\n+    frame first_java_frame;\n+    Method* method = nullptr;\n+    JfrGetCallTrace gct(false, jt);\n+    if (!gct.find_top_frame(topframe, &method, first_java_frame)) {\n+      _error = ERROR_NO_TOPFRAME;\n+      return;\n+    }\n+    if (method == nullptr) {\n+      _error = ERROR_NO_TOP_METHOD;\n+      return;\n+    }\n+    topframe = first_java_frame;\n+    _error = _stacktrace.record_async(jt, topframe) ? NO_ERROR: ERROR_NATIVE_WALK_FAILED;\n+  }\n+};\n+\n+\/\/ Fixed size array-based MPMC queue for storing traces.\n+\/\/ Does not own any frames\n+class JfrTraceQueue {\n+\n+  struct Element {\n+    \/\/ Encodes generation of the element (to solve ABA problem)\n+    \/\/ along with full\/empty flag in the highest bit\n+    u4 _state;\n+    JfrCPUTimeTrace* _trace;\n+  };\n+\n+  Element* _data;\n+  u4 _capacity;\n+\n+  \/\/ Pad _head and _tail to avoid false sharing\n+  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, sizeof(Element*) + sizeof(u4));\n+\n+  volatile u4 _head;\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(u4));\n+\n+  volatile u4 _tail;\n+  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_PADDING_SIZE, sizeof(u4));\n+\n+  inline Element* element(u4 index) {\n+    return &_data[index % _capacity];\n+  }\n+\n+  inline u4 state_empty(u4 index) {\n+    return (index \/ _capacity) & 0x7fffffff;\n+  }\n+\n+  inline u4 state_full(u4 index) {\n+    return (index \/ _capacity) | 0x80000000;\n+  }\n+\n+public:\n+  JfrTraceQueue(u4 capacity) : _capacity(capacity), _head(0), _tail(0) {\n+    _data = JfrCHeapObj::new_array<Element>(capacity);\n+    memset(_data, 0, _capacity * sizeof(Element));\n+  }\n+\n+  ~JfrTraceQueue() {\n+    JfrCHeapObj::free(_data, _capacity * sizeof(Element));\n+  }\n+\n+  bool enqueue(JfrCPUTimeTrace* trace) {\n+    while (true) {\n+      u4 tail = Atomic::load_acquire(&_tail);\n+      Element* e = element(tail);\n+      u4 state = Atomic::load_acquire(&e->_state);\n+      if (state == state_empty(tail)) {\n+        if (Atomic::cmpxchg(&_tail, tail, tail + 1) == tail) {\n+            e->_trace = trace;\n+            Atomic::release_store(&e->_state, state_full(tail));\n+            return true;\n+        }\n+      } else if (state != state_full(tail)) {\n+        return false;\n+      }\n+    }\n+  }\n+\n+  JfrCPUTimeTrace* dequeue() {\n+    while (true) {\n+      u4 head = Atomic::load_acquire(&_head);\n+      Element* e = element(head);\n+      u4 state = Atomic::load_acquire(&e->_state);\n+      if (state == state_full(head)) {\n+        if (Atomic::cmpxchg(&_head, head, head + 1) == head) {\n+            JfrCPUTimeTrace* trace = e->_trace;\n+            Atomic::release_store(&e->_state, state_empty(head + _capacity));\n+            return trace;\n+        }\n+      } else if (state == state_empty(head)) {\n+        return nullptr;\n+      }\n+    }\n+  }\n+\n+  void reset() {\n+    memset(_data, 0, _capacity * sizeof(Element));\n+    _head = 0;\n+    _tail = 0;\n+    OrderAccess::release();\n+  }\n+};\n+\n+\n+\/\/ Two queues for sampling, fresh and filled\n+\/\/ at the start, all traces are in the fresh queue\n+class JfrTraceQueues {\n+  JfrAsyncStackFrame* _frames;\n+  JfrCPUTimeTrace* _traces;\n+  JfrTraceQueue _fresh;\n+  JfrTraceQueue _filled;\n+  u4 _max_traces;\n+  u4 _max_frames_per_trace;\n+\n+public:\n+  JfrTraceQueues(u4 max_traces, u4 max_frames_per_trace):\n+    _frames(JfrCHeapObj::new_array<JfrAsyncStackFrame>(max_traces * max_frames_per_trace)),\n+    _traces(JfrCHeapObj::new_array<JfrCPUTimeTrace>(max_traces)), _fresh(max_traces), _filled(max_traces),\n+    _max_traces(max_traces), _max_frames_per_trace(max_frames_per_trace) {\n+    \/\/ create traces\n+    for (u4 i = 0; i < max_traces; i++) {\n+      _traces[i] = JfrCPUTimeTrace(i, &_frames[i * max_frames_per_trace], max_frames_per_trace);\n+    }\n+    \/\/ initialize fresh queue\n+    for (u4 i = 0; i < max_traces; i++) {\n+      _fresh.enqueue(&_traces[i]);\n+    }\n+  }\n+\n+  ~JfrTraceQueues() {\n+    JfrCHeapObj::free(_frames, sizeof(JfrAsyncStackFrame) * _max_traces * _max_frames_per_trace);\n+    JfrCHeapObj::free(_traces, sizeof(JfrCPUTimeTrace) * _max_traces);\n+  }\n+\n+  JfrTraceQueue& fresh() { return _fresh; }\n+  JfrTraceQueue& filled() { return _filled; }\n+\n+  u4 max_traces() const { return _max_traces; }\n+\n+  void reset() {\n+    _fresh.reset();\n+    for (u4 i = 0; i < _max_traces; i++) {\n+      _fresh.enqueue(&_traces[i]);\n+    }\n+    _filled.reset();\n+  }\n+};\n+\n+class JfrCPUTimeFillCallback;\n+\n+static int64_t compute_sampling_period(double rate);\n+\n+class JfrCPUTimeThreadSampler : public NonJavaThread {\n+  friend class JfrCPUTimeThreadSampling;\n+  friend class JfrCPUTimeFillCallback;\n+ private:\n+  Semaphore _sample;\n+  Thread* _sampler_thread;\n+  JfrTraceQueues _queues;\n+  double _rate;\n+  bool _autoadapt;\n+  volatile int64_t _current_sampling_period_ns = -1;\n+  const size_t _max_frames_per_trace;\n+  volatile bool _disenrolled;\n+  volatile bool _stop_signals = false;\n+  volatile int _active_signal_handlers;\n+  JfrStackFrame *_jfrFrames;\n+  volatile int _ignore_because_queue_full = 0;\n+  volatile int _ignore_because_queue_full_sum = 0;\n+\n+  void renew_enqueue_buffer_if_needed();\n+\n+  void task_stacktrace(JfrSampleType type, JavaThread** last_thread);\n+  JfrCPUTimeThreadSampler(double rate, bool autoadapt, u4 max_traces, u4 max_frames_per_trace);\n+  ~JfrCPUTimeThreadSampler();\n+\n+  void start_thread();\n+\n+  void enroll();\n+  void disenroll();\n+  void update_all_thread_timers();\n+\n+  void autoadapt_period_if_needed();\n+\n+  void process_trace_queue();\n+\n+  void set_rate(double rate, bool autoadapt);\n+  int64_t get_sampling_period() const { return Atomic::load(&_current_sampling_period_ns); };\n+\n+protected:\n+  virtual void post_run();\n+public:\n+  virtual const char* name() const { return \"JFR CPU Time Thread Sampler\"; }\n+  virtual const char* type_name() const { return \"JfrCPUTimeThreadSampler\"; }\n+  bool is_JfrSampler_thread() const { return true; }\n+  void run();\n+  void on_javathread_create(JavaThread* thread);\n+  bool create_timer_for_thread(JavaThread* thread, timer_t &timerid);\n+  void set_timer_time(timer_t timerid, int64_t period_millis);\n+  void on_javathread_terminate(JavaThread* thread);\n+\n+  void handle_timer_signal(void* context);\n+  void init_timers();\n+  void stop_timer();\n+};\n+\n+\n+JfrCPUTimeThreadSampler::JfrCPUTimeThreadSampler(double rate, bool autoadapt, u4 max_traces, u4 max_frames_per_trace) :\n+  _sample(),\n+  _sampler_thread(nullptr),\n+  _queues(max_traces, max_frames_per_trace),\n+  _rate(rate),\n+  _autoadapt(autoadapt),\n+  _current_sampling_period_ns(compute_sampling_period(rate)),\n+  _max_frames_per_trace(max_frames_per_trace),\n+  _disenrolled(true),\n+  _jfrFrames(JfrCHeapObj::new_array<JfrStackFrame>(_max_frames_per_trace)) {\n+  assert(rate >= 0, \"invariant\");\n+}\n+\n+JfrCPUTimeThreadSampler::~JfrCPUTimeThreadSampler() {\n+  JfrCHeapObj::free(_jfrFrames, sizeof(JfrStackFrame) * _max_frames_per_trace);\n+}\n+\n+void JfrCPUTimeThreadSampler::on_javathread_create(JavaThread* thread) {\n+  if (thread->is_Compiler_thread()) {\n+    return;\n+  }\n+  if (thread->jfr_thread_local() != nullptr) {\n+    timer_t timerid;\n+    if (create_timer_for_thread(thread, timerid) && thread->jfr_thread_local() != nullptr) {\n+      thread->jfr_thread_local()->set_timerid(timerid);\n+    }\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::on_javathread_terminate(JavaThread* thread) {\n+  if (thread->jfr_thread_local() != nullptr && thread->jfr_thread_local()->has_timerid()) {\n+    timer_delete(thread->jfr_thread_local()->timerid());\n+    thread->jfr_thread_local()->unset_timerid();\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::start_thread() {\n+  if (os::create_thread(this, os::os_thread)) {\n+    os::start_thread(this);\n+  } else {\n+    log_error(jfr)(\"Failed to create thread for thread sampling\");\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::enroll() {\n+  if (Atomic::cmpxchg(&_disenrolled, true, false)) {\n+    log_info(jfr)(\"Enrolling CPU thread sampler\");\n+    _sample.signal();\n+    init_timers();\n+    log_trace(jfr)(\"Enrolled CPU thread sampler\");\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::disenroll() {\n+  if (Atomic::cmpxchg(&_disenrolled, false, true)) {\n+    log_info(jfr)(\"Disenrolling CPU thread sampler\");\n+    stop_timer();\n+    Atomic::store(&_stop_signals, true);\n+    while (_active_signal_handlers > 0) {\n+      \/\/ wait for all signal handlers to finish\n+      os::naked_short_nanosleep(1000);\n+    }\n+    _sample.wait();\n+    _queues.reset();\n+    Atomic::store(&_stop_signals, false);\n+    log_trace(jfr)(\"Disenrolled CPU thread sampler\");\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::run() {\n+  assert(_sampler_thread == nullptr, \"invariant\");\n+  _sampler_thread = this;\n+  int64_t last_autoadapt_check = os::javaTimeNanos();\n+  while (true) {\n+    if (!_sample.trywait()) {\n+      \/\/ disenrolled\n+      _sample.wait();\n+    }\n+    _sample.signal();\n+\n+    if (os::javaTimeNanos() - last_autoadapt_check > AUTOADAPT_INTERVAL_MS * 1000000) {\n+      autoadapt_period_if_needed();\n+      last_autoadapt_check = os::javaTimeNanos();\n+    }\n+\n+    int64_t period_nanos = get_sampling_period();\n+    period_nanos = period_nanos == 0 ? max_jlong : period_nanos;\n+    \/\/ If both periods are max_jlong, it implies the sampler is in the process of\n+    \/\/ disenrolling. Loop back for graceful disenroll by means of the semaphore.\n+    if (period_nanos == max_jlong) {\n+      continue;\n+    }\n+    int ignored = Atomic::xchg(&_ignore_because_queue_full, 0);\n+    if (ignored != 0) {\n+      log_info(jfr)(\"CPU thread sampler ignored %d elements because of full queue (sum %d)\\n\", ignored, _ignore_because_queue_full_sum);\n+      if (EventCPUTimeSampleLoss::is_enabled()) {\n+        EventCPUTimeSampleLoss event;\n+        event.set_starttime(JfrTicks::now());\n+        event.set_lostSamples(ignored);\n+        event.commit();\n+      }\n+    }\n+\n+    \/\/ process all filled traces\n+    process_trace_queue();\n+\n+    int64_t sleep_to_next = period_nanos \/ os::processor_count() \/ 2;\n+    if (sleep_to_next >= NANOSECS_PER_SEC) {\n+      sleep_to_next = NANOSECS_PER_SEC - 1;\n+    }\n+    os::naked_short_nanosleep(sleep_to_next);\n+  }\n+}\n+\n+\/\/ crash protection for JfrThreadLocal::thread_id(trace->sampled_thread())\n+\/\/ because the thread could be deallocated between the time of recording\n+\/\/ and the time of processing\n+class JFRRecordSampledThreadCallback : public CrashProtectionCallback {\n+  friend class JfrCPUTimeThreadSampler;\n+ public:\n+  JFRRecordSampledThreadCallback(JavaThread* thread) :\n+    _thread(thread) {\n+  }\n+  virtual void call() {\n+    _thread_id = JfrThreadLocal::thread_id(_thread);\n+  }\n+ private:\n+  JavaThread* _thread;\n+  traceid _thread_id;\n+};\n+\n+\n+static size_t count = 0;\n+\n+void JfrCPUTimeThreadSampler::process_trace_queue() {\n+  JfrCPUTimeTrace* trace;\n+  while ((trace = _queues.filled().dequeue()) != nullptr) {\n+    \/\/ make sure we have enough space in the JFR enqueue buffer\n+    renew_enqueue_buffer_if_needed();\n+    \/\/ create event, convert frames (resolve method ids)\n+    \/\/ we can't do the conversion in the signal handler,\n+    \/\/ as this causes segmentation faults related to the\n+    \/\/ enqueue buffers\n+    EventCPUTimeSample event;\n+    event.set_failed(true);\n+    if (trace->successful() && trace->stacktrace().nr_of_frames() > 0) {\n+      JfrStackTrace jfrTrace(_jfrFrames, _max_frames_per_trace);\n+      if (trace->stacktrace().store(&jfrTrace) && jfrTrace.nr_of_frames() > 0) {\n+        traceid id = JfrStackTraceRepository::add(jfrTrace);\n+        event.set_stackTrace(id);\n+        event.set_failed(false);\n+      } else {\n+        event.set_stackTrace(0);\n+      }\n+    } else {\n+      event.set_stackTrace(0);\n+    }\n+    event.set_starttime(trace->start_time());\n+    event.set_endtime(trace->end_time());\n+    event.set_samplingPeriod(Ticks(trace->sampling_period() \/ 1000000000.0 * JfrTime::frequency()) - Ticks(0));\n+\n+    if (EventCPUTimeSample::is_enabled()) {\n+      JFRRecordSampledThreadCallback cb(trace->sampled_thread());\n+      ThreadCrashProtection crash_protection;\n+      if (crash_protection.call(cb)) {\n+        event.set_eventThread(cb._thread_id);\n+        event.commit();\n+        count++;\n+        if (count % 10000 == 0) {\n+          log_trace(jfr)(\"CPU thread sampler count %d\\n\", (int) count);\n+        }\n+      } else {\n+        log_trace(jfr)(\"Couldn't obtain thread id\\n\");\n+      }\n+    }\n+    _queues.fresh().enqueue(trace);\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::post_run() {\n+  this->NonJavaThread::post_run();\n+  delete this;\n+}\n+\n+void JfrCPUTimeThreadSampler::renew_enqueue_buffer_if_needed() {\n+  const JfrBuffer* buffer = JfrTraceIdLoadBarrier::get_sampler_enqueue_buffer(this);\n+  if (buffer == nullptr || buffer->free_size() < 4 * _max_frames_per_trace * 100) {\n+    JfrTraceIdLoadBarrier::renew_sampler_enqueue_buffer(this);\n+  }\n+}\n+\n+static JfrCPUTimeThreadSampling* _instance = nullptr;\n+\n+JfrCPUTimeThreadSampling& JfrCPUTimeThreadSampling::instance() {\n+  return *_instance;\n+}\n+\n+JfrCPUTimeThreadSampling* JfrCPUTimeThreadSampling::create() {\n+  assert(_instance == nullptr, \"invariant\");\n+  _instance = new JfrCPUTimeThreadSampling();\n+  return _instance;\n+}\n+\n+void JfrCPUTimeThreadSampling::destroy() {\n+  if (_instance != nullptr) {\n+    delete _instance;\n+    _instance = nullptr;\n+  }\n+}\n+\n+JfrCPUTimeThreadSampling::JfrCPUTimeThreadSampling() : _sampler(nullptr) {}\n+\n+JfrCPUTimeThreadSampling::~JfrCPUTimeThreadSampling() {\n+  if (_sampler != nullptr) {\n+    _sampler->disenroll();\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampling::create_sampler(double rate, bool autoadapt) {\n+  assert(_sampler == nullptr, \"invariant\");\n+  \/\/ factor of 20 seems to be a sweet spot between memory consumption\n+  \/\/ and lost samples for 1ms interval, we additionally keep in a\n+  \/\/ predetermined range to avoid adverse effects with too many\n+  \/\/ or too little elements in the queue, as we only have\n+  \/\/ one thread that processes the queue\n+  int64_t period_millis = compute_sampling_period(rate) \/ 1000000;\n+  int queue_size = 20 * os::processor_count() \/ (period_millis > 9 ? 2 : 1);\n+  \/\/ the queue should not be larger a factor of 4 of the max chunk size\n+  \/\/ so that it usually can be processed in one go without\n+  \/\/ allocating a new chunk\n+  long max_chunk_size = JfrOptionSet::max_chunk_size() == 0 ? 12 * 1024 * 1024 : JfrOptionSet::max_chunk_size() \/ 2;\n+  int max_size = max_chunk_size \/ 2 \/ wordSize \/ JfrOptionSet::stackdepth();\n+  if (queue_size < 20 * 4) {\n+    queue_size = 20 * 4;\n+  } else if (queue_size > max_size) {\n+    queue_size = max_size;\n+  }\n+  _sampler = new JfrCPUTimeThreadSampler(rate, autoadapt, queue_size, JfrOptionSet::stackdepth());\n+  _sampler->start_thread();\n+  _sampler->enroll();\n+}\n+\n+void JfrCPUTimeThreadSampling::update_run_state(double rate, bool autoadapt) {\n+  if (rate != 0) {\n+    if (_sampler == nullptr) {\n+      create_sampler(rate, autoadapt);\n+    } else {\n+      _sampler->set_rate(rate, autoadapt);\n+      _sampler->enroll();\n+    }\n+    return;\n+  }\n+  if (_sampler != nullptr) {\n+    _sampler->set_rate(rate \/* 0 *\/, autoadapt);\n+    _sampler->disenroll();\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampling::set_rate(double rate, bool autoadapt) {\n+  assert(rate >= 0, \"invariant\");\n+  if (_instance == nullptr) {\n+    return;\n+  }\n+  instance().set_rate_value(rate, autoadapt);\n+}\n+\n+void JfrCPUTimeThreadSampling::set_rate_value(double rate, bool autoadapt) {\n+  if (_sampler != nullptr) {\n+    _sampler->set_rate(rate, autoadapt);\n+  }\n+  update_run_state(rate, autoadapt);\n+}\n+\n+void JfrCPUTimeThreadSampling::on_javathread_create(JavaThread *thread) {\n+  if (_instance != nullptr && _instance->_sampler != nullptr) {\n+    _instance->_sampler->on_javathread_create(thread);\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampling::on_javathread_terminate(JavaThread *thread) {\n+  if (_instance != nullptr && _instance->_sampler != nullptr) {\n+    _instance->_sampler->on_javathread_terminate(thread);\n+  }\n+}\n+\n+void handle_timer_signal(int signo, siginfo_t* info, void* context) {\n+  assert(_instance != nullptr, \"invariant\");\n+  _instance->handle_timer_signal(context);\n+}\n+\n+\n+void JfrCPUTimeThreadSampling::handle_timer_signal(void* context) {\n+  assert(_sampler != nullptr, \"invariant\");\n+  if (Atomic::load(&_sampler->_stop_signals)) {\n+    return;\n+  }\n+  Atomic::inc(&_sampler->_active_signal_handlers);\n+  _sampler->handle_timer_signal(context);\n+  Atomic::dec(&_sampler->_active_signal_handlers);\n+}\n+\n+void JfrCPUTimeThreadSampler::handle_timer_signal(void* context) {\n+  JavaThread* jt = get_java_thread_if_valid();\n+  if (jt == nullptr) {\n+    return;\n+  }\n+  JfrCPUTimeTrace* trace = this->_queues.fresh().dequeue();\n+  if (trace != nullptr) {\n+    trace->record_trace(jt, context, get_sampling_period());\n+    this->_queues.filled().enqueue(trace);\n+  } else {\n+    Atomic::inc(&_ignore_because_queue_full);\n+    Atomic::inc(&_ignore_because_queue_full_sum);\n+  }\n+}\n+\n+const int SIG = SIGPROF;\n+\n+void JfrCPUTimeThreadSampler::set_timer_time(timer_t timerid, int64_t period_nanos) {\n+  struct itimerspec its;\n+  if (period_nanos == 0) {\n+    its.it_interval.tv_sec = 0;\n+    its.it_interval.tv_nsec = 0;\n+  } else {\n+    its.it_interval.tv_sec = period_nanos \/ NANOSECS_PER_SEC;\n+    its.it_interval.tv_nsec = period_nanos % NANOSECS_PER_SEC;\n+  }\n+  its.it_value = its.it_interval;\n+  if (timer_settime(timerid, 0, &its, NULL) == -1) {\n+    warning(\"Failed to set timer for thread sampling: %s\", os::strerror(os::get_last_error()));\n+  }\n+}\n+\n+bool JfrCPUTimeThreadSampler::create_timer_for_thread(JavaThread* thread, timer_t& timerid) {\n+  if (thread->osthread() == nullptr || thread->osthread()->thread_id() == 0){\n+    return false;\n+  }\n+  timer_t t;\n+  OSThread::thread_id_t tid = thread->osthread()->thread_id();\n+  struct sigevent sev;\n+  sev.sigev_notify = SIGEV_THREAD_ID;\n+  sev.sigev_signo = SIG;\n+  sev.sigev_value.sival_ptr = &t;\n+  ((int*)&sev.sigev_notify)[1] = tid;\n+  clockid_t clock;\n+  int err = pthread_getcpuclockid(thread->osthread()->pthread_id(), &clock);\n+  if (err != 0) {\n+    log_error(jfr)(\"Failed to get clock for thread sampling: %s\", os::strerror(err));\n+    return false;\n+  }\n+  if (timer_create(clock, &sev, &t) < 0) {\n+    return false;\n+  }\n+  int64_t period = get_sampling_period();\n+  if (period != 0) {\n+    set_timer_time(t, period);\n+  }\n+  timerid = t;\n+  return true;\n+}\n+\n+void JfrCPUTimeThreadSampler::init_timers() {\n+  \/\/ install sig handler for sig\n+  PosixSignals::install_generic_signal_handler(SIG, (void*)::handle_timer_signal);\n+\n+  \/\/ create timers for all existing threads\n+  MutexLocker tlock(Threads_lock);\n+  ThreadsListHandle tlh;\n+  for (size_t i = 0; i < tlh.length(); i++) {\n+    on_javathread_create(tlh.thread_at(i));\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::stop_timer() {\n+  MutexLocker tlock(Threads_lock);\n+  ThreadsListHandle tlh;\n+  for (size_t i = 0; i < tlh.length(); i++) {\n+    JavaThread* thread = tlh.thread_at(i);\n+    JfrThreadLocal* jfr_thread_local = thread->jfr_thread_local();\n+    if (jfr_thread_local != nullptr && jfr_thread_local->has_timerid()) {\n+      timer_delete(jfr_thread_local->timerid());\n+      thread->jfr_thread_local()->unset_timerid();\n+    }\n+  }\n+}\n+\n+\n+int64_t compute_sampling_period(double rate) {\n+  if (rate == 0) {\n+    return 0;\n+  }\n+  return os::active_processor_count() * 1000000000.0 \/ rate;\n+}\n+\n+void JfrCPUTimeThreadSampler::autoadapt_period_if_needed() {\n+  int64_t current_period = get_sampling_period();\n+  if (_autoadapt || current_period == -1) {\n+    int64_t period = compute_sampling_period(_rate);\n+    if (period != current_period) {\n+      Atomic::store(&_current_sampling_period_ns, period);\n+      update_all_thread_timers();\n+    }\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::set_rate(double rate, bool autoadapt) {\n+  _rate = rate;\n+  _autoadapt = autoadapt;\n+  if (_rate > 0 && Atomic::load(&_disenrolled) == false) {\n+    autoadapt_period_if_needed();\n+  } else {\n+      Atomic::store(&_current_sampling_period_ns, compute_sampling_period(rate));\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampler::update_all_thread_timers() {\n+  int64_t period_millis = get_sampling_period();\n+  MutexLocker tlock(Threads_lock);\n+  ThreadsListHandle tlh;\n+  for (size_t i = 0; i < tlh.length(); i++) {\n+    JavaThread* thread = tlh.thread_at(i);\n+    JfrThreadLocal* jfr_thread_local = thread->jfr_thread_local();\n+    if (jfr_thread_local != nullptr && jfr_thread_local->has_timerid()) {\n+      set_timer_time(jfr_thread_local->timerid(), period_millis);\n+    }\n+  }\n+}\n+\n+#else\n+\n+static bool _showed_warning = false;\n+\n+void warn() {\n+  if (!_showed_warning) {\n+    warning(\"CPU time method sampling not supported in JFR on your platform\");\n+    _showed_warning = true;\n+  }\n+}\n+\n+static JfrCPUTimeThreadSampling* _instance = nullptr;\n+\n+JfrCPUTimeThreadSampling& JfrCPUTimeThreadSampling::instance() {\n+  return *_instance;\n+}\n+\n+JfrCPUTimeThreadSampling* JfrCPUTimeThreadSampling::create() {\n+  _instance = new JfrCPUTimeThreadSampling();\n+  return _instance;\n+}\n+\n+void JfrCPUTimeThreadSampling::destroy() {\n+  delete _instance;\n+  _instance = nullptr;\n+}\n+\n+void JfrCPUTimeThreadSampling::set_rate(double rate, bool autoadapt) {\n+  if (rate != 0) {\n+    warn();\n+  }\n+}\n+\n+void JfrCPUTimeThreadSampling::on_javathread_create(JavaThread* thread) {\n+}\n+\n+void JfrCPUTimeThreadSampling::on_javathread_terminate(JavaThread* thread) {\n+}\n+\n+#endif \/\/ defined(LINUX) && defined(INCLUDE_JFR)\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":889,"deletions":0,"binary":false,"changes":889,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_JFR_PERIODIC_SAMPLING_JFRCPUTIMETHREADSAMPLER_HPP\n+#define SHARE_JFR_PERIODIC_SAMPLING_JFRCPUTIMETHREADSAMPLER_HPP\n+\n+#include \"jfr\/utilities\/jfrAllocation.hpp\"\n+\n+class JavaThread;\n+\n+#if defined(LINUX)\n+\n+\n+class JfrCPUTimeThreadSampler;\n+\n+class JfrCPUTimeThreadSampling : public JfrCHeapObj {\n+  friend class JfrRecorder;\n+ private:\n+\n+  JfrCPUTimeThreadSampler* _sampler;\n+\n+  void create_sampler(double rate, bool autoadapt);\n+  void set_rate_value(double rate, bool autoadapt);\n+\n+  JfrCPUTimeThreadSampling();\n+  ~JfrCPUTimeThreadSampling();\n+\n+  static JfrCPUTimeThreadSampling& instance();\n+  static JfrCPUTimeThreadSampling* create();\n+  static void destroy();\n+\n+  void update_run_state(double rate, bool autoadapt);\n+\n+ public:\n+  static void set_rate(double rate, bool autoadapt);\n+\n+  static void on_javathread_create(JavaThread* thread);\n+  static void on_javathread_terminate(JavaThread* thread);\n+  void handle_timer_signal(void* context);\n+};\n+\n+#else\n+\n+\/\/ a basic implementation on other platforms that\n+\/\/ emits warnings\n+\n+class JfrCPUTimeThreadSampling : public JfrCHeapObj {\n+  friend class JfrRecorder;\n+private:\n+  static JfrCPUTimeThreadSampling& instance();\n+  static JfrCPUTimeThreadSampling* create();\n+  static void destroy();\n+\n+ public:\n+  static void set_rate(double rate, bool autoadapt);\n+\n+  static void on_javathread_create(JavaThread* thread);\n+  static void on_javathread_terminate(JavaThread* thread);\n+};\n+\n+#endif \/\/ defined(LINUX)\n+\n+\n+#endif \/\/ SHARE_JFR_PERIODIC_SAMPLING_JFRCPUTIMETHREADSAMPLER_HPP\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -75,0 +75,1 @@\n+  friend class JfrCPUTimeThreadSampler;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdLoadBarrier.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n@@ -308,0 +309,3 @@\n+  if (!create_cpu_time_thread_sampling()) {\n+    return false;\n+  }\n@@ -322,0 +326,1 @@\n+static JfrCPUTimeThreadSampling* _cpu_time_thread_sampling = nullptr;\n@@ -394,0 +399,6 @@\n+bool JfrRecorder::create_cpu_time_thread_sampling() {\n+  assert(_cpu_time_thread_sampling == nullptr, \"invariant\");\n+  _cpu_time_thread_sampling = JfrCPUTimeThreadSampling::create();\n+  return _cpu_time_thread_sampling != nullptr;\n+}\n+\n@@ -432,0 +443,4 @@\n+  if (_cpu_time_thread_sampling != nullptr) {\n+    JfrCPUTimeThreadSampling::destroy();\n+    _cpu_time_thread_sampling = nullptr;\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  static bool create_cpu_time_thread_sampling();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,0 +65,3 @@\n+  if (event_id == JfrCPUTimeSampleEvent) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEventThrottler.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.hpp\"\n+#include \"jfr\/recorder\/stacktrace\/jfrStackTrace.hpp\"\n+#include \"jfr\/utilities\/jfrTypes.hpp\"\n+#include \"jfr\/recorder\/repository\/jfrChunkWriter.hpp\"\n+#include \"jfr\/recorder\/storage\/jfrBuffer.hpp\"\n+#include \"runtime\/threadCrashProtection.hpp\"\n+#include \"runtime\/vframe.inline.hpp\"\n+\n+JfrAsyncStackFrame::JfrAsyncStackFrame(const Method* method, int bci, u1 type, int lineno, const InstanceKlass* ik) :\n+  _klass(ik), _method(method), _line(lineno), _bci(bci), _type(type) {}\n+\n+\n+JfrAsyncStackTrace::JfrAsyncStackTrace(JfrAsyncStackFrame* frames, u4 max_frames) :\n+  _frames(frames),\n+  _nr_of_frames(0),\n+  _max_frames(max_frames),\n+  _reached_root(false)\n+  {}\n+\n+bool JfrAsyncStackTrace::record_async(JavaThread* jt, const frame& frame) {\n+  NoHandleMark nhm;\n+\n+  assert(jt != nullptr, \"invariant\");\n+  Thread* current_thread = Thread::current_or_null_safe();\n+  if (current_thread == nullptr) {\n+    return false;\n+  }\n+  assert(current_thread->in_asgct(), \"invariant\");\n+\n+  u4 count = 0;\n+  _reached_root = true;\n+\n+  JfrVframeStream vfs(jt, frame, false, true);\n+\n+  while (!vfs.at_end()) {\n+    if (count >= _max_frames) {\n+      _reached_root = false;\n+      break;\n+    }\n+    const Method* method = vfs.method();\n+    if (method == nullptr || !Method::is_valid_method(method)) {\n+      \/\/ we throw away everything we've gathered in this sample since\n+      \/\/ none of it is safe\n+      return false;\n+    }\n+    u1 type = vfs.is_interpreted_frame() ? JfrStackFrame::FRAME_INTERPRETER : JfrStackFrame::FRAME_JIT;\n+    int bci = 0;\n+    if (method->is_native()) {\n+      type = JfrStackFrame::FRAME_NATIVE;\n+    } else {\n+      bci = vfs.bci();\n+    }\n+\n+    intptr_t* frame_id = vfs.frame_id();\n+    vfs.next_vframe();\n+    if (type == JfrStackFrame::FRAME_JIT && !vfs.at_end() && frame_id == vfs.frame_id()) {\n+      \/\/ This frame and the caller frame are both the same physical\n+      \/\/ frame, so this frame is inlined into the caller.\n+      type = JfrStackFrame::FRAME_INLINE;\n+    }\n+    _frames[count] = JfrAsyncStackFrame(method, bci, type, method->line_number_from_bci(bci), method->method_holder());\n+    count++;\n+  }\n+  _nr_of_frames = count;\n+  return count > 0;\n+}\n+\n+class JfrAsyncStackTraceStoreCallback : public CrashProtectionCallback {\n+ public:\n+  JfrAsyncStackTraceStoreCallback(const JfrAsyncStackTrace* asyncTrace, JfrStackTrace* trace) :\n+  _asyncTrace(asyncTrace), _trace(trace), _success(false) {}\n+  virtual void call() {\n+    _success = _asyncTrace->inner_store(_trace);\n+  }\n+  bool success() { return _success; }\n+\n+ private:\n+  const JfrAsyncStackTrace* _asyncTrace;\n+  JfrStackTrace* _trace;\n+  bool _success;\n+};\n+\n+bool JfrAsyncStackTrace::inner_store(JfrStackTrace* trace) const {\n+  traceid hash = 1;\n+  for (u4 i = 0; i < _nr_of_frames; i++) {\n+    const JfrAsyncStackFrame& frame = _frames[i];\n+    if (!Method::is_valid_method(frame._method)) {\n+      \/\/ we throw away everything we've gathered in this sample since\n+      \/\/ none of it is safe\n+      return false;\n+    }\n+    const traceid mid = JfrTraceId::load(frame._method);\n+    hash = (hash * 31) + mid;\n+    hash = (hash * 31) + frame._bci;\n+    hash = (hash * 31) + frame._type;\n+    trace->_frames[i] = JfrStackFrame(mid, frame._bci, frame._type, frame._line, frame._klass);\n+  }\n+  trace->set_hash(hash);\n+  return true;\n+}\n+\n+bool JfrAsyncStackTrace::store(JfrStackTrace* trace) const {\n+  assert(trace != nullptr, \"invariant\");\n+  Thread* current_thread = Thread::current();\n+  assert(current_thread->is_JfrSampler_thread() || current_thread->in_asgct(), \"invariant\");\n+  trace->set_nr_of_frames(_nr_of_frames);\n+  trace->set_reached_root(_reached_root);\n+\n+  JfrAsyncStackTraceStoreCallback cb(this, trace);\n+  ThreadCrashProtection crash_protection;\n+  if (!crash_protection.call(cb)) {\n+    log_warning(jfr)(\"JFR CPU time method resolver crashed\");\n+  }\n+  if (!cb.success()) {\n+    return false;\n+  }\n+\n+  trace->_lineno = true;\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.cpp","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2011, 2024, SAP SE, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_JFR_RECORDER_STACKTRACE_JFRASYNCSTACKTRACE_HPP\n+#define SHARE_JFR_RECORDER_STACKTRACE_JFRASYNCSTACKTRACE_HPP\n+\n+#include \"jfr\/utilities\/jfrTypes.hpp\"\n+#include \"oops\/method.hpp\"\n+\n+\/\/ This is based on JfrStackTrace, with the major difference that methods\n+\/\/ are not resolved\n+\n+class frame;\n+class InstanceKlass;\n+class JavaThread;\n+class JfrStackTrace;\n+\n+class JfrAsyncStackFrame {\n+  friend class JfrAsyncStackTrace;\n+ private:\n+  const InstanceKlass* _klass;\n+  const Method* _method;\n+  int _line;\n+  int _bci;\n+  u1 _type;\n+\n+ public:\n+  JfrAsyncStackFrame(const Method* _method, int bci, u1 type, int lineno, const InstanceKlass* klass);\n+\n+  enum : u1 {\n+    FRAME_INTERPRETER = 0,\n+    FRAME_JIT,\n+    FRAME_INLINE,\n+    FRAME_NATIVE,\n+    NUM_FRAME_TYPES\n+  };\n+};\n+\n+class JfrAsyncStackTraceStoreCallback;\n+\n+\/\/ A trace without methods resolved to ids\n+class JfrAsyncStackTrace {\n+  friend class JfrCPUTimeTrace;\n+  friend class JfrAsyncStackTraceStoreCallback;\n+ private:\n+  JfrAsyncStackFrame* _frames;\n+  u4 _nr_of_frames;\n+  u4 _max_frames;\n+  bool _reached_root;\n+\n+  void set_nr_of_frames(u4 nr_of_frames) { _nr_of_frames = nr_of_frames; }\n+  void set_reached_root(bool reached_root) { _reached_root = reached_root; }\n+  void resolve_linenos() const;\n+\n+  bool record_async(JavaThread* other_thread, const frame& frame);\n+\n+  bool full_stacktrace() const { return _reached_root; }\n+\n+  JfrAsyncStackTrace(JfrAsyncStackFrame* frames, u4 max_frames);\n+\n+  bool inner_store(JfrStackTrace* trace) const;\n+\n+ public:\n+\n+  \/\/ store the trace in a JfrStackTrace object, resolving methods and line numbers\n+  bool store(JfrStackTrace* trace) const;\n+\n+  u4 nr_of_frames() const { return _nr_of_frames; }\n+};\n+\n+#endif \/\/ SHARE_JFR_RECORDER_STACKTRACE_JFRASYNCSTACKTRACE_HPP\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.hpp","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -141,12 +141,0 @@\n-class JfrVframeStream : public vframeStreamCommon {\n- private:\n-  bool _vthread;\n-  const ContinuationEntry* _cont_entry;\n-  bool _async_mode;\n-  bool step_to_sender();\n-  void next_frame();\n- public:\n-  JfrVframeStream(JavaThread* jt, const frame& fr, bool stop_at_java_call_stub, bool async_mode);\n-  void next_vframe();\n-};\n-\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/vframe.hpp\"\n@@ -37,0 +38,12 @@\n+class JfrVframeStream : public vframeStreamCommon {\n+ private:\n+  bool _vthread;\n+  const ContinuationEntry* _cont_entry;\n+  bool _async_mode;\n+  bool step_to_sender();\n+  void next_frame();\n+ public:\n+  JfrVframeStream(JavaThread* jt, const frame& fr, bool stop_at_java_call_stub, bool async_mode);\n+  void next_vframe();\n+};\n+\n@@ -71,0 +84,3 @@\n+  friend class JfrCPUTimeTrace;\n+  friend class JfrAsyncStackTrace;\n+  friend class JfrCPUTimeThreadSampler;\n@@ -110,0 +126,1 @@\n+  u4 nr_of_frames() const { return _nr_of_frames; }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  friend class JfrCPUTimeThreadSampler;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n@@ -123,1 +124,3 @@\n-      send_java_thread_start_event(JavaThread::cast(t));\n+      JavaThread *const jt = JavaThread::cast(t);\n+      send_java_thread_start_event(jt);\n+      JfrCPUTimeThreadSampling::on_javathread_create(jt);\n@@ -219,0 +222,1 @@\n+    JfrCPUTimeThreadSampling::on_javathread_terminate(jt);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,5 @@\n+#ifdef LINUX\n+\/\/ required for timer_t type\n+#include <signal.h>\n+#endif\n+\n@@ -75,0 +80,2 @@\n+  LINUX_ONLY(bool _has_cpu_timer = false);\n+  LINUX_ONLY(timer_t _cpu_timer);\n@@ -281,0 +288,20 @@\n+  \/\/ CPU time sampling\n+#ifdef LINUX\n+  void set_timerid(timer_t timer) {\n+    _has_cpu_timer = true;\n+    _cpu_timer = timer;\n+  }\n+\n+  void unset_timerid() {\n+    _has_cpu_timer = false;\n+  }\n+\n+  timer_t timerid() const {\n+    return _cpu_timer;\n+  }\n+\n+  bool has_timerid() const {\n+    return _has_cpu_timer;\n+  }\n+#endif\n+\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+class ThreadCrashProtection;\n@@ -81,0 +82,1 @@\n+\/\/     - JfrCPUTimeThreadSampler\n@@ -631,0 +633,1 @@\n+  ThreadCrashProtection* _crash_protection = nullptr;\n@@ -632,0 +635,1 @@\n+\n@@ -633,0 +637,4 @@\n+  ThreadCrashProtection* crash_protection() const { return _crash_protection; }\n+  void set_crash_protection(ThreadCrashProtection* cp) { _crash_protection = cp; }\n+\n+  \/\/ in ASGCT or the signal handler of the JfrCPUTimeSampler\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -239,0 +239,1 @@\n+  friend class JfrCPUTimeThreadSampler;\n","filename":"src\/hotspot\/share\/utilities\/ticks.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.jfr.internal.settings.CPUThrottleSetting;\n@@ -83,1 +84,1 @@\n-        if (eventType.hasStackTrace()) {\n+        if (eventType.hasStackTrace() && !eventType.isCPUTimeMethodSampling()) {\n@@ -322,0 +323,3 @@\n+        if (type.getName().equals(\"jdk.CPUTimeSample\")) {\n+            return new Control(new CPUThrottleSetting(type), def);\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -273,0 +273,10 @@\n+    \/**\n+     * Set the maximum event emission rate for the CPU time sampler\n+     *\n+     * Setting rate to 0 turns off the CPU time method sampler.\n+     *\n+     * @param rate the new rate in events per second\n+     * @param autoadapt true if the rate should be adapted automatically\n+     *\/\n+    public static native boolean setCPUThrottle(double rate, boolean autoadapt);\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.jfr.events.ActiveSettingEvent;\n@@ -35,0 +36,1 @@\n+import jdk.jfr.internal.util.TimespanRate;\n@@ -46,0 +48,1 @@\n+    private final boolean isCPUTimeMethodSampling;\n@@ -57,0 +60,1 @@\n+    private TimespanRate cpuRate;\n@@ -76,0 +80,1 @@\n+        this.isCPUTimeMethodSampling = isJVM && name.equals(Type.EVENT_NAME_PREFIX + \"CPUTimeSample\");\n@@ -166,0 +171,7 @@\n+    public void setCPUThrottle(TimespanRate rate) {\n+        if (isCPUTimeMethodSampling) {\n+            this.cpuRate = rate;\n+            JVM.setCPUThrottle(rate.rate(), rate.autoadapt());\n+        }\n+    }\n+\n@@ -183,2 +195,2 @@\n-        if (hasCutoff) {\n-            \/\/ Event has a duration, but not a threshold. Used by OldObjectSample\n+        if (hasCutoff || isCPUTimeMethodSampling) {\n+            \/\/ Event has a duration, but not a threshold. Used by OldObjectSample and CPUTimeSample\n@@ -226,0 +238,3 @@\n+            } else if (isCPUTimeMethodSampling) {\n+                TimespanRate r = enabled ? cpuRate : new TimespanRate(0, false);\n+                JVM.setCPUThrottle(r.rate(), r.autoadapt());\n@@ -363,0 +378,4 @@\n+    public boolean isCPUTimeMethodSampling() {\n+        return isCPUTimeMethodSampling;\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n-                missing:whitespace, missing:whitespace, missing:whitespace\n+                missing:whitespace, missing:whitespace, missing:whitespace,\n+                missing:whitespace\n@@ -403,0 +404,22 @@\n+[application.cpu-time-hot-methods]\n+label = \"Java Methods that Execute the Most from CPU Time Sampler (Experimental)\"\n+table = \"COLUMN 'Method', 'Samples', 'Percent'\n+         FORMAT none, none, normalized\n+         SELECT stackTrace.topFrame AS T, COUNT(*), COUNT(*)\n+         FROM CPUTimeSample GROUP BY T LIMIT 25\"\n+\n+[application.cpu-time-failed-samples]\n+label = \"Failed CPU Time Samples (Experimental)\"\n+table = \"COLUMN 'Failed?', 'Samples', 'Percent'\n+         FORMAT none, none, normalized\n+         SELECT failed, COUNT(*), COUNT(*)\n+         FROM CPUTimeSample\n+         GROUP BY failed\"\n+\n+[application.cpu-time-lossed-samples]\n+label = \"CPU Time Samples lossed because of internal throttling (Experimental)\"\n+table = \"COLUMN 'Lost samples'\n+         FORMAT none\n+         SELECT SUM(O.lostSamples)\n+         FROM CPUTimeSampleLoss as O\"\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/view.ini","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.internal.settings;\n+\n+import static jdk.jfr.internal.util.TimespanUnit.SECONDS;\n+import static jdk.jfr.internal.util.TimespanUnit.MILLISECONDS;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.MetadataDefinition;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.PlatformEventType;\n+import jdk.jfr.internal.Type;\n+import jdk.jfr.internal.util.TimespanRate;\n+import jdk.jfr.internal.util.Utils;\n+\n+@MetadataDefinition\n+@Label(\"CPUThrottleSetting\")\n+@Description(\"Upper bounds the emission rate for CPU time samples\")\n+@Name(Type.SETTINGS_PREFIX + \"Rate\")\n+public final class CPUThrottleSetting extends JDKSettingControl {\n+    public static final String DEFAULT_VALUE = \"0\/s\";\n+    private final PlatformEventType eventType;\n+    private String value = DEFAULT_VALUE;\n+\n+    public CPUThrottleSetting(PlatformEventType eventType) {\n+       this.eventType = Objects.requireNonNull(eventType);\n+    }\n+\n+    @Override\n+    public String combine(Set<String> values) {\n+        TimespanRate max = null;\n+        for (String value : values) {\n+            TimespanRate rate = TimespanRate.of(value);\n+            if (rate != null) {\n+                if (max == null || rate.isHigher(max)) {\n+                    max = rate;\n+                }\n+                max = new TimespanRate(max.rate(), max.autoadapt() || rate.autoadapt());\n+            }\n+        }\n+        \/\/ \"off\" is not supported\n+        return Objects.requireNonNullElse(max.toString(), DEFAULT_VALUE);\n+    }\n+\n+    @Override\n+    public void setValue(String value) {\n+        TimespanRate rate = TimespanRate.of(value);\n+        if (rate != null) {\n+            eventType.setCPUThrottle(rate);\n+        }\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return value;\n+    }\n+}\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/CPUThrottleSetting.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -58,0 +58,4 @@\n+\n+    public double perSecond() {\n+        return inNanos() * 1_000_000_000.0;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Rate.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.util;\n+\n+import jdk.jfr.internal.settings.CPUThrottleSetting;\n+\n+\/**\n+ * A rate or fixed period, see {@link jdk.jfr.internal.Rate}\n+ *\/\n+public record TimespanRate(double rate, boolean autoadapt) {\n+\n+    public static TimespanRate of(String text) {\n+        if (text.equals(\"off\")) {\n+            text = CPUThrottleSetting.DEFAULT_VALUE;\n+        }\n+        boolean isPeriod = !text.contains(\"\/\");\n+        if (isPeriod) {\n+            var period = ValueParser.parseTimespanWithInfinity(text, Long.MAX_VALUE);\n+            if (period == Long.MAX_VALUE) {\n+                return null;\n+            }\n+            if (period == 0) {\n+                return new TimespanRate(0, false);\n+            }\n+            return new TimespanRate(Runtime.getRuntime().availableProcessors() \/ (period \/ 1_000_000_000.0), false);\n+        }\n+        return new TimespanRate(Rate.of(text).perSecond(), true);\n+    }\n+\n+    public boolean isHigher(TimespanRate that) {\n+        return rate() > that.rate();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (autoadapt) {\n+            return String.format(\"%d\/ns\", rate * 1_000_000_000L);\n+        }\n+        return String.format(\"%dns\", rate \/ Runtime.getRuntime().availableProcessors() * 1_000_000_000L);\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/TimespanRate.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -193,0 +193,9 @@\n+    <event name=\"jdk.CPUTimeSample\">\n+      <setting name=\"enabled\" control=\"method-sampling-enabled\">false<\/setting>\n+      <setting name=\"throttle\">500\/s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.CPUTimeSampleLoss\">\n+      <setting name=\"enabled\" control=\"method-sampling-enabled\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -193,0 +193,9 @@\n+    <event name=\"jdk.CPUTimeSample\">\n+      <setting name=\"enabled\" control=\"method-sampling-enabled\">false<\/setting>\n+      <setting name=\"throttle\">10ms<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.CPUTimeSampleLoss\">\n+      <setting name=\"enabled\" control=\"method-sampling-enabled\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -92,1 +92,4 @@\n-        \"Flush\", \"SyncOnValueBasedClass\");\n+        \"Flush\", \"SyncOnValueBasedClass\", \"CPUTimeSample\", \"CPUTimeSampleLoss\");\n+\n+    \/\/ Subset of the experimental events that should have tests\n+    private static final Set<String> experimentalButTestedEvents = Set.of(\"CPUTimeSample\");\n@@ -113,1 +116,3 @@\n-        for (String event : jfrEventTypes) {\n+        Set<String> checkedEvents = new HashSet<>(jfrEventTypes);\n+        checkedEvents.addAll(experimentalButTestedEvents);\n+        for (String event : checkedEvents) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestLookForUntestedEvents.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordedFrame;\n+import jdk.jfr.consumer.RecordedStackTrace;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.lib.jfr.RecurseThread;\n+\n+public class BaseTestFullStackTrace {\n+    private final static int MAX_DEPTH = 64; \/\/ currently hardcoded in jvm\n+\n+    private final String eventName;\n+    private final String threadFieldName;\n+\n+    public BaseTestFullStackTrace(String eventName, String threadFieldName) {\n+        this.eventName = eventName;\n+        this.threadFieldName = threadFieldName;\n+    }\n+\n+    public void run() throws Throwable {\n+        RecurseThread[] threads = new RecurseThread[3];\n+        for (int i = 0; i < threads.length; ++i) {\n+            int depth = MAX_DEPTH - 1 + i;\n+            threads[i] = new RecurseThread(depth);\n+            threads[i].setName(\"recursethread-\" + depth);\n+            threads[i].start();\n+        }\n+\n+        for (RecurseThread thread : threads) {\n+            while (!thread.isInRunLoop()) {\n+                Thread.sleep(20);\n+            }\n+        }\n+\n+        assertStackTraces(threads);\n+\n+        for (RecurseThread thread : threads) {\n+            thread.quit();\n+            thread.join();\n+        }\n+    }\n+\n+    private void assertStackTraces(RecurseThread[] threads) throws Throwable {\n+        while (true) {\n+            try (Recording recording = new Recording()) {\n+                if (eventName.equals(EventNames.CPUTimeSample)) {\n+                    recording.enable(eventName).with(\"throttle\", \"50ms\");\n+                } else {\n+                    recording.enable(eventName).withPeriod(Duration.ofMillis(50));\n+                }\n+                recording.start();\n+                Thread.sleep(500);\n+                recording.stop();\n+                if (hasValidStackTraces(recording, threads)) {\n+                    break;\n+                }\n+            }\n+        };\n+    }\n+\n+    private boolean hasValidStackTraces(Recording recording, RecurseThread[] threads) throws Throwable {\n+        boolean[] isEventFound = new boolean[threads.length];\n+\n+        for (RecordedEvent event : Events.fromRecording(recording)) {\n+            System.out.println(\"Event: \" + event);\n+            String threadName = Events.assertField(event, threadFieldName + \".javaName\").getValue();\n+            long threadId = Events.assertField(event, threadFieldName + \".javaThreadId\").getValue();\n+\n+            for (int threadIndex = 0; threadIndex < threads.length; ++threadIndex) {\n+                RecurseThread currThread = threads[threadIndex];\n+                if (threadId == currThread.getId()) {\n+                    System.out.println(\"ThreadName=\" + currThread.getName() + \", depth=\" + currThread.totalDepth);\n+                    Asserts.assertEquals(threadName, currThread.getName(), \"Wrong thread name\");\n+                    if (\"recurseEnd\".equals(getTopMethodName(event))) {\n+                        isEventFound[threadIndex] = true;\n+                        checkEvent(event, currThread.totalDepth);\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < threads.length; ++i) {\n+            String msg = \"threadIndex=%d, recurseDepth=%d, isEventFound=%b%n\";\n+            System.out.printf(msg, i, threads[i].totalDepth, isEventFound[i]);\n+        }\n+        for (int i = 0; i < threads.length; ++i) {\n+            if(!isEventFound[i]) {\n+               \/\/ no assertion, let's retry.\n+               \/\/ Could be race condition, i.e safe point during Thread.sleep\n+               System.out.println(\"Failed to validate all threads, will retry.\");\n+               return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public String getTopMethodName(RecordedEvent event) {\n+        List<RecordedFrame> frames = event.getStackTrace().getFrames();\n+        Asserts.assertFalse(frames.isEmpty(), \"JavaFrames was empty\");\n+        return frames.getFirst().getMethod().getName();\n+    }\n+\n+    private void checkEvent(RecordedEvent event, int expectedDepth) throws Throwable {\n+        RecordedStackTrace stacktrace = null;\n+        try {\n+            stacktrace = event.getStackTrace();\n+            List<RecordedFrame> frames = stacktrace.getFrames();\n+            Asserts.assertEquals(Math.min(MAX_DEPTH, expectedDepth), frames.size(), \"Wrong stacktrace depth. Expected:\" + expectedDepth);\n+            List<String> expectedMethods = getExpectedMethods(expectedDepth);\n+            Asserts.assertEquals(expectedMethods.size(), frames.size(), \"Wrong expectedMethods depth. Test error.\");\n+\n+            for (int i = 0; i < frames.size(); ++i) {\n+                String name = frames.get(i).getMethod().getName();\n+                String expectedName = expectedMethods.get(i);\n+                System.out.printf(\"method[%d]=%s, expected=%s%n\", i, name, expectedName);\n+                Asserts.assertEquals(name, expectedName, \"Wrong method name\");\n+            }\n+\n+            boolean isTruncated = stacktrace.isTruncated();\n+            boolean isTruncateExpected = expectedDepth > MAX_DEPTH;\n+            Asserts.assertEquals(isTruncated, isTruncateExpected, \"Wrong value for isTruncated. Expected:\" + isTruncateExpected);\n+\n+            String firstMethod = frames.getLast().getMethod().getName();\n+            boolean isFullTrace = \"run\".equals(firstMethod);\n+            String msg = String.format(\"Wrong values for isTruncated=%b, isFullTrace=%b\", isTruncated, isFullTrace);\n+            Asserts.assertTrue(isTruncated != isFullTrace, msg);\n+        } catch (Throwable t) {\n+            System.out.println(String.format(\"stacktrace:%n%s\", stacktrace));\n+            throw t;\n+        }\n+    }\n+\n+    private List<String> getExpectedMethods(int depth) {\n+        List<String> methods = new ArrayList<>();\n+        methods.add(\"recurseEnd\");\n+        for (int i = 0; i < depth - 2; ++i) {\n+            methods.add((i % 2) == 0 ? \"recurseA\" : \"recurseB\");\n+        }\n+        methods.add(\"run\");\n+        if (depth > MAX_DEPTH) {\n+            methods = methods.subList(0, MAX_DEPTH);\n+        }\n+        return methods;\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/BaseTestFullStackTrace.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.RecurseThread;\n+\n+\/*\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR & os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main\/timeout=30 jdk.jfr.event.profiling.TestCPUTimeAndExecutionSample\n+ *\/\n+public class TestCPUTimeAndExecutionSample {\n+\n+    static String sampleEvent = EventNames.CPUTimeSample;\n+\n+    \/\/ The period is set to 1100 ms to provoke the 1000 ms\n+    \/\/ threshold in the JVM for os::naked_short_sleep().\n+    public static void main(String[] args) throws Exception {\n+        run(EventNames.ExecutionSample);\n+        run(EventNames.CPUTimeSample);\n+        run(EventNames.ExecutionSample);\n+        run(EventNames.CPUTimeSample);\n+    }\n+\n+    private static void run(String eventType) {\n+        RecurseThread t = new RecurseThread(50);\n+        t.setDaemon(true);\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(sampleEvent).with(\"throttle\", \"1000\/s\");\n+            rs.onEvent(sampleEvent, e -> {\n+                t.quit();\n+                rs.close();\n+            });\n+            t.start();\n+            rs.start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeAndExecutionSample.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import jdk.test.lib.jfr.EventNames;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR & os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @build jdk.jfr.event.profiling.BaseTestFullStackTrace\n+ * @run main\/othervm jdk.jfr.event.profiling.TestCPUTimeSampleFullStackTrace\n+ *\/\n+public class TestCPUTimeSampleFullStackTrace {\n+\n+    public static void main(String[] args) throws Throwable {\n+        new BaseTestFullStackTrace(EventNames.CPUTimeSample, \"eventThread\").run();\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleFullStackTrace.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.internal.JVM;\n+import jdk.test.lib.jfr.EventNames;\n+\n+\/*\n+ * Tests that creating multiple recordings after another is possible.\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR & os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main jdk.jfr.event.profiling.TestCPUTimeSampleMultipleRecordings\n+ *\/\n+public class TestCPUTimeSampleMultipleRecordings {\n+\n+    static String nativeEvent = EventNames.CPUTimeSample;\n+\n+    static volatile boolean alive = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        Thread t = new Thread(TestCPUTimeSampleMultipleRecordings::nativeMethod);\n+        t.setDaemon(true);\n+        t.start();\n+        for (int i = 0; i < 2; i++) {\n+            try (RecordingStream rs = new RecordingStream()) {\n+                rs.enable(nativeEvent).with(\"throttle\", \"1ms\");\n+                rs.onEvent(nativeEvent, e -> {\n+                    alive = false;\n+                    rs.close();\n+                });\n+\n+                rs.start();\n+            }\n+        }\n+        alive = false;\n+    }\n+\n+    public static void nativeMethod() {\n+        while (alive) {\n+            JVM.getPid();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleMultipleRecordings.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.internal.JVM;\n+import jdk.test.lib.jfr.EventNames;\n+\n+\/*\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR & os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main jdk.jfr.event.profiling.TestCPUTimeSampleNative\n+ *\/\n+public class TestCPUTimeSampleNative {\n+\n+    static String nativeEvent = EventNames.CPUTimeSample;\n+\n+    static volatile boolean alive = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(nativeEvent).with(\"throttle\", \"1ms\");\n+            rs.onEvent(nativeEvent, e -> {\n+                alive = false;\n+                rs.close();\n+            });\n+            Thread t = new Thread(TestCPUTimeSampleNative::nativeMethod);\n+            t.setDaemon(true);\n+            t.start();\n+            rs.start();\n+        }\n+\n+    }\n+\n+    public static void nativeMethod() {\n+        while (alive) {\n+            JVM.getPid();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleNative.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2024, SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Comparator;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR & os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.event.profiling.TestCPUTimeSampleThrottling\n+ *\/\n+public class TestCPUTimeSampleThrottling {\n+\n+    public static void main(String[] args) throws Exception {\n+        testZeroPerSecond();\n+        testThrottleSettings();\n+        testThrottleSettingsPeriod();\n+    }\n+\n+    private static void testZeroPerSecond() throws Exception {\n+        Asserts.assertEquals(0, countEvents(1000, \"0\/s\").count());\n+    }\n+\n+    private static void testThrottleSettings() throws Exception {\n+        int count = countEvents(1000,\n+            Runtime.getRuntime().availableProcessors() * 2 + \"\/s\").count();\n+        Asserts.assertTrue(count > 0 && count < 3,\n+            \"Expected between 0 and 3 events, got \" + count);\n+    }\n+\n+    private static void testThrottleSettingsPeriod() throws Exception {\n+        float rate = countEvents(1000, \"1ms\").rate();\n+        Asserts.assertTrue(rate > 950 && rate < 1050, \"Expected around 1000 events per second, got \" + rate);\n+    }\n+\n+    private record EventCount(int count, int timeMs) {\n+        float rate() {\n+            return (float) count \/ timeMs * 1000;\n+        }\n+    }\n+\n+    private static EventCount countEvents(int timeMs, String rate) throws Exception {\n+        try(Recording recording = new Recording()) {\n+            recording.enable(EventNames.CPUTimeSample)\n+                    .with(\"throttle\", rate);\n+\n+            recording.start();\n+\n+            wasteCPU(timeMs);\n+\n+            recording.stop();\n+\n+            List<RecordedEvent> events = Events.fromRecording(recording).stream()\n+                    .filter(e -> e.getThread().getJavaName()\n+                                .equals(Thread.currentThread().getName()))\n+                    .sorted(Comparator.comparing(RecordedEvent::getStartTime))\n+                    .toList();\n+            if (events.size() < 2) {\n+                return new EventCount(events.size(), 0);\n+            }\n+\n+            Instant start = events.get(0).getStartTime();\n+            Instant end = events.get(events.size() - 1).getStartTime();\n+            return new EventCount(events.size(), (int) Duration.between(start, end).toMillis());\n+        }\n+    }\n+\n+    private static void wasteCPU(int durationMs) {\n+        long start = System.currentTimeMillis();\n+        double i = 0;\n+        while (System.currentTimeMillis() - start < durationMs) {\n+            i = i * Math.pow(Math.random(), Math.random());\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleThrottling.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.RecurseThread;\n+\n+\/*\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR & os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main jdk.jfr.event.profiling.TestCPUTimeSamplingLongPeriod\n+ *\/\n+public class TestCPUTimeSamplingLongPeriod {\n+\n+    static String sampleEvent = EventNames.CPUTimeSample;\n+\n+    \/\/ The period is set to 1100 ms to provoke the 1000 ms\n+    \/\/ threshold in the JVM for os::naked_short_sleep().\n+    public static void main(String[] args) throws Exception {\n+        RecurseThread t = new RecurseThread(50);\n+        t.setDaemon(true);\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(sampleEvent).with(\"throttle\", \"1100ms\");\n+            rs.onEvent(sampleEvent, e -> {\n+                t.quit();\n+                rs.close();\n+            });\n+            t.start();\n+            rs.start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSamplingLongPeriod.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -26,9 +26,0 @@\n-import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import jdk.jfr.Recording;\n-import jdk.jfr.consumer.RecordedEvent;\n-import jdk.jfr.consumer.RecordedFrame;\n-import jdk.jfr.consumer.RecordedStackTrace;\n-import jdk.test.lib.Asserts;\n@@ -36,2 +27,0 @@\n-import jdk.test.lib.jfr.Events;\n-import jdk.test.lib.jfr.RecurseThread;\n@@ -44,0 +33,1 @@\n+ * @build jdk.jfr.event.profiling.BaseTestFullStackTrace\n@@ -47,2 +37,0 @@\n-    private final static String EVENT_NAME = EventNames.ExecutionSample;\n-    private final static int MAX_DEPTH = 64; \/\/ currently hardcoded in jvm\n@@ -51,31 +39,1 @@\n-        RecurseThread[] threads = new RecurseThread[3];\n-        for (int i = 0; i < threads.length; ++i) {\n-            int depth = MAX_DEPTH - 1 + i;\n-            threads[i] = new RecurseThread(depth);\n-            threads[i].setName(\"recursethread-\" + depth);\n-            threads[i].start();\n-        }\n-\n-        for (RecurseThread thread : threads) {\n-            while (!thread.isInRunLoop()) {\n-                Thread.sleep(20);\n-            }\n-        }\n-\n-        assertStackTraces(threads);\n-\n-        for (RecurseThread thread : threads) {\n-            thread.quit();\n-            thread.join();\n-        }\n-    }\n-\n-    private static void assertStackTraces( RecurseThread[] threads) throws Throwable {\n-        Recording recording= null;\n-        do {\n-            recording = new Recording();\n-            recording.enable(EVENT_NAME).withPeriod(Duration.ofMillis(50));\n-            recording.start();\n-            Thread.sleep(500);\n-            recording.stop();\n-        } while (!hasValidStackTraces(recording, threads));\n+        new BaseTestFullStackTrace(EventNames.ExecutionSample, \"sampledThread\").run();\n@@ -84,85 +42,0 @@\n-    private static boolean hasValidStackTraces(Recording recording, RecurseThread[] threads) throws Throwable {\n-        boolean[] isEventFound = new boolean[threads.length];\n-\n-        for (RecordedEvent event : Events.fromRecording(recording)) {\n-            \/\/System.out.println(\"Event: \" + event);\n-            String threadName = Events.assertField(event, \"sampledThread.javaName\").getValue();\n-            long threadId = Events.assertField(event, \"sampledThread.javaThreadId\").getValue();\n-\n-            for (int threadIndex = 0; threadIndex < threads.length; ++threadIndex) {\n-                RecurseThread currThread = threads[threadIndex];\n-                if (threadId == currThread.getId()) {\n-                    System.out.println(\"ThreadName=\" + currThread.getName() + \", depth=\" + currThread.totalDepth);\n-                    Asserts.assertEquals(threadName, currThread.getName(), \"Wrong thread name\");\n-                    if (\"recurseEnd\".equals(getTopMethodName(event))) {\n-                        isEventFound[threadIndex] = true;\n-                        checkEvent(event, currThread.totalDepth);\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-\n-        for (int i = 0; i < threads.length; ++i) {\n-            String msg = \"threadIndex=%d, recurseDepth=%d, isEventFound=%b%n\";\n-            System.out.printf(msg, i, threads[i].totalDepth, isEventFound[i]);\n-        }\n-        for (int i = 0; i < threads.length; ++i) {\n-            if(!isEventFound[i]) {\n-               \/\/ no assertion, let's retry.\n-               \/\/ Could be race condition, i.e safe point during Thread.sleep\n-               System.out.println(\"Failed to validate all threads, will retry.\");\n-               return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public static String getTopMethodName(RecordedEvent event) {\n-        List<RecordedFrame> frames = event.getStackTrace().getFrames();\n-        Asserts.assertFalse(frames.isEmpty(), \"JavaFrames was empty\");\n-        return frames.getFirst().getMethod().getName();\n-    }\n-\n-    private static void checkEvent(RecordedEvent event, int expectedDepth) throws Throwable {\n-        RecordedStackTrace stacktrace = null;\n-        try {\n-            stacktrace = event.getStackTrace();\n-            List<RecordedFrame> frames = stacktrace.getFrames();\n-            Asserts.assertEquals(Math.min(MAX_DEPTH, expectedDepth), frames.size(), \"Wrong stacktrace depth. Expected:\" + expectedDepth);\n-            List<String> expectedMethods = getExpectedMethods(expectedDepth);\n-            Asserts.assertEquals(expectedMethods.size(), frames.size(), \"Wrong expectedMethods depth. Test error.\");\n-\n-            for (int i = 0; i < frames.size(); ++i) {\n-                String name = frames.get(i).getMethod().getName();\n-                String expectedName = expectedMethods.get(i);\n-                System.out.printf(\"method[%d]=%s, expected=%s%n\", i, name, expectedName);\n-                Asserts.assertEquals(name, expectedName, \"Wrong method name\");\n-            }\n-\n-            boolean isTruncated = stacktrace.isTruncated();\n-            boolean isTruncateExpected = expectedDepth > MAX_DEPTH;\n-            Asserts.assertEquals(isTruncated, isTruncateExpected, \"Wrong value for isTruncated. Expected:\" + isTruncateExpected);\n-\n-            String firstMethod = frames.getLast().getMethod().getName();\n-            boolean isFullTrace = \"run\".equals(firstMethod);\n-            String msg = String.format(\"Wrong values for isTruncated=%b, isFullTrace=%b\", isTruncated, isFullTrace);\n-            Asserts.assertTrue(isTruncated != isFullTrace, msg);\n-        } catch (Throwable t) {\n-            System.out.println(String.format(\"stacktrace:%n%s\", stacktrace));\n-            throw t;\n-        }\n-    }\n-\n-    private static List<String> getExpectedMethods(int depth) {\n-        List<String> methods = new ArrayList<>();\n-        methods.add(\"recurseEnd\");\n-        for (int i = 0; i < depth - 2; ++i) {\n-            methods.add((i % 2) == 0 ? \"recurseA\" : \"recurseB\");\n-        }\n-        methods.add(\"run\");\n-        if (depth > MAX_DEPTH) {\n-            methods = methods.subList(0, MAX_DEPTH);\n-        }\n-        return methods;\n-    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestFullStackTrace.java","additions":2,"deletions":129,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    final static String NATIVE_EVENT = EventNames.NativeMethodSample;\n+    static String nativeEvent = EventNames.NativeMethodSample;\n@@ -49,2 +49,2 @@\n-            rs.enable(NATIVE_EVENT).withPeriod(Duration.ofMillis(1));\n-            rs.onEvent(NATIVE_EVENT, e -> {\n+            rs.enable(nativeEvent).withPeriod(Duration.ofMillis(1));\n+            rs.onEvent(nativeEvent, e -> {\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestNative.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    final static String SAMPLE_EVENT = EventNames.ExecutionSample;\n+    static String sampleEvent = EventNames.ExecutionSample;\n@@ -50,2 +50,2 @@\n-            rs.enable(SAMPLE_EVENT).withPeriod(Duration.ofMillis(1100));\n-            rs.onEvent(SAMPLE_EVENT, e -> {\n+            rs.enable(sampleEvent).withPeriod(Duration.ofMillis(1100));\n+            rs.onEvent(sampleEvent, e -> {\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestSamplingLongPeriod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+    public static final String CPUTimeSample = PREFIX + \"CPUTimeSample\";\n+    public static final String CPUTimeSampleLoss = PREFIX + \"CPUTimeSampleLoss\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}