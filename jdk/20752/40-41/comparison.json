{"files":[{"patch":"@@ -308,1 +308,0 @@\n-    printf(\"JfrTraceQueue::enqueue failed\\n\");\n@@ -312,1 +311,1 @@\n-  volatile u4 _dropped_because_endless = 0;\n+  u4 _mark_count = 0;\n@@ -315,1 +314,1 @@\n-    int count = 10000;\n+    int count = 1000;\n@@ -332,0 +331,6 @@\n+        \/\/ mark it as empty to prevent stalling\n+        if (count < 500) {\n+          Atomic::inc(&_mark_count);\n+          printf(\"mark count: %d\\n\", Atomic::load(&_mark_count));\n+          Atomic::release_store(&e->_state, state_empty(head));\n+        }\n@@ -334,4 +339,0 @@\n-    Atomic::inc(&_dropped_because_endless);\n-    u4 head = Atomic::load_acquire(&_head);\n-    auto head_state = Atomic::load_acquire(&element(head)->_state);\n-    printf(\"JfrTraceQueue::dequeue failed: head: %d, tail: %d is_full: %d is_empty: %d   count %d \\n\", head, Atomic::load(&_tail), head_state == state_full(head), head_state == state_empty(head), Atomic::load(&_dropped_because_endless));\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"}]}