{"files":[{"patch":"@@ -33,2 +33,2 @@\n-JfrAsyncStackFrame::JfrAsyncStackFrame(const Method* method, int bci, u1 type, int lineno, const InstanceKlass* ik) :\n-  _klass(ik), _method(method), _line(lineno), _bci(bci), _type(type) {}\n+JfrAsyncStackFrame::JfrAsyncStackFrame(const Method* method, int bci, u1 type, int lineno) :\n+  _method(method), _line(lineno), _type(type | ((lineno < 0) ? 0x80 : 0)), _bci(bci) {}\n@@ -36,0 +36,10 @@\n+int JfrAsyncStackFrame::lineno() const {\n+  if (_type & 0x80) {\n+    return -1;\n+  }\n+  return _line;\n+}\n+\n+u1 JfrAsyncStackFrame::type() const {\n+  return _type & 0x7F;\n+}\n@@ -85,1 +95,9 @@\n-    _frames[count] = JfrAsyncStackFrame(method, bci, type, method->line_number_from_bci(bci), method->method_holder());\n+\n+    \/\/ Tag the klass and the method, so that they are not GCd\n+    const InstanceKlass* klass = method->method_holder();\n+    SET_METHOD_AND_CLASS_USED_THIS_EPOCH(klass);\n+    SET_METHOD_FLAG_USED_THIS_EPOCH(method);\n+    assert(METHOD_AND_CLASS_USED_THIS_EPOCH(klass), \"invariant\");\n+    assert(METHOD_FLAG_USED_THIS_EPOCH(method), \"invariant\");\n+\n+    _frames[count] = JfrAsyncStackFrame(method, bci, type, method->line_number_from_bci(bci));\n@@ -111,1 +129,1 @@\n-    if (!Method::is_valid_method(frame._method)) {\n+    if (!Method::is_valid_method(frame.method())) {\n@@ -116,1 +134,1 @@\n-    const traceid mid = JfrTraceId::load(frame._method);\n+    const traceid mid = JfrTraceId::load(frame.method());\n@@ -118,3 +136,3 @@\n-    hash = (hash * 31) + frame._bci;\n-    hash = (hash * 31) + frame._type;\n-    trace->_frames[i] = JfrStackFrame(mid, frame._bci, frame._type, frame._line, frame._klass);\n+    hash = (hash * 31) + frame.bci();\n+    hash = (hash * 31) + frame.type();\n+    trace->_frames[i] = JfrStackFrame(mid, frame.bci(), frame.type(), frame.lineno(), frame.method()->method_holder());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.cpp","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-  friend class JfrAsyncStackTrace;\n@@ -42,1 +41,0 @@\n-  const InstanceKlass* _klass;\n@@ -44,2 +42,3 @@\n-  int _line;\n-  int _bci;\n+  \/\/ line is a 16 bit value or -1, the -1 case is recorded in the type\n+  u2 _line;\n+  \/\/ top bit encodes whether _line is -1 or not\n@@ -47,0 +46,1 @@\n+  int _bci;\n@@ -49,1 +49,1 @@\n-  JfrAsyncStackFrame(const Method* _method, int bci, u1 type, int lineno, const InstanceKlass* klass);\n+  JfrAsyncStackFrame(const Method* _method, int bci, u1 type, int lineno);\n@@ -58,0 +58,5 @@\n+\n+  const Method *method() const { return _method; }\n+  int bci() const { return _bci; }\n+  u1 type() const;\n+  int lineno() const;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.hpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}