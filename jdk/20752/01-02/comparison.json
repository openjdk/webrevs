{"files":[{"patch":"@@ -494,1 +494,1 @@\n-  int64_t last_autoadapt_check = os::javaTimeMillis();\n+  int64_t last_autoadapt_check = os::javaTimeNanos();\n@@ -502,1 +502,1 @@\n-    if (os::javaTimeMillis() - last_autoadapt_check > AUTOADAPT_INTERVAL_MS) {\n+    if (os::javaTimeNanos() - last_autoadapt_check > AUTOADAPT_INTERVAL_MS * 1000000) {\n@@ -504,1 +504,1 @@\n-      last_autoadapt_check = os::javaTimeMillis();\n+      last_autoadapt_check = os::javaTimeNanos();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-  assert(jt != current_thread || current_thread->in_asgct(), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrAsyncStackTrace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFR & os.family == \"linux\"\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeAndExecutionSample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFR & os.family == \"linux\"\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleNative.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFR & os.family == \"linux\"\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSamplingLongPeriod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}