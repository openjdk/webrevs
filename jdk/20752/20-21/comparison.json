{"files":[{"patch":"@@ -25,1 +25,1 @@\n-\n+import java.lang.management.ManagementFactory;\n@@ -53,1 +53,1 @@\n-        Asserts.assertEquals(0, countEvents(1000, \"0\/s\").count());\n+        Asserts.assertTrue(0L == countEvents(1000, \"0\/s\").count());\n@@ -57,1 +57,1 @@\n-        int count = countEvents(1000,\n+        long count = countEvents(1000,\n@@ -64,2 +64,2 @@\n-        float rate = countEvents(1000, \"1ms\").rate();\n-        Asserts.assertTrue(rate > 900 && rate < 1100, \"Expected around 1000 events per second, got \" + rate);\n+        float rate = countEvents(1000, \"10ms\").rate();\n+        Asserts.assertTrue(rate > 90 && rate < 110, \"Expected around 100 events per second, got \" + rate);\n@@ -68,1 +68,1 @@\n-    private record EventCount(int count, int timeMs) {\n+    private record EventCount(long count, float time) {\n@@ -70,1 +70,1 @@\n-            return (float) count \/ timeMs * 1000;\n+            return count \/ time;\n@@ -79,0 +79,2 @@\n+            var bean = ManagementFactory.getThreadMXBean();\n+\n@@ -81,0 +83,2 @@\n+            long startThreadCpuTime = bean.getCurrentThreadCpuTime();\n+\n@@ -83,0 +87,2 @@\n+            long spendCPUTime = bean.getCurrentThreadCpuTime() - startThreadCpuTime;\n+\n@@ -85,1 +91,1 @@\n-            List<RecordedEvent> events = Events.fromRecording(recording).stream()\n+            long eventCount = Events.fromRecording(recording).stream()\n@@ -88,2 +94,1 @@\n-                    .sorted(Comparator.comparing(RecordedEvent::getStartTime))\n-                    .toList();\n+                    .count();\n@@ -91,3 +96,1 @@\n-            if (events.size() < 2) {\n-                return new EventCount(events.size(), 0);\n-            }\n+            System.out.println(\"Event count: \" + eventCount + \", CPU time: \" + spendCPUTime \/ 1_000_000_000f + \"s\");\n@@ -95,3 +98,1 @@\n-            Instant start = events.get(0).getStartTime();\n-            Instant end = events.get(events.size() - 1).getStartTime();\n-            return new EventCount(events.size(), (int) Duration.between(start, end).toMillis());\n+            return new EventCount(eventCount, spendCPUTime \/ 1_000_000_000f);\n@@ -105,1 +106,3 @@\n-            i = i * Math.pow(Math.random(), Math.random());\n+            for (int j = 0; j < 100000; j++) {\n+                i = Math.sqrt(i * Math.pow(Math.sqrt(Math.random()), Math.random()));\n+            }\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleThrottling.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"}]}