{"files":[{"patch":"@@ -181,1 +181,1 @@\n-     * {@return the {@link Charset} used this {@code ZipCoder}}\n+     * {@return the {@link Charset} used by this {@code ZipCoder}}\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    \/\/ ZipCoder for entry names and comments when not using UTF-8\n+    \/\/ Used when decoding entry names and comments\n@@ -1145,1 +1145,1 @@\n-    \/\/ Implementation note: This class is be thread safe.\n+    \/\/ Implementation note: This class is thread safe.\n@@ -1431,2 +1431,1 @@\n-         * - The Charset, that was provided when constructing a ZipFile instance,\n-         * for reading non-UTF-8 entry names and comments.\n+         * - The Charset that was provided when constructing the ZipFile instance.\n@@ -1438,2 +1437,1 @@\n-            \/\/ the Charset to be used for processing non-UTF-8 entry names in the ZIP file\n-            \/\/ and the ZIP file comment\n+            \/\/ the Charset that was provided when constructing the ZipFile instance\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.junit.jupiter.api.Test;\n+import static java.nio.charset.StandardCharsets.ISO_8859_1;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+\/*\n+ * @test\n+ * @bug 8355975\n+ * @summary verify that the internal ZIP structure caching in java.util.zip.ZipFile\n+ *          uses the correct Charset when parsing the ZIP structure of a ZIP file\n+ * @run junit ZipFileCharsetTest\n+ *\/\n+public class ZipFileCharsetTest {\n+\n+    private static final String ISO_8859_15_NAME = \"ISO-8859-15\";\n+\n+    \/**\n+     * The internal implementation of java.util.zip.ZipFile maintains a cache\n+     * of the ZIP structure of each ZIP file that's currently open. This cache\n+     * helps prevent repeat parsing of the ZIP structure of the same underlying\n+     * ZIP file, every time a ZipFile instance is created for the same ZIP file.\n+     * The cache uses an internal key to map a ZIP file to the corresponding\n+     * ZIP structure that's cached.\n+     * A ZipFile can be constructed by passing a Charset which will be used to\n+     * decode the entry names (and comment) in a ZIP file.\n+     * The test here verifies that when multiple ZipFile instances are\n+     * constructed using different Charsets but the same underlying ZIP file,\n+     * then the internal caching implementation of ZipFile doesn't end up using\n+     * a wrong Charset for parsing the ZIP structure of the ZIP file.\n+     *\/\n+    @Test\n+    void testCachedZipFileSource() throws Exception {\n+        \/\/ ISO-8859-15 is not a standard charset in Java. We skip this test\n+        \/\/ when it is unavailable\n+        assumeTrue(Charset.availableCharsets().containsKey(ISO_8859_15_NAME),\n+                \"skipping test since \" + ISO_8859_15_NAME + \" charset isn't available\");\n+\n+        \/\/ We choose the byte 0xA4 for entry name in the ZIP file.\n+        \/\/ 0xA4 is \"Euro sign\" in ISO-8859-15 charset and\n+        \/\/ \"Currency sign (generic)\" in ISO-8859-1 charset.\n+        final byte[] entryNameBytes = new byte[]{(byte) 0xA4}; \/\/ intentional cast\n+        final Charset euroSignCharset = Charset.forName(ISO_8859_15_NAME);\n+        final Charset currencySignCharset = ISO_8859_1;\n+\n+        final String euroSign = new String(entryNameBytes, euroSignCharset);\n+        final String currencySign = new String(entryNameBytes, currencySignCharset);\n+\n+        \/\/ create a ZIP file whose entry name is encoded using ISO-8859-15 charset\n+        final Path zip = createZIP(\"euro\", euroSignCharset, entryNameBytes);\n+\n+        \/\/ Construct a ZipFile instance using the (incorrect) charset ISO-8859-1.\n+        \/\/ While that ZipFile instance is still open (and the ZIP file structure\n+        \/\/ still cached), construct another instance for the same ZIP file, using\n+        \/\/ the (correct) charset ISO-8859-15.\n+        try (ZipFile incorrect = new ZipFile(zip.toFile(), currencySignCharset);\n+             ZipFile correct = new ZipFile(zip.toFile(), euroSignCharset)) {\n+\n+            \/\/ correct encoding should resolve the entry name to euro sign\n+            \/\/ and the entry should be thus be located\n+            assertNotNull(correct.getEntry(euroSign), \"euro sign entry missing in \" + correct);\n+            \/\/ correct encoding should not be able to find an entry name\n+            \/\/ with the currency sign\n+            assertNull(correct.getEntry(currencySign), \"currency sign entry unexpectedly found in \"\n+                    + correct);\n+\n+            \/\/ incorrect encoding should resolve the entry name to currency sign\n+            \/\/ and the entry should be thus be located by the currency sign name\n+            assertNotNull(incorrect.getEntry(currencySign), \"currency sign entry missing in \"\n+                    + incorrect);\n+            \/\/ incorrect encoding should not be able to find an entry name\n+            \/\/ with the euro sign\n+            assertNull(incorrect.getEntry(euroSign), \"euro sign entry unexpectedly found in \"\n+                    + incorrect);\n+        }\n+    }\n+\n+    \/**\n+     * Creates and return ZIP file whose entry names are encoded using the given {@code charset}\n+     *\/\n+    private static Path createZIP(final String fileNamePrefix, final Charset charset,\n+                                  final byte[] entryNameBytes) throws IOException {\n+        final Path zip = Files.createTempFile(Path.of(\".\"), fileNamePrefix, \".zip\");\n+        \/\/ create a ZIP file whose entry name(s) use the given charset\n+        try (ZipOutputStream zos = new ZipOutputStream(Files.newOutputStream(zip), charset)) {\n+            zos.putNextEntry(new ZipEntry(new String(entryNameBytes, charset)));\n+            final byte[] entryContent = \"doesnotmatter\".getBytes(US_ASCII);\n+            zos.write(entryContent);\n+            zos.closeEntry();\n+        }\n+        return zip;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ZipFileCharsetTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}