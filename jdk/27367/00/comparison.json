{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,2 +23,9 @@\n-import java.security.*;\n-import java.security.spec.*;\n+import jtreg.SkippedException;\n+\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Signature;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n@@ -49,3 +56,1 @@\n-            System.out.println(\"Skip testing \" + sigAlg +\n-                \" due to no support\");\n-            return;\n+            throw new SkippedException(\"No support \" + sigAlg);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/InitAgainPSS.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,3 +23,10 @@\n-import java.security.*;\n-import java.security.interfaces.*;\n-import java.security.spec.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyPair;\n+import java.security.PrivateKey;\n+import java.security.Provider;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n@@ -87,1 +94,5 @@\n-            System.out.println(\"=> Skip; no support\");\n+            System.out.printf(\"=> Skip; no support keysize: %d, hash alg: %s, mgf Hash Alg: %s%n\",\n+                    keySize,\n+                    hashAlg,\n+                    mgfHashAlg);\n+            skipTest = true;\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/KeyAndParamCheckForPSS.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,9 @@\n-import java.security.*;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n+import jtreg.SkippedException;\n+\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Signature;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n@@ -56,3 +62,1 @@\n-            System.out.println(\"Skip testing RSASSA-PSS\" +\n-                \" due to no support\");\n-            return;\n+            throw new SkippedException(\"No support for RSASSA-PSS\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/SigInteropPSS.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,10 @@\n-import java.security.*;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n+import jtreg.SkippedException;\n+\n+import java.security.AlgorithmParameters;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.spec.PSSParameterSpec;\n@@ -70,3 +77,1 @@\n-                System.out.println(\"Skip testing \" + digest + \"withRSASSA-PSS\" +\n-                    \" due to no support\");\n-                continue;\n+                throw new SkippedException(\"No support for \" + digest + \"withRSASSA-PSS\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/SigInteropPSS2.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,4 +23,12 @@\n-import java.security.*;\n-import java.security.interfaces.*;\n-import java.security.spec.*;\n-import java.util.stream.IntStream;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyPair;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.Provider;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n@@ -30,1 +38,1 @@\n- * @test\n+ * @test id=old_alg\n@@ -37,0 +45,9 @@\n+\n+\/**\n+ * @test id=new_alg\n+ * @bug 8080462 8226651 8242332\n+ * @summary Generate a RSASSA-PSS signature and verify it using PKCS11 provider\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main SignatureTestPSS new-algS\n+ *\/\n@@ -42,1 +59,1 @@\n-    private static final String[] DIGESTS = {\n+    private static String[] DIGESTS = {\n@@ -44,1 +61,0 @@\n-            \"SHA3-224\", \"SHA3-256\", \"SHA3-384\" , \"SHA3-512\",\n@@ -46,0 +62,5 @@\n+\n+    private static final String[] DIGESTS_NEW = {\n+            \"SHA3-224\", \"SHA3-256\", \"SHA3-384\" , \"SHA3-512\"\n+    };\n+\n@@ -61,0 +82,3 @@\n+        if (args.length>0 && \"new-alg\".equals(args[0])){\n+            DIGESTS = DIGESTS_NEW;\n+        }\n@@ -99,2 +123,1 @@\n-            SignatureException, NoSuchProviderException,\n-            InvalidAlgorithmParameterException {\n+            SignatureException {\n@@ -115,1 +138,8 @@\n-                System.out.println(\"    => Skip; no PSS support\");\n+                System.out.printf(\"    => Skip; no PSS support public key: %s, private key: %s, \" +\n+                                  \"hash: %s, mgf hash: %s, Algo Support: %s%n\",\n+                        pub,\n+                        priv,\n+                        hash,\n+                        mgfHash,\n+                        s);\n+                skipTest = true;\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/SignatureTestPSS.java","additions":41,"deletions":11,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,3 +23,13 @@\n-import java.security.*;\n-import java.security.interfaces.*;\n-import java.security.spec.*;\n+import jtreg.SkippedException;\n+\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.PrivateKey;\n+import java.security.Provider;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n@@ -29,1 +39,1 @@\n- * @test\n+ * @test id=old_alg\n@@ -37,0 +47,10 @@\n+\n+\/**\n+ * @test id=new_alg\n+ * @bug 8244154 8242332\n+ * @summary Generate a <digest>withRSASSA-PSS signature and verify it using\n+ *         PKCS11 provider\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main SignatureTestPSS2 new-alg\n+ *\/\n@@ -41,1 +61,1 @@\n-    private static final String[] SIGALGS = {\n+    private static String[] SIGALGS = {\n@@ -43,1 +63,3 @@\n-            \"SHA384withRSASSA-PSS\", \"SHA512withRSASSA-PSS\",\n+            \"SHA384withRSASSA-PSS\", \"SHA512withRSASSA-PSS\"\n+    };\n+    private static final String[] SIGALGS_NEW = {\n@@ -56,0 +78,3 @@\n+        if (args.length>0 && \"new-alg\".equals(args[0])){\n+            SIGALGS = SIGALGS_NEW;\n+        }\n@@ -66,3 +91,1 @@\n-                System.out.println(\"Skip testing \" + sa +\n-                    \" due to no support\");\n-                return;\n+                throw new SkippedException(\"No support for \" + sa);\n@@ -97,1 +120,1 @@\n-            System.out.println(\"Skip test due to \" + ex2);\n+            throw new SkippedException(ex2.toString());\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/SignatureTestPSS2.java","additions":34,"deletions":11,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import jtreg.SkippedException;\n+\n@@ -125,2 +127,1 @@\n-            System.out.println(\"DSA not supported, skipping\");\n-            return;\n+            throw new SkippedException(\"DSA not supported\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/TestDSA.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}