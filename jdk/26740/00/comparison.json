{"files":[{"patch":"@@ -219,5 +219,0 @@\n-      case Op_ExpandV:\n-        if (UseSVE < 2 || is_subword_type(bt)) {\n-          return false;\n-        }\n-        break;\n@@ -7108,1 +7103,30 @@\n-instruct vexpand(vReg dst, vReg src, pRegGov pg) %{\n+instruct vexpand_neon(vReg dst, vReg src, vReg mask, vReg tmp1, vReg tmp2) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (ExpandV src mask));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vexpand_neon $dst, $src, $mask\\t# KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int length_in_bytes = (int) Matcher::vector_length_in_bytes(this);\n+    __ vector_expand_neon($dst$$FloatRegister, $src$$FloatRegister, $mask$$FloatRegister,\n+                          $tmp1$$FloatRegister, $tmp2$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vexpand_sve(vReg dst, vReg src, pRegGov pg, vReg tmp1, vReg tmp2) %{\n+  predicate(UseSVE == 1 || (UseSVE == 2 && type2aelembytes(Matcher::vector_element_basic_type(n)) < 4));\n+  match(Set dst (ExpandV src pg));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vexpand_sve $dst, $src, $pg\\t# KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int length_in_bytes = (int) Matcher::vector_length_in_bytes(this);\n+    __ vector_expand_sve($dst$$FloatRegister, $src$$FloatRegister, $pg$$PRegister,\n+                         $tmp1$$FloatRegister, $tmp2$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vexpand_sve2_SD(vReg dst, vReg src, pRegGov pg) %{\n+  predicate(UseSVE == 2 && type2aelembytes(Matcher::vector_element_basic_type(n)) >= 4);\n@@ -7111,1 +7135,1 @@\n-  format %{ \"vexpand $dst, $pg, $src\" %}\n+  format %{ \"vexpand_sve2_SD $dst, $src, $pg\" %}\n@@ -7122,1 +7146,0 @@\n-    assert(UseSVE == 2 && !is_subword_type(bt), \"unsupported\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -209,5 +209,0 @@\n-      case Op_ExpandV:\n-        if (UseSVE < 2 || is_subword_type(bt)) {\n-          return false;\n-        }\n-        break;\n@@ -5096,1 +5091,30 @@\n-instruct vexpand(vReg dst, vReg src, pRegGov pg) %{\n+instruct vexpand_neon(vReg dst, vReg src, vReg mask, vReg tmp1, vReg tmp2) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (ExpandV src mask));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vexpand_neon $dst, $src, $mask\\t# KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int length_in_bytes = (int) Matcher::vector_length_in_bytes(this);\n+    __ vector_expand_neon($dst$$FloatRegister, $src$$FloatRegister, $mask$$FloatRegister,\n+                          $tmp1$$FloatRegister, $tmp2$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vexpand_sve(vReg dst, vReg src, pRegGov pg, vReg tmp1, vReg tmp2) %{\n+  predicate(UseSVE == 1 || (UseSVE == 2 && type2aelembytes(Matcher::vector_element_basic_type(n)) < 4));\n+  match(Set dst (ExpandV src pg));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vexpand_sve $dst, $src, $pg\\t# KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int length_in_bytes = (int) Matcher::vector_length_in_bytes(this);\n+    __ vector_expand_sve($dst$$FloatRegister, $src$$FloatRegister, $pg$$PRegister,\n+                         $tmp1$$FloatRegister, $tmp2$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vexpand_sve2_SD(vReg dst, vReg src, pRegGov pg) %{\n+  predicate(UseSVE == 2 && type2aelembytes(Matcher::vector_element_basic_type(n)) >= 4);\n@@ -5099,1 +5123,1 @@\n-  format %{ \"vexpand $dst, $pg, $src\" %}\n+  format %{ \"vexpand_sve2_SD $dst, $src, $pg\" %}\n@@ -5110,1 +5134,0 @@\n-    assert(UseSVE == 2 && !is_subword_type(bt), \"unsupported\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -4067,0 +4067,7 @@\n+  \/\/ SVE move prefix (unpredicated)\n+  void sve_movprfx(FloatRegister Zd, FloatRegister Zn) {\n+    starti;\n+    f(0b00000100, 31, 24), f(0b00, 23, 22), f(0b1, 21), f(0b00000, 20, 16);\n+    f(0b101111, 15, 10), rf(Zn, 5), rf(Zd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2982,0 +2982,85 @@\n+\n+\/\/ Vector expand implementation for NEON.\n+\/\/\n+\/\/ An example of 128-bit Byte vector:\n+\/\/   Data direction: high <== low\n+\/\/   Input:\n+\/\/         src   = g f e d c b a 9 8 7 6 5 4 3 2 1\n+\/\/         mask  = 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1\n+\/\/   Expected result:\n+\/\/         dst   = 0 0 8 7 0 0 6 5 0 0 4 3 0 0 2 1\n+void C2_MacroAssembler::vector_expand_neon(FloatRegister dst, FloatRegister src, FloatRegister mask,\n+                                           FloatRegister tmp1, FloatRegister tmp2, BasicType bt,\n+                                           int vector_length_in_bytes) {\n+  assert(vector_length_in_bytes <= 16, \"the vector length in bytes for NEON must be <= 16\");\n+  assert_different_registers(dst, src, mask, tmp1, tmp2);\n+  \/\/ Since the TBL instruction only supports byte table, we need to\n+  \/\/ compute indices in byte type for all types.\n+  SIMD_Arrangement size = vector_length_in_bytes == 16 ? T16B : T8B;\n+  \/\/ tmp1 = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n+  dup(tmp1, size, zr);\n+  \/\/ dst = 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1\n+  negr(dst, size, mask);\n+  \/\/ Calculate vector index for TBL with prefix sum algorithm.\n+  \/\/ dst = 8 8 8 7 6 6 6 5 4 4 4 3 2 2 2 1\n+  for (int i = 1; i < vector_length_in_bytes; i <<= 1) {\n+    ext(tmp2, size, tmp1, dst, vector_length_in_bytes - i);\n+    addv(dst, size, tmp2, dst);\n+  }\n+  \/\/ tmp2 = 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1 0 0 -1 -1\n+  orr(tmp2, size, mask, mask);\n+  \/\/ tmp2 = 0 0 8 7 0 0 6 5 0 0 4 3 0 0 2 1\n+  bsl(tmp2, size, dst, tmp1);\n+  \/\/ tmp1 = 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n+  movi(tmp1, size, 1);\n+  \/\/ dst = -1 -1 7 6 -1 -1 5 4 -1 -1 3 2 -1 -1 1 0\n+  subv(dst, size, tmp2, tmp1);\n+  \/\/ dst = 0 0 8 7 0 0 6 5 0 0 4 3 0 0 2 1\n+  tbl(dst, size, src, 1, dst);\n+}\n+\n+\/\/ Vector expand implementation for SVE. Elements from the src vector are expanded\n+\/\/ into the dst vector under the control of the predicate register pg.\n+\/\/ The main strategy utilizes the TBL instruction for flexible element shuffling.\n+\/\/ To generate the second source operand for TBL, which dictates the indices to select\n+\/\/ from the src vector, prefix sum algorithm is used.\n+\/\/\n+\/\/ Vector expand implementation for SVE.\n+\/\/\n+\/\/ An example of 128-bit Short vector:\n+\/\/   Data direction: high <== low\n+\/\/   Input:\n+\/\/         src   = gf ed cb a9 87 65 43 21\n+\/\/         pg    = 00 01 00 01 00 01 00 01\n+\/\/   Expected result:\n+\/\/         dst   = 00 87 00 65 00 43 00 21\n+void C2_MacroAssembler::vector_expand_sve(FloatRegister dst, FloatRegister src, PRegister pg,\n+                                          FloatRegister tmp1, FloatRegister tmp2, BasicType bt,\n+                                          int vector_length_in_bytes) {\n+  assert(UseSVE > 0, \"expand implementation only for SVE\");\n+  assert_different_registers(dst, src, tmp1, tmp2);\n+  SIMD_RegVariant size = elemType_to_regVariant(bt);\n+\n+  \/\/ tmp1 = 00 00 00 00 00 00 00 00\n+  sve_dup(tmp1, size, 0);\n+  sve_movprfx(tmp2, tmp1);\n+  \/\/ tmp2 = 00 01 00 01 00 01 00 01\n+  sve_cpy(tmp2, size, pg, 1, true);\n+  \/\/ Calculate vector index for TBL with prefix sum algorithm.\n+  \/\/ tmp2 = 04 04 03 03 02 02 01 01\n+  for (int i = type2aelembytes(bt); i < vector_length_in_bytes; i <<= 1) {\n+    sve_movprfx(dst, tmp1);\n+    \/\/ The EXT instruction operates on the full-width sve register. The correct\n+    \/\/ index calculation method is:\n+    \/\/ vector_length_in_bytes - i + MaxVectorSize - vector_length_in_bytes =>\n+    \/\/ MaxVectorSize - i.\n+    sve_ext(dst, tmp2, MaxVectorSize - i);\n+    sve_add(tmp2, size, dst, tmp2);\n+  }\n+  \/\/ dst = 00 04 00 03 00 02 00 01\n+  sve_sel(dst, size, pg, tmp2, tmp1);\n+  \/\/ dst = -1 03 -1 02 -1 01 -1 00\n+  sve_sub(dst, size, 1);\n+  \/\/ dst = 00 87 00 65 00 43 00 21\n+  sve_tbl(dst, size, src, dst);\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":85,"deletions":0,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -210,0 +210,6 @@\n+  void vector_expand_neon(FloatRegister dst, FloatRegister src, FloatRegister mask,\n+                          FloatRegister tmp1, FloatRegister tmp2, BasicType bt,\n+                          int vector_length_in_bytes);\n+  void vector_expand_sve(FloatRegister dst, FloatRegister src, PRegister pg,\n+                         FloatRegister tmp1, FloatRegister tmp2, BasicType bt,\n+                         int vector_length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2136,0 +2136,1 @@\n+                        [\"movprfx\",  \"__ sve_movprfx(z17, z1);\",                           \"movprfx\\tz17, z1\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1149,0 +1149,1 @@\n+    __ sve_movprfx(z17, z1);                           \/\/       movprfx z17, z1\n@@ -1445,7 +1446,7 @@\n-    0x14000000,     0x17ffffd7,     0x140004b4,     0x94000000,\n-    0x97ffffd4,     0x940004b1,     0x3400000a,     0x34fffa2a,\n-    0x340095ca,     0x35000008,     0x35fff9c8,     0x35009568,\n-    0xb400000b,     0xb4fff96b,     0xb400950b,     0xb500001d,\n-    0xb5fff91d,     0xb50094bd,     0x10000013,     0x10fff8b3,\n-    0x10009453,     0x90000013,     0x36300016,     0x3637f836,\n-    0x363093d6,     0x3758000c,     0x375ff7cc,     0x3758936c,\n+    0x14000000,     0x17ffffd7,     0x140004b5,     0x94000000,\n+    0x97ffffd4,     0x940004b2,     0x3400000a,     0x34fffa2a,\n+    0x340095ea,     0x35000008,     0x35fff9c8,     0x35009588,\n+    0xb400000b,     0xb4fff96b,     0xb400952b,     0xb500001d,\n+    0xb5fff91d,     0xb50094dd,     0x10000013,     0x10fff8b3,\n+    0x10009473,     0x90000013,     0x36300016,     0x3637f836,\n+    0x363093f6,     0x3758000c,     0x375ff7cc,     0x3758938c,\n@@ -1456,13 +1457,13 @@\n-    0x54009140,     0x54000001,     0x54fff541,     0x540090e1,\n-    0x54000002,     0x54fff4e2,     0x54009082,     0x54000002,\n-    0x54fff482,     0x54009022,     0x54000003,     0x54fff423,\n-    0x54008fc3,     0x54000003,     0x54fff3c3,     0x54008f63,\n-    0x54000004,     0x54fff364,     0x54008f04,     0x54000005,\n-    0x54fff305,     0x54008ea5,     0x54000006,     0x54fff2a6,\n-    0x54008e46,     0x54000007,     0x54fff247,     0x54008de7,\n-    0x54000008,     0x54fff1e8,     0x54008d88,     0x54000009,\n-    0x54fff189,     0x54008d29,     0x5400000a,     0x54fff12a,\n-    0x54008cca,     0x5400000b,     0x54fff0cb,     0x54008c6b,\n-    0x5400000c,     0x54fff06c,     0x54008c0c,     0x5400000d,\n-    0x54fff00d,     0x54008bad,     0x5400000e,     0x54ffefae,\n-    0x54008b4e,     0x5400000f,     0x54ffef4f,     0x54008aef,\n+    0x54009160,     0x54000001,     0x54fff541,     0x54009101,\n+    0x54000002,     0x54fff4e2,     0x540090a2,     0x54000002,\n+    0x54fff482,     0x54009042,     0x54000003,     0x54fff423,\n+    0x54008fe3,     0x54000003,     0x54fff3c3,     0x54008f83,\n+    0x54000004,     0x54fff364,     0x54008f24,     0x54000005,\n+    0x54fff305,     0x54008ec5,     0x54000006,     0x54fff2a6,\n+    0x54008e66,     0x54000007,     0x54fff247,     0x54008e07,\n+    0x54000008,     0x54fff1e8,     0x54008da8,     0x54000009,\n+    0x54fff189,     0x54008d49,     0x5400000a,     0x54fff12a,\n+    0x54008cea,     0x5400000b,     0x54fff0cb,     0x54008c8b,\n+    0x5400000c,     0x54fff06c,     0x54008c2c,     0x5400000d,\n+    0x54fff00d,     0x54008bcd,     0x5400000e,     0x54ffefae,\n+    0x54008b6e,     0x5400000f,     0x54ffef4f,     0x54008b0f,\n@@ -1687,60 +1688,60 @@\n-    0x05271e11,     0x6545e891,     0x6585e891,     0x65c5e891,\n-    0x6545c891,     0x6585c891,     0x65c5c891,     0x45b0c210,\n-    0x45f1c231,     0x1e601000,     0x1e603000,     0x1e621000,\n-    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n-    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n-    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n-    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n-    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n-    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n-    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n-    0x1e7e3000,     0xf8268267,     0xf82d023c,     0xf8301046,\n-    0xf83d2083,     0xf8263290,     0xf82d528c,     0xf8284299,\n-    0xf8337160,     0xf8386286,     0xf8bf820e,     0xf8a600e0,\n-    0xf8af1353,     0xf8a922ea,     0xf8b53396,     0xf8a251e3,\n-    0xf8b340f4,     0xf8a470fd,     0xf8a06209,     0xf8f48097,\n-    0xf8f002ea,     0xf8eb10d9,     0xf8ff21b0,     0xf8f7302c,\n-    0xf8ee52a9,     0xf8f041fa,     0xf8e471e4,     0xf8e863c6,\n-    0xf864823d,     0xf87d013a,     0xf86f1162,     0xf87d20e3,\n-    0xf86132bb,     0xf870510e,     0xf8704336,     0xf86572b4,\n-    0xf8706217,     0xb83e8294,     0xb8200264,     0xb8381284,\n-    0xb8242358,     0xb8333102,     0xb828530e,     0xb83042df,\n-    0xb824703f,     0xb82a6194,     0xb8a080e9,     0xb8b80090,\n-    0xb8bb1146,     0xb8bb21b8,     0xb8b032df,     0xb8b653f4,\n-    0xb8bd41c9,     0xb8b47287,     0xb8bc6169,     0xb8ee828c,\n-    0xb8e10138,     0xb8f3126d,     0xb8f020b0,     0xb8e03183,\n-    0xb8e851ef,     0xb8f041e4,     0xb8fe7005,     0xb8ea6376,\n-    0xb8638120,     0xb873015d,     0xb8781284,     0xb86723b8,\n-    0xb86e3175,     0xb87b51ed,     0xb87f41d1,     0xb863721e,\n-    0xb87660f4,     0xce216874,     0xce104533,     0xce648c15,\n-    0xce8e3302,     0xce6e82ab,     0xce6c87d1,     0xcec08063,\n-    0xce638937,     0x25e0c358,     0x25a1c7d3,     0x0580785a,\n-    0x05426328,     0x05009892,     0x25a0cc29,     0x2561cec8,\n-    0x058044b3,     0x05401c99,     0x05006b49,     0x25e0d6f7,\n-    0x2561c528,     0x0583c8bc,     0x0542522f,     0x05001ec0,\n-    0x25e0de65,     0x25a1c113,     0x05803cad,     0x0540f3c0,\n-    0x0500ab15,     0x2560c28c,     0x2561d7c0,     0x05801ed7,\n-    0x0542633b,     0x05003696,     0x2560d4b4,     0x25e1c918,\n-    0x058021ff,     0x05400e15,     0x0500f3de,     0x0473025a,\n-    0x04bd05ab,     0x658e0025,     0x658a08e2,     0x659a0493,\n-    0x043e1062,     0x04f418b4,     0x046d15bd,     0x04611fce,\n-    0x04d6a07c,     0x04001929,     0x041a09da,     0x04d098f4,\n-    0x04db10d4,     0x0459a3ad,     0x041aa029,     0x041919fb,\n-    0x04d39e24,     0x04118302,     0x04101dba,     0x04d7ae16,\n-    0x04dea571,     0x04180210,     0x05e786fc,     0x05e4915c,\n-    0x04881cf1,     0x044a0f04,     0x04090969,     0x048b16c4,\n-    0x044101e4,     0x04dcbf44,     0x65809745,     0x658d833f,\n-    0x65c68468,     0x65c79b07,     0x65829e38,     0x049dafca,\n-    0x6582bba8,     0x65c0b7ff,     0x65c1b4e0,     0x658dbadd,\n-    0x65819a9d,     0x65ed9246,     0x65b30815,     0x65e6263c,\n-    0x65eebb94,     0x65bad14e,     0x65efe178,     0x65fc5697,\n-    0x65e07f14,     0x040c55a6,     0x04977f4d,     0x043d3046,\n-    0x04b733a0,     0x046830a4,     0x04ed322d,     0x05686948,\n-    0x05bd6c13,     0x65c88ef0,     0x450db3d7,     0x4540b6d9,\n-    0x043e3979,     0x445896ce,     0x445a9005,     0x44d98069,\n-    0x445b87ae,     0x04da348e,     0x04982edb,     0x0499397f,\n-    0x0408338c,     0x04ca309c,     0x65c721e6,     0x65c63641,\n-    0x65982882,     0x04812b8b,     0x0e251083,     0x4e3712d5,\n-    0x0e61101f,     0x4e6d118b,     0x0eba1338,     0x4eb712d5,\n-    0x2e31120f,     0x6e2e11ac,     0x2e6810e6,     0x6e6f11cd,\n-    0x2eaa1128,     0x6eb1120f,\n+    0x0420bc31,     0x05271e11,     0x6545e891,     0x6585e891,\n+    0x65c5e891,     0x6545c891,     0x6585c891,     0x65c5c891,\n+    0x45b0c210,     0x45f1c231,     0x1e601000,     0x1e603000,\n+    0x1e621000,     0x1e623000,     0x1e641000,     0x1e643000,\n+    0x1e661000,     0x1e663000,     0x1e681000,     0x1e683000,\n+    0x1e6a1000,     0x1e6a3000,     0x1e6c1000,     0x1e6c3000,\n+    0x1e6e1000,     0x1e6e3000,     0x1e701000,     0x1e703000,\n+    0x1e721000,     0x1e723000,     0x1e741000,     0x1e743000,\n+    0x1e761000,     0x1e763000,     0x1e781000,     0x1e783000,\n+    0x1e7a1000,     0x1e7a3000,     0x1e7c1000,     0x1e7c3000,\n+    0x1e7e1000,     0x1e7e3000,     0xf8268267,     0xf82d023c,\n+    0xf8301046,     0xf83d2083,     0xf8263290,     0xf82d528c,\n+    0xf8284299,     0xf8337160,     0xf8386286,     0xf8bf820e,\n+    0xf8a600e0,     0xf8af1353,     0xf8a922ea,     0xf8b53396,\n+    0xf8a251e3,     0xf8b340f4,     0xf8a470fd,     0xf8a06209,\n+    0xf8f48097,     0xf8f002ea,     0xf8eb10d9,     0xf8ff21b0,\n+    0xf8f7302c,     0xf8ee52a9,     0xf8f041fa,     0xf8e471e4,\n+    0xf8e863c6,     0xf864823d,     0xf87d013a,     0xf86f1162,\n+    0xf87d20e3,     0xf86132bb,     0xf870510e,     0xf8704336,\n+    0xf86572b4,     0xf8706217,     0xb83e8294,     0xb8200264,\n+    0xb8381284,     0xb8242358,     0xb8333102,     0xb828530e,\n+    0xb83042df,     0xb824703f,     0xb82a6194,     0xb8a080e9,\n+    0xb8b80090,     0xb8bb1146,     0xb8bb21b8,     0xb8b032df,\n+    0xb8b653f4,     0xb8bd41c9,     0xb8b47287,     0xb8bc6169,\n+    0xb8ee828c,     0xb8e10138,     0xb8f3126d,     0xb8f020b0,\n+    0xb8e03183,     0xb8e851ef,     0xb8f041e4,     0xb8fe7005,\n+    0xb8ea6376,     0xb8638120,     0xb873015d,     0xb8781284,\n+    0xb86723b8,     0xb86e3175,     0xb87b51ed,     0xb87f41d1,\n+    0xb863721e,     0xb87660f4,     0xce216874,     0xce104533,\n+    0xce648c15,     0xce8e3302,     0xce6e82ab,     0xce6c87d1,\n+    0xcec08063,     0xce638937,     0x25e0c358,     0x25a1c7d3,\n+    0x0580785a,     0x05426328,     0x05009892,     0x25a0cc29,\n+    0x2561cec8,     0x058044b3,     0x05401c99,     0x05006b49,\n+    0x25e0d6f7,     0x2561c528,     0x0583c8bc,     0x0542522f,\n+    0x05001ec0,     0x25e0de65,     0x25a1c113,     0x05803cad,\n+    0x0540f3c0,     0x0500ab15,     0x2560c28c,     0x2561d7c0,\n+    0x05801ed7,     0x0542633b,     0x05003696,     0x2560d4b4,\n+    0x25e1c918,     0x058021ff,     0x05400e15,     0x0500f3de,\n+    0x0473025a,     0x04bd05ab,     0x658e0025,     0x658a08e2,\n+    0x659a0493,     0x043e1062,     0x04f418b4,     0x046d15bd,\n+    0x04611fce,     0x04d6a07c,     0x04001929,     0x041a09da,\n+    0x04d098f4,     0x04db10d4,     0x0459a3ad,     0x041aa029,\n+    0x041919fb,     0x04d39e24,     0x04118302,     0x04101dba,\n+    0x04d7ae16,     0x04dea571,     0x04180210,     0x05e786fc,\n+    0x05e4915c,     0x04881cf1,     0x044a0f04,     0x04090969,\n+    0x048b16c4,     0x044101e4,     0x04dcbf44,     0x65809745,\n+    0x658d833f,     0x65c68468,     0x65c79b07,     0x65829e38,\n+    0x049dafca,     0x6582bba8,     0x65c0b7ff,     0x65c1b4e0,\n+    0x658dbadd,     0x65819a9d,     0x65ed9246,     0x65b30815,\n+    0x65e6263c,     0x65eebb94,     0x65bad14e,     0x65efe178,\n+    0x65fc5697,     0x65e07f14,     0x040c55a6,     0x04977f4d,\n+    0x043d3046,     0x04b733a0,     0x046830a4,     0x04ed322d,\n+    0x05686948,     0x05bd6c13,     0x65c88ef0,     0x450db3d7,\n+    0x4540b6d9,     0x043e3979,     0x445896ce,     0x445a9005,\n+    0x44d98069,     0x445b87ae,     0x04da348e,     0x04982edb,\n+    0x0499397f,     0x0408338c,     0x04ca309c,     0x65c721e6,\n+    0x65c63641,     0x65982882,     0x04812b8b,     0x0e251083,\n+    0x4e3712d5,     0x0e61101f,     0x4e6d118b,     0x0eba1338,\n+    0x4eb712d5,     0x2e31120f,     0x6e2e11ac,     0x2e6810e6,\n+    0x6e6f11cd,     0x2eaa1128,     0x6eb1120f,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":81,"deletions":80,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -2743,0 +2743,30 @@\n+    public static final String EXPAND_VB = VECTOR_PREFIX + \"EXPAND_VB\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_VB, \"ExpandV\", TYPE_BYTE);\n+    }\n+\n+    public static final String EXPAND_VS = VECTOR_PREFIX + \"EXPAND_VS\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_VS, \"ExpandV\", TYPE_SHORT);\n+    }\n+\n+    public static final String EXPAND_VI = VECTOR_PREFIX + \"EXPAND_VI\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_VI, \"ExpandV\", TYPE_INT);\n+    }\n+\n+    public static final String EXPAND_VL = VECTOR_PREFIX + \"EXPAND_VL\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_VL, \"ExpandV\", TYPE_LONG);\n+    }\n+\n+    public static final String EXPAND_VF = VECTOR_PREFIX + \"EXPAND_VF\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_VF, \"ExpandV\", TYPE_FLOAT);\n+    }\n+\n+    public static final String EXPAND_VD = VECTOR_PREFIX + \"EXPAND_VD\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_VD, \"ExpandV\", TYPE_DOUBLE);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.generators.*;\n+import compiler.lib.ir_framework.*;\n+import jdk.incubator.vector.*;\n+import jdk.test.lib.Asserts;\n+\n+\/**\n+ * @test\n+ * @bug 8363989\n+ * @key randomness\n+ * @library \/test\/lib \/\n+ * @summary AArch64: Add missing backend support of VectorAPI expand operation\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run driver compiler.vectorapi.VectorExpandTest\n+ *\/\n+\n+public class VectorExpandTest {\n+    static final VectorSpecies<Byte> B_SPECIES = ByteVector.SPECIES_MAX;\n+    static final VectorSpecies<Short> S_SPECIES = ShortVector.SPECIES_MAX;\n+    static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_MAX;\n+    static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_MAX;\n+    static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_MAX;\n+    static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_MAX;\n+    static final int LENGTH = 512;\n+    static final Generators RD = Generators.G;\n+    static byte[] ba, bb;\n+    static short[] sa, sb;\n+    static int[] ia, ib;\n+    static long[] la, lb;\n+    static float[] fa, fb;\n+    static double[] da, db;\n+    static boolean[] ma;\n+\n+    static {\n+        ba = new byte[LENGTH];\n+        bb = new byte[LENGTH];\n+        sa = new short[LENGTH];\n+        sb = new short[LENGTH];\n+        ia = new int[LENGTH];\n+        ib = new int[LENGTH];\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        fa = new float[LENGTH];\n+        fb = new float[LENGTH];\n+        da = new double[LENGTH];\n+        db = new double[LENGTH];\n+        ma = new boolean[LENGTH];\n+\n+        Generator<Integer> iGen = RD.ints();\n+        Generator<Long> lGen = RD.longs();\n+        Generator<Float> fGen = RD.floats();\n+        Generator<Double> dGen = RD.doubles();\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            ba[i] = iGen.next().byteValue();\n+            sa[i] = iGen.next().shortValue();\n+            ma[i] = iGen.next() % 2 == 0;\n+        }\n+        RD.fill(iGen, ia);\n+        RD.fill(lGen, la);\n+        RD.fill(fGen, fa);\n+        RD.fill(dGen, da);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.EXPAND_VB, \"= 1\" }, applyIfCPUFeature = { \"asimd\", \"true\" })\n+    public static void testVectorExpandByte(ByteVector av, VectorMask<Byte> m) {\n+        av.expand(m).intoArray(bb, 0);\n+    }\n+\n+    @Run(test = \"testVectorExpandByte\")\n+    public static void testVectorExpandByte_runner() {\n+        ByteVector av = ByteVector.fromArray(B_SPECIES, ba, 0);\n+        VectorMask<Byte> m = VectorMask.fromArray(B_SPECIES, ma, 0);\n+        testVectorExpandByte(av, m);\n+        int index = 0;\n+        for (int i = 0; i < m.length(); i++) {\n+            Asserts.assertEquals(m.laneIsSet(i) ? ba[index++] : (byte)0, bb[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.EXPAND_VS, \"= 1\" }, applyIfCPUFeature = { \"asimd\", \"true\" })\n+    public static void testVectorExpandShort(ShortVector av, VectorMask<Short> m) {\n+        av.expand(m).intoArray(sb, 0);\n+    }\n+\n+    @Run(test = \"testVectorExpandShort\")\n+    public static void testVectorExpandShort_runner() {\n+        ShortVector av = ShortVector.fromArray(S_SPECIES, sa, 0);\n+        VectorMask<Short> m = VectorMask.fromArray(S_SPECIES, ma, 0);\n+        testVectorExpandShort(av, m);\n+        int index = 0;\n+        for (int i = 0; i < m.length(); i++) {\n+            Asserts.assertEquals(m.laneIsSet(i) ? sa[index++] : (short)0, sb[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.EXPAND_VI, \"= 1\" }, applyIfCPUFeature = { \"asimd\", \"true\" })\n+    public static void testVectorExpandInt(IntVector av, VectorMask<Integer> m) {\n+        av.expand(m).intoArray(ib, 0);\n+    }\n+\n+    @Run(test = \"testVectorExpandInt\")\n+    public static void testVectorExpandInt_runner() {\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        VectorMask<Integer> m = VectorMask.fromArray(I_SPECIES, ma, 0);\n+        testVectorExpandInt(av, m);\n+        int index = 0;\n+        for (int i = 0; i < m.length(); i++) {\n+            Asserts.assertEquals(m.laneIsSet(i) ? ia[index++] : (int)0, ib[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.EXPAND_VL, \"= 1\" }, applyIfCPUFeature = { \"asimd\", \"true\" })\n+    public static void testVectorExpandLong(LongVector av, VectorMask<Long> m) {\n+        av.expand(m).intoArray(lb, 0);\n+    }\n+\n+    @Run(test = \"testVectorExpandLong\")\n+    public static void testVectorExpandLong_runner() {\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        VectorMask<Long> m = VectorMask.fromArray(L_SPECIES, ma, 0);\n+        testVectorExpandLong(av, m);\n+        int index = 0;\n+        for (int i = 0; i < m.length(); i++) {\n+            Asserts.assertEquals(m.laneIsSet(i) ? la[index++] : (long)0, lb[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.EXPAND_VF, \"= 1\" }, applyIfCPUFeature = { \"asimd\", \"true\" })\n+    public static void testVectorExpandFloat(FloatVector av, VectorMask<Float> m) {\n+        av.expand(m).intoArray(fb, 0);\n+    }\n+\n+    @Run(test = \"testVectorExpandFloat\")\n+    public static void testVectorExpandFloat_runner() {\n+        FloatVector av = FloatVector.fromArray(F_SPECIES, fa, 0);\n+        VectorMask<Float> m = VectorMask.fromArray(F_SPECIES, ma, 0);\n+        testVectorExpandFloat(av, m);\n+        int index = 0;\n+        for (int i = 0; i < m.length(); i++) {\n+            Asserts.assertEquals(m.laneIsSet(i) ? fa[index++] : (float)0, fb[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.EXPAND_VD, \"= 1\" }, applyIfCPUFeature = { \"asimd\", \"true\" })\n+    public static void testVectorExpandDouble(DoubleVector av, VectorMask<Double> m) {\n+        av.expand(m).intoArray(db, 0);\n+    }\n+\n+    @Run(test = \"testVectorExpandDouble\")\n+    public static void testVectorExpandDouble_runner() {\n+        DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, 0);\n+        VectorMask<Double> m = VectorMask.fromArray(D_SPECIES, ma, 0);\n+        testVectorExpandDouble(av, m);\n+        int index = 0;\n+        for (int i = 0; i < m.length(); i++) {\n+            Asserts.assertEquals(m.laneIsSet(i) ? da[index++] : (double)0, db[i]);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.setDefaultWarmup(10000)\n+                     .addFlags(\"--add-modules=jdk.incubator.vector\")\n+                     .start();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorExpandTest.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"}]}