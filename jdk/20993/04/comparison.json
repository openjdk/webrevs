{"files":[{"patch":"@@ -2666,1 +2666,1 @@\n-        Shape result = textLine.getOutline(tx);\n+        Shape result = textLine.getOutline();\n@@ -2671,0 +2671,9 @@\n+        if (tx != null) {\n+            if (result instanceof GeneralPath gp) {\n+                \/\/ transform in place\n+                gp.transform(tx);\n+            } else {\n+                \/\/ create a transformed copy\n+                result = tx.createTransformedShape(result);\n+            }\n+        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TextLayout.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -867,1 +867,1 @@\n-    public Shape getOutline(AffineTransform tx) {\n+    public Shape getOutline() {\n@@ -873,1 +873,0 @@\n-\n@@ -877,3 +876,0 @@\n-        if (tx != null) {\n-            dstShape.transform(tx);\n-        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TextLine.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+\n+import javax.imageio.ImageIO;\n+\n+\/*\n+ * @test\n+ * @bug 8339974\n+ * @summary Verifies that text draws correctly using scaled and rotated fonts.\n+ *\/\n+public class RotatedScaledFontTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        test(0);\n+        test(1);\n+        test(2);\n+        test(3);\n+        test(4);\n+    }\n+\n+    private static void test(int quadrants) throws Exception {\n+\n+        int size = 2000;\n+        int center = size \/ 2;\n+        Font base = new Font(\"SansSerif\", Font.PLAIN, 10);\n+        BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_BYTE_BINARY);\n+        Graphics2D g2d = image.createGraphics();\n+\n+        try {\n+            for (int scale = 1; scale <= 100; scale++) {\n+                AffineTransform at = AffineTransform.getQuadrantRotateInstance(quadrants);\n+                at.scale(scale, scale);\n+                Font font = base.deriveFont(at);\n+                g2d.setColor(Color.WHITE);\n+                g2d.fillRect(0, 0, image.getWidth(), image.getHeight());\n+                g2d.setColor(Color.BLACK);\n+                g2d.setFont(font);\n+                g2d.drawString(\"TEST\", center, center);\n+                Rectangle bounds = findTextBoundingBox(image);\n+                if (bounds == null) {\n+                    saveImage(\"bounds\", image);\n+                    throw new RuntimeException(\"Text missing: scale=\" + scale\n+                        + \", quadrants=\" + quadrants + \", center=\" + center);\n+                }\n+                boolean horizontal = (bounds.width > bounds.height);\n+                boolean expectedHorizontal = (quadrants % 2 == 0);\n+                if (horizontal != expectedHorizontal) {\n+                    saveImage(\"orientation\", image);\n+                    throw new RuntimeException(\"Wrong orientation: scale=\" + scale\n+                        + \", quadrants=\" + quadrants + \", center=\" + center\n+                        + \", bounds=\" + bounds + \", horizontal=\" + horizontal\n+                        + \", expectedHorizontal=\" + expectedHorizontal);\n+                }\n+                if (!roughlyEqual(center, bounds.x, scale) && !roughlyEqual(center, bounds.x + bounds.width, scale)) {\n+                    saveImage(\"xedge\", image);\n+                    throw new RuntimeException(\"No x-edge at center: scale=\" + scale\n+                        + \", quadrants=\" + quadrants + \", center=\" + center\n+                        + \", bounds=\" + bounds);\n+                }\n+                if (!roughlyEqual(center, bounds.y, scale) && !roughlyEqual(center, bounds.y + bounds.height, scale)) {\n+                    saveImage(\"yedge\", image);\n+                    throw new RuntimeException(\"No y-edge at center: scale=\" + scale\n+                        + \", quadrants=\" + quadrants + \", center=\" + center\n+                        + \", bounds=\" + bounds);\n+                }\n+            }\n+        } finally {\n+            g2d.dispose();\n+        }\n+    }\n+\n+    private static Rectangle findTextBoundingBox(BufferedImage image) {\n+        int minX = Integer.MAX_VALUE;\n+        int minY = Integer.MAX_VALUE;\n+        int maxX = Integer.MIN_VALUE;\n+        int maxY = Integer.MIN_VALUE;\n+        int width = image.getWidth();\n+        int height = image.getHeight();\n+        int[] rowPixels = new int[width];\n+        for (int y = 0; y < height; y++) {\n+            image.getRGB(0, y, width, 1, rowPixels, 0, width);\n+            for (int x = 0; x < width; x++) {\n+                boolean white = (rowPixels[x] == -1);\n+                if (!white) {\n+                    if (x < minX) {\n+                        minX = x;\n+                    }\n+                    if (y < minY) {\n+                        minY = y;\n+                    }\n+                    if (x > maxX) {\n+                        maxX = x;\n+                    }\n+                    if (y > maxY) {\n+                        maxY = y;\n+                    }\n+                }\n+            }\n+        }\n+        if (minX != Integer.MAX_VALUE) {\n+            return new Rectangle(minX, minY, maxX - minX, maxY - minY);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private static boolean roughlyEqual(int x1, int x2, int scale) {\n+        return Math.abs(x1 - x2) <= Math.ceil(scale \/ 2d) + 1; \/\/ higher scale = higher allowed variance\n+    }\n+\n+    private static void saveImage(String name, BufferedImage image) {\n+        try {\n+            String dir = System.getProperty(\"test.classes\", \".\");\n+            String path = dir + File.separator + name + \".png\";\n+            File file = new File(path);\n+            ImageIO.write(image, \"png\", file);\n+        } catch (Exception e) {\n+            \/\/ we tried, and that's enough\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/FontScaling\/RotatedScaledFontTest.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import javax.print.Doc;\n+import javax.print.DocFlavor;\n+import javax.print.DocPrintJob;\n+import javax.print.SimpleDoc;\n+import javax.print.StreamPrintService;\n+import javax.print.StreamPrintServiceFactory;\n+import javax.print.event.PrintJobAdapter;\n+import javax.print.event.PrintJobEvent;\n+\n+\/*\n+ * @test\n+ * @bug 8339974\n+ * @summary Verifies that text prints correctly using scaled and rotated fonts.\n+ *\/\n+public class PostScriptRotatedScaledFontTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        test(0);\n+        test(1);\n+        test(2);\n+        test(3);\n+        test(4);\n+    }\n+\n+    private static void test(int quadrants) throws Exception {\n+\n+        DocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\n+        String mime = \"application\/postscript\";\n+        StreamPrintServiceFactory[] factories = StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor, mime);\n+        if (factories.length == 0) {\n+            throw new RuntimeException(\"Unable to find PostScript print service factory\");\n+        }\n+\n+        StreamPrintServiceFactory factory = factories[0];\n+\n+        \/\/ required to trigger \"text-as-shapes\" code path in\n+        \/\/ PSPathGraphics.drawString(String, float, float, Font, FontRenderContext, float)\n+        \/\/ for *all* text, not just text that uses a transformed font\n+        String shapeText = \"sun.java2d.print.shapetext\";\n+        System.setProperty(shapeText, \"true\");\n+\n+        try {\n+            for (int scale = 1; scale <= 100; scale++) {\n+\n+                ByteArrayOutputStream output = new ByteArrayOutputStream();\n+                StreamPrintService service = factory.getPrintService(output);\n+                DocPrintJob job = service.createPrintJob();\n+\n+                PrintJobMonitor monitor = new PrintJobMonitor();\n+                job.addPrintJobListener(monitor);\n+\n+                Printable printable = new TestPrintable(scale, quadrants);\n+                Doc doc = new SimpleDoc(printable, flavor, null);\n+                job.print(doc, null);\n+                monitor.waitForJobToFinish();\n+\n+                byte[] ps = output.toByteArray();\n+                Rectangle2D.Double bounds = findTextBoundingBox(ps);\n+                if (bounds == null) {\n+                    throw new RuntimeException(\"Text missing: scale=\" + scale\n+                        + \", quadrants=\" + quadrants);\n+                }\n+\n+                boolean horizontal = (bounds.width > bounds.height);\n+                boolean expectedHorizontal = (quadrants % 2 == 0);\n+                if (horizontal != expectedHorizontal) {\n+                    throw new RuntimeException(\"Wrong orientation: scale=\" + scale\n+                        + \", quadrants=\" + quadrants + \", bounds=\" + bounds\n+                        + \", expectedHorizontal=\" + expectedHorizontal\n+                        + \", horizontal=\" + horizontal);\n+                }\n+            }\n+        } finally {\n+            System.clearProperty(shapeText);\n+        }\n+    }\n+\n+    \/\/ very basic, uses moveto (\"x y M\"), lineto (\"x y L\"), and curveto (\"x1 y1 x2 y2 x3 y3 C\")\n+    private static Rectangle2D.Double findTextBoundingBox(byte[] ps) {\n+        double minX = Double.MAX_VALUE;\n+        double minY = Double.MAX_VALUE;\n+        double maxX = Double.MIN_VALUE;\n+        double maxY = Double.MIN_VALUE;\n+        boolean pastPageClip = false;\n+        List< String > lines = new String(ps, StandardCharsets.ISO_8859_1).lines().toList();\n+        for (String line : lines) {\n+            if (!pastPageClip) {\n+                pastPageClip = \"WC\".equals(line);\n+                continue;\n+            }\n+            String[] values = line.split(\" \");\n+            if (values.length == 3 || values.length == 7) {\n+                String cmd = values[values.length - 1];\n+                if (\"M\".equals(cmd) || \"L\".equals(cmd) || \"C\".equals(cmd)) {\n+                    String sx = values[values.length - 3];\n+                    String sy = values[values.length - 2];\n+                    double x = Double.parseDouble(sx);\n+                    double y = Double.parseDouble(sy);\n+                    if (x < minX) {\n+                        minX = x;\n+                    }\n+                    if (y < minY) {\n+                        minY = y;\n+                    }\n+                    if (x > maxX) {\n+                        maxX = x;\n+                    }\n+                    if (y > maxY) {\n+                        maxY = y;\n+                    }\n+                }\n+            }\n+        }\n+        if (minX != Double.MAX_VALUE) {\n+            return new Rectangle2D.Double(minX, minY, maxX - minX, maxY - minY);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private static final class TestPrintable implements Printable {\n+        private final int scale;\n+        private final int quadrants;\n+        public TestPrintable(int scale, int quadrants) {\n+            this.scale = scale;\n+            this.quadrants = quadrants;\n+        }\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+            if (pageIndex > 0) {\n+                return NO_SUCH_PAGE;\n+            }\n+            AffineTransform at = AffineTransform.getQuadrantRotateInstance(quadrants);\n+            at.scale(scale, scale);\n+            Font base = new Font(\"SansSerif\", Font.PLAIN, 10);\n+            Font font = base.deriveFont(at);\n+            graphics.setFont(font);\n+            graphics.drawString(\"TEST\", 300, 300);\n+            return PAGE_EXISTS;\n+        }\n+    }\n+\n+    private static class PrintJobMonitor extends PrintJobAdapter {\n+        private boolean finished;\n+        @Override\n+        public void printJobCanceled(PrintJobEvent pje) {\n+            finished();\n+        }\n+        @Override\n+        public void printJobCompleted(PrintJobEvent pje) {\n+            finished();\n+        }\n+        @Override\n+        public void printJobFailed(PrintJobEvent pje) {\n+            finished();\n+        }\n+        @Override\n+        public void printJobNoMoreEvents(PrintJobEvent pje) {\n+            finished();\n+        }\n+        private synchronized void finished() {\n+            finished = true;\n+            notify();\n+        }\n+        public synchronized void waitForJobToFinish() {\n+            try {\n+                while (!finished) {\n+                    wait();\n+                }\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/PostScriptRotatedScaledFontTest.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"}]}