{"files":[{"patch":"@@ -140,3 +140,4 @@\n-void ShenandoahPhaseTimings::set_cycle_data(Phase phase, double time, bool should_aggregate_cycles) {\n-  if (should_aggregate_cycles) {\n-    _cycle_data[phase] = _cycle_data[phase] <= 0 ? time :  _cycle_data[phase] + time;\n+void ShenandoahPhaseTimings::set_cycle_data(Phase phase, double time, bool should_aggregate) {\n+  const double cycle_data = _cycle_data[phase];\n+  if (should_aggregate) {\n+    _cycle_data[phase] = (cycle_data == uninitialized()) ? time :  cycle_data + time;\n@@ -145,2 +146,1 @@\n-    double d = _cycle_data[phase];\n-    assert(d == uninitialized(), \"Should not be set yet: %s, current value: %lf\", phase_name(phase), d);\n+    assert(cycle_data == uninitialized(), \"Should not be set yet: %s, current value: %lf\", phase_name(phase), cycle_data);\n@@ -152,1 +152,1 @@\n-void ShenandoahPhaseTimings::record_phase_time(Phase phase, double time, bool should_aggregate_cycles) {\n+void ShenandoahPhaseTimings::record_phase_time(Phase phase, double time, bool should_aggregate) {\n@@ -154,1 +154,1 @@\n-    set_cycle_data(phase, time, should_aggregate_cycles);\n+    set_cycle_data(phase, time, should_aggregate);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-  void set_cycle_data(Phase phase, double time, bool should_aggregate_cycles=false);\n+  void set_cycle_data(Phase phase, double time, bool should_aggregate = false);\n@@ -226,1 +226,1 @@\n-  void record_phase_time(Phase phase, double time, bool should_aggregate_cycles=false);\n+  void record_phase_time(Phase phase, double time, bool should_aggregate = false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-ShenandoahTimingsTracker::ShenandoahTimingsTracker(ShenandoahPhaseTimings::Phase phase, bool should_aggregate_cycles) :\n+ShenandoahTimingsTracker::ShenandoahTimingsTracker(ShenandoahPhaseTimings::Phase phase, bool should_aggregate) :\n@@ -121,1 +121,1 @@\n-  _should_aggregate_cycles = should_aggregate_cycles;\n+  _should_aggregate = should_aggregate;\n@@ -125,3 +125,1 @@\n-  const double end_time = os::elapsedTime();\n-  const double phase_elapsed_time = end_time - _start;\n-  _timings->record_phase_time(_phase, phase_elapsed_time, _should_aggregate_cycles);\n+  _timings->record_phase_time(_phase, os::elapsedTime() - _start, _should_aggregate);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  bool _should_aggregate_cycles;\n+  bool _should_aggregate;\n@@ -72,1 +72,1 @@\n-  ShenandoahTimingsTracker(ShenandoahPhaseTimings::Phase phase, bool should_aggregate_cycles=false);\n+  ShenandoahTimingsTracker(ShenandoahPhaseTimings::Phase phase, bool should_aggregate = false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}