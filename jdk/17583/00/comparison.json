{"files":[{"patch":"@@ -2380,1 +2380,1 @@\n-int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size_autovectorization(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,1 @@\n-  bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-  bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1005,1 +1005,1 @@\n-bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt) {\n@@ -1077,1 +1077,1 @@\n-int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size_autovectorization(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2176,1 +2176,1 @@\n-bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt) {\n@@ -2245,1 +2245,1 @@\n-int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size_autovectorization(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2020,1 +2020,1 @@\n-int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size_autovectorization(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-  bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1516,1 +1516,1 @@\n-bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt) {\n@@ -1577,1 +1577,1 @@\n-int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size_autovectorization(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1702,1 +1702,1 @@\n-bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt) {\n@@ -2283,1 +2283,1 @@\n-int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size_autovectorization(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-  static bool match_rule_supported_superword(int opcode, int vlen, BasicType bt);\n+  static bool match_rule_supported_autovectorization(int opcode, int vlen, BasicType bt);\n@@ -358,1 +358,1 @@\n-  static int superword_max_vector_size(const BasicType bt);\n+  static int max_vector_size_autovectorization(const BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-  int max_vector = Matcher::superword_max_vector_size(T_BYTE);\n+  int max_vector = Matcher::max_vector_size_autovectorization(T_BYTE);\n@@ -299,1 +299,1 @@\n-      int cur_max_vector = Matcher::superword_max_vector_size(bt);\n+      int cur_max_vector = Matcher::max_vector_size_autovectorization(bt);\n@@ -797,1 +797,1 @@\n-      vw = MIN2(Matcher::superword_max_vector_size(btype)*type2aelembytes(btype), vw * 2);\n+      vw = MIN2(Matcher::max_vector_size_autovectorization(btype)*type2aelembytes(btype), vw * 2);\n@@ -803,1 +803,1 @@\n-  if (vectsize < Matcher::superword_max_vector_size(btype)) {\n+  if (vectsize < Matcher::max_vector_size_autovectorization(btype)) {\n@@ -993,2 +993,2 @@\n-  if (Matcher::superword_max_vector_size(bt1) < 2 ||\n-      (longer_bt != T_ILLEGAL && Matcher::superword_max_vector_size(longer_bt) < 2)) {\n+  if (Matcher::max_vector_size_autovectorization(bt1) < 2 ||\n+      (longer_bt != T_ILLEGAL && Matcher::max_vector_size_autovectorization(longer_bt) < 2)) {\n@@ -3076,1 +3076,1 @@\n-            if (ReductionNode::implemented(use->Opcode(), Matcher::superword_max_vector_size(bt), bt)) {\n+            if (ReductionNode::implemented(use->Opcode(), Matcher::max_vector_size_autovectorization(bt), bt)) {\n@@ -3230,1 +3230,1 @@\n-  int max = Matcher::superword_max_vector_size(vt);\n+  int max = Matcher::max_vector_size_autovectorization(vt);\n@@ -3233,1 +3233,1 @@\n-  return max < 2 ? Matcher::superword_max_vector_size(bt) : max;\n+  return max < 2 ? Matcher::max_vector_size_autovectorization(bt) : max;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -392,1 +392,1 @@\n-  return Matcher::superword_max_vector_size(bt) >= size &&\n+  return Matcher::max_vector_size_autovectorization(bt) >= size &&\n@@ -412,1 +412,1 @@\n-    return vopc > 0 && Matcher::match_rule_supported_superword(vopc, vlen, bt);\n+    return vopc > 0 && Matcher::match_rule_supported_autovectorization(vopc, vlen, bt);\n@@ -1437,1 +1437,1 @@\n-    return vopc > 0 && Matcher::match_rule_supported_superword(vopc, vlen, dst_type);\n+    return vopc > 0 && Matcher::match_rule_supported_autovectorization(vopc, vlen, dst_type);\n@@ -1531,1 +1531,1 @@\n-    return vopc != opc && Matcher::match_rule_supported_superword(vopc, vlen, bt);\n+    return vopc != opc && Matcher::match_rule_supported_autovectorization(vopc, vlen, bt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}