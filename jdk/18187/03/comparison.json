{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -606,9 +606,5 @@\n-        if (!SwingUtilities2.isPrinting(g)) {\n-            Graphics bsg = backingStoreImage.getGraphics();\n-            bsg.setColor(g.getColor());\n-            bsg.setFont(g.getFont());\n-            bsg.setClip(g.getClipBounds());\n-            return bsg;\n-        } else {\n-            return g;\n-        }\n+        Graphics bsg = backingStoreImage.getGraphics();\n+        bsg.setColor(g.getColor());\n+        bsg.setFont(g.getFont());\n+        bsg.setClip(g.getClipBounds());\n+        return bsg;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,0 +67,1 @@\n+import java.awt.image.MultiResolutionImage;\n@@ -1135,0 +1136,3 @@\n+        } else if (img instanceof MultiResolutionImage) {\n+            return convertToBufferedImage((MultiResolutionImage) img,\n+                                           img.getWidth(null), img.getHeight(null));\n@@ -1145,0 +1149,12 @@\n+    protected BufferedImage convertToBufferedImage(MultiResolutionImage multiResolutionImage,\n+                                                       double width, double height ) {\n+        Image resolutionImage = multiResolutionImage.getResolutionVariant(width, height);\n+        BufferedImage bufferedImage = new BufferedImage(resolutionImage.getWidth(null),\n+                                                        resolutionImage.getHeight(null),\n+                                                        BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g2d = bufferedImage.createGraphics();\n+        g2d.drawImage(resolutionImage, 0, 0, (int) width, (int) height, null);\n+        g2d.dispose();\n+        return bufferedImage;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PathGraphics.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1320,1 +1320,1 @@\n-    public static boolean isPrinting(Graphics g) {\n+    static boolean isPrinting(Graphics g) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/SwingUtilities2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import javax.swing.SwingUtilities;\n@@ -45,1 +44,1 @@\n- * @bug 8210807\n+ * @bug 8210807 8322140\n@@ -53,3 +52,0 @@\n-    public static JFrame frame;\n-    public static PassFailJFrame passFailJFrame;\n-\n@@ -57,12 +53,1 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            try {\n-                initialize();\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-        passFailJFrame.awaitAndCheck();\n-    }\n-\n-    public static void initialize() throws Exception {\n-        final String INSTRUCTIONS = \"\"\"\n+        String INSTRUCTIONS = \"\"\"\n@@ -75,3 +60,9 @@\n-        TestTable testTable = new TestTable(true);\n-        frame = new JFrame(\"JTable Print Test\");\n-        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS, 5L, 6, 35);\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(6)\n+                .columns(35)\n+                .testUI(JTableScrollPrintTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -79,0 +70,3 @@\n+    public static JFrame initialize() {\n+        TestTable testTable = new TestTable(true);\n+        JFrame frame = new JFrame(\"JTable Print Test\");\n@@ -86,0 +80,1 @@\n+        return frame;\n@@ -106,1 +101,1 @@\n-            if (useScrollPane == true) {\n+            if (useScrollPane) {\n@@ -120,1 +115,1 @@\n-        private Component componentToBePrinted;\n+        private final Component componentToBePrinted;\n","filename":"test\/jdk\/javax\/swing\/JTable\/JTableScrollPrintTest.java","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"}]}