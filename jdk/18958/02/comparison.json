{"files":[{"patch":"@@ -27,5 +27,1 @@\n-import java.util.*;\n-import java.security.*;\n-import java.security.cert.X509Certificate;\n-import java.security.cert.CertificateException;\n-import java.security.cert.CertificateFactory;\n+import java.security.cert.*;\n@@ -33,1 +29,0 @@\n-import java.time.temporal.ChronoUnit;\n@@ -35,0 +30,3 @@\n+import java.time.temporal.ChronoUnit;\n+import java.util.*;\n+import java.security.*;\n@@ -38,20 +36,2 @@\n-import sun.security.util.DerOutputStream;\n-import sun.security.util.DerValue;\n-import sun.security.util.ObjectIdentifier;\n-import sun.security.util.SignatureUtil;\n-import sun.security.x509.AccessDescription;\n-import sun.security.x509.AlgorithmId;\n-import sun.security.x509.AuthorityInfoAccessExtension;\n-import sun.security.x509.AuthorityKeyIdentifierExtension;\n-import sun.security.x509.SubjectKeyIdentifierExtension;\n-import sun.security.x509.BasicConstraintsExtension;\n-import sun.security.x509.CertificateSerialNumber;\n-import sun.security.x509.ExtendedKeyUsageExtension;\n-import sun.security.x509.DNSName;\n-import sun.security.x509.GeneralName;\n-import sun.security.x509.GeneralNames;\n-import sun.security.x509.KeyUsageExtension;\n-import sun.security.x509.SerialNumber;\n-import sun.security.x509.SubjectAlternativeNameExtension;\n-import sun.security.x509.URIName;\n-import sun.security.x509.KeyIdentifier;\n+import sun.security.util.*;\n+import sun.security.x509.*;\n@@ -417,0 +397,143 @@\n+    \/**\n+     * Creates a CertificateBuilder with default values for creating end-entity\n+     * certificates. Certificates are valid for an hour and are given a random serial number.\n+     *\n+     * @param subjectName the subject name for the certificate\n+     * @param publicKey the public key to be associated with the certificate\n+     * @param caKey CA key used to sign the certificate\n+     * @param extensions Optional extensions to add to the certificate\n+     * @throws Exception\n+     *\/\n+    public static CertificateBuilder newEndEntity(String subjectName, PublicKey publicKey,\n+                          PublicKey caKey, Extension... extensions) throws Exception {\n+        SecureRandom random = new SecureRandom();\n+        return new CertificateBuilder()\n+                .setSubjectName(subjectName)\n+                .setPublicKey(publicKey)\n+                .setNotBefore(Date.from(Instant.now().minus(1, ChronoUnit.HOURS)))\n+                .setNotAfter(Date.from(Instant.now().plus(1, ChronoUnit.HOURS)))\n+                .setSerialNumber(BigInteger.valueOf(random.nextLong(1000000)+1))\n+                .addSubjectKeyIdExt(publicKey)\n+                .addAuthorityKeyIdExt(caKey)\n+                .addExtensions(Arrays.asList(extensions));\n+    }\n+\n+    \/**\n+     * Creates a CertificateBuilder for TLS servers. Certificates are valid for\n+     * one hour and are given a random serial number. The Extended Key Usage extension\n+     * is set to serverAuth.\n+     * Default key usage:\n+     * <ul>\n+     *     <li>Digital Signature<\/li>\n+     *     <li>Non Repudiation<\/li>\n+     *     <li>Key Encipherment<\/li>\n+     *     <li>Key Agreement<\/li>\n+     * <\/ul>\n+     * @param subjectName the subject name for the certificate\n+     * @param publicKey the public key to be associated with the certificate\n+     * @param caKey CA key used to sign the certificate\n+     * @param extensions Optional extensions to add to the certificate\n+     * @throws Exception\n+     *\/\n+    public static CertificateBuilder newServerCertificateBuilder(String subjectName,\n+                 PublicKey publicKey, PublicKey caKey, Extension... extensions) throws Exception {\n+        return newEndEntity(subjectName, publicKey, caKey, extensions)\n+                .addKeyUsageExt(new boolean[]{true, true, true, false, true, false, false, false, false})\n+                .addExtendedKeyUsageExt(List.of(KnownOIDs.serverAuth.value()));\n+    }\n+\n+    \/**\n+     * Creates a CertificateBuilder for TLS clients. Certificates are valid for\n+     * one hour and are given a random serial number. The Extended Key Usage extension\n+     * is set to clientAuth.\n+     * Default key usage:\n+     * <ul>\n+     *     <li>Digital Signature<\/li>\n+     *     <li>Non Repudiation<\/li>\n+     *     <li>Key Encipherment<\/li>\n+     *     <li>Key Agreement<\/li>\n+     * <\/ul>\n+     * @param subjectName the subject name for the certificate\n+     * @param publicKey the public key to be associated with the certificate\n+     * @param caKey CA key used to sign the certificate\n+     * @param extensions Optional extensions to add to the certificate\n+     * @throws Exception\n+     *\/\n+    public static CertificateBuilder newClientCertificateBuilder(String subjectName,\n+                 PublicKey publicKey, PublicKey caKey, Extension... extensions) throws Exception {\n+        return newEndEntity(subjectName, publicKey, caKey, extensions)\n+                .addKeyUsageExt(new boolean[]{true, true, true, false, true, false, false, false, false})\n+                .addExtendedKeyUsageExt(List.of(KnownOIDs.clientAuth.value()));\n+    }\n+\n+    \/**\n+     * Creates a CertificateBuilder with default values for creating self-signed\n+     * CA certificates. Certificates are valid for an hour and have a random\n+     * serial number.\n+     * Default key usage:\n+     * <ul>\n+     *     <li>Certificate Sign<\/li>\n+     *     <li>CRL sign<\/li>\n+     * <\/ul>\n+     *\n+     * @param subject The subject name of the certificate\n+     * @param caKey The keypair to be associated with the certificate\n+     * @param extensions Optional extensions to add to the certificate.\n+     * @throws Exception\n+     *\/\n+    public static CertificateBuilder newSelfSignedCA(String subject, KeyPair caKey,\n+                                     Extension... extensions) throws Exception {\n+        SecureRandom random = new SecureRandom();\n+        return new CertificateBuilder()\n+                .setSubjectName(subject)\n+                .setPublicKey(caKey.getPublic())\n+                .setNotBefore(Date.from(Instant.now().minus(1, ChronoUnit.HOURS)))\n+                .setNotAfter(Date.from(Instant.now().plus(1, ChronoUnit.HOURS)))\n+                .setSerialNumber(BigInteger.valueOf(random.nextLong(1000000)+1))\n+                .addSubjectKeyIdExt(caKey.getPublic())\n+                .addBasicConstraintsExt(true, true, -1)\n+                .addKeyUsageExt(new boolean[]{false, false, false, false, false, true, true, false, false})\n+                .addAuthorityKeyIdExt(caKey.getPublic())\n+                .addExtensions(Arrays.asList(extensions));\n+    }\n+\n+    \/**\n+     * Create a Subject Alternative Name extension for the given DNS name\n+     * @param critical Sets the extension to critical or non-critical\n+     * @param dnsName DNS name to use in the extension\n+     * @throws IOException\n+     *\/\n+    public static SubjectAlternativeNameExtension createDNSSubjectAltNameExt(\n+            boolean critical, String dnsName) throws IOException {\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new DNSName(dnsName)));\n+        return new SubjectAlternativeNameExtension(critical, gns);\n+    }\n+\n+    \/**\n+     * Create a Subject Alternative Name extension for the given IP address\n+     * @param critical Sets the extension to critical or non-critical\n+     * @param ipAddress IP address to use in the extension\n+     * @throws IOException\n+     *\/\n+    public static SubjectAlternativeNameExtension createIPSubjectAltNameExt(\n+            boolean critical, String ipAddress) throws IOException {\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new IPAddressName(ipAddress)));\n+        return new SubjectAlternativeNameExtension(critical, gns);\n+    }\n+\n+    \/**\n+     * Print a PEM encoded version of the given certificate to the print stream.\n+     *\/\n+    public static void printCertificate(X509Certificate certificate, PrintStream ps) {\n+        try {\n+            Base64.Encoder encoder = Base64.getEncoder();\n+            ps.println(\"-----BEGIN CERTIFICATE-----\");\n+            ps.println(encoder.encodeToString(certificate.getEncoded()));\n+            ps.println(\"-----END CERTIFICATE-----\");\n+        } catch (CertificateEncodingException exc) {\n+            exc.printStackTrace(ps);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/security\/testlibrary\/CertificateBuilder.java","additions":149,"deletions":26,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -41,1 +47,1 @@\n-import java.net.*;\n+import java.security.*;\n@@ -45,3 +51,0 @@\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n@@ -50,4 +53,1 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.util.Base64;\n+import sun.security.testlibrary.CertificateBuilder;\n@@ -58,7 +58,0 @@\n-\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n@@ -71,166 +64,5 @@\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificates and key used in the test.\n-    static String trustedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA3WhcNMzMwMzI4MTIwNjA3WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n-        \"KoZIhvcNAQEBBQADgY0AMIGJAoGBANY+7Enp+1S566kLcKk+qe4Ki6BxaHGZ+v7r\\n\" +\n-        \"vLksx9IQZCbAEf4YLbrZhKzKD3SPIJXyxPFwknAknIh3Knk8mViOZks7T8L3GnJr\\n\" +\n-        \"TBaVvDyTzDJum\/QYiahfO2qpfN\/Oya2UILmqsBAeLyWpzbQsAyWBXfoUtkOUgnzK\\n\" +\n-        \"fk6QAKYrAgMBAAGjgaUwgaIwHQYDVR0OBBYEFEtmQi7jT1ijXOafPsfkrLwSVu9e\\n\" +\n-        \"MGMGA1UdIwRcMFqAFEtmQi7jT1ijXOafPsfkrLwSVu9eoT+kPTA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n-        \"BQADgYEAkKWxMc4+ODk5WwLXXweB8\/IKfVfrizNn0KLEgsZ6xNXFIXDpiPGAFcgl\\n\" +\n-        \"MzFO424JgyvUulsUc\/X16Cnuwwntkk6KUG7vEV7h4o9sAV7Cax3gfQE\/EZFb4ybn\\n\" +\n-        \"aBm1UsujMKd\/ovqbbbxJbmOWzCeo0QfIGleDEyh3NBBZ0i11Kiw=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ web server certificate, www.example.com\n-    static String targetCertStr_A =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVTCCAb6gAwIBAgIBAjANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA4WhcNMzIwMTAzMTIwNjA4WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n-        \"BAMTD3d3dy5leGFtcGxlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n-        \"4zFp3PZNzsd3ZwG6FNNWO9eSN+UBymlf8oCwpKJM2tIinmMWvWIXnlx\/2UXIfSAq\\n\" +\n-        \"QEG3aXkAFyEiGGpQlBbqcfrESsHsiz2pnnm5dG2v\/eS0Bwz1jmcuNmwnh3UQw2Vl\\n\" +\n-        \"+BLk8ukdrLjiCT8jARiHExYf1Xg+wUqQ9y8NV26hdaUCAwEAAaNPME0wCwYDVR0P\\n\" +\n-        \"BAQDAgPoMB0GA1UdDgQWBBQwtx+gqzn2w4y82brXlp7tqBYEZDAfBgNVHSMEGDAW\\n\" +\n-        \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQAJWo8B6Ud+\\n\" +\n-        \"\/OU+UcZLihlfMX02OSlK2ZB7mfqpj2G3JT9yb0A+VbY3uuajmaYYIIxl3kXGz\/n8\\n\" +\n-        \"M2Q\/Ux\/MDxG+IFKHC26Kuj4dAQgzjq2pILVPTE2QnaQTNCsgVZtTaC47SG9FRSoC\\n\" +\n-        \"qvnIvn\/oTpKSqus76I1cR4joDtiV2OEuVw==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8\n-    static String targetPrivateKey_A =\n-        \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAOMxadz2Tc7Hd2cB\\n\" +\n-        \"uhTTVjvXkjflAcppX\/KAsKSiTNrSIp5jFr1iF55cf9lFyH0gKkBBt2l5ABchIhhq\\n\" +\n-        \"UJQW6nH6xErB7Is9qZ55uXRtr\/3ktAcM9Y5nLjZsJ4d1EMNlZfgS5PLpHay44gk\/\\n\" +\n-        \"IwEYhxMWH9V4PsFKkPcvDVduoXWlAgMBAAECgYAqX2nuIyXp3fvgA0twXOYlbRRB\\n\" +\n-        \"Rn3qAXM6qFPJsNeCrFR2k+aG1cev6nKR1FkLNTeMGnWZv06MAcr5IML8i7WXyG4C\\n\" +\n-        \"LY\/C0gedn94FDKFlln+bTENwQTGjn4lKysDA+IuNpasTeMCajbic+dPByhIdTOjZ\\n\" +\n-        \"iMCyxbLfpk40zQopVQJBAPyfGmkeHB3GjdbdgujWCGKb2UxBa4O8dy3O4l2yizTn\\n\" +\n-        \"uUqMGcwGY4ciNSVvZQ7jKo4vDmkSuYib4\/woPChaNfMCQQDmO0BQuSWYGNtSwV35\\n\" +\n-        \"lafZfX1dNCLKm1iNA6A12evXgvQiE9WT4mqionig0VZW16HtiY4\/BkHOcos\/K9Um\\n\" +\n-        \"ARQHAkA8mkaRtSF1my5nv1gqVz5Hua+VdZQ\/VDUbDiiL5cszc+ulkJqXsWirAG\/T\\n\" +\n-        \"fTe3LJQG7A7+8fkEZrF4yoY0AAA1AkEAotokezULj5N9iAL5SzL9wIzQYV4ggfny\\n\" +\n-        \"YATBjXXxKccakwQ+ndWZIiMUeoS4ssLialhTgucVI0fIkU2a\/r\/ifwJAc6e+5Pvh\\n\" +\n-        \"MghQj\/U788Od\/v6rgqz\/NGsduZ7uilCMcWiwA73OR2MHMH\/OIuoofuEPrfuV9isV\\n\" +\n-        \"xVXhgpKfP\/pdOA==\";\n-\n-    \/\/ web server certificate, www.example.net\n-    static String targetCertStr_B =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVTCCAb6gAwIBAgIBBDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA5WhcNMzIwMTAzMTIwNjA5WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n-        \"BAMTD3d3dy5leGFtcGxlLm5ldDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n-        \"2VlzF1fvWYczDChrUeJiLJ1M\/dIShCaOTfYGiXfQGEZCAWTacUclwr+rVMnZ75\/c\\n\" +\n-        \"wwg5pNdXRijxMil8DBTS1gFcIFQhosLHvzIAe6ULlg\/xB+\/L6KBz+NTWfo\/2KF6t\\n\" +\n-        \"xatmcToNrCcwi7eUOfbzQje65Tizs56jJYem2m7Rk0ECAwEAAaNPME0wCwYDVR0P\\n\" +\n-        \"BAQDAgPoMB0GA1UdDgQWBBQT\/FR0cAWcZQ7h0X79KGki34OSQjAfBgNVHSMEGDAW\\n\" +\n-        \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQB67cPIT6fz\\n\" +\n-        \"6Ws8fBpYgW2ad4ci66i1WduBD9CpGFE+jRK2feRj6hvYBXocKj0AMWUFIEB2E3hA\\n\" +\n-        \"oIjxcf1GxIpHVl9DjlhxqXbA0Ktl7\/NGNRlDSLTizOTl3FB1mMTlOGvXDVmpcFhl\\n\" +\n-        \"HuoP1hYvhTsBwPx5igGNchuPtDIUzL2mXw==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String targetPrivateKey_B =\n-        \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBANlZcxdX71mHMwwo\\n\" +\n-        \"a1HiYiydTP3SEoQmjk32Bol30BhGQgFk2nFHJcK\/q1TJ2e+f3MMIOaTXV0Yo8TIp\\n\" +\n-        \"fAwU0tYBXCBUIaLCx78yAHulC5YP8Qfvy+igc\/jU1n6P9ihercWrZnE6DawnMIu3\\n\" +\n-        \"lDn280I3uuU4s7OeoyWHptpu0ZNBAgMBAAECgYEAl19H26sfhD+32rDPxZCgBShs\\n\" +\n-        \"dZ33zVe45i0Bcn4iTLWpxKTDyf7eGps4rO2DvfKdYqt40ggzvSZIjUH9JcDe8GmG\\n\" +\n-        \"d3m0ILB7pg4jsFlpyeHpTO8grPLxA1G9s3o0DoFpz\/rooqgFfe\/DrRDmRoOSkgfV\\n\" +\n-        \"\/gseIbgJHRO\/Ctyvdh0CQQD6uFd0HxhH1jl\/JzvPzIH4LSnPcdEh9zsMEb6uzh75\\n\" +\n-        \"9qL+IHD5N2I\/pYZTKqDFIwhJf701+LKag55AX\/zrDt7rAkEA3e00AbnwanDMa6Wj\\n\" +\n-        \"+gFekUQveSVra38LiihzCkyVvQpFjbiF1rUhSNQ0dpU5\/hmrYF0C6H9VXAesfkUY\\n\" +\n-        \"WhpDgwJAYjgZOop77piDycZK7isFt32p5XSHIzFBVocVFlH1XKM8UyXOXDNQL\/Le\\n\" +\n-        \"XnJSrSf+NRzvuNcG0PVC56Ey6brXpQJAY4M4vcltt5zq3R5CQBmbGRJ1IyKXX3Vx\\n\" +\n-        \"bDslEqoyvri7ZYgnY5aG3UxiVgYmIf3KrgQnCLAIS6MZQumiuMxsFwJAK5pEG063\\n\" +\n-        \"9ngUof4fDMvZphqZjZR1zMKz\/V\/9ge0DWBINaqFgsgebNu+MyImsC8C6WKjGmV\/2\\n\" +\n-        \"f1MY0D7sC2vU\/Q==\";\n-\n-    \/\/ web server certificate, www.invalid.com\n-    static String targetCertStr_C =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVTCCAb6gAwIBAgIBAzANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA5WhcNMzIwMTAzMTIwNjA5WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n-        \"BAMTD3d3dy5pbnZhbGlkLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n-        \"q6MyQwzCr2nJ41l0frmHL0qULSyW51MhevBC+1W28i0LE\/efrmpwV3LdnlQEGFak\\n\" +\n-        \"DLDwtnff3iru8dSMcA7KdWVkivsE7ZTP+qFDaWBAy7XXiSsv6yZ2Nh4jJb0YcD28\\n\" +\n-        \"45zk2nAl5Az1\/PuoTi1vpQxzFZKuBm1HGgz3MEZvBvMCAwEAAaNPME0wCwYDVR0P\\n\" +\n-        \"BAQDAgPoMB0GA1UdDgQWBBRRMifrND015Nm8N6gV5X7cg1YjjjAfBgNVHSMEGDAW\\n\" +\n-        \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQBjkUO6Ri\/B\\n\" +\n-        \"uDC2gDMIyL5+NTe\/1dPPQYM4HhCNa\/KQYvU5lzCKO9Vpa+i+nyrUNNXUu8Tkyq4Y\\n\" +\n-        \"A+aGSm6+FT\/i9rFwkYUdorBtD3KfQiwTIWrVERXBkWI5iZNaVZhx0TFy4vUpf65d\\n\" +\n-        \"QtwkbHpC66fdKc2EdLXkuY9KkmtZZJJ7YA==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String targetPrivateKey_C =\n-        \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKujMkMMwq9pyeNZ\\n\" +\n-        \"dH65hy9KlC0sludTIXrwQvtVtvItCxP3n65qcFdy3Z5UBBhWpAyw8LZ3394q7vHU\\n\" +\n-        \"jHAOynVlZIr7BO2Uz\/qhQ2lgQMu114krL+smdjYeIyW9GHA9vOOc5NpwJeQM9fz7\\n\" +\n-        \"qE4tb6UMcxWSrgZtRxoM9zBGbwbzAgMBAAECgYASJDK40Y12Wvki1Z6xkkyOnBRj\\n\" +\n-        \"XfYpRykfxGtgA2RN3qLwHlk7Zzaul46DIKA6LlYynTUkJDF+Ww1cdDnP0lBlwcmM\\n\" +\n-        \"iD0ck3zYyYBLhQHuVbkK3SYE+ANRhM0icvvqANP2at\/U4awQcPNEae\/KCiecLNu3\\n\" +\n-        \"CJGqyhPDdrEAqPuJGQJBAN46pQC6l3yrcSYE2s53jSmsm2HVVOFlFXjU6k\/RMTxG\\n\" +\n-        \"FfDJtGUAOQ37rPQ06ugr\/gjLAmmPp+FXozaBdA32D80CQQDFuGRgv3WYqbglIcRL\\n\" +\n-        \"JRs6xlj9w1F97s\/aiUenuwhIPNiUoRbV7mnNuZ\/sGF0svOVE7SazRjuFX6UqL9Y9\\n\" +\n-        \"HzG\/AkEA170pCI8cl4w8eUNHRB9trGKEKjMXhwVCFh7lJf2ZBcGodSzr8w2HVhrZ\\n\" +\n-        \"Ke7hiemDYffrbJ1oxmv05+o+x3r0lQJBAL6adVm2+FyFMFnLZXmzeb59O4jWY5bt\\n\" +\n-        \"Qz6\/HG6bpO5OidMuP99YCHMkQQDOs\/PO3Y5GuAoW6IY4n\/Y9S2B80+0CQBl1\/H9\/\\n\" +\n-        \"0n\/vrb6vW6Azds49tuS82RFAnOhtwTyBEajs08WF8rZQ3WD2RHJnH0+jjfL0anIp\\n\" +\n-        \"dQBSeNN7s7b6rRk=\";\n-\n-    \/\/ This is a certificate for client\n-    static String targetCertStr_D=\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVDCCAb2gAwIBAgIBBTANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjEwWhcNMzIwMTAzMTIwNjEwWjBUMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxFzAVBgNV\\n\" +\n-        \"BAMTDkludGVyT3AgVGVzdGVyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDo\\n\" +\n-        \"Q\/KoAIAC2ljFfW2KwjnxTzi4NQJeUuk2seqKpsAY8x4O5dvixzUl6142zmljapqi\\n\" +\n-        \"bJloQVpfB+CEc5\/l4h5gzGRVzkuqP1oPzDrpZ5GsvmvuHenV\/TzCIgX1cLETzQVt\\n\" +\n-        \"6Rk06okoBPnw3hDJEJiEc1Rv7HCE8p\/p+SaiHrskwwIDAQABo08wTTALBgNVHQ8E\\n\" +\n-        \"BAMCA+gwHQYDVR0OBBYEFPr91O33RIGfFSqza2AwQIgE4QswMB8GA1UdIwQYMBaA\\n\" +\n-        \"FEtmQi7jT1ijXOafPsfkrLwSVu9eMA0GCSqGSIb3DQEBBAUAA4GBANIDFYgAhoj3\\n\" +\n-        \"B8u1YpqeoEp2Lt9TwrYBshaIrbmBPCwCGio0JIsoov3n8BCSg5F+8MnOtPl+TjeO\\n\" +\n-        \"0Ug+7guPdCk\/wg8YNxLHgSsQlpcNJDjWiErqmUPVrg5BPPQb65qMund6KTmMN0y6\\n\" +\n-        \"4EbSmxRpZO\/N0\/5oK4umTk0EeXKNekBj\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String targetPrivateKey_D =\n-        \"MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAOhD8qgAgALaWMV9\\n\" +\n-        \"bYrCOfFPOLg1Al5S6Tax6oqmwBjzHg7l2+LHNSXrXjbOaWNqmqJsmWhBWl8H4IRz\\n\" +\n-        \"n+XiHmDMZFXOS6o\/Wg\/MOulnkay+a+4d6dX9PMIiBfVwsRPNBW3pGTTqiSgE+fDe\\n\" +\n-        \"EMkQmIRzVG\/scITyn+n5JqIeuyTDAgMBAAECgYBw37yIKp4LRONJLnhSq6sO+0n8\\n\" +\n-        \"Mz6waiiN\/Q6XTQwj09pysQAYCGlqwSRrDAqpVsBJWO+Ae+oYLrLMi4hUZnwN75v3\\n\" +\n-        \"pe1nXlrD11RmPLXwBxqFxNSvAs2FgLHZEtwHI7Bn8KybT\/8bGkQ8csLceInYtMDD\\n\" +\n-        \"MuTyy2KRk\/pj60zIKQJBAPgebQiAH6viFQ88AwHaNvQhlUfwmSC1i6f8LVoeqaHC\\n\" +\n-        \"lnP0LJBwlyDeeEInhHrCR2ibnCB6I\/Pig+49XQgabK8CQQDvpJwuGEbsOO+3rkJJ\\n\" +\n-        \"OpOw4toG0QJZdRnT6l8I6BlboQRZSfFh+lGGahvFXkxc4KdUpJ7QPtXU7HHk6Huk\\n\" +\n-        \"8RYtAkA9CW8VGj+wTuuTVdX\/jKjcIa7RhbSFwWNbrcOSWdys+Gt+luCnn6rt4QyA\\n\" +\n-        \"aaxDbquWZkFgE+voQR7nap0KM0XtAkAznd0WAJymHM1lXt9gLoHJQ9N6TGKZKiPa\\n\" +\n-        \"BU1a+cMcfV4WbVrUo7oTnZ9Fr73681iXXq3mZOJh7lvJ1llreZIxAkBEnbiTgEf4\\n\" +\n-        \"tvku68jHcRbRPmdS7CBSWNEBaHLOm4pUSTcxVTKKMHw7vmM5\/UYUxJ8QNKCYxn6O\\n\" +\n-        \"+vtiBwBawwzN\";\n-\n-    static String[] serverCerts = {targetCertStr_A,\n-                                targetCertStr_B, targetCertStr_C};\n-    static String[] serverKeys  = {targetPrivateKey_A,\n-                                targetPrivateKey_B, targetPrivateKey_C};\n-    static String[] clientCerts = {targetCertStr_D};\n-    static String[] clientKeys  = {targetPrivateKey_D};\n+    static X509Certificate caCertificate;\n+    static X509Certificate[] serverCerts;\n+    static KeyPair[] serverKeys;\n+    static X509Certificate[] clientCerts;\n+    static KeyPair[] clientKeys;\n@@ -248,1 +80,53 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n+\n+    static void setupCertificates() throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(1024);\n+\n+        KeyPair caKey = kpg.generateKeyPair();\n+        caCertificate = CertificateBuilder.newSelfSignedCA(\n+                \"C=US, O=Java, OU=SunJSSE Test Serivce\", caKey)\n+                .build(null, caKey.getPrivate(), \"MD5withRSA\");\n+\n+        KeyPair trustedKeysA = kpg.generateKeyPair();\n+        X509Certificate trustedCertA = CertificateBuilder.newServerCertificateBuilder(\n+                \"C=US, O=Java, OU=SunJSSE Test Serivce, CN=www.example.com\",\n+                trustedKeysA.getPublic(), caKey.getPublic())\n+                .build(caCertificate, caKey.getPrivate(), \"MD5withRSA\");\n+\n+        KeyPair trustedKeysB = kpg.generateKeyPair();\n+        X509Certificate trustedCertB = CertificateBuilder.newServerCertificateBuilder(\n+                \"C=US, O=Java, OU=SunJSSE Test Serivce, CN=www.example.net\",\n+                trustedKeysB.getPublic(), caKey.getPublic())\n+                .build(caCertificate, caKey.getPrivate(), \"MD5withRSA\");\n+\n+        KeyPair trustedKeysC = kpg.generateKeyPair();\n+        X509Certificate trustedCertC = CertificateBuilder.newServerCertificateBuilder(\n+                \"C=US, O=Java, OU=SunJSSE Test Serivce, CN=www.invalid.com\",\n+                trustedKeysC.getPublic(), caKey.getPublic())\n+                .build(caCertificate, caKey.getPrivate(), \"MD5withRSA\");\n+\n+        serverCerts = new X509Certificate[]{trustedCertA, trustedCertB, trustedCertC};\n+        serverKeys = new KeyPair[]{trustedKeysA, trustedKeysB, trustedKeysC};\n+\n+        KeyPair trustedKeysD = kpg.generateKeyPair();\n+        X509Certificate trustedCertD = CertificateBuilder.newClientCertificateBuilder(\n+                \"C=US, O=Java, OU=SunJSSE Test Serivce, CN=InterOp Tester\",\n+                trustedKeysD.getPublic(), caKey.getPublic())\n+                .build(caCertificate, caKey.getPrivate(), \"MD5withRSA\");\n+\n+        clientCerts = new X509Certificate[]{trustedCertD};\n+        clientKeys = new KeyPair[]{trustedKeysD};\n+\n+        if (debug) {\n+            System.err.println(\"CA Certificate:\");\n+            CertificateBuilder.printCertificate(caCertificate, System.err);\n+            System.err.println(\"Server Certificate A:\");\n+            CertificateBuilder.printCertificate(trustedCertA, System.err);\n+            System.err.println(\"Server Certificate B:\");\n+            CertificateBuilder.printCertificate(trustedCertB, System.err);\n+            CertificateBuilder.printCertificate(trustedCertC, System.err);\n+            System.err.println(\"Client Certificate:\");\n+            CertificateBuilder.printCertificate(trustedCertD, System.err);\n+        }\n+    }\n@@ -365,3 +249,0 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n@@ -372,5 +253,1 @@\n-        \/\/ import the trused cert\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trustedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n+        ks.setCertificateEntry(\"RSA Export Signer\", caCertificate);\n@@ -378,4 +255,2 @@\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        String[] certStrs = null;\n-        String[] keyStrs = null;\n+        X509Certificate[] certs;\n+        KeyPair[] keys;\n@@ -383,2 +258,2 @@\n-            certStrs = clientCerts;\n-            keyStrs = clientKeys;\n+            certs = clientCerts;\n+            keys = clientKeys;\n@@ -386,2 +261,2 @@\n-            certStrs = serverCerts;\n-            keyStrs = serverKeys;\n+            certs = serverCerts;\n+            keys = serverKeys;\n@@ -390,1 +265,1 @@\n-        for (int i = 0; i < certStrs.length; i++) {\n+        for (int i = 0; i < certs.length; i++) {\n@@ -392,13 +267,0 @@\n-            String keySpecStr = keyStrs[i];\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                                Base64.getMimeDecoder().decode(keySpecStr));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            String keyCertStr = certStrs[i];\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n@@ -406,2 +268,2 @@\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n+            chain[0] = certs[i];\n+            chain[1] = caCertificate;\n@@ -410,1 +272,1 @@\n-            ks.setKeyEntry(\"key-entry-\" + i, priKey, passphrase, chain);\n+            ks.setKeyEntry(\"key-entry-\" + i, keys[i].getPrivate(), passphrase, chain);\n@@ -422,1 +284,0 @@\n-        ks = null;\n@@ -448,0 +309,2 @@\n+        setupCertificates();\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/ServerName\/SSLSocketSNISensitive.java","additions":80,"deletions":217,"binary":false,"changes":297,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -37,1 +43,0 @@\n-import java.util.*;\n@@ -41,7 +46,5 @@\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n+import sun.security.testlibrary.CertificateBuilder;\n+import sun.security.x509.DNSName;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.SubjectAlternativeNameExtension;\n@@ -49,359 +52,0 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 8 (0x8)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:04 2008 GMT\n- *         Not After : Aug 25 03:43:04 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption0\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\n- * PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\n- * nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\n- * JqCpf5uZGOo=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 9 (0x9)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:24 2008 GMT\n- *         Not After : Aug 25 03:43:24 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\n- * HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\n- * XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\n- * cl\/epUcHL7E=\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n-\n-\n-public class DNSIdentities {\n-    static Map cookies;\n-    ServerSocket ss;\n@@ -409,214 +53,1 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\\n\" +\n-        \"PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\\n\" +\n-        \"nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\\n\" +\n-        \"JqCpf5uZGOo=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\\n\" +\n-        \"HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\\n\" +\n-        \"XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\\n\" +\n-        \"cl\/epUcHL7E=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n+public class DNSIdentities extends IdentitiesBase {\n@@ -639,1 +70,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -650,2 +81,2 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(serverCertificate,\n+                serverKeysRsa1024, passphrase);\n@@ -706,2 +137,2 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getSSLContext(clientCertificate,\n+                    clientKeysRsa1024, passphrase);\n@@ -748,3 +179,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -764,1 +192,1 @@\n-        new DNSIdentities();\n+        new DNSIdentities().run();\n@@ -767,2 +195,0 @@\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n@@ -775,7 +201,0 @@\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n@@ -783,8 +202,2 @@\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new DNSName(\"localhost\")));\n@@ -792,12 +205,5 @@\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n-    }\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Server, CN = localhost\",\n+            serverKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+            new SubjectAlternativeNameExtension(true, gns))\n+            .build(caCertificate, caKeysRsa1024.getPrivate(), \"MD5withRSA\");\n@@ -805,44 +211,5 @@\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n-    }\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Client, CN = localhost\",\n+            clientKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+            new SubjectAlternativeNameExtension(true, gns))\n+            .build(caCertificate, caKeysRsa1024.getPrivate(), \"MD5withRSA\");\n@@ -850,40 +217,3 @@\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n+        if (debug) {\n+            printCertificate(\"Server\", serverCertificate);\n+            printCertificate(\"Client\", clientCertificate);\n@@ -891,17 +221,0 @@\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/DNSIdentities.java","additions":34,"deletions":721,"binary":false,"changes":755,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,6 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -36,1 +41,0 @@\n-import java.util.*;\n@@ -39,7 +43,0 @@\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n@@ -47,0 +44,1 @@\n+import sun.security.testlibrary.CertificateBuilder;\n@@ -48,355 +46,1 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 8 (0x8)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:04 2008 GMT\n- *         Not After : Aug 25 03:43:04 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption0\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\n- * PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\n- * nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\n- * JqCpf5uZGOo=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 9 (0x9)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:24 2008 GMT\n- *         Not After : Aug 25 03:43:24 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\n- * HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\n- * XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\n- * cl\/epUcHL7E=\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n-\n+public class IPAddressDNSIdentities extends IdentitiesBase {\n@@ -404,220 +48,1 @@\n-public class IPAddressDNSIdentities {\n-    static Map cookies;\n-    ServerSocket ss;\n-\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\\n\" +\n-        \"PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\\n\" +\n-        \"nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\\n\" +\n-        \"JqCpf5uZGOo=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\\n\" +\n-        \"HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\\n\" +\n-        \"XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\\n\" +\n-        \"cl\/epUcHL7E=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n+    static char [] passphrase = \"passphrase\".toCharArray();\n@@ -638,3 +63,1 @@\n-    static boolean debug = false;\n-\n-    private SSLServerSocket sslServerSocket = null;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -649,2 +72,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(serverCertificate, serverKeysRsa1024, passphrase);\n@@ -657,2 +79,1 @@\n-        sslServerSocket =\n-            (SSLServerSocket) sslssf.createServerSocket();\n+        SSLServerSocket sslServerSocket = (SSLServerSocket) sslssf.createServerSocket();\n@@ -705,2 +126,1 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getSSLContext(clientCertificate, clientKeysRsa1024, passphrase);\n@@ -753,5 +173,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n@@ -761,2 +176,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n@@ -771,1 +184,1 @@\n-        new IPAddressDNSIdentities();\n+        new IPAddressDNSIdentities().run();\n@@ -774,2 +187,0 @@\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n@@ -782,53 +193,1 @@\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n-    }\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n+        super();\n@@ -836,20 +195,5 @@\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n-    }\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Server, CN = localhost\",\n+                serverKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+                CertificateBuilder.createDNSSubjectAltNameExt(true, \"localhost\"))\n+                .build(caCertificate, caKeysRsa1024.getPrivate(),\"MD5withRSA\");\n@@ -857,41 +201,5 @@\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n+                \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Client, CN = localhost\",\n+                clientKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+                CertificateBuilder.createDNSSubjectAltNameExt(true, \"localhost\"))\n+                .build(caCertificate, caKeysRsa1024.getPrivate(),\"MD5withRSA\");\n@@ -899,3 +207,0 @@\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n@@ -903,9 +208,3 @@\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n+        if (debug) {\n+            printCertificate(\"Server\", serverCertificate);\n+            printCertificate(\"Client\", clientCertificate);\n@@ -913,2 +212,0 @@\n-\n-        return ctx;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPAddressDNSIdentities.java","additions":29,"deletions":732,"binary":false,"changes":761,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,6 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -38,1 +43,1 @@\n-import java.util.*;\n+import java.security.*;\n@@ -41,382 +46,0 @@\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n-import jdk.test.lib.net.URIBuilder;\n-\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 7 (0x7)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:27:57 2008 GMT\n- *         Not After : Aug 25 03:27:57 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICnzCCAgigAwIBAgIBBzANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3NTdaFw0yODA4MjUwMzI3NTdaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjbjBsMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\n- * MA0GCSqGSIb3DQEBBAUAA4GBAFJjItCtCBZcjD69wdqfIbKmRFa6eJAjR6LcoDva\n- * cKC\/sDOLelpspiZ66Zb0Xdv5qQ7QrfOXt3K8QqJKRMdZLF9WfUfy0gJDM32ub91h\n- * pu+TmcGPs+6RdrAQcuvU1ZDV9X8SMj7BtKaim4d5sqFw1npncKiA5xFn8vOYwdun\n- * nZif\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 6 (0x6)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:27:34 2008 GMT\n- *         Not After : Aug 25 03:27:34 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICnzCCAgigAwIBAgIBBjANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3MzRaFw0yODA4MjUwMzI3MzRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjbjBsMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\n- * MA0GCSqGSIb3DQEBBAUAA4GBACjj9PS+W6XOF7toFMwMOv\/AemZeBOpcEF1Ei1Hx\n- * HjvB6EOHkMY8tFm5OPzkiWiK3+s3awpSW0jWdzMYwrQJ3\/klMsPDpI7PEuirqwHP\n- * i5Wyl\/vk7jmfWVcBO9MVhPUo4BYl4vS9aj6JA5QbkbkB95LOgT\/BowY0WmHeVsXC\n- * I9aw\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n-\n-\n-public class IPAddressIPIdentities {\n-    static Map cookies;\n-    ServerSocket ss;\n-\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n@@ -424,166 +47,1 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICnzCCAgigAwIBAgIBBzANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3NTdaFw0yODA4MjUwMzI3NTdaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjbjBsMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\\n\" +\n-        \"MA0GCSqGSIb3DQEBBAUAA4GBAFJjItCtCBZcjD69wdqfIbKmRFa6eJAjR6LcoDva\\n\" +\n-        \"cKC\/sDOLelpspiZ66Zb0Xdv5qQ7QrfOXt3K8QqJKRMdZLF9WfUfy0gJDM32ub91h\\n\" +\n-        \"pu+TmcGPs+6RdrAQcuvU1ZDV9X8SMj7BtKaim4d5sqFw1npncKiA5xFn8vOYwdun\\n\" +\n-        \"nZif\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICnzCCAgigAwIBAgIBBjANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3MzRaFw0yODA4MjUwMzI3MzRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjbjBsMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\\n\" +\n-        \"MA0GCSqGSIb3DQEBBAUAA4GBACjj9PS+W6XOF7toFMwMOv\/AemZeBOpcEF1Ei1Hx\\n\" +\n-        \"HjvB6EOHkMY8tFm5OPzkiWiK3+s3awpSW0jWdzMYwrQJ3\/klMsPDpI7PEuirqwHP\\n\" +\n-        \"i5Wyl\/vk7jmfWVcBO9MVhPUo4BYl4vS9aj6JA5QbkbkB95LOgT\/BowY0WmHeVsXC\\n\" +\n-        \"I9aw\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n+import jdk.test.lib.net.URIBuilder;\n@@ -591,35 +49,1 @@\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n+public class IPAddressIPIdentities extends IdentitiesBase {\n@@ -629,5 +53,0 @@\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n-\n@@ -642,1 +61,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -644,1 +63,8 @@\n-    private SSLServerSocket sslServerSocket = null;\n+    public IPAddressIPIdentities() throws Exception {\n+        super();\n+\n+        if (debug) {\n+            printCertificate(\"Server\", serverCertificate);\n+            printCertificate(\"Client\", clientCertificate);\n+        }\n+    }\n@@ -653,2 +79,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(serverCertificate, serverKeysRsa1024, passphrase);\n@@ -661,1 +86,1 @@\n-        sslServerSocket =\n+        SSLServerSocket sslServerSocket =\n@@ -709,2 +134,1 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getSSLContext(clientCertificate, clientKeysRsa1024, passphrase);\n@@ -748,5 +172,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n@@ -756,3 +175,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -772,63 +188,1 @@\n-        new IPAddressIPIdentities();\n-    }\n-\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n-    \/*\n-     * Primary constructor, used to drive remainder of the test.\n-     *\n-     * Fork off the other side, then do your work.\n-     *\/\n-    IPAddressIPIdentities() throws Exception {\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n-    }\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n+        new IPAddressIPIdentities().run();\n@@ -836,82 +190,0 @@\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n-    }\n-\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPAddressIPIdentities.java","additions":23,"deletions":751,"binary":false,"changes":774,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,6 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -38,1 +43,0 @@\n-import java.util.*;\n@@ -42,8 +46,0 @@\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n-import jdk.test.lib.net.URIBuilder;\n@@ -51,359 +47,1 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 7 (0x7)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:27:57 2008 GMT\n- *         Not After : Aug 25 03:27:57 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICnzCCAgigAwIBAgIBBzANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3NTdaFw0yODA4MjUwMzI3NTdaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjbjBsMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\n- * MA0GCSqGSIb3DQEBBAUAA4GBAFJjItCtCBZcjD69wdqfIbKmRFa6eJAjR6LcoDva\n- * cKC\/sDOLelpspiZ66Zb0Xdv5qQ7QrfOXt3K8QqJKRMdZLF9WfUfy0gJDM32ub91h\n- * pu+TmcGPs+6RdrAQcuvU1ZDV9X8SMj7BtKaim4d5sqFw1npncKiA5xFn8vOYwdun\n- * nZif\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 6 (0x6)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:27:34 2008 GMT\n- *         Not After : Aug 25 03:27:34 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICnzCCAgigAwIBAgIBBjANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3MzRaFw0yODA4MjUwMzI3MzRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjbjBsMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\n- * MA0GCSqGSIb3DQEBBAUAA4GBACjj9PS+W6XOF7toFMwMOv\/AemZeBOpcEF1Ei1Hx\n- * HjvB6EOHkMY8tFm5OPzkiWiK3+s3awpSW0jWdzMYwrQJ3\/klMsPDpI7PEuirqwHP\n- * i5Wyl\/vk7jmfWVcBO9MVhPUo4BYl4vS9aj6JA5QbkbkB95LOgT\/BowY0WmHeVsXC\n- * I9aw\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n-\n-\n-public class IPIdentities {\n-    static Map cookies;\n-    ServerSocket ss;\n+import jdk.test.lib.net.URIBuilder;\n@@ -411,5 +49,0 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n@@ -417,6 +50,1 @@\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n+public class IPIdentities extends IdentitiesBase {\n@@ -424,202 +52,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICnzCCAgigAwIBAgIBBzANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3NTdaFw0yODA4MjUwMzI3NTdaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjbjBsMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\\n\" +\n-        \"MA0GCSqGSIb3DQEBBAUAA4GBAFJjItCtCBZcjD69wdqfIbKmRFa6eJAjR6LcoDva\\n\" +\n-        \"cKC\/sDOLelpspiZ66Zb0Xdv5qQ7QrfOXt3K8QqJKRMdZLF9WfUfy0gJDM32ub91h\\n\" +\n-        \"pu+TmcGPs+6RdrAQcuvU1ZDV9X8SMj7BtKaim4d5sqFw1npncKiA5xFn8vOYwdun\\n\" +\n-        \"nZif\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICnzCCAgigAwIBAgIBBjANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzI3MzRaFw0yODA4MjUwMzI3MzRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjbjBsMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDASBgNVHREBAf8ECDAGhwR\/AAAB\\n\" +\n-        \"MA0GCSqGSIb3DQEBBAUAA4GBACjj9PS+W6XOF7toFMwMOv\/AemZeBOpcEF1Ei1Hx\\n\" +\n-        \"HjvB6EOHkMY8tFm5OPzkiWiK3+s3awpSW0jWdzMYwrQJ3\/klMsPDpI7PEuirqwHP\\n\" +\n-        \"i5Wyl\/vk7jmfWVcBO9MVhPUo4BYl4vS9aj6JA5QbkbkB95LOgT\/BowY0WmHeVsXC\\n\" +\n-        \"I9aw\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n@@ -629,5 +55,0 @@\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n-\n@@ -642,3 +63,1 @@\n-    static boolean debug = false;\n-\n-    private SSLServerSocket sslServerSocket = null;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -652,0 +71,10 @@\n+\n+    public IPIdentities() throws Exception {\n+        super();\n+\n+        if (debug) {\n+            printCertificate(\"Server\", serverCertificate);\n+            printCertificate(\"Client\", clientCertificate);\n+        }\n+    }\n+\n@@ -653,2 +82,2 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(serverCertificate, serverKeysRsa1024,\n+                passphrase);\n@@ -661,2 +90,2 @@\n-        sslServerSocket =\n-            (SSLServerSocket) sslssf.createServerSocket();\n+        SSLServerSocket sslServerSocket =\n+                (SSLServerSocket) sslssf.createServerSocket();\n@@ -683,1 +112,1 @@\n-            out.print(\"Content-Length: \"+ 9 +\"\\r\\n\");\n+            out.print(\"Content-Length: \" + 9 + \"\\r\\n\");\n@@ -688,9 +117,4 @@\n-             \/\/ close the socket\n-             while (!closeReady) {\n-                 Thread.sleep(50);\n-             }\n-\n-             System.out.println(\"Server closing socket\");\n-             sslSocket.close();\n-             serverReady = false;\n-        }\n+            \/\/ close the socket\n+            while (!closeReady) {\n+                Thread.sleep(50);\n+            }\n@@ -698,0 +122,4 @@\n+            System.out.println(\"Server closing socket\");\n+            sslSocket.close();\n+            serverReady = false;\n+        }\n@@ -709,2 +137,2 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getSSLContext(clientCertificate, clientKeysRsa1024,\n+                    passphrase);\n@@ -724,6 +152,6 @@\n-                .scheme(\"https\")\n-                .loopback()\n-                .port(serverPort)\n-                .path(\"\/\")\n-                .toURL();\n-            System.out.println(\"url is \"+url.toString());\n+                    .scheme(\"https\")\n+                    .loopback()\n+                    .port(serverPort)\n+                    .path(\"\/\")\n+                    .toURL();\n+            System.out.println(\"url is \" + url.toString());\n@@ -732,1 +160,1 @@\n-                http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);\n+                http = (HttpsURLConnection) url.openConnection(Proxy.NO_PROXY);\n@@ -735,1 +163,1 @@\n-                System.out.println(\"respCode = \"+respCode);\n+                System.out.println(\"respCode = \" + respCode);\n@@ -747,5 +175,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n@@ -755,3 +178,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -771,84 +191,1 @@\n-        new IPIdentities();\n-    }\n-\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n-    \/*\n-     * Primary constructor, used to drive remainder of the test.\n-     *\n-     * Fork off the other side, then do your work.\n-     *\/\n-    IPIdentities() throws Exception {\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n-    }\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n+        new IPIdentities().run();\n@@ -856,62 +193,1 @@\n-\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPIdentities.java","additions":45,"deletions":769,"binary":false,"changes":814,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -37,1 +43,1 @@\n-import java.util.*;\n+import java.security.*;\n@@ -40,363 +46,2 @@\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n-\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 4 (0x4)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:21:16 2008 GMT\n- *         Not After : Aug 25 03:21:16 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1, DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICqjCCAhOgAwIBAgIBBDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzIxMTZaFw0yODA4MjUwMzIxMTZaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjeTB3MAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\n- * gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAWTrftGaL73lKLgRTrChGR+F6\n- * \/\/qvs0OM94IOKVeHz36NO49cMJmhJSbKdiGIkppBgpLIBoWxZlN9NOO9oSXFYZsZ\n- * rHaAe9\/lWMtQM7XpjqjhWVhB5VPvWFbkorQFMtRYLf7pkonGPFq8GOO1s0TKhogC\n- * jtYCdzlrU4v+om\/J3H8=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 5 (0x5)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:22:10 2008 GMT\n- *         Not After : Aug 25 03:22:10 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             IP Address:127.0.0.1, DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICqjCCAhOgAwIBAgIBBTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzIyMTBaFw0yODA4MjUwMzIyMTBaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjeTB3MAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\n- * gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAwDc4f13abs9ZeEkrl5WV2Z74\n- * BlmBhXu8ExtAvoF9q6Ug6xV1MDpxbD124KfUHHL0kNMhMB1WIpC0kOnQBxziNpfS\n- * 7u6GOc3tWLSxw\/sHoJGCefnRBllLZOoQuSBrWB8qgilL6HRmZ4UqDcXu4UCaLBZ0\n- * KGDT5ASEN6Lq2GtiP4Y=\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n+import sun.security.testlibrary.CertificateBuilder;\n+import sun.security.x509.*;\n@@ -405,3 +50,1 @@\n-public class Identities {\n-    static Map cookies;\n-    ServerSocket ss;\n+public class Identities extends IdentitiesBase {\n@@ -409,214 +52,0 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICqjCCAhOgAwIBAgIBBDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzIxMTZaFw0yODA4MjUwMzIxMTZaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjeTB3MAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\\n\" +\n-        \"gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAWTrftGaL73lKLgRTrChGR+F6\\n\" +\n-        \"\/\/qvs0OM94IOKVeHz36NO49cMJmhJSbKdiGIkppBgpLIBoWxZlN9NOO9oSXFYZsZ\\n\" +\n-        \"rHaAe9\/lWMtQM7XpjqjhWVhB5VPvWFbkorQFMtRYLf7pkonGPFq8GOO1s0TKhogC\\n\" +\n-        \"jtYCdzlrU4v+om\/J3H8=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICqjCCAhOgAwIBAgIBBTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzIyMTBaFw0yODA4MjUwMzIyMTBaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjeTB3MAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAdBgNVHREBAf8EEzARhwR\/AAAB\\n\" +\n-        \"gglsb2NhbGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAwDc4f13abs9ZeEkrl5WV2Z74\\n\" +\n-        \"BlmBhXu8ExtAvoF9q6Ug6xV1MDpxbD124KfUHHL0kNMhMB1WIpC0kOnQBxziNpfS\\n\" +\n-        \"7u6GOc3tWLSxw\/sHoJGCefnRBllLZOoQuSBrWB8qgilL6HRmZ4UqDcXu4UCaLBZ0\\n\" +\n-        \"KGDT5ASEN6Lq2GtiP4Y=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n@@ -639,3 +68,1 @@\n-    static boolean debug = false;\n-\n-    private SSLServerSocket sslServerSocket = null;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -650,2 +77,2 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(serverCertificate, serverKeysRsa1024,\n+                passphrase);\n@@ -658,2 +85,1 @@\n-        sslServerSocket =\n-            (SSLServerSocket) sslssf.createServerSocket();\n+        SSLServerSocket sslServerSocket = (SSLServerSocket) sslssf.createServerSocket();\n@@ -694,1 +120,0 @@\n-\n@@ -706,2 +131,2 @@\n-            SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-                clientModulus, clientPrivateExponent, passphrase);\n+            SSLContext context = getSSLContext(clientCertificate, clientKeysRsa1024,\n+                    passphrase);\n@@ -740,5 +165,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n@@ -748,3 +168,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -764,1 +181,1 @@\n-        new Identities();\n+        new Identities().run();\n@@ -767,2 +184,0 @@\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n@@ -775,15 +190,20 @@\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new IPAddressName(\"127.0.0.1\")));\n+        gns.add(new GeneralName(new DNSName(\"localhost\")));\n+\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Server, CN = localhost\",\n+            serverKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+            new SubjectAlternativeNameExtension(true, gns))\n+            .build(caCertificate, caKeysRsa1024.getPrivate(), \"MD5withRSA\");\n+\n+\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Client, CN = localhost\",\n+            clientKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+            new SubjectAlternativeNameExtension(true, gns))\n+            .build(caCertificate, caKeysRsa1024.getPrivate(), \"MD5withRSA\");\n+\n+        if (debug) {\n+            printCertificate(\"Server\", serverCertificate);\n+            printCertificate(\"Client\", clientCertificate);\n@@ -791,12 +211,0 @@\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n@@ -804,106 +212,0 @@\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n-    }\n-\n-    \/\/ get the ssl context\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = new Certificate[2];\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-\n-        if (keyCertStr != null) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/Identities.java","additions":38,"deletions":736,"binary":false,"changes":774,"status":"modified"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import sun.security.testlibrary.CertificateBuilder;\n+\n+public abstract class IdentitiesBase {\n+\n+    \/*\n+     * Should we run the client or server in a separate thread?\n+     * Both sides can throw exceptions, but do you have a preference\n+     * as to which side should be the main thread.\n+     *\/\n+    static boolean separateServerThread = true;\n+\n+    protected KeyPair caKeysRsa1024;\n+    protected X509Certificate caCertificate;\n+    protected X509Certificate serverCertificate;\n+    protected KeyPair serverKeysRsa1024;\n+    protected X509Certificate clientCertificate;\n+    protected KeyPair clientKeysRsa1024;\n+    volatile Exception serverException = null;\n+    volatile Exception clientException = null;\n+    Thread clientThread = null;\n+    Thread serverThread = null;\n+\n+    volatile static boolean serverReady = false;\n+\n+\n+    abstract void doServerSide() throws Exception;\n+    abstract void doClientSide() throws Exception;\n+\n+    public IdentitiesBase() throws Exception {\n+        setupCertificates();\n+    }\n+\n+    void setupCertificates() throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(1024);\n+\n+        caKeysRsa1024 = kpg.generateKeyPair();\n+        caCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org\", caKeysRsa1024)\n+            .build(null, caKeysRsa1024.getPrivate(), \"MD5withRSA\");\n+\n+\n+        serverKeysRsa1024 = kpg.generateKeyPair();\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Server, CN = localhost\",\n+            serverKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+            CertificateBuilder.createIPSubjectAltNameExt(true, \"127.0.0.1\"))\n+            .build(caCertificate, caKeysRsa1024.getPrivate(), \"MD5withRSA\");\n+\n+        clientKeysRsa1024 = kpg.generateKeyPair();\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org, OU = SSL-Client, CN = localhost\",\n+            clientKeysRsa1024.getPublic(), caKeysRsa1024.getPublic(),\n+            CertificateBuilder.createIPSubjectAltNameExt(true, \"127.0.0.1\"))\n+            .build(caCertificate, caKeysRsa1024.getPrivate(), \"MD5withRSA\");\n+    }\n+\n+    void printCertificate(String certificateName, X509Certificate certificate) {\n+        System.err.println(\"CERTIFICATE: \" + certificateName);\n+        CertificateBuilder.printCertificate(certificate, System.err);\n+    }\n+\n+    void startServer(boolean newThread) throws Exception {\n+        if (newThread) {\n+            serverThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        doServerSide();\n+                    } catch (Exception e) {\n+                        \/*\n+                         * Our server thread just died.\n+                         *\n+                         * Release the client, if not active already...\n+                         *\/\n+                        System.err.println(\"Server died...\");\n+                        serverReady = true;\n+                        serverException = e;\n+                    }\n+                }\n+            };\n+            serverThread.start();\n+        } else {\n+            doServerSide();\n+        }\n+    }\n+\n+    void startClient(boolean newThread) throws Exception {\n+        if (newThread) {\n+            clientThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        doClientSide();\n+                    } catch (Exception e) {\n+                        \/*\n+                         * Our client thread just died.\n+                         *\/\n+                        System.err.println(\"Client died...\");\n+                        clientException = e;\n+                    }\n+                }\n+            };\n+            clientThread.start();\n+        } else {\n+            doClientSide();\n+        }\n+    }\n+\n+    \/\/ get the ssl context\n+    protected SSLContext getSSLContext(X509Certificate endEntityCert,\n+               KeyPair endEntityKey, char[] passphrase) throws Exception {\n+\n+        \/\/ create a key store\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        ks.load(null, null);\n+\n+        \/\/ import the trused cert\n+        ks.setCertificateEntry(\"RSA Export Signer\", caCertificate);\n+\n+        if (endEntityCert != null) {\n+            Certificate[] chain = new Certificate[2];\n+            chain[0] = endEntityCert;\n+            chain[1] = caCertificate;\n+\n+            \/\/ import the key entry.\n+            ks.setKeyEntry(\"Whatever\", endEntityKey.getPrivate(), passphrase, chain);\n+        }\n+\n+        \/\/ create SSL context\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(ks);\n+\n+        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+\n+        if (endEntityCert != null) {\n+            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+            kmf.init(ks, passphrase);\n+\n+            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+        } else {\n+            ctx.init(null, tmf.getTrustManagers(), null);\n+        }\n+\n+        return ctx;\n+    }\n+\n+    protected void run() throws Exception {\n+\n+        if (separateServerThread) {\n+            startServer(true);\n+            startClient(false);\n+        } else {\n+            startClient(true);\n+            startServer(false);\n+        }\n+\n+        \/*\n+         * Wait for other side to close down.\n+         *\/\n+        if (separateServerThread) {\n+            serverThread.join();\n+        } else {\n+            clientThread.join();\n+        }\n+\n+        \/*\n+         * When we get here, the test is pretty much over.\n+         *\n+         * If the main thread excepted, that propagates back\n+         * immediately.  If the other thread threw an exception, we\n+         * should report back.\n+         *\/\n+        if (serverException != null)\n+            throw serverException;\n+        if (clientException != null)\n+            throw clientException;\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IdentitiesBase.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -34,165 +40,1 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,97EC03A2D031B7BC\n- *\n- * 22wrD+DPv3VF8xg9xoeBqHzFnOVbTLQgVulzaCECDF4zWdxElYKy4yYyY6dMDehi\n- * XT77NTsq1J14zjJHPp2\/U6B5OpZxnf97ZSD0ZC9\/DDe\/2gjW4fY1Lv0TVP0PdXnm\n- * cj84RaDiiSk\/cERlFzFJ5L8ULMwxdOtYwXwZ4upITw2lT+8zDlBD2i3zZ4TcWrzE\n- * \/su5Kpu+Mp3wthfGX+ZGga2T\/NS8ZCKZE+gJDPKQZ\/x34VBw+YANQGyCJPv1iMaE\n- * RyagnpApH9OPSrRIp2iR6uWT6836CET2erbfPaC1odyd8IsbnLldVs9CklH7EgXL\n- * Nms+DqrQEbNmvMuQYEFyZEHN9D1fGONeacx+cjI85FyMSHSEO65JJmasAxgQe4nF\n- * \/yVz3rNQ2qAGqBhjsjP\/WaXuB2aLZiAli\/HjN17EJws=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIIBOQIBAAJBALlfGg\/5ZweJcW5zqLdnQ2uyircqDDlENKnv9FABOm\/j0wnlPHqX\n- * CCqFBLoM7tG8ohci1SPy6fLJ5dqLf5FOH2sCAwEAAQJATO0\/hpOMgx8xmJGc2Yeb\n- * \/gyY7kwfyIAajs9Khw0LcDTYTo2EAI+vMmDpU+dvmOCLUqq\/Z2tiKJhGyrmcBlxr\n- * kQIhAPYkbYovtvWHslxRb78x4eCrn2p1H7iolNKbyepjCI3zAiEAwMufJlLI9Q0O\n- * BIr7fPnUhbs9NyMHLIvIQAf\/hXYubqkCIGJZR9NxIT+VyrSMbYQNoF0u9fGJfvU\/\n- * lsdYLCOVEnP1AiAsSFjUx50K1CXNG1MqYIPU963W1T\/Xln+3XV7ue7esiQIgW2Lu\n- * xGvz2dAUsGId+Xr2GZXb7ZucY\/cPt4o5qdP1m7c=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (512 bit)\n- * modulus:\n- *     00:b9:5f:1a:0f:f9:67:07:89:71:6e:73:a8:b7:67:\n- *     43:6b:b2:8a:b7:2a:0c:39:44:34:a9:ef:f4:50:01:\n- *     3a:6f:e3:d3:09:e5:3c:7a:97:08:2a:85:04:ba:0c:\n- *     ee:d1:bc:a2:17:22:d5:23:f2:e9:f2:c9:e5:da:8b:\n- *     7f:91:4e:1f:6b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     4c:ed:3f:86:93:8c:83:1f:31:98:91:9c:d9:87:9b:\n- *     fe:0c:98:ee:4c:1f:c8:80:1a:8e:cf:4a:87:0d:0b:\n- *     70:34:d8:4e:8d:84:00:8f:af:32:60:e9:53:e7:6f:\n- *     98:e0:8b:52:aa:bf:67:6b:62:28:98:46:ca:b9:9c:\n- *     06:5c:6b:91\n- * prime1:\n- *     00:f6:24:6d:8a:2f:b6:f5:87:b2:5c:51:6f:bf:31:\n- *     e1:e0:ab:9f:6a:75:1f:b8:a8:94:d2:9b:c9:ea:63:\n- *     08:8d:f3\n- * prime2:\n- *     00:c0:cb:9f:26:52:c8:f5:0d:0e:04:8a:fb:7c:f9:\n- *     d4:85:bb:3d:37:23:07:2c:8b:c8:40:07:ff:85:76:\n- *     2e:6e:a9\n- * exponent1:\n- *     62:59:47:d3:71:21:3f:95:ca:b4:8c:6d:84:0d:a0:\n- *     5d:2e:f5:f1:89:7e:f5:3f:96:c7:58:2c:23:95:12:\n- *     73:f5\n- * exponent2:\n- *     2c:48:58:d4:c7:9d:0a:d4:25:cd:1b:53:2a:60:83:\n- *     d4:f7:ad:d6:d5:3f:d7:96:7f:b7:5d:5e:ee:7b:b7:\n- *     ac:89\n- * coefficient:\n- *     5b:62:ee:c4:6b:f3:d9:d0:14:b0:62:1d:f9:7a:f6:\n- *     19:95:db:ed:9b:9c:63:f7:0f:b7:8a:39:a9:d3:f5:\n- *     9b:b7\n- *\n- *\n- * server certificate:\n- *  Data:\n- *      Version: 3 (0x2)\n- *      Serial Number: 11 (0xb)\n- *      Signature Algorithm: sha1WithRSAEncryption\n- *      Issuer: C=US, ST=Some-State, O=Some Org, CN=Someone\n- *      Validity\n- *          Not Before: Apr 18 15:07:30 2008 GMT\n- *          Not After : Jan  4 15:07:30 2028 GMT\n- *      Subject: C=US, ST=Some-State, O=Some Org, CN=SomeoneExport\n- *      Subject Public Key Info:\n- *          Public Key Algorithm: rsaEncryption\n- *          RSA Public Key: (512 bit)\n- *              Modulus (512 bit):\n- *                  00:b9:5f:1a:0f:f9:67:07:89:71:6e:73:a8:b7:67:\n- *                  43:6b:b2:8a:b7:2a:0c:39:44:34:a9:ef:f4:50:01:\n- *                  3a:6f:e3:d3:09:e5:3c:7a:97:08:2a:85:04:ba:0c:\n- *                  ee:d1:bc:a2:17:22:d5:23:f2:e9:f2:c9:e5:da:8b:\n- *                  7f:91:4e:1f:6b\n- *              Exponent: 65537 (0x10001)\n- *      X509v3 extensions:\n- *          X509v3 Basic Constraints:\n- *              CA:FALSE\n- *          X509v3 Key Usage:\n- *              Digital Signature, Non Repudiation, Key Encipherment\n- *          X509v3 Subject Key Identifier:\n- *              F1:30:98:BE:7C:AA:F9:B1:91:38:60:AE:13:5F:67:9C:0A:32:9E:31\n- *          X509v3 Authority Key Identifier:\n- *              keyid:B5:32:43:D7:00:24:92:BA:E9:95:E5:F9:A3:64:6C:84:EE:33:2E:15\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICIDCCAYmgAwIBAgIBCzANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcxEDAOBgNVBAMT\n- * B1NvbWVvbmUwHhcNMDgwNDE4MTUwNzMwWhcNMjgwMTA0MTUwNzMwWjBNMQswCQYD\n- * VQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcx\n- * FjAUBgNVBAMTDVNvbWVvbmVFeHBvcnQwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA\n- * uV8aD\/lnB4lxbnOot2dDa7KKtyoMOUQ0qe\/0UAE6b+PTCeU8epcIKoUEugzu0byi\n- * FyLVI\/Lp8snl2ot\/kU4fawIDAQABo1owWDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIF\n- * 4DAdBgNVHQ4EFgQU8TCYvnyq+bGROGCuE19nnAoynjEwHwYDVR0jBBgwFoAUtTJD\n- * 1wAkkrrpleX5o2RshO4zLhUwDQYJKoZIhvcNAQEFBQADgYEAFU+fP9FSTQNVZOhv\n- * eJ+zq6wI\/biwzTgPbAq3yu2gb5kT85z4nzqBhPd2LWWFXhUW\/D8QyNZ54X30y0Ug\n- * 3NfUAvOANW7CgUbHBmm77KQiF4nWdh338qqq9HzLGrPqcxX0dmiq2RBVPy9wb2Ea\n- * FTZiU2v+9pkoLoSDnCOfPCg\/4Q4=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *       Version: 3 (0x2)\n- *       Serial Number: 0 (0x0)\n- *       Signature Algorithm: md5WithRSAEncryption\n- *       Issuer: C=US, ST=Some-State, O=Some Org, CN=Someone\n- *       Validity\n- *           Not Before: Mar 30 11:44:47 2001 GMT\n- *           Not After : Apr 27 11:44:47 2028 GMT\n- *       Subject: C=US, ST=Some-State, O=Some Org, CN=Someone\n- *       Subject Public Key Info:\n- *           Public Key Algorithm: rsaEncryption\n- *           RSA Public Key: (1024 bit)\n- *               Modulus (1024 bit):\n- *                   00:c1:98:e4:7a:87:53:0f:94:87:dc:da:f3:59:39:\n- *                   3e:36:95:e8:77:58:ff:46:8a:81:1b:5e:c5:4c:fa:\n- *                   b6:91:19:30:be:5b:ef:4c:aa:84:30:a4:9a:d4:68:\n- *                   af:ef:fa:b4:2c:76:8b:29:33:46:cf:38:74:7c:79:\n- *                   d5:07:a6:43:39:84:52:39:4f:8a:1c:f3:73:19:12:\n- *                   40:cf:ee:a1:77:43:01:02:be:8d:32:11:28:70:f4:\n- *                   cf:ab:43:75:e4:fb:74:f1:8c:2e:43:24:ba:85:3f:\n- *                   66:3a:05:ea:f7:ce:5b:97:e2:34:a3:f0:87:f4:f8:\n- *                   d1:59:12:5a:68:b7:78:64:a9\n- *               Exponent: 65537 (0x10001)\n- *       X509v3 extensions:\n- *           X509v3 Subject Key Identifier:\n- *               B5:32:43:D7:00:24:92:BA:E9:95:E5:F9:A3:64:6C:84:EE:33:2E:15\n- *           X509v3 Authority Key Identifier:\n- *               keyid:B5:32:43:D7:00:24:92:BA:E9:95:E5:F9:A3:64:6C:84:EE:33:2E:15\n- *               DirName:\/C=US\/ST=Some-State\/O=Some Org\/CN=Someone\n- *               serial:00\n- *\n- *           X509v3 Basic Constraints:\n- *               CA:TRUE\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpjCCAg+gAwIBAgIBADANBgkqhkiG9w0BAQQFADBHMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcxEDAOBgNVBAMT\n- * B1NvbWVvbmUwHhcNMDEwMzMwMTE0NDQ3WhcNMjgwNDI3MTE0NDQ3WjBHMQswCQYD\n- * VQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcx\n- * EDAOBgNVBAMTB1NvbWVvbmUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMGY\n- * 5HqHUw+Uh9za81k5PjaV6HdY\/0aKgRtexUz6tpEZML5b70yqhDCkmtRor+\/6tCx2\n- * iykzRs84dHx51QemQzmEUjlPihzzcxkSQM\/uoXdDAQK+jTIRKHD0z6tDdeT7dPGM\n- * LkMkuoU\/ZjoF6vfOW5fiNKPwh\/T40VkSWmi3eGSpAgMBAAGjgaEwgZ4wHQYDVR0O\n- * BBYEFLUyQ9cAJJK66ZXl+aNkbITuMy4VMG8GA1UdIwRoMGaAFLUyQ9cAJJK66ZXl\n- * +aNkbITuMy4VoUukSTBHMQswCQYDVQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0\n- * ZTERMA8GA1UEChMIU29tZSBPcmcxEDAOBgNVBAMTB1NvbWVvbmWCAQAwDAYDVR0T\n- * BAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBhf3PX0xWxtaUwZlWCO7GfPwCKgBWr\n- * CXqlqjtWHCshaaU7wUsDOwxFDWwKjFrMerQLsLuBlhdXEbNfSPjychkQtfezQHcS\n- * q0Atq7+KVSmRbDw6oKVRs5v1BBzLCupy+o16fNz3\/hwreAWwQnSMtAh\/osNS9w1b\n- * QeVWU+JV47H+vg==\n- * -----END CERTIFICATE-----\n- *\n- *\/\n+\n@@ -201,4 +43,1 @@\n-import java.net.*;\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n+import java.security.*;\n@@ -206,3 +45,1 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n+import java.security.cert.X509Certificate;\n@@ -210,1 +47,1 @@\n-import java.math.BigInteger;\n+import sun.security.testlibrary.CertificateBuilder;\n@@ -214,7 +51,0 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-\n@@ -228,78 +58,2 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpjCCAg+gAwIBAgIBADANBgkqhkiG9w0BAQQFADBHMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcxEDAOBgNVBAMT\\n\" +\n-        \"B1NvbWVvbmUwHhcNMDEwMzMwMTE0NDQ3WhcNMjgwNDI3MTE0NDQ3WjBHMQswCQYD\\n\" +\n-        \"VQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcx\\n\" +\n-        \"EDAOBgNVBAMTB1NvbWVvbmUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMGY\\n\" +\n-        \"5HqHUw+Uh9za81k5PjaV6HdY\/0aKgRtexUz6tpEZML5b70yqhDCkmtRor+\/6tCx2\\n\" +\n-        \"iykzRs84dHx51QemQzmEUjlPihzzcxkSQM\/uoXdDAQK+jTIRKHD0z6tDdeT7dPGM\\n\" +\n-        \"LkMkuoU\/ZjoF6vfOW5fiNKPwh\/T40VkSWmi3eGSpAgMBAAGjgaEwgZ4wHQYDVR0O\\n\" +\n-        \"BBYEFLUyQ9cAJJK66ZXl+aNkbITuMy4VMG8GA1UdIwRoMGaAFLUyQ9cAJJK66ZXl\\n\" +\n-        \"+aNkbITuMy4VoUukSTBHMQswCQYDVQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0\\n\" +\n-        \"ZTERMA8GA1UEChMIU29tZSBPcmcxEDAOBgNVBAMTB1NvbWVvbmWCAQAwDAYDVR0T\\n\" +\n-        \"BAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBhf3PX0xWxtaUwZlWCO7GfPwCKgBWr\\n\" +\n-        \"CXqlqjtWHCshaaU7wUsDOwxFDWwKjFrMerQLsLuBlhdXEbNfSPjychkQtfezQHcS\\n\" +\n-        \"q0Atq7+KVSmRbDw6oKVRs5v1BBzLCupy+o16fNz3\/hwreAWwQnSMtAh\/osNS9w1b\\n\" +\n-        \"QeVWU+JV47H+vg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICIDCCAYmgAwIBAgIBCzANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcxEDAOBgNVBAMT\\n\" +\n-        \"B1NvbWVvbmUwHhcNMDgwNDE4MTUwNzMwWhcNMjgwMTA0MTUwNzMwWjBNMQswCQYD\\n\" +\n-        \"VQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTERMA8GA1UEChMIU29tZSBPcmcx\\n\" +\n-        \"FjAUBgNVBAMTDVNvbWVvbmVFeHBvcnQwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA\\n\" +\n-        \"uV8aD\/lnB4lxbnOot2dDa7KKtyoMOUQ0qe\/0UAE6b+PTCeU8epcIKoUEugzu0byi\\n\" +\n-        \"FyLVI\/Lp8snl2ot\/kU4fawIDAQABo1owWDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIF\\n\" +\n-        \"4DAdBgNVHQ4EFgQU8TCYvnyq+bGROGCuE19nnAoynjEwHwYDVR0jBBgwFoAUtTJD\\n\" +\n-        \"1wAkkrrpleX5o2RshO4zLhUwDQYJKoZIhvcNAQEFBQADgYEAFU+fP9FSTQNVZOhv\\n\" +\n-        \"eJ+zq6wI\/biwzTgPbAq3yu2gb5kT85z4nzqBhPd2LWWFXhUW\/D8QyNZ54X30y0Ug\\n\" +\n-        \"3NfUAvOANW7CgUbHBmm77KQiF4nWdh338qqq9HzLGrPqcxX0dmiq2RBVPy9wb2Ea\\n\" +\n-        \"FTZiU2v+9pkoLoSDnCOfPCg\/4Q4=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte privateExponent[] = {\n-        (byte)0x4c, (byte)0xed, (byte)0x3f, (byte)0x86,\n-        (byte)0x93, (byte)0x8c, (byte)0x83, (byte)0x1f,\n-        (byte)0x31, (byte)0x98, (byte)0x91, (byte)0x9c,\n-        (byte)0xd9, (byte)0x87, (byte)0x9b, (byte)0xfe,\n-        (byte)0x0c, (byte)0x98, (byte)0xee, (byte)0x4c,\n-        (byte)0x1f, (byte)0xc8, (byte)0x80, (byte)0x1a,\n-        (byte)0x8e, (byte)0xcf, (byte)0x4a, (byte)0x87,\n-        (byte)0x0d, (byte)0x0b, (byte)0x70, (byte)0x34,\n-        (byte)0xd8, (byte)0x4e, (byte)0x8d, (byte)0x84,\n-        (byte)0x00, (byte)0x8f, (byte)0xaf, (byte)0x32,\n-        (byte)0x60, (byte)0xe9, (byte)0x53, (byte)0xe7,\n-        (byte)0x6f, (byte)0x98, (byte)0xe0, (byte)0x8b,\n-        (byte)0x52, (byte)0xaa, (byte)0xbf, (byte)0x67,\n-        (byte)0x6b, (byte)0x62, (byte)0x28, (byte)0x98,\n-        (byte)0x46, (byte)0xca, (byte)0xb9, (byte)0x9c,\n-        (byte)0x06, (byte)0x5c, (byte)0x6b, (byte)0x91\n-    };\n-\n-    static byte modulus[] = {\n-        (byte)0x00,\n-        (byte)0xb9, (byte)0x5f, (byte)0x1a, (byte)0x0f,\n-        (byte)0xf9, (byte)0x67, (byte)0x07, (byte)0x89,\n-        (byte)0x71, (byte)0x6e, (byte)0x73, (byte)0xa8,\n-        (byte)0xb7, (byte)0x67, (byte)0x43, (byte)0x6b,\n-        (byte)0xb2, (byte)0x8a, (byte)0xb7, (byte)0x2a,\n-        (byte)0x0c, (byte)0x39, (byte)0x44, (byte)0x34,\n-        (byte)0xa9, (byte)0xef, (byte)0xf4, (byte)0x50,\n-        (byte)0x01, (byte)0x3a, (byte)0x6f, (byte)0xe3,\n-        (byte)0xd3, (byte)0x09, (byte)0xe5, (byte)0x3c,\n-        (byte)0x7a, (byte)0x97, (byte)0x08, (byte)0x2a,\n-        (byte)0x85, (byte)0x04, (byte)0xba, (byte)0x0c,\n-        (byte)0xee, (byte)0xd1, (byte)0xbc, (byte)0xa2,\n-        (byte)0x17, (byte)0x22, (byte)0xd5, (byte)0x23,\n-        (byte)0xf2, (byte)0xe9, (byte)0xf2, (byte)0xc9,\n-        (byte)0xe5, (byte)0xda, (byte)0x8b, (byte)0x7f,\n-        (byte)0x91, (byte)0x4e, (byte)0x1f, (byte)0x6b\n-    };\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n+\n+    static char[] passphrase = \"passphrase\".toCharArray();\n@@ -312,4 +66,1 @@\n-    \/*\n-     * Turn on SSL debugging?\n-     *\/\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -363,1 +114,0 @@\n-\n@@ -407,5 +157,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n@@ -418,0 +163,4 @@\n+    private final X509Certificate caCertificate;\n+    private final X509Certificate serverCertificate;\n+    private final KeyPair serverKeys;\n+\n@@ -430,1 +179,1 @@\n-        new RSAExport();\n+        new RSAExport().run();\n@@ -442,0 +191,25 @@\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(1024);\n+\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        caCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"C = US, ST = Some-State, O = Some Org, CN = Someone\", caKeys)\n+            .build(null, caKeys.getPrivate(), \"MD5withRSA\");\n+\n+        kpg.initialize(512);\n+        serverKeys = kpg.generateKeyPair();\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C = US, ST = Some-State, O = Some Org, CN = SomeoneExport\",\n+            serverKeys.getPublic(), caKeys.getPublic())\n+            .build(caCertificate, caKeys.getPrivate(), \"SHA1withRSA\");\n+\n+        if (debug) {\n+            System.err.println(\"CA CERTIFICATE\");\n+            CertificateBuilder.printCertificate(caCertificate, System.err);\n+\n+            System.err.println(\"SERVER CERTIFICATE\");\n+            CertificateBuilder.printCertificate(serverCertificate, System.err);\n+        }\n+    }\n+\n+    void run() throws Exception {\n@@ -519,7 +293,0 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trustedCert = cf.generateCertificate(is);\n-\n@@ -531,1 +298,1 @@\n-        ks.setCertificateEntry(\"RSA Export Signer\", trustedCert);\n+        ks.setCertificateEntry(\"RSA Export Signer\", caCertificate);\n@@ -534,12 +301,0 @@\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(serverCertStr.getBytes());\n-            Certificate serverCert = cf.generateCertificate(is);\n-\n@@ -547,2 +302,2 @@\n-            chain[0] = serverCert;\n-            chain[1] = trustedCert;\n+            chain[0] = serverCertificate;\n+            chain[1] = caCertificate;\n@@ -551,1 +306,1 @@\n-            ks.setKeyEntry(\"RSA Export\", priKey, passphrase, chain);\n+            ks.setKeyEntry(\"RSA Export\", serverKeys.getPrivate(), passphrase, chain);\n@@ -570,1 +325,0 @@\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/ClientHandshaker\/RSAExport.java","additions":48,"deletions":294,"binary":false,"changes":342,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -38,1 +44,0 @@\n-import java.io.ByteArrayInputStream;\n@@ -42,3 +47,1 @@\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n+import java.security.*;\n@@ -47,3 +50,2 @@\n-import java.security.interfaces.RSAPrivateKey;\n-import java.security.spec.PKCS8EncodedKeySpec;\n-import java.util.Base64;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n@@ -51,0 +53,2 @@\n+import sun.security.testlibrary.CertificateBuilder;\n+import sun.security.util.KnownOIDs;\n@@ -54,56 +58,5 @@\n-    \/*\n-     * Certificates and key used in the test.\n-     *\/\n-    \/\/ It's a trust anchor signed with MD2 hash function.\n-    private static final String TRUSTED_CERT_STR = \"-----BEGIN CERTIFICATE-----\\n\"\n-            + \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQIFADA7MQswCQYDVQQGEwJVUzEN\\n\"\n-            + \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\"\n-            + \"MTExMTE4MTExNDA0WhcNMzIxMDI4MTExNDA0WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\"\n-            + \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\"\n-            + \"KoZIhvcNAQEBBQADgY0AMIGJAoGBAPGyB9tugUGgxtdeqe0qJEwf9x1Gy4BOi1yR\\n\"\n-            + \"wzDZY4H5LquvIfQ2V3J9X1MQENVsFvkvp65ZcFcy+ObOucXUUPFcd\/iw2DVb5QXA\\n\"\n-            + \"ffyeVqWD56GPi8Qe37wrJO3L6fBhN9oxp\/BbdRLgjU81zx8qLEyPODhPMxV4OkcA\\n\"\n-            + \"SDwZTSxxAgMBAAGjgaUwgaIwHQYDVR0OBBYEFLOAtr\/YrYj9H04EDLA0fd14jisF\\n\"\n-            + \"MGMGA1UdIwRcMFqAFLOAtr\/YrYj9H04EDLA0fd14jisFoT+kPTA7MQswCQYDVQQG\\n\"\n-            + \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\"\n-            + \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEC\\n\"\n-            + \"BQADgYEAr8ExpXu\/FTIRiMzPm0ubqwME4lniilwQUiEOD\/4DbksNjEIcUyS2hIk1\\n\"\n-            + \"qsmjJz3SHBnwhxl9dhJVwk2tZLkPGW86Zn0TPVRsttK4inTgCC9GFGeqQBdrU\/uf\\n\"\n-            + \"lipBzXWljrfbg4N\/kK8m2LabtKUMMnGysM8rN0Fx2PYm5xxGvtM=\\n\"\n-            + \"-----END CERTIFICATE-----\";\n-\n-    \/\/ The certificate issued by above trust anchor, signed with MD5\n-    private static final String TARGET_CERT_STR = \"-----BEGIN CERTIFICATE-----\\n\"\n-            + \"MIICeDCCAeGgAwIBAgIBAjANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\"\n-            + \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\"\n-            + \"MTExMTE4MTExNDA2WhcNMzEwODA1MTExNDA2WjBPMQswCQYDVQQGEwJVUzENMAsG\\n\"\n-            + \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxEjAQBgNV\\n\"\n-            + \"BAMTCWxvY2FsaG9zdDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAwDnm96mw\\n\"\n-            + \"fXCH4bgXk1US0VcJsQVxUtGMyncAveMuzBzNzOmKZPeqyYX1Fuh4q+cuza03WTJd\\n\"\n-            + \"G9nOkNr364e3Rn1aaHjCMcBmFflObnGnhhufNmIGYogJ9dJPmhUVPEVAXrMG+Ces\\n\"\n-            + \"NKy2E8woGnLMrqu6yiuTClbLBPK8fWzTXrECAwEAAaN4MHYwCwYDVR0PBAQDAgPo\\n\"\n-            + \"MB0GA1UdDgQWBBSdRrpocLPJXyGfDmMWJrcEf29WGDAfBgNVHSMEGDAWgBSzgLa\/\\n\"\n-            + \"2K2I\/R9OBAywNH3deI4rBTAnBgNVHSUEIDAeBggrBgEFBQcDAQYIKwYBBQUHAwIG\\n\"\n-            + \"CCsGAQUFBwMDMA0GCSqGSIb3DQEBBAUAA4GBAKJ71ZiCUykkJrCLYUxlFlhvUcr9\\n\"\n-            + \"sTcOc67QdroW5f412NI15SXWDiley\/JOasIiuIFPjaJBjOKoHOvTjG\/snVu9wEgq\\n\"\n-            + \"YNR8dPsO+NM8r79C6jO+Jx5fYAC7os2XxS75h3NX0ElJcbwIXGBJ6xRrsFh\/BGYH\\n\"\n-            + \"yvudOlX4BkVR0l1K\\n\"\n-            + \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8.\n-    private static final String TARGET_PRIV_KEY_STR = \"MIICdwIBADANBgkqhkiG9w0B\\n\"\n-            + \"AQEFAASCAmEwggJdAgEAAoGBAMA55vepsH1wh+G4F5NVEtFXCbEFcVLRjMp3AL3j\\n\"\n-            + \"LswczczpimT3qsmF9RboeKvnLs2tN1kyXRvZzpDa9+uHt0Z9Wmh4wjHAZhX5Tm5x\\n\"\n-            + \"p4YbnzZiBmKICfXST5oVFTxFQF6zBvgnrDSsthPMKBpyzK6rusorkwpWywTyvH1s\\n\"\n-            + \"016xAgMBAAECgYEAn9bF3oRkdDoBU0i\/mcww5I+KSH9tFt+WQbiojjz9ac49trkv\\n\"\n-            + \"Ufu7MO1Jui2+QbrvaSkyj+HYGFOJd1wMsPXeB7ck5mOIYV4uZK8jfNMSQ8v0tFEe\\n\"\n-            + \"IPp5lKdw1XnrQfSe+abo2eL5Lwso437Y4s3w37+HaY3d76hR5qly+Ys+Ww0CQQDj\\n\"\n-            + \"eOoX89d\/xhRqGXKjCx8ImE\/dPmsI8O27cwtKrDYJ6t0v\/xryVIdvOYcRBvKnqEog\\n\"\n-            + \"OH7T1kI+LnWKUTJ2ehJ7AkEA2FVloPVqCehXcc7ez3TDpU9w1B0JXklcV5HddYsR\\n\"\n-            + \"qp9RukN\/VK4szKE7F1yoarIUtfE9Lr9082Jwyp3ML11xwwJBAKsZ+Hur3x0tUY29\\n\"\n-            + \"No2Nf\/pnFyvEF57SGwA0uPmiL8Ol9lpz+UDudDElhIM6Rqv12kwCMuQE9i7vo1o3\\n\"\n-            + \"WU3k5KECQEqhg1L49yD935TqiiFFpe0Ur9btQXsekdXAA4d2d5zGI7q\/aGD9SYU6\\n\"\n-            + \"phkUJSHR16VA2RuUfzMrpb+wmm1IrmMCQFtLoKRTA5kokFb+E3Gplu29tJvCUpfw\\n\"\n-            + \"gBFRS+wmkvtiaU\/tiyDcVgDO+An5DwedxxdVzqiEnjWHoKY3axDQ8OU=\";\n-\n-    private static final char PASSPHRASE[] = \"passphrase\".toCharArray();\n+    private final X509Certificate caCertificate;\n+    private final X509Certificate targetCert;\n+    private final KeyPair targetKeys;\n+\n+    private static final char[] PASSPHRASE = \"passphrase\".toCharArray();\n@@ -114,1 +67,1 @@\n-    private static volatile CountDownLatch sync = new CountDownLatch(1);\n+    private static final CountDownLatch sync = new CountDownLatch(1);\n@@ -119,1 +72,25 @@\n-    private static final boolean DEBUG = false;\n+    private static final boolean DEBUG = Boolean.getBoolean(\"test.debug\");\n+\n+    public MD2InTrustAnchor() throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(1024);\n+\n+        KeyPair caKey = kpg.generateKeyPair();\n+        caCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"C=US, O=Java, OU=SunJSSE Test Serivce\", caKey)\n+            .build(null, caKey.getPrivate(), \"MD2withRSA\");\n+\n+        targetKeys = kpg.generateKeyPair();\n+        targetCert = CertificateBuilder.newServerCertificateBuilder(\n+            \"C=US, O=Java, OU=SunJSSE Test Serivce, CN=localhost\",\n+            targetKeys.getPublic(), caKey.getPublic())\n+            .addExtendedKeyUsageExt(\n+                    List.of(KnownOIDs.serverAuth.value(), KnownOIDs.clientAuth.value(),\n+                            KnownOIDs.codeSigning.value()))\n+            .build(caCertificate, caKey.getPrivate(), \"MD5withRSA\");\n+\n+        if (DEBUG) {\n+            CertificateBuilder.printCertificate(caCertificate, System.out);\n+            CertificateBuilder.printCertificate(targetCert, System.out);\n+        }\n+    }\n@@ -128,2 +105,1 @@\n-        SSLContext context = generateSSLContext(TRUSTED_CERT_STR, TARGET_CERT_STR,\n-                TARGET_PRIV_KEY_STR);\n+        SSLContext context = generateSSLContext();\n@@ -167,2 +143,1 @@\n-        SSLContext context = generateSSLContext(TRUSTED_CERT_STR, TARGET_CERT_STR,\n-                TARGET_PRIV_KEY_STR);\n+        SSLContext context = generateSSLContext();\n@@ -198,2 +173,1 @@\n-    private static SSLContext generateSSLContext(String trustedCertStr,\n-            String keyCertStr, String keySpecStr) throws Exception {\n+    private SSLContext generateSSLContext() throws Exception {\n@@ -208,7 +182,1 @@\n-        \/\/ import the trused cert\n-        Certificate trusedCert = null;\n-        ByteArrayInputStream is = null;\n-        if (trustedCertStr != null) {\n-            is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-            trusedCert = cf.generateCertificate(is);\n-            is.close();\n+        ks.setCertificateEntry(\"RSA Export Signer\", caCertificate);\n@@ -216,2 +184,5 @@\n-            ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-        }\n+        \/\/ It's not allowed to send MD2 signed certificate to peer,\n+        \/\/ even it may be a trusted certificate. Then we will not\n+        \/\/ place the trusted certficate in the chain.\n+        Certificate[] chain = new Certificate[1];\n+        chain[0] = targetCert;\n@@ -219,22 +190,2 @@\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                    Base64.getMimeDecoder().decode(keySpecStr));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey\n-                    = (RSAPrivateKey) kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            \/\/ It's not allowed to send MD2 signed certificate to peer,\n-            \/\/ even it may be a trusted certificate. Then we will not\n-            \/\/ place the trusted certficate in the chain.\n-            Certificate[] chain = new Certificate[1];\n-            chain[0] = keyCert;\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, PASSPHRASE, chain);\n-        }\n+        \/\/ import the key entry.\n+        ks.setKeyEntry(\"Whatever\", targetKeys.getPrivate(), PASSPHRASE, chain);\n@@ -247,9 +198,4 @@\n-        if (keyCertStr != null && !keyCertStr.isEmpty()) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-            kmf.init(ks, PASSPHRASE);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-            ks = null;\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n+        kmf.init(ks, PASSPHRASE);\n+\n+        ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/MD2InTrustAnchor.java","additions":58,"deletions":112,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -38,0 +44,2 @@\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n@@ -42,1 +50,0 @@\n-import java.security.KeyFactory;\n@@ -45,1 +52,1 @@\n-import java.security.interfaces.*;\n+import sun.security.testlibrary.CertificateBuilder;\n@@ -47,1 +54,2 @@\n-import java.util.Base64;\n+public class BasicConstraints extends TMBase {\n+    private final X509Certificate trustedCertificate;\n@@ -49,1 +57,1 @@\n-public class BasicConstraints {\n+    private final X509Certificate caSignerCertificate;\n@@ -51,5 +59,1 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n+    private final X509Certificate certIssuerCertificate;\n@@ -57,6 +61,2 @@\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n+    private final X509Certificate serverCertificate;\n+    private final KeyPair serverKeyPair;\n@@ -64,304 +64,4 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificate information:\n-    \/\/ Issuer: C=US, O=Java, OU=SunJSSE Test Serivce\n-    \/\/ Validity\n-    \/\/     Not Before: Dec 20 13:13:44 2019 GMT\n-    \/\/     Not After : Dec 17 13:13:44 2029 GMT\n-    \/\/ Subject: C=US, O=Java, OU=SunJSSE Test Serivce\n-    \/\/ X509v3 Subject Key Identifier:\n-    \/\/     88:A7:8D:A1:4F:85:3C:9B:32:47:88:E8:74:81:65:45:00:DE:DD:45\n-    \/\/ X509v3 Authority Key Identifier:\n-    \/\/     keyid:88:A7:8D:A1:4F:85:3C:9B:32:47:88:E8:74:81:65:45:00:DE:DD:45\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDZDCCAkygAwIBAgIUSXd4x4\/VUhfEFGgfxEt\/BG2n8RIwDQYJKoZIhvcNAQEL\\n\" +\n-        \"BQAwOzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpT\\n\" +\n-        \"U0UgVGVzdCBTZXJpdmNlMB4XDTE5MTIyMDEzMTM0NFoXDTI5MTIxNzEzMTM0NFow\\n\" +\n-        \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-        \"VGVzdCBTZXJpdmNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1Cd4\\n\" +\n-        \"U\/\/Y2P4vIu9BBGi+pm64YXYP2LNRNK\/e5\/nWWmNKJapCAYYda\/FJClrbzpI\/FgRU\\n\" +\n-        \"NLM9B4Uo065FRIrBi1vu8zyYgwT7UK0WsLwg6Z81KH50PfM0ClEx44tTqocYDc7C\\n\" +\n-        \"gsvbyIeTIbV9AnRlEnBA15WFJAJMTCglaNleXUZ9+A\/tazRhHlsRp0Ob8j4tCMJa\\n\" +\n-        \"RDpGMYTy1XbG+WqC8wXP63a63cwjPrL5uzt\/C4W1bgNBfTRwIHSUShNhfdc7ZJNS\\n\" +\n-        \"r2NFPcwodd7uVle5JePNag7oyhjOFFEaBGq21dl6\/ozVRkqSWWAi1P7MRay9eYj3\\n\" +\n-        \"mLZiZaL6NlWxXnfzVwIDAQABo2AwXjAdBgNVHQ4EFgQUiKeNoU+FPJsyR4jodIFl\\n\" +\n-        \"RQDe3UUwHwYDVR0jBBgwFoAUiKeNoU+FPJsyR4jodIFlRQDe3UUwDwYDVR0TAQH\/\\n\" +\n-        \"BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQELBQADggEBAI1Lgf1Sd\/iR\\n\" +\n-        \"pXBW6OKE9Oa6WkZx\/hKrtm3tw+m5OTU4veQijMPIIgnXw0QYXFMieWSjSz+OGq+v\\n\" +\n-        \"t5NJWj7afCOADrhswrfAY3q3XY9+HnoXv1OvANFhokos25w6fB9t0lrm5KR+3d8l\\n\" +\n-        \"RwQbxhr8I6tDn2pDExVXRe8k2PYqkabgG6IqPnLzt4iLhPx4ivzo4Zc+zfQZc672\\n\" +\n-        \"oyNJw2\/iNufHRsoRa8QqHJM9vziYfChZqdSSlTiqaoyijT0Br6\/2yyIKfjjt5Abt\\n\" +\n-        \"cwIDUWqQda62xV7ChkTh7ia3uvBXob2iiB0aI3gVTTqDfK9F5XXtW4BXfqx0hvwB\\n\" +\n-        \"6JzgmNyDQos=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-    static String trustedPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDUJ3hT\/9jY\/i8i\\n\" +\n-        \"70EEaL6mbrhhdg\/Ys1E0r97n+dZaY0olqkIBhh1r8UkKWtvOkj8WBFQ0sz0HhSjT\\n\" +\n-        \"rkVEisGLW+7zPJiDBPtQrRawvCDpnzUofnQ98zQKUTHji1OqhxgNzsKCy9vIh5Mh\\n\" +\n-        \"tX0CdGUScEDXlYUkAkxMKCVo2V5dRn34D+1rNGEeWxGnQ5vyPi0IwlpEOkYxhPLV\\n\" +\n-        \"dsb5aoLzBc\/rdrrdzCM+svm7O38LhbVuA0F9NHAgdJRKE2F91ztkk1KvY0U9zCh1\\n\" +\n-        \"3u5WV7kl481qDujKGM4UURoEarbV2Xr+jNVGSpJZYCLU\/sxFrL15iPeYtmJlovo2\\n\" +\n-        \"VbFed\/NXAgMBAAECggEAUZvlQ5q1VbNhenTCc+m+\/NK2hncd3WQNJtFIU7\/dXuO2\\n\" +\n-        \"0ApQXbmzc6RbTmppB2tmbRe5NJSGM3BbpiHxb05Y6TyyDEsQ98Vgz0Xl5pJXrsaZ\\n\" +\n-        \"cjxChtoY+KcHI9qikoRpElaoqBu3LcpJJLxlnB4eCxu3NbbEgneH1fvTeCO1kvcp\\n\" +\n-        \"i3DDdyfY7WB9RW1yWAveiuqvtnbsPfJJLKEhFvZL2ArYCRTm\/oIw64yukNe\/QLR5\\n\" +\n-        \"bGzEJMT2ZNQMld1f+CW9tOrUKrnnPCGfMa351T5we+8B6sujWfftPutgEVx5TmHs\\n\" +\n-        \"AOW1SntMapbgg46K9EC\/C5YQa5D1aNOH9ZTEMkgUMQKBgQDrpPQIHFozeeyZ0iiq\\n\" +\n-        \"HtReLPcqpkwr\/9ELc3SjgUypSvpu0l\/m++um0yLinlXMn25km\/BP6Mv3t\/+1uzAc\\n\" +\n-        \"qpopkcyek8X1hzNRhDkWuMv4KDOKk5c6qLx8FGSm6q8PYm5KbsiyeCM7CJoeoqJ5\\n\" +\n-        \"74IZjOIw7UrYLckCb6W8xGQLIwKBgQDmew3vGRR3JmCCSumtJQOqhF6bBYrNb6Qc\\n\" +\n-        \"r4vrng+QhNIquwGqHKPorAI1J8J1jOS+dkDWTxSz2xQKQ83nsOspzVPskpDh5mWL\\n\" +\n-        \"gGk5QCkX87jFsXfhvZFLksZMbIdpWze997Zs2fe\/PWfPaH6o3erqo2zAhQV0eA9q\\n\" +\n-        \"C7tfImREPQKBgQDi2Xq\/8CN52M9IScQx+dnyC5Gqckt0NCKXxn8sBIa7l129oDMI\\n\" +\n-        \"187FXA8CYPEyOu14V5KiKvdos66s0daAUlB04lI8+v+g3ZYuzH50\/FQHwxPTPUBi\\n\" +\n-        \"DRzeyncXJWiAA\/8vErWM8hDgfOh5w5Fsl4EEfdcmyNm7gWA4Qyknr1ysRwKBgQDC\\n\" +\n-        \"JSPepUy09VHUTxA59nT5HRmoEeoTFRizxTfi2LkZrphuwCotxoRXiRUu+3f1lyJU\\n\" +\n-        \"Qb5qCCFTQ5bE8squgTwGcVxhajC66V3ePePlAuPatkWN2ek28X1DoLaDR+Rk3h69\\n\" +\n-        \"Wb2EQbNMl4grkUUoMA8jaVhBb4vhyQSK+qjyAUFerQKBgQDXZPuflfsjH\/d\/O2yw\\n\" +\n-        \"qZbssKe9AKORjv795teblAc3vmsSlNwwVnPdS2aq1LHyoNbetc\/OaZV151hTQ\/9z\\n\" +\n-        \"bsA48oOojgrDD07Ovg3uDcNEIufxR0aGeSSvqhElp1r7wAYj8bAr6W\/RH6MS16WW\\n\" +\n-        \"dRd+PH6hsap8BD2RlVCnrT3vIQ==\";\n-\n-    \/\/ Certificate information:\n-    \/\/ Issuer: C=US, O=Java, OU=SunJSSE Test Serivce\n-    \/\/ Validity\n-    \/\/     Not Before: Dec 20 13:13:44 2019 GMT\n-    \/\/     Not After : Dec 17 13:13:44 2029 GMT\n-    \/\/ Subject: C=US, O=Java, OU=SunJSSE Test Serivce, CN=casigner\n-    \/\/ X509v3 Subject Key Identifier:\n-    \/\/     4B:6D:B0:B0:E6:EF:45:15:35:B5:FC:6B:E2:C7:FC:A6:E6:C4:EC:95\n-    \/\/ X509v3 Authority Key Identifier:\n-    \/\/     keyid:88:A7:8D:A1:4F:85:3C:9B:32:47:88:E8:74:81:65:45:00:DE:DD:45\n-    static String caSignerStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDdzCCAl+gAwIBAgIUDYDCpVXk72hlpeNam094GPxl9Z0wDQYJKoZIhvcNAQEL\\n\" +\n-        \"BQAwOzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpT\\n\" +\n-        \"U0UgVGVzdCBTZXJpdmNlMB4XDTE5MTIyMDEzMTM0NFoXDTI5MTIxNzEzMTM0NFow\\n\" +\n-        \"TjELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-        \"VGVzdCBTZXJpdmNlMREwDwYDVQQDDAhjYXNpZ25lcjCCASIwDQYJKoZIhvcNAQEB\\n\" +\n-        \"BQADggEPADCCAQoCggEBAMC8Z4sqVbWWNp567w28MKN9bkE0rZzQLivLsiz7WYzg\\n\" +\n-        \"8LsUDhtGkxpAcoiMuxnkPWGgD3Xzdy\/enVo\/vn9lgw7LHWJ3+FeZt3eOnwFHTBu+\\n\" +\n-        \"srFrnf7iU7RLkAvl06lTYBWFx15Dv4PCgvqIC4eo1wAGDcKKOshwV5kdw8zBpkx3\\n\" +\n-        \"1jEkbpiuc0cxaNtdMYqmZrTY0wHVSdHGx02mGp9G3aCRSzXyXrr3uxInt5uW9JYR\\n\" +\n-        \"bDUGa2uD02jbxRSyIXyrSb2L8bRDNg6tLq+CG6blukcCLHF8D1n+jMes3yB\/yA0N\\n\" +\n-        \"NGcbqmEPBVvVSP2c7Z\/3JMCvHsrPkS1E2YPH1I0xL2sCAwEAAaNgMF4wHQYDVR0O\\n\" +\n-        \"BBYEFEttsLDm70UVNbX8a+LH\/KbmxOyVMB8GA1UdIwQYMBaAFIinjaFPhTybMkeI\\n\" +\n-        \"6HSBZUUA3t1FMA8GA1UdEwEB\/wQFMAMBAf8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3\\n\" +\n-        \"DQEBCwUAA4IBAQBpwrPMDlCvxRvv91w4oFYhYTV2zj9BecsYQPhbqG9zRiHrJoNE\\n\" +\n-        \"dDPxZQnjb3P5u2LAe7Cp+Nah1ZSvjnF1oVk7ct+Usz02InojHxN72xDsZOMLWuAN\\n\" +\n-        \"3CJhjGp6WyYUstRWybpiJzPehZdYfk+FaMxwM54REAiipDTFO07PZrj1h\/aDQ0Tl\\n\" +\n-        \"7D6w2v1pz1IR\/ctuij7sFReFvjFEE4JoTNjfqzNWO4ML1vDHVi5MHeBgUckujOrI\\n\" +\n-        \"P0QqaqP+xJIY+sRrzdckxSfS9AOOrJk2VXY8qEoxCN4wCvHJWuHEAF\/Lm65d\/hq3\\n\" +\n-        \"2Uh8P+QHLeuEwF8RoTpjiGM9dXvaqcQz7w5G\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-    static String caSignerPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAvGeLKlW1ljae\\n\" +\n-        \"eu8NvDCjfW5BNK2c0C4ry7Is+1mM4PC7FA4bRpMaQHKIjLsZ5D1hoA9183cv3p1a\\n\" +\n-        \"P75\/ZYMOyx1id\/hXmbd3jp8BR0wbvrKxa53+4lO0S5AL5dOpU2AVhcdeQ7+DwoL6\\n\" +\n-        \"iAuHqNcABg3CijrIcFeZHcPMwaZMd9YxJG6YrnNHMWjbXTGKpma02NMB1UnRxsdN\\n\" +\n-        \"phqfRt2gkUs18l6697sSJ7eblvSWEWw1Bmtrg9No28UUsiF8q0m9i\/G0QzYOrS6v\\n\" +\n-        \"ghum5bpHAixxfA9Z\/ozHrN8gf8gNDTRnG6phDwVb1Uj9nO2f9yTArx7Kz5EtRNmD\\n\" +\n-        \"x9SNMS9rAgMBAAECggEAZk6cF\/8s5+sIqy9OXdgbaW1XbT1tOuQ23gCOX9o8Os\/c\\n\" +\n-        \"eTG4GzpnM3QqV9l8J85D1uKD0nSeO8bLd\/CGSlG0M9IVkwNjy\/xIqyoFtUQHXmLn\\n\" +\n-        \"r84UXAv\/qqDBoc8pf6RGSKZuodcMfgBuTlaQ6D3zgou0GiQN9\/\/KP\/jQyouwnr3A\\n\" +\n-        \"LyXQekxriwPuSYAPak8s5XLfugOebbSRm2UdGEgX3yrT9FVu9rtgeMKdRaCOU8T4\\n\" +\n-        \"G2UdpGaiDfm5yrR+2XEIv4oaH3WFxmmfQCxVcOFJ1iRvfKBbLb1UCgtJuCBD067y\\n\" +\n-        \"dq5PrwUTeAvd7hwZd0lxCSnWY7VvYFNr7iJfyElowQKBgQD8eosot+Th03hpkYDs\\n\" +\n-        \"BIVsw7oqhJmcrPV1bSZ+aQwqqrOGypNmb7nLGTC8Cj1sT+EzfGs7GqxiLOEn4NXr\\n\" +\n-        \"TYV\/\/RUPBSEXVp2y+2dot1a9oq0BJ8FwGTYL0qSwJrIXJfkQFrYhVVz3JLIWJbwV\\n\" +\n-        \"cy4YCQr094BhXTS7joJOUDRsYwKBgQDDbI3Lv+bBK8lLfIBll1RY1k5Gqy\/H+qxp\\n\" +\n-        \"sMN8FmadmIGzHhe9xml6b5EfAZphAUF4vZJhQXloT5Wm+NNIAf6X6dRjvzyw7N9B\\n\" +\n-        \"d48EFJF4ChqNGBocsQRNr2wPRzQ+k2caw9YyYMIjbhktDzO1U\/FJGYW6\/Vgr2v4K\\n\" +\n-        \"siROnXfLWQKBgBOVAZQP5z2opC8z7NbhZuPPrnG7xRpEw+jupUyqoxnwEWqD7bjF\\n\" +\n-        \"M5jQBFqhRLBQ5buTi9GSuQoIRxJLuuu8IH2TyH1YvX9M5YBLRXL2vVCJ\/HcZeURT\\n\" +\n-        \"gECcfs92wNtQw6d+y3N8ZnB4tSNIm\/Th8RJGKUZkp91lWECvxeWDDP3XAoGASfNq\\n\" +\n-        \"NRAJYlAPfGFAtTDu2i8+r79X9XUGiXg6gVp4umpbqkxY75eFkq9lWzZgFRVEkUwr\\n\" +\n-        \"eGIubyquluDSEw2uKg5yMMzNSqZYVY3IsOKXqbUpFvtn5jOWTU90tNNdEdD100sI\\n\" +\n-        \"Y0f6Ly4amNKH3rZFOERQNtJn6zCTsbh3xMgR7QECgYBhQTqxLU5eIu38MKobzRue\\n\" +\n-        \"RoUkMcoY3DePkKPSYjilFhkUDozIXf\/xUGnB8kERZKO+44wUkuPGljiFL1\/P\/RO9\\n\" +\n-        \"zhHAV94Kw2ddtfxy05GVtUZ99miBmsMb2m8vumGJqfR8h2xpfc1Ra0zfrsPgLNru\\n\" +\n-        \"xDTDW+bNbM7XyPvg9mOf7Q==\";\n-\n-    \/\/ Certificate information:\n-    \/\/ Issuer: C=US, O=Java, OU=SunJSSE Test Serivce, CN=casigner\n-    \/\/ Validity\n-    \/\/     Not Before: May  5 02:40:57 2012 GMT\n-    \/\/     Not After : Jan 21 02:40:57 2032 GMT\n-    \/\/ Subject: C=US, O=Java, OU=SunJSSE Test Serivce, CN=certissuer\n-    \/\/ X509v3 Subject Key Identifier:\n-    \/\/     B4:E8:EA:80:A9:2B:F5:62:B5:2C:A6:F8:FF:65:BC:CF:51:40:9C:15\n-    \/\/ X509v3 Authority Key Identifier:\n-    \/\/     keyid:4B:6D:B0:B0:E6:EF:45:15:35:B5:FC:6B:E2:C7:FC:A6:E6:C4:EC:95\n-    static String certIssuerStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDjDCCAnSgAwIBAgIUJWLHjJR9tY2\/5DX3iOcZ2JRKY8cwDQYJKoZIhvcNAQEL\\n\" +\n-        \"BQAwTjELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpT\\n\" +\n-        \"U0UgVGVzdCBTZXJpdmNlMREwDwYDVQQDDAhjYXNpZ25lcjAeFw0xOTEyMjAxMzEz\\n\" +\n-        \"NDVaFw0yOTEyMTcxMzEzNDVaMFAxCzAJBgNVBAYTAlVTMQ0wCwYDVQQKDARKYXZh\\n\" +\n-        \"MR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTETMBEGA1UEAwwKY2VydGlz\\n\" +\n-        \"c3VlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWUNWnObPBso4vI\\n\" +\n-        \"VaSM+Oq1f3EsyrtJWqhu+EG\/5UKEwYaNBs1A9u1zM5xc05y4wXJfFj755djtzfsz\\n\" +\n-        \"OFt1ke\/hjhpYSf4DcSJfb99MBvHHXrmrEqIdsPYSaUqT9DrIi+L0z0Rdev++IQJj\\n\" +\n-        \"j9J213gpi18RNrQWl8Xn9mlkxhCjwj1GoFA6aF+9cvWX8uh2Vrl6Vm28hTKnmTad\\n\" +\n-        \"FB7nwDF4\/mGuKVsiB+YTJJ\/2Y6RpNqVF\/Z6kET\/BE0DtCLlKvY7iljbHc892YzI0\\n\" +\n-        \"vhxlo4lOB3J4NhsQxJbq+mIlbbqZr+p4WA8hdnwI4UlktI4S7fXQzhA51JHVjZyX\\n\" +\n-        \"f9XYTRUCAwEAAaNgMF4wHQYDVR0OBBYEFLTo6oCpK\/VitSym+P9lvM9RQJwVMB8G\\n\" +\n-        \"A1UdIwQYMBaAFEttsLDm70UVNbX8a+LH\/KbmxOyVMA8GA1UdEwEB\/wQFMAMBAf8w\\n\" +\n-        \"CwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQCGrjnGs23pQkQoUu8+C2y\/\\n\" +\n-        \"OAT5k9uyPCcLxFPM+Hon5WI6DACxpj7mu2ekN0fswu6B7beQVygpnNSQFVqLrJw1\\n\" +\n-        \"daYdhTMzkNCkPk6q0cUmj5k94jfCHBl4jw+qoZiIehuR9qFHhpLkT4zMTkFof+P+\\n\" +\n-        \"Lfc92QJppUAOh3jTvHK01YwP2sxK3KXhcbofQnxGS4WHrqmmZC2YO\/LQRoYDZdUY\\n\" +\n-        \"zr4da2aIg9CKrH2QWoMkDfRKkJvrU3\/VhVfVWpNbXFE2xZXftQl3hpFCJ3FkpciA\\n\" +\n-        \"l3hKeq4byY3LXxhAClHpk1KkXJkMnQdOfA5aGekj\/Cjuaz1\/iKYAG2vRq7YcuM\/o\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-    static String certIssuerPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC1lDVpzmzwbKOL\\n\" +\n-        \"yFWkjPjqtX9xLMq7SVqobvhBv+VChMGGjQbNQPbtczOcXNOcuMFyXxY++eXY7c37\\n\" +\n-        \"MzhbdZHv4Y4aWEn+A3EiX2\/fTAbxx165qxKiHbD2EmlKk\/Q6yIvi9M9EXXr\/viEC\\n\" +\n-        \"Y4\/Sdtd4KYtfETa0FpfF5\/ZpZMYQo8I9RqBQOmhfvXL1l\/Lodla5elZtvIUyp5k2\\n\" +\n-        \"nRQe58AxeP5hrilbIgfmEySf9mOkaTalRf2epBE\/wRNA7Qi5Sr2O4pY2x3PPdmMy\\n\" +\n-        \"NL4cZaOJTgdyeDYbEMSW6vpiJW26ma\/qeFgPIXZ8COFJZLSOEu310M4QOdSR1Y2c\\n\" +\n-        \"l3\/V2E0VAgMBAAECggEBAJjfVrjl2kHwtSCSYchQB6FTfSBDnctgTrtP8iMo9FO0\\n\" +\n-        \"gVpOkVNtRndTbjhOzro7smIgPBJ5QlIIpErBLMmTinJza7gybNk2\/KD7yKwuzgnw\\n\" +\n-        \"2IdoyB9E8B+8EHmBZzW2ck953KaqLUvzPsdMG2IOPAomr\/gx\/eRQwScVzBefiEGo\\n\" +\n-        \"sN+rGfUt\/RNAHwWje1KuNDj21S84agQhN6hdYUnIMsvJLu\/9mOwUb9ff+AzTUfFr\\n\" +\n-        \"zyx2MJL4Cx59DkUUMESCfinlHUc21llQjFWmX\/zOoGY0X0qV\/YM\/GRsv1ZDFHw9o\\n\" +\n-        \"hQ6m8Ov7D9wB3TKZBI97sCyggjBfSeuYQlNbs99KWQECgYEA7IKNL0ME7FuIrKYu\\n\" +\n-        \"FCQ\/Duz1N3oQXLzrTGKUSU1qSbrU2Jwk4SfJ8ZYCW1TP6vZkaQsTXmXun3yyCAqZ\\n\" +\n-        \"hcOtDBhI+b7Wpmmyf6nb83oYJtzHMRQZ5qS+9vOBfV9Uf1za8XI4p90EqkFHByCF\\n\" +\n-        \"tHfjVbjK39zN4CvaO3tqpOaYtL0CgYEAxIrTAhGWy9nBsxf8QeqDou0rV5Cw50Kl\\n\" +\n-        \"kQsE7KLmjvrMaFFpUc5lgWoC+pm\/69VpNBUuN\/38YozwxVjVi\/nMJuuK150mhdWI\\n\" +\n-        \"B28FI7ORnFmVeSvTrP4mBX1ct2Tny9zpchXn3rpHR5NZUs7oBhjudHSfRMrHxeBs\\n\" +\n-        \"Kv2pr2s6uzkCgYAtrEh3iAm7WzHZpX3ghd9nknsIa5odTp5h8eeRAFI2Ss4vxneY\\n\" +\n-        \"w4ZMERwDZy1\/wnVBk9H5uNWMFxiKVQGww0j3vPjawe\/R0zeVT8gaDMn9N0WARNF7\\n\" +\n-        \"qPT3265196LptZTSa6xlPllYR6LfzXgEkeJk+3qyIIHheJZ8RikiDyYOQQKBgQC\/\\n\" +\n-        \"rxlegiMNC4KDldf7vanGxAKqcz5lPbXWQOX7mGC+f9HNx+Cs3VxYHDltiXgJnOju\\n\" +\n-        \"191s1HRK9WR5REt5KhY2uzB9WxJQItJ5VYiwqhhQYXqLY\/gdVv1kC0DayDndtMWk\\n\" +\n-        \"88JhklGkeAv83DikgbpGr9sJr6+oyFkWkLDmmfD82QKBgQCMgkZJzrdSNNlB0n5x\\n\" +\n-        \"xC3MzlsQ5aBJuUctnMfuyDi+11yLAuP1oLzGEJ7qEfFoGRO0V8zJWmHAfNhmVYEX\\n\" +\n-        \"ow5g0WbPT16GoRCiOAzq+ewH+TEELMF6HWqnDuTnCg28Jg0dw2kdVTqeyzKOQlLG\\n\" +\n-        \"ua9c2DY3PUTXQPNqLVhz+XxZKA==\";\n-\n-    \/\/ Certificate information:\n-    \/\/ Issuer: C=US, O=Java, OU=SunJSSE Test Serivce, CN=certissuer\n-    \/\/ Validity\n-    \/\/     Not Before: Dec 20 13:13:45 2019 GMT\n-    \/\/     Not After : Dec 17 13:13:45 2029 GMT\n-    \/\/ Subject: C=US, O=Java, OU=SunJSSE Test Serivce, CN=localhost\n-    \/\/ X509v3 Subject Key Identifier:\n-    \/\/     46:FC:94:7A:61:6D:BF:5F:AE:D7:20:EC:BF:6A:74:2A:26:F1:D4:4C\n-    \/\/ X509v3 Authority Key Identifier:\n-    \/\/     keyid:B4:E8:EA:80:A9:2B:F5:62:B5:2C:A6:F8:FF:65:BC:CF:51:40:9C:15\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDfDCCAmSgAwIBAgIUHsJi1HTWpR3FCiOiG\/qLK6BDluwwDQYJKoZIhvcNAQEL\\n\" +\n-        \"BQAwUDELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpT\\n\" +\n-        \"U0UgVGVzdCBTZXJpdmNlMRMwEQYDVQQDDApjZXJ0aXNzdWVyMB4XDTE5MTIyMDEz\\n\" +\n-        \"MTM0NVoXDTI5MTIxNzEzMTM0NVowTzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEph\\n\" +\n-        \"dmExHTAbBgNVBAsMFFN1bkpTU0UgVGVzdCBTZXJpdmNlMRIwEAYDVQQDDAlsb2Nh\\n\" +\n-        \"bGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCaDgoxN2UQQero\\n\" +\n-        \"oBQ4JlQP1BFaZEtIkdIU2VJs4whz85J0LSB\/68iEOS5e8wCz9wiQWr4isor7sl3e\\n\" +\n-        \"B2dnLGY28BthOTw2j\/CYw\/dRqyDbPZniooB233uLGarKjqQWXpRFQi6bgEQmNqWe\\n\" +\n-        \"C32w+V+Oq3CTkinwgPvA5mnSe0P8gpF9NLZBFn0TtxaY0bQIie2WNk\/HjrVQIhq3\\n\" +\n-        \"qmG\/zVxeBc3PVOOU\/OKrwjHbim9YI+zdDRXjNm8siHi0RF2+fkxfyAm8Qg+mT8L4\\n\" +\n-        \"xdtr0a+eP4oIvkymRURxIrXNnvoX+MhYKSOQnizpW0NMOZ5L9nyw1cYX8j9Ed6eM\\n\" +\n-        \"kzxZwRrlAgMBAAGjTzBNMB0GA1UdDgQWBBRG\/JR6YW2\/X67XIOy\/anQqJvHUTDAf\\n\" +\n-        \"BgNVHSMEGDAWgBS06OqAqSv1YrUspvj\/ZbzPUUCcFTALBgNVHQ8EBAMCA+gwDQYJ\\n\" +\n-        \"KoZIhvcNAQELBQADggEBAGXHGefA1j136yenwK+j9K5VnG2kYGXCadi9bKtTXf\/X\\n\" +\n-        \"6Xasb7QE2QWEIlq+78AaV9Dwc7qk1TuBsN05LbQUSe7h5UAfS4AZ5l\/XSay2cxrZ\\n\" +\n-        \"TKoyuzh9kj38QkEBxZlrClyBzU8Mct0L9F8yEm4V7AqQOshn9gEQl9lzJUb2KHeZ\\n\" +\n-        \"AxblrQhPQDrWhmQjQkl\/xaiOiU31sHKTnB\/L2CKvJtmsKIyBdrQCQTlIOcRu4\/PQ\\n\" +\n-        \"4z\/sjecKP08Xkf5+p4RzPL+OZHkJoejSEjBndLC8BK9IZD94kHZYDz8ulWrQJ5Nr\\n\" +\n-        \"u\/inkyf8NcG7zLBJJyuKfUXO\/OzGPD5QMviVc+PCGTY=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-    static String serverPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCaDgoxN2UQQero\\n\" +\n-        \"oBQ4JlQP1BFaZEtIkdIU2VJs4whz85J0LSB\/68iEOS5e8wCz9wiQWr4isor7sl3e\\n\" +\n-        \"B2dnLGY28BthOTw2j\/CYw\/dRqyDbPZniooB233uLGarKjqQWXpRFQi6bgEQmNqWe\\n\" +\n-        \"C32w+V+Oq3CTkinwgPvA5mnSe0P8gpF9NLZBFn0TtxaY0bQIie2WNk\/HjrVQIhq3\\n\" +\n-        \"qmG\/zVxeBc3PVOOU\/OKrwjHbim9YI+zdDRXjNm8siHi0RF2+fkxfyAm8Qg+mT8L4\\n\" +\n-        \"xdtr0a+eP4oIvkymRURxIrXNnvoX+MhYKSOQnizpW0NMOZ5L9nyw1cYX8j9Ed6eM\\n\" +\n-        \"kzxZwRrlAgMBAAECggEBAIPF4p36ni3r1H2q\/+CPmHP5l+ZTx7mJUcOXqNOO11on\\n\" +\n-        \"TGyndRc2ncvMBYgeH8nQUrj3hY+0XQGyrmwOtTohVkVD2IevJ3wcX1asuU5YLMCb\\n\" +\n-        \"zpd3HJ+RxeFT0S12GZEw0W70j11ft+tf7wZjGd5ZUI1+w8rWyZz5F18HOBlcauj\/\\n\" +\n-        \"iqMgrlVLZ7qXEb6WV9zP5hWx5nZwrnuuiM1zXLVuO9rg7qk+zCts2oyM8KRTfQIi\\n\" +\n-        \"Zo3VDO0nwnEoxxTQ\/2g2g\/jBJ1GiFygiFm\/i2SHQOJgaFS3Y3InjWEAiINIsdMIt\\n\" +\n-        \"yZk6twMG6ODjy8agZ4LLhZSyCkC33AN7MIkSCtvFubkCgYEAyRm+yvYxwiHCzZV8\\n\" +\n-        \"LZNuBBRliujgG41iuyUyRVBSaMyJMNRoOMm8XwDOF1BA44YPz4yCkfiiEk2ub\/f0\\n\" +\n-        \"hDhfBW3EWvYHrWkEbx9Th2YmFq20JlgcBGaM2TiiL+qx4ct687idPbJVZnwc4HtR\\n\" +\n-        \"Kc0eTwRlFsf2O3rwIy52mvIf\/48CgYEAxBxsllVz7+\/nm0UcxwHNDN+bPyDBxsu9\\n\" +\n-        \"QuSyR+zSnfcL6xaS4SClBLKxHSjbJ2Hi+UOXezO+eozDp\/zEFI6BygNRKTaLTVKr\\n\" +\n-        \"ezk9rbyKydRIXNlxFoX07U0KlD4lCrbrpsvcO\/OlzJe6q5R0B\/CIQmx2Y4wlRrE\/\\n\" +\n-        \"Tu+hsf3tBEsCgYBBltsKmXerKJW\/tbS1rLMiM4DW6JNHiTqdbUlTIBpwwd0xBuYj\\n\" +\n-        \"N3Dvz3RoWC2Bx9TaTaq8b0p1C88MB+RBR51+SMnVHQ9t+KWQlLgKnj9oACmUpAIn\\n\" +\n-        \"UUc5BeaoGDUCPvqQCTOHzuVZsrs8YBwdtR\/gh79sybU+ux8damcWrEfRcwKBgEsU\\n\" +\n-        \"HrZHLMWU8PROtz+w\/tGI4aR\/Y\/A5m9F6QI6sqc10AQoVcFHj74km6Auj0pL3NK\/9\\n\" +\n-        \"Ioc2Phwou9caO+8qx6GRN4cxrI8DsUbRmT1kSzYNoU56qILY8fXPYtdyGzhI41rN\\n\" +\n-        \"\/RiupLD4\/awmf21ytpfHcmOWCcdQoE4WC69a6VyVAoGAboeogM5\/TRKj80rXfUH2\\n\" +\n-        \"lFZzgX246XGwNyOVVgOuv\/Oxa61b5FeeCpnFQcjpZmC5vd63X3w7oYSDe2wUt+Wh\\n\" +\n-        \"LhYunmcCEj+yb3of33loQb\/FM2OLW9UoQakB7ewio9vtw+BAnWxnHFkEaqdxMXpy\\n\" +\n-        \"TiSXLpQ1Q9GvDpzngDzJzzY=\";\n-\n-    \/\/ Certificate information:\n-    \/\/ Issuer: C=US, O=Java, OU=SunJSSE Test Serivce, CN=certissuer\n-    \/\/ Validity\n-    \/\/     Not Before: Dec 20 14:21:29 2019 GMT\n-    \/\/     Not After : Dec 17 14:21:29 2029 GMT\n-    \/\/ Subject: C=US, O=Java, OU=SunJSSE Test Serivce, CN=InterOp Tester\n-    \/\/ X509v3 Subject Key Identifier:\n-    \/\/     1F:E4:C0:F5:B8:68:DB:D2:EB:9E:6F:BB:B5:9E:92:6D:BA:7D:97:3A\n-    \/\/ X509v3 Authority Key Identifier:\n-    \/\/     keyid:B4:E8:EA:80:A9:2B:F5:62:B5:2C:A6:F8:FF:65:BC:CF:51:40:9C:15\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDgTCCAmmgAwIBAgIUHFQOStLURT5sQ57OWO2z8iNJ9P8wDQYJKoZIhvcNAQEL\\n\" +\n-        \"BQAwUDELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpT\\n\" +\n-        \"U0UgVGVzdCBTZXJpdmNlMRMwEQYDVQQDDApjZXJ0aXNzdWVyMB4XDTE5MTIyMDE0\\n\" +\n-        \"MjEyOVoXDTI5MTIxNzE0MjEyOVowVDELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEph\\n\" +\n-        \"dmExHTAbBgNVBAsMFFN1bkpTU0UgVGVzdCBTZXJpdmNlMRcwFQYDVQQDDA5JbnRl\\n\" +\n-        \"ck9wIFRlc3RlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMXA3NV+\\n\" +\n-        \"pDnwnQgXFQ7WeDtcTe4qDQV9tDj9cRZFqQXo94C30lkuXzdH761bZB84DESV0qLI\\n\" +\n-        \"k6\/n+D9SOsg7SPe7uejG24rph\/VpPANrPXo8jxwh\/KW+8y0pYNigFUZDi+mEDAOG\\n\" +\n-        \"gyqaAbahQePDYTa09uY3MTTOcaUnKZEJkfVZnmrwmcH7qapCCz0N4Mv6Xddi87Fk\\n\" +\n-        \"j9R225XXW5ZZ+jwVGi1WubjxqLpbQo9VwdTgozBfxwzjQQWDOlUIics3RRaV4Yz0\\n\" +\n-        \"F3Sr4xZiq09O4x8ZT8jrQgduzVZhWjc7rHHbBeMmVBhOveSCvu54onZ2Y+G7+xU\/\\n\" +\n-        \"Zc1Z6s2Wb5N2I40CAwEAAaNPME0wHQYDVR0OBBYEFB\/kwPW4aNvS655vu7Wekm26\\n\" +\n-        \"fZc6MB8GA1UdIwQYMBaAFLTo6oCpK\/VitSym+P9lvM9RQJwVMAsGA1UdDwQEAwID\\n\" +\n-        \"6DANBgkqhkiG9w0BAQsFAAOCAQEAdgWs2wVkPoOrShdYTJM2\/v7sDYENCsj3VGEq\\n\" +\n-        \"NvTeL98FCjRZhRmozVi0mli6z2LjDM\/858vZoJWDJ08O0XvhXT4yJWWHCJz4xTY1\\n\" +\n-        \"GBern25Y8VjZGUwAIzK3EDjYzJCZpbhBREF8XZx46OxHt04BKtQwJKBtpJ1\/6bRS\\n\" +\n-        \"wvia3wGspFLW78P2Y5rFXzqptaqBD06Dcc4xBgvFLSocSKUzLc8BdNsixtPBQZNs\\n\" +\n-        \"l3X3TUNYoYW677E7EWO8NHUJg+2Qbpo11tkb0AyScSxOu2aHuPfYIchRZXnDdq20\\n\" +\n-        \"tL85OZz8ov7d2jVet\/w7FD4M5XfcogsNtpX4kaMsctyvQbDYRA==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-    static String clientPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDFwNzVfqQ58J0I\\n\" +\n-        \"FxUO1ng7XE3uKg0FfbQ4\/XEWRakF6PeAt9JZLl83R++tW2QfOAxEldKiyJOv5\/g\/\\n\" +\n-        \"UjrIO0j3u7noxtuK6Yf1aTwDaz16PI8cIfylvvMtKWDYoBVGQ4vphAwDhoMqmgG2\\n\" +\n-        \"oUHjw2E2tPbmNzE0znGlJymRCZH1WZ5q8JnB+6mqQgs9DeDL+l3XYvOxZI\/UdtuV\\n\" +\n-        \"11uWWfo8FRotVrm48ai6W0KPVcHU4KMwX8cM40EFgzpVCInLN0UWleGM9Bd0q+MW\\n\" +\n-        \"YqtPTuMfGU\/I60IHbs1WYVo3O6xx2wXjJlQYTr3kgr7ueKJ2dmPhu\/sVP2XNWerN\\n\" +\n-        \"lm+TdiONAgMBAAECggEBAK3PX8n+L1YFl9++efG6q55w+MX2C8\/htn\/IspbCz1a0\\n\" +\n-        \"dqWZ67YavfGWtqCGDTArUQ0PKj2NUdFwb48oNSY8hVvIkhR4hApKTAd1YRwYK8a+\\n\" +\n-        \"Z4JwlOERPidZkReVTF2fjN\/IAc8vcSYGiq78eS85UL6Gu+OIayVgth5Ul4I1CSa8\\n\" +\n-        \"+b0n\/RAI+yk2HxKlkq40Ofn0VWiGg1dLP2MPwwPNIk+w7nKUysfPmXCHfyBr+CZv\\n\" +\n-        \"1BQ0E\/tVau9wsyCjO6wxFsAKteBGdYa0ToEeT0D8MEeY9leKhAAxRneBVCz9AfHj\\n\" +\n-        \"wMGYucxwL0cDLi1IjZB5wlvm5JPqNCKrkHE2XE+UyTkCgYEA\/iNP11cqHNPItoXP\\n\" +\n-        \"D2wN4uX60kLNbzZ2dOF1ItybS8OcQvTxA1XulARiCVDIT\/+QDETbDQclfhgMOfhe\\n\" +\n-        \"ZCdMrL5RG0YTwg9OGbLcA+8gqd9e\/3gs9g8pWNdCfuGIwsnJbpO7iBoCBzHaHHJJ\\n\" +\n-        \"PbWDFS6jxvsqKIGPPwrhL9yp4VMCgYEAxzPKNLclBHorUs9rYRqiG9NTkLRNx4ll\\n\" +\n-        \"LUh0FBItOnG85BxkjQaIlzimNvXZEzZnpOtblugAszxFyq2KTEE9qeB\/V3w3FkXi\\n\" +\n-        \"PSpDG5sdRHnl5Qu4PuQ9WsmN7g193tOEdtWQ4NKxPqlC72ehqVDOY7In2quYLUiq\\n\" +\n-        \"C377esv0658CgYAJ0I1N0LT0pg0zV1mWy+KBZ8ZXBnNunxjWDLr8XK62r1hCkbkZ\\n\" +\n-        \"GuF63+x1VaRWypTilGotR6BgDUezmW7zyTzB0xvIxN0QeozWmzy5\/isxxEmj7h02\\n\" +\n-        \"Z4F+R9nukoE4nJhl59ivOenoIzm8LYG8m1zznXh\/v8VyCQbiNWZa9dettwKBgQDB\\n\" +\n-        \"Yz4DP2noltJIaqXMd5a5fMe7y89Wz8Qx2g0XDy5pdtHygr37S0R\/yrdS1AoR5Ndp\\n\" +\n-        \"\/DPGpSVI3FLFGQUSUqQSr6fwvt6b+OxShRzxR\/155P2TB3WvWNVXtiTb3q08Dgyj\\n\" +\n-        \"cWJdYS5BrwEUen8vaQt1LhgS6lOqYsjysCxkYm078QKBgEJuq4RzecgiGx8srWDb\\n\" +\n-        \"pQKpxrdEt82Y7OXLVj+W9vixcW\/xUYhDYGsfdUigZoOjo4nV8KVmMbuI48PIYwnw\\n\" +\n-        \"haLwWrBWlki4x9MRwuZUdewOYoo7hDZToZmIDescdiwv8CA\/Dg9kOX3YYLPW+cWl\\n\" +\n-        \"i1pnyMPaloBOhz3Y07sWXxCz\";\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n+    private final X509Certificate clientCertificate;\n+    private final KeyPair clientKeyPair;\n+\n+    static char[] passphrase = \"passphrase\".toCharArray();\n@@ -369,4 +69,0 @@\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n@@ -377,1 +73,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -448,1 +144,1 @@\n-    private static SSLContext getSSLContext(boolean isServer) throws Exception {\n+    private SSLContext getSSLContext(boolean isServer) throws Exception {\n@@ -457,7 +153,1 @@\n-        \/\/ import the trused cert\n-        ByteArrayInputStream is =\n-            new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n-        ks.setCertificateEntry(\"SunJSSE Test Serivce\", trusedCert);\n+        ks.setCertificateEntry(\"SunJSSE Test Serivce\", trustedCertificate);\n@@ -467,10 +157,2 @@\n-\n-        is = new ByteArrayInputStream(caSignerStr.getBytes());\n-        Certificate caSignerCert = cf.generateCertificate(is);\n-        is.close();\n-        chain[2] = caSignerCert;\n-\n-        is = new ByteArrayInputStream(certIssuerStr.getBytes());\n-        Certificate certIssuerCert = cf.generateCertificate(is);\n-        is.close();\n-        chain[1] = certIssuerCert;\n+        chain[2] = caSignerCertificate;\n+        chain[1] = certIssuerCertificate;\n@@ -480,3 +162,2 @@\n-            priKeySpec = new PKCS8EncodedKeySpec(\n-                            Base64.getMimeDecoder().decode(serverPrivateKey));\n-            is = new ByteArrayInputStream(serverCertStr.getBytes());\n+            chain[0] = serverCertificate;\n+            ks.setKeyEntry(\"End Entity\", serverKeyPair.getPrivate(), passphrase, chain);\n@@ -484,3 +165,2 @@\n-            priKeySpec = new PKCS8EncodedKeySpec(\n-                            Base64.getMimeDecoder().decode(clientPrivateKey));\n-            is = new ByteArrayInputStream(clientCertStr.getBytes());\n+            chain[0] = clientCertificate;\n+            ks.setKeyEntry(\"End Entity\", clientKeyPair.getPrivate(), passphrase, chain);\n@@ -488,7 +168,0 @@\n-        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-        RSAPrivateKey priKey = (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-        Certificate keyCert = cf.generateCertificate(is);\n-        is.close();\n-        chain[0] = keyCert;\n-\n-        ks.setKeyEntry(\"End Entity\", priKey, passphrase, chain);\n@@ -523,4 +196,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n@@ -531,3 +200,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -546,1 +212,1 @@\n-        new BasicConstraints();\n+        new BasicConstraints().run();\n@@ -549,2 +215,0 @@\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n@@ -557,73 +221,35 @@\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n-    }\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+\n+        KeyPair trustedKeyPair = kpg.generateKeyPair();\n+        trustedCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"C = US, O = Java, OU = SunJSSE Test Serivce\", trustedKeyPair)\n+            .build(null, trustedKeyPair.getPrivate(), \"SHA256withRSA\");\n+\n+        KeyPair caSignerKeyPair = kpg.generateKeyPair();\n+        caSignerCertificate = CertificateBuilder.newEndEntity(\n+            \"C = US, O = Java, OU = SunJSSE Test Serivce, CN = casigner\",\n+            caSignerKeyPair.getPublic(), trustedKeyPair.getPublic())\n+            .addKeyUsageExt(new boolean[]{false, false, false, false, false, true, true, false, false})\n+            .addBasicConstraintsExt(true, true, -1)\n+            .build(trustedCertificate, trustedKeyPair.getPrivate(), \"SHA256withRSA\");\n+\n+        KeyPair certIssuerKeyPair = kpg.generateKeyPair();\n+        certIssuerCertificate = CertificateBuilder.newEndEntity(\n+            \"C = US, O = Java, OU = SunJSSE Test Serivce, CN = certissuer\",\n+            certIssuerKeyPair.getPublic(), caSignerKeyPair.getPublic())\n+            .addKeyUsageExt(new boolean[]{false, false, false, false, false, true, true, false, false})\n+            .addBasicConstraintsExt(true, true, -1)\n+            .build(caSignerCertificate, caSignerKeyPair.getPrivate(), \"SHA256withRSA\");\n+\n+        serverKeyPair = kpg.generateKeyPair();\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C = US, O = Java, OU = SunJSSE Test Serivce, CN = localhost\",\n+            serverKeyPair.getPublic(), certIssuerKeyPair.getPublic())\n+            .build(certIssuerCertificate, certIssuerKeyPair.getPrivate(), \"SHA256withRSA\");\n+\n+        clientKeyPair = kpg.generateKeyPair();\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n+            \"C = US, O = Java, OU = SunJSSE Test Serivce, CN = InterOp Tester\",\n+            clientKeyPair.getPublic(), certIssuerKeyPair.getPublic())\n+            .build(certIssuerCertificate, certIssuerKeyPair.getPrivate(),\"SHA256withRSA\");\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/BasicConstraints.java","additions":65,"deletions":439,"binary":false,"changes":504,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -39,2 +45,2 @@\n-import java.net.*;\n-import java.util.*;\n+import java.security.*;\n+import java.security.cert.X509Certificate;\n@@ -43,3 +49,0 @@\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n@@ -47,1 +50,0 @@\n-import java.security.cert.CertificateFactory;\n@@ -49,3 +51,1 @@\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n+import sun.security.testlibrary.CertificateBuilder;\n@@ -54,354 +54,2 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 8 (0x8)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:04 2008 GMT\n- *         Not After : Aug 25 03:43:04 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption0\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\n- * PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\n- * nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\n- * JqCpf5uZGOo=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 9 (0x9)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:24 2008 GMT\n- *         Not After : Aug 25 03:43:24 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\n- * HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\n- * XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\n- * cl\/epUcHL7E=\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n+public class PKIXExtendedTM extends TMBase {\n+    private final X509Certificate trustedCertificate;\n@@ -409,0 +57,2 @@\n+    private final X509Certificate serverCertificate;\n+    private final KeyPair serverKeyPair;\n@@ -410,1 +60,2 @@\n-public class PKIXExtendedTM {\n+    private final X509Certificate clientCertificate;\n+    private final KeyPair clientKeyPair;\n@@ -412,221 +63,1 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\\n\" +\n-        \"PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\\n\" +\n-        \"nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\\n\" +\n-        \"JqCpf5uZGOo=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\\n\" +\n-        \"HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\\n\" +\n-        \"XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\\n\" +\n-        \"cl\/epUcHL7E=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n+    static char[] passphrase = \"passphrase\".toCharArray();\n@@ -637,1 +68,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -646,2 +77,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(serverCertificate, serverKeyPair, passphrase);\n@@ -694,2 +124,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-            clientModulus, clientPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(clientCertificate, clientKeyPair, passphrase);\n@@ -718,11 +147,2 @@\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n+    private SSLContext getSSLContext(X509Certificate certificate,\n+                            KeyPair keyPair, char[] passphrase) throws Exception {\n@@ -735,15 +155,1 @@\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n+        ks.setCertificateEntry(\"RSA Export Signer\", trustedCertificate);\n@@ -751,0 +157,1 @@\n+        if (certificate != null) {\n@@ -752,2 +159,2 @@\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n+            chain[0] = certificate;\n+            chain[1] = trustedCertificate;\n@@ -756,1 +163,1 @@\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n+            ks.setKeyEntry(\"Whatever\", keyPair.getPrivate(), passphrase, chain);\n@@ -773,1 +180,0 @@\n-\n@@ -776,1 +182,1 @@\n-        if (keyCertStr != null) {\n+        if (certificate != null) {\n@@ -788,4 +194,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n@@ -796,3 +198,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -851,1 +250,1 @@\n-            new PKIXExtendedTM();\n+            new PKIXExtendedTM().run();\n@@ -880,2 +279,0 @@\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n@@ -888,28 +285,21 @@\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(1024);\n+\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        trustedCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"C=US, ST=Some-State, L=Some-City, O=Some-Org\", caKeys)\n+            .build(null, caKeys.getPrivate(), \"MD5withRSA\");\n+\n+        serverKeyPair = kpg.generateKeyPair();\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\",\n+            serverKeyPair.getPublic(), caKeys.getPublic(),\n+            CertificateBuilder.createDNSSubjectAltNameExt(true, \"localhost\"))\n+            .build(trustedCertificate, caKeys.getPrivate(), \"MD5withRSA\");\n+\n+        clientKeyPair = kpg.generateKeyPair();\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n+            \"C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\",\n+            clientKeyPair.getPublic(), caKeys.getPublic(),\n+            CertificateBuilder.createDNSSubjectAltNameExt(true, \"localhost\"))\n+            .build(trustedCertificate, caKeys.getPrivate(), \"MD5withRSA\");\n@@ -917,46 +307,0 @@\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/PKIXExtendedTM.java","additions":50,"deletions":706,"binary":false,"changes":756,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -40,0 +46,2 @@\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n@@ -41,1 +49,0 @@\n-import java.security.KeyFactory;\n@@ -43,3 +50,2 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n+import java.security.cert.X509Certificate;\n+import sun.security.testlibrary.CertificateBuilder;\n@@ -47,112 +53,1 @@\n-import java.util.Base64;\n-\n-public class SelfIssuedCert {\n-\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificate information:\n-    \/\/ Issuer: C=US, O=Example, CN=localhost\n-    \/\/ Validity\n-    \/\/     Not Before: Dec 19 06:11:58 2019 GMT\n-    \/\/     Not After : Dec 16 06:11:58 2029 GMT\n-    \/\/ Subject: C=US, O=Example, CN=localhost\n-    \/\/ X509v3 Subject Key Identifier:\n-    \/\/     80:67:BA:EE:10:6A:E3:8E:3E:8E:F7:2D:90:B6:FD:F9:54:87:47:B1\n-    \/\/ X509v3 Authority Key Identifier:\n-    \/\/     keyid:80:67:BA:EE:10:6A:E3:8E:3E:8E:F7:2D:90:B6:FD:F9:54:87:47:B1\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDRzCCAi+gAwIBAgIUFjy13iZYWMGQcGF4svfix\/9q4dcwDQYJKoZIhvcNAQEL\\n\" +\n-        \"BQAwMzELMAkGA1UEBhMCVVMxEDAOBgNVBAoMB0V4YW1wbGUxEjAQBgNVBAMMCWxv\\n\" +\n-        \"Y2FsaG9zdDAeFw0xOTEyMTkwNjExNThaFw0yOTEyMTYwNjExNThaMDMxCzAJBgNV\\n\" +\n-        \"BAYTAlVTMRAwDgYDVQQKDAdFeGFtcGxlMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEi\\n\" +\n-        \"MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCy57BG8Dt+a4ZwWGM07f0z\/mzK\\n\" +\n-        \"T\/myXM4W\/\/3pkZxO0+4oyYM7G8ks9O64NPpA0CpTPCpfY6dI1Y\/kwBUdSoqx2D8t\\n\" +\n-        \"OEfHOat2\/AQvvWmEChFH4ZmmQFkLXBy0ueDq0TJbEd94+WhL3q9bA4uqvBsuuaTt\\n\" +\n-        \"bX\/GyOC52bpjg0TWY4BRdRVhveISZvqOCoqqJ1aPOnfxqySaZIC34q9gdUCUNxZD\\n\" +\n-        \"qjhuQF3Q0xYsNGZSUmnKj3\/0GS600BwQPqSHy287Vda88NvqJGFS4DKrw3HV3Wsk\\n\" +\n-        \"IHGN+tzB5THBy70XrE+XIdXJ\/I86q+FvNcTnJygn2nVNG4+vUhW8S3BzTiKPAgMB\\n\" +\n-        \"AAGjUzBRMB0GA1UdDgQWBBSAZ7ruEGrjjj6O9y2Qtv35VIdHsTAfBgNVHSMEGDAW\\n\" +\n-        \"gBSAZ7ruEGrjjj6O9y2Qtv35VIdHsTAPBgNVHRMBAf8EBTADAQH\/MA0GCSqGSIb3\\n\" +\n-        \"DQEBCwUAA4IBAQBX7icKmR\/iUPJhfnvNHiqsyTIcowY3JSAJAyJFrViKx2tdo+qq\\n\" +\n-        \"yA+EUsZlZsCwhiiG4\/SjFxgaAp0Z3BBmsO\/njWUEx3\/fSufTHcs0+fPNkFLru5Lr\\n\" +\n-        \"das4wW9Cv\/wO4rz2L6qK\/x7+r\/wkPccaqxTpdZvXqDid2va5Lv3F7jOW5ns13piZ\\n\" +\n-        \"z571RCpmhGSytYKFrAOGoI4ZBWXrkCiYQZ8KvhdBQP\/MNJM+e6ajtF27rK08XTao\\n\" +\n-        \"mW3FXfK6SjKQDGVwtNJ7M1qGutIpe0pNBGwvDpQuY2mk0Le46OXdaQ7AAzE+OnRJ\\n\" +\n-        \"1uRDV+p95MzhtolPgB3I8Rzyd23nfrx6uxMA\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Certificate information:\n-    \/\/ Issuer: C=US, O=Example, CN=localhost\n-    \/\/ Validity\n-    \/\/     Not Before: Dec 19 06:12:04 2019 GMT\n-    \/\/     Not After : Dec 16 06:12:04 2029 GMT\n-    \/\/ Subject: C=US, O=Example, CN=localhost\n-    \/\/ X509v3 Subject Key Identifier:\n-    \/\/     73:79:B7:73:F5:41:BB:3A:90:07:87:F2:CA:A5:B3:C3:45:E0:18:E0\n-    \/\/ X509v3 Authority Key Identifier:\n-    \/\/     keyid:80:67:BA:EE:10:6A:E3:8E:3E:8E:F7:2D:90:B6:FD:F9:54:87:47:B1\n-    static String targetCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDNjCCAh6gAwIBAgIURM+bID1TFw41Z\/Vz9tPp7HzpH7QwDQYJKoZIhvcNAQEL\\n\" +\n-        \"BQAwMzELMAkGA1UEBhMCVVMxEDAOBgNVBAoMB0V4YW1wbGUxEjAQBgNVBAMMCWxv\\n\" +\n-        \"Y2FsaG9zdDAeFw0xOTEyMTkwNjEyMDRaFw0yOTEyMTYwNjEyMDRaMDMxCzAJBgNV\\n\" +\n-        \"BAYTAlVTMRAwDgYDVQQKDAdFeGFtcGxlMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEi\\n\" +\n-        \"MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtxQXQdTlZNoASIE0TM+tgtUY3\\n\" +\n-        \"jnu0EymO+RGljOIFYhz2MxN0OQ5ABofxdIhbSqtoCO9HbsVWIPKOvbACoAJ4HjTV\\n\" +\n-        \"antLPlvCqbUoR96q6JWbnbQ6uZOsgiQTveQMhLJ+k9BehzcwKvwCFGNY3qW0xwUv\\n\" +\n-        \"mXKWRveRAbTOjZ3i1YzcmkLOwYaeyt2Al3jPCbZySUlB94NRRAQZ4RzqfuetAvEd\\n\" +\n-        \"LFW1fXNwL5bHE7JbJkWInciLOqHf5GuyXDjKE8Oz2\/Ywv\/5C2K2LtWa1g5jIEQtB\\n\" +\n-        \"cjRa9Cjwcrs8peisC5OmL5cbJweNKr6H0mrVR8KFdFHUmM5X4uSiOMVFr\/rTAgMB\\n\" +\n-        \"AAGjQjBAMB0GA1UdDgQWBBRzebdz9UG7OpAHh\/LKpbPDReAY4DAfBgNVHSMEGDAW\\n\" +\n-        \"gBSAZ7ruEGrjjj6O9y2Qtv35VIdHsTANBgkqhkiG9w0BAQsFAAOCAQEAZ\/Ijlics\\n\" +\n-        \"YGCw9k4he3ZkNfqCPFTJKgkbTuM1Cy+aCXzhhdGKCZ2R0Xyi3ma3snwPtqHy5Aru\\n\" +\n-        \"WwoGssxL6S8+Pb\/BPZ9OelU7lEmS69AeBKOHHIEs+wEi2oco8J+WU1O4zekP8Clv\\n\" +\n-        \"hHuwPhoL6g0aAUXAISaqYpHYC15oXGOJcC539kgv4VrL9UZJekxtDERUXKyzW+UC\\n\" +\n-        \"ZBPalts1zM5wD43+9PuoeLiPdvMg1kH4obJYnj23zej41iwqPOWhgm0NuGoJVjSg\\n\" +\n-        \"4YqtS1ePD\/I2oRV0bu4P7Q72cMYdcFHfPDoe3vCcEMxUTgGBaoPHw9GwEeRoWn\/L\\n\" +\n-        \"whBwzXBsD0aZqQ==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8\n-    static String targetPrivateKey =\n-        \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCtxQXQdTlZNoAS\\n\" +\n-        \"IE0TM+tgtUY3jnu0EymO+RGljOIFYhz2MxN0OQ5ABofxdIhbSqtoCO9HbsVWIPKO\\n\" +\n-        \"vbACoAJ4HjTVantLPlvCqbUoR96q6JWbnbQ6uZOsgiQTveQMhLJ+k9BehzcwKvwC\\n\" +\n-        \"FGNY3qW0xwUvmXKWRveRAbTOjZ3i1YzcmkLOwYaeyt2Al3jPCbZySUlB94NRRAQZ\\n\" +\n-        \"4RzqfuetAvEdLFW1fXNwL5bHE7JbJkWInciLOqHf5GuyXDjKE8Oz2\/Ywv\/5C2K2L\\n\" +\n-        \"tWa1g5jIEQtBcjRa9Cjwcrs8peisC5OmL5cbJweNKr6H0mrVR8KFdFHUmM5X4uSi\\n\" +\n-        \"OMVFr\/rTAgMBAAECggEAIFDvz+C9FZZJIxXWv6d8MrQDpvlckBSwOeKgIYWd0xp4\\n\" +\n-        \"AGFnUMn7mHSee40Mfs3YKrTeqw4yrN3bvigQv6w6SVR0xuvSmh+yuPUOt7sF8grn\\n\" +\n-        \"J9WgWvuANyjMxM8fxiQ3fcrHiYzj+pVD4K8h+rkNYB1THZMP+FqiV9lVYsR7hF+b\\n\" +\n-        \"1D967LB4oLmAaMExaSo23NZLGVTxZSxxGw6Qidz7CyKvIdVXnNIEzMnuXX60xiJm\\n\" +\n-        \"PnLyZUKDmlw5kI4KaDG+6OIOpDu2FGCFVLZmycs4Ri6h6xJp3jhKAVjCcZJUty80\\n\" +\n-        \"+rBfAx4BHfDrcgyEiTN7NA8gnnCzUc6uX6I\/tm62gQKBgQDniWuFjSzhaAhj04+N\\n\" +\n-        \"vG8sQjfVmTbON6SfFfujR\/Z57qamJ8zcS\/REHfc5swdn9uUTJ2xoRRNCwKZyuMXo\\n\" +\n-        \"4B2\/O9+sKfEPYGyjAyGo6E4rGLRNcw6Tb8hx\/EFvfTOunwapynOJDDs2Z6FzWNIx\\n\" +\n-        \"x4+FHs9hStwL\/OTdXF\/OY2vGsQKBgQDAIR93LrCC6OpGi89\/UDIwpT9pFLa8cvpr\\n\" +\n-        \"1MUNlHhcxQusPUgWT4pTucF\/SQpPf77g3YNb5pt3DG0GELM8YAB0Uv9oZIWfJoFY\\n\" +\n-        \"ebYy6tMVxhHhT0OuryMj48BMHnQG78hq8+c0NnjK7jXV6t0iKjN8ANnFqAovm+U9\\n\" +\n-        \"VMobar5CwwKBgFCKN9GsCxmZg5meBQiLrKxbmGp\/slXHe0cvcWoZ5T4C6wtPOu7C\\n\" +\n-        \"qQRs3AvBH+llM8gW5ZnbtVh6BSxQ498e3pof7K1JpaXwp7mIpFPKAy7wl\/9872wP\\n\" +\n-        \"7UzhL63lgm3SuZGkb84TaCGDqOCj2\/Ie9eibkA3K6YJuBPqPYHA9m0bxAoGARdcE\\n\" +\n-        \"iB9pvHyMRM6nw8DULciz7y+\/aWtmSnJSmyggRKDAKIEyRiHtx5eblfhoDhQCv9zl\\n\" +\n-        \"1i9SzgivTOgfL1A6eg59l2YLCJpHpHDB4WppBt40O7HDialSXcZ5bXIYfTkGopI8\\n\" +\n-        \"tkciy6mh2jwA3F14z5fDkc0OvtWtlAjRWvwHY18CgYAPONVJtVFiMogBU5Iyv1LB\\n\" +\n-        \"oygn6AFvTI8Pjy2g5GsJBbRnKFjAJrP7HpgUxLdW+Mlnv3Xgtr\/L6ep+VKoXTEwv\\n\" +\n-        \"Y83gliDwG2YRjaUbkMfQqcm20\/Pi4XPwhy5pwTVsXVBfzKzqJjKAFk97BD9xCUIH\\n\" +\n-        \"FOGe+jaEsWvaEQrH5y17FQ==\";\n+public class SelfIssuedCert extends TMBase {\n@@ -162,4 +57,3 @@\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n+    private final X509Certificate trustedCertificate;\n+    private final X509Certificate targetCertificate;\n+    private final KeyPair targetKeyPair;\n@@ -170,1 +64,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -179,2 +73,2 @@\n-        SSLContext context = getSSLContext(null, targetCertStr,\n-                                            targetPrivateKey);\n+        SSLContext context = getSSLContext(null, targetCertificate,\n+                                            targetKeyPair);\n@@ -203,1 +97,0 @@\n-\n@@ -220,1 +113,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, null, null);\n+        SSLContext context = getSSLContext(trustedCertificate, null, null);\n@@ -237,5 +130,2 @@\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, String keySpecStr) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+    private static SSLContext getSSLContext(X509Certificate trustedCert,\n+            X509Certificate targetCert, KeyPair targetKeys) throws Exception {\n@@ -248,8 +138,2 @@\n-        Certificate trusedCert = null;\n-        ByteArrayInputStream is = null;\n-        if (trusedCertStr != null) {\n-            is = new ByteArrayInputStream(trusedCertStr.getBytes());\n-            trusedCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n+        if (trustedCert != null) {\n+            ks.setCertificateEntry(\"RSA Export Signer\", trustedCert);\n@@ -258,13 +142,1 @@\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                                Base64.getMimeDecoder().decode(keySpecStr));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n+        if (targetCert != null) {\n@@ -272,1 +144,1 @@\n-            if (trusedCert != null) {\n+            if (trustedCert != null) {\n@@ -274,2 +146,2 @@\n-                chain[0] = keyCert;\n-                chain[1] = trusedCert;\n+                chain[0] = targetCert;\n+                chain[1] = trustedCert;\n@@ -278,1 +150,1 @@\n-                chain[0] = keyCert;\n+                chain[0] = targetCert;\n@@ -282,1 +154,1 @@\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n+            ks.setKeyEntry(\"Whatever\", targetKeys.getPrivate(), passphrase, chain);\n@@ -290,1 +162,1 @@\n-        if (keyCertStr != null && !keyCertStr.isEmpty()) {\n+        if (targetCert != null) {\n@@ -309,5 +181,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n@@ -317,3 +184,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -332,1 +196,1 @@\n-        new SelfIssuedCert();\n+        new SelfIssuedCert().run();\n@@ -335,2 +199,0 @@\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n@@ -343,15 +205,20 @@\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        trustedCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"C = US, O = Example, CN = localhost\", caKeys)\n+            .build(null, caKeys.getPrivate(), \"SHA256withRSA\");\n+\n+        targetKeyPair = kpg.generateKeyPair();\n+        targetCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C = US, O = Example, CN = localhost\",\n+            targetKeyPair.getPublic(), caKeys.getPublic())\n+            .build(trustedCertificate, caKeys.getPrivate(), \"SHA256withRSA\");\n+\n+        if (debug) {\n+            System.err.println(\"TRUSTED CERTIFICATE\");\n+            CertificateBuilder.printCertificate(trustedCertificate, System.err);\n+\n+            System.err.println(\"TARGET CERTIFICATE\");\n+            CertificateBuilder.printCertificate(targetCertificate, System.err);\n@@ -359,12 +226,0 @@\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n@@ -372,46 +227,0 @@\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/SelfIssuedCert.java","additions":51,"deletions":242,"binary":false,"changes":293,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,6 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -36,2 +42,2 @@\n-import java.net.*;\n-import java.util.*;\n+import java.security.*;\n+import java.security.cert.X509Certificate;\n@@ -40,3 +46,0 @@\n-import java.security.Security;\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n@@ -44,4 +47,1 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.math.BigInteger;\n+import sun.security.testlibrary.CertificateBuilder;\n@@ -50,574 +50,6 @@\n-\/*\n- * Certificates and key used in the test.\n- *\n- * TLS server certificate:\n- * server private key:\n- * -----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,D9AE407F6D0E389A\n- *\n- * WPrA7TFol\/cQCcp9oHnXWNpYlvRbbIcQj0m+RKT2Iuzfus+DHt3Zadf8nJpKfX2e\n- * h2rnhlzCN9M7djRDooZKDOPCsdBn51Au7HlZF3S3Opgo7D8XFM1a8t1Je4ke14oI\n- * nw6QKYsBblRziPnP2PZ0zvX24nOv7bbY8beynlJHGs00VWSFdoH2DS0aE1p6D+3n\n- * ptJuJ75dVfZFK4X7162APlNXevX8D6PEQpSiRw1rjjGGcnvQ4HdWk3BxDVDcCNJb\n- * Y1aGNRxsjTDvPi3R9Qx2M+W03QzEPx4SR3ZHVskeSJHaetM0TM\/w\/45Paq4GokXP\n- * ZeTnbEx1xmjkA7h+t4doLL4watx5F6yLsJzu8xB3lt\/1EtmkYtLz1t7X4BetPAXz\n- * zS69X\/VwhKfsOI3qXBWuL2oHPyhDmT1gcaUQwEPSV6ogHEEQEDXdiUS8heNK13KF\n- * TCQYFkETvV2BLxUhV1hypPzRQ6tUpJiAbD5KmoK2lD9slshG2QtvKQq0\/bgkDY5J\n- * LhDHV2dtcZ3kDPkkZXpbcJQvoeH3d09C5sIsuTFo2zgNR6oETHUc5TzP6FY2YYRa\n- * QcK5HcmtsRRiXFm01ac+aMejJUIujjFt84SiKWT\/73vC8AmY4tYcJBLjCg4XIxSH\n- * fdDFLL1YZENNO5ivlp8mdiHqcawx+36L7DrEZQ8RZt6cqST5t\/+XTdM74s6k81GT\n- * pNsa82P2K2zmIUZ\/DL2mKjW1vfRByw1NQFEBkN3vdyZxYfM\/JyUzX4hbjXBEkh9Q\n- * QYrcwLKLjis2QzSvK04B3bvRzRb+4ocWiso8ZPAXAIxZFBWDpTMM2A==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICXAIBAAKBgQClrFscN6LdmYktsnm4j9VIpecchBeNaZzGrG358h0fORna03Ie\n- * buxEzHCk3LoAMPagTz1UemFqzFfQCn+VKBg\/mtmU8hvIJIh+\/p0PPftXUwizIDPU\n- * PxdHFNHN6gjYDnVOr77M0uyvqXpJ38LZrLgkQJCmA1Yq0DAFQCxPq9l0iQIDAQAB\n- * AoGAbqcbg1E1mkR99uOJoNeQYKFOJyGiiXTMnXV1TseC4+PDfQBU7Dax35GcesBi\n- * CtapIpFKKS5D+ozY6b7ZT8ojxuQ\/uHLPAvz0WDR3ds4iRF8tyu71Q1ZHcQsJa17y\n- * yO7UbkSSKn\/Mp9Rb+\/dKqftUGNXVFLqgHBOzN2s3We3bbbECQQDYBPKOg3hkaGHo\n- * OhpHKqtQ6EVkldihG\/3i4WejRonelXN+HRh1KrB2HBx0M8D\/qAzP1i3rNSlSHer4\n- * 59YRTJnHAkEAxFX\/sVYSn07BHv9Zhn6XXct\/Cj43z\/tKNbzlNbcxqQwQerw3IH51\n- * 8UH2YOA+GD3lXbKp+MytoFLWv8zg4YT\/LwJAfqan75Z1R6lLffRS49bIiq8jwE16\n- * rTrUJ+kv8jKxMqc9B3vXkxpsS1M\/+4E8bqgAmvpgAb8xcsvHsBd9ErdukQJBAKs2\n- * j67W75BrPjBI34pQ1LEfp56IGWXOrq1kF8IbCjxv3+MYRT6Z6UJFkpRymNPNDjsC\n- * dgUYgITiGJHUGXuw3lMCQHEHqo9ZtXz92yFT+VhsNc29B8m\/sqUJdtCcMd\/jGpAF\n- * u6GHufjqIZBpQsk63wbwESAPZZ+kk1O1kS5GIRLX608=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *     d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *     1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *     ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *     7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *     9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *     d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *     7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *     30:05:40:2c:4f:ab:d9:74:89\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     6e:a7:1b:83:51:35:9a:44:7d:f6:e3:89:a0:d7:90:\n- *     60:a1:4e:27:21:a2:89:74:cc:9d:75:75:4e:c7:82:\n- *     e3:e3:c3:7d:00:54:ec:36:b1:df:91:9c:7a:c0:62:\n- *     0a:d6:a9:22:91:4a:29:2e:43:fa:8c:d8:e9:be:d9:\n- *     4f:ca:23:c6:e4:3f:b8:72:cf:02:fc:f4:58:34:77:\n- *     76:ce:22:44:5f:2d:ca:ee:f5:43:56:47:71:0b:09:\n- *     6b:5e:f2:c8:ee:d4:6e:44:92:2a:7f:cc:a7:d4:5b:\n- *     fb:f7:4a:a9:fb:54:18:d5:d5:14:ba:a0:1c:13:b3:\n- *     37:6b:37:59:ed:db:6d:b1\n- * prime1:\n- *     00:d8:04:f2:8e:83:78:64:68:61:e8:3a:1a:47:2a:\n- *     ab:50:e8:45:64:95:d8:a1:1b:fd:e2:e1:67:a3:46:\n- *     89:de:95:73:7e:1d:18:75:2a:b0:76:1c:1c:74:33:\n- *     c0:ff:a8:0c:cf:d6:2d:eb:35:29:52:1d:ea:f8:e7:\n- *     d6:11:4c:99:c7\n- * prime2:\n- *     00:c4:55:ff:b1:56:12:9f:4e:c1:1e:ff:59:86:7e:\n- *     97:5d:cb:7f:0a:3e:37:cf:fb:4a:35:bc:e5:35:b7:\n- *     31:a9:0c:10:7a:bc:37:20:7e:75:f1:41:f6:60:e0:\n- *     3e:18:3d:e5:5d:b2:a9:f8:cc:ad:a0:52:d6:bf:cc:\n- *     e0:e1:84:ff:2f\n- * exponent1:\n- *     7e:a6:a7:ef:96:75:47:a9:4b:7d:f4:52:e3:d6:c8:\n- *     8a:af:23:c0:4d:7a:ad:3a:d4:27:e9:2f:f2:32:b1:\n- *     32:a7:3d:07:7b:d7:93:1a:6c:4b:53:3f:fb:81:3c:\n- *     6e:a8:00:9a:fa:60:01:bf:31:72:cb:c7:b0:17:7d:\n- *     12:b7:6e:91\n- * exponent2:\n- *     00:ab:36:8f:ae:d6:ef:90:6b:3e:30:48:df:8a:50:\n- *     d4:b1:1f:a7:9e:88:19:65:ce:ae:ad:64:17:c2:1b:\n- *     0a:3c:6f:df:e3:18:45:3e:99:e9:42:45:92:94:72:\n- *     98:d3:cd:0e:3b:02:76:05:18:80:84:e2:18:91:d4:\n- *     19:7b:b0:de:53\n- * coefficient:\n- *     71:07:aa:8f:59:b5:7c:fd:db:21:53:f9:58:6c:35:\n- *     cd:bd:07:c9:bf:b2:a5:09:76:d0:9c:31:df:e3:1a:\n- *     90:05:bb:a1:87:b9:f8:ea:21:90:69:42:c9:3a:df:\n- *     06:f0:11:20:0f:65:9f:a4:93:53:b5:91:2e:46:21:\n- *     12:d7:eb:4f\n- *\n- *\n- * server certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 8 (0x8)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:04 2008 GMT\n- *         Not After : Aug 25 03:43:04 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:a5:ac:5b:1c:37:a2:dd:99:89:2d:b2:79:b8:8f:\n- *                 d5:48:a5:e7:1c:84:17:8d:69:9c:c6:ac:6d:f9:f2:\n- *                 1d:1f:39:19:da:d3:72:1e:6e:ec:44:cc:70:a4:dc:\n- *                 ba:00:30:f6:a0:4f:3d:54:7a:61:6a:cc:57:d0:0a:\n- *                 7f:95:28:18:3f:9a:d9:94:f2:1b:c8:24:88:7e:fe:\n- *                 9d:0f:3d:fb:57:53:08:b3:20:33:d4:3f:17:47:14:\n- *                 d1:cd:ea:08:d8:0e:75:4e:af:be:cc:d2:ec:af:a9:\n- *                 7a:49:df:c2:d9:ac:b8:24:40:90:a6:03:56:2a:d0:\n- *                 30:05:40:2c:4f:ab:d9:74:89\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             ED:6E:DB:F4:B5:56:C8:FB:1A:06:61:3F:0F:08:BB:A6:04:D8:16:54\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption0\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\n- * ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\n- * YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\n- * 7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\n- * PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\n- * nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\n- * JqCpf5uZGOo=\n- * -----END CERTIFICATE-----\n- *\n- *\n- * TLS client certificate:\n- * client private key:\n- * ----BEGIN RSA PRIVATE KEY-----\n- * Proc-Type: 4,ENCRYPTED\n- * DEK-Info: DES-EDE3-CBC,FA2A435CD35A9390\n- *\n- * Z+Y2uaETbsUWIyJUyVu1UV2G4rgFYJyACZT6Tp1KjRtxflSh2kXkJ9MpuXMXA0V4\n- * Yy3fDzPqCL9NJmQAYRlAx\/W\/+j4F5EyMWDIx8fUxzONRZyoiwF7jLm+KscAfv6Pf\n- * q7ItWOdj3z7IYrwlB8YIGd3F2cDKT3S+lYRk7rKb\/qT7itbuHnY4Ardh3yl+MZak\n- * jBp+ELUlRsUqSr1V0LoM+0rCCykarpyfhpxEcqsrl0v9Cyi5uhU50\/oKv5zql3SH\n- * l2ImgDjp3batAs8+Bd4NF2aqi0a7Hy44JUHxRm4caZryU\/i\/D9N1MbuM6882HLat\n- * 5N0G+NaIUfywa8mjwq2D5aiit18HqKA6XeRRYeJ5Dvu9DCO4GeFSwcUFIBMI0L46\n- * 7s114+oDodg57pMgITi+04vmUxvqlN9aiyd7f5Fgd7PeHGeOdbMz1NaJLJaPI9++\n- * NakK8eK9iwT\/Gdq0Uap5\/CHW7vCT5PO+h3HY0STH0lWStXhdWnFO04zTdywsbSp+\n- * DLpHeFT66shfeUlxR0PsCbG9vPRt\/QmGLeYQZITppWo\/ylSq4j+pRIuXvuWHdBRN\n- * rTZ8QF4Y7AxQUXVz1j1++s6ZMHTzaK2i9HrhmDs1MbJl+QwWre3Xpv3LvTVz3k5U\n- * wX8kuY1m3STt71QCaRWENq5sRaMImLxZbxc\/ivFl9RAzUqo4NCxLod\/QgA4iLqtO\n- * ztnlpzwlC\/F8HbQ1oqYWwnZAPhzU\/cULtstl+Yrws2c2atO323LbPXZqbASySgig\n- * sNpFXQMObdfP6LN23bY+1SvtK7V4NUTNhpdIc6INQAQ=\n- * -----END RSA PRIVATE KEY-----\n- *\n- * -----BEGIN RSA PRIVATE KEY-----\n- * MIICWwIBAAKBgQC78EA2rCZUTvSjWgAvaSFvuXo6k+yi9uGOx2PYLxIwmS6w8o\/4\n- * Jy0keCiE9wG\/jUR53TvSVfPOPLJbIX3v\/TNKsaP\/xsibuQ98QTWX+ds6BWAFFa9Z\n- * F5KjEK0WHOQHU6+odqJWKpLT+SjgeM9eH0irXBnd4WdDunWN9YKsQ5JEGwIDAQAB\n- * AoGAEbdqNj0wN85hnWyEi\/ObJU8UyKTdL9eaF72QGfcF\/fLSxfd3vurihIeXOkGW\n- * tpn4lIxYcVGM9CognhqgJpl11jFTQzn1KqZ+NEJRKkCHA4hDabKJbSC9fXHvRwrf\n- * BsFpZqgiNxp3HseUTiwnaUVeyPgMt\/jAj5nB5Sib+UyUxrECQQDnNQBiF2aifEg6\n- * zbJOOC7he5CHAdkFxSxWVFVHL6EfXfqdLVkUohMbgZv+XxyIeU2biOExSg49Kds3\n- * FOKgTau1AkEA0Bd1haj6QuCo8I0AXm2WO+MMTZMTvtHD\/bGjKNM+fT4I8rKYnQRX\n- * 1acHdqS9Xx2rNJqZgkMmpESIdPR2fc4yjwJALFeM6EMmqvj8\/VIf5UJ\/Mz14fXwM\n- * PEARfckUxd9LnnFutCBTWlKvKXJVEZb6KO5ixPaegc57Jp3Vbh3yTN44lQJADD\/1\n- * SSMDaIB1MYP7a5Oj7m6VQNPRq8AJe5vDcRnOae0G9dKRrVyeFxO4GsHj6\/+BHp2j\n- * P8nYMn9eURQ7DXjf\/QJAAQzMlWnKGSO8pyTDtnQx3hRMoUkOEhmNq4bQhLkYqtnY\n- * FcqpUQ2qMjW+NiNWk5HnTrMS3L9EdJobMUzaNZLy4w==\n- * -----END RSA PRIVATE KEY-----\n- *\n- * Private-Key: (1024 bit)\n- * modulus:\n- *     00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *     21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *     12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *     01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *     7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *     35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *     ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *     28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *     75:8d:f5:82:ac:43:92:44:1b\n- * publicExponent: 65537 (0x10001)\n- * privateExponent:\n- *     11:b7:6a:36:3d:30:37:ce:61:9d:6c:84:8b:f3:9b:\n- *     25:4f:14:c8:a4:dd:2f:d7:9a:17:bd:90:19:f7:05:\n- *     fd:f2:d2:c5:f7:77:be:ea:e2:84:87:97:3a:41:96:\n- *     b6:99:f8:94:8c:58:71:51:8c:f4:2a:20:9e:1a:a0:\n- *     26:99:75:d6:31:53:43:39:f5:2a:a6:7e:34:42:51:\n- *     2a:40:87:03:88:43:69:b2:89:6d:20:bd:7d:71:ef:\n- *     47:0a:df:06:c1:69:66:a8:22:37:1a:77:1e:c7:94:\n- *     4e:2c:27:69:45:5e:c8:f8:0c:b7:f8:c0:8f:99:c1:\n- *     e5:28:9b:f9:4c:94:c6:b1\n- * prime1:\n- *     00:e7:35:00:62:17:66:a2:7c:48:3a:cd:b2:4e:38:\n- *     2e:e1:7b:90:87:01:d9:05:c5:2c:56:54:55:47:2f:\n- *     a1:1f:5d:fa:9d:2d:59:14:a2:13:1b:81:9b:fe:5f:\n- *     1c:88:79:4d:9b:88:e1:31:4a:0e:3d:29:db:37:14:\n- *     e2:a0:4d:ab:b5\n- * prime2:\n- *     00:d0:17:75:85:a8:fa:42:e0:a8:f0:8d:00:5e:6d:\n- *     96:3b:e3:0c:4d:93:13:be:d1:c3:fd:b1:a3:28:d3:\n- *     3e:7d:3e:08:f2:b2:98:9d:04:57:d5:a7:07:76:a4:\n- *     bd:5f:1d:ab:34:9a:99:82:43:26:a4:44:88:74:f4:\n- *     76:7d:ce:32:8f\n- * exponent1:\n- *     2c:57:8c:e8:43:26:aa:f8:fc:fd:52:1f:e5:42:7f:\n- *     33:3d:78:7d:7c:0c:3c:40:11:7d:c9:14:c5:df:4b:\n- *     9e:71:6e:b4:20:53:5a:52:af:29:72:55:11:96:fa:\n- *     28:ee:62:c4:f6:9e:81:ce:7b:26:9d:d5:6e:1d:f2:\n- *     4c:de:38:95\n- * exponent2:\n- *     0c:3f:f5:49:23:03:68:80:75:31:83:fb:6b:93:a3:\n- *     ee:6e:95:40:d3:d1:ab:c0:09:7b:9b:c3:71:19:ce:\n- *     69:ed:06:f5:d2:91:ad:5c:9e:17:13:b8:1a:c1:e3:\n- *     eb:ff:81:1e:9d:a3:3f:c9:d8:32:7f:5e:51:14:3b:\n- *     0d:78:df:fd\n- * coefficient:\n- *     01:0c:cc:95:69:ca:19:23:bc:a7:24:c3:b6:74:31:\n- *     de:14:4c:a1:49:0e:12:19:8d:ab:86:d0:84:b9:18:\n- *     aa:d9:d8:15:ca:a9:51:0d:aa:32:35:be:36:23:56:\n- *     93:91:e7:4e:b3:12:dc:bf:44:74:9a:1b:31:4c:da:\n- *     35:92:f2:e3\n- *\n- * client certificate:\n- * Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 9 (0x9)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 03:43:24 2008 GMT\n- *         Not After : Aug 25 03:43:24 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:bb:f0:40:36:ac:26:54:4e:f4:a3:5a:00:2f:69:\n- *                 21:6f:b9:7a:3a:93:ec:a2:f6:e1:8e:c7:63:d8:2f:\n- *                 12:30:99:2e:b0:f2:8f:f8:27:2d:24:78:28:84:f7:\n- *                 01:bf:8d:44:79:dd:3b:d2:55:f3:ce:3c:b2:5b:21:\n- *                 7d:ef:fd:33:4a:b1:a3:ff:c6:c8:9b:b9:0f:7c:41:\n- *                 35:97:f9:db:3a:05:60:05:15:af:59:17:92:a3:10:\n- *                 ad:16:1c:e4:07:53:af:a8:76:a2:56:2a:92:d3:f9:\n- *                 28:e0:78:cf:5e:1f:48:ab:5c:19:dd:e1:67:43:ba:\n- *                 75:8d:f5:82:ac:43:92:44:1b\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Basic Constraints:\n- *             CA:FALSE\n- *         X509v3 Key Usage:\n- *             Digital Signature, Non Repudiation, Key Encipherment\n- *         X509v3 Subject Key Identifier:\n- *             CD:BB:C8:85:AA:91:BD:FD:1D:BE:CD:67:7C:FF:B3:E9:4C:A8:22:E6\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *\n- *         X509v3 Subject Alternative Name: critical\n- *             DNS:localhost\n- * Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\n- * VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\n- * JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\n- * 8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\n- * ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\n- * CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\n- * HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\n- * bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\n- * HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\n- * XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\n- * cl\/epUcHL7E=\n- * -----END CERTIFICATE-----\n- *\n- *\n- *\n- * Trusted CA certificate:\n- * Certificate:\n- *   Data:\n- *     Version: 3 (0x2)\n- *     Serial Number: 0 (0x0)\n- *     Signature Algorithm: md5WithRSAEncryption\n- *     Issuer: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Validity\n- *         Not Before: Dec  8 02:43:36 2008 GMT\n- *         Not After : Aug 25 02:43:36 2028 GMT\n- *     Subject: C=US, ST=Some-State, L=Some-City, O=Some-Org\n- *     Subject Public Key Info:\n- *         Public Key Algorithm: rsaEncryption\n- *         RSA Public Key: (1024 bit)\n- *             Modulus (1024 bit):\n- *                 00:cb:c4:38:20:07:be:88:a7:93:b0:a1:43:51:2d:\n- *                 d7:8e:85:af:54:dd:ad:a2:7b:23:5b:cf:99:13:53:\n- *                 99:45:7d:ee:6d:ba:2d:bf:e3:ad:6e:3d:9f:1a:f9:\n- *                 03:97:e0:17:55:ae:11:26:57:de:01:29:8e:05:3f:\n- *                 21:f7:e7:36:e8:2e:37:d7:48:ac:53:d6:60:0e:c7:\n- *                 50:6d:f6:c5:85:f7:8b:a6:c5:91:35:72:3c:94:ee:\n- *                 f1:17:f0:71:e3:ec:1b:ce:ca:4e:40:42:b0:6d:ee:\n- *                 6a:0e:d6:e5:ad:3c:0f:c9:ba:82:4f:78:f8:89:97:\n- *                 89:2a:95:12:4c:d8:09:2a:e9\n- *             Exponent: 65537 (0x10001)\n- *     X509v3 extensions:\n- *         X509v3 Subject Key Identifier:\n- *             FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *         X509v3 Authority Key Identifier:\n- *             keyid:FA:B9:51:BF:4C:E7:D9:86:98:33:F9:E7:CB:1E:F1:33:49:F7:A8:14\n- *             DirName:\/C=US\/ST=Some-State\/L=Some-City\/O=Some-Org\n- *             serial:00\n- *\n- *         X509v3 Basic Constraints:\n- *             CA:TRUE\n- *  Signature Algorithm: md5WithRSAEncryption\n- *\n- * -----BEGIN CERTIFICATE-----\n- * MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\n- * MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\n- * EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\n- * BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\n- * dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n- * gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\n- * 4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\n- * 7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\n- * A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\n- * hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\n- * U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\n- * DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\n- * ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\n- * LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\n- * 6Mvf0r1PNTY2hwTJLJmKtg==\n- * -----END CERTIFICATE---\n- *\/\n-\n-\n-public class SunX509ExtendedTM {\n-\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = false;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String trusedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICrDCCAhWgAwIBAgIBADANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMjQzMzZaFw0yODA4MjUwMjQzMzZaMEkxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\" +\n-        \"gQDLxDggB76Ip5OwoUNRLdeOha9U3a2ieyNbz5kTU5lFfe5tui2\/461uPZ8a+QOX\\n\" +\n-        \"4BdVrhEmV94BKY4FPyH35zboLjfXSKxT1mAOx1Bt9sWF94umxZE1cjyU7vEX8HHj\\n\" +\n-        \"7BvOyk5AQrBt7moO1uWtPA\/JuoJPePiJl4kqlRJM2Akq6QIDAQABo4GjMIGgMB0G\\n\" +\n-        \"A1UdDgQWBBT6uVG\/TOfZhpgz+efLHvEzSfeoFDBxBgNVHSMEajBogBT6uVG\/TOfZ\\n\" +\n-        \"hpgz+efLHvEzSfeoFKFNpEswSTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUt\\n\" +\n-        \"U3RhdGUxEjAQBgNVBAcTCVNvbWUtQ2l0eTERMA8GA1UEChMIU29tZS1PcmeCAQAw\\n\" +\n-        \"DAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0BAQQFAAOBgQBcIm534U123Hz+rtyYO5uA\\n\" +\n-        \"ofd81G6FnTfEAV8Kw9fGyyEbQZclBv34A9JsFKeMvU4OFIaixD7nLZ\/NZ+IWbhmZ\\n\" +\n-        \"LovmJXyCkOufea73pNiZ+f\/4\/ScZaIlM\/PRycQSqbFNd4j9Wott+08qxHPLpsf3P\\n\" +\n-        \"6Mvf0r1PNTY2hwTJLJmKtg==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String serverCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCDANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMDRaFw0yODA4MjUwMzQzMDRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtU2VydmVyMRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKWsWxw3\\n\" +\n-        \"ot2ZiS2yebiP1Uil5xyEF41pnMasbfnyHR85GdrTch5u7ETMcKTcugAw9qBPPVR6\\n\" +\n-        \"YWrMV9AKf5UoGD+a2ZTyG8gkiH7+nQ89+1dTCLMgM9Q\/F0cU0c3qCNgOdU6vvszS\\n\" +\n-        \"7K+peknfwtmsuCRAkKYDVirQMAVALE+r2XSJAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTtbtv0tVbI+xoGYT8PCLumBNgWVDAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAoqVTciHtcvsUj+YaTct8tUh3aTCsKsac\\n\" +\n-        \"PHhfQ+ObjiXSgxsKYTX7ym\/wk\/wvlbUcbqLKxsu7qrcJitH+H9heV1hEHEu65Uoi\\n\" +\n-        \"nRugFruyOrwvAylV8Cm2af7ddilmYJ+sdJA6N2M3xJRxR0G2LFHEXDNEjYReyexn\\n\" +\n-        \"JqCpf5uZGOo=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String clientCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICpDCCAg2gAwIBAgIBCTANBgkqhkiG9w0BAQQFADBJMQswCQYDVQQGEwJVUzET\\n\" +\n-        \"MBEGA1UECBMKU29tZS1TdGF0ZTESMBAGA1UEBxMJU29tZS1DaXR5MREwDwYDVQQK\\n\" +\n-        \"EwhTb21lLU9yZzAeFw0wODEyMDgwMzQzMjRaFw0yODA4MjUwMzQzMjRaMHIxCzAJ\\n\" +\n-        \"BgNVBAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMRIwEAYDVQQHEwlTb21lLUNp\\n\" +\n-        \"dHkxETAPBgNVBAoTCFNvbWUtT3JnMRMwEQYDVQQLEwpTU0wtQ2xpZW50MRIwEAYD\\n\" +\n-        \"VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwQDas\\n\" +\n-        \"JlRO9KNaAC9pIW+5ejqT7KL24Y7HY9gvEjCZLrDyj\/gnLSR4KIT3Ab+NRHndO9JV\\n\" +\n-        \"8848slshfe\/9M0qxo\/\/GyJu5D3xBNZf52zoFYAUVr1kXkqMQrRYc5AdTr6h2olYq\\n\" +\n-        \"ktP5KOB4z14fSKtcGd3hZ0O6dY31gqxDkkQbAgMBAAGjczBxMAkGA1UdEwQCMAAw\\n\" +\n-        \"CwYDVR0PBAQDAgXgMB0GA1UdDgQWBBTNu8iFqpG9\/R2+zWd8\/7PpTKgi5jAfBgNV\\n\" +\n-        \"HSMEGDAWgBT6uVG\/TOfZhpgz+efLHvEzSfeoFDAXBgNVHREBAf8EDTALgglsb2Nh\\n\" +\n-        \"bGhvc3QwDQYJKoZIhvcNAQEEBQADgYEAm25gJyqW1JznQ1EyOtTGswBVwfgBOf+F\\n\" +\n-        \"HJuBTcflYQLbTD\/AETPQJGvZU9tdhuLtbG3OPhR7vSY8zeAbfM3dbH7QFr3r47Gj\\n\" +\n-        \"XEH7qM\/MX+Z3ifVaC4MeJmrYQkYFSuKeyyKpdRVX4w4nnFHF6OsNASsYrMW6LpxN\\n\" +\n-        \"cl\/epUcHL7E=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static byte serverPrivateExponent[] = {\n-        (byte)0x6e, (byte)0xa7, (byte)0x1b, (byte)0x83,\n-        (byte)0x51, (byte)0x35, (byte)0x9a, (byte)0x44,\n-        (byte)0x7d, (byte)0xf6, (byte)0xe3, (byte)0x89,\n-        (byte)0xa0, (byte)0xd7, (byte)0x90, (byte)0x60,\n-        (byte)0xa1, (byte)0x4e, (byte)0x27, (byte)0x21,\n-        (byte)0xa2, (byte)0x89, (byte)0x74, (byte)0xcc,\n-        (byte)0x9d, (byte)0x75, (byte)0x75, (byte)0x4e,\n-        (byte)0xc7, (byte)0x82, (byte)0xe3, (byte)0xe3,\n-        (byte)0xc3, (byte)0x7d, (byte)0x00, (byte)0x54,\n-        (byte)0xec, (byte)0x36, (byte)0xb1, (byte)0xdf,\n-        (byte)0x91, (byte)0x9c, (byte)0x7a, (byte)0xc0,\n-        (byte)0x62, (byte)0x0a, (byte)0xd6, (byte)0xa9,\n-        (byte)0x22, (byte)0x91, (byte)0x4a, (byte)0x29,\n-        (byte)0x2e, (byte)0x43, (byte)0xfa, (byte)0x8c,\n-        (byte)0xd8, (byte)0xe9, (byte)0xbe, (byte)0xd9,\n-        (byte)0x4f, (byte)0xca, (byte)0x23, (byte)0xc6,\n-        (byte)0xe4, (byte)0x3f, (byte)0xb8, (byte)0x72,\n-        (byte)0xcf, (byte)0x02, (byte)0xfc, (byte)0xf4,\n-        (byte)0x58, (byte)0x34, (byte)0x77, (byte)0x76,\n-        (byte)0xce, (byte)0x22, (byte)0x44, (byte)0x5f,\n-        (byte)0x2d, (byte)0xca, (byte)0xee, (byte)0xf5,\n-        (byte)0x43, (byte)0x56, (byte)0x47, (byte)0x71,\n-        (byte)0x0b, (byte)0x09, (byte)0x6b, (byte)0x5e,\n-        (byte)0xf2, (byte)0xc8, (byte)0xee, (byte)0xd4,\n-        (byte)0x6e, (byte)0x44, (byte)0x92, (byte)0x2a,\n-        (byte)0x7f, (byte)0xcc, (byte)0xa7, (byte)0xd4,\n-        (byte)0x5b, (byte)0xfb, (byte)0xf7, (byte)0x4a,\n-        (byte)0xa9, (byte)0xfb, (byte)0x54, (byte)0x18,\n-        (byte)0xd5, (byte)0xd5, (byte)0x14, (byte)0xba,\n-        (byte)0xa0, (byte)0x1c, (byte)0x13, (byte)0xb3,\n-        (byte)0x37, (byte)0x6b, (byte)0x37, (byte)0x59,\n-        (byte)0xed, (byte)0xdb, (byte)0x6d, (byte)0xb1\n-    };\n-\n-    static byte serverModulus[] = {\n-        (byte)0x00,\n-        (byte)0xa5, (byte)0xac, (byte)0x5b, (byte)0x1c,\n-        (byte)0x37, (byte)0xa2, (byte)0xdd, (byte)0x99,\n-        (byte)0x89, (byte)0x2d, (byte)0xb2, (byte)0x79,\n-        (byte)0xb8, (byte)0x8f, (byte)0xd5, (byte)0x48,\n-        (byte)0xa5, (byte)0xe7, (byte)0x1c, (byte)0x84,\n-        (byte)0x17, (byte)0x8d, (byte)0x69, (byte)0x9c,\n-        (byte)0xc6, (byte)0xac, (byte)0x6d, (byte)0xf9,\n-        (byte)0xf2, (byte)0x1d, (byte)0x1f, (byte)0x39,\n-        (byte)0x19, (byte)0xda, (byte)0xd3, (byte)0x72,\n-        (byte)0x1e, (byte)0x6e, (byte)0xec, (byte)0x44,\n-        (byte)0xcc, (byte)0x70, (byte)0xa4, (byte)0xdc,\n-        (byte)0xba, (byte)0x00, (byte)0x30, (byte)0xf6,\n-        (byte)0xa0, (byte)0x4f, (byte)0x3d, (byte)0x54,\n-        (byte)0x7a, (byte)0x61, (byte)0x6a, (byte)0xcc,\n-        (byte)0x57, (byte)0xd0, (byte)0x0a, (byte)0x7f,\n-        (byte)0x95, (byte)0x28, (byte)0x18, (byte)0x3f,\n-        (byte)0x9a, (byte)0xd9, (byte)0x94, (byte)0xf2,\n-        (byte)0x1b, (byte)0xc8, (byte)0x24, (byte)0x88,\n-        (byte)0x7e, (byte)0xfe, (byte)0x9d, (byte)0x0f,\n-        (byte)0x3d, (byte)0xfb, (byte)0x57, (byte)0x53,\n-        (byte)0x08, (byte)0xb3, (byte)0x20, (byte)0x33,\n-        (byte)0xd4, (byte)0x3f, (byte)0x17, (byte)0x47,\n-        (byte)0x14, (byte)0xd1, (byte)0xcd, (byte)0xea,\n-        (byte)0x08, (byte)0xd8, (byte)0x0e, (byte)0x75,\n-        (byte)0x4e, (byte)0xaf, (byte)0xbe, (byte)0xcc,\n-        (byte)0xd2, (byte)0xec, (byte)0xaf, (byte)0xa9,\n-        (byte)0x7a, (byte)0x49, (byte)0xdf, (byte)0xc2,\n-        (byte)0xd9, (byte)0xac, (byte)0xb8, (byte)0x24,\n-        (byte)0x40, (byte)0x90, (byte)0xa6, (byte)0x03,\n-        (byte)0x56, (byte)0x2a, (byte)0xd0, (byte)0x30,\n-        (byte)0x05, (byte)0x40, (byte)0x2c, (byte)0x4f,\n-        (byte)0xab, (byte)0xd9, (byte)0x74, (byte)0x89\n-    };\n-\n-    static byte clientPrivateExponent[] = {\n-        (byte)0x11, (byte)0xb7, (byte)0x6a, (byte)0x36,\n-        (byte)0x3d, (byte)0x30, (byte)0x37, (byte)0xce,\n-        (byte)0x61, (byte)0x9d, (byte)0x6c, (byte)0x84,\n-        (byte)0x8b, (byte)0xf3, (byte)0x9b, (byte)0x25,\n-        (byte)0x4f, (byte)0x14, (byte)0xc8, (byte)0xa4,\n-        (byte)0xdd, (byte)0x2f, (byte)0xd7, (byte)0x9a,\n-        (byte)0x17, (byte)0xbd, (byte)0x90, (byte)0x19,\n-        (byte)0xf7, (byte)0x05, (byte)0xfd, (byte)0xf2,\n-        (byte)0xd2, (byte)0xc5, (byte)0xf7, (byte)0x77,\n-        (byte)0xbe, (byte)0xea, (byte)0xe2, (byte)0x84,\n-        (byte)0x87, (byte)0x97, (byte)0x3a, (byte)0x41,\n-        (byte)0x96, (byte)0xb6, (byte)0x99, (byte)0xf8,\n-        (byte)0x94, (byte)0x8c, (byte)0x58, (byte)0x71,\n-        (byte)0x51, (byte)0x8c, (byte)0xf4, (byte)0x2a,\n-        (byte)0x20, (byte)0x9e, (byte)0x1a, (byte)0xa0,\n-        (byte)0x26, (byte)0x99, (byte)0x75, (byte)0xd6,\n-        (byte)0x31, (byte)0x53, (byte)0x43, (byte)0x39,\n-        (byte)0xf5, (byte)0x2a, (byte)0xa6, (byte)0x7e,\n-        (byte)0x34, (byte)0x42, (byte)0x51, (byte)0x2a,\n-        (byte)0x40, (byte)0x87, (byte)0x03, (byte)0x88,\n-        (byte)0x43, (byte)0x69, (byte)0xb2, (byte)0x89,\n-        (byte)0x6d, (byte)0x20, (byte)0xbd, (byte)0x7d,\n-        (byte)0x71, (byte)0xef, (byte)0x47, (byte)0x0a,\n-        (byte)0xdf, (byte)0x06, (byte)0xc1, (byte)0x69,\n-        (byte)0x66, (byte)0xa8, (byte)0x22, (byte)0x37,\n-        (byte)0x1a, (byte)0x77, (byte)0x1e, (byte)0xc7,\n-        (byte)0x94, (byte)0x4e, (byte)0x2c, (byte)0x27,\n-        (byte)0x69, (byte)0x45, (byte)0x5e, (byte)0xc8,\n-        (byte)0xf8, (byte)0x0c, (byte)0xb7, (byte)0xf8,\n-        (byte)0xc0, (byte)0x8f, (byte)0x99, (byte)0xc1,\n-        (byte)0xe5, (byte)0x28, (byte)0x9b, (byte)0xf9,\n-        (byte)0x4c, (byte)0x94, (byte)0xc6, (byte)0xb1\n-    };\n-\n-    static byte clientModulus[] = {\n-        (byte)0x00,\n-        (byte)0xbb, (byte)0xf0, (byte)0x40, (byte)0x36,\n-        (byte)0xac, (byte)0x26, (byte)0x54, (byte)0x4e,\n-        (byte)0xf4, (byte)0xa3, (byte)0x5a, (byte)0x00,\n-        (byte)0x2f, (byte)0x69, (byte)0x21, (byte)0x6f,\n-        (byte)0xb9, (byte)0x7a, (byte)0x3a, (byte)0x93,\n-        (byte)0xec, (byte)0xa2, (byte)0xf6, (byte)0xe1,\n-        (byte)0x8e, (byte)0xc7, (byte)0x63, (byte)0xd8,\n-        (byte)0x2f, (byte)0x12, (byte)0x30, (byte)0x99,\n-        (byte)0x2e, (byte)0xb0, (byte)0xf2, (byte)0x8f,\n-        (byte)0xf8, (byte)0x27, (byte)0x2d, (byte)0x24,\n-        (byte)0x78, (byte)0x28, (byte)0x84, (byte)0xf7,\n-        (byte)0x01, (byte)0xbf, (byte)0x8d, (byte)0x44,\n-        (byte)0x79, (byte)0xdd, (byte)0x3b, (byte)0xd2,\n-        (byte)0x55, (byte)0xf3, (byte)0xce, (byte)0x3c,\n-        (byte)0xb2, (byte)0x5b, (byte)0x21, (byte)0x7d,\n-        (byte)0xef, (byte)0xfd, (byte)0x33, (byte)0x4a,\n-        (byte)0xb1, (byte)0xa3, (byte)0xff, (byte)0xc6,\n-        (byte)0xc8, (byte)0x9b, (byte)0xb9, (byte)0x0f,\n-        (byte)0x7c, (byte)0x41, (byte)0x35, (byte)0x97,\n-        (byte)0xf9, (byte)0xdb, (byte)0x3a, (byte)0x05,\n-        (byte)0x60, (byte)0x05, (byte)0x15, (byte)0xaf,\n-        (byte)0x59, (byte)0x17, (byte)0x92, (byte)0xa3,\n-        (byte)0x10, (byte)0xad, (byte)0x16, (byte)0x1c,\n-        (byte)0xe4, (byte)0x07, (byte)0x53, (byte)0xaf,\n-        (byte)0xa8, (byte)0x76, (byte)0xa2, (byte)0x56,\n-        (byte)0x2a, (byte)0x92, (byte)0xd3, (byte)0xf9,\n-        (byte)0x28, (byte)0xe0, (byte)0x78, (byte)0xcf,\n-        (byte)0x5e, (byte)0x1f, (byte)0x48, (byte)0xab,\n-        (byte)0x5c, (byte)0x19, (byte)0xdd, (byte)0xe1,\n-        (byte)0x67, (byte)0x43, (byte)0xba, (byte)0x75,\n-        (byte)0x8d, (byte)0xf5, (byte)0x82, (byte)0xac,\n-        (byte)0x43, (byte)0x92, (byte)0x44, (byte)0x1b\n-    };\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n+public class SunX509ExtendedTM extends TMBase {\n+    private final X509Certificate trustedCertificate;\n+    private final X509Certificate serverCertificate;\n+    private final KeyPair serverKeyPair;\n+    private final X509Certificate clientCertificate;\n+    private final KeyPair clientKeyPair;\n@@ -625,4 +57,1 @@\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n+    static char[] passphrase = \"passphrase\".toCharArray();\n@@ -633,1 +62,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -642,2 +71,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, serverCertStr,\n-            serverModulus, serverPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(serverCertificate, serverKeyPair, passphrase);\n@@ -674,1 +102,0 @@\n-\n@@ -691,2 +118,1 @@\n-        SSLContext context = getSSLContext(trusedCertStr, clientCertStr,\n-            clientModulus, clientPrivateExponent, passphrase);\n+        SSLContext context = getSSLContext(clientCertificate, clientKeyPair, passphrase);\n@@ -711,1 +137,0 @@\n-\n@@ -715,3 +140,1 @@\n-    private static SSLContext getSSLContext(String trusedCertStr,\n-            String keyCertStr, byte[] modulus,\n-            byte[] privateExponent, char[] passphrase) throws Exception {\n+    private SSLContext getSSLContext(X509Certificate eeCertificate, KeyPair eeKeyPair, char[] passphrase) throws Exception {\n@@ -720,7 +143,0 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n-\n@@ -732,15 +148,1 @@\n-        ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(\n-                                            new BigInteger(modulus),\n-                                            new BigInteger(privateExponent));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n+        ks.setCertificateEntry(\"RSA Export Signer\", trustedCertificate);\n@@ -748,0 +150,1 @@\n+        if (eeCertificate != null) {\n@@ -749,2 +152,2 @@\n-            chain[0] = keyCert;\n-            chain[1] = trusedCert;\n+            chain[0] = eeCertificate;\n+            chain[1] = trustedCertificate;\n@@ -753,1 +156,1 @@\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n+            ks.setKeyEntry(\"Whatever\", eeKeyPair.getPrivate(), passphrase, chain);\n@@ -771,1 +174,0 @@\n-\n@@ -774,1 +176,1 @@\n-        if (keyCertStr != null) {\n+        if (eeCertificate != null) {\n@@ -794,3 +196,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -810,1 +209,1 @@\n-        new SunX509ExtendedTM();\n+        new SunX509ExtendedTM().run();\n@@ -813,2 +212,0 @@\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n@@ -821,28 +218,21 @@\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(1024);\n+\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        trustedCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"C = US, ST = Some-State, L = Some-City, O = Some-Org\", caKeys)\n+            .build(null, caKeys.getPrivate(), \"MD5withRSA\");\n+\n+        serverKeyPair = kpg.generateKeyPair();\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Server, CN=localhost\",\n+            serverKeyPair.getPublic(), caKeys.getPublic(),\n+            CertificateBuilder.createDNSSubjectAltNameExt(true, \"localhost\"))\n+            .build(trustedCertificate, caKeys.getPrivate(), \"MD5withRSA\");\n+\n+        clientKeyPair = kpg.generateKeyPair();\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n+            \"C=US, ST=Some-State, L=Some-City, O=Some-Org, OU=SSL-Client, CN=localhost\",\n+            clientKeyPair.getPublic(), caKeys.getPublic(),\n+            CertificateBuilder.createDNSSubjectAltNameExt(true, \"localhost\"))\n+            .build(trustedCertificate, caKeys.getPrivate(), \"MD5withRSA\");\n@@ -850,46 +240,0 @@\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/SunX509ExtendedTM.java","additions":49,"deletions":705,"binary":false,"changes":754,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public abstract class TMBase {\n+    \/*\n+     * Should we run the client or server in a separate thread?\n+     * Both sides can throw exceptions, but do you have a preference\n+     * as to which side should be the main thread.\n+     *\/\n+    static boolean separateServerThread = true;\n+    volatile Exception serverException = null;\n+    Thread serverThread = null;\n+    volatile Exception clientException = null;\n+    Thread clientThread = null;\n+\n+    volatile boolean serverReady = false;\n+\n+    abstract void doServerSide() throws Exception;\n+    abstract void doClientSide() throws Exception;\n+\n+    void startServer(boolean newThread) throws Exception {\n+        if (newThread) {\n+            serverThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        doServerSide();\n+                    } catch (Exception e) {\n+                        \/*\n+                         * Our server thread just died.\n+                         *\n+                         * Release the client, if not active already...\n+                         *\/\n+                        System.err.println(\"Server died...\");\n+                        serverReady = true;\n+                        serverException = e;\n+                    }\n+                }\n+            };\n+            serverThread.start();\n+        } else {\n+            doServerSide();\n+        }\n+    }\n+\n+    void startClient(boolean newThread) throws Exception {\n+        if (newThread) {\n+            clientThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        doClientSide();\n+                    } catch (Exception e) {\n+                        \/*\n+                         * Our client thread just died.\n+                         *\/\n+                        System.err.println(\"Client died...\");\n+                        clientException = e;\n+                    }\n+                }\n+            };\n+            clientThread.start();\n+        } else {\n+            doClientSide();\n+        }\n+    }\n+\n+    void run() throws Exception {\n+        if (separateServerThread) {\n+            startServer(true);\n+            startClient(false);\n+        } else {\n+            startClient(true);\n+            startServer(false);\n+        }\n+\n+        \/*\n+         * Wait for other side to close down.\n+         *\/\n+        if (separateServerThread) {\n+            serverThread.join();\n+        } else {\n+            clientThread.join();\n+        }\n+\n+        \/*\n+         * When we get here, the test is pretty much over.\n+         *\n+         * If the main thread excepted, that propagates back\n+         * immediately.  If the other thread threw an exception, we\n+         * should report back.\n+         *\/\n+        if (serverException != null)\n+            throw serverException;\n+        if (clientException != null)\n+            throw clientException;\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/TMBase.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+ * @library \/test\/jdk\/java\/security\/testlibrary\n+ * @modules jdk.security.auth\n+ *          java.base\/sun.security.provider.certpath\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.validator\n+ *          java.base\/sun.security.x509\n+ * @build CertificateBuilder\n@@ -31,1 +38,0 @@\n- * @modules jdk.security.auth\n@@ -37,2 +43,0 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n@@ -41,0 +45,2 @@\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n@@ -44,1 +50,0 @@\n-import java.security.cert.CertificateException;\n@@ -55,0 +60,2 @@\n+import sun.security.testlibrary.CertificateBuilder;\n+import sun.security.x509.*;\n@@ -58,71 +65,4 @@\n-    \/*\n-     *  Certificate:\n-     *  Data:\n-     *    Version: 3 (0x2)\n-     *    Serial Number: 11174053930990688938 (0x9b1236d8f9c1daaa)\n-     *  Signature Algorithm: sha512WithRSAEncryption\n-     *    Issuer: CN=Root\n-     *    Validity\n-     *        Not Before: Sep  1 18:03:59 2015 GMT\n-     *        Not After : Jan 17 18:03:59 2043 GMT\n-     *    Subject: CN=Root\n-     *\/\n-    private static final String CA_CERT = \"\"\n-        + \"-----BEGIN CERTIFICATE-----\\n\"\n-        + \"MIIC8TCCAdmgAwIBAgIJAJsSNtj5wdqqMA0GCSqGSIb3DQEBDQUAMA8xDTALBgNV\\n\"\n-        + \"BAMMBFJvb3QwHhcNMTUwOTAxMTgwMzU5WhcNNDMwMTE3MTgwMzU5WjAPMQ0wCwYD\\n\"\n-        + \"VQQDDARSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvj892vPm\\n\"\n-        + \"bB++x9QqqyBveP+ZqQ2B1stV7vh5JmDnOTevkZUOcemp3SXu\/esNLSbpL+fARYXH\\n\"\n-        + \"V5ubnrfip6RbvcxPfVIIDJrRTLIIsU6W7M6\/LJLbLkEVGy4ZV4IHkOw9W2O92rcv\\n\"\n-        + \"BkoqhzZnOTGR6uT3rRcKx4RevEKBKhZO+OPPf\/\/lnckOybmYL7t7yQrajzHro76b\\n\"\n-        + \"QTXYjAUq\/DKhglXfC7vF\/JzlAvG2IunGmIfjGcnuDo\/9X3Bxef\/q5TxCS35fvb7t\\n\"\n-        + \"svC+g2QhTcBkQh4uNW2jSjlTIVp1uErCfP5aCjLaez5mqmb1hxPIlcvsNR23HwU6\\n\"\n-        + \"bQO7z7NBo9Do6QIDAQABo1AwTjAdBgNVHQ4EFgQUmLZNOBBkqdYoElyxklPYHmAb\\n\"\n-        + \"QXIwHwYDVR0jBBgwFoAUmLZNOBBkqdYoElyxklPYHmAbQXIwDAYDVR0TBAUwAwEB\\n\"\n-        + \"\/zANBgkqhkiG9w0BAQ0FAAOCAQEAYV4fOhDi5q7+XNXCxO8Eil2frR9jqdP4LaQp\\n\"\n-        + \"3L0evW0gvPX68s2WmkPWzIu4TJcpdGFQqxyQFSXuKBXjthyiln77QItGTHWeafES\\n\"\n-        + \"q5ESrKdSaJZq1bTIrrReCIP74f+fY\/F4Tnb3dCqzaljXfzpdbeRsIW6gF71xcOUQ\\n\"\n-        + \"nnPEjGVPLUegN+Wn\/jQpeLxxIB7FmNXncdRUfMfZ43xVSKuMCy1UUYqJqTa\/pXZj\\n\"\n-        + \"jCMeRPThRjRqHlJ69jStfWUQATbLyj9KN09rUaJxzmUSt61UqJi7sjcGySaCjAJc\\n\"\n-        + \"IcCdVmX\/DmRLsdv8W36O3MgrvpT1zR3kaAlv2d8HppnBqcL3xg==\\n\"\n-        + \"-----END CERTIFICATE-----\";\n-\n-    \/*\n-     *  Certificate:\n-     *  Data:\n-     *    Version: 3 (0x2)\n-     *    Serial Number: 7 (0x7)\n-     *  Signature Algorithm: sha512WithRSAEncryption\n-     *    Issuer: CN=Root\n-     *    Validity\n-     *       Not Before: Sep  1 18:03:59 2015 GMT\n-     *       Not After : Jan 17 18:03:59 2043 GMT\n-     *    Subject: CN=EE\n-     *    ...\n-     *  X509v3 extensions:\n-     *       X509v3 CRL Distribution Points:\n-     *           Full Name:\n-     *             URI:ldap:\/\/ldap.host.for.crldp\/main.crl\n-     *       Authority Information Access:\n-     *           CA Issuers - URI:ldap:\/\/ldap.host.for.aia\/dc=Root?cACertificate\n-     *\/\n-    private static final String EE_CERT = \"\"\n-        + \"-----BEGIN CERTIFICATE-----\\n\"\n-        + \"MIIDHTCCAgWgAwIBAgIBBzANBgkqhkiG9w0BAQ0FADAPMQ0wCwYDVQQDDARSb290\\n\"\n-        + \"MB4XDTE1MDkwMTE4MDM1OVoXDTQzMDExNzE4MDM1OVowDTELMAkGA1UEAwwCRUUw\\n\"\n-        + \"ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCpyz97liuWPDYcLH9TX8Bi\\n\"\n-        + \"T78olCmAfmevvch6ncXUVuCzbdaKuKXwn4EVbDszsVJLoK5zdtP+X3iDhutj+IgK\\n\"\n-        + \"mLhuczF3M9VIcWr+JJUyTH4+3h\/RT8cjCDZOmk9iXkb5ifruVsLqzb9g+Vp140Oz\\n\"\n-        + \"7leikne7KmclHvTfvFd0WDI7Gb9vo4f5rT717BXJ\/n+M6pNk8DLpLiEu6eziYvXR\\n\"\n-        + \"v5x+t5Go3x0eCXdaxEQUf2j876Wfr2qHRJK7lDfFe1DDsMg\/KpKGiILYZ+g2qtVM\\n\"\n-        + \"ZSxtp5BZEtfB5qV\/IE5kWO+mCIAGpXSZIdbERR6pZUq8GLEe1T9e+sO6H24w2F19\\n\"\n-        + \"AgMBAAGjgYUwgYIwNAYDVR0fBC0wKzApoCegJYYjbGRhcDovL2xkYXAuaG9zdC5m\\n\"\n-        + \"b3IuY3JsZHAvbWFpbi5jcmwwSgYIKwYBBQUHAQEEPjA8MDoGCCsGAQUFBzAChi5s\\n\"\n-        + \"ZGFwOi8vbGRhcC5ob3N0LmZvci5haWEvZGM9Um9vdD9jQUNlcnRpZmljYXRlMA0G\\n\"\n-        + \"CSqGSIb3DQEBDQUAA4IBAQBWDfZHpuUx0yn5d3+BuztFqoks1MkGdk+USlH0TB1\/\\n\"\n-        + \"gWWBd+4S4PCKlpSur0gj2rMW4fP5HQfNlHci8JV8\/bG4KuKRAXW56dg1818Hl3pc\\n\"\n-        + \"iIrUSRn8uUjH3p9qb+Rb\/u3mmVQRyJjN2t\/zceNsO8\/+Dd808OB9aEwGs8lMT0nn\\n\"\n-        + \"ZYaaAqYz1GIY\/Ecyx1vfEZEQ1ljo6i\/r70C3igbypBUShxSiGsleiVTLOGNA+MN1\\n\"\n-        + \"\/a\/Qh0bkaQyTGqK3bwvzzMeQVqWu2EWTBD\/PmND5ExkpRICdv8LBVXfLnpoBr4lL\\n\"\n-        + \"hnxn9+e0Ah+t8dS5EKfn44w5bI5PCu2bqxs6RCTxNjcY\\n\"\n-        + \"-----END CERTIFICATE-----\";\n+    static X509Certificate caCertificate;\n+    static X509Certificate eeCertificate;\n+\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -134,2 +74,1 @@\n-        X509Certificate trustedCert = loadCertificate(CA_CERT);\n-        X509Certificate eeCert = loadCertificate(EE_CERT);\n+        loadCertificates();\n@@ -138,1 +77,1 @@\n-        trustedCertsSet.add(new TrustAnchor(trustedCert, null));\n+        trustedCertsSet.add(new TrustAnchor(caCertificate, null));\n@@ -140,2 +79,2 @@\n-        CertPath cp = (CertPath) CertificateFactory.getInstance(\"X509\")\n-                .generateCertPath(Arrays.asList(eeCert));\n+        CertPath cp = CertificateFactory.getInstance(\"X509\")\n+                .generateCertPath(Arrays.asList(eeCertificate));\n@@ -171,3 +110,19 @@\n-    \/\/ load a X509 certificate\n-    public static X509Certificate loadCertificate(String s)\n-            throws IOException, CertificateException {\n+    static void loadCertificates() throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        caCertificate = CertificateBuilder.newSelfSignedCA(\n+            \"CN = Root\", caKeys)\n+                .build(null, caKeys.getPrivate(), \"SHA512withRSA\");\n+\n+        KeyPair eeKeys = kpg.generateKeyPair();\n+        GeneralNames gns = new GeneralNames();\n+        gns.add(new GeneralName(new URIName(\"ldap:\/\/ldap.host.for.crldp\/main.crl\")));\n+        eeCertificate = CertificateBuilder.newServerCertificateBuilder(\n+            \"CN = EE\", eeKeys.getPublic(), caKeys.getPublic())\n+            .addAIAExt(List.of(\"CAISSUER|ldap:\/\/ldap.host.for.aia\/dc=Root?cACertificate\"))\n+            .addExtension(new CRLDistributionPointsExtension(List.of(\n+                    new DistributionPoint(gns, null, null))))\n+            .addKeyUsageExt(new boolean[]{false, false, false, false, false, false, false, false, false})\n+            .build(caCertificate, caKeys.getPrivate(), \"SHA512withRSA\");\n@@ -175,3 +130,5 @@\n-        try (ByteArrayInputStream is = new ByteArrayInputStream(s.getBytes())) {\n-            return (X509Certificate) CertificateFactory.getInstance(\"X509\")\n-                    .generateCertificate(is);\n+        if (debug) {\n+            System.err.println(\"CA Certificate\");\n+            CertificateBuilder.printCertificate(caCertificate, System.err);\n+            System.err.println(\"EE Certificate\");\n+            CertificateBuilder.printCertificate(eeCertificate, System.err);\n","filename":"test\/jdk\/sun\/security\/x509\/URICertStore\/ExtensionsWithLDAP.java","additions":44,"deletions":87,"binary":false,"changes":131,"status":"modified"}]}