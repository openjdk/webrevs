{"files":[{"patch":"@@ -36,4 +36,1 @@\n-import sun.security.util.DerOutputStream;\n-import sun.security.util.DerValue;\n-import sun.security.util.ObjectIdentifier;\n-import sun.security.util.SignatureUtil;\n+import sun.security.util.*;\n@@ -403,7 +400,0 @@\n-     * Default key usage specifies:\n-     * <ul>\n-     *     <li>Digital Signature<\/li>\n-     *     <li>Non Repudiation<\/li>\n-     *     <li>Key Encipherment<\/li>\n-     *\n-     * <\/ul>\n@@ -427,1 +417,0 @@\n-                .addKeyUsageExt(new boolean[]{true, true, true, false, false, false, false, false, false})\n@@ -432,0 +421,48 @@\n+    \/**\n+     * Creates a CertificateBuilder for TLS servers. Certificates are valid for\n+     * one hour and are given a random serial number. The Extended Key Usage extension\n+     * is set to serverAuth.\n+     * Default key usage:\n+     * <ul>\n+     *     <li>Digital Signature<\/li>\n+     *     <li>Non Repudiation<\/li>\n+     *     <li>Key Encipherment<\/li>\n+     *     <li>Key Agreement<\/li>\n+     * <\/ul>\n+     * @param subjectName the subject name for the certificate\n+     * @param publicKey the public key to be associated with the certificate\n+     * @param caKey CA key used to sign the certificate\n+     * @param extensions Optional extensions to add to the certificate\n+     * @throws Exception\n+     *\/\n+    public static CertificateBuilder newServerCertificateBuilder(String subjectName,\n+                 PublicKey publicKey, PublicKey caKey, Extension... extensions) throws Exception {\n+        return newEndEntity(subjectName, publicKey, caKey, extensions)\n+                .addKeyUsageExt(new boolean[]{true, true, true, false, true, false, false, false, false})\n+                .addExtendedKeyUsageExt(List.of(KnownOIDs.serverAuth.value()));\n+    }\n+\n+    \/**\n+     * Creates a CertificateBuilder for TLS clients. Certificates are valid for\n+     * one hour and are given a random serial number. The Extended Key Usage extension\n+     * is set to clientAuth.\n+     * Default key usage:\n+     * <ul>\n+     *     <li>Digital Signature<\/li>\n+     *     <li>Non Repudiation<\/li>\n+     *     <li>Key Encipherment<\/li>\n+     *     <li>Key Agreement<\/li>\n+     * <\/ul>\n+     * @param subjectName the subject name for the certificate\n+     * @param publicKey the public key to be associated with the certificate\n+     * @param caKey CA key used to sign the certificate\n+     * @param extensions Optional extensions to add to the certificate\n+     * @throws Exception\n+     *\/\n+    public static CertificateBuilder newClientCertificateBuilder(String subjectName,\n+                 PublicKey publicKey, PublicKey caKey, Extension... extensions) throws Exception {\n+        return newEndEntity(subjectName, publicKey, caKey, extensions)\n+                .addKeyUsageExt(new boolean[]{true, true, true, false, true, false, false, false, false})\n+                .addExtendedKeyUsageExt(List.of(KnownOIDs.clientAuth.value()));\n+    }\n+\n","filename":"test\/jdk\/java\/security\/testlibrary\/CertificateBuilder.java","additions":49,"deletions":12,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        X509Certificate trustedCertA = CertificateBuilder.newEndEntity(\n+        X509Certificate trustedCertA = CertificateBuilder.newServerCertificateBuilder(\n@@ -98,1 +98,1 @@\n-        X509Certificate trustedCertB = CertificateBuilder.newEndEntity(\n+        X509Certificate trustedCertB = CertificateBuilder.newServerCertificateBuilder(\n@@ -104,1 +104,1 @@\n-        X509Certificate trustedCertC = CertificateBuilder.newEndEntity(\n+        X509Certificate trustedCertC = CertificateBuilder.newServerCertificateBuilder(\n@@ -113,1 +113,1 @@\n-        X509Certificate trustedCertD = CertificateBuilder.newEndEntity(\n+        X509Certificate trustedCertD = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/javax\/net\/ssl\/ServerName\/SSLSocketSNISensitive.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n@@ -211,1 +211,1 @@\n-        clientCertificate = CertificateBuilder.newEndEntity(\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/DNSIdentities.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n@@ -201,1 +201,1 @@\n-        clientCertificate = CertificateBuilder.newEndEntity(\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPAddressDNSIdentities.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n@@ -201,1 +201,1 @@\n-        clientCertificate = CertificateBuilder.newEndEntity(\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/Identities.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n@@ -84,1 +84,1 @@\n-        clientCertificate = CertificateBuilder.newEndEntity(\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IdentitiesBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n","filename":"test\/jdk\/sun\/security\/ssl\/ClientHandshaker\/RSAExport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        targetCert = CertificateBuilder.newEndEntity(\n+        targetCert = CertificateBuilder.newServerCertificateBuilder(\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/MD2InTrustAnchor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n@@ -252,1 +252,1 @@\n-        clientCertificate = CertificateBuilder.newEndEntity(\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/BasicConstraints.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n@@ -301,1 +301,1 @@\n-        clientCertificate = CertificateBuilder.newEndEntity(\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/PKIXExtendedTM.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-        targetCertificate = CertificateBuilder.newEndEntity(\n+        targetCertificate = CertificateBuilder.newServerCertificateBuilder(\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/SelfIssuedCert.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-        serverCertificate = CertificateBuilder.newEndEntity(\n+        serverCertificate = CertificateBuilder.newServerCertificateBuilder(\n@@ -234,1 +234,1 @@\n-        clientCertificate = CertificateBuilder.newEndEntity(\n+        clientCertificate = CertificateBuilder.newClientCertificateBuilder(\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/SunX509ExtendedTM.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-        eeCertificate = CertificateBuilder.newEndEntity(\n+        eeCertificate = CertificateBuilder.newServerCertificateBuilder(\n","filename":"test\/jdk\/sun\/security\/x509\/URICertStore\/ExtensionsWithLDAP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}