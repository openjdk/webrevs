{"files":[{"patch":"@@ -175,2 +175,2 @@\n-    Set<JCMethodInvocation> invocationsWithPatternMatchingCatch = Set.of();\n-    ListBuffer<int[]> patternMatchingInvocationRanges;\n+    PatternMatchingCatchConfiguration patternMatchingCatchConfiguration =\n+            new PatternMatchingCatchConfiguration(Set.of(), null, null, null);\n@@ -1090,3 +1090,1 @@\n-        Set<JCMethodInvocation> prevInvocationsWithPatternMatchingCatch = invocationsWithPatternMatchingCatch;\n-        ListBuffer<int[]> prevRanges = patternMatchingInvocationRanges;\n-        State startState = code.state.dup();\n+        PatternMatchingCatchConfiguration prevConfiguration = patternMatchingCatchConfiguration;\n@@ -1094,2 +1092,5 @@\n-            invocationsWithPatternMatchingCatch = tree.patternMatchingCatch.calls2Handle();\n-            patternMatchingInvocationRanges = new ListBuffer<>();\n+            patternMatchingCatchConfiguration =\n+                    new PatternMatchingCatchConfiguration(tree.patternMatchingCatch.calls2Handle(),\n+                                                         new ListBuffer<int[]>(),\n+                                                         tree.patternMatchingCatch.handler(),\n+                                                         code.state.dup());\n@@ -1098,0 +1099,8 @@\n+            generatePatternMatchingCatch(env);\n+            patternMatchingCatchConfiguration = prevConfiguration;\n+        }\n+    }\n+\n+    private void generatePatternMatchingCatch(Env<GenContext> env) {\n+        if (patternMatchingCatchConfiguration.handler != null &&\n+            !patternMatchingCatchConfiguration.ranges.isEmpty()) {\n@@ -1099,3 +1108,6 @@\n-            JCCatch handler = tree.patternMatchingCatch.handler();\n-            code.entryPoint(startState, handler.param.sym.type);\n-            genPatternMatchingCatch(handler, env, patternMatchingInvocationRanges.toList());\n+            JCCatch handler = patternMatchingCatchConfiguration.handler();\n+            code.entryPoint(patternMatchingCatchConfiguration.startState(),\n+                            handler.param.sym.type);\n+            genPatternMatchingCatch(handler,\n+                                    env,\n+                                    patternMatchingCatchConfiguration.ranges.toList());\n@@ -1103,2 +1115,0 @@\n-            invocationsWithPatternMatchingCatch = prevInvocationsWithPatternMatchingCatch;\n-            patternMatchingInvocationRanges = prevRanges;\n@@ -1929,1 +1939,1 @@\n-        if (invocationsWithPatternMatchingCatch.contains(tree)) {\n+        if (patternMatchingCatchConfiguration.invocations().contains(tree)) {\n@@ -1932,1 +1942,1 @@\n-            patternMatchingInvocationRanges.add(new int[] {start, code.curCP()});\n+            patternMatchingCatchConfiguration.ranges().add(new int[] {start, code.curCP()});\n@@ -1934,1 +1944,15 @@\n-            result = m.invoke();\n+            if (msym.isConstructor() && TreeInfo.isConstructorCall(tree)) {\n+                \/\/if this is a this(...) or super(...) call, there is a pending\n+                \/\/\"uninitialized this\" before this call. One catch handler cannot\n+                \/\/handle exceptions that may come from places with \"uninitialized this\"\n+                \/\/and (initialized) this, hence generate one set of handlers here\n+                \/\/for the \"uninitialized this\" case, and another set of handlers\n+                \/\/will be generated at the end of the method for the initialized this,\n+                \/\/if needed:\n+                generatePatternMatchingCatch(env);\n+                result = m.invoke();\n+                patternMatchingCatchConfiguration =\n+                        patternMatchingCatchConfiguration.restart(code.state.dup());\n+            } else {\n+                result = m.invoke();\n+            }\n@@ -2558,0 +2582,11 @@\n+    record PatternMatchingCatchConfiguration(Set<JCMethodInvocation> invocations,\n+                                            ListBuffer<int[]> ranges,\n+                                            JCCatch handler,\n+                                            State startState) {\n+        public PatternMatchingCatchConfiguration restart(State newState) {\n+            return new PatternMatchingCatchConfiguration(invocations(),\n+                                                        new ListBuffer<int[]>(),\n+                                                        handler(),\n+                                                        newState);\n+        }\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":50,"deletions":15,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -306,0 +306,10 @@\n+    \/**\n+     * Is the given method invocation an invocation of this(...) or super(...)?\n+     *\/\n+    public static boolean isConstructorCall(JCMethodInvocation invoke) {\n+        Name name = TreeInfo.name(invoke.meth);\n+        Names names = name.table.names;\n+\n+        return (name == names._this || name == names._super);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,390 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8332106\n+ * @summary Verify the synthetic catch clauses are generated correctly for constructors\n+ * @enablePreview\n+ * @compile UninitializedThisException.java\n+ * @run main UninitializedThisException\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+public class UninitializedThisException extends Base {\n+\n+    public UninitializedThisException(String s1, String s2) {\n+        super(s1, s2);\n+    }\n+\n+    public UninitializedThisException(R o1, R o2, R o3) {\n+        out.println(\"-pre(\" + o1.fail() + \")\" +\n+                    \"-nest(\" + o2.fail() + \")\" +\n+                    \"-post(\" + o3.fail() + \")\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        this(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(String o1, R o2, R o3) {\n+        out.println(\"-nest(\" + o2.fail() + \")\" +\n+                    \"-post(\" + o3.fail() + \")\");\n+        String val1 = o1;\n+        out.println(\"check1\");\n+        this(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(R o1, String o2, R o3) {\n+        out.println(\"-pre(\" + o1.fail() + \")\" +\n+                    \"-post(\" + o3.fail() + \")\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        this(val1, o2);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(R o1, R o2, String o3) {\n+        out.println(\"-pre(\" + o1.fail() + \")\" +\n+                    \"-nest(\" + o2.fail() + \")\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        this(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(R o1, String o2, String o3) {\n+        out.println(\"-pre(\" + o1.fail() + \")\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        this(val1, o2);\n+        out.println(\"check2\");\n+        String val2 = o3;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(String o1, R o2, String o3) {\n+        out.println(\"-nest(\" + o2.fail() + \")\");\n+        String val1 = o1;\n+        out.println(\"check1\");\n+        this(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(String o1, String o2, R o3) {\n+        out.println(\"-post(\" + o3.fail() + \")\");\n+        String val1 = o1;\n+        out.println(\"check1\");\n+        this(val1, o2);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(R o1, R o2, R o3, boolean superMarker) {\n+        out.println(\"-pre(\" + o1.fail() + \")\" +\n+                    \"-nest(\" + o2.fail() + \")\" +\n+                    \"-post(\" + o3.fail() + \")\" +\n+                    \"-super\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        super(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(String o1, R o2, R o3, boolean superMarker) {\n+        out.println(\"-nest(\" + o2.fail() + \")\" +\n+                    \"-post(\" + o3.fail() + \")\" +\n+                    \"-super\");\n+        String val1 = o1;\n+        out.println(\"check1\");\n+        super(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(R o1, String o2, R o3, boolean superMarker) {\n+        out.println(\"-pre(\" + o1.fail() + \")\" +\n+                    \"-post(\" + o3.fail() + \")\" +\n+                    \"-super\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        super(val1, o2);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(R o1, R o2, String o3, boolean superMarker) {\n+        out.println(\"-pre(\" + o1.fail() + \")\" +\n+                    \"-nest(\" + o2.fail() + \")\" +\n+                    \"-super\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        super(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(R o1, String o2, String o3, boolean superMarker) {\n+        out.println(\"-pre(\" + o1.fail() + \")\" +\n+                    \"-super\");\n+        String val1 = o1 instanceof R(String s, _) ? s : null;\n+        out.println(\"check1\");\n+        super(val1, o2);\n+        out.println(\"check2\");\n+        String val2 = o3;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(String o1, R o2, String o3, boolean superMarker) {\n+        out.println(\"-nest(\" + o2.fail() + \")\" +\n+                    \"-super\");\n+        String val1 = o1;\n+        out.println(\"check1\");\n+        super(val1, o2 instanceof R(String s, _) ? s : null);\n+        out.println(\"check2\");\n+        String val2 = o3;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public UninitializedThisException(String o1, String o2, R o3, boolean superMarker) {\n+        out.println(\"-post(\" + o3.fail() + \")\" +\n+                    \"-super\");\n+        String val1 = o1;\n+        out.println(\"check1\");\n+        super(val1, o2);\n+        out.println(\"check2\");\n+        String val2 = o3 instanceof R(String s, _) ? s : null;\n+        out.println(\"check3\");\n+        Objects.requireNonNull(val2);\n+    }\n+\n+    public static void main(String... args) {\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), new R(\"\", false), new R(\"\", false)));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), new R(\"\", true), new R(\"\", false)));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), new R(\"\", false), new R(\"\", true)));\n+        new UninitializedThisException(new R(\"\", false), new R(\"\", false), new R(\"\", false));\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(\"\", new R(\"\", true), new R(\"\", false)));\n+        runAndCatch(() -> new UninitializedThisException(\"\", new R(\"\", false), new R(\"\", true)));\n+        new UninitializedThisException(\"\", new R(\"\", false), new R(\"\", false));\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), \"\", new R(\"\", false)));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), \"\", new R(\"\", true)));\n+        new UninitializedThisException(new R(\"\", false), \"\", new R(\"\", false));\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), new R(\"\", false), \"\"));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), new R(\"\", true), \"\"));\n+        new UninitializedThisException(new R(\"\", false), new R(\"\", false), \"\");\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), \"\", \"\"));\n+        new UninitializedThisException(new R(\"\", false), \"\", \"\");\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(\"\", new R(\"\", true), \"\"));\n+        new UninitializedThisException(\"\", new R(\"\", false), \"\");\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(\"\", \"\", new R(\"\", true)));\n+        new UninitializedThisException(\"\", \"\", new R(\"\", false));\n+\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), new R(\"\", false), new R(\"\", false), true));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), new R(\"\", true), new R(\"\", false), true));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), new R(\"\", false), new R(\"\", true), true));\n+        new UninitializedThisException(new R(\"\", false), new R(\"\", false), new R(\"\", false), true);\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(\"\", new R(\"\", true), new R(\"\", false), true));\n+        runAndCatch(() -> new UninitializedThisException(\"\", new R(\"\", false), new R(\"\", true), true));\n+        new UninitializedThisException(\"\", new R(\"\", false), new R(\"\", false), true);\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), \"\", new R(\"\", false), true));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), \"\", new R(\"\", true), true));\n+        new UninitializedThisException(new R(\"\", false), \"\", new R(\"\", false), true);\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), new R(\"\", false), \"\", true));\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", false), new R(\"\", true), \"\", true));\n+        new UninitializedThisException(new R(\"\", false), new R(\"\", false), \"\", true);\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(new R(\"\", true), \"\", \"\", true));\n+        new UninitializedThisException(new R(\"\", false), \"\", \"\", true);\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(\"\", new R(\"\", true), \"\", true));\n+        new UninitializedThisException(\"\", new R(\"\", false), \"\", true);\n+\n+        out.println();\n+\n+        runAndCatch(() -> new UninitializedThisException(\"\", \"\", new R(\"\", true), true));\n+        new UninitializedThisException(\"\", \"\", new R(\"\", false), true);\n+\n+        String actualLog = log.toString().replaceAll(\"\\\\R\", \"\\n\");\n+        String expectedLog = EXPECTED_LOG_PATTERN.replace(\"${super}\", \"\") +\n+                             EXPECTED_LOG_PATTERN.replace(\"${super}\", \"-super\");\n+\n+        if (!Objects.equals(actualLog, expectedLog)) {\n+            throw new AssertionError(\"Expected log:\\n\" + expectedLog +\n+                                     \", but got: \" + actualLog);\n+        }\n+    }\n+\n+    static final String EXPECTED_LOG_PATTERN =\n+            \"\"\"\n+            -pre(true)-nest(false)-post(false)${super}\n+            -pre(false)-nest(true)-post(false)${super}\n+            check1\n+            -pre(false)-nest(false)-post(true)${super}\n+            check1\n+            check2\n+            -pre(false)-nest(false)-post(false)${super}\n+            check1\n+            check2\n+            check3\n+\n+            -nest(true)-post(false)${super}\n+            check1\n+            -nest(false)-post(true)${super}\n+            check1\n+            check2\n+            -nest(false)-post(false)${super}\n+            check1\n+            check2\n+            check3\n+\n+            -pre(true)-post(false)${super}\n+            -pre(false)-post(true)${super}\n+            check1\n+            check2\n+            -pre(false)-post(false)${super}\n+            check1\n+            check2\n+            check3\n+\n+            -pre(true)-nest(false)${super}\n+            -pre(false)-nest(true)${super}\n+            check1\n+            -pre(false)-nest(false)${super}\n+            check1\n+            check2\n+            check3\n+\n+            -pre(true)${super}\n+            -pre(false)${super}\n+            check1\n+            check2\n+            check3\n+\n+            -nest(true)${super}\n+            check1\n+            -nest(false)${super}\n+            check1\n+            check2\n+            check3\n+\n+            -post(true)${super}\n+            check1\n+            check2\n+            -post(false)${super}\n+            check1\n+            check2\n+            check3\n+            \"\"\";\n+\n+    static final StringWriter log = new StringWriter();\n+    static final PrintWriter out = new PrintWriter(log);\n+\n+    static void runAndCatch(Supplier<Object> toRun) {\n+        try {\n+            toRun.get();\n+            throw new AssertionError(\"Didn't get the expected exception!\");\n+        } catch (MatchException ex) {\n+            \/\/OK\n+        }\n+    }\n+    record R(String s, boolean fail) {\n+        public String s() {\n+            if (fail) {\n+                throw new NullPointerException();\n+            } else {\n+                return s;\n+            }\n+        }\n+    }\n+}\n+class Base {\n+    public Base(String s1, String s2) {\n+        Objects.requireNonNull(s1);\n+        Objects.requireNonNull(s2);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/UninitializedThisException.java","additions":390,"deletions":0,"binary":false,"changes":390,"status":"added"}]}