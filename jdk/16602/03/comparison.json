{"files":[{"patch":"@@ -84,3 +84,0 @@\n-  \/\/ Pops an oop from this lock-stack.\n-  inline oop pop();\n-\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,13 +71,0 @@\n-inline oop LockStack::pop() {\n-  verify(\"pre-pop\");\n-  assert(to_index(_top) > 0, \"underflow, probably unbalanced push\/pop\");\n-  _top -= oopSize;\n-  oop o = _base[to_index(_top)];\n-#ifdef ASSERT\n-  _base[to_index(_top)] = nullptr;\n-#endif\n-  assert(!contains(o), \"entries must be unique: \" PTR_FORMAT, p2i(o));\n-  verify(\"post-pop\");\n-  return o;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -602,7 +602,1 @@\n-  if (LockingMode == LM_LIGHTWEIGHT && monitor->is_owner_anonymous()) {\n-    \/\/ It must be owned by us. Pop lock object from lock stack.\n-    LockStack& lock_stack = current->lock_stack();\n-    oop popped = lock_stack.pop();\n-    assert(popped == object, \"must be owned by this thread\");\n-    monitor->set_owner_from_anonymous(current);\n-  }\n+  assert(!monitor->is_owner_anonymous(), \"must not be\");\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}