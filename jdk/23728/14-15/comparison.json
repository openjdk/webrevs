{"files":[{"patch":"@@ -3520,1 +3520,1 @@\n-\/\/ If (conIL == conIR && conIR <= num_bits) this simplifies to\n+\/\/ If (conIL == conIR && conIR <= num_rejected_bits) this simplifies to\n@@ -3544,6 +3544,0 @@\n-\/\/ Let's study different cases of (RShiftI _ (LShiftI _ v conIL) conIR).\n-\/\/ Eventually, we show that the simplification into (LShiftI _ v (conIL-conIR))\n-\/\/ is valid if (but not iff):\n-\/\/ - conIL >= conIR\n-\/\/ - num_rejected_bits >= conIR\n-\/\/ Remembering that only the 8 lower bits have to be correct.\n@@ -3551,7 +3545,21 @@\n-\/\/ Let's also remember that conIL < 32 since (v << 33) is simplified into (v << 1)\n-\/\/ and (v << 31) << 2 is simplified into 0. This means that in any case, after the\n-\/\/ left shift, we always have at least one bit of v remaining after the double shift.\n-\/\/ Thus, after the right shift, the upper bits will be a repetition of the higher bit\n-\/\/ of v that wasn't discarded by the left shift. The point is that there is no case\n-\/\/ to study where the left shift returns 0 unconditionally (clears all the bits):\n-\/\/ it might look like a corner case to pay attention to, but it actually is not.\n+\/\/ Statement (proved further below in case analysis):\n+\/\/   Given:\n+\/\/   - 0 <= conIL < BitsPerJavaInteger   (no wrap in shift, enforced by maskShiftAmount)\n+\/\/   - 0 <= conIR < BitsPerJavaInteger   (no wrap in shift, enforced by maskShiftAmount)\n+\/\/   - conIL >= conIR\n+\/\/   - num_rejected_bits >= conIR\n+\/\/   Then this form:\n+\/\/      (RShiftI _ (LShiftI _ v conIL) conIR)\n+\/\/   can be replaced with this form:\n+\/\/      (LShiftI _ v (conIL-conIR))\n+\/\/\n+\/\/ Note: We only have to show that the non-rejected lowest bits (8 bits for byte)\n+\/\/       have to be correct, as the higher bits are rejected \/ truncated by the store.\n+\/\/\n+\/\/ The hypotheses\n+\/\/   0 <= conIL < BitsPerJavaInteger\n+\/\/   0 <= conIR < BitsPerJavaInteger\n+\/\/ are ensured by maskShiftAmount (called from ::Ideal of shift nodes). Indeed,\n+\/\/ (v << 31) << 2 must be simplified into 0, not into v << 33 (which is equivalent\n+\/\/ to v << 1).\n+\/\/\n@@ -3563,1 +3571,1 @@\n-\/\/ after << 24\n+\/\/ after: v << 24\n@@ -3568,1 +3576,1 @@\n-\/\/ after >> 24\n+\/\/ after: (v << 24) >> 24\n@@ -3578,1 +3586,1 @@\n-\/\/ after << 22\n+\/\/ after: v << 22\n@@ -3583,1 +3591,1 @@\n-\/\/ after >> 22\n+\/\/ after: (v << 22) >> 22\n@@ -3594,1 +3602,1 @@\n-\/\/ after << 26\n+\/\/ after: v << 26\n@@ -3599,1 +3607,1 @@\n-\/\/ after >> 26\n+\/\/ after: (v << 26) >> 26\n@@ -3601,1 +3609,1 @@\n-\/\/ |        sign bit        | v[0..6] |\n+\/\/ |        sign bit        | v[0..5] |\n@@ -3604,3 +3612,5 @@\n-\/\/ The non-rejected bits are the 8 lower bits of v. The bits 8 and 9 of v are still\n-\/\/ present in (v << 22) >> 22 but will be dropped by the store. The simplification is\n-\/\/ still correct.\n+\/\/ The non-rejected bits are made of\n+\/\/ - 0-5 => the bits 0 to 5 of v\n+\/\/ - 6-7 => the sign bit of v[0..5] (that is v[5])\n+\/\/ Simplifying this as v is not correct.\n+\/\/ The condition conIR <= num_rejected_bits is indeed necessary in Case 1\n@@ -3611,1 +3621,1 @@\n-\/\/ after << 26\n+\/\/ after: v << 26\n@@ -3616,1 +3626,1 @@\n-\/\/ after >> 24\n+\/\/ after: (v << 26) >> 24\n@@ -3627,1 +3637,1 @@\n-\/\/ after << 26\n+\/\/ after: v << 26\n@@ -3632,1 +3642,1 @@\n-\/\/ after >> 22\n+\/\/ after: (v << 26) >> 22\n@@ -3647,1 +3657,1 @@\n-\/\/ after << 28\n+\/\/ after: v << 28\n@@ -3652,1 +3662,1 @@\n-\/\/ after >> 26\n+\/\/ after: (v << 28) >> 26\n@@ -3662,1 +3672,1 @@\n-\/\/ The condition conIR <= num_rejected_bits is indeed necessary.\n+\/\/ The condition conIR <= num_rejected_bits is indeed necessary in Case 2.\n@@ -3665,3 +3675,5 @@\n-\/\/ Valid if:\n-\/\/ - conIL >= conIR\n-\/\/ - num_rejected_bits >= conIR\n+\/\/ Our hypotheses are indeed sufficient:\n+\/\/   - 0 <= conIL < BitsPerJavaInteger\n+\/\/   - 0 <= conIR < BitsPerJavaInteger\n+\/\/   - conIL >= conIR\n+\/\/   - num_rejected_bits >= conIR\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":46,"deletions":34,"binary":false,"changes":80,"status":"modified"}]}