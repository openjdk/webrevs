{"files":[{"patch":"@@ -3519,8 +3519,5 @@\n-\/\/ (StoreB ... (RShiftI _ (LShiftI _ valIn conIL ) conIR) )\n-\/\/ If (conIL == conIR && conIR <= num_bits)  this simplifies to\n-\/\/ (StoreB ... (valIn) )\n-\/\/ If (conIL > conIR) we are inventing 0 lower bits, and throwing\n-\/\/ away upper bits, but we are not introducing garbage bits from the upper bits\n-\/\/ (the right in the notation below).\n-\/\/ We can simplify into\n-\/\/ (StoreB ... (LShiftI _ valIn (conIL - conIR)) )\n+\/\/ (StoreB ... (RShiftI _ (LShiftI _ v conIL) conIR))\n+\/\/ If (conIL == conIR && conIR <= num_bits) this simplifies to\n+\/\/ (StoreB ... (v))\n+\/\/ If (conIL > conIR) under some conditions, it can be simplified into\n+\/\/ (StoreB ... (LShiftI _ v (conIL - conIR)))\n@@ -3530,1 +3527,1 @@\n-\/\/ array_of_shorts[0] = (short)(X << 2)\n+\/\/ array_of_shorts[0] = (short)(v << 2)\n@@ -3532,1 +3529,1 @@\n-\/\/ (StoreB ... (RShiftI _ (LShiftI _ (LShiftI _ X 2) 16) 16))\n+\/\/ (StoreB ... (RShiftI _ (LShiftI _ (LShiftI _ v 2) 16) 16))\n@@ -3534,2 +3531,3 @@\n-\/\/ (StoreB ... (RShiftI _ (LShiftI _ X 18) 16)).\n-\/\/ It is thus useful to handle the case where conIL > conIR.\n+\/\/ (StoreB ... (RShiftI _ (LShiftI _ v 18) 16)).\n+\/\/ It is thus useful to handle cases where conIL > conIR. But this simplification\n+\/\/ does not always hold. Let's see in which cases it's valid.\n@@ -3537,9 +3535,12 @@\n-\/\/ Let's assume we have the following 32 bits integer that we want to stuff in 8 bits byte:\n-\/\/ +------------------------+---------+\n-\/\/ |        v[8..31]        | v[0..7] |\n-\/\/ +------------------------+---------+\n-\/\/  31                     8 7        0\n-\/\/ v[0..7] is meaningful, but v[8..31] is not. In this case, num_rejected_bits == 24.\n-\/\/ Let's study what happens in different cases to see that the simplification into\n-\/\/ (StoreB ... (LShiftI _ valIn (conIL - conIR)) )\n-\/\/ is valid if:\n+\/\/ Let's assume we have the following 32 bits integer v:\n+\/\/ +----------------------------------+\n+\/\/ |             v[0..31]             |\n+\/\/ +----------------------------------+\n+\/\/  31                               0\n+\/\/ that will be stuffed in 8 bits byte after a shift left and a shift right of\n+\/\/ potentially different magnitudes.\n+\/\/ We denote num_rejected_bits the number of bits of the discarded part. In this\n+\/\/ case, num_rejected_bits == 24.\n+\/\/ Let's study different cases of (RShiftI _ (LShiftI _ v conIL) conIR).\n+\/\/ Eventually, we show that the simplification into (LShiftI _ v (conIL-conIR))\n+\/\/ is valid if (but not iff):\n@@ -3548,2 +3549,4 @@\n-\/\/ Let's also remember that conIL < 32 since (x << 33) is simplified into (x << 1)\n-\/\/ and (x << 31) << 2 is simplified into 0. This means that in any case, after the\n+\/\/ Remembering that only the 8 lower bits have to be correct.\n+\/\/\n+\/\/ Let's also remember that conIL < 32 since (v << 33) is simplified into (v << 1)\n+\/\/ and (v << 31) << 2 is simplified into 0. This means that in any case, after the\n@@ -3596,1 +3599,1 @@\n-\/\/ The bits 4 and 5 of v are still present, but outside of the kept bits (the 8 lower ones).\n+\/\/ The bits 4 and 5 of v are still present, but outside the kept bits (the 8 lower ones).\n@@ -3616,1 +3619,1 @@\n-\/\/ Simplifying this as (X << 2) is not correct.\n+\/\/ Simplifying this as (v << 2) is not correct.\n@@ -3627,1 +3630,1 @@\n-\/\/ (StoreB ... (RShiftI _ (LShiftI _ valIn conIL ) conIR) )\n+\/\/ (StoreB ... (RShiftI _ (LShiftI _ v conIL) conIR))\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":29,"deletions":26,"binary":false,"changes":55,"status":"modified"}]}