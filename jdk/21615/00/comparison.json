{"files":[{"patch":"@@ -547,0 +547,11 @@\n+#ifndef MUSL_LIBC\n+  \/\/ Add XMM registers + MXCSR. Note that C2 uses XMM to spill GPR values including pointers.\n+  st->cr();\n+  st->cr();\n+  for (int i = 0; i < 16; ++i) {\n+    const __uint32_t *xmm = &(uc->__fpregs_mem._xmm[i].element[0]);\n+    st->print_cr(\"XMM[%d]=\" INTPTR_FORMAT \" \" INTPTR_FORMAT,\n+                 i, (uint64_t)xmm[3] << 32 | (uint64_t)xmm[2], (uint64_t)xmm[1] << 32 | (uint64_t)xmm[0]);\n+  }\n+  st->print(\"  MXCSR=\" UINT32_FORMAT_X_0, uc->__fpregs_mem.mxcsr);\n+#endif\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -440,0 +440,9 @@\n+  \/\/ Add XMM registers + MXCSR. Note that C2 uses XMM to spill GPR values including pointers.\n+  st->cr();\n+  st->cr();\n+  for (int i = 0; i < 16; ++i) {\n+    const uint64_t *xmm = ((const uint64_t*)&(uc->Xmm0)) + 2 * i;\n+    st->print_cr(\"XMM[%d]=\" INTPTR_FORMAT \" \" INTPTR_FORMAT,\n+                 i, xmm[1], xmm[0]);\n+  }\n+  st->print(\"  MXCSR=\" UINT32_FORMAT_X_0, uc->MxCsr);\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}