{"files":[{"patch":"@@ -107,1 +107,0 @@\n-    private static final boolean isWindows = System.getProperty(\"os.name\") .startsWith(\"Windows\");\n@@ -295,1 +294,2 @@\n-    private FileSystem createEmptyZipFile(Path zpath, Map<String, Object> env) throws IOException {\n+    \/\/ The caller is responsible for closing the FileSystem returned by this method\n+    private FileSystem createEmptyZipFileSystem(Path zpath, Map<String, Object> env) throws IOException {\n@@ -484,1 +484,1 @@\n-             FileSystem zipOut = createEmptyZipFile(ZIP_FILE_COPY, ENV_DEFAULT)) {\n+             FileSystem zipOut = createEmptyZipFileSystem(ZIP_FILE_COPY, ENV_DEFAULT)) {\n@@ -520,1 +520,1 @@\n-        try (FileSystem tgtZip = createEmptyZipFile(ZIP_FILE_COPY, ENV_POSIX)) {\n+        try (FileSystem tgtZip = createEmptyZipFileSystem(ZIP_FILE_COPY, ENV_POSIX)) {\n@@ -563,1 +563,1 @@\n-        try (FileSystem tgtZip = createEmptyZipFile(ZIP_FILE_COPY, ENV_POSIX)) {\n+        try (FileSystem tgtZip = createEmptyZipFileSystem(ZIP_FILE_COPY, ENV_POSIX)) {\n@@ -745,4 +745,0 @@\n-        \/\/ Temporarily skip test on Windows until intermittent failures are investigated\n-        if(isWindows) {\n-            return;\n-        }\n@@ -750,2 +746,1 @@\n-        createEmptyZipFile(ZIP_FILE, ENV_DEFAULT);\n-        try (FileSystem fs = FileSystems.newFileSystem(ZIP_FILE, ENV_DEFAULT)) {\n+        try (FileSystem fs = createEmptyZipFileSystem(ZIP_FILE, ENV_DEFAULT)) {\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -7,1 +7,0 @@\n-    permission java.util.PropertyPermission \"os.name\",\"read\";\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/test.policy.posix","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}