{"files":[{"patch":"@@ -4524,0 +4524,5 @@\n+      \/\/ Nested phi node, this Addp will go away when phi node is reduced\n+      if (addp_base->is_Phi()) {\n+        assert(reducible_merges.member(addp_base), \"nestedphi node must be part of reduce merge list\");\n+        continue;\n+      }\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n- * @run driver compiler.c2.irTests.scalarReplacement.AllocationMergesNestedPhiTests\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @run driver\/timeout=240000 compiler.c2.irTests.scalarReplacement.AllocationMergesNestedPhiTests\n@@ -50,2 +51,0 @@\n-                                             \"-XX:CompileCommand=inline,*::charAt*\",\n-                                             \"-XX:CompileCommand=inline,*PicturePositions::*\",\n@@ -63,2 +62,0 @@\n-                                             \"-XX:CompileCommand=inline,*::charAt*\",\n-                                             \"-XX:CompileCommand=inline,*PicturePositions::*\",\n@@ -75,0 +72,6 @@\n+                                             \"-XX:CompileCommand=inline,*Point::*\",\n+                                             \"-XX:CompileCommand=inline,*Nested::*\",\n+                                             \"-XX:CompileCommand=exclude,*::dummy*\");\n+\n+        Scenario scenario3 = new Scenario(3, \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                                             \"-XX:+UnlockDiagnosticVMOptions\",\n@@ -76,1 +79,0 @@\n-                                             \"-XX:CompileCommand=inline,*PicturePositions::*\",\n@@ -81,1 +83,1 @@\n-        framework.addScenarios(scenario0, scenario1, scenario2).start();\n+        framework.addScenarios(scenario0, scenario1, scenario2, scenario3).start();\n@@ -133,1 +135,1 @@\n-        Asserts.assertEQ(testMultiParentPhi_Interp(cond1, x, y),             testMultiParentPhi_C2(cond1, x, y));\n+        Asserts.assertEQ(testMultiParentPhi_Interp(cond1, x, y),                    testMultiParentPhi_C2(cond1, x, y));\n@@ -157,1 +159,1 @@\n-        applyIf = {\"EliminateAllocations\", \"true\"})\n+        applyIfAnd = {\"EliminateAllocations\", \"true\", \"DeoptimizeALot\", \"true\"})\n@@ -180,1 +182,1 @@\n-    @IR(counts = { IRNode.ALLOC, \">=1\", IRNode.SAFEPOINT_SCALAR_MERGE, \">=1\",  IRNode.SAFEPOINT_SCALAR_OBJECT, \">=2\"},\n+    @IR(counts = { IRNode.ALLOC, \">=1\", IRNode.SAFEPOINT_SCALAR_MERGE, \">=1\",  IRNode.SAFEPOINT_SCALAR_OBJECT, \">=1\"},\n@@ -375,1 +377,1 @@\n-    @IR(counts = { IRNode.ALLOC, \"2\" },\n+    @IR(counts = { IRNode.ALLOC, \"<=2\" },\n@@ -559,1 +561,1 @@\n-    @IR(counts = { IRNode.ALLOC, \"4\" },\n+    @IR(counts = { IRNode.ALLOC, \">=3\" },\n@@ -563,1 +565,1 @@\n-    @IR(counts = { IRNode.ALLOC, \"0\" },\n+    @IR(counts = { IRNode.ALLOC, \"<=2\" },\n@@ -723,73 +725,0 @@\n-    static class Picture {\n-        public int id;\n-        public Point position;\n-\n-        public Picture(int id, int x, int y) {\n-            this.id = id;\n-            this.position = new Point(x, y);\n-        }\n-    }\n-\n-    static class PicturePositions {\n-        public int id;\n-        public Point[] positions;\n-\n-        public PicturePositions(int id, int x, int y) {\n-            this.id = id;\n-            this.positions = new Point[] { new Point(x, y), new Point(y, x) };\n-        }\n-    }\n-\n-    class Root {\n-        public int a;\n-        public int b;\n-        public int c;\n-        public int d;\n-        public int e;\n-\n-        public Root(int a, int b, int c, int d, int e) {\n-            this.a = a;\n-            this.b = b;\n-            this.c = c;\n-            this.d = d;\n-            this.e = e;\n-        }\n-    }\n-\n-    class Usr extends Root {\n-        public float flt;\n-\n-        public Usr(float a, float b, float c) {\n-            super((int)a, (int)b, (int)c, 0, 0);\n-            this.flt = a;\n-        }\n-    }\n-\n-    class Home extends Root {\n-        public double[] arr;\n-\n-        public Home(double a, double b) {\n-            super((int)a, (int)b, 0, 0, 0);\n-            this.arr = new double[] {a, b};\n-        }\n-\n-    }\n-\n-    class Tmp extends Root {\n-        public String s;\n-\n-        public Tmp(String s) {\n-            super((int)s.length(), 0, 0, 0, 0);\n-            this.s = s;\n-        }\n-    }\n-\n-    class Etc extends Root {\n-        public String a;\n-\n-        public Etc(String s) {\n-            super((int)s.length(), 0, 0, 0, 0);\n-            this.a = s;\n-        }\n-    }\n-\n@@ -813,8 +742,0 @@\n-\n-    class A { }\n-    class B { }\n-    class C { }\n-    class D { }\n-    class E { }\n-    class F { }\n-    class G { }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/AllocationMergesNestedPhiTests.java","additions":15,"deletions":94,"binary":false,"changes":109,"status":"modified"}]}