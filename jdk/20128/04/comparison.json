{"files":[{"patch":"@@ -36,0 +36,19 @@\n+ * @apiNote\n+ * <h2><a id=objectOverrides>Guidance for overriding {@code Object}\n+ * methods<\/a><\/h2>\n+ *\n+ * {@code java.lang.Object} includes three {@code public} methods\n+ * overridable in subclasses, {@link #equals(Object)}, {@link\n+ * #hashCode()}, and {@link #toString()}. Each of these methods can be\n+ * called by any code that has access to an object of a\n+ * class. Especially if an object can be used by code in a separate\n+ * maintenance domain, any overrides of these methods should take care\n+ * to provide reasonable implementations of these methods. In\n+ * particular, the implementations should take care to avoid using\n+ * excessive memory, computational time, or any other resources.\n+ * Additionally, during typical operation these methods should\n+ * <em>not<\/em> throw any exception or other throwable; as always, a\n+ * {@link VirtualMachineError} is possible during the execution of a\n+ * method, often due to factors outside of the method's direct\n+ * control.\n+ *\n@@ -98,0 +117,12 @@\n+     * <p>This method should avoid throwing or propagating any\n+     * exceptions unless it legitimately <em>cannot<\/em> adhere to its\n+     * contract.\n+     *\n+     * The {@code hashCode} method may be called frequently, possibly\n+     * in the context of {@linkplain java.util##CollectionsFramework\n+     * collections}.\n+     *\n+     * As a quality of implementation concern, an implementation of\n+     * this method may or may not support generating hash codes for\n+     * cyclic data structures.\n+     *\n@@ -105,0 +136,1 @@\n+     * @see     ##objectOverrides Guidance for overriding {@code Object} methods\n@@ -155,0 +187,10 @@\n+     * <p>This method should avoid throwing or propagating any\n+     * exceptions unless it legitimately <em>cannot<\/em> adhere to its\n+     * contract.\n+     * In particular, {@link ClassCastException}\n+     * should not be thrown if the argument has an incomparable type\n+     * to this object and {@link NullPointerException} should not be\n+     * thrown if the argument is {@code null}; {@code false} should\n+     * be returned in those cases. The implementation should not use\n+     * excessive memory or time for its computations.\n+     *\n@@ -169,0 +211,1 @@\n+     * @see     ##objectOverrides Guidance for overriding {@code Object} methods\n@@ -253,0 +296,1 @@\n+     *\n@@ -268,0 +312,13 @@\n+     *\n+     * <p>This method should avoid throwing or propagating any\n+     * exceptions unless it legitimately <em>cannot<\/em> adhere to its\n+     * contract.\n+     * The implementation should not use excessive\n+     * memory or time for its computations. In particular, string\n+     * concatenation patterns that allocate an excessive number of\n+     * intermediate objects should be avoided. As as a quality of\n+     * implementation concern, a particular implementation of this\n+     * method may or may not support generating strings for cyclic\n+     * data structures.\n+     *\n+     * @see     ##objectOverrides Guidance for overriding {@code Object} methods\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Object.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"}]}