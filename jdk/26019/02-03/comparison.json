{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.ref.Reference;\n@@ -31,2 +32,0 @@\n-import java.lang.ref.Reference;\n-import java.util.concurrent.StructuredTaskScope;\n@@ -34,0 +33,1 @@\n+import java.util.concurrent.StructuredTaskScope;\n@@ -38,0 +38,1 @@\n+import jdk.internal.vm.ScopedValueContainer;\n@@ -40,1 +41,1 @@\n-import jdk.internal.vm.ScopedValueContainer;\n+import jdk.internal.vm.annotation.Stable;\n@@ -248,0 +249,3 @@\n+    @Stable\n+    static IntSupplier hashGenerator;\n+\n@@ -530,1 +534,1 @@\n-        this.hash = hashGenerator.getAsInt();\n+        this.hash = hashGenerator != null ? hashGenerator.getAsInt() : generateKey();\n@@ -706,10 +710,0 @@\n-    \/\/ This method exists only so that we can generate keys early in\n-    \/\/ the boot cycle, before the class j.u.c.ThreadLocalRandom has\n-    \/\/ been initialized.\n-    private static IntSupplier hashGenerator = new IntSupplier() {\n-        @Override\n-        public int getAsInt() {\n-            return generateKey();\n-        }\n-    };\n-\n@@ -759,1 +753,1 @@\n-        \/\/ hashGenerator which is used until CACHE_TABLE_SIZE is initialized.\n+        \/\/ hash generator which is used until CACHE_TABLE_SIZE is initialized.\n@@ -788,4 +782,4 @@\n-                \/\/ j.u.c.ThreadLocalRandom early in the JDK boot\n-                \/\/ process. After this static initialization block,\n-                \/\/ new instances of ScopedValue will be initialized by a\n-                \/\/ thread-local random generator.\n+                \/\/ j.u.c.ThreadLocalRandom early in the JDK boot process.\n+                \/\/ After this static initialization, new instances of\n+                \/\/ ScopedValue will be initialized by a thread-local\n+                \/\/ random generator.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopedValue.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-            sl1.get();  \/\/ Create the ScopedValue cache as a side effect\n@@ -64,1 +63,4 @@\n-                  .run(action);\n+                  .run(() -> {\n+                      sl1.get();  \/\/ Create the ScopedValue cache as a side effect\n+                      action.run();\n+                  });\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ScopedValuesData.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}