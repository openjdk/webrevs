{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -39,0 +38,2 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n@@ -94,0 +95,1 @@\n+    private static final String STOP_CHECK = \"stopCheck\";\n@@ -100,16 +102,1 @@\n-                            CodeTransform.ofStateful(() -> {\n-                                Set<Label> priorLabels = new HashSet<>();\n-                                AtomicBoolean methodEntry = new AtomicBoolean();\n-                                return (builder, element) -> {\n-                                    boolean insertStopCheck = methodEntry.compareAndSet(false, true);\n-                                    switch (element) {\n-                                        case LabelTarget target -> priorLabels.add(target.label());\n-                                        case BranchInstruction branch when priorLabels.contains(branch.target())\n-                                            -> insertStopCheck = true;\n-                                        default -> { }\n-                                    }\n-                                    if (insertStopCheck)\n-                                        builder.invokestatic(CD_Cancel, \"stopCheck\", ConstantDescs.MTD_void);\n-                                    builder.with(element);\n-                                };\n-                            })));\n+                            CodeTransform.ofStateful(StopCheckWeaver::new)));\n@@ -122,1 +109,1 @@\n-                .withMethodBody(\"stopCheck\", ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cob ->\n+                .withMethodBody(STOP_CHECK, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cob ->\n@@ -131,0 +118,25 @@\n+    \/\/ This inserts calls to REPL.$Cancel$.stopCheck() at method start and prior to any backward branch\n+    private static class StopCheckWeaver implements CodeTransform {\n+\n+        private final Set<Label> priorLabels = new HashSet<>();\n+\n+        @Override\n+        public void atStart(CodeBuilder builder) {\n+            stopCheck(builder);\n+        }\n+\n+        @Override\n+        public void accept(CodeBuilder builder, CodeElement element) {\n+            switch (element) {\n+                case LabelTarget target -> priorLabels.add(target.label());\n+                case BranchInstruction branch when priorLabels.contains(branch.target()) -> stopCheck(builder);\n+                default -> { }\n+            }\n+            builder.with(element);\n+        };\n+\n+        private void stopCheck(CodeBuilder builder) {\n+            builder.invokestatic(CD_Cancel, STOP_CHECK, ConstantDescs.MTD_void);\n+        }\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":30,"deletions":18,"binary":false,"changes":48,"status":"modified"}]}