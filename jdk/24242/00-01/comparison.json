{"files":[{"patch":"@@ -35,4 +35,3 @@\n-      OPTIMIZATION := LOW, \\\n-      JDK_LIBS := java.base:libjava, \\\n-      LIBS_unix := $(JDKLIB_LIBS) $(LIBCXX), \\\n-      LIBS_windows := $(JDKLIB_LIBS) user32.lib, \\\n+      OPTIMIZATION := SIZE, \\\n+      EXTRA_HEADER_DIRS := java.base:libjava, \\\n+      LIBS_windows := user32.lib, \\\n","filename":"make\/modules\/jdk.internal.le\/Lib.gmk","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -172,1 +172,0 @@\n-        jdk.internal.le,\n@@ -303,2 +302,1 @@\n-        jdk.charsets,\n-        jdk.internal.le;\n+        jdk.charsets;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,4 @@\n+        if (!NativeConsoleReader.isSupported()) {\n+            return null;\n+        }\n+\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/console\/JdkConsoleProviderImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,4 @@\n-    public static char[] doRead(Reader reader, Writer out, boolean password, int firstLineOffset, IntSupplier terminalWidthSupplier) throws IOException {\n+    public static char[] doRead(Reader reader,\n+                                Writer out,\n+                                boolean password,\n+                                TerminalConfiguration terminalConfig) throws IOException {\n@@ -44,1 +47,1 @@\n-            doReadImpl(reader, out, password, firstLineOffset, terminalWidthSupplier, result);\n+            doReadImpl(reader, out, password, terminalConfig, result);\n@@ -51,1 +54,5 @@\n-    private static void doReadImpl(Reader reader, Writer out, boolean password, int firstLineOffset, IntSupplier terminalWidthSupplier, CleanableBuffer result) throws IOException {\n+    private static void doReadImpl(Reader reader,\n+                                   Writer out,\n+                                   boolean password,\n+                                   TerminalConfiguration terminalConfiguration,\n+                                   CleanableBuffer result) throws IOException {\n@@ -55,0 +62,1 @@\n+        int firstLineOffset = terminalConfiguration.firstLineOffset();\n@@ -59,1 +67,3 @@\n-                prevState = repaint(out, firstLineOffset, terminalWidthSupplier, result.data, result.length, caret, prevState);\n+                prevState = repaint(out, firstLineOffset,\n+                                    terminalConfiguration.terminalWidthSupplier(),\n+                                    result.data, result.length, caret, prevState);\n@@ -64,0 +74,12 @@\n+\n+            if (r == terminalConfiguration.eraseControlCharacter()) {\n+                \/\/backspace:\n+                if (caret > 0) {\n+                    result.delete(caret - 1, caret);\n+                    caret--;\n+                }\n+                continue READ;\n+            } else if (r == terminalConfiguration.eofControlCharacter()) {\n+                break READ;\n+            }\n+\n@@ -67,8 +89,0 @@\n-                case 4: break READ; \/\/EOF\/Ctrl-D\n-                case 127:\n-                    \/\/backspace:\n-                    if (caret > 0) {\n-                        result.delete(caret - 1, caret);\n-                        caret--;\n-                    }\n-                    continue READ;\n@@ -138,1 +152,3 @@\n-            repaint(out, firstLineOffset, terminalWidthSupplier, result.data, result.length, caret, prevState);\n+            repaint(out, firstLineOffset,\n+                    terminalConfiguration.terminalWidthSupplier(),\n+                    result.data, result.length, caret, prevState);\n@@ -144,1 +160,7 @@\n-    private static PaintState repaint(Writer out, int firstLineOffset, IntSupplier terminalWidthSupplier, int[] toDisplay, int toDisplayLength, int caret, PaintState prevPaintState) throws IOException {\n+    private static PaintState repaint(Writer out,\n+                                      int firstLineOffset,\n+                                      IntSupplier terminalWidthSupplier,\n+                                      int[] toDisplay,\n+                                      int toDisplayLength,\n+                                      int caret,\n+                                      PaintState prevPaintState) throws IOException {\n@@ -239,0 +261,4 @@\n+    public record TerminalConfiguration(int firstLineOffset,\n+                                        int eofControlCharacter,\n+                                        int eraseControlCharacter,\n+                                        IntSupplier terminalWidthSupplier) {}\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/console\/SimpleConsoleReader.java","additions":40,"deletions":14,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.console.SimpleConsoleReader.TerminalConfiguration;\n@@ -33,0 +34,10 @@\n+    private static final int CONTROL_EOF_OFFSET = 0;\n+    private static final int CONTROL_ERASE_OFFSET = 1;\n+    private static final int CONTROL_CHARS_LEN = 2;\n+\n+    private static final boolean supported;\n+\n+    public static boolean isSupported() {\n+        return supported;\n+    }\n+\n@@ -34,1 +45,2 @@\n-        byte[] originalTermios = switchToRaw();\n+        int[] controlCharacters = new int[CONTROL_CHARS_LEN];\n+        byte[] originalTermios = switchToRaw(controlCharacters);\n@@ -42,1 +54,6 @@\n-            return SimpleConsoleReader.doRead(reader, out, password, -1, () -> width);\n+            TerminalConfiguration terminalConfig = new TerminalConfiguration(\n+                    -1,\n+                    controlCharacters[CONTROL_EOF_OFFSET],\n+                    controlCharacters[CONTROL_ERASE_OFFSET],\n+                    () -> width);\n+            return SimpleConsoleReader.doRead(reader, out, password, terminalConfig);\n@@ -50,1 +67,10 @@\n-        loadNativeLibrary();\n+        boolean initialized;\n+\n+        try {\n+            loadNativeLibrary();\n+            initialized = true;\n+        } catch (UnsatisfiedLinkError err) {\n+            initialized = false;\n+        }\n+\n+        supported = initialized;\n@@ -60,1 +86,1 @@\n-    private static native byte[] switchToRaw();\n+    private static native byte[] switchToRaw(int[] controlCharacters);\n","filename":"src\/jdk.internal.le\/unix\/classes\/jdk\/internal\/console\/NativeConsoleReader.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+#define CONTROL_EOF_OFFSET 0\n+#define CONTROL_ERASE_OFFSET 1\n+\n@@ -52,1 +55,1 @@\n-  (JNIEnv *env, jclass) {\n+  (JNIEnv *env, jclass, jintArray controlCharacters) {\n@@ -73,0 +76,7 @@\n+    jint controlChars[2] = {\n+        data.c_cc[VEOF],\n+        data.c_cc[VERASE],\n+    };\n+\n+    env->SetIntArrayRegion(controlCharacters, 0, 2, controlChars);\n+\n","filename":"src\/jdk.internal.le\/unix\/native\/lible\/NativeConsoleReader.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.console.SimpleConsoleReader.TerminalConfiguration;\n@@ -35,0 +36,4 @@\n+    public static boolean isSupported() {\n+        return supported;\n+    }\n+\n@@ -43,1 +48,6 @@\n-            return SimpleConsoleReader.doRead(in, out, password, firstLineOffset, () -> width.get());\n+            TerminalConfiguration terminalConfig = new TerminalConfiguration(\n+                    firstLineOffset,\n+                    VEOF,\n+                    VERASE,\n+                    () -> width.get());\n+            return SimpleConsoleReader.doRead(in, out, password, terminalConfig);\n","filename":"src\/jdk.internal.le\/windows\/classes\/jdk\/internal\/console\/NativeConsoleReader.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+    public static final int VEOF = 4;\n+    public static final int VERASE = 127;\n+\n@@ -163,1 +166,1 @@\n-                    escapeSequence = \"\\u007F\";\n+                    escapeSequence = Character.toString(VERASE);\n","filename":"src\/jdk.internal.le\/windows\/classes\/jdk\/internal\/console\/WindowsTerminal.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-\/\/#include <wincon.h>\n-\/\/#include <winuser.h>\n","filename":"src\/jdk.internal.le\/windows\/native\/lible\/WindowsTerminal.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.internal.console.SimpleConsoleReader.TerminalConfiguration;\n@@ -62,1 +63,4 @@\n-        char[] read = SimpleConsoleReader.doRead(new StringReader(input), new StringWriter(), false, 0, () -> Integer.MAX_VALUE);\n+        char[] read = SimpleConsoleReader.doRead(new StringReader(input),\n+                                                 new StringWriter(),\n+                                                 false,\n+                                                 createTerminalConfig(Integer.MAX_VALUE));\n@@ -70,1 +74,4 @@\n-                SimpleConsoleReader.doRead(terminal.getInput(), terminal.getOutput(), false, 0, () -> terminal.width);\n+                SimpleConsoleReader.doRead(terminal.getInput(),\n+                                           terminal.getOutput(),\n+                                           false,\n+                                           createTerminalConfig(terminal.width));\n@@ -100,1 +107,4 @@\n-            char[] read = SimpleConsoleReader.doRead(new StringReader(input), new StringWriter(), false, 0, () -> Integer.MAX_VALUE);\n+            char[] read = SimpleConsoleReader.doRead(new StringReader(input),\n+                                                     new StringWriter(),\n+                                                     false,\n+                                                     createTerminalConfig(Integer.MAX_VALUE));\n@@ -108,1 +118,4 @@\n-            char[] read = SimpleConsoleReader.doRead(new StringReader(input), new StringWriter(), false, 0, () -> Integer.MAX_VALUE);\n+            char[] read = SimpleConsoleReader.doRead(new StringReader(input),\n+                                                     new StringWriter(),\n+                                                     false,\n+                                                     createTerminalConfig(Integer.MAX_VALUE));\n@@ -116,1 +129,4 @@\n-                    SimpleConsoleReader.doRead(terminal.getInput(), terminal.getOutput(), false, 0, () -> terminal.width);\n+                    SimpleConsoleReader.doRead(terminal.getInput(),\n+                                               terminal.getOutput(),\n+                                               false,\n+                                               createTerminalConfig(terminal.width));\n@@ -144,1 +160,4 @@\n-                    SimpleConsoleReader.doRead(terminal.getInput(), terminal.getOutput(), false, 0, () -> terminal.width);\n+                    SimpleConsoleReader.doRead(terminal.getInput(),\n+                                               terminal.getOutput(),\n+                                               false,\n+                                               createTerminalConfig(terminal.width));\n@@ -174,1 +193,4 @@\n-                    SimpleConsoleReader.doRead(terminal.getInput(), terminal.getOutput(), false, 0, () -> terminal.width);\n+                    SimpleConsoleReader.doRead(terminal.getInput(),\n+                                               terminal.getOutput(),\n+                                               false,\n+                                               createTerminalConfig(terminal.width));\n@@ -191,0 +213,4 @@\n+    private static TerminalConfiguration createTerminalConfig(int width) {\n+        return new TerminalConfiguration(0, 4, 127, () -> width);\n+    }\n+\n","filename":"test\/jdk\/jdk\/internal\/io\/JdkConsoleImplConsoleTest.java","additions":33,"deletions":7,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -56,1 +56,2 @@\n-        doRunConsoleTest(\"testCorrectOutputReadPassword\", \"inp\", \"%s\" + NL); \/\/see BaseJdkConsoleImpl.readPassword re the NL\n+        doRunConsoleTest(\"testCorrectOutputReadPassword\", \"inp\",\n+                         \"%s\" + NL); \/\/see BaseJdkConsoleImpl.readPassword re the NL\n","filename":"test\/jdk\/jdk\/internal\/jline\/JLineConsoleProviderTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}