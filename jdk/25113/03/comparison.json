{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.io.IOException;\n@@ -37,0 +38,1 @@\n+import java.nio.file.Files;\n@@ -142,0 +144,1 @@\n+            root = realPath(root);\n@@ -155,0 +158,19 @@\n+    private static Path realPath(Path root) {\n+\n+        \/\/ `toRealPath()` invocation below already checks if file exists, though\n+        \/\/ there is no way to figure out if it fails due to a non-existent file.\n+        \/\/ Hence, checking the existence here first to deliver the user a more\n+        \/\/ descriptive message.\n+        if (!Files.exists(root)) {\n+            throw new IllegalArgumentException(\"Path does not exist: \" + root);\n+        }\n+\n+        \/\/ Obtain the real path\n+        try {\n+            return root.toRealPath();\n+        } catch (IOException exception) {\n+            throw new IllegalArgumentException(\"Path is invalid: \" + root, exception);\n+        }\n+\n+    }\n+\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerImpl.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -171,10 +171,0 @@\n-    @Test(dataProvider = \"directoryOptions\")\n-    public void testRootNotAbsolute(String opt) throws Throwable {\n-        out.println(\"\\n--- testRootNotAbsolute, opt=\\\"%s\\\" \".formatted(opt));\n-        var root = Path.of(\".\");\n-        assertFalse(root.isAbsolute());\n-        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, root.toString())\n-                .shouldNotHaveExitValue(0)\n-                .shouldContain(\"Error: server config failed: \" + \"Path is not absolute:\");\n-    }\n-\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLineNegativeTest.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.io.UncheckedIOException;\n@@ -55,4 +56,29 @@\n-    static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n-    static final Path TEST_DIR = CWD.resolve(\"CommandLinePositiveTest\");\n-    static final Path TEST_FILE = TEST_DIR.resolve(\"file.txt\");\n-    static final String TEST_DIR_STR = TEST_DIR.toString();\n+\n+    \/**\n+     * The <b>real path<\/b> to the current working directory where\n+     * <ol>\n+     * <li>the web server process will be started in,<\/li>\n+     * <li>and hence, unless given an explicit content root directory, the web\n+     * server will be serving from.<\/li>\n+     * <\/ol>\n+     *\/\n+    private static final Path CWD;\n+\n+    static {\n+        try {\n+            CWD = Path.of(\".\").toRealPath();\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+    }\n+\n+    private static final String CWD_STR = CWD.toString();\n+\n+    \/**\n+     * The <b>real path<\/b> to the web server content root directory, if one\n+     * needs to be provided explicitly.\n+     *\/\n+    private static final Path ROOT_DIR = CWD.resolve(\"www\");\n+\n+    private static final String ROOT_DIR_STR = ROOT_DIR.toString();\n+\n@@ -63,2 +89,2 @@\n-        if (Files.exists(TEST_DIR)) {\n-            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        if (Files.exists(ROOT_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(ROOT_DIR);\n@@ -66,2 +92,2 @@\n-        Files.createDirectories(TEST_DIR);\n-        Files.createFile(TEST_FILE);\n+        Files.createDirectories(ROOT_DIR);\n+        Files.createFile(ROOT_DIR.resolve(\"file.txt\"));\n@@ -86,3 +112,14 @@\n-    public void testDirectory(String opt) throws Throwable {\n-        out.println(\"\\n--- testDirectory, opt=\\\"%s\\\" \".formatted(opt));\n-        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, TEST_DIR_STR)\n+    public void testAbsDirectory(String opt) throws Throwable {\n+        out.printf(\"\\n--- testAbsDirectory, opt=\\\"%s\\\"%n\", opt);\n+        testDirectory(opt, ROOT_DIR_STR);\n+    }\n+\n+    @Test(dataProvider = \"directoryOptions\")\n+    public void testRelDirectory(String opt) throws Throwable {\n+        out.printf(\"\\n--- testRelDirectory, opt=\\\"%s\\\"%n\", opt);\n+        Path rootRelDir = CWD.relativize(ROOT_DIR);\n+        testDirectory(opt, rootRelDir.toString());\n+    }\n+\n+    private static void testDirectory(String opt, String rootDir) throws Throwable {\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, rootDir)\n@@ -91,1 +128,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + ROOT_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -104,1 +141,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -158,1 +195,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n@@ -163,1 +200,1 @@\n-                    .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                    .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n@@ -173,1 +210,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -181,1 +218,1 @@\n-        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, TEST_DIR_STR, opt, TEST_DIR_STR)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, ROOT_DIR_STR, opt, ROOT_DIR_STR)\n@@ -184,1 +221,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + ROOT_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -197,1 +234,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -207,1 +244,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -213,2 +250,2 @@\n-        if (Files.exists(TEST_DIR)) {\n-            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        if (Files.exists(ROOT_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(ROOT_DIR);\n@@ -250,1 +287,1 @@\n-                new ProcessBuilder(args).directory(TEST_DIR.toFile()),\n+                new ProcessBuilder(args),\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":60,"deletions":23,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -671,8 +671,0 @@\n-        {   \/\/ not absolute\n-            Path p = Path.of(\".\");\n-            assert Files.isDirectory(p);\n-            assert Files.exists(p);\n-            assert !p.isAbsolute();\n-            var iae = expectThrows(IAE, () -> SimpleFileServer.createFileServer(addr, p, OutputLevel.INFO));\n-            assertTrue(iae.getMessage().contains(\"is not absolute\"));\n-        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -171,10 +171,0 @@\n-    @Test(dataProvider = \"directoryOptions\")\n-    public void testRootNotAbsolute(String opt) throws Throwable {\n-        out.println(\"\\n--- testRootNotAbsolute, opt=\\\"%s\\\" \".formatted(opt));\n-        var root = Path.of(\".\");\n-        assertFalse(root.isAbsolute());\n-        simpleserver(JWEBSERVER, LOCALE_OPT, opt, root.toString())\n-                .shouldNotHaveExitValue(0)\n-                .shouldContain(\"Error: server config failed: \" + \"Path is not absolute:\");\n-    }\n-\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLineNegativeTest.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.io.UncheckedIOException;\n@@ -55,4 +56,29 @@\n-    static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n-    static final Path TEST_DIR = CWD.resolve(\"CommandLinePositiveTest\");\n-    static final Path TEST_FILE = TEST_DIR.resolve(\"file.txt\");\n-    static final String TEST_DIR_STR = TEST_DIR.toString();\n+\n+    \/**\n+     * The <b>real path<\/b> to the current working directory where\n+     * <ol>\n+     * <li>the web server process will be started in,<\/li>\n+     * <li>and hence, unless given an explicit content root directory, the web\n+     * server will be serving from.<\/li>\n+     * <\/ol>\n+     *\/\n+    private static final Path CWD;\n+\n+    static {\n+        try {\n+            CWD = Path.of(\".\").toRealPath();\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+    }\n+\n+    private static final String CWD_STR = CWD.toString();\n+\n+    \/**\n+     * The <b>real path<\/b> to the web server content root directory, if one\n+     * needs to be provided explicitly.\n+     *\/\n+    private static final Path ROOT_DIR = CWD.resolve(\"www\");\n+\n+    private static final String ROOT_DIR_STR = ROOT_DIR.toString();\n+\n@@ -63,2 +89,2 @@\n-        if (Files.exists(TEST_DIR)) {\n-            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        if (Files.exists(ROOT_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(ROOT_DIR);\n@@ -66,2 +92,2 @@\n-        Files.createDirectories(TEST_DIR);\n-        Files.createFile(TEST_FILE);\n+        Files.createDirectories(ROOT_DIR);\n+        Files.createFile(ROOT_DIR.resolve(\"file.txt\"));\n@@ -86,3 +112,14 @@\n-    public void testDirectory(String opt) throws Throwable {\n-        out.println(\"\\n--- testDirectory, opt=\\\"%s\\\" \".formatted(opt));\n-        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, TEST_DIR_STR)\n+    public void testAbsDirectory(String opt) throws Throwable {\n+        out.printf(\"\\n--- testAbsDirectory, opt=\\\"%s\\\"%n\", opt);\n+        testDirectory(opt, ROOT_DIR_STR);\n+    }\n+\n+    @Test(dataProvider = \"directoryOptions\")\n+    public void testRelDirectory(String opt) throws Throwable {\n+        out.printf(\"\\n--- testRelDirectory, opt=\\\"%s\\\"%n\", opt);\n+        Path rootRelDir = CWD.relativize(ROOT_DIR);\n+        testDirectory(opt, rootRelDir.toString());\n+    }\n+\n+    private static void testDirectory(String opt, String rootDir) throws Throwable {\n+        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, rootDir)\n@@ -91,1 +128,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + ROOT_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -104,1 +141,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -158,1 +195,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n@@ -163,1 +200,1 @@\n-                    .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                    .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n@@ -173,1 +210,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -181,1 +218,1 @@\n-        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, TEST_DIR_STR, opt, TEST_DIR_STR)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, CWD_STR, opt, CWD_STR)\n@@ -184,1 +221,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -197,1 +234,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -207,1 +244,1 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + CWD_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n@@ -213,2 +250,2 @@\n-        if (Files.exists(TEST_DIR)) {\n-            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        if (Files.exists(ROOT_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(ROOT_DIR);\n@@ -250,1 +287,1 @@\n-                new ProcessBuilder(args).directory(TEST_DIR.toFile()),\n+                new ProcessBuilder(args),\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePositiveTest.java","additions":60,"deletions":23,"binary":false,"changes":83,"status":"modified"}]}