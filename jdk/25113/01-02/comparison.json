{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,5 +48,6 @@\n- * A basic HTTP file server handler for static content.\n- *\n- * <p> Must be given an absolute pathname to the directory to be served.\n- * Supports only HEAD and GET requests. Directory listings and files can be\n- * served, content types are supported on a best-guess basis.\n+ * A basic {@linkplain HttpHandler HTTP handler} for static content.\n+ * <p>\n+ * Only {@code HEAD} and {@code GET} requests are supported.\n+ * Directory listings and files can be served.\n+ * Content types are supported on a best-guess basis.\n+ * <\/p>\n@@ -68,10 +69,1 @@\n-        root = root.normalize();\n-        if (!Files.exists(root))\n-            throw new IllegalArgumentException(\"Path does not exist: \" + root);\n-        if (!root.isAbsolute())\n-            throw new IllegalArgumentException(\"Path is not absolute: \" + root);\n-        if (!Files.isDirectory(root))\n-            throw new IllegalArgumentException(\"Path is not a directory: \" + root);\n-        if (!Files.isReadable(root))\n-            throw new IllegalArgumentException(\"Path is not readable: \" + root);\n-        this.root = root;\n+        this.root = readRoot(root);\n@@ -82,0 +74,23 @@\n+    private static Path readRoot(Path root) {\n+        \/\/ `toRealPath()` invocation below already checks if file exists, though\n+        \/\/ there is no way to figure out if it fails due to a non-existent file.\n+        \/\/ Hence, checking the existence here first to deliver the user a more\n+        \/\/ descriptive message.\n+        if (!Files.exists(root)) {\n+            throw new IllegalArgumentException(\"Path does not exist: \" + root);\n+        }\n+        Path realRoot;\n+        try {\n+            realRoot = root.toRealPath();\n+        } catch (IOException exception) {\n+            throw new IllegalArgumentException(\"Path is invalid: \" + root, exception);\n+        }\n+        if (!Files.isDirectory(realRoot)) {\n+            throw new IllegalArgumentException(\"Path is not a directory: \" + realRoot);\n+        }\n+        if (!Files.isReadable(realRoot)) {\n+            throw new IllegalArgumentException(\"Path is not readable: \" + realRoot);\n+        }\n+        return realRoot;\n+    }\n+\n@@ -214,1 +229,0 @@\n-            assert root.isAbsolute() && Files.isDirectory(root);  \/\/ checked during creation\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":31,"deletions":17,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n-                        root = Path.of(optionArg = options.next()).toRealPath();\n+                        root = Path.of(optionArg = options.next());\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-                .shouldContain(\"Serving \" + ROOT_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + rootDir + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -671,8 +671,0 @@\n-        {   \/\/ not absolute\n-            Path p = Path.of(\".\");\n-            assert Files.isDirectory(p);\n-            assert Files.exists(p);\n-            assert !p.isAbsolute();\n-            var iae = expectThrows(IAE, () -> SimpleFileServer.createFileServer(addr, p, OutputLevel.INFO));\n-            assertTrue(iae.getMessage().contains(\"is not absolute\"));\n-        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-                .shouldContain(\"Serving \" + ROOT_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + rootDir + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePositiveTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}