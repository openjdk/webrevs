{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,6 +48,5 @@\n- * A basic {@linkplain HttpHandler HTTP handler} for static content.\n- * <p>\n- * Only {@code HEAD} and {@code GET} requests are supported.\n- * Directory listings and files can be served.\n- * Content types are supported on a best-guess basis.\n- * <\/p>\n+ * A basic HTTP file server handler for static content.\n+ *\n+ * <p> Must be given an absolute pathname to the directory to be served.\n+ * Supports only HEAD and GET requests. Directory listings and files can be\n+ * served, content types are supported on a best-guess basis.\n@@ -69,1 +68,10 @@\n-        this.root = readRoot(root);\n+        root = root.normalize();\n+        if (!Files.exists(root))\n+            throw new IllegalArgumentException(\"Path does not exist: \" + root);\n+        if (!root.isAbsolute())\n+            throw new IllegalArgumentException(\"Path is not absolute: \" + root);\n+        if (!Files.isDirectory(root))\n+            throw new IllegalArgumentException(\"Path is not a directory: \" + root);\n+        if (!Files.isReadable(root))\n+            throw new IllegalArgumentException(\"Path is not readable: \" + root);\n+        this.root = root;\n@@ -74,23 +82,0 @@\n-    private static Path readRoot(Path root) {\n-        \/\/ `toRealPath()` invocation below already checks if file exists, though\n-        \/\/ there is no way to figure out if it fails due to a non-existent file.\n-        \/\/ Hence, checking the existence here first to deliver the user a more\n-        \/\/ descriptive message.\n-        if (!Files.exists(root)) {\n-            throw new IllegalArgumentException(\"Path does not exist: \" + root);\n-        }\n-        Path realRoot;\n-        try {\n-            realRoot = root.toRealPath();\n-        } catch (IOException exception) {\n-            throw new IllegalArgumentException(\"Path is invalid: \" + root, exception);\n-        }\n-        if (!Files.isDirectory(realRoot)) {\n-            throw new IllegalArgumentException(\"Path is not a directory: \" + realRoot);\n-        }\n-        if (!Files.isReadable(realRoot)) {\n-            throw new IllegalArgumentException(\"Path is not readable: \" + realRoot);\n-        }\n-        return realRoot;\n-    }\n-\n@@ -229,0 +214,1 @@\n+            assert root.isAbsolute() && Files.isDirectory(root);  \/\/ checked during creation\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":17,"deletions":31,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.io.IOException;\n@@ -37,0 +38,1 @@\n+import java.nio.file.Files;\n@@ -142,0 +144,1 @@\n+            root = realPath(root);\n@@ -155,0 +158,19 @@\n+    private static Path realPath(Path root) {\n+\n+        \/\/ `toRealPath()` invocation below already checks if file exists, though\n+        \/\/ there is no way to figure out if it fails due to a non-existent file.\n+        \/\/ Hence, checking the existence here first to deliver the user a more\n+        \/\/ descriptive message.\n+        if (!Files.exists(root)) {\n+            throw new IllegalArgumentException(\"Path does not exist: \" + root);\n+        }\n+\n+        \/\/ Obtain the real path\n+        try {\n+            return root.toRealPath();\n+        } catch (IOException exception) {\n+            throw new IllegalArgumentException(\"Path is invalid: \" + root, exception);\n+        }\n+\n+    }\n+\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerImpl.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-                .shouldContain(\"Serving \" + rootDir + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + ROOT_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-                .shouldContain(\"Serving \" + rootDir + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"Serving \" + ROOT_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePositiveTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}