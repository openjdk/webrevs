{"files":[{"patch":"@@ -2950,0 +2950,1 @@\n+    ConditionalMutexLocker throttle_ml(ThreadsLockThrottle_lock, UseThreadsLockThrottleLock);\n@@ -2952,1 +2953,1 @@\n-    MutexLocker mu(Threads_lock);\n+    MutexLocker ml(Threads_lock);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1997,0 +1997,4 @@\n+                                                                            \\\n+  product(bool, UseThreadsLockThrottleLock, true, DIAGNOSTIC,               \\\n+          \"Use an extra lock during Thread start and exit to alleviate\"     \\\n+          \"contention on Threads_lock.\")                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+Monitor* ThreadsLockThrottle_lock     = nullptr;\n@@ -321,0 +322,2 @@\n+  MUTEX_DEFN(ThreadsLockThrottle_lock        , PaddedMonitor, safepoint);\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+extern Monitor* ThreadsLockThrottle_lock;        \/\/ used by Thread start\/exit to reduce competition for Threads_lock,\n+                                                 \/\/ so a VM thread calling a safepoint is prioritized\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1031,1 +1031,3 @@\n-  { MonitorLocker ml(Threads_lock);\n+  {\n+    ConditionalMutexLocker throttle_ml(ThreadsLockThrottle_lock, UseThreadsLockThrottleLock);\n+    MonitorLocker ml(Threads_lock);\n@@ -1079,1 +1081,1 @@\n-  } \/\/ unlock Threads_lock\n+  } \/\/ unlock Threads_lock and ThreadsLockThrottle_lock\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}