{"files":[{"patch":"@@ -2949,4 +2949,1 @@\n-    \/\/ VM thread needs Threads_lock when announcing a safepoint. We do not\n-    \/\/ want StartThread to delay safepoint, so we wrap with this second lock\n-    \/\/ to reduce competition for Threads_lock.\n-    ConditionalMutexLocker ml1(ThreadStart_lock, UseThreadStartLock);\n+    ConditionalMutexLocker ml1(ThreadsLockThrottle_lock, UseThreadsLockThrottleLock);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2001,3 +2001,3 @@\n-  product(bool, UseThreadStartLock, true, DIAGNOSTIC,                       \\\n-          \"Use an extra lock during Thread.start to alleviate contention \"  \\\n-          \"on threads lock.\")                                               \\\n+  product(bool, UseThreadsLockThrottleLock, true, DIAGNOSTIC,               \\\n+          \"Use an extra lock during Thread start and exit to alleviate\"     \\\n+          \"contention on threads lock.\")                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-Monitor* ThreadStart_lock             = nullptr;\n+Monitor* ThreadsLockThrottle_lock     = nullptr;\n@@ -322,1 +322,1 @@\n-  MUTEX_DEFN(ThreadStart_lock                , PaddedMonitor, safepoint);\n+  MUTEX_DEFN(ThreadsLockThrottle_lock        , PaddedMonitor, safepoint);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,2 @@\n-extern Monitor* ThreadStart_lock;                \/\/ used by JVM_ThreadStart to serialize requests for Threads_lock\n+extern Monitor* ThreadsLockThrottle_lock;        \/\/ used by Thread start\/stop to reduce competition for Threads_lock,\n+                                                 \/\/ so a VM thread calling a safepoint is prioritized\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1030,1 +1030,3 @@\n-  { MonitorLocker ml(Threads_lock);\n+  {\n+    ConditionalMutexLocker ml1(ThreadsLockThrottle_lock, UseThreadsLockThrottleLock);\n+    MonitorLocker ml2(Threads_lock);\n@@ -1065,1 +1067,1 @@\n-        ml.notify_all();\n+        ml2.notify_all();\n@@ -1078,1 +1080,1 @@\n-  } \/\/ unlock Threads_lock\n+  } \/\/ unlock Threads_lock and ThreadsLockThrottle_lock\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}