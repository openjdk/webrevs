{"files":[{"patch":"@@ -2918,1 +2918,0 @@\n-\n@@ -2950,0 +2949,5 @@\n+    \/\/ VM thread needs Threads_lock when announcing a safepoint. We do not\n+    \/\/ want StartThread to delay safepoint, so we wrap with this second lock\n+    \/\/ to reduce competition for Threads_lock.\n+    ConditionalMutexLocker mu1(ThreadStart_lock, UseExtraThreadStartLock\n+                               && Universe::is_fully_initialized());\n@@ -2952,1 +2956,1 @@\n-    MutexLocker mu(Threads_lock);\n+    MutexLocker mu2(Threads_lock);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2000,0 +2000,4 @@\n+                                                                            \\\n+  product(bool, UseThreadStartLock, true, DIAGNOSTIC,                       \\\n+          \"Use an extra lock in JVM_ThreadStart to reduce \"                 \\\n+          \"time-to-safepoint while creating threads.\")                      \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+Monitor* ThreadStart_lock             = nullptr;\n@@ -330,1 +331,2 @@\n-  MUTEX_DEFL(Threads_lock                   , PaddedMonitor, CompileThread_lock, true);\n+  MUTEX_DEFL(ThreadStart_lock               , PaddedMonitor, CompileThread_lock);\n+  MUTEX_DEFL(Threads_lock                   , PaddedMonitor, ThreadStart_lock, true);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+extern Monitor* ThreadStart_lock;                \/\/ used by JVM_ThreadStart to serialize requests for Threads_lock\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}