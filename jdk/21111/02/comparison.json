{"files":[{"patch":"@@ -2918,1 +2918,0 @@\n-\n@@ -2950,0 +2949,4 @@\n+    \/\/ VM thread needs Threads_lock when announcing a safepoint. We do not\n+    \/\/ want StartThread to delay safepoint, so we wrap with this second lock\n+    \/\/ to reduce competition for Threads_lock.\n+    ConditionalMutexLocker ml1(ThreadStart_lock, UseThreadStartLock);\n@@ -2952,1 +2955,1 @@\n-    MutexLocker mu(Threads_lock);\n+    MutexLocker ml2(Threads_lock);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2000,0 +2000,4 @@\n+                                                                            \\\n+  product(bool, UseThreadStartLock, true, DIAGNOSTIC,                       \\\n+          \"Use an extra lock during Thread.start to alleviate contention \"  \\\n+          \"on threads lock.\")                                               \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+Monitor* ThreadStart_lock             = nullptr;\n@@ -321,0 +322,2 @@\n+  MUTEX_DEFN(ThreadStart_lock                , PaddedMonitor, safepoint);\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+extern Monitor* ThreadStart_lock;                \/\/ used by JVM_ThreadStart to serialize requests for Threads_lock\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}