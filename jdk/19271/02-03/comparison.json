{"files":[{"patch":"@@ -41,1 +41,1 @@\n-import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n@@ -65,1 +65,0 @@\n-        final int MAX_ROUNDS = 200;\n@@ -68,3 +67,0 @@\n-        final CountDownLatch allProduced = new CountDownLatch(NUMBER_OF_ITEMS);\n-        final CountDownLatch allConsumed = new CountDownLatch(NUMBER_OF_ITEMS);\n-\n@@ -75,10 +71,12 @@\n-        for(int i = 0;i < NUMBER_OF_ITEMS;++i) {\n-            Thread.ofVirtual().start(() -> {\n-                var item = new Item();\n-                survivors.put(item, null);\n-                while(true) {\n-                    try {\n-                        queue.put(item);\n-                        break;\n-                    } catch (InterruptedException ie) {\n-                        \/\/ Retry\n+        try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {\n+            for(int i = 0;i < NUMBER_OF_ITEMS;++i) {\n+                executor.submit(() -> {\n+                    var item = new Item();\n+                    survivors.put(item, null);\n+                    while(true) {\n+                        try {\n+                            queue.put(item);\n+                            break;\n+                        } catch (InterruptedException ie) {\n+                            \/\/ Retry\n+                        }\n@@ -86,11 +84,10 @@\n-                }\n-                allProduced.countDown();\n-            });\n-\n-            Thread.ofVirtual().start(() -> {\n-                while(true) {\n-                    try {\n-                        queue.take();\n-                        break;\n-                    } catch (InterruptedException ie) {\n-                        \/\/ Retry\n+                });\n+\n+                executor.submit(() -> {\n+                    while(true) {\n+                        try {\n+                            queue.take();\n+                            break;\n+                        } catch (InterruptedException ie) {\n+                            \/\/ Retry\n+                        }\n@@ -98,4 +95,3 @@\n-                }\n-                allConsumed.countDown();\n-            });\n-        }\n+                });\n+            }\n+        } \/\/ Close waits until all tasks are done\n@@ -103,4 +99,1 @@\n-        assertTrue(allProduced.await(10, TimeUnit.SECONDS));\n-        assertTrue(allConsumed.await(10, TimeUnit.SECONDS));\n-        var round = 0;\n-        while(!survivors.isEmpty() && round++ < MAX_ROUNDS) {\n+        while(!survivors.isEmpty()) {\n@@ -111,1 +104,0 @@\n-        assertTrue(survivors.isEmpty());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/SynchronousQueue20Test.java","additions":27,"deletions":35,"binary":false,"changes":62,"status":"modified"}]}