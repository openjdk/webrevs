{"files":[{"patch":"@@ -197,0 +197,2 @@\n+                    else if (m != null)\n+                        s.selfLinkItem();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/SynchronousQueue.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -670,0 +670,1 @@\n+                \"SynchronousQueue20Test\",\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/JSR166TestCase.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * This file is available under and governed by the GNU General Public\n+ * License version 2 only, as published by the Free Software Foundation.\n+ * However, the following notice accompanied the original version of this\n+ * file:\n+ *\n+ * Written by Doug Lea with assistance from members of JCP JSR-166\n+ * Expert Group and released to the public domain, as explained at\n+ * http:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/\n+ * Other contributors include Andrew Wright, Jeffrey Hayes,\n+ * Pat Fisher, Mike Judd.\n+ *\/\n+\n+import junit.framework.Test;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SynchronousQueue20Test extends JSR166TestCase {\n+\n+    public static void main(String[] args) {\n+        main(suite(), args);\n+    }\n+\n+    public static Test suite() {\n+        return newTestSuite(SynchronousQueue20Test.class);\n+    }\n+\n+    public void testFairDoesntLeak() throws InterruptedException {\n+        assertDoesntLeak(new SynchronousQueue<>(true));\n+    }\n+\n+    public void testUnfairDoesntLeak() throws InterruptedException {\n+        assertDoesntLeak(new SynchronousQueue<>(false));\n+    }\n+\n+    private void assertDoesntLeak(SynchronousQueue<Object> queue) throws InterruptedException {\n+        final int NUMBER_OF_ITEMS = 250;\n+        final int MAX_ROUNDS = 200;\n+        final int ROUND_WAIT_MILLIS = 50;\n+\n+        final CountDownLatch allProduced = new CountDownLatch(NUMBER_OF_ITEMS);\n+        final CountDownLatch allConsumed = new CountDownLatch(NUMBER_OF_ITEMS);\n+\n+        class Item {}\n+        final Map<Item, Void> survivors =\n+                Collections.synchronizedMap(WeakHashMap.newWeakHashMap(NUMBER_OF_ITEMS));\n+\n+        for(int i = 0;i < NUMBER_OF_ITEMS;++i) {\n+            Thread.ofVirtual().start(() -> {\n+                var item = new Item();\n+                survivors.put(item, null);\n+                while(true) {\n+                    try {\n+                        queue.put(item);\n+                        break;\n+                    } catch (InterruptedException ie) {\n+                        \/\/ Retry\n+                    }\n+                }\n+                allProduced.countDown();\n+            });\n+\n+            Thread.ofVirtual().start(() -> {\n+                while(true) {\n+                    try {\n+                        queue.take();\n+                        break;\n+                    } catch (InterruptedException ie) {\n+                        \/\/ Retry\n+                    }\n+                }\n+                allConsumed.countDown();\n+            });\n+        }\n+\n+        assertTrue(allProduced.await(10, TimeUnit.SECONDS));\n+        assertTrue(allConsumed.await(10, TimeUnit.SECONDS));\n+        var round = 0;\n+        while(!survivors.isEmpty() && round++ < MAX_ROUNDS) {\n+            System.gc();\n+            Thread.sleep(ROUND_WAIT_MILLIS); \/\/ We don't expect interruptions\n+        }\n+\n+        assertTrue(survivors.isEmpty());\n+        assertTrue(queue.isEmpty()); \/\/ Make sure that the queue survives until the end\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/SynchronousQueue20Test.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -655,1 +655,0 @@\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/SynchronousQueueTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}