{"files":[{"patch":"@@ -2886,0 +2886,37 @@\n+`-XX:+UseShenandoahGC`\n+:   Enables the use of the Shenandoah garbage collector. This is a low pause\n+    time, concurrent garbage collector. Its pause times are not proportional to\n+    the size of the heap. Shenandoah garbage collector can work with compressed\n+    pointers. See `-XX:UseCompressedOops` for further information about\n+    compressed pointers.\n+\n+`-XX:ShenandoahGCMode=`*mode*\n+:   Sets the GC mode for Shenandoah GC to use. By default, this option is set\n+    to `satb`. Among other things, this defines which barriers are in use.\n+    Possible mode values include the following:\n+\n+    `satb`\n+    :   Snapshot-at-the-beginning concurrent GC (three pass mark-evac-update).\n+        It is a single generation GC.\n+\n+    `generational`\n+    :   It is also a snapshot-at-the-beginning and concurrent GC, but it is\n+        generational. Please see [JEP 404](https:\/\/openjdk.org\/jeps\/404) and\n+        [JEP 521](https:\/\/openjdk.org\/jeps\/521) for its advantages and risks.\n+\n+`-XX:ShenandoahGCHeuristics=`*heuristics*\n+:   Sets the heuristics for Shenandoah GC to use. By default, this option is\n+    set to `adaptive`. This fine-tunes the GC mode selected, by choosing when\n+    to start the GC, how much to process on each cycle, and what other features\n+    to automatically enable. Possible heuristics are following:\n+\n+    `adaptive`\n+    :   To maintain the given amount of free heap at all times, even during\n+        the GC cycle.\n+\n+    `static`\n+    :   Trigger GC when free heap falls below a specified threshold.\n+\n+    `compact`\n+    :   Run GC more frequently and with deeper targets to free up more memory.\n+\n","filename":"src\/java.base\/share\/man\/java.md","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"}]}