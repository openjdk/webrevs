{"files":[{"patch":"@@ -545,1 +545,1 @@\n-            Timestamp stamp = new Timestamp(instant.getEpochSecond() * MILLIS_PER_SECOND);\n+            Timestamp stamp = new Timestamp(Math.multiplyExact(instant.getEpochSecond(), MILLIS_PER_SECOND));\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Timestamp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -645,0 +645,29 @@\n+    @Test\n+    public void test53() {\n+        \/\/ The latest Instant that can be converted to a Timestamp.\n+        Instant instant1 = Instant.ofEpochSecond(Long.MAX_VALUE \/ 1000, 999_999_999);\n+        assertEquals(instant1, Timestamp.from(instant1).toInstant());\n+\n+        \/\/ One nanosecond more, and converting it gets an overflow.\n+        Instant instant2 = instant1.plusNanos(1);\n+        try {\n+            Timestamp unused = Timestamp.from(instant2);\n+            fail();\n+        } catch (IllegalArgumentException expected) {\n+        }\n+\n+        \/\/ The latest possible Instant will certainly overflow.\n+        try {\n+            Timestamp unused = Timestamp.from(Instant.MAX);\n+            fail();\n+        } catch (IllegalArgumentException expected) {\n+        }\n+\n+        \/\/ The earliest possible Instant will certainly overflow.\n+        try {\n+            Timestamp unused = Timestamp.from(Instant.MIN);\n+            fail();\n+        } catch (IllegalArgumentException expected) {\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/sql\/testng\/test\/sql\/TimestampTests.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"}]}