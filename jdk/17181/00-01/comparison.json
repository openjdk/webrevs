{"files":[{"patch":"@@ -649,1 +649,1 @@\n-        assertEquals(instant1, Timestamp.from(instant1).toInstant());\n+        assertEquals(Timestamp.from(instant1).toInstant(), instant1);\n@@ -653,5 +653,9 @@\n-        try {\n-            Timestamp unused = Timestamp.from(instant2);\n-            fail();\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        expectThrows(IllegalArgumentException.class, () -> Timestamp.from(instant2));\n+\n+        \/\/ The earliest Instant that can be converted to a Timestamp.\n+        Instant instant3 = Instant.ofEpochSecond(Long.MIN_VALUE \/ 1000, 0);\n+        assertEquals(Timestamp.from(instant3).toInstant(), instant3);\n+\n+        \/\/ One nanosecond less, and converting it gets an overflow.\n+        Instant instant4 = instant3.minusNanos(1);\n+        expectThrows(IllegalArgumentException.class, () -> Timestamp.from(instant4));\n@@ -660,5 +664,1 @@\n-        try {\n-            Timestamp unused = Timestamp.from(Instant.MAX);\n-            fail();\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        expectThrows(IllegalArgumentException.class, () -> Timestamp.from(Instant.MAX));\n@@ -667,5 +667,1 @@\n-        try {\n-            Timestamp unused = Timestamp.from(Instant.MIN);\n-            fail();\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        expectThrows(IllegalArgumentException.class, () -> Timestamp.from(Instant.MIN));\n","filename":"test\/jdk\/java\/sql\/testng\/test\/sql\/TimestampTests.java","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"}]}