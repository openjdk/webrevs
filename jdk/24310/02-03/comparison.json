{"files":[{"patch":"@@ -1309,22 +1309,12 @@\n-  \/\/ Look for JAVA_HOME in the environment.\n-  char* java_home_var = ::getenv(\"JAVA_HOME\");\n-  if (java_home_var != nullptr && java_home_var[0] != 0) {\n-    int len;\n-\n-    \/\/ Check the current module name \"libjvm.so\".\n-    const char* p = strrchr(buf, '\/');\n-    if (p == nullptr) {\n-      return;\n-    }\n-    assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n-\n-    rp = os::realpath(java_home_var, buf, buflen);\n-    if (rp == nullptr) {\n-      return;\n-    }\n-\n-    \/\/ modules image doesn't have \"jre\" subdirectory\n-    len = strlen(buf);\n-    assert(len < buflen, \"Ran out of buffer room\");\n-    char* lib_p = buf + len;\n-    snprintf(lib_p, buflen-len, \"\/lib\");\n+  if(Arguments::executing_unit_tests()) {\n+    \/\/ Look for JAVA_HOME in the environment.\n+    char* java_home_var = ::getenv(\"JAVA_HOME\");\n+    if (java_home_var != nullptr && java_home_var[0] != 0) {\n+      int len;\n+\n+      \/\/ Check the current module name \"libjvm.so\".\n+      const char* p = strrchr(buf, '\/');\n+      if (p == nullptr) {\n+        return;\n+      }\n+      assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n@@ -1332,8 +1322,1 @@\n-    if (0 == access(buf, F_OK)) {\n-      \/\/ Use current module name \"libjvm.so\"\n-      len = strlen(buf);\n-      snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n-               Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n-    } else {\n-      \/\/ Go back to path of .so\n-      rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n+      rp = os::realpath(java_home_var, buf, buflen);\n@@ -1343,0 +1326,19 @@\n+\n+      \/\/ modules image doesn't have \"jre\" subdirectory\n+      len = strlen(buf);\n+      assert(len < buflen, \"Ran out of buffer room\");\n+      char* lib_p = buf + len;\n+      snprintf(lib_p, buflen-len, \"\/lib\");\n+\n+      if (0 == access(buf, F_OK)) {\n+        \/\/ Use current module name \"libjvm.so\"\n+        len = strlen(buf);\n+        snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n+                 Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+      } else {\n+        \/\/ Go back to path of .so\n+        rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n+        if (rp == nullptr) {\n+          return;\n+        }\n+      }\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":32,"deletions":30,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1505,13 +1505,5 @@\n-  \/\/ Look for JAVA_HOME in the environment.\n-  char* java_home_var = ::getenv(\"JAVA_HOME\");\n-  if (java_home_var != nullptr && java_home_var[0] != 0) {\n-    int len;\n-\n-    \/\/ Check the current module name \"libjvm\"\n-    const char* p = strrchr(buf, '\/');\n-    assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n-\n-    rp = os::realpath(java_home_var, buf, buflen);\n-    if (rp == nullptr) {\n-      return;\n-    }\n+  if (Arguments::executing_unit_tests()) {\n+    \/\/ Look for JAVA_HOME in the environment.\n+    char* java_home_var = ::getenv(\"JAVA_HOME\");\n+    if (java_home_var != nullptr && java_home_var[0] != 0) {\n+      int len;\n@@ -1519,4 +1511,3 @@\n-    \/\/ modules image doesn't have \"jre\" subdirectory\n-    len = strlen(buf);\n-    assert(len < buflen, \"Ran out of buffer space\");\n-    char* lib_p = buf + len;\n+      \/\/ Check the current module name \"libjvm\"\n+      const char* p = strrchr(buf, '\/');\n+      assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n@@ -1524,2 +1515,4 @@\n-    \/\/ Add the appropriate library subdir\n-    snprintf(lib_p, buflen-len, \"\/lib\");\n+      rp = os::realpath(java_home_var, buf, buflen);\n+      if (rp == nullptr) {\n+        return;\n+      }\n@@ -1527,7 +1520,7 @@\n-    \/\/ Add the appropriate JVM variant subdir\n-    len = strlen(buf);\n-    lib_p = buf + len;\n-    snprintf(lib_p, buflen-len, \"\/%s\", Abstract_VM_Version::vm_variant());\n-    if (0 != access(buf, F_OK)) {\n-      snprintf(lib_p, buflen-len, \"%s\", \"\");\n-    }\n+      \/\/ modules image doesn't have \"jre\" subdirectory\n+      len = strlen(buf);\n+      assert(len < buflen, \"Ran out of buffer space\");\n+      char* lib_p = buf + len;\n+\n+      \/\/ Add the appropriate library subdir\n+      snprintf(lib_p, buflen-len, \"\/lib\");\n@@ -1535,5 +1528,1 @@\n-    \/\/ If the path exists within JAVA_HOME, add the JVM library name\n-    \/\/ to complete the path to JVM being overridden.  Otherwise fallback\n-    \/\/ to the path to the current library.\n-    if (0 == access(buf, F_OK)) {\n-      \/\/ Use current module name \"libjvm\"\n+      \/\/ Add the appropriate JVM variant subdir\n@@ -1541,6 +1530,19 @@\n-      snprintf(buf + len, buflen-len, \"\/libjvm%s\", JNI_LIB_SUFFIX);\n-    } else {\n-      \/\/ Fall back to path of current library\n-      rp = os::realpath(dli_fname, buf, buflen);\n-      if (rp == nullptr) {\n-        return;\n+      lib_p = buf + len;\n+      snprintf(lib_p, buflen-len, \"\/%s\", Abstract_VM_Version::vm_variant());\n+      if (0 != access(buf, F_OK)) {\n+        snprintf(lib_p, buflen-len, \"%s\", \"\");\n+      }\n+\n+      \/\/ If the path exists within JAVA_HOME, add the JVM library name\n+      \/\/ to complete the path to JVM being overridden.  Otherwise fallback\n+      \/\/ to the path to the current library.\n+      if (0 == access(buf, F_OK)) {\n+        \/\/ Use current module name \"libjvm\"\n+        len = strlen(buf);\n+        snprintf(buf + len, buflen-len, \"\/libjvm%s\", JNI_LIB_SUFFIX);\n+      } else {\n+        \/\/ Fall back to path of current library\n+        rp = os::realpath(dli_fname, buf, buflen);\n+        if (rp == nullptr) {\n+          return;\n+        }\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2775,16 +2775,12 @@\n-  \/\/ Look for JAVA_HOME in the environment.\n-  char* java_home_var = ::getenv(\"JAVA_HOME\");\n-  if (java_home_var != nullptr && java_home_var[0] != 0) {\n-    int len;\n-\n-    \/\/ Check the current module name \"libjvm.so\".\n-    const char* p = strrchr(buf, '\/');\n-    if (p == nullptr) {\n-      return;\n-    }\n-    assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n-\n-    rp = os::realpath(java_home_var, buf, buflen);\n-    if (rp == nullptr) {\n-      return;\n-    }\n+  if (Arguments::executing_unit_tests()) {\n+    \/\/ Look for JAVA_HOME in the environment.\n+    char* java_home_var = ::getenv(\"JAVA_HOME\");\n+    if (java_home_var != nullptr && java_home_var[0] != 0) {\n+      int len;\n+\n+      \/\/ Check the current module name \"libjvm.so\".\n+      const char* p = strrchr(buf, '\/');\n+      if (p == nullptr) {\n+        return;\n+      }\n+      assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n@@ -2792,14 +2788,1 @@\n-    \/\/ modules image doesn't have \"jre\" subdirectory\n-    len = checked_cast<int>(strlen(buf));\n-    assert(len < buflen, \"Ran out of buffer room\");\n-    char* lib_p = buf + len;\n-    snprintf(lib_p, buflen-len, \"\/lib\");\n-\n-    if (0 == access(buf, F_OK)) {\n-      \/\/ Use current module name \"libjvm.so\"\n-      len = (int)strlen(buf);\n-      snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n-               Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n-    } else {\n-      \/\/ Go back to path of .so\n-      rp = os::realpath(dli_fname, buf, buflen);\n+      rp = os::realpath(java_home_var, buf, buflen);\n@@ -2809,0 +2792,19 @@\n+\n+      \/\/ modules image doesn't have \"jre\" subdirectory\n+      len = checked_cast<int>(strlen(buf));\n+      assert(len < buflen, \"Ran out of buffer room\");\n+      char* lib_p = buf + len;\n+      snprintf(lib_p, buflen-len, \"\/lib\");\n+\n+      if (0 == access(buf, F_OK)) {\n+        \/\/ Use current module name \"libjvm.so\"\n+        len = (int)strlen(buf);\n+        snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n+                 Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+      } else {\n+        \/\/ Go back to path of .so\n+        rp = os::realpath(dli_fname, buf, buflen);\n+        if (rp == nullptr) {\n+          return;\n+        }\n+      }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":32,"deletions":30,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2209,12 +2209,14 @@\n-  char* java_home_var = ::getenv(\"JAVA_HOME\");\n-  if (java_home_var != nullptr && java_home_var[0] != 0 &&\n-      strlen(java_home_var) < (size_t)buflen) {\n-    strncpy(buf, java_home_var, buflen);\n-\n-    \/\/ modules image doesn't have \"jre\" subdirectory\n-    size_t len = strlen(buf);\n-    char* jrebin_p = buf + len;\n-    jio_snprintf(jrebin_p, buflen-len, \"\\\\bin\\\\\");\n-    len = strlen(buf);\n-    jio_snprintf(buf + len, buflen-len, \"%s\\\\jvm%s\",\n-                 Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+  if (Arguments::executing_unit_tests()) {\n+    char* java_home_var = ::getenv(\"JAVA_HOME\");\n+    if (java_home_var != nullptr && java_home_var[0] != 0 &&\n+        strlen(java_home_var) < (size_t)buflen) {\n+      strncpy(buf, java_home_var, buflen);\n+\n+      \/\/ modules image doesn't have \"jre\" subdirectory\n+      size_t len = strlen(buf);\n+      char* bin_p = buf + len;\n+      jio_snprintf(bin_p, buflen-len, \"\\\\bin\\\\\");\n+      len = strlen(buf);\n+      jio_snprintf(buf + len, buflen-len, \"%s\\\\jvm%s\",\n+                   Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+    }\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+bool   Arguments::_executing_unit_tests         = false;\n@@ -368,0 +369,4 @@\n+    if (match_option(option, \"-XX:+ExecutingUnitTests\")) {\n+      _executing_unit_tests = true;\n+      continue;\n+    }\n@@ -1755,0 +1760,4 @@\n+bool Arguments::executing_unit_tests() {\n+  return _executing_unit_tests;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -241,0 +241,3 @@\n+  \/\/ was this VM created with the -XX:+ExecutingUnitTests option\n+  static bool _executing_unit_tests;\n+\n@@ -429,0 +432,2 @@\n+  \/\/ -XX:+ExecutingUnitTests\n+  static bool executing_unit_tests();\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}