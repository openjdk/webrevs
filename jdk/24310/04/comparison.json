{"files":[{"patch":"@@ -1309,13 +1309,13 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Typical\n-    \/\/ value for buf is \"<JAVA_HOME>\/jre\/lib\/<vmtype>\/libjvm.so\".\n-    \/\/ If \"\/jre\/lib\/\" appears at the right place in the string, then\n-    \/\/ assume we are installed in a JDK and we're done. Otherwise, check\n-    \/\/ for a JAVA_HOME environment variable and fix up the path so it\n-    \/\/ looks like libjvm.so is installed there (append a fake suffix\n-    \/\/ hotspot\/libjvm.so).\n-    const char *p = buf + strlen(buf) - 1;\n-    for (int count = 0; p > buf && count < 4; ++count) {\n-      for (--p; p > buf && *p != '\/'; --p)\n-        \/* empty *\/ ;\n-    }\n+  \/\/ If executing unit tests we require JAVA_HOME to point to the real JDK.\n+  if (Arguments::executing_unit_tests()) {\n+    \/\/ Look for JAVA_HOME in the environment.\n+    char* java_home_var = ::getenv(\"JAVA_HOME\");\n+    if (java_home_var != nullptr && java_home_var[0] != 0) {\n+      int len;\n+\n+      \/\/ Check the current module name \"libjvm.so\".\n+      const char* p = strrchr(buf, '\/');\n+      if (p == nullptr) {\n+        return;\n+      }\n+      assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n@@ -1323,6 +1323,4 @@\n-    if (strncmp(p, \"\/jre\/lib\/\", 9) != 0) {\n-      \/\/ Look for JAVA_HOME in the environment.\n-      char* java_home_var = ::getenv(\"JAVA_HOME\");\n-      if (java_home_var != nullptr && java_home_var[0] != 0) {\n-        char* jrelib_p;\n-        int len;\n+      rp = os::realpath(java_home_var, buf, buflen);\n+      if (rp == nullptr) {\n+        return;\n+      }\n@@ -1330,6 +1328,4 @@\n-        \/\/ Check the current module name \"libjvm.so\".\n-        p = strrchr(buf, '\/');\n-        if (p == nullptr) {\n-          return;\n-        }\n-        assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n+      len = strlen(buf);\n+      assert(len < buflen, \"Ran out of buffer room\");\n+      char* lib_p = buf + len;\n+      snprintf(lib_p, buflen - len, \"\/lib\");\n@@ -1337,1 +1333,8 @@\n-        rp = os::realpath(java_home_var, buf, buflen);\n+      if (0 == access(buf, F_OK)) {\n+        \/\/ Use current module name \"libjvm.so\"\n+        len = strlen(buf);\n+        snprintf(buf + len, buflen - len, \"\/%s\/libjvm%s\",\n+                 Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+      } else {\n+        \/\/ Go back to path of .so\n+        rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n@@ -1341,22 +1344,0 @@\n-\n-        \/\/ determine if this is a legacy image or modules image\n-        \/\/ modules image doesn't have \"jre\" subdirectory\n-        len = strlen(buf);\n-        assert(len < buflen, \"Ran out of buffer room\");\n-        jrelib_p = buf + len;\n-        snprintf(jrelib_p, buflen-len, \"\/jre\/lib\");\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"\/lib\");\n-        }\n-\n-        if (0 == access(buf, F_OK)) {\n-          \/\/ Use current module name \"libjvm.so\"\n-          len = strlen(buf);\n-          snprintf(buf + len, buflen-len, \"\/hotspot\/libjvm.so\");\n-        } else {\n-          \/\/ Go back to path of .so\n-          rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n-          if (rp == nullptr) {\n-            return;\n-          }\n-        }\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":29,"deletions":48,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -1505,25 +1505,15 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Typical\n-    \/\/ value for buf is \"<JAVA_HOME>\/jre\/lib\/<arch>\/<vmtype>\/libjvm.so\"\n-    \/\/ or \"<JAVA_HOME>\/jre\/lib\/<vmtype>\/libjvm.dylib\". If \"\/jre\/lib\/\"\n-    \/\/ appears at the right place in the string, then assume we are\n-    \/\/ installed in a JDK and we're done. Otherwise, check for a\n-    \/\/ JAVA_HOME environment variable and construct a path to the JVM\n-    \/\/ being overridden.\n-\n-    const char *p = buf + strlen(buf) - 1;\n-    for (int count = 0; p > buf && count < 5; ++count) {\n-      for (--p; p > buf && *p != '\/'; --p)\n-        \/* empty *\/ ;\n-    }\n-\n-    if (strncmp(p, \"\/jre\/lib\/\", 9) != 0) {\n-      \/\/ Look for JAVA_HOME in the environment.\n-      char* java_home_var = ::getenv(\"JAVA_HOME\");\n-      if (java_home_var != nullptr && java_home_var[0] != 0) {\n-        char* jrelib_p;\n-        int len;\n-\n-        \/\/ Check the current module name \"libjvm\"\n-        p = strrchr(buf, '\/');\n-        assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n+  \/\/ If executing unit tests we require JAVA_HOME to point to the real JDK.\n+  if (Arguments::executing_unit_tests()) {\n+    \/\/ Look for JAVA_HOME in the environment.\n+    char* java_home_var = ::getenv(\"JAVA_HOME\");\n+    if (java_home_var != nullptr && java_home_var[0] != 0) {\n+      int len;\n+\n+      \/\/ Check the current module name \"libjvm\"\n+      const char* p = strrchr(buf, '\/');\n+      assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n+\n+      rp = os::realpath(java_home_var, buf, buflen);\n+      if (rp == nullptr) {\n+        return;\n+      }\n@@ -1531,4 +1521,3 @@\n-        rp = os::realpath(java_home_var, buf, buflen);\n-        if (rp == nullptr) {\n-          return;\n-        }\n+      len = strlen(buf);\n+      assert(len < buflen, \"Ran out of buffer space\");\n+      char* lib_p = buf + len;\n@@ -1536,5 +1525,2 @@\n-        \/\/ determine if this is a legacy image or modules image\n-        \/\/ modules image doesn't have \"jre\" subdirectory\n-        len = strlen(buf);\n-        assert(len < buflen, \"Ran out of buffer space\");\n-        jrelib_p = buf + len;\n+      \/\/ Add the appropriate library subdir\n+      snprintf(lib_p, buflen - len, \"\/lib\");\n@@ -1542,5 +1528,7 @@\n-        \/\/ Add the appropriate library subdir\n-        snprintf(jrelib_p, buflen-len, \"\/jre\/lib\");\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"\/lib\");\n-        }\n+      \/\/ Add the appropriate JVM variant subdir\n+      len = strlen(buf);\n+      lib_p = buf + len;\n+      snprintf(lib_p, buflen - len, \"\/%s\", Abstract_VM_Version::vm_variant());\n+      if (0 != access(buf, F_OK)) {\n+        snprintf(lib_p, buflen - len, \"%s\", \"\");\n+      }\n@@ -1548,1 +1536,5 @@\n-        \/\/ Add the appropriate JVM variant subdir\n+      \/\/ If the path exists within JAVA_HOME, add the JVM library name\n+      \/\/ to complete the path to JVM being overridden.  Otherwise fallback\n+      \/\/ to the path to the current library.\n+      if (0 == access(buf, F_OK)) {\n+        \/\/ Use current module name \"libjvm\"\n@@ -1550,19 +1542,6 @@\n-        jrelib_p = buf + len;\n-        snprintf(jrelib_p, buflen-len, \"\/%s\", Abstract_VM_Version::vm_variant());\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"%s\", \"\");\n-        }\n-\n-        \/\/ If the path exists within JAVA_HOME, add the JVM library name\n-        \/\/ to complete the path to JVM being overridden.  Otherwise fallback\n-        \/\/ to the path to the current library.\n-        if (0 == access(buf, F_OK)) {\n-          \/\/ Use current module name \"libjvm\"\n-          len = strlen(buf);\n-          snprintf(buf + len, buflen-len, \"\/libjvm%s\", JNI_LIB_SUFFIX);\n-        } else {\n-          \/\/ Fall back to path of current library\n-          rp = os::realpath(dli_fname, buf, buflen);\n-          if (rp == nullptr) {\n-            return;\n-          }\n+        snprintf(buf + len, buflen - len, \"\/libjvm%s\", JNI_LIB_SUFFIX);\n+      } else {\n+        \/\/ Fall back to path of current library\n+        rp = os::realpath(dli_fname, buf, buflen);\n+        if (rp == nullptr) {\n+          return;\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":38,"deletions":59,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2775,13 +2775,13 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Typical\n-    \/\/ value for buf is \"<JAVA_HOME>\/jre\/lib\/<vmtype>\/libjvm.so\".\n-    \/\/ If \"\/jre\/lib\/\" appears at the right place in the string, then\n-    \/\/ assume we are installed in a JDK and we're done. Otherwise, check\n-    \/\/ for a JAVA_HOME environment variable and fix up the path so it\n-    \/\/ looks like libjvm.so is installed there (append a fake suffix\n-    \/\/ hotspot\/libjvm.so).\n-    const char *p = buf + strlen(buf) - 1;\n-    for (int count = 0; p > buf && count < 5; ++count) {\n-      for (--p; p > buf && *p != '\/'; --p)\n-        \/* empty *\/ ;\n-    }\n+  \/\/ If executing unit tests we require JAVA_HOME to point to the real JDK.\n+  if (Arguments::executing_unit_tests()) {\n+    \/\/ Look for JAVA_HOME in the environment.\n+    char* java_home_var = ::getenv(\"JAVA_HOME\");\n+    if (java_home_var != nullptr && java_home_var[0] != 0) {\n+      int len;\n+\n+      \/\/ Check the current module name \"libjvm.so\".\n+      const char* p = strrchr(buf, '\/');\n+      if (p == nullptr) {\n+        return;\n+      }\n+      assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n@@ -2789,6 +2789,4 @@\n-    if (strncmp(p, \"\/jre\/lib\/\", 9) != 0) {\n-      \/\/ Look for JAVA_HOME in the environment.\n-      char* java_home_var = ::getenv(\"JAVA_HOME\");\n-      if (java_home_var != nullptr && java_home_var[0] != 0) {\n-        char* jrelib_p;\n-        int len;\n+      rp = os::realpath(java_home_var, buf, buflen);\n+      if (rp == nullptr) {\n+        return;\n+      }\n@@ -2796,6 +2794,4 @@\n-        \/\/ Check the current module name \"libjvm.so\".\n-        p = strrchr(buf, '\/');\n-        if (p == nullptr) {\n-          return;\n-        }\n-        assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n+      len = checked_cast<int>(strlen(buf));\n+      assert(len < buflen, \"Ran out of buffer room\");\n+      char* lib_p = buf + len;\n+      snprintf(lib_p, buflen - len, \"\/lib\");\n@@ -2803,1 +2799,8 @@\n-        rp = os::realpath(java_home_var, buf, buflen);\n+      if (0 == access(buf, F_OK)) {\n+        \/\/ Use current module name \"libjvm.so\"\n+        len = (int)strlen(buf);\n+        snprintf(buf + len, buflen - len, \"\/%s\/libjvm%s\",\n+                 Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+      } else {\n+        \/\/ Go back to path of .so\n+        rp = os::realpath(dli_fname, buf, buflen);\n@@ -2807,22 +2810,0 @@\n-\n-        \/\/ determine if this is a legacy image or modules image\n-        \/\/ modules image doesn't have \"jre\" subdirectory\n-        len = checked_cast<int>(strlen(buf));\n-        assert(len < buflen, \"Ran out of buffer room\");\n-        jrelib_p = buf + len;\n-        snprintf(jrelib_p, buflen-len, \"\/jre\/lib\");\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"\/lib\");\n-        }\n-\n-        if (0 == access(buf, F_OK)) {\n-          \/\/ Use current module name \"libjvm.so\"\n-          len = (int)strlen(buf);\n-          snprintf(buf + len, buflen-len, \"\/hotspot\/libjvm.so\");\n-        } else {\n-          \/\/ Go back to path of .so\n-          rp = os::realpath(dli_fname, buf, buflen);\n-          if (rp == nullptr) {\n-            return;\n-          }\n-        }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":29,"deletions":48,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2209,5 +2209,2 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Check\n-    \/\/ for a JAVA_HOME environment variable and fix up the path so it\n-    \/\/ looks like jvm.dll is installed there (append a fake suffix\n-    \/\/ hotspot\/jvm.dll).\n+  \/\/ If executing unit tests we require JAVA_HOME to point to the real JDK.\n+  if (Arguments::executing_unit_tests()) {\n@@ -2219,2 +2216,0 @@\n-      \/\/ determine if this is a legacy image or modules image\n-      \/\/ modules image doesn't have \"jre\" subdirectory\n@@ -2222,5 +2217,2 @@\n-      char* jrebin_p = buf + len;\n-      jio_snprintf(jrebin_p, buflen-len, \"\\\\jre\\\\bin\\\\\");\n-      if (0 != _access(buf, 0)) {\n-        jio_snprintf(jrebin_p, buflen-len, \"\\\\bin\\\\\");\n-      }\n+      char* bin_p = buf + len;\n+      jio_snprintf(bin_p, buflen - len, \"\\\\bin\\\\\");\n@@ -2228,1 +2220,2 @@\n-      jio_snprintf(buf + len, buflen-len, \"hotspot\\\\jvm.dll\");\n+      jio_snprintf(buf + len, buflen - len, \"%s\\\\jvm%s\",\n+                   Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-bool   Arguments::_sun_java_launcher_is_altjvm  = false;\n+bool   Arguments::_executing_unit_tests         = false;\n@@ -358,1 +358,1 @@\n-  \/\/ See if sun.java.launcher or sun.java.launcher.is_altjvm is defined.\n+  \/\/ See if sun.java.launcher is defined.\n@@ -369,4 +369,2 @@\n-    if (match_option(option, \"-Dsun.java.launcher.is_altjvm=\", &tail)) {\n-      if (strcmp(tail, \"true\") == 0) {\n-        _sun_java_launcher_is_altjvm = true;\n-      }\n+    if (match_option(option, \"-XX:+ExecutingUnitTests\")) {\n+      _executing_unit_tests = true;\n@@ -1274,4 +1272,0 @@\n-  } else if (strcmp(key, \"sun.java.launcher.is_altjvm\") == 0) {\n-    \/\/ sun.java.launcher.is_altjvm property is\n-    \/\/ private and is processed in process_sun_java_launcher_properties();\n-    \/\/ the sun.java.launcher property is passed on to the java application\n@@ -1766,2 +1760,2 @@\n-bool Arguments::sun_java_launcher_is_altjvm() {\n-  return _sun_java_launcher_is_altjvm;\n+bool Arguments::executing_unit_tests() {\n+  return _executing_unit_tests;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -241,2 +241,2 @@\n-  \/\/ was this VM created via the -XXaltjvm=<path> option\n-  static bool   _sun_java_launcher_is_altjvm;\n+  \/\/ was this VM created with the -XX:+ExecutingUnitTests option\n+  static bool _executing_unit_tests;\n@@ -432,2 +432,2 @@\n-  \/\/ -Dsun.java.launcher.is_altjvm\n-  static bool sun_java_launcher_is_altjvm();\n+  \/\/ -XX:+ExecutingUnitTests\n+  static bool executing_unit_tests();\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-  int extra_jvm_args = disable_error_handling ? 4 : 2;\n+  int extra_jvm_args = disable_error_handling ? 3 : 1;\n@@ -73,2 +73,1 @@\n-  options[0].optionString = (char*) \"-Dsun.java.launcher.is_altjvm=true\";\n-  options[1].optionString = (char*) \"-XX:+ExecutingUnitTests\";\n+  options[0].optionString = (char*) \"-XX:+ExecutingUnitTests\";\n@@ -78,2 +77,2 @@\n-    options[2].optionString = (char*) \"-XX:+SuppressFatalErrorMessage\";\n-    options[3].optionString = (char*) \"-XX:-CreateCoredumpOnCrash\";\n+    options[1].optionString = (char*) \"-XX:+SuppressFatalErrorMessage\";\n+    options[2].optionString = (char*) \"-XX:-CreateCoredumpOnCrash\";\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}