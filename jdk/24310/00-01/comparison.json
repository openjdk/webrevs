{"files":[{"patch":"@@ -1309,11 +1309,10 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Typical\n-    \/\/ value for buf is \"<JAVA_HOME>\/jre\/lib\/<vmtype>\/libjvm.so\".\n-    \/\/ If \"\/jre\/lib\/\" appears at the right place in the string, then\n-    \/\/ assume we are installed in a JDK and we're done. Otherwise, check\n-    \/\/ for a JAVA_HOME environment variable and construct a path to the JVM\n-    \/\/ being overridden.\n-    const char *p = buf + strlen(buf) - 1;\n-    for (int count = 0; p > buf && count < 4; ++count) {\n-      for (--p; p > buf && *p != '\/'; --p)\n-        \/* empty *\/ ;\n+  \/\/ Look for JAVA_HOME in the environment.\n+  char* java_home_var = ::getenv(\"JAVA_HOME\");\n+  if (java_home_var != nullptr && java_home_var[0] != 0) {\n+    char* jrelib_p;\n+    int len;\n+\n+    \/\/ Check the current module name \"libjvm.so\".\n+    const char* p = strrchr(buf, '\/');\n+    if (p == nullptr) {\n+      return;\n@@ -1321,0 +1320,1 @@\n+    assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n@@ -1322,28 +1322,4 @@\n-    if (strncmp(p, \"\/jre\/lib\/\", 9) != 0) {\n-      \/\/ Look for JAVA_HOME in the environment.\n-      char* java_home_var = ::getenv(\"JAVA_HOME\");\n-      if (java_home_var != nullptr && java_home_var[0] != 0) {\n-        char* jrelib_p;\n-        int len;\n-\n-        \/\/ Check the current module name \"libjvm.so\".\n-        p = strrchr(buf, '\/');\n-        if (p == nullptr) {\n-          return;\n-        }\n-        assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n-\n-        rp = os::realpath(java_home_var, buf, buflen);\n-        if (rp == nullptr) {\n-          return;\n-        }\n-\n-        \/\/ determine if this is a legacy image or modules image\n-        \/\/ modules image doesn't have \"jre\" subdirectory\n-        len = strlen(buf);\n-        assert(len < buflen, \"Ran out of buffer room\");\n-        jrelib_p = buf + len;\n-        snprintf(jrelib_p, buflen-len, \"\/jre\/lib\");\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"\/lib\");\n-        }\n+    rp = os::realpath(java_home_var, buf, buflen);\n+    if (rp == nullptr) {\n+      return;\n+    }\n@@ -1351,12 +1327,16 @@\n-        if (0 == access(buf, F_OK)) {\n-          \/\/ Use current module name \"libjvm.so\"\n-          len = strlen(buf);\n-          snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n-                   Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n-        } else {\n-          \/\/ Go back to path of .so\n-          rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n-          if (rp == nullptr) {\n-            return;\n-          }\n-        }\n+    \/\/ modules image doesn't have \"jre\" subdirectory\n+    len = strlen(buf);\n+    assert(len < buflen, \"Ran out of buffer room\");\n+    jrelib_p = buf + len;\n+    snprintf(jrelib_p, buflen-len, \"\/lib\");\n+\n+    if (0 == access(buf, F_OK)) {\n+      \/\/ Use current module name \"libjvm.so\"\n+      len = strlen(buf);\n+      snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n+               Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+    } else {\n+      \/\/ Go back to path of .so\n+      rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n+      if (rp == nullptr) {\n+        return;\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":31,"deletions":51,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -1505,12 +1505,13 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Typical\n-    \/\/ value for buf is or \"<JAVA_HOME>\/jre\/lib\/<vmtype>\/libjvm.dylib\".\n-    \/\/ If \"\/jre\/lib\/\" appears at the right place in the string, then\n-    \/\/ assume we are installed in a JDK and we're done. Otherwise, check for a\n-    \/\/ JAVA_HOME environment variable and construct a path to the JVM\n-    \/\/ being overridden.\n-\n-    const char *p = buf + strlen(buf) - 1;\n-    for (int count = 0; p > buf && count < 4; ++count) {\n-      for (--p; p > buf && *p != '\/'; --p)\n-        \/* empty *\/ ;\n+  \/\/ Look for JAVA_HOME in the environment.\n+  char* java_home_var = ::getenv(\"JAVA_HOME\");\n+  if (java_home_var != nullptr && java_home_var[0] != 0) {\n+    char* jrelib_p;\n+    int len;\n+\n+    \/\/ Check the current module name \"libjvm\"\n+    const char* p = strrchr(buf, '\/');\n+    assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n+\n+    rp = os::realpath(java_home_var, buf, buflen);\n+    if (rp == nullptr) {\n+      return;\n@@ -1519,6 +1520,4 @@\n-    if (strncmp(p, \"\/jre\/lib\/\", 9) != 0) {\n-      \/\/ Look for JAVA_HOME in the environment.\n-      char* java_home_var = ::getenv(\"JAVA_HOME\");\n-      if (java_home_var != nullptr && java_home_var[0] != 0) {\n-        char* jrelib_p;\n-        int len;\n+    \/\/ modules image doesn't have \"jre\" subdirectory\n+    len = strlen(buf);\n+    assert(len < buflen, \"Ran out of buffer space\");\n+    jrelib_p = buf + len;\n@@ -1526,3 +1525,2 @@\n-        \/\/ Check the current module name \"libjvm\"\n-        p = strrchr(buf, '\/');\n-        assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n+    \/\/ Add the appropriate library subdir\n+    snprintf(jrelib_p, buflen-len, \"\/lib\");\n@@ -1530,24 +1528,7 @@\n-        rp = os::realpath(java_home_var, buf, buflen);\n-        if (rp == nullptr) {\n-          return;\n-        }\n-\n-        \/\/ determine if this is a legacy image or modules image\n-        \/\/ modules image doesn't have \"jre\" subdirectory\n-        len = strlen(buf);\n-        assert(len < buflen, \"Ran out of buffer space\");\n-        jrelib_p = buf + len;\n-\n-        \/\/ Add the appropriate library subdir\n-        snprintf(jrelib_p, buflen-len, \"\/jre\/lib\");\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"\/lib\");\n-        }\n-\n-        \/\/ Add the appropriate JVM variant subdir\n-        len = strlen(buf);\n-        jrelib_p = buf + len;\n-        snprintf(jrelib_p, buflen-len, \"\/%s\", Abstract_VM_Version::vm_variant());\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"%s\", \"\");\n-        }\n+    \/\/ Add the appropriate JVM variant subdir\n+    len = strlen(buf);\n+    jrelib_p = buf + len;\n+    snprintf(jrelib_p, buflen-len, \"\/%s\", Abstract_VM_Version::vm_variant());\n+    if (0 != access(buf, F_OK)) {\n+      snprintf(jrelib_p, buflen-len, \"%s\", \"\");\n+    }\n@@ -1555,14 +1536,12 @@\n-        \/\/ If the path exists within JAVA_HOME, add the JVM library name\n-        \/\/ to complete the path to JVM being overridden.  Otherwise fallback\n-        \/\/ to the path to the current library.\n-        if (0 == access(buf, F_OK)) {\n-          \/\/ Use current module name \"libjvm\"\n-          len = strlen(buf);\n-          snprintf(buf + len, buflen-len, \"\/libjvm%s\", JNI_LIB_SUFFIX);\n-        } else {\n-          \/\/ Fall back to path of current library\n-          rp = os::realpath(dli_fname, buf, buflen);\n-          if (rp == nullptr) {\n-            return;\n-          }\n-        }\n+    \/\/ If the path exists within JAVA_HOME, add the JVM library name\n+    \/\/ to complete the path to JVM being overridden.  Otherwise fallback\n+    \/\/ to the path to the current library.\n+    if (0 == access(buf, F_OK)) {\n+      \/\/ Use current module name \"libjvm\"\n+      len = strlen(buf);\n+      snprintf(buf + len, buflen-len, \"\/libjvm%s\", JNI_LIB_SUFFIX);\n+    } else {\n+      \/\/ Fall back to path of current library\n+      rp = os::realpath(dli_fname, buf, buflen);\n+      if (rp == nullptr) {\n+        return;\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":38,"deletions":59,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2775,11 +2775,10 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Typical\n-    \/\/ value for buf is \"<JAVA_HOME>\/jre\/lib\/<vmtype>\/libjvm.so\".\n-    \/\/ If \"\/jre\/lib\/\" appears at the right place in the string, then\n-    \/\/ assume we are installed in a JDK and we're done. Otherwise, check\n-    \/\/ for a JAVA_HOME environment variable and construct a path to the JVM\n-    \/\/ being overridden.\n-    const char *p = buf + strlen(buf) - 1;\n-    for (int count = 0; p > buf && count < 4; ++count) {\n-      for (--p; p > buf && *p != '\/'; --p)\n-        \/* empty *\/ ;\n+  \/\/ Look for JAVA_HOME in the environment.\n+  char* java_home_var = ::getenv(\"JAVA_HOME\");\n+  if (java_home_var != nullptr && java_home_var[0] != 0) {\n+    char* jrelib_p;\n+    int len;\n+\n+    \/\/ Check the current module name \"libjvm.so\".\n+    const char* p = strrchr(buf, '\/');\n+    if (p == nullptr) {\n+      return;\n@@ -2787,0 +2786,1 @@\n+    assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n@@ -2788,28 +2788,4 @@\n-    if (strncmp(p, \"\/jre\/lib\/\", 9) != 0) {\n-      \/\/ Look for JAVA_HOME in the environment.\n-      char* java_home_var = ::getenv(\"JAVA_HOME\");\n-      if (java_home_var != nullptr && java_home_var[0] != 0) {\n-        char* jrelib_p;\n-        int len;\n-\n-        \/\/ Check the current module name \"libjvm.so\".\n-        p = strrchr(buf, '\/');\n-        if (p == nullptr) {\n-          return;\n-        }\n-        assert(strstr(p, \"\/libjvm\") == p, \"invalid library name\");\n-\n-        rp = os::realpath(java_home_var, buf, buflen);\n-        if (rp == nullptr) {\n-          return;\n-        }\n-\n-        \/\/ determine if this is a legacy image or modules image\n-        \/\/ modules image doesn't have \"jre\" subdirectory\n-        len = checked_cast<int>(strlen(buf));\n-        assert(len < buflen, \"Ran out of buffer room\");\n-        jrelib_p = buf + len;\n-        snprintf(jrelib_p, buflen-len, \"\/jre\/lib\");\n-        if (0 != access(buf, F_OK)) {\n-          snprintf(jrelib_p, buflen-len, \"\/lib\");\n-        }\n+    rp = os::realpath(java_home_var, buf, buflen);\n+    if (rp == nullptr) {\n+      return;\n+    }\n@@ -2817,12 +2793,16 @@\n-        if (0 == access(buf, F_OK)) {\n-          \/\/ Use current module name \"libjvm.so\"\n-          len = (int)strlen(buf);\n-          snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n-                   Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n-        } else {\n-          \/\/ Go back to path of .so\n-          rp = os::realpath(dli_fname, buf, buflen);\n-          if (rp == nullptr) {\n-            return;\n-          }\n-        }\n+    \/\/ modules image doesn't have \"jre\" subdirectory\n+    len = checked_cast<int>(strlen(buf));\n+    assert(len < buflen, \"Ran out of buffer room\");\n+    jrelib_p = buf + len;\n+    snprintf(jrelib_p, buflen-len, \"\/lib\");\n+\n+    if (0 == access(buf, F_OK)) {\n+      \/\/ Use current module name \"libjvm.so\"\n+      len = (int)strlen(buf);\n+      snprintf(buf + len, buflen-len, \"\/%s\/libjvm%s\",\n+               Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n+    } else {\n+      \/\/ Go back to path of .so\n+      rp = os::realpath(dli_fname, buf, buflen);\n+      if (rp == nullptr) {\n+        return;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":31,"deletions":51,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2209,21 +2209,12 @@\n-  if (Arguments::sun_java_launcher_is_altjvm()) {\n-    \/\/ Support for the java launcher's '-XXaltjvm=<path>' option. Check\n-    \/\/ for a JAVA_HOME environment variable and construct a path to the JVM\n-    \/\/ being overridden.\n-    char* java_home_var = ::getenv(\"JAVA_HOME\");\n-    if (java_home_var != nullptr && java_home_var[0] != 0 &&\n-        strlen(java_home_var) < (size_t)buflen) {\n-      strncpy(buf, java_home_var, buflen);\n-\n-      \/\/ determine if this is a legacy image or modules image\n-      \/\/ modules image doesn't have \"jre\" subdirectory\n-      size_t len = strlen(buf);\n-      char* jrebin_p = buf + len;\n-      jio_snprintf(jrebin_p, buflen-len, \"\\\\jre\\\\bin\\\\\");\n-      if (0 != _access(buf, 0)) {\n-        jio_snprintf(jrebin_p, buflen-len, \"\\\\bin\\\\\");\n-      }\n-      len = strlen(buf);\n-      jio_snprintf(buf + len, buflen-len, \"%s\\\\jvm%s\",\n-                   Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n-    }\n+  char* java_home_var = ::getenv(\"JAVA_HOME\");\n+  if (java_home_var != nullptr && java_home_var[0] != 0 &&\n+      strlen(java_home_var) < (size_t)buflen) {\n+    strncpy(buf, java_home_var, buflen);\n+\n+    \/\/ modules image doesn't have \"jre\" subdirectory\n+    size_t len = strlen(buf);\n+    char* jrebin_p = buf + len;\n+    jio_snprintf(jrebin_p, buflen-len, \"\\\\bin\\\\\");\n+    len = strlen(buf);\n+    jio_snprintf(buf + len, buflen-len, \"%s\\\\jvm%s\",\n+                 Abstract_VM_Version::vm_variant(), JNI_LIB_SUFFIX);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-bool   Arguments::_sun_java_launcher_is_altjvm  = false;\n@@ -358,1 +357,1 @@\n-  \/\/ See if sun.java.launcher or sun.java.launcher.is_altjvm is defined.\n+  \/\/ See if sun.java.launcher is defined.\n@@ -369,6 +368,0 @@\n-    if (match_option(option, \"-Dsun.java.launcher.is_altjvm=\", &tail)) {\n-      if (strcmp(tail, \"true\") == 0) {\n-        _sun_java_launcher_is_altjvm = true;\n-      }\n-      continue;\n-    }\n@@ -1274,4 +1267,0 @@\n-  } else if (strcmp(key, \"sun.java.launcher.is_altjvm\") == 0) {\n-    \/\/ sun.java.launcher.is_altjvm property is\n-    \/\/ private and is processed in process_sun_java_launcher_properties();\n-    \/\/ the sun.java.launcher property is passed on to the java application\n@@ -1766,4 +1755,0 @@\n-bool Arguments::sun_java_launcher_is_altjvm() {\n-  return _sun_java_launcher_is_altjvm;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -241,3 +241,0 @@\n-  \/\/ was this VM created via the -XXaltjvm=<path> option\n-  static bool   _sun_java_launcher_is_altjvm;\n-\n@@ -432,2 +429,0 @@\n-  \/\/ -Dsun.java.launcher.is_altjvm\n-  static bool sun_java_launcher_is_altjvm();\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}