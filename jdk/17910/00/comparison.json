{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include <unordered_set>\n@@ -687,0 +688,82 @@\n+class MarkUsageFormClosure : public FormClosure {\n+private:\n+  ArchDesc* _ad;\n+  std::unordered_set<Form*> *_visited;\n+\n+public:\n+  MarkUsageFormClosure(ArchDesc* ad, std::unordered_set<Form*> *visit_map) {\n+    _ad = ad;\n+    _visited = visit_map;\n+  }\n+  virtual ~MarkUsageFormClosure() = default;\n+\n+  virtual void do_form(Form *form) {\n+    if (_visited->find(form) == _visited->end()) {\n+      _visited->insert(form);\n+      form->forms_do(this);\n+    }\n+  }\n+\n+  virtual void do_form_by_name(const char* name) {\n+    const Form* form = _ad->globalNames()[name];\n+    if (form) {\n+      do_form(const_cast<Form*>(form));\n+      return;\n+    }\n+    RegisterForm* regs = _ad->get_registers();\n+    if (regs->getRegClass(name)) {\n+      do_form(regs->getRegClass(name));\n+      return;\n+    }\n+  }\n+};\n+\n+\/\/ check unused operands\n+bool ArchDesc::check_usage() {\n+  std::unordered_set<Form*> visited;\n+  MarkUsageFormClosure callback(this, &visited);\n+  _instructions.reset();\n+  \/\/ iterate all instruction to mark used form\n+  InstructForm* instr;\n+  for ( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n+    callback.do_form(instr);\n+  }\n+\n+  \/\/ these forms are coded in OperandForm::is_user_name_for_sReg\n+  callback.do_form_by_name(\"stackSlotI\");\n+  callback.do_form_by_name(\"stackSlotP\");\n+  callback.do_form_by_name(\"stackSlotD\");\n+  callback.do_form_by_name(\"stackSlotF\");\n+  callback.do_form_by_name(\"stackSlotL\");\n+\n+  \/\/ special generic vector operands used in Matcher::pd_specialize_generic_vector_operand\n+#if defined(AARCH64)\n+  callback.do_form_by_name(\"vecA\");\n+  callback.do_form_by_name(\"vecD\");\n+  callback.do_form_by_name(\"vecX\");\n+#elif defined(AMD64)\n+  callback.do_form_by_name(\"vecS\");\n+  callback.do_form_by_name(\"vecD\");\n+  callback.do_form_by_name(\"vecX\");\n+  callback.do_form_by_name(\"vecY\");\n+  callback.do_form_by_name(\"vecZ\");\n+  callback.do_form_by_name(\"legVecS\");\n+  callback.do_form_by_name(\"legVecD\");\n+  callback.do_form_by_name(\"legVecX\");\n+  callback.do_form_by_name(\"legVecY\");\n+  callback.do_form_by_name(\"legVecZ\");\n+#endif\n+\n+  int cnt = 0;\n+  _operands.reset();\n+  OperandForm* operand;\n+  for ( ; (operand = (OperandForm*)_operands.iter()) != nullptr; ) {\n+    if(visited.find(operand) == visited.end() && !operand->ideal_only()) {\n+      fprintf(stderr, \"\\nWarning: unused operand (%s)\", operand->_ident);\n+      cnt++;\n+    }\n+  }\n+  if (cnt) fprintf(stderr, \"\\n-------Warning: total %d unused operandsn\", cnt);\n+\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":83,"deletions":0,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -229,0 +229,1 @@\n+  bool check_usage();\n","filename":"src\/hotspot\/share\/adlc\/archDesc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -365,0 +365,9 @@\n+void FormDict::forms_do(FormClosure* f) {;\n+  DictI iter(&_form);\n+  for( ; iter.test(); ++iter ) {\n+    Form* form = (Form*) iter._value;\n+    assert(form != nullptr, \"sanity\");\n+    f->do_form(form);\n+  }\n+}\n+\n@@ -377,0 +386,8 @@\n+\n+void FormClosure::do_form(Form* form) {\n+  assert(false, \"should not reach here\");\n+}\n+\n+void FormClosure::do_form_by_name(const char* name) {\n+  assert(false, \"should not reach here\");\n+}\n","filename":"src\/hotspot\/share\/adlc\/forms.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+class FormClosure;\n@@ -117,0 +118,2 @@\n+  \/\/ iterate child forms recursively\n+  void forms_do(FormClosure *f);\n@@ -166,0 +169,3 @@\n+  \/\/ iterate child forms recursively\n+  virtual void forms_do (FormClosure* f) { return; }\n+\n@@ -258,0 +264,10 @@\n+class FormClosure {\n+public:\n+    FormClosure() = default;\n+    virtual ~FormClosure() = default;\n+\n+    virtual void do_form(Form* form);\n+    virtual void do_form_by_name(const char* name);\n+};\n+\n+\n","filename":"src\/hotspot\/share\/adlc\/forms.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -201,0 +201,14 @@\n+void RegisterForm::forms_do(FormClosure *f) {\n+  const char *name = nullptr;\n+  if (_current_ac) f->do_form(_current_ac);\n+  for(_rdefs.reset(); (name = _rdefs.iter()) != nullptr;) {\n+    f->do_form((RegDef*)_regDef[name]);\n+  }\n+  for (_rclasses.reset(); (name = _rclasses.iter()) != nullptr;) {\n+    f->do_form((RegClass*)_regClass[name]);\n+  }\n+  for (_aclasses.reset(); (name = _aclasses.iter()) != nullptr;) {\n+    f->do_form((AllocClass*)_allocClass[name]);\n+  }\n+}\n+\n@@ -325,0 +339,7 @@\n+void RegClass::forms_do(FormClosure *f) {\n+  const char *name = nullptr;\n+  for( _regDefs.reset(); (name = _regDefs.iter()) != nullptr; ) {\n+    f->do_form((RegDef*)_regDef[name]);\n+  }\n+}\n+\n@@ -439,0 +460,8 @@\n+void AllocClass::forms_do(FormClosure* f) {\n+  const char *name;\n+  for(_regDefs.reset(); (name = _regDefs.iter()) != nullptr;) {\n+    f->do_form((RegDef*)_regDef[name]);\n+  }\n+  return;\n+}\n+\n@@ -709,0 +738,9 @@\n+void Peephole::forms_do(FormClosure *f) {\n+  if (_predicate) f->do_form(_predicate);\n+  if (_match) f->do_form(_match);\n+  if (_procedure) f->do_form(_procedure);\n+  if (_constraint) f->do_form(_constraint);\n+  if (_replace) f->do_form(_replace);\n+  return;\n+}\n+\n","filename":"src\/hotspot\/share\/adlc\/formsopt.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -202,0 +203,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -308,0 +310,5 @@\n+\n+  virtual void forms_do(FormClosure* f) {\n+    if (_rclasses[0]) f->do_form(_rclasses[0]);\n+    if (_rclasses[1]) f->do_form(_rclasses[1]);\n+  }\n@@ -328,0 +335,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -571,0 +579,1 @@\n+  virtual void forms_do(FormClosure* f);\n","filename":"src\/hotspot\/share\/adlc\/formsopt.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1501,0 +1501,18 @@\n+void InstructForm::forms_do(FormClosure *f) {\n+  if (_cisc_spill_alternate) f->do_form(_cisc_spill_alternate);\n+  if (_short_branch_form) f->do_form(_short_branch_form);\n+  _localNames.forms_do(f);\n+  if (_matrule) f->do_form(_matrule);\n+  if (_opcode) f->do_form(_opcode);\n+  if (_insencode) f->do_form(_insencode);\n+  if (_constant) f->do_form(_constant);\n+  if (_attribs) f->do_form(_attribs);\n+  if (_predicate) f->do_form(_predicate);\n+  _effects.forms_do(f);\n+  if (_exprule) f->do_form(_exprule);\n+  if (_rewrule) f->do_form(_rewrule);\n+  if (_format) f->do_form(_format);\n+  if (_peephole) f->do_form(_peephole);\n+  assert(_components.count() == 0, \"skip components\");\n+}\n+\n@@ -1618,0 +1636,8 @@\n+\n+void EncodeForm::forms_do(FormClosure* f) {\n+  const char *name;\n+  for (_eclasses.reset(); (name = _eclasses.iter()) != nullptr;) {\n+    f->do_form((EncClass*)_encClass[name]);\n+  }\n+}\n+\n@@ -1708,0 +1734,9 @@\n+void EncClass::forms_do(FormClosure *f) {\n+  _parameter_type.reset();\n+  const char *type = _parameter_type.iter();\n+  for ( ; type != nullptr ; type = _parameter_type.iter() ) {\n+    f->do_form_by_name(type);\n+  }\n+  _localNames.forms_do(f);\n+}\n+\n@@ -1838,0 +1873,9 @@\n+void InsEncode::forms_do(FormClosure *f) {\n+  _encoding.reset();\n+  NameAndList *encoding = (NameAndList*)_encoding.iter();\n+  for( ; encoding != nullptr; encoding = (NameAndList*)_encoding.iter() ) {\n+    \/\/ just check name, other operands will be checked as instruction parameters\n+    f->do_form_by_name(encoding->name());\n+  }\n+}\n+\n@@ -1971,0 +2015,13 @@\n+void ExpandRule::forms_do(FormClosure *f) {\n+  NameAndList *expand_instr = nullptr;\n+  \/\/ Iterate over the instructions 'node' expands into\n+  for(reset_instructions(); (expand_instr = iter_instructions()) != nullptr; ) {\n+    f->do_form_by_name(expand_instr->name());\n+  }\n+  _newopers.reset();\n+  const char* oper = _newopers.iter();\n+  for(; oper != nullptr; oper = _newopers.iter()) {\n+    f->do_form_by_name(oper);\n+  }\n+}\n+\n@@ -1987,0 +2044,6 @@\n+void RewriteRule::forms_do(FormClosure *f) {\n+  if (_condition) f->do_form(_condition);\n+  if (_instrs) f->do_form(_instrs);\n+  if (_opers) f->do_form(_opers);\n+}\n+\n@@ -2069,0 +2132,7 @@\n+void OpClassForm::forms_do(FormClosure* f) {\n+  const char *name;\n+  for(_oplst.reset(); (name = _oplst.iter()) != nullptr;) {\n+    f->do_form_by_name(name);\n+  }\n+}\n+\n@@ -2694,0 +2764,16 @@\n+void OperandForm::forms_do(FormClosure* f) {\n+  if (_matrule)    f->do_form(_matrule);\n+  if (_interface)  f->do_form(_interface);\n+  if (_attribs)    f->do_form(_attribs);\n+  if (_predicate)  f->do_form(_predicate);\n+  if (_constraint) f->do_form(_constraint);\n+  if (_construct)  f->do_form(_construct);\n+  if (_format)     f->do_form(_format);\n+  _localNames.forms_do(f);\n+  const char* opclass = nullptr;\n+  for ( _classes.reset(); (opclass = _classes.iter()) != nullptr; ) {\n+    f->do_form_by_name(opclass);\n+  }\n+  assert(_components.count() == 0, \"skip _compnets\");\n+}\n+\n@@ -2715,0 +2801,4 @@\n+void Constraint::forms_do(FormClosure *f) {\n+  f->do_form_by_name(_arg);\n+}\n+\n@@ -3542,0 +3632,6 @@\n+void MatchNode::forms_do(FormClosure *f) {\n+  f->do_form_by_name(_name);\n+  if (_lChild) f->do_form(_lChild);\n+  if (_rChild) f->do_form(_rChild);\n+}\n+\n@@ -3611,0 +3707,1 @@\n+\n@@ -4337,0 +4434,12 @@\n+void MatchRule::forms_do(FormClosure* f) {\n+  \/\/ keep sync with MatchNode::forms_do\n+  f->do_form_by_name(_name);\n+  if (_lChild) f->do_form(_lChild);\n+  if (_rChild) f->do_form(_rChild);\n+\n+  \/\/ handle next rule\n+  if (_next) {\n+    f->do_form(_next);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":109,"deletions":0,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -313,0 +313,1 @@\n+  virtual void forms_do(FormClosure *f);\n@@ -336,0 +337,1 @@\n+  virtual void forms_do(FormClosure *f);\n@@ -380,0 +382,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -471,0 +474,1 @@\n+  virtual void forms_do(FormClosure *f);\n@@ -518,0 +522,1 @@\n+  virtual void forms_do(FormClosure *f);\n@@ -557,0 +562,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -587,0 +593,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -714,0 +721,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -732,0 +740,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -1017,0 +1026,1 @@\n+  virtual void forms_do(FormClosure* f);\n@@ -1078,0 +1088,1 @@\n+  virtual void forms_do(FormClosure* f);\n","filename":"src\/hotspot\/share\/adlc\/formssel.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -189,0 +189,3 @@\n+  \/\/ Check defined operands are used\n+  AD.check_usage();\n+\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}