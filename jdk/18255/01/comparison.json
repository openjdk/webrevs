{"files":[{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5010944 6248072\n+  @summary List's rows overlap one another\n+  @library \/java\/awt\/regtesthelpers\n+  @run main\/manual SetFontTest\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class SetFontTest {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        1) Click on the 'Enlarge font' button to enlarge font of the list.\n+        2) If you see that the rows of the list overlap one another\n+        then the test failed. Otherwise, go to step 3.\n+        3) Click on the 'Change mode' button to set multiple-selection mode.\n+        4) If you see that the rows of the list overlap one another\n+        then the test failed. Otherwise, the test passed.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"AWT List Font Test\")\n+                       .instructions(INSTRUCTIONS)\n+                       .rows(10)\n+                       .columns(40)\n+                       .testUI(SetFontTest::createFontTest)\n+                       .build()\n+                       .awaitAndCheck();\n+    }\n+\n+    static Frame createFontTest() {\n+\n+        Frame frame = new Frame(\"List Font Test\");\n+        List list = new List(8, false);\n+        Button button1 = new Button(\"Enlarge font\");\n+        Button button2 = new Button(\"Change mode\");\n+\n+        list.add(\"111\");\n+        list.add(\"222\");\n+        list.add(\"333\");\n+        list.add(\"444\");\n+\n+        button1.addActionListener(\n+            new ActionListener(){\n+                public void actionPerformed(ActionEvent ae) {\n+                    list.setFont(new Font(\"SansSerif\", Font.PLAIN, 30));\n+                    list.repaint();\n+                }\n+            });\n+\n+        button2.addActionListener(\n+            new ActionListener(){\n+                public void actionPerformed(ActionEvent ae){\n+                    list.setMultipleMode(true);\n+                }\n+            });\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(list);\n+        frame.add(button1);\n+        frame.add(button2);\n+        frame.setSize(200, 250);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/SetFontTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 5010944 6248072\n-  @summary List's rows overlap one another\n-  @author Dmitry Cherepanov area=awt-list\n-  @run applet\/manual=yesno SetFontTest.html\n-  -->\n-<head>\n-<title> SetFontTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>SetFontTest<br>Bug ID: 5010944<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"SetFontTest.class\" WIDTH=200 HEIGHT=220><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/List\/SetFontTest\/SetFontTest.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,234 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  test\n-  @bug 5010944 6248072\n-  @summary List's rows overlap one another\n-  @author Dmitry Cherepanov area=awt-list\n-  @run applet\/manual=yesno SetFontTest.html\n-*\/\n-\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-public class SetFontTest extends Applet\n-{\n-    List list = new List(8, false);\n-    Button button1 = new Button(\"Enlarge font\");\n-    Button button2 = new Button(\"Change mode\");\n-\n-    public void init()\n-    {\n-        list.add(\"111\");\n-        list.add(\"222\");\n-        list.add(\"333\");\n-        list.add(\"444\");\n-        this.add(list);\n-\n-        this.add(button1);\n-        this.add(button2);\n-\n-        button1.addActionListener(\n-            new ActionListener(){\n-                public void actionPerformed(ActionEvent ae){\n-                    list.setFont( new Font( \"SansSerif\", Font.PLAIN, 30 ) );\n-                    list.repaint();\n-                }\n-            });\n-\n-        button2.addActionListener(\n-            new ActionListener(){\n-                public void actionPerformed(ActionEvent ae){\n-                    list.setMultipleMode(true);\n-                }\n-            });\n-\n-        this.setLayout (new FlowLayout ());\n-\n-        String[] instructions =\n-        {\n-            \"1) Click on the 'Enlarge font' button to enlarge font of the list.\",\n-            \"2) If you see that the rows of the list overlap one another \"+\n-            \"then the test failed. Otherwise, goto to the step 3.\",\n-            \"3) Click on the 'Change mode' button to set multiple-selection mode.\",\n-            \"4) If you see that the rows of the list overlap one another \"+\n-            \"then the test failed. Otherwise, the test passed.\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n-\n-    }\/\/ start()\n-}\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/List\/SetFontTest\/SetFontTest.java","additions":0,"deletions":234,"binary":false,"changes":234,"status":"deleted"}]}