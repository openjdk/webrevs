{"files":[{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.net;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.net.StandardProtocolFamily;\n-import java.net.UnixDomainSocketAddress;\n-import java.nio.channels.ServerSocketChannel;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-\/**\n- * A thread-safe utility class to create and destroy {@link ServerSocketChannel}s using unix domain sockets.\n- *\/\n-final class ServerUdsChannelHolder implements AutoCloseable {\n-\n-    private final Path socketFilePath;\n-\n-    final ServerSocketChannel channel;\n-\n-    private ServerUdsChannelHolder(String tempDirPrefix) {\n-        try {\n-            \/\/ Socket file will be created by `bind()`, hence, we must point to a non-existent file.\n-            this.socketFilePath = Files.createTempDirectory(tempDirPrefix).resolve(\"sock\");\n-            UnixDomainSocketAddress socketAddress = UnixDomainSocketAddress.of(socketFilePath);\n-            this.channel = ServerSocketChannel\n-                    .open(StandardProtocolFamily.UNIX)\n-                    .bind(socketAddress);\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe);\n-        }\n-    }\n-\n-    static ServerUdsChannelHolder forClass(Class<?> clazz) {\n-        return new ServerUdsChannelHolder(clazz.getSimpleName() + '-');\n-    }\n-\n-    @Override\n-    public void close() {\n-        try {\n-            channel.close();\n-            Files.delete(socketFilePath);\n-            Files.delete(socketFilePath.getParent());\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe);\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"\" + socketFilePath;\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/ServerUdsChannelHolder.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -26,0 +26,2 @@\n+import java.net.StandardProtocolFamily;\n+import java.net.UnixDomainSocketAddress;\n@@ -28,0 +30,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -47,1 +51,1 @@\n-    private ServerSocketChannelHolder sscHolder;\n+    private ServerSocketChannel ssc;\n@@ -51,1 +55,1 @@\n-    @Param({\"inet\", \"unix\"})\n+    @Param({\"INET\", \"UNIX\"})\n@@ -54,16 +58,0 @@\n-    private record ServerSocketChannelHolder(ServerSocketChannel channel, AutoCloseable terminator) {}\n-\n-    private ServerSocketChannelHolder createServerSocketChannelHolder() throws IOException {\n-        return switch (family) {\n-            case \"inet\" -> {\n-                ServerSocketChannel channel = ServerSocketChannel.open().bind(null);\n-                yield new ServerSocketChannelHolder(channel, channel);\n-            }\n-            case \"unix\" -> {\n-                ServerUdsChannelHolder holder = ServerUdsChannelHolder.forClass(SocketChannelConnectionSetup.class);\n-                yield new ServerSocketChannelHolder(holder.channel, holder);\n-            }\n-            default -> throw new InternalError(\"unknown family: \" + family);\n-        };\n-    }\n-\n@@ -72,1 +60,2 @@\n-        sscHolder = createServerSocketChannelHolder();\n+        StandardProtocolFamily typedFamily = StandardProtocolFamily.valueOf(family);\n+        ssc = ServerSocketChannel.open(typedFamily).bind(null);\n@@ -77,1 +66,7 @@\n-        sscHolder.terminator.close();\n+        Path udsFilePath = ssc.getLocalAddress() instanceof UnixDomainSocketAddress udsChannel\n+                ? udsChannel.getPath()\n+                : null;\n+        ssc.close();\n+        if (udsFilePath != null) {\n+            Files.delete(udsFilePath);\n+        }\n@@ -83,2 +78,2 @@\n-        s1 = SocketChannel.open(sscHolder.channel.getLocalAddress());\n-        s2 = sscHolder.channel.accept();\n+        s1 = SocketChannel.open(ssc.getLocalAddress());\n+        s2 = ssc.accept();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelConnectionSetup.java","additions":17,"deletions":22,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import java.net.StandardProtocolFamily;\n+import java.net.UnixDomainSocketAddress;\n@@ -28,0 +30,1 @@\n+import java.nio.channels.ServerSocketChannel;\n@@ -46,1 +49,1 @@\n-    private ServerUdsChannelHolder sscHolder;\n+    private ServerSocketChannel ssc;\n@@ -51,2 +54,0 @@\n-    private volatile Path socket;\n-\n@@ -55,3 +56,3 @@\n-        sscHolder = ServerUdsChannelHolder.forClass(UnixSocketChannelReadWrite.class);\n-        s1 = SocketChannel.open(sscHolder.channel.getLocalAddress());\n-        s2 = sscHolder.channel.accept();\n+        ssc = ServerSocketChannel.open(StandardProtocolFamily.UNIX).bind(null);\n+        s1 = SocketChannel.open(ssc.getLocalAddress());\n+        s2 = ssc.accept();\n@@ -70,1 +71,3 @@\n-        sscHolder.close();\n+        Path udsFilePath = ((UnixDomainSocketAddress) ssc.getLocalAddress()).getPath();\n+        ssc.close();\n+        Files.delete(udsFilePath);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/UnixSocketChannelReadWrite.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}