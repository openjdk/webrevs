{"files":[{"patch":"@@ -30,1 +30,2 @@\n-import java.nio.file.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -32,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -52,8 +52,0 @@\n-    private SocketChannel s1, s2;\n-\n-    private static volatile String tempDir;\n-    private static final AtomicInteger count = new AtomicInteger(0);\n-    private volatile Path socket;\n-\n-    @Param({\"inet\", \"unix\"})\n-    private volatile String family;\n@@ -61,8 +53,1 @@\n-    static {\n-        try {\n-            Path p = Files.createTempDirectory(\"readWriteTest\");\n-            tempDir = p.toString();\n-        } catch (IOException e) {\n-            tempDir = null;\n-        }\n-    }\n+    private Path sscFilePath;\n@@ -70,12 +55,1 @@\n-    private ServerSocketChannel getServerSocketChannel() throws IOException {\n-        if (family.equals(\"inet\"))\n-            return getInetServerSocketChannel();\n-        else if (family.equals(\"unix\"))\n-            return getUnixServerSocketChannel();\n-        throw new InternalError();\n-    }\n-\n-\n-    private ServerSocketChannel getInetServerSocketChannel() throws IOException {\n-        return ServerSocketChannel.open().bind(null);\n-    }\n+    private SocketChannel s1, s2;\n@@ -83,6 +57,2 @@\n-    private ServerSocketChannel getUnixServerSocketChannel() throws IOException {\n-        int next = count.incrementAndGet();\n-        socket = Paths.get(tempDir, Integer.toString(next));\n-        UnixDomainSocketAddress addr = UnixDomainSocketAddress.of(socket);\n-        return ServerSocketChannel.open(StandardProtocolFamily.UNIX).bind(addr);\n-    }\n+    @Param({\"INET\", \"UNIX\"})\n+    private String family;\n@@ -92,1 +62,8 @@\n-        ssc = getServerSocketChannel();\n+        StandardProtocolFamily typedFamily = StandardProtocolFamily.valueOf(family);\n+        ssc = ServerSocketChannel.open(typedFamily).bind(null);\n+        \/\/ Record the UDS file path right after binding, as the socket may be\n+        \/\/ closed later due to a failure, and subsequent calls to `getPath()`\n+        \/\/ will throw.\n+        sscFilePath = ssc.getLocalAddress() instanceof UnixDomainSocketAddress udsChannel\n+                ? udsChannel.getPath()\n+                : null;\n@@ -96,1 +73,1 @@\n-    public void afterRun() throws IOException {\n+    public void afterRun() throws Exception {\n@@ -98,3 +75,2 @@\n-        if (family.equals(\"unix\")) {\n-            Files.deleteIfExists(socket);\n-            Files.deleteIfExists(Path.of(tempDir));\n+        if (sscFilePath != null) {\n+            Files.delete(sscFilePath);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelConnectionSetup.java","additions":17,"deletions":41,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+    private Path sscFilePath;\n@@ -54,10 +55,0 @@\n-    private volatile Path socket;\n-\n-    private ServerSocketChannel getServerSocketChannel() throws IOException {\n-        socket = Files.createTempDirectory(UnixSocketChannelReadWrite.class.getSimpleName()).resolve(\"sock\");\n-        UnixDomainSocketAddress addr = UnixDomainSocketAddress.of(socket);\n-        ServerSocketChannel c = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-        c.bind(addr);\n-        return c;\n-    }\n-\n@@ -66,1 +57,5 @@\n-        ssc = getServerSocketChannel();\n+        ssc = ServerSocketChannel.open(StandardProtocolFamily.UNIX).bind(null);\n+        \/\/ Record the UDS file path right after binding, as the socket may be\n+        \/\/ closed later due to a failure, and subsequent calls to `getPath()`\n+        \/\/ will throw.\n+        sscFilePath = ((UnixDomainSocketAddress) ssc.getLocalAddress()).getPath();\n@@ -82,2 +77,1 @@\n-        Files.delete(socket);\n-        Files.delete(socket.getParent());\n+        Files.delete(sscFilePath);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/UnixSocketChannelReadWrite.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"}]}