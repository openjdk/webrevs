{"files":[{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.net;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.StandardProtocolFamily;\n+import java.net.UnixDomainSocketAddress;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/**\n+ * A thread-safe utility class to create and destroy {@link ServerSocketChannel}s using unix domain sockets.\n+ *\/\n+final class ServerUdsChannelHolder implements AutoCloseable {\n+\n+    private final Path socketFilePath;\n+\n+    final ServerSocketChannel channel;\n+\n+    private ServerUdsChannelHolder(String tempDirPrefix) {\n+        try {\n+            \/\/ Socket file will be created by `bind()`, hence, we must point to a non-existent file.\n+            this.socketFilePath = Files.createTempDirectory(tempDirPrefix).resolve(\"sock\");\n+            UnixDomainSocketAddress socketAddress = UnixDomainSocketAddress.of(socketFilePath);\n+            this.channel = ServerSocketChannel\n+                    .open(StandardProtocolFamily.UNIX)\n+                    .bind(socketAddress);\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(ioe);\n+        }\n+    }\n+\n+    static ServerUdsChannelHolder forClass(Class<?> clazz) {\n+        return new ServerUdsChannelHolder(clazz.getSimpleName() + '-');\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            channel.close();\n+            Files.delete(socketFilePath);\n+            Files.delete(socketFilePath.getParent());\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(ioe);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"\" + socketFilePath;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/ServerUdsChannelHolder.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -26,2 +26,0 @@\n-import java.net.StandardProtocolFamily;\n-import java.net.UnixDomainSocketAddress;\n@@ -30,1 +28,0 @@\n-import java.nio.file.*;\n@@ -32,1 +29,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -51,2 +47,1 @@\n-    private ServerSocketChannel ssc;\n-    private SocketChannel s1, s2;\n+    private ServerSocketChannelHolder sscHolder;\n@@ -54,3 +49,1 @@\n-    private static volatile String tempDir;\n-    private static final AtomicInteger count = new AtomicInteger(0);\n-    private volatile Path socket;\n+    private SocketChannel s1, s2;\n@@ -61,27 +54,14 @@\n-    static {\n-        try {\n-            Path p = Files.createTempDirectory(\"readWriteTest\");\n-            tempDir = p.toString();\n-        } catch (IOException e) {\n-            tempDir = null;\n-        }\n-    }\n-\n-    private ServerSocketChannel getServerSocketChannel() throws IOException {\n-        if (family.equals(\"inet\"))\n-            return getInetServerSocketChannel();\n-        else if (family.equals(\"unix\"))\n-            return getUnixServerSocketChannel();\n-        throw new InternalError();\n-    }\n-\n-\n-    private ServerSocketChannel getInetServerSocketChannel() throws IOException {\n-        return ServerSocketChannel.open().bind(null);\n-    }\n-\n-    private ServerSocketChannel getUnixServerSocketChannel() throws IOException {\n-        int next = count.incrementAndGet();\n-        socket = Paths.get(tempDir, Integer.toString(next));\n-        UnixDomainSocketAddress addr = UnixDomainSocketAddress.of(socket);\n-        return ServerSocketChannel.open(StandardProtocolFamily.UNIX).bind(addr);\n+    private record ServerSocketChannelHolder(ServerSocketChannel channel, AutoCloseable terminator) {}\n+\n+    private ServerSocketChannelHolder createServerSocketChannelHolder() throws IOException {\n+        return switch (family) {\n+            case \"inet\" -> {\n+                ServerSocketChannel channel = ServerSocketChannel.open().bind(null);\n+                yield new ServerSocketChannelHolder(channel, channel);\n+            }\n+            case \"unix\" -> {\n+                ServerUdsChannelHolder holder = ServerUdsChannelHolder.forClass(SocketChannelConnectionSetup.class);\n+                yield new ServerSocketChannelHolder(holder.channel, holder);\n+            }\n+            default -> throw new InternalError(\"unknown family: \" + family);\n+        };\n@@ -92,1 +72,1 @@\n-        ssc = getServerSocketChannel();\n+        sscHolder = createServerSocketChannelHolder();\n@@ -96,6 +76,2 @@\n-    public void afterRun() throws IOException {\n-        ssc.close();\n-        if (family.equals(\"unix\")) {\n-            Files.deleteIfExists(socket);\n-            Files.deleteIfExists(Path.of(tempDir));\n-        }\n+    public void afterRun() throws Exception {\n+        sscHolder.terminator.close();\n@@ -107,2 +83,2 @@\n-        s1 = SocketChannel.open(ssc.getLocalAddress());\n-        s2 = ssc.accept();\n+        s1 = SocketChannel.open(sscHolder.channel.getLocalAddress());\n+        s2 = sscHolder.channel.accept();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelConnectionSetup.java","additions":21,"deletions":45,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-import java.net.StandardProtocolFamily;\n-import java.net.UnixDomainSocketAddress;\n@@ -30,1 +28,0 @@\n-import java.nio.channels.ServerSocketChannel;\n@@ -49,1 +46,1 @@\n-    private ServerSocketChannel ssc;\n+    private ServerUdsChannelHolder sscHolder;\n@@ -56,8 +53,0 @@\n-    private ServerSocketChannel getServerSocketChannel() throws IOException {\n-        socket = Files.createTempDirectory(UnixSocketChannelReadWrite.class.getSimpleName()).resolve(\"sock\");\n-        UnixDomainSocketAddress addr = UnixDomainSocketAddress.of(socket);\n-        ServerSocketChannel c = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-        c.bind(addr);\n-        return c;\n-    }\n-\n@@ -66,3 +55,3 @@\n-        ssc = getServerSocketChannel();\n-        s1 = SocketChannel.open(ssc.getLocalAddress());\n-        s2 = ssc.accept();\n+        sscHolder = ServerUdsChannelHolder.forClass(UnixSocketChannelReadWrite.class);\n+        s1 = SocketChannel.open(sscHolder.channel.getLocalAddress());\n+        s2 = sscHolder.channel.accept();\n@@ -81,3 +70,1 @@\n-        ssc.close();\n-        Files.delete(socket);\n-        Files.delete(socket.getParent());\n+        sscHolder.close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/UnixSocketChannelReadWrite.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"}]}