{"files":[{"patch":"@@ -79,0 +79,6 @@\n+bool LockStack::is_owning_thread(JavaThread* current) const {\n+  bool is_owning = &current->lock_stack() == this;\n+  assert(is_owning == (get_thread() == current), \"is_owning sanity\");\n+  return is_owning;\n+}\n+\n@@ -83,1 +89,2 @@\n-  if (SafepointSynchronize::is_at_safepoint() || (Thread::current()->is_Java_thread() && is_owning_thread())) {\n+  Thread* current = Thread::current();\n+  if (SafepointSynchronize::is_at_safepoint() || (current->is_Java_thread() && is_owning_thread(JavaThread::cast(current)))) {\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-  bool is_owning_thread() const;\n+  bool is_owning_thread(JavaThread* current) const;\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,11 +58,0 @@\n-inline bool LockStack::is_owning_thread() const {\n-  Thread* current = Thread::current();\n-  if (current->is_Java_thread()) {\n-    JavaThread* thread = JavaThread::cast(current);\n-    bool is_owning = &thread->lock_stack() == this;\n-    assert(is_owning == (get_thread() == thread), \"is_owning sanity\");\n-    return is_owning;\n-  }\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"}]}