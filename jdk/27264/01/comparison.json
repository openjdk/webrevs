{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,0 +259,10 @@\n+void enableConsoleCtrlHandler(bool enable) {\n+    if (!SetConsoleCtrlHandler(NULL, enable ? FALSE : TRUE)) {\n+        JP_THROW(SysError(tstrings::any() << \"SetConsoleCtrlHandler(NULL, \"\n+                                            << (enable ? \"FALSE\" : \"TRUE\")\n+                                            << \") failed\",\n+                                                    SetConsoleCtrlHandler));\n+    }\n+}\n+\n+\n@@ -313,0 +323,13 @@\n+        exec.afterProcessCreated([&](HANDLE pid) {\n+            \/\/\n+            \/\/ Ignore Ctrl+C in the current process.\n+            \/\/ This will prevent child process termination without allowing\n+            \/\/ it to handle Ctrl+C events.\n+            \/\/\n+            \/\/ Disable the default Ctrl+C handler *after* the child process\n+            \/\/ has been created as it is inheritable and we want the child\n+            \/\/ process to have the default handler.\n+            \/\/\n+            enableConsoleCtrlHandler(false);\n+        });\n+\n","filename":"src\/jdk.jpackage\/windows\/native\/applauncher\/WinLauncher.cpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,0 +164,4 @@\n+    if (afterProcessCreatedCallback) {\n+      afterProcessCreatedCallback(processInfo.hProcess);\n+    }\n+\n","filename":"src\/jdk.jpackage\/windows\/native\/common\/Executor.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+#include <functional>\n+\n@@ -100,0 +102,8 @@\n+    \/**\n+     * Call provided function after the process hass been created.\n+     *\/\n+    Executor& afterProcessCreated(const std::function<void(HANDLE)>& v) {\n+        afterProcessCreatedCallback = v;\n+        return *this;\n+    }\n+\n@@ -109,0 +119,1 @@\n+    std::function<void(HANDLE)> afterProcessCreatedCallback;\n","filename":"src\/jdk.jpackage\/windows\/native\/common\/Executor.h","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class UseShutdownHook {\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        System.out.println(\"UseShutdownHook started\");\n+        Runtime.getRuntime().addShutdownHook(new Thread() {\n+            @Override\n+            public void run() {\n+                output(\"jpackage.test.appOutput\", \"shutdown hook executed\");\n+            }\n+        });\n+\n+        var lock = new Object();\n+        synchronized (lock) {\n+            lock.wait();\n+        }\n+    }\n+\n+    private static void output(String propertyName, String msg) {\n+\n+        var outputFilePath = Path.of(System.getProperty(propertyName));\n+\n+        System.out.println(String.format(\"Writing [%s] into [%s]\", msg, outputFilePath));\n+\n+        try {\n+            Files.createDirectories(outputFilePath.getParent());\n+            Files.writeString(outputFilePath, msg);\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/apps\/UseShutdownHook.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+param (\n+  # Path to executable to start.\n+  [Parameter(Mandatory=$true)]\n+  [string]$Executable,\n+\n+  # Timeout to wait after the executable has been started.\n+  [Parameter(Mandatory=$true)]\n+  [double]$TimeoutSeconds,\n+\n+  # Internal.\n+  [switch]$Restarted\n+)\n+\n+$type = @{\n+  TypeDefinition = @'\n+using System;\n+using System.Runtime.InteropServices;\n+\n+namespace Stuff {\n+\n+  internal struct Details {\n+    [DllImport(\"kernel32.dll\", SetLastError = true)]\n+    [return: MarshalAs(UnmanagedType.Bool)]\n+    internal static extern bool GenerateConsoleCtrlEvent(uint dwCtrlEvent, uint dwProcessGroupId);\n+  }\n+\n+  public struct Facade {\n+    public static void GenerateConsoleCtrlEvent() {\n+      bool result = Details.GenerateConsoleCtrlEvent(0, 0);\n+      if (!result) {\n+        int errorCode = Marshal.GetLastWin32Error();\n+        Console.Error.WriteLine(\"GenerateConsoleCtrlEvent function failed with error code: \" + errorCode);\n+        Environment.Exit(100);\n+      }\n+    }\n+  }\n+}\n+'@\n+}\n+Add-Type @type\n+\n+Set-PSDebug -Trace 2\n+\n+if ($Restarted) {\n+  # Launch the target executable.\n+  # `-NoNewWindow` parameter will attach the started process to the existing console.\n+  Start-Process -NoNewWindow $Executable\n+\n+  # Wait a bit to let the started process complete initialization.\n+\n+  Start-Sleep -Seconds $TimeoutSeconds\n+\n+  # Call GenerateConsoleCtrlEvent to send a CTRL+C event to the launched executable.\n+  # CTRL+C event will be sent to all processes attached to the console of the current process,\n+  # i.e., it will be sent to this PowerShell process and to the started $Executable process because\n+  # it was configured to attach to the existing console (the console of this PowerShell process).\n+  [Stuff.Facade]::GenerateConsoleCtrlEvent()\n+} else {\n+  # Restart this script in a new PowerShell process with a new console.\n+  Start-Process -Wait -FilePath powershell -ArgumentList @(\n+    \"-NoLogo\", \"-NoProfile\", \"-ExecutionPolicy\", \"Unrestricted\",\n+    \"-WindowStyle\", \"Hidden\", # Hide the window to avoid focus being distracted\n+    \"-File\", $PSCommandPath,\n+    \"-Executable\", $Executable,\n+    \"-TimeoutSeconds\", $TimeoutSeconds,\n+    \"-Restarted\"\n+  )\n+}\n","filename":"test\/jdk\/tools\/jpackage\/resources\/Win8365790Test.ps1","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static jdk.jpackage.test.HelloApp.configureAndExecute;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Test the child process has a chance to handle Ctrl+C signal.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test case for JDK-8365790\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @build jdk.jpackage.test.*\n+ * @build Win8365790Test\n+ * @requires (os.family == \"windows\")\n+ * @run main\/othervm\/timeout=360 -Xmx512m  jdk.jpackage.test.Main\n+ *  --jpt-run=Win8365790Test\n+ *\/\n+public class Win8365790Test {\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+\n+        var outputDir = TKit.createTempDirectory(\"response-dir\");\n+        var outputFile = outputDir.resolve(\"output.txt\");\n+\n+        var cmd = JPackageCommand\n+                .helloAppImage(TEST_APP_JAVA + \"*UseShutdownHook\")\n+                .ignoreFakeRuntime()\n+                .addArguments(\"--java-options\", \"-Djpackage.test.appOutput=\" + outputFile.toString());\n+\n+        cmd.executeAndAssertImageCreated();\n+\n+        \/\/ Launch the main launcher and send Ctrl+C signal to it.\n+        Thread.ofVirtual().start(() -> {\n+            configureAndExecute(0, Executor.of(\"powershell\", \"-NoLogo\", \"-NoProfile\", \"-ExecutionPolicy\", \"Unrestricted\", \"-File\", TEST_PS1.toString())\n+                    .addArguments(\"-TimeoutSeconds\", \"5\")\n+                    .addArgument(\"-Executable\").addArgument(cmd.appLauncherPath())\n+                    .dumpOutput());\n+        });\n+\n+        TKit.waitForFileCreated(outputFile, Duration.ofSeconds(20), Duration.ofSeconds(1));\n+\n+        TKit.assertFileExists(outputFile);\n+        TKit.assertEquals(\"shutdown hook executed\", Files.readString(outputFile), \"Check shutdown hook executed\");\n+    }\n+\n+    private static final Path TEST_APP_JAVA = TKit.TEST_SRC_ROOT.resolve(\"apps\/UseShutdownHook.java\");\n+    private static final Path TEST_PS1 = TKit.TEST_SRC_ROOT.resolve(Path.of(\"resources\/Win8365790Test.ps1\")).normalize();\n+}\n","filename":"test\/jdk\/tools\/jpackage\/windows\/Win8365790Test.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}