{"files":[{"patch":"@@ -44,1 +44,0 @@\n-import java.nio.file.WatchService;\n@@ -614,20 +613,22 @@\n-        WatchService ws = FileSystems.getDefault().newWatchService();\n-\n-        Path watchDirectory = fileToWaitFor.toAbsolutePath().getParent();\n-        watchDirectory.register(ws, ENTRY_CREATE, ENTRY_MODIFY);\n-\n-        var waitUntil = Instant.now().plus(timeout);\n-        for (;;) {\n-            var remainderTimeout = Instant.now().until(waitUntil);\n-            assertTrue(remainderTimeout.isPositive(), String.format(\n-                    \"Check timeout value %dms is positive\", remainderTimeout.toMillis()));\n-\n-            WatchKey key = ThrowingSupplier.toSupplier(() -> {\n-                return ws.poll(remainderTimeout.toMillis(), TimeUnit.MILLISECONDS);\n-            }).get();\n-            if (key == null) {\n-                if (Files.exists(fileToWaitFor)) {\n-                    trace(String.format(\n-                            \"File [%s] is available after poll timeout expired\",\n-                            fileToWaitFor));\n-                    return;\n+        try (var ws = FileSystems.getDefault().newWatchService()) {\n+\n+            Path watchDirectory = fileToWaitFor.toAbsolutePath().getParent();\n+            watchDirectory.register(ws, ENTRY_CREATE, ENTRY_MODIFY);\n+\n+            var waitUntil = Instant.now().plus(timeout);\n+            for (;;) {\n+                var remainderTimeout = Instant.now().until(waitUntil);\n+                assertTrue(remainderTimeout.isPositive(), String.format(\n+                        \"Check timeout value %dms is positive\", remainderTimeout.toMillis()));\n+\n+                WatchKey key = ThrowingSupplier.toSupplier(() -> {\n+                    return ws.poll(remainderTimeout.toMillis(), TimeUnit.MILLISECONDS);\n+                }).get();\n+                if (key == null) {\n+                    if (Files.exists(fileToWaitFor)) {\n+                        trace(String.format(\n+                                \"File [%s] is available after poll timeout expired\",\n+                                fileToWaitFor));\n+                        return;\n+                    }\n+                    assertUnexpected(String.format(\"Timeout %dms expired\", remainderTimeout.toMillis()));\n@@ -635,2 +636,0 @@\n-                assertUnexpected(String.format(\"Timeout %dms expired\", remainderTimeout.toMillis()));\n-            }\n@@ -638,8 +637,9 @@\n-            for (WatchEvent<?> event : key.pollEvents()) {\n-                if (event.kind() == StandardWatchEventKinds.OVERFLOW) {\n-                    continue;\n-                }\n-                Path contextPath = (Path) event.context();\n-                if (Files.exists(fileToWaitFor) && Files.isSameFile(watchDirectory.resolve(contextPath), fileToWaitFor)) {\n-                    trace(String.format(\"File [%s] is available\", fileToWaitFor));\n-                    return;\n+                for (WatchEvent<?> event : key.pollEvents()) {\n+                    if (event.kind() == StandardWatchEventKinds.OVERFLOW) {\n+                        continue;\n+                    }\n+                    Path contextPath = (Path) event.context();\n+                    if (Files.exists(fileToWaitFor) && Files.isSameFile(watchDirectory.resolve(contextPath), fileToWaitFor)) {\n+                        trace(String.format(\"File [%s] is available\", fileToWaitFor));\n+                        return;\n+                    }\n@@ -647,1 +647,0 @@\n-            }\n@@ -649,2 +648,3 @@\n-            if (!key.reset()) {\n-                assertUnexpected(\"Watch key invalidated\");\n+                if (!key.reset()) {\n+                    assertUnexpected(\"Watch key invalidated\");\n+                }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"}]}