{"files":[{"patch":"@@ -28,0 +28,4 @@\n+import java.nio.file.StandardOpenOption;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n@@ -32,1 +36,8 @@\n-        System.out.println(\"UseShutdownHook started\");\n+        trace(\"Started\");\n+\n+        var outputFile = Path.of(args[0]);\n+        trace(String.format(\"Write output in [%s] file\", outputFile));\n+\n+        var shutdownTimeoutSeconds = Integer.parseInt(args[1]);\n+        trace(String.format(\"Automatically shutdown the app in %ss\", shutdownTimeoutSeconds));\n+\n@@ -36,1 +47,1 @@\n-                output(\"jpackage.test.appOutput\", \"shutdown hook executed\");\n+                output(outputFile, \"shutdown hook executed\");\n@@ -40,0 +51,1 @@\n+        var startTime = System.currentTimeMillis();\n@@ -41,4 +53,5 @@\n-        synchronized (lock) {\n-            lock.wait();\n-        }\n-    }\n+        do {\n+            synchronized (lock) {\n+                lock.wait(shutdownTimeoutSeconds * 1000);\n+            }\n+        } while ((System.currentTimeMillis() - startTime) < (shutdownTimeoutSeconds * 1000));\n@@ -46,1 +59,2 @@\n-    private static void output(String propertyName, String msg) {\n+        output(outputFile, \"exit\");\n+    }\n@@ -48,1 +62,1 @@\n-        var outputFilePath = Path.of(System.getProperty(propertyName));\n+    private static void output(Path outputFilePath, String msg) {\n@@ -50,1 +64,1 @@\n-        System.out.println(String.format(\"Writing [%s] into [%s]\", msg, outputFilePath));\n+        trace(String.format(\"Writing [%s] into [%s]\", msg, outputFilePath));\n@@ -54,1 +68,1 @@\n-            Files.writeString(outputFilePath, msg);\n+            Files.writeString(outputFilePath, msg, StandardOpenOption.APPEND, StandardOpenOption.CREATE);\n@@ -59,0 +73,15 @@\n+\n+    private static void trace(String msg) {\n+        Date time = new Date(System.currentTimeMillis());\n+        msg = String.format(\"UseShutdownHook [%s]: %s\", SDF.format(time), msg);\n+        System.out.println(msg);\n+        try {\n+            Files.write(traceFile, List.of(msg), StandardOpenOption.APPEND, StandardOpenOption.CREATE);\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+\n+    private static final SimpleDateFormat SDF = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+\n+    private static final Path traceFile = Path.of(System.getProperty(\"jpackage.test.trace-file\"));\n","filename":"test\/jdk\/tools\/jpackage\/apps\/UseShutdownHook.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-    public void addValue(String sectionName, String key, String value) {\n+    public CfgFile addValue(String sectionName, String key, String value) {\n@@ -69,0 +69,5 @@\n+        return this;\n+    }\n+\n+    public CfgFile add(CfgFile other) {\n+        return combine(this, other);\n@@ -92,1 +97,1 @@\n-    public void save(Path path) {\n+    public CfgFile save(Path path) {\n@@ -101,0 +106,1 @@\n+        return this;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CfgFile.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -643,2 +643,1 @@\n-                if (Files.isSameFile(watchDirectory.resolve(contextPath),\n-                        fileToWaitFor)) {\n+                if (Files.exists(fileToWaitFor) && Files.isSameFile(watchDirectory.resolve(contextPath), fileToWaitFor)) {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,4 +31,1 @@\n-  [double]$TimeoutSeconds,\n-\n-  # Internal.\n-  [switch]$Restarted\n+  [double]$TimeoutSeconds\n@@ -52,5 +49,2 @@\n-      bool result = Details.GenerateConsoleCtrlEvent(0, 0);\n-      if (!result) {\n-        int errorCode = Marshal.GetLastWin32Error();\n-        Console.Error.WriteLine(\"GenerateConsoleCtrlEvent function failed with error code: \" + errorCode);\n-        Environment.Exit(100);\n+      if (!Details.GenerateConsoleCtrlEvent(0, 0)) {\n+        reportLastErrorAndExit(\"GenerateConsoleCtrlEvent\");\n@@ -59,0 +53,6 @@\n+\n+    internal static void reportLastErrorAndExit(String func) {\n+      int errorCode = Marshal.GetLastWin32Error();\n+      Console.Error.WriteLine(func + \" function failed with error code: \" + errorCode);\n+      Environment.Exit(100);\n+    }\n@@ -67,4 +67,3 @@\n-if ($Restarted) {\n-  # Launch the target executable.\n-  # `-NoNewWindow` parameter will attach the started process to the existing console.\n-  Start-Process -NoNewWindow $Executable\n+# Launch the target executable.\n+# `-NoNewWindow` parameter will attach the started process to the existing console.\n+$childProc = Start-Process -PassThru -NoNewWindow $Executable\n@@ -72,1 +71,2 @@\n-  # Wait a bit to let the started process complete initialization.\n+# Wait a bit to let the started process complete initialization.\n+Start-Sleep -Seconds $TimeoutSeconds\n@@ -74,1 +74,5 @@\n-  Start-Sleep -Seconds $TimeoutSeconds\n+# Call GenerateConsoleCtrlEvent to send a CTRL+C event to the launched executable.\n+# CTRL+C event will be sent to all processes attached to the console of the current process,\n+# i.e., it will be sent to this PowerShell process and to the started $Executable process because\n+# it was configured to attach to the existing console (the console of this PowerShell process).\n+[Stuff.Facade]::GenerateConsoleCtrlEvent()\n@@ -76,16 +80,4 @@\n-  # Call GenerateConsoleCtrlEvent to send a CTRL+C event to the launched executable.\n-  # CTRL+C event will be sent to all processes attached to the console of the current process,\n-  # i.e., it will be sent to this PowerShell process and to the started $Executable process because\n-  # it was configured to attach to the existing console (the console of this PowerShell process).\n-  [Stuff.Facade]::GenerateConsoleCtrlEvent()\n-} else {\n-  # Restart this script in a new PowerShell process with a new console.\n-  Start-Process -Wait -FilePath powershell -ArgumentList @(\n-    \"-NoLogo\", \"-NoProfile\", \"-ExecutionPolicy\", \"Unrestricted\",\n-    \"-WindowStyle\", \"Hidden\", # Hide the window to avoid focus being distracted\n-    \"-File\", $PSCommandPath,\n-    \"-Executable\", $Executable,\n-    \"-TimeoutSeconds\", $TimeoutSeconds,\n-    \"-Restarted\"\n-  )\n-}\n+# Wait for child process termination\n+Wait-Process -InputObject $childProc\n+\n+Exit 0\n","filename":"test\/jdk\/tools\/jpackage\/resources\/Win8365790Test.ps1","additions":23,"deletions":31,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.jpackage.test.AdditionalLauncher;\n@@ -31,0 +32,1 @@\n+import jdk.jpackage.test.CfgFile;\n@@ -33,0 +35,1 @@\n+import jdk.jpackage.test.LauncherVerifier;\n@@ -46,1 +49,1 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m  jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=100 -Xmx512m  jdk.jpackage.test.Main\n@@ -55,1 +58,6 @@\n-        var outputFile = outputDir.resolve(\"output.txt\");\n+\n+        var mainOutputFile = outputDir.resolve(\"output.txt\");\n+        var mainTraceFile = outputDir.resolve(\"trace.txt\");\n+\n+        var probeOutputFile = outputDir.resolve(\"probe-output.txt\");\n+        var probeTraceFile = outputDir.resolve(\"probe-trace.txt\");\n@@ -60,1 +68,9 @@\n-                .addArguments(\"--java-options\", \"-Djpackage.test.appOutput=\" + outputFile.toString());\n+                .addArguments(\"--java-options\", \"-Djpackage.test.trace-file=\" + mainTraceFile.toString())\n+                .addArguments(\"--arguments\", mainOutputFile.toString())\n+                .addArguments(\"--arguments\", Long.toString(Duration.ofSeconds(TETS_APP_AUTOCLOSE_TIMEOUT_SECONDS).getSeconds()));\n+\n+        new AdditionalLauncher(\"probe\")\n+                .withoutVerifyActions(LauncherVerifier.Action.values())\n+                .addJavaOptions(\"-Djpackage.test.trace-file=\" + probeTraceFile.toString())\n+                .addDefaultArguments(probeOutputFile.toString(), Long.toString(Duration.ofSeconds(TETS_APP_AUTOCLOSE_TIMEOUT_SECONDS).getSeconds()))\n+                .applyTo(cmd);\n@@ -64,1 +80,24 @@\n-        \/\/ Launch the main launcher and send Ctrl+C signal to it.\n+        cmd.readLauncherCfgFile(\"probe\")\n+                .add(new CfgFile().addValue(\"Application\", \"win.norestart\", Boolean.TRUE.toString()))\n+                .save(cmd.appLauncherCfgPath(\"probe\"));\n+\n+        \/\/ Try Ctrl+C signal on a launcher with disabled restart functionality.\n+        \/\/ It will create a single launcher process instead of the parent and the child processes.\n+        \/\/ Ctrl+C always worked for launcher with disabled restart functionality.\n+        var probeOutput = runLauncher(cmd, \"probe\", probeTraceFile, probeOutputFile);\n+\n+        if (!probeOutput.equals(\"shutdown hook executed\")) {\n+            \/\/ Ctrl+C signal didn't make it. Test environment doesn't support Ctrl+C signal\n+            \/\/ delivery from the prowershell process to a child process, don't run the main\n+            \/\/ test.\n+            TKit.throwSkippedException(\n+                    \"The environment does NOT support Ctrl+C signal delivery from the prowershell process to a child process\");\n+        }\n+\n+        var mainOutput = runLauncher(cmd, null, mainTraceFile, mainOutputFile);\n+\n+        TKit.assertEquals(\"shutdown hook executed\", mainOutput, \"Check shutdown hook executed\");\n+    }\n+\n+    private static String runLauncher(JPackageCommand cmd, String launcherName, Path traceFile, Path outputFile) throws IOException {\n+     \/\/ Launch the main launcher and send Ctrl+C signal to it.\n@@ -66,3 +105,4 @@\n-            configureAndExecute(0, Executor.of(\"powershell\", \"-NoLogo\", \"-NoProfile\", \"-ExecutionPolicy\", \"Unrestricted\", \"-File\", TEST_PS1.toString())\n-                    .addArguments(\"-TimeoutSeconds\", \"5\")\n-                    .addArgument(\"-Executable\").addArgument(cmd.appLauncherPath())\n+            configureAndExecute(0, Executor.of(\"powershell\", \"-NonInteractive\", \"-NoLogo\", \"-NoProfile\", \"-ExecutionPolicy\", \"Unrestricted\")\n+                    .addArgument(\"-File\").addArgument(TEST_PS1)\n+                    .addArguments(\"-TimeoutSeconds\", Long.toString(Duration.ofSeconds(5).getSeconds()))\n+                    .addArgument(\"-Executable\").addArgument(cmd.appLauncherPath(launcherName))\n@@ -72,1 +112,7 @@\n-        TKit.waitForFileCreated(outputFile, Duration.ofSeconds(20), Duration.ofSeconds(1));\n+        TKit.waitForFileCreated(traceFile, Duration.ofSeconds(20), Duration.ofSeconds(2));\n+\n+        try {\n+            TKit.waitForFileCreated(outputFile, Duration.ofSeconds(TETS_APP_AUTOCLOSE_TIMEOUT_SECONDS * 2), Duration.ofSeconds(2));\n+        } finally {\n+            TKit.traceFileContents(traceFile, \"Test app trace\");\n+        }\n@@ -75,1 +121,1 @@\n-        TKit.assertEquals(\"shutdown hook executed\", Files.readString(outputFile), \"Check shutdown hook executed\");\n+        return Files.readString(outputFile);\n@@ -78,0 +124,2 @@\n+    private static final long TETS_APP_AUTOCLOSE_TIMEOUT_SECONDS = 30;\n+\n","filename":"test\/jdk\/tools\/jpackage\/windows\/Win8365790Test.java","additions":57,"deletions":9,"binary":false,"changes":66,"status":"modified"}]}