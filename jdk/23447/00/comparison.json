{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,6 @@\n-        `@run main SinceChecker <moduleName> [--exclude package1,package2 | --exclude package1 package2]`\n+        `@run main SinceChecker <moduleName> [--ignoreSince <string1>,<string2>] [--exclude package1,package2 | --exclude package1 package2]`\n+\n+To help long running projects still in development, that do not have a fixed version number that conforms\n+to the OpenJDK release cycle, one may want to use token name instead of continuely updating the current version since tags.\n+For example, `@since LongRunningProjectName`. The option `--ignoreSince` maybe used to\n+ignore these tags (`-ignoreSince LongRunningProjectName`). Maybe be specified multiple times.\n@@ -109,0 +114,5 @@\n+    private static final int JDK_CURRENT = Runtime.version().feature();\n+    \/\/ Ignored since tags\n+    private static final Set<String> IGNORE_LIST = new HashSet<>();\n+    \/\/ Simply replace ignored since tags with the latest version\n+    private static final Version IGNORE_VERSION = Version.parse(Integer.toString(JDK_CURRENT));\n@@ -128,0 +138,1 @@\n+        boolean ignoreFlag = false;\n@@ -130,1 +141,5 @@\n-            if (\"--exclude\".equals(args[i])) {\n+            if (\"--ignoreSince\".equals(args[i])) {\n+                ignoreFlag = true;\n+                excludeFlag = false;\n+                continue;\n+            } else if (\"--exclude\".equals(args[i])) {\n@@ -132,0 +147,1 @@\n+                ignoreFlag = false;\n@@ -142,0 +158,8 @@\n+\n+            if (ignoreFlag) {\n+                if (args[i].contains(\",\")) {\n+                    IGNORE_LIST.addAll(Arrays.asList(args[i].split(\",\")));\n+                } else {\n+                    IGNORE_LIST.add(args[i]);\n+                }\n+            }\n@@ -155,1 +179,1 @@\n-        for (int i = 9; i <= Runtime.version().feature(); i++) {\n+        for (int i = 9; i <= JDK_CURRENT; i++) {\n@@ -405,1 +429,1 @@\n-        String currentjdkVersion = String.valueOf(Runtime.version().feature());\n+        String currentjdkVersion = String.valueOf(JDK_CURRENT);\n@@ -455,16 +479,2 @@\n-        Pattern pattern = Pattern.compile(\"@since\\\\s+(\\\\d+(?:\\\\.\\\\d+)?)\");\n-        Matcher matcher = pattern.matcher(documentation);\n-        if (matcher.find()) {\n-            String versionString = matcher.group(1);\n-            try {\n-                if (versionString.equals(\"1.0\")) {\n-                    versionString = \"1\"; \/\/ended up being necessary\n-                } else if (versionString.startsWith(\"1.\")) {\n-                    versionString = versionString.substring(2);\n-                }\n-                return Version.parse(versionString);\n-            } catch (NumberFormatException ex) {\n-                error(\"`@since` value that cannot be parsed: \" + versionString);\n-                return null;\n-            }\n-        } else {\n+        Matcher matcher = Pattern.compile(\"@since\\\\s+(\\\\S+)\").matcher(documentation);\n+        if (!matcher.find()) {\n@@ -473,0 +483,21 @@\n+\n+        String versionString = matcher.group(1);\n+        if (IGNORE_LIST.contains(versionString)) {\n+            return IGNORE_VERSION;\n+        }\n+\n+        versionString = switch (versionString) {\n+            case \"1.0\" -> \"1\";\n+            case String v when v.matches(\"1\\\\.\\\\d+\\\\.\\\\d+\") -> \"1\";  \/\/ `1.x.x` -> `1`\n+            case String v when v.startsWith(\"1.\") -> v.substring(2);  \/\/ `1.x` -> `x`\n+            case String v when v.contains(\"u\") -> v.substring(0, v.indexOf('u')); \/\/ 6u25 -> 6\n+            default -> versionString;\n+        };\n+\n+        if (!versionString.matches(\"\\\\d+(?:\\\\.\\\\d+)?\")) {\n+            error(\"Non-numeric `@since` value encountered: '\" + versionString +\n+                    \"'; If this is intentional, consider using the --ignoreSince option.\");\n+            return null;\n+        }\n+\n+        return Version.parse(versionString);\n","filename":"test\/jdk\/tools\/sincechecker\/SinceChecker.java","additions":52,"deletions":21,"binary":false,"changes":73,"status":"modified"}]}