{"files":[{"patch":"@@ -1545,1 +1545,11 @@\n-                    mref.expr = toP(F.at(pos).AnnotatedType(typeAnnos, mref.expr));\n+                    if (TreeInfo.isType(mref.expr, names)) {\n+                        mref.expr = insertAnnotationsToMostInner(mref.expr, typeAnnos, false);\n+                    } else {\n+                        \/\/the selector is not a type, error recovery:\n+                        JCAnnotatedType annotatedType =\n+                                toP(F.at(pos).AnnotatedType(typeAnnos, mref.expr));\n+                        int termStart = getStartPos(mref.expr);\n+                        mref.expr = syntaxError(termStart, List.of(annotatedType),\n+                                                Errors.IllegalStartOfType);\n+                    }\n+                    mref.pos = getStartPos(mref.expr);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -440,0 +440,13 @@\n+        return isTypeSelector(base, names, TreeInfo::isStaticSym);\n+    }\n+    \/\/where\n+        private static boolean isStaticSym(JCTree tree) {\n+            Symbol sym = symbol(tree);\n+            return (sym.kind == TYP || sym.kind == PCK);\n+        }\n+\n+    public static boolean isType(JCTree base, Names names) {\n+        return isTypeSelector(base, names, _ -> true);\n+    }\n+\n+    private static boolean isTypeSelector(JCTree base, Names names, Predicate<JCTree> checkStaticSym) {\n@@ -447,1 +460,1 @@\n-                        isStaticSym(base);\n+                        checkStaticSym.test(base);\n@@ -449,1 +462,1 @@\n-                return isStaticSym(base) &&\n+                return checkStaticSym.test(base) &&\n@@ -460,5 +473,0 @@\n-    \/\/where\n-        private static boolean isStaticSym(JCTree tree) {\n-            Symbol sym = symbol(tree);\n-            return (sym.kind == TYP || sym.kind == PCK);\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8369489\n+ * @summary Verify annotations on member references work reasonably.\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run junit TypeAnnosOnMemberReferenceTest\n+ *\/\n+\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.source.util.TreePath;\n+import com.sun.source.util.TreeScanner;\n+import com.sun.source.util.Trees;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.lang.model.util.ElementFilter;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class TypeAnnosOnMemberReferenceTest {\n+    private ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testAnnoOnMemberRef() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.lang.annotation.Target;\n+                import java.lang.annotation.ElementType;\n+                import java.lang.annotation.Retention;\n+                import java.lang.annotation.RetentionPolicy;\n+\n+                public class Test {\n+                    interface I {\n+                        void foo(int i);\n+                    }\n+\n+                    @Target(ElementType.TYPE_USE)\n+                    @interface Ann1 {}\n+                    @Target(ElementType.TYPE_USE)\n+                    @interface Ann2 {}\n+                    I i = @Ann1 Test @Ann2 []::new;\n+                }\n+                \"\"\");\n+\n+        Path classDir = getClassDir();\n+        new JavacTask(tb)\n+                .classpath(classDir)\n+                .outdir(classes)\n+                .options(\"-processor\", VerifyAnnotations.class.getName())\n+                .files(tb.findJavaFiles(src))\n+                .outdir(classes)\n+                .run(Task.Expect.SUCCESS);\n+    }\n+\n+    public Path getClassDir() {\n+        String classes = ToolBox.testClasses;\n+        if (classes == null) {\n+            return Paths.get(\"build\");\n+        } else {\n+            return Paths.get(classes);\n+        }\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class VerifyAnnotations extends AbstractProcessor {\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latestSupported();\n+        }\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            TypeElement testElement = processingEnv.getElementUtils().getTypeElement(\"Test\");\n+            VariableElement iElement = ElementFilter.fieldsIn(testElement.getEnclosedElements()).getFirst();\n+            Trees trees = Trees.instance(processingEnv);\n+            TreePath iPath = trees.getPath(iElement);\n+            StringBuilder text = new StringBuilder();\n+            new TreeScanner<>() {\n+                int ident = 0;\n+                @Override\n+                public Object scan(Tree tree, Object p) {\n+                    if (tree != null) {\n+                        String indent =\n+                                Stream.generate(() -> \" \")\n+                                      .limit(ident)\n+                                      .collect(Collectors.joining());\n+\n+                        text.append(\"\\n\")\n+                            .append(indent)\n+                            .append(\"(\")\n+                            .append(tree.getKind());\n+                        ident += 4;\n+                        super.scan(tree, p);\n+                        ident -= 4;\n+                        text.append(\"\\n\")\n+                            .append(indent)\n+                            .append(\")\");\n+                    }\n+                    return null;\n+                }\n+\n+                @Override\n+                public Object visitIdentifier(IdentifierTree node, Object p) {\n+                    text.append(\" \").append(node.getName());\n+                    return super.visitIdentifier(node, p);\n+                }\n+            }.scan(((VariableTree) iPath.getLeaf()).getInitializer(), null);\n+            String expected =\n+                    \"\"\"\n+\n+                    (MEMBER_REFERENCE\n+                        (ANNOTATED_TYPE\n+                            (TYPE_ANNOTATION\n+                                (IDENTIFIER Ann2\n+                                )\n+                            )\n+                            (ARRAY_TYPE\n+                                (ANNOTATED_TYPE\n+                                    (TYPE_ANNOTATION\n+                                        (IDENTIFIER Ann1\n+                                        )\n+                                    )\n+                                    (IDENTIFIER Test\n+                                    )\n+                                )\n+                            )\n+                        )\n+                    )\"\"\";\n+\n+            String actual = text.toString();\n+\n+            if (!expected.equals(actual)) {\n+                throw new AssertionError(\"Expected: \" + expected + \",\" +\n+                                         \"got: \" + actual);\n+            }\n+\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnosOnMemberReferenceTest.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8310326 8312093 8312204 8315452 8337976 8324859 8344706 8351260\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8310326 8312093 8312204 8315452 8337976 8324859 8344706 8351260 8369489\n@@ -3079,0 +3079,27 @@\n+    @Test \/\/JDK-8369489\n+    void testTypeAnnotationBrokenMethodRef() throws IOException {\n+        String code = \"\"\"\n+                      public class Test {\n+                          Object o1 = @Ann any()::test;\n+                          Object o2 = @Ann any().field::test;\n+                      }\n+                      \"\"\";\n+        DiagnosticCollector<JavaFileObject> coll =\n+                new DiagnosticCollector<>();\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, coll,\n+                null,\n+                null, Arrays.asList(new MyFileObject(code)));\n+        \/\/no exceptions:\n+        ct.parse().iterator().next();\n+        List<String> codes = new LinkedList<>();\n+\n+        for (Diagnostic<? extends JavaFileObject> d : coll.getDiagnostics()) {\n+            codes.add(d.getLineNumber() + \":\" + d.getColumnNumber() + \":\" + d.getCode());\n+        }\n+\n+        assertEquals(\"testTypeAnnotationBrokenMethodRef: \" + codes,\n+                     List.of(\"2:22:compiler.err.illegal.start.of.type\",\n+                             \"3:22:compiler.err.illegal.start.of.type\"),\n+                     codes);\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"}]}