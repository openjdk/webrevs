{"files":[{"patch":"@@ -2139,1 +2139,3 @@\n-    _pc_desc_cache.add_pc_desc(upper);\n+    if (!Thread::current_in_asgct()) {\n+      _pc_desc_cache.add_pc_desc(upper);\n+    }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -610,2 +609,1 @@\n-  \/\/ Decoding an nmethod can write to a PcDescCache (see PcDescCache::add_pc_desc)\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, raw_thread);)\n+  ThreadInAsgct tia(thread);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -625,2 +625,1 @@\n-  \/\/ this might also be modified in signal handlers (e.g. ASGCT)\n-  volatile WXMode _wx_state;\n+  WXMode _wx_state;\n@@ -635,0 +634,25 @@\n+\n+ private:\n+  bool _in_asgct = false;\n+ public:\n+  bool in_asgct() const { return _in_asgct; }\n+  void set_in_asgct(bool value) { _in_asgct = value; }\n+  static bool current_in_asgct() {\n+    Thread *cur = Thread::current();\n+    return cur != nullptr && cur->in_asgct();\n+  }\n+};\n+\n+class ThreadInAsgct {\n+ private:\n+  Thread* _thread;\n+ public:\n+  ThreadInAsgct(Thread* thread) : _thread(thread) {\n+    assert(thread != NULL, \"invariant\");\n+    assert(!thread->in_asgct(), \"invariant\");\n+    thread->set_in_asgct(true);\n+  }\n+  ~ThreadInAsgct() {\n+    assert(_thread->in_asgct(), \"invariant\");\n+    _thread->set_in_asgct(false);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}