{"files":[{"patch":"@@ -1874,1 +1874,1 @@\n-          range(DEBUG_ONLY(96) NOT_DEBUG(100*K), 50*M)                      \\\n+          range(DEBUG_ONLY(192) NOT_DEBUG(100*K), 50*M)                     \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3360,1 +3360,1 @@\n-the designated output when the logging call is made. But you can instead use asynchronous\n+the designated output when the logging call is made. You can instead use asynchronous\n@@ -3363,1 +3363,1 @@\n-`-Xlog:async`\n+`-Xlog:async[:[stall|drop]]`\n@@ -3368,2 +3368,4 @@\n-intermediate buffer is bounded and on buffer exhaustion the enqueuing message is discarded.\n-Log entry write operations are guaranteed non-blocking.\n+intermediate buffer is bounded. On buffer exhaustion the enqueuing message is either discarded (`async:drop`),\n+or logging threads are stalled until the flushing thread catches up (`async:stall`).\n+If no specific mode is chosen, then `async:drop` is chosen by default.\n+Log entry write operations are guaranteed to be non-blocking in the `async:drop` case.\n","filename":"src\/java.base\/share\/man\/java.md","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}