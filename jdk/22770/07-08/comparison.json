{"files":[{"patch":"@@ -113,0 +113,1 @@\n+    clocker.notify();\n@@ -158,1 +159,1 @@\n-void AsyncLogWriter::write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot) {\n+bool AsyncLogWriter::write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot) {\n@@ -186,1 +187,1 @@\n-    _flush_sem.signal(req);\n+    return true;\n@@ -188,0 +189,1 @@\n+  return false;\n@@ -196,1 +198,0 @@\n-\n@@ -200,0 +201,1 @@\n+\n@@ -217,1 +219,1 @@\n-    write(snapshot);\n+    bool saw_flush_token = write(snapshot);\n@@ -227,0 +229,3 @@\n+    if (saw_flush_token) {\n+      _flush_sem.signal(1);\n+    }\n@@ -299,0 +304,32 @@\n+\n+bool AsyncLogWriter::enqueue_if_initialized(LogFileStreamOutput& output,\n+                                            const LogDecorations& decorations, const char* msg) {\n+  AsyncLogWriter* instance = AsyncLogWriter::instance();\n+  if (instance != nullptr) {\n+    if ((uintptr_t)instance == (uintptr_t)Thread::current_or_null()) {\n+      \/\/ If logging from the consuming thread then fall back on synchronous logging.\n+      \/\/ Otherwise, the consuming thread may wait on itself to print the message,\n+      \/\/ this obviously leads to a deadlocked system.\n+      return false;\n+    }\n+    instance->enqueue(output, decorations, msg);\n+    return true;\n+  }\n+  return false;\n+}\n+\n+bool AsyncLogWriter::enqueue_if_initialized(LogFileStreamOutput& output,\n+                                            LogMessageBuffer::Iterator msg_iterator) {\n+  AsyncLogWriter* instance = AsyncLogWriter::instance();\n+  if (instance != nullptr) {\n+    if ((uintptr_t)instance == (uintptr_t)Thread::current_or_null()) {\n+      \/\/ If logging from the consuming thread then fall back on synchronous logging.\n+      \/\/ Otherwise, the consuming thread may wait on itself to print the message,\n+      \/\/ this obviously leads to a deadlocked system.\n+      return false;\n+    }\n+    instance->enqueue(output, msg_iterator);\n+    return true;\n+  }\n+  return false;\n+}\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -170,0 +170,1 @@\n+  \/\/ _initialized is set to true if the constructor succeeds\n@@ -187,1 +188,1 @@\n-  void write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot);\n+  bool write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot);\n@@ -216,0 +217,5 @@\n+  \/\/ Returns true if initialized, otherwise false\n+  static bool enqueue_if_initialized(LogFileStreamOutput& output, const LogDecorations& decorations,\n+                                     const char* msg);\n+  static bool enqueue_if_initialized(LogFileStreamOutput& output,\n+                                     LogMessageBuffer::Iterator msg_iterator);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -296,3 +296,2 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, decorations, msg);\n+  bool did_write = AsyncLogWriter::enqueue_if_initialized(*this, decorations, msg);\n+  if (did_write) {\n@@ -311,3 +310,2 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, msg_iterator);\n+  bool did_write = AsyncLogWriter::enqueue_if_initialized(*this, msg_iterator);\n+  if (did_write) {\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -177,3 +177,2 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, decorations, msg);\n+  bool did_write = AsyncLogWriter::enqueue_if_initialized(*this, decorations, msg);\n+  if (did_write) {\n@@ -190,3 +189,2 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, msg_iterator);\n+  bool did_write = AsyncLogWriter::enqueue_if_initialized(*this, msg_iterator);\n+  if (did_write) {\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1870,1 +1870,1 @@\n-          range(100*K, 50*M)                                                \\\n+          range(DEBUG_ONLY(96) PRODUCT_ONLY(100*K), 50*M)                   \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.debug\n@@ -46,0 +47,4 @@\n+        \/\/ Stress test with a very small buffer. Note: Any valid buffer size must be able to hold a flush token.\n+        \/\/ Therefore the size of the buffer cannot be zero.\n+        analyze_output(\"-Xlog:async:drop\", \"-Xlog:all=trace\", \"-XX:AsyncLogBufferSize=96\", InnerClass.class.getName());\n+        analyze_output(\"-Xlog:async:stall\", \"-Xlog:all=trace\", \"-XX:AsyncLogBufferSize=96\", InnerClass.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/StressAsyncUL.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}