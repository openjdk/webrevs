{"files":[{"patch":"@@ -365,1 +365,6 @@\n-        if (f.getPath().indexOf('\\u0000') >= 0)\n+        final String pathname = f.getPath();\n+\n+        \/\/ Invalid if the pathname string contains a null character or if\n+        \/\/ any name in the pathname's name sequence ends with a space\n+        if (pathname.indexOf('\\u0000') >= 0 || pathname.endsWith(\" \")\n+            || pathname.contains(\" \\\\\"))\n@@ -368,0 +373,1 @@\n+        \/\/ The remaining checks are irrelevant for alternate data streams (ADS)\n@@ -371,1 +377,1 @@\n-        \/\/ Invalid if there is a \":\" at a position greater than 1, or if there\n+        \/\/ Invalid if there is a \":\" at a position other than 1, or if there\n@@ -373,1 +379,0 @@\n-        String pathname = f.getPath();\n@@ -375,0 +380,3 @@\n+        if (lastColon >= 0 &&\n+            (lastColon != 1 || !isLetter(pathname.charAt(0))))\n+            return true;\n@@ -376,8 +384,1 @@\n-        \/\/ Valid if there is no \":\" present or if the last \":\" present is\n-        \/\/ at index 1 and the first character is a latter\n-        if (lastColon < 0 ||\n-            (lastColon == 1 && isLetter(pathname.charAt(0))))\n-            return false;\n-\n-        \/\/ Invalid if path creation fails\n-        Path path = null;\n+        \/\/ Invalid if the path string cannot be converted to a Path\n@@ -385,1 +386,1 @@\n-            path = sun.nio.fs.DefaultFileSystemProvider.theFileSystem().getPath(pathname);\n+            Path path = sun.nio.fs.DefaultFileSystemProvider.theFileSystem().getPath(pathname);\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/* @test\n+ * @bug 8354450\n+ * @requires os.family == \"windows\"\n+ * @summary Verify behavior for file names with a trailing space\n+ * @run junit WinTrailingSpace\n+ *\/\n+public class WinTrailingSpace {\n+    private static final String FILENAME_NO_TRAILING_SPACE = \"foobargus\";\n+    private static final String FILENAME_TRAILING_SPACE = \"foobargus \";\n+    private static final String DIRNAME_TRAILING_SPACE = \"foo \\\\bar\\\\gus\";\n+\n+    @Test\n+    public void noTrailingSpace() throws IOException {\n+        File f = null;\n+        try {\n+            f = new File(\".\", FILENAME_NO_TRAILING_SPACE);\n+            f.delete();\n+            f.createNewFile();\n+            assertTrue(f.exists());\n+        } finally {\n+            if (f != null)\n+                f.delete();\n+        }\n+    }\n+\n+    @Test\n+    public void trailingSpace() throws IOException {\n+        File f = null;\n+        try {\n+            f = new File(\".\", FILENAME_TRAILING_SPACE);\n+            f.delete();\n+            f.createNewFile();\n+            assertFalse(f.exists(), \"Creation of \" + f + \" should have failed\");\n+        } catch (IOException expected) {\n+        } finally {\n+            if (f != null)\n+                f.delete();\n+        }\n+    }\n+\n+    @Test\n+    public void dirTrailingSpace() throws IOException {\n+        File f = null;\n+        try {\n+            f = new File(\".\", DIRNAME_TRAILING_SPACE);\n+            f.delete();\n+            assertFalse(f.mkdirs(), \"Creation of \" + f + \" should have failed\");\n+        } finally {\n+            if (f != null)\n+                f.delete();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/File\/WinTrailingSpace.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}