{"files":[{"patch":"@@ -181,1 +181,5 @@\n-        if (!uninterruptible) end(completed);\n+        if (!uninterruptible) {\n+            end(completed);\n+        } else if (!completed && !isOpen()) {\n+            throw new AsynchronousCloseException();\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8361495\n+ * @summary Test for AsynchronousCloseException from uninterruptible FileChannel\n+ * @run junit ChannelInputStreamTest\n+ *\/\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.AsynchronousCloseException;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ChannelInputStreamTest {\n+    private static Thread startCloseThread(ConcurrentLinkedQueue<Object> q) {\n+        return Thread.ofPlatform().start(() -> {\n+            do {\n+                Object obj;\n+                if ((obj = q.poll()) != null) {\n+                    if (obj instanceof Closeable c) {\n+                        try {\n+                            c.close();\n+                        } catch (IOException ignored) {\n+                        }\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            } while (true);\n+        });\n+    }\n+\n+\/*\n+    public static void main(String[] args) throws IOException {\n+        int failures = 0;\n+\n+        try {\n+            testAvailable();\n+        } catch (RuntimeException e) {\n+            failures++;\n+        }\n+\n+        try {\n+            testRead();\n+        } catch (RuntimeException e) {\n+            failures++;\n+        }\n+        try {\n+            testWrite();\n+        } catch (RuntimeException e) {\n+            failures++;\n+        }\n+\n+        if (failures != 0) {\n+            throw new RuntimeException(\"FAILED with \" + failures + \" failures\");\n+        }\n+    }\n+*\/\n+\n+    @Test\n+    public void available() throws IOException {\n+        var close = new ConcurrentLinkedQueue<Object>();\n+        Thread closeThread = startCloseThread(close);\n+\n+        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+        path.toFile().deleteOnExit();\n+\n+        do {\n+            InputStream in;\n+            try {\n+                in = Files.newInputStream(path);\n+            } catch (IOException ignored) {\n+                continue;\n+            }\n+            close.offer(in);\n+            int available = 0;\n+            try {\n+                available = in.available();\n+            } catch (AsynchronousCloseException ace) {\n+                System.out.println(\"AsynchronousCloseException caught\");\n+                close.offer(new Object());\n+                break;\n+            } catch (ClosedChannelException ignored) {\n+                System.out.println(\"ClosedChannelException ignored\");\n+                continue;\n+            } catch (Throwable t) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"Unexpected error\", t);\n+            }\n+            if (available < 0) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"FAILED: available < 0\");\n+            }\n+        } while (true);\n+\n+        try {\n+            closeThread.join();\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    @Test\n+    public void read() throws IOException {\n+        var close = new ConcurrentLinkedQueue<Object>();\n+        Thread closeThread = startCloseThread(close);\n+\n+        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+        path.toFile().deleteOnExit();\n+        byte[] bytes = new byte[100_000];\n+        Arrays.fill(bytes, (byte)27);\n+        Files.write(path, bytes);\n+\n+        do {\n+            InputStream in;\n+            try {\n+                in = Files.newInputStream(path);\n+            } catch (IOException ignored) {\n+                continue;\n+            }\n+            close.offer(in);\n+            int value = 0;\n+            try {\n+                value = in.read();\n+            } catch (AsynchronousCloseException ace) {\n+                System.out.println(\"AsynchronousCloseException caught\");\n+                close.offer(new Object());\n+                break;\n+            } catch (ClosedChannelException ignored) {\n+                System.out.println(\"ClosedChannelException ignored\");\n+                continue;\n+            } catch (Throwable t) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"Unexpected error\", t);\n+            }\n+            if (value < 0) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"FAILED: value < 0\");\n+            }\n+        } while (true);\n+\n+        try {\n+            closeThread.join();\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    @Test\n+    public void write() throws IOException {\n+        var close = new ConcurrentLinkedQueue<Object>();\n+        Thread closeThread = startCloseThread(close);\n+        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+        path.toFile().deleteOnExit();\n+\n+        do {\n+            OutputStream out;\n+            try {\n+                out = Files.newOutputStream(path);\n+            } catch (IOException ignored) {\n+                continue;\n+            }\n+            close.offer(out);\n+            try {\n+                out.write(27);\n+            } catch (AsynchronousCloseException ace) {\n+                System.out.println(\"AsynchronousCloseException caught\");\n+                close.offer(new Object());\n+                break;\n+            } catch (ClosedChannelException ignored) {\n+                System.out.println(\"ClosedChannelException ignored\");\n+            } catch (Throwable t) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"Write error\", t);\n+            }\n+        } while (true);\n+\n+        try {\n+            closeThread.join();\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/ChannelInputStreamTest.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"}]}