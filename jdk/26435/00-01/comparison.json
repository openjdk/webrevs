{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.channels.ClosedChannelException;\n@@ -37,7 +38,0 @@\n-    private static final InputStream CLOSE = new InputStream() {\n-        @Override\n-        public int read() throws IOException {\n-            return 27;\n-        }\n-    };\n-\n@@ -45,1 +39,1 @@\n-        var close = new ConcurrentLinkedQueue<InputStream>();\n+        var close = new ConcurrentLinkedQueue<Object>();\n@@ -48,5 +42,3 @@\n-                InputStream in;\n-                if ((in = close.poll()) != null)\n-                    if (in == CLOSE) {\n-                        break;\n-                    } else {\n+                Object obj;\n+                if ((obj = close.poll()) != null)\n+                    if (obj instanceof InputStream in) {\n@@ -57,0 +49,2 @@\n+                    } else {\n+                        break;\n@@ -73,1 +67,1 @@\n-                int available;\n+                int available = 0;\n@@ -76,0 +70,5 @@\n+                } catch (AsynchronousCloseException ace) {\n+                    System.out.println(\"AsynchronousCloseException caught\");\n+                    close.offer(new Object());\n+                    break;\n+                } catch (ClosedChannelException ignored) {\n@@ -77,6 +76,1 @@\n-                    if (AsynchronousCloseException.class.isInstance(t)) {\n-                        System.out.println(\"AsynchronousCloseException\");\n-                        close.offer(CLOSE);\n-                        break;\n-                    }\n-                    continue;\n+                    throw new RuntimeException(\"Unexpected error\", t);\n@@ -85,1 +79,1 @@\n-                    close.offer(CLOSE);\n+                    close.offer(new Object());\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/ChannelInputStreamTest.java","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"}]}