{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @run junit ChannelInputStreamTest\n@@ -29,0 +30,1 @@\n+import java.io.Closeable;\n@@ -31,0 +33,1 @@\n+import java.io.OutputStream;\n@@ -35,0 +38,1 @@\n+import java.util.Arrays;\n@@ -37,0 +41,2 @@\n+import org.junit.jupiter.api.Test;\n+\n@@ -38,3 +44,2 @@\n-    public static void main(String[] args) throws IOException {\n-        var close = new ConcurrentLinkedQueue<Object>();\n-        Thread closeThread = Thread.ofPlatform().start(() -> {\n+    private static Thread startCloseThread(ConcurrentLinkedQueue<Object> q) {\n+        return Thread.ofPlatform().start(() -> {\n@@ -43,2 +48,2 @@\n-                if ((obj = close.poll()) != null)\n-                    if (obj instanceof InputStream in) {\n+                if ((obj = q.poll()) != null) {\n+                    if (obj instanceof Closeable c) {\n@@ -46,1 +51,1 @@\n-                            in.close();\n+                            c.close();\n@@ -52,0 +57,1 @@\n+                }\n@@ -54,0 +60,33 @@\n+    }\n+\n+\/*\n+    public static void main(String[] args) throws IOException {\n+        int failures = 0;\n+\n+        try {\n+            testAvailable();\n+        } catch (RuntimeException e) {\n+            failures++;\n+        }\n+\n+        try {\n+            testRead();\n+        } catch (RuntimeException e) {\n+            failures++;\n+        }\n+        try {\n+            testWrite();\n+        } catch (RuntimeException e) {\n+            failures++;\n+        }\n+\n+        if (failures != 0) {\n+            throw new RuntimeException(\"FAILED with \" + failures + \" failures\");\n+        }\n+    }\n+*\/\n+\n+    @Test\n+    public void available() throws IOException {\n+        var close = new ConcurrentLinkedQueue<Object>();\n+        Thread closeThread = startCloseThread(close);\n@@ -58,26 +97,107 @@\n-        Thread availableThread = Thread.ofPlatform().start(() -> {\n-            do {\n-                InputStream in;\n-                try {\n-                    in = Files.newInputStream(path);\n-                } catch (IOException ignored) {\n-                    continue;\n-                }\n-                close.offer(in);\n-                int available = 0;\n-                try {\n-                    available = in.available();\n-                } catch (AsynchronousCloseException ace) {\n-                    System.out.println(\"AsynchronousCloseException caught\");\n-                    close.offer(new Object());\n-                    break;\n-                } catch (ClosedChannelException ignored) {\n-                } catch (Throwable t) {\n-                    throw new RuntimeException(\"Unexpected error\", t);\n-                }\n-                if (available < 0) {\n-                    close.offer(new Object());\n-                    throw new RuntimeException(\"FAILED: available < 0\");\n-                }\n-            } while (true);\n-        });\n+        do {\n+            InputStream in;\n+            try {\n+                in = Files.newInputStream(path);\n+            } catch (IOException ignored) {\n+                continue;\n+            }\n+            close.offer(in);\n+            int available = 0;\n+            try {\n+                available = in.available();\n+            } catch (AsynchronousCloseException ace) {\n+                System.out.println(\"AsynchronousCloseException caught\");\n+                close.offer(new Object());\n+                break;\n+            } catch (ClosedChannelException ignored) {\n+                System.out.println(\"ClosedChannelException ignored\");\n+                continue;\n+            } catch (Throwable t) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"Unexpected error\", t);\n+            }\n+            if (available < 0) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"FAILED: available < 0\");\n+            }\n+        } while (true);\n+\n+        try {\n+            closeThread.join();\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    @Test\n+    public void read() throws IOException {\n+        var close = new ConcurrentLinkedQueue<Object>();\n+        Thread closeThread = startCloseThread(close);\n+\n+        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+        path.toFile().deleteOnExit();\n+        byte[] bytes = new byte[100_000];\n+        Arrays.fill(bytes, (byte)27);\n+        Files.write(path, bytes);\n+\n+        do {\n+            InputStream in;\n+            try {\n+                in = Files.newInputStream(path);\n+            } catch (IOException ignored) {\n+                continue;\n+            }\n+            close.offer(in);\n+            int value = 0;\n+            try {\n+                value = in.read();\n+            } catch (AsynchronousCloseException ace) {\n+                System.out.println(\"AsynchronousCloseException caught\");\n+                close.offer(new Object());\n+                break;\n+            } catch (ClosedChannelException ignored) {\n+                System.out.println(\"ClosedChannelException ignored\");\n+                continue;\n+            } catch (Throwable t) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"Unexpected error\", t);\n+            }\n+            if (value < 0) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"FAILED: value < 0\");\n+            }\n+        } while (true);\n+\n+        try {\n+            closeThread.join();\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    @Test\n+    public void write() throws IOException {\n+        var close = new ConcurrentLinkedQueue<Object>();\n+        Thread closeThread = startCloseThread(close);\n+        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+        path.toFile().deleteOnExit();\n+\n+        do {\n+            OutputStream out;\n+            try {\n+                out = Files.newOutputStream(path);\n+            } catch (IOException ignored) {\n+                continue;\n+            }\n+            close.offer(out);\n+            try {\n+                out.write(27);\n+            } catch (AsynchronousCloseException ace) {\n+                System.out.println(\"AsynchronousCloseException caught\");\n+                close.offer(new Object());\n+                break;\n+            } catch (ClosedChannelException ignored) {\n+                System.out.println(\"ClosedChannelException ignored\");\n+            } catch (Throwable t) {\n+                close.offer(new Object());\n+                throw new RuntimeException(\"Write error\", t);\n+            }\n+        } while (true);\n@@ -86,1 +206,0 @@\n-            availableThread.join();\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/ChannelInputStreamTest.java","additions":152,"deletions":33,"binary":false,"changes":185,"status":"modified"}]}