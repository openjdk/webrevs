{"files":[{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8361495\n+ * @summary Test for AsynchronousCloseException from uninterruptible FileChannel\n+ * @run junit AsyncCloseStreams\n+ *\/\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.AsynchronousCloseException;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.LinkedTransferQueue;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class AsyncCloseStreams {\n+    private static final Closeable STOP = () -> { };\n+\n+    private static Thread startCloseThread(LinkedTransferQueue<Closeable> q) {\n+        return Thread.ofPlatform().start(() -> {\n+            do {\n+                try {\n+                    Closeable c;\n+                    if ((c = q.take()) != null) {\n+                        if (c == STOP) {\n+                            break;\n+                        } else {\n+                            try {\n+                                c.close();\n+                            } catch (IOException ignored) {\n+                            }\n+                        }\n+                    }\n+                } catch (InterruptedException ignored) {\n+                    break;\n+                }\n+            } while (true);\n+        });\n+    }\n+\n+    @Test\n+    public void available() throws InterruptedException, IOException {\n+        var close = new LinkedTransferQueue<Closeable>();\n+        Thread closeThread = startCloseThread(close);\n+\n+        try {\n+            Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+            path.toFile().deleteOnExit();\n+\n+            do {\n+                InputStream in = Files.newInputStream(path);\n+                close.offer(in);\n+                int available = 0;\n+                try {\n+                    available = in.available();\n+                } catch (AsynchronousCloseException ace) {\n+                    System.out.println(\"AsynchronousCloseException caught\");\n+                    close.offer(STOP);\n+                    break;\n+                } catch (ClosedChannelException ignored) {\n+                    continue;\n+                } catch (Throwable t) {\n+                    close.offer(STOP);\n+                    fail(\"Unexpected error\", t);\n+                }\n+                if (available < 0) {\n+                    close.offer(STOP);\n+                    fail(\"FAILED: available < 0\");\n+                }\n+            } while (true);\n+        } finally {\n+            closeThread.join();\n+        }\n+    }\n+\n+    @Test\n+    public void read() throws InterruptedException, IOException {\n+        var close = new LinkedTransferQueue<Closeable>();\n+        Thread closeThread = startCloseThread(close);\n+\n+        try {\n+            Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+            path.toFile().deleteOnExit();\n+            byte[] bytes = new byte[100_000];\n+            Arrays.fill(bytes, (byte)27);\n+            Files.write(path, bytes);\n+\n+            do {\n+                InputStream in = Files.newInputStream(path);\n+                close.offer(in);\n+                int value = 0;\n+                try {\n+                    value = in.read();\n+                } catch (AsynchronousCloseException ace) {\n+                    System.out.println(\"AsynchronousCloseException caught\");\n+                    close.offer(STOP);\n+                    break;\n+                } catch (ClosedChannelException ignored) {\n+                    continue;\n+                } catch (Throwable t) {\n+                    close.offer(STOP);\n+                    fail(\"Unexpected error\", t);\n+                }\n+                if (value < 0) {\n+                    close.offer(STOP);\n+                    fail(\"FAILED: value < 0\");\n+                }\n+            } while (true);\n+        } finally {\n+            closeThread.join();\n+        }\n+    }\n+\n+    @Test\n+    public void write() throws InterruptedException, IOException {\n+        var close = new LinkedTransferQueue<Closeable>();\n+        Thread closeThread = startCloseThread(close);\n+\n+        try {\n+            Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+            path.toFile().deleteOnExit();\n+\n+            do {\n+                OutputStream out = Files.newOutputStream(path);\n+                close.offer(out);\n+                try {\n+                    out.write(27);\n+                } catch (AsynchronousCloseException ace) {\n+                    System.out.println(\"AsynchronousCloseException caught\");\n+                    close.offer(STOP);\n+                    break;\n+                } catch (ClosedChannelException ignored) {\n+                } catch (Throwable t) {\n+                    close.offer(STOP);\n+                    fail(\"Write error\", t);\n+                }\n+            } while (true);\n+        } finally {\n+            closeThread.join();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/AsyncCloseStreams.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"},{"patch":"@@ -1,180 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8361495\n- * @summary Test for AsynchronousCloseException from uninterruptible FileChannel\n- * @run junit ChannelInputStreamTest\n- *\/\n-\n-import java.io.Closeable;\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.channels.AsynchronousCloseException;\n-import java.nio.channels.ClosedChannelException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Arrays;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-\n-import org.junit.jupiter.api.Test;\n-\n-public class ChannelInputStreamTest {\n-    private static Thread startCloseThread(ConcurrentLinkedQueue<Object> q) {\n-        return Thread.ofPlatform().start(() -> {\n-            do {\n-                Object obj;\n-                if ((obj = q.poll()) != null) {\n-                    if (obj instanceof Closeable c) {\n-                        try {\n-                            c.close();\n-                        } catch (IOException ignored) {\n-                        }\n-                    } else {\n-                        break;\n-                    }\n-                }\n-            } while (true);\n-        });\n-    }\n-\n-    @Test\n-    public void available() throws IOException {\n-        var close = new ConcurrentLinkedQueue<Object>();\n-        Thread closeThread = startCloseThread(close);\n-\n-        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n-        path.toFile().deleteOnExit();\n-\n-        do {\n-            InputStream in;\n-            try {\n-                in = Files.newInputStream(path);\n-            } catch (IOException ignored) {\n-                continue;\n-            }\n-            close.offer(in);\n-            int available = 0;\n-            try {\n-                available = in.available();\n-            } catch (AsynchronousCloseException ace) {\n-                System.out.println(\"AsynchronousCloseException caught\");\n-                close.offer(new Object());\n-                break;\n-            } catch (ClosedChannelException ignored) {\n-                continue;\n-            } catch (Throwable t) {\n-                close.offer(new Object());\n-                throw new RuntimeException(\"Unexpected error\", t);\n-            }\n-            if (available < 0) {\n-                close.offer(new Object());\n-                throw new RuntimeException(\"FAILED: available < 0\");\n-            }\n-        } while (true);\n-\n-        try {\n-            closeThread.join();\n-        } catch (InterruptedException ignored) {\n-        }\n-    }\n-\n-    @Test\n-    public void read() throws IOException {\n-        var close = new ConcurrentLinkedQueue<Object>();\n-        Thread closeThread = startCloseThread(close);\n-\n-        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n-        path.toFile().deleteOnExit();\n-        byte[] bytes = new byte[100_000];\n-        Arrays.fill(bytes, (byte)27);\n-        Files.write(path, bytes);\n-\n-        do {\n-            InputStream in;\n-            try {\n-                in = Files.newInputStream(path);\n-            } catch (IOException ignored) {\n-                continue;\n-            }\n-            close.offer(in);\n-            int value = 0;\n-            try {\n-                value = in.read();\n-            } catch (AsynchronousCloseException ace) {\n-                System.out.println(\"AsynchronousCloseException caught\");\n-                close.offer(new Object());\n-                break;\n-            } catch (ClosedChannelException ignored) {\n-                continue;\n-            } catch (Throwable t) {\n-                close.offer(new Object());\n-                throw new RuntimeException(\"Unexpected error\", t);\n-            }\n-            if (value < 0) {\n-                close.offer(new Object());\n-                throw new RuntimeException(\"FAILED: value < 0\");\n-            }\n-        } while (true);\n-\n-        try {\n-            closeThread.join();\n-        } catch (InterruptedException ignored) {\n-        }\n-    }\n-\n-    @Test\n-    public void write() throws IOException {\n-        var close = new ConcurrentLinkedQueue<Object>();\n-        Thread closeThread = startCloseThread(close);\n-        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n-        path.toFile().deleteOnExit();\n-\n-        do {\n-            OutputStream out;\n-            try {\n-                out = Files.newOutputStream(path);\n-            } catch (IOException ignored) {\n-                continue;\n-            }\n-            close.offer(out);\n-            try {\n-                out.write(27);\n-            } catch (AsynchronousCloseException ace) {\n-                System.out.println(\"AsynchronousCloseException caught\");\n-                close.offer(new Object());\n-                break;\n-            } catch (ClosedChannelException ignored) {\n-            } catch (Throwable t) {\n-                close.offer(new Object());\n-                throw new RuntimeException(\"Write error\", t);\n-            }\n-        } while (true);\n-\n-        try {\n-            closeThread.join();\n-        } catch (InterruptedException ignored) {\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/ChannelInputStreamTest.java","additions":0,"deletions":180,"binary":false,"changes":180,"status":"deleted"}]}