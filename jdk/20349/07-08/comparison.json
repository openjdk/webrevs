{"files":[{"patch":"@@ -3529,14 +3529,0 @@\n-        \/* Map to hold 'fake' clinit methods. If a lambda is used to initialize a\n-         * static field and that lambda has type annotations, these annotations will\n-         * also be stored at these fake clinit methods.\n-         *\n-         * LambdaToMethod also use fake clinit methods so they can be reused.\n-         * Also as LTM is a phase subsequent to attribution, the methods from\n-         * clinits can be safely removed by LTM to save memory.\n-         *\/\n-        private Map<ClassSymbol, MethodSymbol> clinits = new HashMap<>();\n-\n-        public MethodSymbol removeClinit(ClassSymbol sym) {\n-            return clinits.remove(sym);\n-        }\n-\n@@ -3570,12 +3556,8 @@\n-                    \/* if the field is static then we need to create a fake clinit\n-                     * method, this method can later be reused by LTM.\n-                     *\/\n-                    MethodSymbol clinit = clinits.get(enclClass);\n-                    if (clinit == null) {\n-                        Type clinitType = new MethodType(List.nil(),\n-                                syms.voidType, List.nil(), syms.methodClass);\n-                        clinit = new MethodSymbol(BLOCK | STATIC | SYNTHETIC | PRIVATE,\n-                                names.clinit, clinitType, enclClass);\n-                        clinit.params = List.nil();\n-                        clinits.put(enclClass, clinit);\n-                    }\n+                    \/\/ If the field is static then we need to create a fake clinit method.\n+                    \/\/ Uniqueness of this symbol is not important (as e.g. annotations will be added on the\n+                    \/\/ init symbol's owner).\n+                    Type clinitType = new MethodType(List.nil(),\n+                            syms.voidType, List.nil(), syms.methodClass);\n+                    MethodSymbol clinit = new MethodSymbol(BLOCK | STATIC | SYNTHETIC | PRIVATE,\n+                            names.clinit, clinitType, enclClass);\n+                    clinit.params = List.nil();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"}]}