{"files":[{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.classfile;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.internal.classfile.impl.Util;\n+\n+@Warmup(iterations = 3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Measurement(iterations = 5)\n+@Fork(value = 1, jvmArgsAppend = {\n+        \"--enable-preview\",\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile.impl=ALL-UNNAMED\"})\n+@State(Scope.Thread)\n+public class UtilBench {\n+    @Param({\"B\", \"C\", \"Z\", \"S\", \"I\", \"F\", \"J\", \"D\", \"java.lang.Object\"})\n+    public String typeName;\n+    public ClassDesc classDesc;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        classDesc = ClassDesc.ofInternalName(typeName.replace('.', '\/'));\n+    }\n+\n+    @Benchmark\n+    public int slotSize() {\n+        return Util.slotSize(classDesc);\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/UtilBench.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}