{"files":[{"patch":"@@ -101,0 +101,3 @@\n+        if (paramNo == 0) {\n+            return ((flags & ClassFile.ACC_STATIC) != 0) ? 0 : 1;\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,4 @@\n+import static jdk.internal.constant.PrimitiveClassDescImpl.CD_double;\n+import static jdk.internal.constant.PrimitiveClassDescImpl.CD_long;\n+import static jdk.internal.constant.PrimitiveClassDescImpl.CD_void;\n+\n@@ -109,3 +113,5 @@\n-        int count = 0;\n-        for (int i = 0; i < mDesc.parameterCount(); i++) {\n-            count += slotSize(mDesc.parameterType(i));\n+        int count = mDesc.parameterCount();\n+        for (int i = count - 1; i >= 0; i--) {\n+            if (isDoubleSlot(mDesc.parameterType(i))) {\n+                count++;\n+            }\n@@ -121,1 +127,1 @@\n-            count += slotSize(mDesc.parameterType(i));\n+            count += paramSlotSize(mDesc.parameterType(i));\n@@ -127,5 +133,1 @@\n-        int count = ((flags & ACC_STATIC) != 0) ? 0 : 1;\n-        for (int i = 0; i < mDesc.parameterCount(); i++) {\n-            count += slotSize(mDesc.parameterType(i));\n-        }\n-        return count;\n+        return parameterSlots(mDesc) + ((flags & ACC_STATIC) == 0 ? 1 : 0) ;\n@@ -256,5 +258,5 @@\n-        return switch (desc.descriptorString().charAt(0)) {\n-            case 'V' -> 0;\n-            case 'D','J' -> 2;\n-            default -> 1;\n-        };\n+        return desc == CD_void ? 0 : isDoubleSlot(desc) ? 2 : 1;\n+    }\n+\n+    public static int paramSlotSize(ClassDesc desc) {\n+        return isDoubleSlot(desc) ? 2 : 1;\n@@ -264,2 +266,1 @@\n-        char ch = desc.descriptorString().charAt(0);\n-        return ch == 'D' || ch == 'J';\n+        return desc == CD_double || desc == CD_long;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.classfile;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.internal.classfile.impl.Util;\n+\n+@Warmup(iterations = 3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Measurement(iterations = 5)\n+@Fork(value = 1, jvmArgsAppend = {\n+        \"--enable-preview\",\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile.impl=ALL-UNNAMED\"})\n+@State(Scope.Thread)\n+public class UtilBench {\n+    @Param({\"B\", \"C\", \"Z\", \"S\", \"I\", \"F\", \"J\", \"D\", \"java.lang.Object\"})\n+    public String typeName;\n+    public ClassDesc classDesc;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        classDesc = ClassDesc.ofInternalName(typeName.replace('.', '\/'));\n+    }\n+\n+    @Benchmark\n+    public int slotSize() {\n+        return Util.slotSize(classDesc);\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/UtilBench.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}