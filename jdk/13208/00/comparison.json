{"files":[{"patch":"@@ -70,0 +70,7 @@\n+    \"allocator_may_return_null=1,\"\n+#if defined(__linux__) || defined(__FreeBSD__)\n+    \/\/ Linux and FreeBSD have MADV_DONTDUMP and MADV_NOCORE respectively. In these cases we can\n+    \/\/ enable coredump with ASan without creating a 16TiB+ core file.\n+    \"use_madv_dontdump=1,\"\n+    \"disable_coredump=0,\"\n+#endif\n","filename":"make\/data\/asan\/asan_default_options.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,7 @@\n+    \"allocator_may_return_null=1,\"\n+#if defined(__linux__) || defined(__FreeBSD__)\n+    \/\/ Linux and FreeBSD have MADV_DONTDUMP and MADV_NOCORE respectively. In these cases we can\n+    \/\/ enable coredump with ASan without creating a 16TiB+ core file.\n+    \"use_madv_dontdump=1,\"\n+    \"disable_coredump=0,\"\n+#endif\n","filename":"make\/data\/lsan\/lsan_default_options.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,6 @@\n+#ifdef ADDRESS_SANITIZER\n+#define ASAN_NOT_ENABLED() false\n+#else\n+#define ASAN_NOT_ENABLED() true\n+#endif\n+\n@@ -39,1 +45,2 @@\n-  TEST_VM_FATAL_ERROR_MSG(NMT, test_function, \".*\" expected_assertion_message \".*\") {     \\\n+  TEST_VM_FATAL_ERROR_MSG_IF(ASAN_NOT_ENABLED(), NMT, test_function,                      \\\n+                             \".*\" expected_assertion_message \".*\") {                      \\\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_buffer_overflow_detection.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    os_realloc(os_realloc(os_malloc(20), 0), 30);  \/\/ realloc to size 0 and back up again\n+    os::free(os_realloc(os_realloc(os_malloc(20), 0), 30));  \/\/ realloc to size 0 and back up again\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmtpreinit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-#define TEST_VM_FATAL_ERROR_MSG(category, name, msg)                \\\n+#define TEST_VM_FATAL_ERROR_MSG_IF(condition, category, name, msg)  \\\n@@ -155,0 +155,3 @@\n+    if (!(condition)) {                                             \\\n+      GTEST_SKIP() << \"Skipping because \" #condition;               \\\n+    }                                                               \\\n@@ -162,0 +165,3 @@\n+#define TEST_VM_FATAL_ERROR_MSG(category, name, msg)                \\\n+  TEST_VM_FATAL_ERROR_MSG_IF(true, category, name, msg)\n+\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}