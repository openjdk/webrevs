{"files":[{"patch":"@@ -27,1 +27,2 @@\n-#include \"classfile\/javaClasses.hpp\"\n+#include \"classfile\/classLoaderData.inline.hpp\"\n+#include \"classfile\/javaClasses.inline.hpp\"\n@@ -37,1 +38,1 @@\n-#include \"gc\/serial\/serialFullGC.inline.hpp\"\n+#include \"gc\/serial\/serialFullGC.hpp\"\n@@ -40,0 +41,1 @@\n+#include \"gc\/serial\/serialStringDedup.hpp\"\n@@ -42,0 +44,1 @@\n+#include \"gc\/shared\/continuationGCSupport.inline.hpp\"\n@@ -59,0 +62,1 @@\n+#include \"oops\/markWord.hpp\"\n@@ -64,0 +68,1 @@\n+#include \"utilities\/align.hpp\"\n@@ -330,1 +335,1 @@\n-          size_t size = SerialFullGC::adjust_pointers(cast_to_oop(cur_addr));\n+          size_t size = cast_to_oop(cur_addr)->oop_iterate_size(&SerialFullGC::adjust_pointer_closure);\n@@ -612,0 +617,19 @@\n+template <class T> void SerialFullGC::adjust_pointer(T* p) {\n+  T heap_oop = RawAccess<>::oop_load(p);\n+  if (!CompressedOops::is_null(heap_oop)) {\n+    oop obj = CompressedOops::decode_not_null(heap_oop);\n+    assert(Universe::heap()->is_in(obj), \"should be in heap\");\n+\n+    if (obj->is_forwarded()) {\n+      oop new_obj = obj->forwardee();\n+      assert(is_object_aligned(new_obj), \"oop must be aligned\");\n+      RawAccess<IS_NOT_NULL>::oop_store(p, new_obj);\n+    }\n+  }\n+}\n+\n+template <typename T>\n+void AdjustPointerClosure::do_oop_work(T* p)           { SerialFullGC::adjust_pointer(p); }\n+inline void AdjustPointerClosure::do_oop(oop* p)       { do_oop_work(p); }\n+inline void AdjustPointerClosure::do_oop(narrowOop* p) { do_oop_work(p); }\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -136,2 +136,0 @@\n-  static size_t adjust_pointers(oop obj);\n-\n@@ -140,1 +138,1 @@\n-  template <class T> static inline void adjust_pointer(T* p);\n+  template <class T> static void adjust_pointer(T* p);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SERIAL_SERIALFULLGC_INLINE_HPP\n-#define SHARE_GC_SERIAL_SERIALFULLGC_INLINE_HPP\n-\n-#include \"gc\/serial\/serialFullGC.hpp\"\n-\n-#include \"classfile\/classLoaderData.inline.hpp\"\n-#include \"classfile\/javaClasses.inline.hpp\"\n-#include \"gc\/shared\/continuationGCSupport.inline.hpp\"\n-#include \"gc\/serial\/serialStringDedup.hpp\"\n-#include \"memory\/universe.hpp\"\n-#include \"oops\/markWord.hpp\"\n-#include \"oops\/access.inline.hpp\"\n-#include \"oops\/compressedOops.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-#include \"utilities\/align.hpp\"\n-#include \"utilities\/stack.inline.hpp\"\n-\n-template <class T> inline void SerialFullGC::adjust_pointer(T* p) {\n-  T heap_oop = RawAccess<>::oop_load(p);\n-  if (!CompressedOops::is_null(heap_oop)) {\n-    oop obj = CompressedOops::decode_not_null(heap_oop);\n-    assert(Universe::heap()->is_in(obj), \"should be in heap\");\n-\n-    if (obj->is_forwarded()) {\n-      oop new_obj = obj->forwardee();\n-      assert(is_object_aligned(new_obj), \"oop must be aligned\");\n-      RawAccess<IS_NOT_NULL>::oop_store(p, new_obj);\n-    }\n-  }\n-}\n-\n-template <typename T>\n-void AdjustPointerClosure::do_oop_work(T* p)           { SerialFullGC::adjust_pointer(p); }\n-inline void AdjustPointerClosure::do_oop(oop* p)       { do_oop_work(p); }\n-inline void AdjustPointerClosure::do_oop(narrowOop* p) { do_oop_work(p); }\n-\n-inline size_t SerialFullGC::adjust_pointers(oop obj) {\n-  return obj->oop_iterate_size(&SerialFullGC::adjust_pointer_closure);\n-}\n-\n-#endif \/\/ SHARE_GC_SERIAL_SERIALFULLGC_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.inline.hpp","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"}]}