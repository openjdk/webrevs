{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -1052,3 +1053,9 @@\n-        Class<?> c = defineClass2(this, name, b, b.position(), len, protectionDomain, source);\n-        postDefineClass(c, protectionDomain);\n-        return c;\n+\n+        SharedSecrets.getJavaNioAccess().acquireSession(b);\n+        try {\n+            Class<?> c = defineClass2(this, name, b, b.position(), len, protectionDomain, source);\n+            postDefineClass(c, protectionDomain);\n+            return c;\n+        } finally {\n+            SharedSecrets.getJavaNioAccess().releaseSession(b);\n+        }\n@@ -1060,0 +1067,2 @@\n+    \/\/ Warning: Before calling this method, the provided ByteBuffer must be guarded\n+    \/\/          via JavaNioAccess::(acquire|release)Session\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8365203\n+ * @summary Tests guarding of ByteBuffers in ClassLoader::defineClass\n+ * @run junit TestGuardByteBuffer\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.foreign.Arena;\n+import java.util.HexFormat;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+final class TestGuardByteBuffer {\n+\n+    @Test\n+    void guardCrash() {\n+        final byte[] classBytes = getClassBytes(); \/\/ get bytes of a valid class\n+        final var cl = new ClassLoader() {\n+            void tryCrash() {\n+                var arena = Arena.ofConfined();\n+                var byteBuffer = arena.allocate(classBytes.length).asByteBuffer();\n+                \/\/ Close the arena underneath\n+                arena.close();\n+                \/\/ expected to always fail because the arena\n+                \/\/ from which the ByteBuffer was constructed\n+                \/\/ has been closed\n+                assertThrows(IllegalStateException.class,\n+                        () -> defineClass(null, byteBuffer, null));\n+            }\n+        };\n+        for (int i = 0; i < 10_000; i++) {\n+            cl.tryCrash();\n+        }\n+    }\n+\n+    private static byte[] getClassBytes() {\n+        \/\/ unused. this is here just for reference\n+        final String source = \"\"\"\n+                    public class NoOp {}\n+                \"\"\";\n+        \/\/ (externally) compiled content of the above \"source\", represented as hex\n+        final String classBytesHex = \"\"\"\n+                cafebabe00000044000d0a000200030700040c000500060100106a6176612f\n+                6c616e672f4f626a6563740100063c696e69743e0100032829560700080100\n+                044e6f4f70010004436f646501000f4c696e654e756d6265725461626c6501\n+                000a536f7572636546696c650100094e6f4f702e6a61766100210007000200\n+                0000000001000100050006000100090000001d00010001000000052ab70001\n+                b100000001000a000000060001000000010001000b00000002000c\n+                \"\"\";\n+\n+        return HexFormat.of().parseHex(classBytesHex.replaceAll(\"\\n\", \"\"));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/defineClass\/TestGuardByteBuffer.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}