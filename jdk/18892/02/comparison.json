{"files":[{"patch":"@@ -464,1 +464,4 @@\n-  if (is_loop_member(adr)) {\n+  if (!invariant(adr)) {\n+    \/\/ The address must be invariant for the current loop. But if we are in a main-loop,\n+    \/\/ it must also be invariant of the pre-loop, otherwise we cannot use this address\n+    \/\/ for the pre-loop limit adjustment required for main-loop alignment.\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8330819\n+ * @summary Case where VPointer finds an \"adr\" CastX2P, which contains a CastLL,\n+ *          that has a ctrl after the pre-loop. This value cannot be used in the\n+ *          pre-loop limit for main-loop adjustment.\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.util\n+ * @run main\/othervm -Xbatch compiler.loopopts.superword.TestMemorySegmentMainLoopAlignment\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+import java.lang.foreign.*;\n+import jdk.internal.misc.Unsafe;\n+import jdk.internal.util.Preconditions;\n+\n+public class TestMemorySegmentMainLoopAlignment {\n+    static final ValueLayout.OfInt ELEMENT_LAYOUT = ValueLayout.JAVA_INT.withByteAlignment(1);\n+    static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+    static long RANGE = 6400;\n+\n+    \/\/ Type definition for the lambda\n+    interface MSOp {\n+        int apply(MemorySegment memory, long offset, int i);\n+    }\n+\n+    \/\/ Type definition for the lambda\n+    interface MemoryUnsafeOp {\n+        int apply(long base, long offset, int i);\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Allocate some raw memory:\n+        MemorySegment ms = Arena.ofAuto().allocate(6400, Integer.SIZE);\n+        for (int i = 0; i < 10_000; i++) {\n+            test1(ms, 0, TestMemorySegmentMainLoopAlignment::memorySegmentGet);\n+        }\n+        \/\/ Allocate some raw memory:\n+        long base = UNSAFE.allocateMemory(6400);\n+        for (int i = 0; i < 10_000; i++) {\n+            test2(base, 0, TestMemorySegmentMainLoopAlignment::memoryUnsafeGet);\n+        }\n+    }\n+\n+    \/\/ Somehow, it is necessary to pass this as a lambda\n+    \/\/ the checkIndex inside the \"get\" method produces the CastLL, which eventually pins the index\n+    \/\/ between the pre and main loop.\n+    static int memorySegmentGet(MemorySegment ms, long o, int i) {\n+        return ms.get(ELEMENT_LAYOUT, o + i * 4L);\n+    }\n+\n+    static int test1(MemorySegment a, long offset, MSOp f) {\n+        \/\/ Constant size array size allows a known range for the array access\/loop iv i.\n+        int size = 16;\n+        int[] res = new int[size];\n+        int sum = 0;\n+        for (int i = 0; i < size; i++) {\n+            \/\/ With inlining, this eventually becomes:\n+            \/\/ sum += LoadI(MemorySegment \/ unsafe) + LoadI(array)\n+            \/\/ and we attempt vectorization.\n+            sum += f.apply(a, offset, i) + res[i];\n+        }\n+        return sum;\n+    }\n+\n+    \/\/ Somehow, it is necessary to pass this as a lambda\n+    static int memoryUnsafeGet(long base, long o, int i) {\n+        long index = o + i * 4L;\n+        \/\/ checkIndex -> CastLL: index >= 0.\n+        \/\/ Together with the info about i (known range for phi), this CastLL floats up to\n+        \/\/ the offset. Then we get adr = CastX2P(base + CastLL(offset)), where the CastLL\n+        \/\/ is pinned between the pre and main loop.\n+        Preconditions.checkIndex(index, RANGE, null);\n+        return UNSAFE.getInt(base + index);\n+    }\n+\n+    static int test2(long base, long offset, MemoryUnsafeOp f) {\n+        \/\/ Constant size array size allows a known range for the array access\/loop iv i.\n+        int size = 16;\n+        int[] res = new int[size];\n+        int sum = 0;\n+        for (int i = 0; i < size; i++) {\n+            \/\/ With inlining, this eventually becomes:\n+            \/\/ sum += LoadI(unsafe) + LoadI(array)\n+            \/\/ and we attempt vectorization.\n+            sum += f.apply(base, offset, i) + res[i];\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMemorySegmentMainLoopAlignment.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}