{"files":[{"patch":"@@ -1640,0 +1640,1 @@\n+  \/\/ Ensure reduction operation for lanewise operation\n@@ -1641,1 +1642,1 @@\n-  if (!arch_supports_vector(sopc, num_elem, elem_bt, is_masked_op ? VecMaskUseLoad : VecMaskNotUsed)) {\n+  if (sopc == opc || !arch_supports_vector(sopc, num_elem, elem_bt, is_masked_op ? VecMaskUseLoad : VecMaskNotUsed)) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2872,0 +2872,4 @@\n+            case VECTOR_OP_UMIN: return (v, m) ->\n+                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (byte) VectorMath.minUnsigned(a, b)));\n+            case VECTOR_OP_UMAX: return (v, m) ->\n+                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (byte) VectorMath.maxUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2857,0 +2857,4 @@\n+            case VECTOR_OP_UMIN: return (v, m) ->\n+                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (int) VectorMath.minUnsigned(a, b)));\n+            case VECTOR_OP_UMAX: return (v, m) ->\n+                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (int) VectorMath.maxUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2723,0 +2723,4 @@\n+            case VECTOR_OP_UMIN: return (v, m) ->\n+                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (long) VectorMath.minUnsigned(a, b)));\n+            case VECTOR_OP_UMAX: return (v, m) ->\n+                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (long) VectorMath.maxUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2873,0 +2873,4 @@\n+            case VECTOR_OP_UMIN: return (v, m) ->\n+                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (short) VectorMath.minUnsigned(a, b)));\n+            case VECTOR_OP_UMAX: return (v, m) ->\n+                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (short) VectorMath.maxUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3378,0 +3378,6 @@\n+#if[!FP]\n+            case VECTOR_OP_UMIN: return (v, m) ->\n+                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> ($type$) VectorMath.minUnsigned(a, b)));\n+            case VECTOR_OP_UMAX: return (v, m) ->\n+                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> ($type$) VectorMath.maxUnsigned(a, b)));\n+#end[!FP]\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3915,0 +3915,178 @@\n+    static byte UMINReduce(byte[] a, int idx) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAll(byte[] a) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMINReduceByte128VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte128VectorTests::UMINReduce, Byte128VectorTests::UMINReduceAll);\n+    }\n+\n+    static byte UMINReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMINReduceByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte128VectorTests::UMINReduceMasked, Byte128VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static byte UMAXReduce(byte[] a, int idx) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAll(byte[] a) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMAXReduceByte128VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte128VectorTests::UMAXReduce, Byte128VectorTests::UMAXReduceAll);\n+    }\n+\n+    static byte UMAXReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMAXReduceByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte128VectorTests::UMAXReduceMasked, Byte128VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3915,0 +3915,178 @@\n+    static byte UMINReduce(byte[] a, int idx) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAll(byte[] a) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMINReduceByte256VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte256VectorTests::UMINReduce, Byte256VectorTests::UMINReduceAll);\n+    }\n+\n+    static byte UMINReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMINReduceByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte256VectorTests::UMINReduceMasked, Byte256VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static byte UMAXReduce(byte[] a, int idx) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAll(byte[] a) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMAXReduceByte256VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte256VectorTests::UMAXReduce, Byte256VectorTests::UMAXReduceAll);\n+    }\n+\n+    static byte UMAXReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMAXReduceByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte256VectorTests::UMAXReduceMasked, Byte256VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3915,0 +3915,178 @@\n+    static byte UMINReduce(byte[] a, int idx) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAll(byte[] a) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMINReduceByte512VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte512VectorTests::UMINReduce, Byte512VectorTests::UMINReduceAll);\n+    }\n+\n+    static byte UMINReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMINReduceByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte512VectorTests::UMINReduceMasked, Byte512VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static byte UMAXReduce(byte[] a, int idx) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAll(byte[] a) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMAXReduceByte512VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte512VectorTests::UMAXReduce, Byte512VectorTests::UMAXReduceAll);\n+    }\n+\n+    static byte UMAXReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMAXReduceByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte512VectorTests::UMAXReduceMasked, Byte512VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3915,0 +3915,178 @@\n+    static byte UMINReduce(byte[] a, int idx) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAll(byte[] a) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMINReduceByte64VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte64VectorTests::UMINReduce, Byte64VectorTests::UMINReduceAll);\n+    }\n+\n+    static byte UMINReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMINReduceByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte64VectorTests::UMINReduceMasked, Byte64VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static byte UMAXReduce(byte[] a, int idx) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAll(byte[] a) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMAXReduceByte64VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte64VectorTests::UMAXReduce, Byte64VectorTests::UMAXReduceAll);\n+    }\n+\n+    static byte UMAXReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMAXReduceByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte64VectorTests::UMAXReduceMasked, Byte64VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3920,0 +3920,178 @@\n+    static byte UMINReduce(byte[] a, int idx) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAll(byte[] a) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMINReduceByteMaxVectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                ByteMaxVectorTests::UMINReduce, ByteMaxVectorTests::UMINReduceAll);\n+    }\n+\n+    static byte UMINReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMINReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMINReduceByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                ByteMaxVectorTests::UMINReduceMasked, ByteMaxVectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static byte UMAXReduce(byte[] a, int idx) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAll(byte[] a) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void UMAXReduceByteMaxVectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                ByteMaxVectorTests::UMAXReduce, ByteMaxVectorTests::UMAXReduceAll);\n+    }\n+\n+    static byte UMAXReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte UMAXReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = Byte.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void UMAXReduceByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = Byte.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Byte.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = (byte) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                ByteMaxVectorTests::UMAXReduceMasked, ByteMaxVectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3959,0 +3959,178 @@\n+    static int UMINReduce(int[] a, int idx) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAll(int[] a) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMINReduceInt128VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int128VectorTests::UMINReduce, Int128VectorTests::UMINReduceAll);\n+    }\n+\n+    static int UMINReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMINReduceInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int128VectorTests::UMINReduceMasked, Int128VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static int UMAXReduce(int[] a, int idx) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAll(int[] a) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMAXReduceInt128VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int128VectorTests::UMAXReduce, Int128VectorTests::UMAXReduceAll);\n+    }\n+\n+    static int UMAXReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMAXReduceInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int128VectorTests::UMAXReduceMasked, Int128VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3959,0 +3959,178 @@\n+    static int UMINReduce(int[] a, int idx) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAll(int[] a) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMINReduceInt256VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int256VectorTests::UMINReduce, Int256VectorTests::UMINReduceAll);\n+    }\n+\n+    static int UMINReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMINReduceInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int256VectorTests::UMINReduceMasked, Int256VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static int UMAXReduce(int[] a, int idx) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAll(int[] a) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMAXReduceInt256VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int256VectorTests::UMAXReduce, Int256VectorTests::UMAXReduceAll);\n+    }\n+\n+    static int UMAXReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMAXReduceInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int256VectorTests::UMAXReduceMasked, Int256VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3959,0 +3959,178 @@\n+    static int UMINReduce(int[] a, int idx) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAll(int[] a) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMINReduceInt512VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int512VectorTests::UMINReduce, Int512VectorTests::UMINReduceAll);\n+    }\n+\n+    static int UMINReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMINReduceInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int512VectorTests::UMINReduceMasked, Int512VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static int UMAXReduce(int[] a, int idx) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAll(int[] a) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMAXReduceInt512VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int512VectorTests::UMAXReduce, Int512VectorTests::UMAXReduceAll);\n+    }\n+\n+    static int UMAXReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMAXReduceInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int512VectorTests::UMAXReduceMasked, Int512VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3959,0 +3959,178 @@\n+    static int UMINReduce(int[] a, int idx) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAll(int[] a) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMINReduceInt64VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int64VectorTests::UMINReduce, Int64VectorTests::UMINReduceAll);\n+    }\n+\n+    static int UMINReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMINReduceInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int64VectorTests::UMINReduceMasked, Int64VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static int UMAXReduce(int[] a, int idx) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAll(int[] a) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMAXReduceInt64VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int64VectorTests::UMAXReduce, Int64VectorTests::UMAXReduceAll);\n+    }\n+\n+    static int UMAXReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMAXReduceInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int64VectorTests::UMAXReduceMasked, Int64VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3964,0 +3964,178 @@\n+    static int UMINReduce(int[] a, int idx) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAll(int[] a) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMINReduceIntMaxVectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                IntMaxVectorTests::UMINReduce, IntMaxVectorTests::UMINReduceAll);\n+    }\n+\n+    static int UMINReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMINReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMINReduceIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                IntMaxVectorTests::UMINReduceMasked, IntMaxVectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static int UMAXReduce(int[] a, int idx) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAll(int[] a) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void UMAXReduceIntMaxVectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                IntMaxVectorTests::UMAXReduce, IntMaxVectorTests::UMAXReduceAll);\n+    }\n+\n+    static int UMAXReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (int) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int UMAXReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = Integer.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void UMAXReduceIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = Integer.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Integer.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = (int) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                IntMaxVectorTests::UMAXReduceMasked, IntMaxVectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3981,0 +3981,178 @@\n+    static long UMINReduce(long[] a, int idx) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAll(long[] a) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMINReduceLong128VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long128VectorTests::UMINReduce, Long128VectorTests::UMINReduceAll);\n+    }\n+\n+    static long UMINReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMINReduceLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long128VectorTests::UMINReduceMasked, Long128VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static long UMAXReduce(long[] a, int idx) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAll(long[] a) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMAXReduceLong128VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long128VectorTests::UMAXReduce, Long128VectorTests::UMAXReduceAll);\n+    }\n+\n+    static long UMAXReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMAXReduceLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long128VectorTests::UMAXReduceMasked, Long128VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3981,0 +3981,178 @@\n+    static long UMINReduce(long[] a, int idx) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAll(long[] a) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMINReduceLong256VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long256VectorTests::UMINReduce, Long256VectorTests::UMINReduceAll);\n+    }\n+\n+    static long UMINReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMINReduceLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long256VectorTests::UMINReduceMasked, Long256VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static long UMAXReduce(long[] a, int idx) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAll(long[] a) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMAXReduceLong256VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long256VectorTests::UMAXReduce, Long256VectorTests::UMAXReduceAll);\n+    }\n+\n+    static long UMAXReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMAXReduceLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long256VectorTests::UMAXReduceMasked, Long256VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3981,0 +3981,178 @@\n+    static long UMINReduce(long[] a, int idx) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAll(long[] a) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMINReduceLong512VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long512VectorTests::UMINReduce, Long512VectorTests::UMINReduceAll);\n+    }\n+\n+    static long UMINReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMINReduceLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long512VectorTests::UMINReduceMasked, Long512VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static long UMAXReduce(long[] a, int idx) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAll(long[] a) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMAXReduceLong512VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long512VectorTests::UMAXReduce, Long512VectorTests::UMAXReduceAll);\n+    }\n+\n+    static long UMAXReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMAXReduceLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long512VectorTests::UMAXReduceMasked, Long512VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3981,0 +3981,178 @@\n+    static long UMINReduce(long[] a, int idx) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAll(long[] a) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMINReduceLong64VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long64VectorTests::UMINReduce, Long64VectorTests::UMINReduceAll);\n+    }\n+\n+    static long UMINReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMINReduceLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long64VectorTests::UMINReduceMasked, Long64VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static long UMAXReduce(long[] a, int idx) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAll(long[] a) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMAXReduceLong64VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long64VectorTests::UMAXReduce, Long64VectorTests::UMAXReduceAll);\n+    }\n+\n+    static long UMAXReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMAXReduceLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long64VectorTests::UMAXReduceMasked, Long64VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3986,0 +3986,178 @@\n+    static long UMINReduce(long[] a, int idx) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAll(long[] a) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMINReduceLongMaxVectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                LongMaxVectorTests::UMINReduce, LongMaxVectorTests::UMINReduceAll);\n+    }\n+\n+    static long UMINReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMINReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMINReduceLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                LongMaxVectorTests::UMINReduceMasked, LongMaxVectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static long UMAXReduce(long[] a, int idx) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAll(long[] a) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void UMAXReduceLongMaxVectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                LongMaxVectorTests::UMAXReduce, LongMaxVectorTests::UMAXReduceAll);\n+    }\n+\n+    static long UMAXReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (long) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long UMAXReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = Long.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void UMAXReduceLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = Long.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Long.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = (long) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                LongMaxVectorTests::UMAXReduceMasked, LongMaxVectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3906,0 +3906,178 @@\n+    static short UMINReduce(short[] a, int idx) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAll(short[] a) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMINReduceShort128VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short128VectorTests::UMINReduce, Short128VectorTests::UMINReduceAll);\n+    }\n+\n+    static short UMINReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMINReduceShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short128VectorTests::UMINReduceMasked, Short128VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static short UMAXReduce(short[] a, int idx) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAll(short[] a) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMAXReduceShort128VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short128VectorTests::UMAXReduce, Short128VectorTests::UMAXReduceAll);\n+    }\n+\n+    static short UMAXReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMAXReduceShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short128VectorTests::UMAXReduceMasked, Short128VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3906,0 +3906,178 @@\n+    static short UMINReduce(short[] a, int idx) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAll(short[] a) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMINReduceShort256VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short256VectorTests::UMINReduce, Short256VectorTests::UMINReduceAll);\n+    }\n+\n+    static short UMINReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMINReduceShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short256VectorTests::UMINReduceMasked, Short256VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static short UMAXReduce(short[] a, int idx) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAll(short[] a) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMAXReduceShort256VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short256VectorTests::UMAXReduce, Short256VectorTests::UMAXReduceAll);\n+    }\n+\n+    static short UMAXReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMAXReduceShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short256VectorTests::UMAXReduceMasked, Short256VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3906,0 +3906,178 @@\n+    static short UMINReduce(short[] a, int idx) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAll(short[] a) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMINReduceShort512VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short512VectorTests::UMINReduce, Short512VectorTests::UMINReduceAll);\n+    }\n+\n+    static short UMINReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMINReduceShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short512VectorTests::UMINReduceMasked, Short512VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static short UMAXReduce(short[] a, int idx) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAll(short[] a) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMAXReduceShort512VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short512VectorTests::UMAXReduce, Short512VectorTests::UMAXReduceAll);\n+    }\n+\n+    static short UMAXReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMAXReduceShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short512VectorTests::UMAXReduceMasked, Short512VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3906,0 +3906,178 @@\n+    static short UMINReduce(short[] a, int idx) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAll(short[] a) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMINReduceShort64VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short64VectorTests::UMINReduce, Short64VectorTests::UMINReduceAll);\n+    }\n+\n+    static short UMINReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMINReduceShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short64VectorTests::UMINReduceMasked, Short64VectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static short UMAXReduce(short[] a, int idx) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAll(short[] a) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMAXReduceShort64VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short64VectorTests::UMAXReduce, Short64VectorTests::UMAXReduceAll);\n+    }\n+\n+    static short UMAXReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMAXReduceShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short64VectorTests::UMAXReduceMasked, Short64VectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3911,0 +3911,178 @@\n+    static short UMINReduce(short[] a, int idx) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAll(short[] a) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMINReduceShortMaxVectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                ShortMaxVectorTests::UMINReduce, ShortMaxVectorTests::UMINReduceAll);\n+    }\n+\n+    static short UMINReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.minUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMINReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MAX_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.minUnsigned(res, UMINReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMINReduceShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MAX_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMIN, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MAX_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.minUnsigned(ra, av.reduceLanes(VectorOperators.UMIN, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                ShortMaxVectorTests::UMINReduceMasked, ShortMaxVectorTests::UMINReduceAllMasked);\n+    }\n+\n+    static short UMAXReduce(short[] a, int idx) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAll(short[] a) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void UMAXReduceShortMaxVectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                ShortMaxVectorTests::UMAXReduce, ShortMaxVectorTests::UMAXReduceAll);\n+    }\n+\n+    static short UMAXReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = (short) VectorMath.maxUnsigned(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short UMAXReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = Short.MIN_VALUE;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) VectorMath.maxUnsigned(res, UMAXReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void UMAXReduceShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = Short.MIN_VALUE;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.UMAX, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = Short.MIN_VALUE;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = (short) VectorMath.maxUnsigned(ra, av.reduceLanes(VectorOperators.UMAX, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                ShortMaxVectorTests::UMAXReduceMasked, ShortMaxVectorTests::UMAXReduceAllMasked);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -487,0 +487,2 @@\n+gen_reduction_op_func \"UMIN\" \"(\\$type\\$) VectorMath.minUnsigned\" \"BITWISE\" \"\\$Wideboxtype\\$.\\$MaxValue\\$\"\n+gen_reduction_op_func \"UMAX\" \"(\\$type\\$) VectorMath.maxUnsigned\" \"BITWISE\" \"\\$Wideboxtype\\$.\\$MinValue\\$\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}