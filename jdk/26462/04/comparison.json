{"files":[{"patch":"@@ -2826,1 +2826,1 @@\n-  __ lea(dest->as_register_lo(), as_Address(addr->as_address_ptr()));\n+  __ lea(dest->as_pointer_register(), as_Address(addr->as_address_ptr()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -984,1 +984,1 @@\n-      LIR_Opr addr = new_pointer_register();\n+      LIR_Opr addr = new_register(T_ADDRESS);\n@@ -1061,1 +1061,1 @@\n-      LIR_Opr addr = new_pointer_register();\n+      LIR_Opr addr = new_register(T_ADDRESS);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1834,1 +1834,1 @@\n-  Register dst = dest->as_register_lo();\n+  Register dst = dest->as_pointer_register();\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -840,1 +840,1 @@\n-      LIR_Opr addr = new_pointer_register();\n+      LIR_Opr addr = new_register(T_ADDRESS);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -964,1 +964,1 @@\n-      LIR_Opr addr = new_pointer_register();\n+      LIR_Opr addr = new_register(T_ADDRESS);\n@@ -1103,1 +1103,1 @@\n-  LIR_Opr ptr_addr_a = new_pointer_register();\n+  LIR_Opr ptr_addr_a = new_register(T_ADDRESS);\n@@ -1106,1 +1106,1 @@\n-  LIR_Opr ptr_addr_b = new_pointer_register();\n+  LIR_Opr ptr_addr_b = new_register(T_ADDRESS);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8359235\n+ * @summary Test C1 stack2reg after fixing incorrect use of T_LONG in intrinsic\n+ * @requires vm.debug == true & vm.compiler1.enabled\n+ * @run main\/othervm -XX:TieredStopAtLevel=1\n+ *                   -XX:C1MaxInlineSize=200\n+ *                   -XX:CompileThreshold=10\n+ *                   -XX:CompileCommand=compileonly,java.lang.invoke.LambdaFormEditor::putInCache\n+ *                   compiler.intrinsics.TestStack2RegSlotMismatch\n+ *\/\n+package compiler.intrinsics;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestStack2RegSlotMismatch {\n+    public static int target(int x, int y) {\n+        return x + y;\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        MethodHandle mh = MethodHandles.lookup().findStatic(\n+            TestStack2RegSlotMismatch.class,\n+            \"target\",\n+            MethodType.methodType(int.class, int.class, int.class)\n+        );\n+        List<Object> argsList = new ArrayList<>();\n+        int j = 0;\n+\n+        for (int i = 0; i < 50; i++) {\n+            mh = MethodHandles.dropArguments(mh, 0, int.class);\n+            argsList.add(0);\n+            argsList.add(1);\n+            argsList.add(2);\n+            Object result = mh.invokeWithArguments(argsList);\n+            j += (int) result;\n+            argsList.remove(argsList.size() - 1);\n+            argsList.remove(argsList.size() - 1);\n+            if (i % 5 == 0) {\n+                Thread.sleep(1000);\n+            }\n+        }\n+\n+        if (j == 150) {\n+            System.out.println(\"passed\");\n+        } else {\n+            throw new Exception(\"TestStack2RegSlotMismatch Error\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestStack2RegSlotMismatch.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}