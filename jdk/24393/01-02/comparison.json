{"files":[{"patch":"@@ -45,0 +45,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -252,2 +254,9 @@\n-            return LabeledExpand(hkdf, suiteId, eae_prk, SHARED_SECRET,\n-                    kem_context, Nsecret);\n+            try {\n+                return LabeledExpand(hkdf, suiteId, eae_prk, SHARED_SECRET,\n+                        kem_context, Nsecret);\n+            } finally {\n+                if (eae_prk instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n+                }\n+            }\n@@ -282,13 +291,19 @@\n-            if (isEC()) {\n-                NamedCurve curve = (NamedCurve) spec;\n-                BigInteger sk = BigInteger.ZERO;\n-                int counter = 0;\n-                while (sk.signum() == 0 || sk.compareTo(curve.getOrder()) >= 0) {\n-                    if (counter > 255) {\n-                        throw new RuntimeException();\n-                    }\n-                    byte[] bytes = LabeledExpand(hkdf, suiteId, dkp_prk,\n-                            CANDIDATE, I2OSP(counter, 1), Nsk);\n-                    \/\/ bitmask is defined to be 0xFF for P-256 and P-384, and 0x01 for P-521\n-                    if (this == Params.P521) {\n-                        bytes[0] = (byte) (bytes[0] & 0x01);\n+            try {\n+                if (isEC()) {\n+                    NamedCurve curve = (NamedCurve) spec;\n+                    BigInteger sk = BigInteger.ZERO;\n+                    int counter = 0;\n+                    while (sk.signum() == 0 ||\n+                            sk.compareTo(curve.getOrder()) >= 0) {\n+                        if (counter > 255) {\n+                            throw new RuntimeException();\n+                        }\n+                        byte[] bytes = LabeledExpand(hkdf, suiteId, dkp_prk,\n+                                CANDIDATE, I2OSP(counter, 1), Nsk);\n+                        \/\/ bitmask is defined to be 0xFF for P-256 and P-384,\n+                        \/\/ and 0x01 for P-521\n+                        if (this == Params.P521) {\n+                            bytes[0] = (byte) (bytes[0] & 0x01);\n+                        }\n+                        sk = new BigInteger(1, (bytes));\n+                        counter = counter + 1;\n@@ -296,2 +311,12 @@\n-                    sk = new BigInteger(1, (bytes));\n-                    counter = counter + 1;\n+                    PrivateKey k = DeserializePrivateKey(sk.toByteArray());\n+                    return new KeyPair(getPublicKey(k), k);\n+                } else {\n+                    byte[] sk = LabeledExpand(hkdf, suiteId, dkp_prk, SK, EMPTY,\n+                            Nsk);\n+                    PrivateKey k = DeserializePrivateKey(sk);\n+                    return new KeyPair(getPublicKey(k), k);\n+                }\n+            } finally {\n+                if (dkp_prk instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n@@ -299,6 +324,0 @@\n-                PrivateKey k = DeserializePrivateKey(sk.toByteArray());\n-                return new KeyPair(getPublicKey(k), k);\n-            } else {\n-                byte[] sk = LabeledExpand(hkdf, suiteId, dkp_prk, SK, EMPTY, Nsk);\n-                PrivateKey k = DeserializePrivateKey(sk);\n-                return new KeyPair(getPublicKey(k), k);\n@@ -385,2 +404,2 @@\n-        SecretKey s = new SecretKeySpec(concat(HPKE_V1, suite_id, label, ikm),\n-                \"IKM\");\n+        SecretKeySpec s = new SecretKeySpec(concat(HPKE_V1, suite_id, label,\n+                ikm), \"IKM\");\n@@ -390,1 +409,1 @@\n-            return hkdf.deriveKey(\"HKDF-PRK\", spec);\n+            return hkdf.deriveKey(\"Generic\", spec);\n@@ -394,0 +413,2 @@\n+        } finally {\n+            SharedSecrets.getJavaxCryptoSpecAccess().clearSecretKeySpec(s);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":47,"deletions":26,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1202,0 +1202,1 @@\n+        final String hkdfAlgorithm;\n@@ -1207,0 +1208,1 @@\n+            this.hkdfAlgorithm = \"HKDF-\" + hashAlg.replace(\"-\", \"\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CipherSuite.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -342,2 +344,1 @@\n-                    secret, hashAlg.name,\n-                    hkdfLabel, hkdfContext, hashAlg.hashLength);\n+                    secret, hashAlg, hkdfLabel, hkdfContext);\n@@ -355,0 +356,5 @@\n+            } finally {\n+                if (finishedSecret instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n+                }\n@@ -801,1 +807,1 @@\n-            \/\/ derive salt secret\n+            SecretKey saltSecret = null;\n@@ -803,1 +809,2 @@\n-                SecretKey saltSecret = kd.deriveKey(\"TlsSaltSecret\");\n+                \/\/ derive salt secret\n+                saltSecret = kd.deriveKey(\"TlsSaltSecret\");\n@@ -807,1 +814,1 @@\n-                KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+                KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n@@ -809,2 +816,0 @@\n-                SecretKeySpec sharedSecret =\n-                        new SecretKeySpec(zeros, \"TlsZeroSecret\");\n@@ -812,3 +817,2 @@\n-                        HKDFParameterSpec.ofExtract()\n-                                         .addSalt(saltSecret)\n-                                         .addIKM(sharedSecret).extractOnly());\n+                        HKDFParameterSpec.ofExtract().addSalt(saltSecret)\n+                        .addIKM(zeros).extractOnly());\n@@ -848,0 +852,5 @@\n+            } finally {\n+                if (saltSecret instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n+                }\n@@ -956,2 +965,1 @@\n-\n-            \/\/ derive salt secret\n+            SecretKey saltSecret = null;\n@@ -959,1 +967,2 @@\n-                SecretKey saltSecret = kd.deriveKey(\"TlsSaltSecret\");\n+                \/\/ derive salt secret\n+                saltSecret = kd.deriveKey(\"TlsSaltSecret\");\n@@ -963,1 +972,1 @@\n-                KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+                KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n@@ -965,2 +974,0 @@\n-                SecretKeySpec sharedSecret =\n-                        new SecretKeySpec(zeros, \"TlsZeroSecret\");\n@@ -970,1 +977,1 @@\n-                                         .addIKM(sharedSecret).extractOnly());\n+                                         .addIKM(zeros).extractOnly());\n@@ -1004,0 +1011,5 @@\n+            } finally {\n+                if (saltSecret instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Finished.java","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -72,0 +74,1 @@\n+        SecretKey preMasterSecret = null;\n@@ -76,1 +79,1 @@\n-            SecretKey preMasterSecret = ka.generateSecret(\"TlsPremasterSecret\");\n+            preMasterSecret = ka.generateSecret(\"TlsPremasterSecret\");\n@@ -90,0 +93,4 @@\n+        } finally {\n+            if (preMasterSecret instanceof SecretKeySpec s) {\n+                SharedSecrets.getJavaxCryptoSpecAccess().clearSecretKeySpec(s);\n+            }\n@@ -98,0 +105,3 @@\n+        SecretKey sharedSecret = null;\n+        SecretKey earlySecret = null;\n+        SecretKey saltSecret = null;\n@@ -102,2 +112,1 @@\n-            SecretKey sharedSecret\n-                    = ka.generateSecret(\"TlsPremasterSecret\");\n+            sharedSecret = ka.generateSecret(\"TlsPremasterSecret\");\n@@ -107,1 +116,1 @@\n-            KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+            KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n@@ -112,4 +121,3 @@\n-                SecretKeySpec ikm\n-                        = new SecretKeySpec(zeros, \"TlsPreSharedSecret\");\n-                SecretKey earlySecret = hkdf.deriveKey(\"TlsEarlySecret\",\n-                        HKDFParameterSpec.ofExtract().addIKM(ikm).extractOnly());\n+                earlySecret = hkdf.deriveKey(\"TlsEarlySecret\",\n+                        HKDFParameterSpec.ofExtract().addSalt(zeros)\n+                        .addIKM(zeros).extractOnly());\n@@ -120,1 +128,1 @@\n-            SecretKey saltSecret = kd.deriveKey(\"TlsSaltSecret\");\n+            saltSecret = kd.deriveKey(\"TlsSaltSecret\");\n@@ -127,0 +135,8 @@\n+        } finally {\n+            SecretKey tbcKeys[] = { sharedSecret, earlySecret, saltSecret };\n+            for (SecretKey key : tbcKeys) {\n+                if (key instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KAKeyDerivation.java","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -292,1 +292,2 @@\n-            KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+            KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/NewSessionTicket.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javax.crypto.spec.SecretKeySpec;\n@@ -46,0 +47,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -571,5 +574,11 @@\n-        byte[] computedBinder =\n-                computeBinder(shc, binderKey, session, pskBinderHash);\n-        if (!MessageDigest.isEqual(binder, computedBinder)) {\n-            throw shc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n-                    \"Incorrect PSK binder value\");\n+        try {\n+            byte[] computedBinder =\n+                    computeBinder(shc, binderKey, session, pskBinderHash);\n+            if (!MessageDigest.isEqual(binder, computedBinder)) {\n+                throw shc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                        \"Incorrect PSK binder value\");\n+            }\n+        } finally {\n+            if (binderKey instanceof SecretKeySpec s) {\n+                SharedSecrets.getJavaxCryptoSpecAccess().clearSecretKeySpec(s);\n+            }\n@@ -724,4 +733,5 @@\n-            ClientHelloMessage clientHello = (ClientHelloMessage)message;\n-            CHPreSharedKeySpec pskPrototype = createPskPrototype(\n-                chc.resumingSession.getSuite().hashAlg.hashLength, identities);\n-            HandshakeHash pskBinderHash = chc.handshakeHash.copy();\n+            try {\n+                ClientHelloMessage clientHello = (ClientHelloMessage)message;\n+                CHPreSharedKeySpec pskPrototype = createPskPrototype(\n+                    chc.resumingSession.getSuite().hashAlg.hashLength, identities);\n+                HandshakeHash pskBinderHash = chc.handshakeHash.copy();\n@@ -729,2 +739,2 @@\n-            byte[] binder = computeBinder(chc, binderKey, pskBinderHash,\n-                    chc.resumingSession, chc, clientHello, pskPrototype);\n+                byte[] binder = computeBinder(chc, binderKey, pskBinderHash,\n+                        chc.resumingSession, chc, clientHello, pskPrototype);\n@@ -732,2 +742,2 @@\n-            List<byte[]> binders = new ArrayList<>();\n-            binders.add(binder);\n+                List<byte[]> binders = new ArrayList<>();\n+                binders.add(binder);\n@@ -735,4 +745,10 @@\n-            CHPreSharedKeySpec pskMessage =\n-                    new CHPreSharedKeySpec(identities, binders);\n-            chc.handshakeExtensions.put(CH_PRE_SHARED_KEY, pskMessage);\n-            return pskMessage.getEncoded();\n+                CHPreSharedKeySpec pskMessage =\n+                        new CHPreSharedKeySpec(identities, binders);\n+                chc.handshakeExtensions.put(CH_PRE_SHARED_KEY, pskMessage);\n+                return pskMessage.getEncoded();\n+            } finally {\n+                if (binderKey instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n+                }\n+            }\n@@ -792,1 +808,1 @@\n-            KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+            KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n@@ -808,0 +824,5 @@\n+            } finally {\n+                if (finishedKey instanceof SecretKeySpec s) {\n+                    SharedSecrets.getJavaxCryptoSpecAccess()\n+                            .clearSecretKeySpec(s);\n+                }\n@@ -816,0 +837,1 @@\n+        SecretKey earlySecret = null;\n@@ -818,1 +840,1 @@\n-            KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+            KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n@@ -820,1 +842,1 @@\n-            SecretKey earlySecret = hkdf.deriveKey(\"TlsEarlySecret\",\n+            earlySecret = hkdf.deriveKey(\"TlsEarlySecret\",\n@@ -832,0 +854,4 @@\n+        } finally {\n+            if (earlySecret instanceof SecretKeySpec s) {\n+                SharedSecrets.getJavaxCryptoSpecAccess().clearSecretKeySpec(s);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PreSharedKeyExtension.java","additions":46,"deletions":20,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-            public SecretKey deriveKey(String type) throws IOException {\n+            public SecretKey deriveKey(String typeNotUsed) throws IOException {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/RSAKeyExchange.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import sun.security.ssl.CipherSuite.HashAlg;\n+\n@@ -38,1 +40,1 @@\n-    private final String hashAlg;\n+    private final String hkdfAlg;\n@@ -43,3 +45,3 @@\n-    SSLBasicKeyDerivation(SecretKey secret, String hashAlg,\n-            byte[] label, byte[] context, int length) {\n-        this.hashAlg = hashAlg.replace(\"-\", \"\");\n+    SSLBasicKeyDerivation(SecretKey secret, HashAlg hashAlg, byte[] label,\n+            byte[] context) {\n+        this.hkdfAlg = hashAlg.hkdfAlgorithm;\n@@ -47,2 +49,2 @@\n-        this.hkdfInfo = createHkdfInfo(label, context, length);\n-        this.keyLen = length;\n+        this.hkdfInfo = createHkdfInfo(label, context, hashAlg.hashLength);\n+        this.keyLen = hashAlg.hashLength;\n@@ -54,1 +56,1 @@\n-            KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg));\n+            KDF hkdf = KDF.getInstance(hkdfAlg);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLBasicKeyDerivation.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-            KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+            KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSecretDerivation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,2 +150,1 @@\n-                KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(\n-                        cs.hashAlg.name));\n+                KDF hkdf = KDF.getInstance(cs.hashAlg.hkdfAlgorithm);\n@@ -166,2 +165,1 @@\n-                KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(\n-                        cs.hashAlg.name));\n+                KDF hkdf = KDF.getInstance(cs.hashAlg.hkdfAlgorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLTrafficKeyDerivation.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1221,1 +1221,1 @@\n-            KDF hkdf = KDF.getInstance(Utilities.digest2HKDF(hashAlg.name));\n+            KDF hkdf = KDF.getInstance(hashAlg.hkdfAlgorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,10 +146,0 @@\n-    \/\/ return the HKDF algorithm name using the specified digest algorithm\n-    static String digest2HKDF(String digestAlg) throws SSLHandshakeException {\n-        String sanitizedAlg = digestAlg.replace(\"-\", \"\");\n-        return switch (sanitizedAlg) {\n-            case \"SHA256\", \"SHA384\", \"SHA512\" -> \"HKDF-\" + sanitizedAlg;\n-            default -> throw new SSLHandshakeException(\"No HKDF support for \" +\n-                    digestAlg);\n-        };\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Utilities.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -179,3 +179,8 @@\n-            throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n-                    \"type (CKK_*) was not found for a key of the algorithm '\" +\n-                    alg + \"'.\");\n+            \/\/ special handling for TLS\n+            if (alg.startsWith(\"Tls\")) {\n+                ki = P11SecretKeyFactory.getKeyInfo(\"Generic\");\n+            } else {\n+                throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n+                        \"type (CKK_*) was not found for a key of the algorithm '\" +\n+                        alg + \"'.\");\n+            }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11HKDF.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+        \/\/  - If derivedKeyAlg is TlsAnyKey, expectedOpOut is \"null\"\n@@ -181,0 +182,3 @@\n+            case \"TlsAnyKey\" -> {\n+                opOut = null;\n+            }\n@@ -427,0 +431,11 @@\n+        executeTest(\"RFC 5869 - Test Case 1 - TlsAnyKey\",\n+                \"HKDF-SHA256\",\n+                \"TlsAnyKey\",\n+                \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n+                \"000102030405060708090a0b0c\",\n+                \"f0f1f2f3f4f5f6f7f8f9\",\n+                \"077709362c2e32df0ddc3f0dc47bba6390b6c73bb50f9c3122ec844ad7c2\" +\n+                \"b3e5\",\n+                \"3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4\" +\n+                \"c5bf34007208d5b887185865\",\n+                null);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KDF\/TestHKDF.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}