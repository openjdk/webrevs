{"files":[{"patch":"@@ -542,23 +542,15 @@\n-\n-        if (number == null) {\n-            throw new IllegalArgumentException(\"Cannot format null as a number\");\n-        }\n-\n-        if (number instanceof Long || number instanceof Integer\n-                || number instanceof Short || number instanceof Byte\n-                || number instanceof AtomicInteger\n-                || number instanceof AtomicLong\n-                || (number instanceof BigInteger\n-                && ((BigInteger) number).bitLength() < 64)) {\n-            return format(((Number) number).longValue(), toAppendTo,\n-                    fieldPosition);\n-        } else if (number instanceof BigDecimal) {\n-            return format((BigDecimal) number, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n-        } else if (number instanceof BigInteger) {\n-            return format((BigInteger) number, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n-        } else if (number instanceof Number) {\n-            return format(((Number) number).doubleValue(), toAppendTo, fieldPosition);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format \"\n-                    + number.getClass().getName() + \" as a number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, fieldPosition);\n+            case Integer i -> format(i.longValue(), toAppendTo, fieldPosition);\n+            case Short s -> format(s.longValue(), toAppendTo, fieldPosition);\n+            case Byte b -> format(b.longValue(), toAppendTo, fieldPosition);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, fieldPosition);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, fieldPosition);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, fieldPosition);\n+            case BigDecimal bd -> format(bd, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n+            case BigInteger bi -> format(bi, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n+            case Number n -> format(n.doubleValue(), toAppendTo, fieldPosition);\n+            case null -> throw new IllegalArgumentException(\"Cannot format null as a number\");\n+            default -> throw new IllegalArgumentException(\n+                    String.format(\"Cannot format %s as a number\", number.getClass().getName()));\n+        };\n@@ -571,23 +563,15 @@\n-\n-        if (number == null) {\n-            throw new IllegalArgumentException(\"Cannot format null as a number\");\n-        }\n-\n-        if (number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte\n-                    || number instanceof AtomicInteger\n-                    || number instanceof AtomicLong\n-                    || (number instanceof BigInteger\n-                                && ((BigInteger) number).bitLength() < 64)) {\n-            return format(((Number) number).longValue(), toAppendTo,\n-                    fieldPosition);\n-        } else if (number instanceof BigDecimal) {\n-            return format((BigDecimal) number, toAppendTo, fieldPosition);\n-        } else if (number instanceof BigInteger) {\n-            return format((BigInteger) number, toAppendTo, fieldPosition);\n-        } else if (number instanceof Number) {\n-            return format(((Number) number).doubleValue(), toAppendTo, fieldPosition);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format \"\n-                                                       + number.getClass().getName() + \" as a number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, fieldPosition);\n+            case Integer i -> format(i.longValue(), toAppendTo, fieldPosition);\n+            case Short s -> format(s.longValue(), toAppendTo, fieldPosition);\n+            case Byte b -> format(b.longValue(), toAppendTo, fieldPosition);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, fieldPosition);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, fieldPosition);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, fieldPosition);\n+            case BigDecimal bd -> format(bd, toAppendTo, fieldPosition);\n+            case BigInteger bi -> format(bi, toAppendTo, fieldPosition);\n+            case Number n -> format(n.doubleValue(), toAppendTo, fieldPosition);\n+            case null -> throw new IllegalArgumentException(\"Cannot format null as a number\");\n+            default -> throw new IllegalArgumentException(\n+                    String.format(\"Cannot format %s as a number\", number.getClass().getName()));\n+        };\n@@ -1185,13 +1169,12 @@\n-\n-        if (obj instanceof Double || obj instanceof Float) {\n-            format(((Number) obj).doubleValue(), sb, delegate);\n-        } else if (obj instanceof Long || obj instanceof Integer\n-                || obj instanceof Short || obj instanceof Byte\n-                || obj instanceof AtomicInteger || obj instanceof AtomicLong) {\n-            format(((Number) obj).longValue(), sb, delegate);\n-        } else if (obj instanceof BigDecimal) {\n-            format((BigDecimal) obj, sb, delegate);\n-        } else if (obj instanceof BigInteger) {\n-            format((BigInteger) obj, sb, delegate, false);\n-        } else if (obj == null) {\n-            throw new NullPointerException(\n+        switch (obj) {\n+            case Double d -> format(d.doubleValue(), sb, delegate);\n+            case Float f -> format(f.doubleValue(), sb, delegate);\n+            case Long l -> format(l.longValue(), sb, delegate);\n+            case Integer i -> format(i.longValue(), sb, delegate);\n+            case Short s -> format(s.longValue(), sb, delegate);\n+            case Byte b -> format(b.longValue(), sb, delegate);\n+            case AtomicInteger ai -> format(ai.longValue(), sb, delegate);\n+            case AtomicLong al -> format(al.longValue(), sb, delegate);\n+            case BigDecimal bd -> format(bd, sb, delegate);\n+            case BigInteger bi -> format(bi, sb, delegate, false);\n+            case null -> throw new NullPointerException(\n@@ -1199,2 +1182,1 @@\n-        } else {\n-            throw new IllegalArgumentException(\n+            default -> throw new IllegalArgumentException(\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":43,"deletions":61,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -551,16 +551,13 @@\n-        if (number instanceof Long || number instanceof Integer ||\n-                   number instanceof Short || number instanceof Byte ||\n-                   number instanceof AtomicInteger ||\n-                   number instanceof AtomicLong ||\n-                   (number instanceof BigInteger &&\n-                    ((BigInteger)number).bitLength () < 64)) {\n-            return format(((Number)number).longValue(), toAppendTo, pos);\n-        } else if (number instanceof BigDecimal) {\n-            return format((BigDecimal)number, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n-        } else if (number instanceof BigInteger) {\n-            return format((BigInteger)number, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n-        } else if (number instanceof Number) {\n-            return format(((Number)number).doubleValue(), toAppendTo, pos);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case BigDecimal bd -> format(bd, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n+            case BigInteger bi -> format(bi, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n@@ -573,16 +570,13 @@\n-        if (number instanceof Long || number instanceof Integer ||\n-                    number instanceof Short || number instanceof Byte ||\n-                    number instanceof AtomicInteger ||\n-                    number instanceof AtomicLong ||\n-                    (number instanceof BigInteger &&\n-                             ((BigInteger) number).bitLength() < 64)) {\n-            return format(((Number) number).longValue(), toAppendTo, pos);\n-        } else if (number instanceof BigDecimal) {\n-            return format((BigDecimal) number, toAppendTo, pos);\n-        } else if (number instanceof BigInteger) {\n-            return format((BigInteger) number, toAppendTo, pos);\n-        } else if (number instanceof Number) {\n-            return format(((Number) number).doubleValue(), toAppendTo, pos);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case BigDecimal bd -> format(bd, toAppendTo, pos);\n+            case BigInteger bi -> format(bi, toAppendTo, pos);\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n@@ -1024,1 +1018,1 @@\n-                         new CharacterIteratorFieldDelegate();\n+                new CharacterIteratorFieldDelegate();\n@@ -1026,17 +1020,15 @@\n-\n-        if (obj instanceof Double || obj instanceof Float) {\n-            format(((Number)obj).doubleValue(), sb, delegate);\n-        } else if (obj instanceof Long || obj instanceof Integer ||\n-                   obj instanceof Short || obj instanceof Byte ||\n-                   obj instanceof AtomicInteger || obj instanceof AtomicLong) {\n-            format(((Number)obj).longValue(), sb, delegate);\n-        } else if (obj instanceof BigDecimal) {\n-            format((BigDecimal)obj, sb, delegate);\n-        } else if (obj instanceof BigInteger) {\n-            format((BigInteger)obj, sb, delegate, false);\n-        } else if (obj == null) {\n-            throw new NullPointerException(\n-                \"formatToCharacterIterator must be passed non-null object\");\n-        } else {\n-            throw new IllegalArgumentException(\n-                \"Cannot format given Object as a Number\");\n+        switch (obj) {\n+            case Double d -> format(d.doubleValue(), sb, delegate);\n+            case Float f -> format(f.doubleValue(), sb, delegate);\n+            case Long l -> format(l.longValue(), sb, delegate);\n+            case Integer i -> format(i.longValue(), sb, delegate);\n+            case Short s -> format(s.longValue(), sb, delegate);\n+            case Byte b -> format(b.longValue(), sb, delegate);\n+            case AtomicInteger ai -> format(ai.longValue(), sb, delegate);\n+            case AtomicLong al -> format(al.longValue(), sb, delegate);\n+            case BigDecimal bd -> format(bd, sb, delegate);\n+            case BigInteger bi -> format(bi, sb, delegate, false);\n+            case null -> throw new NullPointerException(\n+                    \"formatToCharacterIterator must be passed non-null object\");\n+            default -> throw new IllegalArgumentException(\n+                    \"Cannot format given Object as a Number\");\n@@ -1793,1 +1785,1 @@\n-     * Sets the {@code DigitList} used by this {@code DecimalFormat}\n+     * Utility method that sets the {@code DigitList} used by this {@code DecimalFormat}\n@@ -1795,0 +1787,1 @@\n+     *\n@@ -1798,0 +1791,2 @@\n+     * @throws AssertionError if provided a Number subclass that is not supported\n+     *         by {@code DigitList}\n@@ -1800,9 +1795,7 @@\n-\n-        if (number instanceof Double) {\n-            digitList.set(isNegative, (Double) number, maxDigits, true);\n-        } else if (number instanceof BigDecimal) {\n-            digitList.set(isNegative, (BigDecimal) number, maxDigits, true);\n-        } else if (number instanceof Long) {\n-            digitList.set(isNegative, (Long) number, maxDigits);\n-        } else if (number instanceof BigInteger) {\n-            digitList.set(isNegative, (BigInteger) number, maxDigits);\n+        switch (number) {\n+            case Double d -> digitList.set(isNegative, d, maxDigits, true);\n+            case BigDecimal bd -> digitList.set(isNegative, bd, maxDigits, true);\n+            case Long l -> digitList.set(isNegative, l, maxDigits);\n+            case BigInteger bi -> digitList.set(isNegative, bi, maxDigits);\n+            default -> throw new AssertionError(\n+                    String.format(\"DigitList does not support %s\", number.getClass().getName()));\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":53,"deletions":60,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -305,11 +305,11 @@\n-        if (number instanceof Long || number instanceof Integer ||\n-            number instanceof Short || number instanceof Byte ||\n-            number instanceof AtomicInteger || number instanceof AtomicLong ||\n-            (number instanceof BigInteger &&\n-             ((BigInteger)number).bitLength() < 64)) {\n-            return format(((Number)number).longValue(), toAppendTo, pos);\n-        } else if (number instanceof Number) {\n-            return format(((Number)number).doubleValue(), toAppendTo, pos);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n@@ -322,11 +322,11 @@\n-        if (number instanceof Long || number instanceof Integer ||\n-                    number instanceof Short || number instanceof Byte ||\n-                    number instanceof AtomicInteger || number instanceof AtomicLong ||\n-                    (number instanceof BigInteger &&\n-                             ((BigInteger) number).bitLength() < 64)) {\n-            return format(((Number) number).longValue(), toAppendTo, pos);\n-        } else if (number instanceof Number) {\n-            return format(((Number) number).doubleValue(), toAppendTo, pos);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"}]}