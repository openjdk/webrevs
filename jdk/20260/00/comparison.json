{"files":[{"patch":"@@ -948,1 +948,7 @@\n-        Scope scope = targetContainerType.tsym.members();\n+        Scope scope = null;\n+        try {\n+            scope = targetContainerType.tsym.members();\n+        } catch (CompletionFailure ex) {\n+            chk.completionError(pos, ex);\n+            return null;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8332850\n+ * @summary javac crashes if container for repeatable annotation is not found\n+ * @library \/tools\/javac\/lib \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.*;\n+import toolbox.Task.*;\n+\n+public class CompletionErrorOnRepeatingAnnosTest {\n+    ToolBox tb = new ToolBox();\n+\n+    public static void main(String... args) throws Exception {\n+        CompletionErrorOnRepeatingAnnosTest t = new CompletionErrorOnRepeatingAnnosTest();\n+        t.testMissingContainerAnno();\n+    }\n+\n+    void testMissingContainerAnno() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        tb.createDirectories(src);\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.lang.annotation.Repeatable;\n+                @Repeatable(As.class)\n+                @interface A {}\n+                @interface As {\n+                    A[] value();\n+                }\n+                \"\"\");\n+        Path out = base.resolve(\"out\");\n+        tb.createDirectories(out);\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .files(tb.findJavaFiles(src))\n+                .run();\n+        \/\/ let's now compile T.java which uses repeated annotations, we want to load the anno classes from the CP\n+        tb.deleteFiles(src.resolve(\"A.java\"));\n+        tb.writeJavaFiles(src, \"@A @A class T {}\");\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .classpath(out)\n+                .files(tb.findJavaFiles(src))\n+                .run();\n+        \/\/ now if we remove As.class there will be an error but javac should not crash\n+        tb.deleteFiles(out.resolve(\"As.class\"));\n+        List<String> log = new JavacTask(tb)\n+                .outdir(out)\n+                .classpath(out)\n+                .options(\"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expectedOut = Arrays.asList(\n+                \"T.java:1:1: compiler.err.cant.access: As, (compiler.misc.class.file.not.found: As)\",\n+                \"T.java:1:4: compiler.err.invalid.repeatable.annotation.no.value: As\",\n+                \"2 errors\"\n+        );\n+        if (!expectedOut.equals(log))\n+            throw new Exception(\"expected output not found: \" + log);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/CompletionErrorOnRepeatingAnnosTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}