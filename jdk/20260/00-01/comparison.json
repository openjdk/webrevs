{"files":[{"patch":"@@ -46,1 +46,24 @@\n-        t.testMissingContainerAnno();\n+        \/\/t.testMissingContainerAnno();\n+        t.testMissingContainerTypeAnno();\n+    }\n+\n+    void testMissingContainerTypeAnno() throws Exception {\n+        doTest(\n+                \"\"\"\n+                import java.lang.annotation.*;\n+                import static java.lang.annotation.RetentionPolicy.*;\n+                import static java.lang.annotation.ElementType.*;\n+                @Target({TYPE_USE,FIELD}) @Repeatable( As.class) @interface A { }\n+                @Target({TYPE_USE,FIELD}) @interface As { A[] value(); }\n+                \"\"\",\n+                \"\"\"\n+                class T {\n+                    @A @A String data = \"test\";\n+                }\n+                \"\"\",\n+                List.of(\n+                        \"T.java:2:5: compiler.err.cant.access: As, (compiler.misc.class.file.not.found: As)\",\n+                        \"T.java:2:8: compiler.err.invalid.repeatable.annotation.no.value: As\",\n+                        \"2 errors\"\n+                )\n+        );\n@@ -50,4 +73,1 @@\n-        Path base = Paths.get(\".\");\n-        Path src = base.resolve(\"src\");\n-        tb.createDirectories(src);\n-        tb.writeJavaFiles(src,\n+        doTest(\n@@ -61,1 +81,15 @@\n-                \"\"\");\n+                \"\"\",\n+                \"@A @A class T {}\",\n+                List.of(\n+                        \"T.java:1:1: compiler.err.cant.access: As, (compiler.misc.class.file.not.found: As)\",\n+                        \"T.java:1:4: compiler.err.invalid.repeatable.annotation.no.value: As\",\n+                        \"2 errors\"\n+                )\n+        );\n+    }\n+\n+    private void doTest(String annosSrc, String annotatedSrc, List<String> expectedOutput) throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        tb.createDirectories(src);\n+        tb.writeJavaFiles(src, annosSrc);\n@@ -70,1 +104,1 @@\n-        tb.writeJavaFiles(src, \"@A @A class T {}\");\n+        tb.writeJavaFiles(src, annotatedSrc);\n@@ -87,6 +121,1 @@\n-        List<String> expectedOut = Arrays.asList(\n-                \"T.java:1:1: compiler.err.cant.access: As, (compiler.misc.class.file.not.found: As)\",\n-                \"T.java:1:4: compiler.err.invalid.repeatable.annotation.no.value: As\",\n-                \"2 errors\"\n-        );\n-        if (!expectedOut.equals(log))\n+        if (!expectedOutput.equals(log))\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/CompletionErrorOnRepeatingAnnosTest.java","additions":42,"deletions":13,"binary":false,"changes":55,"status":"modified"}]}