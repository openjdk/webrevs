{"files":[{"patch":"@@ -532,1 +532,0 @@\n-  { \"UseLinuxPosixThreadCPUClocks\", JDK_Version::jdk(24), JDK_Version::jdk(25), JDK_Version::jdk(26) },\n@@ -544,1 +543,0 @@\n-  { \"PerfDataSamplingInterval\",     JDK_Version::undefined(), JDK_Version::jdk(25), JDK_Version::jdk(26) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2920,62 +2920,1 @@\n-These `java` options have been removed in JDK @@VERSION_SPECIFICATION@@ and using them results in an error of:\n-\n->   `Unrecognized VM option` *option-name*\n-\n-`-XX:RTMAbortRatio=`*abort\\_ratio*\n-:   Specifies the RTM abort ratio is specified as a percentage (%) of all\n-    executed RTM transactions. If a number of aborted transactions becomes\n-    greater than this ratio, then the compiled code is deoptimized. This ratio\n-    is used when the `-XX:+UseRTMDeopt` option is enabled. The default value of\n-    this option is 50. This means that the compiled code is deoptimized if 50%\n-    of all transactions are aborted.\n-\n-`-XX:RTMRetryCount=`*number\\_of\\_retries*\n-:   Specifies the number of times that the RTM locking code is retried, when it\n-    is aborted or busy, before falling back to the normal locking mechanism.\n-    The default value for this option is 5. The `-XX:UseRTMLocking` option must\n-    be enabled.\n-\n-`-XX:+UseRTMDeopt`\n-:   Autotunes RTM locking depending on the abort ratio. This ratio is specified\n-    by the `-XX:RTMAbortRatio` option. If the number of aborted transactions\n-    exceeds the abort ratio, then the method containing the lock is deoptimized\n-    and recompiled with all locks as normal locks. This option is disabled by\n-    default. The `-XX:+UseRTMLocking` option must be enabled.\n-\n-`-XX:+UseRTMLocking`\n-:   Generates Restricted Transactional Memory (RTM) locking code for all\n-    inflated locks, with the normal locking mechanism as the fallback handler.\n-    This option is disabled by default. Options related to RTM are available\n-    only on x86 CPUs that support Transactional Synchronization Extensions (TSX).\n-\n-    RTM is part of Intel's TSX, which is an x86 instruction set extension and\n-    facilitates the creation of multithreaded applications. RTM introduces the\n-    new instructions `XBEGIN`, `XABORT`, `XEND`, and `XTEST`. The `XBEGIN` and\n-    `XEND` instructions enclose a set of instructions to run as a transaction.\n-    If no conflict is found when running the transaction, then the memory and\n-    register modifications are committed together at the `XEND` instruction.\n-    The `XABORT` instruction can be used to explicitly abort a transaction and\n-    the `XTEST` instruction checks if a set of instructions is being run in a\n-    transaction.\n-\n-    A lock on a transaction is inflated when another thread tries to access the\n-    same transaction, thereby blocking the thread that didn't originally\n-    request access to the transaction. RTM requires that a fallback set of\n-    operations be specified in case a transaction aborts or fails. An RTM lock\n-    is a lock that has been delegated to the TSX's system.\n-\n-    RTM improves performance for highly contended locks with low conflict in a\n-    critical region (which is code that must not be accessed by more than one\n-    thread concurrently). RTM also improves the performance of coarse-grain\n-    locking, which typically doesn't perform well in multithreaded\n-    applications. (Coarse-grain locking is the strategy of holding locks for\n-    long periods to minimize the overhead of taking and releasing locks, while\n-    fine-grained locking is the strategy of trying to achieve maximum\n-    parallelism by locking only when necessary and unlocking as soon as\n-    possible.) Also, for lightly contended locks that are used by different\n-    threads, RTM can reduce false cache line sharing, also known as cache line\n-    ping-pong. This occurs when multiple threads from different processors are\n-    accessing different resources, but the resources share the same cache line.\n-    As a result, the processors repeatedly invalidate the cache lines of other\n-    processors, which forces them to read from main memory instead of their\n-    cache.\n+No documented java options have been removed in JDK @@VERSION_SPECIFICATION@@.\n@@ -2985,0 +2924,2 @@\n+-   [The `java` Command, Release 25](https:\/\/docs.oracle.com\/en\/java\/javase\/25\/docs\/specs\/man\/java.html)\n+\n","filename":"src\/java.base\/share\/man\/java.md","additions":3,"deletions":62,"binary":false,"changes":65,"status":"modified"}]}