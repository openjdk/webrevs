{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -32,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -320,4 +318,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String cpbtype =\n-            AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                    Security.getProperty(CPB_TYPE));\n+        String cpbtype = Security.getProperty(CPB_TYPE);\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPathBuilder.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -32,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -332,4 +330,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String cpvtype =\n-            AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                    Security.getProperty(CPV_TYPE));\n+        String cpvtype = Security.getProperty(CPV_TYPE);\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPathValidator.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -32,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -429,1 +427,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -431,3 +428,1 @@\n-        String cstype;\n-        cstype = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                Security.getProperty(CERTSTORE_TYPE));\n+        String cstype = Security.getProperty(CERTSTORE_TYPE);\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertStore.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -58,2 +57,2 @@\n-    static final boolean USE_AIA = GetBooleanAction\n-            .privilegedGetProperty(\"com.sun.security.enableAIAcaIssuers\");\n+    static final boolean USE_AIA =\n+            Boolean.getBoolean(\"com.sun.security.enableAIAcaIssuers\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/Builder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n-import sun.security.action.GetIntegerAction;\n@@ -164,3 +163,1 @@\n-        @SuppressWarnings(\"removal\")\n-        Integer tmp = java.security.AccessController.doPrivileged(\n-                new GetIntegerAction(\"com.sun.security.ocsp.clockSkew\"));\n+        Integer tmp = Integer.getInteger(\"com.sun.security.ocsp.clockSkew\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSPResponse.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.security.AccessController;\n@@ -35,1 +34,0 @@\n-import java.security.PrivilegedAction;\n@@ -184,1 +182,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -186,26 +183,14 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<RevocationProperties>() {\n-                public RevocationProperties run() {\n-                    RevocationProperties rp = new RevocationProperties();\n-                    String onlyEE = Security.getProperty(\n-                        \"com.sun.security.onlyCheckRevocationOfEECert\");\n-                    rp.onlyEE = onlyEE != null\n-                                && onlyEE.equalsIgnoreCase(\"true\");\n-                    String ocspEnabled = Security.getProperty(\"ocsp.enable\");\n-                    rp.ocspEnabled = ocspEnabled != null\n-                                     && ocspEnabled.equalsIgnoreCase(\"true\");\n-                    rp.ocspUrl = Security.getProperty(\"ocsp.responderURL\");\n-                    rp.ocspSubject\n-                        = Security.getProperty(\"ocsp.responderCertSubjectName\");\n-                    rp.ocspIssuer\n-                        = Security.getProperty(\"ocsp.responderCertIssuerName\");\n-                    rp.ocspSerial\n-                        = Security.getProperty(\"ocsp.responderCertSerialNumber\");\n-                    rp.crlDPEnabled\n-                        = Boolean.getBoolean(\"com.sun.security.enableCRLDP\");\n-                    rp.ocspNonce\n-                        = Boolean.getBoolean(\"jdk.security.certpath.ocspNonce\");\n-                    return rp;\n-                }\n-            }\n-        );\n+        RevocationProperties rp = new RevocationProperties();\n+        String onlyEE = Security.getProperty(\n+            \"com.sun.security.onlyCheckRevocationOfEECert\");\n+        rp.onlyEE = onlyEE != null && onlyEE.equalsIgnoreCase(\"true\");\n+        String ocspEnabled = Security.getProperty(\"ocsp.enable\");\n+        rp.ocspEnabled = ocspEnabled != null\n+                         && ocspEnabled.equalsIgnoreCase(\"true\");\n+        rp.ocspUrl = Security.getProperty(\"ocsp.responderURL\");\n+        rp.ocspSubject = Security.getProperty(\"ocsp.responderCertSubjectName\");\n+        rp.ocspIssuer = Security.getProperty(\"ocsp.responderCertIssuerName\");\n+        rp.ocspSerial = Security.getProperty(\"ocsp.responderCertSerialNumber\");\n+        rp.crlDPEnabled = Boolean.getBoolean(\"com.sun.security.enableCRLDP\");\n+        rp.ocspNonce = Boolean.getBoolean(\"jdk.security.certpath.ocspNonce\");\n+        return rp;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/RevocationChecker.java","additions":15,"deletions":30,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.security.AccessController;\n@@ -32,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -54,28 +52,21 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Void run() {\n-                File f = new File(FilePaths.cacerts());\n-                try {\n-                    KeyStore cacerts;\n-                    cacerts = KeyStore.getInstance(\"JKS\");\n-                    try (FileInputStream fis = new FileInputStream(f)) {\n-                        cacerts.load(fis, null);\n-                        certs = new HashSet<>();\n-                        certIssuers = new HashSet<>();\n-                        Enumeration<String> list = cacerts.aliases();\n-                        while (list.hasMoreElements()) {\n-                            String alias = list.nextElement();\n-                            \/\/ Check if this cert is labeled a trust anchor.\n-                            if (alias.contains(\" [jdk\")) {\n-                                X509Certificate cert = (X509Certificate) cacerts\n-                                        .getCertificate(alias);\n-                                String fp =\n-                                    X509CertImpl.getFingerprint(HASH, cert, debug);\n-                                \/\/ only add trust anchor if fingerprint can\n-                                \/\/ be calculated\n-                                if (fp != null) {\n-                                    certs.add(fp);\n-                                    certIssuers.add(cert.getSubjectX500Principal());\n-                                }\n-                            }\n+        File f = new File(FilePaths.cacerts());\n+        try {\n+            KeyStore cacerts = KeyStore.getInstance(\"JKS\");\n+            try (FileInputStream fis = new FileInputStream(f)) {\n+                cacerts.load(fis, null);\n+                certs = new HashSet<>();\n+                certIssuers = new HashSet<>();\n+                Enumeration<String> list = cacerts.aliases();\n+                while (list.hasMoreElements()) {\n+                    String alias = list.nextElement();\n+                    \/\/ Check if this cert is labeled a trust anchor.\n+                    if (alias.contains(\" [jdk\")) {\n+                        X509Certificate cert = (X509Certificate) cacerts\n+                                .getCertificate(alias);\n+                        String fp =\n+                            X509CertImpl.getFingerprint(HASH, cert, debug);\n+                        \/\/ only add trust anchor if fingerprint can\n+                        \/\/ be calculated\n+                        if (fp != null) {\n+                            certs.add(fp);\n+                            certIssuers.add(cert.getSubjectX500Principal());\n@@ -84,5 +75,0 @@\n-                } catch (Exception e) {\n-                    if (debug != null) {\n-                        debug.println(\"Error parsing cacerts\");\n-                        e.printStackTrace();\n-                    }\n@@ -90,1 +76,0 @@\n-                return null;\n@@ -92,1 +77,6 @@\n-        });\n+        } catch (Exception e) {\n+            if (debug != null) {\n+                debug.println(\"Error parsing cacerts\");\n+                e.printStackTrace();\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AnchorCertificates.java","additions":28,"deletions":38,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    private static String getOverridableProperty(String propName) {\n+    public static String getOverridableProperty(String propName) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProperties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -53,14 +51,7 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            @Override\n-            public Void run() {\n-                File f = new File(StaticProperty.javaHome(),\n-                        \"lib\/security\/blocked.certs\");\n-                try (FileInputStream fin = new FileInputStream(f)) {\n-                    props.load(fin);\n-                } catch (IOException fnfe) {\n-                    if (debug != null) {\n-                        debug.println(\"Error parsing blocked.certs\");\n-                    }\n-                }\n-                return null;\n+        File f = new File(StaticProperty.javaHome(),\n+                \"lib\/security\/blocked.certs\");\n+        try (FileInputStream fin = new FileInputStream(f)) {\n+            props.load(fin);\n+        } catch (IOException fnfe) {\n+            if (debug != null) {\n+                debug.println(\"Error parsing blocked.certs\");\n@@ -68,1 +59,1 @@\n-        });\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/UntrustedCertificates.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -89,9 +87,2 @@\n-        @SuppressWarnings(\"removal\")\n-        String property = AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                @Override\n-                public String run() {\n-                    return Security.getProperty(\n-                        \"jdk.security.caDistrustPolicies\");\n-                }\n-            });\n+        String property = Security.getProperty(\n+                \"jdk.security.caDistrustPolicies\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/CADistrustPolicy.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -59,2 +58,2 @@\n-    private static final boolean checkTLSRevocation = GetBooleanAction\n-            .privilegedGetProperty(\"com.sun.net.ssl.checkRevocation\");\n+    private static final boolean checkTLSRevocation =\n+            Boolean.getBoolean(\"com.sun.net.ssl.checkRevocation\");\n@@ -70,1 +69,1 @@\n-                .privilegedGetOverridable(\"jdk.security.allowNonCaAnchor\");\n+                .getOverridableProperty(\"jdk.security.allowNonCaAnchor\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/PKIXValidator.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -67,2 +66,2 @@\n-    private static final boolean PRESERVE_OLD_DC_ENCODING = GetBooleanAction\n-            .privilegedGetProperty(\"com.sun.security.preserveOldDCEncoding\");\n+    private static final boolean PRESERVE_OLD_DC_ENCODING =\n+            Boolean.getBoolean(\"com.sun.security.preserveOldDCEncoding\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AVA.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}