{"files":[{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.sound.midi.*;\n-\n-\/**\n- * @test\n- * @key sound\n- * @bug 8074211 8250667\n- * @summary Test if part of the previous sysex message in the output buffer\n- *          is sent again with the next sysex message\n- * @comment This test does not fail when the bug occurs. It requires manual\n- *          monitoring of the output.\n- *\/\n-public class OutputBuffer {\n-    public static class RawMidiMessage extends MidiMessage {\n-        public RawMidiMessage(byte[] data) {\n-            super(data);\n-        }\n-\n-        @Override\n-        public Object clone() {\n-            return new RawMidiMessage(this.getMessage());\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        var deviceInfos = MidiSystem.getMidiDeviceInfo();\n-        for (var info : deviceInfos) {\n-            try (MidiDevice device = MidiSystem.getMidiDevice(info)) {\n-                if (device.getMaxReceivers() != 0) {\n-                    System.out.println(\"Open MIDI port: \" + info.getName());\n-                    device.open();\n-                    Receiver receiver = device.getReceiver();\n-                    \/\/ Send two sysex messages at once\n-                    receiver.send(new RawMidiMessage(new byte[]{\n-                            (byte) 0xF0, 0x7D, 0x01, (byte) 0xF7,\n-                            (byte) 0xF0, 0x7D, 0x02, (byte) 0xF7\n-                    }), -1);\n-                    \/\/ Send another sysex message\n-                    receiver.send(new RawMidiMessage(new byte[]{(byte) 0xF0, 0x7D, 0x03, (byte) 0xF7}), -1);\n-                    \/\/ The MIDI device should receive 3 sysex messages\n-                    \/\/ F0 7D 01 F7\n-                    \/\/ F0 7D 02 F7\n-                    \/\/ F0 7D 03 F7\n-                }\n-            } catch (MidiUnavailableException e) {\n-                \/\/ ignore\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/sound\/midi\/Devices\/OutputBuffer.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -37,1 +37,1 @@\n- * @bug 8237495 8301310\n+ * @bug 8074211 8237495 8301310\n@@ -117,0 +117,5 @@\n+                \/\/ The three parts of the sysex below are added for\n+                \/\/ JDK-8301310, but it can also used to test JDK-8074211.\n+                \/\/ However, The testcase does not fail when JDK-8074211 occurs.\n+                \/\/ It's recommended to setup a loopback MIDI device then check\n+                \/\/ whether the sysex received is the same as the testcase.\n","filename":"test\/jdk\/javax\/sound\/midi\/SysexMessage\/SendRawSysexMessage.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}