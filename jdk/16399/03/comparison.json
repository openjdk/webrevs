{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -304,1 +304,1 @@\n-        MIDIHDR* hdr = &(sysex->header[i]);\n+        MIDIHDR* hdr = &(sysex->headerInfo[i].header);\n@@ -323,1 +323,1 @@\n-        err = midiInUnprepareHeader((HMIDIIN) handle->deviceHandle, &(sysex->header[i]), sizeof(MIDIHDR));\n+        err = midiInUnprepareHeader((HMIDIIN) handle->deviceHandle, &(sysex->headerInfo[i].header), sizeof(MIDIHDR));\n@@ -505,1 +505,1 @@\n-        MIDIHDR* hdr = &(sysex->header[msg->data.l.index]);\n+        MIDIHDR* hdr = &(sysex->headerInfo[msg->data.l.index].header);\n","filename":"src\/java.desktop\/windows\/native\/libjsound\/PLATFORM_API_WinOS_MidiIn.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-        MIDIHDR* hdr = &(sysex->header[i]);\n+        MIDIHDR* hdr = &(sysex->headerInfo[i].header);\n@@ -173,1 +173,1 @@\n-INT32 freeLongBuffer(MIDIHDR* hdr, HMIDIOUT deviceHandle, INT32 minToLeaveData) {\n+INT32 freeLongBuffer(MidiHeaderInfo* info, HMIDIOUT deviceHandle, INT32 minToLeaveData) {\n@@ -175,0 +175,1 @@\n+    MIDIHDR* hdr = &(info->header);\n@@ -183,1 +184,1 @@\n-    if (hdr->lpData && (((INT32) hdr->dwBufferLength) < minToLeaveData || minToLeaveData < 0)) {\n+    if (hdr->lpData && (info->bufferLength < minToLeaveData || minToLeaveData < 0)) {\n@@ -187,0 +188,1 @@\n+        info->bufferLength=0;\n@@ -204,1 +206,1 @@\n-        err = freeLongBuffer(&(sysex->header[i]), (HMIDIOUT) handle->deviceHandle, -1);\n+        err = freeLongBuffer(&(sysex->headerInfo[i]), (HMIDIOUT) handle->deviceHandle, -1);\n@@ -355,0 +357,1 @@\n+    MidiHeaderInfo* info = NULL;\n@@ -381,1 +384,2 @@\n-                hdr = &(sysex->header[i]);\n+                info = &(sysex->headerInfo[i]);\n+                hdr = &(info->header);\n@@ -385,0 +389,1 @@\n+                info = NULL;\n@@ -407,1 +412,1 @@\n-        freeLongBuffer(hdr, handle->deviceHandle, (INT32) size);\n+        freeLongBuffer(info, handle->deviceHandle, (INT32) size);\n@@ -410,1 +415,1 @@\n-            hdr->dwBufferLength = size;\n+            info->bufferLength = size;\n@@ -412,0 +417,4 @@\n+        \/\/ Because midiOutLongMsg() ignores dwBytesRecorded, set both\n+        \/\/ dwBufferLength to the size of the data. The actual buffer\n+        \/\/ size is recorded in info->bufferLength.\n+        hdr->dwBufferLength = size;\n@@ -416,1 +425,1 @@\n-            freeLongBuffer(hdr, handle->deviceHandle, -1);\n+            freeLongBuffer(info, handle->deviceHandle, -1);\n@@ -422,1 +431,1 @@\n-            freeLongBuffer(hdr, handle->deviceHandle, -1);\n+            freeLongBuffer(info, handle->deviceHandle, -1);\n","filename":"src\/java.desktop\/windows\/native\/libjsound\/PLATFORM_API_WinOS_MidiOut.c","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-    int structSize = sizeof(SysExQueue) + ((count - 1) * sizeof(MIDIHDR));\n+    int structSize = sizeof(SysExQueue) + ((count - 1) * sizeof(MidiHeaderInfo));\n@@ -115,2 +115,3 @@\n-        sysex->header[i].lpData = dataPtr;\n-        sysex->header[i].dwBufferLength = size;\n+        sysex->headerInfo[i].header.lpData = dataPtr;\n+        sysex->headerInfo[i].header.dwBufferLength = size;\n+        sysex->headerInfo[i].bufferLength = size;\n@@ -118,1 +119,1 @@\n-        sysex->header[i].dwUser = (DWORD) i;\n+        sysex->headerInfo[i].header.dwUser = (DWORD) i;\n","filename":"src\/java.desktop\/windows\/native\/libjsound\/PLATFORM_API_WinOS_Util.c","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,5 @@\n+typedef struct tag_MidiHeaderInfo {\n+    MIDIHDR header;     \/\/ Windows specific structure to hold meta info\n+    INT32 bufferLength; \/\/ the actual length of the buffer in MIDIHDR\n+} MidiHeaderInfo;\n+\n@@ -50,5 +55,5 @@\n-    int count;         \/\/ number of sys ex headers\n-    int size;          \/\/ data size per sys ex header\n-    int ownsLinearMem; \/\/ true when linearMem is to be disposed\n-    UBYTE* linearMem;  \/\/ where the actual sys ex data is, count*size bytes\n-    MIDIHDR header[1]; \/\/ Windows specific structure to hold meta info\n+    int count;                    \/\/ number of sys ex headers\n+    int size;                     \/\/ data size per sys ex header\n+    int ownsLinearMem;            \/\/ true when linearMem is to be disposed\n+    UBYTE* linearMem;             \/\/ where the actual sys ex data is, count*size bytes\n+    MidiHeaderInfo headerInfo[1]; \/\/ a structure to hold MIDIHDR and the actual buffer length\n","filename":"src\/java.desktop\/windows\/native\/libjsound\/PLATFORM_API_WinOS_Util.h","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.sound.midi.*;\n+\n+\/**\n+ * @test\n+ * @key sound\n+ * @bug 8074211 8250667\n+ * @summary Test if part of the previous sysex message in the output buffer\n+ *          is sent again with the next sysex message\n+ * @comment This test does not fail when the bug occurs. It requires manual\n+ *          monitoring of the output.\n+ *\/\n+public class OutputBuffer {\n+    public static class RawMidiMessage extends MidiMessage {\n+        public RawMidiMessage(byte[] data) {\n+            super(data);\n+        }\n+\n+        @Override\n+        public Object clone() {\n+            return new RawMidiMessage(this.getMessage());\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        var deviceInfos = MidiSystem.getMidiDeviceInfo();\n+        for (var info : deviceInfos) {\n+            try (MidiDevice device = MidiSystem.getMidiDevice(info)) {\n+                if (device.getMaxReceivers() != 0) {\n+                    System.out.println(\"Open MIDI port: \" + info.getName());\n+                    device.open();\n+                    Receiver receiver = device.getReceiver();\n+                    \/\/ Send two sysex messages at once\n+                    receiver.send(new RawMidiMessage(new byte[]{\n+                            (byte) 0xF0, 0x7D, 0x01, (byte) 0xF7,\n+                            (byte) 0xF0, 0x7D, 0x02, (byte) 0xF7\n+                    }), -1);\n+                    \/\/ Send another sysex message\n+                    receiver.send(new RawMidiMessage(new byte[]{(byte) 0xF0, 0x7D, 0x03, (byte) 0xF7}), -1);\n+                    \/\/ The MIDI device should receive 3 sysex messages\n+                    \/\/ F0 7D 01 F7\n+                    \/\/ F0 7D 02 F7\n+                    \/\/ F0 7D 03 F7\n+                }\n+            } catch (MidiUnavailableException e) {\n+                \/\/ ignore\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/midi\/Devices\/OutputBuffer.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}