{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.List;\n@@ -31,0 +32,1 @@\n+import java.util.concurrent.CopyOnWriteArrayList;\n@@ -33,0 +35,2 @@\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.consumer.RecordedClass;\n@@ -48,0 +52,4 @@\n+    private static final String FIELD_KLASS_NAME = \"monitorClass.name\";\n+    private static final String FIELD_ADDRESS    = \"address\";\n+    private static final String FIELD_NOTIFIED_COUNT = \"notifiedCount\";\n+\n@@ -54,2 +62,0 @@\n-    static boolean silenceFindBugsNakedNotify;\n-\n@@ -57,3 +63,0 @@\n-        Recording recording = new Recording();\n-        recording.enable(EVENT_NAME).withThreshold(Duration.ofMillis(0));\n-\n@@ -61,1 +64,15 @@\n-        final CountDownLatch latch = new CountDownLatch(1);\n+        final String lockClassName = lock.getClass().getName().replace('.', '\/');\n+        final long mainThreadId = Thread.currentThread().threadId();\n+\n+        List<RecordedEvent> events = new CopyOnWriteArrayList<>();\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(EVENT_NAME).withoutThreshold();\n+            rs.onEvent(EVENT_NAME, e -> {\n+                long threadId = e.getThread().getJavaThreadId();\n+                Object clazz = e.getValue(FIELD_KLASS_NAME);\n+                if (clazz.equals(lockClassName) && (threadId == mainThreadId)) {\n+                    events.add(e);\n+                    rs.close();\n+                }\n+            });\n+            rs.startAsync();\n@@ -63,3 +80,13 @@\n-        TestThread waitThread = new TestThread(new XRun() {\n-            @Override\n-            public void xrun() throws Throwable {\n+            final CountDownLatch latch = new CountDownLatch(1);\n+            TestThread waitThread = new TestThread(new XRun() {\n+                @Override\n+                public void xrun() throws Throwable {\n+                    synchronized (lock) {\n+                        latch.countDown();\n+                        lock.wait(WAIT_TIME);\n+                    }\n+                }\n+            });\n+            try {\n+                waitThread.start();\n+                latch.await();\n@@ -67,3 +94,1 @@\n-                    latch.countDown();\n-                    lock.wait(WAIT_TIME);\n-                    silenceFindBugsNakedNotify = false;\n+                    lock.notifyAll();\n@@ -71,0 +96,2 @@\n+            } finally {\n+                waitThread.join();\n@@ -72,1 +99,0 @@\n-        });\n@@ -74,12 +100,1 @@\n-        try {\n-            recording.start();\n-            waitThread.start();\n-            latch.await();\n-            synchronized (lock) {\n-                silenceFindBugsNakedNotify = true;\n-                lock.notifyAll();\n-            }\n-        } finally {\n-            waitThread.join();\n-            recording.stop();\n-        }\n+            rs.awaitTermination();\n@@ -87,6 +102,5 @@\n-        boolean isAnyFound = false;\n-        for (RecordedEvent event : Events.fromRecording(recording)) {\n-            System.out.println(\"Event:\" + event);\n-            if (event.getThread().getJavaThreadId() != Thread.currentThread().threadId()) {\n-                \/\/ Some other notification, skip.\n-                continue;\n+            System.out.println(events);\n+            assertFalse(events.isEmpty());\n+            for (RecordedEvent ev : events) {\n+                Events.assertField(ev, FIELD_ADDRESS).notEqual(0L);\n+                Events.assertField(ev, FIELD_NOTIFIED_COUNT).equal(1);\n@@ -94,6 +108,0 @@\n-            assertFalse(isAnyFound, \"Found more than 1 event\");\n-            isAnyFound = true;\n-            final String lockClassName = lock.getClass().getName().replace('.', '\/');\n-            Events.assertField(event, \"monitorClass.name\").equal(lockClassName);\n-            Events.assertField(event, \"address\").notEqual(0L);\n-            Events.assertField(event, \"notifiedCount\").equal(1);\n@@ -101,1 +109,0 @@\n-        assertTrue(isAnyFound, \"Correct event not found\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestJavaMonitorNotifyEvent.java","additions":45,"deletions":38,"binary":false,"changes":83,"status":"modified"}]}