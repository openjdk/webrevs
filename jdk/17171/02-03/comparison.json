{"files":[{"patch":"@@ -454,1 +454,1 @@\n-frame::frame(void* sp, void* fp, void* pc) : frame((intptr_t*)sp, (address)pc, kind::code_blob) {}\n+frame::frame(void* sp, void* fp, void* pc) : frame((intptr_t*)sp, (address)pc, kind::unknown) {}\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-    native,           \/\/ The frame's pc is not necessarily in the CodeCache.\n+    unknown,          \/\/ The frame's pc is not necessarily in the CodeCache.\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-  if (_cb == nullptr ) {\n-    _cb = knd == kind::nmethod ? CodeCache::find_blob_fast(_pc) : CodeCache::find_blob(_pc);\n+  if (_cb == nullptr) {\n+    _cb = (knd == kind::nmethod) ? CodeCache::find_blob_fast(_pc) : CodeCache::find_blob(_pc);\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1191,1 +1191,1 @@\n-  \/\/ We set bit 9 to distinguish post call nops from real CMPI\/CMPI instructions\n+  \/\/ Refer to NativePostCallNop for details.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -519,1 +519,1 @@\n-    \/\/ Bit 9 is alwys 1 for PCNs to distinguish them from CMPI\/CMPLI\n+    \/\/ Bit 9 is always 1 for PCNs to distinguish them from regular CMPI\/CMPLI\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    frame ret_frame((intptr_t*)uc->uc_mcontext.jmp_context.gpr[1\/*REG_SP*\/], pc, frame::kind::native);\n+    frame ret_frame((intptr_t*)uc->uc_mcontext.jmp_context.gpr[1\/*REG_SP*\/], pc, frame::kind::unknown);\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/javaThread_aix_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-    frame fr(sp, epc, frame::kind::native);\n+    frame fr(sp, epc, frame::kind::unknown);\n@@ -140,1 +140,1 @@\n-  return frame(sp, lr, frame::kind::native);\n+  return frame(sp, lr, frame::kind::unknown);\n@@ -148,1 +148,1 @@\n-  return frame(fr->sender_sp(), fr->sender_pc(), frame::kind::native);\n+  return frame(fr->sender_sp(), fr->sender_pc(), frame::kind::unknown);\n@@ -154,1 +154,1 @@\n-  frame topframe(csp, CAST_FROM_FN_PTR(address, os::current_frame), frame::kind::native);\n+  frame topframe(csp, CAST_FROM_FN_PTR(address, os::current_frame), frame::kind::unknown);\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    frame ret_frame((intptr_t*)uc->uc_mcontext.regs->gpr[1\/*REG_SP*\/], pc, frame::kind::native);\n+    frame ret_frame((intptr_t*)uc->uc_mcontext.regs->gpr[1\/*REG_SP*\/], pc, frame::kind::unknown);\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/javaThread_linux_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  return frame(sp, epc, frame::kind::native);\n+  return frame(sp, epc, frame::kind::unknown);\n@@ -166,1 +166,1 @@\n-  return frame(sp, lr, frame::kind::native);\n+  return frame(sp, lr, frame::kind::unknown);\n@@ -174,1 +174,1 @@\n-  return frame(fr->sender_sp(), fr->sender_pc(), frame::kind::native);\n+  return frame(fr->sender_sp(), fr->sender_pc(), frame::kind::unknown);\n@@ -180,1 +180,1 @@\n-  frame topframe(csp, CAST_FROM_FN_PTR(address, os::current_frame), frame::kind::native);\n+  frame topframe(csp, CAST_FROM_FN_PTR(address, os::current_frame), frame::kind::unknown);\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}