{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -515,1 +515,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long)Double.doubleToRawLongBits(vecarr[ix]);\n@@ -532,1 +532,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long)Double.doubleToRawLongBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -517,1 +517,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long)Double.doubleToRawLongBits(vecarr[ix]);\n@@ -536,1 +536,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long)Double.doubleToRawLongBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -521,1 +521,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long)Double.doubleToRawLongBits(vecarr[ix]);\n@@ -544,1 +544,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long)Double.doubleToRawLongBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -514,1 +514,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long)Double.doubleToRawLongBits(vecarr[ix]);\n@@ -530,1 +530,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long)Double.doubleToRawLongBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -513,1 +513,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long)Double.doubleToRawLongBits(vecarr[ix]);\n@@ -529,1 +529,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long)Double.doubleToRawLongBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -517,1 +517,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long)Float.floatToRawIntBits(vecarr[ix]);\n@@ -536,1 +536,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long)Float.floatToRawIntBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -521,1 +521,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long)Float.floatToRawIntBits(vecarr[ix]);\n@@ -544,1 +544,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long)Float.floatToRawIntBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -529,1 +529,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long)Float.floatToRawIntBits(vecarr[ix]);\n@@ -560,1 +560,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long)Float.floatToRawIntBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -515,1 +515,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long)Float.floatToRawIntBits(vecarr[ix]);\n@@ -532,1 +532,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long)Float.floatToRawIntBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -513,1 +513,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long)Float.floatToRawIntBits(vecarr[ix]);\n@@ -529,1 +529,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long)Float.floatToRawIntBits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -564,1 +564,1 @@\n-                     return (long)$Type$.$type$To$Bitstype$Bits(vecarr[ix]);\n+                     return (long)$Type$.$type$ToRaw$Bitstype$Bits(vecarr[ix]);\n@@ -610,1 +610,1 @@\n-                                this, i, (long)$Type$.$type$To$Bitstype$Bits(e),\n+                                this, i, (long)$Type$.$type$ToRaw$Bitstype$Bits(e),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(byte[] r, byte[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        byte apply(byte[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(byte[] r, byte[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1215,4 +1189,0 @@\n-    static byte get(byte[] a, int i) {\n-        return (byte) a[i];\n-    }\n-\n@@ -3751,2 +3721,2 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void withByte128VectorTests(IntFunction<byte []> fa) {\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void withByte128VectorTests(IntFunction<byte []> fa, IntFunction<byte []> fb) {\n@@ -3754,0 +3724,1 @@\n+        byte[] b = fb.apply(SPECIES.length());\n@@ -3759,1 +3730,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3764,3 +3737,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4701,1 +4672,1 @@\n-        assertArraysEquals(r, a, Byte128VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(byte[] r, byte[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        byte apply(byte[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(byte[] r, byte[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1215,4 +1189,0 @@\n-    static byte get(byte[] a, int i) {\n-        return (byte) a[i];\n-    }\n-\n@@ -3751,2 +3721,2 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void withByte256VectorTests(IntFunction<byte []> fa) {\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void withByte256VectorTests(IntFunction<byte []> fa, IntFunction<byte []> fb) {\n@@ -3754,0 +3724,1 @@\n+        byte[] b = fb.apply(SPECIES.length());\n@@ -3759,1 +3730,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3764,3 +3737,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4701,1 +4672,1 @@\n-        assertArraysEquals(r, a, Byte256VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(byte[] r, byte[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        byte apply(byte[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(byte[] r, byte[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1215,4 +1189,0 @@\n-    static byte get(byte[] a, int i) {\n-        return (byte) a[i];\n-    }\n-\n@@ -3751,2 +3721,2 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void withByte512VectorTests(IntFunction<byte []> fa) {\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void withByte512VectorTests(IntFunction<byte []> fa, IntFunction<byte []> fb) {\n@@ -3754,0 +3724,1 @@\n+        byte[] b = fb.apply(SPECIES.length());\n@@ -3759,1 +3730,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3764,3 +3737,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4701,1 +4672,1 @@\n-        assertArraysEquals(r, a, Byte512VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(byte[] r, byte[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        byte apply(byte[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(byte[] r, byte[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1215,4 +1189,0 @@\n-    static byte get(byte[] a, int i) {\n-        return (byte) a[i];\n-    }\n-\n@@ -3751,2 +3721,2 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void withByte64VectorTests(IntFunction<byte []> fa) {\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void withByte64VectorTests(IntFunction<byte []> fa, IntFunction<byte []> fb) {\n@@ -3754,0 +3724,1 @@\n+        byte[] b = fb.apply(SPECIES.length());\n@@ -3759,1 +3730,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3764,3 +3737,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4701,1 +4672,1 @@\n-        assertArraysEquals(r, a, Byte64VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -75,0 +75,8 @@\n+    static void assertArraysStrictlyEquals(byte[] r, byte[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -239,19 +247,0 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -712,15 +701,0 @@\n-    interface FBinArrayOp {\n-        byte apply(byte[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(byte[] r, byte[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1220,4 +1194,0 @@\n-    static byte get(byte[] a, int i) {\n-        return (byte) a[i];\n-    }\n-\n@@ -3756,2 +3726,2 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void withByteMaxVectorTests(IntFunction<byte []> fa) {\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void withByteMaxVectorTests(IntFunction<byte []> fa, IntFunction<byte []> fb) {\n@@ -3759,0 +3729,1 @@\n+        byte[] b = fb.apply(SPECIES.length());\n@@ -3764,1 +3735,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3769,3 +3742,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4706,1 +4677,1 @@\n-        assertArraysEquals(r, a, ByteMaxVectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(double[] r, double[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            long ir = Double.doubleToRawLongBits(r[i]);\n+            long ia = Double.doubleToRawLongBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %016X, actual = %016X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        double apply(double[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(double[] r, double[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1359,20 +1335,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Double.MAX_VALUE;\n-            case 1:\n-                return Double.MIN_VALUE;\n-            case 2:\n-                return Double.NEGATIVE_INFINITY;\n-            case 3:\n-                return Double.POSITIVE_INFINITY;\n-            case 4:\n-                return Double.NaN;\n-            case 5:\n-                return (double)0.0;\n-            default:\n-                return (double)-0.0;\n-        }\n-    }\n-\n-    static double get(double[] a, int i) {\n-        return (double) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Double.MAX_VALUE;\n+            case 1  -> Double.MIN_VALUE;\n+            case 2  -> Double.NEGATIVE_INFINITY;\n+            case 3  -> Double.POSITIVE_INFINITY;\n+            case 4  -> Double.NaN;\n+            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n+            case 6  -> (double)0.0;\n+            default -> (double)-0.0;\n+        };\n@@ -2605,2 +2571,2 @@\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void withDouble128VectorTests(IntFunction<double []> fa) {\n+    @Test(dataProvider = \"doubleBinaryOpProvider\")\n+    static void withDouble128VectorTests(IntFunction<double []> fa, IntFunction<double []> fb) {\n@@ -2608,0 +2574,1 @@\n+        double[] b = fb.apply(SPECIES.length());\n@@ -2613,1 +2580,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2618,3 +2587,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3510,1 +3477,1 @@\n-        assertArraysEquals(r, a, Double128VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(double[] r, double[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            long ir = Double.doubleToRawLongBits(r[i]);\n+            long ia = Double.doubleToRawLongBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %016X, actual = %016X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        double apply(double[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(double[] r, double[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1359,20 +1335,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Double.MAX_VALUE;\n-            case 1:\n-                return Double.MIN_VALUE;\n-            case 2:\n-                return Double.NEGATIVE_INFINITY;\n-            case 3:\n-                return Double.POSITIVE_INFINITY;\n-            case 4:\n-                return Double.NaN;\n-            case 5:\n-                return (double)0.0;\n-            default:\n-                return (double)-0.0;\n-        }\n-    }\n-\n-    static double get(double[] a, int i) {\n-        return (double) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Double.MAX_VALUE;\n+            case 1  -> Double.MIN_VALUE;\n+            case 2  -> Double.NEGATIVE_INFINITY;\n+            case 3  -> Double.POSITIVE_INFINITY;\n+            case 4  -> Double.NaN;\n+            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n+            case 6  -> (double)0.0;\n+            default -> (double)-0.0;\n+        };\n@@ -2605,2 +2571,2 @@\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void withDouble256VectorTests(IntFunction<double []> fa) {\n+    @Test(dataProvider = \"doubleBinaryOpProvider\")\n+    static void withDouble256VectorTests(IntFunction<double []> fa, IntFunction<double []> fb) {\n@@ -2608,0 +2574,1 @@\n+        double[] b = fb.apply(SPECIES.length());\n@@ -2613,1 +2580,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2618,3 +2587,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3510,1 +3477,1 @@\n-        assertArraysEquals(r, a, Double256VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(double[] r, double[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            long ir = Double.doubleToRawLongBits(r[i]);\n+            long ia = Double.doubleToRawLongBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %016X, actual = %016X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        double apply(double[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(double[] r, double[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1359,20 +1335,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Double.MAX_VALUE;\n-            case 1:\n-                return Double.MIN_VALUE;\n-            case 2:\n-                return Double.NEGATIVE_INFINITY;\n-            case 3:\n-                return Double.POSITIVE_INFINITY;\n-            case 4:\n-                return Double.NaN;\n-            case 5:\n-                return (double)0.0;\n-            default:\n-                return (double)-0.0;\n-        }\n-    }\n-\n-    static double get(double[] a, int i) {\n-        return (double) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Double.MAX_VALUE;\n+            case 1  -> Double.MIN_VALUE;\n+            case 2  -> Double.NEGATIVE_INFINITY;\n+            case 3  -> Double.POSITIVE_INFINITY;\n+            case 4  -> Double.NaN;\n+            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n+            case 6  -> (double)0.0;\n+            default -> (double)-0.0;\n+        };\n@@ -2605,2 +2571,2 @@\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void withDouble512VectorTests(IntFunction<double []> fa) {\n+    @Test(dataProvider = \"doubleBinaryOpProvider\")\n+    static void withDouble512VectorTests(IntFunction<double []> fa, IntFunction<double []> fb) {\n@@ -2608,0 +2574,1 @@\n+        double[] b = fb.apply(SPECIES.length());\n@@ -2613,1 +2580,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2618,3 +2587,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3510,1 +3477,1 @@\n-        assertArraysEquals(r, a, Double512VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(double[] r, double[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            long ir = Double.doubleToRawLongBits(r[i]);\n+            long ia = Double.doubleToRawLongBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %016X, actual = %016X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        double apply(double[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(double[] r, double[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1359,20 +1335,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Double.MAX_VALUE;\n-            case 1:\n-                return Double.MIN_VALUE;\n-            case 2:\n-                return Double.NEGATIVE_INFINITY;\n-            case 3:\n-                return Double.POSITIVE_INFINITY;\n-            case 4:\n-                return Double.NaN;\n-            case 5:\n-                return (double)0.0;\n-            default:\n-                return (double)-0.0;\n-        }\n-    }\n-\n-    static double get(double[] a, int i) {\n-        return (double) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Double.MAX_VALUE;\n+            case 1  -> Double.MIN_VALUE;\n+            case 2  -> Double.NEGATIVE_INFINITY;\n+            case 3  -> Double.POSITIVE_INFINITY;\n+            case 4  -> Double.NaN;\n+            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n+            case 6  -> (double)0.0;\n+            default -> (double)-0.0;\n+        };\n@@ -2605,2 +2571,2 @@\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void withDouble64VectorTests(IntFunction<double []> fa) {\n+    @Test(dataProvider = \"doubleBinaryOpProvider\")\n+    static void withDouble64VectorTests(IntFunction<double []> fa, IntFunction<double []> fb) {\n@@ -2608,0 +2574,1 @@\n+        double[] b = fb.apply(SPECIES.length());\n@@ -2613,1 +2580,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2618,3 +2587,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3510,1 +3477,1 @@\n-        assertArraysEquals(r, a, Double64VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -79,0 +79,10 @@\n+    static void assertArraysStrictlyEquals(double[] r, double[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            long ir = Double.doubleToRawLongBits(r[i]);\n+            long ia = Double.doubleToRawLongBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %016X, actual = %016X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -256,19 +266,0 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -803,15 +794,0 @@\n-    interface FBinArrayOp {\n-        double apply(double[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(double[] r, double[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1364,20 +1340,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Double.MAX_VALUE;\n-            case 1:\n-                return Double.MIN_VALUE;\n-            case 2:\n-                return Double.NEGATIVE_INFINITY;\n-            case 3:\n-                return Double.POSITIVE_INFINITY;\n-            case 4:\n-                return Double.NaN;\n-            case 5:\n-                return (double)0.0;\n-            default:\n-                return (double)-0.0;\n-        }\n-    }\n-\n-    static double get(double[] a, int i) {\n-        return (double) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Double.MAX_VALUE;\n+            case 1  -> Double.MIN_VALUE;\n+            case 2  -> Double.NEGATIVE_INFINITY;\n+            case 3  -> Double.POSITIVE_INFINITY;\n+            case 4  -> Double.NaN;\n+            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n+            case 6  -> (double)0.0;\n+            default -> (double)-0.0;\n+        };\n@@ -2610,2 +2576,2 @@\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void withDoubleMaxVectorTests(IntFunction<double []> fa) {\n+    @Test(dataProvider = \"doubleBinaryOpProvider\")\n+    static void withDoubleMaxVectorTests(IntFunction<double []> fa, IntFunction<double []> fb) {\n@@ -2613,0 +2579,1 @@\n+        double[] b = fb.apply(SPECIES.length());\n@@ -2618,1 +2585,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2623,3 +2592,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3515,1 +3482,1 @@\n-        assertArraysEquals(r, a, DoubleMaxVectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(float[] r, float[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            int ir = Float.floatToRawIntBits(r[i]);\n+            int ia = Float.floatToRawIntBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %08X, actual = %08X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        float apply(float[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(float[] r, float[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1370,20 +1346,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Float.MAX_VALUE;\n-            case 1:\n-                return Float.MIN_VALUE;\n-            case 2:\n-                return Float.NEGATIVE_INFINITY;\n-            case 3:\n-                return Float.POSITIVE_INFINITY;\n-            case 4:\n-                return Float.NaN;\n-            case 5:\n-                return (float)0.0;\n-            default:\n-                return (float)-0.0;\n-        }\n-    }\n-\n-    static float get(float[] a, int i) {\n-        return (float) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Float.MAX_VALUE;\n+            case 1  -> Float.MIN_VALUE;\n+            case 2  -> Float.NEGATIVE_INFINITY;\n+            case 3  -> Float.POSITIVE_INFINITY;\n+            case 4  -> Float.NaN;\n+            case 5  -> Float.intBitsToFloat(0x7F812345);\n+            case 6  -> (float)0.0;\n+            default -> (float)-0.0;\n+        };\n@@ -2616,2 +2582,2 @@\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void withFloat128VectorTests(IntFunction<float []> fa) {\n+    @Test(dataProvider = \"floatBinaryOpProvider\")\n+    static void withFloat128VectorTests(IntFunction<float []> fa, IntFunction<float []> fb) {\n@@ -2619,0 +2585,1 @@\n+        float[] b = fb.apply(SPECIES.length());\n@@ -2624,1 +2591,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2629,3 +2598,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3521,1 +3488,1 @@\n-        assertArraysEquals(r, a, Float128VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(float[] r, float[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            int ir = Float.floatToRawIntBits(r[i]);\n+            int ia = Float.floatToRawIntBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %08X, actual = %08X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        float apply(float[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(float[] r, float[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1370,20 +1346,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Float.MAX_VALUE;\n-            case 1:\n-                return Float.MIN_VALUE;\n-            case 2:\n-                return Float.NEGATIVE_INFINITY;\n-            case 3:\n-                return Float.POSITIVE_INFINITY;\n-            case 4:\n-                return Float.NaN;\n-            case 5:\n-                return (float)0.0;\n-            default:\n-                return (float)-0.0;\n-        }\n-    }\n-\n-    static float get(float[] a, int i) {\n-        return (float) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Float.MAX_VALUE;\n+            case 1  -> Float.MIN_VALUE;\n+            case 2  -> Float.NEGATIVE_INFINITY;\n+            case 3  -> Float.POSITIVE_INFINITY;\n+            case 4  -> Float.NaN;\n+            case 5  -> Float.intBitsToFloat(0x7F812345);\n+            case 6  -> (float)0.0;\n+            default -> (float)-0.0;\n+        };\n@@ -2616,2 +2582,2 @@\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void withFloat256VectorTests(IntFunction<float []> fa) {\n+    @Test(dataProvider = \"floatBinaryOpProvider\")\n+    static void withFloat256VectorTests(IntFunction<float []> fa, IntFunction<float []> fb) {\n@@ -2619,0 +2585,1 @@\n+        float[] b = fb.apply(SPECIES.length());\n@@ -2624,1 +2591,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2629,3 +2598,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3521,1 +3488,1 @@\n-        assertArraysEquals(r, a, Float256VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(float[] r, float[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            int ir = Float.floatToRawIntBits(r[i]);\n+            int ia = Float.floatToRawIntBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %08X, actual = %08X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        float apply(float[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(float[] r, float[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1370,20 +1346,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Float.MAX_VALUE;\n-            case 1:\n-                return Float.MIN_VALUE;\n-            case 2:\n-                return Float.NEGATIVE_INFINITY;\n-            case 3:\n-                return Float.POSITIVE_INFINITY;\n-            case 4:\n-                return Float.NaN;\n-            case 5:\n-                return (float)0.0;\n-            default:\n-                return (float)-0.0;\n-        }\n-    }\n-\n-    static float get(float[] a, int i) {\n-        return (float) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Float.MAX_VALUE;\n+            case 1  -> Float.MIN_VALUE;\n+            case 2  -> Float.NEGATIVE_INFINITY;\n+            case 3  -> Float.POSITIVE_INFINITY;\n+            case 4  -> Float.NaN;\n+            case 5  -> Float.intBitsToFloat(0x7F812345);\n+            case 6  -> (float)0.0;\n+            default -> (float)-0.0;\n+        };\n@@ -2616,2 +2582,2 @@\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void withFloat512VectorTests(IntFunction<float []> fa) {\n+    @Test(dataProvider = \"floatBinaryOpProvider\")\n+    static void withFloat512VectorTests(IntFunction<float []> fa, IntFunction<float []> fb) {\n@@ -2619,0 +2585,1 @@\n+        float[] b = fb.apply(SPECIES.length());\n@@ -2624,1 +2591,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2629,3 +2598,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3521,1 +3488,1 @@\n-        assertArraysEquals(r, a, Float512VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+    static void assertArraysStrictlyEquals(float[] r, float[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            int ir = Float.floatToRawIntBits(r[i]);\n+            int ia = Float.floatToRawIntBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %08X, actual = %08X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -251,19 +261,0 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -798,15 +789,0 @@\n-    interface FBinArrayOp {\n-        float apply(float[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(float[] r, float[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1370,20 +1346,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Float.MAX_VALUE;\n-            case 1:\n-                return Float.MIN_VALUE;\n-            case 2:\n-                return Float.NEGATIVE_INFINITY;\n-            case 3:\n-                return Float.POSITIVE_INFINITY;\n-            case 4:\n-                return Float.NaN;\n-            case 5:\n-                return (float)0.0;\n-            default:\n-                return (float)-0.0;\n-        }\n-    }\n-\n-    static float get(float[] a, int i) {\n-        return (float) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Float.MAX_VALUE;\n+            case 1  -> Float.MIN_VALUE;\n+            case 2  -> Float.NEGATIVE_INFINITY;\n+            case 3  -> Float.POSITIVE_INFINITY;\n+            case 4  -> Float.NaN;\n+            case 5  -> Float.intBitsToFloat(0x7F812345);\n+            case 6  -> (float)0.0;\n+            default -> (float)-0.0;\n+        };\n@@ -2616,2 +2582,2 @@\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void withFloat64VectorTests(IntFunction<float []> fa) {\n+    @Test(dataProvider = \"floatBinaryOpProvider\")\n+    static void withFloat64VectorTests(IntFunction<float []> fa, IntFunction<float []> fb) {\n@@ -2619,0 +2585,1 @@\n+        float[] b = fb.apply(SPECIES.length());\n@@ -2624,1 +2591,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2629,3 +2598,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3521,1 +3488,1 @@\n-        assertArraysEquals(r, a, Float64VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -79,0 +79,10 @@\n+    static void assertArraysStrictlyEquals(float[] r, float[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            int ir = Float.floatToRawIntBits(r[i]);\n+            int ia = Float.floatToRawIntBits(a[i]);\n+            if (ir != ia) {\n+                Assert.fail(String.format(\"at index #%d, expected = %08X, actual = %08X\", i, ia, ir));\n+            }\n+        }\n+    }\n+\n@@ -256,19 +266,0 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -803,15 +794,0 @@\n-    interface FBinArrayOp {\n-        float apply(float[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(float[] r, float[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1375,20 +1351,10 @@\n-        switch(i % 7) {\n-            case 0:\n-                return Float.MAX_VALUE;\n-            case 1:\n-                return Float.MIN_VALUE;\n-            case 2:\n-                return Float.NEGATIVE_INFINITY;\n-            case 3:\n-                return Float.POSITIVE_INFINITY;\n-            case 4:\n-                return Float.NaN;\n-            case 5:\n-                return (float)0.0;\n-            default:\n-                return (float)-0.0;\n-        }\n-    }\n-\n-    static float get(float[] a, int i) {\n-        return (float) a[i];\n+        return switch(i % 8) {\n+            case 0  -> Float.MAX_VALUE;\n+            case 1  -> Float.MIN_VALUE;\n+            case 2  -> Float.NEGATIVE_INFINITY;\n+            case 3  -> Float.POSITIVE_INFINITY;\n+            case 4  -> Float.NaN;\n+            case 5  -> Float.intBitsToFloat(0x7F812345);\n+            case 6  -> (float)0.0;\n+            default -> (float)-0.0;\n+        };\n@@ -2621,2 +2587,2 @@\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void withFloatMaxVectorTests(IntFunction<float []> fa) {\n+    @Test(dataProvider = \"floatBinaryOpProvider\")\n+    static void withFloatMaxVectorTests(IntFunction<float []> fa, IntFunction<float []> fb) {\n@@ -2624,0 +2590,1 @@\n+        float[] b = fb.apply(SPECIES.length());\n@@ -2629,1 +2596,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -2634,3 +2603,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -3526,1 +3493,1 @@\n-        assertArraysEquals(r, a, FloatMaxVectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":28,"deletions":61,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(int[] r, int[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        int apply(int[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(int[] r, int[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1175,4 +1149,0 @@\n-    static int get(int[] a, int i) {\n-        return (int) a[i];\n-    }\n-\n@@ -3795,2 +3765,2 @@\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void withInt128VectorTests(IntFunction<int []> fa) {\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void withInt128VectorTests(IntFunction<int []> fa, IntFunction<int []> fb) {\n@@ -3798,0 +3768,1 @@\n+        int[] b = fb.apply(SPECIES.length());\n@@ -3803,1 +3774,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3808,3 +3781,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4745,1 +4716,1 @@\n-        assertArraysEquals(r, a, Int128VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(int[] r, int[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        int apply(int[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(int[] r, int[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1175,4 +1149,0 @@\n-    static int get(int[] a, int i) {\n-        return (int) a[i];\n-    }\n-\n@@ -3795,2 +3765,2 @@\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void withInt256VectorTests(IntFunction<int []> fa) {\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void withInt256VectorTests(IntFunction<int []> fa, IntFunction<int []> fb) {\n@@ -3798,0 +3768,1 @@\n+        int[] b = fb.apply(SPECIES.length());\n@@ -3803,1 +3774,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3808,3 +3781,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4745,1 +4716,1 @@\n-        assertArraysEquals(r, a, Int256VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(int[] r, int[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        int apply(int[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(int[] r, int[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1175,4 +1149,0 @@\n-    static int get(int[] a, int i) {\n-        return (int) a[i];\n-    }\n-\n@@ -3795,2 +3765,2 @@\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void withInt512VectorTests(IntFunction<int []> fa) {\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void withInt512VectorTests(IntFunction<int []> fa, IntFunction<int []> fb) {\n@@ -3798,0 +3768,1 @@\n+        int[] b = fb.apply(SPECIES.length());\n@@ -3803,1 +3774,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3808,3 +3781,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4745,1 +4716,1 @@\n-        assertArraysEquals(r, a, Int512VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(int[] r, int[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        int apply(int[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(int[] r, int[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1175,4 +1149,0 @@\n-    static int get(int[] a, int i) {\n-        return (int) a[i];\n-    }\n-\n@@ -3795,2 +3765,2 @@\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void withInt64VectorTests(IntFunction<int []> fa) {\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void withInt64VectorTests(IntFunction<int []> fa, IntFunction<int []> fb) {\n@@ -3798,0 +3768,1 @@\n+        int[] b = fb.apply(SPECIES.length());\n@@ -3803,1 +3774,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3808,3 +3781,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4745,1 +4716,1 @@\n-        assertArraysEquals(r, a, Int64VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -75,0 +75,8 @@\n+    static void assertArraysStrictlyEquals(int[] r, int[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -239,19 +247,0 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -712,15 +701,0 @@\n-    interface FBinArrayOp {\n-        int apply(int[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(int[] r, int[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1180,4 +1154,0 @@\n-    static int get(int[] a, int i) {\n-        return (int) a[i];\n-    }\n-\n@@ -3800,2 +3770,2 @@\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void withIntMaxVectorTests(IntFunction<int []> fa) {\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void withIntMaxVectorTests(IntFunction<int []> fa, IntFunction<int []> fb) {\n@@ -3803,0 +3773,1 @@\n+        int[] b = fb.apply(SPECIES.length());\n@@ -3808,1 +3779,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3813,3 +3786,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4750,1 +4721,1 @@\n-        assertArraysEquals(r, a, IntMaxVectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(long[] r, long[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -191,19 +199,0 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -664,15 +653,0 @@\n-    interface FBinArrayOp {\n-        long apply(long[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(long[] r, long[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1202,4 +1176,0 @@\n-    static long get(long[] a, int i) {\n-        return (long) a[i];\n-    }\n-\n@@ -3817,2 +3787,2 @@\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void withLong128VectorTests(IntFunction<long []> fa) {\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void withLong128VectorTests(IntFunction<long []> fa, IntFunction<long []> fb) {\n@@ -3820,0 +3790,1 @@\n+        long[] b = fb.apply(SPECIES.length());\n@@ -3825,1 +3796,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3830,3 +3803,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4697,1 +4668,1 @@\n-        assertArraysEquals(r, a, Long128VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(long[] r, long[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -191,19 +199,0 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -664,15 +653,0 @@\n-    interface FBinArrayOp {\n-        long apply(long[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(long[] r, long[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1202,4 +1176,0 @@\n-    static long get(long[] a, int i) {\n-        return (long) a[i];\n-    }\n-\n@@ -3817,2 +3787,2 @@\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void withLong256VectorTests(IntFunction<long []> fa) {\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void withLong256VectorTests(IntFunction<long []> fa, IntFunction<long []> fb) {\n@@ -3820,0 +3790,1 @@\n+        long[] b = fb.apply(SPECIES.length());\n@@ -3825,1 +3796,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3830,3 +3803,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4697,1 +4668,1 @@\n-        assertArraysEquals(r, a, Long256VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(long[] r, long[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -191,19 +199,0 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -664,15 +653,0 @@\n-    interface FBinArrayOp {\n-        long apply(long[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(long[] r, long[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1202,4 +1176,0 @@\n-    static long get(long[] a, int i) {\n-        return (long) a[i];\n-    }\n-\n@@ -3817,2 +3787,2 @@\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void withLong512VectorTests(IntFunction<long []> fa) {\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void withLong512VectorTests(IntFunction<long []> fa, IntFunction<long []> fb) {\n@@ -3820,0 +3790,1 @@\n+        long[] b = fb.apply(SPECIES.length());\n@@ -3825,1 +3796,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3830,3 +3803,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4697,1 +4668,1 @@\n-        assertArraysEquals(r, a, Long512VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(long[] r, long[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -191,19 +199,0 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -664,15 +653,0 @@\n-    interface FBinArrayOp {\n-        long apply(long[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(long[] r, long[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1202,4 +1176,0 @@\n-    static long get(long[] a, int i) {\n-        return (long) a[i];\n-    }\n-\n@@ -3817,2 +3787,2 @@\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void withLong64VectorTests(IntFunction<long []> fa) {\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void withLong64VectorTests(IntFunction<long []> fa, IntFunction<long []> fb) {\n@@ -3820,0 +3790,1 @@\n+        long[] b = fb.apply(SPECIES.length());\n@@ -3825,1 +3796,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3830,3 +3803,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4697,1 +4668,1 @@\n-        assertArraysEquals(r, a, Long64VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -75,0 +75,8 @@\n+    static void assertArraysStrictlyEquals(long[] r, long[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -196,19 +204,0 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -669,15 +658,0 @@\n-    interface FBinArrayOp {\n-        long apply(long[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(long[] r, long[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1207,4 +1181,0 @@\n-    static long get(long[] a, int i) {\n-        return (long) a[i];\n-    }\n-\n@@ -3822,2 +3792,2 @@\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void withLongMaxVectorTests(IntFunction<long []> fa) {\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void withLongMaxVectorTests(IntFunction<long []> fa, IntFunction<long []> fb) {\n@@ -3825,0 +3795,1 @@\n+        long[] b = fb.apply(SPECIES.length());\n@@ -3830,1 +3801,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3835,3 +3808,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4702,1 +4673,1 @@\n-        assertArraysEquals(r, a, LongMaxVectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(short[] r, short[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        short apply(short[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(short[] r, short[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1205,4 +1179,0 @@\n-    static short get(short[] a, int i) {\n-        return (short) a[i];\n-    }\n-\n@@ -3742,2 +3712,2 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void withShort128VectorTests(IntFunction<short []> fa) {\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void withShort128VectorTests(IntFunction<short []> fa, IntFunction<short []> fb) {\n@@ -3745,0 +3715,1 @@\n+        short[] b = fb.apply(SPECIES.length());\n@@ -3750,1 +3721,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3755,3 +3728,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4692,1 +4663,1 @@\n-        assertArraysEquals(r, a, Short128VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(short[] r, short[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        short apply(short[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(short[] r, short[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1205,4 +1179,0 @@\n-    static short get(short[] a, int i) {\n-        return (short) a[i];\n-    }\n-\n@@ -3742,2 +3712,2 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void withShort256VectorTests(IntFunction<short []> fa) {\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void withShort256VectorTests(IntFunction<short []> fa, IntFunction<short []> fb) {\n@@ -3745,0 +3715,1 @@\n+        short[] b = fb.apply(SPECIES.length());\n@@ -3750,1 +3721,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3755,3 +3728,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4692,1 +4663,1 @@\n-        assertArraysEquals(r, a, Short256VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(short[] r, short[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        short apply(short[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(short[] r, short[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1205,4 +1179,0 @@\n-    static short get(short[] a, int i) {\n-        return (short) a[i];\n-    }\n-\n@@ -3742,2 +3712,2 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void withShort512VectorTests(IntFunction<short []> fa) {\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void withShort512VectorTests(IntFunction<short []> fa, IntFunction<short []> fb) {\n@@ -3745,0 +3715,1 @@\n+        short[] b = fb.apply(SPECIES.length());\n@@ -3750,1 +3721,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3755,3 +3728,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4692,1 +4663,1 @@\n-        assertArraysEquals(r, a, Short512VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -70,0 +70,8 @@\n+    static void assertArraysStrictlyEquals(short[] r, short[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -234,19 +242,0 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -707,15 +696,0 @@\n-    interface FBinArrayOp {\n-        short apply(short[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(short[] r, short[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1205,4 +1179,0 @@\n-    static short get(short[] a, int i) {\n-        return (short) a[i];\n-    }\n-\n@@ -3742,2 +3712,2 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void withShort64VectorTests(IntFunction<short []> fa) {\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void withShort64VectorTests(IntFunction<short []> fa, IntFunction<short []> fb) {\n@@ -3745,0 +3715,1 @@\n+        short[] b = fb.apply(SPECIES.length());\n@@ -3750,1 +3721,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3755,3 +3728,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4692,1 +4663,1 @@\n-        assertArraysEquals(r, a, Short64VectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -75,0 +75,8 @@\n+    static void assertArraysStrictlyEquals(short[] r, short[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+        }\n+    }\n+\n@@ -239,19 +247,0 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -712,15 +701,0 @@\n-    interface FBinArrayOp {\n-        short apply(short[] a, int b);\n-    }\n-\n-    static void assertArraysEquals(short[] r, short[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1210,4 +1184,0 @@\n-    static short get(short[] a, int i) {\n-        return (short) a[i];\n-    }\n-\n@@ -3747,2 +3717,2 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void withShortMaxVectorTests(IntFunction<short []> fa) {\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void withShortMaxVectorTests(IntFunction<short []> fa, IntFunction<short []> fb) {\n@@ -3750,0 +3720,1 @@\n+        short[] b = fb.apply(SPECIES.length());\n@@ -3755,1 +3726,3 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) & (SPECIES.length() - 1);\n@@ -3760,3 +3733,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n@@ -4697,1 +4668,1 @@\n-        assertArraysEquals(r, a, ShortMaxVectorTests::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+        $type$[] b = fb.apply(SPECIES.length());\n@@ -7,1 +8,3 @@\n-                av.withLane((j++ \\& (SPECIES.length()-1)), ($type$)(65535+i)).intoArray(r, i);\n+                av.withLane(j, b[i + j]).intoArray(r, i);\n+                a[i + j] = b[i + j];\n+                j = (j + 1) \\& (SPECIES.length() - 1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-With-Op.template","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-        assertArraysEquals(r, a, $vectorteststype$::get);\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Get-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-    @Test(dataProvider = \"$type$UnaryOpProvider\")\n-    static void with$vectorteststype$(IntFunction<$type$ []> fa) {\n+    @Test(dataProvider = \"$type$BinaryOpProvider\")\n+    static void with$vectorteststype$(IntFunction<$type$ []> fa, IntFunction<$type$ []> fb) {\n@@ -6,3 +6,1 @@\n-        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n-            assertInsertArraysEquals(r, a, ($type$)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n-        }\n+        assertArraysStrictlyEquals(r, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-With-Op.template","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -108,0 +108,20 @@\n+    static void assertArraysStrictlyEquals($type$[] r, $type$[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+#if[FP]\n+            $bitstype$ ir = $Wideboxtype$.$type$ToRaw$Bitstype$Bits(r[i]);\n+            $bitstype$ ia = $Wideboxtype$.$type$ToRaw$Bitstype$Bits(a[i]);\n+            if (ir != ia) {\n+#if[Float]\n+                Assert.fail(String.format(\"at index #%d, expected = %08X, actual = %08X\", i, ia, ir));\n+#else[Float]\n+                Assert.fail(String.format(\"at index #%d, expected = %016X, actual = %016X\", i, ia, ir));\n+#end[Float]\n+            }\n+#else[FP]\n+            if (r[i] != a[i]) {\n+                Assert.fail(\"at index #\" + i + \", expected = \" + a[i] + \", actual = \" + r[i]);\n+            }\n+#end[FP]\n+        }\n+    }\n+\n@@ -317,19 +337,0 @@\n-    static void assertInsertArraysEquals($type$[] r, $type$[] a, $type$ element, int index, int start, int end) {\n-        int i = start;\n-        try {\n-            for (; i < end; i += 1) {\n-                if(i%SPECIES.length() == index) {\n-                    Assert.assertEquals(r[i], element);\n-                } else {\n-                    Assert.assertEquals(r[i], a[i]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            if (i%SPECIES.length() == index) {\n-                Assert.assertEquals(r[i], element, \"at index #\" + i);\n-            } else {\n-                Assert.assertEquals(r[i], a[i], \"at index #\" + i);\n-            }\n-        }\n-    }\n-\n@@ -866,15 +867,0 @@\n-    interface FBinArrayOp {\n-        $type$ apply($type$[] a, int b);\n-    }\n-\n-    static void assertArraysEquals($type$[] r, $type$[] a, FBinArrayOp f) {\n-        int i = 0;\n-        try {\n-            for (; i < a.length; i++) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(r[i], f.apply(a,i), \"at index #\" + i);\n-        }\n-    }\n-\n@@ -1475,16 +1461,14 @@\n-        switch(i % 7) {\n-            case 0:\n-                return $Wideboxtype$.MAX_VALUE;\n-            case 1:\n-                return $Wideboxtype$.MIN_VALUE;\n-            case 2:\n-                return $Wideboxtype$.NEGATIVE_INFINITY;\n-            case 3:\n-                return $Wideboxtype$.POSITIVE_INFINITY;\n-            case 4:\n-                return $Wideboxtype$.NaN;\n-            case 5:\n-                return ($type$)0.0;\n-            default:\n-                return ($type$)-0.0;\n-        }\n+        return switch(i % 8) {\n+            case 0  -> $Wideboxtype$.MAX_VALUE;\n+            case 1  -> $Wideboxtype$.MIN_VALUE;\n+            case 2  -> $Wideboxtype$.NEGATIVE_INFINITY;\n+            case 3  -> $Wideboxtype$.POSITIVE_INFINITY;\n+            case 4  -> $Wideboxtype$.NaN;\n+#if[Float]\n+            case 5  -> Float.intBitsToFloat(0x7F812345);\n+#else[Float]\n+            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n+#end[Float]\n+            case 6  -> ($type$)0.0;\n+            default -> ($type$)-0.0;\n+        };\n@@ -1507,4 +1491,0 @@\n-    static $type$ get($type$[] a, int i) {\n-        return ($type$) a[i];\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":34,"deletions":54,"binary":false,"changes":88,"status":"modified"}]}