{"files":[{"patch":"@@ -132,1 +132,3 @@\n-  _range = end - _base;\n+  \/\/ Remember the Klass range:\n+  _klass_range_start = addr;\n+  _klass_range_end = addr + len;\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5085,2 +5085,2 @@\n-    const uint64_t range_mask =\n-      (1ULL << log2i(CompressedKlassPointers::range())) - 1;\n+    const size_t range = CompressedKlassPointers::klass_range_end() - CompressedKlassPointers::base();\n+    const uint64_t range_mask = (1ULL << log2i(range)) - 1;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-    bool is_in_encoding_range = CompressedKlassPointers::is_in_encoding_range(k);\n+    bool is_in_encoding_range = CompressedKlassPointers::is_encodable(k);\n","filename":"src\/hotspot\/share\/ci\/ciKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  return CompressedKlassPointers::is_in_encoding_range(klass) &&\n+  return CompressedKlassPointers::is_encodable(klass) &&\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdKlassQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"oops\/compressedKlass.hpp\"\n+#include \"oops\/compressedKlass.inline.hpp\"\n@@ -37,1 +37,2 @@\n-size_t CompressedKlassPointers::_range = 0;\n+address CompressedKlassPointers::_klass_range_start = nullptr;\n+address CompressedKlassPointers::_klass_range_end = nullptr;\n@@ -63,0 +64,4 @@\n+  \/\/ Remember Klass range:\n+  _klass_range_start = addr;\n+  _klass_range_end = addr + len;\n+\n@@ -65,1 +70,0 @@\n-  _range = encoding_range_size;\n@@ -90,0 +94,5 @@\n+\n+  \/\/ Remember the Klass range:\n+  _klass_range_start = addr;\n+  _klass_range_end = addr + len;\n+\n@@ -114,1 +123,0 @@\n-  _range = end - _base;\n@@ -121,3 +129,8 @@\n-  st->print_cr(\"Narrow klass base: \" PTR_FORMAT \", Narrow klass shift: %d, \"\n-               \"Narrow klass range: \" SIZE_FORMAT_X, p2i(base()), shift(),\n-               range());\n+  if (UseCompressedClassPointers) {\n+    st->print_cr(\"Narrow klass base: \" PTR_FORMAT \", Narrow klass shift: %d\",\n+                  p2i(base()), shift());\n+    st->print_cr(\"Encoding Range: \" RANGE2FMT, RANGE2FMTARGS(_base, encoding_range_end()));\n+    st->print_cr(\"Klass Range:    \" RANGE2FMT, RANGE2FMTARGS(_klass_range_start, _klass_range_end));\n+  } else {\n+    st->print_cr(\"UseCompressedClassPointers off\");\n+  }\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -34,0 +34,63 @@\n+\/\/ Narrow Klass Encoding\n+\/\/\n+\/\/ Klass Range:\n+\/\/  a contiguous memory range into which we place Klass that should be encodable. Not every Klass\n+\/\/  needs to be encodable. There is only one such memory range.\n+\/\/  If CDS is disabled, this Klass Range is the same as the metaspace class space. If CDS is enabled, the\n+\/\/  Klass Range contains both CDS and class space adjacent to each other (with a potential small\n+\/\/  unused alignment gap between them).\n+\/\/\n+\/\/ Encoding Range:\n+\/\/  This is the range covered by the current encoding scheme. The encoding scheme is defined by\n+\/\/  the encoding base, encoding shift and (implicitly) the bit size of the narrowKlass. The\n+\/\/  Encoding Range is:\n+\/\/   [ <encoding base> ... <encoding base> + (1 << (<narrowKlass-bitsize> + <shift>) )\n+\/\/\n+\/\/ Note that while the Klass Range must be contained within the Encoding Range, the Encoding Range\n+\/\/ is typically a lot larger than the Klass Range:\n+\/\/  - the encoding base can start before the Klass Range start (specifically, it can start at 0 for\n+\/\/    zero-based encoding)\n+\/\/  - the end of the Encoding Range usually extends far beyond the end of the Klass Range.\n+\/\/\n+\/\/\n+\/\/ Examples:\n+\/\/\n+\/\/ \"unscaled\" (zero-based zero-shift) encoding, CDS off, class space of 1G starts at 0x4B00_0000:\n+\/\/ - Encoding Range: [0             .. 0x1_0000_0000 ) (4 GB)\n+\/\/ - Klass Range:    [0x4B00_0000   .. 0x  8B00_0000 ) (1 GB)\n+\/\/\n+\/\/\n+\/\/ _base        _klass_range_start              _klass_range_end             encoding end\n+\/\/   |                |\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|                             |\n+\/\/   |   ...          |\/\/\/\/\/\/\/1gb class space\/\/\/\/\/\/\/\/|               ...           |\n+\/\/   |                |\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|                             |\n+\/\/  0x0         0x4B00_0000                   0x8B00_0000                    0x1_0000_0000\n+\/\/\n+\/\/\n+\/\/\n+\/\/ \"zero-based\" (but scaled) encoding, shift=3, CDS off, 1G Class space at 0x7_C000_0000 (31GB):\n+\/\/ - Encoding Range: [0             .. 0x8_0000_0000 ) (32 GB)\n+\/\/ - Klass Range:    [0x7_C000_0000 .. 0x8_0000_0000 ) (1 GB)\n+\/\/\n+\/\/                                                                  encoding end\n+\/\/ _base                            _klass_range_start              _klass_range_end\n+\/\/   |                                   |\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|\n+\/\/   |   ...                             |\/\/\/\/\/\/\/1gb class space\/\/\/\/\/\/\/\/|\n+\/\/   |                                   |\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|\n+\/\/  0x0                            0x7_C000_0000                  0x8_0000_0000\n+\/\/\n+\/\/\n+\/\/ CDS enabled, 128MB CDS region starts 0x8_0000_0000, followed by a 1GB class space. Encoding\n+\/\/ base will point to CDS region start, shift=0:\n+\/\/ - Encoding Range: [0x8_0000_0000 .. 0x9_0000_0000 ) (4 GB)\n+\/\/ - Klass Range:    [0x8_0000_0000 .. 0x8_4800_0000 ) (128 MB + 1 GB)\n+\/\/\n+\/\/  _base\n+\/\/ _klass_range_start                   _klass_range_end                        encoding end\n+\/\/   |\/\/\/\/\/\/\/\/\/\/|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|                                         |\n+\/\/   |\/\/\/CDS\/\/\/\/|\/\/\/\/1gb class space\/\/\/\/\/\/\/\/|            ...    ...                   |\n+\/\/   |\/\/\/\/\/\/\/\/\/\/|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|                                         |\n+\/\/   |                                      |                                         |\n+\/\/ 0x8_0000_0000                      0x8_4800_0000                            0x9_0000_0000\n+\/\/\n+\n@@ -53,6 +116,4 @@\n-  \/\/ Together with base, this defines the address range within which Klass\n-  \/\/  structures will be located: [base, base+range). While the maximal\n-  \/\/  possible encoding range is 4|32G for shift 0|3, if we know beforehand\n-  \/\/  the expected range of Klass* pointers will be smaller, a platform\n-  \/\/  could use this info to optimize encoding.\n-  static size_t _range;\n+  \/\/ Start and end of the Klass Range.\n+  \/\/ Note: guaranteed to be aligned to KlassAlignmentInBytes\n+  static address _klass_range_start;\n+  static address _klass_range_end;\n@@ -95,1 +156,0 @@\n-  static size_t   range()              { return  _range; }\n@@ -98,0 +158,5 @@\n+  static address  klass_range_start()  { return  _klass_range_start; }\n+  static address  klass_range_end()    { return  _klass_range_end; }\n+\n+  static inline address encoding_range_end();\n+\n@@ -113,8 +178,3 @@\n-\n-  \/\/ encoding                                                               encoding\n-  \/\/ base                                                                   end (base+range)\n-  \/\/ |-----------------------------------------------------------------------|\n-  \/\/ |----CDS---| |--------------------class space---------------------------|\n-\n-  static inline bool is_in_encoding_range(const void* p) {\n-    return p >= _base && p < (_base + _range);\n+  static inline bool is_encodable(const void* p) {\n+    return (address) p >= _klass_range_start &&\n+           (address) p < _klass_range_end;\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":75,"deletions":15,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -85,0 +85,5 @@\n+inline address CompressedKlassPointers::encoding_range_end() {\n+  const int max_bits = (sizeof(narrowKlass) * BitsPerByte) + _shift; \/\/ narrowKlass are 32 bit\n+  return _base + nth_bit(max_bits);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -387,0 +387,1 @@\n+\/\/ Printing a range, with start and bytes given\n@@ -390,0 +391,4 @@\n+\/\/ Printing a range, with start and end given\n+#define RANGE2FMT             \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (\" SIZE_FORMAT \" bytes)\"\n+#define RANGE2FMTARGS(p1, p2) p2i(p1), p2i(p2), ((uintptr_t)p2 - (uintptr_t)p1)\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"oops\/compressedKlass.inline.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+#include \"unittest.hpp\"\n+\n+TEST_VM(CompressedKlass, basics) {\n+  if (!UseCompressedClassPointers) {\n+    return;\n+  }\n+  ASSERT_LE((address)0, CompressedKlassPointers::base());\n+  ASSERT_LE(CompressedKlassPointers::base(), CompressedKlassPointers::klass_range_start());\n+  ASSERT_LT(CompressedKlassPointers::klass_range_start(), CompressedKlassPointers::klass_range_end());\n+  ASSERT_LE(CompressedKlassPointers::klass_range_end(), CompressedKlassPointers::encoding_range_end());\n+  switch (CompressedKlassPointers::shift()) {\n+  case 0:\n+    ASSERT_EQ(CompressedKlassPointers::encoding_range_end() - CompressedKlassPointers::base(), (ptrdiff_t)(4 * G));\n+    break;\n+  case 3:\n+    ASSERT_EQ(CompressedKlassPointers::encoding_range_end() - CompressedKlassPointers::base(), (ptrdiff_t)(32 * G));\n+    break;\n+  default:\n+    ShouldNotReachHere();\n+  }\n+}\n+\n+TEST_VM(CompressedKlass, test_too_low_address) {\n+  if (!UseCompressedClassPointers) {\n+    return;\n+  }\n+  address really_low = (address) 32;\n+  ASSERT_FALSE(CompressedKlassPointers::is_encodable(really_low));\n+  address low = CompressedKlassPointers::klass_range_start() - 1;\n+  ASSERT_FALSE(CompressedKlassPointers::is_encodable(low));\n+}\n+\n+TEST_VM(CompressedKlass, test_too_high_address) {\n+  if (!UseCompressedClassPointers) {\n+    return;\n+  }\n+  address really_high = (address) UINTPTR_MAX;\n+  ASSERT_FALSE(CompressedKlassPointers::is_encodable(really_high));\n+  address high = CompressedKlassPointers::klass_range_end();\n+  ASSERT_FALSE(CompressedKlassPointers::is_encodable(high));\n+}\n+\n+TEST_VM(CompressedKlass, test_good_address) {\n+  if (!UseCompressedClassPointers) {\n+    return;\n+  }\n+  address addr = CompressedKlassPointers::klass_range_start();\n+  ASSERT_TRUE(CompressedKlassPointers::is_encodable(addr));\n+  addr = CompressedKlassPointers::klass_range_end() - 1;\n+  ASSERT_TRUE(CompressedKlassPointers::is_encodable(addr));\n+}\n","filename":"test\/hotspot\/gtest\/oops\/test_compressedKlass.cpp","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * This runs the \"compressedKlass\" class of gtests.\n+ * Note: we try to trigger bugs by enforcing the JVM to use zero-based mode. To increase the chance of zero-based\n+ * mode, we start with CDS disabled, a small class space and a large (albeit uncommitted, to save memory) heap. The\n+ * JVM will likely place the class space in low-address territory.\n+ * (If it does not manage to do this, the test will still succeed, but it won't alert us on regressions)\n+ *\/\n+\n+\/* @test id=use-zero-based-encoding\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @run main\/native GTestWrapper --gtest_filter=CompressedKlass* -Xlog:metaspace* -Xmx6g -Xms128m -Xshare:off -XX:CompressedClassSpaceSize=128m\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gtest\/CompressedKlassGtest.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}