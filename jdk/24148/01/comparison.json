{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,3 @@\n+    private static volatile boolean isOpaque;\n+    private static volatile Color c1 = null;\n+    private static volatile Color c2 = null;\n@@ -58,1 +61,0 @@\n-            setLookAndFeel(laf);\n@@ -61,1 +63,4 @@\n-                SwingUtilities.invokeAndWait(TestJTabbedPaneBackgroundColor::createAndShowUI);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    setLookAndFeel(laf);\n+                    createAndShowUI();\n+                });\n@@ -73,4 +78,6 @@\n-                if (!pane.isOpaque()) {\n-                    pane.setOpaque(true);\n-                    pane.repaint();\n-                }\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (!pane.isOpaque()) {\n+                        pane.setOpaque(true);\n+                        pane.repaint();\n+                    }\n+                });\n@@ -122,2 +129,6 @@\n-    private static void doTesting(Point p, UIManager.LookAndFeelInfo laf) {\n-        boolean isOpaque = pane.isOpaque();\n+    private static void doTesting(Point p, UIManager.LookAndFeelInfo laf) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            isOpaque = pane.isOpaque();\n+            c1 = pane.getBackground();\n+            c2 = frame.getContentPane().getBackground();\n+        });\n@@ -125,3 +136,1 @@\n-        Color expected = isOpaque\n-                ? pane.getBackground()\n-                : frame.getContentPane().getBackground();\n+        Color expected = isOpaque ? c1 : c2;\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestJTabbedPaneBackgroundColor.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"}]}