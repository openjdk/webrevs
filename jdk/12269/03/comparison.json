{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import java.util.stream.Stream;\n@@ -1213,0 +1214,18 @@\n+    \/**\n+     * Returns a stream of all installed locales.\n+     * The returned stream represents the union of locales supported\n+     * by the Java runtime environment and by installed\n+     * {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider}\n+     * implementations. At a minimum, the returned stream must contain a\n+     * {@code Locale} instance equal to {@link Locale#ROOT Locale.ROOT} and\n+     * a {@code Locale} instance equal to {@link Locale#US Locale.US}.\n+     *\n+     * @implNote Unlike {@code getAvailableLocales()}, this method does\n+     * not create a defensive copy of the Locale array.\n+     * @return A stream of installed locales.\n+     * @since 21\n+     *\/\n+    public static Stream<Locale> availableLocales() {\n+        return LocaleServiceProviderPool.streamAllAvailableLocales();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.stream.Stream;\n@@ -141,1 +142,0 @@\n-\n@@ -150,0 +150,11 @@\n+    \/**\n+     * Returns a stream of the available locales for all the provider classes.\n+     * This stream is constructed from all the locales\n+     * that are provided by each provider, including the JRE.\n+     *\n+     * @return a stream of the available locales for all provider classes\n+     *\/\n+    public static Stream<Locale> streamAllAvailableLocales() {\n+        return Arrays.stream(AllAvailableLocales.allAvailableLocales);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleServiceProviderPool.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @summary Test the implementation\n+ * of Locale.availableLocales()\n+ * @bug 8282319\n+ * @run junit StreamAvailableLocales\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+import org.junit.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public class StreamAvailableLocales {\n+\n+    \/**\n+     * Test to validate that the methods: Locale.getAvailableLocales()\n+     * and Locale.availableLocales() contain the same underlying elements\n+     *\/\n+    @Test\n+    public void testStreamEqualsArray() {\n+        Locale[] arrayLocales = Locale.getAvailableLocales();\n+        Stream<Locale> streamedLocales = Locale.availableLocales();\n+        Locale[] convertedLocales = streamedLocales.toArray(Locale[]::new);\n+        if (Arrays.equals(arrayLocales, convertedLocales)) {\n+            System.out.println(\"$$$ Passed: The underlying elements\" +\n+                    \" of getAvailableLocales() and availableLocales() are the same!\");\n+        } else {\n+            throw new RuntimeException(\"$$$ Error: The underlying elements\" +\n+                    \" of getAvailableLocales() and availableLocales()\" +\n+                    \" are not the same.\");\n+        }\n+    }\n+\n+    \/**\n+     * Test to validate that the stream has the required\n+     * Locale.ROOT and Locale.US.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"requiredLocaleProvider\")\n+    public void testStreamRequirements(Locale requiredLocale, String localeName) {\n+        if (Locale.availableLocales().anyMatch(loc -> (loc.equals(requiredLocale)))) {\n+            System.out.printf(\"$$$ Passed: Stream has %s!%n\", localeName);\n+        } else {\n+            throw new RuntimeException(String.format(\"$$$ Error:\" +\n+                    \" Stream is missing %s!\", localeName));\n+        }\n+    }\n+\n+    \/\/ Data provider for testStreamRequirements\n+    private static Stream<Arguments> requiredLocaleProvider() {\n+        return Stream.of(\n+                Arguments.of(Locale.ROOT, \"Root locale\"),\n+                Arguments.of(Locale.US, \"US locale\")\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/StreamAvailableLocales.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}