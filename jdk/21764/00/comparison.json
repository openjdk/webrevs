{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.internal.foreign.HeapMemorySegmentImpl;\n@@ -783,0 +784,17 @@\n+    \/**\n+     * {@return the scale factor for this Buffer}\n+     * <p>\n+     * The scale factor is:\n+     *   ByteBuffer:               0\n+     *   ShortBuffer, CharBuffer:  1\n+     *   IntBuffer, FloatBuffer:   2\n+     *   LongBuffer, DoubleBuffer: 3\n+     *\/\n+    abstract int scaleFactor();\n+\n+    abstract AbstractMemorySegmentImpl arrayBackedSegment(Object base,\n+                                                          long offset,\n+                                                          long length,\n+                                                          boolean readOnly,\n+                                                          MemorySessionImpl bufferScope);\n+\n@@ -909,0 +927,15 @@\n+\n+                @Override\n+                public int scaleFactor(Buffer buffer) {\n+                    return buffer.scaleFactor();\n+                }\n+\n+                @Override\n+                public AbstractMemorySegmentImpl arrayBackedSegment(Buffer buffer,\n+                                                                    Object base,\n+                                                                    long offset,\n+                                                                    long length,\n+                                                                    boolean readOnly,\n+                                                                    MemorySessionImpl bufferScope) {\n+                    return buffer.arrayBackedSegment(base, offset, length, readOnly, bufferScope);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,3 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n+import jdk.internal.foreign.SegmentFactories;\n@@ -249,0 +252,8 @@\n+    @Override\n+    AbstractMemorySegmentImpl arrayBackedSegment(Object base,\n+                                                 long offset,\n+                                                 long length,\n+                                                 boolean readOnly,\n+                                                 MemorySessionImpl bufferScope) {\n+        return SegmentFactories.arrayOfByteSegment(base, offset, length, readOnly, bufferScope);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/ByteBufferAs-X-Buffer.java.template","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -35,0 +36,1 @@\n+import jdk.internal.foreign.SegmentFactories;\n@@ -531,0 +533,15 @@\n+#if[byte]\n+    @Override\n+    int scaleFactor() {\n+        return 0;\n+    }\n+\n+    @Override\n+    AbstractMemorySegmentImpl arrayBackedSegment(Object base,\n+                                                 long offset,\n+                                                 long length,\n+                                                 boolean readOnly,\n+                                                 MemorySessionImpl bufferScope) {\n+        return SegmentFactories.arrayOf$Type$Segment(base, offset, length, readOnly, bufferScope);\n+    }\n+#end[byte]\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n+import jdk.internal.foreign.SegmentFactories;\n@@ -738,0 +741,15 @@\n+#if[byte]\n+    @Override\n+    int scaleFactor() {\n+        return 0;\n+    }\n+\n+    @Override\n+    AbstractMemorySegmentImpl arrayBackedSegment(Object base,\n+                                                 long offset,\n+                                                 long length,\n+                                                 boolean readOnly,\n+                                                 MemorySessionImpl bufferScope) {\n+        return SegmentFactories.arrayOf$Type$Segment(base, offset, length, readOnly, bufferScope);\n+    }\n+#end[byte]\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,3 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n+import jdk.internal.foreign.SegmentFactories;\n@@ -2324,0 +2327,34 @@\n+    @Override\n+    int scaleFactor() {\n+#if[byte]\n+        return 0;\n+#end[byte]\n+#if[short]\n+        return 1;\n+#end[short]\n+#if[char]\n+        return 1;\n+#end[char]\n+#if[int]\n+        return 2;\n+#end[int]\n+#if[float]\n+        return 2;\n+#end[float]\n+#if[long]\n+        return 3;\n+#end[long]\n+#if[double]\n+        return 3;\n+#end[double]\n+    }\n+\n+    @Override\n+    AbstractMemorySegmentImpl arrayBackedSegment(Object base,\n+                                                 long offset,\n+                                                 long length,\n+                                                 boolean readOnly,\n+                                                 MemorySessionImpl bufferScope) {\n+        return SegmentFactories.arrayOf$Type$Segment(base, offset, length, readOnly, bufferScope);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -130,0 +132,10 @@\n+\n+    int scaleFactor(Buffer buffer);\n+\n+    AbstractMemorySegmentImpl arrayBackedSegment(Buffer buffer,\n+                                                 Object base,\n+                                                 long offset,\n+                                                 long length,\n+                                                 boolean readOnly,\n+                                                 MemorySessionImpl bufferScope);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,6 +33,0 @@\n-import java.nio.CharBuffer;\n-import java.nio.DoubleBuffer;\n-import java.nio.FloatBuffer;\n-import java.nio.IntBuffer;\n-import java.nio.LongBuffer;\n-import java.nio.ShortBuffer;\n@@ -54,1 +48,0 @@\n-import jdk.internal.util.Architecture;\n@@ -60,2 +53,0 @@\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n-\n@@ -524,4 +515,28 @@\n-    public static AbstractMemorySegmentImpl ofBuffer(Buffer bb) {\n-        Objects.requireNonNull(bb);\n-        Object base = NIO_ACCESS.getBufferBase(bb);\n-        if (!bb.isDirect() && base == null) {\n+    @ForceInline\n+    public static AbstractMemorySegmentImpl ofBuffer(Buffer b) {\n+        final int scaleFactor = NIO_ACCESS.scaleFactor(b);\n+        return ofBuffer(b, offset(b, scaleFactor), length(b, scaleFactor));\n+    }\n+\n+    @ForceInline\n+    private static AbstractMemorySegmentImpl ofBuffer(Buffer b, long offset, long length) {\n+        final Object base = NIO_ACCESS.getBufferBase(b);\n+        return (base == null)\n+                ? arrayFreeSegment(b, offset, length)\n+                : NIO_ACCESS.arrayBackedSegment(b, base, offset, length, b.isReadOnly(), bufferScope(b));\n+    }\n+\n+    @ForceInline\n+    private static long offset(Buffer b, int scaleFactor) {\n+        final long bbAddress = NIO_ACCESS.getBufferAddress(b);\n+        return bbAddress + (((long) b.position()) << scaleFactor);\n+    }\n+\n+    @ForceInline\n+    private static long length(Buffer b, int scaleFactor) {\n+        return ((long) b.limit() - b.position()) << scaleFactor;\n+    }\n+\n+    @ForceInline\n+    private static AbstractMemorySegmentImpl arrayFreeSegment(Buffer b, long offset, long length) {\n+        if (!b.isDirect()) {\n@@ -530,34 +545,4 @@\n-        long bbAddress = NIO_ACCESS.getBufferAddress(bb);\n-        UnmapperProxy unmapper = NIO_ACCESS.unmapper(bb);\n-\n-        int pos = bb.position();\n-        int limit = bb.limit();\n-        int size = limit - pos;\n-\n-        AbstractMemorySegmentImpl bufferSegment = (AbstractMemorySegmentImpl) NIO_ACCESS.bufferSegment(bb);\n-        boolean readOnly = bb.isReadOnly();\n-        int scaleFactor = getScaleFactor(bb);\n-        final MemorySessionImpl bufferScope;\n-        if (bufferSegment != null) {\n-            bufferScope = bufferSegment.scope;\n-        } else {\n-            bufferScope = MemorySessionImpl.createHeap(bufferRef(bb));\n-        }\n-        long off = bbAddress + ((long)pos << scaleFactor);\n-        long len = (long)size << scaleFactor;\n-        if (base != null) {\n-            return switch (base) {\n-                case byte[]   _ -> new HeapMemorySegmentImpl.OfByte(off, base, len, readOnly, bufferScope);\n-                case short[]  _ -> new HeapMemorySegmentImpl.OfShort(off, base, len, readOnly, bufferScope);\n-                case char[]   _ -> new HeapMemorySegmentImpl.OfChar(off, base, len, readOnly, bufferScope);\n-                case int[]    _ -> new HeapMemorySegmentImpl.OfInt(off, base, len, readOnly, bufferScope);\n-                case float[]  _ -> new HeapMemorySegmentImpl.OfFloat(off, base, len, readOnly, bufferScope);\n-                case long[]   _ -> new HeapMemorySegmentImpl.OfLong(off, base, len, readOnly, bufferScope);\n-                case double[] _ -> new HeapMemorySegmentImpl.OfDouble(off, base, len, readOnly, bufferScope);\n-                default         -> throw new AssertionError(\"Cannot get here\");\n-            };\n-        } else if (unmapper == null) {\n-            return new NativeMemorySegmentImpl(off, len, readOnly, bufferScope);\n-        } else {\n-            return new MappedMemorySegmentImpl(off, unmapper, len, readOnly, bufferScope);\n-        }\n+        final UnmapperProxy unmapper = NIO_ACCESS.unmapper(b);\n+        return unmapper == null\n+                ? new NativeMemorySegmentImpl(offset, length, b.isReadOnly(), bufferScope(b))\n+                : new MappedMemorySegmentImpl(offset, unmapper, length, b.isReadOnly(), bufferScope(b));\n@@ -566,0 +551,10 @@\n+    @ForceInline\n+    private static MemorySessionImpl bufferScope(Buffer b) {\n+        final AbstractMemorySegmentImpl bufferSegment =\n+                (AbstractMemorySegmentImpl) NIO_ACCESS.bufferSegment(b);\n+        return bufferSegment == null\n+                ? MemorySessionImpl.createHeap(bufferRef(b))\n+                : bufferSegment.scope;\n+    }\n+\n+    @ForceInline\n@@ -663,9 +658,0 @@\n-    private static int getScaleFactor(Buffer buffer) {\n-        return switch (buffer) {\n-            case ByteBuffer   _                 -> 0;\n-            case CharBuffer   _, ShortBuffer  _ -> 1;\n-            case IntBuffer    _, FloatBuffer  _ -> 2;\n-            case LongBuffer   _, DoubleBuffer _ -> 3;\n-        };\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":42,"deletions":56,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-abstract sealed class HeapMemorySegmentImpl extends AbstractMemorySegmentImpl {\n+public abstract sealed class HeapMemorySegmentImpl extends AbstractMemorySegmentImpl {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,0 +143,58 @@\n+    \/\/ Buffer conversion factories\n+\n+    public static AbstractMemorySegmentImpl arrayOfByteSegment(Object base,\n+                                                               long offset,\n+                                                               long length,\n+                                                               boolean readOnly,\n+                                                               MemorySessionImpl bufferScope) {\n+        return new HeapMemorySegmentImpl.OfByte(offset, base, length, readOnly, bufferScope);\n+    }\n+\n+    public static AbstractMemorySegmentImpl arrayOfShortSegment(Object base,\n+                                                                long offset,\n+                                                                long length,\n+                                                                boolean readOnly,\n+                                                                MemorySessionImpl bufferScope) {\n+        return new HeapMemorySegmentImpl.OfShort(offset, base, length, readOnly, bufferScope);\n+    }\n+\n+    public static AbstractMemorySegmentImpl arrayOfCharSegment(Object base,\n+                                                               long offset,\n+                                                               long length,\n+                                                               boolean readOnly,\n+                                                               MemorySessionImpl bufferScope) {\n+        return new HeapMemorySegmentImpl.OfChar(offset, base, length, readOnly, bufferScope);\n+    }\n+\n+    public static AbstractMemorySegmentImpl arrayOfIntSegment(Object base,\n+                                                              long offset,\n+                                                              long length,\n+                                                              boolean readOnly,\n+                                                              MemorySessionImpl bufferScope) {\n+        return new HeapMemorySegmentImpl.OfInt(offset, base, length, readOnly, bufferScope);\n+    }\n+\n+    public static AbstractMemorySegmentImpl arrayOfFloatSegment(Object base,\n+                                                                long offset,\n+                                                                long length,\n+                                                                boolean readOnly,\n+                                                                MemorySessionImpl bufferScope) {\n+        return new HeapMemorySegmentImpl.OfFloat(offset, base, length, readOnly, bufferScope);\n+    }\n+\n+    public static AbstractMemorySegmentImpl arrayOfLongSegment(Object base,\n+                                                               long offset,\n+                                                               long length,\n+                                                               boolean readOnly,\n+                                                               MemorySessionImpl bufferScope) {\n+        return new HeapMemorySegmentImpl.OfLong(offset, base, length, readOnly, bufferScope);\n+    }\n+\n+    public static AbstractMemorySegmentImpl arrayOfDoubleSegment(Object base,\n+                                                                 long offset,\n+                                                                 long length,\n+                                                                 boolean readOnly,\n+                                                                 MemorySessionImpl bufferScope) {\n+        return new HeapMemorySegmentImpl.OfDouble(offset, base, length, readOnly, bufferScope);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"}]}