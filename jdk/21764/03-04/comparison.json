{"files":[{"patch":"@@ -782,1 +782,1 @@\n-     * {@return the scale factor for this Buffer}\n+     * {@return the scale shifts for this Buffer}\n@@ -784,1 +784,1 @@\n-     * The scale factor is:\n+     * The scale shifts are:\n@@ -790,1 +790,1 @@\n-    abstract int scaleFactor();\n+    abstract int scaleShifts();\n@@ -928,2 +928,2 @@\n-                public int scaleFactor(Buffer buffer) {\n-                    return buffer.scaleFactor();\n+                public int scaleShifts(Buffer buffer) {\n+                    return buffer.scaleShifts();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-    int scaleFactor() {\n+    int scaleShifts() {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/ByteBufferAs-X-Buffer.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -537,1 +537,1 @@\n-    int scaleFactor() {\n+    int scaleShifts() {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-    int scaleFactor() {\n+    int scaleShifts() {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2330,1 +2330,1 @@\n-    int scaleFactor() {\n+    int scaleShifts() {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.io.FileDescriptor;\n@@ -133,1 +132,1 @@\n-    int scaleFactor(Buffer buffer);\n+    int scaleShifts(Buffer buffer);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -517,3 +517,3 @@\n-        \/\/ Implicit null check via NIO_ACCESS.scaleFactor(b)\n-        final int scaleFactor = NIO_ACCESS.scaleFactor(b);\n-        return ofBuffer(b, offset(b, scaleFactor), length(b, scaleFactor));\n+        \/\/ Implicit null check via NIO_ACCESS.scaleShifts(b)\n+        final int scaleShifts = NIO_ACCESS.scaleShifts(b);\n+        return ofBuffer(b, offset(b, scaleShifts), length(b, scaleShifts));\n@@ -531,1 +531,1 @@\n-    private static long offset(Buffer b, int scaleFactor) {\n+    private static long offset(Buffer b, int scaleShifts) {\n@@ -533,1 +533,1 @@\n-        return bbAddress + (((long) b.position()) << scaleFactor);\n+        return bbAddress + (((long) b.position()) << scaleShifts);\n@@ -537,2 +537,2 @@\n-    private static long length(Buffer b, int scaleFactor) {\n-        return ((long) b.limit() - b.position()) << scaleFactor;\n+    private static long length(Buffer b, int scaleShifts) {\n+        return ((long) b.limit() - b.position()) << scaleShifts;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}