{"files":[{"patch":"@@ -366,1 +366,1 @@\n-      __ unlock_object(x15, x14, x10, *stub->entry());\n+      __ unlock_object(x15, x14, x10, x16, *stub->entry());\n@@ -1515,0 +1515,1 @@\n+  Register temp = op->scratch_opr()->as_register();\n@@ -1524,1 +1525,1 @@\n-    int null_check_offset = __ lock_object(hdr, obj, lock, *op->stub()->entry());\n+    int null_check_offset = __ lock_object(hdr, obj, lock, temp, *op->stub()->entry());\n@@ -1530,1 +1531,1 @@\n-    __ unlock_object(hdr, obj, lock, *op->stub()->entry());\n+    __ unlock_object(hdr, obj, lock, temp, *op->stub()->entry());\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -277,0 +277,1 @@\n+  LIR_Opr scratch = new_register(T_INT);\n@@ -285,1 +286,1 @@\n-  monitor_enter(obj.result(), lock, syncTempOpr(), LIR_OprFact::illegalOpr,\n+  monitor_enter(obj.result(), lock, syncTempOpr(), scratch,\n@@ -297,0 +298,1 @@\n+  LIR_Opr scratch = new_register(T_INT);\n@@ -298,1 +300,1 @@\n-  monitor_exit(obj_temp, lock, syncTempOpr(), LIR_OprFact::illegalOpr, x->monitor_no());\n+  monitor_exit(obj_temp, lock, syncTempOpr(), scratch, x->monitor_no());\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register disp_hdr, Label& slow_case) {\n+int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register disp_hdr, Register temp, Label& slow_case) {\n@@ -55,1 +55,1 @@\n-  assert_different_registers(hdr, obj, disp_hdr);\n+  assert_different_registers(hdr, obj, disp_hdr, temp, t1);\n@@ -68,2 +68,2 @@\n-    test_bit(t0, hdr, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n-    bnez(t0, slow_case, true \/* is_far *\/);\n+    test_bit(temp, hdr, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    bnez(temp, slow_case, true \/* is_far *\/);\n@@ -76,1 +76,1 @@\n-    lightweight_lock(obj, hdr, t0, t1, slow_case);\n+    lightweight_lock(obj, hdr, temp, t1, slow_case);\n@@ -86,2 +86,2 @@\n-    la(t1, Address(obj, hdr_offset));\n-    cmpxchgptr(hdr, disp_hdr, t1, t0, done, \/*fallthough*\/nullptr);\n+    la(temp, Address(obj, hdr_offset));\n+    cmpxchgptr(hdr, disp_hdr, temp, t1, done, \/*fallthough*\/nullptr);\n@@ -103,2 +103,2 @@\n-    mv(t0, aligned_mask - (int)os::vm_page_size());\n-    andr(hdr, hdr, t0);\n+    mv(temp, aligned_mask - (int)os::vm_page_size());\n+    andr(hdr, hdr, temp);\n@@ -118,1 +118,1 @@\n-void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register disp_hdr, Label& slow_case) {\n+void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register disp_hdr, Register temp, Label& slow_case) {\n@@ -121,1 +121,1 @@\n-  assert(hdr != obj && hdr != disp_hdr && obj != disp_hdr, \"registers must be different\");\n+  assert_different_registers(hdr, obj, disp_hdr, temp, t1);\n@@ -138,3 +138,3 @@\n-    test_bit(t0, hdr, exact_log2(markWord::monitor_value));\n-    bnez(t0, slow_case, \/* is_far *\/ true);\n-    lightweight_unlock(obj, hdr, t0, t1, slow_case);\n+    test_bit(temp, hdr, exact_log2(markWord::monitor_value));\n+    bnez(temp, slow_case, \/* is_far *\/ true);\n+    lightweight_unlock(obj, hdr, temp, t1, slow_case);\n@@ -148,2 +148,2 @@\n-      la(t0, Address(obj, hdr_offset));\n-      cmpxchgptr(disp_hdr, hdr, t0, t1, done, &slow_case);\n+      la(temp, Address(obj, hdr_offset));\n+      cmpxchgptr(disp_hdr, hdr, temp, t1, done, &slow_case);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+  \/\/ temp : temporary register, must not be scratch register t0 or t1\n@@ -63,1 +64,1 @@\n-  int lock_object  (Register swap, Register obj, Register disp_hdr, Label& slow_case);\n+  int lock_object(Register swap, Register obj, Register disp_hdr, Register temp, Label& slow_case);\n@@ -69,1 +70,2 @@\n-  void unlock_object(Register swap, Register obj, Register lock, Label& slow_case);\n+  \/\/ temp : temporary register, must not be scratch register t0 or t1\n+  void unlock_object(Register swap, Register obj, Register lock, Register temp, Label& slow_case);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-void C2_MacroAssembler::fast_lock(Register objectReg, Register boxReg, Register tmp1Reg,\n-                                  Register tmp2Reg) {\n+void C2_MacroAssembler::fast_lock(Register objectReg, Register boxReg,\n+                                  Register tmp1Reg, Register tmp2Reg, Register tmp3Reg) {\n@@ -112,1 +112,1 @@\n-    lightweight_lock(oop, disp_hdr, tmp, t0, slow);\n+    lightweight_lock(oop, disp_hdr, tmp, tmp3Reg, slow);\n@@ -160,2 +160,2 @@\n-void C2_MacroAssembler::fast_unlock(Register objectReg, Register boxReg, Register tmp1Reg,\n-                                    Register tmp2Reg) {\n+void C2_MacroAssembler::fast_unlock(Register objectReg, Register boxReg,\n+                                    Register tmp1Reg, Register tmp2Reg) {\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  void fast_lock(Register object, Register box, Register tmp1, Register tmp2);\n+  void fast_lock(Register object, Register box, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -730,1 +730,1 @@\n-\/\/      c_rarg0, c_rarg1, c_rarg2, c_rarg3, .. (param regs)\n+\/\/      c_rarg0, c_rarg1, c_rarg2, c_rarg3, c_rarg4, c_rarg5, .. (param regs)\n@@ -745,0 +745,2 @@\n+    const Register tmp2 = c_rarg4;\n+    const Register tmp3 = c_rarg5;\n@@ -765,1 +767,1 @@\n-      lightweight_lock(obj_reg, tmp, t0, t1, slow_case);\n+      lightweight_lock(obj_reg, tmp, tmp2, tmp3, slow_case);\n@@ -829,1 +831,1 @@\n-\/\/      c_rarg0, c_rarg1, c_rarg2, c_rarg3, ... (param regs)\n+\/\/      c_rarg0, c_rarg1, c_rarg2, c_rarg3, c_rarg4, ... (param regs)\n@@ -843,0 +845,1 @@\n+    const Register tmp_reg    = c_rarg4;  \/\/ Temporary used by lightweight_unlock\n@@ -878,1 +881,1 @@\n-      lightweight_unlock(obj_reg, header_reg, swap_reg, t0, slow_case);\n+      lightweight_unlock(obj_reg, header_reg, swap_reg, tmp_reg, slow_case);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -10404,1 +10404,1 @@\n-instruct cmpFastLock(rFlagsReg cr, iRegP object, iRegP box, iRegPNoSp tmp1, iRegPNoSp tmp2)\n+instruct cmpFastLock(rFlagsReg cr, iRegP object, iRegP box, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegPNoSp tmp3)\n@@ -10407,1 +10407,1 @@\n-  effect(TEMP tmp1, TEMP tmp2);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -10410,1 +10410,1 @@\n-  format %{ \"fastlock $object,$box\\t! kills $tmp1,$tmp2, #@cmpFastLock\" %}\n+  format %{ \"fastlock $object,$box\\t! kills $tmp1,$tmp2,$tmp3, #@cmpFastLock\" %}\n@@ -10413,1 +10413,1 @@\n-    __ fast_lock($object$$Register, $box$$Register, $tmp1$$Register, $tmp2$$Register);\n+    __ fast_lock($object$$Register, $box$$Register, $tmp1$$Register, $tmp2$$Register, $tmp3$$Register);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1653,0 +1653,1 @@\n+  const Register lock_tmp = x31;  \/\/ Temporary used by lightweight_lock\/unlock\n@@ -1704,1 +1705,1 @@\n-      __ lightweight_lock(obj_reg, swap_reg, tmp, t0, slow_path_lock);\n+      __ lightweight_lock(obj_reg, swap_reg, tmp, lock_tmp, slow_path_lock);\n@@ -1832,1 +1833,1 @@\n-      __ lightweight_unlock(obj_reg, old_hdr, swap_reg, t0, slow_path_unlock);\n+      __ lightweight_unlock(obj_reg, old_hdr, swap_reg, lock_tmp, slow_path_unlock);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}