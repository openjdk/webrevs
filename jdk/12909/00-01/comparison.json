{"files":[{"patch":"@@ -26,0 +26,2 @@\n+import java.util.function.BiConsumer;\n+\n@@ -44,1 +46,2 @@\n-        byte[][] dst = new byte[maxSize + 1][maxSize];\n+        int length;\n+        byte[][] dst;\n@@ -52,10 +55,11 @@\n-        int length = 8;\n-        testB64(dst, src1, src2);\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                byte expected;\n-                if (offset < length) {\n-                    expected = (byte)offset;\n-                } else {\n-                    expected = (byte)(offset + diff - length);\n+        BiConsumer<byte[][], Integer> verifier = (byte[][] tgt, Integer len) -> {\n+            for (int i = 0; i <= len; i++) {\n+                for (int j = 0; j < len; j++) {\n+                    int offset = i + j;\n+                    byte expected;\n+                    if (offset < len) {\n+                        expected = (byte)offset;\n+                    } else {\n+                        expected = (byte)(offset + diff - len);\n+                    }\n+                    Asserts.assertEquals(expected, tgt[i][j]);\n@@ -63,1 +67,0 @@\n-                Asserts.assertEquals(expected, dst[i][j]);\n@@ -65,1 +68,6 @@\n-        }\n+        };\n+\n+        length = 8;\n+        dst = new byte[length + 1][length];\n+        testB64(dst, src1, src2);\n+        verifier.accept(dst, length);\n@@ -68,0 +76,1 @@\n+        dst = new byte[length + 1][length];\n@@ -69,12 +78,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                byte expected;\n-                if (offset < length) {\n-                    expected = (byte)offset;\n-                } else {\n-                    expected = (byte)(offset + diff - length);\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -83,0 +81,1 @@\n+        dst = new byte[length + 1][length];\n@@ -84,12 +83,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                byte expected;\n-                if (offset < length) {\n-                    expected = (byte)offset;\n-                } else {\n-                    expected = (byte)(offset + diff - length);\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -98,0 +86,1 @@\n+        dst = new byte[length + 1][length];\n@@ -99,12 +88,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                byte expected;\n-                if (offset < length) {\n-                    expected = (byte)offset;\n-                } else {\n-                    expected = (byte)(offset + diff - length);\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -116,2 +94,3 @@\n-        int diff = 1234;\n-        short[][] dst = new short[maxSize + 1][maxSize];\n+        int diff = 70;\n+        int length;\n+        short[][] dst;\n@@ -125,10 +104,11 @@\n-        int length = 4;\n-        testS64(dst, src1, src2);\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                short expected;\n-                if (offset < length) {\n-                    expected = (short)offset;\n-                } else {\n-                    expected = (short)(offset + diff - length);\n+        BiConsumer<short[][], Integer> verifier = (short[][] tgt, Integer len) -> {\n+            for (int i = 0; i <= len; i++) {\n+                for (int j = 0; j < len; j++) {\n+                    int offset = i + j;\n+                    short expected;\n+                    if (offset < len) {\n+                        expected = (short)offset;\n+                    } else {\n+                        expected = (short)(offset + diff - len);\n+                    }\n+                    Asserts.assertEquals(expected, tgt[i][j]);\n@@ -136,1 +116,0 @@\n-                Asserts.assertEquals(expected, dst[i][j]);\n@@ -138,1 +117,6 @@\n-        }\n+        };\n+\n+        length = 4;\n+        dst = new short[length + 1][length];\n+        testS64(dst, src1, src2);\n+        verifier.accept(dst, length);\n@@ -141,0 +125,1 @@\n+        dst = new short[length + 1][length];\n@@ -142,12 +127,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                short expected;\n-                if (offset < length) {\n-                    expected = (short)offset;\n-                } else {\n-                    expected = (short)(offset + diff - length);\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -156,0 +130,1 @@\n+        dst = new short[length + 1][length];\n@@ -157,12 +132,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                short expected;\n-                if (offset < length) {\n-                    expected = (short)offset;\n-                } else {\n-                    expected = (short)(offset + diff - length);\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -171,0 +135,1 @@\n+        dst = new short[length + 1][length];\n@@ -172,12 +137,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                short expected;\n-                if (offset < length) {\n-                    expected = (short)offset;\n-                } else {\n-                    expected = (short)(offset + diff - length);\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -190,1 +144,2 @@\n-        int[][] dst = new int[maxSize + 1][maxSize];\n+        int length;\n+        int[][] dst;\n@@ -198,10 +153,11 @@\n-        int length = 2;\n-        testI64(dst, src1, src2);\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                int expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n+        BiConsumer<int[][], Integer> verifier = (int[][] tgt, Integer len) -> {\n+            for (int i = 0; i <= len; i++) {\n+                for (int j = 0; j < len; j++) {\n+                    int offset = i + j;\n+                    int expected;\n+                    if (offset < len) {\n+                        expected = offset;\n+                    } else {\n+                        expected = offset + diff - len;\n+                    }\n+                    Asserts.assertEquals(expected, tgt[i][j]);\n@@ -209,1 +165,0 @@\n-                Asserts.assertEquals(expected, dst[i][j]);\n@@ -211,1 +166,6 @@\n-        }\n+        };\n+\n+        length = 2;\n+        dst = new int[length + 1][length];\n+        testI64(dst, src1, src2);\n+        verifier.accept(dst, length);\n@@ -214,0 +174,1 @@\n+        dst = new int[length + 1][length];\n@@ -215,12 +176,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                int expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -229,0 +179,1 @@\n+        dst = new int[length + 1][length];\n@@ -230,12 +181,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                int expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -244,0 +184,1 @@\n+        dst = new int[length + 1][length];\n@@ -245,12 +186,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                int expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -263,1 +193,2 @@\n-        long[][] dst = new long[maxSize + 1][maxSize];\n+        int length;\n+        long[][] dst;\n@@ -271,10 +202,11 @@\n-        int length = 2;\n-        testL128(dst, src1, src2);\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                long expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n+        BiConsumer<long[][], Integer> verifier = (long[][] tgt, Integer len) -> {\n+            for (int i = 0; i <= len; i++) {\n+                for (int j = 0; j < len; j++) {\n+                    int offset = i + j;\n+                    long expected;\n+                    if (offset < len) {\n+                        expected = offset;\n+                    } else {\n+                        expected = offset + diff - len;\n+                    }\n+                    Asserts.assertEquals(expected, tgt[i][j]);\n@@ -282,1 +214,0 @@\n-                Asserts.assertEquals(expected, dst[i][j]);\n@@ -284,1 +215,6 @@\n-        }\n+        };\n+\n+        length = 2;\n+        dst = new long[length + 1][length];\n+        testL128(dst, src1, src2);\n+        verifier.accept(dst, length);\n@@ -287,0 +223,1 @@\n+        dst = new long[length + 1][length];\n@@ -288,12 +225,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                long expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -302,0 +228,1 @@\n+        dst = new long[length + 1][length];\n@@ -303,12 +230,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                long expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -321,1 +237,2 @@\n-        float[][] dst = new float[maxSize + 1][maxSize];\n+        int length;\n+        float[][] dst;\n@@ -329,10 +246,11 @@\n-        int length = 2;\n-        testF64(dst, src1, src2);\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                float expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n+        BiConsumer<float[][], Integer> verifier = (float[][] tgt, Integer len) -> {\n+            for (int i = 0; i <= len; i++) {\n+                for (int j = 0; j < len; j++) {\n+                    int offset = i + j;\n+                    float expected;\n+                    if (offset < len) {\n+                        expected = offset;\n+                    } else {\n+                        expected = offset + diff - len;\n+                    }\n+                    Asserts.assertEquals(expected, tgt[i][j]);\n@@ -340,1 +258,0 @@\n-                Asserts.assertEquals(expected, dst[i][j]);\n@@ -342,1 +259,6 @@\n-        }\n+        };\n+\n+        length = 2;\n+        dst = new float[length + 1][length];\n+        testF64(dst, src1, src2);\n+        verifier.accept(dst, length);\n@@ -345,0 +267,1 @@\n+        dst = new float[length + 1][length];\n@@ -346,12 +269,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                float expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -360,0 +272,1 @@\n+        dst = new float[length + 1][length];\n@@ -361,12 +274,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                float expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -375,0 +277,1 @@\n+        dst = new float[length + 1][length];\n@@ -376,12 +279,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                float expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -394,1 +286,2 @@\n-        double[][] dst = new double[maxSize + 1][maxSize];\n+        int length;\n+        double[][] dst;\n@@ -402,10 +295,11 @@\n-        int length = 2;\n-        testD128(dst, src1, src2);\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                double expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n+        BiConsumer<double[][], Integer> verifier = (double[][] tgt, Integer len) -> {\n+            for (int i = 0; i <= len; i++) {\n+                for (int j = 0; j < len; j++) {\n+                    int offset = i + j;\n+                    double expected;\n+                    if (offset < len) {\n+                        expected = offset;\n+                    } else {\n+                        expected = offset + diff - len;\n+                    }\n+                    Asserts.assertEquals(expected, tgt[i][j]);\n@@ -413,1 +307,0 @@\n-                Asserts.assertEquals(expected, dst[i][j]);\n@@ -415,1 +308,6 @@\n-        }\n+        };\n+\n+        length = 2;\n+        dst = new double[length + 1][length];\n+        testD128(dst, src1, src2);\n+        verifier.accept(dst, length);\n@@ -418,0 +316,1 @@\n+        dst = new double[length + 1][length];\n@@ -419,12 +318,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                double expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n@@ -433,0 +321,1 @@\n+        dst = new double[length + 1][length];\n@@ -434,12 +323,1 @@\n-        for (int i = 0; i <= length; i++) {\n-            for (int j = 0; j < length; j++) {\n-                int offset = i + j;\n-                double expected;\n-                if (offset < length) {\n-                    expected = offset;\n-                } else {\n-                    expected = offset + diff - length;\n-                }\n-                Asserts.assertEquals(expected, dst[i][j]);\n-            }\n-        }\n+        verifier.accept(dst, length);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorSlice.java","additions":149,"deletions":271,"binary":false,"changes":420,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -531,0 +531,1 @@\n+gen_op_tmpl $slice1_const_template \"sliceBinaryConstant\" \"\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}