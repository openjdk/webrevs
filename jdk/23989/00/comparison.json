{"files":[{"patch":"@@ -718,1 +718,1 @@\n-    private static Path fetchNssLib(String osId, Path libraryName) {\n+    private static Path fetchNssLib(String osId, Path libraryName) throws IOException {\n@@ -747,17 +747,3 @@\n-    private static Path fetchNssLib(Class<?> clazz, Path libraryName) {\n-        Path path = null;\n-        try {\n-            Path p = ArtifactResolver.resolve(clazz).entrySet().stream()\n-                    .findAny().get().getValue();\n-            path = findNSSLibrary(p, libraryName);\n-        } catch (ArtifactResolverException | IOException e) {\n-            Throwable cause = e.getCause();\n-            if (cause == null) {\n-                System.out.println(\"Cannot resolve artifact, \"\n-                        + \"please check if JIB jar is present in classpath.\");\n-            } else {\n-                throw new RuntimeException(\"Fetch artifact failed: \" + clazz\n-                        + \"\\nPlease make sure the artifact is available.\", e);\n-            }\n-        }\n-        return path;\n+    private static Path fetchNssLib(Class<?> clazz, Path libraryName) throws IOException {\n+        Path p = ArtifactResolver.fetchOne(clazz);\n+        return findNSSLibrary(p, libraryName);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -84,2 +84,2 @@\n-            String opensslPath = OpensslArtifactFetcher.getOpensslPath();\n-            if (opensslPath != null) {\n+            try {\n+                String opensslPath = OpensslArtifactFetcher.getOpensslPath();\n@@ -91,1 +91,1 @@\n-            } else {\n+            } catch (IOException exc) {\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.test.lib.artifacts.ArtifactResolverException;\n@@ -30,0 +29,1 @@\n+import java.io.IOException;\n@@ -183,9 +183,2 @@\n-            return ArtifactResolver.resolve(clazz).entrySet().stream()\n-                    .findAny().get().getValue();\n-        } catch (ArtifactResolverException e) {\n-            Throwable cause = e.getCause();\n-            if (cause == null) {\n-                throw new SkippedException(\"Cannot resolve artifact, \"\n-                        + \"please check if JIB jar is present in classpath.\", e);\n-            }\n-\n+            return ArtifactResolver.fetchOne(clazz);\n+        } catch (IOException e) {\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/Launcher.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.io.IOException;\n@@ -71,0 +72,39 @@\n+    \/**\n+     * Retrieve an artifact\/library\/file from a repository or local file system.\n+     * <p>\n+     * Artifacts are defined with the {@link jdk.test.lib.artifacts.Artifact}\n+     * annotation. The file name should have the format ARTIFACT_NAME-VERSION.EXT\n+     * <p>\n+     * If you have a local version of a dependency that you want to use, you can\n+     * specify that by setting the System property:\n+     * <code>jdk.test.lib.artifacts.ARTIFACT_NAME<\/code>\n+     * <p>\n+     * Generally, tests that use this method should be run with <code>make test<\/code>.\n+     * However, tests can also be run with <code>jtreg<\/code> but you must have a\n+     * local copy of the artifact and the system property must be set as specified\n+     * above.\n+     *\n+     * @param clazz a class annotated with {@link jdk.test.lib.artifacts.Artifact}\n+     * @return the local path to the artifact. If the artifact is a compressed\n+     * file that gets unpacked, this path will point to the root\n+     * directory of the uncompressed file.\n+     * @throws IOException thrown if the artifact cannot be found\n+     *\/\n+    public static Path fetchOne(Class<?> klass) throws IOException {\n+        try {\n+            return ArtifactResolver.resolve(klass).entrySet().stream()\n+                    .findAny().get().getValue();\n+        } catch (ArtifactResolverException e) {\n+            Throwable cause = e.getCause();\n+            if (cause == null) {\n+                \/\/ if property doesn't exist\n+                throw new IOException(\"Cannot resolve artifact, \"\n+                        + \"please check if JIB jar is present in classpath.\");\n+            } else {\n+                \/\/ can't get it from the repository\n+                throw new IOException(\"Fetch artifact failed: \" + klass\n+                        + \"\\nPlease make sure the artifact is available.\", e);\n+            }\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolver.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import java.io.File;\n+import java.io.IOException;\n@@ -33,1 +33,0 @@\n-import jdk.test.lib.artifacts.ArtifactResolverException;\n@@ -54,1 +53,1 @@\n-    public static String getOpensslPath() {\n+    public static String getOpensslPath() throws IOException {\n@@ -114,18 +113,4 @@\n-    private static String fetchOpenssl(Class<?> clazz) {\n-        String path = null;\n-        try {\n-            path = ArtifactResolver.resolve(clazz).entrySet().stream()\n-                    .findAny().get().getValue() + File.separator + \"openssl\"\n-                    + File.separator + \"bin\" + File.separator + \"openssl\";\n-            System.out.println(\"path: \" + path);\n-        } catch (ArtifactResolverException e) {\n-            Throwable cause = e.getCause();\n-            if (cause == null) {\n-                System.out.println(\"Cannot resolve artifact, \"\n-                        + \"please check if JIB jar is present in classpath.\");\n-            } else {\n-                throw new RuntimeException(\"Fetch artifact failed: \" + clazz\n-                        + \"\\nPlease make sure the artifact is available.\", e);\n-            }\n-        }\n-        return path;\n+    private static String fetchOpenssl(Class<?> clazz) throws IOException {\n+        return ArtifactResolver.fetchOne(clazz)\n+                .resolve(\"openssl\", \"bin\", \"openssl\")\n+                .toString();\n","filename":"test\/lib\/jdk\/test\/lib\/security\/OpensslArtifactFetcher.java","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"}]}