{"files":[{"patch":"@@ -43,2 +43,2 @@\n-  Copy::zero_to_bytes(_degen_points, sizeof(size_t) * ShenandoahGC::_DEGENERATED_LIMIT);\n-  Copy::zero_to_bytes(_collection_causes, sizeof(size_t) * GCCause::_last_gc_cause);\n+  Copy::zero_to_bytes(_degen_point_counts, sizeof(size_t) * ShenandoahGC::_DEGENERATED_LIMIT);\n+  Copy::zero_to_bytes(_collection_cause_counts, sizeof(size_t) * GCCause::_last_gc_cause);\n@@ -51,1 +51,1 @@\n-  _collection_causes[cause]++;\n+  _collection_cause_counts[cause]++;\n@@ -61,1 +61,1 @@\n-  _degen_points[point]++;\n+  _degen_point_counts[point]++;\n@@ -99,2 +99,2 @@\n-  return GCCause::is_user_requested_gc(cause) ||\n-         GCCause::is_serviceability_requested_gc(cause);\n+  return GCCause::is_user_requested_gc(cause)\n+      || GCCause::is_serviceability_requested_gc(cause);\n@@ -104,3 +104,30 @@\n-  return !is_explicit_gc(cause) &&\n-         cause != GCCause::_allocation_failure &&\n-         cause != GCCause::_shenandoah_concurrent_gc;\n+  return cause != GCCause::_allocation_failure\n+      && cause != GCCause::_shenandoah_concurrent_gc\n+      && !is_explicit_gc(cause);\n+}\n+\n+#ifdef ASSERT\n+bool is_valid_request(GCCause::Cause cause) {\n+  return is_explicit_gc(cause)\n+      || cause == GCCause::_metadata_GC_clear_soft_refs\n+      || cause == GCCause::_codecache_GC_aggressive\n+      || cause == GCCause::_codecache_GC_threshold\n+      || cause == GCCause::_full_gc_alot\n+      || cause == GCCause::_wb_young_gc\n+      || cause == GCCause::_wb_full_gc\n+      || cause == GCCause::_wb_breakpoint\n+      || cause == GCCause::_scavenge_alot;\n+}\n+#endif\n+\n+bool ShenandoahCollectorPolicy::should_run_full_gc(GCCause::Cause cause) {\n+  return is_explicit_gc(cause) ? !ExplicitGCInvokesConcurrent : !ShenandoahImplicitGCInvokesConcurrent;\n+}\n+\n+bool ShenandoahCollectorPolicy::should_handle_requested_gc(GCCause::Cause cause) {\n+  assert(is_valid_request(cause), \"only requested GCs here: %s\", GCCause::to_string(cause));\n+\n+  if (DisableExplicitGC) {\n+    return !is_explicit_gc(cause);\n+  }\n+  return true;\n@@ -123,1 +150,1 @@\n-    size_t cause_count = _collection_causes[c];\n+    size_t cause_count = _collection_cause_counts[c];\n@@ -153,1 +180,1 @@\n-    if (_degen_points[c] > 0) {\n+    if (_degen_point_counts[c] > 0) {\n@@ -155,1 +182,1 @@\n-      out->print_cr(\"    \" SIZE_FORMAT_W(5) \" happened at %s\",         _degen_points[c], desc);\n+      out->print_cr(\"    \" SIZE_FORMAT_W(5) \" happened at %s\", _degen_point_counts[c], desc);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":39,"deletions":12,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-  size_t _collection_causes[GCCause::_last_gc_cause];\n-  size_t _degen_points[ShenandoahGC::_DEGENERATED_LIMIT];\n+  size_t _collection_cause_counts[GCCause::_last_gc_cause];\n+  size_t _degen_point_counts[ShenandoahGC::_DEGENERATED_LIMIT];\n@@ -91,0 +91,3 @@\n+\n+  static bool should_run_full_gc(GCCause::Cause cause);\n+  static bool should_handle_requested_gc(GCCause::Cause cause);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-  GCMode default_mode = concurrent_normal;\n-  GCCause::Cause default_cause = GCCause::_shenandoah_concurrent_gc;\n+  const GCMode default_mode = concurrent_normal;\n+  const GCCause::Cause default_cause = GCCause::_shenandoah_concurrent_gc;\n@@ -75,1 +75,1 @@\n-  double shrink_period = (double)ShenandoahUncommitDelay \/ 1000 \/ 10;\n+  const double shrink_period = (double)ShenandoahUncommitDelay \/ 1000 \/ 10;\n@@ -77,2 +77,2 @@\n-  ShenandoahCollectorPolicy* policy = heap->shenandoah_policy();\n-  ShenandoahHeuristics* heuristics = heap->heuristics();\n+  ShenandoahCollectorPolicy* const policy = heap->shenandoah_policy();\n+  ShenandoahHeuristics* const heuristics = heap->heuristics();\n@@ -81,3 +81,3 @@\n-    bool alloc_failure_pending = _alloc_failure_gc.is_set();\n-    bool is_gc_requested = _gc_requested.is_set();\n-    GCCause::Cause requested_gc_cause = _requested_gc_cause;\n+    const bool alloc_failure_pending = _alloc_failure_gc.is_set();\n+    const bool is_gc_requested = _gc_requested.is_set();\n+    const GCCause::Cause requested_gc_cause = _requested_gc_cause;\n@@ -86,1 +86,1 @@\n-    size_t allocs_seen = Atomic::xchg(&_allocs_seen, (size_t)0, memory_order_relaxed);\n+    const size_t allocs_seen = Atomic::xchg(&_allocs_seen, (size_t)0, memory_order_relaxed);\n@@ -89,1 +89,1 @@\n-    bool soft_max_changed = heap->check_soft_max_changed();\n+    const bool soft_max_changed = heap->check_soft_max_changed();\n@@ -121,1 +121,1 @@\n-      if (should_run_full_gc(cause)) {\n+      if (ShenandoahCollectorPolicy::should_run_full_gc(cause)) {\n@@ -145,1 +145,1 @@\n-    bool gc_requested = (mode != none);\n+    const bool gc_requested = (mode != none);\n@@ -254,1 +254,1 @@\n-    double current = os::elapsedTime();\n+    const double current = os::elapsedTime();\n@@ -383,9 +383,0 @@\n-bool ShenandoahControlThread::should_run_full_gc(GCCause::Cause cause) {\n-  return is_explicit_gc(cause) ? !ExplicitGCInvokesConcurrent : !ShenandoahImplicitGCInvokesConcurrent;\n-}\n-\n-bool ShenandoahControlThread::is_explicit_gc(GCCause::Cause cause) {\n-  return GCCause::is_user_requested_gc(cause) ||\n-         GCCause::is_serviceability_requested_gc(cause);\n-}\n-\n@@ -393,17 +384,1 @@\n-  assert(GCCause::is_user_requested_gc(cause) ||\n-         GCCause::is_serviceability_requested_gc(cause) ||\n-         cause == GCCause::_metadata_GC_clear_soft_refs ||\n-         cause == GCCause::_codecache_GC_aggressive ||\n-         cause == GCCause::_codecache_GC_threshold ||\n-         cause == GCCause::_full_gc_alot ||\n-         cause == GCCause::_wb_young_gc ||\n-         cause == GCCause::_wb_full_gc ||\n-         cause == GCCause::_wb_breakpoint ||\n-         cause == GCCause::_scavenge_alot,\n-         \"only requested GCs here: %s\", GCCause::to_string(cause));\n-\n-  if (is_explicit_gc(cause)) {\n-    if (!DisableExplicitGC) {\n-      handle_requested_gc(cause);\n-    }\n-  } else {\n+  if (ShenandoahCollectorPolicy::should_handle_requested_gc(cause)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":14,"deletions":39,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -90,3 +90,0 @@\n-  static bool is_explicit_gc(GCCause::Cause cause);\n-  static bool should_run_full_gc(GCCause::Cause cause);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}