{"files":[{"patch":"@@ -41,5 +41,1 @@\n-  _alloc_failure_full(0),\n-  _explicit_concurrent(0),\n-  _explicit_full(0),\n-  _implicit_concurrent(0),\n-  _implicit_full(0) {\n+  _alloc_failure_full(0) {\n@@ -48,0 +44,1 @@\n+  Copy::zero_to_bytes(_collection_causes, sizeof(size_t) * GCCause::_last_gc_cause);\n@@ -52,14 +49,3 @@\n-void ShenandoahCollectorPolicy::record_explicit_to_concurrent() {\n-  _explicit_concurrent++;\n-}\n-\n-void ShenandoahCollectorPolicy::record_explicit_to_full() {\n-  _explicit_full++;\n-}\n-\n-void ShenandoahCollectorPolicy::record_implicit_to_concurrent() {\n-  _implicit_concurrent++;\n-}\n-\n-void ShenandoahCollectorPolicy::record_implicit_to_full() {\n-  _implicit_full++;\n+void ShenandoahCollectorPolicy::record_collection_cause(GCCause::Cause cause) {\n+  assert(cause < GCCause::_last_gc_cause, \"Invalid GCCause\");\n+  _collection_causes[cause]++;\n@@ -112,0 +98,11 @@\n+bool is_explicit_gc(GCCause::Cause cause) {\n+  return GCCause::is_user_requested_gc(cause) ||\n+         GCCause::is_serviceability_requested_gc(cause);\n+}\n+\n+bool is_implicit_gc(GCCause::Cause cause) {\n+  return !is_explicit_gc(cause) &&\n+         cause != GCCause::_allocation_failure &&\n+         cause != GCCause::_shenandoah_concurrent_gc;\n+}\n+\n@@ -122,4 +119,26 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Successful Concurrent GCs (%.2f%%)\",  _success_concurrent_gcs, percent_of(_success_concurrent_gcs, completed_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\",    _explicit_concurrent, percent_of(_explicit_concurrent, _success_concurrent_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\",    _implicit_concurrent, percent_of(_implicit_concurrent, _success_concurrent_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" abbreviated (%.2f%%)\",           _abbreviated_concurrent_gcs, percent_of(_abbreviated_concurrent_gcs, _success_concurrent_gcs));\n+\n+  size_t explicit_requests = 0;\n+  size_t implicit_requests = 0;\n+  for (int c = 0; c < GCCause::_last_gc_cause; c++) {\n+    size_t cause_count = _collection_causes[c];\n+    if (cause_count > 0) {\n+      auto cause = (GCCause::Cause) c;\n+      if (is_explicit_gc(cause)) {\n+        explicit_requests += cause_count;\n+      } else if (is_implicit_gc(cause)) {\n+        implicit_requests += cause_count;\n+      }\n+      const char* desc = GCCause::to_string(cause);\n+      out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by %s (%.2f%%)\", cause_count, desc, percent_of(cause_count, completed_gcs));\n+    }\n+  }\n+\n+  out->cr();\n+  out->print_cr(SIZE_FORMAT_W(5) \" Successful Concurrent GCs (%.2f%%)\", _success_concurrent_gcs, percent_of(_success_concurrent_gcs, completed_gcs));\n+  if (ExplicitGCInvokesConcurrent) {\n+    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\", explicit_requests, percent_of(explicit_requests, _success_concurrent_gcs));\n+  }\n+  if (ShenandoahImplicitGCInvokesConcurrent) {\n+    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\", implicit_requests, percent_of(implicit_requests, _success_concurrent_gcs));\n+  }\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" abbreviated (%.2f%%)\",  _abbreviated_concurrent_gcs, percent_of(_abbreviated_concurrent_gcs, _success_concurrent_gcs));\n@@ -141,3 +160,7 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Full GCs (%.2f%%)\",                          _success_full_gcs, percent_of(_success_full_gcs, completed_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\",           _explicit_full, percent_of(_explicit_full, _success_full_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\",           _implicit_full, percent_of(_implicit_full, _success_full_gcs));\n+  out->print_cr(SIZE_FORMAT_W(5) \" Full GCs (%.2f%%)\", _success_full_gcs, percent_of(_success_full_gcs, completed_gcs));\n+  if (!ExplicitGCInvokesConcurrent) {\n+    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\", explicit_requests, percent_of(explicit_requests, _success_concurrent_gcs));\n+  }\n+  if (!ShenandoahImplicitGCInvokesConcurrent) {\n+    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\", implicit_requests, percent_of(implicit_requests, _success_concurrent_gcs));\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":49,"deletions":26,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -51,4 +51,1 @@\n-  size_t _explicit_concurrent;\n-  size_t _explicit_full;\n-  size_t _implicit_concurrent;\n-  size_t _implicit_full;\n+  size_t _collection_causes[GCCause::_last_gc_cause];\n@@ -75,4 +72,1 @@\n-  void record_explicit_to_concurrent();\n-  void record_explicit_to_full();\n-  void record_implicit_to_concurrent();\n-  void record_implicit_to_full();\n+  void record_collection_cause(GCCause::Cause cause);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.hpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -84,2 +84,0 @@\n-    bool explicit_gc_requested = is_gc_requested && is_explicit_gc(requested_gc_cause);\n-    bool implicit_gc_requested = is_gc_requested && !is_explicit_gc(requested_gc_cause);\n@@ -118,1 +116,1 @@\n-    } else if (explicit_gc_requested) {\n+    } else if (is_gc_requested) {\n@@ -120,2 +118,1 @@\n-      log_info(gc)(\"Trigger: Explicit GC request (%s)\", GCCause::to_string(cause));\n-\n+      log_info(gc)(\"Trigger: GC request (%s)\", GCCause::to_string(cause));\n@@ -124,7 +121,1 @@\n-      if (ExplicitGCInvokesConcurrent) {\n-        policy->record_explicit_to_concurrent();\n-        mode = default_mode;\n-        \/\/ Unload and clean up everything\n-        heap->set_unload_classes(heuristics->can_unload_classes());\n-      } else {\n-        policy->record_explicit_to_full();\n+      if (should_run_full_gc(cause)) {\n@@ -132,9 +123,1 @@\n-      }\n-    } else if (implicit_gc_requested) {\n-      cause = requested_gc_cause;\n-      log_info(gc)(\"Trigger: Implicit GC request (%s)\", GCCause::to_string(cause));\n-\n-      heuristics->record_requested_gc();\n-\n-      if (ShenandoahImplicitGCInvokesConcurrent) {\n-        policy->record_implicit_to_concurrent();\n+      } else {\n@@ -142,1 +125,0 @@\n-\n@@ -145,3 +127,0 @@\n-      } else {\n-        policy->record_implicit_to_full();\n-        mode = stw_full;\n@@ -162,1 +141,1 @@\n-    if (alloc_failure_pending || implicit_gc_requested || explicit_gc_requested || ShenandoahAlwaysClearSoftRefs) {\n+    if (alloc_failure_pending || is_gc_requested || ShenandoahAlwaysClearSoftRefs) {\n@@ -202,1 +181,1 @@\n-      if (explicit_gc_requested || implicit_gc_requested) {\n+      if (is_gc_requested) {\n@@ -277,1 +256,1 @@\n-    if (ShenandoahUncommit && (explicit_gc_requested || soft_max_changed || (current - last_shrink_time > shrink_period))) {\n+    if (ShenandoahUncommit && (is_gc_requested || soft_max_changed || (current - last_shrink_time > shrink_period))) {\n@@ -282,1 +261,1 @@\n-      double shrink_before = (explicit_gc_requested || soft_max_changed) ?\n+      double shrink_before = (is_gc_requested || soft_max_changed) ?\n@@ -404,1 +383,5 @@\n-bool ShenandoahControlThread::is_explicit_gc(GCCause::Cause cause) const {\n+bool ShenandoahControlThread::should_run_full_gc(GCCause::Cause cause) {\n+  return is_explicit_gc(cause) ? !ExplicitGCInvokesConcurrent : !ShenandoahImplicitGCInvokesConcurrent;\n+}\n+\n+bool ShenandoahControlThread::is_explicit_gc(GCCause::Cause cause) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":13,"deletions":30,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -90,1 +90,2 @@\n-  bool is_explicit_gc(GCCause::Cause cause) const;\n+  static bool is_explicit_gc(GCCause::Cause cause);\n+  static bool should_run_full_gc(GCCause::Cause cause);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+  _heap->shenandoah_policy()->record_collection_cause(cause);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}