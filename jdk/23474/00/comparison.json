{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import java.text.ParsePosition;\n@@ -66,1 +67,0 @@\n-import sun.util.locale.ParseStatus;\n@@ -1922,1 +1922,2 @@\n-        LanguageTag tag = LanguageTag.parse(languageTag, null);\n+        LanguageTag tag = LanguageTag.parse(\n+                languageTag, new ParsePosition(0), true);\n@@ -2792,5 +2793,2 @@\n-            ParseStatus sts = new ParseStatus();\n-            LanguageTag tag = LanguageTag.parse(languageTag, sts);\n-            if (sts.isError()) {\n-                throw new IllformedLocaleException(sts.getErrorMessage(), sts.getErrorIndex());\n-            }\n+            LanguageTag tag = LanguageTag.parse(\n+                    languageTag, new ParsePosition(0), false);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.text.ParsePosition;\n@@ -183,7 +184,2 @@\n-    public static LanguageTag parse(String languageTag, ParseStatus sts) {\n-        if (sts == null) {\n-            sts = new ParseStatus();\n-        } else {\n-            sts.reset();\n-        }\n-\n+    public static LanguageTag parse(String languageTag, ParsePosition pp,\n+                                    boolean lenient) {\n@@ -191,0 +187,1 @@\n+        var errorMsg = new StringBuilder();\n@@ -204,6 +201,6 @@\n-        if (tag.parseLanguage(itr, sts)) {\n-            tag.parseExtlangs(itr, sts);\n-            tag.parseScript(itr, sts);\n-            tag.parseRegion(itr, sts);\n-            tag.parseVariants(itr, sts);\n-            tag.parseExtensions(itr, sts);\n+        if (tag.parseLanguage(itr, pp)) {\n+            tag.parseExtlangs(itr, pp);\n+            tag.parseScript(itr, pp);\n+            tag.parseRegion(itr, pp);\n+            tag.parseVariants(itr, pp);\n+            tag.parseExtensions(itr, pp, errorMsg);\n@@ -211,2 +208,3 @@\n-        tag.parsePrivateuse(itr, sts);\n-        if (!itr.isDone() && !sts.isError()) {\n+        tag.parsePrivateuse(itr, pp, errorMsg);\n+\n+        if (!itr.isDone() && pp.getErrorIndex() == -1) {\n@@ -214,1 +212,1 @@\n-            sts.errorIndex = itr.currentStart();\n+            pp.setErrorIndex(itr.currentStart());\n@@ -216,1 +214,1 @@\n-                sts.errorMsg = \"Empty subtag\";\n+                errorMsg.append(\"Empty subtag\");\n@@ -218,1 +216,1 @@\n-                sts.errorMsg = \"Invalid subtag: \" + s;\n+                errorMsg.append(\"Invalid subtag: \").append(s);\n@@ -221,0 +219,5 @@\n+\n+        if (!lenient && pp.getErrorIndex() != -1) {\n+            throw new IllformedLocaleException(errorMsg.toString(), pp.getErrorIndex());\n+        }\n+\n@@ -228,2 +231,2 @@\n-    private boolean parseLanguage(StringTokenIterator itr, ParseStatus sts) {\n-        if (itr.isDone() || sts.isError()) {\n+    private boolean parseLanguage(StringTokenIterator itr, ParsePosition pp) {\n+        if (itr.isDone() || pp.getErrorIndex() != -1) {\n@@ -239,1 +242,1 @@\n-            sts.parseLength = itr.currentEnd();\n+            pp.setIndex(itr.currentEnd());\n@@ -246,2 +249,2 @@\n-    private boolean parseExtlangs(StringTokenIterator itr, ParseStatus sts) {\n-        if (itr.isDone() || sts.isError()) {\n+    private boolean parseExtlangs(StringTokenIterator itr, ParsePosition pp) {\n+        if (itr.isDone() || pp.getErrorIndex() != -1) {\n@@ -263,1 +266,1 @@\n-            sts.parseLength = itr.currentEnd();\n+            pp.setIndex(itr.currentEnd());\n@@ -275,2 +278,2 @@\n-    private boolean parseScript(StringTokenIterator itr, ParseStatus sts) {\n-        if (itr.isDone() || sts.isError()) {\n+    private boolean parseScript(StringTokenIterator itr, ParsePosition pp) {\n+        if (itr.isDone() || pp.getErrorIndex() != -1) {\n@@ -286,1 +289,1 @@\n-            sts.parseLength = itr.currentEnd();\n+            pp.setIndex(itr.currentEnd());\n@@ -293,2 +296,2 @@\n-    private boolean parseRegion(StringTokenIterator itr, ParseStatus sts) {\n-        if (itr.isDone() || sts.isError()) {\n+    private boolean parseRegion(StringTokenIterator itr, ParsePosition pp) {\n+        if (itr.isDone() || pp.getErrorIndex() != -1) {\n@@ -304,1 +307,1 @@\n-            sts.parseLength = itr.currentEnd();\n+            pp.setIndex(itr.currentEnd());\n@@ -311,2 +314,2 @@\n-    private boolean parseVariants(StringTokenIterator itr, ParseStatus sts) {\n-        if (itr.isDone() || sts.isError()) {\n+    private boolean parseVariants(StringTokenIterator itr, ParsePosition pp) {\n+        if (itr.isDone() || pp.getErrorIndex() != -1) {\n@@ -328,1 +331,1 @@\n-            sts.parseLength = itr.currentEnd();\n+            pp.setIndex(itr.currentEnd());\n@@ -335,2 +338,3 @@\n-    private boolean parseExtensions(StringTokenIterator itr, ParseStatus sts) {\n-        if (itr.isDone() || sts.isError()) {\n+    private boolean parseExtensions(StringTokenIterator itr, ParsePosition pp,\n+                                    StringBuilder err) {\n+        if (itr.isDone() || pp.getErrorIndex() != -1) {\n@@ -354,1 +358,1 @@\n-                        sts.parseLength = itr.currentEnd();\n+                        pp.setIndex(itr.currentEnd());\n@@ -361,3 +365,3 @@\n-                if (sts.parseLength <= start) {\n-                    sts.errorIndex = start;\n-                    sts.errorMsg = \"Incomplete extension '\" + singleton + \"'\";\n+                if (pp.getIndex() <= start) {\n+                    pp.setErrorIndex(start);\n+                    err.append(\"Incomplete extension '\").append(singleton).append(\"'\");\n@@ -379,2 +383,3 @@\n-    private boolean parsePrivateuse(StringTokenIterator itr, ParseStatus sts) {\n-        if (itr.isDone() || sts.isError()) {\n+    private boolean parsePrivateuse(StringTokenIterator itr, ParsePosition pp,\n+                                    StringBuilder err) {\n+        if (itr.isDone() || pp.getErrorIndex() != -1) {\n@@ -398,1 +403,1 @@\n-                sts.parseLength = itr.currentEnd();\n+                pp.setIndex(itr.currentEnd());\n@@ -403,1 +408,1 @@\n-            if (sts.parseLength <= start) {\n+            if (pp.getIndex() <= start) {\n@@ -405,2 +410,2 @@\n-                sts.errorIndex = start;\n-                sts.errorMsg = \"Incomplete privateuse\";\n+                pp.setErrorIndex(start);\n+                err.append(\"Incomplete privateuse\");\n@@ -417,7 +422,2 @@\n-        ParseStatus sts = new ParseStatus();\n-        parse(tag, sts);\n-        \/\/ Illegal tags\n-        if (sts.errorMsg != null) {\n-            throw new IllformedLocaleException(String.format(\"Ill formed tag:\" +\n-                    \" %s\", sts.errorMsg));\n-        }\n+        parse(tag, new ParsePosition(0), false);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LanguageTag.java","additions":53,"deletions":53,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *******************************************************************************\n- * Copyright (C) 2010, International Business Machines Corporation and         *\n- * others. All Rights Reserved.                                                *\n- *******************************************************************************\n- *\/\n-package sun.util.locale;\n-\n-public class ParseStatus {\n-    int parseLength;\n-    int errorIndex;\n-    String errorMsg;\n-\n-    public ParseStatus() {\n-        reset();\n-    }\n-\n-    public void reset() {\n-        parseLength = 0;\n-        errorIndex = -1;\n-        errorMsg = null;\n-    }\n-\n-    public boolean isError() {\n-        return (errorIndex >= 0);\n-    }\n-\n-    public int getErrorIndex() {\n-        return errorIndex;\n-    }\n-\n-    public int getParseLength() {\n-        return parseLength;\n-    }\n-\n-    public String getErrorMessage() {\n-        return errorMsg;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/ParseStatus.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"}]}