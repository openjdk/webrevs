{"files":[{"patch":"@@ -174,0 +174,5 @@\n+    \/** The queue of classes that should have typeEnter completer installed after\n+     *  all the classes are discovered.\n+     *\/\n+    List<ClassSymbol> pendingCompleter = null;\n+\n@@ -527,2 +532,6 @@\n-        \/\/ install further completer for this type.\n-        c.completer = typeEnter;\n+        \/\/ schedule installation of further completer for this type.\n+        if (pendingCompleter != null) {\n+            pendingCompleter = pendingCompleter.prepend(c);\n+        } else {\n+            c.completer = typeEnter;\n+        }\n@@ -607,2 +616,12 @@\n-            \/\/ enter all classes, and construct uncompleted list\n-            classEnter(trees, null);\n+            List<ClassSymbol> prevPendingCompleter = pendingCompleter;\n+            try {\n+                pendingCompleter = List.nil();\n+                \/\/ enter all classes, and construct uncompleted list\n+                classEnter(trees, null);\n+                \/\/ install further completer for classes recognized by the above task:\n+                for (ClassSymbol sym : pendingCompleter) {\n+                    sym.completer = typeEnter;\n+                }\n+            } finally {\n+                pendingCompleter = prevPendingCompleter;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8191460\n+ * @summary crash in Annotate with duplicate declaration and annotation processing enabled\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main CrashDuplicateAnnotationDeclarationTest\n+ *\/\n+\n+import java.io.IOException;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Mode;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class CrashDuplicateAnnotationDeclarationTest extends TestRunner {\n+    protected ToolBox tb;\n+\n+    CrashDuplicateAnnotationDeclarationTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new CrashDuplicateAnnotationDeclarationTest().runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[]{Paths.get(m.getName())});\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws IOException {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    @Test\n+    public void testDupAnnoDeclaration(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path pkg = src.resolve(\"pkg\");\n+        Path y = pkg.resolve(\"Y.java\");\n+        Path t = pkg.resolve(\"T.java\");\n+\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package pkg;\n+                @SuppressWarnings(\"deprecation\")\n+                class Y {\n+                    @interface A {}\n+                    @interface A {} \/\/ error: class A is already defined\n+                    T t;\n+                }\n+                \"\"\");\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package pkg;\n+                @Deprecated class T {}\n+                \"\"\");\n+\n+        \/\/ we need to compile T first\n+        new JavacTask(tb)\n+                .files(t)\n+                .outdir(classes)\n+                .run();\n+\n+        List<String> expected = List.of(\n+                \"Y.java:5:6: compiler.err.already.defined: kindname.class, pkg.Y.A, kindname.class, pkg.Y\",\n+                \"1 error\");\n+\n+        Path classDir = getClassDir();\n+        List<String> found = new JavacTask(tb)\n+                .classpath(classes, classDir)\n+                .options(\"-processor\", SimpleProcessor.class.getName(),\n+                         \"-XDrawDiagnostics\")\n+                .files(y, t)\n+                .outdir(classes)\n+                .run(Task.Expect.FAIL, 1)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        checkOutputAcceptable(expected, found);\n+    }\n+\n+    void checkOutputAcceptable(List<String> expected, List<String> found) {\n+        if (found.size() != expected.size()) {\n+            throw new AssertionError(\"Unexpected output: \" + found);\n+        } else {\n+            for (int i = 0; i < expected.size(); i++) {\n+                if (!found.get(i).contains(expected.get(i))) {\n+                    throw new AssertionError(\"Unexpected output: \" + found);\n+                }\n+            }\n+        }\n+    }\n+\n+    public Path getClassDir() {\n+        String classes = ToolBox.testClasses;\n+        if (classes == null) {\n+            return Paths.get(\"build\");\n+        } else {\n+            return Paths.get(classes);\n+        }\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class SimpleProcessor extends AbstractProcessor {\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latestSupported();\n+        }\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/CrashDuplicateAnnotationDeclarationTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}