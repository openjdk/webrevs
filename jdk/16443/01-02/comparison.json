{"files":[{"patch":"@@ -245,0 +245,8 @@\n+            \/\/ Packages are unusual, in that they are the only type of declaration that can legally appear\n+            \/\/ more than once in a compilation, and in all cases refer to the same underlying symbol.\n+            \/\/ This means they are the only kind of declaration that syntactically may have multiple sets\n+            \/\/ of annotations, each on a different package declaration, even though that is ultimately\n+            \/\/ forbidden by JLS 8 section 7.4.\n+            \/\/ The corollary here is that all of the annotations on a package symbol may have already\n+            \/\/ been handled, meaning that the set of annotations pending completion is now empty.\n+            Assert.check(s.kind == PCK || s.annotationsPendingCompletion());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -174,0 +174,2 @@\n+    List<ClassSymbol> pendingCompleter = List.nil();\n+\n@@ -527,2 +529,2 @@\n-        \/\/ install further completer for this type.\n-        c.completer = typeEnter;\n+        \/\/ schedule installation of further completer for this type.\n+        pendingCompleter = pendingCompleter.prepend(c);\n@@ -607,2 +609,11 @@\n-            \/\/ enter all classes, and construct uncompleted list\n-            classEnter(trees, null);\n+            List<ClassSymbol> prevPendingCompleter = pendingCompleter;\n+            try {\n+                \/\/ enter all classes, and construct uncompleted list\n+                classEnter(trees, null);\n+                \/\/ install further completer for classes recognized by the above task:\n+                for (ClassSymbol sym : pendingCompleter) {\n+                    sym.completer = typeEnter;\n+                }\n+            } finally {\n+                pendingCompleter = prevPendingCompleter;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-        Path y = pkg.resolve(\"Y\");\n-        Path t = pkg.resolve(\"T\");\n+        Path y = pkg.resolve(\"Y.java\");\n+        Path t = pkg.resolve(\"T.java\");\n@@ -88,1 +88,1 @@\n-        tb.writeJavaFiles(y,\n+        tb.writeJavaFiles(src,\n@@ -91,0 +91,1 @@\n+                @SuppressWarnings(\"deprecation\")\n@@ -98,1 +99,1 @@\n-        tb.writeJavaFiles(t,\n+        tb.writeJavaFiles(src,\n@@ -106,1 +107,1 @@\n-                .files(findJavaFiles(t))\n+                .files(t)\n@@ -111,5 +112,1 @@\n-                \"Y.java:4: error: class A is already defined in class Y\",\n-                \"    @interface A {} \/\/ error: class A is already defined\",\n-                \"     ^\",\n-                \"Y.java uses or overrides a deprecated API.\",\n-                \"Recompile with -Xlint:deprecation for details.\",\n+                \"Y.java:5:6: compiler.err.already.defined: kindname.class, pkg.Y.A, kindname.class, pkg.Y\",\n@@ -121,2 +118,3 @@\n-                .options(\"-processor\", SimpleProcessor.class.getName())\n-                .files(findJavaFiles(y, t))\n+                .options(\"-processor\", SimpleProcessor.class.getName(),\n+                         \"-XDrawDiagnostics\")\n+                .files(y, t)\n@@ -124,1 +122,1 @@\n-                .run(Task.Expect.FAIL)\n+                .run(Task.Expect.FAIL, 1)\n","filename":"test\/langtools\/tools\/javac\/annotations\/CrashDuplicateAnnotationDeclarationTest.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"}]}