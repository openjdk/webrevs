{"files":[{"patch":"@@ -395,1 +395,1 @@\n-  int mt_index = cp->operand_argument_index_at(bsms_attribute_index, arg_i);\n+  int mt_index = cp->bsm_attribute_entry(bsms_attribute_index)->argument_index(arg_i);\n@@ -411,1 +411,1 @@\n-  int mh_index = cp->operand_argument_index_at(bsms_attribute_index, arg_i);\n+  int mh_index = cp->bsm_attribute_entry(bsms_attribute_index)->argument_index(arg_i);\n@@ -517,1 +517,1 @@\n-    int arg_count = cp->operand_argument_count_at(bsms_attribute_index);\n+    int arg_count = cp->bsm_attribute_entry(bsms_attribute_index)->argument_count();\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1941,2 +1941,2 @@\n-  int k1 = operand_bootstrap_method_ref_index_at(idx1);\n-  int k2 = cp2->operand_bootstrap_method_ref_index_at(idx2);\n+  int k1 = bsm_attribute_entry(idx1)->bootstrap_method_index();\n+  int k2 = cp2->bsm_attribute_entry(idx2)->bootstrap_method_index();\n@@ -1948,2 +1948,2 @@\n-  int argc = operand_argument_count_at(idx1);\n-  if (argc == cp2->operand_argument_count_at(idx2)) {\n+  int argc = bsm_attribute_entry(idx1)->argument_count();\n+  if (argc == cp2->bsm_attribute_entry(idx2)->argument_count()) {\n@@ -1951,2 +1951,2 @@\n-      k1 = operand_argument_index_at(idx1, j);\n-      k2 = cp2->operand_argument_index_at(idx2, j);\n+      k1 = bsm_attribute_entry(idx1)->argument_index(j);\n+      k2 = cp2->bsm_attribute_entry(idx2)->argument_index(j);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -80,0 +80,30 @@\n+class BSMAttributeEntry {\n+  friend class ConstantPool;\n+\n+  u2 _bootstrap_method_index;\n+  u2 _argument_count;\n+\n+  const u2* argument_indexes() const {\n+    return reinterpret_cast<const u2*>(this + 1);\n+  }\n+  u2* argument_indexes() {\n+    return reinterpret_cast<u2*>(this + 1);\n+  }\n+\n+  \/\/ These are overlays on top of the operands array. Do not construct.\n+  BSMAttributeEntry() = delete;\n+\n+public:\n+  int bootstrap_method_index() const {\n+    return _bootstrap_method_index;\n+  }\n+  int argument_count() const {\n+    return _argument_count;\n+  }\n+\n+  int argument_index(int n) const {\n+    assert(checked_cast<u2>(n) < _argument_count, \"oob\");\n+    return argument_indexes()[n];\n+  }\n+};\n+\n@@ -569,10 +599,0 @@\n-  \/\/ Layout of InvokeDynamic and Dynamic bootstrap method specifier\n-  \/\/ data in second part of operands array.  This encodes one record in\n-  \/\/ the BootstrapMethods attribute.  The whole specifier also includes\n-  \/\/ the name and type information from the main constant pool entry.\n-  enum {\n-         _indy_bsm_offset  = 0,  \/\/ CONSTANT_MethodHandle bsm\n-         _indy_argc_offset = 1,  \/\/ u2 argc\n-         _indy_argv_offset = 2   \/\/ u2 argv[argc]\n-  };\n-\n@@ -580,1 +600,0 @@\n-\n@@ -587,10 +606,2 @@\n-  u2 operand_bootstrap_method_ref_index_at(int bsms_attribute_index) {\n-    int offset = operand_offset_at(bsms_attribute_index);\n-    return operands()->at(offset + _indy_bsm_offset);\n-  }\n-  u2 operand_argument_count_at(int bsms_attribute_index) {\n-    int offset = operand_offset_at(bsms_attribute_index);\n-    u2 argc = operands()->at(offset + _indy_argc_offset);\n-    return argc;\n-  }\n-  u2 operand_argument_index_at(int bsms_attribute_index, int j) {\n+\n+  BSMAttributeEntry* bsm_attribute_entry(int bsms_attribute_index) {\n@@ -598,1 +609,1 @@\n-    return operands()->at(offset + _indy_argv_offset + j);\n+    return reinterpret_cast<BSMAttributeEntry*>(operands()->adr_at(offset));\n@@ -600,0 +611,1 @@\n+\n@@ -601,3 +613,4 @@\n-    int offset = operand_offset_at(bsms_attribute_index) + _indy_argv_offset\n-                   + operand_argument_count_at(bsms_attribute_index);\n-    return offset;\n+    BSMAttributeEntry* bsme = bsm_attribute_entry(bsms_attribute_index);\n+    u2* argv_start = bsme->argument_indexes();\n+    int offset = argv_start - operands()->data();\n+    return offset + bsme->argument_count();\n@@ -620,2 +633,2 @@\n-    int op_base = bootstrap_operand_base(cp_index);\n-    return operands()->at(op_base + _indy_bsm_offset);\n+    int bsmai = bootstrap_methods_attribute_index(cp_index);\n+    return bsm_attribute_entry(bsmai)->bootstrap_method_index();\n@@ -625,6 +638,2 @@\n-    int op_base = bootstrap_operand_base(cp_index);\n-    u2 argc = operands()->at(op_base + _indy_argc_offset);\n-    DEBUG_ONLY(int end_offset = op_base + _indy_argv_offset + argc;\n-               int next_offset = bootstrap_operand_limit(cp_index));\n-    assert(end_offset == next_offset, \"matched ending\");\n-    return argc;\n+    int bsmai = bootstrap_methods_attribute_index(cp_index);\n+    return bsm_attribute_entry(bsmai)->argument_count();\n@@ -633,4 +642,4 @@\n-    int op_base = bootstrap_operand_base(cp_index);\n-    DEBUG_ONLY(int argc = operands()->at(op_base + _indy_argc_offset));\n-    assert((uint)j < (uint)argc, \"oob\");\n-    return operands()->at(op_base + _indy_argv_offset + j);\n+    int bsmai = bootstrap_methods_attribute_index(cp_index);\n+    BSMAttributeEntry* bsme = bsm_attribute_entry(bsmai);\n+    assert((uint)j < (uint)bsme->argument_count(), \"oob\");\n+    return bsm_attribute_entry(bsmai)->argument_index(j);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":46,"deletions":37,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"oops\/constantPool.hpp\"\n@@ -399,1 +400,1 @@\n-    u2 num_bootstrap_arguments = cpool()->operand_argument_count_at(n);\n+    u2 num_bootstrap_arguments = cpool()->bsm_attribute_entry(n)->argument_count();\n@@ -409,3 +410,3 @@\n-    u2 bootstrap_method_ref = cpool()->operand_bootstrap_method_ref_index_at(n);\n-    u2 num_bootstrap_arguments = cpool()->operand_argument_count_at(n);\n-    write_u2(bootstrap_method_ref);\n+    BSMAttributeEntry* bsme = cpool()->bsm_attribute_entry(n);\n+    u2 num_bootstrap_arguments = bsme->argument_count();\n+    write_u2(bsme->bootstrap_method_index());\n@@ -414,1 +415,1 @@\n-      u2 bootstrap_argument = cpool()->operand_argument_index_at(n, arg);\n+      u2 bootstrap_argument = cpool()->bsm_attribute_entry(n)->argument_index(arg);\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -665,1 +665,1 @@\n-  u2 old_ref_i = scratch_cp->operand_bootstrap_method_ref_index_at(old_bs_i);\n+  u2 old_ref_i = scratch_cp->bsm_attribute_entry(old_bs_i)->bootstrap_method_index();\n@@ -679,1 +679,1 @@\n-  u2 argc      = scratch_cp->operand_argument_count_at(old_bs_i);\n+  u2 argc      = scratch_cp->bsm_attribute_entry(old_bs_i)->argument_count();\n@@ -686,1 +686,1 @@\n-    u2 old_arg_ref_i = scratch_cp->operand_argument_index_at(old_bs_i, i);\n+    u2 old_arg_ref_i = scratch_cp->bsm_attribute_entry(old_bs_i)->argument_index(i);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1485,8 +1485,0 @@\n-  \/***********************************************\/                       \\\n-  \/* ConstantPool* layout enum for InvokeDynamic *\/                       \\\n-  \/***********************************************\/                       \\\n-                                                                          \\\n-  declare_constant(ConstantPool::_indy_bsm_offset)                        \\\n-  declare_constant(ConstantPool::_indy_argc_offset)                       \\\n-  declare_constant(ConstantPool::_indy_argv_offset)                       \\\n-                                                                          \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -102,4 +102,0 @@\n-    \/\/ fetch constants:\n-    INDY_BSM_OFFSET = db.lookupIntConstant(\"ConstantPool::_indy_bsm_offset\").intValue();\n-    INDY_ARGC_OFFSET = db.lookupIntConstant(\"ConstantPool::_indy_argc_offset\").intValue();\n-    INDY_ARGV_OFFSET = db.lookupIntConstant(\"ConstantPool::_indy_argv_offset\").intValue();\n@@ -128,3 +124,3 @@\n-  private static int INDY_BSM_OFFSET;\n-  private static int INDY_ARGC_OFFSET;\n-  private static int INDY_ARGV_OFFSET;\n+  private static int INDY_BSM_OFFSET = 0;\n+  private static int INDY_ARGC_OFFSET = 1;\n+  private static int INDY_ARGV_OFFSET = 2;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstantPool.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}