{"files":[{"patch":"@@ -133,2 +133,1 @@\n-HeapWord* G1AllocRegion::new_alloc_region_and_allocate(size_t word_size,\n-                                                       bool force) {\n+HeapWord* G1AllocRegion::new_alloc_region_and_allocate(size_t word_size) {\n@@ -139,1 +138,1 @@\n-  HeapRegion* new_alloc_region = allocate_new_region(word_size, force);\n+  HeapRegion* new_alloc_region = allocate_new_region(word_size);\n@@ -261,3 +260,2 @@\n-HeapRegion* MutatorAllocRegion::allocate_new_region(size_t word_size,\n-                                                    bool force) {\n-  return _g1h->new_mutator_alloc_region(word_size, force, _node_index);\n+HeapRegion* MutatorAllocRegion::allocate_new_region(size_t word_size) {\n+  return _g1h->new_mutator_alloc_region(word_size, _node_index);\n@@ -347,3 +345,1 @@\n-HeapRegion* G1GCAllocRegion::allocate_new_region(size_t word_size,\n-                                                 bool force) {\n-  assert(!force, \"not supported for GC alloc regions\");\n+HeapRegion* G1GCAllocRegion::allocate_new_region(size_t word_size) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -86,4 +86,2 @@\n-  \/\/ allocation. The force parameter will be passed on to\n-  \/\/ G1CollectedHeap::allocate_new_alloc_region() and tells it to try\n-  \/\/ to allocate a new region even if the max has been reached.\n-  HeapWord* new_alloc_region_and_allocate(size_t word_size, bool force);\n+  \/\/ allocation.\n+  HeapWord* new_alloc_region_and_allocate(size_t word_size);\n@@ -135,1 +133,1 @@\n-  virtual HeapRegion* allocate_new_region(size_t word_size, bool force) = 0;\n+  virtual HeapRegion* allocate_new_region(size_t word_size) = 0;\n@@ -175,6 +173,0 @@\n-  \/\/ Should be called to allocate a new region even if the max of this\n-  \/\/ type of regions has been reached. Should only be called if other\n-  \/\/ allocation attempts have failed and we are not holding a valid\n-  \/\/ active region.\n-  inline HeapWord* attempt_allocation_force(size_t word_size);\n-\n@@ -216,1 +208,1 @@\n-  virtual HeapRegion* allocate_new_region(size_t word_size, bool force);\n+  virtual HeapRegion* allocate_new_region(size_t word_size);\n@@ -252,1 +244,1 @@\n-  virtual HeapRegion* allocate_new_region(size_t word_size, bool force);\n+  virtual HeapRegion* allocate_new_region(size_t word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.hpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  HeapWord* result = new_alloc_region_and_allocate(desired_word_size, false \/* force *\/);\n+  HeapWord* result = new_alloc_region_and_allocate(desired_word_size);\n@@ -111,13 +111,0 @@\n-inline HeapWord* G1AllocRegion::attempt_allocation_force(size_t word_size) {\n-  assert_alloc_region(_alloc_region != nullptr, \"not initialized properly\");\n-\n-  trace(\"forcing alloc\", word_size, word_size);\n-  HeapWord* result = new_alloc_region_and_allocate(word_size, true \/* force *\/);\n-  if (result != nullptr) {\n-    trace(\"alloc forced\", word_size, word_size, word_size, result);\n-    return result;\n-  }\n-  trace(\"alloc forced failed\", word_size, word_size);\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.inline.hpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -124,2 +124,0 @@\n-  inline HeapWord* attempt_allocation_force(size_t word_size);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,5 +74,0 @@\n-inline HeapWord* G1Allocator::attempt_allocation_force(size_t word_size) {\n-  uint node_index = current_node_index();\n-  return mutator_alloc_region(node_index)->attempt_allocation_force(word_size);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2849,1 +2849,0 @@\n-                                                      bool force,\n@@ -2853,1 +2852,1 @@\n-  if (force || should_allocate) {\n+  if (should_allocate) {\n@@ -2860,1 +2859,1 @@\n-      G1HRPrinter::alloc(new_alloc_region, !should_allocate);\n+      G1HRPrinter::alloc(new_alloc_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -468,1 +468,1 @@\n-  HeapRegion* new_mutator_alloc_region(size_t word_size, bool force, uint node_index);\n+  HeapRegion* new_mutator_alloc_region(size_t word_size, uint node_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  static void alloc(HeapRegion* hr, bool force = false) { print(force ? \"ALLOC-FORCE\" : \"ALLOC\", hr); }\n+  static void alloc(HeapRegion* hr)                     { print(\"ALLOC\", hr); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HRPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}