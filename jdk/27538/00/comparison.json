{"files":[{"patch":"@@ -66,47 +66,0 @@\n-#ifdef DTRACE_ENABLED\n-\n-\/\/ Only bother with this argument setup if dtrace is available\n-\/\/ TODO-FIXME: probes should not fire when caller is _blocked.  assert() accordingly.\n-\n-\n-#define DTRACE_MONITOR_PROBE_COMMON(obj, thread)                           \\\n-  char* bytes = nullptr;                                                   \\\n-  int len = 0;                                                             \\\n-  jlong jtid = SharedRuntime::get_java_tid(thread);                        \\\n-  Symbol* klassname = obj->klass()->name();                                \\\n-  if (klassname != nullptr) {                                              \\\n-    bytes = (char*)klassname->bytes();                                     \\\n-    len = klassname->utf8_length();                                        \\\n-  }\n-\n-#define DTRACE_MONITOR_WAIT_PROBE(monitor, obj, thread, millis)            \\\n-  {                                                                        \\\n-    if (DTraceMonitorProbes) {                                             \\\n-      DTRACE_MONITOR_PROBE_COMMON(obj, thread);                            \\\n-      HOTSPOT_MONITOR_WAIT(jtid,                                           \\\n-                           (monitor), bytes, len, (millis));               \\\n-    }                                                                      \\\n-  }\n-\n-#define HOTSPOT_MONITOR_contended__enter HOTSPOT_MONITOR_CONTENDED_ENTER\n-#define HOTSPOT_MONITOR_contended__entered HOTSPOT_MONITOR_CONTENDED_ENTERED\n-#define HOTSPOT_MONITOR_contended__exit HOTSPOT_MONITOR_CONTENDED_EXIT\n-#define HOTSPOT_MONITOR_notify HOTSPOT_MONITOR_NOTIFY\n-#define HOTSPOT_MONITOR_notifyAll HOTSPOT_MONITOR_NOTIFYALL\n-\n-#define DTRACE_MONITOR_PROBE(probe, monitor, obj, thread)                  \\\n-  {                                                                        \\\n-    if (DTraceMonitorProbes) {                                             \\\n-      DTRACE_MONITOR_PROBE_COMMON(obj, thread);                            \\\n-      HOTSPOT_MONITOR_##probe(jtid,                                        \\\n-                              (uintptr_t)(monitor), bytes, len);           \\\n-    }                                                                      \\\n-  }\n-\n-#else \/\/  ndef DTRACE_ENABLED\n-\n-#define DTRACE_MONITOR_WAIT_PROBE(obj, thread, millis, mon)    {;}\n-#define DTRACE_MONITOR_PROBE(probe, obj, thread, mon)          {;}\n-\n-#endif \/\/ ndef DTRACE_ENABLED\n-\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -42,0 +42,46 @@\n+#ifdef DTRACE_ENABLED\n+\n+\/\/ Only bother with this argument setup if dtrace is available\n+\/\/ TODO-FIXME: probes should not fire when caller is _blocked.  assert() accordingly.\n+\n+#define DTRACE_MONITOR_PROBE_COMMON(obj, thread)                           \\\n+  char* bytes = nullptr;                                                   \\\n+  int len = 0;                                                             \\\n+  jlong jtid = SharedRuntime::get_java_tid(thread);                        \\\n+  Symbol* klassname = obj->klass()->name();                                \\\n+  if (klassname != nullptr) {                                              \\\n+    bytes = (char*)klassname->bytes();                                     \\\n+    len = klassname->utf8_length();                                        \\\n+  }\n+\n+#define DTRACE_MONITOR_WAIT_PROBE(monitor, obj, thread, millis)            \\\n+  {                                                                        \\\n+    if (DTraceMonitorProbes) {                                             \\\n+      DTRACE_MONITOR_PROBE_COMMON(obj, thread);                            \\\n+      HOTSPOT_MONITOR_WAIT(jtid,                                           \\\n+                           (uintptr_t) monitor, bytes, len, millis);       \\\n+    }                                                                      \\\n+  }\n+\n+#define HOTSPOT_MONITOR_contended__enter HOTSPOT_MONITOR_CONTENDED_ENTER\n+#define HOTSPOT_MONITOR_contended__entered HOTSPOT_MONITOR_CONTENDED_ENTERED\n+#define HOTSPOT_MONITOR_contended__exit HOTSPOT_MONITOR_CONTENDED_EXIT\n+#define HOTSPOT_MONITOR_notify HOTSPOT_MONITOR_NOTIFY\n+#define HOTSPOT_MONITOR_notifyAll HOTSPOT_MONITOR_NOTIFYALL\n+#define HOTSPOT_MONITOR_waited HOTSPOT_MONITOR_WAITED\n+\n+#define DTRACE_MONITOR_PROBE(probe, monitor, obj, thread)                  \\\n+  {                                                                        \\\n+    if (DTraceMonitorProbes) {                                             \\\n+      DTRACE_MONITOR_PROBE_COMMON(obj, thread);                            \\\n+      HOTSPOT_MONITOR_##probe(jtid,                                        \\\n+                              (uintptr_t) monitor, bytes, len);            \\\n+    }                                                                      \\\n+  }\n+\n+#else \/\/  ndef DTRACE_ENABLED\n+\n+#define DTRACE_MONITOR_WAIT_PROBE(obj, thread, millis, mon)    {;}\n+#define DTRACE_MONITOR_PROBE(probe, obj, thread, mon)          {;}\n+\n+#endif \/\/ ndef DTRACE_ENABLED\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -213,44 +213,0 @@\n-#ifdef DTRACE_ENABLED\n-\n-\/\/ Only bother with this argument setup if dtrace is available\n-\/\/ TODO-FIXME: probes should not fire when caller is _blocked.  assert() accordingly.\n-\n-#define DTRACE_MONITOR_PROBE_COMMON(obj, thread)                           \\\n-  char* bytes = nullptr;                                                      \\\n-  int len = 0;                                                             \\\n-  jlong jtid = SharedRuntime::get_java_tid(thread);                        \\\n-  Symbol* klassname = obj->klass()->name();                                \\\n-  if (klassname != nullptr) {                                                 \\\n-    bytes = (char*)klassname->bytes();                                     \\\n-    len = klassname->utf8_length();                                        \\\n-  }\n-\n-#define DTRACE_MONITOR_WAIT_PROBE(monitor, obj, thread, millis)            \\\n-  {                                                                        \\\n-    if (DTraceMonitorProbes) {                                             \\\n-      DTRACE_MONITOR_PROBE_COMMON(obj, thread);                            \\\n-      HOTSPOT_MONITOR_WAIT(jtid,                                           \\\n-                           (uintptr_t)(monitor), bytes, len, (millis));    \\\n-    }                                                                      \\\n-  }\n-\n-#define HOTSPOT_MONITOR_PROBE_notify HOTSPOT_MONITOR_NOTIFY\n-#define HOTSPOT_MONITOR_PROBE_notifyAll HOTSPOT_MONITOR_NOTIFYALL\n-#define HOTSPOT_MONITOR_PROBE_waited HOTSPOT_MONITOR_WAITED\n-\n-#define DTRACE_MONITOR_PROBE(probe, monitor, obj, thread)                  \\\n-  {                                                                        \\\n-    if (DTraceMonitorProbes) {                                             \\\n-      DTRACE_MONITOR_PROBE_COMMON(obj, thread);                            \\\n-      HOTSPOT_MONITOR_PROBE_##probe(jtid, \/* probe = waited *\/             \\\n-                                    (uintptr_t)(monitor), bytes, len);     \\\n-    }                                                                      \\\n-  }\n-\n-#else \/\/  ndef DTRACE_ENABLED\n-\n-#define DTRACE_MONITOR_WAIT_PROBE(obj, thread, millis, mon)    {;}\n-#define DTRACE_MONITOR_PROBE(probe, obj, thread, mon)          {;}\n-\n-#endif \/\/ ndef DTRACE_ENABLED\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"}]}