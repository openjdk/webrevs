{"files":[{"patch":"@@ -259,13 +259,0 @@\n-void IdealGraphPrinter::print_prop_record(const IdealGraphPrintRecord rec[], int size) {\n-  for ( int i = 0; i < size; i++ ) {\n-    if (rec[i]._cond != 0) {\n-      if (rec[i]._svalue != nullptr) {\n-        print_prop(rec[i]._name, rec[i]._svalue);\n-      }\n-      else {\n-        print_prop(rec[i]._name, rec[i]._ivalue);\n-      }\n-    }\n-  }\n-}\n-\n@@ -522,31 +509,2 @@\n-    const jushort flags = node->flags();\n-    const IdealGraphPrintRecord rec[] = {\n-        {((flags & Node::Flag_is_Copy) != 0), \"is_copy\", \"true\"},\n-        {((flags & Node::Flag_rematerialize) != 0), \"rematerialize\", \"true\"},\n-        {((flags & Node::Flag_needs_anti_dependence_check) != 0), \"needs_anti_dependence_check\", \"true\"},\n-        {((flags & Node::Flag_is_macro) != 0), \"is_macro\", \"true\"},\n-        {((flags & Node::Flag_is_Con) != 0), \"is_con\", \"true\"},\n-        {((flags & Node::Flag_is_cisc_alternate) != 0), \"is_cisc_alternate\", \"true\"},\n-        {((flags & Node::Flag_is_dead_loop_safe) != 0), \"is_dead_loop_safe\", \"true\"},\n-        {((flags & Node::Flag_may_be_short_branch) != 0), \"may_be_short_branch\",\"true\"},\n-        {((flags & Node::Flag_has_call) != 0), \"has_call\", \"true\"},\n-        {((flags & Node::Flag_has_swapped_edges) != 0), \"has_swapped_edges\", \"true\"}\n-      };\n-    print_prop_record(rec,(sizeof(rec)\/sizeof(IdealGraphPrintRecord)));\n-\n-    if (C->matcher() != nullptr) {\n-      if (C->matcher()->is_shared(node)) {\n-        print_prop(\"is_shared\", \"true\");\n-      } else {\n-        print_prop(\"is_shared\", \"false\");\n-      }\n-      if (C->matcher()->is_dontcare(node)) {\n-        print_prop(\"is_dontcare\", \"true\");\n-      } else {\n-        print_prop(\"is_dontcare\", \"false\");\n-      }\n-      Node* old = C->matcher()->find_old_node(node);\n-      if (old != nullptr) {\n-        print_prop(\"old_node_idx\", old->_idx);\n-      }\n-    }\n+    PrintProperties print_node(this);\n+    print_node.print_node_properties(node, C);\n@@ -1081,30 +1039,4 @@\n-      IdealGraphPrintRecord rec[] = {\n-          {1, \"mask\", buffer},\n-          {1, \"mask_size\", nullptr, lrg.mask_size()},\n-          {((lrg._degree_valid != 0)), \"degree\", nullptr, lrg.degree()},\n-          {1, \"num_regs\", nullptr, lrg.num_regs()},\n-          {1, \"reg_pressure\", nullptr, lrg.reg_pressure()},\n-          {1, \"cost\", nullptr, (int) lrg._cost},\n-          {1, \"area\", nullptr, (int) lrg._area},\n-          {1, \"score\", nullptr, (int) lrg.score()},\n-          {(lrg._risk_bias != 0), \"risk_bias\", nullptr, (int) lrg._risk_bias},\n-          {(lrg._copy_bias != 0), \"copy_bias\", nullptr, (int) lrg._copy_bias},\n-          {lrg.is_singledef(), \"is_singledef\", TRUE_VALUE},\n-          {lrg.is_multidef(), \"is_multidef\", TRUE_VALUE},\n-          {(lrg._is_oop != 0), \"is_oop\", TRUE_VALUE},\n-          {(lrg._is_float != 0), \"is_float\", TRUE_VALUE},\n-          {(lrg._is_vector != 0), \"is_vector\", TRUE_VALUE},\n-          {(lrg._is_predicate != 0), \"is_predicate\", TRUE_VALUE},\n-          {(lrg._is_scalable != 0), \"is_scalable\", TRUE_VALUE},\n-          {(lrg._was_spilled1 != 0), \"was_spilled1\", TRUE_VALUE},\n-          {(lrg._was_spilled2 != 0), \"was_spilled2\", TRUE_VALUE},\n-          {(lrg._direct_conflict != 0), \"direct_conflict\", TRUE_VALUE},\n-          {(lrg._fat_proj != 0), \"fat_proj\", TRUE_VALUE},\n-          {(lrg._was_lo != 0), \"_was_lo\", TRUE_VALUE},\n-          {(lrg._has_copy != 0), \"has_copy\", TRUE_VALUE},\n-          {(lrg._at_risk != 0), \"at_risk\", TRUE_VALUE},\n-          {(lrg._must_spill != 0), \"must_spill\", TRUE_VALUE},\n-          {(lrg._is_bound != 0), \"is_bound\", TRUE_VALUE},\n-          {lrg._msize_valid && lrg._degree_valid && lrg.lo_degree(), \"trivial\", TRUE_VALUE}\n-        };\n-      print_prop_record(rec, (sizeof(rec)\/sizeof(IdealGraphPrintRecord)));\n+\n+      PrintProperties print_node(this);\n+      print_node.print_lrg_properties(lrg, buffer);\n+\n@@ -1182,0 +1114,70 @@\n+void PrintProperties::print_node_properties(Node* node, Compile* C){\n+  const jushort flags = node->flags();\n+  print_property((flags & Node::Flag_is_Copy), \"is_copy\");\n+  print_property((flags & Node::Flag_rematerialize), \"rematerialize\");\n+  print_property((flags & Node::Flag_needs_anti_dependence_check), \"needs_anti_dependence_check\");\n+  print_property((flags & Node::Flag_is_macro), \"is_macro\");\n+  print_property((flags & Node::Flag_is_Con), \"is_con\");\n+  print_property((flags & Node::Flag_is_cisc_alternate), \"is_cisc_alternate\");\n+  print_property((flags & Node::Flag_is_dead_loop_safe), \"is_dead_loop_safe\");\n+  print_property((flags & Node::Flag_may_be_short_branch), \"may_be_short_branch\");\n+  print_property((flags & Node::Flag_has_call), \"has_call\");\n+  print_property((flags & Node::Flag_has_swapped_edges), \"has_swapped_edges\");\n+  if (C->matcher() != nullptr) {\n+    print_property(C->matcher()->is_shared(node),\"is_shared\");\n+    print_property(!(C->matcher()->is_shared(node)), \"is_shared\", IdealGraphPrinter::FALSE_VALUE);\n+    print_property(C->matcher()->is_dontcare(node), \"is_dontcare\");\n+    print_property(!(C->matcher()->is_dontcare(node)),\"is_dontcare\", IdealGraphPrinter::FALSE_VALUE);\n+    print_property((C->matcher()->find_old_node(node) != nullptr), \"old_node_idx\", C->matcher()->find_old_node(node)->_idx);\n+  }\n+}\n+\n+void PrintProperties::print_lrg_properties(const LRG &lrg, const char *buffer) {\n+  print_property(true, \"mask\", buffer);\n+  print_property(true, \"mask_size\", lrg.mask_size());\n+  print_property(lrg._degree_valid, \"degree\", lrg.degree());\n+  print_property(true, \"num_regs\", lrg.num_regs());\n+  print_property(true, \"reg_pressure\", lrg.reg_pressure());\n+  print_property(true, \"cost\", lrg._cost);\n+  print_property(true, \"area\", lrg._area);\n+  print_property(true, \"score\", lrg.score());\n+  print_property((lrg._risk_bias != 0), \"risk_bias\", lrg._risk_bias);\n+  print_property((lrg._copy_bias != 0), \"copy_bias\", lrg._copy_bias);\n+  print_property(lrg.is_singledef(), \"is_singledef\");\n+  print_property(lrg.is_multidef(), \"is_multidef\");\n+  print_property(lrg._is_oop, \"is_oop\");\n+  print_property(lrg._is_float, \"is_float\");\n+  print_property(lrg._is_vector, \"is_vector\");\n+  print_property(lrg._is_predicate, \"is_predicate\");\n+  print_property(lrg._is_scalable, \"is_scalable\");\n+  print_property(lrg._was_spilled1, \"was_spilled1\");\n+  print_property(lrg._was_spilled2, \"was_spilled2\");\n+  print_property(lrg._direct_conflict, \"direct_conflict\");\n+  print_property(lrg._fat_proj, \"fat_proj\");\n+  print_property(lrg._was_lo, \"_was_lo\");\n+  print_property(lrg._has_copy, \"has_copy\");\n+  print_property(lrg._at_risk, \"at_risk\");\n+  print_property(lrg._must_spill, \"must_spill\");\n+  print_property(lrg._is_bound, \"is_bound\");\n+  print_property((lrg._msize_valid && lrg._degree_valid && lrg.lo_degree()), \"trivial\");\n+}\n+\n+void PrintProperties::print_property(int flag, const char* name) {\n+  if (flag) {\n+    _printer->print_prop(name, IdealGraphPrinter::TRUE_VALUE);\n+  }\n+}\n+\n+void PrintProperties::print_property(int flag, const char* name, const char* val) {\n+  if (flag) {\n+    _printer->print_prop(name, val);\n+  }\n+}\n+\n+void PrintProperties::print_property(int flag, const char* name, int val) {\n+  if (flag) {\n+    _printer->print_prop(name, val);\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":76,"deletions":74,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+\n@@ -45,0 +46,2 @@\n+class LRG;\n+class PrintProperties;\n@@ -47,1 +50,1 @@\n- private:\n+  friend class PrintProperties;\n@@ -49,0 +52,1 @@\n+private:\n@@ -118,6 +122,0 @@\n-  struct IdealGraphPrintRecord {\n-    bool _cond;\n-    const char *_name;\n-    const char *_svalue = nullptr;\n-    int _ivalue = -1;\n-  };\n@@ -147,1 +145,0 @@\n-  void print_prop_record(const IdealGraphPrintRecord rec[], int size);\n@@ -175,0 +172,14 @@\n+class PrintProperties\n+{\n+private:\n+  IdealGraphPrinter *_printer;\n+\n+public:\n+  PrintProperties(IdealGraphPrinter *printer) : _printer(printer) {}\n+  void print_node_properties(Node *node, Compile *C);\n+  void print_lrg_properties(const LRG &lrg, const char *buffer);\n+  void print_property(int flag, const char *name);\n+  void print_property(int flag, const char *name, const char *val);\n+  void print_property(int flag, const char *name, int val);\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.hpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"}]}