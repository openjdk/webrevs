{"files":[{"patch":"@@ -259,0 +259,13 @@\n+void IdealGraphPrinter::print_prop_record(const IdealGraphPrintRecord rec[], int size) {\n+  for ( int i = 0; i < size; i++ ) {\n+    if (rec[i]._cond != 0) {\n+      if (rec[i]._svalue != nullptr) {\n+        print_prop(rec[i]._name, rec[i]._svalue);\n+      }\n+      else {\n+        print_prop(rec[i]._name, rec[i]._ivalue);\n+      }\n+    }\n+  }\n+}\n+\n@@ -510,30 +523,13 @@\n-    if (flags & Node::Flag_is_Copy) {\n-      print_prop(\"is_copy\", \"true\");\n-    }\n-    if (flags & Node::Flag_rematerialize) {\n-      print_prop(\"rematerialize\", \"true\");\n-    }\n-    if (flags & Node::Flag_needs_anti_dependence_check) {\n-      print_prop(\"needs_anti_dependence_check\", \"true\");\n-    }\n-    if (flags & Node::Flag_is_macro) {\n-      print_prop(\"is_macro\", \"true\");\n-    }\n-    if (flags & Node::Flag_is_Con) {\n-      print_prop(\"is_con\", \"true\");\n-    }\n-    if (flags & Node::Flag_is_cisc_alternate) {\n-      print_prop(\"is_cisc_alternate\", \"true\");\n-    }\n-    if (flags & Node::Flag_is_dead_loop_safe) {\n-      print_prop(\"is_dead_loop_safe\", \"true\");\n-    }\n-    if (flags & Node::Flag_may_be_short_branch) {\n-      print_prop(\"may_be_short_branch\", \"true\");\n-    }\n-    if (flags & Node::Flag_has_call) {\n-      print_prop(\"has_call\", \"true\");\n-    }\n-    if (flags & Node::Flag_has_swapped_edges) {\n-      print_prop(\"has_swapped_edges\", \"true\");\n-    }\n+    const IdealGraphPrintRecord rec[] = {\n+        {((flags & Node::Flag_is_Copy) != 0), \"is_copy\", \"true\"},\n+        {((flags & Node::Flag_rematerialize) != 0), \"rematerialize\", \"true\"},\n+        {((flags & Node::Flag_needs_anti_dependence_check) != 0), \"needs_anti_dependence_check\", \"true\"},\n+        {((flags & Node::Flag_is_macro) != 0), \"is_macro\", \"true\"},\n+        {((flags & Node::Flag_is_Con) != 0), \"is_con\", \"true\"},\n+        {((flags & Node::Flag_is_cisc_alternate) != 0), \"is_cisc_alternate\", \"true\"},\n+        {((flags & Node::Flag_is_dead_loop_safe) != 0), \"is_dead_loop_safe\", \"true\"},\n+        {((flags & Node::Flag_may_be_short_branch) != 0), \"may_be_short_branch\",\"true\"},\n+        {((flags & Node::Flag_has_call) != 0), \"has_call\", \"true\"},\n+        {((flags & Node::Flag_has_swapped_edges) != 0), \"has_swapped_edges\", \"true\"}\n+      };\n+    print_prop_record(rec,(sizeof(rec)\/sizeof(IdealGraphPrintRecord)));\n@@ -1085,67 +1081,30 @@\n-      print_prop(\"mask\", buffer);\n-      print_prop(\"mask_size\", lrg.mask_size());\n-      if (lrg._degree_valid) {\n-        print_prop(\"degree\", lrg.degree());\n-      }\n-      print_prop(\"num_regs\", lrg.num_regs());\n-      print_prop(\"reg_pressure\", lrg.reg_pressure());\n-      print_prop(\"cost\", lrg._cost);\n-      print_prop(\"area\", lrg._area);\n-      print_prop(\"score\", lrg.score());\n-      if (lrg._risk_bias != 0) {\n-        print_prop(\"risk_bias\", lrg._risk_bias);\n-      }\n-      if (lrg._copy_bias != 0) {\n-        print_prop(\"copy_bias\", lrg._copy_bias);\n-      }\n-      if (lrg.is_singledef()) {\n-        print_prop(\"is_singledef\", TRUE_VALUE);\n-      }\n-      if (lrg.is_multidef()) {\n-        print_prop(\"is_multidef\", TRUE_VALUE);\n-      }\n-      if (lrg._is_oop) {\n-        print_prop(\"is_oop\", TRUE_VALUE);\n-      }\n-      if (lrg._is_float) {\n-        print_prop(\"is_float\", TRUE_VALUE);\n-      }\n-      if (lrg._is_vector) {\n-        print_prop(\"is_vector\", TRUE_VALUE);\n-      }\n-      if (lrg._is_predicate) {\n-        print_prop(\"is_predicate\", TRUE_VALUE);\n-      }\n-      if (lrg._is_scalable) {\n-        print_prop(\"is_scalable\", TRUE_VALUE);\n-      }\n-      if (lrg._was_spilled1) {\n-        print_prop(\"was_spilled1\", TRUE_VALUE);\n-      }\n-      if (lrg._was_spilled2) {\n-        print_prop(\"was_spilled2\", TRUE_VALUE);\n-      }\n-      if (lrg._direct_conflict) {\n-        print_prop(\"direct_conflict\", TRUE_VALUE);\n-      }\n-      if (lrg._fat_proj) {\n-        print_prop(\"fat_proj\", TRUE_VALUE);\n-      }\n-      if (lrg._was_lo) {\n-        print_prop(\"_was_lo\", TRUE_VALUE);\n-      }\n-      if (lrg._has_copy) {\n-        print_prop(\"has_copy\", TRUE_VALUE);\n-      }\n-      if (lrg._at_risk) {\n-        print_prop(\"at_risk\", TRUE_VALUE);\n-      }\n-      if (lrg._must_spill) {\n-        print_prop(\"must_spill\", TRUE_VALUE);\n-      }\n-      if (lrg._is_bound) {\n-        print_prop(\"is_bound\", TRUE_VALUE);\n-      }\n-      if (lrg._msize_valid && lrg._degree_valid && lrg.lo_degree()) {\n-        print_prop(\"trivial\", TRUE_VALUE);\n-      }\n+      IdealGraphPrintRecord rec[] = {\n+          {1, \"mask\", buffer},\n+          {1, \"mask_size\", nullptr, lrg.mask_size()},\n+          {((lrg._degree_valid != 0)), \"degree\", nullptr, lrg.degree()},\n+          {1, \"num_regs\", nullptr, lrg.num_regs()},\n+          {1, \"reg_pressure\", nullptr, lrg.reg_pressure()},\n+          {1, \"cost\", nullptr, (int) lrg._cost},\n+          {1, \"area\", nullptr, (int) lrg._area},\n+          {1, \"score\", nullptr, (int) lrg.score()},\n+          {(lrg._risk_bias != 0), \"risk_bias\", nullptr, (int) lrg._risk_bias},\n+          {(lrg._copy_bias != 0), \"copy_bias\", nullptr, (int) lrg._copy_bias},\n+          {lrg.is_singledef(), \"is_singledef\", TRUE_VALUE},\n+          {lrg.is_multidef(), \"is_multidef\", TRUE_VALUE},\n+          {(lrg._is_oop != 0), \"is_oop\", TRUE_VALUE},\n+          {(lrg._is_float != 0), \"is_float\", TRUE_VALUE},\n+          {(lrg._is_vector != 0), \"is_vector\", TRUE_VALUE},\n+          {(lrg._is_predicate != 0), \"is_predicate\", TRUE_VALUE},\n+          {(lrg._is_scalable != 0), \"is_scalable\", TRUE_VALUE},\n+          {(lrg._was_spilled1 != 0), \"was_spilled1\", TRUE_VALUE},\n+          {(lrg._was_spilled2 != 0), \"was_spilled2\", TRUE_VALUE},\n+          {(lrg._direct_conflict != 0), \"direct_conflict\", TRUE_VALUE},\n+          {(lrg._fat_proj != 0), \"fat_proj\", TRUE_VALUE},\n+          {(lrg._was_lo != 0), \"_was_lo\", TRUE_VALUE},\n+          {(lrg._has_copy != 0), \"has_copy\", TRUE_VALUE},\n+          {(lrg._at_risk != 0), \"at_risk\", TRUE_VALUE},\n+          {(lrg._must_spill != 0), \"must_spill\", TRUE_VALUE},\n+          {(lrg._is_bound != 0), \"is_bound\", TRUE_VALUE},\n+          {lrg._msize_valid && lrg._degree_valid && lrg.lo_degree(), \"trivial\", TRUE_VALUE}\n+        };\n+      print_prop_record(rec, (sizeof(rec)\/sizeof(IdealGraphPrintRecord)));\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":56,"deletions":97,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -118,0 +118,6 @@\n+  struct IdealGraphPrintRecord {\n+    bool _cond;\n+    const char *_name;\n+    const char *_svalue = nullptr;\n+    int _ivalue = -1;\n+  };\n@@ -141,0 +147,1 @@\n+  void print_prop_record(const IdealGraphPrintRecord rec[], int size);\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}