{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import sun.security.util.SecurityProperties;\n@@ -139,3 +140,6 @@\n-        attrs.put(\"SupportedModes\", \"ECB\");\n-        attrs.put(\"SupportedPaddings\", \"NOPADDING|PKCS1PADDING|OAEPPADDING\"\n-                + \"|OAEPWITHMD5ANDMGF1PADDING\"\n+        attrs.put(\"SupportedKeyClasses\",\n+                \"java.security.interfaces.RSAPublicKey\" +\n+                \"|java.security.interfaces.RSAPrivateKey\");\n+\n+        String supportedPaddingsStr =\n+                \"NOPADDING|OAEPPADDING|OAEPWITHMD5ANDMGF1PADDING\"\n@@ -149,5 +153,7 @@\n-                + \"|OAEPWITHSHA-512\/256ANDMGF1PADDING\");\n-        attrs.put(\"SupportedKeyClasses\",\n-                \"java.security.interfaces.RSAPublicKey\" +\n-                \"|java.security.interfaces.RSAPrivateKey\");\n-        ps(\"Cipher\", \"RSA\",\n+                + \"|OAEPWITHSHA-512\/256ANDMGF1PADDING\";\n+\n+        if (SecurityProperties.getPKCS1PaddingSecurityProp()) {\n+            attrs.put(\"SupportedModes\", \"ECB\");\n+            supportedPaddingsStr += \"|PKCS1PADDING\";\n+            attrs.put(\"SupportedPaddings\", supportedPaddingsStr);\n+            ps(\"Cipher\", \"RSA\",\n@@ -155,0 +161,5 @@\n+        } else {\n+            attrs.put(\"SupportedPaddings\", supportedPaddingsStr);\n+            ps(\"Cipher\", \"RSA\/ECB\",\n+                \"com.sun.crypto.provider.RSACipher\", null, attrs);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,12 @@\n+    \/**\n+     * Convenience method for fetching the \"jdk.crypto.supportPKCS1Padding\"\n+     * security property value as boolean.\n+     *\n+     * @return true unless the security property\n+     *         \"jdk.crypto.supportPKCS1Padding\" is explicitly set to \"false\".\n+     *\/\n+    public static boolean getPKCS1PaddingSecurityProp() {\n+        String value = Security.getProperty(\"jdk.crypto.supportPKCS1Padding\");\n+        return (value == null || !value.equalsIgnoreCase(\"false\"));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProperties.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1578,0 +1578,11 @@\n+\n+#\n+# Whether to support the RSA cipher w\/ PKCS#1 Padding\n+#\n+# This property defines whether the JDK providers support the\n+# RSA\/ECB\/PKCS1Padding cipher. Note that \"RSA\" is an alias of\n+# RSA\/ECB\/PKCS1Padding and will also be unavailable if this\n+# property is set to false.\n+#\n+#jdk.crypto.supportPKCS1Padding=false\n+\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import sun.security.util.SecurityProperties;\n@@ -71,0 +72,2 @@\n+    private static final Descriptor RSA_CIPHER_DESC;\n+\n@@ -849,1 +852,2 @@\n-        d(CIP, \"RSA\/ECB\/PKCS1Padding\",          P11RSACipher,\n+        RSA_CIPHER_DESC = new Descriptor(\n+                CIP, \"RSA\/ECB\/PKCS1Padding\",  P11RSACipher,\n@@ -852,0 +856,2 @@\n+        register(RSA_CIPHER_DESC);\n+\n@@ -1216,0 +1222,1 @@\n+\n@@ -1347,0 +1354,4 @@\n+        if (!SecurityProperties.getPKCS1PaddingSecurityProp()) {\n+            supportedAlgs.remove(RSA_CIPHER_DESC);\n+        }\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import sun.security.util.SecurityProperties;\n@@ -247,10 +248,9 @@\n-        attrs.clear();\n-        attrs.put(\"SupportedModes\", \"ECB\");\n-        attrs.put(\"SupportedPaddings\", \"PKCS1PADDING\");\n-        attrs.put(\"SupportedKeyClasses\", \"sun.security.mscapi.CKey\");\n-        putService(new ProviderService(p, \"Cipher\",\n-                   \"RSA\", \"sun.security.mscapi.CRSACipher\",\n-                   null, attrs));\n-        putService(new ProviderService(p, \"Cipher\",\n-                   \"RSA\/ECB\/PKCS1Padding\", \"sun.security.mscapi.CRSACipher\",\n-                   null, attrs));\n+        if (SecurityProperties.getPKCS1PaddingSecurityProp()) {\n+            attrs.clear();\n+            attrs.put(\"SupportedModes\", \"ECB\");\n+            attrs.put(\"SupportedPaddings\", \"PKCS1PADDING\");\n+            attrs.put(\"SupportedKeyClasses\", \"sun.security.mscapi.CKey\");\n+            putService(new ProviderService(p, \"Cipher\",\n+                       \"RSA\", \"sun.security.mscapi.CRSACipher\",\n+                       null, attrs));\n+        }\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/SunMSCAPI.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8360146\n+ * @summary Test Security property for disable PKCS1Padding against SunJCE\n+ *         and SunMSCAPI (if present) providers\n+ * @run main\/othervm TestPKCS1PaddingProp true\n+ * @run main\/othervm TestPKCS1PaddingProp false\n+ * @run main\/othervm TestPKCS1PaddingProp huh\n+ *\/\n+import java.util.List;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Security;\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+public class TestPKCS1PaddingProp {\n+\n+    private static final String PROP_NAME = \"jdk.crypto.supportPKCS1Padding\";\n+\n+    private static void test(String alg, Provider p, boolean shouldThrow) {\n+        System.out.println(\"Testing \" + p.getName() + \": \" + alg +\n+                \", shouldThrow=\" + shouldThrow);\n+        try {\n+            Cipher c = Cipher.getInstance(alg, p);\n+            if (shouldThrow) {\n+                throw new RuntimeException(\"Expected ex not thrown\");\n+            }\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n+            if (!shouldThrow) {\n+                throw new RuntimeException(\"Unexpected ex\", e);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String[] provNames = new String[] {\n+                System.getProperty(\"test.provider.name\", \"SunJCE\"),\n+                \"SunMSCAPI\"\n+        };\n+        String propValue = args[0];\n+        System.out.println(\"Setting Security Prop \" + PROP_NAME + \" = \" +\n+                propValue);\n+        Security.setProperty(PROP_NAME, propValue);\n+        boolean shouldThrow =\n+                Security.getProperty(PROP_NAME).equalsIgnoreCase(\"false\");\n+        for (String pn : provNames) {\n+            Provider p = Security.getProvider(pn);\n+            if (p == null) {\n+                System.out.println(\"Skip testing \" + pn + \": not available\");\n+                continue;\n+            }\n+            for (String a : List.of(\"RSA\/ECB\/PKCS1Padding\", \"RSA\")) {\n+                test(a, p, shouldThrow);\n+            }\n+        }\n+        System.out.println(\"Done\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/TestPKCS1PaddingProp.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8360146\n+ * @summary Test Security property for disable PKCS1Padding against SunPKCS11\n+ *         provider\n+ * @library \/test\/lib ..\n+ * @run main\/othervm TestPKCS1PaddingProp true\n+ * @run main\/othervm TestPKCS1PaddingProp false\n+ * @run main\/othervm TestPKCS1PaddingProp huh\n+ *\/\n+\n+import java.util.List;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Security;\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+public class TestPKCS1PaddingProp extends PKCS11Test {\n+\n+    private static final String PROP_NAME = \"jdk.crypto.supportPKCS1Padding\";\n+\n+    private static void test(String alg, Provider p, boolean shouldThrow) {\n+        System.out.println(\"Testing \" + p.getName() + \": \" + alg +\n+                \", shouldThrow=\" + shouldThrow);\n+        try {\n+            Cipher c = Cipher.getInstance(alg, p);\n+            if (shouldThrow) {\n+                throw new RuntimeException(\"Expected ex not thrown\");\n+            }\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n+            if (!shouldThrow) {\n+                throw new RuntimeException(\"Unexpected ex\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        boolean shouldThrow =\n+                Security.getProperty(PROP_NAME).equalsIgnoreCase(\"false\");\n+        for (String a : List.of(\"RSA\/ECB\/PKCS1Padding\", \"RSA\")) {\n+            test(a, p, shouldThrow);\n+        }\n+        System.out.println(\"Done\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String propValue = args[0];\n+        System.out.println(\"Setting Security Prop \" + PROP_NAME + \" = \" +\n+                propValue);\n+        Security.setProperty(PROP_NAME, propValue);\n+        main(new TestPKCS1PaddingProp(), args);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestPKCS1PaddingProp.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}