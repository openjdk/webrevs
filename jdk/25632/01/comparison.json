{"files":[{"patch":"@@ -83,0 +83,3 @@\n+            if (isDestroyed()) {\n+                throw new IllegalStateException(\"key is destroyed\");\n+            }\n@@ -142,1 +145,0 @@\n-     *\n@@ -205,0 +207,3 @@\n+            if (isDestroyed()) {\n+                throw new IllegalStateException(\"key is destroyed\");\n+            }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKey.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -375,0 +375,1 @@\n+     * @exception IllegalStateException if the given key is already destroyed.\n@@ -378,0 +379,6 @@\n+        if (key == null) {\n+            throw new InvalidKeySpecException(\"Key is null\");\n+        }\n+        if (key.isDestroyed()) {\n+            throw new IllegalStateException(\"Key is destroyed\");\n+        }\n@@ -410,0 +417,1 @@\n+     * @exception IllegalStateException if the given key is already destroyed.\n@@ -413,0 +421,6 @@\n+        if (key == null) {\n+            throw new InvalidKeyException(\"Key is null\");\n+        }\n+        if (key.isDestroyed()) {\n+            throw new IllegalStateException(\"Key is destroyed\");\n+        }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/SecretKeyFactory.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8312306\n+ * @bug 8312306 8358451\n@@ -31,0 +31,6 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.NotSerializableException;\n+import java.io.ObjectOutputStream;\n+import java.security.InvalidKeyException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.Arrays;\n@@ -39,0 +45,10 @@\n+    private static final Class<IllegalStateException> ISE =\n+            IllegalStateException.class;\n+\n+    private static void printKeyInfo(SecretKey k, String name) {\n+        System.out.println(name);\n+        System.out.println(\"algo: \" + k.getAlgorithm());\n+        System.out.println(\"format: \" + k.getFormat());\n+        System.out.println(\"hashCode: \" + k.hashCode());\n+    }\n+\n@@ -50,1 +66,3 @@\n-        \/\/ should be equal\n+        printKeyInfo(key1, \"key1\");\n+\n+        \/\/ both keys should be equal\n@@ -55,0 +73,1 @@\n+        Assert.assertTrue(key1.hashCode() == key2.hashCode());\n@@ -58,0 +77,4 @@\n+\n+        \/\/ make sure no exception when retrieving algo, format, hashCode\n+        printKeyInfo(key1, \"destroyed key1\");\n+\n@@ -62,0 +85,9 @@\n+        Assert.assertThrows(ISE, () -> key1.getEncoded());\n+\n+        \/\/ serialization should fail\n+        ObjectOutputStream oos = new ObjectOutputStream(\n+                new ByteArrayOutputStream());\n+        Assert.assertThrows(ISE, () -> oos.writeObject(key1));\n+        Assert.assertThrows(ISE, () -> skf.translateKey(key1));\n+        Assert.assertThrows(ISE, () -> skf.getKeySpec(key1, PBEKeySpec.class));\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyFactory\/PBEKeyDestroyTest.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6370923\n+ * @bug 6370923 8358451\n@@ -33,0 +33,1 @@\n+import javax.crypto.spec.SecretKeySpec;\n@@ -44,1 +45,1 @@\n-        skf.translateKey((SecretKey)null);\n+        skf.translateKey(new SecretKeySpec(\"any\".getBytes(), \"DUMMY\"));\n","filename":"test\/jdk\/javax\/crypto\/SecretKeyFactory\/FailOverTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}