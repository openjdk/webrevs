{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.io.NotSerializableException;\n@@ -83,0 +84,3 @@\n+            if (isDestroyed()) {\n+                throw new IllegalStateException(\"key is destroyed\");\n+            }\n@@ -142,1 +146,0 @@\n-     *\n@@ -205,0 +208,3 @@\n+            if (isDestroyed()) {\n+                throw new NotSerializableException(\"key is destroyed\");\n+            }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKey.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,0 +268,4 @@\n+            if (key.isDestroyed()) {\n+                throw new InvalidKeySpecException(\"Key is destroyed\");\n+            }\n+\n@@ -310,0 +314,4 @@\n+                if (key.isDestroyed()) {\n+                    throw new InvalidKeyException(\"Key is destroyed\");\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKeyFactory.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8312306\n+ * @bug 8312306 8358451\n@@ -31,0 +31,6 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.NotSerializableException;\n+import java.io.ObjectOutputStream;\n+import java.security.InvalidKeyException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.Arrays;\n@@ -39,0 +45,7 @@\n+    private static void printKeyInfo(SecretKey k, String name) {\n+        System.out.println(name);\n+        System.out.println(\"algo: \" + k.getAlgorithm());\n+        System.out.println(\"format: \" + k.getFormat());\n+        System.out.println(\"hashCode: \" + k.hashCode());\n+    }\n+\n@@ -50,1 +63,3 @@\n-        \/\/ should be equal\n+        printKeyInfo(key1, \"key1\");\n+\n+        \/\/ both keys should be equal\n@@ -55,0 +70,1 @@\n+        Assert.assertTrue(key1.hashCode() == key2.hashCode());\n@@ -58,0 +74,4 @@\n+\n+        \/\/ make sure no exception when retrieving algo, format, hashCode\n+        printKeyInfo(key1, \"destroyed key1\");\n+\n@@ -61,0 +81,33 @@\n+        try {\n+            byte[] val = key1.getEncoded();\n+            throw new Exception(\"getEncoded() should error out, encoding = \" +\n+                    Arrays.toString(val));\n+        } catch (IllegalStateException ise) {\n+            \/\/ expected exception\n+            System.out.println(\"Expected ISE is thrown for getEncoded()\");\n+        }\n+\n+        \/\/ serialization should fail\n+        ObjectOutputStream oos = new ObjectOutputStream(\n+                new ByteArrayOutputStream());\n+        try {\n+            oos.writeObject(key1);\n+            throw new Exception(\"Serialization should error out\");\n+        } catch (NotSerializableException e) {\n+            \/\/ expected exception\n+            System.out.println(\"Expected NSE is thrown for serialization\");\n+        }\n+        try {\n+            skf.translateKey(key1);\n+            throw new Exception(\"translateKey() should error out\");\n+        } catch (InvalidKeyException ike) {\n+            \/\/ expected exception\n+            System.out.println(\"Expected IKE is thrown for translateKey()\");\n+        }\n+        try {\n+            skf.getKeySpec(key1, PBEKeySpec.class);\n+            throw new Exception(\"getKeySpec() should error out\");\n+        } catch (InvalidKeySpecException ikse) {\n+            \/\/ expected exception\n+            System.out.println(\"Expected IKSE is thrown for getKeySpec()\");\n+        }\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyFactory\/PBEKeyDestroyTest.java","additions":56,"deletions":3,"binary":false,"changes":59,"status":"modified"}]}