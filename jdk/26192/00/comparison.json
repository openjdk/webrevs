{"files":[{"patch":"@@ -1939,4 +1939,1 @@\n-  \/\/ Deoptimization count is used by the CompileBroker to reason about compilations\n-  \/\/ it requests so do not pollute the count for deoptimizations in non-default (i.e.\n-  \/\/ non-CompilerBroker) compilations.\n-  if (is_jvmci_hosted()) {\n+  if (jvmci_skip_profile_deopt()) {\n@@ -4069,2 +4066,2 @@\n-bool nmethod::is_jvmci_hosted() const {\n-  return jvmci_nmethod_data() != nullptr && !jvmci_nmethod_data()->is_default();\n+bool nmethod::jvmci_skip_profile_deopt() const {\n+  return jvmci_nmethod_data() != nullptr && !jvmci_nmethod_data()->profile_deopt();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -917,3 +917,3 @@\n-  \/\/ Returns true if a JVMCI compiled method is non-default,\n-  \/\/ i.e., not triggered by CompilerBroker\n-  bool is_jvmci_hosted() const;\n+  \/\/ Returns true if the runtime should NOT collect deoptimization profile for a JVMCI\n+  \/\/ compiled method\n+  bool jvmci_skip_profile_deopt() const;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,1 @@\n+    boolean_field(HotSpotNmethod, profileDeopt)                                                               \\\n@@ -106,1 +107,1 @@\n-    jvmci_constructor(HotSpotNmethod, \"(Ljdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl;Ljava\/lang\/String;ZJ)V\") \\\n+    jvmci_constructor(HotSpotNmethod, \"(Ljdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl;Ljava\/lang\/String;ZZJ)V\") \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -750,0 +750,1 @@\n+                                  bool profile_deopt,\n@@ -764,0 +765,1 @@\n+  _properties.bits._profile_deopt = profile_deopt;\n@@ -767,1 +769,2 @@\n-  initialize(data->_nmethod_mirror_index, data->_nmethod_entry_patch_offset, data->name(), data->_properties.bits._is_default, data->_failed_speculations);\n+  initialize(data->_nmethod_mirror_index, data->_nmethod_entry_patch_offset, data->name(), data->_properties.bits._is_default,\n+             data->_properties.bits._profile_deopt, data->_failed_speculations);\n@@ -2089,0 +2092,1 @@\n+  bool profile_deopt = JVMCIENV->get_HotSpotNmethod_profileDeopt(nmethod_mirror) != 0;\n@@ -2157,0 +2161,1 @@\n+                                                        profile_deopt,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-      uint8_t _has_name   : 1,\n+      uint8_t _has_name      : 1,\n@@ -58,2 +58,4 @@\n-              _is_default : 1,\n-                          : 6;\n+              _is_default    : 1,\n+      \/\/ HotSpotNmethod.profileDeopt\n+              _profile_deopt : 1,\n+                             : 5;\n@@ -90,0 +92,1 @@\n+                   bool profile_deopt,\n@@ -103,0 +106,1 @@\n+                                  bool profile_deopt,\n@@ -109,0 +113,1 @@\n+                       profile_deopt,\n@@ -156,0 +161,4 @@\n+\n+  bool profile_deopt() {\n+    return _properties.bits._profile_deopt;\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2370,1 +2370,1 @@\n-    if (nm->is_jvmci_hosted()) {\n+    if (nm->jvmci_skip_profile_deopt()) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+     * @param profileDeopt specifies if HotSpot should profile deoptimizations for the\n+     *            {@code nmethod} associated with this object.\n@@ -50,2 +52,2 @@\n-    default InstalledCode addCode(ResolvedJavaMethod method, CompiledCode compiledCode, SpeculationLog log, InstalledCode installedCode) {\n-        return installCode(method, compiledCode, installedCode, log, false);\n+    default InstalledCode addCode(ResolvedJavaMethod method, CompiledCode compiledCode, SpeculationLog log, InstalledCode installedCode, boolean profileDeopt) {\n+        return installCode(method, compiledCode, installedCode, log, false, profileDeopt);\n@@ -67,1 +69,1 @@\n-        return installCode(method, compiledCode, null, null, true);\n+        return installCode(method, compiledCode, null, null, true, true);\n@@ -84,0 +86,2 @@\n+     * @param profileDeopt specifies if HotSpot should profile deoptimizations for the\n+     *            {@code nmethod} associated with this object.\n@@ -87,1 +91,1 @@\n-    InstalledCode installCode(ResolvedJavaMethod method, CompiledCode compiledCode, InstalledCode installedCode, SpeculationLog log, boolean isDefault);\n+    InstalledCode installCode(ResolvedJavaMethod method, CompiledCode compiledCode, InstalledCode installedCode, SpeculationLog log, boolean isDefault, boolean profileDeopt);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/CodeCacheProvider.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,1 @@\n- * interface. The method\n- * {@link jdk.vm.ci.code.CodeCacheProvider#addCode(jdk.vm.ci.meta.ResolvedJavaMethod, CompiledCode, jdk.vm.ci.meta.SpeculationLog, InstalledCode)}\n- * can be used to install code.\n+ * interface. The method {@link jdk.vm.ci.code.CodeCacheProvider#addCode} can be used to install code.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/package-info.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-    public InstalledCode installCode(ResolvedJavaMethod method, CompiledCode compiledCode, InstalledCode installedCode, SpeculationLog log, boolean isDefault) {\n+    public InstalledCode installCode(ResolvedJavaMethod method, CompiledCode compiledCode, InstalledCode installedCode, SpeculationLog log, boolean isDefault, boolean profileDeopt) {\n@@ -134,1 +134,1 @@\n-            HotSpotNmethod nmethod = new HotSpotNmethod(hsMethod, name, isDefault, hsCompiledNmethod.id);\n+            HotSpotNmethod nmethod = new HotSpotNmethod(hsMethod, name, isDefault, profileDeopt, hsCompiledNmethod.id);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCodeCacheProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,7 @@\n+    \/**\n+     * Specifies whether HotSpot should profile deoptimizations for the {@code nmethod} associated\n+     * with this object. This is particularly useful for whitebox testing scenarios that involve\n+     * deoptimization.\n+     *\/\n+    private final boolean profileDeopt;\n+\n@@ -86,1 +93,1 @@\n-    HotSpotNmethod(HotSpotResolvedJavaMethodImpl method, String name, boolean isDefault, long compileId) {\n+    HotSpotNmethod(HotSpotResolvedJavaMethodImpl method, String name, boolean isDefault, boolean profileDeopt, long compileId) {\n@@ -90,0 +97,1 @@\n+        this.profileDeopt = profileDeopt;\n@@ -121,0 +129,8 @@\n+    \/**\n+     * Determines if HotSpot should profile deoptimization for the {@code nmethod} associated\n+     * with this object.\n+     *\/\n+    public boolean profileDeopt() {\n+        return profileDeopt;\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotNmethod.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}