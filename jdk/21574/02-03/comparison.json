{"files":[{"patch":"@@ -203,1 +203,1 @@\n-     * The current implementation acts as this {@code Float16} were\n+     * The current implementation acts as if this {@code Float16} were\n@@ -449,23 +449,23 @@\n-\/\/             int scale = bd.scale();\n-\/\/             BigInteger unscaledValue = bd.unscaledValue();\n-\n-\/\/              if (unscaledValue.abs().compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0) {\n-\/\/                 long intCompact = bd.longValue();\n-\/\/                 Float16 v = Float16.valueOf(intCompact);\n-\/\/                 if (scale == 0) {\n-\/\/                     return v;\n-\/\/                 }\n-\/\/                 \/*\n-\/\/                  * The discussion for the double case also applies here. That is,\n-\/\/                  * the following test is precise for all long values, but here\n-\/\/                  * Long.MAX_VALUE is not an issue.\n-\/\/                  *\/\n-\/\/                 if (v.longValue() == intCompact) {\n-\/\/                     if (0 < scale && scale < FLOAT16_10_POW.length) {\n-\/\/                         return Float16.divide(v, FLOAT16_10_POW[scale]);\n-\/\/                     }\n-\/\/                     if (0 > scale && scale > -FLOAT16_10_POW.length) {\n-\/\/                         return Float16.multiply(v, FLOAT16_10_POW[-scale]);\n-\/\/                     }\n-\/\/                 }\n-\/\/             }\n+             int scale = bd.scale();\n+             BigInteger unscaledValue = bd.unscaledValue();\n+\n+              if (unscaledValue.abs().compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0) {\n+                 long intCompact = unscaledValue.longValue();\n+                 Float16 v = Float16.valueOf(intCompact);\n+                 if (scale == 0) {\n+                     return v;\n+                 }\n+                 \/*\n+                  * The discussion for the double case also applies here. That is,\n+                  * the following test is precise for all long values, but here\n+                  * Long.MAX_VALUE is not an issue.\n+                  *\/\n+                 if (v.longValue() == intCompact) {\n+                     if (0 < scale && scale < FLOAT16_10_POW.length) {\n+                         return Float16.divide(v, FLOAT16_10_POW[scale]);\n+                     }\n+                     if (0 > scale && scale > -FLOAT16_10_POW.length) {\n+                         return Float16.multiply(v, FLOAT16_10_POW[-scale]);\n+                     }\n+                 }\n+             }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float16.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}