{"files":[{"patch":"@@ -34,0 +34,4 @@\n+import static jdk.incubator.vector.Float16Consts.SIGN_BIT_MASK;\n+import static jdk.incubator.vector.Float16Consts.EXP_BIT_MASK;\n+import static jdk.incubator.vector.Float16Consts.SIGNIF_BIT_MASK;\n+\n@@ -47,1 +51,2 @@\n- *   Significand - 10 bits (does not include the <i>implicit bit<\/i> inferred from the exponent, see {@link #PRECISION})<br>\n+ *   Significand - 10 bits (does not include the <i>implicit bit<\/i>\n+ *                    inferred from the exponent, see {@link #PRECISION})<br>\n@@ -104,0 +109,1 @@\n+    \/\/ Do *not* define any public constructors\n@@ -114,2 +120,0 @@\n-    \/\/ Do *not* define any public constructors\n-\n@@ -468,1 +472,1 @@\n-            \/\/ long \"0xD\" where D is a hex digit.\n+            \/\/ long \"0xH\" where H is a hex digit.\n@@ -552,1 +556,1 @@\n-        long mask = 0x01FF_FFFF_FFFFL; \/\/ 41 low-order bits\n+        long mask = 0x03FF_FFFF_FFFFL; \/\/ 42 low-order bits\n@@ -554,2 +558,2 @@\n-        \/\/ Can't have all-zeros or all-ones in low-order bits\n-        return maskedValue != 0L && maskedValue != mask;\n+        \/\/ not half-way between two adjacent Float16 values\n+        return maskedValue != 0x0200_0000_0000L;\n@@ -577,0 +581,3 @@\n+    \/\/ TODO: Host this functionality in this class for now until\n+    \/\/ java.base has Float16 support and this logic can be moved to\n+    \/\/ BigDecimal.\n@@ -729,1 +736,2 @@\n-        return ((float16ToRawShortBits(f16) ^ float16ToRawShortBits(POSITIVE_INFINITY)) & 0x7fff) == 0;\n+        return ((float16ToRawShortBits(f16) ^\n+                 float16ToRawShortBits(POSITIVE_INFINITY)) & 0x7fff) == 0;\n@@ -749,1 +757,2 @@\n-        return (float16ToRawShortBits(f16) & (short)0x0000_7FFF) <= float16ToRawShortBits(MAX_VALUE);\n+        return (float16ToRawShortBits(f16) & (short)0x0000_7FFF) <=\n+            float16ToRawShortBits(MAX_VALUE);\n@@ -866,0 +875,1 @@\n+        \/\/ Use bit-pattern of canonical NaN for hashing.\n@@ -1007,2 +1017,1 @@\n-        return shortBitsToFloat16(floatToFloat16(Math.max(a.floatValue(),\n-                                                          b.floatValue() )));\n+        return valueOf(Math.max(a.floatValue(), b.floatValue()));\n@@ -1029,2 +1038,1 @@\n-        return shortBitsToFloat16(floatToFloat16(Math.min(a.floatValue(),\n-                                                          b.floatValue()) ));\n+        return valueOf(Math.min(a.floatValue(), b.floatValue()));\n@@ -1673,5 +1681,3 @@\n-        return shortBitsToFloat16((short) ((float16ToRawShortBits(sign) &\n-                        (Float16Consts.SIGN_BIT_MASK)) |\n-                        (float16ToRawShortBits(magnitude) &\n-                                (Float16Consts.EXP_BIT_MASK |\n-                                        Float16Consts.SIGNIF_BIT_MASK))));\n+        return shortBitsToFloat16((short) ((float16ToRawShortBits(sign) & SIGN_BIT_MASK) |\n+                                           (float16ToRawShortBits(magnitude) &\n+                                            (EXP_BIT_MASK | SIGNIF_BIT_MASK) )));\n@@ -1702,1 +1708,2 @@\n-    \/* TODO Temporary hack while Float16 resides in incubator *\/\n+    \/\/ TODO: Temporary location for this functionality while Float16\n+    \/\/ resides in incubator.\n@@ -2346,1 +2353,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float16.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -180,2 +180,2 @@\n-            {InfinityF, -InfinityF},\n-            {-InfinityF, InfinityF},\n+            { InfinityF, -InfinityF},\n+            {-InfinityF,  InfinityF},\n@@ -386,0 +386,1 @@\n+            \/\/ Non-finite values\n@@ -390,0 +391,1 @@\n+            \/\/ Subnormal and almost subnormal values\n@@ -396,0 +398,2 @@\n+\n+            \/\/ Normal values\n","filename":"test\/jdk\/jdk\/incubator\/vector\/BasicFloat16ArithTests.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}