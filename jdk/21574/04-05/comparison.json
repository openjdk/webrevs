{"files":[{"patch":"@@ -688,4 +688,36 @@\n-    \/\/ Skipping for now:\n-    \/\/ public int hashCode()\n-    \/\/ public static int hashCode(Float16 value)\n-    \/\/ public boolean equals(Object obj)\n+    \/**\n+     * {@return a hash code for this {@code Float16} object}\n+     *\n+     * The general contract of {@code Object#hashCode()}is satisfied;\n+     * all NaN values have the same hash value.\n+     *\/\n+    @Override\n+    public int hashCode() {\n+        return hashCode(this);\n+    }\n+\n+    \/**\n+     * Returns a hash code for a {@code Float16} value; compatible with\n+     * {@code Float16.hashCode()}.\n+     *\n+     * @param value the value to hash\n+     * @return a hash code value for a {@code Float16} value.\n+     *\/\n+    public static int hashCode(Float16 value) {\n+        Float16 f16 = isNaN(value) ? Float16.NaN : value;\n+        return (int)float16ToRawShortBits(f16);\n+    }\n+\n+    \/**\n+     * Compares this object against the specified object.  The result\n+     * is {@code true} if and only if the argument is not\n+     * {@code null} and is a {@code Float16} object that\n+     * represents a {@code Float16} that has the same value as the\n+     * {@code double} represented by this object.\n+     *\n+     * @jls 15.21.1 Numerical Equality Operators == and !=\n+     *\/\n+    public boolean equals(Object obj) {\n+        return (obj instanceof Float16 f16) &&\n+            (float16ToShortBits(f16) == float16ToShortBits(this));\n+    }\n@@ -707,0 +739,18 @@\n+    \/**\n+     * Returns a representation of the specified floating-point value\n+     * according to the IEEE 754 floating-point binary16 bit layout.\n+     * All NaN values return the same bit pattern as {@link Float16#NaN}.\n+     *\n+     * @param   f16   a {@code Float16} floating-point number.\n+     * @return the bits that represent the floating-point number.\n+     *\n+     * @see Float#floatToRawIntBits(float)\n+     * @see Double#doubleToRawLongBits(double)\n+     *\/\n+    public static short float16ToShortBits(Float16 f16) {\n+        if (isNaN(f16)) {\n+            return Float16.NaN.value;\n+        }\n+        return f16.value;\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float16.java","additions":54,"deletions":4,"binary":false,"changes":58,"status":"modified"}]}