{"files":[{"patch":"@@ -476,1 +476,1 @@\n-    size_t new_nstripes = nstripes << 1;\n+    const size_t new_nstripes = nstripes << 1;\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  size_t capacity = first_stack ? 128 : 512;\n+  const size_t capacity = first_stack ? 128 : 512;\n@@ -41,3 +41,2 @@\n-  size_t size = sizeof(ZMarkStack) + capacity * sizeof(ZMarkStackEntry);\n-  char* memory = NEW_C_HEAP_ARRAY(char, size, mtGC);\n-  return new (memory) ZMarkStack(capacity);\n+  void* const memory = AttachedArray::alloc(capacity);\n+  return ::new (memory) ZMarkStack(capacity);\n@@ -47,2 +46,2 @@\n-  char* memory = (char*)stack;\n-  FREE_C_HEAP_ARRAY(char, memory);\n+  stack->~ZMarkStack();\n+  AttachedArray::free(stack);\n@@ -53,1 +52,1 @@\n-    _capacity(capacity) {}\n+    _entries(capacity) {}\n@@ -80,1 +79,1 @@\n-  ZMarkStackListNode* node = new ZMarkStackListNode(stack);\n+  ZMarkStackListNode* const node = new ZMarkStackListNode(stack);\n@@ -86,1 +85,1 @@\n-    \/\/ on the pushing sidee, that is benign. The node is never\n+    \/\/ on the pushing side, that is benign. The node is never\n@@ -107,1 +106,1 @@\n-  ZMarkStackListNode* volatile* hazard_ptr = marking_smr->hazard_ptr();\n+  ZMarkStackListNode* volatile* const hazard_ptr = marking_smr->hazard_ptr();\n@@ -123,1 +122,1 @@\n-    \/\/ before other threads scanning hazard poitners can observe it, meaning\n+    \/\/ before other threads scanning hazard pointers can observe it, meaning\n@@ -171,1 +170,1 @@\n-  ssize_t result = Atomic::load(&_length);\n+  const ssize_t result = Atomic::load(&_length);\n@@ -208,1 +207,1 @@\n-  size_t new_nstripes_mask = nstripes - 1;\n+  const size_t new_nstripes_mask = nstripes - 1;\n@@ -220,2 +219,2 @@\n-  size_t old_nstripes_mask = old_nstripes - 1;\n-  size_t new_nstripes_mask = new_nstripes - 1;\n+  const size_t old_nstripes_mask = old_nstripes - 1;\n+  const size_t new_nstripes_mask = new_nstripes - 1;\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStack.cpp","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zAttachedArray.hpp\"\n@@ -38,2 +39,4 @@\n-  size_t           _top;\n-  size_t           _capacity;\n+  using AttachedArray = ZAttachedArray<ZMarkStack, ZMarkStackEntry>;\n+\n+  size_t              _top;\n+  const AttachedArray _entries;\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStack.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/z\/zAttachedArray.inline.hpp\"\n@@ -37,1 +38,1 @@\n-  return _top == _capacity;\n+  return _top == _entries.length();\n@@ -41,3 +42,1 @@\n-  uintptr_t start = (uintptr_t)this;\n-  uintptr_t result = start + sizeof(ZMarkStack);\n-  return (ZMarkStackEntry*)result;\n+  return _entries(this);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStack.inline.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/z\/zMarkStack.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkTerminate.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  \/\/ stack integrity. Using hazarad pointers involves publishing what head\n+  \/\/ stack integrity. Using hazard pointers involves publishing what head\n@@ -61,2 +61,2 @@\n-  ZWorkerState* local_state = _worker_states.addr();\n-  ZArray<ZMarkStackListNode*>* freeing = &local_state->_freeing;\n+  ZWorkerState* const local_state = _worker_states.addr();\n+  ZArray<ZMarkStackListNode*>* const freeing = &local_state->_freeing;\n@@ -70,1 +70,1 @@\n-  ZArray<ZMarkStackListNode*>* scanned_hazards = &local_state->_scanned_hazards;\n+  ZArray<ZMarkStackListNode*>* const scanned_hazards = &local_state->_scanned_hazards;\n@@ -73,1 +73,1 @@\n-    ZMarkStackListNode* hazard = Atomic::load(&remote_state->_hazard_ptr);\n+    ZMarkStackListNode* const hazard = Atomic::load(&remote_state->_hazard_ptr);\n@@ -102,1 +102,1 @@\n-    ZArray<ZMarkStackListNode*>* freeing = &worker_state->_freeing;\n+    ZArray<ZMarkStackListNode*>* const freeing = &worker_state->_freeing;\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkingSMR.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}