{"files":[{"patch":"@@ -56,1 +56,0 @@\n-define_pd_global(uint64_t,MaxRAM,                    1ULL*G);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_globals_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-define_pd_global(uint64_t,MaxRAM,                    128ULL*G);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_globals_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-define_pd_global(uint64_t, MaxRAM,                   1ULL*G);\n","filename":"src\/hotspot\/cpu\/arm\/c1_globals_arm.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,3 +83,0 @@\n-\n-\/\/ Ergonomics related flags\n-define_pd_global(uint64_t, MaxRAM,                   128ULL*G);\n@@ -94,2 +91,0 @@\n-\/\/ Ergonomics related flags\n-define_pd_global(uint64_t, MaxRAM,                   4ULL*G);\n","filename":"src\/hotspot\/cpu\/arm\/c2_globals_arm.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-define_pd_global(uint64_t, MaxRAM,                       1ULL*G);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_globals_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-define_pd_global(uint64_t, MaxRAM,                       128ULL*G);\n","filename":"src\/hotspot\/cpu\/ppc\/c2_globals_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-define_pd_global(uint64_t, MaxRAM,                  1ULL*G);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_globals_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-define_pd_global(uint64_t,MaxRAM,                    128ULL*G);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_globals_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-define_pd_global(uint64_t, MaxRAM,                       1ULL*G);\n","filename":"src\/hotspot\/cpu\/s390\/c1_globals_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-define_pd_global(uint64_t, MaxRAM,                   128ULL*G);\n","filename":"src\/hotspot\/cpu\/s390\/c2_globals_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-define_pd_global(uint64_t, MaxRAM,                    1ULL*G);\n","filename":"src\/hotspot\/cpu\/x86\/c1_globals_x86.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,3 +55,0 @@\n-\n-\/\/ Ergonomics related flags\n-define_pd_global(uint64_t, MaxRAM,                   128ULL*G);\n@@ -65,3 +62,0 @@\n-\n-\/\/ Ergonomics related flags\n-define_pd_global(uint64_t, MaxRAM,                   4ULL*G);\n","filename":"src\/hotspot\/cpu\/x86\/c2_globals_x86.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4163,5 +4163,0 @@\n-  if (FLAG_IS_DEFAULT(MaxRAM)) {\n-    \/\/ Adjust MaxRAM according to the maximum virtual address space available.\n-    FLAG_SET_DEFAULT(MaxRAM, MIN2(MaxRAM, (uint64_t) ms.ullTotalVirtual));\n-  }\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-define_pd_global(uint64_t,MaxRAM,                    1ULL*G);\n@@ -80,1 +79,0 @@\n-define_pd_global(uint64_t,MaxRAM,                    128ULL*G);\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals_pd.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,2 +271,3 @@\n-  product_pd(uint64_t, MaxRAM,                                              \\\n-          \"Real memory size (in bytes) used to set maximum heap size\")      \\\n+  product(uint64_t, MaxRAM, 0,                                              \\\n+          \"(Deprecated) Real memory size (in bytes) used to set maximum \"   \\\n+          \"heap size\")                                                     \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -539,0 +539,1 @@\n+  { \"MaxRAM\",                       JDK_Version::jdk(26),  JDK_Version::jdk(27), JDK_Version::jdk(28) },\n@@ -1514,2 +1515,0 @@\n-  uint64_t physical_memory;\n-\n@@ -1522,11 +1521,4 @@\n-  if (CompilerConfig::should_set_client_emulation_mode_flags() &&\n-      FLAG_IS_DEFAULT(MaxRAM)) {\n-    \/\/ Reduce the maximum available memory if client emulation mode is enabled.\n-    FLAG_SET_DEFAULT(MaxRAM, 1ULL*G);\n-  }\n-\n-  if (has_ram_limit) {\n-    if (!FLAG_IS_DEFAULT(MaxRAM)) {\n-      \/\/ The user has configured MaxRAM, use that instead of physical memory\n-      \/\/ reported by the OS.\n-      physical_memory = MaxRAM;\n+  if (FLAG_IS_DEFAULT(MaxRAM)) {\n+    if (CompilerConfig::should_set_client_emulation_mode_flags()) {\n+      \/\/ Limit the available memory if client emulation mode is enabled.\n+      FLAG_SET_ERGO(MaxRAM, 1ULL*G);\n@@ -1534,4 +1526,2 @@\n-      \/\/ The user has configured a limit, make sure MaxRAM reflects the physical\n-      \/\/ memory limit that heap sizing takes into account.\n-      physical_memory = os::physical_memory();\n-      FLAG_SET_ERGO(MaxRAM, physical_memory);\n+      \/\/ Use the available physical memory on the system.\n+      FLAG_SET_ERGO(MaxRAM, os::physical_memory());\n@@ -1539,5 +1529,0 @@\n-  } else {\n-    \/\/ If the user did not specify any limit, choose the lowest of the available\n-    \/\/ physical memory and MaxRAM. MaxRAM is typically set to 128GB on 64-bit\n-    \/\/ architecture.\n-    physical_memory = MIN2(os::physical_memory(), MaxRAM);\n@@ -1550,2 +1535,2 @@\n-    uint64_t min_memory = (uint64_t)(((double)physical_memory * MinRAMPercentage) \/ 100);\n-    uint64_t max_memory = (uint64_t)(((double)physical_memory * MaxRAMPercentage) \/ 100);\n+    uint64_t min_memory = (uint64_t)(((double)MaxRAM * MinRAMPercentage) \/ 100);\n+    uint64_t max_memory = (uint64_t)(((double)MaxRAM * MaxRAMPercentage) \/ 100);\n@@ -1638,1 +1623,1 @@\n-      uint64_t initial_memory = (uint64_t)(((double)physical_memory * InitialRAMPercentage) \/ 100);\n+      uint64_t initial_memory = (uint64_t)(((double)MaxRAM * InitialRAMPercentage) \/ 100);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":10,"deletions":25,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2569,19 +2569,0 @@\n-`-XX:MaxRAM=`*size*\n-:   Sets the maximum amount of memory that the JVM may use for the Java heap\n-    before applying ergonomics heuristics. The default value is the maximum\n-    amount of available memory to the JVM process or 128 GB, whichever is lower.\n-\n-    The maximum amount of available memory to the JVM process is the minimum\n-    of the machine's physical memory and any constraints set by the environment\n-    (e.g. container).\n-\n-    Specifying this option disables automatic use of compressed oops if\n-    the combined result of this and other options influencing the maximum amount\n-    of memory is larger than the range of memory addressable by compressed oops.\n-    See `-XX:UseCompressedOops` for further information about compressed oops.\n-\n-    The following example shows how to set the maximum amount of available\n-    memory for sizing the Java heap to 2 GB:\n-\n-    >   `-XX:MaxRAM=2G`\n-\n@@ -2954,0 +2935,19 @@\n+`-XX:MaxRAM=`*size*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics. The default value is the amount of\n+    available memory to the JVM process.\n+\n+    The maximum amount of available memory to the JVM process is the minimum\n+    of the machine's physical memory and any constraints set by the environment\n+    (e.g. container).\n+\n+    Specifying this option disables automatic use of compressed oops if\n+    the combined result of this and other options influencing the maximum amount\n+    of memory is larger than the range of memory addressable by compressed oops.\n+    See `-XX:UseCompressedOops` for further information about compressed oops.\n+\n+    The following example shows how to set the maximum amount of available\n+    memory for sizing the Java heap to 2 GB:\n+\n+    >   `-XX:MaxRAM=2G`\n+\n","filename":"src\/java.base\/share\/man\/java.md","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"}]}