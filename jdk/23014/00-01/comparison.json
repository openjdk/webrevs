{"files":[{"patch":"@@ -131,1 +131,2 @@\n-            while ((bytesRead1 = is1.readNBytes(buf1, 0, buf1.length)) != 0) {\n+            while (true) {\n+                bytesRead1 = is1.readNBytes(buf1, 0, buf1.length);\n@@ -133,4 +134,2 @@\n-                if (bytesRead2 == 0) {\n-                    \/\/ first input stream didn't return the end of stream\n-                    \/\/ but the second did?\n-                    return false;\n+                if (bytesRead1 == 0 || bytesRead2 == 0) {\n+                    break; \/\/ no more bytes for a stream\n@@ -146,0 +145,5 @@\n+            \/\/ Streams are equal only if we've read them both to the end\n+            if (bytesRead1 == 0 &&\n+                bytesRead2 == 0) {\n+                return true;\n+            }\n@@ -149,1 +153,1 @@\n-        return true;\n+        return false;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/JimageDiffGenerator.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -244,0 +244,32 @@\n+    \/*\n+     * Expect a difference since entry 'a' on the optimized version is\n+     * one byte longer.\n+     *\/\n+    @Test\n+    public void testBytesDifferExactBufferSize() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+            { }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        byte[][] bytesOpt = new byte[][] {\n+            { }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        bytesBase[0] = genBytesOfSize(1024);    \/\/ exact buffer size\n+        bytesOpt[0] = genBytesOfSize(1024 + 1); \/\/ buffer size + 1\n+\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        ImageResource opt = new BasicImageResource(entriesBase, bytesOpt);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertEquals(result.size(), 1);\n+        assertEquals(result.get(0).getKind(), ResourceDiff.Kind.MODIFIED);\n+        assertEquals(result.get(0).getName(), \"a\");\n+        assertEquals(result.get(0).getResourceBytes(), bytesBase[0]);\n+    }\n+\n@@ -246,0 +278,4 @@\n+        return genBytesOfSize(size);\n+    }\n+\n+    private byte[] genBytesOfSize(int size) {\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/JimageDiffGeneratorTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}