{"files":[{"patch":"@@ -410,17 +410,4 @@\n-     *\n-     * @implSpec The implementation logic is equivalent to the following steps for this\n-     *           {@code stable}:\n-     *\n-     * {@snippet lang=java:\n-     * if (stable.isSet()) {\n-     *     return stable.orElseThrow();\n-     * } else {\n-     *     T newValue = supplier.get();\n-     *     stable.setOrThrow(newValue);\n-     *     return newValue;\n-     * }\n-     * }\n-     * Except it is thread-safe and will only return the same witness value\n-     * regardless if invoked by several threads. Also, the provided {@code supplier}\n-     * will only be invoked once even if invoked from several threads unless the\n-     * {@code supplier} throws an exception.\n+     * <p>\n+     * This method will always return the same witness value regardless if invoked by\n+     * several threads. Also, the provided {@code supplier} will only be invoked once even\n+     * if invoked from several threads unless the {@code supplier} throws an exception.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -177,0 +177,9 @@\n+    @Test\n+    void equalsPartialEvaluationTest() {\n+        var list = StableValue.list(2, IDENTITY);\n+        assertFalse(list.equals(List.of(0)));\n+        assertEquals(\"[0, .unset]\", list.toString());\n+        assertTrue(list.equals(List.of(0, 1)));\n+        assertEquals(\"[0, 1]\", list.toString());\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableListTest.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}