{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.lang.stable.StableUtil;\n@@ -777,1 +778,1 @@\n-        private final StableValueImpl<E>[] backing;\n+        private final StableValueImpl<E>[] delegates;\n@@ -781,1 +782,1 @@\n-            this.backing = StableValueFactories.array(size);\n+            this.delegates = StableValueFactories.array(size);\n@@ -784,2 +785,2 @@\n-        @Override public boolean  isEmpty() { return backing.length == 0;}\n-        @Override public int      size() { return backing.length; }\n+        @Override public boolean  isEmpty() { return delegates.length == 0;}\n+        @Override public int      size() { return delegates.length; }\n@@ -792,1 +793,1 @@\n-                return backing[i]\n+                return delegates[i]\n@@ -803,1 +804,1 @@\n-            final int size = backing.length;\n+            final int size = delegates.length;\n@@ -839,1 +840,1 @@\n-            final int len = backing.length;\n+            final int len = delegates.length;\n@@ -846,0 +847,5 @@\n+        @Override\n+        public String toString() {\n+            return StableUtil.renderElements(this, \"StableList\", delegates);\n+        }\n+\n@@ -1540,0 +1546,6 @@\n+\n+        @Override\n+        public String toString() {\n+            return StableUtil.renderMappings(this, \"StableMap\", delegate.entrySet());\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Collections;\n@@ -62,1 +63,1 @@\n-        return \"EmptyStableFunction[values={}, original=\" + original + \"]\";\n+        return StableUtil.renderMappings(this, \"StableFunction\", Collections.emptyList());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/EmptyStableFunction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n@@ -33,0 +35,3 @@\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n@@ -83,7 +88,1 @@\n-        return \"StableEnumFunction[values=\" + renderElements() + \", original=\" + original + \"]\";\n-    }\n-\n-    private String renderElements() {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"{\");\n-        boolean first = true;\n+        final Collection<Map.Entry<E, StableValueImpl<R>>> entries = new ArrayList<>();\n@@ -94,12 +93,1 @@\n-                if (first) {\n-                    first = false;\n-                } else {\n-                    sb.append(\", \");\n-                }\n-                final Object value = delegates[i].wrappedContentAcquire();\n-                sb.append(enumElements[ordinal]).append('=');\n-                if (value == this) {\n-                    sb.append(\"(this StableEnumFunction)\");\n-                } else {\n-                    sb.append(StableValueImpl.renderWrapped(value));\n-                }\n+                entries.add(new AbstractMap.SimpleImmutableEntry<>(enumElements[ordinal], delegates[i]));\n@@ -108,2 +96,1 @@\n-        sb.append(\"}\");\n-        return sb.toString();\n+        return StableUtil.renderMappings(this, \"StableFunction\", entries);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableEnumFunction.java","additions":8,"deletions":21,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -74,19 +74,1 @@\n-        return \"StableFunction[values=\" + renderMappings() + \", original=\" + original + \"]\";\n-    }\n-\n-    private String renderMappings() {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"{\");\n-        boolean first = true;\n-        for (var e:values.entrySet()) {\n-            if (first) { first = false; } else { sb.append(\", \"); };\n-            final Object value = e.getValue().wrappedContentAcquire();\n-            sb.append(e.getKey()).append('=');\n-            if (value == this) {\n-                sb.append(\"(this StableFunction)\");\n-            } else {\n-                sb.append(StableValueImpl.renderWrapped(value));\n-            }\n-        }\n-        sb.append(\"}\");\n-        return sb.toString();\n+        return StableUtil.renderMappings(this, \"StableFunction\", values.entrySet());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableFunction.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -75,20 +75,1 @@\n-        return \"StableIntFunction[values=\" +\n-                renderElements() +\n-                \", original=\" + original + ']';\n-    }\n-\n-    private String renderElements() {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"[\");\n-        boolean first = true;\n-        for (int i = 0; i < delegates.length; i++) {\n-            if (first) { first = false; } else { sb.append(\", \"); };\n-            final Object value = delegates[i].wrappedContentAcquire();\n-            if (value == this) {\n-                sb.append(\"(this StableIntFunction)\");\n-            } else {\n-                sb.append(StableValueImpl.renderWrapped(value));\n-            }\n-        }\n-        sb.append(\"]\");\n-        return sb.toString();\n+        return StableUtil.renderElements(this, \"StableIntFunction\", delegates);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableIntFunction.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        return \"StableSupplier[value=\" + (t == this ? \"(this StableSupplier)\" : StableValueImpl.renderWrapped(t)) + \", original=\" + original + \"]\";\n+        return t == this ? \"(this StableSupplier)\" : StableValueImpl.renderWrapped(t);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableSupplier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+package jdk.internal.lang.stable;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+public final class StableUtil {\n+\n+    private StableUtil() {}\n+\n+    public static <R> String renderElements(Object self,\n+                                            String selfName,\n+                                            StableValueImpl<R>[] delegates) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"[\");\n+        boolean first = true;\n+        for (int i = 0; i < delegates.length; i++) {\n+            if (first) { first = false; } else { sb.append(\", \"); }\n+            final Object value = delegates[i].wrappedContentAcquire();\n+            if (value == self) {\n+                sb.append(\"(this \").append(selfName).append(\")\");\n+            } else {\n+                sb.append(StableValueImpl.renderWrapped(value));\n+            }\n+        }\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n+\n+    public static <K, V> String renderMappings(Object self,\n+                                               String selfName,\n+                                               Iterable<Map.Entry<K, StableValueImpl<V>>> delegates) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+        boolean first = true;\n+        for (var e : delegates) {\n+            if (first) { first = false; } else { sb.append(\", \"); }\n+            final Object value = e.getValue().wrappedContentAcquire();\n+            sb.append(e.getKey()).append('=');\n+            if (value == self) {\n+                sb.append(\"(this \").append(selfName).append(\")\");\n+            } else {\n+                sb.append(StableValueImpl.renderWrapped(value));\n+            }\n+        }\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableUtil.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -47,0 +47,2 @@\n+    static final String UNSET_LABEL = \".unset\";\n+\n@@ -148,1 +150,1 @@\n-                : \"StableValue\" + renderWrapped(t);\n+                : renderWrapped(t);\n@@ -159,1 +161,1 @@\n-        return (t == null) ? \".unset\" : \"[\" + unwrap(t) + \"]\";\n+        return (t == null) ? UNSET_LABEL : Objects.toString(unwrap(t));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        assertTrue(cached.toString().startsWith(cached.getClass().getSimpleName() + \"[values={\"));\n+        assertTrue(cached.toString().startsWith(\"{\"), cached.toString());\n@@ -98,4 +98,4 @@\n-        assertTrue(cached.toString().contains(Value.FORTY_TWO + \"=[\" + mapper.apply(Value.FORTY_TWO) + \"]\"), cached.toString());\n-        assertTrue(cached.toString().endsWith(\", original=\" + cif + \"]\"));\n-        \/\/ One between the values and one just before \"original\"\n-        assertEquals(2L, cached.toString().chars().filter(ch -> ch == ',').count(), cached.toString());\n+        assertTrue(cached.toString().contains(Value.FORTY_TWO + \"=\" + mapper.apply(Value.FORTY_TWO)), cached.toString());\n+        assertTrue(cached.toString().endsWith(\"}\"));\n+        \/\/ One between the values\n+        assertEquals(1L, cached.toString().chars().filter(ch -> ch == ',').count(), cached.toString());\n@@ -132,1 +132,1 @@\n-        assertTrue(cached.toString().startsWith(cached.getClass().getSimpleName() + \"[values={\"));\n+        assertTrue(cached.toString().startsWith(\"{\"));\n@@ -136,1 +136,1 @@\n-        assertTrue(cached.toString().endsWith(\", original=\" + cif + \"]\"));\n+        assertTrue(cached.toString().endsWith(\"}\"));\n@@ -147,1 +147,1 @@\n-        assertTrue(toString.contains(\"(this \" + cached.getClass().getSimpleName() + \")\"), toString);\n+        assertTrue(toString.contains(\"(this StableFunction)\"), toString);\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableFunctionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        assertEquals(\"StableIntFunction[values=[.unset, .unset], original=\" + cif + \"]\", cached.toString());\n+        assertEquals(\"[.unset, .unset]\", cached.toString());\n@@ -62,1 +62,1 @@\n-        assertEquals(\"StableIntFunction[values=[.unset, [\" + mapper.apply(1) + \"]], original=\" + cif + \"]\", cached.toString());\n+        assertEquals(\"[.unset, \" + mapper.apply(1) + \"]\", cached.toString());\n@@ -78,1 +78,1 @@\n-        assertEquals(\"StableIntFunction[values=[.unset, .unset], original=\" + cif + \"]\", cached.toString());\n+        assertEquals(\"[.unset, .unset]\", cached.toString());\n@@ -88,1 +88,1 @@\n-        assertTrue(toString.startsWith(\"StableIntFunction[values=[(this StableIntFunction), .unset], original=\"));\n+        assertEquals(\"[(this StableIntFunction), .unset]\", toString);\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableIntFunctionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -154,2 +154,6 @@\n-        assertEquals(\"[0, 1]\", StableValue.list(2, IDENTITY).toString());\n-        assertEquals(newRegularList().toString(), newList().toString());\n+        var list = StableValue.list(2, IDENTITY);\n+        assertEquals(\"[.unset, .unset]\", list.toString());\n+        list.get(0);\n+        assertEquals(\"[0, .unset]\", list.toString());\n+        list.get(1);\n+        assertEquals(\"[0, 1]\", list.toString());\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableListTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,1 +134,4 @@\n-        assertEquals(\"{\" + KEY + \"=\" + KEY + \"}\", StableValue.map(Set.of(KEY), IDENTITY).toString());\n+        var map = StableValue.map(Set.of(KEY), IDENTITY);\n+        assertEquals(\"{\" + KEY + \"=.unset}\", map.toString());\n+        map.get(KEY);\n+        assertEquals(\"{\" + KEY + \"=\" + KEY + \"}\", map.toString());\n@@ -138,1 +141,1 @@\n-            assertTrue(actual.contains(key + \"=\" + key));\n+            assertTrue(actual.contains(key + \"=.unset\"));\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableMapTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -55,1 +56,1 @@\n-        assertEquals(\"StableSupplier[value=.unset, original=\" + cs + \"]\", cached.toString());\n+        assertEquals(\".unset\", cached.toString());\n@@ -60,1 +61,1 @@\n-        assertEquals(\"StableSupplier[value=[\" + supplier.get() + \"], original=\" + cs + \"]\", cached.toString());\n+        assertEquals(Objects.toString(supplier.get()), cached.toString());\n@@ -73,1 +74,1 @@\n-        assertEquals(\"StableSupplier[value=.unset, original=\" + cs + \"]\", cached.toString());\n+        assertEquals(\".unset\", cached.toString());\n@@ -83,1 +84,1 @@\n-        assertTrue(toString.startsWith(\"StableSupplier[value=(this StableSupplier), original=\"));\n+        assertTrue(toString.startsWith(\"(this StableSupplier)\"));\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableSupplierTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Objects;\n@@ -165,1 +166,1 @@\n-        assertEquals(\"StableValue.unset\", stable.toString());\n+        assertEquals(\".unset\", stable.toString());\n@@ -172,1 +173,1 @@\n-        assertEquals(\"StableValue[null]\", stable.toString());\n+        assertEquals(\"null\", stable.toString());\n@@ -179,1 +180,1 @@\n-        assertEquals(\"StableValue[\" + VALUE + \"]\", stable.toString());\n+        assertEquals(Objects.toString(VALUE), stable.toString());\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableValueTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}