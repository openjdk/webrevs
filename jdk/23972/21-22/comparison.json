{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableFunctionBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableFunctionSingleBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableIntFunctionBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableIntFunctionSingleBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.bench.java.lang.stable.StableValueBenchmark.Dcl;\n@@ -31,1 +32,0 @@\n-import org.openjdk.jmh.annotations.OperationsPerInvocation;\n@@ -41,1 +41,0 @@\n-import java.util.List;\n@@ -43,1 +42,1 @@\n-import java.util.function.IntFunction;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -62,0 +61,2 @@\n+    private static final Dcl<MethodHandle> DCL = new Dcl<>(StableMethodHandleBenchmark::identityHandle);\n+    private static final AtomicReference<MethodHandle> ATOMIC_REFERENCE = new AtomicReference<>(identityHandle());\n@@ -68,0 +69,10 @@\n+    @Benchmark\n+    public int atomic() throws Throwable {\n+        return (int) ATOMIC_REFERENCE.get().invokeExact(1);\n+    }\n+\n+    @Benchmark\n+    public int dcl() throws Throwable {\n+        return (int) DCL.get().invokeExact(1);\n+    }\n+\n@@ -74,2 +85,2 @@\n-    public int stableMh() throws Throwable {\n-        return (int)STABLE_MH.orElseThrow().invokeExact(1);\n+    public int nonFinalMh() throws Throwable {\n+        return (int) mh.invokeExact(1);\n@@ -79,2 +90,2 @@\n-    public int mh() throws Throwable {\n-        return (int)mh.invokeExact(1);\n+    public int stableMh() throws Throwable {\n+        return (int) STABLE_MH.orElseThrow().invokeExact(1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableMethodHandleBenchmark.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableSupplierBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,1 +165,1 @@\n-    private static class Dcl<V> implements Supplier<V> {\n+    public static class Dcl<V> implements Supplier<V> {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableValueBenchmark.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}