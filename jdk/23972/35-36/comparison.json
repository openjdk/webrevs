{"files":[{"patch":"@@ -61,6 +61,0 @@\n- * A stable value that is <em>set<\/em> is treated as a constant by the JVM, enabling the\n- * same performance optimizations that are available for {@code final} fields.\n- * As such, stable values can be used to replace {@code final} fields in cases where\n- * <em>at-most-once<\/em> update semantics is crucial, but where the eager initialization\n- * semantics associated with {@code final} fields is too restrictive.\n- * <p>\n@@ -78,1 +72,1 @@\n- *    private static final StableValue<Logger> logger = StableValue.of();\n+ *    private final StableValue<Logger> logger = StableValue.of();\n@@ -97,3 +91,0 @@\n- * In the example above, the {@code logger} field is declared {@code static final} which\n- * is a prerequisite for being treated as a constant by the JVM.\n- *\n@@ -112,1 +103,1 @@\n- *    private static final StableValue<Logger> logger = StableValue.of();\n+ *    private final StableValue<Logger> logger = StableValue.of();\n@@ -148,1 +139,1 @@\n- *     private static final Supplier<Logger> logger =\n+ *     private final Supplier<Logger> logger =\n@@ -300,1 +291,1 @@\n- * constant-folded. In the following example, a single {@code Foo} and a {@code Bar}\n+ * performant. In the following example, a single {@code Foo} and a {@code Bar}\n@@ -359,1 +350,1 @@\n- * constant-fold expressions like {@code Fibonacci.fib(10)}.\n+ * constant-fold expressions like {@code Fibonacci.fib(5)}.\n@@ -406,0 +397,13 @@\n+ * <h2 id=\"performance\">Performance<\/h2>\n+ * A stable value that is <em>set<\/em> is treated as a constant by the JVM, enabling the\n+ * same performance optimizations that are available for {@code final} fields.\n+ * As such, stable values can be used to replace {@code final} fields in cases where\n+ * <em>at-most-once<\/em> update semantics is crucial, but where the eager initialization\n+ * semantics associated with {@code final} fields is too restrictive.\n+ * <p>\n+ * In JDK 24, {@code final} instance fields in records and hidden classes (such as classes\n+ * spun from method references) are trusted by the JVM, allowing them to be treated as\n+ * constants. However, {@code final} instance fields in regular classes are <em>not<\/em>\n+ * trusted meaning that such fields are <em>not<\/em> eligible for performance\n+ * optimizations by the JVM (such as constant folding).\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"}]}