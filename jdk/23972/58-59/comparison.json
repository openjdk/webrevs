{"files":[{"patch":"@@ -118,1 +118,1 @@\n- * evaluates and sets the content; the content is then returned to the client. In other\n+ * evaluates the given supplier, and sets the content to the result; the content is then returned to the client. In other\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-        for (int key:KEYS) {\n+        for (int key : KEYS) {\n@@ -317,1 +317,1 @@\n-        public void   accept(Map<Integer, Integer> map) { consumer.accept(map); }\n+        public void accept(Map<Integer, Integer> map) { consumer.accept(map); }\n@@ -324,1 +324,1 @@\n-                new Operation(\"forEach\",     m -> m.forEach(null))\n+            new Operation(\"forEach\",     m -> m.forEach(null))\n@@ -330,12 +330,12 @@\n-                new Operation(\"clear\",             Map::clear),\n-                new Operation(\"compute\",           m -> m.compute(KEY, (_, _) -> 1)),\n-                new Operation(\"computeIfAbsent\",   m -> m.computeIfAbsent(KEY, _ -> 1)),\n-                new Operation(\"computeIfPresent\",  m -> m.computeIfPresent(KEY, (_, _) -> 1)),\n-                new Operation(\"merge\",             m -> m.merge(KEY, KEY, (a, _) -> a)),\n-                new Operation(\"put\",               m -> m.put(0, 0)),\n-                new Operation(\"putAll\",            m -> m.putAll(Map.of())),\n-                new Operation(\"remove1\",           m -> m.remove(KEY)),\n-                new Operation(\"remove2\",           m -> m.remove(KEY, KEY)),\n-                new Operation(\"replace2\",          m -> m.replace(KEY, 1)),\n-                new Operation(\"replace3\",          m -> m.replace(KEY, KEY, 1)),\n-                new Operation(\"replaceAll\",        m -> m.replaceAll((a, _) -> a))\n+            new Operation(\"clear\",             Map::clear),\n+            new Operation(\"compute\",           m -> m.compute(KEY, (_, _) -> 1)),\n+            new Operation(\"computeIfAbsent\",   m -> m.computeIfAbsent(KEY, _ -> 1)),\n+            new Operation(\"computeIfPresent\",  m -> m.computeIfPresent(KEY, (_, _) -> 1)),\n+            new Operation(\"merge\",             m -> m.merge(KEY, KEY, (a, _) -> a)),\n+            new Operation(\"put\",               m -> m.put(0, 0)),\n+            new Operation(\"putAll\",            m -> m.putAll(Map.of())),\n+            new Operation(\"remove1\",           m -> m.remove(KEY)),\n+            new Operation(\"remove2\",           m -> m.remove(KEY, KEY)),\n+            new Operation(\"replace2\",          m -> m.replace(KEY, 1)),\n+            new Operation(\"replace3\",          m -> m.replace(KEY, KEY, 1)),\n+            new Operation(\"replaceAll\",        m -> m.replaceAll((a, _) -> a))\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableMapTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}