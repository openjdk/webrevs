{"files":[{"patch":"@@ -253,4 +253,0 @@\n-static bool trust_final_non_static_fields_of_type(Symbol* signature) {\n-  return signature == vmSymbols::java_lang_StableValue_signature();\n-}\n-\n@@ -289,3 +285,1 @@\n-      _is_constant = is_stable_field ||\n-                     trust_final_non_static_fields(_holder) ||\n-                     trust_final_non_static_fields_of_type(fd->signature());\n+      _is_constant = is_stable_field || trust_final_non_static_fields(_holder);\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -747,3 +747,0 @@\n-  \/* Stable Values *\/                                                                                             \\\n-  template(java_lang_StableValue_signature,        \"Ljava\/lang\/StableValue;\")                                     \\\n-                                                                                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-  return is_final() && (is_static() || ik->is_hidden() || ik->is_record() ||\n-         signature() == vmSymbols::java_lang_StableValue_signature());\n+  return is_final() && (is_static() || ik->is_hidden() || ik->is_record());\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        return new StableSupplier<>(StableValueImpl.newInstance(), original);\n+        return new StableSupplier<>(StableValueImpl.of(), original);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableSupplier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-        return StableValueImpl.newInstance();\n+        return StableValueImpl.of();\n@@ -63,1 +63,1 @@\n-            stableValues[i] = StableValueImpl.newInstance();\n+            stableValues[i] = StableValueImpl.of();\n@@ -74,1 +74,1 @@\n-            entries[i++] = Map.entry(key, StableValueImpl.newInstance());\n+            entries[i++] = Map.entry(key, StableValueImpl.of());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueFactories.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-    static <T> StableValueImpl<T> newInstance() {\n+    static <T> StableValueImpl<T> of() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -898,1 +898,7 @@\n-        ensureNotTrusted(f);\n+        Class<?> declaringClass = f.getDeclaringClass();\n+        if (declaringClass.isHidden()) {\n+            throw new UnsupportedOperationException(\"can't get field offset on a hidden class: \" + f);\n+        }\n+        if (declaringClass.isRecord()) {\n+            throw new UnsupportedOperationException(\"can't get field offset on a record class: \" + f);\n+        }\n@@ -932,1 +938,7 @@\n-        ensureNotTrusted(f);\n+        Class<?> declaringClass = f.getDeclaringClass();\n+        if (declaringClass.isHidden()) {\n+            throw new UnsupportedOperationException(\"can't get field offset on a hidden class: \" + f);\n+        }\n+        if (declaringClass.isRecord()) {\n+            throw new UnsupportedOperationException(\"can't get field offset on a record class: \" + f);\n+        }\n@@ -958,1 +970,7 @@\n-        ensureNotTrusted(f);\n+        Class<?> declaringClass = f.getDeclaringClass();\n+        if (declaringClass.isHidden()) {\n+            throw new UnsupportedOperationException(\"can't get field offset on a hidden class: \" + f);\n+        }\n+        if (declaringClass.isRecord()) {\n+            throw new UnsupportedOperationException(\"can't get field offset on a record class: \" + f);\n+        }\n@@ -991,10 +1009,0 @@\n-        Class<?> fieldType = f.getType();\n-        \/\/ Todo: Change to \"java.lang.StableValue.class.isAssignableFrom(fieldType)\" etc. after StableValue exits preview\n-        if (fieldType.getName().equals(\"java.lang.StableValue\") || (fieldType.isArray() && deepComponent(fieldType).getName().equals(\"java.lang.StableValue\"))) {\n-            throw new UnsupportedOperationException(\"can't get field offset for a field of type \" + fieldType.getName() + \": \" + f);\n-        }\n-    }\n-\n-    @ForceInline\n-    private static Class<?> deepComponent(Class<?> clazz) {\n-        return clazz.isArray() ? deepComponent(clazz.getComponentType()) : clazz;\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -47,72 +47,0 @@\n-    @Test\n-    void reflection() throws NoSuchFieldException, IllegalAccessException {\n-        final class Holder {\n-            private final StableValue<Integer> value = StableValue.of();\n-        }\n-        final class HolderNonFinal {\n-            private StableValue<Integer> value = StableValue.of();\n-        }\n-        final class ArrayHolder {\n-            @SuppressWarnings(\"unchecked\")\n-            private final StableValue<Integer>[] array = (StableValue<Integer>[]) new StableValue[]{};\n-        }\n-\n-        Field valueField = Holder.class.getDeclaredField(\"value\");\n-        valueField.setAccessible(true);\n-        Holder holder = new Holder();\n-        \/\/ We should be able to read the StableValue field\n-        Object read = valueField.get(holder);\n-        \/\/ We should NOT be able to write to the StableValue field\n-        assertThrows(IllegalAccessException.class, () ->\n-                valueField.set(holder, StableValue.of())\n-        );\n-\n-        Field valueNonFinal = HolderNonFinal.class.getDeclaredField(\"value\");\n-        valueNonFinal.setAccessible(true);\n-        HolderNonFinal holderNonFinal = new HolderNonFinal();\n-        \/\/ As the field is not final, both read and write should be ok (not trusted)\n-        Object readNonFinal = valueNonFinal.get(holderNonFinal);\n-        valueNonFinal.set(holderNonFinal, StableValue.of());\n-\n-        Field arrayField = ArrayHolder.class.getDeclaredField(\"array\");\n-        arrayField.setAccessible(true);\n-        ArrayHolder arrayHolder = new ArrayHolder();\n-        \/\/ We should be able to read the StableValue array\n-        read = arrayField.get(arrayHolder);\n-        \/\/ We should be able to write to the StableValue array\n-        assertDoesNotThrow(() -> arrayField.set(arrayHolder, new StableValue[1]));\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    @Test\n-    void sunMiscUnsafe() throws NoSuchFieldException, IllegalAccessException {\n-        Field unsafeField = sun.misc.Unsafe.class.getDeclaredField(\"theUnsafe\");\n-        assertTrue(unsafeField.trySetAccessible());\n-        sun.misc.Unsafe unsafe = (sun.misc.Unsafe)unsafeField.get(null);\n-\n-        final class Holder {\n-            private final StableValue<Integer> value = StableValue.of();\n-        }\n-        final class ArrayHolder {\n-            @SuppressWarnings(\"unchecked\")\n-            private final StableValue<Integer>[] array = (StableValue<Integer>[]) new StableValue[]{};\n-        }\n-\n-        Field valueField = Holder.class.getDeclaredField(\"value\");\n-        assertThrows(UnsupportedOperationException.class, () ->\n-                unsafe.objectFieldOffset(valueField)\n-        );\n-\n-        Field arrayField = ArrayHolder.class.getDeclaredField(\"array\");\n-\n-        assertThrows(UnsupportedOperationException.class, () ->\n-                unsafe.objectFieldOffset(arrayField)\n-        );\n-\n-        \/\/ Test direct access\n-        StableValue<?> stableValue = StableValue.of();\n-        Class<?> clazz = stableValue.getClass();\n-        System.out.println(\"clazz = \" + clazz);\n-        assertThrows(NoSuchFieldException.class, () -> clazz.getField(\"value\"));\n-    }\n-\n@@ -200,1 +128,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/StableValue\/TrustedFieldTypeTest.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"modified"}]}