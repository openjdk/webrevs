{"files":[{"patch":"@@ -180,0 +180,1 @@\n+ *  }\n@@ -181,5 +182,3 @@\n- *      public static void computeSomeValues() {\n- *          double sqrt9 = sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n- *          double sqrt81 = sqrt(81); \/\/ Will not constant fold\n- *      }\n- *\n+ *  public static void computeSomeValues() {\n+ *      double sqrt9 = sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n+ *      double sqrt81 = sqrt(81); \/\/ Will not constant fold\n@@ -187,0 +186,1 @@\n+ *\n@@ -198,1 +198,1 @@\n- * public final class SqrtUtil {\n+ * class Log2Util {\n@@ -200,1 +200,1 @@\n- *     private SqrtUtil() {}\n+ *     private Log2Util() {}\n@@ -202,1 +202,4 @@\n- *     private static final Set<Integer> CACHED_KEYS = Set.of(1, 2, 4, 8, 16, 32);\n+ *     private static final Set<Integer> CACHED_KEYS =\n+ *             Set.of(1, 2, 4, 8, 16, 32);\n+ *     private static final UnaryOperator<Integer> LOG2_ORIGINAL =\n+ *             i -> 31 - Integer.numberOfLeadingZeros(i);\n@@ -204,1 +207,1 @@\n- *     private static final Function<Integer, Double> SQRT =\n+ *     private static final Function<Integer, Integer> LOG2_CACHED =\n@@ -206,8 +209,8 @@\n- *             StableValue.function(CACHED_KEYS, StrictMath::sqrt);\n- *\n- *     public static double sqrt(int a) {\n- *          if (CACHED_KEYS.contains(a)) {\n- *              return SQRT.apply(a);\n- *          } else {\n- *              return StrictMath.sqrt(a);\n- *          }\n+ *             StableValue.function(CACHED_KEYS, LOG2_ORIGINAL);\n+ *\n+ *     public static double log2(int a) {\n+ *         if (CACHED_KEYS.contains(a)) {\n+ *             return LOG2_CACHED.apply(a);\n+ *         } else {\n+ *             return LOG2_ORIGINAL.apply(a);\n+ *         }\n@@ -216,4 +219,1 @@\n- *     public static double computeSomeValues() {\n- *         double sqrt16 = sqrt(16); \/\/ May eventually constant fold to 4.0 at runtime\n- *         double sqrt81 = sqrt(81); \/\/ Will not constant fold\n- *     }\n+ * }\n@@ -221,0 +221,4 @@\n+ * public static double computeSomeValues() {\n+ *     double log16  = Log2Util.log2(16); \/\/ May eventually constant fold to 4 at runtime\n+ *     double log256 = Log2Util.log2(81); \/\/ Will not constant fold\n+ * }\n@@ -222,1 +226,0 @@\n- *}\n@@ -235,1 +238,1 @@\n- *     private SqrtUtil() {}\n+ *      private SqrtUtil() {}\n@@ -237,3 +240,3 @@\n- *     private static final List<Double> SQRT =\n- *             \/\/ @link substring=\"list\" target=\"#list(int,IntFunction)\" :\n- *             StableValue.list(CACHED_SIZE, StrictMath::sqrt);\n+ *      private static final List<Double> SQRT =\n+ *              \/\/ @link substring=\"list\" target=\"#list(int,IntFunction)\" :\n+ *              StableValue.list(CACHED_SIZE, StrictMath::sqrt);\n@@ -248,0 +251,1 @@\n+ *  }\n@@ -249,4 +253,4 @@\n- *      public static void computeSomeValues() {\n- *          double sqrt9 = sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n- *          double sqrt81 = sqrt(81); \/\/ Will not constant fold\n- *      }\n+ *  public static void computeSomeValues() {\n+ *       double sqrt9 = SqrtUtil.sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n+ *       double sqrt81 = SqrtUtil.sqrt(81); \/\/ Will not constant fold\n+ *  }\n@@ -255,1 +259,0 @@\n- *}\n@@ -262,1 +265,1 @@\n- * public final class SqrtUtil {\n+ * class Log2Util {\n@@ -264,1 +267,1 @@\n- *     private SqrtUtil() {}\n+ *     private Log2Util() {}\n@@ -266,1 +269,4 @@\n- *     private static final Set<Integer> CACHED_KEYS = Set.of(1, 2, 4, 8, 16, 32);\n+ *     private static final Set<Integer> CACHED_KEYS =\n+ *             Set.of(1, 2, 4, 8, 16, 32);\n+ *     private static final UnaryOperator<Integer> LOG2_ORIGINAL =\n+ *             i -> 31 - Integer.numberOfLeadingZeros(i);\n@@ -268,1 +274,1 @@\n- *     private static final Map<Integer, Double> SQRT =\n+ *     private static final Map<Integer, INTEGER> LOG2_CACHED =\n@@ -270,1 +276,1 @@\n- *             StableValue.map(CACHED_KEYS, StrictMath::sqrt);\n+ *             StableValue.map(CACHED_KEYS, LOG2_ORIGINAL);\n@@ -272,1 +278,1 @@\n- *     public static double sqrt(int a) {\n+ *     public static double log2(int a) {\n@@ -274,1 +280,1 @@\n- *              return SQRT.get(a);\n+ *              return LOG2_CACHED.get(a);\n@@ -276,1 +282,1 @@\n- *              return StrictMath.sqrt(a);\n+ *              return LOG2_ORIGINAL.apply(a);\n@@ -281,2 +287,2 @@\n- *         double sqrt16 = sqrt(16); \/\/ May eventually constant fold to 4.0 at runtime\n- *         double sqrt81 = sqrt(81); \/\/ Will not constant fold\n+ *         double log16 = Log2Util.log2(16);   \/\/ May eventually constant fold to 4 at runtime\n+ *         double log256 = Log2Util.log2(256); \/\/ Will not constant fold\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":47,"deletions":41,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Set;\n@@ -42,0 +43,3 @@\n+import java.util.function.Function;\n+import java.util.function.IntFunction;\n+import java.util.function.UnaryOperator;\n@@ -211,0 +215,62 @@\n+    @Test\n+    void intFunctionExample() {\n+        final class SqrtUtil {\n+\n+            private SqrtUtil() {}\n+\n+            private static final int CACHED_SIZE = 10;\n+\n+            private static final IntFunction<Double> SQRT =\n+                    \/\/ @link substring=\"intFunction\" target=\"#intFunction(int,IntFunction)\" :\n+                    StableValue.intFunction(CACHED_SIZE, StrictMath::sqrt);\n+\n+            public static double sqrt(int a) {\n+                if (a < CACHED_SIZE) {\n+                    return SQRT.apply(a);\n+                } else {\n+                    return StrictMath.sqrt(a);\n+                }\n+            }\n+        }\n+\n+\n+        double sqrt9 = SqrtUtil.sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n+        double sqrt81 = SqrtUtil.sqrt(81); \/\/ Will not constant fold\n+\n+        assertEquals(3, sqrt9);\n+        assertEquals(9, sqrt81);\n+    }\n+\n+    @Test\n+    void functionExample() {\n+\n+        class Log2Util {\n+\n+            private Log2Util() {}\n+\n+            private static final Set<Integer> CACHED_KEYS =\n+                    Set.of(1, 2, 4, 8, 16, 32);\n+            private static final UnaryOperator<Integer> LOG2_ORIGINAL =\n+                    i -> 31 - Integer.numberOfLeadingZeros(i);\n+\n+            private static final Function<Integer, Integer> LOG2_CACHED =\n+                    \/\/ @link substring=\"function\" target=\"#function(Set,Function)\" :\n+                    StableValue.function(CACHED_KEYS, LOG2_ORIGINAL);\n+\n+            public static double log2(int a) {\n+                if (CACHED_KEYS.contains(a)) {\n+                    return LOG2_CACHED.apply(a);\n+                } else {\n+                    return LOG2_ORIGINAL.apply(a);\n+                }\n+            }\n+\n+        }\n+\n+        double log16 = Log2Util.log2(16); \/\/ May eventually constant fold to 4.0 at runtime\n+        double log256 = Log2Util.log2(256); \/\/ Will not constant fold\n+\n+        assertEquals(4, log16);\n+        assertEquals(8, log256);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableValueTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"}]}