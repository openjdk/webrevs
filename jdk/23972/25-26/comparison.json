{"files":[{"patch":"@@ -52,1 +52,1 @@\n- * A {@code StableValue<T>} can be created using the factory method\n+ * A {@code StableValue<T>} is typically created using the factory method\n@@ -164,3 +164,4 @@\n- * factory. Upon creation, the input range (i.e. [0, size)) is specified together with\n- * an original {@linkplain IntFunction} which is invoked at most once per input value. In\n- * effect, the stable int function will act like a cache for the original {@linkplain IntFunction}:\n+ * factory. Upon creation, the input range (i.e. {@code [0, size)}) is specified together\n+ * with an original {@linkplain IntFunction} which is invoked at most once per input value.\n+ * In effect, the stable int function will act like a cache for the original\n+ * {@linkplain IntFunction}:\n@@ -173,0 +174,2 @@\n+ *      private static final int CACHED_SIZE = 10;\n+ *\n@@ -175,1 +178,9 @@\n- *              StableValue.intFunction(10, StrictMath::sqrt);\n+ *              StableValue.intFunction(CACHED_SIZE, StrictMath::sqrt);\n+ *\n+ *      public static double sqrt(int a) {\n+ *           if (a < CACHED_SIZE) {\n+ *                return SQRT.apply(a);\n+ *           } else {\n+ *                return StrictMath.sqrt(a);\n+ *           }\n+ *      }\n@@ -177,2 +188,3 @@\n- *      public static double sqrt9() {\n- *          return SQRT.apply(9); \/\/ May eventually constant fold to 3.0 at runtime\n+ *      public static void computeSomeValues() {\n+ *          double sqrt9 = sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n+ *          double sqrt81 = sqrt(81); \/\/ Will not constant fold\n@@ -197,0 +209,2 @@\n+ *     private static final Set<Integer> CACHED_KEYS = Set.of(1, 2, 4, 8, 16, 32);\n+ *\n@@ -199,1 +213,9 @@\n- *             StableValue.function(Set.of(1, 2, 4, 8, 16, 32), StrictMath::sqrt);\n+ *             StableValue.function(CACHED_KEYS, StrictMath::sqrt);\n+ *\n+ *     public static double sqrt(int a) {\n+ *          if (CACHED_KEYS.contains(a)) {\n+ *              return SQRT.apply(a);\n+ *          } else {\n+ *              return StrictMath.sqrt(a);\n+ *          }\n+ *     }\n@@ -201,2 +223,3 @@\n- *     public static double sqrt16() {\n- *         return SQRT.apply(16); \/\/ May eventually constant fold to 4.0 at runtime\n+ *     public static double computeSomeValues() {\n+ *         double sqrt16 = sqrt(16); \/\/ May eventually constant fold to 4.0 at runtime\n+ *         double sqrt81 = sqrt(81); \/\/ Will not constant fold\n@@ -217,0 +240,2 @@\n+ *      private static final int CACHED_SIZE = 10;\n+ *\n@@ -221,1 +246,9 @@\n- *             StableValue.list(10, StrictMath::sqrt);\n+ *             StableValue.list(CACHED_SIZE, StrictMath::sqrt);\n+ *\n+ *      public static double sqrt(int a) {\n+ *           if (a < CACHED_SIZE) {\n+ *                return SQRT.get(a);\n+ *           } else {\n+ *                return StrictMath.sqrt(a);\n+ *           }\n+ *      }\n@@ -223,3 +256,4 @@\n- *     public static double sqrt9() {\n- *         return SQRT.get(9); \/\/ May eventually constant fold to 3.0 at runtime\n- *     }\n+ *      public static void computeSomeValues() {\n+ *          double sqrt9 = sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n+ *          double sqrt81 = sqrt(81); \/\/ Will not constant fold\n+ *      }\n@@ -239,0 +273,2 @@\n+ *     private static final Set<Integer> CACHED_KEYS = Set.of(1, 2, 4, 8, 16, 32);\n+ *\n@@ -243,2 +279,11 @@\n- *     public static double sqrt16() {\n- *         return SQRT.get(16); \/\/ May eventually constant fold to 4.0 at runtime\n+ *     public static double sqrt(int a) {\n+ *          if (CACHED_KEYS.contains(a)) {\n+ *              return SQRT.get(a);\n+ *          } else {\n+ *              return StrictMath.sqrt(a);\n+ *          }\n+ *     }\n+ *\n+ *     public static double computeSomeValues() {\n+ *         double sqrt16 = sqrt(16); \/\/ May eventually constant fold to 4.0 at runtime\n+ *         double sqrt81 = sqrt(81); \/\/ Will not constant fold\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":61,"deletions":16,"binary":false,"changes":77,"status":"modified"}]}