{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -29,0 +30,4 @@\n+import jdk.internal.lang.stable.StableEnumFunction;\n+import jdk.internal.lang.stable.StableFunction;\n+import jdk.internal.lang.stable.StableIntFunction;\n+import jdk.internal.lang.stable.StableSupplier;\n@@ -30,1 +35,0 @@\n-import jdk.internal.lang.stable.StableValueFactories;\n@@ -34,0 +38,1 @@\n+import java.util.EnumSet;\n@@ -461,1 +466,1 @@\n-        return StableValueFactories.of();\n+        return StableValueImpl.of();\n@@ -473,1 +478,3 @@\n-        return StableValueFactories.of(content);\n+        final StableValue<T> stableValue = StableValue.of();\n+        stableValue.trySet(content);\n+        return stableValue;\n@@ -502,1 +509,1 @@\n-        return StableValueFactories.supplier(original);\n+        return StableSupplier.of(original);\n@@ -540,1 +547,1 @@\n-        return StableValueFactories.intFunction(size, original);\n+        return StableIntFunction.of(size, original);\n@@ -575,1 +582,3 @@\n-        return StableValueFactories.function(inputs, original);\n+        return inputs instanceof EnumSet<?> && !inputs.isEmpty()\n+                ? StableEnumFunction.of(inputs, original)\n+                : StableFunction.of(inputs, original);\n@@ -616,1 +625,1 @@\n-        return StableValueFactories.list(size, mapper);\n+        return SharedSecrets.getJavaUtilCollectionAccess().stableList(size, mapper);\n@@ -652,1 +661,1 @@\n-        return StableValueFactories.map(keys, mapper);\n+        return SharedSecrets.getJavaUtilCollectionAccess().stableMap(keys, mapper);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import jdk.internal.lang.stable.StableValueFactories;\n@@ -782,1 +781,1 @@\n-            this.delegates = StableValueFactories.array(size);\n+            this.delegates = StableUtil.array(size);\n@@ -1478,1 +1477,1 @@\n-            this.delegate = StableValueFactories.map(keys);\n+            this.delegate = StableUtil.map(keys);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.List;\n@@ -55,5 +54,5 @@\n-record StableEnumFunction<E extends Enum<E>, R>(Class<E> enumType,\n-                                                int firstOrdinal,\n-                                                IntPredicate member,\n-                                                @Stable StableValueImpl<R>[] delegates,\n-                                                Function<? super E, ? extends R> original) implements Function<E, R> {\n+public record StableEnumFunction<E extends Enum<E>, R>(Class<E> enumType,\n+                                                       int firstOrdinal,\n+                                                       IntPredicate member,\n+                                                       @Stable StableValueImpl<R>[] delegates,\n+                                                       Function<? super E, ? extends R> original) implements Function<E, R> {\n@@ -102,2 +101,2 @@\n-    static <T, E extends Enum<E>, R> Function<T, R> of(Set<? extends T> inputs,\n-                                                       Function<? super T, ? extends R> original) {\n+    public static <T, E extends Enum<E>, R> Function<T, R> of(Set<? extends T> inputs,\n+                                                              Function<? super T, ? extends R> original) {\n@@ -118,1 +117,1 @@\n-        return (Function<T, R>) new StableEnumFunction<E, R>(enumType, min, member, StableValueFactories.array(size), (Function<E, R>) original);\n+        return (Function<T, R>) new StableEnumFunction<E, R>(enumType, min, member, StableUtil.array(size), (Function<E, R>) original);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableEnumFunction.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.util.Collection;\n-import java.util.Collections;\n@@ -51,2 +49,2 @@\n-record StableFunction<T, R>(Map<? extends T, StableValueImpl<R>> values,\n-                            Function<? super T, ? extends R> original) implements Function<T, R> {\n+public record StableFunction<T, R>(Map<? extends T, StableValueImpl<R>> values,\n+                                   Function<? super T, ? extends R> original) implements Function<T, R> {\n@@ -80,3 +78,3 @@\n-    static <T, R> StableFunction<T, R> of(Set<? extends T> inputs,\n-                                          Function<? super T, ? extends R> original) {\n-        return new StableFunction<>(StableValueFactories.map(inputs), original);\n+    public static <T, R> StableFunction<T, R> of(Set<? extends T> inputs,\n+                                                 Function<? super T, ? extends R> original) {\n+        return new StableFunction<>(StableUtil.map(inputs), original);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableFunction.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-record StableIntFunction<R>(@Stable StableValueImpl<R>[] delegates,\n-                            IntFunction<? extends R> original) implements IntFunction<R> {\n+public record StableIntFunction<R>(@Stable StableValueImpl<R>[] delegates,\n+                                   IntFunction<? extends R> original) implements IntFunction<R> {\n@@ -79,2 +79,2 @@\n-    static <R> StableIntFunction<R> of(int size, IntFunction<? extends R> original) {\n-        return new StableIntFunction<>(StableValueFactories.array(size), original);\n+    public static <R> StableIntFunction<R> of(int size, IntFunction<? extends R> original) {\n+        return new StableIntFunction<>(StableUtil.array(size), original);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableIntFunction.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,2 @@\n-record StableSupplier<T>(StableValueImpl<T> delegate, Supplier<? extends T> original) implements Supplier<T> {\n+public record StableSupplier<T>(StableValueImpl<T> delegate,\n+                                Supplier<? extends T> original) implements Supplier<T> {\n@@ -64,1 +65,1 @@\n-    static <T> StableSupplier<T> of(Supplier<? extends T> original) {\n+    public static <T> StableSupplier<T> of(Supplier<? extends T> original) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableSupplier.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,0 +5,2 @@\n+import java.util.Objects;\n+import java.util.Set;\n@@ -50,0 +52,22 @@\n+    public static <T> StableValueImpl<T>[] array(int size) {\n+        if (size < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        final var stableValues = (StableValueImpl<T>[]) new StableValueImpl<?>[size];\n+        for (int i = 0; i < size; i++) {\n+            stableValues[i] = StableValueImpl.of();\n+        }\n+        return stableValues;\n+    }\n+\n+    public static <K, T> Map<K, StableValueImpl<T>> map(Set<K> keys) {\n+        Objects.requireNonNull(keys);\n+        @SuppressWarnings(\"unchecked\")\n+        final var entries = (Map.Entry<K, StableValueImpl<T>>[]) new Map.Entry<?, ?>[keys.size()];\n+        int i = 0;\n+        for (K key : keys) {\n+            entries[i++] = Map.entry(key, StableValueImpl.of());\n+        }\n+        return Map.ofEntries(entries);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableUtil.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-package jdk.internal.lang.stable;\n-\n-import jdk.internal.access.SharedSecrets;\n-\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.function.Function;\n-import java.util.function.IntFunction;\n-import java.util.function.Supplier;\n-\n-public final class StableValueFactories {\n-\n-    private StableValueFactories() {}\n-\n-    \/\/ Factories\n-\n-    public static <T> StableValueImpl<T> of() {\n-        return StableValueImpl.of();\n-    }\n-\n-    public static <T> StableValueImpl<T> of(T value) {\n-        final StableValueImpl<T> stableValue = of();\n-        stableValue.trySet(value);\n-        return stableValue;\n-    }\n-\n-    public static <T> Supplier<T> supplier(Supplier<? extends T> original) {\n-        return StableSupplier.of(original);\n-    }\n-\n-    public static <R> IntFunction<R> intFunction(int size,\n-                                                 IntFunction<? extends R> original) {\n-        return StableIntFunction.of(size, original);\n-    }\n-\n-    public static <T, R> Function<T, R> function(Set<? extends T> inputs,\n-                                                 Function<? super T, ? extends R> original) {\n-        return inputs instanceof EnumSet<?> && !inputs.isEmpty()\n-                ? StableEnumFunction.of(inputs, original)\n-                : StableFunction.of(inputs, original);\n-    }\n-\n-    public static <E> List<E> list(int size, IntFunction<? extends E> mapper) {\n-        return SharedSecrets.getJavaUtilCollectionAccess().stableList(size, mapper);\n-    }\n-\n-    public static <K, V> Map<K, V> map(Set<K> keys, Function<? super K, ? extends V> mapper) {\n-        return SharedSecrets.getJavaUtilCollectionAccess().stableMap(keys, mapper);\n-    }\n-\n-    \/\/ Supporting methods\n-\n-    public static <T> StableValueImpl<T>[] array(int size) {\n-        if (size < 0) {\n-            throw new IllegalArgumentException();\n-        }\n-        @SuppressWarnings(\"unchecked\")\n-        final var stableValues = (StableValueImpl<T>[]) new StableValueImpl<?>[size];\n-        for (int i = 0; i < size; i++) {\n-            stableValues[i] = StableValueImpl.of();\n-        }\n-        return stableValues;\n-    }\n-\n-    public static <K, T> Map<K, StableValueImpl<T>> map(Set<K> keys) {\n-        Objects.requireNonNull(keys);\n-        @SuppressWarnings(\"unchecked\")\n-        final var entries = (Map.Entry<K, StableValueImpl<T>>[]) new Map.Entry<?, ?>[keys.size()];\n-        int i = 0;\n-        for (K key : keys) {\n-            entries[i++] = Map.entry(key, StableValueImpl.of());\n-        }\n-        return Map.ofEntries(entries);\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueFactories.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -203,1 +203,1 @@\n-    static <T> StableValueImpl<T> of() {\n+    public static <T> StableValueImpl<T> of() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.lang.stable.StableUtil;\n@@ -32,1 +33,0 @@\n-import jdk.internal.lang.stable.StableValueFactories;\n@@ -312,1 +312,1 @@\n-        StableValueImpl<Integer>[] array = StableValueFactories.array(SIZE);\n+        StableValueImpl<Integer>[] array = StableUtil.array(SIZE);\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableListTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.lang.stable.StableUtil;\n@@ -32,1 +33,0 @@\n-import jdk.internal.lang.stable.StableValueFactories;\n@@ -273,1 +273,1 @@\n-        Map<Integer, StableValueImpl<Integer>> map = StableValueFactories.map(Set.of(1, 2, 3));\n+        Map<Integer, StableValueImpl<Integer>> map = StableUtil.map(Set.of(1, 2, 3));\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableMapTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.internal.lang.stable.StableValueFactories;\n+import jdk.internal.lang.stable.StableUtil;\n@@ -40,1 +40,1 @@\n-        assertThrows(IllegalArgumentException.class, () -> StableValueFactories.array(-1));\n+        assertThrows(IllegalArgumentException.class, () -> StableUtil.array(-1));\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableValueFactoriesTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}