{"files":[{"patch":"@@ -93,2 +93,2 @@\n- * evee created, the {@linkplain #orElseSet(Supplier) orElseSet()} method can be used\n- * instead, where the content is atomically and lazily computed via a\n+ * ever created, the {@linkplain #orElseSet(Supplier) orElseSet()} method can be used\n+ * instead, where the content is lazily computed, and atomically set, via a\n@@ -131,1 +131,1 @@\n- * a backing stable value storage for later use. A stable supplier is created via the\n+ * a backing stable value storage for subsequent use. A stable supplier is created via the\n@@ -169,1 +169,1 @@\n- *             v -> 1 << v;\n+ *         v -> 1 << v;\n@@ -172,2 +172,2 @@\n- *             \/\/ @link substring=\"intFunction\" target=\"#intFunction(int,IntFunction)\" :\n- *             StableValue.intFunction(SIZE, ORIGINAL_POWER_OF_TWO);\n+ *         \/\/ @link substring=\"intFunction\" target=\"#intFunction(int,IntFunction)\" :\n+ *         StableValue.intFunction(SIZE, ORIGINAL_POWER_OF_TWO);\n@@ -180,1 +180,1 @@\n- * int pwr4 = PowerOf2Util.powerOfTwo(4);   \/\/ May eventually constant fold to 16 at runtime\n+ * int result = PowerOf2Util.powerOfTwo(4);   \/\/ May eventually constant fold to 16 at runtime\n@@ -202,1 +202,1 @@\n- *             Set.of(1, 2, 4, 8, 16, 32);\n+ *         Set.of(1, 2, 4, 8, 16, 32);\n@@ -204,1 +204,1 @@\n- *             i -> 31 - Integer.numberOfLeadingZeros(i);\n+ *         i -> 31 - Integer.numberOfLeadingZeros(i);\n@@ -207,2 +207,2 @@\n- *             \/\/ @link substring=\"function\" target=\"#function(Set,Function)\" :\n- *             StableValue.function(KEYS, ORIGINAL_LOG2);\n+ *         \/\/ @link substring=\"function\" target=\"#function(Set,Function)\" :\n+ *         StableValue.function(KEYS, ORIGINAL_LOG2);\n@@ -216,1 +216,1 @@\n- * int log16 = Log2Util.log2(16);   \/\/ May eventually constant fold to 4 at runtime\n+ * int result = Log2Util.log2(16);   \/\/ May eventually constant fold to 4 at runtime\n@@ -239,2 +239,2 @@\n- *             \/\/ @link substring=\"list\" target=\"#list(int,IntFunction)\" :\n- *             StableValue.list(SIZE, ORIGINAL_POWER_OF_TWO);\n+ *         \/\/ @link substring=\"list\" target=\"#list(int,IntFunction)\" :\n+ *         StableValue.list(SIZE, ORIGINAL_POWER_OF_TWO);\n@@ -247,1 +247,1 @@\n- * int pwr4 = PowerOf2Util.powerOfTwo(4);   \/\/ May eventually constant fold to 16 at runtime\n+ * int result = PowerOf2Util.powerOfTwo(4);   \/\/ May eventually constant fold to 16 at runtime\n@@ -261,1 +261,1 @@\n- *             Set.of(1, 2, 4, 8, 16, 32);\n+ *         Set.of(1, 2, 4, 8, 16, 32);\n@@ -263,1 +263,1 @@\n- *             i -> 31 - Integer.numberOfLeadingZeros(i);\n+ *         i -> 31 - Integer.numberOfLeadingZeros(i);\n@@ -266,2 +266,2 @@\n- *             \/\/ @link substring=\"map\" target=\"#map(Set,Function)\" :\n- *             StableValue.map(CACHED_KEYS, LOG2_ORIGINAL);\n+ *         \/\/ @link substring=\"map\" target=\"#map(Set,Function)\" :\n+ *         StableValue.map(CACHED_KEYS, LOG2_ORIGINAL);\n@@ -275,1 +275,1 @@\n- * int log16 = Log2Util.log2(16);   \/\/ May eventually constant fold to 4 at runtime\n+ * int result = Log2Util.log2(16);   \/\/ May eventually constant fold to 4 at runtime\n@@ -327,1 +327,1 @@\n- *             StableValue.intFunction(MAX_SIZE_INT, Fibonacci::fib);\n+ *         StableValue.intFunction(MAX_SIZE_INT, Fibonacci::fib);\n@@ -491,1 +491,1 @@\n-     * Value witness = stable.orElseSet(Value::new);\n+     * Value v = stable.orElseSet(Value::new);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @summary Basic tests for StableFunctionTest methods\n+ * @summary Basic tests for StableFunction methods\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableFunctionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @summary Basic tests for StableIntFunctionTest methods\n+ * @summary Basic tests for StableIntFunction methods\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableIntFunctionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @summary Basic tests for LazyList methods\n+ * @summary Basic tests for StableList methods\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @summary Basic tests for LazyMap methods\n+ * @summary Basic tests for StableMap methods\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableMapTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @summary Basic tests for StableSupplierTest methods\n+ * @summary Basic tests for StableSupplier methods\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableSupplierTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @summary Basic tests for StableValueFactoriesTest implementations\n+ * @summary Basic tests for StableValue factory implementations\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableValueFactoriesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}