{"files":[{"patch":"@@ -120,1 +120,1 @@\n- * before it is used.\n+ * before it returns.\n@@ -133,1 +133,1 @@\n- * providing an original {@linkplain Supplier} which is invoked when the stable supplier\n+ * providing an underlying {@linkplain Supplier} which is invoked when the stable supplier\n@@ -158,2 +158,2 @@\n- * with an original {@linkplain IntFunction} which is invoked at most once per input value.\n- * In effect, the stable int function will act like a cache for the original\n+ * with an underlying {@linkplain IntFunction} which is invoked at most once per input\n+ * value. In effect, the stable int function will act like a cache for the underlying\n@@ -168,1 +168,1 @@\n- *     private static final IntFunction<Integer> ORIGINAL_POWER_OF_TWO =\n+ *     private static final IntFunction<Integer> UNDERLYING_POWER_OF_TWO =\n@@ -173,1 +173,1 @@\n- *         StableValue.intFunction(SIZE, ORIGINAL_POWER_OF_TWO);\n+ *         StableValue.intFunction(SIZE, UNDERLYING_POWER_OF_TWO);\n@@ -184,1 +184,1 @@\n- * allows a subset {@code [0, 5]} of the original function's {@code ORIGINAL_POWER_OF_TWO}\n+ * allows a subset {@code [0, 5]} of the underlying function's {@code UNDERLYING_POWER_OF_TWO}\n@@ -192,1 +192,1 @@\n- * Upon creation, the input {@linkplain Set} is specified together with an original\n+ * Upon creation, the input {@linkplain Set} is specified together with an underlying\n@@ -194,1 +194,1 @@\n- * stable function will act like a cache for the original {@linkplain Function}:\n+ * stable function will act like a cache for the underlying {@linkplain Function}:\n@@ -203,1 +203,1 @@\n- *     private static final UnaryOperator<Integer> ORIGINAL_LOG2 =\n+ *     private static final UnaryOperator<Integer> UNDERLYING_LOG2 =\n@@ -208,1 +208,1 @@\n- *         StableValue.function(KEYS, ORIGINAL_LOG2);\n+ *         StableValue.function(KEYS, UNDERLYING_LOG2);\n@@ -220,2 +220,2 @@\n- * a subset {@code {1, 2, 4, 8, 16, 32}} of the original function's\n- * {@code ORIGINAL_LOG2} input range.\n+ * a subset {@code {1, 2, 4, 8, 16, 32}} of the underlying function's\n+ * {@code UNDERLYING_LOG2} input range.\n@@ -235,1 +235,1 @@\n- *     private static final IntFunction<Integer> ORIGINAL_POWER_OF_TWO =\n+ *     private static final IntFunction<Integer> UNDERLYING_POWER_OF_TWO =\n@@ -240,1 +240,1 @@\n- *         StableValue.list(SIZE, ORIGINAL_POWER_OF_TWO);\n+ *         StableValue.list(SIZE, UNDERLYING_POWER_OF_TWO);\n@@ -262,1 +262,1 @@\n- *     private static final UnaryOperator<Integer> LOG2_ORIGINAL =\n+ *     private static final UnaryOperator<Integer> UNDERLYING_LOG2 =\n@@ -267,1 +267,1 @@\n- *         StableValue.map(CACHED_KEYS, LOG2_ORIGINAL);\n+ *         StableValue.map(CACHED_KEYS, UNDERLYING_LOG2);\n@@ -317,2 +317,2 @@\n- * Here is another example where a more complex dependency graph is created in which\n- * integers in the Fibonacci delta series are lazily computed:\n+ * Another example, which has a more complex dependency graph, is to lazily computing the\n+ * Fibonacci sequence:\n@@ -562,1 +562,1 @@\n-     * the value of the provided {@code original} supplier upon being first accessed via\n+     * the value of the provided {@code underlying} supplier upon being first accessed via\n@@ -565,1 +565,1 @@\n-     * The provided {@code original} supplier is guaranteed to be successfully invoked\n+     * The provided {@code underlying} supplier is guaranteed to be successfully invoked\n@@ -571,1 +571,1 @@\n-     * If the provided {@code original} supplier throws an exception, it is relayed\n+     * If the provided {@code underlying} supplier throws an exception, it is relayed\n@@ -574,1 +574,1 @@\n-     * If the provided {@code original} supplier recursively calls the returned\n+     * If the provided {@code underlying} supplier recursively calls the returned\n@@ -577,2 +577,2 @@\n-     * @param original supplier used to compute a cached value\n-     * @param <T>      the type of results supplied by the returned supplier\n+     * @param underlying supplier used to compute a cached value\n+     * @param <T>        the type of results supplied by the returned supplier\n@@ -580,3 +580,3 @@\n-    static <T> Supplier<T> supplier(Supplier<? extends T> original) {\n-        Objects.requireNonNull(original);\n-        return StableSupplier.of(original);\n+    static <T> Supplier<T> supplier(Supplier<? extends T> underlying) {\n+        Objects.requireNonNull(underlying);\n+        return StableSupplier.of(underlying);\n@@ -589,1 +589,1 @@\n-     * input, records the values of the provided {@code original}\n+     * input, records the values of the provided {@code underlying}\n@@ -595,1 +595,1 @@\n-     * The provided {@code original} function is guaranteed to be successfully invoked\n+     * The provided {@code underlying} function is guaranteed to be successfully invoked\n@@ -602,1 +602,1 @@\n-     * If the provided {@code original} function throws an exception, it is relayed\n+     * If the provided {@code underlying} function throws an exception, it is relayed\n@@ -605,1 +605,1 @@\n-     * If the provided {@code original} function recursively calls the returned\n+     * If the provided {@code underlying} function recursively calls the returned\n@@ -609,3 +609,3 @@\n-     * @param size     the size of the allowed inputs in {@code [0, size)}\n-     * @param original IntFunction used to compute cached values\n-     * @param <R>      the type of results delivered by the returned IntFunction\n+     * @param size       the size of the allowed inputs in {@code [0, size)}\n+     * @param underlying IntFunction used to compute cached values\n+     * @param <R>        the type of results delivered by the returned IntFunction\n@@ -615,1 +615,1 @@\n-                                          IntFunction<? extends R> original) {\n+                                          IntFunction<? extends R> underlying) {\n@@ -619,2 +619,2 @@\n-        Objects.requireNonNull(original);\n-        return StableIntFunction.of(size, original);\n+        Objects.requireNonNull(underlying);\n+        return StableIntFunction.of(size, underlying);\n@@ -628,1 +628,1 @@\n-     * {@code original} function upon being first accessed via the returned function's\n+     * {@code underlying} function upon being first accessed via the returned function's\n@@ -633,1 +633,1 @@\n-     * The provided {@code original} function is guaranteed to be successfully invoked\n+     * The provided {@code underlying} function is guaranteed to be successfully invoked\n@@ -639,1 +639,1 @@\n-     * If the provided {@code original} function throws an exception, it is relayed to\n+     * If the provided {@code underlying} function throws an exception, it is relayed to\n@@ -642,1 +642,1 @@\n-     * If the provided {@code original} function recursively calls the returned\n+     * If the provided {@code underlying} function recursively calls the returned\n@@ -646,4 +646,4 @@\n-     * @param inputs   the set of (non-null) allowed input values\n-     * @param original Function used to compute cached values\n-     * @param <T>      the type of the input to the returned Function\n-     * @param <R>      the type of results delivered by the returned Function\n+     * @param inputs     the set of (non-null) allowed input values\n+     * @param underlying Function used to compute cached values\n+     * @param <T>        the type of the input to the returned Function\n+     * @param <R>        the type of results delivered by the returned Function\n@@ -654,1 +654,1 @@\n-                                          Function<? super T, ? extends R> original) {\n+                                          Function<? super T, ? extends R> underlying) {\n@@ -656,1 +656,1 @@\n-        Objects.requireNonNull(original);\n+        Objects.requireNonNull(underlying);\n@@ -658,2 +658,2 @@\n-                ? StableEnumFunction.of(inputs, original)\n-                : StableFunction.of(inputs, original);\n+                ? StableEnumFunction.of(inputs, underlying)\n+                : StableFunction.of(inputs, underlying);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":50,"deletions":50,"binary":false,"changes":100,"status":"modified"}]}