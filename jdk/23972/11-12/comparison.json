{"files":[{"patch":"@@ -1511,0 +1511,5 @@\n+            @Override\n+            public String toString() {\n+                return StableUtil.renderMappings(this, \"StableSet\", delegateEntrySet);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -226,0 +226,20 @@\n+    @Test\n+    void subList2() {\n+        var lazy = newList();\n+        var lazySubList = lazy.subList(1, SIZE);\n+        lazySubList.get(0);\n+        var eq = newList();\n+        eq.get(1);\n+        assertEquals(eq.toString(), lazy.toString());\n+    }\n+\n+    @Test\n+    void subListToString() {\n+        var lazy = newList();\n+        var lazySubList = lazy.subList(1, SIZE);\n+        var regularList = newRegularList();\n+        var regularSubList = regularList.subList(1, SIZE);\n+        \/\/ There is no requirement that the lazy sub list's toString method should be lazy\n+        assertEquals(regularSubList.toString(), lazySubList.toString());\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableListTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -170,0 +170,40 @@\n+    @Test\n+    void entrySetToString() {\n+        var map = newMap();\n+        var entrySet = map.entrySet();\n+        for (var key : KEYS) {\n+            assertTrue(entrySet.toString().contains(key + \"=.unset\"));\n+        }\n+        map.get(KEY);\n+        for (var key : KEYS) {\n+            if (key.equals(KEY)) {\n+                continue;\n+            }\n+            assertTrue(entrySet.toString().contains(key + \"=.unset\"));\n+        }\n+        assertTrue(entrySet.toString().contains(KEY + \"=\" + KEY));\n+    }\n+\n+    @Test\n+    void values() {\n+        var map = newMap();\n+        var values = map.values();\n+        \/\/ Look at one of the elements\n+        var val = values.stream().iterator().next();\n+        for (var key : KEYS) {\n+            if (key.equals(val)) {\n+                assertTrue(map.toString().contains(key + \"=\" + key));\n+            } else {\n+                assertTrue(map.toString().contains(key + \"=.unset\"));\n+            }\n+        }\n+\n+        \/\/ Mod ops\n+        assertThrows(UnsupportedOperationException.class, () -> values.remove(KEY));\n+        assertThrows(UnsupportedOperationException.class, () -> values.add(KEY));\n+        assertThrows(UnsupportedOperationException.class, values::clear);\n+        assertThrows(UnsupportedOperationException.class, () -> values.addAll(Set.of(1)));\n+        assertThrows(UnsupportedOperationException.class, () -> values.removeIf(i -> true));\n+        assertThrows(UnsupportedOperationException.class, () -> values.retainAll(Set.of(KEY)));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableMapTest.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}