{"files":[{"patch":"@@ -163,1 +163,1 @@\n- * public final class SqrtUtil {\n+ * final class PowerOf2Util {\n@@ -165,1 +165,1 @@\n- *      private SqrtUtil() {}\n+ *     private PowerOf2Util() {}\n@@ -167,1 +167,3 @@\n- *      private static final int CACHED_SIZE = 10;\n+ *     private static final int SIZE = 6;\n+ *     private static final IntFunction<Integer> ORIGINAL_POWER_OF_TWO =\n+ *             v -> 1 << v;\n@@ -169,3 +171,3 @@\n- *      private static final IntFunction<Double> SQRT =\n- *              \/\/ @link substring=\"intFunction\" target=\"#intFunction(int,IntFunction)\" :\n- *              StableValue.intFunction(CACHED_SIZE, StrictMath::sqrt);\n+ *     private static final IntFunction<Integer> POWER_OF_TWO =\n+ *             \/\/ @link substring=\"intFunction\" target=\"#intFunction(int,IntFunction)\" :\n+ *             StableValue.intFunction(SIZE, ORIGINAL_POWER_OF_TWO);\n@@ -173,4 +175,4 @@\n- *      public static double sqrt(int a) {\n- *          return SQRT.apply(a);\n- *      }\n- *  }\n+ *     public static int powerOfTwo(int a) {\n+ *         return POWER_OF_TWO.apply(a);\n+ *     }\n+ * }\n@@ -178,3 +180,1 @@\n- *  public static void computeSomeValues() {\n- *      double sqrt9 = sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n- *  }\n+ * int pwr4 = PowerOf2Util.powerOfTwo(4);   \/\/ May eventually constant fold to 16 at runtime\n@@ -183,2 +183,3 @@\n- * The {@code SqrtUtil.sqrt()} function is a <em>partial function<\/em> that only allows a\n- * subset {@code [0, 9]} of the original function's {@code StrictMath::sqrt} input range.\n+ * The {@code PowerOf2Util.powerOfTwo()} function is a <em>partial function<\/em> that only\n+ * allows a subset {@code [0, 5]} of the original function's {@code ORIGINAL_POWER_OF_TWO}\n+ * input range.\n@@ -202,1 +203,1 @@\n- *     private static final UnaryOperator<Integer> LOG2_ORIGINAL =\n+ *     private static final UnaryOperator<Integer> ORIGINAL_LOG2 =\n@@ -207,1 +208,1 @@\n- *             StableValue.function(KEYS, LOG2_ORIGINAL);\n+ *             StableValue.function(KEYS, ORIGINAL_LOG2);\n@@ -221,2 +222,2 @@\n- * a subset ({@code {1, 2, 4, 8, 16, 32}}) of the original function's\n- * {@code LOG2_ORIGINAL} input range.\n+ * a subset {@code {1, 2, 4, 8, 16, 32}} of the original function's\n+ * {@code ORIGINAL_LOG2} input range.\n@@ -231,1 +232,1 @@\n- * public final class SqrtUtil {\n+ * final class PowerOf2Util {\n@@ -233,1 +234,1 @@\n- *      private static final int CACHED_SIZE = 10;\n+ *     private PowerOf2Util() {}\n@@ -235,1 +236,3 @@\n- *      private SqrtUtil() {}\n+ *     private static final int SIZE = 6;\n+ *     private static final IntFunction<Integer> ORIGINAL_POWER_OF_TWO =\n+ *             v -> 1 << v;\n@@ -237,3 +240,3 @@\n- *      private static final List<Double> SQRT =\n- *              \/\/ @link substring=\"list\" target=\"#list(int,IntFunction)\" :\n- *              StableValue.list(CACHED_SIZE, StrictMath::sqrt);\n+ *     private static final List<Integer> POWER_OF_TWO =\n+ *             \/\/ @link substring=\"list\" target=\"#list(int,IntFunction)\" :\n+ *             StableValue.list(SIZE, ORIGINAL_POWER_OF_TWO);\n@@ -241,4 +244,4 @@\n- *      public static double sqrt(int a) {\n- *          return SQRT.get(a);\n- *      }\n- *  }\n+ *     public static int powerOfTwo(int a) {\n+ *         return POWER_OF_TWO.gety(a);\n+ *     }\n+ * }\n@@ -246,3 +249,1 @@\n- *  public static void computeSomeValues() {\n- *       double sqrt9 = SqrtUtil.sqrt(9);   \/\/ May eventually constant fold to 3.0 at runtime\n- *  }\n+ * int pwr4 = PowerOf2Util.powerOfTwo(4);   \/\/ May eventually constant fold to 16 at runtime\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":33,"deletions":32,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-        final class HexUtil {\n+        final class PowerOf2Util {\n@@ -242,1 +242,1 @@\n-            private HexUtil() {}\n+            private PowerOf2Util() {}\n@@ -244,1 +244,3 @@\n-            private static final int SIZE = 0x10;\n+            private static final int SIZE = 6;\n+            private static final IntFunction<Integer> ORIGINAL_POWER_OF_TWO =\n+                    v -> 1 << v;\n@@ -246,1 +248,1 @@\n-            private static final IntFunction<String> TO_HEX =\n+            private static final IntFunction<Integer> POWER_OF_TWO =\n@@ -248,1 +250,1 @@\n-                    StableValue.intFunction(SIZE, Integer::toHexString);\n+                    StableValue.intFunction(SIZE, ORIGINAL_POWER_OF_TWO);\n@@ -250,2 +252,2 @@\n-            public static String toHex(int a) {\n-                return TO_HEX.apply(a);\n+            public static int powerOfTwo(int a) {\n+                return POWER_OF_TWO.apply(a);\n@@ -255,1 +257,1 @@\n-        String hex10 = HexUtil.toHex(10);   \/\/ May eventually constant fold to \"A\" at runtime\n+        int pwr4 = PowerOf2Util.powerOfTwo(4);   \/\/ May eventually constant fold to 16 at runtime\n@@ -257,4 +259,5 @@\n-        assertEquals(\"0\", HexUtil.toHex(0x0));\n-        assertEquals(\"a\", hex10);\n-        assertEquals(\"f\", HexUtil.toHex(0xf));\n-        assertThrows(IllegalArgumentException.class, () -> HexUtil.toHex(0x10));\n+        assertEquals(16, pwr4);\n+        assertEquals(1, PowerOf2Util.powerOfTwo(0));\n+        assertEquals(8, PowerOf2Util.powerOfTwo(3));\n+        assertEquals(32, PowerOf2Util.powerOfTwo(5));\n+        assertThrows(IllegalArgumentException.class, () -> PowerOf2Util.powerOfTwo(10));\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableValueTest.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"}]}