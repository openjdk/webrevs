{"files":[{"patch":"@@ -63,1 +63,1 @@\n-    private static final Map<Integer, Integer> STABLE = StableValue.map(SET, Function.identity());\n+    private static final Map<Integer, Integer> MAP = StableValue.map(SET, Function.identity());\n@@ -66,1 +66,1 @@\n-    private final Map<Integer, Integer> stable = StableValue.map(SET, Function.identity());\n+    private final Map<Integer, Integer> map = StableValue.map(SET, Function.identity());\n@@ -70,1 +70,1 @@\n-    public int stable() {\n+    public int map() {\n@@ -73,1 +73,1 @@\n-            sum += stable.get(i);\n+            sum += map.get(i);\n@@ -88,1 +88,1 @@\n-    public int staticStable() {\n+    public int staticSMap() {\n@@ -91,1 +91,1 @@\n-            sum += STABLE.get(i);\n+            sum += MAP.get(i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableFunctionBenchmark.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang.stable;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+\/**\n+ * Benchmark measuring StableValue performance\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark) \/\/ Share the same state instance (for contention)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(value = 2, jvmArgsAppend = {\n+        \"--enable-preview\"\n+})\n+@Threads(Threads.MAX)   \/\/ Benchmark under contention\n+public class StableFunctionSingleBenchmark {\n+\n+    private static final int SIZE = 100;\n+    private static final Set<Integer> SET = IntStream.range(0, SIZE).boxed().collect(Collectors.toSet());\n+\n+    private static final Map<Integer, Integer> MAP = StableValue.map(SET, Function.identity());\n+    private static final Function<Integer, Integer> FUNCTION = StableValue.function(SET, Function.identity());\n+\n+    private final Map<Integer, Integer> map = StableValue.map(SET, Function.identity());\n+    private final Function<Integer, Integer> function = StableValue.function(SET, Function.identity());\n+\n+    @Benchmark\n+    public int map() {\n+        return map.get(1);\n+    }\n+\n+    @Benchmark\n+    public int function() {\n+        return function.apply(1);\n+    }\n+\n+    @Benchmark\n+    public int staticSMap() {\n+        return MAP.get(1);\n+    }\n+\n+    @Benchmark\n+    public int staticIntFunction() {\n+        return FUNCTION.apply(1);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableFunctionSingleBenchmark.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -60,1 +60,1 @@\n-    private static final List<Integer> STABLE = StableValue.list(SIZE, IDENTITY);\n+    private static final List<Integer> LIST = StableValue.list(SIZE, IDENTITY);\n@@ -63,1 +63,1 @@\n-    private final List<Integer> stable = StableValue.list(SIZE, IDENTITY);\n+    private final List<Integer> list = StableValue.list(SIZE, IDENTITY);\n@@ -67,1 +67,1 @@\n-    public int stable() {\n+    public int list() {\n@@ -70,1 +70,1 @@\n-            sum += stable.get(i);\n+            sum += list.get(i);\n@@ -75,1 +75,0 @@\n-\n@@ -86,1 +85,1 @@\n-    public int staticStable() {\n+    public int staticList() {\n@@ -89,1 +88,1 @@\n-            sum += STABLE.get(i);\n+            sum += LIST.get(i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableIntFunctionBenchmark.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang.stable;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.IntFunction;\n+\n+\/**\n+ * Benchmark measuring StableValue performance\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark) \/\/ Share the same state instance (for contention)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(value = 2, jvmArgsAppend = {\n+        \"--enable-preview\"\n+})\n+@Threads(Threads.MAX)   \/\/ Benchmark under contention\n+public class StableIntFunctionSingleBenchmark {\n+\n+    private static final int SIZE = 100;\n+    private static final IntFunction<Integer> IDENTITY = i -> i;\n+\n+    private static final List<Integer> STABLE = StableValue.list(SIZE, IDENTITY);\n+    private static final IntFunction<Integer> INT_FUNCTION = StableValue.intFunction(SIZE, IDENTITY);\n+\n+    private final List<Integer> stable = StableValue.list(SIZE, IDENTITY);\n+    private final IntFunction<Integer> intFunction = StableValue.intFunction(SIZE, IDENTITY);\n+\n+    @Benchmark\n+    public int list() {\n+        return stable.get(1);\n+    }\n+\n+    @Benchmark\n+    public int intFunction() {\n+        return intFunction.apply(1);\n+    }\n+\n+    @Benchmark\n+    public int staticList() {\n+        return STABLE.get(1);\n+    }\n+\n+    @Benchmark\n+    public int staticIntFunction() {\n+        return INT_FUNCTION.apply(1);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableIntFunctionSingleBenchmark.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -79,1 +79,0 @@\n-\/*\n@@ -89,1 +88,0 @@\n-*\/\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableSupplierBenchmark.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+    private static final RecordHolder RECORD_HOLDER = new RecordHolder(VALUE);\n+    private static final RecordHolder RECORD_HOLDER2 = new RecordHolder(VALUE2);\n@@ -74,12 +76,1 @@\n-        stableNull2.trySet(VALUE2);\n-        \/\/ Create pollution\n-        int sum = 0;\n-        for (int i = 0; i < 500_000; i++) {\n-            final int v = i;\n-            Dcl<Integer> dclX = new Dcl<>(() -> v);\n-            sum += dclX.get();\n-            StableValue<Integer> stableX = StableValue.of();\n-            stableX.trySet(i);\n-            sum += stableX.orElseThrow();\n-        }\n-        System.out.println(\"sum = \" + sum);\n+        stableNull2.trySet(null);\n@@ -129,0 +120,5 @@\n+    @Benchmark\n+    public int staticRecordHolder() {\n+        return RECORD_HOLDER.get() + RECORD_HOLDER2.get();\n+    }\n+\n@@ -140,2 +136,0 @@\n-    \/\/ The VM should be able to constant-fold the value given in the constructor\n-    \/\/ because StableValue fields have a special meaning.\n@@ -156,0 +150,14 @@\n+    private record RecordHolder(StableValue<Integer> delegate) {\n+\n+        RecordHolder(int value) {\n+            this(StableValue.of());\n+            delegate.setOrThrow(value);\n+        }\n+\n+        int get() {\n+            return delegate.orElseThrow();\n+        }\n+\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/stable\/StableValueBenchmark.java","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"}]}