{"files":[{"patch":"@@ -77,1 +77,1 @@\n-        \/\/ Prevent reentry via orElseSet\n+        \/\/ Prevent reentry via an orElseSet(supplier)\n@@ -81,1 +81,1 @@\n-        \/\/ Mutual exclusion is required here as `computeIfUnset` might also\n+        \/\/ Mutual exclusion is required here as `orElseSet` might also\n@@ -92,2 +92,2 @@\n-            throw new IllegalStateException(\"Cannot set the underlying data to \" + value +\n-                    \" because the underlying data is already set: \" + this);\n+            throw new IllegalStateException(\"Cannot set the content to \" + value +\n+                    \" because the content is already set: \" + orElseThrow());\n@@ -102,1 +102,1 @@\n-            throw new NoSuchElementException(\"No underlying data set\");\n+            throw new NoSuchElementException(\"No content set\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -65,1 +65,4 @@\n-        assertThrows(IllegalStateException.class, () -> stable.setOrThrow(VALUE2));\n+        var e = assertThrows(IllegalStateException.class, () -> stable.setOrThrow(VALUE2));\n+        assertEquals(\n+                \"Cannot set the content to \" + VALUE2 + \" because the content is already set: \" + VALUE,\n+                e.getMessage());\n@@ -90,1 +93,1 @@\n-        assertEquals(\"No underlying data set\", e.getMessage());\n+        assertEquals(\"No content set\", e.getMessage());\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableValueTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}