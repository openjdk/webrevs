{"files":[{"patch":"@@ -174,5 +174,1 @@\n- *           if (a < CACHED_SIZE) {\n- *                return SQRT.apply(a);\n- *           } else {\n- *                return StrictMath.sqrt(a);\n- *           }\n+ *          return SQRT.apply(a);\n@@ -184,1 +180,0 @@\n- *      double sqrt81 = sqrt(81); \/\/ Will not constant fold\n@@ -188,0 +183,3 @@\n+ * The {@code SqrtUtil.sqrt()} function is a <em>partial function<\/em> that only allows a\n+ * subset {@code [0, 9]} of the original function's {@code StrictMath::sqrt} input range.\n+ *\n@@ -202,1 +200,1 @@\n- *     private static final Set<Integer> CACHED_KEYS =\n+ *     private static final Set<Integer> KEYS =\n@@ -207,1 +205,1 @@\n- *     private static final Function<Integer, Integer> LOG2_CACHED =\n+ *     private static final Function<Integer, Integer> LOG2 =\n@@ -209,1 +207,1 @@\n- *             StableValue.function(CACHED_KEYS, LOG2_ORIGINAL);\n+ *             StableValue.function(KEYS, LOG2_ORIGINAL);\n@@ -212,5 +210,1 @@\n- *         if (CACHED_KEYS.contains(a)) {\n- *             return LOG2_CACHED.apply(a);\n- *         } else {\n- *             return LOG2_ORIGINAL.apply(a);\n- *         }\n+ *         return LOG2.apply(a);\n@@ -223,2 +217,0 @@\n- *     double log256 = Log2Util.log2(81); \/\/ Will not constant fold\n- * }\n@@ -226,4 +218,5 @@\n- * Note: The {@code LOG2_CACHED} function is a <em>partial function<\/em> that only has\n- *       a small number of allowed inputs whereas {@code Log2Util.log2} is a\n- *       <em>total function<\/em> that allows the same input set that the original function\n- *       is defined for.\n+ *}\n+ *\n+ * The {@code Log2Util.log2()} function is a <em>partial function<\/em> that only allows\n+ * a subset ({@code {1, 2, 4, 8, 16, 32}}) of the original function's\n+ * {@code LOG2_ORIGINAL} input range.\n@@ -249,5 +242,1 @@\n- *           if (a < CACHED_SIZE) {\n- *                return SQRT.get(a);\n- *           } else {\n- *                return StrictMath.sqrt(a);\n- *           }\n+ *          return SQRT.get(a);\n@@ -259,1 +248,0 @@\n- *       double sqrt81 = SqrtUtil.sqrt(81); \/\/ Will not constant fold\n@@ -273,1 +261,1 @@\n- *     private static final Set<Integer> CACHED_KEYS =\n+ *     private static final Set<Integer> KEYS =\n@@ -278,1 +266,1 @@\n- *     private static final Map<Integer, INTEGER> LOG2_CACHED =\n+ *     private static final Map<Integer, INTEGER> LOG2 =\n@@ -283,5 +271,1 @@\n- *          if (CACHED_KEYS.contains(a)) {\n- *              return LOG2_CACHED.get(a);\n- *          } else {\n- *              return LOG2_ORIGINAL.apply(a);\n- *          }\n+ *          return LOG2.get(a);\n@@ -292,1 +276,0 @@\n- *         double log256 = Log2Util.log2(256); \/\/ Will not constant fold\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StableValue.java","additions":17,"deletions":34,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -228,5 +228,1 @@\n-                if (a < CACHED_SIZE) {\n-                    return SQRT.apply(a);\n-                } else {\n-                    return StrictMath.sqrt(a);\n-                }\n+                return SQRT.apply(a);\n@@ -236,1 +232,0 @@\n-\n@@ -238,1 +233,0 @@\n-        double sqrt81 = SqrtUtil.sqrt(81); \/\/ Will not constant fold\n@@ -241,1 +235,26 @@\n-        assertEquals(9, sqrt81);\n+        assertThrows(IllegalArgumentException.class, () -> SqrtUtil.sqrt(16));\n+    }\n+\n+    @Test\n+    void intFunctionExample2() {\n+        final class HexUtil {\n+\n+            private HexUtil() {}\n+\n+            private static final int SIZE = 0x10;\n+\n+            private static final IntFunction<String> TO_HEX =\n+                    \/\/ @link substring=\"intFunction\" target=\"#intFunction(int,IntFunction)\" :\n+                    StableValue.intFunction(SIZE, Integer::toHexString);\n+\n+            public static String toHex(int a) {\n+                return TO_HEX.apply(a);\n+            }\n+        }\n+\n+        String hex10 = HexUtil.toHex(10);   \/\/ May eventually constant fold to \"A\" at runtime\n+\n+        assertEquals(\"0\", HexUtil.toHex(0x0));\n+        assertEquals(\"a\", hex10);\n+        assertEquals(\"f\", HexUtil.toHex(0xf));\n+        assertThrows(IllegalArgumentException.class, () -> HexUtil.toHex(0x10));\n@@ -277,0 +296,28 @@\n+    @Test\n+    void functionExample2() {\n+\n+        class Log2Util {\n+\n+            private Log2Util() {}\n+\n+            private static final Set<Integer> KEYS =\n+                    Set.of(1, 2, 4, 8);\n+            private static final UnaryOperator<Integer> LOG2_ORIGINAL =\n+                    i -> 31 - Integer.numberOfLeadingZeros(i);\n+\n+            private static final Function<Integer, Integer> LOG2 =\n+                    \/\/ @link substring=\"function\" target=\"#function(Set,Function)\" :\n+                    StableValue.function(KEYS, LOG2_ORIGINAL);\n+\n+            public static double log2(int a) {\n+                return LOG2.apply(a);\n+            }\n+\n+        }\n+\n+        double log16 = Log2Util.log2(8); \/\/ May eventually constant fold to 3.0 at runtime\n+\n+        assertEquals(3, log16);\n+        assertThrows(IllegalArgumentException.class, () -> Log2Util.log2(3));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableValueTest.java","additions":55,"deletions":8,"binary":false,"changes":63,"status":"modified"}]}