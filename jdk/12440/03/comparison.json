{"files":[{"patch":"@@ -665,1 +665,1 @@\n-      if (same_velt_type(mem_ref, best_align_to_mem_ref)) {\n+      if (same_memory_slice(best_align_to_mem_ref, mem_ref)) {\n@@ -667,1 +667,1 @@\n-        \/\/ same type since it could be overlapped accesses to the same array.\n+        \/\/ same memory slice since it could be overlapped accesses to the same array.\n@@ -675,1 +675,1 @@\n-          \/\/ Check if packs of the same memory type but\n+          \/\/ Check if packs of the same memory slice but\n@@ -683,1 +683,1 @@\n-            if (same_velt_type(mr, mem_ref) &&\n+            if (same_memory_slice(mem_ref, mr) &&\n@@ -711,1 +711,1 @@\n-      \/\/ First, remove remaining memory ops of the same type from the list.\n+      \/\/ First, remove remaining memory ops of the same memory slice from the list.\n@@ -714,1 +714,1 @@\n-        if (same_velt_type(s, mem_ref)) {\n+        if (same_memory_slice(s, mem_ref) || same_velt_type(s, mem_ref)) {\n@@ -719,1 +719,1 @@\n-      \/\/ Second, remove already constructed packs of the same type.\n+      \/\/ Second, remove already constructed packs of the same memory slice.\n@@ -723,1 +723,1 @@\n-        if (same_velt_type(s, mem_ref)) {\n+        if (same_memory_slice(s, mem_ref) || same_velt_type(s, mem_ref)) {\n@@ -729,1 +729,1 @@\n-      if (same_velt_type(mem_ref, best_align_to_mem_ref)) {\n+      if (same_memory_slice(mem_ref, best_align_to_mem_ref) || same_velt_type(mem_ref, best_align_to_mem_ref)) {\n@@ -1256,2 +1256,1 @@\n-  if (_phase->C->get_alias_index(s1->as_Mem()->adr_type()) !=\n-      _phase->C->get_alias_index(s2->as_Mem()->adr_type()))\n+  if (!same_memory_slice(s1->as_Mem(), s2->as_Mem())) {\n@@ -1259,0 +1258,1 @@\n+  }\n@@ -3684,0 +3684,4 @@\n+bool SuperWord::same_memory_slice(MemNode* best_align_to_mem_ref, MemNode* mem_ref) const {\n+  return _phase->C->get_alias_index(mem_ref->adr_type()) == _phase->C->get_alias_index(best_align_to_mem_ref->adr_type());\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -452,0 +452,1 @@\n+  bool same_memory_slice(MemNode* best_align_to_mem_ref, MemNode* mem_ref) const;\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,239 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Utils;\n+import jdk.internal.misc.Unsafe;\n+import java.util.Objects;\n+import java.util.Random;\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestVectorizationMismatchedAccess\n+ *\/\n+\n+public class TestVectorizationMismatchedAccess {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules\", \"java.base\", \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+    }\n+\n+    static int size = 1024;\n+    static byte[] byteArray = new byte[size * 8];\n+    static long[] longArray = new long[size];\n+    static long baseOffset = 0;\n+    static long baseOffHeap = UNSAFE.allocateMemory(size * 8);\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testByteLong1(byte[] dest, long[] src) {\n+        for (int i = 0; i < src.length; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i, src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteLong1\")\n+    public static void testByteLong1_runner() {\n+        testByteLong1(byteArray, longArray);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testByteLong2(byte[] dest, long[] src) {\n+        for (int i = 1; i < src.length; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i - 1), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteLong2\")\n+    public static void testByteLong2_runner() {\n+        testByteLong2(byteArray, longArray);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testByteLong3(byte[] dest, long[] src) {\n+        for (int i = 0; i < src.length - 1; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + 1), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteLong3\")\n+    public static void testByteLong3_runner() {\n+        testByteLong3(byteArray, longArray);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testByteLong4(byte[] dest, long[] src, int start, int stop) {\n+        for (int i = start; i < stop; i++) {\n+            UNSAFE.putLongUnaligned(dest, 8 * i + baseOffset, src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteLong4\")\n+    public static void testByteLong4_runner() {\n+        baseOffset = UNSAFE.ARRAY_BYTE_BASE_OFFSET;\n+        testByteLong4(byteArray, longArray, 1, size);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testByteLong5(byte[] dest, long[] src, int start, int stop) {\n+        for (int i = start; i < stop; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + baseOffset), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteLong5\")\n+    public static void testByteLong5_runner() {\n+        baseOffset = 1;\n+        testByteLong5(byteArray, longArray, 0, size-1);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testByteByte1(byte[] dest, byte[] src) {\n+        for (int i = 0; i < src.length \/ 8; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i, UNSAFE.getLongUnaligned(src, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i));\n+        }\n+    }\n+\n+    @Run(test = \"testByteByte1\")\n+    public static void testByteByte1_runner() {\n+        testByteByte1(byteArray, byteArray);\n+    }\n+\n+    \/\/ It would be legal to vectorize this one but it's not currently\n+    @Test\n+    \/\/@IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testByteByte2(byte[] dest, byte[] src) {\n+        for (int i = 1; i < src.length \/ 8; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i - 1), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteByte2\")\n+    public static void testByteByte2_runner() {\n+        testByteByte2(byteArray, byteArray);\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR })\n+    public static void testByteByte3(byte[] dest, byte[] src) {\n+        for (int i = 0; i < src.length \/ 8 - 1; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + 1), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteByte3\")\n+    public static void testByteByte3_runner() {\n+        testByteByte3(byteArray, byteArray);\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR })\n+    public static void testByteByte4(byte[] dest, byte[] src, int start, int stop) {\n+        for (int i = start; i < stop; i++) {\n+            UNSAFE.putLongUnaligned(dest, 8 * i + baseOffset, src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteByte4\")\n+    public static void testByteByte4_runner() {\n+        baseOffset = UNSAFE.ARRAY_BYTE_BASE_OFFSET;\n+        testByteByte4(byteArray, byteArray, 1, size);\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR })\n+    public static void testByteByte5(byte[] dest, byte[] src, int start, int stop) {\n+        for (int i = start; i < stop; i++) {\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + baseOffset), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testByteByte5\")\n+    public static void testByteByte5_runner() {\n+        baseOffset = 1;\n+        testByteByte5(byteArray, byteArray, 0, size-1);\n+    }\n+    \n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testOffHeapLong1(long dest, long[] src) {\n+        for (int i = 0; i < src.length; i++) {\n+            UNSAFE.putLongUnaligned(null, dest + 8 * i, src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testOffHeapLong1\")\n+    public static void testOffHeapLong1_runner() {\n+        testOffHeapLong1(baseOffHeap, longArray);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testOffHeapLong2(long dest, long[] src) {\n+        for (int i = 1; i < src.length; i++) {\n+            UNSAFE.putLongUnaligned(null, dest + 8 * (i - 1), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testOffHeapLong2\")\n+    public static void testOffHeapLong2_runner() {\n+        testOffHeapLong2(baseOffHeap, longArray);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testOffHeapLong3(long dest, long[] src) {\n+        for (int i = 0; i < src.length - 1; i++) {\n+            UNSAFE.putLongUnaligned(null, dest + 8 * (i + 1), src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testOffHeapLong3\")\n+    public static void testOffHeapLong3_runner() {\n+        testOffHeapLong3(baseOffHeap, longArray);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    public static void testOffHeapLong4(long dest, long[] src, int start, int stop) {\n+        for (int i = start; i < stop; i++) {\n+            UNSAFE.putLongUnaligned(null, dest + 8 * i + baseOffset, src[i]);\n+        }\n+    }\n+\n+    @Run(test = \"testOffHeapLong4\")\n+    public static void testOffHeapLong4_runner() {\n+        baseOffset = 8;\n+        testOffHeapLong4(baseOffHeap, longArray, 1, size);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationMismatchedAccess.java","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8300258\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch TestOverlappingMismatchedAccesses\n+ *\/\n+\n+import jdk.internal.misc.Unsafe;\n+\n+public class TestOverlappingMismatchedAccesses {\n+    static int N = 50;\n+    static int gold[] = new int[N];\n+\n+    static Unsafe unsafe = Unsafe.getUnsafe();\n+\n+    public static void main(String[] strArr) {\n+        init(gold);\n+        test(gold);\n+        for (int i = 0; i < 10_000; i++){\n+            int[] data = new int[N];\n+            init(data);\n+            test(data);\n+            verify(data, gold);\n+        }\n+    }\n+\n+    static void test(int[] data) {\n+        for (int i = 2; i < N-2; i++) {\n+            int v = data[i];\n+            unsafe.putFloat(data, unsafe.ARRAY_BYTE_BASE_OFFSET + 4 * i + 8, v + 5);\n+        }\n+    }\n+\n+    static void init(int[] data) {\n+        for (int j = 0; j < N; j++) {\n+            data[j] = j;\n+        }\n+    }\n+\n+    static void verify(int[] data, int[] gold) {\n+        for (int i = 0; i < N; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid result: dataI[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestOverlappingMismatchedAccesses.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}