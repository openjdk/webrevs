{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -29,1 +30,0 @@\n-import java.util.Objects;\n@@ -31,0 +31,2 @@\n+import java.util.Arrays;\n+import java.nio.ByteOrder;\n@@ -34,0 +36,4 @@\n+ * @bug 8300258\n+ * @key randomness\n+ * @requires (os.simpleArch == \"x64\") | (os.simpleArch == \"aarch64\")\n+ * @summary C2: vectorization fails on simple ByteBuffer loop\n@@ -36,1 +42,3 @@\n- * @run driver compiler.c2.irTests.TestVectorizationMismatchedAccess\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.c2.irTests.TestVectorizationMismatchedAccess\n@@ -41,0 +49,2 @@\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+    private final static WhiteBox wb = WhiteBox.getWhiteBox();\n@@ -43,1 +53,7 @@\n-        TestFramework.runWithFlags(\"--add-modules\", \"java.base\", \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+        Object alignVector = wb.getVMFlag(\"AlignVector\");\n+        if (alignVector != null && !((Boolean)alignVector)) {\n+            if (ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN) {\n+                throw new RuntimeException(\"fix test that was written for a little endian platform\");\n+            }\n+            TestFramework.runWithFlags(\"--add-modules\", \"java.base\", \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+        }\n@@ -49,0 +65,2 @@\n+    static byte[] verifyByteArray = new byte[size * 8];\n+    static long[] verifyLongArray = new long[size];\n@@ -52,0 +70,82 @@\n+\n+    static {\n+        for (int i = 0; i < verifyByteArray.length; i++) {\n+            verifyByteArray[i] = (byte)RANDOM.nextInt(Byte.MAX_VALUE);\n+        }\n+        for (int i = 0; i < verifyLongArray.length; i++) {\n+            verifyLongArray[i] = 0;\n+            for (int j = 0; j < 8; j++) {\n+                verifyLongArray[i] = verifyLongArray[i] | (((long)verifyByteArray[8 * i + j]) << 8 * j);\n+            }\n+        }\n+    }\n+\n+    static private void runAndVerify(Runnable test, int offset) {\n+        System.arraycopy(verifyLongArray, 0, longArray, 0, longArray.length);\n+        Arrays.fill(byteArray, (byte)0);\n+        test.run();\n+        int i;\n+        for (i = 0; i < Math.max(offset, 0); i++) {\n+            if (byteArray[i] != 0) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != 0\");\n+            }\n+        }\n+        for (; i < Math.min(byteArray.length + offset, byteArray.length); i++) {\n+            if (byteArray[i] != verifyByteArray[i - offset]) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != \" + verifyByteArray[i-offset]);\n+            }\n+        }\n+        for (; i < byteArray.length; i++) {\n+            if (byteArray[i] != 0) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != 0\");\n+            }\n+        }\n+    }\n+\n+    static private void runAndVerify2(Runnable test, int offset) {\n+        System.arraycopy(verifyByteArray, 0, byteArray, 0, byteArray.length);\n+        test.run();\n+        int i;\n+        for (i = 0; i < Math.max(offset, 0); i++) {\n+            if (byteArray[i] != verifyByteArray[i]) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != \" + verifyByteArray[i]);\n+            }\n+        }\n+        for (; i < Math.min(byteArray.length + offset, byteArray.length); i++) {\n+            int val = offset > 0 ? verifyByteArray[(i-offset) % 8] : verifyByteArray[i-offset];\n+            if (byteArray[i] != val) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != \" + verifyByteArray[i-offset]);\n+            }\n+        }\n+        for (; i < byteArray.length; i++) {\n+            if (byteArray[i] != verifyByteArray[i]) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != \" + verifyByteArray[i]);\n+            }\n+        }\n+    }\n+\n+\n+    static private void runAndVerify3(Runnable test, int offset) {\n+        System.arraycopy(verifyLongArray, 0, longArray, 0, longArray.length);\n+        for (int i = 0; i < size * 8; i++) {\n+            UNSAFE.putByte(null, baseOffHeap + i, (byte)0);\n+        }\n+        test.run();\n+        int i;\n+        for (i = 0; i < Math.max(offset, 0); i++) {\n+            if (UNSAFE.getByte(null, baseOffHeap + i) != 0) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != 0\");\n+            }\n+        }\n+        for (; i < Math.min(size * 8 + offset, size * 8); i++) {\n+            if (UNSAFE.getByte(null, baseOffHeap + i) != verifyByteArray[i - offset]) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != \" + verifyByteArray[i-offset]);\n+            }\n+        }\n+        for (; i < byteArray.length; i++) {\n+            if (UNSAFE.getByte(null, baseOffHeap + i) != 0) {\n+                throw new RuntimeException(\"Incorrect result at \" + i + \" \" + byteArray[i] + \" != 0\");\n+            }\n+        }\n+    }\n+\n@@ -62,1 +162,1 @@\n-        testByteLong1(byteArray, longArray);\n+        runAndVerify(() -> testByteLong1(byteArray, longArray), 0);\n@@ -75,1 +175,1 @@\n-        testByteLong2(byteArray, longArray);\n+        runAndVerify(() -> testByteLong2(byteArray, longArray), -8);\n@@ -88,1 +188,1 @@\n-        testByteLong3(byteArray, longArray);\n+        runAndVerify(() -> testByteLong3(byteArray, longArray), 8);\n@@ -102,1 +202,1 @@\n-        testByteLong4(byteArray, longArray, 1, size);\n+        runAndVerify(() -> testByteLong4(byteArray, longArray, 0, size), 0);\n@@ -116,1 +216,1 @@\n-        testByteLong5(byteArray, longArray, 0, size-1);\n+        runAndVerify(() -> testByteLong5(byteArray, longArray, 0, size-1), 8);\n@@ -129,1 +229,1 @@\n-        testByteByte1(byteArray, byteArray);\n+        runAndVerify2(() -> testByteByte1(byteArray, byteArray), 0);\n@@ -137,1 +237,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i - 1), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i - 1), UNSAFE.getLongUnaligned(src, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i));\n@@ -143,1 +243,1 @@\n-        testByteByte2(byteArray, byteArray);\n+        runAndVerify2(() -> testByteByte2(byteArray, byteArray), -8);\n@@ -150,1 +250,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + 1), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + 1), UNSAFE.getLongUnaligned(src, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i));\n@@ -156,1 +256,1 @@\n-        testByteByte3(byteArray, byteArray);\n+        runAndVerify2(() -> testByteByte3(byteArray, byteArray), 8);\n@@ -163,1 +263,1 @@\n-            UNSAFE.putLongUnaligned(dest, 8 * i + baseOffset, src[i]);\n+            UNSAFE.putLongUnaligned(dest, 8 * i + baseOffset, UNSAFE.getLongUnaligned(src, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i));\n@@ -170,1 +270,1 @@\n-        testByteByte4(byteArray, byteArray, 1, size);\n+        runAndVerify2(() -> testByteByte4(byteArray, byteArray, 0, size), 0);\n@@ -177,1 +277,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + baseOffset), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + baseOffset), UNSAFE.getLongUnaligned(src, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i));\n@@ -184,1 +284,1 @@\n-        testByteByte5(byteArray, byteArray, 0, size-1);\n+        runAndVerify2(() -> testByteByte5(byteArray, byteArray, 0, size-1), 8);\n@@ -186,1 +286,1 @@\n-    \n+\n@@ -197,1 +297,1 @@\n-        testOffHeapLong1(baseOffHeap, longArray);\n+        runAndVerify3(() -> testOffHeapLong1(baseOffHeap, longArray), 0);\n@@ -210,1 +310,1 @@\n-        testOffHeapLong2(baseOffHeap, longArray);\n+        runAndVerify3(() -> testOffHeapLong2(baseOffHeap, longArray), -8);\n@@ -223,1 +323,1 @@\n-        testOffHeapLong3(baseOffHeap, longArray);\n+        runAndVerify3(() -> testOffHeapLong3(baseOffHeap, longArray), 8);\n@@ -237,1 +337,1 @@\n-        testOffHeapLong4(baseOffHeap, longArray, 1, size);\n+        runAndVerify3(() -> testOffHeapLong4(baseOffHeap, longArray, 0, size-1), 8);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationMismatchedAccess.java","additions":122,"deletions":22,"binary":false,"changes":144,"status":"modified"}]}