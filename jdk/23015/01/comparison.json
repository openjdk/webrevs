{"files":[{"patch":"@@ -3073,8 +3073,18 @@\n-#define INSN(NAME, funct)                                                                    \\\n-  void NAME(Register Rs1) {                                                                  \\\n-    unsigned insn = 0;                                                                       \\\n-    patch((address)&insn, 6,  0, 0b0001111);                                                 \\\n-    patch((address)&insn, 14, 12, 0b010);                                                    \\\n-    patch_reg((address)&insn, 15, Rs1);                                                      \\\n-    patch((address)&insn, 31, 20, funct);                                                    \\\n-    emit(insn);                                                                              \\\n+\/\/ These instruction may be turned off for user space.\n+ private:\n+  enum CBO_FUNCT : unsigned int {\n+    CBO_INVAL = 0b0000000000000,\n+    CBO_CLEAN = 0b0000000000001,\n+    CBO_FLUSH = 0b0000000000010,\n+    CBO_ZERO  = 0b0000000000100\n+  };\n+\n+  template <CBO_FUNCT FUNCT>\n+  void cbo_base(Register Rs1) {\n+    assert((UseZicbom && FUNCT != CBO_ZERO) || UseZicboz, \"sanity\");\n+    unsigned insn = 0;\n+    patch((address)&insn, 6,  0, 0b0001111);\n+    patch((address)&insn, 14, 12, 0b010);\n+    patch_reg((address)&insn, 15, Rs1);\n+    patch((address)&insn, 31, 20, FUNCT);\n+    emit(insn);\n@@ -3083,4 +3093,9 @@\n-  INSN(cbo_inval, 0b0000000000000);\n-  INSN(cbo_clean, 0b0000000000001);\n-  INSN(cbo_flush, 0b0000000000010);\n-  INSN(cbo_zero,  0b0000000000100);\n+  \/\/ This instruction have some security implication.\n+  \/\/ At this time it's not likely to be enabled for user mode.\n+  void cbo_inval(Register Rs1) { cbo_base<CBO_INVAL>(Rs1); }\n+ public:\n+  \/\/ Zicbom\n+  void cbo_clean(Register Rs1) { cbo_base<CBO_CLEAN>(Rs1); }\n+  void cbo_flush(Register Rs1) { cbo_base<CBO_FLUSH>(Rs1); }\n+  \/\/ Zicboz\n+  void cbo_zero(Register Rs1)  { cbo_base<CBO_ZERO>(Rs1); }\n@@ -3088,1 +3103,6 @@\n-#undef INSN\n+ private:\n+  enum PREFETCH_FUNCT : unsigned int {\n+    PREFETCH_I = 0b0000000000000,\n+    PREFETCH_R = 0b0000000000001,\n+    PREFETCH_W = 0b0000000000011\n+  };\n@@ -3090,12 +3110,13 @@\n-#define INSN(NAME, funct)                                                                    \\\n-  void NAME(Register Rs1, int32_t offset) {                                                  \\\n-    guarantee((offset & 0x1f) == 0, \"offset lowest 5 bits must be zero\");                    \\\n-    int32_t upperOffset = offset >> 5;                                                       \\\n-    unsigned insn = 0;                                                                       \\\n-    patch((address)&insn, 6,  0, 0b0010011);                                                 \\\n-    patch((address)&insn, 14, 12, 0b110);                                                    \\\n-    patch_reg((address)&insn, 15, Rs1);                                                      \\\n-    patch((address)&insn, 24, 20, funct);                                                    \\\n-    upperOffset &= 0x7f;                                                                     \\\n-    patch((address)&insn, 31, 25, upperOffset);                                              \\\n-    emit(insn);                                                                              \\\n+  template <PREFETCH_FUNCT FUNCT>\n+  void prefetch_base(Register Rs1, int32_t offset) {\n+    assert_cond(UseZicbop);\n+    guarantee((offset & 0x1f) == 0, \"offset lowest 5 bits must be zero\");\n+    int32_t upperOffset = offset >> 5;\n+    unsigned insn = 0;\n+    patch((address)&insn, 6,  0, 0b0010011);\n+    patch((address)&insn, 14, 12, 0b110);\n+    patch_reg((address)&insn, 15, Rs1);\n+    patch((address)&insn, 24, 20, FUNCT);\n+    upperOffset &= 0x7f;\n+    patch((address)&insn, 31, 25, upperOffset);\n+    emit(insn);\n@@ -3104,5 +3125,5 @@\n-  INSN(prefetch_i, 0b0000000000000);\n-  INSN(prefetch_r, 0b0000000000001);\n-  INSN(prefetch_w, 0b0000000000011);\n-\n-#undef INSN\n+ public:\n+  \/\/ Zicbop\n+  void prefetch_i(Register Rs1, int32_t offset) { prefetch_base<PREFETCH_I>(Rs1, offset); }\n+  void prefetch_r(Register Rs1, int32_t offset) { prefetch_base<PREFETCH_R>(Rs1, offset); }\n+  void prefetch_w(Register Rs1, int32_t offset) { prefetch_base<PREFETCH_W>(Rs1, offset); }\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":51,"deletions":30,"binary":false,"changes":81,"status":"modified"}]}