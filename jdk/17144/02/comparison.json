{"files":[{"patch":"@@ -546,1 +546,1 @@\n-    using Word = size_t;\n+    using CardWord = CardTable::CardWord;\n@@ -558,4 +558,0 @@\n-    static bool is_word_aligned(const void* const addr) {\n-      return ((uintptr_t)addr) % sizeof(Word) == 0;\n-    }\n-\n@@ -563,1 +559,1 @@\n-      while (!is_word_aligned(i_card)) {\n+      while (!CardTable::is_word_aligned(i_card)) {\n@@ -570,2 +566,2 @@\n-      for (\/* empty *\/; i_card < _end_card; i_card += sizeof(Word)) {\n-        Word word_value = *reinterpret_cast<Word*>(i_card);\n+      for (\/* empty *\/; i_card < _end_card; i_card += sizeof(CardWord)) {\n+        CardWord word_value = *reinterpret_cast<CardWord*>(i_card);\n@@ -575,1 +571,1 @@\n-          for (uint i = 0; i < sizeof(Word); ++i) {\n+          for (uint i = 0; i < sizeof(CardWord); ++i) {\n@@ -589,1 +585,1 @@\n-      while (!is_word_aligned(i_card)) {\n+      while (!CardTable::is_word_aligned(i_card)) {\n@@ -596,2 +592,2 @@\n-      for (\/* empty *\/; i_card < _end_card; i_card += sizeof(Word)) {\n-        Word word_value = *reinterpret_cast<Word*>(i_card);\n+      for (\/* empty *\/; i_card < _end_card; i_card += sizeof(CardWord)) {\n+        CardWord word_value = *reinterpret_cast<CardWord*>(i_card);\n@@ -601,1 +597,1 @@\n-          for (uint i = 0; i < sizeof(Word); ++i) {\n+          for (uint i = 0; i < sizeof(CardWord); ++i) {\n@@ -618,3 +614,3 @@\n-        assert(is_word_aligned(start_card), \"precondition\");\n-        assert(is_word_aligned(end_card), \"precondition\");\n-      }\n+      assert(CardTable::is_word_aligned(start_card), \"precondition\");\n+      assert(CardTable::is_word_aligned(end_card), \"precondition\");\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -351,2 +351,0 @@\n-  using Word = uintptr_t;\n-\n@@ -355,1 +353,1 @@\n-  while (!is_aligned(current_card, sizeof(Word))) {\n+  while (!is_word_aligned(current_card)) {\n@@ -366,3 +364,3 @@\n-  while (current_card + sizeof(Word) <= end_card) {\n-    Word* current_word = reinterpret_cast<Word*>(current_card);\n-    if (*current_word != (Word)clean_card_row_val()) {\n+  while (current_card + sizeof(CardWord) <= end_card) {\n+    CardWord* current_word = reinterpret_cast<CardWord*>(current_card);\n+    if (*current_word != clean_card_word_val()) {\n@@ -372,1 +370,1 @@\n-    current_card += sizeof(Word);\n+    current_card += sizeof(CardWord);\n","filename":"src\/hotspot\/share\/gc\/serial\/cardTableRS.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+  using CardWord = uintptr_t;\n@@ -74,2 +75,2 @@\n-  \/\/ a word's worth (row) of clean card values\n-  static const intptr_t clean_card_row = (intptr_t)(-1);\n+  static const CardWord clean_card_word = (CardWord)(-1);\n+  static_assert(clean_card_word == (CardWord)-1, \"inv\");\n@@ -94,0 +95,4 @@\n+  static bool is_word_aligned(void* p) {\n+    return is_aligned(p, sizeof(CardWord));\n+  }\n+\n@@ -198,1 +203,1 @@\n-  static constexpr intptr_t clean_card_row_val()   { return clean_card_row; }\n+  static constexpr CardWord clean_card_word_val()      { return clean_card_word; }\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}