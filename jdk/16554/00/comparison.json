{"files":[{"patch":"@@ -84,1 +84,0 @@\n-#include \"gc\/shared\/generationSpec.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#include \"gc\/shared\/generationSpec.hpp\"\n@@ -563,1 +562,1 @@\n-  size_t min_new_size = initial_size();\n+  size_t min_new_size = NewSize;\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shared\/generationSpec.hpp\"\n@@ -60,8 +59,0 @@\n-size_t Generation::initial_size() {\n-  SerialHeap* serial_heap = SerialHeap::heap();\n-  if (serial_heap->is_young_gen(this)) {\n-    return serial_heap->young_gen_spec()->init_size();\n-  }\n-  return serial_heap->old_gen_spec()->init_size();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-class GenerationSpec;\n@@ -116,2 +115,0 @@\n-  \/\/ Space inquiries (results in bytes)\n-  size_t initial_size();\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"gc\/shared\/generationSpec.hpp\"\n@@ -168,1 +167,1 @@\n-  minimum_desired_capacity = MAX2(minimum_desired_capacity, initial_size());\n+  minimum_desired_capacity = MAX2(minimum_desired_capacity, OldSize);\n@@ -207,1 +206,1 @@\n-    maximum_desired_capacity = MAX2(maximum_desired_capacity, initial_size());\n+    maximum_desired_capacity = MAX2(maximum_desired_capacity, OldSize);\n@@ -237,1 +236,1 @@\n-                               initial_size() \/ (double) K, maximum_desired_capacity \/ (double) K);\n+                               OldSize \/ (double) K, maximum_desired_capacity \/ (double) K);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/serial\/tenuredGeneration.hpp\"\n@@ -50,1 +51,0 @@\n-#include \"gc\/shared\/generationSpec.hpp\"\n@@ -88,8 +88,0 @@\n-  _young_gen_spec(new GenerationSpec(young,\n-                                     NewSize,\n-                                     MaxNewSize,\n-                                     GenAlignment)),\n-  _old_gen_spec(new GenerationSpec(old,\n-                                   OldSize,\n-                                   MaxOldSize,\n-                                   GenAlignment)),\n@@ -118,2 +110,2 @@\n-  ReservedSpace young_rs = heap_rs.first_part(_young_gen_spec->max_size());\n-  ReservedSpace old_rs = heap_rs.last_part(_young_gen_spec->max_size());\n+  ReservedSpace young_rs = heap_rs.first_part(MaxNewSize);\n+  ReservedSpace old_rs = heap_rs.last_part(MaxNewSize);\n@@ -128,2 +120,2 @@\n-  _young_gen = _young_gen_spec->init(young_rs, rem_set());\n-  _old_gen = _old_gen_spec->init(old_rs, rem_set());\n+  _young_gen = new DefNewGeneration(young_rs, NewSize, MinNewSize, MaxNewSize);\n+  _old_gen = new TenuredGeneration(old_rs, OldSize, MinOldSize, MaxOldSize, rem_set());\n@@ -146,2 +138,2 @@\n-  size_t total_reserved = _young_gen_spec->max_size() + _old_gen_spec->max_size();\n-  if (total_reserved < _young_gen_spec->max_size()) {\n+  size_t total_reserved = MaxNewSize + MaxOldSize;\n+  if (total_reserved < MaxNewSize) {\n@@ -202,8 +194,0 @@\n-GenerationSpec* GenCollectedHeap::young_gen_spec() const {\n-  return _young_gen_spec;\n-}\n-\n-GenerationSpec* GenCollectedHeap::old_gen_spec() const {\n-  return _old_gen_spec;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-class GenerationSpec;\n@@ -65,3 +64,0 @@\n-  GenerationSpec* _young_gen_spec;\n-  GenerationSpec* _old_gen_spec;\n-\n@@ -147,3 +143,0 @@\n-  GenerationSpec* young_gen_spec() const;\n-  GenerationSpec* old_gen_spec() const;\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/serial\/cardTableRS.hpp\"\n-#include \"gc\/shared\/generationSpec.hpp\"\n-#include \"runtime\/java.hpp\"\n-#include \"utilities\/macros.hpp\"\n-#if INCLUDE_SERIALGC\n-#include \"gc\/serial\/defNewGeneration.hpp\"\n-#include \"gc\/serial\/tenuredGeneration.hpp\"\n-#endif\n-\n-Generation* GenerationSpec::init(ReservedSpace rs, CardTableRS* remset) {\n-  switch (name()) {\n-#if INCLUDE_SERIALGC\n-    case Generation::DefNew:\n-      return new DefNewGeneration(rs, _init_size, _min_size, _max_size);\n-\n-    case Generation::MarkSweepCompact:\n-      return new TenuredGeneration(rs, _init_size, _min_size, _max_size, remset);\n-#endif\n-\n-    default:\n-      guarantee(false, \"unrecognized GenerationName\");\n-      return nullptr;\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/generationSpec.cpp","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_GENERATIONSPEC_HPP\n-#define SHARE_GC_SHARED_GENERATIONSPEC_HPP\n-\n-#include \"gc\/serial\/generation.hpp\"\n-#include \"utilities\/align.hpp\"\n-\n-\/\/ The specification of a generation.  This class also encapsulates\n-\/\/ some generation-specific behavior.  This is done here rather than as a\n-\/\/ virtual function of Generation because these methods are needed in\n-\/\/ initialization of the Generations.\n-class GenerationSpec : public CHeapObj<mtGC> {\n-  friend class VMStructs;\n-private:\n-  Generation::Name _name;\n-  size_t           _init_size;\n-  size_t           _min_size;\n-  size_t           _max_size;\n-\n-public:\n-  GenerationSpec(Generation::Name name, size_t init_size, size_t max_size, size_t alignment) :\n-    _name(name),\n-    _init_size(align_up(init_size, alignment)),\n-    _min_size(_init_size),\n-    _max_size(align_up(max_size, alignment))\n-  { }\n-\n-  Generation* init(ReservedSpace rs, CardTableRS* remset);\n-\n-  Generation::Name name() const { return _name; }\n-  size_t init_size()      const { return _init_size; }\n-  size_t min_size()       const { return _min_size; }\n-  size_t max_size()       const { return _max_size; }\n-};\n-\n-typedef GenerationSpec* GenerationSpecPtr;\n-\n-#endif \/\/ SHARE_GC_SHARED_GENERATIONSPEC_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/generationSpec.hpp","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shared\/generationSpec.hpp\"\n@@ -117,4 +116,0 @@\n-  nonstatic_field(GenerationSpec,              _name,                                         Generation::Name)                      \\\n-  nonstatic_field(GenerationSpec,              _init_size,                                    size_t)                                \\\n-  nonstatic_field(GenerationSpec,              _max_size,                                     size_t)                                \\\n-                                                                                                                                     \\\n@@ -123,2 +118,0 @@\n-  nonstatic_field(GenCollectedHeap,            _young_gen_spec,                               GenerationSpec*)                       \\\n-  nonstatic_field(GenCollectedHeap,            _old_gen_spec,                                 GenerationSpec*)                       \\\n@@ -175,1 +168,0 @@\n-  declare_toplevel_type(GenerationSpec)                                   \\\n@@ -193,1 +185,0 @@\n-  declare_toplevel_type(GenerationSpec**)                                 \\\n","filename":"src\/hotspot\/share\/gc\/shared\/vmStructs_gc.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,3 +42,0 @@\n-  private static AddressField youngGenSpecField;\n-  private static AddressField oldGenSpecField;\n-\n@@ -60,2 +57,0 @@\n-    youngGenSpecField = type.getAddressField(\"_young_gen_spec\");\n-    oldGenSpecField = type.getAddressField(\"_old_gen_spec\");\n@@ -118,20 +113,0 @@\n-  \/** Package-private access to GenerationSpecs *\/\n-  GenerationSpec spec(int level) {\n-    if (Assert.ASSERTS_ENABLED) {\n-      Assert.that((level == 0) || (level == 1), \"Index \" + level +\n-                  \" out of range (should be 0 or 1)\");\n-    }\n-\n-    if ((level != 0) && (level != 1)) {\n-      return null;\n-    }\n-\n-    if (level == 0) {\n-      return VMObjectFactory.newObject(GenerationSpec.class,\n-              youngGenSpecField.getAddress());\n-    } else {\n-      return VMObjectFactory.newObject(GenerationSpec.class,\n-              oldGenSpecField.getAddress());\n-    }\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/GenCollectedHeap.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.gc.shared;\n-\n-import java.util.*;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class GenerationSpec extends VMObject {\n-  private static CIntegerField nameField;\n-  private static CIntegerField initSizeField;\n-  private static CIntegerField maxSizeField;\n-\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"GenerationSpec\");\n-\n-    nameField       = type.getCIntegerField(\"_name\");\n-    initSizeField = type.getCIntegerField(\"_init_size\");\n-    maxSizeField  = type.getCIntegerField(\"_max_size\");\n-  }\n-\n-  public GenerationSpec(Address addr) {\n-    super(addr);\n-  }\n-\n-  public Generation.Name name() {\n-    return Generation.nameForEnum((int)nameField.getValue(addr));\n-  }\n-\n-  public long initSize() {\n-    return initSizeField.getValue(addr);\n-  }\n-\n-  public long maxSize() {\n-    return maxSizeField.getValue(addr);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/GenerationSpec.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"}]}