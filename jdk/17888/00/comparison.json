{"files":[{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -687,0 +687,5 @@\n+  <Event name=\"SafepointTimeout\" category=\"Java Virtual Machine, Runtime, Safepoint\" label=\"Safepoint Timeout\" description=\"Synchronize timeout\" startTime=\"false\" thread=\"true\" stackTrace=\"true\">\n+    <Field type=\"ulong\" name=\"safepointId\" label=\"Safepoint Identifier\" relation=\"SafepointId\" \/>\n+    <Field type=\"ulong\" contentType=\"nanos\" name=\"timeExceeded\" label=\"Time Exceeded\" description=\"The amount of time exceeding SafepointTimeoutDelay\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,0 +107,10 @@\n+static void post_safepoint_timeout_event(EventSafepointTimeout& event,\n+                                         uint64_t safepoint_id,\n+                                         jlong time_exceeded) {\n+  if (event.should_commit()) {\n+    event.set_safepointId(safepoint_id);\n+    event.set_timeExceeded(static_cast<julong>(time_exceeded));\n+    event.commit();\n+  }\n+}\n+\n@@ -257,0 +267,2 @@\n+  bool timeout_event_enabled = EventSafepointTimeout::is_enabled();\n+\n@@ -258,0 +270,2 @@\n+    jlong time_exceeded = -1;\n+\n@@ -259,2 +273,9 @@\n-    if (SafepointTimeout && safepoint_limit_time < os::javaTimeNanos()) {\n-      print_safepoint_timeout();\n+    if (SafepointTimeout) {\n+      jlong delta = os::javaTimeNanos() - safepoint_limit_time;\n+      if (delta > 0) {\n+        print_safepoint_timeout();\n+\n+        if (timeout_event_enabled) {\n+          time_exceeded = delta;\n+        }\n+      }\n@@ -273,0 +294,1 @@\n+        tmp->set_time_exceeded(time_exceeded);\n@@ -744,0 +766,9 @@\n+  jlong time_exceeded = thread->safepoint_state()->get_time_exceeded();\n+  if (time_exceeded != -1) {\n+    assert(time_exceeded > 0, \"sanity check\");\n+    thread->safepoint_state()->reset_time_exceeded();\n+\n+    EventSafepointTimeout event;\n+    post_safepoint_timeout_event(event, safepoint_id, time_exceeded);\n+  }\n+\n@@ -819,1 +850,1 @@\n-    _safepoint_id(SafepointSynchronize::InactiveSafepointCounter), _next(nullptr) {\n+    _safepoint_id(SafepointSynchronize::InactiveSafepointCounter), _next(nullptr), _time_exceeded(-1) {\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,0 +205,2 @@\n+  volatile jlong                  _time_exceeded;\n+\n@@ -227,0 +229,4 @@\n+  jlong get_time_exceeded() const             { return _time_exceeded; }\n+  void reset_time_exceeded()                  { _time_exceeded = -1; }\n+  void set_time_exceeded(jlong time_exceeded) { _time_exceeded = time_exceeded; assert(time_exceeded != 1, \"sanity\"); }\n+\n","filename":"src\/hotspot\/share\/runtime\/safepoint.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -934,0 +934,4 @@\n+    <event name=\"jdk.SafepointTimeout\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+    <\/event>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -934,0 +934,4 @@\n+    <event name=\"jdk.SafepointTimeout\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+    <\/event>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.event.runtime;\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/**\n+ * @test TestSafepointTimeoutEvent\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:+SafepointTimeout -XX:SafepointTimeoutDelay=200\n+ *                   jdk.jfr.event.runtime.TestSafepointTimeoutEvent\n+ *\/\n+public class TestSafepointTimeoutEvent {\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    public static void main(String[] args) throws Exception {\n+        Recording recording = new Recording();\n+        recording.enable(EventNames.SafepointTimeout);\n+        recording.start();\n+\n+        Thread thread = new Thread(() -> {\n+            while (true) {\n+                WB.waitUnsafe(999);\n+            }\n+        }, \"SafepointTimeout Trigger\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        Thread.sleep(1000);\n+\n+        for (int i = 0; i < 8; i++) {\n+            WB.forceSafepoint();\n+        }\n+\n+        recording.stop();\n+\n+        List<RecordedEvent> events = Events.fromRecording(recording);\n+        assertTrue(events.size() > 0);\n+        for (RecordedEvent event : events) {\n+            System.out.println(\"Event: \" + event);\n+\n+            assertTrue(Events.isEventType(event, EventNames.SafepointTimeout));\n+            Events.assertEventThread(event, thread);\n+            Events.assertField(event, \"timeExceeded\").above(0L);\n+            Events.assertTopFrame(event, WhiteBox.class.getName(), \"waitUnsafe\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSafepointTimeoutEvent.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,1 @@\n+    public static final String SafepointTimeout = PREFIX + \"SafepointTimeout\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}