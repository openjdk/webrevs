{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,2 +162,6 @@\n-    public synchronized void writeTo(OutputStream out) throws IOException {\n-        out.write(buf, 0, count);\n+    public void writeTo(OutputStream out) throws IOException {\n+        if (Thread.currentThread().isVirtual()) {\n+            out.write(toByteArray());\n+        } else synchronized (this) {\n+            out.write(buf, 0, count);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayOutputStream.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 1234566\n+ * @summary Test ByteArrayOutputStream.writeTo releases carrier thread\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @run main WriteToReleasesCarrier\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.lang.reflect.Constructor;\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.LockSupport;\n+\n+public class WriteToReleasesCarrier {\n+    public static void main(String[] args) throws Exception {\n+        byte[] bytes = \"Hello\".getBytes(StandardCharsets.UTF_8);\n+\n+        var baos = new ByteArrayOutputStream();\n+        baos.write(bytes);\n+\n+        var target = new ParkingOutputStream();\n+\n+        try (ExecutorService scheduler = Executors.newFixedThreadPool(1)) {\n+            Thread.Builder builder = virtualThreadBuilder(scheduler);\n+            var started = new CountDownLatch(1);\n+            var vthread1 = builder.start(() -> {\n+                started.countDown();\n+                try {\n+                    baos.writeTo(target);\n+                } catch (IOException ioe) { }\n+            });\n+            try {\n+                started.await();\n+                await(vthread1, Thread.State.WAITING);\n+\n+                \/\/ carrier should be released, use it for another thread\n+                var executed = new AtomicBoolean();\n+                var vthread2 = builder.start(() -> {\n+                    executed.set(true);\n+                });\n+                vthread2.join();\n+                if (!executed.get()) {\n+                    throw new RuntimeException(\"Second virtual thread did not run\");\n+                }\n+            } finally {\n+                LockSupport.unpark(vthread1);\n+            }\n+        }\n+\n+        if (!Arrays.equals(target.toByteArray(), bytes)) {\n+            throw new RuntimeException(\"Expected bytes not written\");\n+        }\n+    }\n+\n+    \/**\n+     * Waits for a thread to get to the expected state.\n+     *\/\n+    private static void await(Thread thread, Thread.State expectedState) throws Exception {\n+        Thread.State state = thread.getState();\n+        while (state != expectedState) {\n+            Thread.sleep(10);\n+            state = thread.getState();\n+        }\n+    }\n+\n+    \/**\n+     * An OutputStream that parks when writing.\n+     *\/\n+    static class ParkingOutputStream extends OutputStream {\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        @Override\n+        public void write(int i) {\n+            LockSupport.park();\n+            baos.write(i);\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+            LockSupport.park();\n+            baos.write(b, off, len);\n+        }\n+\n+        byte[] toByteArray() {\n+            return baos.toByteArray();\n+        }\n+    }\n+\n+    \/**\n+     * Returns a builder to create virtual threads that use the given scheduler.\n+     *\/\n+    static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) throws Exception {\n+        Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n+        Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n+        ctor.setAccessible(true);\n+        return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ByteArrayOutputStream\/WriteToReleasesCarrier.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"}]}