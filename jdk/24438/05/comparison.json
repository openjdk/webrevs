{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -151,94 +150,0 @@\n-    \/**\n-     * Writes a string representation of the specified object to this console's\n-     * output stream, terminates the line using {@link System#lineSeparator()}\n-     * and then flushes the console.\n-     *\n-     * <p> The string representation of the specified object is obtained as if\n-     * by calling {@link String#valueOf(Object)}.\n-     *\n-     * @param  obj\n-     *         An object whose string representation is to be written,\n-     *         may be {@code null}.\n-     *\n-     * @return  This console\n-     *\n-     * @since 23\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n-    public Console println(Object obj) {\n-        throw newUnsupportedOperationException();\n-    }\n-\n-    \/**\n-     * Terminates the current line in this console's output stream using\n-     * {@link System#lineSeparator()} and then flushes the console.\n-     *\n-     * @return  This console\n-     *\n-     * @since 24\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n-    public Console println() {\n-        return println(\"\");\n-    }\n-\n-    \/**\n-     * Writes a string representation of the specified object to this console's\n-     * output stream and then flushes the console.\n-     *\n-     * <p> The string representation of the specified object is obtained as if\n-     * by calling {@link String#valueOf(Object)}.\n-     *\n-     * @param  obj\n-     *         An object whose string representation is to be written,\n-     *         may be {@code null}.\n-     *\n-     * @return  This console\n-     *\n-     * @since 23\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n-    public Console print(Object obj) {\n-        throw newUnsupportedOperationException();\n-    }\n-\n-    \/**\n-     * Writes a prompt as if by calling {@code print}, then reads a single line\n-     * of text from this console.\n-     *\n-     * @param  prompt\n-     *         A prompt string, may be {@code null}.\n-     *\n-     * @throws IOError\n-     *         If an I\/O error occurs.\n-     *\n-     * @return  A string containing the line read from the console, not\n-     *          including any line-termination characters, or {@code null}\n-     *          if an end of stream has been reached without having read\n-     *          any characters.\n-     *\n-     * @since 23\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n-    public String readln(String prompt) {\n-        throw newUnsupportedOperationException();\n-    }\n-\n-    \/**\n-     * Reads a single line of text from this console.\n-     *\n-     * @throws IOError\n-     *         If an I\/O error occurs.\n-     *\n-     * @return  A string containing the line read from the console, not\n-     *          including any line-termination characters, or {@code null}\n-     *          if an end of stream has been reached without having read\n-     *          any characters.\n-     *\n-     * @since 24\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n-    public String readln() {\n-        throw newUnsupportedOperationException();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -1,143 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.io;\n-\n-import jdk.internal.javac.PreviewFeature;\n-\n-\/**\n- * A collection of static convenience methods that provide access to\n- * {@linkplain System#console() system console} for implicitly declared classes.\n- *\n- * <p> Each of this class' methods throws {@link IOError} if the system console\n- * is {@code null}; otherwise, the effect is as if a similarly-named method\n- * had been called on that console.\n- *\n- * <p> Input and output from methods in this class use the character set of\n- * the system console as specified by {@link Console#charset}.\n- *\n- * @since 23\n- *\/\n-@PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n-public final class IO {\n-\n-    private IO() {\n-        throw new Error(\"no instances\");\n-    }\n-\n-    \/**\n-     * Writes a string representation of the specified object to the system\n-     * console, terminates the line and then flushes that console.\n-     *\n-     * <p> The effect is as if {@link Console#println(Object) println(obj)}\n-     * had been called on {@code System.console()}.\n-     *\n-     * @param obj the object to print, may be {@code null}\n-     *\n-     * @throws IOError if {@code System.console()} returns {@code null},\n-     *                 or if an I\/O error occurs\n-     *\/\n-    public static void println(Object obj) {\n-        con().println(obj);\n-    }\n-\n-    \/**\n-     * Terminates the current line on the system console and then flushes\n-     * that console.\n-     *\n-     * <p> The effect is as if {@link Console#println() println()}\n-     * had been called on {@code System.console()}.\n-     *\n-     * @throws IOError if {@code System.console()} returns {@code null},\n-     *                 or if an I\/O error occurs\n-     * @since 24\n-     *\/\n-    public static void println() {\n-        con().println();\n-    }\n-\n-    \/**\n-     * Writes a string representation of the specified object to the system\n-     * console and then flushes that console.\n-     *\n-     * <p> The effect is as if {@link Console#print(Object) print(obj)}\n-     * had been called on {@code System.console()}.\n-     *\n-     * @param obj the object to print, may be {@code null}\n-     *\n-     * @throws IOError if {@code System.console()} returns {@code null},\n-     *                 or if an I\/O error occurs\n-     *\/\n-    public static void print(Object obj) {\n-        con().print(obj);\n-    }\n-\n-    \/**\n-     * Writes a prompt as if by calling {@code print}, then reads a single line\n-     * of text from the system console.\n-     *\n-     * <p> The effect is as if {@link Console#readln(String) readln(prompt)}\n-     * had been called on {@code System.console()}.\n-     *\n-     * @param prompt the prompt string, may be {@code null}\n-     *\n-     * @return a string containing the line read from the system console, not\n-     * including any line-termination characters. Returns {@code null} if an\n-     * end of stream has been reached without having read any characters.\n-     *\n-     * @throws IOError if {@code System.console()} returns {@code null},\n-     *                 or if an I\/O error occurs\n-     *\/\n-    public static String readln(String prompt) {\n-        return con().readln(prompt);\n-    }\n-\n-    \/**\n-     * Reads a single line of text from the system console.\n-     *\n-     * <p> The effect is as if {@link Console#readln() readln()}\n-     * had been called on {@code System.console()}.\n-     *\n-     * @return a string containing the line read from the system console, not\n-     * including any line-termination characters. Returns {@code null} if an\n-     * end of stream has been reached without having read any characters.\n-     *\n-     * @throws IOError if {@code System.console()} returns {@code null},\n-     *                 or if an I\/O error occurs\n-     * @since 24\n-     *\/\n-    public static String readln() {\n-        return con().readln();\n-    }\n-\n-    private static Console con() {\n-        var con = System.console();\n-        if (con != null) {\n-            return con;\n-        } else {\n-            throw new IOError(null);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/io\/IO.java","additions":0,"deletions":143,"binary":false,"changes":143,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,48 +84,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Console println(Object obj) {\n-        synchronized (writeLock) {\n-            delegate.println(obj);\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Console print(Object obj) {\n-        synchronized (writeLock) {\n-            delegate.print(obj);\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @throws IOError {@inheritDoc}\n-     *\/\n-    @Override\n-    public String readln(String prompt) {\n-        synchronized (writeLock) {\n-            synchronized (readLock) {\n-                return delegate.readln(prompt);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @throws IOError {@inheritDoc}\n-     *\/\n-    @Override\n-    public String readln() {\n-        synchronized (readLock) {\n-            return delegate.readln();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":1,"deletions":49,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.IOError;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+\/**\n+ * A collection of static methods that provide convenient access to {@link System#in}\n+ * and {@link System#out} for line-oriented input and output.\n+ * <p>\n+ * The {@link #readln()} and {@link #readln(String)} methods decode bytes read from\n+ * {@code System.in} into characters. The charset used for decoding is specified by the\n+ * {@link System#getProperties stdin.encoding} property. If this property is not present,\n+ * or if the charset it names cannot be loaded, then UTF-8 is used instead. Decoding\n+ * always replaces malformed and unmappable byte sequences with the charset's default\n+ * replacement string.\n+ * <p>\n+ * Charset decoding is set up upon the first call to one of the {@code readln} methods.\n+ * Decoding may buffer additional bytes beyond those that have been decoded to characters\n+ * returned to the application. After the first call to one of the {@code readln} methods,\n+ * any subsequent use of {@code System.in} results in unspecified behavior.\n+ *\n+ * @apiNote\n+ * The expected use case is that certain applications will use only the {@code readln}\n+ * methods to read from the standard input, and they will not mix these calls with\n+ * other techniques for reading from {@code System.in}.\n+ *\n+ * @since 25\n+ *\/\n+public final class IO {\n+\n+    \/*\n+     * We are deliberately not including printf, at least not initially, for\n+     * the following reasons. First, it introduces a rather cryptic and arcane\n+     * formatting language that isn't really suited to beginners. Second, it\n+     * is inherently localizable, which drags in a whole bunch of issues about\n+     * what locale should be used for formatting, the possible inclusion of\n+     * an overload with an explicit Locale parameter, and so forth. These issues\n+     * are best avoided for the time being. Third, when string templates come\n+     * along, they might offer a better alternative to printf-style formatting,\n+     * so it's best not be saddled with this unnecessarily.\n+     *\/\n+\n+    \/*\n+     * Notes on flushing. We want flushing to occur after every call to println\n+     * and print, so that the user can see output immediately. This could be\n+     * important if the user calls print() to issue a prompt before calling\n+     * readln() instead of the readln(prompt) overload. It's also important to\n+     * flush after print() in case the user is relying on print() to emit output\n+     * as sort of a progress indicator.\n+     *\n+     * We rely on System.out to have autoflush enabled, which flushes after every\n+     * println() call, so we needn't flush again. We flush unconditionally after\n+     * calls to print(). Since System.out is doing a lot of flushing anyway, there\n+     * isn't much point trying to make this conditional, for example, only if\n+     * stdout is connected to a terminal.\n+     *\/\n+\n+    private IO() {\n+        throw new Error(\"no instances\");\n+    }\n+\n+    \/**\n+     * Writes a string representation of the specified object and then writes\n+     * a line separator to the standard output.\n+     *\n+     * <p> The effect is as if {@link java.io.PrintStream#println(Object) println(obj)}\n+     * had been called on {@code System.out}.\n+     *\n+     * @param obj the object to print, may be {@code null}\n+     *\/\n+    public static void println(Object obj) {\n+        System.out.println(obj);\n+    }\n+\n+    \/**\n+     * Writes a line separator to the standard output.\n+     *\n+     * <p> The effect is as if {@link java.io.PrintStream#println() println()}\n+     * had been called on {@code System.out}.\n+     *\/\n+    public static void println() {\n+        System.out.println();\n+    }\n+\n+    \/**\n+     * Writes a string representation of the specified object to the\n+     * standard output.\n+     *\n+     * <p> The effect is as if {@link java.io.PrintStream#print(Object) print(obj)}\n+     * had been called on {@code System.out}.\n+     *\n+     * @param obj the object to print, may be {@code null}\n+     *\/\n+    public static void print(Object obj) {\n+        var out = System.out;\n+        out.print(obj);\n+        out.flush();\n+    }\n+\n+    \/**\n+     * Reads a single line of text from the standard input.\n+     * <p>\n+     * One line is read from the decoded input as if by\n+     * {@link java.io.BufferedReader#readLine() BufferedReader.readLine()}\n+     * and then the result is returned.\n+     * <p>\n+     * If necessary, this method first sets up charset decoding, as described in\n+     * above in the class specification.\n+     *\n+     * @return a string containing the line read from the standard input, not\n+     * including any line separator characters. Returns {@code null} if an\n+     * end of stream has been reached without having read any characters.\n+     *\n+     * @throws IOError if an I\/O error occurs\n+     *\/\n+    public static String readln() {\n+        try {\n+            return reader().readLine();\n+        } catch (IOException ioe) {\n+            throw new IOError(ioe);\n+        }\n+    }\n+\n+    \/**\n+     * Writes a prompt and then reads a line of input.\n+     * <p>\n+     * Writes a prompt as if by calling {@code print}, and then reads a single\n+     * line of text as if by calling {@link readln readln()}.\n+     * <p>\n+     * If necessary, this method first sets up charset decoding, as described in\n+     * above in the class specification.\n+     *\n+     * @param prompt the prompt string, may be {@code null}\n+     *\n+     * @return a string containing the line read from the standard input, not\n+     * including any line separator characters. Returns {@code null} if an\n+     * end of stream has been reached without having read any characters.\n+     *\n+     * @throws IOError if an I\/O error occurs\n+     *\/\n+    public static String readln(String prompt) {\n+        print(prompt);\n+        return readln();\n+    }\n+\n+    \/**\n+     * The BufferedReader used by readln(). Initialized under a class lock by\n+     * the reader() method.\n+     *\/\n+    static BufferedReader br;\n+\n+    \/**\n+     * On the first call, creates an InputStreamReader to decode characters from\n+     * System.in, wraps it in a BufferedReader, and returns the BufferedReader.\n+     * These objects are cached and returned by subsequent calls.\n+     *\n+     * @return the internal BufferedReader instance\n+     *\/\n+    static synchronized BufferedReader reader() {\n+        if (br == null) {\n+            String enc = System.getProperty(\"stdin.encoding\", \"\");\n+            Charset cs = Charset.forName(enc, StandardCharsets.UTF_8);\n+            br = new BufferedReader(new InputStreamReader(System.in, cs));\n+        }\n+        return br;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IO.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,0 @@\n-    String readln(String prompt);\n-    String readln();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsole.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,34 +74,0 @@\n-    @Override\n-    public String readln(String prompt) {\n-        String line = null;\n-        synchronized (writeLock) {\n-            synchronized(readLock) {\n-                pw.print(prompt);\n-                pw.flush(); \/\/ automatic flushing does not cover print\n-                try {\n-                    char[] ca = readline(false);\n-                    if (ca != null)\n-                        line = new String(ca);\n-                } catch (IOException x) {\n-                    throw new IOError(x);\n-                }\n-            }\n-        }\n-        return line;\n-    }\n-\n-    @Override\n-    public String readln() {\n-        String line = null;\n-        synchronized(readLock) {\n-            try {\n-                char[] ca = readline(false);\n-                if (ca != null)\n-                    line = new String(ca);\n-            } catch (IOException x) {\n-                throw new IOError(x);\n-            }\n-        }\n-        return line;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":1,"deletions":35,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,2 +71,1 @@\n-        @JEP(number=495, title=\"Simple Source Files and Instance Main Methods\", status=\"Fourth Preview\")\n-        IMPLICIT_CLASSES,\n+        IMPLICIT_CLASSES, \/\/to be removed when boot JDK is 25\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,2 +85,1 @@\n-        boolean isPreview = PreviewFeatures.isEnabled();\n-        Method mainMethod = JLA.findMethod(cls, !isPreview, \"main\", String[].class);\n+        Method mainMethod = JLA.findMethod(cls, true, \"main\", String[].class);\n@@ -88,1 +87,6 @@\n-        if (isPreview && mainMethod == null) {\n+        if (mainMethod == null) {\n+            \/\/if not public method, try to lookup a non-public one\n+            mainMethod = JLA.findMethod(cls, false, \"main\", String[].class);\n+        }\n+\n+        if (mainMethod == null) {\n@@ -100,2 +104,1 @@\n-                (isPreview && Modifier.isPrivate(mods)) ||\n-                (!isPreview && !Modifier.isStatic(mods))) {\n+                Modifier.isPrivate(mods)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/MethodFinder.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-import jdk.internal.misc.PreviewFeatures;\n@@ -948,1 +947,0 @@\n-        boolean isPublic = Modifier.isPublic(mods);\n@@ -951,8 +949,0 @@\n-        if (!PreviewFeatures.isEnabled()) {\n-            if (!isStaticMain || !isPublic || noArgMain) {\n-                  abort(null, \"java.launcher.cls.error2\", mainClass.getName(),\n-                       JAVAFX_APPLICATION_CLASS_NAME);\n-            }\n-            return;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -231,1 +231,0 @@\n-            case IMPLICIT_CLASSES -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -265,1 +265,1 @@\n-        IMPLICIT_CLASSES(JDK21, Fragments.FeatureImplicitClasses, DiagKind.PLURAL),\n+        IMPLICIT_CLASSES(JDK25, Fragments.FeatureImplicitClasses, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,1 +233,0 @@\n-    public final Type ioType;\n@@ -616,1 +615,0 @@\n-        ioType = enterClass(\"java.io.IO\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -343,14 +343,0 @@\n-                if (peekTypeExists(syms.ioType.tsym)) {\n-                    doImport(make.Import(make.Select(make.QualIdent(syms.ioType.tsym),\n-                            names.asterisk), true), false);\n-                }\n-            }\n-        }\n-\n-        private boolean peekTypeExists(TypeSymbol type) {\n-            try {\n-                type.complete();\n-                return !type.type.isErroneous();\n-            } catch (CompletionFailure cf) {\n-                \/\/does not exist\n-                return false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -156,0 +156,1 @@\n+    private JCDiagnostic.Error unexpectedTopLevelDefinitionStartError;\n@@ -203,0 +204,1 @@\n+        updateUnexpectedTopLevelDefinitionStartError(false);\n@@ -227,0 +229,1 @@\n+        updateUnexpectedTopLevelDefinitionStartError(false);\n@@ -4024,0 +4027,1 @@\n+            updateUnexpectedTopLevelDefinitionStartError(true);\n@@ -4097,1 +4101,1 @@\n-                if (Feature.IMPLICIT_CLASSES.allowedInSource(source) && !isDeclaration()) {\n+                if (!isDeclaration(true)) {\n@@ -4351,12 +4355,1 @@\n-            JCDiagnostic.Error error;\n-            if (parseModuleInfo) {\n-                error = Errors.ExpectedModuleOrOpen;\n-            } else if (Feature.IMPLICIT_CLASSES.allowedInSource(source) &&\n-                       (!preview.isPreview(Feature.IMPLICIT_CLASSES) || preview.isEnabled())) {\n-                error = Errors.ClassMethodOrFieldExpected;\n-            } else if (allowRecords) {\n-                error = Errors.Expected4(CLASS, INTERFACE, ENUM, \"record\");\n-            } else {\n-                error = Errors.Expected3(CLASS, INTERFACE, ENUM);\n-            }\n-            return toP(F.Exec(syntaxError(pos, errs, error)));\n+            return toP(F.Exec(syntaxError(pos, errs, unexpectedTopLevelDefinitionStartError)));\n@@ -4951,0 +4944,4 @@\n+        return isDeclaration(allowRecords);\n+    }\n+\n+    private boolean isDeclaration(boolean allowRecords) {\n@@ -5615,0 +5612,13 @@\n+    private void updateUnexpectedTopLevelDefinitionStartError(boolean hasPackageDecl) {\n+        \/\/TODO: proper tests for this logic (and updates):\n+        if (parseModuleInfo) {\n+            unexpectedTopLevelDefinitionStartError = Errors.ExpectedModuleOrOpen;\n+        } else if (Feature.IMPLICIT_CLASSES.allowedInSource(source) && !hasPackageDecl) {\n+            unexpectedTopLevelDefinitionStartError = Errors.ClassMethodOrFieldExpected;\n+        } else if (allowRecords) {\n+            unexpectedTopLevelDefinitionStartError = Errors.Expected4(CLASS, INTERFACE, ENUM, \"record\");\n+        } else {\n+            unexpectedTopLevelDefinitionStartError = Errors.Expected3(CLASS, INTERFACE, ENUM);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-    implicitly declared class should not have package declaration\n+    compact source file should not have package declaration\n@@ -535,1 +535,1 @@\n-    implicitly declared class does not have main method in the form of void main() or void main(String[] args)\n+    compact source file does not have main method in the form of void main() or void main(String[] args)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,10 +96,0 @@\n-        @Override\n-        public String readln(String prompt) {\n-            return getDelegate(true).readln(prompt);\n-        }\n-\n-        @Override\n-        public String readln() {\n-            return getDelegate(true).readln();\n-        }\n-\n@@ -222,15 +212,0 @@\n-        @Override\n-        public String readln(String prompt) {\n-            try {\n-                initJLineIfNeeded();\n-                return jline.readLine(prompt == null ? \"null\" : prompt.replace(\"%\", \"%%\"));\n-            } catch (EndOfFileException eofe) {\n-                return null;\n-            }\n-        }\n-\n-        @Override\n-        public String readln() {\n-            return readLine();\n-        }\n-\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -4131,9 +4131,0 @@\n-        @Override\n-        public String readLine() throws IOError {\n-            try {\n-                return input.readUserLine();\n-            } catch (IOException ex) {\n-                throw new IOError(ex);\n-            }\n-        }\n-\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,15 +79,0 @@\n-    \/**\n-     * Reads a single line of text from the console.\n-     *\n-     * @throws IOError\n-     *         If an I\/O error occurs.\n-     *\n-     * @return  A string containing the line read from the console, not\n-     *          including any line-termination characters, or {@code null}\n-     *          if an end of stream has been reached.\n-     * @see java.io.Console#readLine()\n-     * @since 24\n-     *\/\n-    @PreviewFeature(feature=PreviewFeature.Feature.IMPLICIT_CLASSES)\n-    public String readLine() throws IOError;\n-\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/JShellConsole.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,31 +218,0 @@\n-        \/**\n-         * {@inheritDoc}\n-         *\n-         * @throws IOError {@inheritDoc}\n-         *\/\n-        @Override\n-        public String readln(String prompt) {\n-            char[] chars = (prompt == null ? \"null\" : prompt).toCharArray();\n-\n-            try {\n-                return sendAndReceive(() -> {\n-                    remoteInput.write(Task.READ_LINE.ordinal());\n-                    sendChars(chars, 0, chars.length);\n-                    char[] line = readChars();\n-                    return new String(line);\n-                });\n-            } catch (IOException ex) {\n-                throw new IOError(ex);\n-            }\n-        }\n-\n-        \/**\n-         * {@inheritDoc}\n-         *\n-         * @throws IOError {@inheritDoc}\n-         *\/\n-        @Override\n-        public String readln() {\n-            return readLine();\n-        }\n-\n@@ -288,9 +257,1 @@\n-            try {\n-                return sendAndReceive(() -> {\n-                    remoteInput.write(Task.READ_LINE_NO_PROMPT.ordinal());\n-                    char[] line = readChars();\n-                    return new String(line);\n-                });\n-            } catch (IOException ex) {\n-                throw new IOError(ex);\n-            }\n+            return readLine(Locale.getDefault(Locale.Category.FORMAT), \"\");\n@@ -435,6 +396,0 @@\n-                case READ_LINE_NO_PROMPT -> {\n-                    String line = console.readLine();\n-                    char[] chars = line.toCharArray();\n-                    sendChars(sinkOutput, chars, 0, chars.length);\n-                    bp = 0;\n-                }\n@@ -519,1 +474,0 @@\n-        READ_LINE_NO_PROMPT,\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/impl\/ConsoleImpl.java","additions":2,"deletions":48,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n-import static java.io.IO.*;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/tool\/resources\/PREVIEW_DEFAULT.jsh","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n- * @bug 8305457 8342936 8351435\n- * @summary java.io.IO tests\n+ * @bug 8305457 8342936 8351435 8344706\n+ * @summary java.lang.IO tests\n@@ -187,0 +187,1 @@\n+                    import static java.lang.IO.*;\n@@ -192,4 +193,0 @@\n-                        System.console().print(\"1 \");\n-                        System.console().print(\"2 \");\n-                        System.console().print(\"3 \");\n-                        System.console().println();\n@@ -206,1 +203,1 @@\n-        assertEquals(\"1 2 3 \" + nl + \"1 2 3 \" + nl, out);\n+        assertEquals(\"1 2 3 \" + nl, out);\n@@ -210,13 +207,0 @@\n-    @ParameterizedTest\n-    @ValueSource(strings = {\"println\", \"print\", \"input\"})\n-    public void nullConsole(String method) throws Exception {\n-        var file = Path.of(System.getProperty(\"test.src\", \".\"), \"Methods.java\")\n-                .toAbsolutePath().toString();\n-        var pb = ProcessTools.createTestJavaProcessBuilder(\"-Djdk.console=gibberish\",\n-                \"--enable-preview\", file, method);\n-        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n-        output.reportDiagnosticSummary();\n-        assertEquals(1, output.getExitValue());\n-        output.shouldContain(\"Exception in thread \\\"main\\\" java.io.IOError\");\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/IO\/IO.java","additions":4,"deletions":20,"binary":false,"changes":24,"previous_filename":"test\/jdk\/java\/io\/IO\/IO.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import static java.io.IO.readln;\n+import static java.lang.IO.readln;\n","filename":"test\/jdk\/java\/lang\/IO\/Input.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/io\/IO\/Input.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import static java.io.IO.*;\n+import static java.lang.IO.*;\n","filename":"test\/jdk\/java\/lang\/IO\/Methods.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/io\/IO\/Methods.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import static java.io.IO.*;\n+import static java.lang.IO.*;\n","filename":"test\/jdk\/java\/lang\/IO\/Output.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/io\/IO\/Output.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/IO\/input-no-prompt.exp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/io\/IO\/input-no-prompt.exp","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/IO\/input.exp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/io\/IO\/input.exp","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/IO\/output.exp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/io\/IO\/output.exp","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8333086\n+ * @bug 8333086 8344706\n@@ -35,1 +35,0 @@\n-import java.io.IO;\n@@ -47,2 +46,2 @@\n-                System.console().println(\"Hello!\");\n-                System.console().print(\"Hello!\");\n+                System.console().printf(\"Hello!\\n\");\n+                System.console().printf(\"Hello!\");\n@@ -69,1 +68,1 @@\n-            new TestCase(\"IO-read\", LineReader.class.getName(), null)\n+            new TestCase(\"IO-read\", null, Terminal.class.getName())\n","filename":"test\/jdk\/jdk\/internal\/jline\/LazyJdkConsoleProvider.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -566,1 +566,1 @@\n-        \/\/ incorrect method type - non-static\n+        \/\/ non-static method type\n@@ -570,1 +570,1 @@\n-        tr.contains(\"Error: Main method not found in class Foo\");\n+        tr.checkPositive();\n@@ -575,1 +575,1 @@\n-        tr.contains(\"Error: Main method not found in class Foo\");\n+        tr.checkPositive();\n","filename":"test\/jdk\/tools\/launcher\/Arrrghs.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8298425\n+ * @bug 8298425 8344706\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -71,7 +70,0 @@\n-        console = new ThrowingJShellConsole() {\n-            @Override\n-            public String readLine() throws IOError {\n-                return \"AB\";\n-            }\n-        };\n-        assertEval(\"System.console().readLine()\", \"\\\"AB\\\"\");\n@@ -221,4 +213,0 @@\n-            public String readLine() throws IOError {\n-                return console.readLine();\n-            }\n-            @Override\n@@ -255,4 +243,0 @@\n-        public String readLine() throws IOError {\n-            throw new IllegalStateException(\"Not expected!\");\n-        }\n-        @Override\n","filename":"test\/langtools\/jdk\/jshell\/ConsoleTest.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8331535 8341631\n+ * @bug 8331535 8341631 8344706\n@@ -62,2 +62,3 @@\n-             a -> {assertCommandWithOutputAndTerminal(a,\n-                                                      \"java.io.IO.readln(\\\"%%s\\\");\\ninput\", \/\/newline automatically appended\n+             a -> {assertCommandWithOutputAndInput(a,\n+                                                      \"java.lang.IO.readln(\\\"%%s\\\");\",\n+                                                      \"input\\n\",\n@@ -65,0 +66,1 @@\n+                                                      \"%%s\",\n@@ -66,2 +68,1 @@\n-                                                      \\u0005java.io.IO.readln(\\\"%%s\\\");\n-                                                      %%sinput\n+                                                      \\u0005java.lang.IO.readln(\\\"%%s\\\");\n@@ -69,2 +70,3 @@\n-             a -> {assertCommandWithOutputAndTerminal(a,\n-                                                      \"java.io.IO.readln();\\ninput!\", \/\/newline automatically appended\n+             a -> {assertCommandWithOutputAndInput(a,\n+                                                      \"java.lang.IO.readln();\",\n+                                                      \"input!\\n\",\n@@ -72,0 +74,1 @@\n+                                                      \"\",\n@@ -73,2 +76,1 @@\n-                                                      \\u0005java.io.IO.readln();\n-                                                      input!\n+                                                      \\u0005java.lang.IO.readln();\n@@ -76,2 +78,3 @@\n-             a -> {assertCommandWithOutputAndTerminal(a,\n-                                                      \"java.io.IO.println(\\\"Hello, World!\\\");\",\n+             a -> {assertCommandWithOutputAndInput(a,\n+                                                      \"java.lang.IO.println(\\\"Hello, World!\\\");\",\n+                                                      \"\",\n@@ -79,0 +82,1 @@\n+                                                      \"Hello, World!\\n\",\n@@ -80,2 +84,1 @@\n-                                                      \\u0005java.io.IO.println(\\\"Hello, World!\\\");\n-                                                      Hello, World!\n+                                                      \\u0005java.lang.IO.println(\\\"Hello, World!\\\");\n@@ -83,2 +86,3 @@\n-             a -> {assertCommandWithOutputAndTerminal(a,\n-                                                      \"java.io.IO.println();\",\n+             a -> {assertCommandWithOutputAndInput(a,\n+                                                      \"java.lang.IO.println();\",\n+                                                      \"\",\n@@ -86,0 +90,1 @@\n+                                                      \"\\n\",\n@@ -87,2 +92,1 @@\n-                                                      \\u0005java.io.IO.println();\n-\n+                                                      \\u0005java.lang.IO.println();\n@@ -97,0 +101,4 @@\n+    void assertCommandWithOutputAndInput(boolean a, String command, String input, String out, String print, String terminalOut) {\n+        assertCommand(a, command, out, null, input, print, null, terminalOut);\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ConsoleToolTest.java","additions":26,"deletions":18,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -25,1 +25,2 @@\n- * @test 8151754 8080883 8160089 8170162 8166581 8172102 8171343 8178023 8186708 8179856 8185840 8190383 8341631 8341833\n+ * @test\n+ * @bug 8151754 8080883 8160089 8170162 8166581 8172102 8171343 8178023 8186708 8179856 8185840 8190383 8341631 8341833 8344706\n@@ -416,2 +417,0 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prefix\\nsuffix\\n\"),\n-                             fn2);\n@@ -419,1 +418,1 @@\n-                             \"--enable-preview\", fn2);\n+                             fn2);\n","filename":"test\/langtools\/jdk\/jshell\/StartOptionTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8338301\n+ * @bug 8338301 8344706\n@@ -81,2 +81,1 @@\n-            .options(\"-XDrawDiagnostics\",\n-                     \"--enable-preview\", \"--release\", SOURCE_VERSION)\n+            .options(\"-XDrawDiagnostics\")\n@@ -90,2 +89,0 @@\n-            \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n-            \"- compiler.note.preview.recompile\",\n@@ -114,2 +111,1 @@\n-                     \"-XDshould-stop.at=FLOW\",\n-                     \"--enable-preview\", \"--release\", SOURCE_VERSION)\n+                     \"-XDshould-stop.at=FLOW\")\n@@ -145,2 +141,1 @@\n-            .options(\"-XDrawDiagnostics\",\n-                     \"--enable-preview\", \"--release\", SOURCE_VERSION)\n+            .options(\"-XDrawDiagnostics\")\n@@ -169,2 +164,1 @@\n-                .options(\"-XDrawDiagnostics\",\n-                        \"--enable-preview\", \"--release\", SOURCE_VERSION)\n+                .options(\"-XDrawDiagnostics\")\n@@ -194,1 +188,1 @@\n-                \"Test.java:1:1: compiler.err.expected4: class, interface, enum, record\",\n+                \"Test.java:1:1: compiler.err.class.method.or.field.expected\",\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/ErrorRecovery.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n- * @compile\/fail\/ref=ImplicitClassRecovery.out -XDrawDiagnostics --enable-preview --source ${jdk.version} ImplicitClassRecovery.java\n+ * @bug 8344706\n+ * @compile\/fail\/ref=ImplicitClassRecovery.out -XDrawDiagnostics ImplicitClassRecovery.java\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/ImplicitClassRecovery.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-ImplicitClassRecovery.java:7:33: compiler.err.expected: ';'\n-- compiler.note.preview.filename: ImplicitClassRecovery.java, DEFAULT\n-- compiler.note.preview.recompile\n+ImplicitClassRecovery.java:8:33: compiler.err.expected: ';'\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/ImplicitClassRecovery.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8325324\n+ * @bug 8325324 8344706\n@@ -85,1 +85,0 @@\n-                .options(\"--enable-preview\", \"--release\", SOURCE_VERSION)\n@@ -94,1 +93,0 @@\n-                    .vmOptions(\"--enable-preview\")\n@@ -110,1 +108,0 @@\n-                .options(\"--enable-preview\", \"--source\", SOURCE_VERSION)\n@@ -119,1 +116,0 @@\n-                    .vmOptions(\"--enable-preview\")\n@@ -135,1 +131,1 @@\n-    public void testImplicitSimpleIOImport(Path base) throws Exception {\n+    public void testNoImplicitSimpleIOImport(Path base) throws Exception {\n@@ -138,2 +134,0 @@\n-        Path patchClasses = prepareIOPatch(current);\n-\n@@ -151,14 +145,5 @@\n-        new JavacTask(tb)\n-            .options(\"--enable-preview\", \"--release\", SOURCE_VERSION,\n-                     \"--patch-module\", \"java.base=\" + patchClasses)\n-            .outdir(classes)\n-            .files(tb.findJavaFiles(src))\n-            .run(Task.Expect.SUCCESS)\n-            .writeAll();\n-\n-        var out = new JavaTask(tb)\n-                .classpath(classes.toString())\n-                .className(\"Test\")\n-                .vmOptions(\"--enable-preview\",\n-                           \"--patch-module\", \"java.base=\" + patchClasses)\n-                .run()\n+        var log = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Task.Expect.FAIL)\n@@ -166,1 +151,1 @@\n-                .getOutputLines(Task.OutputKind.STDOUT);\n+                .getOutputLines(OutputKind.DIRECT);\n@@ -168,1 +153,3 @@\n-        var expectedOut = List.of(\"Hello, World!\");\n+        var expectedLog = List.of(\n+            \"Test.java:2:5: compiler.err.cant.resolve.location.args: kindname.method, println, , java.lang.String, (compiler.misc.location: kindname.class, Test, null)\",\n+            \"1 error\");\n@@ -170,3 +157,3 @@\n-        if (!Objects.equals(expectedOut, out)) {\n-            throw new AssertionError(\"Incorrect Output, expected: \" + expectedOut +\n-                                      \", actual: \" + out);\n+        if (!Objects.equals(expectedLog, log)) {\n+            throw new AssertionError(\"Incorrect Output, expected: \" + expectedLog +\n+                                      \", actual: \" + log);\n@@ -180,3 +167,0 @@\n-\n-        Path patchClasses = prepareIOPatch(current);\n-\n@@ -198,3 +182,1 @@\n-                .options(\"--enable-preview\", \"--release\", SOURCE_VERSION,\n-                        \"--patch-module\", \"java.base=\" + patchClasses,\n-                        \"-XDrawDiagnostics\")\n+                .options(\"-XDrawDiagnostics\")\n@@ -221,25 +203,0 @@\n-    private Path prepareIOPatch(Path base) throws IOException {\n-        Path patchSrc = base.resolve(\"patch-src\");\n-        Path patchClasses = base.resolve(\"patch-classes\");\n-        tb.writeJavaFiles(patchSrc,\n-                          \"\"\"\n-                          package java.io;\n-                          public class IO {\n-                              public static void println(Object o) {\n-                                  System.out.println(o);\n-                              }\n-                          }\n-                          \"\"\");\n-\n-        Files.createDirectories(patchClasses);\n-\n-        new JavacTask(tb)\n-            .options(\"--patch-module\", \"java.base=\" + patchSrc)\n-            .outdir(patchClasses)\n-            .files(tb.findJavaFiles(patchSrc))\n-            .run(Task.Expect.SUCCESS)\n-            .writeAll();\n-\n-        return patchClasses;\n-    }\n-\n@@ -263,1 +220,0 @@\n-            .options(\"--enable-preview\", \"--release\", SOURCE_VERSION)\n@@ -272,1 +228,0 @@\n-                .vmOptions(\"--enable-preview\")\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/ImplicitImports.java","additions":16,"deletions":61,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,1 @@\n- * @bug 8315458\n- * @enablePreview\n+ * @bug 8315458 8344706\n@@ -80,1 +79,1 @@\n-                .options(\"-encoding\", \"utf8\", \"--enable-preview\", \"-source\", JAVA_VERSION)\n+                .options(\"-encoding\", \"utf8\")\n@@ -99,1 +98,1 @@\n-                .options(\"-XDrawDiagnostics\", \"-encoding\", \"utf8\", \"--enable-preview\", \"-source\", JAVA_VERSION)\n+                .options(\"-XDrawDiagnostics\", \"-encoding\", \"utf8\")\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/NestedClasses.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8344706\n@@ -27,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/NestedEnum.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8310314\n+ * @bug 8310314 8344706\n@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=SourceLevelErrorPosition.out -XDrawDiagnostics SourceLevelErrorPosition.java\n+ * @compile\/fail\/ref=SourceLevelErrorPosition.out --release 24 -XDrawDiagnostics SourceLevelErrorPosition.java\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/SourceLevelErrorPosition.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-SourceLevelErrorPosition.java:8:1: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.implicit.classes)\n+SourceLevelErrorPosition.java:8:1: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.implicit.classes), 24, 25\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/SourceLevelErrorPosition.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,1 @@\n- * @bug 8315458\n- * @enablePreview\n+ * @bug 8315458 8344706\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/TestImplicitClass.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-T8036019.java:43:27: compiler.err.expected4: class, interface, enum, record\n-T8036019.java:46:1: compiler.err.expected4: class, interface, enum, record\n+T8036019.java:43:27: compiler.err.class.method.or.field.expected\n+T8036019.java:46:1: compiler.err.class.method.or.field.expected\n","filename":"test\/langtools\/tools\/javac\/T8036019.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,5 +2,5 @@\n-AnnotatedImport.java:10:16: compiler.err.expected4: class, interface, enum, record\n-AnnotatedImport.java:11:1: compiler.err.expected4: class, interface, enum, record\n-AnnotatedImport.java:11:11: compiler.err.expected4: class, interface, enum, record\n-AnnotatedImport.java:12:1: compiler.err.expected4: class, interface, enum, record\n-AnnotatedImport.java:12:21: compiler.err.expected4: class, interface, enum, record\n+AnnotatedImport.java:10:16: compiler.err.class.method.or.field.expected\n+AnnotatedImport.java:11:1: compiler.err.class.method.or.field.expected\n+AnnotatedImport.java:11:11: compiler.err.class.method.or.field.expected\n+AnnotatedImport.java:12:1: compiler.err.class.method.or.field.expected\n+AnnotatedImport.java:12:21: compiler.err.class.method.or.field.expected\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedImport.out","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8273039\n+ * @bug 8273039 8344706\n@@ -87,1 +87,1 @@\n-                         \"Test.java:2:51: compiler.err.expected4: class, interface, enum, record\",\n+                         \"Test.java:2:51: compiler.err.class.method.or.field.expected\",\n@@ -98,1 +98,1 @@\n-                         \"Test.java:2:39: compiler.err.expected4: class, interface, enum, record\",\n+                         \"Test.java:2:39: compiler.err.class.method.or.field.expected\",\n","filename":"test\/langtools\/tools\/javac\/attr\/AttrRecoveryTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+compiler.warn.is.preview                                # difficult to produce reliably despite future changes to java.base\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ options: --release 15\n@@ -27,1 +26,3 @@\n-int Expected3;\n+public class Expected3 {\n+    public void test(int i {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/Expected3.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+\/\/ options: --release 24\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IllegalStartOfStmt.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,2 @@\n-\/\/ key: compiler.warn.preview.feature.use.plural\n-\/\/ key: compiler.warn.is.preview\n-\/\/ options: -source ${jdk.version} --enable-preview -Xlint:preview\n+\/\/ key: compiler.err.feature.not.supported.in.source.plural\n+\/\/ options: --release 24\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitClass.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n- \/\/ key: compiler.note.preview.filename\n- \/\/ key: compiler.note.preview.recompile\n- \/\/ options: -source ${jdk.version} --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitClassBad-Filename.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n- \/\/ key: compiler.note.preview.filename\n- \/\/ key: compiler.note.preview.recompile\n- \/\/ options: -source ${jdk.version} --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitClassHasPackage.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n- \/\/ key: compiler.note.preview.filename\n- \/\/ key: compiler.note.preview.recompile\n- \/\/ options: -source ${jdk.version} --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitClassNoMain.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,1 @@\n- * @enablePreview\n- * @bug 8304400\n+ * @bug 8304400 8344706\n@@ -101,1 +100,1 @@\n-        var run = Run.of(hi, List.of(\"--enable-preview\"), List.of());\n+        var run = Run.of(hi, List.of(), List.of());\n","filename":"test\/langtools\/tools\/javac\/launcher\/BasicSourceLauncherTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8192920 8204588 8246774 8248843 8268869 8235876 8328339 8335896\n+ * @bug 8192920 8204588 8246774 8248843 8268869 8235876 8328339 8335896 8344706\n@@ -286,0 +286,40 @@\n+\n+    @Test\n+    public void testMainNoParams(Path base) throws IOException {\n+        tb.writeJavaFiles(base,\n+            \"package hello;\\n\" +\n+            \"import java.util.Arrays;\\n\" +\n+            \"class World {\\n\" +\n+            \"    public static void main(String... args) {\\n\" +\n+            \"        System.out.println(\\\"Hello World! \\\" + Arrays.toString(args));\\n\" +\n+            \"    }\\n\" +\n+            \"}\");\n+        testSuccess(base.resolve(\"hello\").resolve(\"World.java\"), \"Hello World! [1, 2, 3]\\n\");\n+    }\n+\n+    @Test\n+    public void testMainNotPublic(Path base) throws IOException {\n+        tb.writeJavaFiles(base,\n+            \"package hello;\\n\" +\n+            \"import java.util.Arrays;\\n\" +\n+            \"class World {\\n\" +\n+            \"    static void main(String... args) {\\n\" +\n+            \"        System.out.println(\\\"Hello World! \\\" + Arrays.toString(args));\\n\" +\n+            \"    }\\n\" +\n+            \"}\");\n+        testSuccess(base.resolve(\"hello\").resolve(\"World.java\"), \"Hello World! [1, 2, 3]\\n\");\n+    }\n+\n+    @Test\n+    public void testMainNotStatic(Path base) throws IOException {\n+        tb.writeJavaFiles(base,\n+            \"package hello;\\n\" +\n+            \"import java.util.Arrays;\\n\" +\n+            \"class World {\\n\" +\n+            \"    public void main(String... args) {\\n\" +\n+            \"        System.out.println(\\\"Hello World! \\\" + Arrays.toString(args));\\n\" +\n+            \"    }\\n\" +\n+            \"}\");\n+        testSuccess(base.resolve(\"hello\").resolve(\"World.java\"), \"Hello World! [1, 2, 3]\\n\");\n+    }\n+\n@@ -305,1 +345,1 @@\n-            file + \":1: error: class, interface, enum, or record expected\\n\" +\n+            file + \":1: error: class, interface, annotation type, enum, record, method or field expected\\n\" +\n@@ -519,1 +559,1 @@\n-            file + \":1: error: class, interface, enum, or record expected\\n\" +\n+            file + \":1: error: class, interface, annotation type, enum, record, method or field expected\\n\" +\n@@ -570,1 +610,1 @@\n-                \"class BadParams { public static void main() { } }\");\n+                \"class BadParams { public static void main(int n) { } }\");\n@@ -575,16 +615,0 @@\n-    @Test\n-    public void testMainNotPublic(Path base) throws IOException {\n-        tb.writeJavaFiles(base,\n-                \"class NotPublic { static void main(String... args) { } }\");\n-        testError(base.resolve(\"NotPublic.java\"), \"\",\n-                \"error: can't find main(String[]) method in class: NotPublic\");\n-    }\n-\n-    @Test\n-    public void testMainNotStatic(Path base) throws IOException {\n-        tb.writeJavaFiles(base,\n-                \"class NotStatic { public void main(String... args) { } }\");\n-        testError(base.resolve(\"NotStatic.java\"), \"\",\n-                \"error: can't find main(String[]) method in class: NotStatic\");\n-    }\n-\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":45,"deletions":21,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8310326 8312093 8312204 8315452 8337976 8324859\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8310326 8312093 8312204 8315452 8337976 8324859 8344706\n@@ -1013,1 +1013,1 @@\n-        String expectedErrors = \"Test.java:1:1: compiler.err.expected4: class, interface, enum, record\\n\" +\n+        String expectedErrors = \"Test.java:1:1: compiler.err.class.method.or.field.expected\\n\" +\n@@ -2307,1 +2307,1 @@\n-        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, coll, List.of(\"--enable-preview\", \"--source\", System.getProperty(\"java.specification.version\")),\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, coll, null,\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-SingleCommaAnnotationValueFail.java:11:14: compiler.err.expected4: class, interface, enum, record\n+SingleCommaAnnotationValueFail.java:11:14: compiler.err.class.method.or.field.expected\n","filename":"test\/langtools\/tools\/javac\/parser\/SingleCommaAnnotationValueFail.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8246353 8273257 8294550 8347562\n+ * @bug 8246353 8273257 8294550 8347562 8344706\n@@ -784,1 +784,1 @@\n-            assertFail(\"compiler.err.expected4\", s);\n+            assertFail(\"compiler.err.class.method.or.field.expected\", s);\n@@ -988,1 +988,1 @@\n-            assertFail(\"compiler.err.expected4\", s);\n+            assertFail(\"compiler.err.class.method.or.field.expected\", s);\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCClassDecl;\n@@ -82,0 +83,2 @@\n+import com.sun.tools.javac.tree.JCTree.JCImport;\n+import com.sun.tools.javac.tree.JCTree.JCImportBase;\n@@ -90,0 +93,1 @@\n+import java.util.stream.Stream;\n@@ -105,1 +109,1 @@\n- * @bug 6919889\n+ * @bug 6919889 8344706\n@@ -345,0 +349,1 @@\n+        private boolean compactSourceFile;\n@@ -349,0 +354,7 @@\n+            List<JCTree> nonImports = tree.defs\n+                                          .stream()\n+                                          .filter(t -> !(t instanceof JCImportBase))\n+                                          .toList();\n+            compactSourceFile = nonImports.size() == 1 &&\n+                                nonImports.get(0) instanceof JCClassDecl classDecl &&\n+                                tree.endPositions.getEndPos(classDecl) == NOPOS;\n@@ -372,1 +384,6 @@\n-                    check(\"end != NOPOS\", encl, self, self.end != NOPOS);\n+                    boolean topLevelCompactClass = compactSourceFile &&\n+                                                   encl.tree == null &&\n+                                                   self.tag == CLASSDEF;\n+                    if (!topLevelCompactClass) {\n+                        check(\"end != NOPOS\", encl, self, self.end != NOPOS);\n+                    }\n@@ -401,1 +418,3 @@\n-                    check(\"pos <= end\", encl, self, self.pos <= self.end);\n+                    if (!topLevelCompactClass) {\n+                        check(\"pos <= end\", encl, self, self.pos <= self.end);\n+                    }\n@@ -406,1 +425,1 @@\n-                         ) ) {\n+                         ) && !compactSourceFile) {\n","filename":"test\/langtools\/tools\/javac\/tree\/TreePosTest.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"}]}