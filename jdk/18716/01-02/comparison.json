{"files":[{"patch":"@@ -16193,1 +16193,1 @@\n-\/\/ emitted just above the TailCall and it will reset rbp to the caller state.\n+\/\/ emitted just above the TailCall and it will reset rfp to the caller state.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -652,0 +652,1 @@\n+\/\/ Class for all non-special integer registers\n@@ -656,0 +657,1 @@\n+\/\/ Class for all non-special long integer registers\n@@ -664,0 +666,1 @@\n+\/\/ Class for all non_special pointer registers\n@@ -668,0 +671,5 @@\n+\/\/ Class for all non_special pointer registers (excluding fp)\n+reg_class no_special_no_fp_ptr_reg %{\n+  return _NO_SPECIAL_NO_FP_PTR_REG_mask;\n+%}\n+\n@@ -1040,0 +1048,1 @@\n+extern RegMask _NO_SPECIAL_NO_FP_PTR_REG_mask;\n@@ -1102,0 +1111,1 @@\n+RegMask _NO_SPECIAL_NO_FP_PTR_REG_mask;\n@@ -1136,0 +1146,3 @@\n+\n+  _NO_SPECIAL_NO_FP_PTR_REG_mask = _NO_SPECIAL_PTR_REG_mask;\n+  _NO_SPECIAL_NO_FP_PTR_REG_mask.Remove(OptoReg::as_OptoReg(x8->as_VMReg()));\n@@ -3223,0 +3236,12 @@\n+\/\/ This operand is not allowed to use fp even if\n+\/\/ fp is not used to hold the frame pointer.\n+operand iRegPNoSpNoFp()\n+%{\n+  constraint(ALLOC_IN_RC(no_special_no_fp_ptr_reg));\n+  match(RegP);\n+  match(iRegPNoSp);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -10486,1 +10511,3 @@\n-instruct TailCalljmpInd(iRegPNoSp jump_target, inline_cache_RegP method_oop)\n+\/\/ Don't use fp for 'jump_target' because a MachEpilogNode has already been\n+\/\/ emitted just above the TailCall and it will reset fp to the caller state.\n+instruct TailCalljmpInd(iRegPNoSpNoFp jump_target, inline_cache_RegP method_oop)\n@@ -10499,1 +10526,1 @@\n-instruct TailjmpInd(iRegPNoSp jump_target, iRegP_R10 ex_oop)\n+instruct TailjmpInd(iRegPNoSpNoFp jump_target, iRegP_R10 ex_oop)\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -13601,1 +13601,1 @@\n-\/\/ emitted just above the TailCall and it will reset rbp to the caller state.\n+\/\/ emitted just above the TailCall and it will reset ebp to the caller state.\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}