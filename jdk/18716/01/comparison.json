{"files":[{"patch":"@@ -697,0 +697,5 @@\n+\/\/ Class for all non_special pointer registers (excluding rfp)\n+reg_class no_special_no_rfp_ptr_reg %{\n+  return _NO_SPECIAL_NO_RFP_PTR_REG_mask;\n+%}\n+\n@@ -1128,0 +1133,1 @@\n+extern RegMask _NO_SPECIAL_NO_RFP_PTR_REG_mask;\n@@ -1216,0 +1222,1 @@\n+  RegMask _NO_SPECIAL_NO_RFP_PTR_REG_mask;\n@@ -1252,0 +1259,3 @@\n+\n+    _NO_SPECIAL_NO_RFP_PTR_REG_mask = _NO_SPECIAL_PTR_REG_mask;\n+    _NO_SPECIAL_NO_RFP_PTR_REG_mask.Remove(OptoReg::as_OptoReg(r29->as_VMReg()));\n@@ -4773,0 +4783,12 @@\n+\/\/ This operand is not allowed to use rfp even if\n+\/\/ rfp is not used to hold the frame pointer.\n+operand iRegPNoSpNoRfp()\n+%{\n+  constraint(ALLOC_IN_RC(no_special_no_rfp_ptr_reg));\n+  match(RegP);\n+  match(iRegPNoSp);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -16170,1 +16192,3 @@\n-instruct TailCalljmpInd(iRegPNoSp jump_target, inline_cache_RegP method_ptr)\n+\/\/ Don't use rfp for 'jump_target' because a MachEpilogNode has already been\n+\/\/ emitted just above the TailCall and it will reset rbp to the caller state.\n+instruct TailCalljmpInd(iRegPNoSpNoRfp jump_target, inline_cache_RegP method_ptr)\n@@ -16183,1 +16207,1 @@\n-instruct TailjmpInd(iRegPNoSp jump_target, iRegP_R0 ex_oop)\n+instruct TailjmpInd(iRegPNoSpNoRfp jump_target, iRegP_R0 ex_oop)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -13600,0 +13600,2 @@\n+\/\/ Don't use ebp for 'jump_target' because a MachEpilogNode has already been\n+\/\/ emitted just above the TailCall and it will reset rbp to the caller state.\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12470,0 +12470,2 @@\n+\/\/ Don't use rbp for 'jump_target' because a MachEpilogNode has already been\n+\/\/ emitted just above the TailCall and it will reset rbp to the caller state.\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @bug 8329258\n+ * @summary Test correct execution of the tail call at the end of the arraycopy stub.\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -Xbatch -XX:-TieredCompilation\n+ *                   -XX:+StressGCM -XX:+StressLCM\n+ *                   -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,*::test\n+ *                   compiler.arraycopy.TestTailCallInArrayCopyStub\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -Xbatch -XX:-TieredCompilation\n+ *                   -XX:+StressGCM -XX:+StressLCM -XX:StressSeed=75451718\n+ *                   -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,*::test\n+ *                   compiler.arraycopy.TestTailCallInArrayCopyStub\n+ *\/\n+\n+package compiler.arraycopy;\n+\n+public class TestTailCallInArrayCopyStub {\n+\n+    public static void test(byte[] src, byte[] dst) {\n+        try {\n+            System.arraycopy(src, -1, dst, 0, src.length);\n+        } catch (Exception e) {\n+            \/\/ Expected\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        byte[] array = new byte[5];\n+        for (int i = 0; i < 10_000; ++i) {\n+            test(array, array);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestTailCallInArrayCopyStub.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}