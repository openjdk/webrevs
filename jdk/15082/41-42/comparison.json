{"files":[{"patch":"@@ -2434,1 +2434,1 @@\n-    ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(), \n+    ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-  \n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -899,1 +899,1 @@\n-  ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(), \n+  ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(),\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,3 +73,3 @@\n-    _concurrent_dedup_thread_cpu_time =\n-        PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"conc_dedup\",\n-                                        PerfData::U_Ticks, CHECK);\n+    CPUTimeCounters* instance = CPUTimeCounters::get_instance();\n+    instance->create_counter(CPUTimeGroups::conc_dedup); \n+    _concurrent_dedup_thread_cpu_time = instance->get_counter(CPUTimeGroups::conc_dedup);\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,4 @@\n+    case vm:\n+      return \"vm\";\n+    case conc_dedup:\n+      return \"conc_dedup\";\n@@ -110,1 +114,0 @@\n-    assert(_counter != nullptr, \"ASDF\");\n@@ -114,1 +117,0 @@\n-      assert(_gc_counters != nullptr, \"asdf\");\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+    vm,\n+    conc_dedup,\n@@ -54,1 +56,1 @@\n-  \/\/ An array of PerfCounters which correspond to the various counters we want \n+  \/\/ An array of PerfCounters which correspond to the various counters we want\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-  CPUTimeCounters::initialize();  \n+  CPUTimeCounters::initialize();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,3 +142,3 @@\n-      _perf_vm_thread_cpu_time =\n-                   PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"vm\",\n-                                                   PerfData::U_Ticks, CHECK);\n+      CPUTimeCounters* instance = CPUTimeCounters::get_instance();\n+      instance->create_counter(CPUTimeGroups::vm); \n+      _perf_vm_thread_cpu_time = instance->get_counter(CPUTimeGroups::vm);\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,5 @@\n+static void stop_service_thread(G1ServiceThread* thread) {\n+  ThreadInVMfromNative tvn(JavaThread::current());\n+  thread->stop();\n+}\n+\n@@ -55,1 +60,0 @@\n-  ThreadInVMfromNative tvn(JavaThread::current());\n@@ -64,1 +68,1 @@\n-  st->stop();\n+  stop_service_thread(st);\n@@ -77,1 +81,0 @@\n-  ThreadInVMfromNative tvn(JavaThread::current());\n@@ -87,1 +90,1 @@\n-  st->stop();\n+  stop_service_thread(st);\n@@ -95,1 +98,0 @@\n-  ThreadInVMfromNative tvn(JavaThread::current());\n@@ -106,1 +108,1 @@\n-  st->stop();\n+  stop_service_thread(st);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1ServiceThread.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"}]}