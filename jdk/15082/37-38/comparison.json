{"files":[{"patch":"@@ -1237,0 +1237,1 @@\n+  _cpu_time_counters(new CPUTimeCounters()),\n@@ -1518,0 +1519,5 @@\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_parallel_workers);\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_conc_mark);\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_conc_refine);\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_service);\n+\n@@ -2427,1 +2433,1 @@\n-    ThreadTotalCPUTimeClosure tttc(_perf_parallel_worker_threads_cpu_time, true);\n+    ThreadTotalCPUTimeClosure tttc(cpu_time_counters(), CPUTimeGroups::gc_parallel_workers);\n@@ -2434,1 +2440,1 @@\n-  CollectedHeap::publish_total_cpu_time();\n+  _cpu_time_counters->publish_total_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -254,0 +255,3 @@\n+  \/\/ Counters to keep track of CPU time spent by various sources.\n+  CPUTimeCounters* _cpu_time_counters;\n+\n@@ -565,0 +569,4 @@\n+  CPUTimeCounters* cpu_time_counters() {\n+    return _cpu_time_counters;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -465,8 +465,0 @@\n-\n-  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n-    EXCEPTION_MARK;\n-\n-    _g1_concurrent_mark_threads_cpu_time =\n-        PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"gc_conc_mark\",\n-                                        PerfData::U_Ticks, CHECK);\n-  }\n@@ -2097,1 +2089,2 @@\n-  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_mark_threads_cpu_time, true);\n+  CPUTimeCounters* counters = _g1h->cpu_time_counters();\n+  ThreadTotalCPUTimeClosure tttc(counters, CPUTimeGroups::gc_conc_mark);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -367,3 +367,0 @@\n-  \/\/ Perf data for CPU time consumed by concurrent mark threads.\n-  PerfCounter* _g1_concurrent_mark_threads_cpu_time;\n-\n@@ -455,1 +452,1 @@\n-  \/\/ Update the perf data counter _g1_concurrent_mark_threads_cpu_time.\n+  \/\/ Update the perf data counter for concurrent mark.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -116,7 +116,0 @@\n-  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n-    EXCEPTION_MARK;\n-    _g1_concurrent_refine_threads_cpu_time =\n-        PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"gc_conc_refine\",\n-                                        PerfData::U_Ticks, CHECK_JNI_ERR);\n-  }\n-\n@@ -172,1 +165,2 @@\n-  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_refine_threads_cpu_time, true);\n+  CPUTimeCounters* counters = G1CollectedHeap::heap()->cpu_time_counters();\n+  ThreadTotalCPUTimeClosure tttc(counters, CPUTimeGroups::gc_conc_refine);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,3 +50,0 @@\n-  \/\/ Perf data for CPU time consumed by concurrent refine threads.\n-  PerfCounter* _g1_concurrent_refine_threads_cpu_time;\n-\n@@ -79,1 +76,1 @@\n-  \/\/ Update the perf data counter _g1_concurrent_refine_threads_cpu_time.\n+  \/\/ Update the perf data counter for concurrent refine.\n@@ -229,2 +226,1 @@\n-  \/\/ Update the perf data counter\n-  \/\/ G1ConcurrentRefineThreadControl::_g1_concurrent_refine_threads_cpu_time\n+  \/\/ Update the perf data counter for concurrent refine.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/g1\/g1CollectedHeap.hpp\"\n@@ -44,2 +45,1 @@\n-    _task_queue(),\n-    _g1_service_threads_cpu_time(nullptr) {\n+    _task_queue() {\n@@ -47,6 +47,0 @@\n-  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n-    EXCEPTION_MARK;\n-    _g1_service_threads_cpu_time =\n-        PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"gc_service\",\n-                                        PerfData::U_Ticks, CHECK);\n-  }\n@@ -141,1 +135,2 @@\n-    ThreadTotalCPUTimeClosure tttc(_g1_service_threads_cpu_time, true);\n+    CPUTimeCounters* counters = G1CollectedHeap::heap()->cpu_time_counters();\n+    ThreadTotalCPUTimeClosure tttc(counters, CPUTimeGroups::gc_service);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -111,3 +111,0 @@\n-  \/\/ Perf data for CPU time consumed by G1 service thread.\n-  PerfCounter* _g1_service_threads_cpu_time;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -130,0 +130,3 @@\n+  \/\/ Create CPU time counter\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_parallel_workers);\n+\n@@ -895,1 +898,1 @@\n-  ThreadTotalCPUTimeClosure tttc(_perf_parallel_worker_threads_cpu_time, true);\n+  ThreadTotalCPUTimeClosure tttc(_cpu_time_counters, CPUTimeGroups::gc_parallel_workers);\n@@ -901,1 +904,1 @@\n-  CollectedHeap::publish_total_cpu_time();\n+  _cpu_time_counters->publish_total_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -94,0 +95,1 @@\n+  CPUTimeCounters* _cpu_time_counters;\n@@ -122,0 +124,1 @@\n+    _cpu_time_counters(new CPUTimeCounters()),\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -162,17 +162,0 @@\n-void CollectedHeap::inc_total_cpu_time(jlong diff) {\n-  Atomic::add(&_total_cpu_time_diff, diff);\n-}\n-\n-void CollectedHeap::publish_total_cpu_time() {\n-  \/\/ Ensure that we are only incrementing atomically by using Atomic::cmpxchg\n-  \/\/ to set the value to zero after we obtain the new CPU time difference.\n-  jlong old_value;\n-  jlong fetched_value = Atomic::load(&_total_cpu_time_diff);\n-  jlong new_value = 0;\n-  do {\n-    old_value = fetched_value;\n-    fetched_value = Atomic::cmpxchg(&_total_cpu_time_diff, old_value, new_value);\n-  } while (old_value != fetched_value);\n-  _total_cpu_time->inc(fetched_value);\n-}\n-\n@@ -296,11 +279,0 @@\n-\n-    if (os::is_thread_cpu_time_supported()) {\n-      _total_cpu_time =\n-                  PerfDataManager::create_counter(SUN_THREADS, \"total_gc_cpu_time\",\n-                                                  PerfData::U_Ticks, CHECK);\n-      _total_cpu_time_diff = 0;\n-\n-      _perf_parallel_worker_threads_cpu_time =\n-                  PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"gc_parallel_workers\",\n-                                                  PerfData::U_Ticks, CHECK);\n-    }\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -144,14 +144,0 @@\n-  \/\/ Perf counter to track total CPU time across all threads. Defined here in\n-  \/\/ order to be reused for all collectors.\n-  PerfCounter* _total_cpu_time;\n-\n-  \/\/ A long which atomically tracks how much CPU time has been spent doing GC\n-  \/\/ since the last time we called `publish_total_cpu_time()`.\n-  \/\/ It is incremented using Atomic::add() to prevent race conditions, and\n-  \/\/ is added to `_total_cpu_time` at the end of GC.\n-  volatile jlong _total_cpu_time_diff;\n-\n-  \/\/ Perf counter for CPU time of parallel GC threads. Defined here in order to\n-  \/\/ be reused for all collectors.\n-  PerfCounter* _perf_parallel_worker_threads_cpu_time;\n-\n@@ -489,4 +475,0 @@\n-  \/\/ Methods to modify and update counter for total CPU time spent doing GC.\n-  void inc_total_cpu_time(jlong diff);\n-  void publish_total_cpu_time();\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -537,17 +537,0 @@\n-\n-ThreadTotalCPUTimeClosure::~ThreadTotalCPUTimeClosure() {\n-    jlong net_cpu_time = _total - _counter->get_value();\n-    _counter->inc(net_cpu_time);\n-    if (_is_gc_threads) {\n-      Universe::heap()->inc_total_cpu_time(net_cpu_time);\n-    }\n-}\n-\n-void ThreadTotalCPUTimeClosure::do_thread(Thread* thread) {\n-    \/\/ The default code path (fast_thread_cpu_time()) asserts that\n-    \/\/ pthread_getcpuclockid() and clock_gettime() must return 0. Thus caller\n-    \/\/ must ensure the thread exists and has not terminated.\n-    assert(os::is_thread_cpu_time_supported(), \"os must support cpu time\");\n-    _total += os::thread_cpu_time(thread);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -871,17 +871,0 @@\n-\/\/ Class to compute the total CPU time for a set of threads, then update an\n-\/\/ hsperfdata counter.\n-class ThreadTotalCPUTimeClosure: public ThreadClosure {\n- private:\n-  jlong _total;\n-  PerfCounter* _counter;\n-  bool _is_gc_threads;\n-\n- public:\n-  ThreadTotalCPUTimeClosure(PerfCounter* counter, bool is_gc_threads = false) :\n-      _total(0), _counter(counter), _is_gc_threads(is_gc_threads) {}\n-\n-  ~ThreadTotalCPUTimeClosure();\n-\n-  virtual void do_thread(Thread* thread);\n-};\n-\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}