{"files":[{"patch":"@@ -2329,5 +2329,9 @@\n-  ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n-  \/\/ Currently parallel worker threads never terminate (JDK-8081682), so it is\n-  \/\/ safe for VMThread to read their CPU times. However, if JDK-8087340 is\n-  \/\/ resolved so they terminate, we should rethink if it is still safe.\n-  workers()->threads_do(&tttc);\n+  \/\/ Ensure ThreadTotalCPUTimeClosure destructor is called before publishing gc\n+  \/\/ time.\n+  {\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n+    \/\/ Currently parallel worker threads never terminate (JDK-8081682), so it is\n+    \/\/ safe for VMThread to read their CPU times. However, if JDK-8087340 is\n+    \/\/ resolved so they terminate, we should rethink if it is still safe.\n+    workers()->threads_do(&tttc);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -899,5 +899,10 @@\n-  ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n-  \/\/ Currently parallel worker threads in GCTaskManager never terminate, so it\n-  \/\/ is safe for VMThread to read their CPU times. If upstream changes this\n-  \/\/ behavior, we should rethink if it is still safe.\n-  gc_threads_do(&tttc);\n+\n+  \/\/ Ensure ThreadTotalCPUTimeClosure destructor is called before publishing gc\n+  \/\/ time.\n+  {\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n+    \/\/ Currently parallel worker threads in GCTaskManager never terminate, so it\n+    \/\/ is safe for VMThread to read their CPU times. If upstream changes this\n+    \/\/ behavior, we should rethink if it is still safe.\n+    gc_threads_do(&tttc);\n+  }\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -83,2 +83,4 @@\n-    _instance = new CPUTimeCounters();\n-    create_counter(SUN_THREADS, CPUTimeGroups::CPUTimeType::gc_total);\n+    if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+      _instance = new CPUTimeCounters();\n+      create_counter(SUN_THREADS, CPUTimeGroups::CPUTimeType::gc_total);\n+    }\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}