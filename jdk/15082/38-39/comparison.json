{"files":[{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/cpuTimeCounters.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+#include \"runtime\/os.hpp\"\n+\n+const char* CPUTimeGroups::to_string(CPUTimeType val) {\n+  switch (val) {\n+    case total:\n+      return \"total_gc_cpu_time\";\n+    case gc_parallel_workers:\n+      return \"gc_parallel_workers\";\n+    case gc_conc_mark:\n+      return \"gc_conc_mark\";\n+    case gc_conc_refine:\n+      return \"gc_conc_refine\";\n+    case gc_service:\n+      return \"gc_service\";\n+    case COUNT:\n+      return \"Illegal counter\";\n+  };\n+  ShouldNotReachHere();\n+}\n+\n+bool CPUTimeGroups::is_gc_counter(CPUTimeType val) {\n+  switch (val) {\n+    case CPUTimeType::gc_parallel_workers:\n+      return true;\n+    case CPUTimeType::gc_conc_mark:\n+      return true;\n+    case CPUTimeType::gc_conc_refine:\n+      return true;\n+    case CPUTimeType::gc_service:\n+      return true;\n+    default:\n+      return false;\n+  }\n+  ShouldNotReachHere();\n+}\n+\n+CPUTimeCounters::CPUTimeCounters() :\n+    _cpu_time_counters{nullptr},\n+    _total_cpu_time_diff(0) {\n+\n+  create_counter(SUN_THREADS, CPUTimeGroups::total);\n+}\n+\n+void CPUTimeCounters::inc_total_cpu_time(jlong diff) {\n+  Atomic::add(&_total_cpu_time_diff, diff);\n+}\n+\n+void CPUTimeCounters::publish_total_cpu_time() {\n+  \/\/ Ensure that we are only incrementing atomically by using Atomic::cmpxchg\n+  \/\/ to set the value to zero after we obtain the new CPU time difference.\n+  jlong old_value;\n+  jlong fetched_value = Atomic::load(&_total_cpu_time_diff);\n+  jlong new_value = 0;\n+  do {\n+    old_value = fetched_value;\n+    fetched_value = Atomic::cmpxchg(&_total_cpu_time_diff, old_value, new_value);\n+  } while (old_value != fetched_value);\n+  get_counter(CPUTimeGroups::total)->inc(fetched_value);\n+}\n+\n+void CPUTimeCounters::create_counter(CounterNS ns, CPUTimeGroups::CPUTimeType name) {\n+  if (UsePerfData) {\n+    EXCEPTION_MARK;\n+    if (os::is_thread_cpu_time_supported()) {\n+      _cpu_time_counters[name] =\n+                  PerfDataManager::create_counter(ns, CPUTimeGroups::to_string(name),\n+                                                  PerfData::U_Ticks, CHECK);\n+    }\n+  }\n+}\n+\n+void CPUTimeCounters::create_counter(CPUTimeGroups::CPUTimeType group) {\n+  create_counter(SUN_THREADS_CPUTIME, group);\n+}\n+\n+PerfCounter* CPUTimeCounters::get_counter(CPUTimeGroups::CPUTimeType name) {\n+  return _cpu_time_counters[name];\n+}\n+\n+ThreadTotalCPUTimeClosure::~ThreadTotalCPUTimeClosure() {\n+    jlong net_cpu_time = _total - _counter->get_value();\n+    _counter->inc(net_cpu_time);\n+    if (_update_gc_counters) {\n+      _gc_counters->inc_total_cpu_time(net_cpu_time);\n+    }\n+}\n+\n+void ThreadTotalCPUTimeClosure::do_thread(Thread* thread) {\n+    \/\/ The default code path (fast_thread_cpu_time()) asserts that\n+    \/\/ pthread_getcpuclockid() and clock_gettime() must return 0. Thus caller\n+    \/\/ must ensure the thread exists and has not terminated.\n+    assert(os::is_thread_cpu_time_supported(), \"os must support cpu time\");\n+    _total += os::thread_cpu_time(thread);\n+}\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.cpp","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+#ifndef SHARE_RUNTIME_CPUTIMECOUNTERS_HPP\n+#define SHARE_RUNTIME_CPUTIMECOUNTERS_HPP\n+\n+#include \"runtime\/perfData.hpp\"\n+#include \"runtime\/perfDataTypes.hpp\"\n+\n+class CPUTimeGroups : public AllStatic {\n+public:\n+  enum CPUTimeType {\n+    total,\n+    gc_parallel_workers,\n+    gc_conc_mark,\n+    gc_conc_refine,\n+    gc_service,\n+    COUNT,\n+  };\n+\n+  static const char* to_string(CPUTimeType val);\n+  static bool is_gc_counter(CPUTimeType val);\n+};\n+\n+class CPUTimeCounters: public CHeapObj<mtGC> {\n+private:\n+  \/\/ Perf counter to track total CPU time across all threads. Defined here in\n+  \/\/ order to be reused for all collectors.\n+  PerfCounter* _cpu_time_counters[CPUTimeGroups::COUNT];\n+\n+  \/\/ A long which atomically tracks how much CPU time has been spent doing GC\n+  \/\/ since the last time we called `publish_total_cpu_time()`.\n+  \/\/ It is incremented using Atomic::add() to prevent race conditions, and\n+  \/\/ is added to the `total` CPUTimeGroup at the end of GC.\n+  volatile jlong _total_cpu_time_diff;\n+  void create_counter(CounterNS ns, CPUTimeGroups::CPUTimeType name);\n+\n+public:\n+  CPUTimeCounters();\n+\n+  ~CPUTimeCounters();\n+\n+  \/\/ Methods to modify and update counter for total CPU time spent doing GC.\n+  void inc_total_cpu_time(jlong diff);\n+  void publish_total_cpu_time();\n+\n+  void create_counter(CPUTimeGroups::CPUTimeType name);\n+  PerfCounter* get_counter(CPUTimeGroups::CPUTimeType name);\n+};\n+\n+\/\/ Class to compute the total CPU time for a set of threads, then update an\n+\/\/ hsperfdata counter.\n+class ThreadTotalCPUTimeClosure: public ThreadClosure {\n+ private:\n+  jlong _total;\n+  PerfCounter* _counter;\n+  CPUTimeCounters* _gc_counters;\n+  bool _update_gc_counters;\n+\n+ public:\n+  ThreadTotalCPUTimeClosure(PerfCounter* counter) :\n+      _total(0), _counter(counter), _gc_counters(nullptr), _update_gc_counters(false) {}\n+\n+  ThreadTotalCPUTimeClosure(CPUTimeCounters* counters, CPUTimeGroups::CPUTimeType name) :\n+      _total(0), _counter(counters->get_counter(name)), _gc_counters(counters),\n+      _update_gc_counters(CPUTimeGroups::is_gc_counter(name)) {}\n+\n+  ~ThreadTotalCPUTimeClosure();\n+\n+  virtual void do_thread(Thread* thread);\n+};\n+\n+#endif \/\/ SHARE_RUNTIME_CPUTIMECOUNTERS_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}