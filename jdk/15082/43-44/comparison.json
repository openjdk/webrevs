{"files":[{"patch":"@@ -107,0 +107,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -1519,5 +1520,4 @@\n-  assert(instance != nullptr, \"no instance found\");\n-  instance->create_counter(CPUTimeGroups::gc_parallel_workers);\n-  instance->create_counter(CPUTimeGroups::gc_conc_mark);\n-  instance->create_counter(CPUTimeGroups::gc_conc_refine);\n-  instance->create_counter(CPUTimeGroups::gc_service);\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_conc_mark);\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_conc_refine);\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_service);\n@@ -2434,2 +2434,1 @@\n-    ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(),\n-                                   CPUTimeGroups::gc_parallel_workers);\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n@@ -2442,1 +2441,1 @@\n-  CPUTimeCounters::get_instance()->publish_total_cpu_time();\n+  CPUTimeCounters::get_instance()->publish_gc_total_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-#include \"runtime\/cpuTimeCounters.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -349,1 +350,1 @@\n-  ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(), CPUTimeGroups::gc_conc_mark);\n+  ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_conc_mark);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -187,2 +187,1 @@\n-    CPUTimeCounters* counters = CPUTimeCounters::get_instance();\n-    ThreadTotalCPUTimeClosure tttc(counters, CPUTimeGroups::gc_conc_refine);\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_conc_refine);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  update_thread_cpu_time(task);\n+  update_thread_cpu_time();\n@@ -158,1 +158,1 @@\n-void G1ServiceThread::update_thread_cpu_time(G1ServiceTask* task) {\n+void G1ServiceThread::update_thread_cpu_time() {\n@@ -160,2 +160,2 @@\n-    ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(), CPUTimeGroups::gc_service);\n-    tttc.do_thread(task->_service_thread);\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_service);\n+    tttc.do_thread(this);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-  void update_thread_cpu_time(G1ServiceTask* task);\n+  void update_thread_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-  CPUTimeCounters::get_instance()->create_counter(CPUTimeGroups::gc_parallel_workers);\n+  CPUTimeCounters::get_instance()->create_counter(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n@@ -899,2 +899,1 @@\n-  ThreadTotalCPUTimeClosure tttc(CPUTimeCounters::get_instance(),\n-                                 CPUTimeGroups::gc_parallel_workers);\n+  ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n@@ -906,1 +905,1 @@\n-  CPUTimeCounters::get_instance()->publish_total_cpu_time();\n+  CPUTimeCounters::get_instance()->publish_gc_total_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-PerfCounter* StringDedup::Processor::_concurrent_dedup_thread_cpu_time = nullptr;\n@@ -73,3 +72,1 @@\n-    CPUTimeCounters* instance = CPUTimeCounters::get_instance();\n-    instance->create_counter(CPUTimeGroups::conc_dedup);\n-    _concurrent_dedup_thread_cpu_time = instance->get_counter(CPUTimeGroups::conc_dedup);\n+    CPUTimeCounters::get_instance()->create_counter(CPUTimeGroups::CPUTimeType::conc_dedup);\n@@ -201,1 +198,1 @@\n-      ThreadTotalCPUTimeClosure tttc(_concurrent_dedup_thread_cpu_time);\n+      ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::conc_dedup);\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,3 +51,0 @@\n-  \/\/ Perf data for CPU time consumed by the string dedup thread.\n-  static PerfCounter* _concurrent_dedup_thread_cpu_time;\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -784,0 +785,3 @@\n+  \/\/ Initialize CPUTimeCounters object, which must be done before creation of the heap.\n+  CPUTimeCounters::initialize();\n+\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    case total:\n+    case CPUTimeType::gc_total:\n@@ -35,1 +35,1 @@\n-    case gc_parallel_workers:\n+    case CPUTimeType::gc_parallel_workers:\n@@ -37,1 +37,1 @@\n-    case gc_conc_mark:\n+    case CPUTimeType::gc_conc_mark:\n@@ -39,1 +39,1 @@\n-    case gc_conc_refine:\n+    case CPUTimeType::gc_conc_refine:\n@@ -41,1 +41,1 @@\n-    case gc_service:\n+    case CPUTimeType::gc_service:\n@@ -43,1 +43,1 @@\n-    case vm:\n+    case CPUTimeType::vm:\n@@ -45,1 +45,1 @@\n-    case conc_dedup:\n+    case CPUTimeType::conc_dedup:\n@@ -47,2 +47,2 @@\n-    case COUNT:\n-      return \"Illegal counter\";\n+    default:\n+      ShouldNotReachHere();\n@@ -50,1 +50,0 @@\n-  ShouldNotReachHere();\n@@ -69,1 +68,1 @@\n-CPUTimeCounters*         CPUTimeCounters::_instance          = nullptr;\n+CPUTimeCounters* CPUTimeCounters::_instance = nullptr;\n@@ -73,2 +72,2 @@\n-    _total_cpu_time_diff(0) {\n-  create_counter(SUN_THREADS, CPUTimeGroups::total);\n+    _gc_total_cpu_time_diff(0) {\n+  create_counter(SUN_THREADS, CPUTimeGroups::CPUTimeType::gc_total);\n@@ -77,2 +76,2 @@\n-void CPUTimeCounters::inc_total_cpu_time(jlong diff) {\n-  Atomic::add(&_total_cpu_time_diff, diff);\n+void CPUTimeCounters::inc_gc_total_cpu_time(jlong diff) {\n+  Atomic::add(&_gc_total_cpu_time_diff, diff);\n@@ -81,1 +80,1 @@\n-void CPUTimeCounters::publish_total_cpu_time() {\n+void CPUTimeCounters::publish_gc_total_cpu_time() {\n@@ -85,1 +84,1 @@\n-  jlong fetched_value = Atomic::load(&_total_cpu_time_diff);\n+  jlong fetched_value = Atomic::load(&_gc_total_cpu_time_diff);\n@@ -89,1 +88,1 @@\n-    fetched_value = Atomic::cmpxchg(&_total_cpu_time_diff, old_value, new_value);\n+    fetched_value = Atomic::cmpxchg(&_gc_total_cpu_time_diff, old_value, new_value);\n@@ -91,1 +90,1 @@\n-  get_counter(CPUTimeGroups::total)->inc(fetched_value);\n+  get_counter(CPUTimeGroups::CPUTimeType::gc_total)->inc(fetched_value);\n@@ -98,1 +97,1 @@\n-      _cpu_time_counters[name] =\n+      _cpu_time_counters[static_cast<int>(name)] =\n@@ -110,1 +109,1 @@\n-  return _cpu_time_counters[name];\n+  return _cpu_time_counters[static_cast<int>(name)];\n@@ -114,4 +113,6 @@\n-    jlong net_cpu_time = _total - _counter->get_value();\n-    _counter->inc(net_cpu_time);\n-    if (_update_gc_counters) {\n-      _gc_counters->inc_total_cpu_time(net_cpu_time);\n+    CPUTimeCounters* instance = CPUTimeCounters::get_instance();\n+    PerfCounter* counter = instance->get_counter(_name);\n+    jlong net_cpu_time = _gc_total - counter->get_value();\n+    counter->inc(net_cpu_time);\n+    if (CPUTimeGroups::is_gc_counter(_name)) {\n+      instance->inc_gc_total_cpu_time(net_cpu_time);\n@@ -126,1 +127,1 @@\n-    _total += os::thread_cpu_time(thread);\n+    _gc_total += os::thread_cpu_time(thread);\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.cpp","additions":27,"deletions":26,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+\n+#include \"memory\/iterator.hpp\"\n@@ -35,2 +37,2 @@\n-  enum CPUTimeType {\n-    total,\n+  enum class CPUTimeType {\n+    gc_total,\n@@ -52,1 +54,1 @@\n-  \/\/ We want CPUTimeCounters to be a singleton instance accessed by the vm thread.\n+  \/\/ CPUTimeCounters is a singleton instance.\n@@ -58,1 +60,1 @@\n-  PerfCounter* _cpu_time_counters[CPUTimeGroups::COUNT];\n+  PerfCounter* _cpu_time_counters[static_cast<int>(CPUTimeGroups::CPUTimeType::COUNT)];\n@@ -63,2 +65,2 @@\n-  \/\/ is added to the `total` CPUTimeGroup at the end of GC.\n-  volatile jlong _total_cpu_time_diff;\n+  \/\/ is added to the `gc_total` CPUTimeType at the end of GC.\n+  volatile jlong _gc_total_cpu_time_diff;\n@@ -70,0 +72,1 @@\n+    assert(_instance != nullptr, \"no instance found\");\n@@ -82,2 +85,0 @@\n-  ~CPUTimeCounters();\n-\n@@ -85,2 +86,2 @@\n-  void inc_total_cpu_time(jlong diff);\n-  void publish_total_cpu_time();\n+  void inc_gc_total_cpu_time(jlong diff);\n+  void publish_gc_total_cpu_time();\n@@ -96,4 +97,2 @@\n-  jlong _total;\n-  PerfCounter* _counter;\n-  CPUTimeCounters* _gc_counters;\n-  bool _update_gc_counters;\n+  jlong _gc_total;\n+  CPUTimeGroups::CPUTimeType _name;\n@@ -102,6 +101,2 @@\n-  ThreadTotalCPUTimeClosure(PerfCounter* counter) :\n-      _total(0), _counter(counter), _gc_counters(CPUTimeCounters::get_instance()), _update_gc_counters(false) {}\n-\n-  ThreadTotalCPUTimeClosure(CPUTimeCounters* counters, CPUTimeGroups::CPUTimeType name) :\n-      _total(0), _counter(counters->get_counter(name)), _gc_counters(counters),\n-      _update_gc_counters(CPUTimeGroups::is_gc_counter(name)) {}\n+  ThreadTotalCPUTimeClosure(CPUTimeGroups::CPUTimeType name) :\n+      _gc_total(0), _name(name) {}\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -124,2 +123,0 @@\n-  \/\/ Initialize CPUTimeCounters object, which must be done before creation of the heap.\n-  CPUTimeCounters::initialize();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"memory\/iterator.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-PerfCounter*      VMThread::_perf_vm_thread_cpu_time = nullptr;\n@@ -142,3 +141,1 @@\n-      CPUTimeCounters* instance = CPUTimeCounters::get_instance();\n-      instance->create_counter(CPUTimeGroups::vm);\n-      _perf_vm_thread_cpu_time = instance->get_counter(CPUTimeGroups::vm);\n+      CPUTimeCounters::get_instance()->create_counter(CPUTimeGroups::CPUTimeType::vm);\n@@ -301,1 +298,1 @@\n-    ThreadTotalCPUTimeClosure tttc(_perf_vm_thread_cpu_time);\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::vm);\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-  static PerfCounter* _perf_vm_thread_cpu_time;\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}