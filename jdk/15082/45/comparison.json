{"files":[{"patch":"@@ -107,0 +107,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -1518,0 +1519,6 @@\n+  CPUTimeCounters* instance = CPUTimeCounters::get_instance();\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_conc_mark);\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_conc_refine);\n+  instance->create_counter(CPUTimeGroups::CPUTimeType::gc_service);\n+\n@@ -2333,0 +2340,2 @@\n+\n+  update_parallel_gc_threads_cpu_time();\n@@ -2417,0 +2426,18 @@\n+void G1CollectedHeap::update_parallel_gc_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  WorkerThreads* worker_threads = workers();\n+  if (worker_threads != nullptr) {\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n+    \/\/ Currently parallel worker threads never terminate (JDK-8081682), so it is\n+    \/\/ safe for VMThread to read their CPU times. However, if JDK-8087340 is\n+    \/\/ resolved so they terminate, we should rethink if it is still safe.\n+    worker_threads->threads_do(&tttc);\n+  }\n+\n+  CPUTimeCounters::get_instance()->publish_gc_total_cpu_time();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -267,0 +267,1 @@\n+  void update_parallel_gc_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -1348,0 +1349,2 @@\n+  _g1h->update_parallel_gc_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -137,0 +138,2 @@\n+\n+    update_threads_cpu_time();\n@@ -172,0 +175,1 @@\n+  update_threads_cpu_time();\n@@ -231,0 +235,1 @@\n+  update_threads_cpu_time();\n@@ -240,0 +245,1 @@\n+  update_threads_cpu_time();\n@@ -339,0 +345,9 @@\n+\n+void G1ConcurrentMarkThread::update_threads_cpu_time() {\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_conc_mark);\n+  tttc.do_thread(this);\n+  _cm->threads_do(&tttc);\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -111,0 +111,3 @@\n+\n+  \/\/ Update the perf data counter for concurrent mark.\n+  void update_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -77,5 +78,1 @@\n-    if (os::supports_vtime()) {\n-      _vtime_accum = (os::elapsedVTime() - _vtime_start);\n-    } else {\n-      _vtime_accum = 0.0;\n-    }\n+    track_usage();\n@@ -140,0 +137,1 @@\n+  void track_usage() override;\n@@ -185,0 +183,9 @@\n+void G1PrimaryConcurrentRefineThread::track_usage() {\n+  G1ConcurrentRefineThread::track_usage();\n+  \/\/ The primary thread is responsible for updating the CPU time for all workers.\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_conc_refine);\n+    cr()->threads_do(&tttc);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+  \/\/ Update concurrent refine threads stats.\n+  \/\/ If we are in Primary thread, we additionally update CPU time tracking.\n+  virtual void track_usage() {\n+    if (os::supports_vtime()) {\n+      _vtime_accum = (os::elapsedVTime() - _vtime_start);\n+    } else {\n+      _vtime_accum = 0.0;\n+    }\n+  };\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/g1\/g1CollectedHeap.hpp\"\n@@ -28,0 +29,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -133,0 +135,2 @@\n+  update_thread_cpu_time();\n+\n@@ -154,0 +158,7 @@\n+void G1ServiceThread::update_thread_cpu_time() {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_service);\n+    tttc.do_thread(this);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -123,0 +124,3 @@\n+  \/\/ Update the perf data counter for service thread.\n+  void update_thread_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -130,0 +131,3 @@\n+  \/\/ Create CPU time counter\n+  CPUTimeCounters::get_instance()->create_counter(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n+\n@@ -195,0 +199,1 @@\n+  update_parallel_worker_threads_cpu_time();\n@@ -887,0 +892,15 @@\n+\n+void ParallelScavengeHeap::update_parallel_worker_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::gc_parallel_workers);\n+  \/\/ Currently parallel worker threads in GCTaskManager never terminate, so it\n+  \/\/ is safe for VMThread to read their CPU times. If upstream changes this\n+  \/\/ behavior, we should rethink if it is still safe.\n+  gc_threads_do(&tttc);\n+\n+  CPUTimeCounters::get_instance()->publish_gc_total_cpu_time();\n+}\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -104,0 +104,2 @@\n+  void update_parallel_worker_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"runtime\/atomic.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -41,0 +42,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -43,0 +45,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -67,0 +70,4 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+    CPUTimeCounters::get_instance()->create_counter(CPUTimeGroups::CPUTimeType::conc_dedup);\n+  }\n@@ -190,0 +197,4 @@\n+    if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+      ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::conc_dedup);\n+      tttc.do_thread(thread);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/perfData.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -784,0 +785,3 @@\n+  \/\/ Initialize CPUTimeCounters object, which must be done before creation of the heap.\n+  CPUTimeCounters::initialize();\n+\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/cpuTimeCounters.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+#include \"runtime\/os.hpp\"\n+\n+const char* CPUTimeGroups::to_string(CPUTimeType val) {\n+  switch (val) {\n+    case CPUTimeType::gc_total:\n+      return \"total_gc_cpu_time\";\n+    case CPUTimeType::gc_parallel_workers:\n+      return \"gc_parallel_workers\";\n+    case CPUTimeType::gc_conc_mark:\n+      return \"gc_conc_mark\";\n+    case CPUTimeType::gc_conc_refine:\n+      return \"gc_conc_refine\";\n+    case CPUTimeType::gc_service:\n+      return \"gc_service\";\n+    case CPUTimeType::vm:\n+      return \"vm\";\n+    case CPUTimeType::conc_dedup:\n+      return \"conc_dedup\";\n+    default:\n+      ShouldNotReachHere();\n+  };\n+}\n+\n+bool CPUTimeGroups::is_gc_counter(CPUTimeType val) {\n+  switch (val) {\n+    case CPUTimeType::gc_parallel_workers:\n+      return true;\n+    case CPUTimeType::gc_conc_mark:\n+      return true;\n+    case CPUTimeType::gc_conc_refine:\n+      return true;\n+    case CPUTimeType::gc_service:\n+      return true;\n+    default:\n+      return false;\n+  }\n+  ShouldNotReachHere();\n+}\n+\n+CPUTimeCounters* CPUTimeCounters::_instance = nullptr;\n+\n+CPUTimeCounters::CPUTimeCounters() :\n+    _cpu_time_counters(),\n+    _gc_total_cpu_time_diff(0) {\n+  create_counter(SUN_THREADS, CPUTimeGroups::CPUTimeType::gc_total);\n+}\n+\n+void CPUTimeCounters::inc_gc_total_cpu_time(jlong diff) {\n+  Atomic::add(&_gc_total_cpu_time_diff, diff);\n+}\n+\n+void CPUTimeCounters::publish_gc_total_cpu_time() {\n+  \/\/ Ensure that we are only incrementing atomically by using Atomic::cmpxchg\n+  \/\/ to set the value to zero after we obtain the new CPU time difference.\n+  jlong old_value;\n+  jlong fetched_value = Atomic::load(&_gc_total_cpu_time_diff);\n+  jlong new_value = 0;\n+  do {\n+    old_value = fetched_value;\n+    fetched_value = Atomic::cmpxchg(&_gc_total_cpu_time_diff, old_value, new_value);\n+  } while (old_value != fetched_value);\n+  get_counter(CPUTimeGroups::CPUTimeType::gc_total)->inc(fetched_value);\n+}\n+\n+void CPUTimeCounters::create_counter(CounterNS ns, CPUTimeGroups::CPUTimeType name) {\n+  if (UsePerfData) {\n+    EXCEPTION_MARK;\n+    if (os::is_thread_cpu_time_supported()) {\n+      _cpu_time_counters[static_cast<int>(name)] =\n+                  PerfDataManager::create_counter(ns, CPUTimeGroups::to_string(name),\n+                                                  PerfData::U_Ticks, CHECK);\n+    }\n+  }\n+}\n+\n+void CPUTimeCounters::create_counter(CPUTimeGroups::CPUTimeType group) {\n+  create_counter(SUN_THREADS_CPUTIME, group);\n+}\n+\n+PerfCounter* CPUTimeCounters::get_counter(CPUTimeGroups::CPUTimeType name) {\n+  return _cpu_time_counters[static_cast<int>(name)];\n+}\n+\n+ThreadTotalCPUTimeClosure::~ThreadTotalCPUTimeClosure() {\n+    CPUTimeCounters* instance = CPUTimeCounters::get_instance();\n+    PerfCounter* counter = instance->get_counter(_name);\n+    jlong net_cpu_time = _gc_total - counter->get_value();\n+    counter->inc(net_cpu_time);\n+    if (CPUTimeGroups::is_gc_counter(_name)) {\n+      instance->inc_gc_total_cpu_time(net_cpu_time);\n+    }\n+}\n+\n+void ThreadTotalCPUTimeClosure::do_thread(Thread* thread) {\n+    \/\/ The default code path (fast_thread_cpu_time()) asserts that\n+    \/\/ pthread_getcpuclockid() and clock_gettime() must return 0. Thus caller\n+    \/\/ must ensure the thread exists and has not terminated.\n+    assert(os::is_thread_cpu_time_supported(), \"os must support cpu time\");\n+    _gc_total += os::thread_cpu_time(thread);\n+}\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.cpp","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+#ifndef SHARE_RUNTIME_CPUTIMECOUNTERS_HPP\n+#define SHARE_RUNTIME_CPUTIMECOUNTERS_HPP\n+\n+\n+#include \"memory\/iterator.hpp\"\n+#include \"runtime\/perfData.hpp\"\n+#include \"runtime\/perfDataTypes.hpp\"\n+\n+class CPUTimeGroups : public AllStatic {\n+public:\n+  enum class CPUTimeType {\n+    gc_total,\n+    gc_parallel_workers,\n+    gc_conc_mark,\n+    gc_conc_refine,\n+    gc_service,\n+    vm,\n+    conc_dedup,\n+    COUNT,\n+  };\n+\n+  static const char* to_string(CPUTimeType val);\n+  static bool is_gc_counter(CPUTimeType val);\n+};\n+\n+class CPUTimeCounters: public CHeapObj<mtServiceability> {\n+private:\n+  \/\/ CPUTimeCounters is a singleton instance.\n+  CPUTimeCounters();\n+  static CPUTimeCounters* _instance;\n+\n+  \/\/ An array of PerfCounters which correspond to the various counters we want\n+  \/\/ to track. Indexed by the enum value `CPUTimeType`.\n+  PerfCounter* _cpu_time_counters[static_cast<int>(CPUTimeGroups::CPUTimeType::COUNT)];\n+\n+  \/\/ A long which atomically tracks how much CPU time has been spent doing GC\n+  \/\/ since the last time we called `publish_total_cpu_time()`.\n+  \/\/ It is incremented using Atomic::add() to prevent race conditions, and\n+  \/\/ is added to the `gc_total` CPUTimeType at the end of GC.\n+  volatile jlong _gc_total_cpu_time_diff;\n+\n+  void create_counter(CounterNS ns, CPUTimeGroups::CPUTimeType name);\n+\n+public:\n+  static CPUTimeCounters* get_instance() {\n+    assert(_instance != nullptr, \"no instance found\");\n+    return _instance;\n+  }\n+\n+  static void initialize() {\n+    assert(_instance == nullptr, \"we can only allocate one CPUTimeCounters object\");\n+    _instance = new CPUTimeCounters();\n+  }\n+\n+  \/\/ Prevent copy of singleton object.\n+  CPUTimeCounters(const CPUTimeCounters& copy) = delete;\n+  void operator=(const CPUTimeCounters& copy) = delete;\n+\n+  \/\/ Methods to modify and update counter for total CPU time spent doing GC.\n+  void inc_gc_total_cpu_time(jlong diff);\n+  void publish_gc_total_cpu_time();\n+\n+  void create_counter(CPUTimeGroups::CPUTimeType name);\n+  PerfCounter* get_counter(CPUTimeGroups::CPUTimeType name);\n+};\n+\n+\/\/ Class to compute the total CPU time for a set of threads, then update an\n+\/\/ hsperfdata counter.\n+class ThreadTotalCPUTimeClosure: public ThreadClosure {\n+ private:\n+  jlong _gc_total;\n+  CPUTimeGroups::CPUTimeType _name;\n+\n+ public:\n+  ThreadTotalCPUTimeClosure(CPUTimeGroups::CPUTimeType name) :\n+      _gc_total(0), _name(name) {}\n+\n+  ~ThreadTotalCPUTimeClosure();\n+\n+  virtual void do_thread(Thread* thread);\n+};\n+\n+#endif \/\/ SHARE_RUNTIME_CPUTIMECOUNTERS_HPP\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -76,0 +76,1 @@\n+  \"sun.threads.cpu_time\",  \/\/ Subsystem for Sun Threads CPU times\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+  SUN_THREADS_CPUTIME,  \/\/ Subsystem for Sun Threads CPU times\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -139,0 +140,3 @@\n+    if (os::is_thread_cpu_time_supported()) {\n+      CPUTimeCounters::get_instance()->create_counter(CPUTimeGroups::CPUTimeType::vm);\n+    }\n@@ -291,0 +295,6 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    assert(Thread::current() == this, \"Must be called from VM thread\");\n+    \/\/ Update vm_thread_cpu_time after each VM operation.\n+    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::vm);\n+    tttc.do_thread(this);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright 2023 Alphabet LLC.  All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315149\n+ * @summary Unit test to ensure CPU hsperf counters are published.\n+ * @requires vm.gc.G1\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseStringDeduplication TestGcCounters\n+ *\/\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestGcCounters {\n+\n+    private static final String SUN_THREADS = \"sun.threads\";\n+    private static final String SUN_THREADS_CPUTIME = \"sun.threads.cpu_time\";\n+\n+    public static void main(String[] args) throws Exception {\n+        testGcCpuCountersExist();\n+    }\n+\n+\n+    \/**\n+     * jcmd -J-XX:+UsePerfData pid PerfCounter.print\n+     *\/\n+     private static void testGcCpuCountersExist() throws Exception {\n+        OutputAnalyzer output = JcmdBase.jcmd(new String[] {\"PerfCounter.print\"});\n+\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(SUN_THREADS + \".total_gc_cpu_time\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_conc_mark\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_conc_refine\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_service\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_parallel_workers\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".vm\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".conc_dedup\");\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestGcCounters.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}