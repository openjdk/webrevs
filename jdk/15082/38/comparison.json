{"files":[{"patch":"@@ -1237,0 +1237,1 @@\n+  _cpu_time_counters(new CPUTimeCounters()),\n@@ -1518,0 +1519,5 @@\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_parallel_workers);\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_conc_mark);\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_conc_refine);\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_service);\n+\n@@ -2333,0 +2339,2 @@\n+\n+  update_parallel_gc_threads_cpu_time();\n@@ -2417,0 +2425,18 @@\n+void G1CollectedHeap::update_parallel_gc_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  WorkerThreads* worker_threads = workers();\n+  if (worker_threads != nullptr) {\n+    ThreadTotalCPUTimeClosure tttc(cpu_time_counters(), CPUTimeGroups::gc_parallel_workers);\n+    \/\/ Currently parallel worker threads never terminate (JDK-8081682), so it is\n+    \/\/ safe for VMThread to read their CPU times. However, if JDK-8087340 is\n+    \/\/ resolved so they terminate, we should rethink if it is still safe.\n+    worker_threads->threads_do(&tttc);\n+  }\n+\n+  _cpu_time_counters->publish_total_cpu_time();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -254,0 +255,3 @@\n+  \/\/ Counters to keep track of CPU time spent by various sources.\n+  CPUTimeCounters* _cpu_time_counters;\n+\n@@ -375,0 +379,2 @@\n+ void update_parallel_gc_threads_cpu_time();\n+\n@@ -563,0 +569,4 @@\n+  CPUTimeCounters* cpu_time_counters() {\n+    return _cpu_time_counters;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2083,0 +2083,12 @@\n+void G1ConcurrentMark::update_concurrent_mark_threads_cpu_time() {\n+  assert(Thread::current() == cm_thread(),\n+         \"Must be called from _cmThread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  CPUTimeCounters* counters = _g1h->cpu_time_counters();\n+  ThreadTotalCPUTimeClosure tttc(counters, CPUTimeGroups::gc_conc_mark);\n+  tttc.do_thread(cm_thread());\n+  threads_do(&tttc);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -452,0 +452,3 @@\n+  \/\/ Update the perf data counter for concurrent mark.\n+  void update_concurrent_mark_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+\n+    cm()->update_concurrent_mark_threads_cpu_time();\n@@ -172,0 +174,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -231,0 +234,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -240,0 +244,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -155,0 +156,14 @@\n+void G1ConcurrentRefineThreadControl::update_threads_cpu_time() {\n+  \/\/ The primary thread (_threads[0]) updates the counter for all worker\n+  \/\/ threads, because:\n+  \/\/ the primary thread is always woken up first from being blocked on a monitor\n+  \/\/ when there is refinement work to do;\n+  \/\/ the primary thread is started last and stopped first, so it will not risk\n+  \/\/ reading CPU time of a terminated worker thread.\n+  assert_current_thread_is_primary_refinement_thread();\n+  assert(UsePerfData && os::is_thread_cpu_time_supported(), \"Must be enabled\");\n+  CPUTimeCounters* counters = G1CollectedHeap::heap()->cpu_time_counters();\n+  ThreadTotalCPUTimeClosure tttc(counters, CPUTimeGroups::gc_conc_refine);\n+  worker_threads_do(&tttc);\n+}\n+\n@@ -461,0 +476,4 @@\n+\n+void G1ConcurrentRefine::update_concurrent_refine_threads_cpu_time() {\n+  _thread_control.update_threads_cpu_time();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -74,0 +75,3 @@\n+\n+  \/\/ Update the perf data counter for concurrent refine.\n+  void update_threads_cpu_time();\n@@ -221,0 +225,3 @@\n+\n+  \/\/ Update the perf data counter for concurrent refine.\n+  void update_concurrent_refine_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+    maybe_update_threads_cpu_time();\n@@ -140,0 +141,1 @@\n+  void maybe_update_threads_cpu_time() override;\n@@ -185,0 +187,6 @@\n+void G1PrimaryConcurrentRefineThread::maybe_update_threads_cpu_time() {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    cr()->update_concurrent_refine_threads_cpu_time();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,0 +74,4 @@\n+  \/\/ Attempt to update concurrent refine threads stats.\n+  \/\/ Only overridden in G1PrimaryConcurrentRefineThread.\n+  virtual void maybe_update_threads_cpu_time() {};\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/g1\/g1CollectedHeap.hpp\"\n@@ -133,0 +134,6 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    CPUTimeCounters* counters = G1CollectedHeap::heap()->cpu_time_counters();\n+    ThreadTotalCPUTimeClosure tttc(counters, CPUTimeGroups::gc_service);\n+    tttc.do_thread(task->_service_thread);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/perfData.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -130,0 +130,3 @@\n+  \/\/ Create CPU time counter\n+  _cpu_time_counters->create_counter(CPUTimeGroups::gc_parallel_workers);\n+\n@@ -195,0 +198,1 @@\n+  update_parallel_worker_threads_cpu_time();\n@@ -887,0 +891,15 @@\n+\n+void ParallelScavengeHeap::update_parallel_worker_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(_cpu_time_counters, CPUTimeGroups::gc_parallel_workers);\n+  \/\/ Currently parallel worker threads in GCTaskManager never terminate, so it\n+  \/\/ is safe for VMThread to read their CPU times. If upstream changes this\n+  \/\/ behavior, we should rethink if it is still safe.\n+  gc_threads_do(&tttc);\n+\n+  _cpu_time_counters->publish_total_cpu_time();\n+}\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -94,0 +95,1 @@\n+  CPUTimeCounters* _cpu_time_counters;\n@@ -104,0 +106,2 @@\n+  void update_parallel_worker_threads_cpu_time();\n+\n@@ -120,0 +124,1 @@\n+    _cpu_time_counters(new CPUTimeCounters()),\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"runtime\/atomic.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -41,0 +42,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -43,0 +45,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -49,0 +52,1 @@\n+PerfCounter* StringDedup::Processor::_concurrent_dedup_thread_cpu_time = nullptr;\n@@ -67,0 +71,6 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+    _concurrent_dedup_thread_cpu_time =\n+        PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"conc_dedup\",\n+                                        PerfData::U_Ticks, CHECK);\n+  }\n@@ -190,0 +200,4 @@\n+    if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+      ThreadTotalCPUTimeClosure tttc(_concurrent_dedup_thread_cpu_time);\n+      tttc.do_thread(thread);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -50,0 +51,3 @@\n+  \/\/ Perf data for CPU time consumed by the string dedup thread.\n+  static PerfCounter* _concurrent_dedup_thread_cpu_time;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+  \"sun.threads.cpu_time\",  \/\/ Subsystem for Sun Threads CPU times\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/iterator.hpp\"\n@@ -64,0 +65,1 @@\n+  SUN_THREADS_CPUTIME,  \/\/ Subsystem for Sun Threads CPU times\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/cpuTimeCounters.hpp\"\n@@ -109,0 +110,1 @@\n+PerfCounter*      VMThread::_perf_vm_thread_cpu_time = nullptr;\n@@ -139,0 +141,5 @@\n+    if (os::is_thread_cpu_time_supported()) {\n+      _perf_vm_thread_cpu_time =\n+                   PerfDataManager::create_counter(SUN_THREADS_CPUTIME, \"vm\",\n+                                                   PerfData::U_Ticks, CHECK);\n+    }\n@@ -291,0 +298,6 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    assert(Thread::current() == this, \"Must be called from VM thread\");\n+    \/\/ Update vm_thread_cpu_time after each VM operation.\n+    ThreadTotalCPUTimeClosure tttc(_perf_vm_thread_cpu_time);\n+    tttc.do_thread(this);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+  static PerfCounter* _perf_vm_thread_cpu_time;\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,5 +52,0 @@\n-static void stop_service_thread(G1ServiceThread* thread) {\n-  ThreadInVMfromNative tvn(JavaThread::current());\n-  thread->stop();\n-}\n-\n@@ -60,0 +55,1 @@\n+  ThreadInVMfromNative tvn(JavaThread::current());\n@@ -68,1 +64,1 @@\n-  stop_service_thread(st);\n+  st->stop();\n@@ -81,0 +77,1 @@\n+  ThreadInVMfromNative tvn(JavaThread::current());\n@@ -90,1 +87,1 @@\n-  stop_service_thread(st);\n+  st->stop();\n@@ -98,0 +95,1 @@\n+  ThreadInVMfromNative tvn(JavaThread::current());\n@@ -108,1 +106,1 @@\n-  stop_service_thread(st);\n+  st->stop();\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1ServiceThread.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright 2023 Alphabet LLC.  All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315149\n+ * @summary Unit test to ensure CPU hsperf counters are published.\n+ * @requires vm.gc.G1\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseStringDeduplication TestGcCounters\n+ *\/\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestGcCounters {\n+\n+    private static final String SUN_THREADS = \"sun.threads\";\n+    private static final String SUN_THREADS_CPUTIME = \"sun.threads.cpu_time\";\n+\n+    public static void main(String[] args) throws Exception {\n+        testGcCpuCountersExist();\n+    }\n+\n+\n+    \/**\n+     * jcmd -J-XX:+UsePerfData pid PerfCounter.print\n+     *\/\n+     private static void testGcCpuCountersExist() throws Exception {\n+        OutputAnalyzer output = JcmdBase.jcmd(new String[] {\"PerfCounter.print\"});\n+\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(SUN_THREADS + \".total_gc_cpu_time\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_conc_mark\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_conc_refine\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_service\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".gc_parallel_workers\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".vm\");\n+        output.shouldContain(SUN_THREADS_CPUTIME + \".conc_dedup\");\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestGcCounters.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}