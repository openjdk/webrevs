{"files":[{"patch":"@@ -185,1 +185,1 @@\n-                if (frame instanceof ResetFrame) {\n+                if (frame instanceof ResetFrame rf) {\n@@ -187,1 +187,1 @@\n-                    handleReset((ResetFrame)frame, subscriber);\n+                    handleReset(rf, subscriber);\n@@ -466,3 +466,2 @@\n-        if ((frame instanceof HeaderFrame)) {\n-            HeaderFrame hframe = (HeaderFrame) frame;\n-            if (hframe.endHeaders()) {\n+        if ((frame instanceof HeaderFrame hf)) {\n+            if (hf.endHeaders()) {\n@@ -472,1 +471,1 @@\n-            if (hframe.getFlag(HeaderFrame.END_STREAM)) {\n+            if (hf.getFlag(HeaderFrame.END_STREAM)) {\n@@ -476,1 +475,1 @@\n-        } else if (frame instanceof DataFrame) {\n+        } else if (frame instanceof DataFrame df) {\n@@ -481,1 +480,1 @@\n-                connection.dropDataFrame((DataFrame) frame);\n+                connection.dropDataFrame(df);\n@@ -483,1 +482,1 @@\n-                receiveDataFrame((DataFrame) frame);\n+                receiveDataFrame(df);\n@@ -557,0 +556,6 @@\n+            if (!requestBodyCF.isDone()) {\n+                \/\/ If a RST_STREAM is received, complete the requestBody. This will allow the\n+                \/\/ response to be read before the Reset is handled in the case where the client's\n+                \/\/ input stream is partially consumed or not consumed at all by the server.\n+                requestBodyCF.complete(null);\n+            }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * @test\n+ * @bug 8293786\n+ * @summary Checks to see if the HttpClient can process a request to cancel a transmission from a remote if the server\n+ *          does not process any data. The client should read all data from the server and close the connection.\n+ * @library \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer\n+ * @run testng\/othervm\/timeout=50 -Djdk.httpclient.HttpClient.log=all\n+ *                      PostPutTest\n+ *\/\n+\n+import jdk.httpclient.test.lib.http2.BodyOutputStream;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2TestExchangeImpl;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n+import jdk.internal.net.http.common.HttpHeadersBuilder;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import javax.net.ssl.SSLSession;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpHeaders;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static java.net.http.HttpRequest.BodyPublishers.ofByteArray;\n+\n+public class PostPutTest {\n+\n+    Http2TestServer http2TestServer;\n+    URI uri;\n+    static PrintStream testLog = System.err;\n+\n+    \/\/ As per jdk.internal.net.http.WindowController.DEFAULT_INITIAL_WINDOW_SIZE\n+    final int DEFAULT_INITIAL_WINDOW_SIZE = (64 * 1024) - 1;\n+    \/\/ Add on a small amount of arbitrary bytes to see if client hangs when receiving RST_STREAM\n+    byte[] data = new byte[DEFAULT_INITIAL_WINDOW_SIZE + 10];\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        http2TestServer = new Http2TestServer(false, 0);\n+        http2TestServer.addHandler(new TestHandler(), \"\/\");\n+        http2TestServer.start();\n+        uri = new URI(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/\");\n+        testLog.println(\"PostPutTest.setup(): Test Server URI: \" + uri);\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        testLog.println(\"PostPutTest.teardown(): Stopping server\");\n+        http2TestServer.stop();\n+        data = null;\n+    }\n+\n+    @DataProvider(name = \"variants\")\n+    public Object[][] variants() {\n+        HttpRequest over64kPost = HttpRequest.newBuilder().version(HTTP_2).POST(ofByteArray(data)).uri(uri).build();\n+        HttpRequest over64kPut = HttpRequest.newBuilder().version(HTTP_2).PUT(ofByteArray(data)).uri(uri).build();\n+\n+        return new Object[][] {\n+                { over64kPost, \"POST data over 64k bytes\" },\n+                { over64kPut, \"PUT data over 64k bytes\" }\n+        };\n+    }\n+\n+    public HttpRequest getWarmupReq() {\n+        return HttpRequest.newBuilder()\n+                .GET()\n+                .uri(uri)\n+                .build();\n+    }\n+\n+    @Test(dataProvider = \"variants\")\n+    public void testOver64kPUT(HttpRequest req, String testMessage) {\n+        testLog.println(\"PostPutTest: Performing test: \" + testMessage);\n+        HttpClient hc = HttpClient.newBuilder().version(HTTP_2).build();\n+        hc.sendAsync(getWarmupReq(), HttpResponse.BodyHandlers.ofString()).join();\n+        hc.sendAsync(req, HttpResponse.BodyHandlers.ofString()).join();\n+        \/*\n+            If this test fails in timeout, it is likely due to one of two reasons:\n+              - The responseSubscriber is null, so no incoming frames are being processed by the client\n+                (See Stream::schedule)\n+              - The test server is for some reason not sending a RST_STREAM with the NO_ERROR flag set after\n+                sending an empty DATA frame with the END_STREAM flag set.\n+        *\/\n+    }\n+\n+    private static class TestHandler implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            \/\/ The input stream is not read in this bug as this will trigger window updates for the server concerns\n+            \/\/ the case where no updates are sent and the server instead tells the client to abort the transmission.\n+            exchange.sendResponseHeaders(200, 0);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/PostPutTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -45,1 +45,1 @@\n-    boolean eof;\n+    volatile boolean eof;\n@@ -103,0 +103,5 @@\n+\n+    public boolean isEof() {\n+        return eof;\n+    }\n+\n@@ -133,1 +138,0 @@\n-        \/\/ TODO reset this stream\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/BodyInputStream.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.net.http.frame.ResetFrame;\n@@ -42,0 +43,1 @@\n+    volatile boolean sendResetNoError;\n@@ -134,0 +136,3 @@\n+            if (sendResetNoError) {\n+                sendReset(EMPTY_BARRAY, 0, 0, ResetFrame.NO_ERROR);\n+            }\n@@ -140,1 +145,1 @@\n-    protected void sendEndStream() throws IOException {\n+    public void sendEndStream() throws IOException {\n@@ -143,0 +148,13 @@\n+\n+    public void sendReset(byte[] buf, int offset, int len, int flags) throws IOException {\n+        ByteBuffer buffer = ByteBuffer.allocate(len);\n+        buffer.put(buf, offset, len);\n+        buffer.flip();\n+        assert streamid != 0;\n+        ResetFrame rf = new ResetFrame(streamid, flags);\n+        outputQ.put(rf);\n+    }\n+\n+    public void setSendResetNoError(boolean val) {\n+        this.sendResetNoError = val;\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/BodyOutputStream.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    final InputStream is;\n+    protected final InputStream is;\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestExchangeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -732,0 +732,6 @@\n+            } finally {\n+                \/\/ isEof() for if END_STREAM has been seen.\n+                \/\/ q.size() > 0 for if frames in Queue have not been read.\n+                if (bis instanceof BodyInputStream inputStream && (!inputStream.isEof() || inputStream.q.size() > 0)) {\n+                    bos.setSendResetNoError(true);\n+                }\n@@ -966,1 +972,1 @@\n-            protected void sendEndStream() throws IOException {\n+            public void sendEndStream() throws IOException {\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestServerConnection.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}