{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+    public static int[] buf = new int[1024 * 1024];\n@@ -41,0 +42,1 @@\n+    @Override\n@@ -47,2 +49,0 @@\n-            \/\/ Don't log anything. We are out of memory.\n-            \/\/ A println is likely to genereate a new OutOfMemoryError\n@@ -50,0 +50,1 @@\n+            buf = null;\n@@ -51,1 +52,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VMOutOfMemoryException\/VMOutOfMemoryException001\/VMOutOfMemoryException001t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.share;\n-import java.lang.ref.Cleaner;\n-\n-\/**\n- * Finalizable interface allows <tt>Finalizer<\/tt> to perform finalization of an object.\n- * Each object that requires finalization at VM shutdown time should implement this\n- * interface and call the <tt>registerCleanup<\/tt> to activate a <tt>Finalizer<\/tt> hook.\n- *\n- * @see Finalizer\n- *\/\n-public interface Finalizable {\n-\n-    \/**\n-     * This method will be implemented by FinalizableObject and is called in <tt>finalizeAtExit<\/tt>.\n-     *\n-     * @see Finalizer\n-     *\/\n-    public void cleanup();\n-\n-    \/**\n-     * This method will be invoked by <tt>Finalizer<\/tt> when virtual machine\n-     * shuts down.\n-     *\n-     * @throws Throwable if any throwable exception thrown during finalization\n-     *\/\n-    default public void finalizeAtExit() throws Throwable {\n-        cleanup();\n-    }\n-\n-    \/**\n-     * This method will register a cleanup method and create an instance of Finalizer\n-     * to register the object for finalization at VM exit.\n-     *\n-     * @see Finalizer\n-     *\/\n-    default public void registerCleanup() {\n-       Finalizer finalizer = new Finalizer(this);\n-       finalizer.activate();\n-\n-       Cleaner.create().register(this, () -> cleanup());\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Finalizable.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.share;\n-\n-\n-\/**\n- * This class is a simple example of finalizable object, that\n- * implements interface <code>Finalizable<\/code>.\n- *\n- * @see Finalizable\n- * @see Finalizer\n- *\/\n-public class FinalizableObject implements Finalizable {\n-    \/**\n-     * Subclasses should override this method to provide the specific\n-     * cleanup actions that they need.\n-     *\/\n-    public void cleanup() {}\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/FinalizableObject.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,133 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.share;\n-\n-import java.util.Stack;\n-\n-\/**\n- * Finalizer performs object finalization when virtual mashine shuts down.\n- * Finalizer is a thread that acts as a VM shutdown hook.\n- * This thread will be activated as VM shuts down because of\n- * invocation of <code>exit()<\/code> or termination. After activation\n- * Finalizer just calls <code>finalizeAtExit()<\/code> method of the specified object.\n- * The finalizable object should implement interface <code>Finalizable<\/code>.\n- *\n- * @see Finalizable\n- *\/\n-public class Finalizer {\n-\n-    \/** Finalizer thread to register as a VM shutdown hook. *\/\n-    private static FinalizerThread finalizerThread = null;\n-\n-    \/** An object to finalize. *\/\n-    private Finalizable object;\n-\n-    \/**\n-     * Create finalizer for the specified object.\n-     *\/\n-    public Finalizer(Finalizable object) {\n-        this.object = object;\n-    }\n-\n-    \/**\n-     * Register finalizer for finalization at VM shutdown.\n-     *\/\n-    public void activate() {\n-        if (finalizerThread == null) {\n-            finalizerThread = new FinalizerThread(\"FinalizerThread for Finalizable objects\");\n-            finalizerThread.activate();\n-        }\n-        finalizerThread.add(object);\n-    }\n-\n-    \/**\n-     * Unregister finalizer for finalization at VM shutdown.\n-     *\/\n-    public void deactivate() {\n-        if (finalizerThread == null)\n-            return;\n-        finalizerThread.remove(object);\n-    }\n-\n-    \/**\n-     * Static inner thread that is registered as a VM shutdown hook\n-     * and performs finalization of all registered finalizable objects.\n-     *\/\n-    private static class FinalizerThread extends Thread {\n-\n-        \/** Stack of objects registered for finalization. *\/\n-        private Stack<Object> objects = new Stack<Object>();\n-\n-        \/** Make new instance of FinalizerThread with given thread name. *\/\n-        public FinalizerThread(String threadName) {\n-            super(threadName);\n-        }\n-\n-        \/**\n-         * Push an object to the stack of registered objects.\n-         *\/\n-        public void add(Finalizable object) {\n-            objects.push(object);\n-        }\n-\n-        \/**\n-         * Remove an object from the stack of registered objects.\n-         *\/\n-        public void remove(Finalizable object) {\n-            objects.remove(object);\n-        }\n-\n-        \/**\n-         * Register finalizer thread as a VM shutdown hook.\n-         *\/\n-        public void activate() {\n-            Runtime.getRuntime().addShutdownHook( this );\n-        }\n-\n-        \/**\n-         * Unregister finalizer thread as a VM shutdown hook.\n-         *\/\n-        public void deactivate() {\n-            Runtime.getRuntime().removeShutdownHook( this );\n-        }\n-\n-        \/**\n-         * Pop all registered objects from the stack and finalize them.\n-         *\/\n-        public void run() {\n-            while (!objects.empty()) {\n-                Finalizable object = (Finalizable)objects.pop();\n-                try {\n-                    object.finalizeAtExit();\n-                } catch (ThreadDeath e) {\n-                    throw e;\n-                } catch (Throwable ex) {\n-                    ex.printStackTrace();\n-                }\n-            }\n-        }\n-\n-    } \/\/ end of FinalizerThread\n-\n-} \/\/ end of Finalizer\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Finalizer.java","additions":0,"deletions":133,"binary":false,"changes":133,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,5 +44,0 @@\n-        \/\/ It is needed to register finalizer thread in default thread group\n-        \/\/ So FinalizerThread thread can't be in virtual threads group\n-        FinalizableObject finalizableObject = new FinalizableObject();\n-        finalizableObject.registerCleanup();\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/MainWrapper.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -57,3 +57,4 @@\n-        pipe = SocketIOPipe.createClientIOPipe(log, argParser.getPort(), 0);\n-        log.display(\"Sending signal '\" + AODTestRunner.SIGNAL_READY_FOR_ATTACH + \"'\");\n-        pipe.println(AODTestRunner.SIGNAL_READY_FOR_ATTACH);\n+        try {\n+            pipe = SocketIOPipe.createClientIOPipe(log, argParser.getPort(), 0);\n+            log.display(\"Sending signal '\" + AODTestRunner.SIGNAL_READY_FOR_ATTACH + \"'\");\n+            pipe.println(AODTestRunner.SIGNAL_READY_FOR_ATTACH);\n@@ -61,1 +62,1 @@\n-        targetApplicationActions();\n+            targetApplicationActions();\n@@ -63,2 +64,2 @@\n-        String signal = pipe.readln();\n-        log.display(\"Signal received: '\" + signal + \"'\");\n+            String signal = pipe.readln();\n+            log.display(\"Signal received: '\" + signal + \"'\");\n@@ -66,2 +67,7 @@\n-        if ((signal == null) || !signal.equals(AODTestRunner.SIGNAL_FINISH))\n-            throw new TestBug(\"Unexpected signal: '\" + signal + \"'\");\n+            if ((signal == null) || !signal.equals(AODTestRunner.SIGNAL_FINISH))\n+                throw new TestBug(\"Unexpected signal: '\" + signal + \"'\");\n+        } finally {\n+            if (pipe != null) {\n+                pipe.close();\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/aod\/DummyTargetApplication.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-public class DebugeeBinder extends Log.Logger implements Finalizable {\n+public class DebugeeBinder extends Log.Logger {\n@@ -121,2 +121,0 @@\n-\n-        registerCleanup();\n@@ -549,8 +547,0 @@\n-    \/**\n-     * Finalize binder by invoking <code>close()<\/code>.\n-     *\n-     *\/\n-    public void cleanup() {\n-        close();\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeBinder.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -199,1 +199,0 @@\n-        int exitCode = 0;\n@@ -201,1 +200,2 @@\n-            exitCode = waitForDebugee();\n+            int exitCode = waitForDebugee();\n+            return exitCode;\n@@ -205,0 +205,14 @@\n+        } finally {\n+            try {\n+                waitForRedirectors(timeout);\n+            } finally {\n+                if (process != null) {\n+                    process.destroy();\n+                }\n+                if (pipe != null) {\n+                    pipe.close();\n+                }\n+                if (binder != null) {\n+                    binder.close();\n+                }\n+            }\n@@ -206,5 +220,0 @@\n-        waitForRedirectors(timeout);\n-        if (process != null) {\n-            process.destroy();\n-        }\n-        return exitCode;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeProcess.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,4 @@\n+        if (debugee.pipe != null) {\n+            throw new RuntimeException(\"debugee pipe is already set\");\n+        }\n+        debugee.pipe = this;\n@@ -80,1 +84,1 @@\n-    protected IOPipe(Log log, String host, int port, long timeout, boolean listening) {\n+    private IOPipe(Log log, String host, int port, long timeout, boolean listening) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/IOPipe.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-public class SocketIOPipe extends Log.Logger implements Finalizable {\n+public class SocketIOPipe extends Log.Logger {\n@@ -96,2 +96,0 @@\n-\n-        registerCleanup();\n@@ -109,2 +107,0 @@\n-\n-        registerCleanup();\n@@ -314,11 +310,0 @@\n-    \/**\n-     * Perform finalization of the object by invoking close().\n-     *\n-     * This is replacement of finalize() method and is called\n-     * when this instance becomes unreachable.\n-     *\n-     *\/\n-    public void cleanup() {\n-        close();\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/SocketIOPipe.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"}]}