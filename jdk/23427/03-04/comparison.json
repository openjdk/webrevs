{"files":[{"patch":"@@ -242,1 +242,13 @@\n-    private byte[] ensureCapacityInternal(int minimumCapacity) {\n+    private void ensureCapacityInternal(int minimumCapacity) {\n+        \/\/ overflow-conscious code\n+        ensureCapacityInternal(minimumCapacity, coder);\n+    }\n+\n+    \/**\n+     * For positive values of {@code minimumCapacity}, this method\n+     * behaves like {@code ensureCapacity}, however it is never\n+     * synchronized.\n+     * If {@code minimumCapacity} is non positive due to numeric\n+     * overflow, this method throws {@code OutOfMemoryError}.\n+     *\/\n+    private byte[] ensureCapacityInternal(int minimumCapacity, byte coder) {\n@@ -245,1 +257,0 @@\n-        byte coder = this.coder;\n@@ -845,2 +856,3 @@\n-        byte[] value = ensureCapacityInternal(spaceNeeded);\n-        if (isLatin1()) {\n+        byte coder = this.coder;\n+        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n+        if (coder == LATIN1) {\n@@ -870,2 +882,3 @@\n-        byte[] value = ensureCapacityInternal(spaceNeeded);\n-        if (isLatin1()) {\n+        byte coder = this.coder;\n+        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n+        if (coder == LATIN1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"}]}