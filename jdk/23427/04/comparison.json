{"files":[{"patch":"@@ -244,0 +244,13 @@\n+        ensureCapacityInternal(minimumCapacity, coder);\n+    }\n+\n+    \/**\n+     * For positive values of {@code minimumCapacity}, this method\n+     * behaves like {@code ensureCapacity}, however it is never\n+     * synchronized.\n+     * If {@code minimumCapacity} is non positive due to numeric\n+     * overflow, this method throws {@code OutOfMemoryError}.\n+     *\/\n+    private byte[] ensureCapacityInternal(int minimumCapacity, byte coder) {\n+        \/\/ overflow-conscious code\n+        byte[] value = this.value;\n@@ -247,1 +260,2 @@\n-                    newCapacity(minimumCapacity) << coder);\n+                    newCapacity(minimumCapacity, value, coder) << coder);\n+            this.value = value;\n@@ -249,0 +263,1 @@\n+        return value;\n@@ -263,1 +278,1 @@\n-    private int newCapacity(int minCapacity) {\n+    private static int newCapacity(int minCapacity, byte[] value, byte coder) {\n@@ -841,2 +856,3 @@\n-        ensureCapacityInternal(spaceNeeded);\n-        if (isLatin1()) {\n+        byte coder = this.coder;\n+        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n+        if (coder == LATIN1) {\n@@ -866,2 +882,3 @@\n-        ensureCapacityInternal(spaceNeeded);\n-        if (isLatin1()) {\n+        byte coder = this.coder;\n+        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n+        if (coder == LATIN1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"}]}