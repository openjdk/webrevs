{"files":[{"patch":"@@ -244,1 +244,14 @@\n-        int oldCapacity = value.length >> coder;\n+        ensureCapacityInternal(minimumCapacity, coder);\n+    }\n+\n+    \/**\n+     * For positive values of {@code minimumCapacity}, this method\n+     * behaves like {@code ensureCapacity}, however it is never\n+     * synchronized.\n+     * If {@code minimumCapacity} is non positive due to numeric\n+     * overflow, this method throws {@code OutOfMemoryError}.\n+     *\/\n+    private byte[] ensureCapacityInternal(int minimumCapacity, byte coder) {\n+        \/\/ overflow-conscious code\n+        byte[] val = this.value;\n+        int oldCapacity = val.length >> coder;\n@@ -246,2 +259,3 @@\n-            value = Arrays.copyOf(value,\n-                    newCapacity(minimumCapacity) << coder);\n+            val = Arrays.copyOf(val,\n+                    newCapacity(minimumCapacity, val, coder) << coder);\n+            this.value = val;\n@@ -249,0 +263,1 @@\n+        return val;\n@@ -260,0 +275,1 @@\n+     * @param  coder the coder to be used when calculating the capacity length\n@@ -263,1 +279,1 @@\n-    private int newCapacity(int minCapacity) {\n+    private static int newCapacity(int minCapacity, byte[] value, byte coder) {\n@@ -841,2 +857,3 @@\n-        ensureCapacityInternal(spaceNeeded);\n-        if (isLatin1()) {\n+        byte coder = this.coder;\n+        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n+        if (coder == LATIN1) {\n@@ -866,2 +883,3 @@\n-        ensureCapacityInternal(spaceNeeded);\n-        if (isLatin1()) {\n+        byte coder = this.coder;\n+        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n+        if (coder == LATIN1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"}]}