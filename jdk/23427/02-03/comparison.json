{"files":[{"patch":"@@ -242,12 +242,1 @@\n-    private void ensureCapacityInternal(int minimumCapacity) {\n-        ensureCapacityInternal(minimumCapacity, getCoder());\n-    }\n-\n-    \/**\n-     * For positive values of {@code minimumCapacity}, this method\n-     * behaves like {@code ensureCapacity}, however it is never\n-     * synchronized.\n-     * If {@code minimumCapacity} is non positive due to numeric\n-     * overflow, this method throws {@code OutOfMemoryError}.\n-     *\/\n-    private byte[] ensureCapacityInternal(int minimumCapacity, byte coder) {\n+    private byte[] ensureCapacityInternal(int minimumCapacity) {\n@@ -256,0 +245,1 @@\n+        byte coder = this.coder;\n@@ -855,3 +845,2 @@\n-        byte coder = getCoder();\n-        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n-        if (coder == LATIN1) {\n+        byte[] value = ensureCapacityInternal(spaceNeeded);\n+        if (isLatin1()) {\n@@ -881,3 +870,2 @@\n-        byte coder = getCoder();\n-        byte[] value = ensureCapacityInternal(spaceNeeded, coder);\n-        if (coder == LATIN1) {\n+        byte[] value = ensureCapacityInternal(spaceNeeded);\n+        if (isLatin1()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"}]}