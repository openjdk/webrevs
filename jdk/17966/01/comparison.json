{"files":[{"patch":"@@ -267,0 +267,1 @@\n+    virtual jlong memory_and_swap_usage_in_bytes() = 0;\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -171,0 +171,13 @@\n+jlong CgroupV1Subsystem::memory_and_swap_usage_in_bytes() {\n+  \/\/ isSwapEnabled - maybe compute once and save?\n+  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.memsw.limit_in_bytes\", \"Memory and Swap Limit is: \", JULONG_FORMAT, JULONG_FORMAT, memsw_bytes);\n+  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.swappiness\", \"Swappiness is: \", JULONG_FORMAT, JULONG_FORMAT, swappiness);\n+  if (memsw_bytes > 0 && swappiness > 0) {\n+      GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.memsw.usage_in_bytes\",\n+                     \"mem swap usage is: \", JULONG_FORMAT, JULONG_FORMAT, memory_swap_usage);\n+      return memory_swap_usage;\n+  }\n+  \/\/ fallback like we use in mbean code\n+  return memory_usage_in_bytes();\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+    jlong memory_and_swap_usage_in_bytes();\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -183,0 +183,10 @@\n+jlong CgroupV2Subsystem::memory_and_swap_usage_in_bytes() {\n+    jlong memory_usage = memory_usage_in_bytes();\n+    if (memory_usage >= 0) {\n+        char* mem_swp_current_str = mem_swp_current_val();\n+        jlong swap_current = limit_from_str(mem_swp_current_str);\n+        return memory_usage + swap_current;\n+    }\n+    return memory_usage; \/\/ not supported or unlimited case\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+    jlong memory_and_swap_usage_in_bytes();\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,0 +80,5 @@\n+jlong OSContainer::memory_and_swap_usage_in_bytes() {\n+  assert(cgroup_subsystem != nullptr, \"cgroup subsystem not available\");\n+  return cgroup_subsystem->memory_and_swap_usage_in_bytes();\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+  static jlong memory_and_swap_usage_in_bytes();\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -307,2 +307,26 @@\n-    \/\/ TODO add a good implementation\n-    return -1;\n+    \/\/ see src\/jdk.management\/unix\/classes\/com\/sun\/management\/internal\/OperatingSystemImpl.java\n+    \/\/ long getFreeSwapSpaceSize()\n+    jlong mem_swap_limit = OSContainer::memory_and_swap_limit_in_bytes();\n+    jlong mem_limit = OSContainer::memory_limit_in_bytes();\n+    if (mem_swap_limit >= 0 && mem_limit >= 0) {\n+      jlong delta_limit = mem_swap_limit - mem_limit;\n+      if (delta_limit <= 0) {\n+        return 0;\n+      }\n+      \/\/ should we do multiple trys like we do in Java management code ?\n+      \/\/ cgroupv1 : memory.memsw.usage_in_bytes (CgroupV1Subsystem.java)\n+      \/\/ cgroupv2 : long swapUsage = getLongVal(\"memory.swap.current\", NO_SWAP); memoryUsage + swapUsage;  (CgroupV2Subsystem.java)\n+      \/\/jlong memSwapUsage = containerMetrics.getMemoryAndSwapUsage();\n+      jlong mem_swap_usage = OSContainer::memory_and_swap_usage_in_bytes();\n+      jlong mem_usage = OSContainer::memory_usage_in_bytes();\n+      if (mem_swap_usage > 0 && mem_usage > 0) {\n+        jlong delta_usage = mem_swap_usage - mem_usage;\n+        if (delta_usage >= 0) {\n+          jlong free_swap = delta_limit - delta_usage;\n+          if (free_swap >= 0) {\n+            return free_swap;\n+          }\n+        }\n+      }\n+    }\n+    return -1; \/\/ check the fallback - maybe use something better ?\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}