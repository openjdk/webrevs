{"files":[{"patch":"@@ -267,0 +267,1 @@\n+    virtual jlong memory_and_swap_usage_in_bytes() = 0;\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -171,0 +171,17 @@\n+jlong CgroupV1Subsystem::memory_and_swap_usage_in_bytes() {\n+  jlong memory_sw_limit = memory_and_swap_limit_in_bytes();\n+  jlong memory_limit = CgroupSubsystem::memory_limit_in_bytes();\n+  if (memory_sw_limit > 0 && memory_limit > 0) {\n+    jlong delta_swap = memory_sw_limit - memory_limit;\n+    if (delta_swap > 0) {\n+      GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.memsw.usage_in_bytes\",\n+                         \"mem swap usage is: \", JULONG_FORMAT, JULONG_FORMAT, memory_swap_usage);\n+      return (jlong)memory_swap_usage;\n+    } else {\n+      \/\/ no swap\n+      return 0;\n+    }\n+  }\n+  return memory_usage_in_bytes();\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+    jlong memory_and_swap_usage_in_bytes();\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -183,0 +183,10 @@\n+jlong CgroupV2Subsystem::memory_and_swap_usage_in_bytes() {\n+    jlong memory_usage = memory_usage_in_bytes();\n+    if (memory_usage >= 0) {\n+        char* mem_swp_current_str = mem_swp_current_val();\n+        jlong swap_current = limit_from_str(mem_swp_current_str);\n+        return memory_usage + (swap_current >= 0 ? swap_current : 0);\n+    }\n+    return memory_usage; \/\/ not supported or unlimited case\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+    jlong memory_and_swap_usage_in_bytes();\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,0 +80,5 @@\n+jlong OSContainer::memory_and_swap_usage_in_bytes() {\n+  assert(cgroup_subsystem != nullptr, \"cgroup subsystem not available\");\n+  return cgroup_subsystem->memory_and_swap_usage_in_bytes();\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+  static jlong memory_and_swap_usage_in_bytes();\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -305,0 +305,9 @@\n+static jlong host_free_swap() {\n+  struct sysinfo si;\n+  int ret = sysinfo(&si);\n+  if (ret != 0) {\n+    return -1;\n+  }\n+  return (jlong)(si.freeswap * si.mem_unit);\n+}\n+\n@@ -306,0 +315,1 @@\n+  jlong host_free_swap_val = host_free_swap();\n@@ -307,7 +317,16 @@\n-    \/\/ TODO add a good implementation\n-    return -1;\n-  } else {\n-    struct sysinfo si;\n-    int ret = sysinfo(&si);\n-    if (ret != 0) {\n-      return -1;\n+    jlong mem_swap_limit = OSContainer::memory_and_swap_limit_in_bytes();\n+    jlong mem_limit = OSContainer::memory_limit_in_bytes();\n+    if (mem_swap_limit >= 0 && mem_limit >= 0) {\n+      jlong delta_limit = mem_swap_limit - mem_limit;\n+      if (delta_limit <= 0) {\n+        return 0;\n+      }\n+      jlong mem_swap_usage = OSContainer::memory_and_swap_usage_in_bytes();\n+      jlong mem_usage = OSContainer::memory_usage_in_bytes();\n+      if (mem_swap_usage > 0 && mem_usage > 0) {\n+        jlong delta_usage = mem_swap_usage - mem_usage;\n+        if (delta_usage >= 0) {\n+          jlong free_swap = delta_limit - delta_usage;\n+          return free_swap >= 0 ? free_swap : 0;\n+        }\n+      }\n@@ -315,1 +334,4 @@\n-    return (jlong)(si.freeswap * si.mem_unit);\n+    \/\/ unlimited or not supported. Fall through to return host value\n+    log_trace(os,container)(\"os::free_swap_space: container_swap_limit=\" JLONG_FORMAT\n+                            \" container_mem_limit=\" JLONG_FORMAT \" returning host value: \" JLONG_FORMAT,\n+                            mem_swap_limit, mem_limit, host_free_swap_val);\n@@ -317,0 +339,1 @@\n+  return host_free_swap_val;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,4 @@\n+            \/\/ see https:\/\/docs.docker.com\/config\/containers\/resource_constraints\/\n+            testSwapMemory(\"200m\", \"200m\", \"\" + 0*MB, \"\" + 0*MB);\n+            testSwapMemory(\"200m\", \"300m\", \"\" + 100*MB, \"\" + 100*MB);\n+\n@@ -214,0 +218,13 @@\n+    private static void testSwapMemory(String memValueToSet, String swapValueToSet, String expectedTotalValue, String expectedFreeValue) throws Exception {\n+        Common.logNewTestCase(\"Memory: --memory = \" + memValueToSet + \" --memory-swap = \" + swapValueToSet);\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addDockerOpts(\"--memory=\" + memValueToSet)\n+                                      .addDockerOpts(\"--memory-swap=\" + swapValueToSet)\n+                                      .addClassOptions(\"jdk.SwapSpace\"))\n+            .shouldHaveExitValue(0)\n+            .shouldContain(\"totalSize = \" + expectedTotalValue)\n+            .shouldContain(\"freeSize = \" + expectedFreeValue);\n+    }\n+\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFREvents.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}