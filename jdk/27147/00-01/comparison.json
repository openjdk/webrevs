{"files":[{"patch":"@@ -356,1 +356,0 @@\n-                \/\/ X509Key x = X509Key.parse(pubKeyEncoded);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-\/**\n+\/*\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -37,1 +40,0 @@\n-import java.util.Arrays;\n@@ -41,3 +43,3 @@\n- * PEM, it will construct a OneAsymmetricKey structure that will combine\n- * the public key into the private key encoding.  The original private key does\n- * not have the public key encapsulated.\n+ * PEM, it constructs a OneAsymmetricKey structure that combines\n+ * the public key into the private key encoding.  Decode the PEM data into\n+ * a KeyPair and an EKPI for verification.\n@@ -45,4 +47,6 @@\n- * Then use EKPI.getKeyPair() to retrieve the KeyPair and verify the\n- * encoding with decoded PEM data.  The private key is checked using the\n- * decoded PEM, the public key is verified using both the decoded PEM and\n- * the original KeyPair.\n+ * The original private key does not have the public key encapsulated, so it\n+ * cannot be used for verification.\n+ *\n+ * Verify the decoded PEM KeyPair and EKPI.getKeyPair() return matching public\n+ * and private keys encodings; as well as, verify the original public key\n+ * matches.\n@@ -66,4 +70,1 @@\n-\n-        \/\/ Extract the EncryptedPrivateKeyInfo to test and the OAS encoding.\n-        EncryptedPrivateKeyInfo ekpi = PEMDecoder.of().decode(pem,\n-            EncryptedPrivateKeyInfo.class);\n+        \/\/ Extracted the KeyPair from the generated PEM for verification.\n@@ -72,0 +73,5 @@\n+        \/\/ Extract the EncryptedPrivateKeyInfo.\n+        EncryptedPrivateKeyInfo ekpi = PEMDecoder.of().decode(pem,\n+            EncryptedPrivateKeyInfo.class);\n+\n+        KeyPairs kps = new KeyPairs(kpOrig, mlkemKP);\n@@ -76,13 +82,1 @@\n-        if (!Arrays.equals(mlkemKP.getPrivate().getEncoded(),\n-            kp.getPrivate().getEncoded())) {\n-            throw new AssertionError(\"PrivateKey didn't match with expected.\");\n-        }\n-        if (!Arrays.equals(mlkemKP.getPublic().getEncoded(),\n-            kp.getPublic().getEncoded())) {\n-            throw new AssertionError(\"PublicKey didn't match with decoded.\");\n-        }\n-        if (!Arrays.equals(kpOrig.getPublic().getEncoded(),\n-            kp.getPublic().getEncoded())) {\n-            throw new AssertionError(\"PublicKey didn't match the original.\");\n-        }\n-        System.out.println(\"Got KeyPair:  Pass\");\n+        arrayCheck(kps, kp);\n@@ -93,13 +87,1 @@\n-        if (!Arrays.equals(mlkemKP.getPrivate().getEncoded(),\n-            kp.getPrivate().getEncoded())) {\n-            throw new AssertionError(\"PrivateKey didn't match with expected.\");\n-        }\n-        if (!Arrays.equals(mlkemKP.getPublic().getEncoded(),\n-            kp.getPublic().getEncoded())) {\n-            throw new AssertionError(\"PublicKey didn't match with decoded.\");\n-        }\n-        if (!Arrays.equals(kpOrig.getPublic().getEncoded(),\n-            kp.getPublic().getEncoded())) {\n-            throw new AssertionError(\"PublicKey didn't match the original.\");\n-        }\n-        System.out.println(\"Got KeyPair:  Pass\");\n+        arrayCheck(kps, kp);\n@@ -110,12 +92,12 @@\n-        if (!Arrays.equals(mlkemKP.getPrivate().getEncoded(),\n-            kp.getPrivate().getEncoded())) {\n-            throw new AssertionError(\"PrivateKey didn't match with expected.\");\n-        }\n-        if (!Arrays.equals(mlkemKP.getPublic().getEncoded(),\n-            kp.getPublic().getEncoded())) {\n-            throw new AssertionError(\"PublicKey didn't match with decoded.\");\n-        }\n-        if (!Arrays.equals(kpOrig.getPublic().getEncoded(),\n-            kp.getPublic().getEncoded())) {\n-            throw new AssertionError(\"PublicKey didn't match the original.\");\n-        }\n+        arrayCheck(kps, kp);\n+    }\n+\n+    static void arrayCheck(KeyPairs kps, KeyPair actual) {\n+        byte[] actualPrivEncoding = actual.getPrivate().getEncoded();\n+        byte[] actualPubEncoding = actual.getPublic().getEncoded();\n+        Asserts.assertEqualsByteArray(kps.mlkemPrivEncoding, actualPrivEncoding,\n+            \"PrivateKey didn't match with expected.\");\n+        Asserts.assertEqualsByteArray(kps.mlkemPubEncoding, actualPubEncoding,\n+            \"PublicKey didn't match with decoded.\");\n+        Asserts.assertEqualsByteArray(kps.origPubEncoding, actualPubEncoding,\n+            \"PublicKey didn't match with decoded.\");\n@@ -124,0 +106,9 @@\n+\n+    record KeyPairs(byte[] origPubEncoding, byte[] mlkemPrivEncoding,\n+                    byte[] mlkemPubEncoding) {\n+         KeyPairs(KeyPair orig, KeyPair mlkem) {\n+             this(orig.getPublic().getEncoded(),\n+                 mlkem.getPrivate().getEncoded(),\n+                 mlkem.getPublic().getEncoded());\n+         }\n+    };\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeyPair.java","additions":42,"deletions":51,"binary":false,"changes":93,"status":"modified"}]}