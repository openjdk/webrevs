{"files":[{"patch":"@@ -84,1 +84,1 @@\n- * @since 25\n+ * @since 26\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-     * {@code InputStream} did not complete decoding.\n+     * {@code InputStream} did not complete decoding\n@@ -403,1 +403,1 @@\n-     * @param <S> class type parameter that extends {@code DEREncodable}.\n+     * @param <S> class type parameter that extends {@code DEREncodable}\n@@ -406,1 +406,1 @@\n-     *   {@code DEREncodable}.\n+     *   {@code DEREncodable}\n@@ -409,1 +409,1 @@\n-     *   {@code InputStream} did not complete decoding.\n+     *   {@code InputStream} did not complete decoding\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -195,0 +195,4 @@\n+                    if (encoding == null || encoding.length == 0) {\n+                        throw new IllegalArgumentException(\"PrivateKey is \" +\n+                            \"null or has no encoding.\");\n+                    }\n@@ -200,4 +204,2 @@\n-            case X509EncodedKeySpec x ->\n-                buildKey(x.getEncoded(), null);\n-            case PKCS8EncodedKeySpec p ->\n-                buildKey(null, p.getEncoded());\n+            case X509EncodedKeySpec x -> buildKey(x.getEncoded(), null);\n+            case PKCS8EncodedKeySpec p -> buildKey(null, p.getEncoded());\n@@ -206,0 +208,4 @@\n+                if (key != null) {\n+                    throw new IllegalArgumentException(\"Certificates \" +\n+                        \"cannot be encrypted\");\n+                }\n@@ -216,0 +222,4 @@\n+                if (key != null) {\n+                    throw new IllegalArgumentException(\"Certificates \" +\n+                        \"cannot be encrypted\");\n+                }\n@@ -217,4 +227,0 @@\n-                    if (key != null) {\n-                        throw new IllegalArgumentException(\"Certificates \" +\n-                            \"cannot be encrypted\");\n-                    }\n@@ -227,0 +233,4 @@\n+                if (key != null) {\n+                    throw new IllegalArgumentException(\"CRLs cannot be \" +\n+                        \"encrypted\");\n+                }\n@@ -228,4 +238,0 @@\n-                    if (key != null) {\n-                        throw new IllegalArgumentException(\"CRLs cannot be \" +\n-                            \"encrypted\");\n-                    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMEncoder.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-     * @param algorithm the PBE encryption algorithm.\n+     * @param algorithm the PBE encryption algorithm\n@@ -358,1 +358,1 @@\n-     *                 defaults are used\n+     *                 defaults are used.\n@@ -405,1 +405,1 @@\n-     * defaults are determined by the provider.*\n+     * defaults are determined by the provider.\n@@ -428,1 +428,1 @@\n-     * @param encryptKey the key used to encrypt the encoding.\n+     * @param encryptKey the key used to encrypt the encoding\n@@ -430,1 +430,1 @@\n-     *                  encryption (PBE) algorithm.\n+     *                  encryption (PBE) algorithm\n@@ -434,1 +434,1 @@\n-     *               If {@code null}, the default is used\n+     *               If {@code null}, the default is used.\n@@ -443,1 +443,1 @@\n-     *         provider, or if an error occurs during encryption.\n+     *         provider, or if an error occurs during encryption\n@@ -552,1 +552,1 @@\n-            return PKCS8Key.parseKey(encoding, null);\n+            return PKCS8Key.parseKey(encoding, provider);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -153,0 +153,3 @@\n+     * The header begins processing when \"-----B\" is read.  At that point\n+     * exceptions will be thrown for syntax errors.\n+     *\n@@ -173,1 +176,0 @@\n-\n@@ -175,1 +177,3 @@\n-        \/\/ Find starting hyphens\n+\n+        \/\/ Find 5 hyphens followed by a 'B' to start processing the header.\n+        boolean headerStarted = false;\n@@ -186,0 +190,10 @@\n+                case 'B' -> {\n+                    if (hyphen == 5) {\n+                        headerStarted = true;\n+                    } else {\n+                        while (hyphen > 0) {\n+                            os.write('-');\n+                            hyphen--;\n+                        }\n+                    }\n+                }\n@@ -189,1 +203,1 @@\n-        } while (hyphen != 5);\n+        } while (!headerStarted);\n@@ -192,1 +206,1 @@\n-        sb.append(\"-----\");\n+        sb.append(\"-----B\");\n@@ -315,2 +329,2 @@\n-        if (os.size() > 5) {\n-            preData = Arrays.copyOf(os.toByteArray(), os.size() - 5);\n+        if (os.size() > 6) {\n+            preData = Arrays.copyOf(os.toByteArray(), os.size() - 6);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Pem.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    static final PEMDecoder d = PEMDecoder.of();\n@@ -58,0 +59,2 @@\n+        PEMDecoder decr;\n+\n@@ -92,2 +95,2 @@\n-        PEMDecoder d = PEMDecoder.of().withDecryption(\"123\".toCharArray());\n-        d.decode(PEMData.rsaCert.pem());\n+        decr = d.withDecryption(\"123\".toCharArray());\n+        decr.decode(PEMData.rsaCert.pem());\n@@ -95,1 +98,1 @@\n-        ((KeyPair) d.decode(PEMData.ecsecp256.pem())).getPrivate();\n+        ((KeyPair) decr.decode(PEMData.ecsecp256.pem())).getPrivate();\n@@ -97,1 +100,1 @@\n-        d.decode(PEMData.ecsecp256.pem(), PKCS8EncodedKeySpec.class);\n+        decr.decode(PEMData.ecsecp256.pem(), PKCS8EncodedKeySpec.class);\n@@ -114,1 +117,1 @@\n-        DEREncodable result = PEMDecoder.of().decode(PEMData.ecCSRWithData.pem(), PEM.class);\n+        DEREncodable result = d.decode(PEMData.ecCSRWithData.pem(), PEM.class);\n@@ -117,2 +120,2 @@\n-                System.err.println(\"expected: \" + PEMData.preData);\n-                System.err.println(\"received: \" + new String(rec.leadingData()));\n+                System.err.println(\"expected: \\\"\" + PEMData.preData + \"\\\"\");\n+                System.err.println(\"received: \\\"\" + new String(rec.leadingData()) + \"\\\"\");\n@@ -131,1 +134,1 @@\n-        result = PEMDecoder.of().decode(PEMData.rsapub.pem(), PEM.class);\n+        result = d.decode(PEMData.rsapub.pem(), PEM.class);\n@@ -151,1 +154,0 @@\n-        d = PEMDecoder.of();\n@@ -155,2 +157,2 @@\n-        var ins = new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8));\n-        if (d.decode(ins, PEM.class).leadingData() != null) {\n+        ByteArrayInputStream bis = new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8));\n+        if (d.decode(bis, PEM.class).leadingData() != null) {\n@@ -159,1 +161,1 @@\n-        if (d.decode(ins, PEM.class).leadingData() != null) {\n+        if (d.decode(bis, PEM.class).leadingData() != null) {\n@@ -200,0 +202,7 @@\n+\n+        \/\/ leadingData can contain dashes\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        bos.write(\"--------\\n\".getBytes(StandardCharsets.ISO_8859_1));\n+        bos.write(PEMData.ecsecp256ekpi.pem().getBytes(StandardCharsets.ISO_8859_1));\n+        bis = new ByteArrayInputStream(bos.toByteArray());\n+        result = d.decode(bis, PEM.class);\n@@ -217,1 +226,1 @@\n-            obj = PEMDecoder.of().decode(is, PEM.class);\n+            obj = d.decode(is, PEM.class);\n@@ -228,1 +237,1 @@\n-            PEMDecoder.of().decode(is, PEM.class);\n+            d.decode(is, PEM.class);\n@@ -237,1 +246,1 @@\n-                PEMDecoder.of().decode(is, PEM.class));\n+                d.decode(is, PEM.class));\n@@ -253,1 +262,1 @@\n-                PEMDecoder.of().decode(certPem, X509Certificate.class).getEncoded());\n+                d.decode(certPem, X509Certificate.class).getEncoded());\n@@ -257,1 +266,1 @@\n-                PEMDecoder.of().decode(certPem, X509Certificate.class).getEncoded());\n+                d.decode(certPem, X509Certificate.class).getEncoded());\n@@ -263,1 +272,1 @@\n-        RSAPrivateKey decoded = PEMDecoder.of().decode(entry.pem(), RSAPrivateKey.class);\n+        RSAPrivateKey decoded = d.decode(entry.pem(), RSAPrivateKey.class);\n@@ -268,1 +277,1 @@\n-        PEM r = PEMDecoder.of().decode(entry.pem(), PEM.class);\n+        PEM r = d.decode(entry.pem(), PEM.class);\n@@ -303,2 +312,2 @@\n-        PEM r = PEMDecoder.of().decode(entry.pem(), PEM.class);\n-        DEREncodable de = PEMDecoder.of().decode(r.toString());\n+        PEM r = d.decode(entry.pem(), PEM.class);\n+        DEREncodable de = d.decode(r.toString());\n@@ -335,1 +344,1 @@\n-            test(entry.pem(), c, PEMDecoder.of());\n+            test(entry.pem(), c, d);\n@@ -354,1 +363,1 @@\n-        PEMDecoder decoder = PEMDecoder.of();\n+        PEMDecoder decoder;\n@@ -356,1 +365,3 @@\n-            decoder = decoder.withDecryption(entry.password());\n+            decoder = d.withDecryption(entry.password());\n+        } else {\n+            decoder = d;\n@@ -384,1 +395,1 @@\n-                pemDecoder = PEMDecoder.of().withFactory(provider);\n+                pemDecoder = d.withFactory(provider);\n@@ -386,1 +397,1 @@\n-                pemDecoder = PEMDecoder.of();\n+                pemDecoder = d;\n@@ -449,3 +460,2 @@\n-        PEMDecoder pd = PEMDecoder.of();\n-        p1 = pd.decode(PEMData.rsapub.pem(), RSAPublicKey.class);\n-        p2 = pd.decode(PEMData.rsapub.pem(), RSAPublicKey.class);\n+        p1 = d.decode(PEMData.rsapub.pem(), RSAPublicKey.class);\n+        p2 = d.decode(PEMData.rsapub.pem(), RSAPublicKey.class);\n@@ -463,1 +473,1 @@\n-            PKCS8Key key = PEMDecoder.of().decode(entry.pem(), PKCS8Key.class);\n+            PKCS8Key key = d.decode(entry.pem(), PKCS8Key.class);\n@@ -475,1 +485,1 @@\n-        var pk = PEMDecoder.of().decode(entry.pem(), clazz);\n+        var pk = d.decode(entry.pem(), clazz);\n@@ -509,1 +519,1 @@\n-        PKCS8EncodedKeySpec p8 = PEMDecoder.of().decode(entry.pem(),\n+        PKCS8EncodedKeySpec p8 = d.decode(entry.pem(),\n@@ -534,2 +544,2 @@\n-        DEREncodable d = PEMDecoder.of().decode(entry.pem());\n-        switch (d) {\n+        DEREncodable der = d.decode(entry.pem());\n+        switch (der) {\n@@ -566,1 +576,1 @@\n-            if (d instanceof PrivateKey) {\n+            if (der instanceof PrivateKey) {\n@@ -575,1 +585,1 @@\n-            } else if (d instanceof KeyPair) {\n+            } else if (der instanceof KeyPair) {\n@@ -580,1 +590,1 @@\n-                s.initVerify(((KeyPair)d).getPublic());\n+                s.initVerify(((KeyPair)der).getPublic());\n","filename":"test\/jdk\/java\/security\/PEM\/PEMDecoderTest.java","additions":47,"deletions":37,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -65,0 +65,4 @@\n+        PEMDecoder decoder = PEMDecoder.of();\n+        EncryptedPrivateKeyInfo ekpi;\n+        KeyPair kp;\n+        PEM pem;\n@@ -79,2 +83,1 @@\n-        keymap.keySet().forEach(key -> testToString(key,\n-            PEMEncoder.of()));\n+        keymap.keySet().forEach(key -> testToString(key, PEMEncoder.of()));\n@@ -105,3 +108,1 @@\n-        PEMDecoder d = PEMDecoder.of();\n-        PEM pem =\n-            d.decode(PEMData.ed25519ep8.pem(), PEM.class);\n+        pem = decoder.decode(PEMData.ed25519ep8.pem(), PEM.class);\n@@ -113,1 +114,1 @@\n-        PEM pemR = new PEM(\"ENCRYPTED PRIVATE KEY\", String.join(\"\\n\",\n+        pem = new PEM(\"ENCRYPTED PRIVATE KEY\", String.join(\"\\n\",\n@@ -115,1 +116,1 @@\n-        PEMData.checkResults(PEMData.ed25519ep8.pem(), encoder.encodeToString(pemR));\n+        PEMData.checkResults(PEMData.ed25519ep8.pem(), encoder.encodeToString(pem));\n@@ -119,1 +120,1 @@\n-        KeyPair kp = d.decode(PEMData.ecsecp256.pem(), KeyPair.class);\n+        kp = decoder.decode(PEMData.ecsecp256.pem(), KeyPair.class);\n@@ -122,1 +123,1 @@\n-        kp = d.withDecryption(PEMData.ecsecp256ekpi.password()).decode(s, KeyPair.class);\n+        kp = decoder.withDecryption(PEMData.ecsecp256ekpi.password()).decode(s, KeyPair.class);\n@@ -129,7 +130,23 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"XDH\");\n-        kp = kpg.generateKeyPair();\n-        s = PEMEncoder.of().encodeToString(kp);\n-        DEREncodable der = d.decode(s);\n-        if (!(der instanceof KeyPair)) {\n-            throw new AssertionError(\"returned Private key instead of KeyPair\");\n-        }\n+        kp = KeyPairGenerator.getInstance(\"XDH\").generateKeyPair();\n+        s = encoder.encodeToString(kp);\n+        decoder.decode(s, KeyPair.class);\n+\n+        \/\/ EmptyKey for the PrivateKey in a KeyPair.  Uses keypair from above.\n+        try {\n+            encoder.encode(new KeyPair(kp.getPublic(), new EmptyKey()));\n+            throw new AssertionError(\"encoder accepted a empty private key encoding\");\n+        } catch (IllegalArgumentException _) {}\n+\n+        \/\/ NullKey for the PrivateKey in a KeyPair.  Uses keypair from above.\n+        try {\n+            encoder.encode(new KeyPair(kp.getPublic(), new NullKey()));\n+            throw new AssertionError(\"encoder accepted a empty private key encoding\");\n+        } catch (IllegalArgumentException _) {}\n+\n+        ekpi = decoder.decode(PEMData.ecsecp256ekpi.pem(),\n+            EncryptedPrivateKeyInfo.class);\n+        try {\n+            encoder.withEncryption(\"blah\".toCharArray()).encode(ekpi);\n+            throw new AssertionError(\"encoder tried to encrypt \" +\n+                \"an EncryptedPrivateKeyInfo.\");\n+        } catch (IllegalArgumentException _) {}\n@@ -290,0 +307,12 @@\n+\n+    private static class NullKey implements PrivateKey {\n+        @Override\n+        public String getAlgorithm() { return \"Test\"; }\n+\n+        @Override\n+        public String getFormat() { return \"Test\"; }\n+\n+        @Override\n+        public byte[] getEncoded() { return null; }\n+    }\n+\n","filename":"test\/jdk\/java\/security\/PEM\/PEMEncoderTest.java","additions":45,"deletions":16,"binary":false,"changes":61,"status":"modified"}]}