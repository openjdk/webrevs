{"files":[{"patch":"@@ -89,2 +89,2 @@\n- * {@link #decode(InputStream, Class)} methods take a class parameter\n- * which specifies type of {@code DEREncodable} that is returned. These methods\n+ * {@link #decode(InputStream, Class)} methods take a class parameter which\n+ * specifies the type of {@code DEREncodable} that is returned. These methods\n@@ -96,4 +96,5 @@\n- * public key encoding is returned in an instance of the X509EncodedKeySpec\n- * class.  Any type of PEM data can be decoded into a {@code PEM} object by\n- * specifying {@code PEM.class}. If the class parameter doesn't match the PEM\n- * content, a {@linkplain ClassCastException} will be thrown.\n+ * public key encoding is returned in an instance of the\n+ * {@code X509EncodedKeySpec} class.  Any type of PEM data can be decoded into\n+ * a {@code PEM} object by specifying {@code PEM.class}. If the class parameter\n+ * doesn't match the PEM content, a {@linkplain ClassCastException} will be\n+ * thrown.\n@@ -103,3 +104,3 @@\n- * {@link #withDecryption(char[])}. {@link #withFactory(Provider)}\n- * restricts decoding to {@link KeyFactory} and\n- * {@link CertificateFactory} instances from the specified {@code Provider}.\n+ * {@link #withDecryption(char[])}. The {@link #withFactory(Provider)} method\n+ * uses the specified provider to produce cryptographic objects from\n+ * {@link KeyFactory} and{@link CertificateFactory}.\n@@ -108,1 +109,1 @@\n- * If decryption fails, a {@link RuntimeException} is thrown.\n+ * If decryption fails, a {@link IllegalArgumentException} is thrown.\n@@ -115,1 +116,1 @@\n- * <p> Here is an example of decoding a {@code PrivateKey} object:\n+ * <p> Here is an example of decoding a private key object:\n@@ -140,0 +141,2 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc5958\n+ *       RFC 5958: Asymmetric Key Packages\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"}]}