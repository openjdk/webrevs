{"files":[{"patch":"@@ -65,4 +65,5 @@\n- * header during decoding.  {@code leadingData} can be useful for reading\n- * metadata that accompanies the PEM data. This value is not defensively\n- * copied by the constructor, and the {@link #leadingData()} method does not\n- * return a clone.\n+ * header during decoding. {@code leadingData} can be useful for reading\n+ * metadata that accompanies the PEM data. Because the value may represent a large\n+ * amount of data, it is not defensively copied by the constructor, and the\n+ * {@link #leadingData()} method does not return a clone. Modification of the\n+ * passed-in or returned array changes the value stored in this record.\n@@ -132,1 +133,1 @@\n-    public String toString() {\n+    final public String toString() {\n@@ -143,1 +144,1 @@\n-    public byte[] decode() {\n+    final public byte[] decode() {\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEM.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,6 +54,13 @@\n- * <p> The {@link #decode(String)} and {@link #decode(InputStream)}\n- * methods return an instance of a class that matches the PEM type and\n- * implements {@link DEREncodable}.\n- *\n- * <p> The following lists the supported PEM types and the {@code DEREncodable}\n- * they decode as:\n+ * <p>The {@link #decode(String)} and {@link #decode(InputStream)} methods\n+ * return an instance of a class that matches the PEM type and implements\n+ * {@link DEREncodable}, as follows:\n+ * <ul>\n+ *   <li>CERTIFICATE : {@link X509Certificate}<\/li>\n+ *   <li>X509 CRL : {@link X509CRL}<\/li>\n+ *   <li>PUBLIC KEY : {@link PublicKey}<\/li>\n+ *   <li>PRIVATE KEY : {@link PrivateKey} or {@link KeyPair}\n+ *   (if the encoding contains a public key)<\/li>\n+ *   <li>ENCRYPTED PRIVATE KEY : {@link EncryptedPrivateKeyInfo}<\/li>\n+ *   <li>Other types : {@link PEM}<\/li>\n+ * <\/ul>\n+ * When used with a {@code PEMDecoder} instance configured for decryption:\n@@ -61,23 +68,2 @@\n- *  <li>CERTIFICATE : {@code X509Certificate}<\/li>\n- *  <li>X509 CRL : {@code X509CRL}<\/li>\n- *  <li>PUBLIC KEY : {@code PublicKey}<\/li>\n- *  <li>PUBLIC KEY : {@code X509EncodedKeySpec} (when passed as a {@code Class}\n- *  parameter)<\/li>\n- *  <li>PRIVATE KEY : {@code PrivateKey}<\/li>\n- *  <li>PRIVATE KEY : {@code PKCS8EncodedKeySpec} (when passed as a {@code Class}\n- *  parameter)<\/li>\n- *  <li>PRIVATE KEY : {@code PublicKey} (if the encoding contains a public key\n- *  and is passed as a {@code Class} parameter)<\/li>\n- *  <li>PRIVATE KEY : {@code KeyPair} (if the encoding contains a public key)\n- *  <\/li>\n- *  <li>ENCRYPTED PRIVATE KEY : {@code EncryptedPrivateKeyInfo} <\/li>\n- *  <li>ENCRYPTED PRIVATE KEY : {@code PrivateKey} (if configured with\n- *  decryption)<\/li>\n- *  <li>ENCRYPTED PRIVATE KEY : {@code KeyPair} (if configured with decryption)\n- *  <\/li>\n- *  <li>ENCRYPTED PRIVATE KEY : {@code PKCS8EncodedKeySpec} (if configured with\n- *  decryption)<\/li>\n- *  <li>ENCRYPTED PRIVATE KEY : {@code PublicKey} (if configured with\n- *  decryption, the encoding contains a public key, and is passed as a\n- *  {@code Class} parameter)<\/li>\n- *  <li>Other types : {@code PEM} <\/li>\n+ *   <li>ENCRYPTED PRIVATE KEY : {@link PrivateKey} or {@link KeyPair}\n+ *   (if the encoding contains a public key)<\/li>\n@@ -92,1 +78,1 @@\n- * {@link PEM} object.\n+ * {@code PEM} object.\n@@ -94,5 +80,4 @@\n- * <p> The {@link #decode(String, Class)} and\n- * {@link #decode(InputStream, Class)} methods take a class parameter, which\n- * specifies the type of {@code DEREncodable} that is returned. These methods\n- * are useful to avoid casting the return type when the PEM type is known, or\n- * when extracting a specific type when there is more than one choice.\n+ * <p> The {@link #decode(String, Class)} and {@link #decode(InputStream, Class)}\n+ * methods take a class parameter that specifies the type of {@code DEREncodable}\n+ * to return. These methods are useful for avoiding casts when the PEM type is\n+ * known, or when extracting a specific type if there is more than one option.\n@@ -102,5 +87,20 @@\n- * public key encoding is returned in an instance of the\n- * {@code X509EncodedKeySpec} class.  Any type of PEM data can be decoded into\n- * a {@code PEM} object by specifying {@code PEM.class}. If the class parameter\n- * doesn't match the PEM content, a {@linkplain ClassCastException} will be\n- * thrown.\n+ * public key encoding is returned as an instance of {@code X509EncodedKeySpec}\n+ * class. Any type of PEM data can be decoded into a {@code PEM} object by\n+ * specifying {@code PEM.class}. If the class parameter does not match the PEM\n+ * content, a {@link ClassCastException} is thrown.\n+ *\n+ * <p> In addition to the types listed above, these methods support the\n+ * following PEM types and {@code DEREncodable} classes when specified as\n+ * parameters:\n+ *  <ul>\n+ *   <li>PUBLIC KEY : {@link X509EncodedKeySpec}<\/li>\n+ *   <li>PRIVATE KEY : {@link PKCS8EncodedKeySpec}<\/li>\n+ *   <li>PRIVATE KEY : {@link PublicKey} (if the encoding contains a public key)<\/li>\n+ *   <li>PRIVATE KEY : {@link X509EncodedKeySpec} (if the encoding contains a public key)<\/li>\n+ * <\/ul>\n+ * When used with a {@code PEMDecoder} instance configured for decryption:\n+ * <ul>\n+ *   <li>ENCRYPTED PRIVATE KEY : {@link PKCS8EncodedKeySpec}<\/li>\n+ *   <li>ENCRYPTED PRIVATE KEY : {@link PublicKey} (if the encoding contains a public key)<\/li>\n+ *   <li>ENCRYPTED PRIVATE KEY : {@link X509EncodedKeySpec} (if the encoding contains a public key)<\/li>\n+ * <\/ul>\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -78,16 +78,16 @@\n- *  <li>{@code X509Certificate} : CERTIFICATE<\/li>\n- *  <li>{@code X509CRL} : X509 CRL<\/li>\n- *  <li>{@code PublicKey} : PUBLIC KEY<\/li>\n- *  <li>{@code PrivateKey} : PRIVATE KEY<\/li>\n- *  <li>{@code PrivateKey} :\n- *  ENCRYPTED PRIVATE KEY  (if configured with encryption)<\/li>\n- *  <li>{@code EncryptedPrivateKeyInfo} : ENCRYPTED PRIVATE KEY<\/li>\n- *  <li>{@code KeyPair} : PRIVATE KEY<\/li>\n- *  <li>{@code KeyPair} :\n- *  ENCRYPTED PRIVATE KEY (if configured with encryption)<\/li>\n- *  <li>{@code X509EncodedKeySpec} : PUBLIC KEY<\/li>\n- *  <li>{@code PKCS8EncodedKeySpec} : PRIVATE KEY<\/li>\n- *  <li>{@code PKCS8EncodedKeySpec} :\n- *  ENCRYPTED PRIVATE KEY (if configured with encryption)<\/li>\n- *  <li>{@code PEM} : {@code PEM.type()}<\/li>\n- *  <\/ul>\n+ *   <li>{@link X509Certificate} : CERTIFICATE<\/li>\n+ *   <li>{@link X509CRL} : X509 CRL<\/li>\n+ *   <li>{@link PublicKey} : PUBLIC KEY<\/li>\n+ *   <li>{@link PrivateKey} : PRIVATE KEY<\/li>\n+ *   <li>{@link EncryptedPrivateKeyInfo} : ENCRYPTED PRIVATE KEY<\/li>\n+ *   <li>{@link KeyPair} : PRIVATE KEY<\/li>\n+ *   <li>{@link X509EncodedKeySpec} : PUBLIC KEY<\/li>\n+ *   <li>{@link PKCS8EncodedKeySpec} : PRIVATE KEY<\/li>\n+ *   <li>{@link PEM} : {@code PEM.type()}<\/li>\n+ * <\/ul>\n+ * <p> When used with a {@code PEMEncoder} instance configured for encryption:\n+ * <ul>\n+ *   <li>{@link PrivateKey} : ENCRYPTED PRIVATE KEY<\/li>\n+ *   <li>{@link KeyPair} : ENCRYPTED PRIVATE KEY<\/li>\n+ *   <li>{@link PKCS8EncodedKeySpec} : ENCRYPTED PRIVATE KEY<\/li>\n+ * <\/ul>\n@@ -284,2 +284,2 @@\n-     * @throws NullPointerException when password is {@code null}\n-     * @throws ProviderException if generating the encryption key fails.\n+     * @throws NullPointerException if password is {@code null}\n+     * @throws IllegalArgumentException if generating the encryption key fails\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMEncoder.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -394,2 +394,2 @@\n-     * {@code DEREncodable} with the default password-based encryption (PBE)\n-     * algorithm and provider defaults.\n+     * {@code DEREncodable}. A valid password must be specified. A default\n+     * password-based encryption (PBE) algorithm and provider are used.\n@@ -404,2 +404,2 @@\n-     *         {@code DEREncodable}, if key generation fails, or if the\n-     *         default algorithm is misconfigured\n+     *         {@code DEREncodable}, if an error occurs while generating the\n+     *         PBE key, or if the default algorithm is misconfigured\n@@ -423,1 +423,7 @@\n-     * {@link DEREncodable} using the provided encryption key, and parameters.\n+     * {@link DEREncodable}. A valid encryption algorithm and {@code Key} must\n+     * be specified.\n+     *\n+     * <p>The format of the algorithm string is described in the\n+     * <a href=\"{@docRoot}\/..\/specs\/security\/standard-names.html#cipher-algorithms\">\n+     * Cipher Algorithms<\/a> section of the Java Security Standard Algorithm Names\n+     * Specification.\n@@ -431,1 +437,1 @@\n-     *               {@code null}, the provider’s default parameters are used\n+     *               {@code null}, the provider’s default parameters are applied.\n@@ -434,2 +440,2 @@\n-     * @param provider the {@code Provider} used for {@link Cipher} operations.\n-     *                 If {@code null}, the default provider list is used\n+     * @param provider the {@code Provider} for {@link Cipher} operations.\n+     *                 If {@code null}, the default provider list is used.\n@@ -444,4 +450,0 @@\n-     * @implNote The {@code jdk.epkcs8.defaultAlgorithm} security property\n-     * defines the default encryption algorithm. The {@code AlgorithmParameterSpec}\n-     * defaults are determined by the provider.\n-     *\n@@ -510,2 +512,2 @@\n-     * @param password the password for PBE decryption. The array is cloned\n-     *                before use.\n+     * @param password the password used for PBE decryption. The array is cloned\n+     *                 before use.\n@@ -515,3 +517,4 @@\n-     * @throws InvalidKeyException if the encoded data does not contain both a\n-     * public and private key, or if an error occurs during parsing, decryption,\n-     * or key generation\n+     * @throws InvalidKeyException if an error occurs during parsing,\n+     *         decryption, or key generation\n+     *\n+     * @since 25\n@@ -535,4 +538,4 @@\n-     * @param decryptKey the decryption key. Must not be {@code null}\n-     * @param provider the {@code Provider} used for {@link Cipher} decryption\n-     *                and {@link PrivateKey} generation. If {@code null}, the\n-     *                default provider configuration is used\n+     * @param decryptKey the decryption key. Must not be {@code null}.\n+     * @param provider the {@code Provider} for {@link Cipher} decryption\n+     *                 and {@link PrivateKey} generation. If {@code null}, the\n+     *                 default provider configuration is used.\n@@ -542,3 +545,2 @@\n-     * @throws InvalidKeyException if the encoded data does not contain both a\n-     * public and private key, or if an error occurs while parsing, decryption,\n-     * or key generation\n+     * @throws InvalidKeyException if an error occurs during parsing,\n+     *         decryption, or key generation\n@@ -566,2 +568,2 @@\n-     * @param password the password used for PBE encryption.  This array\n-     *                 will be cloned before being used.\n+     * @param password the password used for PBE decryption. The array is cloned\n+     *                 before use.\n@@ -571,2 +573,2 @@\n-     * @throws InvalidKeyException if the encoded data lacks a public key or an\n-     *         error occurs during parsing, decryption, or key generation\n+     * @throws InvalidKeyException if the encoded data lacks a public key, or if\n+     *         an error occurs during parsing, decryption, or key generation\n@@ -602,4 +604,4 @@\n-     * @param decryptKey the decryption key; must not be {@code null}\n-     * @param provider the {@code Provider} used for {@link Cipher} decryption\n-     *                 and key generation. If {@code null} the default provider\n-     *                 configuration is used\n+     * @param decryptKey the decryption key. Must not be {@code null}.\n+     * @param provider the {@code Provider} for {@link Cipher} decryption\n+     *                 and key generation. If {@code null}, the default provider\n+     *                 configuration is used.\n@@ -609,2 +611,2 @@\n-     * @throws InvalidKeyException if the encoded data lacks a public key or an\n-     *         error occurs during parsing, decryption, or key generation\n+     * @throws InvalidKeyException if the encoded data lacks a public key, or if\n+     *         an error occurs during parsing, decryption, or key generation\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":36,"deletions":34,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import sun.security.util.KeyUtil;\n@@ -216,3 +217,10 @@\n-                PKCS8Key p8key = new ECPrivateKeyImpl(p8.getEncoded());\n-                if (!p8key.hasPublicKey()) {\n-                    throw new InvalidKeySpecException(\"No public key found.\");\n+                byte[] encoded = p8.getEncoded();\n+                PKCS8Key p8key = null;\n+                try {\n+                    p8key = new ECPrivateKeyImpl(encoded);\n+                    if (!p8key.hasPublicKey()) {\n+                        throw new InvalidKeySpecException(\"No public key found.\");\n+                    }\n+                    yield new ECPublicKeyImpl(p8key.getPubKeyEncoded());\n+                } finally {\n+                    KeyUtil.clear(encoded, p8key);\n@@ -220,1 +228,0 @@\n-                yield new ECPublicKeyImpl(p8key.getPubKeyEncoded());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECKeyFactory.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import sun.security.util.KeyUtil;\n@@ -162,3 +163,13 @@\n-                PKCS8Key p8key = new XDHPrivateKeyImpl(p8.getEncoded());\n-                if (!p8key.hasPublicKey()) {\n-                    throw new InvalidKeySpecException(\"No public key found.\");\n+                byte[] encoded = p8.getEncoded();\n+                PKCS8Key p8key = new XDHPrivateKeyImpl(encoded);\n+                try {\n+                    if (!p8key.hasPublicKey()) {\n+                        throw new InvalidKeySpecException(\"No public key found.\");\n+                    }\n+                    XDHPublicKeyImpl result =\n+                        new XDHPublicKeyImpl(p8key.getPubKeyEncoded());\n+                    checkLockedParams(InvalidKeySpecException::new,\n+                        result.getParams());\n+                    yield result;\n+                } finally {\n+                    KeyUtil.clear(encoded, p8key);\n@@ -166,5 +177,0 @@\n-                XDHPublicKeyImpl result =\n-                    new XDHPublicKeyImpl(p8key.getPubKeyEncoded());\n-                checkLockedParams(InvalidKeySpecException::new,\n-                    result.getParams());\n-                yield result;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/XDHKeyFactory.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import sun.security.util.KeyUtil;\n@@ -155,3 +156,10 @@\n-                PKCS8Key p8key = new EdDSAPrivateKeyImpl(p8.getEncoded());\n-                if (!p8key.hasPublicKey()) {\n-                    throw new InvalidKeySpecException(\"No public key found.\");\n+                byte[] encoded = p8.getEncoded();\n+                PKCS8Key p8key = null;\n+                try {\n+                     p8key = new EdDSAPrivateKeyImpl(encoded);\n+                    if (!p8key.hasPublicKey()) {\n+                        throw new InvalidKeySpecException(\"No public key found.\");\n+                    }\n+                    yield new EdDSAPublicKeyImpl(p8key.getPubKeyEncoded());\n+                } finally {\n+                    KeyUtil.clear(encoded, p8key);\n@@ -159,1 +167,0 @@\n-                yield new EdDSAPublicKeyImpl(p8key.getPubKeyEncoded());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ed\/EdDSAKeyFactory.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -314,3 +314,5 @@\n-        byte[] result = pkcs8Key.generateEncoding().clone();\n-        pkcs8Key.clear();\n-        return result;\n+        try {\n+            return pkcs8Key.generateEncoding().clone();\n+        } finally {\n+            pkcs8Key.clear();\n+        }\n@@ -328,1 +330,1 @@\n-                encodedKey = generateEncoding();\n+                generateEncoding();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    \/\/ EC 256 with a domain parameter & public key\n","filename":"test\/jdk\/java\/security\/PEM\/PEMData.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}