{"files":[{"patch":"@@ -404,0 +404,9 @@\n+JVM_ENTRY_NO_ENV(jlong, jfr_host_total_swap_memory(JNIEnv* env, jclass jvm))\n+#ifdef LINUX\n+  \/\/ We want the host swap memory, not the container value.\n+  return os::Linux::host_swap();\n+#else\n+  return os::total_swap_space();\n+#endif\n+JVM_END\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -160,0 +160,2 @@\n+jlong JNICALL jfr_host_total_swap_memory(JNIEnv* env, jclass jvm);\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+      (char*)\"hostTotalSwapMemory\", (char*)\"()J\", (void*) jfr_host_total_swap_memory,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, DataDog. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, DataDog. All rights reserved.\n@@ -83,0 +83,5 @@\n+\n+    @Label(\"Container Host Total Swap Memory\")\n+    @Description(\"Total swap memory of the host running the container\")\n+    @DataAmount\n+    public long hostTotalSwapMemory;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerConfigurationEvent.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -630,0 +630,6 @@\n+    \/**\n+     * Returns the total amount of swap memory of the host system whether or not this\n+     * JVM runs in a container.\n+     *\/\n+    public static native long hostTotalSwapMemory();\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -190,0 +190,1 @@\n+            t.hostTotalSwapMemory = JVM.hostTotalSwapMemory();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -132,1 +132,2 @@\n-            .shouldContain(totalMem + \" = \" + hostTotalMemory);\n+            .shouldContain(totalMem + \" = \" + hostTotalMemory)\n+            .shouldContain(\"hostTotalSwapMemory\");\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFREvents.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}