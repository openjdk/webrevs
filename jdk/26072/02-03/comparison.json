{"files":[{"patch":"@@ -6806,0 +6806,1 @@\n+  block_comment(\"spin_wait\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @requires vm.debug\n@@ -53,4 +54,0 @@\n-    private static String retInst = \"ret\";\n-    private static String neededAddInst = \"addsp,sp,#0x20\";\n-    private static String neededLdpInst = \"ldpx29,x30,[sp,#16]\";\n-\n@@ -94,6 +91,0 @@\n-        if (analyzer.contains(\"[MachCode]\")) {\n-            spinWaitInst = getSpinWaitInstHex(spinWaitInst);\n-            retInst = \"c0035fd6\";\n-            neededAddInst = \"ff830091\";\n-            neededLdpInst = \"fd7b41a9\";\n-        }\n@@ -117,3 +108,1 @@\n-    private static ArrayList<String> getInstrs(OutputAnalyzer output) {\n-        Iterator<String> iter = output.asLines().listIterator();\n-\n+    private static int countInstructions(Iterator<String> iter, String instr) {\n@@ -121,1 +110,1 @@\n-        ArrayList<String> instrs = new ArrayList<String>();\n+        int foundInstCount = 0;\n@@ -137,3 +126,3 @@\n-            for (String instr : line.split(\"\\\\|\")) {\n-                if (instr.startsWith(retInst)) {\n-                    return instrs;\n+            for (String s : line.split(\"\\\\|\")) {\n+                if (!s.startsWith(instr)) {\n+                    return foundInstCount;\n@@ -141,1 +130,1 @@\n-                instrs.add(instr);\n+                foundInstCount++;\n@@ -144,1 +133,1 @@\n-        return instrs;\n+        return foundInstCount;\n@@ -147,2 +136,2 @@\n-    \/\/ The expected output of PrintAssembly for example for a spin wait with three NOPs\n-    \/\/ if JVM finds the hsdis library the output is like:\n+    \/\/ The expected output for a spin wait with three NOPs\n+    \/\/ if the hsdis library is available:\n@@ -150,1 +139,1 @@\n-    \/\/ 0x0000000111dfa588:   b.ne    0x0000000111dfa5c4\n+    \/\/ ;; spin_wait\n@@ -155,5 +144,0 @@\n-    \/\/ 0x0000000111dfa59c:   add    sp, sp, #0x20\n-    \/\/ 0x0000000111dfa5a0:   ldr    x8, [x28, #40]              ;   {poll_return}\n-    \/\/ 0x0000000111dfa5a4:   cmp    sp, x8\n-    \/\/ 0x0000000111dfa5a8:   b.hi    0x0000000111dfa5b0  \/\/ b.pmore\n-    \/\/ 0x0000000111dfa5ac:   ret\n@@ -162,4 +146,3 @@\n-    \/\/ 1. Check whether printed instructions are disassembled (\"[Disassembly]\") or in hex form (\"[MachCode]\").\n-    \/\/ 2. Look for RET instruction and collect all seen instructions.\n-    \/\/ 3. In reverse order, search for 'add    sp, sp, #0x20' and 'ldp    x29, x30, [sp, #16]'.\n-    \/\/ 4. Count spin wait instructions.\n+    \/\/ 1. Check whether printed instructions are disassembled (\"[Disassembly]\").\n+    \/\/ 2. Look for the block comment ';; spin_wait'.\n+    \/\/ 3. Count spin wait instructions.\n@@ -167,13 +150,11 @@\n-        ArrayList<String> instrs = getInstrs(output);\n-\n-        \/\/ From the end of the list, look for the following instructions:\n-        \/\/   ldp     x29, x30, [sp, #16]\n-        \/\/   add     sp, sp, #0x20\n-        \/\/ or their hex form if a disassembler is not available:\n-        \/\/   fd7b41a9\n-        \/\/   ff830091\n-        ListIterator<String> instrReverseIter = instrs.listIterator(instrs.size());\n-        while (instrReverseIter.hasPrevious()) {\n-          String s = instrReverseIter.previous();\n-          instrReverseIter.next();\n-            if (instrReverseIter.previous().startsWith(neededAddInst)) {\n+        Iterator<String> iter = output.asLines().listIterator();\n+        String line = null;\n+        boolean isDisassembled = false;\n+        while (iter.hasNext()) {\n+            line = iter.next();\n+            if (line.contains(\"[Disassembly]\")) {\n+                isDisassembled = true;\n+                break;\n+            }\n+\n+            if (line.contains(\"[MachCode]\")) {\n@@ -184,7 +165,6 @@\n-        int foundInstCount = 0;\n-        if (instrReverseIter.hasPrevious() && instrReverseIter.previous().startsWith(neededLdpInst)) {\n-            while (instrReverseIter.hasPrevious()) {\n-                if (!instrReverseIter.previous().startsWith(spinWaitInst)) {\n-                    break;\n-                }\n-                ++foundInstCount;\n+        boolean foundSpinWaitBlock = false;\n+        while (iter.hasNext()) {\n+            line = iter.next();\n+            if (line.contains(\";; spin_wait\")) {\n+                foundSpinWaitBlock = true;\n+                break;\n@@ -194,0 +174,7 @@\n+        if (!foundSpinWaitBlock) {\n+            throw new RuntimeException(\"Block comment ';; spin_wait' not found\");\n+        }\n+\n+        final String expectedInstInOutput = isDisassembled ? spinWaitInst : getSpinWaitInstHex(spinWaitInst);\n+        final int foundInstCount = countInstructions(iter, expectedInstInOutput); \n+\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64.java","additions":38,"deletions":51,"binary":false,"changes":89,"status":"modified"}]}