{"files":[{"patch":"@@ -85,2 +85,0 @@\n-compiler\/onSpinWait\/TestOnSpinWaitAArch64.java 8360936 linux-aarch64,macosx-aarch64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,5 @@\n+\n+    private static String retInst = \"ret\";\n+    private static String neededAddInst = \"addsp,sp,#0x20\";\n+    private static String neededLdpInst = \"ldpx29,x30,[sp,#16]\";\n+\n@@ -89,0 +94,6 @@\n+        if (analyzer.contains(\"[MachCode]\")) {\n+            spinWaitInst = getSpinWaitInstHex(spinWaitInst);\n+            retInst = \"c0035fd6\";\n+            neededAddInst = \"ff830091\";\n+            neededLdpInst = \"fd7b41a9\";\n+        }\n@@ -94,1 +105,1 @@\n-          return \"1f20 03d5\";\n+          return \"1f2003d5\";\n@@ -96,1 +107,1 @@\n-          return \"df3f 03d5\";\n+          return \"df3f03d5\";\n@@ -98,1 +109,1 @@\n-          return \"3f20 03d5\";\n+          return \"3f2003d5\";\n@@ -100,1 +111,1 @@\n-          return \"ff30 03d5\";\n+          return \"ff3003d5\";\n@@ -106,36 +117,1 @@\n-    private static void addInstrs(String line, ArrayList<String> instrs) {\n-        for (String instr : line.split(\"\\\\|\")) {\n-            instrs.add(instr.trim());\n-        }\n-    }\n-\n-    \/\/ The expected output of PrintAssembly for example for a spin wait with three NOPs:\n-    \/\/\n-    \/\/ # {method} {0x0000ffff6ac00370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\n-    \/\/ #           [sp+0x40]  (sp of caller)\n-    \/\/ 0x0000ffff9d557680: 1f20 03d5 | e953 40d1 | 3f01 00f9 | ff03 01d1 | fd7b 03a9 | 1f20 03d5 | 1f20 03d5\n-    \/\/\n-    \/\/ 0x0000ffff9d5576ac: ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n-    \/\/                     ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0 (line 161)\n-    \/\/ 0x0000ffff9d5576ac: 1f20 03d5 | fd7b 43a9 | ff03 0191\n-    \/\/\n-    \/\/ The checkOutput method adds hex instructions before 'invokestatic onSpinWait' and from the line after\n-    \/\/ it to a list. The list is traversed from the end to count spin wait instructions.\n-    \/\/\n-    \/\/ If JVM finds the hsdis library the output is like:\n-    \/\/\n-    \/\/ # {method} {0x0000ffff63000370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\n-    \/\/ #           [sp+0x20]  (sp of caller)\n-    \/\/ 0x0000ffffa409da80:   nop\n-    \/\/ 0x0000ffffa409da84:   sub sp, sp, #0x20\n-    \/\/ 0x0000ffffa409da88:   stp x29, x30, [sp, #16]         ;*synchronization entry\n-    \/\/                                                       ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@-1 (line 187)\n-    \/\/ 0x0000ffffa409da8c:   nop\n-    \/\/ 0x0000ffffa409da90:   nop\n-    \/\/ 0x0000ffffa409da94:   nop\n-    \/\/ 0x0000ffffa409da98:   nop\n-    \/\/ 0x0000ffffa409da9c:   nop\n-    \/\/ 0x0000ffffa409daa0:   nop\n-    \/\/ 0x0000ffffa409daa4:   nop                                 ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n-    \/\/                                                           ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0 (line 187)\n-    private static void checkOutput(OutputAnalyzer output, String spinWaitInst, int spinWaitInstCount) {\n+    private static ArrayList<String> getInstrs(OutputAnalyzer output) {\n@@ -144,6 +120,0 @@\n-        String match = skipTo(iter, \"'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\");\n-        if (match == null) {\n-            throw new RuntimeException(\"Missing compiler output for the method compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test\");\n-        }\n-\n-        ArrayList<String> instrs = new ArrayList<String>();\n@@ -151,1 +121,1 @@\n-        boolean hasHexInstInOutput = false;\n+        ArrayList<String> instrs = new ArrayList<String>();\n@@ -153,3 +123,3 @@\n-            line = iter.next();\n-            if (line.contains(\"*invokestatic onSpinWait\")) {\n-                break;\n+            line = iter.next().trim();\n+            if (!line.startsWith(\"0x\")) {\n+                continue;\n@@ -157,2 +127,3 @@\n-            if (!hasHexInstInOutput) {\n-                hasHexInstInOutput = line.contains(\"|\");\n+            int pos = line.indexOf(':');\n+            if (pos == -1 || pos == line.length() - 1) {\n+                continue;\n@@ -160,4 +131,0 @@\n-            if (line.contains(\"0x\") && !line.contains(\";\")) {\n-                addInstrs(line, instrs);\n-            }\n-        }\n@@ -165,12 +132,3 @@\n-        if (!iter.hasNext() || !iter.next().contains(\"- compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0\") || !iter.hasNext()) {\n-            throw new RuntimeException(\"Missing compiler output for Thread.onSpinWait intrinsic\");\n-        }\n-\n-        String strToSearch = null;\n-        if (!hasHexInstInOutput) {\n-            instrs.add(line.split(\";\")[0].trim());\n-            strToSearch = spinWaitInst;\n-        } else {\n-            line = iter.next();\n-            if (!line.contains(\"0x\") || line.contains(\";\")) {\n-                throw new RuntimeException(\"Expected hex instructions\");\n+            line = line.substring(pos + 1).replaceAll(\"\\\\s\", \"\");\n+            if (line.startsWith(\";\")) {\n+                continue;\n@@ -179,2 +137,6 @@\n-            addInstrs(line, instrs);\n-            strToSearch = getSpinWaitInstHex(spinWaitInst);\n+            for (String instr : line.split(\"\\\\|\")) {\n+                if (instr.startsWith(retInst)) {\n+                    return instrs;\n+                }\n+                instrs.add(instr);\n+            }\n@@ -182,0 +144,2 @@\n+        return instrs;\n+    }\n@@ -183,2 +147,28 @@\n-        int foundInstCount = 0;\n-\n+    \/\/ The expected output of PrintAssembly for example for a spin wait with three NOPs\n+    \/\/ if JVM finds the hsdis library the output is like:\n+    \/\/\n+    \/\/ 0x0000000111dfa588:   b.ne    0x0000000111dfa5c4\n+    \/\/ 0x0000000111dfa58c:   nop\n+    \/\/ 0x0000000111dfa590:   nop\n+    \/\/ 0x0000000111dfa594:   nop\n+    \/\/ 0x0000000111dfa598:   ldp    x29, x30, [sp, #16]\n+    \/\/ 0x0000000111dfa59c:   add    sp, sp, #0x20\n+    \/\/ 0x0000000111dfa5a0:   ldr    x8, [x28, #40]              ;   {poll_return}\n+    \/\/ 0x0000000111dfa5a4:   cmp    sp, x8\n+    \/\/ 0x0000000111dfa5a8:   b.hi    0x0000000111dfa5b0  \/\/ b.pmore\n+    \/\/ 0x0000000111dfa5ac:   ret\n+    \/\/\n+    \/\/ We work as follows:\n+    \/\/ 1. Check whether printed instructions are disassembled (\"[Disassembly]\") or in hex form (\"[MachCode]\").\n+    \/\/ 2. Look for RET instruction and collect all seen instructions.\n+    \/\/ 3. In reverse order, search for 'add    sp, sp, #0x20' and 'ldp    x29, x30, [sp, #16]'.\n+    \/\/ 4. Count spin wait instructions.\n+    private static void checkOutput(OutputAnalyzer output, String spinWaitInst, int spinWaitInstCount) {\n+        ArrayList<String> instrs = getInstrs(output);\n+\n+        \/\/ From the end of the list, look for the following instructions:\n+        \/\/   ldp     x29, x30, [sp, #16]\n+        \/\/   add     sp, sp, #0x20\n+        \/\/ or their hex form if a disassembler is not available:\n+        \/\/   fd7b41a9\n+        \/\/   ff830091\n@@ -187,2 +177,3 @@\n-            if (instrReverseIter.previous().endsWith(strToSearch)) {\n-                foundInstCount = 1;\n+          String s = instrReverseIter.previous();\n+          instrReverseIter.next();\n+            if (instrReverseIter.previous().startsWith(neededAddInst)) {\n@@ -193,3 +184,7 @@\n-        while (instrReverseIter.hasPrevious()) {\n-            if (!instrReverseIter.previous().endsWith(strToSearch)) {\n-                break;\n+        int foundInstCount = 0;\n+        if (instrReverseIter.hasPrevious() && instrReverseIter.previous().startsWith(neededLdpInst)) {\n+            while (instrReverseIter.hasPrevious()) {\n+                if (!instrReverseIter.previous().startsWith(spinWaitInst)) {\n+                    break;\n+                }\n+                ++foundInstCount;\n@@ -197,1 +192,0 @@\n-            ++foundInstCount;\n@@ -201,10 +195,1 @@\n-            throw new RuntimeException(\"Wrong instruction \" + strToSearch + \" count \" + foundInstCount + \"!\\n  -- expecting \" + spinWaitInstCount);\n-        }\n-    }\n-\n-    private static String skipTo(Iterator<String> iter, String substring) {\n-        while (iter.hasNext()) {\n-            String nextLine = iter.next();\n-            if (nextLine.contains(substring)) {\n-                return nextLine;\n-            }\n+            throw new RuntimeException(\"Expect \" + spinWaitInstCount + \" \" + spinWaitInst + \" instructions. Found: \" + foundInstCount);\n@@ -212,1 +197,0 @@\n-        return null;\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64.java","additions":73,"deletions":89,"binary":false,"changes":162,"status":"modified"}]}