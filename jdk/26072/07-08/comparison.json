{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import java.util.Arrays;\n@@ -49,0 +50,1 @@\n+import java.util.function.Function;\n@@ -117,1 +119,1 @@\n-    private static void checkOutput(OutputAnalyzer output, String spinWaitInst, int expectedCount) {\n+    private static void checkOutput(OutputAnalyzer output, final String spinWaitInst, final int expectedCount) {\n@@ -147,1 +149,17 @@\n-        final String expectedInst = isDisassembled ? spinWaitInst : getSpinWaitInstHex(spinWaitInst);\n+        Function<String, Integer> countExpectedInstFunc = null;\n+        if (isDisassembled) {\n+            \/\/ When code is disassembled, we have one instruction per line.\n+            countExpectedInstFunc = (s) ->\n+            {\n+                return s.startsWith(spinWaitInst) ? 1 : 0;\n+            };\n+        } else {\n+            final String expectedInst = getSpinWaitInstHex(spinWaitInst);\n+            \/\/ Otherwise, there can be multiple hex instructions separated by '|'\n+            countExpectedInstFunc = (s) ->\n+            {\n+                return (int)Arrays.stream(s.split(\"\\\\|\"))\n+                                  .takeWhile(i -> i.startsWith(expectedInst))\n+                                  .count();\n+            };\n+        }\n@@ -151,1 +169,1 @@\n-            if (line.startsWith(\";;}\")) {\n+            if (line.startsWith(\";; }\")) {\n@@ -165,5 +183,1 @@\n-            for (String s : line.split(\"\\\\|\")) {\n-                if (s.startsWith(expectedInst)) {\n-                    foundCount++;\n-                }\n-            }\n+            foundCount += countExpectedInstFunc.apply(line);\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"}]}