{"files":[{"patch":"@@ -6806,0 +6806,1 @@\n+  block_comment(\"spin_wait {\");\n@@ -6824,0 +6825,1 @@\n+  block_comment(\"}\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,2 +85,0 @@\n-compiler\/onSpinWait\/TestOnSpinWaitAArch64.java 8360936 linux-aarch64,macosx-aarch64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @requires vm.debug\n@@ -45,0 +46,1 @@\n+import java.util.Arrays;\n@@ -48,0 +50,1 @@\n+import java.util.function.Function;\n@@ -52,0 +55,1 @@\n+\n@@ -94,1 +98,1 @@\n-          return \"1f20 03d5\";\n+          return \"1f2003d5\";\n@@ -96,1 +100,1 @@\n-          return \"df3f 03d5\";\n+          return \"df3f03d5\";\n@@ -98,1 +102,1 @@\n-          return \"3f20 03d5\";\n+          return \"3f2003d5\";\n@@ -100,1 +104,1 @@\n-          return \"ff30 03d5\";\n+          return \"ff3003d5\";\n@@ -106,7 +110,2 @@\n-    private static void addInstrs(String line, ArrayList<String> instrs) {\n-        for (String instr : line.split(\"\\\\|\")) {\n-            instrs.add(instr.trim());\n-        }\n-    }\n-\n-    \/\/ The expected output of PrintAssembly for example for a spin wait with three NOPs:\n+    \/\/ The expected output for a spin wait with three NOPs\n+    \/\/ if the hsdis library is available:\n@@ -114,3 +113,5 @@\n-    \/\/ # {method} {0x0000ffff6ac00370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\n-    \/\/ #           [sp+0x40]  (sp of caller)\n-    \/\/ 0x0000ffff9d557680: 1f20 03d5 | e953 40d1 | 3f01 00f9 | ff03 01d1 | fd7b 03a9 | 1f20 03d5 | 1f20 03d5\n+    \/\/ ;; spin_wait {\n+    \/\/ 0x0000000111dfa58c:   nop\n+    \/\/ 0x0000000111dfa590:   nop\n+    \/\/ 0x0000000111dfa594:   nop\n+    \/\/ ;; }\n@@ -118,24 +119,1 @@\n-    \/\/ 0x0000ffff9d5576ac: ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n-    \/\/                     ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0 (line 161)\n-    \/\/ 0x0000ffff9d5576ac: 1f20 03d5 | fd7b 43a9 | ff03 0191\n-    \/\/\n-    \/\/ The checkOutput method adds hex instructions before 'invokestatic onSpinWait' and from the line after\n-    \/\/ it to a list. The list is traversed from the end to count spin wait instructions.\n-    \/\/\n-    \/\/ If JVM finds the hsdis library the output is like:\n-    \/\/\n-    \/\/ # {method} {0x0000ffff63000370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\n-    \/\/ #           [sp+0x20]  (sp of caller)\n-    \/\/ 0x0000ffffa409da80:   nop\n-    \/\/ 0x0000ffffa409da84:   sub sp, sp, #0x20\n-    \/\/ 0x0000ffffa409da88:   stp x29, x30, [sp, #16]         ;*synchronization entry\n-    \/\/                                                       ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@-1 (line 187)\n-    \/\/ 0x0000ffffa409da8c:   nop\n-    \/\/ 0x0000ffffa409da90:   nop\n-    \/\/ 0x0000ffffa409da94:   nop\n-    \/\/ 0x0000ffffa409da98:   nop\n-    \/\/ 0x0000ffffa409da9c:   nop\n-    \/\/ 0x0000ffffa409daa0:   nop\n-    \/\/ 0x0000ffffa409daa4:   nop                                 ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n-    \/\/                                                           ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0 (line 187)\n-    private static void checkOutput(OutputAnalyzer output, String spinWaitInst, int spinWaitInstCount) {\n+    private static void checkOutput(OutputAnalyzer output, final String spinWaitInst, final int expectedCount) {\n@@ -144,8 +122,2 @@\n-        String match = skipTo(iter, \"'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\");\n-        if (match == null) {\n-            throw new RuntimeException(\"Missing compiler output for the method compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test\");\n-        }\n-\n-        ArrayList<String> instrs = new ArrayList<String>();\n-        String line = null;\n-        boolean hasHexInstInOutput = false;\n+        \/\/ 1. Check whether printed instructions are disassembled\n+        boolean isDisassembled = false;\n@@ -153,2 +125,3 @@\n-            line = iter.next();\n-            if (line.contains(\"*invokestatic onSpinWait\")) {\n+            String line = iter.next();\n+            if (line.contains(\"[Disassembly]\")) {\n+                isDisassembled = true;\n@@ -157,5 +130,2 @@\n-            if (!hasHexInstInOutput) {\n-                hasHexInstInOutput = line.contains(\"|\");\n-            }\n-            if (line.contains(\"0x\") && !line.contains(\";\")) {\n-                addInstrs(line, instrs);\n+            if (line.contains(\"[MachCode]\")) {\n+                break;\n@@ -165,2 +135,11 @@\n-        if (!iter.hasNext() || !iter.next().contains(\"- compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0\") || !iter.hasNext()) {\n-            throw new RuntimeException(\"Missing compiler output for Thread.onSpinWait intrinsic\");\n+        \/\/ 2. Look for the block comment\n+        boolean foundHead = false;\n+        while (iter.hasNext()) {\n+            String line = iter.next().trim();\n+            if (line.contains(\";; spin_wait {\")) {\n+                foundHead = true;\n+                break;\n+            }\n+        }\n+        if (!foundHead) {\n+            throw new RuntimeException(\"Block comment not found\");\n@@ -169,4 +148,8 @@\n-        String strToSearch = null;\n-        if (!hasHexInstInOutput) {\n-            instrs.add(line.split(\";\")[0].trim());\n-            strToSearch = spinWaitInst;\n+        \/\/ 3. Count spin wait instructions\n+        Function<String, Integer> countExpectedInstFunc = null;\n+        if (isDisassembled) {\n+            \/\/ When code is disassembled, we have one instruction per line.\n+            countExpectedInstFunc = (s) ->\n+            {\n+                return s.startsWith(spinWaitInst) ? 1 : 0;\n+            };\n@@ -174,7 +157,8 @@\n-            line = iter.next();\n-            if (!line.contains(\"0x\") || line.contains(\";\")) {\n-                throw new RuntimeException(\"Expected hex instructions\");\n-            }\n-\n-            addInstrs(line, instrs);\n-            strToSearch = getSpinWaitInstHex(spinWaitInst);\n+            final String expectedInst = getSpinWaitInstHex(spinWaitInst);\n+            \/\/ Otherwise, there can be multiple hex instructions separated by '|'\n+            countExpectedInstFunc = (s) ->\n+            {\n+                return (int)Arrays.stream(s.split(\"\\\\|\"))\n+                                  .takeWhile(i -> i.startsWith(expectedInst))\n+                                  .count();\n+            };\n@@ -182,7 +166,4 @@\n-\n-        int foundInstCount = 0;\n-\n-        ListIterator<String> instrReverseIter = instrs.listIterator(instrs.size());\n-        while (instrReverseIter.hasPrevious()) {\n-            if (instrReverseIter.previous().endsWith(strToSearch)) {\n-                foundInstCount = 1;\n+        int foundCount = 0;\n+        while (iter.hasNext()) {\n+            String line = iter.next().trim();\n+            if (line.startsWith(\";; }\")) {\n@@ -191,5 +172,2 @@\n-        }\n-\n-        while (instrReverseIter.hasPrevious()) {\n-            if (!instrReverseIter.previous().endsWith(strToSearch)) {\n-                break;\n+            if (!line.startsWith(\"0x\")) {\n+                continue;\n@@ -197,1 +175,9 @@\n-            ++foundInstCount;\n+            int pos = line.indexOf(':');\n+            if (pos == -1 || pos == line.length() - 1) {\n+                continue;\n+            }\n+            line = line.substring(pos + 1).replaceAll(\"\\\\s\", \"\");\n+            if (line.startsWith(\";\")) {\n+                continue;\n+            }\n+            foundCount += countExpectedInstFunc.apply(line);\n@@ -200,11 +186,2 @@\n-        if (foundInstCount != spinWaitInstCount) {\n-            throw new RuntimeException(\"Wrong instruction \" + strToSearch + \" count \" + foundInstCount + \"!\\n  -- expecting \" + spinWaitInstCount);\n-        }\n-    }\n-\n-    private static String skipTo(Iterator<String> iter, String substring) {\n-        while (iter.hasNext()) {\n-            String nextLine = iter.next();\n-            if (nextLine.contains(substring)) {\n-                return nextLine;\n-            }\n+        if (foundCount != expectedCount) {\n+            throw new RuntimeException(\"Expected \" + expectedCount + \" \" + spinWaitInst + \" instructions. Found: \" + foundCount);\n@@ -212,1 +189,0 @@\n-        return null;\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64.java","additions":67,"deletions":91,"binary":false,"changes":158,"status":"modified"}]}