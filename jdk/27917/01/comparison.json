{"files":[{"patch":"@@ -28,0 +28,1 @@\n+test\/benchmarks\/**\/target\n","filename":".gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+# Javac microbenchmarks\n+\n+The Javac Microbenchmarks is a collection of microbenchmarks for measuring\n+the performance of Javac API using the\n+[JMH](http:\/\/openjdk.java.net\/projects\/code-tools\/jmh\/) framework.\n+\n+\n+## Building and running the project\n+\n+Currently, the project can be built and run with JDK 9 and later. This is\n+a Maven project and is built by:\n+\n+    $ mvn clean install\n+\n+After building, the executable jar is target\/micros-javac-[version].jar.\n+Run the benchmarks with:\n+\n+    $ java -jar target\/micros-javac-*.jar [optional jmh parameters]\n+\n+See the entire list of benchmarks using:\n+\n+    $ java -jar target\/micros-javacs-*.jar -l [optional regex to select benchmarks]\n+\n+For example:\n+\n+    $ java -jar target\/micros-javac-1.0-SNAPSHOT.jar -l\n+    Benchmarks:\n+    org.openjdk.bench.langtools.javac.GroupJavacBenchmark.coldGroup\n+    org.openjdk.bench.langtools.javac.GroupJavacBenchmark.hotGroup\n+    org.openjdk.bench.langtools.javac.SingleJavacBenchmark.compileCold\n+    org.openjdk.bench.langtools.javac.SingleJavacBenchmark.compileHot\n+\n+And the same regex syntax works to run some test:\n+\n+    $ java -jar target\/micros-javac-1.0-SNAPSHOT.jar SingleJavacBenchmark.compileHot\n+\n+## Troubleshooting\n+\n+### Build of micros-javac module got stuck\n+\n+If you build got stuck on `[get] Getting: https:\/\/download.java.net\/openjdk\/jdk11\/ri\/openjdk-11+28_windows-x64_bin.zip` then you are probably experiencing some networking or web proxy obstacles.\n+\n+One solution is to download required reference JDK from [https:\/\/download.java.net\/openjdk\/jdk11\/ri\/openjdk-11+28_windows-x64_bin.zip](https:\/\/download.java.net\/openjdk\/jdk11\/ri\/openjdk-11+28_windows-x64_bin.zip) manually and then build the project with property pointing to the local copy:\n+\n+    $ mvn clean install -Djavac.benchmark.openjdk.zip.download.url=file:\/\/\/<your download location>\/openjdk-11+28_windows-x64_bin.zip\n+\n+Note: Please use `openjdk-11+28_windows-x64_bin.zip` to build the project no matter what target platform is.\n+\n+Another solution might be to add proxy settings:\n+\n+    $ mvn -Dhttps.proxyHost=... -Dhttps.proxyPort=... clean install\n+\n+### Execution of micros-javac benchmarks takes several hours\n+\n+micros-javac benchmarks consist of two sets of benchmarks:\n+ * `SingleJavacBenchmark` (which is parametrized) measures each single javac compilation stage in an isolated run. This benchmark is designed for exact automated performance regression testing and it takes several hours to execute completely.\n+ * `GroupJavacBenchmark` is grouping the measurements of all javac compilation stages into one run and its execution should take less than 30 minutes on a regular developers computer.\n+\n+Solution to speed up javac benchmarking is to select only `GroupJavacBenchmark` for execution using following command line:\n+\n+\t  $ java -jar target\/micros-javac-1.0-SNAPSHOT.jar .*GroupJavacBenchmark.*\n","filename":"test\/benchmarks\/micros-javac\/README.md","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/maven-v4_0_0.xsd\">\n+    <!--\n+     Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+     DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+     This code is free software; you can redistribute it and\/or modify it\n+     under the terms of the GNU General Public License version 2 only, as\n+     published by the Free Software Foundation.\n+\n+     This code is distributed in the hope that it will be useful, but WITHOUT\n+     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+     version 2 for more details (a copy is included in the LICENSE file that\n+     accompanied this code).\n+\n+     You should have received a copy of the GNU General Public License version\n+     2 along with this work; if not, write to the Free Software Foundation,\n+     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+     or visit www.oracle.com if you need additional information or have any\n+     questions.\n+    -->\n+    <modelVersion>4.0.0<\/modelVersion>\n+    <groupId>org.openjdk<\/groupId>\n+    <artifactId>micros-javac<\/artifactId>\n+    <packaging>jar<\/packaging>\n+    <version>1.0-SNAPSHOT<\/version>\n+    <name>OpenJDK Microbenchmark of Java Compile<\/name>\n+    <properties>\n+        <javac.benchmark.openjdk.zip.download.url>https:\/\/download.java.net\/openjdk\/jdk11\/ri\/openjdk-11+28_windows-x64_bin.zip<\/javac.benchmark.openjdk.zip.download.url>\n+        <project.build.sourceEncoding>UTF-8<\/project.build.sourceEncoding>\n+        <jmh.version>1.36<\/jmh.version>\n+    <\/properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-shade-plugin<\/artifactId>\n+                <version>3.6.1<\/version>\n+                <executions>\n+                    <execution>\n+                        <phase>package<\/phase>\n+                        <goals>\n+                            <goal>shade<\/goal>\n+                        <\/goals>\n+                        <configuration>\n+                            <transformers>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                                    <mainClass>org.openjdk.jmh.Main<\/mainClass>\n+                                <\/transformer>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n+                                    <resource>META-INF\/BenchmarkList<\/resource>\n+                                <\/transformer>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n+                                    <resource>META-INF\/CompilerHints<\/resource>\n+                                <\/transformer>\n+                            <\/transformers>\n+                            <createDependencyReducedPom>false<\/createDependencyReducedPom>\n+                        <\/configuration>\n+                    <\/execution>\n+                <\/executions>\n+            <\/plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-compiler-plugin<\/artifactId>\n+                <version>3.14.1<\/version>\n+                <configuration>\n+                    <source>1.8<\/source>\n+                    <target>1.8<\/target>\n+                    <annotationProcessorPaths>\n+                        <path>\n+                            <groupId>org.openjdk.jmh<\/groupId>\n+                            <artifactId>jmh-generator-annprocess<\/artifactId>\n+                            <version>${jmh.version}<\/version>\n+                        <\/path>\n+                    <\/annotationProcessorPaths>\n+                <\/configuration>\n+            <\/plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-release-plugin<\/artifactId>\n+                <version>3.1.1<\/version>\n+            <\/plugin>\n+            <plugin>\n+                <artifactId>maven-deploy-plugin<\/artifactId>\n+                <version>3.1.4<\/version>\n+            <\/plugin>\n+            <plugin>\n+                <artifactId>maven-antrun-plugin<\/artifactId>\n+                <version>3.1.0<\/version>\n+                <executions>\n+                    <execution>\n+                        <phase>process-resources<\/phase>\n+                        <configuration>\n+                            <target>\n+                                <mkdir dir=\"${project.build.outputDirectory}\"\/>\n+                                <get src=\"${javac.benchmark.openjdk.zip.download.url}\" dest=\"${project.build.directory}\/jdk-bin.zip\" skipexisting=\"true\" verbose=\"true\"\/>\n+                                <unzip src=\"${project.build.directory}\/jdk-bin.zip\" dest=\"${project.build.outputDirectory}\">\n+                                    <patternset>\n+                                        <include name=\"*\/lib\/src.zip\"\/>\n+                                        <include name=\"*\/release\"\/>\n+                                    <\/patternset>\n+                                    <mapper type=\"flatten\"\/>\n+                                <\/unzip>\n+                                <loadfile srcFile=\"${project.build.outputDirectory}\/release\" property=\"release.info\"\/>\n+                                <echo>\n+-------------------------------------------------\n+Bundling JDK sources with following release info:\n+-------------------------------------------------\n+${release.info}\n+-------------------------------------------------\n+                                <\/echo>\n+                            <\/target>\n+                        <\/configuration>\n+                        <goals>\n+                            <goal>run<\/goal>\n+                        <\/goals>\n+                    <\/execution>\n+                <\/executions>\n+            <\/plugin>\n+        <\/plugins>\n+    <\/build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.openjdk.jmh<\/groupId>\n+            <artifactId>jmh-core<\/artifactId>\n+            <version>${jmh.version}<\/version>\n+        <\/dependency>\n+        <dependency>\n+            <groupId>org.openjdk.jmh<\/groupId>\n+            <artifactId>jmh-generator-annprocess<\/artifactId>\n+            <version>${jmh.version}<\/version>\n+            <scope>provided<\/scope>\n+        <\/dependency>\n+    <\/dependencies>\n+<\/project>\n","filename":"test\/benchmarks\/micros-javac\/pom.xml","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.langtools.javac;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Group;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@State(Scope.Benchmark)\n+public class GroupJavacBenchmark extends JavacBenchmark {\n+\n+    public static final String COLD_GROUP_NAME = \"coldGroup\";\n+    public static final int COLD_ITERATION_WARMUPS = 0;\n+    public static final int COLD_ITERATIONS = 1;\n+    public static final int COLD_FORK_WARMUPS = 1;\n+    public static final int COLD_FORKS = 15;\n+\n+    public static final String HOT_GROUP_NAME = \"hotGroup\";\n+    public static final int HOT_ITERATION_WARMUPS = 8;\n+    public static final int HOT_ITERATIONS = 10;\n+    public static final int HOT_FORK_WARMUPS = 0;\n+    public static final int HOT_FORKS = 1;\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold1_Init() throws InterruptedException {\n+        Stage.Init.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold2_Parse() throws InterruptedException {\n+        Stage.Parse.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold3_InitModules() throws InterruptedException {\n+        Stage.InitModules.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold4_Enter() throws InterruptedException {\n+        Stage.Enter.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold5_Attribute() throws InterruptedException {\n+        Stage.Attribute.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold6_Flow() throws InterruptedException {\n+        Stage.Flow.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold7_Desugar() throws InterruptedException {\n+        Stage.Desugar.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(COLD_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = COLD_ITERATION_WARMUPS)\n+    @Measurement(iterations = COLD_ITERATIONS)\n+    @Fork(warmups = COLD_FORK_WARMUPS, value = COLD_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void cold8_Generate(Blackhole bh) throws IOException {\n+        compile(bh, Stage.Generate);\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot1_Init() throws InterruptedException {\n+        Stage.Init.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot2_Parse() throws InterruptedException {\n+        Stage.Parse.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot3_InitModules() throws InterruptedException {\n+        Stage.InitModules.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot4_Enter() throws InterruptedException {\n+        Stage.Enter.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot5_Attribute() throws InterruptedException {\n+        Stage.Attribute.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot6_Flow() throws InterruptedException {\n+        Stage.Flow.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot7_Desugar() throws InterruptedException {\n+        Stage.Desugar.waitFor();\n+    }\n+\n+    @Benchmark\n+    @Group(HOT_GROUP_NAME)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = HOT_ITERATION_WARMUPS)\n+    @Measurement(iterations = HOT_ITERATIONS)\n+    @Fork(warmups = HOT_FORK_WARMUPS, value = HOT_FORKS, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void hot8_Generate(Blackhole bh) throws IOException {\n+        compile(bh, Stage.Generate);\n+    }\n+}\n","filename":"test\/benchmarks\/micros-javac\/src\/main\/java\/org\/openjdk\/bench\/langtools\/javac\/GroupJavacBenchmark.java","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"},{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.langtools.javac;\n+\n+import com.sun.tools.javac.comp.AttrContext;\n+import com.sun.tools.javac.comp.Env;\n+import com.sun.tools.javac.file.JavacFileManager;\n+import com.sun.tools.javac.main.JavaCompiler;\n+import com.sun.tools.javac.main.Main;\n+import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Context.Factory;\n+import com.sun.tools.javac.util.List;\n+import com.sun.tools.javac.util.ListBuffer;\n+import com.sun.tools.javac.util.Pair;\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Comparator;\n+import java.util.Queue;\n+import static java.util.logging.Level.FINE;\n+import static java.util.logging.Level.CONFIG;\n+import java.util.logging.Logger;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.tools.FileObject;\n+import javax.tools.ForwardingJavaFileObject;\n+import javax.tools.JavaFileManager;\n+import javax.tools.JavaFileObject;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@State(Scope.Benchmark)\n+public class JavacBenchmark {\n+\n+    static final Logger LOG = Logger.getLogger(JavacBenchmark.class.getName());\n+\n+    public enum Stage {\n+        Init, Parse, InitModules, Enter, Attribute, Flow, Desugar, Generate;\n+\n+        public synchronized void waitFor() throws InterruptedException {\n+            wait();\n+        }\n+        public synchronized void notifyDone() {\n+            notifyAll();\n+            LOG.log(FINE, \"{0} finished.\", this.name());\n+        }\n+        public boolean isAfter(Stage other) {\n+            return ordinal() > other.ordinal();\n+        }\n+    }\n+\n+    private Path root;\n+    private Path srcList;\n+\n+    @Setup(Level.Trial)\n+    public void setup(Blackhole bh) throws IOException, InterruptedException {\n+        LOG.log(CONFIG, \"Release info of the sources to be compiled by the benchmark:\\n{0}\", new String(JavacBenchmark.class.getResourceAsStream(\"\/release\").readAllBytes(), StandardCharsets.UTF_8));\n+        root = Files.createTempDirectory(\"JavacBenchmarkRoot\");\n+        srcList = root.resolve(\"sources.list\");\n+        int i = 0;\n+        try (PrintStream srcListOut = new PrintStream(srcList.toFile())) {\n+            try (ZipInputStream zis = new ZipInputStream(new BufferedInputStream(JavacBenchmark.class.getResourceAsStream(\"\/src.zip\")))) {\n+                for (ZipEntry entry; (entry = zis.getNextEntry()) != null;) {\n+                    final String ename = entry.getName();\n+                    if (!ename.startsWith(\"java.desktop\") && !ename.startsWith(\"jdk.internal.vm.compiler\") && !ename.startsWith(\"jdk.aot\") && !ename.startsWith(\"jdk.accessibility\")) {\n+                        if (!entry.isDirectory() && ename.endsWith(\".java\")) {\n+                            Path dst = root.resolve(ename);\n+                            Files.createDirectories(dst.getParent());\n+                            Files.copy(zis, dst);\n+                            Files.readAllBytes(dst); \/\/reads all the file back to exclude antivirus scanning time from following measurements\n+                            srcListOut.println(dst.toString());\n+                            i++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        Files.walk(root).map(Path::toFile).forEach(File::deleteOnExit); \/\/mark all files and folders for deletion on JVM exit for cases when tearDown is not executed\n+        Thread.sleep(10000); \/\/give some more time for the system to catch a breath for more precise measurement\n+        LOG.log(FINE, \"Extracted {0} sources.\", i);\n+    }\n+\n+    @TearDown(Level.Trial)\n+    public void tearDown() throws IOException {\n+        Files.walk(root).sorted(Comparator.reverseOrder()).map(Path::toFile).forEachOrdered(File::delete);\n+        LOG.fine(\"Sources deleted.\");\n+    }\n+\n+    protected void compile(Blackhole bh, final Stage stopAt) throws IOException {\n+        final OutputStream bhos = new OutputStream() {\n+            @Override\n+            public void write(int b) throws IOException {\n+                bh.consume(b);\n+            }\n+            @Override\n+            public void write(byte[] b, int off, int len) throws IOException {\n+                bh.consume(b);\n+            }\n+        };\n+        final Context ctx = new Context();\n+        \/\/inject JavaCompiler wrapping all measured methods so they directly report to the benchmark\n+        ctx.put(JavaCompiler.compilerKey, (Factory<JavaCompiler>)(c) -> {\n+            return new JavaCompiler(c) {\n+                @Override\n+                public List<JCTree.JCCompilationUnit> parseFiles(Iterable<JavaFileObject> fileObjects) {\n+                    Stage.Init.notifyDone();\n+                    return stopAt.isAfter(Stage.Init) ? super.parseFiles(fileObjects) : List.nil();\n+                }\n+\n+                @Override\n+                public List<JCTree.JCCompilationUnit> initModules(List<JCTree.JCCompilationUnit> roots) {\n+                    Stage.Parse.notifyDone();\n+                    return stopAt.isAfter(Stage.Parse) ? super.initModules(roots) : List.nil();\n+                }\n+\n+                @Override\n+                public List<JCTree.JCCompilationUnit> enterTrees(List<JCTree.JCCompilationUnit> roots) {\n+                    Stage.InitModules.notifyDone();\n+                    return stopAt.isAfter(Stage.InitModules) ? super.enterTrees(roots) : List.nil();\n+                }\n+\n+                @Override\n+                public Queue<Env<AttrContext>> attribute(Queue<Env<AttrContext>> envs) {\n+                    Stage.Enter.notifyDone();\n+                    return stopAt.isAfter(Stage.Enter) ? super.attribute(envs) : new ListBuffer<>();\n+                }\n+\n+                @Override\n+                public Queue<Env<AttrContext>> flow(Queue<Env<AttrContext>> envs) {\n+                    Stage.Attribute.notifyDone();\n+                    return stopAt.isAfter(Stage.Attribute) ? super.flow(envs) : new ListBuffer<>();\n+                }\n+\n+                @Override\n+                public Queue<Pair<Env<AttrContext>, JCTree.JCClassDecl>> desugar(Queue<Env<AttrContext>> envs) {\n+                    Stage.Flow.notifyDone();\n+                    return stopAt.isAfter(Stage.Flow) ? super.desugar(envs) : new ListBuffer<>();\n+                }\n+\n+                @Override\n+                public void generate(Queue<Pair<Env<AttrContext>, JCTree.JCClassDecl>> queue) {\n+                    Stage.Desugar.notifyDone();\n+                    if (stopAt.isAfter(Stage.Desugar)) super.generate(queue);\n+                }\n+            };\n+        });\n+        \/\/JavaFileManager directing all writes to a Blackhole to avoid measurement fluctuations due to delayed filesystem writes\n+        try (JavacFileManager mngr = new JavacFileManager(ctx, true, null) {\n+            @Override\n+            public JavaFileObject getJavaFileForOutput(JavaFileManager.Location arg0, String arg1, JavaFileObject.Kind arg2, FileObject arg3) throws IOException {\n+                return new ForwardingJavaFileObject<JavaFileObject>(super.getJavaFileForOutput(arg0, arg1, arg2, arg3)) {\n+                    @Override\n+                    public OutputStream openOutputStream() throws IOException {\n+                        return bhos;\n+                    }\n+                };\n+            }\n+        }) {\n+            String[] cmdLine = new String[] {\"-XDcompilePolicy=simple\", \"-implicit:none\", \"-nowarn\", \"--module-source-path\", root.toString(), \"-d\", root.toString(), \"-XDignore.symbol.file=true\", \"@\" + srcList.toString()};\n+            if (new Main(\"javac\").compile(cmdLine, ctx).exitCode != 0) {\n+                throw new IOException(\"compilation failed\");\n+            }\n+        }\n+        LOG.fine(\"Compilation finished.\");\n+    }\n+}\n","filename":"test\/benchmarks\/micros-javac\/src\/main\/java\/org\/openjdk\/bench\/langtools\/javac\/JavacBenchmark.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.langtools.javac;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@State(Scope.Benchmark)\n+public class SingleJavacBenchmark extends JavacBenchmark {\n+\n+    @Param\n+    public Stage stopStage;\n+\n+    @Benchmark\n+    @Threads(1)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = 0)\n+    @Measurement(iterations = 1)\n+    @Fork(warmups = 1, value = 15, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void compileCold(Blackhole bh) throws IOException {\n+        compile(bh, stopStage);\n+    }\n+\n+    @Benchmark\n+    @Threads(1)\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @Warmup(iterations = 8)\n+    @Measurement(iterations = 10)\n+    @Fork(warmups = 0, value = 1, jvmArgsPrepend = { \"--add-exports=jdk.compiler\/com.sun.tools.javac.file=ALL-UNNAMED\", \"--add-exports=jdk.compiler\/com.sun.tools.javac.main=ALL-UNNAMED\",  \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\" })\n+    @OutputTimeUnit(TimeUnit.SECONDS)\n+    public void compileHot(Blackhole bh) throws IOException {\n+        compile(bh, stopStage);\n+    }\n+}\n","filename":"test\/benchmarks\/micros-javac\/src\/main\/java\/org\/openjdk\/bench\/langtools\/javac\/SingleJavacBenchmark.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}