{"files":[{"patch":"@@ -50,1 +50,1 @@\n-  flags(ITER_GVN_AFTER_VECTOR,          \"Iter GVN after vector box elimination\") \\\n+  flags(ITER_GVN_AFTER_VECTOR,          \"Iter GVN after Vector Box Elimination\") \\\n@@ -52,4 +52,7 @@\n-  flags(BEFORE_BEAUTIFY_LOOPS,          \"Before beautify loops\") \\\n-  flags(AFTER_BEAUTIFY_LOOPS,           \"After beautify loops\") \\\n-  flags(BEFORE_LOOP_UNROLLING,          \"Before Loop Unrolling\") \\\n-  flags(AFTER_LOOP_UNROLLING,           \"After Loop Unrolling\") \\\n+  flags(PHASEIDEAL_BEFORE_EA,           \"PhaseIdealLoop before EA\") \\\n+  flags(AFTER_EA,                       \"After Escape Analysis\") \\\n+  flags(ITER_GVN_AFTER_EA,              \"Iter GVN after EA\") \\\n+  flags(BEFORE_BEAUTIFY_LOOPS,          \"Before Beautify Loops\") \\\n+  flags(AFTER_BEAUTIFY_LOOPS,           \"After Beautify Loops\") \\\n+  flags(BEFORE_CLOOPS,                  \"Before CountedLoop\") \\\n+  flags(AFTER_CLOOPS,                   \"After CountedLoop\") \\\n@@ -72,0 +75,1 @@\n+  flags(ITER_GVN_AFTER_ELIMINATION,     \"Iter GVN after Eliminating Allocations and Locks\") \\\n@@ -74,11 +78,2 @@\n-  flags(AUTO_VECTORIZATION1_BEFORE_APPLY,                     \"AutoVectorization 1, Before Apply\") \\\n-  flags(AUTO_VECTORIZATION2_AFTER_REORDER,                    \"AutoVectorization 2, After Apply Memop Reordering\") \\\n-  flags(AUTO_VECTORIZATION3_AFTER_ADJUST_LIMIT,               \"AutoVectorization 3, After Adjusting Pre-Loop Limit\") \\\n-  flags(AUTO_VECTORIZATION4_AFTER_SPECULATIVE_RUNTIME_CHECKS, \"AutoVectorization 4, After Adding Speculative Runtime Checks\") \\\n-  flags(AUTO_VECTORIZATION5_AFTER_APPLY,                      \"AutoVectorization 5, After Apply\") \\\n-  flags(BEFORE_CLOOPS,                  \"Before CountedLoop\") \\\n-  flags(AFTER_CLOOPS,                   \"After CountedLoop\") \\\n-  flags(PHASEIDEAL_BEFORE_EA,           \"PhaseIdealLoop before EA\") \\\n-  flags(AFTER_EA,                       \"After Escape Analysis\") \\\n-  flags(ITER_GVN_AFTER_EA,              \"Iter GVN after EA\") \\\n-  flags(ITER_GVN_AFTER_ELIMINATION,     \"Iter GVN after eliminating allocations and locks\") \\\n+  flags(BEFORE_LOOP_UNROLLING,          \"Before Loop Unrolling\") \\\n+  flags(AFTER_LOOP_UNROLLING,           \"After Loop Unrolling\") \\\n@@ -88,0 +83,5 @@\n+  flags(AUTO_VECTORIZATION1_BEFORE_APPLY,                     \"AutoVectorization 1, before Apply\") \\\n+  flags(AUTO_VECTORIZATION2_AFTER_REORDER,                    \"AutoVectorization 2, after Apply Memop Reordering\") \\\n+  flags(AUTO_VECTORIZATION3_AFTER_ADJUST_LIMIT,               \"AutoVectorization 3, after Adjusting Pre-loop Limit\") \\\n+  flags(AUTO_VECTORIZATION4_AFTER_SPECULATIVE_RUNTIME_CHECKS, \"AutoVectorization 4, after Adding Speculative Runtime Checks\") \\\n+  flags(AUTO_VECTORIZATION5_AFTER_APPLY,                      \"AutoVectorization 5, after Apply\") \\\n@@ -97,15 +97,15 @@\n-  flags(BARRIER_EXPANSION,              \"Barrier expand\") \\\n-  flags(OPTIMIZE_FINISHED,              \"Optimize finished\") \\\n-  flags(BEFORE_MATCHING,                \"Before matching\") \\\n-  flags(MATCHING,                       \"After matching\") \\\n-  flags(GLOBAL_CODE_MOTION,             \"Global code motion\") \\\n-  flags(INITIAL_LIVENESS,               \"Initial liveness\") \\\n-  flags(LIVE_RANGE_STRETCHING,          \"Live range stretching\") \\\n-  flags(AGGRESSIVE_COALESCING,          \"Aggressive coalescing\") \\\n-  flags(INITIAL_SPILLING,               \"Initial spilling\") \\\n-  flags(CONSERVATIVE_COALESCING,        \"Conservative coalescing\") \\\n-  flags(ITERATIVE_SPILLING,             \"Iterative spilling\") \\\n-  flags(AFTER_ITERATIVE_SPILLING,       \"After iterative spilling\") \\\n-  flags(POST_ALLOCATION_COPY_REMOVAL,   \"Post-allocation copy removal\") \\\n-  flags(MERGE_MULTI_DEFS,               \"Merge multiple definitions\") \\\n-  flags(FIX_UP_SPILLS,                  \"Fix up spills\") \\\n+  flags(BARRIER_EXPANSION,              \"Barrier Expand\") \\\n+  flags(OPTIMIZE_FINISHED,              \"Optimize Finished\") \\\n+  flags(BEFORE_MATCHING,                \"Before Matching\") \\\n+  flags(MATCHING,                       \"After Matching\") \\\n+  flags(GLOBAL_CODE_MOTION,             \"Global Code Motion\") \\\n+  flags(INITIAL_LIVENESS,               \"Initial Liveness\") \\\n+  flags(LIVE_RANGE_STRETCHING,          \"Live Range Stretching\") \\\n+  flags(AGGRESSIVE_COALESCING,          \"Aggressive Coalescing\") \\\n+  flags(INITIAL_SPILLING,               \"Initial Spilling\") \\\n+  flags(CONSERVATIVE_COALESCING,        \"Conservative Coalescing\") \\\n+  flags(ITERATIVE_SPILLING,             \"Iterative Spilling\") \\\n+  flags(AFTER_ITERATIVE_SPILLING,       \"After Iterative Spilling\") \\\n+  flags(POST_ALLOCATION_COPY_REMOVAL,   \"Post-allocation Copy Removal\") \\\n+  flags(MERGE_MULTI_DEFS,               \"Merge Multiple Definitions\") \\\n+  flags(FIX_UP_SPILLS,                  \"Fix up Spills\") \\\n@@ -115,2 +115,2 @@\n-  flags(POSTALLOC_EXPAND,               \"Post-Allocation Expand\") \\\n-  flags(MACH_ANALYSIS,                  \"After mach analysis\") \\\n+  flags(POSTALLOC_EXPAND,               \"Post-allocation Expand\") \\\n+  flags(MACH_ANALYSIS,                  \"After Mach Analysis\") \\\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    DEFAULT(\"For IR node placeholder strings as defined in class IRNode only\"),\n+    DEFAULT(                        \"For IR node placeholder strings as defined in class IRNode only\"),\n@@ -42,43 +42,25 @@\n-    BEFORE_STRINGOPTS(\"Before StringOpts\"),\n-    AFTER_STRINGOPTS(\"After StringOpts\"),\n-    BEFORE_REMOVEUSELESS(\"Before RemoveUseless\"),\n-    AFTER_PARSING(\"After Parsing\"),\n-    BEFORE_ITER_GVN(\"Before Iter GVN\"),\n-    ITER_GVN1(\"Iter GVN 1\"),\n-    AFTER_ITER_GVN_STEP(\"After Iter GVN Step\"),\n-    AFTER_ITER_GVN(\"After Iter GVN\"),\n-    INCREMENTAL_INLINE_STEP(\"Incremental Inline Step\"),\n-    INCREMENTAL_INLINE_CLEANUP(\"Incremental Inline Cleanup\"),\n-    INCREMENTAL_INLINE(\"Incremental Inline\"),\n-    INCREMENTAL_BOXING_INLINE(\"Incremental Boxing Inline\"),\n-    EXPAND_VUNBOX(\"Expand VectorUnbox\"),\n-    SCALARIZE_VBOX(\"Scalarize VectorBox\"),\n-    INLINE_VECTOR_REBOX(\"Inline Vector Rebox Calls\"),\n-    EXPAND_VBOX(\"Expand VectorBox\"),\n-    ELIMINATE_VBOX_ALLOC(\"Eliminate VectorBoxAllocate\"),\n-    ITER_GVN_BEFORE_EA(\"Iter GVN before EA\"),\n-    ITER_GVN_AFTER_VECTOR(\"Iter GVN after vector box elimination\"),\n-    BEFORE_LOOP_OPTS(\"Before Loop Optimizations\"),\n-    BEFORE_BEAUTIFY_LOOPS(\"Before beautify loops\"),\n-    AFTER_BEAUTIFY_LOOPS(\"After beautify loops\"),\n-    BEFORE_LOOP_UNROLLING(\"Before Loop Unrolling\"),\n-    AFTER_LOOP_UNROLLING(\"After Loop Unrolling\"),\n-    BEFORE_SPLIT_IF(\"Before Split-If\"),\n-    AFTER_SPLIT_IF(\"After Split-If\"),\n-    BEFORE_LOOP_PREDICATION_IC(\"Before Loop Predication IC\"),\n-    AFTER_LOOP_PREDICATION_IC(\"After Loop Predication IC\"),\n-    BEFORE_LOOP_PREDICATION_RC(\"Before Loop Predication RC\"),\n-    AFTER_LOOP_PREDICATION_RC(\"After Loop Predication RC\"),\n-    BEFORE_PARTIAL_PEELING(\"Before Partial Peeling\"),\n-    AFTER_PARTIAL_PEELING(\"After Partial Peeling\"),\n-    BEFORE_LOOP_PEELING(\"Before Loop Peeling\"),\n-    AFTER_LOOP_PEELING(\"After Loop Peeling\"),\n-    BEFORE_LOOP_UNSWITCHING(\"Before Loop Unswitching\"),\n-    AFTER_LOOP_UNSWITCHING(\"After Loop Unswitching\"),\n-    BEFORE_RANGE_CHECK_ELIMINATION(\"Before Range Check Elimination\"),\n-    AFTER_RANGE_CHECK_ELIMINATION(\"After Range Check Elimination\"),\n-    BEFORE_PRE_MAIN_POST(\"Before Pre\/Main\/Post Loops\"),\n-    AFTER_PRE_MAIN_POST(\"After Pre\/Main\/Post Loops\"),\n-    SUPERWORD1_BEFORE_SCHEDULE(\"Superword 1, Before Schedule\"),\n-    SUPERWORD2_BEFORE_OUTPUT(\"Superword 2, Before Output\"),\n-    SUPERWORD3_AFTER_OUTPUT(\"Superword 3, After Output\"),\n+    BEFORE_STRINGOPTS(              \"Before StringOpts\"),\n+    AFTER_STRINGOPTS(               \"After StringOpts\"),\n+    BEFORE_REMOVEUSELESS(           \"Before RemoveUseless\"),\n+    AFTER_PARSING(                  \"After Parsing\"),\n+    BEFORE_ITER_GVN(                \"Before Iter GVN\"),\n+    ITER_GVN1(                      \"Iter GVN 1\"),\n+    AFTER_ITER_GVN_STEP(            \"After Iter GVN Step\"),\n+    AFTER_ITER_GVN(                 \"After Iter GVN\"),\n+    INCREMENTAL_INLINE_STEP(        \"Incremental Inline Step\"),\n+    INCREMENTAL_INLINE_CLEANUP(     \"Incremental Inline Cleanup\"),\n+    INCREMENTAL_INLINE(             \"Incremental Inline\"),\n+    INCREMENTAL_BOXING_INLINE(      \"Incremental Boxing Inline\"),\n+    EXPAND_VUNBOX(                  \"Expand VectorUnbox\"),\n+    SCALARIZE_VBOX(                 \"Scalarize VectorBox\"),\n+    INLINE_VECTOR_REBOX(            \"Inline Vector Rebox Calls\"),\n+    EXPAND_VBOX(                    \"Expand VectorBox\"),\n+    ELIMINATE_VBOX_ALLOC(           \"Eliminate VectorBoxAllocate\"),\n+    ITER_GVN_BEFORE_EA(             \"Iter GVN before EA\"),\n+    ITER_GVN_AFTER_VECTOR(          \"Iter GVN after Vector Box Elimination\"),\n+    BEFORE_LOOP_OPTS(               \"Before Loop Optimizations\"),\n+    PHASEIDEAL_BEFORE_EA(           \"PhaseIdealLoop before EA\"),\n+    AFTER_EA(                       \"After Escape Analysis\"),\n+    ITER_GVN_AFTER_EA(              \"Iter GVN after EA\"),\n+    BEFORE_BEAUTIFY_LOOPS(          \"Before Beautify Loops\"),\n+    AFTER_BEAUTIFY_LOOPS(           \"After Beautify Loops\"),\n@@ -86,41 +68,60 @@\n-    BEFORE_CLOOPS(\"Before CountedLoop\", RegexType.IDEAL_INDEPENDENT, ActionOnRepeat.KEEP_FIRST),\n-    AFTER_CLOOPS(\"After CountedLoop\"),\n-    PHASEIDEAL_BEFORE_EA(\"PhaseIdealLoop before EA\"),\n-    AFTER_EA(\"After Escape Analysis\"),\n-    ITER_GVN_AFTER_EA(\"Iter GVN after EA\"),\n-    ITER_GVN_AFTER_ELIMINATION(\"Iter GVN after eliminating allocations and locks\"),\n-    PHASEIDEALLOOP1(\"PhaseIdealLoop 1\"),\n-    PHASEIDEALLOOP2(\"PhaseIdealLoop 2\"),\n-    PHASEIDEALLOOP3(\"PhaseIdealLoop 3\"),\n-    BEFORE_CCP1(\"Before PhaseCCP 1\"),\n-    CCP1(\"PhaseCCP 1\"),\n-    ITER_GVN2(\"Iter GVN 2\"),\n-    PHASEIDEALLOOP_ITERATIONS(\"PhaseIdealLoop iterations\"),\n-    AFTER_LOOP_OPTS(\"After Loop Optimizations\"),\n-    AFTER_MERGE_STORES(\"After Merge Stores\"),\n-    BEFORE_MACRO_EXPANSION(\"Before Macro Expansion\"),\n-    AFTER_MACRO_EXPANSION_STEP(\"After Macro Expansion Step\"),\n-    AFTER_MACRO_EXPANSION(\"After Macro Expansion\"),\n-    BARRIER_EXPANSION(\"Barrier expand\"),\n-    OPTIMIZE_FINISHED(\"Optimize finished\"),\n-    PRINT_IDEAL(\"PrintIdeal\"),\n-    BEFORE_MATCHING(\"Before matching\"),\n-    MATCHING(\"After matching\", RegexType.MACH),\n-    GLOBAL_CODE_MOTION(\"Global code motion\", RegexType.MACH),\n-    INITIAL_LIVENESS(\"Initial liveness\", RegexType.MACH),\n-    LIVE_RANGE_STRETCHING(\"Live range stretching\", RegexType.MACH),\n-    AGGRESSIVE_COALESCING(\"Aggressive coalescing\", RegexType.MACH),\n-    INITIAL_SPILLING(\"Initial spilling\", RegexType.MACH),\n-    CONSERVATIVE_COALESCING(\"Conservative coalescing\", RegexType.MACH, ActionOnRepeat.KEEP_FIRST),\n-    ITERATIVE_SPILLING(\"Iterative spilling\", RegexType.MACH, ActionOnRepeat.KEEP_FIRST),\n-    AFTER_ITERATIVE_SPILLING(\"After iterative spilling\", RegexType.MACH),\n-    POST_ALLOCATION_COPY_REMOVAL(\"Post-allocation copy removal\", RegexType.MACH),\n-    MERGE_MULTI_DEFS(\"Merge multiple definitions\", RegexType.MACH),\n-    FIX_UP_SPILLS(\"Fix up spills\", RegexType.MACH),\n-    REGISTER_ALLOCATION(\"Register Allocation\", RegexType.MACH),\n-    BLOCK_ORDERING(\"Block Ordering\", RegexType.MACH),\n-    PEEPHOLE(\"Peephole\", RegexType.MACH),\n-    POSTALLOC_EXPAND(\"Post-Allocation Expand\", RegexType.MACH),\n-    MACH_ANALYSIS(\"After mach analysis\", RegexType.MACH),\n-    FINAL_CODE(\"Final Code\", RegexType.MACH),\n-    END(\"End\"),\n+    BEFORE_CLOOPS(                  \"Before CountedLoop\", RegexType.IDEAL_INDEPENDENT, ActionOnRepeat.KEEP_FIRST),\n+    AFTER_CLOOPS(                   \"After CountedLoop\"),\n+    BEFORE_LOOP_UNROLLING(          \"Before Loop Unrolling\"),\n+    AFTER_LOOP_UNROLLING(           \"After Loop Unrolling\"),\n+    BEFORE_SPLIT_IF(                \"Before Split-If\"),\n+    AFTER_SPLIT_IF(                 \"After Split-If\"),\n+    BEFORE_LOOP_PREDICATION_IC(     \"Before Loop Predication IC\"),\n+    AFTER_LOOP_PREDICATION_IC(      \"After Loop Predication IC\"),\n+    BEFORE_LOOP_PREDICATION_RC(     \"Before Loop Predication RC\"),\n+    AFTER_LOOP_PREDICATION_RC(      \"After Loop Predication RC\"),\n+    BEFORE_PARTIAL_PEELING(         \"Before Partial Peeling\"),\n+    AFTER_PARTIAL_PEELING(          \"After Partial Peeling\"),\n+    BEFORE_LOOP_PEELING(            \"Before Loop Peeling\"),\n+    AFTER_LOOP_PEELING(             \"After Loop Peeling\"),\n+    BEFORE_LOOP_UNSWITCHING(        \"Before Loop Unswitching\"),\n+    AFTER_LOOP_UNSWITCHING(         \"After Loop Unswitching\"),\n+    BEFORE_RANGE_CHECK_ELIMINATION( \"Before Range Check Elimination\"),\n+    AFTER_RANGE_CHECK_ELIMINATION(  \"After Range Check Elimination\"),\n+    ITER_GVN_AFTER_ELIMINATION(     \"Iter GVN after Eliminating Allocations and Locks\"),\n+    BEFORE_PRE_MAIN_POST(           \"Before Pre\/Main\/Post Loops\"),\n+    AFTER_PRE_MAIN_POST(            \"After Pre\/Main\/Post Loops\"),\n+    PHASEIDEALLOOP1(                \"PhaseIdealLoop 1\"),\n+    PHASEIDEALLOOP2(                \"PhaseIdealLoop 2\"),\n+    PHASEIDEALLOOP3(                \"PhaseIdealLoop 3\"),\n+    AUTO_VECTORIZATION1_BEFORE_APPLY(                    \"AutoVectorization 1, before Apply\"),\n+    AUTO_VECTORIZATION2_AFTER_REORDER(                   \"AutoVectorization 2, after Apply Memop Reordering\"),\n+    AUTO_VECTORIZATION3_AFTER_ADJUST_LIMIT(              \"AutoVectorization 3, after Adjusting Pre-loop Limit\"),\n+    AUTO_VECTORIZATION4_AFTER_SPECULATIVE_RUNTIME_CHECKS(\"AutoVectorization 4, after Adding Speculative Runtime Checks\"),\n+    BEFORE_CCP1(                    \"Before PhaseCCP 1\"),\n+    CCP1(                           \"PhaseCCP 1\"),\n+    ITER_GVN2(                      \"Iter GVN 2\"),\n+    PHASEIDEALLOOP_ITERATIONS(      \"PhaseIdealLoop Iterations\"),\n+    AFTER_LOOP_OPTS(                \"After Loop Optimizations\"),\n+    AFTER_MERGE_STORES(             \"After Merge Stores\"),\n+    BEFORE_MACRO_EXPANSION(         \"Before Macro Expansion\"),\n+    AFTER_MACRO_EXPANSION_STEP(     \"After Macro Expansion Step\"),\n+    AFTER_MACRO_EXPANSION(          \"After Macro Expansion\"),\n+    BARRIER_EXPANSION(              \"Barrier Expand\"),\n+    OPTIMIZE_FINISHED(              \"Optimize Finished\"),\n+    PRINT_IDEAL(                    \"PrintIdeal\"),\n+    BEFORE_MATCHING(                \"Before Matching\"),\n+    MATCHING(                       \"After Matching\", RegexType.MACH),\n+    GLOBAL_CODE_MOTION(             \"Global Code Motion\", RegexType.MACH),\n+    INITIAL_LIVENESS(               \"Initial Liveness\", RegexType.MACH),\n+    LIVE_RANGE_STRETCHING(          \"Live Range Stretching\", RegexType.MACH),\n+    AGGRESSIVE_COALESCING(          \"Aggressive Coalescing\", RegexType.MACH),\n+    INITIAL_SPILLING(               \"Initial Spilling\", RegexType.MACH),\n+    CONSERVATIVE_COALESCING(        \"Conservative Coalescing\", RegexType.MACH, ActionOnRepeat.KEEP_FIRST),\n+    ITERATIVE_SPILLING(             \"Iterative Spilling\", RegexType.MACH, ActionOnRepeat.KEEP_FIRST),\n+    AFTER_ITERATIVE_SPILLING(       \"After Iterative Spilling\", RegexType.MACH),\n+    POST_ALLOCATION_COPY_REMOVAL(   \"Post-allocation Copy Removal\", RegexType.MACH),\n+    MERGE_MULTI_DEFS(               \"Merge Multiple Definitions\", RegexType.MACH),\n+    FIX_UP_SPILLS(                  \"Fix up Spills\", RegexType.MACH),\n+    REGISTER_ALLOCATION(            \"Register Allocation\", RegexType.MACH),\n+    BLOCK_ORDERING(                 \"Block Ordering\", RegexType.MACH),\n+    PEEPHOLE(                       \"Peephole\", RegexType.MACH),\n+    POSTALLOC_EXPAND(               \"Post-allocation Expand\", RegexType.MACH),\n+    MACH_ANALYSIS(                  \"After Mach Analysis\", RegexType.MACH),\n+    FINAL_CODE(                     \"Final Code\", RegexType.MACH),\n+    END(                            \"End\"),\n@@ -128,1 +129,1 @@\n-    PRINT_OPTO_ASSEMBLY(\"PrintOptoAssembly\", RegexType.OPTO_ASSEMBLY),\n+    PRINT_OPTO_ASSEMBLY(            \"PrintOptoAssembly\", RegexType.OPTO_ASSEMBLY),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/CompilePhase.java","additions":87,"deletions":86,"binary":false,"changes":173,"status":"modified"}]}