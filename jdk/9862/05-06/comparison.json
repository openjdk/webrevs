{"files":[{"patch":"@@ -24,0 +24,4 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -25,0 +29,1 @@\n+import java.lang.reflect.Executable;\n@@ -26,0 +31,2 @@\n+import java.util.HashSet;\n+import java.util.List;\n@@ -27,0 +34,3 @@\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +43,1 @@\n- * @run main RequiredMethodParameterFlagTest\n+ * @run junit RequiredMethodParameterFlagTest\n@@ -35,3 +45,5 @@\n-public class RequiredMethodParameterFlagTest {\n-    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException {\n-        boolean errors = false;\n+class RequiredMethodParameterFlagTest {\n+\n+    private static final Set<AccessFlag> CHECKED_FLAGS = Set.of(AccessFlag.MANDATED, AccessFlag.SYNTHETIC);\n+\n+    static Stream<Arguments> testCases() throws ReflectiveOperationException {\n@@ -40,28 +52,0 @@\n-        \/\/ test for implicit parameters\n-        Parameter[] parameters = Inner.class.getDeclaredConstructors()[0].getParameters();\n-        errors |= assertFlags(mandated, parameters[0]);\n-        errors |= assertFlags(Set.of(), parameters[1]);\n-\n-        parameters = findAnonymous().getDeclaredConstructors()[0].getParameters();\n-        errors |= assertFlags(mandated, parameters[0]);\n-        errors |= assertFlags(Set.of(), parameters[1]);\n-\n-        parameters = MyEnum.class.getDeclaredMethod(\"valueOf\", String.class).getParameters();\n-        errors |= assertFlags(mandated, parameters[0]);\n-\n-        parameters = MyRecord.class.getDeclaredConstructors()[0].getParameters();\n-        errors |= assertFlags(mandated, parameters[0]);\n-        errors |= assertFlags(mandated, parameters[1]);\n-\n-        \/\/ test for synthetic parameters\n-        \/\/ assuming javac creates two synthetic parameters corresponding to Enum(String name, int ordinal)\n-        parameters = MyEnum.class.getDeclaredConstructors()[0].getParameters();\n-        errors |= assertFlags(synthetic, parameters[0]);\n-        errors |= assertFlags(synthetic, parameters[1]);\n-        errors |= assertFlags(Set.of(), parameters[2]);\n-        errors |= assertFlags(Set.of(), parameters[3]);\n-\n-        if (errors) {\n-            throw new AssertionError();\n-        }\n-    }\n@@ -69,10 +53,29 @@\n-    \/\/ returns true on error\n-    private static boolean assertFlags(Set<AccessFlag> flags, Parameter parameter) {\n-        Set<AccessFlag> accessFlags = parameter.accessFlags();\n-        if (!accessFlags.containsAll(flags)) {\n-            System.err.println(\"Required flags not present\");\n-            System.err.println(\"Required: \" + flags);\n-            System.err.println(\"Actual: \" + accessFlags);\n-            return true;\n-        }\n-        return false;\n+        return Stream.of(\n+                \/\/ test for implicit parameters\n+                \/\/ inner class\n+                Arguments.of(Outer.Inner.class.getDeclaredConstructors()[0],\n+                        List.of(mandated, Set.of())),\n+                \/\/ anonymous class extending an inner class\n+                Arguments.of(Class.forName(\"Outer$1\")\n+                                .getDeclaredConstructors()[0],\n+                        List.of(mandated, Set.of(), Set.of())),\n+                \/\/ anonymous class\n+                Arguments.of(Class.forName(\"Outer$2\")\n+                                .getDeclaredConstructors()[0],\n+                        List.of(mandated)),\n+                \/\/ enum class\n+                Arguments.of(Outer.MyEnum.class.getDeclaredMethod(\"valueOf\", String.class),\n+                        List.of(mandated)),\n+                \/\/ record class\n+                Arguments.of(Outer.MyRecord.class.getDeclaredConstructors()[0],\n+                        List.of(mandated, mandated)),\n+                \/\/ local class\n+                Arguments.of(Class.forName(\"Outer$1Task\")\n+                                .getDeclaredConstructors()[0],\n+                        List.of(mandated, Set.of(), synthetic)),\n+                \/\/ test for synthetic parameters\n+                \/\/ assuming javac creates two synthetic parameters corresponding to\n+                \/\/ Enum(String name, int ordinal)\n+                Arguments.of(Outer.MyEnum.class.getDeclaredConstructors()[0],\n+                        List.of(synthetic, synthetic, Set.of(), Set.of()))\n+        );\n@@ -81,5 +84,13 @@\n-    private static Class<?> findAnonymous() {\n-        try {\n-            return Class.forName(\"RequiredMethodParameterFlagTest$1\");\n-        } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(\"Anonymous class missing\");\n+    @ParameterizedTest\n+    @MethodSource(\"testCases\")\n+    void check(Executable method, List<Set<AccessFlag>> paramFlags) {\n+        Parameter[] parameters = method.getParameters();\n+        assertEquals(paramFlags.size(), parameters.length, () -> \"Parameter count of \" + method);\n+\n+        for (int i = 0; i < parameters.length; i++) {\n+            Set<AccessFlag> expected = new HashSet<>(paramFlags.get(i));\n+            expected.retainAll(CHECKED_FLAGS);\n+            Set<AccessFlag> found = new HashSet<>(parameters[i].accessFlags());\n+            found.retainAll(CHECKED_FLAGS);\n+            final int index = i;\n+            assertEquals(expected, found, () -> \"Parameter \" + index + \" in \" + method);\n@@ -88,0 +99,1 @@\n+}\n@@ -89,0 +101,2 @@\n+\/\/ keep this in sync with test\/langtools\/tools\/javac\/RequiredParameterFlags\/ImplicitParameters.java\n+class Outer {\n@@ -95,0 +109,19 @@\n+    Object anonymous = new Object() {};\n+\n+    private void instanceMethod(int i) {\n+        class Task implements Runnable {\n+            final int j;\n+\n+            Task(int j) {\n+                this.j = j;\n+            }\n+\n+            @Override\n+            public void run() {\n+                System.out.println(Outer.this.toString() + (i * j));\n+            }\n+        }\n+\n+        new Task(5).run();\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/RequiredMethodParameterFlagTest.java","additions":80,"deletions":47,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.lang.constant.ConstantDescs;\n@@ -54,0 +55,3 @@\n+    private static final int CHECKED_FLAGS = Flags.MANDATED | Flags.SYNTHETIC;\n+    private static final int NO_FLAGS = 0;\n+\n@@ -70,0 +74,1 @@\n+        \/\/ Keep this in sync with test\/jdk\/java\/lang\/reflect\/AccessFlag\/RequiredMethodParameterFlagTest.java\n@@ -78,1 +83,23 @@\n-                    enum MyEnum {}\n+                    Object anonymous = new Object() {};\n+\n+                    private void instanceMethod(int i) {\n+                        class Task implements Runnable {\n+                            final int j;\n+\n+                            Task(int j) {\n+                                this.j = j;\n+                            }\n+\n+                            @Override\n+                            public void run() {\n+                                System.out.println(Outer.this.toString() + (i * j));\n+                            }\n+                        }\n+\n+                        new Task(5).run();\n+                    }\n+\n+                    enum MyEnum {\n+                        ;\n+                        MyEnum(String s, int i) {}\n+                    }\n@@ -114,5 +141,12 @@\n-        MethodParameters_attribute methodParameters = (MethodParameters_attribute) classFile.methods[0].attributes.get(\"MethodParameters\");\n-        Assert.checkNonNull(methodParameters, \"MethodParameters attribute must be present\");\n-        MethodParameters_attribute.Entry[] table = methodParameters.method_parameter_table;\n-        Assert.check((table[0].flags & Flags.MANDATED) != 0, \"mandated flag must be set for implicit parameter\");\n-        Assert.check((table[1].flags & Flags.MANDATED) == 0, \"mandated flag must not be set for explicit parameter\");\n+        checkParameters(classFile.methods[0], Flags.MANDATED, 0);\n+    }\n+\n+    @Test\n+    @ClassName(\"1Task\")\n+    public void testLocalClassConstructor(ClassFile classFile) throws ConstantPoolException {\n+        for (com.sun.tools.classfile.Method method : classFile.methods) {\n+            if (method.getName(classFile.constant_pool).equals(ConstantDescs.INIT_NAME)) {\n+                checkParameters(method, Flags.MANDATED, NO_FLAGS, Flags.SYNTHETIC);\n+                break;\n+            }\n+        }\n@@ -124,5 +158,7 @@\n-        MethodParameters_attribute methodParameters = (MethodParameters_attribute) classFile.methods[0].attributes.get(\"MethodParameters\");\n-        Assert.checkNonNull(methodParameters, \"MethodParameters attribute must be present\");\n-        MethodParameters_attribute.Entry[] table = methodParameters.method_parameter_table;\n-        Assert.check((table[0].flags & Flags.MANDATED) != 0, \"mandated flag must be set for implicit parameter\");\n-        Assert.check((table[1].flags & Flags.MANDATED) == 0, \"mandated flag must not be set for explicit parameter\");\n+        checkParameters(classFile.methods[0], Flags.MANDATED, NO_FLAGS, NO_FLAGS);\n+    }\n+\n+    @Test\n+    @ClassName(\"2\")\n+    public void testAnonymousClassConstructor(ClassFile classFile) {\n+        checkParameters(classFile.methods[0], Flags.MANDATED);\n@@ -136,4 +172,13 @@\n-                MethodParameters_attribute methodParameters = (MethodParameters_attribute) method.attributes.get(\"MethodParameters\");\n-                Assert.checkNonNull(methodParameters, \"MethodParameters attribute must be present\");\n-                MethodParameters_attribute.Entry[] table = methodParameters.method_parameter_table;\n-                Assert.check((table[0].flags & Flags.MANDATED) != 0, \"mandated flag must be set for implicit parameter\");\n+                checkParameters(method, Flags.MANDATED);\n+                break;\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @ClassName(\"MyEnum\")\n+    public void testEnumClassConstructor(ClassFile classFile) throws ConstantPoolException {\n+        for (com.sun.tools.classfile.Method method : classFile.methods) {\n+            if (method.getName(classFile.constant_pool).equals(ConstantDescs.INIT_NAME)) {\n+                checkParameters(method, Flags.SYNTHETIC, Flags.SYNTHETIC, NO_FLAGS, NO_FLAGS);\n+                break;\n@@ -147,1 +192,5 @@\n-        MethodParameters_attribute methodParameters = (MethodParameters_attribute) classFile.methods[0].attributes.get(\"MethodParameters\");\n+        checkParameters(classFile.methods[0], Flags.MANDATED, Flags.MANDATED);\n+    }\n+\n+    private void checkParameters(com.sun.tools.classfile.Method method, int... parametersFlags) {\n+        MethodParameters_attribute methodParameters = (MethodParameters_attribute) method.attributes.get(\"MethodParameters\");\n@@ -150,0 +199,2 @@\n+        Assert.check(table.length == parametersFlags.length, () -> \"Expected \" + parametersFlags.length\n+                + \" MethodParameters entries, found \" + table.length);\n@@ -151,1 +202,4 @@\n-            Assert.check((table[i].flags & Flags.MANDATED) != 0, \"mandated flag must be set for implicit parameter\");\n+            int foundFlags = table[i].flags & CHECKED_FLAGS;\n+            int desiredFlags = parametersFlags[i] & CHECKED_FLAGS;\n+            Assert.check(foundFlags == desiredFlags, () -> \"Expected mandated and synthethic flags to be \"\n+                    + convertFlags(desiredFlags) + \", found \" + convertFlags(foundFlags));\n@@ -154,0 +208,4 @@\n+\n+    private static String convertFlags(int flags) {\n+        return ((flags & Flags.MANDATED) == Flags.MANDATED) + \" and \" + ((flags & Flags.SYNTHETIC) == Flags.SYNTHETIC);\n+    }\n","filename":"test\/langtools\/tools\/javac\/RequiredParameterFlags\/ImplicitParameters.java","additions":75,"deletions":17,"binary":false,"changes":92,"status":"modified"}]}