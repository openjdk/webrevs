{"files":[{"patch":"@@ -63,2 +63,4 @@\n- * To release resources used by this {@code Deflater}, the {@link #close()} method\n- * should be used. Subclasses are responsible for the cleanup of resources\n+ * The {@code Deflater} cleans up its resources in its {@link #end()} method. To facilitate\n+ * usage with try-with-resources, this class implements {@link AutoCloseable}. The\n+ * {@link #close()} method of this class calls {@code end()} to clean up its\n+ * resources. Subclasses are responsible for the cleanup of resources\n@@ -871,5 +873,6 @@\n-     * Closes the compressor and discards any unprocessed input.\n-     *\n-     * This method should be called when the compressor is no longer\n-     * being used. Once this method is called, further operations using\n-     * this Deflater may throw an exception.\n+     * Closes and releases the resources held by this {@code Deflater}\n+     * and discards any unprocessed input.\n+     * <p>\n+     * If this method is invoked multiple times, the subsequent calls are treated as a no-op.\n+     * Several other methods defined by this class will throw an {@link IllegalStateException}\n+     * if invoked on a closed {@code Deflater}.\n@@ -892,2 +895,2 @@\n-     * Releases resources held by this compressor and discards any unprocessed input.\n-     * This method should be called when the compressor is no longer needed.\n+     * Closes and releases the resources held by this {@code Deflater}\n+     * and discards any unprocessed input.\n@@ -895,3 +898,1 @@\n-     * @implNote This method calls the {@link #end()} method. This method is a no-op\n-     * if this compressor has already been previously closed, either through {@code close()}\n-     * or {@code end()}\n+     * @implSpec This method calls the {@link #end()} method.\n@@ -902,6 +903,0 @@\n-        synchronized (zsRef) {\n-            \/\/ check if we are already closed to avoid calling end() more than once\n-            if (zsRef.address() == 0) {\n-                return;\n-            }\n-        }\n@@ -913,2 +908,3 @@\n-        if (zsRef.address() == 0)\n-            throw new NullPointerException(\"Deflater has been closed\");\n+        if (zsRef.address() == 0) {\n+            throw new IllegalStateException(\"Deflater has been closed\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -62,2 +62,4 @@\n- * To release resources used by this {@code Inflater}, the {@link #close()} method\n- * should be used. Subclasses are responsible for the cleanup of resources\n+ * The {@code Inflater} cleans up its resources in its {@link #end()} method. To facilitate\n+ * usage with try-with-resources, this class implements {@link AutoCloseable}. The\n+ * {@link #close()} method of this class calls {@code end()} to clean up its\n+ * resources. Subclasses are responsible for the cleanup of resources\n@@ -687,5 +689,6 @@\n-     * Closes the decompressor and discards any unprocessed input.\n-     *\n-     * This method should be called when the decompressor is no longer\n-     * being used. Once this method is called, further operations using\n-     * this Inflater may throw an exception.\n+     * Closes and releases the resources held by this {@code Inflater}\n+     * and discards any unprocessed input.\n+     * <p>\n+     * If this method is invoked multiple times, the subsequent calls are treated as a no-op.\n+     * Several other methods defined by this class will throw an {@link IllegalStateException}\n+     * if invoked on a closed {@code Inflater}.\n@@ -709,2 +712,2 @@\n-     * Releases resources held by this decompressor and discards any unprocessed input.\n-     * This method should be called when the decompressor is no longer needed.\n+     * Closes and releases the resources held by this {@code Inflater}\n+     * and discards any unprocessed input.\n@@ -712,3 +715,1 @@\n-     * @implNote This method calls the {@link #end()} method. This method is a no-op\n-     * if this decompressor has already been previously closed, either through {@code close()}\n-     * or {@code end()}\n+     * @implSpec This method calls the {@link #end()} method.\n@@ -719,6 +720,0 @@\n-        synchronized (zsRef) {\n-            \/\/ check if we are already closed to avoid calling end() more than once\n-            if (zsRef.address() == 0) {\n-                return;\n-            }\n-        }\n@@ -730,2 +725,3 @@\n-        if (zsRef.address() == 0)\n-            throw new NullPointerException(\"Inflater has been closed\");\n+        if (zsRef.address() == 0) {\n+            throw new IllegalStateException(\"Inflater has been closed\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,2 +130,2 @@\n-        \/\/ Write on a closed GZIPOutputStream, closed Deflater IOException expected\n-        assertThrows(NullPointerException.class , () -> gzip.write(inputBytes, 0, INPUT_LENGTH));\n+        \/\/ Write on a closed GZIPOutputStream, closed Deflater IllegalStateException expected\n+        assertThrows(IllegalStateException.class , () -> gzip.write(inputBytes, 0, INPUT_LENGTH));\n@@ -152,2 +152,2 @@\n-        \/\/ Write on a closed DeflaterOutputStream, 'Deflater has been closed' NPE is expected\n-        assertThrows(NullPointerException.class , () -> def.write(inputBytes, 0, INPUT_LENGTH));\n+        \/\/ Write on a closed DeflaterOutputStream, IllegalStateException is expected\n+        assertThrows(IllegalStateException.class , () -> def.write(inputBytes, 0, INPUT_LENGTH));\n@@ -205,2 +205,2 @@\n-        \/\/ Write on a closed ZipOutputStream , 'Deflater has been closed' NPE is expected\n-        assertThrows(NullPointerException.class , () -> zip.write(inputBytes, 0, INPUT_LENGTH));\n+        \/\/ Write on a closed ZipOutputStream , IllegalStateException is expected\n+        assertThrows(IllegalStateException.class , () -> zip.write(inputBytes, 0, INPUT_LENGTH));\n","filename":"test\/jdk\/java\/util\/zip\/CloseInflaterDeflaterTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,35 +43,2 @@\n-     * Closes Deflater just once and then expects that the close() was called once and so was end()\n-     *\/\n-    @Test\n-    public void testCloseOnce() throws Exception {\n-        final Deflater simpleDeflater = new Deflater();\n-        closeOnceAfterCompressing(simpleDeflater);\n-\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        closeOnceAfterCompressing(overriddenClose);\n-        \/\/ make sure close was called once\n-        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n-                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenClose.getClass().getName());\n-\n-        final OverrideEnd overriddenEnd = new OverrideEnd();\n-        closeOnceAfterCompressing(overriddenEnd);\n-        \/\/ make sure end was called once\n-        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n-                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n-                overriddenEnd.getClass().getName());\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        closeOnceAfterCompressing(overriddenCloseAndEnd);\n-        \/\/ make sure end and close was called once\n-        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n-                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-    }\n-\n-    \/**\n-     * Closes the Deflater more than once and then expects close() to be called that many times\n-     * but end() just once\n+     * Closes the Deflater multiple times and then expects close() and end() to be called that\n+     * many times.\n@@ -94,3 +61,3 @@\n-        \/\/ make sure end was called *only once*\n-        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n-                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n+        \/\/ make sure end was called called numTimes\n+        assertEquals(numTimes, overriddenEnd.numTimesEndCalled, \"end() was expected to be called \" +\n+                numTimes + \", but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n@@ -101,3 +68,3 @@\n-        \/\/ make sure end was called only once but close was called numTimes\n-        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n-                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+        \/\/ make sure end was called called numTimes\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called \" +\n+                numTimes + \", but was called\" + overriddenCloseAndEnd.numTimesEndCalled +\n@@ -149,2 +116,1 @@\n-     * just once and end() too was called just once. This check ensures that the latter call\n-     * to close() doesn't end up calling end() again.\n+     * just once and end() twice.\n@@ -166,3 +132,3 @@\n-        \/\/ make sure end was called *only once* (through the explicit end call) and close()\n-        \/\/ didn't call it again internally\n-        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called twice,\" +\n@@ -174,4 +140,4 @@\n-        \/\/ make sure end was called *only once* (through the explicit end call) and close()\n-        \/\/ didn't call it again internally\n-        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n-                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n@@ -184,7 +150,0 @@\n-    private void closeOnceAfterCompressing(final Deflater deflater) {\n-        \/\/ compress the data and then close()\n-        try (final Deflater compressor = deflater) {\n-            compress(compressor);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterClose.java","additions":16,"deletions":57,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -48,39 +48,2 @@\n-     * Closes Inflater just once and then expects that the close() was called once and so was end()\n-     *\/\n-    @Test\n-    public void testCloseOnce() throws Exception {\n-        final Inflater simpleInflater = new Inflater();\n-        final String inflated = closeOnceAfterInflating(simpleInflater);\n-        assertValidInflatedData(inflated, simpleInflater.getClass());\n-\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        final String ocInflatedData = closeOnceAfterInflating(overriddenClose);\n-        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n-        \/\/ make sure close() was called once\n-        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenClose.getClass());\n-\n-        final OverrideEnd overriddenEnd = new OverrideEnd();\n-        final String oeInflatedData = closeOnceAfterInflating(overriddenEnd);\n-        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n-        \/\/ make sure end() was called once\n-        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be\" +\n-                \" called once, but was called \" + overriddenEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenEnd.getClass());\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        final String oceInflatedData = closeOnceAfterInflating(overriddenCloseAndEnd);\n-        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n-        \/\/ make sure end() and close() were called once each\n-        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be\" +\n-                \" called once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass());\n-        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called once, but was called \" + overriddenCloseAndEnd.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass());\n-    }\n-\n-    \/**\n-     * Closes the Inflater more than once and then expects close() to be called that many times\n-     * but end() just once\n+     * Closes the Inflater multiple times and then expects close() and end() to be called that\n+     * many times.\n@@ -106,3 +69,3 @@\n-        \/\/ make sure end was called *only once*\n-        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n-                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n+        \/\/ make sure end was called called numTimes\n+        assertEquals(numTimes, overriddenEnd.numTimesEndCalled, \"end() was expected to be called \" +\n+                numTimes + \", but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n@@ -115,3 +78,4 @@\n-        \/\/ make sure end was called only once but close was called numTimes\n-        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be\" +\n-                \" called once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+        \/\/ make sure end was called called numTimes\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected\" +\n+                \" to be called \" + numTimes + \", but was called \" +\n+                overriddenCloseAndEnd.numTimesEndCalled +\n@@ -167,2 +131,1 @@\n-     * just once and end() too was called just once. This check ensures that the latter call to\n-     * close() doesn't end up calling end() again.\n+     * just once and end() twice.\n@@ -187,3 +150,3 @@\n-        \/\/ make sure end was called *only once* (through the explicit end call)\n-        \/\/ and close() didn't call it again internally\n-        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called twice,\" +\n@@ -196,4 +159,4 @@\n-        \/\/ make sure end was called *only once* (through the explicit end call) and close()\n-        \/\/ didn't call it again internally\n-        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n-                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n@@ -207,9 +170,0 @@\n-    private String closeOnceAfterInflating(final Inflater inflater) throws DataFormatException {\n-        final byte[] inflatedData;\n-        \/\/ inflate() then close\n-        try (final Inflater inflt = inflater) {\n-            inflatedData = inflate(inflt, compressedData);\n-        }\n-        return new String(inflatedData, US_ASCII);\n-    }\n-\n","filename":"test\/jdk\/java\/util\/zip\/InflaterClose.java","additions":17,"deletions":63,"binary":false,"changes":80,"status":"modified"}]}