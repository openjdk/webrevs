{"files":[{"patch":"@@ -64,1 +64,2 @@\n- * calls {@code end()}.\n+ * calls {@code end()}. Subclasses should override {@linkplain #end()} to clean up the\n+ * resources acquired by the subclass.\n@@ -916,1 +917,1 @@\n-    public final void close() {\n+    public void close() {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,2 @@\n- * calls {@code end()}.\n+ * calls {@code end()}. Subclasses should override {@linkplain #end()} to clean up the\n+ * resources acquired by the subclass.\n@@ -731,1 +732,1 @@\n-    public final void close() {\n+    public void close() {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @summary Test the close() and end() methods on java.util.zip.Deflater\n+ * @summary Test that the close() and end() methods on java.util.zip.Deflater\n@@ -43,1 +43,1 @@\n-     * Closes the Deflater multiple times and then expects end() to be called that\n+     * Closes the Deflater multiple times and then expects close() and end() to be called that\n@@ -52,0 +52,7 @@\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        closeMultipleTimesAfterCompressing(numTimes, overriddenClose);\n+        \/\/ make sure close was called numTimes\n+        assertEquals(numTimes, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called \" + numTimes + \", but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n+\n@@ -58,0 +65,11 @@\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        closeMultipleTimesAfterCompressing(numTimes, overriddenCloseAndEnd);\n+        \/\/ make sure end was called called numTimes\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called \" +\n+                numTimes + \", but was called\" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected\" +\n+                \" to be called \" + numTimes + \", but was called \" +\n+                overriddenClose.numTimesCloseCalled + \" time(s) on \" +\n+                overriddenCloseAndEnd.getClass().getName());\n@@ -61,2 +79,3 @@\n-     * Closes the Deflater first and then calls end(). Verifies that end() was called\n-     * twice (once internally through close() and once explicitly).\n+     * Closes the Deflater first and then calls end(). Verifies that close() was called\n+     * just once but end() was called twice (once internally through close() and once\n+     * explicitly)\n@@ -69,0 +88,7 @@\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        compressCloseThenEnd(overriddenClose);\n+        \/\/ make sure close was called once\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n+                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n+\n@@ -75,0 +101,11 @@\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        compressCloseThenEnd(overriddenCloseAndEnd);\n+        \/\/ make sure end was called twice (once through close and once explicitly)\n+        \/\/ and close was called once\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to\" +\n+                \" be called twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -78,2 +115,2 @@\n-     * Calls end() on the Deflater first and then calls close(). Verifies that end() was called\n-     * twice.\n+     * Calls end() on the Deflater first and then calls close(). Verifies that close() was called\n+     * just once and end() twice.\n@@ -86,0 +123,7 @@\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        compressEndThenClose(overriddenClose);\n+        \/\/ make sure close was called once\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n+                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n+\n@@ -93,0 +137,11 @@\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        compressEndThenClose(overriddenCloseAndEnd);\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be \" +\n+                \"called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -141,0 +196,27 @@\n+\n+    private static final class OverrideClose extends Deflater {\n+        private int numTimesCloseCalled = 0;\n+\n+        @Override\n+        public void close() {\n+            this.numTimesCloseCalled++;\n+            super.close();\n+        }\n+    }\n+\n+    private static final class OverrideCloseAndEnd extends Deflater {\n+        private int numTimesEndCalled = 0;\n+        private int numTimesCloseCalled = 0;\n+\n+        @Override\n+        public void end() {\n+            this.numTimesEndCalled++;\n+            super.end();\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.numTimesCloseCalled++;\n+            super.close();\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterClose.java","additions":88,"deletions":6,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @summary Test the close() and end() methods on java.util.zip.Inflater\n+ * @summary Test that the close() and end() methods on java.util.zip.Inflater\n@@ -48,1 +48,1 @@\n-     * Closes the Inflater multiple times and then expects end() to be called that\n+     * Closes the Inflater multiple times and then expects close() and end() to be called that\n@@ -58,0 +58,8 @@\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        final String ocInflatedData = closeMultipleTimesAfterInflating(numTimes, overriddenClose);\n+        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n+        \/\/ make sure close was called numTimes\n+        assertEquals(numTimes, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called \" + numTimes + \", but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n+\n@@ -61,1 +69,1 @@\n-        \/\/ make sure end was called numTimes\n+        \/\/ make sure end was called called numTimes\n@@ -65,0 +73,14 @@\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        final String oceInflatedData = closeMultipleTimesAfterInflating(numTimes,\n+                overriddenCloseAndEnd);\n+        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n+        \/\/ make sure end was called called numTimes\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected\" +\n+                \" to be called \" + numTimes + \", but was called \" +\n+                overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected\" +\n+                \" to be called \" + numTimes + \", but was called \" +\n+                overriddenCloseAndEnd.numTimesCloseCalled + \" time(s) on \" +\n+                overriddenCloseAndEnd.getClass().getName());\n@@ -68,2 +90,3 @@\n-     * Closes the Inflater first and then calls end(). Verifies that end() was called\n-     * twice (once internally through close() and once explicitly)\n+     * Closes the Inflater first and then calls end(). Verifies that close() was called\n+     * just once but end() was called twice (once internally through close() and once\n+     * explicitly)\n@@ -77,0 +100,8 @@\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        final String ocInflatedData = inflateCloseThenEnd(overriddenClose);\n+        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n+        \/\/ make sure close was called once\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n+                \" once, but was called \" + overriddenClose.numTimesCloseCalled + \" time(s) on \"\n+                + overriddenClose.getClass().getName());\n+\n@@ -84,0 +115,12 @@\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        final String oceInflatedData = inflateCloseThenEnd(overriddenCloseAndEnd);\n+        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n+        \/\/ make sure end was called twice (once through close and once explicitly)\n+        \/\/ and close was called once\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled\n+                + \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled\n+                + \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -87,2 +130,2 @@\n-     * Calls end() on the Inflater first and then calls close(). Verifies that end() was called\n-     * twice.\n+     * Calls end() on the Inflater first and then calls close(). Verifies that close() was called\n+     * just once and end() twice.\n@@ -96,0 +139,8 @@\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        final String ocInflatedData = inflateThenEndThenClose(overriddenClose);\n+        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n+        \/\/ make sure close was called once\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n+\n@@ -104,0 +155,12 @@\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        final String oceInflatedData = inflateThenEndThenClose(overriddenCloseAndEnd);\n+        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -181,0 +244,27 @@\n+\n+    private static final class OverrideClose extends Inflater {\n+        private int numTimesCloseCalled = 0;\n+\n+        @Override\n+        public void close() {\n+            this.numTimesCloseCalled++;\n+            super.close();\n+        }\n+    }\n+\n+    private static final class OverrideCloseAndEnd extends Inflater {\n+        private int numTimesEndCalled = 0;\n+        private int numTimesCloseCalled = 0;\n+\n+        @Override\n+        public void end() {\n+            this.numTimesEndCalled++;\n+            super.end();\n+        }\n+\n+        @Override\n+        public void close() {\n+            this.numTimesCloseCalled++;\n+            super.close();\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/zip\/InflaterClose.java","additions":97,"deletions":7,"binary":false,"changes":104,"status":"modified"}]}