{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import java.nio.ByteBuffer;\n+import java.io.ByteArrayOutputStream;\n@@ -29,1 +29,4 @@\n-\/**\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n@@ -33,0 +36,1 @@\n+ * @run junit DeflaterClose\n@@ -38,19 +42,0 @@\n-    private static ByteBuffer generateDeflatedData(final Deflater deflater) {\n-        final byte[] deflatedData = new byte[100];\n-        deflater.setInput(data.getBytes(StandardCharsets.UTF_8));\n-        deflater.finish();\n-        final int numCompressed = deflater.deflate(deflatedData);\n-        if (numCompressed == 0) {\n-            throw new RuntimeException(\"Deflater, unexpectedly, expects more input\");\n-        }\n-        return ByteBuffer.wrap(deflatedData, 0, numCompressed);\n-    }\n-\n-    public static void main(final String[] args) throws Exception {\n-        final DeflaterClose self = new DeflaterClose();\n-        self.testCloseOnce();\n-        self.testCloseMultipleTimes();\n-        self.testCloseThenEnd();\n-        self.testEndThenClose();\n-    }\n-\n@@ -59,2 +44,0 @@\n-     *\n-     * @throws Exception\n@@ -62,1 +45,2 @@\n-    private void testCloseOnce() throws Exception {\n+    @Test\n+    public void testCloseOnce() throws Exception {\n@@ -64,1 +48,1 @@\n-        testCloseOnce(simpleDeflater);\n+        closeOnceAfterCompressing(simpleDeflater);\n@@ -66,2 +50,2 @@\n-        final OverrideClose overridenClose = new OverrideClose();\n-        testCloseOnce(overridenClose);\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        closeOnceAfterCompressing(overriddenClose);\n@@ -69,4 +53,3 @@\n-        if (overridenClose.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n+                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n@@ -74,2 +57,2 @@\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        testCloseOnce(overridenEnd);\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        closeOnceAfterCompressing(overriddenEnd);\n@@ -77,4 +60,3 @@\n-        if (overridenEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n+        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n+                overriddenEnd.getClass().getName());\n@@ -82,2 +64,2 @@\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        testCloseOnce(overridenCloseAndEnd);\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        closeOnceAfterCompressing(overriddenCloseAndEnd);\n@@ -85,8 +67,6 @@\n-        if (overridenCloseAndEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n+        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -98,2 +78,0 @@\n-     *\n-     * @throws Exception\n@@ -101,1 +79,2 @@\n-    private void testCloseMultipleTimes() throws Exception {\n+    @Test\n+    public void testCloseMultipleTimes() throws Exception {\n@@ -104,1 +83,1 @@\n-        testCloseMultipleTimes(numTimes, simpleDeflater);\n+        closeMultipleTimesAfterCompressing(numTimes, simpleDeflater);\n@@ -106,2 +85,2 @@\n-        final OverrideClose overridenClose = new OverrideClose();\n-        testCloseMultipleTimes(numTimes, overridenClose);\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        closeMultipleTimesAfterCompressing(numTimes, overriddenClose);\n@@ -109,4 +88,3 @@\n-        if (overridenClose.numTimesCloseCalled != numTimes) {\n-            throw new Exception(\"close() was expected to be called \" + numTimes + \", but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n+        assertEquals(numTimes, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called \" + numTimes + \", but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n@@ -114,2 +92,2 @@\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        testCloseMultipleTimes(numTimes, overridenEnd);\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        closeMultipleTimesAfterCompressing(numTimes, overriddenEnd);\n@@ -117,4 +95,3 @@\n-        if (overridenEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n+        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n+                overriddenEnd.getClass().getName());\n@@ -122,2 +99,2 @@\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        testCloseMultipleTimes(numTimes, overridenCloseAndEnd);\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        closeMultipleTimesAfterCompressing(numTimes, overriddenCloseAndEnd);\n@@ -125,8 +102,7 @@\n-        if (overridenCloseAndEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != numTimes) {\n-            throw new Exception(\"close() was expected to be called \" + numTimes + \", but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n+        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected\" +\n+                \" to be called \" + numTimes + \", but was called \" +\n+                overriddenClose.numTimesCloseCalled + \" time(s) on \" +\n+                overriddenCloseAndEnd.getClass().getName());\n@@ -139,2 +115,0 @@\n-     *\n-     * @throws Exception\n@@ -142,1 +116,2 @@\n-    private void testCloseThenEnd() throws Exception {\n+    @Test\n+    public void testCloseThenEnd() throws Exception {\n@@ -144,1 +119,1 @@\n-        testCloseThenEnd(simpleDeflater);\n+        compressCloseThenEnd(simpleDeflater);\n@@ -146,2 +121,2 @@\n-        final OverrideClose overridenClose = new OverrideClose();\n-        testCloseThenEnd(overridenClose);\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        compressCloseThenEnd(overriddenClose);\n@@ -149,4 +124,3 @@\n-        if (overridenClose.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n+                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n@@ -154,2 +128,2 @@\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        testCloseThenEnd(overridenEnd);\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        compressCloseThenEnd(overriddenEnd);\n@@ -157,16 +131,14 @@\n-        if (overridenEnd.numTimesEndCalled != 2) {\n-            throw new Exception(\"end() was expected to be called twice, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n-\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        testCloseThenEnd(overridenCloseAndEnd);\n-        \/\/ make sure end was called twice (once through close and once explicitly) and close was called once\n-        if (overridenCloseAndEnd.numTimesEndCalled != 2) {\n-            throw new Exception(\"end() was expected to be called twice, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenEnd.getClass().getName());\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        compressCloseThenEnd(overriddenCloseAndEnd);\n+        \/\/ make sure end was called twice (once through close and once explicitly)\n+        \/\/ and close was called once\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to\" +\n+                \" be called twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -177,4 +149,2 @@\n-     * just once and end() too was called just once. This check ensures that the latter call to close()\n-     * doesn't end up calling end() again.\n-     *\n-     * @throws Exception\n+     * just once and end() too was called just once. This check ensures that the latter call\n+     * to close() doesn't end up calling end() again.\n@@ -182,1 +152,2 @@\n-    private void testEndThenClose() throws Exception {\n+    @Test\n+    public void testEndThenClose() throws Exception {\n@@ -184,1 +155,1 @@\n-        testEndThenClose(simpleDeflater);\n+        compressEndThenClose(simpleDeflater);\n@@ -186,2 +157,2 @@\n-        final OverrideClose overridenClose = new OverrideClose();\n-        testEndThenClose(overridenClose);\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        compressEndThenClose(overriddenClose);\n@@ -189,26 +160,22 @@\n-        if (overridenClose.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n-\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        testEndThenClose(overridenEnd);\n-        \/\/ make sure end was called *only once* (through the explicit end call) and close() didn't call it again\n-        \/\/ internally\n-        if (overridenEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n-\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        testEndThenClose(overridenCloseAndEnd);\n-        \/\/ make sure end was called *only once* (through the explicit end call) and close() didn't call it again\n-        \/\/ internally\n-        if (overridenCloseAndEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n+                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        compressEndThenClose(overriddenEnd);\n+        \/\/ make sure end was called *only once* (through the explicit end call) and close()\n+        \/\/ didn't call it again internally\n+        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenEnd.getClass().getName());\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        compressEndThenClose(overriddenCloseAndEnd);\n+        \/\/ make sure end was called *only once* (through the explicit end call) and close()\n+        \/\/ didn't call it again internally\n+        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be \" +\n+                \"called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -217,4 +184,2 @@\n-\n-    private void testCloseOnce(final Deflater deflater) {\n-        \/\/ use the deflater to compress the data\n-        \/\/ and then let it close()\n+    private void closeOnceAfterCompressing(final Deflater deflater) {\n+        \/\/ compress the data and then close()\n@@ -222,1 +187,1 @@\n-            generateDeflatedData(compressor);\n+            compress(compressor);\n@@ -226,3 +191,3 @@\n-    private void testCloseMultipleTimes(final int numTimes, final Deflater deflater) {\n-        generateDeflatedData(deflater);\n-        \/\/ call close()\n+    private void closeMultipleTimesAfterCompressing(final int numTimes, final Deflater deflater) {\n+        compress(deflater);\n+        \/\/ call close() multiple times\n@@ -234,2 +199,2 @@\n-    private void testCloseThenEnd(final Deflater deflater) {\n-        \/\/ deflate the data, let it close() and then end()\n+    private void compressCloseThenEnd(final Deflater deflater) {\n+        \/\/ compress the data then close() and then end()\n@@ -237,1 +202,1 @@\n-            generateDeflatedData(compressor);\n+            compress(compressor);\n@@ -242,2 +207,2 @@\n-    private void testEndThenClose(final Deflater deflater) {\n-        \/\/ inflate the data, let it end() and then close()\n+    private void compressEndThenClose(final Deflater deflater) {\n+        \/\/ compress the data then end() and then close()\n@@ -245,1 +210,2 @@\n-            \/\/ end() it first, before it's (auto)closed by the try-with-resources\n+            compress(compressor);\n+            \/\/ end() it first before it's (auto)closed by the try-with-resources\n@@ -250,0 +216,12 @@\n+    private static byte[] compress(final Deflater deflater) {\n+        deflater.setInput(data.getBytes(StandardCharsets.UTF_8));\n+        deflater.finish();\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        while (!deflater.finished()) {\n+            final byte[] tmpBuffer = new byte[100];\n+            final int numCompressed = deflater.deflate(tmpBuffer);\n+            compressedBaos.write(tmpBuffer, 0, numCompressed);\n+        }\n+        return compressedBaos.toByteArray();\n+    }\n+\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterClose.java","additions":128,"deletions":150,"binary":false,"changes":278,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import java.nio.ByteBuffer;\n+import java.io.ByteArrayOutputStream;\n@@ -27,0 +27,1 @@\n+import java.util.zip.DataFormatException;\n@@ -30,1 +31,5 @@\n-\/**\n+import org.junit.jupiter.api.Test;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n@@ -34,0 +39,1 @@\n+ * @run junit InflaterClose\n@@ -37,23 +43,3 @@\n-    private static final String data = \"foobarhelloworld!!!!\";\n-    private static final ByteBuffer deflatedData = generateDeflatedData();\n-\n-    private static ByteBuffer generateDeflatedData() {\n-        final byte[] deflatedData = new byte[100];\n-        try (final Deflater deflater = new Deflater()) {\n-            deflater.setInput(data.getBytes(StandardCharsets.UTF_8));\n-            deflater.finish();\n-            final int numCompressed = deflater.deflate(deflatedData);\n-            if (numCompressed == 0) {\n-                throw new RuntimeException(\"Deflater, unexpectedly, expects more input\");\n-            }\n-            return ByteBuffer.wrap(deflatedData, 0, numCompressed);\n-        }\n-    }\n-\n-    public static void main(final String[] args) throws Exception {\n-        final InflaterClose self = new InflaterClose();\n-        self.testCloseOnce();\n-        self.testCloseMultipleTimes();\n-        self.testCloseThenEnd();\n-        self.testEndThenClose();\n-    }\n+    private static final String originalStr = \"foobarhelloworld!!!!\";\n+    private static final byte[] originalBytes = originalStr.getBytes(US_ASCII);\n+    private static final byte[] compressedData = compress();\n@@ -63,2 +49,0 @@\n-     *\n-     * @throws Exception\n@@ -66,1 +50,2 @@\n-    private void testCloseOnce() throws Exception {\n+    @Test\n+    public void testCloseOnce() throws Exception {\n@@ -68,29 +53,29 @@\n-        assertValidInflatedData(testCloseOnce(simpleInflater), simpleInflater);\n-\n-        final OverrideClose overridenClose = new OverrideClose();\n-        assertValidInflatedData(testCloseOnce(overridenClose), overridenClose);\n-        \/\/ make sure close was called once\n-        if (overridenClose.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n-\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        assertValidInflatedData(testCloseOnce(overridenEnd), overridenEnd);\n-        \/\/ make sure end was called once\n-        if (overridenEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n-\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        assertValidInflatedData(testCloseOnce(overridenCloseAndEnd), overridenCloseAndEnd);\n-        \/\/ make sure end and close was called once\n-        if (overridenCloseAndEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n+        final String inflated = closeOnceAfterInflating(simpleInflater);\n+        assertValidInflatedData(inflated, simpleInflater.getClass());\n+\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        final String ocInflatedData = closeOnceAfterInflating(overriddenClose);\n+        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n+        \/\/ make sure close() was called once\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass());\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        final String oeInflatedData = closeOnceAfterInflating(overriddenEnd);\n+        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n+        \/\/ make sure end() was called once\n+        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be\" +\n+                \" called once, but was called \" + overriddenEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenEnd.getClass());\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        final String oceInflatedData = closeOnceAfterInflating(overriddenCloseAndEnd);\n+        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n+        \/\/ make sure end() and close() were called once each\n+        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be\" +\n+                \" called once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenCloseAndEnd.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass());\n@@ -102,2 +87,0 @@\n-     *\n-     * @throws Exception\n@@ -105,1 +88,2 @@\n-    private void testCloseMultipleTimes() throws Exception {\n+    @Test\n+    public void testCloseMultipleTimes() throws Exception {\n@@ -108,1 +92,2 @@\n-        assertValidInflatedData(testCloseMultipleTimes(numTimes, simpleInflater), simpleInflater);\n+        final String inflatedData = closeMultipleTimesAfterInflating(numTimes, simpleInflater);\n+        assertValidInflatedData(inflatedData, simpleInflater.getClass());\n@@ -110,2 +95,3 @@\n-        final OverrideClose overridenClose = new OverrideClose();\n-        assertValidInflatedData(testCloseMultipleTimes(numTimes, overridenClose), overridenClose);\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        final String ocInflatedData = closeMultipleTimesAfterInflating(numTimes, overriddenClose);\n+        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n@@ -113,4 +99,3 @@\n-        if (overridenClose.numTimesCloseCalled != numTimes) {\n-            throw new Exception(\"close() was expected to be called \" + numTimes + \", but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n+        assertEquals(numTimes, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called \" + numTimes + \", but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n@@ -118,2 +103,3 @@\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        assertValidInflatedData(testCloseMultipleTimes(numTimes, overridenEnd), overridenEnd);\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        final String oeInflatedData = closeMultipleTimesAfterInflating(numTimes, overriddenEnd);\n+        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n@@ -121,7 +107,8 @@\n-        if (overridenEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n-\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        assertValidInflatedData(testCloseMultipleTimes(numTimes, overridenCloseAndEnd), overridenCloseAndEnd);\n+        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n+                overriddenEnd.getClass().getName());\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        final String oceInflatedData = closeMultipleTimesAfterInflating(numTimes,\n+                overriddenCloseAndEnd);\n+        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n@@ -129,9 +116,7 @@\n-        if (overridenCloseAndEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != numTimes) {\n-            throw new Exception(\"close() was expected to be called \" + numTimes + \", but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-\n+        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be\" +\n+                \" called once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(numTimes, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected\" +\n+                \" to be called \" + numTimes + \", but was called \" +\n+                overriddenCloseAndEnd.numTimesCloseCalled + \" time(s) on \" +\n+                overriddenCloseAndEnd.getClass().getName());\n@@ -144,2 +129,0 @@\n-     *\n-     * @throws Exception\n@@ -147,1 +130,2 @@\n-    private void testCloseThenEnd() throws Exception {\n+    @Test\n+    public void testCloseThenEnd() throws Exception {\n@@ -149,1 +133,2 @@\n-        assertValidInflatedData(testCloseThenEnd(simpleInflater), simpleInflater);\n+        final String inflatedData = inflateCloseThenEnd(simpleInflater);\n+        assertValidInflatedData(inflatedData, simpleInflater.getClass());\n@@ -151,2 +136,3 @@\n-        final OverrideClose overridenClose = new OverrideClose();\n-        assertValidInflatedData(testCloseThenEnd(overridenClose), overridenClose);\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        final String ocInflatedData = inflateCloseThenEnd(overriddenClose);\n+        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n@@ -154,4 +140,3 @@\n-        if (overridenClose.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n+                \" once, but was called \" + overriddenClose.numTimesCloseCalled + \" time(s) on \"\n+                + overriddenClose.getClass().getName());\n@@ -159,2 +144,3 @@\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        assertValidInflatedData(testCloseThenEnd(overridenEnd), overridenEnd);\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        final String oeInflatedData = inflateCloseThenEnd(overriddenEnd);\n+        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n@@ -162,16 +148,15 @@\n-        if (overridenEnd.numTimesEndCalled != 2) {\n-            throw new Exception(\"end() was expected to be called twice, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n-\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        assertValidInflatedData(testCloseThenEnd(overridenCloseAndEnd), overridenCloseAndEnd);\n-        \/\/ make sure end was called twice (once through close and once explicitly) and close was called once\n-        if (overridenCloseAndEnd.numTimesEndCalled != 2) {\n-            throw new Exception(\"end() was expected to be called twice, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called twice,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \"\n+                + overriddenEnd.getClass().getName());\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        final String oceInflatedData = inflateCloseThenEnd(overriddenCloseAndEnd);\n+        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n+        \/\/ make sure end was called twice (once through close and once explicitly)\n+        \/\/ and close was called once\n+        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled\n+                + \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled\n+                + \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -182,4 +167,2 @@\n-     * just once and end() too was called just once. This check ensures that the latter call to close()\n-     * doesn't end up calling end() again.\n-     *\n-     * @throws Exception\n+     * just once and end() too was called just once. This check ensures that the latter call to\n+     * close() doesn't end up calling end() again.\n@@ -187,1 +170,2 @@\n-    private void testEndThenClose() throws Exception {\n+    @Test\n+    public void testEndThenClose() throws Exception {\n@@ -189,1 +173,2 @@\n-        assertValidInflatedData(testEndThenClose(simpleInflater), simpleInflater);\n+        final String inflatedData = inflateThenEndThenClose(simpleInflater);\n+        assertValidInflatedData(inflatedData, simpleInflater.getClass());\n@@ -191,2 +176,3 @@\n-        final OverrideClose overridenClose = new OverrideClose();\n-        assertValidInflatedData(testEndThenClose(overridenClose), overridenClose);\n+        final OverrideClose overriddenClose = new OverrideClose();\n+        final String ocInflatedData = inflateThenEndThenClose(overriddenClose);\n+        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n@@ -194,26 +180,24 @@\n-        if (overridenClose.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenClose.getClass().getName());\n-        }\n-\n-        final OverrideEnd overridenEnd = new OverrideEnd();\n-        assertValidInflatedData(testEndThenClose(overridenEnd), overridenEnd);\n-        \/\/ make sure end was called *only once* (through the explicit end call) and close() didn't call it again\n-        \/\/ internally\n-        if (overridenEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenEnd.numTimesEndCalled + \" time(s) on \" + overridenEnd.getClass().getName());\n-        }\n-\n-        final OverrideCloseAndEnd overridenCloseAndEnd = new OverrideCloseAndEnd();\n-        assertValidInflatedData(testEndThenClose(overridenCloseAndEnd), overridenCloseAndEnd);\n-        \/\/ make sure end was called *only once* (through the explicit end call) and close() didn't call it again\n-        \/\/ internally\n-        if (overridenCloseAndEnd.numTimesEndCalled != 1) {\n-            throw new Exception(\"end() was expected to be called once, but was called \"\n-                    + overridenCloseAndEnd.numTimesEndCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n-        if (overridenCloseAndEnd.numTimesCloseCalled != 1) {\n-            throw new Exception(\"close() was expected to be called once, but was called \"\n-                    + overridenClose.numTimesCloseCalled + \" time(s) on \" + overridenCloseAndEnd.getClass().getName());\n-        }\n+        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenClose.getClass().getName());\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        final String oeInflatedData = inflateThenEndThenClose(overriddenEnd);\n+        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n+        \/\/ make sure end was called *only once* (through the explicit end call)\n+        \/\/ and close() didn't call it again internally\n+        assertEquals(1, overriddenEnd.numTimesEndCalled, \"end() was expected to be called once,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \"\n+                + overriddenEnd.getClass().getName());\n+\n+        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n+        final String oceInflatedData = inflateThenEndThenClose(overriddenCloseAndEnd);\n+        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n+        \/\/ make sure end was called *only once* (through the explicit end call) and close()\n+        \/\/ didn't call it again internally\n+        assertEquals(1, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" once, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n+        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n+                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n+                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -223,4 +207,3 @@\n-    private String testCloseOnce(final Inflater inflater) throws Exception {\n-        final byte[] inflatedData = new byte[data.getBytes(StandardCharsets.UTF_8).length];\n-        \/\/ use the inflater to inflate the data\n-        \/\/ and then let it close()\n+    private String closeOnceAfterInflating(final Inflater inflater) throws DataFormatException {\n+        final byte[] inflatedData;\n+        \/\/ inflate() then close\n@@ -228,6 +211,1 @@\n-            inflt.setInput(deflatedData.asReadOnlyBuffer());\n-            final int numDecompressed = inflt.inflate(inflatedData);\n-            if (numDecompressed == 0) {\n-                throw new Exception(\"Inflater \" + inflt.getClass().getName()\n-                        + \", unexpectedly, expects more input\");\n-            }\n+            inflatedData = inflate(inflt, compressedData);\n@@ -235,1 +213,1 @@\n-        return new String(inflatedData, StandardCharsets.UTF_8);\n+        return new String(inflatedData, US_ASCII);\n@@ -238,9 +216,4 @@\n-    private String testCloseMultipleTimes(final int numTimes, final Inflater inflater) throws Exception {\n-        final byte[] inflatedData = new byte[data.getBytes(StandardCharsets.UTF_8).length];\n-        \/\/ use the inflater to inflate the data\n-        inflater.setInput(deflatedData.asReadOnlyBuffer());\n-        final int numDecompressed = inflater.inflate(inflatedData);\n-        if (numDecompressed == 0) {\n-            throw new Exception(\"Inflater \" + inflater.getClass().getName()\n-                    + \", unexpectedly, expects more input\");\n-        }\n+    private String closeMultipleTimesAfterInflating(final int numTimes, final Inflater inflater)\n+            throws DataFormatException {\n+        \/\/ inflate() then call close() multiple times\n+        final byte[] inflatedData = inflate(inflater, compressedData);\n@@ -254,3 +227,3 @@\n-    private String testCloseThenEnd(final Inflater inflater) throws Exception {\n-        final byte[] inflatedData = new byte[data.getBytes(StandardCharsets.UTF_8).length];\n-        \/\/ inflate the data, let it close() and then end()\n+    private String inflateCloseThenEnd(final Inflater inflater) throws Exception {\n+        final byte[] inflatedData;\n+        \/\/ inflate then close() and then end()\n@@ -258,6 +231,1 @@\n-            inflt.setInput(deflatedData.asReadOnlyBuffer());\n-            final int numDecompressed = inflt.inflate(inflatedData);\n-            if (numDecompressed == 0) {\n-                throw new Exception(\"Inflater \" + inflt.getClass().getName()\n-                        + \", unexpectedly, expects more input\");\n-            }\n+            inflatedData = inflate(inflt, compressedData);\n@@ -270,3 +238,3 @@\n-    private String testEndThenClose(final Inflater inflater) throws Exception {\n-        final byte[] inflatedData = new byte[data.getBytes(StandardCharsets.UTF_8).length];\n-        \/\/ inflate the data, let it end() and then close()\n+    private String inflateThenEndThenClose(final Inflater inflater) throws Exception {\n+        final byte[] inflatedData;\n+        \/\/ inflate then end() and then close()\n@@ -274,7 +242,2 @@\n-            inflt.setInput(deflatedData.asReadOnlyBuffer());\n-            final int numDecompressed = inflt.inflate(inflatedData);\n-            if (numDecompressed == 0) {\n-                throw new Exception(\"Inflater \" + inflt.getClass().getName()\n-                        + \", unexpectedly, expects more input\");\n-            }\n-            \/\/ end() it first, before it's (auto)closed by the try-with-resources\n+            inflatedData = inflate(inflt, compressedData);\n+            \/\/ end() it first before it's (auto)closed by the try-with-resources\n@@ -286,5 +249,22 @@\n-    private static void assertValidInflatedData(final String inflatedData,\n-                                                final Inflater inflater) throws Exception {\n-        if (!data.equals(inflatedData)) {\n-            throw new Exception(\"Unexpected inflated data \" + inflatedData + \" generated by \"\n-                    + inflater.getClass().getName());\n+    private static byte[] inflate(final Inflater inflater, final byte[] compressedData)\n+            throws DataFormatException {\n+        final ByteArrayOutputStream inflatedData = new ByteArrayOutputStream();\n+        inflater.setInput(compressedData);\n+        while (!inflater.finished()) {\n+            byte[] tmpBuffer = new byte[100];\n+            final int numDecompressed = inflater.inflate(tmpBuffer);\n+            inflatedData.write(tmpBuffer, 0, numDecompressed);\n+        }\n+        return inflatedData.toByteArray();\n+    }\n+\n+    private static byte[] compress() {\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        try (final Deflater deflater = new Deflater()) {\n+            deflater.setInput(originalBytes);\n+            deflater.finish();\n+            while (!deflater.finished()) {\n+                final byte[] tmpBuffer = new byte[100];\n+                final int numCompressed = deflater.deflate(tmpBuffer);\n+                compressedBaos.write(tmpBuffer, 0, numCompressed);\n+            }\n@@ -292,0 +272,7 @@\n+        return compressedBaos.toByteArray();\n+    }\n+\n+    private static void assertValidInflatedData(final String inflatedData,\n+                                                final Class<?> inflaterType) {\n+        assertEquals(originalStr, inflatedData, \"Unexpected inflated data \" + inflatedData\n+                + \" generated by \" + inflaterType.getName() + \", expected \" + originalStr);\n","filename":"test\/jdk\/java\/util\/zip\/InflaterClose.java","additions":179,"deletions":192,"binary":false,"changes":371,"status":"modified"}]}