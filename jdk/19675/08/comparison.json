{"files":[{"patch":"@@ -52,1 +52,1 @@\n- * The input byte sequence is provided in either byte array or byte buffer,\n+ * The input byte sequence is provided in either byte array or {@link ByteBuffer},\n@@ -54,1 +54,1 @@\n- * written to the output byte array or byte buffer passed to the\n+ * written to the output byte array or {@code ByteBuffer} passed to the\n@@ -57,4 +57,3 @@\n- * The following code fragment demonstrates a trivial compression\n- * and decompression of a string using {@code Deflater} and\n- * {@code Inflater}.\n- * {@snippet id=\"compdecomp\" lang=\"java\" class=\"Snippets\" region=\"DeflaterInflaterExample\"}\n+ * To release resources used by the {@code Deflater}, applications must call the\n+ * {@link #end()} method. After {@code end()} has been called, subsequent calls\n+ * to several methods of the {@code Deflater} will throw an {@link IllegalStateException}.\n@@ -63,5 +62,8 @@\n- * To release resources used by this {@code Deflater}, the {@link #end()} method\n- * should be called explicitly. Subclasses are responsible for the cleanup of resources\n- * acquired by the subclass. Subclasses that override {@link #finalize()} in order\n- * to perform cleanup should be modified to use alternative cleanup mechanisms such\n- * as {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n+ * This class implements {@link AutoCloseable} to facilitate its usage with\n+ * {@code try}-with-resources statement. The {@linkplain Deflater#close() close() method} simply\n+ * calls {@code end()}.\n+ *\n+ * <p>\n+ * The following code fragment demonstrates a trivial compression\n+ * and decompression of a string using {@code Deflater} and {@code Inflater}.\n+ * {@snippet id=\"compdecomp\" lang=\"java\" class=\"Snippets\" region=\"DeflaterInflaterExample\"}\n@@ -74,1 +76,1 @@\n-public class Deflater {\n+public class Deflater implements AutoCloseable {\n@@ -272,0 +274,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -290,0 +293,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -308,0 +312,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -438,0 +443,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -457,0 +463,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -479,0 +486,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -534,0 +542,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -660,0 +669,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -786,0 +796,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -802,0 +813,2 @@\n+     * @throws IllegalStateException if the Deflater is closed\n+     *\n@@ -815,0 +828,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -832,0 +846,2 @@\n+     * @throws IllegalStateException if the Deflater is closed\n+     *\n@@ -845,0 +861,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -857,0 +874,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -871,1 +889,6 @@\n-     * Closes the compressor and discards any unprocessed input.\n+     * Closes and releases the resources held by this {@code Deflater}\n+     * and discards any unprocessed input.\n+     * <p>\n+     * If this method is invoked multiple times, the second and subsequent calls do nothing.\n+     * Several other methods defined by this class will throw an {@link IllegalStateException}\n+     * if invoked on a closed {@code Deflater}.\n@@ -873,3 +896,1 @@\n-     * This method should be called when the compressor is no longer\n-     * being used. Once this method is called, the behavior of the\n-     * Deflater object is undefined.\n+     * @see #close()\n@@ -879,0 +900,4 @@\n+            \/\/ check if already closed\n+            if (zsRef.address() == 0) {\n+                return;\n+            }\n@@ -881,0 +906,1 @@\n+            inputArray = null;\n@@ -884,0 +910,12 @@\n+    \/**\n+     * Closes and releases the resources held by this {@code Deflater}\n+     * and discards any unprocessed input.\n+     *\n+     * @implSpec This method calls the {@link #end()} method.\n+     * @since 24\n+     *\/\n+    @Override\n+    public final void close() {\n+        end();\n+    }\n+\n@@ -886,2 +924,3 @@\n-        if (zsRef.address() == 0)\n-            throw new NullPointerException(\"Deflater has been closed\");\n+        if (zsRef.address() == 0) {\n+            throw new IllegalStateException(\"Deflater has been closed\");\n+        }\n@@ -931,1 +970,1 @@\n-        private long address;\n+        private long address; \/\/ will be a non-zero value when the native resource is in use\n@@ -935,0 +974,1 @@\n+            assert addr != 0 : \"native address is 0\";\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":59,"deletions":19,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -62,2 +62,4 @@\n- * To release resources used by this {@code Inflater}, the {@link #end()} method\n- * should be called explicitly. Subclasses are responsible for the cleanup of resources\n+ * The {@code Inflater} cleans up its resources in its {@link #end()} method. To facilitate\n+ * usage with try-with-resources, this class implements {@link AutoCloseable}. The\n+ * {@link #close()} method of this class calls {@code end()} to clean up its\n+ * resources. Subclasses are responsible for the cleanup of resources\n@@ -74,1 +76,1 @@\n-public class Inflater {\n+public class Inflater implements AutoCloseable {\n@@ -195,0 +197,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -213,0 +216,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -230,0 +234,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -334,0 +339,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -440,0 +446,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -477,0 +484,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -603,0 +611,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -619,0 +628,2 @@\n+     * @throws IllegalStateException if the Inflater is closed\n+     *\n@@ -632,0 +643,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -649,0 +661,2 @@\n+     * @throws IllegalStateException if the Inflater is closed\n+     *\n@@ -662,0 +676,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -673,0 +688,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -687,1 +703,6 @@\n-     * Closes the decompressor and discards any unprocessed input.\n+     * Closes and releases the resources held by this {@code Inflater}\n+     * and discards any unprocessed input.\n+     * <p>\n+     * If this method is invoked multiple times, the second and subsequent calls do nothing.\n+     * Several other methods defined by this class will throw an {@link IllegalStateException}\n+     * if invoked on a closed {@code Inflater}.\n@@ -689,3 +710,1 @@\n-     * This method should be called when the decompressor is no longer\n-     * being used. Once this method is called, the behavior of the\n-     * Inflater object is undefined.\n+     * @see #close()\n@@ -695,0 +714,4 @@\n+            \/\/ check if already closed\n+            if (zsRef.address() == 0) {\n+                return;\n+            }\n@@ -702,0 +725,12 @@\n+    \/**\n+     * Closes and releases the resources held by this {@code Inflater}\n+     * and discards any unprocessed input.\n+     *\n+     * @implSpec This method calls the {@link #end()} method.\n+     * @since 24\n+     *\/\n+    @Override\n+    public final void close() {\n+        end();\n+    }\n+\n@@ -704,2 +739,3 @@\n-        if (zsRef.address() == 0)\n-            throw new NullPointerException(\"Inflater has been closed\");\n+        if (zsRef.address() == 0) {\n+            throw new IllegalStateException(\"Inflater has been closed\");\n+        }\n@@ -740,1 +776,1 @@\n-        private long address;\n+        private long address; \/\/ will be a non-zero value when the native resource is in use\n@@ -744,0 +780,1 @@\n+            assert addr != 0 : \"native address is 0\";\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":47,"deletions":10,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -41,2 +41,1 @@\n-        Deflater compressor = new Deflater();\n-        try {\n+        try (Deflater compressor = new Deflater()) {\n@@ -58,3 +57,0 @@\n-        } finally {\n-            \/\/ Release the resources held by the compressor\n-            compressor.end();\n@@ -64,1 +60,0 @@\n-        Inflater decompressor = new Inflater();\n@@ -66,1 +61,1 @@\n-        try {\n+        try (Inflater decompressor = new Inflater()) {\n@@ -86,3 +81,0 @@\n-        } finally {\n-            \/\/ Release the resources held by the decompressor\n-            decompressor.end();\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/snippet-files\/Snippets.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,2 +130,2 @@\n-        \/\/ Write on a closed GZIPOutputStream, closed Deflater IOException expected\n-        assertThrows(NullPointerException.class , () -> gzip.write(inputBytes, 0, INPUT_LENGTH));\n+        \/\/ Write on a closed GZIPOutputStream, closed Deflater IllegalStateException expected\n+        assertThrows(IllegalStateException.class , () -> gzip.write(inputBytes, 0, INPUT_LENGTH));\n@@ -152,2 +152,2 @@\n-        \/\/ Write on a closed DeflaterOutputStream, 'Deflater has been closed' NPE is expected\n-        assertThrows(NullPointerException.class , () -> def.write(inputBytes, 0, INPUT_LENGTH));\n+        \/\/ Write on a closed DeflaterOutputStream, IllegalStateException is expected\n+        assertThrows(IllegalStateException.class , () -> def.write(inputBytes, 0, INPUT_LENGTH));\n@@ -205,2 +205,2 @@\n-        \/\/ Write on a closed ZipOutputStream , 'Deflater has been closed' NPE is expected\n-        assertThrows(NullPointerException.class , () -> zip.write(inputBytes, 0, INPUT_LENGTH));\n+        \/\/ Write on a closed ZipOutputStream , IllegalStateException is expected\n+        assertThrows(IllegalStateException.class , () -> zip.write(inputBytes, 0, INPUT_LENGTH));\n","filename":"test\/jdk\/java\/util\/zip\/CloseInflaterDeflaterTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.Deflater;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8225763\n+ * @summary Test the close() and end() methods on java.util.zip.Deflater\n+ * @run junit DeflaterClose\n+ *\/\n+public class DeflaterClose {\n+\n+    private static final String data = \"foobarhelloworld!!!!\";\n+\n+    \/**\n+     * Closes the Deflater multiple times and then expects end() to be called that\n+     * many times.\n+     *\/\n+    @Test\n+    public void testCloseMultipleTimes() throws Exception {\n+        final int numTimes = 3;\n+        final Deflater simpleDeflater = new Deflater();\n+        closeMultipleTimesAfterCompressing(numTimes, simpleDeflater);\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        closeMultipleTimesAfterCompressing(numTimes, overriddenEnd);\n+        \/\/ make sure end was called called numTimes\n+        assertEquals(numTimes, overriddenEnd.numTimesEndCalled, \"end() was expected to be called \" +\n+                numTimes + \", but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n+                overriddenEnd.getClass().getName());\n+    }\n+\n+    \/**\n+     * Closes the Deflater first and then calls end(). Verifies that end() was called\n+     * twice (once internally through close() and once explicitly).\n+     *\/\n+    @Test\n+    public void testCloseThenEnd() throws Exception {\n+        final Deflater simpleDeflater = new Deflater();\n+        compressCloseThenEnd(simpleDeflater);\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        compressCloseThenEnd(overriddenEnd);\n+        \/\/ make sure end was called twice (once through close() and then explicitly)\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called\" +\n+                \" twice, but was called \" + overriddenEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenEnd.getClass().getName());\n+    }\n+\n+    \/**\n+     * Calls end() on the Deflater first and then calls close(). Verifies that end() was called\n+     * twice.\n+     *\/\n+    @Test\n+    public void testEndThenClose() throws Exception {\n+        final Deflater simpleDeflater = new Deflater();\n+        compressEndThenClose(simpleDeflater);\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        compressEndThenClose(overriddenEnd);\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called twice,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled +\n+                \" time(s) on \" + overriddenEnd.getClass().getName());\n+    }\n+\n+    private void closeMultipleTimesAfterCompressing(final int numTimes, final Deflater deflater) {\n+        compress(deflater);\n+        \/\/ call close() multiple times\n+        for (int i = 0; i < numTimes; i++) {\n+            deflater.close();\n+        }\n+    }\n+\n+    private void compressCloseThenEnd(final Deflater deflater) {\n+        \/\/ compress the data then close() and then end()\n+        try (final Deflater compressor = deflater) {\n+            compress(compressor);\n+        }\n+        deflater.end();\n+    }\n+\n+    private void compressEndThenClose(final Deflater deflater) {\n+        \/\/ compress the data then end() and then close()\n+        try (final Deflater compressor = deflater) {\n+            compress(compressor);\n+            \/\/ end() it first before it's (auto)closed by the try-with-resources\n+            compressor.end();\n+        }\n+    }\n+\n+    private static byte[] compress(final Deflater deflater) {\n+        deflater.setInput(data.getBytes(StandardCharsets.UTF_8));\n+        deflater.finish();\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        while (!deflater.finished()) {\n+            final byte[] tmpBuffer = new byte[100];\n+            final int numCompressed = deflater.deflate(tmpBuffer);\n+            compressedBaos.write(tmpBuffer, 0, numCompressed);\n+        }\n+        return compressedBaos.toByteArray();\n+    }\n+\n+    private static final class OverrideEnd extends Deflater {\n+        private int numTimesEndCalled = 0;\n+\n+        @Override\n+        public void end() {\n+            this.numTimesEndCalled++;\n+            super.end();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterClose.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+\n+import org.junit.jupiter.api.Test;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8225763\n+ * @summary Test the close() and end() methods on java.util.zip.Inflater\n+ * @run junit InflaterClose\n+ *\/\n+public class InflaterClose {\n+\n+    private static final String originalStr = \"foobarhelloworld!!!!\";\n+    private static final byte[] originalBytes = originalStr.getBytes(US_ASCII);\n+    private static final byte[] compressedData = compress();\n+\n+    \/**\n+     * Closes the Inflater multiple times and then expects end() to be called that\n+     * many times.\n+     *\/\n+    @Test\n+    public void testCloseMultipleTimes() throws Exception {\n+        final int numTimes = 3;\n+        final Inflater simpleInflater = new Inflater();\n+        final String inflatedData = closeMultipleTimesAfterInflating(numTimes, simpleInflater);\n+        assertValidInflatedData(inflatedData, simpleInflater.getClass());\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        final String oeInflatedData = closeMultipleTimesAfterInflating(numTimes, overriddenEnd);\n+        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n+        \/\/ make sure end was called numTimes\n+        assertEquals(numTimes, overriddenEnd.numTimesEndCalled, \"end() was expected to be called \" +\n+                numTimes + \", but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \" +\n+                overriddenEnd.getClass().getName());\n+    }\n+\n+    \/**\n+     * Closes the Inflater first and then calls end(). Verifies that end() was called\n+     * twice (once internally through close() and once explicitly)\n+     *\/\n+    @Test\n+    public void testCloseThenEnd() throws Exception {\n+        final Inflater simpleInflater = new Inflater();\n+        final String inflatedData = inflateCloseThenEnd(simpleInflater);\n+        assertValidInflatedData(inflatedData, simpleInflater.getClass());\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        final String oeInflatedData = inflateCloseThenEnd(overriddenEnd);\n+        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n+        \/\/ make sure end was called twice (once through close() and then explicitly)\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called twice,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \"\n+                + overriddenEnd.getClass().getName());\n+    }\n+\n+    \/**\n+     * Calls end() on the Inflater first and then calls close(). Verifies that end() was called\n+     * twice.\n+     *\/\n+    @Test\n+    public void testEndThenClose() throws Exception {\n+        final Inflater simpleInflater = new Inflater();\n+        final String inflatedData = inflateThenEndThenClose(simpleInflater);\n+        assertValidInflatedData(inflatedData, simpleInflater.getClass());\n+\n+        final OverrideEnd overriddenEnd = new OverrideEnd();\n+        final String oeInflatedData = inflateThenEndThenClose(overriddenEnd);\n+        assertValidInflatedData(oeInflatedData, overriddenEnd.getClass());\n+        \/\/ make sure end was called twice (once through the explicit end call and\n+        \/\/ once through close())\n+        assertEquals(2, overriddenEnd.numTimesEndCalled, \"end() was expected to be called twice,\" +\n+                \" but was called \" + overriddenEnd.numTimesEndCalled + \" time(s) on \"\n+                + overriddenEnd.getClass().getName());\n+    }\n+\n+\n+    private String closeMultipleTimesAfterInflating(final int numTimes, final Inflater inflater)\n+            throws DataFormatException {\n+        \/\/ inflate() then call close() multiple times\n+        final byte[] inflatedData = inflate(inflater, compressedData);\n+        \/\/ call close()\n+        for (int i = 0; i < numTimes; i++) {\n+            inflater.close();\n+        }\n+        return new String(inflatedData, StandardCharsets.UTF_8);\n+    }\n+\n+    private String inflateCloseThenEnd(final Inflater inflater) throws Exception {\n+        final byte[] inflatedData;\n+        \/\/ inflate then close() and then end()\n+        try (final Inflater inflt = inflater) {\n+            inflatedData = inflate(inflt, compressedData);\n+        }\n+        \/\/ end() the already closed inflater\n+        inflater.end();\n+        return new String(inflatedData, StandardCharsets.UTF_8);\n+    }\n+\n+    private String inflateThenEndThenClose(final Inflater inflater) throws Exception {\n+        final byte[] inflatedData;\n+        \/\/ inflate then end() and then close()\n+        try (final Inflater inflt = inflater) {\n+            inflatedData = inflate(inflt, compressedData);\n+            \/\/ end() it first before it's (auto)closed by the try-with-resources\n+            inflt.end();\n+        }\n+        return new String(inflatedData, StandardCharsets.UTF_8);\n+    }\n+\n+    private static byte[] inflate(final Inflater inflater, final byte[] compressedData)\n+            throws DataFormatException {\n+        final ByteArrayOutputStream inflatedData = new ByteArrayOutputStream();\n+        inflater.setInput(compressedData);\n+        while (!inflater.finished()) {\n+            byte[] tmpBuffer = new byte[100];\n+            final int numDecompressed = inflater.inflate(tmpBuffer);\n+            inflatedData.write(tmpBuffer, 0, numDecompressed);\n+        }\n+        return inflatedData.toByteArray();\n+    }\n+\n+    private static byte[] compress() {\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        try (final Deflater deflater = new Deflater()) {\n+            deflater.setInput(originalBytes);\n+            deflater.finish();\n+            while (!deflater.finished()) {\n+                final byte[] tmpBuffer = new byte[100];\n+                final int numCompressed = deflater.deflate(tmpBuffer);\n+                compressedBaos.write(tmpBuffer, 0, numCompressed);\n+            }\n+        }\n+        return compressedBaos.toByteArray();\n+    }\n+\n+    private static void assertValidInflatedData(final String inflatedData,\n+                                                final Class<?> inflaterType) {\n+        assertEquals(originalStr, inflatedData, \"Unexpected inflated data \" + inflatedData\n+                + \" generated by \" + inflaterType.getName() + \", expected \" + originalStr);\n+    }\n+\n+    private static final class OverrideEnd extends Inflater {\n+        private int numTimesEndCalled = 0;\n+\n+        @Override\n+        public void end() {\n+            this.numTimesEndCalled++;\n+            super.end();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/zip\/InflaterClose.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n-import java.io.*;\n+\n@@ -43,2 +43,2 @@\n-         Deflater deflater = new Deflater();\n-         Inflater inflater = new Inflater();\n+         try (final Deflater deflater = new Deflater();\n+            final Inflater inflater = new Inflater()) {\n@@ -46,3 +46,3 @@\n-         byte[] dataIn = new byte[BUF_SIZE];\n-         byte[] dataOut = new byte[BUF_SIZE];\n-         byte[] tmp = new byte[BUF_SIZE];\n+             byte[] dataIn = new byte[BUF_SIZE];\n+             byte[] dataOut = new byte[BUF_SIZE];\n+             byte[] tmp = new byte[BUF_SIZE];\n@@ -50,6 +50,6 @@\n-         Random r = new Random();\n-         r.nextBytes(dataIn);\n-         long bytesReadDef    = 0;\n-         long bytesWrittenDef = 0;\n-         long bytesReadInf    = 0;\n-         long bytesWrittenInf = 0;\n+             Random r = new Random();\n+             r.nextBytes(dataIn);\n+             long bytesReadDef = 0;\n+             long bytesWrittenDef = 0;\n+             long bytesReadInf = 0;\n+             long bytesWrittenInf = 0;\n@@ -57,11 +57,11 @@\n-         deflater.setInput(dataIn, 0, dataIn.length);\n-         while (bytesReadDef < dataSize || bytesWrittenInf < dataSize) {\n-             int len = r.nextInt(BUF_SIZE\/2) + BUF_SIZE \/ 2;\n-             if (deflater.needsInput()) {\n-                 bytesReadDef += dataIn.length;\n-                 check(bytesReadDef == deflater.getBytesRead());\n-                 deflater.setInput(dataIn, 0, dataIn.length);\n-             }\n-             int n = deflater.deflate(tmp, 0, len);\n-             bytesWrittenDef += n;\n-             check(bytesWrittenDef == deflater.getBytesWritten());\n+             deflater.setInput(dataIn, 0, dataIn.length);\n+             while (bytesReadDef < dataSize || bytesWrittenInf < dataSize) {\n+                 int len = r.nextInt(BUF_SIZE \/ 2) + BUF_SIZE \/ 2;\n+                 if (deflater.needsInput()) {\n+                     bytesReadDef += dataIn.length;\n+                     check(bytesReadDef == deflater.getBytesRead());\n+                     deflater.setInput(dataIn, 0, dataIn.length);\n+                 }\n+                 int n = deflater.deflate(tmp, 0, len);\n+                 bytesWrittenDef += n;\n+                 check(bytesWrittenDef == deflater.getBytesWritten());\n@@ -69,5 +69,7 @@\n-             inflater.setInput(tmp, 0, n);\n-             bytesReadInf += n;\n-             while (!inflater.needsInput()) {\n-                 bytesWrittenInf += inflater.inflate(dataOut, 0, dataOut.length);\n-                 check(bytesWrittenInf == inflater.getBytesWritten());\n+                 inflater.setInput(tmp, 0, n);\n+                 bytesReadInf += n;\n+                 while (!inflater.needsInput()) {\n+                     bytesWrittenInf += inflater.inflate(dataOut, 0, dataOut.length);\n+                     check(bytesWrittenInf == inflater.getBytesWritten());\n+                 }\n+                 check(bytesReadInf == inflater.getBytesRead());\n@@ -75,1 +77,0 @@\n-             check(bytesReadInf == inflater.getBytesRead());\n","filename":"test\/jdk\/java\/util\/zip\/TotalInOut.java","additions":30,"deletions":29,"binary":false,"changes":59,"status":"modified"}]}