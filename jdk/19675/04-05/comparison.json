{"files":[{"patch":"@@ -274,0 +274,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -310,0 +311,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -536,0 +538,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -662,0 +665,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -788,0 +792,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -817,0 +822,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -847,0 +853,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -859,0 +866,1 @@\n+     * @throws IllegalStateException if the Deflater is closed\n@@ -902,1 +910,1 @@\n-    public void close() {\n+    public final void close() {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -232,0 +233,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -336,0 +338,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -479,0 +482,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -605,0 +609,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -634,0 +639,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -664,0 +670,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -675,0 +682,1 @@\n+     * @throws IllegalStateException if the Inflater is closed\n@@ -719,1 +727,1 @@\n-    public void close() {\n+    public final void close() {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @summary Test that the close() and end() methods on java.util.zip.Deflater\n+ * @summary Test the close() and end() methods on java.util.zip.Deflater\n@@ -43,1 +43,1 @@\n-     * Closes the Deflater multiple times and then expects close() and end() to be called that\n+     * Closes the Deflater multiple times and then expects end() to be called that\n@@ -52,7 +52,0 @@\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        closeMultipleTimesAfterCompressing(numTimes, overriddenClose);\n-        \/\/ make sure close was called numTimes\n-        assertEquals(numTimes, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called \" + numTimes + \", but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenClose.getClass().getName());\n-\n@@ -65,11 +58,0 @@\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        closeMultipleTimesAfterCompressing(numTimes, overriddenCloseAndEnd);\n-        \/\/ make sure end was called called numTimes\n-        assertEquals(numTimes, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called \" +\n-                numTimes + \", but was called\" + overriddenCloseAndEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-        assertEquals(numTimes, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected\" +\n-                \" to be called \" + numTimes + \", but was called \" +\n-                overriddenClose.numTimesCloseCalled + \" time(s) on \" +\n-                overriddenCloseAndEnd.getClass().getName());\n@@ -79,3 +61,2 @@\n-     * Closes the Deflater first and then calls end(). Verifies that close() was called\n-     * just once but end() was called twice (once internally through close() and once\n-     * explicitly)\n+     * Closes the Deflater first and then calls end(). Verifies that end() was called\n+     * twice (once internally through close() and once explicitly).\n@@ -88,7 +69,0 @@\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        compressCloseThenEnd(overriddenClose);\n-        \/\/ make sure close was called once\n-        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n-                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenClose.getClass().getName());\n-\n@@ -101,11 +75,0 @@\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        compressCloseThenEnd(overriddenCloseAndEnd);\n-        \/\/ make sure end was called twice (once through close and once explicitly)\n-        \/\/ and close was called once\n-        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to\" +\n-                \" be called twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -115,2 +78,2 @@\n-     * Calls end() on the Deflater first and then calls close(). Verifies that close() was called\n-     * just once and end() twice.\n+     * Calls end() on the Deflater first and then calls close(). Verifies that end() was called\n+     * twice.\n@@ -123,7 +86,0 @@\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        compressEndThenClose(overriddenClose);\n-        \/\/ make sure close was called once\n-        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n-                \" once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenClose.getClass().getName());\n-\n@@ -137,11 +93,0 @@\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        compressEndThenClose(overriddenCloseAndEnd);\n-        \/\/ make sure end was called twice (once through the explicit end call and\n-        \/\/ once through close())\n-        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n-                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be \" +\n-                \"called once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -196,27 +141,0 @@\n-\n-    private static final class OverrideClose extends Deflater {\n-        private int numTimesCloseCalled = 0;\n-\n-        @Override\n-        public void close() {\n-            this.numTimesCloseCalled++;\n-            super.close();\n-        }\n-    }\n-\n-    private static final class OverrideCloseAndEnd extends Deflater {\n-        private int numTimesEndCalled = 0;\n-        private int numTimesCloseCalled = 0;\n-\n-        @Override\n-        public void end() {\n-            this.numTimesEndCalled++;\n-            super.end();\n-        }\n-\n-        @Override\n-        public void close() {\n-            this.numTimesCloseCalled++;\n-            super.close();\n-        }\n-    }\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterClose.java","additions":6,"deletions":88,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @summary Test that the close() and end() methods on java.util.zip.Inflater\n+ * @summary Test the close() and end() methods on java.util.zip.Inflater\n@@ -48,1 +48,1 @@\n-     * Closes the Inflater multiple times and then expects close() and end() to be called that\n+     * Closes the Inflater multiple times and then expects end() to be called that\n@@ -58,8 +58,0 @@\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        final String ocInflatedData = closeMultipleTimesAfterInflating(numTimes, overriddenClose);\n-        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n-        \/\/ make sure close was called numTimes\n-        assertEquals(numTimes, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called \" + numTimes + \", but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenClose.getClass().getName());\n-\n@@ -69,1 +61,1 @@\n-        \/\/ make sure end was called called numTimes\n+        \/\/ make sure end was called numTimes\n@@ -73,14 +65,0 @@\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        final String oceInflatedData = closeMultipleTimesAfterInflating(numTimes,\n-                overriddenCloseAndEnd);\n-        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n-        \/\/ make sure end was called called numTimes\n-        assertEquals(numTimes, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected\" +\n-                \" to be called \" + numTimes + \", but was called \" +\n-                overriddenCloseAndEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-        assertEquals(numTimes, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected\" +\n-                \" to be called \" + numTimes + \", but was called \" +\n-                overriddenCloseAndEnd.numTimesCloseCalled + \" time(s) on \" +\n-                overriddenCloseAndEnd.getClass().getName());\n@@ -90,3 +68,2 @@\n-     * Closes the Inflater first and then calls end(). Verifies that close() was called\n-     * just once but end() was called twice (once internally through close() and once\n-     * explicitly)\n+     * Closes the Inflater first and then calls end(). Verifies that end() was called\n+     * twice (once internally through close() and once explicitly)\n@@ -100,8 +77,0 @@\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        final String ocInflatedData = inflateCloseThenEnd(overriddenClose);\n-        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n-        \/\/ make sure close was called once\n-        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be called\" +\n-                \" once, but was called \" + overriddenClose.numTimesCloseCalled + \" time(s) on \"\n-                + overriddenClose.getClass().getName());\n-\n@@ -115,12 +84,0 @@\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        final String oceInflatedData = inflateCloseThenEnd(overriddenCloseAndEnd);\n-        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n-        \/\/ make sure end was called twice (once through close and once explicitly)\n-        \/\/ and close was called once\n-        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n-                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled\n-                + \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called once, but was called \" + overriddenClose.numTimesCloseCalled\n-                + \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -130,2 +87,2 @@\n-     * Calls end() on the Inflater first and then calls close(). Verifies that close() was called\n-     * just once and end() twice.\n+     * Calls end() on the Inflater first and then calls close(). Verifies that end() was called\n+     * twice.\n@@ -139,8 +96,0 @@\n-        final OverrideClose overriddenClose = new OverrideClose();\n-        final String ocInflatedData = inflateThenEndThenClose(overriddenClose);\n-        assertValidInflatedData(ocInflatedData, overriddenClose.getClass());\n-        \/\/ make sure close was called once\n-        assertEquals(1, overriddenClose.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenClose.getClass().getName());\n-\n@@ -155,12 +104,0 @@\n-\n-        final OverrideCloseAndEnd overriddenCloseAndEnd = new OverrideCloseAndEnd();\n-        final String oceInflatedData = inflateThenEndThenClose(overriddenCloseAndEnd);\n-        assertValidInflatedData(oceInflatedData, overriddenCloseAndEnd.getClass());\n-        \/\/ make sure end was called twice (once through the explicit end call and\n-        \/\/ once through close())\n-        assertEquals(2, overriddenCloseAndEnd.numTimesEndCalled, \"end() was expected to be called\" +\n-                \" twice, but was called \" + overriddenCloseAndEnd.numTimesEndCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n-        assertEquals(1, overriddenCloseAndEnd.numTimesCloseCalled, \"close() was expected to be\" +\n-                \" called once, but was called \" + overriddenClose.numTimesCloseCalled +\n-                \" time(s) on \" + overriddenCloseAndEnd.getClass().getName());\n@@ -244,27 +181,0 @@\n-\n-    private static final class OverrideClose extends Inflater {\n-        private int numTimesCloseCalled = 0;\n-\n-        @Override\n-        public void close() {\n-            this.numTimesCloseCalled++;\n-            super.close();\n-        }\n-    }\n-\n-    private static final class OverrideCloseAndEnd extends Inflater {\n-        private int numTimesEndCalled = 0;\n-        private int numTimesCloseCalled = 0;\n-\n-        @Override\n-        public void end() {\n-            this.numTimesEndCalled++;\n-            super.end();\n-        }\n-\n-        @Override\n-        public void close() {\n-            this.numTimesCloseCalled++;\n-            super.close();\n-        }\n-    }\n","filename":"test\/jdk\/java\/util\/zip\/InflaterClose.java","additions":7,"deletions":97,"binary":false,"changes":104,"status":"modified"}]}