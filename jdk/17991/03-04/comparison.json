{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,5 +59,0 @@\n-    \/\/ Expected data is switched depending on COMPAT or CLDR\n-    \/\/ currencySymbolsTest() is only ran for COMPAT\n-    private static final boolean isCompat =\n-            \"COMPAT\".equals(System.getProperty(\"java.locale.providers\"));\n-\n@@ -101,9 +96,0 @@\n-        String[][] expectedCOMPATData = {\n-                {\"$1,234.56\", \"$1,234.56\", \"JPY1,235\", \"DEM1,234.56\", \"EUR1,234.56\"},\n-                {\"\\uFFE51,235\", \"USD1,234.56\", \"\\uFFE51,235\", \"DEM1,234.56\", \"EUR1,234.56\"},\n-                {\"1.234,56 \\u20AC\", \"1.234,56 USD\", \"1.235 JPY\", \"1.234,56 DM\", \"1.234,56 \\u20AC\"},\n-                {\"\\u20AC 1.234,56\", \"USD 1.234,56\", \"JPY 1.235\", \"DEM 1.234,56\", \"\\u20AC 1.234,56\"},\n-                {\"\\u20AC 1.234,56\", \"USD 1.234,56\", \"JPY 1.235\", \"DEM 1.234,56\", \"\\u20AC 1.234,56\"},\n-                {\"\\u20AC 1.234,56\", \"USD 1.234,56\", \"JPY 1.235\", \"DEM 1.234,56\", \"\\u20AC 1.234,56\"},\n-                {\"SFr. 1'234.56\", \"USD 1'234.56\", \"JPY 1'235\", \"DEM 1'234.56\", \"EUR 1'234.56\"},\n-        };\n@@ -124,1 +110,1 @@\n-                String expected = isCompat ? expectedCOMPATData[i][j] : expectedCLDRData[i][j];\n+                String expected = expectedCLDRData[i][j];\n@@ -130,55 +116,0 @@\n-\n-    \/\/ Compares the expected currency symbol of a locale to the value returned by\n-    \/\/ DecimalFormatSymbols.getCurrencySymbol().\n-    @ParameterizedTest\n-    @MethodSource(\"currencySymbolsDataProvider\")\n-    public void currencySymbolsTest(String expected, Locale locale) throws ParseException {\n-        if (!isCompat) {\n-            return; \/\/ For COMPAT only.\n-        }\n-        if (expected == null) {\n-            System.out.println(\"Warning: No expected currency symbol defined for locale \" + locale);\n-        } else {\n-            \/\/ Reserved for when a currency will change its symbol at a given time in the future\n-            if (expected.contains(\";\")) {\n-                expected = getFutureSymbol(expected);\n-            }\n-            DecimalFormatSymbols symbols = DecimalFormatSymbols.getInstance(locale);\n-            String result = symbols.getCurrencySymbol();\n-            assertEquals(expected, result, \"Wrong currency symbol for locale \" +\n-                        locale + \", expected: \" + expected + \", got: \" + result);\n-        }\n-    }\n-\n-    \/\/ Grabs the custom CurrencySymbols.properties and loads the file into a Properties\n-    \/\/ instance. Building the data set, which consists of the currency symbol for the locale.\n-    private static Stream<Arguments> currencySymbolsDataProvider() throws IOException {\n-        ArrayList<Arguments> data = new ArrayList<Arguments>();\n-        FileInputStream stream = new FileInputStream(new File(\n-                System.getProperty(\"test.src\", \".\"), \"CurrencySymbols.properties\"));\n-        InputStreamReader streamReader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n-        Properties props = new Properties();\n-        props.load(streamReader);\n-        Locale[] locales = NumberFormat.getAvailableLocales();\n-        for (Locale locale : locales) {\n-            String expected = (String) props.get(locale.toString());\n-            data.add(Arguments.of(expected, locale));\n-        }\n-        return data.stream();\n-    }\n-\n-    \/\/ Utility to grab the future symbol if in the right format and date cut-over allows\n-    private static String getFutureSymbol(String expected) throws ParseException {\n-        StringTokenizer tokens = new StringTokenizer(expected, \";\");\n-        int tokensCount = tokens.countTokens();\n-        if (tokensCount == 3) {\n-            expected = tokens.nextToken();\n-            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\", Locale.US);\n-            format.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n-            format.setLenient(false);\n-            if (format.parse(tokens.nextToken()).getTime() < System.currentTimeMillis()) {\n-                expected = tokens.nextToken();\n-            }\n-        }\n-        return expected;\n-    }\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/CurrencyFormat.java","additions":1,"deletions":70,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1,157 +0,0 @@\n-#\n-# Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-ar=¤\n-ar_AE=د.إ.‏\n-ar_BH=د.ب.‏\n-ar_DZ=د.ج.‏\n-ar_EG=ج.م.‏\n-ar_IQ=د.ع.‏\n-ar_JO=د.أ.‏\n-ar_KW=د.ك.‏\n-ar_LB=ل.ل.‏\n-ar_LY=د.ل.‏\n-ar_MA=د.م.‏\n-ar_OM=ر.ع.‏\n-ar_QA=ر.ق.‏\n-ar_SA=ر.س.‏\n-# see bug 4412080\n-# ar_SD=ج.س.‏\n-ar_SY=ل.س.‏\n-ar_TN=د.ت.‏\n-ar_YE=ر.ي.‏\n-be=¤\n-# see bug 4412080\n-# be_BY=Руб\n-bg=¤\n-# see bug 4412080\n-# bg_BG=Lr\n-ca=¤\n-ca_ES=€\n-cs=¤\n-cs_CZ=Kč\n-da=¤\n-da_DK=kr\n-de=¤\n-de_AT=€\n-de_CH=SFr.\n-de_DE=€\n-de_LU=€\n-el=¤\n-el_GR=€\n-en=¤\n-en_AU=$\n-en_CA=$\n-en_GB=£\n-en_IE=€\n-en_NZ=$\n-en_US=$\n-en_ZA=R\n-es=¤\n-es_AR=$\n-es_BO=B$\n-es_CL=Ch$\n-# 5102005\n-es_CO=$\n-es_CR=C\n-es_CU=CU$\n-es_DO=RD$\n-# see bug 4412080\n-# es_EC=S\/\n-es_ES=€\n-es_GT=Q\n-es_HN=L\n-es_MX=$\n-es_NI=$C\n-es_PA=B\n-es_PE=S\/.\n-es_PR=$\n-es_PY=G\n-es_SV=C\n-es_UY=NU$\n-es_VE=Bs.S.\n-et=¤\n-et_EE=€\n-fi=¤\n-fi_FI=€\n-fr=¤\n-fr_BE=€\n-fr_CA=$\n-fr_CH=SFr.\n-fr_FR=€\n-fr_LU=€\n-hi_IN=रू\n-hr=¤\n-hr_HR=€\n-hu=¤\n-hu_HU=Ft\n-is=¤\n-is_IS=kr.\n-it=¤\n-it_CH=SFr.\n-it_IT=€\n-iw=¤\n-iw_IL=ש\"ח\n-ja=¤\n-ja_JP=￥\n-ko=¤\n-ko_KR=￦\n-lt=¤\n-lt_LT=€\n-lv=¤\n-lv_LV=€\n-mk=¤\n-mk_MK=Den\n-nl=¤\n-nl_BE=€\n-nl_NL=€\n-no=¤\n-no_NO=kr\n-no_NO_NY=kr\n-pl=¤\n-pl_PL=zł\n-pt=¤\n-pt_BR=R$\n-pt_PT=€\n-ro=¤\n-ro_RO=LEI\n-ru=¤\n-ru_RU=руб.\n-sk=¤\n-sk_SK=€\n-sl=¤\n-sl_SI=€\n-sq=¤\n-sq_AL=Lek\n-sv=¤\n-sv_SE=kr\n-th=¤\n-th_TH=฿\n-tr=¤\n-tr_TR=TL\n-uk=¤\n-uk_UA=грн.\n-zh=¤\n-zh_CN=￥\n-zh_HK=HK$\n-zh_TW=NT$\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/CurrencySymbols.properties","additions":0,"deletions":157,"binary":false,"changes":157,"status":"deleted"},{"patch":"@@ -29,0 +29,2 @@\n+ * @run main\/othervm -Djava.locale.providers=SPI,COMPAT CompatWarning\n+ * @run main\/othervm -Djava.locale.providers=COMPAT,SPI CompatWarning\n@@ -30,0 +32,2 @@\n+ * @run main\/othervm -Djava.locale.providers=SPI,JRE CompatWarning\n+ * @run main\/othervm -Djava.locale.providers=JRE,SPI CompatWarning\n","filename":"test\/jdk\/java\/util\/Locale\/CompatWarning.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}