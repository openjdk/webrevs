{"files":[{"patch":"@@ -182,0 +182,1 @@\n+    \/\/    I for I\n@@ -186,0 +187,13 @@\n+    private int cmoveUIGEforI(int a, int b, int c, int d) {\n+        return Integer.compareUnsigned(a, b) >= 0 ? c : d;\n+    }\n+\n+    private int cmoveUILTforI(int a, int b, int c, int d) {\n+        return Integer.compareUnsigned(a, b) < 0 ? c : d;\n+    }\n+\n+    private int cmoveUILEforI(int a, int b, int c, int d) {\n+        return Integer.compareUnsigned(a, b) <= 0 ? c : d;\n+    }\n+\n+    \/\/    I for L\n@@ -190,0 +204,13 @@\n+    private long cmoveUIGEforL(int a, int b, long c, long d) {\n+        return Integer.compareUnsigned(a, b) >= 0 ? c : d;\n+    }\n+\n+    private long cmoveUILTforL(int a, int b, long c, long d) {\n+        return Integer.compareUnsigned(a, b) < 0 ? c : d;\n+    }\n+\n+    private long cmoveUILEforL(int a, int b, long c, long d) {\n+        return Integer.compareUnsigned(a, b) <= 0 ? c : d;\n+    }\n+\n+    \/\/    I for F\n@@ -206,0 +233,1 @@\n+    \/\/    I for D\n@@ -210,0 +238,13 @@\n+    private double cmoveUIGEforD(int a, int b, double c, double d) {\n+        return Integer.compareUnsigned(a, b) >= 0 ? c : d;\n+    }\n+\n+    private double cmoveUILTforD(int a, int b, double c, double d) {\n+        return Integer.compareUnsigned(a, b) < 0 ? c : d;\n+    }\n+\n+    private double cmoveUILEforD(int a, int b, double c, double d) {\n+        return Integer.compareUnsigned(a, b) <= 0 ? c : d;\n+    }\n+\n+    \/\/    L for I\n@@ -214,0 +255,13 @@\n+    private int cmoveULGEforI(long a, long b, int c, int d) {\n+        return Long.compareUnsigned(a, b) >= 0 ? c : d;\n+    }\n+\n+    private int cmoveULLTforI(long a, long b, int c, int d) {\n+        return Long.compareUnsigned(a, b) < 0 ? c : d;\n+    }\n+\n+    private int cmoveULLEforI(long a, long b, int c, int d) {\n+        return Long.compareUnsigned(a, b) <= 0 ? c : d;\n+    }\n+\n+    \/\/    L for L\n@@ -218,0 +272,13 @@\n+    private long cmoveULGEforL(long a, long b, long c, long d) {\n+        return Long.compareUnsigned(a, b) >= 0 ? c : d;\n+    }\n+\n+    private long cmoveULLTforL(long a, long b, long c, long d) {\n+        return Long.compareUnsigned(a, b) < 0 ? c : d;\n+    }\n+\n+    private long cmoveULLEforL(long a, long b, long c, long d) {\n+        return Long.compareUnsigned(a, b) <= 0 ? c : d;\n+    }\n+\n+    \/\/    L for F\n@@ -222,0 +289,13 @@\n+    private float cmoveULGEforF(long a, long b, float c, float d) {\n+        return Long.compareUnsigned(a, b) >= 0 ? c : d;\n+    }\n+\n+    private float cmoveULLTforF(long a, long b, float c, float d) {\n+        return Long.compareUnsigned(a, b) < 0 ? c : d;\n+    }\n+\n+    private float cmoveULLEforF(long a, long b, float c, float d) {\n+        return Long.compareUnsigned(a, b) <= 0 ? c : d;\n+    }\n+\n+    \/\/    L for D\n@@ -758,0 +838,1 @@\n+    \/\/     I fo I\n@@ -769,0 +850,34 @@\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUIGEforI(int[] a, int[] b, int[] c, int[] d, int[] r, int[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            int cc = c[i];\n+            int dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) >= 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUILTforI(int[] a, int[] b, int[] c, int[] d, int[] r, int[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            int cc = c[i];\n+            int dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) < 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUILEforI(int[] a, int[] b, int[] c, int[] d, int[] r, int[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            int cc = c[i];\n+            int dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) <= 0 ? cc : dd;\n+        }\n+    }\n+\n+    \/\/     I fo L\n@@ -780,0 +895,34 @@\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUIGEforL(int[] a, int[] b, long[] c, long[] d, long[] r, long[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            long cc = c[i];\n+            long dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) >= 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUILTforL(int[] a, int[] b, long[] c, long[] d, long[] r, long[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            long cc = c[i];\n+            long dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) < 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUILEforL(int[] a, int[] b, long[] c, long[] d, long[] r, long[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            long cc = c[i];\n+            long dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) <= 0 ? cc : dd;\n+        }\n+    }\n+\n+    \/\/     I fo F\n@@ -844,0 +993,1 @@\n+    \/\/     I fo D\n@@ -855,0 +1005,34 @@\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUIGEforD(int[] a, int[] b, double[] c, double[] d, double[] r, double[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            double cc = c[i];\n+            double dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) >= 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUILTforD(int[] a, int[] b, double[] c, double[] d, double[] r, double[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            double cc = c[i];\n+            double dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) < 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveUILEforD(int[] a, int[] b, double[] c, double[] d, double[] r, double[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            double cc = c[i];\n+            double dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Integer.compareUnsigned(a[i], b[i]) <= 0 ? cc : dd;\n+        }\n+    }\n+\n+    \/\/     L fo I\n@@ -866,0 +1050,34 @@\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULGEforI(long[] a, long[] b, int[] c, int[] d, int[] r, int[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            int cc = c[i];\n+            int dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) >= 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULLTforI(long[] a, long[] b, int[] c, int[] d, int[] r, int[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            int cc = c[i];\n+            int dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) < 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULLEforI(long[] a, long[] b, int[] c, int[] d, int[] r, int[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            int cc = c[i];\n+            int dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) <= 0 ? cc : dd;\n+        }\n+    }\n+\n+    \/\/     L fo L\n@@ -877,0 +1095,34 @@\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULGEforL(long[] a, long[] b, long[] c, long[] d, long[] r, long[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            long cc = c[i];\n+            long dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) >= 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULLTforL(long[] a, long[] b, long[] c, long[] d, long[] r, long[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            long cc = c[i];\n+            long dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) < 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULLEforL(long[] a, long[] b, long[] c, long[] d, long[] r, long[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            long cc = c[i];\n+            long dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) <= 0 ? cc : dd;\n+        }\n+    }\n+\n+    \/\/     L fo F\n@@ -888,0 +1140,34 @@\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULGEforF(long[] a, long[] b, float[] c, float[] d, float[] r, float[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            float cc = c[i];\n+            float dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) >= 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULLTforF(long[] a, long[] b, float[] c, float[] d, float[] r, float[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            float cc = c[i];\n+            float dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) < 0 ? cc : dd;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    private static void testCMoveULLEforF(long[] a, long[] b, float[] c, float[] d, float[] r, float[] r2) {\n+        for (int i = 0; i < a.length; i++) {\n+            float cc = c[i];\n+            float dd = d[i];\n+            r2[i] = cc + dd;\n+            r[i] = Long.compareUnsigned(a[i], b[i]) <= 0 ? cc : dd;\n+        }\n+    }\n+\n+    \/\/     L fo D\n@@ -1239,1 +1525,2 @@\n-    @Run(test = {\"testCMoveIGTforI\",\n+    @Run(test = {\/\/ Signed\n+                 \"testCMoveIGTforI\",\n@@ -1247,0 +1534,2 @@\n+                 \/\/ Unsigned\n+                 \/\/     I for I\n@@ -1248,0 +1537,4 @@\n+                 \"testCMoveUIGEforI\",\n+                 \"testCMoveUILTforI\",\n+                 \"testCMoveUILEforI\",\n+                 \/\/     I for L\n@@ -1249,0 +1542,4 @@\n+                 \"testCMoveUIGEforL\",\n+                 \"testCMoveUILTforL\",\n+                 \"testCMoveUILEforL\",\n+                 \/\/     I for F\n@@ -1253,0 +1550,1 @@\n+                 \/\/     I for D\n@@ -1254,0 +1552,4 @@\n+                 \"testCMoveUIGEforD\",\n+                 \"testCMoveUILTforD\",\n+                 \"testCMoveUILEforD\",\n+                 \/\/     L for I\n@@ -1255,0 +1557,4 @@\n+                 \"testCMoveULGEforI\",\n+                 \"testCMoveULLTforI\",\n+                 \"testCMoveULLEforI\",\n+                 \/\/     L for L\n@@ -1256,0 +1562,4 @@\n+                 \"testCMoveULGEforL\",\n+                 \"testCMoveULLTforL\",\n+                 \"testCMoveULLEforL\",\n+                 \/\/     L for F\n@@ -1257,0 +1567,4 @@\n+                 \"testCMoveULGEforF\",\n+                 \"testCMoveULLTforF\",\n+                 \"testCMoveULLEforF\",\n+                 \/\/     L for D\n@@ -1261,0 +1575,1 @@\n+                 \/\/ Float\n@@ -1352,0 +1667,1 @@\n+        \/\/     I for I\n@@ -1357,0 +1673,16 @@\n+        testCMoveUIGEforI(aI, bI, cI, dI, rI, rI);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rI[i], cmoveUIGEforI(aI[i], bI[i], cI[i], dI[i]));\n+        }\n+\n+        testCMoveUILTforI(aI, bI, cI, dI, rI, rI);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rI[i], cmoveUILTforI(aI[i], bI[i], cI[i], dI[i]));\n+        }\n+\n+        testCMoveUILEforI(aI, bI, cI, dI, rI, rI);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rI[i], cmoveUILEforI(aI[i], bI[i], cI[i], dI[i]));\n+        }\n+\n+        \/\/     I for L\n@@ -1362,0 +1694,16 @@\n+        testCMoveUIGEforL(aI, bI, cL, dL, rL, rL);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rL[i], cmoveUIGEforL(aI[i], bI[i], cL[i], dL[i]));\n+        }\n+\n+        testCMoveUILTforL(aI, bI, cL, dL, rL, rL);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rL[i], cmoveUILTforL(aI[i], bI[i], cL[i], dL[i]));\n+        }\n+\n+        testCMoveUILEforL(aI, bI, cL, dL, rL, rL);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rL[i], cmoveUILEforL(aI[i], bI[i], cL[i], dL[i]));\n+        }\n+\n+        \/\/     I for F\n@@ -1382,0 +1730,1 @@\n+        \/\/     I for D\n@@ -1387,0 +1736,16 @@\n+        testCMoveUIGEforD(aI, bI, cD, dD, rD, rD);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rD[i], cmoveUIGEforD(aI[i], bI[i], cD[i], dD[i]));\n+        }\n+\n+        testCMoveUILTforD(aI, bI, cD, dD, rD, rD);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rD[i], cmoveUILTforD(aI[i], bI[i], cD[i], dD[i]));\n+        }\n+\n+        testCMoveUILEforD(aI, bI, cD, dD, rD, rD);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rD[i], cmoveUILEforD(aI[i], bI[i], cD[i], dD[i]));\n+        }\n+\n+        \/\/     L for I\n@@ -1392,0 +1757,16 @@\n+        testCMoveULGEforI(aL, bL, cI, dI, rI, rI);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rI[i], cmoveULGEforI(aL[i], bL[i], cI[i], dI[i]));\n+        }\n+\n+        testCMoveULLTforI(aL, bL, cI, dI, rI, rI);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rI[i], cmoveULLTforI(aL[i], bL[i], cI[i], dI[i]));\n+        }\n+\n+        testCMoveULLEforI(aL, bL, cI, dI, rI, rI);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rI[i], cmoveULLEforI(aL[i], bL[i], cI[i], dI[i]));\n+        }\n+\n+        \/\/     L for L\n@@ -1397,0 +1778,16 @@\n+        testCMoveULGEforL(aL, bL, cL, dL, rL, rL);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rL[i], cmoveULGEforL(aL[i], bL[i], cL[i], dL[i]));\n+        }\n+\n+        testCMoveULLTforL(aL, bL, cL, dL, rL, rL);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rL[i], cmoveULLTforL(aL[i], bL[i], cL[i], dL[i]));\n+        }\n+\n+        testCMoveULLEforL(aL, bL, cL, dL, rL, rL);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rL[i], cmoveULLEforL(aL[i], bL[i], cL[i], dL[i]));\n+        }\n+\n+        \/\/     L for F\n@@ -1402,0 +1799,16 @@\n+        testCMoveULGEforF(aL, bL, cF, dF, rF, rF);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rF[i], cmoveULGEforF(aL[i], bL[i], cF[i], dF[i]));\n+        }\n+\n+        testCMoveULLTforF(aL, bL, cF, dF, rF, rF);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rF[i], cmoveULLTforF(aL[i], bL[i], cF[i], dF[i]));\n+        }\n+\n+        testCMoveULLEforF(aL, bL, cF, dF, rF, rF);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(rF[i], cmoveULLEforF(aL[i], bL[i], cF[i], dF[i]));\n+        }\n+\n+        \/\/     L for D\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorConditionalMove.java","additions":414,"deletions":1,"binary":false,"changes":415,"status":"modified"}]}