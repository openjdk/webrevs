{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -273,0 +274,77 @@\n+    \/**\n+     * Verifies that when a DeflaterInputStream is constructed\n+     * by passing a Deflater instance, then closing the DeflaterInputStream\n+     * will not close the passed Deflater instance.\n+     *\/\n+    private static void deflaterInputStreamDeflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] original = \"foo\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ run the DeflaterInputStream tests\n+        try (final Deflater def = new Deflater()) {\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(original);\n+                 DeflaterInputStream iis = new DeflaterInputStream(bis, def)) {\n+                iis.readAllBytes();\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(original);\n+                 DeflaterInputStream iis = new DeflaterInputStream(bis, def, 1024)) {\n+                iis.readAllBytes();\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+        }\n+    }\n+\n+    private static byte[] deflate(final byte[] original) {\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        try (Deflater compressor = new Deflater()) {\n+            compressor.setInput(original);\n+            compressor.finish();\n+            while (!compressor.finished()) {\n+                byte[] tmpBuffer = new byte[1024];\n+                int numCompressed = compressor.deflate(tmpBuffer);\n+                compressedBaos.write(tmpBuffer, 0, numCompressed);\n+            }\n+        }\n+        return compressedBaos.toByteArray();\n+    }\n+\n+    \/**\n+     * Verifies that when a InflaterOutputStream is constructed\n+     * by passing a Inflater instance, then closing the InflaterOutputStream\n+     * will not close the passed Inflater instance.\n+     *\/\n+    private static void inflaterOutputStreamInflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] original = \"bar\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ deflate it\n+        final byte[] deflated = deflate(original);\n+        try (final Inflater infl = new Inflater()) {\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 InflaterOutputStream dos = new InflaterOutputStream(bos, infl)) {\n+                dos.write(deflated);\n+                dos.flush();\n+                check(Arrays.equals(original, bos.toByteArray()));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 InflaterOutputStream dos = new InflaterOutputStream(bos, infl, 1024)) {\n+                dos.write(deflated);\n+                dos.flush();\n+                check(Arrays.equals(original, bos.toByteArray()));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+        }\n+    }\n+\n@@ -287,0 +365,4 @@\n+\n+        deflaterInputStreamDeflaterNotClosed();\n+\n+        inflaterOutputStreamInflaterNotClosed();\n","filename":"test\/jdk\/java\/util\/zip\/DeflateIn_InflateOut.java","additions":83,"deletions":1,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +34,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -296,0 +298,100 @@\n+    private static byte[] deflate(final byte[] original) {\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        try (Deflater compressor = new Deflater()) {\n+            compressor.setInput(original);\n+            compressor.finish();\n+            while (!compressor.finished()) {\n+                byte[] tmpBuffer = new byte[1024];\n+                int numCompressed = compressor.deflate(tmpBuffer);\n+                compressedBaos.write(tmpBuffer, 0, numCompressed);\n+            }\n+        }\n+        return compressedBaos.toByteArray();\n+    }\n+\n+    \/**\n+     * Verifies that when a InflaterInputStream is constructed\n+     * by passing a Inflater instance, then closing the InflaterInputStream\n+     * will not close the passed Inflater instance.\n+     *\/\n+    private static void inflaterInputStreamInflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] original = \"foo\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ deflate it\n+        final byte[] deflated = deflate(original);\n+        \/\/ run the InflaterInputStream tests\n+        try (final Inflater infl = new Inflater()) {\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(deflated);\n+                 InflaterInputStream iis = new InflaterInputStream(bis, infl)) {\n+                final byte[] inflated = iis.readAllBytes();\n+                check(Arrays.equals(original, inflated));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(deflated);\n+                 InflaterInputStream iis = new InflaterInputStream(bis, infl, 1024)) {\n+                final byte[] inflated = iis.readAllBytes();\n+                check(Arrays.equals(original, inflated));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that when a DeflaterOutputStream is constructed\n+     * by passing a Deflater instance, then closing the DeflaterOutputStream\n+     * will not close the passed Deflater instance.\n+     *\/\n+    private static void deflaterOutputStreamDeflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] data = \"bar\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ run the InflaterInputStream tests\n+        try (final Deflater def = new Deflater()) {\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 DeflaterOutputStream dos = new DeflaterOutputStream(bos, def)) {\n+                dos.write(data);\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 DeflaterOutputStream dos = new DeflaterOutputStream(bos, def, 1024)) {\n+                dos.write(data);\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            for (boolean syncFlush : new boolean[] {false, true}) {\n+                System.out.println(\"testing with syncFlush = \" + syncFlush);\n+                try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                     DeflaterOutputStream dos = new DeflaterOutputStream(bos, def, syncFlush)) {\n+                    dos.write(data);\n+                }\n+                \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+                \/\/ the deflater is closed\n+                def.reset();\n+            }\n+\n+            \/\/ repeat the test with the other constructor\n+            for (boolean syncFlush : new boolean[] {false, true}) {\n+                System.out.println(\"testing with syncFlush = \" + syncFlush);\n+                try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                     DeflaterOutputStream dos = new DeflaterOutputStream(bos, def, 1024, syncFlush)) {\n+                    dos.write(data);\n+                }\n+                \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+                \/\/ the deflater is closed\n+                def.reset();\n+            }\n+        }\n+    }\n+\n@@ -303,0 +405,2 @@\n+        inflaterInputStreamInflaterNotClosed();\n+        deflaterOutputStreamDeflaterNotClosed();\n","filename":"test\/jdk\/java\/util\/zip\/InflateIn_DeflateOut.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"}]}