{"files":[{"patch":"@@ -38,11 +38,5 @@\n- * <p>This class uses a {@link Deflater} for compressing the data. Two forms of constructors\n- * are available for constructing a {@code DeflaterInputStream} - one which accepts\n- * a {@code Deflater} and one which doesn't. The constructors that don't accept a {@code Deflater}\n- * will create and use a {@code Deflater} instance of their own. The {@code Deflater} instance\n- * created in those cases will be {@linkplain Deflater#close() closed} when the\n- * {@code DeflaterInputStream} instance itself is {@linkplain #close() closed}.\n- * On the other hand, if a {@code DeflaterInputStream} was\n- * constructed by passing it a {@code Deflater}, then closing the {@code DeflaterInputStream}\n- * will not close the passed {@code Deflater}. In those cases, it is the responsibility of\n- * the caller to close the {@code Deflater} as and when appropriate, after the\n- * {@code DeflaterInputStream} has been closed.\n+ * <p>This class uses a {@link Deflater} for compressing the data. When constructing a\n+ * {@code DeflaterInputStream}, if it is passed a {@code Deflater}, then it is the\n+ * responsibility of the caller to {@linkplain Deflater#close() close the Deflater}\n+ * as and when appropriate, after the\n+ * {@linkplain DeflaterInputStream#close() DeflaterInputStream has been closed}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterInputStream.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -42,11 +42,5 @@\n- * <p>This class uses a {@link Deflater} for compressing the data. Two forms of constructors\n- * are available for constructing a {@code DeflaterOutputStream} - one which accepts\n- * a {@code Deflater} and one which doesn't. The constructors that don't accept a {@code Deflater}\n- * will create and use a {@code Deflater} instance of their own. The {@code Deflater} instance\n- * created in those cases will be {@linkplain Deflater#close() closed} when the\n- * {@code DeflaterOutputStream} instance itself is {@linkplain #close() closed}.\n- * On the other hand, if a {@code DeflaterOutputStream} was\n- * constructed by passing it a {@code Deflater}, then closing the {@code DeflaterOutputStream}\n- * will not close the passed {@code Deflater}. In those cases, it is the responsibility of\n- * the caller to close the {@code Deflater} as and when appropriate, after the\n- * {@code DeflaterOutputStream} has been closed.\n+ * <p>This class uses a {@link Deflater} for compressing the data. When constructing a\n+ * {@code DeflaterOutputStream}, if it is passed a {@code Deflater}, then it is the\n+ * responsibility of the caller to {@linkplain Deflater#close() close the Deflater}\n+ * as and when appropriate, after the\n+ * {@linkplain DeflaterOutputStream#close() DeflaterOutputStream has been closed}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -43,12 +43,5 @@\n- * <p>This class uses an {@link Inflater} for uncompressing the data. Two forms of constructors\n- * are available for constructing an {@code InflaterInputStream} - one which accepts\n- * an {@code Inflater} and one which doesn't. The constructors that don't accept an\n- * {@code Inflater} will create and use an {@code Inflater} instance of their own.\n- * The {@code Inflater} instance created in those cases will be\n- * {@linkplain Inflater#close() closed} when the {@code InflaterInputStream} instance itself\n- * is {@linkplain #close() closed}.\n- * On the other hand, if an {@code InflaterInputStream} was\n- * constructed by passing it an {@code Inflater}, then closing the {@code InflaterInputStream}\n- * will not close the passed {@code Inflater}. In those cases, it is the responsibility of\n- * the caller to close the {@code Inflater} as and when appropriate, after the\n- * {@code InflaterInputStream} has been closed.\n+ * <p>This class uses an {@link Inflater} for uncompressing the data. When constructing an\n+ * {@code InflaterInputStream}, if it is passed an {@code Inflater}, then it is the\n+ * responsibility of the caller to {@linkplain Inflater#close() close the Inflater}\n+ * as and when appropriate, after the\n+ * {@linkplain InflaterInputStream#close() InflaterInputStream has been closed}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,12 +38,5 @@\n- * <p>This class uses an {@link Inflater} for uncompressing the data. Two forms of constructors\n- * are available for constructing an {@code InflaterOutputStream} - one which accepts\n- * an {@code Inflater} and one which doesn't. The constructors that don't accept an\n- * {@code Inflater} will create and use an {@code Inflater} instance of their own.\n- * The {@code Inflater} instance created in those cases will be\n- * {@linkplain Inflater#close() closed} when the {@code InflaterOutputStream} instance itself\n- * is {@linkplain #close() closed}.\n- * On the other hand, if an {@code InflaterOutputStream} was\n- * constructed by passing it an {@code Inflater}, then closing the {@code InflaterOutputStream}\n- * will not close the passed {@code Inflater}. In those cases, it is the responsibility of\n- * the caller to close the {@code Inflater} as and when appropriate, after the\n- * {@code InflaterOutputStream} has been closed.\n+ * <p>This class uses an {@link Inflater} for uncompressing the data. When constructing an\n+ * {@code InflaterOutputStream}, if it is passed an {@code Inflater}, then it is the\n+ * responsibility of the caller to {@linkplain Inflater#close() close the Inflater}\n+ * as and when appropriate, after the\n+ * {@linkplain InflaterOutputStream#close() InflaterOutputStream has been closed}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterOutputStream.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"}]}