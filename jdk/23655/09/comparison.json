{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,14 @@\n+ * <h2 id=\"compressor-usage\">Compressor Usage<\/h2>\n+ * A {@code DeflaterInputStream} created without\n+ * specifying a {@linkplain Deflater compressor} will create a compressor\n+ * at construction time, and close the compressor when the input stream\n+ * is {@linkplain #close closed}.\n+ * <p>\n+ * If a compressor is specified when creating a {@code DeflaterInputStream}, it is the\n+ * responsibility of the caller to {@linkplain Deflater#close close} the\n+ * compressor after closing the input stream.\n+ *\n+ * @apiNote\n+ * The {@link #close} method should be called to release resources used by this\n+ * stream, either directly, or with the {@code try}-with-resources statement.\n+ *\n@@ -71,2 +85,5 @@\n-     * Creates a new input stream with a default compressor and buffer\n-     * size.\n+     * Creates a new input stream and compressor with the\n+     * default compression level and a default buffer size.\n+     * <p>\n+     * The compressor will be closed when this input stream\n+     * is {@linkplain #close() closed}.\n@@ -85,0 +102,4 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this input stream\n+     * {@linkplain ##compressor-usage will not close} the given\n+     * {@linkplain Deflater compressor}.\n@@ -97,0 +118,4 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this input stream\n+     * {@linkplain ##compressor-usage will not close} the given\n+     * {@linkplain Deflater compressor}.\n@@ -126,0 +151,1 @@\n+    @Override\n@@ -150,0 +176,1 @@\n+    @Override\n@@ -172,0 +199,1 @@\n+    @Override\n@@ -227,0 +255,1 @@\n+    @Override\n@@ -262,0 +291,1 @@\n+    @Override\n@@ -276,0 +306,1 @@\n+    @Override\n@@ -285,0 +316,1 @@\n+    @Override\n@@ -294,0 +326,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterInputStream.java","additions":36,"deletions":3,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,14 @@\n+ * <h2 id=\"compressor-usage\">Compressor Usage<\/h2>\n+ * A {@code DeflaterOutputStream} created without\n+ * specifying a {@linkplain Deflater compressor} will create a compressor\n+ * at construction time, and close the compressor when the output stream\n+ * is {@linkplain #close closed}.\n+ * <p>\n+ * If a compressor is specified when creating a {@code DeflaterOutputStream}, it is the\n+ * responsibility of the caller to {@linkplain Deflater#close close} the\n+ * compressor after closing the output stream.\n+ *\n+ * @apiNote\n+ * The {@link #close} method should be called to release resources used by this\n+ * stream, either directly, or with the {@code try}-with-resources statement.\n+ *\n@@ -66,0 +80,4 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this output stream\n+     * {@linkplain ##compressor-usage will not close} the given\n+     * {@linkplain Deflater compressor}.\n@@ -101,1 +119,5 @@\n-     * the 4-argument constructor DeflaterOutputStream(out, def, size, false).\n+     * the 4-argument constructor {@code DeflaterOutputStream(out, def, size, false)}.\n+     * <p>\n+     * {@linkplain #close() Closing} this output stream\n+     * {@linkplain ##compressor-usage will not close} the given\n+     * {@linkplain Deflater compressor}.\n@@ -115,0 +137,4 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this output stream\n+     * {@linkplain ##compressor-usage will not close} the given\n+     * {@linkplain Deflater compressor}.\n@@ -138,1 +164,5 @@\n-     * the 3-argument constructor DeflaterOutputStream(out, def, false).\n+     * the 3-argument constructor {@code DeflaterOutputStream(out, def, false)}.\n+     * <p>\n+     * {@linkplain #close() Closing} this output stream\n+     * {@linkplain ##compressor-usage will not close} the given\n+     * {@linkplain Deflater compressor}.\n@@ -151,2 +181,6 @@\n-     * Creates a new output stream with a default compressor, a default\n-     * buffer size and the specified flush mode.\n+     * Creates a new output stream and compressor with the\n+     * default compression level, a default buffer size and\n+     * the specified flush mode.\n+     * <p>\n+     * The compressor will be closed when this output stream\n+     * is {@linkplain #close() closed}.\n@@ -169,1 +203,2 @@\n-     * Creates a new output stream with a default compressor and buffer size.\n+     * Creates a new output stream and compressor with the\n+     * default compression level and a default buffer size.\n@@ -172,1 +207,4 @@\n-     * the 2-argument constructor DeflaterOutputStream(out, false).\n+     * the 2-argument constructor {@code DeflaterOutputStream(out, false)}.\n+     * <p>\n+     * The compressor will be closed when this output stream\n+     * is {@linkplain #close() closed}.\n@@ -187,0 +225,1 @@\n+    @Override\n@@ -201,0 +240,1 @@\n+    @Override\n@@ -242,0 +282,1 @@\n+     *\n@@ -244,0 +285,1 @@\n+    @Override\n@@ -299,0 +341,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":50,"deletions":7,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,15 @@\n+ *\n+ * <h2 id=\"decompressor-usage\">Decompressor Usage<\/h2>\n+ * An {@code InflaterInputStream} created without\n+ * specifying a {@linkplain Inflater decompressor} will create a decompressor\n+ * at construction time, and close the decompressor when the input stream\n+ * is {@linkplain #close closed}.\n+ * <p>\n+ * If a decompressor is specified when creating a {@code InflaterInputStream}, it is the\n+ * responsibility of the caller to {@linkplain Inflater#close close} the\n+ * decompressor after closing the input stream.\n+ *\n+ * @apiNote\n+ * The {@link #close} method should be called to release resources used by this\n+ * stream, either directly, or with the {@code try}-with-resources statement.\n+ *\n@@ -78,0 +93,5 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this input stream\n+     * {@linkplain ##decompressor-usage will not close} the given\n+     * {@linkplain Inflater decompressor}.\n+     *\n@@ -97,0 +117,5 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this input stream\n+     * {@linkplain ##decompressor-usage will not close} the given\n+     * {@linkplain Inflater decompressor}.\n+     *\n@@ -107,1 +132,6 @@\n-     * Creates a new input stream with a default decompressor and buffer size.\n+     * Creates a new input stream and decompressor with a\n+     * default buffer size.\n+     * <p>\n+     * The decompressor will be closed when this input stream\n+     * is {@linkplain #close() closed}.\n+     *\n@@ -123,0 +153,1 @@\n+    @Override\n@@ -154,0 +185,1 @@\n+    @Override\n@@ -196,0 +228,1 @@\n+    @Override\n@@ -223,0 +256,1 @@\n+    @Override\n@@ -249,0 +283,1 @@\n+     *\n@@ -251,0 +286,1 @@\n+    @Override\n@@ -290,0 +326,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,14 @@\n+ * <h2 id=\"decompressor-usage\">Decompressor Usage<\/h2>\n+ * An {@code InflaterOutputStream} created without\n+ * specifying a {@linkplain Inflater decompressor} will create a decompressor\n+ * at construction time, and close the decompressor when the output stream\n+ * is {@linkplain #close closed}.\n+ * <p>\n+ * If a decompressor is specified when creating a {@code InflaterOutputStream}, it is the\n+ * responsibility of the caller to {@linkplain Inflater#close close} the\n+ * decompressor after closing the output stream.\n+ *\n+ * @apiNote\n+ * The {@link #close} method should be called to release resources used by this\n+ * stream, either directly, or with the {@code try}-with-resources statement.\n+ *\n@@ -71,2 +85,5 @@\n-     * Creates a new output stream with a default decompressor and buffer\n-     * size.\n+     * Creates a new output stream and decompressor with a\n+     * default buffer size.\n+     * <p>\n+     * The decompressor will be closed when this output stream\n+     * is {@linkplain #close() closed}.\n@@ -85,0 +102,4 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this output stream\n+     * {@linkplain ##decompressor-usage will not close} the given\n+     * {@linkplain Inflater decompressor}.\n@@ -97,0 +118,4 @@\n+     * <p>\n+     * {@linkplain #close() Closing} this output stream\n+     * {@linkplain ##decompressor-usage will not close} the given\n+     * {@linkplain Inflater decompressor}.\n@@ -126,0 +151,1 @@\n+    @Override\n@@ -145,0 +171,1 @@\n+    @Override\n@@ -202,0 +229,1 @@\n+    @Override\n@@ -222,0 +250,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterOutputStream.java","additions":32,"deletions":3,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -273,0 +274,77 @@\n+    \/**\n+     * Verifies that when a DeflaterInputStream is constructed\n+     * by passing a Deflater instance, then closing the DeflaterInputStream\n+     * will not close the passed Deflater instance.\n+     *\/\n+    private static void deflaterInputStreamDeflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] original = \"foo\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ run the DeflaterInputStream tests\n+        try (final Deflater def = new Deflater()) {\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(original);\n+                 DeflaterInputStream iis = new DeflaterInputStream(bis, def)) {\n+                iis.readAllBytes();\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(original);\n+                 DeflaterInputStream iis = new DeflaterInputStream(bis, def, 1024)) {\n+                iis.readAllBytes();\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+        }\n+    }\n+\n+    private static byte[] deflate(final byte[] original) {\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        try (Deflater compressor = new Deflater()) {\n+            compressor.setInput(original);\n+            compressor.finish();\n+            while (!compressor.finished()) {\n+                byte[] tmpBuffer = new byte[1024];\n+                int numCompressed = compressor.deflate(tmpBuffer);\n+                compressedBaos.write(tmpBuffer, 0, numCompressed);\n+            }\n+        }\n+        return compressedBaos.toByteArray();\n+    }\n+\n+    \/**\n+     * Verifies that when a InflaterOutputStream is constructed\n+     * by passing a Inflater instance, then closing the InflaterOutputStream\n+     * will not close the passed Inflater instance.\n+     *\/\n+    private static void inflaterOutputStreamInflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] original = \"bar\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ deflate it\n+        final byte[] deflated = deflate(original);\n+        try (final Inflater infl = new Inflater()) {\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 InflaterOutputStream dos = new InflaterOutputStream(bos, infl)) {\n+                dos.write(deflated);\n+                dos.flush();\n+                check(Arrays.equals(original, bos.toByteArray()));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 InflaterOutputStream dos = new InflaterOutputStream(bos, infl, 1024)) {\n+                dos.write(deflated);\n+                dos.flush();\n+                check(Arrays.equals(original, bos.toByteArray()));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+        }\n+    }\n+\n@@ -287,0 +365,4 @@\n+\n+        deflaterInputStreamDeflaterNotClosed();\n+\n+        inflaterOutputStreamInflaterNotClosed();\n","filename":"test\/jdk\/java\/util\/zip\/DeflateIn_InflateOut.java","additions":83,"deletions":1,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +34,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -296,0 +298,100 @@\n+    private static byte[] deflate(final byte[] original) {\n+        final ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        try (Deflater compressor = new Deflater()) {\n+            compressor.setInput(original);\n+            compressor.finish();\n+            while (!compressor.finished()) {\n+                byte[] tmpBuffer = new byte[1024];\n+                int numCompressed = compressor.deflate(tmpBuffer);\n+                compressedBaos.write(tmpBuffer, 0, numCompressed);\n+            }\n+        }\n+        return compressedBaos.toByteArray();\n+    }\n+\n+    \/**\n+     * Verifies that when a InflaterInputStream is constructed\n+     * by passing a Inflater instance, then closing the InflaterInputStream\n+     * will not close the passed Inflater instance.\n+     *\/\n+    private static void inflaterInputStreamInflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] original = \"foo\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ deflate it\n+        final byte[] deflated = deflate(original);\n+        \/\/ run the InflaterInputStream tests\n+        try (final Inflater infl = new Inflater()) {\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(deflated);\n+                 InflaterInputStream iis = new InflaterInputStream(bis, infl)) {\n+                final byte[] inflated = iis.readAllBytes();\n+                check(Arrays.equals(original, inflated));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayInputStream bis = new ByteArrayInputStream(deflated);\n+                 InflaterInputStream iis = new InflaterInputStream(bis, infl, 1024)) {\n+                final byte[] inflated = iis.readAllBytes();\n+                check(Arrays.equals(original, inflated));\n+            }\n+            \/\/ verify the inflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the inflater is closed\n+            infl.reset();\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that when a DeflaterOutputStream is constructed\n+     * by passing a Deflater instance, then closing the DeflaterOutputStream\n+     * will not close the passed Deflater instance.\n+     *\/\n+    private static void deflaterOutputStreamDeflaterNotClosed() throws Throwable {\n+        \/\/ some arbitrary content\n+        final byte[] data = \"bar\".repeat(1024).getBytes(StandardCharsets.US_ASCII);\n+        \/\/ run the InflaterInputStream tests\n+        try (final Deflater def = new Deflater()) {\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 DeflaterOutputStream dos = new DeflaterOutputStream(bos, def)) {\n+                dos.write(data);\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                 DeflaterOutputStream dos = new DeflaterOutputStream(bos, def, 1024)) {\n+                dos.write(data);\n+            }\n+            \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+            \/\/ the deflater is closed\n+            def.reset();\n+\n+            \/\/ repeat the test with the other constructor\n+            for (boolean syncFlush : new boolean[] {false, true}) {\n+                System.out.println(\"testing with syncFlush = \" + syncFlush);\n+                try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                     DeflaterOutputStream dos = new DeflaterOutputStream(bos, def, syncFlush)) {\n+                    dos.write(data);\n+                }\n+                \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+                \/\/ the deflater is closed\n+                def.reset();\n+            }\n+\n+            \/\/ repeat the test with the other constructor\n+            for (boolean syncFlush : new boolean[] {false, true}) {\n+                System.out.println(\"testing with syncFlush = \" + syncFlush);\n+                try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                     DeflaterOutputStream dos = new DeflaterOutputStream(bos, def, 1024, syncFlush)) {\n+                    dos.write(data);\n+                }\n+                \/\/ verify the deflater wasn't closed - reset() will throw IllegalStateException if\n+                \/\/ the deflater is closed\n+                def.reset();\n+            }\n+        }\n+    }\n+\n@@ -303,0 +405,2 @@\n+        inflaterInputStreamInflaterNotClosed();\n+        deflaterOutputStreamDeflaterNotClosed();\n","filename":"test\/jdk\/java\/util\/zip\/InflateIn_DeflateOut.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"}]}