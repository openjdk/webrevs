{"files":[{"patch":"@@ -30,4 +30,0 @@\n-import java.lang.classfile.constantpool.MethodHandleEntry;\n-import java.lang.classfile.constantpool.ModuleEntry;\n-import java.lang.classfile.constantpool.NameAndTypeEntry;\n-import java.lang.classfile.constantpool.PackageEntry;\n@@ -133,71 +129,0 @@\n-    \/**\n-     * {@return the UTF8 entry whose index is given at the specified\n-     * offset within the classfile}\n-     * @param offset the offset of the index within the classfile\n-     * @throws ConstantPoolException if the index is out of range of the\n-     *         constant pool size, or zero, or the index does not correspond to\n-     *         a UTF8 entry\n-     *\/\n-    Utf8Entry readUtf8Entry(int offset);\n-\n-    \/**\n-     * {@return the UTF8 entry whose index is given at the specified\n-     * offset within the classfile, or null if the index at the specified\n-     * offset is zero}\n-     * @param offset the offset of the index within the classfile\n-     * @throws ConstantPoolException if the index is out of range of the\n-     *         constant pool size, or the index does not correspond to\n-     *         a UTF8 entry\n-     *\/\n-    Utf8Entry readUtf8EntryOrNull(int offset);\n-\n-    \/**\n-     * {@return the module entry whose index is given at the specified\n-     * offset within the classfile}\n-     * @param offset the offset of the index within the classfile\n-     * @throws ConstantPoolException if the index is out of range of the\n-     *         constant pool size, or zero, or the index does not correspond to\n-     *         a module entry\n-     *\/\n-    ModuleEntry readModuleEntry(int offset);\n-\n-    \/**\n-     * {@return the package entry whose index is given at the specified\n-     * offset within the classfile}\n-     * @param offset the offset of the index within the classfile\n-     * @throws ConstantPoolException if the index is out of range of the\n-     *         constant pool size, or zero, or the index does not correspond to\n-     *         a package entry\n-     *\/\n-    PackageEntry readPackageEntry(int offset);\n-\n-    \/**\n-     * {@return the class entry whose index is given at the specified\n-     * offset within the classfile}\n-     * @param offset the offset of the index within the classfile\n-     * @throws ConstantPoolException if the index is out of range of the\n-     *         constant pool size, or zero, or the index does not correspond to\n-     *         a class entry\n-     *\/\n-    ClassEntry readClassEntry(int offset);\n-\n-    \/**\n-     * {@return the name-and-type entry whose index is given at the specified\n-     * offset within the classfile}\n-     * @param offset the offset of the index within the classfile\n-     * @throws ConstantPoolException if the index is out of range of the\n-     *         constant pool size, or zero, or the index does not correspond to\n-     *         a name-and-type entry\n-     *\/\n-    NameAndTypeEntry readNameAndTypeEntry(int offset);\n-\n-    \/**\n-     * {@return the method handle entry whose index is given at the specified\n-     * offset within the classfile}\n-     * @param offset the offset of the index within the classfile\n-     * @throws ConstantPoolException if the index is out of range of the\n-     *         constant pool size, or zero, or the index does not correspond to\n-     *         a method handle entry\n-     *\/\n-    MethodHandleEntry readMethodHandleEntry(int offset);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassReader.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-                classEntry = code.classReader.readClassEntry(pos + 1);\n+                classEntry = code.classReader.readEntry(pos + 1, ClassEntry.class);\n@@ -579,1 +579,1 @@\n-            return code.classReader.readClassEntry(pos + 1);\n+            return code.classReader.readEntry(pos + 1, ClassEntry.class);\n@@ -610,1 +610,1 @@\n-            return code.classReader.readClassEntry(pos + 1);\n+            return code.classReader.readEntry(pos + 1, ClassEntry.class);\n@@ -639,1 +639,1 @@\n-                typeEntry = code.classReader.readClassEntry(pos + 1);\n+                typeEntry = code.classReader.readEntry(pos + 1, ClassEntry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,3 +69,4 @@\n-            case AEV_STRING -> new AnnotationImpl.OfStringImpl(classReader.readUtf8Entry(p));\n-            case AEV_ENUM -> new AnnotationImpl.OfEnumImpl(classReader.readUtf8Entry(p), classReader.readUtf8Entry(p + 2));\n-            case AEV_CLASS -> new AnnotationImpl.OfClassImpl(classReader.readUtf8Entry(p));\n+            case AEV_STRING -> new AnnotationImpl.OfStringImpl(classReader.readEntry(p, Utf8Entry.class));\n+            case AEV_ENUM -> new AnnotationImpl.OfEnumImpl(classReader.readEntry(p, Utf8Entry.class),\n+                    classReader.readEntry(p + 2, Utf8Entry.class));\n+            case AEV_CLASS -> new AnnotationImpl.OfClassImpl(classReader.readEntry(p, Utf8Entry.class));\n@@ -130,1 +131,1 @@\n-        Utf8Entry annotationClass = classReader.entryByIndex(classReader.readU2(p), Utf8Entry.class);\n+        Utf8Entry annotationClass = classReader.readEntry(p, Utf8Entry.class);\n@@ -153,1 +154,1 @@\n-            Utf8Entry elementName = classReader.readUtf8Entry(p);\n+            Utf8Entry elementName = classReader.readEntry(p, Utf8Entry.class);\n@@ -242,1 +243,1 @@\n-        Utf8Entry type = classReader.readUtf8Entry(p);\n+        Utf8Entry type = classReader.readEntry(p, Utf8Entry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-            Utf8Entry name = reader.readUtf8Entry(p);\n+            Utf8Entry name = reader.readEntry(p, Utf8Entry.class);\n@@ -350,1 +350,1 @@\n-                    Utf8Entry name = classReader.readUtf8EntryOrNull(p);\n+                    Utf8Entry name = classReader.readEntryOrNull(p, Utf8Entry.class);\n@@ -370,1 +370,1 @@\n-            return classReader.readUtf8Entry(payloadStart);\n+            return classReader.readEntry(payloadStart, Utf8Entry.class);\n@@ -381,1 +381,1 @@\n-                    ModuleEntry module = classReader.readModuleEntry(p);\n+                    ModuleEntry module = classReader.readEntry(p, ModuleEntry.class);\n@@ -433,1 +433,1 @@\n-            return classReader.readUtf8Entry(payloadStart);\n+            return classReader.readEntry(payloadStart, Utf8Entry.class);\n@@ -445,1 +445,1 @@\n-            return classReader.readUtf8Entry(payloadStart);\n+            return classReader.readEntry(payloadStart, Utf8Entry.class);\n@@ -457,1 +457,1 @@\n-            return classReader.readClassEntry(payloadStart);\n+            return classReader.readEntry(payloadStart, ClassEntry.class);\n@@ -469,1 +469,1 @@\n-            return classReader.readClassEntry(payloadStart);\n+            return classReader.readEntry(payloadStart, ClassEntry.class);\n@@ -501,1 +501,1 @@\n-            return classReader.readUtf8Entry(payloadStart);\n+            return classReader.readEntry(payloadStart, Utf8Entry.class);\n@@ -513,1 +513,1 @@\n-            return classReader.readUtf8Entry(payloadStart);\n+            return classReader.readEntry(payloadStart, Utf8Entry.class);\n@@ -525,1 +525,1 @@\n-            return classReader.readUtf8Entry(payloadStart);\n+            return classReader.readEntry(payloadStart, Utf8Entry.class);\n@@ -572,1 +572,1 @@\n-            return classReader.readModuleEntry(payloadStart);\n+            return classReader.readEntry(payloadStart, ModuleEntry.class);\n@@ -582,1 +582,1 @@\n-            return Optional.ofNullable(classReader.readUtf8EntryOrNull(payloadStart + 4));\n+            return Optional.ofNullable(classReader.readEntryOrNull(payloadStart + 4, Utf8Entry.class));\n@@ -633,1 +633,1 @@\n-                    elements[i] = ModuleRequireInfo.of(classReader.readModuleEntry(p),\n+                    elements[i] = ModuleRequireInfo.of(classReader.readEntry(p, ModuleEntry.class),\n@@ -645,1 +645,1 @@\n-                    PackageEntry pe = classReader.readPackageEntry(p);\n+                    PackageEntry pe = classReader.readEntry(p, PackageEntry.class);\n@@ -660,1 +660,1 @@\n-                    PackageEntry po = classReader.readPackageEntry(p);\n+                    PackageEntry po = classReader.readEntry(p, PackageEntry.class);\n@@ -678,1 +678,1 @@\n-                    ClassEntry c = classReader.readClassEntry(p);\n+                    ClassEntry c = classReader.readEntry(p, ClassEntry.class);\n@@ -746,2 +746,1 @@\n-                    final AbstractPoolEntry.MethodHandleEntryImpl handle\n-                            = (AbstractPoolEntry.MethodHandleEntryImpl) classReader.readMethodHandleEntry(p);\n+                    final var handle = classReader.readEntry(p, AbstractPoolEntry.MethodHandleEntryImpl.class);\n@@ -774,1 +773,1 @@\n-                    ClassEntry innerClass = classReader.readClassEntry(p);\n+                    ClassEntry innerClass = classReader.readEntry(p, ClassEntry.class);\n@@ -795,1 +794,1 @@\n-            return classReader.readClassEntry(payloadStart);\n+            return classReader.readEntry(payloadStart, ClassEntry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        return reader.readUtf8Entry(startPos);\n+        return reader.readEntry(startPos, Utf8Entry.class);\n@@ -54,1 +54,1 @@\n-        return reader.readUtf8Entry(startPos + 2);\n+        return reader.readEntry(startPos + 2, Utf8Entry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundRecordComponentInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-                arr[i] = reader.readClassEntry(pos);\n+                arr[i] = reader.readEntry(pos, ClassEntry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-            thisClass = readClassEntry(thisClassPos);\n+            thisClass = readEntry(thisClassPos, ClassEntry.class);\n@@ -398,10 +398,10 @@\n-                case TAG_CLASS -> new AbstractPoolEntry.ClassEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_STRING -> new AbstractPoolEntry.StringEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n-                                                                             (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n-                                                                               (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n-                                                                                                 (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_NAMEANDTYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q),\n-                                                                                   (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q + 2));\n+                case TAG_CLASS -> new AbstractPoolEntry.ClassEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class));\n+                case TAG_STRING -> new AbstractPoolEntry.StringEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class));\n+                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, readEntry(q, AbstractPoolEntry.ClassEntryImpl.class),\n+                        readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n+                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, readEntry(q, AbstractPoolEntry.ClassEntryImpl.class),\n+                        readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n+                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, readEntry(q, AbstractPoolEntry.ClassEntryImpl.class),\n+                        readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n+                case TAG_NAMEANDTYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class),\n+                        readEntry(q + 2, AbstractPoolEntry.Utf8EntryImpl.class));\n@@ -410,5 +410,5 @@\n-                case TAG_METHODTYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_CONSTANTDYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_INVOKEDYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_MODULE -> new AbstractPoolEntry.ModuleEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_PACKAGE -> new AbstractPoolEntry.PackageEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n+                case TAG_METHODTYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class));\n+                case TAG_CONSTANTDYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n+                case TAG_INVOKEDYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n+                case TAG_MODULE -> new AbstractPoolEntry.ModuleEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class));\n+                case TAG_PACKAGE -> new AbstractPoolEntry.PackageEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class));\n@@ -431,1 +431,1 @@\n-                throw new IllegalArgumentException(\"attribute \" + readUtf8Entry(p - 6).stringValue() + \" too big to handle\");\n+                throw new IllegalArgumentException(\"attribute \" + readEntry(p - 6, Utf8Entry.class).stringValue() + \" too big to handle\");\n@@ -468,35 +468,0 @@\n-    @Override\n-    public Utf8Entry readUtf8Entry(int pos) {\n-        return readEntry(pos, Utf8Entry.class);\n-    }\n-\n-    @Override\n-    public Utf8Entry readUtf8EntryOrNull(int pos) {\n-        return readEntryOrNull(pos, Utf8Entry.class);\n-    }\n-\n-    @Override\n-    public ModuleEntry readModuleEntry(int pos) {\n-        return readEntry(pos, ModuleEntry.class);\n-    }\n-\n-    @Override\n-    public PackageEntry readPackageEntry(int pos) {\n-        return readEntry(pos, PackageEntry.class);\n-    }\n-\n-    @Override\n-    public ClassEntry readClassEntry(int pos) {\n-        return readEntry(pos, ClassEntry.class);\n-    }\n-\n-    @Override\n-    public NameAndTypeEntry readNameAndTypeEntry(int pos) {\n-        return readEntry(pos, NameAndTypeEntry.class);\n-    }\n-\n-    @Override\n-    public MethodHandleEntry readMethodHandleEntry(int pos) {\n-        return readEntry(pos, MethodHandleEntry.class);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":17,"deletions":52,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        return reader.readUtf8Entry(startPos + 2);\n+        return reader.readEntry(startPos + 2, Utf8Entry.class);\n@@ -69,1 +69,1 @@\n-        return reader.readUtf8Entry(startPos + 4);\n+        return reader.readEntry(startPos + 4, Utf8Entry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-        return reader.readUtf8Entry(startPos + 2);\n+        return reader.readEntry(startPos + 2, Utf8Entry.class);\n@@ -72,1 +72,1 @@\n-        return reader.readUtf8Entry(startPos + 4);\n+        return reader.readEntry(startPos + 4, Utf8Entry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}