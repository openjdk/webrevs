{"files":[{"patch":"@@ -407,1 +407,1 @@\n-        _running_workers(0),\n+        _finish_tokens(0),\n@@ -467,2 +467,3 @@\n-  \/\/ Set up the run and publish the task.\n-  Atomic::store(&_running_workers, _num_workers);\n+  \/\/ Set up the run and publish the task. Issue one additional finish token\n+  \/\/ to cover the semaphore shutdown path, see below.\n+  Atomic::store(&_finish_tokens, _num_workers + 1);\n@@ -487,1 +488,1 @@\n-  while (Atomic::load(&_running_workers) != 0) {\n+  while (Atomic::load(&_finish_tokens) != 0) {\n@@ -493,1 +494,1 @@\n-  assert(Atomic::load(&_running_workers) == 0, \"No workers are running\");\n+  assert(Atomic::load(&_finish_tokens) == 0, \"All tokens are consumed\");\n@@ -507,1 +508,1 @@\n-  if (Atomic::load(&_running_workers) == 1) {\n+  if (Atomic::sub(&_finish_tokens, 1, memory_order_relaxed) == 1) {\n@@ -509,0 +510,1 @@\n+    \/\/ Then consume the last token and leave.\n@@ -510,0 +512,2 @@\n+    int last = Atomic::sub(&_finish_tokens, 1, memory_order_relaxed);\n+    assert(last == 0, \"Should be\");\n@@ -511,1 +515,0 @@\n-  Atomic::sub(&_running_workers, 1, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-  int _running_workers;\n+  int _finish_tokens;\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}