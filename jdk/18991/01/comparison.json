{"files":[{"patch":"@@ -273,1 +273,1 @@\n-        return descriptorString().startsWith(\"[\");\n+        return descriptorString().charAt(0) == '[';\n@@ -291,1 +291,1 @@\n-        return descriptorString().startsWith(\"L\");\n+        return descriptorString().charAt(0) == 'L';\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    public static final ClassDesc CD_Object = ClassDesc.of(\"java.lang.Object\");\n+    public static final ClassDesc CD_Object = new ReferenceClassDescImpl(\"Ljava\/lang\/Object;\");\n@@ -70,1 +70,1 @@\n-    public static final ClassDesc CD_String = ClassDesc.of(\"java.lang.String\");\n+    public static final ClassDesc CD_String = new ReferenceClassDescImpl(\"Ljava\/lang\/String;\");\n@@ -73,1 +73,1 @@\n-    public static final ClassDesc CD_Class = ClassDesc.of(\"java.lang.Class\");\n+    public static final ClassDesc CD_Class = new ReferenceClassDescImpl(\"Ljava\/lang\/Class;\");\n@@ -76,1 +76,1 @@\n-    public static final ClassDesc CD_Number = ClassDesc.of(\"java.lang.Number\");\n+    public static final ClassDesc CD_Number = new ReferenceClassDescImpl(\"Ljava\/lang\/Number;\");\n@@ -79,1 +79,1 @@\n-    public static final ClassDesc CD_Integer = ClassDesc.of(\"java.lang.Integer\");\n+    public static final ClassDesc CD_Integer = new ReferenceClassDescImpl(\"Ljava\/lang\/Integer;\");\n@@ -82,1 +82,1 @@\n-    public static final ClassDesc CD_Long = ClassDesc.of(\"java.lang.Long\");\n+    public static final ClassDesc CD_Long = new ReferenceClassDescImpl(\"Ljava\/lang\/Long;\");\n@@ -85,1 +85,1 @@\n-    public static final ClassDesc CD_Float = ClassDesc.of(\"java.lang.Float\");\n+    public static final ClassDesc CD_Float = new ReferenceClassDescImpl(\"Ljava\/lang\/Float;\");\n@@ -88,1 +88,1 @@\n-    public static final ClassDesc CD_Double = ClassDesc.of(\"java.lang.Double\");\n+    public static final ClassDesc CD_Double = new ReferenceClassDescImpl(\"Ljava\/lang\/Double;\");\n@@ -91,1 +91,1 @@\n-    public static final ClassDesc CD_Short = ClassDesc.of(\"java.lang.Short\");\n+    public static final ClassDesc CD_Short = new ReferenceClassDescImpl(\"Ljava\/lang\/Short;\");\n@@ -94,1 +94,1 @@\n-    public static final ClassDesc CD_Byte = ClassDesc.of(\"java.lang.Byte\");\n+    public static final ClassDesc CD_Byte = new ReferenceClassDescImpl(\"Ljava\/lang\/Byte;\");\n@@ -97,1 +97,1 @@\n-    public static final ClassDesc CD_Character = ClassDesc.of(\"java.lang.Character\");\n+    public static final ClassDesc CD_Character = new ReferenceClassDescImpl(\"Ljava\/lang\/Character;\");\n@@ -100,1 +100,1 @@\n-    public static final ClassDesc CD_Boolean = ClassDesc.of(\"java.lang.Boolean\");\n+    public static final ClassDesc CD_Boolean = new ReferenceClassDescImpl(\"Ljava\/lang\/Boolean;\");\n@@ -103,1 +103,1 @@\n-    public static final ClassDesc CD_Void = ClassDesc.of(\"java.lang.Void\");\n+    public static final ClassDesc CD_Void = new ReferenceClassDescImpl(\"Ljava\/lang\/Void;\");\n@@ -106,1 +106,1 @@\n-    public static final ClassDesc CD_Throwable = ClassDesc.of(\"java.lang.Throwable\");\n+    public static final ClassDesc CD_Throwable = new ReferenceClassDescImpl(\"Ljava\/lang\/Throwable;\");\n@@ -109,1 +109,1 @@\n-    public static final ClassDesc CD_Exception = ClassDesc.of(\"java.lang.Exception\");\n+    public static final ClassDesc CD_Exception = new ReferenceClassDescImpl(\"Ljava\/lang\/Exception;\");\n@@ -112,1 +112,1 @@\n-    public static final ClassDesc CD_Enum = ClassDesc.of(\"java.lang.Enum\");\n+    public static final ClassDesc CD_Enum = new ReferenceClassDescImpl(\"Ljava\/lang\/Enum;\");\n@@ -115,1 +115,1 @@\n-    public static final ClassDesc CD_VarHandle = ClassDesc.of(\"java.lang.invoke.VarHandle\");\n+    public static final ClassDesc CD_VarHandle = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/VarHandle;\");\n@@ -118,1 +118,1 @@\n-    public static final ClassDesc CD_MethodHandles = ClassDesc.of(\"java.lang.invoke.MethodHandles\");\n+    public static final ClassDesc CD_MethodHandles = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/MethodHandles;\");\n@@ -121,1 +121,1 @@\n-    public static final ClassDesc CD_MethodHandles_Lookup = CD_MethodHandles.nested(\"Lookup\");\n+    public static final ClassDesc CD_MethodHandles_Lookup = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/MethodHandles$Lookup;\");\n@@ -124,1 +124,1 @@\n-    public static final ClassDesc CD_MethodHandle = ClassDesc.of(\"java.lang.invoke.MethodHandle\");\n+    public static final ClassDesc CD_MethodHandle = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/MethodHandle;\");\n@@ -127,1 +127,1 @@\n-    public static final ClassDesc CD_MethodType = ClassDesc.of(\"java.lang.invoke.MethodType\");\n+    public static final ClassDesc CD_MethodType = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/MethodType;\");\n@@ -130,1 +130,1 @@\n-    public static final ClassDesc CD_CallSite = ClassDesc.of(\"java.lang.invoke.CallSite\");\n+    public static final ClassDesc CD_CallSite = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/CallSite;\");\n@@ -133,1 +133,1 @@\n-    public static final ClassDesc CD_Collection = ClassDesc.of(\"java.util.Collection\");\n+    public static final ClassDesc CD_Collection = new ReferenceClassDescImpl(\"Ljava\/util\/Collection;\");\n@@ -136,1 +136,1 @@\n-    public static final ClassDesc CD_List = ClassDesc.of(\"java.util.List\");\n+    public static final ClassDesc CD_List = new ReferenceClassDescImpl(\"Ljava\/util\/List;\");\n@@ -139,1 +139,1 @@\n-    public static final ClassDesc CD_Set = ClassDesc.of(\"java.util.Set\");\n+    public static final ClassDesc CD_Set = new ReferenceClassDescImpl(\"Ljava\/util\/Set;\");\n@@ -142,1 +142,1 @@\n-    public static final ClassDesc CD_Map = ClassDesc.of(\"java.util.Map\");\n+    public static final ClassDesc CD_Map = new ReferenceClassDescImpl(\"Ljava\/util\/Map;\");\n@@ -145,1 +145,1 @@\n-    public static final ClassDesc CD_ConstantDesc = ClassDesc.of(\"java.lang.constant.ConstantDesc\");\n+    public static final ClassDesc CD_ConstantDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/ConstantDesc;\");\n@@ -148,1 +148,1 @@\n-    public static final ClassDesc CD_ClassDesc = ClassDesc.of(\"java.lang.constant.ClassDesc\");\n+    public static final ClassDesc CD_ClassDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/ClassDesc;\");\n@@ -151,1 +151,1 @@\n-    public static final ClassDesc CD_EnumDesc = CD_Enum.nested(\"EnumDesc\");\n+    public static final ClassDesc CD_EnumDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/Enum$EnumDesc;\");\n@@ -154,1 +154,1 @@\n-    public static final ClassDesc CD_MethodTypeDesc = ClassDesc.of(\"java.lang.constant.MethodTypeDesc\");\n+    public static final ClassDesc CD_MethodTypeDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/MethodTypeDesc;\");\n@@ -157,1 +157,1 @@\n-    public static final ClassDesc CD_MethodHandleDesc = ClassDesc.of(\"java.lang.constant.MethodHandleDesc\");\n+    public static final ClassDesc CD_MethodHandleDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/MethodHandleDesc;\");\n@@ -160,1 +160,1 @@\n-    public static final ClassDesc CD_DirectMethodHandleDesc = ClassDesc.of(\"java.lang.constant.DirectMethodHandleDesc\");\n+    public static final ClassDesc CD_DirectMethodHandleDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/DirectMethodHandleDesc;\");\n@@ -163,1 +163,1 @@\n-    public static final ClassDesc CD_VarHandleDesc = CD_VarHandle.nested(\"VarHandleDesc\");\n+    public static final ClassDesc CD_VarHandleDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/VarHandle$VarHandleDesc;\");\n@@ -166,1 +166,1 @@\n-    public static final ClassDesc CD_MethodHandleDesc_Kind = CD_DirectMethodHandleDesc.nested(\"Kind\");\n+    public static final ClassDesc CD_MethodHandleDesc_Kind = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/DirectMethodHandleDesc$Kind;\");\n@@ -169,1 +169,1 @@\n-    public static final ClassDesc CD_DynamicConstantDesc = ClassDesc.of(\"java.lang.constant.DynamicConstantDesc\");\n+    public static final ClassDesc CD_DynamicConstantDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/DynamicConstantDesc;\");\n@@ -172,1 +172,1 @@\n-    public static final ClassDesc CD_DynamicCallSiteDesc = ClassDesc.of(\"java.lang.constant.DynamicCallSiteDesc\");\n+    public static final ClassDesc CD_DynamicCallSiteDesc = new ReferenceClassDescImpl(\"Ljava\/lang\/constant\/DynamicCallSiteDesc;\");\n@@ -175,1 +175,1 @@\n-    public static final ClassDesc CD_ConstantBootstraps = ClassDesc.of(\"java.lang.invoke.ConstantBootstraps\");\n+    public static final ClassDesc CD_ConstantBootstraps = new ReferenceClassDescImpl(\"Ljava\/lang\/invoke\/ConstantBootstraps;\");\n@@ -178,3 +178,3 @@\n-            ConstantDescs.CD_MethodHandles_Lookup,\n-            ConstantDescs.CD_String,\n-            ConstantDescs.CD_MethodType};\n+            CD_MethodHandles_Lookup,\n+            CD_String,\n+            CD_MethodType};\n@@ -183,3 +183,3 @@\n-            ConstantDescs.CD_MethodHandles_Lookup,\n-            ConstantDescs.CD_String,\n-            ConstantDescs.CD_Class};\n+            CD_MethodHandles_Lookup,\n+            CD_String,\n+            CD_Class};\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDescs.java","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -149,1 +149,0 @@\n-        requireNonNull(name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantUtils.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-        validateClassOrInterface(requireNonNull(owner));\n-        validateMemberName(requireNonNull(name), true);\n+        validateClassOrInterface(owner);\n+        validateMemberName(name, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDescImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        this.constantName = validateMemberName(requireNonNull(constantName), true);\n+        this.constantName = validateMemberName(constantName, true);\n@@ -92,4 +92,1 @@\n-        this.bootstrapArgs = requireNonNull(bootstrapArgs).clone();\n-\n-        if (constantName.length() == 0)\n-            throw new IllegalArgumentException(\"Illegal invocation name: \" + constantName);\n+        this.bootstrapArgs = bootstrapArgs.length == 0 ? EMPTY_CONSTANTDESC : bootstrapArgs.clone();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-        this.returnType = requireNonNull(returnType);\n-        this.argTypes = requireNonNull(validatedArgTypes);\n+        this.returnType = returnType;\n+        this.argTypes = validatedArgTypes;\n@@ -69,1 +69,1 @@\n-        Objects.requireNonNull(returnType);\n+        requireNonNull(returnType);\n@@ -74,1 +74,1 @@\n-            if (cd.isPrimitive() && cd.descriptorString().charAt(0) == 'V') \/\/ implicit null check\n+            if (cd.descriptorString().equals(\"V\")) \/\/ implicit null check\n@@ -130,1 +130,1 @@\n-        return new MethodTypeDescImpl(returnType, argTypes);\n+        return new MethodTypeDescImpl(requireNonNull(returnType), argTypes);\n@@ -146,2 +146,6 @@\n-        System.arraycopy(argTypes, 0, newArgs, 0, start);\n-        System.arraycopy(argTypes, end, newArgs, start, argTypes.length - end);\n+        if (start > 0) {\n+            System.arraycopy(argTypes, 0, newArgs, 0, start);\n+        }\n+        if (end < argTypes.length) {\n+            System.arraycopy(argTypes, end, newArgs, start, argTypes.length - end);\n+        }\n@@ -157,1 +161,3 @@\n-        System.arraycopy(argTypes, 0, newArgs, 0, pos);\n+        if (pos > 0) {\n+            System.arraycopy(argTypes, 0, newArgs, 0, pos);\n+        }\n@@ -159,2 +165,3 @@\n-        System.arraycopy(argTypes, pos, newArgs, pos+paramTypes.length, argTypes.length - pos);\n-\n+        if (pos < argTypes.length) {\n+            System.arraycopy(argTypes, pos, newArgs, pos + paramTypes.length, argTypes.length - pos);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDescImpl.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -50,4 +50,3 @@\n-        requireNonNull(descriptor);\n-        int len = ConstantUtils.skipOverFieldSignature(descriptor, 0, descriptor.length(), false);\n-        if (len == 0 || len == 1\n-            || len != descriptor.length())\n+        int dLen = descriptor.length();\n+        int len = ConstantUtils.skipOverFieldSignature(descriptor, 0, dLen, false);\n+        if (len <= 1 || len != dLen)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ReferenceClassDescImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}