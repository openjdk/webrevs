{"files":[{"patch":"@@ -155,1 +155,2 @@\n-      if (!expand()) {\n+      size_t new_capacity = MIN2(bucket_size(bucket) * 2, _max_capacity);\n+      if (!expand(new_capacity)) {\n@@ -199,1 +200,1 @@\n-bool G1CMMarkStack::ChunkAllocator::expand() {\n+bool G1CMMarkStack::ChunkAllocator::expand(size_t new_capacity) {\n@@ -204,3 +205,0 @@\n-  size_t old_capacity = _capacity;\n-  \/\/ Double capacity if possible.\n-  size_t new_capacity = MIN2(old_capacity * 2, _max_capacity);\n@@ -208,0 +206,1 @@\n+  size_t old_capacity = _capacity;\n@@ -216,0 +215,5 @@\n+bool G1CMMarkStack::ChunkAllocator::expand() {\n+  size_t new_capacity = MIN2(_capacity * 2, _max_capacity);\n+  return expand(new_capacity);\n+}\n+\n@@ -237,0 +241,3 @@\n+  \/\/ Allocate all buckets associated with indexes between the current capacity (_capacity)\n+  \/\/ and the new capacity (new_capacity). This step ensures that there are no gaps in the\n+  \/\/ array and that the capacity accurately reflects the reserved memory.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-    \/\/ Illustration of the Growable Array data structure.\n+    \/\/ Illustration of the growable array data structure.\n@@ -177,1 +177,1 @@\n-              _min_capacity * ( 1ULL << (bucket -1));\n+              _min_capacity * ( 1ULL << (bucket - 1));\n@@ -228,0 +228,1 @@\n+    \/\/ Expand the mark stack doubling its size.\n@@ -229,0 +230,1 @@\n+    bool expand(size_t new_capacity);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}