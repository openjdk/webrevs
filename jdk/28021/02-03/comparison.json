{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.nio.file.attribute.BasicFileAttributes;\n@@ -307,1 +306,1 @@\n-            respHdrs.set(\"Content-Range\", \"bytes *\/%d\".formatted(fileSize));\n+            respHdrs.set(\"Content-Range\", \"bytes *\/%s\".formatted(fileSize));\n@@ -315,1 +314,10 @@\n-    private List<RangeEntry> parseRangeHeader(String rangeHeader, long fileSize) {\n+    \/\/ Parses the HTTP Range header and returns a list of byte ranges.\n+    \/\/ Returns null if the header is invalid.\n+    \/\/ Example of valid Range header values:\n+    \/\/  \"bytes=0-499\"           -> first 500 bytes\n+    \/\/  \"bytes=500-999\"         -> second 500 bytes\n+    \/\/  \"bytes=-500\"            -> last 500 bytes\n+    \/\/  \"bytes=9500-\"           -> from byte 9500 to end\n+    \/\/ Multiple ranges are allowed, separated by commas(without spaces):\n+    \/\/  \"bytes=0-499,1000-1499\" -> first 500 bytes and second 500 bytes\n+    public static List<RangeEntry> parseRangeHeader(String rangeHeader, long fileSize) {\n@@ -369,1 +377,1 @@\n-                    \"bytes %d-%d\/%d\".formatted(range.start, range.end, fileSize));\n+                    \"bytes %s-%s\/%s\".formatted(range.start, range.end, fileSize));\n@@ -382,1 +390,1 @@\n-                    os.write(\"Content-Range: bytes %d-%d\/%d\\r\\n\\r\\n\"\n+                    os.write(\"Content-Range: bytes %s-%s\/%s\\r\\n\\r\\n\"\n@@ -407,1 +415,1 @@\n-    private record RangeEntry(long start, long end) {\n+    public record RangeEntry(long start, long end) {\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+import sun.net.httpserver.simpleserver.FileServerHandler;\n+\n@@ -85,0 +87,73 @@\n+    @DataProvider\n+    public Object[][] validRangeHeaders() {\n+        return new Object[][]{\n+                \/\/ start-end\n+                {1000L, \"bytes=0-499\", new FileServerHandler.RangeEntry(0, 499)},\n+                {1000L, \"bytes=500-999\", new FileServerHandler.RangeEntry(500, 999)},\n+                {500L,  \"bytes=100-199\", new FileServerHandler.RangeEntry(100, 199)},\n+\n+                \/\/ start-\n+                {1000L, \"bytes=0-\", new FileServerHandler.RangeEntry(0, 999)},\n+                {1000L, \"bytes=500-\", new FileServerHandler.RangeEntry(500, 999)},\n+                {500L,  \"bytes=250-\", new FileServerHandler.RangeEntry(250, 499)},\n+\n+                \/\/ -length\n+                {1000L, \"bytes=-500\", new FileServerHandler.RangeEntry(500, 999)},\n+                {1000L, \"bytes=-1\", new FileServerHandler.RangeEntry(999, 999)},\n+                {500L,  \"bytes=-50\", new FileServerHandler.RangeEntry(450, 499)},\n+\n+                \/\/ single byte ranges\n+                {1000L, \"bytes=0-0\", new FileServerHandler.RangeEntry(0, 0)},\n+                {1000L, \"bytes=999-999\", new FileServerHandler.RangeEntry(999, 999)},\n+                {500L,  \"bytes=499-499\", new FileServerHandler.RangeEntry(499, 499)},\n+\n+                \/\/ multiple ranges\n+                {\n+                        1000L, \"bytes=0-499,500-999\",\n+                        new FileServerHandler.RangeEntry(0, 499),\n+                        new FileServerHandler.RangeEntry(500, 999)\n+                },\n+                {\n+                        1000L, \"bytes=0-,-200\",\n+                        new FileServerHandler.RangeEntry(0, 999),\n+                        new FileServerHandler.RangeEntry(800, 999)\n+                },\n+                {\n+                        500L, \"bytes=0-99,200-\",\n+                        new FileServerHandler.RangeEntry(0, 99),\n+                        new FileServerHandler.RangeEntry(200, 499)\n+                }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"validRangeHeaders\")\n+    public void testValidRangeParse(long fileLength, String rangeHeader, FileServerHandler.RangeEntry... entries) {\n+        var ranges = FileServerHandler.parseRangeHeader(rangeHeader, fileLength);\n+        assertNotNull(ranges);\n+        assertEquals(ranges.size(), entries.length);\n+        for (int i = 0; i < entries.length; i++) {\n+            assertEquals(ranges.get(i).start(), entries[i].start());\n+            assertEquals(ranges.get(i).end(), entries[i].end());\n+        }\n+    }\n+\n+    @DataProvider\n+    public Object[][] invalidRangeHeaders() {\n+        return new Object[][]{\n+                {\"bytes=500-400\"},         \/\/ start > end\n+                {\"bytes=1000-1001\"},       \/\/ end >= file length\n+                {\"bytes=1000-\"},           \/\/ start >= file length\n+                {\"bytes=-0\"},              \/\/ zero length suffix\n+                {\"bytes=meow\"},            \/\/ non-numeric\n+                {\"bytes=--500\"},           \/\/ malformed\n+                {\"bytes=500\"},             \/\/ malformed\n+                {\"bytes=500-600,700-600\"}  \/\/ second range invalid\n+        };\n+    }\n+\n+    @Test(dataProvider = \"invalidRangeHeaders\")\n+    public void testInvalidRangeParse(String rangeHeader) {\n+        var ranges = FileServerHandler.parseRangeHeader(rangeHeader, 1000L);\n+        assertNull(ranges);\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/FileServerHandlerTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import java.nio.file.attribute.BasicFileAttributes;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,2 @@\n+modules = \\\r\n+  jdk.httpserver\/sun.net.httpserver.simpleserver\r\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/TEST.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}