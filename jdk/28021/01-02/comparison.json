{"files":[{"patch":"@@ -279,1 +279,0 @@\n-        respHdrs.set(\"ETag\", createETag(path));\n@@ -301,2 +300,2 @@\n-        if (!(ifRange == null || ifRange.equals(createETag(path)) || ifRange.equals(getLastModified(path)))) {\n-            return false; \/\/ etag or last-modified do not match with the resource, send the entire file\n+        if (!(ifRange == null || ifRange.equals(getLastModified(path)))) {\n+            return false; \/\/ last-modified does not match with the resource, send the entire file\n@@ -316,7 +315,0 @@\n-    private String createETag(Path path) throws IOException {\n-        var attrs = Files.readAttributes(path, BasicFileAttributes.class);\n-        long size = attrs.size();\n-        long lastModified = attrs.lastModifiedTime().toMillis();\n-        return \"\\\"%x-%x\\\"\".formatted(size, lastModified);\n-    }\n-\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -130,1 +130,0 @@\n-        var expectedEtag = createETag(file);\n@@ -147,1 +146,0 @@\n-            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n@@ -169,28 +167,0 @@\n-    @Test\n-    public void testMatchETagRangeFileGet() throws Exception {\n-        var root = TEST_DIR.resolve(\"rangeTestFilePrep\");\n-        var file = root.resolve(\"aFile.txt\");\n-        var lastModified = getLastModified(file);\n-        var expectedEtag = createETag(file);\n-\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\"))\n-                    .header(\"Range\", \"bytes=2-5\")\n-                    .header(\"If-Match\", expectedEtag)\n-                    .build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assertEquals(response.statusCode(), 206);\n-            assertEquals(response.body(), \"2345\");\n-            assertEquals(response.headers().firstValue(\"content-type\").get(), \"text\/plain\");\n-            assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n-            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n-            assertEquals(response.headers().firstValue(\"content-range\").get(), \"bytes 2-5\/10\");\n-            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n-        } finally {\n-            server.stop(0);\n-        }\n-    }\n-\n@@ -202,1 +172,0 @@\n-        var expectedEtag = createETag(file);\n@@ -239,1 +208,0 @@\n-            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n@@ -339,1 +307,0 @@\n-        var expectedEtag = createETag(file);\n@@ -353,1 +320,0 @@\n-            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n@@ -590,30 +556,0 @@\n-    @Test\n-    public void testMismatchETagRangeFileGET() throws Exception {\n-        var root = TEST_DIR.resolve(\"rangeTestFilePrep\");\n-        var file = root.resolve(\"aFile.txt\");\n-        var lastModified = getLastModified(file);\n-        var expectedLength = Long.toString(Files.size(file));\n-        var expectedEtag = createETag(file);\n-\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\"))\n-                    .header(\"Range\", \"bytes=2-5\")\n-                    .header(\"If-Range\", \"\\\"meowmeow\\\"\")\n-                    .build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            \/\/ If the ETag does not match, the server should ignore the Range header and serve the entire file.\n-            assertEquals(response.statusCode(), 200);\n-            assertEquals(response.body(), \"0123456789\");\n-            assertEquals(response.headers().firstValue(\"content-type\").get(), \"text\/plain\");\n-            assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n-            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n-            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n-        } finally {\n-            server.stop(0);\n-        }\n-    }\n-\n@@ -973,7 +909,0 @@\n-\n-    public String createETag(Path path) throws IOException {\n-        var attrs = Files.readAttributes(path, BasicFileAttributes.class);\n-        long size = attrs.size();\n-        long lastModified = attrs.lastModifiedTime().toMillis();\n-        return \"\\\"%x-%x\\\"\".formatted(size, lastModified);\n-    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"modified"}]}