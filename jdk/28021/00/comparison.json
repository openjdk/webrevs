{"files":[{"patch":"@@ -60,0 +60,1 @@\n+    public static final int HTTP_RANGE_NOT_SATISFIABLE = 416;\n@@ -100,0 +101,1 @@\n+        case HTTP_RANGE_NOT_SATISFIABLE: return \" Range Not Satisfiable\";\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/Code.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.RandomAccessFile;\n@@ -36,0 +37,1 @@\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -38,0 +40,1 @@\n+import java.util.ArrayList;\n@@ -40,0 +43,1 @@\n+import java.util.UUID;\n@@ -268,1 +272,0 @@\n-\n@@ -275,7 +278,3 @@\n-        if (writeBody) {\n-            exchange.sendResponseHeaders(200, Files.size(path));\n-            try (InputStream fis = Files.newInputStream(path);\n-                 OutputStream os = exchange.getResponseBody()) {\n-                fis.transferTo(os);\n-            }\n-        } else {\n+        respHdrs.set(\"Accept-Ranges\", \"bytes\");\n+        respHdrs.set(\"ETag\", createETag(path));\n+        if (!writeBody) {\n@@ -284,0 +283,78 @@\n+            return;\n+        }\n+        String rangeHeader = exchange.getRequestHeaders().getFirst(\"Range\");\n+        if (rangeHeader != null && handleRangedRequest(exchange, path, rangeHeader)) {\n+            return;\n+        }\n+        exchange.sendResponseHeaders(200, Files.size(path));\n+        try (InputStream fis = Files.newInputStream(path);\n+             OutputStream os = exchange.getResponseBody()) {\n+            fis.transferTo(os);\n+        }\n+    }\n+\n+    private boolean handleRangedRequest(HttpExchange exchange, Path path, String rangeHeader)\n+            throws IOException\n+    {\n+        var reqHdrs = exchange.getRequestHeaders();\n+        String ifRange = reqHdrs.getFirst(\"If-Range\");\n+        if (!(ifRange == null || ifRange.equals(createETag(path)) || ifRange.equals(getLastModified(path)))) {\n+            return false; \/\/ etag or last-modified do not match with the resource, send the entire file\n+        }\n+        long fileSize = Files.size(path);\n+        List<RangeEntry> ranges = parseRangeHeader(rangeHeader, fileSize);\n+        if (ranges == null) {\n+            var respHdrs = exchange.getResponseHeaders();\n+            respHdrs.set(\"Content-Range\", \"bytes *\/%d\".formatted(fileSize));\n+            exchange.sendResponseHeaders(416, -1);\n+            return true;\n+        }\n+        servePartialContents(exchange, path, ranges);\n+        return true;\n+    }\n+\n+    private String createETag( Path path) throws IOException {\n+        var attrs = Files.readAttributes(path, BasicFileAttributes.class);\n+        long size = attrs.size();\n+        long lastModified = attrs.lastModifiedTime().toMillis();\n+        return \"\\\"%x-%x\\\"\".formatted(size, lastModified);\n+    }\n+\n+    private List<RangeEntry> parseRangeHeader(String rangeHeader, long fileSize) {\n+        if (!rangeHeader.startsWith(\"bytes=\")) {\n+            return null;  \/\/ only 'bytes' unit is supported.\n+        }\n+        String rangesPart = rangeHeader.substring(\"bytes=\".length());\n+        List<RangeEntry> ranges = new ArrayList<>();\n+        for (String spec : rangesPart.split(\",\")) {\n+            spec = spec.trim();\n+            int dashPos = spec.indexOf('-');\n+            if (dashPos == -1) {\n+                return null;  \/\/ '-' is always required.\n+            }\n+            String startStr = spec.substring(0, dashPos).trim();\n+            String endStr = spec.substring(dashPos + 1).trim();\n+            long start, end;\n+            try {\n+                if (startStr.isEmpty()) {  \/\/ \"-<suffix-length>\"\n+                    long suffixLength = Long.parseLong(endStr);\n+                    if (suffixLength <= 0) {\n+                        return null;\n+                    }\n+                    start = Math.max(0, fileSize - suffixLength);\n+                    end = fileSize - 1;\n+                } else {  \/\/ \"<start>-<end>\" or \"<start>-\"\n+                    start = Long.parseLong(startStr);\n+                    end = endStr.isEmpty() ? fileSize - 1 : Long.parseLong(endStr);\n+                    if (end >= fileSize) {\n+                        end = fileSize - 1;\n+                    }\n+                }\n+            } catch (NumberFormatException e) {\n+                return null;  \/\/ invalid number format\n+            }\n+\n+            if (start < 0 || start > end)\n+                return null;  \/\/ invalid range values\n+\n+            ranges.add(new RangeEntry(start, end));\n@@ -285,0 +362,54 @@\n+        return ranges;\n+    }\n+\n+    private void servePartialContents(HttpExchange exchange, Path path, List<RangeEntry> ranges)\n+            throws IOException\n+    {\n+        var respHdrs = exchange.getResponseHeaders();\n+        String fileContentType = mediaType(path.toString());\n+        String boundary = UUID.randomUUID().toString();\n+        long fileSize = Files.size(path);\n+        boolean isSingleRange = ranges.size() == 1;\n+        long responseLength;\n+        if (isSingleRange) {\n+            RangeEntry range = ranges.get(0);\n+            respHdrs.set(\"Content-Range\",\n+                    \"bytes %d-%d\/%d\".formatted(range.start, range.end, fileSize));\n+            responseLength = range.end - range.start + 1;\n+        } else {\n+            respHdrs.set(\"Content-Type\", \"multipart\/byteranges; boundary=\" + boundary);\n+            responseLength = 0;  \/\/ 0 for chunked transfer encoding\n+        }\n+        exchange.sendResponseHeaders(206, responseLength); \/\/ Partial Content\n+        try (RandomAccessFile raf = new RandomAccessFile(path.toFile(), \"r\");\n+             OutputStream os = exchange.getResponseBody()) {\n+            for (RangeEntry range : ranges) {\n+                if (!isSingleRange) {\n+                    os.write((\"--\" + boundary + \"\\r\\n\").getBytes(UTF_8));\n+                    os.write((\"Content-Type: \" + fileContentType + \"\\r\\n\").getBytes(UTF_8));\n+                    os.write(\"Content-Range: bytes %d-%d\/%d\\r\\n\\r\\n\"\n+                            .formatted(range.start, range.end, fileSize).getBytes(UTF_8));\n+                }\n+                raf.seek(range.start);\n+                long bytesToWrite = range.end - range.start + 1;\n+                byte[] buffer = new byte[8192];\n+                while (bytesToWrite > 0) {\n+                    int len = raf.read(buffer, 0, (int) Math.min(buffer.length, bytesToWrite));\n+                    if (len == -1) {\n+                        break;  \/\/ EOF\n+                    }\n+                    os.write(buffer, 0, len);\n+                    bytesToWrite -= len;\n+                }\n+                if (!isSingleRange) {\n+                    os.write(\"\\r\\n\".getBytes(UTF_8));\n+                }\n+            }\n+            if (!isSingleRange) {\n+                String closingBoundary = \"--\" + boundary + \"--\\r\\n\";\n+                os.write(closingBoundary.getBytes(UTF_8));\n+            }\n+        }\n+    }\n+\n+    private record RangeEntry(long start, long end) {\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":139,"deletions":8,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -49,0 +50,1 @@\n+import java.util.regex.Pattern;\n@@ -93,0 +95,3 @@\n+        \/\/ For improving performance, pre-create a file for range header support tests.\n+        var tempRoot = Files.createDirectory(TEST_DIR.resolve(\"rangeTestFilePrep\"));\n+        Files.writeString(tempRoot.resolve(\"aFile.txt\"), \"0123456789\", CREATE);\n@@ -113,0 +118,122 @@\n+            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"singleRanges\")\n+    public void testSingleRangedRangeFileGET(String rangeSpec, String expectedRangeSpec, String expectedBody) throws Exception {\n+        var root = TEST_DIR.resolve(\"rangeTestFilePrep\");\n+        var file = root.resolve(\"aFile.txt\");\n+        var lastModified = getLastModified(file);\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var expectedEtag = createETag(file);\n+\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\"))\n+                    .header(\"Range\", \"bytes=\" + rangeSpec)\n+                    .build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 206);\n+            assertEquals(response.body(), expectedBody);\n+            assertEquals(response.headers().firstValue(\"content-type\").get(), \"text\/plain\");\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n+            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n+            assertEquals(response.headers().firstValue(\"content-range\").get(), \"bytes \" + expectedRangeSpec + \"\/10\");\n+            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @DataProvider(name = \"singleRanges\")\n+    public Object[][] singleRangeProvider() {\n+        return new Object[][]{\n+                \/\/ The file content is \"123456789\" (9 bytes)\n+                \/\/ {rangeSpec, expectedRangeSpec, expectedBody}\n+                {\"0-3\", \"0-3\", \"0123\"},\n+                {\"2-5\", \"2-5\", \"2345\"},\n+                {\"6-9\", \"6-9\", \"6789\"},\n+                {\"0-\",  \"0-9\", \"0123456789\"},\n+                {\"3-\",  \"3-9\", \"3456789\"},\n+                {\"-3\",  \"7-9\", \"789\"},\n+                {\"-1\",  \"9-9\", \"9\"},\n+                {\"-999\", \"0-9\", \"0123456789\"}\n+        };\n+    }\n+\n+    @Test\n+    public void testMatchETagRangeFileGet() throws Exception {\n+        var root = TEST_DIR.resolve(\"rangeTestFilePrep\");\n+        var file = root.resolve(\"aFile.txt\");\n+        var lastModified = getLastModified(file);\n+        var expectedEtag = createETag(file);\n+\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\"))\n+                    .header(\"Range\", \"bytes=2-5\")\n+                    .header(\"If-Match\", expectedEtag)\n+                    .build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 206);\n+            assertEquals(response.body(), \"2345\");\n+            assertEquals(response.headers().firstValue(\"content-type\").get(), \"text\/plain\");\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n+            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n+            assertEquals(response.headers().firstValue(\"content-range\").get(), \"bytes 2-5\/10\");\n+            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public void testMultipleRangesFileGET() throws Exception {\n+        var root = TEST_DIR.resolve(\"rangeTestFilePrep\");\n+        var file = root.resolve(\"aFile.txt\");\n+        var lastModified = getLastModified(file);\n+        var expectedEtag = createETag(file);\n+\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\"))\n+                    .header(\"Range\", \"bytes=2-,3-4,-3\")\n+                    .build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 206);\n+            String contentType = response.headers().firstValue(\"content-type\").orElse(\"\");\n+            assertTrue(contentType.startsWith(\"multipart\/byteranges; boundary=\"));\n+\n+            String boundary = contentType.substring(\"multipart\/byteranges; boundary=\".length());\n+            String[] parts = response.body().split(Pattern.quote(\"--\" + boundary));\n+            assertEquals(parts.length, 5);  \/\/ 3 parts + preamble + epilogue\n+            {\n+                String[] firstPartLines = parts[1].trim().split(\"\\r\\n\");\n+                assertEquals(firstPartLines[0], \"Content-Type: text\/plain\");\n+                assertEquals(firstPartLines[1], \"Content-Range: bytes 2-9\/10\");\n+                assertEquals(firstPartLines[3], \"23456789\");\n+            }\n+            {\n+                String[] secondPartLines = parts[2].trim().split(\"\\r\\n\");\n+                assertEquals(secondPartLines[0], \"Content-Type: text\/plain\");\n+                assertEquals(secondPartLines[1], \"Content-Range: bytes 3-4\/10\");\n+                assertEquals(secondPartLines[3], \"34\");\n+            }\n+            {\n+                String[] thirdPartLines = parts[3].trim().split(\"\\r\\n\");\n+                assertEquals(thirdPartLines[0], \"Content-Type: text\/plain\");\n+                assertEquals(thirdPartLines[1], \"Content-Range: bytes 7-9\/10\");\n+                assertEquals(thirdPartLines[3], \"789\");\n+            }\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n+            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n+            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n@@ -212,0 +339,1 @@\n+        var expectedEtag = createETag(file);\n@@ -224,0 +352,2 @@\n+            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n+            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n@@ -420,0 +550,70 @@\n+    @DataProvider(name = \"invalidRanges\")\n+    public Object[][] invalidRangeProvider() {\n+        return new Object[][]{\n+                \/\/ The file content is \"123456789\" (9 bytes)\n+                \/\/ {unit, rangeSpec}\n+                {\"meows\", \"1-2\"},\n+                {\"bytes\", \"3-meow\"},\n+                {\"bytes\", \"meow-5\"},\n+                {\"bytes\", \"100-\"},\n+                {\"bytes\", \"100-120\"},\n+                {\"bytes\", \"1-2,3-4,500-600\"}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"invalidRanges\")\n+    public void testInvalidRangeGET(String unit, String rangeSpec) throws Exception {\n+        var root = TEST_DIR.resolve(\"rangeTestFilePrep\");\n+        var file = root.resolve(\"aFile.txt\");\n+        var lastModified = getLastModified(file);\n+\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\"))\n+                    .header(\"Range\", unit + \"=\" + rangeSpec)\n+                    .build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+\n+            assertEquals(response.statusCode(), 416);\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n+            assertEquals(response.headers().firstValue(\"content-range\").get(), \"bytes *\/10\");\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), \"0\");\n+            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n+            assertEquals(response.body(), \"\");\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public void testMismatchETagRangeFileGET() throws Exception {\n+        var root = TEST_DIR.resolve(\"rangeTestFilePrep\");\n+        var file = root.resolve(\"aFile.txt\");\n+        var lastModified = getLastModified(file);\n+        var expectedLength = Long.toString(Files.size(file));\n+        var expectedEtag = createETag(file);\n+\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\"))\n+                    .header(\"Range\", \"bytes=2-5\")\n+                    .header(\"If-Range\", \"\\\"meowmeow\\\"\")\n+                    .build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            \/\/ If the ETag does not match, the server should ignore the Range header and serve the entire file.\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.body(), \"0123456789\");\n+            assertEquals(response.headers().firstValue(\"content-type\").get(), \"text\/plain\");\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n+            assertEquals(response.headers().firstValue(\"accept-ranges\").get(), \"bytes\");\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.headers().firstValue(\"etag\").get(), expectedEtag);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n@@ -773,0 +973,7 @@\n+\n+    public String createETag(Path path) throws IOException {\n+        var attrs = Files.readAttributes(path, BasicFileAttributes.class);\n+        long size = attrs.size();\n+        long lastModified = attrs.lastModifiedTime().toMillis();\n+        return \"\\\"%x-%x\\\"\".formatted(size, lastModified);\n+    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"modified"}]}