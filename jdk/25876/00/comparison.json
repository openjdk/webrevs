{"files":[{"patch":"@@ -333,1 +333,1 @@\n-  code->initialize_consts_size(Compilation::desired_max_constant_size());\n+  code->initialize_consts_size(Compilation::desired_max_constant_size);\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,6 +219,2 @@\n-  static uint desired_max_code_buffer_size() {\n-    return (uint)NMethodSizeLimit;  \/\/ default 64K\n-  }\n-  static uint desired_max_constant_size() {\n-    return desired_max_code_buffer_size() \/ 10;\n-  }\n+  const static uint desired_max_code_buffer_size = 64*K * wordSize;\n+  const static uint desired_max_constant_size = desired_max_code_buffer_size \/ 10;\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  return Compilation::desired_max_code_buffer_size() + Compilation::desired_max_constant_size();\n+  return Compilation::desired_max_code_buffer_size + Compilation::desired_max_constant_size;\n@@ -90,2 +90,1 @@\n-  \/\/ setup CodeBuffer.  Preallocate a BufferBlob of size\n-  \/\/ NMethodSizeLimit plus some extra space for constants.\n+  \/\/ Setup CodeBuffer.\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,6 +277,0 @@\n-  \/* The compiler assumes, in many places, that methods are at most 1MB. *\/ \\\n-  \/* Therefore, we restrict this flag to at most 1MB.                    *\/ \\\n-  develop(intx, NMethodSizeLimit, (64*K)*wordSize,                          \\\n-          \"Maximum size of a compiled method.\")                             \\\n-          range(0, 1*M)                                                     \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/c1\/c1_globals.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,36 +24,0 @@\n-\/**\n- * @test\n- * @bug 8316653\n- * @requires vm.debug\n- * @summary Test flag with max value.\n- *\n- * @run main\/othervm -XX:NMethodSizeLimit=1M\n- *                   compiler.arguments.TestC1Globals\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8318817\n- * @requires vm.debug\n- * @requires os.family == \"linux\"\n- * @summary Test flag with max value combined with transparent huge pages on\n- *          Linux.\n- *\n- * @run main\/othervm -XX:NMethodSizeLimit=1M\n- *                   -XX:+UseTransparentHugePages\n- *                   compiler.arguments.TestC1Globals\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8320682\n- * @requires vm.debug\n- * @summary Test flag with max value and specific compilation.\n- *\n- * @run main\/othervm -XX:NMethodSizeLimit=1M\n- *                   -XX:CompileOnly=java.util.HashMap::putMapEntries\n- *                   -Xcomp\n- *                   compiler.arguments.TestC1Globals\n- *\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestC1Globals.java","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:NMethodSizeLimit=655360\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestLinearScanOrderMain.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}