{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -63,0 +64,45 @@\n+            leftShiftAssertions(x, n);\n+        }\n+    }\n+\n+    @Test\n+    public void pathTargetedTests() {\n+        Object[][] cases = {\n+                \/\/ intLen == 0\n+                { MutableBigIntegerBox.ZERO,\n+                        random.nextInt(33) },\n+                \/\/ intLen != 0 && n <= leadingZeros\n+                { new MutableBigIntegerBox(new int[] { (int) random.nextLong(1L, 1L << 16) }),\n+                        random.nextInt(1, 17) },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits <= leadingZeros && value.length < newLen && nBits == 0\n+                { new MutableBigIntegerBox(new int[] { (int) random.nextLong(1L, 1L << 32) }),\n+                        32 },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits <= leadingZeros && value.length < newLen && nBits != 0\n+                { new MutableBigIntegerBox(new int[] { (int) random.nextLong(1L, 1L << 16) }),\n+                        32 + random.nextInt(1, 17) },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits <= leadingZeros && value.length >= newLen && nBits == 0\n+                \/\/ && newOffset != offset\n+                { new MutableBigIntegerBox(new int[] { random.nextInt(), (int) random.nextLong(1L, 1L << 32) }, 1, 1),\n+                        32 },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits <= leadingZeros && value.length >= newLen && nBits == 0\n+                \/\/ && newOffset == offset\n+                { new MutableBigIntegerBox(new int[] { (int) random.nextLong(1L, 1L << 32), random.nextInt() }, 0, 1),\n+                        32 },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits <= leadingZeros && value.length >= newLen && nBits != 0\n+                \/\/ && newOffset != offset\n+                { new MutableBigIntegerBox(new int[] { random.nextInt(), (int) random.nextLong(1L, 1L << 16) }, 1, 1),\n+                        32 + random.nextInt(1, 17) },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits <= leadingZeros && value.length >= newLen && nBits != 0\n+                \/\/ && newOffset == offset\n+                { new MutableBigIntegerBox(new int[] { (int) random.nextLong(1L, 1L << 16), random.nextInt() }, 0, 1),\n+                        32 + random.nextInt(1, 17) },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits > leadingZeros && value.length < newLen\n+                { new MutableBigIntegerBox(new int[] { (int) random.nextLong(1L << 15, 1L << 32) }),\n+                        random.nextInt(16, 33) },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits > leadingZeros && value.length >= newLen && newOffset != offset\n+                { new MutableBigIntegerBox(new int[] { random.nextInt(), (int) random.nextLong(1L << 15, 1L << 32) }, 1, 1),\n+                        random.nextInt(16, 33) },\n+                \/\/ intLen != 0 && n > leadingZeros && nBits > leadingZeros && value.length >= newLen && newOffset == offset\n+                { new MutableBigIntegerBox(new int[] { (int) random.nextLong(1L << 15, 1L << 32), random.nextInt() }, 0, 1),\n+                        random.nextInt(16, 33) },\n+        };\n@@ -64,2 +110,4 @@\n-            assertEquals(x.multiply(new MutableBigIntegerBox(BigInteger.TWO.pow(n))), x.shiftLeft(n));\n-            assertEquals(x, x.shiftLeft(n).shiftRight(n));\n+        for (int i = 0; i < cases.length; i++) {\n+            MutableBigIntegerBox x = (MutableBigIntegerBox) cases[i][0];\n+            int n = (int) cases[i][1];\n+            leftShiftAssertions(x, n);\n@@ -69,0 +117,6 @@\n+    private static void leftShiftAssertions(MutableBigIntegerBox x, int n) {\n+        MutableBigIntegerBox xShifted = x.shiftLeft(n);\n+        assertEquals(x.multiply(new MutableBigIntegerBox(BigInteger.TWO.pow(n))), xShifted);\n+        assertEquals(x, xShifted.shiftRight(n));\n+    }\n+\n","filename":"test\/jdk\/java\/math\/BigInteger\/MutableBigIntegerShiftTests.java","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"}]}