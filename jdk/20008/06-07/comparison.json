{"files":[{"patch":"@@ -25,2 +25,2 @@\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.FieldSource;\n@@ -30,0 +30,1 @@\n+import java.util.Arrays;\n@@ -32,1 +33,1 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -43,1 +44,1 @@\n- * @run junit\/othervm -DmaxDurationMillis=3000 MutableBigIntegerShiftTests\n+ * @run junit MutableBigIntegerShiftTests\n@@ -47,2 +48,0 @@\n-    private static final int DEFAULT_MAX_DURATION_MILLIS = 3_000;\n-\n@@ -51,0 +50,1 @@\n+    static final int[] ORDERS = { ORDER_SMALL, ORDER_MEDIUM };\n@@ -52,4 +52,1 @@\n-    private static int maxDurationMillis;\n-    private static Random random = RandomFactory.getRandom();\n-\n-    static boolean failure = false;\n+    private static final Random random = RandomFactory.getRandom();\n@@ -57,6 +54,3 @@\n-    @BeforeAll\n-    static void setMaxDurationMillis() {\n-        maxDurationMillis = Math.max(maxDurationMillis(), 0);\n-    }\n-\n-    public static void shift(int order) {\n+    @ParameterizedTest\n+    @FieldSource(\"ORDERS\")\n+    public void shift(int order) {\n@@ -65,5 +59,1 @@\n-            int n = Math.abs(random.nextInt() % 200);\n-\n-            assertTrue(x.shiftLeft(n).compare\n-                    (x.multiply(new MutableBigIntegerBox(BigInteger.TWO.pow(n)))) == 0,\n-                    \"Inconsistent left shift: \" + x + \"<<\" + n + \" != \" + x + \"*2^\" + n);\n+            int n = random.nextInt(200);\n@@ -71,2 +61,2 @@\n-            assertTrue(x.shiftLeft(n).shiftRight(n).compare(x) == 0,\n-                    \"Inconsistent left shift: (\" + x + \"<<\" + n + \")>>\" + n + \" != \" + x);\n+            assertEquals(x.multiply(new MutableBigIntegerBox(BigInteger.TWO.pow(n))), x.shiftLeft(n));\n+            assertEquals(x, x.shiftLeft(n).shiftRight(n));\n@@ -76,6 +66,0 @@\n-    @Test\n-    public static void testShift() {\n-        shift(ORDER_SMALL);\n-        shift(ORDER_MEDIUM);\n-    }\n-\n@@ -107,2 +91,1 @@\n-                for(int i = 0; i < numInts; i++)\n-                    fullBits[i] = -1;\n+                Arrays.fill(fullBits, -1);\n@@ -154,9 +137,0 @@\n-\n-    private static int maxDurationMillis() {\n-        try {\n-            return Integer.parseInt(System.getProperty(\"maxDurationMillis\",\n-                    Integer.toString(DEFAULT_MAX_DURATION_MILLIS)));\n-        } catch (NumberFormatException ignore) {\n-        }\n-        return DEFAULT_MAX_DURATION_MILLIS;\n-    }\n","filename":"test\/jdk\/java\/math\/BigInteger\/MutableBigIntegerShiftTests.java","additions":14,"deletions":40,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import java.util.Arrays;\n+\n@@ -163,0 +165,14 @@\n+    \/**\n+     * Compares this MutableBigIntegerBox with the specified Object for equality.\n+     *\n+     * @param  x Object to which this MutableBigIntegerBox is to be compared.\n+     * @return {@code true} if and only if the specified Object is a\n+     *         MutableBigIntegerBox whose value is numerically equal to this MutableBigIntegerBox.\n+     *\/\n+    @Override\n+    public boolean equals(Object x) {\n+        return (x instanceof MutableBigIntegerBox xInt)\n+                && Arrays.equals(val.value, val.offset, val.offset + val.intLen,\n+                        xInt.val.value, xInt.val.offset, xInt.val.offset + xInt.val.intLen);\n+    }\n+\n","filename":"test\/jdk\/java\/math\/BigInteger\/java.base\/java\/math\/MutableBigIntegerBox.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}