{"files":[{"patch":"@@ -70,1 +70,1 @@\n-        int numType = random.nextInt(7);\n+        int numType = random.nextInt(8);\n@@ -74,0 +74,1 @@\n+        int[] val;\n@@ -98,1 +99,1 @@\n-                int[] val = new int[(order + 31) >> 5];\n+                val = new int[(order + 31) >> 5];\n@@ -119,1 +120,8 @@\n-\n+            case 6: \/\/ random bits with trailing space\n+                int len = random.nextInt((order + 31) >> 5) + 1;\n+                int offset = random.nextInt(len);\n+                val = new int[len << 1];\n+                for (int i = 0; i < val.length; i++)\n+                    val[i] = random.nextInt();\n+                result = new MutableBigIntegerBox(val, offset, len);\n+                break;\n","filename":"test\/jdk\/java\/math\/BigInteger\/MutableBigIntegerShiftTests.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-     * Construct MutableBigIntegerBox from magnitude.\n+     * Construct MutableBigIntegerBox from magnitude, starting from\n+     * offset and with a length of intLen ints.\n@@ -56,0 +57,2 @@\n+     * @param offset the offset where the value starts\n+     * @param intLen the length of the value, in int words.\n@@ -57,1 +60,1 @@\n-    public MutableBigIntegerBox(int[] mag) {\n+    public MutableBigIntegerBox(int[] mag, int offset, int intLen) {\n@@ -59,0 +62,2 @@\n+        val.offset = offset;\n+        val.intLen = intLen;\n@@ -62,0 +67,9 @@\n+    \/**\n+     * Construct MutableBigIntegerBox from magnitude.\n+     * The value is normalized.\n+     * @param mag the magnitude\n+     *\/\n+    public MutableBigIntegerBox(int[] mag) {\n+        this(mag, 0, mag.length);\n+    }\n+\n@@ -84,1 +98,4 @@\n-        MutableBigInteger res = new MutableBigInteger(val);\n+        MutableBigInteger res = new MutableBigInteger(val.value.clone());\n+        res.offset = val.offset;\n+        res.intLen = val.intLen;\n+\n","filename":"test\/jdk\/java\/math\/BigInteger\/java.base\/java\/math\/MutableBigIntegerBox.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    int[] shifts = new int[TESTSIZE];\n@@ -66,0 +67,1 @@\n+            shifts[i] = r.nextInt((int) (shiftArray[i].bitLength() << 1));\n@@ -74,0 +76,1 @@\n+        int i = 0;\n@@ -75,2 +78,2 @@\n-            int shift = rand.nextInt((int) s.bitLength());\n-            bh.consume(s.shiftLeft(shift));\n+            bh.consume(s.shiftLeft(shifts[i]));\n+            i++;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/MutableBigIntegersLeftShift.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-     * Construct MutableBigIntegerBox from magnitude.\n+     * Construct MutableBigIntegerBox from magnitude, starting from\n+     * offset and with a length of intLen ints.\n@@ -56,0 +57,2 @@\n+     * @param offset the offset where the value starts\n+     * @param intLen the length of the value, in int words.\n@@ -57,1 +60,1 @@\n-    public MutableBigIntegerBox(int[] mag) {\n+    public MutableBigIntegerBox(int[] mag, int offset, int intLen) {\n@@ -59,0 +62,2 @@\n+        val.offset = offset;\n+        val.intLen = intLen;\n@@ -62,0 +67,9 @@\n+    \/**\n+     * Construct MutableBigIntegerBox from magnitude.\n+     * The value is normalized.\n+     * @param mag the magnitude\n+     *\/\n+    public MutableBigIntegerBox(int[] mag) {\n+        this(mag, 0, mag.length);\n+    }\n+\n@@ -84,1 +98,4 @@\n-        MutableBigInteger res = new MutableBigInteger(val);\n+        MutableBigInteger res = new MutableBigInteger(val.value.clone());\n+        res.offset = val.offset;\n+        res.intLen = val.intLen;\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/java.base\/java\/math\/MutableBigIntegerBox.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}