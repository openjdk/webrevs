{"files":[{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.RandomFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n@@ -4,1 +31,0 @@\n-import jdk.test.lib.RandomFactory;\n@@ -6,0 +32,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -8,0 +35,10 @@\n+\/**\n+ * @test\n+ * @bug 8336274\n+ * @summary Tests for correctness of MutableBigInteger.leftShift(int)\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @build java.base\/java.math.MutableBigIntegerBox\n+ * @key randomness\n+ * @run junit\/othervm -DmaxDurationMillis=3000 MutableBigIntegerShiftTests\n+ *\/\n@@ -10,0 +47,2 @@\n+    private static final int DEFAULT_MAX_DURATION_MILLIS = 3_000;\n+\n@@ -13,0 +52,1 @@\n+    private static int maxDurationMillis;\n@@ -17,3 +57,4 @@\n-    public static void shift(int order) {\n-        int failCount1 = 0;\n-        int failCount2 = 0;\n+    @BeforeAll\n+    static void setMaxDurationMillis() {\n+        maxDurationMillis = Math.max(maxDurationMillis(), 0);\n+    }\n@@ -21,1 +62,2 @@\n-        for (int i=0; i<100; i++) {\n+    public static void shift(int order) {\n+        for (int i = 0; i < 100; i++) {\n@@ -23,1 +65,1 @@\n-            int n = Math.abs(random.nextInt()%200);\n+            int n = Math.abs(random.nextInt() % 200);\n@@ -25,4 +67,3 @@\n-            if (x.shiftLeft(n).compare\n-                (x.multiply(new MutableBigIntegerBox(BigInteger.TWO.pow(n)))) != 0) {\n-                failCount1++;\n-            }\n+            assertTrue(x.shiftLeft(n).compare\n+                    (x.multiply(new MutableBigIntegerBox(BigInteger.TWO.pow(n)))) == 0,\n+                    \"Inconsistent left shift: \" + x + \"<<\" + n + \" != \" + x + \"*2^\" + n);\n@@ -30,2 +71,2 @@\n-            if (x.shiftLeft(n).shiftRight(n).compare(x) != 0)\n-                failCount2++;\n+            assertTrue(x.shiftLeft(n).shiftRight(n).compare(x) == 0,\n+                    \"Inconsistent left shift: (\" + x + \"<<\" + n + \")>>\" + n + \" != \" + x);\n@@ -33,2 +74,0 @@\n-        report(\"baz shiftLeft for \" + order + \" bits\", failCount1);\n-        report(\"baz shiftRight for \" + order + \" bits\", failCount2);\n@@ -37,23 +76,4 @@\n-    \/**\n-     * Main to interpret arguments and run several tests.\n-     *\n-     * Up to three arguments may be given to specify the SIZE of BigIntegers\n-     * used for call parameters 1, 2, and 3. The SIZE is interpreted as\n-     * the maximum number of decimal digits that the parameters will have.\n-     *\n-     *\/\n-    public static void main(String[] args) {\n-        \/\/ Some variables for sizing test numbers in bits\n-        int order1 = ORDER_MEDIUM;\n-        int order2 = ORDER_SMALL;\n-\n-        if (args.length >0)\n-            order1 = (int)((Integer.parseInt(args[0]))* 3.333);\n-        if (args.length >1)\n-            order2 = (int)((Integer.parseInt(args[1]))* 3.333);\n-\n-        shift(order1);\n-        shift(order2);\n-\n-        if (failure)\n-            throw new RuntimeException(\"Failure in MutableBigIntegerShiftTests.\");\n+    @Test\n+    public static void testShift() {\n+        shift(ORDER_SMALL);\n+        shift(ORDER_MEDIUM);\n@@ -135,5 +155,7 @@\n-    static void report(String testName, int failCount) {\n-        System.err.println(testName+\": \" +\n-                           (failCount==0 ? \"Passed\":\"Failed(\"+failCount+\")\"));\n-        if (failCount > 0)\n-            failure = true;\n+    private static int maxDurationMillis() {\n+        try {\n+            return Integer.parseInt(System.getProperty(\"maxDurationMillis\",\n+                    Integer.toString(DEFAULT_MAX_DURATION_MILLIS)));\n+        } catch (NumberFormatException ignore) {\n+        }\n+        return DEFAULT_MAX_DURATION_MILLIS;\n","filename":"test\/jdk\/java\/math\/BigInteger\/MutableBigIntegerShiftTests.java","additions":64,"deletions":42,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -162,0 +162,5 @@\n+\n+    @Override\n+    public String toString() {\n+        return val.toString();\n+    }\n","filename":"test\/jdk\/java\/math\/BigInteger\/java.base\/java\/math\/MutableBigIntegerBox.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,119 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.math;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OperationsPerInvocation;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Warmup;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.math.MutableBigIntegerBox;\n-import java.util.Random;\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 5, time = 1)\n-@Measurement(iterations = 5, time = 1)\n-@Fork(value = 3)\n-public class MutableBigIntegersLeftShift {\n-\n-    int[] shifts = new int[TESTSIZE];\n-    private MutableBigIntegerBox[] shiftArray;\n-    private static final int TESTSIZE = 1000;\n-\n-    @Setup\n-    public void setup() {\n-        Random r = new Random(1123);\n-        int numbits = r.nextInt(16384);\n-\n-        shiftArray = new MutableBigIntegerBox[TESTSIZE]; \/*\n-         * Each array entry is atmost 16k bits\n-         * in size\n-         *\/\n-\n-        for (int i = 0; i < TESTSIZE; i++) {\n-            shiftArray[i] = new MutableBigIntegerBox(new BigInteger(numbits, r));\n-            shifts[i] = r.nextInt((int) (shiftArray[i].bitLength() << 1));\n-        }\n-    }\n-\n-    \/** Invokes the shiftLeft method of BigInteger with different values. *\/\n-    @Benchmark\n-    @OperationsPerInvocation(TESTSIZE)\n-    public void testLeftShift(Blackhole bh) {\n-        Random rand = new Random();\n-        int i = 0;\n-        for (MutableBigIntegerBox s : shiftArray) {\n-            bh.consume(s.shiftLeft(shifts[i]));\n-            i++;\n-        }\n-    }\n-\n-    @BenchmarkMode(Mode.AverageTime)\n-    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n-    @State(Scope.Thread)\n-    @Warmup(iterations = 5, time = 1)\n-    @Measurement(iterations = 5, time = 1)\n-    @Fork(value = 3)\n-    public static class SmallShifts {\n-\n-        @Param({\"32\", \"128\", \"256\"})\n-        private int maxNumbits;\n-\n-        \/*\n-         * Small numbers, bit length in range [maxNumbits - 31, maxNumbits]\n-         *\/\n-        MutableBigIntegerBox[] smallShiftArray = new MutableBigIntegerBox[TESTSIZE];\n-\n-        @Setup\n-        public void setup() {\n-            Random r = new Random(1123);\n-            for (int i = 0; i < TESTSIZE; i++) {\n-                int value = Math.abs(r.nextInt());\n-                smallShiftArray[i] = new MutableBigIntegerBox(new BigInteger(Math.max(maxNumbits - value % 32, 0), r));\n-            }\n-        }\n-\n-        \/** Invokes the shiftLeft method of small BigInteger with different values. *\/\n-        @Benchmark\n-        @OperationsPerInvocation(TESTSIZE)\n-        public void testLeftShift(Blackhole bh) {\n-            Random rand = new Random();\n-            for (MutableBigIntegerBox s : smallShiftArray) {\n-                int shift = rand.nextInt((int) s.bitLength());\n-                bh.consume(s.shiftLeft(shift));\n-            }\n-        }\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/MutableBigIntegersLeftShift.java","additions":0,"deletions":119,"binary":false,"changes":119,"status":"deleted"},{"patch":"@@ -1,162 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.math;\n-\n-\/**\n- * A class for tests.\n- *\/\n-public class MutableBigIntegerBox {\n-\n-    \/**\n-     * Constant zero\n-     *\/\n-    public static final MutableBigIntegerBox ZERO = new MutableBigIntegerBox(new MutableBigInteger());\n-\n-    \/**\n-     * Constant one\n-     *\/\n-    public static final MutableBigIntegerBox ONE = new MutableBigIntegerBox(MutableBigInteger.ONE);\n-\n-    \/**\n-     * Constant two\n-     *\/\n-    public static final MutableBigIntegerBox TWO = new MutableBigIntegerBox(new MutableBigInteger(2));\n-\n-    private MutableBigInteger val;\n-\n-    MutableBigIntegerBox(MutableBigInteger val) {\n-        this.val = val;\n-    }\n-\n-    \/**\n-     * Construct MutableBigIntegerBox from magnitude, starting from\n-     * offset and with a length of intLen ints.\n-     * The value is normalized.\n-     * @param mag the magnitude\n-     * @param offset the offset where the value starts\n-     * @param intLen the length of the value, in int words.\n-     *\/\n-    public MutableBigIntegerBox(int[] mag, int offset, int intLen) {\n-        this(new MutableBigInteger(mag));\n-        val.offset = offset;\n-        val.intLen = intLen;\n-        val.normalize();\n-    }\n-\n-    \/**\n-     * Construct MutableBigIntegerBox from magnitude.\n-     * The value is normalized.\n-     * @param mag the magnitude\n-     *\/\n-    public MutableBigIntegerBox(int[] mag) {\n-        this(mag, 0, mag.length);\n-    }\n-\n-    \/**\n-     * Construct MutableBigIntegerBox from BigInteger val\n-     * @param val the value\n-     *\/\n-    public MutableBigIntegerBox(BigInteger val) {\n-        this(val.mag);\n-    }\n-\n-    \/**\n-     * Returns the bit length of this MutableBigInteger value\n-     * @return the bit length of this MutableBigInteger value\n-     *\/\n-    public long bitLength() {\n-        return val.bitLength();\n-    }\n-\n-    \/**\n-     * Return {@code this << n}\n-     * @return {@code this << n}\n-     * @param n the shift\n-     *\/\n-    public MutableBigIntegerBox shiftLeft(int n) {\n-        MutableBigInteger res = new MutableBigInteger(val.value.clone());\n-        res.offset = val.offset;\n-        res.intLen = val.intLen;\n-\n-        res.safeLeftShift(n);\n-        return new MutableBigIntegerBox(res);\n-    }\n-\n-    \/**\n-     * Return {@code this >> n}\n-     * @return {@code this >> n}\n-     * @param n the shift\n-     *\/\n-    public MutableBigIntegerBox shiftRight(int n) {\n-        MutableBigInteger res = new MutableBigInteger(val);\n-        res.safeRightShift(n);\n-        return new MutableBigIntegerBox(res);\n-    }\n-\n-    \/**\n-     * Return this + addend\n-     * @return this + addend\n-     * @param addend the addend\n-     *\/\n-    public MutableBigIntegerBox add(MutableBigIntegerBox addend) {\n-        MutableBigInteger res = new MutableBigInteger(val);\n-        res.add(addend.val);\n-        return new MutableBigIntegerBox(res);\n-    }\n-\n-    \/**\n-     * Return this - subtraend\n-     * @return this - subtraend\n-     * @param subtraend the subtraend\n-     *\/\n-    public MutableBigIntegerBox subtract(MutableBigIntegerBox subtraend) {\n-        MutableBigInteger res = new MutableBigInteger(val);\n-        res.subtract(subtraend.val);\n-        return new MutableBigIntegerBox(res);\n-    }\n-\n-    \/**\n-     * Return this * multiplier\n-     * @return this * multiplier\n-     * @param multiplier the multiplier\n-     *\/\n-    public MutableBigIntegerBox multiply(MutableBigIntegerBox multiplier) {\n-        MutableBigInteger res = new MutableBigInteger();\n-        if (!(val.isZero() || multiplier.val.isZero()))\n-            val.multiply(multiplier.val, res);\n-\n-        return new MutableBigIntegerBox(res);\n-    }\n-\n-    \/**\n-     * Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1\n-     * as this is numerically less than, equal to, or greater than {@code b}.\n-     * @return -1, 0 or 1 as this is numerically less than, equal to, or\n-     * greater than {@code b}.\n-     * @param b the value to compare\n-     *\/\n-    public int compare(MutableBigIntegerBox b) {\n-        return val.compare(b.val);\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/java.base\/java\/math\/MutableBigIntegerBox.java","additions":0,"deletions":162,"binary":false,"changes":162,"status":"deleted"}]}