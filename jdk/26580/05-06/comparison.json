{"files":[{"patch":"@@ -82,1 +82,1 @@\n-        \"NumberElements\/lenientMinusSign\",\n+        \"NumberElements\/lenientMinusSigns\",\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/Bundle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -861,1 +861,1 @@\n-                pushStringEntry(qName, attributes, currentNumberingSystem + \"NumberElements\/lenientMinusSign\");\n+                pushStringEntry(qName, attributes, currentNumberingSystem + \"NumberElements\/lenientMinusSigns\");\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/LDMLParseHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,3 +219,3 @@\n- * @implNote The default implementation follows the LDML specification\n- * to enable loose matching of minus sign patterns when {@link #isStrict()}\n- * returns {@code false}.\n+ * @implNote The implementation follows the LDML specification to enable loose\n+ * matching of minus sign patterns when {@link #isStrict()} returns\n+ * {@code false}.\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-import java.util.regex.Pattern;\n@@ -414,0 +413,1 @@\n+ *\n@@ -421,3 +421,3 @@\n- * @implNote The default implementation follows the LDML specification\n- * to enable loose matching of minus sign patterns when {@link #isStrict()}\n- * returns {@code false}.\n+ * @implNote The implementation follows the LDML specification to enable loose\n+ * matching of minus sign patterns when {@link #isStrict()} returns\n+ * {@code false}.\n@@ -3512,3 +3512,7 @@\n-     * {@return if the text matches the affix} In lenient mode, lenient\n-     * minus signs also match the hyphen-minus (U+002D).\n-     * Package-private access, as it is being called from CompactNumberFormat.\n+     * {@return true if the text matches the affix}\n+     * In lenient mode, lenient minus signs also match the hyphen-minus\n+     * (U+002D). Package-private access, as this is called from\n+     * CompactNumberFormat.\n+     * @implNote The implementation does not account for lenient minuses\n+     * in non-BMP ranges or normalizations, as these could change the affix\n+     * length.\n@@ -3521,0 +3525,1 @@\n+            \/\/ always match with an empty affix, as affix is optional\n@@ -3530,6 +3535,13 @@\n-        var lms = symbols.getLenientMinusSign();\n-        if (alen == 1) {\n-            var a = affix.codePointAt(0);\n-            var c = text.codePointAt(position);\n-            if (lms.indexOf(a) >= 0) {\n-                return lms.indexOf(c) >= 0;\n+        var lms = symbols.getLenientMinusSigns();\n+        int i = 0;\n+        int limit = Math.min(tlen, position + alen);\n+        for (; position + i < limit; i++) {\n+            char t = text.charAt(position + i);\n+            char a = affix.charAt(i);\n+            int tIndex = lms.indexOf(t);\n+            int aIndex = lms.indexOf(a);\n+            \/\/ Non LMS. Match direct\n+            if (tIndex < 0 && aIndex < 0) {\n+                if (t != a) {\n+                    return false;\n+                }\n@@ -3537,1 +3549,4 @@\n-                return a == c;\n+                \/\/ By here, at least one LMS. Ensure both LMS.\n+                if (tIndex < 0 || aIndex < 0) {\n+                    return false;\n+                }\n@@ -3539,7 +3554,0 @@\n-        } else {\n-            \/\/ slow path. normalize lenient minus to \"-\" and compare\n-            var lmsp = Pattern.compile(\"[\" + lms + \"]\", Pattern.CANON_EQ);\n-            var a = lmsp.matcher(affix).replaceAll(\"-\");\n-            var t = lmsp.matcher(text.substring(position, Math.min(tlen, position + alen)))\n-                .replaceAll(\"-\");\n-            return t.equals(a);\n@@ -3547,0 +3555,2 @@\n+        \/\/ Return true if entire affix was matched\n+        return i == alen;\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":31,"deletions":21,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -719,1 +719,2 @@\n-     * {@return the lenient minus signs}\n+     * {@return the lenient minus signs} Multiple lenient minus signs\n+     * are concatenated to form the returned string.\n@@ -721,2 +722,2 @@\n-    String getLenientMinusSign() {\n-        return lenientMinusSign;\n+    String getLenientMinusSigns() {\n+        return lenientMinusSigns;\n@@ -851,1 +852,1 @@\n-        lenientMinusSign = numberElements.length < 14 ? minusSignText : numberElements[13];\n+        lenientMinusSigns = numberElements.length < 14 ? minusSignText : numberElements[13];\n@@ -1014,1 +1015,1 @@\n-            lenientMinusSign =  numberElements[13];\n+            lenientMinusSigns = numberElements[13];\n@@ -1016,1 +1017,1 @@\n-            lenientMinusSign = minusSignText;\n+            lenientMinusSigns = minusSignText;\n@@ -1198,1 +1199,1 @@\n-    private transient String lenientMinusSign;\n+    private transient String lenientMinusSigns;\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+    \/\/ White box test. modifies the private `lenientMinusSigns` field in the DFS\n@@ -115,1 +116,1 @@\n-            .findVarHandle(DecimalFormatSymbols.class, \"lenientMinusSign\", String.class)\n+            .findVarHandle(DecimalFormatSymbols.class, \"lenientMinusSigns\", String.class)\n@@ -117,0 +118,1 @@\n+        \/\/ Direct match. Should succeed\n@@ -119,1 +121,0 @@\n-    }\n@@ -121,8 +122,4 @@\n-    @Test\n-    void testCanonEq() throws IllegalAccessException, NoSuchFieldException, ParseException {\n-        var dfs = new DecimalFormatSymbols(Locale.ROOT);\n-        MethodHandles.privateLookupIn(DecimalFormatSymbols.class, MethodHandles.lookup())\n-            .findVarHandle(DecimalFormatSymbols.class, \"lenientMinusSign\", String.class)\n-            .set(dfs, \"-\\u00E5\");\n-        var df = new DecimalFormat(\"#.#;a\\u0308#.#\", dfs);\n-        assertEquals(df.parse(\"a\\u03081.5\"), -1.5);\n+        \/\/ Fail if the lengths of negative prefixes differ\n+        assertThrows(ParseException.class, () -> df.parse(\"-1.5\"));\n+        var df2= new DecimalFormat(\"#.#;-#.#\", dfs);\n+        assertThrows(ParseException.class, () -> df2.parse(\"ðŸ™‚1.5\"));\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/LenientMinusSignTest.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}