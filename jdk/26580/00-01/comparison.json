{"files":[{"patch":"@@ -849,7 +849,4 @@\n-            {\n-                String level = attributes.getValue(\"level\");\n-                if (level != null && level.equals(\"lenient\")) {\n-                    pushKeyContainer(qName, attributes, attributes.getValue(\"scope\"));\n-                } else {\n-                    pushIgnoredContainer(qName);\n-                }\n+            if (\"lenient\".equals(attributes.getValue(\"level\"))) {\n+                pushKeyContainer(qName, attributes, attributes.getValue(\"scope\"));\n+            } else {\n+                pushIgnoredContainer(qName);\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/LDMLParseHandler.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3525,0 +3525,3 @@\n+        if (parseStrict) {\n+            return text.regionMatches(position, affix, 0, alen);\n+        }\n@@ -3526,10 +3529,6 @@\n-        if (!parseStrict) {\n-            var lms = symbols.getLenientMinusSign();\n-            if (alen == 1) {\n-                var a = affix.charAt(0);\n-                var c = text.charAt(position);\n-                if (lms.indexOf(a) >= 0) {\n-                    return lms.indexOf(c) >= 0;\n-                } else {\n-                    return a == c;\n-                }\n+        var lms = symbols.getLenientMinusSign();\n+        if (alen == 1) {\n+            var a = affix.charAt(0);\n+            var c = text.charAt(position);\n+            if (lms.indexOf(a) >= 0) {\n+                return lms.indexOf(c) >= 0;\n@@ -3537,6 +3536,1 @@\n-                \/\/ slow path. normalize lenient minus to \"-\" and compare\n-                var lmsp = \"[\" + lms + \"]\";\n-                var a = affix.replaceAll(lmsp, \"-\");\n-                var t = text.substring(position, Math.min(tlen, position + alen))\n-                    .replaceAll(lmsp, \"-\");\n-                return t.regionMatches(0, a, 0, alen);\n+                return a == c;\n@@ -3544,0 +3538,7 @@\n+        } else {\n+            \/\/ slow path. normalize lenient minus to \"-\" and compare\n+            var lmsp = \"[\" + lms + \"]\";\n+            var a = affix.replaceAll(lmsp, \"-\");\n+            var t = text.substring(position, Math.min(tlen, position + alen))\n+                .replaceAll(lmsp, \"-\");\n+            return t.regionMatches(0, a, 0, alen);\n@@ -3545,2 +3546,0 @@\n-\n-        return text.regionMatches(position, affix, 0, alen);\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1001,5 +1001,0 @@\n-        if (loadNumberData(locale) instanceof Object[] d &&\n-            d[0] instanceof String[] numberElements) {\n-            lenientMinusSign = numberElements.length < 14 ? minusSignText : numberElements[13];\n-        }\n-\n@@ -1015,0 +1010,8 @@\n+\n+        if (loadNumberData(locale) instanceof Object[] d &&\n+            d[0] instanceof String[] numberElements &&\n+            numberElements.length >= 14) {\n+            lenientMinusSign =  numberElements[13];\n+        } else {\n+            lenientMinusSign = minusSignText;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}