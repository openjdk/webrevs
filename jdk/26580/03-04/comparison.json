{"files":[{"patch":"@@ -219,3 +219,3 @@\n- * @implNote The default implementation follows the LDML specification for\n- * {@code parseLenient} elements to interpret minus sign patterns when lenient\n- * parsing is enabled.\n+ * @implNote The default implementation follows the LDML specification\n+ * to enable loose matching of minus sign patterns when {@link #isStrict()}\n+ * returns {@code false}.\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import java.util.regex.Pattern;\n@@ -420,3 +421,3 @@\n- * @implNote The default implementation follows the LDML specification for\n- * {@code parseLenient} elements to interpret minus sign patterns when lenient\n- * parsing is enabled.\n+ * @implNote The default implementation follows the LDML specification\n+ * to enable loose matching of minus sign patterns when {@link #isStrict()}\n+ * returns {@code false}.\n@@ -3531,2 +3532,2 @@\n-            var a = affix.charAt(0);\n-            var c = text.charAt(position);\n+            var a = affix.codePointAt(0);\n+            var c = text.codePointAt(position);\n@@ -3540,5 +3541,5 @@\n-            var lmsp = \"[\" + lms + \"]\";\n-            var a = affix.replaceAll(lmsp, \"-\");\n-            var t = text.substring(position, Math.min(tlen, position + alen))\n-                .replaceAll(lmsp, \"-\");\n-            return t.regionMatches(0, a, 0, alen);\n+            var lmsp = Pattern.compile(\"[\" + lms + \"]\", Pattern.CANON_EQ);\n+            var a = lmsp.matcher(affix).replaceAll(\"-\");\n+            var t = lmsp.matcher(text.substring(position, Math.min(tlen, position + alen)))\n+                .replaceAll(\"-\");\n+            return t.equals(a);\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ *          java.base\/java.text:+open\n@@ -37,0 +38,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -109,0 +111,20 @@\n+    @Test\n+    void testSupplementary() throws IllegalAccessException, NoSuchFieldException, ParseException {\n+        var dfs = new DecimalFormatSymbols(Locale.ROOT);\n+        MethodHandles.privateLookupIn(DecimalFormatSymbols.class, MethodHandles.lookup())\n+            .findVarHandle(DecimalFormatSymbols.class, \"lenientMinusSign\", String.class)\n+            .set(dfs, \"-ðŸ™‚\");\n+        var df = new DecimalFormat(\"#.#;ðŸ™‚#.#\", dfs);\n+        assertEquals(df.parse(\"ðŸ™‚1.5\"), -1.5);\n+    }\n+\n+    @Test\n+    void testCanonEq() throws IllegalAccessException, NoSuchFieldException, ParseException {\n+        var dfs = new DecimalFormatSymbols(Locale.ROOT);\n+        MethodHandles.privateLookupIn(DecimalFormatSymbols.class, MethodHandles.lookup())\n+            .findVarHandle(DecimalFormatSymbols.class, \"lenientMinusSign\", String.class)\n+            .set(dfs, \"-\\u00E5\");\n+        var df = new DecimalFormat(\"#.#;a\\u0308#.#\", dfs);\n+        assertEquals(df.parse(\"a\\u03081.5\"), -1.5);\n+    }\n+\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/LenientMinusSignTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}