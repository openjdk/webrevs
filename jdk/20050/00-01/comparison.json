{"files":[{"patch":"@@ -127,3 +127,1 @@\n-                    continue;\n-                }\n-                throw t;\n+                } else throw t;\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/AfterDisconnect.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n- *     sender address. This test may fail intermittently on macOS if other datagram\n- *     channel tests are running concurrently on the same host.\n+ *     sender address.\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/ManySourcesAndTargets.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                        if (elapsed  > 4800) {\n+                        if (elapsed > 4800) {\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/MulticastSendReceiveTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n- *     the channel's socket to be bound to a local address. This test may fail\n- *     intermittently on macOS if other datagram channel tests are running\n- *     concurrently on the same host.\n- * @library \/test\/lib\n- * @build jdk.test.lib.Platform NotBound\n+ *     the channel's socket to be bound to a local address.\n@@ -42,3 +38,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-import jdk.test.lib.Platform;\n@@ -88,1 +81,5 @@\n-                        if (received.await(250, TimeUnit.MILLISECONDS)) break;\n+                        if (received.await(250, TimeUnit.MILLISECONDS)) {\n+                            \/\/ The datagram has been received: no need to continue\n+                            \/\/ sending\n+                            break;\n+                        }\n@@ -95,0 +92,2 @@\n+                        } else {\n+                            System.out.println(\"Datagram not received after 250ms. Retrying...\");\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/NotBound.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                        if (elapsed  > 4800) {\n+                        if (elapsed > 4800) {\n@@ -119,0 +119,1 @@\n+                            \/\/ We haven't waited long enough,\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Promiscuous.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        System.out.println(\"Refuser is: \" + refuser);\n+        System.err.println(\"Refuser is: \" + refuser);\n@@ -63,7 +63,16 @@\n-            if (((InetSocketAddress)dc.getLocalAddress()).getPort() == port) {\n-                if (i < MAX_TRIES - 1) {\n-                    System.out.format(\"Refuser port has been reused by dc: %s, retrying...%n\",\n-                            dc.getLocalAddress());\n-                    continue;\n-                }\n-                System.out.format(\"Skipping test: refuser port has been reused by dc: %s%n\",\n+\n+            \/\/ check the port assigned to dc\n+            if (((InetSocketAddress)dc.getLocalAddress()).getPort() != port) {\n+                \/\/ We got a good port. Do not retry\n+                break;\n+            }\n+\n+            \/\/ We bound to the same port that the refuser is using, This will not\n+            \/\/ work. Retry binding if possible.\n+            if (i < MAX_TRIES - 1) {\n+                \/\/ we will retry...\n+                System.err.format(\"Refuser port has been reused by dc: %s, retrying...%n\",\n+                        dc.getLocalAddress());\n+            } else {\n+                \/\/ that was the last attempt... Skip the test\n+                System.err.format(\"Skipping test: refuser port has been reused by dc: %s%n\",\n@@ -73,1 +82,0 @@\n-            break;\n@@ -113,1 +121,1 @@\n-            System.out.println(\"Skipping test: refuser port has been reused: \" + e);\n+            System.err.println(\"Skipping test: refuser port has been reused: \" + e);\n@@ -178,1 +186,1 @@\n-                    System.out.format(\"received %s at %s from %s%n\", message, dc.getLocalAddress(), sa);\n+                    System.err.format(\"received %s at %s from %s%n\", message, dc.getLocalAddress(), sa);\n@@ -198,1 +206,1 @@\n-                System.out.println(\"Got expected PortUnreachableException \" + pue);\n+                System.err.println(\"Got expected PortUnreachableException \" + pue);\n@@ -244,1 +252,1 @@\n-        System.out.format(\"Received %d keys%n\", selectedKeys.size());\n+        System.err.format(\"Received %d keys%n\", selectedKeys.size());\n@@ -248,1 +256,1 @@\n-                System.out.println(\"Invalid or unreadable key: \" + key);\n+                System.err.println(\"Invalid or unreadable key: \" + key);\n@@ -253,1 +261,1 @@\n-                System.out.println(\"Attempting to read datagram from key: \" + key);\n+                System.err.println(\"Attempting to read datagram from key: \" + key);\n@@ -263,1 +271,1 @@\n-                    System.out.format(\"received %s at %s from %s%n\", message, datagramChannel.getLocalAddress(), sa);\n+                    System.err.format(\"received %s at %s from %s%n\", message, datagramChannel.getLocalAddress(), sa);\n@@ -272,1 +280,1 @@\n-                System.out.println(\"Unable to read from datagram \" + io);\n+                System.err.println(\"Unable to read from datagram \" + io);\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SelectWhenRefused.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"}]}