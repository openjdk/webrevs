{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import org.openjdk.jmh.annotations.Level;\n@@ -35,0 +36,1 @@\n+import org.openjdk.jmh.annotations.TearDown;\n@@ -59,0 +61,3 @@\n+    private Object[] youngArraySmall;\n+    private Object[] youngArrayLarge;\n+\n@@ -61,0 +66,1 @@\n+    private Object youngRef;\n@@ -65,0 +71,2 @@\n+    public Referencer youngHead = null;\n+    public Referencer youngTail = null;\n@@ -84,1 +92,1 @@\n-    @Setup\n+    @Setup(Level.Trial)\n@@ -117,0 +125,10 @@\n+    @Setup(Level.Iteration)\n+    public void setupIteration() {\n+        \/\/ Reallocate each iteration to ensure they are in young gen\n+        youngArraySmall = new Object[NUM_REFERENCES_SMALL];\n+        youngArrayLarge = new Object[NUM_REFERENCES_LARGE];\n+        youngRef = new Object();\n+        this.youngHead = new Referencer();\n+        this.youngTail = new Referencer();\n+    }\n+\n@@ -136,0 +154,65 @@\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathOldToYoungSmall() {\n+        for (int i = 0; i < NUM_REFERENCES_SMALL; i++) {\n+            youngArraySmall[indicesSmall[NUM_REFERENCES_SMALL - i - 1]] = realRef;\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathYoungToOldSmall() {\n+        for (int i = 0; i < NUM_REFERENCES_SMALL; i++) {\n+            theArraySmall[indicesSmall[NUM_REFERENCES_SMALL - i - 1]] = youngRef;\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathYoungToYoungSmall() {\n+        for (int i = 0; i < NUM_REFERENCES_SMALL; i++) {\n+            youngArraySmall[indicesSmall[NUM_REFERENCES_SMALL - i - 1]] = youngRef;\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathNullYoungSmall() {\n+        for (int i = 0; i < NUM_REFERENCES_SMALL; i++) {\n+            youngArraySmall[indicesSmall[NUM_REFERENCES_SMALL - i - 1]] = nullRef;\n+        }\n+    }\n+\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathOldToYoungLarge() {\n+        for (int i = 0; i < NUM_REFERENCES_LARGE; i++) {\n+            youngArrayLarge[indicesLarge[NUM_REFERENCES_LARGE - i - 1]] = realRef;\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathYoungToYoungLarge() {\n+        for (int i = 0; i < NUM_REFERENCES_LARGE; i++) {\n+            youngArrayLarge[indicesLarge[NUM_REFERENCES_LARGE - i - 1]] = youngRef;\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathNullYoungLarge() {\n+        for (int i = 0; i < NUM_REFERENCES_LARGE; i++) {\n+            youngArrayLarge[indicesLarge[NUM_REFERENCES_LARGE - i - 1]] = nullRef;\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void testArrayWriteBarrierFastPathYoungToOldLarge() {\n+        for (int i = 0; i < NUM_REFERENCES_LARGE; i++) {\n+            theArrayLarge[indicesLarge[NUM_REFERENCES_LARGE - i - 1]] = youngRef;\n+        }\n+    }\n+\n@@ -169,0 +252,9 @@\n+    @Benchmark()\n+    public void testFieldWriteBarrierFastPathYoungRef() {\n+        \/\/ Shuffle everything around\n+        this.tail.append(this.youngHead);\n+        this.head.clear();\n+        this.head.append(this.youngTail);\n+        this.tail.clear();\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/WriteBarrier.java","additions":94,"deletions":2,"binary":false,"changes":96,"status":"modified"}]}