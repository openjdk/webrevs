{"files":[{"patch":"@@ -57,1 +57,1 @@\n-        winEnableUTF8 = false;\n+        winEnglishOutput = false;\n@@ -94,1 +94,1 @@\n-    public Executor setWinEnableUTF8(boolean value) {\n+    public Executor setWinRunWithEnglishOutput(boolean value) {\n@@ -97,1 +97,1 @@\n-                    \"setWinEnableUTF8 is only valid on Windows platform\");\n+                    \"setWinRunWithEnglishOutput is only valid on Windows platform\");\n@@ -99,1 +99,1 @@\n-        winEnableUTF8 = value;\n+        winEnglishOutput = value;\n@@ -220,0 +220,5 @@\n+        if (toolProvider != null && winEnglishOutput) {\n+            throw new IllegalArgumentException(\n+                    \"Can't change locale when using tool provider\");\n+        }\n+\n@@ -337,8 +342,3 @@\n-    private Result runExecutable() throws IOException, InterruptedException {\n-        List<String> command = new ArrayList<>();\n-\n-        if (winEnableUTF8) {\n-            \/\/ run chcp to change the code page to UTF-8 on Windows\n-            command.add(\"cmd.exe\");\n-            command.add(\"\/c\");\n-            command.add(\"chcp 65001 && \" + printCommandLine(executablePath().toString(), args));\n+    private List<String> prefixCommandLineArgs() {\n+        if (winEnglishOutput) {\n+            return List.of(\"cmd.exe\", \"\/c\", \"chcp\", \"437\", \">nul\", \"2>&1\", \"&&\");\n@@ -346,2 +346,1 @@\n-            command.add(executablePath().toString());\n-            command.addAll(args);\n+            return List.of();\n@@ -349,0 +348,1 @@\n+    }\n@@ -350,0 +350,5 @@\n+    private Result runExecutable() throws IOException, InterruptedException {\n+        List<String> command = new ArrayList<>();\n+        command.addAll(prefixCommandLineArgs());\n+        command.add(executablePath().toString());\n+        command.addAll(args);\n@@ -479,2 +484,2 @@\n-        String chcpCmdLine = winEnableUTF8 ? \"cmd.exe \/c chcp 65001 && \" : \"\";\n-        int chcpTokenNum = chcpCmdLine.isEmpty() ? 0 : chcpCmdLine.split(\" \").length;\n+        var cmdline = Stream.of(prefixCommandLineArgs(), List.of(exec), args).flatMap(\n+                List::stream).toList();\n@@ -482,2 +487,1 @@\n-        return String.format(format, chcpCmdLine + printCommandLine(exec, args),\n-                chcpTokenNum + args.size() + 1);\n+        return String.format(format, printCommandLine(cmdline), cmdline.size() + 1);\n@@ -486,1 +490,1 @@\n-    private static String printCommandLine(String executable, List<String> args) {\n+    private static String printCommandLine(List<String> cmdline) {\n@@ -490,1 +494,1 @@\n-        return Stream.concat(Stream.of(executable), args.stream()).map(\n+        return cmdline.stream().map(\n@@ -504,1 +508,1 @@\n-    private boolean winEnableUTF8;\n+    private boolean winEnglishOutput;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Executor.java","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-        \/\/ Get the list of PIDs and PPIDs of app launcher processes. Run setWinEnableUTF8(true) for JDK-8344275.\n+        \/\/ Get the list of PIDs and PPIDs of app launcher processes. Run setWinRunWithEnglishOutput(true) for JDK-8344275.\n@@ -260,2 +260,2 @@\n-                setWinEnableUTF8(true).executeAndGetOutput();\n-        if (\"No Instance(s) Available.\".equals(output.get(1).trim())) {\n+                setWinRunWithEnglishOutput(true).executeAndGetOutput();\n+        if (\"No Instance(s) Available.\".equals(output.getFirst().trim())) {\n@@ -265,1 +265,1 @@\n-        String[] headers = Stream.of(output.get(1).split(\"\\\\s+\", 2)).map(\n+        String[] headers = Stream.of(output.getFirst().split(\"\\\\s+\", 2)).map(\n@@ -279,1 +279,1 @@\n-        List<long[]> processes = output.stream().skip(2).map(line -> {\n+        List<long[]> processes = output.stream().skip(1).map(line -> {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}