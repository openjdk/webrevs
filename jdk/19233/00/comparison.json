{"files":[{"patch":"@@ -1471,0 +1471,1 @@\n+  if (!tst->is_Con())  record_for_igvn(iff);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8332245\n+ * @summary fusion of heap stable test causes GetAndSet node to be removed\n+ *\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestBackToBackMustBeNotNull\n+ *\/\n+\n+package compiler.c2.irTests;\n+import jdk.internal.misc.Unsafe;\n+import java.lang.reflect.Field;\n+import compiler.lib.ir_framework.*;\n+\n+\n+public class TestBackToBackMustBeNotNull {\n+    static final jdk.internal.misc.Unsafe UNSAFE = Unsafe.getUnsafe();\n+    static final long F_OFFSET;\n+    private static A fieldA = new A();\n+\n+    static {\n+        try {\n+            Field fField = A.class.getDeclaredField(\"f\");\n+            F_OFFSET = UNSAFE.objectFieldOffset(fField);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static public void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules\", \"java.base\", \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+    }\n+\n+    @Test\n+    @IR(phase = { CompilePhase.ITER_GVN1 }, counts = { IRNode.IF, \"1\" })\n+    private static void test1() {\n+        final Object o1 = UNSAFE.getReference(fieldA, F_OFFSET);\n+        final Object o2 = UNSAFE.getReference(fieldA, F_OFFSET);\n+        notInlined(o1, o2);\n+    }\n+\n+    @DontInline\n+    private static void notInlined(Object o1, Object o2) {\n+\n+    }\n+\n+    static class A {\n+        Object f;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestBackToBackMustBeNotNull.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}