{"files":[{"patch":"@@ -261,1 +261,1 @@\n-int IdealLoopTree::find_invariant(Node* n, PhaseIdealLoop *phase) {\n+int IdealLoopTree::find_invariant(Node* n, PhaseIdealLoop* phase) {\n@@ -269,0 +269,19 @@\n+\/\/---------------------is_associative_cmp-------------------------\n+\/\/ Return TRUE if \"n\" is an associative cmp node. A cmp node is\n+\/\/ associative if it is only used for equals or not-equals\n+\/\/ comparisons of integers or longs. We cannot reassociate\n+\/\/ non-equality comparisons due to possibility of overflow.\n+bool IdealLoopTree::is_associative_cmp(Node* n) {\n+  if (n->Opcode() != Op_CmpI && n->Opcode() != Op_CmpL) {\n+    return false;\n+  }\n+  for (DUIterator i = n->outs(); n->has_out(i); i++) {\n+    BoolNode* boolOut = n->out(i)->isa_Bool();\n+    if (boolOut == nullptr || !(boolOut->_test._test == BoolTest::eq ||\n+                                boolOut->_test._test == BoolTest::ne)) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -277,1 +296,1 @@\n-    if (base_op == Op_AddI || base_op == Op_SubI) {\n+    if (base_op == Op_AddI || base_op == Op_SubI || base_op == Op_CmpI) {\n@@ -280,1 +299,1 @@\n-    if (base_op == Op_AddL || base_op == Op_SubL) {\n+    if (base_op == Op_AddL || base_op == Op_SubL || base_op == Op_CmpL) {\n@@ -291,1 +310,2 @@\n-        || op == Op_XorI || op == Op_XorL;\n+        || op == Op_XorI || op == Op_XorL\n+        || is_associative_cmp(n);\n@@ -295,1 +315,1 @@\n-\/\/---------------------reassociate_add_sub------------------------\n+\/\/-------------------reassociate_add_sub_cmp---------------------\n@@ -311,2 +331,6 @@\n-Node* IdealLoopTree::reassociate_add_sub(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop *phase) {\n-  assert(n1->is_Add() || n1->is_Sub(), \"Target node should be add or subtract\");\n+\/\/ Apply the same transformations to == and !=\n+\/\/ inv1 == (x + inv2) => ( inv1 - inv2 ) == x\n+\/\/ inv1 == (x - inv2) => ( inv1 + inv2 ) == x\n+\/\/ inv1 == (inv2 - x) => (-inv1 + inv2 ) == x\n+\/\/\n+Node* IdealLoopTree::reassociate_add_sub_cmp(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop* phase) {\n@@ -314,0 +338,5 @@\n+  bool n1_is_sub = n1->is_Sub() && !n1->is_Cmp();\n+  bool n1_is_cmp = n1->is_Cmp();\n+  bool n2_is_sub = n2->is_Sub();\n+  assert(n1->is_Add() || n1_is_sub || n1_is_cmp, \"Target node should be add, subtract, or compare\");\n+  assert(n2->is_Add() || (n2_is_sub && !n2->is_Cmp()), \"Child node should be add or subtract\");\n@@ -318,4 +347,8 @@\n-  bool neg_x    = n2->is_Sub() && inv2_idx == 1;\n-  bool neg_inv2 = n2->is_Sub() && inv2_idx == 2;\n-  bool neg_inv1 = n1->is_Sub() && inv1_idx == 2;\n-  if (n1->is_Sub() && inv1_idx == 1) {\n+  \/\/ Determine whether x, inv1, or inv2 should be negative in the transformed\n+  \/\/ expression\n+  bool neg_x = n2_is_sub && inv2_idx == 1;\n+  bool neg_inv2 =\n+      (n2_is_sub && !n1_is_cmp && inv2_idx == 2) || (n1_is_cmp && !n2_is_sub);\n+  bool neg_inv1 =\n+      (n1_is_sub && inv1_idx == 2) || (n1_is_cmp && inv2_idx == 1 && n2_is_sub);\n+  if (n1_is_sub && inv1_idx == 1) {\n@@ -326,1 +359,1 @@\n-  bool is_int = n1->bottom_type()->isa_int() != nullptr;\n+  bool is_int = n2->bottom_type()->isa_int() != nullptr;\n@@ -352,0 +385,3 @@\n+    if (n1_is_cmp) {\n+      return new CmpINode(x, inv);\n+    }\n@@ -364,0 +400,3 @@\n+    if (n1_is_cmp) {\n+      return new CmpLNode(x, inv);\n+    }\n@@ -374,2 +413,2 @@\n-\/\/ and\/or\/xor operators.\n-\/\/ For add\/sub expressions: see \"reassociate_add_sub\"\n+\/\/ and\/or\/xor\/cmp operators.\n+\/\/ For add\/sub\/cmp expressions: see \"reassociate_add_sub_cmp\"\n@@ -402,1 +441,3 @@\n-      result = reassociate_add_sub(n1, inv1_idx, inv2_idx, phase);\n+    case Op_CmpI:\n+    case Op_CmpL:\n+      result = reassociate_add_sub_cmp(n1, inv1_idx, inv2_idx, phase);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":56,"deletions":15,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -741,2 +741,2 @@\n-  \/\/ Reassociate invariant add and subtract expressions.\n-  Node* reassociate_add_sub(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop *phase);\n+  \/\/ Reassociate invariant add, subtract, and compare expressions.\n+  Node* reassociate_add_sub_cmp(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop *phase);\n@@ -748,0 +748,2 @@\n+  \/\/ Return TRUE if \"n\" is an associative cmp node.\n+  bool is_associative_cmp(Node* n);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,525 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.loopopts;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n+\n+\/*\n+ * @test\n+ * @bug 8323220\n+ * @summary Test loop invariant code motion of add\/sub through reassociation\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.loopopts.InvariantCodeMotionReassociateAddSub\n+ *\/\n+public class InvariantCodeMotionReassociateAddSub {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+    private int size;\n+    private int inv1;\n+    private int inv2;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @DontInline\n+    private int blackhole(int i) { return i; }\n+    @DontInline\n+    private int blackhole(long i) { return (int)i; }\n+\n+    @Setup\n+    public Object[] setup(SetupInfo info) {\n+        int count = info.invocationCounter();\n+        size = count + 500;\n+        inv1 = count;\n+        if (RANDOM.nextInt() % 7 == 0) {\n+            \/\/ Setup inputs to be equals sometimes to avoid uncommon traps\n+            inv2 = inv1;\n+        } else {\n+            inv2 = count * 2;\n+        }\n+        return new Object[] { inv1, inv2, size };\n+    }\n+\n+    public void fail(int returnValue) {\n+        throw new RuntimeException(\"Illegal reassociation: returnValue=\" + returnValue + \", inv1=\" + inv1\n+                + \", inv2=\" + inv2 + \", size=\" + size);\n+    }\n+\n+    public void check(int returnValue, int expected) {\n+        if (returnValue != expected) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    public void checkAdd(int returnValue) {\n+        check(returnValue, inv1 + inv2 + size - 1);\n+    }\n+\n+    public void checkSubAdd(int returnValue) {\n+        check(returnValue, inv1 - inv2 + size - 1);\n+    }\n+\n+    public void checkNegSubAdd(int returnValue) {\n+        check(returnValue, -inv1 - inv2 + size - 1);\n+    }\n+\n+    public void checkAddSub(int returnValue) {\n+        check(returnValue, inv1 + inv2 - (size - 1));\n+    }\n+\n+    public void checkSubSub(int returnValue) {\n+        check(returnValue, inv1 - inv2 - (size - 1));\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    public int addInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + i + inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addInt\")\n+    public void checkAddInt(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"2\"})\n+    public int addLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + i + inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addLong\")\n+    public void checkAddLong(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    public int addInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addInt2\")\n+    public void checkAddInt2(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"2\"})\n+    public int addLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addLong2\")\n+    public void checkAddLong2(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int minusAddInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 + (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddInt\")\n+    public void checkSubAddInt(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int minusAddLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 + (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddLong\")\n+    public void checkSubAddLong(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int minusAddInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 - (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddInt2\")\n+    public void checkSubAddInt2(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int minusAddLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 - (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddLong2\")\n+    public void checkSubAddLong2(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int minusAddInt3(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(i - inv2 + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddInt3\")\n+    public void checkSubAddInt3(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int minusAddLong3(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(i - inv2 + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddLong3\")\n+    public void checkSubAddLong3(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int negAddInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv2 + inv1 + i`\n+            result = blackhole(i + inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negAddInt\")\n+    public void checkNegAddInt(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int negAddLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv2 + inv1 + i`\n+            result = blackhole(i + inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negAddLong\")\n+    public void checkNegAddLong(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"2\"})\n+    public int negSubAddInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv1 - inv2 + i`\n+            result = blackhole(i - inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negSubAddInt\")\n+    public void checkNegSubAddInt(int returnValue) {\n+        checkNegSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"2\"})\n+    public int negSubAddLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv1 - inv2 + i`\n+            result = blackhole(i - inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negSubAddLong\")\n+    public void checkNegSubAddLong(int returnValue) {\n+        checkNegSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int addSubInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 + (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubInt\")\n+    public void checkAddSubInt(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int addSubLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 + (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubLong\")\n+    public void checkAddSubLong(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int addSubInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 - (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubInt2\")\n+    public void checkAddSubInt2(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int addSubLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 - (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubLong2\")\n+    public void checkAddSubLong2(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int addSubInt3(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv2 - i + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubInt3\")\n+    public void checkAddSubInt3(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int addSubLong3(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv2 - i + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubLong3\")\n+    public void checkAddSubLong3(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"2\"})\n+    public int subSubInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubInt\")\n+    public void checkSubSubInt(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.ADD_L})\n+    @IR(counts = {IRNode.SUB_L, \"2\"})\n+    public int subSubLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubLong\")\n+    public void checkSubSubLong(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"2\"})\n+    public int subSubInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - i - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubInt2\")\n+    public void checkSubSubInt2(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.ADD_L})\n+    @IR(counts = {IRNode.SUB_L, \"2\"})\n+    public int subSubLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - i - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubLong2\")\n+    public void checkSubSubLong2(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateAddSub.java","additions":525,"deletions":0,"binary":false,"changes":525,"status":"added"},{"patch":"@@ -0,0 +1,412 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.loopopts;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n+\n+\/*\n+ * @test\n+ * @bug 8323220\n+ * @summary Test loop invariant code motion for cmp nodes through reassociation\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.loopopts.InvariantCodeMotionReassociateCmp\n+ *\/\n+public class InvariantCodeMotionReassociateCmp {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+    private int size;\n+    private int inv1;\n+    private int inv2;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @DontInline\n+    private void blackhole() {}\n+\n+    @Setup\n+    public Object[] setup(SetupInfo info) {\n+        int count = info.invocationCounter();\n+        size = count + 500;\n+        inv1 = count;\n+        if (RANDOM.nextInt() % 7 == 0) {\n+            \/\/ Setup inputs to be equals sometimes to avoid uncommon traps\n+            inv2 = inv1;\n+        } else {\n+            inv2 = count * 2;\n+        }\n+        return new Object[] { inv1, inv2, size };\n+    }\n+\n+    public void fail(int returnValue) {\n+        throw new RuntimeException(\"Illegal reassociation: returnValue=\" + returnValue + \", inv1=\" + inv1\n+                + \", inv2=\" + inv2 + \", size=\" + size);\n+    }\n+\n+    public void checkEq(int returnValue) {\n+        int invDiff = inv2 - inv1;\n+        if ((invDiff < size && returnValue != invDiff) || (invDiff >= size && returnValue != size)) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    public void checkNe(int returnValue) {\n+        int invDiff = inv2 - inv1;\n+        if ((invDiff != 0 && returnValue != 0) || (invDiff == 0 && returnValue != 1)) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int equalsAddInt(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv2 - inv1 == i`\n+            if (inv1 + i == inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsAddInt\")\n+    public void checkEqualsAddInt(int returnValue) {\n+        checkEq(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int equalsAddLong(long inv1, long inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv2 - inv1 == i`\n+            if (inv1 + i == inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsAddLong\")\n+    public void checkEqualsAddLong(int returnValue) {\n+        checkEq(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int equalsInvariantSubVariantInt(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv1 - inv2 == i`\n+            if (inv2 - i == inv1) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsInvariantSubVariantInt\")\n+    public void checkEqualsInvariantSubVariantInt(int returnValue) {\n+        checkEq(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int equalsInvariantSubVariantLong(long inv1, long inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv2 - inv1 == i`\n+            if (inv2 - i == inv1) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsInvariantSubVariantLong\")\n+    public void checkEqualsInvariantSubVariantLong(int returnValue) {\n+        checkEq(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int equalsVariantSubInvariantInt(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv2 - inv1 == i`\n+            if (i - inv2 == -inv1) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsVariantSubInvariantInt\")\n+    public void checkEqualsVariantSubInvariantInt(int returnValue) {\n+        checkEq(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int equalsVariantSubInvariantLong(long inv1, long inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv2 - inv1 == i`\n+            if (i - inv2 == -inv1) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsVariantSubInvariantLong\")\n+    public void checkEqualsVariantSubInvariantLong(int returnValue) {\n+        checkEq(returnValue);\n+    }\n+\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int notEqualsAddInt(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv1 - inv2 != i`\n+            if (inv1 + i != inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsAddInt\")\n+    public void checkNotEqualsAddInt(int returnValue) {\n+        checkNe(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int notEqualsAddLong(long inv1, long inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv1 - inv2 != i`\n+            if (inv1 + i != inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsAddLong\")\n+    public void checkNotEqualsAddLong(int returnValue) {\n+        checkNe(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int notEqualsInvariantSubVariantInt(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv1 - inv2 != i`\n+            if (inv1 - i != inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsInvariantSubVariantInt\")\n+    public void checkNotEqualsInvariantSubVariantInt(int returnValue) {\n+        checkNe(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int notEqualsInvariantSubVariantLong(long inv1, long inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv1 - inv2 != i`\n+            if (inv1 - i != inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsInvariantSubVariantLong\")\n+    public void checkNotEqualsInvariantSubVariantLong(int returnValue) {\n+        checkNe(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int notEqualsVariantSubInvariantInt(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv2 - inv1 != i`\n+            if (i - inv2 != -inv1) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsVariantSubInvariantInt\")\n+    public void checkNotEqualsVariantSubInvariantInt(int returnValue) {\n+        checkNe(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int notEqualsVariantSubInvariantLong(long inv1, long inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            \/\/ Reassociate to `inv1 - inv1 != i`\n+            if (i - inv2 != -inv1) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsVariantSubInvariantLong\")\n+    public void checkNotEqualsVariantSubInvariantLong(int returnValue) {\n+        checkNe(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int ltDontReassociate(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            if (inv1 + i < inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"ltDontReassociate\")\n+    public void checkLtDontReassociate(int returnValue) {\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum >= inv2) || (returnValue > size && sum < inv2)) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int leDontReassociate(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            if (inv1 + i <= inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"leDontReassociate\")\n+    public void checkLeDontReassociate(int returnValue) {\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum > inv2) || (returnValue > size && sum <= inv2)) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int gtDontReassociate(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            if (inv1 + i > inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"gtDontReassociate\")\n+    public void checkGtDontReassociate(int returnValue) {\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum <= inv2) || (returnValue > size && sum > inv2)) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int geDontReassociate(int inv1, int inv2, int size) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            blackhole();\n+            if (inv1 + i >= inv2) {\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"geDontReassociate\")\n+    public void checkGeDontReassociate(int returnValue) {\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum < inv2) || (returnValue > size && sum >= inv2)) {\n+            fail(returnValue);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateCmp.java","additions":412,"deletions":0,"binary":false,"changes":412,"status":"added"}]}