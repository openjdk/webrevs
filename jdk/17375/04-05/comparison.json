{"files":[{"patch":"@@ -339,1 +339,1 @@\n-  assert(n2->is_Add() || n2_is_sub, \"Child node should be add or subtract\");\n+  assert(n2->is_Add() || (n2_is_sub && !n2->is_Cmp()), \"Child node should be add or subtract\");\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-  \/\/ Reassociate invariant add and subtract expressions.\n+  \/\/ Reassociate invariant add, subtract, and compare expressions.\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @bug 8250808\n- * @summary Test loop invariant code motion through reassociation\n+ * @bug 8323220\n+ * @summary Test loop invariant code motion for cmp nodes through reassociation\n@@ -192,1 +192,1 @@\n-    public void leDontReassociate(int inv1, int inv2) {\n+    public int leDontReassociate(int inv1, int inv2) {\n@@ -197,0 +197,1 @@\n+                break;\n@@ -199,0 +200,8 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"leDontReassociate\")\n+    public void checkLeDontReassociate(int returnValue, TestInfo info) {\n+        if (returnValue != 0) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n@@ -204,1 +213,1 @@\n-    public void gtDontReassociate(int inv1, int inv2) {\n+    public int gtDontReassociate(int inv1, int inv2) {\n@@ -212,1 +221,8 @@\n-        Asserts.assertEQ(i, 0, \"illegal reassociation of a + b > c\");\n+        return i;\n+    }\n+\n+    @Check(test = \"gtDontReassociate\")\n+    public void checkGtDontReassociate(int returnValue, TestInfo info) {\n+        if (returnValue != 0) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n@@ -218,1 +234,1 @@\n-    public void geDontReassociate(int inv1, int inv2) {\n+    public int geDontReassociate(int inv1, int inv2) {\n@@ -226,1 +242,1 @@\n-        Asserts.assertEQ(i, 0, \"illegal reassociation of a + b >= c\");\n+        return i;\n@@ -228,0 +244,8 @@\n+\n+    @Check(test = \"geDontReassociate\")\n+    public void checkGeDontReassociate(int returnValue, TestInfo info) {\n+        if (returnValue != 0) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateCmp.java","additions":31,"deletions":7,"binary":false,"changes":38,"status":"modified"}]}