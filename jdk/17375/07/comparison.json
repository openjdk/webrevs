{"files":[{"patch":"@@ -260,1 +260,1 @@\n-int IdealLoopTree::find_invariant(Node* n, PhaseIdealLoop *phase) {\n+int IdealLoopTree::find_invariant(Node* n, PhaseIdealLoop* phase) {\n@@ -268,0 +268,19 @@\n+\/\/---------------------is_associative_cmp-------------------------\n+\/\/ Return TRUE if \"n\" is an associative cmp node. A cmp node is\n+\/\/ associative if it is only used for equals or not-equals\n+\/\/ comparisons of integers or longs. We cannot reassociate\n+\/\/ non-equality comparisons due to possibility of overflow.\n+bool IdealLoopTree::is_associative_cmp(Node* n) {\n+  if (n->Opcode() != Op_CmpI && n->Opcode() != Op_CmpL) {\n+    return false;\n+  }\n+  for (DUIterator i = n->outs(); n->has_out(i); i++) {\n+    BoolNode* boolOut = n->out(i)->isa_Bool();\n+    if (boolOut == nullptr || !(boolOut->_test._test == BoolTest::eq ||\n+                                boolOut->_test._test == BoolTest::ne)) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -276,1 +295,1 @@\n-    if (base_op == Op_AddI || base_op == Op_SubI) {\n+    if (base_op == Op_AddI || base_op == Op_SubI || base_op == Op_CmpI) {\n@@ -279,1 +298,1 @@\n-    if (base_op == Op_AddL || base_op == Op_SubL) {\n+    if (base_op == Op_AddL || base_op == Op_SubL || base_op == Op_CmpL) {\n@@ -290,1 +309,2 @@\n-        || op == Op_XorI || op == Op_XorL;\n+        || op == Op_XorI || op == Op_XorL\n+        || is_associative_cmp(n);\n@@ -294,1 +314,1 @@\n-\/\/---------------------reassociate_add_sub------------------------\n+\/\/-------------------reassociate_add_sub_cmp---------------------\n@@ -310,2 +330,6 @@\n-Node* IdealLoopTree::reassociate_add_sub(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop *phase) {\n-  assert(n1->is_Add() || n1->is_Sub(), \"Target node should be add or subtract\");\n+\/\/ Apply the same transformations to == and !=\n+\/\/ inv1 == (x + inv2) => ( inv1 - inv2 ) == x\n+\/\/ inv1 == (x - inv2) => ( inv1 + inv2 ) == x\n+\/\/ inv1 == (inv2 - x) => (-inv1 + inv2 ) == x\n+\/\/\n+Node* IdealLoopTree::reassociate_add_sub_cmp(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop* phase) {\n@@ -313,0 +337,5 @@\n+  bool n1_is_sub = n1->is_Sub() && !n1->is_Cmp();\n+  bool n1_is_cmp = n1->is_Cmp();\n+  bool n2_is_sub = n2->is_Sub();\n+  assert(n1->is_Add() || n1_is_sub || n1_is_cmp, \"Target node should be add, subtract, or compare\");\n+  assert(n2->is_Add() || (n2_is_sub && !n2->is_Cmp()), \"Child node should be add or subtract\");\n@@ -317,4 +346,8 @@\n-  bool neg_x    = n2->is_Sub() && inv2_idx == 1;\n-  bool neg_inv2 = n2->is_Sub() && inv2_idx == 2;\n-  bool neg_inv1 = n1->is_Sub() && inv1_idx == 2;\n-  if (n1->is_Sub() && inv1_idx == 1) {\n+  \/\/ Determine whether x, inv1, or inv2 should be negative in the transformed\n+  \/\/ expression\n+  bool neg_x = n2_is_sub && inv2_idx == 1;\n+  bool neg_inv2 =\n+      (n2_is_sub && !n1_is_cmp && inv2_idx == 2) || (n1_is_cmp && !n2_is_sub);\n+  bool neg_inv1 =\n+      (n1_is_sub && inv1_idx == 2) || (n1_is_cmp && inv2_idx == 1 && n2_is_sub);\n+  if (n1_is_sub && inv1_idx == 1) {\n@@ -325,1 +358,1 @@\n-  bool is_int = n1->bottom_type()->isa_int() != nullptr;\n+  bool is_int = n2->bottom_type()->isa_int() != nullptr;\n@@ -351,0 +384,3 @@\n+    if (n1_is_cmp) {\n+      return new CmpINode(x, inv);\n+    }\n@@ -363,0 +399,3 @@\n+    if (n1_is_cmp) {\n+      return new CmpLNode(x, inv);\n+    }\n@@ -373,2 +412,2 @@\n-\/\/ and\/or\/xor operators.\n-\/\/ For add\/sub expressions: see \"reassociate_add_sub\"\n+\/\/ and\/or\/xor\/cmp operators.\n+\/\/ For add\/sub\/cmp expressions: see \"reassociate_add_sub_cmp\"\n@@ -401,1 +440,3 @@\n-      result = reassociate_add_sub(n1, inv1_idx, inv2_idx, phase);\n+    case Op_CmpI:\n+    case Op_CmpL:\n+      result = reassociate_add_sub_cmp(n1, inv1_idx, inv2_idx, phase);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":56,"deletions":15,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -745,2 +745,2 @@\n-  \/\/ Reassociate invariant add and subtract expressions.\n-  Node* reassociate_add_sub(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop *phase);\n+  \/\/ Reassociate invariant add, subtract, and compare expressions.\n+  Node* reassociate_add_sub_cmp(Node* n1, int inv1_idx, int inv2_idx, PhaseIdealLoop *phase);\n@@ -752,0 +752,2 @@\n+  \/\/ Return TRUE if \"n\" is an associative cmp node.\n+  bool is_associative_cmp(Node* n);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,292 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.loopopts;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8323220\n+ * @summary Test loop invariant code motion for cmp nodes through reassociation\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.loopopts.InvariantCodeMotionReassociateCmp\n+ *\/\n+public class InvariantCodeMotionReassociateCmp {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @DontInline\n+    private void blackhole() {}\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public void equalsAddInt(int inv1, int inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv2 - inv1 == i`\n+            if (inv1 + i == inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public void equalsAddLong(long inv1, long inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv2 - inv1 == i`\n+            if (inv1 + i == inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42, Argument.DEFAULT})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int equalsInvariantSubVariantInt(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 == i`\n+            if (inv1 - i == inv2) {\n+                blackhole();\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsInvariantSubVariantInt\")\n+    public void checkEqualsInvariantSubVariantInt(int returnValue) {\n+        if (returnValue != 42) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42, Argument.DEFAULT})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int equalsInvariantSubVariantLong(long inv1, long inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 == i`\n+            if (inv1 - i == inv2) {\n+                blackhole();\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsInvariantSubVariantLong\")\n+    public void checkEqualsInvariantSubVariantLong(int returnValue) {\n+        if (returnValue != 42) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    public void equalsVariantSubInvariantInt(int inv1, int inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 == i`\n+            if (i - inv1 == inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    public void equalsVariantSubInvariantLong(long inv1, long inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 == i`\n+            if (i - inv1 == inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public void notEqualsAddInt(int inv1, int inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 != i`\n+            if (inv1 + i != inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public void notEqualsAddLong(long inv1, long inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 != i`\n+            if (inv1 + i != inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int notEqualsInvariantSubVariantInt(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            \/\/ Reassociate to `inv2 - inv1 != i`\n+            if (inv1 - i != inv2) {\n+                blackhole();\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsInvariantSubVariantInt\")\n+    public void checkNotEqualsInvariantSubVariantInt(int returnValue) {\n+        if (returnValue != 1) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int notEqualsInvariantSubVariantLong(long inv1, long inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            \/\/ Reassociate to `inv2 - inv1 != i`\n+            if (inv1 - i != inv2) {\n+                blackhole();\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsInvariantSubVariantLong\")\n+    public void checkNotEqualsInvariantSubVariantLong(int returnValue) {\n+        if (returnValue != 1) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    public void notEqualsVariantSubInvariantInt(int inv1, int inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 != i`\n+            if (i - inv1 != inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    public void notEqualsVariantSubInvariantLong(long inv1, long inv2) {\n+        for (int i = 0; i < 500; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 != i`\n+            if (i - inv1 != inv2) {\n+                blackhole();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int leDontReassociate(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            if (inv1 + i <= inv2) {\n+                blackhole();\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"leDontReassociate\")\n+    public void checkLeDontReassociate(int returnValue) {\n+        if (returnValue != 0) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.DEFAULT, Argument.NUMBER_42})\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int gtDontReassociate(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            if (inv1 + i > inv2) {\n+                blackhole();\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"gtDontReassociate\")\n+    public void checkGtDontReassociate(int returnValue) {\n+        if (returnValue != 43) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.DEFAULT, Argument.NUMBER_42})\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int geDontReassociate(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n+            if (inv1 + i >= inv2) {\n+                blackhole();\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"geDontReassociate\")\n+    public void checkGeDontReassociate(int returnValue) {\n+        if (returnValue != 42) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateCmp.java","additions":292,"deletions":0,"binary":false,"changes":292,"status":"added"}]}