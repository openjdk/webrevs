{"files":[{"patch":"@@ -334,1 +334,0 @@\n-  assert(n1->is_Add() || n1->is_Sub() || n1->is_Cmp(), \"Target node should be add, subtract, or compare\");\n@@ -336,0 +335,5 @@\n+  bool n1_is_sub = n1->is_Sub() && !n1->is_Cmp();\n+  bool n1_is_cmp = n1->is_Cmp();\n+  bool n2_is_sub = n2->is_Sub();\n+  assert(n1->is_Add() || n1_is_sub || n1_is_cmp, \"Target node should be add, subtract, or compare\");\n+  assert(n2->is_Add() || n2_is_sub, \"Child node should be add or subtract\");\n@@ -340,9 +344,8 @@\n-  \/\/ Follow the comments for the transformations at the top of the function to\n-  \/\/ determine whether x, inv1, or inv2 should be negative. Explicit checks that\n-  \/\/ Sub nodes are not Cmp nodes are required because Cmp nodes are Sub nodes.\n-  bool neg_x    = n2->is_Sub() && !n2->is_Cmp() && inv2_idx == 1;\n-  bool neg_inv2 = (n2->is_Sub() && !n1->is_Cmp() && inv2_idx == 2) ||\n-                  (n1->is_Cmp() && n2->is_Add());\n-  bool neg_inv1 = (n1->is_Sub() && !n1->is_Cmp() && inv1_idx == 2) ||\n-                  (n1->is_Cmp() && inv2_idx == 1 && n2->is_Sub());\n-  if (n1->is_Sub() && !n1->is_Cmp() && inv1_idx == 1) {\n+  \/\/ Determine whether x, inv1, or inv2 should be negative in the transformed\n+  \/\/ expression\n+  bool neg_x = n2_is_sub && inv2_idx == 1;\n+  bool neg_inv2 =\n+      (n2_is_sub && !n1_is_cmp && inv2_idx == 2) || (n1_is_cmp && !n2_is_sub);\n+  bool neg_inv1 =\n+      (n1_is_sub && inv1_idx == 2) || (n1_is_cmp && inv2_idx == 1 && n2_is_sub);\n+  if (n1_is_sub && inv1_idx == 1) {\n@@ -379,1 +382,1 @@\n-    if (n1->is_Cmp()) {\n+    if (n1_is_cmp) {\n@@ -394,1 +397,1 @@\n-    if (n1->is_Cmp()) {\n+    if (n1_is_cmp) {\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.test.lib.Asserts;\n@@ -45,1 +46,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -57,1 +58,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -117,1 +118,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -129,1 +130,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -165,1 +166,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -177,1 +178,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -192,1 +193,2 @@\n-        for (int i = 0; i < 500; ++i) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -200,1 +202,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.NUMBER_42, Argument.MIN})\n@@ -203,1 +205,2 @@\n-        for (int i = 0; i < 500; ++i) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -206,0 +209,1 @@\n+                break;\n@@ -208,0 +212,1 @@\n+        Asserts.assertEQ(i, 0, \"illegal reassociation of a + b > c\");\n@@ -211,1 +216,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.NUMBER_42, Argument.MIN})\n@@ -214,1 +219,2 @@\n-        for (int i = 0; i < 500; ++i) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -217,0 +223,1 @@\n+                break;\n@@ -219,0 +226,1 @@\n+        Asserts.assertEQ(i, 0, \"illegal reassociation of a + b >= c\");\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateCmp.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"}]}