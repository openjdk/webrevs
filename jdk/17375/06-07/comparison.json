{"files":[{"patch":"@@ -70,1 +70,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.NUMBER_42, Argument.DEFAULT})\n@@ -72,2 +72,3 @@\n-    public void equalsInvariantSubVariantInt(int inv1, int inv2) {\n-        for (int i = 0; i < 500; ++i) {\n+    public int equalsInvariantSubVariantInt(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -77,0 +78,1 @@\n+                break;\n@@ -79,0 +81,8 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsInvariantSubVariantInt\")\n+    public void checkEqualsInvariantSubVariantInt(int returnValue) {\n+        if (returnValue != 42) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n@@ -82,1 +92,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments({Argument.NUMBER_42, Argument.DEFAULT})\n@@ -84,2 +94,3 @@\n-    public void equalsInvariantSubVariantLong(long inv1, long inv2) {\n-        for (int i = 0; i < 500; ++i) {\n+    public int equalsInvariantSubVariantLong(long inv1, long inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -89,0 +100,1 @@\n+                break;\n@@ -91,0 +103,8 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsInvariantSubVariantLong\")\n+    public void checkEqualsInvariantSubVariantLong(int returnValue) {\n+        if (returnValue != 42) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n@@ -144,2 +164,3 @@\n-    public void notEqualsInvariantSubVariantInt(int inv1, int inv2) {\n-        for (int i = 0; i < 500; ++i) {\n+    public int notEqualsInvariantSubVariantInt(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -149,0 +170,1 @@\n+                break;\n@@ -151,0 +173,8 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsInvariantSubVariantInt\")\n+    public void checkNotEqualsInvariantSubVariantInt(int returnValue) {\n+        if (returnValue != 1) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n@@ -156,2 +186,3 @@\n-    public void notEqualsInvariantSubVariantLong(long inv1, long inv2) {\n-        for (int i = 0; i < 500; ++i) {\n+    public int notEqualsInvariantSubVariantLong(long inv1, long inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -161,0 +192,1 @@\n+                break;\n@@ -163,0 +195,8 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsInvariantSubVariantLong\")\n+    public void checkNotEqualsInvariantSubVariantLong(int returnValue) {\n+        if (returnValue != 1) {\n+            throw new RuntimeException(\"Illegal reassociation\");\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateCmp.java","additions":50,"deletions":10,"binary":false,"changes":60,"status":"modified"}]}