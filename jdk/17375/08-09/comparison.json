{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n@@ -37,0 +39,1 @@\n+    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -38,0 +41,2 @@\n+    private int inv1;\n+    private int inv2;\n@@ -46,0 +51,42 @@\n+    @Setup\n+    public Object[] setupEq() {\n+        inv1 = RANDOM.nextInt();\n+        inv2 = inv1 + RANDOM.nextInt(size * 2);\n+        return new Object[] { inv1, inv2 };\n+    }\n+\n+    @Setup\n+    public Object[] setupNe() {\n+        inv1 = RANDOM.nextInt();\n+        if (RANDOM.nextInt() % 7 == 0) {\n+            if (inv1 == 0) {\n+                inv1 = 1;\n+            }\n+            \/\/ Setup inputs to be equals sometimes to avoid uncommon traps\n+            inv2 = inv1;\n+        } else {\n+            inv2 = inv1 + RANDOM.nextInt(size * 2) + 1;\n+        }\n+        return new Object[] { inv1, inv2 };\n+    }\n+    public void fail(int returnValue) {\n+        throw new RuntimeException(\"Illegal reassociation: i=\" + returnValue + \", inv1=\" + inv1\n+                + \", inv2=\" + inv2);\n+    }\n+\n+    public void checkEq(int returnValue) {\n+        int invDiff = inv2 - inv1;\n+        if ((invDiff < size && returnValue != invDiff) || (invDiff\n+                    >= size && returnValue != size)) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    public void checkNe(int returnValue) {\n+        int invDiff = inv2 - inv1;\n+        if ((invDiff != 0 && returnValue != 0) || (invDiff\n+                    == 0 && returnValue != 1)) {\n+            fail(returnValue);\n+        }\n+    }\n+\n@@ -47,1 +94,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(setup = \"setupEq\")\n@@ -49,1 +96,1 @@\n-    public int[] equalsAddInt(int inv1, int inv2) {\n+    public int equalsAddInt(int inv1, int inv2) {\n@@ -58,1 +105,1 @@\n-        return new int[]{i, inv1, inv2};\n+        return i;\n@@ -62,5 +109,2 @@\n-    public void checkEqualsAddInt(int[] returnValue) {\n-        if (returnValue[0] != size && returnValue[0] + returnValue[1] != returnValue[2]) {\n-            throw new RuntimeException(\"Illegal reassociation: i=\" + returnValue[0] + \", inv1=\" + returnValue[1]\n-                    + \", inv2=\" + returnValue[2]);\n-        }\n+    public void checkEqualsAddInt(int returnValue) {\n+        checkEq(returnValue);\n@@ -70,1 +114,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(setup = \"setupEq\")\n@@ -72,1 +116,1 @@\n-    public long[] equalsAddLong(long inv1, long inv2) {\n+    public int equalsAddLong(long inv1, long inv2) {\n@@ -81,1 +125,1 @@\n-        return new long[]{i, inv1, inv2};\n+        return i;\n@@ -85,5 +129,2 @@\n-    public void checkEqualsAddLong(long[] returnValue) {\n-        if (returnValue[0] != size && returnValue[0] + returnValue[1] != returnValue[2]) {\n-            throw new RuntimeException(\"Illegal reassociation: i=\" + returnValue[0] + \", inv1=\" + returnValue[1]\n-                    + \", inv2=\" + returnValue[2]);\n-        }\n+    public void checkEqualsAddLong(int returnValue) {\n+        checkEq(returnValue);\n@@ -93,1 +134,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.DEFAULT})\n+    @Arguments(setup = \"setupEq\")\n@@ -99,1 +140,1 @@\n-            if (inv1 - i == inv2) {\n+            if (inv2 - i == inv1) {\n@@ -109,3 +150,1 @@\n-        if (returnValue != 42) {\n-            throw new RuntimeException(\"Illegal reassociation\");\n-        }\n+        checkEq(returnValue);\n@@ -115,1 +154,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.DEFAULT})\n+    @Arguments(setup = \"setupEq\")\n@@ -121,1 +160,1 @@\n-            if (inv1 - i == inv2) {\n+            if (inv2 - i == inv1) {\n@@ -131,3 +170,1 @@\n-        if (returnValue != 42) {\n-            throw new RuntimeException(\"Illegal reassociation\");\n-        }\n+        checkEq(returnValue);\n@@ -137,4 +174,5 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n-    @IR(counts = {IRNode.ADD_I, \"2\"})\n-    public void equalsVariantSubInvariantInt(int inv1, int inv2) {\n-        for (int i = 0; i < size; ++i) {\n+    @Arguments(setup = \"setupEq\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int equalsVariantSubInvariantInt(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n@@ -142,1 +180,1 @@\n-            if (i - inv1 == inv2) {\n+            if (i - inv2 == -inv1) {\n@@ -144,0 +182,1 @@\n+                break;\n@@ -146,0 +185,6 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsVariantSubInvariantInt\")\n+    public void checkEqualsVariantSubInvariantInt(int returnValue) {\n+        checkEq(returnValue);\n@@ -149,4 +194,5 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public void equalsVariantSubInvariantLong(long inv1, long inv2) {\n-        for (int i = 0; i < size; ++i) {\n+    @Arguments(setup = \"setupEq\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int equalsVariantSubInvariantLong(long inv1, long inv2) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n@@ -154,1 +200,1 @@\n-            if (i - inv1 == inv2) {\n+            if (i - inv2 == -inv1) {\n@@ -156,0 +202,1 @@\n+                break;\n@@ -158,0 +205,6 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"equalsVariantSubInvariantLong\")\n+    public void checkEqualsVariantSubInvariantLong(int returnValue) {\n+        checkEq(returnValue);\n@@ -160,0 +213,1 @@\n+\n@@ -161,1 +215,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(setup = \"setupNe\")\n@@ -163,2 +217,3 @@\n-    public void notEqualsAddInt(int inv1, int inv2) {\n-        for (int i = 0; i < 500; ++i) {\n+    public int notEqualsAddInt(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -168,0 +223,1 @@\n+                break;\n@@ -170,0 +226,6 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsAddInt\")\n+    public void checkNotEqualsAddInt(int returnValue) {\n+        checkNe(returnValue);\n@@ -173,1 +235,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(setup = \"setupNe\")\n@@ -175,2 +237,3 @@\n-    public void notEqualsAddLong(long inv1, long inv2) {\n-        for (int i = 0; i < size; ++i) {\n+    public int notEqualsAddLong(long inv1, long inv2) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n@@ -180,0 +243,1 @@\n+                break;\n@@ -182,0 +246,6 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsAddLong\")\n+    public void checkNotEqualsAddLong(int returnValue) {\n+        checkNe(returnValue);\n@@ -185,1 +255,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments(setup = \"setupNe\")\n@@ -201,3 +271,1 @@\n-        if (returnValue != 1) {\n-            throw new RuntimeException(\"Illegal reassociation\");\n-        }\n+        checkNe(returnValue);\n@@ -207,1 +275,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments(setup = \"setupNe\")\n@@ -223,3 +291,1 @@\n-        if (returnValue != 1) {\n-            throw new RuntimeException(\"Illegal reassociation\");\n-        }\n+        checkNe(returnValue);\n@@ -229,4 +295,5 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(counts = {IRNode.ADD_I, \"2\"})\n-    public void notEqualsVariantSubInvariantInt(int inv1, int inv2) {\n-        for (int i = 0; i < 500; ++i) {\n+    @Arguments(setup = \"setupNe\")\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int notEqualsVariantSubInvariantInt(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < 500; ++i) {\n@@ -234,1 +301,1 @@\n-            if (i - inv1 != inv2) {\n+            if (i - inv2 != -inv1) {\n@@ -236,0 +303,1 @@\n+                break;\n@@ -238,0 +306,6 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsVariantSubInvariantInt\")\n+    public void checkNotEqualsVariantSubInvariantInt(int returnValue) {\n+        checkNe(returnValue);\n@@ -241,4 +315,5 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public void notEqualsVariantSubInvariantLong(long inv1, long inv2) {\n-        for (int i = 0; i < size; ++i) {\n+    @Arguments(setup = \"setupNe\")\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int notEqualsVariantSubInvariantLong(long inv1, long inv2) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n@@ -246,1 +321,1 @@\n-            if (i - inv1 != inv2) {\n+            if (i - inv2 != -inv1) {\n@@ -248,0 +323,20 @@\n+                break;\n+            }\n+        }\n+        return i;\n+    }\n+\n+    @Check(test = \"notEqualsVariantSubInvariantLong\")\n+    public void checkNotEqualsVariantSubInvariantLong(int returnValue) {\n+        checkNe(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupEq\")\n+    @IR(failOn = {IRNode.SUB_I})\n+    public int ltDontReassociate(int inv1, int inv2) {\n+        int i = 0;\n+        for (; i < size; ++i) {\n+            if (inv1 + i < inv2) {\n+                blackhole();\n+                break;\n@@ -250,0 +345,9 @@\n+        return i;\n+    }\n+\n+    @Check(test = \"ltDontReassociate\")\n+    public void checkLtDontReassociate(int returnValue) {\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum >= inv2) || (returnValue > size && sum < inv2)) {\n+            fail(returnValue);\n+        }\n@@ -253,1 +357,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42})\n+    @Arguments(setup = \"setupEq\")\n@@ -268,2 +372,3 @@\n-        if (returnValue != 0) {\n-            throw new RuntimeException(\"Illegal reassociation\");\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum > inv2) || (returnValue > size && sum <= inv2)) {\n+            fail(returnValue);\n@@ -274,1 +379,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.NUMBER_42})\n+    @Arguments(setup = \"setupEq\")\n@@ -289,2 +394,3 @@\n-        if (returnValue != 43) {\n-            throw new RuntimeException(\"Illegal reassociation\");\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum <= inv2) || (returnValue > size && sum > inv2)) {\n+            fail(returnValue);\n@@ -295,1 +401,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.NUMBER_42})\n+    @Arguments(setup = \"setupEq\")\n@@ -310,2 +416,3 @@\n-        if (returnValue != 42) {\n-            throw new RuntimeException(\"Illegal reassociation\");\n+        int sum = inv1 + returnValue;\n+        if ((returnValue < size && sum < inv2) || (returnValue > size && sum >= inv2)) {\n+            fail(returnValue);\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateCmp.java","additions":176,"deletions":69,"binary":false,"changes":245,"status":"modified"}]}