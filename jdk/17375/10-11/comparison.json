{"files":[{"patch":"@@ -0,0 +1,525 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.loopopts;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n+\n+\/*\n+ * @test\n+ * @bug 8323220\n+ * @summary Test loop invariant code motion of add\/sub through reassociation\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.loopopts.InvariantCodeMotionReassociateAddSub\n+ *\/\n+public class InvariantCodeMotionReassociateAddSub {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+    private int size;\n+    private int inv1;\n+    private int inv2;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @DontInline\n+    private int blackhole(int i) { return i; }\n+    @DontInline\n+    private int blackhole(long i) { return (int)i; }\n+\n+    @Setup\n+    public Object[] setup(SetupInfo info) {\n+        int count = info.invocationCounter();\n+        size = count + 500;\n+        inv1 = count;\n+        if (RANDOM.nextInt() % 7 == 0) {\n+            \/\/ Setup inputs to be equals sometimes to avoid uncommon traps\n+            inv2 = inv1;\n+        } else {\n+            inv2 = count * 2;\n+        }\n+        return new Object[] { inv1, inv2, size };\n+    }\n+\n+    public void fail(int returnValue) {\n+        throw new RuntimeException(\"Illegal reassociation: returnValue=\" + returnValue + \", inv1=\" + inv1\n+                + \", inv2=\" + inv2 + \", size=\" + size);\n+    }\n+\n+    public void check(int returnValue, int expected) {\n+        if (returnValue != expected) {\n+            fail(returnValue);\n+        }\n+    }\n+\n+    public void checkAdd(int returnValue) {\n+        check(returnValue, inv1 + inv2 + size - 1);\n+    }\n+\n+    public void checkSubAdd(int returnValue) {\n+        check(returnValue, inv1 - inv2 + size - 1);\n+    }\n+\n+    public void checkNegSubAdd(int returnValue) {\n+        check(returnValue, -inv1 - inv2 + size - 1);\n+    }\n+\n+    public void checkAddSub(int returnValue) {\n+        check(returnValue, inv1 + inv2 - (size - 1));\n+    }\n+\n+    public void checkSubSub(int returnValue) {\n+        check(returnValue, inv1 - inv2 - (size - 1));\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    public int addInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + i + inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addInt\")\n+    public void checkAddInt(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"2\"})\n+    public int addLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + i + inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addLong\")\n+    public void checkAddLong(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    public int addInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addInt2\")\n+    public void checkAddInt2(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"2\"})\n+    public int addLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 + i`\n+            result = blackhole(inv1 + (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addLong2\")\n+    public void checkAddLong2(int returnValue) {\n+        checkAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int minusAddInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 + (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddInt\")\n+    public void checkSubAddInt(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int minusAddLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 + (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddLong\")\n+    public void checkSubAddLong(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int minusAddInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 - (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddInt2\")\n+    public void checkSubAddInt2(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int minusAddLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(inv1 - (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddLong2\")\n+    public void checkSubAddLong2(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int minusAddInt3(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(i - inv2 + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddInt3\")\n+    public void checkSubAddInt3(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int minusAddLong3(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 + i`\n+            result = blackhole(i - inv2 + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"minusAddLong3\")\n+    public void checkSubAddLong3(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int negAddInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv2 + inv1 + i`\n+            result = blackhole(i + inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negAddInt\")\n+    public void checkNegAddInt(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int negAddLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv2 + inv1 + i`\n+            result = blackhole(i + inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negAddLong\")\n+    public void checkNegAddLong(int returnValue) {\n+        checkSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"2\"})\n+    public int negSubAddInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv1 - inv2 + i`\n+            result = blackhole(i - inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negSubAddInt\")\n+    public void checkNegSubAddInt(int returnValue) {\n+        checkNegSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"2\"})\n+    public int negSubAddLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `-inv1 - inv2 + i`\n+            result = blackhole(i - inv1 - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"negSubAddLong\")\n+    public void checkNegSubAddLong(int returnValue) {\n+        checkNegSubAdd(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int addSubInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 + (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubInt\")\n+    public void checkAddSubInt(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int addSubLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 + (inv2 - i));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubLong\")\n+    public void checkAddSubLong(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int addSubInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 - (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubInt2\")\n+    public void checkAddSubInt2(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int addSubLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv1 - (i - inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubLong2\")\n+    public void checkAddSubLong2(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"3\"})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int addSubInt3(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv2 - i + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubInt3\")\n+    public void checkAddSubInt3(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_L, \"1\"})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public int addSubLong3(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 + inv2 - i`\n+            result = blackhole(inv2 - i + inv1);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"addSubLong3\")\n+    public void checkAddSubLong3(int returnValue) {\n+        checkAddSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"2\"})\n+    public int subSubInt(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubInt\")\n+    public void checkSubSubInt(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.ADD_L})\n+    @IR(counts = {IRNode.SUB_L, \"2\"})\n+    public int subSubLong(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - (i + inv2));\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubLong\")\n+    public void checkSubSubLong(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(counts = {IRNode.ADD_I, \"2\"})\n+    @IR(counts = {IRNode.SUB_I, \"2\"})\n+    public int subSubInt2(int inv1, int inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - i - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubInt2\")\n+    public void checkSubSubInt2(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = {IRNode.ADD_L})\n+    @IR(counts = {IRNode.SUB_L, \"2\"})\n+    public int subSubLong2(long inv1, long inv2, int size) {\n+        int result = -1;\n+        for (int i = 0; i < size; ++i) {\n+            \/\/ Reassociate to `inv1 - inv2 - i`\n+            result = blackhole(inv1 - i - inv2);\n+        }\n+        return result;\n+    }\n+\n+    @Check(test = \"subSubLong2\")\n+    public void checkSubSubLong2(int returnValue) {\n+        checkSubSub(returnValue);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateAddSub.java","additions":525,"deletions":0,"binary":false,"changes":525,"status":"added"},{"patch":"@@ -66,2 +66,2 @@\n-        throw new RuntimeException(\"Illegal reassociation: i=\" + returnValue + \", inv1=\" + inv1\n-                + \", inv2=\" + inv2);\n+        throw new RuntimeException(\"Illegal reassociation: returnValue=\" + returnValue + \", inv1=\" + inv1\n+                + \", inv2=\" + inv2 + \", size=\" + size);\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/InvariantCodeMotionReassociateCmp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}