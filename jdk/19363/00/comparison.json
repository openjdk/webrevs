{"files":[{"patch":"@@ -503,2 +503,3 @@\n-        if (dcTree == null && element instanceof ExecutableElement ee) {\n-            return getInheritedDocTreePath(dtree, ee);\n+        if (dcTree == null) {\n+            \/\/ Element does not have a doc comment.\n+            return getInheritedDocTreePath(dtree);\n@@ -506,1 +507,1 @@\n-        if (path == null || dcTree == null || dtree == null) {\n+        if (path == null || dtree == null) {\n@@ -510,5 +511,2 @@\n-        if (dtPath == null && element instanceof ExecutableElement ee) {\n-            \/\/ The overriding element has a doc tree, but it doesn't contain what we're looking for.\n-            return getInheritedDocTreePath(dtree, ee);\n-        }\n-        return dtPath;\n+        \/\/ Doc tree isn't in current element's comment, it must be inherited.\n+        return dtPath == null ? getInheritedDocTreePath(dtree) : dtPath;\n@@ -517,1 +515,1 @@\n-    private DocTreePath getInheritedDocTreePath(DocTree dtree, ExecutableElement ee) {\n+    private DocTreePath getInheritedDocTreePath(DocTree dtree) {\n@@ -519,9 +517,16 @@\n-        var docFinder = utils.docFinder();\n-        Optional<ExecutableElement> inheritedDoc = docFinder.search(ee,\n-                (m -> {\n-                    Optional<ExecutableElement> optional = utils.getFullBody(m).isEmpty() ? Optional.empty() : Optional.of(m);\n-                    return Result.fromOptional(optional);\n-                })).toOptional();\n-        return inheritedDoc.isEmpty() || inheritedDoc.get().equals(ee)\n-                ? null\n-                : utils.getCommentHelper(inheritedDoc.get()).getDocTreePath(dtree);\n+        if (element instanceof ExecutableElement ee) {\n+            var docFinder = utils.docFinder();\n+            Optional<ExecutableElement> inheritedDoc = docFinder.search(ee,\n+                    (m -> {\n+                        Optional<ExecutableElement> optional = utils.getFullBody(m).isEmpty() ? Optional.empty() : Optional.of(m);\n+                        return Result.fromOptional(optional);\n+                    })).toOptional();\n+            return inheritedDoc.isEmpty() || inheritedDoc.get().equals(ee)\n+                    ? null\n+                    : utils.getCommentHelper(inheritedDoc.get()).getDocTreePath(dtree);\n+        } else if (element instanceof TypeElement te\n+                && te.getEnclosingElement() instanceof TypeElement enclType) {\n+            \/\/ Block tags can be inherited from enclosing types.\n+            return utils.getCommentHelper(enclType).getDocTreePath(dtree);\n+        }\n+        return null;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      7180906 8026567 8239804 8324342\n+ * @bug      7180906 8026567 8239804 8324342 8332039\n@@ -149,0 +149,41 @@\n+\n+    @Test\n+    public void testSinceDefault_NestedTag(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/**\n+                 * Class C.\n+                 * @since 99 {@link C}\n+                 *\/\n+                 public class C {\n+                     public static class Nested1 {\n+                         \/** Class Nested, with no explicit at-since. *\/\n+                         public static class Nested { }\n+                     }\n+                 }\"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>Since:<\/dt>\n+                    <dd>99 <a href=\"C.html\" title=\"class in p\"><code>C<\/code><\/a><\/dd>\"\"\");\n+\n+        checkOutput(\"p\/C.Nested1.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>Since:<\/dt>\n+                    <dd>99 <a href=\"C.html\" title=\"class in p\"><code>C<\/code><\/a><\/dd>\"\"\");\n+\n+        checkOutput(\"p\/C.Nested1.Nested.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>Since:<\/dt>\n+                    <dd>99 <a href=\"C.html\" title=\"class in p\"><code>C<\/code><\/a><\/dd>\"\"\");\n+\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSinceTag\/TestSinceTag.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"}]}