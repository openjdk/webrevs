{"files":[{"patch":"@@ -4262,0 +4262,42 @@\n+void MacroAssembler::java_round_float(Register dst, FloatRegister src, FloatRegister ftmp) {\n+  Label done;\n+  mv(dst, zr);\n+\n+  fclass_s(t0, src);\n+\n+  \/\/ dst = 0\n+  \/\/ if +\/-0, +\/-subnormal numbers, signaling\/quiet NaN\n+  andi(t0, t0, fclass_mask::nan | fclass_mask::zero | fclass_mask::subnorm);\n+  bnez(t0, done);\n+\n+  \/\/ dst = (src + 0.5f) rounded down towards negative infinity\n+  \/\/ if +\/-inf, +\/-normal numbers\n+  li(t0, 0x3f000000);\n+  fmv_w_x(ftmp, t0);\n+  fadd_s(ftmp, src, ftmp, RoundingMode::rdn);\n+  fcvt_w_s(dst, ftmp, RoundingMode::rdn);\n+\n+  bind(done);\n+}\n+\n+void MacroAssembler::java_round_double(Register dst, FloatRegister src, FloatRegister ftmp) {\n+  Label done;\n+  mv(dst, zr);\n+\n+  fclass_d(t0, src);\n+\n+  \/\/ dst = 0\n+  \/\/ if +\/-0, +\/-subnormal numbers, signaling\/quiet NaN\n+  andi(t0, t0, fclass_mask::nan | fclass_mask::zero | fclass_mask::subnorm);\n+  bnez(t0, done);\n+\n+  \/\/ dst = (src + 0.5) rounded down towards negative infinity\n+  \/\/ if +\/-inf, +\/-normal numbers\n+  li(t0, 0x3fe0000000000000);\n+  fmv_d_x(ftmp, t0);\n+  fadd_d(ftmp, src, ftmp, RoundingMode::rdn);\n+  fcvt_l_d(dst, ftmp, RoundingMode::rdn);\n+\n+  bind(done);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1254,0 +1254,3 @@\n+  void java_round_float(Register dst, FloatRegister src, FloatRegister ftmp);\n+  void java_round_double(Register dst, FloatRegister src, FloatRegister ftmp);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -8356,0 +8356,28 @@\n+instruct round_double_reg(iRegLNoSp dst, fRegD src, fRegD ftmp) %{\n+  match(Set dst (RoundD src));\n+\n+  ins_cost(XFER_COST + BRANCH_COST);\n+  effect(TEMP ftmp);\n+  format %{ \"java_round_double $dst, $src\\t#@round_double_reg\" %}\n+\n+  ins_encode %{\n+    __ java_round_double($dst$$Register, as_FloatRegister($src$$reg), as_FloatRegister($ftmp$$reg));\n+  %}\n+\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct round_float_reg(iRegINoSp dst, fRegF src, fRegF ftmp) %{\n+  match(Set dst (RoundF src));\n+\n+  ins_cost(XFER_COST + BRANCH_COST);\n+  effect(TEMP ftmp);\n+  format %{ \"java_round_float $dst, $src\\t#@round_float_reg\" %}\n+\n+  ins_encode %{\n+    __ java_round_float($dst$$Register, as_FloatRegister($src$$reg), as_FloatRegister($ftmp$$reg));\n+  %}\n+\n+  ins_pipe(pipe_class_default);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}