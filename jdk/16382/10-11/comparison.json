{"files":[{"patch":"@@ -4242,20 +4242,2 @@\n-#define FCVT_SAFE(FLOATCVT, FLOATSIG)                                                     \\\n-void MacroAssembler::FLOATCVT##_safe(Register dst, FloatRegister src, Register tmp) {     \\\n-  Label done;                                                                             \\\n-  assert_different_registers(dst, tmp);                                                   \\\n-  fclass_##FLOATSIG(tmp, src);                                                            \\\n-  mv(dst, zr);                                                                            \\\n-  \/* check if src is NaN *\/                                                               \\\n-  andi(tmp, tmp, fclass_mask::nan);                                                       \\\n-  bnez(tmp, done);                                                                        \\\n-  FLOATCVT(dst, src);                                                                     \\\n-  bind(done);                                                                             \\\n-}\n-\n-FCVT_SAFE(fcvt_w_s, s);\n-FCVT_SAFE(fcvt_l_s, s);\n-FCVT_SAFE(fcvt_w_d, d);\n-FCVT_SAFE(fcvt_l_d, d);\n-\n-#undef FCVT_SAFE\n-\n+\/\/ java.math.round(float a)\n+\/\/ Returns the closest int to the argument, with ties rounding to positive infinity.\n@@ -4263,2 +4245,2 @@\n-  \/* this instructions calling sequence provides performance improvement on all tested devices;\n-     don't change it without re-verification *\/\n+  \/\/ this instructions calling sequence provides performance improvement on all tested devices;\n+  \/\/ don't change it without re-verification\n@@ -4269,2 +4251,2 @@\n-  \/* dst = 0 if NaN *\/\n-  feq_s(t0, src, src); \/* replacing fclass with feq as performance optimization for SiFive *\/\n+  \/\/ dst = 0 if NaN\n+  feq_s(t0, src, src); \/\/ replacing fclass with feq as performance optimization for SiFive\n@@ -4274,2 +4256,2 @@\n-  \/* dst = (src + 0.5f) rounded down towards negative infinity *\/\n-  fadd_s(ftmp, src, ftmp, RoundingMode::rdn); \/* RDN is required here otherwise some inputs produce incorrect results *\/\n+  \/\/ dst = (src + 0.5f) rounded down towards negative infinity\n+  fadd_s(ftmp, src, ftmp, RoundingMode::rdn); \/\/ RDN is required here otherwise some inputs produce incorrect results\n@@ -4281,0 +4263,2 @@\n+\/\/ java.math.round(double a)\n+\/\/ Returns the closest long to the argument, with ties rounding to positive infinity.\n@@ -4282,2 +4266,2 @@\n-  \/* this instructions calling sequence provides performance improvement on all tested devices;\n-     don't change it without re-verification *\/\n+  \/\/ this instructions calling sequence provides performance improvement on all tested devices;\n+  \/\/ don't change it without re-verification\n@@ -4288,2 +4272,2 @@\n-  \/* dst = 0 if NaN *\/\n-  feq_d(t0, src, src); \/* replacing fclass with feq as performance optimization for SiFive *\/\n+  \/\/ dst = 0 if NaN\n+  feq_d(t0, src, src); \/\/ replacing fclass with feq as performance optimization for SiFive\n@@ -4293,2 +4277,2 @@\n-  \/* dst = (src + 0.5) rounded down towards negative infinity *\/\n-  fadd_d(ftmp, src, ftmp, RoundingMode::rdn); \/* RDN is required here otherwise some inputs produce incorrect results *\/\n+  \/\/ dst = (src + 0.5) rounded down towards negative infinity\n+  fadd_d(ftmp, src, ftmp, RoundingMode::rdn); \/\/ RDN is required here otherwise some inputs produce incorrect results\n@@ -4300,0 +4284,20 @@\n+#define FCVT_SAFE(FLOATCVT, FLOATSIG)                                                     \\\n+void MacroAssembler::FLOATCVT##_safe(Register dst, FloatRegister src, Register tmp) {     \\\n+  Label done;                                                                             \\\n+  assert_different_registers(dst, tmp);                                                   \\\n+  fclass_##FLOATSIG(tmp, src);                                                            \\\n+  mv(dst, zr);                                                                            \\\n+  \/* check if src is NaN *\/                                                               \\\n+  andi(tmp, tmp, fclass_mask::nan);                                                       \\\n+  bnez(tmp, done);                                                                        \\\n+  FLOATCVT(dst, src);                                                                     \\\n+  bind(done);                                                                             \\\n+}\n+\n+FCVT_SAFE(fcvt_w_s, s);\n+FCVT_SAFE(fcvt_l_s, s);\n+FCVT_SAFE(fcvt_w_d, d);\n+FCVT_SAFE(fcvt_l_d, d);\n+\n+#undef FCVT_SAFE\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":36,"deletions":32,"binary":false,"changes":68,"status":"modified"}]}