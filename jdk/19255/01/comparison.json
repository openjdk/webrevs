{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.lang.reflect.Constructor;\n@@ -42,0 +41,1 @@\n+import java.util.HashMap;\n@@ -43,0 +43,1 @@\n+import java.util.List;\n@@ -762,15 +763,0 @@\n-    private static Accessible createAccessibleTreeNode(JTree t, TreePath p) {\n-        Accessible a = null;\n-\n-        try {\n-            Class<?> accessibleJTreeNodeClass = Class.forName(\"javax.swing.JTree$AccessibleJTree$AccessibleJTreeNode\");\n-            Constructor<?> constructor = accessibleJTreeNodeClass.getConstructor(t.getAccessibleContext().getClass(), JTree.class, TreePath.class, Accessible.class);\n-            constructor.setAccessible(true);\n-            a = ((Accessible) constructor.newInstance(t.getAccessibleContext(), t, p, null));\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        return a;\n-    }\n-\n@@ -784,46 +770,0 @@\n-\n-                Accessible at = null;\n-                if (a instanceof CAccessible) {\n-                    at = CAccessible.getSwingAccessible(a);\n-                } else {\n-                    at = a;\n-                }\n-\n-                if (at instanceof JTree) {\n-                    JTree tree = ((JTree) at);\n-\n-                    if (whichChildren == JAVA_AX_ALL_CHILDREN) {\n-                        int count = tree.getRowCount();\n-                        for (int i = 0; i < count; i++) {\n-                            TreePath path = tree.getPathForRow(i);\n-                            Accessible an = createAccessibleTreeNode(tree, path);\n-                            if (an != null) {\n-                                AccessibleContext ac = an.getAccessibleContext();\n-                                if (ac != null) {\n-                                    allChildren.add(an);\n-                                    allChildren.add(ac.getAccessibleRole());;\n-                                    allChildren.add(String.valueOf((tree.isRootVisible() ? path.getPathCount() : path.getPathCount() - 1)));\n-                                }\n-                            }\n-                        }\n-                    }\n-\n-                    if (whichChildren == JAVA_AX_SELECTED_CHILDREN) {\n-                        int count = tree.getSelectionCount();\n-                        for (int i = 0; i < count; i++) {\n-                            TreePath path = tree.getSelectionPaths()[i];\n-                            Accessible an = createAccessibleTreeNode(tree, path);\n-                            if (an != null) {\n-                                AccessibleContext ac = an.getAccessibleContext();\n-                                if (ac != null) {\n-                                    allChildren.add(an);\n-                                    allChildren.add(ac.getAccessibleRole());\n-                                    allChildren.add(String.valueOf((tree.isRootVisible() ? path.getPathCount() : path.getPathCount() - 1)));\n-                                }\n-                            }\n-                        }\n-                    }\n-\n-                    return allChildren.toArray();\n-                }\n-\n@@ -832,0 +772,1 @@\n+                HashMap<Accessible, List<Object>> childrenOfParent = new HashMap<>();\n@@ -838,2 +779,6 @@\n-\n-                    currentLevelChildren.addAll(Arrays.asList(getChildrenAndRolesImpl(p, c, JAVA_AX_ALL_CHILDREN, allowIgnored, ChildrenOperations.COMMON)));\n+                    if (!childrenOfParent.containsKey(p)) {\n+                        childrenOfParent.put(p, Arrays.asList(getChildrenAndRolesImpl(p,\n+                                c, JAVA_AX_ALL_CHILDREN, allowIgnored,\n+                                ChildrenOperations.COMMON)));\n+                    }\n+                    currentLevelChildren.addAll(childrenOfParent.get(p));\n@@ -882,1 +827,0 @@\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessibility.java","additions":10,"deletions":66,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, JetBrains s.r.o.. All rights reserved.\n@@ -32,1 +32,6 @@\n-\n+{\n+    NSMutableArray<id<NSAccessibilityRow>> *rowCache;\n+    BOOL rowCacheValid;\n+    NSMutableArray<id<NSAccessibilityRow>> *selectedRowCache;\n+    BOOL selectedRowCacheValid;\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineAccessibility.h","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, JetBrains s.r.o.. All rights reserved.\n@@ -58,0 +58,84 @@\n+- (nullable NSArray<id<NSAccessibilityRow>> *)accessibilityRows\n+{\n+    return [self accessibilityChildren];\n+}\n+\n+- (nullable NSArray<id<NSAccessibilityRow>> *)accessibilitySelectedRows\n+{\n+    return [self accessibilitySelectedChildren];\n+}\n+\n+- (nullable  NSArray<id<NSAccessibilityRow>> *)accessibilityChildren\n+{\n+    if (![self isCacheValid]) {\n+        NSArray *t = [super accessibilityChildren];\n+        if (t != NULL) {\n+            rowCache = [[NSMutableArray arrayWithArray:t] retain];\n+        } else {\n+            rowCache = NULL;\n+        }\n+        rowCacheValid = YES;\n+    }\n+    return rowCache;\n+}\n+\n+- (nullable NSArray<id<NSAccessibilityRow>> *)accessibilitySelectedChildren\n+{\n+    if (!selectedRowCacheValid) {\n+        NSArray *t = [super accessibilitySelectedChildren];\n+        if (t != NULL) {\n+            selectedRowCache = [[NSMutableArray arrayWithArray:t] retain];\n+        } else {\n+            selectedRowCache = NULL;\n+        }\n+        selectedRowCacheValid = YES;\n+    }\n+    return selectedRowCache;\n+}\n+\n+- (BOOL)isCacheValid\n+{\n+    if (rowCacheValid && [[self parent] respondsToSelector:NSSelectorFromString(@\"isCacheValid\")]) {\n+        return [[self parent] isCacheValid];\n+    }\n+    return rowCacheValid;\n+}\n+\n+- (void)invalidateCache\n+{\n+    rowCacheValid = NO;\n+}\n+\n+- (void)invalidateSelectionCache\n+{\n+    selectedRowCacheValid = NO;\n+}\n+\n+- (void)postSelectionChanged\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    [self invalidateSelectionCache];\n+    [super postSelectionChanged];\n+}\n+\n+- (void)postTreeNodeCollapsed\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    [self invalidateCache];\n+    [super postTreeNodeCollapsed];\n+}\n+\n+- (void)postTreeNodeExpanded\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    [self invalidateCache];\n+    [super postTreeNodeExpanded];\n+}\n+\n+- (void)postSelectedCellsChanged\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    [self invalidateSelectionCache];\n+    [super postSelectedCellsChanged];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineAccessibility.m","additions":86,"deletions":2,"binary":false,"changes":88,"status":"modified"}]}