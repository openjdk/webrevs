{"files":[{"patch":"@@ -1145,3 +1145,1 @@\n-        tree.bounds = translate(tree.bounds, null);\n-        tree.type = erasure(tree.type);\n-        result = tree;\n+        result = translate(tree.bounds.head, null);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8361499\n+ * @summary intersection type cast causes javac crash with -Xjcov\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask NoTypeIntersectionASTAfterTransTypesTest\n+ * @run main NoTypeIntersectionASTAfterTransTypesTest\n+ *\/\n+\n+import java.util.List;\n+import com.sun.source.util.JavacTask;\n+import com.sun.tools.javac.api.JavacTool;\n+import com.sun.tools.javac.comp.TransTypes;\n+import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.tree.JCTree.JCTypeIntersection;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Context.Factory;\n+\n+import toolbox.ToolBox;\n+\n+public class NoTypeIntersectionASTAfterTransTypesTest {\n+    public static void main(String... args) {\n+        new NoTypeIntersectionASTAfterTransTypesTest().run();\n+    }\n+\n+    void run() {\n+        String code =\n+                \"\"\"\n+                class Test {\n+                    interface I {}\n+                    void test() {\n+                        Runnable r1 = (Runnable & I)() -> {};\n+                        Runnable r2 = (I & Runnable)() -> {};\n+                    }\n+                }\n+                \"\"\";\n+        Context ctx = new Context();\n+        MyTransTypes.preRegister(ctx);\n+        JavacTask task = JavacTool.create().getTask(null, null, null, null, null, List.of(new ToolBox.JavaSource(code)), ctx);\n+        if (!task.call()) {\n+            throw new AssertionError(\"test failed due to a compilation error\");\n+        }\n+    }\n+\n+    static class MyTransTypes extends TransTypes {\n+        public static void preRegister(Context ctx) {\n+            ctx.put(transTypesKey, new Factory<TransTypes>() {\n+                @Override\n+                public TransTypes make(Context c) {\n+                    return new MyTransTypes(c);\n+                }\n+            });\n+        }\n+        public MyTransTypes(Context context) {\n+            super(context);\n+        }\n+        @Override\n+        public void visitTypeIntersection(JCTypeIntersection tree) {\n+            super.visitTypeIntersection(tree);\n+            \/\/ after the invocation to the method in the super class the JCTypeIntersection should have been lowered\n+            if (result instanceof JCTypeIntersection) {\n+                throw new AssertionError(\"there are unexpected type intersection ASTs\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/NoTypeIntersectionASTAfterTransTypesTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}