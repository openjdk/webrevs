{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.file.InvalidPathException;\n@@ -160,1 +161,2 @@\n-            if ((path.length() > 2) && (path.charAt(2) == ':')) {\n+            int pathLen = path.length();\n+            if ((pathLen > 2) && (path.charAt(2) == ':')) {\n@@ -163,0 +165,32 @@\n+                pathLen--;\n+            }\n+\n+            \/\/ set search start position\n+            int fromIndex = pathLen > 1 && path.charAt(1) == ':' ? 2 : 0;\n+\n+            \/\/ check for redundant '\/': if none, fast path is possible\n+            if (path.indexOf(\"\/\/\", fromIndex) == -1) {\n+                \/\/ check only for the illegal chars '*' and ':' as the\n+                \/\/ other illegal chars, '<', '>', '\"', '|', and '?'\n+                \/\/ were vetted during URI construction\n+                int illegalCharPos;\n+                if ((illegalCharPos = path.indexOf(':', fromIndex)) == -1 &&\n+                    (illegalCharPos = path.indexOf('*')) == -1) {\n+                    \/\/ trim terminal '\/' if present\n+                    if (path.charAt(pathLen - 1) == '\/') {\n+                        path = path.substring(0, pathLen - 1);\n+                        pathLen--;\n+                    }\n+                    \/\/ if there are no illegal chars and no redundant '\/', then\n+                    \/\/ simply replace slashes with backslashes\n+                    String p = path.replace('\/', '\\\\');\n+                    return WindowsPath.createFromNormalizedPath(fs, p, null);\n+                }\n+\n+                \/\/ fail if an illegal character was found\n+                if (illegalCharPos != -1) {\n+                    char c = path.charAt(illegalCharPos);\n+                    throw new InvalidPathException(path,\n+                                                   \"Illegal char <\" + c + \">\",\n+                                                   illegalCharPos);\n+                }\n@@ -165,0 +199,1 @@\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsUriSupport.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-\n@@ -49,1 +48,1 @@\n-    public Path parse() {\n+    public Path ofString() {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/file\/PathOfString.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio.file;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+@State(Scope.Benchmark)\n+public class PathOfURI {\n+    @Param({\"file:\/C:\/Users\/bpb\/git\/foo\/bar\/classes\/gus\/dir\/\",\n+            \"file:\/C:\/Users\/bpb\/git\/foo\/bar\/classes\/gus\/dir\",\n+            \"file:\/C:\/Users\/bpb\/git\/foo\/bar\/classes\/\/gus\/dir\/\",\n+            \"file:\/C:\/Users\/bpb\/git\/foo\/bar\/classes\/\/gus\/dir\"})\n+    public String uri;\n+\n+    @Benchmark\n+    public Path ofURI() throws URISyntaxException {\n+        return Path.of(new URI(uri));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/file\/PathOfURI.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"}]}