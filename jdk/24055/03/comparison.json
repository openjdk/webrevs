{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @summary Checks for LD_LIBRARY_PATH and execution  on *nixes\n- * @requires os.family != \"windows\" & !vm.musl & os.family != \"aix\"\n+ * @summary Checks for LD_LIBRARY_PATH and execution on *nixes\n+ * @requires os.family != \"windows\"\n@@ -32,14 +32,1 @@\n- * @compile -XDignore.symbol.file ExecutionEnvironment.java\n- * @run main\/othervm -DexpandedLdLibraryPath=false ExecutionEnvironment\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4780570 4731671 6354700 6367077 6670965 4882974\n- * @summary Checks for LD_LIBRARY_PATH and execution  on *nixes\n- * @requires os.family == \"aix\" | vm.musl\n- * @library \/test\/lib\n- * @modules jdk.compiler\n- *          jdk.zipfs\n- * @compile -XDignore.symbol.file ExecutionEnvironment.java\n- * @run main\/othervm -DexpandedLdLibraryPath=true ExecutionEnvironment\n+ * @run main\/othervm ExecutionEnvironment\n@@ -51,1 +38,1 @@\n- *   1. uneccessary execs do not occur\n+ *   1. unneccessary execs do not occur\n@@ -55,9 +42,1 @@\n- *   4. the VM on Solaris correctly interprets the LD_LIBRARY_PATH32\n- *      and LD_LIBRARY_PATH64 variables if set by the user, ie.\n- *      i. on 32 bit systems:\n- *         a. if LD_LIBRARY_PATH32 is set it will override LD_LIBRARY_PATH\n- *         b. LD_LIBRARY_PATH64 is ignored if set\n- *      ii. on 64 bit systems:\n- *            a. if LD_LIBRARY_PATH64 is set it will override LD_LIBRARY_PATH\n- *            b. LD_LIBRARY_PATH32 is ignored if set\n- *   5. no extra symlink exists on Solaris ie.\n+ *   4. no extra symlink exists on Solaris i.e.\n@@ -66,4 +45,3 @@\n- *      a. perhaps we need to add a test to audit all environment variables are\n- *         in pristine condition after the launch, there may be a few that the\n- *         launcher may add as implementation details.\n- *      b. add a pldd for solaris to ensure only one libjvm.so is linked\n+ *      perhaps we need to add a test to audit all environment variables are\n+ *      in pristine condition after the launch, there may be a few that the\n+ *      launcher may add as implementation details.\n@@ -86,1 +64,1 @@\n-    \/\/ Note: these paths need not exist on the filesytem\n+    \/\/ Note: these paths need not exist on the filesystem\n@@ -134,0 +112,1 @@\n+\n@@ -135,1 +114,1 @@\n-     * tests if the launcher pollutes the LD_LIBRARY_PATH variables ie. there\n+     * tests if the launcher pollutes the LD_LIBRARY_PATH variables i.e. there\n@@ -156,1 +135,1 @@\n-                if (IS_EXPANDED_LD_LIBRARY_PATH && x.startsWith(LD_LIBRARY_PATH)) {\n+                if ((Platform.isAix() || Platform.isMusl()) && x.startsWith(LD_LIBRARY_PATH)) {\n@@ -161,0 +140,1 @@\n+                    String jvmroot = System.getProperty(\"java.home\");\n@@ -162,2 +142,4 @@\n-                        System.getenv(LD_LIBRARY_PATH) +\n-                        System.getProperty(\"path.separator\") + LD_LIBRARY_PATH_VALUE;\n+                        jvmroot + \"\/lib\/server\" + System.getProperty(\"path.separator\") +\n+                        jvmroot + \"\/lib\" + System.getProperty(\"path.separator\") +\n+                        jvmroot + \"\/..\/lib\" + System.getProperty(\"path.separator\") +\n+                        LD_LIBRARY_PATH_VALUE;\n@@ -167,2 +149,1 @@\n-                }\n-                else {\n+                } else {\n@@ -218,17 +199,0 @@\n-    private void verifyJavaLibraryPathOverride(TestResult tr,\n-            boolean is32Bit) {\n-        \/\/ make sure the 32\/64 bit value exists\n-        if (!tr.matches(\"java.library.path=.*\" +\n-                (is32Bit ? LD_LIBRARY_PATH_32_VALUE : LD_LIBRARY_PATH_64_VALUE) + \".*\")) {\n-            flagError(tr, \"verifyJavaLibraryPathOverride: \" +\n-                \" java.library.path does not contain \" +\n-                    (is32Bit ? LD_LIBRARY_PATH_32_VALUE : LD_LIBRARY_PATH_64_VALUE));\n-\n-        }\n-        \/\/ make sure the generic value is absent\n-        if (!tr.notMatches(\"java.library.path=.*\" + LD_LIBRARY_PATH_VALUE + \".*\")) {\n-            flagError(tr, \"verifyJavaLibraryPathOverride: \" +\n-                    \" java.library.path contains \" + LD_LIBRARY_PATH_VALUE);\n-        }\n-    }\n-\n","filename":"test\/jdk\/tools\/launcher\/ExecutionEnvironment.java","additions":19,"deletions":55,"binary":false,"changes":74,"status":"modified"}]}