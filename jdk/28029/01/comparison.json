{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -300,3 +300,6 @@\n-     * object to the specified new value.  The new value is first\n-     * automatically unwrapped if the array has a primitive component\n-     * type.\n+     * object to the specified new value.  If the array has a primitive\n+     * component type, the new value is first converted to a value of a\n+     * primitive type by an unboxing conversion.  The possibly unboxed new\n+     * value is converted to the array's component type by an identity or\n+     * widening conversion and stored into the array.\n+     *\n@@ -309,2 +312,2 @@\n-     * is not an array, or if the array component type is primitive and\n-     * an unwrapping conversion fails\n+     * is not an array, if the array component type is primitive and the\n+     * unboxing conversion fails, or if the identity or widening conversion fails\n@@ -320,1 +323,3 @@\n-     * object to the specified {@code boolean} value.\n+     * object to the specified {@code boolean} value. This method never performs\n+     * a boxing conversion.\n+     *\n@@ -340,1 +345,3 @@\n-     * object to the specified {@code byte} value.\n+     * object to the specified {@code byte} value. This method never performs\n+     * a boxing conversion.\n+     *\n@@ -360,1 +367,3 @@\n-     * object to the specified {@code char} value.\n+     * object to the specified {@code char} value. This method never performs\n+     * a boxing conversion.\n+     *\n@@ -380,1 +389,3 @@\n-     * object to the specified {@code short} value.\n+     * object to the specified {@code short} value. This method never performs\n+     * a boxing conversion.\n+     *\n@@ -400,1 +411,3 @@\n-     * object to the specified {@code int} value.\n+     * object to the specified {@code int} value. This method never performs\n+     * a boxing conversion.\n+     *\n@@ -420,1 +433,3 @@\n-     * object to the specified {@code long} value.\n+     * object to the specified {@code long} value. This method never performs\n+     * a boxing conversion.\n+     *\n@@ -440,1 +455,3 @@\n-     * object to the specified {@code float} value.\n+     * object to the specified {@code float} value. This method never performs\n+     * a boxing conversion.\n+     *\n@@ -460,1 +477,3 @@\n-     * object to the specified {@code double} value.\n+     * object to the specified {@code double} value. This method never performs\n+     * a boxing conversion.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Array.java","additions":33,"deletions":14,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n- * <p>A {@code Field} permits widening conversions to occur during a get or\n- * set access operation, but throws an {@code IllegalArgumentException} if a\n- * narrowing conversion would occur.\n+ * <p>A {@code Field} permits widening primitive conversions to occur during a\n+ * primitive get or set access operation, but throws an {@code IllegalArgumentException}\n+ * if a narrowing primitive conversion would occur.\n@@ -815,2 +815,3 @@\n-     *              field (or a subclass or implementor thereof),\n-     *              or if an unwrapping conversion fails.\n+     *              field (or a subclass or implementor thereof), if an\n+     *              unboxing conversion fails, or if the identity or widening\n+     *              conversion fails\n@@ -838,4 +839,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, zObj)},\n-     * where {@code zObj} is a {@code Boolean} object and\n-     * {@code zObj.booleanValue() == z}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, zObj)}, where {@code zObj} is a {@code Boolean} object\n+     * and {@code zObj.booleanValue() == z}. This method never performs a boxing\n+     * conversion.\n@@ -854,1 +855,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n@@ -877,4 +878,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, bObj)},\n-     * where {@code bObj} is a {@code Byte} object and\n-     * {@code bObj.byteValue() == b}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, bObj)}, where {@code bObj} is a {@code Byte} object and\n+     * {@code bObj.byteValue() == b}. This method never performs a boxing\n+     * conversion.\n@@ -893,1 +894,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n@@ -916,4 +917,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, cObj)},\n-     * where {@code cObj} is a {@code Character} object and\n-     * {@code cObj.charValue() == c}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, cObj)}, where {@code cObj} is a {@code Character} object\n+     * and {@code cObj.charValue() == c}. This method never performs a boxing\n+     * conversion.\n@@ -932,1 +933,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n@@ -955,4 +956,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, sObj)},\n-     * where {@code sObj} is a {@code Short} object and\n-     * {@code sObj.shortValue() == s}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, sObj)}, where {@code sObj} is a {@code Short} object and\n+     * {@code sObj.shortValue() == s}. This method never performs a boxing\n+     * conversion.\n@@ -971,1 +972,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n@@ -994,4 +995,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, iObj)},\n-     * where {@code iObj} is an {@code Integer} object and\n-     * {@code iObj.intValue() == i}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, iObj)}, where {@code iObj} is an {@code Integer} object\n+     * and {@code iObj.intValue() == i}. This method never performs a boxing\n+     * conversion.\n@@ -1010,1 +1011,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n@@ -1033,4 +1034,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, lObj)},\n-     * where {@code lObj} is a {@code Long} object and\n-     * {@code lObj.longValue() == l}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, lObj)}, where {@code lObj} is a {@code Long} object and\n+     * {@code lObj.longValue() == l}. This method never performs a boxing\n+     * conversion.\n@@ -1049,1 +1050,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n@@ -1072,4 +1073,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, fObj)},\n-     * where {@code fObj} is a {@code Float} object and\n-     * {@code fObj.floatValue() == f}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, fObj)}, where {@code fObj} is a {@code Float} object and\n+     * {@code fObj.floatValue() == f}. This method never performs a boxing\n+     * conversion.\n@@ -1088,1 +1089,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n@@ -1111,4 +1112,4 @@\n-     * This method is equivalent to\n-     * {@code set(obj, dObj)},\n-     * where {@code dObj} is a {@code Double} object and\n-     * {@code dObj.doubleValue() == d}.\n+     * If this field is of a primitive type, this method is equivalent to\n+     * {@code set(obj, dObj)}, where {@code dObj} is a {@code Double} object and\n+     * {@code dObj.doubleValue() == d}. This method never performs a boxing\n+     * conversion.\n@@ -1127,1 +1128,1 @@\n-     *              or if an unwrapping conversion fails.\n+     *              or if an identity or primitive widening conversion fails\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":46,"deletions":45,"binary":false,"changes":91,"status":"modified"}]}