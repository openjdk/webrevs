{"files":[{"patch":"@@ -3750,0 +3750,6 @@\n+\n+  \/\/ Initialize cached modifier_flags to support Class.getModifiers().\n+  \/\/ This must follow setting inner_class attributes.\n+  int computed_modifiers = this_klass->compute_modifier_flags();\n+  this_klass->set_modifier_flags(computed_modifiers);\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1116,6 +1116,0 @@\n-  \/\/ Use this moment of initialization to cache modifier_flags also,\n-  \/\/ to support Class.getModifiers().  Instance classes recalculate\n-  \/\/ the cached flags after the class file is parsed, but before the\n-  \/\/ class is put into the system dictionary.\n-  int computed_modifiers = k->compute_modifier_flags();\n-  k->set_modifier_flags(computed_modifiers);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -201,4 +201,0 @@\n-jint ArrayKlass::compute_modifier_flags() const {\n-  return JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -121,4 +121,0 @@\n-\n-  \/\/ jvm support\n-  jint compute_modifier_flags() const;\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,0 +143,3 @@\n+\n+  \/\/ Compute modifier flags after bottom_klass and element_klass are initialized.\n+  set_modifier_flags(compute_modifier_flags());\n@@ -343,4 +346,2 @@\n-  if (element_klass() == nullptr) {\n-    assert(Universe::is_bootstrapping(), \"partial objArray only at startup\");\n-    return JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC;\n-  }\n+  assert (element_klass() != nullptr, \"should be initialized\");\n+\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -78,0 +78,4 @@\n+jint TypeArrayKlass::compute_modifier_flags() const {\n+  return JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC;\n+}\n+\n@@ -87,0 +91,3 @@\n+\n+  \/\/ Compute modifier flags.\n+  set_modifier_flags(compute_modifier_flags());\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,2 @@\n+  jint compute_modifier_flags() const;\n+\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2699,1 +2699,1 @@\n-    result = k->compute_modifier_flags();\n+    result = k->modifier_flags();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}