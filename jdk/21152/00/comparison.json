{"files":[{"patch":"@@ -70,1 +70,1 @@\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop_entry), src, dst, count);\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop), src, dst, count);\n@@ -72,1 +72,1 @@\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop_entry), src, dst, count);\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop), src, dst, count);\n@@ -167,1 +167,1 @@\n-    __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), pre_val, thread);\n+    __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), pre_val, thread);\n@@ -169,1 +169,1 @@\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), pre_val, thread);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), pre_val, thread);\n@@ -701,1 +701,1 @@\n-  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), pre_val, thread);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), pre_val, thread);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-    jrt_address = CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop_entry);\n+    jrt_address = CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop);\n@@ -149,1 +149,1 @@\n-    jrt_address = CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop_entry);\n+    jrt_address = CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop);\n@@ -305,1 +305,1 @@\n-  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), pre_val, R16_thread);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), pre_val, R16_thread);\n@@ -909,1 +909,1 @@\n-  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), R0_pre_val, R16_thread);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), R0_pre_val, R16_thread);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop_entry),\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop),\n@@ -76,1 +76,1 @@\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop_entry), src, dst, count);\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop), src, dst, count);\n@@ -168,1 +168,1 @@\n-    __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), pre_val, thread);\n+    __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), pre_val, thread);\n@@ -170,1 +170,1 @@\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), pre_val, thread);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), pre_val, thread);\n@@ -648,1 +648,1 @@\n-  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), pre_val, thread);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), pre_val, thread);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop_entry),\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_narrow_oop),\n@@ -171,1 +171,1 @@\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop_entry),\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::arraycopy_barrier_oop),\n@@ -299,1 +299,1 @@\n-    __ MacroAssembler::call_VM_leaf_base(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), 2);\n+    __ MacroAssembler::call_VM_leaf_base(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), 2);\n@@ -301,1 +301,1 @@\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), LP64_ONLY(c_rarg0) NOT_LP64(pre_val), thread);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), LP64_ONLY(c_rarg0) NOT_LP64(pre_val), thread);\n@@ -928,1 +928,1 @@\n-  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), rcx, thread);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), rcx, thread);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -252,2 +252,3 @@\n-        const TypeFunc *tf = ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type();\n-        __ make_leaf_call(tf, CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), \"shenandoah_wb_pre\", pre_val, tls);\n+        const TypeFunc *tf = ShenandoahBarrierSetC2::write_ref_field_pre_Type();\n+        __ make_leaf_call(tf, CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre), \"shenandoah_wb_pre\",\n+                          pre_val, tls);\n@@ -271,1 +272,1 @@\n-         call->as_CallLeaf()->entry_point() == CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry);\n+         call->as_CallLeaf()->entry_point() == CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre);\n@@ -276,1 +277,1 @@\n-         call->as_CallLeaf()->entry_point() == CAST_FROM_FN_PTR(address, ShenandoahRuntime::shenandoah_clone_barrier);\n+         call->as_CallLeaf()->entry_point() == CAST_FROM_FN_PTR(address, ShenandoahRuntime::clone_barrier);\n@@ -436,1 +437,1 @@\n-const TypeFunc* ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type() {\n+const TypeFunc* ShenandoahBarrierSetC2::write_ref_field_pre_Type() {\n@@ -449,1 +450,1 @@\n-const TypeFunc* ShenandoahBarrierSetC2::shenandoah_clone_barrier_Type() {\n+const TypeFunc* ShenandoahBarrierSetC2::clone_barrier_Type() {\n@@ -461,1 +462,1 @@\n-const TypeFunc* ShenandoahBarrierSetC2::shenandoah_load_reference_barrier_Type() {\n+const TypeFunc* ShenandoahBarrierSetC2::load_reference_barrier_Type() {\n@@ -800,5 +801,5 @@\n-                    ShenandoahBarrierSetC2::shenandoah_clone_barrier_Type(),\n-                    CAST_FROM_FN_PTR(address, ShenandoahRuntime::shenandoah_clone_barrier),\n-                    \"shenandoah_clone\",\n-                    TypeRawPtr::BOTTOM,\n-                    src_base);\n+                                       ShenandoahBarrierSetC2::clone_barrier_Type(),\n+                                       CAST_FROM_FN_PTR(address, ShenandoahRuntime::clone_barrier),\n+                                       \"shenandoah_clone\",\n+                                       TypeRawPtr::BOTTOM,\n+                                       src_base);\n@@ -979,1 +980,1 @@\n-    uint cnt = ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type()->domain()->cnt();\n+    uint cnt = ShenandoahBarrierSetC2::write_ref_field_pre_Type()->domain()->cnt();\n@@ -1065,1 +1066,1 @@\n-        uint cnt = ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type()->domain()->cnt();\n+        uint cnt = ShenandoahBarrierSetC2::write_ref_field_pre_Type()->domain()->cnt();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -96,3 +96,3 @@\n-  static const TypeFunc* write_ref_field_pre_entry_Type();\n-  static const TypeFunc* shenandoah_clone_barrier_Type();\n-  static const TypeFunc* shenandoah_load_reference_barrier_Type();\n+  static const TypeFunc* write_ref_field_pre_Type();\n+  static const TypeFunc* clone_barrier_Type();\n+  static const TypeFunc* load_reference_barrier_Type();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -998,1 +998,1 @@\n-  Node* call = new CallLeafNode(ShenandoahBarrierSetC2::shenandoah_load_reference_barrier_Type(), calladdr, name, TypeRawPtr::BOTTOM);\n+  Node* call = new CallLeafNode(ShenandoahBarrierSetC2::load_reference_barrier_Type(), calladdr, name, TypeRawPtr::BOTTOM);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,4 +34,3 @@\n-void ShenandoahRuntime::arraycopy_barrier_oop_entry(oop* src, oop* dst, size_t length) {\n-  ShenandoahBarrierSet *bs = ShenandoahBarrierSet::barrier_set();\n-  bs->arraycopy_barrier(src, dst, length);\n-}\n+JRT_LEAF(void, ShenandoahRuntime::arraycopy_barrier_oop(oop* src, oop* dst, size_t length))\n+  ShenandoahBarrierSet::barrier_set()->arraycopy_barrier(src, dst, length);\n+JRT_END\n@@ -39,4 +38,3 @@\n-void ShenandoahRuntime::arraycopy_barrier_narrow_oop_entry(narrowOop* src, narrowOop* dst, size_t length) {\n-  ShenandoahBarrierSet *bs = ShenandoahBarrierSet::barrier_set();\n-  bs->arraycopy_barrier(src, dst, length);\n-}\n+JRT_LEAF(void, ShenandoahRuntime::arraycopy_barrier_narrow_oop(narrowOop* src, narrowOop* dst, size_t length))\n+  ShenandoahBarrierSet::barrier_set()->arraycopy_barrier(src, dst, length);\n+JRT_END\n@@ -44,2 +42,1 @@\n-\/\/ Shenandoah pre write barrier slowpath\n-JRT_LEAF(void, ShenandoahRuntime::write_ref_field_pre_entry(oopDesc* orig, JavaThread *thread))\n+JRT_LEAF(void, ShenandoahRuntime::write_ref_field_pre(oopDesc * orig, JavaThread * thread))\n@@ -49,1 +46,1 @@\n-  \/\/ store the original value that was in the field reference\n+  \/\/ Capture the original value that was in the field reference.\n@@ -63,9 +60,1 @@\n-\/\/ Shenandoah clone barrier: makes sure that references point to to-space\n-\/\/ in cloned objects.\n-JRT_LEAF(void, ShenandoahRuntime::shenandoah_clone_barrier(oopDesc* src))\n-  oop s = oop(src);\n-  shenandoah_assert_correct(nullptr, s);\n-  ShenandoahBarrierSet::barrier_set()->clone_barrier(s);\n-JRT_END\n-\n-JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_weak(oopDesc * src, oop* load_addr))\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_weak(oopDesc* src, oop* load_addr))\n@@ -75,1 +64,1 @@\n-JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_weak_narrow(oopDesc * src, narrowOop* load_addr))\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_weak_narrow(oopDesc* src, narrowOop* load_addr))\n@@ -79,1 +68,1 @@\n-JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_phantom(oopDesc * src, oop* load_addr))\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_phantom(oopDesc* src, oop* load_addr))\n@@ -83,1 +72,1 @@\n-JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_phantom_narrow(oopDesc * src, narrowOop* load_addr))\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_phantom_narrow(oopDesc* src, narrowOop* load_addr))\n@@ -86,0 +75,6 @@\n+\n+JRT_LEAF(void, ShenandoahRuntime::clone_barrier(oopDesc* src))\n+  oop s = oop(src);\n+  shenandoah_assert_correct(nullptr, s);\n+  ShenandoahBarrierSet::barrier_set()->clone_barrier(s);\n+JRT_END\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.cpp","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-  static void arraycopy_barrier_oop_entry(oop* src, oop* dst, size_t length);\n-  static void arraycopy_barrier_narrow_oop_entry(narrowOop* src, narrowOop* dst, size_t length);\n+  static void arraycopy_barrier_oop(oop* src, oop* dst, size_t length);\n+  static void arraycopy_barrier_narrow_oop(narrowOop* src, narrowOop* dst, size_t length);\n@@ -39,1 +39,1 @@\n-  static void write_ref_field_pre_entry(oopDesc* orig, JavaThread* thread);\n+  static void write_ref_field_pre(oopDesc* orig, JavaThread* thread);\n@@ -50,1 +50,1 @@\n-  static void shenandoah_clone_barrier(oopDesc* src);\n+  static void clone_barrier(oopDesc* src);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}