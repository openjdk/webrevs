{"files":[{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary An example test that shows how to use the Generators library.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver testlibrary_tests.generators.tests.ExampleTest\n+ *\/\n+\n+package testlibrary_tests.generators.tests;\n+\n+import compiler.lib.generators.Generator;\n+import compiler.lib.ir_framework.*;\n+\n+import static compiler.lib.generators.Generators.G;\n+\n+\n+public class ExampleTest {\n+    static class UnderTest {\n+        private enum State { STAND_BY, FIRST, SECOND };\n+\n+        private final String name;\n+        private State state = State.STAND_BY;\n+\n+        UnderTest(String name) {\n+            this.name = name;\n+        }\n+\n+        void doIt(int x) {\n+            state = switch (state) {\n+                case State.STAND_BY -> x == (1 << 10) + 3 ? State.FIRST : State.STAND_BY;\n+                case State.FIRST -> x == (1 << 5) - 2 ? State.SECOND : State.STAND_BY;\n+                case State.SECOND -> {\n+                    if (x == (1 << 4)) throw new RuntimeException(\"Assert triggered for \" + name);\n+                    yield State.STAND_BY;\n+                }\n+            };\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"test\"})\n+    public void run() {\n+        test(G.uniformInts(), \"uniform\");\n+        test(G.specialInts(3), \"special\");\n+    }\n+\n+    @Test\n+    public void test(Generator<Integer> g, String name) {\n+        UnderTest underTest = new UnderTest(name);\n+        for (int i = 0; i < 10_000; i++) {\n+            for (int j = 0; j < 3; j++) {\n+                underTest.doIt(g.next());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/ExampleTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}