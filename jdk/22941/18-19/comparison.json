{"files":[{"patch":"@@ -44,2 +44,2 @@\n- * Generators also offers special generators of interesting values such as {@link #specialInts(int)},\n- * {@link #specialLongs(int)}, which are values close to the powers of 2, or {@link #SPECIAL_DOUBLES} and\n+ * Generators also offers special generators of interesting values such as {@link #powerOfTwoInts(int)},\n+ * {@link #powerOfTwoLongs(int)}, which are values close to the powers of 2, or {@link #SPECIAL_DOUBLES} and\n@@ -271,5 +271,5 @@\n-            case 1  -> { return specialInts(0); }\n-            case 2  -> { return specialInts(2); }\n-            case 3  -> { return specialInts(16); }\n-            case 4  -> { return uniformIntsMixedWithSpecials(1, 1, 16); }\n-            case 5  -> { return uniformIntsMixedWithSpecials(1, 2, 2); }\n+            case 1  -> { return powerOfTwoInts(0); }\n+            case 2  -> { return powerOfTwoInts(2); }\n+            case 3  -> { return powerOfTwoInts(16); }\n+            case 4  -> { return uniformIntsMixedWithPowersOfTwo(1, 1, 16); }\n+            case 5  -> { return uniformIntsMixedWithPowersOfTwo(1, 2, 2); }\n@@ -283,1 +283,2 @@\n-     * values as powers of two.\n+     * values as powers of two. Note that for range >= 1, the set of values includes {@link Integer#MAX_VALUE} and\n+     * {@link Integer#MIN_VALUE}.\n@@ -285,1 +286,1 @@\n-    public RestrictableGenerator<Integer> specialInts(int range) {\n+    public RestrictableGenerator<Integer> powerOfTwoInts(int range) {\n@@ -298,1 +299,1 @@\n-     * A convenience helper to mix {@link #specialInts(int)} with {@link #uniformInts(int, int)}.\n+     * A convenience helper to mix {@link #powerOfTwoInts(int)} with {@link #uniformInts(int, int)}.\n@@ -300,2 +301,2 @@\n-    public RestrictableGenerator<Integer> uniformIntsMixedWithSpecials(int weightUniform, int weightSpecial, int rangeSpecial) {\n-        return mixed(uniformInts(), specialInts(rangeSpecial), weightUniform, weightSpecial);\n+    public RestrictableGenerator<Integer> uniformIntsMixedWithPowersOfTwo(int weightUniform, int weightSpecial, int rangeSpecial) {\n+        return mixed(uniformInts(), powerOfTwoInts(rangeSpecial), weightUniform, weightSpecial);\n@@ -312,5 +313,5 @@\n-            case 1  -> { return specialLongs(0); }\n-            case 2  -> { return specialLongs(2); }\n-            case 3  -> { return specialLongs(16); }\n-            case 4  -> { return uniformLongsMixedWithSpecials(1, 1, 16); }\n-            case 5  -> { return uniformLongsMixedWithSpecials(1, 2, 2); }\n+            case 1  -> { return powerOfTwoLongs(0); }\n+            case 2  -> { return powerOfTwoLongs(2); }\n+            case 3  -> { return powerOfTwoLongs(16); }\n+            case 4  -> { return uniformLongsMixedWithPowerOfTwos(1, 1, 16); }\n+            case 5  -> { return uniformLongsMixedWithPowerOfTwos(1, 2, 2); }\n@@ -324,1 +325,2 @@\n-     * values as powers of two.\n+     * values as powers of two. Note that for range >= 1, the set of values includes {@link Long#MAX_VALUE} and\n+     * {@link Long#MIN_VALUE}.\n@@ -326,1 +328,1 @@\n-    public RestrictableGenerator<Long> specialLongs(int range) {\n+    public RestrictableGenerator<Long> powerOfTwoLongs(int range) {\n@@ -339,1 +341,1 @@\n-     * A convenience helper to mix {@link #specialLongs(int)} with {@link #uniformLongs(long, long)}.\n+     * A convenience helper to mix {@link #powerOfTwoLongs(int)} with {@link #uniformLongs(long, long)}.\n@@ -341,2 +343,2 @@\n-    public RestrictableGenerator<Long> uniformLongsMixedWithSpecials(int weightUniform, int weightSpecial, int rangeSpecial) {\n-        return mixed(uniformLongs(), specialLongs(rangeSpecial), weightUniform, weightSpecial);\n+    public RestrictableGenerator<Long> uniformLongsMixedWithPowerOfTwos(int weightUniform, int weightSpecial, int rangeSpecial) {\n+        return mixed(uniformLongs(), powerOfTwoLongs(rangeSpecial), weightUniform, weightSpecial);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-            test(G.specialInts(3));\n+            test(G.powerOfTwoInts(3));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/ExampleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-        var si = mockGS.specialInts(0);\n+        var si = mockGS.powerOfTwoInts(0);\n@@ -224,1 +224,1 @@\n-        var si1 = mockGS.specialInts(1);\n+        var si1 = mockGS.powerOfTwoInts(1);\n@@ -230,1 +230,1 @@\n-        var si = mockGS.specialLongs(0);\n+        var si = mockGS.powerOfTwoLongs(0);\n@@ -235,1 +235,1 @@\n-        var si1 = mockGS.specialLongs(1);\n+        var si1 = mockGS.powerOfTwoLongs(1);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestGenerators.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}