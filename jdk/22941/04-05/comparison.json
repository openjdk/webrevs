{"files":[{"patch":"@@ -433,0 +433,48 @@\n+    \/**\n+     * Trys to restrict the provided restrictable generator to the provided range. If the restriction fails no\n+     * exception is raised, but instead a uniform int generator for the range is returned.\n+     *\/\n+    public RestrictableGenerator<Integer> safeRestrictInt(RestrictableGenerator<Integer> g, int lo, int hi) {\n+        try {\n+            return g.restricted(lo, hi);\n+        } catch (EmptyGeneratorException e) {\n+            return uniformInts(lo, hi);\n+        }\n+    }\n+\n+    \/**\n+     * Trys to restrict the provided restrictable generator to the provided range. If the restriction fails no\n+     * exception is raised, but instead a uniform long generator for the range is returned.\n+     *\/\n+    public RestrictableGenerator<Long> safeRestrictLong(RestrictableGenerator<Long> g, long lo, long hi) {\n+        try {\n+            return g.restricted(lo, hi);\n+        } catch (EmptyGeneratorException e) {\n+            return uniformLongs(lo, hi);\n+        }\n+    }\n+\n+    \/**\n+     * Trys to restrict the provided restrictable generator to the provided range. If the restriction fails no\n+     * exception is raised, but instead a uniform double generator for the range is returned.\n+     *\/\n+    public RestrictableGenerator<Double> safeRestrictDouble(RestrictableGenerator<Double> g, double lo, double hi) {\n+        try {\n+            return g.restricted(lo, hi);\n+        } catch (EmptyGeneratorException e) {\n+            return uniformDoubles(lo, hi);\n+        }\n+    }\n+\n+    \/**\n+     * Trys to restrict the provided restrictable generator to the provided range. If the restriction fails no\n+     * exception is raised, but instead a uniform float generator for the range is returned.\n+     *\/\n+    public RestrictableGenerator<Float> safeRestrictFloat(RestrictableGenerator<Float> g, float lo, float hi) {\n+        try {\n+            return g.restricted(lo, hi);\n+        } catch (EmptyGeneratorException e) {\n+            return uniformFloats(lo, hi);\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -15,1 +15,0 @@\n-                System.out.println(\"kicking out \" + generator);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/RestrictableMixedGenerator.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+        testSafeRestrict();\n@@ -446,0 +447,36 @@\n+    static void testSafeRestrict() {\n+        \/\/ normal restrictions\n+        mockSource.checkEmpty().enqueueInteger(4, 6, 4);\n+        var g1 = mockGS.safeRestrictInt(mockGS.uniformInts(4, 5),2, 5);\n+        Asserts.assertEQ(g1.next(), 4);\n+\n+        mockSource.checkEmpty().enqueueLong(4, 6, 4);\n+        var g2 = mockGS.safeRestrictLong(mockGS.uniformLongs(4, 5),2, 5);\n+        Asserts.assertEQ(g2.next(), 4L);\n+\n+        mockSource.checkEmpty().enqueueDouble(4, 5, 4);\n+        var g3 = mockGS.safeRestrictDouble(mockGS.uniformDoubles(4, 5),2, 5);\n+        Asserts.assertEQ(g3.next(), 4d);\n+\n+        mockSource.checkEmpty().enqueueFloat(4, 5, 4);\n+        var g4 = mockGS.safeRestrictFloat(mockGS.uniformFloats(4, 5),2, 5);\n+        Asserts.assertEQ(g4.next(), 4f);\n+\n+        \/\/ fallbacks\n+        mockSource.checkEmpty().enqueueInteger(2, 6, 4);\n+        var f1 = mockGS.safeRestrictInt(mockGS.uniformInts(0, 1),2, 5);\n+        Asserts.assertEQ(f1.next(), 4);\n+\n+        mockSource.checkEmpty().enqueueLong(2, 6, 4);\n+        var f2 = mockGS.safeRestrictLong(mockGS.uniformLongs(0, 1),2, 5);\n+        Asserts.assertEQ(f2.next(), 4L);\n+\n+        mockSource.checkEmpty().enqueueDouble(2, 5, 4);\n+        var f3 = mockGS.safeRestrictDouble(mockGS.uniformDoubles(0, 1),2, 5);\n+        Asserts.assertEQ(f3.next(), 4d);\n+\n+        mockSource.checkEmpty().enqueueFloat(2, 5, 4);\n+        var f4 = mockGS.safeRestrictFloat(mockGS.uniformFloats(0, 1),2, 5);\n+        Asserts.assertEQ(f4.next(), 4f);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestGenerators.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"}]}