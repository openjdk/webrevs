{"files":[{"patch":"@@ -30,1 +30,1 @@\n-final class AnyBitsDoubleGenerator extends GeneratorBase<Double> {\n+final class AnyBitsDoubleGenerator extends BoundGenerator<Double> {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/AnyBitsDoubleGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-final class AnyBitsFloatGenerator extends GeneratorBase<Float> {\n+final class AnyBitsFloatGenerator extends BoundGenerator<Float> {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/AnyBitsFloatGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+\/**\n+ * This is a common superclass for all generators that maintain a reference to the Generators object that created them.\n+ * This allows internally creating other generators or using the {@link RandomnessSource} provided in\n+ * {@link Generators#random}.\n+ *\/\n+abstract class BoundGenerator<T> implements Generator<T> {\n+    Generators g;\n+\n+    BoundGenerator(Generators g) {\n+        this.g = g;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/BoundGenerator.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.generators;\n-\n-abstract class GeneratorBase<T> implements Generator<T> {\n-    Generators g;\n-\n-    GeneratorBase(Generators g) {\n-        this.g = g;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/GeneratorBase.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -68,1 +68,1 @@\n- * If there is a single value that is interesting as the to all three parameters, we might even call this\n+ * If there is a single value that is interesting as an argument to all three parameters, we might even call this\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-class MixedGenerator<T> extends GeneratorBase<T> {\n+class MixedGenerator<T> extends BoundGenerator<T> {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/MixedGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-class RandomElementGenerator<T> extends GeneratorBase<T> {\n+class RandomElementGenerator<T> extends BoundGenerator<T> {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/RandomElementGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * This interface greatly benefits testing, as it is much easier to implement than\n+ * {@link java.util.random.RandomGenerator}  and thus makes creating test doubles more convenient.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/RandomnessSource.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-abstract class UniformIntersectionRestrictableGenerator<T extends Comparable<T>> extends GeneratorBase<T> implements RestrictableGenerator<T> {\n+abstract class UniformIntersectionRestrictableGenerator<T extends Comparable<T>> extends BoundGenerator<T> implements RestrictableGenerator<T> {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformIntersectionRestrictableGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}