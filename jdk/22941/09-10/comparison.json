{"files":[{"patch":"@@ -44,1 +44,1 @@\n-            throw new IllegalArgumentException(\"weights and generators must have the same size.\");\n+            throw new IllegalArgumentException(\"weights and generators must have the same size\");\n@@ -48,1 +48,5 @@\n-            acc += weights.get(i);\n+            int weight = weights.get(i);\n+            if (weight <= 0) {\n+                throw new IllegalArgumentException(\"weights must be positive\");\n+            }\n+            acc += weight;\n@@ -63,0 +67,2 @@\n+        \/\/ We could map and create new lists and delegate to the other constructor but that would allocate\n+        \/\/ two additional lists, so in the interest of memory efficiency we construct the new TreeMap ourselves.\n@@ -65,0 +71,3 @@\n+        \/\/ entrySet: \"The set's iterator returns the entries in ascending key order.\" (documentation)\n+        \/\/ This means we iterate over the generators exactly in the order they were inserted as we insert with ascending\n+        \/\/ keys (due to summing positive numbers).\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/MixedGenerator.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * A generators whose outputs is restricted by taking the intersection of the previous interval and the new interval.\n+ * A generators whose outputs are restricted by taking the intersection of the previous interval and the new interval.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformIntersectionRestrictableGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}