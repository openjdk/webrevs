{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import compiler.lib.generators.RestrictableGenerator;\n@@ -69,0 +70,1 @@\n+        testFuzzy();\n@@ -181,8 +183,0 @@\n-\n-        float lo = 0.13f, hi = 13.532f;\n-        var gb = G.uniformFloats(lo, hi);\n-        for (int i = 0; i < 10_000; i++) {\n-            float x = gb.next();\n-            Asserts.assertGreaterThanOrEqual(x, lo);\n-            Asserts.assertLessThan(x, hi);\n-        }\n@@ -196,8 +190,0 @@\n-\n-        double lo = 0.13, hi = 13.532;\n-        var gb = G.uniformDoubles(lo, hi);\n-        for (int i = 0; i < 10_000; i++) {\n-            double x = gb.next();\n-            Asserts.assertGreaterThanOrEqual(x, lo);\n-            Asserts.assertLessThan(x, hi);\n-        }\n@@ -323,8 +309,0 @@\n-\n-        int lo = -345555, hi = 11123;\n-        var gb = G.uniformInts(lo, hi);\n-        for (int i = 0; i < 10_000; i++) {\n-            int x = gb.next();\n-            Asserts.assertGreaterThanOrEqual(x, lo);\n-            Asserts.assertLessThanOrEqual(x, hi);\n-        }\n@@ -363,8 +341,0 @@\n-\n-        long lo = -344223244511L, hi = 29;\n-        var gb = G.uniformLongs(lo, hi);\n-        for (int i = 0; i < 10_000; i++) {\n-            long x = gb.next();\n-            Asserts.assertGreaterThanOrEqual(x, lo);\n-            Asserts.assertLessThanOrEqual(x, hi);\n-        }\n@@ -541,0 +511,82 @@\n+\n+    static void testFuzzy() {\n+        var intBoundGen = G.uniformInts();\n+        for (int j = 0; j < 500; j++) {\n+            int a = intBoundGen.next(), b = intBoundGen.next();\n+            int lo = Math.min(a, b), hi = Math.max(a, b);\n+            RestrictableGenerator<Integer> gb;\n+            try {\n+                gb = G.ints().restricted(lo, hi);\n+            } catch (EmptyGeneratorException e) {\n+                continue;\n+            }\n+            for (int i = 0; i < 10_000; i++) {\n+                int x = gb.next();\n+                Asserts.assertGreaterThanOrEqual(x, lo);\n+                Asserts.assertLessThanOrEqual(x, hi);\n+            }\n+        }\n+\n+        for (int j = 0; j < 500; j++) {\n+            int a = intBoundGen.next(), b = intBoundGen.next();\n+            int lo = Math.min(a, b), hi = Math.max(a, b);\n+            var gb = G.uniformInts(lo, hi);\n+            for (int i = 0; i < 10_000; i++) {\n+                int x = gb.next();\n+                Asserts.assertGreaterThanOrEqual(x, lo);\n+                Asserts.assertLessThanOrEqual(x, hi);\n+            }\n+        }\n+\n+        var longBoundGen = G.uniformLongs();\n+        for (int j = 0; j < 500; j++) {\n+            long a = longBoundGen.next(), b = longBoundGen.next();\n+            long lo = Math.min(a, b), hi = Math.max(a, b);\n+            RestrictableGenerator<Long> gb;\n+            try {\n+                gb = G.longs().restricted(lo, hi);\n+            } catch (EmptyGeneratorException e) {\n+                continue;\n+            }\n+            for (int i = 0; i < 10_000; i++) {\n+                long x = gb.next();\n+                Asserts.assertGreaterThanOrEqual(x, lo);\n+                Asserts.assertLessThanOrEqual(x, hi);\n+            }\n+        }\n+\n+        for (int j = 0; j < 500; j++) {\n+            long a = longBoundGen.next(), b = longBoundGen.next();\n+            long lo = Math.min(a, b), hi = Math.max(a, b);\n+            var gb = G.uniformLongs(lo, hi);\n+            for (int i = 0; i < 10_000; i++) {\n+                long x = gb.next();\n+                Asserts.assertGreaterThanOrEqual(x, lo);\n+                Asserts.assertLessThanOrEqual(x, hi);\n+            }\n+        }\n+\n+        var floatBoundGen = G.uniformFloats();\n+        for (int j = 0; j < 500; j++) {\n+            float a = floatBoundGen.next(), b = floatBoundGen.next();\n+            float lo = Math.min(a, b), hi = Math.max(a, b);\n+            var gb = G.uniformFloats(lo, hi);\n+            for (int i = 0; i < 10_000; i++) {\n+                float x = gb.next();\n+                Asserts.assertGreaterThanOrEqual(x, lo);\n+                Asserts.assertLessThan(x, hi);\n+            }\n+        }\n+\n+        var doubleBoundGen = G.uniformDoubles();\n+        for (int j = 0; j < 500; j++) {\n+            double a = doubleBoundGen.next(), b = doubleBoundGen.next();\n+            double lo = Math.min(a, b), hi = Math.max(a, b);\n+            var gb = G.uniformDoubles(lo, hi);\n+            for (int i = 0; i < 10_000; i++) {\n+                double x = gb.next();\n+                Asserts.assertGreaterThanOrEqual(x, lo);\n+                Asserts.assertLessThan(x, hi);\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestGenerators.java","additions":84,"deletions":32,"binary":false,"changes":116,"status":"modified"}]}