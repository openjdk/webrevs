{"files":[{"patch":"@@ -1,122 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package testlibrary_tests.generators.tests;\n-\n-import compiler.lib.generators.RandomnessSource;\n-\n-import java.util.ArrayDeque;\n-import java.util.Queue;\n-\n-class MockRandomness implements RandomnessSource {\n-    private record Bounded<T>(T lo, T hi, T value) {}\n-\n-    private final Queue<Long> unboundedLongQueue = new ArrayDeque<>();\n-    private final Queue<Integer> unboundedIntegerQueue = new ArrayDeque<>();\n-    private final Queue<Bounded<Long>> boundedLongQueue = new ArrayDeque<>();\n-    private final Queue<Bounded<Integer>> boundedIntegerQueue = new ArrayDeque<>();\n-    private final Queue<Bounded<Double>> boundedDoubleQueue = new ArrayDeque<>();\n-    private final Queue<Bounded<Float>> boundedFloatQueue = new ArrayDeque<>();\n-\n-    private <T> T dequeueBounded(Queue<Bounded<T>> queue, T lo, T hi) {\n-        Bounded<T> bounded = queue.remove();\n-        if (!bounded.lo.equals(lo) || !bounded.hi.equals(hi)) {\n-            throw new RuntimeException(\"Expected bounds \" + bounded.lo + \" and \" + bounded.hi + \" but found \" + lo + \" and \" + hi);\n-        }\n-        return bounded.value;\n-    }\n-\n-    private void checkQueueEmpty(Queue<?> queue, String name) {\n-        if (!queue.isEmpty()) throw new RuntimeException(\"Expected empty queue for \" + name + \" but found \" + queue);\n-    }\n-\n-    public MockRandomness enqueueLong(long value) {\n-        unboundedLongQueue.add(value);\n-        return this;\n-    }\n-\n-    public MockRandomness enqueueInteger(int value) {\n-        unboundedIntegerQueue.add(value);\n-        return this;\n-    }\n-\n-    public MockRandomness enqueueLong(long lo, long hi, long value) {\n-        boundedLongQueue.add(new Bounded<>(lo, hi, value));\n-        return this;\n-    }\n-\n-    public MockRandomness enqueueInteger(int lo, int hi, int value) {\n-        boundedIntegerQueue.add(new Bounded<>(lo, hi, value));\n-        return this;\n-    }\n-\n-    public MockRandomness enqueueDouble(double lo, double hi, double value) {\n-        boundedDoubleQueue.add(new Bounded<>(lo, hi, value));\n-        return this;\n-    }\n-\n-    public MockRandomness enqueueFloat(float lo, float hi, float value) {\n-        boundedFloatQueue.add(new Bounded<>(lo, hi, value));\n-        return this;\n-    }\n-\n-    public MockRandomness checkEmpty() {\n-        checkQueueEmpty(unboundedLongQueue, \"unbounded longs\");\n-        checkQueueEmpty(unboundedIntegerQueue, \"unbounded integers\");\n-        checkQueueEmpty(boundedLongQueue, \"bounded longs\");\n-        checkQueueEmpty(boundedIntegerQueue, \"bounded integers\");\n-        checkQueueEmpty(boundedDoubleQueue, \"bounded doubles\");\n-        checkQueueEmpty(boundedFloatQueue, \"bounded floats\");\n-        return this;\n-    }\n-\n-    @Override\n-    public long nextLong() {\n-        return unboundedLongQueue.remove();\n-    }\n-\n-    @Override\n-    public long nextLong(long lo, long hi) {\n-        return dequeueBounded(boundedLongQueue, lo, hi);\n-    }\n-\n-    @Override\n-    public int nextInt() {\n-        return unboundedIntegerQueue.remove();\n-    }\n-\n-    @Override\n-    public int nextInt(int lo, int hi) {\n-        return dequeueBounded(boundedIntegerQueue, lo, hi);\n-    }\n-\n-    @Override\n-    public double nextDouble(double lo, double hi) {\n-        return dequeueBounded(boundedDoubleQueue, lo, hi);\n-    }\n-\n-    @Override\n-    public float nextFloat(float lo, float hi) {\n-        return dequeueBounded(boundedFloatQueue, lo, hi);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/MockRandomness.java","additions":0,"deletions":122,"binary":false,"changes":122,"status":"deleted"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package testlibrary_tests.generators.tests;\n+\n+import compiler.lib.generators.RandomnessSource;\n+\n+import java.util.ArrayDeque;\n+import java.util.Queue;\n+\n+\/**\n+ * This class is a mock for RandomnessSource. For each method defined in {@link RandomnessSource}, it maintains\n+ * a queue. For the methods {@link #nextInt()} and {@link #nextLong()} the queue simply contains ints and longs,\n+ * respectively, and they are dequeue and returned when the methods are called. For the bounded methods, each queue\n+ * element is a value associated with the bounds that are expected for the call. If the actual bounds do not match\n+ * the arguments provided, a RuntimeException is raised. This allows verifying that the correct bounds are passed to\n+ * the randomness source.\n+ * Furthermore, if a method is called and its queue is empty, an exception is raised.\n+ * To ensure all expected methods have been called in a test, you should call {@link #checkEmpty()} in-between tests\n+ * to ensure that queues are empty, that is, all expected methods have been called.\n+ *\/\n+class MockRandomnessSource implements RandomnessSource {\n+    private record Bounded<T>(T lo, T hi, T value) {}\n+\n+    private final Queue<Long> unboundedLongQueue = new ArrayDeque<>();\n+    private final Queue<Integer> unboundedIntegerQueue = new ArrayDeque<>();\n+    private final Queue<Bounded<Long>> boundedLongQueue = new ArrayDeque<>();\n+    private final Queue<Bounded<Integer>> boundedIntegerQueue = new ArrayDeque<>();\n+    private final Queue<Bounded<Double>> boundedDoubleQueue = new ArrayDeque<>();\n+    private final Queue<Bounded<Float>> boundedFloatQueue = new ArrayDeque<>();\n+\n+    private <T> T dequeueBounded(Queue<Bounded<T>> queue, T lo, T hi) {\n+        Bounded<T> bounded = queue.remove();\n+        if (!bounded.lo.equals(lo) || !bounded.hi.equals(hi)) {\n+            throw new RuntimeException(\"Expected bounds \" + bounded.lo + \" and \" + bounded.hi + \" but found \" + lo + \" and \" + hi);\n+        }\n+        return bounded.value;\n+    }\n+\n+    private void checkQueueEmpty(Queue<?> queue, String name) {\n+        if (!queue.isEmpty()) throw new RuntimeException(\"Expected empty queue for \" + name + \" but found \" + queue);\n+    }\n+\n+    public MockRandomnessSource enqueueLong(long value) {\n+        unboundedLongQueue.add(value);\n+        return this;\n+    }\n+\n+    public MockRandomnessSource enqueueInteger(int value) {\n+        unboundedIntegerQueue.add(value);\n+        return this;\n+    }\n+\n+    public MockRandomnessSource enqueueLong(long lo, long hi, long value) {\n+        boundedLongQueue.add(new Bounded<>(lo, hi, value));\n+        return this;\n+    }\n+\n+    public MockRandomnessSource enqueueInteger(int lo, int hi, int value) {\n+        boundedIntegerQueue.add(new Bounded<>(lo, hi, value));\n+        return this;\n+    }\n+\n+    public MockRandomnessSource enqueueDouble(double lo, double hi, double value) {\n+        boundedDoubleQueue.add(new Bounded<>(lo, hi, value));\n+        return this;\n+    }\n+\n+    public MockRandomnessSource enqueueFloat(float lo, float hi, float value) {\n+        boundedFloatQueue.add(new Bounded<>(lo, hi, value));\n+        return this;\n+    }\n+\n+    public MockRandomnessSource checkEmpty() {\n+        checkQueueEmpty(unboundedLongQueue, \"unbounded longs\");\n+        checkQueueEmpty(unboundedIntegerQueue, \"unbounded integers\");\n+        checkQueueEmpty(boundedLongQueue, \"bounded longs\");\n+        checkQueueEmpty(boundedIntegerQueue, \"bounded integers\");\n+        checkQueueEmpty(boundedDoubleQueue, \"bounded doubles\");\n+        checkQueueEmpty(boundedFloatQueue, \"bounded floats\");\n+        return this;\n+    }\n+\n+    @Override\n+    public long nextLong() {\n+        return unboundedLongQueue.remove();\n+    }\n+\n+    @Override\n+    public long nextLong(long lo, long hi) {\n+        return dequeueBounded(boundedLongQueue, lo, hi);\n+    }\n+\n+    @Override\n+    public int nextInt() {\n+        return unboundedIntegerQueue.remove();\n+    }\n+\n+    @Override\n+    public int nextInt(int lo, int hi) {\n+        return dequeueBounded(boundedIntegerQueue, lo, hi);\n+    }\n+\n+    @Override\n+    public double nextDouble(double lo, double hi) {\n+        return dequeueBounded(boundedDoubleQueue, lo, hi);\n+    }\n+\n+    @Override\n+    public float nextFloat(float lo, float hi) {\n+        return dequeueBounded(boundedFloatQueue, lo, hi);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/MockRandomnessSource.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -50,2 +50,2 @@\n-    static MockRandomness mockRandomness = new MockRandomness();\n-    static Generators mockGS = new Generators(mockRandomness);\n+    static MockRandomnessSource mockSource = new MockRandomnessSource();\n+    static Generators mockGS = new Generators(mockSource);\n@@ -71,1 +71,1 @@\n-        mockRandomness\n+        mockSource\n@@ -84,1 +84,1 @@\n-        mockRandomness\n+        mockSource\n@@ -107,1 +107,1 @@\n-        mockRandomness\n+        mockSource\n@@ -117,1 +117,1 @@\n-        mockRandomness\n+        mockSource\n@@ -124,1 +124,1 @@\n-        mockRandomness\n+        mockSource\n@@ -137,1 +137,1 @@\n-        mockRandomness\n+        mockSource\n@@ -152,1 +152,1 @@\n-        mockRandomness\n+        mockSource\n@@ -164,1 +164,1 @@\n-        mockRandomness\n+        mockSource\n@@ -176,1 +176,1 @@\n-        mockRandomness.checkEmpty().enqueueFloat(-1, 10, 3.14159f);\n+        mockSource.checkEmpty().enqueueFloat(-1, 10, 3.14159f);\n@@ -178,1 +178,1 @@\n-        mockRandomness.checkEmpty().enqueueFloat(0, 1, 3.14159f);\n+        mockSource.checkEmpty().enqueueFloat(0, 1, 3.14159f);\n@@ -191,1 +191,1 @@\n-        mockRandomness.checkEmpty().enqueueDouble(-1, 10, 3.14159d);\n+        mockSource.checkEmpty().enqueueDouble(-1, 10, 3.14159d);\n@@ -193,1 +193,1 @@\n-        mockRandomness.checkEmpty().enqueueDouble(0, 1, 3.14159d);\n+        mockSource.checkEmpty().enqueueDouble(0, 1, 3.14159d);\n@@ -206,1 +206,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 3, 1).enqueueInteger(0, 3, 0);\n+        mockSource.checkEmpty().enqueueInteger(0, 3, 1).enqueueInteger(0, 3, 0);\n@@ -211,1 +211,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 8, 1).enqueueInteger(0, 8, 2);\n+        mockSource.checkEmpty().enqueueInteger(0, 8, 1).enqueueInteger(0, 8, 2);\n@@ -219,1 +219,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 3, 1).enqueueInteger(0, 3, 2);\n+        mockSource.checkEmpty().enqueueInteger(0, 3, 1).enqueueInteger(0, 3, 2);\n@@ -225,1 +225,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 2, 1);\n+        mockSource.checkEmpty().enqueueInteger(0, 2, 1);\n@@ -231,1 +231,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 63, 1).enqueueInteger(0, 63, 32);\n+        mockSource.checkEmpty().enqueueInteger(0, 63, 1).enqueueInteger(0, 63, 32);\n@@ -236,1 +236,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 182, 1);\n+        mockSource.checkEmpty().enqueueInteger(0, 182, 1);\n@@ -242,1 +242,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 127, 1).enqueueInteger(0, 127, 64);\n+        mockSource.checkEmpty().enqueueInteger(0, 127, 1).enqueueInteger(0, 127, 64);\n@@ -247,1 +247,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 374, 1);\n+        mockSource.checkEmpty().enqueueInteger(0, 374, 1);\n@@ -253,1 +253,1 @@\n-        mockRandomness.checkEmpty();\n+        mockSource.checkEmpty();\n@@ -269,1 +269,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 11, 1).enqueueInteger(0, 11, 4);\n+        mockSource.checkEmpty().enqueueInteger(0, 11, 1).enqueueInteger(0, 11, 4);\n@@ -274,1 +274,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(0, 1, 0).enqueueInteger(0, 1, 0);\n+        mockSource.checkEmpty().enqueueInteger(0, 1, 0).enqueueInteger(0, 1, 0);\n@@ -279,1 +279,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(-1, Integer.MAX_VALUE, 10);\n+        mockSource.checkEmpty().enqueueInteger(-1, Integer.MAX_VALUE, 10);\n@@ -282,1 +282,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(Integer.MIN_VALUE, 13, -33);\n+        mockSource.checkEmpty().enqueueInteger(Integer.MIN_VALUE, 13, -33);\n@@ -285,1 +285,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(11);\n+        mockSource.checkEmpty().enqueueInteger(11);\n@@ -288,1 +288,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(10, 29, 17);\n+        mockSource.checkEmpty().enqueueInteger(10, 29, 17);\n@@ -291,1 +291,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(19, 29, 17);\n+        mockSource.checkEmpty().enqueueInteger(19, 29, 17);\n@@ -295,1 +295,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(12, 19, 17);\n+        mockSource.checkEmpty().enqueueInteger(12, 19, 17);\n@@ -299,1 +299,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(-18, -11, -17);\n+        mockSource.checkEmpty().enqueueInteger(-18, -11, -17);\n@@ -303,1 +303,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(10, 13, 11);\n+        mockSource.checkEmpty().enqueueInteger(10, 13, 11);\n@@ -307,1 +307,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(-12, -9, -11);\n+        mockSource.checkEmpty().enqueueInteger(-12, -9, -11);\n@@ -311,1 +311,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(17, 21, 19);\n+        mockSource.checkEmpty().enqueueInteger(17, 21, 19);\n@@ -315,1 +315,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(-20, -16, -19);\n+        mockSource.checkEmpty().enqueueInteger(-20, -16, -19);\n@@ -318,1 +318,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(144);\n+        mockSource.checkEmpty().enqueueInteger(144);\n@@ -321,1 +321,1 @@\n-        mockRandomness.checkEmpty();\n+        mockSource.checkEmpty();\n@@ -333,1 +333,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(0, 11, 1).enqueueLong(0, 11, 4);\n+        mockSource.checkEmpty().enqueueLong(0, 11, 1).enqueueLong(0, 11, 4);\n@@ -338,1 +338,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(0, 1, 0).enqueueLong(0, 1, 0);\n+        mockSource.checkEmpty().enqueueLong(0, 1, 0).enqueueLong(0, 1, 0);\n@@ -343,1 +343,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(-1, Long.MAX_VALUE, 10);\n+        mockSource.checkEmpty().enqueueLong(-1, Long.MAX_VALUE, 10);\n@@ -346,1 +346,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(Long.MIN_VALUE, 13, -33);\n+        mockSource.checkEmpty().enqueueLong(Long.MIN_VALUE, 13, -33);\n@@ -349,1 +349,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(11);\n+        mockSource.checkEmpty().enqueueLong(11);\n@@ -352,1 +352,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(10, 29, 17);\n+        mockSource.checkEmpty().enqueueLong(10, 29, 17);\n@@ -355,1 +355,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(19, 29, 17);\n+        mockSource.checkEmpty().enqueueLong(19, 29, 17);\n@@ -358,1 +358,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(144);\n+        mockSource.checkEmpty().enqueueLong(144);\n@@ -361,1 +361,1 @@\n-        mockRandomness.checkEmpty();\n+        mockSource.checkEmpty();\n@@ -373,1 +373,1 @@\n-        mockRandomness.checkEmpty().enqueueInteger(Float.floatToIntBits(3.14159f));\n+        mockSource.checkEmpty().enqueueInteger(Float.floatToIntBits(3.14159f));\n@@ -376,1 +376,1 @@\n-        mockRandomness.checkEmpty().enqueueLong(Double.doubleToLongBits(3.14159d));\n+        mockSource.checkEmpty().enqueueLong(Double.doubleToLongBits(3.14159d));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestGenerators.java","additions":49,"deletions":49,"binary":false,"changes":98,"status":"modified"}]}