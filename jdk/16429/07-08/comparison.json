{"files":[{"patch":"@@ -172,1 +172,0 @@\n-class Unique_Node_List;\n@@ -1132,5 +1131,8 @@\n-  \/\/ Visit all uses of the node and apply callback, bypassing nodes\n-  \/\/ according to bypass. Note: definition appears after complete type\n-  \/\/ definition of Unique_Node_List\n-  template <typename Callback, typename Bypass>\n-  void visit_uses(Callback callback, Bypass bypass);\n+  \/\/ Visit boundary uses of the node and apply a callback function for each.\n+  \/\/ Recursively traverse uses, stopping and applying the callback when\n+  \/\/ reaching a boundary node, defined by is_boundary. Does NOT guarantee that\n+  \/\/ we visit boundary nodes only once.\n+  \/\/ Note: the function definition appears after the complete type definition\n+  \/\/ of Unique_Node_List.\n+  template <typename Callback, typename Check>\n+  void visit_uses(Callback callback, Check is_boundary);\n@@ -1144,1 +1146,1 @@\n-     visit_uses(callback, [](Node* n){ return n->is_ConstraintCast(); });\n+     visit_uses(callback, [](Node* n){ return !n->is_ConstraintCast(); });\n@@ -1732,2 +1734,2 @@\n-template <typename Callback, typename Bypass>\n-void Node::visit_uses(Callback callback, Bypass bypass) {\n+template <typename Callback, typename Check>\n+void Node::visit_uses(Callback callback, Check is_boundary) {\n@@ -1741,3 +1743,1 @@\n-      if (bypass(internal_use)) {\n-        internals.push(internal_use); \/\/ traverse this also\n-      } else {\n+      if (is_boundary(internal_use)) {\n@@ -1745,0 +1745,2 @@\n+      } else {\n+        internals.push(internal_use); \/\/ continue traversal\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1988,2 +1988,2 @@\n-    auto bypass = [](Node* n) {\n-      return n->is_ConstraintCast() || n->Opcode() == Op_ConvI2L;\n+    auto is_boundary = [](Node* n) {\n+      return !(n->is_ConstraintCast() || n->Opcode() == Op_ConvI2L);\n@@ -1991,1 +1991,1 @@\n-    use->visit_uses(push_and_uses_to_worklist, bypass);\n+    use->visit_uses(push_and_uses_to_worklist, is_boundary);\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}