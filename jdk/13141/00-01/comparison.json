{"files":[{"patch":"@@ -777,4 +777,3 @@\n-  static unsigned int hash(NameSigHash* const& namesig) {\n-    unsigned int raw_hash = 0;\n-    raw_hash += ((unsigned int)(uintptr_t)namesig->_name) >> (LogHeapWordSize + 2);\n-    raw_hash += ((unsigned int)(uintptr_t)namesig->_sig) >> LogHeapWordSize;\n+  NameSigHash() :\n+    _name(nullptr),\n+    _sig(nullptr) {}\n@@ -782,1 +781,6 @@\n-    return (raw_hash + (unsigned int)(uintptr_t)namesig->_name) % HASH_ROW_SIZE;\n+  NameSigHash(Symbol* name, Symbol* sig) :\n+    _name(name),\n+    _sig(sig) {}\n+\n+  static unsigned int hash(NameSigHash const& namesig) {\n+    return namesig._name->identity_hash() ^ (namesig._sig == nullptr ? 0 : namesig._sig->identity_hash());\n@@ -785,3 +789,3 @@\n-  static bool equals(NameSigHash* const& e0, NameSigHash* const& e1) {\n-    return (e0->_name == e1->_name) &&\n-          (e0->_sig  == e1->_sig);\n+  static bool equals(NameSigHash const& e0, NameSigHash const& e1) {\n+    return (e0._name == e1._name) &&\n+          (e0._sig  == e1._sig);\n@@ -791,1 +795,1 @@\n-using NameSigHashtable = ResourceHashtable<NameSigHash*, int,\n+using NameSigHashtable = ResourceHashtable<NameSigHash, int,\n@@ -862,10 +866,8 @@\n-    bool dup = true;\n-    NameSigHash* interface_name = nullptr;\n-    {\n-      debug_only(NoSafepointVerifier nsv;)\n-      for (index = 0; (index < itfs_len) && dup; index++) {\n-        const InstanceKlass* const k = _local_interfaces->at(index);\n-        interface_name = new NameSigHash();\n-        interface_name->_name = k->name();\n-        \/\/ If no duplicates, add (name, nullptr) in hashtable interface_names.\n-        interface_names->put_if_absent(interface_name, &dup);\n+    NameSigHash interface_name;\n+    for (index = 0; index < itfs_len; index++) {\n+      const InstanceKlass* const k = _local_interfaces->at(index);\n+      interface_name = NameSigHash(k->name(), nullptr);\n+      \/\/ If no duplicates, add (name, nullptr) in hashtable interface_names.\n+      if (!interface_names->put(interface_name, 0)) {\n+        classfile_parse_error(\"Duplicate interface name \\\"%s\\\" in class file %s\",\n+                               interface_name._name->as_C_string(), THREAD);\n@@ -874,4 +876,0 @@\n-    if (!dup) {\n-      classfile_parse_error(\"Duplicate interface name \\\"%s\\\" in class file %s\",\n-                             interface_name->_name->as_C_string(), THREAD);\n-    }\n@@ -1597,10 +1595,8 @@\n-    bool dup = true;\n-    NameSigHash* name_and_sig = nullptr;\n-    {\n-      debug_only(NoSafepointVerifier nsv;)\n-      for (int i = 0; (i < _temp_field_info->length()) && dup; i++) {\n-        name_and_sig = new NameSigHash();\n-        name_and_sig->_name = _temp_field_info->adr_at(i)->name(_cp);\n-        name_and_sig->_sig = _temp_field_info->adr_at(i)->signature(_cp);\n-        \/\/ If no duplicates, add name\/signature in hashtable names_and_sigs.\n-        names_and_sigs->put_if_absent(name_and_sig, &dup);\n+    NameSigHash name_and_sig;\n+    for (int i = 0; i < _temp_field_info->length(); i++) {\n+      name_and_sig = NameSigHash(_temp_field_info->adr_at(i)->name(_cp),\n+                                  _temp_field_info->adr_at(i)->signature(_cp));\n+      \/\/ If no duplicates, add name\/signature in hashtable names_and_sigs.\n+      if(!names_and_sigs->put(name_and_sig, 0)) {\n+        classfile_parse_error(\"Duplicate field name \\\"%s\\\" with signature \\\"%s\\\" in class file %s\",\n+                               name_and_sig._name->as_C_string(), name_and_sig._sig->as_klass_external_name(), THREAD);\n@@ -1609,4 +1605,0 @@\n-    if (!dup) {\n-      classfile_parse_error(\"Duplicate field name \\\"%s\\\" with signature \\\"%s\\\" in class file %s\",\n-                             name_and_sig->_name->as_C_string(), name_and_sig->_sig->as_klass_external_name(), THREAD);\n-    }\n@@ -2843,11 +2835,8 @@\n-      bool dup = true;\n-      NameSigHash* name_and_sig = nullptr;\n-      {\n-        debug_only(NoSafepointVerifier nsv;)\n-        for (int i = 0; (i < length) && dup; i++) {\n-          name_and_sig = new NameSigHash();\n-          const Method* const m = _methods->at(i);\n-          name_and_sig->_name = m->name();\n-          name_and_sig->_sig = m->signature();\n-          \/\/ If no duplicates, add name\/signature in hashtable names_and_sigs.\n-          names_and_sigs->put_if_absent(name_and_sig, &dup);\n+      NameSigHash name_and_sig;\n+      for (int i = 0; i < length; i++) {\n+        const Method* const m = _methods->at(i);\n+        name_and_sig = NameSigHash(m->name(), m->signature());\n+        \/\/ If no duplicates, add name\/signature in hashtable names_and_sigs.\n+        if(!names_and_sigs->put(name_and_sig, 0)) {\n+          classfile_parse_error(\"Duplicate method name \\\"%s\\\" with signature \\\"%s\\\" in class file %s\",\n+                                 name_and_sig._name->as_C_string(), name_and_sig._sig->as_klass_external_name(), THREAD);\n@@ -2856,4 +2845,0 @@\n-      if (!dup) {\n-        classfile_parse_error(\"Duplicate method name \\\"%s\\\" with signature \\\"%s\\\" in class file %s\",\n-                               name_and_sig->_name->as_C_string(), name_and_sig->_sig->as_klass_external_name(), THREAD);\n-      }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":37,"deletions":52,"binary":false,"changes":89,"status":"modified"}]}