{"files":[{"patch":"@@ -774,4 +774,0 @@\n-  NameSigHash*  _next;             \/\/ Next entry in hash table\n-};\n-\n-static const int HASH_ROW_SIZE = 256;\n@@ -779,4 +775,1 @@\n-static unsigned int hash(const Symbol* name, const Symbol* sig) {\n-  unsigned int raw_hash = 0;\n-  raw_hash += ((unsigned int)(uintptr_t)name) >> (LogHeapWordSize + 2);\n-  raw_hash += ((unsigned int)(uintptr_t)sig) >> LogHeapWordSize;\n+  static const int HASH_ROW_SIZE = 256;\n@@ -784,2 +777,4 @@\n-  return (raw_hash + (unsigned int)(uintptr_t)name) % HASH_ROW_SIZE;\n-}\n+  static unsigned int hash(NameSigHash* const& namesig) {\n+    unsigned int raw_hash = 0;\n+    raw_hash += ((unsigned int)(uintptr_t)namesig->_name) >> (LogHeapWordSize + 2);\n+    raw_hash += ((unsigned int)(uintptr_t)namesig->_sig) >> LogHeapWordSize;\n@@ -787,20 +782,1 @@\n-\n-static void initialize_hashtable(NameSigHash** table) {\n-  memset((void*)table, 0, sizeof(NameSigHash*) * HASH_ROW_SIZE);\n-}\n-\/\/ Return false if the name\/sig combination is found in table.\n-\/\/ Return true if no duplicate is found. And name\/sig is added as a new entry in table.\n-\/\/ The old format checker uses heap sort to find duplicates.\n-\/\/ NOTE: caller should guarantee that GC doesn't happen during the life cycle\n-\/\/ of table since we don't expect Symbol*'s to move.\n-static bool put_after_lookup(const Symbol* name, const Symbol* sig, NameSigHash** table) {\n-  assert(name != nullptr, \"name in constant pool is null\");\n-\n-  \/\/ First lookup for duplicates\n-  int index = hash(name, sig);\n-  NameSigHash* entry = table[index];\n-  while (entry != nullptr) {\n-    if (entry->_name == name && entry->_sig == sig) {\n-      return false;\n-    }\n-    entry = entry->_next;\n+    return (raw_hash + (unsigned int)(uintptr_t)namesig->_name) % HASH_ROW_SIZE;\n@@ -809,4 +785,5 @@\n-  \/\/ No duplicate is found, allocate a new entry and fill it.\n-  entry = new NameSigHash();\n-  entry->_name = name;\n-  entry->_sig = sig;\n+  static bool equals(NameSigHash* const& e0, NameSigHash* const& e1) {\n+    return (e0->_name == e1->_name) &&\n+          (e0->_sig  == e1->_sig);\n+  }\n+};\n@@ -814,6 +791,4 @@\n-  \/\/ Insert into hash table\n-  entry->_next = table[index];\n-  table[index] = entry;\n-\n-  return true;\n-}\n+using NameSigHashtable = ResourceHashtable<NameSigHash*, int,\n+                                           NameSigHash::HASH_ROW_SIZE,\n+                                           AnyObj::RESOURCE_AREA, mtInternal,\n+                                           &NameSigHash::hash, &NameSigHash::equals>;\n@@ -885,6 +860,4 @@\n-    NameSigHash** interface_names = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD,\n-                                                                 NameSigHash*,\n-                                                                 HASH_ROW_SIZE);\n-    initialize_hashtable(interface_names);\n-    bool dup = false;\n-    const Symbol* name = nullptr;\n+    \/\/ Set containing interface names\n+    NameSigHashtable* interface_names = new NameSigHashtable();\n+    bool dup = true;\n+    NameSigHash* interface_name = nullptr;\n@@ -893,1 +866,1 @@\n-      for (index = 0; index < itfs_len; index++) {\n+      for (index = 0; (index < itfs_len) && dup; index++) {\n@@ -895,1 +868,2 @@\n-        name = k->name();\n+        interface_name = new NameSigHash();\n+        interface_name->_name = k->name();\n@@ -897,4 +871,1 @@\n-        if (!put_after_lookup(name, nullptr, interface_names)) {\n-          dup = true;\n-          break;\n-        }\n+        interface_names->put_if_absent(interface_name, &dup);\n@@ -903,1 +874,1 @@\n-    if (dup) {\n+    if (!dup) {\n@@ -905,1 +876,1 @@\n-                             name->as_C_string(), THREAD);\n+                             interface_name->_name->as_C_string(), THREAD);\n@@ -1624,6 +1595,4 @@\n-    NameSigHash** names_and_sigs = NEW_RESOURCE_ARRAY_IN_THREAD(\n-      THREAD, NameSigHash*, HASH_ROW_SIZE);\n-    initialize_hashtable(names_and_sigs);\n-    bool dup = false;\n-    const Symbol* name = nullptr;\n-    const Symbol* sig = nullptr;\n+    \/\/ Set containing name-signature pairs\n+    NameSigHashtable* names_and_sigs = new NameSigHashtable();\n+    bool dup = true;\n+    NameSigHash* name_and_sig = nullptr;\n@@ -1632,3 +1601,4 @@\n-      for (int i = 0; i < _temp_field_info->length(); i++) {\n-        name = _temp_field_info->adr_at(i)->name(_cp);\n-        sig = _temp_field_info->adr_at(i)->signature(_cp);\n+      for (int i = 0; (i < _temp_field_info->length()) && dup; i++) {\n+        name_and_sig = new NameSigHash();\n+        name_and_sig->_name = _temp_field_info->adr_at(i)->name(_cp);\n+        name_and_sig->_sig = _temp_field_info->adr_at(i)->signature(_cp);\n@@ -1636,4 +1606,1 @@\n-        if (!put_after_lookup(name, sig, names_and_sigs)) {\n-          dup = true;\n-          break;\n-        }\n+        names_and_sigs->put_if_absent(name_and_sig, &dup);\n@@ -1642,1 +1609,1 @@\n-    if (dup) {\n+    if (!dup) {\n@@ -1644,1 +1611,1 @@\n-                             name->as_C_string(), sig->as_klass_external_name(), THREAD);\n+                             name_and_sig->_name->as_C_string(), name_and_sig->_sig->as_klass_external_name(), THREAD);\n@@ -2874,6 +2841,4 @@\n-      NameSigHash** names_and_sigs = NEW_RESOURCE_ARRAY_IN_THREAD(\n-        THREAD, NameSigHash*, HASH_ROW_SIZE);\n-      initialize_hashtable(names_and_sigs);\n-      bool dup = false;\n-      const Symbol* name = nullptr;\n-      const Symbol* sig = nullptr;\n+      \/\/ Set containing name-signature pairs\n+      NameSigHashtable* names_and_sigs = new NameSigHashtable();\n+      bool dup = true;\n+      NameSigHash* name_and_sig = nullptr;\n@@ -2882,1 +2847,2 @@\n-        for (int i = 0; i < length; i++) {\n+        for (int i = 0; (i < length) && dup; i++) {\n+          name_and_sig = new NameSigHash();\n@@ -2884,2 +2850,2 @@\n-          name = m->name();\n-          sig = m->signature();\n+          name_and_sig->_name = m->name();\n+          name_and_sig->_sig = m->signature();\n@@ -2887,4 +2853,1 @@\n-          if (!put_after_lookup(name, sig, names_and_sigs)) {\n-            dup = true;\n-            break;\n-          }\n+          names_and_sigs->put_if_absent(name_and_sig, &dup);\n@@ -2893,1 +2856,1 @@\n-      if (dup) {\n+      if (!dup) {\n@@ -2895,1 +2858,1 @@\n-                               name->as_C_string(), sig->as_klass_external_name(), THREAD);\n+                               name_and_sig->_name->as_C_string(), name_and_sig->_sig->as_klass_external_name(), THREAD);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":47,"deletions":84,"binary":false,"changes":131,"status":"modified"}]}