{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.io.IOError;\n@@ -36,0 +37,1 @@\n+import java.nio.file.InvalidPathException;\n@@ -38,1 +40,0 @@\n-import java.util.Arrays;\n@@ -41,0 +42,1 @@\n+import java.util.Optional;\n@@ -112,0 +114,6 @@\n+ *\n+ * Note\n+ * ====\n+ *\n+ * If any of these tests cannot find a valid Object.java file in the test\n+ * environment, they will throw jtreg.SkippedException.\n@@ -139,14 +147,1 @@\n-        Path p = Path.of(System.getProperty(\"test.src\", \".\")).toAbsolutePath();\n-        while (!Files.exists(p.resolve(\"TEST.ROOT\"))) {\n-            p = p.getParent();\n-            if (p == null) {\n-                throw new SkippedException(\"can't find TEST.ROOT\");\n-            }\n-        }\n-        out.println(\"Test suite root: \" + p);\n-        Path javaBase = p.resolve(\"..\/..\/src\/java.base\").normalize();\n-        if (!Files.exists(javaBase)) {\n-            throw new SkippedException(\"can't find java.base\");\n-        }\n-        out.println(\"java.base: \" + javaBase);\n-\n+        var javaBase = findJavaBase();\n@@ -268,14 +263,1 @@\n-        Path p = Path.of(System.getProperty(\"test.src\", \".\")).toAbsolutePath();\n-        while (!Files.exists(p.resolve(\"TEST.ROOT\"))) {\n-            p = p.getParent();\n-            if (p == null) {\n-                throw new SkippedException(\"can't find TEST.ROOT\");\n-            }\n-        }\n-        System.err.println(\"Test suite root: \" + p);\n-        Path javaBase = p.resolve(\"..\/..\/src\/java.base\").normalize();\n-        if (!Files.exists(javaBase)) {\n-            throw new SkippedException(\"can't find java.base\");\n-        }\n-        System.err.println(\"java.base: \" + javaBase);\n-\n+        var javaBase = findJavaBase();\n@@ -309,14 +291,1 @@\n-        Path p = Path.of(System.getProperty(\"test.src\", \".\")).toAbsolutePath();\n-        while (!Files.exists(p.resolve(\"TEST.ROOT\"))) {\n-            p = p.getParent();\n-            if (p == null) {\n-                throw new SkippedException(\"can't find TEST.ROOT\");\n-            }\n-        }\n-        System.err.println(\"Test suite root: \" + p);\n-        Path javaBase = p.resolve(\"..\/..\/src\/java.base\").normalize();\n-        if (!Files.exists(javaBase)) {\n-            throw new SkippedException(\"can't find java.base\");\n-        }\n-        System.err.println(\"java.base: \" + javaBase);\n-\n+        var javaBase = findJavaBase();\n@@ -421,4 +390,1 @@\n-     * Takes a path to the java.base module, finds the Object.java file in\n-     * there, creates a copy of that file _with the modified doc comment_\n-     * for Object.equals in the provided destination directory and returns\n-     * the path to that created copy.\n+     * Locates source of the java.base module.\n@@ -426,4 +392,5 @@\n-    private Path createPatchedJavaLangObject(Path src, Path dst, String newComment)\n-            throws IOException {\n-        if (!Files.isDirectory(src) || !Files.isDirectory(dst)) {\n-            throw new IllegalArgumentException();\n+    private Path findJavaBase() {\n+        String testSrc = System.getProperty(\"test.src\");\n+        if (testSrc == null) {\n+            \/\/ shouldn't happen\n+            throw new SkippedException(\"test.src is not set\");\n@@ -431,6 +398,5 @@\n-        var obj = Path.of(\"java\/lang\/Object.java\");\n-        List<Path> files;\n-        \/\/ ensure Object.java is found and unique\n-        try (var s = Files.find(src, Integer.MAX_VALUE,\n-                (p, attr) -> attr.isRegularFile() && p.endsWith(obj))) {\n-            files = s.limit(2).toList(); \/\/ 2 is enough to deduce non-uniqueness\n+        Path start;\n+        try {\n+            start = Path.of(testSrc).toAbsolutePath();\n+        } catch (InvalidPathException | IOError e) {\n+            throw new SkippedException(\"Couldn't make sense of '\" + testSrc + \"'\", e);\n@@ -438,2 +404,7 @@\n-        if (files.size() != 1) {\n-            throw new IllegalStateException(Arrays.toString(files.toArray()));\n+        Path p = start;\n+        while (!Files.exists(p.resolve(\"TEST.ROOT\"))) {\n+            p = p.getParent();\n+            if (p == null) {\n+                \/\/ shouldn't happen as jtreg won't even run a test without TEST.ROOT\n+                throw new SkippedException(\"Couldn't find TEST.ROOT above '\" + start + \"'\");\n+            }\n@@ -441,13 +412,38 @@\n-        var original = files.get(0);\n-        out.println(\"found \" + original.toAbsolutePath());\n-        var source = Files.readString(original);\n-        var region = findDocCommentRegion(original);\n-        var newSource = source.substring(0, region.start)\n-                + newComment\n-                + source.substring(region.end);\n-        \/\/ create intermediate directories in the destination first, otherwise\n-        \/\/ writeString will throw java.nio.file.NoSuchFileException\n-        var copy = dst.resolve(src.relativize(original));\n-        out.println(\"to be copied to \" + copy);\n-        if (Files.notExists(copy.getParent())) {\n-            Files.createDirectories(copy.getParent());\n+        Path javaBase = p.resolve(\"..\/..\/src\/java.base\").normalize();\n+        out.println(\"Source for java.base is found at: \" + javaBase);\n+        return javaBase;\n+    }\n+\n+    \/*\n+     * Finds java\/lang\/Object.java rooted at src, creates a copy of that file\n+     * _with the modified doc comment_ for Object.equals in dst, and returns\n+     * the path to that copy.\n+     *\/\n+    private Path createPatchedJavaLangObject(Path src, Path dst, String newComment) {\n+        var obj = Path.of(\"java\/lang\/Object.java\");\n+        try {\n+            Optional<Path> files;\n+            try (var s = Files.find(src, Integer.MAX_VALUE,\n+                    (p, attr) -> attr.isRegularFile() && p.endsWith(obj))) {\n+                files = s.findAny();\n+            }\n+            if (files.isEmpty()) {\n+                throw new SkippedException(\"Couldn't find '\" + obj + \"' at '\" + src + \"'\");\n+            }\n+            var original = files.get();\n+            out.println(\"Found '\" + obj + \"' at \" + original.toAbsolutePath());\n+            var source = Files.readString(original);\n+            var region = findDocCommentRegion(original);\n+            var newSource = source.substring(0, region.start)\n+                    + newComment\n+                    + source.substring(region.end);\n+            \/\/ create intermediate directories in the destination first, otherwise\n+            \/\/ writeString will throw java.nio.file.NoSuchFileException\n+            var copy = dst.resolve(src.relativize(original));\n+            out.println(\"To be copied to '\" + copy + \"'\");\n+            if (Files.notExists(copy.getParent())) {\n+                Files.createDirectories(copy.getParent());\n+            }\n+            return Files.writeString(copy, newSource, StandardOpenOption.CREATE);\n+        } catch (IOException e) {\n+            throw new SkippedException(\"Couldn't create patched '\" + obj + \"'\", e);\n@@ -455,1 +451,0 @@\n-        return Files.writeString(copy, newSource, StandardOpenOption.CREATE);\n@@ -467,1 +462,1 @@\n-            throw new AssertionError();\n+            throw new SkippedException(\"Couldn't parse '\" + src + \"'\");\n@@ -471,0 +466,3 @@\n+        if (pathToEqualsMethod == null) {\n+            throw new SkippedException(\"Couldn't find the equals method in '\" + src + \"'\");\n+        }\n@@ -473,2 +471,3 @@\n-        if (docCommentTree == null)\n-            throw new AssertionError(\"cannot find the doc comment for java.lang.Object#equals\");\n+        if (docCommentTree == null) {\n+            throw new SkippedException(\"Couldn't find documentation for the equals method at '\" + src + \"'\");\n+        }\n@@ -513,1 +512,1 @@\n-                var parameterType = params.get(0).getType();\n+                var parameterType = params.getFirst().getType();\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMethodCommentAlgorithm\/TestMethodCommentsAlgorithm.java","additions":77,"deletions":78,"binary":false,"changes":155,"status":"modified"}]}