{"files":[{"patch":"@@ -3811,2 +3811,3 @@\n-  \/\/ SVE copy signed integer immediate to vector elements (predicated)\n-  void sve_cpy(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg, int imm8, bool isMerge) {\n+private:\n+  void sve_cpy(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg, int imm8,\n+               bool isMerge, bool isFloat) {\n@@ -3816,1 +3817,5 @@\n-    if (imm8 <= 127 && imm8 >= -128) {\n+    if (isFloat) {\n+      assert(T != B, \"invalid size\");\n+      assert((imm8 >> 8) == 0, \"invalid immediate\");\n+      sh = 0;\n+    } else if (imm8 <= 127 && imm8 >= -128) {\n@@ -3826,1 +3831,1 @@\n-    prf(Pg, 16), f(0, 15), f(m, 14), f(sh, 13), sf(imm8, 12, 5), rf(Zd, 0);\n+    prf(Pg, 16), f(isFloat ? 1 : 0, 15), f(m, 14), f(sh, 13), f(imm8&0xff, 12, 5), rf(Zd, 0);\n@@ -3829,0 +3834,5 @@\n+public:\n+  \/\/ SVE copy signed integer immediate to vector elements (predicated)\n+  void sve_cpy(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg, int imm8, bool isMerge) {\n+    sve_cpy(Zd, T, Pg, imm8, isMerge, \/*isFloat*\/false);\n+  }\n@@ -3830,7 +3840,2 @@\n-  void sve_fcpy(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg, double d) {\n-    starti;\n-    assert(T != B && T != Q, \"invalid size\");\n-    unsigned int imm8 = pack(d);\n-    assert(imm8 >> 8 == 0, \"invalid immediate\");\n-    f(0b00000101, 31, 24), f(T, 23, 22), f(0b01, 21, 20);\n-    prf(Pg, 16), f(0b110, 15, 13), f(imm8, 12, 5), rf(Zd, 0);\n+  void sve_cpy(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg, double d) {\n+    sve_cpy(Zd, T, Pg, checked_cast<uint8_t>(pack(d)), \/*isMerge*\/true, \/*isFloat*\/true);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2494,1 +2494,1 @@\n-    sve_fcpy(tmp1, T, pgtmp, 0.5);\n+    sve_cpy(tmp1, T, pgtmp, 0.5);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1961,2 +1961,2 @@\n-                        [\"fcpy\",      \"__ sve_fcpy(z11, __ S, p0, 0.5);\",                  \"fcpy\\tz11.s, p0\/m, #0.5\"],\n-                        [\"fcpy\",      \"__ sve_fcpy(z11, __ S, p0, -1.0);\",                 \"fcpy\\tz11.s, p0\/m, #-1.0\"],\n+                        [\"fcpy\",     \"__ sve_cpy(z11, __ S, p0, 0.5);\",                    \"fcpy\\tz11.s, p0\/m, #0.5\"],\n+                        [\"fcpy\",     \"__ sve_cpy(z11, __ S, p0, -1.0);\",                   \"fcpy\\tz11.s, p0\/m, #-1.0\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -974,2 +974,2 @@\n-    __ sve_fcpy(z11, __ S, p0, 0.5);                   \/\/       fcpy    z11.s, p0\/m, #0.5\n-    __ sve_fcpy(z11, __ S, p0, -1.0);                  \/\/       fcpy    z11.s, p0\/m, #-1.0\n+    __ sve_cpy(z11, __ S, p0, 0.5);                    \/\/       fcpy    z11.s, p0\/m, #0.5\n+    __ sve_cpy(z11, __ S, p0, -1.0);                   \/\/       fcpy    z11.s, p0\/m, #-1.0\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}