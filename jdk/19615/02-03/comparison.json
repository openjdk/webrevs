{"files":[{"patch":"@@ -94,3 +94,1 @@\n-    private static final String\n-            NAME_LOOKUP_ACCESSOR = \"proxyClassLookup\";\n-\n+    private static final String NAME_LOOKUP_ACCESSOR = \"proxyClassLookup\";\n@@ -132,1 +130,1 @@\n-    private final ClassEntry objectCe, proxyCe, uteCe, classCe;\n+    private final ClassEntry objectCE, proxyCE, uteCE, classCE;\n@@ -139,1 +137,1 @@\n-     * Name of proxy class\n+     * ClassEntry for this proxy class\n@@ -141,1 +139,1 @@\n-    private final ClassEntry thisClass;\n+    private final ClassEntry thisClassCE;\n@@ -176,1 +174,1 @@\n-        this.thisClass = cp.classEntry(ConstantUtils.binaryNameToDesc(className));\n+        this.thisClassCE = cp.classEntry(ConstantUtils.binaryNameToDesc(className));\n@@ -183,4 +181,4 @@\n-        this.objectCe = cp.classEntry(CD_Object);\n-        this.proxyCe = cp.classEntry(CD_Proxy);\n-        this.classCe = cp.classEntry(CD_Class);\n-        this.handlerField = cp.fieldRefEntry(proxyCe, cp.nameAndTypeEntry(NAME_HANDLER_FIELD, CD_InvocationHandler));\n+        this.objectCE = cp.classEntry(CD_Object);\n+        this.proxyCE = cp.classEntry(CD_Proxy);\n+        this.classCE = cp.classEntry(CD_Class);\n+        this.handlerField = cp.fieldRefEntry(proxyCE, cp.nameAndTypeEntry(NAME_HANDLER_FIELD, CD_InvocationHandler));\n@@ -188,4 +186,4 @@\n-        this.uteCe = cp.classEntry(CD_UndeclaredThrowableException);\n-        this.uteInit = cp.methodRefEntry(uteCe, cp.nameAndTypeEntry(INIT_NAME, MTD_void_Throwable));\n-        this.classGetMethod = cp.methodRefEntry(classCe, cp.nameAndTypeEntry(\"getMethod\", MTD_Method_String_Class_array));\n-        this.classForName = cp.methodRefEntry(classCe, cp.nameAndTypeEntry(\"forName\", MTD_Class_String_boolean_ClassLoader));\n+        this.uteCE = cp.classEntry(CD_UndeclaredThrowableException);\n+        this.uteInit = cp.methodRefEntry(uteCE, cp.nameAndTypeEntry(INIT_NAME, MTD_void_Throwable));\n+        this.classGetMethod = cp.methodRefEntry(classCE, cp.nameAndTypeEntry(\"getMethod\", MTD_Method_String_Class_array));\n+        this.classForName = cp.methodRefEntry(classCE, cp.nameAndTypeEntry(\"forName\", MTD_Class_String_boolean_ClassLoader));\n@@ -474,2 +472,2 @@\n-        return CF_CONTEXT.build(thisClass, cp, clb -> {\n-            clb.withSuperclass(proxyCe);\n+        return CF_CONTEXT.build(thisClassCE, cp, clb -> {\n+            clb.withSuperclass(proxyCE);\n@@ -483,1 +481,1 @@\n-                    clb.withField(pm.fieldName, CD_Method, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n+                    clb.withField(pm.methodFieldName, CD_Method, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n@@ -555,1 +553,2 @@\n-               .invokespecial(CD_Proxy, INIT_NAME, MTD_void_InvocationHandler)\n+               .invokespecial(cp.methodRefEntry(proxyCE,\n+                   cp.nameAndTypeEntry(INIT_NAME, MTD_void_InvocationHandler)))\n@@ -560,2 +559,6 @@\n-     * Generate the class initializer, called in AccessController.doPrivileged\n-     * to obtain the class loader.\n+     * Generate the class initializer.\n+     * Discussion: Currently, for Proxy to work with SecurityManager,\n+     * we rely on the parameter classes of the methods to be computed\n+     * from Proxy instead of via user code paths like bootstrap method\n+     * lazy evaluation. That might change if we can pass in the live\n+     * Method objects directly..\n@@ -567,2 +570,2 @@\n-            cob.ldc(thisClass)\n-               .invokevirtual(cp.methodRefEntry(classCe,\n+            cob.ldc(thisClassCE)\n+               .invokevirtual(cp.methodRefEntry(classCE,\n@@ -619,1 +622,1 @@\n-                               .ldc(proxyCe)\n+                               .ldc(proxyCE)\n@@ -648,1 +651,0 @@\n-        private final String fieldName;\n@@ -653,0 +655,1 @@\n+        private final String methodFieldName;\n@@ -658,1 +661,1 @@\n-                            Class<?> fromClass, String fieldName) {\n+                            Class<?> fromClass, String methodFieldName) {\n@@ -665,1 +668,1 @@\n-            this.fieldName = fieldName;\n+            this.methodFieldName = methodFieldName;\n@@ -673,1 +676,1 @@\n-        private ProxyMethod(Method method, String fieldName) {\n+        private ProxyMethod(Method method, String methodFieldName) {\n@@ -676,2 +679,1 @@\n-                 method.getSharedExceptionTypes(), method.getDeclaringClass(),\n-                 fieldName);\n+                 method.getSharedExceptionTypes(), method.getDeclaringClass(), methodFieldName);\n@@ -684,2 +686,2 @@\n-            return methodFieldCache = cp.fieldRefEntry(thisClass,\n-                    cp.nameAndTypeEntry(fieldName, CD_Method));\n+            return methodFieldCache = cp.fieldRefEntry(thisClassCE,\n+                    cp.nameAndTypeEntry(methodFieldName, CD_Method));\n@@ -706,1 +708,1 @@\n-                               .anewarray(objectCe);\n+                               .anewarray(objectCE);\n@@ -733,1 +735,1 @@\n-                               .new_(uteCe)\n+                               .new_(uteCE)\n@@ -739,2 +741,2 @@\n-                                     StackMapFrameInfo.of(c1, List.of(), throwableStack),\n-                                     StackMapFrameInfo.of(c2, List.of(), throwableStack))));\n+                                    StackMapFrameInfo.of(c1, List.of(), throwableStack),\n+                                    StackMapFrameInfo.of(c2, List.of(), throwableStack))));\n@@ -793,1 +795,1 @@\n-               .anewarray(classCe);\n+               .anewarray(classCE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"}]}