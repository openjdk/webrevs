{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -301,2 +301,2 @@\n-        int[][] s1 = new int[mlDsa_l][ML_DSA_N];\n-        int[][] s2 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] s1 = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] s2 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -308,1 +308,1 @@\n-        int[][] As1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] As1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -314,2 +314,2 @@\n-        int[][] t0 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] t1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] t0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] t1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -353,2 +353,2 @@\n-        int[][] z = new int[mlDsa_l][ML_DSA_N];\n-        boolean[][] h = new boolean[mlDsa_k][ML_DSA_N];\n+        int[][] z = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        boolean[][] h = booleanMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -356,6 +356,6 @@\n-        int[][] y = new int[mlDsa_l][ML_DSA_N];\n-        int[][] yy = new int[mlDsa_l][ML_DSA_N];\n-        int[][] w = new int[mlDsa_k][ML_DSA_N];\n-        int[][] w0 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] w1 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] w_ct0 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] y = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] yy = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] w = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] w0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] w1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] w_ct0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -363,3 +363,3 @@\n-        int[][] cs1 = new int[mlDsa_l][ML_DSA_N];\n-        int[][] cs2 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] ct0 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] cs1 = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] cs2 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] ct0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -381,1 +381,0 @@\n-            \/\/mlDsaVectorInverseNtt(y);\n@@ -453,1 +452,1 @@\n-        int[][] aHatZ = new int[mlDsa_k][ML_DSA_N];\n+        int[][] aHatZ = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -459,1 +458,1 @@\n-        int[][] ct1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] ct1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -523,1 +522,1 @@\n-        int[][] t1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] t1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -632,1 +631,1 @@\n-        boolean[][] h = new boolean[mlDsa_k][ML_DSA_N];\n+        boolean[][] h = booleanMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -716,1 +715,1 @@\n-        int[][] s1 = new int[mlDsa_l][ML_DSA_N];\n+        int[][] s1 = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n@@ -722,1 +721,1 @@\n-        int[][] s2 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] s2 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -727,1 +726,1 @@\n-        int[][] t0 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] t0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -762,1 +761,1 @@\n-        int[][] z = new int[mlDsa_l][ML_DSA_N];\n+        int[][] z = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n@@ -856,1 +855,6 @@\n-        int[][][] a = new int[mlDsa_k][mlDsa_l][];\n+\n+        \/\/ Manually do multidimensional array initialization for performance\n+        int[][][] a = new int[mlDsa_k][][];\n+        for (int i = 0; i < mlDsa_k; i++) {\n+            a[i] = new int[mlDsa_l][];\n+        }\n@@ -988,2 +992,2 @@\n-        int[][] lowPart = new int[mlDsa_k][ML_DSA_N];\n-        int[][] highPart = new int[mlDsa_k][ML_DSA_N];\n+        int[][] lowPart = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] highPart = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -1014,2 +1018,2 @@\n-        int[][] lowPart = new int[mlDsa_k][ML_DSA_N];\n-        int[][] highPart = new int[mlDsa_k][ML_DSA_N];\n+        int[][] lowPart = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] highPart = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -1138,1 +1142,1 @@\n-        int[][] res = new int[vec.length][vec[0].length];\n+        int[][] res = integerMatrixAlloc(vec.length, vec[0].length);\n@@ -1152,1 +1156,1 @@\n-        int[][] result = new int[dim][ML_DSA_N];\n+        int[][] result = integerMatrixAlloc(dim, ML_DSA_N);\n@@ -1223,0 +1227,18 @@\n+\n+    \/\/ For multidimensional array initialization, manually allocating each entry is\n+    \/\/ faster than doing the entire initialization in one go\n+    static boolean[][] booleanMatrixAlloc(int first, int second) {\n+        boolean[][] res = new boolean[first][];\n+        for (int i = 0; i < first; i++) {\n+            res[i] = new boolean[second];\n+        }\n+        return res;\n+    }\n+\n+    static int[][] integerMatrixAlloc(int first, int second) {\n+        int[][] res = new int[first][];\n+        for (int i = 0; i < first; i++) {\n+            res[i] = new int[second];\n+        }\n+        return res;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":55,"deletions":33,"binary":false,"changes":88,"status":"modified"}]}