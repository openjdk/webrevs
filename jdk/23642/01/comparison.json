{"files":[{"patch":"@@ -544,2 +544,2 @@\n-        int[][] s1 = new int[mlDsa_l][ML_DSA_N];\n-        int[][] s2 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] s1 = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] s2 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -551,1 +551,1 @@\n-        int[][] As1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] As1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -557,2 +557,2 @@\n-        int[][] t0 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] t1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] t0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] t1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -596,2 +596,2 @@\n-        int[][] z = new int[mlDsa_l][ML_DSA_N];\n-        boolean[][] h = new boolean[mlDsa_k][ML_DSA_N];\n+        int[][] z = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        boolean[][] h = booleanMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -599,6 +599,6 @@\n-        int[][] y = new int[mlDsa_l][ML_DSA_N];\n-        int[][] yy = new int[mlDsa_l][ML_DSA_N];\n-        int[][] w = new int[mlDsa_k][ML_DSA_N];\n-        int[][] w0 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] w1 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] w_ct0 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] y = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] yy = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] w = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] w0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] w1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] w_ct0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -606,3 +606,3 @@\n-        int[][] cs1 = new int[mlDsa_l][ML_DSA_N];\n-        int[][] cs2 = new int[mlDsa_k][ML_DSA_N];\n-        int[][] ct0 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] cs1 = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n+        int[][] cs2 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] ct0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -624,1 +624,0 @@\n-            \/\/mlDsaVectorInverseNtt(y);\n@@ -696,1 +695,1 @@\n-        int[][] aHatZ = new int[mlDsa_k][ML_DSA_N];\n+        int[][] aHatZ = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -702,1 +701,1 @@\n-        int[][] ct1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] ct1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -766,1 +765,1 @@\n-        int[][] t1 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] t1 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -875,1 +874,1 @@\n-        boolean[][] h = new boolean[mlDsa_k][ML_DSA_N];\n+        boolean[][] h = booleanMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -959,1 +958,1 @@\n-        int[][] s1 = new int[mlDsa_l][ML_DSA_N];\n+        int[][] s1 = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n@@ -965,1 +964,1 @@\n-        int[][] s2 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] s2 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -970,1 +969,1 @@\n-        int[][] t0 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] t0 = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -1005,1 +1004,1 @@\n-        int[][] z = new int[mlDsa_l][ML_DSA_N];\n+        int[][] z = integerMatrixAlloc(mlDsa_l, ML_DSA_N);\n@@ -1095,1 +1094,6 @@\n-        int[][][] a = new int[mlDsa_k][mlDsa_l][];\n+  \n+        \/\/ Manually do multidimensional array initialization for performance\n+        int[][][] a = new int[mlDsa_k][][];\n+        for (int i = 0; i < mlDsa_k; i++) {\n+            a[i] = new int[mlDsa_l][];\n+        }\n@@ -1273,2 +1277,2 @@\n-        int[][] lowPart = new int[mlDsa_k][ML_DSA_N];\n-        int[][] highPart = new int[mlDsa_k][ML_DSA_N];\n+        int[][] lowPart = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n+        int[][] highPart = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -1300,1 +1304,1 @@\n-        int[][] highPart = new int[mlDsa_k][ML_DSA_N];\n+        int[][] highPart = integerMatrixAlloc(mlDsa_k, ML_DSA_N);\n@@ -1485,1 +1489,1 @@\n-        int[][] res = new int[vec.length][vec[0].length];\n+        int[][] res = integerMatrixAlloc(vec.length, vec[0].length);\n@@ -1499,1 +1503,1 @@\n-        int[][] result = new int[dim][ML_DSA_N];\n+        int[][] result = integerMatrixAlloc(dim, ML_DSA_N);\n@@ -1571,0 +1575,18 @@\n+\n+    \/\/ For multidimensional array initialization, manually allocating each entry is\n+    \/\/ faster than doing the entire initialization in one go\n+    static boolean[][] booleanMatrixAlloc(int first, int second) {\n+        boolean[][] res = new boolean[first][];\n+        for (int i = 0; i < first; i++) {\n+            res[i] = new boolean[second];\n+        }\n+        return res;\n+    }\n+\n+    static int[][] integerMatrixAlloc(int first, int second) {\n+        int[][] res = new int[first][];\n+        for (int i = 0; i < first; i++) {\n+            res[i] = new int[second];\n+        }\n+        return res;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":53,"deletions":31,"binary":false,"changes":84,"status":"modified"}]}