{"files":[{"patch":"@@ -1267,1 +1267,1 @@\n-                        tree.vartype = make.Erroneous();\n+                        tree.vartype = make.at(tree.pos()).Erroneous();\n@@ -1274,1 +1274,1 @@\n-                            tree.vartype = make.Erroneous();\n+                            tree.vartype = make.at(tree.pos()).Erroneous();\n@@ -5720,0 +5720,3 @@\n+        } else if (tree.declaredUsingVar()) {       \/\/ set the type's start and end positions to match the \"var\" keyword\n+            Assert.check(tree.typePos != Position.NOPOS);\n+            tree.vartype = make.at(tree.typePos, tree.typePos + names.var.length(), env.toplevel.endPositions).Type(type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1008,0 +1008,1 @@\n+            int varTypePos = Position.NOPOS;\n@@ -1012,0 +1013,1 @@\n+                    varTypePos = e.pos;\n@@ -1049,1 +1051,3 @@\n-                JCVariableDecl var = toP(F.at(varPos).VarDef(mods, name, e, null));\n+                JCVariableDecl var = toP(F.at(varPos).VarDef(mods, name, e, null,\n+                  varTypePos != Position.NOPOS ? JCVariableDecl.DeclKind.VAR : JCVariableDecl.DeclKind.EXPLICIT,\n+                  varTypePos));\n@@ -1051,1 +1055,0 @@\n-                    var.startPos = pos;\n@@ -2193,1 +2196,2 @@\n-                    param.startPos = TreeInfo.getStartPos(param.vartype);\n+                    param.declKind = JCVariableDecl.DeclKind.VAR;\n+                    param.typePos = TreeInfo.getStartPos(param.vartype);\n@@ -3833,1 +3837,1 @@\n-        int startPos = Position.NOPOS;\n+        int varTypePos = Position.NOPOS;\n@@ -3845,0 +3849,1 @@\n+                    varTypePos = elemType.pos;\n@@ -3848,3 +3853,0 @@\n-                    startPos = TreeInfo.getStartPos(mods);\n-                    if (startPos == Position.NOPOS)\n-                        startPos = TreeInfo.getStartPos(type);\n@@ -3856,2 +3858,2 @@\n-        JCVariableDecl result = toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n-        result.startPos = startPos;\n+        JCVariableDecl result = toP(F.at(pos).VarDef(mods, name, type, init,\n+          declaredUsingVar ? JCVariableDecl.DeclKind.VAR : JCVariableDecl.DeclKind.EXPLICIT, varTypePos));\n@@ -3971,2 +3973,5 @@\n-        return toP(F.at(pos).VarDef(mods, name, type, null,\n-                type != null && type.hasTag(IDENT) && ((JCIdent)type).name == names.var));\n+        boolean declaredUsingVar = type != null && type.hasTag(IDENT) && ((JCIdent)type).name == names.var;\n+        JCVariableDecl.DeclKind declKind = declaredUsingVar ? JCVariableDecl.DeclKind.VAR :\n+          type != null ? JCVariableDecl.DeclKind.EXPLICIT : JCVariableDecl.DeclKind.IMPLICIT;\n+        int typePos = type != null ? type.pos : pos;\n+        return toP(F.at(pos).VarDef(mods, name, type, null, declKind, typePos));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -466,0 +466,6 @@\n+        return setPos(pos, Position.NOPOS, null);\n+    }\n+\n+    \/** Set start and end position and return this tree.\n+     *\/\n+    public JCTree setPos(int pos, int endPos, EndPosTable endPosTable) {\n@@ -467,0 +473,2 @@\n+        if (endPos != Position.NOPOS && endPosTable != null)\n+            endPosTable.storeEnd(this, endPos);\n@@ -1005,0 +1013,7 @@\n+\n+        public enum DeclKind {\n+            EXPLICIT,       \/\/ \"SomeType name\"\n+            IMPLICIT,       \/\/ \"name\"\n+            VAR,            \/\/ \"var name\"\n+        }\n+\n@@ -1017,4 +1032,4 @@\n-        \/** explicit start pos *\/\n-        public int startPos = Position.NOPOS;\n-        \/** declared using `var` *\/\n-        private boolean declaredUsingVar;\n+        \/** how the variable's type was declared *\/\n+        public DeclKind declKind;\n+        \/** a source code position to use for \"vartype\" when null (can happen if declKind != EXPLICIT) *\/\n+        public int typePos;\n@@ -1027,1 +1042,1 @@\n-            this(mods, name, vartype, init, sym, false);\n+            this(mods, name, vartype, init, sym, DeclKind.EXPLICIT, Position.NOPOS);\n@@ -1035,1 +1050,2 @@\n-                                 boolean declaredUsingVar) {\n+                                 DeclKind declKind,\n+                                 int typePos) {\n@@ -1041,1 +1057,2 @@\n-            this.declaredUsingVar = declaredUsingVar;\n+            this.declKind = declKind;\n+            this.typePos = typePos;\n@@ -1047,1 +1064,1 @@\n-            this(mods, null, vartype, null, null, false);\n+            this(mods, null, vartype, null, null, DeclKind.EXPLICIT, Position.NOPOS);\n@@ -1062,1 +1079,1 @@\n-            return declaredUsingVar;\n+            return declKind == DeclKind.VAR;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -727,1 +727,4 @@\n-                    printExpr(tree.vartype);\n+                    if (tree.vartype == null && tree.declaredUsingVar())\n+                        print(\"var\");\n+                    else\n+                        printExpr(tree.vartype);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -554,1 +554,1 @@\n-            return M.at(t.pos).VarDef(mods, t.name, vartype, init);\n+            return M.at(t.pos).VarDef(mods, t.name, vartype, init, t.declKind, t.typePos);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeCopier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -613,3 +613,1 @@\n-                if (node.startPos != Position.NOPOS) {\n-                    return node.startPos;\n-                } else if (node.mods.pos != Position.NOPOS) {\n+                if (node.mods.pos != Position.NOPOS) {\n@@ -617,5 +615,1 @@\n-                } else if (node.vartype == null || node.vartype.pos == Position.NOPOS) {\n-                    \/\/if there's no type (partially typed lambda parameter)\n-                    \/\/simply return node position\n-                    return node.pos;\n-                } else {\n+                } else if (node.vartype != null) {\n@@ -623,0 +617,2 @@\n+                } else if (node.typePos != Position.NOPOS) {\n+                    return node.typePos;\n@@ -624,0 +620,1 @@\n+                break;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    \/** The position at which subsequent trees will be created.\n+    \/** The start position at which subsequent trees will be created.\n@@ -67,1 +67,9 @@\n-    public int pos = Position.NOPOS;\n+    public int pos;\n+\n+    \/** The end position at which subsequent trees will be created.\n+     *\/\n+    public int endPos;\n+\n+    \/** The end position table into which subsequent end positions will be stored.\n+     *\/\n+    public EndPosTable endPosTable;\n@@ -87,0 +95,1 @@\n+        this.endPos = Position.NOPOS;\n@@ -97,0 +106,1 @@\n+        this.endPos = Position.NOPOS;\n@@ -109,1 +119,1 @@\n-    \/** Reassign current position.\n+    \/** Reassign current start position and set current end position to NPPOS.\n@@ -113,0 +123,2 @@\n+        this.endPos = Position.NOPOS;\n+        this.endPosTable = null;\n@@ -116,1 +128,1 @@\n-    \/** Reassign current position.\n+    \/** Reassign current start position and set current end position to NPPOS.\n@@ -119,1 +131,20 @@\n-        this.pos = (pos == null ? Position.NOPOS : pos.getStartPosition());\n+        return at(pos, null);\n+    }\n+\n+    \/** Reassign current start and end positions based on the given DiagnosticPosition.\n+     *\/\n+    public TreeMaker at(DiagnosticPosition pos, EndPosTable endPosTable) {\n+        return at(pos != null ? pos.getStartPosition() : Position.NOPOS,\n+                  pos != null && endPosTable != null ? pos.getEndPosition(endPosTable) : Position.NOPOS,\n+                  endPosTable);\n+    }\n+\n+    \/** Reassign current start and end positions.\n+     *  @param pos start position, or {@link Position#NOPOS} for none\n+     *  @param endPos ending position, or {@link Position#NOPOS} for none\n+     *  @param endPosTable ending position table, or null for none\n+     *\/\n+    public TreeMaker at(int pos, int endPos, EndPosTable endPosTable) {\n+        this.pos = pos;\n+        this.endPos = endPos;\n+        this.endPosTable = endPosTable;\n@@ -141,3 +172,1 @@\n-        JCCompilationUnit tree = new JCCompilationUnit(defs);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCCompilationUnit(defs));\n@@ -150,3 +179,1 @@\n-        JCPackageDecl tree = new JCPackageDecl(annotations, pid);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCPackageDecl(annotations, pid));\n@@ -156,3 +183,1 @@\n-        JCImport tree = new JCImport(qualid, staticImport);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCImport(qualid, staticImport));\n@@ -162,3 +187,1 @@\n-        JCModuleImport tree = new JCModuleImport(moduleName);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCModuleImport(moduleName));\n@@ -185,1 +208,1 @@\n-        JCClassDecl tree = new JCClassDecl(mods,\n+        return setPos(new JCClassDecl(mods,\n@@ -192,3 +215,1 @@\n-                                     null);\n-        tree.pos = pos;\n-        return tree;\n+                                     null));\n@@ -220,1 +241,1 @@\n-        JCMethodDecl tree = new JCMethodDecl(mods,\n+        return setPos(new JCMethodDecl(mods,\n@@ -229,3 +250,1 @@\n-                                       null);\n-        tree.pos = pos;\n-        return tree;\n+                                       null));\n@@ -235,3 +254,1 @@\n-        JCVariableDecl tree = new JCVariableDecl(mods, name, vartype, init, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCVariableDecl(mods, name, vartype, init, null));\n@@ -240,4 +257,3 @@\n-    public JCVariableDecl VarDef(JCModifiers mods, Name name, JCExpression vartype, JCExpression init, boolean declaredUsingVar) {\n-        JCVariableDecl tree = new JCVariableDecl(mods, name, vartype, init, null, declaredUsingVar);\n-        tree.pos = pos;\n-        return tree;\n+    public JCVariableDecl VarDef(JCModifiers mods, Name name, JCExpression vartype, JCExpression init,\n+      JCVariableDecl.DeclKind declKind, int typePos) {\n+        return setPos(new JCVariableDecl(mods, name, vartype, init, null, declKind, typePos));\n@@ -247,3 +263,1 @@\n-        JCVariableDecl tree = new JCVariableDecl(mods, name, vartype);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCVariableDecl(mods, name, vartype));\n@@ -253,3 +267,1 @@\n-        JCSkip tree = new JCSkip();\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCSkip());\n@@ -259,3 +271,1 @@\n-        JCBlock tree = new JCBlock(flags, stats);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCBlock(flags, stats));\n@@ -265,3 +275,1 @@\n-        JCDoWhileLoop tree = new JCDoWhileLoop(body, cond);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCDoWhileLoop(body, cond));\n@@ -271,3 +279,1 @@\n-        JCWhileLoop tree = new JCWhileLoop(cond, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCWhileLoop(cond, body));\n@@ -281,3 +287,1 @@\n-        JCForLoop tree = new JCForLoop(init, cond, step, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCForLoop(init, cond, step, body));\n@@ -287,3 +291,1 @@\n-        JCEnhancedForLoop tree = new JCEnhancedForLoop(var, expr, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCEnhancedForLoop(var, expr, body));\n@@ -293,3 +295,1 @@\n-        JCLabeledStatement tree = new JCLabeledStatement(label, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCLabeledStatement(label, body));\n@@ -299,3 +299,1 @@\n-        JCSwitch tree = new JCSwitch(selector, cases);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCSwitch(selector, cases));\n@@ -306,3 +304,1 @@\n-        JCCase tree = new JCCase(caseKind, labels, guard, stats, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCCase(caseKind, labels, guard, stats, body));\n@@ -312,3 +308,1 @@\n-        JCSwitchExpression tree = new JCSwitchExpression(selector, cases);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCSwitchExpression(selector, cases));\n@@ -318,3 +312,1 @@\n-        JCSynchronized tree = new JCSynchronized(lock, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCSynchronized(lock, body));\n@@ -331,3 +323,1 @@\n-        JCTry tree = new JCTry(resources, body, catchers, finalizer);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCTry(resources, body, catchers, finalizer));\n@@ -337,3 +327,1 @@\n-        JCCatch tree = new JCCatch(param, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCCatch(param, body));\n@@ -346,3 +334,1 @@\n-        JCConditional tree = new JCConditional(cond, thenpart, elsepart);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCConditional(cond, thenpart, elsepart));\n@@ -352,3 +338,1 @@\n-        JCIf tree = new JCIf(cond, thenpart, elsepart);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCIf(cond, thenpart, elsepart));\n@@ -358,3 +342,1 @@\n-        JCExpressionStatement tree = new JCExpressionStatement(expr);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCExpressionStatement(expr));\n@@ -364,3 +346,1 @@\n-        JCBreak tree = new JCBreak(label, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCBreak(label, null));\n@@ -370,3 +350,1 @@\n-        JCYield tree = new JCYield(value, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCYield(value, null));\n@@ -376,3 +354,1 @@\n-        JCContinue tree = new JCContinue(label, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCContinue(label, null));\n@@ -382,3 +358,1 @@\n-        JCReturn tree = new JCReturn(expr);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCReturn(expr));\n@@ -388,3 +362,1 @@\n-        JCThrow tree = new JCThrow(expr);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCThrow(expr));\n@@ -394,3 +366,1 @@\n-        JCAssert tree = new JCAssert(cond, detail);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCAssert(cond, detail));\n@@ -403,3 +373,1 @@\n-        JCMethodInvocation tree = new JCMethodInvocation(typeargs, fn, args);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCMethodInvocation(typeargs, fn, args));\n@@ -424,1 +392,1 @@\n-        JCNewClass tree = classDefRemoved ?\n+        return setPos(classDefRemoved ?\n@@ -431,3 +399,1 @@\n-                new JCNewClass(encl, typeargs, clazz, args, def);\n-        tree.pos = pos;\n-        return tree;\n+                new JCNewClass(encl, typeargs, clazz, args, def));\n@@ -440,3 +406,1 @@\n-        JCNewArray tree = new JCNewArray(elemtype, dims, elems);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCNewArray(elemtype, dims, elems));\n@@ -448,3 +412,1 @@\n-        JCLambda tree = new JCLambda(params, body);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCLambda(params, body));\n@@ -454,3 +416,1 @@\n-        JCParens tree = new JCParens(expr);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCParens(expr));\n@@ -460,3 +420,1 @@\n-        JCAssign tree = new JCAssign(lhs, rhs);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCAssign(lhs, rhs));\n@@ -466,3 +424,1 @@\n-        JCAssignOp tree = new JCAssignOp(opcode, lhs, rhs, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCAssignOp(opcode, lhs, rhs, null));\n@@ -472,3 +428,1 @@\n-        JCUnary tree = new JCUnary(opcode, arg);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCUnary(opcode, arg));\n@@ -478,3 +432,1 @@\n-        JCBinary tree = new JCBinary(opcode, lhs, rhs, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCBinary(opcode, lhs, rhs, null));\n@@ -484,3 +436,1 @@\n-        JCTypeCast tree = new JCTypeCast(clazz, expr);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCTypeCast(clazz, expr));\n@@ -490,3 +440,1 @@\n-        JCInstanceOf tree = new JCInstanceOf(expr, clazz);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCInstanceOf(expr, clazz));\n@@ -496,3 +444,1 @@\n-        JCAnyPattern tree = new JCAnyPattern();\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCAnyPattern());\n@@ -502,3 +448,1 @@\n-        JCBindingPattern tree = new JCBindingPattern(var);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCBindingPattern(var));\n@@ -508,3 +452,1 @@\n-        JCDefaultCaseLabel tree = new JCDefaultCaseLabel();\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCDefaultCaseLabel());\n@@ -514,3 +456,1 @@\n-        JCConstantCaseLabel tree = new JCConstantCaseLabel(expr);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCConstantCaseLabel(expr));\n@@ -520,3 +460,1 @@\n-        JCPatternCaseLabel tree = new JCPatternCaseLabel(pat);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCPatternCaseLabel(pat));\n@@ -526,3 +464,1 @@\n-        JCRecordPattern tree = new JCRecordPattern(deconstructor, nested);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCRecordPattern(deconstructor, nested));\n@@ -532,3 +468,1 @@\n-        JCArrayAccess tree = new JCArrayAccess(indexed, index);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCArrayAccess(indexed, index));\n@@ -538,3 +472,1 @@\n-        JCFieldAccess tree = new JCFieldAccess(selected, selector, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCFieldAccess(selected, selector, null));\n@@ -545,3 +477,1 @@\n-        JCMemberReference tree = new JCMemberReference(mode, name, expr, typeargs);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCMemberReference(mode, name, expr, typeargs));\n@@ -551,3 +481,1 @@\n-        JCIdent tree = new JCIdent(name, null);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCIdent(name, null));\n@@ -557,3 +485,1 @@\n-        JCLiteral tree = new JCLiteral(tag, value);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCLiteral(tag, value));\n@@ -563,3 +489,1 @@\n-        JCPrimitiveTypeTree tree = new JCPrimitiveTypeTree(typetag);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCPrimitiveTypeTree(typetag));\n@@ -569,3 +493,1 @@\n-        JCArrayTypeTree tree = new JCArrayTypeTree(elemtype);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCArrayTypeTree(elemtype));\n@@ -575,3 +497,1 @@\n-        JCTypeApply tree = new JCTypeApply(clazz, arguments);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCTypeApply(clazz, arguments));\n@@ -581,3 +501,1 @@\n-        JCTypeUnion tree = new JCTypeUnion(components);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCTypeUnion(components));\n@@ -587,3 +505,1 @@\n-        JCTypeIntersection tree = new JCTypeIntersection(components);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCTypeIntersection(components));\n@@ -597,3 +513,1 @@\n-        JCTypeParameter tree = new JCTypeParameter(name, bounds, annos);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCTypeParameter(name, bounds, annos));\n@@ -603,3 +517,1 @@\n-        JCWildcard tree = new JCWildcard(kind, type);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCWildcard(kind, type));\n@@ -609,3 +521,1 @@\n-        TypeBoundKind tree = new TypeBoundKind(kind);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new TypeBoundKind(kind));\n@@ -615,3 +525,1 @@\n-        JCAnnotation tree = new JCAnnotation(Tag.ANNOTATION, annotationType, args);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCAnnotation(Tag.ANNOTATION, annotationType, args));\n@@ -621,3 +529,1 @@\n-        JCAnnotation tree = new JCAnnotation(Tag.TYPE_ANNOTATION, annotationType, args);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCAnnotation(Tag.TYPE_ANNOTATION, annotationType, args));\n@@ -629,2 +535,5 @@\n-        tree.pos = (noFlags && annotations.isEmpty()) ? Position.NOPOS : pos;\n-        return tree;\n+        if (noFlags && annotations.isEmpty()) {\n+            tree.pos = Position.NOPOS;\n+            return tree;\n+        }\n+        return setPos(tree);\n@@ -640,3 +549,1 @@\n-        JCModuleDecl tree = new JCModuleDecl(mods, kind, qualid, directives);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCModuleDecl(mods, kind, qualid, directives));\n@@ -647,3 +554,1 @@\n-        JCExports tree = new JCExports(qualId, moduleNames);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCExports(qualId, moduleNames));\n@@ -654,3 +559,1 @@\n-        JCOpens tree = new JCOpens(qualId, moduleNames);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCOpens(qualId, moduleNames));\n@@ -661,3 +564,1 @@\n-        JCProvides tree = new JCProvides(serviceName, implNames);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCProvides(serviceName, implNames));\n@@ -668,3 +569,1 @@\n-        JCRequires tree = new JCRequires(isTransitive, isStaticPhase, qualId);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCRequires(isTransitive, isStaticPhase, qualId));\n@@ -675,3 +574,1 @@\n-        JCUses tree = new JCUses(qualId);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCUses(qualId));\n@@ -681,3 +578,1 @@\n-        JCAnnotatedType tree = new JCAnnotatedType(annotations, underlyingType);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCAnnotatedType(annotations, underlyingType));\n@@ -691,3 +586,1 @@\n-        JCErroneous tree = new JCErroneous(errs);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new JCErroneous(errs));\n@@ -697,3 +590,1 @@\n-        LetExpr tree = new LetExpr(defs, expr);\n-        tree.pos = pos;\n-        return tree;\n+        return setPos(new LetExpr(defs, expr));\n@@ -718,2 +609,5 @@\n-        LetExpr tree = new LetExpr(List.of(def), expr);\n-        tree.pos = pos;\n+        return setPos(new LetExpr(List.of(def), expr));\n+    }\n+\n+    private <T extends JCTree> T setPos(T tree) {\n+        tree.setPos(pos, endPos, endPosTable);\n@@ -729,1 +623,1 @@\n-            .setPos(pos)\n+            .setPos(pos, endPos, endPosTable)\n@@ -737,1 +631,1 @@\n-        return (JCFieldAccess)new JCFieldAccess(base, sym.name, sym).setPos(pos).setType(sym.type);\n+        return (JCFieldAccess)new JCFieldAccess(base, sym.name, sym).setPos(pos, endPos, endPosTable).setType(sym.type);\n@@ -912,1 +806,1 @@\n-                v).setPos(pos).setType(v.type);\n+                v).setPos(pos, endPos, endPosTable).setType(v.type);\n@@ -1058,1 +952,1 @@\n-                m).setPos(pos).setType(mtype);\n+                m).setPos(pos, endPos, endPosTable).setType(mtype);\n@@ -1065,1 +959,1 @@\n-            TypeParameter(name, Types(types.getBounds(tvar))).setPos(pos).setType(tvar);\n+            TypeParameter(name, Types(types.getBounds(tvar))).setPos(pos, endPos, endPosTable).setType(tvar);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":128,"deletions":234,"binary":false,"changes":362,"status":"modified"},{"patch":"@@ -771,1 +771,1 @@\n-                    if (sp.getEndPosition(cut, node.getType()) == (-1)) {\n+                    if (node instanceof JCTree.JCVariableDecl varDecl && varDecl.declaredUsingVar()) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysisImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    public static void checkEndPosition(Class<? extends JCTree> nodeType, String input, String marker) throws IOException {\n+    public static void checkPositions(Class<? extends JCTree> nodeType, String input, String markers) throws IOException {\n@@ -74,3 +74,9 @@\n-                    int actual = TreeInfo.getEndPos(tree, unit.endPositions);\n-                    int expected = marker.indexOf('^') + 1;\n-                    if (actual != expected) {\n+\n+                    \/\/ Verify declaration start and end positions\n+                    int start = tree.getStartPosition();\n+                    if (markers.charAt(start) != '<') {\n+                        throw new AssertionError(String.format(\n+                          \"wrong %s pos %d for \\\"%s\\\" in \\\"%s\\\"\", \"start\", start, tree, input));\n+                    }\n+                    int end = TreeInfo.getEndPos(tree, unit.endPositions);\n+                    if (markers.charAt(end - 1) != '>') {\n@@ -78,1 +84,10 @@\n-                          \"wrong end pos %d != %d for \\\"%s\\\" @ %d\", actual, expected, input, tree.pos));\n+                          \"wrong %s pos %d for \\\"%s\\\" in \\\"%s\\\"\", \"end\", end, tree, input));\n+                    }\n+\n+                    \/\/ For variable declarations using \"var\", verify the \"var\" position\n+                    if (tree instanceof JCVariableDecl varDecl && varDecl.declaredUsingVar()) {\n+                        int vpos = varDecl.typePos;\n+                        if (!input.substring(vpos).startsWith(\"var\")) {\n+                            throw new AssertionError(String.format(\n+                              \"wrong %s pos %d for \\\"%s\\\" in \\\"%s\\\"\", \"var\", vpos, tree, input));\n+                        }\n@@ -89,1 +104,1 @@\n-        checkEndPosition(JCModuleDecl.class,\n+        checkPositions(JCModuleDecl.class,\n@@ -91,1 +106,1 @@\n-           \"                                          ^              \");\n+           \"              <--------------------------->              \");\n@@ -94,1 +109,1 @@\n-        checkEndPosition(JCPackageDecl.class,\n+        checkPositions(JCPackageDecl.class,\n@@ -96,1 +111,1 @@\n-           \"                          ^              \");\n+           \"              <----------->              \");\n@@ -99,1 +114,1 @@\n-        checkEndPosition(JCClassDecl.class,\n+        checkPositions(JCClassDecl.class,\n@@ -101,1 +116,1 @@\n-           \"                                         ^              \");\n+           \"              <-------------------------->              \");\n@@ -104,1 +119,1 @@\n-        checkEndPosition(JCMethodDecl.class,\n+        checkPositions(JCMethodDecl.class,\n@@ -106,1 +121,1 @@\n-           \"                                                    ^                \");\n+           \"                           <------------------------>                \");\n@@ -109,1 +124,1 @@\n-        checkEndPosition(JCVariableDecl.class,\n+        checkPositions(JCVariableDecl.class,\n@@ -111,2 +126,2 @@\n-           \"                                ^                \");\n-        checkEndPosition(JCVariableDecl.class,\n+           \"                           <---->                \");\n+        checkPositions(JCVariableDecl.class,\n@@ -114,4 +129,41 @@\n-           \"                                      ^                \");\n-        checkEndPosition(JCVariableDecl.class,\n-           \"\/* comment *\/ class A { try {} catch (Error err) {} } \/* comment *\/\",\n-           \"                                              ^                    \");\n+           \"                           <---------->                \");\n+        checkPositions(JCVariableDecl.class,\n+           \"\/* comment *\/ class Fred { final int x = 123; } \/* comment *\/\",\n+           \"                           <---------------->                \");\n+        checkPositions(JCVariableDecl.class,\n+           \"\/* comment *\/ class Fred { final int x = 123, y = 456; } \/* comment *\/\",\n+           \"                           <---------------->-------->                \");\n+        checkPositions(JCVariableDecl.class,\n+           \"\/* comment *\/ class A { void m() { try {} catch (Error err) {} } } \/* comment *\/\",\n+           \"                                                 <------->                    \");\n+\n+        \/\/ JCVariableDecl with \"var\" declarations\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { var foo; } }\",\n+           \"                     <------>    \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { var foo = 42; } }\",\n+           \"                     <----------->    \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { final var foo = 42; } }\",\n+           \"                     <----------------->    \");\n+\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = foo -> { } } }\",\n+           \"                                                         <->           \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = (foo) -> { } } }\",\n+           \"                                                          <->            \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = (var foo) -> { } } }\",\n+           \"                                                          <----->            \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = (final var foo) -> { } } }\",\n+           \"                                                          <----------->            \");\n+\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { record R(int x) { } void m() { switch (null) { case R(var x) -> {} default -> {} } } }\",\n+           \"                   <--->                                        <--->                           \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { record R(int x) { } void m() { switch (null) { case R(final var x) -> {} default -> {} } } }\",\n+           \"                   <--->                                        <--------->                           \");\n","filename":"test\/langtools\/tools\/javac\/parser\/DeclarationEndPositions.java","additions":72,"deletions":20,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -75,3 +75,3 @@\n-                        b = o instanceof R(\/*missing*\/ s);\n-                        b = o instanceof R2(R(\/*missing*\/ s), String t);\n-                        b = o instanceof R2(R(\/*missing*\/ s), \/*missing*\/ t);\n+                        b = o instanceof R(var s);\n+                        b = o instanceof R2(R(var s), String t);\n+                        b = o instanceof R2(R(var s), var t);\n@@ -79,2 +79,2 @@\n-                        b = o instanceof R2(R(\/*missing*\/ _), \/*missing*\/ _);\n-                        b = o instanceof R2(R(_), \/*missing*\/ t);\n+                        b = o instanceof R2(R(var _), var _);\n+                        b = o instanceof R2(R(_), var t);\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrettyTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -70,0 +72,6 @@\n+        test.run(\"java.util.function.Consumer<String> c = (|final var testVar|) -> {};\",\n+                 \"final java.lang.String testVar\");\n+        test.run(\"record Rec(int x) { }; switch (null) { case Rec(|var testVar|) -> {} default -> {} };\",\n+                 \"int testVar\");\n+        test.run(\"record Rec(int x) { }; switch (null) { case Rec(|final var testVar|) -> {} default -> {} };\",\n+                 \"final int testVar\");\n@@ -118,0 +126,1 @@\n+        Pattern varPat = Pattern.compile(\"(?<!\\\\p{javaJavaIdentifierPart})var(?!\\\\p{javaJavaIdentifierPart})\");\n@@ -124,0 +133,2 @@\n+\n+                        \/\/ Verify start and position of the variable declaration\n@@ -133,0 +144,1 @@\n+                        \/\/ Verify start and position of the variable type\n@@ -136,1 +148,9 @@\n-                        if (typeStart != (-1) && typeEnd != (-1)) {\n+                        Matcher matcher;\n+                        if (node.getType() != null && (matcher = varPat.matcher(src)).find(start)) {\n+                            if (typeStart != matcher.start()) {\n+                                throw new AssertionError(\"Unexpected type start: \" + typeStart + \" != \" + matcher.start());\n+                            }\n+                            if (typeEnd != matcher.end()) {\n+                                throw new AssertionError(\"Unexpected type end: \" + typeEnd + \" != \" + matcher.end());\n+                            }\n+                        } else if (typeStart != (-1) && typeEnd != (-1)) {\n","filename":"test\/langtools\/tools\/javac\/tree\/VarTree.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\n+        \/\/ Test 4\n+        Consumer<Depr> c3 = (final var d) -> { };\n","filename":"test\/langtools\/tools\/javac\/tree\/VarWarnPosition.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6,1 +6,3 @@\n-5 warnings\n+VarWarnPosition.java:27:18: compiler.warn.has.been.deprecated: Depr, compiler.misc.unnamed.package\n+VarWarnPosition.java:27:36: compiler.warn.has.been.deprecated: Depr, compiler.misc.unnamed.package\n+7 warnings\n","filename":"test\/langtools\/tools\/javac\/tree\/VarWarnPosition.out","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}