{"files":[{"patch":"@@ -180,1 +180,1 @@\n-     * Close all writer and reader streams immediately and wait for the process to terminate.\n+     * Close all reader and writer streams and wait for the process to terminate.\n@@ -194,1 +194,1 @@\n-     * when this method returns. Additional {@code IOExceptions}\n+     * after the process has terminated. Additional {@code IOExceptions}\n@@ -200,2 +200,2 @@\n-     * the process is {@linkplain #destroyForcibly() forcibly destroyed} and continues to wait\n-     * for the process to terminate.\n+     * the process is {@linkplain #destroyForcibly() forcibly destroyed} and\n+     * this method continues to wait for the process to terminate.\n@@ -232,1 +232,1 @@\n-            if (waitForInterrupted()) {\n+            if (!tryWait()) {\n@@ -234,1 +234,1 @@\n-                while (waitForInterrupted()) {\n+                while (!tryWait()) {\n@@ -246,2 +246,3 @@\n-    \/\/ Wait for the process to terminate, return true if the wait is interrupted.\n-    private boolean waitForInterrupted() {\n+    \/\/ Try to wait for the process to terminate.\n+    \/\/ Return true if the process has terminated, false if wait is interrupted.\n+    private boolean tryWait() {\n@@ -250,2 +251,0 @@\n-            return false;\n-        } catch (InterruptedException ie) {\n@@ -253,0 +252,2 @@\n+        } catch (InterruptedException ie) {\n+            return false;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n- * @modules java.base\/java.io:+open\n@@ -61,1 +60,2 @@\n- * @run junit\/othervm -DDEBUG=true jdk.java.lang.Process.ProcessCloseTest\n+ * @modules java.base\/java.io:+open\n+ * @run junit jdk.java.lang.Process.ProcessCloseTest\n@@ -63,1 +63,0 @@\n-\n@@ -68,12 +67,0 @@\n-    private static final boolean DEBUG = Boolean.getBoolean(\"DEBUG\");\n-    private final static ScopedValue<Appendable> OUT = ScopedValue.newInstance();\n-    private final static ScopedValue.Carrier LOG = setupLog();\n-\n-    private static ScopedValue.Carrier setupLog() {\n-        if (DEBUG) {\n-            return ScopedValue.where(OUT, System.err);\n-        } else {\n-            return ScopedValue.where(OUT, new StringBuffer());\n-        }\n-    }\n-\n@@ -102,9 +89,0 @@\n-    private static void logPrintf(String format, Object... args) {\n-        try {\n-            var log = LOG.get(OUT);\n-            log.append(format.formatted(args));\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe);\n-        }\n-    }\n-\n@@ -193,1 +171,1 @@\n-            logPrintf(\"    %s\\n\", c);\n+            Log.printf(\"    %s\\n\", c);\n@@ -202,1 +180,1 @@\n-        var log = LOG.get(OUT);\n+        var log = Log.get();\n@@ -206,1 +184,1 @@\n-            logPrintf(\"Program: %s; pid: %d\\n\", args, p.pid());\n+            Log.printf(\"Program: %s; pid: %d\\n\", args, p.pid());\n@@ -210,1 +188,1 @@\n-        } catch (Exception ex) {\n+        } catch (Throwable ex) {\n@@ -220,1 +198,1 @@\n-        var log = LOG.get(OUT);\n+        var log = Log.get();\n@@ -226,1 +204,1 @@\n-                logPrintf(\"Program: %s; pid: %d\\n\", args, p.pid());\n+                Log.printf(\"Program: %s; pid: %d\\n\", args, p.pid());\n@@ -232,1 +210,1 @@\n-        } catch (Exception ex) {\n+        } catch (Throwable ex) {\n@@ -248,1 +226,1 @@\n-        var log = LOG.get(OUT);\n+        var log = Log.get();\n@@ -256,1 +234,1 @@\n-                logPrintf(\"Program: %s; pid: %d\\n\", args, p.pid());\n+                Log.printf(\"Program: %s; pid: %d\\n\", args, p.pid());\n@@ -262,1 +240,1 @@\n-        }  catch (Exception ex) {\n+        }  catch (Throwable ex) {\n@@ -268,2 +246,3 @@\n-\n-    \/\/ ExitStatus named values and assertions\n+    \/**\n+     * ExitStatus named values and assertions\n+     *\/\n@@ -290,1 +269,1 @@\n-                logPrintf(\"    ExitStatus: %d, sig#: %d, waitFor latency: %s%n\",\n+                Log.printf(\"    ExitStatus: %d, sig#: %d, waitFor latency: %s%n\",\n@@ -307,1 +286,1 @@\n-                logPrintf(\"Racy exit status: %d\\n\", actual);\n+                Log.printf(\"Racy exit status: %d\\n\", actual);\n@@ -314,0 +293,1 @@\n+\n@@ -351,2 +331,2 @@\n-                logPrintf(\"        %d lines\\n\", lines.size());\n-                logPrintf(\"%s%n\", lines.toString().indent(8));\n+                Log.printf(\"        %d lines\\n\", lines.size());\n+                Log.printf(\"%s%n\", lines.toString().indent(8));\n@@ -362,2 +342,2 @@\n-                logPrintf(\"        %d lines\\n\", lines.size());\n-                logPrintf(\"%s%n\", lines.toString().indent(8));\n+                Log.printf(\"        %d lines\\n\", lines.size());\n+                Log.printf(\"%s%n\", lines.toString().indent(8));\n@@ -502,1 +482,1 @@\n-                logPrintf(\"Interrupting thread, count: %d%n\", count);\n+                Log.printf(\"Interrupting thread, count: %d%n\", count);\n@@ -613,1 +593,1 @@\n-        var log = LOG.get(OUT);\n+        var log = Log.get();\n@@ -620,1 +600,1 @@\n-                logPrintf(\"Program: %s; pid: %d\\n\",args, p.pid());\n+                Log.printf(\"Program: %s; pid: %d\\n\",args, p.pid());\n@@ -710,1 +690,1 @@\n-            logPrintf(\"FileDescriptor.handle: %08x%n\", handle);\n+            Log.printf(\"FileDescriptor.handle: %08x%n\", handle);\n@@ -715,1 +695,1 @@\n-            logPrintf(\"FileDescriptor.handle to close again and fail: %08x%n\", handle);\n+            Log.printf(\"FileDescriptor.handle to close again and fail: %08x%n\", handle);\n@@ -721,1 +701,1 @@\n-            logPrintf(\"FileDescriptor.fd: %08x%n\", fd);\n+            Log.printf(\"FileDescriptor.fd: %08x%n\", fd);\n@@ -726,1 +706,1 @@\n-            logPrintf(\"FileDescriptor.fd to close again and fail: %08x%n\", fd);\n+            Log.printf(\"FileDescriptor.fd to close again and fail: %08x%n\", fd);\n@@ -765,0 +745,37 @@\n+    \/**\n+     * Log of output produced on a thread during a test.\n+     * Normally, the output is buffered and only output to stderr if the test fails.\n+     * Set -DDEBUG=true to send all output to stderr as it occurs.\n+     *\/\n+    private static class Log {\n+\n+        private static final boolean DEBUG = Boolean.getBoolean(\"DEBUG\");\n+        private final static ScopedValue<Appendable> OUT = ScopedValue.newInstance();\n+        private final static ScopedValue.Carrier LOG = setupLog();\n+\n+        private static ScopedValue.Carrier setupLog() {\n+            if (DEBUG) {\n+                return ScopedValue.where(OUT, System.err);\n+            } else {\n+                return ScopedValue.where(OUT, new StringBuffer());\n+            }\n+        }\n+\n+        \/\/ Return the log for this thread and clear the buffer.\n+        private static Appendable get() {\n+            var log = LOG.get(OUT);\n+            if (log instanceof StringBuffer sb)\n+                sb.setLength(0);\n+            return log;\n+        }\n+\n+        \/\/ Printf to the log for this thread.\n+        private static void printf(String format, Object... args) {\n+            try {\n+                var log = LOG.get(OUT);\n+                log.append(format.formatted(args));\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/Process\/ProcessCloseTest.java","additions":66,"deletions":49,"binary":false,"changes":115,"status":"modified"}]}