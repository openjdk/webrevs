{"files":[{"patch":"@@ -36,2 +36,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -42,0 +40,1 @@\n+import java.util.function.Supplier;\n@@ -150,0 +149,4 @@\n+    \/\/ Logger for exceptions\n+    private static final Supplier<System.Logger> LOGGER =\n+            StableValue.supplier( () -> System.getLogger(\"java.lang.Process\") );\n+\n@@ -631,1 +634,1 @@\n-     * IOExceptions that occur when closing streams are ignored.\n+     * Any {@code IOException} that occurs when closing a stream is ignored.\n@@ -635,1 +638,1 @@\n-     * IOExceptions that occur when destroying the process are ignored.\n+     * Any {@code IOException} that occurs when destroying the process is ignored.\n@@ -642,3 +645,3 @@\n-     * The outputWriter and outputStream to the process are closed.\n-     * The inputReader and inputStream from the process are closed.\n-     * The errorReader and errorStream from the process are closed.\n+     * The {@code outputWriter} and {@code outputStream} to the process are closed.\n+     * The {@code inputReader} and {@code inputStream} from the process are closed.\n+     * The {@code errorReader} and {@code errorStream} from the process are closed.\n@@ -649,16 +652,4 @@\n-        List<Closeable> closeable = new ArrayList<>();\n-        closeable.add(outputWriter != null ? outputWriter : getOutputStream());\n-        closeable.add(inputReader != null ? inputReader : getInputStream());\n-        closeable.add(errorReader != null ? errorReader : getErrorStream());\n-\n-        \/\/ close each and capture any exceptions\n-        List<IOException> exceptions = closeable.stream()\n-                .map(Process::doClose)\n-                .filter((Objects::nonNull))\n-                .toList();\n-\n-        if (!exceptions.isEmpty()) {\n-            \/\/ TBD: Log exceptions closing streams\n-            IOException ex = new IOException(\"exception closing process streams\");\n-            exceptions.forEach((e) -> ex.addSuppressed(e));\n-        }\n+        \/\/ Close each stream\n+        quietClose(outputWriter != null ? outputWriter : getOutputStream());\n+        quietClose(inputReader != null ? inputReader  : getInputStream());\n+        quietClose(errorReader != null ? errorReader : getErrorStream());\n@@ -666,10 +657,1 @@\n-        \/\/ Wait briefly for process to exit, if not exited immediately, destroy\n-        try {\n-            boolean alive = waitFor(Duration.ofMillis(2000));\n-            if (alive) {\n-                destroy();      \/\/ no-op if is not alive\n-            }\n-        } catch (InterruptedException ie) {\n-            \/\/ Wait was interrupted; terminate the process\n-            destroy();\n-        }\n+        destroy();      \/\/ no-op if process is not alive\n@@ -678,1 +660,2 @@\n-    private static IOException doClose(Closeable c) {\n+    \/\/ Quietly close and log exception\n+    private void quietClose(Closeable c) {\n@@ -682,1 +665,2 @@\n-            return ioe;\n+            LOGGER.get().log(System.Logger.Level.DEBUG,\n+                    \"Exception closing process: pid: \" + pid() , ioe);\n@@ -684,1 +668,0 @@\n-        return null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":19,"deletions":36,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-import java.io.IOException;\n-import java.io.PrintWriter;\n@@ -30,1 +28,0 @@\n-import java.util.List;\n@@ -47,2 +44,2 @@\n-            List<String> lines = reader.readAllLines();\n-            lines.forEach(System.err::println);\n+            reader.readAllLines()\n+                    .forEach(System.err::println);\n@@ -51,3 +48,3 @@\n-                throw new RuntimeException(\"process status: \" + status);\n-        } catch (Throwable t) {\n-            System.out.println(\"Process failed: \" + t);\n+                throw new RuntimeException(\"unexpected process status: \" + status);\n+        } catch (Exception e) {\n+            System.out.println(\"Process failed: \" + e);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/snippet-files\/ProcessExamples.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Arrays;\n@@ -47,2 +48,2 @@\n- * @library \/test\/lib\n- * @run junit jdk.java.lang.Process.ProcessCloseTest\n+ * @run junit\/othervm -Djava.util.logging.config.file=${test.src}\/ProcessLogging-FINE.properties\n+ *       jdk.java.lang.Process.ProcessCloseTest\n@@ -93,1 +94,1 @@\n-                        ExitStatus.NORMAL),\n+                        ExitStatus.RACY),\n@@ -98,1 +99,1 @@\n-                        ExitStatus.NORMAL),\n+                        ExitStatus.RACY),\n@@ -103,1 +104,1 @@\n-                        ExitStatus.NORMAL),\n+                        ExitStatus.RACY),\n@@ -112,1 +113,1 @@\n-                        ExitStatus.FAIL),\n+                        ExitStatus.RACY),\n@@ -116,1 +117,1 @@\n-                        ExitStatus.NORMAL),\n+                        ExitStatus.RACY),\n@@ -140,1 +141,1 @@\n-                        ExitStatus.NORMAL)\n+                        ExitStatus.RACY)\n@@ -164,1 +165,1 @@\n-        try (Process p = pb.start();) {\n+        try (Process p = pb.start()) {\n@@ -205,1 +206,1 @@\n-    \/\/ ExitStatus named values and assertions\n+        \/\/ ExitStatus named values and assertions\n@@ -207,5 +208,5 @@\n-        NORMAL(0, 0),\n-        FAIL(1, 1),\n-        PIPE(141, 1),\n-        KILLED(143, 0),\n-        RACY(-1, -1),\n+        NORMAL(0),\n+        FAIL(1),\n+        PIPE(1, 141),\n+        KILLED(0, 143),\n+        RACY(0, 1, 143),\n@@ -213,2 +214,1 @@\n-        private final int status;\n-        private final int altStatus;        \/\/ Acceptable alternative, usually 0\n+        private final int[] allowedStatus;\n@@ -216,3 +216,2 @@\n-        ExitStatus(int status, int altStatus) {\n-            this.status = status;\n-            this.altStatus = altStatus;\n+        ExitStatus(int... status) {\n+            this.allowedStatus = status;\n@@ -221,1 +220,1 @@\n-        \/\/ Check a status matches this expected exit status\n+        \/\/ Check a status matches one of the allowed exit status values\n@@ -223,0 +222,5 @@\n+            for (int status : allowedStatus) {\n+                if (status == actual) {\n+                    return;     \/\/ status is expected\n+                }\n+            }\n@@ -224,0 +228,1 @@\n+                \/\/ Not an error but report the actual status\n@@ -225,3 +230,0 @@\n-            } else if (actual != status && actual != altStatus) {\n-                Assertions.fail(\"Expected either \" + status +\n-                        \" or \" + altStatus + \", actual: \" + actual);\n@@ -229,0 +231,1 @@\n+                Assertions.fail(\"Status: \" + actual + \", expected one of: \" + Arrays.toString(allowedStatus));\n@@ -319,1 +322,1 @@\n-                int ch = 0;\n+                int ch;\n@@ -359,1 +362,1 @@\n-        \/\/ expect a error (1) status\n+        \/\/ expect an error (1) status\n@@ -395,1 +398,1 @@\n-        private Runnable command;\n+        private final Runnable command;\n@@ -401,7 +404,5 @@\n-            while (true) {\n-                try {\n-                    Thread.sleep(5_000);\n-                    break;\n-                } catch (InterruptedException ie) {\n-                    \/\/ retry\n-                }\n+            try {\n+                Thread.sleep(5_000);\n+            } catch (InterruptedException ie) {\n+                \/\/ Interrupted sleep, re-assert interrupt\n+                Thread.currentThread().interrupt();\n@@ -455,2 +456,2 @@\n-            List<String> lines = reader.readAllLines();\n-            lines.forEach(System.err::println);\n+            reader.readAllLines()\n+                    .forEach(System.err::println);\n@@ -459,3 +460,3 @@\n-                throw new RuntimeException(\"process status: \" + status);\n-        } catch (Throwable t) {\n-            System.out.println(\"Process failed: \" + t);\n+                throw new RuntimeException(\"unexpected process status: \" + status);\n+        } catch (Exception e) {\n+            System.err.println(\"Process failed: \" + e);\n","filename":"test\/jdk\/java\/lang\/Process\/ProcessCloseTest.java","additions":40,"deletions":39,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+\n+############################################################\n+#  Enable logging java.lang.Process to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Process.level=FINE\n","filename":"test\/jdk\/java\/lang\/Process\/ProcessLogging-FINE.properties","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"}]}