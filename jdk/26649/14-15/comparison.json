{"files":[{"patch":"@@ -228,5 +228,4 @@\n-            try {\n-                \/\/ Wait for process to terminate normally.\n-                waitFor();\n-            } catch (InterruptedException e) {\n-                \/\/ Waiting interrupted; forcibly destroy the process\n+            \/\/ Wait for the process to terminate\n+            \/\/ If waitFor is interrupted, destroy the process\n+            \/\/ Continue waiting indefinitely for the process to terminate\n+            if (waitForInterrupted()) {\n@@ -234,0 +233,3 @@\n+                while (waitForInterrupted()) {\n+                    continue;\n+                }\n@@ -243,0 +245,10 @@\n+    \/\/ Wait for the process to terminate, return true if the wait is interrupted.\n+    private boolean waitForInterrupted() {\n+        try {\n+            waitFor();\n+            return false;\n+        } catch (InterruptedException ie) {\n+            return true;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n- * @run junit\/othervm jdk.java.lang.Process.ProcessCloseTest\n+ * @run junit\/othervm -DDEBUG=true jdk.java.lang.Process.ProcessCloseTest\n@@ -113,1 +113,1 @@\n-     * Each Argument consists of three elements.\n+     * Each Argument consists of three lists.\n@@ -128,1 +128,1 @@\n-                        List.of(ExitStatus.RACY)),\n+                        List.of(ExitStatus.NORMAL)),\n@@ -133,1 +133,1 @@\n-                        List.of(ExitStatus.RACY)),\n+                        List.of(ExitStatus.NORMAL)),\n@@ -138,1 +138,1 @@\n-                        List.of(ExitStatus.RACY)),\n+                        List.of(ExitStatus.NORMAL)),\n@@ -147,1 +147,1 @@\n-                        List.of(ExitStatus.RACY)),\n+                        List.of(ExitStatus.FAIL)),\n@@ -151,1 +151,1 @@\n-                        List.of(ExitStatus.RACY)),\n+                        List.of(ExitStatus.NORMAL)),\n@@ -160,1 +160,1 @@\n-                        List.of(ProcessCommand.PROCESS_INTERRUPT, \/\/ schedule an interrupt (in 1sec)\n+                        List.of(ProcessCommand.PROCESS_INTERRUPT, \/\/ schedule an interrupt (in .2 sec)\n@@ -165,1 +165,1 @@\n-                        List.of(ProcessCommand.PROCESS_INTERRUPT), \/\/ Should interrupt the TWR close\n+                        List.of(ProcessCommand.PROCESS_INTERRUPT), \/\/ interrupts the TWR\/close\n@@ -172,1 +172,1 @@\n-                        List.of(ExitStatus.RACY)), \/\/ Racy, not deterministic\n+                        List.of(ExitStatus.PIPE)),\n@@ -176,2 +176,2 @@\n-                        List.of(ExitStatus.RACY)),  \/\/ Racy, not deterministic\n-                Arguments.of(List.of(\"echo\", \"abc\"),\n+                        List.of(ExitStatus.PIPE)),\n+                Arguments.of(List.of(\"echo\", \"def\"),\n@@ -186,1 +186,1 @@\n-                        List.of(ExitStatus.RACY))\n+                        List.of(ExitStatus.NORMAL))\n@@ -273,1 +273,1 @@\n-            PIPE(1, 141),   \/\/ SIGPIPE\n+            PIPE(0, 1, 141),   \/\/ SIGPIPE\n@@ -290,1 +290,2 @@\n-                logPrintf(\"    ExitStatus: %d, waitFor latency: %s%n\", exitStatus, latency);\n+                logPrintf(\"    ExitStatus: %d, sig#: %d, waitFor latency: %s%n\",\n+                        exitStatus, exitStatus & 0x7f, latency);\n@@ -308,1 +309,2 @@\n-                Assertions.fail(\"Status: \" + actual + \", expected one of: \" + Arrays.toString(allowedStatus));\n+                Assertions.fail(\"Status: \" + actual + \", sig#: \" + (actual & 0x7f) +\n+                        \", expected one of: \" + Arrays.toString(allowedStatus));\n@@ -468,1 +470,1 @@\n-        \/\/ Hard coded to interrupt the invoking thread after 1 second\n+        \/\/ Hard coded to interrupt the invoking thread at a fixed rate of .2 second, if process is alive\n@@ -470,3 +472,7 @@\n-            final Thread targetThread = Thread.currentThread();\n-            ForkJoinPool common = ForkJoinPool.commonPool();\n-            common.schedule(targetThread::interrupt, 500, TimeUnit.MILLISECONDS);\n+            if (p.isAlive()) {\n+                int delay = 200;\n+                final Thread targetThread = Thread.currentThread();\n+                ForkJoinPool common = ForkJoinPool.commonPool();\n+                final ThreadInterruptor interrupter = new ThreadInterruptor(p, targetThread);\n+                common.scheduleAtFixedRate(interrupter, delay, delay, TimeUnit.MILLISECONDS);\n+            }\n@@ -481,0 +487,23 @@\n+    \/\/ Runnable scheduled at a fixed rate to interrupt a thread if a process is alive.\n+    private static class ThreadInterruptor implements Runnable {\n+        private final Process process;\n+        private final Thread targetThread;\n+        private int count;\n+\n+        ThreadInterruptor(Process process, Thread targetThread) {\n+            this.process = process;\n+            this.targetThread = targetThread;\n+            this.count = 0;\n+        }\n+\n+        public void run() {\n+            if (process.isAlive()) {\n+                count++;\n+                logPrintf(\"Interrupting thread, count: %d%n\", count);\n+                targetThread.interrupt();\n+            } else {\n+                throw new RuntimeException(\"process not alive\");\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/Process\/ProcessCloseTest.java","additions":49,"deletions":20,"binary":false,"changes":69,"status":"modified"}]}