{"files":[{"patch":"@@ -88,1 +88,1 @@\n- * <p>Subclasses of Process should override the {@link #onExit()} and\n+ * <p>Subclasses of Process should override the {@link #close()}, {@link #onExit()}, and\n@@ -90,1 +90,0 @@\n- * {@linkplain #close() close},\n@@ -103,2 +102,2 @@\n- * or readers, or they have been closed. {@linkplain Process#close close()} closes\n- * all the streams and terminates the process. Using try-with-resources to\n+ * or readers, or they have been closed. The Process {@linkplain Process#close close} method closes\n+ * all the streams and terminates the process to release the resources. Using try-with-resources to\n@@ -163,0 +162,72 @@\n+    \/**\n+     * Close all writer and reader streams and terminate the process.\n+     * The streams are closed immediately and the process is terminated without waiting.\n+     * This method is idempotent, if the process has already been closed\n+     * invoking this method has no effect.\n+     * <p>\n+     * Before calling {@code close} the caller should read the streams for any\n+     * data or text and call {@linkplain #waitFor() waitFor} if the exit value is needed.\n+     * The contents of streams that have not been read fully are lost,\n+     * they are discarded or ignored.\n+     * Streams should be {@code closed} when no longer needed.\n+     * Closing an already closed stream usually has no effect but is specific to the stream.\n+     * If an {@code IOException} occurs when closing a stream it is\n+     * re-thrown after the process is destroyed. Additional {@code IOExceptions}\n+     * thrown by closing the remaining streams, if any, are added to the first\n+     * {@code IOException} as {@linkplain IOException#addSuppressed suppressed exceptions}.\n+     * <p>\n+     * The process may already have exited or be in the process of exiting;\n+     * if it is {@linkplain #isAlive() alive}, it is {@linkplain #destroy destroyed}.\n+     * On some platforms, {@linkplain #supportsNormalTermination() normal termination}\n+     * is not available and the process is forcibly terminated.\n+     * Calling {@link #waitFor() waitFor} before calling {@code close} or exiting\n+     * the try-with-resources block allows the process time to clean up and exit.\n+     * <p>\n+     * Try-with-resources example to write text to a process, read back the\n+     * response, and close the streams and process:\n+     * {@snippet class=ProcessExamples region=example}\n+     *\n+     * @implSpec\n+     * The {@code outputWriter} and {@code outputStream} to the process are closed.\n+     * The {@code inputReader} and {@code inputStream} from the process are closed.\n+     * The {@code errorReader} and {@code errorStream} from the process are closed.\n+     * The process is destroyed.\n+     * @throws IOException if closing any of the streams throws an exception\n+     * @since 26\n+     *\/\n+    @Override\n+    public void close() throws IOException {\n+        synchronized(this) {\n+            if (closed) {\n+                return;\n+            }\n+            closed = true;\n+            \/\/ Close each stream\n+            IOException ioe = quietClose(outputWriter != null ? outputWriter : getOutputStream(), null);\n+            ioe = quietClose(inputReader != null ? inputReader : getInputStream(), ioe);\n+            ioe = quietClose(errorReader != null ? errorReader : getErrorStream(), ioe);\n+\n+            destroy();      \/\/ no-op if process is not alive\n+            if (ioe != null) {\n+                throw ioe;\n+            }\n+        }\n+    }\n+\n+    \/\/ Quietly close.\n+    \/\/ If an IOException occurs and it is the first, return it.\n+    \/\/ Otherwise, add the exception as a suppressed exception to the first.\n+    private IOException quietClose(Closeable c, IOException firstIOE) {\n+        try {\n+            c.close();\n+            return firstIOE;\n+        } catch (IOException ioe) {\n+            if (firstIOE == null) {\n+                return ioe;\n+            } else {\n+                firstIOE.addSuppressed(ioe);\n+                return firstIOE;\n+            }\n+        }\n+    }\n+\n@@ -620,73 +691,0 @@\n-    \/**\n-     * Close all writer and reader streams and terminate the process.\n-     * The streams are closed immediately and the process is terminated without waiting.\n-     * This method is idempotent, if the process has already been closed\n-     * invoking this method has no effect.\n-     * <p>\n-     * Before calling {@code close} the caller should read the streams for any\n-     * data or text and call {@linkplain #waitFor() waitFor} if the exit value is needed.\n-     * The contents of streams that have not been read fully are lost;\n-     * they are discarded or ignored.\n-     * Streams should be {@code closed} when no longer needed.\n-     * Closing an already closed stream usually has no effect but is specific to the stream.\n-     * If an {@code IOException} occurs when closing a stream it is\n-     * re-thrown after the process is destroyed. Additional {@code IOExceptions}\n-     * thrown by closing the remaining streams, if any, are added to the first\n-     * {@code IOException} as {@linkplain IOException#addSuppressed suppressed exceptions}.\n-     * <p>\n-     * The process may already have exited or be in the process of exiting;\n-     * if it is {@linkplain #isAlive() alive}, it is {@linkplain #destroy destroyed}.\n-     * On some platforms, {@linkplain #supportsNormalTermination() normal termination}\n-     * is not available and the process is forcibly terminated.\n-     * Calling {@link #waitFor() waitFor} before calling {@code close} or exiting\n-     * the try-with-resources block allows the process time to clean up and exit.\n-     * <p>\n-     * Example using try-with-resources writing text to a process, reading back the\n-     * response, and closing the streams and process:\n-     * {@snippet class=ProcessExamples region=example}\n-     *\n-     * @implSpec\n-     * The {@code outputWriter} and {@code outputStream} to the process are closed.\n-     * The {@code inputReader} and {@code inputStream} from the process are closed.\n-     * The {@code errorReader} and {@code errorStream} from the process are closed.\n-     * The process is destroyed.\n-     * @throws IOException if closing any of the streams throws an exception\n-     * @since 26\n-     *\/\n-    @Override\n-    public void close() throws IOException {\n-        synchronized(this) {\n-            if (closed) {\n-                return;\n-            }\n-            closed = true;\n-            \/\/ Close each stream\n-            IOException ioe = quietClose(outputWriter != null ? outputWriter : getOutputStream(), null);\n-            ioe = quietClose(inputReader != null ? inputReader : getInputStream(), ioe);\n-            ioe = quietClose(errorReader != null ? errorReader : getErrorStream(), ioe);\n-\n-            destroy();      \/\/ no-op if process is not alive\n-            if (ioe != null) {\n-                throw ioe;\n-            }\n-        }\n-    }\n-\n-    \/\/ Quietly close.\n-    \/\/ If an IOException occurs and it is the first, return it.\n-    \/\/ Otherwise, add the exception as a suppressed exception to the first.\n-    private IOException quietClose(Closeable c, IOException firstIOE) {\n-        try {\n-            c.close();\n-            return firstIOE;\n-        } catch (IOException ioe) {\n-            if (firstIOE == null) {\n-                return ioe;\n-            } else {\n-                firstIOE.addSuppressed(ioe);\n-                return firstIOE;\n-            }\n-        }\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":75,"deletions":77,"binary":false,"changes":152,"status":"modified"}]}