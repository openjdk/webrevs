{"files":[{"patch":"@@ -189,1 +189,1 @@\n-     * Streams should be {@code closed} when no longer needed.\n+     * Streams should be closed when no longer needed.\n@@ -202,0 +202,3 @@\n+     * Calling {@linkplain #waitFor() waitFor} after {@linkplain #close() close}\n+     * or after the try-with-resources block exits returns the status after\n+     * {@link #destroy() destroying the process}.\n@@ -237,1 +240,1 @@\n-    private IOException quietClose(Closeable c, IOException firstIOE) {\n+    private static IOException quietClose(Closeable c, IOException firstIOE) {\n@@ -242,1 +245,1 @@\n-            if (firstIOE == null) {\n+            if (firstIOE == null || firstIOE == ioe) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                    .forEach(System.err::println);\n+                    .forEach(System.out::println);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/snippet-files\/ProcessExamples.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * @bug 8336479\n+ * @bug 8364361\n@@ -93,1 +93,0 @@\n-     * @return\n@@ -319,1 +318,1 @@\n-            Assertions.assertEquals(\"Polo\", line, \"Stderr Expected Empty\");        }\n+            Assertions.assertEquals(\"Polo\", line, \"Stderr Expected Polo\");        }\n@@ -328,1 +327,1 @@\n-            Assertions.assertEquals(\"\", line, \"Stderr Expected Polo\");\n+            Assertions.assertEquals(\"\", line, \"Stderr Expected Empty\");\n@@ -379,1 +378,1 @@\n-        \/\/ Process.processExpectExitNormal an expected status\n+        \/\/ Process.processExpectExit an expected status\n@@ -471,0 +470,1 @@\n+        final String badFDMsg = OS_WINDOWS ? \"The handle is invalid\" : \"Bad file descriptor\";\n@@ -474,1 +474,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\")),\n+                        ExitStatus.RACY, List.of(badFDMsg)),\n@@ -477,1 +477,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\")),\n+                        ExitStatus.RACY, List.of(badFDMsg)),\n@@ -480,1 +480,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\")),\n+                        ExitStatus.RACY, List.of(badFDMsg)),\n@@ -485,3 +485,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\",\n-                                \"Bad file descriptor\",\n-                                \"Bad file descriptor\")),\n+                        ExitStatus.RACY, List.of(badFDMsg, badFDMsg, badFDMsg)),\n@@ -491,2 +489,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\",\n-                                \"Bad file descriptor\")),\n+                        ExitStatus.RACY, List.of(badFDMsg, badFDMsg)),\n@@ -496,2 +493,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\",\n-                                \"Bad file descriptor\")),\n+                        ExitStatus.RACY, List.of(badFDMsg, badFDMsg)),\n@@ -501,2 +497,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\",\n-                                \"Bad file descriptor\")),\n+                        ExitStatus.RACY, List.of(badFDMsg, badFDMsg)),\n@@ -505,1 +500,1 @@\n-                        ExitStatus.RACY, List.of(\"Bad file descriptor\"))\n+                        ExitStatus.RACY, List.of(badFDMsg))\n@@ -509,3 +504,5 @@\n-     * Test AutoCloseable for the process and out, in, and err streams.\n-     * @param args The command line arguments\n-     * @param commands the commands to the process\n+     * Test AutoCloseable for cases that are expected to throw exceptions.\n+     * The list of ProcessCommands controls what is sent to the process and closing of streams.\n+     * The command line arguments control the sequence of actions taken by the child.\n+     * @param args The command line arguments for the child process\n+     * @param commands the commands to this process controlling the child\n@@ -513,0 +510,1 @@\n+     * @param expectedMessages the list of exception messages expected by close()\n@@ -514,1 +512,1 @@\n-    @ParameterizedTest()\n+    @ParameterizedTest\n@@ -531,11 +529,13 @@\n-        Assertions.assertNotNull(expectedIOE, \"Missing IOException\");\n-        \/\/ Check each exception that it is expected\n-        Assertions.assertEquals(expectedMessages.getFirst(), expectedIOE.getMessage(),\n-                \"Unexpected exception message\");\n-        var suppressedEx = expectedIOE.getSuppressed();\n-        Assertions.assertEquals(expectedMessages.size() - 1, suppressedEx.length,\n-                \"Number of suppressed exceptions\");\n-        for (int i = 1; i < expectedMessages.size(); i++) {\n-            Assertions.assertEquals(expectedMessages.get(i),\n-                    suppressedEx[i - 1].getMessage(),\n-                    \"Unexpected suppressed exception message\");\n+        \/\/ Check the exceptions thrown, if any\n+        if (expectedIOE != null) {\n+            \/\/ Check each exception that it is expected\n+            Assertions.assertEquals(expectedMessages.getFirst(), expectedIOE.getMessage(),\n+                    \"Unexpected exception message\");\n+            var suppressedEx = expectedIOE.getSuppressed();\n+            Assertions.assertEquals(expectedMessages.size() - 1, suppressedEx.length,\n+                    \"Number of suppressed exceptions\");\n+            for (int i = 1; i < expectedMessages.size(); i++) {\n+                Assertions.assertEquals(expectedMessages.get(i),\n+                        suppressedEx[i - 1].getMessage(),\n+                        \"Unexpected suppressed exception message\");\n+            }\n@@ -574,1 +574,1 @@\n-     * @param an OutputStream from Process.getOutputStream\n+     * @param in an InputStream from Process.getInputStream\n@@ -578,4 +578,7 @@\n-            Field fisInField = FilterInputStream.class.getDeclaredField(\"in\");\n-            fisInField.setAccessible(true);\n-            FileInputStream pipeIn = (FileInputStream) fisInField.get(in);\n-\n+            if (in instanceof FilterInputStream fis) {\n+                \/\/ On Linux and Mac, the pipe is wrapped in a ProcessPipeInputStream (a FilterInputStream)\n+                Field fisInField = FilterInputStream.class.getDeclaredField(\"in\");\n+                fisInField.setAccessible(true);\n+                in = (FileInputStream) fisInField.get(fis);\n+            }\n+            FileInputStream pipeIn = (FileInputStream) in;\n@@ -637,1 +640,1 @@\n-                    .forEach(System.err::println);\n+                    .forEach(System.out::println);\n","filename":"test\/jdk\/java\/lang\/Process\/ProcessCloseTest.java","additions":42,"deletions":39,"binary":false,"changes":81,"status":"modified"}]}