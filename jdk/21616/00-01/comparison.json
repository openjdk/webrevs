{"files":[{"patch":"@@ -589,1 +589,1 @@\n-    LANGSTD_CXXFLAGS=\"-std=c++17\"\n+    LANGSTD_CXXFLAGS=\"-std=c++14\"\n@@ -591,1 +591,1 @@\n-    LANGSTD_CXXFLAGS=\"-std:c++17\"\n+    LANGSTD_CXXFLAGS=\"-std:c++14\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -196,0 +196,1 @@\n+      CXXFLAGS := -std=c++17, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -584,1 +584,0 @@\n-#ifdef USE_MMAP\n@@ -586,1 +585,0 @@\n-#endif\n@@ -611,1 +609,0 @@\n-#ifdef USE_MMAP\n@@ -613,1 +610,0 @@\n-#endif\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -968,1 +968,1 @@\n- \/\/ int got = 0;\n+    int got = 0;\n@@ -970,1 +970,0 @@\n-\/*\n@@ -996,1 +995,0 @@\n-*\/\n","filename":"src\/java.base\/windows\/native\/libjava\/HostLocaleProviderAdapter_md.c","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-     \/\/ int onlyMapID;\n+        int onlyMapID;\n@@ -307,1 +307,1 @@\n-     \/\/ onlyMapID = 0;\n+        onlyMapID = 0;\n@@ -328,1 +328,1 @@\n-             \/\/ onlyMapID = 1;\n+                onlyMapID = 1;\n","filename":"src\/java.base\/windows\/native\/libjava\/TimeZone_md.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-\/\/ static HINSTANCE lib = NULL;\n+static HINSTANCE lib = NULL;\n","filename":"src\/java.base\/windows\/native\/libnet\/NTLMAuthSequence.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,3 +65,0 @@\n-#ifdef __cplusplus\n-[[maybe_unused]]\n-#endif\n","filename":"src\/java.desktop\/share\/native\/common\/awt\/debug\/debug_trace.h","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,2 +77,0 @@\n-static LPCTSTR DrawingStateProp = TEXT(\"SunAwtDrawingStateProp\");\n-\n@@ -3562,1 +3560,1 @@\n-                 \/\/ static const UINT _VKS_ALT_MASK = 0x04;\n+                    static const UINT _VKS_ALT_MASK = 0x04;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Component.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-\/\/ static LPCTSTR DrawingStateProp = TEXT(\"SunAwtDrawingStateProp\");\n+static LPCTSTR DrawingStateProp = TEXT(\"SunAwtDrawingStateProp\");\n@@ -313,1 +313,1 @@\n-        [[maybe_unused]] DWORD ret = ::SetWindowLong(GetHWnd(), GWL_STYLE, style);\n+        DWORD ret = ::SetWindowLong(GetHWnd(), GWL_STYLE, style);\n@@ -324,1 +324,1 @@\n-        [[maybe_unused]] DWORD ret = ::SetWindowLong(GetHWnd(), GWL_EXSTYLE, style);\n+        DWORD ret = ::SetWindowLong(GetHWnd(), GWL_EXSTYLE, style);\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Component.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1346,1 +1346,1 @@\n-[[maybe_unused]] typedef struct tagSUBTABLE{\n+typedef struct tagSUBTABLE{\n@@ -1575,1 +1575,1 @@\n-[[maybe_unused]] typedef struct tagHEAD{\n+typedef struct tagHEAD{\n@@ -1583,1 +1583,1 @@\n-[[maybe_unused]] typedef struct tagENTRY{\n+typedef struct tagENTRY{\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Font.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-\/\/ static const int DEFAULT_RES = 72;\n-\/\/ static const double TENTHS_MM_TO_POINTS = 3.527777778;\n+static const int DEFAULT_RES = 72;\n+static const double TENTHS_MM_TO_POINTS = 3.527777778;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintControl.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-\/\/ static const double HIENGLISH_TO_POINTS = (72.0 \/ 1000.0);\n+static const double HIENGLISH_TO_POINTS = (72.0 \/ 1000.0);\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintJob.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-     \/\/ DWORD error;\n+        DWORD error;\n@@ -227,2 +227,1 @@\n-            \/* result = *\/ FreeLibrary(theAccessBridgeInstance);\n-            \/*\n+            result = FreeLibrary(theAccessBridgeInstance);\n@@ -232,1 +231,0 @@\n-            *\/\n","filename":"src\/jdk.accessibility\/windows\/native\/bridge\/AccessBridgeCalls.c","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n- \/\/ DWORD retval = -1;\n+    DWORD retval = -1;\n@@ -334,1 +334,1 @@\n-     \/\/ bool freeData = false;\n+        bool freeData = false;\n@@ -367,1 +367,1 @@\n- \/\/ DWORD retval = -1;\n+    DWORD retval = -1;\n@@ -379,1 +379,1 @@\n-     \/\/ bool freeData = false;\n+        bool freeData = false;\n","filename":"src\/jdk.accessibility\/windows\/native\/jabswitch\/jabswitch.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -834,1 +834,1 @@\n- \/\/ DWORD lastError = 0;\n+    DWORD lastError = 0;\n@@ -979,1 +979,0 @@\n-                \/*\n@@ -983,1 +982,0 @@\n-                *\/\n@@ -1001,1 +999,0 @@\n-                \/*\n@@ -1005,1 +1002,0 @@\n-                *\/\n@@ -1022,1 +1018,0 @@\n-                \/*\n@@ -1026,1 +1021,0 @@\n-                *\/\n","filename":"src\/jdk.accessibility\/windows\/native\/jaccessinspector\/jaccessinspector.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-     \/\/ HWND hwndEdit;    \/\/ handle of tree-view control\n+        HWND hwndEdit;    \/\/ handle of tree-view control\n@@ -260,2 +260,1 @@\n-     \/\/ hwndEdit =\n-                   CreateWindow(\"Edit\",\n+        hwndEdit = CreateWindow(\"Edit\",\n@@ -561,1 +560,1 @@\n-        \/* HTREEITEM treeNodeItem = *\/ TreeView_InsertItem(treeWnd, &tvis);\n+        HTREEITEM treeNodeItem = TreeView_InsertItem(treeWnd, &tvis);\n","filename":"src\/jdk.accessibility\/windows\/native\/jaccesswalker\/jaccesswalker.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n- \/\/ DWORD rc = 0;\n+    DWORD rc = 0;\n@@ -175,2 +175,1 @@\n-                 \/\/ LRESULT ret =\n-                                  SendMessage((HWND)ABLongToHandle(event_struct->winAccessBridgeWindow), WM_COPYDATA,\n+                    LRESULT ret = SendMessage((HWND)ABLongToHandle(event_struct->winAccessBridgeWindow), WM_COPYDATA,\n","filename":"src\/jdk.accessibility\/windows\/native\/libjavaaccessbridge\/AccessBridgeATInstance.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1219,1 +1219,1 @@\n- \/\/ jsize length = 0;\n+    jsize length = 0;\n@@ -1233,1 +1233,1 @@\n-         \/\/ length = jniEnv->GetStringLength(js);\n+            length = jniEnv->GetStringLength(js);\n","filename":"src\/jdk.accessibility\/windows\/native\/libjavaaccessbridge\/AccessBridgeJavaEntryPoints.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-             \/* LRESULT returnVal = *\/ theJavaAccessBridge->receiveMemoryPackage((HWND) wParam, (long) lParam);\n+                LRESULT returnVal = theJavaAccessBridge->receiveMemoryPackage((HWND) wParam, (long) lParam);\n@@ -2719,1 +2719,1 @@\n- \/\/ jobject component = (jobject)0;\n+    jobject component = (jobject)0;\n","filename":"src\/jdk.accessibility\/windows\/native\/libjavaaccessbridge\/JavaAccessBridge.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-DEBUG_CODE(const char fireEventDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s(%p, %p); vmID = %X\\r\\n\");\n+const char fireEventDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s(%p, %p); vmID = %X\\r\\n\";\n@@ -191,1 +191,1 @@\n-DEBUG_CODE(const char fireEventDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s(%016I64X, %016I64X); vmID = %X\\r\\n\");\n+const char fireEventDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s(%016I64X, %016I64X); vmID = %X\\r\\n\";\n@@ -244,1 +244,1 @@\n-DEBUG_CODE(const char firePropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a no-param property change (%p, %p):\\r\\n\");\n+const char firePropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a no-param property change (%p, %p):\\r\\n\";\n@@ -246,1 +246,1 @@\n-DEBUG_CODE(const char firePropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a no-param property change (%016I64X, %016I64X):\\r\\n\");\n+const char firePropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a no-param property change (%016I64X, %016I64X):\\r\\n\";\n@@ -272,1 +272,1 @@\n-DEBUG_CODE(const char fireStringPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a string property change (%p, %p, %ls, %ls):\\r\\n\");\n+const char fireStringPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a string property change (%p, %p, %ls, %ls):\\r\\n\";\n@@ -274,1 +274,1 @@\n-DEBUG_CODE(const char fireStringPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a string property change (%016I64X, %016I64X, %ls, %ls):\\r\\n\");\n+const char fireStringPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing a string property change (%016I64X, %016I64X, %ls, %ls):\\r\\n\";\n@@ -301,1 +301,1 @@\n-DEBUG_CODE(const char fireIntPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an int property change (%p, %p, %d, %d):\\r\\n\");\n+const char fireIntPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an int property change (%p, %p, %d, %d):\\r\\n\";\n@@ -303,1 +303,1 @@\n-DEBUG_CODE(const char fireIntPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an int property change (%016I64X, %016I64X, %d, %d):\\r\\n\");\n+const char fireIntPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an int property change (%016I64X, %016I64X, %d, %d):\\r\\n\";\n@@ -330,1 +330,1 @@\n-DEBUG_CODE(const char fireACPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an AC property change (%p, %p, %p, %p):\\r\\n\");\n+const char fireACPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an AC property change (%p, %p, %p, %p):\\r\\n\";\n@@ -332,1 +332,1 @@\n-DEBUG_CODE(const char fireACPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an AC property change (%016I64X, %016I64X, %016I64X, %016I64X):\\r\\n\");\n+const char fireACPropertyChangeDebugString[] = \"[INFO]: In AccessBridgeEventHandler::%s, Firing an AC property change (%016I64X, %016I64X, %016I64X, %016I64X):\\r\\n\";\n","filename":"src\/jdk.accessibility\/windows\/native\/libwindowsaccessbridge\/AccessBridgeEventHandler.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-             \/\/ DEBUG_CODE(GetAccessibleTextItemsPackage *pkg = (GetAccessibleTextItemsPackage *) (buffer + sizeof(PackageType)));\n+                DEBUG_CODE(GetAccessibleTextItemsPackage *pkg = (GetAccessibleTextItemsPackage *) (buffer + sizeof(PackageType)));\n","filename":"src\/jdk.accessibility\/windows\/native\/libwindowsaccessbridge\/AccessBridgeJavaVMInstance.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-static HANDLE memHandle = NULL;\n+\/\/ static HANDLE memHandle = NULL;\n@@ -47,1 +47,1 @@\n- \/\/ HANDLE memHandle;\n+    HANDLE memHandle;\n","filename":"src\/jdk.jdi\/windows\/native\/libdt_shmem\/shmem_md.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}