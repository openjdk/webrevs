{"files":[{"patch":"@@ -2323,35 +2323,0 @@\n-\n-\/\/ reverse bytes in halfword in lower 16 bits and sign-extend\n-\/\/ Rd[15:0] = Rs[7:0] Rs[15:8] (sign-extend to 64 bits)\n-void MacroAssembler::revb_h_h(Register Rd, Register Rs, Register tmp) {\n-  if (UseZbb) {\n-    rev8(Rd, Rs);\n-    srai(Rd, Rd, 48);\n-    return;\n-  }\n-  assert_different_registers(Rs, tmp);\n-  assert_different_registers(Rd, tmp);\n-  srli(tmp, Rs, 8);\n-  andi(tmp, tmp, 0xFF);\n-  slli(Rd, Rs, 56);\n-  srai(Rd, Rd, 48); \/\/ sign-extend\n-  orr(Rd, Rd, tmp);\n-}\n-\n-\/\/ reverse bytes in lower word and sign-extend\n-\/\/ Rd[31:0] = Rs[7:0] Rs[15:8] Rs[23:16] Rs[31:24] (sign-extend to 64 bits)\n-void MacroAssembler::revb_w_w(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n-  if (UseZbb) {\n-    rev8(Rd, Rs);\n-    srai(Rd, Rd, 32);\n-    return;\n-  }\n-  assert_different_registers(Rs, tmp1, tmp2);\n-  assert_different_registers(Rd, tmp1, tmp2);\n-  revb_h_w_u(Rd, Rs, tmp1, tmp2);\n-  slli(tmp2, Rd, 48);\n-  srai(tmp2, tmp2, 32); \/\/ sign-extend\n-  srli(Rd, Rd, 16);\n-  orr(Rd, Rd, tmp2);\n-}\n-\n@@ -2394,40 +2359,2 @@\n-\/\/ This method is only used for revb_h\n-\/\/ Rd = Rs[47:0] Rs[55:48] Rs[63:56]\n-void MacroAssembler::revb_h_helper(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n-  assert_different_registers(Rs, tmp1, tmp2);\n-  assert_different_registers(Rd, tmp1);\n-  srli(tmp1, Rs, 48);\n-  andi(tmp2, tmp1, 0xFF);\n-  slli(tmp2, tmp2, 8);\n-  srli(tmp1, tmp1, 8);\n-  orr(tmp1, tmp1, tmp2);\n-  slli(Rd, Rs, 16);\n-  orr(Rd, Rd, tmp1);\n-}\n-\n-\/\/ reverse bytes in each halfword\n-\/\/ Rd[63:0] = Rs[55:48] Rs[63:56] Rs[39:32] Rs[47:40] Rs[23:16] Rs[31:24] Rs[7:0] Rs[15:8]\n-void MacroAssembler::revb_h(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n-  if (UseZbb) {\n-    assert_different_registers(Rs, tmp1);\n-    assert_different_registers(Rd, tmp1);\n-    rev8(Rd, Rs);\n-    zero_extend(tmp1, Rd, 32);\n-    roriw(tmp1, tmp1, 16);\n-    slli(tmp1, tmp1, 32);\n-    srli(Rd, Rd, 32);\n-    roriw(Rd, Rd, 16);\n-    zero_extend(Rd, Rd, 32);\n-    orr(Rd, Rd, tmp1);\n-    return;\n-  }\n-  assert_different_registers(Rs, tmp1, tmp2);\n-  assert_different_registers(Rd, tmp1, tmp2);\n-  revb_h_helper(Rd, Rs, tmp1, tmp2);\n-  for (int i = 0; i < 3; ++i) {\n-    revb_h_helper(Rd, Rd, tmp1, tmp2);\n-  }\n-}\n-\n-\/\/ reverse bytes in each word\n-\/\/ Rd[63:0] = Rs[39:32] Rs[47:40] Rs[55:48] Rs[63:56] Rs[7:0] Rs[15:8] Rs[23:16] Rs[31:24]\n+\/\/ reverse bytes in lower word, sign-extend\n+\/\/ Rd[32:0] = Rs[7:0] Rs[15:8] Rs[23:16] Rs[31:24]\n@@ -2437,1 +2364,1 @@\n-    rori(Rd, Rd, 32);\n+    srai(Rd, Rd, 32);\n@@ -2442,2 +2369,12 @@\n-  revb(Rd, Rs, tmp1, tmp2);\n-  ror_imm(Rd, Rd, 32);\n+  andi(tmp1, Rs, 0xFF);\n+  slli(tmp1, tmp1, 8);\n+  for (int step = 8; step < 24; step += 8) {\n+    srli(tmp2, Rs, step);\n+    andi(tmp2, tmp2, 0xFF);\n+    orr(tmp1, tmp1, tmp2);\n+    slli(tmp1, tmp1, 8);\n+  }\n+  srli(Rd, Rs, 24);\n+  andi(Rd, Rd, 0xFF);\n+  orr(Rd, tmp1, Rd);\n+  sign_extend(Rd, Rd, 32);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":15,"deletions":78,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -905,2 +905,0 @@\n-  void revb_h_h(Register Rd, Register Rs, Register tmp = t0);                           \/\/ reverse bytes in halfword in lower 16 bits, sign-extend\n-  void revb_w_w(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2 = t1);      \/\/ reverse bytes in lower word, sign-extend\n@@ -909,3 +907,1 @@\n-  void revb_h_helper(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2= t1);  \/\/ reverse bytes in upper 16 bits (48:63) and move to lower\n-  void revb_h(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2= t1);         \/\/ reverse bytes in each halfword\n-  void revb_w(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2= t1);         \/\/ reverse bytes in each word\n+  void revb_w(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2= t1);         \/\/ reverse bytes in lower word, sign-extend\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,1 +184,4 @@\n-  format %{ \"revb_w_w  $dst, $src\\t#@bytes_reverse_int_b\" %}\n+  format %{\n+    \"rev8  $dst, $src\\t#@bytes_reverse_int_b\\t\\n\"\n+    \"srai  $dst, $dst, 32\\t\\n\"\n+  %}\n@@ -188,1 +191,2 @@\n-    __ revb_w_w(as_Register($dst$$reg), as_Register($src$$reg));\n+    __ rev8(as_Register($dst$$reg), as_Register($src$$reg));\n+    __ srai(as_Register($dst$$reg), as_Register($dst$$reg), 32);\n@@ -212,1 +216,4 @@\n-  format %{ \"revb_h_h_u  $dst, $src\\t#@bytes_reverse_unsigned_short_b\" %}\n+  format %{\n+    \"rev8  $dst, $src\\t#@bytes_reverse_unsigned_short_b\\t\\n\"\n+    \"srli  $dst, $dst, 48\\t\\n\"\n+  %}\n@@ -216,1 +223,2 @@\n-    __ revb_h_h_u(as_Register($dst$$reg), as_Register($src$$reg));\n+    __ rev8(as_Register($dst$$reg), as_Register($src$$reg));\n+    __ srli(as_Register($dst$$reg), as_Register($dst$$reg), 48);\n@@ -226,1 +234,4 @@\n-  format %{ \"revb_h_h  $dst, $src\\t#@bytes_reverse_short_b\" %}\n+  format %{\n+    \"rev8  $dst, $src\\t#@bytes_reverse_short_b\\t\\n\"\n+    \"srai  $dst, $dst, 48\\t\\n\"\n+  %}\n@@ -230,1 +241,2 @@\n-    __ revb_h_h(as_Register($dst$$reg), as_Register($src$$reg));\n+    __ rev8(as_Register($dst$$reg), as_Register($src$$reg));\n+    __ srai(as_Register($dst$$reg), as_Register($dst$$reg), 48);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1624,0 +1624,1 @@\n+    \/\/ Convert the 16-bit value into native byte-ordering and sign-extend\n@@ -1630,1 +1631,1 @@\n-    __ revb_w_w(x12, x12); \/\/ reverse bytes in word and sign-extend\n+    __ revb_w(x12, x12);\n@@ -1895,2 +1896,2 @@\n-  __ revb_w_w(x12, x12); \/\/ reverse bytes in word (32bit) and sign-extend\n-  __ revb_w_w(x13, x13); \/\/ reverse bytes in word (32bit) and sign-extend\n+  __ revb_w(x12, x12);\n+  __ revb_w(x13, x13);\n@@ -1907,1 +1908,1 @@\n-  __ revb_w_w(x13, x13); \/\/ reverse bytes in word (32bit) and sign-extend\n+  __ revb_w(x13, x13);\n@@ -1927,1 +1928,1 @@\n-  __ revb_w_w(x10, x10); \/\/ reverse bytes in word (32bit) and sign-extend\n+  __ revb_w(x10, x10);\n@@ -1935,0 +1936,3 @@\n+  \/\/ Convert the 32-bit npairs (number of pairs) into native byte-ordering\n+  \/\/ We can use sign-extension here because npairs must be greater than or\n+  \/\/ equal to 0 per JVM spec on 'lookupswitch' bytecode.\n@@ -1956,1 +1960,1 @@\n-  __ revb_w_w(x13, x13); \/\/ reverse bytes in word (32bit) and sign-extend\n+  __ revb_w(x13, x13);\n@@ -2008,1 +2012,3 @@\n-  \/\/ Convert j into native byteordering\n+  \/\/ Convert the 32-bit npairs (number of pairs) into native byte-ordering\n+  \/\/ We can use sign-extension here because npairs must be greater than or\n+  \/\/ equal to 0 per JVM spec on 'lookupswitch' bytecode.\n@@ -2027,1 +2033,1 @@\n-    __ revb_w_w(temp, temp); \/\/ reverse bytes in word (32bit) and sign-extend\n+    __ revb_w(temp, temp);\n@@ -2050,1 +2056,1 @@\n-  __ revb_w_w(temp, temp); \/\/ reverse bytes in word (32bit) and sign-extend\n+  __ revb_w(temp, temp);\n@@ -2057,1 +2063,1 @@\n-  __ revb_w_w(j, j); \/\/ reverse bytes in word (32bit) and sign-extend\n+  __ revb_w(j, j);\n@@ -2070,1 +2076,1 @@\n-  __ revb_w_w(j, j); \/\/ reverse bytes in word (32bit) and sign-extend\n+  __ revb_w(j, j);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"}]}