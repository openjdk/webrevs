{"files":[{"patch":"@@ -82,0 +82,2 @@\n+#include <ctype.h>\n+#include <dirent.h>\n@@ -2720,0 +2722,19 @@\n+\n+void os::print_open_file_descriptors(outputStream* st) {\n+  char fd_dir[32];\n+  snprintf(fd_dir, sizeof(fd_dir), \"\/proc\/%d\/fd\", getpid());\n+  DIR* dirp = opendir(fd_dir);\n+  int fds = 0;\n+  if (dirp != nullptr) {\n+    struct dirent* dentp;\n+    while ((dentp = readdir(dirp)) != nullptr) {\n+      if (isdigit(dentp->d_name[0])) {\n+        fds++;\n+      }\n+    }\n+    closedir(dirp);\n+    st->print_cr(\"OpenFileDescriptorCount = %d\", fds - 1); \/\/ minus the opendir fd itself\n+  } else {\n+    st->print_cr(\"OpenFileDescriptorCount = unknown\");\n+  }\n+}\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+# include <mach\/mach.h>\n@@ -105,0 +106,1 @@\n+  #include <libproc.h>\n@@ -2504,0 +2506,33 @@\n+\n+void os::print_open_file_descriptors(outputStream* st) {\n+#ifdef __APPLE__\n+  const int MAX_SAFE_FDS = 1024;\n+  struct proc_fdinfo fds[MAX_SAFE_FDS];\n+  int nfiles;\n+  kern_return_t kres;\n+  int res;\n+  pid_t my_pid;\n+\n+  kres = pid_for_task(mach_task_self(), &my_pid);\n+  if (kres != KERN_SUCCESS) {\n+    st->print_cr(\"OpenFileDescriptorCount = unknown\");\n+    return;\n+  }\n+\n+  res = proc_pidinfo(my_pid, PROC_PIDLISTFDS, 0, fds, MAX_SAFE_FDS * sizeof(struct proc_fdinfo));\n+  if (res <= 0) {\n+    st->print_cr(\"OpenFileDescriptorCount = unknown\");\n+    return;\n+  }\n+\n+  nfiles = res \/ sizeof(struct proc_fdinfo);\n+  if (nfiles >= MAX_SAFE_FDS) {\n+    st->print_cr(\"OpenFileDescriptorCount = unknown\");\n+    return;\n+  }\n+\n+  st->print_cr(\"OpenFileDescriptorCount = %d\", nfiles);\n+#else\n+    st->print_cr(\"OpenFileDescriptorCount = unknown\");\n+#endif\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -5452,0 +5452,17 @@\n+\n+void os::print_open_file_descriptors(outputStream* st) {\n+  DIR* dirp = opendir(\"\/proc\/self\/fd\");\n+  int fds = 0;\n+  if (dirp != nullptr) {\n+    struct dirent* dentp;\n+    while ((dentp = readdir(dirp)) != nullptr) {\n+      if (isdigit(dentp->d_name[0])) {\n+        fds++;\n+      }\n+    }\n+    closedir(dirp);\n+    st->print_cr(\"OpenFileDescriptorCount = %d\", fds - 1); \/\/ minus the opendir fd itself\n+  } else {\n+    st->print_cr(\"OpenFileDescriptorCount = unknown\");\n+  }\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -6263,0 +6263,4 @@\n+void os::print_open_file_descriptors(outputStream* st) {\n+  \/\/ File descriptor counting not supported on Windows.\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -845,0 +845,3 @@\n+  \/\/ Prints the number of open file descriptors for the current process\n+  static void print_open_file_descriptors(outputStream* st);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1230,0 +1230,6 @@\n+#ifndef _WIN32\n+  STEP_IF(\"printing open file descriptor count\", _verbose)\n+      os::print_open_file_descriptors(st);\n+      st->cr();\n+#endif\n+\n@@ -1435,0 +1441,6 @@\n+  \/\/ STEP(\"printing number of open file descriptors\")\n+  #ifndef _WIN32\n+    os::print_open_file_descriptors(st);\n+    st->cr();\n+  #endif\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}