{"files":[{"patch":"@@ -332,1 +332,1 @@\n-     *                      is already bound or closed.\n+     *                      is already bound or is closed.\n@@ -361,1 +361,1 @@\n-     *                      is already bound or closed.\n+     *                      is already bound or is closed.\n@@ -809,2 +809,2 @@\n-     * @throws  SocketException if there is an error in the underlying protocol,\n-     *          such as a TCP error\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -827,1 +827,1 @@\n-     * @throws    IOException if an I\/O error occurs\n+     * @throws IOException if an I\/O error occurs or if the socket is closed.\n@@ -890,2 +890,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol, such as a TCP error,\n+     *         or if the socket is closed.\n@@ -1004,2 +1004,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1032,2 +1032,2 @@\n-     * @throws    SocketException if there is an error\n-     *            in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/ServerSocket.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -687,1 +687,1 @@\n-     *                      is already connected or closed\n+     *          is already connected or closed\n@@ -722,1 +722,1 @@\n-     *                      is already connected or closed\n+     *          is already connected or closed\n@@ -786,1 +786,1 @@\n-     *                      is either already bound or closed.\n+     *          is already bound or is closed.\n@@ -1179,2 +1179,2 @@\n-     * @throws     IOException  if an I\/O error occurs when creating the\n-     *               output stream or if the socket is not connected.\n+     * @throws IOException  if an I\/O error occurs when creating the\n+     *         output stream or if the socket is not connected or is closed.\n@@ -1256,2 +1256,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1274,2 +1274,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1294,3 +1294,3 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n-     * @throws    IllegalArgumentException if the linger value is negative.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n+     * @throws  IllegalArgumentException if the linger value is negative.\n@@ -1323,2 +1323,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1373,2 +1373,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1392,2 +1392,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1414,2 +1414,2 @@\n-     * @throws  SocketException if there is an error in the underlying protocol,\n-     *          such as a TCP error\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1433,2 +1433,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1460,3 +1460,0 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n-     *\n@@ -1466,2 +1463,3 @@\n-     * @throws    IllegalArgumentException if the\n-     * value is 0 or is negative.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n+     * @throws  IllegalArgumentException if the value is 0 or is negative.\n@@ -1486,2 +1484,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1534,2 +1532,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1555,2 +1553,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1575,2 +1573,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1591,2 +1589,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1642,2 +1640,2 @@\n-     * @throws SocketException if there is an error setting the\n-     * traffic class or type-of-service\n+     * @throws SocketException if there is an error setting the traffic class or type-of-service,\n+     *         or if the socket is closed.\n@@ -1666,2 +1664,2 @@\n-     * @throws SocketException if there is an error obtaining the\n-     * traffic class or type-of-service value.\n+     * @throws SocketException if there is an error obtaining the traffic class\n+     *         or type-of-service value, or if the socket is closed.\n@@ -1720,2 +1718,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or if the socket is closed.\n@@ -1772,2 +1770,2 @@\n-     * @throws    IOException if an I\/O error occurs when shutting down this\n-     * socket.\n+     * @throws IOException if an I\/O error occurs when shutting down this socket, of if the\n+     *         socket is not connected or is closed.\n@@ -1802,2 +1800,2 @@\n-     * @throws    IOException if an I\/O error occurs when shutting down this\n-     * socket.\n+     * @throws IOException if an I\/O error occurs when shutting down this socket, or if the socket\n+     *         is not connected or is closed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":45,"deletions":47,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.SocketException;\n+import java.net.StandardSocketOptions;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+\n+\/*\n+ * @test\n+ * @summary verifies that the APIs on java.net.ServerSocket throw expected exceptions\n+ *          when invoked on a closed ServerSocket\n+ * @run junit ClosedServerSocketTest\n+ *\/\n+public class ClosedServerSocketTest {\n+\n+    private static final InetAddress loopback = InetAddress.getLoopbackAddress();\n+    private static final InetSocketAddress loopbackEphemeral = new InetSocketAddress(loopback, 0);\n+\n+    @FunctionalInterface\n+    private interface ServerSocketOp {\n+        void apply(ServerSocket ss) throws IOException;\n+    }\n+\n+\n+    static Stream<Arguments> ioExceptionOperations() {\n+        return Stream.of(\n+                Arguments.of(\"accept()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.accept();\n+                }),\n+                Arguments.of(\"bind()\", (ServerSocketOp) ss -> {\n+                    ss.bind(loopbackEphemeral);\n+                }),\n+                Arguments.of(\"bind(SocketAddress, int)\", (ServerSocketOp) ss -> {\n+                    ss.bind(loopbackEphemeral, 10);\n+                }),\n+                Arguments.of(\"getOption()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.getOption(StandardSocketOptions.SO_RCVBUF);\n+                }),\n+                Arguments.of(\"getSoTimeout()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.getSoTimeout();\n+                }),\n+                Arguments.of(\"setOption()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.setOption(StandardSocketOptions.SO_RCVBUF, 1024);\n+                })\n+        );\n+    }\n+\n+    static Stream<Arguments> socketExceptionOperations() {\n+        return Stream.of(\n+                Arguments.of(\"getReceiveBufferSize()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.getReceiveBufferSize();\n+                }),\n+                Arguments.of(\"getReuseAddress()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.getReuseAddress();\n+                }),\n+                Arguments.of(\"setReceiveBufferSize()\", (ServerSocketOp) ss -> {\n+                    ss.setReceiveBufferSize(1024);\n+                }),\n+                Arguments.of(\"setReuseAddress()\", (ServerSocketOp) ss -> {\n+                    ss.setReuseAddress(false);\n+                }),\n+                Arguments.of(\"setSoTimeout()\", (ServerSocketOp) ss -> {\n+                    ss.setSoTimeout(1000);\n+                })\n+        );\n+    }\n+\n+    static Stream<Arguments> noExceptionOperations() {\n+        return Stream.of(\n+                Arguments.of(\"close()\", (ServerSocketOp) ss -> {\n+                    ss.close();\n+                }),\n+                Arguments.of(\"getInetAddress()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.getInetAddress();\n+                }),\n+                Arguments.of(\"getLocalPort()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.getLocalPort();\n+                }),\n+                Arguments.of(\"getLocalSocketAddress()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.getLocalSocketAddress();\n+                }),\n+                Arguments.of(\"isBound()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.isBound();\n+                }),\n+                Arguments.of(\"isClosed()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.isClosed();\n+                }),\n+                Arguments.of(\"supportedOptions()\", (ServerSocketOp) ss -> {\n+                    var _ = ss.supportedOptions();\n+                })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that various operations that specify to throw an IOException on a\n+     * closed ServerSocket, do indeed throw it.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ioExceptionOperations\")\n+    public void testIOExceptionThrown(final String opName, final ServerSocketOp op)\n+            throws Exception {\n+        test(IOException.class, false, opName, op);\n+    }\n+\n+    \/**\n+     * Verifies that various operations that specify to throw a SocketOperation on a\n+     * closed ServerSocket, do indeed throw it.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"socketExceptionOperations\")\n+    public void testSocketExceptionThrown(final String opName, final ServerSocketOp op)\n+            throws Exception {\n+        test(SocketException.class, true, opName, op);\n+    }\n+\n+    \/**\n+     * Verifies that various operations that aren't expected to throw an exception on a\n+     * closed ServerSocket, complete normally.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"noExceptionOperations\")\n+    public void testNoExceptionThrown(final String opName, final ServerSocketOp op)\n+            throws Exception {\n+        try (final ServerSocket ss = new ServerSocket()) {\n+            \/\/ close and then invoke the operation on the ServerSocket\n+            ss.close();\n+            op.apply(ss);\n+        }\n+    }\n+\n+    private static void test(final Class<? extends Exception> expectedExceptionType,\n+                             final boolean exactType,\n+                             final String opName, final ServerSocketOp op) throws Exception {\n+        try (final ServerSocket ss = new ServerSocket()) {\n+            \/\/ close and then invoke the operation on the ServerSocket\n+            ss.close();\n+            if (exactType) {\n+                assertThrowsExactly(expectedExceptionType,\n+                        () -> op.apply(ss), opName + \" when already closed didn't throw \"\n+                                + expectedExceptionType.getName());\n+            } else {\n+                assertThrows(expectedExceptionType,\n+                        () -> op.apply(ss), opName + \" when already closed didn't throw \"\n+                                + expectedExceptionType.getName());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/ServerSocket\/ClosedServerSocketTest.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -0,0 +1,247 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketException;\n+import java.net.StandardSocketOptions;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+\n+\/*\n+ * @test\n+ * @summary verifies that the APIs on java.net.Socket throw expected exceptions\n+ *          when invoked on a closed socket\n+ * @run junit ClosedSocketTest\n+ *\/\n+public class ClosedSocketTest {\n+\n+    private static final InetAddress loopback = InetAddress.getLoopbackAddress();\n+    private static final InetSocketAddress loopbackEphemeral = new InetSocketAddress(loopback, 0);\n+\n+    @FunctionalInterface\n+    private interface SocketOp {\n+        void apply(Socket s) throws IOException;\n+    }\n+\n+\n+    static Stream<Arguments> ioExceptionOperations() {\n+        return Stream.of(\n+                Arguments.of(\"bind()\", (SocketOp) s -> {\n+                    s.bind(loopbackEphemeral);\n+                }),\n+                Arguments.of(\"connect()\", (SocketOp) s -> {\n+                    \/\/ connect() will never get to the stage of attempting\n+                    \/\/ a connection against this port\n+                    final int dummyPort = 12345;\n+                    s.connect(new InetSocketAddress(loopback, dummyPort));\n+                }),\n+                Arguments.of(\"connect(SocketAddress, int)\", (SocketOp) s -> {\n+                    \/\/ connect() will never get to the stage of attempting\n+                    \/\/ a connection against this port\n+                    final int dummyPort = 12345;\n+                    s.connect(new InetSocketAddress(loopback, dummyPort), 10);\n+                }),\n+                Arguments.of(\"getOption()\", (SocketOp) s -> {\n+                    var _ = s.getOption(StandardSocketOptions.SO_RCVBUF);\n+                }),\n+                Arguments.of(\"getOutputStream()\", (SocketOp) s -> {\n+                    var _ = s.getOutputStream();\n+                }),\n+                Arguments.of(\"shutdownInput()\", (SocketOp) s -> {\n+                    s.shutdownInput();\n+                }),\n+                Arguments.of(\"shutdownOutput()\", (SocketOp) s -> {\n+                    s.shutdownOutput();\n+                })\n+        );\n+    }\n+\n+    static Stream<Arguments> socketExceptionOperations() {\n+        return Stream.of(\n+                Arguments.of(\"getKeepAlive()\", (SocketOp) s -> {\n+                    var _ = s.getKeepAlive();\n+                }),\n+                Arguments.of(\"getOOBInline()\", (SocketOp) s -> {\n+                    var _ = s.getOOBInline();\n+                }),\n+                Arguments.of(\"getReceiveBufferSize()\", (SocketOp) s -> {\n+                    var _ = s.getReceiveBufferSize();\n+                }),\n+                Arguments.of(\"getReuseAddress()\", (SocketOp) s -> {\n+                    var _ = s.getReuseAddress();\n+                }),\n+                Arguments.of(\"getSendBufferSize()\", (SocketOp) s -> {\n+                    var _ = s.getSendBufferSize();\n+                }),\n+                Arguments.of(\"getSoLinger()\", (SocketOp) s -> {\n+                    var _ = s.getSoLinger();\n+                }),\n+                Arguments.of(\"getSoTimeout()\", (SocketOp) s -> {\n+                    var _ = s.getSoTimeout();\n+                }),\n+                Arguments.of(\"getTcpNoDelay()\", (SocketOp) s -> {\n+                    var _ = s.getTcpNoDelay();\n+                }),\n+                Arguments.of(\"getTrafficClass()\", (SocketOp) s -> {\n+                    var _ = s.getTrafficClass();\n+                }),\n+                Arguments.of(\"setKeepAlive()\", (SocketOp) s -> {\n+                    s.setKeepAlive(false);\n+                }),\n+                Arguments.of(\"setOOBInline()\", (SocketOp) s -> {\n+                    s.setOOBInline(false);\n+                }),\n+                Arguments.of(\"setOption()\", (SocketOp) s -> {\n+                    s.setOption(StandardSocketOptions.SO_RCVBUF, 1024);\n+                }),\n+                Arguments.of(\"setReceiveBufferSize()\", (SocketOp) s -> {\n+                    s.setReceiveBufferSize(1024);\n+                }),\n+                Arguments.of(\"setReuseAddress()\", (SocketOp) s -> {\n+                    s.setReuseAddress(false);\n+                }),\n+                Arguments.of(\"setSendBufferSize()\", (SocketOp) s -> {\n+                    s.setSendBufferSize(1024);\n+                }),\n+                Arguments.of(\"setSoLinger()\", (SocketOp) s -> {\n+                    s.setSoLinger(false, 0);\n+                }),\n+                Arguments.of(\"setSoTimeout()\", (SocketOp) s -> {\n+                    s.setSoTimeout(1000);\n+                }),\n+                Arguments.of(\"setTcpNoDelay()\", (SocketOp) s -> {\n+                    s.setTcpNoDelay(false);\n+                }),\n+                Arguments.of(\"setTrafficClass()\", (SocketOp) s -> {\n+                    s.setTrafficClass(123);\n+                })\n+        );\n+    }\n+\n+    static Stream<Arguments> noExceptionOperations() {\n+        return Stream.of(\n+                Arguments.of(\"close()\", (SocketOp) s -> {\n+                    s.close();\n+                }),\n+                Arguments.of(\"getInetAddress()\", (SocketOp) s -> {\n+                    var _ = s.getInetAddress();\n+                }),\n+                Arguments.of(\"getLocalAddress()\", (SocketOp) s -> {\n+                    var _ = s.getLocalAddress();\n+                }),\n+                Arguments.of(\"getLocalPort()\", (SocketOp) s -> {\n+                    var _ = s.getLocalPort();\n+                }),\n+                Arguments.of(\"getLocalSocketAddress()\", (SocketOp) s -> {\n+                    var _ = s.getLocalSocketAddress();\n+                }),\n+                Arguments.of(\"getPort()\", (SocketOp) s -> {\n+                    var _ = s.getPort();\n+                }),\n+                Arguments.of(\"getRemoteSocketAddress()\", (SocketOp) s -> {\n+                    var _ = s.getRemoteSocketAddress();\n+                }),\n+                Arguments.of(\"isBound()\", (SocketOp) s -> {\n+                    var _ = s.isBound();\n+                }),\n+                Arguments.of(\"isClosed()\", (SocketOp) s -> {\n+                    var _ = s.isClosed();\n+                }),\n+                Arguments.of(\"isConnected()\", (SocketOp) s -> {\n+                    var _ = s.isConnected();\n+                }),\n+                Arguments.of(\"isInputShutdown()\", (SocketOp) s -> {\n+                    var _ = s.isInputShutdown();\n+                }),\n+                Arguments.of(\"isOutputShutdown()\", (SocketOp) s -> {\n+                    var _ = s.isOutputShutdown();\n+                }),\n+                Arguments.of(\"supportedOptions()\", (SocketOp) s -> {\n+                    var _ = s.supportedOptions();\n+                })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that various operations that specify to throw an IOException on a closed socket,\n+     * do indeed throw it.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ioExceptionOperations\")\n+    public void testIOExceptionThrown(final String opName, final SocketOp op)\n+            throws Exception {\n+        test(IOException.class, false, opName, op);\n+    }\n+\n+    \/**\n+     * Verifies that various operations that specify to throw a SocketOperation on a closed socket,\n+     * do indeed throw it.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"socketExceptionOperations\")\n+    public void testSocketExceptionThrown(final String opName, final SocketOp op)\n+            throws Exception {\n+        test(SocketException.class, true, opName, op);\n+    }\n+\n+    \/**\n+     * Verifies that various operations that aren't expected to throw an exception on a\n+     * closed socket, complete normally.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"noExceptionOperations\")\n+    public void testNoExceptionThrown(final String opName, final SocketOp op)\n+            throws Exception {\n+        try (final Socket s = new Socket()) {\n+            \/\/ close and then invoke the operation on the socket\n+            s.close();\n+            op.apply(s);\n+        }\n+    }\n+\n+    private static void test(final Class<? extends Exception> expectedExceptionType,\n+                             final boolean exactType,\n+                             final String opName, final SocketOp op) throws Exception {\n+        try (final Socket s = new Socket()) {\n+            \/\/ close and then invoke the operation on the socket\n+            s.close();\n+            if (exactType) {\n+                assertThrowsExactly(expectedExceptionType,\n+                        () -> op.apply(s), opName + \" when already closed didn't throw \"\n+                                + expectedExceptionType.getName());\n+            } else {\n+                assertThrows(expectedExceptionType,\n+                        () -> op.apply(s), opName + \" when already closed didn't throw \"\n+                                + expectedExceptionType.getName());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/Socket\/ClosedSocketTest.java","additions":247,"deletions":0,"binary":false,"changes":247,"status":"added"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n-import java.net.SocketAddress;\n-\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-\/*\n- * @test\n- * @summary verifies that the APIs on java.net.Socket and java.net.ServerSocket\n- *          throw the specified exceptions\n- * @run junit SocketBasicExceptionsTest\n- *\/\n-public class SocketBasicExceptionsTest {\n-\n-    private static final InetAddress loopback = InetAddress.getLoopbackAddress();\n-\n-    \/**\n-     * Verifies that the ServerSocket.bind() throws IOException when already bound or closed\n-     *\/\n-    @Test\n-    public void testServerSocketBindException() throws Exception {\n-        final InetSocketAddress bindAddr = new InetSocketAddress(loopback, 0);\n-        try (final ServerSocket ss = new ServerSocket()) {\n-            ss.bind(bindAddr);\n-            \/\/ try binding again, must fail\n-            assertThrows(IOException.class, () -> ss.bind(bindAddr),\n-                    \"ServerSocket.bind() when already bound didn't throw IOException\");\n-            assertThrows(IOException.class, () -> ss.bind(bindAddr, 10),\n-                    \"ServerSocket.bind() when already bound didn't throw IOException\");\n-            \/\/ now close and try to bind, that too must fail\n-            ss.close();\n-            assertThrows(IOException.class, () -> ss.bind(bindAddr),\n-                    \"ServerSocket.bind() when already closed didn't throw IOException\");\n-            assertThrows(IOException.class, () -> ss.bind(bindAddr, 10),\n-                    \"ServerSocket.bind() when already closed didn't throw IOException\");\n-        }\n-    }\n-\n-    \/**\n-     * Verifies that the ServerSocket.accept() throws IOException when not bound or already closed\n-     *\/\n-    @Test\n-    public void testServerSocketAcceptException() throws Exception {\n-        final InetSocketAddress bindAddr = new InetSocketAddress(loopback, 0);\n-        try (final ServerSocket ss = new ServerSocket()) {\n-            \/\/ try accept() without being bound, must fail\n-            assertThrows(IOException.class, ss::accept,\n-                    \"ServerSocket.accept() when not bound didn't throw IOException\");\n-            \/\/ now bind before closing\n-            ss.bind(bindAddr);\n-            \/\/ now close and try to accept(), must fail\n-            ss.close();\n-            assertThrows(IOException.class, ss::accept,\n-                    \"ServerSocket.accept() when already closed didn't throw IOException\");\n-        }\n-    }\n-\n-    \/**\n-     * Verifies that the Socket.bind() throws IOException when already bound or closed\n-     *\/\n-    @Test\n-    public void testSocketBindException() throws Exception {\n-        final InetSocketAddress bindAddr = new InetSocketAddress(loopback, 0);\n-        try (final Socket s = new Socket()) {\n-            s.bind(bindAddr);\n-            \/\/ try binding again, must fail\n-            assertThrows(IOException.class, () -> s.bind(bindAddr),\n-                    \"Socket.bind() when already bound didn't throw IOException\");\n-            \/\/ now close and try to bind, that too must fail\n-            s.close();\n-            assertThrows(IOException.class, () -> s.bind(bindAddr),\n-                    \"Socket.bind() when already closed didn't throw IOException\");\n-        }\n-    }\n-\n-    \/**\n-     * Verifies that the Socket.connect() throws IOException when already connected or closed\n-     *\/\n-    @Test\n-    public void testSocketConnectException() throws Exception {\n-        try (final ServerSocket ss = new ServerSocket(0, 0, loopback);\n-             final Socket s = new Socket()) {\n-            final Thread connAcceptor = new Thread(() -> {\n-                try {\n-                    try (final Socket acceptedSocket = ss.accept()) {\n-                        System.out.println(\"accepted connection from \" + acceptedSocket);\n-                    }\n-                } catch (IOException ioe) {\n-                    System.err.println(\"ignoring exception in server acceptor thread: \" + ioe);\n-                    ioe.printStackTrace();\n-                }\n-            });\n-            connAcceptor.setDaemon(true);\n-            connAcceptor.start();\n-            \/\/ establish connection to the server\n-            final SocketAddress serverAddr = ss.getLocalSocketAddress();\n-            System.out.println(\"establishing connection to \" + serverAddr);\n-            s.connect(serverAddr);\n-            \/\/ try connecting again, must fail\n-            assertThrows(IOException.class, () -> s.connect(serverAddr),\n-                    \"Socket.connect() when already connected didn't throw IOException\");\n-            assertThrows(IOException.class, () -> s.connect(serverAddr, 10),\n-                    \"Socket.connect() when already connected didn't throw IOException\");\n-            \/\/ now close and try to connect, that too must fail\n-            s.close();\n-            assertThrows(IOException.class, () -> s.connect(serverAddr),\n-                    \"Socket.connect() when already closed didn't throw IOException\");\n-            assertThrows(IOException.class, () -> s.connect(serverAddr, 10),\n-                    \"Socket.connect() when already closed didn't throw IOException\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/Socket\/SocketBasicExceptionsTest.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"}]}