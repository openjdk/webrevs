{"files":[{"patch":"@@ -332,1 +332,1 @@\n-     *                     is already bound.\n+     *                      is already bound or closed.\n@@ -361,1 +361,1 @@\n-     *                     is already bound.\n+     *                      is already bound or closed.\n@@ -521,1 +521,1 @@\n-     *               connection.\n+     *               connection, or if the socket isn't bound or is already closed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/ServerSocket.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -686,1 +686,2 @@\n-     * @throws  IOException if an error occurs during the connection\n+     * @throws  IOException if an error occurs during the connection, or if the socket\n+     *                      is either already connected or closed\n@@ -720,1 +721,2 @@\n-     * @throws  IOException if an error occurs during the connection\n+     * @throws  IOException if an error occurs during the connection, or if the socket\n+     *                      is either already connected or closed\n@@ -784,1 +786,1 @@\n-     *                     is already bound.\n+     *                      is either already bound or closed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+\/*\n+ * @test\n+ * @summary verifies that the APIs on java.net.Socket and java.net.ServerSocket\n+ *          throw the specified exceptions\n+ * @run junit SocketBasicExceptionsTest\n+ *\/\n+public class SocketBasicExceptionsTest {\n+\n+    private static final InetAddress loopback = InetAddress.getLoopbackAddress();\n+\n+    \/**\n+     * Verifies that the ServerSocket.bind() throws IOException when already bound or closed\n+     *\/\n+    @Test\n+    public void testServerSocketBindException() throws Exception {\n+        final InetSocketAddress bindAddr = new InetSocketAddress(loopback, 0);\n+        try (final ServerSocket ss = new ServerSocket()) {\n+            ss.bind(bindAddr);\n+            \/\/ try binding again, must fail\n+            assertThrows(IOException.class, () -> ss.bind(bindAddr),\n+                    \"ServerSocket.bind() when already bound didn't throw IOException\");\n+            assertThrows(IOException.class, () -> ss.bind(bindAddr, 10),\n+                    \"ServerSocket.bind() when already bound didn't throw IOException\");\n+            \/\/ now close and try to bind, that too must fail\n+            ss.close();\n+            assertThrows(IOException.class, () -> ss.bind(bindAddr),\n+                    \"ServerSocket.bind() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class, () -> ss.bind(bindAddr, 10),\n+                    \"ServerSocket.bind() when already closed didn't throw IOException\");\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that the ServerSocket.accept() throws IOException when not bound or already closed\n+     *\/\n+    @Test\n+    public void testServerSocketAcceptException() throws Exception {\n+        final InetSocketAddress bindAddr = new InetSocketAddress(loopback, 0);\n+        try (final ServerSocket ss = new ServerSocket()) {\n+            \/\/ try accept() without being bound, must fail\n+            assertThrows(IOException.class, ss::accept,\n+                    \"ServerSocket.accept() when not bound didn't throw IOException\");\n+            \/\/ now bind before closing\n+            ss.bind(bindAddr);\n+            \/\/ now close and try to accept(), must fail\n+            ss.close();\n+            assertThrows(IOException.class, ss::accept,\n+                    \"ServerSocket.accept() when already closed didn't throw IOException\");\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that the Socket.bind() throws IOException when already bound or closed\n+     *\/\n+    @Test\n+    public void testSocketBindException() throws Exception {\n+        final InetSocketAddress bindAddr = new InetSocketAddress(loopback, 0);\n+        try (final Socket s = new Socket()) {\n+            s.bind(bindAddr);\n+            \/\/ try binding again, must fail\n+            assertThrows(IOException.class, () -> s.bind(bindAddr),\n+                    \"Socket.bind() when already bound didn't throw IOException\");\n+            \/\/ now close and try to bind, that too must fail\n+            s.close();\n+            assertThrows(IOException.class, () -> s.bind(bindAddr),\n+                    \"Socket.bind() when already closed didn't throw IOException\");\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that the Socket.connect() throws IOException when already connected or closed\n+     *\/\n+    @Test\n+    public void testSocketConnectException() throws Exception {\n+        try (final ServerSocket ss = new ServerSocket(0, 0, loopback);\n+             final Socket s = new Socket()) {\n+            final Thread connAcceptor = new Thread(() -> {\n+                try {\n+                    try (final Socket acceptedSocket = ss.accept()) {\n+                        System.out.println(\"accepted connection from \" + acceptedSocket);\n+                    }\n+                } catch (IOException ioe) {\n+                    System.err.println(\"ignoring exception in server acceptor thread: \" + ioe);\n+                    ioe.printStackTrace();\n+                }\n+            });\n+            connAcceptor.setDaemon(true);\n+            connAcceptor.start();\n+            \/\/ establish connection to the server\n+            final SocketAddress serverAddr = ss.getLocalSocketAddress();\n+            System.out.println(\"establishing connection to \" + serverAddr);\n+            s.connect(serverAddr);\n+            \/\/ try connecting again, must fail\n+            assertThrows(IOException.class, () -> s.connect(serverAddr),\n+                    \"Socket.connect() when already connected didn't throw IOException\");\n+            assertThrows(IOException.class, () -> s.connect(serverAddr, 10),\n+                    \"Socket.connect() when already connected didn't throw IOException\");\n+            \/\/ now close and try to connect, that too must fail\n+            s.close();\n+            assertThrows(IOException.class, () -> s.connect(serverAddr),\n+                    \"Socket.connect() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class, () -> s.connect(serverAddr, 10),\n+                    \"Socket.connect() when already closed didn't throw IOException\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/Socket\/SocketBasicExceptionsTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}