{"files":[{"patch":"@@ -1002,1 +1002,1 @@\n-  \/\/    MemBarStoreStore is used before volatile load instead of after volatile\n+  \/\/    MemBarVolatile is used before volatile load instead of after volatile\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @requires os.arch==\"aarch64\" | os.arch==\"x86_64\"\n@@ -36,1 +37,1 @@\n-    private class ClassBasic {\n+    private static class ClassBasic {\n@@ -40,1 +41,1 @@\n-    private class ClassWithFinal {\n+    private static class ClassWithFinal {\n@@ -44,1 +45,1 @@\n-    private class ClassWithVolatile {\n+    private static class ClassWithVolatile {\n@@ -61,0 +62,8 @@\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    public int classBasicEscapes(int i) {\n+        return new ClassBasic(i).field;\n+    }\n+\n@@ -69,0 +78,8 @@\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    public int classWithFinalEscapes(int i) {\n+        return new ClassWithFinal(i).field;\n+    }\n+\n@@ -77,0 +94,9 @@\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public int classWithVolatileEscapes(int i) {\n+        return new ClassWithVolatile(i).field;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConstructorBarriers.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"}]}