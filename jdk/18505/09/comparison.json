{"files":[{"patch":"@@ -792,0 +792,4 @@\n+                                                                            \\\n+  product(bool, UseStoreStoreForCtor, true, DIAGNOSTIC,                     \\\n+          \"Use StoreStore barrier instead of Release barrier at the end of\" \\\n+          \"constructors\")                                                   \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,1 +200,3 @@\n-        storestore_worklist.append(n->as_MemBarStoreStore());\n+        if (!UseStoreStoreForCtor || n->req() > MemBarNode::Precedent) {\n+          storestore_worklist.append(n->as_MemBarStoreStore());\n+        }\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -636,1 +636,4 @@\n-      } else if (reduce_merge_precheck && (use->is_Phi() || use->is_EncodeP() || use->Opcode() == Op_MemBarRelease)) {\n+      } else if (reduce_merge_precheck &&\n+                 (use->is_Phi() || use->is_EncodeP() ||\n+                  use->Opcode() == Op_MemBarRelease ||\n+                  (UseStoreStoreForCtor && use->Opcode() == Op_MemBarStoreStore))) {\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3427,1 +3427,1 @@\n-    } else if (opc == Op_MemBarRelease) {\n+    } else if (opc == Op_MemBarRelease || (UseStoreStoreForCtor && opc == Op_MemBarStoreStore)) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1019,1 +1019,2 @@\n-    _exits.insert_mem_bar(Op_MemBarRelease, alloc_with_final());\n+    _exits.insert_mem_bar(UseStoreStoreForCtor ? Op_MemBarStoreStore : Op_MemBarRelease,\n+                          alloc_with_final());\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2013,1 +2013,1 @@\n-    kit.insert_mem_bar(Op_MemBarRelease, result);\n+    kit.insert_mem_bar(UseStoreStoreForCtor ? Op_MemBarStoreStore : Op_MemBarRelease, result);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,311 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8300148\n+ * @summary Test barriers emitted in constructors\n+ * @library \/test\/lib \/\n+ * @requires os.arch==\"aarch64\" | os.arch==\"x86_64\" | os.arch==\"amd64\"\n+ * @run main compiler.c2.irTests.ConstructorBarriers\n+ *\/\n+public class ConstructorBarriers {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    \/\/ Checks the barrier coalescing\/optimization around field initializations.\n+    \/\/ Uses long fields to avoid store merging.\n+\n+    public static class PlainPlain {\n+        long f1;\n+        long f2;\n+        public PlainPlain(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class FinalPlain {\n+        final long f1;\n+        long f2;\n+        public FinalPlain(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class PlainFinal {\n+        long f1;\n+        final long f2;\n+        public PlainFinal(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class FinalFinal {\n+        final long f1;\n+        final long f2;\n+        public FinalFinal(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class PlainVolatile {\n+        long f1;\n+        volatile long f2;\n+        public PlainVolatile(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class VolatilePlain {\n+        volatile long f1;\n+        long f2;\n+        public VolatilePlain(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class FinalVolatile {\n+        final long f1;\n+        volatile long f2;\n+        public FinalVolatile(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class VolatileFinal {\n+        volatile long f1;\n+        final long f2;\n+        public VolatileFinal(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class VolatileVolatile {\n+        volatile long f1;\n+        volatile long f2;\n+        public VolatileVolatile(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    long l = 42;\n+\n+    @DontInline\n+    public void consume(Object o) {}\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_plainPlain() {\n+        PlainPlain c = new PlainPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_plainFinal() {\n+        PlainFinal c = new PlainFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_finalPlain() {\n+        FinalPlain c = new FinalPlain(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public long escaping_finalFinal() {\n+        FinalFinal c = new FinalFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_plainVolatile() {\n+        PlainVolatile c = new PlainVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_volatilePlain() {\n+        VolatilePlain c = new VolatilePlain(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"2\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"2\"})\n+    public long escaping_volatileVolatile() {\n+        VolatileVolatile c = new VolatileVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_finalVolatile() {\n+        FinalVolatile c = new FinalVolatile(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public long escaping_volatileFinal() {\n+        VolatileFinal c = new VolatileFinal(l);\n+        consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_plainPlain() {\n+        PlainPlain c = new PlainPlain(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_plainFinal() {\n+        PlainFinal c = new PlainFinal(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_finalPlain() {\n+        FinalPlain c = new FinalPlain(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR)\n+    public long non_escaping_finalFinal() {\n+        FinalFinal c = new FinalFinal(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_plainVolatile() {\n+        PlainVolatile c = new PlainVolatile(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_volatilePlain() {\n+        VolatilePlain c = new VolatilePlain(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"2\"})\n+    public long non_escaping_volatileVolatile() {\n+        VolatileVolatile c = new VolatileVolatile(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_finalVolatile() {\n+        FinalVolatile c = new FinalVolatile(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_ACQUIRE, \"1\"})\n+    public long non_escaping_volatileFinal() {\n+        VolatileFinal c = new VolatileFinal(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Setup\n+    Object[] stringBuilderSetup() {\n+        return new Object[] { \"foo\", \"bar\", \"baz\" };\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"stringBuilderSetup\")\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"3\"})\n+    public String stringBuilder(String s1, String s2, String s3) {\n+        return new StringBuilder().append(s1).append(s2).append(s3).toString();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConstructorBarriers.java","additions":311,"deletions":0,"binary":false,"changes":311,"status":"added"},{"patch":"@@ -880,0 +880,10 @@\n+    public static final String MEMBAR_ACQUIRE = PREFIX + \"MEMBAR_ACQUIRE\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MEMBAR_ACQUIRE, \"MemBarAcquire\");\n+    }\n+\n+    public static final String MEMBAR_RELEASE = PREFIX + \"MEMBAR_RELEASE\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MEMBAR_RELEASE, \"MemBarRelease\");\n+    }\n+\n@@ -885,0 +895,5 @@\n+    public static final String MEMBAR_VOLATILE = PREFIX + \"MEMBAR_VOLATILE\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MEMBAR_VOLATILE, \"MemBarVolatile\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,269 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"-Xms512m\", \"-Xmx512m\", \"-XX:+AlwaysPreTouch\", \"-XX:+UseParallelGC\"})\n+public class ConstructorBarriers {\n+\n+    \/\/ Checks the barrier coalescing\/optimization around field initializations.\n+    \/\/ Uses long fields to avoid store merging.\n+\n+    public static class PlainPlain {\n+        long f1;\n+        long f2;\n+        public PlainPlain(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class FinalPlain {\n+        final long f1;\n+        long f2;\n+        public FinalPlain(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class PlainFinal {\n+        long f1;\n+        final long f2;\n+        public PlainFinal(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class FinalFinal {\n+        final long f1;\n+        final long f2;\n+        public FinalFinal(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class PlainVolatile {\n+        long f1;\n+        volatile long f2;\n+        public PlainVolatile(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class VolatilePlain {\n+        volatile long f1;\n+        long f2;\n+        public VolatilePlain(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class FinalVolatile {\n+        final long f1;\n+        volatile long f2;\n+        public FinalVolatile(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class VolatileFinal {\n+        volatile long f1;\n+        final long f2;\n+        public VolatileFinal(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    private static class VolatileVolatile {\n+        volatile long f1;\n+        volatile long f2;\n+        public VolatileVolatile(long i) {\n+            f1 = i;\n+            f2 = i;\n+        }\n+    }\n+\n+    long l = 42;\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_plainPlain(Blackhole bh) {\n+        PlainPlain c = new PlainPlain(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_plainFinal(Blackhole bh) {\n+        PlainFinal c = new PlainFinal(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_finalPlain(Blackhole bh) {\n+        FinalPlain c = new FinalPlain(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_finalFinal(Blackhole bh) {\n+        FinalFinal c = new FinalFinal(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_plainVolatile(Blackhole bh) {\n+        PlainVolatile c = new PlainVolatile(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_volatilePlain(Blackhole bh) {\n+        VolatilePlain c = new VolatilePlain(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_volatileVolatile(Blackhole bh) {\n+        VolatileVolatile c = new VolatileVolatile(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_finalVolatile(Blackhole bh) {\n+        FinalVolatile c = new FinalVolatile(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long escaping_volatileFinal(Blackhole bh) {\n+        VolatileFinal c = new VolatileFinal(l);\n+        bh.consume(c);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_plainPlain() {\n+        PlainPlain c = new PlainPlain(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_plainFinal() {\n+        PlainFinal c = new PlainFinal(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_finalPlain() {\n+        FinalPlain c = new FinalPlain(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_finalFinal() {\n+        FinalFinal c = new FinalFinal(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_plainVolatile() {\n+        PlainVolatile c = new PlainVolatile(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_volatilePlain() {\n+        VolatilePlain c = new VolatilePlain(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_volatileVolatile() {\n+        VolatileVolatile c = new VolatileVolatile(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_finalVolatile() {\n+        FinalVolatile c = new FinalVolatile(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long non_escaping_volatileFinal() {\n+        VolatileFinal c = new VolatileFinal(l);\n+        return c.f1 + c.f2;\n+    }\n+\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/ConstructorBarriers.java","additions":269,"deletions":0,"binary":false,"changes":269,"status":"added"}]}