{"files":[{"patch":"@@ -200,1 +200,3 @@\n-        storestore_worklist.append(n->as_MemBarStoreStore());\n+        if (n->req() > MemBarNode::Precedent) {\n+          storestore_worklist.append(n->as_MemBarStoreStore());\n+        }\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -636,1 +636,4 @@\n-      } else if (reduce_merge_precheck && (use->is_Phi() || use->is_EncodeP() || use->Opcode() == Op_MemBarRelease)) {\n+      } else if (reduce_merge_precheck &&\n+                 (use->is_Phi() || use->is_EncodeP() ||\n+                  use->Opcode() == Op_MemBarRelease ||\n+                  use->Opcode() == Op_MemBarStoreStore)) {\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3427,1 +3427,1 @@\n-    } else if (opc == Op_MemBarRelease) {\n+    } else if (opc == Op_MemBarRelease || opc == Op_MemBarStoreStore) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1019,1 +1019,1 @@\n-    _exits.insert_mem_bar(Op_MemBarRelease, alloc_with_final());\n+    _exits.insert_mem_bar(Op_MemBarStoreStore, alloc_with_final());\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2013,1 +2013,1 @@\n-    kit.insert_mem_bar(Op_MemBarRelease, result);\n+    kit.insert_mem_bar(Op_MemBarStoreStore, result);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8300148\n+ * @summary Test barriers emitted in constructors\n+ * @library \/test\/lib \/\n+ * @requires os.arch==\"aarch64\" | os.arch==\"x86_64\" | os.arch==\"amd64\"\n+ * @run main compiler.c2.irTests.ConstructorBarriers\n+ *\/\n+public class ConstructorBarriers {\n+    private static class ClassBasic {\n+        int field;\n+        public ClassBasic(int i) { field = i; }\n+    }\n+    private static class ClassWithFinal {\n+        final int field;\n+        public ClassWithFinal(int i) { field = i; }\n+    }\n+    private static class ClassWithVolatile {\n+        volatile int field;\n+        public ClassWithVolatile(int i) { field = i; }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    public Object classBasic(int i) {\n+        return new ClassBasic(i);\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    public int classBasicNoEscape(int i) {\n+        return new ClassBasic(i).field;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    public Object classWithFinal(int i) {\n+        return new ClassWithFinal(i);\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    public int classWithFinalNoEscape(int i) {\n+        return new ClassWithFinal(i).field;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_RELEASE, \"1\"})\n+    @IR(counts = {IRNode.MEMBAR_VOLATILE, \"1\"})\n+    public Object classWithVolatile(int i) {\n+        return new ClassWithVolatile(i);\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.RANDOM_EACH})\n+    @IR(failOn = IRNode.MEMBAR_STORESTORE)\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    public int classWithVolatileNoEscape(int i) {\n+        return new ClassWithVolatile(i).field;\n+    }\n+\n+    @Setup\n+    Object[] stringBuilderSetup() {\n+        return new Object[] { \"foo\", \"bar\", \"baz\" };\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"stringBuilderSetup\")\n+    @IR(failOn = IRNode.MEMBAR_RELEASE)\n+    @IR(failOn = IRNode.MEMBAR_VOLATILE)\n+    @IR(counts = {IRNode.MEMBAR_STORESTORE, \"3\"})\n+    public String stringBuilder(String s1, String s2, String s3) {\n+        return new StringBuilder().append(s1).append(s2).append(s3).toString();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConstructorBarriers.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -880,0 +880,5 @@\n+    public static final String MEMBAR_RELEASE = PREFIX + \"MEMBAR_RELEASE\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MEMBAR_RELEASE, \"MemBarRelease\");\n+    }\n+\n@@ -885,0 +890,5 @@\n+    public static final String MEMBAR_VOLATILE = PREFIX + \"MEMBAR_VOLATILE\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MEMBAR_VOLATILE, \"MemBarVolatile\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}