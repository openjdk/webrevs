{"files":[{"patch":"@@ -1315,0 +1315,3 @@\n+                if (!src.isEmpty()) {\n+                    errormsg(\"jshell.err.incomplete.input\", src);\n+                }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+jshell.err.incomplete.input = Incomplete input: {0}\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test 8151754 8080883 8160089 8170162 8166581 8172102 8171343 8178023 8186708 8179856 8185840 8190383 8341631\n+ * @test 8151754 8080883 8160089 8170162 8166581 8172102 8171343 8178023 8186708 8179856 8185840 8190383 8341631 8341833\n@@ -31,0 +31,1 @@\n+ *          jdk.jshell\/jdk.internal.jshell.tool.resources:+open\n@@ -41,0 +42,1 @@\n+import java.text.MessageFormat;\n@@ -43,0 +45,1 @@\n+import java.util.ResourceBundle;\n@@ -48,0 +51,1 @@\n+import jdk.jshell.JShell;\n@@ -152,0 +156,8 @@\n+    protected void startCheckError(Consumer<String> checkError,\n+            String... args) {\n+        runShell(args);\n+        check(cmderr, checkError, \"userout\");\n+        check(userout, null, \"userout\");\n+        check(usererr, null, \"usererr\");\n+    }\n+\n@@ -430,0 +442,19 @@\n+    public void testErroneousFile() {\n+        String code = \"\"\"\n+                      var v = (\n+                      System.console().readLine(\"prompt: \");\n+                      \/exit\n+                      \"\"\";\n+        String readLinePrompt = writeToFile(code);\n+        String expectedErrorFormat =\n+                ResourceBundle.getBundle(\"jdk.internal.jshell.tool.resources.l10n\",\n+                                         Locale.getDefault(),\n+                                         JShell.class.getModule())\n+                              .getString(\"jshell.err.incomplete.input\");\n+        String expectedError =\n+                new MessageFormat(expectedErrorFormat).format(new Object[] {code});\n+        startCheckError(s -> assertEquals(s, expectedError),\n+                        readLinePrompt);\n+    }\n+\n+\n","filename":"test\/langtools\/jdk\/jshell\/StartOptionTest.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ *          jdk.jshell\/jdk.internal.jshell.tool.resources:+open\n","filename":"test\/langtools\/jdk\/jshell\/ToolProviderTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}