{"files":[{"patch":"@@ -295,0 +295,13 @@\n+int VLoopDependencyGraph::find_max_pred_depth(const Node* n) const {\n+  int max_pred_depth = 0;\n+  if (!n->is_Phi()) { \/\/ ignore backedge\n+    for (PredsIterator it(*this, n); !it.done(); it.next()) {\n+      Node* pred = it.current();\n+      if (_vloop.in_bb(pred)) {\n+        max_pred_depth = MAX2(max_pred_depth, depth(pred));\n+      }\n+    }\n+  }\n+  return max_pred_depth;\n+}\n+\n@@ -299,13 +312,0 @@\n-  auto find_max_pred_depth = [&] (const Node* n) {\n-    int max_pred_depth = 0;\n-    if (!n->is_Phi()) { \/\/ ignore backedge\n-      for (PredsIterator it(*this, n); !it.done(); it.next()) {\n-        Node* pred = it.current();\n-        if (_vloop.in_bb(pred)) {\n-          max_pred_depth = MAX2(max_pred_depth, depth(pred));\n-        }\n-      }\n-    }\n-    return max_pred_depth;\n-  };\n-\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -556,0 +556,1 @@\n+  int find_max_pred_depth(const Node* n) const;\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:RepeatCompilation=5 -XX:LoopUnrollLimit=1000 -Xbatch\n- *                   -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestLargeCompilation::test*\n- *                   compiler.loopopts.superword.TestLargeCompilation\n+ * @run main\/othervm\/timeout=30 -XX:LoopUnrollLimit=1000 -Xbatch\n+ *                              -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestLargeCompilation::test*\n+ *                              compiler.loopopts.superword.TestLargeCompilation\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestLargeCompilation.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}