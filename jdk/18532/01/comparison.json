{"files":[{"patch":"@@ -3109,0 +3109,22 @@\n+\n+      \/\/ If a Load depends on the same memory state as a Store, we must make sure that\n+      \/\/ the Load is ordered before the Store.\n+      \/\/\n+      \/\/      mem\n+      \/\/       |\n+      \/\/    +--+--+\n+      \/\/    |     |\n+      \/\/    |    Load (n)\n+      \/\/    |\n+      \/\/   Store (mem_use)\n+      \/\/\n+      if (n->is_Load()) {\n+        Node* mem = n->in(MemNode::Memory);\n+        for (DUIterator_Fast imax, i = mem->fast_outs(imax); i < imax; i++) {\n+          Node* mem_use = mem->fast_out(i);\n+          if (mem_use->is_Store() && _vloop.in_bb(mem_use) && !visited.test(bb_idx(mem_use))) {\n+            stack.push(mem_use); \/\/ Ordering edge: Load (n) -> Store (mem_use)\n+          }\n+        }\n+      }\n+\n@@ -3114,1 +3136,1 @@\n-          stack.push(use);\n+          stack.push(use); \/\/ Ordering edge: n -> use\n@@ -3117,0 +3139,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    if (n->is_Phi()) {\n+    if (!n->is_Phi()) { \/\/ ignore backedge\n@@ -248,0 +248,21 @@\n+\n+#ifdef ASSERT\n+  for (int i = 0; i < _body.body().length(); i++) {\n+    Node* n = _body.body().at(i);\n+    int max_pred_depth = 0;\n+    if (!n->is_Phi()) { \/\/ ignore backedge\n+      for (PredsIterator it(*this, n); !it.done(); it.next()) {\n+        Node* pred = it.current();\n+        if (_vloop.in_bb(pred)) {\n+          max_pred_depth = MAX2(max_pred_depth, depth(pred));\n+        }\n+      }\n+    }\n+    if (depth(n) != max_pred_depth + 1) {\n+      print();\n+      tty->print_cr(\"Incorrect depth: %d vs %d\", depth(n), max_pred_depth + 1);\n+      n->dump();\n+    }\n+    assert(depth(n) == max_pred_depth + 1, \"must have correct depth\");\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}