{"files":[{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4115930\n+ * @summary Verify checkboxes in the table respond to first click.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CheckBoxFirstClick\n+ *\/\n+\n+public class CheckBoxFirstClick {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Push button \"Refresh\". If the table's size still unchanged then test passes.\n+            If the table shrinks then test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(CheckBoxFirstClick::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"ListSizeBug\");\n+\n+        \/\/ Take the dummy data from SwingSet.\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+                {\"Mark\", \"Andrews\", \"Red\", 2, true},\n+                {\"Tom\", \"Ball\", \"Blue\", 99, false},\n+                {\"Alan\", \"Chung\", \"Green\", 838, false},\n+                {\"Jeff\", \"Dinkins\", \"Turquois\", 8, true},\n+                {\"Amy\", \"Fowler\", \"Yellow\", 3, false},\n+                {\"Brian\", \"Gerhold\", \"Green\", 0, false},\n+                {\"James\", \"Gosling\", \"Pink\", 21, false},\n+                {\"David\", \"Karlton\", \"Red\", 1, false},\n+                {\"Dave\", \"Kloba\", \"Yellow\", 14, false},\n+                {\"Peter\", \"Korn\", \"Purple\", 12, false},\n+                {\"Phil\", \"Milne\", \"Purple\", 3, false},\n+                {\"Dave\", \"Moore\", \"Green\", 88, false},\n+                {\"Hans\", \"Muller\", \"Maroon\", 5, false},\n+                {\"Rick\", \"Levenson\", \"Blue\", 2, false},\n+                {\"Tim\", \"Prinzing\", \"Blue\", 22, false},\n+                {\"Chester\", \"Rose\", \"Black\", 0, false},\n+                {\"Ray\", \"Ryan\", \"Gray\", 77, false},\n+                {\"Georges\", \"Saab\", \"Red\", 4, false},\n+                {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, false},\n+                {\"Kathy\", \"Walrath\", \"Blue\", 8, false},\n+                {\"Arnaud\", \"Weber\", \"Green\", 44, false}\n+        };\n+\n+        \/\/ Create a model of the data.\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() {\n+                return names.length;\n+            }\n+\n+            public int getRowCount() {\n+                return data.length;\n+            }\n+\n+            public Object getValueAt(int row, int col) {\n+                return data[row][col];\n+            }\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {\n+                return names[column];\n+            }\n+\n+            public Class getColumnClass(int c) {\n+                return getValueAt(0, c).getClass();\n+            }\n+\n+            public boolean isCellEditable(int row, int col) {\n+                return true;\n+            }\n+\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+        };\n+\n+        \/\/ Create the table\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer) headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number) value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        \/\/ Finish setting up the table.\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollpane.setPreferredSize(new Dimension(430, 200));\n+\n+        frame.add(scrollpane);\n+        frame.setSize(500, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/CheckBoxFirstClick.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4133143\n+ * @summary Illegal State exception in ComboBox editor in table\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual IllegalStateException\n+ *\/\n+\n+public class IllegalStateException {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click on a cell in the first column, delete the contents but leave the editor with focus.\n+            Click on the down arrow button in the third column popping up a combo box.\n+            Verify that the text editor loses focus.\n+            If it does, press \"pass\", otherwise press \"fail\".\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(IllegalStateException::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"IllegalStateException\");\n+\n+        \/\/ Take the dummy data from SwingSet.\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+                {\"Mark\", \"Andrews\", \"Red\", 2, true},\n+                {\"Tom\", \"Ball\", \"Blue\", 99, false},\n+                {\"Alan\", \"Chung\", \"Green\", 838, false},\n+                {\"Jeff\", \"Dinkins\", \"Turquois\", 8, true},\n+                {\"Amy\", \"Fowler\", \"Yellow\", 3, false},\n+                {\"Brian\", \"Gerhold\", \"Green\", 0, false},\n+                {\"James\", \"Gosling\", \"Pink\", 21, false},\n+                {\"David\", \"Karlton\", \"Red\", 1, false},\n+                {\"Dave\", \"Kloba\", \"Yellow\", 14, false},\n+                {\"Peter\", \"Korn\", \"Purple\", 12, false},\n+                {\"Phil\", \"Milne\", \"Purple\", 3, false},\n+                {\"Dave\", \"Moore\", \"Green\", 88, false},\n+                {\"Hans\", \"Muller\", \"Maroon\", 5, false},\n+                {\"Rick\", \"Levenson\", \"Blue\", 2, false},\n+                {\"Tim\", \"Prinzing\", \"Blue\", 22, false},\n+                {\"Chester\", \"Rose\", \"Black\", 0, false},\n+                {\"Ray\", \"Ryan\", \"Gray\", 77, false},\n+                {\"Georges\", \"Saab\", \"Red\", 4, false},\n+                {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, false},\n+                {\"Kathy\", \"Walrath\", \"Blue\", 8, false},\n+                {\"Arnaud\", \"Weber\", \"Green\", 44, false}\n+        };\n+\n+        \/\/ Create a model of the data.\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() {\n+                return names.length;\n+            }\n+\n+            public int getRowCount() {\n+                return data.length;\n+            }\n+\n+            public Object getValueAt(int row, int col) {\n+                return data[row][col];\n+            }\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {\n+                return names[column];\n+            }\n+\n+            public Class getColumnClass(int c) {\n+                return getValueAt(0, c).getClass();\n+            }\n+\n+            public boolean isCellEditable(int row, int col) {\n+                return true;\n+            }\n+\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+        };\n+\n+        \/\/ Create the table\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer) headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number) value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        \/\/ Finish setting up the table.\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollpane.setPreferredSize(new Dimension(430, 200));\n+\n+        frame.add(scrollpane);\n+        frame.setSize(500, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/IllegalStateException.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.DefaultTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4139910\n+ * @summary Column resize mouse pointer doesn't display in non-resizable JTable.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4139910\n+ *\/\n+\n+public class bug4139910 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Move mouse pointer to the position between \"A\" and \"B\" headers.\n+            If mouse pointer does not change its shape then test passes. If\n+            it does then test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4139910::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4139910\");\n+\n+        String[] colName = {\"A\", \"B\"};\n+        JTable tbl = new JTable(new DefaultTableModel(colName, 6));\n+        tbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        tbl.getTableHeader().setReorderingAllowed(false);\n+        tbl.getTableHeader().setResizingAllowed(false);\n+        JScrollPane sp = new JScrollPane(tbl);\n+        frame.add(sp);\n+\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4139910.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.GridLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4226181\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4226181\n+ *\/\n+\n+public class bug4226181 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Take a look at the table and remember the number of columns you see.\n+            Now press the button. If the number of columns has changed, then test\n+            fails, otherwise it passes.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4226181::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static class TestModel extends AbstractTableModel {\n+        public int getRowCount() {\n+            return 5;\n+        }\n+\n+        public int getColumnCount() {\n+            return 7;\n+        }\n+\n+        public Object getValueAt(int row, int column) {\n+            return row + \":\" + column;\n+        }\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4226181\");\n+        TestModel testModel = new TestModel();\n+        final JTable t = new JTable(testModel);\n+        JButton b = new JButton(\"setModel(...)\");\n+        b.addActionListener(ae -> t.setModel(new TestModel()));\n+        t.setCellSelectionEnabled(true);\n+        JPanel p1 = new JPanel(new GridLayout(1, 2));\n+        p1.add(new JLabel(\"dummy\"));\n+        p1.add(t);\n+        frame.add(p1);\n+        frame.add(b, BorderLayout.SOUTH);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4226181.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.JTextField;\n+import javax.swing.table.TableCellEditor;\n+import javax.swing.table.TableColumn;\n+\n+\/*\n+ * @test\n+ * @bug 4239157\n+ * @summary Tests that JTable performs cell validation properly\n+ *          (i.e. does not accept entries for which stopCellEditing()\n+ *           returns false)\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4239157\n+ *\/\n+\n+public class bug4239157 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            You see a JTable having one row and two columns. Click in the very first\n+            cell (where \"click here\" is displayed). Edit its content (e.g. type some\n+            letters) and press right arrow key. The edited cell should stay active,\n+            its content shouldn't change. The right cell (that with text\n+            \"inactive forever\") shouldn't become active. The same should be true\n+            when you press Tab key. If it is so, test passes, otherwise it fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4239157::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4239157\");\n+        JTable table = new JTable(new Object[][]{{\"click here\",\n+                \"inactive forever\"}},\n+                new Object[]{\"1\", \"2\"});\n+        frame.add(\"Center\", table);\n+        TableColumn column = table.getColumn(\"1\");\n+        TableCellEditor editor = new TestEditor(new JTextField());\n+        column.setCellEditor(editor);\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static class TestEditor extends DefaultCellEditor {\n+        public TestEditor(JTextField tf) {\n+            super(tf);\n+        }\n+\n+        public boolean stopCellEditing() {\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4239157.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}