{"files":[{"patch":"@@ -1451,1 +1451,1 @@\n-#if defined(X86) && !defined(ZERO)\n+#if defined(IA32) && !defined(ZERO)\n@@ -1473,1 +1473,1 @@\n-#endif \/\/ X86 && !ZERO\n+#endif \/\/ IA32 && !ZERO\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8345219\n+ * @summary Test that code generation for FP conversion works as intended\n+ * @library \/test\/lib \/\n+ * @requires os.arch != \"x86\" & os.arch != \"i386\"\n+ * @run driver compiler.c2.irTests.TestFPConversion\n+ *\/\n+public class TestFPConversion {\n+    static final double[] DOUBLES = new double[] {\n+            Double.NEGATIVE_INFINITY,\n+            -Double.MAX_VALUE,\n+            -1.0,\n+            -Double.MIN_VALUE,\n+            -0.0,\n+            0.0,\n+            Double.MIN_VALUE,\n+            1.0,\n+            Double.MAX_VALUE,\n+            Double.POSITIVE_INFINITY,\n+            Double.NaN,\n+    };\n+\n+    static final float[] FLOATS = new float[] {\n+            Float.NEGATIVE_INFINITY,\n+            -Float.MAX_VALUE,\n+            -1.0F,\n+            -Float.MIN_VALUE,\n+            -0.0F,\n+            0.0F,\n+            Float.MIN_VALUE,\n+            1.0F,\n+            Float.MAX_VALUE,\n+            Float.POSITIVE_INFINITY,\n+            Float.NaN,\n+    };\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MOV_D2L, \"1\"})\n+    public long doubleToRawLongBits(double x) {\n+        return Double.doubleToRawLongBits(x);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MOV_D2L, \"1\"})\n+    public long doubleToLongBits(double x) {\n+        return Double.doubleToLongBits(x);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MOV_L2D, \"1\"})\n+    public double longBitsToDouble(long x) {\n+        return Double.longBitsToDouble(x);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MOV_F2I, \"1\"})\n+    public int floatToRawIntBits(float x) {\n+        return Float.floatToRawIntBits(x);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MOV_F2I, \"1\"})\n+    public int floatToIntBits(float x) {\n+        return Float.floatToIntBits(x);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MOV_I2F, \"1\"})\n+    public float intBitsToFloat(int x) {\n+        return Float.intBitsToFloat(x);\n+    }\n+\n+    @Run(test = {\"doubleToRawLongBits\", \"doubleToLongBits\", \"longBitsToDouble\",\n+                 \"floatToRawIntBits\", \"floatToIntBits\", \"intBitsToFloat\"})\n+    public void runTests() {\n+        for (int i = 0; i < DOUBLES.length; i++) {\n+            double d = DOUBLES[i];\n+            long l1 = doubleToRawLongBits(d);\n+            long l2 = doubleToLongBits(d);\n+            double d1 = longBitsToDouble(l1);\n+            double d2 = longBitsToDouble(l2);\n+            Asserts.assertEquals(d, d1);\n+            Asserts.assertEquals(d, d2);\n+        }\n+        for (int i = 0; i < FLOATS.length; i++) {\n+            float f = FLOATS[i];\n+            int i1 = floatToRawIntBits(f);\n+            int i2 = floatToIntBits(f);\n+            float f1 = intBitsToFloat(i1);\n+            float f2 = intBitsToFloat(i2);\n+            Asserts.assertEquals(f, f1);\n+            Asserts.assertEquals(f, f2);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFPConversion.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -1132,0 +1132,20 @@\n+    public static final String MOV_F2I = PREFIX + \"MOV_F2I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MOV_F2I, \"MoveF2I\");\n+    }\n+\n+    public static final String MOV_I2F = PREFIX + \"MOV_I2F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MOV_I2F, \"MoveI2F\");\n+    }\n+\n+    public static final String MOV_D2L = PREFIX + \"MOV_D2L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MOV_D2L, \"MoveD2L\");\n+    }\n+\n+    public static final String MOV_L2D = PREFIX + \"MOD_L2D\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MOV_L2D, \"MoveL2D\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.BitSet;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(3)\n+public class DoubleBitConversion {\n+\n+    double doubleZero = 0;\n+    double doubleOne = 1;\n+    double doubleNan = Double.NaN;\n+\n+    long longDoubleZero = Double.doubleToLongBits(0);\n+    long longDoubleOne = Double.doubleToLongBits(1);\n+    long longDoubleNaN = Double.doubleToLongBits(Double.NaN);\n+\n+    @Benchmark\n+    public long doubleToRawLongBits_zero() {\n+        return Double.doubleToRawLongBits(doubleZero);\n+    }\n+\n+    @Benchmark\n+    public long doubleToRawLongBits_one() {\n+        return Double.doubleToRawLongBits(doubleOne);\n+    }\n+\n+    @Benchmark\n+    public long doubleToRawLongBits_NaN() {\n+        return Double.doubleToRawLongBits(doubleNan);\n+    }\n+\n+    @Benchmark\n+    public long doubleToLongBits_zero() {\n+        return Double.doubleToLongBits(doubleZero);\n+    }\n+\n+    @Benchmark\n+    public long doubleToLongBits_one() {\n+        return Double.doubleToLongBits(doubleOne);\n+    }\n+\n+    @Benchmark\n+    public long doubleToLongBits_NaN() {\n+        return Double.doubleToLongBits(doubleNan);\n+    }\n+\n+    @Benchmark\n+    public double longBitsToDouble_zero() {\n+        return Double.longBitsToDouble(longDoubleZero);\n+    }\n+\n+    @Benchmark\n+    public double longBitsToDouble_one() {\n+        return Double.longBitsToDouble(longDoubleOne);\n+    }\n+\n+    @Benchmark\n+    public double longBitsToDouble_NaN() {\n+        return Double.longBitsToDouble(longDoubleNaN);\n+    }\n+\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/DoubleBitConversion.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.BitSet;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(3)\n+public class FloatBitConversion {\n+\n+    float floatZero = 0;\n+    float floatOne = 1;\n+    float floatNan = Float.NaN;\n+\n+    int intFloatZero = Float.floatToIntBits(0);\n+    int intFloatOne = Float.floatToIntBits(1);\n+    int intFloatNaN = Float.floatToIntBits(Float.NaN);\n+\n+    @Benchmark\n+    public int floatToRawIntBits_zero() {\n+        return Float.floatToRawIntBits(floatZero);\n+    }\n+\n+    @Benchmark\n+    public int floatToRawIntBits_one() {\n+        return Float.floatToRawIntBits(floatOne);\n+    }\n+\n+    @Benchmark\n+    public int floatToRawIntBits_NaN() {\n+        return Float.floatToRawIntBits(floatNan);\n+    }\n+\n+    @Benchmark\n+    public int floatToIntBits_zero() {\n+        return Float.floatToIntBits(floatZero);\n+    }\n+\n+    @Benchmark\n+    public int floatToIntBits_one() {\n+        return Float.floatToIntBits(floatOne);\n+    }\n+\n+    @Benchmark\n+    public int floatToIntBits_NaN() {\n+        return Float.floatToIntBits(floatNan);\n+    }\n+\n+    @Benchmark\n+    public float intBitsToFloat_zero() {\n+        return Float.intBitsToFloat(intFloatZero);\n+    }\n+\n+    @Benchmark\n+    public float intBitsToFloat_one() {\n+        return Float.intBitsToFloat(intFloatOne);\n+    }\n+\n+    @Benchmark\n+    public float intBitsToFloat_NaN() {\n+        return Float.intBitsToFloat(intFloatNaN);\n+    }\n+\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/FloatBitConversion.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}