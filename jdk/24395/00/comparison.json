{"files":[{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8353585\n+ * @summary Basic parse tests. Enforce regular behavior, no match, and multi match.\n+ * @run junit ParseTest\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.text.ChoiceFormat;\n+import java.text.ParsePosition;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ParseTest {\n+\n+    \/\/ Ensure that the parsed text produces the expected number\n+    \/\/ i.e. return limit corresponding to format matched\n+    @ParameterizedTest\n+    @MethodSource\n+    void parseTest(String pattern, String text, Double expected, int index) {\n+        var pp = new ParsePosition(index);\n+        var fmt = new ChoiceFormat(pattern);\n+        assertEquals(expected, fmt.parse(text, pp), \"Incorrect limit returned\");\n+        if (expected.equals(Double.NaN)) { \/\/ AKA failed parse\n+            assertEquals(index, pp.getErrorIndex(),\n+                    \"Failed parse produced incorrect error index\");\n+        } else {\n+            assertEquals(-1, pp.getErrorIndex(),\n+                    \"Error index should remain -1 on match\");\n+        }\n+    }\n+\n+    private static Stream<Arguments> parseTest() {\n+        return Stream.of(\n+                Arguments.of(\"1#baz\", \"foo bar baz\", 1d, 8),\n+                Arguments.of(\"1#baz\", \"foo baz quux\", Double.NaN, 8),\n+                Arguments.of(\"1#a\", \"\", Double.NaN, 0),\n+                Arguments.of(\"1#a\", \"a\", 1d, 0),\n+                Arguments.of(\"1# \", \" \", 1d, 0),\n+                Arguments.of(\"1#a|2#a\", \"a\", 1d, 0),\n+                Arguments.of(\"1#a|2#aa\", \"aa\", 2d, 0),\n+                Arguments.of(\"1#a|2#aa\", \"aabb\", 2d, 0),\n+                Arguments.of(\"1#a|2#aa\", \"bbaa\", Double.NaN, 0),\n+                Arguments.of(\"1#aa|2#aaa\", \"a\", Double.NaN, 0)\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/ChoiceFormat\/ParseTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}