{"files":[{"patch":"@@ -559,3 +559,3 @@\n-                              VectorRegister vTmp4, VectorRegister vTmp5, VectorRegister vTmp6,\n-                              VectorRegister vTmp7, VectorRegister vTmp8, VectorRegister vTmp9,\n-                              VectorRegister vTmp10, VectorRegister vTmp11) {\n+                              VectorRegister vLowProduct, VectorRegister vMidProduct, VectorRegister vHighProduct,\n+                              VectorRegister vReducedLow, VectorRegister vTmp8, VectorRegister vTmp9,\n+                              VectorRegister vCombinedResult, VectorRegister vSwappedH) {\n@@ -564,14 +564,14 @@\n-    masm->vpmsumd(vTmp4, vLowerH, vH);            \/\/ L : Lower Half of subkey H\n-    masm->vpmsumd(vTmp5, vTmp11, vH);             \/\/ M : Combined halves of subkey H\n-    masm->vpmsumd(vTmp6, vHigherH, vH);           \/\/ H : Higher Half of subkey H\n-    masm->vpmsumd(vTmp7, vTmp4, vConstC2);        \/\/ Reduction\n-    masm->vsldoi(vTmp8, vTmp5, vZero, 8);         \/\/ mL : Extract the lower 64 bits of M\n-    masm->vsldoi(vTmp9, vZero, vTmp5, 8);         \/\/ mH : Extract the higher 64 bits of M\n-    masm->vxor(vTmp4, vTmp4, vTmp8);              \/\/ LL + LL : Partial result for lower half\n-    masm->vxor(vTmp6, vTmp6, vTmp9);              \/\/ HH + HH : Partial result for upper half\n-    masm->vsldoi(vTmp4, vTmp4, vTmp4, 8);         \/\/ Swap\n-    masm->vxor(vTmp4, vTmp4, vTmp7);              \/\/ Reduction using constant\n-    masm->vsldoi(vTmp10, vTmp4, vTmp4, 8);        \/\/ Swap\n-    masm->vpmsumd(vTmp4, vTmp4, vConstC2);        \/\/ Reduction\n-    masm->vxor(vTmp10, vTmp10, vTmp6);            \/\/ Combine reduced Low & High products\n-    masm->vxor(vState, vTmp4, vTmp10);\n+    masm->vpmsumd(vLowProduct, vLowerH, vH);                          \/\/ L : Lower Half of subkey H\n+    masm->vpmsumd(vMidProduct, vSwappedH, vH);                        \/\/ M : Combined halves of subkey H\n+    masm->vpmsumd(vHighProduct, vHigherH, vH);                        \/\/ H : Higher Half of subkey H\n+    masm->vpmsumd(vReducedLow, vLowProduct, vConstC2);                \/\/ Reduction\n+    masm->vsldoi(vTmp8, vMidProduct, vZero, 8);                       \/\/ mL : Extract the lower 64 bits of M\n+    masm->vsldoi(vTmp9, vZero, vMidProduct, 8);                       \/\/ mH : Extract the higher 64 bits of M\n+    masm->vxor(vLowProduct, vLowProduct, vTmp8);                      \/\/ LL + LL : Partial result for lower half\n+    masm->vxor(vHighProduct, vHighProduct, vTmp9);                    \/\/ HH + HH : Partial result for upper half\n+    masm->vsldoi(vLowProduct, vLowProduct, vLowProduct, 8);           \/\/ Swap\n+    masm->vxor(vLowProduct, vLowProduct, vReducedLow);                \/\/ Reduction using constant\n+    masm->vsldoi(vCombinedResult, vLowProduct, vLowProduct, 8);       \/\/ Swap\n+    masm->vpmsumd(vLowProduct, vLowProduct, vConstC2);                \/\/ Reduction\n+    masm->vxor(vCombinedResult, vCombinedResult, vHighProduct);       \/\/ Combine reduced Low & High products\n+    masm->vxor(vState, vLowProduct, vCombinedResult);\n@@ -613,4 +613,4 @@\n-    VectorRegister vTmp4 = VR4;\n-    VectorRegister vTmp5 = VR5;\n-    VectorRegister vTmp6 = VR6;\n-    VectorRegister vTmp7 = VR7;\n+    VectorRegister vLowProduct = VR4;\n+    VectorRegister vMidProduct = VR5;\n+    VectorRegister vHighProduct = VR6;\n+    VectorRegister vReducedLow = VR7;\n@@ -620,1 +620,1 @@\n-    VectorRegister vTmp11 = VR11;\n+    VectorRegister vSwappedH = VR11;\n@@ -627,0 +627,1 @@\n+    VectorRegister vCombinedResult = VR18;\n@@ -636,1 +637,1 @@\n-    __ vspltisb(vTmp7, 1);\n+    __ vspltisb(vReducedLow, 1);\n@@ -638,4 +639,4 @@\n-    __ vsldoi(vTmp8, vZero, vTmp7, 1);            \/\/ 0x1\n-    __ vor(vTmp8, vConstC2, vTmp8);               \/\/ 0xC2...1\n-    __ vsplt(vTmp9, 0, vH);                       \/\/ MSB of H\n-    __ vsl(vH, vH, vTmp7);                        \/\/ Carry = H<<7\n+    __ vsldoi(vTmp8, vZero, vReducedLow, 1);            \/\/ 0x1\n+    __ vor(vTmp8, vConstC2, vTmp8);                     \/\/ 0xC2...1\n+    __ vsplt(vTmp9, 0, vH);                             \/\/ MSB of H\n+    __ vsl(vH, vH, vReducedLow);                        \/\/ Carry = H<<7\n@@ -643,1 +644,1 @@\n-    __ vand(vTmp9, vTmp9, vTmp8);                 \/\/ Carry\n+    __ vand(vTmp9, vTmp9, vTmp8);                       \/\/ Carry\n@@ -646,3 +647,3 @@\n-    __ vsldoi(vTmp11, vTmp10, vTmp10, 8);         \/\/ swap Lower and Higher Halves of subkey H\n-    __ vsldoi(vLowerH, vZero, vTmp11, 8);         \/\/ H.L\n-    __ vsldoi(vHigherH, vTmp11, vZero, 8);        \/\/ H.H\n+    __ vsldoi(vSwappedH, vTmp10, vTmp10, 8);            \/\/ swap Lower and Higher Halves of subkey H\n+    __ vsldoi(vLowerH, vZero, vSwappedH, 8);            \/\/ H.L\n+    __ vsldoi(vHigherH, vSwappedH, vZero, 8);           \/\/ H.H\n@@ -650,1 +651,1 @@\n-    __ cmpwi(CR0, blocks, 0);                     \/\/ Compare 'blocks' (R6_ARG4) with zero\n+    __ cmpwi(CR0, blocks, 0);                           \/\/ Compare 'blocks' (R6_ARG4) with zero\n@@ -692,1 +693,1 @@\n-                    vTmp4, vTmp5, vTmp6, vTmp7, vTmp8, vTmp9, vTmp10, vTmp11);\n+                    vLowProduct, vMidProduct, vHighProduct, vReducedLow, vTmp8, vTmp9, vCombinedResult, vSwappedH);\n@@ -702,1 +703,1 @@\n-    __ xxspltib(vTmp12->to_vsr(), 31);\n+    __ vspltisb(vTmp12, -1);\n@@ -710,1 +711,1 @@\n-                    vTmp4, vTmp5, vTmp6, vTmp7, vTmp8, vTmp9, vTmp10, vTmp11);\n+                    vLowProduct, vMidProduct, vHighProduct, vReducedLow, vTmp8, vTmp9, vCombinedResult, vSwappedH);\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":36,"deletions":35,"binary":false,"changes":71,"status":"modified"}]}