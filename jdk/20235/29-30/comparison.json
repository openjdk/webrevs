{"files":[{"patch":"@@ -556,1 +556,1 @@\n-  static void computeGCMProduct(MacroAssembler* masm,\n+  static void computeGCMProduct(MacroAssembler* _masm,\n@@ -562,15 +562,15 @@\n-    masm->vxor(vH, vH, vState);\n-    masm->vpmsumd(vLowProduct, vLowerH, vH);                          \/\/ L : Lower Half of subkey H\n-    masm->vpmsumd(vMidProduct, vSwappedH, vH);                        \/\/ M : Combined halves of subkey H\n-    masm->vpmsumd(vHighProduct, vHigherH, vH);                        \/\/ H : Higher Half of subkey H\n-    masm->vpmsumd(vReducedLow, vLowProduct, vConstC2);                \/\/ Reduction\n-    masm->vsldoi(vTmp8, vMidProduct, vZero, 8);                       \/\/ mL : Extract the lower 64 bits of M\n-    masm->vsldoi(vTmp9, vZero, vMidProduct, 8);                       \/\/ mH : Extract the higher 64 bits of M\n-    masm->vxor(vLowProduct, vLowProduct, vTmp8);                      \/\/ LL + mL : Partial result for lower half\n-    masm->vxor(vHighProduct, vHighProduct, vTmp9);                    \/\/ HH + mH : Partial result for upper half\n-    masm->vsldoi(vLowProduct, vLowProduct, vLowProduct, 8);           \/\/ Swap\n-    masm->vxor(vLowProduct, vLowProduct, vReducedLow);\n-    masm->vsldoi(vCombinedResult, vLowProduct, vLowProduct, 8);       \/\/ Swap\n-    masm->vpmsumd(vLowProduct, vLowProduct, vConstC2);                \/\/ Reduction using constant\n-    masm->vxor(vCombinedResult, vCombinedResult, vHighProduct);       \/\/ Combine reduced Low & High products\n-    masm->vxor(vState, vLowProduct, vCombinedResult);\n+    __ vxor(vH, vH, vState);\n+    __ vpmsumd(vLowProduct, vLowerH, vH);                          \/\/ L : Lower Half of subkey H\n+    __ vpmsumd(vMidProduct, vSwappedH, vH);                        \/\/ M : Combined halves of subkey H\n+    __ vpmsumd(vHighProduct, vHigherH, vH);                        \/\/ H : Higher Half of subkey H\n+    __ vpmsumd(vReducedLow, vLowProduct, vConstC2);                \/\/ Reduction\n+    __ vsldoi(vTmp8, vMidProduct, vZero, 8);                       \/\/ mL : Extract the lower 64 bits of M\n+    __ vsldoi(vTmp9, vZero, vMidProduct, 8);                       \/\/ mH : Extract the higher 64 bits of M\n+    __ vxor(vLowProduct, vLowProduct, vTmp8);                      \/\/ LL + mL : Partial result for lower half\n+    __ vxor(vHighProduct, vHighProduct, vTmp9);                    \/\/ HH + mH : Partial result for upper half\n+    __ vsldoi(vLowProduct, vLowProduct, vLowProduct, 8);           \/\/ Swap\n+    __ vxor(vLowProduct, vLowProduct, vReducedLow);\n+    __ vsldoi(vCombinedResult, vLowProduct, vLowProduct, 8);       \/\/ Swap\n+    __ vpmsumd(vLowProduct, vLowProduct, vConstC2);                \/\/ Reduction using constant\n+    __ vxor(vCombinedResult, vCombinedResult, vHighProduct);       \/\/ Combine reduced Low & High products\n+    __ vxor(vState, vLowProduct, vCombinedResult);\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}