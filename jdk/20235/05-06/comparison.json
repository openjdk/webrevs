{"files":[{"patch":"@@ -637,4 +637,14 @@\n-\/\/      state:  R3_ARG1\n-\/\/      subkeyH:    R4_ARG2\n-\/\/      data: R5_ARG3\n-\/\/      blocks: R6_ARG4\n+\/\/      state:    R3_ARG1 (long[] state)\n+\/\/      subkeyH:  R4_ARG2 (long[] subH)\n+\/\/      data:     R5_ARG3 (byte[] data)\n+\/\/      blocks:   R6_ARG4 (number of 16-byte blocks to process)\n+\/\/\n+\/\/ The polynomials are processed in bit-reflected order for efficiency reasons. \n+\/\/ This optimization leverages the structure of the Galois field arithmetic \n+\/\/ to minimize the number of bit manipulations required during multiplication.\n+\/\/ For an explanation of how this works, refer :\n+\/\/ Vinodh Gopal, Erdinc Ozturk, Wajdi Feghali, Jim Guilford, Gil Wolrich, \n+\/\/ Martin Dixon. \"Optimized Galois-Counter-Mode Implementation on Intel® \n+\/\/ Architecture Processor\"\n+\/\/ http:\/\/web.archive.org\/web\/20130609111954\/http:\/\/www.intel.com\/content\/dam\/www\/public\/us\/en\/documents\/white-papers\/communications-ia-galois-counter-mode-paper.pdf\n+\/\/\n@@ -680,2 +690,1 @@\n-  __ vxor(vZero, vZero, vZero);\n-  \/\/ Load the vector from memory into vConstC2\n+  __ vspltisb(vZero, 0);\n@@ -705,1 +714,19 @@\n-  \/\/ Performing Karatsuba multiplication in Galois fields\n+  \/\/ This code performs Karatsuba multiplication in Galois fields to compute the GHASH operation. \n+  \/\/\n+  \/\/ The Karatsuba method breaks the multiplication of two 128-bit numbers into smaller parts,\n+  \/\/ performing three 128-bit multiplications and combining the results efficiently.\n+  \/\/ \n+  \/\/ (C1:C0) = A1*B1, (D1:D0) = A0*B0, (E1:E0) = (A0+A1)(B0+B1)\n+  \/\/ (A1:A0)(B1:B0) = C1:(C0+C1+D1+E1):(D1+C0+D0+E0):D0\n+  \/\/\n+  \/\/ Inputs:\n+  \/\/ - vH:       The data vector (state), containing both B0 (lower half) and B1 (higher half).\n+  \/\/ - vLowerH:  Lower half of the subkey H (A0).\n+  \/\/ - vHigherH: Higher half of the subkey H (A1).\n+  \/\/ - vConstC2: Constant used for reduction (for final processing).\n+  \/\/ \n+  \/\/ References:\n+  \/\/ Shay Gueron, Michael E. Kounavis. \n+  \/\/ \"Intel® Carry-Less Multiplication Instruction and its Usage for Computing the GCM Mode\"\n+  \/\/ https:\/\/web.archive.org\/web\/20110609115824\/https:\/\/software.intel.com\/file\/24918\n+  \/\/\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":34,"deletions":7,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -309,1 +309,5 @@\n-  if (FLAG_IS_DEFAULT(UseGHASHIntrinsics) && VM_Version::has_vsx()) {\n+  if (!VM_Version::has_vsx()) {\n+    warning(\"GHASH intrinsics are not available on this CPU\");\n+    FLAG_SET_DEFAULT(UseGHASHIntrinsics, false);\n+  }\n+  else if (UseGHASHIntrinsics) {\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}