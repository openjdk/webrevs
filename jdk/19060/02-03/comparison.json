{"files":[{"patch":"@@ -559,6 +559,3 @@\n-bool CgroupController::read_string(const char* filename, char* buf) {\n-  assert(buf != nullptr, \"invariant\");\n-  if (filename == nullptr) {\n-    log_debug(os, container)(\"read_string: filename is null\");\n-    return false;\n-  }\n+bool CgroupController::read_string(const char* filename, char* buf, size_t buf_size) {\n+  assert(buf != nullptr, \"buffer must not be null\");\n+  assert(filename != nullptr, \"filename must be given\");\n@@ -588,2 +585,3 @@\n-  \/\/ Read a single line into the provided buffer. At most 1023 characters.\n-  char* line = fgets(buf, 1024, fp);\n+  \/\/ Read a single line into the provided buffer.\n+  \/\/ At most buf_size - 1 characters.\n+  char* line = fgets(buf, buf_size, fp);\n@@ -595,2 +593,2 @@\n-  int len = strlen(line);\n-  assert(len <= 1023, \"At most 1023 bytes can be read\");\n+  size_t len = strlen(line);\n+  assert(len <= buf_size - 1, \"At most buf_size - 1 bytes can be read\");\n@@ -605,1 +603,1 @@\n-  bool is_ok = read_string(filename, buf);\n+  bool is_ok = read_string(filename, buf, 1024);\n@@ -618,1 +616,1 @@\n-  bool is_ok = read_string(filename, buf);\n+  bool is_ok = read_string(filename, buf, 1024);\n@@ -631,4 +629,3 @@\n-  if (filename == nullptr) {\n-    log_debug(os, container)(\"read_numerical_key_value: filename is null\");\n-    return false;\n-  }\n+  assert(key != nullptr, \"key must be given\");\n+  assert(result != nullptr, \"result pointer must not be null\");\n+  assert(filename != nullptr, \"file to search in must be given\");\n@@ -640,4 +637,0 @@\n-  if (key == nullptr || result == nullptr) {\n-    log_debug(os, container)(\"read_numerical_key_value: key or return pointer is null\");\n-    return false;\n-  }\n@@ -664,6 +657,0 @@\n-  if (line == nullptr) {\n-    log_debug(os, container)(\"Empty file %s\", absolute_path);\n-    fclose(fp);\n-    return false;\n-  }\n-\n@@ -673,1 +660,1 @@\n-  const int key_len = (int)strlen(key);\n+  const size_t key_len = strlen(key);\n@@ -675,1 +662,0 @@\n-    char* key_substr = strstr(line, key);\n@@ -677,1 +663,1 @@\n-    if (key_substr == line\n+    if (strncmp(line, key, key_len) == 0\n@@ -698,1 +684,1 @@\n-bool CgroupController::read_numerical_tuple_value(const char* filename, TupleValue tup, jlong* result) {\n+bool CgroupController::read_numerical_tuple_value(const char* filename, bool use_first, jlong* result) {\n@@ -700,1 +686,1 @@\n-  bool is_ok = read_string(filename, buf);\n+  bool is_ok = read_string(filename, buf, 1024);\n@@ -705,11 +691,1 @@\n-  int matched = -1;\n-  switch(tup) {\n-    case TupleValue::FIRST:  {\n-      matched = sscanf(buf, \"%1023s %*s\", token);\n-      break;\n-    }\n-    case TupleValue::SECOND: {\n-      matched = sscanf(buf, \"%*s %1023s\", token);\n-      break;\n-    }\n-  }\n+  const int matched = sscanf(buf, (use_first ? \"%1023s %*s\" : \"%*s %1023s\"), token);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":18,"deletions":42,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -94,9 +94,9 @@\n-#define CONTAINER_READ_STRING_CHECKED(controller, filename, log_string, retval)       \\\n-{                                                                                     \\\n-  bool is_ok;                                                                         \\\n-  is_ok = controller->read_string(filename, retval);                                  \\\n-  if (!is_ok) {                                                                       \\\n-    log_trace(os, container)(log_string \" failed: %d\", OSCONTAINER_ERROR);            \\\n-    return nullptr;                                                                   \\\n-  }                                                                                   \\\n-  log_trace(os, container)(log_string \" is: %s\", retval);                             \\\n+#define CONTAINER_READ_STRING_CHECKED(controller, filename, log_string, retval, buf_size) \\\n+{                                                                                         \\\n+  bool is_ok;                                                                             \\\n+  is_ok = controller->read_string(filename, retval, buf_size);                            \\\n+  if (!is_ok) {                                                                           \\\n+    log_trace(os, container)(log_string \" failed: %d\", OSCONTAINER_ERROR);                \\\n+    return nullptr;                                                                       \\\n+  }                                                                                       \\\n+  log_trace(os, container)(log_string \" is: %s\", retval);                                 \\\n@@ -105,8 +105,0 @@\n-\/*\n- * Used to model the tuple-valued cgroup interface files like cpu.max, which\n- * contains two values: <quota> <period>. In this case the first tuple value\n- * is <quota> and the second tuple value is <period>. We use this to map the\n- * tuple value to a constant string format for sscanf reading.\n- *\/\n-enum class TupleValue { FIRST, SECOND };\n-\n@@ -133,2 +125,2 @@\n-    \/* Read a string of at most 1K - 1 characters from the interface file.\n-     * The provided buffer must be at least 1K (1024) in size so as to account\n+    \/* Read a string of at most buf_size - 1 characters from the interface file.\n+     * The provided buffer must be at least buf_size in size so as to account\n@@ -139,2 +131,2 @@\n-     * in buffer will contain the first 1023 characters of the string or\n-     * up to the first new line character ('\\n') whichever comes first.\n+     * in buffer will contain the first buf_size - 1 characters of the string\n+     * or up to the first new line character ('\\n') whichever comes first.\n@@ -142,1 +134,1 @@\n-    bool read_string(const char* filename, char* buf);\n+    bool read_string(const char* filename, char* buf, size_t buf_size);\n@@ -151,1 +143,1 @@\n-    bool read_numerical_tuple_value(const char* filename, TupleValue val, jlong* result);\n+    bool read_numerical_tuple_value(const char* filename, bool use_first, jlong* result);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -99,2 +99,3 @@\n-      bool is_ok = _memory->controller()->\n-                        read_numerical_key_value(\"\/memory.stat\", \"hierarchical_memory_limit\", &hier_memlimit);\n+      bool is_ok = _memory->controller()->read_numerical_key_value(\"\/memory.stat\",\n+                                                                   \"hierarchical_memory_limit\",\n+                                                                   &hier_memlimit);\n@@ -141,2 +142,3 @@\n-      bool is_ok = _memory->controller()->\n-                      read_numerical_key_value(\"\/memory.stat\", matchline, &hier_memswlimit);\n+      bool is_ok = _memory->controller()->read_numerical_key_value(\"\/memory.stat\",\n+                                                                   matchline,\n+                                                                   &hier_memswlimit);\n@@ -247,2 +249,3 @@\n-  bool is_ok = _memory->controller()->\n-                    read_numerical_key_value(\"\/memory.stat\", \"rss\", &rss);\n+  bool is_ok = _memory->controller()->read_numerical_key_value(\"\/memory.stat\",\n+                                                               \"rss\",\n+                                                               &rss);\n@@ -258,2 +261,3 @@\n-  bool is_ok = _memory->controller()->\n-                    read_numerical_key_value(\"\/memory.stat\", \"cache\", &cache);\n+  bool is_ok = _memory->controller()->read_numerical_key_value(\"\/memory.stat\",\n+                                                               \"cache\",\n+                                                               &cache);\n@@ -300,1 +304,1 @@\n-  CONTAINER_READ_STRING_CHECKED(_cpuset, \"\/cpuset.cpus\", \"cpuset.cpus\", cpus);\n+  CONTAINER_READ_STRING_CHECKED(_cpuset, \"\/cpuset.cpus\", \"cpuset.cpus\", cpus, 1024);\n@@ -306,1 +310,1 @@\n-  CONTAINER_READ_STRING_CHECKED(_cpuset, \"\/cpuset.mems\", \"cpuset.mems\", mems);\n+  CONTAINER_READ_STRING_CHECKED(_cpuset, \"\/cpuset.mems\", \"cpuset.mems\", mems, 1024);\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  bool is_ok = _unified->read_numerical_tuple_value(\"\/cpu.max\", TupleValue::FIRST, &quota_val);\n+  bool is_ok = _unified->read_numerical_tuple_value(\"\/cpu.max\", true \/* use_first *\/, &quota_val);\n@@ -99,1 +99,1 @@\n-  CONTAINER_READ_STRING_CHECKED(_unified, \"\/cpuset.cpus\", \"cpuset.cpus\", cpus);\n+  CONTAINER_READ_STRING_CHECKED(_unified, \"\/cpuset.cpus\", \"cpuset.cpus\", cpus, 1024);\n@@ -105,1 +105,1 @@\n-  CONTAINER_READ_STRING_CHECKED(_unified, \"\/cpuset.mems\", \"cpuset.mems\", mems);\n+  CONTAINER_READ_STRING_CHECKED(_unified, \"\/cpuset.mems\", \"cpuset.mems\", mems, 1024);\n@@ -111,1 +111,1 @@\n-  bool is_ok = _unified->read_numerical_tuple_value(\"\/cpu.max\", TupleValue::SECOND, &period_val);\n+  bool is_ok = _unified->read_numerical_tuple_value(\"\/cpu.max\", false \/* use_first *\/, &period_val);\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -116,0 +116,12 @@\n+  x = 0xBAD;\n+  fill_file(test_file, nullptr);\n+  is_ok = controller->read_numerical_key_value(base_with_slash, \"foo\", &x);\n+  EXPECT_FALSE(is_ok) << \"key not in empty file\";\n+  EXPECT_EQ((julong)0xBAD, x) << \"x must be unchanged\";\n+\n+  x = 0xBAD;\n+  fill_file(test_file, \"foo\\n\");\n+  is_ok = controller->read_numerical_key_value(base_with_slash, \"foo\", &x);\n+  EXPECT_FALSE(is_ok) << \"key must have a value\";\n+  EXPECT_EQ((julong)0xBAD, x) << \"x must be unchanged\";\n+\n@@ -149,0 +161,6 @@\n+  x = 0xBAD;\n+  fill_file(test_file, \"foo\\nbar 333\\nfoo\\t111\");\n+  is_ok = controller->read_numerical_key_value(base_with_slash, \"foo\", &x);\n+  EXPECT_TRUE(is_ok);\n+  EXPECT_EQ((julong)111, x) << \"Incorrect!\";\n+\n@@ -179,7 +197,0 @@\n-  \/\/ null file, null return pointer\n-  TestController* test_controller = new TestController((char*)\"\/something\");\n-  is_ok = test_controller->read_number(nullptr, &a);\n-  EXPECT_FALSE(is_ok) << \"Null file should be an error\";\n-  EXPECT_EQ((julong)0xBAD, a) << \"Expected untouched scan value\";\n-  is_ok = test_controller->read_number(test_file_path, nullptr);\n-  EXPECT_FALSE(is_ok) << \"Null return pointer should be an error\";\n@@ -198,1 +209,1 @@\n-  bool is_ok = too_large_path_controller->read_string(test_file_path, foo);\n+  bool is_ok = too_large_path_controller->read_string(test_file_path, foo, 1024);\n@@ -221,8 +232,0 @@\n-  \/\/ null key, null file, null return pointer\n-  TestController* test_controller = new TestController((char*)\"\/something\");\n-  is_ok = test_controller->read_numerical_key_value(test_file_path, nullptr, &a);\n-  EXPECT_FALSE(is_ok) << \"Null key should be an error\";\n-  is_ok = test_controller->read_numerical_key_value(nullptr, key, &a);\n-  EXPECT_FALSE(is_ok) << \"Null file should be an error\";\n-  is_ok = test_controller->read_numerical_key_value(test_file_path, key, nullptr);\n-  EXPECT_FALSE(is_ok) << \"Null return pointer should be an error\";\n@@ -296,1 +299,1 @@\n-  bool ok = controller->read_string(base_with_slash, result);\n+  bool ok = controller->read_string(base_with_slash, result, 1024);\n@@ -302,1 +305,1 @@\n-  ok = controller->read_string(base_with_slash, result);\n+  ok = controller->read_string(base_with_slash, result, 1024);\n@@ -309,1 +312,1 @@\n-  ok = controller->read_string(base_with_slash, result);\n+  ok = controller->read_string(base_with_slash, result, 1024);\n@@ -316,1 +319,1 @@\n-  ok = controller->read_string(base_with_slash, result);\n+  ok = controller->read_string(base_with_slash, result, 1024);\n@@ -322,1 +325,1 @@\n-  ok = controller->read_string(base_with_slash, result);\n+  ok = controller->read_string(base_with_slash, result, 1024);\n@@ -335,1 +338,1 @@\n-  ok = controller->read_string(base_with_slash, result);\n+  ok = controller->read_string(base_with_slash, result, 1024);\n@@ -356,1 +359,1 @@\n-  bool ok = controller->read_numerical_tuple_value(base_with_slash, TupleValue::FIRST, &result);\n+  bool ok = controller->read_numerical_tuple_value(base_with_slash, true \/* use_first *\/, &result);\n@@ -361,1 +364,1 @@\n-  ok = controller->read_numerical_tuple_value(base_with_slash, TupleValue::SECOND, &result);\n+  ok = controller->read_numerical_tuple_value(base_with_slash, false \/* use_first *\/, &result);\n@@ -368,1 +371,1 @@\n-  ok = controller->read_numerical_tuple_value(base_with_slash, TupleValue::FIRST, &result);\n+  ok = controller->read_numerical_tuple_value(base_with_slash, true \/* use_first *\/, &result);\n@@ -374,1 +377,1 @@\n-  ok = controller->read_numerical_tuple_value(base_with_slash, TupleValue::FIRST, &result);\n+  ok = controller->read_numerical_tuple_value(base_with_slash, true \/* use_first *\/, &result);\n","filename":"test\/hotspot\/gtest\/runtime\/test_cgroupSubsystem_linux.cpp","additions":29,"deletions":26,"binary":false,"changes":55,"status":"modified"}]}