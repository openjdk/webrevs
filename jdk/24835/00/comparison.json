{"files":[{"patch":"@@ -217,1 +217,0 @@\n-        maybeCompile(lform, m);\n@@ -323,6 +322,0 @@\n-    private static void maybeCompile(LambdaForm lform, MemberName m) {\n-        if (lform.vmentry == null && VerifyAccess.isSamePackage(m.getDeclaringClass(), MethodHandle.class))\n-            \/\/ Help along bootstrapping...\n-            lform.compileToBytecode();\n-    }\n-\n@@ -670,1 +663,0 @@\n-        maybeCompile(lform, m);\n@@ -845,0 +837,3 @@\n+\n+        \/\/ NF_UNSAFE uses field form, avoid circular dependency in interpreter\n+        form.compileToBytecode();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+\n+\/*\n+ * @test\n+ * @bug 8297727\n+ * @summary MethodHandle field access fails with bytecode compilation disabled\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames\n+ *     -Djava.lang.invoke.MethodHandle.COMPILE_THRESHOLD=-1\n+ *     ReflectionInInterpretTest\n+ *\/\n+public class ReflectionInInterpretTest {\n+    private static Integer f; \/\/ non-Object type is required to find a non-compiled form\n+\n+    public static void main(String... args) throws Throwable {\n+        MethodHandle mh = MethodHandles.lookup().findStaticGetter(ReflectionInInterpretTest.class, \"f\", Integer.class);\n+        var _ = (Integer) mh.invokeExact();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/LFInterpret\/ReflectionInInterpretTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"}]}