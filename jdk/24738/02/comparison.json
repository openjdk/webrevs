{"files":[{"patch":"@@ -119,1 +119,1 @@\n-     * open and ready to supply input data. Typically this stream\n+     * open and ready to supply input data. This stream\n@@ -121,4 +121,3 @@\n-     * the host environment or user. In case this stream is wrapped\n-     * in a {@link java.io.InputStreamReader}, {@link Console#charset()}\n-     * should be used for the charset, or consider using\n-     * {@link Console#reader()}.\n+     * the host environment or user. Applications should use the encoding\n+     * specified by the {@link ##stdin.encoding stdin.encoding} property\n+     * to convert input bytes to character data.\n@@ -126,2 +125,11 @@\n-     * @see Console#charset()\n-     * @see Console#reader()\n+     * @apiNote\n+     * The typical approach to read character data is to wrap {@code System.in}\n+     * within an {@link java.io.InputStreamReader InputStreamReader} or other object\n+     * that handles character encoding. After this is done, subsequent reading should\n+     * use only the wrapper object; operating directly on {@code System.in} results\n+     * in unspecified behavior.\n+     * <p>\n+     * For handling interactive input, consider using {@link Console}.\n+     *\n+     * @see Console\n+     * @see ##stdin.encoding stdin.encoding\n@@ -578,2 +586,7 @@\n-     *     <td>Character encoding name derived from the host environment and\/or\n-     *     the user's settings. Setting this system property has no effect.<\/td><\/tr>\n+     *     <td>Character encoding name derived from the host environment and\n+     *     the user's settings. Setting this system property on the command line\n+     *     has no effect.<\/td><\/tr>\n+     * <tr><th scope=\"row\">{@systemProperty stdin.encoding}<\/th>\n+     *     <td>Character encoding name for {@link System#in System.in}.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8}.\n+     *     Starting it with the property set to another value results in unspecified behavior.\n@@ -583,2 +596,2 @@\n-     *     The Java runtime can be started with the system property set to {@code UTF-8},\n-     *     starting it with the property set to another value leads to undefined behavior.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8}.\n+     *     Starting it with the property set to another value results in unspecified behavior.\n@@ -587,2 +600,2 @@\n-     *     The Java runtime can be started with the system property set to {@code UTF-8},\n-     *     starting it with the property set to another value leads to undefined behavior.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8}.\n+     *     Starting it with the property set to another value results in unspecified behavior.\n@@ -642,1 +655,1 @@\n-     *     {@code COMPAT} leads to unspecified behavior.\n+     *     {@code COMPAT} results in unspecified behavior.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -91,3 +91,6 @@\n-        \/\/ \"stdout\/err.encoding\", prepared for System.out\/err. For compatibility\n-        \/\/ purposes, substitute them with \"sun.*\" if they don't exist. If \"sun.*\" aren't\n-        \/\/ available either, fall back to \"native.encoding\".\n+        \/\/ Encoding properties for stdin, stdout, and stderr. For stdout and stderr,\n+        \/\/ check \"sun.stdout.encoding\" and \"sun.stderr.encoding\" properties for backward\n+        \/\/ compatibility reasons before falling back to the \"native.encoding\" property.\n+        putIfAbsent(props, \"stdin.encoding\",\n+                raw.propDefault(Raw._stdin_encoding_NDX));\n+        putIfAbsent(props, \"stdin.encoding\", nativeEncoding);\n@@ -244,1 +247,2 @@\n-        @Native private static final int _stdout_encoding_NDX = 1 + _stderr_encoding_NDX;\n+        @Native private static final int _stdin_encoding_NDX = 1 + _stderr_encoding_NDX;\n+        @Native private static final int _stdout_encoding_NDX = 1 + _stdin_encoding_NDX;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/SystemProps.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -157,0 +157,1 @@\n+    PUTPROP(propArray, _stdin_encoding_NDX, sprops->stdin_encoding);\n","filename":"src\/java.base\/share\/native\/libjava\/System.c","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    char *stdin_encoding;\n","filename":"src\/java.base\/share\/native\/libjava\/java_props.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -467,0 +467,3 @@\n+    if (isatty(STDIN_FILENO) == 1) {\n+        sprops.stdin_encoding = sprops.encoding;\n+    }\n","filename":"src\/java.base\/unix\/native\/libjava\/java_props_md.c","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -637,1 +637,1 @@\n-            HANDLE hStdOutErr;\n+            HANDLE hStdHandle;\n@@ -680,3 +680,8 @@\n-            hStdOutErr = GetStdHandle(STD_OUTPUT_HANDLE);\n-            if (hStdOutErr != INVALID_HANDLE_VALUE &&\n-                GetFileType(hStdOutErr) == FILE_TYPE_CHAR) {\n+            hStdHandle = GetStdHandle(STD_INPUT_HANDLE);\n+            if (hStdHandle != INVALID_HANDLE_VALUE &&\n+                GetFileType(hStdHandle) == FILE_TYPE_CHAR) {\n+                sprops.stdin_encoding = getConsoleEncoding(FALSE);\n+            }\n+            hStdHandle = GetStdHandle(STD_OUTPUT_HANDLE);\n+            if (hStdHandle != INVALID_HANDLE_VALUE &&\n+                GetFileType(hStdHandle) == FILE_TYPE_CHAR) {\n@@ -685,3 +690,3 @@\n-            hStdOutErr = GetStdHandle(STD_ERROR_HANDLE);\n-            if (hStdOutErr != INVALID_HANDLE_VALUE &&\n-                GetFileType(hStdOutErr) == FILE_TYPE_CHAR) {\n+            hStdHandle = GetStdHandle(STD_ERROR_HANDLE);\n+            if (hStdHandle != INVALID_HANDLE_VALUE &&\n+                GetFileType(hStdHandle) == FILE_TYPE_CHAR) {\n","filename":"src\/java.base\/windows\/native\/libjava\/java_props_md.c","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+                {\"stdin.encoding\"},\n","filename":"test\/jdk\/java\/lang\/System\/PropertyTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}