{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,1 @@\n- *  \n+ *\n@@ -132,1 +132,1 @@\n-  probe CallNonvirtualVoidMethodV__entry(void*, void*, void*, uintptr_t);  \n+  probe CallNonvirtualVoidMethodV__entry(void*, void*, void*, uintptr_t);\n@@ -203,2 +203,2 @@\n-  probe CallStaticVoidMethod__return(); \n-  probe CallStaticVoidMethodV__entry(void*, void*, uintptr_t);  \n+  probe CallStaticVoidMethod__return();\n+  probe CallStaticVoidMethodV__entry(void*, void*, uintptr_t);\n@@ -206,1 +206,1 @@\n-  probe CallVoidMethodA__entry(void*, void*, uintptr_t);  \n+  probe CallVoidMethodA__entry(void*, void*, uintptr_t);\n@@ -208,3 +208,3 @@\n-  probe CallVoidMethod__entry(void*, void*, uintptr_t);  \n-  probe CallVoidMethod__return(); \n-  probe CallVoidMethodV__entry(void*, void*, uintptr_t);  \n+  probe CallVoidMethod__entry(void*, void*, uintptr_t);\n+  probe CallVoidMethod__return();\n+  probe CallVoidMethodV__entry(void*, void*, uintptr_t);\n@@ -232,1 +232,1 @@\n-  probe ExceptionDescribe__entry(void*);  \n+  probe ExceptionDescribe__entry(void*);\n@@ -355,0 +355,2 @@\n+  probe GetStringUTFLengthAsLong__entry(void*, void*);\n+  probe GetStringUTFLengthAsLong__return(uintptr_t);\n@@ -391,1 +393,1 @@\n-  probe NewObjectA__entry(void*, void*, uintptr_t);  \n+  probe NewObjectA__entry(void*, void*, uintptr_t);\n@@ -395,1 +397,1 @@\n-  probe NewObject__entry(void*, void*, uintptr_t); \n+  probe NewObject__entry(void*, void*, uintptr_t);\n@@ -397,1 +399,1 @@\n-  probe NewObjectV__entry(void*, void*, uintptr_t);  \n+  probe NewObjectV__entry(void*, void*, uintptr_t);\n@@ -411,1 +413,1 @@\n-  probe RegisterNatives__entry(void*, void*, const void*, uint32_t);  \n+  probe RegisterNatives__entry(void*, void*, const void*, uint32_t);\n@@ -493,2 +495,2 @@\n-  probe ThrowNew__entry(void*, void*, const char*);  \n-  probe ThrowNew__return(intptr_t);  \n+  probe ThrowNew__entry(void*, void*, const char*);\n+  probe ThrowNew__return(intptr_t);\n@@ -499,1 +501,1 @@\n-  probe UnregisterNatives__entry(void*, void*);  \n+  probe UnregisterNatives__entry(void*, void*);\n@@ -508,1 +510,0 @@\n-\n","filename":"src\/hotspot\/os\/posix\/dtrace\/hotspot_jni.d","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2224,1 +2224,1 @@\n- HOTSPOT_JNI_GETSTRINGUTFLENGTH_ENTRY(env, string);\n+  HOTSPOT_JNI_GETSTRINGUTFLENGTH_ENTRY(env, string);\n@@ -2231,0 +2231,8 @@\n+JNI_ENTRY(jlong, jni_GetStringUTFLengthAsLong(JNIEnv *env, jstring string))\n+  HOTSPOT_JNI_GETSTRINGUTFLENGTHASLONG_ENTRY(env, string);\n+  oop java_string = JNIHandles::resolve_non_null(string);\n+  size_t ret = java_lang_String::utf8_length(java_string);\n+  HOTSPOT_JNI_GETSTRINGUTFLENGTHASLONG_RETURN(ret);\n+return checked_cast<jlong>(ret);\n+JNI_END\n+\n@@ -3401,1 +3409,5 @@\n-    jni_IsVirtualThread\n+    jni_IsVirtualThread,\n+\n+    \/\/ Large UTF8 support\n+\n+    jni_GetStringUTFLengthAsLong\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1514,0 +1514,21 @@\n+    jlong full_length =  UNCHECKED()->GetStringUTFLengthAsLong(env,str);\n+    if (full_length > result) {\n+      ResourceMark rm(thr);\n+      stringStream ss;\n+      ss.print(\"WARNING: large String with modified UTF-8 length \" JLONG_FORMAT\n+                \" is reporting a reduced length of %d - use GetStringUTFLengthAsLong instead\",\n+                full_length, result);\n+      NativeReportJNIWarning(thr, ss.as_string());\n+    }\n+    functionExit(thr);\n+    return result;\n+JNI_END\n+\n+JNI_ENTRY_CHECKED(jlong,\n+  checked_jni_GetStringUTFLengthAsLong(JNIEnv *env,\n+                                       jstring str))\n+    functionEnter(thr);\n+    IN_VM(\n+      checkString(thr, str);\n+    )\n+    jlong result = UNCHECKED()->GetStringUTFLengthAsLong(env,str);\n@@ -2286,1 +2307,6 @@\n-    checked_jni_IsVirtualThread\n+    checked_jni_IsVirtualThread,\n+\n+    \/\/ Large UTF8 support\n+\n+    checked_jni_GetStringUTFLengthAsLong\n+\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -786,0 +786,4 @@\n+#define HOTSPOT_JNI_GETSTRINGUTFLENGTHASLONG_ENTRY(arg0, arg1)\n+#define HOTSPOT_JNI_GETSTRINGUTFLENGTHASLONG_ENTRY_ENABLED()  0\n+#define HOTSPOT_JNI_GETSTRINGUTFLENGTHASLONG_RETURN(arg0)\n+#define HOTSPOT_JNI_GETSTRINGUTFLENGTHASLONG_RETURN_ENABLED()  0\n","filename":"src\/hotspot\/share\/utilities\/dtrace_disabled.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -778,0 +778,6 @@\n+\n+    \/* Large UTF8 Support *\/\n+\n+    jlong (JNICALL *GetStringUTFLengthAsLong)\n+      (JNIEnv *env, jstring str);\n+\n@@ -1626,0 +1632,3 @@\n+    jlong GetStringUTFLengthAsLong(jstring str) {\n+        return functions->GetStringUTFLengthAsLong(this,str);\n+    }\n@@ -1996,0 +2005,1 @@\n+#define JNI_VERSION_24  0x00180000\n","filename":"src\/java.base\/share\/native\/include\/jni.h","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8328877\n+ * @summary Test warning for GetStringUTFLength and functionality of GetStringUTFLengthAsLong\n+ * @library \/test\/lib\n+ * @modules java.management\n+ * @run main\/native TestLargeUTF8Length launch\n+ *\/\n+\n+import java.util.Arrays;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestLargeUTF8Length {\n+\n+    static {\n+        System.loadLibrary(\"TestLargeUTF8Length\");\n+    }\n+\n+    static native void checkUTF8Length(String s, long utf8Length);\n+\n+    static void test() {\n+        int length = Integer.MAX_VALUE\/2 + 1;\n+        char character = (char)0XD1; \/\/ N with tilde\n+        long utf8Length = 2L * length;\n+        char[] chrs = new char[length];\n+        Arrays.fill(chrs, character);\n+        String s = new String(chrs);\n+        checkUTF8Length(s, utf8Length);\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        if (args == null || args.length == 0) {\n+            test();\n+            return;\n+        }\n+\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\"-Xms9G\",\n+                                                         \"-Xmx9G\",\n+                                                         \"-Xcheck:jni\",\n+                                                         \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n+                                                         \"TestLargeUTF8Length\");\n+        String warning = \"WARNING: large String with modified UTF-8 length .*\" +\n+                         \"is reporting a reduced length of .* - use GetStringUTFLengthAsLong instead\";\n+        oa.shouldHaveExitValue(0);\n+        oa.stdoutShouldMatch(warning);\n+        oa.reportDiagnosticSummary();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestLargeUTF8Length.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+\n+#include <limits.h>\n+#include <stdio.h>\n+\n+JNIEXPORT void JNICALL\n+Java_TestLargeUTF8Length_checkUTF8Length(JNIEnv *env, jclass clz,\n+                                         jstring str, jlong expected_length) {\n+\n+  jlong utf8_length;\n+\n+  \/\/ First get truncated length to generate warning\n+  utf8_length = (*env)->GetStringUTFLength(env, str);\n+\n+  if (utf8_length != INT_MAX - 1) {\n+    printf(\"Error: expected length of %d, but got %lld\\n\", INT_MAX - 1,\n+           (long long) utf8_length);\n+    (*env)->FatalError(env, \"Unexpected truncated length\");\n+  }\n+\n+  \/\/ Now get true length\n+  utf8_length = (*env)->GetStringUTFLengthAsLong(env, str);\n+\n+  if (utf8_length != expected_length ) {\n+    printf(\"Error: expected length of %lld, but got %lld\\n\",\n+           (long long) expected_length, (long long) utf8_length);\n+    (*env)->FatalError(env, \"Unexpected true length\");\n+  }\n+\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/libTestLargeUTF8Length.c","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}