{"files":[{"patch":"@@ -59,0 +59,7 @@\n+\n+    \/**\n+     * The value of the {@code state} of a {@code MemorySessionImpl}. The only possible transition\n+     * is OPEN -> CLOSED. As a result, the states CLOSED and UNCLOSEABLE are stable. This allows us\n+     * to annotate {@code state} with {@link Stable} and elide liveness check on non-closeable\n+     * constant scopes, such as {@code GLOBAL_SESSION}.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.TearDown;\n+import sun.misc.Unsafe;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"--enable-native-access=ALL-UNNAMED\" })\n+public class LoopOverRandom extends JavaLayouts {\n+\n+    static final int ELEM_SIZE = 1_000;\n+    static final long ALLOC_SIZE = ELEM_SIZE * ValueLayout.JAVA_INT.byteSize();\n+\n+    static final Unsafe unsafe = Utils.unsafe;\n+\n+    Arena arena;\n+    MemorySegment segment;\n+    int[] indices;\n+\n+    static final MemorySegment ALL = MemorySegment.NULL.reinterpret(Long.MAX_VALUE);\n+\n+    @Setup\n+    public void setup() {\n+        indices = new Random().ints(0, ELEM_SIZE).limit(ELEM_SIZE).toArray();\n+        arena = Arena.ofConfined();\n+        segment = arena.allocate(ALLOC_SIZE);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            segment.setAtIndex(ValueLayout.JAVA_INT, i, i);\n+        }\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        arena.close();\n+    }\n+\n+    @Benchmark\n+    public long segment_loop() {\n+        int sum = 0;\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            sum += segment.getAtIndex(ValueLayout.JAVA_INT_UNALIGNED, indices[i]);\n+            target_dontInline();\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public long segment_loop_all() {\n+        int sum = 0;\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            sum += ALL.get(ValueLayout.JAVA_INT_UNALIGNED, ValueLayout.JAVA_INT.scale(segment.address(), indices[i]));\n+            target_dontInline();\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public long segment_loop_asUnchecked() {\n+        int sum = 0;\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            sum += asUnchecked(segment).getAtIndex(ValueLayout.JAVA_INT_UNALIGNED, indices[i]);\n+            target_dontInline();\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public long unsafe_loop() {\n+        int sum = 0;\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            sum += unsafe.getInt(ValueLayout.JAVA_INT.scale(segment.address(), indices[i]));\n+            target_dontInline();\n+        }\n+        return sum;\n+    }\n+\n+    MemorySegment asUnchecked(MemorySegment segment) {\n+        return MemorySegment.ofAddress(segment.address()).reinterpret(Long.MAX_VALUE);\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void target_dontInline() {\n+        \/\/ this method was intentionally left blank\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverRandom.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}