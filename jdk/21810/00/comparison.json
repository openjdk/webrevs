{"files":[{"patch":"@@ -44,2 +44,1 @@\n-    static final VarHandle ASYNC_RELEASE_COUNT= MhUtil.findVarHandle(\n-            MethodHandles.lookup(), \"asyncReleaseCount\", int.class);\n+    static final VarHandle ASYNC_RELEASE_COUNT= MhUtil.findVarHandle(MethodHandles.lookup(), \"asyncReleaseCount\", int.class);\n@@ -55,1 +54,1 @@\n-        if (state == MAX_FORKS) {\n+        if (acquireCount == MAX_FORKS) {\n@@ -58,1 +57,1 @@\n-        state++;\n+        acquireCount++;\n@@ -65,1 +64,1 @@\n-            state--;\n+            acquireCount--;\n@@ -78,2 +77,2 @@\n-        if ((state == 0 && asyncCount == 0)\n-                || ((state - asyncCount) == 0)) {\n+        int acquire = acquireCount - asyncCount;\n+        if (acquire == 0) {\n@@ -82,1 +81,1 @@\n-            throw alreadyAcquired(state - asyncCount);\n+            throw alreadyAcquired(acquire);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ConfinedSession.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+        this.state = NONCLOSEABLE;\n@@ -53,5 +54,0 @@\n-    @Override\n-    public boolean isCloseable() {\n-        return false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/GlobalSession.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+        this.state = NONCLOSEABLE;\n@@ -58,5 +59,0 @@\n-    @Override\n-    public boolean isCloseable() {\n-        return false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ImplicitSession.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -60,0 +61,1 @@\n+    static final int NONCLOSEABLE = 1;\n@@ -61,2 +63,1 @@\n-    static final VarHandle STATE = MhUtil.findVarHandle(\n-            MethodHandles.lookup(), \"state\", int.class);\n+    static final VarHandle ACQUIRE_COUNT = MhUtil.findVarHandle(MethodHandles.lookup(), \"acquireCount\", int.class);\n@@ -73,1 +74,5 @@\n-    int state = OPEN;\n+\n+    @Stable\n+    int state;\n+\n+    int acquireCount;\n@@ -217,2 +222,2 @@\n-    public boolean isCloseable() {\n-        return true;\n+    public final boolean isCloseable() {\n+        return state <= OPEN;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+    private static final int CLOSED_ACQUIRE_COUNT = -1;\n+\n@@ -56,2 +58,2 @@\n-            value = (int) STATE.getVolatile(this);\n-            if (value < OPEN) {\n+            value = (int) ACQUIRE_COUNT.getVolatile(this);\n+            if (value < 0) {\n@@ -64,1 +66,1 @@\n-        } while (!STATE.compareAndSet(this, value, value + 1));\n+        } while (!ACQUIRE_COUNT.compareAndSet(this, value, value + 1));\n@@ -72,2 +74,2 @@\n-            value = (int) STATE.getVolatile(this);\n-            if (value <= OPEN) {\n+            value = (int) ACQUIRE_COUNT.getVolatile(this);\n+            if (value <= 0) {\n@@ -77,1 +79,1 @@\n-        } while (!STATE.compareAndSet(this, value, value - 1));\n+        } while (!ACQUIRE_COUNT.compareAndSet(this, value, value - 1));\n@@ -81,2 +83,2 @@\n-        int prevState = (int) STATE.compareAndExchange(this, OPEN, CLOSED);\n-        if (prevState < 0) {\n+        int acquireCount = (int) ACQUIRE_COUNT.compareAndExchange(this, 0, CLOSED_ACQUIRE_COUNT);\n+        if (acquireCount < 0) {\n@@ -84,2 +86,2 @@\n-        } else if (prevState != OPEN) {\n-            throw alreadyAcquired(prevState);\n+        } else if (acquireCount > 0) {\n+            throw alreadyAcquired(acquireCount);\n@@ -87,0 +89,2 @@\n+\n+        state = CLOSED;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedSession.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}