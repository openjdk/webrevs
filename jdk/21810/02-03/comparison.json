{"files":[{"patch":"@@ -70,0 +70,1 @@\n+    static final VarHandle STATE = MhUtil.findVarHandle(MethodHandles.lookup(), \"state\", int.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                throw alreadyClosed();\n+                throw sharedSessionAlreadyClosed();\n@@ -77,1 +77,1 @@\n-                throw alreadyClosed();\n+                throw sharedSessionAlreadyClosed();\n@@ -85,1 +85,1 @@\n-            throw alreadyClosed();\n+            throw sharedSessionAlreadyClosed();\n@@ -90,1 +90,1 @@\n-        state = CLOSED;\n+        STATE.setOpaque(this, CLOSED);\n@@ -94,0 +94,9 @@\n+    private IllegalStateException sharedSessionAlreadyClosed() {\n+        \/\/ To avoid the situation where a scope fails to be acquired or closed but still reports as\n+        \/\/ alive afterward, we wait for the state to change before throwing the exception\n+        while ((int) STATE.getVolatile(this) == OPEN) {\n+            Thread.onSpinWait();\n+        }\n+        return alreadyClosed();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedSession.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"}]}