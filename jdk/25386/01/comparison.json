{"files":[{"patch":"@@ -2098,0 +2098,14 @@\n+\/\/ Is one of the inputs a Cast that has not been processed by igvn yet?\n+bool PhiNode::wait_for_cast_input_igvn(const PhaseIterGVN* igvn) const {\n+  for (uint i = 1, cnt = req(); i < cnt; ++i) {\n+    Node* n = in(i);\n+    while (n != nullptr && n->is_ConstraintCast()) {\n+      if (igvn->_worklist.member(n)) {\n+        return true;\n+      }\n+      n = n->in(1);\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -2156,0 +2170,7 @@\n+    \/\/ If one of the inputs is a cast that has yet to be processed by igvn, delay processing of this node to give the\n+    \/\/ inputs a chance to optimize and possibly end up with identical inputs.\n+    PhaseIterGVN* igvn = phase->is_IterGVN();\n+    if (wait_for_cast_input_igvn(igvn)) {\n+      igvn->_worklist.push(this);\n+      return nullptr;\n+    }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -185,0 +185,2 @@\n+  bool wait_for_cast_input_igvn(const PhaseIterGVN* igvn) const;\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8351889\n+ * @summary C2 crash: assertion failed: Base pointers must match (addp 344)\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:CompileOnly=TestMismatchedAddPAfterMaxUnroll::test1\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:-UseLoopPredicate\n+ *                   -XX:+StressIGVN -XX:StressSeed=383593806 TestMismatchedAddPAfterMaxUnroll\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:CompileOnly=TestMismatchedAddPAfterMaxUnroll::test1\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:-UseLoopPredicate\n+ *                   -XX:+StressIGVN TestMismatchedAddPAfterMaxUnroll\n+ * @run main\/othervm TestMismatchedAddPAfterMaxUnroll\n+ *\/\n+\n+public class TestMismatchedAddPAfterMaxUnroll {\n+    private static C[] arrayField = new C[4];\n+\n+    public static void main(String[] args) {\n+        C c = new C();\n+        Object lock = new Object();\n+        for (int i = 0; i < 20_000; i++) {\n+            arrayField[3] = null;\n+            test1(3, c, arrayField, true, true, lock);\n+            arrayField[3] = null;\n+            test1(3, c, arrayField, true, false, lock);\n+            arrayField[3] = null;\n+            test1(3, c, arrayField, false, false, lock);\n+            arrayField[3] = c;\n+            test1(3, c, arrayField, false, false, lock);\n+        }\n+    }\n+\n+    static class C {\n+\n+    }\n+\n+    private static void test1(int j, C c, C[] otherArray, boolean flag, boolean flag2, Object lock) {\n+        C[] array = arrayField;\n+        int i = 0;\n+        for (;;) {\n+            synchronized (lock) {}\n+            if (array[j] == null) {\n+                break;\n+            }\n+            otherArray[i] = c;\n+            i++;\n+            if (i >= 3) {\n+                return;\n+            }\n+        }\n+        if (flag) {\n+            if (flag2) {\n+            }\n+        }\n+        array[j] = c;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMismatchedAddPAfterMaxUnroll.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}