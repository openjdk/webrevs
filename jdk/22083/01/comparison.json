{"files":[{"patch":"@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import sun.security.action.GetBooleanAction;\n-\n@@ -70,1 +67,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -72,1 +68,1 @@\n-        AccessController.doPrivileged(new GetBooleanAction(\"swing.disablevistaanimation\"));\n+                        Boolean.getBoolean(\"swing.disablevistaanimation\");\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/AnimationController.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-import java.security.AccessController;\n@@ -187,3 +186,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String systemFonts = java.security.AccessController.doPrivileged(\n-               new GetPropertyAction(\"swing.useSystemFontSettings\"));\n+        String systemFonts = System.getProperty(\"swing.useSystemFontSettings\");\n@@ -599,2 +596,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String prop = AccessController.doPrivileged(new GetPropertyAction(\"swing.noxp\"));\n+            String prop = System.getProperty(\"swing.noxp\");\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLookAndFeel.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-import java.security.AccessController;\n@@ -127,1 +126,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -139,1 +137,1 @@\n-                if (AccessController.doPrivileged(propertyAction) == null &&\n+                if (propertyAction == null &&\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/XPStyle.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -44,7 +44,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                public Void run() {\n-                    System.loadLibrary(\"awt\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"awt\");\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/PlatformGraphicsInfo.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -50,18 +48,15 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final TrueTypeFont eudcFont =\n-            AccessController.doPrivileged(new PrivilegedAction<TrueTypeFont>() {\n-                public TrueTypeFont run() {\n-                    String eudcFile = getEUDCFontFile();\n-                    if (eudcFile != null) {\n-                        try {\n-                            \/* Must use Java rasteriser since GDI doesn't\n-                             * enumerate (allow direct use) of EUDC fonts.\n-                             *\/\n-                            return new TrueTypeFont(eudcFile, null, 0,\n-                                                        true, false);\n-                        } catch (FontFormatException e) {\n-                        }\n-                    }\n-                    return null;\n-                }\n-            });\n+    private static TrueTypeFont eudcFont;\n+\n+    static {\n+        String eudcFile = getEUDCFontFile();\n+        if (eudcFile != null) {\n+            try {\n+                \/* Must use Java rasteriser since GDI doesn't\n+                 * enumerate (allow direct use) of EUDC fonts.\n+                 *\/\n+                eudcFont = new TrueTypeFont(eudcFile, null, 0,\n+                                        true, false);\n+            } catch (FontFormatException e) {\n+            }\n+        }\n+    }\n@@ -81,1 +76,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -84,11 +78,6 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                public Object run() {\n-\n-                    \/* Register the JRE fonts so that the native platform can\n-                     * access them. This is used only on Windows so that when\n-                     * printing the printer driver can access the fonts.\n-                     *\/\n-                    registerJREFontsWithPlatform(jreFontDirName);\n-                    return null;\n-                }\n-            });\n+\n+        \/* Register the JRE fonts so that the native platform can\n+         * access them. This is used only on Windows so that when\n+         * printing the printer driver can access the fonts.\n+         *\/\n+        registerJREFontsWithPlatform(jreFontDirName);\n@@ -216,15 +205,9 @@\n-            @SuppressWarnings(\"removal\")\n-            String dir = (String)\n-                AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                        public Object run() {\n-                            for (int i=0; i<dirs.length; i++) {\n-                                String path =\n-                                    dirs[i] + File.separator + \"arial.ttf\";\n-                                File file = new File(path);\n-                                if (file.exists()) {\n-                                    return dirs[i];\n-                                }\n-                            }\n-                            return null;\n-                        }\n-                    });\n+            String dir = null;\n+            for (int i=0; i<dirs.length; i++) {\n+                String path = dirs[i] + File.separator + \"arial.ttf\";\n+                File file = new File(path);\n+                if (file.exists()) {\n+                    dir = dirs[i];\n+                    break;\n+                }\n+            }\n@@ -262,16 +245,9 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Object>() {\n-                public Object run() {\n-                    File f1 = new File(pathName);\n-                    String[] ls = f1.list(SunFontManager.getInstance().\n-                            getTrueTypeFilter());\n-                    if (ls == null) {\n-                        return null;\n-                    }\n-                    for (int i=0; i <ls.length; i++ ) {\n-                        File fontFile = new File(f1, ls[i]);\n-                        registerFontWithPlatform(fontFile.getAbsolutePath());\n-                    }\n-                    return null;\n-                }\n-         });\n+        File f1 = new File(pathName);\n+        String[] ls = f1.list(SunFontManager.getInstance().\n+                              getTrueTypeFilter());\n+        if (ls != null) {\n+            for (int i=0; i <ls.length; i++ ) {\n+                File fontFile = new File(f1, ls[i]);\n+                registerFontWithPlatform(fontFile.getAbsolutePath());\n+            }\n+        }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32FontManager.java","additions":39,"deletions":63,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -103,3 +103,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String nopixfmt = java.security.AccessController.doPrivileged(\n-            new sun.security.action.GetPropertyAction(\"sun.awt.nopixfmt\"));\n+        String nopixfmt = System.getProperty(\"sun.awt.nopixfmt\");\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsDevice.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -481,6 +479,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String path = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                public String run() {\n-                    return dir.getAbsolutePath();\n-                }\n-            });\n+            String path = dir.getAbsolutePath();\n@@ -575,1 +568,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -580,11 +572,5 @@\n-            final Runnable shutdownHook = () -> AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                shutdownNow();\n-                return null;\n-            });\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                Thread t = new Thread(\n-                        ThreadGroupUtils.getRootThreadGroup(), shutdownHook,\n-                        \"ShellFolder\", 0, false);\n-                Runtime.getRuntime().addShutdownHook(t);\n-                return null;\n-            });\n+            final Runnable shutdownHook = () -> shutdownNow();\n+            Thread t = new Thread(\n+                    ThreadGroupUtils.getRootThreadGroup(), shutdownHook,\n+                    \"ShellFolder\", 0, false);\n+            Runtime.getRuntime().addShutdownHook(t);\n@@ -605,17 +591,13 @@\n-            comThread = AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n-                String name = \"Swing-Shell\";\n-                 \/* The thread must be a member of a thread group\n-                  * which will not get GCed before VM exit.\n-                  * Make its parent the top-level thread group.\n-                  *\/\n-                Thread thread = new Thread(\n-                        ThreadGroupUtils.getRootThreadGroup(), comRun, name,\n-                        0, false);\n-                thread.setDaemon(true);\n-                \/* This is important, since this thread running at lower priority\n-                   leads to memory consumption when listDrives() function is called\n-                   repeatedly.\n-                 *\/\n-                thread.setPriority(Thread.MAX_PRIORITY);\n-                return thread;\n-            });\n+            \/* The thread must be a member of a thread group\n+             * which will not get GCed before VM exit.\n+             * Make its parent the top-level thread group.\n+             *\/\n+            comThread = new Thread(\n+                    ThreadGroupUtils.getRootThreadGroup(), comRun, \"Swing-Shell\",\n+                    0, false);\n+            comThread.setDaemon(true);\n+            \/* This is important, since this thread running at lower priority\n+               leads to memory consumption when listDrives() function is called\n+               repeatedly.\n+             *\/\n+            comThread.setPriority(Thread.MAX_PRIORITY);\n@@ -625,1 +607,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -643,3 +624,1 @@\n-                    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                        public Void run() {\n-                            future.cancel(true);\n+                    future.cancel(true);\n@@ -647,3 +626,0 @@\n-                            return null;\n-                        }\n-                    });\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolderManager2.java","additions":20,"deletions":44,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.security.AccessController;\n@@ -69,1 +68,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -71,3 +69,1 @@\n-        Boolean.parseBoolean(AccessController.doPrivileged(\n-            new GetPropertyAction(\"sun.java2d.twp.forceopt\", \"false\")));\n-    @SuppressWarnings(\"removal\")\n+        Boolean.getBoolean(System.getProperty(\"sun.java2d.twp.forceopt\", \"false\"));\n@@ -75,2 +71,1 @@\n-        Boolean.parseBoolean(AccessController.doPrivileged(\n-            new GetPropertyAction(\"sun.java2d.twp.forcesw\", \"false\")));\n+        Boolean.getBoolean(System.getProperty(\"sun.java2d.twp.forcesw\", \"false\"));\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/TranslucentWindowPainter.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-import java.security.PrivilegedAction;\n-import  java.security.AccessController;\n@@ -64,2 +62,1 @@\n-    private static String printScale = AccessController.doPrivileged(\n-        new GetPropertyAction(\"sun.java2d.print.pluginscalefactor\"));\n+    private static String printScale = System.getProperty(\"sun.java2d.print.pluginscalefactor\");\n@@ -192,7 +189,1 @@\n-            printScale = AccessController.doPrivileged(\n-                new PrivilegedAction<String>() {\n-                    public String run() {\n-                        return System.getenv(\"JAVA2D_PLUGIN_PRINT_SCALE\");\n-                    }\n-                }\n-            );\n+            printScale = System.getenv(\"JAVA2D_PLUGIN_PRINT_SCALE\");\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WEmbeddedFrame.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -200,13 +198,7 @@\n-        @SuppressWarnings(\"removal\")\n-        String filterString = AccessController.doPrivileged(\n-            new PrivilegedAction<String>() {\n-                @Override\n-                public String run() {\n-                    try {\n-                        ResourceBundle rb = ResourceBundle.getBundle(\"sun.awt.windows.awtLocalization\");\n-                        return rb.getString(\"allFiles\");\n-                    } catch (MissingResourceException e) {\n-                        return \"All Files\";\n-                    }\n-                }\n-            });\n+        String filterString;\n+        try {\n+            ResourceBundle rb = ResourceBundle.getBundle(\"sun.awt.windows.awtLocalization\");\n+            filterString = rb.getString(\"allFiles\");\n+        } catch (MissingResourceException e) {\n+            filterString = \"All Files\";\n+        }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WFileDialogPeer.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.security.AccessController;\n@@ -83,1 +82,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -85,1 +83,0 @@\n-        AccessController.doPrivileged(\n@@ -87,1 +84,1 @@\n-            \"sun.awt.keepWorkingSetOnMinimize\")));\n+            \"sun.awt.keepWorkingSetOnMinimize\"));\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WFramePeer.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -149,14 +147,9 @@\n-        defaultMenuFont = AccessController.doPrivileged(\n-            new PrivilegedAction <Font> () {\n-                public Font run() {\n-                    try {\n-                        ResourceBundle rb = ResourceBundle.getBundle(\"sun.awt.windows.awtLocalization\");\n-                        return Font.decode(rb.getString(\"menuFont\"));\n-                    } catch (MissingResourceException e) {\n-                        if (log.isLoggable(PlatformLogger.Level.FINE)) {\n-                            log.fine(\"WMenuItemPeer: \" + e.getMessage()+\". Using default MenuItem font.\", e);\n-                        }\n-                        return new Font(\"SanSerif\", Font.PLAIN, 11);\n-                    }\n-                }\n-            });\n+        try {\n+            ResourceBundle rb = ResourceBundle.getBundle(\"sun.awt.windows.awtLocalization\");\n+            defaultMenuFont = Font.decode(rb.getString(\"menuFont\"));\n+        } catch (MissingResourceException e) {\n+            if (log.isLoggable(PlatformLogger.Level.FINE)) {\n+                log.fine(\"WMenuItemPeer: \" + e.getMessage()+\". Using default MenuItem font.\", e);\n+            }\n+            defaultMenuFont = new Font(\"SanSerif\", Font.PLAIN, 11);\n+        }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WMenuItemPeer.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -98,5 +98,2 @@\n-        @SuppressWarnings(\"removal\")\n-        String textLayoutStr =\n-            java.security.AccessController.doPrivileged(\n-                   new sun.security.action.GetPropertyAction(\n-                         \"sun.java2d.print.enableGDITextLayout\"));\n+        String textLayoutStr = System.getProperty(\n+                     \"sun.java2d.print.enableGDITextLayout\");\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPathGraphics.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -115,2 +115,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -171,1 +169,2 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+\n+    @SuppressWarnings(\"restricted\")\n@@ -174,8 +173,1 @@\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Void>() {\n-                    @Override\n-                    public Void run() {\n-                        System.loadLibrary(\"awt\");\n-                        return null;\n-                    }\n-                });\n+            System.loadLibrary(\"awt\");\n@@ -228,2 +220,1 @@\n-        ThreadGroup rootTG = AccessController.doPrivileged(\n-                (PrivilegedAction<ThreadGroup>) ThreadGroupUtils::getRootThreadGroup);\n+        ThreadGroup rootTG = ThreadGroupUtils.getRootThreadGroup();\n@@ -232,6 +223,3 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                Thread toolkitThread = new Thread(rootTG, this, name, 0, false);\n-                toolkitThread.setDaemon(true);\n-                toolkitThread.start();\n-                return null;\n-            });\n+            Thread toolkitThread = new Thread(rootTG, this, name, 0, false);\n+            toolkitThread.setDaemon(true);\n+            toolkitThread.start();\n@@ -254,7 +242,4 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            areExtraMouseButtonsEnabled =\n-                 Boolean.parseBoolean(System.getProperty(extraButtons, \"true\"));\n-            \/\/set system property if not yet assigned\n-            System.setProperty(extraButtons, \"\"+areExtraMouseButtonsEnabled);\n-            return null;\n-        });\n+        areExtraMouseButtonsEnabled =\n+             Boolean.parseBoolean(System.getProperty(extraButtons, \"true\"));\n+        \/\/set system property if not yet assigned\n+        System.setProperty(extraButtons, \"\"+areExtraMouseButtonsEnabled);\n@@ -264,1 +249,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -266,9 +250,6 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            Thread shutdown = new Thread(\n-                    ThreadGroupUtils.getRootThreadGroup(), this::shutdown,\n-                    \"ToolkitShutdown\", 0, false);\n-            shutdown.setContextClassLoader(null);\n-            Runtime.getRuntime().addShutdownHook(shutdown);\n-            return null;\n-        });\n-     }\n+        Thread shutdown = new Thread(\n+                ThreadGroupUtils.getRootThreadGroup(), this::shutdown,\n+                \"ToolkitShutdown\", 0, false);\n+        shutdown.setContextClassLoader(null);\n+        Runtime.getRuntime().addShutdownHook(shutdown);\n+    }\n@@ -276,1 +257,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -279,5 +259,2 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            Thread.currentThread().setContextClassLoader(null);\n-            Thread.currentThread().setPriority(Thread.NORM_PRIORITY + 1);\n-            return null;\n-        });\n+        Thread.currentThread().setContextClassLoader(null);\n+        Thread.currentThread().setPriority(Thread.NORM_PRIORITY + 1);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WToolkit.java","additions":19,"deletions":42,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -97,16 +95,13 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            Runnable shutdownRunnable = () -> {\n-                done = true;\n-                wakeUpUpdateThread();\n-            };\n-            Thread shutdown = new Thread(\n-                    ThreadGroupUtils.getRootThreadGroup(), shutdownRunnable,\n-                    \"ScreenUpdater\", 0, false);\n-            shutdown.setContextClassLoader(null);\n-            try {\n-                Runtime.getRuntime().addShutdownHook(shutdown);\n-            } catch (Exception e) {\n-                done = true;\n-            }\n-            return null;\n-        });\n+        Runnable shutdownRunnable = () -> {\n+            done = true;\n+            wakeUpUpdateThread();\n+        };\n+        Thread shutdown = new Thread(\n+                ThreadGroupUtils.getRootThreadGroup(), shutdownRunnable,\n+                \"ScreenUpdater\", 0, false);\n+        shutdown.setContextClassLoader(null);\n+        try {\n+            Runtime.getRuntime().addShutdownHook(shutdown);\n+        } catch (Exception e) {\n+            done = true;\n+        }\n@@ -351,3 +346,2 @@\n-            screenUpdater = AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n-                String name = \"D3D Screen Updater\";\n-                Thread t = new Thread(\n+            String name = \"D3D Screen Updater\";\n+            screenUpdater = new Thread(\n@@ -356,5 +350,3 @@\n-                \/\/ REMIND: should it be higher?\n-                t.setPriority(Thread.NORM_PRIORITY + 2);\n-                t.setDaemon(true);\n-                return t;\n-            });\n+            \/\/ REMIND: should it be higher?\n+            screenUpdater.setPriority(Thread.NORM_PRIORITY + 2);\n+            screenUpdater.setDaemon(true);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DScreenUpdateManager.java","additions":18,"deletions":26,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -179,1 +179,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -181,47 +180,17 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Object>()\n-        {\n-            public Object run() {\n-                magPresent = getBooleanProp(\n-                    \"javax.accessibility.screen_magnifier_present\", false);\n-                boolean ddEnabled =\n-                    !getBooleanProp(\"sun.java2d.noddraw\", magPresent);\n-                boolean ddOffscreenEnabled =\n-                    getBooleanProp(\"sun.java2d.ddoffscreen\", ddEnabled);\n-                d3dEnabled = getBooleanProp(\"sun.java2d.d3d\",\n-                    ddEnabled && ddOffscreenEnabled);\n-                d3dOnScreenEnabled =\n-                    getBooleanProp(\"sun.java2d.d3d.onscreen\", d3dEnabled);\n-                oglEnabled = getBooleanProp(\"sun.java2d.opengl\", false);\n-                if (oglEnabled) {\n-                    oglVerbose = isBooleanPropTrueVerbose(\"sun.java2d.opengl\");\n-                    if (WGLGraphicsConfig.isWGLAvailable()) {\n-                        d3dEnabled = false;\n-                    } else {\n-                        if (oglVerbose) {\n-                            System.out.println(\n-                                \"Could not enable OpenGL pipeline \" +\n-                                \"(WGL not available)\");\n-                        }\n-                        oglEnabled = false;\n-                    }\n-                }\n-                gdiBlitEnabled = getBooleanProp(\"sun.java2d.gdiBlit\", true);\n-                d3dSet = getPropertySet(\"sun.java2d.d3d\");\n-                if (d3dSet) {\n-                    d3dVerbose = isBooleanPropTrueVerbose(\"sun.java2d.d3d\");\n-                }\n-                offscreenSharingEnabled =\n-                    getBooleanProp(\"sun.java2d.offscreenSharing\", false);\n-                String dpiOverride = System.getProperty(\"sun.java2d.dpiaware\");\n-                if (dpiOverride != null) {\n-                    setHighDPIAware = dpiOverride.equalsIgnoreCase(\"true\");\n-                } else {\n-                    String sunLauncherProperty =\n-                        System.getProperty(\"sun.java.launcher\", \"unknown\");\n-                    setHighDPIAware =\n-                        sunLauncherProperty.equalsIgnoreCase(\"SUN_STANDARD\");\n-                }\n-                \/*\n-                \/\/ Output info based on some non-default flags:\n-                if (offscreenSharingEnabled) {\n+        magPresent = getBooleanProp(\n+                \"javax.accessibility.screen_magnifier_present\", false);\n+        boolean ddEnabled =\n+                !getBooleanProp(\"sun.java2d.noddraw\", magPresent);\n+        boolean ddOffscreenEnabled =\n+                getBooleanProp(\"sun.java2d.ddoffscreen\", ddEnabled);\n+        d3dEnabled = getBooleanProp(\"sun.java2d.d3d\",\n+                ddEnabled && ddOffscreenEnabled);\n+        d3dOnScreenEnabled =\n+                getBooleanProp(\"sun.java2d.d3d.onscreen\", d3dEnabled);\n+        oglEnabled = getBooleanProp(\"sun.java2d.opengl\", false);\n+        if (oglEnabled) {\n+            oglVerbose = isBooleanPropTrueVerbose(\"sun.java2d.opengl\");\n+            if (WGLGraphicsConfig.isWGLAvailable()) {\n+                d3dEnabled = false;\n+            } else {\n+                if (oglVerbose) {\n@@ -229,4 +198,2 @@\n-                        \"Warning: offscreenSharing has been enabled. \" +\n-                        \"The use of this capability will change in future \" +\n-                        \"releases and applications that depend on it \" +\n-                        \"may not work correctly\");\n+                        \"Could not enable OpenGL pipeline \" +\n+                        \"(WGL not available)\");\n@@ -234,2 +201,27 @@\n-                *\/\n-                return null;\n+                oglEnabled = false;\n+            }\n+        }\n+        gdiBlitEnabled = getBooleanProp(\"sun.java2d.gdiBlit\", true);\n+        d3dSet = getPropertySet(\"sun.java2d.d3d\");\n+        if (d3dSet) {\n+            d3dVerbose = isBooleanPropTrueVerbose(\"sun.java2d.d3d\");\n+        }\n+        offscreenSharingEnabled =\n+            getBooleanProp(\"sun.java2d.offscreenSharing\", false);\n+        String dpiOverride = System.getProperty(\"sun.java2d.dpiaware\");\n+        if (dpiOverride != null) {\n+            setHighDPIAware = dpiOverride.equalsIgnoreCase(\"true\");\n+        } else {\n+            String sunLauncherProperty =\n+                System.getProperty(\"sun.java.launcher\", \"unknown\");\n+            setHighDPIAware =\n+                sunLauncherProperty.equalsIgnoreCase(\"SUN_STANDARD\");\n+        }\n+        \/*\n+            \/\/ Output info based on some non-default flags:\n+            if (offscreenSharingEnabled) {\n+                System.out.println(\n+                    \"Warning: offscreenSharing has been enabled. \" +\n+                    \"The use of this capability will change in future \" +\n+                    \"releases and applications that depend on it \" +\n+                    \"may not work correctly\");\n@@ -237,1 +229,1 @@\n-        });\n+        *\/\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/windows\/WindowsFlags.java","additions":47,"deletions":55,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -57,1 +55,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -59,7 +57,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                public Void run() {\n-                    System.loadLibrary(\"awt\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"awt\");\n@@ -95,8 +87,6 @@\n-            AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n-                Thread thr = new Thread(ThreadGroupUtils.getRootThreadGroup(),\n-                                        new PrinterChangeListener(),\n-                                        \"PrinterListener\", 0, false);\n-                thr.setContextClassLoader(null);\n-                thr.setDaemon(true);\n-                return thr;\n-            }).start();\n+            Thread thr = new Thread(ThreadGroupUtils.getRootThreadGroup(),\n+                                    new PrinterChangeListener(),\n+                                    \"PrinterListener\", 0, false);\n+            thr.setContextClassLoader(null);\n+            thr.setDaemon(true);\n+            thr.start();\n@@ -105,8 +95,6 @@\n-            AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n-                Thread thr = new Thread(ThreadGroupUtils.getRootThreadGroup(),\n-                                        new RemotePrinterChangeListener(),\n-                                        \"RemotePrinterListener\", 0, false);\n-                thr.setContextClassLoader(null);\n-                thr.setDaemon(true);\n-                return thr;\n-            }).start();\n+            Thread thr1 = new Thread(ThreadGroupUtils.getRootThreadGroup(),\n+                                    new RemotePrinterChangeListener(),\n+                                    \"RemotePrinterListener\", 0, false);\n+            thr1.setContextClassLoader(null);\n+            thr1.setDaemon(true);\n+            thr1.start();\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":14,"deletions":26,"binary":false,"changes":40,"status":"modified"}]}