{"files":[{"patch":"@@ -213,1 +213,0 @@\n-                        ListBuffer<PatternDescription> bindings = new ListBuffer<>();\n@@ -233,0 +232,3 @@\n+                        \/\/the set of pending permitted subtypes needed to cover clazz:\n+                        Set<Symbol> pendingPermitted = new HashSet<>(permitted);\n+\n@@ -235,2 +237,6 @@\n-                                Set<Symbol> currentPermittedSubTypes =\n-                                        allPermittedSubTypes(bpOther.type.tsym, s -> true);\n+                                \/\/remove all types from pendingPermitted that we can\n+                                \/\/cover using bpOther:\n+\n+                                \/\/all types that are permitted subtypes of bpOther's type:\n+                                pendingPermitted.removeIf(pending -> types.isSubtype(types.erasure(pending.type),\n+                                                                                     types.erasure(bpOther.type)));\n@@ -238,2 +244,11 @@\n-                                PERMITTED: for (Iterator<Symbol> it = permitted.iterator(); it.hasNext();) {\n-                                    Symbol perm = it.next();\n+                                if (bpOther.type.tsym.isAbstract()) {\n+                                    \/\/all types that are in a diamond hierarchy with bpOther's type\n+                                    \/\/i.e. there's a common subtype of the given type and bpOther's type:\n+                                    Predicate<Symbol> check =\n+                                            pending -> permitted.stream()\n+                                                                .filter(perm -> types.isSubtype(types.erasure(perm.type),\n+                                                                                                types.erasure(bpOther.type)))\n+                                                                .filter(perm -> types.isSubtype(types.erasure(perm.type),\n+                                                                                                types.erasure(pending.type)))\n+                                                                .findAny()\n+                                                                .isPresent();\n@@ -241,11 +256,1 @@\n-                                    for (Symbol currentPermitted : currentPermittedSubTypes) {\n-                                        if (types.isSubtype(types.erasure(currentPermitted.type),\n-                                                            types.erasure(perm.type))) {\n-                                            it.remove();\n-                                            continue PERMITTED;\n-                                        }\n-                                    }\n-                                    if (types.isSubtype(types.erasure(perm.type),\n-                                                        types.erasure(bpOther.type))) {\n-                                        it.remove();\n-                                    }\n+                                    pendingPermitted.removeIf(check);\n@@ -256,1 +261,1 @@\n-                        if (permitted.isEmpty()) {\n+                        if (pendingPermitted.isEmpty()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ExhaustivenessComputer.java","additions":22,"deletions":17,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8262891 8268871 8274363 8281100 8294670 8311038 8311815 8325215 8333169 8327368\n+ * @bug 8262891 8268871 8274363 8281100 8294670 8311038 8311815 8325215 8333169 8327368 8366968\n@@ -2185,0 +2185,129 @@\n+    @Test \/\/JDK-8366968\n+    public void testNonSealedDiamond(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               class Demo {\n+\n+                   sealed interface Base permits Special, Value {}\n+\n+                   non-sealed interface Value extends Base {}\n+\n+                   sealed interface Special extends Base permits SpecialValue {}\n+\n+                   non-sealed interface SpecialValue extends Value, Special {}\n+\n+                   static int demo(final Base base) {\n+                       return switch (base) {\n+                           case Value value -> 0;\n+                       };\n+\n+                   }\n+\n+               }\n+               \"\"\");\n+    }\n+\n+    @Test \/\/JDK-8366968\n+    public void testNonSealedDiamond2(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               class Demo {\n+\n+                   sealed interface Base permits Special, Value {}\n+\n+                   non-sealed interface Value extends Base {}\n+\n+                   non-sealed interface Special extends Base {}\n+\n+                   interface SpecialValue extends Value, Special {}\n+\n+                   static int demo(final Base base) {\n+                       return switch (base) {\n+                           case Value value -> 0;\n+                       };\n+\n+                   }\n+\n+               }\n+               \"\"\",\n+               \"Demo.java:12:16: compiler.err.not.exhaustive\",\n+               \"1 error\");\n+    }\n+\n+    @Test \/\/JDK-8366968\n+    public void testNonAbstract(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               class Demo {\n+                   sealed interface I permits Base, C3 { }\n+                   sealed class Base implements I permits C1, C2 { }\n+                   final class C1 extends Base { }\n+                   final class C2 extends Base { }\n+                   final class C3 implements I { }\n+\n+                   void method1(I i) {\n+                       switch (i) {\n+                           case C1 _ -> {}\n+                           case C2 _ -> {}\n+                           case C3 _ -> {}\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Demo.java:9:9: compiler.err.not.exhaustive.statement\",\n+               \"1 error\");\n+    }\n+\n+    @Test \/\/JDK-8366968\n+    public void testNonSealedDiamondGeneric(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               class Demo {\n+                   class SomeType {}\n+                   sealed interface Base<T extends SomeType> permits Special, Value {}\n+                   non-sealed interface Value<T extends SomeType> extends Base<T> {}\n+                   sealed interface Special<T extends SomeType> extends Base<T> permits SpecialValue {}\n+                   non-sealed interface SpecialValue<T extends SomeType> extends Value<T>, Special<T> {}\n+\n+                   static <T extends SomeType> int demo(final Base<T> base) {\n+                       return switch (base) {\n+                            case Value<T> value -> 0;\n+                       };\n+                   }\n+               }\n+               \"\"\");\n+    }\n+\n+    @Test \/\/JDK-8366968\n+    public void testNonSealedDiamondMultiple(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               class Demo {\n+\n+                   sealed interface Base permits Special, Value {}\n+\n+                   non-sealed interface Value extends Base {}\n+\n+                   sealed interface Special extends Base permits SpecialValue, Special2 {}\n+\n+                   non-sealed interface SpecialValue extends Value, Special {}\n+                   non-sealed interface Special2 extends Special {}\n+\n+                   static int demo(final Base base) {\n+                       return switch (base) {\n+                           case Value value -> 0;\n+                       };\n+\n+                   }\n+\n+               }\n+               \"\"\",\n+               \"Demo.java:13:16: compiler.err.not.exhaustive\",\n+               \"1 error\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":131,"deletions":2,"binary":false,"changes":133,"status":"modified"}]}