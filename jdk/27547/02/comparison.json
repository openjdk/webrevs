{"files":[{"patch":"@@ -213,1 +213,0 @@\n-                        ListBuffer<PatternDescription> bindings = new ListBuffer<>();\n@@ -232,0 +231,1 @@\n+                        Set<Symbol> filteredPermitted = new HashSet<>(permitted);\n@@ -235,2 +235,1 @@\n-                                Set<Symbol> currentPermittedSubTypes =\n-                                        allPermittedSubTypes(bpOther.type.tsym, s -> true);\n+                                Set<Symbol> currentSubTypes;\n@@ -238,1 +237,11 @@\n-                                PERMITTED: for (Iterator<Symbol> it = permitted.iterator(); it.hasNext();) {\n+                                if (bpOther.type.tsym.isAbstract()) {\n+                                    currentSubTypes =\n+                                            permitted.stream()\n+                                                     .filter(perm -> types.isSubtype(types.erasure(perm.type),\n+                                                                                     types.erasure(bpOther.type)))\n+                                                     .collect(Collectors.toSet());\n+                                } else {\n+                                    currentSubTypes = Set.of();\n+                                }\n+\n+                                PERMITTED: for (Iterator<Symbol> it = filteredPermitted.iterator(); it.hasNext();) {\n@@ -241,1 +250,1 @@\n-                                    for (Symbol currentPermitted : currentPermittedSubTypes) {\n+                                    for (Symbol currentPermitted : currentSubTypes) {\n@@ -256,1 +265,1 @@\n-                        if (permitted.isEmpty()) {\n+                        if (filteredPermitted.isEmpty()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ExhaustivenessComputer.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8262891 8268871 8274363 8281100 8294670 8311038 8311815 8325215 8333169 8327368\n+ * @bug 8262891 8268871 8274363 8281100 8294670 8311038 8311815 8325215 8333169 8327368 8366968\n@@ -2185,0 +2185,51 @@\n+    @Test \/\/JDK-8366968\n+    public void testNonSealedDiamond(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               class Demo {\n+\n+                   sealed interface Base permits Special, Value {}\n+\n+                   non-sealed interface Value extends Base {}\n+\n+                   sealed interface Special extends Base permits SpecialValue {}\n+\n+                   non-sealed interface SpecialValue extends Value, Special {}\n+\n+                   static int demo(final Base base) {\n+                       return switch (base) {\n+                           case Value value -> 0;\n+                       };\n+\n+                   }\n+\n+               }\n+               \"\"\");\n+    }\n+\n+    @Test \/\/JDK-8366968\n+    public void testNonAbstract(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               class Demo {\n+                   sealed interface I permits Base, C3 { }\n+                   sealed class Base implements I permits C1, C2 { }\n+                   final class C1 extends Base { }\n+                   final class C2 extends Base { }\n+                   final class C3 implements I { }\n+\n+                   void method1(I i) {\n+                       switch (i) {\n+                           case C1 _ -> {}\n+                           case C2 _ -> {}\n+                           case C3 _ -> {}\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Demo.java:9:9: compiler.err.not.exhaustive.statement\",\n+               \"1 error\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"}]}