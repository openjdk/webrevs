{"files":[{"patch":"@@ -107,8 +107,8 @@\n-        }\n-        if (!isStatic(f)) {\n-            return;\n-        }\n-        f.setAccessible(true);\n-        if (getLong(f) == null) {\n-            commitEvent(SUID_CONVERTIBLE_TO_LONG,\n-                    SUID_NAME + \" must be convertible to long via widening to be effective\");\n+            if (!isStatic(f)) {\n+                return;\n+            }\n+            f.setAccessible(true);\n+            if (longFromStatic(f) == null) {\n+                commitEvent(SUID_CONVERTIBLE_TO_LONG,\n+                        SUID_NAME + \" must be convertible to long via widening to be effective\");\n+            }\n@@ -150,1 +150,1 @@\n-        Object spf = getObject(f);\n+        Object spf = objectFromStatic(f);\n@@ -276,1 +276,1 @@\n-    private static Object getObject(Field f) {\n+    private static Object objectFromStatic(Field f) {\n@@ -284,1 +284,1 @@\n-    private static Long getLong(Field f) {\n+    private static Long longFromStatic(Field f) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerializationMisdeclarationChecker.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.junit.jupiter.api.BeforeAll;\n@@ -46,1 +47,0 @@\n- * @modules java.base\/jdk.internal.event\n@@ -49,0 +49,1 @@\n+ * @modules java.base\/jdk.internal.event\n@@ -50,1 +51,1 @@\n- * @run junit\/othervm jdk.jfr.event.io.TestSerializationMisdeclarationEvent\n+ * @run junit jdk.jfr.event.io.TestSerializationMisdeclarationEvent\n@@ -54,1 +55,14 @@\n-    private static final List<RecordedEvent> events;\n+    private static final List<RecordedEvent> events = new ArrayList<>();;\n+\n+    @BeforeAll\n+    static void recordEvents() {\n+        try (var rs = new RecordingStream()) {\n+            rs.enable(SerializationMisdeclaration)\n+                    .withoutThreshold()\n+                    .withoutStackTrace();\n+            rs.onEvent(SerializationMisdeclaration, events::add);\n+            rs.startAsync();\n+            doLookups();\n+            rs.stop();\n+        }\n+    }\n@@ -112,1 +126,1 @@\n-        assertEquals(0, getEventsFor(cls).size());\n+        assertEquals(0, getEventsFor(cls).size(), cls.getName());\n@@ -128,1 +142,1 @@\n-        assertEquals(1, getEventsFor(cls, kind).size());\n+        assertEquals(1, getEventsFor(cls, kind).size(), cls.getName());\n@@ -144,13 +158,0 @@\n-    static {\n-        events = new ArrayList<>();\n-        try (var rs = new RecordingStream()) {\n-            rs.enable(SerializationMisdeclaration)\n-                    .withoutThreshold()\n-                    .withoutStackTrace();\n-            rs.onEvent(SerializationMisdeclaration, events::add);\n-            rs.startAsync();\n-            doLookups();\n-            rs.stop();\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSerializationMisdeclarationEvent.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"}]}