{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.util.stream.Stream;\n@@ -50,1 +49,0 @@\n- * @modules java.base\/jdk.internal.event\n@@ -84,4 +82,4 @@\n-                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"private\"}),\n-                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"non-static\"}),\n-                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"return\"}),\n-                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"parameter\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject\", \"must\", \"private\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject\", \"must\", \"non-static\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject\", \"must\", \"return\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject\", \"must\", \"parameter\"}),\n@@ -89,1 +87,1 @@\n-                arguments(BadClass.class, new String[] {\"method\", \"readObjectNoData(\", \"must\", \"parameter\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"readObjectNoData\", \"must\", \"parameter\"}),\n@@ -93,2 +91,2 @@\n-                arguments(EnumClass.class, new String[] {\"method\", \"writeObject(\", \"enum\"}),\n-                arguments(EnumClass.class, new String[] {\"method\", \"readResolve(\", \"enum\"}),\n+                arguments(EnumClass.class, new String[] {\"method\", \"writeObject\", \"enum\"}),\n+                arguments(EnumClass.class, new String[] {\"method\", \"readResolve\", \"enum\"}),\n@@ -103,4 +101,4 @@\n-                arguments(Acc.class, new String[] {\"method\", \"readResolve(\", \"must\", \"non-abstract\"}),\n-                arguments(Acc.class, new String[] {\"method\", \"writeReplace(\", \"must\", \"non-static\"}),\n-                arguments(Acc.class, new String[] {\"method\", \"writeReplace(\", \"must\", \"return\"}),\n-                arguments(Acc.class, new String[] {\"method\", \"writeReplace(\", \"must\", \"parameter\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"readResolve\", \"must\", \"non-abstract\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"writeReplace\", \"must\", \"non-static\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"writeReplace\", \"must\", \"return\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"writeReplace\", \"must\", \"parameter\"}),\n@@ -120,1 +118,1 @@\n-    public void testSingleClassMisdeclarations(Class<?> cls, String... keywords) {\n+    public void testSingleClassMisdeclarations(Class<?> cls, String[] keywords) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSerializationMisdeclarationEvent.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}