{"files":[{"patch":"@@ -82,3 +82,2 @@\n-                commitEvent(SUID_EXPLICIT,\n-                        \"a private static final long \" + SUID_NAME +\n-                                \" field should be declared\");\n+                commitEvent(SUID_NAME +\n+                        \" should be declared explicitly as a private static final long field\");\n@@ -89,2 +88,2 @@\n-            commitEvent(SUID_INEFFECTIVE_ENUM,\n-                    SUID_NAME + \" is not effective in an enum class\");\n+            commitEvent(SUID_NAME +\n+                    \" in an enum class is not effective\");\n@@ -93,2 +92,2 @@\n-            commitEvent(SUID_PRIVATE,\n-                    SUID_NAME + \" should be declared private\");\n+            commitEvent(SUID_NAME +\n+                    \" should be private\");\n@@ -97,2 +96,2 @@\n-            commitEvent(SUID_STATIC,\n-                    SUID_NAME + \" must be declared static to be effective\");\n+            commitEvent(SUID_NAME +\n+                    \" must be static to be effective\");\n@@ -101,2 +100,2 @@\n-            commitEvent(SUID_FINAL,\n-                    SUID_NAME + \" must be declared final to be effective\");\n+            commitEvent(SUID_NAME +\n+                    \" must be final to be effective\");\n@@ -105,10 +104,2 @@\n-            commitEvent(SUID_LONG,\n-                    SUID_NAME + \" should be declared of type long\");\n-            if (!isStatic(f)) {\n-                return;\n-            }\n-            f.setAccessible(true);\n-            if (longFromStatic(f) == null) {\n-                commitEvent(SUID_CONVERTIBLE_TO_LONG,\n-                        SUID_NAME + \" must be convertible to long via widening to be effective\");\n-            }\n+            commitEvent(SUID_NAME +\n+                    \" must be of type long to be effective\");\n@@ -124,2 +115,2 @@\n-            commitEvent(SER_PERS_INEFFECTIVE_RECORD,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" is not effective in a record class\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" in a record class is not effective\");\n@@ -127,2 +118,2 @@\n-            commitEvent(SER_PERS_INEFFECTIVE_ENUM,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" is not effective in an enum class\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" in an enum class is not effective\");\n@@ -131,2 +122,2 @@\n-            commitEvent(SER_PERS_PRIVATE,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" must be declared private to be effective\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" must be private to be effective\");\n@@ -135,2 +126,2 @@\n-            commitEvent(SER_PERS_STATIC,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" must be declared static to be effective\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" must be static to be effective\");\n@@ -139,2 +130,2 @@\n-            commitEvent(SER_PERS_FINAL,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" must be declared final to be effective\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" must be final to be effective\");\n@@ -143,2 +134,2 @@\n-            commitEvent(SER_PERS_TYPE_OSF_ARRAY,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" should be declared of type ObjectStreamField[]\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" should be of type ObjectStreamField[]\");\n@@ -152,2 +143,2 @@\n-            commitEvent(SER_PERS_NOT_NULL,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" must not be null to be effective\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" must be non-null to be effective\");\n@@ -157,2 +148,2 @@\n-            commitEvent(SER_PERS_VALUE_OSF_ARRAY,\n-                    SERIAL_PERSISTENT_FIELDS_NAME + \" must be an instance of ObjectStreamField[] to be effective\");\n+            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" must be an instance of ObjectStreamField[] to be effective\");\n@@ -172,2 +163,1 @@\n-            commitEvent(PRIV_METH_INEFFECTIVE_ENUM,\n-                    m + \" is not effective on an enum class\");\n+            commitEvent(\"method \" + m + \" on an enum class is not effective\");\n@@ -175,2 +165,1 @@\n-            commitEvent(PRIV_METH_INEFFECTIVE_RECORD,\n-                    m + \" is not effective on a record class\");\n+            commitEvent(\"method \" + m + \" on an record class is not effective\");\n@@ -179,2 +168,1 @@\n-            commitEvent(PRIV_METH_PRIV,\n-                    m + \" must be private to be effective\");\n+            commitEvent(\"method \" + m + \" must be private to be effective\");\n@@ -183,2 +171,1 @@\n-            commitEvent(PRIV_METH_NON_STATIC,\n-                    m + \" must be non-static to be effective\");\n+            commitEvent(\"method \" + m + \" must be non-static to be effective\");\n@@ -187,2 +174,1 @@\n-            commitEvent(PRIV_METH_RET_TYPE,\n-                    m + \" must have return type \" + retType + \" to be effective\");\n+            commitEvent(\"method \" + m + \" must have return type \" + retType + \" to be effective\");\n@@ -191,2 +177,1 @@\n-            commitEvent(PRIV_METH_PARAM_TYPES,\n-                    m + \" must have parameter types \" + Arrays.toString(paramTypes) + \" to be effective\");\n+            commitEvent(\"method \" + m + \" must have parameter types \" + Arrays.toString(paramTypes) + \" to be effective\");\n@@ -210,2 +195,1 @@\n-            commitEvent(cls, ACC_METH_INEFFECTIVE_ENUM,\n-                    m + \" is not effective on an enum class\");\n+            commitEvent(\"method \" + m + \" on an enum class is not effective\");\n@@ -214,2 +198,1 @@\n-            commitEvent(ACC_METH_NON_ABSTRACT,\n-                    m + \" must be non-abstract to be effective\");\n+            commitEvent(\"method \" + m + \" must be non-abstract to be effective\");\n@@ -218,2 +201,1 @@\n-            commitEvent(ACC_METH_NON_STATIC,\n-                    m + \" must be non-static to be effective\");\n+            commitEvent(\"method \" + m + \" must be non-static to be effective\");\n@@ -222,2 +204,1 @@\n-            commitEvent(ACC_METH_RET_TYPE,\n-                    m + \" must have return type \" + retType + \" to be effective\");\n+            commitEvent(\"method \" + m + \" must have return type \" + retType + \" to be effective\");\n@@ -226,2 +207,1 @@\n-            commitEvent(ACC_METH_PARAM_TYPES,\n-                    m + \" must have parameter types \" + Arrays.toString(paramTypes) + \" to be effective\");\n+            commitEvent(\"method \" + m + \" must have parameter types \" + Arrays.toString(paramTypes) + \" to be effective\");\n@@ -231,2 +211,1 @@\n-            commitEvent(ACC_METH_NON_ACCESSIBLE,\n-                    m + \" is not accessible\");\n+            commitEvent(\"method \" + m + \" is not accessible\");\n@@ -292,2 +271,2 @@\n-    private void commitEvent(int kind, String msg, Object... args) {\n-        commitEvent(cl, kind, msg);\n+    private void commitEvent(String msg, Object... args) {\n+        commitEvent(cl, msg);\n@@ -296,2 +275,2 @@\n-    private static void commitEvent(Class<?> cls, int kind, String msg) {\n-        commit(timestamp(), cls, kind, msg);\n+    private static void commitEvent(Class<?> cls, String msg) {\n+        commit(timestamp(), cls, msg);\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerializationMisdeclarationChecker.java","additions":44,"deletions":65,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * Note that the order of the arguments of the {@link #commit(long,Class,int,String)}\n+ * Note that the order of the arguments of the {@link #commit(long,Class,String)}\n@@ -39,1 +39,0 @@\n-    public int kind;\n@@ -46,1 +45,1 @@\n-     * {@code commit(..., Class, int, String)}\n+     * {@code commit(..., Class, String)}\n@@ -50,1 +49,0 @@\n-     * @param kind          the kind of misdeclaration event\n@@ -53,1 +51,1 @@\n-    public static void commit(long start, Class<?> cls, int kind, String message) {\n+    public static void commit(long start, Class<?> cls, String message) {\n@@ -93,34 +91,0 @@\n-    \/*\n-     * These constants are not final on purpose.\n-     *\/\n-    public static int SUID_EXPLICIT                   = 100;\n-    public static int SUID_INEFFECTIVE_ENUM           = 101;\n-    public static int SUID_PRIVATE                    = 102;\n-    public static int SUID_STATIC                     = 103;\n-    public static int SUID_FINAL                      = 104;\n-    public static int SUID_LONG                       = 105;\n-    public static int SUID_CONVERTIBLE_TO_LONG        = 106;\n-\n-    public static int SER_PERS_INEFFECTIVE_ENUM       = 200;\n-    public static int SER_PERS_INEFFECTIVE_RECORD     = 201;\n-    public static int SER_PERS_PRIVATE                = 202;\n-    public static int SER_PERS_STATIC                 = 203;\n-    public static int SER_PERS_FINAL                  = 204;\n-    public static int SER_PERS_NOT_NULL               = 205;\n-    public static int SER_PERS_TYPE_OSF_ARRAY         = 206;\n-    public static int SER_PERS_VALUE_OSF_ARRAY        = 207;\n-\n-    public static int PRIV_METH_INEFFECTIVE_ENUM      = 300;\n-    public static int PRIV_METH_INEFFECTIVE_RECORD    = 301;\n-    public static int PRIV_METH_PRIV                  = 302;\n-    public static int PRIV_METH_NON_STATIC            = 303;\n-    public static int PRIV_METH_RET_TYPE              = 304;\n-    public static int PRIV_METH_PARAM_TYPES           = 305;\n-\n-    public static int ACC_METH_INEFFECTIVE_ENUM       = 400;\n-    public static int ACC_METH_NON_ABSTRACT           = 401;\n-    public static int ACC_METH_NON_STATIC             = 402;\n-    public static int ACC_METH_RET_TYPE               = 403;\n-    public static int ACC_METH_PARAM_TYPES            = 404;\n-    public static int ACC_METH_NON_ACCESSIBLE         = 405;\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SerializationMisdeclarationEvent.java","additions":3,"deletions":39,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -39,1 +39,4 @@\n-@Description(\"Methods and fields misdeclarations\")\n+@Description(\"Methods and fields misdeclarations.\" +\n+        \" The checks are usually performed just once per serializable class,\" +\n+        \" the first time it is used by serialization.\" +\n+        \" Under high memory pressure, a class might be re-checked again.\")\n@@ -47,3 +50,0 @@\n-    @Label(\"Kind\")\n-    public int kind;\n-\n@@ -53,34 +53,0 @@\n-    \/*\n-     * These constants are not final on purpose.\n-     *\/\n-    public static int SUID_EXPLICIT                   = jdk.internal.event.SerializationMisdeclarationEvent.SUID_EXPLICIT;\n-    public static int SUID_INEFFECTIVE_ENUM           = jdk.internal.event.SerializationMisdeclarationEvent.SUID_INEFFECTIVE_ENUM;\n-    public static int SUID_PRIVATE                    = jdk.internal.event.SerializationMisdeclarationEvent.SUID_PRIVATE;\n-    public static int SUID_STATIC                     = jdk.internal.event.SerializationMisdeclarationEvent.SUID_STATIC;\n-    public static int SUID_FINAL                      = jdk.internal.event.SerializationMisdeclarationEvent.SUID_FINAL;\n-    public static int SUID_LONG                       = jdk.internal.event.SerializationMisdeclarationEvent.SUID_LONG;\n-    public static int SUID_CONVERTIBLE_TO_LONG        = jdk.internal.event.SerializationMisdeclarationEvent.SUID_CONVERTIBLE_TO_LONG;\n-\n-    public static int SER_PERS_INEFFECTIVE_ENUM       = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_INEFFECTIVE_ENUM;\n-    public static int SER_PERS_INEFFECTIVE_RECORD     = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_INEFFECTIVE_RECORD;\n-    public static int SER_PERS_PRIVATE                = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_PRIVATE;\n-    public static int SER_PERS_STATIC                 = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_STATIC;\n-    public static int SER_PERS_FINAL                  = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_FINAL;\n-    public static int SER_PERS_NOT_NULL               = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_NOT_NULL;\n-    public static int SER_PERS_TYPE_OSF_ARRAY         = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_TYPE_OSF_ARRAY;\n-    public static int SER_PERS_VALUE_OSF_ARRAY        = jdk.internal.event.SerializationMisdeclarationEvent.SER_PERS_VALUE_OSF_ARRAY;\n-\n-    public static int PRIV_METH_INEFFECTIVE_ENUM      = jdk.internal.event.SerializationMisdeclarationEvent.PRIV_METH_INEFFECTIVE_ENUM;\n-    public static int PRIV_METH_INEFFECTIVE_RECORD    = jdk.internal.event.SerializationMisdeclarationEvent.PRIV_METH_INEFFECTIVE_RECORD;\n-    public static int PRIV_METH_PRIV                  = jdk.internal.event.SerializationMisdeclarationEvent.PRIV_METH_PRIV;\n-    public static int PRIV_METH_NON_STATIC            = jdk.internal.event.SerializationMisdeclarationEvent.PRIV_METH_NON_STATIC;\n-    public static int PRIV_METH_RET_TYPE              = jdk.internal.event.SerializationMisdeclarationEvent.PRIV_METH_RET_TYPE;\n-    public static int PRIV_METH_PARAM_TYPES           = jdk.internal.event.SerializationMisdeclarationEvent.PRIV_METH_PARAM_TYPES;\n-\n-    public static int ACC_METH_INEFFECTIVE_ENUM       = jdk.internal.event.SerializationMisdeclarationEvent.ACC_METH_INEFFECTIVE_ENUM;\n-    public static int ACC_METH_NON_ABSTRACT           = jdk.internal.event.SerializationMisdeclarationEvent.ACC_METH_NON_ABSTRACT;\n-    public static int ACC_METH_NON_STATIC             = jdk.internal.event.SerializationMisdeclarationEvent.ACC_METH_NON_STATIC;\n-    public static int ACC_METH_RET_TYPE               = jdk.internal.event.SerializationMisdeclarationEvent.ACC_METH_RET_TYPE;\n-    public static int ACC_METH_PARAM_TYPES            = jdk.internal.event.SerializationMisdeclarationEvent.ACC_METH_PARAM_TYPES;\n-    public static int ACC_METH_NON_ACCESSIBLE         = jdk.internal.event.SerializationMisdeclarationEvent.ACC_METH_NON_ACCESSIBLE;\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SerializationMisdeclarationEvent.java","additions":4,"deletions":38,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Arrays;\n@@ -36,0 +37,1 @@\n+import java.util.stream.Stream;\n@@ -37,1 +39,0 @@\n-import static jdk.internal.event.SerializationMisdeclarationEvent.*;\n@@ -51,1 +52,1 @@\n- * @run junit jdk.jfr.event.io.TestSerializationMisdeclarationEvent\n+ * @run junit\/othervm jdk.jfr.event.io.TestSerializationMisdeclarationEvent\n@@ -72,34 +73,34 @@\n-                arguments(NoSUID.class, SUID_EXPLICIT),\n-                arguments(NoSUID.class, SER_PERS_NOT_NULL),\n-\n-                arguments(NonLongSUID.class, SUID_LONG),\n-                arguments(NonLongSUID.class, SUID_CONVERTIBLE_TO_LONG),\n-\n-                arguments(EnumClass.class, SUID_INEFFECTIVE_ENUM),\n-                arguments(EnumClass.class, SUID_PRIVATE),\n-                arguments(EnumClass.class, SUID_LONG),\n-                arguments(EnumClass.class, SUID_STATIC),\n-                arguments(EnumClass.class, SUID_FINAL),\n-                arguments(EnumClass.class, SER_PERS_INEFFECTIVE_ENUM),\n-                arguments(EnumClass.class, SER_PERS_PRIVATE),\n-                arguments(EnumClass.class, SER_PERS_STATIC),\n-                arguments(EnumClass.class, SER_PERS_FINAL),\n-                arguments(EnumClass.class, SER_PERS_TYPE_OSF_ARRAY),\n-                arguments(EnumClass.class, PRIV_METH_PRIV),\n-                arguments(EnumClass.class, PRIV_METH_NON_STATIC),\n-                arguments(EnumClass.class, PRIV_METH_RET_TYPE),\n-                arguments(EnumClass.class, PRIV_METH_PARAM_TYPES),\n-                arguments(EnumClass.class, PRIV_METH_INEFFECTIVE_ENUM),\n-                arguments(EnumClass.class, ACC_METH_INEFFECTIVE_ENUM),\n-\n-                arguments(RecordClass.class, SER_PERS_INEFFECTIVE_RECORD),\n-                arguments(RecordClass.class, SER_PERS_TYPE_OSF_ARRAY),\n-                arguments(RecordClass.class, SER_PERS_VALUE_OSF_ARRAY),\n-                arguments(RecordClass.class, PRIV_METH_INEFFECTIVE_RECORD),\n-\n-                arguments(C.class, ACC_METH_NON_ACCESSIBLE),\n-\n-                arguments(Acc.class, ACC_METH_NON_ABSTRACT),\n-                arguments(Acc.class, ACC_METH_NON_STATIC),\n-                arguments(Acc.class, ACC_METH_RET_TYPE),\n-                arguments(Acc.class, ACC_METH_PARAM_TYPES),\n+                arguments(NoSUID.class, new String[] {\"serialVersionUID\", \"should\", \"explicitly\"}),\n+                arguments(NoSUID.class, new String[] {\"serialPersistentFields\", \"must\", \"non-null\"}),\n+\n+                arguments(BadClass.class, new String[] {\"serialVersionUID\", \"should\", \"private\"}),\n+                arguments(BadClass.class, new String[] {\"serialVersionUID\", \"must\", \"type\", \"long\"}),\n+                arguments(BadClass.class, new String[] {\"serialVersionUID\", \"must\", \"final\"}),\n+                arguments(BadClass.class, new String[] {\"serialVersionUID\", \"must\", \"static\"}),\n+                arguments(BadClass.class, new String[] {\"serialPersistentFields\", \"must\", \"private\"}),\n+                arguments(BadClass.class, new String[] {\"serialPersistentFields\", \"must\", \"static\"}),\n+                arguments(BadClass.class, new String[] {\"serialPersistentFields\", \"must\", \"final\"}),\n+                arguments(BadClass.class, new String[] {\"serialPersistentFields\", \"should\", \"type\", \"ObjectStreamField[]\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"private\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"non-static\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"return\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"writeObject(\", \"must\", \"parameter\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"readObject(\", \"must\", \"parameter\"}),\n+                arguments(BadClass.class, new String[] {\"method\", \"readObjectNoData(\", \"must\", \"parameter\"}),\n+\n+                arguments(EnumClass.class, new String[] {\"serialVersionUID\", \"enum\"}),\n+                arguments(EnumClass.class, new String[] {\"serialPersistentFields\", \"enum\"}),\n+                arguments(EnumClass.class, new String[] {\"method\", \"writeObject(\", \"enum\"}),\n+                arguments(EnumClass.class, new String[] {\"method\", \"readResolve(\", \"enum\"}),\n+\n+                arguments(RecordClass.class, new String[] {\"serialPersistentFields\", \"record\"}),\n+                arguments(RecordClass.class, new String[] {\"method\", \"record\"}),\n+\n+                arguments(C.class, new String[] {\"method\", \"not\", \"accessible\"}),\n+\n+                arguments(Acc.class, new String[] {\"serialPersistentFields\", \"should\", \"type\", \"ObjectStreamField[]\"}),\n+                arguments(Acc.class, new String[] {\"serialPersistentFields\", \"must\", \"instance\", \"ObjectStreamField[]\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"readResolve(\", \"must\", \"non-abstract\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"writeReplace(\", \"must\", \"non-static\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"writeReplace(\", \"must\", \"return\"}),\n+                arguments(Acc.class, new String[] {\"method\", \"writeReplace(\", \"must\", \"parameter\"}),\n@@ -119,2 +120,2 @@\n-    public void testSingleClassMisdeclarations(Class<?> cls, int kind) {\n-        singleClassEvent(cls, kind);\n+    public void testSingleClassMisdeclarations(Class<?> cls, String... keywords) {\n+        singleClassEvent(cls, keywords);\n@@ -131,1 +132,1 @@\n-        ObjectStreamClass.lookup(NonLongSUID.class);\n+        ObjectStreamClass.lookup(BadClass.class);\n@@ -141,2 +142,2 @@\n-    private static void singleClassEvent(Class<?> cls, int kind) {\n-        assertEquals(1, getEventsFor(cls, kind).size(), cls.getName());\n+    private static void singleClassEvent(Class<?> cls, String... keywords) {\n+        assertEquals(1, getEventsFor(cls, keywords).size(), cls.getName());\n@@ -145,1 +146,1 @@\n-    private static List<RecordedEvent> getEventsFor(Class<?> cls, int kind) {\n+    private static List<RecordedEvent> getEventsFor(Class<?> cls, String... keywords) {\n@@ -148,1 +149,1 @@\n-                        && e.getInt(\"kind\") == kind)\n+                        && matchesAllKeywords(e.getString(\"message\"), keywords))\n@@ -152,0 +153,4 @@\n+    private static boolean matchesAllKeywords(String msg, String[] keywords) {\n+        return Arrays.stream(keywords).allMatch(msg::contains);\n+    }\n+\n@@ -161,1 +166,1 @@\n-        private static final long serialVersionUID = 0xAAAA;\n+        private static final long serialVersionUID = 0xAAAAL;\n@@ -188,1 +193,1 @@\n-        private static final long serialVersionUID = 0xBBBB;\n+        private static final long serialVersionUID = 0xBBBBL;\n@@ -202,0 +207,4 @@\n+        \/*\n+         * readResolve() in superclass is not accessible\n+         *\/\n+\n@@ -206,0 +215,7 @@\n+        \/*\n+         * should declare serialVersionUID\n+         *\/\n+\n+        \/*\n+         * value must be non-null\n+         *\/\n@@ -210,2 +226,37 @@\n-    private static final class NonLongSUID implements Serializable {\n-        private static final Object serialVersionUID = 1.2;\n+    private static final class BadClass implements Serializable {\n+        \/*\n+         * should be private\n+         * must be long\n+         * must be final\n+         *\/\n+        Object serialVersionUID = 1.2;\n+\n+        \/*\n+         * must be private\n+         * must be static\n+         * must be final\n+         * should be ObjectStreamField[]\n+         *\/\n+        Object serialPersistentFields = new String[0];\n+\n+        \/*\n+         * must be private\n+         * must be non-static\n+         * must return void\n+         * must accept ObjectOutputStream\n+         *\/\n+        static int writeObject(int i) {\n+            return 0;\n+        }\n+\n+        \/*\n+         * must accept ObjectInputStream\n+         *\/\n+        private void readObject(ObjectOutputStream oos) {\n+        }\n+\n+        \/*\n+         * must not accept parameters\n+         *\/\n+        private void readObjectNoData(ObjectInputStream ois) {\n+        }\n@@ -218,2 +269,4 @@\n-        Object serialVersionUID = 1.2;\n-        Object serialPersistentFields = new String[0];\n+        \/*\n+         * non-effective on enum\n+         *\/\n+        private static final long serialVersionUID = 0xABCDL;\n@@ -221,2 +274,9 @@\n-        static int writeObject(int i) {\n-            return 0;\n+        \/*\n+         * non-effective on enum\n+         *\/\n+        private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n+\n+        \/*\n+         * non-effective on enum\n+         *\/\n+        private void writeObject(ObjectOutputStream oos) {\n@@ -225,0 +285,3 @@\n+        \/*\n+         * non-effective on enum\n+         *\/\n@@ -233,1 +296,9 @@\n-        private static final Object serialPersistentFields = new String[0];\n+        \/*\n+         * allowed on records\n+         *\/\n+        private static final long serialVersionUID = 0x1234L;\n+\n+        \/*\n+         * non-effective on records\n+         *\/\n+        private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n@@ -235,0 +306,3 @@\n+        \/*\n+         * non-effective on records\n+         *\/\n@@ -243,2 +317,1 @@\n-        @Serial\n-        private static final long serialVersionUID = 0xAcc;\n+        private static final long serialVersionUID = 0x5678L;\n@@ -246,1 +319,4 @@\n-        @Serial\n+        private static final Object serialPersistentFields = new String[0];\n+        \/*\n+         * must be non-abstract\n+         *\/\n@@ -249,1 +325,3 @@\n-        @Serial\n+        \/*\n+         * must be non-static\n+         *\/\n@@ -254,0 +332,4 @@\n+        \/*\n+         * must return Object\n+         * must have empty parameter types\n+         *\/\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSerializationMisdeclarationEvent.java","additions":138,"deletions":56,"binary":false,"changes":194,"status":"modified"}]}