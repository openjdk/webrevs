{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -57,10 +56,2 @@\n-        AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-            privilegedCheckSerialVersionUID(cl);\n-            privilegedCheckSerialPersistentFields(cl);\n-\n-            privilegedCheckPrivateMethod(cl, WRITE_OBJECT_NAME,\n-                    WRITE_OBJECT_PARAM_TYPES, Void.TYPE);\n-            privilegedCheckPrivateMethod(cl, READ_OBJECT_NAME,\n-                    READ_OBJECT_PARAM_TYPES, Void.TYPE);\n-            privilegedCheckPrivateMethod(cl, READ_OBJECT_NO_DATA_NAME,\n-                    READ_OBJECT_NO_DATA_PARAM_TYPES, Void.TYPE);\n+        checkSerialVersionUID(cl);\n+        checkSerialPersistentFields(cl);\n@@ -68,4 +59,6 @@\n-            privilegedCheckAccessibleMethod(cl, WRITE_REPLACE_NAME,\n-                    WRITE_REPLACE_PARAM_TYPES, Object.class);\n-            privilegedCheckAccessibleMethod(cl, READ_RESOLVE_NAME,\n-                    READ_RESOLVE_PARAM_TYPES, Object.class);\n+        checkPrivateMethod(cl, WRITE_OBJECT_NAME,\n+                WRITE_OBJECT_PARAM_TYPES, Void.TYPE);\n+        checkPrivateMethod(cl, READ_OBJECT_NAME,\n+                READ_OBJECT_PARAM_TYPES, Void.TYPE);\n+        checkPrivateMethod(cl, READ_OBJECT_NO_DATA_NAME,\n+                READ_OBJECT_NO_DATA_PARAM_TYPES, Void.TYPE);\n@@ -73,2 +66,4 @@\n-            return null;\n-        });\n+        checkAccessibleMethod(cl, WRITE_REPLACE_NAME,\n+                WRITE_REPLACE_PARAM_TYPES, Object.class);\n+        checkAccessibleMethod(cl, READ_RESOLVE_NAME,\n+                READ_RESOLVE_PARAM_TYPES, Object.class);\n@@ -77,2 +72,2 @@\n-    private static void privilegedCheckSerialVersionUID(Class<?> cl) {\n-        Field f = declaredField(cl, SUID_NAME);\n+    private static void checkSerialVersionUID(Class<?> cl) {\n+        Field f = privilegedDeclaredField(cl, SUID_NAME);\n@@ -87,1 +82,1 @@\n-            commitEvent(cl, SUID_NAME + \" in an enum class is not effective\");\n+            commitEvent(cl, SUID_NAME + \" should not be declared in an enum class\");\n@@ -103,2 +98,2 @@\n-    private static void privilegedCheckSerialPersistentFields(Class<?> cl) {\n-        Field f = declaredField(cl, SERIAL_PERSISTENT_FIELDS_NAME);\n+    private static void checkSerialPersistentFields(Class<?> cl) {\n+        Field f = privilegedDeclaredField(cl, SERIAL_PERSISTENT_FIELDS_NAME);\n@@ -110,1 +105,1 @@\n-                    \" in a record class is not effective\");\n+                    \" should not be declared in a record class\");\n@@ -113,1 +108,1 @@\n-                    \" in an enum class is not effective\");\n+                    \" should not be declared in an enum class\");\n@@ -143,1 +138,1 @@\n-    private static void privilegedCheckPrivateMethod(Class<?> cl,\n+    private static void checkPrivateMethod(Class<?> cl,\n@@ -145,1 +140,1 @@\n-        for (Method m : cl.getDeclaredMethods()) {\n+        for (Method m : privilegedDeclaredMethods(cl)) {\n@@ -147,1 +142,1 @@\n-                privilegedCheckPrivateMethod(cl,m, paramTypes, retType);\n+                checkPrivateMethod(cl, m, paramTypes, retType);\n@@ -152,1 +147,1 @@\n-    private static void privilegedCheckPrivateMethod(Class<?> cl,\n+    private static void checkPrivateMethod(Class<?> cl,\n@@ -155,1 +150,1 @@\n-            commitEvent(cl, \"method \" + m + \" on an enum class is not effective\");\n+            commitEvent(cl, \"method \" + m + \" should not be declared in an enum class\");\n@@ -157,1 +152,1 @@\n-            commitEvent(cl, \"method \" + m + \" on a record class is not effective\");\n+            commitEvent(cl, \"method \" + m + \" should not be declared in a record class\");\n@@ -173,1 +168,1 @@\n-    private static void privilegedCheckAccessibleMethod(Class<?> cl,\n+    private static void checkAccessibleMethod(Class<?> cl,\n@@ -176,1 +171,1 @@\n-            for (Method m : superCl.getDeclaredMethods()) {\n+            for (Method m : privilegedDeclaredMethods(superCl)) {\n@@ -178,1 +173,1 @@\n-                    privilegedCheckAccessibleMethod(cl, superCl, m, paramTypes, retType);\n+                    checkAccessibleMethod(cl, superCl, m, paramTypes, retType);\n@@ -184,1 +179,1 @@\n-    private static void privilegedCheckAccessibleMethod(Class<?> cl,\n+    private static void checkAccessibleMethod(Class<?> cl,\n@@ -187,1 +182,1 @@\n-            commitEvent(cl, \"method \" + m + \" on an enum class is not effective\");\n+            commitEvent(cl, \"method \" + m + \" should not be declared in an enum class\");\n@@ -239,0 +234,9 @@\n+    @SuppressWarnings(\"removal\")\n+    private static Field privilegedDeclaredField(Class<?> cl, String name) {\n+        if (System.getSecurityManager() == null) {\n+            return declaredField(cl, name);\n+        }\n+        return AccessController.doPrivileged((PrivilegedAction<Field>) () ->\n+                declaredField(cl, name));\n+    }\n+\n@@ -247,0 +251,9 @@\n+    @SuppressWarnings(\"removal\")\n+    private static Method[] privilegedDeclaredMethods(Class<?> cl) {\n+        if (System.getSecurityManager() == null) {\n+            return cl.getDeclaredMethods();\n+        }\n+        return AccessController.doPrivileged(\n+                (PrivilegedAction<Method[]>) cl::getDeclaredMethods);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerializationMisdeclarationChecker.java","additions":49,"deletions":36,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,6 @@\n-import java.io.*;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamClass;\n+import java.io.ObjectStreamField;\n+import java.io.Serial;\n+import java.io.Serializable;\n@@ -115,1 +120,0 @@\n-\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSerializationMisdeclarationEvent.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}