{"files":[{"patch":"@@ -466,1 +466,1 @@\n-            new SerializationMisdeclarationChecker(cl).checkMisdeclarations();\n+            SerializationMisdeclarationChecker.checkMisdeclarations(cl);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,6 +55,0 @@\n-    private final Class<?> cl;\n-\n-    SerializationMisdeclarationChecker(Class<?> cl) {\n-        this.cl = cl;\n-    }\n-\n@@ -62,1 +56,1 @@\n-    void checkMisdeclarations() {\n+    static void checkMisdeclarations(Class<?> cl) {\n@@ -64,2 +58,2 @@\n-            privilegedCheckSerialVersionUID();\n-            privilegedCheckSerialPersistentFields();\n+            privilegedCheckSerialVersionUID(cl);\n+            privilegedCheckSerialPersistentFields(cl);\n@@ -67,3 +61,6 @@\n-            privilegedCheckPrivateMethod(WRITE_OBJECT_NAME, WRITE_OBJECT_PARAM_TYPES, Void.TYPE);\n-            privilegedCheckPrivateMethod(READ_OBJECT_NAME, READ_OBJECT_PARAM_TYPES, Void.TYPE);\n-            privilegedCheckPrivateMethod(READ_OBJECT_NO_DATA_NAME, READ_OBJECT_NO_DATA_PARAM_TYPES, Void.TYPE);\n+            privilegedCheckPrivateMethod(cl, WRITE_OBJECT_NAME,\n+                    WRITE_OBJECT_PARAM_TYPES, Void.TYPE);\n+            privilegedCheckPrivateMethod(cl, READ_OBJECT_NAME,\n+                    READ_OBJECT_PARAM_TYPES, Void.TYPE);\n+            privilegedCheckPrivateMethod(cl, READ_OBJECT_NO_DATA_NAME,\n+                    READ_OBJECT_NO_DATA_PARAM_TYPES, Void.TYPE);\n@@ -71,2 +68,4 @@\n-            privilegedCheckAccessibleMethod(WRITE_REPLACE_NAME, WRITE_REPLACE_PARAM_TYPES, Object.class);\n-            privilegedCheckAccessibleMethod(READ_RESOLVE_NAME, READ_RESOLVE_PARAM_TYPES, Object.class);\n+            privilegedCheckAccessibleMethod(cl, WRITE_REPLACE_NAME,\n+                    WRITE_REPLACE_PARAM_TYPES, Object.class);\n+            privilegedCheckAccessibleMethod(cl, READ_RESOLVE_NAME,\n+                    READ_RESOLVE_PARAM_TYPES, Object.class);\n@@ -78,1 +77,1 @@\n-    private void privilegedCheckSerialVersionUID() {\n+    private static void privilegedCheckSerialVersionUID(Class<?> cl) {\n@@ -81,3 +80,3 @@\n-            if (isOrdinaryClass()) {\n-                commitEvent(SUID_NAME +\n-                        \" should be declared explicitly as a private static final long field\");\n+            if (isOrdinaryClass(cl)) {\n+                commitEvent(cl, SUID_NAME + \" should be declared explicitly\" +\n+                        \" as a private static final long field\");\n@@ -88,2 +87,1 @@\n-            commitEvent(SUID_NAME +\n-                    \" in an enum class is not effective\");\n+            commitEvent(cl, SUID_NAME + \" in an enum class is not effective\");\n@@ -92,2 +90,1 @@\n-            commitEvent(SUID_NAME +\n-                    \" should be private\");\n+            commitEvent(cl, SUID_NAME + \" should be private\");\n@@ -96,2 +93,1 @@\n-            commitEvent(SUID_NAME +\n-                    \" must be static to be effective\");\n+            commitEvent(cl, SUID_NAME + \" must be static\");\n@@ -100,2 +96,1 @@\n-            commitEvent(SUID_NAME +\n-                    \" must be final to be effective\");\n+            commitEvent(cl, SUID_NAME + \" must be final\");\n@@ -104,2 +99,1 @@\n-            commitEvent(SUID_NAME +\n-                    \" must be of type long to be effective\");\n+            commitEvent(cl, SUID_NAME + \" must be of type long\");\n@@ -109,1 +103,1 @@\n-    private void privilegedCheckSerialPersistentFields() {\n+    private static void privilegedCheckSerialPersistentFields(Class<?> cl) {\n@@ -115,1 +109,1 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME +\n@@ -118,1 +112,1 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME +\n@@ -122,2 +116,1 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n-                    \" must be private to be effective\");\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME + \" must be private\");\n@@ -126,2 +119,1 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n-                    \" must be static to be effective\");\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME + \" must be static\");\n@@ -130,2 +122,1 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n-                    \" must be final to be effective\");\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME + \" must be final\");\n@@ -134,1 +125,1 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME +\n@@ -143,2 +134,1 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n-                    \" must be non-null to be effective\");\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME + \" must be non-null\");\n@@ -148,2 +138,2 @@\n-            commitEvent(SERIAL_PERSISTENT_FIELDS_NAME +\n-                    \" must be an instance of ObjectStreamField[] to be effective\");\n+            commitEvent(cl, SERIAL_PERSISTENT_FIELDS_NAME +\n+                    \" must be an instance of ObjectStreamField[]\");\n@@ -153,1 +143,2 @@\n-    private void privilegedCheckPrivateMethod(String name, Class<?>[] paramTypes, Class<?> retType) {\n+    private static void privilegedCheckPrivateMethod(Class<?> cl,\n+            String name, Class<?>[] paramTypes, Class<?> retType) {\n@@ -156,1 +147,1 @@\n-                privilegedCheckPrivateMethod(m, paramTypes, retType);\n+                privilegedCheckPrivateMethod(cl,m, paramTypes, retType);\n@@ -161,1 +152,2 @@\n-    private void privilegedCheckPrivateMethod(Method m, Class<?>[] paramTypes, Class<?> retType) {\n+    private static void privilegedCheckPrivateMethod(Class<?> cl,\n+            Method m, Class<?>[] paramTypes, Class<?> retType) {\n@@ -163,1 +155,1 @@\n-            commitEvent(\"method \" + m + \" on an enum class is not effective\");\n+            commitEvent(cl, \"method \" + m + \" on an enum class is not effective\");\n@@ -165,1 +157,1 @@\n-            commitEvent(\"method \" + m + \" on an record class is not effective\");\n+            commitEvent(cl, \"method \" + m + \" on a record class is not effective\");\n@@ -168,1 +160,1 @@\n-            commitEvent(\"method \" + m + \" must be private to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must be private\");\n@@ -171,1 +163,1 @@\n-            commitEvent(\"method \" + m + \" must be non-static to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must be non-static\");\n@@ -174,1 +166,1 @@\n-            commitEvent(\"method \" + m + \" must have return type \" + retType + \" to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must have return type \" + retType);\n@@ -177,1 +169,1 @@\n-            commitEvent(\"method \" + m + \" must have parameter types \" + Arrays.toString(paramTypes) + \" to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must have parameter types \" + Arrays.toString(paramTypes));\n@@ -181,4 +173,4 @@\n-    private void privilegedCheckAccessibleMethod(String name,\n-            Class<?>[] paramTypes, Class<?> retType) {\n-        for (Class<?> cls = cl; cls != null; cls = cls.getSuperclass()) {\n-            for (Method m : cls.getDeclaredMethods()) {\n+    private static void privilegedCheckAccessibleMethod(Class<?> cl,\n+            String name, Class<?>[] paramTypes, Class<?> retType) {\n+        for (Class<?> superCl = cl; superCl != null; superCl = superCl.getSuperclass()) {\n+            for (Method m : superCl.getDeclaredMethods()) {\n@@ -186,1 +178,1 @@\n-                    privilegedCheckAccessibleMethod(cls, m, paramTypes, retType);\n+                    privilegedCheckAccessibleMethod(cl, superCl, m, paramTypes, retType);\n@@ -192,4 +184,4 @@\n-    private void privilegedCheckAccessibleMethod(Class<?> cls, Method m,\n-            Class<?>[] paramTypes, Class<?> retType) {\n-        if (cls.isEnum()) {\n-            commitEvent(\"method \" + m + \" on an enum class is not effective\");\n+    private static void privilegedCheckAccessibleMethod(Class<?> cl,\n+            Class<?> superCl, Method m, Class<?>[] paramTypes, Class<?> retType) {\n+        if (superCl.isEnum()) {\n+            commitEvent(cl, \"method \" + m + \" on an enum class is not effective\");\n@@ -198,1 +190,1 @@\n-            commitEvent(\"method \" + m + \" must be non-abstract to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must be non-abstract\");\n@@ -201,1 +193,1 @@\n-            commitEvent(\"method \" + m + \" must be non-static to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must be non-static\");\n@@ -204,1 +196,1 @@\n-            commitEvent(\"method \" + m + \" must have return type \" + retType + \" to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must have return type \" + retType);\n@@ -207,1 +199,1 @@\n-            commitEvent(\"method \" + m + \" must have parameter types \" + Arrays.toString(paramTypes) + \" to be effective\");\n+            commitEvent(cl, \"method \" + m + \" must have parameter types \" + Arrays.toString(paramTypes));\n@@ -209,3 +201,3 @@\n-        if (isPrivate(m) && cl != cls\n-                || isPackageProtected(m) && !isSamePackage(cl, cls)) {\n-            commitEvent(\"method \" + m + \" is not accessible\");\n+        if (isPrivate(m) && cl != superCl\n+                || isPackageProtected(m) && !isSamePackage(cl, superCl)) {\n+            commitEvent(cl, \"method \" + m + \" is not accessible\");\n@@ -220,1 +212,1 @@\n-    private boolean isOrdinaryClass() {\n+    private static boolean isOrdinaryClass(Class<?> cl) {\n@@ -263,6 +255,2 @@\n-    private void commitEvent(String msg, Object... args) {\n-        commitEvent(cl, msg);\n-    }\n-\n-    private static void commitEvent(Class<?> cls, String msg) {\n-        commit(timestamp(), cls, msg);\n+    private static void commitEvent(Class<?> cl, String msg) {\n+        commit(timestamp(), cl, msg);\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerializationMisdeclarationChecker.java","additions":62,"deletions":74,"binary":false,"changes":136,"status":"modified"}]}