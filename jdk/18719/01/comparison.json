{"files":[{"patch":"@@ -867,5 +867,1 @@\n-    if (JvmtiExport::can_hotswap_or_post_breakpoint() && info.resolved_method()->is_old()) {\n-      resolved_method = methodHandle(current, info.resolved_method()->get_new_method());\n-    } else {\n-      resolved_method = methodHandle(current, info.resolved_method());\n-    }\n+    resolved_method = methodHandle(current, info.resolved_method());\n@@ -874,0 +870,3 @@\n+  \/\/ Don't allow safepoints until the method is cached.\n+  NoSafepointVerifier nsv;\n+\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+#include \"prims\/jvmtiExport.hpp\"\n@@ -115,0 +116,21 @@\n+\/\/ Redefinition safepoint may have updated the method. Make sure the new version of the method is returned.\n+\/\/ Callers are responsible for not safepointing and storing this method somewhere safe where redefinition\n+\/\/ can replace it if runs again.  Safe places are constant pool cache and code cache metadata.\n+\/\/ The old method is safe in CallInfo since its a methodHandle (it won't get deleted), and accessed with these\n+\/\/ accessors.\n+Method* CallInfo::resolved_method() const {\n+  if (JvmtiExport::can_hotswap_or_post_breakpoint() && _resolved_method->is_old()) {\n+    return _resolved_method->get_new_method();\n+  } else {\n+    return _resolved_method();\n+  }\n+}\n+\n+Method* CallInfo::selected_method() const {\n+  if (JvmtiExport::can_hotswap_or_post_breakpoint() && _selected_method->is_old()) {\n+    return _selected_method->get_new_method();\n+  } else {\n+    return _selected_method();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,2 +95,2 @@\n-  Method* resolved_method() const                { return _resolved_method(); }\n-  Method* selected_method() const                { return _selected_method(); }\n+  Method* resolved_method() const;\n+  Method* selected_method() const;\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}