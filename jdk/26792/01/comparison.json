{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -66,1 +67,1 @@\n-    private static final long[] modulus = new long[] {\n+    @Stable private static final long[] modulus = new long[] {\n@@ -210,3 +211,2 @@\n-        n2 = n * modulus[2];\n-        nn2 = Math.unsignedMultiplyHigh(n, modulus[2]) << shift1 | (n2 >>> shift2);\n-        n2 &= LIMB_MASK;\n+        n2 = 0;\n+        nn2 = 0;\n@@ -224,2 +224,0 @@\n-        dd2 += nn2;\n-        d2 += n2;\n@@ -262,3 +260,0 @@\n-        n2 = n * modulus[2];\n-        dd2 += Math.unsignedMultiplyHigh(n, modulus[2]) << shift1 | (n2 >>> shift2);\n-        d2 += n2 & LIMB_MASK;\n@@ -303,3 +298,0 @@\n-        n2 = n * modulus[2];\n-        dd2 += Math.unsignedMultiplyHigh(n, modulus[2]) << shift1 | (n2 >>> shift2);\n-        d2 += n2 & LIMB_MASK;\n@@ -320,3 +312,3 @@\n-        d0 = aa3 * bb0;\n-        dd0 = Math.unsignedMultiplyHigh(aa3, bb0) << shift1 | (d0 >>> shift2);\n-        d0 &= LIMB_MASK;\n+        n0 = n * modulus[0];\n+        dd0 += Math.unsignedMultiplyHigh(n, modulus[0]) << shift1 | (n0 >>> shift2);\n+        d0 += n0 & LIMB_MASK;\n@@ -338,3 +330,2 @@\n-        n0 = n * modulus[0];\n-        dd0 += Math.unsignedMultiplyHigh(n, modulus[0]) << shift1 | (n0 >>> shift2);\n-        d0 += n0 & LIMB_MASK;\n+        dd0 += (n + (-n >> BITS_PER_LIMB));\n+        d0 += -n & LIMB_MASK;;\n@@ -344,3 +335,0 @@\n-        n2 = n * modulus[2];\n-        dd2 += Math.unsignedMultiplyHigh(n, modulus[2]) << shift1 | (n2 >>> shift2);\n-        d2 += n2 & LIMB_MASK;\n@@ -385,3 +373,0 @@\n-        n2 = n * modulus[2];\n-        dd2 += Math.unsignedMultiplyHigh(n, modulus[2]) << shift1 | (n2 >>> shift2);\n-        d2 += n2 & LIMB_MASK;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/MontgomeryIntegerPolynomialP256.java","additions":9,"deletions":24,"binary":false,"changes":33,"status":"modified"}]}