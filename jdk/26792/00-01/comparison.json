{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -66,1 +67,1 @@\n-    private static final long[] modulus = new long[] {\n+    @Stable private static final long[] modulus = new long[] {\n@@ -204,2 +205,3 @@\n-        n0 = -n & LIMB_MASK;\n-        nn0 = (n + (-n >> BITS_PER_LIMB));\n+        n0 = n * modulus[0];\n+        nn0 = Math.unsignedMultiplyHigh(n, modulus[0]) << shift1 | (n0 >>> shift2);\n+        n0 &= LIMB_MASK;\n@@ -252,2 +254,3 @@\n-        dd0 += (n + (-n >> BITS_PER_LIMB));\n-        d0 += -n & LIMB_MASK;\n+        n0 = n * modulus[0];\n+        dd0 += Math.unsignedMultiplyHigh(n, modulus[0]) << shift1 | (n0 >>> shift2);\n+        d0 += n0 & LIMB_MASK;\n@@ -289,2 +292,3 @@\n-        dd0 += (n + (-n >> BITS_PER_LIMB));\n-        d0 += -n & LIMB_MASK;\n+        n0 = n * modulus[0];\n+        dd0 += Math.unsignedMultiplyHigh(n, modulus[0]) << shift1 | (n0 >>> shift2);\n+        d0 += n0 & LIMB_MASK;\n@@ -308,3 +312,3 @@\n-        d0 = aa3 * bb0;\n-        dd0 = Math.unsignedMultiplyHigh(aa3, bb0) << shift1 | (d0 >>> shift2);\n-        d0 &= LIMB_MASK;\n+        n0 = n * modulus[0];\n+        dd0 += Math.unsignedMultiplyHigh(n, modulus[0]) << shift1 | (n0 >>> shift2);\n+        d0 += n0 & LIMB_MASK;\n@@ -363,2 +367,3 @@\n-        dd0 += (n + (-n >> BITS_PER_LIMB));\n-        d0 += -n & LIMB_MASK;;\n+        n0 = n * modulus[0];\n+        dd0 += Math.unsignedMultiplyHigh(n, modulus[0]) << shift1 | (n0 >>> shift2);\n+        d0 += n0 & LIMB_MASK;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/MontgomeryIntegerPolynomialP256.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"}]}