{"files":[{"patch":"@@ -583,3 +583,2 @@\n-        DataInputStream dis = null;\n-        if (in instanceof DataInputStream) {\n-            dis = (DataInputStream)in;\n+        char[] chararr;\n+        if (in instanceof DataInputStream dis) {\n@@ -587,1 +586,2 @@\n-                dis.bytearr = new byte[utflen << 1];\n+                dis.bytearr = new byte[utflen*2];\n+                dis.chararr = new char[utflen*2];\n@@ -589,0 +589,1 @@\n+            chararr = dis.chararr;\n@@ -592,0 +593,1 @@\n+            chararr = new char[utflen];\n@@ -593,0 +595,5 @@\n+\n+        int c, char2, char3;\n+        int count = 0;\n+        int chararr_count=0;\n+\n@@ -595,16 +602,5 @@\n-        int count;\n-        char[] chararr;\n-        if (utflen > 7) {\n-            \/\/ When there's a chunk of ASCII 0-127, the modified UTF-8 stream can use a similar\n-            \/\/ fast-path as regular UTF-8.\n-            count = JLA.countPositives(bytearr, 0, utflen);\n-            if (count == utflen) {\n-                \/\/ For ASCII ISO-8859-1 is equivalent to UTF-8, while avoiding a redundant\n-                \/\/ scan\n-                return new String(bytearr, 0, utflen, StandardCharsets.ISO_8859_1);\n-            }\n-            chararr = getCharBuf(utflen, dis);\n-            JLA.inflateBytesToChars(bytearr, 0, chararr, 0, count);\n-        } else {\n-            chararr = getCharBuf(utflen, dis);\n-            count = 0;\n+        while (count < utflen) {\n+            c = (int) bytearr[count] & 0xff;\n+            if (c > 127) break;\n+            count++;\n+            chararr[chararr_count++]=(char)c;\n@@ -612,2 +608,1 @@\n-        int c, char2, char3;\n-        int chararr_count = count;\n+\n@@ -627,1 +622,1 @@\n-                            \"malformed input: partial character at end\");\n+                                \"malformed input: partial character at end\");\n@@ -631,1 +626,1 @@\n-                            \"malformed input around byte \" + count);\n+                                \"malformed input around byte \" + count);\n@@ -633,1 +628,1 @@\n-                                                    (char2 & 0x3F));\n+                            (char2 & 0x3F));\n@@ -640,1 +635,1 @@\n-                            \"malformed input: partial character at end\");\n+                                \"malformed input: partial character at end\");\n@@ -645,1 +640,1 @@\n-                            \"malformed input around byte \" + (count-1));\n+                                \"malformed input around byte \" + (count-1));\n@@ -647,2 +642,2 @@\n-                                                    ((char2 & 0x3F) << 6)  |\n-                                                    ((char3 & 0x3F) << 0));\n+                            ((char2 & 0x3F) << 6)  |\n+                            ((char3 & 0x3F) << 0));\n@@ -652,2 +647,2 @@\n-                    throw new UTFDataFormatException(\n-                        \"malformed input around byte \" + count);\n+                        throw new UTFDataFormatException(\n+                                \"malformed input around byte \" + count);\n@@ -660,11 +655,0 @@\n-    private static char[] getCharBuf(int utflen, DataInputStream dis) {\n-        if (dis != null) {\n-            char[] chararr = dis.chararr;\n-            if (chararr.length < utflen) {\n-                dis.chararr = chararr = new char[utflen << 1];\n-            }\n-            return chararr;\n-        } else {\n-            return new char[utflen];\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":26,"deletions":42,"binary":false,"changes":68,"status":"modified"}]}