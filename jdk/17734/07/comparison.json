{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -574,1 +574,1 @@\n-    public static final String readUTF(DataInput in) throws IOException {\n+    public static String readUTF(DataInput in) throws IOException {\n@@ -576,2 +576,2 @@\n-        byte[] bytearr = null;\n-        char[] chararr = null;\n+        byte[] bytearr;\n+        char[] chararr;\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -45,0 +46,1 @@\n+import jdk.internal.access.JavaLangAccess;\n@@ -2998,0 +3000,2 @@\n+        \/** access to internal methods to count ASCII and inflate latin1\/ASCII bytes to char *\/\n+        private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n@@ -3674,0 +3678,4 @@\n+            if (!blkmode) {\n+                end = pos = 0;\n+            }\n+\n@@ -3676,0 +3684,20 @@\n+                \/\/ Scan for leading ASCII chars\n+                int avail = end - pos;\n+                int ascii = JLA.countPositives(buf, pos, Math.min(avail, (int)utflen));\n+                if (ascii == utflen) {\n+                    \/\/ Complete match, consume the buf[pos ... pos + ascii] range and return.\n+                    \/\/ Modified UTF-8 and ISO-8859-1 are both ASCII-compatible encodings bytes\n+                    \/\/ thus we can treat the range as ISO-8859-1 and avoid a redundant scan\n+                    \/\/ in the String constructor\n+                    String utf = new String(buf, pos, ascii, StandardCharsets.ISO_8859_1);\n+                    pos += ascii;\n+                    return utf;\n+                }\n+                \/\/ Avoid allocating a StringBuilder if there's enough data in buf and\n+                \/\/ cbuf is large enough\n+                if (avail >= utflen && utflen <= CHAR_BUF_SIZE) {\n+                    JLA.inflateBytesToChars(buf, pos, cbuf, 0, ascii);\n+                    pos += ascii;\n+                    int cbufPos = readUTFSpan(ascii, utflen - ascii);\n+                    return new String(cbuf, 0, cbufPos);\n+                }\n@@ -3683,4 +3711,0 @@\n-            if (!blkmode) {\n-                end = pos = 0;\n-            }\n-\n@@ -3690,1 +3714,5 @@\n-                    utflen -= readUTFSpan(sbuf, utflen);\n+                    int cbufPos = readUTFSpan(0, utflen);\n+                    \/\/ pos has advanced: adjust utflen by the difference in\n+                    \/\/ available bytes\n+                    utflen -= avail - (end - pos);\n+                    sbuf.append(cbuf, 0, cbufPos);\n@@ -3712,3 +3740,3 @@\n-         * (starting at offset pos and ending at or before offset end),\n-         * consuming no more than utflen bytes.  Appends read characters to\n-         * sbuf.  Returns the number of bytes consumed.\n+         * (starting at offset pos), consuming no more than utflen bytes.\n+         * Appends read characters to cbuf. Returns the current position\n+         * in cbuf.\n@@ -3716,1 +3744,1 @@\n-        private long readUTFSpan(StringBuilder sbuf, long utflen)\n+        private int readUTFSpan(int cpos, long utflen)\n@@ -3719,1 +3747,0 @@\n-            int cpos = 0;\n@@ -3723,1 +3750,1 @@\n-            int stop = pos + ((utflen > avail) ? avail - 2 : (int) utflen);\n+            int stop = start + ((utflen > avail) ? avail - 2 : (int) utflen);\n@@ -3768,3 +3795,1 @@\n-\n-            sbuf.append(cbuf, 0, cpos);\n-            return pos - start;\n+            return cpos;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":39,"deletions":14,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2020, 2022, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +31,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -31,0 +33,2 @@\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n@@ -41,1 +45,1 @@\n-    private final int size = 1024;\n+    private static final int SIZE = 1024;\n@@ -44,0 +48,10 @@\n+    private ByteArrayInputStream utfDataAsciiMixed;\n+    private ByteArrayInputStream utfDataMixed;\n+\n+    private ByteArrayInputStream utfDataAsciiSmall;\n+    private ByteArrayInputStream utfDataSmall;\n+\n+    private ByteArrayInputStream utfDataAsciiLarge;\n+    private ByteArrayInputStream utfDataLarge;\n+\n+    private static final int REPEATS = 20;\n@@ -46,2 +60,2 @@\n-    public void setup() {\n-        byte[] bytes = new byte[size];\n+    public void setup() throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException {\n+        byte[] bytes = new byte[SIZE];\n@@ -50,0 +64,53 @@\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        DataOutputStream dataOut = new DataOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"small\");\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataAsciiMixed = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new DataOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigger use of simd intrinsics\");\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataAsciiLarge = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new DataOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"smol\");\n+            dataOut.writeUTF(\"smally\");\n+        }\n+        dataOut.flush();\n+        utfDataAsciiSmall = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new DataOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"sm\\u00FFll\");\n+            dataOut.writeUTF(\"slightly longer string th\\u01F3t is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataMixed = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new DataOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"sm\\u00F3l\");\n+            dataOut.writeUTF(\"small\\u0132\");\n+        }\n+        dataOut.flush();\n+        utfDataSmall = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new DataOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigg\\u0131r use of simd intrinsics\");\n+            dataOut.writeUTF(\"slightly longer string th\\u0131t is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataLarge = new ByteArrayInputStream(baos.toByteArray());\n@@ -56,1 +123,1 @@\n-        for (int i = 0; i < size \/ 2; i++) {\n+        for (int i = 0; i < SIZE \/ 2; i++) {\n@@ -65,1 +132,1 @@\n-        for (int i = 0; i < size \/ 4; i++) {\n+        for (int i = 0; i < SIZE \/ 4; i++) {\n@@ -69,0 +136,60 @@\n+\n+    @Benchmark\n+    public void readUTFAsciiMixed(Blackhole bh) throws Exception {\n+        utfDataAsciiMixed.reset();\n+        DataInputStream dis = new DataInputStream(utfDataAsciiMixed);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(dis.readUTF());\n+            bh.consume(dis.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFAsciiSmall(Blackhole bh) throws Exception {\n+        utfDataAsciiSmall.reset();\n+        DataInputStream dis = new DataInputStream(utfDataAsciiSmall);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(dis.readUTF());\n+            bh.consume(dis.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFAsciiLarge(Blackhole bh) throws Exception {\n+        utfDataAsciiLarge.reset();\n+        DataInputStream dis = new DataInputStream(utfDataAsciiLarge);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(dis.readUTF());\n+            bh.consume(dis.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFMixed(Blackhole bh) throws Exception {\n+        utfDataMixed.reset();\n+        DataInputStream dis = new DataInputStream(utfDataMixed);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(dis.readUTF());\n+            bh.consume(dis.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFSmall(Blackhole bh) throws Exception {\n+        utfDataSmall.reset();\n+        DataInputStream dis = new DataInputStream(utfDataSmall);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(dis.readUTF());\n+            bh.consume(dis.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFLarge(Blackhole bh) throws Exception {\n+        utfDataLarge.reset();\n+        DataInputStream dis = new DataInputStream(utfDataLarge);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(dis.readUTF());\n+            bh.consume(dis.readUTF());\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/DataInputStreamTest.java","additions":133,"deletions":6,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(value = 3, warmups = 0)\n+@Measurement(iterations = 5, time = 1)\n+@Warmup(iterations = 2, time = 2)\n+@State(Scope.Thread)\n+public class ObjectInputStreamTest {\n+    private ByteArrayInputStream utfDataAsciiMixed;\n+    private ByteArrayInputStream utfDataMixed;\n+\n+    private ByteArrayInputStream utfDataAsciiSmall;\n+    private ByteArrayInputStream utfDataSmall;\n+\n+    private ByteArrayInputStream utfDataAsciiLarge;\n+    private ByteArrayInputStream utfDataLarge;\n+\n+    \/\/ Overhead of creating an ObjectInputStream is significant, need to increase the number of data elements\n+    \/\/ to balance work\n+    private static final int REPEATS = 20;\n+\n+\n+    @Setup(Level.Iteration)\n+    public void setup() throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream dataOut = new ObjectOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"small\");\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataAsciiMixed = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new ObjectOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigger use of simd intrinsics\");\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataAsciiLarge = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new ObjectOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"smol\");\n+            dataOut.writeUTF(\"smally\");\n+        }\n+        dataOut.flush();\n+        utfDataAsciiSmall = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new ObjectOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"sm\\u00FFll\");\n+            dataOut.writeUTF(\"slightly longer string th\\u01F3t is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataMixed = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new ObjectOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"sm\\u00F3l\");\n+            dataOut.writeUTF(\"small\\u0132\");\n+        }\n+        dataOut.flush();\n+        utfDataSmall = new ByteArrayInputStream(baos.toByteArray());\n+\n+        baos = new ByteArrayOutputStream();\n+        dataOut = new ObjectOutputStream(baos);\n+        for (int i = 0; i < REPEATS; i++) {\n+            dataOut.writeUTF(\"slightly longer string that is more likely to trigg\\u0131r use of simd intrinsics\");\n+            dataOut.writeUTF(\"slightly longer string th\\u0131t is more likely to trigger use of simd intrinsics\");\n+        }\n+        dataOut.flush();\n+        utfDataLarge = new ByteArrayInputStream(baos.toByteArray());\n+    }\n+\n+    @Benchmark\n+    public void readUTFAsciiMixed(Blackhole bh) throws Exception {\n+        utfDataAsciiMixed.reset();\n+        ObjectInputStream ois = new ObjectInputStream(utfDataAsciiMixed);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(ois.readUTF());\n+            bh.consume(ois.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFAsciiSmall(Blackhole bh) throws Exception {\n+        utfDataAsciiSmall.reset();\n+        ObjectInputStream ois = new ObjectInputStream(utfDataAsciiSmall);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(ois.readUTF());\n+            bh.consume(ois.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFAsciiLarge(Blackhole bh) throws Exception {\n+        utfDataAsciiLarge.reset();\n+        ObjectInputStream ois = new ObjectInputStream(utfDataAsciiLarge);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(ois.readUTF());\n+            bh.consume(ois.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFMixed(Blackhole bh) throws Exception {\n+        utfDataMixed.reset();\n+        ObjectInputStream ois = new ObjectInputStream(utfDataMixed);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(ois.readUTF());\n+            bh.consume(ois.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFSmall(Blackhole bh) throws Exception {\n+        utfDataSmall.reset();\n+        ObjectInputStream ois = new ObjectInputStream(utfDataSmall);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(ois.readUTF());\n+            bh.consume(ois.readUTF());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readUTFLarge(Blackhole bh) throws Exception {\n+        utfDataLarge.reset();\n+        ObjectInputStream ois = new ObjectInputStream(utfDataLarge);\n+        for (int i = 0; i < REPEATS; i++) {\n+            bh.consume(ois.readUTF());\n+            bh.consume(ois.readUTF());\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/ObjectInputStreamTest.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"}]}