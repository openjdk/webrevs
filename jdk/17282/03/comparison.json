{"files":[{"patch":"@@ -215,2 +215,1 @@\n-        labelBinding(breakLabel);\n-        return this;\n+        return labelBinding(breakLabel);\n@@ -256,1 +255,1 @@\n-        branchInstruction(BytecodeHelpers.reverseBranchOpcode(opcode), thenBlock.endLabel());\n+        branch(BytecodeHelpers.reverseBranchOpcode(opcode), thenBlock.endLabel());\n@@ -260,2 +259,1 @@\n-        labelBinding(breakLabel);\n-        return this;\n+        return labelBinding(breakLabel);\n@@ -308,1 +306,1 @@\n-        branchInstruction(BytecodeHelpers.reverseBranchOpcode(opcode), elseBlock.startLabel());\n+        branch(BytecodeHelpers.reverseBranchOpcode(opcode), elseBlock.startLabel());\n@@ -312,1 +310,1 @@\n-            thenBlock.branchInstruction(Opcode.GOTO, thenBlock.breakLabel());\n+            thenBlock.branch(Opcode.GOTO, thenBlock.breakLabel());\n@@ -317,2 +315,1 @@\n-        labelBinding(breakLabel);\n-        return this;\n+        return labelBinding(breakLabel);\n@@ -420,3 +417,2 @@\n-    default CodeBuilder loadInstruction(TypeKind tk, int slot) {\n-        with(LoadInstruction.of(tk, slot));\n-        return this;\n+    default CodeBuilder loadLocal(TypeKind tk, int slot) {\n+        return with(LoadInstruction.of(tk, slot));\n@@ -431,14 +427,2 @@\n-    default CodeBuilder storeInstruction(TypeKind tk, int slot) {\n-        with(StoreInstruction.of(tk, slot));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to increment a local variable by a constant\n-     * @param slot the local variable slot\n-     * @param val the increment value\n-     * @return this builder\n-     *\/\n-    default CodeBuilder incrementInstruction(int slot, int val) {\n-        with(IncrementInstruction.of(slot, val));\n-        return this;\n+    default CodeBuilder storeLocal(TypeKind tk, int slot) {\n+        return with(StoreInstruction.of(tk, slot));\n@@ -454,27 +438,2 @@\n-    default CodeBuilder branchInstruction(Opcode op, Label target) {\n-        with(BranchInstruction.of(op, target));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to access a jump table by key match and jump\n-     * @param defaultTarget the default jump target\n-     * @param cases the switch cases\n-     * @return this builder\n-     *\/\n-    default CodeBuilder lookupSwitchInstruction(Label defaultTarget, List<SwitchCase> cases) {\n-        with(LookupSwitchInstruction.of(defaultTarget, cases));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to access a jump table by index and jump\n-     * @param lowValue the low key value\n-     * @param highValue the high key value\n-     * @param defaultTarget the default jump target\n-     * @param cases the switch cases\n-     * @return this builder\n-     *\/\n-    default CodeBuilder tableSwitchInstruction(int lowValue, int highValue, Label defaultTarget, List<SwitchCase> cases) {\n-        with(TableSwitchInstruction.of(lowValue, highValue, defaultTarget, cases));\n-        return this;\n+    default CodeBuilder branch(Opcode op, Label target) {\n+        return with(BranchInstruction.of(op, target));\n@@ -488,12 +447,2 @@\n-    default CodeBuilder returnInstruction(TypeKind tk) {\n-        with(ReturnInstruction.of(tk));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to throw an exception or error\n-     * @return this builder\n-     *\/\n-    default CodeBuilder throwInstruction() {\n-        with(ThrowInstruction.of());\n-        return this;\n+    default CodeBuilder return_(TypeKind tk) {\n+        return with(ReturnInstruction.of(tk));\n@@ -509,3 +458,2 @@\n-    default CodeBuilder fieldInstruction(Opcode opcode, FieldRefEntry ref) {\n-        with(FieldInstruction.of(opcode, ref));\n-        return this;\n+    default CodeBuilder fieldAccess(Opcode opcode, FieldRefEntry ref) {\n+        return with(FieldInstruction.of(opcode, ref));\n@@ -523,2 +471,2 @@\n-    default CodeBuilder fieldInstruction(Opcode opcode, ClassDesc owner, String name, ClassDesc type) {\n-        return fieldInstruction(opcode, constantPool().fieldRefEntry(owner, name, type));\n+    default CodeBuilder fieldAccess(Opcode opcode, ClassDesc owner, String name, ClassDesc type) {\n+        return fieldAccess(opcode, constantPool().fieldRefEntry(owner, name, type));\n@@ -534,1 +482,1 @@\n-    default CodeBuilder invokeInstruction(Opcode opcode, MemberRefEntry ref) {\n+    default CodeBuilder invoke(Opcode opcode, MemberRefEntry ref) {\n@@ -548,2 +496,2 @@\n-    default CodeBuilder invokeInstruction(Opcode opcode, ClassDesc owner, String name, MethodTypeDesc desc, boolean isInterface) {\n-        return invokeInstruction(opcode,\n+    default CodeBuilder invoke(Opcode opcode, ClassDesc owner, String name, MethodTypeDesc desc, boolean isInterface) {\n+        return invoke(opcode,\n@@ -554,101 +502,0 @@\n-    \/**\n-     * Generate an instruction to invoke a dynamically-computed call site\n-     * @param ref the dynamic call site\n-     * @return this builder\n-     *\/\n-    default CodeBuilder invokeDynamicInstruction(InvokeDynamicEntry ref) {\n-        with(InvokeDynamicInstruction.of(ref));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to invoke a dynamically-computed call site\n-     * @param desc the dynamic call site\n-     * @return this builder\n-     *\/\n-    default CodeBuilder invokeDynamicInstruction(DynamicCallSiteDesc desc) {\n-        MethodHandleEntry bsMethod = handleDescToHandleInfo(constantPool(), (DirectMethodHandleDesc) desc.bootstrapMethod());\n-        var cpArgs = desc.bootstrapArgs();\n-        List<LoadableConstantEntry> bsArguments = new ArrayList<>(cpArgs.length);\n-        for (var constantValue : cpArgs) {\n-            bsArguments.add(BytecodeHelpers.constantEntry(constantPool(), constantValue));\n-        }\n-        BootstrapMethodEntry bm = constantPool().bsmEntry(bsMethod, bsArguments);\n-        NameAndTypeEntry nameAndType = constantPool().nameAndTypeEntry(desc.invocationName(), desc.invocationType());\n-        invokeDynamicInstruction(constantPool().invokeDynamicEntry(bm, nameAndType));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to create a new object\n-     * @param type the object type\n-     * @return this builder\n-     *\/\n-    default CodeBuilder newObjectInstruction(ClassEntry type) {\n-        with(NewObjectInstruction.of(type));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to create a new object\n-     * @param type the object type\n-     * @return this builder\n-     * @throws IllegalArgumentException if {@code type} represents a primitive type\n-     *\/\n-    default CodeBuilder newObjectInstruction(ClassDesc type) {\n-        return newObjectInstruction(constantPool().classEntry(type));\n-    }\n-\n-    \/**\n-     * Generate an instruction to create a new array of a primitive type\n-     * @param typeKind the primitive component type\n-     * @return this builder\n-     *\/\n-    default CodeBuilder newPrimitiveArrayInstruction(TypeKind typeKind) {\n-        with(NewPrimitiveArrayInstruction.of(typeKind));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to create a new array of reference\n-     * @param type the component type\n-     * @return this builder\n-     *\/\n-    default CodeBuilder newReferenceArrayInstruction(ClassEntry type) {\n-        with(NewReferenceArrayInstruction.of(type));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to create a new array of reference\n-     * @param type the component type\n-     * @return this builder\n-     * @throws IllegalArgumentException if {@code type} represents a primitive type\n-     *\/\n-    default CodeBuilder newReferenceArrayInstruction(ClassDesc type) {\n-        return newReferenceArrayInstruction(constantPool().classEntry(type));\n-    }\n-\n-    \/**\n-     * Generate an instruction to create a new multidimensional array\n-     * @param dimensions the number of dimensions\n-     * @param type the array type\n-     * @return this builder\n-     *\/\n-    default CodeBuilder newMultidimensionalArrayInstruction(int dimensions,\n-                                                            ClassEntry type) {\n-        with(NewMultiArrayInstruction.of(type, dimensions));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an instruction to create a new multidimensional array\n-     * @param dimensions the number of dimensions\n-     * @param type the array type\n-     * @return this builder\n-     *\/\n-    default CodeBuilder newMultidimensionalArrayInstruction(int dimensions,\n-                                                            ClassDesc type) {\n-        return newMultidimensionalArrayInstruction(dimensions, constantPool().classEntry(type));\n-    }\n-\n@@ -660,1 +507,1 @@\n-    default CodeBuilder arrayLoadInstruction(TypeKind tk) {\n+    default CodeBuilder arrayLoad(TypeKind tk) {\n@@ -662,2 +509,1 @@\n-        with(ArrayLoadInstruction.of(opcode));\n-        return this;\n+        return with(ArrayLoadInstruction.of(opcode));\n@@ -671,1 +517,1 @@\n-    default CodeBuilder arrayStoreInstruction(TypeKind tk) {\n+    default CodeBuilder arrayStore(TypeKind tk) {\n@@ -673,26 +519,1 @@\n-        with(ArrayStoreInstruction.of(opcode));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate a type checking instruction\n-     * @see Opcode.Kind#TYPE_CHECK\n-     * @param opcode the type check instruction opcode\n-     * @param type the type\n-     * @return this builder\n-     *\/\n-    default CodeBuilder typeCheckInstruction(Opcode opcode,\n-                                             ClassEntry type) {\n-        with(TypeCheckInstruction.of(opcode, type));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate a type checking instruction\n-     * @see Opcode.Kind#TYPE_CHECK\n-     * @param opcode the type check instruction opcode\n-     * @param type the type\n-     * @return this builder\n-     *\/\n-    default CodeBuilder typeCheckInstruction(Opcode opcode, ClassDesc type) {\n-        return typeCheckInstruction(opcode, constantPool().classEntry(type));\n+        return with(ArrayStoreInstruction.of(opcode));\n@@ -702,1 +523,1 @@\n-     * Generate a type converting instruction\n+     * Generate instruction(s) to convert {@code fromType} to {@code toType}\n@@ -706,26 +527,59 @@\n-     *\/\n-    default CodeBuilder convertInstruction(TypeKind fromType, TypeKind toType) {\n-        with(ConvertInstruction.of(fromType, toType));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate a stack manipulating instruction\n-     * @param opcode the stack instruction opcode\n-     * @see Opcode.Kind#STACK\n-     * @return this builder\n-     *\/\n-    default CodeBuilder stackInstruction(Opcode opcode) {\n-        with(StackInstruction.of(opcode));\n-        return this;\n-    }\n-\n-    \/**\n-     * Generate an operator instruction\n-     * @see Opcode.Kind#OPERATOR\n-     * @param opcode the operator instruction opcode\n-     * @return this builder\n-     *\/\n-    default CodeBuilder operatorInstruction(Opcode opcode) {\n-        with(OperatorInstruction.of(opcode));\n-        return this;\n+     * @throws IllegalArgumentException for conversions of {@code VoidType} or {@code ReferenceType}\n+     *\/\n+    default CodeBuilder conversion(TypeKind fromType, TypeKind toType) {\n+        return switch (fromType) {\n+            case IntType, ByteType, CharType, ShortType, BooleanType ->\n+                    switch (toType) {\n+                        case IntType -> this;\n+                        case LongType -> i2l();\n+                        case DoubleType -> i2d();\n+                        case FloatType -> i2f();\n+                        case ByteType -> i2b();\n+                        case CharType -> i2c();\n+                        case ShortType -> i2s();\n+                        case BooleanType -> iconst_1().iand();\n+                        case VoidType, ReferenceType ->\n+                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n+                    };\n+            case LongType ->\n+                    switch (toType) {\n+                        case IntType -> l2i();\n+                        case LongType -> this;\n+                        case DoubleType -> l2d();\n+                        case FloatType -> l2f();\n+                        case ByteType -> l2i().i2b();\n+                        case CharType -> l2i().i2c();\n+                        case ShortType -> l2i().i2s();\n+                        case BooleanType -> l2i().iconst_1().iand();\n+                        case VoidType, ReferenceType ->\n+                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n+                    };\n+            case DoubleType ->\n+                    switch (toType) {\n+                        case IntType -> d2i();\n+                        case LongType -> d2l();\n+                        case DoubleType -> this;\n+                        case FloatType -> d2f();\n+                        case ByteType -> d2i().i2b();\n+                        case CharType -> d2i().i2c();\n+                        case ShortType -> d2i().i2s();\n+                        case BooleanType -> d2i().iconst_1().iand();\n+                        case VoidType, ReferenceType ->\n+                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n+                    };\n+            case FloatType ->\n+                    switch (toType) {\n+                        case IntType -> f2i();\n+                        case LongType -> f2l();\n+                        case DoubleType -> f2d();\n+                        case FloatType -> this;\n+                        case ByteType -> f2i().i2b();\n+                        case CharType -> f2i().i2c();\n+                        case ShortType -> f2i().i2s();\n+                        case BooleanType -> f2i().iconst_1().iand();\n+                        case VoidType, ReferenceType ->\n+                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n+                    };\n+            case VoidType, ReferenceType ->\n+                throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n+        };\n@@ -741,1 +595,1 @@\n-    default CodeBuilder constantInstruction(Opcode opcode, ConstantDesc value) {\n+    default CodeBuilder loadConstant(Opcode opcode, ConstantDesc value) {\n@@ -755,1 +609,1 @@\n-    default CodeBuilder constantInstruction(ConstantDesc value) {\n+    default CodeBuilder loadConstant(ConstantDesc value) {\n@@ -788,20 +642,0 @@\n-    \/**\n-     * Generate a monitor instruction\n-     * @see Opcode.Kind#MONITOR\n-     * @param opcode the monitor instruction opcode\n-     * @return this builder\n-     *\/\n-    default CodeBuilder monitorInstruction(Opcode opcode) {\n-        with(MonitorInstruction.of(opcode));\n-        return null;\n-    }\n-\n-    \/**\n-     * Generate a do nothing instruction\n-     * @return this builder\n-     *\/\n-    default CodeBuilder nopInstruction() {\n-        with(NopInstruction.of());\n-        return this;\n-    }\n-\n@@ -813,1 +647,1 @@\n-        return nopInstruction();\n+        return with(NopInstruction.of());\n@@ -834,2 +668,1 @@\n-        with((LabelImpl) label);\n-        return this;\n+        return with((LabelImpl) label);\n@@ -844,2 +677,1 @@\n-        with(LineNumber.of(line));\n-        return this;\n+        return with(LineNumber.of(line));\n@@ -857,2 +689,1 @@\n-        with(ExceptionCatch.of(handler, start, end, Optional.of(catchType)));\n-        return this;\n+        return with(ExceptionCatch.of(handler, start, end, Optional.of(catchType)));\n@@ -870,2 +701,1 @@\n-        with(ExceptionCatch.of(handler, start, end, catchType));\n-        return this;\n+        return with(ExceptionCatch.of(handler, start, end, catchType));\n@@ -895,2 +725,1 @@\n-        with(ExceptionCatch.of(handler, start, end));\n-        return this;\n+        return with(ExceptionCatch.of(handler, start, end));\n@@ -909,2 +738,1 @@\n-        with(CharacterRange.of(startScope, endScope, characterRangeStart, characterRangeEnd, flags));\n-        return this;\n+        return with(CharacterRange.of(startScope, endScope, characterRangeStart, characterRangeEnd, flags));\n@@ -923,2 +751,1 @@\n-        with(LocalVariable.of(slot, nameEntry, descriptorEntry, startScope, endScope));\n-        return this;\n+        return with(LocalVariable.of(slot, nameEntry, descriptorEntry, startScope, endScope));\n@@ -953,2 +780,1 @@\n-        with(LocalVariableType.of(slot, nameEntry, signatureEntry, startScope, endScope));\n-        return this;\n+        return with(LocalVariableType.of(slot, nameEntry, signatureEntry, startScope, endScope));\n@@ -988,1 +814,1 @@\n-        return arrayLoadInstruction(TypeKind.ReferenceType);\n+        return arrayLoad(TypeKind.ReferenceType);\n@@ -996,1 +822,1 @@\n-        return arrayStoreInstruction(TypeKind.ReferenceType);\n+        return arrayStore(TypeKind.ReferenceType);\n@@ -1005,1 +831,1 @@\n-        return loadInstruction(TypeKind.ReferenceType, slot);\n+        return loadLocal(TypeKind.ReferenceType, slot);\n@@ -1014,1 +840,1 @@\n-        return newReferenceArrayInstruction(classEntry);\n+        return with(NewReferenceArrayInstruction.of(classEntry));\n@@ -1024,1 +850,1 @@\n-        return newReferenceArrayInstruction(constantPool().classEntry(className));\n+        return anewarray(constantPool().classEntry(className));\n@@ -1032,1 +858,1 @@\n-        return returnInstruction(TypeKind.ReferenceType);\n+        return return_(TypeKind.ReferenceType);\n@@ -1040,1 +866,1 @@\n-        return operatorInstruction(Opcode.ARRAYLENGTH);\n+        return with(OperatorInstruction.of(Opcode.ARRAYLENGTH));\n@@ -1049,1 +875,1 @@\n-        return storeInstruction(TypeKind.ReferenceType, slot);\n+        return storeLocal(TypeKind.ReferenceType, slot);\n@@ -1057,1 +883,1 @@\n-        return throwInstruction();\n+        return with(ThrowInstruction.of());\n@@ -1065,1 +891,1 @@\n-        return arrayLoadInstruction(TypeKind.ByteType);\n+        return arrayLoad(TypeKind.ByteType);\n@@ -1073,1 +899,1 @@\n-        return arrayStoreInstruction(TypeKind.ByteType);\n+        return arrayStore(TypeKind.ByteType);\n@@ -1082,1 +908,1 @@\n-        return constantInstruction(Opcode.BIPUSH, b);\n+        return loadConstant(Opcode.BIPUSH, b);\n@@ -1090,1 +916,1 @@\n-        return arrayLoadInstruction(TypeKind.CharType);\n+        return arrayLoad(TypeKind.CharType);\n@@ -1098,1 +924,1 @@\n-        return arrayStoreInstruction(TypeKind.CharType);\n+        return arrayStore(TypeKind.CharType);\n@@ -1107,1 +933,1 @@\n-        return typeCheckInstruction(Opcode.CHECKCAST, type);\n+        return with(TypeCheckInstruction.of(Opcode.CHECKCAST, type));\n@@ -1117,1 +943,1 @@\n-        return typeCheckInstruction(Opcode.CHECKCAST, type);\n+        return checkcast(constantPool().classEntry(type));\n@@ -1125,1 +951,1 @@\n-        return convertInstruction(TypeKind.DoubleType, TypeKind.FloatType);\n+        return with(ConvertInstruction.of(Opcode.D2F));\n@@ -1133,1 +959,1 @@\n-        return convertInstruction(TypeKind.DoubleType, TypeKind.IntType);\n+        return with(ConvertInstruction.of(Opcode.D2I));\n@@ -1141,1 +967,1 @@\n-        return convertInstruction(TypeKind.DoubleType, TypeKind.LongType);\n+        return with(ConvertInstruction.of(Opcode.D2L));\n@@ -1149,1 +975,1 @@\n-        return operatorInstruction(Opcode.DADD);\n+        return with(OperatorInstruction.of(Opcode.DADD));\n@@ -1157,1 +983,1 @@\n-        return arrayLoadInstruction(TypeKind.DoubleType);\n+        return arrayLoad(TypeKind.DoubleType);\n@@ -1165,1 +991,1 @@\n-        return arrayStoreInstruction(TypeKind.DoubleType);\n+        return arrayStore(TypeKind.DoubleType);\n@@ -1173,1 +999,1 @@\n-        return operatorInstruction(Opcode.DCMPG);\n+        return with(OperatorInstruction.of(Opcode.DCMPG));\n@@ -1181,1 +1007,1 @@\n-        return operatorInstruction(Opcode.DCMPL);\n+        return with(OperatorInstruction.of(Opcode.DCMPL));\n@@ -1205,1 +1031,1 @@\n-        return operatorInstruction(Opcode.DDIV);\n+        return with(OperatorInstruction.of(Opcode.DDIV));\n@@ -1214,1 +1040,1 @@\n-        return loadInstruction(TypeKind.DoubleType, slot);\n+        return loadLocal(TypeKind.DoubleType, slot);\n@@ -1222,1 +1048,1 @@\n-        return operatorInstruction(Opcode.DMUL);\n+        return with(OperatorInstruction.of(Opcode.DMUL));\n@@ -1230,1 +1056,1 @@\n-        return operatorInstruction(Opcode.DNEG);\n+        return with(OperatorInstruction.of(Opcode.DNEG));\n@@ -1238,1 +1064,1 @@\n-        return operatorInstruction(Opcode.DREM);\n+        return with(OperatorInstruction.of(Opcode.DREM));\n@@ -1246,1 +1072,1 @@\n-        return returnInstruction(TypeKind.DoubleType);\n+        return return_(TypeKind.DoubleType);\n@@ -1255,1 +1081,1 @@\n-        return storeInstruction(TypeKind.DoubleType, slot);\n+        return storeLocal(TypeKind.DoubleType, slot);\n@@ -1263,1 +1089,1 @@\n-        return operatorInstruction(Opcode.DSUB);\n+        return with(OperatorInstruction.of(Opcode.DSUB));\n@@ -1271,1 +1097,1 @@\n-        return stackInstruction(Opcode.DUP);\n+        return with(StackInstruction.of(Opcode.DUP));\n@@ -1279,1 +1105,1 @@\n-        return stackInstruction(Opcode.DUP2);\n+        return with(StackInstruction.of(Opcode.DUP2));\n@@ -1288,1 +1114,1 @@\n-        return stackInstruction(Opcode.DUP2_X1);\n+        return with(StackInstruction.of(Opcode.DUP2_X1));\n@@ -1297,1 +1123,1 @@\n-        return stackInstruction(Opcode.DUP2_X2);\n+        return with(StackInstruction.of(Opcode.DUP2_X2));\n@@ -1305,1 +1131,1 @@\n-        return stackInstruction(Opcode.DUP_X1);\n+        return with(StackInstruction.of(Opcode.DUP_X1));\n@@ -1313,1 +1139,1 @@\n-        return stackInstruction(Opcode.DUP_X2);\n+        return with(StackInstruction.of(Opcode.DUP_X2));\n@@ -1321,1 +1147,1 @@\n-        return convertInstruction(TypeKind.FloatType, TypeKind.DoubleType);\n+        return with(ConvertInstruction.of(Opcode.F2D));\n@@ -1329,1 +1155,1 @@\n-        return convertInstruction(TypeKind.FloatType, TypeKind.IntType);\n+        return with(ConvertInstruction.of(Opcode.F2I));\n@@ -1337,1 +1163,1 @@\n-        return convertInstruction(TypeKind.FloatType, TypeKind.LongType);\n+        return with(ConvertInstruction.of(Opcode.F2L));\n@@ -1345,1 +1171,1 @@\n-        return operatorInstruction(Opcode.FADD);\n+        return with(OperatorInstruction.of(Opcode.FADD));\n@@ -1353,1 +1179,1 @@\n-        return arrayLoadInstruction(TypeKind.FloatType);\n+        return arrayLoad(TypeKind.FloatType);\n@@ -1361,1 +1187,1 @@\n-        return arrayStoreInstruction(TypeKind.FloatType);\n+        return arrayStore(TypeKind.FloatType);\n@@ -1369,1 +1195,1 @@\n-        return operatorInstruction(Opcode.FCMPG);\n+        return with(OperatorInstruction.of(Opcode.FCMPG));\n@@ -1377,1 +1203,1 @@\n-        return operatorInstruction(Opcode.FCMPL);\n+        return with(OperatorInstruction.of(Opcode.FCMPL));\n@@ -1409,1 +1235,1 @@\n-        return operatorInstruction(Opcode.FDIV);\n+        return with(OperatorInstruction.of(Opcode.FDIV));\n@@ -1418,1 +1244,1 @@\n-        return loadInstruction(TypeKind.FloatType, slot);\n+        return loadLocal(TypeKind.FloatType, slot);\n@@ -1426,1 +1252,1 @@\n-        return operatorInstruction(Opcode.FMUL);\n+        return with(OperatorInstruction.of(Opcode.FMUL));\n@@ -1434,1 +1260,1 @@\n-        return operatorInstruction(Opcode.FNEG);\n+        return with(OperatorInstruction.of(Opcode.FNEG));\n@@ -1442,1 +1268,1 @@\n-        return operatorInstruction(Opcode.FREM);\n+        return with(OperatorInstruction.of(Opcode.FREM));\n@@ -1450,1 +1276,1 @@\n-        return returnInstruction(TypeKind.FloatType);\n+        return return_(TypeKind.FloatType);\n@@ -1459,1 +1285,1 @@\n-        return storeInstruction(TypeKind.FloatType, slot);\n+        return storeLocal(TypeKind.FloatType, slot);\n@@ -1467,1 +1293,1 @@\n-        return operatorInstruction(Opcode.FSUB);\n+        return with(OperatorInstruction.of(Opcode.FSUB));\n@@ -1476,1 +1302,1 @@\n-        return fieldInstruction(Opcode.GETFIELD, ref);\n+        return fieldAccess(Opcode.GETFIELD, ref);\n@@ -1488,1 +1314,1 @@\n-        return fieldInstruction(Opcode.GETFIELD, owner, name, type);\n+        return fieldAccess(Opcode.GETFIELD, owner, name, type);\n@@ -1497,1 +1323,1 @@\n-        return fieldInstruction(Opcode.GETSTATIC, ref);\n+        return fieldAccess(Opcode.GETSTATIC, ref);\n@@ -1509,1 +1335,1 @@\n-        return fieldInstruction(Opcode.GETSTATIC, owner, name, type);\n+        return fieldAccess(Opcode.GETSTATIC, owner, name, type);\n@@ -1518,1 +1344,1 @@\n-        return branchInstruction(Opcode.GOTO, target);\n+        return branch(Opcode.GOTO, target);\n@@ -1527,1 +1353,1 @@\n-        return branchInstruction(Opcode.GOTO_W, target);\n+        return branch(Opcode.GOTO_W, target);\n@@ -1535,1 +1361,1 @@\n-        return convertInstruction(TypeKind.IntType, TypeKind.ByteType);\n+        return with(ConvertInstruction.of(Opcode.I2B));\n@@ -1543,1 +1369,1 @@\n-        return convertInstruction(TypeKind.IntType, TypeKind.CharType);\n+        return with(ConvertInstruction.of(Opcode.I2C));\n@@ -1551,1 +1377,1 @@\n-        return convertInstruction(TypeKind.IntType, TypeKind.DoubleType);\n+        return with(ConvertInstruction.of(Opcode.I2D));\n@@ -1559,1 +1385,1 @@\n-        return convertInstruction(TypeKind.IntType, TypeKind.FloatType);\n+        return with(ConvertInstruction.of(Opcode.I2F));\n@@ -1567,1 +1393,1 @@\n-        return convertInstruction(TypeKind.IntType, TypeKind.LongType);\n+        return with(ConvertInstruction.of(Opcode.I2L));\n@@ -1575,1 +1401,1 @@\n-        return convertInstruction(TypeKind.IntType, TypeKind.ShortType);\n+        return with(ConvertInstruction.of(Opcode.I2S));\n@@ -1583,1 +1409,1 @@\n-        return operatorInstruction(Opcode.IADD);\n+        return with(OperatorInstruction.of(Opcode.IADD));\n@@ -1591,1 +1417,1 @@\n-        return arrayLoadInstruction(TypeKind.IntType);\n+        return arrayLoad(TypeKind.IntType);\n@@ -1599,1 +1425,1 @@\n-        return operatorInstruction(Opcode.IAND);\n+        return with(OperatorInstruction.of(Opcode.IAND));\n@@ -1607,1 +1433,1 @@\n-        return arrayStoreInstruction(TypeKind.IntType);\n+        return arrayStore(TypeKind.IntType);\n@@ -1671,1 +1497,1 @@\n-        return operatorInstruction(Opcode.IDIV);\n+        return with(OperatorInstruction.of(Opcode.IDIV));\n@@ -1680,1 +1506,1 @@\n-        return branchInstruction(Opcode.IF_ACMPEQ, target);\n+        return branch(Opcode.IF_ACMPEQ, target);\n@@ -1689,1 +1515,1 @@\n-        return branchInstruction(Opcode.IF_ACMPNE, target);\n+        return branch(Opcode.IF_ACMPNE, target);\n@@ -1698,1 +1524,1 @@\n-        return branchInstruction(Opcode.IF_ICMPEQ, target);\n+        return branch(Opcode.IF_ICMPEQ, target);\n@@ -1707,1 +1533,1 @@\n-        return branchInstruction(Opcode.IF_ICMPGE, target);\n+        return branch(Opcode.IF_ICMPGE, target);\n@@ -1716,1 +1542,1 @@\n-        return branchInstruction(Opcode.IF_ICMPGT, target);\n+        return branch(Opcode.IF_ICMPGT, target);\n@@ -1725,1 +1551,1 @@\n-        return branchInstruction(Opcode.IF_ICMPLE, target);\n+        return branch(Opcode.IF_ICMPLE, target);\n@@ -1734,1 +1560,1 @@\n-        return branchInstruction(Opcode.IF_ICMPLT, target);\n+        return branch(Opcode.IF_ICMPLT, target);\n@@ -1743,1 +1569,1 @@\n-        return branchInstruction(Opcode.IF_ICMPNE, target);\n+        return branch(Opcode.IF_ICMPNE, target);\n@@ -1752,1 +1578,1 @@\n-        return branchInstruction(Opcode.IFNONNULL, target);\n+        return branch(Opcode.IFNONNULL, target);\n@@ -1761,1 +1587,1 @@\n-        return branchInstruction(Opcode.IFNULL, target);\n+        return branch(Opcode.IFNULL, target);\n@@ -1770,1 +1596,1 @@\n-        return branchInstruction(Opcode.IFEQ, target);\n+        return branch(Opcode.IFEQ, target);\n@@ -1779,1 +1605,1 @@\n-        return branchInstruction(Opcode.IFGE, target);\n+        return branch(Opcode.IFGE, target);\n@@ -1788,1 +1614,1 @@\n-        return branchInstruction(Opcode.IFGT, target);\n+        return branch(Opcode.IFGT, target);\n@@ -1797,1 +1623,1 @@\n-        return branchInstruction(Opcode.IFLE, target);\n+        return branch(Opcode.IFLE, target);\n@@ -1806,1 +1632,1 @@\n-        return branchInstruction(Opcode.IFLT, target);\n+        return branch(Opcode.IFLT, target);\n@@ -1815,1 +1641,1 @@\n-        return branchInstruction(Opcode.IFNE, target);\n+        return branch(Opcode.IFNE, target);\n@@ -1825,1 +1651,1 @@\n-        return incrementInstruction(slot, val);\n+        return with(IncrementInstruction.of(slot, val));\n@@ -1834,1 +1660,1 @@\n-        return loadInstruction(TypeKind.IntType, slot);\n+        return loadLocal(TypeKind.IntType, slot);\n@@ -1842,1 +1668,1 @@\n-        return operatorInstruction(Opcode.IMUL);\n+        return with(OperatorInstruction.of(Opcode.IMUL));\n@@ -1850,1 +1676,1 @@\n-        return operatorInstruction(Opcode.INEG);\n+        return with(OperatorInstruction.of(Opcode.INEG));\n@@ -1858,2 +1684,2 @@\n-    default CodeBuilder instanceof_(ClassEntry target) {\n-        return typeCheckInstruction(Opcode.INSTANCEOF, target);\n+    default CodeBuilder instanceOf(ClassEntry target) {\n+        return with(TypeCheckInstruction.of(Opcode.INSTANCEOF, target));\n@@ -1868,2 +1694,2 @@\n-    default CodeBuilder instanceof_(ClassDesc target) {\n-        return typeCheckInstruction(Opcode.INSTANCEOF, constantPool().classEntry(target));\n+    default CodeBuilder instanceOf(ClassDesc target) {\n+        return instanceOf(constantPool().classEntry(target));\n@@ -1878,1 +1704,1 @@\n-        return invokeDynamicInstruction(ref);\n+        return with(InvokeDynamicInstruction.of(ref));\n@@ -1887,1 +1713,9 @@\n-        return invokeDynamicInstruction(ref);\n+        MethodHandleEntry bsMethod = handleDescToHandleInfo(constantPool(), (DirectMethodHandleDesc) ref.bootstrapMethod());\n+        var cpArgs = ref.bootstrapArgs();\n+        List<LoadableConstantEntry> bsArguments = new ArrayList<>(cpArgs.length);\n+        for (var constantValue : cpArgs) {\n+            bsArguments.add(BytecodeHelpers.constantEntry(constantPool(), constantValue));\n+        }\n+        BootstrapMethodEntry bm = constantPool().bsmEntry(bsMethod, bsArguments);\n+        NameAndTypeEntry nameAndType = constantPool().nameAndTypeEntry(ref.invocationName(), ref.invocationType());\n+        return invokedynamic(constantPool().invokeDynamicEntry(bm, nameAndType));\n@@ -1896,1 +1730,1 @@\n-        return invokeInstruction(Opcode.INVOKEINTERFACE, ref);\n+        return invoke(Opcode.INVOKEINTERFACE, ref);\n@@ -1908,1 +1742,1 @@\n-        return invokeInstruction(Opcode.INVOKEINTERFACE, constantPool().interfaceMethodRefEntry(owner, name, type));\n+        return invoke(Opcode.INVOKEINTERFACE, constantPool().interfaceMethodRefEntry(owner, name, type));\n@@ -1918,1 +1752,1 @@\n-        return invokeInstruction(Opcode.INVOKESPECIAL, ref);\n+        return invoke(Opcode.INVOKESPECIAL, ref);\n@@ -1928,1 +1762,1 @@\n-        return invokeInstruction(Opcode.INVOKESPECIAL, ref);\n+        return invoke(Opcode.INVOKESPECIAL, ref);\n@@ -1941,1 +1775,1 @@\n-        return invokeInstruction(Opcode.INVOKESPECIAL, owner, name, type, false);\n+        return invoke(Opcode.INVOKESPECIAL, owner, name, type, false);\n@@ -1955,1 +1789,1 @@\n-        return invokeInstruction(Opcode.INVOKESPECIAL, owner, name, type, isInterface);\n+        return invoke(Opcode.INVOKESPECIAL, owner, name, type, isInterface);\n@@ -1964,1 +1798,1 @@\n-        return invokeInstruction(Opcode.INVOKESTATIC, ref);\n+        return invoke(Opcode.INVOKESTATIC, ref);\n@@ -1973,1 +1807,1 @@\n-        return invokeInstruction(Opcode.INVOKESTATIC, ref);\n+        return invoke(Opcode.INVOKESTATIC, ref);\n@@ -1985,1 +1819,1 @@\n-        return invokeInstruction(Opcode.INVOKESTATIC, owner, name, type, false);\n+        return invoke(Opcode.INVOKESTATIC, owner, name, type, false);\n@@ -1998,1 +1832,1 @@\n-        return invokeInstruction(Opcode.INVOKESTATIC, owner, name, type, isInterface);\n+        return invoke(Opcode.INVOKESTATIC, owner, name, type, isInterface);\n@@ -2007,1 +1841,1 @@\n-        return invokeInstruction(Opcode.INVOKEVIRTUAL, ref);\n+        return invoke(Opcode.INVOKEVIRTUAL, ref);\n@@ -2019,1 +1853,1 @@\n-        return invokeInstruction(Opcode.INVOKEVIRTUAL, owner, name, type, false);\n+        return invoke(Opcode.INVOKEVIRTUAL, owner, name, type, false);\n@@ -2027,1 +1861,1 @@\n-        return operatorInstruction(Opcode.IOR);\n+        return with(OperatorInstruction.of(Opcode.IOR));\n@@ -2035,1 +1869,1 @@\n-        return operatorInstruction(Opcode.IREM);\n+        return with(OperatorInstruction.of(Opcode.IREM));\n@@ -2043,1 +1877,1 @@\n-        return returnInstruction(TypeKind.IntType);\n+        return return_(TypeKind.IntType);\n@@ -2051,1 +1885,1 @@\n-        return operatorInstruction(Opcode.ISHL);\n+        return with(OperatorInstruction.of(Opcode.ISHL));\n@@ -2059,1 +1893,1 @@\n-        return operatorInstruction(Opcode.ISHR);\n+        return with(OperatorInstruction.of(Opcode.ISHR));\n@@ -2068,1 +1902,1 @@\n-        return storeInstruction(TypeKind.IntType, slot);\n+        return storeLocal(TypeKind.IntType, slot);\n@@ -2076,1 +1910,1 @@\n-        return operatorInstruction(Opcode.ISUB);\n+        return with(OperatorInstruction.of(Opcode.ISUB));\n@@ -2084,1 +1918,1 @@\n-        return operatorInstruction(Opcode.IUSHR);\n+        return with(OperatorInstruction.of(Opcode.IUSHR));\n@@ -2092,1 +1926,1 @@\n-        return operatorInstruction(Opcode.IXOR);\n+        return with(OperatorInstruction.of(Opcode.IXOR));\n@@ -2102,1 +1936,1 @@\n-        return lookupSwitchInstruction(defaultTarget, cases);\n+        return with(LookupSwitchInstruction.of(defaultTarget, cases));\n@@ -2110,1 +1944,1 @@\n-        return convertInstruction(TypeKind.LongType, TypeKind.DoubleType);\n+        return with(ConvertInstruction.of(Opcode.L2D));\n@@ -2118,1 +1952,1 @@\n-        return convertInstruction(TypeKind.LongType, TypeKind.FloatType);\n+        return with(ConvertInstruction.of(Opcode.L2F));\n@@ -2126,1 +1960,1 @@\n-        return convertInstruction(TypeKind.LongType, TypeKind.IntType);\n+        return with(ConvertInstruction.of(Opcode.L2I));\n@@ -2134,1 +1968,1 @@\n-        return operatorInstruction(Opcode.LADD);\n+        return with(OperatorInstruction.of(Opcode.LADD));\n@@ -2142,1 +1976,1 @@\n-        return arrayLoadInstruction(TypeKind.LongType);\n+        return arrayLoad(TypeKind.LongType);\n@@ -2150,1 +1984,1 @@\n-        return operatorInstruction(Opcode.LAND);\n+        return with(OperatorInstruction.of(Opcode.LAND));\n@@ -2158,1 +1992,1 @@\n-        return arrayStoreInstruction(TypeKind.LongType);\n+        return arrayStore(TypeKind.LongType);\n@@ -2166,1 +2000,1 @@\n-        return operatorInstruction(Opcode.LCMP);\n+        return with(OperatorInstruction.of(Opcode.LCMP));\n@@ -2211,1 +2045,1 @@\n-        return operatorInstruction(Opcode.LDIV);\n+        return with(OperatorInstruction.of(Opcode.LDIV));\n@@ -2220,1 +2054,1 @@\n-        return loadInstruction(TypeKind.LongType, slot);\n+        return loadLocal(TypeKind.LongType, slot);\n@@ -2228,1 +2062,1 @@\n-        return operatorInstruction(Opcode.LMUL);\n+        return with(OperatorInstruction.of(Opcode.LMUL));\n@@ -2236,1 +2070,1 @@\n-        return operatorInstruction(Opcode.LNEG);\n+        return with(OperatorInstruction.of(Opcode.LNEG));\n@@ -2244,1 +2078,1 @@\n-        return operatorInstruction(Opcode.LOR);\n+        return with(OperatorInstruction.of(Opcode.LOR));\n@@ -2252,1 +2086,1 @@\n-        return operatorInstruction(Opcode.LREM);\n+        return with(OperatorInstruction.of(Opcode.LREM));\n@@ -2260,1 +2094,1 @@\n-        return returnInstruction(TypeKind.LongType);\n+        return return_(TypeKind.LongType);\n@@ -2268,1 +2102,1 @@\n-        return operatorInstruction(Opcode.LSHL);\n+        return with(OperatorInstruction.of(Opcode.LSHL));\n@@ -2276,1 +2110,1 @@\n-        return operatorInstruction(Opcode.LSHR);\n+        return with(OperatorInstruction.of(Opcode.LSHR));\n@@ -2285,1 +2119,1 @@\n-        return storeInstruction(TypeKind.LongType, slot);\n+        return storeLocal(TypeKind.LongType, slot);\n@@ -2293,1 +2127,1 @@\n-        return operatorInstruction(Opcode.LSUB);\n+        return with(OperatorInstruction.of(Opcode.LSUB));\n@@ -2301,1 +2135,1 @@\n-        return operatorInstruction(Opcode.LUSHR);\n+        return with(OperatorInstruction.of(Opcode.LUSHR));\n@@ -2309,1 +2143,1 @@\n-        return operatorInstruction(Opcode.LXOR);\n+        return with(OperatorInstruction.of(Opcode.LXOR));\n@@ -2317,1 +2151,1 @@\n-        return monitorInstruction(Opcode.MONITORENTER);\n+        return with(MonitorInstruction.of(Opcode.MONITORENTER));\n@@ -2325,1 +2159,1 @@\n-        return monitorInstruction(Opcode.MONITOREXIT);\n+        return with(MonitorInstruction.of(Opcode.MONITOREXIT));\n@@ -2335,1 +2169,1 @@\n-        return newMultidimensionalArrayInstruction(dims, array);\n+        return with(NewMultiArrayInstruction.of(array, dims));\n@@ -2346,1 +2180,1 @@\n-        return newMultidimensionalArrayInstruction(dims, constantPool().classEntry(array));\n+        return multianewarray(constantPool().classEntry(array), dims);\n@@ -2355,1 +2189,1 @@\n-        return newObjectInstruction(clazz);\n+        return with(NewObjectInstruction.of(clazz));\n@@ -2365,1 +2199,1 @@\n-        return newObjectInstruction(constantPool().classEntry(clazz));\n+        return new_(constantPool().classEntry(clazz));\n@@ -2374,1 +2208,1 @@\n-        return newPrimitiveArrayInstruction(typeKind);\n+        return with(NewPrimitiveArrayInstruction.of(typeKind));\n@@ -2382,1 +2216,1 @@\n-        return stackInstruction(Opcode.POP);\n+        return with(StackInstruction.of(Opcode.POP));\n@@ -2390,1 +2224,1 @@\n-        return stackInstruction(Opcode.POP2);\n+        return with(StackInstruction.of(Opcode.POP2));\n@@ -2399,1 +2233,1 @@\n-        return fieldInstruction(Opcode.PUTFIELD, ref);\n+        return fieldAccess(Opcode.PUTFIELD, ref);\n@@ -2411,1 +2245,1 @@\n-        return fieldInstruction(Opcode.PUTFIELD, owner, name, type);\n+        return fieldAccess(Opcode.PUTFIELD, owner, name, type);\n@@ -2420,1 +2254,1 @@\n-        return fieldInstruction(Opcode.PUTSTATIC, ref);\n+        return fieldAccess(Opcode.PUTSTATIC, ref);\n@@ -2432,1 +2266,1 @@\n-        return fieldInstruction(Opcode.PUTSTATIC, owner, name, type);\n+        return fieldAccess(Opcode.PUTSTATIC, owner, name, type);\n@@ -2440,1 +2274,1 @@\n-        return returnInstruction(TypeKind.VoidType);\n+        return return_(TypeKind.VoidType);\n@@ -2448,1 +2282,1 @@\n-        return arrayLoadInstruction(TypeKind.ShortType);\n+        return arrayLoad(TypeKind.ShortType);\n@@ -2456,1 +2290,1 @@\n-        return arrayStoreInstruction(TypeKind.ShortType);\n+        return arrayStore(TypeKind.ShortType);\n@@ -2465,1 +2299,1 @@\n-        return constantInstruction(Opcode.SIPUSH, s);\n+        return loadConstant(Opcode.SIPUSH, s);\n@@ -2473,1 +2307,1 @@\n-        return stackInstruction(Opcode.SWAP);\n+        return with(StackInstruction.of(Opcode.SWAP));\n@@ -2485,1 +2319,1 @@\n-        return tableSwitchInstruction(low, high, defaultTarget, cases);\n+        return with(TableSwitchInstruction.of(low, high, defaultTarget, cases));\n@@ -2502,1 +2336,1 @@\n-        return tableSwitchInstruction(low, high, defaultTarget, cases);\n+        return tableswitch(low, high, defaultTarget, cases);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":264,"deletions":430,"binary":false,"changes":694,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n- * java.lang.classfile.CodeBuilder#invokeInstruction(java.lang.classfile.Opcode,\n+ * java.lang.classfile.CodeBuilder#invoke(java.lang.classfile.Opcode,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-                        b.invokeInstruction(i.opcode(), CD_Bar, i.name().stringValue(), i.typeSymbol(), i.isInterface());\n+                        b.invoke(i.opcode(), CD_Bar, i.name().stringValue(), i.typeSymbol(), i.isInterface());\n@@ -330,1 +330,1 @@\n-                                                              codeBuilder.invokeInstruction(i.opcode(), CD_Bar,\n+                                                              codeBuilder.invoke(i.opcode(), CD_Bar,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -385,1 +385,1 @@\n-                cob.constantInstruction(ifaceDesc);\n+                cob.loadConstant(ifaceDesc);\n@@ -409,1 +409,1 @@\n-                    cob.constantInstruction(mi.desc);\n+                    cob.loadConstant(mi.desc);\n@@ -426,1 +426,1 @@\n-                cob.constantInstruction(proxyDesc);\n+                cob.loadConstant(proxyDesc);\n@@ -431,1 +431,1 @@\n-                cob.constantInstruction(Lookup.ORIGINAL);\n+                cob.loadConstant(Lookup.ORIGINAL);\n@@ -455,1 +455,1 @@\n-                                        bcb.loadInstruction(TypeKind.from(mi.desc.parameterType(j)),\n+                                        bcb.loadLocal(TypeKind.from(mi.desc.parameterType(j)),\n@@ -459,1 +459,1 @@\n-                                    bcb.returnInstruction(TypeKind.from(mi.desc.returnType()));\n+                                    bcb.return_(TypeKind.from(mi.desc.returnType()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -692,1 +692,1 @@\n-                                    .constantInstruction(Opcode.LDC, CD_Proxy)\n+                                    .ldc(CD_Proxy)\n@@ -766,1 +766,1 @@\n-                            cob.constantInstruction(parameterTypes.length)\n+                            cob.loadConstant(parameterTypes.length)\n@@ -770,1 +770,1 @@\n-                                   .constantInstruction(i);\n+                                   .loadConstant(i);\n@@ -814,1 +814,1 @@\n-                cob.loadInstruction(TypeKind.from(type).asLoadable(), slot);\n+                cob.loadLocal(TypeKind.from(type).asLoadable(), slot);\n@@ -833,1 +833,1 @@\n-                   .returnInstruction(TypeKind.from(type).asLoadable());\n+                   .return_(TypeKind.from(type).asLoadable());\n@@ -850,1 +850,1 @@\n-               .constantInstruction(parameterTypes.length)\n+               .loadConstant(parameterTypes.length)\n@@ -856,1 +856,1 @@\n-                   .constantInstruction(i);\n+                   .loadConstant(i);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -420,1 +420,1 @@\n-                cb.constantInstruction(0)\n+                cb.loadConstant(0)\n@@ -460,1 +460,1 @@\n-                            cb.instanceof_(Wrapper.forBasicType(classLabel)\n+                            cb.instanceOf(Wrapper.forBasicType(classLabel)\n@@ -470,1 +470,1 @@\n-                            cb.instanceof_(ConstantDescs.CD_Number);\n+                            cb.instanceOf(ConstantDescs.CD_Number);\n@@ -498,1 +498,1 @@\n-                                cb.instanceof_(ConstantDescs.CD_Character);\n+                                cb.instanceOf(ConstantDescs.CD_Character);\n@@ -519,1 +519,1 @@\n-                            cb.instanceof_(classLabelConstableOpt.orElseThrow());\n+                            cb.instanceOf(classLabelConstableOpt.orElseThrow());\n@@ -523,1 +523,1 @@\n-                            cb.constantInstruction(extraClassLabels.size());\n+                            cb.loadConstant(extraClassLabels.size());\n@@ -542,1 +542,1 @@\n-                    cb.constantInstruction(enumIdx);\n+                    cb.loadConstant(enumIdx);\n@@ -566,1 +566,1 @@\n-                    cb.instanceof_(ConstantDescs.CD_Number);\n+                    cb.instanceOf(ConstantDescs.CD_Number);\n@@ -576,1 +576,1 @@\n-                    cb.instanceof_(ConstantDescs.CD_Character);\n+                    cb.instanceOf(ConstantDescs.CD_Character);\n@@ -592,1 +592,1 @@\n-                        cb.constantInstruction(c ? 1 : 0);\n+                        cb.loadConstant(c ? 1 : 0);\n@@ -594,1 +594,1 @@\n-                        cb.constantInstruction((ConstantDesc) element.caseLabel());\n+                        cb.loadConstant((ConstantDesc) element.caseLabel());\n@@ -610,1 +610,1 @@\n-                cb.constantInstruction(idx);\n+                cb.loadConstant(idx);\n@@ -614,1 +614,1 @@\n-            cb.constantInstruction(cases.size());\n+            cb.loadConstant(cases.size());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                b.branchInstruction(Opcode.GOTO, tryCatchEnd);\n+                b.branch(Opcode.GOTO, tryCatchEnd);\n@@ -79,1 +79,1 @@\n-                b.branchInstruction(Opcode.GOTO, tryCatchEnd);\n+                b.branch(Opcode.GOTO, tryCatchEnd);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CatchBuilderImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-                    cob.fieldInstruction(fai.opcode(), map(fai.owner().asSymbol()),\n+                    cob.fieldAccess(fai.opcode(), map(fai.owner().asSymbol()),\n@@ -237,1 +237,1 @@\n-                    cob.invokeInstruction(ii.opcode(), map(ii.owner().asSymbol()),\n+                    cob.invoke(ii.opcode(), map(ii.owner().asSymbol()),\n@@ -241,1 +241,1 @@\n-                    cob.invokeDynamicInstruction(DynamicCallSiteDesc.of(\n+                    cob.invokedynamic(DynamicCallSiteDesc.of(\n@@ -246,1 +246,1 @@\n-                    cob.newObjectInstruction(map(c.className().asSymbol()));\n+                    cob.new_(map(c.className().asSymbol()));\n@@ -252,1 +252,1 @@\n-                    cob.typeCheckInstruction(c.opcode(), map(c.type().asSymbol()));\n+                    cob.with(TypeCheckInstruction.of(c.opcode(), map(c.type().asSymbol())));\n@@ -263,1 +263,1 @@\n-                    cob.constantInstruction(ldc.opcode(),\n+                    cob.loadConstant(ldc.opcode(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                cob.loadInstruction(\n+                cob.loadLocal(\n@@ -57,1 +57,1 @@\n-                cob.storeInstruction(\n+                cob.storeLocal(\n@@ -61,1 +61,1 @@\n-                cob.incrementInstruction(\n+                cob.iinc(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeLocalsShifterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                cob.branchInstruction(\n+                cob.branch(\n@@ -58,1 +58,1 @@\n-                cob.lookupSwitchInstruction(\n+                cob.lookupswitch(\n@@ -65,1 +65,1 @@\n-                cob.tableSwitchInstruction(\n+                cob.tableswitch(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeRelabelerImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -277,2 +277,2 @@\n-                    cb.constantInstruction(null);\n-                    cb.storeInstruction(ReferenceType, scopeLocal); \/\/ need to initialize all scope locals here in case an exception occurs\n+                    cb.loadConstant(null);\n+                    cb.storeLocal(ReferenceType, scopeLocal); \/\/ need to initialize all scope locals here in case an exception occurs\n@@ -287,1 +287,1 @@\n-            cb.constantInstruction(callingSequence.allocationSize());\n+            cb.loadConstant(callingSequence.allocationSize());\n@@ -295,1 +295,1 @@\n-        cb.storeInstruction(ReferenceType, contextIdx);\n+        cb.storeLocal(ReferenceType, contextIdx);\n@@ -303,1 +303,1 @@\n-            cb.storeInstruction(ReferenceType, returnBufferIdx);\n+            cb.storeLocal(ReferenceType, returnBufferIdx);\n@@ -326,1 +326,1 @@\n-                    cb.loadInstruction(ReferenceType, returnBufferIdx);\n+                    cb.loadLocal(ReferenceType, returnBufferIdx);\n@@ -342,1 +342,1 @@\n-                    cb.storeInstruction(ReferenceType, returnBufferIdx);\n+                    cb.storeLocal(ReferenceType, returnBufferIdx);\n@@ -355,1 +355,1 @@\n-            cb.constantInstruction(CLASS_DATA_DESC);\n+            cb.loadConstant(CLASS_DATA_DESC);\n@@ -357,1 +357,1 @@\n-            cb.loadInstruction(ReferenceType, 0); \/\/ load target arg\n+            cb.loadLocal(ReferenceType, 0); \/\/ load target arg\n@@ -362,1 +362,1 @@\n-            cb.loadInstruction(TypeKind.from(leafArgTypes.get(i)), leafArgSlots[i]);\n+            cb.loadLocal(TypeKind.from(leafArgTypes.get(i)), leafArgSlots[i]);\n@@ -399,1 +399,1 @@\n-                cb.returnInstruction(TypeKind.from(callerMethodType.returnType()));\n+                cb.return_(TypeKind.from(callerMethodType.returnType()));\n@@ -414,1 +414,1 @@\n-            cb.throwInstruction();\n+            cb.athrow();\n@@ -420,1 +420,1 @@\n-                cb.returnInstruction(returnTypeKind);\n+                cb.return_(returnTypeKind);\n@@ -480,1 +480,1 @@\n-        cb.storeInstruction(TypeKind.from(storeType), leafArgSlots[leafArgTypes.size()]);\n+        cb.storeLocal(TypeKind.from(storeType), leafArgSlots[leafArgTypes.size()]);\n@@ -486,1 +486,1 @@\n-        cb.loadInstruction(TypeKind.from(highLevelType), cb.parameterSlot(paramIndex));\n+        cb.loadLocal(TypeKind.from(highLevelType), cb.parameterSlot(paramIndex));\n@@ -508,1 +508,1 @@\n-            cb.loadInstruction(ReferenceType, scopeSlots[i]);\n+            cb.loadLocal(ReferenceType, scopeSlots[i]);\n@@ -517,1 +517,1 @@\n-        cb.storeInstruction(ReferenceType, nextScopeLocal); \/\/ store off one to release later\n+        cb.storeLocal(ReferenceType, nextScopeLocal); \/\/ store off one to release later\n@@ -531,1 +531,1 @@\n-            cb.loadInstruction(ReferenceType, scopeLocal);\n+            cb.loadLocal(ReferenceType, scopeLocal);\n@@ -533,1 +533,1 @@\n-                ifCb.loadInstruction(ReferenceType, scopeLocal);\n+                ifCb.loadLocal(ReferenceType, scopeLocal);\n@@ -542,1 +542,1 @@\n-        cb.storeInstruction(typeKind, retValIdx);\n+        cb.storeLocal(typeKind, retValIdx);\n@@ -547,1 +547,1 @@\n-        cb.loadInstruction(TypeKind.from(loadType), retValIdx);\n+        cb.loadLocal(TypeKind.from(loadType), retValIdx);\n@@ -553,1 +553,1 @@\n-        cb.loadInstruction(ReferenceType, contextIdx);\n+        cb.loadLocal(ReferenceType, contextIdx);\n@@ -561,1 +561,1 @@\n-        cb.loadInstruction(ReferenceType, contextIdx);\n+        cb.loadLocal(ReferenceType, contextIdx);\n@@ -566,1 +566,1 @@\n-        cb.loadInstruction(ReferenceType, contextIdx);\n+        cb.loadLocal(ReferenceType, contextIdx);\n@@ -573,2 +573,2 @@\n-        cb.constantInstruction(boxAddress.size());\n-        cb.constantInstruction(boxAddress.align());\n+        cb.loadConstant(boxAddress.size());\n+        cb.loadConstant(boxAddress.align());\n@@ -587,1 +587,1 @@\n-            cb.loadInstruction(ReferenceType, returnAllocatorIdx);\n+            cb.loadLocal(ReferenceType, returnAllocatorIdx);\n@@ -606,1 +606,1 @@\n-            cb.storeInstruction(storeTypeKind, valueIdx);\n+            cb.storeLocal(storeTypeKind, valueIdx);\n@@ -609,2 +609,2 @@\n-            cb.constantInstruction(offset);\n-            cb.loadInstruction(storeTypeKind, valueIdx);\n+            cb.loadConstant(offset);\n+            cb.loadLocal(storeTypeKind, valueIdx);\n@@ -621,1 +621,1 @@\n-            cb.storeInstruction(LongType, longValueIdx);\n+            cb.storeLocal(LongType, longValueIdx);\n@@ -623,1 +623,1 @@\n-            cb.storeInstruction(ReferenceType, writeAddrIdx);\n+            cb.storeLocal(ReferenceType, writeAddrIdx);\n@@ -650,2 +650,2 @@\n-                cb.loadInstruction(LongType, longValueIdx);\n-                cb.constantInstruction(mask);\n+                cb.loadLocal(LongType, longValueIdx);\n+                cb.loadConstant(mask);\n@@ -654,1 +654,1 @@\n-                    cb.constantInstruction(shiftAmount);\n+                    cb.loadConstant(shiftAmount);\n@@ -660,1 +660,1 @@\n-                cb.storeInstruction(chunkStoreTypeKind, chunkIdx);\n+                cb.storeLocal(chunkStoreTypeKind, chunkIdx);\n@@ -664,1 +664,1 @@\n-                cb.loadInstruction(ReferenceType, writeAddrIdx);\n+                cb.loadLocal(ReferenceType, writeAddrIdx);\n@@ -667,2 +667,2 @@\n-                cb.constantInstruction(writeOffset);\n-                cb.loadInstruction(chunkStoreTypeKind, chunkIdx);\n+                cb.loadConstant(writeOffset);\n+                cb.loadLocal(chunkStoreTypeKind, chunkIdx);\n@@ -693,1 +693,1 @@\n-                cb.storeInstruction(storeTypeKind, valueIdx); \/\/ store away the stored value, need it later\n+                cb.storeLocal(storeTypeKind, valueIdx); \/\/ store away the stored value, need it later\n@@ -696,1 +696,1 @@\n-                cb.loadInstruction(ReferenceType, returnBufferIdx);\n+                cb.loadLocal(ReferenceType, returnBufferIdx);\n@@ -698,2 +698,2 @@\n-                cb.constantInstruction(retBufOffset);\n-                cb.loadInstruction(storeTypeKind, valueIdx);\n+                cb.loadConstant(retBufOffset);\n+                cb.loadLocal(storeTypeKind, valueIdx);\n@@ -716,1 +716,1 @@\n-                cb.loadInstruction(ReferenceType, returnBufferIdx);\n+                cb.loadLocal(ReferenceType, returnBufferIdx);\n@@ -718,1 +718,1 @@\n-                cb.constantInstruction(retBufOffset);\n+                cb.loadConstant(retBufOffset);\n@@ -738,1 +738,1 @@\n-        cb.constantInstruction(shiftLeft.shiftAmount() * Byte.SIZE);\n+        cb.loadConstant(shiftLeft.shiftAmount() * Byte.SIZE);\n@@ -745,1 +745,1 @@\n-        cb.constantInstruction(shiftRight.shiftAmount() * Byte.SIZE);\n+        cb.loadConstant(shiftRight.shiftAmount() * Byte.SIZE);\n@@ -760,1 +760,1 @@\n-                cb.constantInstruction(0xFF);\n+                cb.loadConstant(0xFF);\n@@ -811,1 +811,1 @@\n-            cb.constantInstruction(offset);\n+            cb.loadConstant(offset);\n@@ -817,1 +817,1 @@\n-            cb.storeInstruction(ReferenceType, readAddrIdx);\n+            cb.storeLocal(ReferenceType, readAddrIdx);\n@@ -819,1 +819,1 @@\n-            cb.constantInstruction(0L); \/\/ result\n+            cb.loadConstant(0L); \/\/ result\n@@ -821,1 +821,1 @@\n-            cb.storeInstruction(LongType, resultIdx);\n+            cb.storeLocal(LongType, resultIdx);\n@@ -850,1 +850,1 @@\n-                cb.loadInstruction(ReferenceType, readAddrIdx);\n+                cb.loadLocal(ReferenceType, readAddrIdx);\n@@ -854,1 +854,1 @@\n-                cb.constantInstruction(readOffset);\n+                cb.loadConstant(readOffset);\n@@ -861,1 +861,1 @@\n-                    cb.constantInstruction(shiftAmount);\n+                    cb.loadConstant(shiftAmount);\n@@ -865,1 +865,1 @@\n-                cb.loadInstruction(LongType, resultIdx);\n+                cb.loadLocal(LongType, resultIdx);\n@@ -867,1 +867,1 @@\n-                cb.storeInstruction(LongType, resultIdx);\n+                cb.storeLocal(LongType, resultIdx);\n@@ -873,1 +873,1 @@\n-            cb.loadInstruction(LongType, resultIdx);\n+            cb.loadLocal(LongType, resultIdx);\n@@ -893,1 +893,1 @@\n-        cb.constantInstruction(0L);\n+        cb.loadConstant(0L);\n@@ -900,3 +900,3 @@\n-        cb.storeInstruction(ReferenceType, storeIdx);\n-        cb.constantInstruction(0L);\n-        cb.constantInstruction(size);\n+        cb.storeLocal(ReferenceType, storeIdx);\n+        cb.loadConstant(0L);\n+        cb.loadConstant(size);\n@@ -905,1 +905,1 @@\n-        cb.loadInstruction(ReferenceType, storeIdx);\n+        cb.loadLocal(ReferenceType, storeIdx);\n@@ -910,2 +910,2 @@\n-        cb.constantInstruction(size);\n-        cb.constantInstruction(alignment);\n+        cb.loadConstant(size);\n+        cb.loadConstant(alignment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":65,"deletions":65,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-                    catchAllHandler.throwInstruction();\n+                    catchAllHandler.athrow();\n@@ -582,1 +582,1 @@\n-        blockCodeBuilder.constantInstruction(Opcode.LDC2_W, eventTypeId);\n+        blockCodeBuilder.loadConstant(Opcode.LDC2_W, eventTypeId);\n@@ -592,1 +592,1 @@\n-        blockCodeBuilder.loadInstruction(tk, slotIndex);\n+        blockCodeBuilder.loadLocal(tk, slotIndex);\n@@ -603,1 +603,1 @@\n-            blockCodeBuilder.loadInstruction(tk, slotIndex);\n+            blockCodeBuilder.loadLocal(tk, slotIndex);\n@@ -629,1 +629,1 @@\n-            blockCodeBuilder.loadInstruction(tk, slotIndex);\n+            blockCodeBuilder.loadLocal(tk, slotIndex);\n@@ -696,1 +696,1 @@\n-        blockCodeBuilder.constantInstruction(Opcode.LDC2_W, eventTypeId);\n+        blockCodeBuilder.loadConstant(Opcode.LDC2_W, eventTypeId);\n@@ -758,1 +758,1 @@\n-                codeBuilder.branchInstruction(Opcode.IFNULL, nullLabel);\n+                codeBuilder.if_null(nullLabel);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -671,1 +671,1 @@\n-                    cob -> cob.constantInstruction(hasSplitPackages ? 1 : 0)\n+                    cob -> cob.loadConstant(hasSplitPackages ? 1 : 0)\n@@ -689,1 +689,1 @@\n-                    cob -> cob.constantInstruction(hasIncubatorModules ? 1 : 0)\n+                    cob -> cob.loadConstant(hasIncubatorModules ? 1 : 0)\n@@ -703,1 +703,1 @@\n-                            cob.constantInstruction(moduleInfos.size())\n+                            cob.loadConstant(moduleInfos.size())\n@@ -767,1 +767,1 @@\n-                        cob.constantInstruction(moduleInfos.size())\n+                        cob.loadConstant(moduleInfos.size())\n@@ -773,1 +773,1 @@\n-                           .constantInstruction(moduleInfos.size())\n+                           .loadConstant(moduleInfos.size())\n@@ -800,1 +800,1 @@\n-                                       .constantInstruction(i - dedupVarStart)\n+                                       .loadConstant(i - dedupVarStart)\n@@ -848,1 +848,1 @@\n-                        cob.constantInstruction(moduleInfos.size())\n+                        cob.loadConstant(moduleInfos.size())\n@@ -871,1 +871,1 @@\n-                                   .constantInstruction(index);\n+                                   .loadConstant(index);\n@@ -876,1 +876,1 @@\n-                                   .constantInstruction(minfo.target().targetPlatform())\n+                                   .loadConstant(minfo.target().targetPlatform())\n@@ -899,1 +899,1 @@\n-                        cob.constantInstruction(moduleInfos.size())\n+                        cob.loadConstant(moduleInfos.size())\n@@ -926,1 +926,1 @@\n-                        cob.constantInstruction(moduleInfos.size())\n+                        cob.loadConstant(moduleInfos.size())\n@@ -934,1 +934,1 @@\n-                                   .constantInstruction(index)\n+                                   .loadConstant(index)\n@@ -937,1 +937,1 @@\n-                                   .constantInstruction(minfo.moduleResolution().value())\n+                                   .loadConstant(minfo.moduleResolution().value())\n@@ -1003,1 +1003,1 @@\n-                        cob.constantInstruction(map.size())\n+                        cob.loadConstant(map.size())\n@@ -1012,2 +1012,2 @@\n-                               .constantInstruction(index)\n-                               .constantInstruction(name);\n+                               .loadConstant(index)\n+                               .loadConstant(name);\n@@ -1049,1 +1049,1 @@\n-                cob.constantInstruction(size)\n+                cob.loadConstant(size)\n@@ -1054,2 +1054,2 @@\n-                       .constantInstruction(i)\n-                       .constantInstruction(element)\n+                       .loadConstant(i)\n+                       .loadConstant(element)\n@@ -1065,1 +1065,1 @@\n-                    cob.constantInstruction(element);\n+                    cob.loadConstant(element);\n@@ -1169,1 +1169,1 @@\n-                   .constantInstruction(md.name())\n+                   .loadConstant(md.name())\n@@ -1191,1 +1191,1 @@\n-                   .constantInstruction(value ? 1 : 0)\n+                   .loadConstant(value ? 1 : 0)\n@@ -1203,1 +1203,1 @@\n-                   .constantInstruction(index)\n+                   .loadConstant(index)\n@@ -1205,1 +1205,1 @@\n-                   .constantInstruction(md.hashCode())\n+                   .loadConstant(md.hashCode())\n@@ -1220,1 +1220,1 @@\n-                   .constantInstruction(requires.size())\n+                   .loadConstant(requires.size())\n@@ -1230,1 +1230,1 @@\n-                       .constantInstruction(arrayIndex++);\n+                       .loadConstant(arrayIndex++);\n@@ -1249,1 +1249,1 @@\n-                   .constantInstruction(name);\n+                   .loadConstant(name);\n@@ -1251,1 +1251,1 @@\n-                    cob.constantInstruction(compiledVersion)\n+                    cob.loadConstant(compiledVersion)\n@@ -1270,1 +1270,1 @@\n-                   .constantInstruction(exports.size())\n+                   .loadConstant(exports.size())\n@@ -1275,1 +1275,1 @@\n-                       .constantInstruction(arrayIndex++);\n+                       .loadConstant(arrayIndex++);\n@@ -1305,1 +1305,1 @@\n-                       .constantInstruction(pn)\n+                       .loadConstant(pn)\n@@ -1312,1 +1312,1 @@\n-                       .constantInstruction(pn)\n+                       .loadConstant(pn)\n@@ -1327,1 +1327,1 @@\n-                   .constantInstruction(opens.size())\n+                   .loadConstant(opens.size())\n@@ -1332,1 +1332,1 @@\n-                       .constantInstruction(arrayIndex++);\n+                       .loadConstant(arrayIndex++);\n@@ -1362,1 +1362,1 @@\n-                       .constantInstruction(pn)\n+                       .loadConstant(pn)\n@@ -1369,1 +1369,1 @@\n-                       .constantInstruction(pn)\n+                       .loadConstant(pn)\n@@ -1397,1 +1397,1 @@\n-                   .constantInstruction(provides.size())\n+                   .loadConstant(provides.size())\n@@ -1402,1 +1402,1 @@\n-                       .constantInstruction(arrayIndex++);\n+                       .loadConstant(arrayIndex++);\n@@ -1422,2 +1422,2 @@\n-                cob.constantInstruction(service)\n-                   .constantInstruction(providers.size())\n+                cob.loadConstant(service)\n+                   .loadConstant(providers.size())\n@@ -1428,2 +1428,2 @@\n-                       .constantInstruction(arrayIndex++)\n-                       .constantInstruction(provider)\n+                       .loadConstant(arrayIndex++)\n+                       .loadConstant(provider)\n@@ -1459,1 +1459,1 @@\n-                   .constantInstruction(cn)\n+                   .loadConstant(cn)\n@@ -1471,1 +1471,1 @@\n-                   .constantInstruction(v.toString())\n+                   .loadConstant(v.toString())\n@@ -1480,1 +1480,1 @@\n-                   .constantInstruction(value)\n+                   .loadConstant(value)\n@@ -1534,2 +1534,2 @@\n-                   .constantInstruction(recordedHashes.algorithm())\n-                   .constantInstruction(((4 * recordedHashes.names().size()) \/ 3) + 1)\n+                   .loadConstant(recordedHashes.algorithm())\n+                   .loadConstant(((4 * recordedHashes.names().size()) \/ 3) + 1)\n@@ -1550,1 +1550,1 @@\n-                   .constantInstruction(index)\n+                   .loadConstant(index)\n@@ -1563,2 +1563,2 @@\n-                   .constantInstruction(name)\n-                   .constantInstruction(hash.length)\n+                   .loadConstant(name)\n+                   .loadConstant(hash.length)\n@@ -1568,2 +1568,2 @@\n-                       .constantInstruction(i)\n-                       .constantInstruction((int)hash[i])\n+                       .loadConstant(i)\n+                       .loadConstant((int)hash[i])\n@@ -1732,1 +1732,1 @@\n-                cob.constantInstruction((ConstantDesc)element);\n+                cob.loadConstant((ConstantDesc)element);\n@@ -1775,1 +1775,1 @@\n-                    cob.constantInstruction(elements.size())\n+                    cob.loadConstant(elements.size())\n@@ -1780,1 +1780,1 @@\n-                           .constantInstruction(arrayIndex);\n+                           .loadConstant(arrayIndex);\n@@ -1879,1 +1879,1 @@\n-                                      cob.constantInstruction(map.size());\n+                                      cob.loadConstant(map.size());\n@@ -1885,2 +1885,2 @@\n-                                             .constantInstruction(index)\n-                                             .constantInstruction(entry.getKey())\n+                                             .loadConstant(index)\n+                                             .loadConstant(entry.getKey())\n@@ -1900,1 +1900,1 @@\n-                                      cob.constantInstruction(map.size())\n+                                      cob.loadConstant(map.size())\n@@ -1906,2 +1906,2 @@\n-                                             .constantInstruction(index)\n-                                             .constantInstruction(entry.getValue().replace('\/', '.'))\n+                                             .loadConstant(index)\n+                                             .loadConstant(entry.getValue().replace('\/', '.'))\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":61,"deletions":61,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-                                        cob.constantInstruction(value);\n+                                        cob.loadConstant(value);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-                cob.constantInstruction(name + \" should not be invoked\");\n+                cob.loadConstant(name + \" should not be invoked\");\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ProhibitedMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-                    cob.constantInstruction(osf.getName());\n+                    cob.loadConstant(osf.getName());\n@@ -275,1 +275,1 @@\n-                        cob.constantInstruction(DynamicConstantDesc.ofNamed(\n+                        cob.loadConstant(DynamicConstantDesc.ofNamed(\n@@ -279,1 +279,1 @@\n-                        cob.constantInstruction(osf.getType().describeConstable().orElseThrow());\n+                        cob.loadConstant(osf.getType().describeConstable().orElseThrow());\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/SerialPersistentFieldsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,2 +86,2 @@\n-                                            h.constantInstruction(name);\n-                                            h.constantInstruction(transformId);\n+                                            h.loadConstant(name);\n+                                            h.loadConstant(transformId);\n","filename":"test\/jdk\/java\/lang\/instrument\/NativeMethodPrefixAgent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-                                           cb.constantInstruction(fixedIndex);\n+                                           cb.loadConstant(fixedIndex);\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformAgent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-                                    cb.loadInstruction(kind, ptr);\n+                                    cb.loadLocal(kind, ptr);\n@@ -129,1 +129,1 @@\n-                                cb.invokeInstruction(isStatic ? Opcode.INVOKESTATIC : Opcode.INVOKESPECIAL,\n+                                cb.invoke(isStatic ? Opcode.INVOKESTATIC : Opcode.INVOKESPECIAL,\n@@ -131,1 +131,1 @@\n-                                cb.returnInstruction(TypeKind.from(mt.returnType()));\n+                                cb.return_(TypeKind.from(mt.returnType()));\n","filename":"test\/jdk\/java\/lang\/instrument\/asmlib\/Instrumentor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                cob.constantInstruction(CD_Comparator);\n+                cob.loadConstant(CD_Comparator);\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -393,2 +393,2 @@\n-                    cob.constantInstruction(DynamicConstantDesc.ofNamed(BSM_CLASS_DATA, DEFAULT_NAME, returnDesc));\n-                    cob.returnInstruction(TypeKind.from(returnType));\n+                    cob.loadConstant(DynamicConstantDesc.ofNamed(BSM_CLASS_DATA, DEFAULT_NAME, returnDesc));\n+                    cob.return_(TypeKind.from(returnType));\n@@ -408,2 +408,2 @@\n-                    cob.constantInstruction(DynamicConstantDesc.ofNamed(BSM_CLASS_DATA_AT, DEFAULT_NAME, returnDesc, index));\n-                    cob.returnInstruction(TypeKind.from(returnType));\n+                    cob.loadConstant(DynamicConstantDesc.ofNamed(BSM_CLASS_DATA_AT, DEFAULT_NAME, returnDesc, index));\n+                    cob.return_(TypeKind.from(returnType));\n@@ -420,2 +420,2 @@\n-                    cob.constantInstruction(dynamic);\n-                    cob.returnInstruction(TypeKind.from(returnType));\n+                    cob.loadConstant(dynamic);\n+                    cob.return_(TypeKind.from(returnType));\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/classData\/ClassDataTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                                            codeBuilder.loadInstruction(TypeKind.from(type.parameterType(i)), i);\n+                                            codeBuilder.loadLocal(TypeKind.from(type.parameterType(i)), i);\n@@ -77,1 +77,1 @@\n-                                        codeBuilder.returnInstruction(TypeKind.from(type.returnType()));\n+                                        codeBuilder.return_(TypeKind.from(type.returnType()));\n@@ -119,1 +119,1 @@\n-                                    .returnInstruction(TypeKind.fromDescriptor(type))));\n+                                    .return_(TypeKind.fromDescriptor(type))));\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-\/\/                                                    .instanceof_(ConstantDescs.CD_MethodType)\n+\/\/                                                    .instanceOf(ConstantDescs.CD_MethodType)\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyNestedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-                cob.constantInstruction(MethodHandleDesc.ofMethod(SPECIAL, CD_T1, METHOD_NAME, MTD_int));\n+                cob.loadConstant(MethodHandleDesc.ofMethod(SPECIAL, CD_T1, METHOD_NAME, MTD_int));\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/SpecialStatic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-                        cob.constantInstruction(EXPECTED);\n+                        cob.loadConstant(EXPECTED);\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/invoke\/TestPrivateInterfaceMethodReflect.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                    codeB.constantInstruction(i.opcode(), val);\n+                    codeB.loadConstant(i.opcode(), val);\n","filename":"test\/jdk\/jdk\/classfile\/AdaptCodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                                    codeB.constantInstruction(Opcode.LDC, cde.constantValue());\n+                                    codeB.ldc(cde.constantValue());\n","filename":"test\/jdk\/jdk\/classfile\/BSMTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-                              xb.returnInstruction(TypeKind.VoidType);\n+                              xb.return_();\n@@ -86,1 +86,1 @@\n-                              xb.nopInstruction();\n+                              xb.nop();\n@@ -90,1 +90,1 @@\n-                                  xxb.nopInstruction();\n+                                  xxb.nop();\n@@ -92,1 +92,1 @@\n-                              xb.returnInstruction(TypeKind.VoidType);\n+                              xb.return_();\n@@ -109,1 +109,1 @@\n-                                                    .ifThen(xxb -> xxb.iconst_1().returnInstruction(TypeKind.IntType))\n+                                                    .ifThen(xxb -> xxb.iconst_1().ireturn())\n@@ -111,1 +111,1 @@\n-                                                    .returnInstruction(TypeKind.IntType)));\n+                                                    .ireturn()));\n@@ -128,2 +128,2 @@\n-                                                    .ifThenElse(xxb -> xxb.iconst_1().returnInstruction(TypeKind.IntType),\n-                                                                xxb -> xxb.iconst_2().returnInstruction(TypeKind.IntType))));\n+                                                    .ifThenElse(xxb -> xxb.iconst_1().ireturn(),\n+                                                                xxb -> xxb.iconst_2().ireturn())));\n","filename":"test\/jdk\/jdk\/classfile\/BuilderBlockTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-                tb.constantInstruction(Opcode.LDC, \"IndexOutOfBoundsException\");\n-                tb.returnInstruction(TypeKind.ReferenceType);\n+                tb.ldc(\"IndexOutOfBoundsException\");\n+                tb.areturn();\n@@ -74,2 +74,2 @@\n-                tb.constantInstruction(Opcode.LDC, \"any\");\n-                tb.returnInstruction(TypeKind.ReferenceType);\n+                tb.ldc(\"any\");\n+                tb.areturn();\n@@ -94,1 +94,1 @@\n-                tb.constantInstruction(Opcode.LDC, \"IndexOutOfBoundsException\");\n+                tb.ldc(\"IndexOutOfBoundsException\");\n@@ -99,1 +99,1 @@\n-                tb.constantInstruction(Opcode.LDC, \"any\");\n+                tb.ldc(\"any\");\n@@ -135,2 +135,2 @@\n-                tb.constantInstruction(Opcode.LDC, \"IndexOutOfBoundsException\");\n-                tb.returnInstruction(TypeKind.ReferenceType);\n+                tb.ldc(\"IndexOutOfBoundsException\");\n+                tb.areturn();\n@@ -156,2 +156,2 @@\n-                tb.constantInstruction(Opcode.LDC, \"any\");\n-                tb.returnInstruction(TypeKind.ReferenceType);\n+                tb.ldc(\"any\");\n+                tb.areturn();\n@@ -190,1 +190,1 @@\n-                            xb.constantInstruction(\"S\");\n+                            xb.loadConstant(\"S\");\n@@ -201,2 +201,2 @@\n-                                        tb.constantInstruction(Opcode.LDC, \"any\");\n-                                        tb.returnInstruction(TypeKind.ReferenceType);\n+                                        tb.ldc(\"any\");\n+                                        tb.areturn();\n@@ -208,1 +208,1 @@\n-                            xb.returnInstruction(TypeKind.ReferenceType);\n+                            xb.areturn();\n@@ -221,1 +221,1 @@\n-                            xb.constantInstruction(\"S\");\n+                            xb.loadConstant(\"S\");\n@@ -228,1 +228,1 @@\n-                                tb.constantInstruction(0);\n+                                tb.loadConstant(0);\n@@ -243,1 +243,1 @@\n-                                    tb.constantInstruction(Math.PI);\n+                                    tb.loadConstant(Math.PI);\n@@ -253,1 +253,1 @@\n-                                    tb.constantInstruction(\"REF\");\n+                                    tb.loadConstant(\"REF\");\n@@ -263,1 +263,1 @@\n-                            xb.returnInstruction(TypeKind.ReferenceType);\n+                            xb.areturn();\n@@ -284,1 +284,1 @@\n-                            xb.constantInstruction(\"S\");\n+                            xb.loadConstant(\"S\");\n@@ -289,1 +289,1 @@\n-                                tb.constantInstruction(0);\n+                                tb.loadConstant(0);\n@@ -298,1 +298,1 @@\n-                            xb.returnInstruction(TypeKind.ReferenceType);\n+                            xb.areturn();\n","filename":"test\/jdk\/jdk\/classfile\/BuilderTryCatchTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                            bb.constantInstruction(\"Hello\")\n+                            bb.loadConstant(\"Hello\")\n@@ -55,1 +55,1 @@\n-                            bb.constantInstruction(\"World\")\n+                            bb.loadConstant(\"World\")\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n-                      .withCode(codeb -> codeb.loadInstruction(TypeKind.ReferenceType, 0)\n-                                              .invokeInstruction(INVOKESPECIAL, CD_Object, \"<init>\", MTD_VOID, false)\n-                                              .returnInstruction(VoidType)\n+                      .withCode(codeb -> codeb.aload(0)\n+                                              .invokespecial(CD_Object, \"<init>\", MTD_VOID, false)\n+                                              .return_()\n@@ -65,5 +65,5 @@\n-                                  c0.constantInstruction(LDC, \"string0\")\n-                                    .constantInstruction(LDC, \"string131\")\n-                                    .constantInstruction(LDC, \"string50\")\n-                                    .constantInstruction(-0.0f)\n-                                    .constantInstruction(-0.0d)\n+                                  c0.loadConstant(LDC, \"string0\")\n+                                    .loadConstant(LDC, \"string131\")\n+                                    .loadConstant(LDC, \"string50\")\n+                                    .loadConstant(-0.0f)\n+                                    .loadConstant(-0.0d)\n@@ -71,3 +71,3 @@\n-                                    .constantInstruction(0.0f)\n-                                    .constantInstruction(0.0d)\n-                                    .returnInstruction(VoidType);\n+                                    .loadConstant(0.0f)\n+                                    .loadConstant(0.0d)\n+                                    .return_();\n","filename":"test\/jdk\/jdk\/classfile\/LDCTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -83,9 +83,9 @@\n-                              xb.invokeDynamicInstruction(indy);\n-                              xb.storeInstruction(TypeKind.ReferenceType, 1);\n-                              xb.loadInstruction(TypeKind.ReferenceType, 1);\n-                              xb.loadInstruction(TypeKind.IntType, 0);\n-                              xb.invokeInstruction(Opcode.INVOKEINTERFACE, ClassDesc.of(\"java.util.function.IntUnaryOperator\"),\n-                                                   \"applyAsInt\", MethodTypeDesc.ofDescriptor(\"(I)I\"), true);\n-                              xb.storeInstruction(TypeKind.IntType, 2);\n-                              xb.loadInstruction(TypeKind.IntType, 2);\n-                              xb.returnInstruction(TypeKind.IntType);\n+                              xb.invokedynamic(indy);\n+                              xb.astore(1);\n+                              xb.aload(1);\n+                              xb.iload(0);\n+                              xb.invokeinterface(ClassDesc.of(\"java.util.function.IntUnaryOperator\"),\n+                                                   \"applyAsInt\", MethodTypeDesc.ofDescriptor(\"(I)I\"));\n+                              xb.istore(2);\n+                              xb.iload(2);\n+                              xb.ireturn();\n","filename":"test\/jdk\/jdk\/classfile\/LowAdaptTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -125,3 +125,3 @@\n-                      .withCode(codeb -> codeb.loadInstruction(TypeKind.ReferenceType, 0)\n-                                              .invokeInstruction(INVOKESPECIAL, CD_Object, \"<init>\", MTD_VOID, false)\n-                                              .returnInstruction(VoidType)\n+                      .withCode(codeb -> codeb.aload(0)\n+                                              .invokespecial(CD_Object, \"<init>\", MTD_VOID, false)\n+                                              .return_()\n@@ -149,2 +149,2 @@\n-                                    .constantInstruction(ICONST_1, 1)         \/\/ 0\n-                                    .storeInstruction(TypeKind.IntType, 1)          \/\/ 1\n+                                    .iconst_1()         \/\/ 0\n+                                    .istore(1)          \/\/ 1\n@@ -152,2 +152,2 @@\n-                                    .constantInstruction(ICONST_1, 1)         \/\/ 2\n-                                    .storeInstruction(TypeKind.IntType, 2)          \/\/ 3\n+                                    .iconst_1()         \/\/ 2\n+                                    .istore(2)          \/\/ 3\n@@ -155,9 +155,9 @@\n-                                    .loadInstruction(TypeKind.IntType, 2)           \/\/ 4\n-                                    .constantInstruction(BIPUSH, 10)         \/\/ 5\n-                                    .branchInstruction(IF_ICMPGE, loopEnd) \/\/ 6\n-                                    .loadInstruction(TypeKind.IntType, 1)           \/\/ 7\n-                                    .loadInstruction(TypeKind.IntType, 2)           \/\/ 8\n-                                    .operatorInstruction(IMUL)             \/\/ 9\n-                                    .storeInstruction(TypeKind.IntType, 1)          \/\/ 10\n-                                    .incrementInstruction(2, 1)    \/\/ 11\n-                                    .branchInstruction(GOTO, loopTop)     \/\/ 12\n+                                    .iload(2)           \/\/ 4\n+                                    .bipush(10)         \/\/ 5\n+                                    .if_icmpge(loopEnd) \/\/ 6\n+                                    .iload(1)           \/\/ 7\n+                                    .iload(2)           \/\/ 8\n+                                    .imul()             \/\/ 9\n+                                    .istore(1)          \/\/ 10\n+                                    .iinc(2, 1)    \/\/ 11\n+                                    .goto_(loopTop)     \/\/ 12\n@@ -165,3 +165,3 @@\n-                                    .fieldInstruction(GETSTATIC, CD_System, \"out\", CD_PrintStream)   \/\/ 13\n-                                    .loadInstruction(TypeKind.IntType, 1)\n-                                    .invokeInstruction(INVOKEVIRTUAL, CD_PrintStream, \"println\", MTD_INT_VOID, false)  \/\/ 15\n+                                    .getstatic(CD_System, \"out\", CD_PrintStream)   \/\/ 13\n+                                    .iload(1)\n+                                    .invokevirtual(CD_PrintStream, \"println\", MTD_INT_VOID)  \/\/ 15\n@@ -169,1 +169,1 @@\n-                                    .returnInstruction(VoidType)\n+                                    .return_()\n@@ -239,3 +239,3 @@\n-                      .withCode(codeb -> codeb.loadInstruction(TypeKind.ReferenceType, 0)\n-                                              .invokeInstruction(INVOKESPECIAL, CD_Object, \"<init>\", MTD_VOID, false)\n-                                              .returnInstruction(VoidType)\n+                      .withCode(codeb -> codeb.aload(0)\n+                                              .invokespecial(CD_Object, \"<init>\", MTD_VOID, false)\n+                                              .return_()\n@@ -266,4 +266,4 @@\n-                                        .newObjectInstruction(ClassDesc.of(\"java.util.ArrayList\"))\n-                                        .stackInstruction(DUP)\n-                                        .invokeInstruction(INVOKESPECIAL, CD_ArrayList, \"<init>\", MTD_VOID, false)\n-                                        .storeInstruction(TypeKind.ReferenceType, 2)\n+                                        .new_(ClassDesc.of(\"java.util.ArrayList\"))\n+                                        .dup()\n+                                        .invokespecial(CD_ArrayList, \"<init>\", MTD_VOID, false)\n+                                        .astore(2)\n@@ -272,2 +272,2 @@\n-                                        .loadInstruction(TypeKind.ReferenceType, 1)\n-                                        .returnInstruction(TypeKind.ReferenceType)\n+                                        .aload(1)\n+                                        .areturn()\n","filename":"test\/jdk\/jdk\/classfile\/LvtTest.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -71,3 +71,3 @@\n-                                  .withCode(codeb -> codeb.loadInstruction(TypeKind.ReferenceType, 0)\n-                                                          .invokeInstruction(INVOKESPECIAL, CD_Object, \"<init>\", MTD_VOID, false)\n-                                                          .returnInstruction(TypeKind.VoidType)\n+                                  .withCode(codeb -> codeb.aload(0)\n+                                                          .invokespecial(CD_Object, \"<init>\", MTD_VOID, false)\n+                                                          .return_()\n@@ -83,4 +83,4 @@\n-                                                c0.constantInstruction(ICONST_1, 1)         \/\/ 0\n-                                                  .storeInstruction(TypeKind.IntType, fac)        \/\/ 1\n-                                                  .constantInstruction(ICONST_1, 1)         \/\/ 2\n-                                                  .storeInstruction(TypeKind.IntType, i)          \/\/ 3\n+                                                c0.iconst_1()         \/\/ 0\n+                                                  .istore(fac)        \/\/ 1\n+                                                  .iconst_1()         \/\/ 2\n+                                                  .istore(i)          \/\/ 3\n@@ -88,9 +88,9 @@\n-                                                  .loadInstruction(TypeKind.IntType, i)           \/\/ 4\n-                                                  .constantInstruction(BIPUSH, 10)         \/\/ 5\n-                                                  .branchInstruction(IF_ICMPGE, loopEnd) \/\/ 6\n-                                                  .loadInstruction(TypeKind.IntType, fac)         \/\/ 7\n-                                                  .loadInstruction(TypeKind.IntType, i)           \/\/ 8\n-                                                  .operatorInstruction(IMUL)             \/\/ 9\n-                                                  .storeInstruction(TypeKind.IntType, fac)        \/\/ 10\n-                                                  .incrementInstruction(i, 1)    \/\/ 11\n-                                                  .branchInstruction(GOTO, loopTop)     \/\/ 12\n+                                                  .iload(i)           \/\/ 4\n+                                                  .bipush(10)         \/\/ 5\n+                                                  .if_icmpge(loopEnd) \/\/ 6\n+                                                  .iload(fac)         \/\/ 7\n+                                                  .iload(i)           \/\/ 8\n+                                                  .imul()             \/\/ 9\n+                                                  .istore(fac)        \/\/ 10\n+                                                  .iinc(i, 1)         \/\/ 11\n+                                                  .goto_(loopTop)     \/\/ 12\n@@ -98,4 +98,4 @@\n-                                                  .fieldInstruction(GETSTATIC, CD_System, \"out\", CD_PrintStream)   \/\/ 13\n-                                                  .loadInstruction(TypeKind.IntType, fac)\n-                                                  .invokeInstruction(INVOKEVIRTUAL, CD_PrintStream, \"println\", MTD_INT_VOID, false)  \/\/ 15\n-                                                  .returnInstruction(TypeKind.VoidType);\n+                                                  .getstatic(CD_System, \"out\", CD_PrintStream)   \/\/ 13\n+                                                  .iload(fac)\n+                                                  .invokevirtual(CD_PrintStream, \"println\", MTD_INT_VOID)  \/\/ 15\n+                                                  .return_();\n","filename":"test\/jdk\/jdk\/classfile\/OneToOneTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-                                              codeb -> codeb.constantInstruction(opcode, (ConstantDesc) constant))));\n+                                              codeb -> codeb.loadConstant(opcode, (ConstantDesc) constant))));\n@@ -127,1 +127,1 @@\n-                                codeb -> codeb.constantInstruction(opcode, (ConstantDesc)constant))));\n+                                codeb -> codeb.loadConstant(opcode, (ConstantDesc)constant))));\n","filename":"test\/jdk\/jdk\/classfile\/OpcodesValidationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-                cob.constantInstruction(CD_int);\n+                cob.loadConstant(CD_int);\n","filename":"test\/jdk\/jdk\/classfile\/PrimitiveClassConstantTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-                                    cob.branchInstruction(sample.jumpCode, target);\n+                                    cob.branch(sample.jumpCode, target);\n@@ -216,1 +216,1 @@\n-                                        cob.nopInstruction();\n+                                        cob.nop();\n@@ -231,1 +231,1 @@\n-                                        cob.nopInstruction();\n+                                        cob.nop();\n@@ -236,1 +236,1 @@\n-                                    cob.branchInstruction(sample.jumpCode, target);\n+                                    cob.branch(sample.jumpCode, target);\n@@ -247,1 +247,1 @@\n-                                            cob.nopInstruction();\n+                                            cob.nop();\n","filename":"test\/jdk\/jdk\/classfile\/ShortJumpsFixTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-                                           cb.constantInstruction(0.0d);\n+                                           cb.loadConstant(0.0d);\n@@ -292,1 +292,1 @@\n-                                           cb.constantInstruction(0);\n+                                           cb.loadConstant(0);\n@@ -307,1 +307,1 @@\n-                                           cb.constantInstruction(0.0f);\n+                                           cb.loadConstant(0.0f);\n@@ -310,1 +310,1 @@\n-                                           cb.constantInstruction(0);\n+                                           cb.loadConstant(0);\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                            thb.constantInstruction(ClassDesc.of(\"Phee\"));\n+                            thb.loadConstant(ClassDesc.of(\"Phee\"));\n@@ -94,1 +94,1 @@\n-                    stcb.constantInstruction(ClassDesc.of(\"Phee\")); \/\/stack instruction on unknown stack cause tracking lost\n+                    stcb.loadConstant(ClassDesc.of(\"Phee\")); \/\/stack instruction on unknown stack cause tracking lost\n","filename":"test\/jdk\/jdk\/classfile\/StackTrackerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,3 +61,3 @@\n-                            .withCode(codeb -> codeb.loadInstruction(TypeKind.ReferenceType, 0)\n-                                    .invokeInstruction(INVOKESPECIAL, CD_Object, \"<init>\", MTD_VOID, false)\n-                                    .returnInstruction(VoidType)\n+                            .withCode(codeb -> codeb.aload(0)\n+                                    .invokespecial(CD_Object, \"<init>\", MTD_VOID, false)\n+                                    .return_()\n","filename":"test\/jdk\/jdk\/classfile\/TempConstantPoolBuilderTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-                b.constantInstruction(y);\n+                b.loadConstant(y);\n","filename":"test\/jdk\/jdk\/classfile\/TransformTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,2 +199,2 @@\n-                                                     mb -> mb.withCode(cb -> cb.constantInstruction(s)\n-                                                                               .returnInstruction(VoidType))));\n+                                                     mb -> mb.withCode(cb -> cb.loadConstant(s)\n+                                                                               .return_())));\n","filename":"test\/jdk\/jdk\/classfile\/Utf8EntryTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-                      .withCode(codeb -> codeb.loadInstruction(TypeKind.ReferenceType, 0)\n-                                              .invokeInstruction(INVOKESPECIAL, CD_Object, \"<init>\",\n+                      .withCode(codeb -> codeb.aload(0)\n+                                              .invokespecial(CD_Object, \"<init>\",\n@@ -60,1 +60,1 @@\n-                                              .returnInstruction(VoidType)\n+                                              .return_()\n@@ -69,4 +69,4 @@\n-                                          .constantInstruction(ICONST_1, 1)         \/\/ 0\n-                                          .storeInstruction(TypeKind.IntType, 1)          \/\/ 1\n-                                          .constantInstruction(ICONST_1, 1)         \/\/ 2\n-                                          .storeInstruction(TypeKind.IntType, 2)          \/\/ 3\n+                                          .iconst_1()         \/\/ 0\n+                                          .istore(1)          \/\/ 1\n+                                          .iconst_1()         \/\/ 2\n+                                          .istore(2)          \/\/ 3\n@@ -74,9 +74,9 @@\n-                                          .loadInstruction(TypeKind.IntType, 2)           \/\/ 4\n-                                          .constantInstruction(BIPUSH, 10)         \/\/ 5\n-                                          .branchInstruction(IF_ICMPGE, loopEnd) \/\/ 6\n-                                          .loadInstruction(TypeKind.IntType, 1)           \/\/ 7\n-                                          .loadInstruction(TypeKind.IntType, 2)           \/\/ 8\n-                                          .operatorInstruction(IMUL)             \/\/ 9\n-                                          .storeInstruction(TypeKind.IntType, 1)          \/\/ 10\n-                                          .incrementInstruction(2, 1)    \/\/ 11\n-                                          .branchInstruction(GOTO, loopTop)     \/\/ 12\n+                                          .iload(2)           \/\/ 4\n+                                          .bipush(10)         \/\/ 5\n+                                          .if_icmpge(loopEnd) \/\/ 6\n+                                          .iload(1)           \/\/ 7\n+                                          .iload(2)           \/\/ 8\n+                                          .imul()             \/\/ 9\n+                                          .istore(1)          \/\/ 10\n+                                          .iinc(2, 1)    \/\/ 11\n+                                          .goto_(loopTop)     \/\/ 12\n@@ -84,4 +84,4 @@\n-                                          .fieldInstruction(GETSTATIC, TestConstants.CD_System, \"out\", TestConstants.CD_PrintStream)   \/\/ 13\n-                                          .loadInstruction(TypeKind.IntType, 1)\n-                                          .invokeInstruction(INVOKEVIRTUAL, TestConstants.CD_PrintStream, \"println\", TestConstants.MTD_INT_VOID, false)  \/\/ 15\n-                                          .returnInstruction(VoidType);\n+                                          .getstatic(TestConstants.CD_System, \"out\", TestConstants.CD_PrintStream)   \/\/ 13\n+                                          .iload(1)\n+                                          .invokevirtual(TestConstants.CD_PrintStream, \"println\", TestConstants.MTD_INT_VOID)  \/\/ 15\n+                                          .return_();\n@@ -99,3 +99,3 @@\n-                      .withCode(codeb -> codeb.loadInstruction(ReferenceType, 0)\n-                                              .invokeInstruction(INVOKESPECIAL, CD_Object, \"<init>\", MTD_VOID, false)\n-                                              .returnInstruction(VoidType)\n+                      .withCode(codeb -> codeb.aload(0)\n+                                              .invokespecial(CD_Object, \"<init>\", MTD_VOID, false)\n+                                              .return_()\n@@ -110,4 +110,4 @@\n-                                          .constantInstruction(ICONST_1, 1)        \/\/ 0\n-                                          .storeInstruction(IntType, 1)          \/\/ 1\n-                                          .constantInstruction(ICONST_1, 1)        \/\/ 2\n-                                          .storeInstruction(IntType, 2)          \/\/ 3\n+                                          .iconst_1()        \/\/ 0\n+                                          .istore(1)          \/\/ 1\n+                                          .iconst_1()        \/\/ 2\n+                                          .istore(2)          \/\/ 3\n@@ -115,9 +115,9 @@\n-                                          .loadInstruction(IntType, 2)           \/\/ 4\n-                                          .constantInstruction(BIPUSH, 10)         \/\/ 5\n-                                          .branchInstruction(IF_ICMPGE, loopEnd) \/\/ 6\n-                                          .loadInstruction(IntType, 1)           \/\/ 7\n-                                          .loadInstruction(IntType, 2)           \/\/ 8\n-                                          .operatorInstruction(IMUL)             \/\/ 9\n-                                          .storeInstruction(IntType, 1)          \/\/ 10\n-                                          .incrementInstruction(2, 1)    \/\/ 11\n-                                          .branchInstruction(GOTO, loopTop)     \/\/ 12\n+                                          .iload(2)           \/\/ 4\n+                                          .bipush(10)         \/\/ 5\n+                                          .if_icmpge(loopEnd) \/\/ 6\n+                                          .iload(1)           \/\/ 7\n+                                          .iload(2)           \/\/ 8\n+                                          .imul()             \/\/ 9\n+                                          .istore(1)          \/\/ 10\n+                                          .iinc(2, 1)    \/\/ 11\n+                                          .goto_(loopTop)     \/\/ 12\n@@ -125,4 +125,4 @@\n-                                          .fieldInstruction(GETSTATIC, TestConstants.CD_System, \"out\", TestConstants.CD_PrintStream)   \/\/ 13\n-                                          .loadInstruction(IntType, 1)\n-                                          .invokeInstruction(INVOKEVIRTUAL, TestConstants.CD_PrintStream, \"println\", TestConstants.MTD_INT_VOID, false)  \/\/ 15\n-                                          .returnInstruction(VoidType);\n+                                          .getstatic(TestConstants.CD_System, \"out\", TestConstants.CD_PrintStream)   \/\/ 13\n+                                          .iload(1)\n+                                          .invokevirtual(TestConstants.CD_PrintStream, \"println\", TestConstants.MTD_INT_VOID)  \/\/ 15\n+                                          .return_();\n","filename":"test\/jdk\/jdk\/classfile\/WriteTest.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-                    codeB.nopInstruction();\n+                    codeB.nop();\n@@ -268,1 +268,1 @@\n-                    codeB.nopInstruction();\n+                    codeB.nop();\n@@ -280,1 +280,1 @@\n-                        if (ci.constantValue() instanceof Integer i) codeB.constantInstruction(i + 1);\n+                        if (ci.constantValue() instanceof Integer i) codeB.loadConstant(i + 1);\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExampleGallery.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-                cb.loadInstruction(im.typeKind(), im.slot());\n+                cb.loadLocal(im.typeKind(), im.slot());\n@@ -40,1 +40,1 @@\n-                cb.storeInstruction(im.typeKind(), im.slot());\n+                cb.storeLocal(im.typeKind(), im.slot());\n@@ -42,1 +42,1 @@\n-                cb.incrementInstruction(im.slot(), im.constant());\n+                cb.iinc(im.slot(), im.constant());\n@@ -44,1 +44,1 @@\n-                cb.branchInstruction(im.opcode(), im.target());\n+                cb.branch(im.opcode(), im.target());\n@@ -46,1 +46,1 @@\n-                cb.lookupSwitchInstruction(im.defaultTarget(), im.cases());\n+                cb.lookupswitch(im.defaultTarget(), im.cases());\n@@ -48,1 +48,1 @@\n-                cb.tableSwitchInstruction(im.lowValue(), im.highValue(), im.defaultTarget(), im.cases());\n+                cb.tableswitch(im.lowValue(), im.highValue(), im.defaultTarget(), im.cases());\n@@ -50,1 +50,1 @@\n-                cb.returnInstruction(im.typeKind());\n+                cb.return_(im.typeKind());\n@@ -52,1 +52,1 @@\n-                cb.throwInstruction();\n+                cb.athrow();\n@@ -54,1 +54,1 @@\n-                cb.fieldInstruction(im.opcode(), im.owner().asSymbol(), im.name().stringValue(), im.typeSymbol());\n+                cb.fieldAccess(im.opcode(), im.owner().asSymbol(), im.name().stringValue(), im.typeSymbol());\n@@ -56,1 +56,1 @@\n-                cb.invokeInstruction(im.opcode(), im.owner().asSymbol(), im.name().stringValue(), im.typeSymbol(), im.isInterface());\n+                cb.invoke(im.opcode(), im.owner().asSymbol(), im.name().stringValue(), im.typeSymbol(), im.isInterface());\n@@ -58,1 +58,1 @@\n-                cb.invokeDynamicInstruction(DynamicCallSiteDesc.of(im.bootstrapMethod(), im.name().stringValue(), MethodTypeDesc.ofDescriptor(im.type().stringValue()), im.bootstrapArgs().toArray(ConstantDesc[]::new)));\n+                cb.invokedynamic(DynamicCallSiteDesc.of(im.bootstrapMethod(), im.name().stringValue(), MethodTypeDesc.ofDescriptor(im.type().stringValue()), im.bootstrapArgs().toArray(ConstantDesc[]::new)));\n@@ -60,1 +60,1 @@\n-                cb.newObjectInstruction(im.className().asSymbol());\n+                cb.new_(im.className().asSymbol());\n@@ -62,1 +62,1 @@\n-                cb.newPrimitiveArrayInstruction(im.typeKind());\n+                cb.newarray(im.typeKind());\n@@ -64,1 +64,1 @@\n-                cb.newReferenceArrayInstruction(im.componentType());\n+                cb.anewarray(im.componentType());\n@@ -66,1 +66,1 @@\n-                cb.newMultidimensionalArrayInstruction(im.dimensions(), im.arrayType());\n+                cb.multianewarray(im.arrayType(), im.dimensions());\n@@ -68,1 +68,1 @@\n-                cb.typeCheckInstruction(im.opcode(), im.type().asSymbol());\n+                cb.with(TypeCheckInstruction.of(im.opcode(), im.type().asSymbol()));\n@@ -70,1 +70,1 @@\n-                cb.arrayLoadInstruction(im.typeKind());\n+                cb.arrayLoad(im.typeKind());\n@@ -72,1 +72,1 @@\n-                cb.arrayStoreInstruction(im.typeKind());\n+                cb.arrayStore(im.typeKind());\n@@ -74,1 +74,1 @@\n-                cb.stackInstruction(im.opcode());\n+                cb.with(StackInstruction.of(im.opcode()));\n@@ -76,1 +76,1 @@\n-                cb.convertInstruction(im.fromType(), im.toType());\n+                cb.conversion(im.fromType(), im.toType());\n@@ -78,1 +78,1 @@\n-                cb.operatorInstruction(im.opcode());\n+                cb.with(OperatorInstruction.of(im.opcode()));\n@@ -80,1 +80,1 @@\n-                cb.constantInstruction(im.opcode(), im.constantValue());\n+                cb.loadConstant(im.opcode(), im.constantValue());\n@@ -82,1 +82,1 @@\n-                cb.monitorInstruction(im.opcode());\n+                cb.with(MonitorInstruction.of(im.opcode()));\n@@ -84,1 +84,1 @@\n-                cb.nopInstruction();\n+                cb.nop();\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/InstructionModelToCodeBuilder.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-                                                        else cob.constantInstruction(null);\n+                                                        else cob.loadConstant(null);\n@@ -140,1 +140,1 @@\n-                                                            else cob.constantInstruction(iVal);\n+                                                            else cob.loadConstant(iVal);\n@@ -145,1 +145,1 @@\n-                                                            else cob.constantInstruction(lVal);\n+                                                            else cob.loadConstant(lVal);\n@@ -151,1 +151,1 @@\n-                                                            else cob.constantInstruction(fVal);\n+                                                            else cob.loadConstant(fVal);\n@@ -156,1 +156,1 @@\n-                                                            else cob.constantInstruction(dVal);\n+                                                            else cob.loadConstant(dVal);\n@@ -158,1 +158,1 @@\n-                                                        default -> cob.constantInstruction(i.constantValue());\n+                                                        default -> cob.loadConstant(i.constantValue());\n@@ -407,1 +407,1 @@\n-                                                            case INSTANCEOF -> cob.instanceof_(i.type().asSymbol());\n+                                                            case INSTANCEOF -> cob.instanceOf(i.type().asSymbol());\n@@ -413,1 +413,1 @@\n-                                                            case INSTANCEOF -> cob.instanceof_(i.type());\n+                                                            case INSTANCEOF -> cob.instanceOf(i.type());\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-                                xb.nopInstruction();\n+                                xb.nop();\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                b.invokeInstruction(opcode, i.owner().asSymbol(),\n+                b.invoke(opcode, i.owner().asSymbol(),\n","filename":"test\/jdk\/jdk\/lambda\/separate\/ClassToInterfaceConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                    cob.constantInstruction(100L);\n+                    cob.loadConstant(100L);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/LazyStaticColdStart.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-                    cob.fieldInstruction(i.opcode(), i.owner().asSymbol(), i.name().stringValue(), i.typeSymbol());\n+                    cob.fieldAccess(i.opcode(), i.owner().asSymbol(), i.name().stringValue(), i.typeSymbol());\n@@ -98,1 +98,1 @@\n-                    cob.invokeInstruction(i.opcode(), i.owner().asSymbol(), i.name().stringValue(), i.typeSymbol(), i.isInterface());\n+                    cob.invoke(i.opcode(), i.owner().asSymbol(), i.name().stringValue(), i.typeSymbol(), i.isInterface());\n@@ -106,1 +106,1 @@\n-                    cob.typeCheckInstruction(i.opcode(), i.type().asSymbol());\n+                    cob.with(TypeCheckInstruction.of(i.opcode(), i.type().asSymbol()));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RebuildMethodBodies.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-                                xb.nopInstruction();\n+                                xb.nop();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,3 +144,3 @@\n-                      .withCode(codeb -> codeb.loadInstruction(TypeKind.ReferenceType, 0)\n-                                              .invokeInstruction(INVOKESPECIAL, CD_Object, INIT_NAME, MTD_void, false)\n-                                              .returnInstruction(VoidType)\n+                      .withCode(codeb -> codeb.loadLocal(TypeKind.ReferenceType, 0)\n+                                              .invoke(INVOKESPECIAL, CD_Object, INIT_NAME, MTD_void, false)\n+                                              .return_(VoidType)\n@@ -157,4 +157,4 @@\n-                                  c0.constantInstruction(ICONST_1, 1)         \/\/ 0\n-                                    .storeInstruction(IntType, vFac)        \/\/ 1\n-                                    .constantInstruction(ICONST_1, 1)         \/\/ 2\n-                                    .storeInstruction(IntType, vI)          \/\/ 3\n+                                  c0.iconst_1()         \/\/ 0\n+                                    .istore(vFac)       \/\/ 1\n+                                    .iconst_1()         \/\/ 2\n+                                    .istore(vI)         \/\/ 3\n@@ -162,9 +162,9 @@\n-                                    .loadInstruction(IntType, vI)           \/\/ 4\n-                                    .constantInstruction(BIPUSH, 10)         \/\/ 5\n-                                    .branchInstruction(IF_ICMPGE, loopEnd) \/\/ 6\n-                                    .loadInstruction(IntType, vFac)         \/\/ 7\n-                                    .loadInstruction(IntType, vI)           \/\/ 8\n-                                    .operatorInstruction(IMUL)             \/\/ 9\n-                                    .storeInstruction(IntType, vFac)        \/\/ 10\n-                                    .incrementInstruction(vI, 1)    \/\/ 11\n-                                    .branchInstruction(GOTO, loopTop)     \/\/ 12\n+                                    .iload(vI)          \/\/ 4\n+                                    .bipush(10)         \/\/ 5\n+                                    .if_icmpge(loopEnd) \/\/ 6\n+                                    .iload(vFac)        \/\/ 7\n+                                    .iload(vI)          \/\/ 8\n+                                    .imul()             \/\/ 9\n+                                    .istore(vFac)       \/\/ 10\n+                                    .iinc(vI, 1)        \/\/ 11\n+                                    .goto_(loopTop)     \/\/ 12\n@@ -172,4 +172,4 @@\n-                                    .fieldInstruction(GETSTATIC, CD_System, \"out\", CD_PrintStream)   \/\/ 13\n-                                    .loadInstruction(IntType, vFac)\n-                                    .invokeInstruction(INVOKEVIRTUAL, CD_PrintStream, \"println\", MTD_void_int, false)  \/\/ 15\n-                                    .returnInstruction(VoidType);\n+                                    .getstatic(CD_System, \"out\", CD_PrintStream) \/\/ 13\n+                                    .iload(vFac)\n+                                    .invokevirtual(CD_PrintStream, \"println\", MTD_void_int) \/\/ 15\n+                                    .return_();\n@@ -192,3 +192,3 @@\n-                          mb -> mb.withCode(codeb -> codeb.loadInstruction(ReferenceType, 0)\n-                                                          .invokeInstruction(INVOKESPECIAL, CD_Object, INIT_NAME, MTD_void, false)\n-                                                          .returnInstruction(VoidType)\n+                          mb -> mb.withCode(codeb -> codeb.loadLocal(ReferenceType, 0)\n+                                                          .invokespecial(CD_Object, INIT_NAME, MTD_void, false)\n+                                                          .return_()\n@@ -205,4 +205,4 @@\n-                                  c0.constantInstruction(ICONST_1, 1)        \/\/ 0\n-                                    .storeInstruction(IntType, 1)          \/\/ 1\n-                                    .constantInstruction(ICONST_1, 1)        \/\/ 2\n-                                    .storeInstruction(IntType, 2)          \/\/ 3\n+                                  c0.iconst_1()         \/\/ 0\n+                                    .istore(1)          \/\/ 1\n+                                    .iconst_1()         \/\/ 2\n+                                    .istore(2)          \/\/ 3\n@@ -210,9 +210,9 @@\n-                                    .loadInstruction(IntType, 2)           \/\/ 4\n-                                    .constantInstruction(BIPUSH, 10)         \/\/ 5\n-                                    .branchInstruction(IF_ICMPGE, loopEnd) \/\/ 6\n-                                    .loadInstruction(IntType, 1)           \/\/ 7\n-                                    .loadInstruction(IntType, 2)           \/\/ 8\n-                                    .operatorInstruction(IMUL)             \/\/ 9\n-                                    .storeInstruction(IntType, 1)          \/\/ 10\n-                                    .incrementInstruction(2, 1)    \/\/ 11\n-                                    .branchInstruction(GOTO, loopTop)     \/\/ 12\n+                                    .iload(2)           \/\/ 4\n+                                    .bipush(10)         \/\/ 5\n+                                    .if_icmpge(loopEnd) \/\/ 6\n+                                    .iload(1)           \/\/ 7\n+                                    .iload(2)           \/\/ 8\n+                                    .imul()             \/\/ 9\n+                                    .istore(1)          \/\/ 10\n+                                    .iinc(2, 1)         \/\/ 11\n+                                    .goto_(loopTop)     \/\/ 12\n@@ -220,4 +220,4 @@\n-                                    .fieldInstruction(GETSTATIC, CD_System, \"out\", CD_PrintStream)   \/\/ 13\n-                                    .loadInstruction(IntType, 1)\n-                                    .invokeInstruction(INVOKEVIRTUAL, CD_PrintStream, \"println\", MTD_void_int, false)  \/\/ 15\n-                                    .returnInstruction(VoidType);\n+                                    .getstatic(CD_System, \"out\", CD_PrintStream)  \/\/ 13\n+                                    .iload(1)\n+                                    .invokevirtual(CD_PrintStream, \"println\", MTD_void_int)  \/\/ 15\n+                                    .return_();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Write.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"}]}