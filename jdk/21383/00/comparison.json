{"files":[{"patch":"@@ -494,1 +494,1 @@\n-  LogDecorators decorators;\n+  LogDecorators decorators = selections.get_default_decorators();\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+const LogLevelType AnyLevel = LogLevelType::NotMentioned;\n+#define UNDECORATED_DEFAULTS \\\n+  UNDECORATED_DEFAULT(AnyLevel, LOG_TAGS(jit, inlining))\n+\n@@ -48,0 +52,7 @@\n+const LogDecorators::DefaultUndecoratedSelection LogDecorators::default_decorators[] = {\n+#define UNDECORATED_DEFAULT(level, ...) LogDecorators::DefaultUndecoratedSelection(level, __VA_ARGS__),\n+  UNDECORATED_DEFAULTS\n+#undef UNDECORATED_TAGSET\n+};\n+const size_t LogDecorators::number_of_default_decorators = sizeof(default_decorators) \/ sizeof(LogDecorators::DefaultUndecoratedSelection);\n+\n@@ -60,1 +71,1 @@\n-    _decorators = DefaultDecoratorsMask;\n+    \/\/ No decorators supplied, keep default decorators\n@@ -96,0 +107,13 @@\n+\n+bool LogDecorators::has_disabled_default_decorators(const LogSelection& selection, const DefaultUndecoratedSelection* defaults, size_t defaults_count) {\n+  for (size_t i = 0; i < defaults_count; ++i) {\n+    auto current_default = defaults[i];\n+    const bool ignore_level = current_default.selection().level() == AnyLevel;\n+    const bool level_matches = ignore_level || selection.level() == current_default.selection().level();\n+    if (!level_matches) continue;\n+    if (selection.superset_of(current_default.selection())) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n","filename":"src\/hotspot\/share\/logging\/logDecorators.cpp","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"logging\/logSelection.hpp\"\n@@ -62,0 +63,1 @@\n+  friend class TestLogDecorators;\n@@ -68,1 +70,27 @@\n-    Invalid\n+    Invalid,\n+    NoDecorators\n+  };\n+\n+  class DefaultUndecoratedSelection {\n+    friend class TestLogDecorators;\n+    LogSelection _selection;\n+\n+    DefaultUndecoratedSelection() : _selection(LogSelection::Invalid) {}\n+\n+  public:\n+    template<typename... Tags>\n+    DefaultUndecoratedSelection(LogLevelType level, LogTagType first, Tags... rest) : _selection(LogSelection::Invalid) {\n+      static_assert(1 + sizeof...(rest) <= LogTag::MaxTags + 1,\n+                    \"Too many tags specified!\");\n+\n+      LogTagType tag_arr[LogTag::MaxTags + 1] = { first, rest... };\n+\n+      if (sizeof...(rest) == LogTag::MaxTags) {\n+        assert(tag_arr[sizeof...(rest)] == LogTag::__NO_TAG,\n+               \"Too many tags specified! Can only have up to \" SIZE_FORMAT \" tags in a tag set.\", LogTag::MaxTags);\n+      }\n+\n+      _selection = LogSelection(tag_arr, false, level);\n+    }\n+\n+    const LogSelection& selection() const { return _selection; }\n@@ -74,1 +102,3 @@\n-  static const uint DefaultDecoratorsMask = (1 << uptime_decorator) | (1 << level_decorator) | (1 << tags_decorator);\n+  static const uint defaultsMask = (1 << uptime_decorator) | (1 << level_decorator) | (1 << tags_decorator);\n+  static const LogDecorators::DefaultUndecoratedSelection default_decorators[];\n+  static const size_t number_of_default_decorators;\n@@ -80,2 +110,0 @@\n-  constexpr LogDecorators(uint mask) : _decorators(mask) {\n-  }\n@@ -87,2 +115,3 @@\n-  LogDecorators() : _decorators(DefaultDecoratorsMask) {\n-  }\n+  constexpr LogDecorators(uint mask) : _decorators(mask) {}\n+\n+  LogDecorators() : _decorators(defaultsMask) {}\n@@ -102,0 +131,15 @@\n+  template<typename... Decorators>\n+  static uint mask_from_decorators(LogDecorators::Decorator first, Decorators... rest) {\n+    uint bitmask = 0;\n+    LogDecorators::Decorator decorators[1 + sizeof...(rest)] = { first, rest... };\n+    for (const LogDecorators::Decorator decorator : decorators) {\n+      if (decorator == NoDecorators) return 0;\n+      bitmask |= mask(decorator);\n+    }\n+    return bitmask;\n+  }\n+\n+  \/\/ Check if we have some default decorators for a given LogSelection. If that is the case,\n+  \/\/ the output parameter mask will contain the defaults-specified decorators mask\n+  static bool has_disabled_default_decorators(const LogSelection& selection, const DefaultUndecoratedSelection* defaults = default_decorators, size_t defaults_count = number_of_default_decorators);\n+\n","filename":"src\/hotspot\/share\/logging\/logDecorators.hpp","additions":50,"deletions":6,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -72,0 +72,17 @@\n+bool LogSelection::superset_of(const LogSelection& other) const {\n+  bool match;\n+  for (size_t i = 0; i < other.ntags(); ++i) {\n+    match = false;\n+    for (size_t j = 0; j < _ntags; ++j) {\n+      if (other._tags[i] == _tags[j]) {\n+        match = true;\n+        break;\n+      }\n+    }\n+\n+    if (!match) return false;\n+  }\n+\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+  bool superset_of(const LogSelection& ref) const;\n+\n","filename":"src\/hotspot\/share\/logging\/logSelection.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,8 @@\n+LogDecorators LogSelectionList::get_default_decorators() const {\n+  for (size_t i = 0; i < _nselections; ++i) {\n+    if (!LogDecorators::has_disabled_default_decorators(_selections[i])) {\n+      return LogDecorators();\n+    }\n+  }\n+  return LogDecorators(0);\n+}\n@@ -94,1 +102,1 @@\n-  for (size_t i= 0; i < _nselections; i++) {\n+  for (size_t i = 0; i < _nselections; i++) {\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+\n+  LogDecorators get_default_decorators() const;\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"logging\/logTag.hpp\"\n+#include \"precompiled.hpp\"\n+#include \"jvm.h\"\n+#include \"logging\/logDecorators.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"unittest.hpp\"\n+\n+\n+class TestLogDecorators : public testing::Test {\n+  using DefaultDecorator = LogDecorators::DefaultUndecoratedSelection;\n+  using LD = LogDecorators;\n+\n+  static const size_t defaults_cnt = 3;\n+  LD::DefaultUndecoratedSelection defaults[defaults_cnt] = {\n+    { LogLevelType::Trace, LogTagType::_gc },\n+    { LogLevelType::Trace, LogTagType::_jit },\n+    { LogLevelType::NotMentioned, LogTagType::_ref },\n+  };\n+\n+public:\n+  void test_default_decorators() {\n+    LogTagType tags[LogTag::MaxTags] = { LogTag::__NO_TAG, LogTag::__NO_TAG, LogTag::__NO_TAG, LogTag::__NO_TAG, LogTag::__NO_TAG };\n+    bool result;\n+\n+    \/\/ If a -Xlog selection matches one of the undecorated defaults, the default decorators will be disabled\n+    tags[0] = LogTagType::_jit;\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Trace), defaults, defaults_cnt);\n+    EXPECT_TRUE(result);\n+\n+\n+    \/\/ If a -Xlog selection contains one of the undecorated defaults, the default decorators will be disabled\n+    tags[0] = LogTagType::_jit;\n+    tags[1] = LogTagType::_inlining;\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Trace), defaults, defaults_cnt);\n+    EXPECT_TRUE(result);\n+\n+\n+    \/\/ Wildcards are ignored\n+    tags[0] = LogTag::_compilation;\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, true, LogLevelType::Debug), defaults, defaults_cnt);\n+    EXPECT_FALSE(result);\n+\n+\n+    \/\/ If there is no level match, default decorators are kept\n+    tags[0] = LogTagType::_gc;\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Info), defaults, defaults_cnt);\n+    EXPECT_FALSE(result);\n+\n+\n+    \/\/ If NotMentioned is specified, it will match every level and so default decorators will never be added if there is a positive tagset match\n+    tags[0] = LogTagType::_ref;\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Error), defaults, defaults_cnt);\n+    EXPECT_TRUE(result);\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Warning), defaults, defaults_cnt);\n+    EXPECT_TRUE(result);\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Info), defaults, defaults_cnt);\n+    EXPECT_TRUE(result);\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Debug), defaults, defaults_cnt);\n+    EXPECT_TRUE(result);\n+    result = LD::has_disabled_default_decorators(LogSelection(tags, false, LogLevelType::Trace), defaults, defaults_cnt);\n+    EXPECT_TRUE(result);\n+  }\n+\n+  void test_mask_from_decorators() {\n+    \/\/ Single tags should yield 2^{decorator_value_in_enum}\n+    EXPECT_EQ(LD::mask_from_decorators(LD::time_decorator), (uint)(1 << LD::time_decorator));\n+    EXPECT_EQ(LD::mask_from_decorators(LD::pid_decorator),  (uint)(1 << LD::pid_decorator));\n+    EXPECT_EQ(LD::mask_from_decorators(LD::tid_decorator),  (uint)(1 << LD::tid_decorator));\n+    EXPECT_EQ(LD::mask_from_decorators(LD::tags_decorator), (uint)(1 << LD::tags_decorator));\n+\n+\n+    \/\/ NoDecorators should yield an empty mask\n+    EXPECT_EQ(LD::mask_from_decorators(LD::NoDecorators), 0U);\n+\n+\n+    \/\/ Combinations of decorators should fill the mask accordingly to their bitmask positions\n+    uint mask = (1 << LD::time_decorator) | (1 << LD::uptimemillis_decorator) | (1 << LD::tid_decorator);\n+    EXPECT_EQ(LD::mask_from_decorators(LD::time_decorator, LD::uptimemillis_decorator, LD::tid_decorator), mask);\n+\n+\n+    \/\/ If a combination has NoDecorators in it, it takes precedence and the mask is zero\n+    EXPECT_EQ(LD::mask_from_decorators(LD::time_decorator, LD::NoDecorators, LD::tid_decorator), 0U);\n+  }\n+};\n+\n+TEST_VM_F(TestLogDecorators, MaskFromDecorators) {\n+  test_mask_from_decorators();\n+}\n+\n+TEST_VM_F(TestLogDecorators, HasDefaultDecorators) {\n+  test_default_decorators();\n+}\n","filename":"test\/hotspot\/gtest\/logging\/test_logDefaultDecorators.cpp","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.flagless\n+ * @summary Running -Xlog with tags which have default decorators should pick them\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver DefaultLogDecoratorsTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import java.util.List;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+\n+public class DefaultLogDecoratorsTest {\n+    private static Pattern DECORATED_LINE = Pattern.compile(\"(\\\\[.+\\\\])+ .*\");\n+\n+    private static void doTest(boolean shouldHave, String... xlog) throws Exception {\n+        List<String> argsList = new ArrayList<String>();\n+        for (String string : xlog) {\n+            argsList.add(string);\n+        }\n+        argsList.add(InnerClass.class.getName());\n+        String[] args = argsList.toArray(new String[0]);\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(args);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        List<String> allLines = Files.readAllLines(Path.of(\"decorators.log\"));\n+        for (String line : allLines) {\n+            if (DECORATED_LINE.matcher(line).find() == !shouldHave) {\n+                throw new RuntimeException(\"Logging should \" + (shouldHave ? \"\" : \"not \") + \"contain decorators!\");\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ JIT inlining logging, as per defaults, shall have all decorators disabled\n+        doTest(false, \"-Xlog:jit+inlining*=trace:decorators.log\");\n+\n+\n+        \/\/ If decorators are specified, the defaults are not taken into account\n+        doTest(true, \"-Xlog:jit+inlining*=trace:decorators.log:time\");\n+\n+\n+        \/\/ Even if decorators are only supplied for another tag(s), the defaults are not taken into account\n+        doTest(true, \"-Xlog:jit+inlining*=trace:decorators.log\", \"-Xlog:gc*=info:decorators.log:time\");\n+\n+\n+        \/\/ Defaults are not taken into account also when another tag implicitly imposes the \"standard\" defaults\n+        doTest(true, \"-Xlog:jit+inlining*=trace:decorators.log\", \"-Xlog:gc*=info:decorators.log\");\n+\n+\n+        \/\/ Other logging shall not be affected by a tag with defaults\n+        doTest(true, \"-Xlog:gc*=trace:decorators.log\");\n+    }\n+\n+    public static class InnerClass {\n+        public static void main(String[] args) throws Exception {\n+            System.out.println(\"DefaultLogDecorators test\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/DefaultLogDecoratorsTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}