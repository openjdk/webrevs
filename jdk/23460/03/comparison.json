{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import java.security.ProtectionDomain;\n@@ -72,0 +71,2 @@\n+import jdk.internal.vm.annotation.DontInline;\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -179,0 +180,1 @@\n+    @ForceInline\n@@ -189,0 +191,1 @@\n+    @ForceInline\n@@ -198,0 +201,1 @@\n+    @ForceInline\n@@ -208,0 +212,1 @@\n+    @ForceInline\n@@ -227,0 +232,1 @@\n+    @ForceInline\n@@ -256,0 +262,1 @@\n+    @ForceInline\n@@ -272,0 +279,1 @@\n+        @ForceInline\n@@ -273,1 +281,1 @@\n-            return UNSAFE.getBooleanVolatile(target, FIELD_OFFSET);\n+            return target.enableNativeAccess || UNSAFE.getBooleanVolatile(target, FIELD_OFFSET);\n@@ -285,0 +293,1 @@\n+    @ForceInline\n@@ -290,0 +299,1 @@\n+    @ForceInline\n@@ -296,21 +306,22 @@\n-            String mod = isNamed() ? \"module \" + getName() : \"an unnamed module\";\n-            if (currentClass != null) {\n-                \/\/ try to extract location of the current class (e.g. jar or folder)\n-                CodeSource cs = currentClass.getProtectionDomain().getCodeSource();\n-                if (cs != null) {\n-                    URL url = cs.getLocation();\n-                    if (url != null) {\n-                        mod += \" (\" + url + \")\";\n-                    }\n-                }\n-            }\n-            if (illegalNativeAccess == ModuleBootstrap.IllegalNativeAccess.DENY) {\n-                throw new IllegalCallerException(\"Illegal native access from \" + mod);\n-            } else if (EnableNativeAccess.trySetEnableNativeAccess(target)) {\n-                \/\/ warn and set flag, so that only one warning is reported per module\n-                String cls = owner.getName();\n-                String mtd = cls + \"::\" + methodName;\n-                String modflag = isNamed() ? getName() : \"ALL-UNNAMED\";\n-                String caller = currentClass != null ? currentClass.getName() : \"code\";\n-                if (jni) {\n-                    VM.initialErr().printf(\"\"\"\n+            ensureNativeAccessSlowPath(owner, methodName, currentClass, jni, target, illegalNativeAccess);\n+        }\n+    }\n+\n+    @DontInline\n+    void ensureNativeAccessSlowPath(Class<?> owner,\n+                                    String methodName,\n+                                    Class<?> currentClass,\n+                                    boolean jni,\n+                                    Module target,\n+                                    ModuleBootstrap.IllegalNativeAccess illegalNativeAccess) {\n+        String modDeclaredLabel = modDeclaredLabel(currentClass);\n+        if (illegalNativeAccess == ModuleBootstrap.IllegalNativeAccess.DENY) {\n+            throw new IllegalCallerException(\"Illegal native access from \" + modDeclaredLabel);\n+        } else if (EnableNativeAccess.trySetEnableNativeAccess(target)) {\n+            \/\/ warn and set flag, so that only one warning is reported per module\n+            String cls = owner.getName();\n+            String mtd = cls + \"::\" + methodName;\n+            String modFlag = isNamed() ? getName() : \"ALL-UNNAMED\";\n+            String caller = currentClass != null ? currentClass.getName() : \"code\";\n+            if (jni) {\n+                VM.initialErr().printf(\"\"\"\n@@ -321,3 +332,3 @@\n-                            %n\"\"\", cls, mtd, mod, modflag);\n-                } else {\n-                    VM.initialErr().printf(\"\"\"\n+                            %n\"\"\", cls, mtd, modDeclaredLabel, modFlag);\n+            } else {\n+                VM.initialErr().printf(\"\"\"\n@@ -328,1 +339,14 @@\n-                            %n\"\"\", cls, mtd, caller, mod, modflag);\n+                            %n\"\"\", cls, mtd, caller, modDeclaredLabel, modFlag);\n+            }\n+        }\n+    }\n+\n+    private String modDeclaredLabel(Class<?> currentClass) {\n+        String label = isNamed() ? \"module \" + getName() : \"an unnamed module\";\n+        if (currentClass != null) {\n+            \/\/ try to extract location of the current class (e.g. jar or folder)\n+            CodeSource cs = currentClass.getProtectionDomain().getCodeSource();\n+            if (cs != null) {\n+                URL url = cs.getLocation();\n+                if (url != null) {\n+                    label += \" (\" + url + \")\";\n@@ -332,0 +356,1 @@\n+        return label;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":53,"deletions":28,"binary":false,"changes":81,"status":"modified"}]}