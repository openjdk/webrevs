{"files":[{"patch":"@@ -800,5 +800,13 @@\n-<p>Avoid variables with static storage duration and non-constant\n-initialization, or with non-trivial destruction. Such variables can lead\n-to the so-called \"static initialization order fiasco\", or its dual on\n-the destruction size. Some of the alternatives used in HotSpot\n-include:<\/p>\n+<p>Variables with static storage duration and <em>dynamic\n+initialization<\/em> <a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf\">C++14\n+3.6.2<\/a>). should be avoided, unless an implementation is permitted to\n+perform the initialization as a static initialization. The order in\n+which dynamic initializations occur is incompletely specified.\n+Initialization order problems can be difficult to deal with and lead to\n+surprises.<\/p>\n+<p>Variables with static storage duration and non-trivial destructors\n+should be avoided. HotSpot doesn't generally try to cleanup on exit, and\n+running destructors at exit can lead to problems.<\/p>\n+<p>Some of the approaches used in HotSpot to avoid dynamic\n+initialization include:<\/p>\n@@ -1223,6 +1231,0 @@\n-<li><p>Avoid non-local variables with non-constexpr initialization. In\n-particular, avoid variables with types requiring non-trivial\n-initialization or destruction. Initialization order problems can be\n-difficult to deal with and lead to surprises, as can destruction\n-ordering. HotSpot doesn't generally try to cleanup on exit, and running\n-destructors at exit can also lead to problems.<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -775,4 +775,13 @@\n-Avoid variables with static storage duration and non-constant initialization,\n-or with non-trivial destruction.  Such variables can lead to the so-called\n-\"static initialization order fiasco\", or its dual on the destruction size.\n-Some of the alternatives used in HotSpot include:\n+Variables with static storage duration and _dynamic initialization_\n+[C++14 3.6.2](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf)).\n+should be avoided, unless an implementation is permitted to perform the\n+initialization as a static initialization. The order in which dynamic\n+initializations occur is incompletely specified.  Initialization order\n+problems can be difficult to deal with and lead to surprises.\n+\n+Variables with static storage duration and non-trivial destructors should be\n+avoided. HotSpot doesn't generally try to cleanup on exit, and running\n+destructors at exit can lead to problems.\n+\n+Some of the approaches used in HotSpot to avoid dynamic initialization\n+include:\n@@ -1219,7 +1228,0 @@\n-* Avoid non-local variables with non-constexpr initialization.\n-In particular, avoid variables with types requiring non-trivial\n-initialization or destruction.  Initialization order problems can be\n-difficult to deal with and lead to surprises, as can destruction\n-ordering.  HotSpot doesn't generally try to cleanup on exit, and\n-running destructors at exit can also lead to problems.\n-\n","filename":"doc\/hotspot-style.md","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}