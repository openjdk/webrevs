{"files":[{"patch":"@@ -80,0 +80,3 @@\n+<li><a href=\"#initializing-variables-with-static-storage-duration\"\n+id=\"toc-initializing-variables-with-static-storage-duration\">Initializing\n+variables with static storage duration<\/a><\/li>\n@@ -794,0 +797,27 @@\n+<h3\n+id=\"initializing-variables-with-static-storage-duration\">Initializing\n+variables with static storage duration<\/h3>\n+<p>Variables with static storage duration and <em>dynamic\n+initialization<\/em> <a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf\">C++14\n+3.6.2<\/a>). should be avoided, unless an implementation is permitted to\n+perform the initialization as a static initialization. The order in\n+which dynamic initializations occur is incompletely specified.\n+Initialization order problems can be difficult to deal with and lead to\n+surprises.<\/p>\n+<p>Variables with static storage duration and non-trivial destructors\n+should be avoided. HotSpot doesn't generally try to cleanup on exit, and\n+running destructors at exit can lead to problems.<\/p>\n+<p>Some of the approaches used in HotSpot to avoid dynamic\n+initialization include:<\/p>\n+<ul>\n+<li><p>Use the <code>Deferred&lt;T&gt;<\/code> class template. Add a call\n+to its initialization function at an appropriate place during VM\n+initialization. The underlying object is never destroyed.<\/p><\/li>\n+<li><p>For objects of class type, use a variable whose value is a\n+pointer to the class, initialized to <code>nullptr<\/code>. Provide an\n+initialization function that sets the variable to a dynamically\n+allocated object. Add a call to that function at an appropriate place\n+during VM initialization. Such objects are usually never\n+destroyed.<\/p><\/li>\n+<\/ul>\n@@ -1201,6 +1231,0 @@\n-<li><p>Avoid non-local variables with non-constexpr initialization. In\n-particular, avoid variables with types requiring non-trivial\n-initialization or destruction. Initialization order problems can be\n-difficult to deal with and lead to surprises, as can destruction\n-ordering. HotSpot doesn't generally try to cleanup on exit, and running\n-destructors at exit can also lead to problems.<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":30,"deletions":6,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -773,0 +773,26 @@\n+### Initializing variables with static storage duration\n+\n+Variables with static storage duration and _dynamic initialization_\n+[C++14 3.6.2](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf)).\n+should be avoided, unless an implementation is permitted to perform the\n+initialization as a static initialization. The order in which dynamic\n+initializations occur is incompletely specified.  Initialization order\n+problems can be difficult to deal with and lead to surprises.\n+\n+Variables with static storage duration and non-trivial destructors should be\n+avoided. HotSpot doesn't generally try to cleanup on exit, and running\n+destructors at exit can lead to problems.\n+\n+Some of the approaches used in HotSpot to avoid dynamic initialization\n+include:\n+\n+* Use the `Deferred<T>` class template. Add a call to its initialization\n+function at an appropriate place during VM initialization. The underlying\n+object is never destroyed.\n+\n+* For objects of class type, use a variable whose value is a pointer to the\n+class, initialized to `nullptr`. Provide an initialization function that sets\n+the variable to a dynamically allocated object. Add a call to that function at\n+an appropriate place during VM initialization. Such objects are usually never\n+destroyed.\n+\n@@ -1202,7 +1228,0 @@\n-* Avoid non-local variables with non-constexpr initialization.\n-In particular, avoid variables with types requiring non-trivial\n-initialization or destruction.  Initialization order problems can be\n-difficult to deal with and lead to surprises, as can destruction\n-ordering.  HotSpot doesn't generally try to cleanup on exit, and\n-running destructors at exit can also lead to problems.\n-\n","filename":"doc\/hotspot-style.md","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"}]}