{"files":[{"patch":"@@ -81,0 +81,1 @@\n+import jdk.internal.util.ModifiedUtf;\n@@ -470,0 +471,1 @@\n+        validateClassNameLength(className);\n@@ -552,0 +554,1 @@\n+        validateClassNameLength(name);\n@@ -601,0 +604,3 @@\n+        if (!ModifiedUtf.classNameLengthIsValid(name)) {\n+            return null;\n+        }\n@@ -4151,1 +4157,9 @@\n-}\n+\n+    \/\/ Validates the length of the class name and throws an exception if it exceeds the maximum allowed length.\n+    private static void validateClassNameLength(String name) throws ClassNotFoundException {\n+        if (!ModifiedUtf.classNameLengthIsValid(name)) {\n+            throw new ClassNotFoundException(\n+                    \"Class name length exceeds limit of \" + ModifiedUtf.JAVA_CLASSNAME_MAX_LEN);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+    \/\/Max length in Modified UTF-8 bytes for class names.(see max_symbol_length in symbol.hpp)\n+    public static final int JAVA_CLASSNAME_MAX_LEN = 65535;\n+\n@@ -71,0 +74,18 @@\n+\n+    \/**\n+     * Checks whether the length of the class name in Modified UTF-8 bytes exceeds the maximum allowed.\n+     * @param name class name\n+     *\/\n+    @ForceInline\n+    public static boolean classNameLengthIsValid(String name) {\n+        \/\/ Quick approximation: each char can be at most 3 bytes in Modified UTF-8.\n+        \/\/ If the string is short enough, it definitely fits.\n+        int nameLen = name.length();\n+        if (nameLen <= JAVA_CLASSNAME_MAX_LEN \/ 3) {\n+            return true;\n+        }\n+        \/\/ Check exact Modified UTF-8 length.\n+        \/\/ The check utfLen >= nameLen ensures we don't incorrectly return true in case of int overflow.\n+        int utfLen = utfLen(name, 0);\n+        return utfLen >= nameLen && utfLen <= JAVA_CLASSNAME_MAX_LEN;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ModifiedUtf.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8310242\n+ * @bug 8310242 8328874\n@@ -40,0 +40,1 @@\n+    private static final int JAVA_CLASSNAME_MAX_LEN = 65535;\n@@ -93,0 +94,17 @@\n+    @Test\n+    void testTooLongName() {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        String tooLongName = \"A\".repeat(JAVA_CLASSNAME_MAX_LEN+1);\n+        String errMsg = \"Class name length exceeds limit of\";\n+\n+        ClassNotFoundException ex = assertThrows(ClassNotFoundException.class,\n+                                                 () -> Class.forName(tooLongName, false, loader));\n+        assertTrue(ex.getMessage().contains(errMsg),\n+                   \"Unexpected exception message\");\n+\n+        ex = assertThrows(ClassNotFoundException.class,\n+                          () -> Class.forName(tooLongName));\n+        assertTrue(ex.getMessage().contains(errMsg),\n+                   \"Unexpected exception message\");\n+   }\n+\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/ForNameNames.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}