{"files":[{"patch":"@@ -604,1 +604,1 @@\n-        if (!ModifiedUtf.classNameLengthIsValid(name)) {\n+        if (!ModifiedUtf.isValidLengthInConstantPool(name)) {\n@@ -4160,1 +4160,1 @@\n-        if (!ModifiedUtf.classNameLengthIsValid(name)) {\n+        if (!ModifiedUtf.isValidLengthInConstantPool(name)) {\n@@ -4162,1 +4162,1 @@\n-                    \"Class name length exceeds limit of \" + ModifiedUtf.JAVA_CLASSNAME_MAX_LEN);\n+                    \"Class name length exceeds limit of \" + ModifiedUtf.CONSTANT_POOL_UTF8_MAX_BYTES);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,2 +36,3 @@\n-    \/\/Max length in Modified UTF-8 bytes for class names.(see max_symbol_length in symbol.hpp)\n-    public static final int JAVA_CLASSNAME_MAX_LEN = 65535;\n+    \/\/ Maximum number of bytes allowed for a Modified UTF-8 encoded string\n+    \/\/ in a ClassFile constant pool entry (CONSTANT_Utf8_info).\n+    public static final int CONSTANT_POOL_UTF8_MAX_BYTES = 65535;\n@@ -76,2 +77,3 @@\n-     * Checks whether the length of the class name in Modified UTF-8 bytes exceeds the maximum allowed.\n-     * @param name class name\n+     * Checks whether the Modified UTF-8 encoded length of the given string\n+     * fits within the ClassFile constant pool limit (u2 length = 65535 bytes).\n+     * @param str the string to check\n@@ -80,1 +82,1 @@\n-    public static boolean classNameLengthIsValid(String name) {\n+    public static boolean isValidLengthInConstantPool(String str) {\n@@ -83,2 +85,2 @@\n-        int nameLen = name.length();\n-        if (nameLen <= JAVA_CLASSNAME_MAX_LEN \/ 3) {\n+        int strLen = str.length();\n+        if (strLen <= CONSTANT_POOL_UTF8_MAX_BYTES \/ 3) {\n@@ -87,0 +89,3 @@\n+        if (strLen > CONSTANT_POOL_UTF8_MAX_BYTES) {\n+            return false;\n+        }\n@@ -88,3 +93,3 @@\n-        \/\/ The check utfLen >= nameLen ensures we don't incorrectly return true in case of int overflow.\n-        int utfLen = utfLen(name, 0);\n-        return utfLen >= nameLen && utfLen <= JAVA_CLASSNAME_MAX_LEN;\n+        \/\/ The check utfLen >= strLen ensures we don't incorrectly return true in case of int overflow.\n+        int utfLen = utfLen(str, 0);\n+        return utfLen >= strLen && utfLen <= CONSTANT_POOL_UTF8_MAX_BYTES;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ModifiedUtf.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    \/\/Max length in Modified UTF-8 bytes for class names.\n@@ -41,0 +42,8 @@\n+\n+    private static final String ONE_BYTE = \"A\";                    \/\/ 1-byte UTF-8\n+    private static final String TWO_BYTE = \"\\u0100\";               \/\/ 2-byte UTF-8\n+    private static final String THREE_BYTE = \"\\u2600\";             \/\/ 3-byte UTF-8\n+\n+    private static final String ERR_MSG_IN_CORE = \"Class name length exceeds limit of\"; \/\/ check in corelib\n+    private static final String ERR_MSG_IN_JVM = \"Class name exceeds maximum length\";   \/\/ check in jvm\n+\n@@ -94,2 +103,27 @@\n-    @Test\n-    void testTooLongName() {\n+    static Stream<Arguments> validLen() {\n+        return Stream.of(\n+                \/\/ 1-byte character\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN - 1)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 - 1)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 + 1)),\n+                \/\/ 2-byte characters\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 2)),\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 6)),\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 6 + 1)),\n+                \/\/ 3-byte characters\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 - 1)),\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3)),\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 9)),\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 9 + 1))\n+        );\n+    }\n+\n+    \/*\n+     * Test class name length handling in 1-arg and 3-arg Class::forName\n+     * with valid length.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"validLen\")\n+    void testValidLen(String cn) {\n@@ -97,2 +131,6 @@\n-        String tooLongName = \"A\".repeat(JAVA_CLASSNAME_MAX_LEN+1);\n-        String errMsg = \"Class name length exceeds limit of\";\n+        \/\/ 3-arg Class.forName\n+        ClassNotFoundException ex = assertThrows(ClassNotFoundException.class,\n+                                                 () -> Class.forName(cn, false, loader));\n+        assertFalse(ex.getMessage().contains(ERR_MSG_IN_CORE)\n+                    || ex.getMessage().contains(ERR_MSG_IN_JVM),\n+                    \"Unexpected exception message\");\n@@ -100,0 +138,28 @@\n+        \/\/ 1-arg Class.forName\n+        ex = assertThrows(ClassNotFoundException.class,\n+                          () -> Class.forName(cn));\n+        assertFalse(ex.getMessage().contains(ERR_MSG_IN_CORE)\n+                    || ex.getMessage().contains(ERR_MSG_IN_JVM),\n+                    \"Unexpected exception message\");\n+    }\n+\n+    static Stream<Arguments> invalidLen() {\n+        return Stream.of(\n+                \/\/ 1-byte characters over the limit\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN + 1)),\n+                \/\/ 2-byte characters over the limit\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 2 + 1)),\n+                \/\/ 3-byte characters over the limit\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 + 1))\n+        );\n+    }\n+\n+    \/*\n+     * Test class name length handling in 1-arg and 3-arg Class::forName\n+     * with invalid (too long) length.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"invalidLen\")\n+    void testInvalidLen(String cn) {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        \/\/ 3-arg Class.forName\n@@ -101,2 +167,2 @@\n-                                                 () -> Class.forName(tooLongName, false, loader));\n-        assertTrue(ex.getMessage().contains(errMsg),\n+                                                 () -> Class.forName(cn, false, loader));\n+        assertTrue(ex.getMessage().contains(ERR_MSG_IN_CORE),\n@@ -105,0 +171,1 @@\n+        \/\/ 1-arg Class.forName\n@@ -106,2 +173,2 @@\n-                          () -> Class.forName(tooLongName));\n-        assertTrue(ex.getMessage().contains(errMsg),\n+                          () -> Class.forName(cn));\n+        assertTrue(ex.getMessage().contains(ERR_MSG_IN_CORE),\n@@ -109,3 +176,2 @@\n-   }\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/ForNameNames.java","additions":77,"deletions":11,"binary":false,"changes":88,"status":"modified"}]}