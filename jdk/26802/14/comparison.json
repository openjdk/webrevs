{"files":[{"patch":"@@ -81,0 +81,1 @@\n+import jdk.internal.util.ModifiedUtf;\n@@ -470,0 +471,1 @@\n+        validateClassNameLength(className);\n@@ -552,0 +554,1 @@\n+        validateClassNameLength(name);\n@@ -601,0 +604,3 @@\n+        if (!ModifiedUtf.isValidLengthInConstantPool(name)) {\n+            return null;\n+        }\n@@ -4151,1 +4157,9 @@\n-}\n+\n+    \/\/ Validates the length of the class name and throws an exception if it exceeds the maximum allowed length.\n+    private static void validateClassNameLength(String name) throws ClassNotFoundException {\n+        if (!ModifiedUtf.isValidLengthInConstantPool(name)) {\n+            throw new ClassNotFoundException(\n+                    \"Class name length exceeds limit of \" + ModifiedUtf.CONSTANT_POOL_UTF8_MAX_BYTES);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+    \/\/ Maximum number of bytes allowed for a Modified UTF-8 encoded string\n+    \/\/ in a ClassFile constant pool entry (CONSTANT_Utf8_info).\n+    public static final int CONSTANT_POOL_UTF8_MAX_BYTES = 65535;\n+\n@@ -71,0 +75,22 @@\n+\n+    \/**\n+     * Checks whether the Modified UTF-8 encoded length of the given string\n+     * fits within the ClassFile constant pool limit (u2 length = 65535 bytes).\n+     * @param str the string to check\n+     *\/\n+    @ForceInline\n+    public static boolean isValidLengthInConstantPool(String str) {\n+        \/\/ Quick approximation: each char can be at most 3 bytes in Modified UTF-8.\n+        \/\/ If the string is short enough, it definitely fits.\n+        int strLen = str.length();\n+        if (strLen <= CONSTANT_POOL_UTF8_MAX_BYTES \/ 3) {\n+            return true;\n+        }\n+        if (strLen > CONSTANT_POOL_UTF8_MAX_BYTES) {\n+            return false;\n+        }\n+        \/\/ Check exact Modified UTF-8 length.\n+        \/\/ The check strLen > CONSTANT_POOL_UTF8_MAX_BYTES above ensures that utfLen can't overflow here.\n+        int utfLen = utfLen(str, 0);\n+        return utfLen <= CONSTANT_POOL_UTF8_MAX_BYTES;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ModifiedUtf.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import java.lang.reflect.Array;\n@@ -1368,1 +1369,1 @@\n-            Class.forName(null);\n+            Array.get(null,0);\n","filename":"test\/hotspot\/jtreg\/runtime\/exceptionMsgs\/NullPointerException\/NullPointerExceptionTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8310242\n+ * @bug 8310242 8328874\n@@ -40,0 +40,10 @@\n+    \/\/Max length in Modified UTF-8 bytes for class names.\n+    private static final int JAVA_CLASSNAME_MAX_LEN = 65535;\n+\n+    private static final String ONE_BYTE = \"A\";                    \/\/ 1-byte UTF-8\n+    private static final String TWO_BYTE = \"\\u0100\";               \/\/ 2-byte UTF-8\n+    private static final String THREE_BYTE = \"\\u2600\";             \/\/ 3-byte UTF-8\n+\n+    private static final String ERR_MSG_IN_CORE = \"Class name length exceeds limit of\"; \/\/ check in corelib\n+    private static final String ERR_MSG_IN_JVM = \"Class name exceeds maximum length\";   \/\/ check in jvm\n+\n@@ -93,1 +103,75 @@\n-}\n+    static Stream<Arguments> validLen() {\n+        return Stream.of(\n+                \/\/ 1-byte character\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN - 1)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 - 1)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3)),\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 + 1)),\n+                \/\/ 2-byte characters\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 2)),\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 6)),\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 6 + 1)),\n+                \/\/ 3-byte characters\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 - 1)),\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3)),\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 9)),\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 9 + 1))\n+        );\n+    }\n+\n+    \/*\n+     * Test class name length handling in 1-arg and 3-arg Class::forName\n+     * with valid length.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"validLen\")\n+    void testValidLen(String cn) {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        \/\/ 3-arg Class.forName\n+        ClassNotFoundException ex = assertThrows(ClassNotFoundException.class,\n+                                                 () -> Class.forName(cn, false, loader));\n+        assertFalse(ex.getMessage().contains(ERR_MSG_IN_CORE)\n+                    || ex.getMessage().contains(ERR_MSG_IN_JVM),\n+                    \"Unexpected exception message\");\n+\n+        \/\/ 1-arg Class.forName\n+        ex = assertThrows(ClassNotFoundException.class,\n+                          () -> Class.forName(cn));\n+        assertFalse(ex.getMessage().contains(ERR_MSG_IN_CORE)\n+                    || ex.getMessage().contains(ERR_MSG_IN_JVM),\n+                    \"Unexpected exception message\");\n+    }\n+\n+    static Stream<Arguments> invalidLen() {\n+        return Stream.of(\n+                \/\/ 1-byte characters over the limit\n+                Arguments.of(ONE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN + 1)),\n+                \/\/ 2-byte characters over the limit\n+                Arguments.of(TWO_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 2 + 1)),\n+                \/\/ 3-byte characters over the limit\n+                Arguments.of(THREE_BYTE.repeat(JAVA_CLASSNAME_MAX_LEN \/ 3 + 1))\n+        );\n+    }\n+\n+    \/*\n+     * Test class name length handling in 1-arg and 3-arg Class::forName\n+     * with invalid (too long) length.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"invalidLen\")\n+    void testInvalidLen(String cn) {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        \/\/ 3-arg Class.forName\n+        ClassNotFoundException ex = assertThrows(ClassNotFoundException.class,\n+                                                 () -> Class.forName(cn, false, loader));\n+        assertTrue(ex.getMessage().contains(ERR_MSG_IN_CORE),\n+                   \"Unexpected exception message\");\n+\n+        \/\/ 1-arg Class.forName\n+        ex = assertThrows(ClassNotFoundException.class,\n+                          () -> Class.forName(cn));\n+        assertTrue(ex.getMessage().contains(ERR_MSG_IN_CORE),\n+                   \"Unexpected exception message\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/ForNameNames.java","additions":87,"deletions":3,"binary":false,"changes":90,"status":"modified"}]}