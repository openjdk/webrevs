{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2037,1 +2037,1 @@\n-    bool call_is_virtual = (bc == Bytecodes::_invokevirtual && !_profiled_callee->can_be_statically_bound()) || bc == Bytecodes::_invokeinterface;\n+    bool call_is_virtual = (bc == Bytecodes::_invokevirtual && (UseCHA || !_profiled_callee->can_be_statically_bound())) || bc == Bytecodes::_invokeinterface;\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary test c1 to record type profile with CHA optimization\n+ * @requires (vm.opt.TieredStoAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @library \/test\/lib\n+ * @run driver compiler.cha.TypeProfileFinalMethod\n+ *\/\n+package compiler.cha;\n+\n+import java.io.File;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TypeProfileFinalMethod {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1 && args[0].equals(\"Run\")) {\n+            int cnt = 5300;\n+            \/\/ warmup test1 to be compiled with c1 and c2\n+            \/\/ and only compile test2 with c1\n+            for (int i = 0; i < cnt; i++) {\n+                test1(i);\n+            }\n+            for (int i = 0; i < cnt; i++) {\n+                test2(i);\n+            }\n+            Parent c = new Child2();\n+            System.out.println(\"======== break CHA\");\n+            \/\/ trigger c2 to compile test2\n+            for (int i = 0; i < 100; i++) {\n+                test2(i);\n+            }\n+        } else {\n+            ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-Xbatch\", \"-XX:-UseOnStackReplacement\",\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:CompilerDirectivesFile=\"+System.getProperty(\"test.src\", \".\") + File.separator + \"cha_control.txt\",\n+                \"-XX:Tier3InvocationThreshold=200\", \"-XX:Tier4InvocationThreshold=5000\",\n+                \"compiler.cha.TypeProfileFinalMethod\", \"Run\");\n+            OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+            System.out.println(\"debug output\");\n+            System.out.println(output.getOutput());\n+            System.out.println(\"debug output end\");\n+            output.shouldHaveExitValue(0);\n+            output.shouldNotContain(\"failed to inline: virtual call\");\n+            Pattern pattern = Pattern.compile(\"Child1::m.*  inline \");\n+            Matcher matcher = pattern.matcher(output.getOutput());\n+            int matchCnt = 0;\n+            while (matcher.find()) {\n+              matchCnt++;\n+            }\n+            Asserts.assertEquals(matchCnt, 2);  \/\/ inline Child1::m() twice\n+        }\n+    }\n+\n+    static int test1(int i) {\n+        int ret = 0;\n+        Parent ix = getInstance();\n+        if (i<200) {\n+            return ix.m();\n+        }\n+        for (int j = 0; j < 50; j++) {\n+            ret += ix.m();     \/\/ the callsite we are interesting\n+        }\n+        return ret;\n+    }\n+\n+    static int test2(int i) {\n+        return test1(i);\n+    }\n+\n+    static Parent getInstance() {\n+        return new Child1();\n+    }\n+}\n+\n+abstract class Parent {\n+    abstract public int m();\n+}\n+\n+final class Child1 extends Parent {\n+    public int m() {\n+        return 1;\n+    }\n+}\n+\n+final class Child2 extends Parent {\n+    public int m() {\n+        return 2;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/TypeProfileFinalMethod.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+[\n+   { match: [\"compiler.cha.TypeProfileFinalMethod::main\"],\n+     Exclude: true,\n+   },\n+   { match: [\"compiler.cha.TypeProfileFinalMethod::test1\"],\n+     c1: {\n+       inline: [\n+         \"-compiler.cha.TypeProfileFinalMethod::getInstance\",\n+         \/\/ \"-compiler.cha.Child1::m\",\n+       ],\n+     },\n+     c2: {\n+       inline: [\"-compiler.cha.TypeProfileFinalMethod::getInstance\"],\n+     },\n+   },\n+   { match: [\"compiler.cha.TypeProfileFinalMethod::test2\"],\n+     c1: {\n+       inline: [\n+         \"-compiler.cha.TypeProfileFinalMethod::getInstance\",\n+         \"-compiler.cha.TypeProfileFinalMethod::test1\",\n+       ],\n+     },\n+     c2: {\n+       inline: [\n+         \"-compiler.cha.TypeProfileFinalMethod::getInstance\",\n+       ],\n+       PrintInlining: true,\n+     },\n+   },\n+]\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/cha_control.txt","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"}]}