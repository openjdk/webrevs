{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import vm.share.InMemoryJavaCompiler;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/bytecode\/BytecodeGeneratorFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-import vm.share.InMemoryJavaCompiler;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/staticReferences\/StaticReferences.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-import vm.share.InMemoryJavaCompiler;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/stressDictionary\/StressDictionary.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import vm.share.InMemoryJavaCompiler;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/stressHierarchy\/common\/generateHierarchy\/GenerateHierarchyHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-\/\/package nsk.jvmti.RedefineClasses.StressRedefine;\n@@ -44,1 +43,1 @@\n-import vm.share.InMemoryJavaCompiler;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/StressRedefine.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share;\n-\n-import javax.tools.FileObject;\n-import javax.tools.ForwardingJavaFileManager;\n-import javax.tools.JavaCompiler;\n-import javax.tools.JavaFileManager;\n-import javax.tools.JavaFileObject;\n-import javax.tools.SimpleJavaFileObject;\n-import javax.tools.ToolProvider;\n-import java.io.ByteArrayOutputStream;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-import java.net.URI;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-\n-public class InMemoryJavaCompiler {\n-\n-    public static Map<String, byte[]> compile(Map<String, ? extends CharSequence> inputMap) {\n-        Collection<JavaFileObject> sourceFiles = new LinkedList<JavaFileObject>();\n-        for (Entry<String, ? extends CharSequence> entry : inputMap.entrySet()) {\n-            sourceFiles.add(new SourceFile(entry.getKey(), entry.getValue()));\n-        }\n-\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        FileManager fileManager = new FileManager(compiler.getStandardFileManager(null, null, null));\n-\n-        Writer writer = new StringWriter();\n-        Boolean exitCode = compiler.getTask(writer, fileManager, null, null, null, sourceFiles).call();\n-        if (!exitCode) {\n-            System.out.println(\"*********** javac output begin ***********\");\n-            System.out.println(writer.toString());\n-            System.out.println(\"*********** javac output end ***********\");\n-            if (writer.toString().contains(\"java.lang.OutOfMemoryError\")) {\n-                System.out.println(\"Got OOME while performing in memory compilation. It happens on weak hosts and there is nothing we can do. \");\n-                throw new OutOfMemoryError(\"Got OOME while performing in memory compilation.\");\n-            }\n-            throw new RuntimeException(\"Test bug: in memory compilation failed.\");\n-        }\n-        return fileManager.getByteCode();\n-    }\n-\n-    \/\/ Wraper for class file\n-    static class ClassFile extends SimpleJavaFileObject {\n-\n-        private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-        protected ClassFile(String name) {\n-            super(URI.create(\"memo:\/\/\/\" + name.replace('.', '\/') + Kind.CLASS.extension), Kind.CLASS);\n-        }\n-\n-        @Override\n-        public ByteArrayOutputStream openOutputStream() { return this.baos; }\n-\n-        byte[] toByteArray() { return baos.toByteArray(); }\n-    }\n-\n-    \/\/ File manager which spawns ClassFile instances by demand\n-    static class FileManager extends ForwardingJavaFileManager<JavaFileManager> {\n-\n-        private Map<String, ClassFile> classesMap = new HashMap<String, ClassFile>();\n-\n-        protected FileManager(JavaFileManager fileManager) {\n-            super(fileManager);\n-        }\n-\n-        @Override\n-        public ClassFile getJavaFileForOutput(Location location, String name, JavaFileObject.Kind kind, FileObject source) {\n-            ClassFile classFile = new ClassFile(name);\n-            classesMap.put(name, classFile);\n-            return classFile;\n-        }\n-\n-        public Map<String, byte[]> getByteCode() {\n-            Map<String, byte[]> result = new HashMap<String, byte[]>();\n-            for (Entry<String, ClassFile> entry : classesMap.entrySet()) {\n-                result.put(entry.getKey(), entry.getValue().toByteArray());\n-            }\n-            return result;\n-        }\n-    }\n-\n-    \/\/ Wrapper for source file\n-    static class SourceFile extends SimpleJavaFileObject {\n-\n-        private CharSequence sourceCode;\n-\n-        public SourceFile(String name, CharSequence sourceCode) {\n-            super(URI.create(\"memo:\/\/\/\" + name.replace('.', '\/') + Kind.SOURCE.extension), Kind.SOURCE);\n-            this.sourceCode = sourceCode;\n-        }\n-\n-        @Override\n-        public CharSequence getCharContent(boolean ignore) {\n-            return this.sourceCode;\n-        }\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/InMemoryJavaCompiler.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.io.StringWriter;\n+import java.io.Writer;\n@@ -33,0 +35,3 @@\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n@@ -34,0 +39,2 @@\n+import java.util.Map;\n+import java.util.Map.Entry;\n@@ -165,0 +172,80 @@\n+    \/\/ Wraper for class file\n+    static class ClassFile extends SimpleJavaFileObject {\n+\n+        private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        protected ClassFile(String name) {\n+            super(URI.create(\"memo:\/\/\/\" + name.replace('.', '\/') + Kind.CLASS.extension), Kind.CLASS);\n+        }\n+\n+        @Override\n+        public ByteArrayOutputStream openOutputStream() { return this.baos; }\n+\n+        byte[] toByteArray() { return baos.toByteArray(); }\n+    }\n+\n+    \/\/ File manager which spawns ClassFile instances by demand\n+    static class FileManager extends ForwardingJavaFileManager<JavaFileManager> {\n+\n+        private Map<String, ClassFile> classesMap = new HashMap<String, ClassFile>();\n+\n+        protected FileManager(JavaFileManager fileManager) {\n+            super(fileManager);\n+        }\n+\n+        @Override\n+        public ClassFile getJavaFileForOutput(Location location, String name, JavaFileObject.Kind kind, FileObject source) {\n+            ClassFile classFile = new ClassFile(name);\n+            classesMap.put(name, classFile);\n+            return classFile;\n+        }\n+\n+        public Map<String, byte[]> getByteCode() {\n+            Map<String, byte[]> result = new HashMap<String, byte[]>();\n+            for (Entry<String, ClassFile> entry : classesMap.entrySet()) {\n+                result.put(entry.getKey(), entry.getValue().toByteArray());\n+            }\n+            return result;\n+        }\n+    }\n+\n+    \/\/ Wrapper for source file\n+    static class SourceFile extends SimpleJavaFileObject {\n+\n+        private CharSequence sourceCode;\n+\n+        public SourceFile(String name, CharSequence sourceCode) {\n+            super(URI.create(\"memo:\/\/\/\" + name.replace('.', '\/') + Kind.SOURCE.extension), Kind.SOURCE);\n+            this.sourceCode = sourceCode;\n+        }\n+\n+        @Override\n+        public CharSequence getCharContent(boolean ignore) {\n+            return this.sourceCode;\n+        }\n+    }\n+\n+    public static Map<String, byte[]> compile(Map<String, ? extends CharSequence> inputMap) {\n+        Collection<JavaFileObject> sourceFiles = new LinkedList<JavaFileObject>();\n+        for (Entry<String, ? extends CharSequence> entry : inputMap.entrySet()) {\n+            sourceFiles.add(new SourceFile(entry.getKey(), entry.getValue()));\n+        }\n+\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        FileManager fileManager = new FileManager(compiler.getStandardFileManager(null, null, null));\n+\n+        Writer writer = new StringWriter();\n+        Boolean exitCode = compiler.getTask(writer, fileManager, null, null, null, sourceFiles).call();\n+        if (!exitCode) {\n+            System.out.println(\"*********** javac output begin ***********\");\n+            System.out.println(writer.toString());\n+            System.out.println(\"*********** javac output end ***********\");\n+            if (writer.toString().contains(\"java.lang.OutOfMemoryError\")) {\n+                System.out.println(\"Got OOME while performing in memory compilation. It happens on weak hosts and there is nothing we can do. \");\n+                throw new OutOfMemoryError(\"Got OOME while performing in memory compilation.\");\n+            }\n+            throw new RuntimeException(\"Test bug: in memory compilation failed.\");\n+        }\n+        return fileManager.getByteCode();\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"}]}