{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,2 @@\n- *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\n+ *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$SourceFile\n+ *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$ClassFile\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyCallerIsHidden.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,2 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$SourceFile\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$ClassFile\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,2 @@\n- *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\n+ *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$SourceFile\n+ *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$ClassFile\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RegularHiddenClass.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,2 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$SourceFile\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$ClassFile\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineBasicTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,2 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$SourceFile\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$ClassFile\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineRunningMethods_Shared.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,2 +47,1 @@\n-        Map<String, CharSequence> sources = new HashMap<String, CharSequence>();\n-        sources.put(className, sourceGenerator.generateSource(className,\n+        byte[] bytecode = InMemoryJavaCompiler.compile(className, sourceGenerator.generateSource(className,\n@@ -52,1 +51,0 @@\n-        byte[] bytecode = InMemoryJavaCompiler.compile(sources).values().iterator().next();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/bytecode\/BytecodeGeneratorFactory.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -213,3 +213,1 @@\n-        Map<String, CharSequence> sources = new HashMap<String, CharSequence>();\n-        sources.put(\"A\", generateSource(fieldQuantities));\n-        return InMemoryJavaCompiler.compile(sources).values().iterator().next();\n+        return InMemoryJavaCompiler.compile(\"A\", generateSource(fieldQuantities));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/staticReferences\/StaticReferences.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -181,1 +181,0 @@\n-        Map<String, CharSequence> sources = new HashMap<String, CharSequence>();\n@@ -183,2 +182,1 @@\n-        sources.put(className, generateSource(className));\n-        return InMemoryJavaCompiler.compile(sources).values().iterator().next();\n+        return InMemoryJavaCompiler.compile(className, generateSource(className));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/stressDictionary\/StressDictionary.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -205,3 +205,1 @@\n-        Map<String, CharSequence> sources = new HashMap<String, CharSequence>();\n-        sources.put(GenerateSourceHelper.CLASS_NAME, GenerateSourceHelper.generateSource());\n-        return InMemoryJavaCompiler.compile(sources).values().iterator().next();\n+        return InMemoryJavaCompiler.compile(GenerateSourceHelper.CLASS_NAME, GenerateSourceHelper.generateSource());\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/StressRedefine.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,30 +86,0 @@\n-    private static class MemoryJavaFileObject extends SimpleJavaFileObject {\n-        private final String className;\n-        private final CharSequence sourceCode;\n-        private final ByteArrayOutputStream byteCode;\n-\n-        public MemoryJavaFileObject(String className, CharSequence sourceCode) {\n-            super(URI.create(\"string:\/\/\/\" + className.replace('.','\/') + Kind.SOURCE.extension), Kind.SOURCE);\n-            this.className = className;\n-            this.sourceCode = sourceCode;\n-            this.byteCode = new ByteArrayOutputStream();\n-        }\n-\n-        @Override\n-        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n-            return sourceCode;\n-        }\n-\n-        @Override\n-        public OutputStream openOutputStream() throws IOException {\n-            return byteCode;\n-        }\n-\n-        public byte[] getByteCode() {\n-            return byteCode.toByteArray();\n-        }\n-\n-        public String getClassName() {\n-            return className;\n-        }\n-    }\n@@ -129,1 +99,2 @@\n-        private final MemoryJavaFileObject file;\n+        private final SourceFile srcFile;\n+        private ClassFile clsFile;\n@@ -132,1 +103,1 @@\n-        public FileManagerWrapper(MemoryJavaFileObject file, String moduleOverride) {\n+        public FileManagerWrapper(SourceFile file, String moduleOverride) {\n@@ -134,1 +105,1 @@\n-            this.file = file;\n+            this.srcFile = file;\n@@ -142,2 +113,2 @@\n-            if (!file.getClassName().equals(className)) {\n-                throw new IOException(\"Expected class with name \" + file.getClassName() +\n+            if (!srcFile.getClassName().equals(className)) {\n+                throw new IOException(\"Expected class with name \" + srcFile.getClassName() +\n@@ -146,1 +117,2 @@\n-            return file;\n+            clsFile = new ClassFile(className);\n+            return clsFile;\n@@ -151,1 +123,1 @@\n-            if (fo == file && moduleOverride != null) {\n+            if (fo == srcFile && moduleOverride != null) {\n@@ -170,0 +142,4 @@\n+        public byte[] getByteCode() {\n+            return clsFile.toByteArray();\n+        }\n+\n@@ -216,0 +192,1 @@\n+        private String className;\n@@ -220,0 +197,1 @@\n+            this.className = name;\n@@ -226,0 +204,4 @@\n+\n+        public String getClassName() {\n+            return this.className;\n+        }\n@@ -263,1 +245,1 @@\n-        MemoryJavaFileObject file = new MemoryJavaFileObject(className, sourceCode);\n+        SourceFile file = new SourceFile(className, sourceCode);\n@@ -273,1 +255,1 @@\n-        try (JavaFileManager fileManager = new FileManagerWrapper(file, moduleOverride)) {\n+        try (FileManagerWrapper fileManager = new FileManagerWrapper(file, moduleOverride)) {\n@@ -279,1 +261,1 @@\n-            return file.getByteCode();\n+            return fileManager.getByteCode();\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":22,"deletions":40,"binary":false,"changes":62,"status":"modified"}]}