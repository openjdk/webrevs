{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2355,3 +2355,3 @@\n-     *          <pre>\n-     *          this.substring(toffset).startsWith(prefix)\n-     *          <\/pre>\n+     *          <blockquote>\n+     *          <pre>this.substring(toffset).startsWith(prefix)<\/pre>\n+     *          <\/blockquote>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import com.sun.source.doctree.EndElementTree;\n@@ -37,0 +38,3 @@\n+import com.sun.source.doctree.LiteralTree;\n+import com.sun.source.doctree.StartElementTree;\n+import com.sun.source.doctree.TextTree;\n@@ -39,0 +43,1 @@\n+import com.sun.source.util.SimpleDocTreeVisitor;\n@@ -129,0 +134,3 @@\n+    \/** Used to skip whitespace normalization for comments that don't need it *\/\n+    private boolean hasPreElement = false;\n+\n@@ -214,1 +222,1 @@\n-        List<DCTree> body = content(Phase.BODY);\n+        List<DCTree> body = normalizeWhitespace(content(Phase.BODY));\n@@ -260,1 +268,1 @@\n-        return content(Phase.BODY);\n+        return normalizeWhitespace(content(Phase.BODY));\n@@ -1057,0 +1065,3 @@\n+                    if (\"pre\".equalsIgnoreCase(name.toString())) {\n+                        hasPreElement = true;\n+                    }\n@@ -1857,0 +1868,179 @@\n+    \/*\n+     * Check if every newline character in the doc comment is followed by at least\n+     * one space character, which suggests that indentation is incidental and should be\n+     * removed in preformatted text.\n+     *\/\n+    private boolean canStripLeadingSpace() {\n+        for (int i = 0; i < buf.length - 2; i++) {\n+            if (buf[i] == '\\n') {\n+                char c = buf[i + 1];\n+                if (c != '\\n' && c != ' ') {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    \/*\n+     * This method performs whitespace normalization of preformatted text in parsed comments.\n+     * Two kinds of normalization are carried out on top-level text and bodies of\n+     * {@code}\/{@literal} tags inside <pre>...<\/pre> tags:\n+     *\n+     *  - Removal of one leading space following each line break. This is commonly\n+     *    caused by doc comment formatting conventions and parsing rules, and results\n+     *    in unintentional indentation and a trailing blank line in rendered <pre> content.\n+     *\n+     *  - Removal of a single line break after a <code> or {@code tag at the beginning\n+     *    of <pre> content. Browsers ignore a leading line break immediately following\n+     *    the <pre> tag, but not after a <code> tag or other whitespace. This causes\n+     *    a leading blank line in the rendered <pre> content.\n+     *\n+     * Normalization is only performed on traditional doc comments since they are uniquely\n+     * affected by these problems (Markdown comments already come stripped from leading\n+     * whitespace). Leading spaces are only removed if all line breaks in the comment are\n+     * followed by a space character. Both steps are performed independently of each other.\n+     *\/\n+    private List<DCTree> normalizeWhitespace(List<DCTree> list) {\n+\n+        \/\/ Do nothing if comment is not eligible for whitespace normalization.\n+        if (!hasPreElement || textKind == DocTree.Kind.MARKDOWN || isHtmlFile) {\n+            return list;\n+        }\n+\n+        final var stripLeadingSpace = canStripLeadingSpace();\n+\n+        \/\/ Context for whitespace normalization visitor\n+        class NormalizationContext {\n+            int pos = 0;                \/\/ current position in doctree list\n+            int currentPre = -1;        \/\/ position of active pre start tag\n+            int strippableNewline = -1; \/\/ position marker for leading newline to be stripped\n+\n+            \/\/ Are we currently inside a <pre> element?\n+            boolean inPre() {\n+                return currentPre > -1;\n+            }\n+            \/\/ Is this the first element following a <pre> start tag?\n+            boolean firstInPre() {\n+                return inPre() && currentPre == pos - 1;\n+            }\n+            \/\/ Does the current doctree have leading newline that should be stripped?\n+            boolean stripLeadingNewline() {\n+                return strippableNewline == pos;\n+            }\n+        }\n+\n+        var normalized = new ListBuffer<DCTree>();\n+        var visitor = new SimpleDocTreeVisitor<DCTree, NormalizationContext>() {\n+\n+            private DCText normalizePreContent(DCText text, NormalizationContext cx) {\n+                var body = text.getBody();\n+\n+                if (stripLeadingSpace && body.contains(\"\\n \")) {\n+                    \/\/ Remove a single leading space following each newline character.\n+                    body = body.replace(\"\\n \", \"\\n\");\n+                }\n+                if (cx.stripLeadingNewline()) {\n+                    \/\/ Remove a leading newline if this text has been marked for it.\n+                    assert(body.startsWith(\"\\n\"));\n+                    body = body.substring(1);\n+                }\n+\n+                return body == text.getBody() ? text : m.at(text.pos).newTextTree(body);\n+            }\n+\n+            private DCText normalizeStartOfPreContent(DCText text, NormalizationContext cx) {\n+                \/\/ Check if <pre> content starts with one or more space characters, followed by\n+                \/\/ {@code}, {@literal} or <code> with leading newline in its content. If so,\n+                \/\/ drop the space(s) and mark the newline for removal to avoid a blank leading line.\n+                if (cx.pos < list.length() - 1 && text.getBody().matches(\" +\")) {\n+                    var next = list.get(cx.pos + 1);\n+                    if (next instanceof LiteralTree literal\n+                            && literal.getBody().getBody().startsWith(\"\\n\")) {\n+                        \/\/ <pre> {@code\\n\n+                        cx.strippableNewline = cx.pos + 1;\n+                        return null;\n+\n+                    } else if (cx.pos < list.length() - 2\n+                            && next instanceof StartElementTree elem\n+                            && elem.getName().toString().equalsIgnoreCase(\"code\")\n+                            && list.get(cx.pos + 2) instanceof DCText code\n+                            && code.getBody().startsWith(\"\\n\")) {\n+                        \/\/ <pre> <code>\\n\n+                        cx.strippableNewline = cx.pos + 2;\n+                        return null;\n+                    }\n+                }\n+                \/\/ Do normal pre content normalization.\n+                return normalizePreContent(text, cx);\n+            }\n+\n+            @Override\n+            public DCTree visitText(TextTree text, NormalizationContext cx) {\n+                if (cx.inPre()) {\n+                    return cx.firstInPre()\n+                            ? normalizeStartOfPreContent((DCText) text, cx)\n+                            : normalizePreContent((DCText) text, cx);\n+                }\n+                return (DCTree) text;\n+            }\n+\n+            @Override\n+            public DCTree visitLiteral(LiteralTree literal, NormalizationContext cx) {\n+                if (cx.inPre()) {\n+                    if (cx.firstInPre() && literal.getBody().getBody().startsWith(\"\\n\")) {\n+                        \/\/ <pre>{@code\\n\n+                        cx.strippableNewline = cx.pos;\n+                    }\n+                    var normalized = normalizePreContent((DCText) literal.getBody(), cx);\n+                    if (normalized != literal.getBody()) {\n+                        m.at(((DCTree) literal).pos);\n+                        return literal.getKind() == DocTree.Kind.CODE\n+                                ? m.newCodeTree(normalized)\n+                                : m.newLiteralTree(normalized);\n+                    }\n+                }\n+                return (DCTree) literal;\n+            }\n+\n+            @Override\n+            public DCTree visitStartElement(StartElementTree node, NormalizationContext cx) {\n+                if (node.getName().toString().equalsIgnoreCase(\"pre\")) {\n+                    cx.currentPre = cx.pos;\n+                } else if (cx.firstInPre() && node.getName().toString().equalsIgnoreCase(\"code\")) {\n+                    if (cx.pos < list.length() - 1\n+                            && list.get(cx.pos + 1) instanceof DCText code\n+                            && code.getBody().startsWith(\"\\n\")) {\n+                        \/\/ <pre><code>\\n\n+                        cx.strippableNewline = cx.pos + 1;\n+                    }\n+                }\n+                return (DCTree) node;\n+            }\n+\n+            @Override\n+            public DCTree visitEndElement(EndElementTree node, NormalizationContext cx) {\n+                if (node.getName().toString().equalsIgnoreCase(\"pre\")) {\n+                    cx.currentPre = -1;\n+                }\n+                return (DCTree) node;\n+            }\n+\n+            @Override\n+            protected DCTree defaultAction(DocTree node, NormalizationContext context) {\n+                return (DCTree) node;\n+            }\n+        };\n+\n+        var cx = new NormalizationContext();\n+        for (var tree : list) {\n+            var visited = visitor.visit(tree, cx);\n+            if (visited != null) {\n+                normalized.add(visited);\n+            }\n+            cx.pos++;\n+        }\n+\n+        return normalized.toList();\n+    }\n+\n@@ -2113,1 +2303,1 @@\n-                    List<DCTree> description = null;\n+                    List<DCTree> description = List.nil();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":194,"deletions":4,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -97,3 +97,3 @@\n-     * @implSpec\n-     * This implementation ignores the {@code (start, pos, end)} values and simply calls\n-     * {@link #print(Diagnostic.Kind, DocTreePath, String) print(kind, path, message)}.\n+     * @implNote\n+     * This implementation may report a wrong position for {@code TextTree} content\n+     * contained within a {@code <pre>} element subject to whitespace normalization.\n@@ -108,0 +108,2 @@\n+     * @throws IllegalArgumentException if {@code path} points to an unsupported kind\n+     *          of {@code DocTree}.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/doclet\/Reporter.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4232882 8014636\n+ * @bug 4232882 8014636 8346118\n@@ -57,7 +57,7 @@\n-                      \\s       1\n-                                2\n-                                  3\n-                                    4\n-                                      5\n-                                        6\n-                                          7\"\"\");\n+                      \\s      1\n+                               2\n+                                 3\n+                                   4\n+                                     5\n+                                       6\n+                                         7\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLeadingSpaces\/LeadingSpaces.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug      8002387 8014636 8078320 8175200 8186332\n+ * @bug      8002387 8014636 8078320 8175200 8186332 8346118\n@@ -73,6 +73,5 @@\n-                     Example:  <pre><code>\n-                       line 0 @Override\n-                       line 1 &lt;T&gt; void m(T t) {\n-                       line 2     \/\/ do something with T\n-                       line 3 }\n-                     <\/code><\/pre>\n+                     Example:  <pre><code>  line 0 @Override\n+                      line 1 &lt;T&gt; void m(T t) {\n+                      line 2     \/\/ do something with T\n+                      line 3 }\n+                    <\/code><\/pre>\n@@ -83,6 +82,5 @@\n-                     Example:  <pre>\n-                       line 0 @Override\n-                       line 1 &lt;T&gt; void m(T t) {\n-                       line 2     \/\/ do something with T\n-                       line 3 }\n-                     <\/pre>\n+                     Example:  <pre>  line 0 @Override\n+                      line 1 &lt;T&gt; void m(T t) {\n+                      line 2     \/\/ do something with T\n+                      line 3 }\n+                    <\/pre>\n@@ -93,5 +91,4 @@\n-                     Example:  <pre>\n-                       line 0 @Override\n-                       line 1 &lt;T&gt; void m(T t) {\n-                       line 2     \/\/ do something with T\n-                       line 3 } <\/pre>\n+                     Example:  <pre>  line 0 @Override\n+                      line 1 &lt;T&gt; void m(T t) {\n+                      line 2     \/\/ do something with T\n+                      line 3 } <\/pre>\n@@ -102,2 +99,2 @@\n-                     <b>id           <\/b>\n-                     <\/PRE><\/div>\"\"\",\n+                    <b>id           <\/b>\n+                    <\/PRE><\/div>\"\"\",\n@@ -110,3 +107,3 @@\n-                     @Override\n-                     <code> some.function() <\/code>\n-                     <\/pre><\/div>\"\"\");\n+                    @Override\n+                    <code> some.function() <\/code>\n+                    <\/pre><\/div>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLiteralCodeInPre\/TestLiteralCodeInPre.java","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n- *\\tThis source\n- * \\tis indented\n+ * \\tThis source\n+ *  \\tis indented\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSourceTab\/SingleTab\/C.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7021614 8241780 8273244 8284908\n+ * @bug 7021614 8241780 8273244 8284908 8346118\n@@ -131,1 +131,1 @@\n-    Literal[CODE, pos:6, |_____@Override|_____void_m()_{_}|_]\n+    Literal[CODE, pos:6, ____@Override|____void_m()_{_}|]\n@@ -136,0 +136,63 @@\n+*\/\n+\n+    \/**<pre>{@code\n+     *     @Override\n+     *     void m() { }\n+     * }<\/pre>\n+     *\/\n+    void pre_code_first_line() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:0\n+      name:pre\n+      attributes: empty\n+    ]\n+    Literal[CODE, pos:5, ____@Override|____void_m()_{_}|]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:47, pre]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     *<pre>{@code\n+     *    @Override\n+     *    void m() { }\n+     *}<\/pre>\n+     *\/\n+    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n+    void pre_code_no_indent() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:0\n+      name:pre\n+      attributes: empty\n+    ]\n+    Literal[CODE, pos:5, ____@Override|____void_m()_{_}|]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:44, pre]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     *  <pre>{@code\n+     *      @Override\n+     *      void m() { }\n+     *  }<\/pre>\n+     *\/\n+    void pre_code_double_indent() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:2\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:2\n+      name:pre\n+      attributes: empty\n+    ]\n+    Literal[CODE, pos:7, _____@Override|_____void_m()_{_}|_]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:52, pre]\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/CodeTest.java","additions":66,"deletions":3,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1041,1 +1041,1 @@\n-            return sb.toString()\n+            s2 = sb.toString()\n@@ -1044,0 +1044,16 @@\n+            return normalizePreContent(s2, isLineComment, normalizeTags);\n+        }\n+\n+        String normalizePreContent(String s, boolean isLineComment, boolean normalizeTags) {\n+            String s2 = s;\n+            if (!isLineComment) {\n+                if (normalizeTags) {\n+                    \/\/ Whitespace normalization within <pre> tags: remove single space after every newline\n+                    var p = Pattern.compile(\"(<pre>)(.*)(<\/pre>)\", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n+                    s2 = p.matcher(s2).replaceAll(\n+                            r -> r.group(1) + r.group(2).replaceAll(\"\\\\n \", \"\\n\") + r.group(3));\n+                }\n+                \/\/ Remove leading newline after {@code at the beginning of <pre> content.\n+                s2 = s2.replaceAll(\"<pre>\\\\{@code\\\\n\", \"<pre>{@code\");\n+            }\n+            return s2;\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -70,0 +70,25 @@\n+*\/\n+\n+    \/**\n+     * abc\n+     * <pre>\n+     *    def\n+     * gh\n+     * <\/pre>\n+     * ijk\n+     *\/\n+    void pre_whitespace_normalization() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc]\n+  body: 4\n+    StartElement[START_ELEMENT, pos:6\n+      name:pre\n+      attributes: empty\n+    ]\n+    Text[TEXT, pos:11, |___def|gh|]\n+    EndElement[END_ELEMENT, pos:25, pre]\n+    Text[TEXT, pos:31, |_ijk]\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/ElementTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8078320 8273244 8284908\n+ * @bug 8078320 8273244 8284908 8346118\n@@ -139,1 +139,1 @@\n-    Literal[CODE, pos:10, |_def__]\n+    Literal[CODE, pos:10, |def__]\n@@ -167,0 +167,93 @@\n+\n+    \/**\n+     * {@literal before pre\n+     * }\n+     * <pre>\n+     * in pre{@code\n+     *   in @code\n+     *   }\n+     *   pre again\n+     *   {@literal\n+     *     in literal}\n+     * <\/pre>{@code after pre\n+     * }\n+     *\/\n+    public void in_pre_multi_line() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 2\n+    Literal[LITERAL, pos:1, before_pre|_]\n+    Text[TEXT, pos:24]\n+  body: 8\n+    StartElement[START_ELEMENT, pos:26\n+      name:pre\n+      attributes: empty\n+    ]\n+    Text[TEXT, pos:31, |in_pre]\n+    Literal[CODE, pos:39, |__in_@code|__]\n+    Text[TEXT, pos:62, |__pre_again|__]\n+    Literal[LITERAL, pos:79, |____in_literal]\n+    Text[TEXT, pos:105, |]\n+    EndElement[END_ELEMENT, pos:107, pre]\n+    Literal[CODE, pos:113, after_pre|_]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * <pre>{@index term line1\n+     *   line2\n+     * }<\/pre>\n+     *\/\n+    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n+    public void in_pre_with_inline_tag() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:1\n+      name:pre\n+      attributes: empty\n+    ]\n+    Index[INDEX, pos:6\n+      term:\n+        Text[TEXT, pos:14, term]\n+      description: 1\n+        Text[TEXT, pos:19, line1|___line2|_]\n+    ]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:36, pre]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * <pre><span title=\"line1\n+     *   line2\n+     *   line3\"><\/span><\/pre>\n+     *\/\n+    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n+    public void in_pre_with_html_attr() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    StartElement[START_ELEMENT, pos:1\n+      name:pre\n+      attributes: empty\n+    ]\n+    StartElement[START_ELEMENT, pos:6\n+      name:span\n+      attributes: 1\n+        Attribute[ATTRIBUTE, pos:12\n+          name: title\n+          vkind: DOUBLE\n+          value: 1\n+            Text[TEXT, pos:19, line1|___line2|___line3]\n+        ]\n+    ]\n+    EndElement[END_ELEMENT, pos:44, span]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:51, pre]\n+  block tags: empty\n+]\n+*\/\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/InPreTest.java","additions":96,"deletions":3,"binary":false,"changes":99,"status":"modified"}]}