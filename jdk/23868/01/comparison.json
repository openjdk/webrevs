{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2355,3 +2355,3 @@\n-     *          <pre>\n-     *          this.substring(toffset).startsWith(prefix)\n-     *          <\/pre>\n+     *          <blockquote>\n+     *          <pre>this.substring(toffset).startsWith(prefix)<\/pre>\n+     *          <\/blockquote>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,0 +129,4 @@\n+    \/** Used for whitespace normalization in pre\/code\/literal tags. *\/\n+    private boolean canStripSpace = false;\n+    private boolean inPreElement = false;\n+\n@@ -206,0 +210,1 @@\n+        canStripSpace = canStripLeadingSpace(c);\n@@ -314,1 +319,1 @@\n-                        case TEXT -> entity(trees);\n+                        case TEXT -> entity(trees, phase == Phase.BODY);\n@@ -342,1 +347,1 @@\n-                                            addPendingText(trees, lastNonWhite);\n+                                            addPendingText(trees, lastNonWhite, true);\n@@ -349,1 +354,1 @@\n-                            addPendingText(trees, bp - 1);\n+                            addPendingText(trees, bp - 1, phase == Phase.BODY);\n@@ -367,1 +372,1 @@\n-                        case BODY -> inlineTag(trees);\n+                        case BODY -> inlineTag(trees, true);\n@@ -369,1 +374,1 @@\n-                            if (!inlineTag(trees)) {\n+                            if (!inlineTag(trees, false)) {\n@@ -380,1 +385,1 @@\n-                            addPendingText(trees, bp - 1);\n+                            addPendingText(trees, bp - 1, false);\n@@ -398,1 +403,1 @@\n-                            addPendingText(trees, bp - 1);\n+                            addPendingText(trees, bp - 1, phase == Phase.BODY);\n@@ -406,1 +411,1 @@\n-                            addPendingText(trees, lastNonWhite);\n+                            addPendingText(trees, lastNonWhite, true);\n@@ -410,1 +415,1 @@\n-                        addPendingText(trees, bp - 1);\n+                        addPendingText(trees, bp - 1, phase == Phase.BODY);\n@@ -477,1 +482,1 @@\n-            addPendingText(trees, lastNonWhite);\n+            addPendingText(trees, lastNonWhite, phase == Phase.BODY);\n@@ -584,0 +589,1 @@\n+     * @param inBlockContent whether we are currently parsing block content\n@@ -586,1 +592,1 @@\n-    protected boolean inlineTag(ListBuffer<DCTree> list) {\n+    protected boolean inlineTag(ListBuffer<DCTree> list, boolean inBlockContent) {\n@@ -596,1 +602,1 @@\n-                addPendingText(list, bp - 1);\n+                addPendingText(list, bp - 1, inBlockContent);\n@@ -603,1 +609,1 @@\n-                addPendingText(list, bp - 2);\n+                addPendingText(list, bp - 2, inBlockContent);\n@@ -695,1 +701,2 @@\n-                        return m.at(pos).newTextTree(newString(pos, bp));\n+                        return m.at(pos).newTextTree(newString(pos, bp,\n+                                whitespacePolicy == WhitespaceRetentionPolicy.REMOVE_FIRST_SPACE));\n@@ -867,1 +874,1 @@\n-    protected void entity(ListBuffer<DCTree> list) {\n+    protected void entity(ListBuffer<DCTree> list, boolean inBlockContent) {\n@@ -869,1 +876,1 @@\n-        addPendingText(list, bp - 1);\n+        addPendingText(list, bp - 1, inBlockContent);\n@@ -1057,0 +1064,3 @@\n+                    if (\"pre\".equalsIgnoreCase(name.toString())) {\n+                        inPreElement = true;\n+                    }\n@@ -1067,0 +1077,3 @@\n+                    if (\"pre\".equalsIgnoreCase(name.toString())) {\n+                        inPreElement = false;\n+                    }\n@@ -1169,1 +1182,1 @@\n-                    addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n+                    addPendingText(v, bp - 1, DocTree.Kind.TEXT, false);\n@@ -1177,1 +1190,1 @@\n-                    addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n+                    addPendingText(v, bp - 1, DocTree.Kind.TEXT, false);\n@@ -1191,2 +1204,2 @@\n-            case '&' -> entity(list);\n-            case '{' -> inlineTag(list);\n+            case '&' -> entity(list, false);\n+            case '{' -> inlineTag(list, false);\n@@ -1197,2 +1210,2 @@\n-    protected void addPendingText(ListBuffer<DCTree> list, int textEnd) {\n-        addPendingText(list, textEnd, textKind);\n+    protected void addPendingText(ListBuffer<DCTree> list, int textEnd, boolean inBlockContent) {\n+        addPendingText(list, textEnd, textKind, inBlockContent);\n@@ -1201,1 +1214,1 @@\n-    protected void addPendingText(ListBuffer<DCTree> list, int textEnd, DocTree.Kind kind) {\n+    protected void addPendingText(ListBuffer<DCTree> list, int textEnd, DocTree.Kind kind, boolean inBlockContent) {\n@@ -1206,1 +1219,1 @@\n-                            list.add(m.at(textStart).newTextTree(newString(textStart, textEnd + 1)));\n+                            list.add(m.at(textStart).newTextTree(newString(textStart, textEnd + 1, inBlockContent)));\n@@ -1208,1 +1221,2 @@\n-                            list.add(m.at(textStart).newRawTextTree(DocTree.Kind.MARKDOWN, newString(textStart, textEnd + 1)));\n+                            list.add(m.at(textStart).newRawTextTree(DocTree.Kind.MARKDOWN,\n+                                    newString(textStart, textEnd + 1)));\n@@ -1210,1 +1224,1 @@\n-                        throw new IllegalArgumentException(kind.toString());\n+                            throw new IllegalArgumentException(kind.toString());\n@@ -1806,0 +1820,46 @@\n+    \/**\n+     * Check if this is a traditional doc comment where every non-emtpy line past\n+     * the first newline character has at least one leading space. This suggests\n+     * that indentation is incidental and should be removed in preformatted text.\n+     *\/\n+    boolean canStripLeadingSpace(String comment) {\n+        if (textKind == DocTree.Kind.MARKDOWN || isHtmlFile) {\n+            return false;\n+        }\n+        for (int i = 0; i < comment.length() - 1; i++) {\n+            if (comment.charAt(i) == '\\n') {\n+                char c = comment.charAt(i + 1);\n+                if (c != '\\n' && c != ' ') {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    \/**\n+     * Variant of newString that optionally skips a leading space in each line.\n+     *\n+     * @param start position of first character of string\n+     * @param end position of character beyond last character to be included\n+     * @param stripLeadingSpace whether leading space may be stripped\n+     *\/\n+    String newString(int start, int end, boolean stripLeadingSpace) {\n+        if (stripLeadingSpace && canStripSpace && inPreElement) {\n+            StringBuilder sb = new StringBuilder(end - start);\n+            int pos = start;\n+            \/\/ The parser will never call this with a strippable space at buf[start].\n+            for (int i = start; i < end - 1; i++) {\n+                if (buf[i] == '\\n' && buf[i + 1] == ' ') {\n+                    sb.append(buf, pos, ++i - pos);\n+                    pos = i + 1;\n+                }\n+            }\n+            if (pos < end) {\n+                sb.append(buf, pos, end - pos);\n+            }\n+            return sb.toString();\n+        }\n+        return newString(start, end);\n+    }\n+\n@@ -2113,1 +2173,1 @@\n-                    List<DCTree> description = null;\n+                    List<DCTree> description = List.nil();\n@@ -2206,1 +2266,1 @@\n-                                addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n+                                addPendingText(v, bp - 1, DocTree.Kind.TEXT, false);\n@@ -2215,1 +2275,1 @@\n-                                addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n+                                addPendingText(v, bp - 1, DocTree.Kind.TEXT, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":90,"deletions":30,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -97,3 +97,3 @@\n-     * @implSpec\n-     * This implementation ignores the {@code (start, pos, end)} values and simply calls\n-     * {@link #print(Diagnostic.Kind, DocTreePath, String) print(kind, path, message)}.\n+     * @implNote\n+     * This implementation may report a wrong position for {@code TextTree} content\n+     * contained within a {@code <pre>} element subject to whitespace normalization.\n@@ -108,0 +108,2 @@\n+     * @throws IllegalArgumentException if {@code path} points to an unsupported kind\n+     *          of {@code DocTree}.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/doclet\/Reporter.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4232882 8014636\n+ * @bug 4232882 8014636 8346118\n@@ -57,7 +57,7 @@\n-                      \\s       1\n-                                2\n-                                  3\n-                                    4\n-                                      5\n-                                        6\n-                                          7\"\"\");\n+                      \\s      1\n+                               2\n+                                 3\n+                                   4\n+                                     5\n+                                       6\n+                                         7\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLeadingSpaces\/LeadingSpaces.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug      8002387 8014636 8078320 8175200 8186332\n+ * @bug      8002387 8014636 8078320 8175200 8186332 8346118\n@@ -74,5 +74,5 @@\n-                       line 0 @Override\n-                       line 1 &lt;T&gt; void m(T t) {\n-                       line 2     \/\/ do something with T\n-                       line 3 }\n-                     <\/code><\/pre>\n+                      line 0 @Override\n+                      line 1 &lt;T&gt; void m(T t) {\n+                      line 2     \/\/ do something with T\n+                      line 3 }\n+                    <\/code><\/pre>\n@@ -84,5 +84,5 @@\n-                       line 0 @Override\n-                       line 1 &lt;T&gt; void m(T t) {\n-                       line 2     \/\/ do something with T\n-                       line 3 }\n-                     <\/pre>\n+                      line 0 @Override\n+                      line 1 &lt;T&gt; void m(T t) {\n+                      line 2     \/\/ do something with T\n+                      line 3 }\n+                    <\/pre>\n@@ -94,4 +94,4 @@\n-                       line 0 @Override\n-                       line 1 &lt;T&gt; void m(T t) {\n-                       line 2     \/\/ do something with T\n-                       line 3 } <\/pre>\n+                      line 0 @Override\n+                      line 1 &lt;T&gt; void m(T t) {\n+                      line 2     \/\/ do something with T\n+                      line 3 } <\/pre>\n@@ -102,2 +102,2 @@\n-                     <b>id           <\/b>\n-                     <\/PRE><\/div>\"\"\",\n+                    <b>id           <\/b>\n+                    <\/PRE><\/div>\"\"\",\n@@ -110,3 +110,3 @@\n-                     @Override\n-                     <code> some.function() <\/code>\n-                     <\/pre><\/div>\"\"\");\n+                    @Override\n+                    <code> some.function() <\/code>\n+                    <\/pre><\/div>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLiteralCodeInPre\/TestLiteralCodeInPre.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n- *\\tThis source\n- * \\tis indented\n+ * \\tThis source\n+ *  \\tis indented\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSourceTab\/SingleTab\/C.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7021614 8241780 8273244 8284908\n+ * @bug 7021614 8241780 8273244 8284908 8346118\n@@ -131,1 +131,1 @@\n-    Literal[CODE, pos:6, |_____@Override|_____void_m()_{_}|_]\n+    Literal[CODE, pos:6, |____@Override|____void_m()_{_}|]\n@@ -136,0 +136,63 @@\n+*\/\n+\n+    \/**<pre>{@code\n+     *     @Override\n+     *     void m() { }\n+     * }<\/pre>\n+     *\/\n+    void pre_code_first_line() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:0\n+      name:pre\n+      attributes: empty\n+    ]\n+    Literal[CODE, pos:5, |____@Override|____void_m()_{_}|]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:47, pre]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     *<pre>{@code\n+     *    @Override\n+     *    void m() { }\n+     *}<\/pre>\n+     *\/\n+    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n+    void pre_code_no_indent() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:0\n+      name:pre\n+      attributes: empty\n+    ]\n+    Literal[CODE, pos:5, |____@Override|____void_m()_{_}|]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:44, pre]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     *  <pre>{@code\n+     *      @Override\n+     *      void m() { }\n+     *  }<\/pre>\n+     *\/\n+    void pre_code_double_indent() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:2\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:2\n+      name:pre\n+      attributes: empty\n+    ]\n+    Literal[CODE, pos:7, |_____@Override|_____void_m()_{_}|_]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:52, pre]\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/CodeTest.java","additions":66,"deletions":3,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1029,0 +1029,6 @@\n+            if (normalizeTags && !isLineComment) {\n+                \/\/ Whitespace normalization within <pre> tags: remove single space from every new line\n+                var p = Pattern.compile(\"(<pre>)(.*)(<\/pre>)\", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n+                s2 = p.matcher(s2).replaceAll(\n+                        r -> r.group(1) + r.group(2).replaceAll(\"\\\\n \", \"\\n\") + r.group(3));\n+            }\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,0 +70,25 @@\n+*\/\n+\n+    \/**\n+     * abc\n+     * <pre>\n+     *    def\n+     * gh\n+     * <\/pre>\n+     * ijk\n+     *\/\n+    void pre_whitespace_normalization() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc]\n+  body: 4\n+    StartElement[START_ELEMENT, pos:6\n+      name:pre\n+      attributes: empty\n+    ]\n+    Text[TEXT, pos:11, |___def|gh|]\n+    EndElement[END_ELEMENT, pos:25, pre]\n+    Text[TEXT, pos:31, |_ijk]\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/ElementTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8078320 8273244 8284908\n+ * @bug 8078320 8273244 8284908 8346118\n@@ -139,1 +139,1 @@\n-    Literal[CODE, pos:10, |_def__]\n+    Literal[CODE, pos:10, |def__]\n@@ -167,0 +167,93 @@\n+\n+    \/**\n+     * {@literal before pre\n+     * }\n+     * <pre>\n+     * in pre{@code\n+     *   in @code\n+     *   }\n+     *   pre again\n+     *   {@literal\n+     *     in literal}\n+     * <\/pre>{@code after pre\n+     * }\n+     *\/\n+    public void in_pre_multi_line() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 2\n+    Literal[LITERAL, pos:1, before_pre|_]\n+    Text[TEXT, pos:24]\n+  body: 8\n+    StartElement[START_ELEMENT, pos:26\n+      name:pre\n+      attributes: empty\n+    ]\n+    Text[TEXT, pos:31, |in_pre]\n+    Literal[CODE, pos:39, |__in_@code|__]\n+    Text[TEXT, pos:62, |__pre_again|__]\n+    Literal[LITERAL, pos:79, |____in_literal]\n+    Text[TEXT, pos:105, |]\n+    EndElement[END_ELEMENT, pos:107, pre]\n+    Literal[CODE, pos:113, after_pre|_]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * <pre>{@index term line1\n+     *   line2\n+     * }<\/pre>\n+     *\/\n+    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n+    public void in_pre_with_inline_tag() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 2\n+    StartElement[START_ELEMENT, pos:1\n+      name:pre\n+      attributes: empty\n+    ]\n+    Index[INDEX, pos:6\n+      term:\n+        Text[TEXT, pos:14, term]\n+      description: 1\n+        Text[TEXT, pos:19, line1|___line2|_]\n+    ]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:36, pre]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * <pre><span title=\"line1\n+     *   line2\n+     *   line3\"><\/span><\/pre>\n+     *\/\n+    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n+    public void in_pre_with_html_attr() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    StartElement[START_ELEMENT, pos:1\n+      name:pre\n+      attributes: empty\n+    ]\n+    StartElement[START_ELEMENT, pos:6\n+      name:span\n+      attributes: 1\n+        Attribute[ATTRIBUTE, pos:12\n+          name: title\n+          vkind: DOUBLE\n+          value: 1\n+            Text[TEXT, pos:19, line1|___line2|___line3]\n+        ]\n+    ]\n+    EndElement[END_ELEMENT, pos:44, span]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:51, pre]\n+  block tags: empty\n+]\n+*\/\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/InPreTest.java","additions":96,"deletions":3,"binary":false,"changes":99,"status":"modified"}]}