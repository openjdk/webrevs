{"files":[{"patch":"@@ -51,0 +51,1 @@\n+import java.util.Random;\n@@ -54,1 +55,0 @@\n-import java.util.stream.Collectors;\n@@ -70,1 +70,0 @@\n-    private static final String MAIN_CONTAINER_NAME = \"test-container-main\";\n@@ -118,1 +117,1 @@\n-                    long mainProcPid = testCase01(attachStrategy, elevated);\n+                    long mainProcPid = testCase01(mainContainer, attachStrategy, elevated);\n@@ -124,1 +123,1 @@\n-                    \/\/ testCase02(mainProcPid, attachStrategy, elevated);\n+                    \/\/ testCase02(mainContainer, mainProcPid, attachStrategy, elevated);\n@@ -127,1 +126,1 @@\n-                    testCase03(mainProcPid, attachStrategy, elevated);\n+                    testCase03(mainContainer, mainProcPid, attachStrategy, elevated);\n@@ -130,1 +129,1 @@\n-                mainContainer.waitForAndCheck(TIME_TO_RUN_MAIN_PROCESS * 1000);\n+                mainContainer.stop();\n@@ -139,2 +138,2 @@\n-    private static long testCase01(AttachStrategy attachStrategy, boolean elevated) throws Exception {\n-        OutputAnalyzer out = runSideCar(MAIN_CONTAINER_NAME, attachStrategy, elevated, \"\/jdk\/bin\/jcmd\", \"-l\")\n+    private static long testCase01(MainContainer mainContainer, AttachStrategy attachStrategy, boolean elevated) throws Exception {\n+        OutputAnalyzer out = runSideCar(mainContainer, attachStrategy, elevated, \"\/jdk\/bin\/jcmd\", \"-l\")\n@@ -152,2 +151,2 @@\n-    private static void testCase02(long pid, AttachStrategy attachStrategy, boolean elevated) throws Exception {\n-        runSideCar(MAIN_CONTAINER_NAME, attachStrategy, elevated, \"\/jdk\/bin\/jhsdb\", \"jinfo\", \"--pid\", \"\" + pid)\n+    private static void testCase02(MainContainer mainContainer, long pid, AttachStrategy attachStrategy, boolean elevated) throws Exception {\n+        runSideCar(mainContainer, attachStrategy, elevated, \"\/jdk\/bin\/jhsdb\", \"jinfo\", \"--pid\", \"\" + pid)\n@@ -161,2 +160,2 @@\n-    private static void testCase03(long pid, AttachStrategy attachStrategy, boolean elevated) throws Exception {\n-        runSideCar(MAIN_CONTAINER_NAME, attachStrategy, elevated, \"\/jdk\/bin\/jcmd\", \"\" + pid, \"help\")\n+    private static void testCase03(MainContainer mainContainer, long pid, AttachStrategy attachStrategy, boolean elevated) throws Exception {\n+        runSideCar(mainContainer, attachStrategy, elevated, \"\/jdk\/bin\/jcmd\", \"\" + pid, \"help\")\n@@ -165,1 +164,1 @@\n-        runSideCar(MAIN_CONTAINER_NAME, attachStrategy, elevated, \"\/jdk\/bin\/jcmd\", \"\" + pid, \"JFR.start\")\n+        runSideCar(mainContainer, attachStrategy, elevated, \"\/jdk\/bin\/jcmd\", \"\" + pid, \"JFR.start\")\n@@ -177,1 +176,1 @@\n-    private static OutputAnalyzer runSideCar(String mainContainerName, AttachStrategy attachStrategy, boolean elevated,  String whatToRun, String... args) throws Exception {\n+    private static OutputAnalyzer runSideCar(MainContainer mainContainer, AttachStrategy attachStrategy, boolean elevated,  String whatToRun, String... args) throws Exception {\n@@ -184,1 +183,1 @@\n-            \"--pid=container:\" + mainContainerName\n+            \"--pid=container:\" + mainContainer.name()\n@@ -188,1 +187,1 @@\n-            case TMP_MOUNTED_INTO_SIDECAR -> List.of(\"--volumes-from\", mainContainerName);\n+            case TMP_MOUNTED_INTO_SIDECAR -> List.of(\"--volumes-from\", mainContainer.name());\n@@ -212,1 +211,1 @@\n-            .collect(Collectors.toList());\n+            .toList();\n@@ -216,1 +215,1 @@\n-        String psInfo = l.get(0);\n+        String psInfo = l.getFirst();\n@@ -239,0 +238,4 @@\n+        private static final String MAIN_CONTAINER_NAME_PREFIX = \"test-container-main\";\n+        private static final Random RANDOM = Utils.getRandomInstance();\n+\n+        String name;\n@@ -258,0 +261,2 @@\n+            name = MAIN_CONTAINER_NAME_PREFIX + \"-elevated-\" + elevated + \"-\" + RANDOM.nextInt();\n+\n@@ -259,1 +264,2 @@\n-                .addDockerOpts(\"--name\", MAIN_CONTAINER_NAME)\n+                .addDockerOpts(\"--init\")\n+                .addDockerOpts(\"--name\", name)\n@@ -299,16 +305,6 @@\n-        public void waitForAndCheck(long timeout) throws Exception {\n-            int exitValue = -1;\n-            int retryCount = 3;\n-\n-            do {\n-                waitFor(timeout);\n-                try {\n-                    exitValue = p.exitValue();\n-                } catch(IllegalThreadStateException ex) {\n-                    System.out.println(\"IllegalThreadStateException occurred when calling exitValue()\");\n-                    retryCount--;\n-                }\n-            } while (exitValue == -1 && retryCount > 0);\n-\n-            if (exitValue != 0) {\n-                throw new RuntimeException(\"DockerThread stopped unexpectedly, non-zero exit value is \" + exitValue);\n+        public void stop() throws Exception {\n+            OutputAnalyzer out = DockerTestUtils.execute(Container.ENGINE_COMMAND, \"ps\")\n+                    .shouldHaveExitValue(0);\n+            if (out.contains(name)) {\n+                DockerTestUtils.execute(Container.ENGINE_COMMAND, \"stop\", name)\n+                        .shouldHaveExitValue(0);\n@@ -318,0 +314,3 @@\n+        public String name() {\n+            return name;\n+        }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJcmdWithSideCar.java","additions":34,"deletions":35,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-        if (stdout != stdoutLimited) {\n+        if (!stdout.equals(stdoutLimited)) {\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerTestUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}