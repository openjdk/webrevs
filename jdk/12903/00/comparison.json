{"files":[{"patch":"@@ -2615,0 +2615,12 @@\n+     * @apiNote\n+     * Unlike {@link #substring(int)}, for example, this method does not throw\n+     * an exception when {@code fromIndex} is outside the valid range.\n+     * Rather, it returns -1 when {@code fromIndex} is larger than the length of\n+     * the string.\n+     * This result is, by itself, indistinguishable from a genuine absence of\n+     * {@code str} in the string.\n+     * If stricter behavior is needed, {@link #indexOf(String, int, int)}\n+     * should be considered instead.\n+     * On {@link String}s {@code s} and a non-empty {@code str}, for example,\n+     * {@code s.indexOf(str, fromIndex, s.length())} would throw if\n+     * {@code fromIndex} were larger than the string length, or were negative.\n@@ -2620,0 +2632,33 @@\n+    \/**\n+     * Returns the smallest index of an occurrence of the specified substring\n+     * within the specified index range of {@code this} string.\n+     *\n+     * <p>This method returns the same result as the one of the invocation\n+     * <pre>{@code\n+     *     s.substring(beginIndex, endIndex).indexOf(str) + beginIndex\n+     * }<\/pre>\n+     * if the index returned by {@link #indexOf(String)} is non-negative,\n+     * and returns -1 otherwise.\n+     * (No substring is instantiated, though.)\n+     *\n+     * @param   str         the substring to search for.\n+     * @param   beginIndex  the index to start the search from (included).\n+     * @param   endIndex    the index to stop the search at (excluded).\n+     * @return  the index of the first occurrence of the specified substring\n+     *          within the specified index range,\n+     *          or {@code -1} if there is no such occurrence.\n+     * @throws  StringIndexOutOfBoundsException if {@code beginIndex}\n+     *          is negative, or {@code endIndex} is larger than the length of\n+     *          this {@code String} object, or {@code beginIndex} is larger than\n+     *          {@code endIndex}.\n+     * @since   21\n+     *\/\n+    public int indexOf(String str, int beginIndex, int endIndex) {\n+        if (str.length() == 1) {\n+            \/* Simple optimization, can be omitted without behavioral impact *\/\n+            return indexOf(str.charAt(0), beginIndex, endIndex);\n+        }\n+        checkBoundsBeginEnd(beginIndex, endIndex, length());\n+        return indexOf(value, coder(), endIndex, str, beginIndex);\n+    }\n+\n@@ -2627,1 +2672,1 @@\n-     * @param   srcCount  length of the source string.\n+     * @param   srcCount  last index (exclusive) in the source string.\n@@ -2633,9 +2678,4 @@\n-        byte[] tgt    = tgtStr.value;\n-        byte tgtCoder = tgtStr.coder();\n-        int tgtCount  = tgtStr.length();\n-\n-        if (fromIndex >= srcCount) {\n-            return (tgtCount == 0 ? srcCount : -1);\n-        }\n-        if (fromIndex < 0) {\n-            fromIndex = 0;\n+        fromIndex = Math.clamp(fromIndex, 0, srcCount);\n+        int tgtCount = tgtStr.length();\n+        if (tgtCount > srcCount - fromIndex) {\n+            return -1;\n@@ -2646,3 +2686,3 @@\n-        if (tgtCount > srcCount) {\n-            return -1;\n-        }\n+\n+        byte[] tgt = tgtStr.value;\n+        byte tgtCoder = tgtStr.coder();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":53,"deletions":13,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n- * @bug 8302590\n- * @summary This one is for String.indexOf(int,int,int).\n+ * @bug 8302590 8303648\n+ * @summary This one is for String.indexOf([int|String],int,int).\n@@ -198,0 +198,177 @@\n+    @DataProvider\n+    public Object[][] resultsStr() {\n+        return new Object[][] {\n+\n+                new Object[] { STRING_EMPTY, \"A\", 0, 0, -1 },\n+                new Object[] { STRING_EMPTY, \"\", 0, 0, 0 },\n+\n+                new Object[] { STRING_L1, \"A\", 0, 1, 0 },\n+                new Object[] { STRING_L1, \"A\", 1, 1, -1 },\n+                new Object[] { STRING_L1, \"AB\", 0, 1, -1 },\n+                new Object[] { STRING_L1, \"\", 0, 0, 0 },\n+                new Object[] { STRING_L1, \"\", 0, 1, 0 },\n+                new Object[] { STRING_L1, \"\", 1, 1, 1 },\n+\n+                new Object[] { STRING_L2, \"A\", 0, 2, 0 },\n+                new Object[] { STRING_L2, \"A\", 0, 1, 0 },\n+                new Object[] { STRING_L2, \"A\", 1, 2, -1 },\n+                new Object[] { STRING_L2, \"B\", 0, 2, 1 },\n+                new Object[] { STRING_L2, \"B\", 1, 2, 1 },\n+                new Object[] { STRING_L2, \"B\", 0, 0, -1 },\n+                new Object[] { STRING_L2, \"AB\", 0, 2, 0 },\n+                new Object[] { STRING_L2, \"AB\", 1, 2, -1 },\n+                new Object[] { STRING_L2, \"AB\", 0, 1, -1 },\n+                new Object[] { STRING_L2, \"\", 0, 2, 0 },\n+                new Object[] { STRING_L2, \"\", 1, 2, 1 },\n+                new Object[] { STRING_L2, \"\", 2, 2, 2 },\n+\n+                new Object[] { STRING_L4, \"ABCD\", 0, 4, 0 },\n+                new Object[] { STRING_L4, \"ABCD\", 0, 3, -1 },\n+                new Object[] { STRING_L4, \"ABCD\", 1, 4, -1 },\n+                new Object[] { STRING_L4, \"BC\", 0, 4, 1 },\n+                new Object[] { STRING_L4, \"BC\", 0, 3, 1 },\n+                new Object[] { STRING_L4, \"BC\", 1, 4, 1 },\n+                new Object[] { STRING_L4, \"BC\", 1, 2, -1 },\n+                new Object[] { STRING_L4, \"BC\", 2, 4, -1 },\n+                new Object[] { STRING_L4, \"A\", 0, 4, 0 },\n+                new Object[] { STRING_L4, \"A\", 1, 4, -1 },\n+                new Object[] { STRING_L4, \"CD\", 0, 4, 2 },\n+                new Object[] { STRING_L4, \"CD\", 2, 4, 2 },\n+                new Object[] { STRING_L4, \"CD\", 1, 4, 2 },\n+                new Object[] { STRING_L4, \"CD\", 0, 3, -1 },\n+                new Object[] { STRING_L4, \"A\", 2, 4, -1 },\n+                new Object[] { STRING_L4, \"A\", 2, 2, -1 },\n+                new Object[] { STRING_L4, \"A\", 4, 4, -1 },\n+                new Object[] { STRING_L4, \"ABCDE\", 0, 4, -1 },\n+\n+                new Object[] { STRING_LLONG, \"ABCDEFGH\", 0, 8, 0 },\n+                new Object[] { STRING_LLONG, \"ABCDEFGH\", 1, 8, -1 },\n+                new Object[] { STRING_LLONG, \"ABCDEFGH\", 0, 7, -1 },\n+                new Object[] { STRING_LLONG, \"DEFGH\", 0, 8, 3 },\n+                new Object[] { STRING_LLONG, \"DEFGH\", 3, 8, 3 },\n+                new Object[] { STRING_LLONG, \"DEFGH\", 4, 8, -1 },\n+                new Object[] { STRING_LLONG, \"DEFGH\", 0, 7, -1 },\n+                new Object[] { STRING_LLONG, \"A\", 0, 8, 0 },\n+                new Object[] { STRING_LLONG, \"A\", 1, 8, -1 },\n+                new Object[] { STRING_LLONG, \"A\", 0, 0, -1 },\n+                new Object[] { STRING_LLONG, \"GHI\", 0, 8, -1 },\n+                new Object[] { STRING_LLONG, \"GHI\", 8, 8, -1 },\n+                new Object[] { STRING_LLONG, \"\", 4, 4, 4 },\n+                new Object[] { STRING_LLONG, \"\", 4, 8, 4 },\n+                new Object[] { STRING_LLONG, \"\", 8, 8, 8 },\n+\n+                new Object[] { STRING_U1, \"\\uFF21\", 0, 1, 0 },\n+                new Object[] { STRING_U1, \"\\uFF21\", 0, 0, -1 },\n+                new Object[] { STRING_U1, \"\\uFF21\", 1, 1, -1 },\n+                new Object[] { STRING_U1, \"\\uFF21A\", 0, 1, -1 },\n+\n+                new Object[] { STRING_U2, \"\\uFF21\\uFF22\", 0, 2, 0 },\n+                new Object[] { STRING_U2, \"\\uFF21\\uFF22\", 1, 2, -1 },\n+                new Object[] { STRING_U2, \"\\uFF22\", 0, 2, 1 },\n+                new Object[] { STRING_U2, \"\\uFF22\", 0, 1, -1 },\n+                new Object[] { STRING_U2, \"\\uFF22\", 1, 2, 1 },\n+                new Object[] { STRING_U2, \"\\uFF21\", 1, 2, -1 },\n+                new Object[] { STRING_U2, \"\\uFF21\", 0, 1, 0 },\n+                new Object[] { STRING_U2, \"\", 0, 1, 0 },\n+                new Object[] { STRING_U2, \"\", 1, 1, 1 },\n+                new Object[] { STRING_U2, \"\", 2, 2, 2 },\n+\n+                new Object[] { STRING_M12, \"\\uFF21A\", 0, 2, 0 },\n+                new Object[] { STRING_M12, \"\\uFF21A\", 0, 1, -1 },\n+                new Object[] { STRING_M12, \"\\uFF21A\", 1, 2, -1 },\n+                new Object[] { STRING_M12, \"A\", 1, 2, 1 },\n+                new Object[] { STRING_M12, \"A\", 0, 2, 1 },\n+                new Object[] { STRING_M12, \"A\", 0, 1, -1 },\n+                new Object[] { STRING_M12, \"\\uFF21\", 0, 2, 0 },\n+                new Object[] { STRING_M12, \"\\uFF21\", 0, 1, 0 },\n+                new Object[] { STRING_M12, \"\\uFF21\", 1, 2, -1 },\n+\n+                new Object[] { STRING_M11, \"A\\uFF21\", 0, 2, 0 },\n+                new Object[] { STRING_M11, \"\\uFF21\", 1, 2, 1 },\n+                new Object[] { STRING_M11, \"A\\uFF21\", 1, 2, -1 },\n+                new Object[] { STRING_M11, \"A\\uFF21A\", 0, 2, -1 },\n+\n+                new Object[] {\n+                        STRING_UDUPLICATE,\n+                        \"\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        0, 10, 0 },\n+                new Object[] {\n+                        STRING_UDUPLICATE,\n+                        \"\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        0, 9, -1 },\n+                new Object[] {\n+                        STRING_UDUPLICATE,\n+                        \"\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        1, 10, -1 },\n+                new Object[] {\n+                        STRING_UDUPLICATE,\n+                        \"\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        1, 10, 1 },\n+                new Object[] {\n+                        STRING_UDUPLICATE,\n+                        \"\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        0, 10, 1 },\n+                new Object[] {\n+                        STRING_UDUPLICATE,\n+                        \"\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        0, 9, -1 },\n+                new Object[] { STRING_UDUPLICATE, \"\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        4, 10, 4 },\n+                new Object[] { STRING_UDUPLICATE, \"\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        3, 8, 4 },\n+                new Object[] { STRING_UDUPLICATE, \"\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        2, 7, 2 },\n+                new Object[] { STRING_UDUPLICATE, \"\\uFF21\\uFF22\\uFF21\\uFF22\",\n+                        7, 10, -1 },\n+                new Object[] { STRING_UDUPLICATE, \"\",\n+                        7, 10, 7 },\n+                new Object[] { STRING_UDUPLICATE, \"\",\n+                        10, 10, 10 },\n+        };\n+    }\n+\n+    @DataProvider\n+    public Object[][] exceptionsStr() {\n+        return new Object[][]{\n+                new Object[]{STRING_LDUPLICATE, \"\", -1, 0},\n+                new Object[]{STRING_LDUPLICATE, \"\", 0, 100},\n+                new Object[]{STRING_LDUPLICATE, \"\", -1, 100},\n+                new Object[]{STRING_LDUPLICATE, \"\", 3, 1},\n+\n+                new Object[]{STRING_UDUPLICATE, \"\", -1, 0},\n+                new Object[]{STRING_UDUPLICATE, \"\", 0, 100},\n+                new Object[]{STRING_UDUPLICATE, \"\", -1, 100},\n+                new Object[]{STRING_UDUPLICATE, \"\", 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE1, \"\", -1, 0},\n+                new Object[]{STRING_MDUPLICATE1, \"\", 0, 100},\n+                new Object[]{STRING_MDUPLICATE1, \"\", -1, 100},\n+                new Object[]{STRING_MDUPLICATE1, \"\", 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE2, \"\", -1, 0},\n+                new Object[]{STRING_MDUPLICATE2, \"\", 0, 100},\n+                new Object[]{STRING_MDUPLICATE2, \"\", -1, 100},\n+                new Object[]{STRING_MDUPLICATE2, \"\", 3, 1},\n+\n+                new Object[]{STRING_LDUPLICATE, \"A\", -1, 0},\n+                new Object[]{STRING_LDUPLICATE, \"A\", 0, 100},\n+                new Object[]{STRING_LDUPLICATE, \"A\", -1, 100},\n+                new Object[]{STRING_LDUPLICATE, \"A\", 3, 1},\n+\n+                new Object[]{STRING_UDUPLICATE, \"A\", -1, 0},\n+                new Object[]{STRING_UDUPLICATE, \"A\", 0, 100},\n+                new Object[]{STRING_UDUPLICATE, \"A\", -1, 100},\n+                new Object[]{STRING_UDUPLICATE, \"A\", 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE1, \"A\", -1, 0},\n+                new Object[]{STRING_MDUPLICATE1, \"A\", 0, 100},\n+                new Object[]{STRING_MDUPLICATE1, \"A\", -1, 100},\n+                new Object[]{STRING_MDUPLICATE1, \"A\", 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE2, \"A\", -1, 0},\n+                new Object[]{STRING_MDUPLICATE2, \"A\", 0, 100},\n+                new Object[]{STRING_MDUPLICATE2, \"A\", -1, 100},\n+                new Object[]{STRING_MDUPLICATE2, \"A\", 3, 1},\n+        };\n+    }\n+\n@@ -211,0 +388,13 @@\n+    @Test(dataProvider = \"resultsStr\")\n+    public void testIndexOf(String str, String sub, int from, int to, int expected) {\n+        assertEquals(str.indexOf(sub, from, to), expected,\n+                String.format(\"testing String(%s).indexOf(%s,%d,%d)\",\n+                        escapeNonASCIIs(str), escapeNonASCIIs(sub), from, to));\n+    }\n+\n+    @Test(dataProvider = \"exceptionsStr\")\n+    public void testIndexOf(String str, String sub, int from, int to) {\n+        assertThrows(StringIndexOutOfBoundsException.class,\n+                () -> str.indexOf(sub, from, to));\n+    }\n+\n@@ -223,0 +413,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/String\/IndexOfBeginEnd.java","additions":193,"deletions":2,"binary":false,"changes":195,"status":"modified"}]}