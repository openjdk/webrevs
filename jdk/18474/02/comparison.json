{"files":[{"patch":"@@ -91,1 +91,1 @@\n- *     linker.defaultLookup().find(\"strlen\").orElseThrow(),\n+ *     linker.defaultLookup().findOrThrow(\"strlen\"),\n@@ -309,1 +309,1 @@\n- *     linker.defaultLookup().find(\"qsort\").orElseThrow(),\n+ *     linker.defaultLookup().findOrThrow(\"qsort\"),\n@@ -400,1 +400,1 @@\n- *     linker.defaultLookup().find(\"malloc\").orElseThrow(),\n+ *     linker.defaultLookup().findOrThrow(\"malloc\"),\n@@ -405,1 +405,1 @@\n- *     linker.defaultLookup().find(\"free\").orElseThrow(),\n+ *     linker.defaultLookup().findOrThrow(\"free\"),\n@@ -533,1 +533,1 @@\n- *     linker.defaultLookup().find(\"printf\").orElseThrow(),\n+ *     linker.defaultLookup().findOrThrow(\"printf\"),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n- *     MemorySegment glGetString = libGL.find(\"glGetString\").orElseThrow();\n+ *     MemorySegment glGetString = libGL.findOrThrow(\"glGetString\");\n@@ -96,1 +96,1 @@\n- * MemorySegment glGetString = libGL.find(\"glGetString\").orElseThrow();\n+ * MemorySegment glGetString = libGL.findOrThrow(\"glGetString\");\n@@ -133,1 +133,1 @@\n- * MemorySegment malloc = stdlib.find(\"malloc\").orElseThrow();\n+ * MemorySegment malloc = stdlib.findOrThrow(\"malloc\");\n@@ -147,0 +147,1 @@\n+     * @see #findOrThrow(String)\n@@ -150,0 +151,30 @@\n+    \/**\n+     * Returns the address of the symbol with the given name or throws an Exception.\n+     *<p>\n+     * This is equivalent to the following code, but is more efficient:\n+     * to:\n+     * {@snippet lang= java :\n+     *    String name = ...\n+     *    MemorySegment address = lookup.find(name)\n+     *        .orElseThrow(() -> new IllegalArgumentException(\"Symbol not found: \" + name));\n+     * }\n+     *\n+     * @param name the symbol name\n+     * @return a zero-length memory segment whose address indicates the address of\n+     *         the symbol\n+     * @throws IllegalArgumentException if no symbol address can be found for the\n+     *         given name\n+     * @see #find(String)\n+     *\n+     * @since 23\n+     *\/\n+    default MemorySegment findOrThrow(String name) {\n+        Objects.requireNonNull(name);\n+        Optional<MemorySegment> address = find(name);\n+        \/\/ Avoid lambda capturing\n+        if (address.isPresent()) {\n+            return address.get();\n+        }\n+        throw new IllegalArgumentException(\"Symbol not found: \" + name);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n- *     stdlib.find(\"strlen\").orElseThrow(),\n+ *     stdlib.findOrThrow(\"strlen\"),\n@@ -114,1 +114,1 @@\n- * and we use it to {@linkplain java.lang.foreign.SymbolLookup#find(java.lang.String) look up}\n+ * and we use it to {@linkplain java.lang.foreign.SymbolLookup#findOrThrow(java.lang.String)}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-                    linker.defaultLookup().find(\"strlen\").orElseThrow(),\n+                    linker.defaultLookup().findOrThrow(\"strlen\"),\n@@ -180,1 +180,1 @@\n-                    linker.defaultLookup().find(\"qsort\").orElseThrow(),\n+                    linker.defaultLookup().findOrThrow(\"qsort\"),\n@@ -211,1 +211,1 @@\n-                    linker.defaultLookup().find(\"malloc\").orElseThrow(),\n+                    linker.defaultLookup().findOrThrow(\"malloc\"),\n@@ -216,1 +216,1 @@\n-                    linker.defaultLookup().find(\"free\").orElseThrow(),\n+                    linker.defaultLookup().findOrThrow(\"free\"),\n@@ -285,1 +285,1 @@\n-                    linker.defaultLookup().find(\"printf\").orElseThrow(),\n+                    linker.defaultLookup().findOrThrow(\"printf\"),\n@@ -571,1 +571,1 @@\n-                    stdlib.find(\"strlen\").orElseThrow(),\n+                    stdlib.findOrThrow(\"strlen\"),\n@@ -629,1 +629,1 @@\n-                MemorySegment glGetString = libGL.find(\"glGetString\").orElseThrow();\n+                MemorySegment glGetString = libGL.findOrThrow(\"glGetString\");\n@@ -636,1 +636,1 @@\n-            MemorySegment glGetString = libGL.find(\"glGetString\").orElseThrow();\n+            MemorySegment glGetString = libGL.findOrThrow(\"glGetString\");\n@@ -650,1 +650,1 @@\n-            MemorySegment malloc = stdlib.find(\"malloc\").orElseThrow();\n+            MemorySegment malloc = stdlib.findOrThrow(\"malloc\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/snippet-files\/Snippets.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-            MemorySegment funcs = fallbackLibLookup.find(\"funcs\").orElseThrow()\n+            MemorySegment funcs = fallbackLibLookup.findOrThrow(\"funcs\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        Optional<MemorySegment> malloc_symbol = SYM_LOOKUP.find(\"malloc\");\n+        MemorySegment malloc_symbol = SYM_LOOKUP.findOrThrow(\"malloc\");\n@@ -173,1 +173,1 @@\n-        MethodHandle tmp1 = LINKER.downcallHandle(malloc_symbol.get(), mallocDescriptor);\n+        MethodHandle tmp1 = LINKER.downcallHandle(malloc_symbol, mallocDescriptor);\n@@ -178,1 +178,1 @@\n-        Optional<MemorySegment> create_face_symbol = SYM_LOOKUP.find(\"HBCreateFace\");\n+        MemorySegment create_face_symbol = SYM_LOOKUP.findOrThrow(\"HBCreateFace\");\n@@ -180,1 +180,1 @@\n-        MethodHandle tmp2 = LINKER.downcallHandle(create_face_symbol.get(), createFaceDescriptor);\n+        MethodHandle tmp2 = LINKER.downcallHandle(create_face_symbol, createFaceDescriptor);\n@@ -184,1 +184,1 @@\n-        Optional<MemorySegment> dispose_face_symbol = SYM_LOOKUP.find(\"HBDisposeFace\");\n+        MemorySegment dispose_face_symbol = SYM_LOOKUP.findOrThrow(\"HBDisposeFace\");\n@@ -186,1 +186,1 @@\n-        MethodHandle tmp3 = LINKER.downcallHandle(dispose_face_symbol.get(), disposeFaceDescriptor);\n+        MethodHandle tmp3 = LINKER.downcallHandle(dispose_face_symbol, disposeFaceDescriptor);\n@@ -207,1 +207,1 @@\n-        Optional<MemorySegment> shape_sym = SYM_LOOKUP.find(\"jdk_hb_shape\");\n+        MemorySegment shape_sym = SYM_LOOKUP.findOrThrow(\"jdk_hb_shape\");\n@@ -209,1 +209,1 @@\n-        MethodHandle tmp4 = LINKER.downcallHandle(shape_sym.get(), shapeDesc);\n+        MethodHandle tmp4 = LINKER.downcallHandle(shape_sym, shapeDesc);\n@@ -263,1 +263,1 @@\n-        Optional<MemorySegment> create_font_funcs_symbol = SYM_LOOKUP.find(\"HBCreateFontFuncs\");\n+        MemorySegment create_font_funcs_symbol = SYM_LOOKUP.findOrThrow(\"HBCreateFontFuncs\");\n@@ -266,1 +266,1 @@\n-            LINKER.downcallHandle(create_font_funcs_symbol.get(), createFontFuncsDescriptor);\n+            LINKER.downcallHandle(create_font_funcs_symbol, createFontFuncsDescriptor);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/HBShaper.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    final static MethodHandle foo = abi.downcallHandle(lookup.find(\"foo\").get(),\n+    final static MethodHandle foo = abi.downcallHandle(lookup.findOrThrow(\"foo\"),\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestLinkToNativeRBP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-                        Linker.nativeLinker().defaultLookup().find(\"calloc\").get(),\n+                        Linker.nativeLinker().defaultLookup().findOrThrow(\"calloc\"),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private static Linker LINKER = Linker.nativeLinker();\n+    private static final Linker LINKER = Linker.nativeLinker();\n@@ -76,1 +76,1 @@\n-            LINKER.defaultLookup().find(\"free\").get(), FunctionDescriptor.ofVoid(C_POINTER));\n+            LINKER.defaultLookup().findOrThrow(\"free\"), FunctionDescriptor.ofVoid(C_POINTER));\n@@ -79,1 +79,1 @@\n-            LINKER.defaultLookup().find(\"malloc\").get(), FunctionDescriptor.of(C_POINTER, ValueLayout.JAVA_LONG));\n+            LINKER.defaultLookup().findOrThrow(\"malloc\"), FunctionDescriptor.of(C_POINTER, ValueLayout.JAVA_LONG));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CLayouts.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-            func_addr = loaderLibs.find(\"func\").orElseThrow();\n+            func_addr = loaderLibs.findOrThrow(\"func\");\n@@ -121,1 +121,1 @@\n-            identity_addr = loaderLibs.find(\"identity\").orElseThrow();\n+            identity_addr = loaderLibs.findOrThrow(\"identity\");\n@@ -128,1 +128,1 @@\n-        identity_struct_addr = loaderLibs.find(\"identity_struct\").orElseThrow();\n+        identity_struct_addr = loaderLibs.findOrThrow(\"identity_struct\");\n@@ -133,1 +133,1 @@\n-        identity_struct_3_addr = loaderLibs.find(\"identity_struct_3\").orElseThrow();\n+        identity_struct_3_addr = loaderLibs.findOrThrow(\"identity_struct_3\");\n@@ -138,1 +138,1 @@\n-        identity_memory_address_addr = loaderLibs.find(\"identity_memory_address\").orElseThrow();\n+        identity_memory_address_addr = loaderLibs.findOrThrow(\"identity_memory_address\");\n@@ -143,1 +143,1 @@\n-        identity_memory_address_3_addr = loaderLibs.find(\"identity_memory_address_3\").orElseThrow();\n+        identity_memory_address_3_addr = loaderLibs.findOrThrow(\"identity_memory_address_3\");\n@@ -148,1 +148,1 @@\n-        args1_addr = loaderLibs.find(\"args1\").orElseThrow();\n+        args1_addr = loaderLibs.findOrThrow(\"args1\");\n@@ -153,1 +153,1 @@\n-        args2_addr = loaderLibs.find(\"args2\").orElseThrow();\n+        args2_addr = loaderLibs.findOrThrow(\"args2\");\n@@ -158,1 +158,1 @@\n-        args3_addr = loaderLibs.find(\"args3\").orElseThrow();\n+        args3_addr = loaderLibs.findOrThrow(\"args3\");\n@@ -163,1 +163,1 @@\n-        args4_addr = loaderLibs.find(\"args4\").orElseThrow();\n+        args4_addr = loaderLibs.findOrThrow(\"args4\");\n@@ -168,1 +168,1 @@\n-        args5_addr = loaderLibs.find(\"args5\").orElseThrow();\n+        args5_addr = loaderLibs.findOrThrow(\"args5\");\n@@ -173,1 +173,1 @@\n-        args10_addr = loaderLibs.find(\"args10\").orElseThrow();\n+        args10_addr = loaderLibs.findOrThrow(\"args10\");\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadHelper.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        MemorySegment sumIntsSym = lookup.find(\"sum_ints\").get();\n+        MemorySegment sumIntsSym = lookup.findOrThrow(\"sum_ints\");\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CriticalCalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        F_LONG_LONG = abi.downcallHandle(loaderLibs.find(\"id_long_long\").get(),\n+        F_LONG_LONG = abi.downcallHandle(loaderLibs.findOrThrow(\"id_long_long\"),\n@@ -63,1 +63,1 @@\n-        F_PTR_LONG = abi.downcallHandle(loaderLibs.find(\"id_ptr_long\").get(),\n+        F_PTR_LONG = abi.downcallHandle(loaderLibs.findOrThrow(\"id_ptr_long\"),\n@@ -65,1 +65,1 @@\n-        F_LONG_PTR = abi.downcallHandle(loaderLibs.find(\"id_long_ptr\").get(),\n+        F_LONG_PTR = abi.downcallHandle(loaderLibs.findOrThrow(\"id_long_ptr\"),\n@@ -67,1 +67,1 @@\n-        F_PTR_PTR = abi.downcallHandle(loaderLibs.find(\"id_ptr_ptr\").get(),\n+        F_PTR_PTR = abi.downcallHandle(loaderLibs.findOrThrow(\"id_ptr_ptr\"),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    static MemorySegment qsort_addr = abi.defaultLookup().find(\"qsort\").get();\n+    static MemorySegment qsort_addr = abi.defaultLookup().findOrThrow(\"qsort\");\n@@ -77,1 +77,1 @@\n-            native_compar = SymbolLookup.loaderLookup().find(\"compar\").orElseThrow();\n+            native_compar = SymbolLookup.loaderLookup().findOrThrow(\"compar\");\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/QSort.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        STRLEN = abi.downcallHandle(abi.defaultLookup().find(\"strlen\").get(),\n+        STRLEN = abi.downcallHandle(abi.defaultLookup().findOrThrow(\"strlen\"),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        STRLEN = abi.downcallHandle(abi.defaultLookup().find(\"strlen\").get(),\n+        STRLEN = abi.downcallHandle(abi.defaultLookup().findOrThrow(\"strlen\"),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ToCStringTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-                SymbolLookup.loaderLookup().find(name).orElseThrow(),\n+                SymbolLookup.loaderLookup().findOrThrow(name),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/Upcalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                loaderLibs.find(\"distance\").get(),\n+                loaderLibs.findOrThrow(\"distance\"),\n@@ -55,1 +55,1 @@\n-                loaderLibs.find(\"distance_ptrs\").get(),\n+                loaderLibs.findOrThrow(\"distance_ptrs\"),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -20,1 +20,1 @@\n-        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().find(\"xor_op\").orElseThrow(), xor_op_func, critical(true));\n+        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().findOrThrow(\"xor_op\"), xor_op_func, critical(true));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayForeignXorOpCriticalImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().find(\"xor_op\").orElseThrow(), xor_op_func, critical(false));\n+        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().findOrThrow(\"xor_op\"), xor_op_func, critical(false));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayForeignXorOpImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().find(\"xor_op\").orElseThrow(), xor_op_func, critical(false));\n+        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().findOrThrow(\"xor_op\"), xor_op_func, critical(false));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayForeignXorOpInitImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().find(\"xor_op\").orElseThrow(), xor_op_func, critical(false));\n+        xor_op = linker.downcallHandle(SymbolLookup.loaderLookup().findOrThrow(\"xor_op\"), xor_op_func, critical(false));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayUnsafeXorOpImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}