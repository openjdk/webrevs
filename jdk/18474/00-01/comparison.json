{"files":[{"patch":"@@ -152,2 +152,1 @@\n-     * {@return the address of the symbol with the provided {@code name} or throws an\n-     *          {@linkplain IllegalArgumentException} if no such address can be found}\n+     * Returns the address of the symbol with the given name or throws an Exception.\n@@ -155,1 +154,1 @@\n-     * This is a convenience method that provides better exception messages compared\n+     * This is equivalent to the following code, but is more resource efficient:\n@@ -158,2 +157,3 @@\n-     *    MemorySegment address = lookup.find(\"foo\")\n-     *        .orElseThrow(IllegalArgumentException::new);\n+     *    String name = ...\n+     *    MemorySegment address = lookup.find(name)\n+     *        .orElseThrow(() -> new IllegalArgumentException(\"Symbol not found: \" + name));\n@@ -162,1 +162,3 @@\n-     * @param name the symbol name to look up\n+     * @param name the symbol name\n+     * @return a zero-length memory segment whose address indicates the address of\n+     *         the symbol\n@@ -164,1 +166,1 @@\n-     *         provided name\n+     *         given name\n@@ -172,1 +174,1 @@\n-        \/\/ Avoid capturing lambda\n+        \/\/ Avoid lambda capturing\n@@ -176,2 +178,1 @@\n-        throw new IllegalArgumentException(\n-                \"Unable to to find a symbol with the name: \" + name);\n+        throw new IllegalArgumentException(\"Symbol not found: \" + name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}