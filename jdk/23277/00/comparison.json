{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,13 @@\n- * Models the access flags for a class, method, or field.  Delivered as a\n- * {@link ClassElement}, {@link FieldElement}, or {@link MethodElement}\n- * when traversing the corresponding model type.\n+ * Models the access flags for a class, method, or field.  The access flags\n+ * appears exactly once in each class, method, or field; a {@link\n+ * ClassBuilder} and a {@link FieldBuilder} chooses an unspecified default value\n+ * if access flags are not provided, and a {@link MethodBuilder} is always\n+ * created with access flags.\n+ * <p>\n+ * {@code AccessFlags} cannot be created via a factory method directly; it can\n+ * be created with {@code withFlags} methods on the respective builders.\n+ * <p>\n+ * A {@link MethodBuilder} throws an {@link IllegalArgumentException} if it is\n+ * supplied an {@code AccessFlags} object that changes the preexisting\n+ * {@link ClassFile#ACC_STATIC ACC_STATIC} flag of the builder, because the\n+ * access flag change may invalidate previously supplied data to the builder.\n@@ -37,0 +47,13 @@\n+ * @apiNote\n+ * The access flags of classes, methods, and fields are modeled as a standalone\n+ * object to support streaming as elements for {@link ClassFileTransform}.\n+ * Other access flags are not elements of a {@link CompoundElement} and thus not\n+ * modeled by {@code AccessFlags}; they provide their own {@code flagsMask},\n+ * {@code flags}, and {@code has} methods.\n+ *\n+ * @see ClassModel#flags()\n+ * @see FieldModel#flags()\n+ * @see MethodModel#flags()\n+ * @see ClassBuilder#withFlags\n+ * @see FieldBuilder#withFlags\n+ * @see MethodBuilder#withFlags\n@@ -49,1 +72,4 @@\n-     * {@return the access flags}\n+     * {@return the access flags, as a set of flag enums}\n+     *\n+     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n+     * @see #location()\n@@ -54,3 +80,4 @@\n-     * {@return whether the specified flag is present}  The specified flag\n-     * should be a valid flag for the classfile location associated with this\n-     * element otherwise false is returned.\n+     * {@return whether the specified flag is set}  If the specified flag\n+     * is not available to this {@linkplain #location() location}, returns\n+     * {@code false}.\n+     *\n@@ -58,0 +85,1 @@\n+     * @see #location()\n@@ -62,2 +90,6 @@\n-     * {@return the classfile location for this element, which is either class,\n-     * method, or field}\n+     * {@return the {@code class} file location for this element, which is\n+     * either class, method, or field}\n+     *\n+     * @see AccessFlag.Location#CLASS\n+     * @see AccessFlag.Location#FIELD\n+     * @see AccessFlag.Location#METHOD\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AccessFlags.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_ANNOTATION}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_ANNOTATION}.\n@@ -69,1 +69,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_ARRAY}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_ARRAY}.\n@@ -125,1 +125,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_STRING}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_STRING}.\n@@ -152,1 +152,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_DOUBLE}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_DOUBLE}.\n@@ -179,1 +179,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_FLOAT}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_FLOAT}.\n@@ -206,1 +206,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_LONG}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_LONG}.\n@@ -233,1 +233,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_INT}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_INT}.\n@@ -260,1 +260,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_SHORT}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_SHORT}.\n@@ -290,1 +290,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_CHAR}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_CHAR}.\n@@ -320,1 +320,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_BYTE}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_BYTE}.\n@@ -350,1 +350,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_BOOLEAN}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_BOOLEAN}.\n@@ -380,1 +380,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_CLASS}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_CLASS}.\n@@ -397,1 +397,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value TAG_ENUM}.\n+     * The {@linkplain #tag tag} of this value is {@value %c TAG_ENUM}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+ * <p>\n+ * Unless otherwise specified, most attributes that can be discovered in a\n+ * {@link CompoundElement} implements the corresponding {@linkplain\n+ * ClassFileElement##membership membership subinterface} of {@code\n+ * ClassFileElement}, and can be sent to a {@link ClassFileBuilder} to be\n+ * integrated into the built structure.\n@@ -43,0 +49,1 @@\n+ * @see java.lang.classfile.attribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AttributedElement.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.lang.classfile.attribute.CodeAttribute;\n@@ -30,0 +29,1 @@\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -44,5 +44,9 @@\n- * A builder for classfiles.  Builders are not created directly; they are passed\n- * to handlers by methods such as {@link ClassFile#build(ClassDesc, Consumer)}\n- * or to class transforms.  The elements of a classfile can be specified\n- * abstractly (by passing a {@link ClassElement} to {@link #with(ClassFileElement)})\n- * or concretely by calling the various {@code withXxx} methods.\n+ * A builder for a {@code class} file.  {@link ClassFile} provides different\n+ * {@code build} methods that accept handlers to configure such a builder;\n+ * {@link ClassFile#build(ClassDesc, Consumer)} suffices for basic usage, while\n+ * {@link ClassFile#build(ClassEntry, ConstantPoolBuilder, Consumer)} allows\n+ * fine-grained control over {@linkplain ClassFileBuilder#constantPool() the\n+ * constant pool}.\n+ * <p>\n+ * Refer to {@link ClassFileBuilder} for general guidance and caution around\n+ * the use of builders for structures in the {@code class} file format.\n@@ -50,0 +54,2 @@\n+ * @see ClassFile#build(ClassEntry, ConstantPoolBuilder, Consumer)\n+ * @see ClassModel\n@@ -51,1 +57,0 @@\n- *\n@@ -59,1 +64,2 @@\n-     * Sets the classfile version.\n+     * Sets the version of this class.\n+     *\n@@ -63,0 +69,1 @@\n+     * @see ClassFileVersion\n@@ -69,1 +76,2 @@\n-     * Sets the classfile access flags.\n+     * Sets the access flags of this class.\n+     *\n@@ -72,0 +80,2 @@\n+     * @see AccessFlags\n+     * @see AccessFlag.Location#CLASS\n@@ -78,2 +88,3 @@\n-     * Sets the classfile access flags.\n-     * @param flags the access flags\n+     * Sets the access flags of this class.\n+     *\n+     * @param flags the access flags, as flag enums\n@@ -81,0 +92,4 @@\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#CLASS} location\n+     * @see AccessFlags\n+     * @see AccessFlag.Location#CLASS\n@@ -88,0 +103,1 @@\n+     *\n@@ -90,0 +106,1 @@\n+     * @see Superclass\n@@ -97,0 +114,1 @@\n+     *\n@@ -100,0 +118,1 @@\n+     * @see Superclass\n@@ -107,0 +126,1 @@\n+     *\n@@ -109,0 +129,1 @@\n+     * @see Interfaces\n@@ -116,0 +137,1 @@\n+     *\n@@ -118,0 +140,1 @@\n+     * @see Interfaces\n@@ -125,0 +148,1 @@\n+     *\n@@ -127,0 +151,2 @@\n+     * @throws IllegalArgumentException if any element of {@code interfaces} is primitive\n+     * @see Interfaces\n@@ -134,0 +160,1 @@\n+     *\n@@ -136,0 +163,2 @@\n+     * @throws IllegalArgumentException if any element of {@code interfaces} is primitive\n+     * @see Interfaces\n@@ -138,1 +167,1 @@\n-        \/\/ List view, since ref to interfaces is temporary\n+        \/\/ list version does defensive copy\n@@ -144,4 +173,4 @@\n-     * @param name the name of the field\n-     * @param descriptor the field descriptor\n-     * @param handler handler which receives a {@link FieldBuilder} which can\n-     *                    further define the contents of the field\n+     *\n+     * @param name the field name\n+     * @param descriptor the field descriptor string\n+     * @param handler handler to supply the contents of the field\n@@ -149,0 +178,1 @@\n+     * @see FieldModel\n@@ -155,4 +185,5 @@\n-     * Adds a field.\n-     * @param name the name of the field\n-     * @param descriptor the field descriptor\n-     * @param flags the access flags for this field\n+     * Adds a field, with only access flags.\n+     *\n+     * @param name the field name\n+     * @param descriptor the field descriptor string\n+     * @param flags the access flags for this field, as a bit mask\n@@ -160,0 +191,2 @@\n+     * @see FieldModel\n+     * @see FieldBuilder#withFlags(int)\n@@ -169,4 +202,4 @@\n-     * @param name the name of the field\n-     * @param descriptor the field descriptor\n-     * @param handler handler which receives a {@link FieldBuilder} which can\n-     *                    further define the contents of the field\n+     *\n+     * @param name the field name\n+     * @param descriptor the symbolic field descriptor\n+     * @param handler handler to supply the contents of the field\n@@ -174,0 +207,1 @@\n+     * @see FieldModel\n@@ -184,4 +218,5 @@\n-     * Adds a field.\n-     * @param name the name of the field\n-     * @param descriptor the field descriptor\n-     * @param flags the access flags for this field\n+     * Adds a field, with only access flags.\n+     *\n+     * @param name the field name\n+     * @param descriptor the symbolic field descriptor\n+     * @param flags the access flags for this field, as a bit mask\n@@ -189,0 +224,2 @@\n+     * @see FieldModel\n+     * @see FieldBuilder#withFlags(int)\n@@ -200,3 +237,2 @@\n-     *\n-     * @implNote\n-     * <p>This method behaves as if:\n+     * <p>\n+     * This method behaves as if:\n@@ -204,2 +240,3 @@\n-     *     withField(field.fieldName(), field.fieldType(),\n-     *                b -> b.transformField(field, transform));\n+     * \/\/ @link substring=withField target=\"#withField(Utf8Entry, Utf8Entry, Consumer)\" :\n+     * withField(field.fieldName(), field.fieldType(),\n+     *           fb -> fb.transform(field, transform)) \/\/ @link regex=\"transform(?=\\()\" target=\"FieldBuilder#transform\"\n@@ -211,0 +248,1 @@\n+     * @see FieldTransform\n@@ -215,2 +253,5 @@\n-     * Adds a method.\n-     * @param name the name of the method\n+     * Adds a method.  The bit for {@link ClassFile#ACC_STATIC ACC_STATIC} flag\n+     * cannot be modified by the {@code handler} later, and must be set through\n+     * {@code methodFlags}.\n+     *\n+     * @param name the method name\n@@ -218,3 +259,3 @@\n-     * @param methodFlags the access flags\n-     * @param handler handler which receives a {@link MethodBuilder} which can\n-     *                    further define the contents of the method\n+     * @param methodFlags the access flags as a bit mask, with the {@code\n+     *        ACC_STATIC} bit definitely set\n+     * @param handler handler to supply the contents of the method\n@@ -222,0 +263,1 @@\n+     * @see MethodModel\n@@ -229,1 +271,9 @@\n-     * Adds a method, with only a {@code Code} attribute.\n+     * Adds a method, with only access flags and a {@link CodeModel}.  The bit\n+     * for {@link ClassFile#ACC_STATIC ACC_STATIC} flag cannot be modified by\n+     * the {@code handler} later, and must be set through {@code methodFlags}.\n+     * <p>\n+     * This method behaves as if:\n+     * {@snippet lang=java :\n+     * \/\/ @link substring=withMethod target=\"#withMethod(Utf8Entry, Utf8Entry, int, Consumer)\" :\n+     * withMethod(name, descriptor, methodFlags, mb -> mb.withCode(handler)) \/\/ @link substring=withCode target=\"MethodBuilder#withCode\"\n+     * }\n@@ -231,1 +281,1 @@\n-     * @param name the name of the method\n+     * @param name the method name\n@@ -233,3 +283,3 @@\n-     * @param methodFlags the access flags\n-     * @param handler handler which receives a {@link CodeBuilder} which can\n-     *                    define the contents of the method body\n+     * @param methodFlags the access flags as a bit mask, with the {@code\n+     *        ACC_STATIC} bit definitely set\n+     * @param handler handler to supply the contents of the method body\n@@ -237,0 +287,1 @@\n+     * @see MethodModel\n@@ -246,2 +297,5 @@\n-     * Adds a method.\n-     * @param name the name of the method\n+     * Adds a method.  The bit for {@link ClassFile#ACC_STATIC ACC_STATIC} flag\n+     * cannot be modified by the {@code handler}, and must be set through\n+     * {@code methodFlags}.\n+     *\n+     * @param name the method name\n@@ -249,3 +303,3 @@\n-     * @param methodFlags the access flags\n-     * @param handler handler which receives a {@link MethodBuilder} which can\n-     *                    further define the contents of the method\n+     * @param methodFlags the access flags as a bit mask, with the {@code\n+     *        ACC_STATIC} bit definitely set\n+     * @param handler handler to supply the contents of the method\n@@ -253,0 +307,1 @@\n+     * @see MethodModel\n@@ -265,2 +320,11 @@\n-     * Adds a method, with only a {@link CodeAttribute}.\n-     * @param name the name of the method\n+     * Adds a method, with only access flags and a {@link CodeModel}.  The bit\n+     * for {@link ClassFile#ACC_STATIC ACC_STATIC} flag cannot be modified by\n+     * the {@code handler}, and must be set through {@code methodFlags}.\n+     * <p>\n+     * This method behaves as if:\n+     * {@snippet lang=java :\n+     * \/\/ @link substring=withMethod target=\"#withMethod(String, MethodTypeDesc, int, Consumer)\" :\n+     * withMethod(name, descriptor, methodFlags, mb -> mb.withCode(handler)) \/\/ @link substring=withCode target=\"MethodBuilder#withCode\"\n+     * }\n+     *\n+     * @param name the method name\n@@ -268,3 +332,3 @@\n-     * @param methodFlags the access flags\n-     * @param handler handler which receives a {@link CodeBuilder} which can\n-     *                    define the contents of the method body\n+     * @param methodFlags the access flags as a bit mask, with the {@code\n+     *        ACC_STATIC} bit definitely set\n+     * @param handler handler to supply the contents of the method body\n@@ -272,0 +336,1 @@\n+     * @see MethodModel\n@@ -281,4 +346,5 @@\n-     * Adds a method by transforming a method from another class.\n-     *\n-     * @implNote\n-     * <p>This method behaves as if:\n+     * Adds a method by transforming a method from another class.  The transform\n+     * cannot modify the {@link ClassFile#ACC_STATIC ACC_STATIC} flag of the\n+     * original method.\n+     * <p>\n+     * This method behaves as if:\n@@ -286,2 +352,3 @@\n-     *     withMethod(method.methodName(), method.methodType(),\n-     *                b -> b.transformMethod(method, transform));\n+     * \/\/ @link substring=withMethod target=\"#withMethod(Utf8Entry, Utf8Entry, int, Consumer)\" :\n+     * withMethod(method.methodName(), method.methodType(), method.flags().flagMask(),\n+     *            mb -> mb.transform(method, transform)) \/\/ @link regex=\"transform(?=\\()\" target=\"MethodBuilder#transform\"\n@@ -289,0 +356,1 @@\n+     *\n@@ -292,0 +360,1 @@\n+     * @see MethodTransform\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassBuilder.java","additions":129,"deletions":60,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,10 @@\n- * A marker interface for elements that can appear when traversing\n- * a {@link ClassModel} or be presented to a {@link ClassBuilder}.\n+ * Marker interface for a member element of a {@link ClassModel}.  Such an\n+ * element can appear when traversing a {@link ClassModel} unless otherwise\n+ * specified, be supplied to a {@link ClassBuilder}, and be processed by a\n+ * {@link ClassTransform}.\n+ * <p>\n+ * {@link AccessFlags}, and {@link ClassFileVersion} are member elements of a\n+ * class that appear exactly once during the traversal of a {@link ClassModel}.\n+ * {@link Superclass} and {@link Interfaces} may be absent or appear at most\n+ * once.  A {@link ClassBuilder} may provide an alternative superclass if it is\n+ * not defined but required.\n@@ -33,0 +41,4 @@\n+ * @see ClassFileElement##membership Membership Elements\n+ * @see MethodElement\n+ * @see FieldElement\n+ * @see CodeElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassElement.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n@@ -29,0 +30,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -32,0 +34,2 @@\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n@@ -36,0 +40,1 @@\n+import java.lang.classfile.instruction.CharacterRange;\n@@ -38,0 +43,3 @@\n+import java.lang.classfile.instruction.LineNumber;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n@@ -40,0 +48,1 @@\n+import java.lang.reflect.ClassFileFormatVersion;\n@@ -53,3 +62,3 @@\n- * Represents a context for parsing, transforming, and generating classfiles.\n- * A {@code ClassFile} has a set of options that condition how parsing and\n- * generation is done.\n+ * Provides ability to parse, transform, and generate {@code class} files.\n+ * A {@code ClassFile} is a context with a set of options that condition how\n+ * parsing and generation are done.\n@@ -63,1 +72,6 @@\n-     * {@return a context with default options}\n+     * {@return a context with default options}  Each subtype of {@link Option}\n+     * specifies its default.\n+     * <p>\n+     * The default {@link AttributeMapperOption} and {@link\n+     * ClassHierarchyResolverOption} may be unsuitable for some {@code class}\n+     * files and result in parsing or generation errors.\n@@ -70,1 +84,2 @@\n-     * {@return a new context with options altered from the default}\n+     * {@return a context with options altered from the default}  Equivalent to\n+     * {@link #of() ClassFile.of().withOptions(options)}.\n@@ -78,1 +93,1 @@\n-     * {@return a copy of the context with altered options}\n+     * {@return a context with altered options from this context}\n@@ -84,1 +99,1 @@\n-     * An option that affects the parsing and writing of classfiles.\n+     * An option that affects the parsing or writing of {@code class} files.\n@@ -86,0 +101,1 @@\n+     * @see java.lang.classfile##options Options\n@@ -93,2 +109,15 @@\n-     * Option describing attribute mappers for custom attributes.\n-     * Default is only to process standard attributes.\n+     * The option describing user-defined attributes for parsing {@code class}\n+     * files.  The default does not recognize any user-defined attribute.\n+     * <p>\n+     * An {@code AttributeMapperOption} contains a function that maps an\n+     * attribute name to a user attribute mapper. The function may return {@code\n+     * null} if it does not recognize an attribute name.  The returned mapper\n+     * must ensure its {@link AttributeMapper#name() name()} is equivalent to\n+     * the {@link Utf8Entry#stringValue() stringValue()} of the input {@link\n+     * Utf8Entry}.\n+     * <p>\n+     * The mapping function in this attribute has lower priority than mappers in\n+     * {@link Attributes}, so it is impossible to override built-in attributes\n+     * with this option.  If an attribute is not recognized by any mapper in\n+     * {@link Attributes} and is not assigned a mapper, or recognized, by this\n+     * option, that attribute will be modeled by an {@link UnknownAttribute}.\n@@ -96,0 +125,2 @@\n+     * @see AttributeMapper\n+     * @see CustomAttribute\n@@ -102,1 +133,2 @@\n-         * {@return an option describing attribute mappers for custom attributes}\n+         * {@return an option describing user-defined attributes for parsing}\n+         *\n@@ -117,2 +149,14 @@\n-     * Option describing the class hierarchy resolver to use when generating\n-     * stack maps.\n+     * The option describing the class hierarchy resolver to use when generating\n+     * stack maps or verifying classes.  The default is {@link\n+     * ClassHierarchyResolver#defaultResolver()}, which uses core reflection to\n+     * find a class with a given name in {@linkplain ClassLoader#getSystemClassLoader()\n+     * system class loader} and inspect it, and is insufficient if a class is\n+     * not present in the system class loader as in applications, or if loading\n+     * of system classes is not desired as in agents.\n+     * <p>\n+     * A {@code ClassHierarchyResolverOption} contains a {@link ClassHierarchyResolver}.\n+     * The resolver must be able to process all classes and interfaces, including\n+     * those appearing as the component types of array types, that appear in the\n+     * operand stack of the generated bytecode.  If the resolver fails on any\n+     * of the classes and interfaces with an {@link IllegalArgumentException},\n+     * the {@code class} file generation fails.\n@@ -120,0 +164,2 @@\n+     * @see ClassHierarchyResolver\n+     * @jvms 4.10.1.2 Verification Type System\n@@ -126,2 +172,2 @@\n-         * {@return an option describing the class hierarchy resolver to use when\n-         * generating stack maps}\n+         * {@return an option describing the class hierarchy resolver to use}\n+         *\n@@ -142,8 +188,16 @@\n-     * Option describing whether to preserve the original constant pool when\n-     * transforming a {@code class} file.  Reusing the constant pool enables\n-     * significant optimizations in processing time and minimizes differences\n-     * between the original and transformed {@code class} files, but may result\n-     * in a bigger transformed {@code class} file when many elements of the\n-     * original {@code class} file are dropped and many original constant\n-     * pool entries become unused.  Default is {@link #SHARED_POOL} to preserve\n-     * the original constant pool.\n+     * Option describing whether to extend from the original constant pool when\n+     * transforming a {@code class} file.  The default is {@link #SHARED_POOL}\n+     * to extend from the original constant pool.\n+     * <p>\n+     * This option affects all overloads of {@link #transformClass transformClass}.\n+     * Extending from the original constant pool keeps the indices into the\n+     * constant pool intact, which enables significant optimizations in processing\n+     * time and minimizes differences between the original and transformed {@code\n+     * class} files, but may result in a bigger transformed {@code class} file\n+     * when many elements of the original {@code class} file are dropped and\n+     * many original constant pool entries become unused.\n+     * <p>\n+     * An alternative to this option is to use {@link #build(ClassEntry,\n+     * ConstantPoolBuilder, Consumer)} directly.  It allows extension from\n+     * arbitrary constant pools, and may be useful if a built {@code class} file\n+     * reuses structures from multiple original {@code class} files.\n@@ -159,2 +213,2 @@\n-         * Preserves the original constant pool when transforming the {@code\n-         * class} file.\n+         * Extend the new constant pool from the original constant pool when\n+         * transforming the {@code class} file.\n@@ -197,3 +251,9 @@\n-     * Option describing whether to patch out unreachable code.\n-     * Default is {@code PATCH_DEAD_CODE} to automatically patch out unreachable\n-     * code with NOPs.\n+     * The option describing whether to patch out unreachable code for stack map\n+     * generation.  The default is {@link #PATCH_DEAD_CODE} to automatically\n+     * patch unreachable code and generate a valid stack map entry for the\n+     * patched code.\n+     * <p>\n+     * The stack map generation process may fail when it encounters unreachable\n+     * code and {@link #KEEP_DEAD_CODE} is set.  In such cases, users should\n+     * set {@link StackMapsOption#DROP_STACK_MAPS} and provide their own stack\n+     * maps that passes verification (JVMS {@jvms 4.10.1}).\n@@ -201,0 +261,2 @@\n+     * @see StackMapsOption\n+     * @jvms 4.10.1 Verification by Type Checking\n@@ -205,1 +267,5 @@\n-        \/** Patch unreachable code *\/\n+        \/**\n+         * Patch unreachable code with dummy code, and generate valid dummy\n+         * stack map entries.  This ensures the generated code can pass\n+         * verification (JVMS {@jvms 4.10.1}).\n+         *\/\n@@ -208,1 +274,6 @@\n-        \/** Keep the unreachable code *\/\n+        \/**\n+         * Keep the unreachable code for the accuracy of the generated {@code\n+         * class} file.  Users should set {@link StackMapsOption#DROP_STACK_MAPS}\n+         * to prevent stack map generation from running and provide their own\n+         * {@link StackMapTableAttribute} to a {@link CodeBuilder}.\n+         *\/\n@@ -213,7 +284,13 @@\n-     * Option describing whether to filter unresolved labels.\n-     * Default is {@code FAIL_ON_DEAD_LABELS} to throw IllegalArgumentException\n-     * when any {@link ExceptionCatch}, {@link LocalVariableInfo},\n-     * {@link LocalVariableTypeInfo}, or {@link CharacterRangeInfo}\n-     * reference to unresolved {@link Label} during bytecode serialization.\n-     * Setting this option to {@code DROP_DEAD_LABELS} filters the above\n-     * elements instead.\n+     * The option describing whether to filter {@linkplain\n+     * CodeBuilder#labelBinding(Label) unbound labels} and drop their\n+     * enclosing structures if possible.  The default is {@link\n+     * #FAIL_ON_DEAD_LABELS} to fail fast with an {@link IllegalArgumentException}\n+     * when a {@link PseudoInstruction} refers to an unbound label during\n+     * bytecode generation.\n+     * <p>\n+     * The affected {@link PseudoInstruction}s include {@link ExceptionCatch},\n+     * {@link LocalVariable}, {@link LocalVariableType}, and {@link\n+     * CharacterRange}.  Setting this option to {@link #DROP_DEAD_LABELS}\n+     * filters these pseudo-instructions from a {@link CodeBuilder} instead.\n+     * Note that instructions, such as {@link BranchInstruction}, with unbound\n+     * labels always fail-fast with an {@link IllegalArgumentException}.\n@@ -221,0 +298,1 @@\n+     * @see DebugElementsOption\n@@ -225,1 +303,5 @@\n-        \/** Fail on unresolved labels *\/\n+        \/**\n+         * Fail fast on {@linkplain CodeBuilder#labelBinding(Label) unbound\n+         * labels}.  This also ensures the accuracy of the generated {@code\n+         * class} files.\n+         *\/\n@@ -228,1 +310,6 @@\n-        \/** Filter unresolved labels *\/\n+        \/**\n+         * Filter {@link PseudoInstruction}s with {@linkplain\n+         * CodeBuilder#labelBinding(Label) unbound labels}.  Note that\n+         * instructions with unbound labels still cause an {@link\n+         * IllegalArgumentException}.\n+         *\/\n@@ -233,5 +320,9 @@\n-     * Option describing whether to process or discard debug elements.\n-     * Debug elements include the local variable table, local variable type\n-     * table, and character range table.  Discarding debug elements may\n-     * reduce the overhead of parsing or transforming classfiles.\n-     * Default is {@code PASS_DEBUG} to process debug elements.\n+     * The option describing whether to process or discard debug {@link\n+     * PseudoInstruction}s in the traversal of a {@link CodeModel} or a {@link\n+     * CodeBuilder}.  The default is {@link #PASS_DEBUG} to process debug\n+     * pseudo-instructions as all other {@link CodeElement}.\n+     * <p>\n+     * Debug pseudo-instructions include {@link LocalVariable}, {@link\n+     * LocalVariableType}, and {@link CharacterRange}.  Discarding debug\n+     * elements may reduce the overhead of parsing or transforming {@code class}\n+     * files and has no impact on the run-time behavior.\n@@ -239,0 +330,1 @@\n+     * @see LineNumbersOption\n@@ -243,1 +335,4 @@\n-        \/** Process debug elements *\/\n+        \/**\n+         * Process debug pseudo-instructions like other member elements of a\n+         * {@link CodeModel}.\n+         *\/\n@@ -246,1 +341,3 @@\n-        \/** Drop debug elements *\/\n+        \/**\n+         * Drop debug pseudo-instructions from traversal and builders.\n+         *\/\n@@ -251,1 +348,5 @@\n-     * Option describing whether to process or discard line numbers.\n+     * The option describing whether to process or discard {@link LineNumber}s\n+     * in the traversal of a {@link CodeModel} or a {@link CodeBuilder}.  The\n+     * default is {@link #PASS_LINE_NUMBERS} to process all line number entries\n+     * as all other {@link CodeElement}.\n+     * <p>\n@@ -253,2 +354,1 @@\n-     * classfiles.\n-     * Default is {@code PASS_LINE_NUMBERS} to process line numbers.\n+     * {@code class} files and has no impact on the run-time behavior.\n@@ -256,0 +356,1 @@\n+     * @see DebugElementsOption\n@@ -260,1 +361,4 @@\n-        \/** Process line numbers *\/\n+        \/**\n+         * Process {@link LineNumber} like other member elements of a {@link\n+         * CodeModel}.\n+         *\/\n@@ -263,1 +367,3 @@\n-        \/** Drop line numbers *\/\n+        \/**\n+         * Drop {@link LineNumber} from traversal and builders.\n+         *\/\n@@ -268,4 +374,3 @@\n-     * Option describing whether to automatically rewrite short jumps to\n-     * long when necessary.\n-     * Default is {@link #FIX_SHORT_JUMPS} to automatically rewrite jump\n-     * instructions.\n+     * The option describing whether to automatically rewrite short jumps to\n+     * equivalent instructions when necessary.  The default is {@link\n+     * #FIX_SHORT_JUMPS} to automatically rewrite.\n@@ -278,0 +383,5 @@\n+     * <p>\n+     * Disabling rewrite can ensure the physical accuracy of a generated {@code\n+     * class} file and avoid the overhead from a failed first attempt for\n+     * overflowing forward jumps in some cases, if the generated {@code class}\n+     * file is stable.\n@@ -297,1 +407,2 @@\n-         * class} file.\n+         * class} file and avoids the overhead from a failed first attempt for\n+         * overflowing forward jumps in some cases.\n@@ -303,5 +414,15 @@\n-     * Option describing whether to generate stackmaps.\n-     * Default is {@code STACK_MAPS_WHEN_REQUIRED} to generate stack\n-     * maps for {@link #JAVA_6_VERSION} or above, where specifically for\n-     * {@link #JAVA_6_VERSION} the stack maps may not be generated.\n-     * @jvms 4.10.1 Verification by Type Checking\n+     * The option describing whether to generate stack maps.  The default is\n+     * {@link #STACK_MAPS_WHEN_REQUIRED} to generate stack maps or reuse\n+     * existing ones if compatible.\n+     * <p>\n+     * The {@link StackMapTableAttribute} is a derived property from a {@link\n+     * CodeAttribute Code} attribute to allow a Java Virtual Machine to perform\n+     * verification in one pass.  Thus, it is not modeled as part of a {@link\n+     * CodeModel}, but computed on-demand instead via stack maps generation.\n+     * <p>\n+     * Stack map generation may fail with an {@link IllegalArgumentException} if\n+     * there is {@linkplain DeadCodeOption unreachable code} or legacy\n+     * {@linkplain DiscontinuedInstruction.JsrInstruction jump routine}\n+     * instructions.  When {@link #DROP_STACK_MAPS} option is used, users can\n+     * provide their own stack maps by supplying a {@link StackMapTableAttribute}\n+     * to a {@link CodeBuilder}.\n@@ -309,0 +430,3 @@\n+     * @see StackMapTableAttribute\n+     * @see DeadCodeOption\n+     * @jvms 4.10.1 Verification by Type Checking\n@@ -313,1 +437,11 @@\n-        \/** Generate stack maps when required *\/\n+        \/**\n+         * Generate stack maps or reuse existing ones if compatible.  Stack maps\n+         * are present on major versions {@value #JAVA_6_VERSION} or above.  For\n+         * these versions, {@link CodeBuilder} tries to reuse compatible stack\n+         * maps information if the code array and exception handlers are still\n+         * compatible after a transformation; otherwise, it runs stack map\n+         * generation.  However, it does not fail fast if the major version is\n+         * {@value #JAVA_6_VERSION}, which allows jump subroutine instructions\n+         * that are incompatible with stack maps to exist in the {@code code}\n+         * array.\n+         *\/\n@@ -316,1 +450,5 @@\n-        \/** Always generate stack maps *\/\n+        \/**\n+         * Forces running stack map generation.  This runs stack map generation\n+         * unconditionally and fails fast if the generation fails due to any\n+         * reason.\n+         *\/\n@@ -319,1 +457,11 @@\n-        \/** Drop stack maps from code *\/\n+        \/**\n+         * Do not run stack map generation.  Users must supply their own\n+         * {@link StackMapTableAttribute} to a {@link CodeBuilder} if the code\n+         * has branches or exception handlers; otherwise, the generated code\n+         * will fail verification (JVMS {@jvms 4.10.1}).\n+         * <p>\n+         * This option is required for user-supplied {@link StackMapTableAttribute}\n+         * to be respected.  Stack maps on an existing {@link CodeAttribute Code}\n+         * attribute can be reused as below with this option:\n+         * {@snippet lang=java file=\"PackageSnippets.java\" region=\"manual-reuse-stack-maps\"}\n+         *\/\n@@ -324,5 +472,14 @@\n-     * Option describing whether to process or discard unrecognized or problematic\n-     * original attributes when a class, record component, field, method or code is\n-     * transformed in its exploded form.\n-     * Default is {@code PASS_ALL_ATTRIBUTES} to process all original attributes.\n-     * @see AttributeMapper.AttributeStability\n+     * The option describing whether to retain or discard attributes that cannot\n+     * verify their correctness after a transformation.  The default is {@link\n+     * #PASS_ALL_ATTRIBUTES} to retain all attributes as-is.\n+     * <p>\n+     * Many attributes only depend on data managed by the Class-File API, such\n+     * as constant pool entries or labels into the {@code code} array.  If they\n+     * change, the Class-File API knows their updated values and can write a\n+     * correct version by expanding the structures and recomputing the updated\n+     * indexes, known as \"explosion\".  However, some attributes, such as type\n+     * annotations, depend on arbitrary data that may be modified during\n+     * transformations but the Class-File API does not track, such as index to\n+     * an entry in the {@linkplain ClassModel#interfaces() interfaces} of a\n+     * {@code ClassFile} structure.  As a result, the Class-File API cannot\n+     * verify the correctness of such information.\n@@ -330,0 +487,1 @@\n+     * @see AttributeStability\n@@ -334,1 +492,3 @@\n-        \/** Process all original attributes during transformation *\/\n+        \/**\n+         * Retain all original attributes during transformation.\n+         *\/\n@@ -337,1 +497,4 @@\n-        \/** Drop unknown attributes during transformation *\/\n+        \/**\n+         * Drop attributes with {@link AttributeStability#UNKNOWN} data\n+         * dependency during transformation.\n+         *\/\n@@ -340,1 +503,4 @@\n-        \/** Drop unknown and unstable original attributes during transformation *\/\n+        \/**\n+         * Drop attributes with {@link AttributeStability#UNSTABLE} or higher\n+         * data dependency during transformation.\n+         *\/\n@@ -345,2 +511,8 @@\n-     * Parse a classfile into a {@link ClassModel}.\n-     * @param bytes the bytes of the classfile\n+     * Parses a {@code class} file into a {@link ClassModel}.\n+     * <p>\n+     * Due to the on-demand nature of {@code class} file parsing, an {@link\n+     * IllegalArgumentException} may be thrown on any accessor method invocation\n+     * on the returned model or any structure returned by the accessors in the\n+     * structure hierarchy.\n+     *\n+     * @param bytes the bytes of the {@code class} file\n@@ -348,2 +520,3 @@\n-     * @throws IllegalArgumentException or its subclass if the classfile format is\n-     * not supported or an incompatibility prevents parsing of the classfile\n+     * @throws IllegalArgumentException if the {@code class} file is malformed\n+     *         or of a version {@linkplain #latestMajorVersion() not supported}\n+     *         by the current runtime\n@@ -354,2 +527,8 @@\n-     * Parse a classfile into a {@link ClassModel}.\n-     * @param path the path to the classfile\n+     * Parses a {@code class} into a {@link ClassModel}.\n+     * <p>\n+     * Due to the on-demand nature of {@code class} file parsing, an {@link\n+     * IllegalArgumentException} may be thrown on any accessor method invocation\n+     * on the returned model or any structure returned by the accessors in the\n+     * structure hierarchy.\n+     *\n+     * @param path the path to the {@code class} file\n@@ -357,3 +536,5 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n-     * @throws IllegalArgumentException or its subclass if the classfile format is\n-     * not supported or an incompatibility prevents parsing of the classfile\n+     * @throws IOException if an I\/O error occurs\n+     * @throws IllegalArgumentException if the {@code class} file is malformed\n+     *         or of a version {@linkplain #latestMajorVersion() not supported}\n+     *         by the current runtime\n+     * @see #parse(byte[])\n@@ -366,1 +547,2 @@\n-     * Build a classfile into a byte array.\n+     * Builds a {@code class} file into a byte array.\n+     *\n@@ -369,2 +551,3 @@\n-     * @return the classfile bytes\n-     * @throws IllegalArgumentException if {@code thisClass} represents a primitive type\n+     * @return the {@code class} file bytes\n+     * @throws IllegalArgumentException if {@code thisClass} represents a\n+     *         primitive type or building encounters a failure\n@@ -379,2 +562,2 @@\n-     * Build a classfile into a byte array using the provided constant pool\n-     * builder.\n+     * Builds a {@code class} file into a byte array using the provided constant\n+     * pool builder.\n@@ -385,1 +568,2 @@\n-     * @return the classfile bytes\n+     * @return the {@code class} file bytes\n+     * @throws IllegalArgumentException if building encounters a failure\n@@ -392,1 +576,2 @@\n-     * Build a classfile into a file.\n+     * Builds a {@code class} file into a file in a file system.\n+     *\n@@ -396,1 +581,2 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws IOException if an I\/O error occurs\n+     * @throws IllegalArgumentException if building encounters a failure\n@@ -405,2 +591,2 @@\n-     * Build a classfile into a file using the provided constant pool\n-     * builder.\n+     * Builds a {@code class} file into a file in a file system using the\n+     * provided constant pool builder.\n@@ -412,1 +598,2 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws IOException if an I\/O error occurs\n+     * @throws IllegalArgumentException if building encounters a failure\n@@ -422,1 +609,2 @@\n-     * Build a module descriptor into a byte array.\n+     * Builds a module descriptor into a byte array.\n+     *\n@@ -424,1 +612,2 @@\n-     * @return the classfile bytes\n+     * @return the {@code class} file bytes\n+     * @throws IllegalArgumentException if building encounters a failure\n@@ -431,1 +620,2 @@\n-     * Build a module descriptor into a byte array.\n+     * Builds a module descriptor into a byte array.\n+     *\n@@ -434,1 +624,2 @@\n-     * @return the classfile bytes\n+     * @return the {@code class} file bytes\n+     * @throws IllegalArgumentException if building encounters a failure\n@@ -437,1 +628,1 @@\n-                                     Consumer<? super ClassBuilder> handler) {\n+                               Consumer<? super ClassBuilder> handler) {\n@@ -446,1 +637,2 @@\n-     * Build a module descriptor into a file.\n+     * Builds a module descriptor into a file in a file system.\n+     *\n@@ -449,1 +641,2 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws IOException if an I\/O error occurs\n+     * @throws IllegalArgumentException if building encounters a failure\n@@ -457,1 +650,2 @@\n-     * Build a module descriptor into a file.\n+     * Builds a module descriptor into a file in a file system.\n+     *\n@@ -461,1 +655,2 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws IOException if an I\/O error occurs\n+     * @throws IllegalArgumentException if building encounters a failure\n@@ -470,2 +665,2 @@\n-     * Transform one classfile into a new classfile with the aid of a\n-     * {@link ClassTransform}.  The transform will receive each element of\n+     * Transform one {@code class} file into a new {@code class} file according\n+     * to a {@link ClassTransform}.  The transform will receive each element of\n@@ -475,2 +670,1 @@\n-     *\n-     * @implNote\n+     * <p>\n@@ -479,2 +673,3 @@\n-     *     this.build(model.thisClass(), ConstantPoolBuilder.of(model),\n-     *                     clb -> clb.transform(model, transform));\n+     * ConstantPoolBuilder cpb = null; \/\/ @replace substring=null; replacement=...\n+     * this.build(model.thisClass(), cpb,\n+     *            clb -> clb.transform(model, transform));\n@@ -482,0 +677,8 @@\n+     * where {@code cpb} is determined by {@link ConstantPoolSharingOption}.\n+     *\n+     * @apiNote\n+     * This is named {@code transformClass} instead of {@code transform} for\n+     * consistency with {@link ClassBuilder#transformField}, {@link\n+     * ClassBuilder#transformMethod}, and {@link MethodBuilder#transformCode},\n+     * and to distinguish from {@link ClassFileBuilder#transform}, which is\n+     * more generic and powerful.\n@@ -486,0 +689,2 @@\n+     * @throws IllegalArgumentException if building encounters a failure\n+     * @see ConstantPoolSharingOption\n@@ -492,2 +697,2 @@\n-     * Transform one classfile into a new classfile with the aid of a\n-     * {@link ClassTransform}.  The transform will receive each element of\n+     * Transform one {@code class} file into a new {@code class} file according\n+     * to a {@link ClassTransform}.  The transform will receive each element of\n@@ -498,0 +703,7 @@\n+     * @apiNote\n+     * This is named {@code transformClass} instead of {@code transform} for\n+     * consistency with {@link ClassBuilder#transformField}, {@link\n+     * ClassBuilder#transformMethod}, and {@link MethodBuilder#transformCode},\n+     * and to distinguish from {@link ClassFileBuilder#transform}, which is\n+     * more generic and powerful.\n+     *\n@@ -502,0 +714,2 @@\n+     * @throws IllegalArgumentException if building encounters a failure\n+     * @see ConstantPoolSharingOption\n@@ -508,2 +722,2 @@\n-     * Transform one classfile into a new classfile with the aid of a\n-     * {@link ClassTransform}.  The transform will receive each element of\n+     * Transform one {@code class} file into a new {@code class} file according\n+     * to a {@link ClassTransform}.  The transform will receive each element of\n@@ -513,2 +727,1 @@\n-     *\n-     * @implNote\n+     * <p>\n@@ -517,2 +730,2 @@\n-     *     this.build(newClassName, ConstantPoolBuilder.of(model),\n-     *                     clb -> clb.transform(model, transform));\n+     * ConstantPoolBuilder cpb = null; \/\/ @replace substring=null; replacement=...\n+     * this.build(newClassName, cpb, clb -> clb.transform(model, transform));\n@@ -520,0 +733,8 @@\n+     * where {@code cpb} is determined by {@link ConstantPoolSharingOption}.\n+     *\n+     * @apiNote\n+     * This is named {@code transformClass} instead of {@code transform} for\n+     * consistency with {@link ClassBuilder#transformField}, {@link\n+     * ClassBuilder#transformMethod}, and {@link MethodBuilder#transformCode},\n+     * and to distinguish from {@link ClassFileBuilder#transform}, which is\n+     * more generic and powerful.\n@@ -525,0 +746,2 @@\n+     * @throws IllegalArgumentException if building encounters a failure\n+     * @see ConstantPoolSharingOption\n@@ -529,1 +752,2 @@\n-     * Verify a classfile.  Any verification errors found will be returned.\n+     * Verify a {@code class} file.  All verification errors found will be returned.\n+     *\n@@ -531,1 +755,1 @@\n-     * @return a list of verification errors, or an empty list if no errors are\n+     * @return a list of verification errors, or an empty list if no error is\n@@ -537,3 +761,4 @@\n-     * Verify a classfile.  Any verification errors found will be returned.\n-     * @param bytes the classfile bytes to verify\n-     * @return a list of verification errors, or an empty list if no errors are\n+     * Verify a {@code class} file.  All verification errors found will be returned.\n+     *\n+     * @param bytes the {@code class} file bytes to verify\n+     * @return a list of verification errors, or an empty list if no error is\n@@ -545,3 +770,4 @@\n-     * Verify a classfile.  Any verification errors found will be returned.\n-     * @param path the classfile path to verify\n-     * @return a list of verification errors, or an empty list if no errors are\n+     * Verify a {@code class} file.  All verification errors found will be returned.\n+     *\n+     * @param path the {@code class} file path to verify\n+     * @return a list of verification errors, or an empty list if no error is\n@@ -549,1 +775,1 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws IOException if an I\/O error occurs\n@@ -555,1 +781,4 @@\n-    \/** 0xCAFEBABE *\/\n+    \/**\n+     * The magic number identifying the {@code class} file format,  {@value\n+     * \"0x%04x\" #MAGIC_NUMBER}.  It is a big-endian 4-byte value.\n+     *\/\n@@ -558,1 +787,1 @@\n-    \/** The bit mask of PUBLIC access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#PUBLIC} access and property modifier. *\/\n@@ -561,1 +790,1 @@\n-    \/** The bit mask of PROTECTED access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#PROTECTED} access and property modifier. *\/\n@@ -564,1 +793,1 @@\n-    \/** The bit mask of PRIVATE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#PRIVATE} access and property modifier. *\/\n@@ -567,1 +796,1 @@\n-    \/** The bit mask of INTERFACE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#INTERFACE} access and property modifier. *\/\n@@ -570,1 +799,1 @@\n-    \/** The bit mask of ENUM access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#ENUM} access and property modifier. *\/\n@@ -573,1 +802,1 @@\n-    \/** The bit mask of ANNOTATION access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#ANNOTATION} access and property modifier. *\/\n@@ -576,1 +805,1 @@\n-    \/** The bit mask of SUPER access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#SUPER} access and property modifier. *\/\n@@ -579,1 +808,1 @@\n-    \/** The bit mask of ABSTRACT access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#ABSTRACT} access and property modifier. *\/\n@@ -582,1 +811,1 @@\n-    \/** The bit mask of VOLATILE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#VOLATILE} access and property modifier. *\/\n@@ -585,1 +814,1 @@\n-    \/** The bit mask of TRANSIENT access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#TRANSIENT} access and property modifier. *\/\n@@ -588,1 +817,1 @@\n-    \/** The bit mask of SYNTHETIC access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#SYNTHETIC} access and property modifier. *\/\n@@ -591,1 +820,1 @@\n-    \/** The bit mask of STATIC access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#STATIC} access and property modifier. *\/\n@@ -594,1 +823,1 @@\n-    \/** The bit mask of FINAL access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#FINAL} access and property modifier. *\/\n@@ -597,1 +826,1 @@\n-    \/** The bit mask of SYNCHRONIZED access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#SYNCHRONIZED} access and property modifier. *\/\n@@ -600,1 +829,1 @@\n-    \/** The bit mask of BRIDGE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#BRIDGE} access and property modifier. *\/\n@@ -603,1 +832,1 @@\n-    \/** The bit mask of VARARGS access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#VARARGS} access and property modifier. *\/\n@@ -606,1 +835,1 @@\n-    \/** The bit mask of NATIVE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#NATIVE} access and property modifier. *\/\n@@ -609,1 +838,1 @@\n-    \/** The bit mask of STRICT access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#STRICT} access and property modifier. *\/\n@@ -612,1 +841,1 @@\n-    \/** The bit mask of MODULE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#MODULE} access and property modifier. *\/\n@@ -615,1 +844,1 @@\n-    \/** The bit mask of OPEN access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#OPEN} access and property modifier. *\/\n@@ -618,1 +847,1 @@\n-    \/** The bit mask of MANDATED access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#MANDATED} access and property modifier. *\/\n@@ -621,1 +850,1 @@\n-    \/** The bit mask of TRANSITIVE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#TRANSITIVE} access and property modifier. *\/\n@@ -624,1 +853,1 @@\n-    \/** The bit mask of STATIC_PHASE access and property modifier. *\/\n+    \/** The bit mask of {@link AccessFlag#STATIC_PHASE} access and property modifier. *\/\n@@ -627,1 +856,6 @@\n-    \/** The class major version of JAVA_1. *\/\n+    \/**\n+     * The class major version of the initial version of Java, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_0\n+     * @see ClassFileFormatVersion#RELEASE_1\n+     *\/\n@@ -630,1 +864,5 @@\n-    \/** The class major version of JAVA_2. *\/\n+    \/**\n+     * The class major version introduced by Java 2 SE 1.2, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_2\n+     *\/\n@@ -633,1 +871,5 @@\n-    \/** The class major version of JAVA_3. *\/\n+    \/**\n+     * The class major version introduced by Java 2 SE 1.3, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_3\n+     *\/\n@@ -636,1 +878,5 @@\n-    \/** The class major version of JAVA_4. *\/\n+    \/**\n+     * The class major version introduced by Java 2 SE 1.4, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_4\n+     *\/\n@@ -639,1 +885,5 @@\n-    \/** The class major version of JAVA_5. *\/\n+    \/**\n+     * The class major version introduced by Java 2 SE 5.0, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_5\n+     *\/\n@@ -642,1 +892,5 @@\n-    \/** The class major version of JAVA_6. *\/\n+    \/**\n+     * The class major version introduced by Java SE 6, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_6\n+     *\/\n@@ -645,1 +899,5 @@\n-    \/** The class major version of JAVA_7. *\/\n+    \/**\n+     * The class major version introduced by Java SE 7, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_7\n+     *\/\n@@ -648,1 +906,5 @@\n-    \/** The class major version of JAVA_8. *\/\n+    \/**\n+     * The class major version introduced by Java SE 8, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_8\n+     *\/\n@@ -651,1 +913,5 @@\n-    \/** The class major version of JAVA_9. *\/\n+    \/**\n+     * The class major version introduced by Java SE 9, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_9\n+     *\/\n@@ -654,1 +920,5 @@\n-    \/** The class major version of JAVA_10. *\/\n+    \/**\n+     * The class major version introduced by Java SE 10, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_10\n+     *\/\n@@ -657,1 +927,5 @@\n-    \/** The class major version of JAVA_11. *\/\n+    \/**\n+     * The class major version introduced by Java SE 11, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_11\n+     *\/\n@@ -660,1 +934,5 @@\n-    \/** The class major version of JAVA_12. *\/\n+    \/**\n+     * The class major version introduced by Java SE 12, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_12\n+     *\/\n@@ -663,1 +941,5 @@\n-    \/** The class major version of JAVA_13. *\/\n+    \/**\n+     * The class major version introduced by Java SE 13, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_13\n+     *\/\n@@ -666,1 +948,5 @@\n-    \/** The class major version of JAVA_14. *\/\n+    \/**\n+     * The class major version introduced by Java SE 14, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_14\n+     *\/\n@@ -669,1 +955,5 @@\n-    \/** The class major version of JAVA_15. *\/\n+    \/**\n+     * The class major version introduced by Java SE 15, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_15\n+     *\/\n@@ -672,1 +962,5 @@\n-    \/** The class major version of JAVA_16. *\/\n+    \/**\n+     * The class major version introduced by Java SE 16, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_16\n+     *\/\n@@ -675,1 +969,5 @@\n-    \/** The class major version of JAVA_17. *\/\n+    \/**\n+     * The class major version introduced by Java SE 17, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_17\n+     *\/\n@@ -678,1 +976,5 @@\n-    \/** The class major version of JAVA_18. *\/\n+    \/**\n+     * The class major version introduced by Java SE 18, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_18\n+     *\/\n@@ -681,1 +983,5 @@\n-    \/** The class major version of JAVA_19. *\/\n+    \/**\n+     * The class major version introduced by Java SE 19, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_19\n+     *\/\n@@ -684,1 +990,5 @@\n-    \/** The class major version of JAVA_20. *\/\n+    \/**\n+     * The class major version introduced by Java SE 20, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_20\n+     *\/\n@@ -687,1 +997,5 @@\n-    \/** The class major version of JAVA_21. *\/\n+    \/**\n+     * The class major version introduced by Java SE 21, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_21\n+     *\/\n@@ -690,1 +1004,5 @@\n-    \/** The class major version of JAVA_22. *\/\n+    \/**\n+     * The class major version introduced by Java SE 22, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_22\n+     *\/\n@@ -693,1 +1011,5 @@\n-    \/** The class major version of JAVA_23. *\/\n+    \/**\n+     * The class major version introduced by Java SE 23, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_23\n+     *\/\n@@ -696,1 +1018,5 @@\n-    \/** The class major version of JAVA_24. *\/\n+    \/**\n+     * The class major version introduced by Java SE 24, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_24\n+     *\/\n@@ -700,1 +1026,3 @@\n-     * The class major version of JAVA_25.\n+     * The class major version introduced by Java SE 25, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_25\n@@ -706,2 +1034,2 @@\n-     * A minor version number indicating a class uses preview features\n-     * of a Java SE version since 12, for major versions {@value\n+     * A minor version number {@value} indicating a class uses preview features\n+     * of a Java SE release since 12, for major versions {@value\n@@ -713,1 +1041,1 @@\n-     * {@return the latest major Java version}\n+     * {@return the latest class major version supported by the current runtime}\n@@ -720,1 +1048,7 @@\n-     * {@return the latest minor Java version}\n+     * {@return the latest class minor version supported by the current runtime}\n+     *\n+     * @apiNote\n+     * This does not report the {@link #PREVIEW_MINOR_VERSION} when the current\n+     * runtime has preview feature enabled, as {@code class} files with a major\n+     * version other than {@link #latestMajorVersion()} and the preview minor\n+     * version are not supported.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":510,"deletions":176,"binary":false,"changes":686,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,6 +34,25 @@\n- * A builder for a classfile or portion of a classfile.  Builders are rarely\n- * created directly; they are passed to handlers by methods such as\n- * {@link ClassFile#build(ClassDesc, Consumer)} or to transforms.\n- * Elements of the newly built entity can be specified\n- * abstractly (by passing a {@link ClassFileElement} to {@link #with(ClassFileElement)}\n- * or concretely by calling the various {@code withXxx} methods.\n+ * A builder for a {@link CompoundElement}, which accepts the member elements\n+ * to be integrated into the built structure.  Builders are usually passed as\n+ * an argument to {@link Consumer} handlers, such as in {@link\n+ * ClassFile#build(ClassDesc, Consumer)}.  The handlers should deliver elements\n+ * to a builder similar to how a {@link CompoundElement} traverses its member\n+ * elements.\n+ * <p>\n+ * The basic way a builder accepts elements is through {@link #with}, which\n+ * supports call chaining.  Concrete subtypes of builders usually define extra\n+ * methods to define elements directly to the builder, such as {@link\n+ * ClassBuilder#withFlags(int)} or {@link CodeBuilder#aload(int)}.\n+ * <p>\n+ * Whether a member element can appear multiple times in a compound structure\n+ * affects the behavior of the element in {@code ClassFileBuilder}s.  If an\n+ * element can appear at most once but multiple instances are supplied to a\n+ * {@code ClassFileBuilder}, the last supplied instance appears on the built\n+ * structure.  If an element appears exactly once but no instance is supplied,\n+ * an unspecified default value element may be used in that structure.\n+ * <p>\n+ * Due to restrictions of the {@code class} file format, certain member elements\n+ * that can be modeled by the API cannot be represented in the built structure\n+ * under specific circumstances.  Passing such elements to the builder causes\n+ * {@link IllegalArgumentException}.  Some {@link ClassFile.Option}s control\n+ * whether such elements should be altered or dropped to produce valid {@code\n+ * class} files.\n@@ -41,2 +60,3 @@\n- * @param <E> the element type\n- * @param <B> the builder type\n+ * @param <E> the member element type\n+ * @param <B> the self type of this builder\n+ * @see CompoundElement\n@@ -44,1 +64,0 @@\n- *\n@@ -52,2 +71,9 @@\n-     * Integrate the {@link ClassFileElement} into the entity being built.\n-     * @param e the element\n+     * Integrates the member element into the structure being built.\n+     *\n+     * @apiNote\n+     * This method exists to implement {@link Consumer}; users can use {@link\n+     * #with} for call chaining.\n+     *\n+     * @param e the member element\n+     * @throws IllegalArgumentException if the member element cannot be\n+     *         represented in the {@code class} file format\n@@ -61,2 +87,3 @@\n-     * Integrate the {@link ClassFileElement} into the entity being built.\n-     * @param e the element\n+     * Integrates the member element into the structure being built.\n+     *\n+     * @param e the member element\n@@ -64,0 +91,2 @@\n+     * @throws IllegalArgumentException if the member element cannot be\n+     *         represented in the {@code class} file format\n@@ -73,2 +102,20 @@\n-     * Apply a transform to a model, directing results to this builder.\n-     * @param model the model to transform\n+     * Applies a transform to a compound structure, directing results to this\n+     * builder.\n+     * <p>\n+     * The transform will receive each element of the compound structure, as\n+     * well as this builder for building the structure.  The transform is free\n+     * to preserve, remove, or replace elements as it sees fit.\n+     * <p>\n+     * A builder can run multiple transforms against different compound\n+     * structures, integrating member elements of different origins.\n+     *\n+     * @apiNote\n+     * Many subinterfaces have methods like {@link ClassBuilder#transformMethod}\n+     * or {@link MethodBuilder#transformCode}.  However, calling them is\n+     * fundamentally different from calling this method: those methods call the\n+     * {@code transform} on the child builders instead of on itself.  For\n+     * example, {@code classBuilder.transformMethod} calls {@code\n+     * methodBuilder.transform} with a new method builder instead of calling\n+     * {@code classBuilder.transform} on itself.\n+     *\n+     * @param model the structure to transform\n@@ -77,0 +124,1 @@\n+     * @see ClassFileTransform\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileBuilder.java","additions":64,"deletions":16,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,28 @@\n- * Immutable model for a portion of (or the entirety of) a classfile.  Elements\n- * that model parts of the classfile that have attributes will implement {@link\n- * AttributedElement}; elements that model complex parts of the classfile that\n- * themselves contain their own child elements will implement {@link\n- * CompoundElement}.  Elements specific to various locations in the classfile\n- * will implement {@link ClassElement}, {@link MethodElement}, etc.\n+ * Marker interface for structures with special capabilities in the {@code\n+ * class} file format. {@link AttributedElement} indicates a structure has\n+ * {@link Attribute}s.  {@link CompoundElement} indicates a structure can be\n+ * viewed as a composition of member structures, whose memberships are marked by\n+ * {@link ClassElement}, {@link MethodElement}, {@link FieldElement}, or {@link\n+ * CodeElement}.\n+ *\n+ * <h2 id=\"membership\">Membership Elements<\/h2>\n+ * {@link ClassModel}, {@link MethodModel}, {@link FieldModel}, and {@link\n+ * CodeModel} each has a dedicated interface marking its member structures:\n+ * {@link ClassElement}, {@link MethodElement}, {@link FieldElement}, and\n+ * {@link CodeElement}.  They can be supplied to a {@link ClassBuilder}, a\n+ * {@link MethodBuilder}, a {@link FieldBuilder}, or a {@link CodeBuilder} to be\n+ * included as members of the built model.  Unless otherwise specified, these\n+ * structures are delivered during the {@linkplain CompoundElement traversal} of\n+ * the corresponding models.  Some of these elements may appear at most once or\n+ * exactly once in the traversal of the models; such elements have special\n+ * treatment by {@link ClassFileBuilder} and are specified in their modeling\n+ * interfaces.  If such elements appear multiple times during traversal, the\n+ * last occurrence should be used and all previous instances should be\n+ * discarded.\n+ * <p>\n+ * These membership element marker interfaces are sealed; future versions of the\n+ * Java SE Platform may define new elements to the sealed hierarchy when the\n+ * {@code class} file format for the Java Platform evolves.  Using an exhaustive\n+ * pattern matching switch over these hierarchies indicates the user only wish\n+ * the processing code to run on a specific version of Java Platform, and will\n+ * fail if unknown new elements are encountered.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileElement.java","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.function.Predicate;\n@@ -31,32 +32,61 @@\n- * A transformation on streams of elements. Transforms are used during\n- * transformation of classfile entities; a transform is provided to a method like\n- * {@link ClassFile#transformClass(ClassModel, ClassTransform)}, and the elements of the class,\n- * along with a builder, are presented to the transform.\n- *\n- * <p>The subtypes of {@linkplain\n- * ClassFileTransform} (e.g., {@link ClassTransform}) are functional interfaces\n- * that accept an element and a corresponding builder.  Since any element can be\n- * reproduced on the builder via {@link ClassBuilder#with(ClassFileElement)}, a\n- * transform can easily leave elements in place, remove them, replace them, or\n- * augment them with other elements.  This enables localized transforms to be\n- * represented concisely.\n- *\n- * <p>Transforms also have an {@link #atEnd(ClassFileBuilder)} method, for\n- * which the default implementation does nothing, so that a transform can\n- * perform additional building after the stream of elements is exhausted.\n- *\n- * <p>Transforms can be chained together via the {@link\n- * #andThen(ClassFileTransform)} method, so that the output of one becomes the\n- * input to another.  This allows smaller units of transformation to be captured\n- * and reused.\n- *\n- * <p>Some transforms are stateful; for example, a transform that injects an\n- * annotation on a class may watch for the {@link RuntimeVisibleAnnotationsAttribute}\n- * element and transform it if found, but if it is not found, will generate a\n- * {@linkplain RuntimeVisibleAnnotationsAttribute} element containing the\n- * injected annotation from the {@linkplain #atEnd(ClassFileBuilder)} handler.\n- * To do this, the transform must accumulate some state during the traversal so\n- * that the end handler knows what to do.  If such a transform is to be reused,\n- * its state must be reset for each traversal; this will happen automatically if\n- * the transform is created with {@link ClassTransform#ofStateful(Supplier)} (or\n- * corresponding methods for other classfile locations.)\n+ * A transformation on a {@link CompoundElement} by processing its individual\n+ * member elements and sending the results to a {@link ClassFileBuilder},\n+ * through {@link ClassFileBuilder#transform}.  A subtype of {@code\n+ * ClassFileTransform} is defined for each subtype of {@link CompoundElement}\n+ * and {@link ClassFileBuilder}, as shown in the sealed class hierarchy below.\n+ * <p>\n+ * For example, this is a basic transformation of a {@link CodeModel} that\n+ * redirects all calls to static methods in the {@code Foo} class to the {@code\n+ * Bar} class, preserving all other elements:\n+ * {@snippet file=\"PackageSnippets.java\" region=fooToBarTransform}\n+ * Note that if no transformation of a member element is desired, the element\n+ * should be presented to {@link ClassFileBuilder#with builder::with}.  If no\n+ * action is taken, that member element is dropped.\n+ * <p>\n+ * More advanced usages of transforms include {@linkplain ##start-end start or\n+ * end handling}, {@linkplain ##stateful stateful transformation} that makes a\n+ * decision based on previously encountered member elements, and {@linkplain\n+ * ##composition composition} of transforms, where one transform processes the\n+ * results of a previous transform on the input compound structure.  All these\n+ * capabilities are supported by this interface and accessible to user transform\n+ * implementations.\n+ * <p id=\"start-end\">\n+ * Users can define custom start and end handling for a transform by overriding\n+ * {@link #atStart} and {@link #atEnd}.  The start handler is called before any\n+ * member element is processed, and the end handler is called after all member\n+ * elements are processed.  For example, the start handler can be used to inject\n+ * extra code elements to the beginning of a code array, and the end handler,\n+ * combined with stateful transformation, can perform cleanup actions, such as\n+ * determining if an attribute has been merged, or if a new attribute should be\n+ * defined.  Each subtype of {@code ClassFileTransform} defines a utility method\n+ * {@code endHandler} that returns a transform that only has end handling.\n+ * <p id=\"stateful\">\n+ * Transforms can have states that persist across processing of individual\n+ * member elements.  For example, if a transform injects an annotation, the\n+ * transform may keep track if it has encountered and presented an updated\n+ * {@link RuntimeVisibleAnnotationsAttribute} to the builder; if it has not yet,\n+ * it can present a new attribute containing only the injected annotation in its\n+ * end handler.  If such a transform is to be shared or reused, each returned\n+ * transform should have its own state.  Each subtype of {@code ClassFileTransform}\n+ * defines a utility method {@code ofStateful} where a supplier creates the\n+ * transform at its initial state each time the transform is reused.\n+ * <p id=\"composition\">\n+ * Transforms can be composed via {@link #andThen}.  When this transform is\n+ * composed with another transform, it means the output member elements received\n+ * by the {@link ClassFileBuilder} become the input elements to that other\n+ * transform.  Composition avoids building intermediate structures for multiple\n+ * transforms to run on.  Each subtype of {@code ClassFileTransform} implements\n+ * {@link #andThen}, which generally should not be implemented by users.\n+ * <p>\n+ * Transforms that run on smaller structures can be lifted to its enclosing\n+ * structures to selectively run on all enclosed smaller structures of the same\n+ * kind.  For example, a {@link CodeTransform} can be lifted via {@link\n+ * ClassTransform#transformingMethodBodies(Predicate, CodeTransform)} to\n+ * transform the method body of select methods in the class it runs on.  This\n+ * allows users to write small transforms and apply to larger scales.\n+ * <p>\n+ * Besides {@link ClassFileBuilder#transform}, there are other methods that\n+ * accepts a transform conveniently, such as {@link ClassFile#transformClass},\n+ * {@link ClassBuilder#transformField}, {@link ClassBuilder#transformMethod}, or\n+ * {@link MethodBuilder#transformCode}.  They are convenience methods that suit\n+ * the majority of transformation scenarios.\n@@ -65,1 +95,1 @@\n- * @param <E> the element type\n+ * @param <E> the member element type\n@@ -82,0 +112,3 @@\n+     * <p>\n+     * This method is called by the Class-File API.  Users should never call\n+     * this method.\n@@ -92,0 +125,3 @@\n+     * <p>\n+     * This method is called by the Class-File API.  Users should never call\n+     * this method.\n@@ -103,0 +139,3 @@\n+     * <p>\n+     * This method is called by the Class-File API.  Users should never call\n+     * this method.\n@@ -113,0 +152,4 @@\n+     * <p>\n+     * This method is implemented by the Class-File API.  Users usually don't\n+     * have sufficient access to Class-File API functionalities to override this\n+     * method correctly for generic downstream transforms.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileTransform.java","additions":77,"deletions":34,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.lang.reflect.ClassFileFormatVersion;\n+\n@@ -30,3 +32,20 @@\n- * Models the classfile version information for a class.  Delivered as a {@link\n- * java.lang.classfile.ClassElement} when traversing the elements of a {@link\n- * ClassModel}.\n+ * Models the minor and major version numbers of a {@code class} file (JVMS\n+ * {@jvms 4.1}).  The {@code class} file version appears exactly once in each\n+ * class, and is set to an unspecified default value if not explicitly provided.\n+ * <p>\n+ * The major versions of {@code class} file format begins at {@value\n+ * ClassFile#JAVA_1_VERSION} for Java Platform version 1.0.2, and is continuous\n+ * up to {@link ClassFile#latestMajorVersion()}.  In general, each major version\n+ * defines a new supported {@code class} file format, modeled by {@link\n+ * ClassFileFormatVersion}, and supports all previous formats.\n+ * <p>\n+ * For major versions up to {@value ClassFile#JAVA_11_VERSION} for Java SE\n+ * Platform 11, the minor version of any value is supported.  For major versions\n+ * {@value ClassFile#JAVA_12_VERSION} for Java SE Platform version 12 and above,\n+ * the minor version must be {@code 0} or {@value ClassFile#PREVIEW_MINOR_VERSION}.\n+ * The minor version {@code 0} is always supported, and represents the format\n+ * modeled by {@link ClassFileFormatVersion}.  The minor version {@code 65535}\n+ * indicates the {@code class} file uses preview features of the Java SE\n+ * Platform release represented by the major version.  A Java Virtual Machine\n+ * can only load such a {@code class} file if it has the same Java SE Platform\n+ * version and the JVM has preview features enabled.\n@@ -34,0 +53,4 @@\n+ * @see ClassModel#majorVersion()\n+ * @see ClassModel#minorVersion()\n+ * @see ClassFileFormatVersion\n+ * @jvms 4.1 The {@code ClassFile} Structure\n@@ -40,1 +63,6 @@\n-     * {@return the major classfile version}\n+     * {@return the major version, as an unsigned short}\n+     *\n+     * @apiNote\n+     * Constants in {@link ClassFile} named {@code Java_#_VERSION}, where # is\n+     * a release number, such as {@link ClassFile#JAVA_21_VERSION}, describe the\n+     * class major versions of the Java Platform SE.\n@@ -45,1 +73,1 @@\n-     * {@return the minor classfile version}\n+     * {@return the minor version, as an unsigned short}\n@@ -51,2 +79,2 @@\n-     * @param majorVersion the major classfile version\n-     * @param minorVersion the minor classfile version\n+     * @param majorVersion the major version\n+     * @param minorVersion the minor version\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileVersion.java","additions":36,"deletions":8,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.io.IOException;\n@@ -28,0 +29,3 @@\n+import java.io.UncheckedIOException;\n+import java.lang.classfile.ClassFile.StackMapsOption;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -45,2 +49,4 @@\n- * Provides class hierarchy information for generating correct stack maps\n- * during code building.\n+ * Provides class hierarchy information for {@linkplain StackMapsOption stack\n+ * maps generation} and {@linkplain ClassFile#verify(byte[]) verification}.\n+ * A class hierarchy resolver must be able to process all classes and interfaces\n+ * encountered during these workloads.\n@@ -48,0 +54,3 @@\n+ * @see ClassFile.ClassHierarchyResolverOption\n+ * @see StackMapTableAttribute\n+ * @jvms 4.10.1.2 Verification Type System\n@@ -54,1 +63,1 @@\n-     * {@return the default instance of {@linkplain ClassHierarchyResolver} that\n+     * {@return the default instance of {@code ClassHierarchyResolver} that\n@@ -56,0 +65,3 @@\n+     * This default instance cannot load classes from other class loaders, such\n+     * as the caller's class loader; it also loads the system classes if they\n+     * are not yet loaded, which makes it unsuitable for instrumentation.\n@@ -62,2 +74,8 @@\n-     * {@return the {@link ClassHierarchyInfo} for a given class name, or null\n-     * if the name is unknown to the resolver}\n+     * {@return the {@code ClassHierarchyInfo} for a given class name, or {@code\n+     * null} if the name is unknown to the resolver}\n+     * <p>\n+     * This method is called by the Class-File API to obtain the hierarchy\n+     * information of a class or interface; users should not call this method.\n+     * The symbolic descriptor passed by the Class-File API always represents\n+     * a class or interface.\n+     *\n@@ -65,1 +83,2 @@\n-     * @throws IllegalArgumentException if a class shouldn't be queried for hierarchy\n+     * @throws IllegalArgumentException if a class shouldn't be queried for\n+     *         hierarchy, such as when it is inaccessible\n@@ -81,0 +100,1 @@\n+         * @see Superclass\n@@ -97,2 +117,6 @@\n-     * Chains this {@linkplain ClassHierarchyResolver} with another to be\n-     * consulted if this resolver does not know about the specified class.\n+     * Chains this {@code ClassHierarchyResolver} with another to be consulted\n+     * if this resolver does not know about the specified class.\n+     *\n+     * @implSpec\n+     * The default implementation returns resolver implemented to query {@code\n+     * other} resolver in case this resolver returns {@code null}.\n@@ -102,3 +126,0 @@\n-     *\n-     * @implSpec The default implementation returns resolver implemented to ask\n-     *           other resolver in cases where this resolver returns {@code null}.\n@@ -120,3 +141,4 @@\n-     * Returns a ClassHierarchyResolver that caches class hierarchy information from this\n-     * resolver. The returned resolver will not update if delegate resolver returns differently.\n-     * The thread safety of the returned resolver depends on the thread safety of the map\n+     * {@return a {@code ClassHierarchyResolver} that caches class hierarchy\n+     * information from this resolver}  The returned resolver will not update if\n+     * the query results from this resolver changed over time.  The thread\n+     * safety of the returned resolver depends on the thread safety of the map\n@@ -125,2 +147,6 @@\n-     * @param cacheFactory the factory for the cache\n-     * @return the ClassHierarchyResolver with caching\n+     * @implSpec\n+     * The default implementation returns a resolver holding an instance of the\n+     * cache map provided by the {@code cacheFactory}.  It looks up in the cache\n+     * map, or if a class name has not yet been queried, queries this resolver\n+     * and caches the result, including a {@code null} that indicates unknown\n+     * class names.  The cache map may refuse {@code null} keys and values.\n@@ -128,5 +154,1 @@\n-     * @implSpec The default implementation returns resolver holding an instance\n-     *           of the cache map provided by the {@code cacheFactory}. It asks\n-     *           the cache map always first and fills the cache map with all\n-     *           resolved and also unresolved class info. The cache map may refuse\n-     *           {@code null} keys and values.\n+     * @param cacheFactory the factory for the cache\n@@ -139,3 +161,4 @@\n-     * Returns a ClassHierarchyResolver that caches class hierarchy information from this\n-     * resolver. The returned resolver will not update if delegate resolver returns differently.\n-     * The returned resolver is not thread-safe.\n+     * {@return a {@code ClassHierarchyResolver} that caches class hierarchy\n+     * information from this resolver}  The returned resolver will not update if\n+     * the query results from this resolver changed over time.  The returned\n+     * resolver is not thread-safe.\n@@ -144,2 +167,0 @@\n-     * @return the ClassHierarchyResolver\n-     *\n@@ -163,4 +184,6 @@\n-     * Returns a {@linkplain ClassHierarchyResolver} that extracts class hierarchy\n-     * information from classfiles located by a mapping function. The mapping function\n-     * should return null if it cannot provide a mapping for a classfile. Any IOException\n-     * from the provided input stream is rethrown as an UncheckedIOException.\n+     * {@return a {@code ClassHierarchyResolver} that extracts class hierarchy\n+     * information from {@code class} files returned by a mapping function}  The\n+     * mapping function should return {@code null} if it cannot provide a\n+     * {@code class} file for a class name.  Any {@link IOException} from the\n+     * provided input stream is rethrown as an {@link UncheckedIOException}\n+     * in {@link #getClassInfo(ClassDesc)}.\n@@ -168,2 +191,1 @@\n-     * @param classStreamResolver maps class descriptors to classfile input streams\n-     * @return the {@linkplain ClassHierarchyResolver}\n+     * @param classStreamResolver maps class descriptors to {@code class} file input streams\n@@ -176,2 +198,2 @@\n-     * Returns a {@linkplain ClassHierarchyResolver} that extracts class hierarchy\n-     * information from classfiles located by a class loader.\n+     * {@return a {@code ClassHierarchyResolver} that extracts class hierarchy\n+     * information from {@code class} files located by a class loader}\n@@ -180,1 +202,0 @@\n-     * @return the {@linkplain ClassHierarchyResolver}\n@@ -193,2 +214,2 @@\n-     * Returns a {@linkplain  ClassHierarchyResolver} that extracts class hierarchy\n-     * information from collections of class hierarchy metadata\n+     * {@return a {@code ClassHierarchyResolver} that extracts class hierarchy\n+     * information from collections of class hierarchy metadata}\n@@ -198,1 +219,0 @@\n-     * @return the {@linkplain ClassHierarchyResolver}\n@@ -201,1 +221,1 @@\n-                                            Map<ClassDesc, ClassDesc> classToSuperClass) {\n+                                     Map<ClassDesc, ClassDesc> classToSuperClass) {\n@@ -206,2 +226,2 @@\n-     * Returns a ClassHierarchyResolver that extracts class hierarchy information via\n-     * the Reflection API with a {@linkplain ClassLoader}.\n+     * {@return a {@code ClassHierarchyResolver} that extracts class hierarchy\n+     * information via classes loaded by a class loader with reflection}\n@@ -210,1 +230,0 @@\n-     * @return the class hierarchy resolver\n@@ -227,3 +246,4 @@\n-     * Returns a ClassHierarchyResolver that extracts class hierarchy information via\n-     * the Reflection API with a {@linkplain MethodHandles.Lookup Lookup}. If the class\n-     * resolved is inaccessible to the given lookup, it throws {@link\n+     * {@return a {@code ClassHierarchyResolver} that extracts class hierarchy\n+     * information via classes accessible to a {@link MethodHandles.Lookup}\n+     * with reflection} If the class resolved is inaccessible to the given\n+     * lookup, {@link #getClassInfo(ClassDesc)} throws {@link\n@@ -233,1 +253,0 @@\n-     * @return the class hierarchy resolver\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassHierarchyResolver.java","additions":66,"deletions":47,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.attribute.ModuleAttribute;\n@@ -30,0 +32,3 @@\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.constant.ClassDesc;\n+import java.lang.reflect.AccessFlag;\n@@ -32,0 +37,1 @@\n+import java.util.function.Consumer;\n@@ -36,3 +42,17 @@\n- * Models a classfile.  The contents of the classfile can be traversed via\n- * a streaming view, or via random access (e.g.,\n- * {@link #flags()}), or by freely mixing the two.\n+ * Models a {@code class} file.  A {@code class} file can be viewed as a\n+ * {@linkplain CompoundElement composition} of {@link ClassElement}s, or by\n+ * random access via accessor methods if only specific parts of the {@code\n+ * class} file is needed.\n+ * <p>\n+ * Use {@link ClassFile#parse(byte[])}, which parses the binary data of a {@code\n+ * class} file into a model, to obtain a {@code ClassModel}.\n+ * <p>\n+ * To construct a {@code class} file, use {@link ClassFile#build(ClassDesc,\n+ * Consumer)}.  {@link ClassFile#transformClass(ClassModel, ClassTransform)}\n+ * allows creating a new class by selectively processing the original class\n+ * elements and directing the results to a class builder.\n+ * <p>\n+ * A class holds attributes, most of which are accessible as member elements.\n+ * {@link BootstrapMethodsAttribute} can only be accessed via {@linkplain\n+ * AttributedElement explicit attribute reading}, as it is modeled as part of\n+ * the {@linkplain #constantPool() constant pool}.\n@@ -40,0 +60,3 @@\n+ * @see ClassFile#parse(byte[])\n+ * @see ClassTransform\n+ * @jvms 4.1 The {@code ClassFile} Structure\n@@ -48,0 +71,2 @@\n+     *\n+     * @see ConstantPoolBuilder#of(ClassModel)\n@@ -51,1 +76,5 @@\n-    \/** {@return the access flags} *\/\n+    \/**\n+     * {@return the access flags}\n+     *\n+     * @see AccessFlag.Location#CLASS\n+     *\/\n@@ -57,1 +86,5 @@\n-    \/** {@return the major classfile version} *\/\n+    \/**\n+     * {@return the major version of this class}\n+     *\n+     * @see ClassFileVersion\n+     *\/\n@@ -60,1 +93,5 @@\n-    \/** {@return the minor classfile version} *\/\n+    \/**\n+     * {@return the minor version of this class}\n+     *\n+     * @see ClassFileVersion\n+     *\/\n@@ -69,1 +106,9 @@\n-    \/** {@return the superclass of this class, if there is one} *\/\n+    \/**\n+     * {@return the superclass of this class, if there is one}\n+     * This {@code class} file may have no superclass if this represents a\n+     * {@linkplain #isModuleInfo() module descriptor} or the {@link Object}\n+     * class; otherwise, it must have a superclass.  If this is an interface,\n+     * the superclass must be {@link Object}.\n+     *\n+     * @see Superclass\n+     *\/\n@@ -72,1 +117,5 @@\n-    \/** {@return the interfaces implemented by this class} *\/\n+    \/**\n+     * {@return the interfaces implemented by this class}\n+     *\n+     * @see Interfaces\n+     *\/\n@@ -75,1 +124,5 @@\n-    \/** {@return whether this class is a module descriptor} *\/\n+    \/**\n+     * {@return whether this {@code class} file is a module descriptor}\n+     *\n+     * @see ClassFile#buildModule(ModuleAttribute, Consumer)\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassModel.java","additions":63,"deletions":10,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,3 @@\n+ * <p>\n+ * Refer to {@link ClassFileTransform} for general guidance and caution around\n+ * the use of transforms for structures in the {@code class} file format.\n@@ -39,2 +42,2 @@\n- * @see ClassFileTransform\n- *\n+ * @see ClassModel\n+ * @see ClassFile#transformClass(ClassModel, ClassTransform)\n@@ -48,1 +51,1 @@\n-     * A class transform that sends all elements to the builder.\n+     * A class transform that passes all elements to the builder.\n@@ -58,1 +61,1 @@\n-     * Create a stateful class transform from a {@link Supplier}.  The supplier\n+     * Creates a stateful class transform from a {@link Supplier}.  The supplier\n@@ -70,1 +73,1 @@\n-     * Create a class transform that passes each element through to the builder,\n+     * Creates a class transform that passes each element through to the builder,\n@@ -92,2 +95,2 @@\n-     * Create a class transform that passes each element through to the builder,\n-     * except for those that the supplied {@link Predicate} is true for.\n+     * Creates a class transform that passes each element through to the builder,\n+     * except for those that the supplied {@link Predicate} returns true for.\n@@ -107,2 +110,4 @@\n-     * Create a class transform that transforms {@link MethodModel} elements\n-     * with the supplied method transform.\n+     * Creates a class transform that transforms {@link MethodModel} elements\n+     * with the supplied method transform for methods that the supplied {@link\n+     * Predicate} returns true for, passing other elements through to the\n+     * builder.\n@@ -120,2 +125,3 @@\n-     * Create a class transform that transforms {@link MethodModel} elements\n-     * with the supplied method transform.\n+     * Creates a class transform that transforms {@link MethodModel} elements\n+     * with the supplied method transform, passing other elements through to the\n+     * builder.\n@@ -131,2 +137,4 @@\n-     * Create a class transform that transforms the {@link CodeAttribute} (method body)\n-     * of {@link MethodModel} elements with the supplied code transform.\n+     * Creates a class transform that transforms the {@link CodeAttribute} (method body)\n+     * of {@link MethodModel} elements with the supplied code transform for\n+     * methods that the supplied {@link Predicate} returns true for, passing\n+     * other elements through to the builder.\n@@ -144,2 +152,3 @@\n-     * Create a class transform that transforms the {@link CodeAttribute} (method body)\n-     * of {@link MethodModel} elements with the supplied code transform.\n+     * Creates a class transform that transforms the {@link CodeAttribute} (method body)\n+     * of {@link MethodModel} elements with the supplied code transform, passing\n+     * other elements through to the builder.\n@@ -155,2 +164,3 @@\n-     * Create a class transform that transforms {@link FieldModel} elements\n-     * with the supplied field transform.\n+     * Creates a class transform that transforms {@link FieldModel} elements\n+     * with the supplied field transform, passing other elements through to the\n+     * builder.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassTransform.java","additions":28,"deletions":18,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.classfile.ClassFile.*;\n@@ -47,6 +48,17 @@\n- * A builder for code attributes (method bodies).  Builders are not created\n- * directly; they are passed to handlers by methods such as {@link\n- * MethodBuilder#withCode(Consumer)} or to code transforms.  The elements of a\n- * code can be specified abstractly, by passing a {@link CodeElement} to {@link\n- * #with(ClassFileElement)} or concretely by calling the various {@code withXxx}\n- * methods.\n+ * A builder for {@link CodeModel Code} attributes (method bodies).  {@link\n+ * MethodBuilder#withCode} is the basic way to obtain a code builder; {@link\n+ * ClassBuilder#withMethodBody} is a shortcut.  There are also derived code\n+ * builders from {@link #block}, which handles code blocks and {@link\n+ * #transforming}, which runs transforms on existing handlers, both of which\n+ * requires a code builder to be available first.\n+ * <p>\n+ * Refer to {@link ClassFileBuilder} for general guidance and caution around\n+ * the use of builders for structures in the {@code class} file format.  Unlike\n+ * in other builders, the order of member elements in a code builder is\n+ * significant: they affect the resulting bytecode.  Many Class-File API options\n+ * affect code builders: {@link DeadCodeOption} and {@link ShortJumpsOption}\n+ * affect the resulting bytecode, and {@link DeadLabelsOption}, {@link\n+ * DebugElementsOption}, {@link LineNumbersOption}, {@link StackMapsOption}, and\n+ * {@link AttributesProcessingOption} affect the resulting attributes on the\n+ * built {@code Code} attribute, that some elements sent to a code builder is\n+ * otherwise ignored.\n@@ -63,3 +75,3 @@\n- * wide}, share their factories with their regular version like {@link #ldc}. Note\n- * that {@link #goto_w goto_w} has its own factory to avoid {@linkplain\n- * ClassFile.ShortJumpsOption short jumps}.\n+ * wide}, share their factories with their regular version like {@link #ldc}.\n+ * Note that {@link #goto_w goto_w} has its own factory to avoid {@linkplain\n+ * ShortJumpsOption short jumps}.\n@@ -70,3 +82,5 @@\n- * <li>Factories are not provided for instructions {@code jsr}, {@code jsr_w},\n- * {@code ret}, and {@code wide ret}, which cannot appear in class files with\n- * major version {@value ClassFile#JAVA_7_VERSION} or higher. (JVMS {@jvms 4.9.1})\n+ * <li>Factories are not provided for instructions {@link Opcode#JSR jsr},\n+ * {@link Opcode#JSR_W jsr_w}, {@link Opcode#RET ret}, and {@link Opcode#RET_W\n+ * wide ret}, which cannot appear in class files with major version {@value\n+ * ClassFile#JAVA_7_VERSION} or higher. (JVMS {@jvms 4.9.1})  They can still be\n+ * provided via {@link #with}.\n@@ -75,0 +89,2 @@\n+ * @see MethodBuilder#withCode\n+ * @see CodeModel\n@@ -76,1 +92,0 @@\n- *\n@@ -83,1 +98,4 @@\n-    \/** {@return a fresh unbound label} *\/\n+    \/**\n+     * {@return a fresh unbound label}\n+     * The label can be bound with {@link #labelBinding}.\n+     *\/\n@@ -86,4 +104,6 @@\n-    \/** {@return the label associated with the beginning of the current block}\n-     * If the current {@linkplain CodeBuilder} is not a \"block\" builder, such as\n-     * those provided by {@link #block(Consumer)} or {@link #ifThenElse(Consumer, Consumer)},\n-     * the current block will be the entire method body. *\/\n+    \/**\n+     * {@return the label associated with the beginning of the current block}\n+     * If this builder is not a \"block\" builder, such as those provided by\n+     * {@link #block(Consumer)} or {@link #ifThenElse(Consumer, Consumer)},\n+     * the current block will be the entire method body.\n+     *\/\n@@ -92,4 +112,6 @@\n-    \/** {@return the label associated with the end of the current block}\n-     * If the current {@linkplain CodeBuilder} is not a \"block\" builder, such as\n-     * those provided by {@link #block(Consumer)} or {@link #ifThenElse(Consumer, Consumer)},\n-     * the current block will be the entire method body. *\/\n+    \/**\n+     * {@return the label associated with the end of the current block}\n+     * If this builder is not a \"block\" builder, such as those provided by\n+     * {@link #block(Consumer)} or {@link #ifThenElse(Consumer, Consumer)},\n+     * the current block will be the entire method body.\n+     *\/\n@@ -99,1 +121,1 @@\n-     * {@return the local variable slot associated with the receiver}.\n+     * {@return the local variable slot associated with the receiver}\n@@ -106,1 +128,1 @@\n-     * {@return the local variable slot associated with the specified parameter}.\n+     * {@return the local variable slot associated with the specified parameter}\n@@ -108,1 +130,2 @@\n-     * an instance method) and for the requirement that {@code long} and {@code double}\n+     * an instance method) and for the requirement that {@link TypeKind#LONG\n+     * long} and {@link TypeKind#DOUBLE double}\n@@ -118,8 +141,6 @@\n-     * are not.  When transforming a method, fresh locals begin at the {@code maxLocals}\n-     * of the original method.  For a method being built directly, fresh locals\n-     * begin after the last parameter slot.\n-     *\n-     * <p>If the current code builder is a \"block\" code builder provided by\n-     * {@link #block(Consumer)}, {@link #ifThen(Consumer)}, or\n-     * {@link #ifThenElse(Consumer, Consumer)}, at the end of the block, locals\n-     * are reset to their value at the beginning of the block.\n+     * are not.  When transforming a method, fresh locals begin at the {@code\n+     * maxLocals} of the original method.  For a method being built directly,\n+     * fresh locals begin after the last parameter slot.\n+     * <p>\n+     * If the current code builder is a {@link BlockCodeBuilder}, at the end of\n+     * the block, locals are reset to their value at the beginning of the block.\n@@ -132,1 +153,6 @@\n-     * Apply a transform to the code built by a handler, directing results to this builder.\n+     * Apply a transform to the code built by a handler, directing results to\n+     * this builder.\n+     *\n+     * @apiNote\n+     * This is similar to {@link #transform}, but this does not require the\n+     * code elements to be viewed as a {@link CodeModel} first.\n@@ -135,2 +161,2 @@\n-     * @param handler the handler that receives a {@linkplain CodeBuilder} to\n-     * build the code.\n+     * @param handler the handler that receives a {@link CodeBuilder} to\n+     * build the code\n@@ -148,1 +174,3 @@\n-     * A builder for blocks of code.\n+     * A builder for blocks of code.  Its {@link #startLabel()} and {@link\n+     * #endLabel()} do not enclose the entire method body, but from the start to\n+     * the end of the block.\n@@ -155,2 +183,3 @@\n-         * {@return the label locating where control is passed back to the parent block.}\n-         * A branch to this label \"break\"'s out of the current block.\n+         * {@return the label locating where control is passed back to the\n+         * parent block}  A branch to this label \"break\"'s out of the current\n+         * block.\n@@ -158,3 +187,3 @@\n-         * If an instruction occurring immediately after the built block's last instruction would\n-         * be reachable from that last instruction, then a {@linkplain #goto_ goto} instruction\n-         * targeting the \"break\" label is appended to the built block.\n+         * If the last instruction in this block does not lead to the break\n+         * label, Class-File API may append instructions to target the \"break\"\n+         * label to the built block.\n@@ -166,1 +195,1 @@\n-     * Add a lexical block to the method being built.\n+     * Adds a lexical block to the method being built.\n@@ -168,3 +197,4 @@\n-     * Within this block, the {@link #startLabel()} and {@link #endLabel()} correspond\n-     * to the start and end of the block, and the {@link BlockCodeBuilder#breakLabel()}\n-     * also corresponds to the end of the block.\n+     * Within this block, the {@link #startLabel()} and {@link #endLabel()}\n+     * correspond to the start and end of the block, and the {@link\n+     * BlockCodeBuilder#breakLabel()} also corresponds to the end of the block,\n+     * or the cursor position immediately after this call in this builder.\n@@ -172,2 +202,2 @@\n-     * @param handler handler that receives a {@linkplain BlockCodeBuilder} to\n-     * generate the body of the lexical block.\n+     * @param handler handler that receives a {@link BlockCodeBuilder} to\n+     * generate the body of the lexical block\n@@ -186,2 +216,3 @@\n-     * Add an \"if-then\" block that is conditional on the boolean value\n-     * on top of the operand stack.\n+     * Adds an \"if-then\" block that is conditional on the {@link TypeKind#BOOLEAN\n+     * boolean} value on top of the operand stack.  Control flow enters the\n+     * \"then\" block if the value represents {@code true}.\n@@ -189,2 +220,2 @@\n-     * The {@link BlockCodeBuilder#breakLabel()} for the \"then\" block corresponds to the\n-     * end of that block.\n+     * The {@link BlockCodeBuilder#breakLabel()} for the \"then\" block corresponds\n+     * to the cursor position immediately after this call in this builder.\n@@ -192,2 +223,2 @@\n-     * @param thenHandler handler that receives a {@linkplain BlockCodeBuilder} to\n-     *                    generate the body of the {@code if}\n+     * @param thenHandler handler that receives a {@linkplain BlockCodeBuilder}\n+     *                    to generate the body of the {@code if}\n@@ -195,0 +226,1 @@\n+     * @see #ifThen(Opcode, Consumer)\n@@ -201,2 +233,3 @@\n-     * Add an \"if-then\" block that is conditional on the value(s) on top of the operand stack\n-     * in accordance with the given opcode.\n+     * Adds an \"if-then\" block that is conditional on the value(s) on top of the\n+     * operand stack in accordance with the given opcode.  Control flow enters\n+     * the \"then\" block if the branching condition for {@code opcode} succeeds.\n@@ -204,2 +237,2 @@\n-     * The {@link BlockCodeBuilder#breakLabel()} for the \"then\" block corresponds to the\n-     * end of that block.\n+     * The {@link BlockCodeBuilder#breakLabel()} for the \"then\" block corresponds\n+     * to the cursor position immediately after this call in this builder.\n@@ -207,2 +240,3 @@\n-     * @param opcode the operation code for a branch instructions that accepts one or two operands on the stack\n-     * @param thenHandler handler that receives a {@linkplain BlockCodeBuilder} to\n+     * @param opcode the operation code for a branch instruction that accepts\n+     *               one or two operands on the stack\n+     * @param thenHandler handler that receives a {@link BlockCodeBuilder} to\n@@ -211,2 +245,2 @@\n-     * @throws IllegalArgumentException if the operation code is not for a branch instruction that accepts\n-     * one or two operands\n+     * @throws IllegalArgumentException if the operation code is not for a\n+     *         branch instruction that accepts one or two operands\n@@ -230,2 +264,4 @@\n-     * Add an \"if-then-else\" block that is conditional on the boolean value\n-     * on top of the operand stack.\n+     * Adds an \"if-then-else\" block that is conditional on the {@link\n+     * TypeKind#BOOLEAN boolean} value on top of the operand stack.  Control\n+     * flow enters the \"then\" block if the value represents {@code true}, and\n+     * enters the \"else\" block otherwise.\n@@ -233,2 +269,2 @@\n-     * The {@link BlockCodeBuilder#breakLabel()} for each block corresponds to the\n-     * end of the \"else\" block.\n+     * The {@link BlockCodeBuilder#breakLabel()} for each block corresponds to\n+     * the cursor position immediately after this call in this builder.\n@@ -236,1 +272,1 @@\n-     * @param thenHandler handler that receives a {@linkplain BlockCodeBuilder} to\n+     * @param thenHandler handler that receives a {@link BlockCodeBuilder} to\n@@ -238,1 +274,1 @@\n-     * @param elseHandler handler that receives a {@linkplain BlockCodeBuilder} to\n+     * @param elseHandler handler that receives a {@link BlockCodeBuilder} to\n@@ -241,0 +277,1 @@\n+     * @see #ifThenElse(Opcode, Consumer, Consumer)\n@@ -248,2 +285,4 @@\n-     * Add an \"if-then-else\" block that is conditional on the value(s) on top of the operand stack\n-     * in accordance with the given opcode.\n+     * Adds an \"if-then-else\" block that is conditional on the value(s) on top\n+     * of the operand stack in accordance with the given opcode.  Control flow\n+     * enters the \"then\" block if the branching condition for {@code opcode}\n+     * succeeds, and enters the \"else\" block otherwise.\n@@ -251,2 +290,2 @@\n-     * The {@link BlockCodeBuilder#breakLabel()} for each block corresponds to the\n-     * end of the \"else\" block.\n+     * The {@link BlockCodeBuilder#breakLabel()} for each block corresponds to\n+     * the cursor position immediately after this call in this builder.\n@@ -254,5 +293,6 @@\n-     * @param opcode the operation code for a branch instructions that accepts one or two operands on the stack\n-     * @param thenHandler handler that receives a {@linkplain BlockCodeBuilder} to\n-     *                    generate the body of the {@code if}\n-     * @param elseHandler handler that receives a {@linkplain BlockCodeBuilder} to\n-     *                    generate the body of the {@code else}\n+     * @param opcode the operation code for a branch instruction that accepts\n+     *               one or two operands on the stack\n+     * @param thenHandler handler that receives a {@linkplain BlockCodeBuilder}\n+     *                    to generate the body of the {@code if}\n+     * @param elseHandler handler that receives a {@linkplain BlockCodeBuilder}\n+     *                    to generate the body of the {@code else}\n@@ -260,2 +300,2 @@\n-     * @throws IllegalArgumentException if the operation code is not for a branch instruction that accepts\n-     * one or two operands\n+     * @throws IllegalArgumentException if the operation code is not for a\n+     *         branch instruction that accepts one or two operands\n@@ -289,1 +329,1 @@\n-     *\n+     * @see ExceptionCatch\n@@ -296,1 +336,2 @@\n-         * The caught exception will be on top of the operand stack when the catch block is entered.\n+         * The caught exception will be on top of the operand stack when the\n+         * catch block is entered.\n@@ -298,1 +339,5 @@\n-         * If the type of exception is {@code null} then the catch block catches all exceptions.\n+         * The {@link BlockCodeBuilder#breakLabel()} for the catch block corresponds\n+         * to the break label of the {@code tryHandler} block in {@link #trying}.\n+         * <p>\n+         * If the type of exception is {@code null} then the catch block catches\n+         * all exceptions.\n@@ -300,3 +345,3 @@\n-         * @param exceptionType the type of exception to catch.\n-         * @param catchHandler handler that receives a {@linkplain CodeBuilder} to\n-         *                     generate the body of the catch block.\n+         * @param exceptionType the type of exception to catch, may be {@code null}\n+         * @param catchHandler handler that receives a {@link BlockCodeBuilder} to\n+         *                     generate the body of the catch block\n@@ -304,2 +349,3 @@\n-         * @throws IllegalArgumentException if an existing catch block catches an exception of the given type\n-         *                                  or {@code exceptionType} represents a primitive type\n+         * @throws IllegalArgumentException if an existing catch block catches\n+         *         an exception of the given type or {@code exceptionType}\n+         *         represents a primitive type\n@@ -314,1 +360,5 @@\n-         * The caught exception will be on top of the operand stack when the catch block is entered.\n+         * The caught exception will be on top of the operand stack when the\n+         * catch block is entered.\n+         * <p>\n+         * The {@link BlockCodeBuilder#breakLabel()} for the catch block corresponds\n+         * to the break label of the {@code tryHandler} block in {@link #trying}.\n@@ -316,1 +366,2 @@\n-         * If the type of exception is {@code null} then the catch block catches all exceptions.\n+         * If list of exception types is empty then the catch block catches all\n+         * exceptions.\n@@ -318,3 +369,3 @@\n-         * @param exceptionTypes the types of exception to catch.\n-         * @param catchHandler handler that receives a {@linkplain CodeBuilder} to\n-         *                     generate the body of the catch block.\n+         * @param exceptionTypes the types of exception to catch\n+         * @param catchHandler handler that receives a {@link BlockCodeBuilder}\n+         *                     to generate the body of the catch block\n@@ -322,1 +373,2 @@\n-         * @throws IllegalArgumentException if an existing catch block catches one or more exceptions of the given types.\n+         * @throws IllegalArgumentException if an existing catch block catches\n+         *         one or more exceptions of the given types\n@@ -331,1 +383,5 @@\n-         * The caught exception will be on top of the operand stack when the catch block is entered.\n+         * The {@link BlockCodeBuilder#breakLabel()} for the catch block corresponds\n+         * to the break label of the {@code tryHandler} block in {@link #trying}.\n+         * <p>\n+         * The caught exception will be on top of the operand stack when the\n+         * catch block is entered.\n@@ -333,3 +389,4 @@\n-         * @param catchAllHandler handler that receives a {@linkplain CodeBuilder} to\n-         *                        generate the body of the catch block\n-         * @throws IllegalArgumentException if an existing catch block catches all exceptions.\n+         * @param catchAllHandler handler that receives a {@link BlockCodeBuilder}\n+         *                        to generate the body of the catch block\n+         * @throws IllegalArgumentException if an existing catch block catches\n+         *         all exceptions\n@@ -343,2 +400,7 @@\n-     * Adds a \"try-catch\" block comprising one try block and zero or more catch blocks.\n-     * Exceptions thrown by instructions in the try block may be caught by catch blocks.\n+     * Adds a \"try-catch\" block comprising one try block and zero or more catch\n+     * blocks.  Exceptions thrown by instructions in the try block may be caught\n+     * by catch blocks.\n+     * <p>\n+     * The {@link BlockCodeBuilder#breakLabel()} for the try block and all\n+     * catch blocks in the {@code catchesHandler} correspond to the cursor\n+     * position immediately after this call in this builder.\n@@ -346,1 +408,1 @@\n-     * @param tryHandler handler that receives a {@linkplain CodeBuilder} to\n+     * @param tryHandler handler that receives a {@link BlockCodeBuilder} to\n@@ -348,2 +410,2 @@\n-     * @param catchesHandler a handler that receives a {@linkplain CatchBuilder}\n-     *                       to generate bodies of catch blocks.\n+     * @param catchesHandler a handler that receives a {@link CatchBuilder}\n+     *                       to generate bodies of catch blocks\n@@ -351,1 +413,1 @@\n-     * @throws IllegalArgumentException if the try block is empty.\n+     * @throws IllegalArgumentException if the try block is empty\n@@ -353,0 +415,2 @@\n+     * @see ExceptionCatch\n+     * @see #exceptionCatch\n@@ -378,1 +442,2 @@\n-     * Generate an instruction to load a value from a local variable\n+     * Generates an instruction to load a value from a local variable.\n+     *\n@@ -382,2 +447,3 @@\n-     * @throws IllegalArgumentException if {@code tk} is {@link TypeKind#VOID void}\n-     *         or {@code slot} is out of range\n+     * @throws IllegalArgumentException if {@code tk} is {@link TypeKind#VOID\n+     *         void} or {@code slot} is out of range\n+     * @see LoadInstruction\n@@ -390,1 +456,2 @@\n-     * Generate an instruction to store a value to a local variable\n+     * Generates an instruction to store a value to a local variable.\n+     *\n@@ -394,2 +461,3 @@\n-     * @throws IllegalArgumentException if {@code tk} is {@link TypeKind#VOID void}\n-     *         or {@code slot} is out of range\n+     * @throws IllegalArgumentException if {@code tk} is {@link TypeKind#VOID\n+     *         void} or {@code slot} is out of range\n+     * @see StoreInstruction\n@@ -402,2 +470,7 @@\n-     * Generate a branch instruction\n-     * @see Opcode.Kind#BRANCH\n+     * Generates a branch instruction.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set, the\n+     * opcode has {@linkplain Opcode#sizeIfFixed() size} 3, and {@code target}\n+     * cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -407,0 +480,3 @@\n+     * @throws IllegalArgumentException if {@code op} is not of {@link\n+     *         Opcode.Kind#BRANCH}\n+     * @see BranchInstruction\n@@ -413,1 +489,2 @@\n-     * Generate return instruction\n+     * Generates a return instruction.\n+     *\n@@ -416,0 +493,1 @@\n+     * @see ReturnInstruction\n@@ -422,2 +500,2 @@\n-     * Generate an instruction to access a field\n-     * @see Opcode.Kind#FIELD_ACCESS\n+     * Generates an instruction to access a field.\n+     *\n@@ -427,0 +505,3 @@\n+     * @throws IllegalArgumentException if {@code opcode} is not of {@link\n+     *         Opcode.Kind#FIELD_ACCESS}\n+     * @see FieldInstruction\n@@ -433,2 +514,2 @@\n-     * Generate an instruction to access a field\n-     * @see Opcode.Kind#FIELD_ACCESS\n+     * Generates an instruction to access a field.\n+     *\n@@ -440,0 +521,3 @@\n+     * @throws IllegalArgumentException if {@code opcode} is not of {@link\n+     *         Opcode.Kind#FIELD_ACCESS}, or {@code owner} is primitive\n+     * @see FieldInstruction\n@@ -446,2 +530,2 @@\n-     * Generate an instruction to invoke a method or constructor\n-     * @see Opcode.Kind#INVOKE\n+     * Generates an instruction to invoke a method.\n+     *\n@@ -451,0 +535,3 @@\n+     * @throws IllegalArgumentException if {@code opcode} is not of {@link\n+     *         Opcode.Kind#INVOKE}\n+     * @see InvokeInstruction\n@@ -457,2 +544,2 @@\n-     * Generate an instruction to invoke a method or constructor\n-     * @see Opcode.Kind#INVOKE\n+     * Generates an instruction to invoke a method.\n+     *\n@@ -463,1 +550,1 @@\n-     * @param isInterface the interface method invocation indication\n+     * @param isInterface whether the owner class is an interface\n@@ -465,0 +552,3 @@\n+     * @throws IllegalArgumentException if {@code opcode} is not of {@link\n+     *         Opcode.Kind#INVOKE}, or {@code owner} is primitive\n+     * @see InvokeInstruction\n@@ -473,1 +563,2 @@\n-     * Generate an instruction to load from an array\n+     * Generates an instruction to load from an array.\n+     *\n@@ -476,0 +567,3 @@\n+     * @throws IllegalArgumentException if {@code tk} is {@link TypeKind#VOID\n+     *         void}\n+     * @see ArrayLoadInstruction\n@@ -483,1 +577,2 @@\n-     * Generate an instruction to store into an array\n+     * Generates an instruction to store into an array.\n+     *\n@@ -486,0 +581,3 @@\n+     * @throws IllegalArgumentException if {@code tk} is {@link TypeKind#VOID\n+     *         void}\n+     * @see ArrayStoreInstruction\n@@ -493,1 +591,2 @@\n-     * Generate instruction(s) to convert {@code fromType} to {@code toType}\n+     * Generates instruction(s) to convert {@code fromType} to {@code toType}.\n+     *\n@@ -497,2 +596,3 @@\n-     * @throws IllegalArgumentException for conversions of {@link TypeKind#VOID void} or\n-     *         {@link TypeKind#REFERENCE reference}\n+     * @throws IllegalArgumentException for conversions of {@link TypeKind#VOID\n+     *         void} or {@link TypeKind#REFERENCE reference}\n+     * @see ConvertInstruction\n@@ -551,2 +651,3 @@\n-     * Generate an instruction pushing a constant onto the operand stack\n-     * @param value the constant value\n+     * Generates an instruction pushing a constant onto the operand stack.\n+     *\n+     * @param value the constant value, may be {@code null}\n@@ -554,0 +655,1 @@\n+     * @see ConstantInstruction\n@@ -570,2 +672,4 @@\n-     * Generate an instruction pushing a constant int value onto the operand stack.\n-     * This is identical to {@link #loadConstant(ConstantDesc) loadConstant(Integer.valueOf(value))}.\n+     * Generates an instruction pushing a constant {@link TypeKind#INT int}\n+     * value onto the operand stack.  This is equivalent to {@link\n+     * #loadConstant(ConstantDesc) loadConstant(Integer.valueOf(value))}.\n+     *\n@@ -574,1 +678,1 @@\n-     * @since 24\n+     * @see ConstantInstruction\n@@ -592,2 +696,4 @@\n-     * Generate an instruction pushing a constant long value onto the operand stack.\n-     * This is identical to {@link #loadConstant(ConstantDesc) loadConstant(Long.valueOf(value))}.\n+     * Generates an instruction pushing a constant {@link TypeKind#LONG long}\n+     * value onto the operand stack.  This is equivalent to {@link\n+     * #loadConstant(ConstantDesc) loadConstant(Long.valueOf(value))}.\n+     *\n@@ -596,1 +702,1 @@\n-     * @since 24\n+     * @see ConstantInstruction\n@@ -605,2 +711,7 @@\n-     * Generate an instruction pushing a constant float value onto the operand stack.\n-     * This is identical to {@link #loadConstant(ConstantDesc) loadConstant(Float.valueOf(value))}.\n+     * Generates an instruction pushing a constant {@link TypeKind#FLOAT float}\n+     * value onto the operand stack.  This is equivalent to {@link\n+     * #loadConstant(ConstantDesc) loadConstant(Float.valueOf(value))}.\n+     * <p>\n+     * All NaN values of the {@code float} may or may not be collapsed\n+     * into a single {@linkplain Float#NaN \"canonical\" NaN value}.\n+     *\n@@ -609,1 +720,1 @@\n-     * @since 24\n+     * @see ConstantInstruction\n@@ -619,2 +730,7 @@\n-     * Generate an instruction pushing a constant double value onto the operand stack.\n-     * This is identical to {@link #loadConstant(ConstantDesc) loadConstant(Double.valueOf(value))}.\n+     * Generates an instruction pushing a constant {@link TypeKind#DOUBLE double}\n+     * value onto the operand stack.  This is equivalent to {@link\n+     * #loadConstant(ConstantDesc) loadConstant(Double.valueOf(value))}.\n+     * <p>\n+     * All NaN values of the {@code double} may or may not be collapsed\n+     * into a single {@linkplain Double#NaN \"canonical\" NaN value}.\n+     *\n@@ -623,1 +739,1 @@\n-     * @since 24\n+     * @see ConstantInstruction\n@@ -632,1 +748,2 @@\n-     * Generate a do nothing instruction\n+     * Generates a do-nothing instruction.\n+     *\n@@ -634,0 +751,1 @@\n+     * @see NopInstruction\n@@ -642,1 +760,2 @@\n-     * Create new label bound with current position\n+     * Creates a new label bound at the current position.\n+     *\n@@ -644,0 +763,2 @@\n+     * @see #newLabel()\n+     * @see #labelBinding\n@@ -652,1 +773,6 @@\n-     * Bind label with current position\n+     * Binds a label to the current position.\n+     *\n+     * @apiNote\n+     * The label to bind does not have to be {@linkplain #newLabel() from this\n+     * builder}; it can be from another parsed {@link CodeModel}.\n+     *\n@@ -655,0 +781,1 @@\n+     * @see LabelTarget\n@@ -661,1 +788,4 @@\n-     * Declare a source line number of the current builder position\n+     * Declares a source line number beginning at the current position.\n+     * <p>\n+     * This call may be ignored according to {@link ClassFile.LineNumbersOption}.\n+     *\n@@ -664,0 +794,1 @@\n+     * @see LineNumber\n@@ -670,1 +801,6 @@\n-     * Declare an exception table entry\n+     * Declares an exception table entry.\n+     * <p>\n+     * This call may be ignored if any of the argument labels is not {@linkplain\n+     * #labelBinding bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS}\n+     * is set.\n+     *\n@@ -674,1 +810,1 @@\n-     * @param catchType the catch type or null to catch all exceptions and errors\n+     * @param catchType the catch type, may be {@code null} to catch all exceptions and errors\n@@ -676,0 +812,2 @@\n+     * @see ExceptionCatch\n+     * @see CodeBuilder#trying\n@@ -682,1 +820,6 @@\n-     * Declare an exception table entry\n+     * Declares an exception table entry.\n+     * <p>\n+     * This call may be ignored if any of the argument labels is not {@linkplain\n+     * #labelBinding bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS}\n+     * is set.\n+     *\n@@ -688,0 +831,2 @@\n+     * @see ExceptionCatch\n+     * @see CodeBuilder#trying\n@@ -694,1 +839,6 @@\n-     * Declare an exception table entry\n+     * Declares an exception table entry.\n+     * <p>\n+     * This call may be ignored if any of the argument labels is not {@linkplain\n+     * #labelBinding bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS}\n+     * is set.\n+     *\n@@ -700,0 +850,3 @@\n+     * @throws IllegalArgumentException if {@code catchType} is primitive\n+     * @see ExceptionCatch\n+     * @see CodeBuilder#trying\n@@ -707,1 +860,6 @@\n-     * Declare an exception table entry catching all exceptions and errors\n+     * Declares an exception table entry catching all exceptions and errors.\n+     * <p>\n+     * This call may be ignored if any of the argument labels is not {@linkplain\n+     * #labelBinding bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS}\n+     * is set.\n+     *\n@@ -712,0 +870,2 @@\n+     * @see ExceptionCatch\n+     * @see CodeBuilder#trying\n@@ -718,1 +878,6 @@\n-     * Declare a character range entry\n+     * Declares a character range entry.\n+     * <p>\n+     * This call may be ignored if {@link ClassFile.DebugElementsOption#DROP_DEBUG}\n+     * is set, or if any of the argument labels is not {@linkplain #labelBinding\n+     * bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS} is set.\n+     *\n@@ -725,0 +890,1 @@\n+     * @see CharacterRange\n@@ -731,1 +897,6 @@\n-     * Declare a local variable entry\n+     * Declares a local variable entry.\n+     * <p>\n+     * This call may be ignored if {@link ClassFile.DebugElementsOption#DROP_DEBUG}\n+     * is set, or if any of the argument labels is not {@linkplain #labelBinding\n+     * bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS} is set.\n+     *\n@@ -739,0 +910,1 @@\n+     * @see LocalVariable\n@@ -745,1 +917,6 @@\n-     * Declare a local variable entry\n+     * Declares a local variable entry.\n+     * <p>\n+     * This call may be ignored if {@link ClassFile.DebugElementsOption#DROP_DEBUG}\n+     * is set, or if any of the argument labels is not {@linkplain #labelBinding\n+     * bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS} is set.\n+     *\n@@ -753,0 +930,1 @@\n+     * @see LocalVariable\n@@ -762,1 +940,11 @@\n-     * Declare a local variable type entry\n+     * Declares a local variable type entry.\n+     * <p>\n+     * This call may be ignored if {@link ClassFile.DebugElementsOption#DROP_DEBUG}\n+     * is set, or if any of the argument labels is not {@linkplain #labelBinding\n+     * bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS} is set.\n+     *\n+     * @apiNote\n+     * When a local variable type entry is declared, a local variable entry with\n+     * the descriptor derived from erasure (JLS {@jls 4.6}) of the signature\n+     * should be declared as well.\n+     *\n@@ -770,0 +958,1 @@\n+     * @see LocalVariableType\n@@ -776,1 +965,11 @@\n-     * Declare a local variable type entry\n+     * Declares a local variable type entry.\n+     * <p>\n+     * This call may be ignored if {@link ClassFile.DebugElementsOption#DROP_DEBUG}\n+     * is set, or if any of the argument labels is not {@linkplain #labelBinding\n+     * bound} and {@link ClassFile.DeadLabelsOption#DROP_DEAD_LABELS} is set.\n+     *\n+     * @apiNote\n+     * When a local variable type entry is declared, a local variable entry with\n+     * the descriptor derived from erasure (JLS {@jls 4.6}) of the signature\n+     * should be declared as well.\n+     *\n@@ -784,0 +983,1 @@\n+     * @see LocalVariableType\n@@ -795,1 +995,3 @@\n-     * Generate an instruction pushing the null object reference onto the operand stack\n+     * Generates an instruction pushing the null object {@link TypeKind#REFERENCE\n+     * reference} onto the operand stack.\n+     *\n@@ -797,0 +999,2 @@\n+     * @see Opcode#ACONST_NULL\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -803,1 +1007,3 @@\n-     * Generate an instruction to load a reference from an array\n+     * Generates an instruction to load from a {@link TypeKind#REFERENCE\n+     * reference} array.\n+     *\n@@ -805,0 +1011,3 @@\n+     * @see Opcode#AALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -811,1 +1020,3 @@\n-     * Generate an instruction to store into a reference array\n+     * Generates an instruction to store into a {@link TypeKind#REFERENCE\n+     * reference} array.\n+     *\n@@ -813,0 +1024,3 @@\n+     * @see Opcode#AASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -819,4 +1033,5 @@\n-     * Generate an instruction to load a reference from a local variable\n-     *\n-     * <p>This may also generate {@code aload_<N>} and\n-     * {@code wide aload} instructions.\n+     * Generates an instruction to load a {@link TypeKind#REFERENCE reference}\n+     * from a local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#ALOAD_0 aload_&lt;N&gt;} and {@link\n+     * Opcode#ALOAD_W wide aload} instructions.\n@@ -827,0 +1042,3 @@\n+     * @see Opcode#ALOAD\n+     * @see #loadLocal\n+     * @see LoadInstruction\n@@ -833,1 +1051,3 @@\n-     * Generate an instruction to create a new array of reference\n+     * Generates an instruction to create a new array of {@link TypeKind#REFERENCE\n+     * reference}.\n+     *\n@@ -836,0 +1056,2 @@\n+     * @see Opcode#ANEWARRAY\n+     * @see NewReferenceArrayInstruction\n@@ -842,1 +1064,3 @@\n-     * Generate an instruction to create a new array of reference\n+     * Generates an instruction to create a new array of {@link TypeKind#REFERENCE\n+     * reference}.\n+     *\n@@ -846,0 +1070,2 @@\n+     * @see Opcode#ANEWARRAY\n+     * @see NewReferenceArrayInstruction\n@@ -852,1 +1078,3 @@\n-     * Generate an instruction to return a reference from the method\n+     * Generates an instruction to return a {@link TypeKind#REFERENCE reference}\n+     * from this method.\n+     *\n@@ -854,0 +1082,3 @@\n+     * @see Opcode#ARETURN\n+     * @see #return_(TypeKind)\n+     * @see ReturnInstruction\n@@ -860,1 +1091,2 @@\n-     * Generate an instruction to get length of an array\n+     * Generates an instruction to get the length of an array.\n+     *\n@@ -862,0 +1094,2 @@\n+     * @see Opcode#ARRAYLENGTH\n+     * @see OperatorInstruction\n@@ -868,4 +1102,6 @@\n-     * Generate an instruction to store a reference into a local variable\n-     *\n-     * <p>This may also generate {@code astore_<N>} and\n-     * {@code wide astore} instructions.\n+     * Generates an instruction to store a {@link TypeKind#REFERENCE reference}\n+     * into a local variable.  Such an instruction can also store a {@link\n+     * TypeKind##returnAddress returnAddress}.\n+     * <p>\n+     * This may also generate {@link Opcode#ASTORE_0 astore_&lt;N&gt;} and\n+     * {@link Opcode#ASTORE_W wide astore} instructions.\n@@ -876,0 +1112,3 @@\n+     * @see Opcode#ASTORE\n+     * @see #storeLocal\n+     * @see StoreInstruction\n@@ -882,1 +1121,2 @@\n-     * Generate an instruction to throw an exception or error\n+     * Generates an instruction to throw an exception or error.\n+     *\n@@ -884,0 +1124,2 @@\n+     * @see Opcode#ATHROW\n+     * @see ThrowInstruction\n@@ -890,1 +1132,3 @@\n-     * Generate an instruction to load a byte from a array\n+     * Generates an instruction to load from a {@link TypeKind#BYTE byte} or\n+     * {@link TypeKind#BOOLEAN boolean} array.\n+     *\n@@ -892,0 +1136,3 @@\n+     * @see Opcode#BALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -898,1 +1145,3 @@\n-     * Generate an instruction to store into a byte array\n+     * Generates an instruction to store into a {@link TypeKind#BYTE byte} or\n+     * {@link TypeKind#BOOLEAN boolean} array.\n+     *\n@@ -900,0 +1149,3 @@\n+     * @see Opcode#BASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -906,1 +1158,4 @@\n-     * Generate an instruction pushing an int in the range of byte onto the operand stack.\n+     * Generates an instruction pushing an {@link TypeKind#INT int} in the range\n+     * of {@link TypeKind#BYTE byte} ({@code [-128, 127]}) onto the operand\n+     * stack.\n+     *\n@@ -910,0 +1165,3 @@\n+     * @see Opcode#BIPUSH\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -916,1 +1174,2 @@\n-     * Generate an instruction to load a char from an array\n+     * Generates an instruction to load from a {@link TypeKind#CHAR char} array.\n+     *\n@@ -918,0 +1177,3 @@\n+     * @see Opcode#CALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -924,1 +1186,2 @@\n-     * Generate an instruction to store into a char array\n+     * Generates an instruction to store into a {@link TypeKind#CHAR char} array.\n+     *\n@@ -926,0 +1189,3 @@\n+     * @see Opcode#CASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -932,1 +1198,3 @@\n-     * Generate an instruction to check whether an object is of the given type\n+     * Generates an instruction to check whether an object is of the given type,\n+     * throwing a {@link ClassCastException} if the check fails.\n+     *\n@@ -935,0 +1203,2 @@\n+     * @see Opcode#CHECKCAST\n+     * @see TypeCheckInstruction\n@@ -941,1 +1211,3 @@\n-     * Generate an instruction to check whether an object is of the given type\n+     * Generates an instruction to check whether an object is of the given type,\n+     * throwing a {@link ClassCastException} if the check fails.\n+     *\n@@ -945,0 +1217,2 @@\n+     * @see Opcode#CHECKCAST\n+     * @see TypeCheckInstruction\n@@ -951,1 +1225,3 @@\n-     * Generate an instruction to convert a double into a float\n+     * Generates an instruction to convert a {@link TypeKind#DOUBLE double} into\n+     * a {@link TypeKind#FLOAT float}.\n+     *\n@@ -953,0 +1229,2 @@\n+     * @see Opcode#D2F\n+     * @see ConvertInstruction\n@@ -959,1 +1237,3 @@\n-     * Generate an instruction to convert a double into an int\n+     * Generates an instruction to convert a {@link TypeKind#DOUBLE double} into\n+     * an {@link TypeKind#INT int}.\n+     *\n@@ -961,0 +1241,2 @@\n+     * @see Opcode#D2I\n+     * @see ConvertInstruction\n@@ -967,1 +1249,3 @@\n-     * Generate an instruction to convert a double into a long\n+     * Generates an instruction to convert a {@link TypeKind#DOUBLE double} into\n+     * a {@link TypeKind#LONG long}.\n+     *\n@@ -969,0 +1253,2 @@\n+     * @see Opcode#D2L\n+     * @see ConvertInstruction\n@@ -975,1 +1261,2 @@\n-     * Generate an instruction to add a double\n+     * Generates an instruction to add two {@link TypeKind#DOUBLE doubles}.\n+     *\n@@ -977,0 +1264,2 @@\n+     * @see Opcode#DADD\n+     * @see OperatorInstruction\n@@ -983,1 +1272,3 @@\n-     * Generate an instruction to load a double from an array\n+     * Generates an instruction to load from a {@link TypeKind#DOUBLE double}\n+     * array.\n+     *\n@@ -985,0 +1276,3 @@\n+     * @see Opcode#DALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -991,1 +1285,3 @@\n-     * Generate an instruction to store into a double array\n+     * Generates an instruction to store into a {@link TypeKind#DOUBLE double}\n+     * array.\n+     *\n@@ -993,0 +1289,3 @@\n+     * @see Opcode#DASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -999,1 +1298,3 @@\n-     * Generate an instruction to add a double\n+     * Generates an instruction to compare two {@link TypeKind#DOUBLE doubles},\n+     * producing {@code 1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n@@ -1001,0 +1302,2 @@\n+     * @see Opcode#DCMPG\n+     * @see OperatorInstruction\n@@ -1007,1 +1310,3 @@\n-     * Generate an instruction to compare doubles\n+     * Generates an instruction to compare two {@link TypeKind#DOUBLE doubles},\n+     * producing {@code -1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n@@ -1009,0 +1314,2 @@\n+     * @see Opcode#DCMPL\n+     * @see OperatorInstruction\n@@ -1015,1 +1322,3 @@\n-     * Generate an instruction pushing double constant 0 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#DOUBLE double} constant\n+     * 0 onto the operand stack.\n+     *\n@@ -1017,0 +1326,3 @@\n+     * @see Opcode#DCONST_0\n+     * @see #loadConstant(double)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1023,1 +1335,3 @@\n-     * Generate an instruction pushing double constant 1 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#DOUBLE double} constant\n+     * 1 onto the operand stack.\n+     *\n@@ -1025,0 +1339,3 @@\n+     * @see Opcode#DCONST_1\n+     * @see #loadConstant(double)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1031,1 +1348,2 @@\n-     * Generate an instruction to divide doubles\n+     * Generates an instruction to divide {@link TypeKind#DOUBLE doubles}.\n+     *\n@@ -1033,0 +1351,2 @@\n+     * @see Opcode#DDIV\n+     * @see OperatorInstruction\n@@ -1039,4 +1359,5 @@\n-     * Generate an instruction to load a double from a local variable\n-     *\n-     * <p>This may also generate {@code dload_<N>} and\n-     * {@code wide dload} instructions.\n+     * Generates an instruction to load a {@link TypeKind#DOUBLE double} from a\n+     * local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#DLOAD_0 dload_&lt;N&gt;} and {@link\n+     * Opcode#DLOAD_W wide dload} instructions.\n@@ -1047,0 +1368,3 @@\n+     * @see Opcode#DLOAD\n+     * @see #loadLocal(TypeKind, int)\n+     * @see LoadInstruction\n@@ -1053,1 +1377,2 @@\n-     * Generate an instruction to multiply doubles\n+     * Generates an instruction to multiply {@link TypeKind#DOUBLE doubles}.\n+     *\n@@ -1055,0 +1380,2 @@\n+     * @see Opcode#DMUL\n+     * @see OperatorInstruction\n@@ -1061,1 +1388,2 @@\n-     * Generate an instruction to negate a double\n+     * Generates an instruction to negate a {@link TypeKind#DOUBLE double}.\n+     *\n@@ -1063,0 +1391,2 @@\n+     * @see Opcode#DNEG\n+     * @see OperatorInstruction\n@@ -1069,1 +1399,3 @@\n-     * Generate an instruction to calculate double remainder\n+     * Generates an instruction to calculate {@link TypeKind#DOUBLE double}\n+     * remainder.\n+     *\n@@ -1071,0 +1403,2 @@\n+     * @see Opcode#DREM\n+     * @see OperatorInstruction\n@@ -1077,1 +1411,3 @@\n-     * Generate an instruction to return a double from the method\n+     * Generates an instruction to return a {@link TypeKind#DOUBLE double} from\n+     * this method.\n+     *\n@@ -1079,0 +1415,3 @@\n+     * @see Opcode#DRETURN\n+     * @see #return_(TypeKind)\n+     * @see ReturnInstruction\n@@ -1085,4 +1424,5 @@\n-     * Generate an instruction to store a double into a local variable\n-     *\n-     * <p>This may also generate {@code dstore_<N>} and\n-     * {@code wide dstore} instructions.\n+     * Generates an instruction to store a {@link TypeKind#DOUBLE double} into a\n+     * local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#DSTORE_0 dstore_&lt;N&gt;} and\n+     * {@link Opcode#DSTORE_W wide dstore} instructions.\n@@ -1093,0 +1433,3 @@\n+     * @see Opcode#DSTORE\n+     * @see #storeLocal(TypeKind, int)\n+     * @see StoreInstruction\n@@ -1099,1 +1442,2 @@\n-     * Generate an instruction to subtract doubles\n+     * Generates an instruction to subtract {@link TypeKind#DOUBLE doubles}.\n+     *\n@@ -1101,0 +1445,2 @@\n+     * @see Opcode#DSUB\n+     * @see OperatorInstruction\n@@ -1107,1 +1453,2 @@\n-     * Generate an instruction to duplicate the top operand stack value\n+     * Generates an instruction to duplicate the top operand stack value.\n+     *\n@@ -1109,0 +1456,2 @@\n+     * @see Opcode#DUP\n+     * @see StackInstruction\n@@ -1115,1 +1464,3 @@\n-     * Generate an instruction to duplicate the top one or two operand stack value\n+     * Generates an instruction to duplicate the top one or two operand stack\n+     * value.\n+     *\n@@ -1117,0 +1468,2 @@\n+     * @see Opcode#DUP2\n+     * @see StackInstruction\n@@ -1123,2 +1476,3 @@\n-     * Generate an instruction to duplicate the top one or two operand stack values and insert two or three\n-     * values down\n+     * Generates an instruction to duplicate the top one or two operand stack\n+     * values and insert two or three values down.\n+     *\n@@ -1126,0 +1480,2 @@\n+     * @see Opcode#DUP2_X1\n+     * @see StackInstruction\n@@ -1132,2 +1488,3 @@\n-     * Generate an instruction to duplicate the top one or two operand stack values and insert two, three,\n-     * or four values down\n+     * Generates an instruction to duplicate the top one or two operand stack\n+     * values and insert two, three, or four values down.\n+     *\n@@ -1135,0 +1492,2 @@\n+     * @see Opcode#DUP2_X2\n+     * @see StackInstruction\n@@ -1141,1 +1500,3 @@\n-     * Generate an instruction to duplicate the top operand stack value and insert two values down\n+     * Generates an instruction to duplicate the top operand stack value and\n+     * insert two values down.\n+     *\n@@ -1143,0 +1504,2 @@\n+     * @see Opcode#DUP_X1\n+     * @see StackInstruction\n@@ -1149,1 +1512,3 @@\n-     * Generate an instruction to duplicate the top operand stack value and insert two or three values down\n+     * Generates an instruction to duplicate the top operand stack value and\n+     * insert two or three values down.\n+     *\n@@ -1151,0 +1516,2 @@\n+     * @see Opcode#DUP_X2\n+     * @see StackInstruction\n@@ -1157,1 +1524,3 @@\n-     * Generate an instruction to convert a float into a double\n+     * Generates an instruction to convert a {@link TypeKind#FLOAT float} into a\n+     * {@link TypeKind#DOUBLE double}.\n+     *\n@@ -1159,0 +1528,2 @@\n+     * @see Opcode#F2D\n+     * @see ConvertInstruction\n@@ -1165,1 +1536,3 @@\n-     * Generate an instruction to convert a float into an int\n+     * Generates an instruction to convert a {@link TypeKind#FLOAT float} into\n+     * an {@link TypeKind#INT int}.\n+     *\n@@ -1167,0 +1540,2 @@\n+     * @see Opcode#F2I\n+     * @see ConvertInstruction\n@@ -1173,1 +1548,3 @@\n-     * Generate an instruction to convert a float into a long\n+     * Generates an instruction to convert a {@link TypeKind#FLOAT float} into a\n+     * {@link TypeKind#LONG long}.\n+     *\n@@ -1175,0 +1552,2 @@\n+     * @see Opcode#F2L\n+     * @see ConvertInstruction\n@@ -1181,1 +1560,2 @@\n-     * Generate an instruction to add a float\n+     * Generates an instruction to add two {@link TypeKind#FLOAT floats}.\n+     *\n@@ -1183,0 +1563,2 @@\n+     * @see Opcode#FADD\n+     * @see OperatorInstruction\n@@ -1189,1 +1571,3 @@\n-     * Generate an instruction to load a float from an array\n+     * Generates an instruction to load from a {@link TypeKind#FLOAT float}\n+     * array.\n+     *\n@@ -1191,0 +1575,3 @@\n+     * @see Opcode#FALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -1197,1 +1584,3 @@\n-     * Generate an instruction to store into a float array\n+     * Generates an instruction to store into a {@link TypeKind#FLOAT float}\n+     * array.\n+     *\n@@ -1199,0 +1588,3 @@\n+     * @see Opcode#FASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -1205,1 +1597,3 @@\n-     * Generate an instruction to compare floats\n+     * Generates an instruction to compare {@link TypeKind#FLOAT floats},\n+     * producing {@code 1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n@@ -1207,0 +1601,2 @@\n+     * @see Opcode#FCMPG\n+     * @see OperatorInstruction\n@@ -1213,1 +1609,3 @@\n-     * Generate an instruction to compare floats\n+     * Generates an instruction to compare {@link TypeKind#FLOAT floats},\n+     * producing {@code -1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n@@ -1215,0 +1613,2 @@\n+     * @see Opcode#FCMPL\n+     * @see OperatorInstruction\n@@ -1221,1 +1621,3 @@\n-     * Generate an instruction pushing float constant 0 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#FLOAT float} constant 0\n+     * onto the operand stack.\n+     *\n@@ -1223,0 +1625,3 @@\n+     * @see Opcode#FCONST_0\n+     * @see #loadConstant(float)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1229,1 +1634,3 @@\n-     * Generate an instruction pushing float constant 1 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#FLOAT float} constant 1\n+     * onto the operand stack.\n+     *\n@@ -1231,0 +1638,3 @@\n+     * @see Opcode#FCONST_1\n+     * @see #loadConstant(float)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1237,1 +1647,3 @@\n-     * Generate an instruction pushing float constant 2 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#FLOAT float} constant 2\n+     * onto the operand stack.\n+     *\n@@ -1239,0 +1651,3 @@\n+     * @see Opcode#FCONST_2\n+     * @see #loadConstant(float)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1245,1 +1660,2 @@\n-     * Generate an instruction to divide floats\n+     * Generates an instruction to divide {@link TypeKind#FLOAT floats}.\n+     *\n@@ -1247,0 +1663,2 @@\n+     * @see Opcode#FDIV\n+     * @see OperatorInstruction\n@@ -1253,4 +1671,5 @@\n-     * Generate an instruction to load a float from a local variable\n-     *\n-     * <p>This may also generate {@code fload_<N>} and\n-     * {@code wide fload} instructions.\n+     * Generates an instruction to load a {@link TypeKind#FLOAT float} from a\n+     * local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#FLOAD_0 fload_&lt;N&gt;} and {@link\n+     * Opcode#FLOAD_W wide fload} instructions.\n@@ -1261,0 +1680,3 @@\n+     * @see Opcode#FLOAD\n+     * @see #loadLocal(TypeKind, int)\n+     * @see LoadInstruction\n@@ -1267,1 +1689,2 @@\n-     * Generate an instruction to multiply floats\n+     * Generates an instruction to multiply {@link TypeKind#FLOAT floats}.\n+     *\n@@ -1269,0 +1692,2 @@\n+     * @see Opcode#FMUL\n+     * @see OperatorInstruction\n@@ -1275,1 +1700,2 @@\n-     * Generate an instruction to negate a float\n+     * Generates an instruction to negate a {@link TypeKind#FLOAT float}.\n+     *\n@@ -1277,0 +1703,2 @@\n+     * @see Opcode#FNEG\n+     * @see OperatorInstruction\n@@ -1283,1 +1711,3 @@\n-     * Generate an instruction to calculate floats remainder\n+     * Generates an instruction to calculate {@link TypeKind#FLOAT floats}\n+     * remainder.\n+     *\n@@ -1285,0 +1715,2 @@\n+     * @see Opcode#FREM\n+     * @see OperatorInstruction\n@@ -1291,1 +1723,3 @@\n-     * Generate an instruction to return a float from the method\n+     * Generates an instruction to return a {@link TypeKind#FLOAT float} from\n+     * this method.\n+     *\n@@ -1293,0 +1727,3 @@\n+     * @see Opcode#FRETURN\n+     * @see #return_(TypeKind)\n+     * @see ReturnInstruction\n@@ -1299,4 +1736,5 @@\n-     * Generate an instruction to store a float into a local variable\n-     *\n-     * <p>This may also generate {@code fstore_<N>} and\n-     * {@code wide fstore} instructions.\n+     * Generates an instruction to store a {@link TypeKind#FLOAT float} into a\n+     * local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#FSTORE_0 fstore_&lt;N&gt;} and\n+     * {@link Opcode#FSTORE_W wide fstore} instructions.\n@@ -1307,0 +1745,3 @@\n+     * @see Opcode#FSTORE\n+     * @see #storeLocal(TypeKind, int)\n+     * @see StoreInstruction\n@@ -1313,1 +1754,2 @@\n-     * Generate an instruction to subtract floats\n+     * Generates an instruction to subtract {@link TypeKind#FLOAT floats}.\n+     *\n@@ -1315,0 +1757,2 @@\n+     * @see Opcode#FSUB\n+     * @see OperatorInstruction\n@@ -1321,1 +1765,2 @@\n-     * Generate an instruction to fetch field from an object\n+     * Generates an instruction to fetch field from an object.\n+     *\n@@ -1324,0 +1769,3 @@\n+     * @see Opcode#GETFIELD\n+     * @see #fieldAccess(Opcode, FieldRefEntry)\n+     * @see FieldInstruction\n@@ -1330,1 +1778,2 @@\n-     * Generate an instruction to fetch field from an object\n+     * Generates an instruction to fetch field from an object.\n+     *\n@@ -1336,0 +1785,3 @@\n+     * @see Opcode#GETFIELD\n+     * @see #fieldAccess(Opcode, ClassDesc, String, ClassDesc)\n+     * @see FieldInstruction\n@@ -1342,1 +1794,2 @@\n-     * Generate an instruction to get static field from a class\n+     * Generates an instruction to get static field from a class or interface.\n+     *\n@@ -1345,0 +1798,3 @@\n+     * @see Opcode#GETSTATIC\n+     * @see #fieldAccess(Opcode, FieldRefEntry)\n+     * @see FieldInstruction\n@@ -1351,1 +1807,2 @@\n-     * Generate an instruction to get static field from a class\n+     * Generates an instruction to get static field from a class or interface.\n+     *\n@@ -1357,0 +1814,3 @@\n+     * @see Opcode#GETSTATIC\n+     * @see #fieldAccess(Opcode, ClassDesc, String, ClassDesc)\n+     * @see FieldInstruction\n@@ -1363,1 +1823,4 @@\n-     * Generate an instruction to branch always\n+     * Generates an instruction to branch always.\n+     * <p>\n+     * This may also generate {@link Opcode#GOTO_W goto_w} instructions if\n+     * {@link ShortJumpsOption#FIX_SHORT_JUMPS} is set.\n@@ -1365,7 +1828,4 @@\n-     * <p>This may also generate {@code goto_w} instructions if the {@link\n-     * ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS FIX_SHORT_JUMPS} option\n-     * is set.\n-     *\n-     * @apiNote The instruction's name is {@code goto}, which coincides with a\n-     * reserved keyword of the Java programming language, thus this method is\n-     * named with an extra {@code _} suffix instead.\n+     * @apiNote\n+     * The instruction's name is {@code goto}, which coincides with a reserved\n+     * keyword of the Java programming language, thus this method is named with\n+     * an extra {@code _} suffix instead.\n@@ -1375,0 +1835,3 @@\n+     * @see Opcode#GOTO\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1381,1 +1844,2 @@\n-     * Generate an instruction to branch always with wide index\n+     * Generates an instruction to branch always with wide index.\n+     *\n@@ -1384,0 +1848,3 @@\n+     * @see Opcode#GOTO_W\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1390,1 +1857,3 @@\n-     * Generate an instruction to convert an int into a byte\n+     * Generates an instruction to truncate an {@link TypeKind#INT int} into the\n+     * range of {@link TypeKind#BYTE byte} and sign-extend it.\n+     *\n@@ -1392,0 +1861,2 @@\n+     * @see Opcode#I2B\n+     * @see ConvertInstruction\n@@ -1398,1 +1869,3 @@\n-     * Generate an instruction to convert an int into a char\n+     * Generates an instruction to truncate an {@link TypeKind#INT int} into the\n+     * range of {@link TypeKind#CHAR char} and zero-extend it.\n+     *\n@@ -1400,0 +1873,2 @@\n+     * @see Opcode#I2C\n+     * @see ConvertInstruction\n@@ -1406,1 +1881,3 @@\n-     * Generate an instruction to convert an int into a double\n+     * Generates an instruction to convert an {@link TypeKind#INT int} into a\n+     * {@link TypeKind#DOUBLE double}.\n+     *\n@@ -1408,0 +1885,2 @@\n+     * @see Opcode#I2D\n+     * @see ConvertInstruction\n@@ -1414,1 +1893,3 @@\n-     * Generate an instruction to convert an int into a float\n+     * Generates an instruction to convert an {@link TypeKind#INT int} into a\n+     * {@link TypeKind#FLOAT float}.\n+     *\n@@ -1416,0 +1897,2 @@\n+     * @see Opcode#I2F\n+     * @see ConvertInstruction\n@@ -1422,1 +1905,3 @@\n-     * Generate an instruction to convert an int into a long\n+     * Generates an instruction to convert an {@link TypeKind#INT int} into a\n+     * {@link TypeKind#LONG long}.\n+     *\n@@ -1424,0 +1909,2 @@\n+     * @see Opcode#I2L\n+     * @see ConvertInstruction\n@@ -1430,1 +1917,3 @@\n-     * Generate an instruction to convert an int into a short\n+     * Generates an instruction to truncate an {@link TypeKind#INT int} into the\n+     * range of {@link TypeKind#SHORT short} and sign-extend it.\n+     *\n@@ -1432,0 +1921,2 @@\n+     * @see Opcode#I2S\n+     * @see ConvertInstruction\n@@ -1438,1 +1929,2 @@\n-     * Generate an instruction to add an int\n+     * Generates an instruction to add two {@link TypeKind#INT ints}.\n+     *\n@@ -1440,0 +1932,2 @@\n+     * @see Opcode#IADD\n+     * @see OperatorInstruction\n@@ -1446,1 +1940,2 @@\n-     * Generate an instruction to load a int from an array\n+     * Generates an instruction to load from an {@link TypeKind#INT int} array.\n+     *\n@@ -1448,0 +1943,3 @@\n+     * @see Opcode#IALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -1454,1 +1952,3 @@\n-     * Generate an instruction to calculate boolean AND of ints\n+     * Generates an instruction to calculate bitwise AND of {@link TypeKind#INT\n+     * ints}, also used for {@link TypeKind#BOOLEAN boolean} AND.\n+     *\n@@ -1456,0 +1956,2 @@\n+     * @see Opcode#IAND\n+     * @see OperatorInstruction\n@@ -1462,1 +1964,2 @@\n-     * Generate an instruction to store into an int array\n+     * Generates an instruction to store into an {@link TypeKind#INT int} array.\n+     *\n@@ -1464,0 +1967,3 @@\n+     * @see Opcode#IASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -1470,1 +1976,3 @@\n-     * Generate an instruction pushing int constant 0 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#INT int} constant 0 onto\n+     * the operand stack.\n+     *\n@@ -1472,0 +1980,3 @@\n+     * @see Opcode#ICONST_0\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1478,1 +1989,3 @@\n-     * Generate an instruction pushing int constant 1 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#INT int} constant 1 onto\n+     * the operand stack.\n+     *\n@@ -1480,0 +1993,3 @@\n+     * @see Opcode#ICONST_1\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1486,1 +2002,3 @@\n-     * Generate an instruction pushing int constant 2 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#INT int} constant 2 onto\n+     * the operand stack.\n+     *\n@@ -1488,0 +2006,3 @@\n+     * @see Opcode#ICONST_2\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1494,1 +2015,3 @@\n-     * Generate an instruction pushing int constant 3 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#INT int} constant 3 onto\n+     * the operand stack.\n+     *\n@@ -1496,0 +2019,3 @@\n+     * @see Opcode#ICONST_3\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1502,1 +2028,3 @@\n-     * Generate an instruction pushing int constant 4 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#INT int} constant 4 onto\n+     * the operand stack.\n+     *\n@@ -1504,0 +2032,3 @@\n+     * @see Opcode#ICONST_4\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1510,1 +2041,3 @@\n-     * Generate an instruction pushing int constant 5 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#INT int} constant 5 onto\n+     * the operand stack.\n+     *\n@@ -1512,0 +2045,3 @@\n+     * @see Opcode#ICONST_5\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1518,1 +2054,3 @@\n-     * Generate an instruction pushing int constant -1 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#INT int} constant -1\n+     * onto the operand stack.\n+     *\n@@ -1520,0 +2058,3 @@\n+     * @see Opcode#ICONST_M1\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -1526,1 +2067,2 @@\n-     * Generate an instruction to divide ints\n+     * Generates an instruction to divide {@link TypeKind#INT ints}.\n+     *\n@@ -1528,0 +2070,2 @@\n+     * @see Opcode#IDIV\n+     * @see OperatorInstruction\n@@ -1534,1 +2078,7 @@\n-     * Generate an instruction to branch if reference comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#REFERENCE reference}\n+     * comparison {@code operand1 == operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1537,0 +2087,3 @@\n+     * @see Opcode#IF_ACMPEQ\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1543,1 +2096,7 @@\n-     * Generate an instruction to branch if reference comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#REFERENCE reference}\n+     * comparison {@code operand1 != operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1546,0 +2105,3 @@\n+     * @see Opcode#IF_ACMPNE\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1552,1 +2114,7 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * {@code operand1 == operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1555,0 +2123,3 @@\n+     * @see Opcode#IF_ICMPEQ\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1561,1 +2132,7 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * {@code operand1 >= operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1564,0 +2141,3 @@\n+     * @see Opcode#IF_ICMPGE\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1570,1 +2150,7 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * {@code operand1 > operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1573,0 +2159,3 @@\n+     * @see Opcode#IF_ICMPGT\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1579,1 +2168,7 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * {@code operand1 <= operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1582,0 +2177,3 @@\n+     * @see Opcode#IF_ICMPLE\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1588,1 +2186,7 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * {@code operand1 < operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1591,0 +2195,3 @@\n+     * @see Opcode#IF_ICMPLT\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1597,1 +2204,7 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * {@code operand1 != operand2} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1600,0 +2213,3 @@\n+     * @see Opcode#IF_ICMPNE\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1606,1 +2222,7 @@\n-     * Generate an instruction to branch if reference is not null\n+     * Generates an instruction to branch if {@link TypeKind#REFERENCE reference}\n+     * is not {@code null}.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1609,0 +2231,3 @@\n+     * @see Opcode#IFNONNULL\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1615,1 +2240,7 @@\n-     * Generate an instruction to branch if reference is null\n+     * Generates an instruction to branch if {@link TypeKind#REFERENCE reference}\n+     * is {@code null}.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1618,0 +2249,3 @@\n+     * @see Opcode#IFNULL\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1624,1 +2258,7 @@\n-     * Generate an instruction to branch if int comparison with zero succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * with zero {@code == 0} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1627,0 +2267,3 @@\n+     * @see Opcode#IFEQ\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1633,1 +2276,7 @@\n-     * Generate an instruction to branch if int comparison with zero succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * with zero {@code >= 0} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1636,0 +2285,3 @@\n+     * @see Opcode#IFGE\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1642,1 +2294,7 @@\n-     * Generate an instruction to branch if int comparison with zero succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * with zero {@code > 0} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1645,0 +2303,3 @@\n+     * @see Opcode#IFGT\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1651,1 +2312,7 @@\n-     * Generate an instruction to branch if int comparison with zero succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * with zero {@code <= 0} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1654,0 +2321,3 @@\n+     * @see Opcode#IFLE\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1660,1 +2330,7 @@\n-     * Generate an instruction to branch if int comparison with zero succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * with zero {@code < 0} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1663,0 +2339,3 @@\n+     * @see Opcode#IFLT\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1669,1 +2348,7 @@\n-     * Generate an instruction to branch if int comparison with zero succeeds\n+     * Generates an instruction to branch if {@link TypeKind#INT int} comparison\n+     * with zero {@code != 0} succeeds.\n+     * <p>\n+     * This may generate multiple instructions to accomplish the same effect if\n+     * {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS} is set and {@code\n+     * target} cannot be encoded as a BCI offset in {@code [-32768, 32767]}.\n+     *\n@@ -1672,0 +2357,3 @@\n+     * @see Opcode#IFNE\n+     * @see #branch(Opcode, Label)\n+     * @see BranchInstruction\n@@ -1678,1 +2366,7 @@\n-     * Generate an instruction to increment a local variable by a constant\n+     * Generates an instruction to increment an {@link TypeKind#INT int} local\n+     * variable by a constant.\n+     * <p>\n+     * This may also generate {@link Opcode#IINC_W wide iinc} instructions if\n+     * {@code slot} exceeds {@code 255} or {@code val} exceeds the range of\n+     * {@link TypeKind#BYTE byte}.\n+     *\n@@ -1683,0 +2377,2 @@\n+     * @see Opcode#IINC\n+     * @see IncrementInstruction\n@@ -1689,4 +2385,5 @@\n-     * Generate an instruction to load an int from a local variable\n-     *\n-     * <p>This may also generate {@code iload_<N>} and\n-     * {@code wide iload} instructions.\n+     * Generates an instruction to load an {@link TypeKind#INT int} from a local\n+     * variable.\n+     * <p>\n+     * This may also generate {@link Opcode#ILOAD_0 iload_&lt;N&gt;} and {@link\n+     * Opcode#ILOAD_W wide iload} instructions.\n@@ -1697,0 +2394,3 @@\n+     * @see Opcode#ILOAD\n+     * @see #loadLocal(TypeKind, int)\n+     * @see LoadInstruction\n@@ -1703,1 +2403,2 @@\n-     * Generate an instruction to multiply ints\n+     * Generates an instruction to multiply {@link TypeKind#INT ints}.\n+     *\n@@ -1705,0 +2406,2 @@\n+     * @see Opcode#IMUL\n+     * @see OperatorInstruction\n@@ -1711,1 +2414,2 @@\n-     * Generate an instruction to negate an int\n+     * Generates an instruction to negate an {@link TypeKind#INT int}.\n+     *\n@@ -1713,0 +2417,2 @@\n+     * @see Opcode#INEG\n+     * @see OperatorInstruction\n@@ -1719,1 +2425,2 @@\n-     * Generate an instruction to determine if an object is of the given type\n+     * Generates an instruction to determine if an object is of the given type,\n+     * producing a {@link TypeKind#BOOLEAN boolean} result on the operand stack.\n@@ -1721,1 +2428,2 @@\n-     * @apiNote The instruction's name is {@code instanceof}, which coincides with a\n+     * @apiNote\n+     * The instruction's name is {@code instanceof}, which coincides with a\n@@ -1727,0 +2435,2 @@\n+     * @see Opcode#INSTANCEOF\n+     * @see TypeCheckInstruction\n@@ -1733,1 +2443,2 @@\n-     * Generate an instruction to determine if an object is of the given type\n+     * Generates an instruction to determine if an object is of the given type,\n+     * producing a {@link TypeKind#BOOLEAN boolean} result on the operand stack.\n@@ -1735,1 +2446,2 @@\n-     * @apiNote The instruction's name is {@code instanceof}, which coincides with a\n+     * @apiNote\n+     * The instruction's name is {@code instanceof}, which coincides with a\n@@ -1742,0 +2454,2 @@\n+     * @see Opcode#INSTANCEOF\n+     * @see TypeCheckInstruction\n@@ -1748,1 +2462,2 @@\n-     * Generate an instruction to invoke a dynamically-computed call site\n+     * Generates an instruction to invoke a dynamically-computed call site.\n+     *\n@@ -1751,0 +2466,2 @@\n+     * @see Opcode#INVOKEDYNAMIC\n+     * @see InvokeDynamicInstruction\n@@ -1757,1 +2474,2 @@\n-     * Generate an instruction to invoke a dynamically-computed call site\n+     * Generates an instruction to invoke a dynamically-computed call site.\n+     *\n@@ -1760,0 +2478,2 @@\n+     * @see Opcode#INVOKEDYNAMIC\n+     * @see InvokeDynamicInstruction\n@@ -1774,1 +2494,2 @@\n-     * Generate an instruction to invoke an interface method\n+     * Generates an instruction to invoke an interface method.\n+     *\n@@ -1777,0 +2498,3 @@\n+     * @see Opcode#INVOKEINTERFACE\n+     * @see #invoke(Opcode, MemberRefEntry)\n+     * @see InvokeInstruction\n@@ -1783,2 +2507,3 @@\n-     * Generate an instruction to invoke an interface method\n-     * @param owner the owner class\n+     * Generates an instruction to invoke an interface method.\n+     *\n+     * @param owner the owner interface\n@@ -1789,0 +2514,3 @@\n+     * @see Opcode#INVOKEINTERFACE\n+     * @see #invoke(Opcode, ClassDesc, String, MethodTypeDesc, boolean)\n+     * @see InvokeInstruction\n@@ -1795,2 +2523,3 @@\n-     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n-     * methods and methods of the current class and its supertypes\n+     * Generates an instruction to invoke an instance method in an interface;\n+     * direct invocation of methods of the current class and its supertypes.\n+     *\n@@ -1799,0 +2528,3 @@\n+     * @see Opcode#INVOKESPECIAL\n+     * @see #invoke(Opcode, MemberRefEntry)\n+     * @see InvokeInstruction\n@@ -1805,2 +2537,4 @@\n-     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n-     * methods and methods of the current class and its supertypes\n+     * Generates an instruction to invoke an instance method in a class; direct\n+     * invocation of instance initialization methods and methods of the current\n+     * class and its supertypes.\n+     *\n@@ -1809,0 +2543,3 @@\n+     * @see Opcode#INVOKESPECIAL\n+     * @see #invoke(Opcode, MemberRefEntry)\n+     * @see InvokeInstruction\n@@ -1815,3 +2552,5 @@\n-     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n-     * methods and methods of the current class and its supertypes\n-     * @param owner the owner class\n+     * Generates an instruction to invoke an instance method in a class; direct\n+     * invocation of instance initialization methods and methods of the current\n+     * class and its supertypes.\n+     *\n+     * @param owner the owner class, must not be an interface\n@@ -1822,0 +2561,3 @@\n+     * @see Opcode#INVOKESPECIAL\n+     * @see #invoke(Opcode, ClassDesc, String, MethodTypeDesc, boolean)\n+     * @see InvokeInstruction\n@@ -1828,3 +2570,5 @@\n-     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n-     * methods and methods of the current class and its supertypes\n-     * @param owner the owner class\n+     * Generates an instruction to invoke an instance method; direct invocation\n+     * of instance initialization methods and methods of the current class and\n+     * its supertypes.\n+     *\n+     * @param owner the owner class or interface\n@@ -1833,1 +2577,1 @@\n-     * @param isInterface the interface method invocation indication\n+     * @param isInterface whether the owner is an interface\n@@ -1836,0 +2580,3 @@\n+     * @see Opcode#INVOKESPECIAL\n+     * @see #invoke(Opcode, ClassDesc, String, MethodTypeDesc, boolean)\n+     * @see InvokeInstruction\n@@ -1842,1 +2589,2 @@\n-     * Generate an instruction to invoke a class (static) method\n+     * Generates an instruction to invoke a class (static) method of an interface.\n+     *\n@@ -1845,0 +2593,3 @@\n+     * @see Opcode#INVOKESTATIC\n+     * @see #invoke(Opcode, MemberRefEntry)\n+     * @see InvokeInstruction\n@@ -1851,1 +2602,2 @@\n-     * Generate an instruction to invoke a class (static) method\n+     * Generates an instruction to invoke a class (static) method of a class.\n+     *\n@@ -1854,0 +2606,3 @@\n+     * @see Opcode#INVOKESTATIC\n+     * @see #invoke(Opcode, MemberRefEntry)\n+     * @see InvokeInstruction\n@@ -1860,2 +2615,3 @@\n-     * Generate an instruction to invoke a class (static) method\n-     * @param owner the owner class\n+     * Generates an instruction to invoke a class (static) method of a class.\n+     *\n+     * @param owner the owner class, must not be an interface\n@@ -1866,0 +2622,3 @@\n+     * @see Opcode#INVOKESTATIC\n+     * @see #invoke(Opcode, ClassDesc, String, MethodTypeDesc, boolean)\n+     * @see InvokeInstruction\n@@ -1872,2 +2631,3 @@\n-     * Generate an instruction to invoke a class (static) method\n-     * @param owner the owner class\n+     * Generates an instruction to invoke a class (static) method.\n+     *\n+     * @param owner the owner class or interface\n@@ -1876,1 +2636,1 @@\n-     * @param isInterface the interface method invocation indication\n+     * @param isInterface whether the owner is an interface\n@@ -1879,0 +2639,3 @@\n+     * @see Opcode#INVOKESTATIC\n+     * @see #invoke(Opcode, ClassDesc, String, MethodTypeDesc, boolean)\n+     * @see InvokeInstruction\n@@ -1885,1 +2648,2 @@\n-     * Generate an instruction to invoke an instance method; dispatch based on class\n+     * Generates an instruction to invoke an instance method; dispatch based on class.\n+     *\n@@ -1888,0 +2652,3 @@\n+     * @see Opcode#INVOKEVIRTUAL\n+     * @see #invoke(Opcode, MemberRefEntry)\n+     * @see InvokeInstruction\n@@ -1894,2 +2661,3 @@\n-     * Generate an instruction to invoke an instance method; dispatch based on class\n-     * @param owner the owner class\n+     * Generates an instruction to invoke an instance method; dispatch based on class.\n+     *\n+     * @param owner the owner class, must not be an interface\n@@ -1900,0 +2668,3 @@\n+     * @see Opcode#INVOKEVIRTUAL\n+     * @see #invoke(Opcode, ClassDesc, String, MethodTypeDesc, boolean)\n+     * @see InvokeInstruction\n@@ -1906,1 +2677,3 @@\n-     * Generate an instruction to calculate boolean OR of ints\n+     * Generates an instruction to calculate bitwise OR of {@link TypeKind#INT\n+     * ints}, also used for {@link TypeKind#BOOLEAN boolean} OR.\n+     *\n@@ -1908,0 +2681,2 @@\n+     * @see Opcode#IOR\n+     * @see OperatorInstruction\n@@ -1914,1 +2689,2 @@\n-     * Generate an instruction to calculate ints remainder\n+     * Generates an instruction to calculate {@link TypeKind#INT ints} remainder.\n+     *\n@@ -1916,0 +2692,2 @@\n+     * @see Opcode#IREM\n+     * @see OperatorInstruction\n@@ -1922,1 +2700,3 @@\n-     * Generate an instruction to return an int from the method\n+     * Generates an instruction to return an {@link TypeKind#INT int} from this\n+     * method.\n+     *\n@@ -1924,0 +2704,3 @@\n+     * @see Opcode#IRETURN\n+     * @see #return_(TypeKind)\n+     * @see ReturnInstruction\n@@ -1930,1 +2713,2 @@\n-     * Generate an instruction to shift an int left\n+     * Generates an instruction to shift an {@link TypeKind#INT int} left.\n+     *\n@@ -1932,0 +2716,2 @@\n+     * @see Opcode#ISHL\n+     * @see OperatorInstruction\n@@ -1938,1 +2724,5 @@\n-     * Generate an instruction to shift an int right\n+     * Generates an instruction to shift an {@link TypeKind#INT int} right.\n+     * This carries the sign bit to the vacated most significant bits, as\n+     * opposed to {@link #iushr()} that fills vacated most significant bits with\n+     * {@code 0}.\n+     *\n@@ -1940,0 +2730,2 @@\n+     * @see Opcode#ISHR\n+     * @see OperatorInstruction\n@@ -1946,4 +2738,5 @@\n-     * Generate an instruction to store an int into a local variable\n-     *\n-     * <p>This may also generate {@code istore_<N>} and\n-     * {@code wide istore} instructions.\n+     * Generates an instruction to store an {@link TypeKind#INT int} into a\n+     * local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#ISTORE_0 istore_&lt;N&gt;} and\n+     * {@link Opcode#ISTORE_W wide istore} instructions.\n@@ -1954,0 +2747,3 @@\n+     * @see Opcode#ISTORE\n+     * @see #storeLocal(TypeKind, int)\n+     * @see StoreInstruction\n@@ -1960,1 +2756,2 @@\n-     * Generate an instruction to subtract ints\n+     * Generates an instruction to subtract {@link TypeKind#INT ints}.\n+     *\n@@ -1962,0 +2759,2 @@\n+     * @see Opcode#ISUB\n+     * @see OperatorInstruction\n@@ -1968,1 +2767,5 @@\n-     * Generate an instruction to logical shift an int right\n+     * Generates an instruction to logical shift an {@link TypeKind#INT int}\n+     * right.  This fills vacated most significant bits with {@code 0}, as\n+     * opposed to {@link #ishr()} that carries the sign bit to the vacated most\n+     * significant bits.\n+     *\n@@ -1970,0 +2773,2 @@\n+     * @see Opcode#IUSHR\n+     * @see OperatorInstruction\n@@ -1976,1 +2781,3 @@\n-     * Generate an instruction to calculate boolean XOR of ints\n+     * Generates an instruction to calculate bitwise XOR of {@link TypeKind#INT\n+     * ints}.  This can also be used for {@link TypeKind#BOOLEAN boolean} XOR.\n+     *\n@@ -1978,0 +2785,2 @@\n+     * @see Opcode#IXOR\n+     * @see OperatorInstruction\n@@ -1984,1 +2793,2 @@\n-     * Generate an instruction to access a jump table by key match and jump\n+     * Generates an instruction to access a jump table by key match and jump.\n+     *\n@@ -1988,0 +2798,2 @@\n+     * @see Opcode#LOOKUPSWITCH\n+     * @see LookupSwitchInstruction\n@@ -1994,1 +2806,3 @@\n-     * Generate an instruction to convert a long into a double\n+     * Generates an instruction to convert a {@link TypeKind#LONG long} into a\n+     * {@link TypeKind#DOUBLE double}.\n+     *\n@@ -1996,0 +2810,2 @@\n+     * @see Opcode#L2D\n+     * @see OperatorInstruction\n@@ -2002,1 +2818,3 @@\n-     * Generate an instruction to convert a long into a float\n+     * Generates an instruction to convert a {@link TypeKind#LONG long} into a\n+     * {@link TypeKind#FLOAT float}.\n+     *\n@@ -2004,0 +2822,2 @@\n+     * @see Opcode#L2F\n+     * @see OperatorInstruction\n@@ -2010,1 +2830,3 @@\n-     * Generate an instruction to convert a long into an int\n+     * Generates an instruction to convert a {@link TypeKind#LONG long} into an\n+     * {@link TypeKind#INT int}.\n+     *\n@@ -2012,0 +2834,2 @@\n+     * @see Opcode#L2I\n+     * @see OperatorInstruction\n@@ -2018,1 +2842,2 @@\n-     * Generate an instruction to add a long\n+     * Generates an instruction to add two {@link TypeKind#LONG longs}.\n+     *\n@@ -2020,0 +2845,2 @@\n+     * @see Opcode#LADD\n+     * @see OperatorInstruction\n@@ -2026,1 +2853,2 @@\n-     * Generate an instruction to load a long from an array\n+     * Generates an instruction to load from a {@link TypeKind#LONG long} array.\n+     *\n@@ -2028,0 +2856,3 @@\n+     * @see Opcode#LALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -2034,1 +2865,3 @@\n-     * Generate an instruction to calculate boolean AND of longs\n+     * Generates an instruction to calculate bitwise AND of {@link TypeKind#LONG\n+     * longs}.\n+     *\n@@ -2036,0 +2869,2 @@\n+     * @see Opcode#LAND\n+     * @see OperatorInstruction\n@@ -2042,1 +2877,2 @@\n-     * Generate an instruction to store into a long array\n+     * Generates an instruction to store into a {@link TypeKind#LONG long} array.\n+     *\n@@ -2044,0 +2880,3 @@\n+     * @see Opcode#LASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -2050,1 +2889,2 @@\n-     * Generate an instruction to compare longs\n+     * Generates an instruction to compare {@link TypeKind#LONG longs}.\n+     *\n@@ -2052,0 +2892,2 @@\n+     * @see Opcode#LCMP\n+     * @see OperatorInstruction\n@@ -2058,1 +2900,3 @@\n-     * Generate an instruction pushing long constant 0 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#LONG long} constant 0\n+     * onto the operand stack.\n+     *\n@@ -2060,0 +2904,3 @@\n+     * @see Opcode#LCONST_0\n+     * @see #loadConstant(long)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -2066,1 +2913,3 @@\n-     * Generate an instruction pushing long constant 1 onto the operand stack\n+     * Generates an instruction pushing {@link TypeKind#LONG long} constant 1\n+     * onto the operand stack.\n+     *\n@@ -2068,0 +2917,3 @@\n+     * @see Opcode#LCONST_1\n+     * @see #loadConstant(long)\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n@@ -2074,3 +2926,5 @@\n-     * Generate an instruction pushing an item from the run-time constant pool onto the operand stack\n-     *\n-     * <p>This may also generate {@code ldc_w} and {@code ldc2_w} instructions.\n+     * Generates an instruction pushing an item from the run-time constant pool\n+     * onto the operand stack.\n+     * <p>\n+     * This may also generate {@link Opcode#LDC_W ldc_w} and {@link Opcode#LDC2_W\n+     * ldc2_w} instructions.\n@@ -2078,2 +2932,4 @@\n-     * @apiNote {@link #loadConstant(ConstantDesc) loadConstant} generates more optimal instructions\n-     * and should be used for general constants if an {@code ldc} instruction is not strictly required.\n+     * @apiNote\n+     * {@link #loadConstant(ConstantDesc) loadConstant} generates more optimal\n+     * instructions and should be used for general constants if an {@code ldc}\n+     * instruction is not strictly required.\n@@ -2083,0 +2939,3 @@\n+     * @see Opcode#LDC\n+     * @see #loadConstant(ConstantDesc)\n+     * @see ConstantInstruction.LoadConstantInstruction\n@@ -2089,3 +2948,5 @@\n-     * Generate an instruction pushing an item from the run-time constant pool onto the operand stack\n-     *\n-     * <p>This may also generate {@code ldc_w} and {@code ldc2_w} instructions.\n+     * Generates an instruction pushing an item from the run-time constant pool\n+     * onto the operand stack.\n+     * <p>\n+     * This may also generate {@link Opcode#LDC_W ldc_w} and {@link Opcode#LDC2_W\n+     * ldc2_w} instructions.\n@@ -2095,0 +2956,3 @@\n+     * @see Opcode#LDC\n+     * @see #loadConstant(ConstantDesc)\n+     * @see ConstantInstruction.LoadConstantInstruction\n@@ -2101,1 +2965,2 @@\n-     * Generate an instruction to divide longs\n+     * Generates an instruction to divide {@link TypeKind#LONG longs}.\n+     *\n@@ -2103,0 +2968,2 @@\n+     * @see Opcode#LDIV\n+     * @see OperatorInstruction\n@@ -2109,4 +2976,5 @@\n-     * Generate an instruction to load a long from a local variable\n-     *\n-     * <p>This may also generate {@code lload_<N>} and\n-     * {@code wide lload} instructions.\n+     * Generates an instruction to load a {@link TypeKind#LONG long} from a\n+     * local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#LLOAD_0 lload_&lt;N&gt;} and {@link\n+     * Opcode#LLOAD_W wide lload} instructions.\n@@ -2117,0 +2985,3 @@\n+     * @see Opcode#LLOAD\n+     * @see #loadLocal(TypeKind, int)\n+     * @see LoadInstruction\n@@ -2123,1 +2994,2 @@\n-     * Generate an instruction to multiply longs\n+     * Generates an instruction to multiply {@link TypeKind#LONG longs}.\n+     *\n@@ -2125,0 +2997,2 @@\n+     * @see Opcode#LMUL\n+     * @see OperatorInstruction\n@@ -2131,1 +3005,2 @@\n-     * Generate an instruction to negate a long\n+     * Generates an instruction to negate a {@link TypeKind#LONG long}.\n+     *\n@@ -2133,0 +3008,2 @@\n+     * @see Opcode#LNEG\n+     * @see OperatorInstruction\n@@ -2139,1 +3016,3 @@\n-     * Generate an instruction to calculate boolean OR of longs\n+     * Generates an instruction to calculate bitwise OR of {@link TypeKind#LONG\n+     * longs}.\n+     *\n@@ -2141,0 +3020,2 @@\n+     * @see Opcode#LOR\n+     * @see OperatorInstruction\n@@ -2147,1 +3028,3 @@\n-     * Generate an instruction to calculate longs remainder\n+     * Generates an instruction to calculate {@link TypeKind#LONG longs}\n+     * remainder.\n+     *\n@@ -2149,0 +3032,2 @@\n+     * @see Opcode#LREM\n+     * @see OperatorInstruction\n@@ -2155,1 +3040,3 @@\n-     * Generate an instruction to return a long from the method\n+     * Generates an instruction to return a {@link TypeKind#LONG long} from this\n+     * method.\n+     *\n@@ -2157,0 +3044,3 @@\n+     * @see Opcode#LRETURN\n+     * @see #return_(TypeKind)\n+     * @see ReturnInstruction\n@@ -2163,1 +3053,2 @@\n-     * Generate an instruction to shift a long left\n+     * Generates an instruction to shift a {@link TypeKind#LONG long} left.\n+     *\n@@ -2165,0 +3056,2 @@\n+     * @see Opcode#LSHL\n+     * @see OperatorInstruction\n@@ -2171,1 +3064,5 @@\n-     * Generate an instruction to shift a long right\n+     * Generates an instruction to shift a {@link TypeKind#LONG long} right.\n+     * This carries the sign bit to the vacated most significant bits, as\n+     * opposed to {@link #lushr()} that fills vacated most significant bits with\n+     * {@code 0}.\n+     *\n@@ -2173,0 +3070,2 @@\n+     * @see Opcode#LSHR\n+     * @see OperatorInstruction\n@@ -2179,4 +3078,5 @@\n-     * Generate an instruction to store a long into a local variable\n-     *\n-     * <p>This may also generate {@code lstore_<N>} and\n-     * {@code wide lstore} instructions.\n+     * Generates an instruction to store a {@link TypeKind#LONG long} into a\n+     * local variable.\n+     * <p>\n+     * This may also generate {@link Opcode#LSTORE_0 lstore_&lt;N&gt;} and\n+     * {@link Opcode#LSTORE_W wide lstore} instructions.\n@@ -2187,0 +3087,3 @@\n+     * @see Opcode#LSTORE\n+     * @see #storeLocal(TypeKind, int)\n+     * @see StoreInstruction\n@@ -2193,1 +3096,2 @@\n-     * Generate an instruction to subtract longs\n+     * Generates an instruction to subtract {@link TypeKind#LONG longs}.\n+     *\n@@ -2195,0 +3099,2 @@\n+     * @see Opcode#LSUB\n+     * @see OperatorInstruction\n@@ -2201,1 +3107,5 @@\n-     * Generate an instruction to logical shift a long left\n+     * Generates an instruction to logical shift a {@link TypeKind#LONG long}\n+     * right.  This fills vacated most significant bits with {@code 0}, as\n+     * opposed to {@link #lshr()} that carries the sign bit to the vacated most\n+     * significant bits.\n+     *\n@@ -2203,0 +3113,2 @@\n+     * @see Opcode#LUSHR\n+     * @see OperatorInstruction\n@@ -2209,1 +3121,3 @@\n-     * Generate an instruction to calculate boolean XOR of longs\n+     * Generates an instruction to calculate bitwise XOR of {@link TypeKind#LONG\n+     * longs}.\n+     *\n@@ -2211,0 +3125,2 @@\n+     * @see Opcode#LXOR\n+     * @see OperatorInstruction\n@@ -2217,1 +3133,2 @@\n-     * Generate an instruction to enter monitor for an object\n+     * Generates an instruction to enter monitor for an object.\n+     *\n@@ -2219,0 +3136,2 @@\n+     * @see Opcode#MONITORENTER\n+     * @see MonitorInstruction\n@@ -2225,1 +3144,2 @@\n-     * Generate an instruction to exit monitor for an object\n+     * Generates an instruction to exit monitor for an object.\n+     *\n@@ -2227,0 +3147,2 @@\n+     * @see Opcode#MONITOREXIT\n+     * @see MonitorInstruction\n@@ -2233,1 +3155,2 @@\n-     * Generate an instruction to create a new multidimensional array\n+     * Generates an instruction to create a new multidimensional array.\n+     *\n@@ -2238,0 +3161,2 @@\n+     * @see Opcode#MULTIANEWARRAY\n+     * @see NewMultiArrayInstruction\n@@ -2244,1 +3169,2 @@\n-     * Generate an instruction to create a new multidimensional array\n+     * Generates an instruction to create a new multidimensional array.\n+     *\n@@ -2249,1 +3175,3 @@\n-     * or if {@code dims} is out of range\n+     *         or if {@code dims} is out of range\n+     * @see Opcode#MULTIANEWARRAY\n+     * @see NewMultiArrayInstruction\n@@ -2256,1 +3184,1 @@\n-     * Generate an instruction to create a new object\n+     * Generates an instruction to create a new object.\n@@ -2258,3 +3186,4 @@\n-     * @apiNote The instruction's name is {@code new}, which coincides with a\n-     * reserved keyword of the Java programming language, thus this method is\n-     * named with an extra {@code _} suffix instead.\n+     * @apiNote\n+     * The instruction's name is {@code new}, which coincides with a reserved\n+     * keyword of the Java programming language, thus this method is named with\n+     * an extra {@code _} suffix instead.\n@@ -2264,0 +3193,2 @@\n+     * @see Opcode#NEW\n+     * @see NewObjectInstruction\n@@ -2270,1 +3201,1 @@\n-     * Generate an instruction to create a new object\n+     * Generates an instruction to create a new object.\n@@ -2272,3 +3203,4 @@\n-     * @apiNote The instruction's name is {@code new}, which coincides with a\n-     * reserved keyword of the Java programming language, thus this method is\n-     * named with an extra {@code _} suffix instead.\n+     * @apiNote\n+     * The instruction's name is {@code new}, which coincides with a reserved\n+     * keyword of the Java programming language, thus this method is named with\n+     * an extra {@code _} suffix instead.\n@@ -2279,0 +3211,2 @@\n+     * @see Opcode#NEW\n+     * @see NewObjectInstruction\n@@ -2285,1 +3219,2 @@\n-     * Generate an instruction to create a new array of a primitive type\n+     * Generates an instruction to create a new array of a primitive type.\n+     *\n@@ -2290,0 +3225,2 @@\n+     * @see Opcode#NEWARRAY\n+     * @see NewPrimitiveArrayInstruction\n@@ -2296,1 +3233,2 @@\n-     * Generate an instruction to pop the top operand stack value\n+     * Generates an instruction to pop the top operand stack value.\n+     *\n@@ -2298,0 +3236,2 @@\n+     * @see Opcode#POP\n+     * @see StackInstruction\n@@ -2304,1 +3244,2 @@\n-     * Generate an instruction to pop the top one or two operand stack values\n+     * Generates an instruction to pop the top one or two operand stack values.\n+     *\n@@ -2306,0 +3247,2 @@\n+     * @see Opcode#POP2\n+     * @see StackInstruction\n@@ -2312,1 +3255,2 @@\n-     * Generate an instruction to set field in an object\n+     * Generates an instruction to set field in an object.\n+     *\n@@ -2315,0 +3259,3 @@\n+     * @see Opcode#PUTFIELD\n+     * @see #fieldAccess(Opcode, FieldRefEntry)\n+     * @see FieldInstruction\n@@ -2321,1 +3268,2 @@\n-     * Generate an instruction to set field in an object\n+     * Generates an instruction to set field in an object.\n+     *\n@@ -2327,0 +3275,3 @@\n+     * @see Opcode#PUTFIELD\n+     * @see #fieldAccess(Opcode, ClassDesc, String, ClassDesc)\n+     * @see FieldInstruction\n@@ -2333,1 +3284,2 @@\n-     * Generate an instruction to set static field in a class\n+     * Generates an instruction to set static field in a class.\n+     *\n@@ -2336,0 +3288,3 @@\n+     * @see Opcode#PUTSTATIC\n+     * @see #fieldAccess(Opcode, FieldRefEntry)\n+     * @see FieldInstruction\n@@ -2342,2 +3297,3 @@\n-     * Generate an instruction to set static field in a class\n-     * @param owner the owner class\n+     * Generates an instruction to set static field in a class.\n+     *\n+     * @param owner the owner class or interface\n@@ -2348,0 +3304,3 @@\n+     * @see Opcode#PUTSTATIC\n+     * @see #fieldAccess(Opcode, ClassDesc, String, ClassDesc)\n+     * @see FieldInstruction\n@@ -2354,1 +3313,2 @@\n-     * Generate an instruction to return void from the method\n+     * Generates an instruction to return {@link TypeKind#VOID void} from this\n+     * method.\n@@ -2356,3 +3316,4 @@\n-     * @apiNote The instruction's name is {@code return}, which coincides with a\n-     * reserved keyword of the Java programming language, thus this method is\n-     * named with an extra {@code _} suffix instead.\n+     * @apiNote\n+     * The instruction's name is {@code return}, which coincides with a reserved\n+     * keyword of the Java programming language, thus this method is named with\n+     * an extra {@code _} suffix instead.\n@@ -2361,0 +3322,3 @@\n+     * @see Opcode#RETURN\n+     * @see #return_(TypeKind)\n+     * @see ReturnInstruction\n@@ -2367,1 +3331,3 @@\n-     * Generate an instruction to load a short from an array\n+     * Generates an instruction to load from a {@link TypeKind#SHORT short}\n+     * array.\n+     *\n@@ -2369,0 +3335,3 @@\n+     * @see Opcode#SALOAD\n+     * @see #arrayLoad(TypeKind)\n+     * @see ArrayLoadInstruction\n@@ -2375,1 +3344,3 @@\n-     * Generate an instruction to store into a short array\n+     * Generates an instruction to store into a {@link TypeKind#SHORT short}\n+     * array.\n+     *\n@@ -2377,0 +3348,3 @@\n+     * @see Opcode#SASTORE\n+     * @see #arrayStore(TypeKind)\n+     * @see ArrayStoreInstruction\n@@ -2383,1 +3357,4 @@\n-     * Generate an instruction pushing an int in the range of short onto the operand stack.\n+     * Generates an instruction pushing an {@link TypeKind#INT int} in the range\n+     * of {@link TypeKind#SHORT short}, {@code [-32768, 32767]}, onto the\n+     * operand stack.\n+     *\n@@ -2387,0 +3364,3 @@\n+     * @see Opcode#SIPUSH\n+     * @see #loadConstant(int)\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n@@ -2393,1 +3373,2 @@\n-     * Generate an instruction to swap the top two operand stack values\n+     * Generates an instruction to swap the top two operand stack values.\n+     *\n@@ -2395,0 +3376,2 @@\n+     * @see Opcode#SWAP\n+     * @see StackInstruction\n@@ -2401,3 +3384,4 @@\n-     * Generate an instruction to access a jump table by index and jump\n-     * @param low the low key value\n-     * @param high the high key value\n+     * Generates an instruction to access a jump table by index and jump.\n+     *\n+     * @param low the minimum key, inclusive\n+     * @param high the maximum key, inclusive\n@@ -2407,0 +3391,2 @@\n+     * @see Opcode#TABLESWITCH\n+     * @see TableSwitchInstruction\n@@ -2413,1 +3399,3 @@\n-     * Generate an instruction to access a jump table by index and jump\n+     * Generates an instruction to access a jump table by index and jump.\n+     * Computes the minimum and maximum keys from the {@code cases}.\n+     *\n@@ -2417,0 +3405,3 @@\n+     * @see Opcode#TABLESWITCH\n+     * @see #tableswitch(int, int, Label, List)\n+     * @see TableSwitchInstruction\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":1393,"deletions":402,"binary":false,"changes":1795,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,6 +32,9 @@\n- * A marker interface for elements that can appear when traversing\n- * a {@link CodeModel} or be presented to a {@link CodeBuilder}. Code elements\n- * are either an {@link Instruction}, which models an instruction in the body\n- * of a method, or a {@link PseudoInstruction}, which models metadata from\n- * the code attribute, such as line number metadata, local variable metadata,\n- * exception metadata, label target metadata, etc.\n+ * Marker interface for a member element of a {@link CodeModel}.  Such an\n+ * element can appear when traversing a {@link CodeModel} unless otherwise\n+ * specified, be supplied to a {@link CodeBuilder}, and be processed by a\n+ * {@link CodeTransform}.\n+ * <p>\n+ * Code elements can be categorized into {@link Instruction}, {@link\n+ * PseudoInstruction}, and {@link Attribute}.  Unlike in other {@link\n+ * CompoundElement}, the order of elements for all {@link Instruction}s and some\n+ * {@link PseudoInstruction}s is significant.\n@@ -39,0 +42,4 @@\n+ * @see ClassFileElement##membership Membership Elements\n+ * @see ClassElement\n+ * @see MethodElement\n+ * @see FieldElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeElement.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import java.lang.classfile.ClassFile.DeadLabelsOption;\n+import java.lang.classfile.ClassFile.DebugElementsOption;\n+import java.lang.classfile.ClassFile.LineNumbersOption;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n@@ -29,0 +33,1 @@\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -32,0 +37,1 @@\n+import java.util.function.Consumer;\n@@ -36,2 +42,19 @@\n- * Models the body of a method (the {@code Code} attribute).  The instructions\n- * of the method body are accessed via a streaming view.\n+ * Models the body of a method (the {@code Code} attribute).  A {@code Code}\n+ * attribute is viewed as a {@linkplain CompoundElement composition} of {@link\n+ * CodeElement}s, which is the only way to access {@link Instruction}s; the\n+ * order of elements of a code model is significant.\n+ * <p>\n+ * A {@code CodeModel} is obtained from {@link MethodModel#code()}, or in the\n+ * traversal of the member elements of a method.\n+ * <p>\n+ * {@link MethodBuilder#withCode} is the main way to build code models.  {@link\n+ * MethodBuilder#transformCode} and {@link CodeBuilder#transforming} allow\n+ * creating new {@code Code} attributes by selectively processing the original\n+ * code elements and directing the results to a code builder.\n+ * <p>\n+ * A {@code Code} attribute holds attributes, but they are usually not member\n+ * elements, but are decomposed to {@link PseudoInstruction}, accessible\n+ * according to {@link DeadLabelsOption}, {@link DebugElementsOption}, and\n+ * {@link LineNumbersOption}.  {@link StackMapTableAttribute} can only be\n+ * accessed via {@linkplain AttributedElement explicit attribute reading}, as it\n+ * is considered a derived property from the code body.\n@@ -39,0 +62,4 @@\n+ * @see MethodModel#code()\n+ * @see CodeTransform\n+ * @see CodeAttribute\n+ * @jvms 4.7.3 The {@code Code} Attribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeModel.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,12 @@\n- * A transformation on streams of {@link CodeElement}.\n- *\n- * @see ClassFileTransform\n+ * A transformation on streams of {@link CodeElement}.  The stream can come\n+ * from a {@link CodeModel}, or a handler to a {@link CodeBuilder} as in\n+ * {@link CodeBuilder#transforming}.\n+ * <p>\n+ * Refer to {@link ClassFileTransform} for general guidance and caution around\n+ * the use of transforms for structures in the {@code class} file format.\n+ * <p>\n+ * A code transform can be lifted to a method or a class transform via {@link\n+ * MethodTransform#transformingCode(CodeTransform)} and {@link\n+ * ClassTransform#transformingMethodBodies(CodeTransform)}, transforming only\n+ * the {@link CodeModel} within those structures and passing all other elements\n+ * to the builders.\n@@ -39,0 +48,3 @@\n+ * @see CodeModel\n+ * @see MethodBuilder#transformCode\n+ * @see CodeBuilder#transforming\n@@ -46,1 +58,1 @@\n-     * A code transform that sends all elements to the builder.\n+     * A code transform that passes all elements to the builder.\n@@ -56,1 +68,1 @@\n-     * Create a stateful code transform from a {@link Supplier}.  The supplier\n+     * Creates a stateful code transform from a {@link Supplier}.  The supplier\n@@ -68,1 +80,1 @@\n-     * Create a code transform that passes each element through to the builder,\n+     * Creates a code transform that passes each element through to the builder,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeTransform.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,7 +40,16 @@\n- * A {@link ClassFileElement} that has complex structure defined in terms of\n- * other classfile elements, such as a method, field, method body, or entire\n- * class.  When encountering a {@linkplain CompoundElement}, clients have the\n- * option to treat the element as a single entity (e.g., an entire method)\n- * or to traverse the contents of that element with the methods in this class\n- * (e.g., {@link #forEach(Consumer)}, etc.)\n- * @param <E> the element type\n+ * A {@code class} file structure that can be viewed as a composition of its\n+ * member structures.  {@code CompoundElement} allows users to traverse these\n+ * member elements with {@link #forEach(Consumer)} or {@link #elementStream()},\n+ * or buffer the elements obtained from the traversal through {@link\n+ * #iterator()} or {@link #elementList()}.\n+ * <p>\n+ * Unless otherwise specified, all member elements of compatible type will be\n+ * presented during the traversal if they exist in this element.  Some member\n+ * elements specify that they may appear at most once in this element; if such\n+ * elements are presented multiple times, the latest occurrence is authentic and\n+ * all previous occurrences should be ignored.\n+ * <p>\n+ * {@code CompoundElement}s can be constructed by {@link ClassFileBuilder}s.\n+ * {@link ClassFileBuilder#transform(CompoundElement, ClassFileTransform)}\n+ * provides an easy way to create a new structure by selectively processing\n+ * the original member structures and directing the results to the builder.\n@@ -48,0 +57,3 @@\n+ * @param <E> the member element type\n+ * @see ClassFileElement##membership Membership Elements\n+ * @see ClassFileBuilder\n@@ -55,2 +67,3 @@\n-     * Invoke the provided handler with each element contained in this\n-     * compound element\n+     * Invokes the provided handler with each member element in this compound\n+     * element.\n+     *\n@@ -63,1 +76,1 @@\n-     * {@return an {@link Iterator} describing all the elements contained in this\n+     * {@return an {@link Iterator} describing all member elements in this\n@@ -72,2 +85,2 @@\n-     * {@return a {@link Stream} containing all the elements contained in this\n-     * compound element}\n+     * {@return a {@link Stream} containing all member elements in this compound\n+     * element}\n@@ -83,2 +96,2 @@\n-     * {@return an {@link List} containing all the elements contained in this\n-     * compound element}\n+     * {@return a {@link List} containing all member elements in this compound\n+     * element}\n@@ -98,1 +111,2 @@\n-     * {@return a text representation of the compound element and its contents for debugging purposes}\n+     * {@return a text representation of the compound element and its contents\n+     * for debugging purposes}\n@@ -100,1 +114,2 @@\n-     * The format, structure and exact contents of the returned string are not specified and may change at any time in the future.\n+     * The format, structure and exact contents of the returned string are not\n+     * specified and may change at any time in the future.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CompoundElement.java","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.constant.ClassDesc;\n@@ -37,5 +37,7 @@\n- * A builder for fields.  Builders are not created directly; they are passed\n- * to handlers by methods such as {@link ClassBuilder#withField(Utf8Entry, Utf8Entry, Consumer)}\n- * or to field transforms.  The elements of a field can be specified\n- * abstractly (by passing a {@link FieldElement} to {@link #with(ClassFileElement)}\n- * or concretely by calling the various {@code withXxx} methods.\n+ * A builder for fields.  The main way to obtain a field builder is via {@link\n+ * ClassBuilder#withField(String, ClassDesc, Consumer)}.  The {@linkplain\n+ * ClassBuilder#withField(String, ClassDesc, int) access flag overload} is\n+ * useful if no attribute needs to be configured, skipping the handler.\n+ * <p>\n+ * Refer to {@link ClassFileBuilder} for general guidance and caution around\n+ * the use of builders for structures in the {@code class} file format.\n@@ -43,0 +45,2 @@\n+ * @see ClassBuilder#withField(String, ClassDesc, Consumer)\n+ * @see FieldModel\n@@ -44,1 +48,0 @@\n- *\n@@ -53,0 +56,1 @@\n+     *\n@@ -55,0 +59,3 @@\n+     * @see AccessFlags\n+     * @see AccessFlag.Location#FIELD\n+     * @see ClassBuilder#withField(String, ClassDesc, int)\n@@ -62,0 +69,1 @@\n+     *\n@@ -64,0 +72,3 @@\n+     * @see AccessFlags\n+     * @see AccessFlag.Location#FIELD\n+     * @see ClassBuilder#withField(String, ClassDesc, int)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldBuilder.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,7 @@\n- * A marker interface for elements that can appear when traversing\n- * a {@link FieldModel} or be presented to a {@link FieldBuilder}.\n+ * Marker interface for a member element of a {@link FieldModel}.  Such an\n+ * element can appear when traversing a {@link FieldModel} unless otherwise\n+ * specified, be supplied to a {@link FieldBuilder}, and be processed by a\n+ * {@link FieldTransform}.\n+ * <p>\n+ * {@link AccessFlags} is the only member element of a field that appear exactly\n+ * once during the traversal of a {@link FieldModel}.\n@@ -33,0 +38,4 @@\n+ * @see ClassFileElement##membership Membership Elements\n+ * @see ClassElement\n+ * @see MethodElement\n+ * @see CodeElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldElement.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -31,0 +32,1 @@\n+import java.util.function.Consumer;\n@@ -37,3 +39,13 @@\n- * Models a field.  The contents of the field can be traversed via\n- * a streaming view, or via random access (e.g.,\n- * {@link #flags()}), or by freely mixing the two.\n+ * Models a field.  A field can be viewed as a {@linkplain CompoundElement\n+ * composition} of {@link FieldElement}s, or by random access via accessor\n+ * methods if only specific parts of the field is needed.\n+ * <p>\n+ * Fields can be obtained from {@link ClassModel#fields()}, or in the traversal\n+ * of member elements of a class.\n+ * <p>\n+ * {@link ClassBuilder#withField(String, ClassDesc, Consumer)} is the main way\n+ * to construct fields.  {@link ClassBuilder#transformField} allows creating a\n+ * new field by selectively processing the original field elements and directing\n+ * the results to a field builder.\n+ * <p>\n+ * All field attributes are accessible as member elements.\n@@ -41,0 +53,3 @@\n+ * @see ClassModel#fields()\n+ * @see FieldTransform\n+ * @jvms 4.5 Fields\n@@ -47,1 +62,5 @@\n-    \/** {@return the access flags} *\/\n+    \/**\n+     * {@return the access flags}\n+     *\n+     * @see AccessFlag.Location#FIELD\n+     *\/\n@@ -56,1 +75,1 @@\n-    \/** {@return the field descriptor of this field} *\/\n+    \/** {@return the field descriptor string of this field} *\/\n@@ -59,1 +78,1 @@\n-    \/** {@return the field descriptor of this field, as a symbolic descriptor} *\/\n+    \/** {@return the field type, as a symbolic descriptor} *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldModel.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,8 @@\n+ * <p>\n+ * Refer to {@link ClassFileTransform} for general guidance and caution around\n+ * the use of transforms for structures in the {@code class} file format.\n+ * <p>\n+ * A field transform can be lifted to a class transform via {@link\n+ * ClassTransform#transformingFields(FieldTransform)}, transforming only\n+ * the {@link FieldModel} among the class members and passing all other elements\n+ * to the builders.\n@@ -38,2 +46,2 @@\n- * @see ClassFileTransform\n- *\n+ * @see FieldModel\n+ * @see ClassBuilder#transformField\n@@ -47,1 +55,1 @@\n-     * A field transform that sends all elements to the builder.\n+     * A field transform that passes all elements to the builder.\n@@ -57,1 +65,1 @@\n-     * Create a stateful field transform from a {@link Supplier}.  The supplier\n+     * Creates a stateful field transform from a {@link Supplier}.  The supplier\n@@ -69,1 +77,1 @@\n-     * Create a field transform that passes each element through to the builder,\n+     * Creates a field transform that passes each element through to the builder,\n@@ -91,1 +99,1 @@\n-     * Create a field transform that passes each element through to the builder,\n+     * Creates a field transform that passes each element through to the builder,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldTransform.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,2 @@\n- * CodeAttribute Code} attribute of a method.\n+ * CodeAttribute Code} attribute of a method.  The order of instructions in\n+ * a {@link CodeModel} is significant.\n@@ -41,0 +42,2 @@\n+ * @see Opcode\n+ * @jvms 6.5 Instructions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Instruction.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,5 @@\n- * Models the interfaces of a class.  Delivered as a {@link\n- * java.lang.classfile.ClassElement} when traversing a {@link ClassModel}.\n+ * Models the interfaces (JVMS {@jvms 4.1}) of a class.  An {@code Interfaces}\n+ * appears at most once in a {@link ClassModel}: if it does not appear, the\n+ * class has no interfaces, which is equivalent to an {@code Interfaces} whose\n+ * {@link #interfaces()} returns an empty list.  A {@link ClassBuilder} sets\n+ * the interfaces to an empty list if the interfaces is not supplied.\n@@ -39,0 +42,3 @@\n+ * @see ClassModel#interfaces()\n+ * @see ClassBuilder#withInterfaces\n+ * @jvms 4.1 The {@code ClassFile} Structure\n@@ -45,1 +51,1 @@\n-    \/** {@return the interfaces of this class} *\/\n+    \/** {@return the interfaces of this class, may be empty} *\/\n@@ -67,0 +73,1 @@\n+     * @throws IllegalArgumentException if any of {@code interfaces} is primitive\n@@ -75,0 +82,1 @@\n+     * @throws IllegalArgumentException if any of {@code interfaces} is primitive\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Interfaces.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.constant.MethodTypeDesc;\n@@ -37,5 +37,8 @@\n- * A builder for methods.  Builders are not created directly; they are passed\n- * to handlers by methods such as {@link ClassBuilder#withMethod(Utf8Entry, Utf8Entry, int, Consumer)}\n- * or to method transforms.  The elements of a method can be specified\n- * abstractly (by passing a {@link MethodElement} to {@link #with(ClassFileElement)}\n- * or concretely by calling the various {@code withXxx} methods.\n+ * A builder for methods.  The main way to obtain a method builder is via {@link\n+ * ClassBuilder#withMethod(String, MethodTypeDesc, int, Consumer)}.  {@link\n+ * ClassBuilder#withMethodBody(String, MethodTypeDesc, int, Consumer)} is\n+ * useful if no attribute on the method except {@link CodeModel Code} needs to\n+ * be configured, skipping the method handler.\n+ * <p>\n+ * Refer to {@link ClassFileBuilder} for general guidance and caution around\n+ * the use of builders for structures in the {@code class} file format.\n@@ -43,0 +46,1 @@\n+ * @see MethodModel\n@@ -44,1 +48,1 @@\n- *\n+ * @jvms 4.6 Methods\n@@ -52,1 +56,3 @@\n-     * Sets the method access flags.\n+     * Sets the method access flags.  The {@link AccessFlag#STATIC} flag cannot\n+     * be modified after the builder is created.\n+     *\n@@ -55,0 +61,4 @@\n+     * @throws IllegalArgumentException if the {@link ClassFile#ACC_STATIC\n+     *         ACC_STATIC} flag is modified\n+     * @see AccessFlags\n+     * @see AccessFlag.Location#METHOD\n@@ -61,1 +71,3 @@\n-     * Sets the method access flags.\n+     * Sets the method access flags.  The {@link AccessFlag#STATIC} flag cannot\n+     * be modified after the builder is created.\n+     *\n@@ -64,0 +76,4 @@\n+     * @throws IllegalArgumentException if the {@link ClassFile#ACC_STATIC\n+     *         ACC_STATIC} flag is modified\n+     * @see AccessFlags\n+     * @see AccessFlag.Location#METHOD\n@@ -71,0 +87,1 @@\n+     *\n@@ -73,0 +90,1 @@\n+     * @see CodeModel\n@@ -79,3 +97,2 @@\n-     *\n-     * @implNote\n-     * <p>This method behaves as if:\n+     * <p>\n+     * This method behaves as if:\n@@ -83,1 +100,1 @@\n-     *     withCode(b -> b.transformCode(code, transform));\n+     * withCode(cob -> cob.transform(code, transform));\n@@ -89,0 +106,1 @@\n+     * @see CodeTransform\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodBuilder.java","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,7 @@\n- * A marker interface for elements that can appear when traversing\n- * a {@link MethodModel} or be presented to a {@link MethodBuilder}.\n+ * Marker interface for a member element of a {@link MethodModel}.  Such an\n+ * element can appear when traversing a {@link MethodModel} unless otherwise\n+ * specified, be supplied to a {@link MethodBuilder}, and be processed by a\n+ * {@link MethodTransform}.\n+ * <p>\n+ * {@link AccessFlags} is the only member element of a method that appear\n+ * exactly once during the traversal of a {@link MethodModel}.\n@@ -33,0 +38,4 @@\n+ * @see ClassFileElement##membership Membership Elements\n+ * @see ClassElement\n+ * @see FieldElement\n+ * @see CodeElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodElement.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -31,0 +32,1 @@\n+import java.util.function.Consumer;\n@@ -37,3 +39,13 @@\n- * Models a method.  The contents of the method can be traversed via\n- * a streaming view, or via random access (e.g.,\n- * {@link #flags()}), or by freely mixing the two.\n+ * Models a method.  A method can be viewed as a {@linkplain CompoundElement\n+ * composition} of {@link MethodElement}s, or by random access via accessor\n+ * methods if only specific parts of the method is needed.\n+ * <p>\n+ * Methods can be obtained from {@link ClassModel#methods()}, or in the\n+ * traversal of member elements of a class.\n+ * <p>\n+ * {@link ClassBuilder#withMethod(String, MethodTypeDesc, int, Consumer)} is the\n+ * main way to construct methods.  {@link ClassBuilder#transformMethod} allows\n+ * creating a new method by selectively processing the original method elements\n+ * and directing the results to a method builder.\n+ * <p>\n+ * All method attributes are accessible as member elements.\n@@ -41,0 +53,3 @@\n+ * @see ClassModel#methods()\n+ * @see MethodTransform\n+ * @jvms 4.6 Methods\n@@ -47,1 +62,5 @@\n-    \/** {@return the access flags} *\/\n+    \/**\n+     * {@return the access flags}\n+     *\n+     * @see AccessFlag.Location#METHOD\n+     *\/\n@@ -56,1 +75,1 @@\n-    \/** {@return the method descriptor of this method} *\/\n+    \/** {@return the method descriptor string of this method} *\/\n@@ -59,1 +78,1 @@\n-    \/** {@return the method descriptor of this method, as a symbolic descriptor} *\/\n+    \/** {@return the method type, as a symbolic descriptor} *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodModel.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,8 @@\n+ * <p>\n+ * Refer to {@link ClassFileTransform} for general guidance and caution around\n+ * the use of transforms for structures in the {@code class} file format.\n+ * <p>\n+ * A method transform can be lifted to a class transform via {@link\n+ * ClassTransform#transformingMethods(MethodTransform)}, transforming only\n+ * the {@link MethodModel} among the class members and passing all other\n+ * elements to the builders.\n@@ -38,2 +46,2 @@\n- * @see ClassFileTransform\n- *\n+ * @see MethodModel\n+ * @see ClassBuilder#transformMethod\n@@ -47,1 +55,1 @@\n-     * A method transform that sends all elements to the builder.\n+     * A method transform that passes all elements to the builder.\n@@ -57,1 +65,1 @@\n-     * Create a stateful method transform from a {@link Supplier}.  The supplier\n+     * Creates a stateful method transform from a {@link Supplier}.  The supplier\n@@ -70,1 +78,1 @@\n-     * Create a method transform that passes each element through to the builder,\n+     * Creates a method transform that passes each element through to the builder,\n@@ -92,1 +100,1 @@\n-     * Create a method transform that passes each element through to the builder,\n+     * Creates a method transform that passes each element through to the builder,\n@@ -107,2 +115,3 @@\n-     * Create a method transform that transforms {@link CodeModel} elements\n-     * with the supplied code transform.\n+     * Creates a method transform that transforms {@link CodeModel} elements\n+     * with the supplied code transform, passing every other element through to\n+     * the builder.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodTransform.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- *\n+ * @jvms 6.5 Instructions\n@@ -1146,1 +1146,1 @@\n-     * Increment local variable by constant.\n+     * Increment {@link TypeKind#INT int} local variable by constant.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,6 +38,8 @@\n- * Models metadata about a {@link CodeAttribute}, such as entries in the\n- * exception table, line number table, local variable table, or the mapping\n- * between instructions and labels.  Pseudo-instructions are delivered as part\n- * of the element stream of a {@link CodeModel}.  Delivery of some\n- * pseudo-instructions can be disabled by modifying the value of classfile\n- * options (e.g., {@link ClassFile.DebugElementsOption}).\n+ * Models metadata about a {@link CodeModel}, derived from the {@link\n+ * CodeAttribute Code} attribute itself or its attributes.\n+ * <p>\n+ * Order is significant for some pseudo-instructions relative to {@link\n+ * Instruction}s, such as {@link LabelTarget} or {@link LineNumber}.  Some\n+ * pseudo-instructions can be omitted in reading and writing according to\n+ * certain {@link ClassFile.Option}s.  These are specified in the corresponding\n+ * modeling interfaces.\n@@ -45,0 +47,1 @@\n+ * @sealedGraph\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/PseudoInstruction.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -32,2 +33,9 @@\n- * Models the superclass of a class.  Delivered as a {@link\n- * java.lang.classfile.ClassElement} when traversing a {@link ClassModel}.\n+ * Models the superclass (JVMS {@jvms 4.1}) of a class.  A {@code Superclass}\n+ * appears at most once in a {@link ClassModel}: it must be absent for\n+ * {@linkplain ClassModel#isModuleInfo() module descriptors} or the {@link\n+ * Object} class, and must be present otherwise.  A {@link ClassBuilder} sets\n+ * the {@link Object} class as the superclass if the superclass is not supplied\n+ * and the class to build is required to have a superclass.\n+ * <p>\n+ * All {@linkplain ClassFile#ACC_INTERFACE interfaces} have {@link Object} as\n+ * their superclass.\n@@ -35,0 +43,3 @@\n+ * @see ClassModel#superclass()\n+ * @see ClassBuilder#withSuperclass\n+ * @jvms 4.1 The {@code ClassFile} Structure\n@@ -46,0 +57,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Superclass.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,3 @@\n-     * The primitive type {@code float}.\n+     * The primitive type {@code float}.  All NaN values of {@code float} may or\n+     * may not be collapsed into a single {@linkplain Float#NaN \"canonical\" NaN\n+     * value} in loading and storing.\n@@ -115,1 +117,4 @@\n-     * The primitive type {@code double}. It is of {@linkplain #slotSize() category} 2.\n+     * The primitive type {@code double}. It is of {@linkplain #slotSize()\n+     * category} 2.  All NaN values of {@code double} may or may not be\n+     * collapsed into a single {@linkplain Double#NaN \"canonical\" NaN value}\n+     * in loading and storing.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+ * @see CodeModel\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CodeAttribute.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -470,0 +470,3 @@\n+     * <p>\n+     * All NaN values of the {@code float} may or may not be collapsed into a\n+     * single {@linkplain Float#NaN \"canonical\" NaN value}.\n@@ -486,0 +489,3 @@\n+     * <p>\n+     * All NaN values of the {@code double} may or may not be collapsed into a\n+     * single {@linkplain Double#NaN \"canonical\" NaN value}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+ * @see CodeAttribute#exceptionHandlers()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ExceptionCatch.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,5 @@\n- * The {@code java.lang.classfile} package contains classes for reading, writing, and\n- * modifying Java class files, as specified in Chapter {@jvms 4} of the\n- * <cite>Java Virtual Machine Specification<\/cite>.\n+ * The {@code java.lang.classfile} package contains API models for reading,\n+ * writing, and modifying Java class files, as specified in Chapter {@jvms 4} of\n+ * the <cite>Java Virtual Machine Specification<\/cite>.  This package, {@link\n+ * java.lang.classfile.attribute}, {@link java.lang.classfile.constantpool},\n+ * and {@link java.lang.classfile.instruction} form the Class-File API.\n@@ -33,3 +35,3 @@\n- * The main class for reading classfiles is {@link java.lang.classfile.ClassModel}; we\n- * convert bytes into a {@link java.lang.classfile.ClassModel} with {@link\n- * java.lang.classfile.ClassFile#parse(byte[])}:\n+ * The main class for reading classfiles is {@link ClassModel}; we\n+ * convert bytes into a {@link ClassModel} with {@link\n+ * ClassFile#parse(byte[])}:\n@@ -44,1 +46,1 @@\n- * A {@link java.lang.classfile.ClassModel} is an immutable description of a class\n+ * A {@link ClassModel} is an immutable description of a class\n@@ -46,5 +48,8 @@\n- * java.lang.classfile.ClassModel#thisClass()}, {@link java.lang.classfile.ClassModel#flags()}),\n- * as well as subordinate classfile entities ({@link java.lang.classfile.ClassModel#fields()},\n- * {@link java.lang.classfile.ClassModel#attributes()}). A {@link\n- * java.lang.classfile.ClassModel} is inflated lazily; most parts of the classfile are\n- * not parsed until they are actually needed.\n+ * ClassModel#thisClass()}, {@link ClassModel#flags()}),\n+ * as well as subordinate classfile entities ({@link ClassModel#fields()},\n+ * {@link ClassModel#attributes()}). A {@link\n+ * ClassModel} is inflated lazily; most parts of the classfile are\n+ * not parsed until they are actually needed.  Due to the laziness, these models\n+ * may not be thread safe.  Additionally, invocations to accessor methods on\n+ * models may lead to {@link IllegalArgumentException} due to malformed {@code\n+ * class} file format, as parsing happens lazily.\n@@ -55,1 +60,1 @@\n- * When we enumerate the methods, we get a {@link java.lang.classfile.MethodModel} for each method; like a\n+ * When we enumerate the methods, we get a {@link MethodModel} for each method; like a\n@@ -62,1 +67,1 @@\n- * Methods like {@link java.lang.classfile.ClassModel#methods} allows us to traverse the class structure\n+ * Methods like {@link ClassModel#methods} allows us to traverse the class structure\n@@ -66,1 +71,1 @@\n- * java.lang.classfile.ClassModel} also provides us with a view of the classfile as a\n+ * ClassModel} also provides us with a view of the classfile as a\n@@ -90,1 +95,1 @@\n- * the {@link java.lang.classfile.ClassModel#methods()} accessor) or as a linear\n+ * the {@link ClassModel#methods()} accessor) or as a linear\n@@ -92,3 +97,3 @@\n- * java.lang.classfile.FieldModel} is also an element of a class.) For each model type\n- * (e.g., {@link java.lang.classfile.MethodModel}), there is a corresponding element\n- * type ({@link java.lang.classfile.MethodElement}).  Models and elements are immutable\n+ * FieldModel} is also an element of a class.) For each model type\n+ * (e.g., {@link MethodModel}), there is a corresponding element\n+ * type ({@link MethodElement}).  Models and elements are immutable\n@@ -100,2 +105,2 @@\n- * pool<\/em>. {@link java.lang.classfile.ClassModel} provides a lazily-inflated,\n- * read-only view of the constant pool via {@link java.lang.classfile.ClassModel#constantPool()}.\n+ * pool<\/em>. {@link ClassModel} provides a lazily-inflated,\n+ * read-only view of the constant pool via {@link ClassModel#constantPool()}.\n@@ -103,2 +108,2 @@\n- * subtypes of {@link java.lang.classfile.constantpool.PoolEntry}, such as {@link\n- * java.lang.classfile.constantpool.ClassEntry} or {@link java.lang.classfile.constantpool.Utf8Entry}.\n+ * subtypes of {@link PoolEntry}, such as {@link\n+ * ClassEntry} or {@link Utf8Entry}.\n@@ -107,1 +112,1 @@\n- * above traversal example, the {@link java.lang.classfile.instruction.InvokeInstruction}\n+ * above traversal example, the {@link InvokeInstruction}\n@@ -115,3 +120,3 @@\n- * java.lang.classfile.attribute.SignatureAttribute} is a {@link\n- * java.lang.classfile.ClassElement}, {@link java.lang.classfile.MethodElement}, and {@link\n- * java.lang.classfile.FieldElement} since it can appear in all of those places, and is\n+ * SignatureAttribute} is a {@link\n+ * ClassElement}, {@link MethodElement}, and {@link\n+ * FieldElement} since it can appear in all of those places, and is\n@@ -128,1 +133,1 @@\n- * java.lang.classfile.CodeModel}.)\n+ * CodeModel}.)\n@@ -131,2 +136,2 @@\n- * java.lang.classfile.MethodElement}, is also a model in its own right ({@link\n- * java.lang.classfile.CodeModel}) due to its complex structure.\n+ * MethodElement}, is also a model in its own right ({@link\n+ * CodeModel}) due to its complex structure.\n@@ -137,4 +142,4 @@\n- * defined by the {@link java.lang.classfile.attribute.SignatureAttribute} class, and\n- * provides accessors for {@link java.lang.classfile.attribute.SignatureAttribute#signature()}\n- * as well as factories taking {@link java.lang.classfile.constantpool.Utf8Entry} or\n- * {@link java.lang.String}.\n+ * defined by the {@link SignatureAttribute} class, and\n+ * provides accessors for {@link SignatureAttribute#signature()}\n+ * as well as factories taking {@link Utf8Entry} or\n+ * {@link String}.\n@@ -144,1 +149,1 @@\n- * object form via an {@link java.lang.classfile.AttributeMapper}.  An {@code\n+ * object form via an {@link AttributeMapper}.  An {@code\n@@ -146,1 +151,1 @@\n- * {@link java.lang.classfile.AttributeMapper#readAttribute(AttributedElement,\n+ * {@link AttributeMapper#readAttribute(AttributedElement,\n@@ -149,2 +154,2 @@\n- * {@link java.lang.classfile.AttributeMapper#writeAttribute(java.lang.classfile.BufWriter,\n- * java.lang.classfile.Attribute)} method for mapping back to the classfile format.  It also\n+ * {@link AttributeMapper#writeAttribute(BufWriter,\n+ * Attribute)} method for mapping back to the classfile format.  It also\n@@ -155,1 +160,1 @@\n- * There are built-in attribute mappers (in {@link java.lang.classfile.Attributes}) for\n+ * There are built-in attribute mappers (in {@link Attributes}) for\n@@ -161,1 +166,1 @@\n- * java.lang.classfile.attribute.UnknownAttribute}, which provide access only to the\n+ * UnknownAttribute}, which provide access only to the\n@@ -166,1 +171,1 @@\n- * java.lang.classfile.ClassFile.AttributeMapperOption#of(java.util.function.Function)}}\n+ * ClassFile.AttributeMapperOption#of(Function)}}\n@@ -168,1 +173,1 @@\n- * java.lang.classfile.CustomAttribute}.\n+ * CustomAttribute}.\n@@ -170,1 +175,1 @@\n- * <h3>Options<\/h3>\n+ * <h3 id=\"options\">Options<\/h3>\n@@ -172,2 +177,2 @@\n- * {@link java.lang.classfile.ClassFile#of(java.lang.classfile.ClassFile.Option[])}\n- * accepts a list of options.  {@link java.lang.classfile.ClassFile.Option} is a base interface\n+ * {@link ClassFile#of(ClassFile.Option[])}\n+ * accepts a list of options.  {@link ClassFile.Option} is a base interface\n@@ -177,1 +182,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.AttributeMapperOption#of(java.util.function.Function)}\n+ *   <li>{@link ClassFile.AttributeMapperOption#of(Function)}\n@@ -179,1 +184,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.AttributesProcessingOption}\n+ *   <li>{@link ClassFile.AttributesProcessingOption}\n@@ -181,1 +186,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.ClassHierarchyResolverOption#of(java.lang.classfile.ClassHierarchyResolver)}\n+ *   <li>{@link ClassFile.ClassHierarchyResolverOption#of(ClassHierarchyResolver)}\n@@ -183,1 +188,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.ConstantPoolSharingOption}}\n+ *   <li>{@link ClassFile.ConstantPoolSharingOption}}\n@@ -185,1 +190,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.DeadCodeOption}}\n+ *   <li>{@link ClassFile.DeadCodeOption}}\n@@ -187,1 +192,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.DeadLabelsOption}}\n+ *   <li>{@link ClassFile.DeadLabelsOption}}\n@@ -189,1 +194,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.DebugElementsOption}\n+ *   <li>{@link ClassFile.DebugElementsOption}\n@@ -191,1 +196,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.LineNumbersOption}\n+ *   <li>{@link ClassFile.LineNumbersOption}\n@@ -193,1 +198,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.ShortJumpsOption}\n+ *   <li>{@link ClassFile.ShortJumpsOption}\n@@ -195,1 +200,1 @@\n- *   <li>{@link java.lang.classfile.ClassFile.StackMapsOption}\n+ *   <li>{@link ClassFile.StackMapsOption}\n@@ -199,0 +204,7 @@\n+ * {@link ClassFile.AttributeMapperOption} and {@link ClassFile.ClassHierarchyResolverOption}\n+ * are critical to the correctness of {@code class} file parsing and generation.\n+ * The attribute mapper is required to parse custom attributes.  A correct\n+ * resolver is required to generate {@code class} files that refer to classes\n+ * not available to the system class loader in its bytecode, or in corner cases,\n+ * when generation wishes to avoid loading system classes, such as in agents.\n+ * <p>\n@@ -210,2 +222,2 @@\n- * classes are built through {@link java.lang.classfile.ClassBuilder}, methods through\n- * {@link java.lang.classfile.MethodBuilder}, etc.\n+ * classes are built through {@link ClassBuilder}, methods through\n+ * {@link MethodBuilder}, etc.\n@@ -229,6 +241,6 @@\n- * java.lang.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n- * java.lang.String, java.lang.constant.MethodTypeDesc) CodeBuilder.invokevirtual}, {@link\n- * java.lang.classfile.CodeBuilder#invoke(java.lang.classfile.Opcode,\n- * java.lang.constant.ClassDesc, java.lang.String, java.lang.constant.MethodTypeDesc,\n- * boolean) CodeBuilder.invokeInstruction}, or {@link\n- * java.lang.classfile.CodeBuilder#with(java.lang.classfile.ClassFileElement)\n+ * CodeBuilder#invokevirtual(ClassDesc,\n+ * String, MethodTypeDesc) CodeBuilder.invokevirtual}, {@link\n+ * CodeBuilder#invoke(Opcode,\n+ * ClassDesc, String, MethodTypeDesc,\n+ * boolean) CodeBuilder.invoke}, or {@link\n+ * CodeBuilder#with(ClassFileElement)\n@@ -238,1 +250,1 @@\n- * the convenience method {@code CodeBuilder.invokeInstruction}, which in turn behaves\n+ * the convenience method {@code CodeBuilder.invoke}, which in turn behaves\n@@ -244,1 +256,1 @@\n- * java.lang.NullPointerException NullPointerException} to be thrown. Additionally,\n+ * NullPointerException} to be thrown. Additionally,\n@@ -250,2 +262,2 @@\n- * nominal descriptor abstractions from {@code java.lang.constant} such as {@link\n- * java.lang.constant.ClassDesc} and {@link java.lang.constant.MethodTypeDesc},\n+ * nominal descriptor abstractions from {@link java.lang.constant} such as {@link\n+ * ClassDesc} and {@link MethodTypeDesc},\n@@ -256,1 +268,1 @@\n- * method {@link java.lang.classfile.constantpool.ClassEntry#asSymbol} returns\n+ * method {@link ClassEntry#asSymbol} returns\n@@ -269,1 +281,2 @@\n- * the classfile building process.\n+ * the classfile building process.  These fatal exceptions are thrown as\n+ * {@link IllegalArgumentException}.\n@@ -275,1 +288,1 @@\n- * name to the {@link java.lang.constant.ClassDesc#of} method for validation\n+ * name to the {@link ClassDesc#of} method for validation\n@@ -293,1 +306,1 @@\n- * {@link java.lang.classfile.ClassFile#verify}.\n+ * {@link ClassFile#verify}.\n@@ -304,3 +317,3 @@\n- * get an existing {@link java.lang.classfile.ClassModel}, build a new classfile that\n- * provides a {@link java.lang.classfile.ClassBuilder}, iterate the elements of the\n- * original {@link java.lang.classfile.ClassModel}, and pass through all of them to\n+ * get an existing {@link ClassModel}, build a new classfile that\n+ * provides a {@link ClassBuilder}, iterate the elements of the\n+ * original {@link ClassModel}, and pass through all of them to\n@@ -338,1 +351,1 @@\n- * java.lang.classfile.CodeElement}:\n+ * CodeElement}:\n@@ -379,1 +392,1 @@\n- * java.lang.classfile.CodeTransform#andThen(java.lang.classfile.CodeTransform)}:\n+ * CodeTransform#andThen(CodeTransform)}:\n@@ -402,1 +415,1 @@\n- * with the {@link java.lang.classfile.ClassFile.ConstantPoolSharingOption} option.\n+ * with the {@link ClassFile.ConstantPoolSharingOption} option.\n@@ -432,2 +445,2 @@\n- * java.lang.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n- * java.lang.String, java.lang.constant.MethodTypeDesc)}).\n+ * CodeBuilder#invokevirtual(ClassDesc,\n+ * String, MethodTypeDesc)}).\n@@ -437,3 +450,3 @@\n- * java.lang.classfile.constantpool.ClassEntry}.) Factories and builders also\n- * accept nominal descriptors from {@code java.lang.constant} (e.g., {@link\n- * java.lang.constant.ClassDesc}.)\n+ * ClassEntry}.) Factories and builders also\n+ * accept nominal descriptors from {@link java.lang.constant} (e.g., {@link\n+ * ClassDesc}.)\n@@ -488,1 +501,1 @@\n- * {@link java.lang.classfile.CodeModel} (which models the {@code Code} attribute\n+ * {@link CodeModel} (which models the {@code Code} attribute\n@@ -505,1 +518,1 @@\n- * {@link java.lang.classfile.CodeModel} is unique in that its elements are <em>ordered<\/em>.\n+ * {@link CodeModel} is unique in that its elements are <em>ordered<\/em>.\n@@ -552,0 +565,10 @@\n+\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.function.Function;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/package-info.java","additions":108,"deletions":85,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -188,4 +189,8 @@\n-                    && i.owner().asInternalName().equals(\"Foo\")\n-                    && i.opcode() == Opcode.INVOKESTATIC)\n-                        b.invoke(i.opcode(), CD_Bar, i.name().stringValue(), i.typeSymbol(), i.isInterface());\n-            else b.with(e);\n+                    && i.owner().name().equalsString(\"Foo\")\n+                    && i.opcode() == Opcode.INVOKESTATIC) {\n+                \/\/ remove the old element i by doing nothing to the builder\n+                \/\/ add a new invokestatic instruction to the builder\n+                b.invokestatic(CD_Bar, i.name().stringValue(), i.typeSymbol(), i.isInterface());\n+            } else {\n+                b.with(e);  \/\/ leaves the element in place\n+            }\n@@ -327,0 +332,8 @@\n+\n+    void manualReuseStackMaps(CodeBuilder cob, MethodModel method) {\n+        \/\/ @start region=\"manual-reuse-stack-maps\"\n+        CodeAttribute code = method.findAttribute(Attributes.code()).orElseThrow();\n+        \/\/ Note that StackMapTable may be absent, representing code with no branching\n+        code.findAttribute(Attributes.stackMapTable()).ifPresent(cob);\n+        \/\/ @end\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"}]}