{"files":[{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8306929\n+ * @summary Verify should_clean_previous_versions when run with retransformation and CDS\n+ * @requires vm.jvmti\n+ * @requires vm.cds\n+ * @requires vm.opt.final.ClassUnloading\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run main RedefineClassHelper\n+ * @run driver RedefineSharedClass xshare-off\n+ * @run driver RedefineSharedClass xshare-on\n+ *\/\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import jtreg.SkippedException;\n+\n+public class RedefineSharedClass {\n+\n+    private static final String SHOULD_CLEAN_TRUE = \"Class unloading: should_clean_previous_versions = true\";\n+    private static final String SHOULD_CLEAN_FALSE = \"Class unloading: should_clean_previous_versions = false\";\n+    private static final String SCRATCH_CLASS_ADDED_SHARED = \"scratch class added; class is shared\";\n+    private static final String SCRATCH_CLASS_ADDED_ON_STACK = \"scratch class added; one of its methods is on_stack.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Skip test if default archive is supported.\n+        if (!Platform.isDefaultCDSArchiveSupported()) {\n+            throw new SkippedException(\"Supported platform\");\n+        }\n+\n+        \/\/ The test will redefine a single class below and depending on if the test\n+        \/\/ is run with or without CDS the output will be different, due to the fact\n+        \/\/ that shared classes can never be cleaned out after retranform.\n+        if (args.length > 0) {\n+            \/\/ When run with an argument the class is used as driver and should parse\n+            \/\/ the output to verify it is correct given the command line.\n+            List<String> baseCommand = List.of(\n+                \"-javaagent:redefineagent.jar\",\n+                \"-Xlog:redefine+class+iklass+add=trace,redefine+class+iklass+purge=trace\",\n+                \"RedefineSharedClass\");\n+\n+            if (args[0].equals(\"xshare-off\")) {\n+                \/\/ First case is with -Xshare:off. In this case no classes are shared\n+                \/\/ and we should be able to clean out the retransformed classes. There\n+                \/\/ is no guarantee that any classes will be in use, so just verify that\n+                \/\/ no classes are added due to being shared.\n+                List<String> offCommand = new ArrayList<>();\n+                offCommand.add(\"-Xshare:off\");\n+                offCommand.addAll(baseCommand);\n+                ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(offCommand);\n+                new OutputAnalyzer(pb.start())\n+                    \/\/ We can't expect any of the transformed classes to be in use\n+                    \/\/ so the only thing we can verify is that no scratch classes\n+                    \/\/ are added because they are shared.\n+                    .shouldNotContain(SCRATCH_CLASS_ADDED_SHARED)\n+                    .shouldHaveExitValue(0);\n+                return;\n+            } else if (args[0].equals(\"xshare-on\")) {\n+                \/\/ With -Xshare:on, the shared classes can never be cleaned out. Check the\n+                \/\/ logs to verify we don't try to clean when we know it is not needed.\n+                List<String> onCommand = new ArrayList<>();\n+                onCommand.add(\"-Xshare:on\");\n+                onCommand.addAll(baseCommand);\n+                ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(onCommand);\n+                new OutputAnalyzer(pb.start())\n+                    .shouldContain(SHOULD_CLEAN_FALSE)\n+                    .shouldNotContain(SHOULD_CLEAN_TRUE)\n+                    .shouldContain(SCRATCH_CLASS_ADDED_SHARED)\n+                    \/\/ If the below line occurs, then should_clean_previous_versions will be\n+                    \/\/ true and the above shouldContain will trigger. This check is to\n+                    \/\/ show the intention that we don't expect any non-shared transformed\n+                    \/\/ classes to be in use.\n+                    .shouldNotContain(SCRATCH_CLASS_ADDED_ON_STACK)\n+                    .shouldHaveExitValue(0);\n+                return;\n+            }\n+        }\n+\n+        \/\/ When run without arguments this class acts as the test. First redefining\n+        \/\/ a class that we expect to be in the archive if used and the triggering a\n+        \/\/ System.gc() to clean up.\n+        RedefineClassHelper.redefineClass(java.io.RandomAccessFile.class, getClassBytes(java.io.RandomAccessFile.class));\n+        System.gc();\n+    }\n+\n+    private static byte[] getClassBytes(Class clazz) throws IOException {\n+        String name = \"\/\" + clazz.getName().replace(\".\", \"\/\") + \".class\";\n+        try (InputStream is = clazz.getResourceAsStream(name)) {\n+            return is.readAllBytes();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineSharedClass.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8306929\n- * @summary Verify should_clean_previous_versions when run with JFR and CDS\n- * @requires vm.jvmti\n- * @requires vm.cds\n- * @requires vm.hasJFR\n- * @requires vm.opt.final.ClassUnloading\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @run driver RedefineSharedClassJFR xshare-off\n- * @run driver RedefineSharedClassJFR xshare-on\n- *\/\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-import jtreg.SkippedException;\n-\n-public class RedefineSharedClassJFR {\n-\n-    private static final String SHOULD_CLEAN_TRUE = \"Class unloading: should_clean_previous_versions = true\";\n-    private static final String SHOULD_CLEAN_FALSE = \"Class unloading: should_clean_previous_versions = false\";\n-    private static final String SCRATCH_CLASS_ADDED_SHARED = \"scratch class added; class is shared\";\n-    private static final String SCRATCH_CLASS_ADDED_ON_STACK = \"scratch class added; one of its methods is on_stack.\";\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Skip test if default archive is supported.\n-        if (!Platform.isDefaultCDSArchiveSupported()) {\n-            throw new SkippedException(\"Supported platform\");\n-        }\n-\n-        \/\/ Test is run with JFR which will transform a number of classes. Depending\n-        \/\/ on if the test is run with or without CDS the output will be different,\n-        \/\/ due to the fact that shared classes can never be cleaned out after retranform.\n-        if (args.length > 0) {\n-            \/\/ When run with an argument the class is used as driver and should parse\n-            \/\/ the output to verify it is correct given the command line.\n-            List<String> baseCommand = List.of(\n-                \"-XX:StartFlightRecording\",\n-                \"-Xlog:redefine+class+iklass+add=trace,redefine+class+iklass+purge=trace\",\n-                \"RedefineSharedClassJFR\");\n-\n-            if (args[0].equals(\"xshare-off\")) {\n-                \/\/ First case is with -Xshare:off. In this case no classes are shared\n-                \/\/ and we should be able to clean out the retransformed classes. There\n-                \/\/ is no guarantee that any classes will be in use, so just verify that\n-                \/\/ no classes are added due to being shared.\n-                List<String> offCommand = new ArrayList<>();\n-                offCommand.add(\"-Xshare:off\");\n-                offCommand.addAll(baseCommand);\n-                ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(offCommand);\n-                new OutputAnalyzer(pb.start())\n-                    \/\/ We can't expect any of the transformed classes to be in use\n-                    \/\/ so the only thing we can verify is that no scratch classes\n-                    \/\/ are added because they are shared.\n-                    .shouldNotContain(SCRATCH_CLASS_ADDED_SHARED)\n-                    .shouldHaveExitValue(0);\n-                return;\n-            } else if (args[0].equals(\"xshare-on\")) {\n-                \/\/ With -Xshare:on, the shared classes can never be cleaned out. Check the\n-                \/\/ logs to verify we don't try to clean when we know it is not needed.\n-                List<String> onCommand = new ArrayList<>();\n-                onCommand.add(\"-Xshare:on\");\n-                onCommand.addAll(baseCommand);\n-                ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(onCommand);\n-                new OutputAnalyzer(pb.start())\n-                    .shouldContain(SHOULD_CLEAN_FALSE)\n-                    .shouldNotContain(SHOULD_CLEAN_TRUE)\n-                    .shouldContain(SCRATCH_CLASS_ADDED_SHARED)\n-                    \/\/ If the below line occurs, then should_clean_previous_versions will be\n-                    \/\/ true and the above shouldContain will trigger. This check is to\n-                    \/\/ show the intention that we don't expect any non-shared transformed\n-                    \/\/ classes to be in use.\n-                    .shouldNotContain(SCRATCH_CLASS_ADDED_ON_STACK)\n-                    .shouldHaveExitValue(0);\n-                return;\n-            }\n-        }\n-\n-        \/\/ When run without any argument this class acts as test and we do a system GC\n-        \/\/ to trigger cleaning and get the output we want to check.\n-        System.gc();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineSharedClassJFR.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"}]}