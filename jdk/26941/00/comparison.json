{"files":[{"patch":"@@ -270,1 +270,0 @@\n-  _pretenure_size_threshold_words = PretenureSizeThreshold >> LogHeapWordSize;\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-  \/\/ Size of object to pretenure in words; command line provides bytes\n-  size_t      _pretenure_size_threshold_words;\n@@ -188,18 +186,0 @@\n-  \/\/ Allocation support\n-  bool should_allocate(size_t word_size, bool is_tlab) {\n-    assert(UseTLAB || !is_tlab, \"Should not allocate tlab\");\n-    assert(word_size != 0, \"precondition\");\n-\n-    size_t overflow_limit    = (size_t)1 << (BitsPerSize_t - LogHeapWordSize);\n-\n-    const bool overflows     = word_size >= overflow_limit;\n-    const bool check_too_big = _pretenure_size_threshold_words > 0;\n-    const bool not_too_big   = word_size < _pretenure_size_threshold_words;\n-    const bool size_ok       = is_tlab || !check_too_big || not_too_big;\n-\n-    bool result = !overflows &&\n-                  size_ok;\n-\n-    return result;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -286,4 +286,2 @@\n-  HeapWord* result = nullptr;\n-  if (_old_gen->should_allocate(size, is_tlab)) {\n-    result = _old_gen->expand_and_allocate(size);\n-  }\n+  HeapWord* result = _young_gen->allocate(size);\n+\n@@ -291,4 +289,1 @@\n-    if (_young_gen->should_allocate(size, is_tlab)) {\n-      \/\/ Young-gen is not expanded.\n-      result = _young_gen->allocate(size);\n-    }\n+    result = _old_gen->expand_and_allocate(size);\n@@ -296,0 +291,1 @@\n+\n@@ -304,5 +300,3 @@\n-    if (_young_gen->should_allocate(size, is_tlab)) {\n-      result = _young_gen->par_allocate(size);\n-      if (result != nullptr) {\n-        break;\n-      }\n+    result = _young_gen->par_allocate(size);\n+    if (result != nullptr) {\n+      break;\n@@ -345,19 +339,0 @@\n-HeapWord* SerialHeap::attempt_allocation(size_t size,\n-                                         bool is_tlab,\n-                                         bool first_only) {\n-  HeapWord* res = nullptr;\n-\n-  if (_young_gen->should_allocate(size, is_tlab)) {\n-    res = _young_gen->allocate(size);\n-    if (res != nullptr || first_only) {\n-      return res;\n-    }\n-  }\n-\n-  if (_old_gen->should_allocate(size, is_tlab)) {\n-    res = _old_gen->allocate(size);\n-  }\n-\n-  return res;\n-}\n-\n@@ -462,1 +437,1 @@\n-  bool should_run_young_gc = _young_gen->should_allocate(size, is_tlab);\n+  bool should_run_young_gc = is_tlab || size <= _young_gen->eden()->capacity();\n@@ -465,6 +440,1 @@\n-  result = attempt_allocation(size, is_tlab, false \/*first_only*\/);\n-  if (result != nullptr) {\n-    return result;\n-  }\n-\n-  \/\/ OK, collection failed, try expansion.\n+  \/\/ Just finished a GC, try to satisfy this allocation, using expansion if needed.\n@@ -487,4 +457,0 @@\n-  result = attempt_allocation(size, is_tlab, false \/* first_only *\/);\n-  if (result != nullptr) {\n-    return result;\n-  }\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":9,"deletions":43,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -105,5 +105,0 @@\n-  \/\/ Helper functions for allocation\n-  HeapWord* attempt_allocation(size_t size,\n-                               bool   is_tlab,\n-                               bool   first_only);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -138,9 +138,0 @@\n-  bool should_allocate(size_t word_size, bool is_tlab) {\n-    bool result = false;\n-    size_t overflow_limit = (size_t)1 << (BitsPerSize_t - LogHeapWordSize);\n-    if (!is_tlab) {\n-      result = (word_size > 0) && (word_size < overflow_limit);\n-    }\n-    return result;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -487,5 +487,0 @@\n-  product(size_t, PretenureSizeThreshold, 0,                                \\\n-          \"Maximum size in bytes of objects allocated in DefNew \"           \\\n-          \"generation; zero means no maximum\")                              \\\n-          range(0, max_uintx)                                               \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -570,0 +570,2 @@\n+  { \"PretenureSizeThreshold\",       JDK_Version::undefined(), JDK_Version::jdk(26), JDK_Version::jdk(27) },\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}