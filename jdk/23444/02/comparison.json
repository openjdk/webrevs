{"files":[{"patch":"@@ -80,1 +80,1 @@\n-     * Gets the address of the pointer to the native failed speculations list.\n+     * Gets the address of the pointer to the native failed speculations list.  This always returns a non-zero address.\n@@ -88,2 +88,3 @@\n-                    failedSpeculationsAddress = UnsafeAccess.UNSAFE.allocateMemory(HotSpotJVMCIRuntime.getHostWordKind().getByteCount());\n-                    UnsafeAccess.UNSAFE.putAddress(failedSpeculationsAddress, 0L);\n+                    long address = UnsafeAccess.UNSAFE.allocateMemory(HotSpotJVMCIRuntime.getHostWordKind().getByteCount());\n+                    UnsafeAccess.UNSAFE.putAddress(address, 0L);\n+                    failedSpeculationsAddress = address;\n@@ -174,2 +175,10 @@\n-        if (failedSpeculationsAddress != 0 && UnsafeAccess.UNSAFE.getLong(failedSpeculationsAddress) != 0) {\n-            failedSpeculations = compilerToVM().getFailedSpeculations(failedSpeculationsAddress, failedSpeculations);\n+        if (failedSpeculationsAddress == 0) {\n+            \/\/ If no memory has been allocated then don't force its creation\n+            return;\n+        }\n+\n+        \/\/ Go through getFailedSpeculationsAddress() to ensure that any concurrent\n+        \/\/ initialization of failedSpeculationsAddress is seen by this thread.\n+        long address = getFailedSpeculationsAddress();\n+        if (UnsafeAccess.UNSAFE.getLong(address) != 0) {\n+            failedSpeculations = compilerToVM().getFailedSpeculations(address, failedSpeculations);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotSpeculationLog.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"}]}