{"files":[{"patch":"@@ -350,1 +350,5 @@\n-                    addFreeVar(l.head);\n+                    VarSymbol sym = l.head;\n+                    if (lambdaTranslationMap != null && sym != null) {\n+                        sym = (VarSymbol) lambdaTranslationMap.getOrDefault(sym, sym);\n+                    }\n+                    addFreeVar(sym);\n@@ -3305,1 +3309,1 @@\n-                tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c)));\n+                tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c).map(v -> lambdaTranslationMap != null ? (VarSymbol) lambdaTranslationMap.getOrDefault(v, v) : v)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8305007\n+ * @summary Within-lambda subclass of local class using method param causes compiler crash\n+ * @compile CompilerCrashLambdaPlusLocalClass.java\n+ * @run main CompilerCrashLambdaPlusLocalClass\n+ *\/\n+\n+public abstract class CompilerCrashLambdaPlusLocalClass {\n+    public abstract void consume(Runnable r);\n+\n+    public void doThing(String parameter1, int parameter2) {\n+        class LocalClass {\n+            @Override\n+            public String toString() {\n+                return \"\" + parameter2 + parameter1;\n+            }\n+        }\n+        consume(() -> {\n+            class LambdaLocalClass extends LocalClass {}\n+            new LambdaLocalClass();\n+            new LocalClass();\n+        });\n+    }\n+\n+    public static void main(String... args) {\n+        new CompilerCrashLambdaPlusLocalClass() {\n+            @Override\n+            public void consume(Runnable r) {\n+                r.run();\n+            }\n+        }.doThing(\"test\", 0);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/CompilerCrashLambdaPlusLocalClass.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}