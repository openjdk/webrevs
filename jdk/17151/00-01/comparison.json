{"files":[{"patch":"@@ -2070,1 +2070,0 @@\n-                        ((VarSymbol)ret).adr = ((VarSymbol)sym).adr;\n@@ -2099,1 +2098,0 @@\n-                        ((VarSymbol)ret).adr = ((VarSymbol)sym).adr;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -350,1 +350,5 @@\n-                    addFreeVar(l.head);\n+                    VarSymbol sym = l.head;\n+                    if (lambdaTranslationMap != null && sym != null) {\n+                        sym = (VarSymbol) lambdaTranslationMap.getOrDefault(sym, sym);\n+                    }\n+                    addFreeVar(sym);\n@@ -3305,1 +3309,1 @@\n-                tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c)));\n+                tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c).map(v -> lambdaTranslationMap != null ? (VarSymbol) lambdaTranslationMap.getOrDefault(v, v) : v)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @run main CompilerCrashLambdaPlusLocalClass\n@@ -34,1 +35,1 @@\n-    public void doThing(String parameter) {\n+    public void doThing(String parameter1, int parameter2) {\n@@ -38,1 +39,1 @@\n-                return parameter;\n+                return \"\" + parameter2 + parameter1;\n@@ -43,0 +44,1 @@\n+            new LambdaLocalClass();\n@@ -46,0 +48,9 @@\n+\n+    public static void main(String... args) {\n+        new CompilerCrashLambdaPlusLocalClass() {\n+            @Override\n+            public void consume(Runnable r) {\n+                r.run();\n+            }\n+        }.doThing(\"test\", 0);\n+    }\n","filename":"test\/langtools\/tools\/javac\/lambda\/CompilerCrashLambdaPlusLocalClass.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}