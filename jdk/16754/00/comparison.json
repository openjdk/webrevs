{"files":[{"patch":"@@ -172,0 +172,6 @@\n+  \/\/ Return true only when the stack offset of the first spill node is\n+  \/\/ greater than the stack offset of the second one. Otherwise, return false.\n+  \/\/ When compare_two_spill_nodes(first, second) returns true, we think that\n+  \/\/ \"second\" should be scheduled before \"first\" in the final basic block.\n+  bool compare_two_spill_nodes(Node* first, Node* second);\n+\n@@ -2274,0 +2280,23 @@\n+bool Scheduling::compare_two_spill_nodes(Node* first, Node* second) {\n+  assert(first->is_MachSpillCopy() && second->is_MachSpillCopy(), \"\");\n+\n+  OptoReg::Name first_src_lo = _regalloc->get_reg_first(first->in(1));\n+  OptoReg::Name first_dst_lo = _regalloc->get_reg_first(first);\n+  OptoReg::Name second_src_lo = _regalloc->get_reg_first(second->in(1));\n+  OptoReg::Name second_dst_lo = _regalloc->get_reg_first(second);\n+\n+  \/\/ Comparison between stack -> reg and stack -> reg\n+  if (OptoReg::is_stack(first_src_lo) && OptoReg::is_stack(second_src_lo) &&\n+      OptoReg::is_reg(first_dst_lo) && OptoReg::is_reg(second_dst_lo)) {\n+    return _regalloc->reg2offset(first_src_lo) > _regalloc->reg2offset(second_src_lo);\n+  }\n+\n+  \/\/ Comparison between reg -> stack and reg -> stack\n+  if (OptoReg::is_stack(first_dst_lo) && OptoReg::is_stack(second_dst_lo) &&\n+      OptoReg::is_reg(first_src_lo) && OptoReg::is_reg(second_src_lo)) {\n+    return _regalloc->reg2offset(first_dst_lo) > _regalloc->reg2offset(second_dst_lo);\n+  }\n+\n+  return false;\n+}\n+\n@@ -2285,1 +2314,4 @@\n-  \/\/ Insert in latency order (insertion sort)\n+  \/\/ Insert in latency order (insertion sort). If two MachSpillCopyNodes\n+  \/\/ for stack spilling or unspilling have the same latency, we sort\n+  \/\/ them in the order of stack offset. Some backends (aarch64) may also\n+  \/\/ have more opportunities to do ld\/st merging\n@@ -2287,2 +2319,2 @@\n-  for ( i=0; i < _available.size(); i++ )\n-    if (_current_latency[_available[i]->_idx] > latency)\n+  for (i = 0; i < _available.size(); i++) {\n+    if (_current_latency[_available[i]->_idx] > latency) {\n@@ -2290,0 +2322,6 @@\n+    } else if (_current_latency[_available[i]->_idx] == latency &&\n+               n->is_MachSpillCopy() && _available[i]->is_MachSpillCopy() &&\n+               compare_two_spill_nodes(n, _available[i])) {\n+      break;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":41,"deletions":3,"binary":false,"changes":44,"status":"modified"}]}