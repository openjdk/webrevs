[{"commit":{"message":"8320379: C2: Sort spilling\/unspilling sequence for better ld\/st merging into ldp\/stp on AArch64\n\nMacro-assembler on aarch64 can merge adjacent loads or stores\ninto ldp\/stp[1]. For example, it can merge:\n```\nstr     w20, [sp, #16]\nstr     w10, [sp, #20]\n```\ninto\n```\nstp     w20, w10, [sp, #16]\n```\n\nBut C2 may generate a sequence like:\n```\nstr     x21, [sp, #8]\nstr     w20, [sp, #16]\nstr     x19, [sp, #24] <---\nstr     w10, [sp, #20] <--- Before sorting\nstr     x11, [sp, #40]\nstr     w13, [sp, #48]\nstr     x16, [sp, #56]\n```\nWe can't do any merging for non-adjacent loads or stores.\n\nThe patch is to sort the spilling or unspilling sequence in\nthe order of offset during instruction scheduling and bundling\nphase. After that, we can get a new sequence:\n```\nstr     x21, [sp, #8]\nstr     w20, [sp, #16]\nstr     w10, [sp, #20] <---\nstr     x19, [sp, #24] <--- After sorting\nstr     x11, [sp, #40]\nstr     w13, [sp, #48]\nstr     x16, [sp, #56]\n```\n\nThen macro-assembler can do ld\/st merging:\n```\nstr     x21, [sp, #8]\nstp     w20, w10, [sp, #16] <--- Merged\nstr     x19, [sp, #24]\nstr     x11, [sp, #40]\nstr     w13, [sp, #48]\nstr     x16, [sp, #56]\n```\n\nTo justify the patch, we run `HelloWorld.java`\n```\npublic class HelloWorld {\n    public static void main(String [] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\nwith `java -Xcomp -XX:-TieredCompilation HelloWorld`.\n\nBefore the patch, macro-assembler can do ld\/st merging for\n3688 times. After the patch, the number of ld\/st merging\nincreases to 3871 times, by ~5 %.\n\nTested tier1~3 on x86 and AArch64.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/a95062b39a431b4937ab6e9e73de4d2b8ea1ac49\/src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp#L2079"},"files":[{"filename":"src\/hotspot\/share\/opto\/output.cpp"}],"sha":"96646f7035ed5e712e0a6699965fd5cef19ea67b"}]