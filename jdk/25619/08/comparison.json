{"files":[{"patch":"@@ -2501,15 +2501,2 @@\n-    \/\/ It's entirely possible that our native resources have been destroyed\n-    \/\/ before our java peer - if we're dispose()d, for instance.\n-    \/\/ Alert caller w\/ IllegalComponentStateException.\n-    if (self == NULL) {\n-        JNU_ThrowByName(env, \"java\/awt\/IllegalComponentStateException\",\n-                        \"Peer null in JNI\");\n-        return 0;\n-    }\n-    PDATA pData = JNI_GET_PDATA(self);\n-    if (pData == NULL) {\n-        JNU_ThrowByName(env, \"java\/awt\/IllegalComponentStateException\",\n-                        \"Native resources unavailable\");\n-        env->DeleteGlobalRef(self);\n-        return 0;\n-    }\n+    jint result = -1;\n+    AwtWindow* window = NULL;\n@@ -2517,3 +2504,6 @@\n-    jint result = 0;\n-    AwtWindow *w = (AwtWindow *)pData;\n-    if (::IsWindow(w->GetHWnd()))\n+    \/\/ Our native resources may have been destroyed before the Java peer,\n+    \/\/ e.g., if dispose() was called. In that case, return the default screen.\n+     PDATA pData;\n+    JNI_CHECK_PEER_GOTO(self, ret);\n+    window = (AwtWindow *)pData;\n+    if (::IsWindow(window->GetHWnd()))\n@@ -2521,1 +2511,1 @@\n-        result = (jint)w->GetScreenImOn();\n+        result = (jint)window->GetScreenImOn();\n@@ -2524,0 +2514,1 @@\n+  ret:\n@@ -2525,2 +2516,1 @@\n-\n-    return result;\n+    return (result != -1) ? result : AwtWin32GraphicsDevice::GetDefaultDeviceIndex();\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Window;\n+\n+\/**\n+ * @test\n+ * @bug 8346952\n+ * @summary Verifies no exception occurs when triggering updateCG() for an ownerless window.\n+ * @key headful\n+ *\/\n+\n+public final class BogusFocusableWindowState {\n+\n+    public static void main(String[] args) {\n+        Window frame = new Window(null) {\n+            @Override\n+            public boolean getFocusableWindowState() {\n+                removeNotify();\n+                return true;\n+            }\n+        };\n+        try {\n+            frame.pack();\n+            frame.setVisible(true);\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/BogusFocusableWindowState\/BogusFocusableWindowState.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n- * @bug 8235638 8235739 8285094\n+ * @bug 8235638 8235739 8285094 8346952\n","filename":"test\/jdk\/java\/awt\/Frame\/GetGraphicsStressTest\/GetGraphicsStressTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}