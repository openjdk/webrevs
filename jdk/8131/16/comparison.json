{"files":[{"patch":"@@ -1140,0 +1140,5 @@\n+    \/**\n+     * Largest value that {@link #computeNextExponential} can ever return.\n+     *\/\n+    private static final double MAX_EXPONENTIAL = 0x1.0p63 * DoubleZigguratTables.exponentialX0;\n+\n@@ -1144,0 +1149,18 @@\n+     * @param rng an instance of {@code RandomGenerator}, used to generate uniformly\n+     *            pseudorandomly chosen {@code long} values\n+     *\n+     * @return a nonnegative {@code double} value chosen pseudorandomly\n+     *         from an exponential distribution whose mean is 1\n+     *\/\n+    public static double computeNextExponential(RandomGenerator rng) {\n+        return computeNextExponentialSoftCapped(rng, MAX_EXPONENTIAL);\n+    }\n+\n+    \/**\n+     * Generates a pseudorandom value {@code x} such that {@code Math.min(x, maxValue)}\n+     * follows the same distribution as it would if {@code x} was exponentially distributed\n+     * with mean 1, but with a worst-case number of calls to {@link\n+     * RandomGenerator#nextLong()} that's linear with {@code maxValue}. {@code maxValue} is\n+     * a \"soft\" cap in that a value larger than {@code maxValue} may be returned in order\n+     * to save a calculation.\n+     *\n@@ -1160,1 +1183,1 @@\n-    public static double computeNextExponential(RandomGenerator rng) {\n+    public static double computeNextExponentialSoftCapped(RandomGenerator rng, double maxValue) {\n@@ -1180,0 +1203,10 @@\n+        if (maxValue <= 0.0) {\n+            return 0.0;\n+        }\n+        final long maxExtraMinus1;\n+        if (maxValue >= MAX_EXPONENTIAL) {\n+            maxExtraMinus1 = Long.MAX_VALUE;\n+        } else {\n+            \/\/ Conversion to long rounds toward zero\n+            maxExtraMinus1 = (long) (maxValue \/ DoubleZigguratTables.exponentialX0);\n+        }\n@@ -1190,2 +1223,1 @@\n-\n-        for (double extra = 0.0; ; ) {\n+        for (long extra = 0; ; ) {\n@@ -1222,1 +1254,1 @@\n-                        return x + extra;   \/\/ The chosen point is way below the curve; accept it.\n+                        return Math.fma(extra, DoubleZigguratTables.exponentialX0, x);   \/\/ The chosen point is way below the curve; accept it.\n@@ -1228,1 +1260,1 @@\n-                        return x + extra;   \/\/ The chosen point is below the curve; accept it.\n+                        return Math.fma(extra, DoubleZigguratTables.exponentialX0, x);   \/\/ The chosen point is below the curve; accept it.\n@@ -1233,0 +1265,4 @@\n+            if (extra == maxExtraMinus1) {\n+                \/\/ We've reached the maximum, so don't waste any more time\n+                return maxValue;\n+            }\n@@ -1235,2 +1271,2 @@\n-            extra += DoubleZigguratTables.exponentialX0;\n-            \/\/ This is like the first five lines of this method, but if it returns, it first adds \"extra\".\n+            extra++;\n+            \/\/ This is like the first five lines of this method, but if it returns, it first adds \"extra\" times X0.\n@@ -1240,1 +1276,1 @@\n-                return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1) + extra;\n+                return Math.fma(extra, DoubleZigguratTables.exponentialX0, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1));\n@@ -1362,0 +1398,1 @@\n+            double limit;\n@@ -1364,1 +1401,2 @@\n-            } while (computeNextExponential(rng) < 0.5*x*x);\n+                limit = 0.5*x*x;\n+            } while (computeNextExponentialSoftCapped(rng, limit) < limit);\n@@ -1395,1 +1433,1 @@\n-                x = (X[j] * 0x1.0p63) + ((X[j-1] - X[j]) * (double)U1);\n+                x = Math.fma(X[j-1] - X[j], (double)U1, X[j] * 0x1.0p63);\n@@ -1405,1 +1443,1 @@\n-                double y = (Y[j] * 0x1.0p63) + ((Y[j-1] - Y[j]) * (double)U2);\n+                double y = Math.fma(Y[j-1] - Y[j], (double)U2, Y[j] * 0x1.0p63);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":49,"deletions":11,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util.random;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Param;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests java.util.random.RandomGenerator's implementations of nextExponential and nextGaussian\n+ *\/\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class RandomGeneratorExponentialGaussian {\n+\n+    RandomGenerator randomGenerator;\n+\n+    @Param({\"L64X128MixRandom\", \"L64X1024MixRandom\"})\n+    String randomGeneratorName;\n+\n+    @Param({\"false\",\"true\"})\n+    boolean fixedSeed;\n+\n+    double[] buffer;\n+\n+    @Param(\"1024\")\n+    int size;\n+\n+    @Setup\n+    public void setup() {\n+        buffer = new double[size];\n+        RandomGeneratorFactory factory = RandomGeneratorFactory.of(randomGeneratorName);\n+        randomGenerator = fixedSeed ? factory.create(randomGeneratorName.hashCode()) : factory.create();\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode({Mode.SampleTime, Mode.AverageTime})\n+    public double testNextGaussian() {\n+        return randomGenerator.nextGaussian();\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public double[] testFillBufferWithNextGaussian() {\n+        for (int i = 0; i < size; i++) buffer[i] = randomGenerator.nextGaussian();\n+        return buffer;\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode({Mode.SampleTime, Mode.AverageTime})\n+    public double testNextExponential() {\n+        return randomGenerator.nextExponential();\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public double[] testFillBufferWithNextExponential() {\n+        for (int i = 0; i < size; i++) buffer[i] = randomGenerator.nextExponential();\n+        return buffer;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/random\/RandomGeneratorExponentialGaussian.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,1 @@\n-package org.openjdk.bench.java.util;\n+package org.openjdk.bench.java.util.random;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/random\/RandomGeneratorNext.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/RandomGeneratorNext.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,1 @@\n-package org.openjdk.bench.java.util;\n+package org.openjdk.bench.java.util.random;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/random\/RandomNext.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/RandomNext.java","status":"renamed"}]}