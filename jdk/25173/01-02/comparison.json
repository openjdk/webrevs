{"files":[{"patch":"@@ -1408,1 +1408,1 @@\n-        return valueOf(s, fmt.getScale(), fmt.getPrecision());\n+        return valueOf(s, -fmt.getExp(), fmt.getPrecision());\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        FormattedFPDecimal fd = split(v);\n+        final FormattedFPDecimal fd = split(v);\n@@ -92,2 +92,1 @@\n-        final int targetPrec = switch (expR) {\n-            case -3, -2, -1 ->\n+        final int targetPrec =\n@@ -95,1 +94,1 @@\n-                    1;\n+                (-3 <= expR && expR <= -1) ? 1\n@@ -97,4 +96,6 @@\n-            case 0, 1, 2, 3, 4, 5, 6 ->\n-                \/\/ Keep digits to left of decimal, plus leave a\n-                \/\/ trailing zero\n-                    (expR + 1) + 1;\n+                \/\/ Keep digits to left of decimal, plus leave a trailing zero\n+                : (0 <= expR && expR <= 6) ? expR + 2 :\n+\n+                \/\/ Otherwise, require at least 2 digits, to include trailing\n+                \/\/ digit when there is a single digit\n+                2;\n@@ -102,5 +103,0 @@\n-            default ->\n-                \/\/ Require at least 2 digits, to include trailing digit when\n-                \/\/ there is a single digit\n-                    2;\n-        };\n@@ -125,1 +121,1 @@\n-        int eNew = expR - prec + 1;  \/\/ expR is defined as prec + e - 1\n+        final int eNew = expR - prec + 1;  \/\/ expR is defined as prec + e - 1\n@@ -139,8 +135,2 @@\n-    \/**\n-     * Value {@code scale}, such that\n-     * {@code value = f * 10^(-scale)}\n-     * <p\/>\n-     * This is the same as the definition used by {@link java.math.BigDecimal}\n-     *\/\n-    public int getScale() {\n-        return -e;\n+    public int getExp() {\n+        return e;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FormattedFPDecimal.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    private static final String DIGITS = \"1234567899123456789\"; \/\/ Enough digits to fill a long\n+    private static final String DIGITS = \"1234567000003456789\"; \/\/ Enough digits to fill a long\n","filename":"test\/jdk\/java\/math\/BigDecimal\/ValueOfDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}