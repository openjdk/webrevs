{"files":[{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+import java.io.File;\n+\n+\/*\n+ * @test\n+ * @bug 6467204\n+ * @summary Need to implement \"extended\" native FileDialog for JFileChooser\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MultipleMode\n+*\/\n+\n+public class MultipleMode {\n+\n+    private static final String INSTRUCTIONS =\n+            \"\"\"\n+             1. Turn the 'multiple' checkbox off and press the 'open' button\n+             2. Verify that the file dialog doesn't allow the multiple file selection\n+             3. Select any file and close the file dialog\n+             4. The results will be displayed, verify the results\n+             5. Turn the 'multiple' checkbox on and press the 'open' button\n+             6. Verify that the file dialog allows the multiple file selection\n+             7. Select several files and close the file dialog\n+             8. The results will be displayed, verify the results.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame\n+            .builder()\n+            .title(\"MultipleMode test instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .rows(15)\n+            .columns(40)\n+            .testUI(MultipleMode::init)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static Frame init() {\n+        Frame frame = new Frame(\"MultipleMode\");\n+        TextArea sysout = new TextArea(\"\", 20, 80);\n+        sysout.setEditable(false);\n+\n+        final Checkbox mode = new Checkbox(\"multiple\", true);\n+\n+        Button open = new Button(\"open\");\n+        open.addActionListener(e -> {\n+            FileDialog d = new FileDialog(frame);\n+            d.setMultipleMode(mode.getState());\n+            d.setVisible(true);\n+\n+            \/\/ print the results\n+            sysout.append(\"DIR:\\n\");\n+            sysout.append(\"  %s\\n\".formatted(d.getDirectory()));\n+            sysout.append(\"FILE:\\n\");\n+            sysout.append(\"  %s\\n\".formatted(d.getFile()));\n+            sysout.append(\"FILES:\\n\");\n+            for (File f : d.getFiles()) {\n+                sysout.append(\"  %s\\n\".formatted(f));\n+            }\n+        });\n+\n+        Panel panel = new Panel(new FlowLayout());\n+        panel.add(mode);\n+        panel.add(open);\n+\n+        frame.setLayout(new BorderLayout());\n+        frame.add(panel, BorderLayout.NORTH);\n+        frame.add(sysout, BorderLayout.CENTER);\n+\n+        frame.pack();\n+\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FileDialog\/MultipleMode.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 6467204\n-  @summary Need to implement \"extended\" native FileDialog for JFileChooser\n-  @author dmitry.cherepanov@sun.com area=awt.filedialog\n-  @run applet\/manual=yesno MultipleMode.html\n-  -->\n-<head>\n-<title> MultipleMode <\/title>\n-<\/head>\n-<body>\n-\n-<h1>MultipleMode<br>Bug ID: 6467204<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"MultipleMode.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/FileDialog\/MultipleMode\/MultipleMode.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,289 +0,0 @@\n-\/*\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  test\n-  @bug 6467204\n-  @summary Need to implement \"extended\" native FileDialog for JFileChooser\n-  @author dmitry.cherepanov@sun.com area=awt.filedialog\n-  @run applet\/manual=yesno MultipleMode.html\n-*\/\n-\n-\/\/ Note there is no @ in front of test above.  This is so that the\n-\/\/  harness will not mistake this file as a test file.  It should\n-\/\/  only see the html file as a test file. (the harness runs all\n-\/\/  valid test files, so it would run this test twice if this file\n-\/\/  were valid as well as the html file.)\n-\/\/ Also, note the area= after Your Name in the author tag.  Here, you\n-\/\/  should put which functional area the test falls in.  See the\n-\/\/  AWT-core home page -> test areas and\/or -> AWT team  for a list of\n-\/\/  areas.\n-\/\/ There are several places where ManualYesNoTest appear.  It is\n-\/\/  recommended that these be changed by a global search and replace,\n-\/\/  such as  ESC-%  in xemacs.\n-\n-\n-\n-\/**\n- * MultipleMode.java\n- *\n- * summary:\n- *\/\n-\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.io.File;\n-\n-\n-\/\/Manual tests should run as applet tests if possible because they\n-\/\/ get their environments cleaned up, including AWT threads, any\n-\/\/ test created threads, and any system resources used by the test\n-\/\/ such as file descriptors.  (This is normally not a problem as\n-\/\/ main tests usually run in a separate VM, however on some platforms\n-\/\/ such as the Mac, separate VMs are not possible and non-applet\n-\/\/ tests will cause problems).  Also, you don't have to worry about\n-\/\/ synchronisation stuff in Applet tests the way you do in main\n-\/\/ tests...\n-\n-\n-public class MultipleMode extends Applet\n-{\n-    \/\/Declare things used in the test, like buttons and labels here\n-\n-    public void init()\n-    {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout (new BorderLayout ());\n-\n-        String[] instructions =\n-        {\n-            \" 1. Turn the 'multiple' checkbox off and press the 'open' button \",\n-            \" 2. Verify that the file dialog doesn't allow the multiple file selection \",\n-            \" 3. Select any file and close the file dialog \",\n-            \" 4. The results will be displayed, verify the results \",\n-            \" 5. Turn the 'multiple' checkbox on and press the 'open' button \",\n-            \" 6. Verify that the file dialog allows the multiple file selection \",\n-            \" 7. Select several files and close the file dialog \",\n-            \" 8. The results will be displayed, verify the results \"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-        final Checkbox mode = new Checkbox(\"multiple\", true);\n-        Button open = new Button(\"open\");\n-        open.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                FileDialog d = new FileDialog((Frame)null);\n-                d.setMultipleMode(mode.getState());\n-                d.setVisible(true);\n-\n-                \/\/ print the results\n-                Sysout.println(\"DIR:\");\n-                Sysout.println(d.getDirectory());\n-                Sysout.println(\"FILE:\");\n-                Sysout.println(d.getFile());\n-                Sysout.println(\"FILES:\");\n-                File files[] = d.getFiles();\n-                for (File f : files) {\n-                    Sysout.println(String.valueOf(f));\n-                }\n-            }\n-        });\n-\n-        setLayout(new FlowLayout());\n-        add(mode);\n-        add(open);\n-\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n-\n-    }\/\/ start()\n-\n-    \/\/The rest of this class is the actions which perform the test...\n-\n-    \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-    \/\/Sysout.println (\"Something Happened!\");\n-\n-}\/\/ class ManualYesNoTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-    private static boolean numbering = false;\n-    private static int messageNumber = 0;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    \/* Enables message counting for the tester. *\/\n-    public static void enableNumbering(boolean enable){\n-        numbering = enable;\n-    }\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        if (numbering) {\n-            messageIn = \"\" + messageNumber + \" \" + messageIn;\n-            messageNumber++;\n-        }\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/FileDialog\/MultipleMode\/MultipleMode.java","additions":0,"deletions":289,"binary":false,"changes":289,"status":"deleted"}]}