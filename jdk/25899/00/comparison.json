{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,0 +110,7 @@\n+    final String getContentOrEmptyQuote() {\n+        if (content == null || content.isEmpty()) {\n+            return \"\\\"\\\"\";\n+        }\n+        return content;\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlElement.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.jfr.internal.tracing.Filter;\n+\n@@ -38,1 +40,1 @@\n-        String content = getContent();\n+        String content = getContentOrEmptyQuote();\n@@ -60,1 +62,1 @@\n-        ui.println(getLabel() + \": \" + getContent() + \"  (default)\");\n+        ui.println(getLabel() + \": \" + getContentOrEmptyQuote() + \"  (default)\");\n@@ -74,1 +76,1 @@\n-            ui.println(\"Using default: \" + getContent());\n+            ui.println(\"Using default: \" + getContentOrEmptyQuote());\n@@ -77,0 +79,12 @@\n+        if (isMethodFilter()) {\n+            if (!Filter.isValid(line)) {\n+                ui.println(\"\"\"\n+                Not a valid method filter. A filter can be an annotation \\\n+                (@jakarta.ws.rs.GET), a full qualified class name (com.example.Foo), \\\n+                a fully qualified method reference (java.lang.HashMap::resize) or a \\\n+                class initializer (::<clinit>). Use <init> for constructors. \\\n+                Separate multiple filters with semicolon.\\\n+                \"\"\");\n+                return false;\n+            }\n+        }\n@@ -93,0 +107,4 @@\n+\n+    private boolean isMethodFilter() {\n+        return getContentType().orElse(\"text\").equals(\"method-filter\");\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlText.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.jfr.internal.tracing.Filter;\n@@ -50,0 +51,1 @@\n+    @Override\n@@ -51,1 +53,1 @@\n-        return PlatformTracer.isValidFilter(text);\n+        return Filter.isValid(text);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/MethodSetting.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-record Filter(String className, String methodName, String annotationName, Modification modification) {\n+public record Filter(String className, String methodName, String annotationName, Modification modification) {\n+\n+    public static boolean isValid(String filter) {\n+        return of(filter, Modification.NONE) != null;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/Filter.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -161,4 +161,0 @@\n-    public static boolean isValidFilter(String text) {\n-        return Filter.of(text, null) != null;\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/PlatformTracer.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1192,1 +1192,2 @@\n-      <text name=\"method-timing\" label=\"Method Timing\" contentType=\"text\"><\/text>\n+      <text name=\"method-timing\" label=\"Method Timing Filter\" contentType=\"method-filter\"\n+            description=\"A filter can be an annotation (@jakarta.ws.rs.GET), a full qualified class name (com.example.Foo), a fully qualified method reference (java.lang.HashMap::resize) or a class initializer (::&lt;clinit&gt;). Use &lt;init&gt; for constructors. Separate multiple filters with semicolon.\"><\/text>\n@@ -1194,1 +1195,2 @@\n-      <text name=\"method-trace\" label=\"Method Trace\" contentType=\"text\"><\/text>\n+      <text name=\"method-trace\" label=\"Method Trace Filter\" contentType=\"method-filter\"\n+            description=\"A filter can be an annotation (@jakarta.ws.rs.GET), a full qualified class name (com.example.Foo), a fully qualified method reference (java.lang.HashMap::resize) or a class initializer (::&lt;clinit&gt;). Use &lt;init&gt; for constructors. Separate multiple filters with semicolon.\"><\/text>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1191,1 +1191,2 @@\n-      <text name=\"method-timing\" label=\"Method Timing\" contentType=\"text\"><\/text>\n+      <text name=\"method-timing\" label=\"Method Timing Filter\" contentType=\"method-filter\"\n+            description=\"A filter can be an annotation (@jakarta.ws.rs.GET), a full qualified class name (com.example.Foo), a fully qualified method reference (java.lang.HashMap::resize) or a class initializer (::&lt;clinit&gt;). Use &lt;init&gt; for constructors. Separate multiple filters with semicolon.\"><\/text>\n@@ -1193,1 +1194,2 @@\n-      <text name=\"method-trace\" label=\"Method Trace\" contentType=\"text\"><\/text>\n+      <text name=\"method-trace\" label=\"Method Trace Filter\" contentType=\"method-filter\"\n+            description=\"A filter can be an annotation (@jakarta.ws.rs.GET), a full qualified class name (com.example.Foo), a fully qualified method reference (java.lang.HashMap::resize) or a class initializer (::&lt;clinit&gt;). Use &lt;init&gt; for constructors. Separate multiple filters with semicolon.\"><\/text>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}