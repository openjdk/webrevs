{"files":[{"patch":"@@ -260,0 +260,4 @@\n+     * @implSpec The implementation in this interface returns a new Gatherer\n+     *           which is semantically equivalent to the combination of\n+     *           {@code this} and {@code that} gatherer.\n+     *\n@@ -507,1 +511,1 @@\n-         * @implSpec By default this method returns {@code false}.\n+         * @implSpec The implementation in this interface returns {@code false}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Gatherer.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,0 +95,29 @@\n+    @Test\n+    public void testGathererDefaults() {\n+        final Gatherer.Integrator<Void,Void,Void> expectedIntegrator =\n+                (a,b,c) -> false;\n+\n+        class Test implements Gatherer<Void,Void,Void> {\n+            @Override\n+            public Integrator<Void, Void, Void> integrator() {\n+                return expectedIntegrator;\n+            }\n+        }\n+\n+        var t = new Test();\n+        assertSame(Gatherer.<Void>defaultInitializer(), t.initializer());\n+        assertSame(expectedIntegrator, t.integrator());\n+        assertSame(Gatherer.<Void>defaultCombiner(), t.combiner());\n+        assertSame(Gatherer.<Void,Gatherer.Downstream<? super Void>>defaultFinisher(), t.finisher());\n+    }\n+\n+    @Test\n+    public void testDownstreamDefaults() {\n+        class Test implements Gatherer.Downstream<Void> {\n+            @Override public boolean push(Void v) { return false; }\n+        }\n+\n+        var t = new Test();\n+        assertEquals(false, t.isRejecting());\n+    }\n+\n","filename":"test\/jdk\/java\/util\/stream\/GathererAPITest.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"}]}