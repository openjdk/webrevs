{"files":[{"patch":"@@ -55,1 +55,1 @@\n- * perform a final operation at the end of input.  They are: <ul>\n+ * perform a final action at the end of input.  They are: <ul>\n@@ -60,1 +60,1 @@\n- *     <li>performing an optional final operation ({@link #finisher()})<\/li>\n+ *     <li>performing an optional final action ({@link #finisher()})<\/li>\n@@ -194,1 +194,2 @@\n-     * <p>By default, this method returns {@link #defaultInitializer()}\n+     * @implSpec The implementation in this interface returns\n+     *           {@link #defaultInitializer()}.\n@@ -218,1 +219,2 @@\n-     * <p>By default, this method returns {@link #defaultCombiner()}\n+     * @implSpec The implementation in this interface returns\n+     *           {@link #defaultCombiner()}.\n@@ -232,1 +234,2 @@\n-     * <p>By default, this method returns {@link #defaultFinisher()}\n+     * @implSpec The implementation in this interface returns\n+     *           {@link #defaultFinisher()}.\n@@ -246,1 +249,0 @@\n-     * @param <AA> The type of the state of that Gatherer\n@@ -252,1 +254,1 @@\n-    default <AA, RR> Gatherer<T, ?, RR> andThen(Gatherer<? super R, AA, ? extends RR> that) {\n+    default <RR> Gatherer<T, ?, RR> andThen(Gatherer<? super R, ?, ? extends RR> that) {\n@@ -460,0 +462,1 @@\n+     * @since 22\n@@ -501,0 +504,1 @@\n+     * @since 22\n@@ -561,0 +565,1 @@\n+         * @since 22\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Gatherer.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+ *\n+ * @since 22\n@@ -165,2 +167,2 @@\n-        public <AAA, RRR> Gatherer<T, ?, RRR> andThen(\n-                Gatherer<? super RR, AAA, ? extends RRR> that) {\n+        public <RRR> Gatherer<T, ?, RRR> andThen(\n+                Gatherer<? super RR, ?, ? extends RRR> that) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Gatherers.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1082,14 +1082,9 @@\n-     * @implSpec The implementation in this interface returns a Stream produced as if by the following:\n-     * <pre>{@code\n-     * StreamSupport.stream(spliterator(), isParallel()).gather(gatherer)\n-     * }<\/pre>\n-     *\n-     *      * @implSpec\n-     *      * The default implementation obtains the {@link #spliterator() spliterator}\n-     *      * of this stream, wraps that spliterator so as to support the semantics\n-     *      * of this operation on traversal, and returns a new stream associated with\n-     *      * the wrapped spliterator.  The returned stream preserves the execution\n-     *      * characteristics of this stream (namely parallel or sequential execution\n-     *      * as per {@link #isParallel()}) but the wrapped spliterator may choose to\n-     *      * not support splitting.  When the returned stream is closed, the close\n-     *      * handlers for both the returned and this stream are invoked.\n+     * @implSpec\n+     * The default implementation obtains the {@link #spliterator() spliterator}\n+     * of this stream, wraps that spliterator so as to support the semantics\n+     * of this operation on traversal, and returns a new stream associated with\n+     * the wrapped spliterator.  The returned stream preserves the execution\n+     * characteristics of this stream (namely parallel or sequential execution\n+     * as per {@link #isParallel()}) but the wrapped spliterator may choose to\n+     * not support splitting.  When the returned stream is closed, the close\n+     * handlers for both the returned and this stream are invoked.\n@@ -1105,0 +1100,1 @@\n+     * @since 22\n@@ -1108,1 +1104,3 @@\n-        return StreamSupport.stream(spliterator(), isParallel()).gather(gatherer);\n+        return StreamSupport.stream(spliterator(), isParallel())\n+                            .gather(gatherer)\n+                            .onClose(this::close);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Stream.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -123,1 +123,2 @@\n-        public <AA, RR> Gatherer<T, ?, RR> andThen(Gatherer<? super R, AA, ? extends RR> that) {\n+        public <RR> Gatherer<T, ?, RR> andThen(Gatherer<? super R, ?, ?\n+                extends RR> that) {\n@@ -156,1 +157,2 @@\n-        public <AA, RR> Gatherer<TR, ?, RR> andThen(Gatherer<? super TR, AA, ? extends RR> that) {\n+        public <RR> Gatherer<TR, ?, RR> andThen(Gatherer<? super TR, ?, ?\n+                extends RR> that) {\n@@ -188,1 +190,2 @@\n-        public <AA, RR> Gatherer<T, ?, RR> andThen(Gatherer<? super R, AA, ? extends RR> that) {\n+        public <RR> Gatherer<T, ?, RR> andThen(Gatherer<? super R, ?, ?\n+                extends RR> that) {\n@@ -251,1 +254,2 @@\n-        public final <AA, RR> Gatherer<TR, ?, RR> andThen(Gatherer<? super TR, AA, ? extends RR> that) {\n+        public final <RR> Gatherer<TR, ?, RR> andThen(Gatherer<? super TR, ?,\n+                ? extends RR> that) {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/ops\/ref\/BenchmarkGathererImpls.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}