{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.util.concurrent.ExecutionException;\n@@ -333,1 +334,1 @@\n-     * <p>In progress tasks will be attempted to be cancelled,\n+     * @apiNote In progress tasks will be attempted to be cancelled,\n@@ -337,3 +338,4 @@\n-     * <p>If a result of the function is to be pushed downstream but instead the function completed\n-     * exceptionally then the corresponding exception will instead be rethrown by this method as an \n-     * instance of {@link RuntimeException}. After which any remaining tasks are canceled. \n+     * @implSpec If a result of the function is to be pushed downstream but\n+     * instead the function completed exceptionally then the corresponding\n+     * exception will instead be rethrown by this method as an instance of\n+     * {@link RuntimeException}, after which any remaining tasks are canceled.\n@@ -389,0 +391,1 @@\n+                boolean interrupted = false;\n@@ -400,1 +403,4 @@\n-                } catch (Exception e) {\n+                } catch(InterruptedException ie) {\n+                    proceed = false;\n+                    interrupted = true;\n+                } catch (ExecutionException e) {\n@@ -402,3 +408,4 @@\n-                    throw (e instanceof RuntimeException re)\n-                            ? re\n-                            : new RuntimeException(e);\n+                    final var cause = e.getCause();\n+                    throw (cause instanceof RuntimeException re)\n+                              ? re\n+                              : new RuntimeException(cause == null ? e : cause);\n@@ -415,0 +422,3 @@\n+                if (interrupted)\n+                    Thread.currentThread().interrupt();\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Gatherers.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -285,5 +285,3 @@\n-            } catch (Throwable e) {\n-                while (e.getCause() != null)\n-                    e = e.getCause();\n-                assertSame(TestException.class, e.getClass());\n-                assertEquals(\"expected\", e.getMessage());\n+            } catch (RuntimeException re) {\n+                assertSame(TestException.class, re.getClass());\n+                assertEquals(\"expected\", re.getMessage());\n","filename":"test\/jdk\/java\/util\/stream\/GatherersTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}