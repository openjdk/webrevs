{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- private:\n+private:\n@@ -56,0 +56,17 @@\n+  enum class ProcessAppendResult {\n+    \/\/ Indicates that the candidate was indeed an append and process_append_candidate processed it\n+    \/\/ accordingly (added it to the StringConcat etc.)\n+    AppendWasAdded,\n+    \/\/ The candidate turned out not to be an append call. process_append_candidate did not do anything.\n+    CandidateIsNotAppend,\n+    \/\/ The candidate is an append call, but circumstances completely preventing string concat\n+    \/\/ optimization were detected and the optimization must abort.\n+    AbortOptimization\n+  };\n+\n+  \/\/ Called from build_candidate. Looks at an \"append candidate\", a call that might be a call\n+  \/\/ to StringBuilder::append. If so, adds it to the StringConcat.\n+  ProcessAppendResult process_append_candidate(CallStaticJavaNode* cnode, StringConcat* sc,\n+                                               ciMethod* m, ciSymbol* string_sig, ciSymbol* int_sig,\n+                                               ciSymbol* char_sig);\n+\n@@ -108,1 +125,1 @@\n- public:\n+public:\n@@ -113,1 +130,2 @@\n- private:\n+\n+private:\n","filename":"src\/hotspot\/share\/opto\/stringopts.hpp","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2025 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8341696\n+ * @summary Allow C2 to also optimize non-fluid string builder calls.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.stringopts.TestFluidAndNonFluid\n+ *\/\n+package compiler.c2.irTests.stringopts;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+public class TestFluidAndNonFluid {\n+\n+    public static int unknown = 1;\n+\n+    public static void main(String[] args) {\n+        \/\/ Dont inline any StringBuilder methods for this IR test to check if string opts are applied or not.\n+        TestFramework.runWithFlags(\"-XX:CompileCommand=dontinline,java.lang.StringBuilder::*\");\n+    }\n+\n+    @DontInline\n+    public static void opaque(StringBuilder builder) {\n+        builder.append(\"Z\");\n+    }\n+\n+    @Run(test = {\"fluid\", \"nonFluid\", \"nonFinal\", \"nonFluidExtraneousVariable\", \"nonFluidConditional\",\n+        \"nonFluidOpaqueCall\"})\n+    public void runMethod() {\n+        Asserts.assertEQ(\"0ac\", fluidNoParam());\n+        Asserts.assertEQ(\"ac\", nonFluidNoParam());\n+        Asserts.assertEQ(\"ac\", fluid(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluid(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFinal(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluidExtraneousVariable(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluidConditional(\"c\"));\n+        Asserts.assertEQ(\"aZ\", nonFluidOpaqueCall());\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\", IRNode.INTRINSIC_TRAP})\n+    public static String fluidNoParam() {\n+        return new StringBuilder(\"0\").append(\"a\").append(\"c\").toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\", IRNode.INTRINSIC_TRAP})\n+    public static String nonFluidNoParam() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(\"c\");\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String fluid(String a) {\n+        return new StringBuilder().append(\"a\").append(a).toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFluid(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFinal(String a) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFluidExtraneousVariable(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder x = sb;\n+        sb.append(\"a\");\n+        x.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC_OF, \"StringBuilder\", \"1\", IRNode.CALL_OF_METHOD, \"toString\", \"1\"})\n+    @IR(failOn = IRNode.INTRINSIC_TRAP)\n+    static String nonFluidConditional(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        if (unknown == 1) {\n+            sb.append(a);\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC_OF, \"StringBuilder\", \"1\", IRNode.CALL_OF_METHOD, \"toString\", \"1\"})\n+    @IR(failOn = IRNode.INTRINSIC_TRAP)\n+    static String nonFluidOpaqueCall() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        opaque(sb);\n+        return sb.toString();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/stringopts\/TestFluidAndNonFluid.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 3, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 1, jvmArgsAppend = {\"-XX:+UseParallelGC\", \"-Xmx1g\", \"-Xms1g\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class FluidSBBench {\n+    static final String PREFIX = \"a\";\n+    String foo = \"aaaaa aaaaa aaaaa aaaaa aaaaa\";\n+\n+    @Benchmark\n+    public String fluid() {\n+        return new StringBuilder().append(PREFIX).append(foo).toString();\n+    }\n+\n+    @Benchmark\n+    public String nonFluid() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(PREFIX);\n+        sb.append(foo);\n+        return sb.toString();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/FluidSBBench.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}