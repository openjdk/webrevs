{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,0 +173,3 @@\n+  bool has_control(Node* ctrl) {\n+    return _control.contains(ctrl);\n+  }\n@@ -411,1 +414,60 @@\n-\/\/ Recognize a fluent-chain of StringBuilder\/Buffer. They are either explicit usages\n+PhaseStringOpts::ProcessAppendResult PhaseStringOpts::process_append_candidate(CallStaticJavaNode* cnode,\n+                                                                               StringConcat* sc,\n+                                                                               ciMethod* m,\n+                                                                               ciSymbol* string_sig,\n+                                                                               ciSymbol* int_sig,\n+                                                                               ciSymbol* char_sig) {\n+  if (cnode->method() != nullptr && !cnode->method()->is_static() &&\n+      cnode->method()->holder() == m->holder() &&\n+      cnode->method()->name() == ciSymbols::append_name() &&\n+      (cnode->method()->signature()->as_symbol() == string_sig ||\n+       cnode->method()->signature()->as_symbol() == char_sig ||\n+       cnode->method()->signature()->as_symbol() == int_sig)) {\n+    if (sc->has_control(cnode)) {\n+      return ProcessAppendResult::AppendWasAdded;\n+    }\n+    sc->add_control(cnode);\n+    Node* arg = cnode->in(TypeFunc::Parms + 1);\n+    if (arg == nullptr || arg->is_top()) {\n+#ifndef PRODUCT\n+      if (PrintOptimizeStringConcat) {\n+        tty->print(\"giving up because the call is effectively dead\");\n+        cnode->jvms()->dump_spec(tty);\n+        tty->cr();\n+      }\n+#endif\n+      return ProcessAppendResult::AbortOptimization;\n+    }\n+\n+    if (cnode->method()->signature()->as_symbol() == int_sig) {\n+      sc->push_int(arg);\n+    } else if (cnode->method()->signature()->as_symbol() == char_sig) {\n+      sc->push_char(arg);\n+    } else if (arg->is_Proj() && arg->in(0)->is_CallStaticJava()) {\n+      CallStaticJavaNode* csj = arg->in(0)->as_CallStaticJava();\n+      if (csj->method() != nullptr &&\n+          csj->method()->intrinsic_id() == vmIntrinsics::_Integer_toString &&\n+          arg->outcnt() == 1) {\n+        \/\/ _control is the list of StringBuilder calls nodes which\n+        \/\/ will be replaced by new String code after this optimization.\n+        \/\/ Integer::toString() call is not part of StringBuilder calls\n+        \/\/ chain. It could be eliminated only if its result is used\n+        \/\/ only by this SB calls chain.\n+        \/\/ Another limitation: it should be used only once because\n+        \/\/ it is unknown that it is used only by this SB calls chain\n+        \/\/ until all related SB calls nodes are collected.\n+        assert(arg->unique_out() == cnode, \"sanity\");\n+        sc->add_control(csj);\n+        sc->push_int(csj->in(TypeFunc::Parms));\n+      } else {\n+        sc->push_string(arg);\n+      }\n+    } else {\n+      sc->push_string(arg);\n+    }\n+    return ProcessAppendResult::AppendWasAdded;\n+  }\n+  return ProcessAppendResult::CandidateIsNotAppend;\n+}\n+\n+\/\/ Recognize fluent-chain and non-fluent uses of StringBuilder\/Buffer. They are either explicit usages\n@@ -418,1 +480,1 @@\n-\/\/   .toString(); \/\/ \"foobar123\"\n+\/\/   .toString(); \/\/ \"foobar123\"+\n@@ -420,3 +482,3 @@\n-\/\/ PS: Only a certain subset of constructor and append methods are acceptable.\n-\/\/ The criterion is that the length of argument is easy to work out in this phrase.\n-\/\/ It will drop complex cases such as Object.\n+\/\/ Fluent-chains are recognized by walking upwards along the receivers, starting from toString().\n+\/\/ Once the allocation of the StringBuilder has been reached, DU pairs are examined to find the\n+\/\/ constructor and non-fluent uses of the StringBuilder such as in this example:\n@@ -424,2 +486,0 @@\n-\/\/ Since it walks along the receivers of fluent-chain, it will give up if the codeshape is\n-\/\/ not \"fluent\" enough. eg.\n@@ -430,2 +490,3 @@\n-\/\/ The receiver of toString method is the result of Allocation Node(CheckCastPP).\n-\/\/ The append method is overlooked. It will fail at validate_control_flow() test.\n+\/\/ PS: Only a certain subset of constructor and append methods are acceptable.\n+\/\/ The criterion is that the length of argument is easy to work out in this phrase.\n+\/\/ It will drop complex cases such as Object.\n@@ -470,1 +531,1 @@\n-        break;\n+        return nullptr;\n@@ -482,1 +543,1 @@\n-        break;\n+        return nullptr;\n@@ -492,1 +553,5 @@\n-          \/\/ Matched the constructor.\n+          \/\/  Matched the constructor.\n+          if (constructor != nullptr) {\n+            \/\/ The constructor again. We must only process it once.\n+            continue;\n+          }\n@@ -546,1 +611,9 @@\n-          break;\n+        } else if (use != nullptr) {\n+          if (process_append_candidate(use, sc, m, string_sig, int_sig, char_sig) == ProcessAppendResult::AbortOptimization) {\n+            \/\/ We must abort if process_append_candidate tells us to...\n+            return nullptr;\n+          }\n+          \/\/ ...but we do not care if we really found an append or not:\n+          \/\/ - If we found an append, that's perfect. Nothing further to do.\n+          \/\/ - If this is a call to an unrelated method, validate_mem_flow() (and validate_control_flow())\n+          \/\/   will later check if this call prevents the optimization. So nothing to do here.\n@@ -557,1 +630,1 @@\n-        break;\n+        return nullptr;\n@@ -572,11 +645,7 @@\n-    } else if (cnode->method() == nullptr) {\n-      break;\n-    } else if (!cnode->method()->is_static() &&\n-               cnode->method()->holder() == m->holder() &&\n-               cnode->method()->name() == ciSymbols::append_name() &&\n-               (cnode->method()->signature()->as_symbol() == string_sig ||\n-                cnode->method()->signature()->as_symbol() == char_sig ||\n-                cnode->method()->signature()->as_symbol() == int_sig)) {\n-      sc->add_control(cnode);\n-      Node* arg = cnode->in(TypeFunc::Parms + 1);\n-      if (arg == nullptr || arg->is_top()) {\n+    } else {\n+      ProcessAppendResult result = process_append_candidate(cnode, sc, m, string_sig, int_sig, char_sig);\n+\n+      if (result == ProcessAppendResult::AbortOptimization) {\n+        return nullptr;\n+      } else if (result == ProcessAppendResult::CandidateIsNotAppend) {\n+        \/\/ some unhandled signature\n@@ -585,2 +654,4 @@\n-          tty->print(\"giving up because the call is effectively dead\");\n-          cnode->jvms()->dump_spec(tty); tty->cr();\n+          tty->print(\"giving up because encountered unexpected signature \");\n+          cnode->tf()->dump();\n+          tty->cr();\n+          cnode->in(TypeFunc::Parms + 1)->dump();\n@@ -589,36 +660,1 @@\n-        break;\n-      }\n-      if (cnode->method()->signature()->as_symbol() == int_sig) {\n-        sc->push_int(arg);\n-      } else if (cnode->method()->signature()->as_symbol() == char_sig) {\n-        sc->push_char(arg);\n-      } else {\n-        if (arg->is_Proj() && arg->in(0)->is_CallStaticJava()) {\n-          CallStaticJavaNode* csj = arg->in(0)->as_CallStaticJava();\n-          if (csj->method() != nullptr &&\n-              csj->method()->intrinsic_id() == vmIntrinsics::_Integer_toString &&\n-              arg->outcnt() == 1) {\n-            \/\/ _control is the list of StringBuilder calls nodes which\n-            \/\/ will be replaced by new String code after this optimization.\n-            \/\/ Integer::toString() call is not part of StringBuilder calls\n-            \/\/ chain. It could be eliminated only if its result is used\n-            \/\/ only by this SB calls chain.\n-            \/\/ Another limitation: it should be used only once because\n-            \/\/ it is unknown that it is used only by this SB calls chain\n-            \/\/ until all related SB calls nodes are collected.\n-            assert(arg->unique_out() == cnode, \"sanity\");\n-            sc->add_control(csj);\n-            sc->push_int(csj->in(TypeFunc::Parms));\n-            continue;\n-          }\n-        }\n-        sc->push_string(arg);\n-      }\n-      continue;\n-    } else {\n-      \/\/ some unhandled signature\n-#ifndef PRODUCT\n-      if (PrintOptimizeStringConcat) {\n-        tty->print(\"giving up because encountered unexpected signature \");\n-        cnode->tf()->dump(); tty->cr();\n-        cnode->in(TypeFunc::Parms + 1)->dump();\n+        return nullptr;\n@@ -626,2 +662,0 @@\n-#endif\n-      break;\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":100,"deletions":66,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,14 @@\n+  enum class ProcessAppendResult {\n+    \/\/ Indicates that the candidate was indeed an append and process_append_candidate processed it\n+    \/\/ accordingly (added it to the StringCocat etc.)\n+    AppendWasAdded,\n+    \/\/ The candidate turned out not to be an append call. process_append_candidate did not do anything.\n+    CandidateIsNotAppend,\n+    \/\/ The candidate is an append call, but circumstances completely preventing string concat\n+    \/\/ optimization were detected and the optimization must abort.\n+    AbortOptimization\n+  };\n+\n+  \/\/ Called from build_candidate. Looks at an \"append candidate\", a call that might be a call to StringBuilder::append. If so, adds it to the StringConcat.\n+  ProcessAppendResult process_append_candidate(CallStaticJavaNode* cnode, StringConcat* sc, ciMethod* m, ciSymbol* string_sig, ciSymbol* int_sig, ciSymbol* char_sig);\n+\n","filename":"src\/hotspot\/share\/opto\/stringopts.hpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8341696\n+ * @summary Allow C2 to also optimize non-fluid string builder calls.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.stringopts.TestFluidAndNonFluid\n+ *\/\n+package compiler.c2.irTests.stringopts;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+public class TestFluidAndNonFluid {\n+\n+    public static int unknown = 1;\n+\n+    public static void main(String[] args) {\n+        \/\/ Dont inline any StringBuilder methods for this IR test to check if string opts are applied or not.\n+        TestFramework.runWithFlags(\"-XX:CompileCommand=dontinline,java.lang.StringBuilder::*\");\n+    }\n+\n+    @DontInline\n+    public static void opaque(StringBuilder builder) {\n+        builder.append(\"Z\");\n+    }\n+\n+    @Run(test = {\"fluid\", \"nonFluid\", \"nonFinal\", \"nonFluidExtraneousVariable\", \"nonFluidConditional\",\n+        \"nonFluidOpaqueCall\"})\n+    public void runMethod() {\n+        Asserts.assertEQ(\"0ac\", fluidNoParam());\n+        Asserts.assertEQ(\"ac\", nonFluidNoParam());\n+        Asserts.assertEQ(\"ac\", fluid(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluid(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFinal(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluidExtraneousVariable(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluidConditional(\"c\"));\n+        Asserts.assertEQ(\"aZ\", nonFluidOpaqueCall());\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\", IRNode.INTRINSIC_TRAP})\n+    public static String fluidNoParam() {\n+        return new StringBuilder(\"0\").append(\"a\").append(\"c\").toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\", IRNode.INTRINSIC_TRAP})\n+    public static String nonFluidNoParam() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(\"c\");\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String fluid(String a) {\n+        return new StringBuilder().append(\"a\").append(a).toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFluid(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFinal(String a) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFluidExtraneousVariable(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder x = sb;\n+        sb.append(\"a\");\n+        x.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC_OF, \"StringBuilder\", \"1\", IRNode.CALL_OF_METHOD, \"toString\", \"1\"})\n+    @IR(failOn = IRNode.INTRINSIC_TRAP)\n+    static String nonFluidConditional(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        if (unknown == 1) {\n+            sb.append(a);\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC_OF, \"StringBuilder\", \"1\", IRNode.CALL_OF_METHOD, \"toString\", \"1\"})\n+    @IR(failOn = IRNode.INTRINSIC_TRAP)\n+    static String nonFluidOpaqueCall() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        opaque(sb);\n+        return sb.toString();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/stringopts\/TestFluidAndNonFluid.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 3, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 1, jvmArgsAppend = {\"-XX:+UseParallelGC\", \"-Xmx1g\", \"-Xms1g\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class FluidSBBench {\n+    static final String PREFIX = \"a\";\n+    String foo = \"aaaaa aaaaa aaaaa aaaaa aaaaa\";\n+\n+    @Benchmark\n+    public String fluid() {\n+        return new StringBuilder().append(PREFIX).append(foo).toString();\n+    }\n+\n+    @Benchmark\n+    public String nonFluid() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(PREFIX);\n+        sb.append(foo);\n+        return sb.toString();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/FluidSBBench.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}