{"files":[{"patch":"@@ -655,0 +655,2 @@\n+        byte[] val;\n+        byte coder;\n@@ -668,3 +670,16 @@\n-                byte[] dst = new byte[length];\n-                ad.decodeToLatin1(bytes, offset, length, dst);\n-                return new String(dst, LATIN1);\n+                val = new byte[length];\n+                ad.decodeToLatin1(bytes, offset, length, val);\n+                coder = LATIN1;\n+            } else {\n+                int en = scale(length, cd.maxCharsPerByte());\n+                cd.onMalformedInput(CodingErrorAction.REPLACE)\n+                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n+                char[] ca = new char[en];\n+                int clen = ad.decode(bytes, offset, length, ca);\n+                if (COMPACT_STRINGS) {\n+                    val = StringUTF16.compress(ca, 0, clen);\n+                    coder = StringUTF16.coderFromArrayLen(val, clen);\n+                } else {\n+                    val = StringUTF16.toBytes(ca, 0, clen);\n+                    coder = UTF16;\n+                }\n@@ -672,1 +687,2 @@\n-\n+        } else {\n+            \/\/ decode using CharsetDecoder\n@@ -677,1 +693,7 @@\n-            int clen = ad.decode(bytes, offset, length, ca);\n+            int caLen;\n+            try {\n+                caLen = decodeWithDecoder(cd, ca, bytes, offset, length);\n+            } catch (CharacterCodingException x) {\n+                \/\/ Substitution is enabled, so this shouldn't happen\n+                throw new Error(x);\n+            }\n@@ -679,2 +701,5 @@\n-                byte[] val = StringUTF16.compress(ca, 0, clen);;\n-                return new String(val, StringUTF16.coderFromArrayLen(val, clen));\n+                val = StringUTF16.compress(ca, 0, caLen);\n+                coder = StringUTF16.coderFromArrayLen(val, caLen);\n+            } else {\n+                val = StringUTF16.toBytes(ca, 0, caLen);\n+                coder = UTF16;\n@@ -682,12 +707,0 @@\n-            return new String(StringUTF16.toBytes(ca, 0, clen), UTF16);\n-        }\n-\n-        \/\/ decode using CharsetDecoder\n-        int en = scale(length, cd.maxCharsPerByte());\n-        cd.onMalformedInput(CodingErrorAction.REPLACE)\n-                .onUnmappableCharacter(CodingErrorAction.REPLACE);\n-        char[] ca = new char[en];\n-        int caLen = decodeWithDecoder(cd, ca, bytes, offset, length);\n-        if (COMPACT_STRINGS) {\n-            byte[] val = StringUTF16.compress(ca, 0, caLen);\n-            return new String(val, StringUTF16.coderFromArrayLen(val, caLen));\n@@ -695,1 +708,1 @@\n-        return new String(StringUTF16.toBytes(ca, 0, caLen), UTF16);\n+        return new String(val, coder);\n@@ -816,1 +829,7 @@\n-        int caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n+        int caLen;\n+        try {\n+            caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n+        } catch (CharacterCodingException x) {\n+            \/\/ throw via IAE\n+            throw new IllegalArgumentException(x);\n+        }\n@@ -1229,15 +1248,11 @@\n-    private static int decodeWithDecoder(CharsetDecoder cd, char[] dst, byte[] src, int offset, int length) {\n-        try {\n-            ByteBuffer bb = ByteBuffer.wrap(src, offset, length);\n-            CharBuffer cb = CharBuffer.wrap(dst, 0, dst.length);\n-            CoderResult cr = cd.decode(bb, cb, true);\n-            if (!cr.isUnderflow())\n-                cr.throwException();\n-            cr = cd.flush(cb);\n-            if (!cr.isUnderflow())\n-                cr.throwException();\n-            return cb.position();\n-        } catch (CharacterCodingException x) {\n-            \/\/ Substitution is enabled, so this shouldn't happen\n-            throw new IllegalArgumentException(x);\n-        }\n+    private static int decodeWithDecoder(CharsetDecoder cd, char[] dst, byte[] src, int offset, int length)\n+                                            throws CharacterCodingException {\n+        ByteBuffer bb = ByteBuffer.wrap(src, offset, length);\n+        CharBuffer cb = CharBuffer.wrap(dst, 0, dst.length);\n+        CoderResult cr = cd.decode(bb, cb, true);\n+        if (!cr.isUnderflow())\n+            cr.throwException();\n+        cr = cd.flush(cb);\n+        if (!cr.isUnderflow())\n+            cr.throwException();\n+        return cb.position();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":51,"deletions":36,"binary":false,"changes":87,"status":"modified"}]}