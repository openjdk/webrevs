{"files":[{"patch":"@@ -655,1 +655,1 @@\n-        byte[] val;\n+        byte[] value;\n@@ -663,1 +663,5 @@\n-                    return new String(Arrays.copyOfRange(bytes, offset, offset + length), LATIN1);\n+                    value = Arrays.copyOfRange(bytes, offset, offset + length);\n+                    coder = LATIN1;\n+                } else {\n+                    value = StringLatin1.inflate(bytes, offset, length);\n+                    coder = UTF16;\n@@ -665,8 +669,0 @@\n-                return new String(StringLatin1.inflate(bytes, offset, length), UTF16);\n-            }\n-\n-            \/\/ fastpath for always Latin1 decodable single byte\n-            if (COMPACT_STRINGS && ad.isLatin1Decodable()) {\n-                val = new byte[length];\n-                ad.decodeToLatin1(bytes, offset, length, val);\n-                coder = LATIN1;\n@@ -674,8 +670,5 @@\n-                int en = scale(length, cd.maxCharsPerByte());\n-                cd.onMalformedInput(CodingErrorAction.REPLACE)\n-                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n-                char[] ca = new char[en];\n-                int clen = ad.decode(bytes, offset, length, ca);\n-                if (COMPACT_STRINGS) {\n-                    val = StringUTF16.compress(ca, 0, clen);\n-                    coder = StringUTF16.coderFromArrayLen(val, clen);\n+                \/\/ fastpath for always Latin1 decodable single byte\n+                if (COMPACT_STRINGS && ad.isLatin1Decodable()) {\n+                    value = new byte[length];\n+                    ad.decodeToLatin1(bytes, offset, length, value);\n+                    coder = LATIN1;\n@@ -683,2 +676,12 @@\n-                    val = StringUTF16.toBytes(ca, 0, clen);\n-                    coder = UTF16;\n+                    int en = scale(length, cd.maxCharsPerByte());\n+                    cd.onMalformedInput(CodingErrorAction.REPLACE)\n+                            .onUnmappableCharacter(CodingErrorAction.REPLACE);\n+                    char[] ca = new char[en];\n+                    int clen = ad.decode(bytes, offset, length, ca);\n+                    if (COMPACT_STRINGS) {\n+                        value = StringUTF16.compress(ca, 0, clen);\n+                        coder = StringUTF16.coderFromArrayLen(value, clen);\n+                    } else {\n+                        value = StringUTF16.toBytes(ca, 0, clen);\n+                        coder = UTF16;\n+                    }\n@@ -701,2 +704,2 @@\n-                val = StringUTF16.compress(ca, 0, caLen);\n-                coder = StringUTF16.coderFromArrayLen(val, caLen);\n+                value = StringUTF16.compress(ca, 0, caLen);\n+                coder = StringUTF16.coderFromArrayLen(value, caLen);\n@@ -704,1 +707,1 @@\n-                val = StringUTF16.toBytes(ca, 0, caLen);\n+                value = StringUTF16.toBytes(ca, 0, caLen);\n@@ -708,1 +711,1 @@\n-        return new String(val, coder);\n+        return new String(value, coder);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"}]}