{"files":[{"patch":"@@ -59,4 +59,0 @@\n-    public static CodePointIterator create(CharSequence text) {\n-        return new CharSequenceCodePointIterator(text);\n-    }\n-\n@@ -132,51 +128,0 @@\n-final class CharSequenceCodePointIterator extends CodePointIterator {\n-    private CharSequence text;\n-    private int index;\n-\n-    public CharSequenceCodePointIterator(CharSequence text) {\n-        this.text = text;\n-    }\n-\n-    public void setToStart() {\n-        index = 0;\n-    }\n-\n-    public void setToLimit() {\n-        index = text.length();\n-    }\n-\n-    public int next() {\n-        if (index < text.length()) {\n-            char cp1 = text.charAt(index++);\n-            if (Character.isHighSurrogate(cp1) && index < text.length()) {\n-                char cp2 = text.charAt(index+1);\n-                if (Character.isLowSurrogate(cp2)) {\n-                    ++index;\n-                    return Character.toCodePoint(cp1, cp2);\n-                }\n-            }\n-            return cp1;\n-        }\n-        return DONE;\n-    }\n-\n-    public int prev() {\n-        if (index > 0) {\n-            char cp2 = text.charAt(--index);\n-            if (Character.isLowSurrogate(cp2) && index > 0) {\n-                char cp1 = text.charAt(index - 1);\n-                if (Character.isHighSurrogate(cp1)) {\n-                    --index;\n-                    return Character.toCodePoint(cp1, cp2);\n-                }\n-            }\n-            return cp2;\n-        }\n-        return DONE;\n-    }\n-\n-    public int charIndex() {\n-        return index;\n-    }\n-}\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CodePointIterator.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"modified"}]}