{"files":[{"patch":"@@ -3162,0 +3162,1 @@\n+      update_region_attr(new_alloc_region);\n@@ -3164,1 +3165,0 @@\n-    register_region_with_region_attr(new_alloc_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -648,5 +648,4 @@\n-  \/\/ We register a region with the fast \"in collection set\" test. We\n-  \/\/ simply set to true the array slot corresponding to this region.\n-  void register_young_region_with_region_attr(G1HeapRegion* r) {\n-    _region_attr.set_in_young(r->hrm_index(), r->has_pinned_objects());\n-  }\n+  \/\/ The following methods update the region attribute table, i.e. a compact\n+  \/\/ representation of per-region information that is regularly accessed\n+  \/\/ during GC.\n+  inline void register_young_region_with_region_attr(G1HeapRegion* r);\n@@ -654,2 +653,1 @@\n-  inline void register_region_with_region_attr(G1HeapRegion* r);\n-  inline void register_old_region_with_region_attr(G1HeapRegion* r);\n+  inline void register_old_collection_set_region_with_region_attr(G1HeapRegion* r);\n@@ -658,0 +656,3 @@\n+  \/\/ Updates region state without overwriting the type in the region attribute table.\n+  inline void update_region_attr(G1HeapRegion* r);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -194,0 +194,4 @@\n+void G1CollectedHeap::register_young_region_with_region_attr(G1HeapRegion* r) {\n+  _region_attr.set_in_young(r->hrm_index(), r->has_pinned_objects());\n+}\n+\n@@ -195,1 +199,1 @@\n-  _region_attr.set_new_survivor_region(r->hrm_index());\n+  _region_attr.set_new_survivor_region(r->hrm_index(), r->has_pinned_objects());\n@@ -198,1 +202,1 @@\n-void G1CollectedHeap::register_region_with_region_attr(G1HeapRegion* r) {\n+void G1CollectedHeap::update_region_attr(G1HeapRegion* r) {\n@@ -203,1 +207,3 @@\n-void G1CollectedHeap::register_old_region_with_region_attr(G1HeapRegion* r) {\n+void G1CollectedHeap::register_old_collection_set_region_with_region_attr(G1HeapRegion* r) {\n+  assert(!is_in_cset(r), \"should not already be registered as in collection set\");\n+  assert(r->is_old(), \"must be\");\n@@ -205,1 +211,1 @@\n-  _region_attr.set_in_old(r->hrm_index(), true);\n+  _region_attr.set_in_old(r->hrm_index(), true, r->has_pinned_objects());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -129,2 +129,3 @@\n-  assert(!hr->in_collection_set(), \"should not already be in the collection set\");\n-  _g1h->register_old_region_with_region_attr(hr);\n+  assert(!hr->in_collection_set(),\n+         \"should not already be registered as in collection set in the attribute table\");\n+  _g1h->register_old_collection_set_region_with_region_attr(hr);\n@@ -739,1 +740,1 @@\n-      _g1h->register_region_with_region_attr(r);\n+      _g1h->update_region_attr(r);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-  void set_new_survivor()              { _type = NewSurvivor; }\n@@ -135,1 +134,1 @@\n-  void set_new_survivor_region(uintptr_t index) {\n+  void set_new_survivor_region(uintptr_t index, bool region_is_pinned) {\n@@ -138,1 +137,1 @@\n-    get_ref_by_index(index)->set_new_survivor();\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::NewSurvivor, true, region_is_pinned));\n@@ -173,1 +172,1 @@\n-  void set_in_old(uintptr_t index, bool remset_is_tracked) {\n+  void set_in_old(uintptr_t index, bool remset_is_tracked, bool is_pinned) {\n@@ -176,3 +175,1 @@\n-    \/\/ We do not select regions with pinned objects into the collection set.\n-    const bool region_is_pinned = false;\n-    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Old, remset_is_tracked, region_is_pinned));\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Old, remset_is_tracked, is_pinned));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-        _g1h->register_region_with_region_attr(hr);\n+        _g1h->update_region_attr(hr);\n@@ -439,1 +439,1 @@\n-        _g1h->register_region_with_region_attr(hr);\n+        _g1h->update_region_attr(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}