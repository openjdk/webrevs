{"files":[{"patch":"@@ -2703,0 +2703,1 @@\n+    assert_different_registers(obj, tmp, rscratch1, rscratch2, mdo_addr.base(), mdo_addr.index());\n@@ -2704,0 +2705,2 @@\n+  } else {\n+    assert_different_registers(obj, rscratch1, rscratch2, mdo_addr.base(), mdo_addr.index());\n@@ -2760,2 +2763,2 @@\n-          \/\/ There is a chance that the checks above (re-reading profiling\n-          \/\/ data from memory) fail if another thread has just set the\n+          \/\/ There is a chance that the checks above\n+          \/\/ fail if another thread has just set the\n@@ -2764,0 +2767,1 @@\n+          __ eor(tmp, tmp, rscratch2); \/\/ get back original value before XOR\n@@ -2788,0 +2792,4 @@\n+#ifdef ASSERT\n+        __ andr(tmp, tmp, TypeEntries::type_mask);\n+        __ verify_klass_ptr(tmp);\n+#endif\n@@ -2819,0 +2827,4 @@\n+#ifdef ASSERT\n+        __ andr(tmp, tmp, TypeEntries::type_mask);\n+        __ verify_klass_ptr(tmp);\n+#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1565,1 +1565,1 @@\n-  assert_different_registers(obj, rscratch1);\n+  assert_different_registers(obj, rscratch1, mdo_addr.base(), mdo_addr.index());\n@@ -1587,1 +1587,0 @@\n-  ldr(rscratch1, mdo_addr);\n@@ -1591,2 +1590,2 @@\n-  \/\/ There is a chance that the checks above (re-reading profiling\n-  \/\/ data from memory) fail if another thread has just set the\n+  \/\/ There is a chance that the checks above\n+  \/\/ fail if another thread has just set the\n@@ -1594,0 +1593,1 @@\n+  eor(obj, obj, rscratch1); \/\/ get back original value before XOR\n@@ -1606,0 +1606,4 @@\n+#ifdef ASSERT\n+  andr(obj, obj, TypeEntries::type_mask);\n+  verify_klass_ptr(obj);\n+#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1656,2 +1656,2 @@\n-      \/\/ There is a chance that the checks above (re-reading profiling\n-      \/\/ data from memory) fail if another thread has just set the\n+      \/\/ There is a chance that the checks above\n+      \/\/ fail if another thread has just set the\n@@ -1686,0 +1686,3 @@\n+#ifdef ASSERT\n+    __ andi(tmp, tmp, TypeEntries::type_mask);\n+    __ verify_klass_ptr(tmp);\n@@ -1720,0 +1723,4 @@\n+#ifdef ASSERT\n+    __ andi(tmp, tmp, TypeEntries::type_mask);\n+    __ verify_klass_ptr(tmp);\n+#endif\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1629,2 +1629,2 @@\n-  andi(t0, obj, TypeEntries::type_klass_mask);\n-  beqz(t0, next); \/\/ klass seen before, nothing to\n+  andi(tmp, obj, TypeEntries::type_klass_mask);\n+  beqz(tmp, next); \/\/ klass seen before, nothing to\n@@ -1638,1 +1638,0 @@\n-  ld(t0, mdo_addr);\n@@ -1642,2 +1641,2 @@\n-  \/\/ There is a chance that the checks above (re-reading profiling\n-  \/\/ data from memory) fail if another thread has just set the\n+  \/\/ There is a chance that the checks above\n+  \/\/ fail if another thread has just set the\n@@ -1645,0 +1644,1 @@\n+  xorr(obj, obj, t0); \/\/ get back original value before XOR\n@@ -1657,0 +1657,4 @@\n+#ifdef ASSERT\n+  andi(obj, obj, TypeEntries::type_mask);\n+  verify_klass_ptr(obj);\n+#endif\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3633,0 +3633,1 @@\n+    assert_different_registers(obj, tmp, rscratch1, mdo_addr.base(), mdo_addr.index());\n@@ -3634,0 +3635,2 @@\n+  } else {\n+    assert_different_registers(obj, rscratch1, mdo_addr.base(), mdo_addr.index());\n@@ -3679,1 +3682,2 @@\n-        __ xorptr(tmp, mdo_addr);\n+        __ movptr(rscratch1, mdo_addr);\n+        __ xorptr(tmp, rscratch1);\n@@ -3689,6 +3693,4 @@\n-          __ cmpptr(mdo_addr, 0);\n-          __ jccb(Assembler::equal, none);\n-          __ cmpptr(mdo_addr, TypeEntries::null_seen);\n-          __ jccb(Assembler::equal, none);\n-          \/\/ There is a chance that the checks above (re-reading profiling\n-          \/\/ data from memory) fail if another thread has just set the\n+          __ testptr(rscratch1, TypeEntries::type_mask);\n+          __ jccb(Assembler::zero, none);\n+          \/\/ There is a chance that the checks above\n+          \/\/ fail if another thread has just set the\n@@ -3696,0 +3698,1 @@\n+          __ xorptr(tmp, rscratch1); \/\/ get back original value before XOR\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+  assert_different_registers(obj, rscratch1, mdo_addr.base(), mdo_addr.index());\n+\n@@ -67,1 +69,2 @@\n-  xorptr(obj, mdo_addr);\n+  movptr(rscratch1, mdo_addr);\n+  xorptr(obj, rscratch1);\n@@ -76,6 +79,6 @@\n-  cmpptr(mdo_addr, 0);\n-  jccb(Assembler::equal, none);\n-  cmpptr(mdo_addr, TypeEntries::null_seen);\n-  jccb(Assembler::equal, none);\n-  \/\/ There is a chance that the checks above (re-reading profiling\n-  \/\/ data from memory) fail if another thread has just set the\n+  \/\/ is_type_none?\n+  testptr(rscratch1, TypeEntries::type_mask);\n+  jccb(Assembler::zero, none);\n+\n+  \/\/ There is a chance that the checks above\n+  \/\/ fail if another thread has just set the\n@@ -83,0 +86,1 @@\n+  xorptr(obj, rscratch1); \/\/ get back original value before XOR\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}