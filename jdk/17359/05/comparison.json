{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -854,0 +854,2 @@\n+#define DEFAULT_PERFMAP_FILENAME \"\/tmp\/perf-<pid>.map\"\n+\n@@ -856,1 +858,1 @@\n-  _filename(\"filename\", \"Name of the map file\", \"STRING\", false)\n+  _filename(\"filename\", \"Name of the map file\", \"STRING\", false, DEFAULT_PERFMAP_FILENAME)\n@@ -862,1 +864,4 @@\n-  CodeCache::write_perf_map(_filename.value());\n+  \/\/ The check for _filename.is_set() is because we don't want to use\n+  \/\/ DEFAULT_PERFMAP_FILENAME, since it is meant as a description\n+  \/\/ of the default, not the actual default.\n+  CodeCache::write_perf_map(_filename.is_set() ? _filename.value() : nullptr);\n@@ -994,0 +999,2 @@\n+#define DEFAULT_CDS_ARCHIVE_FILENAME \"java_pid<pid>_<subcmd>.jsa\"\n+\n@@ -997,1 +1004,2 @@\n-  _filename(\"filename\", \"Name of shared archive to be dumped\", \"STRING\", false)\n+  _filename(\"filename\", \"Name of shared archive to be dumped\", \"STRING\", false,\n+            DEFAULT_CDS_ARCHIVE_FILENAME)\n@@ -1006,1 +1014,5 @@\n-  const char* file = _filename.value();\n+\n+  \/\/ The check for _filename.is_set() is because we don't want to use\n+  \/\/ DEFAULT_CDS_ARCHIVE_FILENAME, since it is meant as a description\n+  \/\/ of the default, not the actual default.\n+  const char* file = _filename.is_set() ? _filename.value() : nullptr;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -257,2 +257,7 @@\n-\\f[I]filename\\f[R]: (Optional) The name of the map file (STRING, no\n-default value)\n+\\f[I]filename\\f[R]: (Optional) The name of the map file (STRING,\n+\/tmp\/perf-<pid>.map)\n+.PP\n+If \\f[V]filename\\f[R] is not specified, a default file name is chosen\n+using the pid of the target JVM process.\n+For example, if the pid is \\f[V]12345\\f[R], then the default\n+\\f[V]filename\\f[R] will be \\f[V]\/tmp\/perf-12345.map\\f[R].\n@@ -883,1 +888,1 @@\n-\\f[V]filepath\\f[R]: The file path to the output file (STRING, no default\n+\\f[I]filepath\\f[R]: The file path to the output file (STRING, no default\n@@ -916,1 +921,1 @@\n-\\f[V]subcmd\\f[R]: must be either \\f[V]static_dump\\f[R] or\n+\\f[I]subcmd\\f[R]: must be either \\f[V]static_dump\\f[R] or\n@@ -919,2 +924,2 @@\n-\\f[V]filename\\f[R]: (Optional) Name of the shared archive to be dumped\n-(STRING, no default value)\n+\\f[I]filename\\f[R]: (Optional) Name of the shared archive to be dumped\n+(STRING, java_pid<pid>_<subcmd>.jsa)\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.1","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        Assert.assertTrue(Files.exists(path));\n+        Assert.assertTrue(Files.exists(path), \"File must exist: \" + path);\n@@ -97,0 +97,11 @@\n+\n+    @Test\n+    public void specifiedDefaultMapFile() {\n+        \/\/ This is a special case of specifiedMapFile() where the filename specified\n+        \/\/ is the same as the default filename as given in the help output. The dcmd\n+        \/\/ should treat this literally as the filename and not expand <pid> into\n+        \/\/ the actual PID of the process.\n+        String test_dir = System.getProperty(\"test.dir\", \".\");\n+        Path path = Paths.get(\"\/tmp\/perf-<pid>.map\");\n+        run(new JMXExecutor(), \"Compiler.perfmap \" + path.toString(), path);\n+    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}