{"files":[{"patch":"@@ -143,1 +143,1 @@\n-     * @throws ClassCastException if the index does not correspond to\n+     * @throws IllegalArgumentException if the index does not correspond to\n@@ -154,1 +154,1 @@\n-     * @throws ClassCastException if the index does not correspond to\n+     * @throws IllegalArgumentException if the index does not correspond to\n@@ -165,1 +165,1 @@\n-     * @throws ClassCastException if the index does not correspond to\n+     * @throws IllegalArgumentException if the index does not correspond to\n@@ -176,1 +176,1 @@\n-     * @throws ClassCastException if the index does not correspond to\n+     * @throws IllegalArgumentException if the index does not correspond to\n@@ -187,1 +187,1 @@\n-     * @throws ClassCastException if the index does not correspond to\n+     * @throws IllegalArgumentException if the index does not correspond to\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassReader.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-     * {@return the position of the {@code Label} in the {@code codeArray}}\n+     * {@return the position of the {@code Label} in the {@code codeArray}\n+     * or -1 if the {@code Label} does not point to the {@code codeArray}}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CodeAttribute.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -115,1 +114,3 @@\n-                case TAG_CONSTANTDYNAMIC, TAG_FIELDREF, TAG_FLOAT, TAG_INTEGER, TAG_INTERFACEMETHODREF, TAG_INVOKEDYNAMIC, TAG_METHODREF, TAG_NAMEANDTYPE -> p += 4;\n+                case TAG_CONSTANTDYNAMIC, TAG_FIELDREF, TAG_FLOAT, TAG_INTEGER,\n+                     TAG_INTERFACEMETHODREF, TAG_INVOKEDYNAMIC, TAG_METHODREF,\n+                     TAG_NAMEANDTYPE -> p += 4;\n@@ -132,1 +133,0 @@\n-        p = metadataStart;\n@@ -406,1 +406,2 @@\n-        return (ModuleEntry) readEntry(pos);\n+        if (readEntry(pos) instanceof ModuleEntry me) return me;\n+        throw new IllegalArgumentException(\"Not a module entry at pos: \" + pos);\n@@ -411,1 +412,2 @@\n-        return (PackageEntry) readEntry(pos);\n+        if (readEntry(pos) instanceof PackageEntry pe) return pe;\n+        throw new IllegalArgumentException(\"Not a package entry at pos: \" + pos);\n@@ -416,1 +418,2 @@\n-        return (ClassEntry) readEntry(pos);\n+        if (readEntry(pos) instanceof ClassEntry ce) return ce;\n+        throw new IllegalArgumentException(\"Not a class entry at pos: \" + pos);\n@@ -421,1 +424,2 @@\n-        return (NameAndTypeEntry) readEntry(pos);\n+        if (readEntry(pos) instanceof NameAndTypeEntry nate) return nate;\n+        throw new IllegalArgumentException(\"Not a name and type entry at pos: \" + pos);\n@@ -426,1 +430,2 @@\n-        return (MethodHandleEntry) readEntry(pos);\n+        if (readEntry(pos) instanceof MethodHandleEntry mhe) return mhe;\n+        throw new IllegalArgumentException(\"Not a method handle entry at pos: \" + pos);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}