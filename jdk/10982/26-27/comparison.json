{"files":[{"patch":"@@ -54,1 +54,0 @@\n-\/\/    public static Map<ConstantDesc, Opcode> constantsToOpcodes = new HashMap<>(16);\n@@ -56,1 +55,1 @@\n-    public BytecodeHelpers() {\n+    private BytecodeHelpers() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * (http:\/\/java-performance.info\/implementing-world-fastest-java-int-to-int-hash-map\/).\n+ * (<a href=\"http:\/\/java-performance.info\/\">http:\/\/java-performance.info\/<\/a>).\n@@ -189,1 +189,3 @@\n-        if ( s > (1 << 30) ) throw new IllegalArgumentException( \"Too large (\" + expected + \" expected elements with load factor \" + f + \")\" );\n+        if ( s > (1 << 30) )\n+            throw new IllegalArgumentException(\"Too large (\" + expected\n+                    + \" expected elements with load factor \" + f + \")\" );\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/EntryMap.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- *\n+ * TargetInfoImpl\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TargetInfoImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,2 +146,5 @@\n- * AttributeMapper} provides the {@link jdk.internal.classfile.AttributeMapper#readAttribute(AttributedElement, ClassReader, int)} method for mapping from the classfile format\n- * to an attribute instance, and the {@link jdk.internal.classfile.AttributeMapper#writeAttribute(jdk.internal.classfile.BufWriter,\n+ * AttributeMapper} provides the\n+ * {@link jdk.internal.classfile.AttributeMapper#readAttribute(AttributedElement,\n+ * ClassReader, int)} method for mapping from the classfile format\n+ * to an attribute instance, and the\n+ * {@link jdk.internal.classfile.AttributeMapper#writeAttribute(jdk.internal.classfile.BufWriter,\n@@ -163,1 +166,2 @@\n- * through the use of the {@link jdk.internal.classfile.Classfile.Option#attributeMapper(java.util.function.Function)}}\n+ * through the use of the {@link\n+ * jdk.internal.classfile.Classfile.Option#attributeMapper(java.util.function.Function)}}\n@@ -174,6 +178,12 @@\n- *   <li>{@link jdk.internal.classfile.Classfile.Option#generateStackmap(boolean)} -- generate stackmaps (default is true)<\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.Option#processDebug(boolean)} -- processing of debug information, such as local variable metadata (default is true) <\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.Option#processLineNumbers(boolean)} -- processing of line numbers (default is true) <\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.Option#processUnknownAttributes(boolean)} -- processing of unrecognized attributes (default is true)<\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.Option#constantPoolSharing(boolean)}} -- share constant pool when transforming (default is true)<\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.Option#classHierarchyResolver(jdk.internal.classfile.ClassHierarchyResolver)} -- specify a custom class hierarchy\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#generateStackmap(boolean)}\n+ * -- generate stackmaps (default is true)<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#processDebug(boolean)}\n+ * -- processing of debug information, such as local variable metadata (default is true) <\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#processLineNumbers(boolean)}\n+ * -- processing of line numbers (default is true) <\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#processUnknownAttributes(boolean)}\n+ * -- processing of unrecognized attributes (default is true)<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#constantPoolSharing(boolean)}}\n+ * -- share constant pool when transforming (default is true)<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#classHierarchyResolver(jdk.internal.classfile.ClassHierarchyResolver)}\n+ * -- specify a custom class hierarchy\n@@ -181,1 +191,2 @@\n- *   <li>{@link jdk.internal.classfile.Classfile.Option#attributeMapper(java.util.function.Function)} -- specify format of custom attributes<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#attributeMapper(java.util.function.Function)}\n+ * -- specify format of custom attributes<\/li>\n@@ -213,2 +224,3 @@\n- * boolean) CodeBuilder.invokeInstruction}, or\n- * {@link jdk.internal.classfile.CodeBuilder#with(jdk.internal.classfile.ClassfileElement) CodeBuilder.with}.\n+ * boolean) CodeBuilder.invokeInstruction}, or {@link\n+ * jdk.internal.classfile.CodeBuilder#with(jdk.internal.classfile.ClassfileElement)\n+ * CodeBuilder.with}.\n@@ -343,1 +355,2 @@\n- * corresponding builder (e.g., {@link jdk.internal.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n+ * corresponding builder (e.g., {@link\n+ * jdk.internal.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n@@ -348,2 +361,2 @@\n- * jdk.internal.classfile.constantpool.ClassEntry}.) Factories and builders also accept nominal\n- * descriptors from {@code java.lang.constant} (e.g., {@link\n+ * jdk.internal.classfile.constantpool.ClassEntry}.) Factories and builders also\n+ * accept nominal descriptors from {@code java.lang.constant} (e.g., {@link\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"}]}