{"files":[{"patch":"@@ -27,1 +27,2 @@\n- * <h2>Specific components, transformations, and tools built on top of the Classfile API<\/h2>\n+ * <h2>Specific components, transformations, and tools built on top of the\n+ * Classfile API<\/h2>\n@@ -29,2 +30,3 @@\n- * The {@code jdk.internal.classfile.components} package contains specific transformation components\n- * and utility classes helping to compose very complex tasks with minimal effort.\n+ * The {@code jdk.internal.classfile.components} package contains specific\n+ * transformation components and utility classes helping to compose very complex\n+ * tasks with minimal effort.\n@@ -34,3 +36,5 @@\n- * {@link ClassPrinter} is a helper class providing seamless export of a {@link jdk.internal.classfile.ClassModel},\n- * {@link jdk.internal.classfile.FieldModel}, {@link jdk.internal.classfile.MethodModel}, or {@link jdk.internal.classfile.CodeModel}\n- * into human-readable structured text in JSON, XML, or YAML format, or into a tree of traversable and printable nodes.\n+ * {@link ClassPrinter} is a helper class providing seamless export of a {@link\n+ * jdk.internal.classfile.ClassModel}, {@link jdk.internal.classfile.FieldModel},\n+ * {@link jdk.internal.classfile.MethodModel}, or {@link\n+ * jdk.internal.classfile.CodeModel} into human-readable structured text in\n+ * JSON, XML, or YAML format, or into a tree of traversable and printable nodes.\n@@ -38,3 +42,4 @@\n- * Primary purpose of {@link ClassPrinter} is to provide human-readable class info for debugging,\n- * exception handling and logging purposes. The printed class also conforms to a standard format\n- * to support automated offline processing.\n+ * Primary purpose of {@link ClassPrinter} is to provide human-readable class\n+ * info for debugging, exception handling and logging purposes. The printed\n+ * class also conforms to a standard format to support automated offline\n+ * processing.\n@@ -45,1 +50,2 @@\n- * {@link ClassPrinter} allows to traverse tree of simple printable nodes to hook custom printer:\n+ * {@link ClassPrinter} allows to traverse tree of simple printable nodes to\n+ * hook custom printer:\n@@ -48,1 +54,2 @@\n- * Another use case for {@link ClassPrinter} is to simplify writing of automated tests:\n+ * Another use case for {@link ClassPrinter} is to simplify writing of automated\n+ * tests:\n@@ -52,3 +59,5 @@\n- * ClassRemapper is a {@link jdk.internal.classfile.ClassTransform}, {@link jdk.internal.classfile.FieldTransform},\n- * {@link jdk.internal.classfile.MethodTransform} and {@link jdk.internal.classfile.CodeTransform}\n- * deeply re-mapping all class references in any form, according to given map or map function.\n+ * ClassRemapper is a {@link jdk.internal.classfile.ClassTransform}, {@link\n+ * jdk.internal.classfile.FieldTransform}, {@link\n+ * jdk.internal.classfile.MethodTransform} and {@link\n+ * jdk.internal.classfile.CodeTransform} deeply re-mapping all class references\n+ * in any form, according to given map or map function.\n@@ -56,3 +65,3 @@\n- * The re-mapping is applied to superclass, interfaces, all kinds of descriptors and signatures,\n- * all attributes referencing classes in any form (including all types of annotations),\n- * and to all instructions referencing to classes.\n+ * The re-mapping is applied to superclass, interfaces, all kinds of descriptors\n+ * and signatures, all attributes referencing classes in any form (including all\n+ * types of annotations), and to all instructions referencing to classes.\n@@ -60,1 +69,2 @@\n- * Primitive types and arrays are never subjects of mapping and are not allowed targets of mapping.\n+ * Primitive types and arrays are never subjects of mapping and are not allowed\n+ * targets of mapping.\n@@ -62,1 +72,2 @@\n- * Arrays of reference types are always decomposed, mapped as the base reference types and composed back to arrays.\n+ * Arrays of reference types are always decomposed, mapped as the base reference\n+ * types and composed back to arrays.\n@@ -71,4 +82,5 @@\n- * {@link CodeLocalsShifter} is a {@link jdk.internal.classfile.CodeTransform} shifting locals to\n- * newly allocated positions to avoid conflicts during code injection.\n- * Locals pointing to the receiver or to method arguments slots are never shifted.\n- * All locals pointing beyond the method arguments are re-indexed in order of appearance.\n+ * {@link CodeLocalsShifter} is a {@link jdk.internal.classfile.CodeTransform}\n+ * shifting locals to newly allocated positions to avoid conflicts during code\n+ * injection. Locals pointing to the receiver or to method arguments slots are\n+ * never shifted. All locals pointing beyond the method arguments are re-indexed\n+ * in order of appearance.\n@@ -80,3 +92,5 @@\n- * {@link CodeRelabeler} is a {@link jdk.internal.classfile.CodeTransform} replacing all occurences\n- * of {@link jdk.internal.classfile.Label} in the transformed code with new instances.\n- * All {@link jdk.internal.classfile.instruction.LabelTarget} instructions are adjusted accordingly.\n+ * {@link CodeRelabeler} is a {@link jdk.internal.classfile.CodeTransform}\n+ * replacing all occurences of {@link jdk.internal.classfile.Label} in the\n+ * transformed code with new instances.\n+ * All {@link jdk.internal.classfile.instruction.LabelTarget} instructions are\n+ * adjusted accordingly.\n@@ -85,3 +99,5 @@\n- * Primary purpose of {@link CodeRelabeler} is for repeated injections of the same code blocks.\n- * Repeated injection of the same code block must be relabeled, so each instance of\n- * {@link jdk.internal.classfile.Label} is bound in the target bytecode exactly once.\n+ * Primary purpose of {@link CodeRelabeler} is for repeated injections of the\n+ * same code blocks.\n+ * Repeated injection of the same code block must be relabeled, so each instance\n+ * of {@link jdk.internal.classfile.Label} is bound in the target bytecode\n+ * exactly once.\n@@ -93,2 +109,3 @@\n- * Following snippet is sample composition of {@link ClassRemapper}, {@link CodeLocalsShifter}\n- * and {@link CodeRelabeler} into fully functional class instrumenting transformation:\n+ * Following snippet is sample composition of {@link ClassRemapper}, {@link\n+ * CodeLocalsShifter} and {@link CodeRelabeler} into fully functional class\n+ * instrumenting transformation:\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/package-info.java","additions":48,"deletions":31,"binary":false,"changes":79,"status":"modified"}]}