{"files":[{"patch":"@@ -49,0 +49,9 @@\n+ * <p>\n+ * The most frequent use case is to simply print a class:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printClass\"}\n+ * <p>\n+ * {@link ClassPrinter} allows to traverse tree of simple printable nodes to hook custom printer:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"customPrint\"}\n+ * <p>\n+ * Another use case for {@link ClassPrinter} is to simplify writing of automated tests:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printNodesInTest\"}\n@@ -93,1 +102,1 @@\n-        public ConstantDesc name();\n+        ConstantDesc name();\n@@ -99,1 +108,1 @@\n-        public Stream<Node> walk();\n+        Stream<Node> walk();\n@@ -105,1 +114,1 @@\n-        default public void toJson(Consumer<String> out) {\n+        default void toJson(Consumer<String> out) {\n@@ -113,1 +122,1 @@\n-        default public void toXml(Consumer<String> out) {\n+        default void toXml(Consumer<String> out) {\n@@ -121,1 +130,1 @@\n-        default public void toYaml(Consumer<String> out) {\n+        default void toYaml(Consumer<String> out) {\n@@ -136,1 +145,1 @@\n-        public ConstantDesc value();\n+        ConstantDesc value();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassPrinter.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -250,1 +250,2 @@\n-                    sb.append('\\\\').append('u').append(DIGITS[(c >> 12) & 0xf]).append(DIGITS[(c >> 8) & 0xf]).append(DIGITS[(c >> 4) & 0xf]).append(DIGITS[(c) & 0xf]);\n+                    sb.append('\\\\').append('u').append(DIGITS[(c >> 12) & 0xf])\n+                            .append(DIGITS[(c >> 8) & 0xf]).append(DIGITS[(c >> 4) & 0xf]).append(DIGITS[(c) & 0xf]);\n@@ -501,1 +502,2 @@\n-            case OfEnum ev -> leafs(\"enum class\", ev.className().stringValue(), \"contant name\", ev.constantName().stringValue());\n+            case OfEnum ev -> leafs(\"enum class\", ev.className().stringValue(),\n+                                    \"contant name\", ev.constantName().stringValue());\n@@ -503,1 +505,2 @@\n-            case OfArray av -> new Node[]{new ListNodeImpl(FLOW, \"array\", av.values().stream().map(ev -> new MapNodeImpl(FLOW, \"value\").with(elementValueToTree(ev))))};\n+            case OfArray av -> new Node[]{new ListNodeImpl(FLOW, \"array\", av.values().stream().map(\n+                    ev -> new MapNodeImpl(FLOW, \"value\").with(elementValueToTree(ev))))};\n@@ -657,1 +660,2 @@\n-                                  list(\"flags\", \"flag\", f.flags().flags().stream().map(AccessFlag::name)),\n+                                  list(\"flags\",\n+                                          \"flag\", f.flags().flags().stream().map(AccessFlag::name)),\n@@ -659,1 +663,2 @@\n-                                  list(\"attributes\", \"attribute\", f.attributes().stream().map(Attribute::attributeName)))\n+                                  list(\"attributes\",\n+                                          \"attribute\", f.attributes().stream().map(Attribute::attributeName)))\n@@ -666,1 +671,2 @@\n-                      list(\"flags\", \"flag\", m.flags().flags().stream().map(AccessFlag::name)),\n+                      list(\"flags\",\n+                              \"flag\", m.flags().flags().stream().map(AccessFlag::name)),\n@@ -668,1 +674,2 @@\n-                      list(\"attributes\", \"attribute\", m.attributes().stream().map(Attribute::attributeName)))\n+                      list(\"attributes\",\n+                              \"attribute\", m.attributes().stream().map(Attribute::attributeName)))\n@@ -678,1 +685,2 @@\n-            codeNode.with(list(\"attributes\", \"attribute\", com.attributes().stream().map(Attribute::attributeName)));\n+            codeNode.with(list(\"attributes\",\n+                    \"attribute\", com.attributes().stream().map(Attribute::attributeName)));\n@@ -692,9 +700,10 @@\n-                        codeNode.with(new ListNodeImpl(BLOCK, \"local variables\", IntStream.range(0, locals.size()).mapToObj(i -> {\n-                            var lv = lvta.localVariables().get(i);\n-                            return map(i + 1,\n-                                \"start\", lv.startPc(),\n-                                \"end\", lv.startPc() + lv.length(),\n-                                \"slot\", lv.slot(),\n-                                \"name\", lv.name().stringValue(),\n-                                \"type\", lv.type().stringValue());\n-                        })));\n+                        codeNode.with(new ListNodeImpl(BLOCK, \"local variables\",\n+                                IntStream.range(0, locals.size()).mapToObj(i -> {\n+                                    var lv = lvta.localVariables().get(i);\n+                                    return map(i + 1,\n+                                        \"start\", lv.startPc(),\n+                                        \"end\", lv.startPc() + lv.length(),\n+                                        \"slot\", lv.slot(),\n+                                        \"name\", lv.name().stringValue(),\n+                                        \"type\", lv.type().stringValue());\n+                                })));\n@@ -703,9 +712,10 @@\n-                        codeNode.with(new ListNodeImpl(BLOCK, \"local variable types\", IntStream.range(0, lvtta.localVariableTypes().size()).mapToObj(i -> {\n-                            var lvt = lvtta.localVariableTypes().get(i);\n-                            return map(i + 1,\n-                                \"start\", lvt.startPc(),\n-                                \"end\", lvt.startPc() + lvt.length(),\n-                                \"slot\", lvt.slot(),\n-                                \"name\", lvt.name().stringValue(),\n-                                \"signature\", lvt.signature().stringValue());\n-                        })));\n+                        codeNode.with(new ListNodeImpl(BLOCK, \"local variable types\",\n+                                IntStream.range(0, lvtta.localVariableTypes().size()).mapToObj(i -> {\n+                                    var lvt = lvtta.localVariableTypes().get(i);\n+                                    return map(i + 1,\n+                                        \"start\", lvt.startPc(),\n+                                        \"end\", lvt.startPc() + lvt.length(),\n+                                        \"slot\", lvt.slot(),\n+                                        \"name\", lvt.name().stringValue(),\n+                                        \"signature\", lvt.signature().stringValue());\n+                                })));\n@@ -714,6 +724,7 @@\n-                        codeNode.with(new ListNodeImpl(BLOCK, \"line numbers\", IntStream.range(0, lnta.lineNumbers().size()).mapToObj(i -> {\n-                            var ln = lnta.lineNumbers().get(i);\n-                            return map(i + 1,\n-                                \"start\", ln.startPc(),\n-                                \"line number\", ln.lineNumber());\n-                        })));\n+                        codeNode.with(new ListNodeImpl(BLOCK, \"line numbers\",\n+                                IntStream.range(0, lnta.lineNumbers().size()).mapToObj(i -> {\n+                                    var ln = lnta.lineNumbers().get(i);\n+                                    return map(i + 1,\n+                                        \"start\", ln.startPc(),\n+                                        \"line number\", ln.lineNumber());\n+                                })));\n@@ -722,9 +733,10 @@\n-                        codeNode.with(new ListNodeImpl(BLOCK, \"character ranges\", IntStream.range(0, crta.characterRangeTable().size()).mapToObj(i -> {\n-                            var cr = crta.characterRangeTable().get(i);\n-                            return map(i + 1,\n-                                \"start\", cr.startPc(),\n-                                \"end\", cr.endPc(),\n-                                \"range start\", cr.characterRangeStart(),\n-                                \"range end\", cr.characterRangeEnd(),\n-                                \"flags\", cr.flags());\n-                        })));\n+                        codeNode.with(new ListNodeImpl(BLOCK, \"character ranges\",\n+                                IntStream.range(0, crta.characterRangeTable().size()).mapToObj(i -> {\n+                                    var cr = crta.characterRangeTable().get(i);\n+                                    return map(i + 1,\n+                                        \"start\", cr.startPc(),\n+                                        \"end\", cr.endPc(),\n+                                        \"range start\", cr.characterRangeStart(),\n+                                        \"range end\", cr.characterRangeEnd(),\n+                                        \"flags\", cr.flags());\n+                                })));\n@@ -733,1 +745,2 @@\n-                        rvtaa.annotations().forEach(a -> forEachOffset(a, com, (off, an) -> visibleTypeAnnos.computeIfAbsent(off, o -> new LinkedList<>()).add(an)));\n+                        rvtaa.annotations().forEach(a -> forEachOffset(a, com, (off, an) ->\n+                                visibleTypeAnnos.computeIfAbsent(off, o -> new LinkedList<>()).add(an)));\n@@ -735,1 +748,2 @@\n-                        ritaa.annotations().forEach(a -> forEachOffset(a, com, (off, an) -> invisibleTypeAnnos.computeIfAbsent(off, o -> new LinkedList<>()).add(an)));\n+                        ritaa.annotations().forEach(a -> forEachOffset(a, com, (off, an) ->\n+                                invisibleTypeAnnos.computeIfAbsent(off, o -> new LinkedList<>()).add(an)));\n@@ -745,1 +759,5 @@\n-            var excHandlers = com.exceptionHandlers().stream().map(exc -> new ExceptionHandler(com.labelToBci(exc.tryStart()), com.labelToBci(exc.tryEnd()), com.labelToBci(exc.handler()), exc.catchType().map(ct -> ct.name().stringValue()).orElse(null))).toList();\n+            var excHandlers = com.exceptionHandlers().stream().map(exc -> new ExceptionHandler(\n+                    com.labelToBci(exc.tryStart()),\n+                    com.labelToBci(exc.tryEnd()),\n+                    com.labelToBci(exc.handler()),\n+                    exc.catchType().map(ct -> ct.name().stringValue()).orElse(null))).toList();\n@@ -751,1 +769,2 @@\n-                        codeNode.with(new MapNodeImpl(FLOW, \"\/\/stack map frame @\" + bci).with(((MapNodeImpl)frame).values().toArray(new Node[2])));\n+                        codeNode.with(new MapNodeImpl(FLOW, \"\/\/stack map frame @\" + bci)\n+                                .with(((MapNodeImpl)frame).values().toArray(new Node[2])));\n@@ -764,1 +783,5 @@\n-                            codeNode.with(map(\"\/\/try block \" + (i + 1) + \" start\", \"start\", exc.start(), \"end\", exc.end(), \"handler\", exc.handler(), \"catch type\", exc.catchType()));\n+                            codeNode.with(map(\"\/\/try block \" + (i + 1) + \" start\",\n+                                    \"start\", exc.start(),\n+                                    \"end\", exc.end(),\n+                                    \"handler\", exc.handler(),\n+                                    \"catch type\", exc.catchType()));\n@@ -767,1 +790,5 @@\n-                            codeNode.with(map(\"\/\/try block \" + (i + 1) + \" end\", \"start\", exc.start(), \"end\", exc.end(), \"handler\", exc.handler(), \"catch type\", exc.catchType()));\n+                            codeNode.with(map(\"\/\/try block \" + (i + 1) + \" end\",\n+                                    \"start\", exc.start(),\n+                                    \"end\", exc.end(),\n+                                    \"handler\", exc.handler(),\n+                                    \"catch type\", exc.catchType()));\n@@ -770,1 +797,5 @@\n-                            codeNode.with(map(\"\/\/exception handler \" + (i + 1) + \" start\", \"start\", exc.start(), \"end\", exc.end(), \"handler\", exc.handler(), \"catch type\", exc.catchType()));\n+                            codeNode.with(map(\"\/\/exception handler \" + (i + 1) + \" start\",\n+                                    \"start\", exc.start(),\n+                                    \"end\", exc.end(),\n+                                    \"handler\", exc.handler(),\n+                                    \"catch type\", exc.catchType()));\n@@ -819,1 +850,3 @@\n-                                \"targets\", \"target\", Stream.concat(Stream.of(si.defaultTarget()).map(com::labelToBci), si.cases().stream().map(sc -> com.labelToBci(sc.target())))));\n+                                \"targets\", \"target\", Stream.concat(Stream.of(si.defaultTarget())\n+                                        .map(com::labelToBci), si.cases().stream()\n+                                                .map(sc -> com.labelToBci(sc.target())))));\n@@ -821,1 +854,3 @@\n-                                \"targets\", \"target\", Stream.concat(Stream.of(si.defaultTarget()).map(com::labelToBci), si.cases().stream().map(sc -> com.labelToBci(sc.target())))));\n+                                \"targets\", \"target\", Stream.concat(Stream.of(si.defaultTarget())\n+                                        .map(com::labelToBci), si.cases().stream()\n+                                                .map(sc -> com.labelToBci(sc.target())))));\n@@ -832,1 +867,5 @@\n-                    handlersNode.with(map(\"handler \" + (i + 1), \"start\", exc.start(), \"end\", exc.end(), \"handler\", exc.handler(), \"type\", exc.catchType()));\n+                    handlersNode.with(map(\"handler \" + (i + 1),\n+                            \"start\", exc.start(),\n+                            \"end\", exc.end(),\n+                            \"handler\", exc.handler(),\n+                            \"type\", exc.catchType()));\n@@ -850,1 +889,2 @@\n-                                \"kind\", DirectMethodHandleDesc.Kind.valueOf(mh.kind(), mref instanceof InterfaceMethodRefEntry).name(),\n+                                \"kind\", DirectMethodHandleDesc.Kind.valueOf(mh.kind(),\n+                                        mref instanceof InterfaceMethodRefEntry).name(),\n@@ -860,1 +900,2 @@\n-                    nodes.add(list(\"nest members\", \"member\", nma.nestMembers().stream().map(mp -> mp.name().stringValue())));\n+                    nodes.add(list(\"nest members\", \"member\", nma.nestMembers().stream()\n+                            .map(mp -> mp.name().stringValue())));\n@@ -862,1 +903,2 @@\n-                    nodes.add(list(\"permitted subclasses\", \"subclass\", psa.permittedSubclasses().stream().map(e -> e.name().stringValue())));\n+                    nodes.add(list(\"permitted subclasses\", \"subclass\", psa.permittedSubclasses().stream()\n+                            .map(e -> e.name().stringValue())));\n@@ -869,2 +911,4 @@\n-                            \"method name\", ema.enclosingMethodName().map(Utf8Entry::stringValue).orElse(\"null\"),\n-                            \"method type\", ema.enclosingMethodType().map(Utf8Entry::stringValue).orElse(\"null\")));\n+                            \"method name\", ema.enclosingMethodName()\n+                                    .map(Utf8Entry::stringValue).orElse(\"null\"),\n+                            \"method type\", ema.enclosingMethodType()\n+                                    .map(Utf8Entry::stringValue).orElse(\"null\")));\n@@ -872,1 +916,2 @@\n-                    nodes.add(list(\"excceptions\", \"exc\", exa.exceptions().stream().map(e -> e.name().stringValue())));\n+                    nodes.add(list(\"excceptions\", \"exc\", exa.exceptions().stream()\n+                            .map(e -> e.name().stringValue())));\n@@ -874,2 +919,2 @@\n-                    nodes.add(new ListNodeImpl(BLOCK, \"inner classes\", ica.classes().stream().map(ic ->\n-                        new MapNodeImpl(FLOW, \"cls\").with(\n+                    nodes.add(new ListNodeImpl(BLOCK, \"inner classes\", ica.classes().stream()\n+                            .map(ic -> new MapNodeImpl(FLOW, \"cls\").with(\n@@ -877,1 +922,2 @@\n-                                leaf(\"outer class\", ic.outerClass().map(cle -> cle.name().stringValue()).orElse(\"null\")),\n+                                leaf(\"outer class\", ic.outerClass()\n+                                        .map(cle -> cle.name().stringValue()).orElse(\"null\")),\n@@ -892,1 +938,1 @@\n-                                  list(\"flags\", \"flag\", ma.moduleFlags().stream().map(AccessFlag::name)),\n+                                  list(\"flags\",\"flag\", ma.moduleFlags().stream().map(AccessFlag::name)),\n@@ -898,2 +944,4 @@\n-                                            list(\"flags\", \"flag\", req.requiresFlags().stream().map(AccessFlag::name)),\n-                                            leaf(\"version\", req.requiresVersion().map(Utf8Entry::stringValue).orElse(null))))),\n+                                            list(\"flags\", \"flag\", req.requiresFlags().stream()\n+                                                    .map(AccessFlag::name)),\n+                                            leaf(\"version\", req.requiresVersion()\n+                                                    .map(Utf8Entry::stringValue).orElse(null))))),\n@@ -903,2 +951,4 @@\n-                                            list(\"flags\", \"flag\", exp.exportsFlags().stream().map(AccessFlag::name)),\n-                                            list(\"to\", \"module\", exp.exportsTo().stream().map(me -> me.name().stringValue()))))),\n+                                            list(\"flags\", \"flag\", exp.exportsFlags().stream()\n+                                                    .map(AccessFlag::name)),\n+                                            list(\"to\", \"module\", exp.exportsTo().stream()\n+                                                    .map(me -> me.name().stringValue()))))),\n@@ -908,6 +958,9 @@\n-                                            list(\"flags\", \"flag\", opn.opensFlags().stream().map(AccessFlag::name)),\n-                                            list(\"to\", \"module\", opn.opensTo().stream().map(me -> me.name().stringValue()))))),\n-                                  new ListNodeImpl(BLOCK, \"provides\", ma.provides().stream().map(prov ->\n-                                    new MapNodeImpl(FLOW, \"prov\").with(\n-                                            leaf(\"class\", prov.provides().name().stringValue()),\n-                                            list(\"with\", \"cls\", prov.providesWith().stream().map(ce -> ce.name().stringValue())))))));\n+                                            list(\"flags\", \"flag\", opn.opensFlags().stream()\n+                                                    .map(AccessFlag::name)),\n+                                            list(\"to\", \"module\", opn.opensTo().stream()\n+                                                    .map(me -> me.name().stringValue()))))),\n+                                  new ListNodeImpl(BLOCK, \"provides\", ma.provides().stream()\n+                                          .map(prov -> new MapNodeImpl(FLOW, \"prov\").with(\n+                                                  leaf(\"class\", prov.provides().name().stringValue()),\n+                                                  list(\"with\", \"cls\", prov.providesWith().stream()\n+                                                          .map(ce -> ce.name().stringValue())))))));\n@@ -915,1 +968,2 @@\n-                    nodes.add(list(\"module packages\", \"subclass\", mopa.packages().stream().map(mp -> mp.asSymbol().packageName())));\n+                    nodes.add(list(\"module packages\", \"subclass\", mopa.packages().stream()\n+                            .map(mp -> mp.asSymbol().packageName())));\n@@ -919,7 +973,8 @@\n-                    nodes.add(new ListNodeImpl(BLOCK, \"record components\", ra.components().stream().map(rc ->\n-                            new MapNodeImpl(BLOCK, \"record\")\n-                                .with(leafs(\n-                                    \"name\", rc.name().stringValue(),\n-                                    \"type\", rc.descriptor().stringValue()))\n-                                .with(list(\"attributes\", \"attribute\", rc.attributes().stream().map(Attribute::attributeName)))\n-                                .with(attributesToTree(rc.attributes(), verbosity)))));\n+                    nodes.add(new ListNodeImpl(BLOCK, \"record components\", ra.components().stream()\n+                            .map(rc -> new MapNodeImpl(BLOCK, \"record\")\n+                                    .with(leafs(\n+                                        \"name\", rc.name().stringValue(),\n+                                        \"type\", rc.descriptor().stringValue()))\n+                                    .with(list(\"attributes\", \"attribute\", rc.attributes().stream()\n+                                            .map(Attribute::attributeName)))\n+                                    .with(attributesToTree(rc.attributes(), verbosity)))));\n@@ -995,3 +1050,6 @@\n-            case TypeAnnotation.OffsetTarget ot -> consumer.accept(lr.labelToBci(ot.target()), ta);\n-            case TypeAnnotation.TypeArgumentTarget tat -> consumer.accept(lr.labelToBci(tat.target()), ta);\n-            case TypeAnnotation.LocalVarTarget lvt -> lvt.table().forEach(lvti -> consumer.accept(lr.labelToBci(lvti.startLabel()), ta));\n+            case TypeAnnotation.OffsetTarget ot ->\n+                consumer.accept(lr.labelToBci(ot.target()), ta);\n+            case TypeAnnotation.TypeArgumentTarget tat ->\n+                consumer.accept(lr.labelToBci(tat.target()), ta);\n+            case TypeAnnotation.LocalVarTarget lvt ->\n+                lvt.table().forEach(lvti -> consumer.accept(lr.labelToBci(lvti.startLabel()), ta));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":140,"deletions":82,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -649,0 +649,1 @@\n+            \/\/critical JDK bootstrap path, cannot use lambda here\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}