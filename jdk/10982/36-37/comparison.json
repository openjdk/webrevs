{"files":[{"patch":"@@ -93,1 +93,1 @@\n- * code can be specified abstractly (by passing a {@link CodeElement} to {@link\n+ * code can be specified abstractly, by passing a {@link CodeElement} to {@link\n@@ -158,1 +158,1 @@\n-     * Builds code fragment generated by the handler and synchronously transformed.\n+     * Apply a transform to the code built by a handler, directing results to this builder.\n@@ -160,3 +160,3 @@\n-     * @param transform the transform to apply to the code generated by the handler\n-     * @param handler handler that receives a {@linkplain CodeBuilder} to\n-     * generate the code.\n+     * @param transform the transform to apply to the code built by the handler\n+     * @param handler the handler that receives a {@linkplain CodeBuilder} to\n+     * build the code.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        return new AbstractPseudoInstruction.ExceptionCatchImpl(handler, tryStart, tryEnd, catchTypeEntry);\n+        return new AbstractPseudoInstruction.ExceptionCatchImpl(handler, tryStart, tryEnd, catchTypeEntry.orElse(null));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ExceptionCatch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}