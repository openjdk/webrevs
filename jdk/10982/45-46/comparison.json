{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import jdk.internal.classfile.impl.Util;\n@@ -65,1 +64,1 @@\n-        return new UnboundAttribute.UnboundModuleMainClassAttribute(TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(mainClass))));\n+        return new UnboundAttribute.UnboundModuleMainClassAttribute(TemporaryConstantPool.INSTANCE.classEntry(mainClass));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleMainClassAttribute.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        return of(TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(provides))), Util.entryList(providesWith));\n+        return of(TemporaryConstantPool.INSTANCE.classEntry(provides), Util.entryList(providesWith));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleProvideInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-        return classEntry(utf8Entry(Util.toInternalName(classDesc)));\n+        return classEntry(utf8Entry(classDesc.isArray() ? classDesc.descriptorString() : Util.toInternalName(classDesc)));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,51 +53,19 @@\n-        for (Opcode o : List.of(Opcode.NOP))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = NopInstruction.of();\n-        for (Opcode o : List.of(Opcode.ACONST_NULL,\n-                                Opcode.ICONST_M1,\n-                                Opcode.ICONST_0, Opcode.ICONST_1, Opcode.ICONST_2, Opcode.ICONST_3, Opcode.ICONST_4, Opcode.ICONST_5,\n-                                Opcode.LCONST_0, Opcode.LCONST_1,\n-                                Opcode.FCONST_0, Opcode.FCONST_1, Opcode.FCONST_2,\n-                                Opcode.DCONST_0, Opcode.DCONST_1))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = ConstantInstruction.ofIntrinsic(o);\n-        for (Opcode o : List.of(Opcode.ILOAD_0, Opcode.ILOAD_1, Opcode.ILOAD_2, Opcode.ILOAD_3,\n-                                Opcode.LLOAD_0, Opcode.LLOAD_1, Opcode.LLOAD_2, Opcode.LLOAD_3,\n-                                Opcode.FLOAD_0, Opcode.FLOAD_1, Opcode.FLOAD_2, Opcode.FLOAD_3,\n-                                Opcode.DLOAD_0, Opcode.DLOAD_1, Opcode.DLOAD_2, Opcode.DLOAD_3,\n-                                Opcode.ALOAD_0, Opcode.ALOAD_1, Opcode.ALOAD_2, Opcode.ALOAD_3))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = LoadInstruction.of(o, o.slot());\n-        for (Opcode o : List.of(Opcode.ISTORE_0, Opcode.ISTORE_1, Opcode.ISTORE_2, Opcode.ISTORE_3,\n-                                Opcode.LSTORE_0, Opcode.LSTORE_1, Opcode.LSTORE_2, Opcode.LSTORE_3,\n-                                Opcode.FSTORE_0, Opcode.FSTORE_1, Opcode.FSTORE_2, Opcode.FSTORE_3,\n-                                Opcode.DSTORE_0, Opcode.DSTORE_1, Opcode.DSTORE_2, Opcode.DSTORE_3,\n-                                Opcode.ASTORE_0, Opcode.ASTORE_1, Opcode.ASTORE_2, Opcode.ASTORE_3))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = StoreInstruction.of(o, o.slot());\n-        for (Opcode o : List.of(Opcode.IALOAD, Opcode.LALOAD, Opcode.FALOAD, Opcode.DALOAD, Opcode.AALOAD, Opcode.BALOAD, Opcode.CALOAD, Opcode.SALOAD))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = ArrayLoadInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.IASTORE, Opcode.LASTORE, Opcode.FASTORE, Opcode.DASTORE, Opcode.AASTORE, Opcode.BASTORE, Opcode.CASTORE, Opcode.SASTORE))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = ArrayStoreInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.POP, Opcode.POP2, Opcode.DUP, Opcode.DUP_X1, Opcode.DUP_X2, Opcode.DUP2, Opcode.DUP2_X1, Opcode.DUP2_X2, Opcode.SWAP))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = StackInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.IADD, Opcode.LADD, Opcode.FADD, Opcode.DADD, Opcode.ISUB,\n-                                Opcode.LSUB, Opcode.FSUB, Opcode.DSUB,\n-                                Opcode.IMUL, Opcode.LMUL, Opcode.FMUL, Opcode.DMUL,\n-                                Opcode.IDIV, Opcode.LDIV, Opcode.FDIV, Opcode.DDIV,\n-                                Opcode.IREM, Opcode.LREM, Opcode.FREM, Opcode.DREM,\n-                                Opcode.INEG, Opcode.LNEG, Opcode.FNEG, Opcode.DNEG,\n-                                Opcode.ISHL, Opcode.LSHL, Opcode.ISHR, Opcode.LSHR, Opcode.IUSHR, Opcode.LUSHR,\n-                                Opcode.IAND, Opcode.LAND, Opcode.IOR, Opcode.LOR, Opcode.IXOR, Opcode.LXOR,\n-                                Opcode.LCMP, Opcode.FCMPL, Opcode.FCMPG, Opcode.DCMPL, Opcode.DCMPG,\n-                                Opcode.ARRAYLENGTH))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = OperatorInstruction.of(o);\n-\n-        for (Opcode o : List.of(Opcode.I2L, Opcode.I2F, Opcode.I2D,\n-                                Opcode.L2I, Opcode.L2F, Opcode.L2D,\n-                                Opcode.F2I, Opcode.F2L, Opcode.F2D,\n-                                Opcode.D2I, Opcode.D2L, Opcode.D2F,\n-                                Opcode.I2B, Opcode.I2C, Opcode.I2S))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = ConvertInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.IRETURN, Opcode.LRETURN, Opcode.FRETURN, Opcode.DRETURN, Opcode.ARETURN, Opcode.RETURN))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = ReturnInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.ATHROW))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = ThrowInstruction.of();\n-        for (Opcode o : List.of(Opcode.MONITORENTER, Opcode.MONITOREXIT))\n-            SINGLETON_INSTRUCTIONS[o.bytecode()] = MonitorInstruction.of(o);\n+        for (var o : Opcode.values()) {\n+            if (o.sizeIfFixed() == 1) {\n+                SINGLETON_INSTRUCTIONS[o.bytecode()] = switch (o.kind()) {\n+                    case ARRAY_LOAD -> ArrayLoadInstruction.of(o);\n+                    case ARRAY_STORE -> ArrayStoreInstruction.of(o);\n+                    case CONSTANT -> ConstantInstruction.ofIntrinsic(o);\n+                    case CONVERT -> ConvertInstruction.of(o);\n+                    case LOAD -> LoadInstruction.of(o, o.slot());\n+                    case MONITOR -> MonitorInstruction.of(o);\n+                    case NOP -> NopInstruction.of();\n+                    case OPERATOR -> OperatorInstruction.of(o);\n+                    case RETURN -> ReturnInstruction.of(o);\n+                    case STACK -> StackInstruction.of(o);\n+                    case STORE -> StoreInstruction.of(o, o.slot());\n+                    case THROW_EXCEPTION -> ThrowInstruction.of();\n+                    default -> throw new AssertionError(\"invalid opcode: \" + o);\n+                };\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":19,"deletions":51,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-        return uses(TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(service))));\n+        return uses(TemporaryConstantPool.INSTANCE.classEntry(service));\n@@ -145,2 +145,2 @@\n-            impls.add(TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(seq))));\n-        return provides(ModuleProvideInfo.of(TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(service))), impls));\n+            impls.add(TemporaryConstantPool.INSTANCE.classEntry(seq));\n+        return provides(ModuleProvideInfo.of(TemporaryConstantPool.INSTANCE.classEntry(service), impls));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ModuleAttributeBuilderImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -162,1 +162,0 @@\n-            case '[' -> desc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        return of(op, TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(type))));\n+        return of(op, TemporaryConstantPool.INSTANCE.classEntry(type));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/TypeCheckInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}