{"files":[{"patch":"@@ -465,1 +465,1 @@\n-        throw new IllegalArgumentException(\"Illegal annotation constant value type \" + value.getClass());\n+        throw new IllegalArgumentException(\"Illegal annotation constant value type \" + (value == null ? null : value.getClass()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AnnotationValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-                    return new BoundAttribute.BoundAnnotationDefaultAttr(e, cf, this, p);\n+                    return new BoundAttribute.BoundAnnotationDefaultAttr(cf, this, p);\n@@ -153,1 +153,1 @@\n-                    return new BoundAttribute.BoundBootstrapMethodsAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundBootstrapMethodsAttribute(cf, this, p);\n@@ -167,1 +167,1 @@\n-                    return new BoundAttribute.BoundCharacterRangeTableAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundCharacterRangeTableAttribute(cf, this, p);\n@@ -204,1 +204,1 @@\n-                    return new BoundAttribute.BoundCompilationIDAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundCompilationIDAttribute(cf, this, p);\n@@ -218,1 +218,1 @@\n-                    return new BoundAttribute.BoundConstantValueAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundConstantValueAttribute(cf, this, p);\n@@ -232,1 +232,1 @@\n-                    return new BoundAttribute.BoundDeprecatedAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundDeprecatedAttribute(cf, this, p);\n@@ -246,1 +246,1 @@\n-                    return new BoundAttribute.BoundEnclosingMethodAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundEnclosingMethodAttribute(cf, this, p);\n@@ -261,1 +261,1 @@\n-                    return new BoundAttribute.BoundExceptionsAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundExceptionsAttribute(cf, this, p);\n@@ -275,1 +275,1 @@\n-                    return new BoundAttribute.BoundInnerClassesAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundInnerClassesAttribute(cf, this, p);\n@@ -296,1 +296,1 @@\n-                    return new BoundAttribute.BoundLineNumberTableAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundLineNumberTableAttribute(cf, this, p);\n@@ -359,1 +359,1 @@\n-                    return new BoundAttribute.BoundMethodParametersAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundMethodParametersAttribute(cf, this, p);\n@@ -378,1 +378,1 @@\n-            return new BoundAttribute.BoundModuleAttribute(e, cf, this, p);\n+            return new BoundAttribute.BoundModuleAttribute(cf, this, p);\n@@ -418,1 +418,1 @@\n-                    return new BoundAttribute.BoundModuleHashesAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundModuleHashesAttribute(cf, this, p);\n@@ -439,1 +439,1 @@\n-                    return new BoundAttribute.BoundModuleMainClassAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundModuleMainClassAttribute(cf, this, p);\n@@ -453,1 +453,1 @@\n-                    return new BoundAttribute.BoundModulePackagesAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundModulePackagesAttribute(cf, this, p);\n@@ -467,1 +467,1 @@\n-                    return new BoundAttribute.BoundModuleResolutionAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundModuleResolutionAttribute(cf, this, p);\n@@ -481,1 +481,1 @@\n-                    return new BoundAttribute.BoundModuleTargetAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundModuleTargetAttribute(cf, this, p);\n@@ -495,1 +495,1 @@\n-                    return new BoundAttribute.BoundNestHostAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundNestHostAttribute(cf, this, p);\n@@ -509,1 +509,1 @@\n-                    return new BoundAttribute.BoundNestMembersAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundNestMembersAttribute(cf, this, p);\n@@ -523,1 +523,1 @@\n-                    return new BoundAttribute.BoundPermittedSubclassesAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundPermittedSubclassesAttribute(cf, this, p);\n@@ -537,1 +537,1 @@\n-                    return new BoundAttribute.BoundRecordAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundRecordAttribute(cf, this, p);\n@@ -571,1 +571,1 @@\n-                    return new BoundAttribute.BoundRuntimeInvisibleParameterAnnotationsAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundRuntimeInvisibleParameterAnnotationsAttribute(cf, this, p);\n@@ -616,1 +616,1 @@\n-                    return new BoundAttribute.BoundRuntimeVisibleParameterAnnotationsAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundRuntimeVisibleParameterAnnotationsAttribute(cf, this, p);\n@@ -647,1 +647,1 @@\n-                    return new BoundAttribute.BoundSignatureAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundSignatureAttribute(cf, this, p);\n@@ -661,1 +661,1 @@\n-                    return new BoundAttribute.BoundSourceDebugExtensionAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundSourceDebugExtensionAttribute(cf, this, p);\n@@ -675,1 +675,1 @@\n-                    return new BoundAttribute.BoundSourceFileAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundSourceFileAttribute(cf, this, p);\n@@ -689,1 +689,1 @@\n-                    return new BoundAttribute.BoundSourceIDAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundSourceIDAttribute(cf, this, p);\n@@ -718,1 +718,1 @@\n-                    return new BoundAttribute.BoundSyntheticAttribute(e, cf, this, p);\n+                    return new BoundAttribute.BoundSyntheticAttribute(cf, this, p);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-import jdk.internal.classfile.impl.LineNumberImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldTransform.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-        private Map<Label, Stack> map = new HashMap<>();\n+        private final Map<Label, Stack> map = new HashMap<>();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeStackTracker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantDynamicEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-        throw new IllegalArgumentException(\"Illegal type: \" + c.getClass());\n+        throw new IllegalArgumentException(\"Illegal type: \" + (c == null ? null : c.getClass()));\n@@ -510,1 +510,1 @@\n-        throw new IllegalArgumentException(\"Illegal type: \" + c.getClass());\n+        throw new IllegalArgumentException(\"Illegal type: \" + (c == null ? null : c.getClass()));\n@@ -529,1 +529,1 @@\n-        throw new IllegalArgumentException(\"Illegal type: \" + c.getClass());\n+        throw new IllegalArgumentException(\"Illegal type: \" + (c == null ? null : c.getClass()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantValueEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/DoubleEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/FloatEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/IntegerEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/LongEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+    @Override\n@@ -82,0 +83,1 @@\n+    @Override\n@@ -91,0 +93,1 @@\n+    @Override\n@@ -107,0 +110,1 @@\n+        @Override\n@@ -358,0 +362,1 @@\n+        @Override\n@@ -387,0 +392,1 @@\n+        @Override\n@@ -426,0 +432,1 @@\n+        @Override\n@@ -465,0 +472,1 @@\n+        @Override\n@@ -494,0 +502,1 @@\n+        @Override\n@@ -522,0 +531,1 @@\n+        @Override\n@@ -540,0 +550,1 @@\n+        @Override\n@@ -570,0 +581,1 @@\n+        @Override\n@@ -597,0 +609,1 @@\n+        @Override\n@@ -677,0 +690,1 @@\n+\n@@ -681,4 +695,0 @@\n-        public UnboundInstruction(Opcode op, int size) {\n-            super(op, size);\n-        }\n-\n@@ -1030,0 +1040,1 @@\n+        @Override\n@@ -1054,0 +1065,1 @@\n+        @Override\n@@ -1078,0 +1090,1 @@\n+        @Override\n@@ -1110,0 +1123,1 @@\n+        @Override\n@@ -1161,0 +1175,1 @@\n+        @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+    @Override\n@@ -287,1 +288,1 @@\n-                            char v = (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));\n+                            char v = (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F));\n@@ -495,0 +496,1 @@\n+        @Override\n@@ -545,0 +547,1 @@\n+        @Override\n@@ -922,0 +925,1 @@\n+        @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-            this.values = List.copyOf(values);;\n+            this.values = List.copyOf(values);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-    public static List<List<Annotation>> readParameterAnnotations(ClassReader classReader, int p, boolean isVisible) {\n+    public static List<List<Annotation>> readParameterAnnotations(ClassReader classReader, int p) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.ListIterator;\n@@ -70,4 +69,0 @@\n-\n-    List<? extends Attribute<?>> attributes() {\n-        return attributes;\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHolder.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-        public BoundSyntheticAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<SyntheticAttribute> mapper, int pos) {\n+        public BoundSyntheticAttribute(ClassReader cf, AttributeMapper<SyntheticAttribute> mapper, int pos) {\n@@ -246,1 +246,1 @@\n-        public BoundLineNumberTableAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<LineNumberTableAttribute> mapper, int pos) {\n+        public BoundLineNumberTableAttribute(ClassReader cf, AttributeMapper<LineNumberTableAttribute> mapper, int pos) {\n@@ -271,1 +271,1 @@\n-        public BoundCharacterRangeTableAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<CharacterRangeTableAttribute> mapper, int pos) {\n+        public BoundCharacterRangeTableAttribute(ClassReader cf, AttributeMapper<CharacterRangeTableAttribute> mapper, int pos) {\n@@ -354,1 +354,1 @@\n-        public BoundMethodParametersAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<MethodParametersAttribute> mapper, int pos) {\n+        public BoundMethodParametersAttribute(ClassReader cf, AttributeMapper<MethodParametersAttribute> mapper, int pos) {\n@@ -380,1 +380,1 @@\n-        public BoundModuleHashesAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ModuleHashesAttribute> mapper, int pos) {\n+        public BoundModuleHashesAttribute(ClassReader cf, AttributeMapper<ModuleHashesAttribute> mapper, int pos) {\n@@ -414,1 +414,1 @@\n-        public BoundRecordAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<RecordAttribute> mapper, int pos) {\n+        public BoundRecordAttribute(ClassReader cf, AttributeMapper<RecordAttribute> mapper, int pos) {\n@@ -425,3 +425,2 @@\n-                    int endP = classReader.skipAttributeHolder(p + 4);\n-                    elements[i] = new BoundRecordComponentInfo(classReader, p, endP);\n-                    p = endP;\n+                    elements[i] = new BoundRecordComponentInfo(classReader, p);\n+                    p = classReader.skipAttributeHolder(p + 4);\n@@ -437,1 +436,1 @@\n-        public BoundDeprecatedAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<DeprecatedAttribute> mapper, int pos) {\n+        public BoundDeprecatedAttribute(ClassReader cf, AttributeMapper<DeprecatedAttribute> mapper, int pos) {\n@@ -444,1 +443,1 @@\n-        public BoundSignatureAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<SignatureAttribute> mapper, int pos) {\n+        public BoundSignatureAttribute(ClassReader cf, AttributeMapper<SignatureAttribute> mapper, int pos) {\n@@ -456,1 +455,1 @@\n-        public BoundSourceFileAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<SourceFileAttribute> mapper, int pos) {\n+        public BoundSourceFileAttribute(ClassReader cf, AttributeMapper<SourceFileAttribute> mapper, int pos) {\n@@ -468,1 +467,1 @@\n-        public BoundModuleMainClassAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ModuleMainClassAttribute> mapper, int pos) {\n+        public BoundModuleMainClassAttribute(ClassReader cf, AttributeMapper<ModuleMainClassAttribute> mapper, int pos) {\n@@ -480,1 +479,1 @@\n-        public BoundNestHostAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<NestHostAttribute> mapper, int pos) {\n+        public BoundNestHostAttribute(ClassReader cf, AttributeMapper<NestHostAttribute> mapper, int pos) {\n@@ -492,1 +491,1 @@\n-        public BoundSourceDebugExtensionAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<SourceDebugExtensionAttribute> mapper, int pos) {\n+        public BoundSourceDebugExtensionAttribute(ClassReader cf, AttributeMapper<SourceDebugExtensionAttribute> mapper, int pos) {\n@@ -499,1 +498,1 @@\n-        public BoundConstantValueAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ConstantValueAttribute> mapper, int pos) {\n+        public BoundConstantValueAttribute(ClassReader cf, AttributeMapper<ConstantValueAttribute> mapper, int pos) {\n@@ -512,1 +511,1 @@\n-        public BoundModuleTargetAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ModuleTargetAttribute> mapper, int pos) {\n+        public BoundModuleTargetAttribute(ClassReader cf, AttributeMapper<ModuleTargetAttribute> mapper, int pos) {\n@@ -524,1 +523,1 @@\n-        public BoundCompilationIDAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<CompilationIDAttribute> mapper, int pos) {\n+        public BoundCompilationIDAttribute(ClassReader cf, AttributeMapper<CompilationIDAttribute> mapper, int pos) {\n@@ -536,1 +535,1 @@\n-        public BoundSourceIDAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<SourceIDAttribute> mapper, int pos) {\n+        public BoundSourceIDAttribute(ClassReader cf, AttributeMapper<SourceIDAttribute> mapper, int pos) {\n@@ -548,1 +547,1 @@\n-        public BoundModuleResolutionAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ModuleResolutionAttribute> mapper, int pos) {\n+        public BoundModuleResolutionAttribute(ClassReader cf, AttributeMapper<ModuleResolutionAttribute> mapper, int pos) {\n@@ -562,1 +561,1 @@\n-        public BoundExceptionsAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ExceptionsAttribute> mapper, int pos) {\n+        public BoundExceptionsAttribute(ClassReader cf, AttributeMapper<ExceptionsAttribute> mapper, int pos) {\n@@ -583,1 +582,1 @@\n-        public BoundModuleAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ModuleAttribute> mapper, int pos) {\n+        public BoundModuleAttribute(ClassReader cf, AttributeMapper<ModuleAttribute> mapper, int pos) {\n@@ -710,1 +709,1 @@\n-        public BoundModulePackagesAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<ModulePackagesAttribute> mapper, int pos) {\n+        public BoundModulePackagesAttribute(ClassReader cf, AttributeMapper<ModulePackagesAttribute> mapper, int pos) {\n@@ -728,1 +727,1 @@\n-        public BoundNestMembersAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<NestMembersAttribute> mapper, int pos) {\n+        public BoundNestMembersAttribute(ClassReader cf, AttributeMapper<NestMembersAttribute> mapper, int pos) {\n@@ -747,1 +746,1 @@\n-        public BoundBootstrapMethodsAttribute(AttributedElement enclosing, ClassReader reader, AttributeMapper<BootstrapMethodsAttribute> mapper, int pos) {\n+        public BoundBootstrapMethodsAttribute(ClassReader reader, AttributeMapper<BootstrapMethodsAttribute> mapper, int pos) {\n@@ -780,1 +779,1 @@\n-        public BoundInnerClassesAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<InnerClassesAttribute> mapper, int pos) {\n+        public BoundInnerClassesAttribute(ClassReader cf, AttributeMapper<InnerClassesAttribute> mapper, int pos) {\n@@ -812,1 +811,1 @@\n-        public BoundEnclosingMethodAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<EnclosingMethodAttribute> mapper, int pos) {\n+        public BoundEnclosingMethodAttribute(ClassReader cf, AttributeMapper<EnclosingMethodAttribute> mapper, int pos) {\n@@ -832,1 +831,1 @@\n-        public BoundAnnotationDefaultAttr(AttributedElement enclosing, ClassReader cf, AttributeMapper<AnnotationDefaultAttribute> mapper, int pos) {\n+        public BoundAnnotationDefaultAttr(ClassReader cf, AttributeMapper<AnnotationDefaultAttribute> mapper, int pos) {\n@@ -879,1 +878,0 @@\n-        private final AttributedElement enclosing;\n@@ -881,1 +879,1 @@\n-        public BoundRuntimeVisibleParameterAnnotationsAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<RuntimeVisibleParameterAnnotationsAttribute> mapper, int pos) {\n+        public BoundRuntimeVisibleParameterAnnotationsAttribute(ClassReader cf, AttributeMapper<RuntimeVisibleParameterAnnotationsAttribute> mapper, int pos) {\n@@ -883,1 +881,0 @@\n-            this.enclosing = enclosing;\n@@ -888,1 +885,1 @@\n-            return AnnotationReader.readParameterAnnotations(classReader, payloadStart, true);\n+            return AnnotationReader.readParameterAnnotations(classReader, payloadStart);\n@@ -895,1 +892,0 @@\n-        private final AttributedElement enclosing;\n@@ -897,1 +893,1 @@\n-        public BoundRuntimeInvisibleParameterAnnotationsAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<RuntimeInvisibleParameterAnnotationsAttribute> mapper, int pos) {\n+        public BoundRuntimeInvisibleParameterAnnotationsAttribute(ClassReader cf, AttributeMapper<RuntimeInvisibleParameterAnnotationsAttribute> mapper, int pos) {\n@@ -899,1 +895,0 @@\n-            this.enclosing = enclosing;\n@@ -904,1 +899,1 @@\n-            return AnnotationReader.readParameterAnnotations(classReader, payloadStart, false);\n+            return AnnotationReader.readParameterAnnotations(classReader, payloadStart);\n@@ -948,1 +943,1 @@\n-        public BoundPermittedSubclassesAttribute(AttributedElement enclosing, ClassReader cf, AttributeMapper<PermittedSubclassesAttribute> mapper, int pos) {\n+        public BoundPermittedSubclassesAttribute(ClassReader cf, AttributeMapper<PermittedSubclassesAttribute> mapper, int pos) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":32,"deletions":37,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    private final int startPos, endPos, attributesPos;\n+    private final int startPos, attributesPos;\n@@ -41,1 +41,1 @@\n-    public BoundRecordComponentInfo(ClassReader reader, int startPos, int endPos) {\n+    public BoundRecordComponentInfo(ClassReader reader, int startPos) {\n@@ -44,1 +44,0 @@\n-        this.endPos = endPos;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundRecordComponentInfo.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n@@ -52,1 +51,1 @@\n-    private final List<MethodElement> elements = new ArrayList<>();\n+    private final List<MethodElement> elements;\n@@ -54,1 +53,0 @@\n-    private final ClassEntry thisClass;\n@@ -62,1 +60,0 @@\n-                                 ClassEntry thisClass,\n@@ -66,0 +63,1 @@\n+        this.elements = new ArrayList<>();\n@@ -67,1 +65,0 @@\n-        this.thisClass = thisClass;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        return downstream.with(new BufferedMethodBuilder(terminal.constantPool, terminal.thisClassEntry,\n+        return downstream.with(new BufferedMethodBuilder(terminal.constantPool,\n@@ -92,1 +92,1 @@\n-        BufferedMethodBuilder builder = new BufferedMethodBuilder(terminal.constantPool, terminal.thisClassEntry,\n+        BufferedMethodBuilder builder = new BufferedMethodBuilder(terminal.constantPool,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -697,1 +697,1 @@\n-                } else if (verbosity == Verbosity.TRACE_ALL) switch (attr) {\n+                } else if (verbosity == Verbosity.TRACE_ALL && attr != null) switch (attr) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+    @Override\n@@ -201,0 +202,1 @@\n+    @Override\n@@ -207,0 +209,1 @@\n+    @Override\n@@ -211,0 +214,1 @@\n+    @Override\n@@ -217,0 +221,1 @@\n+    @Override\n@@ -222,1 +227,1 @@\n-        return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0);\n+        return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + ch4;\n@@ -225,0 +230,1 @@\n+    @Override\n@@ -229,1 +235,1 @@\n-               ((buffer[p + 7] & 255) << 0);\n+               (buffer[p + 7] & 255);\n@@ -232,0 +238,1 @@\n+    @Override\n@@ -236,0 +243,1 @@\n+    @Override\n@@ -240,0 +248,1 @@\n+    @Override\n@@ -244,0 +253,1 @@\n+    @Override\n@@ -264,1 +274,1 @@\n-            if (list.size() > 0) {\n+            if (!list.isEmpty()) {\n@@ -293,5 +303,0 @@\n-    WritableElement<BootstrapMethodsAttribute> bootstrapMethodsWriter() {\n-        return containedClass.findAttribute(Attributes.BOOTSTRAP_METHODS)\n-                             .orElse(null);\n-    }\n-\n@@ -304,0 +309,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-                stack = List.of(readVerificationTypeInfo(bci));\n+                stack = List.of(readVerificationTypeInfo());\n@@ -192,1 +192,1 @@\n-                    stack = List.of(readVerificationTypeInfo(bci));\n+                    stack = List.of(readVerificationTypeInfo());\n@@ -202,1 +202,1 @@\n-                        newLocals[i] = readVerificationTypeInfo(bci);\n+                        newLocals[i] = readVerificationTypeInfo();\n@@ -208,1 +208,1 @@\n-                        newLocals[i] = readVerificationTypeInfo(bci);\n+                        newLocals[i] = readVerificationTypeInfo();\n@@ -211,1 +211,1 @@\n-                        newStack[i] = readVerificationTypeInfo(bci);\n+                        newStack[i] = readVerificationTypeInfo();\n@@ -224,1 +224,1 @@\n-    private VerificationTypeInfo readVerificationTypeInfo(int bci) {\n+    private VerificationTypeInfo readVerificationTypeInfo() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-        return desc.replaceAll(\"\/\", \".\");\n+        return desc.replace('\/', '.');\n@@ -127,0 +127,1 @@\n+            @Override\n@@ -131,0 +132,1 @@\n+            @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-class VerificationBytecodes {\n+final class VerificationBytecodes {\n@@ -40,1 +40,0 @@\n-            number_of_java_codes = 203,\n@@ -87,4 +86,0 @@\n-    static int length_for(int code) {\n-        return is_valid(code) ? _lengths[code] & 0xf : -1;\n-    }\n-\n@@ -137,9 +132,0 @@\n-    static int raw_special_length_at(byte bytecode[], int bci, int end) {\n-        int code = code_or_bp_at(bytecode, bci);\n-        if (code == _breakpoint) {\n-            return 1;\n-        } else {\n-            return special_length_at(code, bytecode, bci, end);\n-        }\n-    }\n-\n@@ -398,5 +384,0 @@\n-\n-    final int code;\n-    VerificationBytecodes(int code) {\n-        this.code = code;\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationBytecodes.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -155,2 +155,1 @@\n-        VerificationType top = _stack[--_stack_size];\n-        return top;\n+        return _stack[--_stack_size];\n@@ -208,3 +207,3 @@\n-        VerificationType[] stack = new VerificationType[1];\n-        VerificationFrame frame = new VerificationFrame(_offset, flags, _locals_size, 0, _max_locals, _max_stack, _locals, stack, _verifier);\n-        return frame;\n+        return new VerificationFrame(_offset, flags, _locals_size, 0,\n+                _max_locals, _max_stack, _locals, new VerificationType[1],\n+                _verifier);\n@@ -271,3 +270,1 @@\n-        for (int i = 0; i < len; i++) {\n-            _locals[i] = src.locals()[i];\n-        }\n+        if (len > 0) System.arraycopy(src.locals(), 0, _locals, 0, len);\n@@ -278,3 +275,1 @@\n-        for (int i = 0; i < len; i++) {\n-            _stack[i] = src.stack()[i];\n-        }\n+        if (len > 0) System.arraycopy(src.stack(), 0, _stack, 0, len);\n@@ -285,1 +280,1 @@\n-        for (i = 0; i < len; i++) {\n+        for (; i < len; i++) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationFrame.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -84,4 +84,1 @@\n-    static final char JVM_SIGNATURE_SLASH = '\/',\n-            JVM_SIGNATURE_DOT = '.',\n-            JVM_SIGNATURE_SPECIAL = '<',\n-            JVM_SIGNATURE_ENDSPECIAL = '>',\n+    static final char JVM_SIGNATURE_DOT = '.',\n@@ -93,1 +90,0 @@\n-            JVM_SIGNATURE_ENUM = 'E',\n@@ -104,4 +100,0 @@\n-    static boolean isJavaPrimitive(BasicType t) {\n-        return BasicType.T_BOOLEAN.type <= t.type && t.type <= BasicType.T_LONG.type;\n-    }\n-\n@@ -112,4 +104,0 @@\n-    static char type2Char(BasicType t) {\n-        return t.type < TYPE2CHAR_TAB.length ? TYPE2CHAR_TAB[t.type] : 0;\n-    }\n-\n@@ -142,4 +130,0 @@\n-    VerificationSignature(String signature, boolean is_method) {\n-        this(signature, is_method, null);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationSignature.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-        private VerificationWrapper.ConstantPoolWrapper _cp;\n+        private final VerificationWrapper.ConstantPoolWrapper _cp;\n@@ -149,2 +149,2 @@\n-        private byte[] _code_data;\n-        private int _code_length;\n+        private final byte[] _code_data;\n+        private final int _code_length;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationTable.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -116,3 +116,3 @@\n-                            Category1                    = (Category1Flag         << 1 * BitsPerByte) | Primitive,\n-                            Category2                    = (Category2Flag         << 1 * BitsPerByte) | Primitive,\n-                            Category2_2nd            = (Category2_2ndFlag << 1 * BitsPerByte) | Primitive,\n+                            Category1                    = (Category1Flag         << BitsPerByte) | Primitive,\n+                            Category2                    = (Category2Flag         << BitsPerByte) | Primitive,\n+                            Category2_2nd            = (Category2_2ndFlag << BitsPerByte) | Primitive,\n@@ -133,1 +133,1 @@\n-                            BciMask                        = 0xffff << 1 * BitsPerByte,\n+                            BciMask                        = 0xffff << BitsPerByte,\n@@ -137,4 +137,4 @@\n-                            ReferenceQuery         = (ReferenceFlag         << 1 * BitsPerByte) | TypeQuery,\n-                            Category1Query         = (Category1Flag         << 1 * BitsPerByte) | TypeQuery,\n-                            Category2Query         = (Category2Flag         << 1 * BitsPerByte) | TypeQuery,\n-                            Category2_2ndQuery = (Category2_2ndFlag << 1 * BitsPerByte) | TypeQuery;\n+                            ReferenceQuery         = (ReferenceFlag         << BitsPerByte) | TypeQuery,\n+                            Category1Query         = (Category1Flag         << BitsPerByte) | TypeQuery,\n+                            Category2Query         = (Category2Flag         << BitsPerByte) | TypeQuery,\n+                            Category2_2ndQuery = (Category2_2ndFlag << BitsPerByte) | TypeQuery;\n@@ -147,4 +147,0 @@\n-    VerificationType() {\n-        this(Bogus);\n-    }\n-\n@@ -152,1 +148,0 @@\n-            top_type = bogus_type,\n@@ -170,2 +165,1 @@\n-            category2_check = new VerificationType(Category2Query),\n-            category2_2nd_check = new VerificationType(Category2_2ndQuery);\n+            category2_check = new VerificationType(Category2Query);\n@@ -191,16 +185,0 @@\n-    boolean is_boolean() {\n-        return (_data == Boolean);\n-    }\n-\n-    boolean is_byte() {\n-        return (_data == Byte);\n-    }\n-\n-    boolean is_char() {\n-        return (_data == Char);\n-    }\n-\n-    boolean is_short() {\n-        return (_data == Short);\n-    }\n-\n@@ -215,4 +193,0 @@\n-    boolean is_float() {\n-        return (_data == Float);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationType.java","additions":9,"deletions":35,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -68,4 +68,0 @@\n-    ConstantPoolWrapper constantPool() {\n-        return cp;\n-    }\n-\n@@ -184,1 +180,2 @@\n-            return (e instanceof DynamicConstantPoolEntry de) ? de.nameAndType() : ((MemberRefEntry)e).nameAndType();\n+            return (e instanceof DynamicConstantPoolEntry de) ? de.nameAndType() :\n+                    e != null ? ((MemberRefEntry)e).nameAndType() : null;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationWrapper.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -70,4 +70,1 @@\n-static final char JVM_SIGNATURE_SLASH = '\/',\n-            JVM_SIGNATURE_DOT = '.',\n-            JVM_SIGNATURE_SPECIAL = '<',\n-            JVM_SIGNATURE_ENDSPECIAL = '>',\n+static final char JVM_SIGNATURE_SPECIAL = '<',\n@@ -78,2 +75,0 @@\n-            JVM_SIGNATURE_ENDCLASS = ';',\n-            JVM_SIGNATURE_ENUM = 'E',\n@@ -82,2 +77,0 @@\n-            JVM_SIGNATURE_FUNC = '(',\n-            JVM_SIGNATURE_ENDFUNC = ')',\n@@ -87,1 +80,0 @@\n-            JVM_SIGNATURE_VOID = 'V',\n@@ -173,4 +165,0 @@\n-\n-        void set_sig_verif_types(ArrayList<VerificationType> sig_verif_types) {\n-            _sig_verif_types = sig_verif_types;\n-        }\n@@ -190,4 +178,0 @@\n-    VerificationWrapper.MethodWrapper method() {\n-        return _method;\n-    }\n-\n@@ -303,0 +287,1 @@\n+            e.printStackTrace();\n@@ -1477,1 +1462,0 @@\n-        int bci = bcs.bci;\n@@ -1480,1 +1464,1 @@\n-            case Classfile.GETSTATIC: {\n+            case Classfile.GETSTATIC ->  {\n@@ -1484,1 +1468,0 @@\n-                break;\n@@ -1486,1 +1469,1 @@\n-            case Classfile.PUTSTATIC: {\n+            case Classfile.PUTSTATIC ->  {\n@@ -1490,1 +1473,0 @@\n-                break;\n@@ -1492,1 +1474,1 @@\n-            case Classfile.GETFIELD: {\n+            case Classfile.GETFIELD ->  {\n@@ -1498,1 +1480,0 @@\n-                break;\n@@ -1500,1 +1481,1 @@\n-            case Classfile.PUTFIELD: {\n+            case Classfile.PUTFIELD ->  {\n@@ -1514,1 +1495,0 @@\n-                break;\n@@ -1516,1 +1496,1 @@\n-            default: verifyError(\"Should not reach here\");\n+            default -> verifyError(\"Should not reach here\");\n@@ -1648,1 +1628,0 @@\n-            boolean subtype = false;\n@@ -1650,1 +1629,1 @@\n-            subtype = ref_class_type.is_assignable_from(current_type(), this);\n+            boolean subtype = ref_class_type.is_assignable_from(current_type(), this);\n@@ -1669,1 +1648,2 @@\n-                if (opcode == Classfile.INVOKESPECIAL) {\n+                switch (opcode) {\n+                    case Classfile.INVOKESPECIAL ->\n@@ -1671,5 +1651,4 @@\n-                } else if (opcode == Classfile.INVOKEVIRTUAL) {\n-                    VerificationType stack_object_type =\n-                        current_frame.pop_stack(ref_class_type);\n-                    if (current_type() != stack_object_type) {\n-                        String ref_class_name =\n+                    case Classfile.INVOKEVIRTUAL -> {\n+                        VerificationType stack_object_type =\n+                                current_frame.pop_stack(ref_class_type);\n+                        if (current_type() != stack_object_type) {\n@@ -1677,0 +1656,6 @@\n+                        }\n+                    }\n+                    default -> {\n+                        if (opcode != Classfile.INVOKEINTERFACE)\n+                            verifyError(\"Unexpected opcode encountered\");\n+                        current_frame.pop_stack(ref_class_type);\n@@ -1678,3 +1663,0 @@\n-                } else {\n-                    if (opcode != Classfile.INVOKEINTERFACE) verifyError(\"Unexpected opcode encountered\");\n-                    current_frame.pop_stack(ref_class_type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":20,"deletions":38,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+        @Override\n@@ -87,0 +88,1 @@\n+        @Override\n@@ -108,0 +110,1 @@\n+        @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ConstantInstruction.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}