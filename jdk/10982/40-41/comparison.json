{"files":[{"patch":"@@ -60,0 +60,1 @@\n+import jdk.internal.classfile.instruction.CharacterRange;\n@@ -67,0 +68,1 @@\n+import jdk.internal.classfile.instruction.LineNumber;\n@@ -68,0 +70,2 @@\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n@@ -85,1 +89,0 @@\n-import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n@@ -618,1 +621,1 @@\n-        with(LineNumberImpl.of(line));\n+        with(LineNumber.of(line));\n@@ -643,1 +646,1 @@\n-        with(new AbstractPseudoInstruction.UnboundCharacterRange(startScope, endScope, characterRangeStart, characterRangeEnd, flags));\n+        with(CharacterRange.of(startScope, endScope, characterRangeStart, characterRangeEnd, flags));\n@@ -648,2 +651,1 @@\n-        with(new AbstractPseudoInstruction.UnboundLocalVariable(slot, nameEntry, descriptorEntry,\n-                                                          startScope, endScope));\n+        with(LocalVariable.of(slot, nameEntry, descriptorEntry, startScope, endScope));\n@@ -661,2 +663,1 @@\n-        with(new AbstractPseudoInstruction.UnboundLocalVariableType(slot, nameEntry, signatureEntry,\n-                                                              startScope, endScope));\n+        with(LocalVariableType.of(slot, nameEntry, signatureEntry, startScope, endScope));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.classfile.instruction.CharacterRange;\n@@ -142,0 +143,7 @@\n+                case CharacterRange chr ->\n+                    cob.characterRange(\n+                            relabel(chr.startScope(), cob),\n+                            relabel(chr.endScope(), cob),\n+                            chr.characterRangeStart(),\n+                            chr.characterRangeEnd(),\n+                            chr.flags());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeRelabeler.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -88,0 +88,13 @@\n+\n+    \/**\n+     * {@return a character range pseudo-instruction}\n+     *\n+     * @param startScope the start of the instruction range\n+     * @param endScope the end of the instruction range\n+     * @param characterRangeStart the encoded start of the character range region (inclusive)\n+     * @param characterRangeEnd the encoded end of the character range region (exclusive)\n+     * @param flags a flags word, indicating the kind of range\n+     *\/\n+    static CharacterRange of(Label startScope, Label endScope, int characterRangeStart, int characterRangeEnd, int flags) {\n+        return new AbstractPseudoInstruction.UnboundCharacterRange(startScope, endScope, characterRangeStart, characterRangeEnd, flags);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/CharacterRange.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+\n+    \/**\n+     * {@return the line number}\n+     *\/\n@@ -45,0 +49,9 @@\n+\n+    \/**\n+     * {@return a line number pseudo-instruction}\n+     *\n+     * @param line the line number\n+     *\/\n+    static LineNumber of(int line) {\n+        return LineNumberImpl.of(line);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LineNumber.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -83,0 +84,30 @@\n+\n+    \/**\n+     * {@return a local variable pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param nameEntry the local variable name\n+     * @param descriptorEntry the local variable descriptor\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariable of(int slot, Utf8Entry nameEntry, Utf8Entry descriptorEntry, Label startScope, Label endScope) {\n+        return new AbstractPseudoInstruction.UnboundLocalVariable(slot, nameEntry, descriptorEntry,\n+                                                                  startScope, endScope);\n+    }\n+\n+    \/**\n+     * {@return a local variable pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param name the local variable name\n+     * @param descriptor the local variable descriptor\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariable of(int slot, String name, ClassDesc descriptor, Label startScope, Label endScope) {\n+        return of(slot,\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(name),\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(descriptor.descriptorString()),\n+                  startScope, endScope);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -80,0 +81,30 @@\n+\n+    \/**\n+     * {@return a local variable type pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param nameEntry the local variable name\n+     * @param signatureEntry the local variable signature\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariableType of(int slot, Utf8Entry nameEntry, Utf8Entry signatureEntry, Label startScope, Label endScope) {\n+        return new AbstractPseudoInstruction.UnboundLocalVariableType(slot, nameEntry, signatureEntry,\n+                                                                      startScope, endScope);\n+    }\n+\n+    \/**\n+     * {@return a local variable type pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param name the local variable name\n+     * @param signature the local variable signature\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariableType of(int slot, String name, Signature signature, Label startScope, Label endScope) {\n+        return of(slot,\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(name),\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(signature.signatureString()),\n+                  startScope, endScope);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"}]}