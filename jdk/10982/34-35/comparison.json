{"files":[{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.StackMapDecoder;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import static jdk.internal.classfile.Classfile.*;\n+\n+\/**\n+ * Models stack map frame of {@code StackMapTable} attribute {@jvms 4.7.4}.\n+ *\/\n+public sealed interface StackMapFrameInfo\n+            permits StackMapDecoder.StackMapFrameImpl {\n+\n+    int frameType();\n+    Label target();\n+    List<VerificationTypeInfo> locals();\n+    List<VerificationTypeInfo> stack();\n+\n+    public static StackMapFrameInfo of(Label target,\n+            List<VerificationTypeInfo> locals,\n+            List<VerificationTypeInfo> stack) {\n+\n+        return new StackMapDecoder.StackMapFrameImpl(255, target, locals, stack);\n+    }\n+\n+    \/**\n+     * The type of a stack value.\n+     *\/\n+    sealed interface VerificationTypeInfo {\n+        int tag();\n+    }\n+\n+    \/**\n+     * A simple stack value.\n+     *\/\n+    public enum SimpleVerificationTypeInfo implements VerificationTypeInfo {\n+        ITEM_TOP(VT_TOP),\n+        ITEM_INTEGER(VT_INTEGER),\n+        ITEM_FLOAT(VT_FLOAT),\n+        ITEM_DOUBLE(VT_DOUBLE),\n+        ITEM_LONG(VT_LONG),\n+        ITEM_NULL(VT_NULL),\n+        ITEM_UNINITIALIZED_THIS(VT_UNINITIALIZED_THIS);\n+\n+\n+        private final int tag;\n+\n+        SimpleVerificationTypeInfo(int tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public int tag() {\n+            return tag;\n+        }\n+    }\n+\n+    \/**\n+     * A stack value for an object type.\n+     *\/\n+    sealed interface ObjectVerificationTypeInfo extends VerificationTypeInfo\n+            permits StackMapDecoder.ObjectVerificationTypeInfoImpl {\n+\n+        public static ObjectVerificationTypeInfo of(ClassEntry className) {\n+            return new StackMapDecoder.ObjectVerificationTypeInfoImpl(className);\n+        }\n+\n+        public static ObjectVerificationTypeInfo of(ClassDesc classDesc) {\n+            return of(TemporaryConstantPool.INSTANCE.classEntry(classDesc));\n+        }\n+\n+        \/**\n+         * {@return the class of the value}\n+         *\/\n+        ClassEntry className();\n+\n+        default ClassDesc classSymbol() {\n+            return className().asSymbol();\n+        }\n+    }\n+\n+    \/**\n+     * An uninitialized stack value.\n+     *\/\n+    sealed interface UninitializedVerificationTypeInfo extends VerificationTypeInfo\n+            permits StackMapDecoder.UninitializedVerificationTypeInfoImpl {\n+        Label newTarget();\n+\n+        public static UninitializedVerificationTypeInfo of(Label newTarget) {\n+            return new StackMapDecoder.UninitializedVerificationTypeInfoImpl(newTarget);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapFrameInfo.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -33,2 +32,0 @@\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n@@ -36,2 +33,0 @@\n-import jdk.internal.classfile.impl.StackMapDecoder;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -39,1 +34,0 @@\n-import static jdk.internal.classfile.Classfile.*;\n@@ -57,87 +51,0 @@\n-\n-    \/**\n-     * The type of a stack value.\n-     *\/\n-    sealed interface VerificationTypeInfo {\n-        int tag();\n-    }\n-\n-    \/**\n-     * A simple stack value.\n-     *\/\n-    public enum SimpleVerificationTypeInfo implements VerificationTypeInfo {\n-        ITEM_TOP(VT_TOP),\n-        ITEM_INTEGER(VT_INTEGER),\n-        ITEM_FLOAT(VT_FLOAT),\n-        ITEM_DOUBLE(VT_DOUBLE),\n-        ITEM_LONG(VT_LONG),\n-        ITEM_NULL(VT_NULL),\n-        ITEM_UNINITIALIZED_THIS(VT_UNINITIALIZED_THIS);\n-\n-\n-        private final int tag;\n-\n-        SimpleVerificationTypeInfo(int tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public int tag() {\n-            return tag;\n-        }\n-    }\n-\n-    \/**\n-     * A stack value for an object type.\n-     *\/\n-    sealed interface ObjectVerificationTypeInfo extends VerificationTypeInfo\n-            permits StackMapDecoder.ObjectVerificationTypeInfoImpl {\n-\n-        public static ObjectVerificationTypeInfo of(ClassEntry className) {\n-            return new StackMapDecoder.ObjectVerificationTypeInfoImpl(className);\n-        }\n-\n-        public static ObjectVerificationTypeInfo of(ClassDesc classDesc) {\n-            return of(TemporaryConstantPool.INSTANCE.classEntry(classDesc));\n-        }\n-\n-        \/**\n-         * {@return the class of the value}\n-         *\/\n-        ClassEntry className();\n-\n-        default ClassDesc classSymbol() {\n-            return className().asSymbol();\n-        }\n-    }\n-\n-    \/**\n-     * An uninitialized stack value.\n-     *\/\n-    sealed interface UninitializedVerificationTypeInfo extends VerificationTypeInfo\n-            permits StackMapDecoder.UninitializedVerificationTypeInfoImpl {\n-        Label newTarget();\n-\n-        public static UninitializedVerificationTypeInfo of(Label newTarget) {\n-            return new StackMapDecoder.UninitializedVerificationTypeInfoImpl(newTarget);\n-        }\n-    }\n-\n-    \/**\n-     * A stack map frame.\n-     *\/\n-    sealed interface StackMapFrameInfo\n-            permits StackMapDecoder.StackMapFrameImpl {\n-\n-        int frameType();\n-        Label target();\n-        List<VerificationTypeInfo> locals();\n-        List<VerificationTypeInfo> stack();\n-\n-        public static StackMapFrameInfo of(Label target,\n-                List<VerificationTypeInfo> locals,\n-                List<VerificationTypeInfo> stack) {\n-\n-            return new StackMapDecoder.StackMapFrameImpl(255, target, locals, stack);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapTableAttribute.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-import jdk.internal.classfile.attribute.StackMapTableAttribute.*;\n+import jdk.internal.classfile.attribute.StackMapFrameInfo.*;\n@@ -516,1 +516,1 @@\n-    private static Stream<ConstantDesc> convertVTIs(CodeAttribute lr, List<StackMapTableAttribute.VerificationTypeInfo> vtis) {\n+    private static Stream<ConstantDesc> convertVTIs(CodeAttribute lr, List<VerificationTypeInfo> vtis) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n-import jdk.internal.classfile.attribute.StackMapTableAttribute.*;\n+import jdk.internal.classfile.attribute.StackMapFrameInfo;\n+import jdk.internal.classfile.attribute.StackMapFrameInfo.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-import jdk.internal.classfile.attribute.StackMapTableAttribute.StackMapFrameInfo;\n+import jdk.internal.classfile.attribute.StackMapFrameInfo;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -454,1 +454,1 @@\n-                                                            StackMapTableAttribute.StackMapFrameInfo.of(labels.computeIfAbsent(fr.target(), l -> cob.newLabel()),\n+                                                            StackMapFrameInfo.of(labels.computeIfAbsent(fr.target(), l -> cob.newLabel()),\n@@ -581,1 +581,1 @@\n-    static List<StackMapTableAttribute.VerificationTypeInfo> transformFrameTypeInfos(List<StackMapTableAttribute.VerificationTypeInfo> infos, CodeBuilder cob, HashMap<Label, Label> labels) {\n+    static List<StackMapFrameInfo.VerificationTypeInfo> transformFrameTypeInfos(List<StackMapFrameInfo.VerificationTypeInfo> infos, CodeBuilder cob, HashMap<Label, Label> labels) {\n@@ -584,3 +584,3 @@\n-                case StackMapTableAttribute.SimpleVerificationTypeInfo i -> i;\n-                case StackMapTableAttribute.ObjectVerificationTypeInfo i -> StackMapTableAttribute.ObjectVerificationTypeInfo.of(i.classSymbol());\n-                case StackMapTableAttribute.UninitializedVerificationTypeInfo i -> StackMapTableAttribute.UninitializedVerificationTypeInfo.of(labels.computeIfAbsent(i.newTarget(), l -> cob.newLabel()));\n+                case StackMapFrameInfo.SimpleVerificationTypeInfo i -> i;\n+                case StackMapFrameInfo.ObjectVerificationTypeInfo i -> StackMapFrameInfo.ObjectVerificationTypeInfo.of(i.classSymbol());\n+                case StackMapFrameInfo.UninitializedVerificationTypeInfo i -> StackMapFrameInfo.UninitializedVerificationTypeInfo.of(labels.computeIfAbsent(i.newTarget(), l -> cob.newLabel()));\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}