{"files":[{"patch":"@@ -70,0 +70,1 @@\n+import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n@@ -76,0 +77,3 @@\n+import jdk.internal.classfile.attribute.NestHostAttribute;\n+import jdk.internal.classfile.attribute.NestMembersAttribute;\n+import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n@@ -93,3 +97,4 @@\n- * ClassRemapper is a {@link jdk.internal.classfile.ClassTransform}, {@link jdk.internal.classfile.FieldTransform},\n- * {@link jdk.internal.classfile.MethodTransform} and {@link jdk.internal.classfile.CodeTransform}\n- * deeply re-mapping all class references in any form, according to given map or map function.\n+ * {@code ClassRemapper} is a {@link ClassTransform}, {@link FieldTransform},\n+ * {@link MethodTransform} and {@link CodeTransform}\n+ * deeply re-mapping all class references in any form, according to given map or\n+ * map function.\n@@ -97,3 +102,3 @@\n- * The re-mapping is applied to superclass, interfaces, all kinds of descriptors and signatures,\n- * all attributes referencing classes in any form (including all types of annotations),\n- * and to all instructions referencing to classes.\n+ * The re-mapping is applied to superclass, interfaces, all kinds of descriptors\n+ * and signatures, all attributes referencing classes in any form (including all\n+ * types of annotations), and to all instructions referencing to classes.\n@@ -101,1 +106,2 @@\n- * Primitive types and arrays are never subjects of mapping and are not allowed targets of mapping.\n+ * Primitive types and arrays are never subjects of mapping and are not allowed\n+ * targets of mapping.\n@@ -103,1 +109,2 @@\n- * Arrays of reference types are always decomposed, mapped as the base reference types and composed back to arrays.\n+ * Arrays of reference types are always decomposed, mapped as the base reference\n+ * types and composed back to arrays.\n@@ -108,1 +115,1 @@\n-     * Creates new instance of ClassRemapper instructed with a class map.\n+     * Creates new instance of {@code ClassRemapper} instructed with a class map.\n@@ -111,1 +118,1 @@\n-     * @return new instance of ClassRemapper\n+     * @return new instance of {@code ClassRemapper}\n@@ -118,1 +125,1 @@\n-     * Creates new instance of ClassRemapper instructed with a map function.\n+     * Creates new instance of {@code ClassRemapper} instructed with a map function.\n@@ -122,1 +129,1 @@\n-     * @return new instance of ClassRemapper\n+     * @return new instance of {@code ClassRemapper}\n@@ -136,2 +143,2 @@\n-     * Returns this ClassRemapper as {@link jdk.internal.classfile.FieldTransform} instance\n-     * @return this ClassRemapper as {@link jdk.internal.classfile.FieldTransform} instance\n+     * Returns this {@code ClassRemapper} as {@link FieldTransform} instance\n+     * @return this {@code ClassRemapper} as {@link FieldTransform} instance\n@@ -142,2 +149,2 @@\n-     * Returns this ClassRemapper as {@link jdk.internal.classfile.MethodTransform} instance\n-     * @return this ClassRemapper as {@link jdk.internal.classfile.MethodTransform} instance\n+     * Returns this {@code ClassRemapper} as {@link MethodTransform} instance\n+     * @return this {@code ClassRemapper} as {@link MethodTransform} instance\n@@ -148,2 +155,2 @@\n-     * Returns this ClassRemapper as {@link jdk.internal.classfile.CodeTransform} instance\n-     * @return this ClassRemapper as {@link jdk.internal.classfile.CodeTransform} instance\n+     * Returns this {@code ClassRemapper} as {@link CodeTransform} instance\n+     * @return this {@code ClassRemapper} as {@link CodeTransform} instance\n@@ -169,1 +176,3 @@\n-                    clb.withField(fm.fieldName().stringValue(), map(fm.fieldTypeSymbol()), fb -> fm.forEachElement(asFieldTransform().resolve(fb).consumer()));\n+                    clb.withField(fm.fieldName().stringValue(), map(\n+                            fm.fieldTypeSymbol()), fb ->\n+                                    fm.forEachElement(asFieldTransform().resolve(fb).consumer()));\n@@ -171,1 +180,3 @@\n-                    clb.withMethod(mm.methodName().stringValue(), mapMethodDesc(mm.methodTypeSymbol()), mm.flags().flagsMask(), mb -> mm.forEachElement(asMethodTransform().resolve(mb).consumer()));\n+                    clb.withMethod(mm.methodName().stringValue(), mapMethodDesc(\n+                            mm.methodTypeSymbol()), mm.flags().flagsMask(), mb ->\n+                                    mm.forEachElement(asMethodTransform().resolve(mb).consumer()));\n@@ -175,1 +186,2 @@\n-                    clb.withInterfaceSymbols(Util.mappedList(ins.interfaces(), in -> map(in.asSymbol())));\n+                    clb.withInterfaceSymbols(Util.mappedList(ins.interfaces(), in ->\n+                            map(in.asSymbol())));\n@@ -189,1 +201,2 @@\n-                    clb.with(RecordAttribute.of(ra.components().stream().map(this::mapRecordComponent).toList()));\n+                    clb.with(RecordAttribute.of(ra.components().stream()\n+                            .map(this::mapRecordComponent).toList()));\n@@ -191,1 +204,2 @@\n-                    clb.with(ModuleAttribute.of(ma.moduleName(), ma.moduleFlagsMask(), ma.moduleVersion().orElse(null),\n+                    clb.with(ModuleAttribute.of(ma.moduleName(), ma.moduleFlagsMask(),\n+                            ma.moduleVersion().orElse(null),\n@@ -193,3 +207,15 @@\n-                            ma.uses().stream().map(ce -> clb.constantPool().classEntry(map(ce.asSymbol()))).toList(),\n-                            ma.provides().stream().map(mp -> ModuleProvideInfo.of(map(mp.provides().asSymbol()),\n-                                    mp.providesWith().stream().map(pw -> map(pw.asSymbol())).toList())).toList()));\n+                            ma.uses().stream().map(ce ->\n+                                    clb.constantPool().classEntry(map(ce.asSymbol()))).toList(),\n+                            ma.provides().stream().map(mp ->\n+                                    ModuleProvideInfo.of(map(mp.provides().asSymbol()),\n+                                            mp.providesWith().stream().map(pw ->\n+                                                    map(pw.asSymbol())).toList())).toList()));\n+                case NestHostAttribute nha ->\n+                    clb.with(NestHostAttribute.of(map(nha.nestHost().asSymbol())));\n+                case NestMembersAttribute nma ->\n+                    clb.with(NestMembersAttribute.ofSymbols(nma.nestMembers().stream()\n+                            .map(nm -> map(nm.asSymbol())).toList()));\n+                case PermittedSubclassesAttribute psa ->\n+                    clb.with(PermittedSubclassesAttribute.ofSymbols(\n+                            psa.permittedSubclasses().stream().map(ps ->\n+                                    map(ps.asSymbol())).toList()));\n@@ -197,1 +223,2 @@\n-                    clb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                    clb.with(RuntimeVisibleAnnotationsAttribute.of(\n+                            mapAnnotations(aa.annotations())));\n@@ -199,1 +226,2 @@\n-                    clb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                    clb.with(RuntimeInvisibleAnnotationsAttribute.of(\n+                            mapAnnotations(aa.annotations())));\n@@ -201,1 +229,2 @@\n-                    clb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    clb.with(RuntimeVisibleTypeAnnotationsAttribute.of(\n+                            mapTypeAnnotations(aa.annotations())));\n@@ -203,1 +232,2 @@\n-                    clb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    clb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(\n+                            mapTypeAnnotations(aa.annotations())));\n@@ -214,1 +244,2 @@\n-                        fb.with(SignatureAttribute.of(mapSignature(sa.asTypeSignature())));\n+                        fb.with(SignatureAttribute.of(\n+                                mapSignature(sa.asTypeSignature())));\n@@ -216,1 +247,2 @@\n-                        fb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                        fb.with(RuntimeVisibleAnnotationsAttribute.of(\n+                                mapAnnotations(aa.annotations())));\n@@ -218,1 +250,2 @@\n-                        fb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                        fb.with(RuntimeInvisibleAnnotationsAttribute.of(\n+                                mapAnnotations(aa.annotations())));\n@@ -220,1 +253,2 @@\n-                        fb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                        fb.with(RuntimeVisibleTypeAnnotationsAttribute.of(\n+                                mapTypeAnnotations(aa.annotations())));\n@@ -222,1 +256,2 @@\n-                        fb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                        fb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(\n+                                mapTypeAnnotations(aa.annotations())));\n@@ -233,0 +268,3 @@\n+                    case AnnotationDefaultAttribute ada ->\n+                        mb.with(AnnotationDefaultAttribute.of(\n+                                mapAnnotationValue(ada.defaultValue())));\n@@ -236,1 +274,3 @@\n-                        mb.with(ExceptionsAttribute.ofSymbols(ea.exceptions().stream().map(ce -> map(ce.asSymbol())).toList()));\n+                        mb.with(ExceptionsAttribute.ofSymbols(\n+                                ea.exceptions().stream().map(ce ->\n+                                        map(ce.asSymbol())).toList()));\n@@ -238,1 +278,2 @@\n-                        mb.with(SignatureAttribute.of(mapMethodSignature(sa.asMethodSignature())));\n+                        mb.with(SignatureAttribute.of(\n+                                mapMethodSignature(sa.asMethodSignature())));\n@@ -240,1 +281,2 @@\n-                        mb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                        mb.with(RuntimeVisibleAnnotationsAttribute.of(\n+                                mapAnnotations(aa.annotations())));\n@@ -242,1 +284,2 @@\n-                        mb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                        mb.with(RuntimeInvisibleAnnotationsAttribute.of(\n+                                mapAnnotations(aa.annotations())));\n@@ -244,1 +287,3 @@\n-                        mb.with(RuntimeVisibleParameterAnnotationsAttribute.of(paa.parameterAnnotations().stream().map(this::mapAnnotations).toList()));\n+                        mb.with(RuntimeVisibleParameterAnnotationsAttribute.of(\n+                                paa.parameterAnnotations().stream()\n+                                        .map(this::mapAnnotations).toList()));\n@@ -246,1 +291,3 @@\n-                        mb.with(RuntimeInvisibleParameterAnnotationsAttribute.of(paa.parameterAnnotations().stream().map(this::mapAnnotations).toList()));\n+                        mb.with(RuntimeInvisibleParameterAnnotationsAttribute.of(\n+                                paa.parameterAnnotations().stream()\n+                                        .map(this::mapAnnotations).toList()));\n@@ -248,1 +295,2 @@\n-                        mb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                        mb.with(RuntimeVisibleTypeAnnotationsAttribute.of(\n+                                mapTypeAnnotations(aa.annotations())));\n@@ -250,1 +298,2 @@\n-                        mb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                        mb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(\n+                                mapTypeAnnotations(aa.annotations())));\n@@ -262,1 +311,2 @@\n-                        cob.fieldInstruction(fai.opcode(), map(fai.owner().asSymbol()), fai.name().stringValue(), map(fai.typeSymbol()));\n+                        cob.fieldInstruction(fai.opcode(), map(fai.owner().asSymbol()),\n+                                fai.name().stringValue(), map(fai.typeSymbol()));\n@@ -264,1 +314,3 @@\n-                        cob.invokeInstruction(ii.opcode(), map(ii.owner().asSymbol()), ii.name().stringValue(), mapMethodDesc(ii.typeSymbol()), ii.isInterface());\n+                        cob.invokeInstruction(ii.opcode(), map(ii.owner().asSymbol()),\n+                                ii.name().stringValue(), mapMethodDesc(ii.typeSymbol()),\n+                                ii.isInterface());\n@@ -266,1 +318,3 @@\n-                        cob.invokeDynamicInstruction(DynamicCallSiteDesc.of(idi.bootstrapMethod(), idi.name().stringValue(), mapMethodDesc(idi.typeSymbol())));\n+                        cob.invokeDynamicInstruction(DynamicCallSiteDesc.of(\n+                                idi.bootstrapMethod(), idi.name().stringValue(),\n+                                mapMethodDesc(idi.typeSymbol())));\n@@ -276,1 +330,2 @@\n-                        cob.exceptionCatch(c.tryStart(), c.tryEnd(), c.handler(), c.catchType().map(d -> TemporaryConstantPool.INSTANCE.classEntry(map(d.asSymbol()))));\n+                        cob.exceptionCatch(c.tryStart(), c.tryEnd(), c.handler(),c.catchType()\n+                                .map(d -> TemporaryConstantPool.INSTANCE.classEntry(map(d.asSymbol()))));\n@@ -278,1 +333,2 @@\n-                        cob.localVariable(c.slot(), c.name().stringValue(), map(c.typeSymbol()), c.startScope(), c.endScope());\n+                        cob.localVariable(c.slot(), c.name().stringValue(), map(c.typeSymbol()),\n+                                c.startScope(), c.endScope());\n@@ -280,1 +336,2 @@\n-                        cob.localVariableType(c.slot(), c.name().stringValue(), mapSignature(c.signatureSymbol()), c.startScope(), c.endScope());\n+                        cob.localVariableType(c.slot(), c.name().stringValue(),\n+                                mapSignature(c.signatureSymbol()), c.startScope(), c.endScope());\n@@ -282,1 +339,2 @@\n-                        cob.constantInstruction(ldc.opcode(), mapConstantValue(ldc.constantValue()));\n+                        cob.constantInstruction(ldc.opcode(),\n+                                mapConstantValue(ldc.constantValue()));\n@@ -284,1 +342,2 @@\n-                        cob.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                        cob.with(RuntimeVisibleTypeAnnotationsAttribute.of(\n+                                mapTypeAnnotations(aa.annotations())));\n@@ -286,1 +345,2 @@\n-                        cob.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                        cob.with(RuntimeInvisibleTypeAnnotationsAttribute.of(\n+                                mapTypeAnnotations(aa.annotations())));\n@@ -302,1 +362,2 @@\n-            return MethodTypeDesc.of(map(desc.returnType()), desc.parameterList().stream().map(this::map).toArray(ClassDesc[]::new));\n+            return MethodTypeDesc.of(map(desc.returnType()),\n+                    desc.parameterList().stream().map(this::map).toArray(ClassDesc[]::new));\n@@ -306,1 +367,1 @@\n-            return ClassSignature.of(signature.typeParameters(),\n+            return ClassSignature.of(mapTypeParams(signature.typeParameters()),\n@@ -308,1 +369,2 @@\n-                    signature.superinterfaceSignatures().stream().map(this::mapSignature).toArray(Signature.RefTypeSig[]::new));\n+                    signature.superinterfaceSignatures().stream()\n+                            .map(this::mapSignature).toArray(Signature.RefTypeSig[]::new));\n@@ -312,1 +374,1 @@\n-            return MethodSignature.of(signature.typeParameters(),\n+            return MethodSignature.of(mapTypeParams(signature.typeParameters()),\n@@ -315,1 +377,2 @@\n-                    signature.arguments().stream().map(this::mapSignature).toArray(Signature[]::new));\n+                    signature.arguments().stream()\n+                            .map(this::mapSignature).toArray(Signature[]::new));\n@@ -319,1 +382,2 @@\n-            return RecordComponentInfo.of(component.name().stringValue(), map(component.descriptorSymbol()),\n+            return RecordComponentInfo.of(component.name().stringValue(),\n+                    map(component.descriptorSymbol()),\n@@ -323,1 +387,2 @@\n-                                SignatureAttribute.of(mapSignature(sa.asTypeSignature()));\n+                                SignatureAttribute.of(\n+                                        mapSignature(sa.asTypeSignature()));\n@@ -325,1 +390,2 @@\n-                                RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations()));\n+                                RuntimeVisibleAnnotationsAttribute.of(\n+                                        mapAnnotations(aa.annotations()));\n@@ -327,1 +393,2 @@\n-                                RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations()));\n+                                RuntimeInvisibleAnnotationsAttribute.of(\n+                                        mapAnnotations(aa.annotations()));\n@@ -329,1 +396,2 @@\n-                                RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations()));\n+                                RuntimeVisibleTypeAnnotationsAttribute.of(\n+                                        mapTypeAnnotations(aa.annotations()));\n@@ -331,1 +399,2 @@\n-                                RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations()));\n+                                RuntimeInvisibleTypeAnnotationsAttribute.of(\n+                                        mapTypeAnnotations(aa.annotations()));\n@@ -339,1 +408,3 @@\n-                    MethodHandleDesc.ofField(dmhd.kind(), map(dmhd.owner()), dmhd.methodName(), map(ClassDesc.ofDescriptor(dmhd.lookupDescriptor())));\n+                    MethodHandleDesc.ofField(dmhd.kind(), map(dmhd.owner()),\n+                            dmhd.methodName(),\n+                            map(ClassDesc.ofDescriptor(dmhd.lookupDescriptor())));\n@@ -341,1 +412,3 @@\n-                    MethodHandleDesc.ofMethod(dmhd.kind(), map(dmhd.owner()), dmhd.methodName(), mapMethodDesc(MethodTypeDesc.ofDescriptor(dmhd.lookupDescriptor())));\n+                    MethodHandleDesc.ofMethod(dmhd.kind(), map(dmhd.owner()),\n+                            dmhd.methodName(),\n+                            mapMethodDesc(MethodTypeDesc.ofDescriptor(dmhd.lookupDescriptor())));\n@@ -373,1 +446,2 @@\n-                            map(cts.classDesc()), cts.typeArgs().stream().map(this::mapSignature).toArray(Signature[]::new));\n+                            map(cts.classDesc()), cts.typeArgs().stream()\n+                                    .map(this::mapSignature).toArray(Signature[]::new));\n@@ -383,1 +457,2 @@\n-            return Annotation.of(map(a.classSymbol()), a.elements().stream().map(el -> AnnotationElement.of(el.name(), mapAnnotationValue(el.value()))).toList());\n+            return Annotation.of(map(a.classSymbol()), a.elements().stream().map(el ->\n+                    AnnotationElement.of(el.name(), mapAnnotationValue(el.value()))).toList());\n@@ -388,2 +463,4 @@\n-                case AnnotationValue.OfAnnotation oa -> AnnotationValue.ofAnnotation(mapAnnotation(oa.annotation()));\n-                case AnnotationValue.OfArray oa -> AnnotationValue.ofArray(oa.values().stream().map(this::mapAnnotationValue).toList());\n+                case AnnotationValue.OfAnnotation oa ->\n+                    AnnotationValue.ofAnnotation(mapAnnotation(oa.annotation()));\n+                case AnnotationValue.OfArray oa ->\n+                    AnnotationValue.ofArray(oa.values().stream().map(this::mapAnnotationValue).toList());\n@@ -391,2 +468,4 @@\n-                case AnnotationValue.OfClass oc -> AnnotationValue.ofClass(map(oc.classSymbol()));\n-                case AnnotationValue.OfEnum oe -> AnnotationValue.ofEnum(map(oe.classSymbol()), oe.constantName().stringValue());\n+                case AnnotationValue.OfClass oc ->\n+                    AnnotationValue.ofClass(map(oc.classSymbol()));\n+                case AnnotationValue.OfEnum oe ->\n+                    AnnotationValue.ofEnum(map(oe.classSymbol()), oe.constantName().stringValue());\n@@ -397,2 +476,11 @@\n-            return typeAnnotations.stream().map(a -> TypeAnnotation.of(a.targetInfo(), a.targetPath(), map(a.classSymbol()),\n-                    a.elements().stream().map(el -> AnnotationElement.of(el.name(), mapAnnotationValue(el.value()))).toList())).toList();\n+            return typeAnnotations.stream().map(a -> TypeAnnotation.of(a.targetInfo(),\n+                    a.targetPath(), map(a.classSymbol()),\n+                    a.elements().stream().map(el -> AnnotationElement.of(el.name(),\n+                            mapAnnotationValue(el.value()))).toList())).toList();\n+        }\n+\n+        List<Signature.TypeParam> mapTypeParams(List<Signature.TypeParam> typeParams) {\n+            return typeParams.stream().map(tp -> Signature.TypeParam.of(tp.identifier(),\n+                    tp.classBound().map(this::mapSignature),\n+                    tp.interfaceBounds().stream()\n+                            .map(this::mapSignature).toArray(Signature.RefTypeSig[]::new))).toList();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassRemapper.java","additions":161,"deletions":73,"binary":false,"changes":234,"status":"modified"}]}