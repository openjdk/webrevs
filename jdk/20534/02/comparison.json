{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.Objects;\n@@ -88,4 +89,1 @@\n-                stream.close();\n-                currentChunk.release();\n-                stream = null;\n-                currentChunk = null;\n+                closeStream();\n@@ -100,1 +98,30 @@\n-    public void close() throws IOException {\n+    public int read(byte[] buf, int off, int len) throws IOException {\n+        Objects.checkFromIndexSize(off, len, buf.length);\n+        if (len == 0) {\n+            return 0;\n+        }\n+\n+        int totalRead = 0;\n+        while (len > 0) {\n+            if (stream == null) {\n+                closeChunk();\n+                if (!nextStream()) {\n+                    return totalRead > 0 ? totalRead : -1;\n+                }\n+            }\n+            int read = stream.read(buf, off, len);\n+            if (read > -1) {\n+                totalRead += read;\n+                len -= read;\n+                if (len == 0) {\n+                    return totalRead;\n+                }\n+                off += read;\n+            } else {\n+                closeStream();\n+            }\n+        }\n+        return totalRead;\n+    }\n+\n+    private void closeStream() throws IOException {\n@@ -105,1 +132,5 @@\n-        while (currentChunk != null) {\n+        closeChunk();\n+    }\n+\n+    private void closeChunk() {\n+        if (currentChunk != null) {\n@@ -108,0 +139,8 @@\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        closeStream();\n+        while (currentChunk != null) {\n+            closeChunk();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ChunkInputStream.java","additions":46,"deletions":7,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Palantir Technologies, Inc. and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestChunkInputStreamBulkRead\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.api.consumer.TestChunkInputStreamBulkRead\n+ *\/\n+package jdk.jfr.api.consumer;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.jfr.Recording;\n+import jdk.test.lib.Asserts;\n+\n+public class TestChunkInputStreamBulkRead {\n+\n+    public static void main(String[] args) throws Exception {\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            try (Recording s = new Recording()) {\n+                s.start();\n+                s.stop();\n+            }\n+            r.stop();\n+            try (InputStream stream = r.getStream(null, null);\n+                 ByteArrayOutputStream output = new ByteArrayOutputStream()) {\n+                long read = stream.transferTo(output);\n+                System.out.printf(\"Read %d bytes from JFR stream%n\", read);\n+                Asserts.assertEquals(r.getSize(), read);\n+\n+                byte[] actual = output.toByteArray();\n+                Asserts.assertEqualsByteArray(r.getStream(null, null).readAllBytes(), actual);\n+\n+                Path dumpFile = Paths.get(\"recording.jfr\").toAbsolutePath().normalize();\n+                r.dump(dumpFile);\n+                System.out.printf(\"Dumped recording to %s (%d bytes)%n\", dumpFile, Files.size(dumpFile));\n+                Asserts.assertEqualsByteArray(Files.readAllBytes(dumpFile), actual);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestChunkInputStreamBulkRead.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}