{"files":[{"patch":"@@ -184,8 +184,0 @@\n-            \/**\n-             * Reads a single character.\n-             *\n-             * @return     The character read, or -1 if the end of the stream has been\n-             *             reached\n-             *\n-             * @throws     IOException  If an I\/O error occurs\n-             *\/\n@@ -200,18 +192,0 @@\n-            \/**\n-             * Reads characters into a portion of an array.\n-             *\n-             * <p> If {@code len} is zero, then no characters are read and {@code 0} is\n-             * returned; otherwise, there is an attempt to read at least one character.\n-             * If no character is available because the stream is at its end, the value\n-             * {@code -1} is returned; otherwise, at least one character is read and\n-             * stored into {@code cbuf}.\n-             *\n-             * @param      cbuf  {@inheritDoc}\n-             * @param      off   {@inheritDoc}\n-             * @param      len   {@inheritDoc}\n-             *\n-             * @return     {@inheritDoc}\n-             *\n-             * @throws     IndexOutOfBoundsException  {@inheritDoc}\n-             * @throws     IOException  {@inheritDoc}\n-             *\/\n@@ -242,20 +216,0 @@\n-            \/**\n-             * Skips characters. If the stream is already at its end before this method\n-             * is invoked, then no characters are skipped and zero is returned.\n-             *\n-             * <p>The {@code n} parameter may be negative, even though the\n-             * {@code skip} method of the {@link Reader} superclass throws\n-             * an exception in this case. Negative values of {@code n} cause the\n-             * stream to skip backwards. Negative return values indicate a skip\n-             * backwards. It is not possible to skip backwards past the beginning of\n-             * the string.\n-             *\n-             * <p>If the entire string has been read or skipped, then this method has\n-             * no effect and always returns {@code 0}.\n-             *\n-             * @param n {@inheritDoc}\n-             *\n-             * @return {@inheritDoc}\n-             *\n-             * @throws IOException {@inheritDoc}\n-             *\/\n@@ -274,7 +228,0 @@\n-            \/**\n-             * Tells whether this stream is ready to be read.\n-             *\n-             * @return True if the next read() is guaranteed not to block for input\n-             *\n-             * @throws     IOException  If the stream is closed\n-             *\/\n@@ -287,3 +234,0 @@\n-            \/**\n-             * Tells whether this stream supports the mark() operation, which it does.\n-             *\/\n@@ -295,13 +239,0 @@\n-            \/**\n-             * Marks the present position in the stream.  Subsequent calls to reset()\n-             * will reposition the stream to this point.\n-             *\n-             * @param  readAheadLimit  Limit on the number of characters that may be\n-             *                         read while still preserving the mark.  Because\n-             *                         the stream's input comes from a string, there\n-             *                         is no actual limit, so this argument must not\n-             *                         be negative, but is otherwise ignored.\n-             *\n-             * @throws     IllegalArgumentException  If {@code readAheadLimit < 0}\n-             * @throws     IOException  If an I\/O error occurs\n-             *\/\n@@ -317,6 +248,0 @@\n-            \/**\n-             * Resets the stream to the most recent mark, or to the beginning of the\n-             * string if it has never been marked.\n-             *\n-             * @throws     IOException  If an I\/O error occurs\n-             *\/\n@@ -329,6 +254,0 @@\n-            \/**\n-             * Closes the stream and releases any system resources associated with\n-             * it. Once the stream has been closed, further read(),\n-             * ready(), mark(), or reset() invocations will throw an IOException.\n-             * Closing a previously closed stream has no effect.\n-             *\/\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"modified"}]}