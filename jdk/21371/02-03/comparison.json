{"files":[{"patch":"@@ -144,1 +144,2 @@\n-     * Returns a new {@code Reader} whose source is a {@link CharSequence}.\n+     * Returns a {@code Reader} that reads characters from a\n+     * {@code CharSequence}, starting at the first character in the sequence.\n@@ -159,1 +160,1 @@\n-     * <p> The {@code markSupported()} method returns {@code true}.\n+     * <p> The returned reader supports the {@link #mark mark()} operation.\n@@ -161,1 +162,1 @@\n-     * @param source {@code CharSequence} providing the character stream.\n+     * @param cs {@code CharSequence} providing the character stream.\n@@ -163,1 +164,1 @@\n-     * @return a {@code Reader} which reads characters from {@code source}\n+     * @return a {@code Reader} which reads characters from {@code cs}\n@@ -165,1 +166,1 @@\n-     * @throws NullPointerException if {@code source} is {@code null}\n+     * @throws NullPointerException if {@code cs} is {@code null}\n@@ -169,2 +170,2 @@\n-    public static Reader of(CharSequence source) {\n-        Objects.requireNonNull(source);\n+    public static Reader of(final CharSequence cs) {\n+        Objects.requireNonNull(cs);\n@@ -173,2 +174,2 @@\n-            private final int length = source.length();\n-            private CharSequence cs = source;\n+            private final int length = cs.length();\n+            private boolean isClosed;\n@@ -180,1 +181,1 @@\n-                if (cs == null)\n+                if (isClosed)\n@@ -256,1 +257,1 @@\n-                cs = null;\n+                isClosed = true;\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -57,1 +57,24 @@\n-            Reader.of(CharBuffer.wrap(CONTENT.toCharArray()))\n+            Reader.of(CharBuffer.wrap(CONTENT.toCharArray())),\n+            Reader.of(new CharSequence() {\n+                @Override\n+                public char charAt(int index) {\n+                    return CONTENT.charAt(index);\n+                }\n+\n+                @Override\n+                public int length() {\n+                    return CONTENT.length();\n+                }\n+\n+                @Override\n+                public CharSequence subSequence(int start, int end) {\n+                    \/\/ unused by Reader.Of's result\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                public String toString() {\n+                    \/\/ Reader.Of's result SHALL NOT convert to String\n+                    throw new UnsupportedOperationException();\n+                }\n+            })\n@@ -61,5 +84,0 @@\n-    @Test(dataProvider = \"readers\")\n-    public void testOpen(Reader reader) {\n-        assertNotNull(reader, \"Reader.of(String) returned null\");\n-    }\n-\n@@ -145,1 +163,1 @@\n-                \"transferTo() does not resect empty stream\");\n+                \"transferTo() does not respect empty stream\");\n","filename":"test\/jdk\/java\/io\/Reader\/Of.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"}]}