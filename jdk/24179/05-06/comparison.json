{"files":[{"patch":"@@ -303,2 +303,1 @@\n-      bool isnan = ((*reinterpret_cast<jint*>(&con) & 0x7F800000) == 0x7F800000) &&\n-                   ((*reinterpret_cast<jint*>(&con) & 0x7FFFFF) != 0);\n+      bool isnan =  g_isnan((jdouble)con);\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-    private static Generator<Float> genF = G.uniformFloats(0.0f, 70000.0f);\n-    private static Generator<Short> genHF = G.uniformFloat16s(Float.floatToFloat16(-2000.0f), Float.floatToFloat16(2000.0f));\n+    private static Generator<Float> genF = G.uniformFloats();\n+    private static Generator<Short> genHF = G.uniformFloat16s();\n@@ -418,1 +418,1 @@\n-    public short testRandomFP16ConstantPatterns() {\n+    public short testRandomFP16ConstantPatternSet1() {\n@@ -427,4 +427,4 @@\n-    @Check(test=\"testRandomFP16ConstantPatterns\")\n-    public void checkRandomFP16ConstantPatterns(short actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testRandomFP16ConstantPatterns\"));\n-        short expected = testRandomFP16ConstantPatterns();\n+    @Check(test=\"testRandomFP16ConstantPatternSet1\")\n+    public void checkRandomFP16ConstantPatternSet1(short actual) throws Exception {\n+        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testRandomFP16ConstantPatternSet1\"));\n+        short expected = testRandomFP16ConstantPatternSet1();\n@@ -435,0 +435,22 @@\n+    @Test\n+    @IR(counts = {IRNode.ADD_HF, \" >0 \", IRNode.SUB_HF, \" >0 \", IRNode.MUL_HF, \" >0 \", IRNode.DIV_HF, \" >0 \"},\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zfh\", \"true\"})\n+    @IR(counts = {IRNode.ADD_HF, \" >0 \", IRNode.SUB_HF, \" >0 \", IRNode.MUL_HF, \" >0 \", IRNode.DIV_HF, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    @Warmup(10000)\n+    public short testRandomFP16ConstantPatternSet2() {\n+        short res = 0;\n+        res += Float.floatToFloat16(RANDOM2.floatValue() + RANDOM1_VAR.floatValue());\n+        res += Float.floatToFloat16(RANDOM3.floatValue() - RANDOM2_VAR.floatValue());\n+        res += Float.floatToFloat16(RANDOM4.floatValue() * RANDOM3_VAR.floatValue());\n+        res += Float.floatToFloat16(RANDOM5.floatValue() \/ RANDOM4_VAR.floatValue());\n+        return res;\n+    }\n+\n+    @Check(test=\"testRandomFP16ConstantPatternSet2\")\n+    public void checkRandomFP16ConstantPatternSet2(short actual) throws Exception {\n+        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testRandomFP16ConstantPatternSet2\"));\n+        short expected = testRandomFP16ConstantPatternSet2();\n+        Verify.checkEQ(expected, actual);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFloat16ScalarOperations.java","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"}]}