{"files":[{"patch":"@@ -266,2 +266,0 @@\n-  Node* conF = nullptr;\n-  Node* varS = nullptr;\n@@ -270,4 +268,4 @@\n-    \/\/ Check if incoming binary operation has one floating point constant\n-    \/\/ input and other a half precision to single precision upcasting node.\n-    \/\/ We land here because prior HalfFloat to Float conversion promotes\n-    \/\/ integral constant holding Float16 value to a floating point constant\n+    \/\/ Check if the incoming binary operation has one floating point constant\n+    \/\/ input and the other input is a half precision to single precision upcasting node.\n+    \/\/ We land here because a prior HalfFloat to Float conversion promotes\n+    \/\/ an integral constant holding Float16 value to a floating point constant.\n@@ -275,0 +273,2 @@\n+    Node* conF = nullptr;\n+    Node* varS = nullptr;\n@@ -295,2 +295,2 @@\n-      \/\/ 2. If constant value is one of the valid IEEE 754 binary32 NaN bit pattern\n-      \/\/ then its safe to consider it for pattern match because of following reasons\n+      \/\/ 2. If a constant value is one of the valid IEEE 754 binary32 NaN bit patterns\n+      \/\/ then it's safe to consider it for pattern match because of the following reasons:\n@@ -300,3 +300,3 @@\n-      \/\/   results into a quiet NaN but preserves the significand bits of signaling NaN.\n-      \/\/   c. Pattern being matched includes a Float to Float16 conversion after binary\n-      \/\/   expression, this downcast will still preserve significand bits of binary32 NaN.\n+      \/\/   results in a quiet NaN but preserves the significand bits of signaling NaN.\n+      \/\/   c. The pattern being matched includes a Float to Float16 conversion after binary\n+      \/\/   expression, this downcast will still preserve the significand bits of binary32 NaN.\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -622,1 +622,1 @@\n-     * Fill the array with shorts using the distribution of nextDouble.\n+     * Fill the array with shorts using the distribution of the generator.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}