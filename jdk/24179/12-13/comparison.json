{"files":[{"patch":"@@ -826,13 +826,0 @@\n-  \/\/ x\/x == 1, we ignore 0\/0.\n-  \/\/ Note: if t1 and t2 are zero then result is NaN (JVMS page 213)\n-  \/\/ Does not work for variables because of NaN's\n-  if (in(1) == in(2) && t1->base() == Type::HalfFloatCon &&\n-      !g_isnan(t1->getf()) && g_isfinite(t1->getf()) && t1->getf() != 0.0) { \/\/ could be negative ZERO or NaN\n-    return TypeH::ONE;\n-  }\n-\n-  if (t2 == TypeH::ONE) {\n-    return t1;\n-  }\n-\n-  \/\/ If divisor is a constant and not zero, divide the numbers\n@@ -840,3 +827,1 @@\n-      t2->base() == Type::HalfFloatCon &&\n-      t2->getf() != 0.0)  {\n-    \/\/ could be negative zero\n+      t2->base() == Type::HalfFloatCon)  {\n@@ -846,13 +831,0 @@\n-  \/\/ If the dividend is a constant zero\n-  \/\/ Note: if t1 and t2 are zero then result is NaN (JVMS page 213)\n-  \/\/ Test TypeHF::ZERO is not sufficient as it could be negative zero\n-\n-  if (t1 == TypeH::ZERO && !g_isnan(t2->getf()) && t2->getf() != 0.0) {\n-    return TypeH::ZERO;\n-  }\n-\n-  \/\/ If divisor or dividend is nan then result is nan.\n-  if (g_isnan(t1->getf()) || g_isnan(t2->getf())) {\n-    return TypeH::make(NAN);\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-    public void checkSNaNFP16ConstantPatterns(short actual) throws Exception {\n+    public void checkSNaNFP16ConstantPatterns(short actual) {\n@@ -647,3 +647,2 @@\n-        \/\/ FIXME : C2 compiler limitaition to identify sign of ZERO value.\n-        \/\/ assertResult(divide(valueOf(2.0f), NEGATIVE_ZERO).floatValue(), Float.NEGATIVE_INFINITY, \"testDivConstantFolding\");\n-        \/\/ assertResult(divide(valueOf(2.0f), POSITIVE_ZERO).floatValue(), Float.POSITIVE_INFINITY, \"testDivConstantFolding\");\n+        assertResult(divide(valueOf(2.0f), NEGATIVE_ZERO).floatValue(), Float.NEGATIVE_INFINITY, \"testDivConstantFolding\");\n+        assertResult(divide(valueOf(2.0f), POSITIVE_ZERO).floatValue(), Float.POSITIVE_INFINITY, \"testDivConstantFolding\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFloat16ScalarOperations.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}