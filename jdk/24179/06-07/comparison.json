{"files":[{"patch":"@@ -83,0 +83,9 @@\n+    private Float16 GOLDEN_DIV_POT;\n+    private Float16 GOLDEN_MUL2;\n+    private short GOLDEN_INEXACT;\n+    private short GOLDEN_EXACT;\n+    private short GOLDEN_RANDOM_PAT1;\n+    private short GOLDEN_RANDOM_PAT2;\n+    private short GOLDEN_SNAN;\n+    private short GOLDEN_QNAN;\n+\n@@ -93,0 +102,1 @@\n+\n@@ -95,0 +105,9 @@\n+\n+        GOLDEN_DIV_POT = testDivByPOT();\n+        GOLDEN_MUL2 = testMulByTWO();\n+        GOLDEN_INEXACT = testInexactFP16ConstantPatterns();\n+        GOLDEN_EXACT = testExactFP16ConstantPatterns();\n+        GOLDEN_RANDOM_PAT1 = testRandomFP16ConstantPatternSet1();\n+        GOLDEN_RANDOM_PAT2 = testRandomFP16ConstantPatternSet2();\n+        GOLDEN_SNAN = testSNaNFP16ConstantPatterns();\n+        GOLDEN_QNAN = testQNaNFP16ConstantPatterns();\n@@ -297,4 +316,2 @@\n-    public void checkDivByPOT(Float16 actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testDivByPOT\"));\n-        Float16 expected = testDivByPOT();\n-        Verify.checkEQ(Float16.float16ToRawShortBits(expected), Float16.float16ToRawShortBits(actual));\n+    public void checkDivByPOT(Float16 actual) {\n+        Verify.checkEQ(Float16.float16ToRawShortBits(GOLDEN_DIV_POT), Float16.float16ToRawShortBits(actual));\n@@ -319,4 +336,2 @@\n-    public void checkMulByTWO(Float16 actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testMulByTWO\"));\n-        Float16 expected = testMulByTWO();\n-        Verify.checkEQ(Float16.float16ToRawShortBits(expected), Float16.float16ToRawShortBits(actual));\n+    public void checkMulByTWO(Float16 actual) {\n+        Verify.checkEQ(Float16.float16ToRawShortBits(GOLDEN_MUL2), Float16.float16ToRawShortBits(actual));\n@@ -340,4 +355,2 @@\n-    public void checkInexactFP16ConstantPatterns(short actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testInexactFP16ConstantPatterns\"));\n-        short expected = testInexactFP16ConstantPatterns();\n-        Verify.checkEQ(expected, actual);\n+    public void checkInexactFP16ConstantPatterns(short actual) {\n+        Verify.checkEQ(GOLDEN_INEXACT, actual);\n@@ -363,3 +376,1 @@\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testSNaNFP16ConstantPatterns\"));\n-        short expected = testSNaNFP16ConstantPatterns();\n-        Verify.checkEQ(expected, actual);\n+        Verify.checkEQ(GOLDEN_SNAN, actual);\n@@ -384,4 +395,2 @@\n-    public void checkQNaNFP16ConstantPatterns(short actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testQNaNFP16ConstantPatterns\"));\n-        short expected = testQNaNFP16ConstantPatterns();\n-        Verify.checkEQ(expected, actual);\n+    public void checkQNaNFP16ConstantPatterns(short actual) {\n+        Verify.checkEQ(GOLDEN_QNAN, actual);\n@@ -406,4 +415,2 @@\n-    public void checkExactFP16ConstantPatterns(short actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testExactFP16ConstantPatterns\"));\n-        short expected = testExactFP16ConstantPatterns();\n-        Verify.checkEQ(expected, actual);\n+    public void checkExactFP16ConstantPatterns(short actual) {\n+        Verify.checkEQ(GOLDEN_EXACT, actual);\n@@ -428,4 +435,2 @@\n-    public void checkRandomFP16ConstantPatternSet1(short actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testRandomFP16ConstantPatternSet1\"));\n-        short expected = testRandomFP16ConstantPatternSet1();\n-        Verify.checkEQ(expected, actual);\n+    public void checkRandomFP16ConstantPatternSet1(short actual) {\n+        Verify.checkEQ(GOLDEN_RANDOM_PAT1, actual);\n@@ -451,4 +456,2 @@\n-    public void checkRandomFP16ConstantPatternSet2(short actual) throws Exception {\n-        TestFramework.deoptimize(TestFloat16ScalarOperations.class.getMethod(\"testRandomFP16ConstantPatternSet2\"));\n-        short expected = testRandomFP16ConstantPatternSet2();\n-        Verify.checkEQ(expected, actual);\n+    public void checkRandomFP16ConstantPatternSet2(short actual) {\n+        Verify.checkEQ(GOLDEN_RANDOM_PAT2, actual);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFloat16ScalarOperations.java","additions":34,"deletions":31,"binary":false,"changes":65,"status":"modified"}]}