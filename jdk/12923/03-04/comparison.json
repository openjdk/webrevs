{"files":[{"patch":"@@ -1179,1 +1179,2 @@\n-    <Field type=\"Ticks\" name=\"initialization\" label=\"Initialization\" description=\"The time the initialization method exported by the agent was invoked by the JVM\" \/>\n+    <Field type=\"boolean\" name=\"dynamic\" label=\"Dynamic\" description=\"If the agent attached to the JVM dynamically during runtime, i.e. not at startup\" \/>\n+    <Field type=\"Ticks\" name=\"initialization\" label=\"Initialization\" description=\"The time the JVM initialized the agent\" \/>\n@@ -1181,1 +1182,0 @@\n-    <Field type=\"string\" name=\"initializationMethod\" label=\"Initialization Method\" description=\"The initialization method exported by the agent and invoked by the JVM\" \/>\n@@ -1188,1 +1188,0 @@\n-    <Field type=\"string\" name=\"path\" label=\"Path\" description=\"The path of the library\" \/>\n@@ -1192,0 +1191,1 @@\n+    <Field type=\"string\" name=\"path\" label=\"Path\" description=\"The path of the library\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -277,0 +277,1 @@\n+  event.set_dynamic(agent->is_dynamic());\n@@ -288,1 +289,0 @@\n-    event.set_initializationMethod(agent->is_dynamic() ? \"agentmain\" : \"premain\");\n@@ -298,1 +298,0 @@\n-    event.set_dynamic(agent->is_dynamic());\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+            Events.assertField(e, \"dynamic\").equal(false);\n@@ -97,1 +98,0 @@\n-            Events.assertField(e, \"initializationMethod\").equal(\"premain\");\n@@ -112,0 +112,5 @@\n+            Instant initialization = e.getInstant(\"initialization\");\n+            if (initialization.isAfter(r.getStartTime())) {\n+                throw new Exception(\"Expected a static NativeAgent to be initialized before recording start\");\n+            }\n+            Events.assertField(e, \"initializationTime\").atLeast(0L);\n@@ -151,1 +156,0 @@\n-            \/\/ The periodic task writing events uses an iterator over agents in the order from newest to oldest.\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestAgentEvent.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}