{"files":[{"patch":"@@ -28,65 +28,0 @@\n-#include \"runtime\/os.inline.hpp\"\n-\n-\/*\n-  * The implementation builds a mapping bewteen JVMTI envs and JPLIS agents,\n-  * using internal JDK implementation knowledge about the way JPLIS agents\n-  * store data in their JvmtiEnv local storage.\n-  *\n-  * Please see JPLISAgent.c in module java.instrument:\n-  *\n-  * jvmtierror = (*jvmtienv)->SetEnvironmentLocalStorage( jvmtienv, &(agent->mNormalEnvironment));\n-  *\n-  * It is the pointer to the field agent->mNormalEnvironment that is stored in the jvmtiEnv local storage.\n-  *\n-  * These are some types used in the JDK, java.instrument, see JPLISAgent.h and JPLISAgent.c\n-  *\n-  * struct _JPLISEnvironment {\n-  *   jvmtiEnv*   mJVMTIEnv;              \/\/ the JVM TI environment\n-  *   JPLISAgent* mAgent;                 \/\/ corresponding agent\n-  *   jboolean    mIsRetransformer;       \/\/ indicates if special environment\n-  * };\n-  *\n-  * struct _JPLISAgent {\n-  *   JavaVM*                 mJVM;                   \/\/ handle to the JVM\n-  *   JPLISEnvironment        mNormalEnvironment;     \/\/ for every thing but retransform stuff\n-  *   JPLISEnvironment        mRetransformEnvironment;\/\/ for retransform stuff only\n-  *   jobject                 mInstrumentationImpl;   \/\/ handle to the Instrumentation instance\n-  *   jmethodID               mPremainCaller;         \/\/ method on the InstrumentationImpl that does the premain stuff (cached to save lots of lookups)\n-  *   jmethodID               mAgentmainCaller;       \/\/ method on the InstrumentationImpl for agents loaded via attach mechanism\n-  *   jmethodID               mTransform;             \/\/ method on the InstrumentationImpl that does the class file transform\n-  *   jboolean                mRedefineAvailable;     \/\/ cached answer to \"does this agent support redefine\"\n-  *   jboolean                mRedefineAdded;         \/\/ indicates if can_redefine_classes capability has been added\n-  *   jboolean                mNativeMethodPrefixAvailable; \/\/ cached answer to \"does this agent support prefixing\"\n-  *   jboolean                mNativeMethodPrefixAdded;     \/\/\/ indicates if can_set_native_method_prefix capability has been added\n-  *   char const* mAgentClassName; \/\/ agent class name\n-  *   char const* mOptionsString;  \/\/ -javaagent options string\n-  *   const char* mJarfile;        \/\/ agent jar file name\n-  * };\n-  *\n-  * To read the JPLISAgent specfic data stored in the JvmtiEnv local storage, we model two mirror structs:\n-  *\n-  * struct JPLISEnvirommentMirror {\n-  *   jvmtiEnv* mJVMTIEnv;         \/\/ the JVM TI environment\n-  *   JPLISAgentMirror* mAgent;   \/\/ corresponding agent\n-  *   jboolean  mIsRetransformer;  \/\/ indicates if special environment\n-  * };\n-  *\n-  * Declared in agent.hpp. JPLISAgentMirror is declared here, in agent.cpp.\n-  *\n-  *\/\n-struct JPLISAgentMirror {\n-  JavaVM* mJVM;                   \/\/ handle to the JVM\n-  JPLISEnvironmentMirror mNormalEnvironment;     \/\/ for every thing but retransform stuff\n-  JPLISEnvironmentMirror mRetransformEnvironment;\/\/ for retransform stuff only\n-  jobject mInstrumentationImpl;   \/\/ handle to the Instrumentation instance\n-  jmethodID mPremainCaller;         \/\/ method on the InstrumentationImpl that does the premain stuff (cached to save lots of lookups)\n-  jmethodID mAgentmainCaller;       \/\/ method on the InstrumentationImpl for agents loaded via attach mechanism\n-  jmethodID mTransform;             \/\/ method on the InstrumentationImpl that does the class file transform\n-  jboolean  mRedefineAvailable;     \/\/ cached answer to \"does this agent support redefine\"\n-  jboolean  mRedefineAdded;         \/\/ indicates if can_redefine_classes capability has been added\n-  jboolean  mNativeMethodPrefixAvailable; \/\/ cached answer to \"does this agent support prefixing\"\n-  jboolean mNativeMethodPrefixAdded;     \/\/\/ indicates if can_set_native_method_prefix capability has been added\n-  char const* mAgentClassName; \/\/ agent class name\n-  char const* mOptionsString;  \/\/ -javaagent options string\n-  const char* mJarfile;        \/\/ agent jar file name\n-};\n@@ -213,1 +148,1 @@\n-void Agent::set_jplis(const JPLISAgentMirror* jplis) {\n+void Agent::set_jplis(const void* jplis) {\n@@ -231,1 +166,1 @@\n-bool Agent::is_jplis(const JPLISAgentMirror* jplis) const {\n+bool Agent::is_jplis(const void* jplis) const {\n","filename":"src\/hotspot\/share\/prims\/agent.cpp","additions":2,"deletions":67,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"jvmtifiles\/jvmtiEnv.hpp\"\n@@ -32,8 +31,0 @@\n-struct JPLISAgentMirror;\n-\n-struct JPLISEnvironmentMirror {\n-  jvmtiEnv* mJVMTIEnv;         \/\/ the JVMTI environment\n-  JPLISAgentMirror* mAgent;    \/\/ corresponding agent\n-  jboolean  mIsRetransformer;  \/\/ indicates if special environment\n-};\n-\n@@ -53,1 +44,1 @@\n-  const JPLISAgentMirror* _jplis;\n+  const void* _jplis;\n@@ -62,1 +53,1 @@\n-  void set_jplis(const JPLISAgentMirror* jplis);\n+  void set_jplis(const void* jplis);\n@@ -81,1 +72,1 @@\n-  bool is_jplis(const JPLISAgentMirror* jplis) const;\n+  bool is_jplis(const void* jplis) const;\n","filename":"src\/hotspot\/share\/prims\/agent.hpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"jvmtifiles\/jvmtiEnv.hpp\"\n@@ -221,0 +222,32 @@\n+\/*\n+ * The implementation builds a mapping bewteen JVMTI envs and JPLIS agents,\n+ * using internal JDK implementation knowledge about the way JPLIS agents\n+ * store data in their JvmtiEnv local storage.\n+ *\n+ * Please see JPLISAgent.c in module java.instrument, see JPLISAgent.h and JPLISAgent.c.\n+ *\n+ * jvmtierror = (*jvmtienv)->SetEnvironmentLocalStorage( jvmtienv, &(agent->mNormalEnvironment));\n+ *\n+ * It is the pointer to the field agent->mNormalEnvironment that is stored in the jvmtiEnv local storage.\n+ * It has the following type:\n+ *\n+ * struct _JPLISEnvironment {\n+ *   jvmtiEnv*   mJVMTIEnv;              \/\/ the JVM TI environment\n+ *   JPLISAgent* mAgent;                 \/\/ corresponding agent\n+ *   jboolean    mIsRetransformer;       \/\/ indicates if special environment\n+ * };\n+ *\n+ * We mirror this struct to get the mAgent field as an identifier.\n+ *\/\n+\n+struct JPLISEnvironmentMirror {\n+  jvmtiEnv* mJVMTIEnv; \/\/ the JVMTI environment\n+  const void* mAgent;  \/\/ corresponding agent\n+  jboolean mIsRetransformer; \/\/ indicates if special environment\n+};\n+\n+static inline const JPLISEnvironmentMirror* get_env_local_storage(JvmtiEnv* env) {\n+  assert(env != nullptr, \"invariant\");\n+  return reinterpret_cast<const JPLISEnvironmentMirror*>(env->get_env_local_storage());\n+}\n+\n@@ -252,1 +285,1 @@\n-  const JPLISEnvironmentMirror* const jplis_env = reinterpret_cast<const JPLISEnvironmentMirror*>(env->get_env_local_storage());\n+  const JPLISEnvironmentMirror* const jplis_env = get_env_local_storage(env);\n@@ -582,1 +615,1 @@\n-  const JPLISEnvironmentMirror* const jplis_env = reinterpret_cast<const JPLISEnvironmentMirror*>(env->get_env_local_storage());\n+  const JPLISEnvironmentMirror* const jplis_env = get_env_local_storage(env);\n","filename":"src\/hotspot\/share\/prims\/agentList.cpp","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"}]}