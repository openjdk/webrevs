{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-            return readLinkImpl(handle);\n+            return readLinkImpl(path, handle);\n@@ -300,1 +300,3 @@\n-    private static String readLinkImpl(long handle) throws IOException {\n+    private static String readLinkImpl(WindowsPath path, long handle)\n+        throws IOException\n+    {\n@@ -306,5 +308,1 @@\n-                String filename = null;\n-                try {\n-                    filename = GetFinalPathNameByHandle(handle);\n-                } catch (WindowsException ignore) {\n-                }\n+                String pathname = path.getPathForExceptionMessage();\n@@ -312,2 +310,2 @@\n-                    throw new NotLinkException(filename, null, x.errorString());\n-                x.rethrowAsIOException(filename + \": \" + x.errorString());\n+                    throw new NotLinkException(pathname, null, x.errorString());\n+                x.rethrowAsIOException(pathname + \": \" + x.errorString());\n@@ -349,6 +347,2 @@\n-                String filename = null;\n-                try {\n-                    filename = GetFinalPathNameByHandle(handle);\n-                } catch (WindowsException ignore) {\n-                }\n-                throw new NotLinkException(filename, null, \"Reparse point is not a symbolic link\");\n+                String pathname = path.getPathForExceptionMessage();\n+                throw new NotLinkException(pathname, null, \"Reparse point is not a symbolic link\");\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -138,1 +138,0 @@\n-            Files.createFile(myfile);\n@@ -153,13 +152,0 @@\n-            try {\n-                Path mytarget = Files.readSymbolicLink(myfile);\n-            } catch (NotLinkException expected) {\n-                String filename = myfile.getFileName().toString();\n-                String message = expected.getMessage();\n-                boolean okay = message.contains(filename);\n-                if (!okay) {\n-                    System.err.println(\"Message \\\"\" + message + \"\\\"\" +\n-                        \" does not contain the filename \\\"\" +\n-                        filename + \"\\\"\");\n-                    assertTrue(okay);\n-                }\n-            }\n@@ -167,1 +153,0 @@\n-            Files.deleteIfExists(myfile);\n","filename":"test\/jdk\/java\/nio\/file\/Files\/Links.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}