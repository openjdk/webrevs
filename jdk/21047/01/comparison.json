{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-            return readLinkImpl(handle);\n+            return readLinkImpl(path, handle);\n@@ -300,1 +300,3 @@\n-    private static String readLinkImpl(long handle) throws IOException {\n+    private static String readLinkImpl(WindowsPath path, long handle)\n+        throws IOException\n+    {\n@@ -306,1 +308,1 @@\n-                \/\/ FIXME: exception doesn't have file name\n+                String pathname = path.getPathForExceptionMessage();\n@@ -308,2 +310,2 @@\n-                    throw new NotLinkException(null, null, x.errorString());\n-                x.rethrowAsIOException((String)null);\n+                    throw new NotLinkException(pathname, null, x.errorString());\n+                x.rethrowAsIOException(pathname + \": \" + x.errorString());\n@@ -345,2 +347,2 @@\n-                \/\/ FIXME: exception doesn't have file name\n-                throw new NotLinkException(null, null, \"Reparse point is not a symbolic link\");\n+                String pathname = path.getPathForExceptionMessage();\n+                throw new NotLinkException(pathname, null, \"Reparse point is not a symbolic link\");\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333 6863864\n+ * @bug 4313887 6838333 6863864 8340329\n@@ -48,1 +48,1 @@\n-     * Exercise createSymbolicLink and readLink methods\n+     * Exercise createSymbolicLink and readSymbolicLink methods\n@@ -134,0 +134,21 @@\n+\n+        \/\/ Check message of NotLinkException\n+        try {\n+            Files.createDirectory(mydir);\n+\n+            try {\n+                Path mytarget = Files.readSymbolicLink(mydir);\n+            } catch (NotLinkException expected) {\n+                String filename = mydir.getFileName().toString();\n+                String message = expected.getMessage();\n+                boolean okay = message.contains(filename);\n+                if (!okay) {\n+                    System.err.println(\"Message \\\"\" + message + \"\\\"\" +\n+                        \" does not contain the filename \\\"\" +\n+                        filename + \"\\\"\");\n+                    assertTrue(okay);\n+                }\n+            }\n+        } finally {\n+            Files.deleteIfExists(mydir);\n+        }\n","filename":"test\/jdk\/java\/nio\/file\/Files\/Links.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"}]}