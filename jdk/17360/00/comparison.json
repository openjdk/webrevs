{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -79,1 +81,1 @@\n-    private SafePath dumpOnExitDirectory = new SafePath(\".\");\n+    private SafePath dumpDirectory;\n@@ -92,1 +94,1 @@\n-    private AccessControlContext noDestinationDumpOnExitAccessControlContext;\n+    private final AccessControlContext dumpDirectoryControlContext;\n@@ -102,1 +104,1 @@\n-        \/\/ but if no destination is set and dumpOnExit=true\n+        \/\/ but if no destination is set and the filename is auto-generated,\n@@ -106,1 +108,1 @@\n-        this.noDestinationDumpOnExitAccessControlContext = AccessController.getContext();\n+        this.dumpDirectoryControlContext = AccessController.getContext();\n@@ -177,1 +179,3 @@\n-\n+        if (dest == null && dumpDirectory != null) {\n+            dest = makeDumpPath();\n+        }\n@@ -194,0 +198,27 @@\n+    @SuppressWarnings(\"removal\")\n+    public WriteableUserPath makeDumpPath() {\n+        try {\n+            String name = JVMSupport.makeFilename(getRecording());\n+            return AccessController.doPrivileged(new PrivilegedExceptionAction<WriteableUserPath>() {\n+                @Override\n+                public WriteableUserPath run() throws Exception {\n+                    SafePath p = dumpDirectory;\n+                    if (p == null) {\n+                        p = new SafePath(\".\");\n+                    }\n+                    return new WriteableUserPath(p.toPath().resolve(name));\n+                }\n+            }, dumpDirectoryControlContext);\n+        } catch (PrivilegedActionException e) {\n+            Throwable t = e.getCause();\n+            if (t instanceof SecurityException) {\n+                Logger.log(LogTag.JFR, LogLevel.WARN, \"Not allowed to create dump path for recording \" + recording.getId() + \" on exit.\");\n+            }\n+            if (t instanceof IOException) {\n+                Logger.log(LogTag.JFR, LogLevel.WARN, \"Could not dump \" + recording.getId() + \" on exit.\");\n+            }\n+            return null;\n+        }\n+    }\n+\n+\n@@ -700,5 +731,0 @@\n-    @SuppressWarnings(\"removal\")\n-    public AccessControlContext getNoDestinationDumpOnExitAccessControlContext() {\n-        return noDestinationDumpOnExitAccessControlContext;\n-    }\n-\n@@ -831,6 +857,7 @@\n-    public void setDumpOnExitDirectory(SafePath directory) {\n-       this.dumpOnExitDirectory = directory;\n-    }\n-\n-    public SafePath getDumpOnExitDirectory()  {\n-        return this.dumpOnExitDirectory;\n+    \/**\n+     * Sets the dump directory.\n+     * <p>\n+     * Only to be used by DCmdStart.\n+     *\/\n+    public void setDumpDirectory(SafePath directory) {\n+       this.dumpDirectory = directory;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecording.java","additions":44,"deletions":17,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-                dest = makeDumpOnExitPath(recording);\n+                dest = recording.makeDumpPath();\n@@ -81,23 +81,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private WriteableUserPath makeDumpOnExitPath(PlatformRecording recording) {\n-        try {\n-            String name = JVMSupport.makeFilename(recording.getRecording());\n-            AccessControlContext acc = recording.getNoDestinationDumpOnExitAccessControlContext();\n-            return AccessController.doPrivileged(new PrivilegedExceptionAction<WriteableUserPath>() {\n-                @Override\n-                public WriteableUserPath run() throws Exception {\n-                    return new WriteableUserPath(recording.getDumpOnExitDirectory().toPath().resolve(name));\n-                }\n-            }, acc);\n-        } catch (PrivilegedActionException e) {\n-            Throwable t = e.getCause();\n-            if (t instanceof SecurityException) {\n-                Logger.log(LogTag.JFR, LogLevel.WARN, \"Not allowed to create dump path for recording \" + recording.getId() + \" on exit.\");\n-            }\n-            if (t instanceof IOException) {\n-                Logger.log(LogTag.JFR, LogLevel.WARN, \"Could not dump \" + recording.getId() + \" on exit.\");\n-            }\n-            return null;\n-        }\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ShutdownHook.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n@@ -168,1 +170,1 @@\n-                if (Files.isDirectory(p) && Boolean.TRUE.equals(dumpOnExit)) {\n+                if (Files.isDirectory(p)) {\n@@ -172,1 +174,2 @@\n-                    PrivateAccess.getInstance().getPlatformRecording(recording).setDumpOnExitDirectory(new SafePath(p));\n+                    PlatformRecording pr = PrivateAccess.getInstance().getPlatformRecording(recording);\n+                    pr.setDumpDirectory(new SafePath(p));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.jcmd;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.FlightRecorderListener;\n+import jdk.jfr.Recording;\n+import jdk.jfr.RecordingState;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @summary Verify that a filename is generated\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.jcmd.TestJcmdStartGeneratedFilename\n+ *\/\n+public class TestJcmdStartGeneratedFilename {\n+\n+    public static void main(String[] args) throws Exception {\n+        CountDownLatch recordingClosed = new CountDownLatch(1);\n+        FlightRecorder.addListener(new FlightRecorderListener() {\n+            public void recordingStateChanged(Recording recording) {\n+                if (recording.getState() == RecordingState.CLOSED) {\n+                    recordingClosed.countDown();\n+                }\n+            }\n+        });\n+        Path directory = Paths.get(\".\", \"recordings\");\n+        Files.createDirectories(directory);\n+        JcmdHelper.jcmd(\"JFR.start\", \"duration=1s\", \"filename=\" + directory);\n+        recordingClosed.await();\n+        for (Path path : Files.list(directory).toList()) {\n+            String file = path.toString();\n+            System.out.println(\"Found file: \" + file);\n+            if (file.endsWith(\".jfr\") && file.contains(\"hotspot-\")) {\n+                return;\n+            }\n+        }\n+        throw new Exception(\"Expected dump file on the format hotspot-...jfr\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdStartGeneratedFilename.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}