{"files":[{"patch":"@@ -98,0 +98,12 @@\n+        enum Tack {\n+            STARBOARD,\n+            PORTSIDE;\n+        }\n+\n+        @Test\n+        @Parameter({\"STARBOARD\"})\n+        @Parameter({\"PORTSIDE\", \"STARBOARD\"})\n+        public void testEnumVarArg(Tack ... cource) {\n+            recordTestCase((Object[]) cource);\n+        }\n+\n@@ -121,0 +133,2 @@\n+                    \"().testEnumVarArg(STARBOARD)\",\n+                    \"().testEnumVarArg(PORTSIDE, STARBOARD)\",\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/AnnotationsTest.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -206,0 +206,11 @@\n+    public JPackageCommand mutate(Consumer<JPackageCommand> mutator) {\n+        return mutate(List.of(mutator));\n+    }\n+\n+    public JPackageCommand mutate(Iterable<Consumer<JPackageCommand>> mutators) {\n+        for (var mutator : mutators) {\n+            mutator.accept(this);\n+        }\n+        return this;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import java.util.function.Consumer;\n@@ -373,0 +374,10 @@\n+    public static Consumer<JPackageCommand> useKeychain(MacSign.ResolvedKeychain keychain) {\n+        return useKeychain(keychain.spec().keychain());\n+    }\n+\n+    public static Consumer<JPackageCommand> useKeychain(MacSign.Keychain keychain) {\n+        return cmd -> {\n+            useKeychain(cmd, keychain);\n+        };\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import static jdk.jpackage.internal.util.PListWriter.writeBoolean;\n@@ -26,1 +27,0 @@\n-import static jdk.jpackage.internal.util.PListWriter.writeBoolean;\n@@ -29,0 +29,1 @@\n+import static jdk.jpackage.internal.util.function.ThrowingConsumer.toConsumer;\n@@ -32,2 +33,6 @@\n-import java.util.Date;\n-\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.test.AdditionalLauncher;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -35,0 +40,3 @@\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.MacHelper.SignKeyOption;\n+import jdk.jpackage.test.MacSign;\n@@ -36,2 +44,0 @@\n-import jdk.jpackage.test.Annotations.Test;\n-import jdk.jpackage.test.Annotations.Parameter;\n@@ -64,1 +70,1 @@\n-    void createEntitlementsFile(Path file, boolean microphone) throws IOException {\n+    private static void createEntitlementsFile(Path file, boolean microphone) throws IOException {\n@@ -80,14 +86,3 @@\n-    @Test\n-    \/\/ ({\"--mac-app-store\", doMacEntitlements\", \"doResources\"})\n-    @Parameter({\"false\", \"true\", \"false\"})\n-    @Parameter({\"false\", \"false\", \"true\"})\n-    @Parameter({\"false\", \"true\", \"true\"})\n-    @Parameter({\"true\", \"true\", \"false\"})\n-    @Parameter({\"true\", \"false\", \"true\"})\n-    @Parameter({\"true\", \"true\", \"true\"})\n-    public void test(boolean appStore, boolean doMacEntitlements, boolean doResources) throws Exception {\n-        final Path macEntitlementsFile;\n-        final Path resourcesDir;\n-\n-        if (doMacEntitlements) {\n-            macEntitlementsFile = TKit.createTempFile(\"EntitlementsTest.plist\");\n+    public enum EntitlementsSource implements Consumer<JPackageCommand> {\n+        CMDLINE(cmd -> {\n+            var macEntitlementsFile = TKit.createTempFile(\"foo.plist\");\n@@ -95,3 +90,6 @@\n-        } else {\n-            macEntitlementsFile = null;\n-        }\n+            cmd.addArguments(\"--mac-entitlements\", macEntitlementsFile);\n+        }),\n+        RESOURCE_DIR(cmd -> {\n+            if (!cmd.hasArgument(\"--resource-dir\")) {\n+                cmd.setArgumentValue(\"--resource-dir\", TKit.createTempDirectory(\"resources\"));\n+            }\n@@ -99,6 +97,4 @@\n-        if (doResources) {\n-            resourcesDir = TKit.createTempDirectory(\"resources\");\n-            createEntitlementsFile(resourcesDir.resolve(\"EntitlementsTest.entitlements\"), false);\n-        } else {\n-            resourcesDir = null;\n-        }\n+            var resourcesDir = Path.of(cmd.getArgumentValue(\"--resource-dir\"));\n+            createEntitlementsFile(resourcesDir.resolve(cmd.name() + \".entitlements\"), false);\n+        }),\n+        ;\n@@ -106,6 +102,2 @@\n-        JPackageCommand cmd = JPackageCommand.helloAppImage()\n-                .addArguments(\"--mac-sign\", \"--mac-signing-keychain\",\n-                        SigningBase.getKeyChain(), \"--mac-app-image-sign-identity\",\n-                        SigningBase.getAppCert(SigningBase.CertIndex.ASCII_INDEX.value()));\n-        if (appStore) {\n-            cmd.addArguments(\"--mac-app-store\");\n+        EntitlementsSource(ThrowingConsumer<JPackageCommand> initializer) {\n+            this.initializer = toConsumer(initializer);\n@@ -113,7 +105,4 @@\n-        if (doMacEntitlements) {\n-            cmd.addArguments(\"--mac-entitlements\",\n-                    macEntitlementsFile.toAbsolutePath().toString());\n-        }\n-        if (doResources) {\n-            cmd.addArguments(\"--resource-dir\",\n-                    resourcesDir.toAbsolutePath().toString());\n+\n+        @Override\n+        public void accept(JPackageCommand cmd) {\n+            initializer.accept(cmd);\n@@ -122,0 +111,41 @@\n+        private final Consumer<JPackageCommand> initializer;\n+    }\n+\n+    @Test\n+    @Parameter({\"CMDLINE\"})\n+    @Parameter({\"RESOURCE_DIR\"})\n+    @Parameter({\"CMDLINE\", \"RESOURCE_DIR\"})\n+    public static void test(EntitlementsSource... entitlementsSources) {\n+        MacSign.withKeychain(toConsumer(keychain -> {\n+            test(keychain, Stream.of(entitlementsSources));\n+        }), SigningBase.StandardKeychain.MAIN.keychain());\n+    }\n+\n+    @Test\n+    @Parameter({\"CMDLINE\"})\n+    @Parameter({\"RESOURCE_DIR\"})\n+    @Parameter({\"CMDLINE\", \"RESOURCE_DIR\"})\n+    public static void testAppStore(EntitlementsSource... entitlementsSources) {\n+        MacSign.withKeychain(toConsumer(keychain -> {\n+            test(keychain, Stream.concat(Stream.of(cmd -> {\n+                cmd.addArguments(\"--mac-app-store\");\n+                \/\/ Ignore externally supplied runtime as it may have the \"bin\"\n+                \/\/ directory that will cause jpackage to bail out.\n+                cmd.ignoreDefaultRuntime(true);\n+            }), Stream.of(entitlementsSources)));\n+        }), SigningBase.StandardKeychain.MAIN.keychain());\n+    }\n+\n+    private static void test(MacSign.ResolvedKeychain keychain, Stream<Consumer<JPackageCommand>> mutators) {\n+\n+        var cmd = JPackageCommand.helloAppImage();\n+\n+        cmd.mutate(MacHelper.useKeychain(keychain)).mutate(new SignKeyOption(\n+                SignKeyOption.Type.SIGN_KEY_IDENTITY,\n+                SigningBase.StandardCertificateRequest.CODESIGN.spec()\n+        )::addTo);\n+\n+        cmd.mutate(new AdditionalLauncher(\"x\")::applyTo);\n+\n+        mutators.forEach(cmd::mutate);\n+\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/EntitlementsTest.java","additions":72,"deletions":42,"binary":false,"changes":114,"status":"modified"}]}