{"files":[{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -484,1 +482,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -486,8 +483,4 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<Method[]>() {\n-                public Method[] run() {\n-                    final Method[] methods = type.getDeclaredMethods();\n-                    validateAnnotationMethods(methods);\n-                    AccessibleObject.setAccessible(methods, true);\n-                    return methods;\n-                }});\n+        final Method[] methods = type.getDeclaredMethods();\n+        validateAnnotationMethods(methods);\n+        AccessibleObject.setAccessible(methods, true);\n+        return methods;\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationInvocationHandler.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+\n@@ -295,1 +294,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -299,6 +297,3 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<Annotation>() {\n-            public Annotation run() {\n-                return (Annotation) Proxy.newProxyInstance(\n-                    type.getClassLoader(), new Class<?>[] { type },\n-                    new AnnotationInvocationHandler(type, memberValues));\n-            }});\n+        return (Annotation) Proxy.newProxyInstance(\n+                type.getClassLoader(), new Class<?>[] { type },\n+                new AnnotationInvocationHandler(type, memberValues));\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationParser.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -184,1 +182,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -228,13 +225,2 @@\n-                    if (System.getSecurityManager() != null) {\n-                        toInvoke = AccessController.doPrivileged(new PrivilegedAction<Method>() {\n-                            @Override\n-                            public Method run() {\n-                                Method res = ReflectionFactory.getReflectionFactory().leafCopyMethod(m);\n-                                res.setAccessible(true);\n-                                return res;\n-                            }\n-                        });\n-                    } else {\n-                        toInvoke = ReflectionFactory.getReflectionFactory().leafCopyMethod(m);\n-                        toInvoke.setAccessible(true);\n-                    }\n+                    toInvoke = ReflectionFactory.getReflectionFactory().leafCopyMethod(m);\n+                    toInvoke.setAccessible(true);\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationSupport.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+\n@@ -108,8 +107,2 @@\n-        @SuppressWarnings(\"removal\")\n-        Method[] methods =\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public Method[] run() {\n-                    \/\/ Initialize memberTypes and defaultValues\n-                    return annotationClass.getDeclaredMethods();\n-                }\n-            });\n+        \/\/ Initialize memberTypes and defaultValues\n+        Method[] methods = annotationClass.getDeclaredMethods();\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationType.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"}]}