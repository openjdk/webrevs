{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n- * @LastModified: Nov 2023\n+ * @LastModified: Jan 2024\n@@ -187,0 +187,3 @@\n+        if (XMLInputFactory.SUPPORT_DTD.equals(property)) {\n+            return fSecurityManager.is(XMLSecurityManager.Limit.STAX_SUPPORT_DTD);\n+        }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: Jan 2024\n@@ -1834,0 +1834,5 @@\n+            \/\/ Handle properties managed by XMLSecurityManager\n+            if (featureId.equals(XMLSecurityManager.DISALLOW_DTD)) {\n+                return securityManager.is(XMLSecurityManager.Limit.XERCES_DISALLOW_DTD);\n+            }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/AbstractSAXParser.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package common.dtd;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.xml.sax.XMLReader;\n+\n+\/*\n+ * @test\n+ * @bug 8322214\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng common.dtd.DTDPropertiesTest\n+ * @summary Verifies the getProperty function on DTD properties works the same\n+ * as before the property 'jdk.xml.dtd.support' was introduced.\n+ *\/\n+public class DTDPropertiesTest {\n+    \/\/ Xerces Property\n+    public static final String DISALLOW_DTD = \"http:\/\/apache.org\/xml\/features\/disallow-doctype-decl\";\n+\n+    \/*\n+     * DataProvider for verifying Xerces' disallow-DTD feature\n+     * Fields: property name, setting (null indicates not specified), expected\n+     *\/\n+    @DataProvider(name = \"XercesProperty\")\n+    public Object[][] getXercesProperty() throws Exception {\n+        return new Object[][] {\n+            { DISALLOW_DTD, null, false},\n+            { DISALLOW_DTD, true, true},\n+            { DISALLOW_DTD, false, false},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for verifying StAX's supportDTD feature\n+     * Fields: property name, setting (null indicates not specified), expected\n+     *\/\n+    @DataProvider(name = \"StAXProperty\")\n+    public Object[][] getStAXProperty() throws Exception {\n+        return new Object[][] {\n+            { XMLInputFactory.SUPPORT_DTD, null, true},\n+            { XMLInputFactory.SUPPORT_DTD, true, true},\n+            { XMLInputFactory.SUPPORT_DTD, false, false},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies the disallow DTD feature with SAX.\n+     *\n+     * @param name the name of the property\n+     * @param setting the setting of the property, null means not specified\n+     * @param expected the expected value\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test(dataProvider = \"XercesProperty\")\n+    public void testSAX(String name, Boolean setting, Boolean expected) throws Exception {\n+        SAXParserFactory spf = SAXParserFactory.newDefaultInstance();\n+        if (setting != null) {\n+            spf.setFeature(name, setting);\n+        }\n+        Assert.assertEquals((Boolean)spf.getFeature(name), expected);\n+        System.out.println(spf.getFeature(name));\n+\n+\n+        SAXParser saxParser = spf.newSAXParser();\n+        XMLReader reader = saxParser.getXMLReader();\n+        Assert.assertEquals((Boolean)reader.getFeature(name), expected);\n+        System.out.println(reader.getFeature(name));\n+    }\n+\n+    \/**\n+     * Verifies the disallow DTD feature with DOM.\n+     *\n+     * @param name the name of the property\n+     * @param setting the setting of the property, null means not specified\n+     * @param expected the expected value\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test(dataProvider = \"XercesProperty\")\n+    public void testDOM(String name, Boolean setting, Boolean expected) throws Exception {\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n+        if (setting != null) {\n+            dbf.setFeature(name, setting);\n+        }\n+        Assert.assertEquals((Boolean)dbf.getFeature(name), expected);\n+        System.out.println(dbf.getFeature(name));\n+    }\n+\n+    \/**\n+     * Verifies the StAX's supportDTD feature.\n+     *\n+     * @param name the name of the property\n+     * @param setting the setting of the property, null means not specified\n+     * @param expected the expected value\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test(dataProvider = \"StAXProperty\")\n+    public void testStAX(String name, Boolean setting, Boolean expected) throws Exception {\n+        XMLInputFactory xif = XMLInputFactory.newInstance();\n+        if (setting != null) {\n+            xif.setProperty(name, setting);\n+        }\n+        Assert.assertEquals((Boolean)xif.getProperty(name), expected);\n+        System.out.println((Boolean)xif.getProperty(name));\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/DTDPropertiesTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}