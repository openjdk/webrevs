{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import javax.lang.model.element.TypeParameterElement;\n@@ -133,0 +134,18 @@\n+    \/**\n+     * Adds the generic type parameters.\n+     *\n+     * @param member the member to add the generic type parameters for\n+     * @param target the content to which the generic type parameters will be added\n+     *\/\n+    protected void addTypeParameters(ExecutableElement member, Content target) {\n+        Content typeParameters = getTypeParameters(member);\n+        target.add(typeParameters);\n+        \/\/ Add explicit line break between method type parameters and\n+        \/\/ return type in member summary table to avoid random wrapping.\n+        if (typeParameters.charCount() > 10) {\n+            target.add(new HtmlTree(TagName.BR));\n+        } else {\n+            target.add(Entity.NO_BREAK_SPACE);\n+        }\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -469,10 +469,2 @@\n-                Content typeParameters = ((AbstractExecutableMemberWriter) this)\n-                        .getTypeParameters((ExecutableElement)member);\n-                code.add(typeParameters);\n-                \/\/ Add explicit line break between method type parameters and\n-                \/\/ return type in member summary table to avoid random wrapping.\n-                if (typeParameters.charCount() > 10) {\n-                    code.add(new HtmlTree(TagName.BR));\n-                } else {\n-                    code.add(Entity.NO_BREAK_SPACE);\n-                }\n+                ((AbstractExecutableMemberWriter) this)\n+                  .addTypeParameters((ExecutableElement)member, code);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-        constrSubWriter.setFoundNonPubConstructor(true);\n+        constrSubWriter.setShowConstructorModifiers(true);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import javax.lang.model.element.TypeParameterElement;\n@@ -56,1 +57,11 @@\n-    private boolean foundNonPubConstructor = false;\n+    \/**\n+     * If any constructors are non-public, then we want the modifiers shown in the summary.\n+     * This implies we need a three-column summary.\n+     *\/\n+    private boolean showConstructorModifiers = false;\n+\n+    \/**\n+     * Whether any constructors have type parameters.\n+     * This implies we need a three column summary.\n+     *\/\n+    private boolean hasTypeParamsConstructor = false;\n@@ -68,5 +79,1 @@\n-        for (Element constructor : constructors) {\n-            if (utils.isProtected(constructor) || utils.isPrivate(constructor)) {\n-                setFoundNonPubConstructor(true);\n-            }\n-        }\n+        analyzeConstructors(constructors);\n@@ -97,5 +104,1 @@\n-            for (Element constructor : constructors) {\n-                if (utils.isProtected(constructor) || utils.isPrivate(constructor)) {\n-                    setFoundNonPubConstructor(true);\n-                }\n-            }\n+            analyzeConstructors(constructors);\n@@ -129,0 +132,18 @@\n+    \/\/ Calculate \"showConstructorModifiers\" and \"hasTypeParamsConstructor\"\n+    private void analyzeConstructors(List<? extends Element> constructors) {\n+        for (Element constructor : constructors) {\n+            if (utils.isProtected(constructor) || utils.isPrivate(constructor)) {\n+                setShowConstructorModifiers(true);\n+            }\n+            List<? extends TypeParameterElement> list = ((ExecutableElement)constructor).getTypeParameters();\n+            if (list != null && !list.isEmpty()) {\n+                hasTypeParamsConstructor = true;\n+            }\n+        }\n+    }\n+\n+    \/\/ Does the constructor summary need three columnns or just two?\n+    protected boolean threeColumnSummary() {\n+        return showConstructorModifiers || hasTypeParamsConstructor;\n+    }\n+\n@@ -204,0 +225,1 @@\n+                .setTypeParameters(getTypeParameters(constructor))\n@@ -234,2 +256,2 @@\n-    protected void setFoundNonPubConstructor(boolean foundNonPubConstructor) {\n-        this.foundNonPubConstructor = foundNonPubConstructor;\n+    protected void setShowConstructorModifiers(boolean showConstructorModifiers) {\n+        this.showConstructorModifiers = showConstructorModifiers;\n@@ -247,1 +269,1 @@\n-        if (foundNonPubConstructor) {\n+        if (threeColumnSummary()) {\n@@ -259,1 +281,1 @@\n-        if (foundNonPubConstructor) {\n+        if (threeColumnSummary()) {\n@@ -279,1 +301,1 @@\n-        if (foundNonPubConstructor) {\n+        if (threeColumnSummary()) {\n@@ -291,0 +313,5 @@\n+            ExecutableElement constructor = (ExecutableElement)member;\n+            List<? extends TypeParameterElement> list = constructor.getTypeParameters();\n+            if (list != null && !list.isEmpty()) {\n+                addTypeParameters(constructor, code);\n+            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriter.java","additions":43,"deletions":16,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -532,0 +532,1 @@\n+            \/\/ Note return type will be null if this is a constructor.\n@@ -542,0 +543,1 @@\n+            int returnTypeLength = returnType != null ? returnType.charCount() : 0;\n@@ -544,1 +546,1 @@\n-            if (lineLength + returnType.charCount() > RETURN_TYPE_MAX_LINE_LENGTH) {\n+            if (lineLength + returnTypeLength > RETURN_TYPE_MAX_LINE_LENGTH) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -85,2 +85,3 @@\n-                <div class=\"summary-table two-column-summary\">\n-                <div class=\"table-header col-first\">Constructor<\/div>\n+                <div class=\"summary-table three-column-summary\">\n+                <div class=\"table-header col-first\">Modifier<\/div>\n+                <div class=\"table-header col-second\">Constructor<\/div>\n@@ -88,0 +89,1 @@\n+                <div class=\"col-first even-row-color\"><code>&nbsp;<\/code><\/div>\n@@ -91,0 +93,1 @@\n+                <div class=\"col-first odd-row-color\"><code>&nbsp;&lt;T extends X&gt;<br><\/code><\/div>\n@@ -94,0 +97,1 @@\n+                <div class=\"col-first even-row-color\"><code>&nbsp;&lt;T extends Y&gt;<br><\/code><\/div>\n@@ -191,2 +195,3 @@\n-                <div class=\"summary-table two-column-summary\">\n-                <div class=\"table-header col-first\">Constructor<\/div>\n+                <div class=\"summary-table three-column-summary\">\n+                <div class=\"table-header col-first\">Modifier<\/div>\n+                <div class=\"table-header col-second\">Constructor<\/div>\n@@ -194,0 +199,1 @@\n+                <div class=\"col-first even-row-color\"><code>&nbsp;<\/code><\/div>\n@@ -198,0 +204,1 @@\n+                <div class=\"col-first odd-row-color\"><code>&nbsp;&lt;T extends X&gt;<br><\/code><\/div>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testErasure\/TestErasure.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      4927167 4974929 7010344 8025633 8081854 8182765 8187288 8261976\n+ * @bug      4927167 4974929 6381729 7010344 8025633 8081854 8182765 8187288 8261976\n@@ -32,0 +32,1 @@\n+ *           Verify that generic type parameters on constructors are documented.\n@@ -97,0 +98,21 @@\n+\n+    @Test\n+    public void test3() {\n+        javadoc(\"-d\", \"out-3\",\n+                \"-Xdoclint:none\",\n+                \"--no-platform-links\",\n+                \"-sourcepath\", testSrc,\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"pkg\/CtorTypeParam.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color\"><code>&nbsp;&lt;T extends java.lang.Runnable&gt;<br><\/code><\/div>\n+                    <div class=\"col-constructor-name even-row-color\"><code>\\\n+                    <a href=\"#%3Cinit%3E()\" class=\"member-name-link\">CtorTypeParam<\/a>()<\/code><\/div>\n+                    <div class=\"col-last even-row-color\">&nbsp;<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>\\\n+                    &nbsp;<span class=\"type-parameters\">&lt;T extends java.lang.Runnable&gt;<\/span>\\\n+                    &nbsp;<span class=\"element-name\">CtorTypeParam<\/span>()<\/div>\"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTypeParams\/TestTypeParameters.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -24,3 +24,5 @@\n-module com.foo {\n-    requires jdk.httpserver;\n-    requires net.foo;\n+package pkg;\n+\n+public class CtorTypeParam {\n+    public <T extends Runnable> CtorTypeParam() {\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTypeParams\/pkg\/CtorTypeParam.java","additions":5,"deletions":3,"binary":false,"changes":8,"previous_filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/src\/com.foo\/module-info.java","status":"copied"}]}