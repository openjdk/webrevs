{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import sun.java2d.MacosxSurfaceManagerFactory;\n@@ -42,1 +41,0 @@\n-import sun.java2d.SurfaceManagerFactory;\n@@ -73,2 +71,0 @@\n-        \/\/ Install the correct surface manager factory.\n-        SurfaceManagerFactory.setInstance(new MacosxSurfaceManagerFactory());\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsEnvironment.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.java2d;\n-\n-import sun.awt.image.SunVolatileImage;\n-import sun.awt.image.VolatileSurfaceManager;\n-import sun.awt.CGraphicsDevice;\n-import sun.java2d.metal.MTLVolatileSurfaceManager;\n-import sun.java2d.opengl.CGLVolatileSurfaceManager;\n-\n-\/**\n- * This is a factory class with static methods for creating a\n- * platform-specific instance of a particular SurfaceManager.  Each platform\n- * (Windows, Unix, etc.) has its own specialized SurfaceManagerFactory.\n- *\/\n-public class MacosxSurfaceManagerFactory extends SurfaceManagerFactory {\n-\n-    \/**\n-     * Creates a new instance of a VolatileSurfaceManager given any\n-     * arbitrary SunVolatileImage.  An optional context Object can be supplied\n-     * as a way for the caller to pass pipeline-specific context data to\n-     * the VolatileSurfaceManager (such as a backbuffer handle, for example).\n-     *\n-     * For Mac OS X, this method returns either an CGL\/MTL-specific\n-     * VolatileSurfaceManager based on the GraphicsConfiguration\n-     * under which the SunVolatileImage was created.\n-     *\/\n-    public VolatileSurfaceManager createVolatileManager(SunVolatileImage vImg,\n-                                                        Object context)\n-    {\n-        return CGraphicsDevice.usingMetalPipeline() ? new MTLVolatileSurfaceManager(vImg, context) :\n-                new CGLVolatileSurfaceManager(vImg, context);\n-    }\n-}\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/MacosxSurfaceManagerFactory.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -32,0 +32,2 @@\n+import sun.awt.image.SurfaceManager;\n+import sun.awt.image.VolatileSurfaceManager;\n@@ -70,1 +72,1 @@\n-        implements AccelGraphicsConfig\n+        implements AccelGraphicsConfig, SurfaceManager.Factory\n@@ -375,0 +377,5 @@\n+\n+    @Override\n+    public VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context) {\n+        return new MTLVolatileSurfaceManager(image, context);\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+import sun.awt.image.SurfaceManager;\n+import sun.awt.image.VolatileSurfaceManager;\n@@ -389,0 +391,5 @@\n+\n+    @Override\n+    public VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context) {\n+        return new CGLVolatileSurfaceManager(image, context);\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import sun.java2d.SurfaceManagerFactory;\n@@ -161,19 +160,9 @@\n-    protected VolatileSurfaceManager createSurfaceManager(Object context,\n-                                                          ImageCapabilities caps)\n-    {\n-        \/**\n-         * Platform-specific SurfaceManagerFactories will return a\n-         * manager suited to acceleration on each platform.  But if\n-         * the user is asking for a VolatileImage from a BufferedImageGC,\n-         * then we need to return the appropriate unaccelerated manager.\n-         * Note: this could change in the future; if some platform would\n-         * like to accelerate BIGC volatile images, then this special-casing\n-         * of the BIGC graphicsConfig should live in platform-specific\n-         * code instead.\n-         * We do the same for a Printer Device, and if user requested an\n-         * unaccelerated VolatileImage by passing the capabilities object.\n-         *\/\n-        if (graphicsConfig instanceof BufferedImageGraphicsConfig ||\n-            graphicsConfig instanceof sun.print.PrinterGraphicsConfig ||\n-            (caps != null && !caps.isAccelerated()))\n-        {\n+    private VolatileSurfaceManager createSurfaceManager(Object context,\n+                                                        ImageCapabilities caps) {\n+        \/\/ GraphicsConfig may provide some specific surface manager implementation.\n+        \/\/ In case it doesn't, or we were specifically requested to use an unaccelerated\n+        \/\/ surface, fall back to the buffered image surface manager.\n+        if ((caps == null || caps.isAccelerated()) &&\n+            graphicsConfig instanceof SurfaceManager.Factory factory) {\n+            return factory.createVolatileManager(this, context);\n+        } else {\n@@ -182,2 +171,0 @@\n-        SurfaceManagerFactory smf = SurfaceManagerFactory.getInstance();\n-        return smf.createVolatileManager(this, context);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/SunVolatileImage.java","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -186,0 +186,15 @@\n+    \/**\n+     * An interface for GraphicsConfiguration objects to implement if\n+     * they create their own VolatileSurfaceManager implementations.\n+     *\/\n+    public interface Factory {\n+\n+        \/**\n+         * Creates a new instance of a VolatileSurfaceManager given a\n+         * compatible SunVolatileImage. An optional context Object can be supplied\n+         * as a way for the caller to pass pipeline-specific context data to\n+         * the VolatileSurfaceManager (such as a backbuffer handle, for example).\n+         *\/\n+        VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context);\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/SurfaceManager.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.java2d;\n-\n-import sun.awt.image.SunVolatileImage;\n-import sun.awt.image.VolatileSurfaceManager;\n-\n-\/**\n- * This factory creates platform specific VolatileSurfaceManager\n- * implementations.\n- *\n- * There are two platform specific SurfaceManagerFactories in OpenJDK,\n- * UnixSurfaceManagerFactory and WindowsSurfaceManagerFactory.\n- * The actually used SurfaceManagerFactory is set by the respective platform\n- * GraphicsEnvironment implementations in the static initializer.\n- *\/\n-public abstract class SurfaceManagerFactory {\n-\n-    \/**\n-     * The single shared instance.\n-     *\/\n-    private static SurfaceManagerFactory instance;\n-\n-    \/**\n-     * Returns the surface manager factory instance. This returns a factory\n-     * that has been set by {@link #setInstance(SurfaceManagerFactory)}.\n-     *\n-     * @return the surface manager factory\n-     *\/\n-    public static synchronized SurfaceManagerFactory getInstance() {\n-\n-        if (instance == null) {\n-            throw new IllegalStateException(\"No SurfaceManagerFactory set.\");\n-        }\n-        return instance;\n-    }\n-\n-    \/**\n-     * Sets the surface manager factory. This may only be called once, and it\n-     * may not be set back to {@code null} when the factory is already\n-     * instantiated.\n-     *\n-     * @param factory the factory to set\n-     *\/\n-    public static synchronized void setInstance(SurfaceManagerFactory factory) {\n-\n-        if (factory == null) {\n-            \/\/ We don't want to allow setting this to null at any time.\n-            throw new IllegalArgumentException(\"factory must be non-null\");\n-        }\n-\n-        if (instance != null) {\n-            \/\/ We don't want to re-set the instance at any time.\n-            throw new IllegalStateException(\"The surface manager factory is already initialized\");\n-        }\n-\n-        instance = factory;\n-    }\n-\n-    \/**\n-     * Creates a new instance of a VolatileSurfaceManager given any\n-     * arbitrary SunVolatileImage.  An optional context Object can be supplied\n-     * as a way for the caller to pass pipeline-specific context data to\n-     * the VolatileSurfaceManager (such as a backbuffer handle, for example).\n-     *\/\n-     public abstract VolatileSurfaceManager\n-         createVolatileManager(SunVolatileImage image, Object context);\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SurfaceManagerFactory.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-    AccelGraphicsConfig, SurfaceManager.ProxiedGraphicsConfig\n+    AccelGraphicsConfig, SurfaceManager.ProxiedGraphicsConfig, SurfaceManager.Factory\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/opengl\/OGLGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import sun.awt.image.VolatileSurfaceManager;\n@@ -58,0 +59,1 @@\n+import sun.java2d.x11.X11VolatileSurfaceManager;\n@@ -67,1 +69,1 @@\n-    implements SurfaceManager.ProxiedGraphicsConfig\n+    implements SurfaceManager.ProxiedGraphicsConfig, SurfaceManager.Factory\n@@ -503,0 +505,5 @@\n+\n+    @Override\n+    public VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context) {\n+        return new X11VolatileSurfaceManager(image, context);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-import sun.java2d.SurfaceManagerFactory;\n-import sun.java2d.UnixSurfaceManagerFactory;\n@@ -127,4 +125,0 @@\n-\n-        \/\/ Install the correct surface manager factory.\n-        SurfaceManagerFactory.setInstance(new UnixSurfaceManagerFactory());\n-\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsEnvironment.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-package sun.java2d;\n-\n-import java.awt.GraphicsConfiguration;\n-\n-import sun.awt.image.SunVolatileImage;\n-import sun.awt.image.VolatileSurfaceManager;\n-import sun.java2d.opengl.GLXGraphicsConfig;\n-import sun.java2d.opengl.GLXVolatileSurfaceManager;\n-import sun.java2d.x11.X11VolatileSurfaceManager;\n-import sun.java2d.xr.*;\n-\n-\/**\n- * The SurfaceManagerFactory that creates VolatileSurfaceManager\n- * implementations for the Unix volatile images.\n- *\/\n-public class UnixSurfaceManagerFactory extends SurfaceManagerFactory {\n-\n-    \/**\n-     * Creates a new instance of a VolatileSurfaceManager given any\n-     * arbitrary SunVolatileImage.  An optional context Object can be supplied\n-     * as a way for the caller to pass pipeline-specific context data to\n-     * the VolatileSurfaceManager (such as a backbuffer handle, for example).\n-     *\n-     * For Unix platforms, this method returns either an X11- or a GLX-\n-     * specific VolatileSurfaceManager based on the GraphicsConfiguration\n-     * under which the SunVolatileImage was created.\n-     *\/\n-    public VolatileSurfaceManager createVolatileManager(SunVolatileImage vImg,\n-                                                        Object context)\n-    {\n-        GraphicsConfiguration gc = vImg.getGraphicsConfig();\n-\n-        if (gc instanceof GLXGraphicsConfig) {\n-            return new GLXVolatileSurfaceManager(vImg, context);\n-        } else if(gc instanceof XRGraphicsConfig) {\n-            return new XRVolatileSurfaceManager(vImg, context);\n-        }else {\n-            return new X11VolatileSurfaceManager(vImg, context);\n-        }\n-    }\n-\n-}\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/UnixSurfaceManagerFactory.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -52,0 +52,1 @@\n+import sun.awt.image.VolatileSurfaceManager;\n@@ -416,0 +417,5 @@\n+\n+    @Override\n+    public VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context) {\n+        return new GLXVolatileSurfaceManager(image, context);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import sun.awt.image.SunVolatileImage;\n+import sun.awt.image.VolatileSurfaceManager;\n@@ -36,1 +38,1 @@\n-        SurfaceManager.ProxiedGraphicsConfig {\n+        SurfaceManager.ProxiedGraphicsConfig, SurfaceManager.Factory {\n@@ -62,0 +64,5 @@\n+\n+    @Override\n+    public VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context) {\n+        return new XRVolatileSurfaceManager(image, context);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRGraphicsConfig.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-import sun.java2d.SurfaceManagerFactory;\n-import sun.java2d.WindowsSurfaceManagerFactory;\n@@ -66,3 +64,0 @@\n-        \/\/ Install correct surface manager factory.\n-        SurfaceManagerFactory.setInstance(new WindowsSurfaceManagerFactory());\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsEnvironment.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.java2d;\n-\n-import java.awt.GraphicsConfiguration;\n-import sun.awt.image.BufImgVolatileSurfaceManager;\n-import sun.awt.image.SunVolatileImage;\n-import sun.awt.image.VolatileSurfaceManager;\n-import sun.java2d.d3d.D3DGraphicsConfig;\n-import sun.java2d.d3d.D3DVolatileSurfaceManager;\n-import sun.java2d.opengl.WGLGraphicsConfig;\n-import sun.java2d.opengl.WGLVolatileSurfaceManager;\n-\n-\/**\n- * The SurfaceManagerFactory that creates VolatileSurfaceManager\n- * implementations for the Windows volatile images.\n- *\/\n-public final class WindowsSurfaceManagerFactory extends SurfaceManagerFactory {\n-\n-    \/**\n-     * Creates a new instance of a VolatileSurfaceManager given any\n-     * arbitrary SunVolatileImage.  An optional context Object can be supplied\n-     * as a way for the caller to pass pipeline-specific context data to\n-     * the VolatileSurfaceManager (such as a backbuffer handle, for example).\n-     *\n-     * For Windows platforms, this method returns a Windows-specific\n-     * VolatileSurfaceManager.\n-     *\/\n-    @Override\n-    public VolatileSurfaceManager createVolatileManager(SunVolatileImage vImg,\n-                                                        Object context)\n-    {\n-        GraphicsConfiguration gc = vImg.getGraphicsConfig();\n-        if (gc instanceof D3DGraphicsConfig) {\n-            return new D3DVolatileSurfaceManager(vImg, context);\n-        } else if (gc instanceof WGLGraphicsConfig) {\n-            return new WGLVolatileSurfaceManager(vImg, context);\n-        } else {\n-            return new BufImgVolatileSurfaceManager(vImg, context);\n-        }\n-    }\n-\n-}\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/WindowsSurfaceManagerFactory.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -42,0 +42,1 @@\n+import sun.awt.image.VolatileSurfaceManager;\n@@ -54,1 +55,1 @@\n-    implements AccelGraphicsConfig\n+    implements AccelGraphicsConfig, SurfaceManager.Factory\n@@ -310,0 +311,5 @@\n+\n+    @Override\n+    public VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context) {\n+        return new D3DVolatileSurfaceManager(image, context);\n+    }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DGraphicsConfig.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import sun.awt.image.VolatileSurfaceManager;\n@@ -435,0 +436,5 @@\n+\n+    @Override\n+    public VolatileSurfaceManager createVolatileManager(SunVolatileImage image, Object context) {\n+        return new WGLVolatileSurfaceManager(image, context);\n+    }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/opengl\/WGLGraphicsConfig.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}