{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,0 @@\n-import java.io.FilePermission;\n@@ -68,1 +67,0 @@\n-import java.io.UncheckedIOException;\n@@ -72,2 +70,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -91,0 +87,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -294,4 +291,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String javaHome = AccessController.doPrivileged((PrivilegedAction<String>)\n-                        () -> System.getProperty(\"java.home\"));\n-        CONF_PATH = Path.of(javaHome, \"conf\", \"chronology\");\n+        CONF_PATH = Path.of(StaticProperty.javaHome(), \"conf\", \"chronology\");\n@@ -827,13 +821,3 @@\n-        PrivilegedAction<InputStream> getResourceAction =  calendarType.equals(\"islamic-umalqura\") ?\n-            () -> HijrahChronology.class.getResourceAsStream(resourceName) :\n-            () -> {\n-                try {\n-                    return Files.newInputStream(CONF_PATH.resolve(resourceName),\n-                            StandardOpenOption.READ);\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            };\n-        FilePermission perm1 = new FilePermission(\"<<ALL FILES>>\", \"read\");\n-        RuntimePermission perm2 = new RuntimePermission(\"accessSystemModules\");\n-        try (@SuppressWarnings(\"removal\") InputStream is = AccessController.doPrivileged(getResourceAction, null, perm1, perm2)) {\n+        try (InputStream is = calendarType.equals(\"islamic-umalqura\")\n+                ? HijrahChronology.class.getResourceAsStream(resourceName)\n+                : Files.newInputStream(CONF_PATH.resolve(resourceName), StandardOpenOption.READ)) {\n@@ -1034,1 +1018,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1036,30 +1019,25 @@\n-        AccessController.doPrivileged(\n-            (PrivilegedAction<Void>)() -> {\n-                if (Files.isDirectory(CONF_PATH)) {\n-                    try (Stream<Path> stream = Files.list(CONF_PATH)) {\n-                        stream.map(p -> p.getFileName().toString())\n-                            .filter(fn -> fn.matches(\"hijrah-config-[^\\\\.]+\\\\.properties\"))\n-                            .map(fn -> fn.replaceAll(\"(hijrah-config-|\\\\.properties)\", \"\"))\n-                            .forEach(idtype -> {\n-                                int delimiterPos = idtype.indexOf('_');\n-                                \/\/ '_' should be somewhere in the middle of idtype\n-                                if (delimiterPos > 1 && delimiterPos < idtype.length() - 1) {\n-                                    AbstractChronology.registerChrono(\n-                                        new HijrahChronology(\n-                                                idtype.substring(0, delimiterPos),\n-                                                idtype.substring(delimiterPos + 1)));\n-                                } else {\n-                                    PlatformLogger.getLogger(\"java.time.chrono\")\n-                                            .warning(\"Hijrah custom config init failed.\" +\n-                                                    \"'<id>_<type>' name convention not followed: \" + idtype);\n-                                }\n-                            });\n-                    } catch (IOException e) {\n-                        PlatformLogger.getLogger(\"java.time.chrono\")\n-                                .warning(\"Hijrah custom config init failed.\", e);\n-                    }\n-                }\n-                return null;\n-            },\n-            null,\n-            new FilePermission(\"<<ALL FILES>>\", \"read\"));\n+\n+        if (Files.isDirectory(CONF_PATH)) {\n+            try (Stream<Path> stream = Files.list(CONF_PATH)) {\n+                stream.map(p -> p.getFileName().toString())\n+                    .filter(fn -> fn.matches(\"hijrah-config-[^\\\\.]+\\\\.properties\"))\n+                    .map(fn -> fn.replaceAll(\"(hijrah-config-|\\\\.properties)\", \"\"))\n+                    .forEach(idtype -> {\n+                        int delimiterPos = idtype.indexOf('_');\n+                        \/\/ '_' should be somewhere in the middle of idtype\n+                        if (delimiterPos > 1 && delimiterPos < idtype.length() - 1) {\n+                            AbstractChronology.registerChrono(\n+                                new HijrahChronology(\n+                                        idtype.substring(0, delimiterPos),\n+                                        idtype.substring(delimiterPos + 1)));\n+                        } else {\n+                            PlatformLogger.getLogger(\"java.time.chrono\")\n+                                    .warning(\"Hijrah custom config init failed.\" +\n+                                            \"'<id>_<type>' name convention not followed: \" + idtype);\n+                        }\n+                    });\n+            } catch (IOException e) {\n+                PlatformLogger.getLogger(\"java.time.chrono\")\n+                        .warning(\"Hijrah custom config init failed.\", e);\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahChronology.java","additions":31,"deletions":53,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -149,22 +147,15 @@\n-        @SuppressWarnings(\"removal\")\n-        final List<ZoneRulesProvider> loaded =\n-                AccessController.doPrivileged(new PrivilegedAction<List<ZoneRulesProvider>>() {\n-                    public List<ZoneRulesProvider> run() {\n-                        List<ZoneRulesProvider> result = new ArrayList<>();\n-                        String prop = System.getProperty(\"java.time.zone.DefaultZoneRulesProvider\");\n-                        if (prop != null) {\n-                            try {\n-                                Class<?> c = Class.forName(prop, true, ClassLoader.getSystemClassLoader());\n-                                @SuppressWarnings(\"deprecation\")\n-                                ZoneRulesProvider provider = ZoneRulesProvider.class.cast(c.newInstance());\n-                                registerProvider(provider);\n-                                result.add(provider);\n-                            } catch (Exception x) {\n-                                throw new Error(x);\n-                            }\n-                        } else {\n-                            registerProvider(new TzdbZoneRulesProvider());\n-                        }\n-                        return result;\n-                    }\n-                });\n+        final List<ZoneRulesProvider> loaded = new ArrayList<>();\n+        String prop = System.getProperty(\"java.time.zone.DefaultZoneRulesProvider\");\n+        if (prop != null) {\n+            try {\n+                Class<?> c = Class.forName(prop, true, ClassLoader.getSystemClassLoader());\n+                @SuppressWarnings(\"deprecation\")\n+                ZoneRulesProvider provider = ZoneRulesProvider.class.cast(c.newInstance());\n+                registerProvider(provider);\n+                loaded.add(provider);\n+            } catch (Exception x) {\n+                throw new Error(x);\n+            }\n+        } else {\n+            registerProvider(new TzdbZoneRulesProvider());\n+        }\n@@ -179,4 +170,1 @@\n-                if (ex.getCause() instanceof SecurityException) {\n-                    continue;  \/\/ ignore the security exception, try the next provider\n-                }\n-                throw ex;\n+                throw new Error(ex);\n","filename":"src\/java.base\/share\/classes\/java\/time\/zone\/ZoneRulesProvider.java","additions":17,"deletions":29,"binary":false,"changes":46,"status":"modified"}]}