{"files":[{"patch":"@@ -2112,1 +2112,1 @@\n-    private TypeMapping<Void> elemTypeFun = new TypeMapping<Void>() {\n+    public TypeMapping<Void> elemTypeFun = new TypeMapping<Void>() {\n@@ -4093,9 +4093,8 @@\n-    \/\/ where\n-        List<Type> erasedSupertypes(Type t) {\n-            ListBuffer<Type> buf = new ListBuffer<>();\n-            for (Type sup : closure(t)) {\n-                if (sup.hasTag(TYPEVAR)) {\n-                    buf.append(sup);\n-                } else {\n-                    buf.append(erasure(sup));\n-                }\n+\n+    public List<Type> erasedSupertypes(Type t) {\n+        ListBuffer<Type> buf = new ListBuffer<>();\n+        for (Type sup : closure(t)) {\n+            if (sup.hasTag(TYPEVAR)) {\n+                buf.append(sup);\n+            } else {\n+                buf.append(erasure(sup));\n@@ -4103,1 +4102,0 @@\n-            return buf.toList();\n@@ -4105,0 +4103,2 @@\n+        return buf.toList();\n+    }\n@@ -4106,9 +4106,7 @@\n-        private Type arraySuperType;\n-        private Type arraySuperType() {\n-            \/\/ initialized lazily to avoid problems during compiler startup\n-            if (arraySuperType == null) {\n-                \/\/ JLS 10.8: all arrays implement Cloneable and Serializable.\n-                arraySuperType = makeIntersectionType(List.of(syms.serializableType,\n-                        syms.cloneableType), true);\n-            }\n-            return arraySuperType;\n+    private Type arraySuperType;\n+    public Type arraySuperType() {\n+        \/\/ initialized lazily to avoid problems during compiler startup\n+        if (arraySuperType == null) {\n+            \/\/ JLS 10.8: all arrays implement Cloneable and Serializable.\n+            arraySuperType = makeIntersectionType(List.of(syms.serializableType,\n+                    syms.cloneableType), true);\n@@ -4116,0 +4114,2 @@\n+        return arraySuperType;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import static com.sun.tools.javac.code.TypeTag.ARRAY;\n@@ -41,0 +42,1 @@\n+import static com.sun.tools.javac.code.TypeTag.TYPEVAR;\n@@ -1827,3 +1829,2 @@\n-                Type lub = types.lub(t1, t2);\n-\n-                if (lub.hasTag(BOT)) {\n+                List<Type> es = erasedSuper(t1, t2);\n+                if (es.isEmpty() || es.head.hasTag(BOT)) {\n@@ -1834,1 +1835,38 @@\n-                return types.erasure(lub);\n+                return types.erasure(es.head);\n+            }\n+        }\n+\n+        private List<Type> erasedSuper(Type... ts) {\n+            if (ts[0].hasTag(ARRAY) && ts[1].hasTag(ARRAY)) {\n+                return List.of(allArray(ts));\n+            } else {\n+                return types.intersect(getErasedSuperTypes(ts[0]), getErasedSuperTypes(ts[1]));\n+            }\n+        }\n+\n+        private Type allArray(Type... ts) {\n+            Type[] elements = new Type[ts.length];\n+            for (int i = 0 ; i < ts.length ; i++) {\n+                Type elem = elements[i] = types.elemTypeFun.apply(ts[i]);\n+                if (elem.isPrimitive()) {\n+                    \/\/ if a primitive type is found, then return\n+                    \/\/ arraySuperType unless all the types are the\n+                    \/\/ same\n+                    Type first = ts[0];\n+                    for (int j = 1 ; j < ts.length ; j++) {\n+                        if (!types.isSameType(first, ts[j])) {\n+                            return types.arraySuperType();\n+                        }\n+                    }\n+                    \/\/ all the array types are the same, return one\n+                    return first;\n+                }\n+            }\n+            return new ArrayType(erasedSuper(elements).head, syms.arrayClass);\n+        }\n+\n+        private List<Type> getErasedSuperTypes(Type t) {\n+            if (t.hasTag(TYPEVAR)) {\n+                do {\n+                    t = t.getUpperBound();\n+                } while (t.hasTag(TYPEVAR));\n@@ -1836,0 +1874,3 @@\n+            return t.hasTag(ARRAY) ?\n+                    List.of(syms.serializableType, syms.cloneableType, syms.objectType) :\n+                    types.erasedSupertypes(t);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":45,"deletions":4,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8369654\n+ * @summary javac OutOfMemoryError for complex intersection type\n+ * @compile ExpressionSwitchComplexIntersectionTest.java\n+ *\/\n+\n+public class ExpressionSwitchComplexIntersectionTest {\n+    interface WithMixin01<T> {}\n+    interface WithMixin02<T> {}\n+    interface WithMixin03<T> {}\n+    interface WithMixin04<T> {}\n+    interface WithMixin05<T> {}\n+    interface WithMixin06<T> {}\n+    interface WithMixin07<T> {}\n+    interface WithMixin08<T> {}\n+    interface WithMixin09<T> {}\n+    interface WithMixin10<T> {}\n+    interface WithMixin11<T> {}\n+    interface WithMixin12<T> {}\n+    interface WithMixin13<T> {}\n+    interface WithMixin14<T> {}\n+    interface WithMixin15<T> {}\n+    interface WithMixin16<T> {}\n+    interface WithMixin17<T> {}\n+    interface WithMixin18<T> {}\n+    interface WithMixin19<T> {}\n+    interface WithMixin20<T> {}\n+\n+    interface ClientA extends\n+            WithMixin01<ClientA>,\n+            WithMixin02<ClientA>,\n+            WithMixin03<ClientA>,\n+            WithMixin04<ClientA>,\n+            WithMixin05<ClientA>,\n+            WithMixin06<ClientA>,\n+            WithMixin07<ClientA>,\n+            WithMixin08<ClientA>,\n+            WithMixin09<ClientA>,\n+            WithMixin10<ClientA>,\n+            WithMixin11<ClientA>,\n+            WithMixin12<ClientA>,\n+            WithMixin13<ClientA>,\n+            WithMixin14<ClientA>,\n+            WithMixin15<ClientA>,\n+            WithMixin16<ClientA>,\n+            WithMixin17<ClientA>,\n+            WithMixin18<ClientA>,\n+            WithMixin19<ClientA>,\n+            WithMixin20<ClientA> {\n+    }\n+\n+    interface ClientB extends\n+            WithMixin01<ClientB>,\n+            WithMixin02<ClientB>,\n+            WithMixin03<ClientB>,\n+            WithMixin04<ClientB>,\n+            WithMixin05<ClientB>,\n+            WithMixin06<ClientB>,\n+            WithMixin07<ClientB>,\n+            WithMixin08<ClientB>,\n+            WithMixin09<ClientB>,\n+            WithMixin10<ClientB>,\n+            WithMixin11<ClientB>,\n+            WithMixin12<ClientB>,\n+            WithMixin13<ClientB>,\n+            WithMixin14<ClientB>,\n+            WithMixin15<ClientB>,\n+            WithMixin16<ClientB>,\n+            WithMixin17<ClientB>,\n+            WithMixin18<ClientB>,\n+            WithMixin19<ClientB>,\n+            WithMixin20<ClientB> {\n+    }\n+\n+    Object f1(boolean b, ClientA c1, ClientB c2) {\n+        return b ? c1 : c2;\n+    }\n+\n+    Object f2(boolean b, ClientA[] array1, ClientB[] array2) {\n+        return b ? array1 : array2;\n+    }\n+\n+    <TA extends ClientA, TB extends ClientB> Object f3(boolean b, TA[] array1, TB[] array2) {\n+        return b ? array1 : array2;\n+    }\n+\n+    <TA extends ClientA, TB extends ClientB, TAA extends TA, TBB extends TB> Object f4(boolean b, TAA[] array1, TBB[] array2) {\n+        return b ? array1 : array2;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchComplexIntersectionTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}