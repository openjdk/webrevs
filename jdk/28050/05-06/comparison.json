{"files":[{"patch":"@@ -2112,1 +2112,1 @@\n-    private TypeMapping<Void> elemTypeFun = new TypeMapping<Void>() {\n+    public TypeMapping<Void> elemTypeFun = new TypeMapping<Void>() {\n@@ -4093,9 +4093,8 @@\n-    \/\/ where\n-        public List<Type> erasedSupertypes(Type t) {\n-            ListBuffer<Type> buf = new ListBuffer<>();\n-            for (Type sup : closure(t)) {\n-                if (sup.hasTag(TYPEVAR)) {\n-                    buf.append(sup);\n-                } else {\n-                    buf.append(erasure(sup));\n-                }\n+\n+    public List<Type> erasedSupertypes(Type t) {\n+        ListBuffer<Type> buf = new ListBuffer<>();\n+        for (Type sup : closure(t)) {\n+            if (sup.hasTag(TYPEVAR)) {\n+                buf.append(sup);\n+            } else {\n+                buf.append(erasure(sup));\n@@ -4103,1 +4102,0 @@\n-            return buf.toList();\n@@ -4105,0 +4103,2 @@\n+        return buf.toList();\n+    }\n@@ -4106,9 +4106,7 @@\n-        private Type arraySuperType;\n-        private Type arraySuperType() {\n-            \/\/ initialized lazily to avoid problems during compiler startup\n-            if (arraySuperType == null) {\n-                \/\/ JLS 10.8: all arrays implement Cloneable and Serializable.\n-                arraySuperType = makeIntersectionType(List.of(syms.serializableType,\n-                        syms.cloneableType), true);\n-            }\n-            return arraySuperType;\n+    private Type arraySuperType;\n+    public Type arraySuperType() {\n+        \/\/ initialized lazily to avoid problems during compiler startup\n+        if (arraySuperType == null) {\n+            \/\/ JLS 10.8: all arrays implement Cloneable and Serializable.\n+            arraySuperType = makeIntersectionType(List.of(syms.serializableType,\n+                    syms.cloneableType), true);\n@@ -4116,0 +4114,2 @@\n+        return arraySuperType;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1829,3 +1829,2 @@\n-                List<Type> ec = types.intersect(getErasedSuperTypes(t1), getErasedSuperTypes(t2));\n-\n-                if (ec.isEmpty() || ec.head.hasTag(BOT)) {\n+                List<Type> es = erasedSuper(t1, t2);\n+                if (es.isEmpty() || es.head.hasTag(BOT)) {\n@@ -1836,1 +1835,29 @@\n-                return types.erasure(ec.head);\n+                return types.erasure(es.head);\n+            }\n+        }\n+\n+        private List<Type> erasedSuper(Type... ts) {\n+            if (ts[0].hasTag(ARRAY) && ts[1].hasTag(ARRAY)) {\n+                return List.of(allArray(ts));\n+            } else {\n+                return types.intersect(getErasedSuperTypes(ts[0]), getErasedSuperTypes(ts[1]));\n+            }\n+        }\n+\n+        private Type allArray(Type... ts) {\n+            Type[] elements = new Type[ts.length];\n+            for (int i = 0 ; i < ts.length ; i++) {\n+                Type elem = elements[i] = types.elemTypeFun.apply(ts[i]);\n+                if (elem.isPrimitive()) {\n+                    \/\/ if a primitive type is found, then return\n+                    \/\/ arraySuperType unless all the types are the\n+                    \/\/ same\n+                    Type first = ts[0];\n+                    for (int j = 1 ; j < ts.length ; j++) {\n+                        if (!types.isSameType(first, ts[j])) {\n+                            return types.arraySuperType();\n+                        }\n+                    }\n+                    \/\/ all the array types are the same, return one\n+                    return first;\n+                }\n@@ -1838,0 +1865,1 @@\n+            return new ArrayType(erasedSuper(elements).head, syms.arrayClass);\n@@ -1840,1 +1868,1 @@\n-        List<Type> getErasedSuperTypes(Type t) {\n+        private List<Type> getErasedSuperTypes(Type t) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main ExpressionSwitchComplexIntersectionTest\n+ * @compile ExpressionSwitchComplexIntersectionTest.java\n@@ -99,9 +99,14 @@\n-    public static void main(String... args) {\n-        ClientA a = null;\n-        ClientB b = null;\n-        String selector = \"a\";\n-        Object o = switch (selector) {\n-            case \"a\" -> a;\n-            case \"b\" -> b;\n-            default -> null;\n-        };\n+    Object f1(boolean b, ClientA c1, ClientB c2) {\n+        return b ? c1 : c2;\n+    }\n+\n+    Object f2(boolean b, ClientA[] array1, ClientB[] array2) {\n+        return b ? array1 : array2;\n+    }\n+\n+    <TA extends ClientA, TB extends ClientB> Object f3(boolean b, TA[] array1, TB[] array2) {\n+        return b ? array1 : array2;\n+    }\n+\n+    <TA extends ClientA, TB extends ClientB, TAA extends TA, TBB extends TB> Object f4(boolean b, TAA[] array1, TBB[] array2) {\n+        return b ? array1 : array2;\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchComplexIntersectionTest.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}