{"files":[{"patch":"@@ -3840,1 +3840,1 @@\n-    public List<Type> intersect(List<Type> cl1, List<Type> cl2) {\n+    private List<Type> intersect(List<Type> cl1, List<Type> cl2, boolean lubWillBeErased) {\n@@ -3846,1 +3846,1 @@\n-            return intersect(cl1.tail, cl2);\n+            return intersect(cl1.tail, cl2, lubWillBeErased);\n@@ -3848,1 +3848,1 @@\n-            return intersect(cl1, cl2.tail);\n+            return intersect(cl1, cl2.tail, lubWillBeErased);\n@@ -3850,1 +3850,1 @@\n-            return intersect(cl1.tail, cl2.tail).prepend(cl1.head);\n+            return intersect(cl1.tail, cl2.tail, lubWillBeErased).prepend(cl1.head);\n@@ -3854,2 +3854,2 @@\n-                Type merge = merge(cl1.head,cl2.head);\n-                return intersect(cl1.tail, cl2.tail).prepend(merge);\n+                Type merge = merge(cl1.head,cl2.head, lubWillBeErased);\n+                return intersect(cl1.tail, cl2.tail, lubWillBeErased).prepend(merge);\n@@ -3858,1 +3858,1 @@\n-                return intersect(cl1.tail, cl2.tail).prepend(erasure(cl1.head));\n+                return intersect(cl1.tail, cl2.tail, lubWillBeErased).prepend(erasure(cl1.head));\n@@ -3860,1 +3860,1 @@\n-        return intersect(cl1.tail, cl2.tail);\n+        return intersect(cl1.tail, cl2.tail, lubWillBeErased);\n@@ -3883,1 +3883,1 @@\n-        private Type merge(Type c1, Type c2) {\n+        private Type merge(Type c1, Type c2, boolean lubWillBeErased) {\n@@ -3900,1 +3900,1 @@\n-                        m = new WildcardType(lub(wildUpperBound(act1.head),\n+                        m = new WildcardType(lub(lubWillBeErased, wildUpperBound(act1.head),\n@@ -3979,1 +3979,5 @@\n-        return lub(ts.toArray(new Type[ts.length()]));\n+        return lub(false, ts);\n+    }\n+\n+    public Type lub(boolean eraseResult, List<Type> ts) {\n+        return lub(eraseResult, ts.toArray(new Type[ts.length()]));\n@@ -3987,0 +3991,4 @@\n+        return lub(false, ts);\n+    }\n+\n+    public Type lub(boolean lubWillBeErased, Type... ts) {\n@@ -4045,1 +4053,1 @@\n-            return new ArrayType(lub(elements), syms.arrayClass);\n+            return new ArrayType(lub(lubWillBeErased, elements), syms.arrayClass);\n@@ -4064,1 +4072,1 @@\n-                    cl = intersect(cl, erasedSupertypes(t));\n+                    cl = intersect(cl, erasedSupertypes(t), lubWillBeErased);\n@@ -4067,1 +4075,7 @@\n-            List<Type> mec = closureMin(cl);\n+            List<Type> mec = null;\n+            if (lubWillBeErased && !cl.isEmpty()) {\n+                cl = List.of(cl.head);\n+                mec = cl;\n+            } else {\n+                mec = closureMin(cl);\n+            }\n@@ -4074,1 +4088,1 @@\n-                    lci = intersect(lci, superType != null ? List.of(superType) : List.nil());\n+                    lci = intersect(lci, superType != null ? List.of(superType) : List.nil(), lubWillBeErased);\n@@ -4090,1 +4104,1 @@\n-            return lub(classes);\n+            return lub(lubWillBeErased, classes);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":30,"deletions":16,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1827,1 +1827,1 @@\n-                Type lub = types.lub(t1, t2);\n+                Type lub = types.lub(true, t1, t2);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8369654\n+ * @summary javac OutOfMemoryError for complex intersection type\n+ * @run main ExpressionSwitchComplexIntersectionTest\n+ *\/\n+\n+public class ExpressionSwitchComplexIntersectionTest {\n+    interface WithMixin01<T> {}\n+    interface WithMixin02<T> {}\n+    interface WithMixin03<T> {}\n+    interface WithMixin04<T> {}\n+    interface WithMixin05<T> {}\n+    interface WithMixin06<T> {}\n+    interface WithMixin07<T> {}\n+    interface WithMixin08<T> {}\n+    interface WithMixin09<T> {}\n+    interface WithMixin10<T> {}\n+    interface WithMixin11<T> {}\n+    interface WithMixin12<T> {}\n+    interface WithMixin13<T> {}\n+    interface WithMixin14<T> {}\n+    interface WithMixin15<T> {}\n+    interface WithMixin16<T> {}\n+    interface WithMixin17<T> {}\n+    interface WithMixin18<T> {}\n+    interface WithMixin19<T> {}\n+    interface WithMixin20<T> {}\n+\n+    interface ClientA extends\n+            WithMixin01<ClientA>,\n+            WithMixin02<ClientA>,\n+            WithMixin03<ClientA>,\n+            WithMixin04<ClientA>,\n+            WithMixin05<ClientA>,\n+            WithMixin06<ClientA>,\n+            WithMixin07<ClientA>,\n+            WithMixin08<ClientA>,\n+            WithMixin09<ClientA>,\n+            WithMixin10<ClientA>,\n+            WithMixin11<ClientA>,\n+            WithMixin12<ClientA>,\n+            WithMixin13<ClientA>,\n+            WithMixin14<ClientA>,\n+            WithMixin15<ClientA>,\n+            WithMixin16<ClientA>,\n+            WithMixin17<ClientA>,\n+            WithMixin18<ClientA>,\n+            WithMixin19<ClientA>,\n+            WithMixin20<ClientA> {\n+    }\n+\n+    interface ClientB extends\n+            WithMixin01<ClientB>,\n+            WithMixin02<ClientB>,\n+            WithMixin03<ClientB>,\n+            WithMixin04<ClientB>,\n+            WithMixin05<ClientB>,\n+            WithMixin06<ClientB>,\n+            WithMixin07<ClientB>,\n+            WithMixin08<ClientB>,\n+            WithMixin09<ClientB>,\n+            WithMixin10<ClientB>,\n+            WithMixin11<ClientB>,\n+            WithMixin12<ClientB>,\n+            WithMixin13<ClientB>,\n+            WithMixin14<ClientB>,\n+            WithMixin15<ClientB>,\n+            WithMixin16<ClientB>,\n+            WithMixin17<ClientB>,\n+            WithMixin18<ClientB>,\n+            WithMixin19<ClientB>,\n+            WithMixin20<ClientB> {\n+    }\n+\n+    public static void main(String... args) {\n+        ClientA a = null;\n+        ClientB b = null;\n+        String selector = \"a\";\n+        Object o = switch (selector) {\n+            case \"a\" -> a;\n+            case \"b\" -> b;\n+            default -> null;\n+        };\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchComplexIntersectionTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}