{"files":[{"patch":"@@ -4094,1 +4094,1 @@\n-        List<Type> erasedSupertypes(Type t) {\n+        public List<Type> erasedSupertypes(Type t) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import static com.sun.tools.javac.code.TypeTag.ARRAY;\n@@ -41,0 +42,1 @@\n+import static com.sun.tools.javac.code.TypeTag.TYPEVAR;\n@@ -1827,1 +1829,1 @@\n-                Type lub = types.lub(t1, t2);\n+                List<Type> ec = types.intersect(getErasedSuperTypes(t1), getErasedSuperTypes(t2));\n@@ -1829,1 +1831,1 @@\n-                if (lub.hasTag(BOT)) {\n+                if (ec.isEmpty() || ec.head.hasTag(BOT)) {\n@@ -1834,1 +1836,1 @@\n-                return types.erasure(lub);\n+                return types.erasure(ec.head);\n@@ -1838,0 +1840,11 @@\n+        List<Type> getErasedSuperTypes(Type t) {\n+            if (t.hasTag(TYPEVAR)) {\n+                do {\n+                    t = t.getUpperBound();\n+                } while (t.hasTag(TYPEVAR));\n+            }\n+            return t.hasTag(ARRAY) ?\n+                    List.of(syms.serializableType, syms.cloneableType) :\n+                    types.erasedSupertypes(t);\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8369654\n+ * @summary javac OutOfMemoryError for complex intersection type\n+ * @run main ExpressionSwitchComplexIntersectionTest\n+ *\/\n+\n+public class ExpressionSwitchComplexIntersectionTest {\n+    interface WithMixin01<T> {}\n+    interface WithMixin02<T> {}\n+    interface WithMixin03<T> {}\n+    interface WithMixin04<T> {}\n+    interface WithMixin05<T> {}\n+    interface WithMixin06<T> {}\n+    interface WithMixin07<T> {}\n+    interface WithMixin08<T> {}\n+    interface WithMixin09<T> {}\n+    interface WithMixin10<T> {}\n+    interface WithMixin11<T> {}\n+    interface WithMixin12<T> {}\n+    interface WithMixin13<T> {}\n+    interface WithMixin14<T> {}\n+    interface WithMixin15<T> {}\n+    interface WithMixin16<T> {}\n+    interface WithMixin17<T> {}\n+    interface WithMixin18<T> {}\n+    interface WithMixin19<T> {}\n+    interface WithMixin20<T> {}\n+\n+    interface ClientA extends\n+            WithMixin01<ClientA>,\n+            WithMixin02<ClientA>,\n+            WithMixin03<ClientA>,\n+            WithMixin04<ClientA>,\n+            WithMixin05<ClientA>,\n+            WithMixin06<ClientA>,\n+            WithMixin07<ClientA>,\n+            WithMixin08<ClientA>,\n+            WithMixin09<ClientA>,\n+            WithMixin10<ClientA>,\n+            WithMixin11<ClientA>,\n+            WithMixin12<ClientA>,\n+            WithMixin13<ClientA>,\n+            WithMixin14<ClientA>,\n+            WithMixin15<ClientA>,\n+            WithMixin16<ClientA>,\n+            WithMixin17<ClientA>,\n+            WithMixin18<ClientA>,\n+            WithMixin19<ClientA>,\n+            WithMixin20<ClientA> {\n+    }\n+\n+    interface ClientB extends\n+            WithMixin01<ClientB>,\n+            WithMixin02<ClientB>,\n+            WithMixin03<ClientB>,\n+            WithMixin04<ClientB>,\n+            WithMixin05<ClientB>,\n+            WithMixin06<ClientB>,\n+            WithMixin07<ClientB>,\n+            WithMixin08<ClientB>,\n+            WithMixin09<ClientB>,\n+            WithMixin10<ClientB>,\n+            WithMixin11<ClientB>,\n+            WithMixin12<ClientB>,\n+            WithMixin13<ClientB>,\n+            WithMixin14<ClientB>,\n+            WithMixin15<ClientB>,\n+            WithMixin16<ClientB>,\n+            WithMixin17<ClientB>,\n+            WithMixin18<ClientB>,\n+            WithMixin19<ClientB>,\n+            WithMixin20<ClientB> {\n+    }\n+\n+    public static void main(String... args) {\n+        ClientA a = null;\n+        ClientB b = null;\n+        String selector = \"a\";\n+        Object o = switch (selector) {\n+            case \"a\" -> a;\n+            case \"b\" -> b;\n+            default -> null;\n+        };\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchComplexIntersectionTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}