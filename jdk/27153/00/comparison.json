{"files":[{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.jmx.streaming;\n+\n+import java.lang.management.ManagementFactory;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Consumer;\n+import javax.management.MBeanServerConnection;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.Name;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordingFile;\n+import jdk.management.jfr.RemoteRecordingStream;\n+\n+\/**\n+ * @test\n+ * @summary Tests retention with RemoteRecordingStream::dump(Path)\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.jmx.streaming.TestDumpRetention\n+ *\/\n+public class TestDumpRetention {\n+\n+    private static final MBeanServerConnection CONNECTION = ManagementFactory.getPlatformMBeanServer();\n+\n+    @Name(\"TestDumpRetention\")\n+    static class DumpEvent extends Event {\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        testSetNoPolicy();\n+        testSetMaxAge();\n+        testSetMaxSize();\n+    }\n+\n+    private static List<RecordedEvent> recordWithPolicy(String filename, Consumer<RemoteRecordingStream> policy) throws Exception {\n+        CountDownLatch latch1 = new CountDownLatch(1);\n+        CountDownLatch latch2 = new CountDownLatch(2);\n+        CountDownLatch latch3 = new CountDownLatch(3);\n+        try (var rs = new RemoteRecordingStream(CONNECTION)) {\n+            policy.accept(rs);\n+            rs.onEvent(e -> {\n+                latch1.countDown();\n+                latch2.countDown();\n+                latch3.countDown();\n+            });\n+            rs.startAsync();\n+            DumpEvent e1 = new DumpEvent();\n+            e1.commit();\n+            latch1.await();\n+            \/\/ Force chunk rotation\n+            try (Recording r = new Recording()) {\n+                r.start();\n+                DumpEvent e2 = new DumpEvent();\n+                e2.commit();\n+            }\n+            latch2.await();\n+            DumpEvent e3 = new DumpEvent();\n+            e3.commit();\n+            latch3.await();\n+            Path p = Path.of(filename);\n+            rs.dump(p);\n+            return RecordingFile.readAllEvents(p);\n+        }\n+    }\n+\n+    private static void testSetNoPolicy() throws Exception {\n+        var events = recordWithPolicy(\"no-policy.jfr\", rs -> {\n+            \/\/ use default policy, remove after consumption\n+        });\n+        \/\/ Since latch3 have been triggered at least two events\/chunks\n+        \/\/ before must have been consumed, possibly 3, but it's a race.\n+        if (events.size() > 1) {\n+            throw new Exception(\"Expected at most one event to not be consumed\");\n+        }\n+    }\n+\n+    private static void testSetMaxAge() throws Exception {\n+        var events = recordWithPolicy(\"max-age.jfr\", rs -> {\n+            \/\/ keeps all events for the dump\n+            rs.setMaxAge(Duration.ofDays(1));\n+        });\n+        if (events.size() != 3) {\n+            throw new Exception(\"Expected all 3 events to be in dump after setMaxAge\");\n+        }\n+    }\n+\n+    private static void testSetMaxSize() throws Exception {\n+        var events = recordWithPolicy(\"max-size.jfr\", rs -> {\n+            \/\/ keeps all events for the dump\n+            rs.setMaxSize(100_000_000);\n+        });\n+        if (events.size() != 3) {\n+            throw new Exception(\"Expected all 3 events to be in dump after setMaxSize\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestDumpRetention.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.function.Function;\n@@ -44,1 +43,0 @@\n-import jdk.jfr.consumer.RecordingStream;\n@@ -49,1 +47,1 @@\n- * @summary Tests RecordingStream::dump(Path)\n+ * @summary Tests RemoteRecordingStream::dump(Path)\n@@ -69,3 +67,0 @@\n-        testSetNoPolicy();\n-        testSetMaxAge();\n-        testSetMaxSize();\n@@ -100,68 +95,0 @@\n-    private static List<RecordedEvent> recordWithPolicy(String filename, boolean awaitEvents, Consumer<RemoteRecordingStream> policy) throws Exception {\n-        CountDownLatch latch1 = new CountDownLatch(1);\n-        CountDownLatch latch2 = new CountDownLatch(2);\n-        CountDownLatch latch3 = new CountDownLatch(3);\n-        try (var rs = new RemoteRecordingStream(CONNECTION)) {\n-            policy.accept(rs);\n-            rs.onEvent(e -> {\n-                latch1.countDown();\n-                latch2.countDown();\n-                latch3.countDown();\n-            });\n-            rs.startAsync();\n-            DumpEvent e1 = new DumpEvent();\n-            e1.commit();\n-            if (awaitEvents) {\n-                latch1.await();\n-            }\n-            \/\/ Force chunk rotation\n-            try (Recording r = new Recording()) {\n-                r.start();\n-                DumpEvent e2 = new DumpEvent();\n-                e2.commit();\n-            }\n-            if (awaitEvents) {\n-                latch2.await();\n-            }\n-            DumpEvent e3 = new DumpEvent();\n-            e3.commit();\n-            latch3.await();\n-            Path p = Path.of(filename);\n-            rs.dump(p);\n-            return RecordingFile.readAllEvents(p);\n-        }\n-    }\n-\n-    private static void testSetMaxSize() throws Exception {\n-        var events = recordWithPolicy(\"max-size.jfr\", false, rs -> {\n-            \/\/ keeps all events for the dump\n-            rs.setMaxSize(100_000_000);\n-        });\n-        if (events.size() != 3) {\n-            throw new Exception(\"Expected all 3 events to be in dump after setMaxSize\");\n-        }\n-\n-    }\n-\n-    private static void testSetMaxAge() throws Exception {\n-        var events = recordWithPolicy(\"max-age.jfr\", false, rs -> {\n-            \/\/ keeps all events for the dump\n-            rs.setMaxAge(Duration.ofDays(1));\n-        });\n-        if (events.size() != 3) {\n-            throw new Exception(\"Expected all 3 events to be in dump after setMaxAge\");\n-        }\n-\n-    }\n-\n-    private static void testSetNoPolicy() throws Exception {\n-        var events = recordWithPolicy(\"no-policy.jfr\", true, rs -> {\n-            \/\/ use default policy, remove after consumption\n-        });\n-        \/\/ Since latch3 have been triggered at least two events\/chunks\n-        \/\/ before must have been consumed, possibly 3, but it's a race.\n-        if (events.size() > 1) {\n-            throw new Exception(\"Expected at most one event to not be consumed\");\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestRemoteDump.java","additions":1,"deletions":74,"binary":false,"changes":75,"status":"modified"}]}