{"files":[{"patch":"@@ -49,1 +49,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -423,1 +422,0 @@\n-   @PreviewFeature(feature=PreviewFeature.Feature.STRING_TEMPLATES)\n@@ -429,1 +427,0 @@\n-   @PreviewFeature(feature=PreviewFeature.Feature.STRING_TEMPLATES)\n@@ -434,2 +431,1 @@\n-     *\/\n-    @PreviewFeature(feature=PreviewFeature.Feature.STRING_TEMPLATES)\n+    *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,2 +70,1 @@\n-\n-        @JEP(number=430, title=\"String Templates\")\n+        @JEP(number=459, title=\"String Templates\", status=\"Second Preview\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -180,0 +180,1 @@\n+         * @since 21\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/Tree.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -267,0 +267,1 @@\n+     * @since 21\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/TreeVisitor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -637,0 +637,1 @@\n+     * @since 21\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleTreeVisitor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -786,0 +786,1 @@\n+     * @since 21\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/TreeScanner.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5027,6 +5027,5 @@\n-        Type resultType = syms.stringTemplateType;\n-\n-        if (processor != null) {\n-            resultType = attribTree(processor, env, new ResultInfo(KindSelector.VAL, Type.noType));\n-            resultType = chk.checkProcessorType(processor, resultType, env);\n-        }\n+        Type processorType = attribTree(processor, env, new ResultInfo(KindSelector.VAL, Type.noType));\n+        chk.checkProcessorType(processor, processorType, env);\n+        Type processMethodType = getProcessMethodType(tree, processorType);\n+        tree.processMethodType = processMethodType;\n+        Type resultType = processMethodType.getReturnType();\n@@ -5042,1 +5041,0 @@\n-\n@@ -5046,0 +5044,7 @@\n+    private Type getProcessMethodType(JCStringTemplate tree, Type processorType) {\n+        MethodSymbol processSymbol = rs.resolveInternalMethod(tree.pos(),\n+                env, types.skipTypeVars(processorType, false),\n+                names.process, List.of(syms.stringTemplateType), List.nil());\n+        return types.memberType(processorType, processSymbol);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -4373,2 +4373,1 @@\n-                log.error(DiagnosticFlag.RESOLVE_ERROR, processor.pos,\n-                        Errors.ProcessorTypeCannotBeARawType(processorType.tsym));\n+                resultType = syms.objectType;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1681,17 +1681,2 @@\n-            JCExpression processor = tree.processor;\n-\n-            if (processor != null) {\n-                scan(processor);\n-                Type interfaceType = types.asSuper(processor.type, syms.processorType.tsym);\n-\n-                if (interfaceType != null) {\n-                    List<Type> typeArguments = interfaceType.getTypeArguments();\n-\n-                    if (typeArguments.size() == 2) {\n-                        Type throwType = typeArguments.tail.head;\n-\n-                        if (throwType != null) {\n-                            markThrown(tree, throwType);\n-                        }\n-                    }\n-                }\n+            for (Type thrown : tree.processMethodType.getThrownTypes()) {\n+                markThrown(tree, thrown);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -257,1 +257,6 @@\n-            if (processor instanceof JCIdent ident && ident.sym instanceof VarSymbol varSym) {\n+            Symbol sym = switch (processor) {\n+                case JCIdent ident -> ident.sym;\n+                case JCFieldAccess access -> access.sym;\n+                default -> null;\n+            };\n+            if (sym instanceof VarSymbol varSym) {\n@@ -268,2 +273,1 @@\n-            return processor != null &&\n-                   !useValuesList &&\n+            return !useValuesList &&\n@@ -281,1 +285,1 @@\n-            if (processor == null || isNamedProcessor(names.RAW)) {\n+            if (isNamedProcessor(names.RAW)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransLiterals.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1358,4 +1358,0 @@\n-compiler.err.processor.type.cannot.be.a.raw.type=\\\n-    processor type cannot be a raw type: {0}\n-\n-# 0: symbol\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2491,0 +2491,1 @@\n+        public Type processMethodType;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1483,3 +1483,1 @@\n-            if (processor != null) {\n-                printExpr(processor);\n-            }\n+            printExpr(processor);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -551,5 +551,1 @@\n-                if (node.processor == null) {\n-                    return node.pos;\n-                } else {\n-                    return getStartPos(node.processor);\n-                }\n+                return node.processor == null ? node.pos : getStartPos(node.processor);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+ \/\/ key: compiler.err.cant.resolve.location.args\n+ \/\/ key: compiler.misc.location\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/StringTemplateNotProcessor.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- \/\/ key: compiler.err.processor.type.cannot.be.a.raw.type\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/StringTemplateRawProcessor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}