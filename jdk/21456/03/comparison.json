{"files":[{"patch":"@@ -78,2 +78,2 @@\n- *     \/\/ @link substring=\"runWhere\" target=\"#runWhere(ScopedValue, Object, Runnable)\" :\n- *     ScopedValue.runWhere(NAME, \"duke\", () -> doSomething());\n+ *     \/\/ @link substring=\"run\" target=\"Carrier#run(Runnable)\" :\n+ *     ScopedValue.where(NAME, \"duke\").run(() -> doSomething());\n@@ -86,2 +86,2 @@\n- * <p> The example using {@code runWhere} invokes a method that does not return a result.\n- * The {@link #callWhere(ScopedValue, Object, CallableOp) callWhere} method can be used\n+ * <p> The example using {@code run} invokes a method that does not return a result.\n+ * The {@link Carrier#call(CallableOp) call} method can be used\n@@ -89,1 +89,1 @@\n- * In addition, {@code ScopedValue} defines the {@link #where(ScopedValue, Object)} method\n+ * {@code ScopedValue} defines the {@link #where(ScopedValue, Object)} method\n@@ -95,1 +95,1 @@\n- * A {@code ScopedValue} binding to a value is per-thread. Invoking {@code xxxWhere}\n+ * A {@code ScopedValue} binding to a value is per-thread. Invoking {@code run}\n@@ -101,1 +101,1 @@\n- *     ScopedValue.runWhere(NAME, \"duke1\", () -> doSomething());\n+ *     ScopedValue.where(NAME, \"duke1\").run(() -> doSomething());\n@@ -105,1 +105,1 @@\n- *     ScopedValue.runWhere(NAME, \"duke2\", () -> doSomething());\n+ *     ScopedValue.where(NAME, \"duke2\").run(() -> doSomething());\n@@ -132,1 +132,1 @@\n- *     ScopedValue.runWhere(NAME, \"duchess\", () -> doMore());\n+ *     ScopedValue.where(NAME, \"duchess\").run(() -> doMore());\n@@ -163,3 +163,4 @@\n- *             scope.fork(() -> childTask1());\n- *             scope.fork(() -> childTask2());\n- *             scope.fork(() -> childTask3());\n+ *              \/\/ @link substring=\"fork\" target=\"StructuredTaskScope#fork(java.util.concurrent.Callable)\" :\n+ *              scope.fork(() -> childTask1());\n+ *              scope.fork(() -> childTask2());\n+ *              scope.fork(() -> childTask3());\n@@ -167,1 +168,4 @@\n- *             ...\n+ *              \/\/ @link substring=\"join\" target=\"StructuredTaskScope#join()\" :\n+ *              scope.join();\n+ *\n+ *              ..\n@@ -388,1 +392,1 @@\n-            throw new NoSuchElementException();\n+            throw new NoSuchElementException(\"No mapping present\");\n@@ -412,1 +416,0 @@\n-         * @see ScopedValue#callWhere(ScopedValue, Object, CallableOp)\n@@ -461,1 +464,0 @@\n-         * @see ScopedValue#runWhere(ScopedValue, Object, Runnable)\n@@ -531,71 +533,0 @@\n-    \/**\n-     * Calls a value-returning operation with a {@code ScopedValue} bound to a value\n-     * in the current thread. When the operation completes (normally or with an\n-     * exception), the {@code ScopedValue} will revert to being unbound, or revert to\n-     * its previous value when previously bound, in the current thread. If {@code op}\n-     * completes with an exception then it propagated by this method.\n-     *\n-     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n-     * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n-     * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n-     * as a <em>structure violation<\/em> when the operation completes (normally or with an\n-     * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n-     * is closed and {@link StructureViolationException} is thrown.\n-     *\n-     * @implNote\n-     * This method is implemented to be equivalent to:\n-     * {@snippet lang=java :\n-     *     \/\/ @link substring=\"call\" target=\"Carrier#call(CallableOp)\" :\n-     *     ScopedValue.where(key, value).call(op);\n-     * }\n-     *\n-     *\n-     *\n-     * @param key the {@code ScopedValue} key\n-     * @param value the value, can be {@code null}\n-     * @param <T> the type of the value\n-     * @param <R> the result type\n-     * @param <X> type of the exception thrown by the operation\n-     * @param op the operation to call\n-     * @return the result\n-     * @throws StructureViolationException if a structure violation is detected\n-     * @throws X if the operation completes with an exception\n-     * @since 23\n-     *\/\n-    public static <T, R, X extends Throwable> R callWhere(ScopedValue<T> key,\n-                                                          T value,\n-                                                          CallableOp<? extends R, X> op) throws X {\n-        return where(key, value).call(op);\n-    }\n-\n-    \/**\n-     * Run an operation with a {@code ScopedValue} bound to a value in the current\n-     * thread. When the operation completes (normally or with an exception), the\n-     * {@code ScopedValue} will revert to being unbound, or revert to its previous value\n-     * when previously bound, in the current thread. If {@code op} completes with an\n-     * exception then it propagated by this method.\n-     *\n-     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n-     * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n-     * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n-     * as a <em>structure violation<\/em> when the operation completes (normally or with an\n-     * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n-     * is closed and {@link StructureViolationException} is thrown.\n-     *\n-     * @implNote\n-     * This method is implemented to be equivalent to:\n-     * {@snippet lang=java :\n-     *     \/\/ @link substring=\"run\" target=\"Carrier#run(Runnable)\" :\n-     *     ScopedValue.where(key, value).run(op);\n-     * }\n-     *\n-     * @param key the {@code ScopedValue} key\n-     * @param value the value, can be {@code null}\n-     * @param <T> the type of the value\n-     * @param op the operation to call\n-     * @throws StructureViolationException if a structure violation is detected\n-     *\/\n-    public static <T> void runWhere(ScopedValue<T> key, T value, Runnable op) {\n-        where(key, value).run(op);\n-    }\n-\n@@ -645,1 +576,1 @@\n-            throw new NoSuchElementException();\n+            throw new NoSuchElementException(\"ScopedValue not bound\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopedValue.java","additions":19,"deletions":88,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -264,2 +264,2 @@\n- *     \/\/ @link substring=\"runWhere\" target=\"ScopedValue#runWhere(ScopedValue, Object, Runnable)\" :\n- *     ScopedValue.runWhere(USERNAME, \"duke\", () -> {\n+ *     \/\/ @link substring=\"run\" target=\"ScopedValue.Carrier#run(Runnable)\" :\n+ *     ScopedValue.where(USERNAME, \"duke\").run(() -> {\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-                return ScopedValue.callWhere(SCOPED_SUBJECT, subject, action::call);\n+                return ScopedValue.where(SCOPED_SUBJECT, subject).call(action::call);\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        @JEP(number=481, title=\"Scoped Values\", status=\"Third Preview\")\n+        @JEP(number=487, title=\"Scoped Values\", status=\"Fourth Preview\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-     * Test that runWhere invokes the Runnable's run method.\n+     * Test that where invokes the Runnable's run method.\n@@ -59,1 +59,1 @@\n-            ScopedValue.runWhere(name, \"duke\", () -> { Box.executed = true; });\n+            ScopedValue.where(name, \"duke\").run(() -> { Box.executed = true; });\n@@ -65,1 +65,1 @@\n-     * Test runWhere when the run method throws an exception.\n+     * Test where when the run method throws an exception.\n@@ -74,1 +74,1 @@\n-            assertThrows(FooException.class, () -> ScopedValue.runWhere(name, \"duke\", op));\n+            assertThrows(FooException.class, () -> ScopedValue.where(name, \"duke\").run(op));\n@@ -87,1 +87,1 @@\n-            String result = ScopedValue.callWhere(name, \"duke\", name::get);\n+            String result = ScopedValue.where(name, \"duke\").call(name::get);\n@@ -102,1 +102,1 @@\n-            assertThrows(FooException.class, () -> ScopedValue.callWhere(name, \"duke\", op));\n+            assertThrows(FooException.class, () -> ScopedValue.where(name, \"duke\").call(op));\n@@ -119,2 +119,2 @@\n-            \/\/ runWhere\n-            ScopedValue.runWhere(name1, \"duke\", () -> {\n+            \/\/ where\n+            ScopedValue.where(name1, \"duke\").run(() -> {\n@@ -129,1 +129,1 @@\n-            ScopedValue.callWhere(name1, \"duke\", () -> {\n+            ScopedValue.where(name1, \"duke\").call(() -> {\n@@ -151,2 +151,2 @@\n-            \/\/ runWhere\n-            ScopedValue.runWhere(name1, \"duke\", () -> {\n+            \/\/ where\n+            ScopedValue.where(name1, \"duke\").run(() -> {\n@@ -160,1 +160,1 @@\n-            ScopedValue.callWhere(name1, \"duke\", () -> {\n+            ScopedValue.where(name1, \"duke\").call(() -> {\n@@ -181,2 +181,2 @@\n-            \/\/ runWhere\n-            ScopedValue.runWhere(name, \"duke\", () -> {\n+            \/\/ where\n+            ScopedValue.where(name, \"duke\").run(() -> {\n@@ -188,1 +188,1 @@\n-            ScopedValue.callWhere(name, \"duke\", () -> {\n+            ScopedValue.where(name, \"duke\").call(() -> {\n@@ -207,2 +207,2 @@\n-            \/\/ runWhere\n-            ScopedValue.runWhere(name, \"duke\", () -> {\n+            \/\/ where\n+            ScopedValue.where(name, \"duke\").run(() -> {\n@@ -213,1 +213,1 @@\n-            ScopedValue.callWhere(name, \"duke\", () -> {\n+            ScopedValue.where(name, \"duke\").call(() -> {\n@@ -262,2 +262,2 @@\n-            \/\/ runWhere\n-            ScopedValue.runWhere(name, \"duke\", () -> {\n+            \/\/ where\n+            ScopedValue.where(name, \"duke\").run(() -> {\n@@ -267,1 +267,1 @@\n-                ScopedValue.runWhere(name, \"duchess\", () -> {\n+                ScopedValue.where(name, \"duchess\").run(() -> {\n@@ -278,1 +278,1 @@\n-            ScopedValue.callWhere(name, \"duke\", () -> {\n+            ScopedValue.where(name, \"duke\").call(() -> {\n@@ -282,1 +282,1 @@\n-                ScopedValue.callWhere(name, \"duchess\", () -> {\n+                ScopedValue.where(name, \"duchess\").call(() -> {\n@@ -305,2 +305,2 @@\n-            \/\/ runWhere\n-            ScopedValue.runWhere(name, null, () -> {\n+            \/\/ where\n+            ScopedValue.where(name, null).run(() -> {\n@@ -310,1 +310,1 @@\n-                ScopedValue.runWhere(name, \"duchess\", () -> {\n+                ScopedValue.where(name, \"duchess\").run(() -> {\n@@ -321,1 +321,1 @@\n-            ScopedValue.callWhere(name, null, () -> {\n+            ScopedValue.where(name, null).call(() -> {\n@@ -325,1 +325,1 @@\n-                ScopedValue.callWhere(name, \"duchess\", () -> {\n+                ScopedValue.where(name, \"duchess\").call(() -> {\n@@ -348,2 +348,2 @@\n-            \/\/ runWhere\n-            ScopedValue.runWhere(name, \"duke\", () -> {\n+            \/\/ where\n+            ScopedValue.where(name, \"duke\").run(() -> {\n@@ -353,1 +353,1 @@\n-                ScopedValue.runWhere(name, null, () -> {\n+                ScopedValue.where(name, null).run(() -> {\n@@ -364,1 +364,1 @@\n-            ScopedValue.callWhere(name, \"duke\", () -> {\n+            ScopedValue.where(name, \"duke\").call(() -> {\n@@ -368,1 +368,1 @@\n-                ScopedValue.callWhere(name, null, () -> {\n+                ScopedValue.where(name, null).call(() -> {\n@@ -413,2 +413,2 @@\n-        assertThrows(NullPointerException.class, () -> ScopedValue.runWhere(null, \"duke\", () -> { }));\n-        assertThrows(NullPointerException.class, () -> ScopedValue.runWhere(name, \"duke\", null));\n+        assertThrows(NullPointerException.class, () -> ScopedValue.where(null, \"duke\").run(() -> { }));\n+        assertThrows(NullPointerException.class, () -> ScopedValue.where(name, \"duke\").run(null));\n@@ -416,2 +416,2 @@\n-        assertThrows(NullPointerException.class, () -> ScopedValue.callWhere(null, \"duke\", () -> \"\"));\n-        assertThrows(NullPointerException.class, () -> ScopedValue.callWhere(name, \"duke\", null));\n+        assertThrows(NullPointerException.class, () -> ScopedValue.where(null, \"duke\").call(() -> \"\"));\n+        assertThrows(NullPointerException.class, () -> ScopedValue.where(name, \"duke\").call(null));\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/ScopedValueAPI.java","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        String value = ScopedValue.callWhere(name, \"x\", () -> {\n+        String value = ScopedValue.where(name, \"x\").call(() -> {\n@@ -76,1 +76,1 @@\n-        String value = ScopedValue.callWhere(name, \"x\", () -> {\n+        String value = ScopedValue.where(name, \"x\").call(() -> {\n@@ -101,1 +101,1 @@\n-        String value = ScopedValue.callWhere(name, \"x\", () -> {\n+        String value = ScopedValue.where(name, \"x\").call(() -> {\n@@ -107,1 +107,1 @@\n-                    String grandchildValue = ScopedValue.callWhere(name, \"y\", () -> {\n+                    String grandchildValue = ScopedValue.where(name, \"y\").call(() -> {\n@@ -139,1 +139,1 @@\n-                ScopedValue.runWhere(name, \"x\", () -> {\n+                ScopedValue.where(name, \"x\").run(() -> {\n@@ -170,1 +170,1 @@\n-            ScopedValue.runWhere(name, \"x\", () -> {\n+                ScopedValue.where(name, \"x\").run(() -> {\n@@ -183,1 +183,1 @@\n-            ScopedValue.runWhere(name, \"x\", () -> {\n+                ScopedValue.where(name, \"x\").run(() -> {\n@@ -199,1 +199,1 @@\n-        ScopedValue.runWhere(name1, \"x\", () -> {\n+        ScopedValue.where(name1, \"x\").run(() -> {\n@@ -201,1 +201,1 @@\n-                ScopedValue.runWhere(name1, \"y\", () -> {\n+                    ScopedValue.where(name1, \"y\").run(() -> {\n@@ -209,1 +209,1 @@\n-        ScopedValue.runWhere(name1, \"x\", () -> {\n+        ScopedValue.where(name1, \"x\").run(() -> {\n@@ -211,1 +211,1 @@\n-                ScopedValue.runWhere(name2, \"y\", () -> {\n+                    ScopedValue.where(name2, \"y\").run(() -> {\n","filename":"test\/jdk\/java\/util\/concurrent\/StructuredTaskScope\/WithScopedValue.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-        String value = ScopedValue.callWhere(name, \"duke\", () -> {\n+        String value = ScopedValue.where(name, \"duke\").call(() -> {\n@@ -82,1 +82,1 @@\n-            ScopedValue.runWhere(name, \"x1\", () -> {\n+            ScopedValue.where(name, \"x1\").run(() -> {\n@@ -100,1 +100,1 @@\n-            ScopedValue.runWhere(name, \"x1\", () -> {\n+            ScopedValue.where(name, \"x1\").run(() -> {\n@@ -102,1 +102,1 @@\n-                    ScopedValue.runWhere(name, \"x2\", () -> {\n+                    ScopedValue.where(name, \"x2\").run(() -> {\n@@ -104,1 +104,1 @@\n-                            ScopedValue.runWhere(name, \"x3\", () -> {\n+                            ScopedValue.where(name, \"x3\").run(() -> {\n@@ -132,1 +132,1 @@\n-            ScopedValue.runWhere(name, \"x1\", () -> {\n+            ScopedValue.where(name, \"x1\").run(() -> {\n@@ -134,1 +134,1 @@\n-                    ScopedValue.runWhere(name, \"x2\", () -> {\n+                    ScopedValue.where(name, \"x2\").run(() -> {\n@@ -136,1 +136,1 @@\n-                            ScopedValue.runWhere(name, \"x3\", () -> {\n+                            ScopedValue.where(name, \"x3\").run(() -> {\n@@ -164,1 +164,1 @@\n-            ScopedValue.runWhere(name, \"x1\", () -> {\n+            ScopedValue.where(name, \"x1\").run(() -> {\n@@ -166,1 +166,1 @@\n-                    ScopedValue.runWhere(name, \"x2\", () -> {\n+                    ScopedValue.where(name, \"x2\").run(() -> {\n@@ -168,1 +168,1 @@\n-                            ScopedValue.runWhere(name, \"x3\", () -> {\n+                            ScopedValue.where(name, \"x3\").run(() -> {\n@@ -196,1 +196,1 @@\n-            ScopedValue.runWhere(name, \"duke\", () -> {\n+            ScopedValue.where(name, \"duke\").run(() -> {\n@@ -210,1 +210,1 @@\n-        ScopedValue.runWhere(name, \"duke\", () -> {\n+        ScopedValue.where(name, \"duke\").run(() -> {\n@@ -212,1 +212,1 @@\n-                ScopedValue.runWhere(name, \"duchess\", () -> {\n+                ScopedValue.where(name, \"duchess\").run(() -> {\n","filename":"test\/jdk\/jdk\/internal\/misc\/ThreadFlock\/WithScopedValue.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}