{"files":[{"patch":"@@ -33,0 +33,1 @@\n+#include \"threadHelper.inline.hpp\"\n@@ -57,1 +58,1 @@\n-void run_cmov_tests() {\n+static void run_cmov_tests() {\n@@ -110,1 +111,0 @@\n- public:\n@@ -113,3 +113,7 @@\n-  static TESTSIZE base_cmpxchg(int variant, intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result, bool boolean_result = false) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n+  BufferBlob*  _bb;\n+  cmpxchg_func _func;\n+\n+ public:\n+  CmpxchgTester(int variant, bool boolean_result) {\n+    _bb = BufferBlob::create(\"riscvTest\", 128);\n+    CodeBuffer code(_bb);\n@@ -122,1 +126,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -129,1 +133,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -136,1 +140,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -143,1 +147,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -152,3 +156,9 @@\n-    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, result);\n-    BufferBlob::free(bb);\n-    return ret;\n+    _func = ((cmpxchg_func)entry);\n+  }\n+\n+  ~CmpxchgTester() {\n+    BufferBlob::free(_bb);\n+  }\n+\n+  TESTSIZE cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n+    return _func(addr, expected, new_value, \/* dummy result *\/ 67);\n@@ -159,1 +169,2 @@\n-void plain_cmpxchg_test(int variant, TESTSIZE dv, TESTSIZE ex, TESTSIZE nv, TESTSIZE eret, TESTSIZE edata, bool bv) {\n+static void plain_cmpxchg_test(int variant, TESTSIZE dv, TESTSIZE ex, TESTSIZE nv, TESTSIZE eret, TESTSIZE edata, bool bv) {\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(variant, bv);\n@@ -161,1 +172,1 @@\n-  TESTSIZE ret = CmpxchgTester<TESTSIZE, ASMSIZE>::base_cmpxchg(variant, (intptr_t)&data, ex, nv, \/* dummy *\/ 67, bv);\n+  TESTSIZE ret = cmpxchg.cmpxchg((intptr_t)&data, ex, nv);\n@@ -167,1 +178,1 @@\n-void run_plain_cmpxchg_tests() {\n+static void run_plain_cmpxchg_tests() {\n@@ -237,1 +248,1 @@\n-TEST_VM(RiscV, cmpxchg_int64_plain_lr_sc) {\n+TEST_VM(RiscV, cmpxchg_int64_lr_sc) {\n@@ -244,1 +255,1 @@\n-TEST_VM(RiscV, cmpxchg_int64_plain_maybe_zacas) {\n+TEST_VM(RiscV, cmpxchg_int64_maybe_zacas) {\n@@ -250,1 +261,1 @@\n-TEST_VM(RiscV, cmpxchg_int32_plain_lr_sc) {\n+TEST_VM(RiscV, cmpxchg_int32_lr_sc) {\n@@ -257,1 +268,1 @@\n-TEST_VM(RiscV, cmpxchg_int32_plain_maybe_zacas) {\n+TEST_VM(RiscV, cmpxchg_int32_maybe_zacas) {\n@@ -263,0 +274,73 @@\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_cmpxchg_tests() {\n+  volatile TESTSIZE data = 0;\n+  int num_threads = 4;\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(0, false); \/\/ variant 0, not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {\n+    for (int i = 0; i < 10000; i++) {\n+      TESTSIZE oldvalue = _id + num_threads * i;\n+      TESTSIZE newvalue = oldvalue + 1;\n+      TESTSIZE ret;\n+      do {\n+        ret = cmpxchg.cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != oldvalue);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, (TESTSIZE)(num_threads*10000));\n+}\n+\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_alt_cmpxchg_tests() {\n+  volatile TESTSIZE data = 0;\n+  int num_threads = 4;\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(0, false); \/\/ variant 0, not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {\n+    for (int i = 0; i < 10000; i++) {\n+      TESTSIZE oldvalue;\n+      TESTSIZE ret = 0;\n+      do {\n+        oldvalue = ret;\n+        TESTSIZE newvalue = oldvalue + 1;\n+        ret = cmpxchg.cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != oldvalue);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, (TESTSIZE)(num_threads*10000));\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int64_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_cmpxchg_tests<int64_t, Assembler::int64>();\n+  run_concurrent_alt_cmpxchg_tests<int64_t, Assembler::int64>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int64_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_cmpxchg_tests<int64_t, Assembler::int64>();\n+    run_concurrent_alt_cmpxchg_tests<int64_t, Assembler::int64>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int32_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_cmpxchg_tests<int32_t, Assembler::int32>();\n+  run_concurrent_alt_cmpxchg_tests<int32_t, Assembler::int32>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int32_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_cmpxchg_tests<int32_t, Assembler::int32>();\n+    run_concurrent_alt_cmpxchg_tests<int32_t, Assembler::int32>();\n+  }\n+}\n+\n@@ -265,1 +349,0 @@\n- public:\n@@ -269,3 +352,7 @@\n-  static TESTSIZE narrow_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result, bool boolean_result = false) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n+  BufferBlob*  _bb;\n+  cmpxchg_func _func;\n+\n+ public:\n+  NarrowCmpxchgTester(bool boolean_result) {\n+    _bb = BufferBlob::create(\"riscvTest\", 128);\n+    CodeBuffer code(_bb);\n@@ -282,3 +369,9 @@\n-    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, result, -1, -1, -1);\n-    BufferBlob::free(bb);\n-    return ret;\n+    _func = ((cmpxchg_func)entry);\n+  }\n+\n+  ~NarrowCmpxchgTester() {\n+    BufferBlob::free(_bb);\n+  }\n+\n+  TESTSIZE narrow_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n+    return _func(addr, expected, new_value, \/* dummy result *\/ 67, -1, -1, -1);\n@@ -289,1 +382,3 @@\n-void run_narrow_cmpxchg_tests() {\n+static void run_narrow_cmpxchg_tests() {\n+  NarrowCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(false);\n+  NarrowCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg_bool(true);\n@@ -297,1 +392,1 @@\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 121, 42, \/* result *\/ 67, false);\n+    ret = cmpxchg.narrow_cmpxchg((intptr_t)&data[i], 121, 42);\n@@ -302,1 +397,1 @@\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 120, 42, \/* result *\/ 67, false);\n+    ret = cmpxchg.narrow_cmpxchg((intptr_t)&data[i], 120, 42);\n@@ -307,1 +402,1 @@\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 121, 42, \/* result *\/ 67, true);\n+    ret = cmpxchg_bool.narrow_cmpxchg((intptr_t)&data[i], 121, 42);\n@@ -312,1 +407,1 @@\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 120, 42, \/* result *\/ 67, true);\n+    ret = cmpxchg_bool.narrow_cmpxchg((intptr_t)&data[i], 120, 42);\n@@ -344,0 +439,73 @@\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_narrow_cmpxchg_tests() {\n+  volatile TESTSIZE data = 0;\n+  int num_threads = 4;\n+  NarrowCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(false); \/\/ not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {\n+    for (int i = 0; i < 10000; i++) {\n+      TESTSIZE oldvalue = _id + num_threads * i;\n+      TESTSIZE newvalue = oldvalue + 1;\n+      TESTSIZE ret;\n+      do {\n+        ret = cmpxchg.narrow_cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != oldvalue);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, (TESTSIZE)(num_threads*10000));\n+}\n+\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_alt_narrow_cmpxchg_tests() {\n+  volatile TESTSIZE data = 0;\n+  int num_threads = 4;\n+  NarrowCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(false); \/\/ not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {\n+    for (int i = 0; i < 10000; i++) {\n+      TESTSIZE oldvalue;\n+      TESTSIZE ret = 0;\n+      do {\n+        oldvalue = ret;\n+        TESTSIZE newvalue = oldvalue + 1;\n+        ret = cmpxchg.narrow_cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != oldvalue);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, (TESTSIZE)(num_threads*10000));\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int16_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+  run_concurrent_alt_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int16_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+    run_concurrent_alt_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int8_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n+  run_concurrent_alt_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int8_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n+    run_concurrent_alt_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n+  }\n+}\n+\n@@ -346,2 +514,1 @@\n- public:\n-  typedef TESTSIZE (*cmpxchg_narrow)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n+  typedef TESTSIZE (*weak_cmpxchg_narrow_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n@@ -350,1 +517,1 @@\n-  typedef TESTSIZE (*cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result);\n+  typedef TESTSIZE (*weak_cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result);\n@@ -352,3 +519,8 @@\n-  static TESTSIZE weak_narrow_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n+  BufferBlob*  _bb;\n+  weak_cmpxchg_narrow_func _narrow_weak;\n+  weak_cmpxchg_func _weak;\n+\n+ public:\n+  WeakCmpxchgTester() : _bb(nullptr), _narrow_weak(nullptr), _weak(nullptr) {\n+    _bb = BufferBlob::create(\"riscvTest\", 128);\n+    CodeBuffer code(_bb);\n@@ -356,2 +528,2 @@\n-    address entry = _masm.pc();\n-    {\n+    if (ASMSIZE == Assembler::int8 || ASMSIZE == Assembler::int16) {\n+        address entry = _masm.pc();\n@@ -363,13 +535,3 @@\n-    }\n-    _masm.flush(); \/\/ icache invalidate\n-    TESTSIZE ret = ((cmpxchg_narrow)entry)(addr, expected, new_value, \/*result*\/ 67, -1, -1, -1);\n-    BufferBlob::free(bb);\n-    return ret;\n-  }\n-\n-  static TESTSIZE weak_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n-    MacroAssembler _masm(&code);\n-    address entry = _masm.pc();\n-    {\n+      _narrow_weak = ((weak_cmpxchg_narrow_func)entry);\n+    } else {\n+        address entry = _masm.pc();\n@@ -380,0 +542,1 @@\n+      _weak = ((weak_cmpxchg_func)entry);\n@@ -382,3 +545,12 @@\n-    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, \/*result*\/ 67);\n-    BufferBlob::free(bb);\n-    return ret;\n+  }\n+\n+  TESTSIZE weak_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n+    if (ASMSIZE == Assembler::int8 || ASMSIZE == Assembler::int16) {\n+      return _narrow_weak(addr, expected, new_value, \/* dummy result *\/ 67, -1, -1, -1);\n+    } else {\n+      return _weak(addr, expected, new_value, \/* dummy result *\/ 67);\n+    }\n+  }\n+\n+  ~WeakCmpxchgTester() {\n+    BufferBlob::free(_bb);\n@@ -389,6 +561,6 @@\n-void run_weak_cmpxchg_narrow_value_tests() {\n-  \/\/ Assume natural aligned\n-  TESTSIZE data[8];\n-  TESTSIZE ret;\n-  for (int i = 0; i < 7; i++) {\n-    memset(data, -1, sizeof(data));\n+void run_weak_cmpxchg_tests() {\n+  WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg;\n+  TESTSIZE data = 121;\n+  TESTSIZE ret = cmpxchg.weak_cmpxchg((intptr_t)&data, 121, 42);\n+  ASSERT_EQ(ret, 1);\n+  ASSERT_EQ(data, 42);\n@@ -396,4 +568,5 @@\n-    data[i] = 121;\n-    ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_narrow_cmpxchg((intptr_t)&data[i], 121, 42);\n-    ASSERT_EQ(ret, 1);\n-    ASSERT_EQ(data[i], 42);\n+  data = 121;\n+  ret = cmpxchg.weak_cmpxchg((intptr_t)&data, 120, 42);\n+  ASSERT_EQ(ret, 0);\n+  ASSERT_EQ(data, 121);\n+}\n@@ -401,4 +574,23 @@\n-    data[i] = 121;\n-    ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_narrow_cmpxchg((intptr_t)&data[i], 120, 42);\n-    ASSERT_EQ(ret, 0);\n-    ASSERT_EQ(data[i], 121);\n+TEST_VM(RiscV, weak_cmpxchg_int64_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int64_maybe_zacas) {\n+  if (UseZacas) {\n+    run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int32_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int32_maybe_zacas) {\n+  if (UseZacas) {\n+    run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n@@ -411,1 +603,1 @@\n-  run_weak_cmpxchg_narrow_value_tests<int16_t, Assembler::int16>();\n+  run_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n@@ -418,1 +610,1 @@\n-  run_weak_cmpxchg_narrow_value_tests<int8_t, Assembler::int8>();\n+  run_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n@@ -424,1 +616,1 @@\n-    run_weak_cmpxchg_narrow_value_tests<int16_t, Assembler::int16>();\n+    run_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n@@ -430,1 +622,1 @@\n-    run_weak_cmpxchg_narrow_value_tests<int8_t, Assembler::int8>();\n+    run_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n@@ -435,5 +627,19 @@\n-void run_weak_cmpxchg_tests() {\n-  TESTSIZE data = 121;\n-  TESTSIZE ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_cmpxchg((intptr_t)&data, 121, 42);\n-  ASSERT_EQ(ret, 1);\n-  ASSERT_EQ(data, 42);\n+static void run_concurrent_weak_cmpxchg_tests() {\n+  volatile TESTSIZE data = 0;\n+  int num_threads = 4;\n+  WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg; \/\/ not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {\n+    for (int i = 0; i < 10000; i++) {\n+      TESTSIZE oldvalue = _id + num_threads * i;\n+      TESTSIZE newvalue = oldvalue + 1;\n+      TESTSIZE ret;\n+      do {\n+        ret = cmpxchg.weak_cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != 1);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, (TESTSIZE)(num_threads*10000));\n+}\n@@ -441,4 +647,20 @@\n-  data = 121;\n-  ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_cmpxchg((intptr_t)&data, 120, 42);\n-  ASSERT_EQ(ret, 0);\n-  ASSERT_EQ(data, 121);\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_alt_weak_cmpxchg_tests() {\n+  volatile TESTSIZE data = 0;\n+  int num_threads = 4;\n+  WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg; \/\/ not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {\n+    for (int i = 0; i < 10000; i++) {\n+      TESTSIZE oldvalue;\n+      TESTSIZE ret = 0;\n+      do {\n+        oldvalue = data;\n+        TESTSIZE newvalue = oldvalue + 1;\n+        ret = cmpxchg.weak_cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != 1);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, (TESTSIZE)(num_threads*10000));\n@@ -447,1 +669,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int64_lr_sc) {\n+TEST_VM(RiscV, weak_cmpxchg_int64_concurrent_lr_sc) {\n@@ -450,1 +672,2 @@\n-  run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  run_concurrent_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n@@ -454,1 +677,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int64_maybe_zacas) {\n+TEST_VM(RiscV, weak_cmpxchg_int64_concurrent_maybe_zacas) {\n@@ -456,1 +679,2 @@\n-    run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+    run_concurrent_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n@@ -460,1 +684,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int32_lr_sc) {\n+TEST_VM(RiscV, weak_cmpxchg_int32_concurrent_lr_sc) {\n@@ -463,1 +687,2 @@\n-  run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  run_concurrent_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n@@ -467,1 +692,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int32_maybe_zacas) {\n+TEST_VM(RiscV, weak_cmpxchg_int32_concurrent_maybe_zacas) {\n@@ -469,1 +694,32 @@\n-    run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+    run_concurrent_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int16_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int16_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int8_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int8_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n","filename":"test\/hotspot\/gtest\/riscv\/test_assembler_riscv.cpp","additions":346,"deletions":90,"binary":false,"changes":436,"status":"modified"}]}