{"files":[{"patch":"@@ -114,1 +114,3 @@\n-  typedef TESTSIZE (*cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result);\n+  \/\/ The functions expect arguments to be type represented, not C-ABI argument representation.\n+  \/\/ Hence an unsigned should be zero-extended, and the same goes for the return value.\n+  typedef int64_t (*cmpxchg_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result);\n@@ -116,1 +118,1 @@\n-  typedef TESTSIZE (*cmpxchg_narrow_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n+  typedef int64_t (*cmpxchg_narrow_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result,\n@@ -198,67 +200,72 @@\n-  \/\/ Normal\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  \/\/ result == expected register\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  \/\/ new_value == result register\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  \/\/ expected == new_value register\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n+  TESTSIZE max = std::numeric_limits<TESTSIZE>::max();\n+  TESTSIZE min = std::numeric_limits<TESTSIZE>::max();\n+  TESTSIZE val[] = {1337, min, max};\n+  for (int i = 0; i < 3; i++) {\n+    \/\/ Normal\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,     42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  ,     42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                               0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    \/\/ result == expected register\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ ,  val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,      42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,      42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ ,  val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,      42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,  val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  ,     42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                               0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    \/\/ new_value == result register\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,     42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  ,     42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(    2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                           1336 \/* expected *\/,     42 \/* new value *\/,\n+                                              0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    \/\/ expected == new_value register\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,    42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(    3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                           1336 \/* expected *\/,     42 \/* new value *\/,\n+                                              0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+  }\n@@ -313,22 +320,27 @@\n-  for (int i = 0; i < 7; i++) {\n-    memset(data, -1, sizeof(data));\n-\n-    data[i] = 121;\n-    ret = cmpxchg.cmpxchg((intptr_t)&data[i], 121, 42);\n-    ASSERT_EQ(ret, 121);\n-    ASSERT_EQ(data[i], 42);\n-\n-    data[i] = 121;\n-    ret = cmpxchg.cmpxchg((intptr_t)&data[i], 120, 42);\n-    ASSERT_EQ(ret, 121);\n-    ASSERT_EQ(data[i], 121);\n-\n-    data[i] = 121;\n-    ret = cmpxchg_bool.cmpxchg((intptr_t)&data[i], 121, 42);\n-    ASSERT_EQ(ret, 1);\n-    ASSERT_EQ(data[i], 42);\n-\n-    data[i] = 121;\n-    ret = cmpxchg_bool.cmpxchg((intptr_t)&data[i], 120, 42);\n-    ASSERT_EQ(ret, 0);\n-    ASSERT_EQ(data[i], 121);\n+  TESTSIZE max = std::numeric_limits<TESTSIZE>::max();\n+  TESTSIZE min = std::numeric_limits<TESTSIZE>::min();\n+  TESTSIZE val[] = {121, min, max};\n+  for (int i = 0; i < 3; i++) {\n+    for (int j = 0; j < 7; j++) {\n+      \/\/ printf(\"%lu %lX\\n\", (uint64_t)val[i], (uint64_t)val[i]);\n+      memset(data, -1, sizeof(data));\n+      data[i] = val[i];\n+      ret = cmpxchg.cmpxchg((intptr_t)&data[i], val[i], 42);\n+      ASSERT_EQ(ret, val[i]);\n+      ASSERT_EQ(data[i], 42);\n+\n+      data[i] = val[i];\n+      ret = cmpxchg.cmpxchg((intptr_t)&data[i], 120, 42);\n+      ASSERT_EQ(ret, val[i]);\n+      ASSERT_EQ(data[i], val[i]);\n+\n+      data[i] = val[i];\n+      ret = cmpxchg_bool.cmpxchg((intptr_t)&data[i], val[i], 42);\n+      ASSERT_EQ(ret, 1);\n+      ASSERT_EQ(data[i], 42);\n+\n+      data[i] = val[i];\n+      ret = cmpxchg_bool.cmpxchg((intptr_t)&data[i], 120, 42);\n+      ASSERT_EQ(ret, 0);\n+      ASSERT_EQ(data[i], val[i]);\n+    }\n@@ -511,1 +523,3 @@\n-  typedef TESTSIZE (*weak_cmpxchg_narrow_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n+  \/\/ The functions expect arguments to be type represented, not C-ABI argument representation.\n+  \/\/ Hence an unsigned should be zero-extended, and the same goes for the return value.\n+  typedef int64_t (*weak_cmpxchg_narrow_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result,\n@@ -514,1 +528,1 @@\n-  typedef TESTSIZE (*weak_cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result);\n+  typedef int64_t (*weak_cmpxchg_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result);\n@@ -559,10 +573,15 @@\n-  WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg;\n-  TESTSIZE data = 121;\n-  TESTSIZE ret = cmpxchg.weak_cmpxchg((intptr_t)&data, 121, 42);\n-  ASSERT_EQ(ret, (TESTSIZE)1);\n-  ASSERT_EQ(data, (TESTSIZE)42);\n-\n-  data = 121;\n-  ret = cmpxchg.weak_cmpxchg((intptr_t)&data, 120, 42);\n-  ASSERT_EQ(ret, (TESTSIZE)0);\n-  ASSERT_EQ(data, (TESTSIZE)121);\n+  TESTSIZE max = std::numeric_limits<TESTSIZE>::max();\n+  TESTSIZE min = std::numeric_limits<TESTSIZE>::min();\n+  TESTSIZE val[] = {121, min, max};\n+  for (int i = 0; i < 3; i++) {\n+    WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg;\n+    TESTSIZE data = val[i];\n+    TESTSIZE ret = cmpxchg.weak_cmpxchg((intptr_t)&data, val[i], 42);\n+    ASSERT_EQ(ret, (TESTSIZE)1);\n+    ASSERT_EQ(data, (TESTSIZE)42);\n+\n+    data = val[i];\n+    ret = cmpxchg.weak_cmpxchg((intptr_t)&data, 120, 42);\n+    ASSERT_EQ(ret, (TESTSIZE)0);\n+    ASSERT_EQ(data, (TESTSIZE)val[i]);\n+  }\n","filename":"test\/hotspot\/gtest\/riscv\/test_assembler_riscv.cpp","additions":122,"deletions":103,"binary":false,"changes":225,"status":"modified"}]}