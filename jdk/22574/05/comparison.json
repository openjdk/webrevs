{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -33,0 +34,1 @@\n+#include \"threadHelper.inline.hpp\"\n@@ -35,0 +37,2 @@\n+#include <limits>\n+\n@@ -57,1 +61,1 @@\n-void run_cmov_tests() {\n+static void run_cmov_tests() {\n@@ -110,2 +114,3 @@\n- public:\n-  typedef TESTSIZE (*cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result);\n+  \/\/ The functions expect arguments to be type represented, not C-ABI argument representation.\n+  \/\/ Hence an unsigned should be zero-extended, and the same goes for the return value.\n+  typedef int64_t (*cmpxchg_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result);\n@@ -113,3 +118,11 @@\n-  static TESTSIZE base_cmpxchg(int variant, intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result, bool boolean_result = false) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n+  typedef int64_t (*cmpxchg_narrow_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result,\n+                                          int64_t scratch0, int64_t scratch1, int64_t scratch2);\n+\n+  BufferBlob*  _bb;\n+  cmpxchg_func _func;\n+  cmpxchg_narrow_func _narrow;\n+\n+ public:\n+  CmpxchgTester(int variant, bool boolean_result) {\n+    _bb = BufferBlob::create(\"riscvTest\", 128);\n+    CodeBuffer code(_bb);\n@@ -118,1 +131,9 @@\n-    {\n+    if (ASMSIZE == Assembler::int8 || ASMSIZE == Assembler::int16) {\n+        address entry = _masm.pc();\n+       _masm.cmpxchg_narrow_value(\/*addr*\/ c_rarg0, \/*expected*\/ c_rarg1, \/*new_value*\/c_rarg2,\n+                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        \/*result*\/ c_rarg3, boolean_result, c_rarg4, c_rarg5, c_rarg6); \/* Uses also t0-t1, caller saved *\/\n+      _masm.mv(c_rarg0, c_rarg3);\n+      _masm.ret();\n+      _narrow = ((cmpxchg_narrow_func)entry);\n+    } else {\n@@ -122,1 +143,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -129,1 +150,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -136,1 +157,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -143,1 +164,1 @@\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        ASMSIZE, Assembler::aq, Assembler::rl,\n@@ -150,0 +171,1 @@\n+      _func = ((cmpxchg_func)entry);\n@@ -152,3 +174,12 @@\n-    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, result);\n-    BufferBlob::free(bb);\n-    return ret;\n+  }\n+\n+  ~CmpxchgTester() {\n+    BufferBlob::free(_bb);\n+  }\n+\n+  TESTSIZE cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n+    if (ASMSIZE == Assembler::int8 || ASMSIZE == Assembler::int16) {\n+      return _narrow(addr, expected, new_value, \/* dummy result *\/ 67, -1, -1, -1);\n+    } else {\n+      return _func(addr, expected, new_value, \/* dummy result *\/ 67);\n+    }\n@@ -159,1 +190,2 @@\n-void plain_cmpxchg_test(int variant, TESTSIZE dv, TESTSIZE ex, TESTSIZE nv, TESTSIZE eret, TESTSIZE edata, bool bv) {\n+static void plain_cmpxchg_test(int variant, TESTSIZE dv, TESTSIZE ex, TESTSIZE nv, TESTSIZE eret, TESTSIZE edata, bool bv) {\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(variant, bv);\n@@ -161,1 +193,1 @@\n-  TESTSIZE ret = CmpxchgTester<TESTSIZE, ASMSIZE>::base_cmpxchg(variant, (intptr_t)&data, ex, nv, \/* dummy *\/ 67, bv);\n+  TESTSIZE ret = cmpxchg.cmpxchg((intptr_t)&data, ex, nv);\n@@ -167,68 +199,73 @@\n-void run_plain_cmpxchg_tests() {\n-  \/\/ Normal\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  \/\/ result == expected register\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  \/\/ new_value == result register\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  \/\/ expected == new_value register\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1337 \/* expected *\/,   42 \/* new value *\/,\n-                                           1 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n-\n-  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n-                                        1336 \/* expected *\/,   42 \/* new value *\/,\n-                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n+static void run_plain_cmpxchg_tests() {\n+  TESTSIZE max = std::numeric_limits<TESTSIZE>::max();\n+  TESTSIZE min = std::numeric_limits<TESTSIZE>::min();\n+  TESTSIZE val[] = {1337, min, max};\n+  for (int i = 0; i < 3; i++) {\n+    \/\/ Normal\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,     42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  ,     42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     0 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                               0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    \/\/ result == expected register\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ ,  val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,      42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,      42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ ,  val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,      42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,  val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  ,     42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     1 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                               0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    \/\/ new_value == result register\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  ,     42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  ,     42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(    2 \/* variant *\/ , val[i] \/* start value *\/,\n+                                           1336 \/* expected *\/,     42 \/* new value *\/,\n+                                              0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    \/\/ expected == new_value register\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,    42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                            1336 \/* expected *\/,     42 \/* new value *\/,\n+                                          val[i] \/* return *\/  , val[i] \/* end value *\/, false \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(     3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                          val[i] \/* expected *\/,     42 \/* new value *\/,\n+                                               1 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+\n+    plain_cmpxchg_test<TESTSIZE, ASMSIZE>(    3 \/* variant *\/ , val[i] \/* start value *\/,\n+                                           1336 \/* expected *\/,     42 \/* new value *\/,\n+                                              0 \/* return *\/  , val[i] \/* end value *\/, true \/* boolean ret*\/);\n+  }\n@@ -237,1 +274,1 @@\n-TEST_VM(RiscV, cmpxchg_int64_plain_lr_sc) {\n+TEST_VM(RiscV, cmpxchg_int64_lr_sc) {\n@@ -244,1 +281,1 @@\n-TEST_VM(RiscV, cmpxchg_int64_plain_maybe_zacas) {\n+TEST_VM(RiscV, cmpxchg_int64_maybe_zacas) {\n@@ -250,1 +287,1 @@\n-TEST_VM(RiscV, cmpxchg_int32_plain_lr_sc) {\n+TEST_VM(RiscV, cmpxchg_int32_lr_sc) {\n@@ -257,1 +294,1 @@\n-TEST_VM(RiscV, cmpxchg_int32_plain_maybe_zacas) {\n+TEST_VM(RiscV, cmpxchg_int32_maybe_zacas) {\n@@ -263,5 +300,6 @@\n-template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n-class NarrowCmpxchgTester {\n- public:\n-  typedef TESTSIZE (*cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n-                                   int64_t scratch0, int64_t scratch1, int64_t scratch2);\n+TEST_VM(RiscV, cmpxchg_uint32_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_plain_cmpxchg_tests<uint32_t, Assembler::uint32>();\n+  UseZacas = zacas;\n+}\n@@ -269,16 +307,3 @@\n-  static TESTSIZE narrow_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result, bool boolean_result = false) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n-    MacroAssembler _masm(&code);\n-    address entry = _masm.pc();\n-    {\n-       _masm.cmpxchg_narrow_value(\/*addr*\/ c_rarg0, \/*expected*\/ c_rarg1, \/*new_value*\/c_rarg2,\n-                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n-                        \/*result*\/ c_rarg3, boolean_result, c_rarg4, c_rarg5, c_rarg6); \/* Uses also t0-t1, caller saved *\/\n-      _masm.mv(c_rarg0, c_rarg3);\n-      _masm.ret();\n-    }\n-    _masm.flush(); \/\/ icache invalidate\n-    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, result, -1, -1, -1);\n-    BufferBlob::free(bb);\n-    return ret;\n+TEST_VM(RiscV, cmpxchg_uint32_maybe_zacas) {\n+  if (UseZacas) {\n+    run_plain_cmpxchg_tests<uint32_t, Assembler::uint32>();\n@@ -286,1 +311,1 @@\n-};\n+}\n@@ -289,1 +314,3 @@\n-void run_narrow_cmpxchg_tests() {\n+static void run_narrow_cmpxchg_tests() {\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(0, false);\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg_bool(0, true);\n@@ -293,22 +320,27 @@\n-  for (int i = 0; i < 7; i++) {\n-    memset(data, -1, sizeof(data));\n-\n-    data[i] = 121;\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 121, 42, \/* result *\/ 67, false);\n-    ASSERT_EQ(ret, 121);\n-    ASSERT_EQ(data[i], 42);\n-\n-    data[i] = 121;\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 120, 42, \/* result *\/ 67, false);\n-    ASSERT_EQ(ret, 121);\n-    ASSERT_EQ(data[i], 121);\n-\n-    data[i] = 121;\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 121, 42, \/* result *\/ 67, true);\n-    ASSERT_EQ(ret, 1);\n-    ASSERT_EQ(data[i], 42);\n-\n-    data[i] = 121;\n-    ret = NarrowCmpxchgTester<TESTSIZE, ASMSIZE>::narrow_cmpxchg((intptr_t)&data[i], 120, 42, \/* result *\/ 67, true);\n-    ASSERT_EQ(ret, 0);\n-    ASSERT_EQ(data[i], 121);\n+  TESTSIZE max = std::numeric_limits<TESTSIZE>::max();\n+  TESTSIZE min = std::numeric_limits<TESTSIZE>::min();\n+  TESTSIZE val[] = {121, min, max};\n+  for (int i = 0; i < 3; i++) {\n+    for (int j = 0; j < 7; j++) {\n+      \/\/ printf(\"%lu %lX\\n\", (uint64_t)val[i], (uint64_t)val[i]);\n+      memset(data, -1, sizeof(data));\n+      data[i] = val[i];\n+      ret = cmpxchg.cmpxchg((intptr_t)&data[i], val[i], 42);\n+      ASSERT_EQ(ret, val[i]);\n+      ASSERT_EQ(data[i], 42);\n+\n+      data[i] = val[i];\n+      ret = cmpxchg.cmpxchg((intptr_t)&data[i], 120, 42);\n+      ASSERT_EQ(ret, val[i]);\n+      ASSERT_EQ(data[i], val[i]);\n+\n+      data[i] = val[i];\n+      ret = cmpxchg_bool.cmpxchg((intptr_t)&data[i], val[i], 42);\n+      ASSERT_EQ(ret, 1);\n+      ASSERT_EQ(data[i], 42);\n+\n+      data[i] = val[i];\n+      ret = cmpxchg_bool.cmpxchg((intptr_t)&data[i], 120, 42);\n+      ASSERT_EQ(ret, 0);\n+      ASSERT_EQ(data[i], val[i]);\n+    }\n@@ -325,0 +357,6 @@\n+TEST_VM(RiscV, cmpxchg_int16_maybe_zacas) {\n+  if (UseZacas) {\n+    run_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+  }\n+}\n+\n@@ -332,1 +370,1 @@\n-TEST_VM(RiscV, cmpxchg_int16_maybe_zacas) {\n+TEST_VM(RiscV, cmpxchg_int8_maybe_zacas) {\n@@ -334,1 +372,1 @@\n-    run_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+    run_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n@@ -338,1 +376,79 @@\n-TEST_VM(RiscV, cmpxchg_int8_maybe_zacas) {\n+template <typename TESTSIZE>\n+TESTSIZE next_count(TESTSIZE now, TESTSIZE add) {\n+  if ((std::numeric_limits<TESTSIZE>::max() - add) >= now) {\n+    return now + add;\n+  }\n+  TESTSIZE diff = std::numeric_limits<TESTSIZE>::max() - now;\n+  add -= diff + 1; \/\/ add one to the diff for the wrap around.\n+  return std::numeric_limits<TESTSIZE>::min() + add;\n+}\n+\n+constexpr int64_t PAR_IT_END       = 10000;\n+constexpr int64_t NUMBER_THREADS   = 4;\n+constexpr int64_t TOTAL_ITERATIONS = NUMBER_THREADS * PAR_IT_END;\n+\n+template <typename TESTSIZE, ENABLE_IF(std::numeric_limits<TESTSIZE>::max() <= (std::numeric_limits<TESTSIZE>::min() + TOTAL_ITERATIONS))>\n+constexpr TESTSIZE result_count() {\n+  int64_t range = std::numeric_limits<TESTSIZE>::max() - std::numeric_limits<TESTSIZE>::min() + 1;\n+  int64_t rest = TOTAL_ITERATIONS % range;\n+  return std::numeric_limits<TESTSIZE>::min() + rest;\n+}\n+\n+template <typename TESTSIZE, ENABLE_IF(std::numeric_limits<TESTSIZE>::max() > (std::numeric_limits<TESTSIZE>::min() + TOTAL_ITERATIONS))>\n+constexpr TESTSIZE result_count() {\n+  return std::numeric_limits<TESTSIZE>::min() + TOTAL_ITERATIONS;\n+}\n+\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_cmpxchg_tests() {\n+  volatile TESTSIZE data = std::numeric_limits<TESTSIZE>::min();\n+  int num_threads = NUMBER_THREADS;\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(0, false); \/\/ variant 0, not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {   \/\/ _id starts from 0..(CTHREAD-1)\n+    TESTSIZE my_oldvalue = std::numeric_limits<TESTSIZE>::min() + _id;\n+    for (int64_t i = 0; i < PAR_IT_END ; i++) {\n+      TESTSIZE newvalue = next_count<TESTSIZE>(my_oldvalue,  1);\n+      TESTSIZE ret;\n+      do {\n+        ret = cmpxchg.cmpxchg((intptr_t)&data, my_oldvalue, newvalue);\n+      } while (ret != my_oldvalue);\n+      my_oldvalue = next_count<TESTSIZE>(my_oldvalue, num_threads);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, result_count<TESTSIZE>());\n+}\n+\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_alt_cmpxchg_tests() {\n+  volatile TESTSIZE data = std::numeric_limits<TESTSIZE>::min();\n+  int num_threads = NUMBER_THREADS;\n+  CmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg(0, false); \/\/ variant 0, not bool ret\n+  auto incThread = [&](Thread* _current, int _id) {   \/\/ _id starts from 0..(CTHREAD-1)\n+    for (int i = 0; i < PAR_IT_END; i++) {\n+      TESTSIZE oldvalue;\n+      TESTSIZE ret = 0;\n+      do {\n+        oldvalue = ret;\n+        TESTSIZE newvalue = next_count<TESTSIZE>(oldvalue, 1);\n+        ret = cmpxchg.cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != oldvalue);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, result_count<TESTSIZE>());\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int64_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_cmpxchg_tests<int64_t, Assembler::int64>();\n+  run_concurrent_alt_cmpxchg_tests<int64_t, Assembler::int64>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int64_concurrent_maybe_zacas) {\n@@ -340,1 +456,62 @@\n-    run_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n+    run_concurrent_cmpxchg_tests<int64_t, Assembler::int64>();\n+    run_concurrent_alt_cmpxchg_tests<int64_t, Assembler::int64>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int32_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_cmpxchg_tests<int32_t, Assembler::int32>();\n+  run_concurrent_alt_cmpxchg_tests<int32_t, Assembler::int32>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int32_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_cmpxchg_tests<int32_t, Assembler::int32>();\n+    run_concurrent_alt_cmpxchg_tests<int32_t, Assembler::int32>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_uint32_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_cmpxchg_tests<uint32_t, Assembler::uint32>();\n+  run_concurrent_alt_cmpxchg_tests<uint32_t, Assembler::uint32>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_uint32_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_cmpxchg_tests<uint32_t, Assembler::uint32>();\n+    run_concurrent_alt_cmpxchg_tests<uint32_t, Assembler::uint32>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int16_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_cmpxchg_tests<int16_t, Assembler::int16>();\n+  run_concurrent_alt_cmpxchg_tests<int16_t, Assembler::int16>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int16_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_cmpxchg_tests<int16_t, Assembler::int16>();\n+    run_concurrent_alt_cmpxchg_tests<int16_t, Assembler::int16>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int8_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_cmpxchg_tests<int8_t, Assembler::int8>();\n+  run_concurrent_alt_cmpxchg_tests<int8_t, Assembler::int8>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int8_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_cmpxchg_tests<int8_t, Assembler::int8>();\n+    run_concurrent_alt_cmpxchg_tests<int8_t, Assembler::int8>();\n@@ -346,2 +523,3 @@\n- public:\n-  typedef TESTSIZE (*cmpxchg_narrow)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n+  \/\/ The functions expect arguments to be type represented, not C-ABI argument representation.\n+  \/\/ Hence an unsigned should be zero-extended, and the same goes for the return value.\n+  typedef int64_t (*weak_cmpxchg_narrow_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result,\n@@ -350,1 +528,1 @@\n-  typedef TESTSIZE (*cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result);\n+  typedef int64_t (*weak_cmpxchg_func)(intptr_t addr, int64_t expected, int64_t new_value, int64_t result);\n@@ -352,3 +530,8 @@\n-  static TESTSIZE weak_narrow_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n+  BufferBlob*  _bb;\n+  weak_cmpxchg_narrow_func _narrow_weak;\n+  weak_cmpxchg_func _weak;\n+\n+ public:\n+  WeakCmpxchgTester() : _bb(nullptr), _narrow_weak(nullptr), _weak(nullptr) {\n+    _bb = BufferBlob::create(\"riscvTest\", 128);\n+    CodeBuffer code(_bb);\n@@ -356,2 +539,2 @@\n-    address entry = _masm.pc();\n-    {\n+    if (ASMSIZE == Assembler::int8 || ASMSIZE == Assembler::int16) {\n+        address entry = _masm.pc();\n@@ -363,13 +546,3 @@\n-    }\n-    _masm.flush(); \/\/ icache invalidate\n-    TESTSIZE ret = ((cmpxchg_narrow)entry)(addr, expected, new_value, \/*result*\/ 67, -1, -1, -1);\n-    BufferBlob::free(bb);\n-    return ret;\n-  }\n-\n-  static TESTSIZE weak_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n-    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n-    CodeBuffer code(bb);\n-    MacroAssembler _masm(&code);\n-    address entry = _masm.pc();\n-    {\n+      _narrow_weak = ((weak_cmpxchg_narrow_func)entry);\n+    } else {\n+        address entry = _masm.pc();\n@@ -380,0 +553,1 @@\n+      _weak = ((weak_cmpxchg_func)entry);\n@@ -382,3 +556,12 @@\n-    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, \/*result*\/ 67);\n-    BufferBlob::free(bb);\n-    return ret;\n+  }\n+\n+  TESTSIZE weak_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value) {\n+    if (ASMSIZE == Assembler::int8 || ASMSIZE == Assembler::int16) {\n+      return _narrow_weak(addr, expected, new_value, \/* dummy result *\/ 67, -1, -1, -1);\n+    } else {\n+      return _weak(addr, expected, new_value, \/* dummy result *\/ 67);\n+    }\n+  }\n+\n+  ~WeakCmpxchgTester() {\n+    BufferBlob::free(_bb);\n@@ -389,16 +572,54 @@\n-void run_weak_cmpxchg_narrow_value_tests() {\n-  \/\/ Assume natural aligned\n-  TESTSIZE data[8];\n-  TESTSIZE ret;\n-  for (int i = 0; i < 7; i++) {\n-    memset(data, -1, sizeof(data));\n-\n-    data[i] = 121;\n-    ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_narrow_cmpxchg((intptr_t)&data[i], 121, 42);\n-    ASSERT_EQ(ret, 1);\n-    ASSERT_EQ(data[i], 42);\n-\n-    data[i] = 121;\n-    ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_narrow_cmpxchg((intptr_t)&data[i], 120, 42);\n-    ASSERT_EQ(ret, 0);\n-    ASSERT_EQ(data[i], 121);\n+void run_weak_cmpxchg_tests() {\n+  TESTSIZE max = std::numeric_limits<TESTSIZE>::max();\n+  TESTSIZE min = std::numeric_limits<TESTSIZE>::min();\n+  TESTSIZE val[] = {121, min, max};\n+  for (int i = 0; i < 3; i++) {\n+    WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg;\n+    TESTSIZE data = val[i];\n+    TESTSIZE ret = cmpxchg.weak_cmpxchg((intptr_t)&data, val[i], 42);\n+    ASSERT_EQ(ret, (TESTSIZE)1);\n+    ASSERT_EQ(data, (TESTSIZE)42);\n+\n+    data = val[i];\n+    ret = cmpxchg.weak_cmpxchg((intptr_t)&data, 120, 42);\n+    ASSERT_EQ(ret, (TESTSIZE)0);\n+    ASSERT_EQ(data, (TESTSIZE)val[i]);\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int64_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int64_maybe_zacas) {\n+  if (UseZacas) {\n+    run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int32_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int32_maybe_zacas) {\n+  if (UseZacas) {\n+    run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_uint32_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_weak_cmpxchg_tests<uint32_t, Assembler::uint32>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_uint32_maybe_zacas) {\n+  if (UseZacas) {\n+    run_weak_cmpxchg_tests<uint32_t, Assembler::uint32>();\n@@ -411,1 +632,1 @@\n-  run_weak_cmpxchg_narrow_value_tests<int16_t, Assembler::int16>();\n+  run_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n@@ -418,1 +639,1 @@\n-  run_weak_cmpxchg_narrow_value_tests<int8_t, Assembler::int8>();\n+  run_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n@@ -424,1 +645,1 @@\n-    run_weak_cmpxchg_narrow_value_tests<int16_t, Assembler::int16>();\n+    run_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n@@ -430,1 +651,1 @@\n-    run_weak_cmpxchg_narrow_value_tests<int8_t, Assembler::int8>();\n+    run_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n@@ -435,5 +656,20 @@\n-void run_weak_cmpxchg_tests() {\n-  TESTSIZE data = 121;\n-  TESTSIZE ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_cmpxchg((intptr_t)&data, 121, 42);\n-  ASSERT_EQ(ret, 1);\n-  ASSERT_EQ(data, 42);\n+static void run_concurrent_weak_cmpxchg_tests() {\n+  volatile TESTSIZE data = std::numeric_limits<TESTSIZE>::min();\n+  int num_threads = NUMBER_THREADS;\n+  WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg; \/\/ not bool ret\n+  auto incThread = [&](Thread* _current, int _id) { \/\/ _id starts from 0..(CTHREAD-1)\n+    TESTSIZE my_oldvalue = std::numeric_limits<TESTSIZE>::min() + _id;\n+    for (int64_t i = 0; i < PAR_IT_END; i++) {\n+      TESTSIZE newvalue = next_count<TESTSIZE>(my_oldvalue, 1);\n+      TESTSIZE ret;\n+      do {\n+        ret = cmpxchg.weak_cmpxchg((intptr_t)&data, my_oldvalue, newvalue);\n+      } while (ret != 1);\n+      my_oldvalue = next_count<TESTSIZE>(my_oldvalue, num_threads);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, result_count<TESTSIZE>());\n+}\n@@ -441,4 +677,20 @@\n-  data = 121;\n-  ret = WeakCmpxchgTester<TESTSIZE, ASMSIZE>::weak_cmpxchg((intptr_t)&data, 120, 42);\n-  ASSERT_EQ(ret, 0);\n-  ASSERT_EQ(data, 121);\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+static void run_concurrent_alt_weak_cmpxchg_tests() {\n+  volatile TESTSIZE data = std::numeric_limits<TESTSIZE>::min();\n+  int num_threads = NUMBER_THREADS;\n+  WeakCmpxchgTester<TESTSIZE, ASMSIZE> cmpxchg; \/\/ not bool ret\n+  auto incThread = [&](Thread* _current, int _id) { \/\/ _id starts from 0..(CTHREAD-1)\n+    for (int i = 0; i < PAR_IT_END; i++) {\n+      TESTSIZE oldvalue;\n+      TESTSIZE ret = 0;\n+      do {\n+        oldvalue = data;\n+        TESTSIZE newvalue = next_count<TESTSIZE>(oldvalue, 1);\n+        ret = cmpxchg.weak_cmpxchg((intptr_t)&data, oldvalue, newvalue);\n+      } while (ret != 1);\n+    }\n+  };\n+  TestThreadGroup<decltype(incThread)> ttg(incThread, num_threads);\n+  ttg.doit();\n+  ttg.join();\n+  ASSERT_EQ(data, result_count<TESTSIZE>());\n@@ -447,1 +699,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int64_lr_sc) {\n+TEST_VM(RiscV, weak_cmpxchg_int64_concurrent_lr_sc) {\n@@ -450,1 +702,2 @@\n-  run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  run_concurrent_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n@@ -454,1 +707,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int64_maybe_zacas) {\n+TEST_VM(RiscV, weak_cmpxchg_int64_concurrent_maybe_zacas) {\n@@ -456,1 +709,2 @@\n-    run_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+    run_concurrent_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int64_t, Assembler::int64>();\n@@ -460,1 +714,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int32_lr_sc) {\n+TEST_VM(RiscV, weak_cmpxchg_int32_concurrent_lr_sc) {\n@@ -463,1 +717,2 @@\n-  run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  run_concurrent_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n@@ -467,1 +722,1 @@\n-TEST_VM(RiscV, weak_cmpxchg_int32_maybe_zacas) {\n+TEST_VM(RiscV, weak_cmpxchg_int32_concurrent_maybe_zacas) {\n@@ -469,1 +724,32 @@\n-    run_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+    run_concurrent_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int32_t, Assembler::int32>();\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int16_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int16_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int16_t, Assembler::int16>();\n+  }\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int8_concurrent_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_concurrent_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n+  run_concurrent_alt_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, weak_cmpxchg_int8_concurrent_maybe_zacas) {\n+  if (UseZacas) {\n+    run_concurrent_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n+    run_concurrent_alt_weak_cmpxchg_tests<int8_t, Assembler::int8>();\n","filename":"test\/hotspot\/gtest\/riscv\/test_assembler_riscv.cpp","additions":484,"deletions":198,"binary":false,"changes":682,"status":"modified"}]}