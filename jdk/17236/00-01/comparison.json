{"files":[{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4112270 8264102\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test Keyboard Navigation in JTable.\n+ * @run main\/manual KeyBoardNavigation\n+ *\/\n+\n+public class KeyBoardNavigation {\n+    static JFrame frame;\n+    public static PassFailJFrame passFailJFrame;\n+\n+    static void initTest() throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. Refer to bug report 4112270 for spec of keyboard navigation.\n+                2. Check all combinations of navigational keys in all four modes\n+                 shift and control verifying each change to the selection against\n+                  the spec. If it does, press \"pass\", otherwise press \"fail\".\n+                \"\"\";\n+\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+                {\"Mark\", \"Andrews\", \"Red\", 2, Boolean.TRUE},\n+                {\"Tom\", \"Ball\", \"Blue\", 99, Boolean.FALSE},\n+                {\"Alan\", \"Chung\", \"Green\", 838, Boolean.FALSE},\n+                {\"Jeff\", \"Dinkins\", \"Turquois\", 8, Boolean.TRUE},\n+                {\"Amy\", \"Fowler\", \"Yellow\", 3, Boolean.FALSE},\n+                {\"Brian\", \"Gerhold\", \"Green\", 0, Boolean.FALSE},\n+                {\"James\", \"Gosling\", \"Pink\", 21, Boolean.FALSE},\n+                {\"David\", \"Karlton\", \"Red\", 1, Boolean.FALSE},\n+                {\"Dave\", \"Kloba\", \"Yellow\", 14, Boolean.FALSE},\n+                {\"Peter\", \"Korn\", \"Purple\", 12, Boolean.FALSE},\n+                {\"Phil\", \"Milne\", \"Purple\", 3, Boolean.FALSE},\n+                {\"Dave\", \"Moore\", \"Green\", 88, Boolean.FALSE},\n+                {\"Hans\", \"Muller\", \"Maroon\", 5, Boolean.FALSE},\n+                {\"Rick\", \"Levenson\", \"Blue\", 2, Boolean.FALSE},\n+                {\"Tim\", \"Prinzing\", \"Blue\", 22, Boolean.FALSE},\n+                {\"Chester\", \"Rose\", \"Black\", 0, Boolean.FALSE},\n+                {\"Ray\", \"Ryan\", \"Gray\", 77, Boolean.FALSE},\n+                {\"Georges\", \"Saab\", \"Red\", 4, Boolean.FALSE},\n+                {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, Boolean.FALSE},\n+                {\"Kathy\", \"Walrath\", \"Blue\", 8, Boolean.FALSE},\n+                {\"Arnaud\", \"Weber\", \"Green\", 44, Boolean.FALSE}\n+        };\n+\n+        frame = new JFrame(\"JTable Keyboard Navigation Test\");\n+        passFailJFrame = new PassFailJFrame(\"Test Instructions\",\n+                INSTRUCTIONS, 5L, 6, 45);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.VERTICAL);\n+\n+        JTable tableView = getTableDetails(names, data);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox<String> comboBox = new JComboBox<>();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer) headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number) value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        JScrollPane scrollPane = new JScrollPane(tableView);\n+        scrollPane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollPane.setPreferredSize(new Dimension(430, 200));\n+\n+        frame.add(scrollPane);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private static JTable getTableDetails(String[] names, Object[][] data) {\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() {\n+                return names.length;\n+            }\n+\n+            public int getRowCount() {\n+                return data.length;\n+            }\n+\n+            public Object getValueAt(int row, int col) {\n+                return data[row][col];\n+            }\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {\n+                return names[column];\n+            }\n+\n+            public Class<?> getColumnClass(int c) {\n+                return getValueAt(0, c).getClass();\n+            }\n+\n+            public boolean isCellEditable(int row, int col) {\n+                return true;\n+            }\n+\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+        };\n+\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        return tableView;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                initTest();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/KeyBoardNavigation.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<!DOCTYPE HTML PUBLIC \"-\/\/IETF\/\/DTD HTML\/\/EN\">\n-<html>\n-  <head>\n-    <title>Keyboard Navigation in JTable<\/title>\n-  <\/head>\n-\n-  <body>\n-    <h1>Keyboard Navigation in JTable<\/h1>\n-    <applet code=KeyBoardNavigation width=500 height=200>\n-    <\/applet>\n-\n-    <p>\n-      Refer to bug report 4112270 for spec of keyboard navigation. Check all combinations of navigational keys in all four modes shift and control verifying each change to the selection against the spec.\n-       If it does, press \"pass\", otherwise press \"fail\".\n-    <hr>\n-    <address><a href=\"mailto:milne@taller\">Philip Milne<\/a><\/address>\n-\n-  <\/body>\n-<\/html>\n-\n","filename":"test\/jdk\/javax\/swing\/JTable\/KeyBoardNavigation\/KeyBoardNavigation.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,170 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Color;\n-import java.awt.Container;\n-import java.awt.Dimension;\n-\n-import javax.swing.DefaultCellEditor;\n-import javax.swing.JApplet;\n-import javax.swing.JComboBox;\n-import javax.swing.JLabel;\n-import javax.swing.JScrollPane;\n-import javax.swing.JTable;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.table.AbstractTableModel;\n-import javax.swing.table.DefaultTableCellRenderer;\n-import javax.swing.table.TableCellRenderer;\n-import javax.swing.table.TableColumn;\n-import javax.swing.table.TableModel;\n-\n-\n-\/**\n- * @test\n- * @bug 4112270\n- * @summary\n- *     Keyboard Navigation in JTable\n- * @author milne\n- * @run applet\/manual=yesno KeyBoardNavigation.html\n- *\/\n-public class KeyBoardNavigation extends JApplet\n-{\n-    static void initTest(Container contentPane)\n-    {\n-        \/\/ Take the dummy data from SwingSet.\n-        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n-                \"Favorite Number\", \"Vegetarian\"};\n-        final Object[][] data = {\n-                {\"Mark\", \"Andrews\", \"Red\", new Integer(2), new Boolean(true)},\n-                {\"Tom\", \"Ball\", \"Blue\", new Integer(99), new Boolean(false)},\n-                {\"Alan\", \"Chung\", \"Green\", new Integer(838), new Boolean(false)},\n-                {\"Jeff\", \"Dinkins\", \"Turquois\", new Integer(8), new Boolean(true)},\n-                {\"Amy\", \"Fowler\", \"Yellow\", new Integer(3), new Boolean(false)},\n-                {\"Brian\", \"Gerhold\", \"Green\", new Integer(0), new Boolean(false)},\n-                {\"James\", \"Gosling\", \"Pink\", new Integer(21), new Boolean(false)},\n-                {\"David\", \"Karlton\", \"Red\", new Integer(1), new Boolean(false)},\n-                {\"Dave\", \"Kloba\", \"Yellow\", new Integer(14), new Boolean(false)},\n-                {\"Peter\", \"Korn\", \"Purple\", new Integer(12), new Boolean(false)},\n-                {\"Phil\", \"Milne\", \"Purple\", new Integer(3), new Boolean(false)},\n-                {\"Dave\", \"Moore\", \"Green\", new Integer(88), new Boolean(false)},\n-                {\"Hans\", \"Muller\", \"Maroon\", new Integer(5), new Boolean(false)},\n-                {\"Rick\", \"Levenson\", \"Blue\", new Integer(2), new Boolean(false)},\n-                {\"Tim\", \"Prinzing\", \"Blue\", new Integer(22), new Boolean(false)},\n-                {\"Chester\", \"Rose\", \"Black\", new Integer(0), new Boolean(false)},\n-                {\"Ray\", \"Ryan\", \"Gray\", new Integer(77), new Boolean(false)},\n-                {\"Georges\", \"Saab\", \"Red\", new Integer(4), new Boolean(false)},\n-                {\"Willie\", \"Walker\", \"Phthalo Blue\", new Integer(4), new Boolean(false)},\n-                {\"Kathy\", \"Walrath\", \"Blue\", new Integer(8), new Boolean(false)},\n-                {\"Arnaud\", \"Weber\", \"Green\", new Integer(44), new Boolean(false)}\n-        };\n-\n-        \/\/ Create a model of the data.\n-        TableModel dataModel = new AbstractTableModel() {\n-            \/\/ These methods always need to be implemented.\n-            public int getColumnCount() { return names.length; }\n-            public int getRowCount() { return data.length;}\n-            public Object getValueAt(int row, int col) {return data[row][col];}\n-\n-            \/\/ The default implementations of these methods in\n-            \/\/ AbstractTableModel would work, but we can refine them.\n-            public String getColumnName(int column) {return names[column];}\n-            public Class getColumnClass(int c) {return getValueAt(0, c).getClass();}\n-            public boolean isCellEditable(int row, int col) {return true;}\n-            public void setValueAt(Object aValue, int row, int column) {\n-                System.out.println(\"Setting value to: \" + aValue);\n-                data[row][column] = aValue;\n-            }\n-        };\n-\n-        \/\/ Create the table\n-        JTable tableView = new JTable(dataModel);\n-        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n-        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n-        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n-\n-        \/\/ Create a combo box to show that you can use one in a table.\n-        JComboBox comboBox = new JComboBox();\n-        comboBox.addItem(\"Red\");\n-        comboBox.addItem(\"Orange\");\n-        comboBox.addItem(\"Yellow\");\n-        comboBox.addItem(\"Green\");\n-        comboBox.addItem(\"Blue\");\n-        comboBox.addItem(\"Indigo\");\n-        comboBox.addItem(\"Violet\");\n-\n-        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n-        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n-        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n-\n-        \/\/ Set a pink background and tooltip for the Color column renderer.\n-        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n-        colorColumnRenderer.setBackground(Color.pink);\n-        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n-        colorColumn.setCellRenderer(colorColumnRenderer);\n-\n-        \/\/ Set a tooltip for the header of the colors column.\n-        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n-        if (headerRenderer instanceof DefaultTableCellRenderer)\n-            ((DefaultTableCellRenderer)headerRenderer).setToolTipText(\"Hi Mom!\");\n-\n-        \/\/ Set the width of the \"Vegetarian\" column.\n-        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n-        vegetarianColumn.setPreferredWidth(100);\n-\n-        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n-        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n-        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n-            public void setValue(Object value) {\n-                int cellValue = (value instanceof Number) ? ((Number)value).intValue() : 0;\n-                setForeground((cellValue > 30) ? Color.black : Color.red);\n-                setText((value == null) ? \"\" : value.toString());\n-            }\n-        };\n-        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n-        numbersColumn.setCellRenderer(numberColumnRenderer);\n-        numbersColumn.setPreferredWidth(110);\n-\n-        \/\/ Finish setting up the table.\n-        JScrollPane scrollpane = new JScrollPane(tableView);\n-        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n-        scrollpane.setPreferredSize(new Dimension(430, 200));\n-\n-        contentPane.add(scrollpane);\n-    }\n-\n-\n-    public void init() {\n-        SwingUtilities.invokeLater(() -> {\n-            try {\n-                UIManager.setLookAndFeel(\n-                        \"javax.swing.plaf.metal.MetalLookAndFeel\");\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-\n-            initTest(getContentPane());\n-        });\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JTable\/KeyBoardNavigation\/KeyBoardNavigation.java","additions":0,"deletions":170,"binary":false,"changes":170,"status":"deleted"}]}