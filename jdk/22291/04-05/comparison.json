{"files":[{"patch":"@@ -264,1 +264,0 @@\n-\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,1 +62,2 @@\n-\/\/    - As classes and heap objects are discovered, we find out what classes must be AOT-initialized\n+\/\/    - As heap objects (**Note2) and classes are discovered, we find out what classes must\n+\/\/      be AOT-initialized:\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-      \/\/ This ensures that during the production run, whenever Java code seens a cached object\n+      \/\/ This ensures that during the production run, whenever Java code sees a cached object\n@@ -323,13 +323,13 @@\n-      if (InstanceKlass::cast(k)->is_enum_subclass()) {\n-        \/\/ We can't rerun <clinit> of enum classes (see cdsEnumKlass.cpp) so\n-        \/\/ we must store them as AOT-initialized.\n-        AOTArtifactFinder::add_aot_inited_class(InstanceKlass::cast(k));\n-      } else if (subgraph_info == _dump_time_special_subgraph) {\n-        \/\/ TODO: we do this only for the special subgraph for now. Extending this to\n-        \/\/ other subgraphs would require more refactoring of the core library (such as\n-        \/\/ move some initialization logic into runtimeSetup()).\n-        \/\/\n-        \/\/ For the other subgraphs, we have a weaker mechanism to ensure that\n-        \/\/ all classes in a subgraph are initialized before the subgraph is programmatically\n-        \/\/ returned from jdk.internal.misc.CDS::initializeFromArchive().\n-        \/\/ See HeapShared::initialize_from_archived_subgraph().\n+      if (InstanceKlass::cast(k)->is_enum_subclass()\n+          \/\/ We can't rerun <clinit> of enum classes (see cdsEnumKlass.cpp) so\n+          \/\/ we must store them as AOT-initialized.\n+          || (subgraph_info == _dump_time_special_subgraph))\n+          \/\/ TODO: we do this only for the special subgraph for now. Extending this to\n+          \/\/ other subgraphs would require more refactoring of the core library (such as\n+          \/\/ move some initialization logic into runtimeSetup()).\n+          \/\/\n+          \/\/ For the other subgraphs, we have a weaker mechanism to ensure that\n+          \/\/ all classes in a subgraph are initialized before the subgraph is programmatically\n+          \/\/ returned from jdk.internal.misc.CDS::initializeFromArchive().\n+          \/\/ See HeapShared::initialize_from_archived_subgraph().\n+      {\n@@ -784,0 +784,1 @@\n+#ifdef ASSERT\n@@ -792,0 +793,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"}]}