{"files":[{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4230355\n+ * @summary\n+ *     This test checks if progress bars lay out correctly when their\n+ *     ComponentOrientation property is set to RIGHT_TO_LEFT. This test is\n+ *     manual. The tester is asked to compare left-to-right and\n+ *     right-to-left progress bars and judge whether they are mirror images\n+ *     of each other.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RightLeftOrientation\n+ *\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Container;\n+import javax.swing.BorderFactory;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.LookAndFeel;\n+import javax.swing.JPanel;\n+import javax.swing.JProgressBar;\n+import javax.swing.UIManager;\n+\n+public class RightLeftOrientation {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        This test checks progress bars for correct Right-To-Left Component Orientation.\n+        The progress bars in the left column should fill up from the left while the bars in\n+        the right column should fill up from the right.\n+        If this is so, the test PASSES, otherwise it FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .title(\"Progress Bar Orientation Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(60)\n+            .testUI(RightLeftOrientation::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame frame = new JFrame(\"Progress Bar Orientation Test\");\n+        Container contentPane = frame.getContentPane();\n+        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.X_AXIS));\n+        contentPane.add(createBarSet(ComponentOrientation.LEFT_TO_RIGHT));\n+        contentPane.add(createBarSet(ComponentOrientation.RIGHT_TO_LEFT));\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static JPanel createBarSet(ComponentOrientation o) {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n+        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));\n+        JLabel header;\n+        if (o.isLeftToRight())\n+            header = new JLabel(\"Left To Right\");\n+        else\n+            header = new JLabel(\"Right To Left\");\n+        panel.add(header);\n+\n+        UIManager.LookAndFeelInfo[] lafs = UIManager.getInstalledLookAndFeels();\n+        for (int i = 0; i < lafs.length; i++) {\n+            if (i > 0)\n+                panel.add(Box.createVerticalStrut(10));\n+            panel.add(createProgressBars(lafs[i].getName(),\n+                                          lafs[i].getClassName(), o));\n+        }\n+\n+        return panel;\n+    }\n+\n+    static JPanel createProgressBars(String name, String plaf,\n+                                     ComponentOrientation o) {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n+        JLabel label = new JLabel(name);\n+        panel.add(label);\n+        try {\n+            LookAndFeel save = UIManager.getLookAndFeel();\n+            UIManager.setLookAndFeel(plaf);\n+\n+            panel.add(createProgressBar(true, 0, o));\n+            panel.add(Box.createVerticalStrut(5));\n+\n+            panel.add(createProgressBar(true, 5, o));\n+            panel.add(Box.createVerticalStrut(5));\n+\n+            panel.add(createProgressBar(true, 10, o));\n+            panel.add(Box.createVerticalStrut(5));\n+\n+            panel.add(createProgressBar(true, 20, o));\n+            panel.add(Box.createVerticalStrut(5));\n+\n+            UIManager.put(\"ProgressBar.cellSpacing\", Integer.valueOf(2));\n+            UIManager.put(\"ProgressBar.cellLength\", Integer.valueOf(7));\n+\n+            panel.add(createProgressBar(false, 5, o));\n+            panel.add(Box.createVerticalStrut(5));\n+\n+            panel.add(createProgressBar(false, 20, o));\n+\n+            UIManager.setLookAndFeel(save);\n+        } catch (Exception e) {\n+            System.err.println(e);\n+        }\n+        return panel;\n+    }\n+\n+    static JProgressBar createProgressBar(boolean paintStr, int value,\n+                                          ComponentOrientation o) {\n+        JProgressBar p = new JProgressBar(JProgressBar.HORIZONTAL, 0, 20);\n+        p.setStringPainted(paintStr);\n+        p.setValue(value);\n+        p.setComponentOrientation(o);\n+        return p;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/RightLeftOrientation.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4230391\n+ * @summary Tests that JProgressBar draws correctly when Insets are not zero\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4230391\n+*\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Container;\n+import java.awt.Insets;\n+import javax.swing.BorderFactory;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.LookAndFeel;\n+import javax.swing.JPanel;\n+import javax.swing.JProgressBar;\n+import javax.swing.UIManager;\n+\n+public class bug4230391 {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        Tests that progress bars honor insets in different L&Fs.\n+        Different L&Fs render the progress bar differently, and may or may\n+        not have a different colored background around the progress bar,\n+        and may or may not draw a border around the bar+background.\n+        The progress bars should be of equal width and the progress\n+        rendering line\/bar should not extend past\/overlap any border.\n+        If it is as described, the test PASSES.\n+    \"\"\";\n+\n+    static class InsetProgressBar extends JProgressBar {\n+        private Insets insets = new Insets(12, 12, 12, 12);\n+\n+        public InsetProgressBar(boolean horiz, int low, int hi) {\n+            super((horiz)?JProgressBar.HORIZONTAL:JProgressBar.VERTICAL, low, hi);\n+        }\n+\n+        public Insets getInsets() {\n+            return insets;\n+        }\n+    }\n+\n+    static JPanel createBarSet() {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n+        panel.setBorder(BorderFactory.createEmptyBorder(20,20,20,20));\n+        UIManager.LookAndFeelInfo[] lafs = UIManager.getInstalledLookAndFeels();\n+        for (int i = 0; i < lafs.length; i++) {\n+           if (i > 0) {\n+               panel.add(Box.createVerticalStrut(10));\n+            }\n+            panel.add(createProgressBars(lafs[i].getName(), lafs[i].getClassName()));\n+        }\n+        return panel;\n+    }\n+\n+    static JPanel createProgressBars(String name, String plaf) {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n+        try {\n+            LookAndFeel save = UIManager.getLookAndFeel();\n+            UIManager.setLookAndFeel(plaf);\n+\n+            ComponentOrientation ltr = ComponentOrientation.LEFT_TO_RIGHT;\n+\n+            Box b = Box.createVerticalBox();\n+            panel.add(b);\n+            panel.add(Box.createHorizontalStrut(5));\n+            panel.add(createProgressBar(false, true, ltr));\n+            UIManager.setLookAndFeel(save);\n+        } catch (Exception e) {\n+            System.err.println(e);\n+        }\n+        return panel;\n+    }\n+\n+    static JProgressBar createProgressBar(boolean solid, boolean horiz,\n+                                          ComponentOrientation o) {\n+        if (solid) {\n+            UIManager.put(\"ProgressBar.cellSpacing\", Integer.valueOf(0));\n+            UIManager.put(\"ProgressBar.cellLength\", Integer.valueOf(1));\n+        } else {\n+            UIManager.put(\"ProgressBar.cellSpacing\", Integer.valueOf(2));\n+            UIManager.put(\"ProgressBar.cellLength\", Integer.valueOf(7));\n+        }\n+\n+        JProgressBar p = new InsetProgressBar(horiz, 0, 20);\n+        p.setStringPainted(solid);\n+        p.setValue(20);\n+        p.setComponentOrientation(o);\n+\n+        return p;\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame frame = new JFrame(\"Progress Bar Insets Test\");\n+        Container contentPane = frame.getContentPane();\n+        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.X_AXIS));\n+        contentPane.add(createBarSet());\n+        frame.setSize(400, 300);\n+        return frame;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .title(\"Progress Bar Insets Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(60)\n+            .testUI(bug4230391::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/bug4230391.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4393042\n+ * @summary JProgressBar should update painting when maximum value is very large\n+ * @key headful\n+ *\/\n+\n+import java.awt.Graphics;\n+import javax.swing.JFrame;\n+import javax.swing.JProgressBar;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug4393042 extends JProgressBar {\n+\n+    static final int MAXIMUM = Integer.MAX_VALUE - 100;\n+    static volatile int value = 0;\n+    static volatile bug4393042 progressBar;\n+    static JFrame frame;\n+    static volatile int paintCount = 0;\n+\n+    public void paintComponent(Graphics g) {\n+        super.paintComponent(g);\n+        System.out.println(\"paint count=\" + (++paintCount));\n+    }\n+\n+    public bug4393042(int min, int max) {\n+       super(min, max);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+       UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+\n+       try {\n+           SwingUtilities.invokeAndWait(bug4393042::createUI);\n+\n+           value = 0;\n+           for (int i = 0; i <= 10; i++) {\n+               Thread.sleep(1000);\n+               SwingUtilities.invokeAndWait(() -> {\n+                  progressBar.setValue(value);\n+               });\n+               value += MAXIMUM \/ 10;\n+           }\n+\n+       } finally {\n+           SwingUtilities.invokeAndWait(() -> {\n+              if (frame != null) {\n+                  frame.dispose();\n+              }\n+           });\n+        }\n+        if (paintCount < 10 || paintCount > 100) {\n+            throw new RuntimeException(\"Unexpected paint count : \" + paintCount);\n+        }\n+    }\n+\n+    static void createUI() {\n+        frame = new JFrame(\"bug4393042\");\n+        progressBar = new bug4393042(0, MAXIMUM);\n+        progressBar.setStringPainted(true);\n+        progressBar.setValue(0);\n+        frame.add(progressBar);\n+        frame.setSize(400, 200);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/bug4393042.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5003022\n+ * @summary Test that setting zero value on JProgressBar works in GTK L&F\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug5003022\n+*\/\n+\n+import java.awt.FlowLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JProgressBar;\n+import javax.swing.UIManager;\n+\n+public class bug5003022 {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+         There are two progress bars, they should display progress strings.\n+         The first progress bar should display 0% and the bar should show no progress color fill.\n+         The second progress bar should display 30% and the bar should show 30% progress color fill.\n+         If it is as described, the test PASSES, otherwise it FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .title(\"bug5003022 Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(60)\n+            .testUI(bug5003022::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        try {\n+            \/* This will only succeed on Linux, but the test is valid for other platforms and L&Fs *\/\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        JFrame frame = new JFrame(\"bug5003022\");\n+        JProgressBar pb1 = new JProgressBar();\n+        pb1.setValue(0);\n+        pb1.setStringPainted(true);\n+\n+        JProgressBar pb2 = new JProgressBar();\n+        pb2.setValue(30);\n+        pb2.setStringPainted(true);\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(pb1);\n+        frame.add(pb2);\n+\n+        frame.setSize(300, 300);\n+        return frame;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/bug5003022.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}