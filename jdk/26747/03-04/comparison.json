{"files":[{"patch":"@@ -5915,1 +5915,0 @@\n-        align(16);\n@@ -5918,1 +5917,1 @@\n-        Label L_fill_64_bytes_loop, L_align_64_bytes;\n+        Label L_fill_64_bytes_loop, L_align_64_bytes_loop;\n@@ -5920,2 +5919,2 @@\n-            \/\/ align 'big' arrays to 64 bytes (cache line size) to minimize split_stores\n-            cmpptr(count, 256<<shift);\n+            \/\/ align 'big' arrays to cache lines to minimize split_stores\n+            cmpptr(count, 256 << shift);\n@@ -5923,1 +5922,0 @@\n-            align(16);\n@@ -5925,4 +5923,12 @@\n-            BIND(L_align_64_bytes);\n-            testptr(to, 0x3f); \/\/ low 7 bits shoud be zero\n-            jccb(Assembler::zero, L_fill_64_bytes_loop);\n-            movl(Address(to, 0), value);\n+            \/\/ Find the bytes needed for alignment\n+            movptr(rtmp, to);\n+            andptr(rtmp, 0x1c);\n+            jcc(Assembler::zero, L_fill_64_bytes_loop);\n+            negptr(rtmp);           \/\/ number of bytes to fill 32-rtmp. it filled by 2 mov by 32\n+            addptr(rtmp, 32);\n+            shrptr(rtmp, 2 - shift);\/\/ get number of elements from bytes\n+            subptr(count, rtmp);    \/\/ adjust count by number of elements\n+\n+            align(16);\n+            BIND(L_align_64_bytes_loop);\n+            movdl(Address(to, 0), xtmp);\n@@ -5930,2 +5936,2 @@\n-            subptr(count, 1<<shift);\n-            jmpb(L_align_64_bytes);\n+            subptr(rtmp, 1 << shift);\n+            jcc(Assembler::greater, L_align_64_bytes_loop);\n@@ -5934,0 +5940,1 @@\n+        align(16);\n@@ -5941,0 +5948,1 @@\n+        align(16);\n@@ -5985,0 +5993,1 @@\n+      align(16);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"}]}