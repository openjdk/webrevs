{"files":[{"patch":"@@ -5911,1 +5911,0 @@\n-        Label L_fill_64_bytes_loop;\n@@ -5916,1 +5915,0 @@\n-        align(16);\n@@ -5918,0 +5916,25 @@\n+        \/\/ align data for 64-byte chunks\n+        Label L_fill_64_bytes_loop, L_align_64_bytes_loop;\n+        if (EnableX86ECoreOpts) {\n+            \/\/ align 'big' arrays to cache lines to minimize split_stores\n+            cmpptr(count, 256 << shift);\n+            jcc(Assembler::below, L_fill_64_bytes_loop);\n+\n+            \/\/ Find the bytes needed for alignment\n+            movptr(rtmp, to);\n+            andptr(rtmp, 0x1c);\n+            jcc(Assembler::zero, L_fill_64_bytes_loop);\n+            negptr(rtmp);           \/\/ number of bytes to fill 32-rtmp. it filled by 2 mov by 32\n+            addptr(rtmp, 32);\n+            shrptr(rtmp, 2 - shift);\/\/ get number of elements from bytes\n+            subptr(count, rtmp);    \/\/ adjust count by number of elements\n+\n+            align(16);\n+            BIND(L_align_64_bytes_loop);\n+            movdl(Address(to, 0), xtmp);\n+            addptr(to, 4);\n+            subptr(rtmp, 1 << shift);\n+            jcc(Assembler::greater, L_align_64_bytes_loop);\n+        }\n+\n+        align(16);\n@@ -5925,0 +5948,1 @@\n+        align(16);\n@@ -5969,0 +5993,1 @@\n+      align(16);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}