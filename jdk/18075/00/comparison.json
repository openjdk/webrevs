{"files":[{"patch":"@@ -4094,20 +4094,0 @@\n-operand immI_63()\n-%{\n-  predicate(n->get_int() == 63);\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immI_64()\n-%{\n-  predicate(n->get_int() == 64);\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -4243,22 +4223,0 @@\n-\/\/ 26 bit signed offset -- for pc-relative branches\n-operand immI26()\n-%{\n-  predicate(((-(1 << 25)) <= n->get_int()) && (n->get_int() < (1 << 25)));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-\/\/ 19 bit signed offset -- for pc-relative loads\n-operand immI19()\n-%{\n-  predicate(((-(1 << 18)) <= n->get_int()) && (n->get_int() < (1 << 18)));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -4287,21 +4245,0 @@\n-\/\/ 12 bit unsigned offset -- for base plus immediate loads\n-operand immIU12()\n-%{\n-  predicate((0 <= n->get_int()) && (n->get_int() < (1 << 12)));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immLU12()\n-%{\n-  predicate((0 <= n->get_long()) && (n->get_long() < (1 << 12)));\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -4572,11 +4509,0 @@\n-\/\/ 64 bit unit increment\n-operand immL_1()\n-%{\n-  predicate(n->get_long() == 1);\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -4594,13 +4520,0 @@\n-\/\/ 32 bit offset of pc in thread anchor\n-\n-operand immL_pc_off()\n-%{\n-  predicate(n->get_long() == in_bytes(JavaThread::frame_anchor_offset()) +\n-                             in_bytes(JavaFrameAnchor::last_Java_pc_offset()));\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -4695,24 +4608,0 @@\n-\/\/ Pointer Immediate Minus One\n-\/\/ this is used when we want to write the current PC to the thread anchor\n-operand immP_M1()\n-%{\n-  predicate(n->get_ptr() == -1);\n-  match(ConP);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-\/\/ Pointer Immediate Minus Two\n-\/\/ this is used when we want to write the current PC to the thread anchor\n-operand immP_M2()\n-%{\n-  predicate(n->get_ptr() == -2);\n-  match(ConP);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -4983,22 +4872,0 @@\n-\/\/ Long 64 bit Register R2 only\n-operand iRegL_R2()\n-%{\n-  constraint(ALLOC_IN_RC(r2_reg));\n-  match(RegL);\n-  match(iRegLNoSp);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-\/\/ Long 64 bit Register R3 only\n-operand iRegL_R3()\n-%{\n-  constraint(ALLOC_IN_RC(r3_reg));\n-  match(RegL);\n-  match(iRegLNoSp);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n@@ -5016,11 +4883,0 @@\n-\/\/ Pointer 64 bit Register FP only\n-operand iRegP_FP()\n-%{\n-  constraint(ALLOC_IN_RC(fp_reg));\n-  match(RegP);\n-  \/\/ match(iRegP);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n@@ -5085,27 +4941,0 @@\n-operand iRegN_R0()\n-%{\n-  constraint(ALLOC_IN_RC(r0_reg));\n-  match(iRegN);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand iRegN_R2()\n-%{\n-  constraint(ALLOC_IN_RC(r2_reg));\n-  match(iRegN);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand iRegN_R3()\n-%{\n-  constraint(ALLOC_IN_RC(r3_reg));\n-  match(iRegN);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n@@ -5262,216 +5091,0 @@\n-operand vRegD_V8()\n-%{\n-  constraint(ALLOC_IN_RC(v8_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V9()\n-%{\n-  constraint(ALLOC_IN_RC(v9_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V10()\n-%{\n-  constraint(ALLOC_IN_RC(v10_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V11()\n-%{\n-  constraint(ALLOC_IN_RC(v11_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V12()\n-%{\n-  constraint(ALLOC_IN_RC(v12_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V13()\n-%{\n-  constraint(ALLOC_IN_RC(v13_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V14()\n-%{\n-  constraint(ALLOC_IN_RC(v14_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V15()\n-%{\n-  constraint(ALLOC_IN_RC(v15_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V16()\n-%{\n-  constraint(ALLOC_IN_RC(v16_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V17()\n-%{\n-  constraint(ALLOC_IN_RC(v17_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V18()\n-%{\n-  constraint(ALLOC_IN_RC(v18_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V19()\n-%{\n-  constraint(ALLOC_IN_RC(v19_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V20()\n-%{\n-  constraint(ALLOC_IN_RC(v20_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V21()\n-%{\n-  constraint(ALLOC_IN_RC(v21_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V22()\n-%{\n-  constraint(ALLOC_IN_RC(v22_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V23()\n-%{\n-  constraint(ALLOC_IN_RC(v23_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V24()\n-%{\n-  constraint(ALLOC_IN_RC(v24_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V25()\n-%{\n-  constraint(ALLOC_IN_RC(v25_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V26()\n-%{\n-  constraint(ALLOC_IN_RC(v26_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V27()\n-%{\n-  constraint(ALLOC_IN_RC(v27_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V28()\n-%{\n-  constraint(ALLOC_IN_RC(v28_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V29()\n-%{\n-  constraint(ALLOC_IN_RC(v29_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V30()\n-%{\n-  constraint(ALLOC_IN_RC(v30_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand vRegD_V31()\n-%{\n-  constraint(ALLOC_IN_RC(v31_reg));\n-  match(RegD);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n@@ -5579,9 +5192,0 @@\n-operand lr_RegP(iRegP reg)\n-%{\n-  constraint(ALLOC_IN_RC(lr_reg)); \/\/ link_reg\n-  match(reg);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n@@ -5662,14 +5266,0 @@\n-operand indOffI(iRegP reg, immIOffset off)\n-%{\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n@@ -5746,14 +5336,0 @@\n-operand indOffL(iRegP reg, immLoffset off)\n-%{\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n@@ -5936,16 +5512,0 @@\n-\n-\/\/ AArch64 opto stubs need to write to the pc slot in the thread anchor\n-operand thread_anchor_pc(thread_RegP reg, immL_pc_off off)\n-%{\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":440,"binary":false,"changes":440,"status":"modified"},{"patch":"@@ -2129,22 +2129,0 @@\n-\/\/ Constant for long shifts\n-operand immI_32()\n-%{\n-  predicate( n->get_int() == 32 );\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-\/\/ Constant for long shifts\n-operand immI_64()\n-%{\n-  predicate( n->get_int() == 64 );\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -2305,22 +2283,0 @@\n-\/\/ Long Immediate: the value 10\n-operand immL10()\n-%{\n-  predicate(n->get_long() == 10);\n-  match(ConL);\n-\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-\/\/ Long immediate from 0 to 127.\n-\/\/ Used for a shorter form of long mul by 10.\n-operand immL_127()\n-%{\n-  predicate(0 <= n->get_long() && n->get_long() < 0x80);\n-  match(ConL);\n-\n-  op_cost(10);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -2461,58 +2417,0 @@\n-operand kReg_K1()\n-%{\n-  constraint(ALLOC_IN_RC(vectmask_reg_K1));\n-  match(RegVectMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n-operand kReg_K2()\n-%{\n-  constraint(ALLOC_IN_RC(vectmask_reg_K2));\n-  match(RegVectMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n-\/\/ Special Registers\n-operand kReg_K3()\n-%{\n-  constraint(ALLOC_IN_RC(vectmask_reg_K3));\n-  match(RegVectMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n-operand kReg_K4()\n-%{\n-  constraint(ALLOC_IN_RC(vectmask_reg_K4));\n-  match(RegVectMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n-operand kReg_K5()\n-%{\n-  constraint(ALLOC_IN_RC(vectmask_reg_K5));\n-  match(RegVectMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n-operand kReg_K6()\n-%{\n-  constraint(ALLOC_IN_RC(vectmask_reg_K6));\n-  match(RegVectMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n-\/\/ Special Registers\n-operand kReg_K7()\n-%{\n-  constraint(ALLOC_IN_RC(vectmask_reg_K7));\n-  match(RegVectMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n@@ -2692,11 +2590,0 @@\n-operand no_rax_rbx_RegP()\n-%{\n-  constraint(ALLOC_IN_RC(ptr_no_rax_rbx_reg));\n-  match(RegP);\n-  match(rsi_RegP);\n-  match(rdi_RegP);\n-\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":0,"deletions":113,"binary":false,"changes":113,"status":"modified"}]}