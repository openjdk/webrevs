{"files":[{"patch":"@@ -29,0 +29,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -34,0 +36,2 @@\n+import java.util.Optional;\n+import java.util.function.Consumer;\n@@ -35,0 +39,1 @@\n+import jdk.jpackage.internal.util.function.ThrowingFunction;\n@@ -41,1 +46,1 @@\n-    public static Collection<Object[]> assertTestsData() {\n+    public static Collection<Object[]> test() {\n@@ -60,0 +65,6 @@\n+        assertFunc = MethodCallConfig.build(\"assertEquals\", boolean.class, boolean.class, String.class);\n+        data.addAll(List.of(assertFunc.args(true, true).pass().expectLog(\"assertEquals(true)\").createForMessage(\"Emu\")));\n+        data.addAll(List.of(assertFunc.args(false, false).pass().expectLog(\"assertEquals(false)\").createForMessage(\"Emu\")));\n+        data.addAll(List.of(assertFunc.args(true, false).fail().expectLog(\"Expected [true]. Actual [false]\").createForMessage(\"Emu\")));\n+        data.addAll(List.of(assertFunc.args(false, true).fail().expectLog(\"Expected [false]. Actual [true]\").createForMessage(\"Emu\")));\n+\n@@ -68,0 +79,6 @@\n+        assertFunc = MethodCallConfig.build(\"assertNotEquals\", boolean.class, boolean.class, String.class);\n+        data.addAll(List.of(assertFunc.args(true, false).pass().expectLog(\"assertNotEquals(true, false)\").createForMessage(\"Sparrow\")));\n+        data.addAll(List.of(assertFunc.args(false, true).pass().expectLog(\"assertNotEquals(false, true)\").createForMessage(\"Sparrow\")));\n+        data.addAll(List.of(assertFunc.args(true, true).fail().expectLog(\"Unexpected [true] value\").createForMessage(\"Sparrow\")));\n+        data.addAll(List.of(assertFunc.args(false, false).fail().expectLog(\"Unexpected [false] value\").createForMessage(\"Sparrow\")));\n+\n@@ -189,1 +206,1 @@\n-    @ParameterSupplier(\"assertTestsData\")\n+    @ParameterSupplier\n@@ -196,0 +213,123 @@\n+    @Test\n+    @ParameterSupplier(\"testCreateTempPath\")\n+    public void testCreateTempFile(CreateTempTestSpec testSpec) throws Throwable {\n+        testSpec.test(TKit::createTempFile, TKit::assertFileExists);\n+    }\n+\n+    @Test\n+    @ParameterSupplier(\"testCreateTempPath\")\n+    public void testCreateTempDirectory(CreateTempTestSpec testSpec) throws Throwable {\n+        testSpec.test(TKit::createTempDirectory, TKit::assertDirectoryEmpty);\n+    }\n+\n+    record CreateTempTestSpec(String role, Path expectedPath, List<Path> existingFiles,\n+            Class<? extends Exception> expectedExceptionClass) {\n+\n+        CreateTempTestSpec {\n+            Objects.requireNonNull(existingFiles);\n+            if ((expectedExceptionClass == null) == (expectedPath == null)) {\n+                throw new IllegalArgumentException(\"Only one of `expectedPath` and `expectedExceptionClass` can be null\");\n+            }\n+        }\n+\n+        void test(ThrowingFunction<String, Path> createTempPath, Consumer<Path> assertTempPathExists) throws Throwable {\n+            for (var existingFile : existingFiles) {\n+                existingFile = TKit.workDir().resolve(existingFile);\n+\n+                Files.createDirectories(existingFile.getParent());\n+                Files.createFile(existingFile);\n+            }\n+\n+            if (expectedExceptionClass != null) {\n+                try {\n+                    createTempPath.apply(role);\n+                    TKit.assertUnexpected(\"Exception expected\");\n+                } catch (Exception ex) {\n+                    TKit.assertTrue(expectedExceptionClass.isInstance(ex),\n+                            String.format(\"Check exception [%s] is instance of %s class\", ex, expectedExceptionClass));\n+                }\n+            } else {\n+                final var tempPath = createTempPath.apply(role);\n+\n+                assertTempPathExists.accept(tempPath);\n+                TKit.assertTrue(tempPath.startsWith(TKit.workDir()), \"Check temp path created in the work directory\");\n+\n+                final var relativeTempPath = TKit.workDir().relativize(tempPath);\n+                TKit.assertTrue(expectedPath.equals(relativeTempPath),\n+                        String.format(\"Check [%s]=[%s]\", expectedPath, relativeTempPath));\n+            }\n+        }\n+\n+        @Override\n+        public String toString() {\n+            final var sb = new StringBuilder();\n+            sb.append(\"role=\").append(role);\n+            if (expectedPath != null) {\n+                sb.append(\"; expected=\").append(expectedPath);\n+            }\n+            if (!existingFiles.isEmpty()) {\n+                sb.append(\"; exits=\").append(existingFiles);\n+            }\n+            if (expectedExceptionClass != null) {\n+                sb.append(\"; exception=\").append(expectedExceptionClass);\n+            }\n+            return sb.toString();\n+        }\n+\n+        static Builder role(String role) {\n+            return new Builder(role);\n+        }\n+\n+        final static class Builder {\n+\n+            private Builder(String role) {\n+                this.role = role;\n+            }\n+\n+            CreateTempTestSpec create() {\n+                return new CreateTempTestSpec(role, expectedPath, existingFiles, expectedExceptionClass);\n+            }\n+\n+            Builder expectedPath(String v) {\n+                expectedPath = Optional.of(v).map(Path::of).orElse(null);\n+                return this;\n+            }\n+\n+            Builder existingFiles(String ...v) {\n+                existingFiles.addAll(Stream.of(v).map(Path::of).toList());\n+                return this;\n+            }\n+\n+            Builder expectedExceptionClass(Class<? extends Exception> v) {\n+                expectedExceptionClass = v;\n+                return this;\n+            }\n+\n+            private final String role;\n+            private Path expectedPath;\n+            private final List<Path> existingFiles = new ArrayList<>();\n+            private Class<? extends Exception> expectedExceptionClass;\n+        }\n+    }\n+\n+    public static Collection<Object[]> testCreateTempPath() {\n+        return Stream.of(\n+                CreateTempTestSpec.role(\"foo\").expectedPath(\"foo\"),\n+                CreateTempTestSpec.role(\"foo.b\").expectedPath(\"foo.b\"),\n+                CreateTempTestSpec.role(\"foo\").expectedPath(\"foo-0\").existingFiles(\"foo\"),\n+                CreateTempTestSpec.role(\"foo.b\").expectedPath(\"foo-0.b\").existingFiles(\"foo.b\"),\n+                CreateTempTestSpec.role(\"foo..b\").expectedPath(\"foo.-0.b\").existingFiles(\"foo..b\"),\n+                CreateTempTestSpec.role(\"a.b.c.d\").expectedPath(\"a.b.c-0.d\").existingFiles(\"a.b.c.d\"),\n+                CreateTempTestSpec.role(\"foo\").expectedPath(\"foo-1\").existingFiles(\"foo\", \"foo-0\"),\n+                CreateTempTestSpec.role(\"foo\/bar\/buz\").expectedPath(\"foo\/bar\/buz\"),\n+                CreateTempTestSpec.role(\"foo\/bar\/buz\").expectedPath(\"foo\/bar\/buz-0\").existingFiles(\"foo\/bar\/buz\"),\n+                CreateTempTestSpec.role(\"foo\/bar\/buz.tmp\").expectedPath(\"foo\/bar\/buz-0.tmp\").existingFiles(\"foo\/bar\/buz.tmp\"),\n+                CreateTempTestSpec.role(\"foo\/bar\").expectedPath(\"foo\/bar-0\").existingFiles(\"foo\/bar\/buz\"),\n+                CreateTempTestSpec.role(Path.of(\"\").toAbsolutePath().toString()).expectedExceptionClass(IllegalArgumentException.class),\n+                CreateTempTestSpec.role(null).expectedExceptionClass(NullPointerException.class),\n+                CreateTempTestSpec.role(\"\").expectedExceptionClass(IllegalArgumentException.class)\n+        ).map(CreateTempTestSpec.Builder::create).map(testSpec -> {\n+            return new Object[] { testSpec };\n+        }).toList();\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/TKitTest.java","additions":142,"deletions":2,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -189,12 +189,2 @@\n-    private void initialize(JPackageCommand cmd) {\n-        Path propsFile = TKit.workDir().resolve(name + \".properties\");\n-        if (Files.exists(propsFile)) {\n-            \/\/ File with the given name exists, pick another name that\n-            \/\/ will not reference existing file.\n-            try {\n-                propsFile = TKit.createTempFile(propsFile);\n-                TKit.deleteIfExists(propsFile);\n-            } catch (IOException ex) {\n-                rethrowUnchecked(ex);\n-            }\n-        }\n+    private void initialize(JPackageCommand cmd) throws IOException {\n+        final Path propsFile = TKit.createTempFile(name + \".properties\");\n@@ -202,2 +192,1 @@\n-        cmd.addArguments(\"--add-launcher\", String.format(\"%s=%s\", name,\n-                    propsFile));\n+        cmd.addArguments(\"--add-launcher\", String.format(\"%s=%s\", name, propsFile));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -255,5 +255,1 @@\n-            try {\n-                setArgumentValue(\"--input\", TKit.createTempDirectory(\"input\"));\n-            } catch (IOException ex) {\n-                throw new RuntimeException(ex);\n-            }\n+            setArgumentValue(\"--input\", TKit.createTempDirectory(\"input\"));\n@@ -844,0 +840,5 @@\n+        MAIN_JAR_FILE(cmd -> {\n+            Optional.ofNullable(cmd.getArgumentValue(\"--main-jar\", () -> null)).ifPresent(mainJar -> {\n+                TKit.assertFileExists(cmd.appLayout().appDirectory().resolve(mainJar));\n+            });\n+        }),\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,0 +25,4 @@\n+import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;\n+import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;\n+import static java.util.stream.Collectors.toSet;\n+\n@@ -29,0 +33,1 @@\n+import java.io.UncheckedIOException;\n@@ -33,1 +38,0 @@\n-import java.nio.file.StandardWatchEventKinds;\n@@ -35,2 +39,1 @@\n-import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;\n-import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;\n+import java.nio.file.StandardWatchEventKinds;\n@@ -61,1 +64,0 @@\n-import static java.util.stream.Collectors.toSet;\n@@ -68,0 +70,1 @@\n+import jdk.jpackage.internal.util.function.ThrowingUnaryOperator;\n@@ -291,1 +294,10 @@\n-    private static final String TEMP_FILE_PREFIX = null;\n+    private static Path createUniquePath(String defaultName) {\n+        return createUniquePath(defaultName, workDir());\n+    }\n+\n+    private static Path createUniquePath(String defaultName, Path basedir) {\n+        Objects.requireNonNull(defaultName);\n+        Objects.requireNonNull(basedir);\n+        if (defaultName.isEmpty()) {\n+            throw new IllegalArgumentException();\n+        }\n@@ -293,1 +305,0 @@\n-    private static Path createUniqueFileName(String defaultName) {\n@@ -307,1 +318,0 @@\n-        final Path basedir = workDir();\n@@ -323,5 +333,2 @@\n-    public static Path createTempDirectory(String role) throws IOException {\n-        if (role == null) {\n-            return Files.createTempDirectory(workDir(), TEMP_FILE_PREFIX);\n-        }\n-        return Files.createDirectory(createUniqueFileName(role));\n+    public static Path createTempDirectory(String role) {\n+        return createTempDirectory(Path.of(role));\n@@ -330,4 +337,2 @@\n-    public static Path createTempFile(Path templateFile) throws\n-            IOException {\n-        return Files.createFile(createUniqueFileName(\n-                templateFile.getFileName().toString()));\n+    public static Path createTempDirectory(Path role) {\n+        return createTempPath(role, Files::createDirectory);\n@@ -336,5 +341,21 @@\n-    public static Path withTempFile(Path templateFile,\n-            ThrowingConsumer<Path> action) {\n-        final Path tempFile = ThrowingSupplier.toSupplier(() -> createTempFile(\n-                templateFile)).get();\n-        boolean keepIt = true;\n+    public static Path createTempFile(String role) {\n+        return createTempFile(Path.of(role));\n+    }\n+\n+    public static Path createTempFile(Path role) {\n+        return createTempPath(role, Files::createFile);\n+    }\n+\n+    private static Path createTempPath(Path templatePath, ThrowingUnaryOperator<Path> createPath) {\n+        if (templatePath.isAbsolute()) {\n+            throw new IllegalArgumentException();\n+        }\n+        final Path basedir;\n+        if (templatePath.getNameCount() > 1) {\n+            basedir = workDir().resolve(templatePath.getParent());\n+        } else {\n+            basedir = workDir();\n+        }\n+\n+        final var path = createUniquePath(templatePath.getFileName().toString(), basedir);\n+\n@@ -342,7 +363,6 @@\n-            ThrowingConsumer.toConsumer(action).accept(tempFile);\n-            keepIt = false;\n-            return tempFile;\n-        } finally {\n-            if (tempFile != null && !keepIt) {\n-                ThrowingRunnable.toRunnable(() -> Files.deleteIfExists(tempFile)).run();\n-            }\n+            Files.createDirectories(path.getParent());\n+            return createPath.apply(path);\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        } catch (Throwable t) {\n+            throw ExceptionBox.rethrowUnchecked(t);\n@@ -512,1 +532,1 @@\n-            Path localPath = createTempFile(file);\n+            Path localPath = createTempFile(file.getFileName());\n@@ -612,0 +632,23 @@\n+    public static void assertEquals(boolean expected, boolean actual, String msg) {\n+        currentTest.notifyAssert();\n+        if (expected != actual) {\n+            error(concatMessages(String.format(\n+                    \"Expected [%s]. Actual [%s]\", expected, actual),\n+                    msg));\n+        }\n+\n+        traceAssert(concatMessages(String.format(\"assertEquals(%s)\", expected), msg));\n+    }\n+\n+    public static void assertNotEquals(boolean expected, boolean actual, String msg) {\n+        currentTest.notifyAssert();\n+        if (expected == actual) {\n+            error(concatMessages(String.format(\"Unexpected [%s] value\", actual),\n+                    msg));\n+        }\n+\n+        traceAssert(concatMessages(String.format(\"assertNotEquals(%s, %s)\", expected,\n+                actual), msg));\n+    }\n+\n+\n@@ -706,1 +749,1 @@\n-    public static void assertDirectoryExists(Path path, Optional<Boolean> isEmptyCheck) {\n+    private static void assertDirectoryExists(Path path, Optional<Boolean> isEmptyCheck) {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":73,"deletions":30,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        Path appImageDir = TKit.createTempDirectory(null).resolve(imageName);\n+        Path appImageDir = TKit.createTempDirectory(\"appimage\").resolve(imageName);\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppImagePackageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}