{"files":[{"patch":"@@ -1343,1 +1343,1 @@\n-      nm->make_not_entrant(nmethod::NMethodChangeReason::C1_deoptimize_for_patching);\n+      nm->make_not_entrant(nmethod::ChangeReason::C1_deoptimize_for_patching);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -500,25 +500,48 @@\n-        case ChangeReason::C1_codepatch:                            return \"C1 code patch\";\n-        case ChangeReason::C1_deoptimize:                           return \"C1 deoptimized\";\n-        case ChangeReason::C1_deoptimize_for_patching:              return \"C1 deoptimize for patching\";\n-        case ChangeReason::C1_predicate_failed_trap:                return \"C1 predicate failed trap\";\n-        case ChangeReason::CI_replay:                               return \"CI replay\";\n-        case ChangeReason::JVMCI_invalidate_nmethod:                return \"JVMCI invalidate nmethod\";\n-        case ChangeReason::JVMCI_invalidate_nmethod_mirror:         return \"JVMCI invalidate nmethod mirror\";\n-        case ChangeReason::JVMCI_materialize_virtual_object:        return \"JVMCI materialize virtual object\";\n-        case ChangeReason::JVMCI_new_installation:                  return \"JVMCI new installation\";\n-        case ChangeReason::JVMCI_register_method:                   return \"JVMCI register method\";\n-        case ChangeReason::JVMCI_replacing_with_new_code:           return \"JVMCI replacing with new code\";\n-        case ChangeReason::JVMCI_reprofile:                         return \"JVMCI reprofile\";\n-        case ChangeReason::marked_for_deoptimization:               return \"marked for deoptimization\";\n-        case ChangeReason::missing_exception_handler:               return \"missing exception handler\";\n-        case ChangeReason::not_used:                                return \"not used\";\n-        case ChangeReason::OSR_invalidation_back_branch:            return \"OSR invalidation back branch\";\n-        case ChangeReason::OSR_invalidation_for_compiling_with_C1:  return \"OSR invalidation for compiling with C1\";\n-        case ChangeReason::OSR_invalidation_of_lower_level:         return \"OSR invalidation of lower level\";\n-        case ChangeReason::set_native_function:                     return \"set native function\";\n-        case ChangeReason::uncommon_trap:                           return \"uncommon trap\";\n-        case ChangeReason::whitebox_deoptimization:                 return \"whitebox deoptimization\";\n-        case ChangeReason::zombie:                                  return \"zombie\";\n-        default:\n-            assert(false, \"Unhandled reason\");\n-            return \"Unknown\";\n+      case ChangeReason::C1_codepatch:\n+        return \"C1 code patch\";\n+      case ChangeReason::C1_deoptimize:\n+        return \"C1 deoptimized\";\n+      case ChangeReason::C1_deoptimize_for_patching:\n+        return \"C1 deoptimize for patching\";\n+      case ChangeReason::C1_predicate_failed_trap:\n+        return \"C1 predicate failed trap\";\n+      case ChangeReason::CI_replay:\n+        return \"CI replay\";\n+      case ChangeReason::JVMCI_invalidate_nmethod:\n+        return \"JVMCI invalidate nmethod\";\n+      case ChangeReason::JVMCI_invalidate_nmethod_mirror:\n+        return \"JVMCI invalidate nmethod mirror\";\n+      case ChangeReason::JVMCI_materialize_virtual_object:\n+        return \"JVMCI materialize virtual object\";\n+      case ChangeReason::JVMCI_new_installation:\n+        return \"JVMCI new installation\";\n+      case ChangeReason::JVMCI_register_method:\n+        return \"JVMCI register method\";\n+      case ChangeReason::JVMCI_replacing_with_new_code:\n+        return \"JVMCI replacing with new code\";\n+      case ChangeReason::JVMCI_reprofile:\n+        return \"JVMCI reprofile\";\n+      case ChangeReason::marked_for_deoptimization:\n+        return \"marked for deoptimization\";\n+      case ChangeReason::missing_exception_handler:\n+        return \"missing exception handler\";\n+      case ChangeReason::not_used:\n+        return \"not used\";\n+      case ChangeReason::OSR_invalidation_back_branch:\n+        return \"OSR invalidation back branch\";\n+      case ChangeReason::OSR_invalidation_for_compiling_with_C1:\n+        return \"OSR invalidation for compiling with C1\";\n+      case ChangeReason::OSR_invalidation_of_lower_level:\n+        return \"OSR invalidation of lower level\";\n+      case ChangeReason::set_native_function:\n+        return \"set native function\";\n+      case ChangeReason::uncommon_trap:\n+        return \"uncommon trap\";\n+      case ChangeReason::whitebox_deoptimization:\n+        return \"whitebox deoptimization\";\n+      case ChangeReason::zombie:\n+        return \"zombie\";\n+      default: {\n+        assert(false, \"Unhandled reason\");\n+        return \"Unknown\";\n+      }\n@@ -691,1 +714,1 @@\n-  bool  make_not_used()    { return make_not_entrant(ChangeReason::not_used); }\n+  bool  make_not_used() { return make_not_entrant(ChangeReason::not_used); }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":49,"deletions":26,"binary":false,"changes":75,"status":"modified"}]}