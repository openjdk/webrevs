{"files":[{"patch":"@@ -5352,1 +5352,1 @@\n-  assert(shift >= 0 && shift < 4, \"unexpected compressd klass shift!\");\n+  assert(shift >= 0 && shift <= CompressedKlassPointers::max_shift(), \"unexpected compressed klass shift!\");\n@@ -5418,1 +5418,1 @@\n-  assert(shift >= 0 && shift < 4, \"unexpected compressd klass shift!\");\n+  assert(shift >= 0 && shift <= CompressedKlassPointers::max_shift(), \"unexpected compressed klass shift!\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"code\/aotCodeCache.hpp\"\n@@ -199,1 +200,1 @@\n-  const ptrdiff_t estimate = 144;\n+  const ptrdiff_t estimate = AOTCodeCache::is_on_for_dump() ? 148 : 144;\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -190,2 +190,2 @@\n-  _end = cb->relocation_end();\n-  _addr = cb->content_begin();\n+  _end     = cb->relocation_end();\n+  _addr    = cb->content_begin();\n@@ -194,1 +194,6 @@\n-  _section_start[CodeBuffer::SECT_INSTS] = cb->code_begin();\n+  _section_start[CodeBuffer::SECT_INSTS ] = cb->code_begin();\n+  _section_start[CodeBuffer::SECT_STUBS ] = cb->code_end();\n+\n+  _section_end  [CodeBuffer::SECT_CONSTS] = cb->code_begin();\n+  _section_end  [CodeBuffer::SECT_INSTS ] = cb->code_end();\n+  _section_end  [CodeBuffer::SECT_STUBS ] = cb->code_end();\n@@ -196,2 +201,0 @@\n-  _section_end[CodeBuffer::SECT_CONSTS] = cb->code_begin();\n-  _section_start[CodeBuffer::SECT_INSTS] = cb->code_end();\n","filename":"src\/hotspot\/share\/code\/relocInfo.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,1 +29,4 @@\n- * @requires vm.flagless\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @comment The test verifies AOT checks during VM startup and not code generation.\n+ *          No need to run it with -Xcomp. It takes a lot of time to complete all\n+ *          subtests with this flag.\n@@ -201,1 +204,1 @@\n-                 } else if (aotCacheBase != currentBase) {\n+                 } else if ((aotCacheBase == 0 || currentBase == 0) && (aotCacheBase != currentBase)) {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeCompressedOopsTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,5 @@\n- * @requires vm.flagless\n+ * @requires vm.compiler1.enabled & vm.compiler2.enabled\n+ * @comment Both C1 and C2 JIT compilers are required because the test verifies\n+ *          compiler's runtime blobs generation.\n+ * @requires vm.opt.VerifyOops == null | vm.opt.VerifyOops == false\n+ * @comment VerifyOops flag switch off AOT code generation. Skip it.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeFlags.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}