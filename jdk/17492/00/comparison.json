{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,2 @@\n- * This table covers transitions from 1900 until 2037 (as of version\n- * 1.4), Before 1900, it assumes that there was no daylight saving\n+ * This table covers transitions from 1900 until 2100 (as of version\n+ * 23), Before 1900, it assumes that there was no daylight saving\n@@ -53,1 +53,1 @@\n- * supposed to observe daylight saving time in 2037, it delegates\n+ * supposed to observe daylight saving time in 2100, it delegates\n@@ -55,1 +55,1 @@\n- * object created using the daylight saving time schedule as of 2037.\n+ * object created using the daylight saving time schedule as of 2100.\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfo.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -409,3 +409,3 @@\n-    \/\/ ZoneInfo ends with   UTC2037\n-    \/\/ LocalDateTime.of(2038, 1, 1, 0, 0, 0).toEpochSecond(ZoneOffset.UTC) - 1;\n-    private static final long UTC2037 = 2145916799L;\n+    \/\/ ZoneInfo ends with   UTC2100\n+    \/\/ LocalDateTime.of(2101, 1, 1, 0, 0, 0).toEpochSecond(ZoneOffset.UTC) - 1;\n+    private static final long UTC2100 = 4133980799L;\n@@ -413,1 +413,1 @@\n-    \/\/ ZoneInfo has an ending entry for 2037, this need to be offset by\n+    \/\/ ZoneInfo has an ending entry for 2100, this need to be offset by\n@@ -415,2 +415,2 @@\n-    \/\/ LocalDateTime.of(2037, 1, 1, 0, 0, 0).toEpochSecond(ZoneOffset.UTC));\n-    private static final long LDT2037 = 2114380800L;\n+    \/\/ LocalDateTime.of(2100, 1, 1, 0, 0, 0).toEpochSecond(ZoneOffset.UTC);\n+    private static final long LDT2100 = 4102444800L;\n@@ -418,1 +418,1 @@\n-    \/\/Current time. Used to determine future GMToffset transitions\n+    \/\/Current time. Used to determine future GMT offset transitions\n@@ -485,1 +485,1 @@\n-                if (trans > UTC2037) {\n+                if (trans > UTC2100) {\n@@ -632,1 +632,1 @@\n-                    \/\/ ZoneInfo has an ending entry for 2037\n+                    \/\/ ZoneInfo has an ending entry for 2100\n@@ -636,1 +636,1 @@\n-                    long trans = LDT2037 - rawOffset\/1000;\n+                    long trans = LDT2100 - rawOffset\/1000;\n@@ -817,1 +817,1 @@\n-    private static final int  LASTYEAR = 2037;\n+    private static final int  LASTYEAR = 2100;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfoFile.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @bug 8212970\n+ * @bug 8212970 8324065\n@@ -84,0 +84,1 @@\n+            {CASABLANCA, LocalDate.of(2038, 9, 27), 0, false},\n@@ -85,0 +86,2 @@\n+            {CASABLANCA, LocalDate.of(2087, 3, 31), 0, false},\n+            {CASABLANCA, LocalDate.of(2087, 5, 12), ONE_HOUR, true},\n","filename":"test\/jdk\/java\/util\/TimeZone\/NegativeDSTTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8007572 8008161 8157792 8212970 8224560\n+ * @bug 8007572 8008161 8157792 8212970 8224560 8324065\n@@ -174,3 +174,3 @@\n-             * Temporary ignoring the failing TimeZones which are having zone\n-             * rules defined till year 2037 and\/or above and have negative DST\n-             * save time in IANA tzdata. This bug is tracked via JDK-8223388.\n+             * Ignoring the failing TimeZones which have negative DST\n+             * save time in IANA tzdata, as javazic\/ZoneInfoOld cannot\n+             * handle the negative DST.\n@@ -186,5 +186,0 @@\n-             *\n-             * Tehran\/Iran rule has rules beyond 2037, in which javazic assumes\n-             * to be the last year. Thus javazic's rule is based on year 2037\n-             * (Mar 20th\/Sep 20th are the cutover dates), while the real rule\n-             * has year 2087 where Mar 21st\/Sep 21st are the cutover dates.\n@@ -199,1 +194,0 @@\n-                zid.equals(\"Asia\/Tehran\") || \/\/ last rule mismatch\n@@ -201,2 +195,1 @@\n-                zid.equals(\"Asia\/Hebron\") || \/\/ uses \"Palestine\" rule\n-                zid.equals(\"Iran\")) { \/\/ last rule mismatch\n+                zid.equals(\"Asia\/Hebron\")) { \/\/ uses \"Palestine\" rule\n","filename":"test\/jdk\/sun\/util\/calendar\/zi\/TestZoneInfo310.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,2 +54,2 @@\n- * This table covers transitions from 1900 until 2037 (as of version\n- * 1.4), Before 1900, it assumes that there was no daylight saving\n+ * This table covers transitions from 1900 until 2100 (as of version\n+ * 23), Before 1900, it assumes that there was no daylight saving\n@@ -59,1 +59,1 @@\n- * supposed to observe daylight saving time in 2037, it delegates\n+ * supposed to observe daylight saving time in 2100, it delegates\n@@ -61,1 +61,1 @@\n- * object created using the daylight saving time schedule as of 2037.\n+ * object created using the daylight saving time schedule as of 2100.\n","filename":"test\/jdk\/sun\/util\/calendar\/zi\/ZoneInfoOld.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    private static final int maxYear = 2037;\n+    private static final int maxYear = 2100;\n","filename":"test\/jdk\/sun\/util\/calendar\/zi\/Zoneinfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}