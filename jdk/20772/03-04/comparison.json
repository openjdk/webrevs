{"files":[{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -28,0 +29,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -30,0 +32,2 @@\n+import static jdk.internal.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+\n@@ -34,0 +38,2 @@\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+    private static final long POSITIVE_MASK = 0b1000000_1000000_1000000_1000000_1000000_1000000_1000000_1000000L;\n@@ -37,1 +43,1 @@\n-    public static boolean isLatin1GreaterThanZero(String s) {\n+    public static int countGreaterThanZero(String s) {\n@@ -39,1 +45,1 @@\n-        return s.coder() == String.LATIN1 && countGreaterThanZero(value = s.value(), 0, value.length) == value.length;\n+        return countGreaterThanZero(value = s.value(), 0, value.length);\n@@ -42,0 +48,3 @@\n+    \/**\n+     * Count the number of leading greater than zero bytes in the range.\n+     *\/\n@@ -44,1 +53,9 @@\n-        for (int i = off; i < limit; i++) {\n+        int i = off;\n+        for (int end = limit - 7; i < end; i += 8) {\n+            long v = UNSAFE.getLongUnaligned(ba, i + ARRAY_BYTE_BASE_OFFSET);\n+            if ((v & POSITIVE_MASK) != 0 || (v & ~POSITIVE_MASK) != 0) {\n+                break;\n+            }\n+        }\n+\n+        for (; i < limit; i++) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2597,2 +2597,6 @@\n-            public boolean isLatin1GreaterThanZero(String s) {\n-                return StringCoding.isLatin1GreaterThanZero(s);\n+            public byte stringCoder(String s) {\n+                return s.coder();\n+            }\n+\n+            public int countGreaterThanZero(String s) {\n+                return StringCoding.countGreaterThanZero(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -394,0 +394,2 @@\n+    byte stringCoder(String s);\n+\n@@ -395,1 +397,1 @@\n-     * Determine if the coder is Latin1 and the elements of the value array are greater than 0\n+     * if string#coder() is Latin1 return the count of string#value() leading greater than zero, else return 0\n@@ -397,1 +399,1 @@\n-    boolean isLatin1GreaterThanZero(String s);\n+    int countGreaterThanZero(String s);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -412,0 +413,1 @@\n+            pool.writeU1(tag);\n@@ -413,1 +415,0 @@\n-                pool.writeU1(tag);\n@@ -419,10 +420,1 @@\n-                if (stringValue.length() > 65535) {\n-                    throw new IllegalArgumentException(\"string too long\");\n-                }\n-                pool.writeU1(tag);\n-                pool.writeU2(charLen);\n-                if (JLA.isLatin1GreaterThanZero(stringValue)) {\n-                    pool.writeBytesDirect(stringValue);\n-                } else {\n-                    pool.writeUTF(stringValue);\n-                }\n+                pool.writeUTF(stringValue);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -37,0 +38,3 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -38,0 +42,1 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n@@ -156,7 +161,0 @@\n-    void writeBytesDirect(String s) {\n-        int length = s.length();\n-        reserveSpace(length);\n-        s.getBytes(0, length, elems, offset);\n-        offset += length;\n-    }\n-\n@@ -164,3 +162,18 @@\n-        int charLength = s.length();\n-        reserveSpace(charLength * 3);\n-        int offset = this.offset;\n+        int len = s.length();\n+\n+        int countGreaterThanZero = 0;\n+        byte coder = JLA.stringCoder(s);\n+        int freeBytes = len + 2;\n+        if (coder == 0) {\n+            \/\/ If it is too long, it may be slow due to cache misses.\n+            if (len < 256) {\n+                countGreaterThanZero = JLA.countGreaterThanZero(s);\n+            }\n+            freeBytes += len - countGreaterThanZero; \/\/ 2 bytes\n+        } else {\n+            freeBytes += (len << 1); \/\/ 3 bytes\n+        }\n+        reserveSpace(freeBytes);\n+\n+        int start = this.offset;\n+        int offset = start + 2;\n@@ -168,1 +181,5 @@\n-        for (int i = 0; i < charLength; ++i) {\n+\n+        s.getBytes(0, countGreaterThanZero, elems, offset);\n+        offset += countGreaterThanZero;\n+\n+        for (int i = countGreaterThanZero; i < len; ++i) {\n@@ -175,1 +192,1 @@\n-                elems[offset + 2] = (byte) (0x80 | c & 0x3F);\n+                elems[offset + 2] = (byte) (0x80 | c      & 0x3F);\n@@ -179,1 +196,1 @@\n-                elems[offset + 1] = (byte) (0x80 | c & 0x3F);\n+                elems[offset + 1] = (byte) (0x80 | c      & 0x3F);\n@@ -183,0 +200,6 @@\n+        int utf_len = offset - start - 2;\n+        if (utf_len > 65535) {\n+            throw new IllegalArgumentException(\"string too long\");\n+        }\n+        elems[start    ] = (byte) (utf_len >> 8);\n+        elems[start + 1] = (byte)  utf_len;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":36,"deletions":13,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.classfile;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.*;\n+import java.lang.constant.*;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HexFormat;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n+\n+import jdk.internal.classfile.impl.*;\n+\/**\n+ * Test various operations on\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 1, time = 2)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(jvmArgsAppend = \"--enable-preview\", value = 3)\n+@State(Scope.Thread)\n+public class Utf8EntryWriteTo {\n+    static final ClassDesc STRING_BUILDER = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringBuilder;\");\n+    static final MethodTypeDesc MTD_append = MethodTypeDesc.of(STRING_BUILDER, CD_String);\n+    static final MethodTypeDesc MTD_String = MethodTypeDesc.of(CD_String);\n+    static final ClassDesc CLASS_DESC = ClassDesc.ofDescriptor(\"Lorg\/openjdk\/bench\/java\/lang\/classfile\/String$$StringConcat;\");\n+\n+    @Param({\"ascii\", \"utf8_2_bytes\", \"utf8_3_bytes\", \"emoji\"})\n+    public String charType;\n+    public String[] constants;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        byte[] bytes = HexFormat.of().parseHex(\n+                switch (charType) {\n+                    case \"ascii\"        -> \"78\";\n+                    case \"utf8_2_bytes\" -> \"c2a9\";\n+                    case \"utf8_3_bytes\" -> \"e6b8a9\";\n+                    case \"emoji\"        -> \"e29da3efb88f\";\n+                    default -> throw new IllegalArgumentException(\"bad charType: \" + charType);\n+                }\n+        );\n+        String s = new String(bytes, 0, bytes.length, StandardCharsets.UTF_8);\n+        constants = new String[128];\n+        for (int i = 0; i < constants.length; i++) {\n+            constants[i] = s.repeat(32);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeTo(Blackhole bh) {\n+        bh.consume(generate(constants));\n+    }\n+\n+    private static byte[] generate(String[] constants) {\n+        return ClassFile.of().build(\n+                CLASS_DESC,\n+                new Consumer<ClassBuilder>() {\n+                    @Override\n+                    public void accept(ClassBuilder clb) {\n+                        clb.withFlags(ACC_FINAL | ACC_SUPER | ACC_SYNTHETIC)\n+                           .withMethodBody(\n+                                   \"concat\",\n+                                   MTD_String, ACC_FINAL | ACC_PRIVATE | ACC_STATIC,\n+                                   new Consumer<CodeBuilder>() {\n+                                       @Override\n+                                       public void accept(CodeBuilder cb) {\n+                                           cb.new_(STRING_BUILDER)\n+                                             .dup()\n+                                             .invokespecial(STRING_BUILDER, \"<init>\", MTD_void);\n+                                           for (String constant : constants) {\n+                                               cb.ldc(constant)\n+                                                 .invokevirtual(STRING_BUILDER, \"append\", MTD_append);\n+                                           }\n+                                           cb.invokevirtual(STRING_BUILDER, \"toString\", MTD_String)\n+                                             .areturn();\n+                                       }\n+                                   }\n+                           );\n+                    }\n+                }\n+        );\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/classfile\/Utf8EntryWriteTo.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}