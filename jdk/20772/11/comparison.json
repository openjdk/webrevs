{"files":[{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -37,0 +38,18 @@\n+    public static int countGreaterThanZero(String s) {\n+        byte[] value;\n+        return countGreaterThanZero(value = s.value(), 0, value.length);\n+    }\n+\n+    \/**\n+     * Count the number of leading greater than zero bytes in the range.\n+     *\/\n+    public static int countGreaterThanZero(byte[] ba, int off, int len) {\n+        int limit = off + len;\n+        for (int i = off; i < limit; i++) {\n+            if (ba[i] <= 0) {\n+                return i - off;\n+            }\n+        }\n+        return len;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2597,0 +2597,8 @@\n+            public boolean isLatin1(String s) {\n+                return s.coder() == String.LATIN1;\n+            }\n+\n+            public int countGreaterThanZero(String s) {\n+                return StringCoding.countGreaterThanZero(s);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -394,0 +394,7 @@\n+    boolean isLatin1(String s);\n+\n+    \/**\n+     * if string#coder() is Latin1 return the count of string#value() leading greater than zero, else return 0\n+     *\/\n+    int countGreaterThanZero(String s);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -412,0 +413,1 @@\n+            pool.writeU1(tag);\n@@ -413,1 +415,0 @@\n-                pool.writeU1(tag);\n@@ -419,47 +420,1 @@\n-                if (stringValue.length() > 65535) {\n-                    throw new IllegalArgumentException(\"string too long\");\n-                }\n-                pool.writeU1(tag);\n-                pool.writeU2(charLen);\n-                for (int i = 0; i < charLen; ++i) {\n-                    char c = stringValue.charAt(i);\n-                    if (c >= '\\001' && c <= '\\177') {\n-                        \/\/ Optimistic writing -- hope everything is bytes\n-                        \/\/ If not, we bail out, and alternate path patches the length\n-                        pool.writeU1((byte) c);\n-                    }\n-                    else {\n-                        int charLength = stringValue.length();\n-                        int byteLength = i;\n-                        char c1;\n-                        for (int j = i; j < charLength; ++j) {\n-                            c1 = (stringValue).charAt(j);\n-                            if (c1 >= '\\001' && c1 <= '\\177') {\n-                                byteLength++;\n-                            } else if (c1 > '\\u07FF') {\n-                                byteLength += 3;\n-                            } else {\n-                                byteLength += 2;\n-                            }\n-                        }\n-                        if (byteLength > 65535) {\n-                            throw new IllegalArgumentException();\n-                        }\n-                        int byteLengthFinal = byteLength;\n-                        pool.patchInt(pool.size() - i - 2, 2, byteLengthFinal);\n-                        for (int j = i; j < charLength; ++j) {\n-                            c1 = (stringValue).charAt(j);\n-                            if (c1 >= '\\001' && c1 <= '\\177') {\n-                                pool.writeU1((byte) c1);\n-                            } else if (c1 > '\\u07FF') {\n-                                pool.writeU1((byte) (0xE0 | c1 >> 12 & 0xF));\n-                                pool.writeU1((byte) (0x80 | c1 >> 6 & 0x3F));\n-                                pool.writeU1((byte) (0x80 | c1 & 0x3F));\n-                            } else {\n-                                pool.writeU1((byte) (0xC0 | c1 >> 6 & 0x1F));\n-                                pool.writeU1((byte) (0x80 | c1 & 0x3F));\n-                            }\n-                        }\n-                        break;\n-                    }\n-                }\n+                pool.writeUTF(stringValue);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":3,"deletions":48,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -37,0 +38,3 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -38,0 +42,1 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n@@ -155,0 +160,51 @@\n+    @SuppressWarnings(\"deprecation\")\n+    void writeUTF(String str) {\n+        int strlen = str.length();\n+        int countGreaterThanZero = JLA.isLatin1(str) ? JLA.countGreaterThanZero(str) : 0;\n+        int utflen = countGreaterThanZero == strlen ? strlen : utflen(str, countGreaterThanZero);\n+        if (utflen > 65535) {\n+            throw new IllegalArgumentException(\"string too long\");\n+        }\n+        reserveSpace(utflen + 2);\n+\n+        int offset = this.offset;\n+        byte[] elems = this.elems;\n+\n+        elems[offset    ] = (byte) (utflen >> 8);\n+        elems[offset + 1] = (byte)  utflen;\n+        offset += 2;\n+\n+        str.getBytes(0, countGreaterThanZero, elems, offset);\n+        offset += countGreaterThanZero;\n+\n+        for (int i = countGreaterThanZero; i < strlen; ++i) {\n+            char c = str.charAt(i);\n+            if (c >= '\\001' && c <= '\\177') {\n+                elems[offset++] = (byte) c;\n+            } else if (c > '\\u07FF') {\n+                elems[offset    ] = (byte) (0xE0 | c >> 12 & 0xF);\n+                elems[offset + 1] = (byte) (0x80 | c >> 6 & 0x3F);\n+                elems[offset + 2] = (byte) (0x80 | c      & 0x3F);\n+                offset += 3;\n+            } else {\n+                elems[offset    ] = (byte) (0xC0 | c >> 6 & 0x1F);\n+                elems[offset + 1] = (byte) (0x80 | c      & 0x3F);\n+                offset += 2;\n+            }\n+        }\n+\n+        this.offset = offset;\n+    }\n+\n+    private static int utflen(String str, int countGreaterThanZero) {\n+        int strlen = str.length();\n+        int utflen = strlen;\n+        for (int i = countGreaterThanZero; i < strlen; i++) {\n+            int c = str.charAt(i);\n+            if (c >= 0x80 || c == 0)\n+                utflen += (c >= 0x800) ? 2 : 1;\n+        }\n+\n+        return utflen;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.access\n+ * @summary test latin1 String countGreaterThanZero\n+ * @run testng\/othervm -XX:+CompactStrings CountGreaterZero\n+ * @run testng\/othervm -XX:-CompactStrings CountGreaterZero\n+ *\/\n+public class CountGreaterZero {\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n+    public static void main(String [] args) {\n+        byte[] bytes = new byte[1000];\n+\n+        Arrays.fill(bytes, (byte) 'A');\n+        String s = new String(bytes, StandardCharsets.ISO_8859_1);\n+        if (JLA.stringCoder(s) == 0) {\n+            assertEquals(bytes.length, JLA.countGreaterThanZero(s));\n+        } else {\n+            assertEquals(0, JLA.countGreaterThanZero(s));\n+        }\n+\n+        for (int i = 0; i < bytes.length; i++) {\n+            Arrays.fill(bytes, (byte) 'A');\n+            for (int j = Byte.MIN_VALUE; j <= 0; j++) {\n+                bytes[i] = (byte) j;\n+                s = new String(bytes, StandardCharsets.ISO_8859_1);\n+\n+                if (JLA.stringCoder(s) == 0) {\n+                    assertEquals(i, JLA.countGreaterThanZero(s));\n+                } else {\n+                    assertEquals(0, JLA.countGreaterThanZero(s));\n+                }\n+            }\n+        }\n+    }\n+\n+    static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected \" + expected + \" but got \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/String\/CountGreaterZero.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.classfile;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.*;\n+import java.lang.constant.*;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HexFormat;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n+\n+import jdk.internal.classfile.impl.*;\n+\/**\n+ * Test various operations on\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 1, time = 2)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(jvmArgsAppend = \"--enable-preview\", value = 3)\n+@State(Scope.Thread)\n+public class Utf8EntryWriteTo {\n+    static final ClassDesc STRING_BUILDER = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringBuilder;\");\n+    static final MethodTypeDesc MTD_append = MethodTypeDesc.of(STRING_BUILDER, CD_String);\n+    static final MethodTypeDesc MTD_String = MethodTypeDesc.of(CD_String);\n+    static final ClassDesc CLASS_DESC = ClassDesc.ofDescriptor(\"Lorg\/openjdk\/bench\/java\/lang\/classfile\/String$$StringConcat;\");\n+\n+    @Param({\"ascii\", \"utf8_2_bytes\", \"utf8_3_bytes\", \"emoji\"})\n+    public String charType;\n+    ConstantPoolBuilder poolBuilder;\n+    ClassEntry thisClass;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        byte[] bytes = HexFormat.of().parseHex(\n+                switch (charType) {\n+                    case \"ascii\"        -> \"78\";\n+                    case \"utf8_2_bytes\" -> \"c2a9\";\n+                    case \"utf8_3_bytes\" -> \"e6b8a9\";\n+                    case \"emoji\"        -> \"e29da3efb88f\";\n+                    default -> throw new IllegalArgumentException(\"bad charType: \" + charType);\n+                }\n+        );\n+        String s = new String(bytes, 0, bytes.length, StandardCharsets.UTF_8);\n+        String[] constants = new String[128];\n+        for (int i = 0; i < constants.length; i++) {\n+            constants[i] = \"A\".repeat(i).concat(s);\n+        }\n+\n+        poolBuilder = ConstantPoolBuilder.of();\n+        thisClass = poolBuilder.classEntry(CLASS_DESC);\n+        for (var c : constants) {\n+            poolBuilder.utf8Entry(c);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeTo(Blackhole bh) {\n+        bh.consume(ClassFile\n+                .of()\n+                .build(thisClass, poolBuilder, (ClassBuilder clb) -> {}));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/classfile\/Utf8EntryWriteTo.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}