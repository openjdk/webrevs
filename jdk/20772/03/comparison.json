{"files":[{"patch":"@@ -37,0 +37,15 @@\n+    public static boolean isLatin1GreaterThanZero(String s) {\n+        byte[] value;\n+        return s.coder() == String.LATIN1 && countGreaterThanZero(value = s.value(), 0, value.length) == value.length;\n+    }\n+\n+    public static int countGreaterThanZero(byte[] ba, int off, int len) {\n+        int limit = off + len;\n+        for (int i = off; i < limit; i++) {\n+            if (ba[i] <= 0) {\n+                return i - off;\n+            }\n+        }\n+        return len;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2597,0 +2597,4 @@\n+            public boolean isLatin1GreaterThanZero(String s) {\n+                return StringCoding.isLatin1GreaterThanZero(s);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -394,0 +394,5 @@\n+    \/**\n+     * Determine if the coder is Latin1 and the elements of the value array are greater than 0\n+     *\/\n+    boolean isLatin1GreaterThanZero(String s);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -424,41 +424,4 @@\n-                for (int i = 0; i < charLen; ++i) {\n-                    char c = stringValue.charAt(i);\n-                    if (c >= '\\001' && c <= '\\177') {\n-                        \/\/ Optimistic writing -- hope everything is bytes\n-                        \/\/ If not, we bail out, and alternate path patches the length\n-                        pool.writeU1((byte) c);\n-                    }\n-                    else {\n-                        int charLength = stringValue.length();\n-                        int byteLength = i;\n-                        char c1;\n-                        for (int j = i; j < charLength; ++j) {\n-                            c1 = (stringValue).charAt(j);\n-                            if (c1 >= '\\001' && c1 <= '\\177') {\n-                                byteLength++;\n-                            } else if (c1 > '\\u07FF') {\n-                                byteLength += 3;\n-                            } else {\n-                                byteLength += 2;\n-                            }\n-                        }\n-                        if (byteLength > 65535) {\n-                            throw new IllegalArgumentException();\n-                        }\n-                        int byteLengthFinal = byteLength;\n-                        pool.patchInt(pool.size() - i - 2, 2, byteLengthFinal);\n-                        for (int j = i; j < charLength; ++j) {\n-                            c1 = (stringValue).charAt(j);\n-                            if (c1 >= '\\001' && c1 <= '\\177') {\n-                                pool.writeU1((byte) c1);\n-                            } else if (c1 > '\\u07FF') {\n-                                pool.writeU1((byte) (0xE0 | c1 >> 12 & 0xF));\n-                                pool.writeU1((byte) (0x80 | c1 >> 6 & 0x3F));\n-                                pool.writeU1((byte) (0x80 | c1 & 0x3F));\n-                            } else {\n-                                pool.writeU1((byte) (0xC0 | c1 >> 6 & 0x1F));\n-                                pool.writeU1((byte) (0x80 | c1 & 0x3F));\n-                            }\n-                        }\n-                        break;\n-                    }\n+                if (JLA.isLatin1GreaterThanZero(stringValue)) {\n+                    pool.writeBytesDirect(stringValue);\n+                } else {\n+                    pool.writeUTF(stringValue);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":4,"deletions":41,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -131,0 +131,31 @@\n+    @SuppressWarnings(\"deprecation\")\n+    void writeBytesDirect(String s) {\n+        int length = s.length();\n+        reserveSpace(length);\n+        s.getBytes(0, length, elems, offset);\n+        offset += length;\n+    }\n+\n+    void writeUTF(String s) {\n+        int charLength = s.length();\n+        reserveSpace(charLength * 3);\n+        int offset = this.offset;\n+        byte[] elems = this.elems;\n+        for (int i = 0; i < charLength; ++i) {\n+            char c = s.charAt(i);\n+            if (c >= '\\001' && c <= '\\177') {\n+                elems[offset++] = (byte) c;\n+            } else if (c > '\\u07FF') {\n+                elems[offset    ] = (byte) (0xE0 | c >> 12 & 0xF);\n+                elems[offset + 1] = (byte) (0x80 | c >> 6 & 0x3F);\n+                elems[offset + 2] = (byte) (0x80 | c & 0x3F);\n+                offset += 3;\n+            } else {\n+                elems[offset    ] = (byte) (0xC0 | c >> 6 & 0x1F);\n+                elems[offset + 1] = (byte) (0x80 | c & 0x3F);\n+                offset += 2;\n+            }\n+        }\n+        this.offset = offset;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"}]}