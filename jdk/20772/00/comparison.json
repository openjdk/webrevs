{"files":[{"patch":"@@ -37,0 +37,9 @@\n+    public static boolean hasNegativeOrZeros(byte[] ba) {\n+        for (int i = 0, len = ba.length; i < len; i++) {\n+            if (ba[i] <= 0) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2597,0 +2597,4 @@\n+            public boolean hasNegativeOrZeros(String s) {\n+                return s.coder() == String.UTF16 || StringCoding.hasNegativeOrZeros(s.value());\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -394,0 +394,2 @@\n+    boolean hasNegativeOrZeros(String s);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -424,23 +424,28 @@\n-                for (int i = 0; i < charLen; ++i) {\n-                    char c = stringValue.charAt(i);\n-                    if (c >= '\\001' && c <= '\\177') {\n-                        \/\/ Optimistic writing -- hope everything is bytes\n-                        \/\/ If not, we bail out, and alternate path patches the length\n-                        pool.writeU1((byte) c);\n-                    }\n-                    else {\n-                        int charLength = stringValue.length();\n-                        int byteLength = i;\n-                        char c1;\n-                        for (int j = i; j < charLength; ++j) {\n-                            c1 = (stringValue).charAt(j);\n-                            if (c1 >= '\\001' && c1 <= '\\177') {\n-                                byteLength++;\n-                            } else if (c1 > '\\u07FF') {\n-                                byteLength += 3;\n-                            } else {\n-                                byteLength += 2;\n-                            }\n-                        }\n-                        if (byteLength > 65535) {\n-                            throw new IllegalArgumentException();\n+                if (!JLA.hasNegativeOrZeros(stringValue)) {\n+                    pool.writeBytesDirect(stringValue);\n+                } else {\n+                    writeToSlow(pool);\n+                }\n+            }\n+        }\n+\n+        private void writeToSlow(BufWriterImpl pool) {\n+            for (int i = 0; i < charLen; ++i) {\n+                char c = stringValue.charAt(i);\n+                if (c >= '\\001' && c <= '\\177') {\n+                    \/\/ Optimistic writing -- hope everything is bytes\n+                    \/\/ If not, we bail out, and alternate path patches the length\n+                    pool.writeU1((byte) c);\n+                }\n+                else {\n+                    int charLength = stringValue.length();\n+                    int byteLength = i;\n+                    char c1;\n+                    for (int j = i; j < charLength; ++j) {\n+                        c1 = (stringValue).charAt(j);\n+                        if (c1 >= '\\001' && c1 <= '\\177') {\n+                            byteLength++;\n+                        } else if (c1 > '\\u07FF') {\n+                            byteLength += 3;\n+                        } else {\n+                            byteLength += 2;\n@@ -448,14 +453,17 @@\n-                        int byteLengthFinal = byteLength;\n-                        pool.patchInt(pool.size() - i - 2, 2, byteLengthFinal);\n-                        for (int j = i; j < charLength; ++j) {\n-                            c1 = (stringValue).charAt(j);\n-                            if (c1 >= '\\001' && c1 <= '\\177') {\n-                                pool.writeU1((byte) c1);\n-                            } else if (c1 > '\\u07FF') {\n-                                pool.writeU1((byte) (0xE0 | c1 >> 12 & 0xF));\n-                                pool.writeU1((byte) (0x80 | c1 >> 6 & 0x3F));\n-                                pool.writeU1((byte) (0x80 | c1 & 0x3F));\n-                            } else {\n-                                pool.writeU1((byte) (0xC0 | c1 >> 6 & 0x1F));\n-                                pool.writeU1((byte) (0x80 | c1 & 0x3F));\n-                            }\n+                    }\n+                    if (byteLength > 65535) {\n+                        throw new IllegalArgumentException();\n+                    }\n+                    int byteLengthFinal = byteLength;\n+                    pool.patchInt(pool.size() - i - 2, 2, byteLengthFinal);\n+                    for (int j = i; j < charLength; ++j) {\n+                        c1 = (stringValue).charAt(j);\n+                        if (c1 >= '\\001' && c1 <= '\\177') {\n+                            pool.writeU1((byte) c1);\n+                        } else if (c1 > '\\u07FF') {\n+                            pool.writeU1((byte) (0xE0 | c1 >> 12 & 0xF));\n+                            pool.writeU1((byte) (0x80 | c1 >> 6 & 0x3F));\n+                            pool.writeU1((byte) (0x80 | c1 & 0x3F));\n+                        } else {\n+                            pool.writeU1((byte) (0xC0 | c1 >> 6 & 0x1F));\n+                            pool.writeU1((byte) (0x80 | c1 & 0x3F));\n@@ -463,1 +471,0 @@\n-                        break;\n@@ -465,0 +472,1 @@\n+                    break;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":46,"deletions":38,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -131,0 +131,8 @@\n+    @SuppressWarnings(\"deprecation\")\n+    void writeBytesDirect(String s) {\n+        int length = s.length();\n+        reserveSpace(length);\n+        s.getBytes(0, length, elems, offset);\n+        offset += length;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}