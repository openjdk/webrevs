{"files":[{"patch":"@@ -39,1 +39,1 @@\n-     * Count the number of String::value leading non-negatives in the range.\n+     * Count the number of leading positive, non-zero bytes in the range.\n@@ -41,1 +41,1 @@\n-    public static int countNonNegatives(String s) {\n+    public static int countGreaterThanZero(String s) {\n@@ -43,1 +43,1 @@\n-        return countNonNegatives(value = s.value(), 0, value.length);\n+        return countGreaterThanZero(value = s.value(), 0, value.length);\n@@ -47,1 +47,1 @@\n-     * Count the number of leading non-negatives in the range.\n+     * Count the number of leading positive, non-zero bytes in the range.\n@@ -49,1 +49,1 @@\n-    public static int countNonNegatives(byte[] ba, int off, int len) {\n+    public static int countGreaterThanZero(byte[] ba, int off, int len) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2572,2 +2572,2 @@\n-            public int countNonNegatives(String s) {\n-                return StringCoding.countNonNegatives(s);\n+            public int countGreaterThanZero(String s) {\n+                return StringCoding.countGreaterThanZero(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-     * Count the number of String::value leading non-negatives in the range.\n+     * Count the number of leading positive, non-zero bytes in the range.\n@@ -324,1 +324,1 @@\n-    int countNonNegatives(String s);\n+    int countGreaterThanZero(String s);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,2 +163,2 @@\n-        int countNonNegatives = JLA.isLatin1(str) ? JLA.countNonNegatives(str) : 0;\n-        int utflen = countNonNegatives == strlen ? strlen : utflen(str, countNonNegatives);\n+        int countGreaterThanZero = JLA.isLatin1(str) ? JLA.countGreaterThanZero(str) : 0;\n+        int utflen = countGreaterThanZero == strlen ? strlen : utflen(str, countGreaterThanZero);\n@@ -177,2 +177,2 @@\n-        str.getBytes(0, countNonNegatives, elems, offset);\n-        offset += countNonNegatives;\n+        str.getBytes(0, countGreaterThanZero, elems, offset);\n+        offset += countGreaterThanZero;\n@@ -180,1 +180,1 @@\n-        for (int i = countNonNegatives; i < strlen; ++i) {\n+        for (int i = countGreaterThanZero; i < strlen; ++i) {\n@@ -199,1 +199,1 @@\n-    private static int utflen(String str, int countNonNegatives) {\n+    private static int utflen(String str, int countGreaterThanZero) {\n@@ -202,1 +202,1 @@\n-        for (int i = countNonNegatives; i < strlen; i++) {\n+        for (int i = countGreaterThanZero; i < strlen; i++) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.access\n+ * @summary test latin1 String countGreaterThanZero\n+ * @run testng\/othervm -XX:+CompactStrings CountGreaterZero\n+ * @run testng\/othervm -XX:-CompactStrings CountGreaterZero\n+ *\/\n+public class CountGreaterZero {\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n+    public static void main(String [] args) {\n+        byte[] bytes = new byte[1000];\n+\n+        Arrays.fill(bytes, (byte) 'A');\n+        String s = new String(bytes, StandardCharsets.ISO_8859_1);\n+        if (JLA.isLatin1(s)) {\n+            assertEquals(bytes.length, JLA.countGreaterThanZero(s));\n+        } else {\n+            assertEquals(0, JLA.countGreaterThanZero(s));\n+        }\n+\n+        for (int i = 0; i < bytes.length; i++) {\n+            Arrays.fill(bytes, (byte) 'A');\n+            for (int j = Byte.MIN_VALUE; j <= 0; j++) {\n+                bytes[i] = (byte) j;\n+                s = new String(bytes, StandardCharsets.ISO_8859_1);\n+\n+                if (JLA.isLatin1(s)) {\n+                    assertEquals(i, JLA.countGreaterThanZero(s));\n+                } else {\n+                    assertEquals(0, JLA.countGreaterThanZero(s));\n+                }\n+            }\n+        }\n+    }\n+\n+    static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected \" + expected + \" but got \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/String\/CountGreaterZero.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.access.SharedSecrets;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.access\n- * @summary test latin1 String countNonNegatives\n- * @run testng\/othervm -XX:+CompactStrings CountNonNegatives\n- * @run testng\/othervm -XX:-CompactStrings CountNonNegatives\n- *\/\n-public class CountNonNegatives {\n-    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n-\n-    public static void main(String [] args) {\n-        byte[] bytes = new byte[1000];\n-\n-        Arrays.fill(bytes, (byte) 'A');\n-        String s = new String(bytes, StandardCharsets.ISO_8859_1);\n-        if (JLA.isLatin1(s)) {\n-            assertEquals(bytes.length, JLA.countNonNegatives(s));\n-        } else {\n-            assertEquals(0, JLA.countNonNegatives(s));\n-        }\n-\n-        for (int i = 0; i < bytes.length; i++) {\n-            Arrays.fill(bytes, (byte) 'A');\n-            for (int j = Byte.MIN_VALUE; j <= 0; j++) {\n-                bytes[i] = (byte) j;\n-                s = new String(bytes, StandardCharsets.ISO_8859_1);\n-\n-                if (JLA.isLatin1(s)) {\n-                    assertEquals(i, JLA.countNonNegatives(s));\n-                } else {\n-                    assertEquals(0, JLA.countNonNegatives(s));\n-                }\n-            }\n-        }\n-    }\n-\n-    static void assertEquals(int expected, int actual) {\n-        if (expected != actual) {\n-            throw new AssertionError(\"Expected \" + expected + \" but got \" + actual);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/String\/CountNonNegatives.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"}]}