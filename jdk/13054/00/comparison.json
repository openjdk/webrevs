{"files":[{"patch":"@@ -221,4 +221,2 @@\n-JVM_VirtualThreadMountBegin\n-JVM_VirtualThreadMountEnd\n-JVM_VirtualThreadUnmountBegin\n-JVM_VirtualThreadUnmountEnd\n+JVM_VirtualThreadMount\n+JVM_VirtualThreadUnmount\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1918,1 +1918,0 @@\n-int java_lang_VirtualThread::static_notify_jvmti_events_offset;\n@@ -1925,1 +1924,0 @@\n-  macro(static_notify_jvmti_events_offset, k, \"notifyJvmtiEvents\",  bool_signature,              true);  \\\n@@ -1931,1 +1929,0 @@\n-static bool vthread_notify_jvmti_events = JNI_FALSE;\n@@ -1938,8 +1935,0 @@\n-void java_lang_VirtualThread::init_static_notify_jvmti_events() {\n-  if (vthread_notify_jvmti_events) {\n-    InstanceKlass* ik = vmClasses::VirtualThread_klass();\n-    oop base = ik->static_field_base_raw();\n-    base->release_bool_field_put(static_notify_jvmti_events_offset, vthread_notify_jvmti_events);\n-  }\n-}\n-\n@@ -1998,9 +1987,0 @@\n-bool java_lang_VirtualThread::notify_jvmti_events() {\n-  return vthread_notify_jvmti_events == JNI_TRUE;\n-}\n-\n-void java_lang_VirtualThread::set_notify_jvmti_events(bool enable) {\n-  vthread_notify_jvmti_events = enable;\n-}\n-\n-\n@@ -5372,1 +5352,0 @@\n-  java_lang_VirtualThread::init_static_notify_jvmti_events();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -513,1 +513,0 @@\n-  static int static_notify_jvmti_events_offset;\n@@ -551,3 +550,0 @@\n-  static bool notify_jvmti_events();\n-  static void set_notify_jvmti_events(bool enable);\n-  static void init_static_notify_jvmti_events();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -586,0 +586,5 @@\n+  \/* java\/lang\/VirtualThread *\/                                                                                         \\\n+  do_intrinsic(_notifyJvmtiMount, java_lang_VirtualThread, notifyJvmtiMount_name, bool_bool_void_signature, F_RN)       \\\n+  do_intrinsic(_notifyJvmtiUnmount, java_lang_VirtualThread, notifyJvmtiUnmount_name, bool_bool_void_signature, F_RN)   \\\n+  do_intrinsic(_notifyJvmtiHideFrames, java_lang_VirtualThread, notifyJvmtiHideFrames_name, bool_void_signature, F_RN)  \\\n+                                                                                                                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -415,0 +415,3 @@\n+  template(notifyJvmtiMount_name,                     \"notifyJvmtiMount\")                         \\\n+  template(notifyJvmtiUnmount_name,                   \"notifyJvmtiUnmount\")                       \\\n+  template(notifyJvmtiHideFrames_name,                \"notifyJvmtiHideFrames\")                    \\\n@@ -553,0 +556,1 @@\n+  template(bool_bool_void_signature,                  \"(ZZ)V\")                                    \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1147,1 +1147,1 @@\n-JVM_VirtualThreadMountBegin(JNIEnv* env, jobject vthread, jboolean first_mount);\n+JVM_VirtualThreadMount(JNIEnv* env, jobject vthread, jboolean hide, jboolean first_mount);\n@@ -1150,7 +1150,1 @@\n-JVM_VirtualThreadMountEnd(JNIEnv* env, jobject vthread, jboolean first_mount);\n-\n-JNIEXPORT void JNICALL\n-JVM_VirtualThreadUnmountBegin(JNIEnv* env, jobject vthread, jboolean last_unmount);\n-\n-JNIEXPORT void JNICALL\n-JVM_VirtualThreadUnmountEnd(JNIEnv* env, jobject vthread, jboolean last_unmount);\n+JVM_VirtualThreadUnmount(JNIEnv* env, jobject vthread, jboolean hide, jboolean last_unmount);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -788,0 +788,5 @@\n+#if INCLUDE_JVMTI\n+  case vmIntrinsics::_notifyJvmtiMount:\n+  case vmIntrinsics::_notifyJvmtiUnmount:\n+  case vmIntrinsics::_notifyJvmtiHideFrames:\n+#endif\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+#include \"prims\/jvmtiThreadState.hpp\"\n@@ -481,0 +482,8 @@\n+#if INCLUDE_JVMTI\n+  case vmIntrinsics::_notifyJvmtiMount:         return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_mount()),\n+                                                                                        \"notifyJvmtiMount\");\n+  case vmIntrinsics::_notifyJvmtiUnmount:       return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_unmount()),\n+                                                                                        \"notifyJvmtiUnmount\");\n+  case vmIntrinsics::_notifyJvmtiHideFrames:    return inline_native_notify_jvmti_hide();\n+#endif\n+\n@@ -2844,0 +2853,64 @@\n+\n+#if INCLUDE_JVMTI\n+bool LibraryCallKit::inline_native_notify_jvmti_funcs(address funcAddr, const char* funcName) {\n+  if (!DoJVMTIVirtualThreadTransitions) {\n+    return true;\n+  }\n+  IdealKit ideal(this);\n+\n+  Node* ONE = ideal.ConI(1);\n+  const TypeFunc* tf = OptoRuntime::notify_jvmti_Type();\n+  Node* vt_oop = _gvn.transform(must_be_not_null(argument(0), true));\n+  Node* hide   = _gvn.transform(argument(1));\n+  Node* cond   = _gvn.transform(argument(2));\n+\n+  Node* addr = makecon(TypeRawPtr::make((address)&JvmtiVTMSTransitionDisabler::_VTMS_notify_jvmti_events));\n+  Node* notify_jvmti_enabled = ideal.load(ideal.ctrl(), addr, TypeInt::BOOL, T_BOOLEAN, Compile::AliasIdxRaw);\n+\n+  ideal.if_then(notify_jvmti_enabled, BoolTest::eq, ONE); {\n+    \/\/ if notifyJvmti enabled then make a call to the given SharedRuntime function\n+    sync_kit(ideal);\n+    make_runtime_call(RC_NO_LEAF, tf, funcAddr, funcName, TypePtr::BOTTOM, vt_oop, hide, cond);\n+    ideal.sync_kit(this);\n+  } ideal.else_(); {\n+    \/\/ set begin value to the VTMS transition bit in current JavaThread\n+    Node* thread = ideal.thread();\n+    Node* addr = basic_plus_adr(thread, in_bytes(JavaThread::is_in_VTMS_transition_offset()));\n+    const TypePtr *addr_type = _gvn.type(addr)->isa_ptr();\n+\n+    sync_kit(ideal);\n+    access_store_at(nullptr, addr, addr_type, hide, _gvn.type(cond), T_BOOLEAN, IN_NATIVE | MO_UNORDERED);\n+    ideal.sync_kit(this);\n+  } ideal.end_if();\n+  final_sync(ideal);\n+\n+  return true;\n+}\n+\n+bool LibraryCallKit::inline_native_notify_jvmti_hide() {\n+  if (!DoJVMTIVirtualThreadTransitions) {\n+    return true;\n+  }\n+  IdealKit ideal(this);\n+\n+  Node* ONE = ideal.ConI(1);\n+  Node* addr = makecon(TypeRawPtr::make((address)&JvmtiVTMSTransitionDisabler::_VTMS_notify_jvmti_events));\n+  Node* notify_jvmti_enabled = ideal.load(ideal.ctrl(), addr, TypeInt::BOOL, T_BOOLEAN, Compile::AliasIdxRaw);\n+\n+  ideal.if_then(notify_jvmti_enabled, BoolTest::eq, ONE); {\n+    \/\/ set the VTMS temporary transition bit in current JavaThread\n+    Node* thread = ideal.thread();\n+    Node* hide = _gvn.transform(argument(1));\n+    Node* addr = basic_plus_adr(thread, in_bytes(JavaThread::is_in_tmp_VTMS_transition_offset()));\n+    const TypePtr *addr_type = _gvn.type(addr)->isa_ptr();\n+\n+    sync_kit(ideal);\n+    access_store_at(nullptr, addr, addr_type, hide, _gvn.type(hide), T_BOOLEAN, IN_NATIVE | MO_UNORDERED);\n+    ideal.sync_kit(this);\n+  } ideal.end_if();\n+  final_sync(ideal);\n+\n+  return true;\n+}\n+#endif \/\/ INCLUDE_JVMTI\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -248,0 +248,5 @@\n+#if INCLUDE_JVMTI\n+  bool inline_native_notify_jvmti_funcs(address funcAddr, const char* funcName);\n+  bool inline_native_notify_jvmti_hide();\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -112,0 +112,4 @@\n+#if INCLUDE_JVMTI\n+address OptoRuntime::_notify_jvmti_mount                          = nullptr;\n+address OptoRuntime::_notify_jvmti_unmount                        = nullptr;\n+#endif\n@@ -151,0 +155,4 @@\n+#if INCLUDE_JVMTI\n+  gen(env, _notify_jvmti_mount             , notify_jvmti_Type            , SharedRuntime::notify_jvmti_mount,   0 , true, false);\n+  gen(env, _notify_jvmti_unmount           , notify_jvmti_Type            , SharedRuntime::notify_jvmti_unmount, 0 , true, false);\n+#endif\n@@ -1643,0 +1651,18 @@\n+  return TypeFunc::make(domain,range);\n+}\n+#endif\n+\n+#if INCLUDE_JVMTI\n+const TypeFunc *OptoRuntime::notify_jvmti_Type() {\n+  \/\/ create input type (domain)\n+  const Type **fields = TypeTuple::fields(3);\n+  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL; \/\/ VirtualThread oop\n+  fields[TypeFunc::Parms+1] = TypeInt::BOOL;        \/\/ jboolean\n+  fields[TypeFunc::Parms+2] = TypeInt::BOOL;        \/\/ jboolean\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+3,fields);\n+\n+  \/\/ no result type needed\n+  fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = NULL; \/\/ void\n+  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms, fields);\n+\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -138,0 +138,4 @@\n+#if INCLUDE_JVMTI\n+  static address _notify_jvmti_mount;\n+  static address _notify_jvmti_unmount;\n+#endif\n@@ -211,0 +215,4 @@\n+#if INCLUDE_JVMTI\n+  static address notify_jvmti_mount()                    { return _notify_jvmti_mount; }\n+  static address notify_jvmti_unmount()                  { return _notify_jvmti_unmount; }\n+#endif\n@@ -297,0 +305,3 @@\n+#if INCLUDE_JVMTI\n+  static const TypeFunc* notify_jvmti_Type();\n+#endif\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3920,1 +3920,1 @@\n-JVM_ENTRY(void, JVM_VirtualThreadMountBegin(JNIEnv* env, jobject vthread, jboolean first_mount))\n+JVM_ENTRY(void, JVM_VirtualThreadMount(JNIEnv* env, jobject vthread, jboolean hide, jboolean first_mount))\n@@ -3926,12 +3926,2 @@\n-  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n-  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n-  JvmtiVTMSTransitionDisabler::start_VTMS_transition(vthread, \/* is_mount *\/ true);\n-#else\n-  fatal(\"Should only be called with JVMTI enabled\");\n-#endif\n-JVM_END\n-\n-JVM_ENTRY(void, JVM_VirtualThreadMountEnd(JNIEnv* env, jobject vthread, jboolean first_mount))\n-#if INCLUDE_JVMTI\n-  if (!DoJVMTIVirtualThreadTransitions) {\n-    assert(!JvmtiExport::can_support_virtual_threads(), \"sanity check\");\n+  if (!JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    thread->set_is_in_VTMS_transition(hide);\n@@ -3940,31 +3930,4 @@\n-  oop vt = JNIHandles::resolve(vthread);\n-\n-  thread->rebind_to_jvmti_thread_state_of(vt);\n-\n-  {\n-    MutexLocker mu(JvmtiThreadState_lock);\n-    JvmtiThreadState* state = thread->jvmti_thread_state();\n-    if (state != nullptr && state->is_pending_interp_only_mode()) {\n-      JvmtiEventController::enter_interp_only_mode();\n-    }\n-  }\n-  assert(thread->is_in_VTMS_transition(), \"sanity check\");\n-  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n-  JvmtiVTMSTransitionDisabler::finish_VTMS_transition(vthread, \/* is_mount *\/ true);\n-  if (first_mount) {\n-    \/\/ thread start\n-    if (JvmtiExport::can_support_virtual_threads()) {\n-      JvmtiEventController::thread_started(thread);\n-      if (JvmtiExport::should_post_vthread_start()) {\n-        JvmtiExport::post_vthread_start(vthread);\n-      }\n-    } else { \/\/ compatibility for vthread unaware agents: legacy thread_start\n-      if (PostVirtualThreadCompatibleLifecycleEvents &&\n-          JvmtiExport::should_post_thread_life()) {\n-        \/\/ JvmtiEventController::thread_started is called here\n-        JvmtiExport::post_thread_start(thread);\n-      }\n-    }\n-  }\n-  if (JvmtiExport::should_post_vthread_mount()) {\n-    JvmtiExport::post_vthread_mount(vthread);\n+  if (hide) {\n+   JvmtiVTMSTransitionDisabler::VTMS_mount_begin(vthread, first_mount);\n+  } else {\n+   JvmtiVTMSTransitionDisabler::VTMS_mount_end(vthread, first_mount);\n@@ -3977,1 +3940,1 @@\n-JVM_ENTRY(void, JVM_VirtualThreadUnmountBegin(JNIEnv* env, jobject vthread, jboolean last_unmount))\n+JVM_ENTRY(void, JVM_VirtualThreadUnmount(JNIEnv* env, jobject vthread, jboolean hide, jboolean last_unmount))\n@@ -3983,17 +3946,3 @@\n-  HandleMark hm(thread);\n-  Handle ct(thread, thread->threadObj());\n-\n-  if (JvmtiExport::should_post_vthread_unmount()) {\n-    JvmtiExport::post_vthread_unmount(vthread);\n-  }\n-  if (last_unmount) {\n-    if (JvmtiExport::can_support_virtual_threads()) {\n-      if (JvmtiExport::should_post_vthread_end()) {\n-        JvmtiExport::post_vthread_end(vthread);\n-      }\n-    } else { \/\/ compatibility for vthread unaware agents: legacy thread_end\n-      if (PostVirtualThreadCompatibleLifecycleEvents &&\n-          JvmtiExport::should_post_thread_life()) {\n-        JvmtiExport::post_thread_end(thread);\n-      }\n-    }\n+  if (!JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    thread->set_is_in_VTMS_transition(hide);\n+    return;\n@@ -4001,9 +3950,4 @@\n-  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n-  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n-  JvmtiVTMSTransitionDisabler::start_VTMS_transition(vthread, \/* is_mount *\/ false);\n-\n-  if (last_unmount && thread->jvmti_thread_state() != nullptr) {\n-    JvmtiExport::cleanup_thread(thread);\n-    thread->set_jvmti_thread_state(nullptr);\n-    oop vt = JNIHandles::resolve(vthread);\n-    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n+  if (hide) {\n+   JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(vthread, last_unmount);\n+  } else {\n+   JvmtiVTMSTransitionDisabler::VTMS_unmount_end(vthread, last_unmount);\n@@ -4011,1 +3955,0 @@\n-  thread->rebind_to_jvmti_thread_state_of(ct());\n@@ -4017,1 +3960,1 @@\n-JVM_ENTRY(void, JVM_VirtualThreadUnmountEnd(JNIEnv* env, jobject vthread, jboolean last_unmount))\n+JVM_ENTRY(void, JVM_VirtualThreadHideFrames(JNIEnv* env, jobject vthread, jboolean hide))\n@@ -4023,12 +3966,1 @@\n-  assert(thread->is_in_VTMS_transition(), \"sanity check\");\n-  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n-  JvmtiVTMSTransitionDisabler::finish_VTMS_transition(vthread, \/* is_mount *\/ false);\n-#else\n-  fatal(\"Should only be called with JVMTI enabled\");\n-#endif\n-JVM_END\n-\n-JVM_ENTRY(void, JVM_VirtualThreadHideFrames(JNIEnv* env, jobject vthread, jboolean hide))\n-#if INCLUDE_JVMTI\n-  if (!DoJVMTIVirtualThreadTransitions) {\n-    assert(!JvmtiExport::can_support_virtual_threads(), \"sanity check\");\n+  if (!JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":17,"deletions":85,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -382,5 +382,1 @@\n-    java_lang_VirtualThread::set_notify_jvmti_events(true);\n-    if (JvmtiEnv::get_phase() == JVMTI_PHASE_LIVE) {\n-      ThreadInVMfromNative __tiv(JavaThread::current());\n-      java_lang_VirtualThread::init_static_notify_jvmti_events();\n-    }\n+    JvmtiVTMSTransitionDisabler::set_VTMS_notify_jvmti_events(true);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"runtime\/jniHandles.hpp\"\n+#include \"runtime\/jniHandles.inline.hpp\"\n@@ -222,1 +222,1 @@\n-\/\/ VTMs transitions for all virtual threads are disabled while it is positive\n+\/\/ VTMS transitions for all virtual threads are disabled while it is positive\n@@ -228,0 +228,2 @@\n+\/\/ Notifications from VirtualThread about VTMS events are enabled.\n+bool JvmtiVTMSTransitionDisabler::_VTMS_notify_jvmti_events = false;\n@@ -512,0 +514,88 @@\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_mount_begin(jobject vthread, jboolean first_mount) {\n+  JavaThread* thread = JavaThread::current();\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n+  start_VTMS_transition(vthread, \/* is_mount *\/ true);\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_mount_end(jobject vthread, jboolean first_mount) {\n+  JavaThread* thread = JavaThread::current();\n+  oop vt = JNIHandles::resolve(vthread);\n+\n+  thread->rebind_to_jvmti_thread_state_of(vt);\n+\n+  {\n+    MutexLocker mu(JvmtiThreadState_lock);\n+    JvmtiThreadState* state = thread->jvmti_thread_state();\n+    if (state != nullptr && state->is_pending_interp_only_mode()) {\n+      JvmtiEventController::enter_interp_only_mode();\n+    }\n+  }\n+  assert(thread->is_in_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+  finish_VTMS_transition(vthread, \/* is_mount *\/ true);\n+  if (first_mount) {\n+    \/\/ thread start\n+    if (JvmtiExport::can_support_virtual_threads()) {\n+      JvmtiEventController::thread_started(thread);\n+      if (JvmtiExport::should_post_vthread_start()) {\n+        JvmtiExport::post_vthread_start(vthread);\n+      }\n+    } else { \/\/ compatibility for vthread unaware agents: legacy thread_start\n+      if (PostVirtualThreadCompatibleLifecycleEvents &&\n+          JvmtiExport::should_post_thread_life()) {\n+        \/\/ JvmtiEventController::thread_started is called here\n+        JvmtiExport::post_thread_start(thread);\n+      }\n+    }\n+  }\n+  if (JvmtiExport::should_post_vthread_mount()) {\n+    JvmtiExport::post_vthread_mount(vthread);\n+  }\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(jobject vthread, jboolean last_unmount) {\n+  JavaThread* thread = JavaThread::current();\n+  HandleMark hm(thread);\n+  Handle ct(thread, thread->threadObj());\n+\n+  if (JvmtiExport::should_post_vthread_unmount()) {\n+    JvmtiExport::post_vthread_unmount(vthread);\n+  }\n+  if (last_unmount) {\n+    if (JvmtiExport::can_support_virtual_threads()) {\n+      if (JvmtiExport::should_post_vthread_end()) {\n+        JvmtiExport::post_vthread_end(vthread);\n+      }\n+    } else { \/\/ compatibility for vthread unaware agents: legacy thread_end\n+      if (PostVirtualThreadCompatibleLifecycleEvents &&\n+          JvmtiExport::should_post_thread_life()) {\n+        JvmtiExport::post_thread_end(thread);\n+      }\n+    }\n+  }\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n+  start_VTMS_transition(vthread, \/* is_mount *\/ false);\n+\n+  if (last_unmount && thread->jvmti_thread_state() != nullptr) {\n+    JvmtiExport::cleanup_thread(thread);\n+    thread->set_jvmti_thread_state(nullptr);\n+    oop vt = JNIHandles::resolve(vthread);\n+    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n+  }\n+  thread->rebind_to_jvmti_thread_state_of(ct());\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_unmount_end(jobject vthread, jboolean last_unmount) {\n+  JavaThread* thread = JavaThread::current();\n+  assert(thread->is_in_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+  finish_VTMS_transition(vthread, \/* is_mount *\/ false);\n+}\n+\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":92,"deletions":2,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -97,0 +97,4 @@\n+  static bool _VTMS_notify_jvmti_events;                 \/\/ enable notifications from VirtualThread about VTMS events\n+  static bool VTMS_notify_jvmti_events()             { return _VTMS_notify_jvmti_events; }\n+  static void set_VTMS_notify_jvmti_events(bool val) { _VTMS_notify_jvmti_events = val; }\n+\n@@ -104,0 +108,5 @@\n+\n+  static void VTMS_mount_begin(jobject vthread, jboolean first_mount);\n+  static void VTMS_mount_end(jobject vthread, jboolean first_mount);\n+  static void VTMS_unmount_begin(jobject vthread, jboolean last_unmount);\n+  static void VTMS_unmount_end(jobject vthread, jboolean last_unmount);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -814,0 +814,5 @@\n+#if INCLUDE_JVMTI\n+  static ByteSize is_in_VTMS_transition_offset()     { return byte_offset_of(JavaThread, _is_in_VTMS_transition); }\n+  static ByteSize is_in_tmp_VTMS_transition_offset() { return byte_offset_of(JavaThread, _is_in_tmp_VTMS_transition); }\n+#endif\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+#include \"prims\/jvmtiThreadState.hpp\"\n@@ -626,0 +627,22 @@\n+#if INCLUDE_JVMTI\n+JRT_ENTRY(void, SharedRuntime::notify_jvmti_mount(oopDesc* vt, jboolean hide, jboolean first_mount, JavaThread* current))\n+  jobject vthread = JNIHandles::make_local(const_cast<oopDesc*>(vt));\n+\n+  if (hide) {\n+    JvmtiVTMSTransitionDisabler::VTMS_mount_begin(vthread, first_mount);\n+  } else {\n+    JvmtiVTMSTransitionDisabler::VTMS_mount_end(vthread, first_mount);\n+  }\n+JRT_END\n+\n+JRT_ENTRY(void, SharedRuntime::notify_jvmti_unmount(oopDesc* vt, jboolean hide, jboolean last_unmount, JavaThread* current))\n+  jobject vthread = JNIHandles::make_local(const_cast<oopDesc*>(vt));\n+\n+  if (hide) {\n+    JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(vthread, last_unmount);\n+  } else {\n+    JvmtiVTMSTransitionDisabler::VTMS_unmount_end(vthread, last_unmount);\n+  }\n+JRT_END\n+#endif \/\/ INCLUDE_JVMTI\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -267,0 +267,6 @@\n+#if INCLUDE_JVMTI\n+  \/\/ Functions for JVMTI notifications\n+  static void notify_jvmti_mount(oopDesc* vt, jboolean hide, jboolean first_mount, JavaThread* jt);\n+  static void notify_jvmti_unmount(oopDesc* vt, jboolean hide, jboolean last_unmount, JavaThread* jt);\n+#endif\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n@@ -213,1 +214,1 @@\n-        if (notifyJvmtiEvents) notifyJvmtiMountBegin(firstRun);\n+        notifyJvmtiMount(true, firstRun);\n@@ -290,1 +291,0 @@\n-        boolean notifyJvmti = notifyJvmtiEvents;\n@@ -294,1 +294,1 @@\n-        if (notifyJvmti) notifyJvmtiMountEnd(true);\n+        notifyJvmtiMount(false, true);\n@@ -322,1 +322,1 @@\n-                if (notifyJvmti) notifyJvmtiUnmountBegin(true);\n+                notifyJvmtiUnmount(true, true);\n@@ -384,1 +384,0 @@\n-     * @return true if JVMTI was notified\n@@ -388,5 +387,2 @@\n-    private boolean switchToCarrierThread() {\n-        boolean notifyJvmti = notifyJvmtiEvents;\n-        if (notifyJvmti) {\n-            notifyJvmtiHideFrames(true);\n-        }\n+    private void switchToCarrierThread() {\n+        notifyJvmtiHideFrames(true);\n@@ -397,1 +393,0 @@\n-        return notifyJvmti;\n@@ -402,1 +397,0 @@\n-     * If {@code notifyJvmti} is true then JVMTI is notified.\n@@ -406,1 +400,1 @@\n-    private void switchToVirtualThread(VirtualThread vthread, boolean notifyJvmti) {\n+    private void switchToVirtualThread(VirtualThread vthread) {\n@@ -410,3 +404,1 @@\n-        if (notifyJvmti) {\n-            notifyJvmtiHideFrames(false);\n-        }\n+        notifyJvmtiHideFrames(false);\n@@ -422,2 +414,0 @@\n-        boolean notifyJvmti = notifyJvmtiEvents;\n-\n@@ -425,1 +415,1 @@\n-        if (notifyJvmti) notifyJvmtiUnmountBegin(false);\n+        notifyJvmtiUnmount(true, false);\n@@ -432,1 +422,1 @@\n-            if (notifyJvmti) notifyJvmtiMountEnd(false);\n+            notifyJvmtiMount(false, false);\n@@ -449,1 +439,1 @@\n-            if (notifyJvmtiEvents) notifyJvmtiUnmountEnd(false);\n+            notifyJvmtiUnmount(false, false);\n@@ -465,1 +455,1 @@\n-            if (notifyJvmtiEvents) notifyJvmtiUnmountEnd(false);\n+            notifyJvmtiUnmount(false, false);\n@@ -486,1 +476,1 @@\n-            if (notifyJvmtiEvents) notifyJvmtiUnmountEnd(true);\n+            notifyJvmtiUnmount(false, true);\n@@ -654,1 +644,1 @@\n-        boolean notifyJvmti = switchToCarrierThread();\n+        switchToCarrierThread();\n@@ -658,1 +648,1 @@\n-            switchToVirtualThread(this, notifyJvmti);\n+            switchToVirtualThread(this);\n@@ -669,1 +659,1 @@\n-            boolean notifyJvmti = switchToCarrierThread();\n+            switchToCarrierThread();\n@@ -673,1 +663,1 @@\n-                switchToVirtualThread(this, notifyJvmti);\n+                switchToVirtualThread(this);\n@@ -693,1 +683,1 @@\n-                    boolean notifyJvmti = vthread.switchToCarrierThread();\n+                    vthread.switchToCarrierThread();\n@@ -697,1 +687,1 @@\n-                        switchToVirtualThread(vthread, notifyJvmti);\n+                        switchToVirtualThread(vthread);\n@@ -1058,8 +1048,1 @@\n-    private static volatile boolean notifyJvmtiEvents;  \/\/ set by VM\n-\n-    @JvmtiMountTransition\n-    private native void notifyJvmtiMountBegin(boolean firstMount);\n-\n-    @JvmtiMountTransition\n-    private native void notifyJvmtiMountEnd(boolean firstMount);\n-\n+    @IntrinsicCandidate\n@@ -1067,1 +1050,1 @@\n-    private native void notifyJvmtiUnmountBegin(boolean lastUnmount);\n+    private native void notifyJvmtiMount(boolean hide, boolean firstMount);\n@@ -1069,0 +1052,1 @@\n+    @IntrinsicCandidate\n@@ -1070,1 +1054,1 @@\n-    private native void notifyJvmtiUnmountEnd(boolean lastUnmount);\n+    private native void notifyJvmtiUnmount(boolean hide, boolean lastUnmount);\n@@ -1072,0 +1056,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":24,"deletions":39,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -35,5 +35,3 @@\n-    { \"notifyJvmtiMountBegin\",   \"(Z)V\", (void *)&JVM_VirtualThreadMountBegin },\n-    { \"notifyJvmtiMountEnd\",     \"(Z)V\", (void *)&JVM_VirtualThreadMountEnd },\n-    { \"notifyJvmtiUnmountBegin\", \"(Z)V\", (void *)&JVM_VirtualThreadUnmountBegin },\n-    { \"notifyJvmtiUnmountEnd\",   \"(Z)V\", (void *)&JVM_VirtualThreadUnmountEnd },\n-    { \"notifyJvmtiHideFrames\",   \"(Z)V\", (void *)&JVM_VirtualThreadHideFrames },\n+    { \"notifyJvmtiMount\",        \"(ZZ)V\", (void *)&JVM_VirtualThreadMount },\n+    { \"notifyJvmtiUnmount\",      \"(ZZ)V\", (void *)&JVM_VirtualThreadUnmount },\n+    { \"notifyJvmtiHideFrames\",   \"(Z)V\",  (void *)&JVM_VirtualThreadHideFrames },\n","filename":"src\/java.base\/share\/native\/libjava\/VirtualThread.c","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}