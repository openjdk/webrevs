{"files":[{"patch":"@@ -45,1 +45,0 @@\n-import java.lang.reflect.GenericArrayType;\n@@ -88,0 +87,1 @@\n+import sun.invoke.util.BytecodeDescriptor;\n@@ -92,2 +92,0 @@\n-import sun.reflect.generics.repository.MethodRepository;\n-import sun.reflect.generics.repository.ConstructorRepository;\n@@ -1527,11 +1525,3 @@\n-            MethodRepository typeInfo = MethodRepository.make(enclosingInfo.getDescriptor(),\n-                                                              getFactory());\n-            Class<?>   returnType       = toClass(typeInfo.getReturnType());\n-            Type []    parameterTypes   = typeInfo.getParameterTypes();\n-            Class<?>[] parameterClasses = new Class<?>[parameterTypes.length];\n-\n-            \/\/ Convert Types to Classes; returned types *should*\n-            \/\/ be class objects since the methodDescriptor's used\n-            \/\/ don't have generics information\n-            for(int i = 0; i < parameterClasses.length; i++)\n-                parameterClasses[i] = toClass(parameterTypes[i]);\n+            List<Class<?>> types = BytecodeDescriptor.parseMethod(enclosingInfo.getDescriptor(), getClassLoader());\n+            Class<?>   returnType       = types.removeLast();\n+            Class<?>[] parameterClasses = types.toArray(new Class<?>[0]);\n@@ -1633,6 +1623,0 @@\n-    private static Class<?> toClass(Type o) {\n-        if (o instanceof GenericArrayType gat)\n-            return toClass(gat.getGenericComponentType()).arrayType();\n-        return (Class<?>)o;\n-     }\n-\n@@ -1683,10 +1667,3 @@\n-            ConstructorRepository typeInfo = ConstructorRepository.make(enclosingInfo.getDescriptor(),\n-                                                                        getFactory());\n-            Type []    parameterTypes   = typeInfo.getParameterTypes();\n-            Class<?>[] parameterClasses = new Class<?>[parameterTypes.length];\n-\n-            \/\/ Convert Types to Classes; returned types *should*\n-            \/\/ be class objects since the methodDescriptor's used\n-            \/\/ don't have generics information\n-            for(int i = 0; i < parameterClasses.length; i++)\n-                parameterClasses[i] = toClass(parameterTypes[i]);\n+            List<Class<?>> types = BytecodeDescriptor.parseMethod(enclosingInfo.getDescriptor(), getClassLoader());\n+            types.removeLast();\n+            Class<?>[] parameterClasses = types.toArray(new Class<?>[0]);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":7,"deletions":30,"binary":false,"changes":37,"status":"modified"}]}