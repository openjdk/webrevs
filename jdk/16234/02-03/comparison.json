{"files":[{"patch":"@@ -88,0 +88,1 @@\n+<li><a href=\"#libsleef\" id=\"toc-libsleef\">libsleef<\/a><\/li>\n@@ -752,0 +753,15 @@\n+<h3 id=\"libsleef\">libsleef<\/h3>\n+<p>libsleef, the <a href=\"https:\/\/sleef.org\/\">SIMD Library for\n+Evaluating Elementary Functions<\/a> is required when building\n+libvmath.so on Linux\/aarch64 platforms.<\/p>\n+<ul>\n+<li>To install on an apt-based Linux, try running\n+<code>sudo apt-get install     libsleef-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running\n+<code>sudo yum install     sleef-devel<\/code>.<\/li>\n+<\/ul>\n+<p>Use <code>--with-libsleef=&lt;path&gt;<\/code> if\n+<code>configure<\/code> does not properly locate your libsleef files.\n+This is optional. If libsleef is neither installed nor specified\n+manually, the JDK build will succeed but without libvmath.so and the\n+performance enhancements provided by it.<\/p>\n","filename":"doc\/building.html","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -552,1 +552,1 @@\n-https:\/\/sleef.org\/) is required when building libvmath.so on Linux+AArch64\n+https:\/\/sleef.org\/) is required when building libvmath.so on Linux\/aarch64\n@@ -561,1 +561,3 @@\n-files.\n+files. This is optional. If libsleef is neither installed nor specified\n+manually, the JDK build will succeed but without libvmath.so and the\n+performance enhancements provided by it.\n","filename":"doc\/building.md","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,0 +122,2 @@\n+    sleef)\n+      PKGHANDLER_COMMAND=\"sudo apt-get install libsleef-dev\" ;;\n@@ -164,0 +166,2 @@\n+    sleef)\n+      PKGHANDLER_COMMAND=\"sudo yum install sleef-devel\" ;;\n","filename":"make\/autoconf\/help.m4","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  LIBSLEEF_FOUND=no\n+  ENABLE_LIBSLEEF=false\n@@ -40,2 +40,5 @@\n-  if test \"x${with_libsleef}\" = xno; then\n-    AC_MSG_NOTICE([libvmath will not be compiled, because its dependence libsleef is disabled in command line])\n+  if test \"x$NEEDS_LIB_SLEEF\" = xfalse; then\n+    if test \"x${with_libsleef}\" != \"x\" &&\n+       test \"x${with_libsleef}\" != \"xno\"; then\n+      AC_MSG_WARN([[libsleef is not used, so --with-libsleef is ignored]])\n+    fi\n@@ -43,8 +46,19 @@\n-    # Check the specified libsleef.so\n-    if test \"x${with_libsleef}\" != x; then\n-      AC_MSG_CHECKING([the specified LIBSLEEF])\n-      if test -e ${with_libsleef}\/lib\/libsleef.so &&\n-         test -e ${with_libsleef}\/include\/sleef.h; then\n-        LIBSLEEF_FOUND=yes\n-        LIBVMATH_LIBS=\"-L${with_libsleef}\/lib\"\n-        LIBVMATH_CFLAGS=\"-I${with_libsleef}\/include\"\n+    LIBSLEEF_FOUND=no\n+\n+    if test \"x${with_libsleef}\" = \"xno\"; then\n+      AC_MSG_NOTICE([libvmath will not be built, because its dependence libsleef is disabled])\n+    else\n+      if test \"x${with_libsleef}\" != \"x\" &&\n+         test \"x${with_libsleef}\" != \"xyes\"; then\n+        # Check the specified libsleef\n+        AC_MSG_CHECKING([for the specified LIBSLEEF])\n+        if test -e ${with_libsleef}\/lib\/libsleef.so &&\n+           test -e ${with_libsleef}\/include\/sleef.h; then\n+          LIBSLEEF_FOUND=yes\n+          LIBVMATH_LIBS=\"-L${with_libsleef}\/lib\"\n+          LIBVMATH_CFLAGS=\"-I${with_libsleef}\/include\"\n+          AC_MSG_RESULT([yes])\n+        else\n+          AC_MSG_RESULT([no])\n+          AC_MSG_ERROR([Could not locate libsleef.so or sleef.h in ${with_libsleef}])\n+        fi\n@@ -52,1 +66,19 @@\n-        AC_MSG_ERROR([Could not locate libsleef.so or sleef.h in ${with_libsleef}])\n+        # Check for the libsleef under system locations\n+        # Do not try pkg-config if we have a sysroot set.\n+        if test \"x$SYSROOT\" = \"x\" &&\n+           test \"x${LIBSLEEF_FOUND}\" = \"xno\"; then\n+          PKG_CHECK_MODULES([LIBSLEEF], [sleef], [LIBSLEEF_FOUND=yes], [LIBSLEEF_FOUND=no])\n+        fi\n+        if test \"x${LIBSLEEF_FOUND}\" = \"xno\"; then\n+          AC_CHECK_HEADERS([sleef.h],\n+              [LIBSLEEF_FOUND=yes],\n+              []\n+          )\n+        fi\n+\n+        # Print error if user runs just with \"--with-libsleef\", but libsleef is not installed\n+        if test \"x${with_libsleef}\" = \"xyes\" &&\n+           test \"x${LIBSLEEF_FOUND}\" = \"xno\"; then\n+          HELP_MSG_MISSING_DEPENDENCY([sleef])\n+          AC_MSG_ERROR([Could not find libsleef! $HELP_MSG])\n+        fi\n@@ -54,2 +86,0 @@\n-      AC_MSG_RESULT([${LIBSLEEF_FOUND}])\n-    fi\n@@ -57,10 +87,3 @@\n-    # Check the system locations if libsleef is not specified with option\n-    if test \"x$SYSROOT\" = x && test \"x${LIBSLEEF_FOUND}\" = \"xno\"; then\n-      PKG_CHECK_MODULES([LIBSLEEF], [sleef], [LIBSLEEF_FOUND=yes], [LIBSLEEF_FOUND=no])\n-    fi\n-    if test \"x$LIBSLEEF_FOUND\" = xno; then\n-      AC_CHECK_HEADERS([sleef.h],\n-          [LIBSLEEF_FOUND=yes],\n-          []\n-      )\n-    fi\n+      if test \"x${LIBSLEEF_FOUND}\" = \"xyes\"; then\n+        ENABLE_LIBSLEEF=true\n+        LIBVMATH_LIBS=\"${LIBVMATH_LIBS} -lsleef\"\n@@ -68,2 +91,3 @@\n-    if test \"x${LIBSLEEF_FOUND}\" = \"xyes\"; then\n-      LIBVMATH_LIBS=\"${LIBVMATH_LIBS} -lsleef\"\n+        if test \"x${OPENJDK_TARGET_CPU}\" = \"xaarch64\"; then\n+          # Check the ARM SVE feature\n+          SVE_CFLAGS=\"-march=armv8-a+sve\"\n@@ -71,4 +95,3 @@\n-      if test \"x${OPENJDK_TARGET_CPU}\" = \"xaarch64\"; then\n-        # Check the ARM SVE feature\n-        SVE_FEATURE_SUPPORT=no\n-        SVE_CFLAGS=\"-march=armv8-a+sve\"\n+          AC_LANG_PUSH(C)\n+          OLD_CFLAGS=\"$CFLAGS\"\n+          CFLAGS=\"$CFLAGS $SVE_CFLAGS\"\n@@ -76,3 +99,12 @@\n-        AC_LANG_PUSH(C)\n-        OLD_CFLAGS=\"$CFLAGS\"\n-        CFLAGS=\"$CFLAGS $SVE_CFLAGS\"\n+          AC_MSG_CHECKING([if ARM SVE feature is supported])\n+          AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <arm_sve.h>],\n+              [\n+                svint32_t r = svdup_n_s32(1);\n+                return 0;\n+              ])],\n+              [\n+                AC_MSG_RESULT([yes])\n+                LIBVMATH_CFLAGS=\"${LIBVMATH_CFLAGS} ${SVE_CFLAGS}\"\n+              ],\n+              [ AC_MSG_RESULT([no]) ]\n+          )\n@@ -80,13 +112,3 @@\n-        AC_MSG_CHECKING([if ARM SVE feature is supported])\n-        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <arm_sve.h>],\n-            [\n-              svint32_t r = svdup_n_s32(1);\n-              return 0;\n-            ])],\n-            [\n-              SVE_FEATURE_SUPPORT=yes\n-              LIBVMATH_CFLAGS=\"${LIBVMATH_CFLAGS} ${SVE_CFLAGS}\"\n-            ],\n-            []\n-        )\n-        AC_MSG_RESULT([${SVE_FEATURE_SUPPORT}])\n+          CFLAGS=\"$OLD_CFLAGS\"\n+          AC_LANG_POP(C)\n+        fi\n@@ -94,2 +116,0 @@\n-        CFLAGS=\"$OLD_CFLAGS\"\n-        AC_LANG_POP(C)\n@@ -102,1 +122,1 @@\n-  AC_SUBST(LIBSLEEF_FOUND)\n+  AC_SUBST(ENABLE_LIBSLEEF)\n","filename":"make\/autoconf\/lib-vmath.m4","additions":69,"deletions":49,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -91,0 +91,8 @@\n+\n+  # Check if sleef is needed\n+  if test \"x$OPENJDK_TARGET_OS\" = xlinux && test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n+    NEEDS_LIB_SLEEF=true\n+  else\n+    # All other instances do not need sleef\n+    NEEDS_LIB_SLEEF=false\n+  fi\n","filename":"make\/autoconf\/libraries.m4","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -892,1 +892,1 @@\n-LIBSLEEF_FOUND:=@LIBSLEEF_FOUND@\n+ENABLE_LIBSLEEF:=@ENABLE_LIBSLEEF@\n","filename":"make\/autoconf\/spec.gmk.in","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-ifeq ($(call isTargetOs, linux)+$(call isTargetCpu, aarch64)+$(INCLUDE_COMPILER2)+$(LIBSLEEF_FOUND), true+true+true+yes)\n+ifeq ($(call isTargetOs, linux)+$(call isTargetCpu, aarch64)+$(INCLUDE_COMPILER2)+$(ENABLE_LIBSLEEF), true+true+true+true)\n","filename":"make\/modules\/jdk.incubator.vector\/Lib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}