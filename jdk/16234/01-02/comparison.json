{"files":[{"patch":"@@ -549,0 +549,14 @@\n+### libsleef\n+\n+libsleef, the [SIMD Library for Evaluating Elementary Functions](\n+https:\/\/sleef.org\/) is required when building libvmath.so on Linux+AArch64\n+platforms.\n+\n+  * To install on an apt-based Linux, try running `sudo apt-get install\n+    libsleef-dev`.\n+  * To install on an rpm-based Linux, try running `sudo yum install\n+    sleef-devel`.\n+\n+Use `--with-libsleef=<path>` if `configure` does not properly locate your libsleef\n+files.\n+\n","filename":"doc\/building.md","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+#\n+# Copyright (c) 2023, Arm Limited. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+###############################################################################\n+#\n+# Setup vmath framework and check its dependences\n+#\n+AC_DEFUN_ONCE([LIB_SETUP_VMATH],\n+[\n+  AC_ARG_WITH(libsleef, [AS_HELP_STRING([--with-libsleef],\n+      [specify prefix directory for the libsleef library\n+      (expecting the libraries under PATH\/lib and the headers under PATH\/include)])])\n+\n+  LIBSLEEF_FOUND=no\n+  LIBVMATH_CFLAGS=\n+  LIBVMATH_LIBS=\n+\n+  if test \"x${with_libsleef}\" = xno; then\n+    AC_MSG_NOTICE([libvmath will not be compiled, because its dependence libsleef is disabled in command line])\n+  else\n+    # Check the specified libsleef.so\n+    if test \"x${with_libsleef}\" != x; then\n+      AC_MSG_CHECKING([the specified LIBSLEEF])\n+      if test -e ${with_libsleef}\/lib\/libsleef.so &&\n+         test -e ${with_libsleef}\/include\/sleef.h; then\n+        LIBSLEEF_FOUND=yes\n+        LIBVMATH_LIBS=\"-L${with_libsleef}\/lib\"\n+        LIBVMATH_CFLAGS=\"-I${with_libsleef}\/include\"\n+      else\n+        AC_MSG_ERROR([Could not locate libsleef.so or sleef.h in ${with_libsleef}])\n+      fi\n+      AC_MSG_RESULT([${LIBSLEEF_FOUND}])\n+    fi\n+\n+    # Check the system locations if libsleef is not specified with option\n+    if test \"x$SYSROOT\" = x && test \"x${LIBSLEEF_FOUND}\" = \"xno\"; then\n+      PKG_CHECK_MODULES([LIBSLEEF], [sleef], [LIBSLEEF_FOUND=yes], [LIBSLEEF_FOUND=no])\n+    fi\n+    if test \"x$LIBSLEEF_FOUND\" = xno; then\n+      AC_CHECK_HEADERS([sleef.h],\n+          [LIBSLEEF_FOUND=yes],\n+          []\n+      )\n+    fi\n+\n+    if test \"x${LIBSLEEF_FOUND}\" = \"xyes\"; then\n+      LIBVMATH_LIBS=\"${LIBVMATH_LIBS} -lsleef\"\n+\n+      if test \"x${OPENJDK_TARGET_CPU}\" = \"xaarch64\"; then\n+        # Check the ARM SVE feature\n+        SVE_FEATURE_SUPPORT=no\n+        SVE_CFLAGS=\"-march=armv8-a+sve\"\n+\n+        AC_LANG_PUSH(C)\n+        OLD_CFLAGS=\"$CFLAGS\"\n+        CFLAGS=\"$CFLAGS $SVE_CFLAGS\"\n+\n+        AC_MSG_CHECKING([if ARM SVE feature is supported])\n+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <arm_sve.h>],\n+            [\n+              svint32_t r = svdup_n_s32(1);\n+              return 0;\n+            ])],\n+            [\n+              SVE_FEATURE_SUPPORT=yes\n+              LIBVMATH_CFLAGS=\"${LIBVMATH_CFLAGS} ${SVE_CFLAGS}\"\n+            ],\n+            []\n+        )\n+        AC_MSG_RESULT([${SVE_FEATURE_SUPPORT}])\n+\n+        CFLAGS=\"$OLD_CFLAGS\"\n+        AC_LANG_POP(C)\n+      fi\n+\n+    fi\n+\n+  fi\n+\n+  AC_SUBST(LIBSLEEF_FOUND)\n+  AC_SUBST(LIBVMATH_CFLAGS)\n+  AC_SUBST(LIBVMATH_LIBS)\n+])\n","filename":"make\/autoconf\/lib-vmath.m4","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -35,0 +35,1 @@\n+m4_include([lib-vmath.m4])\n@@ -128,0 +129,1 @@\n+  LIB_SETUP_VMATH\n","filename":"make\/autoconf\/libraries.m4","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -892,0 +892,3 @@\n+LIBSLEEF_FOUND:=@LIBSLEEF_FOUND@\n+LIBVMATH_CFLAGS:=@LIBVMATH_CFLAGS@\n+LIBVMATH_LIBS:=@LIBVMATH_LIBS@\n","filename":"make\/autoconf\/spec.gmk.in","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,12 @@\n+ifeq ($(call isTargetOs, linux)+$(call isTargetCpu, aarch64)+$(INCLUDE_COMPILER2)+$(LIBSLEEF_FOUND), true+true+true+yes)\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBVMATH, \\\n+      NAME := vmath, \\\n+      CFLAGS := $(CFLAGS_JDKLIB) $(LIBVMATH_CFLAGS) -fvisibility=default, \\\n+      LDFLAGS := $(LDFLAGS_JDKLIB) \\\n+          $(call SET_SHARED_LIBRARY_ORIGIN), \\\n+      LIBS := $(JDKLIB_LIBS) $(LIBVMATH_LIBS) \\\n+  ))\n+\n+  TARGETS += $(BUILD_LIBVMATH)\n+endif\n+\n","filename":"make\/modules\/jdk.incubator.vector\/Lib.gmk","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -130,2 +130,0 @@\n-  product(ccstr, UseSleefLib, \"\", EXPERIMENTAL,                         \\\n-          \"Sleef library to use for the vector math operations\")        \\\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -49,1 +50,0 @@\n-#include \"runtime\/globals_extension.hpp\"\n@@ -8512,1 +8512,2 @@\n-    \/\/ Get sleef stub routine addresses\n+    \/\/ Get native vector math stub routine addresses\n+    void* libvmath = nullptr;\n@@ -8514,4 +8515,7 @@\n-    void* libsleef = os::dll_load(UseSleefLib, ebuf, sizeof ebuf);\n-    if (libsleef != nullptr) {\n-      \/\/ SLEEF method naming convention\n-      \/\/   All the methods are named as Sleef_<OP><T><N>_<U><suffix>\n+    char dll_name[JVM_MAXPATHLEN];\n+    if (os::dll_locate_lib(dll_name, sizeof(dll_name), Arguments::get_dll_dir(), \"vmath\")) {\n+      libvmath = os::dll_load(dll_name, ebuf, sizeof ebuf);\n+    }\n+    if (libvmath != nullptr) {\n+      \/\/ Method naming convention\n+      \/\/   All the methods are named as <OP><T><N>_<U><suffix>\n@@ -8527,1 +8531,1 @@\n-      \/\/               But for those functions do not have u10 support in SLEEF, we use \"u05\" instead\n+      \/\/               But for those functions do not have u10 support, we use \"u05\" instead\n@@ -8530,2 +8534,2 @@\n-      \/\/     e.g. Sleef_sinfx_u10sve is the method for computing vector float sin using SVE instructions\n-      \/\/          Sleef_cosd2_u10advsimd is the method for computing 2 elements vector double cos using NEON instructions\n+      \/\/     e.g. sinfx_u10sve is the method for computing vector float sin using SVE instructions\n+      \/\/          cosd2_u10advsimd is the method for computing 2 elements vector double cos using NEON instructions\n@@ -8533,1 +8537,1 @@\n-      log_info(library)(\"Loaded library %s, handle \" INTPTR_FORMAT, JNI_LIB_PREFIX \"sleef\" JNI_LIB_SUFFIX, p2i(libsleef));\n+      log_info(library)(\"Loaded library %s, handle \" INTPTR_FORMAT, JNI_LIB_PREFIX \"vmath\" JNI_LIB_SUFFIX, p2i(libvmath));\n@@ -8539,4 +8543,0 @@\n-          \/\/ Skip \"tanh\", because there is performance regression\n-          if (vop == VectorSupport::VECTOR_OP_TANH) {\n-            continue;\n-          }\n@@ -8544,1 +8544,1 @@\n-          \/\/ SLEEF does not support u10 level of \"hypot\" yet.\n+          \/\/ The native library does not support u10 level of \"hypot\".\n@@ -8547,2 +8547,2 @@\n-          snprintf(ebuf, sizeof(ebuf), \"Sleef_%sfx_%ssve\", VectorSupport::mathname[op], ulf);\n-          StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_SCALABLE][op] = (address)os::dll_lookup(libsleef, ebuf);\n+          snprintf(ebuf, sizeof(ebuf), \"%sfx_%ssve\", VectorSupport::mathname[op], ulf);\n+          StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_SCALABLE][op] = (address)os::dll_lookup(libvmath, ebuf);\n@@ -8550,2 +8550,2 @@\n-          snprintf(ebuf, sizeof(ebuf), \"Sleef_%sdx_%ssve\", VectorSupport::mathname[op], ulf);\n-          StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_SCALABLE][op] = (address)os::dll_lookup(libsleef, ebuf);\n+          snprintf(ebuf, sizeof(ebuf), \"%sdx_%ssve\", VectorSupport::mathname[op], ulf);\n+          StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_SCALABLE][op] = (address)os::dll_lookup(libvmath, ebuf);\n@@ -8559,1 +8559,1 @@\n-        \/\/ SLEEF does not support u10 level of \"hypot\" yet.\n+        \/\/ The native library does not support u10 level of \"hypot\".\n@@ -8562,2 +8562,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"Sleef_%sf4_%sadvsimd\", VectorSupport::mathname[op], ulf);\n-        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_64][op] = (address)os::dll_lookup(libsleef, ebuf);\n+        snprintf(ebuf, sizeof(ebuf), \"%sf4_%sadvsimd\", VectorSupport::mathname[op], ulf);\n+        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_64][op] = (address)os::dll_lookup(libvmath, ebuf);\n@@ -8565,2 +8565,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"Sleef_%sf4_%sadvsimd\", VectorSupport::mathname[op], ulf);\n-        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libsleef, ebuf);\n+        snprintf(ebuf, sizeof(ebuf), \"%sf4_%sadvsimd\", VectorSupport::mathname[op], ulf);\n+        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libvmath, ebuf);\n@@ -8568,2 +8568,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"Sleef_%sd2_%sadvsimd\", VectorSupport::mathname[op], ulf);\n-        StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libsleef, ebuf);\n+        snprintf(ebuf, sizeof(ebuf), \"%sd2_%sadvsimd\", VectorSupport::mathname[op], ulf);\n+        StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libvmath, ebuf);\n@@ -8572,5 +8572,1 @@\n-      if (FLAG_IS_DEFAULT(UseSleefLib)) {\n-        log_info(library)(\"Sleef is disabled!\");\n-      } else {\n-        warning(\"Fail to load sleef library: %s. Please check the path\/name!\", UseSleefLib);\n-      }\n+      log_info(library)(\"Failed to load native vector math library!\");\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":27,"deletions":31,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <sleef.h>\n+\n+#define DEFINE_VECTOR_MATH_UNARY(op, type, cpu) \\\n+type op##cpu(type input) {                      \\\n+  return Sleef_##op##cpu(input);                \\\n+}\n+\n+DEFINE_VECTOR_MATH_UNARY(tanf4_u10,   float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(tanhf4_u10,  float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(sinf4_u10,   float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(sinhf4_u10,  float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(cosf4_u10,   float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(coshf4_u10,  float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(asinf4_u10,  float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(acosf4_u10,  float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(atanf4_u10,  float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(cbrtf4_u10,  float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(logf4_u10,   float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(log10f4_u10, float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(log1pf4_u10, float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(expf4_u10,   float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(expm1f4_u10, float32x4_t, advsimd)\n+\n+DEFINE_VECTOR_MATH_UNARY(tand2_u10,   float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(tanhd2_u10,  float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(sind2_u10,   float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(sinhd2_u10,  float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(cosd2_u10,   float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(coshd2_u10,  float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(asind2_u10,  float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(acosd2_u10,  float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(atand2_u10,  float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(cbrtd2_u10,  float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(logd2_u10,   float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(log10d2_u10, float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(log1pd2_u10, float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(expd2_u10,   float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_UNARY(expm1d2_u10, float64x2_t, advsimd)\n+\n+#ifdef __ARM_FEATURE_SVE\n+DEFINE_VECTOR_MATH_UNARY(tanfx_u10,   svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(sinfx_u10,   svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(sinhfx_u10,  svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(cosfx_u10,   svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(coshfx_u10,  svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(asinfx_u10,  svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(acosfx_u10,  svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(atanfx_u10,  svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(cbrtfx_u10,  svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(logfx_u10,   svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(log10fx_u10, svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(log1pfx_u10, svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(expfx_u10,   svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(expm1fx_u10, svfloat32_t, sve)\n+\n+DEFINE_VECTOR_MATH_UNARY(tandx_u10,   svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(sindx_u10,   svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(sinhdx_u10,  svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(cosdx_u10,   svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(coshdx_u10,  svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(asindx_u10,  svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(acosdx_u10,  svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(atandx_u10,  svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(cbrtdx_u10,  svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(logdx_u10,   svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(log10dx_u10, svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(log1pdx_u10, svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(expdx_u10,   svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_UNARY(expm1dx_u10, svfloat64_t, sve)\n+#endif \/* __ARM_FEATURE_SVE *\/\n+\n+#undef DEFINE_VECTOR_MATH_UNARY\n+\n+#define DEFINE_VECTOR_MATH_BINARY(op, type, cpu) \\\n+type op##cpu(type input1, type input2) {         \\\n+  return Sleef_##op##cpu(input1, input2);        \\\n+}\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2f4_u10, float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_BINARY(powf4_u10,   float32x4_t, advsimd)\n+DEFINE_VECTOR_MATH_BINARY(hypotf4_u05, float32x4_t, advsimd)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2d2_u10, float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_BINARY(powd2_u10,   float64x2_t, advsimd)\n+DEFINE_VECTOR_MATH_BINARY(hypotd2_u05, float64x2_t, advsimd)\n+\n+#ifdef __ARM_FEATURE_SVE\n+DEFINE_VECTOR_MATH_BINARY(atan2fx_u10, svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_BINARY(powfx_u10,   svfloat32_t, sve)\n+DEFINE_VECTOR_MATH_BINARY(hypotfx_u05, svfloat32_t, sve)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2dx_u10, svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_BINARY(powdx_u10,   svfloat64_t, sve)\n+DEFINE_VECTOR_MATH_BINARY(hypotdx_u05, svfloat64_t, sve)\n+#endif \/* __ARM_FEATURE_SVE *\/\n+\n+#undef DEFINE_VECTOR_MATH_BINARY\n+\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libvmath\/vect_math.c","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}