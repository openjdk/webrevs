{"files":[{"patch":"@@ -844,3 +844,3 @@\n-ENABLE_LIBSLEEF:=@ENABLE_LIBSLEEF@\n-LIBSLEEF_CFLAGS:=@LIBSLEEF_CFLAGS@\n-LIBSLEEF_LIBS:=@LIBSLEEF_LIBS@\n+ENABLE_LIBSLEEF := @ENABLE_LIBSLEEF@\n+LIBSLEEF_CFLAGS := @LIBSLEEF_CFLAGS@\n+LIBSLEEF_LIBS := @LIBSLEEF_LIBS@\n@@ -861,1 +861,1 @@\n-SVE_CFLAGS:=@SVE_CFLAGS@\n+SVE_CFLAGS := @SVE_CFLAGS@\n","filename":"make\/autoconf\/spec.gmk.in","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-      CFLAGS := $(CFLAGS_JDKLIB) $(LIBSLEEF_CFLAGS) $(SVE_CFLAGS) -fvisibility=default, \\\n+      CFLAGS := $(CFLAGS_JDKLIB) $(LIBSLEEF_CFLAGS) -fvisibility=default, \\\n+      vect_math_sve.c_CFLAGS := $(SVE_CFLAGS), \\\n","filename":"make\/modules\/jdk.incubator.vector\/Lib.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,121 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Arm Limited. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <sleef.h>\n-\n-#define DEFINE_VECTOR_MATH_UNARY(op, type, cpu) \\\n-type op##cpu(type input) {                      \\\n-  return Sleef_##op##cpu(input);                \\\n-}\n-\n-DEFINE_VECTOR_MATH_UNARY(tanf4_u10,   float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(tanhf4_u10,  float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(sinf4_u10,   float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(sinhf4_u10,  float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(cosf4_u10,   float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(coshf4_u10,  float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(asinf4_u10,  float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(acosf4_u10,  float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(atanf4_u10,  float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(cbrtf4_u10,  float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(logf4_u10,   float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(log10f4_u10, float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(log1pf4_u10, float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(expf4_u10,   float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(expm1f4_u10, float32x4_t, advsimd)\n-\n-DEFINE_VECTOR_MATH_UNARY(tand2_u10,   float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(tanhd2_u10,  float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(sind2_u10,   float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(sinhd2_u10,  float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(cosd2_u10,   float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(coshd2_u10,  float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(asind2_u10,  float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(acosd2_u10,  float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(atand2_u10,  float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(cbrtd2_u10,  float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(logd2_u10,   float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(log10d2_u10, float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(log1pd2_u10, float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(expd2_u10,   float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_UNARY(expm1d2_u10, float64x2_t, advsimd)\n-\n-#ifdef __ARM_FEATURE_SVE\n-DEFINE_VECTOR_MATH_UNARY(tanfx_u10,   svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(sinfx_u10,   svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(sinhfx_u10,  svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(cosfx_u10,   svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(coshfx_u10,  svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(asinfx_u10,  svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(acosfx_u10,  svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(atanfx_u10,  svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(cbrtfx_u10,  svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(logfx_u10,   svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(log10fx_u10, svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(log1pfx_u10, svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(expfx_u10,   svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(expm1fx_u10, svfloat32_t, sve)\n-\n-DEFINE_VECTOR_MATH_UNARY(tandx_u10,   svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(sindx_u10,   svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(sinhdx_u10,  svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(cosdx_u10,   svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(coshdx_u10,  svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(asindx_u10,  svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(acosdx_u10,  svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(atandx_u10,  svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(cbrtdx_u10,  svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(logdx_u10,   svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(log10dx_u10, svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(log1pdx_u10, svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(expdx_u10,   svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_UNARY(expm1dx_u10, svfloat64_t, sve)\n-#endif \/* __ARM_FEATURE_SVE *\/\n-\n-#undef DEFINE_VECTOR_MATH_UNARY\n-\n-#define DEFINE_VECTOR_MATH_BINARY(op, type, cpu) \\\n-type op##cpu(type input1, type input2) {         \\\n-  return Sleef_##op##cpu(input1, input2);        \\\n-}\n-\n-DEFINE_VECTOR_MATH_BINARY(atan2f4_u10, float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_BINARY(powf4_u10,   float32x4_t, advsimd)\n-DEFINE_VECTOR_MATH_BINARY(hypotf4_u05, float32x4_t, advsimd)\n-\n-DEFINE_VECTOR_MATH_BINARY(atan2d2_u10, float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_BINARY(powd2_u10,   float64x2_t, advsimd)\n-DEFINE_VECTOR_MATH_BINARY(hypotd2_u05, float64x2_t, advsimd)\n-\n-#ifdef __ARM_FEATURE_SVE\n-DEFINE_VECTOR_MATH_BINARY(atan2fx_u10, svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_BINARY(powfx_u10,   svfloat32_t, sve)\n-DEFINE_VECTOR_MATH_BINARY(hypotfx_u05, svfloat32_t, sve)\n-\n-DEFINE_VECTOR_MATH_BINARY(atan2dx_u10, svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_BINARY(powdx_u10,   svfloat64_t, sve)\n-DEFINE_VECTOR_MATH_BINARY(hypotdx_u05, svfloat64_t, sve)\n-#endif \/* __ARM_FEATURE_SVE *\/\n-\n-#undef DEFINE_VECTOR_MATH_BINARY\n-\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libvmath\/vect_math.c","additions":0,"deletions":121,"binary":false,"changes":121,"status":"deleted"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <sleef.h>\n+\n+#define DEFINE_VECTOR_MATH_UNARY(op, type) \\\n+type op##advsimd(type input) {             \\\n+  return Sleef_##op##advsimd(input);       \\\n+}\n+\n+#define DEFINE_VECTOR_MATH_BINARY(op, type)   \\\n+type op##advsimd(type input1, type input2) {  \\\n+  return Sleef_##op##advsimd(input1, input2); \\\n+}\n+\n+DEFINE_VECTOR_MATH_UNARY(tanf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(tanhf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(sinf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(sinhf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(cosf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(coshf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(asinf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(acosf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(atanf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(cbrtf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(logf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(log10f4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(log1pf4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(expf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(expm1f4_u10, float32x4_t)\n+\n+DEFINE_VECTOR_MATH_UNARY(tand2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(tanhd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(sind2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(sinhd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(cosd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(coshd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(asind2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(acosd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(atand2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(cbrtd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(logd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(log10d2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(log1pd2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(expd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(expm1d2_u10, float64x2_t)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2f4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_BINARY(powf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_BINARY(hypotf4_u05, float32x4_t)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2d2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_BINARY(powd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_BINARY(hypotd2_u05, float64x2_t)\n+\n+#undef DEFINE_VECTOR_MATH_UNARY\n+\n+#undef DEFINE_VECTOR_MATH_BINARY\n+\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libvmath\/vect_math_neon.c","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <sleef.h>\n+\n+#define DEFINE_VECTOR_MATH_UNARY_SVE(op, type) \\\n+type op##sve(type input) {                     \\\n+  return Sleef_##op##sve(input);               \\\n+}\n+\n+#define DEFINE_VECTOR_MATH_BINARY_SVE(op, type) \\\n+type op##sve(type input1, type input2) {        \\\n+  return Sleef_##op##sve(input1, input2);       \\\n+}\n+\n+#ifdef __ARM_FEATURE_SVE\n+DEFINE_VECTOR_MATH_UNARY_SVE(tanfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinhfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cosfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(coshfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(asinfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(acosfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(atanfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cbrtfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(logfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log10fx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log1pfx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expm1fx_u10, svfloat32_t)\n+\n+DEFINE_VECTOR_MATH_UNARY_SVE(tandx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sindx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinhdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cosdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(coshdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(asindx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(acosdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(atandx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cbrtdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(logdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log10dx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log1pdx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expm1dx_u10, svfloat64_t)\n+\n+DEFINE_VECTOR_MATH_BINARY_SVE(atan2fx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(powfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(hypotfx_u05, svfloat32_t)\n+\n+DEFINE_VECTOR_MATH_BINARY_SVE(atan2dx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(powdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(hypotdx_u05, svfloat64_t)\n+#endif \/* __ARM_FEATURE_SVE *\/\n+\n+#undef DEFINE_VECTOR_MATH_UNARY_SVE\n+\n+#undef DEFINE_VECTOR_MATH_BINARY_SVE\n+\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libvmath\/vect_math_sve.c","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}