{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1612,0 +1612,7 @@\n+            \/\/ If scrollbar isn't visible, stop the timer\n+            if (!scrollbar.isShowing()) {\n+                ((Timer)e.getSource()).stop();\n+                buttonListener.handledEvent = false;\n+                scrollbar.setValueIsAdjusting(false);\n+                return;\n+            }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicScrollBarUI.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollBar;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.basic.BasicComboPopup;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 6672644\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires os.family != \"mac\"\n+ * @summary Tests JComboBox scrollbar behavior when alt-tabbing\n+ * @run main JComboBoxScrollFocusTest\n+ *\/\n+\n+public class JComboBoxScrollFocusTest {\n+    private static Robot robot;\n+    private static JFrame comboboxFrame;\n+    private static JComboBox<String> combobox;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(JComboBoxScrollFocusTest::createAndShowGUI);\n+            doTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(comboboxFrame::dispose);\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        comboboxFrame = new JFrame(\"JComboBoxScrollFocusTest Test Frame\");\n+        combobox = new JComboBox<>();\n+        for (int i = 0; i < 100; i++) {\n+            combobox.addItem(String.valueOf(i));\n+        }\n+        comboboxFrame.add(combobox);\n+        comboboxFrame.setSize(400, 200);\n+        comboboxFrame.setLocationRelativeTo(null);\n+        comboboxFrame.setVisible(true);\n+    }\n+\n+    static Rectangle getOnScreenBoundsOnEDT(Component component)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        robot.waitForIdle();\n+        FutureTask<Rectangle> task = new FutureTask<>(()\n+                -> new Rectangle(component.getLocationOnScreen(),\n+                component.getSize()));\n+        SwingUtilities.invokeLater(task);\n+        return task.get(500, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static int getScrollbarValue()\n+            throws InterruptedException, InvocationTargetException,\n+            ExecutionException, TimeoutException {\n+\n+        FutureTask<Integer> task = new FutureTask<>(() -> {\n+            BasicComboPopup popup = (BasicComboPopup) combobox.getAccessibleContext().getAccessibleChild(0);\n+            JScrollPane scrollPane = (JScrollPane) popup.getAccessibleContext().getAccessibleChild(0);\n+            JScrollBar scrollBar = scrollPane.getVerticalScrollBar();\n+            return scrollBar.getValue();\n+        });\n+        SwingUtilities.invokeAndWait(task);\n+\n+        return task.get(500, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static void doTest() throws Exception {\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Rectangle rectangle = getOnScreenBoundsOnEDT(combobox);\n+\n+        Point ptOpenComboboxPopup = new Point(rectangle.x + rectangle.width - 5,\n+                rectangle.y + rectangle.height \/ 2);\n+\n+        robot.mouseMove(ptOpenComboboxPopup.x, ptOpenComboboxPopup.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+\n+        BasicComboPopup popup = (BasicComboPopup) combobox.getAccessibleContext().getAccessibleChild(0);\n+        JScrollBar scrollBar = ((JScrollPane) popup.getAccessibleContext().getAccessibleChild(0)).getVerticalScrollBar();\n+\n+        \/\/ Start scrolling\n+        Rectangle scrollbarBounds = getOnScreenBoundsOnEDT(scrollBar);\n+        robot.mouseMove(scrollbarBounds.x + scrollbarBounds.width \/ 2,\n+                scrollbarBounds.y + scrollbarBounds.height - 5);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.delay(1000);\n+\n+        if (getScrollbarValue() == 0) {\n+            throw new RuntimeException(\"The scrollbar is not scrolling\");\n+        }\n+\n+        \/\/ closing popup by moving focus to the main window\n+        comboboxFrame.requestFocus();\n+        robot.waitForIdle();\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        \/\/ open popup again\n+        robot.mouseMove(ptOpenComboboxPopup.x, ptOpenComboboxPopup.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        if (getScrollbarValue() != 0) {\n+            throw new RuntimeException(\"The scroll bar is scrolling\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/JComboBoxScrollFocusTest.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"}]}