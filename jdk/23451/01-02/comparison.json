{"files":[{"patch":"@@ -48,1 +48,0 @@\n-import javax.swing.FocusManager;\n@@ -1613,0 +1612,7 @@\n+            \/\/ If scrollbar isn't visible, stop the timer\n+            if (!scrollbar.isShowing()) {\n+                ((Timer)e.getSource()).stop();\n+                buttonListener.handledEvent = false;\n+                scrollbar.setValueIsAdjusting(false);\n+                return;\n+            }\n@@ -1617,1 +1623,0 @@\n-            Component focusOwner = FocusManager.getCurrentManager().getFocusOwner();\n@@ -1619,7 +1624,0 @@\n-                \/\/ If application isn't in focus, stop the timer\n-                if (focusOwner == null) {\n-                    ((Timer)e.getSource()).stop();\n-                    buttonListener.handledEvent = false;\n-                    scrollbar.setValueIsAdjusting(false);\n-                    return;\n-                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicScrollBarUI.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,11 @@\n+import java.awt.Component;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n@@ -26,0 +37,4 @@\n+import javax.swing.JScrollBar;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.basic.BasicComboPopup;\n@@ -29,0 +44,1 @@\n+ * @key headful\n@@ -34,1 +50,1 @@\n- * @run main\/manual JComboBoxScrollFocusTest\n+ * @run main JComboBoxScrollFocusTest\n@@ -38,13 +54,3 @@\n-    private static final String INSTRUCTIONS =\n-            \"\"\"\n-             Click on the dropdown button for the JComboBox in the test frame.\n-             Then, press and hold the left click button on the down arrow button\n-             in the popup list. While holding the left click button, the list\n-             should be scrolling down. Press ALT + TAB while holding down the\n-             left click to switch focus to a different window. Then release the\n-             left click button. Focus the test frame again and click the\n-             dropdown button for the JComboBox again. The list should be\n-             stationary and not be automatically scrolling.\n-             If you are able to execute all steps successfully then the test\n-             passes, otherwise it fails.\n-            \"\"\";\n+    private static Robot robot;\n+    private static JFrame comboboxFrame;\n+    private static JComboBox<String> combobox;\n@@ -53,8 +59,7 @@\n-        PassFailJFrame\n-                .builder()\n-                .title(\"JComboBoxScrollFocusTest Test Instructions\")\n-                .instructions(INSTRUCTIONS)\n-                .columns(40)\n-                .testUI(JComboBoxScrollFocusTest::createAndShowGUI)\n-                .build()\n-                .awaitAndCheck();\n+        robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(JComboBoxScrollFocusTest::createAndShowGUI);\n+            doTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(comboboxFrame::dispose);\n+        }\n@@ -63,4 +68,4 @@\n-    private static JFrame createAndShowGUI() {\n-        JFrame frame = new JFrame(\"JComboBoxScrollFocusTest Test Frame\");\n-        JComboBox<String> combobox = new JComboBox<>();\n-        for (int i = 0; i < 1000; i++) {\n+    private static void createAndShowGUI() {\n+        comboboxFrame = new JFrame(\"JComboBoxScrollFocusTest Test Frame\");\n+        combobox = new JComboBox<>();\n+        for (int i = 0; i < 100; i++) {\n@@ -69,4 +74,80 @@\n-        frame.add(combobox);\n-        frame.setSize(400, 200);\n-        frame.setLocationRelativeTo(null);\n-        return frame;\n+        comboboxFrame.add(combobox);\n+        comboboxFrame.setSize(400, 200);\n+        comboboxFrame.setLocationRelativeTo(null);\n+        comboboxFrame.setVisible(true);\n+    }\n+\n+    static Rectangle getOnScreenBoundsOnEDT(Component component)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        robot.waitForIdle();\n+        FutureTask<Rectangle> task = new FutureTask<>(()\n+                -> new Rectangle(component.getLocationOnScreen(),\n+                component.getSize()));\n+        SwingUtilities.invokeLater(task);\n+        return task.get(500, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static int getScrollbarValue()\n+            throws InterruptedException, InvocationTargetException,\n+            ExecutionException, TimeoutException {\n+\n+        FutureTask<Integer> task = new FutureTask<>(() -> {\n+            BasicComboPopup popup = (BasicComboPopup) combobox.getAccessibleContext().getAccessibleChild(0);\n+            JScrollPane scrollPane = (JScrollPane) popup.getAccessibleContext().getAccessibleChild(0);\n+            JScrollBar scrollBar = scrollPane.getVerticalScrollBar();\n+            return scrollBar.getValue();\n+        });\n+        SwingUtilities.invokeAndWait(task);\n+\n+        return task.get(500, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static void doTest() throws Exception {\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Rectangle rectangle = getOnScreenBoundsOnEDT(combobox);\n+\n+        Point ptOpenComboboxPopup = new Point(rectangle.x + rectangle.width - 5,\n+                rectangle.y + rectangle.height \/ 2);\n+\n+        robot.mouseMove(ptOpenComboboxPopup.x, ptOpenComboboxPopup.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+\n+        BasicComboPopup popup = (BasicComboPopup) combobox.getAccessibleContext().getAccessibleChild(0);\n+        JScrollBar scrollBar = ((JScrollPane) popup.getAccessibleContext().getAccessibleChild(0)).getVerticalScrollBar();\n+\n+        \/\/ Start scrolling\n+        Rectangle scrollbarBounds = getOnScreenBoundsOnEDT(scrollBar);\n+        robot.mouseMove(scrollbarBounds.x + scrollbarBounds.width \/ 2,\n+                scrollbarBounds.y + scrollbarBounds.height - 5);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.delay(1000);\n+\n+        if (getScrollbarValue() == 0) {\n+            throw new RuntimeException(\"The scrollbar is not scrolling\");\n+        }\n+\n+        \/\/ closing popup by moving focus to the main window\n+        comboboxFrame.requestFocus();\n+        robot.waitForIdle();\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        \/\/ open popup again\n+        robot.mouseMove(ptOpenComboboxPopup.x, ptOpenComboboxPopup.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        if (getScrollbarValue() != 0) {\n+            throw new RuntimeException(\"The scroll bar is scrolling\");\n+        }\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/JComboBoxScrollFocusTest.java","additions":112,"deletions":31,"binary":false,"changes":143,"status":"modified"}]}