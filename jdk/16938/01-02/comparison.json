{"files":[{"patch":"@@ -1365,2 +1365,1 @@\n-                                                                            \\\n-  product(ccstr, RssLimit, nullptr, DIAGNOSTIC,                             \\\n+  product(size_t, RssLimit, 0, DIAGNOSTIC,                                  \\\n@@ -1369,9 +1368,14 @@\n-          \"generate a fatal error. The limit can be either given as a \"     \\\n-          \"memory size (e.g. \\\"2G\\\") or as a percentage of \"                \\\n-          \"the total available memory on this machine or in this \"          \\\n-          \"container (e.g. \\\"-XX:RssLimit=80%%\\\").\")                        \\\n-                                                                            \\\n-  product(uint, RssLimitCheckInterval, 5000, DIAGNOSTIC,                    \\\n-          \"If RssLimit is set, interval, in ms, at which the JVM will \"     \\\n-          \"check the process resident set size.\"                            \\\n-          range(10, INT_MAX))                                               \\\n+          \"generate a fatal error. A value of 0 (default) disables the \"    \\\n+          \"limit.\")                                                         \\\n+          range(0, SIZE_MAX)                                                \\\n+                                                                            \\\n+  product(uint, RssLimitPercent, 0, DIAGNOSTIC,                             \\\n+          \"Limit to Resident Set Size, given as percent of the total \"      \\\n+          \"physical memory of the machine or the memory limit of the \"      \\\n+          \"container. A value of 0 (default) disables the limit.\")          \\\n+          range(0, 100)                                                     \\\n+                                                                            \\\n+  product(uint, RssLimitCheckInterval, 1000, DIAGNOSTIC,                    \\\n+          \"If RssLimit or RssLimitPercent are set, interval, in ms, at \"    \\\n+          \"which the JVM will check the process resident set size.\")        \\\n+          range(10, INT_MAX)                                                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -773,3 +773,1 @@\n-  if (RssLimit != nullptr) {\n-    RssWatcher::initialize(RssLimit);\n-  }\n+  RssWatcher::initialize();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -37,5 +38,9 @@\n-static void check_rss(size_t limit) {\n-  const size_t rss = os::get_RSS();\n-  log_trace(os, rss)(\"Rss=%zu\", rss);\n-  if (rss >= limit) {\n-    fatal(\"Resident Set Size (%zu bytes) reached RssLimit (%zu bytes).\", rss, limit);\n+class RssLimitTask : public PeriodicTask {\n+protected:\n+  RssLimitTask() : PeriodicTask(RssLimitCheckInterval) {}\n+  void check_rss(size_t limit) {\n+    const size_t rss = os::get_RSS();\n+    log_trace(os, rss)(\"Rss=%zu\", rss);\n+    if (rss >= limit) {\n+      fatal(\"Resident Set Size (%zu bytes) reached RssLimit (%zu bytes).\", rss, limit);\n+    }\n@@ -43,1 +48,1 @@\n-}\n+};\n@@ -45,1 +50,1 @@\n-class RssAbsoluteLimitTask : public PeriodicTask {\n+class RssAbsoluteLimitTask : public RssLimitTask {\n@@ -48,2 +53,2 @@\n-  RssAbsoluteLimitTask(size_t limit, unsigned interval_ms) :\n-    PeriodicTask(interval_ms), _limit(limit) {\n+  RssAbsoluteLimitTask(size_t limit) :\n+    _limit(limit) {\n@@ -58,2 +63,2 @@\n-class RssRelativeLimitTask : public PeriodicTask {\n-  const double _percent;\n+class RssRelativeLimitTask : public RssLimitTask {\n+  const unsigned _percent;\n@@ -67,1 +72,1 @@\n-      log_info(os, rss)(\"Setting RssWatcher limit to %zu bytes (%.2f%% of total memory of %zu bytes)\",\n+      log_info(os, rss)(\"Setting RssWatcher limit to %zu bytes (%u%% of total memory of %zu bytes)\",\n@@ -74,2 +79,2 @@\n-  RssRelativeLimitTask(double limit_percent, unsigned interval_ms) :\n-    PeriodicTask(interval_ms), _percent(limit_percent), _limit(0) {\n+  RssRelativeLimitTask(unsigned percent) :\n+    _percent(percent), _limit(0) {\n@@ -77,1 +82,1 @@\n-                      \"limit=%.2f%% of total memory\", interval(), _percent);\n+                      \"limit=%u%% of total memory\", interval(), _percent);\n@@ -86,17 +91,1 @@\n-static bool parse_percentage(const char* s, const char** tail, double* percentage) {\n-  double v = 0;\n-  char sign;\n-  int chars_read = 0;\n-  if (sscanf(s, \"%lf%c%n\", &v, &sign, &chars_read) >= 2 && sign == '%') {\n-    if (v > 100.0 || v == 0.0) {\n-      vm_exit_during_initialization(\"Failed to parse RssLimit\", \"Not a valid percentage\");\n-    }\n-    *percentage = v;\n-    *tail = s + chars_read;\n-    return true;\n-  }\n-  return false;\n-}\n-\n-void RssWatcher::initialize(const char* limit_option) {\n-  assert(limit_option != nullptr, \"Invalid argument\");\n+void RssWatcher::initialize() {\n@@ -104,4 +93,3 @@\n-  bool is_absolute = true;\n-  size_t limit = 0;\n-  double percentage = 0;\n-  const char* s = limit_option;\n+  if (RssLimit == 0 && RssLimitPercent == 0) {\n+    return;\n+  }\n@@ -109,6 +97,2 @@\n-  if (parse_percentage(s, &s, &percentage)) {\n-    is_absolute = false;\n-  } else {\n-    if (!parse_integer(s, (char**)&s, &limit) || (limit == 0)) {\n-      vm_exit_during_initialization(\"Failed to parse RssLimit\", \"Not a valid limit size\");\n-    }\n+  if (RssLimit > 0 && RssLimitPercent > 0) {\n+    vm_exit_during_initialization(\"Please specify either RssLimit or RssLimitPercent, but not both\");\n@@ -122,1 +106,1 @@\n-  \/\/ PeriodicTask has some limitations:\n+  \/\/ Sanity-check the interval given. We use PeriodicTask, and that has some limitations:\n@@ -133,3 +117,5 @@\n-  PeriodicTask* const task = (is_absolute) ?\n-       (PeriodicTask*) new RssAbsoluteLimitTask(limit, interval) :\n-       (PeriodicTask*) new RssRelativeLimitTask(percentage, interval);\n+\n+  RssLimitTask* const task = (RssLimit > 0) ?\n+       (RssLimitTask*)new RssAbsoluteLimitTask(RssLimit) :\n+       (RssLimitTask*)new RssRelativeLimitTask(RssLimitPercent);\n+\n","filename":"src\/hotspot\/share\/services\/rsswatch.cpp","additions":32,"deletions":46,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +38,1 @@\n-  static void initialize(const char* limit_option);\n+  static void initialize();\n","filename":"src\/hotspot\/share\/services\/rsswatch.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * @summary Verify -XX:RssLimit with an absolute limit\n+ * @summary Verify -XX:RssLimit with a high interval\n@@ -58,1 +58,1 @@\n- * @summary Verify -XX:RssLimit with an absolute limit\n+ * @summary Verify -XX:RssLimit default interval\n@@ -66,0 +66,10 @@\n+\/*\n+ * @test id=test-default-off\n+ * @summary Verify -XX:RssLimit is off by default\n+ * @requires vm.flagless\n+ * @requires os.family != \"aix\"\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run driver RssLimitTest test-default-off\n+ *\/\n+\n@@ -104,1 +114,0 @@\n-        String limitPercent = \"0\" + dot + \"01%\";\n@@ -106,1 +115,1 @@\n-                \"-XX:RssLimit=\" + limitPercent, \"-XX:RssLimitCheckInterval=100\",\n+                \"-XX:RssLimitPercent=1\", \"-XX:RssLimitCheckInterval=100\",\n@@ -108,2 +117,2 @@\n-        o.shouldContain(\"RssWatcher task: interval=100ms, limit=\" + limitPercent + \" of total memory\");\n-        String pat = \"Setting RssWatcher limit to (\\\\d+) bytes \\\\(0.01% of total memory of \\\\d+ bytes\\\\)\";\n+        o.shouldContain(\"RssWatcher task: interval=100ms, limit=1% of total memory\");\n+        String pat = \"Setting RssWatcher limit to (\\\\d+) bytes \\\\(1% of total memory of \\\\d+ bytes\\\\)\";\n@@ -123,1 +132,1 @@\n-                \"-Xmx100m\", \"-Xms100m\", \"-XX:+AlwaysPreTouch\");\n+                \"-Xmx100m\");\n@@ -131,3 +140,10 @@\n-                \"-XX:RssLimit=99%\",\n-                \"-Xmx100m\", \"-Xms100m\", \"-XX:+AlwaysPreTouch\");\n-        o.shouldContain(\"RssWatcher task: interval=5000ms, limit=99.00% of total memory\");\n+                \"-XX:RssLimitPercent=99\",\n+                \"-Xmx100m\");\n+        o.shouldContain(\"RssWatcher task: interval=1000ms, limit=99% of total memory\");\n+        o.shouldNotContain(\"Error\");\n+        o.shouldHaveExitValue(0);\n+    }\n+\n+    private static void testDefaultOff() throws IOException {\n+        OutputAnalyzer o = runWithSettings(\"-Xmx100m\");\n+        o.shouldNotContain(\"RssWatcher\");\n@@ -155,0 +171,3 @@\n+            case \"test-default-off\":\n+                testDefaultOff();\n+                break;\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/RssLimitTest.java","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"}]}