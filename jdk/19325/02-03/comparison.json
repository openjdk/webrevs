{"files":[{"patch":"@@ -1883,0 +1883,1 @@\n+  INSN(vrol_vx,    0b1010111, 0b100, 0b010101);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3092,1 +3092,14 @@\n-    __ vror_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), as_VectorRegister($shift$$reg));\n+    __ vror_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vrotate_right_reg(vReg dst, vReg src, iRegIorL2I shift) %{\n+  match(Set dst (RotateRightV src (Replicate shift)));\n+  format %{ \"vrotate_right_reg $dst, $src, $shift\\t\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vror_vx(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_Register($shift$$reg));\n@@ -3123,1 +3136,14 @@\n-                                 as_VectorRegister($shift$$reg), Assembler::v0_t);\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vrotate_right_reg_masked(vReg dst_src, iRegIorL2I shift, vRegMask_V0 v0) %{\n+  match(Set dst_src (RotateRightV (Binary dst_src (Replicate shift)) v0));\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vrotate_right_reg_masked $dst_src, $dst_src, $shift, v0.t\\t\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vror_vx(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_Register($shift$$reg), Assembler::v0_t);\n@@ -3140,1 +3166,2 @@\n-    __ vror_vi(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg), con, Assembler::v0_t);\n+    __ vror_vi(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               con, Assembler::v0_t);\n@@ -3153,1 +3180,14 @@\n-    __ vrol_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), as_VectorRegister($shift$$reg));\n+    __ vrol_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vrotate_left_reg(vReg dst, vReg src, iRegIorL2I shift) %{\n+  match(Set dst (RotateLeftV src (Replicate shift)));\n+  format %{ \"vrotate_left_reg $dst, $src, $shift\\t\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vrol_vx(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_Register($shift$$reg));\n@@ -3190,0 +3230,13 @@\n+instruct vrotate_left_reg_masked(vReg dst_src, iRegIorL2I shift, vRegMask_V0 v0) %{\n+  match(Set dst_src (RotateLeftV (Binary dst_src (Replicate shift)) v0));\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vrotate_left_reg_masked $dst_src, $dst_src, $shift, v0.t\\t\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vrol_vx(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_Register($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -3203,1 +3256,2 @@\n-    __ vror_vi(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg), con, Assembler::v0_t);\n+    __ vror_vi(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               con, Assembler::v0_t);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":59,"deletions":5,"binary":false,"changes":64,"status":"modified"}]}