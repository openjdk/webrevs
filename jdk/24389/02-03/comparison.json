{"files":[{"patch":"@@ -28,1 +28,1 @@\n-void ICacheStubGenerator::generate_icache_flush(const char* name,\n+void ICacheStubGenerator::generate_icache_flush(\n","filename":"src\/hotspot\/cpu\/aarch64\/icache_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-void ICacheStubGenerator::generate_icache_flush(const char* name, ICache::flush_icache_stub_t* flush_icache_stub) {\n+void ICacheStubGenerator::generate_icache_flush(ICache::flush_icache_stub_t* flush_icache_stub) {\n","filename":"src\/hotspot\/cpu\/arm\/icache_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-void ICacheStubGenerator::generate_icache_flush(const char* name, ICache::flush_icache_stub_t* flush_icache_stub) {\n+void ICacheStubGenerator::generate_icache_flush(ICache::flush_icache_stub_t* flush_icache_stub) {\n","filename":"src\/hotspot\/cpu\/ppc\/icache_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-void ICacheStubGenerator::generate_icache_flush(const char* name, ICache::flush_icache_stub_t* flush_icache_stub) {\n+void ICacheStubGenerator::generate_icache_flush(ICache::flush_icache_stub_t* flush_icache_stub) {\n","filename":"src\/hotspot\/cpu\/riscv\/icache_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-void ICacheStubGenerator::generate_icache_flush(const char* name, ICache::flush_icache_stub_t* flush_icache_stub) {\n+void ICacheStubGenerator::generate_icache_flush(ICache::flush_icache_stub_t* flush_icache_stub) {\n","filename":"src\/hotspot\/cpu\/s390\/icache_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"runtime\/flags\/flagSetting.hpp\"\n+#include \"runtime\/globals_extension.hpp\"\n@@ -77,2 +79,2 @@\n-void ICacheStubGenerator::generate_icache_flush(const char* name, ICache::flush_icache_stub_t* flush_icache_stub) {\n-  StubCodeMark mark(this, \"ICache\", name);\n+void ICacheStubGenerator::generate_icache_flush(ICache::flush_icache_stub_t* flush_icache_stub) {\n+  StubCodeMark mark(this, \"ICache\", _stub_name);\n@@ -112,0 +114,18 @@\n+void ICache::initialize(int phase) {\n+  switch (phase) {\n+    case 1: {\n+      \/\/ Initial phase, we assume only CLFLUSH is available.\n+      IntFlagSetting fs(X86ICacheSync, 1);\n+      AbstractICache::initialize(phase);\n+      break;\n+    }\n+    case 2: {\n+      \/\/ Final phase, generate the stub again.\n+      AbstractICache::initialize(phase);\n+      break;\n+    }\n+    default:\n+      ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/icache_x86.cpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#ifdef AMD64\n@@ -50,8 +49,1 @@\n-  \/\/ Use default implementation\n-#else\n-  enum {\n-    stub_size      = 16,                 \/\/ Size of the icache flush stub in bytes\n-    line_size      = BytesPerWord,      \/\/ conservative\n-    log2_line_size = LogBytesPerWord    \/\/ log2(line_size)\n-  };\n-#endif \/\/ AMD64\n+  static void initialize(int phase);\n","filename":"src\/hotspot\/cpu\/x86\/icache_x86.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n-    const char* name,\n-    ICache::flush_icache_stub_t* flush_icache_stub) {\n+  ICache::flush_icache_stub_t* flush_icache_stub) {\n","filename":"src\/hotspot\/cpu\/zero\/icache_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-#include \"runtime\/flags\/flagSetting.hpp\"\n-#include \"runtime\/globals_extension.hpp\"\n@@ -58,2 +56,2 @@\n-  ICacheStubGenerator g(&c);\n-  g.generate_icache_flush(stub_name, &_flush_icache_stub);\n+  ICacheStubGenerator g(stub_name, &c);\n+  g.generate_icache_flush(&_flush_icache_stub);\n@@ -124,5 +122,0 @@\n-  \/\/ Initial stub that runs with most basic mechanism, until optimized\n-  \/\/ final stub is generated.\n-#if defined(X86) && !defined(ZERO)\n-  IntFlagSetting fs(X86ICacheSync, 1);\n-#endif\n@@ -133,2 +126,0 @@\n-  \/\/ Final stub that uses the optimized flush mechanism. Happens after\n-  \/\/ CPU feature detection determines which mechanism is usable.\n","filename":"src\/hotspot\/share\/runtime\/icache.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -63,0 +63,6 @@\n+  \/\/ Initialization phases:\n+  \/\/  1 = Initial phase, nothing is known about the machine features.\n+  \/\/      The stub generated at this phase must use the most basic mechanism,\n+  \/\/      until optimized final stub is generated.\n+  \/\/  2 = Final stub that uses the optimized flush mechanism. Happens after\n+  \/\/      CPU feature detection determines which mechanism is usable.\n@@ -75,0 +81,3 @@\n+ private:\n+   const char* _stub_name;\n+\n@@ -76,1 +85,1 @@\n-  ICacheStubGenerator(CodeBuffer *c) : StubCodeGenerator(c) {}\n+  ICacheStubGenerator(const char* stub_name, CodeBuffer *c) : StubCodeGenerator(c), _stub_name(stub_name) {}\n@@ -120,1 +129,1 @@\n-  void generate_icache_flush(const char* name, ICache::flush_icache_stub_t* flush_icache_stub);\n+  void generate_icache_flush(ICache::flush_icache_stub_t* flush_icache_stub);\n","filename":"src\/hotspot\/share\/runtime\/icache.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}