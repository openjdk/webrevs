{"files":[{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8331033\n+ * @summary EA fails with \"EA unexpected CallLeaf unsafe_setmemory\" after JDK-8329331\n+ *\n+ * @run main\/othervm -XX:+PrintEscapeAnalysis -Xbatch -XX:-TieredCompilation  Test8331033\n+ *\n+ *\/\n+import java.lang.foreign.*;\n+\n+class MyClass {\n+  public int field1;\n+  public int field2;\n+  public int field3;\n+  public int field4;\n+\n+  public MyClass(int field1, int field2, int field3, int field4) {\n+    this.field1 = field1;\n+    this.field2 = field2;\n+    this.field3 = field3;\n+    this.field4 = field4;\n+  }\n+}\n+\n+\/*\n+ * Escape Analysis:\n+ * \/\/ Adaptation for C2 of the escape analysis algorithm described in:\n+ * \/\/\n+ * \/\/ [Choi99] Jong-Deok Shoi, Manish Gupta, Mauricio Seffano,\n+ * \/\/ Vugranam C. Sreedhar, Sam Midkiff,\n+ * \/\/ \"Escape Analysis for Java\", Proceedings of ACM SIGPLAN\n+ * \/\/ OOPSLA Conference, November 1, 1999\n+ *\/\n+public class Test8331033 {\n+\n+  public static int micro1(int ctr) {\n+    \/\/ non-escaping object, EA sweepable, values are forwarded to users, additional\n+    \/\/ bookeeping (SafepointScalarObjectNode) for eliminated objects at SafePoints\n+    \/\/ With -XX:-Inline, constructor will not be inlined and hence AllocateNode are\n+    \/\/ considered escapable.\n+    MyClass obj = new MyClass(10, 20, 30, 40);\n+    return obj.field1 * ctr + obj.field2 + obj.field3 + obj.field4;\n+  }\n+\n+  public static int micro2(int ctr) {\n+    \/\/ small known length arrays of size less than\n+    \/\/ -XX:+EliminateAllocationArraySizeLimit are eliminatable if non-escaping.\n+    int[] arr = new int[5];\n+    arr[0] = 10;\n+    arr[1] = 10;\n+    arr[2] = 10;\n+    arr[3] = 10;\n+    arr[4] = 10;\n+    \/\/ value forwarding will forward constants to expressions.\n+    return ctr * arr[0] + arr[1] + arr[2] + arr[3] + arr[4];\n+  }\n+\n+  public static int micro3(int ctr) {\n+    int[] arr = new int[8];\n+    MemorySegment ms = MemorySegment.ofArray(arr);\n+    ms.fill((byte) 10);\n+    return ctr * ms.get(ValueLayout.JAVA_INT, 12) +\n+        ms.get(ValueLayout.JAVA_INT, 16) +\n+        ms.get(ValueLayout.JAVA_INT, 20) +\n+        ms.get(ValueLayout.JAVA_INT, 24);\n+  }\n+\n+  public static void main(String[] args) {\n+    {\n+      int res = 0;\n+      for (int i = 0; i < 100000; i++) {\n+        res += micro1(i);\n+      }\n+      System.out.println(\"[res] \" + res);\n+    }\n+    {\n+      int res = 0;\n+      for (int i = 0; i < 100000; i++) {\n+        res += micro2(i);\n+      }\n+      System.out.println(\"[res] \" + res);\n+    }\n+    {\n+      int res = 0;\n+      for (int i = 0; i < 100000; i++) {\n+        res += micro3(i);\n+      }\n+      System.out.println(\"[res] \" + res);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/Test8331033.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}