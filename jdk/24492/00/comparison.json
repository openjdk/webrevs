{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.function.Function;\n@@ -43,0 +44,4 @@\n+    \/\/for tests, so that they can tweak the builder (typically set persistence):\n+    private static Function<JavaShellToolBuilder, JavaShellToolBuilder> augmentToolBuilder =\n+            builder -> builder;\n+\n@@ -89,5 +94,6 @@\n-            return JavaShellToolBuilder\n-                    .builder()\n-                    .in(xin, null)\n-                    .out(xout)\n-                    .err(xerr)\n+            return augmentToolBuilder.apply(\n+                    JavaShellToolBuilder\n+                        .builder()\n+                        .in(xin, null)\n+                        .out(xout)\n+                        .err(xerr))\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellToolProvider.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n@@ -26,0 +28,1 @@\n+import java.util.function.Function;\n@@ -27,0 +30,2 @@\n+import jdk.internal.jshell.tool.JShellToolProvider;\n+import jdk.jshell.tool.JavaShellToolBuilder;\n@@ -32,1 +37,1 @@\n- * @bug 8170044 8171343 8179856 8185840 8190383\n+ * @bug 8170044 8171343 8179856 8185840 8190383 8353332\n@@ -37,1 +42,1 @@\n- *          jdk.jshell\/jdk.internal.jshell.tool\n+ *          jdk.jshell\/jdk.internal.jshell.tool:+open\n@@ -71,4 +76,9 @@\n-        ServiceLoader<Tool> sl = ServiceLoader.load(Tool.class);\n-        for (Tool provider : sl) {\n-            if (provider.name().equals(\"jshell\")) {\n-                return provider.run(cmdInStream, cmdout, cmderr, args);\n+        \/\/make sure the JShell running during the test is not using persisted preferences from the machine:\n+        Function<JavaShellToolBuilder, JavaShellToolBuilder> prevAugmentedToolBuilder =\n+                getAndSetAugmentedToolBuilder(builder -> builder.persistence(new HashMap<>()));\n+        try {\n+            ServiceLoader<Tool> sl = ServiceLoader.load(Tool.class);\n+            for (Tool provider : sl) {\n+                if (provider.name().equals(\"jshell\")) {\n+                    return provider.run(cmdInStream, cmdout, cmderr, args);\n+                }\n@@ -76,0 +86,3 @@\n+            throw new AssertionError(\"Repl tool not found by ServiceLoader: \" + sl);\n+        } finally {\n+            getAndSetAugmentedToolBuilder(prevAugmentedToolBuilder);\n@@ -77,1 +90,0 @@\n-        throw new AssertionError(\"Repl tool not found by ServiceLoader: \" + sl);\n@@ -90,0 +102,18 @@\n+\n+    private Function<JavaShellToolBuilder, JavaShellToolBuilder> getAndSetAugmentedToolBuilder\n+        (Function<JavaShellToolBuilder, JavaShellToolBuilder> augmentToolBuilder) {\n+        try {\n+            Field f = JShellToolProvider.class.getDeclaredField(\"augmentToolBuilder\");\n+\n+            f.setAccessible(true);\n+\n+            Function<JavaShellToolBuilder, JavaShellToolBuilder> prev =\n+                    (Function<JavaShellToolBuilder, JavaShellToolBuilder>) f.get(null);\n+\n+            f.set(null, augmentToolBuilder);\n+\n+            return prev;\n+        } catch (ReflectiveOperationException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/ToolProviderTest.java","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"}]}