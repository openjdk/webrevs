{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import java.lang.classfile.ClassHierarchyResolver;\n@@ -251,0 +252,11 @@\n+\n+        if (options.verify) {\n+            var vErrors = VERIFIER.verify(classModel);\n+            if (!vErrors.isEmpty()) {\n+                println();\n+                for (var ve : vErrors) {\n+                    println(ve.getMessage());\n+                }\n+                errorReported = true;\n+            }\n+        }\n@@ -255,0 +267,9 @@\n+    private static final ClassFile VERIFIER = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(\n+            ClassHierarchyResolver.defaultResolver().orElse(new ClassHierarchyResolver() {\n+                @Override\n+                public ClassHierarchyResolver.ClassHierarchyInfo getClassInfo(ClassDesc classDesc) {\n+                    \/\/ mark all unresolved classes as interfaces to exclude them from assignability verification\n+                    return ClassHierarchyInfo.ofInterface();\n+                }\n+            })));\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -224,0 +224,7 @@\n+        new Option(false, \"-verify\") {\n+            @Override\n+            void process(JavapTask task, String opt, String arg) {\n+                task.options.verify = true;\n+            }\n+        },\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/JavapTask.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+    public boolean verify;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/Options.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -129,0 +129,3 @@\n+main.opt.verify=\\\n+\\  -verify                          Print additional class verification info\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/resources\/javap.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -129,0 +129,3 @@\n+\\f[V]-verify\\f[R]\n+Print additional class verification info.\n+.TP\n","filename":"src\/jdk.jdeps\/share\/man\/javap.1","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8182774\n+ * @enablePreview\n+ * @summary test on class with a verification error\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ *\/\n+\n+import java.io.*;\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+public class VerificationTest {\n+    public static void main(String... args) throws Exception {\n+        new VerificationTest().run();\n+    }\n+\n+    void run() throws Exception {\n+        String testClasses = System.getProperty(\"test.classes\");\n+        String invalidClass = \"InvalidClass\";\n+        ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS).buildTo(Path.of(testClasses, invalidClass + \".class\"), ClassDesc.of(invalidClass), clb ->\n+                clb.withMethodBody(\"methodWithMissingStackMap\", ConstantDescs.MTD_void, 0, cob ->\n+                        cob.iconst_0().ifThen(tb -> tb.nop()).return_()));\n+        String out = javap(\"-verify\", \"-classpath\", testClasses, invalidClass);\n+        if (!out.contains(\"Expecting a stackmap frame at branch target\")) {\n+            throw new Exception(\"Expected output not found\");\n+        }\n+    }\n+\n+    String javap(String... args) throws Exception {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter out = new PrintWriter(sw);\n+        int rc = com.sun.tools.javap.Main.run(args, out);\n+        out.close();\n+        System.out.println(sw.toString());\n+        if (rc < 0)\n+            throw new Exception(\"javap exited, rc=\" + rc);\n+        return sw.toString();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javap\/VerificationTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}