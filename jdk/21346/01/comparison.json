{"files":[{"patch":"@@ -266,1 +266,4 @@\n-     *          an array, including executable, package, module, and wildcard types\n+     *          an array. All valid types are {@linkplain ReferenceType\n+     *          reference types} or {@linkplain PrimitiveType primitive types}.\n+     *          Invalid types include {@linkplain NullType null}, executable, package,\n+     *          module, and wildcard types.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Types.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -196,0 +196,2 @@\n+        case NONE:\n+        case NULL:\n@@ -200,0 +202,2 @@\n+        case UNION:\n+        case INTERSECTION:\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacTypes.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8340721\n+ * @bug 8340721 8341483\n@@ -71,0 +71,5 @@\n+\n+            \/\/ isSubType\n+            \/\/ isAssignable\n+            \/\/ contains\n+            \/\/ directSupertypes\n@@ -72,0 +77,4 @@\n+            \/\/ capture\n+            \/\/ getPrimitiveType\n+            \/\/ getNoType\n+            testGetArrayType();\n@@ -73,0 +82,3 @@\n+            \/\/ getDeclaredType\n+            \/\/ getDeclaredType (overload)\n+            \/\/ asMemberOf\n@@ -139,4 +151,7 @@\n-        var invalidInputs = List.of(objectType, stringType, arrayType,\n-                                    executableType, intersectionType,\n-                                    noTypeVoid, noTypeNone, noTypePackage, noTypeModule, nullType,\n-                                    primitiveType, \/*unionType, *\/ wildcardType);\n+        var invalidInputs =\n+            List.of(primitiveType, executableType,\n+                    objectType, stringType, arrayType,\n+                    intersectionType, \/*unionType, *\/\n+                    noTypeVoid, noTypeNone, noTypePackage, noTypeModule,\n+                    nullType,\n+                    wildcardType);\n@@ -147,1 +162,1 @@\n-                throw new RuntimeException(\"Should not reach \" + tm);\n+                shouldNotReach(tm);\n@@ -155,0 +170,5 @@\n+    private void shouldNotReach(TypeMirror tm) {\n+        throw new RuntimeException(\"Should not reach \" + tm +\n+                                   \" \" + tm.getKind());\n+    }\n+\n@@ -163,3 +183,6 @@\n-        var invalidInputs = List.of(executableType, intersectionType,\n-                                    noTypeVoid, noTypeNone, noTypePackage, noTypeModule, nullType,\n-                                    primitiveType, \/*unionType, *\/ wildcardType);\n+        var invalidInputs =\n+            List.of(primitiveType, executableType,\n+                    intersectionType, \/*unionType, *\/\n+                    noTypeVoid, noTypeNone, noTypePackage, noTypeModule,\n+                    nullType,\n+                    wildcardType);\n@@ -170,1 +193,1 @@\n-                throw new RuntimeException(\"Should not reach \" + tm);\n+                shouldNotReach(tm);\n@@ -177,1 +200,1 @@\n-                throw new RuntimeException(\"Should not reach \" + tm);\n+                shouldNotReach(tm);\n@@ -184,0 +207,23 @@\n+\n+    \/**\n+     * @throws IllegalArgumentException if the component type is not valid for\n+     *          an array. All valid types are {@linkplain ReferenceType\n+     *          reference types} or {@linkplain PrimitiveType primitive types}.\n+     *          Invalid types include null, executable, package, module, and wildcard types.\n+     *\/\n+    void testGetArrayType() {\n+        var invalidInputs =\n+            List.of(executableType,\n+                    noTypeVoid, noTypeNone, noTypePackage, noTypeModule,\n+                    nullType,\n+                    \/*unionType, *\/ wildcardType);\n+\n+        for (TypeMirror tm : invalidInputs) {\n+            try {\n+                ArrayType arrayType = types.getArrayType(tm);\n+                shouldNotReach(tm);\n+            } catch(IllegalArgumentException iae) {\n+                ; \/\/ Expected\n+            }\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/types\/TestInvalidInputs.java","additions":57,"deletions":11,"binary":false,"changes":68,"status":"modified"}]}