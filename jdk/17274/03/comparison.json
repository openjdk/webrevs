{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.util.stream.Stream;\n@@ -460,0 +461,1 @@\n+            log.flush();\n@@ -660,1 +662,1 @@\n-            throw new OptionException(ERROR, this::showUsage, text);\n+            throw new OptionException(ERROR, () -> reportBadOption(arg), text);\n@@ -665,0 +667,33 @@\n+    private void reportBadOption(String name) {\n+        var allOptionNames = Stream.concat(\n+                getToolOptions().getSupportedOptions().stream()\n+                        .flatMap(o -> o.getNames().stream()),\n+                docletOptions.stream()\n+                        .flatMap(o -> o.getNames().stream()));\n+        record Pair(String word, double similarity) { }\n+        final double MIN_SIMILARITY = 0.7;\n+        var suggestions = allOptionNames\n+                .map(t -> new Pair(t, similarity(t, name)))\n+                .sorted(Comparator.comparingDouble(Pair::similarity).reversed() \/* more similar first *\/)\n+                \/\/ .peek(p -> System.out.printf(\"%.3f, (%s ~ %s)%n\", p.similarity, p.word, name)) \/\/ debug\n+                .takeWhile(p -> Double.compare(p.similarity, MIN_SIMILARITY) >= 0)\n+                .map(Pair::word)\n+                .toList();\n+        switch (suggestions.size()) {\n+            case 0 -> { }\n+            case 1 -> showLinesUsingKey(\"main.did-you-mean\", suggestions.get(0));\n+            default -> showLinesUsingKey(\"main.did-you-mean-one-of\", String.join(\" \", suggestions));\n+        }\n+        showLinesUsingKey(\"main.for-more-details-see-usage\");\n+    }\n+\n+    \/\/ a value in [0, 1] range: the closer the value is to 1, the more similar\n+    \/\/ the strings are\n+    private static double similarity(String a, String b) {\n+        \/\/ Normalize the distance so that similarity between \"x\" and \"y\" is\n+        \/\/ less than that of \"ax\" and \"ay\". Use the greater of two lengths\n+        \/\/ as normalizer, as it's an upper bound for the distance.\n+        return 1.0 - ((double) StringUtils.DamerauLevenshteinDistance.of(a, b))\n+                \/ Math.max(a.length(), b.length());\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Start.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,9 @@\n+main.did-you-mean=\\\n+    Did you mean: {0}\n+\n+main.did-you-mean-one-of=\\\n+    Did you mean one of: {0}\n+\n+main.for-more-details-see-usage=\\\n+    For more details on available options, use --help or --help-extra\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/resources\/javadoc.properties","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8169676 8175055\n+ * @bug 8169676 8175055 8323016\n@@ -154,0 +154,69 @@\n+    @Test\n+    public void testOptionNotFound_NoSuggestions() {\n+        var result = new JavadocTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--not-a-path\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll();\n+        checkFound(String.join(\"\\n\", result.getOutputLines(Task.OutputKind.DIRECT)),\n+                \"\"\"\n+                    error: invalid flag: --not-a-path\n+                    For more details on available options, use --help or --help-extra\"\"\"\n+        );\n+    }\n+\n+    @Test\n+    public void testOptionNotFound_OneSuggestion() {\n+        var result = new JavadocTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--middle-path\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll();\n+        checkFound(String.join(\"\\n\", result.getOutputLines(Task.OutputKind.DIRECT)),\n+                \"\"\"\n+                    error: invalid flag: --middle-path\n+                    Did you mean: --module-path\n+                    For more details on available options, use --help or --help-extra\"\"\"\n+        );\n+    }\n+\n+    @Test\n+    public void testOptionNotFound_TwoSuggestions() {\n+        var result = new JavadocTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--sourcepath\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll();\n+        checkFound(String.join(\"\\n\", result.getOutputLines(Task.OutputKind.DIRECT)),\n+                \"\"\"\n+                    error: invalid flag: --sourcepath\n+                    Did you mean one of: --source-path -sourcepath\n+                    For more details on available options, use --help or --help-extra\"\"\"\n+        );\n+    }\n+\n+    @Test\n+    public void testOptionNotFound_ThreeSuggestions() {\n+        var result = new JavadocTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--classpath\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll();\n+        checkFound(String.join(\"\\n\", result.getOutputLines(Task.OutputKind.DIRECT)),\n+                \"\"\"\n+                    error: invalid flag: --classpath\n+                    Did you mean one of: --class-path -classpath -bootclasspath\n+                    For more details on available options, use --help or --help-extra\"\"\"\n+        );\n+    }\n+\n+    @Test\n+    public void testOptionNotFound_DocletOption() {\n+        var result = new JavadocTask(tb, Task.Mode.CMDLINE)\n+                .options(\"-tiglet\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll();\n+        checkFound(String.join(\"\\n\", result.getOutputLines(Task.OutputKind.DIRECT)),\n+                \"\"\"\n+                    error: invalid flag: -tiglet\n+                    Did you mean: -taglet\n+                    For more details on available options, use --help or --help-extra\"\"\"\n+        );\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/BadOptionsTest.java","additions":71,"deletions":2,"binary":false,"changes":73,"status":"modified"}]}