{"files":[{"patch":"@@ -128,4 +128,0 @@\n-\/* Reports a system error message to stderr or a window *\/\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(const char * message, ...);\n-\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,0 +62,4 @@\n+\/* Reports a system error message to stderr, including errno *\/\n+JNIEXPORT void JNICALL\n+JLI_ReportErrorMessageSys(const char * message, ...);\n+\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -573,69 +573,0 @@\n-\/*\n- * Just like JLI_ReportErrorMessage, except that it concatenates the system\n- * error message if any, it's up to the calling routine to correctly\n- * format the separation of the messages.\n- *\/\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(const char *fmt, ...)\n-{\n-    va_list vl;\n-\n-    int save_errno = errno;\n-    DWORD       errval;\n-    jboolean freeit = JNI_FALSE;\n-    char  *errtext = NULL;\n-\n-    va_start(vl, fmt);\n-\n-    if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n-        int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n-            FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n-            NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n-        if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n-            errtext = \"\";\n-            n = 0;\n-        } else {\n-            freeit = JNI_TRUE;\n-            if (n > 2) {                                \/* Drop final CR, LF *\/\n-                if (errtext[n - 1] == '\\n') n--;\n-                if (errtext[n - 1] == '\\r') n--;\n-                errtext[n] = '\\0';\n-            }\n-        }\n-    } else {   \/* C runtime error that has no corresponding DOS error code *\/\n-        errtext = strerror(save_errno);\n-    }\n-\n-    if (IsJavaw()) {\n-        char *message;\n-        int mlen;\n-        \/* get the length of the string we need *\/\n-        int len = mlen =  _vscprintf(fmt, vl) + 1;\n-        if (freeit) {\n-           mlen += (int)JLI_StrLen(errtext);\n-        }\n-\n-        message = (char *)JLI_MemAlloc(mlen);\n-        _vsnprintf(message, len, fmt, vl);\n-        message[len]='\\0';\n-\n-        if (freeit) {\n-           JLI_StrCat(message, errtext);\n-        }\n-\n-        MessageBox(NULL, message, \"Java Virtual Machine Launcher\",\n-            (MB_OK|MB_ICONSTOP|MB_APPLMODAL));\n-\n-        JLI_MemFree(message);\n-    } else {\n-        vfprintf(stderr, fmt, vl);\n-        if (freeit) {\n-           fprintf(stderr, \"%s\", errtext);\n-        }\n-    }\n-    if (freeit) {\n-        (void)LocalFree((HLOCAL)errtext);\n-    }\n-    va_end(vl);\n-}\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":0,"deletions":69,"binary":false,"changes":69,"status":"modified"}]}