{"files":[{"patch":"@@ -397,1 +397,2 @@\n-  const CompilerType ct = th->task()->compiler()->type();\n+  CompileTask* const task = th->task();\n+  const CompilerType ct = task->compiler()->type();\n@@ -404,1 +405,1 @@\n-  assert(directive->should_collect_memstat(), \"Only call if memstat is enabled\");\n+  assert(directive->should_collect_memstat(), \"Should only be called if memstat is enabled for this method\");\n@@ -407,0 +408,3 @@\n+  \/\/ Store memory used in task, for later processing by JFR\n+  task->set_arena_bytes(arena_stat->peak_since_start());\n+\n@@ -496,1 +500,1 @@\n-      const CompileTask* task = th->task();\n+      const CompileTask* const task = th->task();\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2129,1 +2129,2 @@\n-                                        task->num_inlined_bytecodes());\n+                                        task->num_inlined_bytecodes(),\n+                                        task->arena_bytes());\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+  _arena_bytes = 0;\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+  size_t               _arena_bytes;  \/\/ peak size of temporary memory during compilation (e.g. node arenas)\n@@ -203,0 +204,3 @@\n+  void         set_arena_bytes(size_t s)         { _arena_bytes = s; }\n+  size_t       arena_bytes() const               { return _arena_bytes; }\n+\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,3 @@\n-void CompilerEvent::CompilationEvent::post(EventCompilation& event, int compile_id, CompilerType compiler_type, Method* method, int compile_level, bool success, bool is_osr, int code_size, int inlined_bytecodes) {\n+void CompilerEvent::CompilationEvent::post(EventCompilation& event, int compile_id, CompilerType compiler_type, Method* method,\n+    int compile_level, bool success, bool is_osr, int code_size,\n+    int inlined_bytecodes, size_t arenaBytes) {\n@@ -146,0 +148,1 @@\n+  event.set_arenaBytes(arenaBytes);\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,1 +55,3 @@\n-    static void post(EventCompilation& event, int compile_id, CompilerType type, Method* method, int compile_level, bool success, bool is_osr, int code_size, int inlined_bytecodes) NOT_JFR_RETURN();\n+    static void post(EventCompilation& event, int compile_id, CompilerType type, Method* method,\n+                     int compile_level, bool success, bool is_osr, int code_size,\n+                     int inlined_bytecodes, size_t arenaBytes) NOT_JFR_RETURN();\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -611,0 +611,1 @@\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"arenaBytes\" label=\"Arena Usage\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}