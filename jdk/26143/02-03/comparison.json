{"files":[{"patch":"@@ -548,3 +548,3 @@\n-  if (i1->_lo == min_val) {\n-    \/\/ Special case possible, check carefully\n-    NativeType new_lo;\n+  if (i1->_lo == min_val && i2_hi == min_val) {\n+    \/\/ special overflow case as defined above, and as min_val is the lowest possible value, this is our lower bound\n+    NativeType new_lo = min_val;\n@@ -552,9 +552,8 @@\n-    if (i2_hi == -1) {\n-      \/\/ special overflow case as defined above\n-      new_lo = min_val;\n-      if (!i1->is_con()) {\n-        \/\/ Also compute the \"next\" division result for a nonâ€‘constant range.\n-        new_hi = i1->_lo + 1 \/ i2_hi;\n-      } else {\n-        new_hi = min_val;\n-      }\n+    \/\/ compute new_hi for non-constant divisor and\/or dividend.\n+    \/\/ i2 is purely in the negative domain here, which means the maximum value this division can yield is either\n+    \/\/ a) (min_val + 1) \/ -1 for non-constant dividend or\n+    \/\/ b) (min_val)     \/ -2 for non-constant divisor\n+    if (!i1->is_con()) {\n+      new_hi = (min_val + 1) \/ -1;\n+    } else if (i2_lo != i2_hi) {\n+      new_hi = min_val \/ -2;\n@@ -562,4 +561,1 @@\n-      \/\/ Normal corner: (i1->_lo, i2->_hi)\n-      NativeType result = i1->_lo \/ i2_hi;\n-      new_lo = result;\n-      new_hi = result;\n+      new_hi = min_val;\n@@ -567,3 +563,2 @@\n-\n-    \/\/ If the divisor range is wider than a singleton, include (i1->_lo, i2->_lo).\n-    \/\/ We cannot use is_con here, as a range of [-1, 0] will also result in i2_lo and i2_hi being -1\n+#ifdef ASSERT\n+    \/\/ validate new_hi for non-constant divisor\n@@ -573,2 +568,1 @@\n-      new_lo = MIN2(new_lo, result);\n-      new_hi = MAX2(new_hi, result);\n+      assert(new_hi >= result, \"computed wrong value for new_hi\");\n@@ -577,2 +571,1 @@\n-    \/\/ If i1 is not a single constant, include the two corners with i1->_hi:\n-    \/\/   (i1->_hi, i2->_lo) and (i1->_hi, i2->_hi)\n+    \/\/ validate new_hi for non-constant dividend\n@@ -583,2 +576,1 @@\n-      new_lo = MIN3(new_lo, result1, result2);\n-      new_hi = MAX3(new_hi, result1, result2);\n+      assert(new_hi >= result1 && new_hi >= result2, \"computed wrong value for new_hi\");\n@@ -586,0 +578,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"}]}