{"files":[{"patch":"@@ -507,1 +507,0 @@\n-\n@@ -539,1 +538,0 @@\n-\n@@ -548,2 +546,3 @@\n-  \/\/ Special overflow case: min_val \/ (-1) == min_val\n-  \/\/ We must include min_val in the output if i1->_lo == min_val and i2->_hi.\n+  \/\/ Special overflow case: min_val \/ (-1) == min_val (cf. JVMS§6.5 idiv\/ldiv)\n+  \/\/ We need to be careful that we never run min_val \/ (-1) in C++ code, as this overflow is UB there\n+  \/\/ We also must include min_val in the output if i1->_lo == min_val and i2->_hi.\n@@ -551,1 +550,0 @@\n-    \/\/ special case: min_jint or min_jlong div -1 == min_val\n@@ -554,1 +552,1 @@\n-      \/\/ Also compute the “next” division result for a non‑constant range.\n+      \/\/ Also compute the \"next\" division result for a non‑constant range.\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -123,0 +123,6 @@\n+    @Run(test = {\"testIntConstantFolding\", \"testIntConstantFoldingSpecialCase\"})\n+    public void checkIntConstants(RunInfo info) {\n+        Asserts.assertEquals(2, testIntConstantFolding());\n+        Asserts.assertEquals(Integer.MIN_VALUE, testIntConstantFoldingSpecialCase());\n+    }\n+\n@@ -125,1 +131,0 @@\n-\n@@ -135,3 +140,0 @@\n-        Asserts.assertEquals(2, testIntConstantFolding());\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntConstantFoldingSpecialCase());\n-\n@@ -171,1 +173,0 @@\n-\n@@ -252,0 +253,6 @@\n+    @Run(test = {\"testLongConstantFolding\", \"testLongConstantFoldingSpecialCase\"})\n+    public void checkLongConstants(RunInfo info) {\n+        Asserts.assertEquals(2L, testLongConstantFolding());\n+        Asserts.assertEquals(Long.MIN_VALUE, testLongConstantFoldingSpecialCase());\n+    }\n+\n@@ -254,1 +261,0 @@\n-\n@@ -264,3 +270,0 @@\n-        Asserts.assertEquals(2L, testLongConstantFolding());\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongConstantFoldingSpecialCase());\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/IntegerDivValueTests.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"}]}