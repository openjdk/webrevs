{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 20255, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,9 @@\n-import java.io.*;\n-import java.util.*;\n+import tests.JImageGenerator;\n+\n+import java.io.BufferedOutputStream;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n@@ -29,5 +36,4 @@\n-import java.util.Arrays;\n-import java.util.StringJoiner;\n-import java.util.spi.ToolProvider;\n-import jdk.test.lib.compiler.InMemoryJavaCompiler;\n-import jdk.test.lib.util.JarUtils;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n@@ -35,1 +41,5 @@\n-import tests.JImageGenerator;\n+import static java.lang.classfile.ClassFile.ACC_MANDATED;\n+import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.constant.ConstantDescs.CD_String;\n+import static java.lang.constant.ConstantDescs.CD_void;\n@@ -55,11 +65,3 @@\n-    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n-            .orElseThrow(() -> new RuntimeException(\"javac tool not found\"));\n-\n-    static void report(String command, String[] args) {\n-        System.out.println(command + \" \" + String.join(\" \", Arrays.asList(args)));\n-    }\n-\n-    static void javac(String[] args) {\n-        report(\"javac\", args);\n-        JAVAC_TOOL.run(System.out, System.err, args);\n-    }\n+    private static final ClassDesc CD_System = ClassDesc.of(\"java.lang.System\");\n+    private static final ClassDesc CD_PrintStream = ClassDesc.of(\"java.io.PrintStream\");\n+    private static final MethodTypeDesc MTD_void_String = MethodTypeDesc.of(CD_void, CD_String);\n@@ -68,1 +70,4 @@\n-        Path src = Paths.get(\"bug8321413\");\n+        String moduleName = \"bug8321413x\";\n+        Path src = Paths.get(moduleName);\n+        Files.createDirectories(src);\n+        Path jarPath = src.resolve(moduleName +\".jar\");\n@@ -71,2 +76,6 @@\n-        StringJoiner mainModuleInfoContent = new StringJoiner(\";\\n  exports \", \"module bug8321413x {\\n  exports \", \";\\n}\");\n-        Map<String, String> sources = new LinkedHashMap<>();\n+        \/\/ Generate module with 20000 classes in unique packages\n+        try (JarOutputStream out = new JarOutputStream(new BufferedOutputStream(Files.newOutputStream(jarPath)))) {\n+            Set<String> packageNames = new HashSet<>();\n+            for (int i = 0; i < 20_000; i++) {\n+                String packageName = \"p\" + i;\n+                packageNames.add(packageName);\n@@ -74,3 +83,6 @@\n-        for (int i = 0; i < 20000; i++) {\n-            String packageName = \"p\" + i;\n-            String className = \"C\" + i;\n+                \/\/ Generate a class file for this package\n+                String className = \"C\" + i;\n+                byte[] classData = ClassFile.of().build(ClassDesc.of(packageName, className), cb -> {});\n+                out.putNextEntry(new JarEntry(packageName + \"\/\" + className +\".class\"));\n+                out.write(classData);\n+            }\n@@ -78,16 +90,4 @@\n-            StringBuilder classContent = new StringBuilder(\"package \");\n-            classContent.append(packageName).append(\";\\n\");\n-            classContent.append(\"class \").append(className).append(\" {}\\n\");\n-            sources.put(className, classContent.toString());\n-            mainModuleInfoContent.add(packageName);\n-        }\n-        sources.put(\"module-info\", mainModuleInfoContent.toString());\n-        sources.put(\"JLink20000PackagesTest\", \"\"\"\n-                package testpackage;\n-\n-                public class JLink20000PackagesTest {\n-                    public static void main(String[] args) throws Exception {\n-                        System.out.println(\"JLink20000PackagesTest started.\");\n-                    }\n-                }\n-                \"\"\");\n+            \/\/ Write the main class\n+            out.putNextEntry(new JarEntry(\"testpackage\/JLink20000PackagesTest.class\"));\n+            out.write(generateMainClass());\n+            packageNames.add(\"testpackage\");\n@@ -95,6 +95,9 @@\n-        var compiledClasses = InMemoryJavaCompiler.compile(sources);\n-\n-        \/\/ Create a jar file\n-        Files.createDirectories(src);\n-        Path jarPath = src.resolve(\"bug8321413x.jar\");\n-        JarUtils.createJarFromClasses(jarPath, compiledClasses);\n+            \/\/ Write the module descriptor\n+            byte[] moduleInfo = ClassFile.of().buildModule(ModuleAttribute.of(\n+                    ModuleDesc.of(moduleName), mab -> {\n+                        mab.requires(ModuleDesc.of(\"java.base\"), ACC_MANDATED, null);\n+                        packageNames.forEach(pkgName -> mab.exports(PackageDesc.of(pkgName), 0));\n+                    }));\n+            out.putNextEntry(new JarEntry(\"module-info.class\"));\n+            out.write(moduleInfo);\n+        }\n@@ -105,1 +108,1 @@\n-                .addMods(\"bug8321413x\")\n+                .addMods(moduleName)\n@@ -114,0 +117,1 @@\n+                \/\/ Option is useful to verify build image\n@@ -115,1 +119,1 @@\n-                \"-m\", \"bug8321413x\/testpackage.JLink20000PackagesTest\");\n+                \"-m\", moduleName + \"\/testpackage.JLink20000PackagesTest\");\n@@ -123,0 +127,18 @@\n+\n+    \/**\n+     * Generate test class with main() does\n+     * System.out.println(\"JLink20000PackagesTest started.\");\n+     *\/\n+    private static byte[] generateMainClass() {\n+        return ClassFile.of().build(ClassDesc.of(\"testpackage\", \"JLink20000PackagesTest\"),\n+                cb -> {\n+                    cb.withMethod(\"main\", MethodTypeDesc.of(CD_void, CD_String.arrayType()),\n+                            ACC_PUBLIC | ACC_STATIC, mb -> {\n+                                mb.withCode(cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                        .ldc(\"JLink20000PackagesTest started.\")\n+                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                        .return_()\n+                                );\n+                            });\n+                });\n+    }\n","filename":"test\/jdk\/tools\/jlink\/JLink20000Packages.java","additions":72,"deletions":50,"binary":false,"changes":122,"status":"modified"}]}