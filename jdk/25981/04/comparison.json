{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,9 @@\n+import tests.JImageGenerator;\n+\n+import java.io.BufferedOutputStream;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n@@ -27,3 +36,4 @@\n-import java.util.Arrays;\n-import java.util.StringJoiner;\n-import java.util.spi.ToolProvider;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n@@ -31,1 +41,5 @@\n-import tests.JImageGenerator;\n+import static java.lang.classfile.ClassFile.ACC_MANDATED;\n+import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.constant.ConstantDescs.CD_String;\n+import static java.lang.constant.ConstantDescs.CD_void;\n@@ -39,2 +53,1 @@\n- * @library ..\/lib\n- * @enablePreview\n+ * @library ..\/lib \/test\/lib\n@@ -48,1 +61,1 @@\n- * @run main\/othervm -Xmx1g -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLink20000Packages\n+ * @run main\/othervm -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLink20000Packages\n@@ -51,11 +64,3 @@\n-    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n-            .orElseThrow(() -> new RuntimeException(\"javac tool not found\"));\n-\n-    static void report(String command, String[] args) {\n-        System.out.println(command + \" \" + String.join(\" \", Arrays.asList(args)));\n-    }\n-\n-    static void javac(String[] args) {\n-        report(\"javac\", args);\n-        JAVAC_TOOL.run(System.out, System.err, args);\n-    }\n+    private static final ClassDesc CD_System = ClassDesc.of(\"java.lang.System\");\n+    private static final ClassDesc CD_PrintStream = ClassDesc.of(\"java.io.PrintStream\");\n+    private static final MethodTypeDesc MTD_void_String = MethodTypeDesc.of(CD_void, CD_String);\n@@ -64,1 +69,4 @@\n-        Path src = Paths.get(\"bug8321413\");\n+        String moduleName = \"bug8321413x\";\n+        Path src = Paths.get(moduleName);\n+        Files.createDirectories(src);\n+        Path jarPath = src.resolve(moduleName +\".jar\");\n@@ -66,7 +74,0 @@\n-        Path mainModulePath = src.resolve(\"bug8321413x\");\n-\n-        StringJoiner mainModuleInfoContent = new StringJoiner(\";\\n  exports \", \"module bug8321413x {\\n  exports \", \";\\n}\");\n-\n-        for (int i = 0; i < 20000; i++) {\n-            String packageName = \"p\" + i;\n-            String className = \"C\" + i;\n@@ -74,8 +75,27 @@\n-            Path packagePath = Files.createDirectories(mainModulePath.resolve(packageName));\n-\n-            StringBuilder classContent = new StringBuilder(\"package \");\n-            classContent.append(packageName).append(\";\\n\");\n-            classContent.append(\"class \").append(className).append(\" {}\\n\");\n-            Files.writeString(packagePath.resolve(className + \".java\"), classContent.toString());\n-\n-            mainModuleInfoContent.add(packageName);\n+        \/\/ Generate module with 20000 classes in unique packages\n+        try (JarOutputStream out = new JarOutputStream(new BufferedOutputStream(Files.newOutputStream(jarPath)))) {\n+            Set<String> packageNames = new HashSet<>();\n+            for (int i = 0; i < 20_000; i++) {\n+                String packageName = \"p\" + i;\n+                packageNames.add(packageName);\n+\n+                \/\/ Generate a class file for this package\n+                String className = \"C\" + i;\n+                byte[] classData = ClassFile.of().build(ClassDesc.of(packageName, className), cb -> {});\n+                out.putNextEntry(new JarEntry(packageName + \"\/\" + className +\".class\"));\n+                out.write(classData);\n+            }\n+\n+            \/\/ Write the main class\n+            out.putNextEntry(new JarEntry(\"testpackage\/JLink20000PackagesTest.class\"));\n+            out.write(generateMainClass());\n+            packageNames.add(\"testpackage\");\n+\n+            \/\/ Write the module descriptor\n+            byte[] moduleInfo = ClassFile.of().buildModule(ModuleAttribute.of(\n+                    ModuleDesc.of(moduleName), mab -> {\n+                        mab.requires(ModuleDesc.of(\"java.base\"), ACC_MANDATED, null);\n+                        packageNames.forEach(pkgName -> mab.exports(PackageDesc.of(pkgName), 0));\n+                    }));\n+            out.putNextEntry(new JarEntry(\"module-info.class\"));\n+            out.write(moduleInfo);\n@@ -84,24 +104,0 @@\n-        \/\/ create module reading the generated modules\n-        Path mainModuleInfo = mainModulePath.resolve(\"module-info.java\");\n-        Files.writeString(mainModuleInfo, mainModuleInfoContent.toString());\n-\n-        Path mainClassDir = mainModulePath.resolve(\"testpackage\");\n-        Files.createDirectories(mainClassDir);\n-\n-        Files.writeString(mainClassDir.resolve(\"JLink20000PackagesTest.java\"), \"\"\"\n-                package testpackage;\n-\n-                public class JLink20000PackagesTest {\n-                    public static void main(String[] args) throws Exception {\n-                        System.out.println(\"JLink20000PackagesTest started.\");\n-                    }\n-                }\n-                \"\"\");\n-\n-        String out = src.resolve(\"out\").toString();\n-        javac(new String[]{\n-                \"-d\", out,\n-                \"--module-source-path\", src.toString(),\n-                \"--module\", \"bug8321413x\"\n-        });\n-\n@@ -109,1 +105,0 @@\n-                .modulePath(out)\n@@ -111,1 +106,2 @@\n-                .addMods(\"bug8321413x\")\n+                .addJars(jarPath)\n+                .addMods(moduleName)\n@@ -120,0 +116,1 @@\n+                \/\/ Option is useful to verify build image\n@@ -121,1 +118,1 @@\n-                \"-m\", \"bug8321413x\/testpackage.JLink20000PackagesTest\");\n+                \"-m\", moduleName + \"\/testpackage.JLink20000PackagesTest\");\n@@ -129,0 +126,18 @@\n+\n+    \/**\n+     * Generate test class with main() does\n+     * System.out.println(\"JLink20000PackagesTest started.\");\n+     *\/\n+    private static byte[] generateMainClass() {\n+        return ClassFile.of().build(ClassDesc.of(\"testpackage\", \"JLink20000PackagesTest\"),\n+                cb -> {\n+                    cb.withMethod(\"main\", MethodTypeDesc.of(CD_void, CD_String.arrayType()),\n+                            ACC_PUBLIC | ACC_STATIC, mb -> {\n+                                mb.withCode(cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                        .ldc(\"JLink20000PackagesTest started.\")\n+                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                        .return_()\n+                                );\n+                            });\n+                });\n+    }\n","filename":"test\/jdk\/tools\/jlink\/JLink20000Packages.java","additions":77,"deletions":62,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -426,1 +426,1 @@\n-            return linkableRuntime ? jars : jmods + File.pathSeparator + jars;\n+            return (linkableRuntime || jmods.isEmpty()) ? jars : jmods + File.pathSeparator + jars;\n@@ -657,1 +657,1 @@\n-            return jmods + File.pathSeparator + jars;\n+            return jmods.isEmpty() ? jars : jmods + File.pathSeparator + jars;\n","filename":"test\/jdk\/tools\/lib\/tests\/JImageGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}