{"files":[{"patch":"@@ -319,1 +319,0 @@\n-        java.management.rmi,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,5 +32,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n@@ -38,2 +33,0 @@\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n@@ -44,0 +37,1 @@\n+import java.util.concurrent.CompletionException;\n@@ -49,1 +43,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -97,1 +90,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -114,33 +106,4 @@\n-\n-        ClassLoaderRepository repository = AccessController.doPrivileged(\n-            new PrivilegedAction<ClassLoaderRepository>() {\n-                public ClassLoaderRepository run() {\n-                    return mbeanServer.getClassLoaderRepository();\n-                }\n-            },\n-            withPermissions(new MBeanPermission(\"*\", \"getClassLoaderRepository\"))\n-        );\n-        this.classLoaderWithRepository = AccessController.doPrivileged(\n-            new PrivilegedAction<ClassLoaderWithRepository>() {\n-                public ClassLoaderWithRepository run() {\n-                    return new ClassLoaderWithRepository(\n-                        repository,\n-                        dcl);\n-                }\n-            },\n-            withPermissions(new RuntimePermission(\"createClassLoader\"))\n-        );\n-\n-        this.defaultContextClassLoader =\n-            AccessController.doPrivileged(\n-                new PrivilegedAction<ClassLoader>() {\n-            @Override\n-                    public ClassLoader run() {\n-                        return new CombinedClassLoader(Thread.currentThread().getContextClassLoader(),\n-                                dcl);\n-                    }\n-                });\n-\n-        serverCommunicatorAdmin = new\n-          RMIServerCommunicatorAdmin(EnvHelp.getServerConnectionTimeout(env));\n-\n+        ClassLoaderRepository repository = mbeanServer.getClassLoaderRepository();\n+        this.classLoaderWithRepository = new ClassLoaderWithRepository(repository, dcl);\n+        this.defaultContextClassLoader = new CombinedClassLoader(Thread.currentThread().getContextClassLoader(), dcl);\n+        serverCommunicatorAdmin = new RMIServerCommunicatorAdmin(EnvHelp.getServerConnectionTimeout(env));\n@@ -150,12 +113,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext withPermissions(Permission ... perms){\n-        Permissions col = new Permissions();\n-\n-        for (Permission thePerm : perms ) {\n-            col.add(thePerm);\n-        }\n-\n-        final ProtectionDomain pd = new ProtectionDomain(null, col);\n-        return new AccessControlContext( new ProtectionDomain[] { pd });\n-    }\n-\n@@ -400,1 +351,1 @@\n-                                    getClassLoader(loaderName),\n+                                    mbeanServer.getClassLoader(loaderName),\n@@ -1252,1 +1203,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1277,9 +1227,1 @@\n-            final long csn = clientSequenceNumber;\n-            final int mn = maxNotifications;\n-            final long t = timeout;\n-            PrivilegedAction<NotificationResult> action =\n-                new PrivilegedAction<NotificationResult>() {\n-                    public NotificationResult run() {\n-                        return getServerNotifFwd().fetchNotifs(csn, t, mn);\n-                    }\n-            };\n+\n@@ -1287,1 +1229,1 @@\n-                return action.run();\n+                return getServerNotifFwd().fetchNotifs(clientSequenceNumber, timeout, maxNotifications);\n@@ -1289,1 +1231,1 @@\n-                return Subject.doAs(subject, action);\n+                return Subject.callAs(subject, () -> getServerNotifFwd().fetchNotifs(clientSequenceNumber, timeout, maxNotifications));\n@@ -1314,19 +1256,0 @@\n-    private class PrivilegedOperation\n-            implements PrivilegedExceptionAction<Object> {\n-\n-        public PrivilegedOperation(int operation, Object[] params) {\n-            this.operation = operation;\n-            this.params = params;\n-        }\n-\n-        public Object run() throws Exception {\n-            return doOperation(operation, params);\n-        }\n-\n-        private int operation;\n-        private Object[] params;\n-    }\n-\n-    \/\/------------------------------------------------------------------------\n-    \/\/ private classes\n-    \/\/------------------------------------------------------------------------\n@@ -1355,19 +1278,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private ClassLoader getClassLoader(final ObjectName name)\n-        throws InstanceNotFoundException {\n-        try {\n-            return\n-                AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<ClassLoader>() {\n-                        public ClassLoader run() throws InstanceNotFoundException {\n-                            return mbeanServer.getClassLoader(name);\n-                        }\n-                    },\n-                    withPermissions(new MBeanPermission(\"*\", \"getClassLoader\"))\n-            );\n-        } catch (PrivilegedActionException pe) {\n-            throw (InstanceNotFoundException) extractException(pe);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n@@ -1376,13 +1280,2 @@\n-        try {\n-            return (ClassLoader)\n-                AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<Object>() {\n-                        public Object run() throws InstanceNotFoundException {\n-                            return mbeanServer.getClassLoaderFor(name);\n-                        }\n-                    },\n-                    withPermissions(new MBeanPermission(\"*\", \"getClassLoaderFor\"))\n-            );\n-        } catch (PrivilegedActionException pe) {\n-            throw (InstanceNotFoundException) extractException(pe);\n-        }\n+\n+        return mbeanServer.getClassLoaderFor(name);\n@@ -1392,1 +1285,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1405,1 +1297,0 @@\n-            PrivilegedOperation op = new PrivilegedOperation(operation, params);\n@@ -1408,1 +1299,1 @@\n-                    return op.run();\n+                    return doOperation(operation, params);\n@@ -1417,1 +1308,12 @@\n-                return Subject.doAs(subject, op);\n+                try {\n+                    return Subject.callAs(subject, () -> doOperation(operation, params));\n+                } catch (CompletionException ce) {\n+                    Throwable e = ce.getCause();\n+                    if (e instanceof SecurityException) {\n+                        throw (SecurityException) e;\n+                    } else if (e instanceof Exception) {\n+                        throw new PrivilegedActionException((Exception) e);\n+                    } else {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n@@ -1548,14 +1450,5 @@\n-    private static class SetCcl implements PrivilegedExceptionAction<ClassLoader> {\n-        private final ClassLoader classLoader;\n-\n-        SetCcl(ClassLoader classLoader) {\n-            this.classLoader = classLoader;\n-        }\n-\n-        public ClassLoader run() {\n-            Thread currentThread = Thread.currentThread();\n-            ClassLoader old = currentThread.getContextClassLoader();\n-            if (classLoader != old) {\n-                currentThread.setContextClassLoader(classLoader);\n-            }\n-            return old;\n+    private static ClassLoader setCcl(ClassLoader classLoader) {\n+        Thread currentThread = Thread.currentThread();\n+        ClassLoader old = currentThread.getContextClassLoader();\n+        if (classLoader != old) {\n+            currentThread.setContextClassLoader(classLoader);\n@@ -1563,0 +1456,1 @@\n+        return old;\n@@ -1565,1 +1459,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1581,1 +1474,1 @@\n-            final ClassLoader old = AccessController.doPrivileged(new SetCcl(cl));\n+            ClassLoader old = setCcl(cl);\n@@ -1584,1 +1477,1 @@\n-                    return Subject.doAs(subject, (PrivilegedExceptionAction<T>) () -> wrappedClass.cast(mo.get()));\n+                    return Subject.callAs(subject, () -> wrappedClass.cast(mo.get()));\n@@ -1589,1 +1482,1 @@\n-                AccessController.doPrivileged(new SetCcl(old));\n+                setCcl(old);\n@@ -1591,2 +1484,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -1596,3 +1488,0 @@\n-            if (e instanceof ClassNotFoundException) {\n-                throw new UnmarshalException(e.toString(), e);\n-            }\n@@ -1601,4 +1490,1 @@\n-        }catch (ClassNotFoundException ex) {\n-            logger.warning(\"unwrap\", \"Failed to unmarshall object: \" + ex);\n-            logger.debug(\"unwrap\", ex);\n-            throw new UnmarshalException(ex.toString(), ex);\n+            throw new UnmarshalException(e.toString(), e);\n@@ -1606,1 +1492,0 @@\n-        return null;\n@@ -1619,9 +1504,2 @@\n-            @SuppressWarnings(\"removal\")\n-            ClassLoader orderCL = AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<ClassLoader>() {\n-                    public ClassLoader run() throws Exception {\n-                        return new CombinedClassLoader(Thread.currentThread().getContextClassLoader(),\n-                                new OrderClassLoaders(cl1, cl2));\n-                    }\n-                }\n-            );\n+            ClassLoader orderCL = new CombinedClassLoader(Thread.currentThread().getContextClassLoader(),\n+                                                          new OrderClassLoaders(cl1, cl2));\n@@ -1629,2 +1507,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -1818,1 +1695,0 @@\n-            ReflectUtil.checkPackageAccess(name);\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectionImpl.java","additions":38,"deletions":162,"binary":false,"changes":200,"status":"modified"},{"patch":"@@ -57,3 +57,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -105,1 +102,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -1859,1 +1855,0 @@\n-            ReflectUtil.checkPackageAccess(name);\n@@ -1967,45 +1962,1 @@\n-        PrivilegedExceptionAction<Constructor<?>> action =\n-                new PrivilegedExceptionAction<Constructor<?>>() {\n-            public Constructor<?> run() throws Exception {\n-                Class<RMIConnector> thisClass = RMIConnector.class;\n-                ClassLoader thisLoader = thisClass.getClassLoader();\n-                ProtectionDomain thisProtectionDomain =\n-                        thisClass.getProtectionDomain();\n-\n-                String proxyRefCName = ProxyRef.class.getName();\n-                ClassLoader cl =\n-                        new NoCallStackClassLoader(pRefClassName,\n-                        pRefByteCode,\n-                        new String[] { proxyRefCName },\n-                        thisLoader,\n-                        thisProtectionDomain);\n-\n-                Module jmxModule = ProxyRef.class.getModule();\n-                Module rmiModule = RemoteRef.class.getModule();\n-\n-                String pkg = packageOf(pRefClassName);\n-                assert pkg != null && pkg.length() > 0 &&\n-                        !pkg.equals(packageOf(proxyRefCName));\n-\n-                ModuleDescriptor descriptor =\n-                    ModuleDescriptor.newModule(\"jdk.remoteref\", Set.of(SYNTHETIC))\n-                        .packages(Set.of(pkg))\n-                        .build();\n-                Module m = Modules.defineModule(cl, descriptor, null);\n-\n-                \/\/ jdk.remoteref needs to read to java.base and jmxModule\n-                Modules.addReads(m, Object.class.getModule());\n-                Modules.addReads(m, jmxModule);\n-                Modules.addReads(m, rmiModule);\n-\n-                \/\/ jdk.remoteref needs access to ProxyRef class\n-                Modules.addExports(jmxModule, packageOf(proxyRefCName), m);\n-\n-                \/\/ java.management needs to instantiate the fabricated RemoteRef class\n-                Modules.addReads(jmxModule, m);\n-                Modules.addExports(m, pkg, jmxModule);\n-\n-                Class<?> c = cl.loadClass(pRefClassName);\n-                return c.getConstructor(RemoteRef.class);\n-            }\n-        };\n+\n@@ -2029,3 +1980,42 @@\n-            @SuppressWarnings(\"removal\")\n-            Constructor<?> tmp = (Constructor<?>) AccessController.doPrivileged(action);\n-            constr = tmp;\n+\n+            Class<RMIConnector> thisClass = RMIConnector.class;\n+            ClassLoader thisLoader = thisClass.getClassLoader();\n+            ProtectionDomain thisProtectionDomain =\n+                    thisClass.getProtectionDomain();\n+\n+            String proxyRefCName = ProxyRef.class.getName();\n+            ClassLoader cl =\n+                    new NoCallStackClassLoader(pRefClassName,\n+                    pRefByteCode,\n+                    new String[] { proxyRefCName },\n+                    thisLoader,\n+                    thisProtectionDomain);\n+\n+            Module jmxModule = ProxyRef.class.getModule();\n+            Module rmiModule = RemoteRef.class.getModule();\n+\n+            String pkg = packageOf(pRefClassName);\n+            assert pkg != null && pkg.length() > 0 &&\n+                    !pkg.equals(packageOf(proxyRefCName));\n+\n+            ModuleDescriptor descriptor =\n+                ModuleDescriptor.newModule(\"jdk.remoteref\", Set.of(SYNTHETIC))\n+                    .packages(Set.of(pkg))\n+                    .build();\n+            Module m = Modules.defineModule(cl, descriptor, null);\n+\n+            \/\/ jdk.remoteref needs to read to java.base and jmxModule\n+            Modules.addReads(m, Object.class.getModule());\n+            Modules.addReads(m, jmxModule);\n+            Modules.addReads(m, rmiModule);\n+\n+            \/\/ jdk.remoteref needs access to ProxyRef class\n+            Modules.addExports(jmxModule, packageOf(proxyRefCName), m);\n+\n+            \/\/ java.management needs to instantiate the fabricated RemoteRef class\n+            Modules.addReads(jmxModule, m);\n+            Modules.addExports(m, pkg, jmxModule);\n+\n+            Class<?> c = cl.loadClass(pRefClassName);\n+\n+            constr = c.getConstructor(RemoteRef.class);\n@@ -2175,1 +2165,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -2179,10 +2168,6 @@\n-        if (defaultClassLoader != null)\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    if (t.getContextClassLoader() != defaultClassLoader) {\n-                        t.setContextClassLoader(defaultClassLoader);\n-                    }\n-                    return null;\n-                }\n-            });\n-            return old;\n+        if (defaultClassLoader != null) {\n+            if (t.getContextClassLoader() != defaultClassLoader) {\n+                t.setContextClassLoader(defaultClassLoader);\n+            }\n+        }\n+        return old;\n@@ -2191,1 +2176,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -2193,9 +2177,4 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                Thread t = Thread.currentThread();\n-                if (t.getContextClassLoader() != old) {\n-                    t.setContextClassLoader(old);\n-                }\n-                return null;\n-            }\n-        });\n+        Thread t = Thread.currentThread();\n+        if (t.getContextClassLoader() != old) {\n+            t.setContextClassLoader(old);\n+        }\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnector.java","additions":53,"deletions":74,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -122,1 +121,0 @@\n-            allowedTypes.forEach(ReflectUtil::checkPackageAccess);\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIJRMPServerImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}