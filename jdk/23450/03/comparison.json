{"files":[{"patch":"@@ -130,1 +130,1 @@\n-\/\/   entry_list or WaitSet -- at any one time.\n+\/\/   entry_list or wait_set -- at any one time.\n@@ -255,2 +255,2 @@\n-\/\/ * Waiting threads reside on the WaitSet list -- wait() puts\n-\/\/   the caller onto the WaitSet.\n+\/\/ * Waiting threads reside on the wait_set list -- wait() puts\n+\/\/   the caller onto the wait_set.\n@@ -258,1 +258,1 @@\n-\/\/ * notify() or notifyAll() simply transfers threads from the WaitSet\n+\/\/ * notify() or notifyAll() simply transfers threads from the wait_set\n@@ -299,1 +299,1 @@\n-  _WaitSet(nullptr),\n+  _wait_set(nullptr),\n@@ -301,1 +301,1 @@\n-  _WaitSetLock(0),\n+  _wait_set_lock(0),\n@@ -360,1 +360,1 @@\n-bool ObjectMonitor::TryLockWithContentionMark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark) {\n+bool ObjectMonitor::try_lock_with_contention_mark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark) {\n@@ -407,1 +407,1 @@\n-  bool success = TryLockWithContentionMark(locking_thread, contention_mark);\n+  bool success = try_lock_with_contention_mark(locking_thread, contention_mark);\n@@ -428,1 +428,1 @@\n-  bool success = TryLockWithContentionMark(locking_thread, contention_mark);\n+  bool success = try_lock_with_contention_mark(locking_thread, contention_mark);\n@@ -439,1 +439,1 @@\n-  TryLockResult r = TryLock(current);\n+  TryLockResult r = try_lock(current);\n@@ -477,1 +477,1 @@\n-  if (TrySpin(current)) {\n+  if (try_spin(current)) {\n@@ -554,1 +554,1 @@\n-      bool acquired = VThreadMonitorEnter(current);\n+      bool acquired = vthread_monitor_enter(current);\n@@ -589,1 +589,1 @@\n-        EnterI(current);\n+        enter_internal(current);\n@@ -655,1 +655,1 @@\n-\/\/ Caveat: TryLock() is not necessarily serializing if it returns failure.\n+\/\/ Caveat: try_lock() is not necessarily serializing if it returns failure.\n@@ -658,1 +658,1 @@\n-ObjectMonitor::TryLockResult ObjectMonitor::TryLock(JavaThread* current) {\n+ObjectMonitor::TryLockResult ObjectMonitor::try_lock(JavaThread* current) {\n@@ -672,1 +672,1 @@\n-      if (TryLockWithContentionMark(current, contention_mark)) {\n+      if (try_lock_with_contention_mark(current, contention_mark)) {\n@@ -729,1 +729,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -782,1 +782,1 @@\n-        \/\/ Deferred decrement for the JT EnterI() that cancelled the async deflation.\n+        \/\/ Deferred decrement for the JT enter_internal() that cancelled the async deflation.\n@@ -795,1 +795,1 @@\n-        \/\/ Deferred decrement for the JT EnterI() that cancelled the async deflation.\n+        \/\/ Deferred decrement for the JT enter_internal() that cancelled the async deflation.\n@@ -907,1 +907,1 @@\n-void ObjectMonitor::EnterI(JavaThread* current) {\n+void ObjectMonitor::enter_internal(JavaThread* current) {\n@@ -911,1 +911,1 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n+  if (try_lock(current) == TryLockResult::Success) {\n@@ -926,1 +926,1 @@\n-  if (TrySpin(current)) {\n+  if (try_spin(current)) {\n@@ -980,1 +980,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -997,1 +997,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -1013,1 +1013,1 @@\n-    \/\/ TrySpin() must tolerate being called with _succ == current.\n+    \/\/ try_spin() must tolerate being called with _succ == current.\n@@ -1015,1 +1015,1 @@\n-    if (TrySpin(current)) {\n+    if (try_spin(current)) {\n@@ -1033,1 +1033,1 @@\n-  UnlinkAfterAcquire(current, &node);\n+  unlink_after_acquire(current, &node);\n@@ -1065,2 +1065,2 @@\n-\/\/ ReenterI() is a specialized inline form of the latter half of the\n-\/\/ contended slow-path from EnterI().  We use ReenterI() only for\n+\/\/ reenter_internal() is a specialized inline form of the latter half of the\n+\/\/ contended slow-path from enter_internal().  We use reenter_internal() only for\n@@ -1069,1 +1069,1 @@\n-\/\/ In the future we should reconcile EnterI() and ReenterI().\n+\/\/ In the future we should reconcile enter_internal() and reenter_internal().\n@@ -1071,1 +1071,1 @@\n-void ObjectMonitor::ReenterI(JavaThread* current, ObjectWaiter* currentNode) {\n+void ObjectMonitor::reenter_internal(JavaThread* current, ObjectWaiter* currentNode) {\n@@ -1085,1 +1085,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -1091,1 +1091,1 @@\n-    if (TrySpin(current)) {\n+    if (try_spin(current)) {\n@@ -1110,1 +1110,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -1134,1 +1134,1 @@\n-  UnlinkAfterAcquire(current, currentNode);\n+  unlink_after_acquire(current, currentNode);\n@@ -1138,1 +1138,1 @@\n-  OrderAccess::fence();      \/\/ see comments at the end of EnterI()\n+  OrderAccess::fence();      \/\/ see comments at the end of enter_internal()\n@@ -1147,2 +1147,2 @@\n-bool ObjectMonitor::VThreadMonitorEnter(JavaThread* current, ObjectWaiter* waiter) {\n-  if (TryLock(current) == TryLockResult::Success) {\n+bool ObjectMonitor::vthread_monitor_enter(JavaThread* current, ObjectWaiter* waiter) {\n+  if (try_lock(current) == TryLockResult::Success) {\n@@ -1165,1 +1165,1 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n+  if (try_lock(current) == TryLockResult::Success) {\n@@ -1167,1 +1167,1 @@\n-    UnlinkAfterAcquire(current, node);\n+    unlink_after_acquire(current, node);\n@@ -1191,1 +1191,1 @@\n-    bool acquired_monitor = VThreadWaitReenter(current, node, cont);\n+    bool acquired_monitor = vthread_wait_reenter(current, node, cont);\n@@ -1200,2 +1200,2 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n-    VThreadEpilog(current, node);\n+  if (try_lock(current) == TryLockResult::Success) {\n+    vthread_epilog(current, node);\n@@ -1211,2 +1211,2 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n-    VThreadEpilog(current, node);\n+  if (try_lock(current) == TryLockResult::Success) {\n+    vthread_epilog(current, node);\n@@ -1222,1 +1222,1 @@\n-void ObjectMonitor::VThreadEpilog(JavaThread* current, ObjectWaiter* node) {\n+void ObjectMonitor::vthread_epilog(JavaThread* current, ObjectWaiter* node) {\n@@ -1240,1 +1240,1 @@\n-  UnlinkAfterAcquire(current, node);\n+  unlink_after_acquire(current, node);\n@@ -1286,1 +1286,1 @@\n-void ObjectMonitor::UnlinkAfterAcquire(JavaThread* current, ObjectWaiter* currentNode) {\n+void ObjectMonitor::unlink_after_acquire(JavaThread* current, ObjectWaiter* currentNode) {\n@@ -1392,1 +1392,1 @@\n-\/\/ There's one exception to the claim above, however.  EnterI() can call\n+\/\/ There's one exception to the claim above, however.  enter_internal() can call\n@@ -1513,1 +1513,1 @@\n-    if (TryLock(current) != TryLockResult::Success) {\n+    if (try_lock(current) != TryLockResult::Success) {\n@@ -1538,1 +1538,1 @@\n-      ExitEpilog(current, w);\n+      exit_epilog(current, w);\n@@ -1544,1 +1544,1 @@\n-void ObjectMonitor::ExitEpilog(JavaThread* current, ObjectWaiter* Wakee) {\n+void ObjectMonitor::exit_epilog(JavaThread* current, ObjectWaiter* Wakee) {\n@@ -1738,1 +1738,1 @@\n-      VThreadWait(current, millis);\n+      vthread_wait(current, millis);\n@@ -1768,1 +1768,1 @@\n-  \/\/ _WaitSetLock protects the wait queue.  Normally the wait queue is accessed only\n+  \/\/ _wait_set_lock protects the wait queue.  Normally the wait queue is accessed only\n@@ -1773,3 +1773,3 @@\n-  Thread::SpinAcquire(&_WaitSetLock, \"WaitSet - add\");\n-  AddWaiter(&node);\n-  Thread::SpinRelease(&_WaitSetLock);\n+  Thread::SpinAcquire(&_wait_set_lock, \"wait_set - add\");\n+  add_waiter(&node);\n+  Thread::SpinRelease(&_wait_set_lock);\n@@ -1783,1 +1783,1 @@\n-  \/\/ The thread is on the WaitSet list - now park() it.\n+  \/\/ The thread is on the wait_set list - now park() it.\n@@ -1816,4 +1816,4 @@\n-    \/\/ Node may be on the WaitSet, or on the entry_list, or in transition\n-    \/\/ from the WaitSet to the entry_list.\n-    \/\/ See if we need to remove Node from the WaitSet.\n-    \/\/ We use double-checked locking to avoid grabbing _WaitSetLock\n+    \/\/ Node may be on the wait_set, or on the entry_list, or in transition\n+    \/\/ from the wait_set to the entry_list.\n+    \/\/ See if we need to remove Node from the wait_set.\n+    \/\/ We use double-checked locking to avoid grabbing _wait_set_lock\n@@ -1832,1 +1832,1 @@\n-      Thread::SpinAcquire(&_WaitSetLock, \"WaitSet - unlink\");\n+      Thread::SpinAcquire(&_wait_set_lock, \"wait_set - unlink\");\n@@ -1834,1 +1834,1 @@\n-        DequeueSpecificWaiter(&node);       \/\/ unlink from WaitSet\n+        dequeue_specific_waiter(&node);       \/\/ unlink from wait_set\n@@ -1838,1 +1838,1 @@\n-      Thread::SpinRelease(&_WaitSetLock);\n+      Thread::SpinRelease(&_wait_set_lock);\n@@ -1897,1 +1897,1 @@\n-      ReenterI(current, &node);\n+      reenter_internal(current, &node);\n@@ -1943,2 +1943,2 @@\n-\/\/ then instead of transferring a thread from the WaitSet to the entry_list\n-\/\/ we might just dequeue a thread from the WaitSet and directly unpark() it.\n+\/\/ then instead of transferring a thread from the wait_set to the entry_list\n+\/\/ we might just dequeue a thread from the wait_set and directly unpark() it.\n@@ -1946,3 +1946,3 @@\n-void ObjectMonitor::INotify(JavaThread* current) {\n-  Thread::SpinAcquire(&_WaitSetLock, \"WaitSet - notify\");\n-  ObjectWaiter* iterator = DequeueWaiter();\n+void ObjectMonitor::notify_internal(JavaThread* current) {\n+  Thread::SpinAcquire(&_wait_set_lock, \"wait_set - notify\");\n+  ObjectWaiter* iterator = dequeue_waiter();\n@@ -1973,1 +1973,1 @@\n-    \/\/ _WaitSetLock protects the wait queue, not the entry_list.  We could\n+    \/\/ _wait_set_lock protects the wait queue, not the entry_list.  We could\n@@ -1975,1 +1975,1 @@\n-    \/\/ protected by _WaitSetLock.  In practice that's not useful.  With the\n+    \/\/ protected by _wait_set_lock.  In practice that's not useful.  With the\n@@ -1977,2 +1977,2 @@\n-    \/\/ is the only thread that grabs _WaitSetLock.  There's almost no contention\n-    \/\/ on _WaitSetLock so it's not profitable to reduce the length of the\n+    \/\/ is the only thread that grabs _wait_set_lock.  There's almost no contention\n+    \/\/ on _wait_set_lock so it's not profitable to reduce the length of the\n@@ -1985,1 +1985,1 @@\n-  Thread::SpinRelease(&_WaitSetLock);\n+  Thread::SpinRelease(&_wait_set_lock);\n@@ -2001,1 +2001,1 @@\n-  if (_WaitSet == nullptr) {\n+  if (_wait_set == nullptr) {\n@@ -2005,1 +2005,1 @@\n-  INotify(current);\n+  notify_internal(current);\n@@ -2018,1 +2018,1 @@\n-  if (_WaitSet == nullptr) {\n+  if (_wait_set == nullptr) {\n@@ -2024,1 +2024,1 @@\n-  while (_WaitSet != nullptr) {\n+  while (_wait_set != nullptr) {\n@@ -2026,1 +2026,1 @@\n-    INotify(current);\n+    notify_internal(current);\n@@ -2032,1 +2032,1 @@\n-void ObjectMonitor::VThreadWait(JavaThread* current, jlong millis) {\n+void ObjectMonitor::vthread_wait(JavaThread* current, jlong millis) {\n@@ -2041,1 +2041,1 @@\n-  \/\/ _WaitSetLock protects the wait queue.  Normally the wait queue is accessed only\n+  \/\/ _wait_set_lock protects the wait queue.  Normally the wait queue is accessed only\n@@ -2046,3 +2046,3 @@\n-  Thread::SpinAcquire(&_WaitSetLock, \"WaitSet - add\");\n-  AddWaiter(node);\n-  Thread::SpinRelease(&_WaitSetLock);\n+  Thread::SpinAcquire(&_wait_set_lock, \"wait_set - add\");\n+  add_waiter(node);\n+  Thread::SpinRelease(&_wait_set_lock);\n@@ -2064,1 +2064,1 @@\n-bool ObjectMonitor::VThreadWaitReenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont) {\n+bool ObjectMonitor::vthread_wait_reenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont) {\n@@ -2067,1 +2067,1 @@\n-  \/\/ in that case remove ourselves from the _WaitSet queue.\n+  \/\/ in that case remove ourselves from the _wait_set queue.\n@@ -2069,1 +2069,1 @@\n-    Thread::SpinAcquire(&_WaitSetLock, \"WaitSet - unlink\");\n+    Thread::SpinAcquire(&_wait_set_lock, \"wait_set - unlink\");\n@@ -2071,1 +2071,1 @@\n-      DequeueSpecificWaiter(node);       \/\/ unlink from WaitSet\n+      dequeue_specific_waiter(node);       \/\/ unlink from wait_set\n@@ -2075,1 +2075,1 @@\n-    Thread::SpinRelease(&_WaitSetLock);\n+    Thread::SpinRelease(&_wait_set_lock);\n@@ -2095,1 +2095,1 @@\n-    bool acquired = VThreadMonitorEnter(current, node);\n+    bool acquired = vthread_monitor_enter(current, node);\n@@ -2215,1 +2215,1 @@\n-    TryLockResult status = TryLock(current);\n+    TryLockResult status = try_lock(current);\n@@ -2230,1 +2230,1 @@\n-bool ObjectMonitor::TrySpin(JavaThread* current) {\n+bool ObjectMonitor::try_spin(JavaThread* current) {\n@@ -2355,2 +2355,2 @@\n-    \/\/ in the normal usage of TrySpin(), but it's safest\n-    \/\/ to make TrySpin() as foolproof as possible.\n+    \/\/ in the normal usage of try_spin(), but it's safest\n+    \/\/ to make try_spin() as foolproof as possible.\n@@ -2358,1 +2358,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -2368,1 +2368,1 @@\n-\/\/ WaitSet management ...\n+\/\/ wait_set management ...\n@@ -2410,1 +2410,1 @@\n-inline void ObjectMonitor::AddWaiter(ObjectWaiter* node) {\n+inline void ObjectMonitor::add_waiter(ObjectWaiter* node) {\n@@ -2415,2 +2415,2 @@\n-  if (_WaitSet == nullptr) {\n-    _WaitSet = node;\n+  if (_wait_set == nullptr) {\n+    _wait_set = node;\n@@ -2420,1 +2420,1 @@\n-    ObjectWaiter* head = _WaitSet;\n+    ObjectWaiter* head = _wait_set;\n@@ -2430,1 +2430,1 @@\n-inline ObjectWaiter* ObjectMonitor::DequeueWaiter() {\n+inline ObjectWaiter* ObjectMonitor::dequeue_waiter() {\n@@ -2432,1 +2432,1 @@\n-  ObjectWaiter* waiter = _WaitSet;\n+  ObjectWaiter* waiter = _wait_set;\n@@ -2434,1 +2434,1 @@\n-    DequeueSpecificWaiter(waiter);\n+    dequeue_specific_waiter(waiter);\n@@ -2439,1 +2439,1 @@\n-inline void ObjectMonitor::DequeueSpecificWaiter(ObjectWaiter* node) {\n+inline void ObjectMonitor::dequeue_specific_waiter(ObjectWaiter* node) {\n@@ -2449,1 +2449,1 @@\n-    _WaitSet = nullptr;\n+    _wait_set = nullptr;\n@@ -2456,2 +2456,2 @@\n-    if (_WaitSet == node) {\n-      _WaitSet = next;\n+    if (_wait_set == node) {\n+      _wait_set = next;\n@@ -2557,1 +2557,1 @@\n-\/\/   _WaitSet = 0x0000700009756248\n+\/\/   _wait_set = 0x0000700009756248\n@@ -2559,1 +2559,1 @@\n-\/\/   _WaitSetLock = 0\n+\/\/   _wait_set_lock = 0\n@@ -2585,1 +2585,1 @@\n-  st->print_cr(\"  _WaitSet = \" INTPTR_FORMAT, p2i(_WaitSet));\n+  st->print_cr(\"  _wait_set = \" INTPTR_FORMAT, p2i(_wait_set));\n@@ -2587,1 +2587,1 @@\n-  st->print_cr(\"  _WaitSetLock = %d\", _WaitSetLock);\n+  st->print_cr(\"  _wait_set_lock = %d\", _wait_set_lock);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":113,"deletions":113,"binary":false,"changes":226,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-  ObjectWaiter* volatile _WaitSet;  \/\/ LL of threads wait()ing on the monitor\n+  ObjectWaiter* volatile _wait_set; \/\/ LL of threads waiting on the monitor - wait()\n@@ -208,1 +208,1 @@\n-  volatile int _WaitSetLock;        \/\/ protects Wait Queue - simple spinlock\n+  volatile int _wait_set_lock;      \/\/ protects wait set queue - simple spinlock\n@@ -378,1 +378,1 @@\n-  ObjectWaiter* first_waiter()                                         { return _WaitSet; }\n+  ObjectWaiter* first_waiter()                                         { return _wait_set; }\n@@ -438,7 +438,7 @@\n-  void      AddWaiter(ObjectWaiter* waiter);\n-  void      INotify(JavaThread* current);\n-  ObjectWaiter* DequeueWaiter();\n-  void      DequeueSpecificWaiter(ObjectWaiter* waiter);\n-  void      EnterI(JavaThread* current);\n-  void      ReenterI(JavaThread* current, ObjectWaiter* current_node);\n-  void      UnlinkAfterAcquire(JavaThread* current, ObjectWaiter* current_node);\n+  void      add_waiter(ObjectWaiter* waiter);\n+  void      notify_internal(JavaThread* current);\n+  ObjectWaiter* dequeue_waiter();\n+  void      dequeue_specific_waiter(ObjectWaiter* waiter);\n+  void      enter_internal(JavaThread* current);\n+  void      reenter_internal(JavaThread* current, ObjectWaiter* current_node);\n+  void      unlink_after_acquire(JavaThread* current, ObjectWaiter* current_node);\n@@ -447,4 +447,4 @@\n-  bool      VThreadMonitorEnter(JavaThread* current, ObjectWaiter* node = nullptr);\n-  void      VThreadWait(JavaThread* current, jlong millis);\n-  bool      VThreadWaitReenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont);\n-  void      VThreadEpilog(JavaThread* current, ObjectWaiter* node);\n+  bool      vthread_monitor_enter(JavaThread* current, ObjectWaiter* node = nullptr);\n+  void      vthread_wait(JavaThread* current, jlong millis);\n+  bool      vthread_wait_reenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont);\n+  void      vthread_epilog(JavaThread* current, ObjectWaiter* node);\n@@ -454,1 +454,1 @@\n-  bool           TryLockWithContentionMark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark);\n+  bool           try_lock_with_contention_mark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark);\n@@ -456,1 +456,1 @@\n-  TryLockResult  TryLock(JavaThread* current);\n+  TryLockResult  try_lock(JavaThread* current);\n@@ -458,1 +458,1 @@\n-  bool      TrySpin(JavaThread* current);\n+  bool      try_spin(JavaThread* current);\n@@ -460,1 +460,1 @@\n-  void      ExitEpilog(JavaThread* current, ObjectWaiter* Wakee);\n+  void      exit_epilog(JavaThread* current, ObjectWaiter* Wakee);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,1 @@\n-  \/\/ ObjectMonitor::TryLockWithContentionMark().\n+  \/\/ ObjectMonitor::try_lock_with_contention_mark().\n@@ -264,1 +264,1 @@\n-  \/\/ Used by ObjectMonitor::TryLockWithContentionMark() to \"extend the\n+  \/\/ Used by ObjectMonitor::try_lock_with_contention_mark() to \"extend the\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-        mon->INotify(current);\n+        mon->notify_internal(current);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}