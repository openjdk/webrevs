{"files":[{"patch":"@@ -439,1 +439,1 @@\n-  TryLockResult r = TryLock(current);\n+  TryLockResult r = try_lock(current);\n@@ -477,1 +477,1 @@\n-  if (TrySpin(current)) {\n+  if (try_spin(current)) {\n@@ -554,1 +554,1 @@\n-      bool acquired = VThreadMonitorEnter(current);\n+      bool acquired = vthread_monitor_enter(current);\n@@ -589,1 +589,1 @@\n-        EnterI(current);\n+        enter_internal(current);\n@@ -655,1 +655,1 @@\n-\/\/ Caveat: TryLock() is not necessarily serializing if it returns failure.\n+\/\/ Caveat: try_lock() is not necessarily serializing if it returns failure.\n@@ -658,1 +658,1 @@\n-ObjectMonitor::TryLockResult ObjectMonitor::TryLock(JavaThread* current) {\n+ObjectMonitor::TryLockResult ObjectMonitor::try_lock(JavaThread* current) {\n@@ -729,1 +729,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -782,1 +782,1 @@\n-        \/\/ Deferred decrement for the JT EnterI() that cancelled the async deflation.\n+        \/\/ Deferred decrement for the JT enter_internal() that cancelled the async deflation.\n@@ -795,1 +795,1 @@\n-        \/\/ Deferred decrement for the JT EnterI() that cancelled the async deflation.\n+        \/\/ Deferred decrement for the JT enter_internal() that cancelled the async deflation.\n@@ -907,1 +907,1 @@\n-void ObjectMonitor::EnterI(JavaThread* current) {\n+void ObjectMonitor::enter_internal(JavaThread* current) {\n@@ -911,1 +911,1 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n+  if (try_lock(current) == TryLockResult::Success) {\n@@ -926,1 +926,1 @@\n-  if (TrySpin(current)) {\n+  if (try_spin(current)) {\n@@ -980,1 +980,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -997,1 +997,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -1013,1 +1013,1 @@\n-    \/\/ TrySpin() must tolerate being called with _succ == current.\n+    \/\/ try_spin() must tolerate being called with _succ == current.\n@@ -1015,1 +1015,1 @@\n-    if (TrySpin(current)) {\n+    if (try_spin(current)) {\n@@ -1033,1 +1033,1 @@\n-  UnlinkAfterAcquire(current, &node);\n+  unlink_after_acquire(current, &node);\n@@ -1065,2 +1065,2 @@\n-\/\/ ReenterI() is a specialized inline form of the latter half of the\n-\/\/ contended slow-path from EnterI().  We use ReenterI() only for\n+\/\/ reenter_internal() is a specialized inline form of the latter half of the\n+\/\/ contended slow-path from enter_internal().  We use reenter_internal() only for\n@@ -1069,1 +1069,1 @@\n-\/\/ In the future we should reconcile EnterI() and ReenterI().\n+\/\/ In the future we should reconcile enter_internal() and reenter_internal().\n@@ -1071,1 +1071,1 @@\n-void ObjectMonitor::ReenterI(JavaThread* current, ObjectWaiter* currentNode) {\n+void ObjectMonitor::reenter_internal(JavaThread* current, ObjectWaiter* currentNode) {\n@@ -1085,1 +1085,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -1091,1 +1091,1 @@\n-    if (TrySpin(current)) {\n+    if (try_spin(current)) {\n@@ -1110,1 +1110,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -1134,1 +1134,1 @@\n-  UnlinkAfterAcquire(current, currentNode);\n+  unlink_after_acquire(current, currentNode);\n@@ -1138,1 +1138,1 @@\n-  OrderAccess::fence();      \/\/ see comments at the end of EnterI()\n+  OrderAccess::fence();      \/\/ see comments at the end of enter_internal()\n@@ -1147,2 +1147,2 @@\n-bool ObjectMonitor::VThreadMonitorEnter(JavaThread* current, ObjectWaiter* waiter) {\n-  if (TryLock(current) == TryLockResult::Success) {\n+bool ObjectMonitor::vthread_monitor_enter(JavaThread* current, ObjectWaiter* waiter) {\n+  if (try_lock(current) == TryLockResult::Success) {\n@@ -1165,1 +1165,1 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n+  if (try_lock(current) == TryLockResult::Success) {\n@@ -1167,1 +1167,1 @@\n-    UnlinkAfterAcquire(current, node);\n+    unlink_after_acquire(current, node);\n@@ -1191,1 +1191,1 @@\n-    bool acquired_monitor = VThreadWaitReenter(current, node, cont);\n+    bool acquired_monitor = vthread_waitReenter(current, node, cont);\n@@ -1200,2 +1200,2 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n-    VThreadEpilog(current, node);\n+  if (try_lock(current) == TryLockResult::Success) {\n+    vthread_epilog(current, node);\n@@ -1211,2 +1211,2 @@\n-  if (TryLock(current) == TryLockResult::Success) {\n-    VThreadEpilog(current, node);\n+  if (try_lock(current) == TryLockResult::Success) {\n+    vthread_epilog(current, node);\n@@ -1222,1 +1222,1 @@\n-void ObjectMonitor::VThreadEpilog(JavaThread* current, ObjectWaiter* node) {\n+void ObjectMonitor::vthread_epilog(JavaThread* current, ObjectWaiter* node) {\n@@ -1240,1 +1240,1 @@\n-  UnlinkAfterAcquire(current, node);\n+  unlink_after_acquire(current, node);\n@@ -1286,1 +1286,1 @@\n-void ObjectMonitor::UnlinkAfterAcquire(JavaThread* current, ObjectWaiter* currentNode) {\n+void ObjectMonitor::unlink_after_acquire(JavaThread* current, ObjectWaiter* currentNode) {\n@@ -1392,1 +1392,1 @@\n-\/\/ There's one exception to the claim above, however.  EnterI() can call\n+\/\/ There's one exception to the claim above, however.  enter_internal() can call\n@@ -1513,1 +1513,1 @@\n-    if (TryLock(current) != TryLockResult::Success) {\n+    if (try_lock(current) != TryLockResult::Success) {\n@@ -1538,1 +1538,1 @@\n-      ExitEpilog(current, w);\n+      exit_epilog(current, w);\n@@ -1544,1 +1544,1 @@\n-void ObjectMonitor::ExitEpilog(JavaThread* current, ObjectWaiter* Wakee) {\n+void ObjectMonitor::exit_epilog(JavaThread* current, ObjectWaiter* Wakee) {\n@@ -1738,1 +1738,1 @@\n-      VThreadWait(current, millis);\n+      vthread_wait(current, millis);\n@@ -1774,1 +1774,1 @@\n-  AddWaiter(&node);\n+  add_waiter(&node);\n@@ -1834,1 +1834,1 @@\n-        DequeueSpecificWaiter(&node);       \/\/ unlink from WaitSet\n+        dequeue_specific_waiter(&node);       \/\/ unlink from WaitSet\n@@ -1897,1 +1897,1 @@\n-      ReenterI(current, &node);\n+      reenter_internal(current, &node);\n@@ -1946,1 +1946,1 @@\n-void ObjectMonitor::INotify(JavaThread* current) {\n+void ObjectMonitor::notify_internal(JavaThread* current) {\n@@ -1948,1 +1948,1 @@\n-  ObjectWaiter* iterator = DequeueWaiter();\n+  ObjectWaiter* iterator = dequeue_waiter();\n@@ -2005,1 +2005,1 @@\n-  INotify(current);\n+  notify_internal(current);\n@@ -2026,1 +2026,1 @@\n-    INotify(current);\n+    notify_internal(current);\n@@ -2032,1 +2032,1 @@\n-void ObjectMonitor::VThreadWait(JavaThread* current, jlong millis) {\n+void ObjectMonitor::vthread_wait(JavaThread* current, jlong millis) {\n@@ -2047,1 +2047,1 @@\n-  AddWaiter(node);\n+  add_waiter(node);\n@@ -2064,1 +2064,1 @@\n-bool ObjectMonitor::VThreadWaitReenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont) {\n+bool ObjectMonitor::vthread_waitReenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont) {\n@@ -2071,1 +2071,1 @@\n-      DequeueSpecificWaiter(node);       \/\/ unlink from WaitSet\n+      dequeue_specific_waiter(node);       \/\/ unlink from WaitSet\n@@ -2095,1 +2095,1 @@\n-    bool acquired = VThreadMonitorEnter(current, node);\n+    bool acquired = vthread_monitor_enter(current, node);\n@@ -2215,1 +2215,1 @@\n-    TryLockResult status = TryLock(current);\n+    TryLockResult status = try_lock(current);\n@@ -2230,1 +2230,1 @@\n-bool ObjectMonitor::TrySpin(JavaThread* current) {\n+bool ObjectMonitor::try_spin(JavaThread* current) {\n@@ -2355,2 +2355,2 @@\n-    \/\/ in the normal usage of TrySpin(), but it's safest\n-    \/\/ to make TrySpin() as foolproof as possible.\n+    \/\/ in the normal usage of try_spin(), but it's safest\n+    \/\/ to make try_spin() as foolproof as possible.\n@@ -2358,1 +2358,1 @@\n-    if (TryLock(current) == TryLockResult::Success) {\n+    if (try_lock(current) == TryLockResult::Success) {\n@@ -2410,1 +2410,1 @@\n-inline void ObjectMonitor::AddWaiter(ObjectWaiter* node) {\n+inline void ObjectMonitor::add_waiter(ObjectWaiter* node) {\n@@ -2430,1 +2430,1 @@\n-inline ObjectWaiter* ObjectMonitor::DequeueWaiter() {\n+inline ObjectWaiter* ObjectMonitor::dequeue_waiter() {\n@@ -2434,1 +2434,1 @@\n-    DequeueSpecificWaiter(waiter);\n+    dequeue_specific_waiter(waiter);\n@@ -2439,1 +2439,1 @@\n-inline void ObjectMonitor::DequeueSpecificWaiter(ObjectWaiter* node) {\n+inline void ObjectMonitor::dequeue_specific_waiter(ObjectWaiter* node) {\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":64,"deletions":64,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -438,7 +438,7 @@\n-  void      AddWaiter(ObjectWaiter* waiter);\n-  void      INotify(JavaThread* current);\n-  ObjectWaiter* DequeueWaiter();\n-  void      DequeueSpecificWaiter(ObjectWaiter* waiter);\n-  void      EnterI(JavaThread* current);\n-  void      ReenterI(JavaThread* current, ObjectWaiter* current_node);\n-  void      UnlinkAfterAcquire(JavaThread* current, ObjectWaiter* current_node);\n+  void      add_waiter(ObjectWaiter* waiter);\n+  void      notify_internal(JavaThread* current);\n+  ObjectWaiter* dequeue_waiter();\n+  void      dequeue_specific_waiter(ObjectWaiter* waiter);\n+  void      enter_internal(JavaThread* current);\n+  void      reenter_internal(JavaThread* current, ObjectWaiter* current_node);\n+  void      unlink_after_acquire(JavaThread* current, ObjectWaiter* current_node);\n@@ -447,4 +447,4 @@\n-  bool      VThreadMonitorEnter(JavaThread* current, ObjectWaiter* node = nullptr);\n-  void      VThreadWait(JavaThread* current, jlong millis);\n-  bool      VThreadWaitReenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont);\n-  void      VThreadEpilog(JavaThread* current, ObjectWaiter* node);\n+  bool      vthread_monitor_enter(JavaThread* current, ObjectWaiter* node = nullptr);\n+  void      vthread_wait(JavaThread* current, jlong millis);\n+  bool      vthread_waitReenter(JavaThread* current, ObjectWaiter* node, ContinuationWrapper& cont);\n+  void      vthread_epilog(JavaThread* current, ObjectWaiter* node);\n@@ -456,1 +456,1 @@\n-  TryLockResult  TryLock(JavaThread* current);\n+  TryLockResult  try_lock(JavaThread* current);\n@@ -458,1 +458,1 @@\n-  bool      TrySpin(JavaThread* current);\n+  bool      try_spin(JavaThread* current);\n@@ -460,1 +460,1 @@\n-  void      ExitEpilog(JavaThread* current, ObjectWaiter* Wakee);\n+  void      exit_epilog(JavaThread* current, ObjectWaiter* Wakee);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-        mon->INotify(current);\n+        mon->notify_internal(current);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}