{"files":[{"patch":"@@ -65,1 +65,2 @@\n-     * max retry time for a single KDC, default Krb5.KDC_RETRY_LIMIT (3)\n+     * max retry time for a single KDC, default Krb5.KDC_RETRY_LIMIT (3),\n+     * Must be > 0.\n@@ -69,1 +70,2 @@\n-     * timeout requesting a ticket from KDC, in millisec, default 30 sec\n+     * timeout requesting a ticket from KDC, in millisec, default\n+     * Krb5.KDC_TIMEOUT (30000). Must be > 0.\n@@ -73,1 +75,2 @@\n-     * max UDP packet size, default unlimited (-1)\n+     * max UDP packet size, default Krb5.KDC_DEFAULT_UDP_PREF_LIMIT (1465).\n+     * Must be >= 0 and <= Krb5.KDC_HARD_UDP_LIMIT (32700).\n@@ -149,1 +152,1 @@\n-            max_retries = parsePositiveIntString(temp);\n+            max_retries = parseNonNegativeIntString(temp);\n@@ -151,1 +154,1 @@\n-            udp_pref_limit = parsePositiveIntString(temp);\n+            udp_pref_limit = parseNonNegativeIntString(temp);\n@@ -160,1 +163,1 @@\n-        defaultKdcTimeout = timeout > 0 ? timeout : 30*1000; \/\/ 30 seconds\n+        defaultKdcTimeout = timeout > 0 ? timeout : Krb5.KDC_TIMEOUT;\n@@ -178,1 +181,1 @@\n-    private String realm;\n+    private final String realm;\n@@ -182,1 +185,1 @@\n-           realm = Config.getInstance().getDefaultRealm();\n+            realm = Config.getInstance().getDefaultRealm();\n@@ -194,1 +197,1 @@\n-                realm, \"udp_preference_limit\", defaultUdpPrefLimit);\n+                realm, \"udp_preference_limit\", defaultUdpPrefLimit, false);\n@@ -197,2 +200,1 @@\n-        boolean useTCP = (udpPrefLimit > 0 &&\n-             (obuf != null && obuf.length > udpPrefLimit));\n+        boolean useTCP = obuf != null && obuf.length > udpPrefLimit;\n@@ -210,8 +212,0 @@\n-        if (realm == null) {\n-            realm = cfg.getDefaultRealm();\n-            if (realm == null) {\n-                throw new KrbException(Krb5.KRB_ERR_GENERIC,\n-                                       \"Cannot find default realm\");\n-            }\n-        }\n-\n@@ -299,1 +293,1 @@\n-                realm, \"max_retries\", defaultKdcRetryLimit);\n+                realm, \"max_retries\", defaultKdcRetryLimit, true);\n@@ -301,1 +295,1 @@\n-                realm, \"kdc_timeout\", defaultKdcTimeout);\n+                realm, \"kdc_timeout\", defaultKdcTimeout, true);\n@@ -342,1 +336,1 @@\n-            int tempPort = parsePositiveIntString(portStr);\n+            int tempPort = parseNonNegativeIntString(portStr);\n@@ -447,1 +441,1 @@\n-            int seconds = parsePositiveIntString(s.substring(0, s.length()-1));\n+            int seconds = parseNonNegativeIntString(s.substring(0, s.length()-1));\n@@ -450,1 +444,1 @@\n-            return parsePositiveIntString(s);\n+            return parseNonNegativeIntString(s);\n@@ -464,0 +458,1 @@\n+     * @param mustBePositive true if value must be >0, false if value must be >=0\n@@ -466,1 +461,2 @@\n-    private int getRealmSpecificValue(String realm, String key, int defValue) {\n+    private int getRealmSpecificValue(String realm, String key, int defValue,\n+            boolean mustBePositive) {\n@@ -478,1 +474,1 @@\n-                temp = parsePositiveIntString(value);\n+                temp = parseNonNegativeIntString(value);\n@@ -484,1 +480,5 @@\n-        if (temp > 0) v = temp;\n+        if (mustBePositive) {\n+            if (temp > 0) v = temp;\n+        } else {\n+            if (temp >= 0) v = temp;\n+        }\n@@ -489,1 +489,1 @@\n-    private static int parsePositiveIntString(String intString) {\n+    private static int parseNonNegativeIntString(String intString) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KdcComm.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+    public static final int KDC_TIMEOUT = 30000;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/Krb5.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @bug 8164656 8181461 8194486\n+ * @bug 8164656 8181461 8194486 8333772\n@@ -222,1 +222,1 @@\n-                inDefaults += \"udp_preference_limit = 1\\n\";\n+                inDefaults += \"udp_preference_limit = 0\\n\";\n@@ -226,1 +226,1 @@\n-                inDefaults += \"udp_preference_limit = 1\\n\";\n+                inDefaults += \"udp_preference_limit = 0\\n\";\n@@ -228,1 +228,1 @@\n-                inRealm += \"   udp_preference_limit = 1\\n\";\n+                inRealm += \"   udp_preference_limit = 0\\n\";\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KdcPolicy.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.krb5.Config;\n+\n+\/*\n+ * @test\n+ * @bug 8333772\n+ * @summary check krb5.conf reading on default and realm-specific values\n+ * @library \/test\/lib\n+ *\/\n+public class RealmSpecificValues {\n+\n+    static DebugMatcher cm = new DebugMatcher();\n+\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"sun.security.krb5.debug\", \"true\");\n+        System.setProperty(\"java.security.krb5.conf\", \"alternative-krb5.conf\");\n+\n+        \/\/ Defaults\n+        writeConf(-1, -1, -1, -1, -1, -1);\n+        test(true, 3, 30000);\n+\n+        \/\/ Below has settings. For each setting we provide 3 cases:\n+        \/\/ 1. Set in defaults, 2, set in realms, 3, both\n+\n+        \/\/ udp = 0 is useful\n+        writeConf(0, -1, -1, -1, -1, -1);\n+        test(false, 3, 30000);\n+        writeConf(-1, -1, -1, 0, -1, -1);\n+        test(false, 3, 30000);\n+        writeConf(1, -1, -1, 0, -1, -1);\n+        test(false, 3, 30000);\n+\n+        \/\/ max_retries = 0 is ignored\n+        writeConf(-1, 0, -1, -1, -1, -1);\n+        test(true, 3, 30000);\n+        writeConf(-1, -1, -1, -1, 0, -1);\n+        test(true, 3, 30000);\n+        writeConf(-1, 6, -1, -1, 0, -1); \/\/ Note: 0 is ignored, it does not reset to default\n+        test(true, 6, 30000);\n+\n+        \/\/ max_retries = 1 is useful\n+        writeConf(-1, 1, -1, -1, -1, -1);\n+        test(true, 1, 30000);\n+        writeConf(-1, -1, -1, -1, 1, -1);\n+        test(true, 1, 30000);\n+        writeConf(-1, 3, -1, -1, 1, -1);\n+        test(true, 1, 30000);\n+\n+        \/\/ timeout = 0 is ignored\n+        writeConf(-1, -1, 0, -1, -1, -1);\n+        test(true, 3, 30000);\n+        writeConf(-1, -1, -1, -1, -1, 0);\n+        test(true, 3, 30000);\n+        writeConf(-1, -1, 10000, -1, -1, 0);\n+        test(true, 3, 10000);\n+\n+        \/\/ timeout > 0 is useful\n+        writeConf(-1, -1, 10000, -1, -1, -1);\n+        test(true, 3, 10000);\n+        writeConf(-1, -1, -1, -1, -1, 10000);\n+        test(true, 3, 10000);\n+        writeConf(-1, -1, 20000, -1, -1, 10000);\n+        test(true, 3, 10000);\n+    }\n+\n+    static void writeConf(int limit, int retries, int timeout,\n+            int limitR, int retriesR, int timeoutR) throws Exception {\n+\n+        String inDefaults = \"\";\n+        if (limit >= 0) inDefaults += \"udp_preference_limit = \" + limit + \"\\n\";\n+        if (retries >= 0) inDefaults += \"max_retries = \" + retries + \"\\n\";\n+        if (timeout >= 0) inDefaults += \"kdc_timeout = \" + timeout + \"\\n\";\n+\n+        String inRealm = \"\";\n+        if (limitR >= 0) inRealm += \"udp_preference_limit = \" + limitR + \"\\n\";\n+        if (retriesR >= 0) inRealm += \"max_retries = \" + retriesR + \"\\n\";\n+        if (timeoutR >= 0) inRealm += \"kdc_timeout = \" + timeoutR + \"\\n\";\n+\n+        String conf = \"[libdefaults]\\n\" +\n+                \"default_realm = \" + OneKDC.REALM + \"\\n\" +\n+                inDefaults +\n+                \"\\n\" +\n+                \"[realms]\\n\" +\n+                OneKDC.REALM + \" = {\\n\" +\n+                \"kdc = \" + OneKDC.KDCHOST + \":12345\\n\" +\n+                inRealm +\n+                \"}\\n\";\n+\n+        Files.writeString(Paths.get(\"alternative-krb5.conf\"), conf);\n+    }\n+\n+    static void test(boolean isUDP, int retries, int timeout) throws Exception {\n+\n+        PrintStream oldErr = System.err;\n+        ByteArrayOutputStream bo = new ByteArrayOutputStream();\n+        System.setErr(new PrintStream(bo));\n+        try {\n+            Config.refresh();\n+            Context.fromUserPass(OneKDC.USER, OneKDC.PASS, false);\n+        } catch (Exception e) {\n+            \/\/ will happen\n+        } finally {\n+            System.setErr(oldErr);\n+        }\n+\n+        String[] lines = new String(bo.toByteArray()).split(\"\\n\");\n+        for (String line: lines) {\n+            if (cm.match(line)) {\n+                System.out.println(line);\n+                Asserts.assertEQ(cm.isUDP(), isUDP);\n+                Asserts.assertEQ(cm.timeout(), timeout);\n+                Asserts.assertEQ(cm.retries(), retries);\n+                return;\n+            }\n+        }\n+        Asserts.fail(\"Should not reach here\");\n+    }\n+\n+    \/**\n+     * A helper class to match the krb5 debug output:\n+     * >>> KrbKdcReq send: kdc=kdc.rabbit.hole TCP:12345, timeout=30000,\n+     *     number of retries =3, #bytes=141\n+     *\/\n+    static class DebugMatcher {\n+\n+        static final Pattern re = Pattern.compile(\n+                \">>> KrbKdcReq send: kdc=\\\\S+ (TCP|UDP):\\\\d+, \" +\n+                        \"timeout=(\\\\d+), number of retries\\\\s*=(\\\\d+)\");\n+\n+        Matcher matcher;\n+\n+        boolean match(String line) {\n+            matcher = re.matcher(line);\n+            return matcher.find();\n+        }\n+\n+        boolean isUDP() {\n+            return matcher.group(1).equals(\"UDP\");\n+        }\n+\n+        int timeout() {\n+            return Integer.parseInt(matcher.group(2));\n+        }\n+\n+        int retries() {\n+            return Integer.parseInt(matcher.group(3));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/RealmSpecificValues.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"}]}