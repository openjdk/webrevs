{"files":[{"patch":"@@ -932,3 +932,2 @@\n-    if (_thread->is_in_any_VTMS_transition()) {\n-      return; \/\/ no events should be posted if thread is in any VTMS transition\n-    }\n+    assert(!_thread->is_in_any_VTMS_transition(), \"CFLH events are not allowed in any VTMS transition\");\n+\n@@ -968,3 +967,0 @@\n-    if (_thread->is_in_any_VTMS_transition()) {\n-      return; \/\/ no events should be posted if thread is in any VTMS transition\n-    }\n@@ -1100,0 +1096,3 @@\n+  if (JavaThread::current()->is_in_any_VTMS_transition()) {\n+    return false; \/\/ no events should be posted if thread is in any VTMS transition\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary javaagent + tracePinnedThreads will cause jvm crash\/ run into deadlock when the virtual thread is pinned\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @requires os.arch != \"riscv64\"\n+ * @modules java.base\/java.lang:+open\n+ * @build TestPinCaseWithCFLH\n+ * @run driver jdk.test.lib.util.JavaAgentBuilder\n+ *      TestPinCaseWithCFLH TestPinCaseWithCFLH.jar\n+ * @run main\/othervm\/timeout=100  -Djdk.virtualThreadScheduler.maxPoolSize=1 -Djdk.tracePinnedThreads=full -javaagent:TestPinCaseWithCFLH.jar TestPinCaseWithCFLH\n+ *\/\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+\n+public class TestPinCaseWithCFLH {\n+\n+    public static class TestClassFileTransformer implements ClassFileTransformer {\n+        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+            return classfileBuffer;\n+        }\n+    }\n+\n+    \/\/ Called when agent is loaded at startup\n+    public static void premain(String agentArgs, Instrumentation instrumentation) throws Exception {\n+        instrumentation.addTransformer(new TestClassFileTransformer());\n+    }\n+\n+    private static int result = 0;\n+\n+    public static void main(String[] args) throws Exception{\n+        Thread t1 = Thread.ofVirtual().name(\"vthread-1\").start(() -> {\n+            result = nativeFuncPin(1);\n+        });\n+        t1.join();\n+        assert result == 4;\n+    }\n+\n+    static int native2Java(int b) {\n+        try {\n+            Thread.sleep(500); \/\/ try yield, will pin, javaagent + tracePinnedThreads should not lead to crash (because of the class `PinnedThreadPrinter`)\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        return b+1;\n+    }\n+\n+    private static native int nativeFuncPin(int x);\n+\n+    static {\n+        System.loadLibrary(\"TestPinCaseWithCFLH\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/TestPinCaseWithCFLH\/TestPinCaseWithCFLH.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+\n+extern \"C\" {\n+\n+JNIEXPORT jint JNICALL\n+Java_TestPinCaseWithCFLH_nativeFuncPin(JNIEnv* env, jclass klass, jint x) {\n+    jmethodID m = env->GetStaticMethodID(klass, \"native2Java\", \"(I)I\");\n+    jint r = env->CallStaticIntMethod(klass, m, x+1);\n+    return r + 1;\n+}\n+\n+} \/\/ extern \"C\"\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/TestPinCaseWithCFLH\/libTestPinCaseWithCFLH.cpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary javaagent+tracePinnedThreads will cause jvm crash\/ run into deadlock when the virtual thread is pinned\n- * @library \/test\/lib\n- * @requires os.family == \"linux\"\n- * @requires os.arch != \"riscv64\"\n- * @modules java.base\/java.lang:+open\n- * @build TestPinCaseWithTrace\n- * @run driver jdk.test.lib.util.JavaAgentBuilder\n- *      TestPinCaseWithTrace TestPinCaseWithTrace.jar\n- * @run main\/othervm\/timeout=100  -Djdk.virtualThreadScheduler.maxPoolSize=1 -Djdk.tracePinnedThreads=full -javaagent:TestPinCaseWithTrace.jar TestPinCaseWithTrace\n- *\/\n-import java.lang.instrument.ClassFileTransformer;\n-import java.lang.instrument.IllegalClassFormatException;\n-import java.lang.instrument.Instrumentation;\n-import java.security.ProtectionDomain;\n-\n-public class TestPinCaseWithTrace {\n-\n-    public static class TestClassFileTransformer implements ClassFileTransformer {\n-        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n-            return classfileBuffer;\n-        }\n-    }\n-\n-    \/\/ Called when agent is loaded at startup\n-    public static void premain(String agentArgs, Instrumentation instrumentation) throws Exception {\n-        instrumentation.addTransformer(new TestClassFileTransformer());\n-    }\n-\n-    public static void main(String[] args) throws Exception{\n-        Thread t1 = Thread.ofVirtual().name(\"vthread-1\").start(() -> {\n-            System.out.println(\"call native: \" + nativeFuncPin(1));\n-        });\n-        t1.join();\n-    }\n-\n-    static int native2Java(int b) {\n-        try {\n-            Thread.sleep(500); \/\/ try yield, will pin, javaagent + tracePinnedThreads will crash here (because of the class `PinnedThreadPrinter`)\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        return b+1;\n-    }\n-\n-    private static native int nativeFuncPin(int x);\n-\n-    static {\n-        System.loadLibrary(\"PinJNI\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadTraceWithAgent\/TestPinCaseWithTrace.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"jni.h\"\n-\n-JNIEXPORT jint JNICALL\n-Java_TestPinCaseWithTrace_nativeFuncPin(JNIEnv* env, jclass klass, jint x) {\n-    jmethodID m = (*env)->GetStaticMethodID(env, klass, \"native2Java\", \"(I)I\");\n-    jint r = (*env)->CallStaticIntMethod(env, klass, m, x+1);\n-    return r + 1;\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadTraceWithAgent\/libPinJNI.c","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"}]}