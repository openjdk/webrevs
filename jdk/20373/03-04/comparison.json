{"files":[{"patch":"@@ -1093,3 +1093,1 @@\n-  if (JavaThread::current()->is_in_tmp_VTMS_transition()) {\n-    return false; \/\/ skip CFLH events in tmp VTMS transition\n-  }\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm\/timeout=100  -Djdk.virtualThreadScheduler.maxPoolSize=1 -Djdk.tracePinnedThreads=full -javaagent:TestPinCaseWithCFLH.jar TestPinCaseWithCFLH\n+ * @run main\/othervm\/timeout=100  -Djdk.virtualThreadScheduler.maxPoolSize=1 -Djdk.tracePinnedThreads=full --enable-native-access=ALL-UNNAMED -javaagent:TestPinCaseWithCFLH.jar TestPinCaseWithCFLH\n@@ -40,0 +40,1 @@\n+import jdk.test.lib.thread.VThreadPinner;\n@@ -58,1 +59,7 @@\n-            result = nativeFuncPin(1);\n+            VThreadPinner.runPinned(() -> {\n+                try {\n+                    Thread.sleep(500); \/\/ try yield, will pin, javaagent + tracePinnedThreads should not lead to crash (because of the class `PinnedThreadPrinter`)\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            });\n@@ -61,1 +68,0 @@\n-        assert result == 4;\n@@ -64,15 +70,0 @@\n-    static int native2Java(int b) {\n-        try {\n-            Thread.sleep(500); \/\/ try yield, will pin, javaagent + tracePinnedThreads should not lead to crash (because of the class `PinnedThreadPrinter`)\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        return b+1;\n-    }\n-\n-    private static native int nativeFuncPin(int x);\n-\n-    static {\n-        System.loadLibrary(\"TestPinCaseWithCFLH\");\n-    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/TestPinCaseWithCFLH\/TestPinCaseWithCFLH.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-\n-extern \"C\" {\n-\n-JNIEXPORT jint JNICALL\n-Java_TestPinCaseWithCFLH_nativeFuncPin(JNIEnv* env, jclass klass, jint x) {\n-    jmethodID m = env->GetStaticMethodID(klass, \"native2Java\", \"(I)I\");\n-    jint r = env->CallStaticIntMethod(klass, m, x+1);\n-    return r + 1;\n-}\n-\n-} \/\/ extern \"C\"\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/TestPinCaseWithCFLH\/libTestPinCaseWithCFLH.cpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"}]}