{"files":[{"patch":"@@ -4205,0 +4205,4 @@\n+        if (tree.var.isImplicitlyTyped()) {\n+            setSyntheticVariableType(tree.var, type == Type.noType ? syms.errType\n+                                                                   : type);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8332725\n+ * @summary Verify the AST model works correctly for binding patterns with var\n+ *\/\n+\n+import com.sun.source.tree.BindingPatternTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import com.sun.source.util.TreeScanner;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+public class BindingPatternVarTypeModel {\n+    private final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+\n+    public static void main(String... args) throws Exception {\n+        new BindingPatternVarTypeModel().run();\n+    }\n+\n+    private void run() throws Exception {\n+        JavaFileObject input =\n+                SimpleJavaFileObject.forSource(URI.create(\"mem:\/\/Test.java\"),\n+                                               \"\"\"\n+                                               public class Test {\n+                                                   record R(int i) {}\n+                                                   int test(Object o) {\n+                                                       return switch (o) {\n+                                                           case R(var v) -> 0;\n+                                                           default -> 0;\n+                                                       };\n+                                                   }\n+                                               }\n+                                               \"\"\");\n+        JavacTask task =\n+                (JavacTask) compiler.getTask(null, null, null, null, null, List.of(input));\n+        CompilationUnitTree cut = task.parse().iterator().next();\n+\n+        task.analyze();\n+\n+        AtomicBoolean foundBindingPattern = new AtomicBoolean();\n+\n+        new TreeScanner<Void, Void>() {\n+            @Override\n+            public Void visitBindingPattern(BindingPatternTree node, Void p) {\n+                if (node.getVariable().getType().getKind() != Tree.Kind.PRIMITIVE_TYPE) {\n+                    throw new AssertionError(\"Unexpected type for var: \" +\n+                                             node.getVariable().getType().getKind() +\n+                                             \":\" + node.getVariable().getType());\n+                }\n+                foundBindingPattern.set(true);\n+                return super.visitBindingPattern(node, p);\n+            }\n+        }.scan(cut, null);\n+\n+        if (!foundBindingPattern.get()) {\n+            throw new AssertionError(\"Didn't find the binding pattern!\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingPatternVarTypeModel.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}