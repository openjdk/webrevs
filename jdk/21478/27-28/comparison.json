{"files":[{"patch":"@@ -43,1 +43,1 @@\n-    \n+\n@@ -449,1 +449,2 @@\n-                throw new InvalidKeyException(\"Coefficients in public key not in specified range\");\n+                throw new InvalidKeyException(\n+                    \"Coefficients in public key not in specified range\");\n@@ -492,1 +493,2 @@\n-        byte[] encapsKey = kPkeKeyPair.publicKey.keyBytes; \/\/encaps key = kPke encryption key\n+        \/\/encaps key = kPke encryption key\n+        byte[] encapsKey = kPkeKeyPair.publicKey.keyBytes;\n@@ -499,1 +501,2 @@\n-        System.arraycopy(encapsKey, 0, decapsKey, kPkePrivateKey.length, encapsKey.length);\n+        System.arraycopy(encapsKey, 0, decapsKey,\n+            kPkePrivateKey.length, encapsKey.length);\n@@ -508,1 +511,2 @@\n-        System.arraycopy(kem_z, 0, decapsKey, kPkePrivateKey.length + encapsKey.length + 32, 32);\n+        System.arraycopy(kem_z, 0, decapsKey,\n+            kPkePrivateKey.length + encapsKey.length + 32, 32);\n@@ -542,2 +546,2 @@\n-                              K_PKE_CipherText cipherText)\n-            throws DecapsulateException {\n+                                 K_PKE_CipherText cipherText)\n+        throws DecapsulateException {\n@@ -562,1 +566,3 @@\n-        System.arraycopy(decapsKeyBytes, 0, kPkePrivateKeyBytes, 0, kPkePrivateKeyBytes.length);\n+        System.arraycopy(decapsKeyBytes, 0, kPkePrivateKeyBytes, 0,\n+            kPkePrivateKeyBytes.length);\n+\n@@ -1106,1 +1112,3 @@\n-    private static void implMlKemNttMultJava(short[] result, short[] ntta, short[] nttb) {\n+    private static void implMlKemNttMultJava(short[] result,\n+                                             short[] ntta, short[] nttb) {\n+\n@@ -1165,1 +1173,3 @@\n-    private static void implMlKemAddPolyJava(short[] result, short[] a, short[] b, short[] c) {\n+    private static void implMlKemAddPolyJava(short[] result, short[] a,\n+                                             short[] b, short[] c) {\n+\n@@ -1301,1 +1311,3 @@\n-    private static void implMlKem12To16(byte[] condensed, int index, short[] parsed, int parsedLength) {\n+    private static void implMlKem12To16(byte[] condensed, int index,\n+                                        short[] parsed, int parsedLength) {\n+\n@@ -1305,1 +1317,3 @@\n-    private static void implMlKem12To16Java(byte[] condensed, int index, short[] parsed, int parsedLength) {\n+    private static void implMlKem12To16Java(byte[] condensed, int index,\n+                                            short[] parsed, int parsedLength) {\n+\n@@ -1320,1 +1334,3 @@\n-    private void twelve2Sixteen(byte[] condensed, int index, short[] parsed, int parsedLength) {\n+    private void twelve2Sixteen(byte[] condensed, int index,\n+                                short[] parsed, int parsedLength) {\n+\n@@ -1487,3 +1503,3 @@\n-    \/\/ Precondition: -(2^MONT_R_BITS -1) * MONT_Q <= b * c < (2^MONT_R_BITS - 1) * MONT_Q .\n-    \/\/ Computes b * c * 2^-MONT_R_BITS mod MONT_Q .\n-    \/\/ The result is between  -MONT_Q and MONT_Q.\n+    \/\/ Precondition: -(2^MONT_R_BITS -1) * MONT_Q <= b * c < (2^MONT_R_BITS - 1) * MONT_Q\n+    \/\/ Computes b * c * 2^-MONT_R_BITS mod MONT_Q\n+    \/\/ The result is between -MONT_Q and MONT_Q\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":32,"deletions":16,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -53,1 +53,3 @@\n-    public sealed static class KPG extends NamedKeyPairGenerator permits KPG2, KPG3, KPG5 {\n+    public sealed static class KPG\n+        extends NamedKeyPairGenerator permits KPG2, KPG3, KPG5 {\n+\n@@ -135,1 +137,3 @@\n-        protected byte[][] implEncapsulate(String name, byte[] encapsulationKey, Object ek, SecureRandom secureRandom) {\n+        protected byte[][] implEncapsulate(String name, byte[] encapsulationKey,\n+                                           Object ek, SecureRandom secureRandom) {\n+\n@@ -144,1 +148,2 @@\n-                        new ML_KEM.ML_KEM_EncapsulationKey(encapsulationKey), randomBytes);\n+                        new ML_KEM.ML_KEM_EncapsulationKey(\n+                            encapsulationKey), randomBytes);\n@@ -156,2 +161,4 @@\n-        protected byte[] implDecapsulate(String name, byte[] decapsulationKey, Object dk, byte[] cipherText)\n-                throws DecapsulateException {\n+        protected byte[] implDecapsulate(String name, byte[] decapsulationKey,\n+                                         Object dk, byte[] cipherText)\n+            throws DecapsulateException {\n+\n@@ -164,1 +171,2 @@\n-                        new ML_KEM.ML_KEM_DecapsulationKey(decapsulationKey), kpkeCipherText);\n+                        new ML_KEM.ML_KEM_DecapsulationKey(\n+                            decapsulationKey), kpkeCipherText);\n@@ -184,1 +192,3 @@\n-        protected Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n+        protected Object implCheckPublicKey(String name, byte[] pk)\n+            throws InvalidKeyException {\n+\n@@ -190,1 +200,3 @@\n-        protected Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n+        protected Object implCheckPrivateKey(String name, byte[] sk)\n+            throws InvalidKeyException {\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Impls.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"}]}