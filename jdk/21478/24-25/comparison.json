{"files":[{"patch":"@@ -43,3 +43,1 @@\n-\n-    \/\/ XOF_BLOCK_LEN + XOF_PAD should be divisible by 192 as that is\n-    \/\/ the granularity of what the intrinsics for twelve2Sixteen() can deal with\n+    \n@@ -357,1 +355,0 @@\n-    private final int mlKem_size;\n@@ -364,1 +361,1 @@\n-    final int encapsulationSize;\n+    private final int encapsulationSize;\n@@ -366,3 +363,3 @@\n-    public ML_KEM(int size) {\n-        switch (size) {\n-            case 512 -> {\n+    public ML_KEM(String name) {\n+        switch (name) {\n+            case \"ML-KEM-512\" -> {\n@@ -375,1 +372,1 @@\n-            case 768 -> {\n+            case \"ML-KEM-768\" -> {\n@@ -382,1 +379,1 @@\n-            case 1024 -> {\n+            case \"ML-KEM-1024\" -> {\n@@ -390,1 +387,2 @@\n-                    \"Invalid size for ML_KEM-\" + size);\n+                    \/\/ This should never happen.\n+                    \"Invalid algorithm name (\" + name + \").\");\n@@ -392,1 +390,0 @@\n-        mlKem_size = size;\n@@ -423,2 +420,3 @@\n-    protected record ML_KEM_KeyPair(ML_KEM_EncapsulationKey encapsulationKey,\n-                                 ML_KEM_DecapsulationKey decapsulationKey) {\n+    protected record ML_KEM_KeyPair(\n+            ML_KEM_EncapsulationKey encapsulationKey,\n+            ML_KEM_DecapsulationKey decapsulationKey) {\n@@ -431,0 +429,4 @@\n+    protected int getEncapsulationSize() {\n+        return encapsulationSize;\n+    }\n+\n@@ -479,4 +481,8 @@\n-    protected ML_KEM_KeyPair generateKemKeyPair(\n-        byte[] kem_d, byte[] kem_z)\n-        throws NoSuchAlgorithmException, DigestException {\n-        var mlKemH = MessageDigest.getInstance(HASH_H_NAME);\n+    protected ML_KEM_KeyPair generateKemKeyPair(byte[] kem_d, byte[] kem_z) {\n+        MessageDigest mlKemH;\n+        try {\n+            mlKemH = MessageDigest.getInstance(HASH_H_NAME);\n+        } catch (NoSuchAlgorithmException e) {\n+            \/\/ This should never happen.\n+            throw new RuntimeException(e);\n+        }\n@@ -496,1 +502,6 @@\n-        mlKemH.digest(decapsKey, kPkePrivateKey.length + encapsKey.length, 32);\n+        try {\n+            mlKemH.digest(decapsKey, kPkePrivateKey.length + encapsKey.length, 32);\n+        } catch (DigestException e) {\n+            \/\/ This should never happen.\n+            throw new RuntimeException(e);\n+        }\n@@ -505,4 +516,10 @@\n-            ML_KEM_EncapsulationKey encapsulationKey, byte[] randomMessage)\n-            throws NoSuchAlgorithmException, InvalidKeyException {\n-        var mlKemH = MessageDigest.getInstance(HASH_H_NAME);\n-        var mlKemG = MessageDigest.getInstance(HASH_G_NAME);\n+            ML_KEM_EncapsulationKey encapsulationKey, byte[] randomMessage) {\n+        MessageDigest mlKemH;\n+        MessageDigest mlKemG;\n+        try {\n+            mlKemH = MessageDigest.getInstance(HASH_H_NAME);\n+            mlKemG = MessageDigest.getInstance(HASH_G_NAME);\n+        } catch (NoSuchAlgorithmException e){\n+            \/\/ This should never happen.\n+            throw new RuntimeException(e);\n+        }\n@@ -526,2 +543,1 @@\n-            throws NoSuchAlgorithmException,\n-            InvalidKeyException, DecapsulateException {\n+            throws DecapsulateException {\n@@ -536,2 +552,8 @@\n-        var mlKemG = MessageDigest.getInstance(HASH_G_NAME);\n-        var mlKemJ = new SHAKE256(32);\n+        MessageDigest mlKemG;\n+        SHAKE256 mlKemJ;\n+        try {\n+            mlKemG = MessageDigest.getInstance(HASH_G_NAME);\n+            mlKemJ = new SHAKE256(32);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -592,4 +614,11 @@\n-    private K_PKE_KeyPair generateK_PkeKeyPair(byte[] seed)\n-            throws NoSuchAlgorithmException {\n-        var mlKemG = MessageDigest.getInstance(HASH_G_NAME);\n-        var mlKemJ = new SHAKE256(64 * mlKem_eta1);\n+    private K_PKE_KeyPair generateK_PkeKeyPair(byte[] seed) {\n+\n+        MessageDigest mlKemG;\n+        SHAKE256 mlKemJ;\n+        try {\n+            mlKemG = MessageDigest.getInstance(HASH_G_NAME);\n+            mlKemJ = new SHAKE256(64 * mlKem_eta1);\n+        } catch (NoSuchAlgorithmException e) {\n+            \/\/ This should never happen.\n+            throw new RuntimeException(e);\n+        }\n@@ -603,0 +632,1 @@\n+        Arrays.fill(rhoSigma, (byte)0);\n@@ -624,0 +654,1 @@\n+        Arrays.fill(sigma, (byte)0);\n@@ -626,1 +657,1 @@\n-        keyGenSHat = mlKemVectorReduce(keyGenSHat);\n+        mlKemVectorReduce(keyGenSHat);\n@@ -634,1 +665,0 @@\n-        byte[] encodedPoly;\n@@ -636,7 +666,4 @@\n-            encodedPoly = encodePoly(12, keyGenTHat[i]);\n-            System.arraycopy(encodedPoly, 0,\n-                    pkEncoded, i * ((ML_KEM_N * 12) \/ 8), (ML_KEM_N * 12) \/ 8);\n-            encodedPoly = encodePoly(12, keyGenSHat[i]);\n-            System.arraycopy(encodedPoly, 0,\n-                    skEncoded, i * ((ML_KEM_N * 12) \/ 8), (ML_KEM_N * 12) \/ 8);\n-            Arrays.fill(encodedPoly, (byte)0);\n+            encodePoly12(keyGenTHat[i], pkEncoded, i * ((ML_KEM_N * 12) \/ 8));\n+            encodePoly12(keyGenSHat[i], skEncoded, i * ((ML_KEM_N * 12) \/ 8));\n+            Arrays.fill(keyGenEHat[i], (short) 0);\n+            Arrays.fill(keyGenSHat[i], (short) 0);\n@@ -647,1 +674,0 @@\n-\n@@ -721,0 +747,3 @@\n+        for (int i = 0; i < mlKem_k; i++) {\n+            Arrays.fill(decryptSHat[i], (short) 0);\n+        }\n@@ -722,0 +751,1 @@\n+        Arrays.fill(decryptSU, (short) 0);\n@@ -812,1 +842,1 @@\n-            \/\/ This cannot happen since xofBufArr is of the correct size\n+            \/\/ This should never happen since xofBufArr is of the correct size\n@@ -879,2 +909,2 @@\n-            \/\/ We'll calculate values for both halves of each sequence and\n-            \/\/ do teh subtraction to get the sample\n+            \/\/ We calculate values for both halves of each sequence and\n+            \/\/ do the subtraction to get the sample\n@@ -936,2 +966,1 @@\n-\/\/    @IntrinsicCandidate\n-    static int implMlKemNtt(short[] poly, short[] ntt_zetas) {\n+    static void implMlKemNtt(short[] poly, short[] ntt_zetas) {\n@@ -939,1 +968,0 @@\n-        return 1;\n@@ -960,2 +988,1 @@\n-\/\/    @IntrinsicCandidate\n-    static int implMlKemInverseNtt(short[] poly, short[] zetas) {\n+    static void implMlKemInverseNtt(short[] poly, short[] zetas) {\n@@ -963,1 +990,0 @@\n-        return 1;\n@@ -1075,2 +1101,1 @@\n-\/\/    @IntrinsicCandidate\n-    static int implMlKemNttMult(short[] result, short[] ntta, short[] nttb,\n+    static void implMlKemNttMult(short[] result, short[] ntta, short[] nttb,\n@@ -1079,1 +1104,0 @@\n-        return 1;\n@@ -1117,2 +1141,1 @@\n-\/\/    @IntrinsicCandidate\n-    static int implMlKemAddPoly(short[] result, short[] a, short[] b) {\n+    static void implMlKemAddPoly(short[] result, short[] a, short[] b) {\n@@ -1120,1 +1143,0 @@\n-        return 1;\n@@ -1139,2 +1161,1 @@\n-\/\/    @IntrinsicCandidate\n-    static int implMlKemAddPoly(short[] result, short[] a, short[] b, short[] c) {\n+    static void implMlKemAddPoly(short[] result, short[] a, short[] b, short[] c) {\n@@ -1142,1 +1163,0 @@\n-        return 1;\n@@ -1194,1 +1214,1 @@\n-    private static void encodePoly12(short[] poly, byte[] result) {\n+    private static void encodePoly12(short[] poly, byte[] result, int resultOffs) {\n@@ -1205,3 +1225,3 @@\n-            result[m * 3] = (byte) low;\n-            result[m * 3 + 1] = (byte) ((high << 4) + (low >> 8));\n-            result[m * 3 + 2] = (byte) (high >> 4);\n+            result[resultOffs++] = (byte) low;\n+            result[resultOffs++] = (byte) ((high << 4) + (low >> 8));\n+            result[resultOffs++] = (byte) (high >> 4);\n@@ -1223,3 +1243,1 @@\n-        if (l == 12) {\n-            encodePoly12(poly, result);\n-        } else if (l == 4) {\n+        if (l == 4) {\n@@ -1283,2 +1301,1 @@\n-\/\/    @IntrinsicCandidate\n-    private static int implMlKem12To16(byte[] condensed, int index, short[] parsed, int parsedLength) {\n+    private static void implMlKem12To16(byte[] condensed, int index, short[] parsed, int parsedLength) {\n@@ -1286,1 +1303,0 @@\n-        return 1;\n@@ -1446,2 +1462,1 @@\n-\/\/    @IntrinsicCandidate\n-    static int implMlKemBarrettReduce(short[] coeffs) {\n+    static void implMlKemBarrettReduce(short[] coeffs) {\n@@ -1449,1 +1464,0 @@\n-        return 1;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":86,"deletions":72,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            ML_KEM mlKem = new ML_KEM(name);\n@@ -75,2 +75,0 @@\n-            } catch (NoSuchAlgorithmException | DigestException e) {\n-                throw new ProviderException(\"provider error\", e);\n@@ -142,1 +140,1 @@\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            ML_KEM mlKem = new ML_KEM(name);\n@@ -147,2 +145,0 @@\n-            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n-                throw new ProviderException(\"Provider error\", e); \/\/ should not happen\n@@ -162,1 +158,1 @@\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            ML_KEM mlKem = new ML_KEM(name);\n@@ -169,2 +165,0 @@\n-            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n-                throw new ProviderException(\"Provider error\", e); \/\/ should not happen\n@@ -185,2 +179,2 @@\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n-            return mlKem.encapsulationSize;\n+            ML_KEM mlKem = new ML_KEM(name);\n+            return mlKem.getEncapsulationSize();\n@@ -191,1 +185,1 @@\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            ML_KEM mlKem = new ML_KEM(name);\n@@ -197,1 +191,1 @@\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            ML_KEM mlKem = new ML_KEM(name);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Impls.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"}]}