{"files":[{"patch":"@@ -364,1 +364,1 @@\n-    public final int encapsulationSize;\n+    final int encapsulationSize;\n@@ -551,0 +551,5 @@\n+\n+        \/\/ Zero out unused byte arrays containing sensitive data\n+        Arrays.fill(kPkePrivateKeyBytes, (byte) 0);\n+        Arrays.fill(kAndCoins, (byte) 0);\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,227 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.crypto.provider;\n+\n+import sun.security.jca.JCAUtil;\n+import sun.security.provider.NamedKEM;\n+import sun.security.provider.NamedKeyFactory;\n+import sun.security.provider.NamedKeyPairGenerator;\n+\n+import java.security.*;\n+import java.util.Arrays;\n+\n+import javax.crypto.DecapsulateException;\n+\n+public final class ML_KEM_Impls {\n+\n+    static int name2int(String name) {\n+        if (name.endsWith(\"512\")) {\n+            return 512;\n+        } else if (name.endsWith(\"768\")) {\n+            return 768;\n+        } else if (name.endsWith(\"1024\")) {\n+            return 1024;\n+        } else {\n+            \/\/ should not happen\n+            throw new ProviderException(\"Unknown name \" + name);\n+        }\n+    }\n+\n+    public sealed static class KPG extends NamedKeyPairGenerator {\n+        public KPG() {\n+            \/\/ ML-KEM-768 is the default\n+            super(\"ML-KEM\", \"ML-KEM-768\", \"ML-KEM-512\", \"ML-KEM-1024\");\n+        }\n+\n+        protected KPG(String pname) {\n+            super(\"ML-KEM\", pname);\n+        }\n+\n+        @Override\n+        protected byte[][] implGenerateKeyPair(String name, SecureRandom random) {\n+            byte[] seed = new byte[32];\n+            var r = random != null ? random : JCAUtil.getDefSecureRandom();\n+            r.nextBytes(seed);\n+            byte[] z = new byte[32];\n+            r.nextBytes(z);\n+\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            ML_KEM.ML_KEM_KeyPair kp;\n+            try {\n+                kp = mlKem.generateKemKeyPair(seed, z);\n+            } catch (NoSuchAlgorithmException | DigestException e) {\n+                throw new ProviderException(\"provider error\", e);\n+            } finally {\n+                Arrays.fill(seed, (byte)0);\n+                Arrays.fill(z, (byte)0);\n+            }\n+            return new byte[][] {\n+                    kp.encapsulationKey().keyBytes(),\n+                    kp.decapsulationKey().keyBytes()\n+            };\n+        }\n+    }\n+\n+    public final static class KPG2 extends KPG {\n+        public KPG2() {\n+            super(\"ML-KEM-512\");\n+        }\n+    }\n+\n+    public final static class KPG3 extends KPG {\n+        public KPG3() {\n+            super(\"ML-KEM-768\");\n+        }\n+    }\n+\n+    public final static class KPG5 extends KPG {\n+        public KPG5() {\n+            super(\"ML-KEM-1024\");\n+        }\n+    }\n+\n+    public sealed static class KF extends NamedKeyFactory {\n+        public KF() {\n+            super(\"ML-KEM\", \"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\");\n+        }\n+        public KF(String name) {\n+            super(\"ML-KEM\", name);\n+        }\n+    }\n+\n+    public final static class KF2 extends KF {\n+        public KF2() {\n+            super(\"ML-KEM-512\");\n+        }\n+    }\n+\n+    public final static class KF3 extends KF {\n+        public KF3() {\n+            super(\"ML-KEM-768\");\n+        }\n+    }\n+\n+    public final static class KF5 extends KF {\n+        public KF5() {\n+            super(\"ML-KEM-1024\");\n+        }\n+    }\n+\n+    public sealed static class K extends NamedKEM permits K2, K3, K5 {\n+        private static final int SEED_SIZE = 32;\n+\n+        @Override\n+        protected byte[][] implEncapsulate(String name, byte[] encapsulationKey, Object ek, SecureRandom secureRandom) {\n+            byte[] randomBytes = new byte[SEED_SIZE];\n+            var r = secureRandom != null ? secureRandom : JCAUtil.getDefSecureRandom();\n+            r.nextBytes(randomBytes);\n+\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            ML_KEM.ML_KEM_EncapsulateResult mlKemEncapsulateResult = null;\n+            try {\n+                mlKemEncapsulateResult = mlKem.encapsulate(\n+                        new ML_KEM.ML_KEM_EncapsulationKey(encapsulationKey), randomBytes);\n+            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n+                throw new ProviderException(\"Provider error\", e); \/\/ should not happen\n+            } finally {\n+                Arrays.fill(randomBytes, (byte) 0);\n+            }\n+\n+            return new byte[][] {\n+                mlKemEncapsulateResult.cipherText().encryptedBytes(),\n+                mlKemEncapsulateResult.sharedSecret()\n+            };\n+        }\n+\n+        @Override\n+        protected byte[] implDecapsulate(String name, byte[] decapsulationKey, Object dk, byte[] cipherText)\n+                throws DecapsulateException {\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            var kpkeCipherText = new ML_KEM.K_PKE_CipherText(cipherText);\n+\n+            byte[] decapsulateResult;\n+            try {\n+                decapsulateResult = mlKem.decapsulate(\n+                        new ML_KEM.ML_KEM_DecapsulationKey(decapsulationKey), kpkeCipherText);\n+            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n+                throw new ProviderException(\"Provider error\", e); \/\/ should not happen\n+            } catch (DecapsulateException e) {\n+                throw new DecapsulateException(\"Decapsulate error\", e) ;\n+            }\n+\n+            return decapsulateResult;\n+        }\n+\n+        @Override\n+        protected int implSecretSize(String name) {\n+            return ML_KEM.SECRET_SIZE;\n+        }\n+\n+        @Override\n+        protected int implEncapsulationSize(String name) {\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            return mlKem.encapsulationSize;\n+        }\n+\n+        @Override\n+        protected Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            return mlKem.checkPublicKey(pk);\n+        }\n+\n+        @Override\n+        protected Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            return mlKem.checkPrivateKey(sk);\n+        }\n+\n+        public K() {\n+            super(\"ML-KEM\", \"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\");\n+        }\n+\n+        public K(String name) {\n+            super(\"ML-KEM\", name);\n+        }\n+    }\n+\n+    public final static class K2 extends K {\n+        public K2() {\n+            super(\"ML-KEM-512\");\n+        }\n+    }\n+\n+    public final static class K3 extends K {\n+        public K3() {\n+            super(\"ML-KEM-768\");\n+        }\n+    }\n+\n+    public final static class K5 extends K {\n+        public K5() {\n+            super(\"ML-KEM-1024\");\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Impls.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"},{"patch":"@@ -1,224 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.crypto.provider;\n-\n-import sun.security.jca.JCAUtil;\n-import sun.security.provider.NamedKEM;\n-import sun.security.provider.NamedKeyFactory;\n-import sun.security.provider.NamedKeyPairGenerator;\n-\n-import java.security.*;\n-import java.util.Arrays;\n-\n-import javax.crypto.DecapsulateException;\n-\n-public final class ML_KEM_Provider {\n-\n-    static int name2int(String name) {\n-        if (name.endsWith(\"512\")) {\n-            return 512;\n-        } else if (name.endsWith(\"768\")) {\n-            return 768;\n-        } else if (name.endsWith(\"1024\")) {\n-            return 1024;\n-        } else {\n-            \/\/ should not happen\n-            throw new ProviderException(\"Unknown name \" + name);\n-        }\n-    }\n-\n-    public static class KPG extends NamedKeyPairGenerator {\n-        public KPG() {\n-            \/\/ ML-KEM-768 is the default\n-            super(\"ML-KEM\", \"ML-KEM-768\", \"ML-KEM-512\", \"ML-KEM-1024\");\n-        }\n-\n-        protected KPG(String pname) {\n-            super(\"ML-KEM\", pname);\n-        }\n-\n-        @Override\n-        public byte[][] implGenerateKeyPair(String name, SecureRandom random) {\n-            byte[] seed = new byte[32];\n-            var r = random != null ? random : JCAUtil.getDefSecureRandom();\n-            r.nextBytes(seed);\n-            byte[] z = new byte[32];\n-            r.nextBytes(z);\n-\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n-            ML_KEM.ML_KEM_KeyPair kp;\n-            try {\n-                kp = mlKem.generateKemKeyPair(seed, z);\n-            } catch (NoSuchAlgorithmException | DigestException e) {\n-                throw new ProviderException(\"provider error\", e);\n-            } finally {\n-                Arrays.fill(seed, (byte)0);\n-                Arrays.fill(z, (byte)0);\n-            }\n-            return new byte[][] {\n-                    kp.encapsulationKey().keyBytes(),\n-                    kp.decapsulationKey().keyBytes()\n-            };\n-        }\n-    }\n-\n-    public static class KPG2 extends KPG {\n-        public KPG2() {\n-            super(\"ML-KEM-512\");\n-        }\n-    }\n-\n-    public static class KPG3 extends KPG {\n-        public KPG3() {\n-            super(\"ML-KEM-768\");\n-        }\n-    }\n-\n-    public static class KPG5 extends KPG {\n-        public KPG5() {\n-            super(\"ML-KEM-1024\");\n-        }\n-    }\n-\n-    public static class KF extends NamedKeyFactory {\n-        public KF() {\n-            super(\"ML-KEM\", \"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\");\n-        }\n-        public KF(String name) {\n-            super(\"ML-KEM\", name);\n-        }\n-    }\n-\n-    public static class KF2 extends KF {\n-        public KF2() {\n-            super(\"ML-KEM-512\");\n-        }\n-    }\n-\n-    public static class KF3 extends KF {\n-        public KF3() {\n-            super(\"ML-KEM-768\");\n-        }\n-    }\n-\n-    public static class KF5 extends KF {\n-        public KF5() {\n-            super(\"ML-KEM-1024\");\n-        }\n-    }\n-\n-    public static class K extends NamedKEM {\n-        private static final int SEED_SIZE = 32;\n-\n-        @Override\n-        public byte[][] implEncapsulate(String name, byte[] encapsulationKey, Object ek, SecureRandom secureRandom) {\n-            byte[] randomBytes = new byte[SEED_SIZE];\n-            var r = secureRandom != null ? secureRandom : JCAUtil.getDefSecureRandom();\n-            r.nextBytes(randomBytes);\n-\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n-            ML_KEM.ML_KEM_EncapsulateResult mlKemEncapsulateResult = null;\n-            try {\n-                mlKemEncapsulateResult = mlKem.encapsulate(\n-                        new ML_KEM.ML_KEM_EncapsulationKey(encapsulationKey), randomBytes);\n-            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n-                throw new ProviderException(\"provider error\", e); \/\/ should not happen\n-            } finally {\n-                Arrays.fill(randomBytes, (byte) 0);\n-            }\n-\n-            return new byte[][] {\n-                mlKemEncapsulateResult.cipherText().encryptedBytes(),\n-                mlKemEncapsulateResult.sharedSecret()\n-            };\n-        }\n-\n-        @Override\n-        public byte[] implDecapsulate(String name, byte[] decapsulationKey, Object dk, byte[] cipherText) {\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n-            var kpkeCipherText = new ML_KEM.K_PKE_CipherText(cipherText);\n-\n-            byte[] decapsulateResult;\n-            try {\n-                decapsulateResult = mlKem.decapsulate(\n-                        new ML_KEM.ML_KEM_DecapsulationKey(decapsulationKey), kpkeCipherText);\n-            } catch (NoSuchAlgorithmException | InvalidKeyException | DecapsulateException e) {\n-                throw new ProviderException(\"provider error\", e); \/\/ should not happen\n-            }\n-\n-            return decapsulateResult;\n-        }\n-\n-        @Override\n-        public int implSecretSize(String name) {\n-            return ML_KEM.SECRET_SIZE;\n-        }\n-\n-        @Override\n-        public int implEncapsulationSize(String name) {\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n-            return mlKem.encapsulationSize;\n-        }\n-\n-        @Override\n-        public Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n-            return mlKem.checkPublicKey(pk);\n-        }\n-\n-        @Override\n-        public Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n-            ML_KEM mlKem = new ML_KEM(name2int(name));\n-            return mlKem.checkPrivateKey(sk);\n-        }\n-\n-        public K() {\n-            super(\"ML-KEM\", \"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\");\n-        }\n-\n-        public K(String name) {\n-            super(\"ML-KEM\", name);\n-        }\n-    }\n-\n-    public static class K2 extends K {\n-        public K2() {\n-            super(\"ML-KEM-512\");\n-        }\n-    }\n-\n-    public static class K3 extends K {\n-        public K3() {\n-            super(\"ML-KEM-768\");\n-        }\n-    }\n-\n-    public static class K5 extends K {\n-        public K5() {\n-            super(\"ML-KEM-1024\");\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Provider.java","additions":0,"deletions":224,"binary":false,"changes":224,"status":"deleted"},{"patch":"@@ -94,6 +94,0 @@\n-\n-    public static final class Shake256Parallel extends SHA3Parallel {\n-        public Shake256Parallel(byte[][] buf) throws InvalidAlgorithmParameterException {\n-            super(buf, 136);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SHA3Parallel.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -773,14 +773,14 @@\n-        ps(\"KEM\", \"ML-KEM\", \"com.sun.crypto.provider.ML_KEM_Provider$K\", null, attrs);\n-        psA(\"KEM\", \"ML-KEM-512\", \"com.sun.crypto.provider.ML_KEM_Provider$K2\", attrs);\n-        psA(\"KEM\", \"ML-KEM-768\", \"com.sun.crypto.provider.ML_KEM_Provider$K3\", attrs);\n-        psA(\"KEM\", \"ML-KEM-1024\", \"com.sun.crypto.provider.ML_KEM_Provider$K5\",attrs);\n-\n-        ps(\"KeyPairGenerator\", \"ML-KEM\", \"com.sun.crypto.provider.ML_KEM_Provider$KPG\", null, attrs);\n-        psA(\"KeyPairGenerator\", \"ML-KEM-512\", \"com.sun.crypto.provider.ML_KEM_Provider$KPG2\", attrs);\n-        psA(\"KeyPairGenerator\", \"ML-KEM-768\", \"com.sun.crypto.provider.ML_KEM_Provider$KPG3\", attrs);\n-        psA(\"KeyPairGenerator\", \"ML-KEM-1024\", \"com.sun.crypto.provider.ML_KEM_Provider$KPG5\", attrs);\n-\n-        ps(\"KeyFactory\", \"ML-KEM\", \"com.sun.crypto.provider.ML_KEM_Provider$KF\", null, attrs);\n-        psA(\"KeyFactory\", \"ML-KEM-512\", \"com.sun.crypto.provider.ML_KEM_Provider$KF2\", attrs);\n-        psA(\"KeyFactory\", \"ML-KEM-768\", \"com.sun.crypto.provider.ML_KEM_Provider$KF3\", attrs);\n-        psA(\"KeyFactory\", \"ML-KEM-1024\", \"com.sun.crypto.provider.ML_KEM_Provider$KF5\", attrs);\n+        ps(\"KEM\", \"ML-KEM\", \"com.sun.crypto.provider.ML_KEM_Impls$K\", null, attrs);\n+        psA(\"KEM\", \"ML-KEM-512\", \"com.sun.crypto.provider.ML_KEM_Impls$K2\", attrs);\n+        psA(\"KEM\", \"ML-KEM-768\", \"com.sun.crypto.provider.ML_KEM_Impls$K3\", attrs);\n+        psA(\"KEM\", \"ML-KEM-1024\", \"com.sun.crypto.provider.ML_KEM_Impls$K5\",attrs);\n+\n+        ps(\"KeyPairGenerator\", \"ML-KEM\", \"com.sun.crypto.provider.ML_KEM_Impls$KPG\", null, attrs);\n+        psA(\"KeyPairGenerator\", \"ML-KEM-512\", \"com.sun.crypto.provider.ML_KEM_Impls$KPG2\", attrs);\n+        psA(\"KeyPairGenerator\", \"ML-KEM-768\", \"com.sun.crypto.provider.ML_KEM_Impls$KPG3\", attrs);\n+        psA(\"KeyPairGenerator\", \"ML-KEM-1024\", \"com.sun.crypto.provider.ML_KEM_Impls$KPG5\", attrs);\n+\n+        ps(\"KeyFactory\", \"ML-KEM\", \"com.sun.crypto.provider.ML_KEM_Impls$KF\", null, attrs);\n+        psA(\"KeyFactory\", \"ML-KEM-512\", \"com.sun.crypto.provider.ML_KEM_Impls$KF2\", attrs);\n+        psA(\"KeyFactory\", \"ML-KEM-768\", \"com.sun.crypto.provider.ML_KEM_Impls$KF3\", attrs);\n+        psA(\"KeyFactory\", \"ML-KEM-1024\", \"com.sun.crypto.provider.ML_KEM_Impls$KF5\", attrs);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}