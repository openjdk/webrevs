{"files":[{"patch":"@@ -20,1 +20,1 @@\n-    public final int mlKem_k;\n+    private final int mlKem_k;\n@@ -30,1 +30,1 @@\n-    public static final int mlKem_q = 3329;\n+    private static final int mlKem_q = 3329;\n@@ -430,0 +430,46 @@\n+    \/*\n+    Key check functions from the beginning of sections 7.2 and 7.3 of the spec\n+     *\/\n+    public Object checkPublicKey(byte[] pk) throws InvalidKeyException {\n+        \/\/Encapsulation key type check\n+        if (pk.length != mlKem_k * 384 + 32) {\n+            throw new InvalidKeyException(\"Public key is not the correct size\");\n+        }\n+\n+        \/\/Encapsulation key modulus check\n+        int x, y, z, a, b;\n+        for (int i = 0; i < mlKem_k * 384; i += 3) {\n+            x = pk[i] & 0xFF;\n+            y = pk[i + 1] & 0xFF;\n+            z = pk[i + 2] & 0xFF;\n+            a = x + ((y & 0xF) << 8);\n+            b = (y >> 4) + (z << 4);\n+            if ((a >= mlKem_q) || (b >= mlKem_q)) {\n+                throw new InvalidKeyException(\"Coefficients in public key not in specified range\");\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public Object checkPrivateKey(byte[] sk) throws InvalidKeyException {\n+        MessageDigest mlKemH;\n+        try {\n+            mlKemH = MessageDigest.getInstance(\"SHA3-256\");\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        \/\/Decapsulation key type check\n+        if (sk.length != mlKem_k * 768 + 96) {\n+            throw new InvalidKeyException(\"Private key is not the correct size\");\n+        }\n+\n+        \/\/Decapsulation hash check\n+        mlKemH.update(sk, mlKem_k * 384, mlKem_k * 384 + 32);\n+        byte[] check = Arrays.copyOfRange(sk, mlKem_k * 768 + 32, mlKem_k * 768 + 64);\n+        if (!MessageDigest.isEqual(mlKemH.digest(), check)) {\n+            throw new InvalidKeyException(\"Private key hash check failed\");\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":48,"deletions":2,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -177,19 +177,1 @@\n-\n-            \/\/Encapsulation key type check\n-            if (pk.length != mlKem.mlKem_k * 384 + 32) {\n-                throw new InvalidKeyException(\"Public key is not the correct size\");\n-            }\n-\n-            \/\/Encapsulation key modulus check\n-            int x, y, z, a, b;\n-            for (int i = 0; i < mlKem.mlKem_k * 384; i += 3) {\n-                x = pk[i] & 0xFF;\n-                y = pk[i + 1] & 0xFF;\n-                z = pk[i + 2] & 0xFF;\n-                a = x + ((y & 0xF) << 8);\n-                b = (y >> 4) + (z << 4);\n-                if ((a >= ML_KEM.mlKem_q) || (b >= ML_KEM.mlKem_q)) {\n-                    throw new InvalidKeyException(\"Coefficients in public key not in specified range\");\n-                }\n-            }\n-            return null;\n+            return mlKem.checkPublicKey(pk);\n@@ -201,20 +183,1 @@\n-            int k = mlKem.mlKem_k;\n-            MessageDigest mlKemH;\n-            try {\n-                mlKemH = MessageDigest.getInstance(\"SHA3-256\");\n-            } catch (NoSuchAlgorithmException e) {\n-                throw new ProviderException(\"Failed to get instance of SHA3\", e);\n-            }\n-\n-            \/\/Decapsulation key type check\n-            if (sk.length != k * 768 + 96) {\n-                throw new InvalidKeyException(\"Private key is not the correct size\");\n-            }\n-\n-            \/\/Decapsulation hash check\n-            mlKemH.update(sk, k * 384, k * 384 + 32);\n-            byte[] check = Arrays.copyOfRange(sk, k * 768 + 32, k * 768 + 64);\n-            if (!MessageDigest.isEqual(mlKemH.digest(), check)) {\n-                throw new InvalidKeyException(\"Private key hash check failed\");\n-            }\n-            return null;\n+            return mlKem.checkPrivateKey(sk);\n@@ -222,0 +185,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Provider.java","additions":3,"deletions":39,"binary":false,"changes":42,"status":"modified"}]}