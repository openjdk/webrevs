{"files":[{"patch":"@@ -20,1 +20,1 @@\n-    private final int mlKem_k;\n+    public final int mlKem_k;\n@@ -30,1 +30,1 @@\n-    private static final int mlKem_q = 3329;\n+    public static final int mlKem_q = 3329;\n@@ -430,23 +430,0 @@\n-    private boolean isValidEncapsulationKey(ML_KEM_EncapsulationKey key) {\n-        byte[] keyBytes = key.keyBytes;\n-        if (keyBytes.length != mlKem_k * 384 + 32) {\n-            return false;\n-        }\n-        int x, y, z, a, b;\n-        for (int i = 0; i < mlKem_k * 384; i += 3) {\n-            x = keyBytes[i] & 0xFF;\n-            y = keyBytes[i + 1] & 0xFF;\n-            z = keyBytes[i + 2] & 0xFF;\n-            a = x + ((y & 0xF) << 8);\n-            b = (y >> 4) + (z << 4);\n-            if ((a >= mlKem_q) || (b >= mlKem_q)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    private boolean isValidDecapsulationKey(ML_KEM_DecapsulationKey key) {\n-        return (key.keyBytes.length == mlKem_k * 768 + 96);\n-    }\n-\n@@ -487,3 +464,0 @@\n-        if (!isValidEncapsulationKey(encapsulationKey)) {\n-            throw new InvalidKeyException(\"Invalid encapsulation key\");\n-        }\n@@ -509,4 +483,1 @@\n-        \/\/Check input validity\n-        if (!isValidDecapsulationKey(decapsulationKey)) {\n-            throw new InvalidKeyException(\"Invalid decapsulation key\");\n-        }\n+        \/\/Check ciphertext validity\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":3,"deletions":32,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -174,0 +174,48 @@\n+        @Override\n+        public Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+\n+            \/\/Encapsulation key type check\n+            if (pk.length != mlKem.mlKem_k * 384 + 32) {\n+                throw new InvalidKeyException(\"Public key is not the correct size\");\n+            }\n+\n+            \/\/Encapsulation key modulus check\n+            int x, y, z, a, b;\n+            for (int i = 0; i < mlKem.mlKem_k * 384; i += 3) {\n+                x = pk[i] & 0xFF;\n+                y = pk[i + 1] & 0xFF;\n+                z = pk[i + 2] & 0xFF;\n+                a = x + ((y & 0xF) << 8);\n+                b = (y >> 4) + (z << 4);\n+                if ((a >= ML_KEM.mlKem_q) || (b >= ML_KEM.mlKem_q)) {\n+                    throw new InvalidKeyException(\"Coefficients in public key not in specified range\");\n+                }\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n+            ML_KEM mlKem = new ML_KEM(name2int(name));\n+            int k = mlKem.mlKem_k;\n+            MessageDigest mlKemH;\n+            try {\n+                mlKemH = MessageDigest.getInstance(\"SHA3-256\");\n+            } catch (NoSuchAlgorithmException e) {\n+                throw new ProviderException(\"Failed to get instance of SHA3\", e);\n+            }\n+\n+            \/\/Decapsulation key type check\n+            if (sk.length != k * 768 + 96) {\n+                throw new InvalidKeyException(\"Private key is not the correct size\");\n+            }\n+\n+            \/\/Decapsulation hash check\n+            mlKemH.update(sk, k * 384, k * 384 + 32);\n+            byte[] check = Arrays.copyOfRange(sk, k * 768 + 32, k * 768 + 64);\n+            if (!MessageDigest.isEqual(mlKemH.digest(), check)) {\n+                throw new InvalidKeyException(\"Private key hash check failed\");\n+            }\n+            return null;\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Provider.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"}]}