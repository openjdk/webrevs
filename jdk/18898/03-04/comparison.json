{"files":[{"patch":"@@ -1152,2 +1152,2 @@\n-            byte[] ciphertextArr, int end) {\n-        if (end == blockSize) {\n+            byte[] ciphertextArr, int ciphertextEnd) {\n+        if (padBufferLen == blockSize) {\n@@ -1163,1 +1163,1 @@\n-        int pad = end % blockSize;\n+        int pad = padBufferLen % blockSize;\n@@ -1173,2 +1173,0 @@\n-            byte[] tmp = new byte[blockSize];\n-            int start = end - blockSize - pad;\n@@ -1177,6 +1175,1 @@\n-                \/\/ Ultimate ffff block to the temporary buffer\n-                ciphertextBuf.get(end - blockSize, tmp);\n-                \/\/ Penultimate pp[pp] block to the end of ciphertext\n-                ciphertextBuf.put(end - pad, ciphertextBuf, start, pad);\n-                \/\/ Temporary buffer to the penultimate block\n-                ciphertextBuf.put(start, tmp);\n+                swapLastTwoBlocks(ciphertextBuf, ciphertextEnd, pad, blockSize);\n@@ -1185,6 +1178,1 @@\n-                \/\/ Penultimate ffff block to the temporary buffer\n-                ciphertextBuf.get(start, tmp);\n-                \/\/ Ending pp[pp] to the penultimate block\n-                ciphertextBuf.put(start, ciphertextBuf, end - pad, pad);\n-                \/\/ Temporary buffer to the end of ciphertext\n-                ciphertextBuf.put(end - blockSize, tmp);\n+                swapLastTwoBlocks(ciphertextBuf, ciphertextEnd, blockSize, pad);\n@@ -1195,0 +1183,11 @@\n+    private static void swapLastTwoBlocks(ByteBuffer ciphertextBuf,\n+            int ciphertextEnd, int prevBlockLen, int lastBlockLen) {\n+        \/\/ .... prevBlock lastBlock -> .... lastBlock prevBlock\n+        int prevBlockStart = ciphertextEnd - prevBlockLen - lastBlockLen;\n+        byte[] prevBlockBackup = new byte[prevBlockLen];\n+        ciphertextBuf.get(prevBlockStart, prevBlockBackup);\n+        ciphertextBuf.put(prevBlockStart, ciphertextBuf,\n+                ciphertextEnd - lastBlockLen, lastBlockLen);\n+        ciphertextBuf.put(ciphertextEnd - prevBlockLen, prevBlockBackup);\n+    }\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -124,0 +124,4 @@\n+        \/\/ Check that the output array offset does not affect the penultimate\n+        \/\/ block length calculation.\n+        int outOfs = 1;\n+\n@@ -132,1 +136,5 @@\n-        actualCiphertextBuf.put(cipher.doFinal());\n+\n+        byte [] outArray = new byte[cipher.getOutputSize(0) + outOfs];\n+        cipher.doFinal(outArray, outOfs);\n+        actualCiphertextBuf.put(outArray, outOfs, outArray.length - outOfs);\n+\n@@ -142,1 +150,8 @@\n-        cipher.doFinal(ByteBuffer.allocate(0), actualCiphertextDir);\n+\n+        ByteBuffer outBuffer = ByteBuffer.allocateDirect(\n+                cipher.getOutputSize(0) + outOfs);\n+        outBuffer.position(outOfs);\n+        cipher.doFinal(ByteBuffer.allocate(0), outBuffer);\n+        outBuffer.position(outOfs);\n+        actualCiphertextDir.put(outBuffer);\n+\n@@ -157,0 +172,1 @@\n+\n@@ -171,0 +187,1 @@\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestCipherTextStealingMultipart.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}