{"files":[{"patch":"@@ -917,5 +917,1 @@\n-                if (blockMode == Mode.CTS) {\n-                    k = token.p11.C_EncryptUpdate(session.id(),\n-                            0, padBuffer, 0, padBufferLen,\n-                            0, out, outOfs, outLen);\n-                } else if (paddingObj != null) {\n+                if (paddingObj != null) {\n@@ -939,0 +935,4 @@\n+                } else if (blockMode == Mode.CTS) {\n+                    k = token.p11.C_EncryptUpdate(session.id(),\n+                            0, padBuffer, 0, padBufferLen,\n+                            0, out, outOfs, outLen);\n@@ -1030,5 +1030,1 @@\n-                    if (blockMode == Mode.CTS) {\n-                        k = token.p11.C_EncryptUpdate(session.id(),\n-                                0, padBuffer, 0, padBufferLen,\n-                                outAddr, outArray, outOfs, outLen);\n-                    } else if (paddingObj != null) {\n+                    if (paddingObj != null) {\n@@ -1052,0 +1048,4 @@\n+                    } else if (blockMode == Mode.CTS) {\n+                       k = token.p11.C_EncryptUpdate(session.id(),\n+                                0, padBuffer, 0, padBufferLen,\n+                                outAddr, outArray, outOfs, outLen);\n@@ -1173,2 +1173,4 @@\n-            \/\/ position. Use offsets to read and write bytes from the last two\n-            \/\/ blocks. Other blocks should not be modified.\n+            \/\/ position. Additionally, if ciphertextBuf was not created here,\n+            \/\/ the position should not be altered. To ensure this, use offsets\n+            \/\/ to read and write bytes from the last two blocks (i.e. absolute\n+            \/\/ ByteBuffer operations). Other blocks should not be modified.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"}]}