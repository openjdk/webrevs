{"files":[{"patch":"@@ -163,0 +163,2 @@\n+    \/\/ inputQ lock: methods that take from the inputQ\n+    \/\/      must not run concurrently.\n@@ -188,0 +190,1 @@\n+        \/\/ prevents drainInputQueue() from running concurrently\n@@ -287,2 +290,3 @@\n-    \/\/ must only be called from the scheduler schedule() loop.\n-    \/\/ ensure that all received data frames are accounted for\n+    \/\/ Called from the scheduler schedule() loop,\n+    \/\/ or after resetting the stream.\n+    \/\/ Ensures that all received data frames are accounted for\n@@ -291,0 +295,2 @@\n+    \/\/ The inputQLock is used to prevent concurrently taking\n+    \/\/ from the queue.\n@@ -293,0 +299,2 @@\n+        \/\/ will wait until schedule() has finished taking\n+        \/\/ from the queue, if needed.\n@@ -423,0 +431,13 @@\n+    \/\/ Ensures that no data frame is pushed on the inputQ\n+    \/\/ after the stream is closed.\n+    \/\/ Changes to the `closed` boolean are guarded by the\n+    \/\/ stateLock. Contention should be low as only one\n+    \/\/ thread at a time adds to the inputQ, and\n+    \/\/ we can only contend when closing the stream.\n+    \/\/ Note that this method can run concurrently with\n+    \/\/ methods holding the inputQLock: that is OK.\n+    \/\/ The inputQLock is there to ensure that methods\n+    \/\/ taking from the queue are not running concurrently\n+    \/\/ with each others, but concurrently adding at the\n+    \/\/ end of the queue while peeking\/polling at the head\n+    \/\/ is OK.\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"}]}