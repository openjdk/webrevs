{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.util.concurrent.Callable;\n@@ -67,3 +66,2 @@\n- * with an exception. The {@code ScopedValue} API supports executing a {@link Runnable#run()\n- * Runnable.run}, {@link Callable#call() Callable.call}, or {@link Supplier#get() Supplier.get}\n- * method with a {@code ScopedValue} bound to a value.\n+ * with an exception. The {@code ScopedValue} API supports executing a {@link Runnable},\n+ * or {@link CallableOp} with a {@code ScopedValue} bound to a value.\n@@ -72,2 +70,4 @@\n- * \"{@code duke}\" for the execution of a {@code run} method. The {@code run} method, in\n- * turn, invokes {@code doSomething}.\n+ * \"{@code duke}\" for the execution of a {@code Runnable}'s {@code run} method.\n+ * The {@code run} method, in turn, invokes a method {@code doSomething}.\n+ *\n+ *\n@@ -78,1 +78,1 @@\n- *     \/\/ @link substring=\"runWhere\" target=\"#runWhere\" :\n+ *     \/\/ @link substring=\"runWhere\" target=\"#runWhere(ScopedValue, Object, Runnable)\" :\n@@ -87,3 +87,2 @@\n- * The {@link #callWhere(ScopedValue, Object, Callable) callWhere} and {@link\n- * #getWhere(ScopedValue, Object, Supplier) getWhere} can be used to invoke a method that\n- * returns a result.\n+ * The {@link #callWhere(ScopedValue, Object, CallableOp) callWhere} method can be used\n+ * to invoke a method that returns a result.\n@@ -146,1 +145,1 @@\n- * {@link StructuredTaskScope#fork(Callable) fork} method.\n+ * {@link StructuredTaskScope#fork(java.util.concurrent.Callable) fork} method.\n@@ -294,2 +293,2 @@\n-     * <p> A {@code Carrier} is used to accumulate mappings so that an operation (a\n-     * {@link Runnable} or {@link Callable}) can be executed with all scoped values in the\n+     * <p> A {@code Carrier} is used to accumulate mappings so that an operation (a {@link\n+     * Runnable} or {@link CallableOp}) can be executed with all scoped values in the\n@@ -386,1 +385,1 @@\n-                    return (T)value;\n+                    return (T) value;\n@@ -409,0 +408,1 @@\n+         * @param <X> type of the exception thrown by the operation\n@@ -411,2 +411,3 @@\n-         * @throws Exception if {@code op} completes with an exception\n-         * @see ScopedValue#callWhere(ScopedValue, Object, Callable)\n+         * @throws X if {@code op} completes with an exception\n+         * @see ScopedValue#callWhere(ScopedValue, Object, CallableOp)\n+         * @since 23\n@@ -414,1 +415,1 @@\n-        public <R> R call(Callable<? extends R> op) throws Exception {\n+        public <R, X extends Throwable> R call(CallableOp<? extends R, X> op) throws X {\n@@ -422,43 +423,0 @@\n-        \/**\n-         * Invokes a supplier of results with each scoped value in this mapping bound\n-         * to its value in the current thread.\n-         * When the operation completes (normally or with an exception), each scoped value\n-         * in the mapping will revert to being unbound, or revert to its previous value\n-         * when previously bound, in the current thread. If {@code op} completes with an\n-         * exception then it propagated by this method.\n-         *\n-         * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n-         * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n-         * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n-         * as a <em>structure violation<\/em> when the operation completes (normally or with an\n-         * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n-         * is closed and {@link StructureViolationException} is thrown.\n-         *\n-         * @param op the operation to run\n-         * @param <R> the type of the result of the operation\n-         * @return the result\n-         * @throws StructureViolationException if a structure violation is detected\n-         * @see ScopedValue#getWhere(ScopedValue, Object, Supplier)\n-         *\/\n-        public <R> R get(Supplier<? extends R> op) {\n-            Objects.requireNonNull(op);\n-            Cache.invalidate(bitmask);\n-            var prevSnapshot = scopedValueBindings();\n-            var newSnapshot = new Snapshot(this, prevSnapshot);\n-            return runWith(newSnapshot, new CallableAdapter<R>(op));\n-        }\n-\n-        \/\/ A lightweight adapter from Supplier to Callable. This is\n-        \/\/ used here to create the Callable which is passed to\n-        \/\/ Carrier#call() in this thread because it needs neither\n-        \/\/ runtime bytecode generation nor any release fencing.\n-        private static final class CallableAdapter<V> implements Callable<V> {\n-            private \/*non-final*\/ Supplier<? extends V> s;\n-            CallableAdapter(Supplier<? extends V> s) {\n-                this.s = s;\n-            }\n-            public V call() {\n-                return s.get();\n-            }\n-        }\n-\n@@ -474,1 +432,1 @@\n-        private <R> R runWith(Snapshot newSnapshot, Callable<R> op) {\n+        private <R, X extends Throwable> R runWith(Snapshot newSnapshot, CallableOp<R, X> op) {\n@@ -535,0 +493,18 @@\n+    \/**\n+     * An operation that returns a result and may throw an exception.\n+     *\n+     * @param <T> result type of the operation\n+     * @param <X> type of the exception thrown by the operation\n+     * @since 23\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.SCOPED_VALUES)\n+    @FunctionalInterface\n+    public interface CallableOp<T, X extends Throwable> {\n+        \/**\n+         * Executes this operation.\n+         * @return the result, can be null\n+         * @throws X if the operation completes with an exception\n+         *\/\n+        T call() throws X;\n+    }\n+\n@@ -572,1 +548,1 @@\n-     *     \/\/ @link substring=\"call\" target=\"Carrier#call(Callable)\" :\n+     *     \/\/ @link substring=\"call\" target=\"Carrier#call(CallableOp)\" :\n@@ -576,28 +552,0 @@\n-     * @param key the {@code ScopedValue} key\n-     * @param value the value, can be {@code null}\n-     * @param <T> the type of the value\n-     * @param <R> the result type\n-     * @param op the operation to call\n-     * @return the result\n-     * @throws StructureViolationException if a structure violation is detected\n-     * @throws Exception if the operation completes with an exception\n-     *\/\n-    public static <T, R> R callWhere(ScopedValue<T> key,\n-                                     T value,\n-                                     Callable<? extends R> op) throws Exception {\n-        return where(key, value).call(op);\n-    }\n-\n-    \/**\n-     * Invokes a supplier of results with a {@code ScopedValue} bound to a value\n-     * in the current thread. When the operation completes (normally or with an\n-     * exception), the {@code ScopedValue} will revert to being unbound, or revert to\n-     * its previous value when previously bound, in the current thread. If {@code op}\n-     * completes with an exception then it propagated by this method.\n-     *\n-     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n-     * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n-     * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n-     * as a <em>structure violation<\/em> when the operation completes (normally or with an\n-     * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n-     * is closed and {@link StructureViolationException} is thrown.\n@@ -605,6 +553,0 @@\n-     * @implNote\n-     * This method is implemented to be equivalent to:\n-     * {@snippet lang=java :\n-     *     \/\/ @link substring=\"get\" target=\"Carrier#get(Supplier)\" :\n-     *     ScopedValue.where(key, value).get(op);\n-     * }\n@@ -616,0 +558,1 @@\n+     * @param <X> type of the exception thrown by the operation\n@@ -619,0 +562,2 @@\n+     * @throws X if the operation completes with an exception\n+     * @since 23\n@@ -620,4 +565,4 @@\n-    public static <T, R> R getWhere(ScopedValue<T> key,\n-                                    T value,\n-                                    Supplier<? extends R> op) {\n-        return where(key, value).get(op);\n+    public static <T, R, X extends Throwable> R callWhere(ScopedValue<T> key,\n+                                                          T value,\n+                                                          CallableOp<? extends R, X> op) throws X {\n+        return where(key, value).call(op);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopedValue.java","additions":46,"deletions":101,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-                return ScopedValue.callWhere(SCOPED_SUBJECT, subject, action);\n+                return ScopedValue.callWhere(SCOPED_SUBJECT, subject, action::call);\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        @JEP(number=464, title=\"Scoped Values\", status=\"Second Preview\")\n+        @JEP(number=481, title=\"Scoped Values\", status=\"Third Preview\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import java.util.concurrent.Callable;\n+import java.lang.ScopedValue.CallableOp;\n@@ -144,1 +144,1 @@\n-    public static <V> V call(Callable<V> op) {\n+    public static <V, X extends Throwable> V call(CallableOp<V, X> op) {\n@@ -156,1 +156,1 @@\n-    private static <V> V callWithoutScope(Callable<V> op) {\n+    private static <V, X extends Throwable> V callWithoutScope(CallableOp<V, X> op) {\n@@ -178,1 +178,1 @@\n-    private <V> V doCall(Callable<V> op) {\n+    private <V, X extends Throwable> V doCall(CallableOp<V, X> op) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ScopedValueContainer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.lang.ScopedValue.CallableOp;\n@@ -32,1 +33,0 @@\n-import java.util.concurrent.Callable;\n@@ -51,1 +51,1 @@\n-     * Test that the run method is invoked.\n+     * Test that runWhere invokes the Runnable's run method.\n@@ -55,1 +55,1 @@\n-    void testRun(ThreadFactory factory) throws Exception {\n+    void testRunWhere(ThreadFactory factory) throws Exception {\n@@ -65,1 +65,1 @@\n-     * Test the run method throwing an exception.\n+     * Test runWhere when the run method throws an exception.\n@@ -69,1 +69,1 @@\n-    void testRunThrows(ThreadFactory factory) throws Exception {\n+    void testRunWhereThrows(ThreadFactory factory) throws Exception {\n@@ -80,1 +80,1 @@\n-     * Test that the call method is invoked.\n+     * Test that callWhere invokes the CallableOp's call method.\n@@ -84,1 +84,1 @@\n-    void testCall(ThreadFactory factory) throws Exception {\n+    void testCallWhere(ThreadFactory factory) throws Exception {\n@@ -93,1 +93,1 @@\n-     * Test that the get method is invoked.\n+     * Test callWhere when the call method throws an exception.\n@@ -97,14 +97,1 @@\n-    void testGetWhere(ThreadFactory factory) throws Exception {\n-        test(factory, () -> {\n-            ScopedValue<String> name = ScopedValue.newInstance();\n-            String result = ScopedValue.getWhere(name, \"duke\", (Supplier<String>)(name::get));\n-            assertEquals(\"duke\", result);\n-        });\n-    }\n-\n-    \/**\n-     * Test the call method throwing an exception.\n-     *\/\n-    @ParameterizedTest\n-    @MethodSource(\"factories\")\n-    void testCallThrows(ThreadFactory factory) throws Exception {\n+    void testCallWhereThrows(ThreadFactory factory) throws Exception {\n@@ -114,1 +101,1 @@\n-            Callable<Void> op = () -> { throw new FooException(); };\n+            CallableOp<Void, RuntimeException> op = () -> { throw new FooException(); };\n@@ -120,15 +107,0 @@\n-    \/**\n-     * Test the get(Supplier) method throwing an exception.\n-     *\/\n-    @ParameterizedTest\n-    @MethodSource(\"factories\")\n-    void testGetThrows(ThreadFactory factory) throws Exception {\n-        test(factory, () -> {\n-            class FooException extends RuntimeException {  }\n-            ScopedValue<String> name = ScopedValue.newInstance();\n-            Supplier<Void> op = () -> { throw new FooException(); };\n-            assertThrows(FooException.class, () -> ScopedValue.getWhere(name, \"duke\", op));\n-            assertFalse(name.isBound());\n-        });\n-    }\n-\n@@ -147,1 +119,1 @@\n-            \/\/ run\n+            \/\/ runWhere\n@@ -156,1 +128,1 @@\n-            \/\/ call\n+            \/\/ callWhere\n@@ -164,9 +136,0 @@\n-\n-            \/\/ get\n-            ScopedValue.getWhere(name1, \"duke\", () -> {\n-                assertEquals(\"duke\", name1.get());\n-                assertThrows(NoSuchElementException.class, name2::get);\n-                return null;\n-            });\n-            assertThrows(NoSuchElementException.class, name1::get);\n-            assertThrows(NoSuchElementException.class, name2::get);\n@@ -188,1 +151,1 @@\n-            \/\/ run\n+            \/\/ runWhere\n@@ -196,10 +159,1 @@\n-            \/\/ call\n-            ScopedValue.callWhere(name1, \"duke\", () -> {\n-                assertTrue(name1.isBound());\n-                assertFalse(name2.isBound());\n-                return null;\n-            });\n-            assertFalse(name1.isBound());\n-            assertFalse(name2.isBound());\n-\n-            \/\/ call\n+            \/\/ callWhere\n@@ -227,1 +181,1 @@\n-            \/\/ run\n+            \/\/ runWhere\n@@ -233,1 +187,1 @@\n-            \/\/ call\n+            \/\/ callWhere\n@@ -253,1 +207,1 @@\n-            \/\/ run\n+            \/\/ runWhere\n@@ -258,1 +212,1 @@\n-            \/\/ call\n+            \/\/ callWhere\n@@ -276,1 +230,1 @@\n-            \/\/ run\n+            \/\/ Carrier.run\n@@ -286,1 +240,1 @@\n-            \/\/ call\n+            \/\/ Carrier.call\n@@ -296,12 +250,0 @@\n-\n-            \/\/ get\n-            ScopedValue.where(name, \"duke\").where(age, 100).get(() -> {\n-                assertTrue(name.isBound());\n-                assertTrue(age.isBound());\n-                assertEquals(\"duke\", name.get());\n-                assertEquals(100, (int) age.get());\n-                return null;\n-            });\n-            assertFalse(name.isBound());\n-            assertFalse(age.isBound());\n-\n@@ -320,1 +262,1 @@\n-            \/\/ run\n+            \/\/ runWhere\n@@ -335,1 +277,1 @@\n-            \/\/ call\n+            \/\/ callWhere\n@@ -351,17 +293,0 @@\n-\n-            \/\/ get\n-            ScopedValue.getWhere(name, \"duke\", () -> {\n-                assertTrue(name.isBound());\n-                assertEquals(\"duke\", name.get());\n-\n-                ScopedValue.where(name, \"duchess\").get(() -> {\n-                    assertTrue(name.isBound());\n-                    assertEquals(\"duchess\", name.get());\n-                    return null;\n-                });\n-\n-                assertTrue(name.isBound());\n-                assertEquals(\"duke\", name.get());\n-                return null;\n-            });\n-            assertFalse(name.isBound());\n@@ -380,1 +305,1 @@\n-            \/\/ run\n+            \/\/ runWhere\n@@ -395,1 +320,1 @@\n-            \/\/ call\n+            \/\/ callWhere\n@@ -411,17 +336,0 @@\n-\n-            \/\/ getWhere\n-            ScopedValue.getWhere(name, null, () -> {\n-                assertTrue(name.isBound());\n-                assertNull(name.get());\n-\n-                ScopedValue.getWhere(name, \"duchess\", () -> {\n-                    assertTrue(name.isBound());\n-                    assertTrue(\"duchess\".equals(name.get()));\n-                    return null;\n-                });\n-\n-                assertTrue(name.isBound());\n-                assertNull(name.get());\n-                return null;\n-            });\n-            assertFalse(name.isBound());\n@@ -440,1 +348,1 @@\n-            \/\/ run\n+            \/\/ runWhere\n@@ -455,1 +363,1 @@\n-            \/\/ call\n+            \/\/ callWhere\n@@ -471,17 +379,0 @@\n-\n-            \/\/ get\n-            ScopedValue.where(name, \"duke\").get(() -> {\n-                assertTrue(name.isBound());\n-                assertEquals(\"duke\", name.get());\n-\n-                ScopedValue.where(name, null).get(() -> {\n-                    assertTrue(name.isBound());\n-                    assertNull(name.get());\n-                    return null;\n-                });\n-\n-                assertTrue(name.isBound());\n-                assertEquals(\"duke\", name.get());\n-                return null;\n-            });\n-            assertFalse(name.isBound());\n@@ -520,3 +411,7 @@\n-        assertThrows(NullPointerException.class, () -> ScopedValue.where(null, \"value\"));\n-        assertThrows(NullPointerException.class, () -> ScopedValue.runWhere(null, \"value\", () -> { }));\n-        assertThrows(NullPointerException.class, () -> ScopedValue.getWhere(null, \"value\", () -> null));\n+        assertThrows(NullPointerException.class, () -> ScopedValue.where(null, \"duke\"));\n+\n+        assertThrows(NullPointerException.class, () -> ScopedValue.runWhere(null, \"duke\", () -> { }));\n+        assertThrows(NullPointerException.class, () -> ScopedValue.runWhere(name, \"duke\", null));\n+\n+        assertThrows(NullPointerException.class, () -> ScopedValue.callWhere(null, \"duke\", () -> \"\"));\n+        assertThrows(NullPointerException.class, () -> ScopedValue.callWhere(name, \"duke\", null));\n@@ -527,1 +422,1 @@\n-        assertThrows(NullPointerException.class, () -> carrier.where(null, \"value\"));\n+        assertThrows(NullPointerException.class, () -> carrier.where(null, \"duke\"));\n@@ -529,1 +424,0 @@\n-        assertThrows(NullPointerException.class, () -> carrier.get((Supplier<?>)null));\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/ScopedValueAPI.java","additions":35,"deletions":141,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import java.lang.ScopedValue.CallableOp;\n@@ -51,1 +52,0 @@\n-import java.util.concurrent.Callable;\n@@ -71,1 +71,1 @@\n-    \/\/ Test the ScopedValue recovery mechanism for stack overflows. We implement both Callable\n+    \/\/ Test the ScopedValue recovery mechanism for stack overflows. We implement both CallableOp\n@@ -73,1 +73,1 @@\n-    class DeepRecursion implements Callable<Object>, Supplier<Object>, Runnable {\n+    class DeepRecursion implements CallableOp<Object, RuntimeException>, Supplier<Object>, Runnable {\n@@ -76,1 +76,1 @@\n-            CALL, GET, RUN;\n+            CALL, RUN;\n@@ -100,1 +100,0 @@\n-                        case GET -> ScopedValue.where(el, el.get() + 1).get(() -> fibonacci_pad(20, this));\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/StressStackOverflow.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.util.concurrent.Callable;\n+import java.lang.ScopedValue.CallableOp;\n@@ -29,1 +29,0 @@\n-import java.util.function.Supplier;\n@@ -167,1 +166,1 @@\n-        return HOLD_42.call(aCallable);\n+        return HOLD_42.call(aCallableOp);\n@@ -169,10 +168,1 @@\n-    private static final Callable<Class<?>> aCallable = () -> ScopedValues.class;\n-\n-    \/\/ Same, but make sure that Carrier.get(Supplier) is no slower\n-    \/\/ than Carrier.call(Callable).\n-    @Benchmark\n-    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n-    public Object bindViaGet_ScopedValue() {\n-        return HOLD_42.get(aSupplier);\n-    }\n-    private static final Supplier<Class<?>> aSupplier = () -> ScopedValues.class;\n+    private static final CallableOp<Class<?>, RuntimeException> aCallableOp = () -> ScopedValues.class;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ScopedValues.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"}]}