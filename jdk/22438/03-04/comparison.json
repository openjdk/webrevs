{"files":[{"patch":"@@ -138,2 +138,0 @@\n-        Random random = new Random();\n-\n@@ -198,0 +196,13 @@\n+    \/**\n+     * Applies a force-based adjustment to the position of a given layout node\n+     * based on repulsive forces from all other nodes and attractive forces from its assigned neighbors.\n+     * <p>\n+     * This method simulates a physical system where nodes repel each other to maintain spacing\n+     * and are pulled towards their neighbors to maintain connectivity. The forces are calculated\n+     * using Coulomb's law for repulsion and Hooke's law for attraction. The system iterates for\n+     * a fixed number of iterations to stabilize the position of the node.\n+     *\n+     * @param node               The node whose position is being adjusted.\n+     * @param assignedNeighbors  A list of neighboring nodes that attract this node.\n+     * @param allNodes           A collection of all nodes in the layout, used for repulsive forces.\n+     *\/\n@@ -200,5 +211,5 @@\n-        final int ITERATIONS = 50;\n-        final double REPULSION_CONSTANT = 1000;\n-        final double SPRING_CONSTANT = 0.2;\n-        final double DAMPING = 0.8;\n-        final double IDEAL_LENGTH = 100;\n+        final int ITERATIONS = 50; \/\/ Number of simulation iterations.\n+        final double REPULSION_CONSTANT = 1000; \/\/ Magnitude of repulsive forces.\n+        final double SPRING_CONSTANT = 0.2; \/\/ Strength of attractive forces to neighbors.\n+        final double DAMPING = 0.8; \/\/ Damping factor to reduce displacement and ensure convergence.\n+        final double IDEAL_LENGTH = 100; \/\/ Ideal distance between a node and its neighbors.\n@@ -220,1 +231,1 @@\n-                double distanceSquared = deltaX * deltaX + deltaY * deltaY + 0.01; \/\/ Prevent division by zero\n+                double distanceSquared = deltaX * deltaX + deltaY * deltaY;\n@@ -223,0 +234,8 @@\n+                \/\/ If distance is zero, add small random noise to deltaX and deltaY\n+                if (distance == 0) {\n+                    deltaX = random.nextDouble() * 0.1 - 0.05; \/\/ Random value between -0.05 and 0.05\n+                    deltaY = random.nextDouble() * 0.1 - 0.05;\n+                    distanceSquared = deltaX * deltaX + deltaY * deltaY;\n+                    distance = Math.sqrt(distanceSquared);\n+                }\n+\n@@ -233,1 +252,8 @@\n-                double distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY + 0.01); \/\/ Prevent division by zero\n+                double distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n+\n+                \/\/ If distance is zero, add small random noise to deltaX and deltaY\n+                if (distance == 0) {\n+                    deltaX = random.nextDouble() * 0.1 - 0.05; \/\/ Random value between -0.05 and 0.05\n+                    deltaY = random.nextDouble() * 0.1 - 0.05;\n+                    distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n+                }\n@@ -256,1 +282,0 @@\n-\n@@ -270,1 +295,0 @@\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/FreeInteractiveLayoutManager.java","additions":35,"deletions":11,"binary":false,"changes":46,"status":"modified"}]}