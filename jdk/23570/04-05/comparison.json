{"files":[{"patch":"@@ -901,1 +901,1 @@\n-    V13, V13_H, V13_J, V18_K\n+    V13, V13_H, V13_J, V13_K\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,10 +248,0 @@\n-      \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n-      \/\/ false if vector length > 16B but supported SVE version < 2.\n-      \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n-      \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n-      \/\/ This operation is disabled for doubles and longs on machines with SVE < 2 and instead\n-      \/\/ the default VectorRearrange + VectorBlend is generated as the performance of the default\n-      \/\/ implementation was slightly better\/similar than the implementaion for SelectFromTwoVector.\n-      \/\/ As the SVE2 \"tbl\" instruction in unpredicated and partial operations cannot be generated\n-      \/\/ using masks, we currently disable this operation on machines where length_in_bytes <\n-      \/\/ MaxVectorSize on that machine with the only exception of 8B vector length.\n@@ -259,2 +249,15 @@\n-        if ((UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) ||\n-            (UseSVE == 2 && length_in_bytes > 8 && length_in_bytes < MaxVectorSize )) {\n+        \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n+        \/\/ false if vector length > 16B but supported SVE version < 2.\n+        \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n+        \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n+        \/\/ This operation is disabled for doubles and longs on machines with SVE < 2 and instead\n+        \/\/ the default VectorRearrange + VectorBlend is generated as the performance of the default\n+        \/\/ implementation was slightly better\/similar than the implementation for SelectFromTwoVector.\n+        if (UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) {\n+          return false;\n+        }\n+\n+        \/\/ Because the SVE2 \"tbl\" instruction is unpredicated and partial operations cannot be generated\n+        \/\/ using masks, we currently disable this operation on machines where length_in_bytes <\n+        \/\/ MaxVectorSize on that machine with the only exception of 8B vector length.\n+        if (UseSVE == 2 && length_in_bytes > 8 && length_in_bytes < MaxVectorSize) {\n@@ -7170,2 +7173,1 @@\n-\/\/ --------------------------------SelectFromTwoVector -----------------------------\n-\n+\/\/ ------------------------------------- SelectFromTwoVector ------------------------------------\n@@ -7180,5 +7182,5 @@\n-instruct vselect_from_two_vectors_HS_Neon_1(vReg dst, vReg_V10 src1, vReg_V11 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+\/\/ ----------------------------------- SelectFromTwoVector Neon ---------------------------------\n+\n+instruct vselect_from_two_vectors_Neon_1(vReg dst, vReg_V10 src1, vReg_V11 src2,\n+                                         vReg index, vReg tmp1) %{\n+  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n@@ -7186,1 +7188,2 @@\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_Neon_1 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n@@ -7190,3 +7193,3 @@\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                    $src2$$FloatRegister,$index$$FloatRegister,\n+                                    $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n@@ -7197,5 +7200,3 @@\n-instruct vselect_from_two_vectors_HS_Neon_2(vReg dst, vReg_V12 src1, vReg_V13 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+instruct vselect_from_two_vectors_Neon_2(vReg dst, vReg_V12 src1, vReg_V13 src2,\n+                                         vReg index, vReg tmp1) %{\n+  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n@@ -7203,1 +7204,2 @@\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_Neon_2 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n@@ -7207,3 +7209,3 @@\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                    $src2$$FloatRegister,$index$$FloatRegister,\n+                                    $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n@@ -7214,5 +7216,3 @@\n-instruct vselect_from_two_vectors_HS_Neon_3(vReg dst, vReg_V17 src1, vReg_V18 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+instruct vselect_from_two_vectors_Neon_3(vReg dst, vReg_V17 src1, vReg_V18 src2,\n+                                         vReg index, vReg tmp1) %{\n+  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n@@ -7220,1 +7220,2 @@\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_Neon_3 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n@@ -7224,3 +7225,3 @@\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                    $src2$$FloatRegister,$index$$FloatRegister,\n+                                    $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n@@ -7231,5 +7232,3 @@\n-instruct vselect_from_two_vectors_HS_Neon_4(vReg dst, vReg_V23 src1, vReg_V24 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+instruct vselect_from_two_vectors_Neon_4(vReg dst, vReg_V23 src1, vReg_V24 src2,\n+                                         vReg index, vReg tmp1) %{\n+  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n@@ -7237,1 +7236,2 @@\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_Neon_4 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n@@ -7241,3 +7241,3 @@\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                    $src2$$FloatRegister,$index$$FloatRegister,\n+                                    $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n@@ -7248,4 +7248,5 @@\n-instruct vselect_from_two_vectors_1(vReg dst, vReg_V10 src1, vReg_V11 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+\/\/ ----------------------------------- SelectFromTwoVector SVE ----------------------------------\n+\n+instruct vselect_from_two_vectors_SVE_1(vReg dst, vReg_V10 src1, vReg_V11 src2,\n+                                        vReg index, vReg tmp1) %{\n+  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n@@ -7253,1 +7254,2 @@\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_SVE_1 $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n@@ -7257,2 +7259,3 @@\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n+    __ select_from_two_vectors_SVE($dst$$FloatRegister, $src1$$FloatRegister,\n+                                   $src2$$FloatRegister,$index$$FloatRegister,\n+                                   $tmp1$$FloatRegister, bt, length_in_bytes);\n@@ -7263,4 +7266,3 @@\n-instruct vselect_from_two_vectors_2(vReg dst, vReg_V12 src1, vReg_V13 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+instruct vselect_from_two_vectors_SVE_2(vReg dst, vReg_V12 src1, vReg_V13 src2,\n+                                        vReg index, vReg tmp1) %{\n+  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n@@ -7268,1 +7270,2 @@\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_SVE_2 $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n@@ -7272,2 +7275,3 @@\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n+    __ select_from_two_vectors_SVE($dst$$FloatRegister, $src1$$FloatRegister,\n+                                   $src2$$FloatRegister,$index$$FloatRegister,\n+                                   $tmp1$$FloatRegister, bt, length_in_bytes);\n@@ -7278,4 +7282,3 @@\n-instruct vselect_from_two_vectors_3(vReg dst, vReg_V17 src1, vReg_V18 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+instruct vselect_from_two_vectors_SVE_3(vReg dst, vReg_V17 src1, vReg_V18 src2,\n+                                        vReg index, vReg tmp1) %{\n+  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n@@ -7283,1 +7286,2 @@\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_SVE_3 $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n@@ -7287,2 +7291,3 @@\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n+    __ select_from_two_vectors_SVE($dst$$FloatRegister, $src1$$FloatRegister,\n+                                   $src2$$FloatRegister,$index$$FloatRegister,\n+                                   $tmp1$$FloatRegister, bt, length_in_bytes);\n@@ -7293,4 +7298,3 @@\n-instruct vselect_from_two_vectors_4(vReg dst, vReg_V23 src1, vReg_V24 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+instruct vselect_from_two_vectors_SVE_4(vReg dst, vReg_V23 src1, vReg_V24 src2,\n+                                        vReg index, vReg tmp1) %{\n+  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n@@ -7298,1 +7302,2 @@\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors_SVE_4 $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n@@ -7302,2 +7307,3 @@\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n+    __ select_from_two_vectors_SVE($dst$$FloatRegister, $src1$$FloatRegister,\n+                                   $src2$$FloatRegister,$index$$FloatRegister,\n+                                   $tmp1$$FloatRegister, bt, length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":84,"deletions":78,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -238,10 +238,0 @@\n-      \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n-      \/\/ false if vector length > 16B but supported SVE version < 2.\n-      \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n-      \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n-      \/\/ This operation is disabled for doubles and longs on machines with SVE < 2 and instead\n-      \/\/ the default VectorRearrange + VectorBlend is generated as the performance of the default\n-      \/\/ implementation was slightly better\/similar than the implementaion for SelectFromTwoVector.\n-      \/\/ As the SVE2 \"tbl\" instruction in unpredicated and partial operations cannot be generated\n-      \/\/ using masks, we currently disable this operation on machines where length_in_bytes <\n-      \/\/ MaxVectorSize on that machine with the only exception of 8B vector length.\n@@ -249,2 +239,15 @@\n-        if ((UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) ||\n-            (UseSVE == 2 && length_in_bytes > 8 && length_in_bytes < MaxVectorSize )) {\n+        \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n+        \/\/ false if vector length > 16B but supported SVE version < 2.\n+        \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n+        \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n+        \/\/ This operation is disabled for doubles and longs on machines with SVE < 2 and instead\n+        \/\/ the default VectorRearrange + VectorBlend is generated as the performance of the default\n+        \/\/ implementation was slightly better\/similar than the implementation for SelectFromTwoVector.\n+        if (UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) {\n+          return false;\n+        }\n+\n+        \/\/ Because the SVE2 \"tbl\" instruction is unpredicated and partial operations cannot be generated\n+        \/\/ using masks, we currently disable this operation on machines where length_in_bytes <\n+        \/\/ MaxVectorSize on that machine with the only exception of 8B vector length.\n+        if (UseSVE == 2 && length_in_bytes > 8 && length_in_bytes < MaxVectorSize) {\n@@ -5152,2 +5155,1 @@\n-\/\/ --------------------------------SelectFromTwoVector -----------------------------\n-\n+\/\/ ------------------------------------- SelectFromTwoVector ------------------------------------\n@@ -5161,73 +5163,7 @@\n-\n-instruct vselect_from_two_vectors_HS_Neon_1(vReg dst, vReg_V10 src1, vReg_V11 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  effect(TEMP_DEF dst, TEMP tmp1);\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_HS_Neon_2(vReg dst, vReg_V12 src1, vReg_V13 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  effect(TEMP_DEF dst, TEMP tmp1);\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_HS_Neon_3(vReg dst, vReg_V17 src1, vReg_V18 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  effect(TEMP_DEF dst, TEMP tmp1);\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_HS_Neon_4(vReg dst, vReg_V23 src1, vReg_V24 src2,\n-                                            vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) != T_BYTE &&\n-            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  effect(TEMP_DEF dst, TEMP tmp1);\n-  format %{ \"vselect_from_two_vectors_HS_Neon $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_HS_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                       $src2$$FloatRegister,$index$$FloatRegister,\n-                                       $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_1(vReg dst, vReg_V10 src1, vReg_V11 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+dnl\n+dnl SELECT_FROM_TWO_VECTORS_NEON($1,          $2,        $3       )\n+dnl SELECT_FROM_TWO_VECTORS_NEON(rule_number, first_reg, second_reg)\n+define(`SELECT_FROM_TWO_VECTORS_NEON', `\n+instruct vselect_from_two_vectors_Neon_$1(vReg dst, vReg_V$2 src1, vReg_V$3 src2,\n+                                         vReg index, vReg tmp1) %{\n+  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n@@ -5235,13 +5171,0 @@\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_2(vReg dst, vReg_V12 src1, vReg_V13 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n@@ -5249,2 +5172,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp1);\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n+  format %{ \"vselect_from_two_vectors_Neon_$1 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1\" %}\n@@ -5254,2 +5176,3 @@\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n+    __ select_from_two_vectors_Neon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                    $src2$$FloatRegister,$index$$FloatRegister,\n+                                    $tmp1$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n@@ -5258,1 +5181,2 @@\n-%}\n+%}')dnl\n+dnl\n@@ -5260,4 +5184,7 @@\n-instruct vselect_from_two_vectors_3(vReg dst, vReg_V17 src1, vReg_V18 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+dnl\n+dnl SELECT_FROM_TWO_VECTORS_SVE($1,          $2  ,      $3       )\n+dnl SELECT_FROM_TWO_VECTORS_SVE(rule_number, first_reg, second_reg)\n+define(`SELECT_FROM_TWO_VECTORS_SVE', `\n+instruct vselect_from_two_vectors_SVE_$1(vReg dst, vReg_V$2 src1, vReg_V$3 src2,\n+                                        vReg index, vReg tmp1) %{\n+  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n@@ -5265,13 +5192,0 @@\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_4(vReg dst, vReg_V23 src1, vReg_V24 src2, vReg index, vReg tmp1) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n-           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n@@ -5279,2 +5193,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp1);\n-  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n+  format %{ \"vselect_from_two_vectors_SVE_$1 $dst, $src1, $src2, $index\\t# KILL $tmp1\" %}\n@@ -5284,2 +5197,3 @@\n-    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n-                               $index$$FloatRegister, $tmp1$$FloatRegister, bt, length_in_bytes);\n+    __ select_from_two_vectors_SVE($dst$$FloatRegister, $src1$$FloatRegister,\n+                                   $src2$$FloatRegister,$index$$FloatRegister,\n+                                   $tmp1$$FloatRegister, bt, length_in_bytes);\n@@ -5288,1 +5202,13 @@\n-%}\n+%}')dnl\n+dnl\n+\/\/ ----------------------------------- SelectFromTwoVector Neon ---------------------------------\n+SELECT_FROM_TWO_VECTORS_NEON(1, 10, 11)\n+SELECT_FROM_TWO_VECTORS_NEON(2, 12, 13)\n+SELECT_FROM_TWO_VECTORS_NEON(3, 17, 18)\n+SELECT_FROM_TWO_VECTORS_NEON(4, 23, 24)\n+\n+\/\/ ----------------------------------- SelectFromTwoVector SVE ----------------------------------\n+SELECT_FROM_TWO_VECTORS_SVE(1, 10, 11)\n+SELECT_FROM_TWO_VECTORS_SVE(2, 12, 13)\n+SELECT_FROM_TWO_VECTORS_SVE(3, 17, 18)\n+SELECT_FROM_TWO_VECTORS_SVE(4, 23, 24)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":53,"deletions":127,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -4231,1 +4231,1 @@\n-  void sve_tbl(FloatRegister Zd, SIMD_RegVariant T, FloatRegister Zn, unsigned registers, FloatRegister Zm) {\n+  void sve_tbl(FloatRegister Zd, SIMD_RegVariant T, FloatRegister Zn, unsigned reg_count, FloatRegister Zm) {\n@@ -4236,2 +4236,2 @@\n-    assert(0 < registers && registers <= 2, \"invalid number of registers\");\n-    int op1 = (registers == 1) ? 0b10 : 0b01;\n+    assert(0 < reg_count && reg_count <= 2, \"invalid number of registers\");\n+    int op11 = (reg_count == 1) ? 0b10 : 0b01;\n@@ -4239,1 +4239,1 @@\n-    f(0b001, 15, 13), f(op1, 12, 11), f(0b0, 10), rf(Zn, 5), rf(Zd, 0);\n+    f(0b001, 15, 13), f(op11, 12, 11), f(0b0, 10), rf(Zn, 5), rf(Zd, 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2857,3 +2857,3 @@\n-void C2_MacroAssembler::select_from_two_vectors_HS_Neon(FloatRegister dst, FloatRegister src1,\n-                                                        FloatRegister src2, FloatRegister index,\n-                                                        FloatRegister tmp1, BasicType bt, bool isQ) {\n+void C2_MacroAssembler::select_from_two_vectors_Neon(FloatRegister dst, FloatRegister src1,\n+                                                     FloatRegister src2, FloatRegister index,\n+                                                     FloatRegister tmp1, BasicType bt, bool isQ) {\n@@ -2862,1 +2862,5 @@\n-  assert(bt == T_SHORT || bt == T_INT || bt == T_FLOAT, \"unsupported basic type\");\n+\n+  \/\/ The only BasicTypes that can reach here are T_SHORT, T_BYTE, T_INT and T_FLOAT\n+  assert(bt != T_DOUBLE || bt != T_LONG, \"unsupported basic type\");\n+\n+  assert(UseSVE < 2, \"must be either 0 or 1\");\n@@ -2880,8 +2884,1 @@\n-  \/\/ The cases that can reach this method are -\n-  \/\/ UseSVE == 0, vector length = 8, 16\n-  \/\/ UseSVE == 1, vector length = 8, 16\n-  \/\/ UseSVE == 2, vector length = 8\n-  \/\/\n-  \/\/ Generate Neon tbl when UseSVE == 0 or UseSVE == 1 with vector length of 16B\n-\n-  bool useNeon = (UseSVE == 0) || (UseSVE == 1 && isQ);\n+  bool is_byte = (bt == T_BYTE);\n@@ -2889,1 +2886,15 @@\n-  if (useNeon) {\n+  if (is_byte) {\n+    if (isQ) {\n+      assert(UseSVE <= 1, \"sve must be <= 1\");\n+      \/\/ If the vector length is 16B, then use the Neon \"tbl\" instruction with two vector table\n+      tbl(dst, size1, src1, 2, index);\n+    } else { \/\/ vector length == 8\n+      assert(UseSVE == 0, \"must be Neon only\");\n+      \/\/ We need to fit both the source vectors (src1, src2) in a 128-bit register because the\n+      \/\/ Neon \"tbl\" instruction supports only looking up 16B vectors. We then use the Neon \"tbl\"\n+      \/\/ instruction with one vector lookup\n+      ins(tmp1, D, src1, 0, 0);\n+      ins(tmp1, D, src2, 1, 0);\n+      tbl(dst, size1, tmp1, 1, index);\n+    }\n+  } else {\n@@ -2898,1 +2909,0 @@\n-\n@@ -2900,0 +2910,1 @@\n+      assert(UseSVE <= 1, \"sve must be <= 1\");\n@@ -2906,0 +2917,1 @@\n+      assert(UseSVE == 0, \"must be Neon only\");\n@@ -2910,5 +2922,0 @@\n-    \/\/ Generate tbl one vector lookup (SVE1) when UseSVE >= 1 and vector length == 8\n-  } else if (UseSVE >= 1 && !isQ) {\n-    ins(tmp1, D, src1, 0, 0);\n-    ins(tmp1, D, src2, 1, 0);\n-    sve_tbl(dst, elemType_to_regVariant(bt), tmp1, 1, index);\n@@ -2918,5 +2925,8 @@\n-void C2_MacroAssembler::select_from_two_vectors(FloatRegister dst, FloatRegister src1,\n-                                                FloatRegister src2, FloatRegister index,\n-                                                FloatRegister tmp1, BasicType bt,\n-                                                unsigned vector_length_in_bytes) {\n-  if (bt == T_BYTE && vector_length_in_bytes == 8) {\n+void C2_MacroAssembler::select_from_two_vectors_SVE(FloatRegister dst, FloatRegister src1,\n+                                                    FloatRegister src2, FloatRegister index,\n+                                                    FloatRegister tmp1, BasicType bt,\n+                                                    unsigned vector_length_in_bytes) {\n+  SIMD_RegVariant size = elemType_to_regVariant(bt);\n+\n+  if (vector_length_in_bytes == 8) {\n+    assert(UseSVE >= 1, \"sve must be >= 1\");\n@@ -2925,7 +2935,4 @@\n-    tbl(dst, T8B, tmp1, 1, index);\n-  } else if (bt == T_BYTE && vector_length_in_bytes == 16 && UseSVE < 2){\n-    tbl(dst, T16B, src1, 2, index);\n-  } else {\n-    assert(UseSVE == 2, \"must be sve2\");\n-    SIMD_RegVariant size = elemType_to_regVariant(bt);\n-    sve_tbl(dst, size, src1, 2, index);\n+    sve_tbl(dst, size, tmp1, 1, index);\n+  } else {  \/\/ UseSVE == 2 and vector_length_in_bytes > 8\n+  assert(UseSVE == 2, \"must be sve2\");\n+  sve_tbl(dst, size, src1, 2, index);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":38,"deletions":31,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -197,3 +197,3 @@\n-  void select_from_two_vectors_HS_Neon(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n-                                       FloatRegister index, FloatRegister tmp1, BasicType bt,\n-                                       bool isQ);\n+  void select_from_two_vectors_Neon(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+                                    FloatRegister index, FloatRegister tmp1, BasicType bt,\n+                                    bool isQ);\n@@ -201,3 +201,3 @@\n-  void select_from_two_vectors(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n-                               FloatRegister index, FloatRegister tmp1, BasicType bt,\n-                               unsigned length_in_bytes);\n+  void select_from_two_vectors_SVE(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+                                   FloatRegister index, FloatRegister tmp1, BasicType bt,\n+                                   unsigned length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}