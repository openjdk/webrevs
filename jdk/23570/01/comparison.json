{"files":[{"patch":"@@ -884,0 +884,10 @@\n+\/\/ Class for vector register V17\n+reg_class v17_veca_reg(\n+    V17, V17_H, V17_J, V17_K\n+);\n+\n+\/\/ Class for vector register v18\n+reg_class v18_veca_reg(\n+    V18, V18_H, V18_J, V18_K\n+);\n+\n@@ -4977,0 +4987,20 @@\n+operand vReg_V17()\n+%{\n+  constraint(ALLOC_IN_RC(v17_veca_reg));\n+  match(vReg);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand vReg_V18()\n+%{\n+  constraint(ALLOC_IN_RC(v18_veca_reg));\n+  match(vReg);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -248,0 +248,12 @@\n+      \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n+      \/\/ false if vector length > 16B but supported SVE version < 2.\n+      \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n+      \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n+      \/\/ Currently, as we support only vector sizes of 8B and 16B, we disable this operation for\n+      \/\/ T_LONG and T_DOUBLE on Neon as \"mul\" does not support 2D arrangement. However, these\n+      \/\/ types are supported on machines with UseSVE == 2.\n+      case Op_SelectFromTwoVector:\n+        if (UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) {\n+        return false;\n+        }\n+        break;\n@@ -7153,0 +7165,35 @@\n+\n+\/\/ --------------------------------SelectFromTwoVector -----------------------------\n+\n+instruct vselect_from_two_vectors_SIFNeon(vReg dst, vReg_V17 src1, vReg_V18 src2,\n+                                          vReg index, vReg tmp1, vReg tmp2) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_SHORT ||\n+            type2aelembytes(Matcher::vector_element_basic_type(n)) == 4) &&\n+            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vselect_from_two_vectors_SIF $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors_SIFNeon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                       $src2$$FloatRegister,$index$$FloatRegister,\n+                                       $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n+                                       bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vselect_from_two_vectors(vReg dst, vReg_V17 src1, vReg_V18 src2, vReg index) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n+           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n+                               $index$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -238,0 +238,12 @@\n+      \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n+      \/\/ false if vector length > 16B but supported SVE version < 2.\n+      \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n+      \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n+      \/\/ Currently, as we support only vector sizes of 8B and 16B, we disable this operation for\n+      \/\/ T_LONG and T_DOUBLE on Neon as \"mul\" does not support 2D arrangement. However, these\n+      \/\/ types are supported on machines with UseSVE == 2.\n+      case Op_SelectFromTwoVector:\n+        if (UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) {\n+        return false;\n+        }\n+        break;\n@@ -5135,0 +5147,35 @@\n+\n+\/\/ --------------------------------SelectFromTwoVector -----------------------------\n+\n+instruct vselect_from_two_vectors_SIFNeon(vReg dst, vReg_V17 src1, vReg_V18 src2,\n+                                          vReg index, vReg tmp1, vReg tmp2) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_SHORT ||\n+            type2aelembytes(Matcher::vector_element_basic_type(n)) == 4) &&\n+            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vselect_from_two_vectors_SIF $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors_SIFNeon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                       $src2$$FloatRegister,$index$$FloatRegister,\n+                                       $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n+                                       bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vselect_from_two_vectors(vReg dst, vReg_V17 src1, vReg_V18 src2, vReg index) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n+           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n+                               $index$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -4297,0 +4297,10 @@\n+  \/\/ SVE2 programmable table lookup in two vector table\n+  void sve2_tbl(FloatRegister Zd, SIMD_RegVariant T, FloatRegister Zn1,\n+                FloatRegister Zn2, FloatRegister Zm) {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    assert(Zn1->successor() == Zn2, \"invalid order of registers\");\n+    f(0b00000101, 31, 24), f(T, 23, 22), f(0b1, 21), rf(Zm, 16);\n+    f(0b001010, 15, 10), rf(Zn1, 5), rf(Zd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2856,0 +2856,74 @@\n+\n+void C2_MacroAssembler::select_from_two_vectors_SIFNeon(FloatRegister dst, FloatRegister src1,\n+                                                        FloatRegister src2, FloatRegister index,\n+                                                        FloatRegister tmp1, FloatRegister tmp2,\n+                                                        BasicType bt, unsigned vector_length_in_bytes) {\n+  assert_different_registers(src1, src2, tmp1, tmp2);\n+  assert(bt == T_SHORT || bt == T_INT || bt == T_FLOAT, \"unsupported basic type\");\n+  assert(vector_length_in_bytes == 8 || vector_length_in_bytes == 16, \"unsupported vector length\");\n+\n+  \/\/ Neon \"tbl\" instruction only supports byte tables, so we need to look at chunks of\n+  \/\/ 2B for selecting shorts or chunks of 4B for selecting ints\/floats from the table.\n+  \/\/ The index values in \"index\" register are in the range of [0, 2 * NUM_ELEM) where NUM_ELEM\n+  \/\/ is the number of elements that can fit in a vector. For ex. for T_SHORT with 64-bit vector length,\n+  \/\/ the indices can range from [0, 7].\n+  \/\/ As an example with 64-bit vector length and T_SHORT type - let index = [2, 5, 1, 0]\n+  \/\/ Move a constant 0x02 in every byte of tmp1 - tmp1 = [0x0202, 0x0202, 0x0202, 0x0202]\n+  \/\/ Move a constant 0x0100 in every 2B of tmp2 - tmp2 = [0x0100, 0x0100, 0x0100, 0x0100]\n+  \/\/ Multiply index vector with tmp1 to yield - dst = [0x0404, 0x0b0b, 0x0202, 0x0000]\n+  \/\/ Add the multiplied result to the vector in tmp2 to obtain the byte level\n+  \/\/ offsets - dst = [0x0504, 0x0c0b, 0x0302, 0x0100]\n+  \/\/ Use these offsets in the \"tbl\" instruction to select chunks of 2B.\n+\n+  SIMD_Arrangement size1 = vector_length_in_bytes == 16 ? T16B : T8B;\n+  SIMD_Arrangement size2 = vector_length_in_bytes == 16 ? T8H  : T4H;\n+  if (bt == T_INT || bt == T_FLOAT) {\n+    size2 = vector_length_in_bytes == 16 ? T4S : T2S;\n+  }\n+\n+  switch (bt) {\n+    case T_SHORT:\n+      mov(tmp1, size1, 0x02);\n+      mov(tmp2, size2, 0x0100);\n+      break;\n+    case T_INT:\n+    case T_FLOAT:\n+      \/\/ Similarly, for int\/float the index values for the \"tbl\" instruction are computed to\n+      \/\/ select chunks of 4B for every int\/float element\n+      mov(tmp1, size1, 0x04);\n+      mov(tmp2, size2, 0x03020100);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+  mulv(dst, size2, index, tmp1);\n+  addv(dst, size1, dst, tmp2); \/\/ \"dst\" now contains the processed index elements\n+                               \/\/ to select a set of bytes (2B\/4B) depending on the datatype\n+\n+  if (vector_length_in_bytes == 8) {\n+    \/\/ We need to fit both the source vectors (src1, src2) in a 128-bit register as the\n+    \/\/ Neon \"tbl\" instruction supports only looking up 16B vectors and use the Neon \"tbl\"\n+    \/\/ instruction with one vector lookup\n+    ins(src1, D, src2, 1, 0);\n+    tbl(dst, size1, src1, 1, dst);\n+  } else {\n+    \/\/ If the vector length is 16B, then use the Neon \"tbl\" instruction with two vector table\n+    assert(vector_length_in_bytes == 16, \"must be\");\n+    tbl(dst, size1, src1, 2, dst);\n+  }\n+}\n+\n+void C2_MacroAssembler::select_from_two_vectors(FloatRegister dst, FloatRegister src1,\n+                                                FloatRegister src2, FloatRegister index,\n+                                                BasicType bt, unsigned vector_length_in_bytes) {\n+  if (bt == T_BYTE && vector_length_in_bytes == 8) {\n+    ins(src1, D, src2, 1, 0);\n+    tbl(dst, T8B, src1, 1, index);\n+  } else if (bt == T_BYTE && vector_length_in_bytes == 16 && UseSVE < 2){\n+    tbl(dst, T16B, src1, 2, index);\n+  } else {\n+    assert(UseSVE == 2, \"must be sve2\");\n+    SIMD_RegVariant size = elemType_to_regVariant(bt);\n+    sve2_tbl(dst, size, src1, src2, index);\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":74,"deletions":0,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-  void verify_int_in_range(uint idx, const TypeInt* t, Register val, Register tmp);\n+void verify_int_in_range(uint idx, const TypeInt* t, Register val, Register tmp);\n@@ -196,0 +196,7 @@\n+  \/\/ Select from a table of two vectors\n+  void select_from_two_vectors_SIFNeon(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+                                       FloatRegister index, FloatRegister tmp1, FloatRegister tmp2,\n+                                       BasicType bt, unsigned length_in_bytes);\n+\n+  void select_from_two_vectors(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+                               FloatRegister index, BasicType bt, unsigned length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2742,0 +2742,3 @@\n+  \/\/ Check if the platform requires a VectorLoadShuffle node to be generated\n+  bool need_load_shuffle = Matcher::vector_rearrange_requires_load_shuffle(index_elem_bt, num_elem);\n+\n@@ -2751,1 +2754,1 @@\n-        !arch_supports_vector(Op_VectorLoadShuffle, num_elem, index_elem_bt, VecMaskNotUsed) ||\n+        (need_load_shuffle && !arch_supports_vector(Op_VectorLoadShuffle, num_elem, index_elem_bt, VecMaskNotUsed)) ||\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2090,0 +2090,1 @@\n+                        [\"tbl\",      \"__ sve2_tbl(z16, __ S, z17, z18, z16);\",             \"tbl\\tz16.s, {z17.s, z18.s}, z16.s\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1102,0 +1102,1 @@\n+    __ sve2_tbl(z16, __ S, z17, z18, z16);             \/\/       tbl     z16.s, {z17.s, z18.s}, z16.s\n@@ -1440,7 +1441,7 @@\n-    0x14000000,     0x17ffffd7,     0x140004af,     0x94000000,\n-    0x97ffffd4,     0x940004ac,     0x3400000a,     0x34fffa2a,\n-    0x3400952a,     0x35000008,     0x35fff9c8,     0x350094c8,\n-    0xb400000b,     0xb4fff96b,     0xb400946b,     0xb500001d,\n-    0xb5fff91d,     0xb500941d,     0x10000013,     0x10fff8b3,\n-    0x100093b3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36309336,     0x3758000c,     0x375ff7cc,     0x375892cc,\n+    0x14000000,     0x17ffffd7,     0x140004b0,     0x94000000,\n+    0x97ffffd4,     0x940004ad,     0x3400000a,     0x34fffa2a,\n+    0x3400954a,     0x35000008,     0x35fff9c8,     0x350094e8,\n+    0xb400000b,     0xb4fff96b,     0xb400948b,     0xb500001d,\n+    0xb5fff91d,     0xb500943d,     0x10000013,     0x10fff8b3,\n+    0x100093d3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36309356,     0x3758000c,     0x375ff7cc,     0x375892ec,\n@@ -1451,13 +1452,13 @@\n-    0x540090a0,     0x54000001,     0x54fff541,     0x54009041,\n-    0x54000002,     0x54fff4e2,     0x54008fe2,     0x54000002,\n-    0x54fff482,     0x54008f82,     0x54000003,     0x54fff423,\n-    0x54008f23,     0x54000003,     0x54fff3c3,     0x54008ec3,\n-    0x54000004,     0x54fff364,     0x54008e64,     0x54000005,\n-    0x54fff305,     0x54008e05,     0x54000006,     0x54fff2a6,\n-    0x54008da6,     0x54000007,     0x54fff247,     0x54008d47,\n-    0x54000008,     0x54fff1e8,     0x54008ce8,     0x54000009,\n-    0x54fff189,     0x54008c89,     0x5400000a,     0x54fff12a,\n-    0x54008c2a,     0x5400000b,     0x54fff0cb,     0x54008bcb,\n-    0x5400000c,     0x54fff06c,     0x54008b6c,     0x5400000d,\n-    0x54fff00d,     0x54008b0d,     0x5400000e,     0x54ffefae,\n-    0x54008aae,     0x5400000f,     0x54ffef4f,     0x54008a4f,\n+    0x540090c0,     0x54000001,     0x54fff541,     0x54009061,\n+    0x54000002,     0x54fff4e2,     0x54009002,     0x54000002,\n+    0x54fff482,     0x54008fa2,     0x54000003,     0x54fff423,\n+    0x54008f43,     0x54000003,     0x54fff3c3,     0x54008ee3,\n+    0x54000004,     0x54fff364,     0x54008e84,     0x54000005,\n+    0x54fff305,     0x54008e25,     0x54000006,     0x54fff2a6,\n+    0x54008dc6,     0x54000007,     0x54fff247,     0x54008d67,\n+    0x54000008,     0x54fff1e8,     0x54008d08,     0x54000009,\n+    0x54fff189,     0x54008ca9,     0x5400000a,     0x54fff12a,\n+    0x54008c4a,     0x5400000b,     0x54fff0cb,     0x54008beb,\n+    0x5400000c,     0x54fff06c,     0x54008b8c,     0x5400000d,\n+    0x54fff00d,     0x54008b2d,     0x5400000e,     0x54ffefae,\n+    0x54008ace,     0x5400000f,     0x54ffef4f,     0x54008a6f,\n@@ -1670,71 +1671,71 @@\n-    0x05b23230,     0x853040af,     0xc5b040af,     0xe57080af,\n-    0xe5b080af,     0x25034440,     0x254054c4,     0x25034640,\n-    0x25415a05,     0x25834440,     0x25c54489,     0x250b5d3a,\n-    0x2550dc20,     0x2518e3e1,     0x2518e021,     0x2518e0a1,\n-    0x2518e121,     0x2518e1a1,     0x2558e3e2,     0x2558e042,\n-    0x2558e0c2,     0x2558e142,     0x2598e3e3,     0x2598e063,\n-    0x2598e0e3,     0x2598e163,     0x25d8e3e4,     0x25d8e084,\n-    0x25d8e104,     0x25d8e184,     0x2518e407,     0x05214800,\n-    0x05614800,     0x05a14800,     0x05e14800,     0x05214c00,\n-    0x05614c00,     0x05a14c00,     0x05e14c00,     0x05304001,\n-    0x05314001,     0x05a18610,     0x05e18610,     0x05271e11,\n-    0x6545e891,     0x6585e891,     0x65c5e891,     0x6545c891,\n-    0x6585c891,     0x65c5c891,     0x45b0c210,     0x45f1c231,\n-    0x1e601000,     0x1e603000,     0x1e621000,     0x1e623000,\n-    0x1e641000,     0x1e643000,     0x1e661000,     0x1e663000,\n-    0x1e681000,     0x1e683000,     0x1e6a1000,     0x1e6a3000,\n-    0x1e6c1000,     0x1e6c3000,     0x1e6e1000,     0x1e6e3000,\n-    0x1e701000,     0x1e703000,     0x1e721000,     0x1e723000,\n-    0x1e741000,     0x1e743000,     0x1e761000,     0x1e763000,\n-    0x1e781000,     0x1e783000,     0x1e7a1000,     0x1e7a3000,\n-    0x1e7c1000,     0x1e7c3000,     0x1e7e1000,     0x1e7e3000,\n-    0xf8268267,     0xf82d023c,     0xf8301046,     0xf83d2083,\n-    0xf8263290,     0xf82d528c,     0xf8284299,     0xf8337160,\n-    0xf8386286,     0xf8bf820e,     0xf8a600e0,     0xf8af1353,\n-    0xf8a922ea,     0xf8b53396,     0xf8a251e3,     0xf8b340f4,\n-    0xf8a470fd,     0xf8a06209,     0xf8f48097,     0xf8f002ea,\n-    0xf8eb10d9,     0xf8ff21b0,     0xf8f7302c,     0xf8ee52a9,\n-    0xf8f041fa,     0xf8e471e4,     0xf8e863c6,     0xf864823d,\n-    0xf87d013a,     0xf86f1162,     0xf87d20e3,     0xf86132bb,\n-    0xf870510e,     0xf8704336,     0xf86572b4,     0xf8706217,\n-    0xb83e8294,     0xb8200264,     0xb8381284,     0xb8242358,\n-    0xb8333102,     0xb828530e,     0xb83042df,     0xb824703f,\n-    0xb82a6194,     0xb8a080e9,     0xb8b80090,     0xb8bb1146,\n-    0xb8bb21b8,     0xb8b032df,     0xb8b653f4,     0xb8bd41c9,\n-    0xb8b47287,     0xb8bc6169,     0xb8ee828c,     0xb8e10138,\n-    0xb8f3126d,     0xb8f020b0,     0xb8e03183,     0xb8e851ef,\n-    0xb8f041e4,     0xb8fe7005,     0xb8ea6376,     0xb8638120,\n-    0xb873015d,     0xb8781284,     0xb86723b8,     0xb86e3175,\n-    0xb87b51ed,     0xb87f41d1,     0xb863721e,     0xb87660f4,\n-    0xce216874,     0xce104533,     0xce648c15,     0xce8e3302,\n-    0xce6e82ab,     0xce6c87d1,     0xcec08063,     0xce638937,\n-    0x25e0c358,     0x25a1c7d3,     0x0580785a,     0x05426328,\n-    0x05009892,     0x25a0cc29,     0x2561cec8,     0x058044b3,\n-    0x05401c99,     0x05006b49,     0x25e0d6f7,     0x2561c528,\n-    0x0583c8bc,     0x0542522f,     0x05001ec0,     0x25e0de65,\n-    0x25a1c113,     0x05803cad,     0x0540f3c0,     0x0500ab15,\n-    0x2560c28c,     0x2561d7c0,     0x05801ed7,     0x0542633b,\n-    0x05003696,     0x2560d4b4,     0x25e1c918,     0x058021ff,\n-    0x05400e15,     0x0500f3de,     0x0473025a,     0x04bd05ab,\n-    0x658e0025,     0x658a08e2,     0x659a0493,     0x043e1062,\n-    0x04f418b4,     0x046d15bd,     0x04611fce,     0x04d6a07c,\n-    0x04001929,     0x041a09da,     0x04d098f4,     0x04db10d4,\n-    0x0459a3ad,     0x041aa029,     0x041919fb,     0x04d39e24,\n-    0x04118302,     0x04101dba,     0x04d7ae16,     0x04dea571,\n-    0x04180210,     0x05e786fc,     0x05e4915c,     0x04881cf1,\n-    0x044a0f04,     0x04090969,     0x048b16c4,     0x044101e4,\n-    0x04dcbf44,     0x65809745,     0x658d833f,     0x65c68468,\n-    0x65c79b07,     0x65829e38,     0x049dafca,     0x6582bba8,\n-    0x65c0b7ff,     0x65c1b4e0,     0x658dbadd,     0x65819a9d,\n-    0x65ed9246,     0x65b30815,     0x65e6263c,     0x65eebb94,\n-    0x65bad14e,     0x65efe178,     0x65fc5697,     0x65e07f14,\n-    0x040c55a6,     0x04977f4d,     0x043d3046,     0x04b733a0,\n-    0x046830a4,     0x04ed322d,     0x05686948,     0x05bd6c13,\n-    0x65c88ef0,     0x450db3d7,     0x4540b6d9,     0x043e3979,\n-    0x445896ce,     0x445a9005,     0x44d98069,     0x445b87ae,\n-    0x04da348e,     0x04982edb,     0x0499397f,     0x0408338c,\n-    0x04ca309c,     0x65c721e6,     0x65c63641,     0x65982882,\n-    0x04812b8b,     0x0e251083,     0x4e3712d5,     0x0e61101f,\n-    0x4e6d118b,     0x0eba1338,     0x4eb712d5,     0x2e31120f,\n-    0x6e2e11ac,     0x2e6810e6,     0x6e6f11cd,     0x2eaa1128,\n-    0x6eb1120f,\n+    0x05b23230,     0x05b02a30,     0x853040af,     0xc5b040af,\n+    0xe57080af,     0xe5b080af,     0x25034440,     0x254054c4,\n+    0x25034640,     0x25415a05,     0x25834440,     0x25c54489,\n+    0x250b5d3a,     0x2550dc20,     0x2518e3e1,     0x2518e021,\n+    0x2518e0a1,     0x2518e121,     0x2518e1a1,     0x2558e3e2,\n+    0x2558e042,     0x2558e0c2,     0x2558e142,     0x2598e3e3,\n+    0x2598e063,     0x2598e0e3,     0x2598e163,     0x25d8e3e4,\n+    0x25d8e084,     0x25d8e104,     0x25d8e184,     0x2518e407,\n+    0x05214800,     0x05614800,     0x05a14800,     0x05e14800,\n+    0x05214c00,     0x05614c00,     0x05a14c00,     0x05e14c00,\n+    0x05304001,     0x05314001,     0x05a18610,     0x05e18610,\n+    0x05271e11,     0x6545e891,     0x6585e891,     0x65c5e891,\n+    0x6545c891,     0x6585c891,     0x65c5c891,     0x45b0c210,\n+    0x45f1c231,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8268267,     0xf82d023c,     0xf8301046,\n+    0xf83d2083,     0xf8263290,     0xf82d528c,     0xf8284299,\n+    0xf8337160,     0xf8386286,     0xf8bf820e,     0xf8a600e0,\n+    0xf8af1353,     0xf8a922ea,     0xf8b53396,     0xf8a251e3,\n+    0xf8b340f4,     0xf8a470fd,     0xf8a06209,     0xf8f48097,\n+    0xf8f002ea,     0xf8eb10d9,     0xf8ff21b0,     0xf8f7302c,\n+    0xf8ee52a9,     0xf8f041fa,     0xf8e471e4,     0xf8e863c6,\n+    0xf864823d,     0xf87d013a,     0xf86f1162,     0xf87d20e3,\n+    0xf86132bb,     0xf870510e,     0xf8704336,     0xf86572b4,\n+    0xf8706217,     0xb83e8294,     0xb8200264,     0xb8381284,\n+    0xb8242358,     0xb8333102,     0xb828530e,     0xb83042df,\n+    0xb824703f,     0xb82a6194,     0xb8a080e9,     0xb8b80090,\n+    0xb8bb1146,     0xb8bb21b8,     0xb8b032df,     0xb8b653f4,\n+    0xb8bd41c9,     0xb8b47287,     0xb8bc6169,     0xb8ee828c,\n+    0xb8e10138,     0xb8f3126d,     0xb8f020b0,     0xb8e03183,\n+    0xb8e851ef,     0xb8f041e4,     0xb8fe7005,     0xb8ea6376,\n+    0xb8638120,     0xb873015d,     0xb8781284,     0xb86723b8,\n+    0xb86e3175,     0xb87b51ed,     0xb87f41d1,     0xb863721e,\n+    0xb87660f4,     0xce216874,     0xce104533,     0xce648c15,\n+    0xce8e3302,     0xce6e82ab,     0xce6c87d1,     0xcec08063,\n+    0xce638937,     0x25e0c358,     0x25a1c7d3,     0x0580785a,\n+    0x05426328,     0x05009892,     0x25a0cc29,     0x2561cec8,\n+    0x058044b3,     0x05401c99,     0x05006b49,     0x25e0d6f7,\n+    0x2561c528,     0x0583c8bc,     0x0542522f,     0x05001ec0,\n+    0x25e0de65,     0x25a1c113,     0x05803cad,     0x0540f3c0,\n+    0x0500ab15,     0x2560c28c,     0x2561d7c0,     0x05801ed7,\n+    0x0542633b,     0x05003696,     0x2560d4b4,     0x25e1c918,\n+    0x058021ff,     0x05400e15,     0x0500f3de,     0x0473025a,\n+    0x04bd05ab,     0x658e0025,     0x658a08e2,     0x659a0493,\n+    0x043e1062,     0x04f418b4,     0x046d15bd,     0x04611fce,\n+    0x04d6a07c,     0x04001929,     0x041a09da,     0x04d098f4,\n+    0x04db10d4,     0x0459a3ad,     0x041aa029,     0x041919fb,\n+    0x04d39e24,     0x04118302,     0x04101dba,     0x04d7ae16,\n+    0x04dea571,     0x04180210,     0x05e786fc,     0x05e4915c,\n+    0x04881cf1,     0x044a0f04,     0x04090969,     0x048b16c4,\n+    0x044101e4,     0x04dcbf44,     0x65809745,     0x658d833f,\n+    0x65c68468,     0x65c79b07,     0x65829e38,     0x049dafca,\n+    0x6582bba8,     0x65c0b7ff,     0x65c1b4e0,     0x658dbadd,\n+    0x65819a9d,     0x65ed9246,     0x65b30815,     0x65e6263c,\n+    0x65eebb94,     0x65bad14e,     0x65efe178,     0x65fc5697,\n+    0x65e07f14,     0x040c55a6,     0x04977f4d,     0x043d3046,\n+    0x04b733a0,     0x046830a4,     0x04ed322d,     0x05686948,\n+    0x05bd6c13,     0x65c88ef0,     0x450db3d7,     0x4540b6d9,\n+    0x043e3979,     0x445896ce,     0x445a9005,     0x44d98069,\n+    0x445b87ae,     0x04da348e,     0x04982edb,     0x0499397f,\n+    0x0408338c,     0x04ca309c,     0x65c721e6,     0x65c63641,\n+    0x65982882,     0x04812b8b,     0x0e251083,     0x4e3712d5,\n+    0x0e61101f,     0x4e6d118b,     0x0eba1338,     0x4eb712d5,\n+    0x2e31120f,     0x6e2e11ac,     0x2e6810e6,     0x6e6f11cd,\n+    0x2eaa1128,     0x6eb1120f,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":92,"deletions":91,"binary":false,"changes":183,"status":"modified"}]}