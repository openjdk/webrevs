{"files":[{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -884,0 +884,10 @@\n+\/\/ Class for vector register V17\n+reg_class v17_veca_reg(\n+    V17, V17_H, V17_J, V17_K\n+);\n+\n+\/\/ Class for vector register v18\n+reg_class v18_veca_reg(\n+    V18, V18_H, V18_J, V18_K\n+);\n+\n@@ -4945,0 +4955,20 @@\n+operand vReg_V17()\n+%{\n+  constraint(ALLOC_IN_RC(v17_veca_reg));\n+  match(vReg);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand vReg_V18()\n+%{\n+  constraint(ALLOC_IN_RC(v18_veca_reg));\n+  match(vReg);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2024, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2025, Arm Limited. All rights reserved.\n@@ -234,0 +234,12 @@\n+      \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n+      \/\/ false if vector length > 16B but supported SVE version < 2.\n+      \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n+      \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n+      \/\/ Currently, as we support only vector sizes of 8B and 16B, we disable this operation for\n+      \/\/ T_LONG and T_DOUBLE on Neon as \"mul\" does not support 2D arrangement. However, these\n+      \/\/ types are supported on machines with UseSVE == 2.\n+      case Op_SelectFromTwoVector:\n+        if (UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) {\n+          return false;\n+        }\n+        break;\n@@ -6714,0 +6726,35 @@\n+\n+\/\/ --------------------------------SelectFromTwoVector -----------------------------\n+\n+instruct vselect_from_two_vectors_SIFNeon(vReg dst, vReg_V17 src1, vReg_V18 src2,\n+                                          vReg index, vReg tmp1, vReg tmp2) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_SHORT ||\n+            type2aelembytes(Matcher::vector_element_basic_type(n)) == 4) &&\n+            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vselect_from_two_vectors_SIF $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors_SIFNeon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                       $src2$$FloatRegister,$index$$FloatRegister,\n+                                       $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n+                                       bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vselect_from_two_vectors(vReg dst, vReg_V17 src1, vReg_V18 src2, vReg index) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n+           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n+                               $index$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2024, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2025, Arm Limited. All rights reserved.\n@@ -224,0 +224,12 @@\n+      \/\/ The \"tbl\" instruction for two vector table is supported only in Neon and SVE2. Return\n+      \/\/ false if vector length > 16B but supported SVE version < 2.\n+      \/\/ For vector length of 16B, generate SVE2 \"tbl\" instruction if SVE2 is supported, else\n+      \/\/ generate Neon \"tbl\" instruction to select from two vectors.\n+      \/\/ Currently, as we support only vector sizes of 8B and 16B, we disable this operation for\n+      \/\/ T_LONG and T_DOUBLE on Neon as \"mul\" does not support 2D arrangement. However, these\n+      \/\/ types are supported on machines with UseSVE == 2.\n+      case Op_SelectFromTwoVector:\n+        if (UseSVE < 2 && (type2aelembytes(bt) == 8 || length_in_bytes > 16)) {\n+          return false;\n+        }\n+        break;\n@@ -4933,0 +4945,35 @@\n+\n+\/\/ --------------------------------SelectFromTwoVector -----------------------------\n+\n+instruct vselect_from_two_vectors_SIFNeon(vReg dst, vReg_V17 src1, vReg_V18 src2,\n+                                          vReg index, vReg tmp1, vReg tmp2) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_SHORT ||\n+            type2aelembytes(Matcher::vector_element_basic_type(n)) == 4) &&\n+            (UseSVE < 2 || Matcher::vector_length_in_bytes(n) < 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"vselect_from_two_vectors_SIF $dst, $src1, $src2, $index\\t# vector (4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp1, $tmp2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors_SIFNeon($dst$$FloatRegister, $src1$$FloatRegister,\n+                                       $src2$$FloatRegister,$index$$FloatRegister,\n+                                       $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n+                                       bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vselect_from_two_vectors(vReg dst, vReg_V17 src1, vReg_V18 src2, vReg index) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n+           (UseSVE == 2 && Matcher::vector_length_in_bytes(n) >= 16));\n+  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n+  format %{ \"vselect_from_two_vectors $dst, $src1, $src2, $index\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister, $src2$$FloatRegister,\n+                               $index$$FloatRegister, bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -4224,0 +4224,10 @@\n+  \/\/ SVE2 programmable table lookup in two vector table\n+  void sve2_tbl(FloatRegister Zd, SIMD_RegVariant T, FloatRegister Zn1,\n+                FloatRegister Zn2, FloatRegister Zm) {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    assert(Zn1->successor() == Zn2, \"invalid order of registers\");\n+    f(0b00000101, 31, 24), f(T, 23, 22), f(0b1, 21), rf(Zm, 16);\n+    f(0b001010, 15, 10), rf(Zn1, 5), rf(Zd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2692,0 +2692,74 @@\n+\n+void C2_MacroAssembler::select_from_two_vectors_SIFNeon(FloatRegister dst, FloatRegister src1,\n+                                                        FloatRegister src2, FloatRegister index,\n+                                                        FloatRegister tmp1, FloatRegister tmp2,\n+                                                        BasicType bt, unsigned vector_length_in_bytes) {\n+  assert_different_registers(src1, src2, tmp1, tmp2);\n+  assert(bt == T_SHORT || bt == T_INT || bt == T_FLOAT, \"unsupported basic type\");\n+  assert(vector_length_in_bytes == 8 || vector_length_in_bytes == 16, \"unsupported vector length\");\n+\n+  \/\/ Neon \"tbl\" instruction only supports byte tables, so we need to look at chunks of\n+  \/\/ 2B for selecting shorts or chunks of 4B for selecting ints\/floats from the table.\n+  \/\/ The index values in \"index\" register are in the range of [0, 2 * NUM_ELEM) where NUM_ELEM\n+  \/\/ is the number of elements that can fit in a vector. For ex. for T_SHORT with 64-bit vector length,\n+  \/\/ the indices can range from [0, 7].\n+  \/\/ As an example with 64-bit vector length and T_SHORT type - let index = [2, 5, 1, 0]\n+  \/\/ Move a constant 0x02 in every byte of tmp1 - tmp1 = [0x0202, 0x0202, 0x0202, 0x0202]\n+  \/\/ Move a constant 0x0100 in every 2B of tmp2 - tmp2 = [0x0100, 0x0100, 0x0100, 0x0100]\n+  \/\/ Multiply index vector with tmp1 to yield - dst = [0x0404, 0x0b0b, 0x0202, 0x0000]\n+  \/\/ Add the multiplied result to the vector in tmp2 to obtain the byte level\n+  \/\/ offsets - dst = [0x0504, 0x0c0b, 0x0302, 0x0100]\n+  \/\/ Use these offsets in the \"tbl\" instruction to select chunks of 2B.\n+\n+  SIMD_Arrangement size1 = vector_length_in_bytes == 16 ? T16B : T8B;\n+  SIMD_Arrangement size2 = vector_length_in_bytes == 16 ? T8H  : T4H;\n+  if (bt == T_INT || bt == T_FLOAT) {\n+    size2 = vector_length_in_bytes == 16 ? T4S : T2S;\n+  }\n+\n+  switch (bt) {\n+    case T_SHORT:\n+      mov(tmp1, size1, 0x02);\n+      mov(tmp2, size2, 0x0100);\n+      break;\n+    case T_INT:\n+    case T_FLOAT:\n+      \/\/ Similarly, for int\/float the index values for the \"tbl\" instruction are computed to\n+      \/\/ select chunks of 4B for every int\/float element\n+      mov(tmp1, size1, 0x04);\n+      mov(tmp2, size2, 0x03020100);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+  mulv(dst, size2, index, tmp1);\n+  addv(dst, size1, dst, tmp2); \/\/ \"dst\" now contains the processed index elements\n+                               \/\/ to select a set of bytes (2B\/4B) depending on the datatype\n+\n+  if (vector_length_in_bytes == 8) {\n+    \/\/ We need to fit both the source vectors (src1, src2) in a 128-bit register as the\n+    \/\/ Neon \"tbl\" instruction supports only looking up 16B vectors and use the Neon \"tbl\"\n+    \/\/ instruction with one vector lookup\n+    ins(src1, D, src2, 1, 0);\n+    tbl(dst, size1, src1, 1, dst);\n+  } else {\n+    \/\/ If the vector length is 16B, then use the Neon \"tbl\" instruction with two vector table\n+    assert(vector_length_in_bytes == 16, \"must be\");\n+    tbl(dst, size1, src1, 2, dst);\n+  }\n+}\n+\n+void C2_MacroAssembler::select_from_two_vectors(FloatRegister dst, FloatRegister src1,\n+                                                FloatRegister src2, FloatRegister index,\n+                                                BasicType bt, unsigned vector_length_in_bytes) {\n+  if (bt == T_BYTE && vector_length_in_bytes == 8) {\n+    ins(src1, D, src2, 1, 0);\n+    tbl(dst, T8B, src1, 1, index);\n+  } else if (bt == T_BYTE && vector_length_in_bytes == 16 && UseSVE < 2){\n+    tbl(dst, T16B, src1, 2, index);\n+  } else {\n+    assert(UseSVE == 2, \"must be sve2\");\n+    SIMD_RegVariant size = elemType_to_regVariant(bt);\n+    sve2_tbl(dst, size, src1, src2, index);\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":74,"deletions":0,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,0 +189,7 @@\n+  \/\/ Select from a table of two vectors\n+  void select_from_two_vectors_SIFNeon(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+                                       FloatRegister index, FloatRegister tmp1, FloatRegister tmp2,\n+                                       BasicType bt, unsigned length_in_bytes);\n+\n+  void select_from_two_vectors(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+                               FloatRegister index, BasicType bt, unsigned length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2727,0 +2727,3 @@\n+  \/\/ Check if the platform requires a VectorLoadShuffle node to be generated\n+  bool need_load_shuffle = Matcher::vector_rearrange_requires_load_shuffle(index_elem_bt, num_elem);\n+\n@@ -2736,1 +2739,1 @@\n-        !arch_supports_vector(Op_VectorLoadShuffle, num_elem, index_elem_bt, VecMaskNotUsed) ||\n+        (need_load_shuffle && !arch_supports_vector(Op_VectorLoadShuffle, num_elem, index_elem_bt, VecMaskNotUsed)) ||\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2039,0 +2039,1 @@\n+                        [\"tbl\",      \"__ sve2_tbl(z16, __ S, z17, z18, z16);\",             \"tbl\\tz16.s, {z17.s, z18.s}, z16.s\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1002,0 +1002,1 @@\n+    __ sve2_tbl(z16, __ S, z17, z18, z16);             \/\/       tbl     z16.s, {z17.s, z18.s}, z16.s\n@@ -1330,7 +1331,7 @@\n-    0x14000000,     0x17ffffd7,     0x14000441,     0x94000000,\n-    0x97ffffd4,     0x9400043e,     0x3400000a,     0x34fffa2a,\n-    0x3400876a,     0x35000008,     0x35fff9c8,     0x35008708,\n-    0xb400000b,     0xb4fff96b,     0xb40086ab,     0xb500001d,\n-    0xb5fff91d,     0xb500865d,     0x10000013,     0x10fff8b3,\n-    0x100085f3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36308576,     0x3758000c,     0x375ff7cc,     0x3758850c,\n+    0x14000000,     0x17ffffd7,     0x14000442,     0x94000000,\n+    0x97ffffd4,     0x9400043f,     0x3400000a,     0x34fffa2a,\n+    0x3400878a,     0x35000008,     0x35fff9c8,     0x35008728,\n+    0xb400000b,     0xb4fff96b,     0xb40086cb,     0xb500001d,\n+    0xb5fff91d,     0xb500867d,     0x10000013,     0x10fff8b3,\n+    0x10008613,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36308596,     0x3758000c,     0x375ff7cc,     0x3758852c,\n@@ -1341,13 +1342,13 @@\n-    0x540082e0,     0x54000001,     0x54fff541,     0x54008281,\n-    0x54000002,     0x54fff4e2,     0x54008222,     0x54000002,\n-    0x54fff482,     0x540081c2,     0x54000003,     0x54fff423,\n-    0x54008163,     0x54000003,     0x54fff3c3,     0x54008103,\n-    0x54000004,     0x54fff364,     0x540080a4,     0x54000005,\n-    0x54fff305,     0x54008045,     0x54000006,     0x54fff2a6,\n-    0x54007fe6,     0x54000007,     0x54fff247,     0x54007f87,\n-    0x54000008,     0x54fff1e8,     0x54007f28,     0x54000009,\n-    0x54fff189,     0x54007ec9,     0x5400000a,     0x54fff12a,\n-    0x54007e6a,     0x5400000b,     0x54fff0cb,     0x54007e0b,\n-    0x5400000c,     0x54fff06c,     0x54007dac,     0x5400000d,\n-    0x54fff00d,     0x54007d4d,     0x5400000e,     0x54ffefae,\n-    0x54007cee,     0x5400000f,     0x54ffef4f,     0x54007c8f,\n+    0x54008300,     0x54000001,     0x54fff541,     0x540082a1,\n+    0x54000002,     0x54fff4e2,     0x54008242,     0x54000002,\n+    0x54fff482,     0x540081e2,     0x54000003,     0x54fff423,\n+    0x54008183,     0x54000003,     0x54fff3c3,     0x54008123,\n+    0x54000004,     0x54fff364,     0x540080c4,     0x54000005,\n+    0x54fff305,     0x54008065,     0x54000006,     0x54fff2a6,\n+    0x54008006,     0x54000007,     0x54fff247,     0x54007fa7,\n+    0x54000008,     0x54fff1e8,     0x54007f48,     0x54000009,\n+    0x54fff189,     0x54007ee9,     0x5400000a,     0x54fff12a,\n+    0x54007e8a,     0x5400000b,     0x54fff0cb,     0x54007e2b,\n+    0x5400000c,     0x54fff06c,     0x54007dcc,     0x5400000d,\n+    0x54fff00d,     0x54007d6d,     0x5400000e,     0x54ffefae,\n+    0x54007d0e,     0x5400000f,     0x54ffef4f,     0x54007caf,\n@@ -1535,68 +1536,69 @@\n-    0x05b23230,     0x853040af,     0xc5b040af,     0xe57080af,\n-    0xe5b080af,     0x25034440,     0x254054c4,     0x25034640,\n-    0x25415a05,     0x25834440,     0x25c54489,     0x250b5d3a,\n-    0x2550dc20,     0x2518e3e1,     0x2518e021,     0x2518e0a1,\n-    0x2518e121,     0x2518e1a1,     0x2558e3e2,     0x2558e042,\n-    0x2558e0c2,     0x2558e142,     0x2598e3e3,     0x2598e063,\n-    0x2598e0e3,     0x2598e163,     0x25d8e3e4,     0x25d8e084,\n-    0x25d8e104,     0x25d8e184,     0x2518e407,     0x05214800,\n-    0x05614800,     0x05a14800,     0x05e14800,     0x05214c00,\n-    0x05614c00,     0x05a14c00,     0x05e14c00,     0x05304001,\n-    0x05314001,     0x05a18610,     0x05e18610,     0x05271e11,\n-    0x6545e891,     0x6585e891,     0x65c5e891,     0x6545c891,\n-    0x6585c891,     0x65c5c891,     0x45b0c210,     0x45f1c231,\n-    0x1e601000,     0x1e603000,     0x1e621000,     0x1e623000,\n-    0x1e641000,     0x1e643000,     0x1e661000,     0x1e663000,\n-    0x1e681000,     0x1e683000,     0x1e6a1000,     0x1e6a3000,\n-    0x1e6c1000,     0x1e6c3000,     0x1e6e1000,     0x1e6e3000,\n-    0x1e701000,     0x1e703000,     0x1e721000,     0x1e723000,\n-    0x1e741000,     0x1e743000,     0x1e761000,     0x1e763000,\n-    0x1e781000,     0x1e783000,     0x1e7a1000,     0x1e7a3000,\n-    0x1e7c1000,     0x1e7c3000,     0x1e7e1000,     0x1e7e3000,\n-    0xf8338131,     0xf83c01fb,     0xf82712f5,     0xf83f2059,\n-    0xf83f31fb,     0xf82a5277,     0xf8234010,     0xf83972fa,\n-    0xf8226190,     0xf8a483dc,     0xf8bd0370,     0xf8a613a9,\n-    0xf8b02087,     0xf8a7312f,     0xf8b75048,     0xf8bc43f5,\n-    0xf8a5701b,     0xf8b1608f,     0xf8fa8388,     0xf8f6037b,\n-    0xf8f91017,     0xf8e421e6,     0xf8e031e4,     0xf8e150ea,\n-    0xf8e5438a,     0xf8e772f4,     0xf8f56166,     0xf86883f1,\n-    0xf8660051,     0xf86c13be,     0xf86322db,     0xf87d31ae,\n-    0xf87c5311,     0xf86541c2,     0xf86a7170,     0xf87b6197,\n-    0xb8248236,     0xb8240261,     0xb83011b0,     0xb82e204c,\n-    0xb83132a3,     0xb83750c5,     0xb82741b3,     0xb83c7211,\n-    0xb82663a2,     0xb8a380c4,     0xb8b001b4,     0xb8ac1114,\n-    0xb8b92274,     0xb8a0330b,     0xb8a653f4,     0xb8ae40d0,\n-    0xb8a071e7,     0xb8b3613a,     0xb8ea82b7,     0xb8f6005c,\n-    0xb8e3126f,     0xb8f42087,     0xb8fd3007,     0xb8e95290,\n-    0xb8f74204,     0xb8ea7177,     0xb8f963e6,     0xb87082ed,\n-    0xb86c01c1,     0xb8691215,     0xb87a208f,     0xb8643110,\n-    0xb866509e,     0xb87d43b1,     0xb87a71e9,     0xb86263ab,\n-    0xce216ce3,     0xce0e2255,     0xce798ed2,     0xce959685,\n-    0xce7e8217,     0xce608694,     0xcec08264,     0xce748898,\n-    0x25e0da44,     0x2521c8f3,     0x05801548,     0x0540cbdf,\n-    0x05006521,     0x2560c7a0,     0x25a1c498,     0x058026bb,\n-    0x05407dd8,     0x0500f3d6,     0x2560ce3d,     0x2521d4b4,\n-    0x05803cbc,     0x05404d6c,     0x05001b89,     0x25a0c532,\n-    0x2521cc40,     0x05800c08,     0x054074c4,     0x050034a0,\n-    0x2520c9e3,     0x25e1ca93,     0x05803e98,     0x05425238,\n-    0x050024cb,     0x25a0ce7f,     0x25e1d0c3,     0x05802676,\n-    0x05401e63,     0x05002d49,     0x04e20080,     0x04ab04ce,\n-    0x659e022e,     0x65970863,     0x659c0703,     0x04d6b4f3,\n-    0x04400cb5,     0x049a06da,     0x04508071,     0x045b0d14,\n-    0x0459b22e,     0x04daba4d,     0x04590a13,     0x0493979b,\n-    0x04d188a8,     0x0450081c,     0x0417b6b9,     0x041eb743,\n-    0x04981e7a,     0x05e78dc1,     0x0564824e,     0x048816ff,\n-    0x040a0d1e,     0x04810ee0,     0x04dcb340,     0x65c08ed8,\n-    0x65cd8162,     0x65c6970c,     0x65c79e29,     0x65c29494,\n-    0x04ddbecd,     0x65c2ba5f,     0x65c0a9af,     0x6581a434,\n-    0x658da0ee,     0x65c1908c,     0x65be806f,     0x65ff0694,\n-    0x65ee2d2d,     0x65a3af81,     0x65a9cb3a,     0x65e1e9da,\n-    0x65f447ba,     0x65e17da6,     0x0401482b,     0x040279fb,\n-    0x0439323e,     0x04a33302,     0x046331bd,     0x04fc320e,\n-    0x05bb6964,     0x05e16e02,     0x65c897e7,     0x4596b150,\n-    0x4516b4fd,     0x0438396c,     0x041a280b,     0x04183697,\n-    0x04192de3,     0x04083b7e,     0x04ca3955,     0x65873883,\n-    0x658622a6,     0x65d83bd9,     0x0441303f,     0x0e2e11ac,\n-    0x4e2013fe,     0x0e6f11cd,     0x4e6a1128,     0x0ebb1359,\n-    0x4ebf13dd,     0x2e231041,     0x6e21101f,     0x2e791317,\n-    0x6e61101f,     0x2eb612b4,     0x6ea21020,\n+    0x05b23230,     0x05b02a30,     0x853040af,     0xc5b040af,\n+    0xe57080af,     0xe5b080af,     0x25034440,     0x254054c4,\n+    0x25034640,     0x25415a05,     0x25834440,     0x25c54489,\n+    0x250b5d3a,     0x2550dc20,     0x2518e3e1,     0x2518e021,\n+    0x2518e0a1,     0x2518e121,     0x2518e1a1,     0x2558e3e2,\n+    0x2558e042,     0x2558e0c2,     0x2558e142,     0x2598e3e3,\n+    0x2598e063,     0x2598e0e3,     0x2598e163,     0x25d8e3e4,\n+    0x25d8e084,     0x25d8e104,     0x25d8e184,     0x2518e407,\n+    0x05214800,     0x05614800,     0x05a14800,     0x05e14800,\n+    0x05214c00,     0x05614c00,     0x05a14c00,     0x05e14c00,\n+    0x05304001,     0x05314001,     0x05a18610,     0x05e18610,\n+    0x05271e11,     0x6545e891,     0x6585e891,     0x65c5e891,\n+    0x6545c891,     0x6585c891,     0x65c5c891,     0x45b0c210,\n+    0x45f1c231,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8338131,     0xf83c01fb,     0xf82712f5,\n+    0xf83f2059,     0xf83f31fb,     0xf82a5277,     0xf8234010,\n+    0xf83972fa,     0xf8226190,     0xf8a483dc,     0xf8bd0370,\n+    0xf8a613a9,     0xf8b02087,     0xf8a7312f,     0xf8b75048,\n+    0xf8bc43f5,     0xf8a5701b,     0xf8b1608f,     0xf8fa8388,\n+    0xf8f6037b,     0xf8f91017,     0xf8e421e6,     0xf8e031e4,\n+    0xf8e150ea,     0xf8e5438a,     0xf8e772f4,     0xf8f56166,\n+    0xf86883f1,     0xf8660051,     0xf86c13be,     0xf86322db,\n+    0xf87d31ae,     0xf87c5311,     0xf86541c2,     0xf86a7170,\n+    0xf87b6197,     0xb8248236,     0xb8240261,     0xb83011b0,\n+    0xb82e204c,     0xb83132a3,     0xb83750c5,     0xb82741b3,\n+    0xb83c7211,     0xb82663a2,     0xb8a380c4,     0xb8b001b4,\n+    0xb8ac1114,     0xb8b92274,     0xb8a0330b,     0xb8a653f4,\n+    0xb8ae40d0,     0xb8a071e7,     0xb8b3613a,     0xb8ea82b7,\n+    0xb8f6005c,     0xb8e3126f,     0xb8f42087,     0xb8fd3007,\n+    0xb8e95290,     0xb8f74204,     0xb8ea7177,     0xb8f963e6,\n+    0xb87082ed,     0xb86c01c1,     0xb8691215,     0xb87a208f,\n+    0xb8643110,     0xb866509e,     0xb87d43b1,     0xb87a71e9,\n+    0xb86263ab,     0xce216ce3,     0xce0e2255,     0xce798ed2,\n+    0xce959685,     0xce7e8217,     0xce608694,     0xcec08264,\n+    0xce748898,     0x25e0da44,     0x2521c8f3,     0x05801548,\n+    0x0540cbdf,     0x05006521,     0x2560c7a0,     0x25a1c498,\n+    0x058026bb,     0x05407dd8,     0x0500f3d6,     0x2560ce3d,\n+    0x2521d4b4,     0x05803cbc,     0x05404d6c,     0x05001b89,\n+    0x25a0c532,     0x2521cc40,     0x05800c08,     0x054074c4,\n+    0x050034a0,     0x2520c9e3,     0x25e1ca93,     0x05803e98,\n+    0x05425238,     0x050024cb,     0x25a0ce7f,     0x25e1d0c3,\n+    0x05802676,     0x05401e63,     0x05002d49,     0x04e20080,\n+    0x04ab04ce,     0x659e022e,     0x65970863,     0x659c0703,\n+    0x04d6b4f3,     0x04400cb5,     0x049a06da,     0x04508071,\n+    0x045b0d14,     0x0459b22e,     0x04daba4d,     0x04590a13,\n+    0x0493979b,     0x04d188a8,     0x0450081c,     0x0417b6b9,\n+    0x041eb743,     0x04981e7a,     0x05e78dc1,     0x0564824e,\n+    0x048816ff,     0x040a0d1e,     0x04810ee0,     0x04dcb340,\n+    0x65c08ed8,     0x65cd8162,     0x65c6970c,     0x65c79e29,\n+    0x65c29494,     0x04ddbecd,     0x65c2ba5f,     0x65c0a9af,\n+    0x6581a434,     0x658da0ee,     0x65c1908c,     0x65be806f,\n+    0x65ff0694,     0x65ee2d2d,     0x65a3af81,     0x65a9cb3a,\n+    0x65e1e9da,     0x65f447ba,     0x65e17da6,     0x0401482b,\n+    0x040279fb,     0x0439323e,     0x04a33302,     0x046331bd,\n+    0x04fc320e,     0x05bb6964,     0x05e16e02,     0x65c897e7,\n+    0x4596b150,     0x4516b4fd,     0x0438396c,     0x041a280b,\n+    0x04183697,     0x04192de3,     0x04083b7e,     0x04ca3955,\n+    0x65873883,     0x658622a6,     0x65d83bd9,     0x0441303f,\n+    0x0e2e11ac,     0x4e2013fe,     0x0e6f11cd,     0x4e6a1128,\n+    0x0ebb1359,     0x4ebf13dd,     0x2e231041,     0x6e21101f,\n+    0x2e791317,     0x6e61101f,     0x2eb612b4,     0x6ea21020,\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":90,"deletions":88,"binary":false,"changes":178,"status":"modified"}]}