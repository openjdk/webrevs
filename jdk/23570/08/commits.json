[{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"80a1f67f6aac673f8f0ff30719c3e7a1952d3bf4"},{"commit":{"message":"code style issues fixed"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"22e42de3d4c6f87c1295084ec5b746a2c5a058e0"},{"commit":{"message":"Addressed review comments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"}],"sha":"f8978870b46270fc05f4367001e8450b037e94a0"},{"commit":{"message":"Addressed review comments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"234d40c710b37db54cf26a931eb26122ffb74aea"},{"commit":{"message":"Revert a small change in c2_MacroAssembler.hpp"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"956518ec3227e21fba4c9478fec4d77033f7ee22"},{"commit":{"message":"Addressed review comments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"3197304545fd59d2fd4949e984fd682eeaa0f194"},{"commit":{"message":"Addressed review comments and added a JTREG test"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestSelectFromTwoVectorOp.java"}],"sha":"aa9e53e17623c1df87aac7233ae207bddc37e26a"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"70e884895a7204364b9fcaae0ebaa151910beae3"},{"commit":{"message":"8348868: AArch64: Add backend support for SelectFromTwoVector\n\nThis patch adds aarch64 backend support for SelectFromTwoVector\noperation which was recently introduced in VectorAPI.\n\nIt implements this operation using a two table vector lookup instruction -\n\"tbl\" which is available only in Neon and SVE2.\n\nFor 64-bit vector length : Neon tbl instruction is generated for T_SHORT\nand T_BYTE types only.\n\nFor 128-bit vector length : Neon tbl instruction is generated if UseSVE <\n2 and SVE2 \"tbl\" instruction is generated if UseSVE == 2.\n\nFor > 128-bit vector length : Currently there are no machines which have\nvector length > 128-bit and support SVE2. For all those machines with vector\nlength > 128-bit and UseSVE < 2, this operation is not supported. The\ninline expander for this operation would fail and lowered IR will be\ngenerated which is a mix of two rearrange and one blend operation.\n\nThis patch also adds a boolean \"need_load_shuffle\" in the inline\nexpander for this operation to test if the platform requires\nVectorLoadShuffle operation to be generated. Without this, the lowering\nIR was not being generated on aarch64 and the performance was quite\npoor.\n\nPerformance numbers with this patch on a 128-bit, SVE2 supporting\nmachine is shown below -\n\nBenchmark                                      (size)   Mode    Cnt     Gain\nSelectFromBenchmark.selectFromByteVector        1024    thrpt   9       1.43\nSelectFromBenchmark.selectFromByteVector        2048    thrpt   9       1.48\nSelectFromBenchmark.selectFromDoubleVector      1024    thrpt   9       68.55\nSelectFromBenchmark.selectFromDoubleVector      2048    thrpt   9       72.07\nSelectFromBenchmark.selectFromFloatVector       1024    thrpt   9       1.69\nSelectFromBenchmark.selectFromFloatVector       2048    thrpt   9       1.52\nSelectFromBenchmark.selectFromIntVector         1024    thrpt   9       1.50\nSelectFromBenchmark.selectFromIntVector         2048    thrpt   9       1.52\nSelectFromBenchmark.selectFromLongVector        1024    thrpt   9       85.38\nSelectFromBenchmark.selectFromLongVector        2048    thrpt   9       80.93\nSelectFromBenchmark.selectFromShortVector       1024    thrpt   9       1.48\nSelectFromBenchmark.selectFromShortVector       2048    thrpt   9       1.49\n\nGain column refers to the ratio of thrpt between this patch and the\nmaster branch after applying changes in the inline expander."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"65bd521d6bc4b93e956987cb3b74ff600dfeafe5"}]