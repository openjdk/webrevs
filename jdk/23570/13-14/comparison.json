{"files":[{"patch":"@@ -7177,4 +7177,3 @@\n-\/\/ Four combinations of vector registers each for vselect_from_two_vectors_neon and\n-\/\/ vselect_from_two_vectors_sve are chosen at random (two from volatile and two from non-volatile set)\n-\/\/ which gives more freedom to the register allocator to choose the best pair of source registers\n-\/\/ at that point.\n+\/\/ Four combinations of vector registers for vselect_from_two_vectors are chosen at random\n+\/\/ (two from volatile and two from non-volatile set) which gives more freedom to the register\n+\/\/ allocator to choose the best pair of source registers at that point.\n@@ -7182,1 +7181,0 @@\n-\/\/ ----------------------------------- SelectFromTwoVector Neon ---------------------------------\n@@ -7184,3 +7182,2 @@\n-instruct vselect_from_two_vectors_neon_10_11(vReg dst, vReg_V10 src1, vReg_V11 src2,\n-                                             vReg index, vReg tmp) %{\n-  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n+instruct vselect_from_two_vectors_10_11(vReg dst, vReg_V10 src1, vReg_V11 src2,\n+                                        vReg index, vReg tmp) %{\n@@ -7189,1 +7186,1 @@\n-  format %{ \"vselect_from_two_vectors_Neon_10_11 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp\" %}\n+  format %{ \"vselect_from_two_vectors_10_11 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n@@ -7193,3 +7190,3 @@\n-    __ select_from_two_vectors_neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                    $src2$$FloatRegister, $index$$FloatRegister,\n-                                    $tmp$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister,\n+                               $src2$$FloatRegister, $index$$FloatRegister,\n+                               $tmp$$FloatRegister, bt, length_in_bytes);\n@@ -7200,3 +7197,2 @@\n-instruct vselect_from_two_vectors_neon_12_13(vReg dst, vReg_V12 src1, vReg_V13 src2,\n-                                             vReg index, vReg tmp) %{\n-  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n+instruct vselect_from_two_vectors_12_13(vReg dst, vReg_V12 src1, vReg_V13 src2,\n+                                        vReg index, vReg tmp) %{\n@@ -7205,1 +7201,1 @@\n-  format %{ \"vselect_from_two_vectors_Neon_12_13 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp\" %}\n+  format %{ \"vselect_from_two_vectors_12_13 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n@@ -7209,3 +7205,3 @@\n-    __ select_from_two_vectors_neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                    $src2$$FloatRegister, $index$$FloatRegister,\n-                                    $tmp$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister,\n+                               $src2$$FloatRegister, $index$$FloatRegister,\n+                               $tmp$$FloatRegister, bt, length_in_bytes);\n@@ -7216,3 +7212,2 @@\n-instruct vselect_from_two_vectors_neon_17_18(vReg dst, vReg_V17 src1, vReg_V18 src2,\n-                                             vReg index, vReg tmp) %{\n-  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n+instruct vselect_from_two_vectors_17_18(vReg dst, vReg_V17 src1, vReg_V18 src2,\n+                                        vReg index, vReg tmp) %{\n@@ -7221,1 +7216,1 @@\n-  format %{ \"vselect_from_two_vectors_Neon_17_18 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp\" %}\n+  format %{ \"vselect_from_two_vectors_17_18 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n@@ -7225,3 +7220,3 @@\n-    __ select_from_two_vectors_neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                    $src2$$FloatRegister, $index$$FloatRegister,\n-                                    $tmp$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister,\n+                               $src2$$FloatRegister, $index$$FloatRegister,\n+                               $tmp$$FloatRegister, bt, length_in_bytes);\n@@ -7232,3 +7227,2 @@\n-instruct vselect_from_two_vectors_neon_23_24(vReg dst, vReg_V23 src1, vReg_V24 src2,\n-                                             vReg index, vReg tmp) %{\n-  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n+instruct vselect_from_two_vectors_23_24(vReg dst, vReg_V23 src1, vReg_V24 src2,\n+                                        vReg index, vReg tmp) %{\n@@ -7237,1 +7231,1 @@\n-  format %{ \"vselect_from_two_vectors_Neon_23_24 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp\" %}\n+  format %{ \"vselect_from_two_vectors_23_24 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n@@ -7241,69 +7235,3 @@\n-    __ select_from_two_vectors_neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                    $src2$$FloatRegister, $index$$FloatRegister,\n-                                    $tmp$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ ----------------------------------- SelectFromTwoVector SVE ----------------------------------\n-\n-instruct vselect_from_two_vectors_sve_10_11(vReg dst, vReg_V10 src1, vReg_V11 src2,\n-                                            vReg index, vReg tmp) %{\n-  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  format %{ \"vselect_from_two_vectors_SVE_10_11 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_sve($dst$$FloatRegister, $src1$$FloatRegister,\n-                                   $src2$$FloatRegister, $index$$FloatRegister,\n-                                   $tmp$$FloatRegister, get_reg_variant(this),\n-                                   length_in_bytes);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_sve_12_13(vReg dst, vReg_V12 src1, vReg_V13 src2,\n-                                            vReg index, vReg tmp) %{\n-  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  format %{ \"vselect_from_two_vectors_SVE_12_13 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_sve($dst$$FloatRegister, $src1$$FloatRegister,\n-                                   $src2$$FloatRegister, $index$$FloatRegister,\n-                                   $tmp$$FloatRegister, get_reg_variant(this),\n-                                   length_in_bytes);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_sve_17_18(vReg dst, vReg_V17 src1, vReg_V18 src2,\n-                                            vReg index, vReg tmp) %{\n-  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  format %{ \"vselect_from_two_vectors_SVE_17_18 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_sve($dst$$FloatRegister, $src1$$FloatRegister,\n-                                   $src2$$FloatRegister, $index$$FloatRegister,\n-                                   $tmp$$FloatRegister, get_reg_variant(this),\n-                                   length_in_bytes);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vselect_from_two_vectors_sve_23_24(vReg dst, vReg_V23 src1, vReg_V24 src2,\n-                                            vReg index, vReg tmp) %{\n-  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  format %{ \"vselect_from_two_vectors_SVE_23_24 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_sve($dst$$FloatRegister, $src1$$FloatRegister,\n-                                   $src2$$FloatRegister, $index$$FloatRegister,\n-                                   $tmp$$FloatRegister, get_reg_variant(this),\n-                                   length_in_bytes);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister,\n+                               $src2$$FloatRegister, $index$$FloatRegister,\n+                               $tmp$$FloatRegister, bt, length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":27,"deletions":99,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -5159,4 +5159,3 @@\n-\/\/ Four combinations of vector registers each for vselect_from_two_vectors_neon and\n-\/\/ vselect_from_two_vectors_sve are chosen at random (two from volatile and two from non-volatile set)\n-\/\/ which gives more freedom to the register allocator to choose the best pair of source registers\n-\/\/ at that point.\n+\/\/ Four combinations of vector registers for vselect_from_two_vectors are chosen at random\n+\/\/ (two from volatile and two from non-volatile set) which gives more freedom to the register\n+\/\/ allocator to choose the best pair of source registers at that point.\n@@ -5164,6 +5163,5 @@\n-dnl SELECT_FROM_TWO_VECTORS_NEON($1,        $2        )\n-dnl SELECT_FROM_TWO_VECTORS_NEON(first_reg, second_reg)\n-define(`SELECT_FROM_TWO_VECTORS_NEON', `\n-instruct vselect_from_two_vectors_neon_$1_$2(vReg dst, vReg_V$1 src1, vReg_V$2 src2,\n-                                             vReg index, vReg tmp) %{\n-  predicate(UseSVE == 0 || (UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 16));\n+dnl SELECT_FROM_TWO_VECTORS($1,        $2        )\n+dnl SELECT_FROM_TWO_VECTORS(first_reg, second_reg)\n+define(`SELECT_FROM_TWO_VECTORS', `\n+instruct vselect_from_two_vectors_$1_$2(vReg dst, vReg_V$1 src1, vReg_V$2 src2,\n+                                        vReg index, vReg tmp) %{\n@@ -5172,1 +5170,1 @@\n-  format %{ \"vselect_from_two_vectors_Neon_$1_$2 $dst, $src1, $src2, $index\\t# vector (8B\/16B\/4S\/8S\/2I\/4I\/2F\/4F). KILL $tmp\" %}\n+  format %{ \"vselect_from_two_vectors_$1_$2 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n@@ -5176,3 +5174,3 @@\n-    __ select_from_two_vectors_neon($dst$$FloatRegister, $src1$$FloatRegister,\n-                                    $src2$$FloatRegister, $index$$FloatRegister,\n-                                    $tmp$$FloatRegister, bt, \/* isQ *\/ length_in_bytes == 16);\n+    __ select_from_two_vectors($dst$$FloatRegister, $src1$$FloatRegister,\n+                               $src2$$FloatRegister, $index$$FloatRegister,\n+                               $tmp$$FloatRegister, bt, length_in_bytes);\n@@ -5184,31 +5182,4 @@\n-dnl\n-dnl SELECT_FROM_TWO_VECTORS_SVE($1,        $2        )\n-dnl SELECT_FROM_TWO_VECTORS_SVE(first_reg, second_reg)\n-define(`SELECT_FROM_TWO_VECTORS_SVE', `\n-instruct vselect_from_two_vectors_sve_$1_$2(vReg dst, vReg_V$1 src1, vReg_V$2 src2,\n-                                            vReg index, vReg tmp) %{\n-  predicate((UseSVE == 1 && Matcher::vector_length_in_bytes(n) == 8) || UseSVE == 2);\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  match(Set dst (SelectFromTwoVector (Binary index src1) src2));\n-  format %{ \"vselect_from_two_vectors_SVE_$1_$2 $dst, $src1, $src2, $index\\t# KILL $tmp\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ select_from_two_vectors_sve($dst$$FloatRegister, $src1$$FloatRegister,\n-                                   $src2$$FloatRegister, $index$$FloatRegister,\n-                                   $tmp$$FloatRegister, get_reg_variant(this),\n-                                   length_in_bytes);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}')dnl\n-dnl\n-\/\/ ----------------------------------- SelectFromTwoVector Neon ---------------------------------\n-SELECT_FROM_TWO_VECTORS_NEON(10, 11)\n-SELECT_FROM_TWO_VECTORS_NEON(12, 13)\n-SELECT_FROM_TWO_VECTORS_NEON(17, 18)\n-SELECT_FROM_TWO_VECTORS_NEON(23, 24)\n-\n-\/\/ ----------------------------------- SelectFromTwoVector SVE ----------------------------------\n-SELECT_FROM_TWO_VECTORS_SVE(10, 11)\n-SELECT_FROM_TWO_VECTORS_SVE(12, 13)\n-SELECT_FROM_TWO_VECTORS_SVE(17, 18)\n-SELECT_FROM_TWO_VECTORS_SVE(23, 24)\n+SELECT_FROM_TWO_VECTORS(10, 11)\n+SELECT_FROM_TWO_VECTORS(12, 13)\n+SELECT_FROM_TWO_VECTORS(17, 18)\n+SELECT_FROM_TWO_VECTORS(23, 24)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":16,"deletions":45,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2857,0 +2857,1 @@\n+\/\/ Implement selecting from two vectors using Neon instructions\n@@ -2859,1 +2860,41 @@\n-                                                     FloatRegister tmp, BasicType bt, bool isQ) {\n+                                                     FloatRegister tmp, unsigned vector_length_in_bytes) {\n+  assert_different_registers(dst, src1, src2, tmp);\n+  SIMD_Arrangement size = vector_length_in_bytes == 16 ? T16B : T8B;\n+\n+  if (vector_length_in_bytes == 16) {\n+    assert(UseSVE <= 1, \"sve must be <= 1\");\n+    \/\/ If the vector length is 16B, then use the Neon \"tbl\" instruction with two vector table\n+    tbl(dst, size, src1, 2, index);\n+  } else { \/\/ vector length == 8\n+    assert(UseSVE == 0, \"must be Neon only\");\n+    \/\/ We need to fit both the source vectors (src1, src2) in a 128-bit register because the\n+    \/\/ Neon \"tbl\" instruction supports only looking up 16B vectors. We then use the Neon \"tbl\"\n+    \/\/ instruction with one vector lookup\n+    ins(tmp, D, src1, 0, 0);\n+    ins(tmp, D, src2, 1, 0);\n+    tbl(dst, size, tmp, 1, index);\n+  }\n+}\n+\n+\/\/ Implement selecting from two vectors using SVE\/SVE2 instructions\n+void C2_MacroAssembler::select_from_two_vectors_sve(FloatRegister dst, FloatRegister src1,\n+                                                    FloatRegister src2, FloatRegister index,\n+                                                    FloatRegister tmp, SIMD_RegVariant T,\n+                                                    unsigned vector_length_in_bytes) {\n+  assert_different_registers(dst, src1, src2, index, tmp);\n+\n+  if (vector_length_in_bytes == 8) {\n+    assert(UseSVE >= 1, \"sve must be >= 1\");\n+    ins(tmp, D, src1, 0, 0);\n+    ins(tmp, D, src2, 1, 0);\n+    sve_tbl(dst, T, tmp, index);\n+  } else {  \/\/ UseSVE == 2 and vector_length_in_bytes > 8\n+    assert(UseSVE == 2 && vector_length_in_bytes == MaxVectorSize, \"must be\");\n+    sve_tbl(dst, T, src1, src2, index);\n+  }\n+}\n+\n+void C2_MacroAssembler::select_from_two_vectors(FloatRegister dst, FloatRegister src1,\n+                                                FloatRegister src2, FloatRegister index,\n+                                                FloatRegister tmp, BasicType bt,\n+                                                unsigned vector_length_in_bytes) {\n@@ -2863,0 +2904,10 @@\n+  if ((UseSVE == 1 && vector_length_in_bytes == 8) || UseSVE == 2) {\n+    SIMD_RegVariant T = elemType_to_regVariant(bt);\n+    select_from_two_vectors_sve(dst, src1, src2, index, tmp, T, vector_length_in_bytes);\n+    return;\n+  }\n+\n+  \/\/ If control reaches here, then the Neon instructions would be executed and\n+  \/\/ one of these conditions must satisfy -\n+  \/\/ UseSVE == 0 || (UseSVE == 1 && length_in_bytes == 16)\n+\n@@ -2865,0 +2916,1 @@\n+  assert(vector_length_in_bytes <= 16, \"length_in_bytes must be <= 16\");\n@@ -2866,1 +2918,1 @@\n-  assert(UseSVE < 2, \"must be either 0 or 1\");\n+  bool isQ = vector_length_in_bytes == 16;\n@@ -2885,13 +2937,1 @@\n-    if (isQ) {\n-      assert(UseSVE <= 1, \"sve must be <= 1\");\n-      \/\/ If the vector length is 16B, then use the Neon \"tbl\" instruction with two vector table\n-      tbl(dst, size1, src1, 2, index);\n-    } else { \/\/ vector length == 8\n-      assert(UseSVE == 0, \"must be Neon only\");\n-      \/\/ We need to fit both the source vectors (src1, src2) in a 128-bit register because the\n-      \/\/ Neon \"tbl\" instruction supports only looking up 16B vectors. We then use the Neon \"tbl\"\n-      \/\/ instruction with one vector lookup\n-      ins(tmp, D, src1, 0, 0);\n-      ins(tmp, D, src2, 1, 0);\n-      tbl(dst, size1, tmp, 1, index);\n-    }\n+    select_from_two_vectors_neon(dst, src1, src2, index, tmp, vector_length_in_bytes);\n@@ -2907,28 +2947,1 @@\n-    if (isQ) {\n-      assert(UseSVE <= 1, \"sve must be <= 1\");\n-      \/\/ If the vector length is 16B, then use the Neon \"tbl\" instruction with two vector table\n-      tbl(dst, size1, src1, 2, dst);\n-    } else {  \/\/ vector length == 8\n-      \/\/ We need to fit both the source vectors (src1, src2) in a 128-bit register because the\n-      \/\/ Neon \"tbl\" instruction supports only looking up 16B vectors. We then use the Neon \"tbl\"\n-      \/\/ instruction with one vector lookup\n-      assert(UseSVE == 0, \"must be Neon only\");\n-      ins(tmp, D, src1, 0, 0);\n-      ins(tmp, D, src2, 1, 0);\n-      tbl(dst, size1, tmp, 1, dst);\n-    }\n-  }\n-}\n-\n-void C2_MacroAssembler::select_from_two_vectors_sve(FloatRegister dst, FloatRegister src1,\n-                                                    FloatRegister src2, FloatRegister index,\n-                                                    FloatRegister tmp, SIMD_RegVariant T,\n-                                                    unsigned vector_length_in_bytes) {\n-  if (vector_length_in_bytes == 8) {\n-    assert(UseSVE >= 1, \"sve must be >= 1\");\n-    ins(tmp, D, src1, 0, 0);\n-    ins(tmp, D, src2, 1, 0);\n-    sve_tbl(dst, T, tmp, index);\n-  } else {  \/\/ UseSVE == 2 and vector_length_in_bytes > 8\n-    assert(UseSVE == 2, \"must be sve2\");\n-    sve_tbl(dst, T, src1, src2, index);\n+    select_from_two_vectors_neon(dst, src1, src2, dst, tmp, vector_length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":56,"deletions":43,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -37,0 +37,9 @@\n+  void select_from_two_vectors_neon(FloatRegister dst, FloatRegister src1,\n+                                    FloatRegister src2, FloatRegister index,\n+                                    FloatRegister tmp, unsigned vector_length_in_bytes);\n+\n+  void select_from_two_vectors_sve(FloatRegister dst, FloatRegister src1,\n+                                   FloatRegister src2, FloatRegister index,\n+                                   FloatRegister tmp, SIMD_RegVariant T,\n+                                   unsigned vector_length_in_bytes);\n+\n@@ -197,3 +206,3 @@\n-  void select_from_two_vectors_neon(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n-                                    FloatRegister index, FloatRegister tmp, BasicType bt,\n-                                    bool isQ);\n+  void select_from_two_vectors(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+                               FloatRegister index, FloatRegister tmp, BasicType bt,\n+                               unsigned vector_length_in_bytes);\n@@ -201,3 +210,0 @@\n-  void select_from_two_vectors_sve(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n-                                   FloatRegister index, FloatRegister tmp, SIMD_RegVariant T,\n-                                   unsigned length_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}