{"files":[{"patch":"@@ -2857,1 +2857,6 @@\n-\/\/ Implement selecting from two vectors using Neon instructions\n+\/\/ Selects elements from two source vectors (src1, src2) based on index values in the index register\n+\/\/ using Neon instructions and places it in the destination vector element corresponding to the\n+\/\/ index vector element. Each index in the index register must be in the range - [0, 2 * NUM_ELEM),\n+\/\/ where NUM_ELEM is the number of BasicType elements per vector.\n+\/\/ If idx < NUM_ELEM --> selects src1[idx] (idx is an element of the index register)\n+\/\/ Otherwise, selects src2[idx – NUM_ELEM]\n@@ -2866,0 +2871,1 @@\n+    assert(src1->successor() == src2, \"Source registers must be ordered\");\n@@ -2879,1 +2885,6 @@\n-\/\/ Implement selecting from two vectors using SVE\/SVE2 instructions\n+\/\/ Selects elements from two source vectors (src1, src2) based on index values in the index register\n+\/\/ using SVE\/SVE2 instructions and places it in the destination vector element corresponding to the\n+\/\/ index vector element. Each index in the index register must be in the range - [0, 2 * NUM_ELEM),\n+\/\/ where NUM_ELEM is the number of BasicType elements per vector.\n+\/\/ If idx < NUM_ELEM --> selects src1[idx] (idx is an element of the index register)\n+\/\/ Otherwise, selects src2[idx – NUM_ELEM]\n@@ -2887,0 +2898,4 @@\n+    \/\/ We need to fit both the source vectors (src1, src2) in a single vector register because the\n+    \/\/ SVE \"tbl\" instruction is unpredicated and works on the entire vector which can lead to\n+    \/\/ incorrect results if each source vector is only partially filled. We then use the SVE \"tbl\"\n+    \/\/ instruction with one vector lookup\n@@ -2892,0 +2907,4 @@\n+    \/\/ If the vector length is > 8, then use the SVE2 \"tbl\" instruction with the two vector table.\n+    \/\/ The assertion - vector_length_in_bytes == MaxVectorSize ensures that this operation\n+    \/\/ is not executed on machines where vector_length_in_bytes < MaxVectorSize\n+    \/\/ with the only exception of 8B vector length.\n@@ -2893,0 +2912,1 @@\n+    assert(src1->successor() == src2, \"Source registers must be ordered\");\n@@ -2904,0 +2924,11 @@\n+  \/\/ The cases that can reach this method are -\n+  \/\/ - UseSVE = 0, vector_length_in_bytes = 8 or 16\n+  \/\/ - UseSVE = 1, vector_length_in_bytes = 8 or 16\n+  \/\/ - UseSVE = 2, vector_length_in_bytes >= 8\n+  \/\/\n+  \/\/ SVE\/SVE2 tbl instructions are generated when UseSVE = 1 with vector_length_in_bytes = 8\n+  \/\/ and UseSVE = 2 with vector_length_in_bytes >= 8\n+  \/\/\n+  \/\/ Neon instructions are generated when UseSVE = 0 with vector_length_in_bytes = 8 or 16 and\n+  \/\/ UseSVE = 1 with vector_length_in_bytes = 16\n+\n@@ -2910,4 +2941,0 @@\n-  \/\/ If control reaches here, then the Neon instructions would be executed and\n-  \/\/ one of these conditions must satisfy -\n-  \/\/ UseSVE == 0 || (UseSVE == 1 && length_in_bytes == 16)\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"}]}