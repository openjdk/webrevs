{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package build.tools.generatecharacter;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * A class holding emoji character properties\n+ * https:\/\/unicode.org\/reports\/tr51\/#Emoji_Properties_and_Data_Files\n+ *\/\n+class EmojiData {\n+    \/\/ Emoji properties map\n+    private final Map<Integer, Long> emojiProps;\n+\n+    static EmojiData readSpecFile(Path file, int plane) throws IOException {\n+        return new EmojiData(file, plane);\n+    }\n+\n+    EmojiData(Path file, int plane) throws IOException {\n+        emojiProps = Files.readAllLines(file).stream()\n+            .map(line -> line.split(\"#\", 2)[0])\n+            .filter(Predicate.not(String::isBlank))\n+            .map(line -> line.split(\"[ \\t]*;[ \\t]*\", 2))\n+            .flatMap(map -> {\n+                var range = map[0].split(\"\\\\.\\\\.\", 2);\n+                var start = Integer.valueOf(range[0], 16);\n+                if ((start >> 16) != plane) {\n+                    return Stream.empty();\n+                } else {\n+                    return range.length == 1 ?\n+                        Stream.of(new AbstractMap.SimpleEntry<>(start, convertType(map[1].trim()))) :\n+                        IntStream.rangeClosed(start, Integer.valueOf(range[1], 16))\n+                            .mapToObj(cp -> new AbstractMap.SimpleEntry<>(cp, convertType(map[1].trim())));\n+                }\n+            })\n+            .collect(Collectors.toMap(AbstractMap.SimpleEntry::getKey,\n+                    AbstractMap.SimpleEntry::getValue,\n+                    (v1, v2) -> v1 | v2));\n+    }\n+\n+    long properties(int cp) {\n+        return emojiProps.get(cp);\n+    }\n+\n+    Set<Integer> codepoints() {\n+        return emojiProps.keySet();\n+    }\n+\n+    private static long convertType(String type) {\n+        return switch (type) {\n+            case \"Emoji\" -> GenerateCharacter.maskEmoji;\n+            case \"Emoji_Presentation\" -> GenerateCharacter.maskEmojiPresentation;\n+            case \"Emoji_Modifier\" -> GenerateCharacter.maskEmojiModifier;\n+            case \"Emoji_Modifier_Base\" -> GenerateCharacter.maskEmojiModifierBase;\n+            case \"Emoji_Component\" -> GenerateCharacter.maskEmojiComponent;\n+            case \"Extended_Pictographic\" -> GenerateCharacter.maskExtendedPictographic;\n+            default -> throw new InternalError(\"Unrecognizable Emoji type: \" + type);\n+        };\n+    }\n+}\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatecharacter\/EmojiData.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.nio.file.Paths;\n@@ -77,0 +78,1 @@\n+    static String DefaultEmojiDataFileName    = ROOT + \"emoji-data.txt\";\n@@ -108,1 +110,1 @@\n-    \/* The character properties are currently encoded into A (32 bits) and B (8 bits)\n+    \/* The character properties are currently encoded into A (32 bits) and B (16 bits)\n@@ -163,0 +165,7 @@\n+    6 bits for Emoji properties :-\n+        1 bit for Emoji\n+        1 bit for Emoji_Presentation\n+        1 bit for Emoji_Modifier\n+        1 bit for Emoji_Modifier_Base\n+        1 bit for Emoji_Component\n+        1 bit for Extended_Pictographic\n@@ -191,1 +200,1 @@\n-    \/\/ bit masks identify the 8-bit property field described above, in B\n+    \/\/ bit masks identify the 16-bit property field described above, in B\n@@ -193,7 +202,13 @@\n-    private static final long\n-        maskOtherLowercase  = 0x0100000000L,\n-        maskOtherUppercase  = 0x0200000000L,\n-        maskOtherAlphabetic = 0x0400000000L,\n-        maskIdeographic     = 0x0800000000L,\n-        maskIDStart         = 0x1000000000L,\n-        maskIDContinue      = 0x2000000000L;\n+    static final long\n+        maskOtherLowercase          = 1L << 32,\n+        maskOtherUppercase          = 1L << 33,\n+        maskOtherAlphabetic         = 1L << 34,\n+        maskIdeographic             = 1L << 35,\n+        maskIDStart                 = 1L << 36,\n+        maskIDContinue              = 1L << 37,\n+        maskEmoji                   = 1L << 38,\n+        maskEmojiPresentation       = 1L << 39,\n+        maskEmojiModifier           = 1L << 40,\n+        maskEmojiModifierBase       = 1L << 41,\n+        maskEmojiComponent          = 1L << 42,\n+        maskExtendedPictographic    = 1L << 43;\n@@ -307,1 +322,1 @@\n-    static long[] buildMap(UnicodeSpec[] data, SpecialCaseMap[] specialMaps, PropList propList)\n+    static long[] buildMap(UnicodeSpec[] data, SpecialCaseMap[] specialMaps, PropList propList, EmojiData emojiData)\n@@ -364,0 +379,3 @@\n+        \/\/ add Emoji properties to the upper 16-bit\n+        addEmojiProps(result, emojiData);\n+\n@@ -586,0 +604,8 @@\n+    static void addEmojiProps(long[] map, EmojiData emojiData) {\n+        for (int cp : emojiData.codepoints()) {\n+            var index = cp & 0xFFFF;\n+            if (index < map.length)\n+                map[index] |= emojiData.properties(cp);\n+        }\n+    }\n+\n@@ -779,0 +805,6 @@\n+        if (x.equals(\"maskEmoji\")) return \"0x\" + hex4(maskEmoji >> 32);\n+        if (x.equals(\"maskEmojiPresentation\")) return \"0x\" + hex4(maskEmojiPresentation >> 32);\n+        if (x.equals(\"maskEmojiModifier\")) return \"0x\" + hex4(maskEmojiModifier >> 32);\n+        if (x.equals(\"maskEmojiModifierBase\")) return \"0x\" + hex4(maskEmojiModifierBase >> 32);\n+        if (x.equals(\"maskEmojiComponent\")) return \"0x\" + hex4(maskEmojiComponent >> 32);\n+        if (x.equals(\"maskExtendedPictographic\")) return \"0x\" + hex4(maskExtendedPictographic >> 32);\n@@ -955,1 +987,1 @@\n-        genTable(result, \"B\", tables[n - 1], 32, 8, sizes[n - 1], false, 0, true, true, false);\n+        genTable(result, \"B\", tables[n - 1], 32, 16, sizes[n - 1], false, 0, true, true, false);\n@@ -1437,0 +1469,36 @@\n+        if ((val & maskOtherLowercase) == maskOtherLowercase) {\n+            result.append(\", otherLowercase\");\n+        }\n+        if ((val & maskOtherUppercase) == maskOtherUppercase) {\n+            result.append(\", otherUppercase\");\n+        }\n+        if ((val & maskOtherAlphabetic) == maskOtherAlphabetic) {\n+            result.append(\", otherAlphabetic\");\n+        }\n+        if ((val & maskIdeographic) == maskIdeographic) {\n+            result.append(\", ideographic\");\n+        }\n+        if ((val & maskIDStart) == maskIDStart) {\n+            result.append(\", IDStart\");\n+        }\n+        if ((val & maskIDContinue) == maskIDContinue) {\n+            result.append(\", IDContinue\");\n+        }\n+        if ((val & maskEmoji) == maskEmoji) {\n+            result.append(\", emoji\");\n+        }\n+        if ((val & maskEmojiPresentation) == maskEmojiPresentation) {\n+            result.append(\", emojiPresentation\");\n+        }\n+        if ((val & maskEmojiModifier) == maskEmojiModifier) {\n+            result.append(\", emojiModifier\");\n+        }\n+        if ((val & maskEmojiModifierBase) == maskEmojiModifierBase) {\n+            result.append(\", emojiModifierBase\");\n+        }\n+        if ((val & maskEmojiComponent) == maskEmojiComponent) {\n+            result.append(\", emojiComponent\");\n+        }\n+        if ((val & maskExtendedPictographic) == maskExtendedPictographic) {\n+            result.append(\", extendedPictographic\");\n+        }\n@@ -1515,0 +1583,1 @@\n+    static String EmojiDataFileName = null;\n@@ -1652,0 +1721,8 @@\n+            else if (args[j].equals(\"-emojidata\")) {\n+                if (j == args.length -1) {\n+                    FAIL(\"File name missing after -emojidata\");\n+                }\n+                else {\n+                    EmojiDataFileName = args[++j];\n+                }\n+            }\n@@ -1720,0 +1797,4 @@\n+        if (EmojiDataFileName == null) {\n+            EmojiDataFileName = DefaultEmojiDataFileName;\n+            desc.append(\" [-emojidata \" + EmojiDataFileName + ']');\n+        }\n@@ -1874,0 +1955,1 @@\n+            EmojiData emojiData = EmojiData.readSpecFile(Paths.get(EmojiDataFileName), plane);\n@@ -1878,1 +1960,1 @@\n-            long[] map = buildMap(data, specialCaseMaps, propList);\n+            long[] map = buildMap(data, specialCaseMaps, propList, emojiData);\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatecharacter\/GenerateCharacter.java","additions":95,"deletions":13,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package build.tools.generateemojidata;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardOpenOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-\/**\n- * Generate EmojiData.java\n- *    args[0]: Full path string to the template file\n- *    args[1]: Full path string to the directory that contains \"emoji-data.txt\"\n- *    args[2]: Full path string to the generated .java file\n- *\/\n-public class GenerateEmojiData {\n-    public static void main(String[] args) {\n-        try {\n-            final Range[] last = new Range[1]; \/\/ last extended pictographic range\n-            last[0] = new Range(0, 0);\n-\n-            List<Range> extPictRanges = Files.lines(Paths.get(args[1], \"emoji\", \"emoji-data.txt\"))\n-                .filter(Predicate.not(l -> l.startsWith(\"#\") || l.isBlank()))\n-                .filter(l -> l.contains(\"; Extended_Pictograph\"))\n-                .map(l -> new Range(l.replaceFirst(\" .*\", \"\")))\n-                .sorted()\n-                .collect(ArrayList<Range>::new,\n-                    (list, r) -> {\n-                        \/\/ collapsing consecutive pictographic ranges\n-                        int lastIndex = list.size() - 1;\n-                        if (lastIndex >= 0) {\n-                            Range lastRange = list.get(lastIndex);\n-                            if (lastRange.last + 1 == r.start) {\n-                                list.set(lastIndex, new Range(lastRange.start, r.last));\n-                                return;\n-                            }\n-                        }\n-                        list.add(r);\n-                    },\n-                    ArrayList<Range>::addAll);\n-\n-\n-            \/\/ make the code point conditions\n-            \/\/ only very few codepoints below 0x2000 are \"emojis\", so separate them\n-            \/\/ out to generate a fast-path check that can be efficiently inlined\n-            String lowExtPictCodePoints = extPictRanges.stream()\n-                    .takeWhile(r -> r.last < 0x2000)\n-                    .map(r -> rangeToString(r))\n-                    .collect(Collectors.joining(\" ||\\n\", \"\", \";\\n\"));\n-\n-            String highExtPictCodePoints = extPictRanges.stream()\n-                    .dropWhile(r -> r.last < 0x2000)\n-                    .map(r -> rangeToString(r))\n-                    .collect(Collectors.joining(\" ||\\n\", \"\", \";\\n\"));\n-\n-            \/\/ Generate EmojiData.java file\n-            Files.write(Paths.get(args[2]),\n-                Files.lines(Paths.get(args[0]))\n-                    .flatMap(l -> {\n-                        if (l.equals(\"%%%EXTPICT_LOW%%%\")) {\n-                            return Stream.of(lowExtPictCodePoints);\n-                        } else if (l.equals(\"%%%EXTPICT_HIGH%%%\")) {\n-                            return Stream.of(highExtPictCodePoints);\n-                        } else {\n-                            return Stream.of(l);\n-                        }\n-                    })\n-                    .collect(Collectors.toList()),\n-                StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    static String rangeToString(Range r) {\n-        if (r.start == r.last) {\n-            return (\" \".repeat(16) + \"cp == 0x\" + toHexString(r.start));\n-        } else  if (r.start == r.last - 1) {\n-            return \" \".repeat(16) + \"cp == 0x\" + toHexString(r.start) + \" ||\\n\" +\n-                    \" \".repeat(16) + \"cp == 0x\" + toHexString(r.last);\n-        } else {\n-            return \" \".repeat(15) + \"(cp >= 0x\" + toHexString(r.start) +\n-                    \" && cp <= 0x\" + toHexString(r.last) + \")\";\n-        }\n-    }\n-\n-    static int toInt(String hexStr) {\n-        return Integer.parseUnsignedInt(hexStr, 16);\n-    }\n-\n-    static String toHexString(int cp) {\n-        String ret = Integer.toUnsignedString(cp, 16).toUpperCase();\n-        if (ret.length() < 4) {\n-            ret = \"0\".repeat(4 - ret.length()) + ret;\n-        }\n-        return ret;\n-    }\n-\n-    static class Range implements Comparable<Range> {\n-        int start;\n-        int last;\n-\n-        Range (int start, int last) {\n-            this.start = start;\n-            this.last = last;\n-        }\n-\n-        Range (String input) {\n-            input = input.replaceFirst(\"\\\\s#.*\", \"\");\n-            start = toInt(input.replaceFirst(\"[\\\\s\\\\.].*\", \"\"));\n-            last = input.contains(\"..\") ?\n-                    toInt(input.replaceFirst(\".*\\\\.\\\\.\", \"\")\n-                            .replaceFirst(\";.*\", \"\").trim())\n-                    : start;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"Start: \" + toHexString(start) + \", Last: \" + toHexString(last);\n-        }\n-\n-        @Override\n-        public int compareTo(Range other) {\n-            return Integer.compare(start, other.start);\n-        }\n-    }\n-}\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generateemojidata\/GenerateEmojiData.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-include gensrc\/GensrcEmojiData.gmk\n","filename":"make\/modules\/java.base\/Gensrc.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+\t    -emojidata $(UNICODEDATA)\/emoji\/emoji-data.txt \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcCharacterData.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-#\n-# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# Rules to create $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/regex\/EmojiData.java\n-#\n-\n-GENSRC_EMOJIDATA := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/regex\/EmojiData.java\n-\n-EMOJIDATATEMP = $(MODULE_SRC)\/share\/classes\/jdk\/internal\/util\/regex\/EmojiData.java.template\n-UNICODEDATA = $(MODULE_SRC)\/share\/data\/unicodedata\n-\n-$(GENSRC_EMOJIDATA): $(BUILD_TOOLS_JDK) $(EMOJIDATATEMP) $(UNICODEDATA)\/emoji\/emoji-data.txt\n-\t$(call LogInfo, Generating $@)\n-\t$(call MakeTargetDir)\n-\t$(TOOL_GENERATEEMOJIDATA) \\\n-\t\t$(EMOJIDATATEMP) \\\n-\t\t$(UNICODEDATA) \\\n-\t\t$(GENSRC_EMOJIDATA)\n-\n-TARGETS += $(GENSRC_EMOJIDATA)\n","filename":"make\/modules\/java.base\/gensrc\/GensrcEmojiData.gmk","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -10784,0 +10784,107 @@\n+    \/**\n+     * Determines if the specified character (Unicode code point) is an Emoji.\n+     * <p>\n+     * A character is considered to be an Emoji if and only if it has the {@code Emoji}\n+     * property, defined in\n+     * <a href=\"https:\/\/unicode.org\/reports\/tr51\/#Emoji_Properties_and_Data_Files\">\n+     * Unicode Emoji (Technical Standard #51)<\/a>.\n+     *\n+     * @param   codePoint the character (Unicode code point) to be tested.\n+     * @return  {@code true} if the character is an Emoji;\n+     *          {@code false} otherwise.\n+     * @since   21\n+     *\/\n+    public static boolean isEmoji(int codePoint) {\n+        return CharacterData.of(codePoint).isEmoji(codePoint);\n+    }\n+\n+    \/**\n+     * Determines if the specified character (Unicode code point) has the\n+     * Emoji Presentation property by default.\n+     * <p>\n+     * A character is considered to have the Emoji Presentation property if and\n+     * only if it has the {@code Emoji_Presentation} property, defined in\n+     * <a href=\"https:\/\/unicode.org\/reports\/tr51\/#Emoji_Properties_and_Data_Files\">\n+     * Unicode Emoji (Technical Standard #51)<\/a>.\n+     *\n+     * @param   codePoint the character (Unicode code point) to be tested.\n+     * @return  {@code true} if the character has the Emoji Presentation\n+     *          property; {@code false} otherwise.\n+     * @since   21\n+     *\/\n+    public static boolean isEmojiPresentation(int codePoint) {\n+        return CharacterData.of(codePoint).isEmojiPresentation(codePoint);\n+    }\n+\n+    \/**\n+     * Determines if the specified character (Unicode code point) is an\n+     * Emoji Modifier.\n+     * <p>\n+     * A character is considered to be an Emoji Modifier if and only if it has\n+     * the {@code Emoji_Modifier} property, defined in\n+     * <a href=\"https:\/\/unicode.org\/reports\/tr51\/#Emoji_Properties_and_Data_Files\">\n+     * Unicode Emoji (Technical Standard #51)<\/a>.\n+     *\n+     * @param   codePoint the character (Unicode code point) to be tested.\n+     * @return  {@code true} if the character is an Emoji Modifier;\n+     *          {@code false} otherwise.\n+     * @since   21\n+     *\/\n+    public static boolean isEmojiModifier(int codePoint) {\n+        return CharacterData.of(codePoint).isEmojiModifier(codePoint);\n+    }\n+\n+    \/**\n+     * Determines if the specified character (Unicode code point) is an\n+     * Emoji Modifier Base.\n+     * <p>\n+     * A character is considered to be an Emoji Modifier Base if and only if it has\n+     * the {@code Emoji_Modifier_Base} property, defined in\n+     * <a href=\"https:\/\/unicode.org\/reports\/tr51\/#Emoji_Properties_and_Data_Files\">\n+     * Unicode Emoji (Technical Standard #51)<\/a>.\n+     *\n+     * @param   codePoint the character (Unicode code point) to be tested.\n+     * @return  {@code true} if the character is an Emoji Modifier Base;\n+     *          {@code false} otherwise.\n+     * @since   21\n+     *\/\n+    public static boolean isEmojiModifierBase(int codePoint) {\n+        return CharacterData.of(codePoint).isEmojiModifierBase(codePoint);\n+    }\n+\n+    \/**\n+     * Determines if the specified character (Unicode code point) is an\n+     * Emoji Component.\n+     * <p>\n+     * A character is considered to be an Emoji Component if and only if it has\n+     * the {@code Emoji_Component} property, defined in\n+     * <a href=\"https:\/\/unicode.org\/reports\/tr51\/#Emoji_Properties_and_Data_Files\">\n+     * Unicode Emoji (Technical Standard #51)<\/a>.\n+     *\n+     * @param   codePoint the character (Unicode code point) to be tested.\n+     * @return  {@code true} if the character is an Emoji Component;\n+     *          {@code false} otherwise.\n+     * @since   21\n+     *\/\n+    public static boolean isEmojiComponent(int codePoint) {\n+        return CharacterData.of(codePoint).isEmojiComponent(codePoint);\n+    }\n+\n+    \/**\n+     * Determines if the specified character (Unicode code point) is\n+     * an Extended Pictographic.\n+     * <p>\n+     * A character is considered to be an Extended Pictographic if and only if it has\n+     * the {@code Extended_Pictographic} property, defined in\n+     * <a href=\"https:\/\/unicode.org\/reports\/tr51\/#Emoji_Properties_and_Data_Files\">\n+     * Unicode Emoji (Technical Standard #51)<\/a>.\n+     *\n+     * @param   codePoint the character (Unicode code point) to be tested.\n+     * @return  {@code true} if the character is an Extended Pictographic;\n+     *          {@code false} otherwise.\n+     * @since   21\n+     *\/\n+    public static boolean isExtendedPictographic(int codePoint) {\n+        return CharacterData.of(codePoint).isExtendedPictographic(codePoint);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,6 @@\n+    abstract boolean isEmoji(int ch);\n+    abstract boolean isEmojiPresentation(int ch);\n+    abstract boolean isEmojiModifier(int ch);\n+    abstract boolean isEmojiModifierBase(int ch);\n+    abstract boolean isEmojiComponent(int ch);\n+    abstract boolean isExtendedPictographic(int ch);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterData.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,0 +123,24 @@\n+    boolean isEmoji(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmoji) != 0;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiPresentation) != 0;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifier) != 0;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifierBase) != 0;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiComponent) != 0;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return (getPropertiesEx(ch) & $$maskExtendedPictographic) != 0;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterData00.java.template","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,24 @@\n+    boolean isEmoji(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmoji) != 0;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiPresentation) != 0;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifier) != 0;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifierBase) != 0;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiComponent) != 0;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return (getPropertiesEx(ch) & $$maskExtendedPictographic) != 0;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterData01.java.template","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,24 @@\n+    boolean isEmoji(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmoji) != 0;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiPresentation) != 0;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifier) != 0;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifierBase) != 0;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiComponent) != 0;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return (getPropertiesEx(ch) & $$maskExtendedPictographic) != 0;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterData02.java.template","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,24 @@\n+    boolean isEmoji(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmoji) != 0;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiPresentation) != 0;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifier) != 0;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifierBase) != 0;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiComponent) != 0;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return (getPropertiesEx(ch) & $$maskExtendedPictographic) != 0;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterData03.java.template","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,24 @@\n+    boolean isEmoji(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmoji) != 0;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiPresentation) != 0;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifier) != 0;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifierBase) != 0;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiComponent) != 0;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return (getPropertiesEx(ch) & $$maskExtendedPictographic) != 0;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterData0E.java.template","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -137,0 +137,24 @@\n+    boolean isEmoji(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmoji) != 0;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiPresentation) != 0;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifier) != 0;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiModifierBase) != 0;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return (getPropertiesEx(ch) & $$maskEmojiComponent) != 0;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return (getPropertiesEx(ch) & $$maskExtendedPictographic) != 0;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterDataLatin1.java.template","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,24 @@\n+    boolean isEmoji(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return false;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterDataPrivateUse.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,24 @@\n+    boolean isEmoji(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiPresentation(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiModifier(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiModifierBase(int ch) {\n+        return false;\n+    }\n+\n+    boolean isEmojiComponent(int ch) {\n+        return false;\n+    }\n+\n+    boolean isExtendedPictographic(int ch) {\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterDataUndefined.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.util.regex;\n-\n-\/**\n- * Holds data contained in the Unicode Technical Standard #51: Unicode\n- * Emoji. \n- * \n- * Currently it is only used for the rule \"GB11\" in UAX #29 Unicode Text\n- * Segmentation.\n- *\/\n-final class EmojiData {\n-    \/**\n-     * Returns whether the code point is an extended pictographic or not.\n-     *\n-     * @param cp code point to examine\n-     * @return true if {@code cp} is an extended pictographic\n-     *\/\n-    static boolean isExtendedPictographic(int cp) {\n-        if (cp < 0x2000) {\n-            return\n-%%%EXTPICT_LOW%%%\n-        } else {\n-            return isHigh(cp);\n-        }\n-    }\n-\n-    private static boolean isHigh(int cp) {\n-        return\n-%%%EXTPICT_HIGH%%%\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/regex\/EmojiData.java.template","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,1 +179,1 @@\n-        if (EmojiData.isExtendedPictographic(cp)) {\n+        if (Character.isExtendedPictographic(cp)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/regex\/Grapheme.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @bug 8303018\n+ * @summary  Check j.l.Character.isEmoji\/isEmojiPresentation\/isEmojiModifier\n+ *              isEmojiModifierBase\/isEmojiComponent\/isExtendedPictographic\n+ * @library \/lib\/testlibrary\/java\/lang\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.AbstractMap;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import static java.lang.Character.MAX_CODE_POINT;\n+import static java.lang.Character.MIN_CODE_POINT;\n+import static java.lang.Character.isEmoji;\n+import static java.lang.Character.isEmojiPresentation;\n+import static java.lang.Character.isEmojiModifier;\n+import static java.lang.Character.isEmojiModifierBase;\n+import static java.lang.Character.isEmojiComponent;\n+import static java.lang.Character.isExtendedPictographic;\n+\n+public class TestEmojiProperties {\n+    \/\/ Masks representing Emoji properties (16-bit `B` table masks in\n+    \/\/ CharacterData.java)\n+    private static final int EMOJI = 0x0040;\n+    private static final int EMOJI_PRESENTATION = 0x0080;\n+    private static final int EMOJI_MODIFIER = 0x0100;\n+    private static final int EMOJI_MODIFIER_BASE = 0x0200;\n+    private static final int EMOJI_COMPONENT = 0x0400;\n+    private static final int EXTENDED_PICTOGRAPHIC = 0x0800;\n+\n+    public static void main(String[] args) throws IOException {\n+        var emojiProps = Files.readAllLines(UCDFiles.EMOJI_DATA).stream()\n+                .map(line -> line.split(\"#\", 2)[0])\n+                .filter(Predicate.not(String::isBlank))\n+                .map(line -> line.split(\"[ \\t]*;[ \\t]*\", 2))\n+                .flatMap(map -> {\n+                    var range = map[0].split(\"\\\\.\\\\.\", 2);\n+                    var start = Integer.valueOf(range[0], 16);\n+                    return range.length == 1 ?\n+                        Stream.of(new AbstractMap.SimpleEntry<>(start, convertType(map[1].trim()))) :\n+                        IntStream.rangeClosed(start,\n+                            Integer.valueOf(range[1], 16))\n+                        .mapToObj(cp -> new AbstractMap.SimpleEntry<>(cp, convertType(map[1].trim())));\n+                })\n+                .collect(Collectors.toMap(AbstractMap.SimpleEntry::getKey, AbstractMap.SimpleEntry::getValue, (v1, v2) -> v1 | v2));\n+\n+        final var fails = new Integer[1];\n+        fails[0] = 0;\n+        IntStream.rangeClosed(MIN_CODE_POINT, MAX_CODE_POINT).forEach(cp -> {\n+            var props = emojiProps.getOrDefault(cp, 0L);\n+            if ((props & EMOJI) != 0 ^ isEmoji(cp)) {\n+                System.err.printf(\"\"\"\n+                        isEmoji(0x%x) failed. Returned: %b\n+                        \"\"\", cp, isEmoji(cp));\n+                fails[0] ++;\n+            }\n+\n+            if ((props & EMOJI_PRESENTATION) != 0 ^ isEmojiPresentation(cp)) {\n+                System.err.printf(\"\"\"\n+                        isEmojiPresentation(0x%x) failed. Returned: %b\n+                        \"\"\", cp, isEmojiPresentation(cp));\n+                fails[0] ++;\n+            }\n+\n+            if ((props & EMOJI_MODIFIER) != 0 ^ isEmojiModifier(cp)) {\n+                System.err.printf(\"\"\"\n+                        isEmojiModifier(0x%x) failed. Returned: %b\n+                        \"\"\", cp, isEmojiModifier(cp));\n+                fails[0] ++;\n+            }\n+\n+            if ((props & EMOJI_MODIFIER_BASE) != 0 ^ isEmojiModifierBase(cp)) {\n+                System.err.printf(\"\"\"\n+                        isEmojiModifierBase(0x%x) failed. Returned: %b\n+                        \"\"\", cp, isEmojiModifierBase(cp));\n+                fails[0] ++;\n+            }\n+\n+            if ((props & EMOJI_COMPONENT) != 0 ^ isEmojiComponent(cp)) {\n+                System.err.printf(\"\"\"\n+                        isEmojiComponent(0x%x) failed. Returned: %b\n+                        \"\"\", cp, isEmojiComponent(cp));\n+                fails[0] ++;\n+            }\n+\n+            if ((props & EXTENDED_PICTOGRAPHIC) != 0 ^ isExtendedPictographic(cp)) {\n+                System.err.printf(\"\"\"\n+                        isExtendedPictographic(0x%x) failed. Returned: %b\n+                        \"\"\", cp, isExtendedPictographic(cp));\n+                fails[0] ++;\n+            }\n+        });\n+        if (fails[0] != 0) {\n+            throw new RuntimeException(\"TestEmojiProperties failed=\" + fails);\n+        }\n+    }\n+\n+    private static long convertType(String type) {\n+        return switch (type) {\n+            case \"Emoji\" -> EMOJI;\n+            case \"Emoji_Presentation\" -> EMOJI_PRESENTATION;\n+            case \"Emoji_Modifier\" -> EMOJI_MODIFIER;\n+            case \"Emoji_Modifier_Base\" -> EMOJI_MODIFIER_BASE;\n+            case \"Emoji_Component\" -> EMOJI_COMPONENT;\n+            case \"Extended_Pictographic\" -> EXTENDED_PICTOGRAPHIC;\n+            default -> throw new InternalError();\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Character\/TestEmojiProperties.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}