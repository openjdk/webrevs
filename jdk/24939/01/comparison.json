{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n@@ -36,0 +37,1 @@\n+import javax.net.ssl.SSLException;\n@@ -273,24 +275,2 @@\n-            \/\/ update the context\n-            List<SignatureScheme> sss =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            shc.sslConfig,\n-                            shc.algorithmConstraints, shc.negotiatedProtocol,\n-                            spec.signatureSchemes,\n-                            HANDSHAKE_SCOPE);\n-\n-            if (sss == null || sss.isEmpty()) {\n-                throw shc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n-                        \"No supported signature algorithm\");\n-            }\n-            shc.peerRequestedSignatureSchemes = sss;\n-\n-            \/\/ If no \"signature_algorithms_cert\" extension is present, then\n-            \/\/ the \"signature_algorithms\" extension also applies to\n-            \/\/ signatures appearing in certificates.\n-            SignatureSchemesSpec certSpec =\n-                    (SignatureSchemesSpec)shc.handshakeExtensions.get(\n-                            SSLExtension.CH_SIGNATURE_ALGORITHMS_CERT);\n-            if (certSpec == null) {\n-                shc.peerRequestedCertSignSchemes = sss;\n-                shc.handshakeSession.setPeerSupportedSignatureAlgorithms(sss);\n-            }\n+            updateHandshakeContext(shc, spec.signatureSchemes,\n+                    SSLExtension.CH_SIGNATURE_ALGORITHMS_CERT);\n@@ -500,24 +480,2 @@\n-            \/\/ update the context\n-            List<SignatureScheme> sss =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            chc.sslConfig,\n-                            chc.algorithmConstraints, chc.negotiatedProtocol,\n-                            spec.signatureSchemes,\n-                            HANDSHAKE_SCOPE);\n-\n-            if (sss == null || sss.isEmpty()) {\n-                throw chc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n-                        \"No supported signature algorithm\");\n-            }\n-            chc.peerRequestedSignatureSchemes = sss;\n-\n-            \/\/ If no \"signature_algorithms_cert\" extension is present, then\n-            \/\/ the \"signature_algorithms\" extension also applies to\n-            \/\/ signatures appearing in certificates.\n-            SignatureSchemesSpec certSpec =\n-                    (SignatureSchemesSpec)chc.handshakeExtensions.get(\n-                            SSLExtension.CR_SIGNATURE_ALGORITHMS_CERT);\n-            if (certSpec == null) {\n-                chc.peerRequestedCertSignSchemes = sss;\n-                chc.handshakeSession.setPeerSupportedSignatureAlgorithms(sss);\n-            }\n+            updateHandshakeContext(chc, spec.signatureSchemes,\n+                    SSLExtension.CR_SIGNATURE_ALGORITHMS_CERT);\n@@ -546,0 +504,45 @@\n+\n+    \/\/ Updates given HandshakeContext with peer signature schemes.\n+    private static void updateHandshakeContext(HandshakeContext hc,\n+            int[] signatureSchemes, SSLExtension signatureAlgorithmsCertExt)\n+            throws SSLException {\n+        List<SignatureScheme> handshakeSS =\n+                SignatureScheme.getSupportedAlgorithms(\n+                        hc.sslConfig,\n+                        hc.algorithmConstraints,\n+                        hc.negotiatedProtocol,\n+                        signatureSchemes,\n+                        HANDSHAKE_SCOPE);\n+\n+        if (handshakeSS.isEmpty()) {\n+            throw hc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n+                    \"No supported signature algorithm\");\n+        }\n+\n+        hc.peerRequestedSignatureSchemes = handshakeSS;\n+\n+        \/\/ If no \"signature_algorithms_cert\" extension is present, then\n+        \/\/ the \"signature_algorithms\" extension also applies to\n+        \/\/ signatures appearing in certificates.\n+        SignatureSchemesSpec certSpec =\n+                (SignatureSchemesSpec) hc.handshakeExtensions.get(\n+                        signatureAlgorithmsCertExt);\n+\n+        if (certSpec == null) {\n+            List<SignatureScheme> certSS =\n+                    SignatureScheme.getSupportedAlgorithms(\n+                            hc.sslConfig,\n+                            hc.algorithmConstraints,\n+                            hc.negotiatedProtocol,\n+                            signatureSchemes,\n+                            CERTIFICATE_SCOPE);\n+\n+            if (certSS.isEmpty()) {\n+                throw hc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n+                        \"No supported signature algorithm\");\n+            }\n+\n+            hc.peerRequestedCertSignSchemes = certSS;\n+            hc.handshakeSession.setPeerSupportedSignatureAlgorithms(certSS);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":51,"deletions":48,"binary":false,"changes":99,"status":"modified"}]}