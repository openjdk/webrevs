{"files":[{"patch":"@@ -33,2 +33,1 @@\n-    private static final SelectorProviderImpl INSTANCE =\n-        new PollSelectorProvider();\n+    private static final SelectorProviderImpl INSTANCE = new PollSelectorProvider();\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n-    private static final SelectorProviderImpl INSTANCE =\n-        new EPollSelectorProvider();\n+    private static final SelectorProviderImpl INSTANCE = new EPollSelectorProvider();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -95,5 +95,1 @@\n-                try {\n-                    return (i.hasNext()) ? i.next() : null;\n-                } catch (ServiceConfigurationError sce) {\n-                    throw sce;\n-                }\n+                return (i.hasNext()) ? i.next() : null;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AsynchronousChannelProvider.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,5 +113,1 @@\n-                try {\n-                    return i.hasNext() ? i.next() : null;\n-                } catch (ServiceConfigurationError sce) {\n-                    throw sce;\n-                }\n+                return i.hasNext() ? i.next() : null;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/SelectorProvider.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.ServiceConfigurationError;\n@@ -347,3 +346,1 @@\n-    \/\/ Creates an iterator that walks over the available providers, ignoring\n-    \/\/ those whose lookup or instantiation causes a security exception to be\n-    \/\/ thrown.  Should be invoked with full privileges.\n+    \/\/ Creates an iterator that walks over the available providers\n@@ -361,7 +358,3 @@\n-                        try {\n-                            if (!i.hasNext())\n-                                return false;\n-                            next = i.next();\n-                        } catch (ServiceConfigurationError sce) {\n-                            throw sce;\n-                        }\n+                        if (!i.hasNext())\n+                            return false;\n+                        next = i.next();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,2 +61,0 @@\n-     * @throws  SecurityException\n-     *          if the security manager denies access to the starting file\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileTreeIterator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -205,3 +205,1 @@\n-        if (canUseCached &&\n-            (file instanceof BasicFileAttributesHolder))\n-        {\n+        if (canUseCached && (file instanceof BasicFileAttributesHolder)) {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileTreeWalker.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-        return Net.getRevealedLocalAddress(localAddress);\n+        return localAddress;\n@@ -256,1 +256,1 @@\n-                sb.append(Net.getRevealedLocalAddressAsString(localAddress));\n+                sb.append(localAddress.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -445,1 +445,1 @@\n-         return Net.getRevealedLocalAddress(localAddress);\n+         return localAddress;\n@@ -589,2 +589,1 @@\n-                    sb.append(\n-                            Net.getRevealedLocalAddressAsString(localAddress));\n+                    sb.append(localAddress.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -215,13 +215,0 @@\n-    \/**\n-     * Returns the local address\n-     *\/\n-    static InetSocketAddress getRevealedLocalAddress(SocketAddress sa) {\n-        InetSocketAddress isa = (InetSocketAddress) sa;\n-        return isa;\n-    }\n-\n-    static String getRevealedLocalAddressAsString(SocketAddress sa) {\n-        InetSocketAddress isa = (InetSocketAddress) sa;\n-        return isa.toString();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-        if (!(x instanceof IOException) && !(x instanceof SecurityException))\n+        if (!(x instanceof IOException))\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/PendingFuture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,4 +44,0 @@\n-    private static void setAccessible(final AccessibleObject ao) {\n-        ao.setAccessible(true);\n-    }\n-\n@@ -54,1 +50,1 @@\n-            setAccessible(c);\n+            c.setAccessible(true);\n@@ -78,1 +74,1 @@\n-            setAccessible(m);\n+            m.setAccessible(true);\n@@ -111,1 +107,1 @@\n-            setAccessible(f);\n+            f.setAccessible(true);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Reflect.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-            return Net.getRevealedLocalAddress(local).getAddress();\n+            return ((InetSocketAddress)local).getAddress();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketAdaptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -205,5 +205,1 @@\n-            if (isUnixSocket()) {\n-                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n-            } else {\n-                return Net.getRevealedLocalAddress(localAddress);\n-            }\n+            return localAddress;\n@@ -736,3 +732,1 @@\n-                    sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n-                } else {\n-                    sb.append(Net.getRevealedLocalAddressAsString(addr));\n+                    sb.append(addr.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-                return Net.getRevealedLocalAddress(local).getAddress();\n+                return local.getAddress();\n@@ -159,1 +159,1 @@\n-        return Net.getRevealedLocalAddress(sc.localAddress());\n+        return sc.localAddress();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketAdaptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,5 +246,1 @@\n-            if (isUnixSocket()) {\n-                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n-            } else {\n-                return Net.getRevealedLocalAddress(localAddress);\n-            }\n+            return localAddress;\n@@ -1608,5 +1604,1 @@\n-                    if (isUnixSocket()) {\n-                        sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n-                    } else {\n-                        sb.append(Net.getRevealedLocalAddressAsString(addr));\n-                    }\n+                    sb.append(addr.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,5 +62,0 @@\n-    static UnixDomainSocketAddress getRevealedLocalAddress(SocketAddress sa) {\n-        UnixDomainSocketAddress addr = (UnixDomainSocketAddress) sa;\n-        return addr;\n-    }\n-\n@@ -74,4 +69,0 @@\n-    static String getRevealedLocalAddressAsString(SocketAddress sa) {\n-        return sa.toString();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -450,1 +450,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Util.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -131,2 +131,2 @@\n-        return doPrivilegedRegister(path, eventSet);\n-    }\n+        \/\/ registers directory returning a new key if not already registered or\n+        \/\/ existing key if already registered\n@@ -134,6 +134,0 @@\n-    \/\/ registers directory returning a new key if not already registered or\n-    \/\/ existing key if already registered\n-    private PollingWatchKey doPrivilegedRegister(Path path,\n-                                                 Set<? extends WatchEvent.Kind<?>> events)\n-        throws IOException\n-    {\n@@ -166,1 +160,1 @@\n-            watchKey.enable(events);\n+            watchKey.enable(eventSet);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/PollingWatchService.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -111,1 +111,0 @@\n-                                      String pathForPermissionCheck,\n@@ -133,1 +132,1 @@\n-        FileDescriptor fdObj = open(dfd, path, pathForPermissionCheck, flags, mode);\n+        FileDescriptor fdObj = open(dfd, path, flags, mode);\n@@ -146,1 +145,1 @@\n-        return newFileChannel(-1, path, null, options, mode);\n+        return newFileChannel(-1, path, options, mode);\n@@ -170,1 +169,1 @@\n-        FileDescriptor fdObj = open(-1, path, null, flags, mode);\n+        FileDescriptor fdObj = open(-1, path, flags, mode);\n@@ -180,1 +179,0 @@\n-                                         String pathForPermissionCheck,\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixChannelFactory.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -179,6 +179,1 @@\n-        final List<Path> allowedList = List.of(rootDirectory);\n-        return new Iterable<>() {\n-            public Iterator<Path> iterator() {\n-                return allowedList.iterator();\n-            }\n-        };\n+        return List.of(rootDirectory);\n@@ -257,5 +252,1 @@\n-        return new Iterable<>() {\n-            public Iterator<FileStore> iterator() {\n-                return new FileStoreIterator();\n-            }\n-        };\n+        return FileStoreIterator::new;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -841,2 +841,1 @@\n-        \/\/ The path is relative so need to resolve against default directory,\n-        \/\/ taking care not to reveal the user.dir\n+        \/\/ The path is relative so need to resolve against default directory\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -142,3 +142,0 @@\n-        \/\/ path for permission check\n-        String pathToCheck = ds.directory().resolve(file).getPathForPermissionCheck();\n-\n@@ -150,1 +147,1 @@\n-                return UnixChannelFactory.newFileChannel(dfd, file, pathToCheck, options, mode);\n+                return UnixChannelFactory.newFileChannel(dfd, file, options, mode);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixSecureDirectoryStream.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-            } catch (UnixException | SecurityException ignore) { }\n+            } catch (UnixException ignore) { }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUriUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n-    private static final SelectorProviderImpl INSTANCE =\n-        new WEPollSelectorProvider();\n+    private static final SelectorProviderImpl INSTANCE = new WEPollSelectorProvider();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,3 +64,1 @@\n-    private static class Initializer\n-    {\n-\n+    private static class Initializer {\n@@ -78,1 +76,1 @@\n-        public Void run() throws IOException {\n+        public void init() throws IOException {\n@@ -99,2 +97,0 @@\n-\n-            return null;\n@@ -190,1 +186,1 @@\n-        initializer.run();\n+        initializer.init();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-                if (!(x instanceof IOException) && !(x instanceof SecurityException))\n+                if (!(x instanceof IOException))\n@@ -242,1 +242,1 @@\n-                if (!(x instanceof IOException) && !(x instanceof SecurityException))\n+                if (!(x instanceof IOException))\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousServerSocketChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,2 +142,0 @@\n-     * @param   pathToCheck\n-     *          The path used for permission checks (if security manager)\n@@ -146,1 +144,0 @@\n-                                      String pathToCheck,\n@@ -168,1 +165,1 @@\n-        FileDescriptor fdObj = open(pathForWindows, pathToCheck, flags, pSecurityDescriptor);\n+        FileDescriptor fdObj = open(pathForWindows, flags, pSecurityDescriptor);\n@@ -178,2 +175,0 @@\n-     * @param   pathToCheck\n-     *          The path used for permission checks (if security manager)\n@@ -184,1 +179,0 @@\n-                                                              String pathToCheck,\n@@ -207,1 +201,1 @@\n-            fdObj = open(pathForWindows, pathToCheck, flags, pSecurityDescriptor);\n+            fdObj = open(pathForWindows, flags, pSecurityDescriptor);\n@@ -229,1 +223,0 @@\n-                                       String pathToCheck,\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsChannelFactory.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-                    } catch (SecurityException | WindowsException | IOException ignore) {\n+                    } catch (WindowsException | IOException ignore) {\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileAttributeViews.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        \/\/ iterate over roots, ignoring those that the security manager denies\n+        \/\/ iterate over roots\n@@ -174,5 +174,1 @@\n-        return new Iterable<FileStore>() {\n-            public Iterator<FileStore> iterator() {\n-                return new FileStoreIterator();\n-            }\n-        };\n+        return FileStoreIterator::new;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystem.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n-                                file.getPathForPermissionCheck(),\n@@ -145,1 +144,0 @@\n-                                            file.getPathForPermissionCheck(),\n@@ -230,1 +228,0 @@\n-                                file.getPathForPermissionCheck(),\n@@ -326,1 +323,0 @@\n-                                file.getPathForPermissionCheck(),\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,5 +169,0 @@\n-    \/\/ use this path for permission checks\n-    String getPathForPermissionCheck() {\n-        return path;\n-    }\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsPath.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-            } catch (SecurityException | WindowsException x) {\n+            } catch (WindowsException x) {\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsUriSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                .newFileChannel(join(file, name), null, opts, 0L);\n+                .newFileChannel(join(file, name), opts, 0L);\n@@ -121,1 +121,1 @@\n-            x.rethrowAsIOException(join(file.getPathForPermissionCheck(), name));\n+            x.rethrowAsIOException(join(file.getPathForExceptionMessage(), name));\n@@ -143,1 +143,1 @@\n-                .newFileChannel(join(file, name), null, opts, 0L);\n+                .newFileChannel(join(file, name), opts, 0L);\n@@ -145,1 +145,1 @@\n-            x.rethrowAsIOException(join(file.getPathForPermissionCheck(), name));\n+            x.rethrowAsIOException(join(file.getPathForExceptionMessage(), name));\n@@ -199,1 +199,1 @@\n-                    .newFileChannel(join(file, name), null, opts, 0L);\n+                    .newFileChannel(join(file, name), opts, 0L);\n@@ -201,1 +201,1 @@\n-                x.rethrowAsIOException(join(file.getPathForPermissionCheck(), name));\n+                x.rethrowAsIOException(join(file.getPathForExceptionMessage(), name));\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsUserDefinedFileAttributeView.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}