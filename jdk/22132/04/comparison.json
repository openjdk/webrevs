{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -35,1 +32,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -37,5 +33,1 @@\n-    private static final SelectorProviderImpl INSTANCE;\n-    static {\n-        PrivilegedAction<SelectorProviderImpl> pa = PollSelectorProvider::new;\n-        INSTANCE = AccessController.doPrivileged(pa);\n-    }\n+    private static final SelectorProviderImpl INSTANCE = new PollSelectorProvider();\n@@ -54,1 +46,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -35,1 +32,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -37,5 +33,1 @@\n-    private static final SelectorProviderImpl INSTANCE;\n-    static {\n-        PrivilegedAction<SelectorProviderImpl> pa = EPollSelectorProvider::new;\n-        INSTANCE = AccessController.doPrivileged(pa);\n-    }\n+    private static final SelectorProviderImpl INSTANCE = new EPollSelectorProvider();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,2 +118,0 @@\n-        file.checkRead();\n-\n@@ -252,2 +250,0 @@\n-        file.checkWrite();\n-\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxDosFileAttributeView.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -35,1 +32,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -37,5 +33,1 @@\n-    private static final SelectorProviderImpl INSTANCE;\n-    static {\n-        PrivilegedAction<SelectorProviderImpl> pa = KQueueSelectorProvider::new;\n-        INSTANCE = AccessController.doPrivileged(pa);\n-    }\n+    private static final SelectorProviderImpl INSTANCE = new KQueueSelectorProvider();\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -53,3 +53,0 @@\n-        \/\/ permission check\n-        path.checkWrite();\n-\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileAttributeViews.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.security.AccessController;\n@@ -37,1 +36,0 @@\n-import sun.security.action.GetPropertyAction;\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystem.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -65,1 +63,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -67,12 +64,8 @@\n-            return AccessController\n-                .doPrivileged(new PrivilegedAction<>() {\n-                    public AsynchronousChannelProvider run() {\n-                        AsynchronousChannelProvider p;\n-                        p = loadProviderFromProperty();\n-                        if (p != null)\n-                            return p;\n-                        p = loadProviderAsService();\n-                        if (p != null)\n-                            return p;\n-                        return sun.nio.ch.DefaultAsynchronousChannelProvider.create();\n-                    }});\n+            AsynchronousChannelProvider p;\n+            p = loadProviderFromProperty();\n+            if (p != null)\n+                return p;\n+            p = loadProviderAsService();\n+            if (p != null)\n+                return p;\n+            return sun.nio.ch.DefaultAsynchronousChannelProvider.create();\n@@ -90,1 +83,1 @@\n-            } catch (ClassNotFoundException | SecurityException |\n+            } catch (ClassNotFoundException |\n@@ -101,11 +94,1 @@\n-            for (;;) {\n-                try {\n-                    return (i.hasNext()) ? i.next() : null;\n-                } catch (ServiceConfigurationError sce) {\n-                    if (sce.getCause() instanceof SecurityException) {\n-                        \/\/ Ignore the security exception, try the next provider\n-                        continue;\n-                    }\n-                    throw sce;\n-                }\n-            }\n+            return sl.findFirst().orElse(null);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AsynchronousChannelProvider.java","additions":10,"deletions":27,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -84,1 +82,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -86,9 +83,6 @@\n-            PrivilegedAction<SelectorProvider> pa = () -> {\n-                SelectorProvider sp;\n-                if ((sp = loadProviderFromProperty()) != null)\n-                    return sp;\n-                if ((sp = loadProviderAsService()) != null)\n-                    return sp;\n-                return sun.nio.ch.DefaultSelectorProvider.get();\n-            };\n-            return AccessController.doPrivileged(pa);\n+            SelectorProvider sp;\n+            if ((sp = loadProviderFromProperty()) != null)\n+                return sp;\n+            if ((sp = loadProviderAsService()) != null)\n+                return sp;\n+            return sun.nio.ch.DefaultSelectorProvider.get();\n@@ -108,2 +102,1 @@\n-                    InstantiationException |\n-                    SecurityException x) {\n+                    InstantiationException x) {\n@@ -119,11 +112,1 @@\n-            for (;;) {\n-                try {\n-                    return i.hasNext() ? i.next() : null;\n-                } catch (ServiceConfigurationError sce) {\n-                    if (sce.getCause() instanceof SecurityException) {\n-                        \/\/ Ignore the security exception, try the next provider\n-                        continue;\n-                    }\n-                    throw sce;\n-                }\n-            }\n+            return sl.findFirst().orElse(null);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/SelectorProvider.java","additions":8,"deletions":25,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -45,1 +43,0 @@\n-import java.util.ServiceConfigurationError;\n@@ -349,3 +346,1 @@\n-    \/\/ Creates an iterator that walks over the available providers, ignoring\n-    \/\/ those whose lookup or instantiation causes a security exception to be\n-    \/\/ thrown.  Should be invoked with full privileges.\n+    \/\/ Creates an iterator that walks over the available providers\n@@ -363,11 +358,3 @@\n-                        try {\n-                            if (!i.hasNext())\n-                                return false;\n-                            next = i.next();\n-                        } catch (ServiceConfigurationError sce) {\n-                            if (sce.getCause() instanceof SecurityException) {\n-                                \/\/ Ignore security exceptions\n-                                continue;\n-                            }\n-                            throw sce;\n-                        }\n+                        if (!i.hasNext())\n+                            return false;\n+                        next = i.next();\n@@ -409,1 +396,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -429,14 +415,7 @@\n-            return AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    public Charset run() {\n-                        for (Iterator<CharsetProvider> i = providers();\n-                             i.hasNext();) {\n-                            CharsetProvider cp = i.next();\n-                            Charset cs = cp.charsetForName(charsetName);\n-                            if (cs != null)\n-                                return cs;\n-                        }\n-                        return null;\n-                    }\n-                });\n-\n+            for (Iterator<CharsetProvider> i = providers(); i.hasNext();) {\n+                CharsetProvider cp = i.next();\n+                Charset cs = cp.charsetForName(charsetName);\n+                if (cs != null)\n+                    return cs;\n+            }\n+            return null;\n@@ -452,1 +431,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -454,14 +432,11 @@\n-            return AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public CharsetProvider[] run() {\n-                        CharsetProvider[] cps = new CharsetProvider[1];\n-                        int n = 0;\n-                        ServiceLoader<CharsetProvider> sl =\n-                            ServiceLoader.loadInstalled(CharsetProvider.class);\n-                        for (CharsetProvider cp : sl) {\n-                            if (n + 1 > cps.length) {\n-                                cps = Arrays.copyOf(cps, cps.length << 1);\n-                            }\n-                            cps[n++] = cp;\n-                        }\n-                        return n == cps.length ? cps : Arrays.copyOf(cps, n);\n-                    }});\n+            CharsetProvider[] cps = new CharsetProvider[1];\n+            int n = 0;\n+            ServiceLoader<CharsetProvider> sl =\n+                ServiceLoader.loadInstalled(CharsetProvider.class);\n+            for (CharsetProvider cp : sl) {\n+                if (n + 1 > cps.length) {\n+                    cps = Arrays.copyOf(cps, cps.length << 1);\n+                }\n+                cps[n++] = cp;\n+            }\n+            return n == cps.length ? cps : Arrays.copyOf(cps, n);\n@@ -631,1 +606,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -633,18 +607,13 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public SortedMap<String,Charset> run() {\n-                    TreeMap<String,Charset> m =\n-                        new TreeMap<>(\n-                            String.CASE_INSENSITIVE_ORDER);\n-                    put(standardProvider.charsets(), m);\n-                    CharsetProvider[] ecps = ExtendedProviderHolder.extendedProviders;\n-                    for (CharsetProvider ecp :ecps) {\n-                        put(ecp.charsets(), m);\n-                    }\n-                    for (Iterator<CharsetProvider> i = providers(); i.hasNext();) {\n-                        CharsetProvider cp = i.next();\n-                        put(cp.charsets(), m);\n-                    }\n-                    return Collections.unmodifiableSortedMap(m);\n-                }\n-            });\n+        TreeMap<String,Charset> m =\n+            new TreeMap<>(\n+                String.CASE_INSENSITIVE_ORDER);\n+        put(standardProvider.charsets(), m);\n+        CharsetProvider[] ecps = ExtendedProviderHolder.extendedProviders;\n+        for (CharsetProvider ecp :ecps) {\n+            put(ecp.charsets(), m);\n+        }\n+        for (Iterator<CharsetProvider> i = providers(); i.hasNext();) {\n+            CharsetProvider cp = i.next();\n+            put(cp.charsets(), m);\n+        }\n+        return Collections.unmodifiableSortedMap(m);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset.java","additions":36,"deletions":67,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,7 +119,3 @@\n-            try {\n-                sourceAttrs = Files.readAttributes(source,\n-                                                   PosixFileAttributes.class,\n-                                                   linkOptions);\n-            } catch (SecurityException ignored) {\n-                \/\/ okay to continue if RuntimePermission(\"accessUserInformation\") not granted\n-            }\n+            sourceAttrs = Files.readAttributes(source,\n+                                               PosixFileAttributes.class,\n+                                               linkOptions);\n@@ -176,5 +172,1 @@\n-                    try {\n-                        targetPosixView.setPermissions(sourcePosixAttrs.permissions());\n-                    } catch (SecurityException ignored) {\n-                        \/\/ okay to continue if RuntimePermission(\"accessUserInformation\") not granted\n-                    }\n+                    targetPosixView.setPermissions(sourcePosixAttrs.permissions());\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/CopyMoveHelper.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.nio.file.spi.FileSystemProvider;\n-import java.net.URI;\n@@ -31,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -34,0 +30,2 @@\n+import java.net.URI;\n+import java.nio.file.spi.FileSystemProvider;\n@@ -99,7 +97,1 @@\n-            @SuppressWarnings(\"removal\")\n-            FileSystemProvider provider = AccessController\n-                .doPrivileged(new PrivilegedAction<>() {\n-                    public FileSystemProvider run() {\n-                        return getDefaultProvider();\n-                    }\n-                });\n+            FileSystemProvider provider = getDefaultProvider();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileSystems.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,2 +61,0 @@\n-     * @throws  SecurityException\n-     *          if the security manager denies access to the starting file\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileTreeIterator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,1 +201,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -206,5 +205,2 @@\n-        if (canUseCached &&\n-            (file instanceof BasicFileAttributesHolder) &&\n-            (System.getSecurityManager() == null))\n-        {\n-            BasicFileAttributes cached = ((BasicFileAttributesHolder)file).get();\n+        if (canUseCached && (file instanceof BasicFileAttributesHolder bfah)) {\n+            BasicFileAttributes cached = bfah.get();\n@@ -253,1 +249,1 @@\n-                } catch (IOException | SecurityException x) {\n+                } catch (IOException e) {\n@@ -265,5 +261,0 @@\n-     * The {@code ignoreSecurityException} parameter determines whether\n-     * any SecurityException should be ignored or not. If a SecurityException\n-     * is thrown, and is ignored, then this method returns {@code null} to\n-     * mean that there is no event corresponding to a visit to the file.\n-     *\n@@ -273,1 +264,1 @@\n-    private Event visit(Path entry, boolean ignoreSecurityException, boolean canUseCached) {\n+    private Event visit(Path entry, boolean canUseCached) {\n@@ -280,4 +271,0 @@\n-        } catch (SecurityException se) {\n-            if (ignoreSecurityException)\n-                return null;\n-            throw se;\n@@ -304,4 +291,0 @@\n-        } catch (SecurityException se) {\n-            if (ignoreSecurityException)\n-                return null;\n-            throw se;\n@@ -324,1 +307,0 @@\n-                         false,   \/\/ ignoreSecurityException\n@@ -375,1 +357,0 @@\n-                       true,   \/\/ ignoreSecurityException\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileTreeWalker.java","additions":5,"deletions":24,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -61,2 +61,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -699,8 +697,2 @@\n-        SecurityException se = null;\n-        Path absDir = dir;\n-        try {\n-            absDir = dir.toAbsolutePath();\n-        } catch (SecurityException x) {\n-            \/\/ don't have permission to get absolute path\n-            se = x;\n-        }\n+        Path absDir = dir.toAbsolutePath();\n+\n@@ -720,6 +712,2 @@\n-            if (se == null) {\n-                throw new FileSystemException(absDir.toString(), null,\n-                    \"Unable to determine if root directory exists\");\n-            } else {\n-                throw se;\n-            }\n+            throw new FileSystemException(absDir.toString(), null,\n+                \"Unable to determine if root directory exists\");\n@@ -1528,1 +1516,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1530,5 +1517,1 @@\n-            return AccessController\n-                .doPrivileged(new PrivilegedAction<>() {\n-                    @Override public FileTypeDetector run() {\n-                        return sun.nio.fs.DefaultFileTypeDetector.create();\n-                }});\n+            return sun.nio.fs.DefaultFileTypeDetector.create();\n@@ -1538,1 +1521,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1540,11 +1522,7 @@\n-            return AccessController\n-                .doPrivileged(new PrivilegedAction<>() {\n-                    @Override public List<FileTypeDetector> run() {\n-                        List<FileTypeDetector> list = new ArrayList<>();\n-                        ServiceLoader<FileTypeDetector> loader = ServiceLoader\n-                            .load(FileTypeDetector.class, ClassLoader.getSystemClassLoader());\n-                        for (FileTypeDetector detector: loader) {\n-                            list.add(detector);\n-                        }\n-                        return list;\n-                }});\n+            List<FileTypeDetector> list = new ArrayList<>();\n+            ServiceLoader<FileTypeDetector> loader = ServiceLoader\n+                .load(FileTypeDetector.class, ClassLoader.getSystemClassLoader());\n+            for (FileTypeDetector detector: loader) {\n+                list.add(detector);\n+            }\n+            return list;\n@@ -2866,1 +2844,0 @@\n-        SecurityException se = null;\n@@ -2868,5 +2845,1 @@\n-            try {\n-                deleteIfExists(target);\n-            } catch (SecurityException x) {\n-                se = x;\n-            }\n+            deleteIfExists(target);\n@@ -2875,4 +2848,1 @@\n-        \/\/ attempt to create target file. If it fails with\n-        \/\/ FileAlreadyExistsException then it may be because the security\n-        \/\/ manager prevented us from deleting the file, in which case we just\n-        \/\/ throw the SecurityException.\n+        \/\/ attempt to create target file.\n@@ -2884,2 +2854,0 @@\n-            if (se != null)\n-                throw se;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":14,"deletions":46,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,2 +120,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n@@ -128,2 +126,0 @@\n-                if (sm != null)\n-                    throw new IllegalArgumentException(\"Invalid prefix or suffix\");\n@@ -138,5 +134,0 @@\n-            } catch (SecurityException e) {\n-                \/\/ don't reveal temporary directory location\n-                if (dir == tmpdir && sm != null)\n-                    throw new SecurityException(\"Unable to create temporary file or directory\");\n-                throw e;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/TempFileHelper.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import java.nio.file.LinkPermission;\n@@ -71,2 +70,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -188,7 +185,1 @@\n-                    @SuppressWarnings(\"removal\")\n-                    List<FileSystemProvider> list = AccessController\n-                        .doPrivileged(new PrivilegedAction<>() {\n-                            @Override\n-                            public List<FileSystemProvider> run() {\n-                                return loadInstalledProviders();\n-                        }});\n+                    List<FileSystemProvider> list = loadInstalledProviders();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/spi\/FileSystemProvider.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,4 +37,0 @@\n-import java.security.PrivilegedAction;\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import sun.security.action.GetIntegerAction;\n@@ -51,3 +47,2 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final int internalThreadCount = AccessController.doPrivileged(\n-        new GetIntegerAction(\"sun.nio.ch.internalThreadPoolSize\", 1));\n+    private static final int internalThreadCount =\n+        Integer.getInteger(\"sun.nio.ch.internalThreadPoolSize\", 1);\n@@ -118,1 +113,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -120,9 +114,3 @@\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Void run() {\n-                \/\/ internal threads should not be visible to application so\n-                \/\/ cannot use user-supplied thread factory\n-                ThreadPool.defaultThreadFactory().newThread(task).start();\n-                return null;\n-            }\n-         });\n+        \/\/ internal threads should not be visible to application so\n+        \/\/ cannot use user-supplied thread factory\n+        ThreadPool.defaultThreadFactory().newThread(task).start();\n@@ -250,1 +238,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -252,10 +239,2 @@\n-        AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public Void run() {\n-                    pool.executor().shutdown();\n-                    timeoutExecutor.shutdown();\n-                    return null;\n-                }\n-            },\n-            null,\n-            new RuntimePermission(\"modifyThread\"));\n+        pool.executor().shutdown();\n+        timeoutExecutor.shutdown();\n@@ -323,22 +302,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ when a security manager is installed then the user's task\n-            \/\/ must be run with the current calling context\n-            @SuppressWarnings(\"removal\")\n-            final AccessControlContext acc = AccessController.getContext();\n-            final Runnable delegate = task;\n-            task = new Runnable() {\n-                @SuppressWarnings(\"removal\")\n-                @Override\n-                public void run() {\n-                    AccessController.doPrivileged(new PrivilegedAction<>() {\n-                        @Override\n-                        public Void run() {\n-                            delegate.run();\n-                            return null;\n-                        }\n-                    }, acc);\n-                }\n-            };\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousChannelGroupImpl.java","additions":7,"deletions":50,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,4 +153,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkListen(isa.getPort());\n@@ -178,1 +174,1 @@\n-        return Net.getRevealedLocalAddress(localAddress);\n+        return localAddress;\n@@ -260,1 +256,1 @@\n-                sb.append(Net.getRevealedLocalAddressAsString(localAddress));\n+                sb.append(localAddress.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -431,5 +431,0 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    sm.checkListen(isa.getPort());\n-                }\n@@ -450,1 +445,1 @@\n-         return Net.getRevealedLocalAddress(localAddress);\n+         return localAddress;\n@@ -594,2 +589,1 @@\n-                    sb.append(\n-                            Net.getRevealedLocalAddressAsString(localAddress));\n+                    sb.append(localAddress.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,2 @@\n-        \/\/ exception must be IOException or SecurityException\n-        if (!(exc instanceof IOException) && !(exc instanceof SecurityException))\n+        \/\/ exception must be IOException\n+        if (!(exc instanceof IOException))\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/CompletedFuture.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import sun.security.action.GetIntegerAction;\n@@ -44,3 +42,2 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final int maxHandlerInvokeCount = AccessController.doPrivileged(\n-        new GetIntegerAction(\"sun.nio.ch.maxCompletionHandlersOnStack\", 16));\n+    private static final int maxHandlerInvokeCount =\n+        Integer.getInteger(\"sun.nio.ch.maxCompletionHandlersOnStack\", 16);\n@@ -118,1 +115,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -132,12 +128,0 @@\n-\n-        \/\/ clear thread locals when in default thread pool\n-        if (System.getSecurityManager() != null) {\n-            Thread me = Thread.currentThread();\n-            if (me instanceof InnocuousThread) {\n-                GroupAndInvokeCount thisGroupAndInvokeCount = myGroupAndInvokeCount.get();\n-                ((InnocuousThread)me).eraseThreadLocals();\n-                if (thisGroupAndInvokeCount != null) {\n-                    myGroupAndInvokeCount.set(thisGroupAndInvokeCount);\n-                }\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Invoker.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -55,1 +53,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -218,28 +215,0 @@\n-    \/**\n-     * Returns the local address after performing a SecurityManager#checkConnect.\n-     *\/\n-    static InetSocketAddress getRevealedLocalAddress(SocketAddress sa) {\n-        InetSocketAddress isa = (InetSocketAddress) sa;\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (isa != null && sm != null) {\n-            try {\n-                sm.checkConnect(isa.getAddress().getHostAddress(), -1);\n-            } catch (SecurityException e) {\n-                \/\/ Return loopback address only if security check fails\n-                isa = getLoopbackAddress(isa.getPort());\n-            }\n-        }\n-        return isa;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    static String getRevealedLocalAddressAsString(SocketAddress sa) {\n-        InetSocketAddress isa = (InetSocketAddress) sa;\n-        if (System.getSecurityManager() == null) {\n-            return isa.toString();\n-        } else {\n-            return getLoopbackAddress(isa.getPort()).toString();\n-        }\n-    }\n-\n@@ -305,1 +274,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -307,10 +275,5 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<Inet4Address>() {\n-            public Inet4Address run() {\n-                Enumeration<InetAddress> addrs = interf.getInetAddresses();\n-                while (addrs.hasMoreElements()) {\n-                    InetAddress addr = addrs.nextElement();\n-                    if (addr instanceof Inet4Address inet4Address) {\n-                        return inet4Address;\n-                    }\n-                }\n-                return null;\n+        Enumeration<InetAddress> addrs = interf.getInetAddresses();\n+        while (addrs.hasMoreElements()) {\n+            InetAddress addr = addrs.nextElement();\n+            if (addr instanceof Inet4Address inet4Address) {\n+                return inet4Address;\n@@ -318,1 +281,2 @@\n-        });\n+        }\n+        return null;\n@@ -503,2 +467,1 @@\n-        String loopbackProp = GetPropertyAction\n-                .privilegedGetProperty(\"jdk.net.useFastTcpLoopback\", \"false\");\n+        String loopbackProp = System.getProperty(\"jdk.net.useFastTcpLoopback\", \"false\");\n@@ -830,2 +793,1 @@\n-            String exclBindProp = GetPropertyAction\n-                    .privilegedGetProperty(\"sun.net.useExclusiveBind\");\n+            String exclBindProp = System.getProperty(\"sun.net.useExclusiveBind\");\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":10,"deletions":48,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-        if (!(x instanceof IOException) && !(x instanceof SecurityException))\n+        if (!(x instanceof IOException))\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/PendingFuture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -46,9 +44,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static void setAccessible(final AccessibleObject ao) {\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    ao.setAccessible(true);\n-                    return null;\n-                }});\n-    }\n-\n@@ -61,1 +50,1 @@\n-            setAccessible(c);\n+            c.setAccessible(true);\n@@ -85,1 +74,1 @@\n-            setAccessible(m);\n+            m.setAccessible(true);\n@@ -118,1 +107,1 @@\n-            setAccessible(f);\n+            f.setAccessible(true);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Reflect.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -64,1 +61,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -66,6 +62,1 @@\n-        PrivilegedExceptionAction<ServerSocket> pa = () -> new ServerSocketAdaptor(ssc);\n-        try {\n-            return AccessController.doPrivileged(pa);\n-        } catch (PrivilegedActionException pae) {\n-            throw new InternalError(\"Should not reach here\", pae);\n-        }\n+        return new ServerSocketAdaptor(ssc);\n@@ -101,1 +92,1 @@\n-            return Net.getRevealedLocalAddress(local).getAddress();\n+            return ((InetSocketAddress)local).getAddress();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketAdaptor.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -205,5 +205,1 @@\n-            if (isUnixSocket()) {\n-                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n-            } else {\n-                return Net.getRevealedLocalAddress(localAddress);\n-            }\n+            return localAddress;\n@@ -308,1 +304,0 @@\n-        UnixDomainSockets.checkPermission();\n@@ -339,4 +334,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkListen(isa.getPort());\n@@ -426,1 +417,0 @@\n-            UnixDomainSockets.checkPermission();\n@@ -498,10 +488,0 @@\n-\n-            \/\/ check permitted to accept connections from the remote address\n-            if (isNetSocket()) {\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    InetSocketAddress isa = (InetSocketAddress) sa;\n-                    sm.checkAccept(isa.getAddress().getHostAddress(), isa.getPort());\n-                }\n-            }\n@@ -752,3 +732,1 @@\n-                    sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n-                } else {\n-                    sb.append(Net.getRevealedLocalAddressAsString(addr));\n+                    sb.append(addr);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":2,"deletions":24,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SimpleAsynchronousFileChannelImpl.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -66,1 +63,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -69,7 +65,2 @@\n-            if (System.getSecurityManager() == null) {\n-                return new SocketAdaptor(sc);\n-            } else {\n-                PrivilegedExceptionAction<Socket> pa = () -> new SocketAdaptor(sc);\n-                return AccessController.doPrivileged(pa);\n-            }\n-        } catch (SocketException | PrivilegedActionException e) {\n+            return new SocketAdaptor(sc);\n+        } catch (SocketException e) {\n@@ -135,1 +126,1 @@\n-                return Net.getRevealedLocalAddress(local).getAddress();\n+                return local.getAddress();\n@@ -168,1 +159,1 @@\n-        return Net.getRevealedLocalAddress(sc.localAddress());\n+        return sc.localAddress();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketAdaptor.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -246,5 +246,1 @@\n-            if (isUnixSocket()) {\n-                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n-            } else {\n-                return Net.getRevealedLocalAddress(localAddress);\n-            }\n+            return localAddress;\n@@ -814,1 +810,0 @@\n-        UnixDomainSockets.checkPermission();\n@@ -836,5 +831,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkListen(isa.getPort());\n-        }\n@@ -926,1 +916,0 @@\n-            UnixDomainSockets.checkPermission();\n@@ -930,5 +919,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkConnect(isa.getAddress().getHostAddress(), isa.getPort());\n-            }\n@@ -1620,5 +1604,1 @@\n-                    if (isUnixSocket()) {\n-                        sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n-                    } else {\n-                        sb.append(Net.getRevealedLocalAddressAsString(addr));\n-                    }\n+                    sb.append(addr);\n@@ -1628,1 +1608,1 @@\n-                    sb.append(remoteAddress().toString());\n+                    sb.append(remoteAddress());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":3,"deletions":23,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,4 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import sun.security.action.GetPropertyAction;\n-import sun.security.action.GetIntegerAction;\n@@ -75,1 +71,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -77,16 +72,5 @@\n-        if (System.getSecurityManager() == null) {\n-            return (Runnable r) -> {\n-                Thread t = new Thread(r);\n-                t.setDaemon(true);\n-                return t;\n-            };\n-        } else {\n-            return (Runnable r) -> {\n-                PrivilegedAction<Thread> action = () -> {\n-                    Thread t = InnocuousThread.newThread(r);\n-                    t.setDaemon(true);\n-                    return t;\n-               };\n-               return AccessController.doPrivileged(action);\n-           };\n-        }\n+        return (Runnable r) -> {\n+            Thread t = new Thread(r);\n+            t.setDaemon(true);\n+            return t;\n+        };\n@@ -151,3 +135,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String propValue = AccessController.doPrivileged(new\n-            GetPropertyAction(DEFAULT_THREAD_POOL_INITIAL_SIZE));\n+        String propValue = System.getProperty(DEFAULT_THREAD_POOL_INITIAL_SIZE);\n@@ -166,3 +148,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String propValue = AccessController.doPrivileged(new\n-            GetPropertyAction(DEFAULT_THREAD_POOL_THREAD_FACTORY));\n+        String propValue = System.getProperty(DEFAULT_THREAD_POOL_THREAD_FACTORY);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ThreadPool.java","additions":7,"deletions":27,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,19 +62,0 @@\n-    static void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(accessUnixDomainSocket);\n-    }\n-\n-    static UnixDomainSocketAddress getRevealedLocalAddress(SocketAddress sa) {\n-        UnixDomainSocketAddress addr = (UnixDomainSocketAddress) sa;\n-        try {\n-            checkPermission();\n-            \/\/ Security check passed\n-        } catch (SecurityException e) {\n-            \/\/ Return unnamed address only if security check fails\n-            addr = unnamed();\n-        }\n-        return addr;\n-    }\n-\n@@ -88,5 +69,0 @@\n-    @SuppressWarnings(\"removal\")\n-    static String getRevealedLocalAddressAsString(SocketAddress sa) {\n-        return (System.getSecurityManager() != null) ? sa.toString() : \"\";\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -43,1 +41,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -78,1 +75,1 @@\n-        String s = GetPropertyAction.privilegedGetProperty(\"jdk.nio.maxCachedBufferSize\");\n+        String s = System.getProperty(\"jdk.nio.maxCachedBufferSize\");\n@@ -409,1 +406,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -411,20 +407,16 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    try {\n-                        Class<?> cl = Class.forName(\"java.nio.DirectByteBuffer\");\n-                        Constructor<?> ctor = cl.getDeclaredConstructor(\n-                            new Class<?>[] { int.class,\n-                                             long.class,\n-                                             FileDescriptor.class,\n-                                             Runnable.class,\n-                                             boolean.class, MemorySegment.class});\n-                        ctor.setAccessible(true);\n-                        directByteBufferConstructor = ctor;\n-                    } catch (ClassNotFoundException   |\n-                             NoSuchMethodException    |\n-                             IllegalArgumentException |\n-                             ClassCastException x) {\n-                        throw new InternalError(x);\n-                    }\n-                    return null;\n-                }});\n+        try {\n+            Class<?> cl = Class.forName(\"java.nio.DirectByteBuffer\");\n+            Constructor<?> ctor = cl.getDeclaredConstructor(\n+                new Class<?>[] { int.class,\n+                                 long.class,\n+                                 FileDescriptor.class,\n+                                 Runnable.class,\n+                                 boolean.class, MemorySegment.class });\n+            ctor.setAccessible(true);\n+            directByteBufferConstructor = ctor;\n+        } catch (ClassNotFoundException   |\n+                 NoSuchMethodException    |\n+                 IllegalArgumentException |\n+                 ClassCastException x) {\n+            throw new InternalError(x);\n+        }\n@@ -458,1 +450,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -460,20 +451,16 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    try {\n-                        Class<?> cl = Class.forName(\"java.nio.DirectByteBufferR\");\n-                        Constructor<?> ctor = cl.getDeclaredConstructor(\n-                            new Class<?>[] { int.class,\n-                                             long.class,\n-                                             FileDescriptor.class,\n-                                             Runnable.class,\n-                                             boolean.class, MemorySegment.class });\n-                        ctor.setAccessible(true);\n-                        directByteBufferRConstructor = ctor;\n-                    } catch (ClassNotFoundException |\n-                             NoSuchMethodException |\n-                             IllegalArgumentException |\n-                             ClassCastException x) {\n-                        throw new InternalError(x);\n-                    }\n-                    return null;\n-                }});\n+        try {\n+            Class<?> cl = Class.forName(\"java.nio.DirectByteBufferR\");\n+            Constructor<?> ctor = cl.getDeclaredConstructor(\n+                new Class<?>[] { int.class,\n+                                 long.class,\n+                                 FileDescriptor.class,\n+                                 Runnable.class,\n+                                 boolean.class, MemorySegment.class });\n+            ctor.setAccessible(true);\n+            directByteBufferRConstructor = ctor;\n+        } catch (ClassNotFoundException |\n+                 NoSuchMethodException |\n+                 IllegalArgumentException |\n+                 ClassCastException x) {\n+            throw new InternalError(x);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Util.java","additions":34,"deletions":47,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.security.*;\n@@ -132,1 +131,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -134,5 +132,1 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public CharsetMapping run() {\n-                return new CharsetMapping().load(is);\n-            }\n-        });\n+        return new CharsetMapping().load(is);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/CharsetMapping.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -57,1 +55,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -59,14 +56,7 @@\n-        final Runnable thisRunnable = this;\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Object run() {\n-                Thread thr = new Thread(null,\n-                                        thisRunnable,\n-                                        \"FileSystemWatchService\",\n-                                        0,\n-                                        false);\n-                thr.setDaemon(true);\n-                thr.start();\n-                return null;\n-            }\n-         });\n+        Thread thr = new Thread(null,\n+                                this,\n+                                \"FileSystemWatchService\",\n+                                0,\n+                                false);\n+        thr.setDaemon(true);\n+        thr.start();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/AbstractPoller.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -30,1 +31,0 @@\n-import java.io.IOException;\n@@ -42,16 +42,0 @@\n-    protected void checkAccess(String file,\n-                               boolean checkRead,\n-                               boolean checkWrite)\n-    {\n-        assert checkRead || checkWrite;\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            if (checkRead)\n-                sm.checkRead(file);\n-            if (checkWrite)\n-                sm.checkWrite(file);\n-            sm.checkPermission(new RuntimePermission(\"accessUserDefinedAttributes\"));\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/AbstractUserDefinedFileAttributeView.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,4 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.PrivilegedActionException;\n@@ -89,1 +85,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -136,17 +131,2 @@\n-        \/\/ registration is done in privileged block as it requires the\n-        \/\/ attributes of the entries in the directory.\n-        try {\n-            return AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<PollingWatchKey>() {\n-                    @Override\n-                    public PollingWatchKey run() throws IOException {\n-                        return doPrivilegedRegister(path, eventSet);\n-                    }\n-                });\n-        } catch (PrivilegedActionException pae) {\n-            Throwable cause = pae.getCause();\n-            if (cause instanceof IOException ioe)\n-                throw ioe;\n-            throw new AssertionError(pae);\n-        }\n-    }\n+        \/\/ registers directory returning a new key if not already registered or\n+        \/\/ existing key if already registered\n@@ -154,6 +134,0 @@\n-    \/\/ registers directory returning a new key if not already registered or\n-    \/\/ existing key if already registered\n-    private PollingWatchKey doPrivilegedRegister(Path path,\n-                                                 Set<? extends WatchEvent.Kind<?>> events)\n-        throws IOException\n-    {\n@@ -186,1 +160,1 @@\n-            watchKey.enable(events);\n+            watchKey.enable(eventSet);\n@@ -192,1 +166,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -203,7 +176,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            @Override\n-            public Void run() {\n-                scheduledExecutor.shutdown();\n-                return null;\n-            }\n-         });\n+        scheduledExecutor.shutdown();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/PollingWatchService.java","additions":5,"deletions":38,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -152,12 +152,0 @@\n-    \/*\n-     * If there's a SecurityManager then check for the appropriate\n-     * RuntimePermission.\n-     *\/\n-    private static void checkAccess() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"inheritedChannel\"));\n-        }\n-    }\n-\n@@ -255,5 +243,0 @@\n-        \/\/ if there is a channel then do the security check before\n-        \/\/ returning it.\n-        if (channel != null) {\n-            checkAccess();\n-        }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/InheritedChannel.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -67,5 +64,0 @@\n-    \/\/ context for permission check when security manager set\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext acceptAcc;\n-\n-\n@@ -168,1 +160,1 @@\n-                child = finishAccept(newfd, isaa[0], acceptAcc);\n+                child = finishAccept(newfd, isaa[0]);\n@@ -170,1 +162,1 @@\n-                if (!(x instanceof IOException) && !(x instanceof SecurityException))\n+                if (!(x instanceof IOException))\n@@ -201,1 +193,1 @@\n-     * with an IOException or SecurityException then the channel\/file descriptor\n+     * with an IOException then the channel\/file descriptor\n@@ -204,1 +196,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -206,3 +197,2 @@\n-                                                   final InetSocketAddress remote,\n-                                                   AccessControlContext acc)\n-        throws IOException, SecurityException\n+                                                   final InetSocketAddress remote)\n+        throws IOException\n@@ -218,28 +208,0 @@\n-        \/\/ permission check must always be in initiator's context\n-        try {\n-            if (acc != null) {\n-                AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public Void run() {\n-                        SecurityManager sm = System.getSecurityManager();\n-                        if (sm != null) {\n-                            sm.checkAccept(remote.getAddress().getHostAddress(),\n-                                    remote.getPort());\n-                        }\n-                        return null;\n-                    }\n-                }, acc);\n-            } else {\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    sm.checkAccept(remote.getAddress().getHostAddress(),\n-                            remote.getPort());\n-                }\n-            }\n-        } catch (SecurityException x) {\n-            try {\n-                ch.close();\n-            } catch (Throwable suppressed) {\n-                x.addSuppressed(suppressed);\n-            }\n-            throw x;\n-        }\n@@ -249,1 +211,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -286,3 +247,0 @@\n-                \/\/ need calling context when there is security manager as\n-                \/\/ permission check may be done in a different thread without\n-                \/\/ any application call frames on the stack\n@@ -299,2 +257,0 @@\n-                    this.acceptAcc = (System.getSecurityManager() == null) ?\n-                            null : AccessController.getContext();\n@@ -321,1 +277,1 @@\n-                child = finishAccept(newfd, isaa[0], null);\n+                child = finishAccept(newfd, isaa[0]);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixAsynchronousServerSocketChannelImpl.java","additions":7,"deletions":51,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -52,1 +51,1 @@\n-        String propValue = GetPropertyAction.privilegedGetProperty(\n+        String propValue = System.getProperty(\n@@ -312,6 +311,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkConnect(isa.getAddress().getHostAddress(), isa.getPort());\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixAsynchronousSocketChannelImpl.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -54,1 +52,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -56,9 +53,6 @@\n-        PrivilegedAction<String> action = () -> {\n-            String s = NetProperties.get(\"jdk.net.unixdomain.tmpdir\");\n-            if (s != null && s.length() > 0) {\n-                return s;\n-            } else {\n-                return StaticProperty.javaIoTmpDir();\n-            }\n-        };\n-        return AccessController.doPrivileged(action);\n+        String s = NetProperties.get(\"jdk.net.unixdomain.tmpdir\");\n+        if (s != null && s.length() > 0) {\n+            return s;\n+        } else {\n+            return StaticProperty.javaIoTmpDir();\n+        }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -96,13 +94,7 @@\n-                    @SuppressWarnings(\"removal\")\n-                    List<String> lines = AccessController.doPrivileged(\n-                        new PrivilegedAction<>() {\n-                            @Override\n-                            public List<String> run() {\n-                                try {\n-                                    return Files.readAllLines(mimeTypesFile,\n-                                                              Charset.defaultCharset());\n-                                } catch (IOException ignore) {\n-                                    return Collections.emptyList();\n-                                }\n-                            }\n-                        });\n+                    List<String> lines;\n+                    try {\n+                        lines = Files.readAllLines(mimeTypesFile,\n+                                                   Charset.defaultCharset());\n+                    } catch (IOException ignore) {\n+                        lines = Collections.emptyList();\n+                    }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/MimeTypesFileTypeDetector.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.FileDescriptor;\n@@ -30,1 +31,0 @@\n-import java.io.FileDescriptor;\n@@ -111,1 +111,0 @@\n-                                      String pathForPermissionCheck,\n@@ -133,1 +132,1 @@\n-        FileDescriptor fdObj = open(dfd, path, pathForPermissionCheck, flags, mode);\n+        FileDescriptor fdObj = open(dfd, path, flags, mode);\n@@ -146,1 +145,1 @@\n-        return newFileChannel(-1, path, null, options, mode);\n+        return newFileChannel(-1, path, options, mode);\n@@ -170,1 +169,1 @@\n-        FileDescriptor fdObj = open(-1, path, null, flags, mode);\n+        FileDescriptor fdObj = open(-1, path, flags, mode);\n@@ -180,1 +179,0 @@\n-                                         String pathForPermissionCheck,\n@@ -239,14 +237,0 @@\n-        \/\/ permission check before we open the file\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            if (pathForPermissionCheck == null)\n-                pathForPermissionCheck = path.getPathForPermissionCheck();\n-            if (flags.read)\n-                sm.checkRead(pathForPermissionCheck);\n-            if (flags.write)\n-                sm.checkWrite(pathForPermissionCheck);\n-            if (flags.deleteOnClose)\n-                sm.checkDelete(pathForPermissionCheck);\n-        }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixChannelFactory.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -32,1 +33,0 @@\n-import java.io.IOException;\n@@ -50,1 +50,0 @@\n-            file.checkRead();\n@@ -72,3 +71,0 @@\n-            \/\/ permission check\n-            file.checkWrite();\n-\n@@ -159,18 +155,0 @@\n-        final void checkReadExtended() {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                file.checkRead();\n-                sm.checkPermission(new RuntimePermission(\"accessUserInformation\"));\n-            }\n-        }\n-\n-        final void checkWriteExtended() {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                file.checkWrite();\n-                sm.checkPermission(new RuntimePermission(\"accessUserInformation\"));\n-            }\n-        }\n-\n@@ -231,1 +209,0 @@\n-            checkReadExtended();\n@@ -242,2 +219,0 @@\n-            checkWriteExtended();\n-\n@@ -286,1 +261,0 @@\n-            checkWriteExtended();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -272,1 +270,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -277,6 +274,1 @@\n-                    props = AccessController.doPrivileged(\n-                        new PrivilegedAction<>() {\n-                            @Override\n-                            public Properties run() {\n-                                return loadProperties();\n-                            }});\n+                    props = loadProperties();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileStore.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.nio.file.LinkPermission;\n@@ -57,1 +56,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -90,2 +88,1 @@\n-        String propValue = GetPropertyAction\n-                .privilegedGetProperty(\"sun.nio.fs.chdirAllowed\", \"false\");\n+        String propValue = System.getProperty(\"sun.nio.fs.chdirAllowed\", \"false\");\n@@ -182,14 +179,1 @@\n-        final List<Path> allowedList = List.of(rootDirectory);\n-        return new Iterable<>() {\n-            public Iterator<Path> iterator() {\n-                try {\n-                    @SuppressWarnings(\"removal\")\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null)\n-                        sm.checkRead(rootDirectory.toString());\n-                    return allowedList.iterator();\n-                } catch (SecurityException x) {\n-                    return Collections.emptyIterator(); \/\/disallowed\n-                }\n-            }\n-        };\n+        return List.of(rootDirectory);\n@@ -231,10 +215,0 @@\n-                \/\/ check permission to read mount point\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    try {\n-                        sm.checkRead(Util.toString(entry.dir()));\n-                    } catch (SecurityException x) {\n-                        continue;\n-                    }\n-                }\n@@ -278,14 +252,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                sm.checkPermission(new RuntimePermission(\"getFileStoreAttributes\"));\n-            } catch (SecurityException se) {\n-                return Collections.emptyList();\n-            }\n-        }\n-        return new Iterable<>() {\n-            public Iterator<FileStore> iterator() {\n-                return new FileStoreIterator();\n-            }\n-        };\n+        return FileStoreIterator::new;\n@@ -848,8 +809,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            source.checkWrite();\n-            target.checkWrite();\n-        }\n-\n@@ -991,8 +944,0 @@\n-        \/\/ permission checks\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            source.checkRead();\n-            target.checkWrite();\n-        }\n-\n@@ -1012,5 +957,0 @@\n-        \/\/ if source file is symbolic link then we must check LinkPermission\n-        if (sm != null && sourceAttrs.isSymbolicLink()) {\n-            sm.checkPermission(new LinkPermission(\"symbolic\"));\n-        }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":3,"deletions":63,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.nio.file.LinkPermission;\n@@ -62,1 +61,0 @@\n-import sun.security.util.SecurityConstants;\n@@ -174,1 +172,0 @@\n-            file.checkRead();\n@@ -253,1 +250,0 @@\n-        file.checkDelete();\n@@ -320,1 +316,0 @@\n-            file.checkRead();\n@@ -324,1 +319,0 @@\n-            file.checkWrite();\n@@ -328,6 +322,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                \/\/ not cached\n-                sm.checkExec(file.getPathForPermissionCheck());\n-            }\n@@ -344,1 +332,0 @@\n-        file.checkRead();\n@@ -351,1 +338,0 @@\n-        file.checkWrite();\n@@ -358,6 +344,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ not cached\n-            sm.checkExec(file.getPathForPermissionCheck());\n-        }\n@@ -377,4 +357,0 @@\n-        \/\/ check security manager access to both files\n-        file1.checkRead();\n-        file2.checkRead();\n-\n@@ -401,1 +377,0 @@\n-        file.checkRead();\n@@ -424,6 +399,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"getFileStoreAttributes\"));\n-            file.checkRead();\n-        }\n@@ -438,1 +407,0 @@\n-        dir.checkWrite();\n@@ -456,1 +424,0 @@\n-        dir.checkRead();\n@@ -509,8 +476,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new LinkPermission(\"symbolic\"));\n-            link.checkWrite();\n-        }\n-\n@@ -530,8 +489,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new LinkPermission(\"hard\"));\n-            link.checkWrite();\n-            existing.checkWrite();\n-        }\n@@ -548,8 +499,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            FilePermission perm = new FilePermission(link.getPathForPermissionCheck(),\n-                SecurityConstants.FILE_READLINK_ACTION);\n-            sm.checkPermission(perm);\n-        }\n@@ -571,1 +514,0 @@\n-            file.checkRead();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -836,21 +836,0 @@\n-    void checkRead() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkRead(getPathForPermissionCheck());\n-    }\n-\n-    void checkWrite() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkWrite(getPathForPermissionCheck());\n-    }\n-\n-    void checkDelete() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkDelete(getPathForPermissionCheck());\n-    }\n-\n@@ -862,7 +841,1 @@\n-        \/\/ The path is relative so need to resolve against default directory,\n-        \/\/ taking care not to reveal the user.dir\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPropertyAccess(\"user.dir\");\n-        }\n+        \/\/ The path is relative so need to resolve against default directory\n@@ -875,2 +848,0 @@\n-        checkRead();\n-\n@@ -1025,1 +996,0 @@\n-        checkRead();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":1,"deletions":31,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.io.IOException;\n+import java.nio.channels.SeekableByteChannel;\n@@ -30,1 +32,0 @@\n-import java.nio.channels.SeekableByteChannel;\n@@ -33,1 +34,0 @@\n-import java.io.IOException;\n@@ -96,7 +96,0 @@\n-        \/\/ permission check using name resolved against original path of directory\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            child.checkRead();\n-        }\n-\n@@ -149,3 +142,0 @@\n-        \/\/ path for permission check\n-        String pathToCheck = ds.directory().resolve(file).getPathForPermissionCheck();\n-\n@@ -157,1 +147,1 @@\n-                return UnixChannelFactory.newFileChannel(dfd, file, pathToCheck, options, mode);\n+                return UnixChannelFactory.newFileChannel(dfd, file, options, mode);\n@@ -176,7 +166,0 @@\n-        \/\/ permission check using name resolved against original path of directory\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            ds.directory().resolve(file).checkDelete();\n-        }\n-\n@@ -242,8 +225,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            this.ds.directory().resolve(from).checkWrite();\n-            that.ds.directory().resolve(to).checkWrite();\n-        }\n-\n@@ -340,12 +315,0 @@\n-        private void checkWriteAccess() {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                if (file == null) {\n-                    ds.directory().checkWrite();\n-                } else {\n-                    ds.directory().resolve(file).checkWrite();\n-                }\n-            }\n-        }\n-\n@@ -364,9 +327,0 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    if (file == null) {\n-                        ds.directory().checkRead();\n-                    } else {\n-                        ds.directory().resolve(file).checkRead();\n-                    }\n-                }\n@@ -395,2 +349,0 @@\n-            checkWriteAccess();\n-\n@@ -444,9 +396,0 @@\n-        private void checkWriteAndUserAccess() {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                super.checkWriteAccess();\n-                sm.checkPermission(new RuntimePermission(\"accessUserInformation\"));\n-            }\n-        }\n-\n@@ -460,10 +403,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                if (file == null)\n-                    ds.directory().checkRead();\n-                else\n-                    ds.directory().resolve(file).checkRead();\n-                sm.checkPermission(new RuntimePermission(\"accessUserInformation\"));\n-            }\n-\n@@ -493,3 +426,0 @@\n-            \/\/ permission check\n-            checkWriteAndUserAccess();\n-\n@@ -516,3 +446,0 @@\n-            \/\/ permission check\n-            checkWriteAndUserAccess();\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixSecureDirectoryStream.java","additions":3,"deletions":76,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,0 @@\n-                up.checkRead();\n@@ -129,1 +128,1 @@\n-            } catch (UnixException | SecurityException ignore) { }\n+            } catch (UnixException ignore) { }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUriUtils.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -30,1 +31,0 @@\n-import java.io.IOException;\n@@ -117,1 +117,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -120,3 +119,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), true, false);\n-\n@@ -144,1 +140,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -147,3 +142,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), true, false);\n-\n@@ -168,1 +160,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -171,3 +162,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), true, false);\n-\n@@ -233,1 +221,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -236,3 +223,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), false, true);\n-\n@@ -296,1 +280,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -299,3 +282,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), false, true);\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,5 +135,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"lookupUserInformation\"));\n-        }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserPrincipals.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -35,1 +32,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -37,5 +33,1 @@\n-    private static final SelectorProviderImpl INSTANCE;\n-    static {\n-        PrivilegedAction<SelectorProviderImpl> pa = WEPollSelectorProvider::new;\n-        INSTANCE = AccessController.doPrivileged(pa);\n-    }\n+    private static final SelectorProviderImpl INSTANCE = new WEPollSelectorProvider();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.PrivilegedActionException;\n@@ -67,4 +64,1 @@\n-    private static class Initializer\n-        implements PrivilegedExceptionAction<Void>\n-    {\n-\n+    private static class Initializer {\n@@ -82,2 +76,1 @@\n-        @Override\n-        public Void run() throws IOException {\n+        public void init() throws IOException {\n@@ -104,2 +97,0 @@\n-\n-            return null;\n@@ -193,1 +184,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -196,8 +186,4 @@\n-        try {\n-            AccessController.doPrivileged(initializer);\n-            SinkChannelImpl sink = initializer.sink;\n-            if (sink.isNetSocket() && !buffering) {\n-                sink.setOption(StandardSocketOptions.TCP_NODELAY, true);\n-            }\n-        } catch (PrivilegedActionException pae) {\n-            throw (IOException) pae.getCause();\n+        initializer.init();\n+        SinkChannelImpl sink = initializer.sink;\n+        if (sink.isNetSocket() && !buffering) {\n+            sink.setOption(StandardSocketOptions.TCP_NODELAY, true);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -53,1 +51,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -55,12 +52,9 @@\n-        PrivilegedAction<String> action = () -> {\n-            String s = NetProperties.get(\"jdk.net.unixdomain.tmpdir\");\n-            if (s != null) {\n-                return s;\n-            }\n-            String temp = System.getenv(\"TEMP\");\n-            if (temp != null) {\n-                return temp;\n-            }\n-            return StaticProperty.javaIoTmpDir();\n-        };\n-        return AccessController.doPrivileged(action);\n+        String s = NetProperties.get(\"jdk.net.unixdomain.tmpdir\");\n+        if (s != null) {\n+            return s;\n+        }\n+        String temp = System.getenv(\"TEMP\");\n+        if (temp != null) {\n+            return temp;\n+        }\n+        return StaticProperty.javaIoTmpDir();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -118,2 +115,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n@@ -123,1 +118,0 @@\n-                   @SuppressWarnings(\"removal\") AccessControlContext acc,\n@@ -127,1 +121,0 @@\n-            this.acc = acc;\n@@ -142,1 +135,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -154,12 +146,0 @@\n-\n-            \/\/ permission check (in context of initiating thread)\n-            if (acc != null) {\n-                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        SecurityManager sm = System.getSecurityManager();\n-                        sm.checkAccept(remote.getAddress().getHostAddress(),\n-                                       remote.getPort());\n-                        return null;\n-                    }\n-                }, acc);\n-            }\n@@ -210,1 +190,1 @@\n-                if (!(x instanceof IOException) && !(x instanceof SecurityException))\n+                if (!(x instanceof IOException))\n@@ -262,1 +242,1 @@\n-                if (!(x instanceof IOException) && !(x instanceof SecurityException))\n+                if (!(x instanceof IOException))\n@@ -331,7 +311,0 @@\n-        \/\/ need calling context when there is security manager as\n-        \/\/ permission check may be done in a different thread without\n-        \/\/ any application call frames on the stack\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext acc = (System.getSecurityManager() == null) ?\n-            null : AccessController.getContext();\n-\n@@ -340,1 +313,1 @@\n-        AcceptTask task = new AcceptTask(ch, acc, result);\n+        AcceptTask task = new AcceptTask(ch, result);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousServerSocketChannelImpl.java","additions":4,"deletions":31,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -311,14 +308,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private void doPrivilegedBind(final SocketAddress sa) throws IOException {\n-        try {\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws IOException {\n-                    bind(sa);\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (IOException) e.getException();\n-        }\n-    }\n-\n@@ -340,6 +323,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkConnect(isa.getAddress().getHostAddress(), isa.getPort());\n-\n@@ -357,5 +334,1 @@\n-                    if (sm == null) {\n-                        bind(any);\n-                    } else {\n-                        doPrivilegedBind(any);\n-                    }\n+                    bind(any);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousSocketChannelImpl.java","additions":2,"deletions":29,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,16 +64,0 @@\n-    \/\/ permission check\n-    private void checkAccess(WindowsPath file,\n-                             boolean checkRead,\n-                             boolean checkWrite)\n-    {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            if (checkRead)\n-                sm.checkRead(file.getPathForPermissionCheck());\n-            if (checkWrite)\n-                sm.checkWrite(file.getPathForPermissionCheck());\n-            sm.checkPermission(new RuntimePermission(\"accessUserInformation\"));\n-        }\n-    }\n-\n@@ -117,2 +101,0 @@\n-        checkAccess(file, true, false);\n-\n@@ -138,2 +120,0 @@\n-        checkAccess(file, true, false);\n-\n@@ -161,3 +141,0 @@\n-        \/\/ permission check\n-        checkAccess(file, false, true);\n-\n@@ -202,2 +179,0 @@\n-        checkAccess(file, false, true);\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsAclFileAttributeView.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -142,2 +142,0 @@\n-     * @param   pathToCheck\n-     *          The path used for permission checks (if security manager)\n@@ -146,1 +144,0 @@\n-                                      String pathToCheck,\n@@ -168,1 +165,1 @@\n-        FileDescriptor fdObj = open(pathForWindows, pathToCheck, flags, pSecurityDescriptor);\n+        FileDescriptor fdObj = open(pathForWindows, flags, pSecurityDescriptor);\n@@ -178,2 +175,0 @@\n-     * @param   pathToCheck\n-     *          The path used for permission checks (if security manager)\n@@ -184,1 +179,0 @@\n-                                                              String pathToCheck,\n@@ -207,1 +201,1 @@\n-            fdObj = open(pathForWindows, pathToCheck, flags, pSecurityDescriptor);\n+            fdObj = open(pathForWindows, flags, pSecurityDescriptor);\n@@ -229,1 +223,0 @@\n-                                       String pathToCheck,\n@@ -294,14 +287,0 @@\n-        \/\/ permission check\n-        if (pathToCheck != null) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                if (flags.read)\n-                    sm.checkRead(pathToCheck);\n-                if (flags.write)\n-                    sm.checkWrite(pathToCheck);\n-                if (flags.deleteOnClose)\n-                    sm.checkDelete(pathToCheck);\n-            }\n-        }\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsChannelFactory.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-            file.checkRead();\n@@ -113,1 +112,1 @@\n-                    } catch (SecurityException | WindowsException | IOException ignore) {\n+                    } catch (WindowsException | IOException ignore) {\n@@ -137,3 +136,0 @@\n-            \/\/ permission check\n-            file.checkWrite();\n-\n@@ -222,2 +218,0 @@\n-            file.checkWrite();\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileAttributeViews.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -87,9 +87,0 @@\n-        \/\/ check permissions. If the source file is a symbolic link then\n-        \/\/ later we must also check LinkPermission\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            source.checkRead();\n-            target.checkWrite();\n-        }\n-\n@@ -147,5 +138,0 @@\n-        \/\/ if source file is a symbolic link then we must check for LinkPermission\n-        if (sm != null && sourceAttrs.isSymbolicLink()) {\n-            sm.checkPermission(new LinkPermission(\"symbolic\"));\n-        }\n-\n@@ -311,7 +297,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            source.checkWrite();\n-            target.checkWrite();\n-        }\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileCopy.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-        \/\/ iterate over roots, ignoring those that the security manager denies\n+        \/\/ iterate over roots\n@@ -106,2 +106,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n@@ -114,7 +112,0 @@\n-                if (sm != null) {\n-                    try {\n-                        sm.checkRead(root);\n-                    } catch (SecurityException x) {\n-                        continue;\n-                    }\n-                }\n@@ -144,6 +135,0 @@\n-                \/\/ ignore if security manager denies access\n-                try {\n-                    root.checkRead();\n-                } catch (SecurityException x) {\n-                    continue;\n-                }\n@@ -189,14 +174,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                sm.checkPermission(new RuntimePermission(\"getFileStoreAttributes\"));\n-            } catch (SecurityException se) {\n-                return Collections.emptyList();\n-            }\n-        }\n-        return new Iterable<FileStore>() {\n-            public Iterator<FileStore> iterator() {\n-                return new FileStoreIterator();\n-            }\n-        };\n+        return FileStoreIterator::new;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystem.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,0 @@\n-                                file.getPathForPermissionCheck(),\n@@ -145,1 +144,0 @@\n-                                            file.getPathForPermissionCheck(),\n@@ -230,1 +228,0 @@\n-                                file.getPathForPermissionCheck(),\n@@ -244,1 +241,0 @@\n-        file.checkDelete();\n@@ -327,1 +323,0 @@\n-                                file.getPathForPermissionCheck(),\n@@ -374,1 +369,0 @@\n-            file.checkRead();\n@@ -392,1 +386,0 @@\n-            file.checkRead();\n@@ -396,1 +389,0 @@\n-            file.checkWrite();\n@@ -400,4 +392,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null)\n-                sm.checkExec(file.getPathForPermissionCheck());\n@@ -443,4 +431,0 @@\n-        \/\/ check security manager access to both files\n-        file1.checkRead();\n-        file2.checkRead();\n-\n@@ -486,1 +470,0 @@\n-        file.checkRead();\n@@ -499,6 +482,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"getFileStoreAttributes\"));\n-            file.checkRead();\n-        }\n@@ -514,1 +491,0 @@\n-        dir.checkWrite();\n@@ -538,1 +514,0 @@\n-        dir.checkRead();\n@@ -558,8 +533,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new LinkPermission(\"symbolic\"));\n-            link.checkWrite();\n-        }\n-\n@@ -614,9 +581,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new LinkPermission(\"hard\"));\n-            link.checkWrite();\n-            existing.checkWrite();\n-        }\n-\n@@ -637,9 +595,0 @@\n-        \/\/ permission check\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            FilePermission perm = new FilePermission(link.getPathForPermissionCheck(),\n-                SecurityConstants.FILE_READLINK_ACTION);\n-            sm.checkPermission(perm);\n-        }\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":1,"deletions":52,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -123,1 +121,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -167,6 +164,1 @@\n-                target = AccessController\n-                    .doPrivileged(new PrivilegedAction<WindowsPath>() {\n-                        @Override\n-                        public WindowsPath run() {\n-                            return t.toAbsolutePath();\n-                        }});\n+                target = t.toAbsolutePath();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,5 +169,0 @@\n-    \/\/ use this path for permission checks\n-    String getPathForPermissionCheck() {\n-        return path;\n-    }\n-\n@@ -893,24 +888,0 @@\n-    void checkRead() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkRead(getPathForPermissionCheck());\n-        }\n-    }\n-\n-    void checkWrite() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkWrite(getPathForPermissionCheck());\n-        }\n-    }\n-\n-    void checkDelete() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkDelete(getPathForPermissionCheck());\n-        }\n-    }\n-\n@@ -927,7 +898,0 @@\n-        \/\/ permission check as per spec\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPropertyAccess(\"user.dir\");\n-        }\n-\n@@ -943,1 +907,0 @@\n-        checkRead();\n@@ -959,25 +922,0 @@\n-        \/\/ When a security manager is set then we need to make a defensive\n-        \/\/ copy of the modifiers and check for the Windows specific FILE_TREE\n-        \/\/ modifier. When the modifier is present then check that permission\n-        \/\/ has been granted recursively.\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            boolean watchSubtree = false;\n-            final int ml = modifiers.length;\n-            if (ml > 0) {\n-                modifiers = Arrays.copyOf(modifiers, ml);\n-                int i=0;\n-                while (i < ml) {\n-                    if (ExtendedOptions.FILE_TREE.matches(modifiers[i++])) {\n-                        watchSubtree = true;\n-                        break;\n-                    }\n-                }\n-            }\n-            String s = getPathForPermissionCheck();\n-            sm.checkRead(s);\n-            if (watchSubtree)\n-                sm.checkRead(s + \"\\\\-\");\n-        }\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsPath.java","additions":1,"deletions":63,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,0 @@\n-                 path.checkRead();\n@@ -109,1 +108,1 @@\n-            } catch (SecurityException | WindowsException x) {\n+            } catch (WindowsException x) {\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsUriSupport.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -106,2 +105,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), true, false);\n@@ -111,1 +108,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -114,2 +110,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), true, false);\n@@ -125,1 +119,1 @@\n-                .newFileChannel(join(file, name), null, opts, 0L);\n+                .newFileChannel(join(file, name), opts, 0L);\n@@ -127,1 +121,1 @@\n-            x.rethrowAsIOException(join(file.getPathForPermissionCheck(), name));\n+            x.rethrowAsIOException(join(file.getPathForExceptionMessage(), name));\n@@ -139,1 +133,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -142,3 +135,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), true, false);\n-\n@@ -153,1 +143,1 @@\n-                .newFileChannel(join(file, name), null, opts, 0L);\n+                .newFileChannel(join(file, name), opts, 0L);\n@@ -155,1 +145,1 @@\n-            x.rethrowAsIOException(join(file.getPathForPermissionCheck(), name));\n+            x.rethrowAsIOException(join(file.getPathForExceptionMessage(), name));\n@@ -175,1 +165,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -178,3 +167,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), false, true);\n-\n@@ -213,1 +199,1 @@\n-                    .newFileChannel(join(file, name), null, opts, 0L);\n+                    .newFileChannel(join(file, name), opts, 0L);\n@@ -215,1 +201,1 @@\n-                x.rethrowAsIOException(join(file.getPathForPermissionCheck(), name));\n+                x.rethrowAsIOException(join(file.getPathForExceptionMessage(), name));\n@@ -232,1 +218,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -235,3 +220,0 @@\n-        if (System.getSecurityManager() != null)\n-            checkAccess(file.getPathForPermissionCheck(), false, true);\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsUserDefinedFileAttributeView.java","additions":7,"deletions":25,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,6 +134,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"lookupUserInformation\"));\n-        }\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsUserPrincipals.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}