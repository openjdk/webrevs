{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,11 @@\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.TypeAnnotation;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.ClassFileFormatVersion;\n@@ -32,5 +43,3 @@\n-import java.lang.classfile.*;\n-import java.lang.reflect.AccessFlag;\n-import java.lang.classfile.constantpool.*;\n-import java.lang.classfile.attribute.*;\n-import static java.lang.classfile.ClassFile.*;\n+\n+import static java.lang.classfile.ClassFile.ACC_MANDATED;\n+import static java.lang.classfile.ClassFile.ACC_SYNTHETIC;\n@@ -66,2 +75,2 @@\n-    public void write(List<Attribute<?>> attrs) {\n-        write(attrs, null);\n+    public void write(List<Attribute<?>> attrs, ClassFileFormatVersion cffv) {\n+        write(attrs, null, cffv);\n@@ -70,1 +79,1 @@\n-    public void write(List<Attribute<?>> attrs, CodeAttribute lr) {\n+    public void write(List<Attribute<?>> attrs, CodeAttribute lr, ClassFileFormatVersion cffv) {\n@@ -73,1 +82,1 @@\n-                write(attr, lr);\n+                write(attr, lr, cffv);\n@@ -80,1 +89,1 @@\n-    public void write(Attribute<?> a, CodeAttribute lr) {\n+    public void write(Attribute<?> a, CodeAttribute lr, ClassFileFormatVersion cffv) {\n@@ -212,1 +221,1 @@\n-                        for (var flag : maskToAccessFlagsReportUnknown(access_flags, AccessFlag.Location.INNER_CLASS)) {\n+                        for (var flag : maskToAccessFlagsReportUnknown(access_flags, AccessFlag.Location.INNER_CLASS, cffv)) {\n@@ -497,1 +506,1 @@\n-                        write(componentInfo.attributes());\n+                        write(componentInfo.attributes(), cffv);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.lang.reflect.ClassFileFormatVersion;\n@@ -47,19 +48,0 @@\n-    private static final Map<AccessFlag.Location, Integer> LOCATION_MASKS;\n-\n-    static {\n-        var map = new EnumMap<AccessFlag.Location, Integer>(AccessFlag.Location.class);\n-        for (var loc : AccessFlag.Location.values()) {\n-            map.put(loc, 0);\n-        }\n-\n-        for (var flag : AccessFlag.values()) {\n-            for (var loc : flag.locations()) {\n-                map.compute(loc, (_, v) -> v | flag.mask());\n-            }\n-        }\n-\n-        \/\/ Peculiarities from AccessFlag.maskToAccessFlag\n-        map.compute(AccessFlag.Location.METHOD, (_, v) -> v | Modifier.STRICT);\n-\n-        LOCATION_MASKS = map;\n-    }\n@@ -75,2 +57,2 @@\n-    protected Set<AccessFlag> flagsReportUnknown(AccessFlags flags) {\n-        return maskToAccessFlagsReportUnknown(flags.flagsMask(), flags.location());\n+    protected Set<AccessFlag> flagsReportUnknown(AccessFlags flags, ClassFileFormatVersion cffv) {\n+        return maskToAccessFlagsReportUnknown(flags.flagsMask(), flags.location(), cffv);\n@@ -79,1 +61,2 @@\n-    protected Set<AccessFlag> maskToAccessFlagsReportUnknown(int mask, AccessFlag.Location location) {\n+    protected Set<AccessFlag> maskToAccessFlagsReportUnknown(int mask, AccessFlag.Location location, ClassFileFormatVersion cffv) {\n+        \/\/ TODO pass cffv to maskToAccessFlags\n@@ -83,1 +66,1 @@\n-            mask &= LOCATION_MASKS.get(location);\n+            mask &= location.flagsMask(cffv);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/BasicWriter.java","additions":7,"deletions":24,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,13 +28,0 @@\n-import java.lang.reflect.AccessFlag;\n-import java.net.URI;\n-import java.text.DateFormat;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import java.lang.constant.ClassDesc;\n-import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n-import java.util.LinkedHashSet;\n@@ -43,2 +30,0 @@\n-import java.lang.classfile.ClassModel;\n-import java.lang.classfile.ClassSignature;\n@@ -46,1 +31,0 @@\n-import static java.lang.classfile.ClassFile.*;\n@@ -48,1 +32,2 @@\n-import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassSignature;\n@@ -55,0 +40,18 @@\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantValueEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.constant.ClassDesc;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.ClassFileFormatVersion;\n+import java.lang.reflect.Modifier;\n+import java.net.URI;\n+import java.text.DateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.EnumSet;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static java.lang.classfile.ClassFile.*;\n@@ -115,0 +118,10 @@\n+    protected ClassFileFormatVersion cffv() {\n+        var major = classModel.majorVersion();\n+        if (major < JAVA_1_VERSION || major > ClassFile.latestMajorVersion())\n+            return null;\n+        if (major >= JAVA_12_VERSION && classModel.minorVersion() != 0) {\n+            return null;\n+        }\n+        return ClassFileFormatVersion.fromMajor(major);\n+    }\n+\n@@ -252,1 +265,1 @@\n-            attrWriter.write(classModel.attributes());\n+            attrWriter.write(classModel.attributes(), cffv());\n@@ -269,1 +282,1 @@\n-    private static final ClassFile VERIFIER = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(\n+    private static final ClassFile VERIFIER = ClassFile.of(ClassHierarchyResolverOption.of(\n@@ -272,1 +285,1 @@\n-                public ClassHierarchyResolver.ClassHierarchyInfo getClassInfo(ClassDesc classDesc) {\n+                public ClassHierarchyInfo getClassInfo(ClassDesc classDesc) {\n@@ -422,1 +435,1 @@\n-        writeModifiers(flagsReportUnknown(flags).stream().filter(fl -> fl.sourceModifier())\n+        writeModifiers(flagsReportUnknown(flags, cffv()).stream().filter(fl -> fl.sourceModifier())\n@@ -451,1 +464,1 @@\n-                    flagsReportUnknown(flags).stream().map(fl -> \"ACC_\" + fl.name()).toList(),\n+                    flagsReportUnknown(flags, cffv()).stream().map(fl -> \"ACC_\" + fl.name()).toList(),\n@@ -455,1 +468,1 @@\n-            attrWriter.write(f.attributes());\n+            attrWriter.write(f.attributes(), cffv());\n@@ -483,1 +496,1 @@\n-        for (var f : flagsReportUnknown(m.flags()))\n+        for (var f : flagsReportUnknown(m.flags(), cffv()))\n@@ -566,1 +579,1 @@\n-            for (var f : flagsReportUnknown(m.flags())) {\n+            for (var f : flagsReportUnknown(m.flags(), cffv())) {\n@@ -576,1 +589,1 @@\n-            attrWriter.write(m.attributes());\n+            attrWriter.write(m.attributes(), cffv());\n@@ -789,1 +802,1 @@\n-        var flagSet = flagsReportUnknown(flags);\n+        var flagSet = flagsReportUnknown(flags, cffv());\n@@ -800,1 +813,1 @@\n-    private static Set<String> getModifiers(Set<java.lang.reflect.AccessFlag> flags) {\n+    private static Set<String> getModifiers(Set<AccessFlag> flags) {\n@@ -808,1 +821,1 @@\n-        return getFlags(flags.flagsMask(), flagsReportUnknown(flags));\n+        return getFlags(flags.flagsMask(), flagsReportUnknown(flags, cffv()));\n@@ -811,1 +824,1 @@\n-    private static Set<String> getFlags(int mask, Set<java.lang.reflect.AccessFlag> flags) {\n+    private static Set<String> getFlags(int mask, Set<AccessFlag> flags) {\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":44,"deletions":31,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,8 @@\n-import java.lang.classfile.*;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.instruction.*;\n@@ -31,1 +38,0 @@\n-\n@@ -34,3 +40,0 @@\n-import java.lang.classfile.constantpool.*;\n-import java.lang.classfile.attribute.CodeAttribute;\n-import java.lang.classfile.instruction.*;\n@@ -280,1 +283,1 @@\n-        attrWriter.write(attr.attributes(), attr);\n+        attrWriter.write(attr.attributes(), attr, classWriter.cffv());\n@@ -285,1 +288,1 @@\n-            .ifPresent(a -> attrWriter.write(a, attr));\n+            .ifPresent(a -> attrWriter.write(a, attr, classWriter.cffv()));\n@@ -287,1 +290,1 @@\n-            .ifPresent(a -> attrWriter.write(a, attr));\n+            .ifPresent(a -> attrWriter.write(a, attr, classWriter.cffv()));\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/CodeWriter.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,2 @@\n- * @test 8333748\n+ * @test\n+ * @bug 8333748 8349536\n@@ -94,1 +95,1 @@\n-                        .map(ic -> InnerClassInfo.of(ic.innerClass(), ic.outerClass(), ic.innerName(), ic.flagsMask() | 0x0020))\n+                        .map(ic -> InnerClassInfo.of(ic.innerClass(), ic.outerClass(), ic.innerName(), ic.flagsMask() | ACC_SUPER))\n","filename":"test\/langtools\/tools\/javap\/UndefinedAccessFlagTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}