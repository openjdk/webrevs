{"files":[{"patch":"@@ -370,0 +370,13 @@\n+void os::Linux::parse_kernel_version(long* major, long* minor, char* release) {\n+  char* walker = release;\n+  long* set_v = major;\n+  while (*minor == -1 && walker[0] != '\\0') {\n+    if (isdigit(walker[0])) {\n+      *set_v = strtol(walker, &walker, 10);\n+      set_v = minor;\n+    } else {\n+      ++walker;\n+    }\n+  }\n+}\n+\n@@ -380,11 +393,1 @@\n-\n-  char* walker = buffer.release;\n-  long* set_v = major;\n-  while (*minor == -1 && walker != nullptr) {\n-    if (isdigit(walker[0])) {\n-      *set_v = strtol(walker, &walker, 10);\n-      set_v = minor;\n-    } else {\n-      ++walker;\n-    }\n-  }\n+  parse_kernel_version(major, minor, buffer.release);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+  friend class OSLinuxTestFixture;\n@@ -96,0 +97,4 @@\n+private:\n+  static void parse_kernel_version(long* major, long* minor, char* release);\n+\n+public:\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#ifdef LINUX\n+#include \"unittest.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"os_linux.hpp\"\n+\n+class OSLinuxTestFixture : public testing::Test {\n+public:\n+  void call_parse_kernel_version(long* major, long* minor, char* release) {\n+    os::Linux::parse_kernel_version(major, minor, release);\n+  }\n+};\n+\n+TEST_F(OSLinuxTestFixture, ParseKernelVersion) {\n+  \/\/ We need some memory that will SIGSEGV if read to.\n+  \/\/ os::reserve_memory fits the bill, as it does PROT_NONE.\n+  char* res_memory = os::reserve_memory(os::vm_page_size(), false, mtTest);\n+  long minor = -1;\n+  long major = -1;\n+  auto test = [&](const char* str, long majorexp, long minorexp) {\n+    \/\/ Remove old string.\n+    os::uncommit_memory(res_memory, strlen(res_memory) + 1);\n+    \/\/ Write new string.\n+    size_t strsz = strlen(str) + 1;\n+    os::commit_memory(res_memory, strsz , false);\n+    ::memcpy(res_memory, str, strsz);\n+    minor = -1; major = -1;\n+    call_parse_kernel_version(&major, &minor, res_memory);\n+    EXPECT_EQ(majorexp, major);\n+    EXPECT_EQ(minorexp, minor);\n+  };\n+\n+  \/\/ Expected\n+  test(\"2.6\", 2, 6);\n+  test(\"2.6.1\", 2, 6);\n+  \/\/ Unexpected\n+  test(\"abc\", -1, -1);\n+  test(\"2.\", 2, -1);\n+  test(\"a.5\", 5, -1);\n+}\n+\n+\n+#endif \/\/ LINUX\n","filename":"test\/hotspot\/gtest\/os\/linux\/test_os_linux.cpp","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}