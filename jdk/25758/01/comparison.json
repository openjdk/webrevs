{"files":[{"patch":"@@ -141,0 +141,1 @@\n+            hashCode = -1; \/\/ Force recalculation\n@@ -444,0 +445,1 @@\n+\n@@ -450,0 +452,1 @@\n+        hashCode = -1;\n@@ -465,0 +468,1 @@\n+\n@@ -469,0 +473,1 @@\n+        hashCode = -1;\n@@ -488,0 +493,1 @@\n+        hashCode = -1;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/ImmutableDescriptor.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8358624\n+ * @summary Test ImmutableDescriptor hashcode and serialization\n+ *\n+ * @run main ImmutableDescriptorSerialHashCodeTest\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import javax.management.Descriptor;\n+import javax.management.ImmutableDescriptor;\n+\n+public class ImmutableDescriptorSerialHashCodeTest {\n+    public static void main(String[] args) throws Exception {\n+\n+        Descriptor d1 = new ImmutableDescriptor(\"a=aval\", \"B=Bval\", \"cC=cCval\");\n+        Descriptor d2 = new ImmutableDescriptor(\"a=aval\", \"B=Bval\", \"cC=cCval\");\n+\n+        test (d1, d2, \"Objects created from same String\"); \/\/ Sanity check\n+        Descriptor dSer = serialize(d1);\n+        test(d1, dSer, \"After serialization\"); \/\/ Actual test\n+        System.out.println(\"PASSED\");\n+    }\n+\n+    \/**\n+      * Test that two Descriptor objects are both equal, and have equal hashcodes.\n+      *\/\n+    private static void test(Descriptor d1, Descriptor d2, String msg) throws Exception {\n+        if (!d1.equals(d2)) {\n+            throw new RuntimeException(msg + \": Descriptors not equal: \" +\n+                    \"\\nd1: \" + d1 +\n+                    \"\\nd2: \" + d2);\n+        }\n+        if (d1.hashCode() != d2.hashCode()) {\n+            throw new RuntimeException(msg + \": Hash code mismatch.  hash1: \" + d1.hashCode()\n+                                + \", hash2: \" + d2.hashCode());\n+        }\n+    }\n+\n+    private static <T> T serialize(T x) throws Exception {\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ObjectOutputStream oout = new ObjectOutputStream(bout);\n+        oout.writeObject(x);\n+        oout.close();\n+        byte[] bytes = bout.toByteArray();\n+        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n+        ObjectInputStream oin = new ObjectInputStream(bin);\n+        return (T) oin.readObject();\n+    }\n+}\n","filename":"test\/jdk\/javax\/management\/descriptor\/ImmutableDescriptorSerialHashCodeTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}