{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -523,1 +523,1 @@\n-    private static boolean versionMatches(Integer v1, Integer v2) {\n+    public static boolean versionMatches(Integer v1, Integer v2) {\n@@ -579,1 +579,1 @@\n-                        return new EncryptionKey(etype, keys[i].getBytes());\n+                        return new EncryptionKey(keys[i].getBytes(), etype, kv);\n@@ -581,1 +581,1 @@\n-                        key_found = new EncryptionKey(etype, keys[i].getBytes());\n+                        key_found = new EncryptionKey(keys[i].getBytes(), etype, kv);\n@@ -588,0 +588,3 @@\n+            if (DEBUG != null) {\n+                DEBUG.println(\"Returned kvno \" + key_found.kvno + \", wanted\" + kvno);\n+            }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/EncryptionKey.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -282,2 +282,15 @@\n-        byte[] bytes = apReqMessg.ticket.encPart.decrypt(dkey,\n-            KeyUsage.KU_TICKET);\n+        byte[] bytes;\n+        try {\n+            bytes = apReqMessg.ticket.encPart.decrypt(dkey, KeyUsage.KU_TICKET);\n+        } catch (KrbException ke) {\n+            \/\/ When EncryptedData::decrypt and the key kvno does not match,\n+            \/\/ throw a different exception.\n+            if (!EncryptionKey.versionMatches(dkey.getKeyVersionNumber(), kvno)) {\n+                var ke2 = new KrbApErrException(Krb5.KRB_AP_ERR_BADKEYVER);\n+                ke2.initCause(ke);\n+                throw ke2;\n+            } else {\n+                throw ke;\n+            }\n+        }\n+\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbApReq.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7197159 8194486\n+ * @bug 7197159 8194486 8367344\n@@ -32,0 +32,2 @@\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts KvnoNA des-cbc-md5\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts KvnoNA des-cbc-crc\n@@ -34,0 +36,1 @@\n+import jdk.test.lib.Asserts;\n@@ -36,0 +39,1 @@\n+import sun.security.krb5.Config;\n@@ -41,0 +45,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+\n@@ -43,2 +51,1 @@\n-    public static void main(String[] args)\n-            throws Exception {\n+    static void prepareKtabs(boolean testDES) throws Exception {\n@@ -46,2 +53,15 @@\n-        OneKDC kdc = new OneKDC(null);\n-        kdc.writeJAASConf();\n+        \/\/ Setup a temporary krb5.conf so we can generate ktab files\n+        \/\/ using the preferred etypes.\n+        if (testDES) {\n+            \/\/ When DES is used, we always write des-cbc-crc keys.\n+            \/\/ They should also be used by des-cbc-md5.\n+            Files.writeString(Path.of(\"temp.conf\"), \"\"\"\n+                    [libdefaults]\n+                    permitted_enctypes=des-cbc-crc\n+                    allow_weak_crypto = true\n+                    \"\"\");\n+        } else {\n+            Files.writeString(Path.of(\"temp.conf\"), \"\"\"\n+                    [libdefaults]\n+                    \"\"\");\n+        }\n@@ -49,3 +69,2 @@\n-        \/\/ In KDC, it's 2\n-        char[] pass = \"pass2\".toCharArray();\n-        kdc.addPrincipal(OneKDC.SERVER, pass);\n+        System.setProperty(\"java.security.krb5.conf\", \"temp.conf\");\n+        Config.refresh();\n@@ -53,2 +72,0 @@\n-        \/\/ In ktab, kvno is 1 or 3, 3 has the same password\n-        KeyTab ktab = KeyTab.create(OneKDC.KTAB);\n@@ -56,2 +73,14 @@\n-            OneKDC.SERVER+\"@\"+OneKDC.REALM, PrincipalName.KRB_NT_SRV_HST);\n-        ktab.addEntry(p, \"pass1\".toCharArray(), 1, true);\n+                OneKDC.BACKEND + \"@\" + OneKDC.REALM, PrincipalName.KRB_NT_SRV_HST);\n+\n+        \/\/ Case 1, kvno 2 has the same password\n+        KeyTab ktab = KeyTab.create(\"good2\");\n+        ktab.addEntry(p, \"pass2\".toCharArray(), 2, true);\n+        ktab.save();\n+\n+        \/\/ Case 2, kvno 2 has a different password\n+        ktab = KeyTab.create(\"bad2\");\n+        ktab.addEntry(p, \"pass3\".toCharArray(), 2, true);\n+        ktab.save();\n+\n+        \/\/ Case 3 (7197159), No kvno 2, kvno 3 has the same password\n+        ktab = KeyTab.create(\"good3\");\n@@ -61,1 +90,38 @@\n-        Context c, s;\n+        \/\/ Case 4 (8367344), No kvno 2, kvno 3 has a different password\n+        ktab = KeyTab.create(\"bad3\");\n+        ktab.addEntry(p, \"pass3\".toCharArray(), 3, true);\n+        ktab.save();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        OneKDC kdc;\n+        if (args.length > 0) { \/\/ DES ones\n+            prepareKtabs(true);\n+            kdc = new OneKDC(args[0]);\n+        } else {\n+            prepareKtabs(false);\n+            kdc = new OneKDC(null);\n+        }\n+        kdc.writeJAASConf();\n+\n+        \/\/ Use backend as server because its isInitiator is false,\n+        \/\/ therefore no login failure. In KDC, kvno is 2.\n+        kdc.addPrincipal(OneKDC.BACKEND, \"pass2\".toCharArray());\n+\n+        \/\/ Case1, succeed\n+        check(\"good2\");\n+\n+        \/\/ Case 2, fails but without KRB_AP_ERR_BADKEYVER\n+        Asserts.assertTrue(!(Asserts.assertThrows(GSSException.class, () -> check(\"bad2\"))\n+                .getCause() instanceof KrbException ke)\n+                || ke.returnCode() != Krb5.KRB_AP_ERR_BADKEYVER);\n+\n+        \/\/ Case 3, succeed\n+        check(\"good3\");\n+\n+        \/\/ Case 4, fails with KRB_AP_ERR_BADKEYVER\n+        Asserts.assertTrue(Asserts.assertThrows(GSSException.class, () -> check(\"bad3\"))\n+                .getCause() instanceof KrbException ke\n+                && ke.returnCode() == Krb5.KRB_AP_ERR_BADKEYVER);\n+    }\n@@ -63,2 +129,3 @@\n-        c = Context.fromUserPass(\"dummy\", \"bogus\".toCharArray(), false);\n-        s = Context.fromJAAS(\"server\");\n+    static void check(String ktab) throws Exception {\n+        Files.copy(Path.of(ktab), Path.of(OneKDC.KTAB),\n+                StandardCopyOption.REPLACE_EXISTING);\n@@ -66,2 +133,2 @@\n-        c.startAsClient(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n-        s.startAsServer(GSSUtil.GSS_KRB5_MECH_OID);\n+        Context c = Context.fromUserPass(\"dummy\", \"bogus\".toCharArray(), false);\n+        Context s = Context.fromJAAS(\"backend\");\n@@ -69,1 +136,3 @@\n-        Context.handshake(c, s);\n+        try {\n+            c.startAsClient(OneKDC.BACKEND, GSSUtil.GSS_KRB5_MECH_OID);\n+            s.startAsServer(GSSUtil.GSS_KRB5_MECH_OID);\n@@ -71,2 +140,5 @@\n-        s.dispose();\n-        c.dispose();\n+            Context.handshake(c, s);\n+        } finally {\n+            s.dispose();\n+            c.dispose();\n+        }\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KvnoNA.java","additions":93,"deletions":21,"binary":false,"changes":114,"status":"modified"}]}