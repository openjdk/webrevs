{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -523,1 +523,1 @@\n-    private static boolean versionMatches(Integer v1, Integer v2) {\n+    public static boolean versionMatches(Integer v1, Integer v2) {\n@@ -579,1 +579,1 @@\n-                        return new EncryptionKey(etype, keys[i].getBytes());\n+                        return new EncryptionKey(keys[i].getBytes(), etype, kv);\n@@ -581,1 +581,1 @@\n-                        key_found = new EncryptionKey(etype, keys[i].getBytes());\n+                        key_found = new EncryptionKey(keys[i].getBytes(), etype, kv);\n@@ -588,0 +588,3 @@\n+            if (DEBUG != null) {\n+                DEBUG.println(\"Returned kvno \" + key_found.kvno + \", wanted\" + kvno);\n+            }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/EncryptionKey.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -282,2 +282,15 @@\n-        byte[] bytes = apReqMessg.ticket.encPart.decrypt(dkey,\n-            KeyUsage.KU_TICKET);\n+        byte[] bytes;\n+        try {\n+            bytes = apReqMessg.ticket.encPart.decrypt(dkey, KeyUsage.KU_TICKET);\n+        } catch (KrbCryptoException ke) {\n+            \/\/ When etypeEngine.decrypt fails inside EncryptedData::decrypt,\n+            \/\/ and the key kvno does not match, throw a different exception.\n+            if (!EncryptionKey.versionMatches(dkey.getKeyVersionNumber(), kvno)) {\n+                var ke2 = new KrbApErrException(Krb5.KRB_AP_ERR_BADKEYVER);\n+                ke2.initCause(ke);\n+                throw ke2;\n+            } else {\n+                throw ke;\n+            }\n+        }\n+\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbApReq.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7197159 8194486\n+ * @bug 7197159 8194486 8367344\n@@ -34,0 +34,1 @@\n+import jdk.test.lib.Asserts;\n@@ -49,3 +50,3 @@\n-        \/\/ In KDC, it's 2\n-        char[] pass = \"pass2\".toCharArray();\n-        kdc.addPrincipal(OneKDC.SERVER, pass);\n+        \/\/ Use backend as server because its isInitiator is false,\n+        \/\/ therefore no login failure. In KDC, kvno is 2.\n+        kdc.addPrincipal(OneKDC.BACKEND, \"pass2\".toCharArray());\n@@ -53,1 +54,1 @@\n-        \/\/ In ktab, kvno is 1 or 3, 3 has the same password\n+        \/\/ Rewrite a keytab which might contain different keys from KDC\n@@ -56,1 +57,1 @@\n-            OneKDC.SERVER+\"@\"+OneKDC.REALM, PrincipalName.KRB_NT_SRV_HST);\n+                OneKDC.BACKEND + \"@\" + OneKDC.REALM, PrincipalName.KRB_NT_SRV_HST);\n@@ -58,0 +59,16 @@\n+\n+        \/\/ Usual case, kvno 2 has the same password\n+        ktab.addEntry(p, \"pass2\".toCharArray(), 2, true);\n+        ktab.save();\n+        check();\n+\n+        \/\/ Usual case, kvno 2 has a different password\n+        ktab.deleteEntries(p, -1, 2);\n+        ktab.addEntry(p, \"pass3\".toCharArray(), 2, true);\n+        ktab.save();\n+        Asserts.assertTrue(\n+                Asserts.assertThrows(GSSException.class, KvnoNA::check)\n+                                .getMessage().contains(\"Checksum failed\"));\n+\n+        \/\/ 7197159: No kvno 2, kvno 3 has the same password\n+        ktab.deleteEntries(p, -1, 2);\n@@ -60,0 +77,10 @@\n+        check();\n+\n+        \/\/ 8367344: No kvno 2, kvno 3 has a different password\n+        ktab.deleteEntries(p, -1, 3);\n+        ktab.addEntry(p, \"pass3\".toCharArray(), 3, true);\n+        ktab.save();\n+        Asserts.assertTrue(Asserts.assertThrows(GSSException.class, KvnoNA::check)\n+                .getCause() instanceof KrbException ke\n+                && ke.returnCode() == Krb5.KRB_AP_ERR_BADKEYVER);\n+    }\n@@ -61,0 +88,1 @@\n+    static void check() throws Exception {\n@@ -64,1 +92,1 @@\n-        s = Context.fromJAAS(\"server\");\n+        s = Context.fromJAAS(\"backend\");\n@@ -66,1 +94,1 @@\n-        c.startAsClient(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n+        c.startAsClient(OneKDC.BACKEND, GSSUtil.GSS_KRB5_MECH_OID);\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KvnoNA.java","additions":37,"deletions":9,"binary":false,"changes":46,"status":"modified"}]}