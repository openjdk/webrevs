{"files":[{"patch":"@@ -285,3 +285,3 @@\n-        } catch (KrbCryptoException ke) {\n-            \/\/ When etypeEngine.decrypt fails inside EncryptedData::decrypt,\n-            \/\/ and the key kvno does not match, throw a different exception.\n+        } catch (KrbException ke) {\n+            \/\/ When EncryptedData::decrypt and the key kvno does not match,\n+            \/\/ throw a different exception.\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbApReq.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts KvnoNA des-cbc-md5\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts KvnoNA des-cbc-crc\n@@ -37,0 +39,1 @@\n+import sun.security.krb5.Config;\n@@ -42,4 +45,3 @@\n-public class KvnoNA {\n-\n-    public static void main(String[] args)\n-            throws Exception {\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n@@ -47,2 +49,1 @@\n-        OneKDC kdc = new OneKDC(null);\n-        kdc.writeJAASConf();\n+public class KvnoNA {\n@@ -50,3 +51,20 @@\n-        \/\/ Use backend as server because its isInitiator is false,\n-        \/\/ therefore no login failure. In KDC, kvno is 2.\n-        kdc.addPrincipal(OneKDC.BACKEND, \"pass2\".toCharArray());\n+    static void prepareKtabs(boolean testDES) throws Exception {\n+\n+        \/\/ Setup a temporary krb5.conf so we can generate ktab files\n+        \/\/ using the preferred etypes.\n+        if (testDES) {\n+            \/\/ When DES is used, we always write des-cbc-crc keys.\n+            \/\/ They should also be used by des-cbc-md5.\n+            Files.writeString(Path.of(\"temp.conf\"), \"\"\"\n+                    [libdefaults]\n+                    permitted_enctypes=des-cbc-crc\n+                    allow_weak_crypto = true\n+                    \"\"\");\n+        } else {\n+            Files.writeString(Path.of(\"temp.conf\"), \"\"\"\n+                    [libdefaults]\n+                    \"\"\");\n+        }\n+\n+        System.setProperty(\"java.security.krb5.conf\", \"temp.conf\");\n+        Config.refresh();\n@@ -54,2 +72,0 @@\n-        \/\/ Rewrite a keytab which might contain different keys from KDC\n-        KeyTab ktab = KeyTab.create(OneKDC.KTAB);\n@@ -58,1 +74,0 @@\n-        ktab.addEntry(p, \"pass1\".toCharArray(), 1, true);\n@@ -60,1 +75,2 @@\n-        \/\/ Usual case, kvno 2 has the same password\n+        \/\/ Case 1, kvno 2 has the same password\n+        KeyTab ktab = KeyTab.create(\"good2\");\n@@ -63,1 +79,0 @@\n-        check();\n@@ -65,2 +80,2 @@\n-        \/\/ Usual case, kvno 2 has a different password\n-        ktab.deleteEntries(p, -1, 2);\n+        \/\/ Case 2, kvno 2 has a different password\n+        ktab = KeyTab.create(\"bad2\");\n@@ -69,3 +84,0 @@\n-        Asserts.assertTrue(\n-                Asserts.assertThrows(GSSException.class, KvnoNA::check)\n-                                .getMessage().contains(\"Checksum failed\"));\n@@ -73,2 +85,2 @@\n-        \/\/ 7197159: No kvno 2, kvno 3 has the same password\n-        ktab.deleteEntries(p, -1, 2);\n+        \/\/ Case 3 (7197159), No kvno 2, kvno 3 has the same password\n+        ktab = KeyTab.create(\"good3\");\n@@ -77,1 +89,0 @@\n-        check();\n@@ -79,2 +90,2 @@\n-        \/\/ 8367344: No kvno 2, kvno 3 has a different password\n-        ktab.deleteEntries(p, -1, 3);\n+        \/\/ Case 4 (8367344), No kvno 2, kvno 3 has a different password\n+        ktab = KeyTab.create(\"bad3\");\n@@ -83,1 +94,31 @@\n-        Asserts.assertTrue(Asserts.assertThrows(GSSException.class, KvnoNA::check)\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        OneKDC kdc;\n+        if (args.length > 0) { \/\/ DES ones\n+            prepareKtabs(true);\n+            kdc = new OneKDC(args[0]);\n+        } else {\n+            prepareKtabs(false);\n+            kdc = new OneKDC(null);\n+        }\n+        kdc.writeJAASConf();\n+\n+        \/\/ Use backend as server because its isInitiator is false,\n+        \/\/ therefore no login failure. In KDC, kvno is 2.\n+        kdc.addPrincipal(OneKDC.BACKEND, \"pass2\".toCharArray());\n+\n+        \/\/ Case1, succeed\n+        check(\"good2\");\n+\n+        \/\/ Case 2, fails but without KRB_AP_ERR_BADKEYVER\n+        Asserts.assertTrue(!(Asserts.assertThrows(GSSException.class, () -> check(\"bad2\"))\n+                .getCause() instanceof KrbException ke)\n+                || ke.returnCode() != Krb5.KRB_AP_ERR_BADKEYVER);\n+\n+        \/\/ Case 3, succeed\n+        check(\"good3\");\n+\n+        \/\/ Case 4, fails with KRB_AP_ERR_BADKEYVER\n+        Asserts.assertTrue(Asserts.assertThrows(GSSException.class, () -> check(\"bad3\"))\n@@ -88,5 +129,3 @@\n-    static void check() throws Exception {\n-        Context c, s;\n-\n-        c = Context.fromUserPass(\"dummy\", \"bogus\".toCharArray(), false);\n-        s = Context.fromJAAS(\"backend\");\n+    static void check(String ktab) throws Exception {\n+        Files.copy(Path.of(ktab), Path.of(OneKDC.KTAB),\n+                StandardCopyOption.REPLACE_EXISTING);\n@@ -94,2 +133,2 @@\n-        c.startAsClient(OneKDC.BACKEND, GSSUtil.GSS_KRB5_MECH_OID);\n-        s.startAsServer(GSSUtil.GSS_KRB5_MECH_OID);\n+        Context c = Context.fromUserPass(\"dummy\", \"bogus\".toCharArray(), false);\n+        Context s = Context.fromJAAS(\"backend\");\n@@ -97,1 +136,3 @@\n-        Context.handshake(c, s);\n+        try {\n+            c.startAsClient(OneKDC.BACKEND, GSSUtil.GSS_KRB5_MECH_OID);\n+            s.startAsServer(GSSUtil.GSS_KRB5_MECH_OID);\n@@ -99,2 +140,5 @@\n-        s.dispose();\n-        c.dispose();\n+            Context.handshake(c, s);\n+        } finally {\n+            s.dispose();\n+            c.dispose();\n+        }\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KvnoNA.java","additions":79,"deletions":35,"binary":false,"changes":114,"status":"modified"}]}