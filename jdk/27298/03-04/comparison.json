{"files":[{"patch":"@@ -55,1 +55,1 @@\n-        \/\/ Setup a temporary krb5.conf so we can generate ktab files\n+        \/\/ Set up a temporary krb5.conf so we can generate ktab files\n@@ -81,1 +81,1 @@\n-                OneKDC.BACKEND + \"@\" + OneKDC.REALM, PrincipalName.KRB_NT_SRV_HST);\n+                OneKDC.SERVER + \"@\" + OneKDC.REALM, PrincipalName.KRB_NT_SRV_HST);\n@@ -110,1 +110,0 @@\n-        kdc.writeJAASConf();\n@@ -112,3 +111,2 @@\n-        \/\/ Use backend as server because its isInitiator is false,\n-        \/\/ therefore no login failure. In KDC, kvno is 2.\n-        kdc.addPrincipal(OneKDC.BACKEND, \"pass2\".toCharArray());\n+        \/\/ In KDC, kvno is 2.\n+        kdc.addPrincipal(OneKDC.SERVER, \"pass2\".toCharArray());\n@@ -120,3 +118,3 @@\n-        Asserts.assertTrue(!(Asserts.assertThrows(GSSException.class, () -> check(\"bad2\"))\n-                .getCause() instanceof KrbException ke)\n-                || ke.returnCode() != Krb5.KRB_AP_ERR_BADKEYVER);\n+        var e = Asserts.assertThrows(GSSException.class, () -> check(\"bad2\"));\n+        Asserts.assertTrue(!(e.getCause() instanceof KrbException ke)\n+                || ke.returnCode() != Krb5.KRB_AP_ERR_BADKEYVER, e.toString());\n@@ -128,3 +126,3 @@\n-        Asserts.assertTrue(Asserts.assertThrows(GSSException.class, () -> check(\"bad3\"))\n-                .getCause() instanceof KrbException ke\n-                && ke.returnCode() == Krb5.KRB_AP_ERR_BADKEYVER);\n+        e = Asserts.assertThrows(GSSException.class, () -> check(\"bad3\"));\n+        Asserts.assertTrue(e.getCause() instanceof KrbException ke\n+                && ke.returnCode() == Krb5.KRB_AP_ERR_BADKEYVER, e.toString());\n@@ -134,2 +132,0 @@\n-        Files.copy(Path.of(ktab), Path.of(OneKDC.KTAB),\n-                StandardCopyOption.REPLACE_EXISTING);\n@@ -137,2 +133,2 @@\n-        Context c = Context.fromUserPass(\"dummy\", \"bogus\".toCharArray(), false);\n-        Context s = Context.fromJAAS(\"backend\");\n+        Context c = Context.fromUserPass(OneKDC.USER, OneKDC.PASS, false);\n+        Context s = Context.fromUserKtab(OneKDC.SERVER, ktab, true);\n@@ -141,1 +137,1 @@\n-            c.startAsClient(OneKDC.BACKEND, GSSUtil.GSS_KRB5_MECH_OID);\n+            c.startAsClient(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KvnoNA.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"}]}