{"files":[{"patch":"@@ -61,1 +61,1 @@\n-            e.printStackTrace();\n+            throw new RuntimeException();\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/FileProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-     * @param selfClosing whether or not the tag is self-closing\n+     * @param selfClosing whether the tag is self-closing\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/HtmlChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    public void close() throws IOException {\n+    public void close() {\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/BadCharacterChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    public void close() throws IOException {\n+    public void close() {\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/DocTypeChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+    private static final String currentVersion = String.valueOf(Runtime.version().feature());\n+\n@@ -54,1 +56,0 @@\n-                .map(line -> line.replaceAll(\"\\\\@\\\\@JAVASE_VERSION\\\\@\\\\@\", String.valueOf(Runtime.version().feature())))\n@@ -56,0 +57,1 @@\n+                .map(line -> line.replaceAll(\"\\\\@\\\\@JAVASE_VERSION\\\\@\\\\@\", currentVersion))\n@@ -110,1 +112,1 @@\n-            \/\/ You cannot create a URI unless you convert the second hash character into\n+            \/\/ You cannot create a URI unless the second hash is escaped.\n@@ -152,1 +154,1 @@\n-    public void close() throws IOException {\n+    public void close() {\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/ExtLinkChecker.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-            anchors += t.map.values().stream()\n+            anchors += (int) t.map.values().stream()\n@@ -157,1 +157,1 @@\n-            anchors += t.map.values().stream()\n+            anchors += (int) t.map.values().stream()\n@@ -230,1 +230,1 @@\n-    public void close() throws IOException {\n+    public void close() {\n@@ -251,1 +251,1 @@\n-            \/\/ You cannot create a URI unless you convert the second hash character into\n+            \/\/ You cannot create a URI unless the second hash is escaped.\n@@ -367,28 +367,0 @@\n-    static class URIComparator implements Comparator<URI> {\n-        final HostComparator hostComparator = new HostComparator();\n-\n-        @Override\n-        public int compare(URI o1, URI o2) {\n-            if (o1.isOpaque() || o2.isOpaque()) {\n-                return o1.compareTo(o2);\n-            }\n-            String h1 = o1.getHost();\n-            String h2 = o2.getHost();\n-            String s1 = o1.getScheme();\n-            String s2 = o2.getScheme();\n-            if (h1 == null || h1.isEmpty() || s1 == null || s1.isEmpty()\n-                    || h2 == null || h2.isEmpty() || s2 == null || s2.isEmpty()) {\n-                return o1.compareTo(o2);\n-            }\n-            int v = hostComparator.compare(h1, h2);\n-            if (v != 0) {\n-                return v;\n-            }\n-            v = s1.compareTo(s2);\n-            if (v != 0) {\n-                return v;\n-            }\n-            return o1.compareTo(o2);\n-        }\n-    }\n-\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/LinkChecker.java","additions":4,"deletions":32,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.text.MessageFormat;\n@@ -45,6 +44,6 @@\n-    Map<Pattern, Integer> counts = new HashMap<>();\n-    Pattern okPattern = Pattern.compile(\"No warnings or errors were found.\");\n-    Pattern countPattern = Pattern.compile(\"([0-9]+) warnings, ([0-9]+) errors were found!.*?(Not all warnings\/errors were shown.)?\");\n-    Pattern countPattern2 = Pattern.compile(\"Tidy found ([0-9]+) warning[s]? and ([0-9]+) error[s]?!.*?(Not all warnings\/errors were shown.)?\");\n-    Pattern cssPattern = Pattern.compile(\"You are recommended to use CSS.*\");\n-    Pattern guardPattern = Pattern.compile(\"(line [0-9]+ column [0-9]+ - |[^:]+:[0-9]+:[0-9]+: )(Error|Warning):.*\");\n+    final Map<Pattern, Integer> counts = new HashMap<>();\n+    final Pattern okPattern = Pattern.compile(\"No warnings or errors were found.\");\n+    final Pattern countPattern = Pattern.compile(\"([0-9]+) warnings, ([0-9]+) errors were found!.*?(Not all warnings\/errors were shown.)?\");\n+    final Pattern countPattern2 = Pattern.compile(\"Tidy found ([0-9]+) warning[s]? and ([0-9]+) error[s]?!.*?(Not all warnings\/errors were shown.)?\");\n+    final Pattern cssPattern = Pattern.compile(\"You are recommended to use CSS.*\");\n+    final Pattern guardPattern = Pattern.compile(\"(line [0-9]+ column [0-9]+ - |[^:]+:[0-9]+:[0-9]+: )(Error|Warning):.*\");\n@@ -52,1 +51,1 @@\n-    Pattern[] patterns = {\n+    final Pattern[] patterns = {\n@@ -138,1 +137,1 @@\n-            e.printStackTrace();\n+            throw new RuntimeException();\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/TidyChecker.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}