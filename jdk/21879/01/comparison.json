{"files":[{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @library \/test\/lib ..\/..\/tools\/tester\n- * @build jtreg.SkippedException\n- * @summary example of a test on the generated documentation\n- * @run main TestDocs\n- *\/\n-\n-import java.nio.file.Files;\n-\n-public class TestDocs {\n-    public static void main(String... args) throws Exception {\n-        var docs = DocTester.resolveDocs();\n-        System.err.println(\"Path to the docs is: \" + docs);\n-        System.err.println(\"Do docs exits?\");\n-        System.err.println(Files.exists(docs));\n-        System.err.println(\"tidy location\");\n-        System.err.println(System.getProperty(\"tidy\"));\n-        System.err.println(\"End of test\");\n-    }\n-}\n","filename":"test\/docs\/jdk\/javadoc\/TestDocs.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import doccheckutils.FileChecker;\n+import doccheckutils.FileProcessor;\n+import doccheckutils.HtmlFileChecker;\n+import doccheckutils.checkers.BadCharacterChecker;\n+import doccheckutils.checkers.DocTypeChecker;\n+import doccheckutils.checkers.LinkChecker;\n+import doccheckutils.checkers.TidyChecker;\n+import doccheckutils.checkers.ExtLinkChecker;\n+import toolbox.TestRunner;\n+\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+\/**\n+ * DocCheck\n+ * <p>\n+ * For the sake of brefity, to run all of these checkers use\n+ * <p>\n+ * `make test-docs_all TEST_DEPS=docs-jdk`\n+ * <p>\n+ * This collection of tests provide a variety of checks for JDK documentation bundle.\n+ * <p>\n+ * It is meant to provide a convenient way to alert users of any errors in their documentation\n+ * before a push and verify the quality of the documentation.\n+ * It is not meant to replace more authoritative checkers; instead,\n+ * it is more focused on providing a convenient, easy overview of any possible issues.\n+ * <p>\n+ * It supports the following checks:\n+ * <p>\n+ * *HTML* -- We use the standard `tidy` utility to check for HTML compliance,\n+ * according to the declared version of HTML.\n+ * The output from `tidy` is analysed to generate a report summarizing any issues that were found.\n+ * <p>\n+ * Version `5.9.20` of `tidy` is expected, or the output from the `--version` option should contain the string `version 5`.\n+ * The test warns the user if he is using an earlier version.\n+ * <p>\n+ * *Bad Characters* -- We assumee that HTML files are encoded in UTF-8,\n+ * and reports any character encoding issues that it finds.\n+ * <p>\n+ * *DocType* --  We assume that HTML files should use HTML5, and reports\n+ * any files for which that is not the case.\n+ * <p>\n+ * *Links* -- We check links within a set of files, and reports on links\n+ * to external resources, without otherwise checking them.\n+ * <p>\n+ *  TODO (not yet added)\n+ *  *External Links* -- We scan the files for URLs that refer to\n+ *     external resources, and validates those references using a \"golden file\" that includes a list of vetted links.\n+ * <p>\n+ * Each external reference is only checked once; but if an issue is found, all the files containing the\n+ * reference will be reported.\n+ *\/\n+public class DocCheck extends TestRunner {\n+    private static final Path DIR = Path.of(System.getProperty(\"doccheck.dir\"));\n+    private static final Set<String> CHECKS_LIST = new HashSet<>();\n+    private static Path DOCS_DIR;\n+\n+    private static boolean html;\n+    private static boolean links;\n+    private static boolean badchars;\n+    private static boolean doctype;\n+\n+    private List<Path> files;\n+\n+    public DocCheck() {\n+        super(System.err);\n+        init();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        chooseCheckers();\n+        DocCheck docCheck = new DocCheck();\n+        docCheck.runTests();\n+    }\n+\n+    private static void chooseCheckers() {\n+        final String checks = System.getProperty(\"doccheck.checks\");\n+\n+        if (!checks.isEmpty()) {\n+            if (checks.contains(\",\")) {\n+                CHECKS_LIST.addAll(Arrays.asList(checks.split(\",\")));\n+            } else {\n+                CHECKS_LIST.add(checks);\n+            }\n+        }\n+\n+        if (CHECKS_LIST.contains(\"all\")) {\n+            html = true;\n+            links = true;\n+            badchars = true;\n+            doctype = true;\n+        } else {\n+            if (CHECKS_LIST.contains(\"html\")) {\n+                html = true;\n+            }\n+            if (CHECKS_LIST.contains(\"links\")) {\n+                links = true;\n+            }\n+            if (CHECKS_LIST.contains(\"badchars\")) {\n+                badchars = true;\n+            }\n+            if (CHECKS_LIST.contains(\"doctype\")) {\n+                doctype = true;\n+            }\n+        }\n+    }\n+\n+    public void init() {\n+        var fileTester = new FileProcessor();\n+        DOCS_DIR = DocTester.resolveDocs();\n+        var baseDir = DOCS_DIR.resolve(DIR);\n+        fileTester.processFiles(baseDir);\n+        files = fileTester.getFiles();\n+    }\n+\n+    public List<FileChecker> getCheckers() {\n+\n+        List<FileChecker> checkers = new ArrayList<>();\n+        if (html) {\n+            checkers.add(new TidyChecker());\n+        }\n+        if (links) {\n+            var linkChecker = new LinkChecker();\n+            linkChecker.setBaseDir(DOCS_DIR);\n+            checkers.add(new HtmlFileChecker(linkChecker, DOCS_DIR));\n+        }\n+\n+        \/\/ there should be almost nothing reported from these two checkers\n+        \/\/ most reports should be broken anchors\/links, missing files and errors in html\n+        if (badchars) {\n+            checkers.add(new BadCharacterChecker());\n+        }\n+        if (doctype) {\n+            checkers.add(new HtmlFileChecker(new DocTypeChecker(), DOCS_DIR));\n+        }\n+\n+\/\/        if (extlinks) {\n+\/\/            checkers.add(new HtmlFileChecker(new ExtLinkChecker(), DOCS_DIR));\n+\/\/        }\n+\n+        return checkers;\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+        List<FileChecker> checkers = getCheckers();\n+        runCheckersSequentially(checkers);\n+    }\n+\n+    private void runCheckersSequentially(List<FileChecker> checkers) throws Exception {\n+        List<Throwable> exceptions = new ArrayList<>();\n+\n+        for (FileChecker checker : checkers) {\n+            try (checker) {\n+                checker.checkFiles(files);\n+            } catch (Exception e) {\n+                exceptions.add(e);\n+            }\n+        }\n+\n+        if (!exceptions.isEmpty()) {\n+            throw new Exception(\"One or more HTML checkers failed: \" + exceptions);\n+        }\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/DocCheck.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -0,0 +1,756 @@\n+ftp:\/\/ftp.pwg.org\/pub\/pwg\/standards\/temp_archive\/pwg5100.3.pdf\n+http:\/\/cldr.unicode.org\/\n+http:\/\/csrc.nist.gov\/publications\/fips\/fips186-3\/fips_186-3.pdf\n+http:\/\/csrc.nist.gov\/publications\/nistpubs\/800-38D\/SP-800-38D.pdf\n+http:\/\/docs.oracle.com\/javase\/feedback.html\n+http:\/\/docs.oracle.com\/javase\/jndi\/tutorial\/index.html\n+http:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-12.html\n+http:\/\/docs.oracle.com\/javase\/tutorial\/collections\/index.html\n+http:\/\/docs.oracle.com\/javase\/tutorial\/i18n\/format\/decimalFormat.html\n+http:\/\/docs.oracle.com\/javase\/tutorial\/i18n\/format\/simpleDateFormat.html\n+http:\/\/docs.oracle.com\/javase\/tutorial\/jdbc\/\n+http:\/\/docs.oracle.com\/javase\/tutorial\/jdbc\/basics\/index.html\n+http:\/\/docs.oracle.com\/javase\/tutorial\/jdbc\/basics\/rowset.html\n+http:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/dnd\/index.html\n+http:\/\/en.wikipedia.org\/wiki\/Skip_list\n+http:\/\/jclark.com\/xml\/xmlns.htm\n+http:\/\/jcp.org\/en\/jsr\/detail?id=173\n+http:\/\/jcp.org\/en\/jsr\/detail?id=268\n+http:\/\/relaxng.org\/spec-20011203.html\n+http:\/\/sax.sourceforge.net\/?selected=get-set\n+http:\/\/standards.iso.org\/iso\/9075\/2002\/12\/sqlxml.xsd\n+http:\/\/svn.python.org\/projects\/python\/trunk\/Objects\/listsort.txt\n+http:\/\/tools.ietf.org\/html\/rfc1421\n+http:\/\/tools.ietf.org\/html\/rfc5869\n+http:\/\/unicode.org\/reports\/tr35\/\n+http:\/\/unicode.org\/reports\/tr35\/tr35-numbers.html\n+http:\/\/web.archive.org\/web\/20051219043731\/http:\/\/archive.ncsa.uiuc.edu\/SDG\/Software\/Mosaic\/Demo\/url-primer.html\n+http:\/\/www.cl.cam.ac.uk\/~mgk25\/time\/utc-sls\/\n+http:\/\/www.cs.rochester.edu\/~scott\/papers\/1996_PODC_queues.pdf\n+http:\/\/www.iana.org\/\n+http:\/\/www.iana.org\/assignments\/character-sets\n+http:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xhtml\n+http:\/\/www.iana.org\/assignments\/media-types\/\n+http:\/\/www.iana.org\/assignments\/uri-schemes.html\n+http:\/\/www.ietf.org\/\n+http:\/\/www.ietf.org\/rfc\/rfc0793.txt\n+http:\/\/www.ietf.org\/rfc\/rfc0822.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1122.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1123.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1323.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1349.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1521.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1522.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1918.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1950.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1950.txt.pdf\n+http:\/\/www.ietf.org\/rfc\/rfc1951.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1951.txt.pdf\n+http:\/\/www.ietf.org\/rfc\/rfc1952.txt\n+http:\/\/www.ietf.org\/rfc\/rfc1952.txt.pdf\n+http:\/\/www.ietf.org\/rfc\/rfc1964.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2045.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2046.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2078.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2104.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2109.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2222.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2236.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2245.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2246.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2251.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2253.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2254.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2255.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2268.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2278.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2279.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2296.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2365.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2373.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2396.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2440.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2474.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2609.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2616.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2696\n+http:\/\/www.ietf.org\/rfc\/rfc2696.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2710.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2732.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2743.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2781.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2782.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2830.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2831.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2853.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2891.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2898.txt\n+http:\/\/www.ietf.org\/rfc\/rfc2965.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3023.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3111.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3275.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3279.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3296.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3330.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3376.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3454.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3490.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3491.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3492.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3530.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3720.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3720.txt.pdf\n+http:\/\/www.ietf.org\/rfc\/rfc3758.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3810.txt\n+http:\/\/www.ietf.org\/rfc\/rfc3986.txt\n+http:\/\/www.ietf.org\/rfc\/rfc4120.txt\n+http:\/\/www.ietf.org\/rfc\/rfc4122.txt\n+http:\/\/www.ietf.org\/rfc\/rfc4366.txt\n+http:\/\/www.ietf.org\/rfc\/rfc4512.txt\n+http:\/\/www.ietf.org\/rfc\/rfc4648.txt\n+http:\/\/www.ietf.org\/rfc\/rfc5116.txt\n+http:\/\/www.ietf.org\/rfc\/rfc5280.txt\n+http:\/\/www.ietf.org\/rfc\/rfc5890.txt\n+http:\/\/www.ietf.org\/rfc\/rfc6066.txt\n+http:\/\/www.ietf.org\/rfc\/rfc7301.txt\n+http:\/\/www.ietf.org\/rfc\/rfc790.txt\n+http:\/\/www.ietf.org\/rfc\/rfc793.txt\n+http:\/\/www.ietf.org\/rfc\/rfc822.txt\n+http:\/\/www.ietf.org\/rfc\/rfc919.txt\n+http:\/\/www.info-zip.org\/doc\/appnote-19970311-iz.zip\n+http:\/\/www.ioplex.com\/utilities\/keytab.txt\n+http:\/\/www.iso.org\/iso\/home\/standards\/currency_codes.htm\n+http:\/\/www.jcp.org\n+http:\/\/www.jcp.org\/en\/jsr\/detail?id=203\n+http:\/\/www.jpeg.org\n+http:\/\/www.libpng.org\/pub\/png\/spec\/\n+http:\/\/www.microsoft.com\/typography\/otspec\/\n+http:\/\/www.midi.org\n+http:\/\/www.oasis-open.org\/committees\/entity\/spec-2001-08-06.html\n+http:\/\/www.oasis-open.org\/committees\/tc_home.php?wg_abbrev=dss\n+http:\/\/www.opengroup.org\n+http:\/\/www.oracle.com\/technetwork\/articles\/java\/mixing-components-433992.html\n+http:\/\/www.oracle.com\/technetwork\/java\/architecture-142923.html\n+http:\/\/www.oracle.com\/technetwork\/java\/javase\/documentation\/serialized-criteria-137781.html\n+http:\/\/www.oracle.com\/technetwork\/java\/javase\/documentation\/spec-136004.html\n+http:\/\/www.oracle.com\/technetwork\/java\/javase\/javasecarootcertsprogram-1876540.html\n+http:\/\/www.oracle.com\/technetwork\/java\/javase\/tech\/javamanagement-140525.html\n+http:\/\/www.oracle.com\/technetwork\/java\/painting-140037.html\n+http:\/\/www.oracle.com\/technetwork\/java\/persistence2-141443.html\n+http:\/\/www.oracle.com\/technetwork\/java\/persistence3-139471.html\n+http:\/\/www.oracle.com\/technetwork\/java\/persistence4-140124.html\n+http:\/\/www.oreilly.com\/catalog\/regex\/\n+http:\/\/www.oreilly.com\/catalog\/regex3\/\n+http:\/\/www.reactive-streams.org\/\n+http:\/\/www.relaxng.org\/\n+http:\/\/www.rfc-editor.org\/rfc\/bcp\/bcp47.txt\n+http:\/\/www.saxproject.org\n+http:\/\/www.saxproject.org\/\n+http:\/\/www.unicode.org\n+http:\/\/www.unicode.org\/\n+http:\/\/www.unicode.org\/glossary\/\n+http:\/\/www.unicode.org\/reports\/tr15\/\n+http:\/\/www.unicode.org\/reports\/tr18\/\n+http:\/\/www.unicode.org\/reports\/tr24\/\n+http:\/\/www.unicode.org\/reports\/tr27\/\n+http:\/\/www.unicode.org\/reports\/tr36\/\n+http:\/\/www.unicode.org\/reports\/tr44\/\n+http:\/\/www.unicode.org\/standard\/standard.html\n+http:\/\/www.w3.org\/2000\/09\/xmldsig\n+http:\/\/www.w3.org\/2000\/xmlns\/\n+http:\/\/www.w3.org\/2001\/04\/xmldsig-more\n+http:\/\/www.w3.org\/2001\/04\/xmlenc\n+http:\/\/www.w3.org\/2001\/05\/xmlschema-errata\n+http:\/\/www.w3.org\/2001\/10\/xml-exc-c14n\n+http:\/\/www.w3.org\/2002\/06\/xmldsig-filter2\n+http:\/\/www.w3.org\/2007\/05\/xmldsig-more\n+http:\/\/www.w3.org\/2009\/xmldsig11\n+http:\/\/www.w3.org\/2021\/04\/xmldsig-more\n+http:\/\/www.w3.org\/Graphics\/GIF\/spec-gif89a.txt\n+http:\/\/www.w3.org\/TR\/1998\/REC-CSS2-19980512\n+http:\/\/www.w3.org\/TR\/1999\/REC-html401-19991224\/\n+http:\/\/www.w3.org\/TR\/1999\/REC-xml-names-19990114\/\n+http:\/\/www.w3.org\/TR\/1999\/REC-xpath-19991116\n+http:\/\/www.w3.org\/TR\/1999\/REC-xslt-19991116\n+http:\/\/www.w3.org\/TR\/2000\/CR-DOM-Level-2-20000510\n+http:\/\/www.w3.org\/TR\/2000\/REC-DOM-Level-2-Core-20001113\n+http:\/\/www.w3.org\/TR\/2000\/REC-DOM-Level-2-Events-20001113\n+http:\/\/www.w3.org\/TR\/2000\/REC-DOM-Level-2-Style-20001113\n+http:\/\/www.w3.org\/TR\/2000\/REC-DOM-Level-2-Traversal-Range-20001113\n+http:\/\/www.w3.org\/TR\/2000\/REC-DOM-Level-2-Views-20001113\n+http:\/\/www.w3.org\/TR\/2001\/REC-xml-c14n-20010315\n+http:\/\/www.w3.org\/TR\/2001\/REC-xmlschema-1-20010502\/\n+http:\/\/www.w3.org\/TR\/2003\/NOTE-DOM-Level-3-Events-20031107\n+http:\/\/www.w3.org\/TR\/2003\/REC-DOM-Level-2-HTML-20030109\n+http:\/\/www.w3.org\/TR\/2003\/REC-SVG11-20030114\/\n+http:\/\/www.w3.org\/TR\/2003\/REC-xptr-framework-20030325\/\n+http:\/\/www.w3.org\/TR\/2004\/REC-DOM-Level-3-Core-20040407\n+http:\/\/www.w3.org\/TR\/2004\/REC-DOM-Level-3-Core-20040407\/core.html\n+http:\/\/www.w3.org\/TR\/2004\/REC-DOM-Level-3-LS-20040407\n+http:\/\/www.w3.org\/TR\/2004\/REC-DOM-Level-3-Val-20040127\/\n+http:\/\/www.w3.org\/TR\/2004\/REC-xml-20040204\n+http:\/\/www.w3.org\/TR\/2004\/REC-xml-infoset-20040204\n+http:\/\/www.w3.org\/TR\/2004\/REC-xml-infoset-20040204\/\n+http:\/\/www.w3.org\/TR\/2004\/REC-xml-names11-20040204\/\n+http:\/\/www.w3.org\/TR\/2004\/REC-xml11-20040204\/\n+http:\/\/www.w3.org\/TR\/DOM-Level-2\n+http:\/\/www.w3.org\/TR\/DOM-Level-2-Core\/\n+http:\/\/www.w3.org\/TR\/DOM-Level-3-Core\n+http:\/\/www.w3.org\/TR\/DOM-Level-3-LS\n+http:\/\/www.w3.org\/TR\/ElementTraversal\/\n+http:\/\/www.w3.org\/TR\/NOTE-datetime\n+http:\/\/www.w3.org\/TR\/REC-CSS1\n+http:\/\/www.w3.org\/TR\/REC-html32.html\n+http:\/\/www.w3.org\/TR\/REC-xml\n+http:\/\/www.w3.org\/TR\/REC-xml-names\n+http:\/\/www.w3.org\/TR\/REC-xml-names\/\n+http:\/\/www.w3.org\/TR\/REC-xml\/\n+http:\/\/www.w3.org\/TR\/html4\/\n+http:\/\/www.w3.org\/TR\/html40\/appendix\/notes.html\n+http:\/\/www.w3.org\/TR\/xinclude\/\n+http:\/\/www.w3.org\/TR\/xml-exc-c14n\/\n+http:\/\/www.w3.org\/TR\/xml-names11\/\n+http:\/\/www.w3.org\/TR\/xml-stylesheet\/\n+http:\/\/www.w3.org\/TR\/xml11\/\n+http:\/\/www.w3.org\/TR\/xmldsig-core\/\n+http:\/\/www.w3.org\/TR\/xmldsig-filter2\n+http:\/\/www.w3.org\/TR\/xmldsig-filter2\/\n+http:\/\/www.w3.org\/TR\/xmlschema-1\n+http:\/\/www.w3.org\/TR\/xmlschema-1\/\n+http:\/\/www.w3.org\/TR\/xmlschema-2\/\n+http:\/\/www.w3.org\/TR\/xpath\n+http:\/\/www.w3.org\/TR\/xpath-datamodel\n+http:\/\/www.w3.org\/TR\/xpath\/\n+http:\/\/www.w3.org\/TR\/xslt\n+http:\/\/www.w3.org\/XML\/1998\/namespace\n+http:\/\/www.w3.org\/XML\/Schema\n+http:\/\/www.w3.org\/XML\/xml-V10-2e-errata\n+http:\/\/www.w3.org\/pub\/WWW\/Graphics\/Color\/sRGB.html\n+http:\/\/www.w3.org\/pub\/WWW\/Protocols\/\n+http:\/\/xmlns.jcp.org\/xml\/ns\/\/jdbc\/webrowset.xsd\n+https:\/\/bugreport.java.com\/bugreport\/\n+https:\/\/bugs.openjdk.org\/secure\/attachment\/75649\/JVM_CodeHeap_StateAnalytics_V2.pdf\n+https:\/\/cldr.unicode.org\/index\/downloads\n+https:\/\/csrc.nist.gov\/publications\/PubsFIPS.html\n+https:\/\/csrc.nist.gov\/publications\/fips\/archive\/fips186-2\/fips186-2.pdf\n+https:\/\/csrc.nist.gov\/publications\/fips\/fips180-4\/fips-180-4.pdf\n+https:\/\/csrc.nist.gov\/publications\/fips\/fips186-3\/fips_186-3.pdf\n+https:\/\/csrc.nist.gov\/publications\/fips\/fips197\/fips-197.pdf\n+https:\/\/csrc.nist.gov\/publications\/fips\/fips46-3\/fips46-3.pdf\n+https:\/\/csrc.nist.gov\/publications\/fips\/fips81\/fips81.htm\n+https:\/\/csrc.nist.gov\/publications\/nistpubs\/800-38C\/SP800-38C_updated-July20_2007.pdf\n+https:\/\/csrc.nist.gov\/publications\/nistpubs\/800-38D\/SP-800-38D.pdf\n+https:\/\/csrc.nist.gov\/pubs\/fips\/203\/final\n+https:\/\/csrc.nist.gov\/pubs\/fips\/204\/final\n+https:\/\/datatracker.ietf.org\/doc\/html\/rfc8017\n+https:\/\/developer.apple.com\/documentation\n+https:\/\/docs.oracle.com\/en\/java\/javase\/11\/tools\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/12\/language\/index.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/12\/tools\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/12\/vm\/compiler-control1.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/13\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/14\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/18\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/19\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/20\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/21\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/23\/docs\/api\/java.base\/java\/lang\/Double.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/23\/docs\/api\/java.base\/java\/math\/BigDecimal.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/23\/docs\/specs\/man\/java.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/api\/java.base\/java\/lang\/String.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/specs\/javadoc\/javadoc-search-spec.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/specs\/man\/javadoc.html\n+https:\/\/docs.oracle.com\/en\/java\/javase\/index.html\n+https:\/\/docs.oracle.com\/javase\/10\/tools\/java.htm\n+https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\n+https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/windows\/java.html\n+https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm\n+https:\/\/docs.oracle.com\/javase\/specs\/\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se10\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se11\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se12\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se13\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se14\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se15\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se16\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se17\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se18\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se19\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se20\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se21\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-13.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-14.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-15.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-17.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-3.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-4.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-5.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-6.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-8.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/jls-9.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-10.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-11.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-12.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-14.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-15.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-16.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-18.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-2.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-3.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-4.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-5.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-6.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-7.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-8.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/jls-9.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-10.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-11.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-12.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-13.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-14.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-15.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-17.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-18.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-3.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-4.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-5.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-6.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-7.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-8.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/jls-9.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/jls24.pdf\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se6\/html\/j3TOC.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jls\/se9\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se10\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se11\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se12\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se13\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se14\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se15\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se16\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se17\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se18\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se19\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se20\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se21\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se22\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se23\/html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se23\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se23\/html\/jvms-5.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/jvms-1.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/jvms-2.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/jvms-3.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/jvms-4.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/jvms-5.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/html\/jvms-6.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se24\/jvms24.pdf\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se7\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/index.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/\n+https:\/\/docs.oracle.com\/javase\/tutorial\/2d\/text\/fonts.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/extra\/fullscreen\/index.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/index.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/javabeans\/\n+https:\/\/docs.oracle.com\/javase\/tutorial\/javabeans\/writing\/properties.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/sound\/\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/applet.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/border.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/button.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/colorchooser.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/combobox.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/dialog.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/filechooser.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/frame.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/generaltext.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/icon.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/internalframe.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/jcomponent.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/label.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/layeredpane.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/list.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/menu.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/panel.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/progress.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/rootpane.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/scrollpane.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/slider.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/spinner.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/splitpane.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/tabbedpane.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/table.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/text.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/textfield.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/toolbar.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/tooltip.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/toplevel.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/tree.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/concurrency\/index.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/dnd\/index.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/actionlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/componentlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/containerlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/focuslistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/index.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/internalframelistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/itemlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/keylistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/mouselistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/mousemotionlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/treeexpansionlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/treemodellistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/treeselectionlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/treewillexpandlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/events\/windowlistener.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/index.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/layout\/box.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/layout\/spring.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/lookandfeel\/plaf.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/misc\/action.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/misc\/focus.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/misc\/keybinding.html\n+https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/misc\/timer.html\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=GUID-FE2D2E28-C991-4EF9-9DBE-2A4982726313\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=homepage\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=i18n_overview\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=imf_overview\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=jndi_ldap_gl_prop\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=jndi_overview\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=logging_overview\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=monitoring_and_management_using_jmx_technology\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=rmi_guide\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=secure_coding_guidelines_javase\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_impl_provider\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_jca\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_jca_provider\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_jdk_providers\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_jgss_tutorial\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_overview\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_pki\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_sasl\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=security_guide_tools\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=serialization_filter_guide\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=serialver_tool_reference\n+https:\/\/docs.oracle.com\/pls\/topic\/lookup?ctx=javase24&id=using_jconsole\n+https:\/\/ftp.pwg.org\/pub\/pwg\/candidates\/cs-ippoutputbin10-20010207-5100.2.pdf\n+https:\/\/github.github.com\/gfm\/\n+https:\/\/help.ubuntu.com\/community\/UnityLaunchersAndDesktopFiles\n+https:\/\/html.spec.whatwg.org\n+https:\/\/html.spec.whatwg.org\/multipage\/\n+https:\/\/html.spec.whatwg.org\/multipage\/introduction.html\n+https:\/\/html.spec.whatwg.org\/multipage\/sections.html\n+https:\/\/html.spec.whatwg.org\/multipage\/semantics.html\n+https:\/\/jcp.org\/aboutJava\/communityprocess\/maintenance\/jsr924\/index.html\n+https:\/\/jcp.org\/aboutJava\/communityprocess\/maintenance\/jsr924\/index2.html\n+https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\n+https:\/\/jcp.org\/en\/jsr\/detail?id=14\n+https:\/\/jcp.org\/en\/jsr\/detail?id=175\n+https:\/\/jcp.org\/en\/jsr\/detail?id=201\n+https:\/\/jcp.org\/en\/jsr\/detail?id=221\n+https:\/\/jcp.org\/en\/jsr\/detail?id=269\n+https:\/\/jcp.org\/en\/jsr\/detail?id=334\n+https:\/\/jcp.org\/en\/jsr\/detail?id=335\n+https:\/\/jcp.org\/en\/jsr\/detail?id=376\n+https:\/\/jcp.org\/en\/jsr\/detail?id=41\n+https:\/\/jcp.org\/en\/procedures\/jcp2\n+https:\/\/mermaid.js.org\n+https:\/\/msdn.microsoft.com\/en-us\/library\/cc236621.aspx\n+https:\/\/msdn.microsoft.com\/en-us\/library\/dd183391.aspx\n+https:\/\/nvlpubs.nist.gov\/nistpubs\/FIPS\/NIST.FIPS.140-2.pdf\n+https:\/\/nvlpubs.nist.gov\/nistpubs\/FIPS\/NIST.FIPS.186-4.pdf\n+https:\/\/nvlpubs.nist.gov\/nistpubs\/FIPS\/NIST.FIPS.202.pdf\n+https:\/\/nvlpubs.nist.gov\/nistpubs\/SpecialPublications\/NIST.SP.800-38F.pdf\n+https:\/\/nvlpubs.nist.gov\/nistpubs\/SpecialPublications\/NIST.SP.800-90Ar1.pdf\n+https:\/\/openjdk.org\/jeps\/11\n+https:\/\/openjdk.org\/jeps\/12\n+https:\/\/openjdk.org\/jeps\/181\n+https:\/\/openjdk.org\/jeps\/213\n+https:\/\/openjdk.org\/jeps\/225\n+https:\/\/openjdk.org\/jeps\/261\n+https:\/\/openjdk.org\/jeps\/286\n+https:\/\/openjdk.org\/jeps\/306\n+https:\/\/openjdk.org\/jeps\/323\n+https:\/\/openjdk.org\/jeps\/361\n+https:\/\/openjdk.org\/jeps\/371\n+https:\/\/openjdk.org\/jeps\/378\n+https:\/\/openjdk.org\/jeps\/394\n+https:\/\/openjdk.org\/jeps\/395\n+https:\/\/openjdk.org\/jeps\/396\n+https:\/\/openjdk.org\/jeps\/403\n+https:\/\/openjdk.org\/jeps\/409\n+https:\/\/openjdk.org\/jeps\/421\n+https:\/\/openjdk.org\/jeps\/440\n+https:\/\/openjdk.org\/jeps\/441\n+https:\/\/openjdk.org\/jeps\/454\n+https:\/\/openjdk.org\/jeps\/456\n+https:\/\/openjdk.org\/jeps\/458\n+https:\/\/openjdk.org\/jeps\/467\n+https:\/\/openjdk.org\/jeps\/478\n+https:\/\/openjdk.org\/jeps\/487\n+https:\/\/openjdk.org\/jeps\/488\n+https:\/\/openjdk.org\/jeps\/492\n+https:\/\/openjdk.org\/jeps\/494\n+https:\/\/openjdk.org\/jeps\/495\n+https:\/\/openjdk.org\/jeps\/499\n+https:\/\/prismjs.com\n+https:\/\/pubs.opengroup.org\/onlinepubs\/9699919799\/functions\/inet_addr.html\n+https:\/\/relaxng.org\/\n+https:\/\/reproducible-builds.org\/\n+https:\/\/spec.commonmark.org\/0.31.2\n+https:\/\/spec.commonmark.org\/0.31.2\/\n+https:\/\/standards.ieee.org\/ieee\/754\/6210\/\n+https:\/\/standards.iso.org\/ittf\/PubliclyAvailableStandards\/c055982_ISO_IEC_19757-3_2016.zip\n+https:\/\/standards.iso.org\/ittf\/PubliclyAvailableStandards\/index.html\n+https:\/\/support.pkware.com\/pkzip\/appnote\n+https:\/\/tools.ietf.org\/html\/rfc1319\n+https:\/\/tools.ietf.org\/html\/rfc1321\n+https:\/\/tools.ietf.org\/html\/rfc1779\n+https:\/\/tools.ietf.org\/html\/rfc2040\n+https:\/\/tools.ietf.org\/html\/rfc2104\n+https:\/\/tools.ietf.org\/html\/rfc2195\n+https:\/\/tools.ietf.org\/html\/rfc2222\n+https:\/\/tools.ietf.org\/html\/rfc2246\n+https:\/\/tools.ietf.org\/html\/rfc2253\n+https:\/\/tools.ietf.org\/html\/rfc2595\n+https:\/\/tools.ietf.org\/html\/rfc2616\n+https:\/\/tools.ietf.org\/html\/rfc2712\n+https:\/\/tools.ietf.org\/html\/rfc2818\n+https:\/\/tools.ietf.org\/html\/rfc2830\n+https:\/\/tools.ietf.org\/html\/rfc2831\n+https:\/\/tools.ietf.org\/html\/rfc3217\n+https:\/\/tools.ietf.org\/html\/rfc3278\n+https:\/\/tools.ietf.org\/html\/rfc3394\n+https:\/\/tools.ietf.org\/html\/rfc3986\n+https:\/\/tools.ietf.org\/html\/rfc4086\n+https:\/\/tools.ietf.org\/html\/rfc4121\n+https:\/\/tools.ietf.org\/html\/rfc4162\n+https:\/\/tools.ietf.org\/html\/rfc4178\n+https:\/\/tools.ietf.org\/html\/rfc4234\n+https:\/\/tools.ietf.org\/html\/rfc4279\n+https:\/\/tools.ietf.org\/html\/rfc4346\n+https:\/\/tools.ietf.org\/html\/rfc4347\n+https:\/\/tools.ietf.org\/html\/rfc4492\n+https:\/\/tools.ietf.org\/html\/rfc4512\n+https:\/\/tools.ietf.org\/html\/rfc4647\n+https:\/\/tools.ietf.org\/html\/rfc4785\n+https:\/\/tools.ietf.org\/html\/rfc4960\n+https:\/\/tools.ietf.org\/html\/rfc5054\n+https:\/\/tools.ietf.org\/html\/rfc5061\n+https:\/\/tools.ietf.org\/html\/rfc5084\n+https:\/\/tools.ietf.org\/html\/rfc5246\n+https:\/\/tools.ietf.org\/html\/rfc5280\n+https:\/\/tools.ietf.org\/html\/rfc5288\n+https:\/\/tools.ietf.org\/html\/rfc5289\n+https:\/\/tools.ietf.org\/html\/rfc5469\n+https:\/\/tools.ietf.org\/html\/rfc5487\n+https:\/\/tools.ietf.org\/html\/rfc5489\n+https:\/\/tools.ietf.org\/html\/rfc5639\n+https:\/\/tools.ietf.org\/html\/rfc5646\n+https:\/\/tools.ietf.org\/html\/rfc5649\n+https:\/\/tools.ietf.org\/html\/rfc5746\n+https:\/\/tools.ietf.org\/html\/rfc5932\n+https:\/\/tools.ietf.org\/html\/rfc6209\n+https:\/\/tools.ietf.org\/html\/rfc6347\n+https:\/\/tools.ietf.org\/html\/rfc6367\n+https:\/\/tools.ietf.org\/html\/rfc6454\n+https:\/\/tools.ietf.org\/html\/rfc6455\n+https:\/\/tools.ietf.org\/html\/rfc6655\n+https:\/\/tools.ietf.org\/html\/rfc6931\n+https:\/\/tools.ietf.org\/html\/rfc7230\n+https:\/\/tools.ietf.org\/html\/rfc7231\n+https:\/\/tools.ietf.org\/html\/rfc7251\n+https:\/\/tools.ietf.org\/html\/rfc7292\n+https:\/\/tools.ietf.org\/html\/rfc7507\n+https:\/\/tools.ietf.org\/html\/rfc7539\n+https:\/\/tools.ietf.org\/html\/rfc7540\n+https:\/\/tools.ietf.org\/html\/rfc7748\n+https:\/\/tools.ietf.org\/html\/rfc7905\n+https:\/\/tools.ietf.org\/html\/rfc7919\n+https:\/\/tools.ietf.org\/html\/rfc8017\n+https:\/\/tools.ietf.org\/html\/rfc8018\n+https:\/\/tools.ietf.org\/html\/rfc8032\n+https:\/\/tools.ietf.org\/html\/rfc8103\n+https:\/\/tools.ietf.org\/html\/rfc8353\n+https:\/\/tools.ietf.org\/html\/rfc8422\n+https:\/\/tools.ietf.org\/html\/rfc8446\n+https:\/\/tools.ietf.org\/html\/rfc8554\n+https:\/\/tools.ietf.org\/id\/draft-kaukonen-cipher-arcfour-03.txt\n+https:\/\/tools.ietf.org\/rfc\/rfc5280.txt\n+https:\/\/tools.ietf.org\/rfc\/rfc8017.txt\n+https:\/\/unicode.org\/reports\/tr31\/\n+https:\/\/unicode.org\/reports\/tr35\/\n+https:\/\/unicode.org\/reports\/tr35\/tr35-dates.html\n+https:\/\/unicode.org\/reports\/tr35\/tr35-numbers.html\n+https:\/\/unicode.org\/reports\/tr51\/\n+https:\/\/web.mit.edu\/kerberos\/\n+https:\/\/webhome.phy.duke.edu\/~rgb\/General\/dieharder.php\n+https:\/\/www.cipa.jp\/std\/documents\/e\/DC-008-2012_E.pdf\n+https:\/\/www.color.org\n+https:\/\/www.color.org\/ICC1V42.pdf\n+https:\/\/www.iana.org\/assignments\/kerberos-parameters\/kerberos-parameters.xhtml\n+https:\/\/www.iana.org\/assignments\/tls-parameters\/tls-parameters.xhtml\n+https:\/\/www.iana.org\/time-zones\n+https:\/\/www.ietf.org\/rfc\/rfc2616.txt\n+https:\/\/www.ietf.org\/rfc\/rfc2818.txt\n+https:\/\/www.ietf.org\/rfc\/rfc6931.txt\n+https:\/\/www.ietf.org\/rfc\/rfc6943.html\n+https:\/\/www.iso.org\/home.html\n+https:\/\/www.iso.org\/iso-4217-currency-codes.html\n+https:\/\/www.iso.org\/iso-8601-date-and-time-format.html\n+https:\/\/www.iso.org\/standard\/18114.html\n+https:\/\/www.itu.int\/itudoc\/itu-t\/com16\/tiff-fx\/docs\/tiff6.pdf\n+https:\/\/www.itu.int\/rec\/T-REC-X.509\/en\n+https:\/\/www.netlib.org\/fdlibm\/\n+https:\/\/www.oasis-open.org\n+https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html\n+https:\/\/www.oracle.com\/java\/javase\/terms\/license\/java24speclicense.html\n+https:\/\/www.oracle.com\/java\/technologies\/a-swing-architecture.html\n+https:\/\/www.oracle.com\/java\/technologies\/javase\/seccodeguide.html\n+https:\/\/www.oracle.com\/java\/technologies\/javase\/training-support.html\n+https:\/\/www.oracle.com\/pls\/topic\/lookup?ctx=en\/java\/javase&id=security_guide_implement_provider_jca\n+https:\/\/www.oracle.com\/technetwork\/java\/javase\/documentation\/spec-136004.html\n+https:\/\/www.oracle.com\/technetwork\/java\/javasebusiness\/downloads\/java-archive-downloads-java-plat-419418.html\n+https:\/\/www.oracle.com\/technetwork\/java\/redist-137594.html\n+https:\/\/www.oracle.com\/technetwork\/java\/seccodeguide-139067.html\n+https:\/\/www.owasp.org\n+https:\/\/www.rfc-editor.org\/info\/rfc1122\n+https:\/\/www.rfc-editor.org\/info\/rfc1123\n+https:\/\/www.rfc-editor.org\/info\/rfc1323\n+https:\/\/www.rfc-editor.org\/info\/rfc1349\n+https:\/\/www.rfc-editor.org\/info\/rfc1738\n+https:\/\/www.rfc-editor.org\/info\/rfc1779\n+https:\/\/www.rfc-editor.org\/info\/rfc1918\n+https:\/\/www.rfc-editor.org\/info\/rfc1950\n+https:\/\/www.rfc-editor.org\/info\/rfc1951\n+https:\/\/www.rfc-editor.org\/info\/rfc1952\n+https:\/\/www.rfc-editor.org\/info\/rfc2040\n+https:\/\/www.rfc-editor.org\/info\/rfc2045\n+https:\/\/www.rfc-editor.org\/info\/rfc2046\n+https:\/\/www.rfc-editor.org\/info\/rfc2109\n+https:\/\/www.rfc-editor.org\/info\/rfc2236\n+https:\/\/www.rfc-editor.org\/info\/rfc2246\n+https:\/\/www.rfc-editor.org\/info\/rfc2253\n+https:\/\/www.rfc-editor.org\/info\/rfc2268\n+https:\/\/www.rfc-editor.org\/info\/rfc2278\n+https:\/\/www.rfc-editor.org\/info\/rfc2279\n+https:\/\/www.rfc-editor.org\/info\/rfc2296\n+https:\/\/www.rfc-editor.org\/info\/rfc2306\n+https:\/\/www.rfc-editor.org\/info\/rfc2365\n+https:\/\/www.rfc-editor.org\/info\/rfc2368\n+https:\/\/www.rfc-editor.org\/info\/rfc2373\n+https:\/\/www.rfc-editor.org\/info\/rfc2396\n+https:\/\/www.rfc-editor.org\/info\/rfc2474\n+https:\/\/www.rfc-editor.org\/info\/rfc2560\n+https:\/\/www.rfc-editor.org\/info\/rfc2616\n+https:\/\/www.rfc-editor.org\/info\/rfc2710\n+https:\/\/www.rfc-editor.org\/info\/rfc2732\n+https:\/\/www.rfc-editor.org\/info\/rfc2781\n+https:\/\/www.rfc-editor.org\/info\/rfc2898\n+https:\/\/www.rfc-editor.org\/info\/rfc2911\n+https:\/\/www.rfc-editor.org\/info\/rfc2965\n+https:\/\/www.rfc-editor.org\/info\/rfc3279\n+https:\/\/www.rfc-editor.org\/info\/rfc3330\n+https:\/\/www.rfc-editor.org\/info\/rfc3376\n+https:\/\/www.rfc-editor.org\/info\/rfc3454\n+https:\/\/www.rfc-editor.org\/info\/rfc3490\n+https:\/\/www.rfc-editor.org\/info\/rfc3491\n+https:\/\/www.rfc-editor.org\/info\/rfc3492\n+https:\/\/www.rfc-editor.org\/info\/rfc3530\n+https:\/\/www.rfc-editor.org\/info\/rfc3720\n+https:\/\/www.rfc-editor.org\/info\/rfc3810\n+https:\/\/www.rfc-editor.org\/info\/rfc3986\n+https:\/\/www.rfc-editor.org\/info\/rfc4007\n+https:\/\/www.rfc-editor.org\/info\/rfc4086\n+https:\/\/www.rfc-editor.org\/info\/rfc4122\n+https:\/\/www.rfc-editor.org\/info\/rfc4234\n+https:\/\/www.rfc-editor.org\/info\/rfc4366\n+https:\/\/www.rfc-editor.org\/info\/rfc4512\n+https:\/\/www.rfc-editor.org\/info\/rfc4647\n+https:\/\/www.rfc-editor.org\/info\/rfc4648\n+https:\/\/www.rfc-editor.org\/info\/rfc5116\n+https:\/\/www.rfc-editor.org\/info\/rfc5280\n+https:\/\/www.rfc-editor.org\/info\/rfc5646\n+https:\/\/www.rfc-editor.org\/info\/rfc5869\n+https:\/\/www.rfc-editor.org\/info\/rfc5890\n+https:\/\/www.rfc-editor.org\/info\/rfc6066\n+https:\/\/www.rfc-editor.org\/info\/rfc7301\n+https:\/\/www.rfc-editor.org\/info\/rfc7539\n+https:\/\/www.rfc-editor.org\/info\/rfc790\n+https:\/\/www.rfc-editor.org\/info\/rfc793\n+https:\/\/www.rfc-editor.org\/info\/rfc8017\n+https:\/\/www.rfc-editor.org\/info\/rfc8032\n+https:\/\/www.rfc-editor.org\/info\/rfc822\n+https:\/\/www.rfc-editor.org\/info\/rfc919\n+https:\/\/www.rfc-editor.org\/info\/rfc9231\n+https:\/\/www.rfc-editor.org\/rfc\/rfc2315.txt\n+https:\/\/www.rfc-editor.org\/rfc\/rfc5208.html\n+https:\/\/www.rfc-editor.org\/rfc\/rfc5280.html\n+https:\/\/www.rfc-editor.org\/rfc\/rfc5646\n+https:\/\/www.rfc-editor.org\/rfc\/rfc5646.html\n+https:\/\/www.rfc-editor.org\/rfc\/rfc5869\n+https:\/\/www.rfc-editor.org\/rfc\/rfc6943.html\n+https:\/\/www.rfc-editor.org\/rfc\/rfc8017\n+https:\/\/www.rfc-editor.org\/rfc\/rfc8017.html\n+https:\/\/www.rfc-editor.org\/rfc\/rfc9180\n+https:\/\/www.schneier.com\/blowfish.html\n+https:\/\/www.secg.org\/sec2-v2.pdf\n+https:\/\/www.unicode.org\/reports\/tr15\n+https:\/\/www.unicode.org\/reports\/tr15\/\n+https:\/\/www.unicode.org\/reports\/tr18\n+https:\/\/www.unicode.org\/reports\/tr24\n+https:\/\/www.unicode.org\/reports\/tr27\n+https:\/\/www.unicode.org\/reports\/tr29\/\n+https:\/\/www.unicode.org\/reports\/tr31\n+https:\/\/www.unicode.org\/reports\/tr35\n+https:\/\/www.unicode.org\/reports\/tr35\/\n+https:\/\/www.unicode.org\/reports\/tr35\/tr35-collation.html\n+https:\/\/www.unicode.org\/reports\/tr35\/tr35-dates.html\n+https:\/\/www.unicode.org\/reports\/tr35\/tr35-general.html\n+https:\/\/www.unicode.org\/reports\/tr35\/tr35.html\n+https:\/\/www.unicode.org\/reports\/tr36\n+https:\/\/www.unicode.org\/reports\/tr44\n+https:\/\/www.unicode.org\/reports\/tr44\/\n+https:\/\/www.usno.navy.mil\/USNO\n+https:\/\/www.usno.navy.mil\/USNO\/time\/master-clock\/systems-of-time\n+https:\/\/www.w3.org\n+https:\/\/www.w3.org\/Daemon\/User\/Config\/Logging.html\n+https:\/\/www.w3.org\/TR\/1998\/REC-html40-19980424\/\n+https:\/\/www.w3.org\/TR\/1999\/REC-xpath-19991116\/\n+https:\/\/www.w3.org\/TR\/2001\/REC-xml-c14n-20010315\n+https:\/\/www.w3.org\/TR\/2002\/REC-xml-exc-c14n-20020718\/\n+https:\/\/www.w3.org\/TR\/2002\/REC-xmldsig-filter2-20021108\/\n+https:\/\/www.w3.org\/TR\/2004\/REC-DOM-Level-3-Core-20040407\/core.html\n+https:\/\/www.w3.org\/TR\/CSS22\n+https:\/\/www.w3.org\/TR\/CSS22\/syndata.html\n+https:\/\/www.w3.org\/TR\/DOM-Level-3-XPath\/\n+https:\/\/www.w3.org\/TR\/NOTE-datetime\n+https:\/\/www.w3.org\/TR\/REC-CSS1\n+https:\/\/www.w3.org\/TR\/REC-html32.html\n+https:\/\/www.w3.org\/TR\/REC-xml-names\/\n+https:\/\/www.w3.org\/TR\/html4\n+https:\/\/www.w3.org\/TR\/html52\n+https:\/\/www.w3.org\/TR\/html52\/dom.html\n+https:\/\/www.w3.org\/TR\/html52\/syntax.html\n+https:\/\/www.w3.org\/TR\/xml\n+https:\/\/www.w3.org\/TR\/xml-c14n11\/\n+https:\/\/www.w3.org\/TR\/xml\/\n+https:\/\/www.w3.org\/TR\/xmldsig-core\/\n+https:\/\/www.w3.org\/TR\/xmlschema-2\n+https:\/\/www.w3.org\/WAI\/standards-guidelines\/wcag\/\n+https:\/\/www.w3.org\/XML\/Schema\n+https:\/\/www.w3.org\/XML\/xml-names-19990114-errata.html\n+https:\/\/www.wapforum.org\/what\/technical\/SPEC-WAESpec-19990524.pdf\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/Ext-Links-JDK.txt","additions":756,"deletions":0,"binary":false,"changes":756,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils;\n+\n+import java.io.Closeable;\n+\n+\/**\n+ * Base class for {@link FileChecker file checkers} and\n+ *\/\n+public interface Checker extends Closeable {\n+\n+    \/**\n+     * Writes a report at the end of a run, to summarize the results of the\n+     * checking done by this checker.\n+     *\/\n+    void report();\n+\n+    boolean isOK();\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/Checker.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public interface FileChecker extends Checker {\n+    void checkFiles(List<Path> files);\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/FileChecker.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils;\n+\n+import java.io.IOException;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class FileProcessor {\n+    private final List<Path> files;\n+\n+    public FileProcessor() {\n+        files = new ArrayList<>();\n+    }\n+\n+    public List<Path> getFiles() {\n+        return files;\n+    }\n+\n+    public void processFiles(Path directory) {\n+        try {\n+            Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {\n+                @Override\n+                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                    if (file.toString().endsWith(\".html\"))\n+                        files.add(file);\n+                    return FileVisitResult.CONTINUE;\n+                }\n+\n+                @Override\n+                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n+                    return FileVisitResult.CONTINUE;\n+                }\n+            });\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/FileProcessor.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils;\n+\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+\/**\n+ * Base class for HTML checkers.\n+ * <p>\n+ * For details on HTML syntax and the terms used in this API, see\n+ * W3C <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/syntax.html#syntax\">The HTML syntax<\/a>.\n+ *\/\n+public interface HtmlChecker extends Checker {\n+    \/**\n+     * Starts checking a new file,\n+     * <p>\n+     * The file becomes the <em>current<\/em> file until {@link #endFile endFile}\n+     * is called.\n+     *\n+     * @param path the file.\n+     *\/\n+    void startFile(Path path);\n+\n+    \/**\n+     * Ends checking the current file.\n+     *\/\n+    void endFile();\n+\n+    \/**\n+     * Checks the content of a {@code <?xml ... ?>} declaration in the\n+     * current file.\n+     *\n+     * @param line  the line number on which the declaration was found\n+     * @param attrs the content of the declaration\n+     *\/\n+    void xml(int line, Map<String, String> attrs);\n+\n+    \/**\n+     * Checks the content of a {@code <!doctype ... >} declaration in the\n+     * current file.\n+     *\n+     * @param line    the line number on which the declaration was found\n+     * @param docType the content of the declaration\n+     *\/\n+    void docType(int line, String docType);\n+\n+    \/**\n+     * Checks the start of an HTML tag in the current file.\n+     *\n+     * @param line        the line number on which the start tag for an element was found\n+     * @param name        the name of the tag\n+     * @param attrs       the attributes of the tag\n+     * @param selfClosing whether or not the tag is self-closing\n+     *\/\n+    void startElement(int line, String name, Map<String, String> attrs, boolean selfClosing);\n+\n+    \/**\n+     * Checks the end of an HTML tag in the current file.\n+     *\n+     * @param line the line number on which the end tag for an element was found\n+     * @param name the name of the tag\n+     *\/\n+    void endElement(int line, String name);\n+\n+    \/**\n+     * Checks the content appearing in between HTML tags.\n+     *\n+     * @param line    the line number on which the content was found\n+     * @param content the content\n+     *\/\n+    default void content(int line, String content) {\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/HtmlChecker.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,389 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CodingErrorAction;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Reads an HTML file, and calls a series of{@link HtmlChecker HTML checkers}\n+ * for the HTML constructs found therein.\n+ *\/\n+public class HtmlFileChecker implements FileChecker {\n+    private final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n+            .onMalformedInput(CodingErrorAction.IGNORE)\n+            .onUnmappableCharacter(CodingErrorAction.IGNORE);\n+\n+    private final Log log;\n+    private final HtmlChecker htmlChecker;\n+    private Path path;\n+    private BufferedReader in;\n+    private int ch;\n+    private int lineNumber;\n+    private boolean inScript;\n+    private boolean xml;\n+\n+    public HtmlFileChecker(HtmlChecker htmlChecker, Path BaseDir) {\n+        this.log = new Log();\n+        log.setBaseDirectory(BaseDir);\n+        this.htmlChecker = htmlChecker;\n+    }\n+\n+    @Override\n+    public void checkFiles(List<Path> files) {\n+        for (Path file : files) {\n+            read(file);\n+        }\n+    }\n+\n+    @Override\n+    public void report() {\n+        System.err.println(log);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+\/\/        report();\n+        htmlChecker.close();\n+    }\n+\n+    private void read(Path path) {\n+        try (BufferedReader r = new BufferedReader(\n+                new InputStreamReader(Files.newInputStream(path), decoder))) {\n+            this.path = path;\n+            this.in = r;\n+            StringBuilder content = new StringBuilder();\n+\n+            startFile(path);\n+            try {\n+                lineNumber = 1;\n+                xml = false;\n+                nextChar();\n+\n+                while (ch != -1) {\n+                    if (ch == '<') {\n+                        content(content.toString());\n+                        content.setLength(0);\n+                        html();\n+                    } else {\n+                        content.append((char) ch);\n+                        if (ch == '\\n') {\n+                            content(content.toString());\n+                            content.setLength(0);\n+                        }\n+                        nextChar();\n+                    }\n+                }\n+            } finally {\n+                endFile();\n+            }\n+        } catch (IOException e) {\n+            log.log(path, lineNumber, e);\n+        } catch (Throwable t) {\n+            log.log(path, lineNumber, t);\n+            log.log(String.valueOf(t));\n+        }\n+    }\n+\n+    private void startFile(Path path) {\n+        htmlChecker.startFile(path);\n+    }\n+\n+    private void endFile() {\n+        htmlChecker.endFile();\n+    }\n+\n+    private void docType(String s) {\n+        htmlChecker.docType(lineNumber, s);\n+    }\n+\n+    private void startElement(String name, Map<String, String> attrs, boolean selfClosing) {\n+        htmlChecker.startElement(lineNumber, name, attrs, selfClosing);\n+    }\n+\n+    private void endElement(String name) {\n+        htmlChecker.endElement(lineNumber, name);\n+    }\n+\n+    private void content(String s) {\n+        htmlChecker.content(lineNumber, s);\n+    }\n+\n+    private void nextChar() throws IOException {\n+        ch = in.read();\n+        if (ch == '\\n')\n+            lineNumber++;\n+    }\n+\n+    \/**\n+     * Read the start or end of an HTML tag, or an HTML comment\n+     * {@literal <identifier attrs> } or {@literal <\/identifier> }\n+     *\n+     * @throws IOException if there is a problem reading the file\n+     *\/\n+    protected void html() throws IOException {\n+        nextChar();\n+        if (isIdentifierStart((char) ch)) {\n+            String name = readIdentifier().toLowerCase(Locale.US);\n+            Map<String, String> attrs = htmlAttrs();\n+            if (attrs != null) {\n+                boolean selfClosing = false;\n+                if (ch == '\/') {\n+                    nextChar();\n+                    selfClosing = true;\n+                }\n+                if (ch == '>') {\n+                    nextChar();\n+                    startElement(name, attrs, selfClosing);\n+                    if (name.equals(\"script\")) {\n+                        inScript = true;\n+                    }\n+                    return;\n+                }\n+            }\n+        } else if (ch == '\/') {\n+            nextChar();\n+            if (isIdentifierStart((char) ch)) {\n+                String name = readIdentifier().toLowerCase(Locale.US);\n+                skipWhitespace();\n+                if (ch == '>') {\n+                    nextChar();\n+                    endElement(name);\n+                    if (name.equals(\"script\")) {\n+                        inScript = false;\n+                    }\n+                    return;\n+                }\n+            }\n+        } else if (ch == '!') {\n+            nextChar();\n+            if (ch == '-') {\n+                nextChar();\n+                if (ch == '-') {\n+                    nextChar();\n+                    while (ch != -1) {\n+                        int dash = 0;\n+                        while (ch == '-') {\n+                            dash++;\n+                            nextChar();\n+                        }\n+                        \/\/ Strictly speaking, a comment should not contain \"--\"\n+                        \/\/ so dash > 2 is an error, dash == 2 implies ch == '>'\n+                        \/\/ See http:\/\/www.w3.org\/TR\/html-markup\/syntax.html#syntax-comments\n+                        \/\/ for more details.\n+                        if (dash >= 2 && ch == '>') {\n+                            nextChar();\n+                            return;\n+                        }\n+\n+                        nextChar();\n+                    }\n+                }\n+            } else if (ch == '[') {\n+                nextChar();\n+                if (ch == 'C') {\n+                    nextChar();\n+                    if (ch == 'D') {\n+                        nextChar();\n+                        if (ch == 'A') {\n+                            nextChar();\n+                            if (ch == 'T') {\n+                                nextChar();\n+                                if (ch == 'A') {\n+                                    nextChar();\n+                                    if (ch == '[') {\n+                                        while (true) {\n+                                            nextChar();\n+                                            if (ch == ']') {\n+                                                nextChar();\n+                                                if (ch == ']') {\n+                                                    nextChar();\n+                                                    if (ch == '>') {\n+                                                        nextChar();\n+                                                        return;\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                StringBuilder sb = new StringBuilder();\n+                while (ch != -1 && ch != '>') {\n+                    sb.append((char) ch);\n+                    nextChar();\n+                }\n+                Pattern p = Pattern.compile(\"(?is)doctype\\\\s+html\\\\s?.*\");\n+                String s = sb.toString();\n+                if (p.matcher(s).matches()) {\n+                    xml = s.contains(\"XHTML\");\n+                    docType(s);\n+                    return;\n+                }\n+            }\n+        } else if (ch == '?') {\n+            nextChar();\n+            if (ch == 'x') {\n+                nextChar();\n+                if (ch == 'm') {\n+                    nextChar();\n+                    if (ch == 'l') {\n+                        nextChar();\n+                        if (ch == '?') {\n+                            nextChar();\n+                            if (ch == '>') {\n+                                nextChar();\n+                                xml = true;\n+                                return;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+            }\n+        }\n+\n+        if (!inScript) {\n+            log.log(path, lineNumber, \"bad html\");\n+        }\n+    }\n+\n+    \/**\n+     * Read a series of HTML attributes, terminated by {@literal > }.\n+     * Each attribute is of the form {@literal identifier[=value] }.\n+     * \"value\" may be unquoted, single-quoted, or double-quoted.\n+     *\/\n+    protected Map<String, String> htmlAttrs() throws IOException {\n+        Map<String, String> map = new LinkedHashMap<>();\n+        skipWhitespace();\n+\n+        while (isIdentifierStart((char) ch)) {\n+            String name = readAttributeName().toLowerCase(Locale.US);\n+            skipWhitespace();\n+            String value = null;\n+            if (ch == '=') {\n+                nextChar();\n+                skipWhitespace();\n+                if (ch == '\\'' || ch == '\"') {\n+                    char quote = (char) ch;\n+                    nextChar();\n+                    StringBuilder sb = new StringBuilder();\n+                    while (ch != -1 && ch != quote) {\n+\/\/                            if (ch == '\\n') {\n+\/\/                                error(path, lineNumber, \"unterminated string\");\n+\/\/                                \/\/ No point trying to read more.\n+\/\/                                \/\/ In fact, all attrs get discarded by the caller\n+\/\/                                \/\/ and superseded by a malformed.html node because\n+\/\/                                \/\/ the html tag itself is not terminated correctly.\n+\/\/                                break loop;\n+\/\/                            }\n+                        sb.append((char) ch);\n+                        nextChar();\n+                    }\n+                    value = sb.toString() \/\/ hack to replace common entities\n+                            .replace(\"&lt;\", \"<\")\n+                            .replace(\"&gt;\", \">\")\n+                            .replace(\"&amp;\", \"&\");\n+                    nextChar();\n+                } else {\n+                    StringBuilder sb = new StringBuilder();\n+                    while (ch != -1 && !isUnquotedAttrValueTerminator((char) ch)) {\n+                        sb.append((char) ch);\n+                        nextChar();\n+                    }\n+                    value = sb.toString();\n+                }\n+                skipWhitespace();\n+            }\n+            map.put(name, value);\n+        }\n+\n+        return map;\n+    }\n+\n+    protected boolean isIdentifierStart(char ch) {\n+        return Character.isUnicodeIdentifierStart(ch);\n+    }\n+\n+    protected String readIdentifier() throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append((char) ch);\n+        nextChar();\n+        while (ch != -1 && Character.isUnicodeIdentifierPart(ch)) {\n+            sb.append((char) ch);\n+            nextChar();\n+        }\n+        return sb.toString();\n+    }\n+\n+    protected String readAttributeName() throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append((char) ch);\n+        nextChar();\n+        while ((ch != -1 && Character.isUnicodeIdentifierPart(ch))\n+                || ch == '-'\n+                || (xml && ch == ':')) {\n+            sb.append((char) ch);\n+            nextChar();\n+        }\n+        return sb.toString();\n+    }\n+\n+    protected boolean isWhitespace(char ch) {\n+        return Character.isWhitespace(ch);\n+    }\n+\n+    protected void skipWhitespace() throws IOException {\n+        while (isWhitespace((char) ch)) {\n+            nextChar();\n+        }\n+    }\n+\n+    protected boolean isUnquotedAttrValueTerminator(char ch) {\n+        return switch (ch) {\n+            case '\\f', '\\n', '\\r', '\\t', ' ', '\"', '\\'', '`', '=', '<', '>' -> true;\n+            default -> false;\n+        };\n+    }\n+\n+    @Override\n+    public boolean isOK() {\n+        throw new UnsupportedOperationException();\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/HtmlFileChecker.java","additions":389,"deletions":0,"binary":false,"changes":389,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Log {\n+    private final ArrayList<String> errors;\n+\n+    private Path baseDir;\n+\n+    public Log() {\n+        errors = new ArrayList<>();\n+    }\n+\n+    public List<String> getErrors() {\n+        return errors;\n+    }\n+\n+    public void log(Path path, int line, String message, Object... args) {\n+        errors.add(formatErrorMessage(path, line, message, args));\n+    }\n+\n+\n+    public String formatErrorMessage(Path path, int line, String message, Object... args) {\n+        return path + \":\" + line + \": \" + formatErrorMessage(message, args);\n+    }\n+\n+    public String formatErrorMessage(Path path, int line, Throwable t) {\n+        return path + \":\" + line + \": \" + t;\n+    }\n+\n+    public String formatErrorMessage(Path path, Throwable t) {\n+        return path + \": \" + t;\n+    }\n+\n+\n+    public String formatErrorMessage(String message, Object... args) {\n+        return String.format(message, args);\n+    }\n+\n+    public void log(String message) {\n+        errors.add(message);\n+    }\n+\n+    public void log(Path path, int lineNumber, String s, int errorsOnLine) {\n+        log(formatErrorMessage(path, lineNumber, s, errorsOnLine));\n+    }\n+\n+    public void log(Path path, int line, Throwable t) {\n+        log(formatErrorMessage(path, line, t));\n+    }\n+\n+    public void log(Path path, Throwable t) {\n+        log(formatErrorMessage(path, t));\n+    }\n+\n+    public void log(String message, Object... args) {\n+        log(formatErrorMessage(message, args));\n+    }\n+\n+    public void setBaseDirectory(Path baseDir) {\n+        this.baseDir = baseDir.toAbsolutePath();\n+    }\n+\n+    public Path againstBaseDir(Path path) {\n+        return baseDir != null && path.startsWith(baseDir) ? baseDir.relativize(path) : path;\n+    }\n+\n+    public boolean noErrors() {\n+        return errors.isEmpty();\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/Log.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils.checkers;\n+\n+import doccheckutils.FileChecker;\n+import doccheckutils.Log;\n+\n+import java.io.*;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CodingErrorAction;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.MessageFormat;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Checks the contents of an HTML file for bad\/unmappable characters.\n+ * <p>\n+ * The file encoding is determined from the file contents.\n+ *\/\n+public class BadCharacterChecker implements FileChecker, AutoCloseable {\n+    private static final Pattern doctype = Pattern.compile(\"(?i)<!doctype html>\");\n+    private static final Pattern metaCharset = Pattern.compile(\"(?i)<meta\\\\s+charset=\\\"([^\\\"]+)\\\">\");\n+    private static final Pattern metaContentType = Pattern.compile(\"(?i)<meta\\\\s+http-equiv=\\\"Content-Type\\\"\\\\s+content=\\\"text\/html;charset=([^\\\"]+)\\\">\");\n+    private final Log errors;\n+    private int files = 0;\n+    private int badFiles = 0;\n+\n+    public BadCharacterChecker() {\n+        errors = new Log();\n+    }\n+\n+    public void checkFile(Path path) {\n+        files++;\n+        boolean ok = true;\n+        try (InputStream in = new BufferedInputStream(Files.newInputStream(path))) {\n+            CharsetDecoder d = getCharset(in).newDecoder()\n+                    .onMalformedInput(CodingErrorAction.REPLACE)\n+                    .onUnmappableCharacter(CodingErrorAction.REPLACE);\n+            BufferedReader r = new BufferedReader(new InputStreamReader(in, d));\n+            int lineNumber = 0;\n+            String line;\n+            try {\n+                while ((line = r.readLine()) != null) {\n+                    lineNumber++;\n+                    int errorsOnLine = 0;\n+                    for (int i = 0; i < line.length(); i++) {\n+                        char ch = line.charAt(i);\n+                        if (ch == 0xFFFD) {\n+                            errorsOnLine++;\n+                        }\n+                    }\n+                    if (errorsOnLine > 0) {\n+                        errors.log(path, lineNumber, \"found %d invalid characters\", errorsOnLine);\n+                        ok = false;\n+                    }\n+                }\n+            } catch (IOException e) {\n+                errors.log(path, lineNumber, e);\n+                ok = false;\n+\n+            }\n+        } catch (IOException e) {\n+            errors.log(path, e);\n+            ok = false;\n+        }\n+        if (!ok)\n+            badFiles++;\n+    }\n+\n+    @Override\n+    public void checkFiles(List<Path> files) {\n+        for (Path file : files) {\n+            checkFile(file);\n+        }\n+    }\n+\n+    private Charset getCharset(InputStream in) throws IOException {\n+        CharsetDecoder initial = StandardCharsets.US_ASCII.newDecoder()\n+                .onMalformedInput(CodingErrorAction.REPLACE)\n+                .onUnmappableCharacter(CodingErrorAction.REPLACE);\n+\n+        in.mark(1024);\n+        try {\n+            BufferedReader r = new BufferedReader(new InputStreamReader(in, initial));\n+            char[] buf = new char[1024];\n+            int n = r.read(buf, 0, buf.length);\n+            String head = new String(buf, 0, n);\n+            boolean html5 = doctype.matcher(head).find();\n+            Matcher m1 = metaCharset.matcher(head);\n+            if (m1.find()) {\n+                return Charset.forName(m1.group(1));\n+            }\n+            Matcher m2 = metaContentType.matcher(head);\n+            if (m2.find()) {\n+                return Charset.forName(m2.group(1));\n+            }\n+            return html5 ? StandardCharsets.UTF_8 : StandardCharsets.ISO_8859_1;\n+        } finally {\n+            in.reset();\n+        }\n+    }\n+\n+    @Override\n+    public void report() {\n+        if (!errors.noErrors() && files > 0) {\n+            System.err.println(\"Bad characters found in the generated HTML\");\n+\n+            System.err.println(MessageFormat.format(\n+                    \"\"\"\n+                            Bad Characters Report\n+                            {0} files read\n+                                {1} files contained bad characters\"\n+                                {2} bad characters or other errors found\n+                            \"\"\",\n+                    files, badFiles, files));\n+\n+            for (String s : errors.getErrors()) {\n+                System.err.println(s);\n+            }\n+            throw new RuntimeException(\"Bad character found in the generated HTML\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOK() {\n+        return errors.noErrors();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        report();\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/BadCharacterChecker.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils.checkers;\n+\n+import doccheckutils.HtmlChecker;\n+import doccheckutils.Log;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Checks the DocType declared at the head of an HTML file.\n+ *\n+ * @see <a href=\"https:\/\/www.w3.org\/TR\/html5\/syntax.html#syntax-doctype\">\n+ * W3C HTML5 8.1.1 The DOCTYPE<\/a>\n+ *\/\n+public class DocTypeChecker implements HtmlChecker {\n+    private final Log log;\n+    private final Map<String, Integer> counts = new HashMap<>();\n+    private int html5;\n+    private int html5_legacy;\n+    private int xml;\n+    private int other;\n+\n+    private Path path;\n+\n+    public DocTypeChecker() {\n+        log = new Log();\n+    }\n+\n+    @Override\n+    public void startFile(Path path) {\n+        this.path = path;\n+    }\n+\n+    @Override\n+    public void endFile() {\n+    }\n+\n+    @Override\n+    public void xml(int line, Map<String, String> attrs) {\n+        xml++;\n+    }\n+\n+    @Override\n+    public void docType(int line, String docType) {\n+        if (docType.equalsIgnoreCase(\"doctype html\")) {\n+            html5++;\n+        } else {\n+            Pattern p = Pattern.compile(\"(?i)doctype\"\n+                    + \"\\\\s+html\"\n+                    + \"\\\\s+([a-z]+)\"\n+                    + \"\\\\s+\\\"([^\\\"]+)\\\"\"\n+                    + \"(?:\\\\s+\\\"([^\\\"]+)\\\")?\"\n+                    + \"\\\\s*\");\n+            Matcher m = p.matcher(docType);\n+            if (m.matches()) {\n+                \/\/ See http:\/\/www.w3.org\/tr\/html52\/syntax.html#the-doctype\n+                if (m.group(1).equalsIgnoreCase(\"system\")\n+                        && m.group(2).equals(\"about:legacy-compat\")) {\n+                    html5_legacy++;\n+                } else {\n+                    String version = m.group(2);\n+                    List<String> allowedVersions = List.of(\n+                            \"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\"\n+                    );\n+                    if (allowedVersions.stream().noneMatch(v -> v.equals(version))) {\n+                        log.log(path, line, \"unexpected doctype: \" + version);\n+                    }\n+                    counts.put(version, counts.getOrDefault(version, 0) + 1);\n+                }\n+            } else {\n+                log.log(path, line, \"doctype not recognized: \" + docType);\n+                other++;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void startElement(int line, String name, Map<String, String> attrs, boolean selfClosing) {\n+    }\n+\n+    @Override\n+    public void endElement(int line, String name) {\n+    }\n+\n+    @Override\n+    public void report() {\n+        log.log(\"DocType Report\");\n+        if (xml > 0) {\n+            log.log(\"%6d: XHTML%n\", xml);\n+        }\n+        if (html5 > 0) {\n+            log.log(\"%6d: HTML5%n\", html5);\n+        }\n+        if (html5_legacy > 0) {\n+            log.log(\"%6d: HTML5 (legacy)%n\", html5_legacy);\n+        }\n+\n+        Map<Integer, Set<String>> sortedCounts = new TreeMap<>(Comparator.reverseOrder());\n+\n+        for (Map.Entry<String, Integer> e : counts.entrySet()) {\n+            String s = e.getKey();\n+            Integer n = e.getValue();\n+            Set<String> set = sortedCounts.computeIfAbsent(n, k -> new TreeSet<>());\n+            set.add(s);\n+        }\n+\n+        for (Map.Entry<Integer, Set<String>> e : sortedCounts.entrySet()) {\n+            for (String p : e.getValue()) {\n+                log.log(\"%6d: %s%n\", e.getKey(), p);\n+            }\n+        }\n+\n+        if (other > 0) {\n+            log.log(\"%6d: other\/unrecognized%n\", other);\n+        }\n+\n+        for (var line : log.getErrors()) {\n+            System.err.println(line);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOK() {\n+        return counts.isEmpty() && (other == 0);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (!isOK()) {\n+            report();\n+            throw new RuntimeException(\"Found HTML files with missing doctype declaration\");\n+        }\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/DocTypeChecker.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -0,0 +1,468 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils.checkers;\n+\n+\n+import doccheckutils.HtmlChecker;\n+import doccheckutils.Log;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+\/**\n+ * Checks the links defined by and referenced in HTML files.\n+ *\/\n+public class LinkChecker implements HtmlChecker {\n+\n+    private final Log log;\n+    private final Map<Path, IDTable> allFiles;\n+    private final Map<URI, IDTable> allURIs;\n+    \/\/ left for debugging\n+    private final boolean checkInwardReferencesOnly = false;\n+    private int files;\n+    private int links;\n+    private int duplicateIds;\n+    private int missingFiles;\n+    private int missingIds;\n+    private int badSchemes;\n+    private Path currFile;\n+    private IDTable currTable;\n+    private boolean html5;\n+    public LinkChecker() {\n+        this.log = new Log();\n+        allFiles = new HashMap<>();\n+        allURIs = new HashMap<>();\n+    }\n+\n+    public void setBaseDir(Path dir) {\n+        log.setBaseDirectory(dir);\n+    }\n+\n+    @Override\n+    public void startFile(Path path) {\n+        currFile = path.toAbsolutePath().normalize();\n+        currTable = allFiles.computeIfAbsent(currFile, p -> new IDTable(log.againstBaseDir(p)));\n+        html5 = false;\n+        files++;\n+    }\n+\n+    @Override\n+    public void endFile() {\n+        currTable.check();\n+    }\n+\n+\n+    \/\/unused\n+    public List<Path> getUncheckedFiles() {\n+        return allFiles.entrySet().stream()\n+                .filter(e -> !e.getValue().checked\n+                        && e.getKey().toString().endsWith(\".html\")\n+                        && Files.exists(e.getKey()))\n+                .map(Map.Entry::getKey)\n+                .toList();\n+    }\n+\n+    public List<Path> getMissingFiles() {\n+        return allFiles.keySet().stream()\n+                .filter(idTable -> !Files.exists(idTable)).toList();\n+    }\n+\n+    @Override\n+    public void xml(int line, Map<String, String> attrs) {\n+    }\n+\n+    @Override\n+    public void docType(int line, String doctype) {\n+        html5 = doctype.matches(\"(?i)<\\\\?doctype\\\\s+html>\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"fallthrough\")\n+    public void startElement(int line, String name, Map<String, String> attrs, boolean selfClosing) {\n+        switch (name) {\n+            case \"a\":\n+                String nameAttr = html5 ? null : attrs.get(\"name\");\n+                if (nameAttr != null) {\n+                    foundAnchor(line, nameAttr);\n+                }\n+                \/\/ fallthrough\n+            case \"link\":\n+                String href = attrs.get(\"href\");\n+                if (href != null && !checkInwardReferencesOnly) {\n+                    foundReference(line, href);\n+                }\n+                break;\n+        }\n+\n+        String idAttr = attrs.get(\"id\");\n+        if (idAttr != null) {\n+            foundAnchor(line, idAttr);\n+        }\n+    }\n+\n+    @Override\n+    public void endElement(int line, String name) {\n+    }\n+\n+    @Override\n+    public void content(int line, String content) {\n+        HtmlChecker.super.content(line, content);\n+    }\n+\n+    @Override\n+    public void report() {\n+        List<Path> pathList = getMissingFiles();\n+        log.log(\"\");\n+        log.log(\"Link Checker Report\");\n+\n+        if (!pathList.isEmpty()) {\n+            log.log(\"\");\n+            log.log(\"Missing files: (\" + pathList.size() + \")\");\n+            pathList.stream()\n+                    .sorted()\n+                    .forEach(this::reportMissingFile);\n+        }\n+\n+        int anchors = 0;\n+        for (IDTable t : allFiles.values()) {\n+            anchors += t.map.values().stream()\n+                    .filter(e -> !e.getReferences().isEmpty())\n+                    .count();\n+        }\n+        for (IDTable t : allURIs.values()) {\n+            anchors += t.map.values().stream()\n+                    .filter(e -> !e.references.isEmpty())\n+                    .count();\n+        }\n+\n+        log.log(\"Checked \" + files + \" files.\");\n+        log.log(\"Found \" + links + \" references to \" + anchors + \" anchors \"\n+                + \"in \" + allFiles.size() + \" files and \" + allURIs.size() + \" other URIs.\");\n+        if (!pathList.isEmpty()) {\n+            log.log(\"%6d missing files\", pathList.size());\n+        }\n+        if (duplicateIds > 0) {\n+            log.log(\"%6d duplicate ids\", duplicateIds);\n+\n+        }\n+        if (missingIds > 0) {\n+            log.log(\"%6d missing ids\", missingIds);\n+\n+        }\n+\n+        Map<String, Integer> hostCounts = new TreeMap<>(new HostComparator());\n+        for (URI uri : allURIs.keySet()) {\n+            String host = uri.getHost();\n+            if (host != null) {\n+                hostCounts.put(host, hostCounts.computeIfAbsent(host, h -> 0) + 1);\n+            }\n+        }\n+\n+        if (hostCounts.size() > 0) {\n+            log.log(\"\");\n+            log.log(\"Hosts\");\n+            hostCounts.forEach((h, n) -> log.log(\"%6d %s\", n, h));\n+        }\n+\n+\n+        for (String message : log.getErrors()) {\n+            System.err.println(message);\n+        }\n+\n+    }\n+\n+    private void reportMissingFile(Path file) {\n+        log.log(log.againstBaseDir(file).toString());\n+        IDTable table = allFiles.get(file);\n+        Set<Path> refs = new TreeSet<>();\n+        for (IDInfo id : table.map.values()) {\n+            if (id.references != null) {\n+                for (Position ref : id.references) {\n+                    refs.add(ref.path);\n+                }\n+            }\n+        }\n+        int n = 0;\n+        int MAX_REFS = 10;\n+        for (Path ref : refs) {\n+            log.log(\"    in \" + log.againstBaseDir(ref));\n+            if (++n == MAX_REFS) {\n+                log.log(\"    ... and %d more\", refs.size() - n);\n+                break;\n+            }\n+        }\n+        missingFiles++;\n+    }\n+\n+    @Override\n+    public boolean isOK() {\n+        return duplicateIds == 0\n+                && missingIds == 0\n+                && missingFiles == 0\n+                && badSchemes == 0;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        report();\n+        if (!isOK()) {\n+            throw new RuntimeException(\n+                    \"LinkChecker encountered errors. Duplicate IDs: \"\n+                            + duplicateIds + \", Missing IDs: \" + missingIds\n+                            + \", Missing Files: \" + missingFiles + \", Bad Schemes: \" + badSchemes);\n+        }\n+    }\n+\n+    private void foundAnchor(int line, String name) {\n+        currTable.addID(line, name);\n+    }\n+\n+    private void foundReference(int line, String ref) {\n+        links++;\n+        try {\n+            String uriPath = ref;\n+            String fragment = null;\n+\n+            \/\/ The checker runs into a problem with links that have more than one hash character.\n+            \/\/ You cannot create a URI unless you convert the second hash character into\n+\n+            int firstHashIndex = ref.indexOf('#');\n+            int lastHashIndex = ref.lastIndexOf('#');\n+            if (firstHashIndex != -1 && firstHashIndex != lastHashIndex) {\n+                uriPath = ref.substring(0, firstHashIndex);\n+                fragment = ref.substring(firstHashIndex + 1).replace(\"#\", \"%23\");\n+            } else if (firstHashIndex != -1) {\n+                uriPath = ref.substring(0, firstHashIndex);\n+                fragment = ref.substring(firstHashIndex + 1);\n+            }\n+\n+            URI uri = new URI(uriPath);\n+            if (fragment != null) {\n+                uri = new URI(uri + \"#\" + fragment);\n+            }\n+\n+            if (uri.isAbsolute()) {\n+                foundReference(line, uri);\n+            } else {\n+                Path p;\n+                String resolvedUriPath = uri.getPath();\n+                if (resolvedUriPath == null || resolvedUriPath.isEmpty()) {\n+                    p = currFile;\n+                } else {\n+                    p = currFile.getParent().resolve(resolvedUriPath).normalize();\n+                }\n+\n+                if (fragment != null && !fragment.isEmpty()) {\n+                    foundReference(line, p, fragment);\n+                }\n+            }\n+        } catch (URISyntaxException e) {\n+            log.log(currFile, line, \"invalid URI: \" + e);\n+            System.err.println(\"Failed to create URI: \" + ref);\n+        }\n+    }\n+\n+\n+    private void foundReference(int line, Path p, String fragment) {\n+        IDTable t = allFiles.computeIfAbsent(p, key -> new IDTable(log.againstBaseDir(key)));\n+        t.addReference(fragment, currFile, line);\n+    }\n+\n+    private void foundReference(int line, URI uri) {\n+        if (!isSchemeOK(uri.getScheme()) && !checkInwardReferencesOnly) {\n+            log.log(currFile, line, \"bad scheme in URI\");\n+            badSchemes++;\n+        }\n+\n+        String fragment = uri.getRawFragment();\n+        if (fragment != null && !fragment.isEmpty()) {\n+            try {\n+                URI noFrag = new URI(uri.toString().replaceAll(\"#\\\\Q\" + fragment + \"\\\\E$\", \"\"));\n+                IDTable t = allURIs.computeIfAbsent(noFrag, IDTable::new);\n+                t.addReference(fragment, currFile, line);\n+            } catch (URISyntaxException e) {\n+                throw new Error(e);\n+            }\n+        }\n+    }\n+\n+    private boolean isSchemeOK(String uriScheme) {\n+        if (uriScheme == null) {\n+            return true;\n+        }\n+\n+        return switch (uriScheme) {\n+            case \"ftp\", \"http\", \"https\", \"javascript\" -> true;\n+            default -> false;\n+        };\n+    }\n+\n+    static class Position implements Comparable<Position> {\n+        Path path;\n+        int line;\n+\n+        Position(Path path, int line) {\n+            this.path = path;\n+            this.line = line;\n+        }\n+\n+        @Override\n+        public int compareTo(Position o) {\n+            int v = path.compareTo(o.path);\n+            return v != 0 ? v : Integer.compare(line, o.line);\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            } else if (obj == null || getClass() != obj.getClass()) {\n+                return false;\n+            } else {\n+                final Position other = (Position) obj;\n+                return Objects.equals(this.path, other.path)\n+                        && this.line == other.line;\n+            }\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hashCode(path) * 37 + line;\n+        }\n+    }\n+\n+    static class IDInfo {\n+        boolean declared;\n+        Set<Position> references;\n+\n+        Set<Position> getReferences() {\n+            return references == null ? Collections.emptySet() : references;\n+        }\n+    }\n+\n+    static class URIComparator implements Comparator<URI> {\n+        final HostComparator hostComparator = new HostComparator();\n+\n+        @Override\n+        public int compare(URI o1, URI o2) {\n+            if (o1.isOpaque() || o2.isOpaque()) {\n+                return o1.compareTo(o2);\n+            }\n+            String h1 = o1.getHost();\n+            String h2 = o2.getHost();\n+            String s1 = o1.getScheme();\n+            String s2 = o2.getScheme();\n+            if (h1 == null || h1.isEmpty() || s1 == null || s1.isEmpty()\n+                    || h2 == null || h2.isEmpty() || s2 == null || s2.isEmpty()) {\n+                return o1.compareTo(o2);\n+            }\n+            int v = hostComparator.compare(h1, h2);\n+            if (v != 0) {\n+                return v;\n+            }\n+            v = s1.compareTo(s2);\n+            if (v != 0) {\n+                return v;\n+            }\n+            return o1.compareTo(o2);\n+        }\n+    }\n+\n+    static class HostComparator implements Comparator<String> {\n+        @Override\n+        public int compare(String h1, String h2) {\n+            List<String> l1 = new ArrayList<>(Arrays.asList(h1.split(\"\\\\.\")));\n+            Collections.reverse(l1);\n+            String r1 = String.join(\".\", l1);\n+            List<String> l2 = new ArrayList<>(Arrays.asList(h2.split(\"\\\\.\")));\n+            Collections.reverse(l2);\n+            String r2 = String.join(\".\", l2);\n+            return r1.compareTo(r2);\n+        }\n+    }\n+\n+    class IDTable {\n+        private final Map<String, IDInfo> map = new HashMap<>();\n+        private final String pathOrURI;\n+        private boolean checked;\n+\n+        IDTable(Path path) {\n+            this.pathOrURI = path.toString();\n+        }\n+\n+        IDTable(URI uri) {\n+            this.pathOrURI = uri.toString();\n+        }\n+\n+        void addID(int line, String name) {\n+            if (checked) {\n+                throw new IllegalStateException(\"Adding ID after file has been\");\n+            }\n+            Objects.requireNonNull(name);\n+            IDInfo info = map.computeIfAbsent(name, _ -> new IDInfo());\n+            if (info.declared) {\n+                if (info.references != null || !checkInwardReferencesOnly) {\n+                    \/\/ don't report error if we're only checking inbound references\n+                    \/\/ and there are no references to this ID.\n+                    log.log(log.againstBaseDir(currFile), line, \"name already declared: \" + name);\n+                    duplicateIds++;\n+                }\n+            } else {\n+                info.declared = true;\n+            }\n+        }\n+\n+        void addReference(String name, Path from, int line) {\n+            if (checked) {\n+                if (name != null) {\n+                    IDInfo id = map.get(name);\n+                    if (id == null || !id.declared) {\n+                        log.log(log.againstBaseDir(from), line, \"id not found: \" + this.pathOrURI + \"#\" + name);\n+                    }\n+                }\n+            } else {\n+                IDInfo id = map.computeIfAbsent(name, x -> new IDInfo());\n+                if (id.references == null) {\n+                    id.references = new TreeSet<>();\n+                }\n+                id.references.add(new Position(from, line));\n+            }\n+        }\n+\n+        void check() {\n+            map.forEach((name, id) -> {\n+                if (name != null && !id.declared) {\n+                    for (Position ref : id.references) {\n+                        log.log(log.againstBaseDir(ref.path), ref.line, \"id not found: \" + this.pathOrURI + \"#\" + name);\n+                    }\n+                    missingIds++;\n+                }\n+            });\n+            checked = true;\n+        }\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/LinkChecker.java","additions":468,"deletions":0,"binary":false,"changes":468,"status":"added"},{"patch":"@@ -0,0 +1,260 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package doccheckutils.checkers;\n+\n+\n+import doccheckutils.FileChecker;\n+import doccheckutils.Log;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.MessageFormat;\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class TidyChecker implements FileChecker, AutoCloseable {\n+    private final Path TIDY;\n+    Map<Pattern, Integer> counts = new HashMap<>();\n+    Pattern okPattern = Pattern.compile(\"No warnings or errors were found.\");\n+    Pattern countPattern = Pattern.compile(\"([0-9]+) warnings, ([0-9]+) errors were found!.*?(Not all warnings\/errors were shown.)?\");\n+    Pattern countPattern2 = Pattern.compile(\"Tidy found ([0-9]+) warning[s]? and ([0-9]+) error[s]?!.*?(Not all warnings\/errors were shown.)?\");\n+    Pattern cssPattern = Pattern.compile(\"You are recommended to use CSS.*\");\n+    Pattern guardPattern = Pattern.compile(\"(line [0-9]+ column [0-9]+ - |[^:]+:[0-9]+:[0-9]+: )(Error|Warning):.*\");\n+\n+    Pattern[] patterns = {\n+            Pattern.compile(\".*Error: <.*> is not recognized!\"),\n+            Pattern.compile(\".*Error: missing quote mark for attribute value\"),\n+            Pattern.compile(\".*Warning: '<' \\\\+ '\/' \\\\+ letter not allowed here\"),\n+            Pattern.compile(\".*Warning: <.*> anchor \\\".*\\\" already defined\"),\n+            Pattern.compile(\".*Warning: <.*> attribute \\\".*\\\" has invalid value \\\".*\\\"\"),\n+            Pattern.compile(\".*Warning: <.*> attribute \\\".*\\\" lacks value\"),\n+            Pattern.compile(\".*Warning: <.*> attribute \\\".*\\\" lacks value\"),\n+            Pattern.compile(\".*Warning: <.*> attribute with missing trailing quote mark\"),\n+            Pattern.compile(\".*Warning: <.*> dropping value \\\".*\\\" for repeated attribute \\\".*\\\"\"),\n+            Pattern.compile(\".*Warning: <.*> inserting \\\".*\\\" attribute\"),\n+            Pattern.compile(\".*Warning: <.*> is probably intended as <\/.*>\"),\n+            Pattern.compile(\".*Warning: <.*> isn't allowed in <.*> elements\"),\n+            Pattern.compile(\".*Warning: <.*> lacks \\\".*\\\" attribute\"),\n+            Pattern.compile(\".*Warning: <.*> missing '>' for end of tag\"),\n+            Pattern.compile(\".*Warning: <.*> proprietary attribute \\\".*\\\"\"),\n+            Pattern.compile(\".*Warning: <.*> unexpected or duplicate quote mark\"),\n+            Pattern.compile(\".*Warning: <a> id and name attribute value mismatch\"),\n+            Pattern.compile(\".*Warning: <a> cannot copy name attribute to id\"),\n+            Pattern.compile(\".*Warning: <a> escaping malformed URI reference\"),\n+            Pattern.compile(\".*Warning: <blockquote> proprietary attribute \\\"pre\\\"\"),\n+            Pattern.compile(\".*Warning: discarding unexpected <.*>\"),\n+            Pattern.compile(\".*Warning: discarding unexpected <\/.*>\"),\n+            Pattern.compile(\".*Warning: entity \\\".*\\\" doesn't end in ';'\"),\n+            Pattern.compile(\".*Warning: inserting implicit <.*>\"),\n+            Pattern.compile(\".*Warning: inserting missing 'title' element\"),\n+            Pattern.compile(\".*Warning: missing <!DOCTYPE> declaration\"),\n+            Pattern.compile(\".*Warning: missing <.*>\"),\n+            Pattern.compile(\".*Warning: missing <\/.*> before <.*>\"),\n+            Pattern.compile(\".*Warning: nested emphasis <.*>\"),\n+            Pattern.compile(\".*Warning: plain text isn't allowed in <.*> elements\"),\n+            Pattern.compile(\".*Warning: removing whitespace preceding XML Declaration\"),\n+            Pattern.compile(\".*Warning: replacing <p> (by|with) <br>\"),\n+            Pattern.compile(\".*Warning: replacing invalid numeric character reference .*\"),\n+            Pattern.compile(\".*Warning: replacing obsolete element <xmp> with <pre>\"),\n+            Pattern.compile(\".*Warning: replacing unexpected .* (by|with) <\/.*>\"),\n+            Pattern.compile(\".*Warning: trimming empty <.*>\"),\n+            Pattern.compile(\".*Warning: unescaped & or unknown entity \\\".*\\\"\"),\n+            Pattern.compile(\".*Warning: unescaped & which should be written as &amp;\"),\n+            Pattern.compile(\".*Warning: using <br> in place of <p>\"),\n+            Pattern.compile(\".*Warning: <.*> element removed from HTML5\"),\n+            Pattern.compile(\".*Warning: <.*> attribute \\\".*\\\" not allowed for HTML5\"),\n+            Pattern.compile(\".*Warning: The summary attribute on the <table> element is obsolete in HTML5\"),\n+            Pattern.compile(\".*Warning: replacing invalid UTF-8 bytes \\\\(char. code U\\\\+.*\\\\)\")\n+    };\n+    private final Log errors;\n+    private int files = 0;\n+    private int ok;\n+    private int warns;\n+    private int errs;\n+    private int css;\n+    private int overflow;\n+\n+    public TidyChecker() {\n+        TIDY = initTidy();\n+        errors = new Log();\n+    }\n+\n+    @Override\n+    public void checkFiles(List<Path> sb) {\n+        files += sb.size();\n+        try {\n+            for (int i = 0; i < sb.size(); i += 1024) {\n+                List<String> command = new ArrayList<>();\n+                command.add(TIDY.toString());\n+                command.add(\"-q\");\n+                command.add(\"-e\");\n+                command.add(\"--gnu-emacs\");\n+                command.add(\"true\");\n+                List<Path> sublist = sb.subList(i, Math.min(i + 1024, sb.size()));\n+                for (Path p : sublist) {\n+                    command.add(p.toString());\n+                }\n+                Process p = new ProcessBuilder()\n+                        .command(command)\n+                        .redirectErrorStream(true)\n+                        .start();\n+                try (BufferedReader r =\n+                             new BufferedReader(new InputStreamReader(p.getInputStream(), StandardCharsets.UTF_8))) {\n+                    String line;\n+                    while ((line = r.readLine()) != null) {\n+                        checkLine(line);\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private Path initTidy() {\n+        Path tidyExePath;\n+        String tidyProperty = System.getProperty(\"tidy\");\n+        if (tidyProperty != null) {\n+            tidyExePath = Path.of(tidyProperty);\n+            if (!Files.exists(tidyExePath)) {\n+                System.err.println(\"tidy not found: \" + tidyExePath);\n+            }\n+            if (!Files.isExecutable(tidyExePath)) {\n+                System.err.println(\"tidy not executable: \" + tidyExePath);\n+            }\n+        } else {\n+            boolean isWindows = System.getProperty(\"os.name\")\n+                    .toLowerCase(Locale.US)\n+                    .startsWith(\"windows\");\n+            String tidyExe = isWindows ? \"tidy.exe\" : \"tidy\";\n+            Optional<Path> p = Stream.of(System.getenv(\"PATH\")\n+                            .split(File.pathSeparator))\n+                    .map(Path::of)\n+                    .map(d -> d.resolve(tidyExe))\n+                    .filter(Files::exists)\n+                    .filter(Files::isExecutable)\n+                    .findFirst();\n+            if (p.isPresent()) {\n+                tidyExePath = p.get();\n+            } else {\n+                System.err.println(\"tidy not found on PATH\");\n+                return Path.of(\"tidy\"); \/\/non-null placeholder return; exception would be better\n+            }\n+        }\n+\n+        try {\n+            Process p = new ProcessBuilder()\n+                    .command(tidyExePath.toString(), \"-version\")\n+                    .redirectErrorStream(true)\n+                    .start();\n+            try (BufferedReader r =\n+                         new BufferedReader(new InputStreamReader(p.getInputStream(), StandardCharsets.UTF_8))) {\n+                List<String> lines = r.lines().collect(Collectors.toList());\n+                \/\/ Look for a line containing \"version\" and a dotted identifier beginning 5.\n+                \/\/ If not found, look for known old\/bad versions, to report in error message\n+                Pattern version = Pattern.compile(\"version.* [5678]\\\\.\\\\d+(\\\\.\\\\d+)\");\n+                if (lines.stream().noneMatch(line -> version.matcher(line).find())) {\n+                    Pattern oldVersion = Pattern.compile(\"2006\");  \/\/ 2006 implies old macOS version\n+                    String lineSep = System.lineSeparator();\n+                    String message = lines.stream().anyMatch(line -> oldVersion.matcher(line).find())\n+                            ? \"old version of 'tidy' found on the PATH\\n\"\n+                            : \"could not determine the version of 'tidy' on the PATH\\n\";\n+                    System.err.println(message + String.join(lineSep, lines));\n+                }\n+            }\n+        } catch (IOException e) {\n+            System.err.println(\"Could not execute 'tidy -version': \" + e);\n+        }\n+\n+        return tidyExePath;\n+    }\n+\n+    @Override\n+    public void report() {\n+        if (files > 0) {\n+            System.err.println(\"Tidy found errors in the generated HTML\");\n+            if (!errors.noErrors()) {\n+                for (String s : errors.getErrors()) {\n+                    System.err.println(s);\n+                }\n+                System.err.println(\"Tidy output end.\");\n+                System.err.println();\n+                System.err.println();\n+                throw new RuntimeException(\"Tidy found errors in the generated HTML\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOK() {\n+        return (ok == files)\n+                && (overflow == 0)\n+                && (errs == 0)\n+                && (warns == 0)\n+                && (css == 0);\n+    }\n+\n+    void checkLine(String line) {\n+        Matcher m;\n+        if (okPattern.matcher(line).matches()) {\n+            ok++;\n+        } else if ((m = countPattern.matcher(line)).matches() || (m = countPattern2.matcher(line)).matches()) {\n+            warns += Integer.parseInt(m.group(1));\n+            errs += Integer.parseInt(m.group(2));\n+            if (m.group(3) != null)\n+                overflow++;\n+        } else if (guardPattern.matcher(line).matches()) {\n+            boolean found = false;\n+            for (Pattern p : patterns) {\n+                if (p.matcher(line).matches()) {\n+                    errors.log(\"%s\", line);\n+                    found = true;\n+                    count(p);\n+                    break;\n+                }\n+            }\n+            if (!found)\n+                errors.log(\"unrecognized line: \" + line);\n+        } else if (cssPattern.matcher(line).matches()) {\n+            css++;\n+        }\n+    }\n+\n+    void count(Pattern p) {\n+        Integer i = counts.get(p);\n+        counts.put(p, (i == null) ? 1 : i + 1);\n+    }\n+\n+    @Override\n+    public void close() {\n+        report();\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/TidyChecker.java","additions":260,"deletions":0,"binary":false,"changes":260,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8337109\n+ * @summary Check doctype and character encoding on the full docs\n+ * @library \/test\/langtools\/tools\/lib ..\/..\/doccheck \/test\/lib ..\/..\/..\/..\/tools\/tester\n+ * @build DocTester toolbox.TestRunner\n+ * @run main\/othervm -Ddoccheck.dir= -Ddoccheck.checks=doctype,badchars DocCheck\n+ *\/\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/modules\/fullAPICheck.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8337109\n+ * @summary Running Doccheck on generated HTML\n+ * @library \/test\/langtools\/tools\/lib ..\/..\/doccheck \/test\/lib ..\/..\/..\/..\/tools\/tester\n+ * @build DocTester toolbox.TestRunner\n+ * @run main\/othervm -Ddoccheck.dir=api\/java.base -Ddoccheck.checks=links,html,badchars,doctype DocCheck\n+ *\/\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/modules\/jdkJavadocCheckDocs.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"}]}