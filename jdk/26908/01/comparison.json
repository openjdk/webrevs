{"files":[{"patch":"@@ -4095,1 +4095,1 @@\n-  const Klass* const super = this_klass->super();\n+  const InstanceKlass* const super = this_klass->java_super();\n@@ -4098,2 +4098,0 @@\n-    const InstanceKlass* super_ik = InstanceKlass::cast(super);\n-\n@@ -4101,1 +4099,1 @@\n-      classfile_icce_error(\"class %s cannot inherit from final class %s\", super_ik, THREAD);\n+      classfile_icce_error(\"class %s cannot inherit from final class %s\", super, THREAD);\n@@ -4105,1 +4103,1 @@\n-    if (super_ik->is_sealed()) {\n+    if (super->is_sealed()) {\n@@ -4108,1 +4106,1 @@\n-      if (!super_ik->has_as_permitted_subclass(this_klass, ss)) {\n+      if (!super->has_as_permitted_subclass(this_klass, ss)) {\n@@ -4115,1 +4113,1 @@\n-      Reflection::verify_class_access(this_klass, InstanceKlass::cast(super), false);\n+      Reflection::verify_class_access(this_klass, super, false);\n@@ -4119,1 +4117,1 @@\n-                                                      InstanceKlass::cast(super),\n+                                                      super,\n@@ -4221,1 +4219,1 @@\n-          super_m = InstanceKlass::cast(k)->lookup_method(name, signature);\n+          super_m = k->lookup_method(name, signature);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-    ik = ik->super() == nullptr ? nullptr : InstanceKlass::cast(ik->super());\n+    ik = ik->java_super() == nullptr ? nullptr : ik->java_super();\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1052,1 +1052,1 @@\n-    bool check_super = check_shared_class_super_type(ik, InstanceKlass::cast(ik->super()),\n+    bool check_super = check_shared_class_super_type(ik, ik->java_super(),\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-  Klass* super = klass->super();\n+  InstanceKlass* super = klass->java_super();\n@@ -231,1 +231,1 @@\n-    resolve_shared_class(InstanceKlass::cast(super), loader_data, domain, CHECK);\n+    resolve_shared_class(super, loader_data, domain, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-  InstanceKlass* const super = InstanceKlass::cast(ik->super());\n+  InstanceKlass* const super = ik->java_super();\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    ik = (const InstanceKlass*)ik->super();\n+    ik = ik->java_super();\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2015,1 +2015,1 @@\n-    Klass* k = iklass->local_interfaces()->at(index);\n+    InstanceKlass* k = iklass->local_interfaces()->at(index);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-                                          const Klass* super_klass,\n+                                          const InstanceKlass* super_klass,\n@@ -587,1 +587,1 @@\n-                    InstanceKlass::cast(super_klass)->transitive_interfaces();\n+                    super_klass->transitive_interfaces();\n@@ -680,1 +680,1 @@\n-  deallocate_interfaces(loader_data, super(), local_interfaces(), transitive_interfaces());\n+  deallocate_interfaces(loader_data, java_super(), local_interfaces(), transitive_interfaces());\n@@ -945,1 +945,1 @@\n-  Klass* super_klass = super();\n+  InstanceKlass* super_klass = java_super();\n@@ -960,2 +960,1 @@\n-    InstanceKlass* ik_super = InstanceKlass::cast(super_klass);\n-    ik_super->link_class_impl(CHECK_false);\n+    super_klass->link_class_impl(CHECK_false);\n@@ -1808,1 +1807,1 @@\n-    Klass* intf1 = local_interfaces()->at(i);\n+    InstanceKlass* intf1 = local_interfaces()->at(i);\n@@ -1811,1 +1810,1 @@\n-    if (InstanceKlass::cast(intf1)->find_local_field(name, sig, fd)) {\n+    if (intf1->find_local_field(name, sig, fd)) {\n@@ -1816,1 +1815,1 @@\n-    Klass* intf2 = InstanceKlass::cast(intf1)->find_interface_field(name, sig, fd);\n+    Klass* intf2 = intf1->find_interface_field(name, sig, fd);\n@@ -1835,2 +1834,2 @@\n-  { Klass* supr = super();\n-    if (supr != nullptr) return InstanceKlass::cast(supr)->find_field(name, sig, fd);\n+  { InstanceKlass* supr = java_super();\n+    if (supr != nullptr) return supr->find_field(name, sig, fd);\n@@ -1855,2 +1854,2 @@\n-  { Klass* supr = super();\n-    if (supr != nullptr) return InstanceKlass::cast(supr)->find_field(name, sig, is_static, fd);\n+  { InstanceKlass* supr = java_super();\n+    if (supr != nullptr) return supr->find_field(name, sig, is_static, fd);\n@@ -1875,1 +1874,1 @@\n-  Klass* klass = const_cast<InstanceKlass*>(this);\n+  const InstanceKlass* klass = this;\n@@ -1877,1 +1876,1 @@\n-    if (InstanceKlass::cast(klass)->find_local_field_from_offset(offset, is_static, fd)) {\n+    if (klass->find_local_field_from_offset(offset, is_static, fd)) {\n@@ -1880,1 +1879,1 @@\n-    klass = klass->super();\n+    klass = klass->java_super();\n@@ -1923,1 +1922,1 @@\n-  InstanceKlass* super = superklass();\n+  InstanceKlass* super = java_super();\n@@ -1940,1 +1939,1 @@\n-  InstanceKlass* super = superklass();\n+  InstanceKlass* super = java_super();\n@@ -2235,1 +2234,1 @@\n-  const Klass* klass = this;\n+  const InstanceKlass* klass = this;\n@@ -2237,5 +2236,5 @@\n-    Method* const method = InstanceKlass::cast(klass)->find_method_impl(name,\n-                                                                        signature,\n-                                                                        overpass_local_mode,\n-                                                                        StaticLookupMode::find,\n-                                                                        private_mode);\n+    Method* const method = klass->find_method_impl(name,\n+                                                   signature,\n+                                                   overpass_local_mode,\n+                                                   StaticLookupMode::find,\n+                                                   private_mode);\n@@ -2245,1 +2244,1 @@\n-    klass = klass->super();\n+    klass = klass->java_super();\n@@ -2255,1 +2254,1 @@\n-  const Klass* klass = this;\n+  const InstanceKlass* klass = this;\n@@ -2257,1 +2256,1 @@\n-    if (InstanceKlass::cast(klass)->has_been_redefined()) {\n+    if (klass->has_been_redefined()) {\n@@ -2260,1 +2259,1 @@\n-    klass = klass->super();\n+    klass = klass->java_super();\n@@ -3989,1 +3988,1 @@\n-                       p2i(this),  p2i(superklass()));\n+                       p2i(this),  p2i(java_super()));\n@@ -3997,1 +3996,1 @@\n-                           p2i(InstanceKlass::cast(local_interfaces()->at(i))));\n+                           p2i(local_interfaces()->at(i)));\n@@ -4210,1 +4209,0 @@\n-\n@@ -4215,1 +4213,1 @@\n-JNIid::JNIid(Klass* holder, int offset, JNIid* next) {\n+JNIid::JNIid(InstanceKlass* holder, int offset, JNIid* next) {\n@@ -4222,1 +4220,0 @@\n-\n@@ -4240,2 +4237,1 @@\n-\n-void JNIid::verify(Klass* holder) {\n+void JNIid::verify(InstanceKlass* holder) {\n@@ -4244,1 +4240,1 @@\n-  end_field_offset = first_field_offset + (InstanceKlass::cast(holder)->static_field_size() * wordSize);\n+  end_field_offset = first_field_offset + (holder->static_field_size() * wordSize);\n@@ -4557,1 +4553,1 @@\n-    _current = _current->superklass(); \/\/ backtrack; no more sibling subclasses left\n+    _current = _current->java_super(); \/\/ backtrack; no more sibling subclasses left\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":33,"deletions":37,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -991,1 +991,1 @@\n-                                    const Klass* super_klass,\n+                                    const InstanceKlass* super_klass,\n@@ -1208,1 +1208,1 @@\n-  Klass*             _holder;\n+  InstanceKlass*     _holder;\n@@ -1217,1 +1217,1 @@\n-  Klass* holder() const           { return _holder; }\n+  InstanceKlass* holder() const   { return _holder; }\n@@ -1221,1 +1221,1 @@\n-  JNIid(Klass* holder, int offset, JNIid* next);\n+  JNIid(InstanceKlass* holder, int offset, JNIid* next);\n@@ -1235,1 +1235,1 @@\n-  void verify(Klass* holder);\n+  void verify(InstanceKlass* holder);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -614,6 +614,0 @@\n-\/\/ superklass links\n-InstanceKlass* Klass::superklass() const {\n-  assert(super() == nullptr || super()->is_instance_klass(), \"must be instance klass\");\n-  return _super == nullptr ? nullptr : InstanceKlass::cast(_super);\n-}\n-\n@@ -682,2 +676,2 @@\n-  \/\/ add ourselves to superklass' subklass list\n-  InstanceKlass* super = superklass();\n+  \/\/ add ourselves to super' subklass list\n+  InstanceKlass* super = java_super();\n@@ -686,1 +680,1 @@\n-          && (super->superklass() == nullptr || !is_interface())),\n+          && (super->java_super() == nullptr || !is_interface())),\n@@ -695,1 +689,1 @@\n-      \/\/ set our sibling to be the superklass' previous first subklass\n+      \/\/ set our sibling to be the super' previous first subklass\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -300,1 +300,0 @@\n-  InstanceKlass* superklass() const;\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    GrowableArray<Method*>* all_mirandas, const Klass* super,\n+    GrowableArray<Method*>* all_mirandas, const InstanceKlass* super,\n@@ -349,1 +349,1 @@\n-    superk = superk->super() == nullptr ? nullptr : InstanceKlass::cast(superk->super());\n+    superk = superk->java_super();\n@@ -634,1 +634,1 @@\n-                                         const Klass* super,\n+                                         const InstanceKlass* super,\n@@ -686,1 +686,1 @@\n-  const Klass* k = super;\n+  const InstanceKlass* k = super;\n@@ -725,1 +725,1 @@\n-      k = superk->super(); \/\/ haven't found an override match yet; continue to look\n+      k = superk->java_super(); \/\/ haven't found an override match yet; continue to look\n@@ -744,3 +744,2 @@\n-  const InstanceKlass *sk = InstanceKlass::cast(super);\n-  if (sk->has_miranda_methods()) {\n-    if (sk->lookup_method_in_all_interfaces(name, signature, Klass::DefaultsLookupMode::find) != nullptr) {\n+  if (super->has_miranda_methods()) {\n+    if (super->lookup_method_in_all_interfaces(name, signature, Klass::DefaultsLookupMode::find) != nullptr) {\n@@ -778,1 +777,1 @@\n-    if (is_miranda(m, ik()->methods(), ik()->default_methods(), ik()->super(), klass()->is_interface())) {\n+    if (is_miranda(m, ik()->methods(), ik()->default_methods(), ik()->java_super(), klass()->is_interface())) {\n@@ -840,1 +839,1 @@\n-                             Array<Method*>* default_methods, const Klass* super,\n+                             Array<Method*>* default_methods, const InstanceKlass* super,\n@@ -869,6 +868,5 @@\n-  for (const Klass* cursuper = super; cursuper != nullptr; cursuper = cursuper->super())\n-  {\n-     Method* found_mth = InstanceKlass::cast(cursuper)->find_local_method(name, signature,\n-                                                                          Klass::OverpassLookupMode::find,\n-                                                                          Klass::StaticLookupMode::skip,\n-                                                                          Klass::PrivateLookupMode::skip);\n+  for (const InstanceKlass* cursuper = super; cursuper != nullptr; cursuper = cursuper->java_super()) {\n+     Method* found_mth = cursuper->find_local_method(name, signature,\n+                                                     Klass::OverpassLookupMode::find,\n+                                                     Klass::StaticLookupMode::skip,\n+                                                     Klass::PrivateLookupMode::skip);\n@@ -896,1 +894,1 @@\n-    Array<Method*>* default_methods, const Klass* super, bool is_interface) {\n+    Array<Method*>* default_methods, const InstanceKlass* super, bool is_interface) {\n@@ -916,1 +914,0 @@\n-        const InstanceKlass *sk = InstanceKlass::cast(super);\n@@ -918,1 +915,1 @@\n-        if (sk->lookup_method_in_all_interfaces(im->name(), im->signature(), Klass::DefaultsLookupMode::find) == nullptr) {\n+        if (super->lookup_method_in_all_interfaces(im->name(), im->signature(), Klass::DefaultsLookupMode::find) == nullptr) {\n@@ -931,1 +928,1 @@\n-                               const Klass* super,\n+                               const InstanceKlass* super,\n@@ -965,1 +962,1 @@\n-  get_mirandas(&mirandas, nullptr, ik()->super(), ik()->methods(),\n+  get_mirandas(&mirandas, nullptr, ik()->java_super(), ik()->methods(),\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-                                                   const Klass* super,\n+                                                   const InstanceKlass* super,\n@@ -119,1 +119,1 @@\n-                                     const Klass* super,\n+                                     const InstanceKlass* super,\n@@ -138,1 +138,1 @@\n-                         Array<Method*>* default_methods, const Klass* super,\n+                         Array<Method*>* default_methods, const InstanceKlass* super,\n@@ -146,1 +146,1 @@\n-      const Klass* super,\n+      const InstanceKlass* super,\n@@ -151,1 +151,1 @@\n-      const Klass* super,\n+      const InstanceKlass* super,\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1180,1 +1180,1 @@\n-      Klass* k = InstanceKlass::cast(klass)->local_interfaces()->at(index);\n+      InstanceKlass* k = InstanceKlass::cast(klass)->local_interfaces()->at(index);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1479,1 +1479,1 @@\n-  InstanceKlass* super = klass->superklass();\n+  InstanceKlass* super = klass->java_super();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-  nonstatic_field(JNIid,                       _holder,                                       Klass*)                                \\\n+  nonstatic_field(JNIid,                       _holder,                                       InstanceKlass*)                        \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}