{"files":[{"patch":"@@ -38,1 +38,0 @@\n-import java.lang.module.ModuleDescriptor.Version;\n@@ -43,0 +42,1 @@\n+import java.util.Optional;\n@@ -65,0 +65,1 @@\n+    private final ArrayList<Consumer<ClassBuilder>> amendments = new ArrayList<>();\n@@ -73,2 +74,9 @@\n-        var mdBuilder = new ModuleDescriptorBuilder(cob, moduleInfo.descriptor(), moduleInfo.packages(), index);\n-        mdBuilder.load();\n+        var mdBuilder = new ModuleDescriptorBuilder(moduleInfo.descriptor(), moduleInfo.packages(), index);\n+        mdBuilder.load(cob);\n+        if (mdBuilder.doesRequireSetup()) {\n+            amendments.add(mdBuilder::setup);\n+        }\n+    }\n+\n+    public void finish(ClassBuilder clb) {\n+        amendments.forEach(a -> a.accept(clb));\n@@ -122,1 +130,0 @@\n-        final CodeBuilder cob;\n@@ -128,1 +135,1 @@\n-        ModuleDescriptorBuilder(CodeBuilder cob, ModuleDescriptor md, Set<String> packages, int index) {\n+        ModuleDescriptorBuilder(ModuleDescriptor md, Set<String> packages, int index) {\n@@ -132,1 +139,2 @@\n-            this.cob = cob;\n+\n+\n@@ -138,0 +146,73 @@\n+        private LoadableArray requiresArray() {\n+            var requiresArray = LoadableArray.of(\n+                    CD_REQUIRES,\n+                    sorted(md.requires()),\n+                    this::newRequires,\n+                    PAGING_THRESHOLD,\n+                    ownerClassDesc,\n+                    \"module\" + index + \"Requires\",\n+                    \/\/ number safe for a single page helper under 64K size limit\n+                    2000);\n+\n+            setupLoadable(requiresArray);\n+            return requiresArray;\n+        }\n+\n+        private LoadableArray exportArray() {\n+            var exportArray = LoadableArray.of(\n+                    CD_EXPORTS,\n+                    sorted(md.exports()),\n+                    this::loadExports,\n+                    PAGING_THRESHOLD,\n+                    ownerClassDesc,\n+                    \"module\" + index + \"Exports\",\n+                    \/\/ number safe for a single page helper under 64K size limit\n+                    2000);\n+\n+            setupLoadable(exportArray);\n+            return exportArray;\n+        }\n+\n+        private LoadableArray opensArray() {\n+            var opensArray = LoadableArray.of(\n+                    CD_OPENS,\n+                    sorted(md.opens()),\n+                    this::newOpens,\n+                    PAGING_THRESHOLD,\n+                    ownerClassDesc,\n+                    \"module\" + index + \"Opens\",\n+                    \/\/ number safe for a single page helper under 64K size limit\n+                    2000);\n+\n+            setupLoadable(opensArray);\n+            return opensArray;\n+        }\n+\n+        private LoadableArray providesArray() {\n+            var providesArray = LoadableArray.of(\n+                    CD_PROVIDES,\n+                    sorted(md.provides()),\n+                    this::newProvides,\n+                    PAGING_THRESHOLD,\n+                    ownerClassDesc,\n+                    \"module\" + index + \"Provides\",\n+                    \/\/ number safe for a single page helper under 64K size limit\n+                    2000);\n+\n+            setupLoadable(providesArray);\n+            return providesArray;\n+        }\n+\n+        private LoadableSet packagesSet() {\n+            var packagesSet = LoadableSet.of(\n+                    sorted(packages),\n+                    STRING_LOADER,\n+                    PAGING_THRESHOLD,\n+                    ownerClassDesc,\n+                    \"module\" + index + \"Packages\",\n+                    STRING_PAGE_SIZE);\n+\n+            setupLoadable(packagesSet);\n+            return packagesSet;\n+        }\n+\n@@ -146,0 +227,4 @@\n+        boolean doesRequireSetup() {\n+            return amendment != null;\n+        }\n+\n@@ -147,1 +232,1 @@\n-            amendment.accept(clb);\n+            if (amendment != null) amendment.accept(clb);\n@@ -150,1 +235,1 @@\n-        void load() {\n+        void load(CodeBuilder cob) {\n@@ -152,1 +237,15 @@\n-            newBuilder();\n+            cob.new_(CD_MODULE_BUILDER)\n+               .dup()\n+               .loadConstant(md.name())\n+               .invokespecial(CD_MODULE_BUILDER,\n+                              INIT_NAME,\n+                              MTD_void_String);\n+            if (md.isOpen()) {\n+                setModuleBit(cob, \"open\", true);\n+            }\n+            if (md.modifiers().contains(ModuleDescriptor.Modifier.SYNTHETIC)) {\n+                setModuleBit(cob, \"synthetic\", true);\n+            }\n+            if (md.modifiers().contains(ModuleDescriptor.Modifier.MANDATED)) {\n+                setModuleBit(cob, \"mandated\", true);\n+            }\n@@ -155,1 +254,4 @@\n-            requires(md.requires());\n+            requiresArray().load(cob);\n+            cob.invokevirtual(CD_MODULE_BUILDER,\n+                              \"requires\",\n+                              MTD_REQUIRES_ARRAY);\n@@ -158,1 +260,4 @@\n-            exports(md.exports());\n+            exportArray().load(cob);\n+            cob.invokevirtual(CD_MODULE_BUILDER,\n+                    \"exports\",\n+                    MTD_EXPORTS_ARRAY);\n@@ -161,1 +266,4 @@\n-            opens(md.opens());\n+            opensArray().load(cob);\n+            cob.invokevirtual(CD_MODULE_BUILDER,\n+                              \"opens\",\n+                              MTD_OPENS_ARRAY);\n@@ -164,1 +272,4 @@\n-            uses(md.uses());\n+            dedupSetBuilder.loadStringSet(cob, md.uses());\n+            cob.invokevirtual(CD_MODULE_BUILDER,\n+                              \"uses\",\n+                              MTD_SET);\n@@ -167,1 +278,4 @@\n-            provides(md.provides());\n+            providesArray().load(cob);\n+            cob.invokevirtual(CD_MODULE_BUILDER,\n+                              \"provides\",\n+                              MTD_PROVIDES_ARRAY);\n@@ -170,1 +284,4 @@\n-            packages(packages);\n+            packagesSet().load(cob);\n+            cob.invokevirtual(CD_MODULE_BUILDER,\n+                              \"packages\",\n+                              MTD_SET);\n@@ -173,1 +290,1 @@\n-            md.version().ifPresent(this::version);\n+            md.version().ifPresent(v -> setModuleProperty(cob, \"version\", v.toString()));\n@@ -176,12 +293,1 @@\n-            md.mainClass().ifPresent(this::mainClass);\n-\n-            loadModuleDescriptor();\n-        }\n-\n-        void newBuilder() {\n-            cob.new_(CD_MODULE_BUILDER)\n-               .dup()\n-               .loadConstant(md.name())\n-               .invokespecial(CD_MODULE_BUILDER,\n-                              INIT_NAME,\n-                              MTD_void_String);\n+            md.mainClass().ifPresent(cn -> setModuleProperty(cob, \"mainClass\", cn));\n@@ -189,9 +295,4 @@\n-            if (md.isOpen()) {\n-                setModuleBit(\"open\", true);\n-            }\n-            if (md.modifiers().contains(ModuleDescriptor.Modifier.SYNTHETIC)) {\n-                setModuleBit(\"synthetic\", true);\n-            }\n-            if (md.modifiers().contains(ModuleDescriptor.Modifier.MANDATED)) {\n-                setModuleBit(\"mandated\", true);\n-            }\n+            cob.loadConstant(md.hashCode())\n+               .invokevirtual(CD_MODULE_BUILDER,\n+                              \"build\",\n+                              MTD_ModuleDescriptor_int);\n@@ -203,3 +304,2 @@\n-        void setModuleBit(String methodName, boolean value) {\n-            cob.dup()\n-               .loadConstant(value ? 1 : 0)\n+        void setModuleBit(CodeBuilder cob, String methodName, boolean value) {\n+            cob.loadConstant(value ? 1 : 0)\n@@ -208,2 +308,1 @@\n-                              MTD_BOOLEAN)\n-               .pop();\n+                              MTD_BOOLEAN);\n@@ -212,6 +311,2 @@\n-        \/*\n-         * Put ModuleDescriptor into the modules array\n-         *\/\n-        void loadModuleDescriptor() {\n-            cob\n-               .loadConstant(md.hashCode())\n+        void setModuleProperty(CodeBuilder cob, String methodName, String value) {\n+            cob.loadConstant(value)\n@@ -219,30 +314,2 @@\n-                              \"build\",\n-                              MTD_ModuleDescriptor_int);\n-        }\n-\n-        \/*\n-         * Call Builder::newRequires to create Requires instances and\n-         * then pass it to the builder by calling:\n-         *      Builder.requires(Requires[])\n-         *\n-         *\/\n-        void requires(Set<Requires> requires) {\n-            cob.dup()\n-               .loadConstant(requires.size())\n-               .anewarray(CD_REQUIRES);\n-            int arrayIndex = 0;\n-            for (Requires require : sorted(requires)) {\n-                String compiledVersion = null;\n-                if (require.compiledVersion().isPresent()) {\n-                    compiledVersion = require.compiledVersion().get().toString();\n-                }\n-\n-                cob.dup()               \/\/ arrayref\n-                   .loadConstant(arrayIndex++);\n-                newRequires(require.modifiers(), require.name(), compiledVersion);\n-                cob.aastore();\n-            }\n-            cob.invokevirtual(CD_MODULE_BUILDER,\n-                              \"requires\",\n-                              MTD_REQUIRES_ARRAY)\n-                .pop();\n+                              methodName,\n+                              MTD_STRING);\n@@ -257,5 +324,5 @@\n-        void newRequires(Set<Requires.Modifier> mods, String name, String compiledVersion) {\n-            dedupSetBuilder.loadRequiresModifiers(cob, mods);\n-            cob.loadConstant(name);\n-            if (compiledVersion != null) {\n-                cob.loadConstant(compiledVersion)\n+        void newRequires(CodeBuilder cob, Requires require, int unused) {\n+            dedupSetBuilder.loadRequiresModifiers(cob, require.modifiers());\n+            cob.loadConstant(require.name());\n+            if (require.compiledVersion().isPresent()) {\n+                cob.loadConstant(require.compiledVersion().get().toString())\n@@ -272,27 +339,0 @@\n-        \/*\n-         * Call Builder::newExports to create Exports instances and\n-         * then pass it to the builder by calling:\n-         *      Builder.exports(Exports[])\n-         *\n-         *\/\n-        void exports(Set<Exports> exports) {\n-            var exportArray = LoadableArray.of(\n-                    CD_EXPORTS,\n-                    sorted(exports),\n-                    this::loadExports,\n-                    PAGING_THRESHOLD,\n-                    ownerClassDesc,\n-                    \"module\" + index + \"Exports\",\n-                    \/\/ number safe for a single page helper under 64K size limit\n-                    2000);\n-\n-            setupLoadable(exportArray);\n-\n-            cob.dup();\n-            exportArray.load(cob);\n-            cob.invokevirtual(CD_MODULE_BUILDER,\n-                    \"exports\",\n-                    MTD_EXPORTS_ARRAY)\n-                    .pop();\n-        }\n-\n@@ -326,27 +366,0 @@\n-\n-        \/**\n-         * Call Builder::newOpens to create Opens instances and\n-         * then pass it to the builder by calling:\n-         * Builder.opens(Opens[])\n-         *\/\n-        void opens(Set<Opens> opens) {\n-            var opensArray = LoadableArray.of(\n-                    CD_OPENS,\n-                    sorted(opens),\n-                    this::newOpens,\n-                    PAGING_THRESHOLD,\n-                    ownerClassDesc,\n-                    \"module\" + index + \"Opens\",\n-                    \/\/ number safe for a single page helper under 64K size limit\n-                    2000);\n-\n-            setupLoadable(opensArray);\n-\n-            cob.dup();\n-            opensArray.load(cob);\n-            cob.invokevirtual(CD_MODULE_BUILDER,\n-                              \"opens\",\n-                              MTD_OPENS_ARRAY)\n-                .pop();\n-        }\n-\n@@ -381,39 +394,0 @@\n-        \/*\n-         * Invoke Builder.uses(Set<String> uses)\n-         *\/\n-        void uses(Set<String> uses) {\n-            cob.dup();\n-            dedupSetBuilder.loadStringSet(cob, uses);\n-            cob.invokevirtual(CD_MODULE_BUILDER,\n-                              \"uses\",\n-                              MTD_SET)\n-               .pop();\n-        }\n-\n-        \/*\n-        * Call Builder::newProvides to create Provides instances and\n-        * then pass it to the builder by calling:\n-        *      Builder.provides(Provides[] provides)\n-        *\n-        *\/\n-        void provides(Collection<Provides> provides) {\n-            var providesArray = LoadableArray.of(\n-                    CD_PROVIDES,\n-                    sorted(provides),\n-                    this::newProvides,\n-                    PAGING_THRESHOLD,\n-                    ownerClassDesc,\n-                    \"module\" + index + \"Provides\",\n-                    \/\/ number safe for a single page helper under 64K size limit\n-                    2000);\n-\n-            setupLoadable(providesArray);\n-\n-            cob.dup();\n-            providesArray.load(cob);\n-            cob.invokevirtual(CD_MODULE_BUILDER,\n-                              \"provides\",\n-                              MTD_PROVIDES_ARRAY)\n-                .pop();\n-        }\n-\n@@ -437,1 +411,0 @@\n-\n@@ -450,50 +423,0 @@\n-\n-        \/*\n-         * Invoke Builder.packages(Set<String> packages)\n-         * with packages either from invoke provider method\n-         *   module<index>Packages()\n-         * or construct inline with\n-         *   Set.of(packages)\n-         *\/\n-        void packages(Set<String> packages) {\n-            var packagesArray = LoadableSet.of(\n-                    sorted(packages),\n-                    STRING_LOADER,\n-                    PAGING_THRESHOLD,\n-                    ownerClassDesc,\n-                    \"module\" + index + \"Packages\",\n-                    STRING_PAGE_SIZE);\n-\n-            setupLoadable(packagesArray);\n-\n-            cob.dup();\n-            packagesArray.load(cob);\n-            cob.invokevirtual(CD_MODULE_BUILDER,\n-                              \"packages\",\n-                              MTD_SET)\n-               .pop();\n-        }\n-\n-        \/*\n-         * Invoke Builder.mainClass(String cn)\n-         *\/\n-        void mainClass(String cn) {\n-            cob.dup()\n-               .loadConstant(cn)\n-               .invokevirtual(CD_MODULE_BUILDER,\n-                              \"mainClass\",\n-                              MTD_STRING)\n-               .pop();\n-        }\n-\n-        \/*\n-         * Invoke Builder.version(Version v);\n-         *\/\n-        void version(Version v) {\n-            cob.dup()\n-               .loadConstant(v.toString())\n-               .invokevirtual(CD_MODULE_BUILDER,\n-                              \"version\",\n-                              MTD_STRING)\n-               .pop();\n-        }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ModuleInfoLoader.java","additions":150,"deletions":227,"binary":false,"changes":377,"status":"modified"},{"patch":"@@ -718,0 +718,1 @@\n+            var moduleInfoLoader = new ModuleInfoLoader(dedupSetBuilder, classDesc);\n@@ -721,1 +722,1 @@\n-                    new ModuleInfoLoader(dedupSetBuilder, classDesc),\n+                    moduleInfoLoader,\n@@ -727,0 +728,2 @@\n+            \/\/ This setup helpers needed by the LoadableArray, but element loader is responsible\n+            \/\/ to setup elements.\n@@ -737,0 +740,3 @@\n+\n+            \/\/ amend class with helpers needed by individual ModuleDescriptor\n+            moduleInfoLoader.finish(clb);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}