{"files":[{"patch":"@@ -69,1 +69,1 @@\n-         * The type of the reference be loaded onto the operatnd stack.\n+         * The type of the reference be loaded onto the operand stack.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Snippets.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1214,12 +1214,5 @@\n-             * SetReference count references to the set, and use an element loader, which is\n-             * a CodeBuilder that generate bytecode snippet to load an element onto the operand\n-             * stack, to generate bytecode to support loading the set onto operand stack.\n-             *\n-             * When a set size is over SET_SIZE_THRESHOLD, a provider function is generated\n-             * to build the set rather than inline to avoid method size overflow.\n-             *\n-             * When a set is referenced more than once, the set value is to be built once\n-             * and cached in an array to be load later.\n-             *\n-             * generateConstant method should be called to setup the provider methods and cache array.\n-             * load method can then be called to load the set onto the operand stack.\n+             * SetReference count references to the set, and use LoadableSet under the hood to\n+             * support paginiation as needed.\n+             * For sets referenced more than once, a cache is used to store the pre-built result\n+             * and load from there. Otherwise, the set is built in place and load onto the operand\n+             * stack.\n@@ -1259,4 +1252,1 @@\n-                \/\/ Otherwise, built the set in place with either\n-                \/\/   Set.of(elements)\n-                \/\/ or invoke the generated provider method\n-                \/\/   methodName()\n+                \/\/ Otherwise, LoadableSet will load the set onto the operand stack.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n- * @summary Make sure that ~20000 packages in a uber jar can be linked using jlink. Depends on the\n- *          packages, this is almost hit the 64K limitation as each plain export could take\n- *          ~17 bytecodes.\n+ * @summary Make sure that ~20000 packages in a uber jar can be linked using jlink. Now that\n+ *          pagination is in place, the limitation is on the constant pool size, not number\n+ *          of packages.\n","filename":"test\/jdk\/tools\/jlink\/JLink20000Packages.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}