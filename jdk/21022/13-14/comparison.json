{"files":[{"patch":"@@ -96,1 +96,1 @@\n-     * Describe a operand that can be load onto the operand stack.\n+     * Describe an operand that can be load onto the operand stack.\n@@ -175,1 +175,1 @@\n-         * Tested page size of string array\n+         * Default page size of string array\n@@ -180,1 +180,1 @@\n-         * Tested page size of enum array\n+         * Default page size of enum array\n@@ -190,1 +190,1 @@\n-         * Arbitary default values based on 15K code size on ~30 bytes per element\n+         * Default threshold based on 15K code size on ~30 bytes per element\n@@ -198,3 +198,3 @@\n-        \/\/ Default values enable pagination by default\n-        protected String methodNamePrefix = \"csb\" + Integer.toHexString(hashCode()) + \"Page\";\n-        protected int activatePagingThreshold = DEFAULT_THRESHOLD;\n+        \/\/ Default values, disable pagination by default\n+        protected String methodNamePrefix = null;\n+        protected int activatePagingThreshold = -1;\n@@ -278,0 +278,3 @@\n+            if (methodNamePrefix.isBlank()) {\n+                throw new IllegalArgumentException();\n+            }\n@@ -307,1 +310,1 @@\n-            return activatePagingThreshold > 0 && length > activatePagingThreshold;\n+            return methodNamePrefix != null && activatePagingThreshold > 0 && length > activatePagingThreshold;\n@@ -335,1 +338,1 @@\n-     *   methodNamePrefix0(new T[elements.size()]);\n+     *   methodNamePrefix_0(new T[elements.size()]);\n@@ -338,1 +341,1 @@\n-     *   T[] methodNamePrefix0(T[] ar) {\n+     *   T[] methodNamePrefix_0(T[] ar) {\n@@ -372,1 +375,1 @@\n-               .invokestatic(ownerClassDesc, methodNamePrefix + \"0\", MTD_PageHelper);\n+               .invokestatic(ownerClassDesc, methodNamePrefix + \"_0\", MTD_PageHelper);\n@@ -399,1 +402,1 @@\n-            clb.withMethodBody(methodNamePrefix + pageNo,\n+            clb.withMethodBody(methodNamePrefix + \"_\" + pageNo,\n@@ -408,1 +411,1 @@\n-                                    methodNamePrefix + (pageNo + 1),\n+                                    methodNamePrefix + \"_\" + (pageNo + 1),\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Snippets.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-import jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSet;\n+import jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSnippets;\n@@ -59,1 +59,1 @@\n-    private final DedupSet dedupSet;\n+    private final DedupSnippets dedupSnippets;\n@@ -63,1 +63,1 @@\n-    ModuleDescriptorBuilder(ClassBuilder clb, DedupSet dedupSet, ClassDesc ownerClassDesc) {\n+    ModuleDescriptorBuilder(ClassBuilder clb, DedupSnippets dedupSnippets, ClassDesc ownerClassDesc) {\n@@ -65,1 +65,1 @@\n-        this.dedupSet = dedupSet;\n+        this.dedupSnippets = dedupSnippets;\n@@ -148,1 +148,1 @@\n-                dedupSet.requiresModifiersSets().get(require.modifiers()).emit(cob);\n+                dedupSnippets.requiresModifiersSets().get(require.modifiers()).emit(cob);\n@@ -184,1 +184,1 @@\n-                dedupSet.exportsModifiersSets().get(export.modifiers()).emit(cob);\n+                dedupSnippets.exportsModifiersSets().get(export.modifiers()).emit(cob);\n@@ -188,1 +188,1 @@\n-                    dedupSet.stringSets().get(targets).emit(cob);\n+                    dedupSnippets.stringSets().get(targets).emit(cob);\n@@ -222,1 +222,1 @@\n-                dedupSet.opensModifiersSets().get(open.modifiers()).emit(cob);\n+                dedupSnippets.opensModifiersSets().get(open.modifiers()).emit(cob);\n@@ -226,1 +226,1 @@\n-                    dedupSet.stringSets().get(targets).emit(cob);\n+                    dedupSnippets.stringSets().get(targets).emit(cob);\n@@ -330,1 +330,1 @@\n-            dedupSet.stringSets().get(md.uses()).emit(cob);\n+            dedupSnippets.stringSets().get(md.uses()).emit(cob);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ModuleDescriptorBuilder.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1045,5 +1045,5 @@\n-        static record DedupSet(Map<Set<String>, Snippet> stringSets,\n-                               Map<Set<Requires.Modifier>, Snippet> requiresModifiersSets,\n-                               Map<Set<Opens.Modifier>, Snippet> opensModifiersSets,\n-                               Map<Set<Exports.Modifier>, Snippet> exportsModifiersSets,\n-                               Optional<Snippet> cacheSetupSnippet) {};\n+        static record DedupSnippets(Map<Set<String>, Snippet> stringSets,\n+                                    Map<Set<Requires.Modifier>, Snippet> requiresModifiersSets,\n+                                    Map<Set<Opens.Modifier>, Snippet> opensModifiersSets,\n+                                    Map<Set<Exports.Modifier>, Snippet> exportsModifiersSets,\n+                                    Optional<Snippet> cacheSetupSnippet) {};\n@@ -1055,2 +1055,2 @@\n-            final Map<Set<String>, SetReference<String>> stringSets = new HashMap<>();\n-            final Map<Set<Requires.Modifier>, SetReference<Requires.Modifier>>\n+            final Map<Set<String>, RefCounter<String>> stringSets = new HashMap<>();\n+            final Map<Set<Requires.Modifier>, RefCounter<Requires.Modifier>>\n@@ -1058,1 +1058,1 @@\n-            final Map<Set<Exports.Modifier>, SetReference<Exports.Modifier>>\n+            final Map<Set<Exports.Modifier>, RefCounter<Exports.Modifier>>\n@@ -1060,1 +1060,1 @@\n-            final Map<Set<Opens.Modifier>, SetReference<Opens.Modifier>>\n+            final Map<Set<Opens.Modifier>, RefCounter<Opens.Modifier>>\n@@ -1075,1 +1075,1 @@\n-                stringSets.computeIfAbsent(strings, SetReference<String>::new).increment();\n+                stringSets.computeIfAbsent(strings, RefCounter<String>::new).increment();\n@@ -1082,1 +1082,1 @@\n-                exportsModifiersSets.computeIfAbsent(mods, SetReference<Exports.Modifier>::new).increment();\n+                exportsModifiersSets.computeIfAbsent(mods, RefCounter<Exports.Modifier>::new).increment();\n@@ -1089,1 +1089,1 @@\n-                opensModifiersSets.computeIfAbsent(mods, SetReference::new).increment();\n+                opensModifiersSets.computeIfAbsent(mods, RefCounter::new).increment();\n@@ -1096,1 +1096,1 @@\n-                requiresModifiersSets.computeIfAbsent(mods, SetReference::new).increment();\n+                requiresModifiersSets.computeIfAbsent(mods, RefCounter::new).increment();\n@@ -1101,1 +1101,1 @@\n-             * Use cache if the set is references more than once.\n+             * Use cache if the set is referenced more than once.\n@@ -1103,1 +1103,1 @@\n-            private Snippet buildStringSet(ClassBuilder clb, SetReference<String> setRef) {\n+            private Snippet buildStringSet(ClassBuilder clb, RefCounter<String> setRef) {\n@@ -1109,1 +1109,1 @@\n-                                .build(Snippet.buildAll(setRef.elements(), Snippet::loadConstant)));\n+                                .build(Snippet.buildAll(setRef.sortedList(), Snippet::loadConstant)));\n@@ -1116,1 +1116,1 @@\n-            private Map<Set<String>, Snippet> buildStringSets(ClassBuilder clb, Map<Set<String>, SetReference<String>> map) {\n+            private Map<Set<String>, Snippet> buildStringSets(ClassBuilder clb, Map<Set<String>, RefCounter<String>> map) {\n@@ -1127,1 +1127,1 @@\n-            private <T extends Enum<T>> Snippet buildEnumSet(ClassBuilder clb, SetReference<T> setRef) {\n+            private <T extends Enum<T>> Snippet buildEnumSet(ClassBuilder clb, RefCounter<T> setRef) {\n@@ -1133,1 +1133,1 @@\n-                                .build(Snippet.buildAll(setRef.elements(), Snippet::loadEnum)));\n+                                .build(Snippet.buildAll(setRef.sortedList(), Snippet::loadEnum)));\n@@ -1136,1 +1136,1 @@\n-            private <T extends Enum<T>> Map<Set<T>, Snippet> buildEnumSets(ClassBuilder clb, Map<Set<T>, SetReference<T>> map) {\n+            private <T extends Enum<T>> Map<Set<T>, Snippet> buildEnumSets(ClassBuilder clb, Map<Set<T>, RefCounter<T>> map) {\n@@ -1147,2 +1147,2 @@\n-            DedupSet build(ClassBuilder clb) {\n-                return new DedupSet(\n+            DedupSnippets build(ClassBuilder clb) {\n+                return new DedupSnippets(\n@@ -1158,1 +1158,1 @@\n-             * SetReference count references to the set, and keeps sorted elements to ensure\n+             * RefCounter count references to the set, and keeps sorted elements to ensure\n@@ -1160,1 +1160,1 @@\n-             * SetReference itself needs ordering to ensure generate same bytecode for the cache.\n+             * RefCounter itself needs ordering to ensure generate same bytecode for the cache.\n@@ -1162,1 +1162,1 @@\n-            class SetReference<T extends Comparable<T>> implements Comparable<SetReference<T>> {\n+            class RefCounter<T extends Comparable<T>> implements Comparable<RefCounter<T>> {\n@@ -1167,1 +1167,1 @@\n-                SetReference(Set<T> elements) {\n+                RefCounter(Set<T> elements) {\n@@ -1179,1 +1179,1 @@\n-                List<T> elements() {\n+                List<T> sortedList() {\n@@ -1184,1 +1184,1 @@\n-                public int compareTo(SetReference<T> o) {\n+                public int compareTo(RefCounter<T> o) {\n@@ -1212,3 +1212,1 @@\n-                \/\/ Load the set to the operand stack.\n-                \/\/ When referenced more than once, the value is pre-built with static initialzer\n-                \/\/ and is load from the cache array with\n+                \/\/ Load the set from the cache to the operand stack\n@@ -1216,1 +1214,0 @@\n-                \/\/ Otherwise, LoadableSet will load the set onto the operand stack.\n@@ -1229,1 +1226,1 @@\n-                Snippet transform(SetReference<?> setRef, Snippet loadSnippet) {\n+                Snippet transform(RefCounter<?> setRef, Snippet loadSnippet) {\n@@ -1239,1 +1236,1 @@\n-                 * Facilitate the cache in the class. Return a snippet to populate the cache in <clinit>.\n+                 * Returns a snippet that populates the cached values in <clinit>.\n@@ -1248,1 +1245,1 @@\n-                 *     dedupSetValues[1] = dedupSet<setIndex>0(); \/\/ for paginated set\n+                 *     dedupSetValues[1] = dedupSet<setIndex>_0(); \/\/ for paginated set\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":32,"deletions":35,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+        Path imageDir = src.resolve(\"out-jlink\");\n@@ -109,1 +110,1 @@\n-                .output(src.resolve(\"out-jlink\"))\n+                .output(imageDir)\n@@ -114,1 +115,1 @@\n-        Path binDir = src.resolve(\"out-jlink\").resolve(\"bin\").toAbsolutePath();\n+        Path binDir = imageDir.resolve(\"bin\").toAbsolutePath();\n","filename":"test\/jdk\/tools\/jlink\/JLink20000Packages.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final boolean WRITE_CLASS_FILE = Boolean.parseBoolean(System.getProperty(\"DumpArraySnippetsTestClasses\", \"true\"));\n+    private static final boolean WRITE_CLASS_FILE = Boolean.parseBoolean(System.getProperty(\"DumpArraySnippetsTestClasses\", \"false\"));\n@@ -232,1 +232,1 @@\n-                lookup().findStatic(testClass, methodNamePrefix + 0, methodType);\n+                lookup().findStatic(testClass, methodNamePrefix + \"_0\", methodType);\n@@ -239,1 +239,1 @@\n-                lookup().findStatic(testClass, methodNamePrefix + i, methodType);\n+                lookup().findStatic(testClass, methodNamePrefix + \"_\" + i, methodType);\n","filename":"test\/jdk\/tools\/jlink\/SnippetsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}