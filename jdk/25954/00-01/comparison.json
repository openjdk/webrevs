{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Arm Limited. All rights reserved.\n@@ -27,0 +28,1 @@\n+#include \"code\/codeCache.hpp\"\n@@ -29,2 +31,2 @@\n-void CodeBuffer::share_rc_trampoline_for(address dest, int caller_offset) {\n-  if (_shared_rc_trampoline_requests == nullptr) {\n+void CodeBuffer::share_trampoline_for(TrampolineCallKind kind, address dest, int caller_offset) {\n+  if (_shared_trampoline_requests == nullptr) {\n@@ -33,1 +35,1 @@\n-    _shared_rc_trampoline_requests = new (mtCompiler)SharedRCTrampolineRequests(init_size, max_size);\n+    _shared_trampoline_requests = new (mtCompiler)SharedTrampolineRequests(init_size, max_size);\n@@ -37,1 +39,2 @@\n-  Offsets* offsets = _shared_rc_trampoline_requests->put_if_absent(dest, &created);\n+  Offsets *offsets =\n+      _shared_trampoline_requests->put_if_absent(SharedTrampolineRequestKey(kind, dest), &created);\n@@ -39,17 +42,1 @@\n-    _shared_rc_trampoline_requests->maybe_grow();\n-  }\n-  offsets->add(caller_offset);\n-  _finalize_stubs = true;\n-}\n-\n-void CodeBuffer::share_sc_trampoline_for(const ciMethod* callee, int caller_offset) {\n-  if (_shared_sc_trampoline_requests == nullptr) {\n-    constexpr unsigned init_size = 8;\n-    constexpr unsigned max_size  = 256;\n-    _shared_sc_trampoline_requests = new (mtCompiler)SharedSCTrampolineRequests(init_size, max_size);\n-  }\n-\n-  bool created;\n-  Offsets* offsets = _shared_sc_trampoline_requests->put_if_absent(callee, &created);\n-  if (created) {\n-    _shared_sc_trampoline_requests->maybe_grow();\n+    _shared_trampoline_requests->maybe_grow();\n@@ -63,20 +50,2 @@\n-static bool emit_shared_trampoline(CodeBuffer *cb, MacroAssembler &masm, address dest,\n-                                   const CodeBuffer::Offsets &offsets) {\n-  assert(cb->stubs()->remaining() >= MacroAssembler::max_trampoline_stub_size(),\n-         \"pre-allocated trampolines\");\n-  LinkedListIterator<int> it(offsets.head());\n-  int offset = *it.next();\n-  address stub = __ emit_trampoline_stub(offset, dest);\n-  assert(stub, \"pre-allocated trampolines\");\n-\n-  address reloc_pc = cb->stubs()->end() - NativeCallTrampolineStub::instruction_size;\n-  while (!it.is_empty()) {\n-    offset = *it.next();\n-    address caller_pc = cb->insts()->start() + offset;\n-    cb->stubs()->relocate(reloc_pc, trampoline_stub_Relocation::spec(caller_pc));\n-  }\n-  return true;\n-}\n-\n-static bool emit_shared_rc_trampolines(CodeBuffer* cb, CodeBuffer::SharedRCTrampolineRequests* requests) {\n-  if (requests == nullptr) {\n+bool CodeBuffer::emit_shared_trampolines() {\n+  if (_shared_trampoline_requests == nullptr) {\n@@ -86,18 +55,21 @@\n-  MacroAssembler masm(cb);\n-\n-  auto emit = [&](address dest, const CodeBuffer::Offsets &offsets) {\n-    return emit_shared_trampoline(cb, masm, dest, offsets);\n-  };\n-\n-  assert(requests->number_of_entries() >= 1, \"at least one\");\n-  const int total_requested_size = MacroAssembler::max_trampoline_stub_size() * requests->number_of_entries();\n-  if (cb->stubs()->maybe_expand_to_ensure_remaining(total_requested_size) && cb->blob() == nullptr) {\n-    return false;\n-  }\n-\n-  requests->iterate(emit);\n-  return true;\n-}\n-\n-static bool emit_shared_sc_trampolines(CodeBuffer* cb, CodeBuffer::SharedSCTrampolineRequests* requests) {\n-  if (requests == nullptr) {\n+  MacroAssembler masm(this);\n+\n+  auto emit = [&](SharedTrampolineRequestKey pair, const CodeBuffer::Offsets &offsets) {\n+    assert(stubs()->remaining() >= MacroAssembler::max_trampoline_stub_size(),\n+           \"pre-allocated trampolines\");\n+    TrampolineCallKind kind = pair.first;\n+    address dest = pair.second;\n+    LinkedListIterator<int> it(offsets.head());\n+    int offset = *it.next();\n+    if (kind == TrampolineCallKind::Static) {\n+      dest = SharedRuntime::get_resolve_static_call_stub();\n+    }\n+    address stub = __ emit_trampoline_stub(offset, dest);\n+    assert(stub, \"pre-allocated trampolines\");\n+\n+    address reloc_pc = stubs()->end() - NativeCallTrampolineStub::instruction_size;\n+    while (!it.is_empty()) {\n+      offset = *it.next();\n+      address caller_pc = insts()->start() + offset;\n+      stubs()->relocate(reloc_pc, trampoline_stub_Relocation::spec(caller_pc));\n+    }\n@@ -105,7 +77,0 @@\n-  }\n-\n-  MacroAssembler masm(cb);\n-\n-  const address dest = SharedRuntime::get_resolve_static_call_stub();\n-  auto emit = [&](const ciMethod* callee, const CodeBuffer::Offsets &offsets) {\n-    return emit_shared_trampoline(cb, masm, dest, offsets);\n@@ -114,3 +79,4 @@\n-  assert(requests->number_of_entries() >= 1, \"at least one\");\n-  const int total_requested_size = MacroAssembler::max_trampoline_stub_size() * requests->number_of_entries();\n-  if (cb->stubs()->maybe_expand_to_ensure_remaining(total_requested_size) && cb->blob() == nullptr) {\n+  assert(_shared_trampoline_requests->number_of_entries() >= 1, \"at least one\");\n+  const int total_requested_size =\n+      MacroAssembler::max_trampoline_stub_size() * _shared_trampoline_requests->number_of_entries();\n+  if (stubs()->maybe_expand_to_ensure_remaining(total_requested_size) && blob() == nullptr) {\n@@ -120,1 +86,1 @@\n-  requests->iterate(emit);\n+  _shared_trampoline_requests->iterate(emit);\n@@ -128,2 +94,1 @@\n-      && emit_shared_rc_trampolines(this, _shared_rc_trampoline_requests)\n-      && emit_shared_sc_trampolines(this, _shared_sc_trampoline_requests);\n+      && emit_shared_trampolines();\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":37,"deletions":72,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -37,2 +37,11 @@\n-  void share_rc_trampoline_for(address dest, int caller_offset);\n-  void share_sc_trampoline_for(const ciMethod* callee, int caller_offset);\n+ private:\n+  void share_trampoline_for(TrampolineCallKind kind, address dest, int caller_offset);\n+  bool emit_shared_trampolines();\n+\n+ public:\n+  void share_rc_trampoline_for(address dest, int caller_offset) {\n+    share_trampoline_for(TrampolineCallKind::Runtime, dest, caller_offset);\n+  }\n+  void share_sc_trampoline_for(const ciMethod *callee, int caller_offset) {\n+    share_trampoline_for(TrampolineCallKind::Static, (address)callee, caller_offset);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -144,5 +144,2 @@\n-  if (_shared_rc_trampoline_requests != nullptr) {\n-    delete _shared_rc_trampoline_requests;\n-  }\n-  if (_shared_sc_trampoline_requests != nullptr) {\n-    delete _shared_sc_trampoline_requests;\n+  if (_shared_trampoline_requests != nullptr) {\n+    delete _shared_trampoline_requests;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/pair.hpp\"\n@@ -544,2 +545,0 @@\n-  typedef ResizeableResourceHashtable<address, Offsets, AnyObj::C_HEAP, mtCompiler> SharedRCTrampolineRequests;\n-  typedef ResizeableResourceHashtable<const ciMethod*, Offsets, AnyObj::C_HEAP, mtCompiler> SharedSCTrampolineRequests;\n@@ -548,0 +547,6 @@\n+  enum class TrampolineCallKind { Runtime, Static };\n+  typedef Pair<TrampolineCallKind, address> SharedTrampolineRequestKey;\n+  typedef ResizeableResourceHashtable<SharedTrampolineRequestKey, Offsets, AnyObj::C_HEAP,\n+                                      mtCompiler>\n+      SharedTrampolineRequests;\n+\n@@ -574,2 +579,1 @@\n-  SharedRCTrampolineRequests*   _shared_rc_trampoline_requests;     \/\/ requests for shared trampolines owned by runtime calls\n-  SharedSCTrampolineRequests*   _shared_sc_trampoline_requests;     \/\/ requests for shared trampolines owned by static calls\n+  SharedTrampolineRequests*   _shared_trampoline_requests;     \/\/ used to collect requests for shared trampolines\n@@ -602,2 +606,1 @@\n-    _shared_rc_trampoline_requests = nullptr;\n-    _shared_sc_trampoline_requests = nullptr;\n+    _shared_trampoline_requests = nullptr;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -1317,1 +1318,8 @@\n-template<typename K> unsigned primitive_hash(const K& k) {\n+template <typename T, typename V, typename ALLOC_BASE> class Pair;\n+\n+template <typename T> struct is_pair : public std::false_type {};\n+template <typename T, typename V, typename ALLOC_BASE>\n+struct is_pair<Pair<T, V, ALLOC_BASE>> : public std::true_type {};\n+\n+template<typename K, ENABLE_IF(!is_pair<K>::value)>\n+unsigned primitive_hash(const K& k) {\n@@ -1322,0 +1330,8 @@\n+template<typename K, ENABLE_IF(is_pair<K>::value)> unsigned primitive_hash(const K& k) {\n+  unsigned ht = primitive_hash(k.first);\n+  unsigned hv = primitive_hash(k.second);\n+\n+  \/\/ rotate hv to ensure that h(a,b) != h(b,a)\n+  return ht ^ (hv << 1 | (hv >> (sizeof(unsigned) * BitsPerByte - 1)));\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-};\n@@ -40,0 +39,4 @@\n+  inline bool operator==(const Pair &other) const {\n+    return this->first == other.first && this->second == other.second;\n+  }\n+};\n","filename":"src\/hotspot\/share\/utilities\/pair.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @requires vm.opt.TieredCompilation == null\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedRuntimeCallTrampolineTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @requires vm.opt.TieredCompilation == null\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStaticCallTrampolineTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}