{"files":[{"patch":"@@ -4,0 +4,1 @@\n+\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2025, Arm Limited. All rights reserved.\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -39,1 +39,1 @@\n-  Offsets* offsets = _shared_trampoline_requests->put_if_absent(dest, &created);\n+  SharedTrampolineRequestsValue* value = _shared_trampoline_requests->put_if_absent(dest, &created);\n@@ -42,1 +42,1 @@\n-    offsets->first = rtype;\n+    value->rtype = rtype;\n@@ -44,1 +44,1 @@\n-    assert(offsets->first == rtype, \"same destination with another type already exists\");\n+    assert(value->rtype == rtype, \"same destination with another type already exists\");\n@@ -46,1 +46,1 @@\n-  offsets->second.add(caller_offset);\n+  value->offsets.add(caller_offset);\n@@ -59,1 +59,1 @@\n-  auto emit = [&](address dest, const CodeBuffer::Offsets &offsets) {\n+  auto emit = [&](address dest, const CodeBuffer::SharedTrampolineRequestsValue &value) {\n@@ -61,2 +61,2 @@\n-    relocInfo::relocType rtype = offsets.first;\n-    LinkedListIterator<int> it(offsets.second.head());\n+    relocInfo::relocType rtype = value.rtype;\n+    LinkedListIterator<int> it(value.offsets.head());\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -4,0 +4,1 @@\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -37,1 +38,0 @@\n- private:\n@@ -40,8 +40,0 @@\n- public:\n-  void share_rc_trampoline_for(address dest, int caller_offset) {\n-    share_trampoline_for(relocInfo::runtime_call_type, dest, caller_offset);\n-  }\n-  void share_sc_trampoline_for(const ciMethod *callee, int caller_offset) {\n-    share_trampoline_for(relocInfo::static_call_type, (address)callee, caller_offset);\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.hpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -908,1 +909,1 @@\n-        code()->share_rc_trampoline_for(entry.target(), offset());\n+        code()->share_trampoline_for(relocInfo::runtime_call_type, entry.target(), offset());\n@@ -911,1 +912,1 @@\n-        code()->share_sc_trampoline_for(callee, offset());\n+        code()->share_trampoline_for(relocInfo::static_call_type, (address)callee, offset());\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -36,1 +37,0 @@\n-#include \"utilities\/pair.hpp\"\n@@ -544,2 +544,6 @@\n-  typedef Pair<relocInfo::relocType, LinkedListImpl<int>> Offsets;\n-  typedef ResizeableResourceHashtable<address, Offsets, AnyObj::C_HEAP, mtCompiler> SharedTrampolineRequests;\n+  struct SharedTrampolineRequestsValue {\n+    relocInfo::relocType rtype;\n+    LinkedListImpl<int> offsets;\n+  };\n+  typedef ResizeableResourceHashtable<address, SharedTrampolineRequestsValue, AnyObj::C_HEAP, mtCompiler>\n+    SharedTrampolineRequests;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2025, Arm Limited. All rights reserved.\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedRuntimeCallTrampolineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2025, Arm Limited. All rights reserved.\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStaticCallTrampolineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}