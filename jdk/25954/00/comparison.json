{"files":[{"patch":"@@ -3671,1 +3671,1 @@\n-      call = __ trampoline_call(Address(addr, rspec));\n+      call = __ trampoline_call(Address(addr, rspec), _method);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n@@ -28,2 +29,2 @@\n-void CodeBuffer::share_trampoline_for(address dest, int caller_offset) {\n-  if (_shared_trampoline_requests == nullptr) {\n+void CodeBuffer::share_rc_trampoline_for(address dest, int caller_offset) {\n+  if (_shared_rc_trampoline_requests == nullptr) {\n@@ -32,1 +33,1 @@\n-    _shared_trampoline_requests = new (mtCompiler)SharedTrampolineRequests(init_size, max_size);\n+    _shared_rc_trampoline_requests = new (mtCompiler)SharedRCTrampolineRequests(init_size, max_size);\n@@ -36,1 +37,1 @@\n-  Offsets* offsets = _shared_trampoline_requests->put_if_absent(dest, &created);\n+  Offsets* offsets = _shared_rc_trampoline_requests->put_if_absent(dest, &created);\n@@ -38,1 +39,17 @@\n-    _shared_trampoline_requests->maybe_grow();\n+    _shared_rc_trampoline_requests->maybe_grow();\n+  }\n+  offsets->add(caller_offset);\n+  _finalize_stubs = true;\n+}\n+\n+void CodeBuffer::share_sc_trampoline_for(const ciMethod* callee, int caller_offset) {\n+  if (_shared_sc_trampoline_requests == nullptr) {\n+    constexpr unsigned init_size = 8;\n+    constexpr unsigned max_size  = 256;\n+    _shared_sc_trampoline_requests = new (mtCompiler)SharedSCTrampolineRequests(init_size, max_size);\n+  }\n+\n+  bool created;\n+  Offsets* offsets = _shared_sc_trampoline_requests->put_if_absent(callee, &created);\n+  if (created) {\n+    _shared_sc_trampoline_requests->maybe_grow();\n@@ -46,1 +63,19 @@\n-static bool emit_shared_trampolines(CodeBuffer* cb, CodeBuffer::SharedTrampolineRequests* requests) {\n+static bool emit_shared_trampoline(CodeBuffer *cb, MacroAssembler &masm, address dest,\n+                                   const CodeBuffer::Offsets &offsets) {\n+  assert(cb->stubs()->remaining() >= MacroAssembler::max_trampoline_stub_size(),\n+         \"pre-allocated trampolines\");\n+  LinkedListIterator<int> it(offsets.head());\n+  int offset = *it.next();\n+  address stub = __ emit_trampoline_stub(offset, dest);\n+  assert(stub, \"pre-allocated trampolines\");\n+\n+  address reloc_pc = cb->stubs()->end() - NativeCallTrampolineStub::instruction_size;\n+  while (!it.is_empty()) {\n+    offset = *it.next();\n+    address caller_pc = cb->insts()->start() + offset;\n+    cb->stubs()->relocate(reloc_pc, trampoline_stub_Relocation::spec(caller_pc));\n+  }\n+  return true;\n+}\n+\n+static bool emit_shared_rc_trampolines(CodeBuffer* cb, CodeBuffer::SharedRCTrampolineRequests* requests) {\n@@ -54,12 +89,15 @@\n-    assert(cb->stubs()->remaining() >= MacroAssembler::max_trampoline_stub_size(), \"pre-allocated trampolines\");\n-    LinkedListIterator<int> it(offsets.head());\n-    int offset = *it.next();\n-    address stub = __ emit_trampoline_stub(offset, dest);\n-    assert(stub, \"pre-allocated trampolines\");\n-\n-    address reloc_pc = cb->stubs()->end() - NativeCallTrampolineStub::instruction_size;\n-    while (!it.is_empty()) {\n-      offset = *it.next();\n-      address caller_pc = cb->insts()->start() + offset;\n-      cb->stubs()->relocate(reloc_pc, trampoline_stub_Relocation::spec(caller_pc));\n-    }\n+    return emit_shared_trampoline(cb, masm, dest, offsets);\n+  };\n+\n+  assert(requests->number_of_entries() >= 1, \"at least one\");\n+  const int total_requested_size = MacroAssembler::max_trampoline_stub_size() * requests->number_of_entries();\n+  if (cb->stubs()->maybe_expand_to_ensure_remaining(total_requested_size) && cb->blob() == nullptr) {\n+    return false;\n+  }\n+\n+  requests->iterate(emit);\n+  return true;\n+}\n+\n+static bool emit_shared_sc_trampolines(CodeBuffer* cb, CodeBuffer::SharedSCTrampolineRequests* requests) {\n+  if (requests == nullptr) {\n@@ -67,0 +105,7 @@\n+  }\n+\n+  MacroAssembler masm(cb);\n+\n+  const address dest = SharedRuntime::get_resolve_static_call_stub();\n+  auto emit = [&](const ciMethod* callee, const CodeBuffer::Offsets &offsets) {\n+    return emit_shared_trampoline(cb, masm, dest, offsets);\n@@ -83,1 +128,2 @@\n-      && emit_shared_trampolines(this, _shared_trampoline_requests);\n+      && emit_shared_rc_trampolines(this, _shared_rc_trampoline_requests)\n+      && emit_shared_sc_trampolines(this, _shared_sc_trampoline_requests);\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":65,"deletions":19,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,2 @@\n-  void share_trampoline_for(address dest, int caller_offset);\n+  void share_rc_trampoline_for(address dest, int caller_offset);\n+  void share_sc_trampoline_for(const ciMethod* callee, int caller_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -894,1 +894,1 @@\n-address MacroAssembler::trampoline_call(Address entry) {\n+address MacroAssembler::trampoline_call(Address entry, ciMethod* callee \/* = nullptr *\/) {\n@@ -908,1 +908,4 @@\n-        code()->share_trampoline_for(entry.target(), offset());\n+        code()->share_rc_trampoline_for(entry.target(), offset());\n+      } else if (entry.rspec().type() == relocInfo::static_call_type && callee != nullptr) {\n+        assert(CodeBuffer::supports_shared_stubs(), \"must support shared stubs\");\n+        code()->share_sc_trampoline_for(callee, offset());\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1336,0 +1336,4 @@\n+  \/\/ Trampolines may be emitted immediately or deferred until stub finalization,\n+  \/\/ enabling reuse across call sites to reduce code size.\n+  \/\/ Runtime call trampolines are shared based on the entry value.\n+  \/\/ Static call trampolines are shared by callee if it's not nullptr.\n@@ -1339,1 +1343,1 @@\n-  address trampoline_call(Address entry);\n+  address trampoline_call(Address entry, ciMethod* callee = nullptr);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -144,2 +144,5 @@\n-  if (_shared_trampoline_requests != nullptr) {\n-    delete _shared_trampoline_requests;\n+  if (_shared_rc_trampoline_requests != nullptr) {\n+    delete _shared_rc_trampoline_requests;\n+  }\n+  if (_shared_sc_trampoline_requests != nullptr) {\n+    delete _shared_sc_trampoline_requests;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -544,1 +544,2 @@\n-  typedef ResizeableResourceHashtable<address, Offsets, AnyObj::C_HEAP, mtCompiler> SharedTrampolineRequests;\n+  typedef ResizeableResourceHashtable<address, Offsets, AnyObj::C_HEAP, mtCompiler> SharedRCTrampolineRequests;\n+  typedef ResizeableResourceHashtable<const ciMethod*, Offsets, AnyObj::C_HEAP, mtCompiler> SharedSCTrampolineRequests;\n@@ -573,1 +574,2 @@\n-  SharedTrampolineRequests*   _shared_trampoline_requests;     \/\/ used to collect requests for shared trampolines\n+  SharedRCTrampolineRequests*   _shared_rc_trampoline_requests;     \/\/ requests for shared trampolines owned by runtime calls\n+  SharedSCTrampolineRequests*   _shared_sc_trampoline_requests;     \/\/ requests for shared trampolines owned by static calls\n@@ -600,1 +602,2 @@\n-    _shared_trampoline_requests = nullptr;\n+    _shared_rc_trampoline_requests = nullptr;\n+    _shared_sc_trampoline_requests = nullptr;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (c) 2025, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test SharedRuntimeCallTrampolineTest id=C2\n+ * @summary Checks that trampolines can be shared between runtime calls.\n+ * @bug 8280152\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.opt.TieredCompilation == null\n+ * @requires os.arch==\"aarch64\"\n+ * @requires vm.debug\n+ *\n+ * @run driver compiler.sharedstubs.SharedRuntimeCallTrampolineTest -XX:-TieredCompilation\n+ *\/\n+\n+package compiler.sharedstubs;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class SharedRuntimeCallTrampolineTest {\n+    private final static int ITERATIONS_TO_HEAT_LOOP = 20_000;\n+\n+    private static void runTest(String compiler, String test) throws Exception {\n+        String testClassName = SharedRuntimeCallTrampolineTest.class.getName() + \"$\" + test;\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(compiler);\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:+PrintRelocations\");\n+        command.add(\"-XX:CompileCommand=compileonly,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"test\");\n+        command.add(testClassName);\n+        command.add(\"a\");\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        System.out.println(analyzer.getOutput());\n+\n+        checkOutput(analyzer);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String[] tests = new String[] { \"RuntimeCallTest\" };\n+        for (String test : tests) {\n+            runTest(args[0], test);\n+        }\n+    }\n+\n+    private static String getTestMethodStdout(OutputAnalyzer output) {\n+        return Pattern.compile(\"Compiled method.*RuntimeCallTest::test\").split(output.getStdout(), 2)[1];\n+    }\n+\n+    private static void checkOutput(OutputAnalyzer output) {\n+        String testMethodStdout = getTestMethodStdout(output);\n+        List<String> callAddrs = Pattern.compile(\"\\\\(runtime_call\\\\) addr=(\\\\w+) .*\\\\[destination\")\n+                .matcher(testMethodStdout)\n+                .results()\n+                .map(m -> m.group(1))\n+                .toList();\n+\n+        record TrampolineReloc(String addr, String owner) {\n+        }\n+        List<TrampolineReloc> trampolineRelocs = Pattern\n+                .compile(\"\\\\(trampoline_stub\\\\) addr=(\\\\w+) .*\\\\[trampoline owner=(\\\\w+)]\")\n+                .matcher(testMethodStdout)\n+                .results()\n+                .map(m -> new TrampolineReloc(m.group(1), m.group(2)))\n+                .toList();\n+\n+        List<String> trampolineAddrs = trampolineRelocs.stream()\n+                .filter(reloc -> callAddrs.contains(reloc.owner()))\n+                .map(reloc -> new String(reloc.addr()))\n+                .collect(Collectors.toList());\n+        if (trampolineAddrs.stream().distinct().count() >= trampolineAddrs.size()) {\n+            throw new RuntimeException(\"No runtime trampoline stubs reused: distinct \"\n+                    + trampolineAddrs.stream().distinct().count() + \", in total \" + trampolineAddrs.size());\n+        }\n+    }\n+\n+    public static class RuntimeCallTest {\n+        private static volatile Object blackholeObj;\n+\n+        static class Dummy {\n+            int x;\n+\n+            Dummy(int x) {\n+                this.x = x;\n+            }\n+        }\n+\n+        static void test(int i) {\n+            Object obj = new Dummy(i);\n+            blackholeObj = obj;\n+            obj = new Dummy(i % 2);\n+            blackholeObj = obj;\n+        }\n+\n+        public static void main(String[] args) {\n+            for (int i = 1; i < ITERATIONS_TO_HEAT_LOOP; ++i) {\n+                test(i);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedRuntimeCallTrampolineTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (c) 2025, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test SharedStaticCallTrampolineTest id=C2\n+ * @summary Checks that trampolines can be shared between static calls.\n+ * @bug 8359359\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.opt.TieredCompilation == null\n+ * @requires os.arch==\"aarch64\"\n+ * @requires vm.debug\n+ *\n+ * @run driver compiler.sharedstubs.SharedStaticCallTrampolineTest -XX:-TieredCompilation\n+ *\/\n+\n+package compiler.sharedstubs;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.regex.MatchResult;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class SharedStaticCallTrampolineTest {\n+    private final static int ITERATIONS_TO_HEAT_LOOP = 20_000;\n+\n+    private static void runTest(String compiler, String test) throws Exception {\n+        String testClassName = SharedStaticCallTrampolineTest.class.getName() + \"$\" + test;\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(compiler);\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:+PrintRelocations\");\n+        command.add(\"-XX:CompileCommand=compileonly,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"foo\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"bar\");\n+        command.add(testClassName);\n+        command.add(\"a\");\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        System.out.println(analyzer.getOutput());\n+\n+        checkOutput(analyzer);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String[] tests = new String[] { \"StaticCallTest\" };\n+        for (String test : tests) {\n+            runTest(args[0], test);\n+        }\n+    }\n+\n+    private static String getTestMethodStdout(OutputAnalyzer output) {\n+        return Pattern.compile(\"Compiled method.*StaticCallTest::test\").split(output.getStdout(), 2)[1];\n+    }\n+\n+    private static void checkOutput(OutputAnalyzer output) {\n+        String testMethodStdout = getTestMethodStdout(output);\n+        List<String> callAddrs = Pattern.compile(\"\\\\(static_call\\\\) addr=(\\\\w+) .*\\\\[destination\")\n+                .matcher(testMethodStdout)\n+                .results()\n+                .map(m -> m.group(1))\n+                .toList();\n+\n+        record TrampolineReloc(String addr, String owner) {\n+        }\n+        List<TrampolineReloc> trampolineRelocs = Pattern\n+                .compile(\"\\\\(trampoline_stub\\\\) addr=(\\\\w+) .*\\\\[trampoline owner=(\\\\w+)]\")\n+                .matcher(testMethodStdout)\n+                .results()\n+                .map(m -> new TrampolineReloc(m.group(1), m.group(2)))\n+                .toList();\n+\n+        List<String> trampolineAddrs = trampolineRelocs.stream()\n+                .filter(reloc -> callAddrs.contains(reloc.owner()))\n+                .map(reloc -> new String(reloc.addr()))\n+                .collect(Collectors.toList());\n+        if (trampolineAddrs.stream().distinct().count() >= trampolineAddrs.size()) {\n+            throw new RuntimeException(\"No trampoline stubs shared across static calls: static calls \"\n+                    + callAddrs.size() + \", trampoline_stubs \" + trampolineAddrs.size());\n+        }\n+\n+        List<String> uniqueTrampolineAddrs = trampolineAddrs.stream()\n+                .filter(addr -> Collections.frequency(trampolineAddrs, addr) == 1)\n+                .collect(Collectors.toList());\n+        if (uniqueTrampolineAddrs.size() == 0) {\n+            throw new RuntimeException(\n+                    \"A trampoline stub is unexpectedly shared with a unique static call: static calls\"\n+                            + callAddrs.size() + \", trampoline_stubs \" + trampolineAddrs.size());\n+        }\n+    }\n+\n+    public static class StaticCallTest {\n+        private static void foo() {\n+        }\n+\n+        private static void bar() {\n+        }\n+\n+        static void test(int i, String[] args) {\n+            foo();\n+            foo();\n+            bar();\n+        }\n+\n+        public static void main(String[] args) {\n+            for (int i = 1; i < ITERATIONS_TO_HEAT_LOOP; ++i) {\n+                test(i, args);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStaticCallTrampolineTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test SharedTrampolineTest id=C2\n- * @summary Checks that trampolines can be shared for static method.\n- * @bug 8280152\n- * @library \/test\/lib\n- *\n- * @requires vm.compiler2.enabled\n- * @requires vm.opt.TieredCompilation == null\n- * @requires os.arch==\"aarch64\"\n- * @requires vm.debug\n- *\n- * @run driver compiler.sharedstubs.SharedTrampolineTest -XX:-TieredCompilation\n- *\/\n-\n-package compiler.sharedstubs;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class SharedTrampolineTest {\n-    private final static int ITERATIONS_TO_HEAT_LOOP = 20_000;\n-\n-    private static void runTest(String compiler, String test) throws Exception {\n-        String testClassName = SharedTrampolineTest.class.getName() + \"$\" + test;\n-        ArrayList<String> command = new ArrayList<String>();\n-        command.add(compiler);\n-        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n-        command.add(\"-Xbatch\");\n-        command.add(\"-XX:+PrintRelocations\");\n-        command.add(\"-XX:CompileCommand=compileonly,\" + testClassName + \"::\" + \"test\");\n-        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"test\");\n-        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"log\");\n-        command.add(testClassName);\n-        command.add(\"a\");\n-\n-        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(command);\n-\n-        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-\n-        analyzer.shouldHaveExitValue(0);\n-\n-        System.out.println(analyzer.getOutput());\n-\n-        checkOutput(analyzer);\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        String[] tests = new String[] {\"StaticMethodTest\"};\n-        for (String test : tests) {\n-            runTest(args[0], test);\n-        }\n-    }\n-\n-    private static void checkOutput(OutputAnalyzer output) {\n-        List<String> addrs = Pattern.compile(\"\\\\(trampoline_stub\\\\) addr=(\\\\w+) .*\\\\[trampoline owner\")\n-            .matcher(output.getStdout())\n-            .results()\n-            .map(m -> m.group(1))\n-            .toList();\n-        if (addrs.stream().distinct().count() >= addrs.size()) {\n-            throw new RuntimeException(\"No runtime trampoline stubs reused: distinct \" + addrs.stream().distinct().count() + \", in total \" + addrs.size());\n-        }\n-    }\n-\n-    public static class StaticMethodTest {\n-        private static void log(int i, String msg) {\n-        }\n-\n-        static void test(int i, String[] args) {\n-            if (i % args.length == 0) {\n-                log(i, \"args[0] = \" + args[0]);\n-            } else {\n-                log(i, \"No args\");\n-            }\n-        }\n-\n-        public static void main(String[] args) {\n-            for (int i = 1; i < ITERATIONS_TO_HEAT_LOOP; ++i) {\n-                test(i, args);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedTrampolineTest.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"}]}