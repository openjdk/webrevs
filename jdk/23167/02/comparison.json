{"files":[{"patch":"@@ -108,1 +108,1 @@\n-        previewHandler = new MandatoryWarningHandler(log, source, verbose, true, \"preview\", LintCategory.PREVIEW);\n+        previewHandler = new MandatoryWarningHandler(log, source, verbose, true, LintCategory.PREVIEW);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-                enforceMandatoryWarnings, \"deprecated\", LintCategory.DEPRECATION);\n+                enforceMandatoryWarnings, LintCategory.DEPRECATION, \"deprecated\");\n@@ -173,1 +173,1 @@\n-                enforceMandatoryWarnings, \"removal\", LintCategory.REMOVAL);\n+                enforceMandatoryWarnings, LintCategory.REMOVAL);\n@@ -175,3 +175,1 @@\n-                enforceMandatoryWarnings, \"unchecked\", LintCategory.UNCHECKED);\n-        sunApiHandler = new MandatoryWarningHandler(log, null, false,\n-                enforceMandatoryWarnings, \"sunapi\", null);\n+                enforceMandatoryWarnings, LintCategory.UNCHECKED);\n@@ -207,4 +205,0 @@\n-    \/** A handler for messages about using proprietary API.\n-     *\/\n-    private MandatoryWarningHandler sunApiHandler;\n-\n@@ -307,1 +301,0 @@\n-        sunApiHandler.reportDeferredDiagnostic();\n@@ -483,1 +476,0 @@\n-        sunApiHandler.clear();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+ * <p>\n@@ -52,0 +53,3 @@\n+ * <p>\n+ * All warnings must be in the same {@link LintCategory} provided to the constructor.\n+ *\n@@ -105,0 +109,18 @@\n+     *\n+     * @param log     The log on which to generate any diagnostics\n+     * @param source  Associated source file, or null for none\n+     * @param verbose Specify whether or not detailed messages about\n+     *                individual instances should be given, or whether an aggregate\n+     *                message should be generated at the end of the compilation.\n+     *                Typically set via  -Xlint:option.\n+     * @param enforceMandatory\n+     *                True if mandatory warnings and notes are being enforced.\n+     * @param lc      The lint category for all warnings\n+     *\/\n+    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, LintCategory lc) {\n+        this(log, source, verbose, enforceMandatory, lc, null);\n+    }\n+\n+    \/**\n+     * Create a handler for mandatory warnings.\n+     *\n@@ -106,0 +128,1 @@\n+     * @param source  Associated source file, or null for none\n@@ -112,3 +135,3 @@\n-     * @param prefix  A common prefix for the set of message keys for\n-     *                the messages that may be generated.\n-     * @param lc      An associated lint category for the warnings, or null if none.\n+     * @param lc      The lint category for all warnings\n+     * @param prefix  A common prefix for the set of message keys for the messages\n+     *                that may be generated, or null to infer from the lint category.\n@@ -116,3 +139,1 @@\n-    public MandatoryWarningHandler(Log log, Source source, boolean verbose,\n-                                   boolean enforceMandatory, String prefix,\n-                                   LintCategory lc) {\n+    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, LintCategory lc, String prefix) {\n@@ -122,1 +143,1 @@\n-        this.prefix = prefix;\n+        this.prefix = prefix != null ? prefix : lc.option;\n@@ -129,0 +150,3 @@\n+     *\n+     * @param pos source code position\n+     * @param warnKey lint warning\n@@ -261,2 +285,1 @@\n-    private void logMandatoryWarning(DiagnosticPosition pos, Warning warnKey) {\n-        \/\/ Note: the following log methods are safe if lintCategory is null.\n+    private void logMandatoryWarning(DiagnosticPosition pos, LintWarning warnKey) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningHandler.java","additions":33,"deletions":10,"binary":false,"changes":43,"status":"modified"}]}