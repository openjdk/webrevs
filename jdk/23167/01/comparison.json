{"files":[{"patch":"@@ -108,1 +108,1 @@\n-        previewHandler = new MandatoryWarningHandler(log, source, verbose, true, \"preview\", LintCategory.PREVIEW);\n+        previewHandler = new MandatoryWarningHandler(log, source, verbose, true);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,8 +170,3 @@\n-        deprecationHandler = new MandatoryWarningHandler(log, null, verboseDeprecated,\n-                enforceMandatoryWarnings, \"deprecated\", LintCategory.DEPRECATION);\n-        removalHandler = new MandatoryWarningHandler(log, null, verboseRemoval,\n-                enforceMandatoryWarnings, \"removal\", LintCategory.REMOVAL);\n-        uncheckedHandler = new MandatoryWarningHandler(log, null, verboseUnchecked,\n-                enforceMandatoryWarnings, \"unchecked\", LintCategory.UNCHECKED);\n-        sunApiHandler = new MandatoryWarningHandler(log, null, false,\n-                enforceMandatoryWarnings, \"sunapi\", null);\n+        deprecationHandler = new MandatoryWarningHandler(log, null, verboseDeprecated, enforceMandatoryWarnings, \"deprecated\");\n+        removalHandler = new MandatoryWarningHandler(log, null, verboseRemoval, enforceMandatoryWarnings);\n+        uncheckedHandler = new MandatoryWarningHandler(log, null, verboseUnchecked, enforceMandatoryWarnings);\n@@ -207,4 +202,0 @@\n-    \/** A handler for messages about using proprietary API.\n-     *\/\n-    private MandatoryWarningHandler sunApiHandler;\n-\n@@ -307,1 +298,0 @@\n-        sunApiHandler.reportDeferredDiagnostic();\n@@ -483,1 +473,0 @@\n-        sunApiHandler.clear();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+ * <p>\n@@ -52,0 +53,3 @@\n+ * <p>\n+ * Instances assume all warnings will be in the same {@link LintCategory}.\n+ *\n@@ -105,0 +109,17 @@\n+     *\n+     * @param log     The log on which to generate any diagnostics\n+     * @param source  Associated source file, or null for none\n+     * @param verbose Specify whether or not detailed messages about\n+     *                individual instances should be given, or whether an aggregate\n+     *                message should be generated at the end of the compilation.\n+     *                Typically set via  -Xlint:option.\n+     * @param enforceMandatory\n+     *                True if mandatory warnings and notes are being enforced.\n+     *\/\n+    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory) {\n+        this(log, source, verbose, enforceMandatory, null);\n+    }\n+\n+    \/**\n+     * Create a handler for mandatory warnings.\n+     *\n@@ -106,0 +127,1 @@\n+     * @param source  Associated source file, or null for none\n@@ -112,3 +134,2 @@\n-     * @param prefix  A common prefix for the set of message keys for\n-     *                the messages that may be generated.\n-     * @param lc      An associated lint category for the warnings, or null if none.\n+     * @param prefix  A common prefix for the set of message keys for the messages\n+     *                that may be generated, or null to infer from the lint category.\n@@ -116,3 +137,1 @@\n-    public MandatoryWarningHandler(Log log, Source source, boolean verbose,\n-                                   boolean enforceMandatory, String prefix,\n-                                   LintCategory lc) {\n+    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, String prefix) {\n@@ -124,1 +143,0 @@\n-        this.lintCategory = lc;\n@@ -129,0 +147,3 @@\n+     *\n+     * @param pos source code position\n+     * @param warnKey lint warning\n@@ -132,1 +153,4 @@\n-        Assert.check(warnKey.getLintCategory() == lintCategory);\n+\n+        \/\/ Infer the log prefix from the lint category if not given explicitly\n+        if (prefix == null)\n+            prefix = warnKey.getLintCategory().option;\n@@ -214,1 +238,1 @@\n-    private final String prefix;\n+    private String prefix;\n@@ -251,6 +275,0 @@\n-    \/**\n-     * A LintCategory to be included in point-of-use diagnostics to indicate\n-     * how messages might be suppressed (i.e. with @SuppressWarnings).\n-     *\/\n-    private final LintCategory lintCategory;\n-\n@@ -261,2 +279,1 @@\n-    private void logMandatoryWarning(DiagnosticPosition pos, Warning warnKey) {\n-        \/\/ Note: the following log methods are safe if lintCategory is null.\n+    private void logMandatoryWarning(DiagnosticPosition pos, LintWarning warnKey) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningHandler.java","additions":35,"deletions":18,"binary":false,"changes":53,"status":"modified"}]}