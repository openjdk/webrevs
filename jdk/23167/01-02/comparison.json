{"files":[{"patch":"@@ -108,1 +108,1 @@\n-        previewHandler = new MandatoryWarningHandler(log, source, verbose, true);\n+        previewHandler = new MandatoryWarningHandler(log, source, verbose, true, LintCategory.PREVIEW);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,3 +170,6 @@\n-        deprecationHandler = new MandatoryWarningHandler(log, null, verboseDeprecated, enforceMandatoryWarnings, \"deprecated\");\n-        removalHandler = new MandatoryWarningHandler(log, null, verboseRemoval, enforceMandatoryWarnings);\n-        uncheckedHandler = new MandatoryWarningHandler(log, null, verboseUnchecked, enforceMandatoryWarnings);\n+        deprecationHandler = new MandatoryWarningHandler(log, null, verboseDeprecated,\n+                enforceMandatoryWarnings, LintCategory.DEPRECATION, \"deprecated\");\n+        removalHandler = new MandatoryWarningHandler(log, null, verboseRemoval,\n+                enforceMandatoryWarnings, LintCategory.REMOVAL);\n+        uncheckedHandler = new MandatoryWarningHandler(log, null, verboseUnchecked,\n+                enforceMandatoryWarnings, LintCategory.UNCHECKED);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * Instances assume all warnings will be in the same {@link LintCategory}.\n+ * All warnings must be in the same {@link LintCategory} provided to the constructor.\n@@ -118,0 +118,1 @@\n+     * @param lc      The lint category for all warnings\n@@ -119,2 +120,2 @@\n-    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory) {\n-        this(log, source, verbose, enforceMandatory, null);\n+    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, LintCategory lc) {\n+        this(log, source, verbose, enforceMandatory, lc, null);\n@@ -134,0 +135,1 @@\n+     * @param lc      The lint category for all warnings\n@@ -137,1 +139,1 @@\n-    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, String prefix) {\n+    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, LintCategory lc, String prefix) {\n@@ -141,1 +143,1 @@\n-        this.prefix = prefix;\n+        this.prefix = prefix != null ? prefix : lc.option;\n@@ -143,0 +145,1 @@\n+        this.lintCategory = lc;\n@@ -153,4 +156,1 @@\n-\n-        \/\/ Infer the log prefix from the lint category if not given explicitly\n-        if (prefix == null)\n-            prefix = warnKey.getLintCategory().option;\n+        Assert.check(warnKey.getLintCategory() == lintCategory);\n@@ -238,1 +238,1 @@\n-    private String prefix;\n+    private final String prefix;\n@@ -275,0 +275,6 @@\n+    \/**\n+     * A LintCategory to be included in point-of-use diagnostics to indicate\n+     * how messages might be suppressed (i.e. with @SuppressWarnings).\n+     *\/\n+    private final LintCategory lintCategory;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningHandler.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"}]}