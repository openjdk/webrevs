{"files":[{"patch":"@@ -764,2 +764,12 @@\n-     * method returns a segment that behaves as if it had been allocated using the\n-     * provided arena.\n+     * method returns a segment that can be used as any other segment allocated using the\n+     * provided arena. However, The returned segment is backed by the same memory region\n+     * as that of the original segment. As such, the region of memory backing the\n+     * returned segment is deallocated only when the original segment's arena is closed.\n+     * Care must be taken as this might lead to unexpected behavior:\n+     * <ol>\n+     *     <li>The reinterpreted segment can be accessed <em>after<\/em> its region\n+     *         of memory has been deallocated via the original arena (use after free).<\/li>\n+     *     <li>The reinterpreted segments' region of memory will <em>not<\/em> be deallocated\n+     *         when the provided scope becomes invalid.\n+     *     <\/li>\n+     * <\/ol>\n@@ -814,3 +824,13 @@\n-     * of the confinement restrictions associated with this segment. In other words,\n-     * this method returns a segment that behaves as if it had been allocated using the\n-     * provided arena.\n+     * of the confinement restrictions associated with this segment.In other words, this\n+     * method returns a segment that can be used as any other segment allocated using the\n+     * provided arena. However, The returned segment is backed by the same memory region\n+     * as that of the original segment. As such, the region of memory backing the\n+     * returned segment is deallocated only when the original segment's arena is closed.\n+     * Care must be taken as this might lead to unexpected behavior:\n+     * <ol>\n+     *     <li>The reinterpreted segment can be accessed <em>after<\/em> its region\n+     *         of memory has been deallocated via the original arena (use after free).<\/li>\n+     *     <li>The reinterpreted segments' region of memory will not be deallocated\n+     *         when the <em>provided scope becomes invalid.<\/em>\n+     *     <\/li>\n+     * <\/ol>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n@@ -395,0 +396,18 @@\n+    @Test\n+    void testReinterpretArenaClose() {\n+        MemorySegment segment;\n+        try (Arena arena = Arena.ofConfined()){\n+            try (Arena otherArena = Arena.ofConfined()) {\n+                segment = arena.allocate(100);\n+                segment = segment.reinterpret(otherArena, null);\n+            }\n+            final MemorySegment sOther = segment;\n+            assertThrows(IllegalStateException.class, () -> sOther.get(JAVA_BYTE, 0));\n+            segment = segment.reinterpret(arena, null);\n+            final MemorySegment sOriginal = segment;\n+            sOriginal.get(JAVA_BYTE, 0);\n+        }\n+        final MemorySegment closed = segment;\n+        assertThrows(IllegalStateException.class, () -> closed.get(JAVA_BYTE, 0));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}