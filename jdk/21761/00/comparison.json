{"files":[{"patch":"@@ -765,1 +765,2 @@\n-     * provided arena.\n+     * provided arena except, the returned segment's deallocation is still managed by the\n+     * original arena.\n@@ -816,1 +817,2 @@\n-     * provided arena.\n+     * provided arena except, the returned segment's deallocation is still managed by the\n+     * original arena.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n@@ -395,0 +396,18 @@\n+    @Test\n+    void testReinterpretArenaClose() {\n+        MemorySegment segment;\n+        try (Arena arena = Arena.ofConfined()){\n+            try (Arena otherArena= Arena.ofConfined()) {\n+                segment = arena.allocate(100);\n+                segment = segment.reinterpret(otherArena, null);\n+            }\n+            final MemorySegment sOther = segment;\n+            assertThrows(IllegalStateException.class, () -> sOther.get(JAVA_BYTE, 0));\n+            segment = segment.reinterpret(arena, null);\n+            final MemorySegment sOriginal = segment;\n+            sOriginal.get(JAVA_BYTE, 0);\n+        }\n+        final MemorySegment closed = segment;\n+        assertThrows(IllegalStateException.class, () -> closed.get(JAVA_BYTE, 0));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}