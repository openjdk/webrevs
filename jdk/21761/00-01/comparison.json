{"files":[{"patch":"@@ -764,3 +764,12 @@\n-     * method returns a segment that behaves as if it had been allocated using the\n-     * provided arena except, the returned segment's deallocation is still managed by the\n-     * original arena.\n+     * method returns a segment that can be used as any other segment allocated using the\n+     * provided arena. However, The returned segment is backed by the same memory region\n+     * as that of the original segment. As such, the region of memory backing the\n+     * returned segment is deallocated only when the original segment's arena is closed.\n+     * Care must be taken as this might lead to unexpected behavior:\n+     * <ol>\n+     *     <li>The reinterpreted segment can be accessed <em>after<\/em> its region\n+     *         of memory has been deallocated via the original arena (use after free).<\/li>\n+     *     <li>The reinterpreted segments' region of memory will not be deallocated\n+     *         when the <em>provided scope becomes invalid.<\/em>\n+     *     <\/li>\n+     * <\/ol>\n@@ -815,4 +824,13 @@\n-     * of the confinement restrictions associated with this segment. In other words,\n-     * this method returns a segment that behaves as if it had been allocated using the\n-     * provided arena except, the returned segment's deallocation is still managed by the\n-     * original arena.\n+     * of the confinement restrictions associated with this segment.In other words, this\n+     * method returns a segment that can be used as any other segment allocated using the\n+     * provided arena. However, The returned segment is backed by the same memory region\n+     * as that of the original segment. As such, the region of memory backing the\n+     * returned segment is deallocated only when the original segment's arena is closed.\n+     * Care must be taken as this might lead to unexpected behavior:\n+     * <ol>\n+     *     <li>The reinterpreted segment can be accessed <em>after<\/em> its region\n+     *         of memory has been deallocated via the original arena (use after free).<\/li>\n+     *     <li>The reinterpreted segments' region of memory will not be deallocated\n+     *         when the <em>provided scope becomes invalid.<\/em>\n+     *     <\/li>\n+     * <\/ol>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"}]}