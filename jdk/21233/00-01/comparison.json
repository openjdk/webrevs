{"files":[{"patch":"@@ -66,1 +66,0 @@\n-    vm.unlockExperimentalOptions \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires ! vm.unlockExperimentalOptions\n+ * @requires ! vm.opt.final.UnlockExperimentalVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeExperimentalUnlockTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test VMOptionWarningExperimental\n@@ -27,1 +27,1 @@\n- * @summary Warn if diagnostic or experimental vm option is used and -XX:+UnlockDiagnosticVMOptions or -XX:+UnlockExperimentalVMOptions, respectively, isn't specified. Warn if develop vm option is used with product version of VM.\n+ * @summary Warn if experimental vm option is used and -XX:+UnlockExperimentalVMOptions isn't specified.\n@@ -29,1 +29,1 @@\n- * @requires ! vm.unlockExperimentalOptions\n+ * @requires ! vm.opt.final.UnlockExperimentalVMOptions\n@@ -33,1 +33,23 @@\n- * @run driver VMOptionWarning\n+ * @run driver VMOptionWarning Experimental\n+ *\/\n+\n+\/* @test VMOptionWarningDiagnostic\n+ * @bug 8027314\n+ * @summary Warn if diagnostic vm option is used and -XX:+UnlockDiagnosticVMOptions isn't specified.\n+ * @requires vm.flagless\n+ * @requires ! vm.debug\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver VMOptionWarning Diagnostic\n+ *\/\n+\n+\/* @test VMOptionWarningDevelop\n+ * @bug 8027314\n+ * @summary Warn if develop vm option is used with product version of VM.\n+ * @requires vm.flagless\n+ * @requires ! vm.debug\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver VMOptionWarning Develop\n@@ -42,8 +64,2 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+AlwaysSafeConstructors\", \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldNotHaveExitValue(0);\n-        output.shouldContain(\"Error: VM option 'AlwaysSafeConstructors' is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions.\");\n-\n-        if (Platform.isDebugBuild()) {\n-            System.out.println(\"Skip the rest of the tests on debug builds since diagnostic, and develop options are available on debug builds.\");\n-            return;\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"wrong number of args: \" + args.length);\n@@ -52,9 +68,28 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintInlining\", \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldNotHaveExitValue(0);\n-        output.shouldContain(\"Error: VM option 'PrintInlining' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+VerifyStack\", \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldNotHaveExitValue(0);\n-        output.shouldContain(\"Error: VM option 'VerifyStack' is develop and is available only in debug version of VM.\");\n+        ProcessBuilder pb;\n+        OutputAnalyzer output;\n+        switch (args[0]) {\n+            case \"Experimental\": {\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+AlwaysSafeConstructors\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'AlwaysSafeConstructors' is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions.\");\n+                break;\n+            }\n+            case \"Diagnostic\": {\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintInlining\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'PrintInlining' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.\");\n+                break;\n+            }\n+            case \"Develop\": {\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+VerifyStack\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'VerifyStack' is develop and is available only in debug version of VM.\");\n+                break;\n+            }\n+            default: {\n+                throw new RuntimeException(\"Invalid argument: \" + args[0]);\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMOptionWarning.java","additions":56,"deletions":21,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -107,1 +107,0 @@\n-        map.put(\"vm.unlockExperimentalOptions\", this::vmUnlockExperimentalOptions);\n@@ -256,7 +255,0 @@\n-    \/**\n-     * @return true if VM has experimental options unlocked\n-     *\/\n-    protected String vmUnlockExperimentalOptions() {\n-        return \"\" + WB.getBooleanVMFlag(\"UnlockExperimentalVMOptions\");\n-    }\n-\n@@ -395,0 +387,1 @@\n+        vmOptFinalFlag(map, \"UnlockExperimentalVMOptions\");\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}