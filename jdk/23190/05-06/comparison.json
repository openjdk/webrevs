{"files":[{"patch":"@@ -163,1 +163,1 @@\n-  _pz_region(\"pz\", MAX_SHARED_DELTA), \/\/ protection zone\n+  _pz_region(\"pz\", MAX_SHARED_DELTA), \/\/ protection zone -- used only during dumping; does NOT exist in cds archive.\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,0 +215,1 @@\n+  \/\/ Note: this region does NOT exist in the cds archive.\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1256,0 +1256,3 @@\n+      \/\/ Before mapping the core regions into the newly established address space, we mark\n+      \/\/ start and the end of the future protection zone with canaries. That way we easily\n+      \/\/ catch mapping errors (accidentally mapping data into the future protection zone).\n@@ -1378,1 +1381,1 @@\n-        \/\/ mapping start (including protection zone), shift the shift used at archive generation time.\n+        \/\/ mapping start (including protection zone), shift should be the shift used at archive generation time.\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,1 +72,4 @@\n-  char*   _mapped_base;       \/\/ Actually mapped address (null if this region is not mapped).\n+  char*   _mapped_base;       \/\/ Actually mapped address used for mapping the core regions. At that address the\n+                              \/\/ zero nklass protection zone is established; following that (at offset\n+                              \/\/ MetaspaceShared::protection_zone_size()) the lowest core region (rw for the\n+                              \/\/ static archive) is is mapped.\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -811,1 +811,2 @@\n-    \/\/ establish a protection zone.\n+    \/\/ establish a protection zone. Accidentally decoding a zero nKlass ID and then using it will result\n+    \/\/ in an immediate segmentation fault instead of a delayed error much later.\n@@ -826,0 +827,2 @@\n+    } else {\n+      assert(CompressedKlassPointers::base() == nullptr, \"Zero-based encoding expected\");\n@@ -827,0 +830,1 @@\n+\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}