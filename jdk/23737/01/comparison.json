{"files":[{"patch":"@@ -2039,1 +2039,3 @@\n-     * @return  The newly defined {@code Package} object\n+     * @return  The {@code Package} object for the given implementation\n+     *          and specification title\/version\/vendor and seal-base\n+     *          properties.\n@@ -2046,1 +2048,4 @@\n-     *          defined by this class loader\n+     *          defined by this class loader with non-equal values for\n+     *          the package properties (implementation and specification\n+     *          version, vendor, title) or a different {@code sealBase}\n+     *          or module.\n@@ -2067,2 +2072,3 @@\n-        if (packages.putIfAbsent(name, p) != null)\n-            throw new IllegalArgumentException(name);\n+        NamedPackage ex = packages.putIfAbsent(name, p);\n+        if (ex == null)\n+            return p;\n@@ -2070,1 +2076,22 @@\n-        return p;\n+        \/\/ passing 'm==null' is fine here, because 'ex' is guaranteed to be non-null.\n+        Package pEx = toPackage(name, ex, null);\n+\n+        if (Objects.equals(p.getImplementationTitle(), pEx.getImplementationTitle())\n+                && Objects.equals(p.getImplementationVendor(), pEx.getImplementationVendor())\n+                && Objects.equals(p.getImplementationVersion(), pEx.getImplementationVersion())\n+                && Objects.equals(p.getSpecificationTitle(), pEx.getSpecificationTitle())\n+                && Objects.equals(p.getSpecificationVendor(), pEx.getSpecificationVendor())\n+                && Objects.equals(p.getSpecificationVersion(), pEx.getSpecificationVersion())\n+                && p.module() == pEx.module()) {\n+\n+            boolean pSealed = p.isSealed();\n+            boolean exSealed = pEx.isSealed();\n+\n+            if (pSealed == exSealed) {\n+                if (!pSealed || pEx.isSealed(sealBase)) {\n+                    return pEx;\n+                }\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Incompatible redefinition of package \" + name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -395,14 +395,4 @@\n-                try {\n-                    if (man != null) {\n-                        definePackage(pkgname, man, url);\n-                    } else {\n-                        definePackage(pkgname, null, null, null, null, null, null, null);\n-                    }\n-                } catch (IllegalArgumentException iae) {\n-                    \/\/ parallel-capable class loaders: re-verify in case of a\n-                    \/\/ race condition\n-                    if (getAndVerifyPackage(pkgname, man, url) == null) {\n-                        \/\/ Should never happen\n-                        throw new AssertionError(\"Cannot find package \" +\n-                                                 pkgname);\n-                    }\n+                if (man != null) {\n+                    definePackage(pkgname, man, url);\n+                } else {\n+                    definePackage(pkgname, null, null, null, null, null, null, null);\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLClassLoader.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -793,11 +793,4 @@\n-            try {\n-                if (man != null) {\n-                    pkg = definePackage(pn, man, url);\n-                } else {\n-                    pkg = definePackage(pn, null, null, null, null, null, null, null);\n-                }\n-            } catch (IllegalArgumentException iae) {\n-                \/\/ defined by another thread so need to re-verify\n-                pkg = getAndVerifyPackage(pn, man, url);\n-                if (pkg == null)\n-                    throw new InternalError(\"Cannot find package: \" + pn);\n+            if (man != null) {\n+                pkg = definePackage(pn, man, url);\n+            } else {\n+                pkg = definePackage(pn, null, null, null, null, null, null, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BuiltinClassLoader.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8349545\n+ * @summary Test verifies that calling ClassLoader.definePackage yields the same Package\n+ *          object for identical package definitions.\n+ * @run testng PackageDefineTest\n+ *\/\n+\n+\n+import java.net.URL;\n+import java.util.Iterator;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class PackageDefineTest {\n+\n+    @Test(dataProvider = \"goodRedefinitions\")\n+    public static void testGoodRedefs(Pkg[] pkgs) {\n+        var d1 = pkgs[0];\n+        var d2 = pkgs[1];\n+\n+        TestClassLoader loader = new TestClassLoader();\n+\n+        Package p1 = loader.definePackage(\"pkg\",\n+                d1.specTitle, d1.specVersion, d1.specVendor,\n+                d1.implTitle, d1.implVersion, d1.implVendor,\n+                d1.sealBase);\n+        Package p2 = loader.definePackage(\"pkg\",\n+                d2.specTitle, d2.specVersion, d2.specVendor,\n+                d2.implTitle, d2.implVersion, d2.implVendor,\n+                d2.sealBase);\n+        Assert.assertSame(p1, p2);\n+    }\n+\n+    @Test(\n+            dataProvider = \"badRedefinitions\",\n+            expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \"Incompatible redefinition of package pkg\"\n+    )\n+    public static void testBadRedefs(Pkg[] pkgs) {\n+        var d1 = pkgs[0];\n+        var d2 = pkgs[1];\n+\n+        TestClassLoader loader = new TestClassLoader();\n+\n+        Package p1 = loader.definePackage(\"pkg\",\n+                d1.specTitle, d1.specVersion, d1.specVendor,\n+                d1.implTitle, d1.implVersion, d1.implVendor,\n+                d1.sealBase);\n+        loader.definePackage(\"pkg\",\n+                d2.specTitle, d2.specVersion, d2.specVendor,\n+                d2.implTitle, d2.implVersion, d2.implVendor,\n+                d2.sealBase);\n+    }\n+\n+    @DataProvider(name = \"goodRedefinitions\")\n+    Pkg[][] goodRedefinitions() throws Exception {\n+        return new Pkg[][] {\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", new URL(\"file:\/\/\/fooo\")),\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", new URL(\"file:\/\/\/fooo\"))\n+            },\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", null),\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", null)\n+            },\n+            new Pkg[]{\n+                new Pkg(null, null, null, null, null, null, null),\n+                new Pkg(null, null, null, null, null, null, null)\n+            }\n+        };\n+    }\n+\n+    @DataProvider(name = \"badRedefinitions\")\n+    Pkg[][] badRedefinitions() throws Exception {\n+        return new Pkg[][] {\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", new URL(\"file:\/\/\/fooo1\")),\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", new URL(\"file:\/\/\/fooo2\"))\n+            },\n+            new Pkg[]{\n+                new Pkg(\"specTitle1\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", null),\n+                new Pkg(\"specTitle2\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", null)\n+            },\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion1\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", null),\n+                new Pkg(\"specTitle\", \"specVersion2\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor\", null)\n+            },\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor1\", \"implTitle\", \"implVersion\", \"implVendor\", null),\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor2\", \"implTitle\", \"implVersion\", \"implVendor\", null)\n+            },\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle1\", \"implVersion\", \"implVendor\", null),\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle2\", \"implVersion\", \"implVendor\", null)\n+            },\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion1\", \"implVendor\", null),\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion2\", \"implVendor\", null)\n+            },\n+            new Pkg[]{\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor1\", null),\n+                new Pkg(\"specTitle\", \"specVersion\", \"specVendor\", \"implTitle\", \"implVersion\", \"implVendor2\", null)\n+            },\n+            new Pkg[]{\n+                new Pkg(null, null, null, null, null, null, new URL(\"file:\/\/\/fooo1\")),\n+                new Pkg(null, null, null, null, null, null, new URL(\"file:\/\/\/fooo2\"))\n+            }\n+        };\n+    }\n+\n+    static class Pkg {\n+        final String specTitle;\n+        final String specVersion;\n+        final String specVendor;\n+        final String implTitle;\n+        final String implVersion;\n+        final String implVendor;\n+        final URL sealBase;\n+\n+        Pkg(String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase) {\n+            this.specTitle = specTitle;\n+            this.specVersion = specVersion;\n+            this.specVendor = specVendor;\n+            this.implTitle = implTitle;\n+            this.implVersion = implVersion;\n+            this.implVendor = implVendor;\n+            this.sealBase = sealBase;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Package\/PackageDefineTest.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -33,1 +33,0 @@\n-import java.net.URL;\n@@ -99,11 +98,0 @@\n-\n-class TestClassLoader extends ClassLoader {\n-    @Override\n-    protected Package definePackage(String name, String specTitle,\n-                                    String specVersion, String specVendor,\n-                                    String implTitle, String implVersion,\n-                                    String implVendor, URL sealBase) {\n-        return super.definePackage(name, specTitle, specVersion, specVendor,\n-                                   implTitle, implVersion, implVendor, sealBase);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Package\/PackageVersionTest.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.net.URL;\n+\n+class TestClassLoader extends ClassLoader {\n+    @Override\n+    protected Package definePackage(String name, String specTitle,\n+                                    String specVersion, String specVendor,\n+                                    String implTitle, String implVersion,\n+                                    String implVendor, URL sealBase) {\n+        return super.definePackage(name, specTitle, specVersion, specVendor,\n+                implTitle, implVersion, implVendor, sealBase);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Package\/TestClassLoader.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}