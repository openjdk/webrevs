{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+\n@@ -42,6 +43,0 @@\n-        try {\n-            Class.forName(ManagementFactory.class.getName());\n-        } catch (Throwable t) {\n-            System.out.println(\"TEST CANNOT RUN: needs JDK 5 at least\");\n-            return;\n-        }\n@@ -69,2 +64,1 @@\n-                    System.out.println(\"TEST INCORRECT: block returned\");\n-                    System.exit(1);\n+                    throw new RuntimeException(\"TEST INCORRECT: block returned\");\n@@ -88,2 +82,3 @@\n-        while (t1.getState() != Thread.State.WAITING)\n-            Thread.sleep(1);\n+        while (t1.getState() != Thread.State.WAITING) {\n+            Thread.sleep(100);\n+        }\n@@ -108,2 +103,1 @@\n-        \/* Wait for Thread 2 to be blocked on the monitor or to\n-           succeed.  *\/\n+        \/* Wait for Thread 2 to be blocked on the monitor or to succeed. *\/\n@@ -112,4 +106,3 @@\n-        for (int i = 0; i < 1000\/*ms*\/; i++) {\n-            t2.join(1\/*ms*\/);\n-            switch (t2.getState()) {\n-            case TERMINATED:\n+        for (int i = 0; i < 1000; i++) {\n+            t2.join(100 \/*ms*\/);\n+            if (t2.getState() == Thread.State.TERMINATED) {\n@@ -118,10 +111,0 @@\n-            case BLOCKED:\n-                java.util.Map<Thread,StackTraceElement[]> traces =\n-                    Thread.getAllStackTraces();\n-                showStackTrace(\"Thread 1\", traces.get(t1));\n-                showStackTrace(\"Thread 2\", traces.get(t2));\n-                System.out.println(\"TEST FAILED: deadlock\");\n-                System.exit(1);\n-                break;\n-            default:\n-                break;\n@@ -131,3 +114,9 @@\n-        System.out.println(\"TEST FAILED BUT DID NOT NOTICE DEADLOCK\");\n-        Thread.sleep(10000);\n-        System.exit(1);\n+        if (t2.getState() == Thread.State.BLOCKED) {\n+            System.out.println(\"TEST FAILED: deadlock\");\n+        } else {\n+            System.out.println(\"TEST FAILED BUT DID NOT NOTICE DEADLOCK (state = \" + t2.getState() + \")\");\n+        }\n+        java.util.Map<Thread,StackTraceElement[]> traces = Thread.getAllStackTraces();\n+        showStackTrace(\"Thread 1\", traces.get(t1));\n+        showStackTrace(\"Thread 2\", traces.get(t2));\n+        throw new RuntimeException(\"TEST FAILED\");\n@@ -155,0 +144,1 @@\n+\n@@ -164,3 +154,1 @@\n-                    System.out.println(\"TEST INCORRECT: lock interrupted:\");\n-                    e.printStackTrace(System.out);\n-                    System.exit(1);\n+                    throw new RuntimeException(\"TEST INCORRECT: lock interrupted\");\n","filename":"test\/jdk\/javax\/management\/notification\/BroadcasterSupportDeadlockTest.java","additions":21,"deletions":33,"binary":false,"changes":54,"status":"modified"}]}