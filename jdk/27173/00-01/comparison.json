{"files":[{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.logging.ErrorManager;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.SimpleFormatter;\n+import java.util.logging.StreamHandler;\n+\n+import org.junit.jupiter.api.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8365483\n+ * @summary verify that concurrent calls to publish() and close() on a\n+ *          StreamHandler do not cause unexpected exceptions\n+ * @run junit StreamHandlerRacyCloseTest\n+ *\/\n+public class StreamHandlerRacyCloseTest {\n+\n+    private static final class ExceptionTrackingErrorManager extends ErrorManager {\n+        private final AtomicReference<Exception> firstError = new AtomicReference<>();\n+\n+        @Override\n+        public void error(String msg, Exception ex, int code) {\n+            \/\/ just track one\/first exception, that's good enough for this test\n+            this.firstError.compareAndSet(null, new RuntimeException(msg, ex));\n+        }\n+    }\n+\n+    @Test\n+    void testRacyClose() throws Exception {\n+        final int numTimes = 100;\n+        try (ExecutorService executor = Executors.newFixedThreadPool(numTimes)) {\n+            final List<Callable<Void>> tasks = new ArrayList<>();\n+            for (int i = 1; i <= numTimes; i++) {\n+                final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                \/\/ construct a StreamHandler with an ErrorManager which propagates\n+                \/\/ any errors that happen during publish()\n+                final StreamHandler handler = new StreamHandler(baos, new SimpleFormatter());\n+                handler.setErrorManager(new ExceptionTrackingErrorManager());\n+\n+                final CountDownLatch latch = new CountDownLatch(2);\n+                \/\/ create a publisher and closer task which will run concurrently\n+                tasks.add(new Publisher(handler, latch));\n+                tasks.add(new Closer(handler, latch));\n+            }\n+            \/\/ submit the tasks and expect successful completion of each\n+            final List<Future<Void>> completed = executor.invokeAll(tasks);\n+            for (var f : completed) {\n+                f.get();\n+            }\n+        }\n+    }\n+\n+    private static final class Closer implements Callable<Void> {\n+        private final StreamHandler handler;\n+        private final CountDownLatch startLatch;\n+\n+        private Closer(final StreamHandler handler, final CountDownLatch startLatch) {\n+            this.handler = handler;\n+            this.startLatch = startLatch;\n+        }\n+\n+        @Override\n+        public Void call() throws Exception {\n+            \/\/ notify the other task of our readiness\n+            this.startLatch.countDown();\n+            \/\/ wait for the other task to arrive\n+            this.startLatch.await();\n+            \/\/ close the handler\n+            this.handler.close();\n+            \/\/ propagate any exception that may have been caught by the error manager\n+            final var errMgr = (ExceptionTrackingErrorManager) this.handler.getErrorManager();\n+            if (errMgr.firstError.get() != null) {\n+                throw errMgr.firstError.get();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private static final class Publisher implements Callable<Void> {\n+        private final StreamHandler handler;\n+        private final CountDownLatch startLatch;\n+\n+        private Publisher(final StreamHandler handler, final CountDownLatch startLatch) {\n+            this.handler = handler;\n+            this.startLatch = startLatch;\n+        }\n+\n+        @Override\n+        public Void call() throws Exception {\n+            final LogRecord record = new LogRecord(Level.WARNING, \"hello world\");\n+            \/\/ notify the other task of our readiness\n+            this.startLatch.countDown();\n+            \/\/ wait for the other task to arrive\n+            this.startLatch.await();\n+            \/\/ publish the record\n+            this.handler.publish(record);\n+            \/\/ propagate any exception that may have been caught by the error manager\n+            final var errMgr = (ExceptionTrackingErrorManager) this.handler.getErrorManager();\n+            if (errMgr.firstError.get() != null) {\n+                throw errMgr.firstError.get();\n+            }\n+            return null;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/logging\/StreamHandlerRacyCloseTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}