{"files":[{"patch":"@@ -2613,3 +2613,3 @@\n-        int powersOfTwo = base.getLowestSetBit();\n-        long bitsToShiftLong = (long) powersOfTwo * exponent;\n-        int bitsToShift = (int) bitsToShiftLong;\n+        final int powersOfTwo = base.getLowestSetBit();\n+        final long bitsToShiftLong = (long) powersOfTwo * exponent;\n+        final int bitsToShift = (int) bitsToShiftLong;\n@@ -2622,1 +2622,1 @@\n-        int remainingBits = base.bitLength();\n+        final int remainingBits = base.bitLength();\n@@ -2629,1 +2629,1 @@\n-        long scaleFactor = (long)remainingBits * exponent;\n+        final long scaleFactor = (long)remainingBits * exponent;\n@@ -2643,1 +2643,1 @@\n-            if ((bitLength() - 1L) * exponent >= (long) MAX_MAG_LENGTH << 5) {\n+            if ((bitLength() - 1L) * exponent >= Integer.MAX_VALUE) {\n@@ -2655,0 +2655,2 @@\n+            \/\/ The loop relies on this invariant:\n+            \/\/ base^exponent == answer^(2^expLen) * base^(exponent & (2^expLen - 1))\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -56,3 +56,0 @@\n-    private BigInteger[] xsArray, sArray, mArray, lArray, xlArray;\n-    private int xsExp, sExp, mExp, lExp, xlExp;\n-    private int[] randomExps;\n@@ -61,0 +58,27 @@\n+    private int xsExp = (1 << 20) - 1;\n+    private BigInteger[] xsArray = new BigInteger[TESTSIZE]; \/*\n+     * Each array entry is atmost 64 bits\n+     * in size\n+     *\/\n+    private int sExp = (1 << 18) - 1;\n+    private BigInteger[] sArray = new BigInteger[TESTSIZE]; \/*\n+     * Each array entry is atmost 256 bits\n+     * in size\n+     *\/\n+    private int mExp = (1 << 16) - 1;\n+    private BigInteger[] mArray = new BigInteger[TESTSIZE]; \/*\n+     * Each array entry is atmost 1024 bits\n+     * in size\n+     *\/\n+    private int lExp = (1 << 14) - 1;\n+    private BigInteger[] lArray = new BigInteger[TESTSIZE]; \/*\n+     * Each array entry is atmost 4096 bits\n+     * in size\n+     *\/\n+    private int xlExp = (1 << 12) - 1;\n+    private BigInteger[] xlArray = new BigInteger[TESTSIZE]; \/*\n+     * Each array entry is atmost 16384 bits\n+     * in size\n+     *\/\n+    private int[] randomExps;\n+\n@@ -70,26 +94,0 @@\n-        xsExp = (1 << 20) - 1;\n-        xsArray = new BigInteger[TESTSIZE]; \/*\n-         * Each array entry is atmost 64 bits\n-         * in size\n-         *\/\n-        sExp = (1 << 18) - 1;\n-        sArray = new BigInteger[TESTSIZE]; \/*\n-         * Each array entry is atmost 256 bits\n-         * in size\n-         *\/\n-        mExp = (1 << 16) - 1;\n-        mArray = new BigInteger[TESTSIZE]; \/*\n-         * Each array entry is atmost 1024 bits\n-         * in size\n-         *\/\n-        lExp = (1 << 14) - 1;\n-        lArray = new BigInteger[TESTSIZE]; \/*\n-         * Each array entry is atmost 4096 bits\n-         * in size\n-         *\/\n-        xlExp = (1 << 12) - 1;\n-        xlArray = new BigInteger[TESTSIZE]; \/*\n-         * Each array entry is atmost 16384 bits\n-         * in size\n-         *\/\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerPow.java","additions":27,"deletions":29,"binary":false,"changes":56,"status":"modified"}]}