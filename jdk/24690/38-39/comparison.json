{"files":[{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.math;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.profile.GCProfiler;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class BigIntegerPow {\n+\n+    private BigInteger[] xsArray, sArray, mArray, lArray, xlArray;\n+    private int xsExp, sExp, mExp, lExp, xlExp;\n+    private static final int TESTSIZE = 2;\n+\n+    \/*\n+     * You can run this test via the command line:\n+     *    $ mvn clean install\n+     *    $ java -jar target\/benchmarks.jar BigIntegerPow -prof gc\n+     *\/\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(BigIntegerPow.class.getSimpleName())\n+                .addProfiler(GCProfiler.class)\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+\n+    @Setup\n+    public void setup() {\n+        Random r = new Random(1123);\n+\n+        xsExp = (1 << 25) - 1;\n+        xsArray = new BigInteger[TESTSIZE]; \/*\n+         * Each array entry is atmost 64 bits\n+         * in size\n+         *\/\n+        sExp = (1 << 23) - 1;\n+        sArray = new BigInteger[TESTSIZE]; \/*\n+         * Each array entry is atmost 256 bits\n+         * in size\n+         *\/\n+        mExp = (1 << 21) - 1;\n+        mArray = new BigInteger[TESTSIZE]; \/*\n+         * Each array entry is atmost 1024 bits\n+         * in size\n+         *\/\n+        lExp = (1 << 19) - 1;\n+        lArray = new BigInteger[TESTSIZE]; \/*\n+         * Each array entry is atmost 4096 bits\n+         * in size\n+         *\/\n+        xlExp = (1 << 17) - 1;\n+        xlArray = new BigInteger[TESTSIZE]; \/*\n+         * Each array entry is atmost 16384 bits\n+         * in size\n+         *\/\n+\n+        for (int i = 0; i < TESTSIZE; i++) {\n+            xsArray[i] = new BigInteger(64, r);\n+            sArray[i] = new BigInteger(256, r);\n+            mArray[i] = new BigInteger(1024, r);\n+            lArray[i] = new BigInteger(4096, r);\n+            xlArray[i] = new BigInteger(16384, r);\n+        }\n+    }\n+\n+    \/** Test BigInteger.pow() with numbers long at most 64 bits  *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testPowXS(Blackhole bh) {\n+        for (BigInteger s : xsArray) {\n+            bh.consume(s.pow(xsExp));\n+        }\n+    }\n+\n+    \/** Test BigInteger.pow() with numbers long at most 256 bits *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testPowS(Blackhole bh) {\n+        for (BigInteger s : sArray) {\n+            bh.consume(s.pow(sExp));\n+        }\n+    }\n+\n+    \/** Test BigInteger.pow() with numbers long at most 1024 bits *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testPowM(Blackhole bh) {\n+        for (BigInteger s : mArray) {\n+            bh.consume(s.pow(mExp));\n+        }\n+    }\n+\n+    \/** Test BigInteger.pow() with numbers long at most 4096 bits *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testPowL(Blackhole bh) {\n+        for (BigInteger s : lArray) {\n+            bh.consume(s.pow(lExp));\n+        }\n+    }\n+\n+    \/** Test BigInteger.pow() with numbers long at most 16384 bits *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testPowXL(Blackhole bh) {\n+        for (BigInteger s : xlArray) {\n+            bh.consume(s.pow(xlExp));\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerPow.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}