{"files":[{"patch":"@@ -2815,13 +2815,1 @@\n-        if (n == 1)\n-            return this;\n-\n-        if (n == 2)\n-            return sqrt();\n-\n-        if (n <= 0)\n-            throw new ArithmeticException(\"Non-positive root degree\");\n-\n-        if ((n & 1) == 0 && this.signum < 0)\n-            throw new ArithmeticException(\"Negative radicand with even root degree\");\n-\n-        return new MutableBigInteger(this.mag).nthRoot(n).toBigInteger(signum);\n+        return n == 1 ? this : (n == 2 ? sqrt() : nthRootAndRemainder(n, false)[0]);\n@@ -2851,2 +2839,10 @@\n-        if (n == 1)\n-            return new BigInteger[] { this, ZERO };\n+\treturn n == 1 ? new BigInteger[] { this, ZERO }\n+\t\t      : (n == 2 ? sqrtAndRemainder() : nthRootAndRemainder(n, true));\n+    }\n+\n+    \/**\n+     * Assume {@code n != 1 && n != 2}\n+     *\/\n+    private BigInteger[] nthRootAndRemainder(int n, boolean needRemainder) {\n+        if (n <= 0)\n+            throw new ArithmeticException(\"Non-positive root degree\");\n@@ -2854,2 +2850,2 @@\n-        if (n == 2)\n-            return sqrtAndRemainder();\n+        if ((n & 1) == 0 && this.signum < 0)\n+            throw new ArithmeticException(\"Negative radicand with even root degree\");\n@@ -2857,3 +2853,5 @@\n-        BigInteger root = nthRoot(n), rem = this.subtract(root.pow(n));\n-        assert rem.signum == 0 || rem.signum == this.signum;\n-        return new BigInteger[] { root, rem };\n+        MutableBigInteger[] rootRem = new MutableBigInteger(this.mag).nthRootRem(n);\n+        return new BigInteger[] {\n+        \trootRem[0].toBigInteger(signum),\n+        \tneedRemainder ? rootRem[1].toBigInteger(signum) : null\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1917,2 +1917,2 @@\n-     * Calculate the integer {@code n}th root {@code floor(nthRoot(this, n))} where\n-     * {@code nthRoot(., n)} denotes the mathematical {@code n}th root. The contents of\n+     * Calculate the integer {@code n}th root {@code floor(nthRoot(this, n))} and the remainder,\n+     * where {@code nthRoot(., n)} denotes the mathematical {@code n}th root. The contents of\n@@ -1928,1 +1928,1 @@\n-     * @return the integer {@code n}th of {@code this}\n+     * @return the integer {@code n}th of {@code this} and the remainder\n@@ -1930,1 +1930,1 @@\n-    MutableBigInteger nthRoot(int n) {\n+    MutableBigInteger[] nthRootRem(int n) {\n@@ -1933,1 +1933,1 @@\n-            return this;\n+            return new MutableBigInteger[] { this, new MutableBigInteger() };\n@@ -1937,2 +1937,5 @@\n-        if (bitLength <= n)\n-            return new MutableBigInteger(1);\n+        if (bitLength <= n) {\n+            MutableBigInteger rem = new MutableBigInteger(this);\n+            rem.subtract(ONE);\n+            return new MutableBigInteger[] { new MutableBigInteger(1), rem };\n+        }\n@@ -1955,1 +1958,3 @@\n-                        return new MutableBigInteger(rLong);\n+                        return new MutableBigInteger[] {\n+                        \tnew MutableBigInteger(rLong), new MutableBigInteger(x - rToN)\n+                        };\n@@ -1996,3 +2001,3 @@\n-            MutableBigInteger rToN = new MutableBigInteger(rToN1.multiply(rBig).mag);\n-            if (rToN.subtract(this) <= 0)\n-                return r;\n+            MutableBigInteger rem = new MutableBigInteger(rToN1.multiply(rBig).mag);\n+            if (rem.subtract(this) <= 0)\n+                return new MutableBigInteger[] { r, rem };\n@@ -2005,1 +2010,1 @@\n-            if ((rToN.divideOneWord(n, q1) != 0)\n+            if ((rem.divideOneWord(n, q1) != 0)\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"}]}