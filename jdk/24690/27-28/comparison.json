{"files":[{"patch":"@@ -2705,0 +2705,1 @@\n+        final BigInteger[] powerCache = new BigInteger[1 << maxExpLen];\n@@ -2722,14 +2723,22 @@\n-                \/\/ adjust exp to fit x^expAdj into a double\n-                int expAdj = exp <= maxExp ? exp : exp >>> 1;\n-\n-                long xLong = x & LONG_MASK;\n-                \/\/ don't use fp arithmetic if expAdj <= 2\n-                long xToExpAdj = expAdj == 1 ? xLong :\n-                                (expAdj == 2 ? xLong*xLong : (long) Math.pow(xLong, expAdj));\n-\n-                \/\/ append exp's rightmost bit to expAdj\n-                BigInteger xToExp = new BigInteger(1, new int[] { (int) (xToExpAdj >>> 32), (int) xToExpAdj });\n-                if (expAdj != exp) {\n-                    xToExp = xToExp.multiply(xToExp);\n-                    if ((exp & 1) == 1)\n-                        xToExp = xToExp.multiply(xLong);\n+                BigInteger xToExp = powerCache[exp];\n+                if (xToExp == null) {\n+                    \/\/ adjust exp to fit x^expAdj into a double\n+                    int expAdj = exp <= maxExp ? exp : exp >>> 1;\n+\n+                    long xLong = x & LONG_MASK;\n+                    \/\/ don't use fp arithmetic if expAdj <= 2\n+                    long xToExpAdj = expAdj == 1 ? xLong :\n+                                    (expAdj == 2 ? xLong*xLong : (long) Math.pow(xLong, expAdj));\n+\n+                    xToExp = new BigInteger(1, new int[] { (int) (xToExpAdj >>> 32), (int) xToExpAdj });\n+                    powerCache[expAdj] = xToExp;\n+                    \/\/ append exp's rightmost bit to expAdj\n+                    if (expAdj != exp) {\n+                        xToExp = xToExp.multiply(xToExp);\n+                        powerCache[expAdj << 1] = xToExp;\n+\n+                        if ((exp & 1) == 1) {\n+                            xToExp = xToExp.multiply(xLong);\n+                            powerCache[exp] = xToExp;\n+                        }\n+                    }\n@@ -2755,0 +2764,1 @@\n+        final long[] powerCache = new long[1 << maxExpLen];\n@@ -2772,13 +2782,21 @@\n-                \/\/ adjust exp to fit x^expAdj into a double\n-                int expAdj = exp <= maxExp ? exp : exp >>> 1;\n-\n-                \/\/ don't use fp arithmetic if expAdj <= 3\n-                long xToExp = expAdj == 1 ? x :\n-                             (expAdj == 2 ? x*x :\n-                             (expAdj == 3 ? x*x*x : (long) Math.pow(x, expAdj)));\n-\n-                \/\/ append exp's rightmost bit to expAdj\n-                if (expAdj != exp) {\n-                    xToExp *= xToExp;\n-                    if ((exp & 1) == 1)\n-                        xToExp *= x;\n+                long xToExp = powerCache[exp];\n+                if (xToExp == 0) {\n+                    \/\/ adjust exp to fit x^expAdj into a double\n+                    int expAdj = exp <= maxExp ? exp : exp >>> 1;\n+\n+                    \/\/ don't use fp arithmetic if expAdj <= 3\n+                    xToExp = expAdj == 1 ? x :\n+                            (expAdj == 2 ? x*x :\n+                            (expAdj == 3 ? x*x*x : (long) Math.pow(x, expAdj)));\n+                    powerCache[expAdj] = xToExp;\n+\n+                    \/\/ append exp's rightmost bit to expAdj\n+                    if (expAdj != exp) {\n+                        xToExp *= xToExp;\n+                        powerCache[expAdj << 1] = xToExp;\n+\n+                        if ((exp & 1) == 1) {\n+                            xToExp *= x;\n+                            powerCache[exp] = xToExp;\n+                        }\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":45,"deletions":27,"binary":false,"changes":72,"status":"modified"}]}