{"files":[{"patch":"@@ -2603,1 +2603,1 @@\n-        long bitsToShiftLong = (long) powersOfTwo * exponent;\n+        long bitsToShiftLong = (long)powersOfTwo * exponent;\n@@ -2616,1 +2616,1 @@\n-                if (signum < 0 && (exponent & 1) == 1) {\n+                if (signum < 0 && (exponent&1) == 1) {\n@@ -2625,1 +2625,1 @@\n-                if (signum < 0 && (exponent & 1) == 1) {\n+                if (signum < 0  && (exponent&1) == 1) {\n@@ -2636,1 +2636,1 @@\n-        long scaleFactor = (long) remainingBits * exponent;\n+        long scaleFactor = (long)remainingBits * exponent;\n@@ -2642,1 +2642,1 @@\n-            int newSign = (signum < 0  && (exponent & 1) == 1 ? -1 : 1);\n+            int newSign = (signum <0  && (exponent&1) == 1 ? -1 : 1);\n@@ -2650,1 +2650,1 @@\n-                    return valueOf(result * newSign).shiftLeft(bitsToShift);\n+                    return valueOf(result*newSign).shiftLeft(bitsToShift);\n@@ -2653,1 +2653,1 @@\n-                return valueOf(result * newSign);\n+                return valueOf(result*newSign);\n@@ -2656,1 +2656,1 @@\n-            if ((long) bitLength() * exponent \/ Integer.SIZE > MAX_MAG_LENGTH) {\n+            if ((long)bitLength() * exponent \/ Integer.SIZE > MAX_MAG_LENGTH) {\n@@ -2682,1 +2682,1 @@\n-            if (signum < 0 && (exponent & 1) == 1) {\n+            if (signum < 0 && (exponent&1) == 1) {\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}