{"files":[{"patch":"@@ -161,21 +161,0 @@\n-    \/**\n-     * Returns a MutableBigInteger with a magnitude specified by\n-     * the absolute value of the double val. Any fractional part is discarded.\n-     *\n-     * Assume val is in the finite double range.\n-     *\/\n-    static MutableBigInteger valueOf(double val) {\n-        val = Math.abs(val);\n-        if (val < 0x1p63)\n-            return new MutableBigInteger((long) val);\n-        \/\/ Translate the double into exponent and significand, according\n-        \/\/ to the formulae in JLS, Section 20.10.22.\n-        long valBits = Double.doubleToRawLongBits(val);\n-        int exponent = (int) ((valBits >> 52) & 0x7ffL) - 1075;\n-        long significand = (valBits & ((1L << 52) - 1)) | (1L << 52);\n-        \/\/ At this point, val == significand * 2^exponent, with exponent > 0\n-        MutableBigInteger result = new MutableBigInteger(significand);\n-        result.leftShift(exponent);\n-        return result;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"}]}