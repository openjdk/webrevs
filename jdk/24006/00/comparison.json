{"files":[{"patch":"@@ -1388,2 +1388,1 @@\n-  const int base_offset = isLL ? arrayOopDesc::base_offset_in_bytes(T_BYTE)\n-                               : arrayOopDesc::base_offset_in_bytes(T_CHAR);\n+  const int base_offset = arrayOopDesc::base_offset_in_bytes(T_BYTE);\n@@ -1483,1 +1482,1 @@\n-  const int base_offset = arrayOopDesc::base_offset_in_bytes(T_CHAR);\n+  const int base_offset = arrayOopDesc::base_offset_in_bytes(T_BYTE);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2439,2 +2439,1 @@\n-    int base_offset = arrayOopDesc::base_offset_in_bytes(T_CHAR);\n-\n+    int base_offset = arrayOopDesc::base_offset_in_bytes(T_BYTE);\n@@ -2498,7 +2497,3 @@\n-    int base_offset1 = arrayOopDesc::base_offset_in_bytes(T_BYTE);\n-    int base_offset2 = arrayOopDesc::base_offset_in_bytes(T_CHAR);\n-\n-    assert((base_offset1 % (UseCompactObjectHeaders ? 4 :\n-                            (UseCompressedClassPointers ? 8 : 4))) == 0, \"Must be\");\n-    assert((base_offset2 % (UseCompactObjectHeaders ? 4 :\n-                            (UseCompressedClassPointers ? 8 : 4))) == 0, \"Must be\");\n+    int base_offset = arrayOopDesc::base_offset_in_bytes(T_BYTE);\n+    assert((base_offset % (UseCompactObjectHeaders ? 4 :\n+                           (UseCompressedClassPointers ? 8 : 4))) == 0, \"Must be\");\n@@ -2511,1 +2506,1 @@\n-    if (AvoidUnalignedAccesses && (base_offset1 % 8) != 0) {\n+    if (AvoidUnalignedAccesses && (base_offset % 8) != 0) {\n@@ -2516,1 +2511,1 @@\n-      __ load_long_misaligned(tmpU, Address(strU), tmp4, (base_offset2 % 8) != 0 ? 4 : 8);\n+      __ load_long_misaligned(tmpU, Address(strU), tmp4, (base_offset % 8) != 0 ? 4 : 8);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"}]}