{"files":[{"patch":"@@ -2499,1 +2499,0 @@\n-                !env.info.isNewClass &&\n@@ -2785,1 +2784,1 @@\n-            env.info.isNewClass = true;\n+            env.info.isAnonymousNewClass = tree.def != null;\n@@ -2790,1 +2789,1 @@\n-            env.info.isNewClass = false;\n+            env.info.isAnonymousNewClass = false;\n@@ -5242,1 +5241,1 @@\n-        if (!env.info.isNewClass)\n+        if (!env.info.isAnonymousNewClass)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-     *  Is this an attribution environment for an instance creation expression?\n+     *  Is this an attribution environment for an anonymous instance creation expression?\n@@ -85,1 +85,1 @@\n-    boolean isNewClass = false;\n+    boolean isAnonymousNewClass = false;\n@@ -152,1 +152,1 @@\n-        info.isNewClass = isNewClass;\n+        info.isAnonymousNewClass = isAnonymousNewClass;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrContext.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2025, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8351431\n+ * @summary Type annotations on new class creation expressions can't be retrieved\n+ * @library \/tools\/lib\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @modules jdk.compiler\/com.sun.tools.javac.api jdk.compiler\/com.sun.tools.javac.main\n+ * @run main NewClassTypeAnnotation\n+ *\/\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskListener;\n+import com.sun.source.util.TreePathScanner;\n+import com.sun.source.util.Trees;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.lang.model.type.TypeMirror;\n+\n+public class NewClassTypeAnnotation extends TestRunner {\n+\n+    private ToolBox tb;\n+\n+    public static void main(String[] args) throws Exception {\n+        new NewClassTypeAnnotation().runTests();\n+    }\n+\n+    NewClassTypeAnnotation() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] {Paths.get(m.getName())});\n+    }\n+\n+    @Test\n+    public void testTypeAnnotations(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(\n+                src,\n+                \"\"\"\n+                package test;\n+\n+                import java.lang.annotation.ElementType;\n+                import java.lang.annotation.Retention;\n+                import java.lang.annotation.RetentionPolicy;\n+                import java.lang.annotation.Target;\n+\n+                class Test<T> {\n+\n+                  @Target(ElementType.TYPE_USE)\n+                  @Retention(RetentionPolicy.RUNTIME)\n+                  @interface TypeAnnotation {}\n+\n+                  public void testMethod() {\n+                    new Test<@TypeAnnotation String>();\n+                  }\n+                }\n+                \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        AtomicBoolean seenAnnotationMirror = new AtomicBoolean();\n+\n+        List<String> actual = new ArrayList<>();\n+\n+        class Scanner extends TreePathScanner<Void, Void> {\n+\n+            private final Trees trees;\n+\n+            Scanner(Trees trees) {\n+                this.trees = trees;\n+            }\n+\n+            @Override\n+            public Void visitNewClass(final NewClassTree node, final Void unused) {\n+                TypeMirror type = trees.getTypeMirror(getCurrentPath());\n+                System.err.println(\">>> \" + type);\n+                for (Tree t : getCurrentPath()) {\n+                    System.err.println(t);\n+                }\n+                actual.add(String.format(\"Expression: %s, Type: %s\", node, type));\n+                return null;\n+            }\n+        }\n+\n+        new JavacTask(tb)\n+                .outdir(classes)\n+                .callback(\n+                        task -> {\n+                            task.addTaskListener(\n+                                    new TaskListener() {\n+                                        @Override\n+                                        public void finished(TaskEvent e) {\n+                                            if (e.getKind() != TaskEvent.Kind.ANALYZE) {\n+                                                return;\n+                                            }\n+                                            System.err.println(e);\n+                                            new Scanner(Trees.instance(task))\n+                                                    .scan(e.getCompilationUnit(), null);\n+                                        }\n+                                    });\n+                        })\n+                .files(tb.findJavaFiles(src))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll();\n+\n+        List<String> expected =\n+                List.of(\n+                        \"Expression: new Test<@TypeAnnotation String>(), Type:\"\n+                                + \" test.Test<java.lang.@test.Test.TypeAnnotation String>\");\n+        if (!expected.equals(actual)) {\n+            throw new AssertionError(\"expected: \" + expected + \", actual: \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/NewClassTypeAnnotation.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}