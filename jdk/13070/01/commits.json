[{"commit":{"message":"Merge jdk:master\n\nChange-Id: I40cce803da09bae31cd74b86bf93607a08219545"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"12748c7abcc4d006898384aeb8fa6c05415e4423"},{"commit":{"message":"8303278: Imprecise bottom type of ExtractB\/UB\n\nThis is a trivial patch, which fixes the bottom type of ExtractB\/UB\nnodes.\n\nExtractNode can be generated by Vector API Vector.lane(int), which gets\nthe lane element at the given index. A more precise type of range can\nhelp to optimize out unnecessary type conversion in some cases.\n\nBelow shows a typical case used ExtractBNode\n\n```\n  public static byte byteLt16() {\n   ByteVector vecb = ByteVector.broadcast(ByteVector.SPECIES_128, 1);\n   return vecb.lane(1);\n  }\n\n```\nIn this case, c2 constructs IR graph like:\n\n    ExtractB  ConI(24)\n       |     __|\n       |    \/  |\n    LShiftI  __|\n       |    \/\n    RShiftI\n\nwhich generates AArch64 code:\n\n  movi    v16.16b, #0x1\n  smov    x11, v16.b[1]\n  sxtb    w0, w11\n\nwith this patch, this shift pair can be optimized out by RShiftI's\nidentity [1]. The code is optimized to:\n\n  movi    v16.16b, #0x1\n  smov    x0, v16.b[1]\n\n[TEST]\n\nFull jtreg passed except 4 files on x86:\n\njdk\/incubator\/vector\/Byte128VectorTests.java\njdk\/incubator\/vector\/Byte256VectorTests.java\njdk\/incubator\/vector\/Byte512VectorTests.java\njdk\/incubator\/vector\/Byte64VectorTests.java\n\nThey are caused by a known issue on x86 [2].\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/742bc041eaba1ff9beb7f5b6d896e4f382b030ea\/src\/hotspot\/share\/opto\/mulnode.cpp#L1052\n[2] https:\/\/bugs.openjdk.org\/browse\/JDK-8303508\n\nChange-Id: Ibea9aeacb41b4d1c5b2621c7a97494429394b599"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"29e991531e969f5a028f96d0adf1c41877304b3b"}]