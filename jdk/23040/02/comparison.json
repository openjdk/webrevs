{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import com.sun.hotspot.igv.view.PlaceholderTopComponent;\n@@ -42,0 +43,9 @@\n+import java.awt.HeadlessException;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n@@ -95,0 +105,3 @@\n+    private final DropTargetListener fileDropListener = new FileDropListener();\n+    private final PlaceholderTopComponent editorPlaceholder = new PlaceholderTopComponent(fileDropListener);\n+\n@@ -103,0 +116,11 @@\n+\n+        showEditorPlaceholder();\n+\n+        WindowManager.getDefault().invokeWhenUIReady(() -> {\n+           new DropTarget(WindowManager.getDefault().getMainWindow(), fileDropListener);\n+        });\n+    }\n+\n+    private void showEditorPlaceholder() {\n+        editorPlaceholder.open();\n+        editorPlaceholder.requestActive();\n@@ -239,0 +263,5 @@\n+        if (document.getElements().isEmpty()) {\n+            showEditorPlaceholder();\n+        } else {\n+            editorPlaceholder.close();\n+        }\n@@ -375,9 +404,14 @@\n-            clearWorkspace();\n-            String path = fc.getSelectedFile().getAbsolutePath();\n-            Settings.get().put(Settings.DIRECTORY, path);\n-            setDocumentPath(path);\n-            try {\n-                loadGraphDocument(path, true);\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n+            handleOpen(fc.getSelectedFile());\n+        }\n+    }\n+\n+    private void handleOpen(File file) {\n+        clearWorkspace();\n+        editorPlaceholder.close();\n+        String path = file.getAbsolutePath();\n+        Settings.get().put(Settings.DIRECTORY, path);\n+        setDocumentPath(path);\n+        try {\n+            loadGraphDocument(path, true);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n@@ -593,0 +627,59 @@\n+    private class FileDropListener implements DropTargetListener {\n+        @Override\n+        public void dragEnter(DropTargetDragEvent dtde) {\n+            if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n+                dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+            } else {\n+                dtde.rejectDrag();\n+            }\n+        }\n+\n+        @Override\n+        public void dragOver(DropTargetDragEvent dtde) {\n+            dragEnter(dtde);\n+        }\n+\n+        @Override\n+        public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+        @Override\n+        public void dragExit(DropTargetEvent dte) {}\n+\n+        @Override\n+        public void drop(DropTargetDropEvent dtde) {\n+            try {\n+                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n+                    dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+\n+                    List<File> droppedFiles = (List<File>) dtde.getTransferable()\n+                            .getTransferData(DataFlavor.javaFileListFlavor);\n+\n+                    if (droppedFiles.isEmpty()) return;\n+                    if (droppedFiles.size() > 1) {\n+                        JOptionPane.showMessageDialog(null,\n+                                \"Please only drag and drop one file as only one file can be open at a time.\",\n+                                \"Multiple Files Dropped\", JOptionPane.WARNING_MESSAGE);\n+                        return;\n+                    }\n+\n+                    File file = droppedFiles.get(0);\n+\n+                    if (file.getName().endsWith(\".xml\") || file.getName().endsWith(\".igv\")) {\n+                        handleOpen(file);\n+                    } else {\n+                        JOptionPane.showMessageDialog(null,\n+                                \"Unsupported file type: \" + file.getName(),\n+                                \"Unsupported File\", JOptionPane.WARNING_MESSAGE);\n+                    }\n+\n+                    dtde.dropComplete(true);\n+                } else {\n+                    dtde.rejectDrop();\n+                }\n+            } catch (HeadlessException | UnsupportedFlavorException | IOException ex) {\n+                ex.printStackTrace();\n+                dtde.dropComplete(false);\n+            }\n+        }\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":103,"deletions":10,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view;\n+\n+import java.awt.BorderLayout;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetListener;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingConstants;\n+import org.openide.windows.TopComponent;\n+\n+\/**\n+ * This TopComponent is displayed in the editor location if no graphs have been loaded\n+ * and allows the user to easily drag and drop graph files to be opened.\n+ *\/\n+public class PlaceholderTopComponent extends TopComponent {\n+    public PlaceholderTopComponent(DropTargetListener fileDropListener) {\n+        setLayout(new BorderLayout());\n+        JPanel container = new JPanel(new BorderLayout());\n+        container.add(new JLabel(\"Drop file here to open\", SwingConstants.CENTER), BorderLayout.CENTER);\n+        container.setDropTarget(new DropTarget(container, fileDropListener));\n+        add(container, BorderLayout.CENTER);\n+        setName(\"Welcome\");\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/PlaceholderTopComponent.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}