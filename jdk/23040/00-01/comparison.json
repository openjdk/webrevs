{"files":[{"patch":"@@ -105,58 +105,1 @@\n-    private final DropTargetListener fileDropListener = new DropTargetListener() {\n-        @Override\n-        public void dragEnter(DropTargetDragEvent dtde) {\n-            if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n-                dtde.acceptDrag(DnDConstants.ACTION_COPY);\n-            } else {\n-                dtde.rejectDrag();\n-            }\n-        }\n-\n-        @Override\n-        public void dragOver(DropTargetDragEvent dtde) {\n-            dragEnter(dtde);\n-        }\n-\n-        @Override\n-        public void dropActionChanged(DropTargetDragEvent dtde) {}\n-\n-        @Override\n-        public void dragExit(DropTargetEvent dte) {}\n-\n-        @Override\n-        public void drop(DropTargetDropEvent dtde) {\n-            try {\n-                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n-                    dtde.acceptDrop(DnDConstants.ACTION_COPY);\n-\n-                    List<File> droppedFiles = (List<File>) dtde.getTransferable()\n-                            .getTransferData(DataFlavor.javaFileListFlavor);\n-\n-                    if (droppedFiles.isEmpty()) return;\n-                    if (droppedFiles.size() > 1) {\n-                        JOptionPane.showMessageDialog(null,\n-                            \"Please only drag and drop one file as only one file can be open at a time.\",\n-                            \"Multiple Files Dropped\", JOptionPane.WARNING_MESSAGE);\n-                        return;\n-                    }\n-\n-                    File file = droppedFiles.get(0);\n-\n-                    if (file.getName().endsWith(\".xml\") || file.getName().endsWith(\".igv\")) {\n-                        handleOpen(file);\n-                    } else {\n-                        JOptionPane.showMessageDialog(null,\n-                            \"Unsupported file type: \" + file.getName(),\n-                            \"Unsupported File\", JOptionPane.WARNING_MESSAGE);\n-                    }\n-\n-                    dtde.dropComplete(true);\n-                } else {\n-                    dtde.rejectDrop();\n-                }\n-            } catch (HeadlessException | UnsupportedFlavorException | IOException ex) {\n-                ex.printStackTrace();\n-                dtde.dropComplete(false);\n-            }\n-        }\n-    };\n+    private final DropTargetListener fileDropListener = new FileDropListener();\n@@ -684,0 +627,59 @@\n+    private class FileDropListener implements DropTargetListener {\n+        @Override\n+        public void dragEnter(DropTargetDragEvent dtde) {\n+            if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n+                dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+            } else {\n+                dtde.rejectDrag();\n+            }\n+        }\n+\n+        @Override\n+        public void dragOver(DropTargetDragEvent dtde) {\n+            dragEnter(dtde);\n+        }\n+\n+        @Override\n+        public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+        @Override\n+        public void dragExit(DropTargetEvent dte) {}\n+\n+        @Override\n+        public void drop(DropTargetDropEvent dtde) {\n+            try {\n+                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n+                    dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+\n+                    List<File> droppedFiles = (List<File>) dtde.getTransferable()\n+                            .getTransferData(DataFlavor.javaFileListFlavor);\n+\n+                    if (droppedFiles.isEmpty()) return;\n+                    if (droppedFiles.size() > 1) {\n+                        JOptionPane.showMessageDialog(null,\n+                                \"Please only drag and drop one file as only one file can be open at a time.\",\n+                                \"Multiple Files Dropped\", JOptionPane.WARNING_MESSAGE);\n+                        return;\n+                    }\n+\n+                    File file = droppedFiles.get(0);\n+\n+                    if (file.getName().endsWith(\".xml\") || file.getName().endsWith(\".igv\")) {\n+                        handleOpen(file);\n+                    } else {\n+                        JOptionPane.showMessageDialog(null,\n+                                \"Unsupported file type: \" + file.getName(),\n+                                \"Unsupported File\", JOptionPane.WARNING_MESSAGE);\n+                    }\n+\n+                    dtde.dropComplete(true);\n+                } else {\n+                    dtde.rejectDrop();\n+                }\n+            } catch (HeadlessException | UnsupportedFlavorException | IOException ex) {\n+                ex.printStackTrace();\n+                dtde.dropComplete(false);\n+            }\n+        }\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":60,"deletions":58,"binary":false,"changes":118,"status":"modified"}]}