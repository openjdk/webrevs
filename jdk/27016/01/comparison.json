{"files":[{"patch":"@@ -120,1 +120,1 @@\n-        if (MetaspaceShared::is_in_shared_metaspace(fault_addr)) {\n+        if (MetaspaceShared::in_aot_cache(fault_addr)) {\n","filename":"src\/hotspot\/os\/posix\/vmError_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        if (MetaspaceShared::is_in_shared_metaspace(fault_addr)) {\n+        if (MetaspaceShared::in_aot_cache(fault_addr)) {\n","filename":"src\/hotspot\/os\/windows\/vmError_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-  if (CDSConfig::is_dumping_dynamic_archive() && ik->is_shared()) {\n+  if (CDSConfig::is_dumping_dynamic_archive() && ik->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-    if (ik->is_shared() && CDSConfig::is_dumping_dynamic_archive()) {\n+    if (ik->in_aot_cache() && CDSConfig::is_dumping_dynamic_archive()) {\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    if (!ik->is_shared() && SystemDictionaryShared::is_excluded_class(ik)) {\n+    if (!ik->in_aot_cache() && SystemDictionaryShared::is_excluded_class(ik)) {\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -368,2 +368,2 @@\n-    _mapped_static_archive_bottom = (address)MetaspaceObj::shared_metaspace_base();\n-    _mapped_static_archive_top  = (address)MetaspaceObj::shared_metaspace_top();\n+    _mapped_static_archive_bottom = (address)MetaspaceObj::aot_metaspace_base();\n+    _mapped_static_archive_top  = (address)MetaspaceObj::aot_metaspace_top();\n@@ -543,1 +543,1 @@\n-    if (CDSConfig::is_dumping_dynamic_archive() && MetaspaceShared::is_shared_static(bottom)) {\n+    if (CDSConfig::is_dumping_dynamic_archive() && MetaspaceShared::in_aot_cache_static_region(bottom)) {\n@@ -556,1 +556,1 @@\n-  if (CDSConfig::is_dumping_dynamic_archive() && MetaspaceShared::is_in_shared_metaspace(obj)) {\n+  if (CDSConfig::is_dumping_dynamic_archive() && MetaspaceShared::in_aot_cache(obj)) {\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-  \/\/ the range of the mapped CDS archive (e.g., Metaspace::is_in_shared_metaspace()).\n+  \/\/ the range of the mapped CDS archive (e.g., Metaspace::in_aot_cache()).\n@@ -290,1 +290,1 @@\n-    assert(Metaspace::is_in_shared_metaspace(p), \"must be\");\n+    assert(Metaspace::in_aot_cache(p), \"must be\");\n@@ -306,1 +306,1 @@\n-    assert(Metaspace::is_in_shared_metaspace(p), \"must be\");\n+    assert(Metaspace::in_aot_cache(p), \"must be\");\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        if (is_dynamic_dump && MetaspaceShared::is_in_shared_metaspace(ptr)) {\n+        if (is_dynamic_dump && MetaspaceShared::in_aot_cache(ptr)) {\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,2 +120,2 @@\n-  if (CDSConfig::is_using_full_module_graph() && ik->is_shared() && pkg_entry != nullptr) {\n-    assert(MetaspaceShared::is_in_shared_metaspace(pkg_entry), \"must be\");\n+  if (CDSConfig::is_using_full_module_graph() && ik->in_aot_cache() && pkg_entry != nullptr) {\n+    assert(MetaspaceShared::in_aot_cache(pkg_entry), \"must be\");\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-    if (!k->is_shared()) {\n+    if (!k->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-  assert(MetaspaceShared::is_in_shared_metaspace(m), \"must be\");\n+  assert(MetaspaceShared::in_aot_cache(m), \"must be\");\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  assert(CDSConfig::is_dumping_final_static_archive() || !k->is_shared(), \"Do not call with shared classes\");\n+  assert(CDSConfig::is_dumping_final_static_archive() || !k->in_aot_cache(), \"Do not call with shared classes\");\n@@ -154,1 +154,1 @@\n-  assert(CDSConfig::is_dumping_final_static_archive() || !k->is_shared(), \"Do not call with shared classes\");\n+  assert(CDSConfig::is_dumping_final_static_archive() || !k->in_aot_cache(), \"Do not call with shared classes\");\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-      assert(MetaspaceShared::is_shared_static((void*)k),\n+      assert(MetaspaceShared::in_aot_cache_static_region((void*)k),\n@@ -193,1 +193,1 @@\n-      while (ak != nullptr && ak->is_shared()) {\n+      while (ak != nullptr && ak->in_aot_cache()) {\n@@ -256,1 +256,1 @@\n-  if (MetaspaceShared::is_in_shared_metaspace(ik)) {\n+  if (MetaspaceShared::in_aot_cache(ik)) {\n@@ -290,1 +290,1 @@\n-      assert(MetaspaceShared::is_in_shared_metaspace(name) || is_in_buffer_space(name), \"must be\");\n+      assert(MetaspaceShared::in_aot_cache(name) || is_in_buffer_space(name), \"must be\");\n@@ -296,1 +296,1 @@\n-      assert(MetaspaceShared::is_in_shared_metaspace(name) || is_in_buffer_space(name), \"must be\");\n+      assert(MetaspaceShared::in_aot_cache(name) || is_in_buffer_space(name), \"must be\");\n@@ -370,1 +370,1 @@\n-      if (MetaspaceShared::is_shared_static(elem)) {\n+      if (MetaspaceShared::in_aot_cache_static_region(elem)) {\n@@ -377,1 +377,1 @@\n-        assert(!MetaspaceShared::is_shared_static(oak),\n+        assert(!MetaspaceShared::in_aot_cache_static_region(oak),\n@@ -438,1 +438,1 @@\n-      assert(MetaspaceShared::is_shared_static((void*)elm), \"must be\");\n+      assert(MetaspaceShared::in_aot_cache_static_region((void*)elm), \"must be\");\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1223,1 +1223,1 @@\n-  if (!k->is_shared()) {\n+  if (!k->in_aot_cache()) {\n@@ -1277,1 +1277,1 @@\n-        if (!klass->is_shared()) {\n+        if (!klass->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-      if (!klass->is_shared() && klass->shared_classpath_index() < 0) {\n+      if (!klass->in_aot_cache() && klass->shared_classpath_index() < 0) {\n@@ -226,1 +226,1 @@\n-  if (!klass->is_shared()) {\n+  if (!klass->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -250,6 +250,6 @@\n-  if (!caller_ik->is_shared()     ||\n-      !invoked_name->is_shared()  ||\n-      !invoked_type->is_shared()  ||\n-      !method_type->is_shared()   ||\n-      (member_method != nullptr && !member_method->is_shared()) ||\n-      !instantiated_method_type->is_shared()) {\n+  if (!caller_ik->in_aot_cache()     ||\n+      !invoked_name->in_aot_cache()  ||\n+      !invoked_type->in_aot_cache()  ||\n+      !method_type->in_aot_cache()   ||\n+      (member_method != nullptr && !member_method->in_aot_cache()) ||\n+      !instantiated_method_type->in_aot_cache()) {\n@@ -328,1 +328,1 @@\n-  assert(shared_nest_host->is_shared(), \"nest host must be in CDS archive\");\n+  assert(shared_nest_host->in_aot_cache(), \"nest host must be in aot metaspace\");\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-void* MetaspaceShared::_shared_metaspace_static_top = nullptr;\n+void* MetaspaceShared::_aot_metaspace_static_top = nullptr;\n@@ -1211,1 +1211,1 @@\n-  if (ik->is_shared() && !CDSConfig::is_dumping_final_static_archive()) {\n+  if (ik->in_aot_cache() && !CDSConfig::is_dumping_final_static_archive()) {\n@@ -1255,1 +1255,1 @@\n-void MetaspaceShared::set_shared_metaspace_range(void* base, void *static_top, void* top) {\n+void MetaspaceShared::set_aot_metaspace_range(void* base, void *static_top, void* top) {\n@@ -1257,2 +1257,2 @@\n-  _shared_metaspace_static_top = static_top;\n-  MetaspaceObj::set_shared_metaspace_range(base, top);\n+  _aot_metaspace_static_top = static_top;\n+  MetaspaceObj::set_aot_metaspace_range(base, top);\n@@ -1261,3 +1261,3 @@\n-bool MetaspaceShared::is_shared_dynamic(void* p) {\n-  if ((p < MetaspaceObj::shared_metaspace_top()) &&\n-      (p >= _shared_metaspace_static_top)) {\n+bool MetaspaceShared::in_aot_cache_dynamic_region(void* p) {\n+  if ((p < MetaspaceObj::aot_metaspace_top()) &&\n+      (p >= _aot_metaspace_static_top)) {\n@@ -1270,2 +1270,2 @@\n-bool MetaspaceShared::is_shared_static(void* p) {\n-  if (is_in_shared_metaspace(p) && !is_shared_dynamic(p)) {\n+bool MetaspaceShared::in_aot_cache_static_region(void* p) {\n+  if (in_aot_cache(p) && !in_aot_cache_dynamic_region(p)) {\n@@ -1371,1 +1371,1 @@\n-    set_shared_metaspace_range(cds_base, static_mapinfo->mapped_end(), cds_end);\n+    set_aot_metaspace_range(cds_base, static_mapinfo->mapped_end(), cds_end);\n@@ -1379,1 +1379,1 @@\n-    set_shared_metaspace_range(nullptr, nullptr, nullptr);\n+    set_aot_metaspace_range(nullptr, nullptr, nullptr);\n@@ -1469,1 +1469,1 @@\n-    \/\/ archives, or else it would mess up the simple comparison in MetaspaceObj::is_shared().\n+    \/\/ archives, or else it would mess up the simple comparison in MetaspaceObj::in_aot_cache().\n@@ -2078,3 +2078,3 @@\n-    address base = (address)MetaspaceObj::shared_metaspace_base();\n-    address static_top = (address)_shared_metaspace_static_top;\n-    address top = (address)MetaspaceObj::shared_metaspace_top();\n+    address base = (address)MetaspaceObj::aot_metaspace_base();\n+    address static_top = (address)_aot_metaspace_static_top;\n+    address top = (address)MetaspaceObj::aot_metaspace_top();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  static void* _shared_metaspace_static_top;\n+  static void* _aot_metaspace_static_top;\n@@ -104,2 +104,2 @@\n-  static bool is_in_shared_metaspace(const void* p) {\n-    return MetaspaceObj::is_shared((const MetaspaceObj*)p);\n+  static bool in_aot_cache(const void* p) {\n+    return MetaspaceObj::in_aot_cache((const MetaspaceObj*)p);\n@@ -108,1 +108,1 @@\n-  static void set_shared_metaspace_range(void* base, void *static_top, void* top) NOT_CDS_RETURN;\n+  static void set_aot_metaspace_range(void* base, void *static_top, void* top) NOT_CDS_RETURN;\n@@ -110,2 +110,5 @@\n-  static bool is_shared_dynamic(void* p) NOT_CDS_RETURN_(false);\n-  static bool is_shared_static(void* p) NOT_CDS_RETURN_(false);\n+  \/\/ inside the metaspace of the AOT cache, or the static CDS archive\n+  static bool in_aot_cache_static_region(void* p) NOT_CDS_RETURN_(false);\n+\n+  \/\/ inside the metaspace of the dynamic static CDS archive\n+  static bool in_aot_cache_dynamic_region(void* p) NOT_CDS_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  if (MetaspaceShared::is_in_shared_metaspace(this)) {\n+  if (MetaspaceShared::in_aot_cache(this)) {\n","filename":"src\/hotspot\/share\/cds\/runTimeClassInfo.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-    assert(klass->is_shared(), \"don't call for non-shared class\");\n+    assert(klass->in_aot_cache(), \"don't call for non-shared class\");\n","filename":"src\/hotspot\/share\/cds\/runTimeClassInfo.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -418,1 +418,1 @@\n-    } else if (k->is_shared() && k->is_objArray_klass()) {\n+    } else if (k->in_aot_cache() && k->is_objArray_klass()) {\n@@ -871,1 +871,1 @@\n-  if (!m->is_shared()) {\n+  if (!m->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -942,1 +942,1 @@\n-  if (!k->is_shared()) {\n+  if (!k->in_aot_cache()) {\n@@ -980,1 +980,1 @@\n-  if (k->is_shared() && k->has_archived_mirror_index()) {\n+  if (k->in_aot_cache() && k->has_archived_mirror_index()) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  assert(ik->is_shared(), \"expecting a shared class\");\n+  assert(ik->in_aot_cache(), \"expecting a shared class\");\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1017,1 +1017,1 @@\n-  assert(super_type->is_shared(), \"must be\");\n+  assert(super_type->in_aot_cache(), \"must be\");\n@@ -1080,1 +1080,1 @@\n-  assert(ik->is_shared(), \"sanity\");\n+  assert(ik->in_aot_cache(), \"sanity\");\n@@ -1748,1 +1748,1 @@\n-        !klass_being_linked->is_shared()) {\n+        !klass_being_linked->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-  if (CDSConfig::is_dumping_dynamic_archive() && MetaspaceShared::is_in_shared_metaspace(k)) {\n+  if (CDSConfig::is_dumping_dynamic_archive() && MetaspaceShared::in_aot_cache(k)) {\n@@ -253,1 +253,1 @@\n-      && k->is_shared()) {\n+      && k->in_aot_cache()) {\n@@ -486,1 +486,1 @@\n-  precond(klass->is_shared());\n+  precond(klass->in_aot_cache());\n@@ -668,1 +668,1 @@\n-    if (CDSConfig::is_dumping_dynamic_archive() && ik->is_shared()) {\n+    if (CDSConfig::is_dumping_dynamic_archive() && ik->in_aot_cache()) {\n@@ -1021,1 +1021,1 @@\n-        if (MetaspaceObj::is_shared((const MetaspaceObj*)ptr)) {\n+        if (MetaspaceObj::in_aot_cache((const MetaspaceObj*)ptr)) {\n@@ -1109,1 +1109,1 @@\n-  if (!CDSConfig::is_using_archive() || !name->is_shared()) {\n+  if (!CDSConfig::is_using_archive() || !name->in_aot_cache()) {\n@@ -1127,1 +1127,1 @@\n-  if (!MetaspaceShared::is_shared_dynamic(name)) {\n+  if (!MetaspaceShared::in_aot_cache_dynamic_region(name)) {\n@@ -1166,1 +1166,1 @@\n-  assert(k->is_shared(), \"Must be\");\n+  assert(k->in_aot_cache(), \"Must be\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-      if (_klass->is_shared()) {\n+      if (_klass->in_aot_cache()) {\n@@ -300,1 +300,1 @@\n-    assert(MetaspaceObj::is_shared((const MetaspaceObj*)ptr), \"must be\");\n+    assert(MetaspaceObj::in_aot_cache((const MetaspaceObj*)ptr), \"must be\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-    !(klass->is_shared() && klass->is_rewritten()));\n+    !(klass->in_aot_cache() && klass->is_rewritten()));\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-    assert(Object_klass()->is_shared(), \"must be\");\n+    assert(Object_klass()->in_aot_cache(), \"must be\");\n@@ -207,1 +207,1 @@\n-      assert(k->is_shared(), \"must not be replaced by JVMTI class file load hook\");\n+      assert(k->in_aot_cache(), \"must not be replaced by JVMTI class file load hook\");\n@@ -222,1 +222,1 @@\n-  assert(klass->is_shared(), \"Must be shared class\");\n+  assert(klass->in_aot_cache(), \"Must be shared class\");\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  if (TrainingData::have_data() && klass->is_shared()) {\n+  if (TrainingData::have_data() && klass->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -928,1 +928,1 @@\n-                           resolved_iklass->is_shared() ? \"is_shared\" : \"\",\n+                           resolved_iklass->in_aot_cache() ? \"in_aot_cache\" : \"\",\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-    if (_pool->pool_holder()->is_shared()) {\n+    if (_pool->pool_holder()->in_aot_cache()) {\n@@ -570,2 +570,2 @@\n-  if (klass->is_shared()) {\n-    assert(!klass->is_rewritten(), \"rewritten shared classes cannot be rewritten again\");\n+  if (klass->in_aot_cache()) {\n+    assert(!klass->is_rewritten(), \"rewritten classes in the AOT cache cannot be rewritten again\");\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-void* MetaspaceObj::_shared_metaspace_base = nullptr;\n-void* MetaspaceObj::_shared_metaspace_top  = nullptr;\n+void* MetaspaceObj::_aot_metaspace_base = nullptr;\n+void* MetaspaceObj::_aot_metaspace_top  = nullptr;\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-  \/\/ When CDS is enabled, all shared metaspace objects are mapped\n+  \/\/ All metsapce objects in the AOT cache (CDS archive) are mapped\n@@ -266,5 +266,5 @@\n-  \/\/ two pointers to quickly determine if something is in the\n-  \/\/ shared metaspace.\n-  \/\/ When CDS is not enabled, both pointers are set to null.\n-  static void* _shared_metaspace_base;  \/\/ (inclusive) low address\n-  static void* _shared_metaspace_top;   \/\/ (exclusive) high address\n+  \/\/ two pointers to quickly determine if a MetaspaceObj is in the\n+  \/\/ AOT cache.\n+  \/\/ When AOT\/CDS is not enabled, both pointers are set to null.\n+  static void* _aot_metaspace_base;  \/\/ (inclusive) low address\n+  static void* _aot_metaspace_top;   \/\/ (exclusive) high address\n@@ -276,1 +276,1 @@\n-  \/\/ non-shared or shared metaspace.\n+  \/\/ regular- or aot metaspace.\n@@ -280,2 +280,2 @@\n-  static bool is_shared(const MetaspaceObj* p) {\n-    \/\/ If no shared metaspace regions are mapped, _shared_metaspace_{base,top} will\n+  static bool in_aot_cache(const MetaspaceObj* p) {\n+    \/\/ If no shared metaspace regions are mapped, _aot_metaspace_{base,top} will\n@@ -283,2 +283,2 @@\n-    return (((void*)p) < _shared_metaspace_top &&\n-            ((void*)p) >= _shared_metaspace_base);\n+    return (((void*)p) < _aot_metaspace_top &&\n+            ((void*)p) >= _aot_metaspace_base);\n@@ -286,1 +286,1 @@\n-  bool is_shared() const { return MetaspaceObj::is_shared(this); }\n+  bool in_aot_cache() const { return MetaspaceObj::in_aot_cache(this); }\n@@ -288,2 +288,2 @@\n-  static bool is_shared(const MetaspaceObj* p) { return false; }\n-  bool is_shared() const { return false; }\n+  static bool in_aot_cache(const MetaspaceObj* p) { return false; }\n+  bool in_aot_cache() const { return false; }\n@@ -294,3 +294,3 @@\n-  static void set_shared_metaspace_range(void* base, void* top) {\n-    _shared_metaspace_base = base;\n-    _shared_metaspace_top = top;\n+  static void set_aot_metaspace_range(void* base, void* top) {\n+    _aot_metaspace_base = base;\n+    _aot_metaspace_top = top;\n@@ -299,2 +299,2 @@\n-  static void* shared_metaspace_base() { return _shared_metaspace_base; }\n-  static void* shared_metaspace_top()  { return _shared_metaspace_top;  }\n+  static void* aot_metaspace_base() { return _aot_metaspace_base; }\n+  static void* aot_metaspace_top()  { return _aot_metaspace_top;  }\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-      assert(!data->is_shared(), \"cannot deallocate array in shared spaces\");\n+      assert(!data->in_aot_cache(), \"cannot deallocate array in aot metaspace spaces\");\n@@ -76,1 +76,1 @@\n-      assert(!md->is_shared(), \"cannot deallocate if in shared spaces\");\n+      assert(!md->in_aot_cache(), \"cannot deallocate if in aot metaspace spaces\");\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1039,2 +1039,2 @@\n-bool Metaspace::is_in_shared_metaspace(const void* ptr) {\n-  return MetaspaceShared::is_in_shared_metaspace(ptr);\n+bool Metaspace::in_aot_cache(const void* ptr) {\n+  return MetaspaceShared::in_aot_cache(ptr);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-    return is_in_shared_metaspace(ptr) || \/\/ in cds\n+    return in_aot_cache(ptr) || \/\/ in cds\n@@ -145,1 +145,1 @@\n-  static bool is_in_shared_metaspace(const void* ptr);\n+  static bool in_aot_cache(const void* ptr);\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    if (k->is_shared()) {\n+    if (k->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/printCLDMetaspaceInfoClosure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-  \/\/ Print a 's' for shared classes\n-  _out->put(k->is_shared() ? 's': ' ');\n+  \/\/ Print a 's' for classes in the aot metaspace (used to be called shared classes)\n+  _out->put(k->in_aot_cache() ? 's': ' ');\n","filename":"src\/hotspot\/share\/memory\/metaspace\/printMetaspaceInfoKlassClosure.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-    if (MetaspaceShared::is_shared_dynamic((void*)k)) {\n+    if (MetaspaceShared::in_aot_cache_dynamic_region((void*)k)) {\n@@ -264,1 +264,1 @@\n-    } else if (MetaspaceShared::is_shared_static((void*)k)) {\n+    } else if (MetaspaceShared::in_aot_cache_static_region((void*)k)) {\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -587,1 +587,1 @@\n-  assert(!is_shared(), \"shared caches are not deallocated\");\n+  assert(!in_aot_cache(), \"objects in aot metaspace are not deallocated\");\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-      !methods->is_shared()) {\n+      !methods->in_aot_cache()) {\n@@ -588,1 +588,1 @@\n-    if (ti != sti && ti != nullptr && !ti->is_shared()) {\n+    if (ti != sti && ti != nullptr && !ti->in_aot_cache()) {\n@@ -595,1 +595,1 @@\n-      local_interfaces != nullptr && !local_interfaces->is_shared()) {\n+      local_interfaces != nullptr && !local_interfaces->in_aot_cache()) {\n@@ -602,1 +602,1 @@\n-  if (record_components != nullptr && !record_components->is_shared()) {\n+  if (record_components != nullptr && !record_components->in_aot_cache()) {\n@@ -646,1 +646,1 @@\n-      !method_ordering()->is_shared()) {\n+      !method_ordering()->in_aot_cache()) {\n@@ -654,1 +654,1 @@\n-      !default_methods()->is_shared()) {\n+      !default_methods()->in_aot_cache()) {\n@@ -662,1 +662,1 @@\n-      !default_vtable_indices()->is_shared()) {\n+      !default_vtable_indices()->in_aot_cache()) {\n@@ -675,1 +675,1 @@\n-      !secondary_supers()->is_shared()) {\n+      !secondary_supers()->in_aot_cache()) {\n@@ -684,1 +684,1 @@\n-  if (fieldinfo_stream() != nullptr && !fieldinfo_stream()->is_shared()) {\n+  if (fieldinfo_stream() != nullptr && !fieldinfo_stream()->in_aot_cache()) {\n@@ -689,1 +689,1 @@\n-  if (fieldinfo_search_table() != nullptr && !fieldinfo_search_table()->is_shared()) {\n+  if (fieldinfo_search_table() != nullptr && !fieldinfo_search_table()->in_aot_cache()) {\n@@ -694,1 +694,1 @@\n-  if (fields_status() != nullptr && !fields_status()->is_shared()) {\n+  if (fields_status() != nullptr && !fields_status()->in_aot_cache()) {\n@@ -703,1 +703,1 @@\n-    if (!constants()->is_shared()) {\n+    if (!constants()->in_aot_cache()) {\n@@ -714,1 +714,1 @@\n-      !inner_classes()->is_shared()) {\n+      !inner_classes()->in_aot_cache()) {\n@@ -721,1 +721,1 @@\n-      !nest_members()->is_shared()) {\n+      !nest_members()->in_aot_cache()) {\n@@ -728,1 +728,1 @@\n-      !permitted_subclasses()->is_shared()) {\n+      !permitted_subclasses()->in_aot_cache()) {\n@@ -734,1 +734,1 @@\n-  if (annotations() != nullptr && !annotations()->is_shared()) {\n+  if (annotations() != nullptr && !annotations()->in_aot_cache()) {\n@@ -998,1 +998,1 @@\n-        if (is_shared()) {\n+        if (in_aot_cache()) {\n@@ -1017,1 +1017,1 @@\n-      } else if (is_shared()) {\n+      } else if (in_aot_cache()) {\n@@ -1035,1 +1035,1 @@\n-      if (is_shared() && verified_at_dump_time() &&\n+      if (in_aot_cache() && verified_at_dump_time() &&\n@@ -1077,1 +1077,1 @@\n-    assert(is_shared(), \"rewriting an unshared class?\");\n+    assert(in_aot_cache(), \"rewriting an unshared class?\");\n@@ -1689,1 +1689,1 @@\n-    assert(is_shared(), \"must be\");\n+    assert(in_aot_cache(), \"must be\");\n@@ -2334,1 +2334,1 @@\n-    if (ik->is_shared()) buf[i++] = 'S';\n+    if (ik->in_aot_cache()) buf[i++] = 'S';\n@@ -2767,1 +2767,1 @@\n-             MetaspaceShared::is_in_shared_metaspace(_package_entry)) {\n+             MetaspaceShared::in_aot_cache(_package_entry)) {\n@@ -2849,1 +2849,1 @@\n-  if (MetaspaceShared::is_in_shared_metaspace(this)) {\n+  if (MetaspaceShared::in_aot_cache(this)) {\n@@ -3085,1 +3085,1 @@\n-  if (!is_shared()) {\n+  if (!in_aot_cache()) {\n@@ -3089,1 +3089,1 @@\n-  if (is_shared() && _package_entry != nullptr) {\n+  if (in_aot_cache() && _package_entry != nullptr) {\n@@ -3092,1 +3092,1 @@\n-      assert(MetaspaceShared::is_in_shared_metaspace(_package_entry), \"must be\");\n+      assert(MetaspaceShared::in_aot_cache(_package_entry), \"must be\");\n@@ -3974,2 +3974,2 @@\n-    assert(this->is_shared(), \"must be\");\n-    if (MetaspaceShared::is_shared_dynamic((void*)this)) {\n+    assert(this->in_aot_cache(), \"must be\");\n+    if (MetaspaceShared::in_aot_cache_dynamic_region((void*)this)) {\n@@ -4261,1 +4261,1 @@\n-  bool good_state = is_shared() ? (_init_state <= state)\n+  bool good_state = in_aot_cache() ? (_init_state <= state)\n@@ -4362,1 +4362,1 @@\n-      if (pvcp->is_shared()) {\n+      if (pvcp->in_aot_cache()) {\n@@ -4474,1 +4474,1 @@\n-  if (cp_ref->is_shared()) {\n+  if (cp_ref->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-      assert(klass->is_shared(), \"Must be\");\n+      assert(klass->in_aot_cache(), \"Must be\");\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -814,1 +814,1 @@\n-  set_is_shared();\n+  set_in_aot_cache();\n@@ -867,1 +867,1 @@\n-  assert(is_shared(), \"must be set\");\n+  assert(in_aot_cache(), \"must be set\");\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-  u2     _shared_class_flags;\n+  u2 _shared_class_flags;\n@@ -179,1 +179,1 @@\n-    _is_shared_class                       = 1 << 0,  \/\/ shadows MetaspaceObj::is_shared\n+    _in_aot_cache                          = 1 << 0,\n@@ -380,2 +380,2 @@\n-  bool is_shared() const                { \/\/ shadows MetaspaceObj::is_shared)()\n-    CDS_ONLY(return (_shared_class_flags & _is_shared_class) != 0;)\n+  bool in_aot_cache() const                { \/\/ shadows MetaspaceObj::in_aot_cache)()\n+    CDS_ONLY(return (_shared_class_flags & _in_aot_cache) != 0;)\n@@ -385,2 +385,2 @@\n-  void set_is_shared() {\n-    CDS_ONLY(_shared_class_flags |= _is_shared_class;)\n+  void set_in_aot_cache() {\n+    CDS_ONLY(_shared_class_flags |= _in_aot_cache;)\n@@ -612,1 +612,1 @@\n-    assert(is_shared(), \"use this for shared classes only\");\n+    assert(in_aot_cache(), \"use this for shared classes only\");\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  return _klass->is_shared() && !MetaspaceShared::remapped_readwrite() && _klass->verified_at_dump_time();\n+  return _klass->in_aot_cache() && !MetaspaceShared::remapped_readwrite() && _klass->verified_at_dump_time();\n@@ -166,1 +166,1 @@\n-  bool is_shared = _klass->is_shared();\n+  bool in_aot_cache = _klass->in_aot_cache();\n@@ -181,1 +181,1 @@\n-    assert(!is_shared, \"sanity\");\n+    assert(!in_aot_cache, \"sanity\");\n@@ -1095,1 +1095,1 @@\n-  if (MetaspaceShared::is_in_shared_metaspace((void*)&_method) &&\n+  if (MetaspaceShared::in_aot_cache((void*)&_method) &&\n@@ -1281,1 +1281,1 @@\n-               m->is_shared(),\n+               m->in_aot_cache(),\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-  if (is_shared() && !MetaspaceShared::remapped_readwrite() && method_holder()->verified_at_dump_time()) {\n+  if (in_aot_cache() && !MetaspaceShared::remapped_readwrite() && method_holder()->verified_at_dump_time()) {\n@@ -454,1 +454,1 @@\n-  if (is_shared() && !MetaspaceShared::remapped_readwrite() && method_holder()->verified_at_dump_time()) {\n+  if (in_aot_cache() && !MetaspaceShared::remapped_readwrite() && method_holder()->verified_at_dump_time()) {\n@@ -1248,1 +1248,1 @@\n-    if (adapter()->is_shared()) {\n+    if (adapter()->in_aot_cache()) {\n@@ -2169,1 +2169,1 @@\n-  } else if (m->is_shared()) {\n+  } else if (m->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -693,1 +693,1 @@\n-  return k->meta() == nullptr || MetaspaceObj::is_shared(k->meta());\n+  return k->meta() == nullptr || MetaspaceObj::in_aot_cache(k->meta());\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3426,1 +3426,1 @@\n-  if (!caller_ik->is_shared()) {\n+  if (!caller_ik->in_aot_cache()) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2157,1 +2157,1 @@\n-  return (jboolean)MetaspaceShared::is_in_shared_metaspace(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz)));\n+  return (jboolean)MetaspaceShared::in_aot_cache(java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz)));\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2760,1 +2760,1 @@\n-      if (!entry->is_shared() && VerifyAdapterSharing) {\n+      if (!entry->in_aot_cache() && VerifyAdapterSharing) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -351,2 +351,2 @@\n-     static_field(MetaspaceObj,                _shared_metaspace_base,                        void*)                                 \\\n-     static_field(MetaspaceObj,                _shared_metaspace_top,                         void*)                                 \\\n+     static_field(MetaspaceObj,                _aot_metaspace_base,                           void*)                                 \\\n+     static_field(MetaspaceObj,                _aot_metaspace_top,                            void*)                                 \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n-  private static Address sharedMetaspaceBaseAddr;\n-  private static Address sharedMetaspaceTopAddr;\n+  private static Address aotMetaspaceBaseAddr;\n+  private static Address aotMetaspaceTopAddr;\n@@ -48,2 +48,2 @@\n-    sharedMetaspaceBaseAddr = type.getAddressField(\"_shared_metaspace_base\").getStaticFieldAddress();\n-    sharedMetaspaceTopAddr  = type.getAddressField(\"_shared_metaspace_top\").getStaticFieldAddress();\n+    aotMetaspaceBaseAddr = type.getAddressField(\"_aot_metaspace_base\").getStaticFieldAddress();\n+    aotMetaspaceTopAddr  = type.getAddressField(\"_aot_metaspace_top\").getStaticFieldAddress();\n@@ -53,2 +53,2 @@\n-    Address base = sharedMetaspaceBaseAddr.getAddressAt(0);\n-    Address top  = sharedMetaspaceTopAddr. getAddressAt(0);\n+    Address base = aotMetaspaceBaseAddr.getAddressAt(0);\n+    Address top  = aotMetaspaceTopAddr. getAddressAt(0);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/MetaspaceObj.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}