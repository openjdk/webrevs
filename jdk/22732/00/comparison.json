{"files":[{"patch":"@@ -109,1 +109,0 @@\n-        configuration.currentTypeElement = typeElement;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-        configuration.currentTypeElement = typeElement;\n@@ -509,1 +508,1 @@\n-    public TypeElement getCurrentPageElement() {\n+    public TypeElement getCurrentTypeElement() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,5 +107,0 @@\n-    \/**\n-     * The TypeElement for the class file getting generated.\n-     *\/\n-    public TypeElement currentTypeElement = null;  \/\/ Set this TypeElement in the ClassWriter.\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1027,3 +1027,2 @@\n-     * Return the main type element of the current page or null for pages that don't have one.\n-     *\n-     * @return the type element of the current page.\n+     * {@return the type element documented by this writer if it is a {@code ClassWriter},\n+     * or null for any other kind of writer}\n@@ -1031,1 +1030,1 @@\n-    public TypeElement getCurrentPageElement() {\n+    public TypeElement getCurrentTypeElement() {\n@@ -1915,1 +1914,1 @@\n-        Element currentPageElement = getCurrentPageElement();\n+        Element currentPageElement = getCurrentTypeElement();\n@@ -1954,1 +1953,1 @@\n-                ? packageWriter.packageElement : getCurrentPageElement();\n+                ? packageWriter.packageElement : getCurrentTypeElement();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-                if (enclosing.equals(m_writer.getCurrentPageElement())) {\n+                if (enclosing.equals(m_writer.getCurrentTypeElement())) {\n@@ -297,1 +297,1 @@\n-                if (linkInfo.linkToSelf() || typeElement != m_writer.getCurrentPageElement()) {\n+                if (linkInfo.linkToSelf() || typeElement != m_writer.getCurrentTypeElement()) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-                        + utils.flatSignature(method, writer.getCurrentPageElement());\n+                        + utils.flatSignature(method, writer.getCurrentTypeElement());\n@@ -160,1 +160,1 @@\n-                    + utils.flatSignature(method, writer.getCurrentPageElement());\n+                    + utils.flatSignature(method, writer.getCurrentTypeElement());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/InheritDocTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-            if (config.currentTypeElement != containing) {\n+            if (htmlWriter.getCurrentTypeElement() != containing) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/LinkTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        TypeMirror returnType = utils.getReturnType(tagletWriter.getCurrentPageElement(), method);\n+        TypeMirror returnType = utils.getReturnType(tagletWriter.getCurrentTypeElement(), method);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/ReturnTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,3 +204,1 @@\n-     * Returns the main type element of the current page or null for pages that don't have one.\n-     *\n-     * @return the type element of the current page or null.\n+     * {@return the type element documented by the current {@code HtmlDocletWriter} (may be null)}\n@@ -208,2 +206,2 @@\n-    public TypeElement getCurrentPageElement() {\n-        return htmlWriter.getCurrentPageElement();\n+    public TypeElement getCurrentTypeElement() {\n+        return htmlWriter.getCurrentTypeElement();\n@@ -414,1 +412,1 @@\n-                        + utils.flatSignature(e, htmlWriter.getCurrentPageElement());\n+                        + utils.flatSignature(e, htmlWriter.getCurrentTypeElement());\n@@ -479,1 +477,1 @@\n-            return element != getCurrentPageElement();\n+            return element != getCurrentTypeElement();\n@@ -483,1 +481,1 @@\n-            return utils.getEnclosingTypeElement(element) != getCurrentPageElement();\n+            return utils.getEnclosingTypeElement(element) != getCurrentTypeElement();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletWriter.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-                    + utils.flatSignature((ExecutableElement) holder, tagletWriter.getCurrentPageElement());\n+                    + utils.flatSignature((ExecutableElement) holder, tagletWriter.getCurrentTypeElement());\n@@ -238,1 +238,1 @@\n-                tagletWriter.getCurrentPageElement(), executable);\n+                tagletWriter.getCurrentTypeElement(), executable);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/ThrowsTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -624,1 +624,1 @@\n-                    lang.String)\"><code>testMethod(String)<\/code><\/a>.\"\"\",\n+                    lang.String)\"><code>TestClassInModuleTags.testMethod(String)<\/code><\/a>.\"\"\",\n@@ -895,1 +895,1 @@\n-                    Method(java.lang.String)\"><code>testMethod(String)<\/code><\/a>.<br>\n+                    Method(java.lang.String)\"><code>TestClassInModuleTags.testMethod(String)<\/code><\/a>.<br>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testModules\/TestModules.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *      8182765 8196202 8202626 8261976 8323698\n+ *      8182765 8196202 8202626 8261976 8323698 8345770\n@@ -110,1 +110,4 @@\n-               <a href=\"..\/AnAbstract.html\" class=\"type-name-link\" title=\"class in pkg1\">AnAbstract<\/a>\"\"\"\n+               <a href=\"..\/AnAbstract.html\" class=\"type-name-link\" title=\"class in pkg1\">AnAbstract<\/a>\"\"\",\n+           \"\"\"\n+               Link to interface method: <a href=\"..\/UsedInterface.html#doNothing()\"><code>Use\\\n+               dInterface.doNothing()<\/code><\/a>.\"\"\"\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUseOption\/TestUseOption.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,4 @@\n+\n+\/**\n+ * Link to interface method: {@link #doNothing}.\n+ *\/\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUseOption\/pkg1\/AnAbstract.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}