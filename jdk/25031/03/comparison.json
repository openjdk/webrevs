{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,2 +382,3 @@\n-     * stream socket. If the stream argument is {@code false}, it\n-     * creates a datagram socket.\n+     * stream socket. Only stream socket creation is allowed. If the stream\n+     * argument is {@code false}, then this constructor throws\n+     * {@code IllegalArgumentException}.\n@@ -390,2 +391,0 @@\n-     * <p>\n-     * If a UDP socket is used, TCP\/IP related socket options will not apply.\n@@ -398,3 +397,3 @@\n-     * @throws     IllegalArgumentException if the port parameter is outside\n-     *             the specified range of valid port values, which is between\n-     *             0 and 65535, inclusive.\n+     * @throws     IllegalArgumentException if the stream parameter is {@code false}\n+     *             or if the port parameter is outside the specified range of valid\n+     *             port values, which is between 0 and 65535, inclusive.\n@@ -416,2 +415,3 @@\n-     * stream socket. If the stream argument is {@code false}, it\n-     * creates a datagram socket.\n+     * stream socket. Only stream socket creation is allowed. If the stream\n+     * argument is {@code false}, then this constructor throws\n+     * {@code IllegalArgumentException}.\n@@ -424,2 +424,0 @@\n-     * <p>\n-     * If UDP socket is used, TCP\/IP related socket options will not apply.\n@@ -429,2 +427,2 @@\n-     * @param      stream    if {@code true}, create a stream socket;\n-     *                       otherwise, create a datagram socket.\n+     * @param      stream    a {@code boolean} indicating whether this is\n+     *                       a stream socket or a datagram socket.\n@@ -432,3 +430,3 @@\n-     * @throws     IllegalArgumentException if the port parameter is outside\n-     *             the specified range of valid port values, which is between\n-     *             0 and 65535, inclusive.\n+     * @throws     IllegalArgumentException if the stream parameter is {@code false}\n+     *             or if the port parameter is outside the specified range of valid\n+     *             port values, which is between 0 and 65535, inclusive.\n@@ -457,0 +455,4 @@\n+        if (!stream) {\n+            throw new IllegalArgumentException(\n+                    \"Socket constructor does not support creation of datagram socket\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-     * Creates either a stream or a datagram socket.\n+     * Creates a stream socket.\n@@ -84,3 +84,4 @@\n-     * The {@link Socket} constructors to create a datagram socket\n-     * are deprecated for removal. This method will be re-specified\n-     * in a future release to not support creating datagram sockets.\n+     * The {@code stream} parameter provided a way in early JDK releases\n+     * to create a {@link Socket} that used a datagram socket.\n+     * It is no longer possible to do that and therefore this method will\n+     * always be called by {@code Socket} with {@code stream} as {@code true}.\n@@ -88,2 +89,1 @@\n-     * @param      stream   if {@code true}, create a stream socket;\n-     *                      otherwise, create a datagram socket.\n+     * @param      stream   must be {@code true}.\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        this.fd = Net.serverSocket(true);\n+        this.fd = Net.serverSocket();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        this.fd = Net.socket(true);\n+        this.fd = Net.socket();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -473,2 +473,2 @@\n-    static FileDescriptor socket(boolean stream) throws IOException {\n-        return socket(UNSPEC, stream);\n+    static FileDescriptor socket() throws IOException {\n+        return socket(UNSPEC, true);\n@@ -483,2 +483,2 @@\n-    static FileDescriptor serverSocket(boolean stream) {\n-        return serverSocket(UNSPEC, stream);\n+    static FileDescriptor serverSocket() {\n+        return serverSocket(UNSPEC);\n@@ -487,1 +487,1 @@\n-    static FileDescriptor serverSocket(ProtocolFamily family, boolean stream) {\n+    static FileDescriptor serverSocket(ProtocolFamily family) {\n@@ -490,1 +490,1 @@\n-        return IOUtil.newFD(socket0(preferIPv6, stream, true, FAST_LOOPBACK));\n+        return IOUtil.newFD(socket0(preferIPv6, true, true, FAST_LOOPBACK));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -103,2 +103,0 @@\n-    \/\/ set by SocketImpl.create, protected by stateLock\n-    private boolean stream;\n@@ -454,0 +452,3 @@\n+        if (!stream) {\n+            throw new IOException(\"Datagram socket creation not supported\");\n+        }\n@@ -459,2 +460,1 @@\n-                assert stream;\n-                fd = Net.serverSocket(true);\n+                fd = Net.serverSocket();\n@@ -462,1 +462,1 @@\n-                fd = Net.socket(stream);\n+                fd = Net.socket();\n@@ -464,1 +464,1 @@\n-            Runnable closer = closerFor(fd, stream);\n+            Runnable closer = closerFor(fd);\n@@ -466,1 +466,0 @@\n-            this.stream = stream;\n@@ -656,2 +655,0 @@\n-            if (!stream)\n-                throw new SocketException(\"Not a stream socket\");\n@@ -767,1 +764,1 @@\n-        Runnable closer = closerFor(newfd, true);\n+        Runnable closer = closerFor(newfd);\n@@ -770,1 +767,0 @@\n-            nsi.stream = true;\n@@ -1190,18 +1186,8 @@\n-    private static Runnable closerFor(FileDescriptor fd, boolean stream) {\n-        if (stream) {\n-            return () -> {\n-                try {\n-                    nd.close(fd);\n-                } catch (IOException ioe) {\n-                    throw new UncheckedIOException(ioe);\n-                }\n-            };\n-        } else {\n-            return () -> {\n-                try {\n-                    nd.close(fd);\n-                } catch (IOException ioe) {\n-                    throw new UncheckedIOException(ioe);\n-                }\n-            };\n-        }\n+    private static Runnable closerFor(FileDescriptor fd) {\n+        return () -> {\n+            try {\n+                nd.close(fd);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe);\n+            }\n+        };\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":15,"deletions":29,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-            this.fd = Net.serverSocket(family, true);\n+            this.fd = Net.serverSocket(family);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,7 +24,0 @@\n-\/**\n- * @test\n- * @run testng\/othervm UdpSocket\n- * @summary Basic test for a Socket to a UDP socket\n- *\/\n-\n-import java.io.IOException;\n@@ -32,1 +25,0 @@\n-import java.net.InetSocketAddress;\n@@ -34,4 +26,0 @@\n-import java.net.SocketAddress;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.DatagramChannel;\n-import java.util.Arrays;\n@@ -40,1 +28,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.fail;\n@@ -42,1 +30,5 @@\n-@Test\n+\/*\n+ * @test\n+ * @summary Basic test for the UDP sockets through the java.net.Socket constructors\n+ * @run testng UdpSocket\n+ *\/\n@@ -45,2 +37,0 @@\n-    private static final int MAX_RETRIES = 3;\n-\n@@ -48,1 +38,2 @@\n-     * Test using the Socket API to send\/receive datagrams\n+     * Verifies that the {@code Socket} constructors that take the {@code stream}\n+     * parameter don't allow construction of UDP sockets.\n@@ -50,18 +41,10 @@\n-    public void testSendReceive() throws IOException {\n-        final String MESSAGE = \"hello\";\n-\n-        try (DatagramChannel dc = DatagramChannel.open()) {\n-            var loopback = InetAddress.getLoopbackAddress();\n-            dc.bind(new InetSocketAddress(loopback, 0));\n-\n-            int port = ((InetSocketAddress) dc.getLocalAddress()).getPort();\n-            try (Socket s = new Socket(loopback, port, false)) {\n-                \/\/ send datagram with socket output stream\n-                byte[] array1 = MESSAGE.getBytes(\"UTF-8\");\n-                s.getOutputStream().write(array1);\n-\n-                \/\/ receive the datagram\n-                var buf = ByteBuffer.allocate(100);\n-                SocketAddress remote = dc.receive(buf);\n-                buf.flip();\n-                assertTrue(buf.remaining() == MESSAGE.length(), \"Unexpected size\");\n+    @Test\n+    public void testUDPConstructors() throws Exception {\n+        try {\n+            new Socket(\"doesnotmatter\", 12345, false);\n+            fail(\"Socket constructor was expected to throw IllegalArgumentException\" +\n+                    \" for stream=false, but didn't\");\n+        } catch (IllegalArgumentException iae) {\n+            \/\/ verify it's thrown for the right reason\n+            assertExceptionMessage(iae);\n+        }\n@@ -69,2 +52,9 @@\n-                \/\/ echo the datagram\n-                dc.send(buf, remote);\n+        try {\n+            new Socket(InetAddress.getLoopbackAddress(), 12345, false);\n+            fail(\"Socket constructor was expected to throw IllegalArgumentException\" +\n+                    \" for stream=false, but didn't\");\n+        } catch (IllegalArgumentException iae) {\n+            \/\/ verify it's thrown for the right reason\n+            assertExceptionMessage(iae);\n+        }\n+    }\n@@ -72,7 +62,6 @@\n-                \/\/ receive datagram with the socket input stream\n-                byte[] array2 = new byte[100];\n-                int n = s.getInputStream().read(array2);\n-                assertTrue(n == MESSAGE.length(), \"Unexpected size\");\n-                assertEquals(Arrays.copyOf(array1, n), Arrays.copyOf(array2, n),\n-                            \"Unexpected contents\");\n-            }\n+    private static void assertExceptionMessage(final IllegalArgumentException iae) {\n+        final String msg = iae.getMessage();\n+        if (msg != null && msg.contains(\n+                \"Socket constructor does not support creation of datagram socket\")) {\n+            \/\/ contains the expected message\n+            return;\n@@ -80,0 +69,2 @@\n+        \/\/ unexpected exception message, propagate the original exception\n+        throw iae;\n","filename":"test\/jdk\/java\/net\/Socket\/UdpSocket.java","additions":36,"deletions":45,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @summary Test the platform SocketImpl when used in unintended ways\n@@ -29,1 +30,0 @@\n- * @summary Test the platform SocketImpl when used in unintended ways\n@@ -33,2 +33,0 @@\n-import java.io.InputStream;\n-import java.io.OutputStream;\n@@ -40,1 +38,0 @@\n-import java.net.SocketImpl;\n@@ -44,1 +41,0 @@\n-import java.util.Set;\n@@ -83,0 +79,9 @@\n+    \/**\n+     * Test create when not a stream socket.\n+     *\/\n+    public void testCreate3() throws IOException {\n+        try (var impl = new PlatformSocketImpl(false)) {\n+            expectThrows(IOException.class, () -> impl.create(false));\n+        }\n+    }\n+\n@@ -238,12 +243,0 @@\n-    \/**\n-     * Test accept when not a stream socket.\n-     *\/\n-    public void testAccept3() throws IOException {\n-        try (var impl = new PlatformSocketImpl(false)) {\n-            impl.create(false);\n-            impl.bind(InetAddress.getLoopbackAddress(), 0);\n-            var si = new PlatformSocketImpl(false);\n-            expectThrows(IOException.class, () -> impl.accept(si));\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/net\/SocketImpl\/BadUsages.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"}]}