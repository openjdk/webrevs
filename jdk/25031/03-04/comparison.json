{"files":[{"patch":"@@ -381,5 +381,0 @@\n-     * If the stream argument is {@code true}, this creates a\n-     * stream socket. Only stream socket creation is allowed. If the stream\n-     * argument is {@code false}, then this constructor throws\n-     * {@code IllegalArgumentException}.\n-     * <p>\n@@ -394,2 +389,1 @@\n-     * @param      stream   a {@code boolean} indicating whether this is\n-     *                      a stream socket or a datagram socket.\n+     * @param      stream   must be true, false is not allowed.\n@@ -414,5 +408,0 @@\n-     * If the stream argument is {@code true}, this creates a\n-     * stream socket. Only stream socket creation is allowed. If the stream\n-     * argument is {@code false}, then this constructor throws\n-     * {@code IllegalArgumentException}.\n-     * <p>\n@@ -427,2 +416,1 @@\n-     * @param      stream    a {@code boolean} indicating whether this is\n-     *                       a stream socket or a datagram socket.\n+     * @param      stream    must be true, false is not allowed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import sun.tools.jar.ValidatorAccess;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+\n+\/*\n+ * @test\n+ * @modules jdk.jartool\/sun.tools.jar\n+ * @build jdk.jartool\/sun.tools.jar.ValidatorAccess\n+ * @run main\/othervm FooBarTest\n+ *\/\n+public class FooBarTest {\n+\n+    public static void main(final String[] args) throws Exception {\n+        final Path file = Files.createTempFile(Path.of(\".\"), \"test\", \".zip\");\n+        try (ZipOutputStream zos = new ZipOutputStream(Files.newOutputStream(file))) {\n+            zos.putNextEntry(new ZipEntry(\"foo-entry\"));\n+            zos.write(\"hello\".getBytes(US_ASCII));\n+            zos.closeEntry();\n+        }\n+        try (final ZipFile zf = new ZipFile(file.toFile())) {\n+            ValidatorAccess.doSomething(zf);\n+        }\n+        System.out.println(\"test complete\");\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/FooBarTest.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,14 @@\n+package sun.tools.jar;\n+\n+import java.io.IOException;\n+import java.util.zip.ZipFile;\n+\n+public class ValidatorAccess {\n+\n+    public static boolean doSomething(final ZipFile zipFile) throws IOException {\n+        final Main main = new Main(System.out, System.err, \"jar-test-program\");\n+        final boolean ret = Validator.validate(main, zipFile);\n+        System.out.println(\"temporary system.out to demo the usage\");\n+        return ret;\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/jdk.jartool\/sun\/tools\/jar\/ValidatorAccess.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"}]}