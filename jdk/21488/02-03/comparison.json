{"files":[{"patch":"@@ -24,0 +24,4 @@\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n@@ -25,1 +29,1 @@\n-import java.awt.EventQueue;\n+import java.awt.Dimension;\n@@ -27,0 +31,1 @@\n+import java.awt.FontMetrics;\n@@ -28,0 +33,1 @@\n+import java.awt.Graphics;\n@@ -29,0 +35,4 @@\n+import java.awt.Toolkit;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.MouseAdapter;\n@@ -34,2 +44,3 @@\n- * @key headful\n- * @run main\/othervm -Xmx128m DialogDisposeLeak\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogDisposeLeak\n@@ -39,1 +50,7 @@\n-    static Frame frame;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click on the Dialog... button in the frame that appears.\n+            Now dismiss the dialog by clicking on the label in the dialog.\n+\n+            Repeat this around 10 times. At some point the label in the frame should change\n+            to indicated that the dialog has been garbage collected and the test passed.\n+            \"\"\";\n@@ -42,11 +59,8 @@\n-        EventQueue.invokeLater(() -> {\n-            try {\n-                frame = new DisposeFrame();\n-            } catch (Exception e) {\n-                throw new RuntimeException(\"Test failed.\");\n-            } finally {\n-                if (!DisposeFrame.passed) {\n-                    throw new RuntimeException(\"Test failed.\");\n-                }\n-            }\n-        });\n+        Frame frame = new DisposeFrame();\n+        PassFailJFrame.builder()\n+                .title(\"DialogDisposeLeak\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(frame)\n+                .build()\n+                .awaitAndCheck();\n@@ -58,1 +72,0 @@\n-    static boolean passed;\n@@ -62,1 +75,0 @@\n-        passed = false;\n@@ -64,0 +76,7 @@\n+        Button btn = new Button(\"Dialog...\");\n+        add(btn);\n+        btn.addActionListener(ev -> {\n+                    Dialog dlg = new DisposeDialog(DisposeFrame.this);\n+                    dlg.setVisible(true);\n+                }\n+        );\n@@ -66,5 +85,0 @@\n-\n-        for (int i = 0; !passed && i < 10; i++) {\n-            Dialog dlg = new DisposeDialog(this);\n-            dlg.setVisible(true);\n-        }\n@@ -74,1 +88,0 @@\n-        passed = true;\n@@ -81,1 +94,1 @@\n-        super(frame, \"DisposeDialog\", false);\n+        super(frame, \"DisposeDialog\", true);\n@@ -84,8 +97,24 @@\n-        setVisible(false);\n-        dispose();\n-        \/\/ try to force GC and finalization\n-        for (int n = 0; n < 100; n++) {\n-            byte bytes[] = new byte[1024 * 1024 * 8];\n-            System.gc();\n-            pack();\n-        }\n+        LightweightComp lw = new LightweightComp(\"Click here to dispose\");\n+        lw.addMouseListener(\n+                new MouseAdapter() {\n+                    public void mouseEntered(MouseEvent ev) {\n+                        System.out.println(\"Entered lw\");\n+                    }\n+\n+                    public void mouseExited(MouseEvent ev) {\n+                        System.out.println(\"Exited lw\");\n+                    }\n+\n+                    public void mouseReleased(MouseEvent ev) {\n+                        System.out.println(\"Released lw\");\n+                        DisposeDialog.this.dispose();\n+                        \/\/ try to force GC and finalization\n+                        for (int n = 0; n < 100; n++) {\n+                            byte[] bytes = new byte[1024 * 1024 * 8];\n+                            System.gc();\n+                        }\n+                    }\n+                }\n+        );\n+        add(lw);\n+        pack();\n@@ -94,1 +123,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -99,0 +127,73 @@\n+\n+\/\/ simple lightweight component, focus traversable, highlights upon focus\n+class LightweightComp extends Component {\n+    FontMetrics fm;\n+    String label;\n+    private static final int FOCUS_GONE = 0;\n+    private static final int FOCUS_TEMP = 1;\n+    private static final int FOCUS_HAVE = 2;\n+    int focusLevel = FOCUS_GONE;\n+    public static int nameCounter = 0;\n+\n+    public LightweightComp(String lwLabel) {\n+        label = lwLabel;\n+        enableEvents(AWTEvent.FOCUS_EVENT_MASK | AWTEvent.MOUSE_EVENT_MASK);\n+        setName(\"lw\" + nameCounter++);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        if (fm == null) fm = Toolkit.getDefaultToolkit().getFontMetrics(getFont());\n+        return new Dimension(fm.stringWidth(label) + 2, fm.getHeight() + 2);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension s = getSize();\n+\n+        \/\/ erase the background\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, s.width, s.height);\n+\n+        g.setColor(getForeground());\n+\n+        \/\/ draw the string\n+        g.drawString(label, 2, fm.getHeight());\n+\n+        \/\/ draw a focus rectangle\n+        if (focusLevel > FOCUS_GONE) {\n+            if (focusLevel == FOCUS_TEMP) {\n+                g.setColor(Color.gray);\n+            } else {\n+                g.setColor(Color.blue);\n+            }\n+        } else {\n+            g.setColor(Color.black);\n+        }\n+        g.drawRect(1, 1, s.width - 2, s.height - 2);\n+    }\n+\n+    public boolean isFocusTraversable() {\n+        return true;\n+    }\n+\n+    protected void processFocusEvent(FocusEvent e) {\n+        super.processFocusEvent(e);\n+        if (e.getID() == FocusEvent.FOCUS_GAINED) {\n+            focusLevel = FOCUS_HAVE;\n+        } else {\n+            if (e.isTemporary()) {\n+                focusLevel = FOCUS_TEMP;\n+            } else {\n+                focusLevel = FOCUS_GONE;\n+            }\n+        }\n+        repaint();\n+    }\n+\n+    protected void processMouseEvent(MouseEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n+            requestFocus();\n+        }\n+        super.processMouseEvent(e);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogDisposeLeak.java","additions":134,"deletions":33,"binary":false,"changes":167,"status":"modified"}]}