{"files":[{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.Toolkit;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.MouseAdapter;\n+\n+\/*\n+ * @test\n+ * @bug 4193022\n+ * @summary Test for bug(s): 4193022, disposing dialog leaks memory\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogDisposeLeak\n+ *\/\n+\n+public class DialogDisposeLeak {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click on the Dialog... button in the frame that appears.\n+            Now dismiss the dialog by clicking on the label in the dialog.\n+\n+            Repeat this around 10 times. At some point the label in the frame should change\n+            to indicated that the dialog has been garbage collected and the test passed.\n+            \"\"\";\n+\n+    public static void main(String args[]) throws Exception {\n+        Frame frame = new DisposeFrame();\n+        PassFailJFrame.builder()\n+                .title(\"DialogDisposeLeak\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(frame)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class DisposeFrame extends Frame {\n+    Label label = new Label(\"Test not passed yet\");\n+\n+    DisposeFrame() {\n+        super(\"DisposeLeak test\");\n+        setLayout(new FlowLayout());\n+        Button btn = new Button(\"Dialog...\");\n+        add(btn);\n+        btn.addActionListener(ev -> {\n+                    Dialog dlg = new DisposeDialog(DisposeFrame.this);\n+                    dlg.setVisible(true);\n+                }\n+        );\n+        add(label);\n+        pack();\n+    }\n+\n+    public void testOK() {\n+        label.setText(\"Test has passed. Dialog finalized.\");\n+    }\n+}\n+\n+class DisposeDialog extends Dialog {\n+    DisposeDialog(Frame frame) {\n+        super(frame, \"DisposeDialog\", true);\n+\n+        setLayout(new FlowLayout());\n+        LightweightComp lw = new LightweightComp(\"Click here to dispose\");\n+        lw.addMouseListener(\n+                new MouseAdapter() {\n+                    public void mouseEntered(MouseEvent ev) {\n+                        System.out.println(\"Entered lw\");\n+                    }\n+\n+                    public void mouseExited(MouseEvent ev) {\n+                        System.out.println(\"Exited lw\");\n+                    }\n+\n+                    public void mouseReleased(MouseEvent ev) {\n+                        System.out.println(\"Released lw\");\n+                        DisposeDialog.this.dispose();\n+                        \/\/ try to force GC and finalization\n+                        for (int n = 0; n < 100; n++) {\n+                            byte[] bytes = new byte[1024 * 1024 * 8];\n+                            System.gc();\n+                        }\n+                    }\n+                }\n+        );\n+        add(lw);\n+        pack();\n+    }\n+\n+    public void finalize() {\n+        ((DisposeFrame) getParent()).testOK();\n+    }\n+}\n+\n+\/\/ simple lightweight component, focus traversable, highlights upon focus\n+class LightweightComp extends Component {\n+    FontMetrics fm;\n+    String label;\n+    private static final int FOCUS_GONE = 0;\n+    private static final int FOCUS_TEMP = 1;\n+    private static final int FOCUS_HAVE = 2;\n+    int focusLevel = FOCUS_GONE;\n+    public static int nameCounter = 0;\n+\n+    public LightweightComp(String lwLabel) {\n+        label = lwLabel;\n+        enableEvents(AWTEvent.FOCUS_EVENT_MASK | AWTEvent.MOUSE_EVENT_MASK);\n+        setName(\"lw\" + nameCounter++);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        if (fm == null) fm = Toolkit.getDefaultToolkit().getFontMetrics(getFont());\n+        return new Dimension(fm.stringWidth(label) + 2, fm.getHeight() + 2);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension s = getSize();\n+\n+        \/\/ erase the background\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, s.width, s.height);\n+\n+        g.setColor(getForeground());\n+\n+        \/\/ draw the string\n+        g.drawString(label, 2, fm.getHeight());\n+\n+        \/\/ draw a focus rectangle\n+        if (focusLevel > FOCUS_GONE) {\n+            if (focusLevel == FOCUS_TEMP) {\n+                g.setColor(Color.gray);\n+            } else {\n+                g.setColor(Color.blue);\n+            }\n+        } else {\n+            g.setColor(Color.black);\n+        }\n+        g.drawRect(1, 1, s.width - 2, s.height - 2);\n+    }\n+\n+    public boolean isFocusTraversable() {\n+        return true;\n+    }\n+\n+    protected void processFocusEvent(FocusEvent e) {\n+        super.processFocusEvent(e);\n+        if (e.getID() == FocusEvent.FOCUS_GAINED) {\n+            focusLevel = FOCUS_HAVE;\n+        } else {\n+            if (e.isTemporary()) {\n+                focusLevel = FOCUS_TEMP;\n+            } else {\n+                focusLevel = FOCUS_GONE;\n+            }\n+        }\n+        repaint();\n+    }\n+\n+    protected void processMouseEvent(MouseEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n+            requestFocus();\n+        }\n+        super.processMouseEvent(e);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogDisposeLeak.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Container;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+\/*\n+ * @test\n+ * @bug 4105025 4153487 4177107 4146229 4119383 4181310 4152317\n+ * @summary Test: FileDialogTest\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogTest\n+ *\/\n+\n+public class FileDialogTest extends Panel implements ActionListener {\n+    Button buttonShow, buttonNullShow, buttonShowHide, buttonShowDispose;\n+    TextField fieldFile;\n+    TextField fieldDir;\n+    TextField fieldTitle;\n+    private static final String INSTRUCTIONS = \"\"\"\n+             1. Set file, directory, and title fields to some real values\n+                Title will not show on macos dialog\n+             2. Click the \"Get File...\" button.\n+             3. Verify that dialog is set to proper file and directory, and that\n+                title is also set.\n+             4. Select a file and OK the dialog\n+                (or whatever the selection button is).\n+             5. Verify that the file and directory fields reflect the file chosen.\n+             6. Now, click the \"Get null File with null Directory...\" button.\n+             7. Verify that the file list matches the listed directory.\n+             8. Cancel or OK the dialog.\n+             9. Verify that no NullPointerException is thrown.\n+            10. Now, click the \"Show FileDialog, then hide() in 5 s...\" button.\n+            11. Wait for 5 seconds. The FileDialog should then\n+                disappear automatically.\n+            12. 12-14 are Windows specific. Set file to some invalid value,\n+                like \"\/<>++\".\n+            13. Click the \"Get File...\" button.\n+            14. Verify that FileDialog is shown with empty \"file\" field.\n+            15. Run the test on different locales. Verify that filter string\n+                \"All Files\" is localized.\n+            \"\"\";\n+\n+    public static void main(String args[]) throws Exception {\n+        Frame frame = new Frame(\"FileDialogTest\");\n+        frame.setLayout(new GridLayout());\n+        frame.add(new FileDialogTest());\n+        frame.pack();\n+\n+        PassFailJFrame.builder()\n+                .title(\"FileDialogTest\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(frame)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public FileDialogTest() {\n+        setLayout(new GridLayout(6, 2));\n+\n+        buttonShow = new Button(\"Get File...\");\n+        add(buttonShow);\n+        buttonNullShow = new Button(\"Get null File with null Directory...\");\n+        add(buttonNullShow);\n+        buttonShowHide = new Button(\"Show FileDialog, then hide() in 5 s...\");\n+        add(buttonShowHide);\n+        buttonShowDispose =\n+                new Button(\"Show FileDialog, then dispose() in 5 s...\");\n+        add(buttonShowDispose);\n+\n+        add(new Label(\"\"));\n+        add(new Label(\"\"));\n+\n+        add(new Label(\"File:\"));\n+        fieldFile = new TextField(20);\n+        add(fieldFile);\n+\n+        add(new Label(\"Directory:\"));\n+        fieldDir = new TextField(20);\n+        add(fieldDir);\n+\n+        add(new Label(\"Title:\"));\n+        fieldTitle = new TextField(20);\n+        fieldTitle.setText(\"TestTitle\");\n+        add(fieldTitle);\n+\n+        buttonShow.addActionListener(this);\n+        buttonNullShow.addActionListener(this);\n+        buttonShowHide.addActionListener(this);\n+        buttonShowDispose.addActionListener(this);\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        if (evt.getSource() == buttonShow) {\n+            FileDialog fd = new FileDialog(getFrame(), fieldTitle.getText());\n+            fd.setFile(fieldFile.getText());\n+            fd.setDirectory(fieldDir.getText());\n+            fd.show();\n+            System.out.println(\"back from show\");\n+            fieldFile.setText(fd.getFile());\n+            fieldDir.setText(fd.getDirectory());\n+            fd.dispose();\n+        } else if (evt.getSource() == buttonNullShow) {\n+            FileDialog fd = new FileDialog(getFrame(), fieldTitle.getText());\n+            fd.setFile(null);\n+            fd.setDirectory(null);\n+            fd.show();\n+            System.out.println(\"back from show\");\n+            fieldFile.setText(fd.getFile());\n+            fieldDir.setText(fd.getDirectory());\n+            fd.setFile(null);\n+            fd.setDirectory(null);\n+            fd.dispose();\n+        } else if (evt.getSource() == buttonShowHide) {\n+            final FileDialog fd = new FileDialog(getFrame(),\n+                    fieldTitle.getText());\n+            fd.setFile(fieldFile.getText());\n+            fd.setDirectory(fieldDir.getText());\n+            new Thread(new Runnable() {\n+                public void run() {\n+                    try {\n+                        Thread.currentThread().sleep(5000);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                    fd.hide();\n+                }\n+            }).start();\n+            fd.show();\n+            System.out.println(\"back from show\");\n+            fd.dispose();\n+        } else if (evt.getSource() == buttonShowDispose) {\n+            final FileDialog fd = new FileDialog(getFrame(),\n+                    fieldTitle.getText());\n+            fd.setFile(fieldFile.getText());\n+            fd.setDirectory(fieldDir.getText());\n+            new Thread(() -> {\n+                try {\n+                    Thread.currentThread().sleep(5000);\n+                } catch (InterruptedException ex) {\n+                }\n+                fd.dispose();\n+            }).start();\n+            fd.show();\n+            System.out.println(\"back from show\");\n+            fd.dispose();\n+        }\n+    }\n+\n+    private Frame getFrame() {\n+        Container cont = getParent();\n+        while (cont != null) {\n+            if (cont instanceof Frame) {\n+                return (Frame) cont;\n+            }\n+            cont = cont.getParent();\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogTest.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 6488834\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that native dialogs (file, page, print) appear or\n+    don't appear on the windows taskbar depending of their parent\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TaskbarIconTest\n+*\/\n+\n+public class TaskbarIconTest {\n+    private static WindowListener wl = new WindowAdapter() {\n+        public void windowClosing(WindowEvent we) {\n+            Window w = we.getWindow();\n+            w.dispose();\n+            Window owner = w.getOwner();\n+            if (owner != null) {\n+                owner.dispose();\n+            }\n+        }\n+    };\n+\n+    private static ActionListener al = new ActionListener() {\n+        public void actionPerformed(ActionEvent ae) {\n+            Button b = (Button) ae.getSource();\n+\n+            String bLabel = b.getLabel();\n+            boolean hasParent = (bLabel.indexOf(\"parentless\") < 0);\n+            Frame parent = hasParent ? new Frame(\"Parent\") : null;\n+\n+            if (bLabel.startsWith(\"Java\")) {\n+                Dialog d = new Dialog(parent, \"Java dialog\", true);\n+                d.setBounds(0, 0, 160, 120);\n+                d.addWindowListener(wl);\n+                d.setVisible(true);\n+            } else if (bLabel.startsWith(\"File\")) {\n+                FileDialog d = new FileDialog(parent, \"File dialog\");\n+                d.setVisible(true);\n+            } else if (bLabel.startsWith(\"Print\")) {\n+                PrinterJob pj = PrinterJob.getPrinterJob();\n+                pj.printDialog();\n+            } else if (bLabel.startsWith(\"Page\")) {\n+                PrinterJob pj = PrinterJob.getPrinterJob();\n+                pj.pageDialog(new PageFormat());\n+            }\n+        }\n+    };\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            When the test starts a frame 'Main' is shown. It contains\n+            several buttons, pressing each of them shows a dialog.\n+            Some of the dialogs have a parent window, others are\n+            parentless, according to the corresponding button's test.\n+\n+            Press each button one after another. Make sure that all\n+            parentless dialogs have an icon in the windows taskbar\n+            and all the dialogs with parents don't. Press PASS or\n+            FAIL button depending on the result.\n+\n+            Note: as all the dialogs shown are modal, you have to close\n+            them before showing the next dialog or PASS or FAIL buttons.\"\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"WindowInputBlock\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(TaskbarIconTest::createGUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createGUI() {\n+        Button b;\n+\n+        Frame mainFrame = new Frame(\"Main\");\n+        mainFrame.setBounds(120, 240, 160, 240);\n+        mainFrame.setLayout(new GridLayout(6, 1));\n+\n+        b = new Button(\"Java dialog, with parent\");\n+        b.addActionListener(al);\n+        mainFrame.add(b);\n+\n+        b = new Button(\"Java dialog, parentless\");\n+        b.addActionListener(al);\n+        mainFrame.add(b);\n+\n+        b = new Button(\"File dialog, with parent\");\n+        b.addActionListener(al);\n+        mainFrame.add(b);\n+\n+        b = new Button(\"File dialog, parentless\");\n+        b.addActionListener(al);\n+        mainFrame.add(b);\n+\n+        b = new Button(\"Print dialog, parentless\");\n+        b.addActionListener(al);\n+        mainFrame.add(b);\n+\n+        b = new Button(\"Page dialog, parentless\");\n+        b.addActionListener(al);\n+        mainFrame.add(b);\n+\n+        return mainFrame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/TaskbarIconTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.GridLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+\n+\/*\n+ * @test\n+ * @bug 4124096\n+ * @summary Modal JDialog is not modal on Solaris\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WindowInputBlock\n+ *\/\n+\n+public class WindowInputBlock {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            When the Window is up, you see a \"Show Modal Dialog\" button, a\n+            \"Test\" button and a TextField.\n+            Verify that the \"Test\" button is clickable, and the TextField can\n+            receive focus.\n+\n+            Now, click on \"Show Modal Dialog\" button to bring up a modal dialog\n+            and verify that both \"Test\" button and TextField are not accessible.\n+            Close the new dialog window. If the test behaved as described, pass\n+            this test. Otherwise, fail this test.\n+\n+            \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        JFrame frame = new ModalDialogTest();\n+        PassFailJFrame.builder()\n+                .title(\"WindowInputBlock\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(frame)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class ModalDialogTest extends JFrame implements ActionListener {\n+    JDialog dialog = new JDialog(new JFrame(), \"Modal Dialog\", true);\n+\n+    public ModalDialogTest() {\n+        setTitle(\"Modal Dialog Test\");\n+        JPanel controlPanel = new JPanel();\n+        JPanel infoPanel = new JPanel();\n+        JButton showButton = new JButton(\"Show Modal Dialog\");\n+        JButton testButton = new JButton(\"Test\");\n+        JTextField textField = new JTextField(\"Test\");\n+\n+        getContentPane().setLayout(new BorderLayout());\n+        infoPanel.setLayout(new GridLayout(0, 1));\n+\n+        showButton.setOpaque(true);\n+        showButton.setBackground(Color.yellow);\n+\n+        testButton.setOpaque(true);\n+        testButton.setBackground(Color.pink);\n+\n+        controlPanel.add(showButton);\n+        controlPanel.add(testButton);\n+        controlPanel.add(textField);\n+\n+        infoPanel.add(new JLabel(\"Click the \\\"Show Modal Dialog\\\" button \" +\n+                \"to display a modal JDialog.\"));\n+        infoPanel.add(new JLabel(\"Click the \\\"Test\\\" button to verify \" +\n+                \"dialog modality.\"));\n+\n+        getContentPane().add(BorderLayout.NORTH, controlPanel);\n+        getContentPane().add(BorderLayout.SOUTH, infoPanel);\n+        dialog.setSize(200, 200);\n+\n+        showButton.addActionListener(this);\n+        testButton.addActionListener(this);\n+\n+        addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {\n+                System.exit(0);\n+            }\n+\n+            public void windowClosed(WindowEvent e) {\n+                System.exit(0);\n+            }\n+        });\n+\n+        pack();\n+        setSize(450, 120);\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        String command = evt.getActionCommand();\n+\n+        if (command == \"Show Modal Dialog\") {\n+            System.out.println(\"*** Invoking JDialog.show() ***\");\n+            dialog.setLocation(200, 200);\n+            dialog.setVisible(true);\n+        } else if (command == \"Test\") {\n+            System.out.println(\"*** Test ***\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/WindowInputBlock.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}