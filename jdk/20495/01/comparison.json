{"files":[{"patch":"@@ -65,0 +65,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.Errors;\n@@ -2314,3 +2315,11 @@\n-    private static void addTypeAnnotationsToSymbol(\n-            Symbol s, List<Attribute.TypeCompound> attributes) {\n-        new TypeAnnotationSymbolVisitor(attributes).visit(s, null);\n+    private void addTypeAnnotationsToSymbol(Symbol s, List<Attribute.TypeCompound> attributes) {\n+        try {\n+            new TypeAnnotationSymbolVisitor(attributes).visit(s, null);\n+        } catch (CompletionFailure ex) {\n+            JavaFileObject prev = log.useSource(currentClassFile);\n+            try {\n+                log.error(Errors.CantAttachTypeAnnotations(attributes, s.owner, s.name, ex.getDetailValue()));\n+            } finally {\n+                log.useSource(prev);\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2348,0 +2348,5 @@\n+# 0: list of annotation, 1: symbol, 2: name, 3: message segment\n+compiler.err.cant.attach.type.annotations=\\\n+    Cannot attach type annotations {0} to {1}.{2}:\\n\\\n+    {3}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2024, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8332850\n+ * @summary XXX\n+ * @library \/tools\/javac\/lib \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *\/\n+\n+import toolbox.*;\n+import toolbox.Task.*;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+public class CompletionErrorOnEnclosingType {\n+    ToolBox tb = new ToolBox();\n+\n+    public static void main(String... args) throws Exception {\n+        CompletionErrorOnEnclosingType t = new CompletionErrorOnEnclosingType();\n+        t.testMissingEnclosingType();\n+    }\n+\n+    void testMissingEnclosingType() throws Exception {\n+        String annoSrc =\n+                \"\"\"\n+                import static java.lang.annotation.ElementType.TYPE_USE;\n+                import java.lang.annotation.Target;\n+                @Target(TYPE_USE)\n+                @interface Anno {}\n+\n+                class A<E> {}\n+\n+                class B {\n+                  private @Anno A<String> a;\n+                }\n+                \"\"\";\n+        String cSrc =\n+                \"\"\"\n+                class C {\n+                  B b;\n+                }\n+                \"\"\";\n+\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        tb.createDirectories(src);\n+        tb.writeJavaFiles(src, annoSrc, cSrc);\n+        Path out = base.resolve(\"out\");\n+        tb.createDirectories(out);\n+        new JavacTask(tb).outdir(out).files(tb.findJavaFiles(src)).run();\n+\n+        \/\/ now if we remove A.class there will be an error but javac should not crash\n+        tb.deleteFiles(out.resolve(\"A.class\"));\n+        List<String> log =\n+                new JavacTask(tb)\n+                        .outdir(out)\n+                        .classpath(out)\n+                        .options(\"-XDrawDiagnostics\")\n+                        .files(src.resolve(\"C.java\"))\n+                        .run(Expect.FAIL)\n+                        .writeAll()\n+                        .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        var expectedOutput =\n+                List.of(\n+                        \"B.class:-:-: compiler.err.cant.attach.type.annotations: @Anno, B, a,\"\n+                            + \" (compiler.misc.class.file.not.found: A)\",\n+                        \"1 error\");\n+        if (!expectedOutput.equals(log)) {\n+            throw new Exception(\"expected output not found: \" + log);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/CompletionErrorOnEnclosingType.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -44,0 +44,1 @@\n+compiler.err.cant.attach.type.annotations               # bad class file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}