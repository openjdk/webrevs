{"files":[{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Unit test for ProcessTools.executeProcess()\n+ * @library \/test\/lib\n+ * @run main ProcessToolsExecuteProcessTest\n+ *\/\n+\n+import java.util.function.Consumer;\n+import java.io.File;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ProcessToolsExecuteProcessTest {\n+    static void testExecuteProcessExit() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\"ProcessToolsExecuteProcessTest\", \"testExecuteProcessExit\");\n+\n+        OutputAnalyzer analyzer = ProcessTools.executeProcess(pb);\n+        int exitValue = analyzer.getExitValue();\n+        if (exitValue != 0) {\n+            throw new RuntimeException(\"Failed: wrong exit value: \" + exitValue);\n+        }\n+    }\n+\n+    static void testExecuteProcessStdout() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\"ProcessToolsExecuteProcessTest\", \"testExecuteProcessStdout\");\n+\n+        OutputAnalyzer analyzer = ProcessTools.executeProcess(pb);\n+        String stdout = analyzer.getStdout();\n+        if (!stdout.contains(\"After sleep\")) {\n+            throw new RuntimeException(\"Failed: stdout lacks expected string\");\n+        }\n+    }\n+\n+    static void testNewOutputAnalyzerExit() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\"ProcessToolsExecuteProcessTest\", \"testNewOutputAnalyzerExit\");\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        int exitValue = analyzer.getExitValue();\n+        if (exitValue != 0) {\n+            throw new RuntimeException(\"Failed: wrong exit value: \" + exitValue);\n+        }\n+    }\n+\n+    static void testNewOutputAnalyzerStdout() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\"ProcessToolsExecuteProcessTest\", \"testNewOutputAnalyzerStdout\");\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        String stdout = analyzer.getStdout();\n+        if (!stdout.contains(\"After sleep\")) {\n+            throw new RuntimeException(\"Failed: stdout lacks expected string\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+            \/\/ Spawned process\n+\n+            System.out.println(\"Before sleep\");\n+\n+            \/\/ Sleep for a while, to get some interesting timestamps for the process logging.\n+            Thread.sleep(2 * 1000);\n+\n+            System.out.println(\"After sleep\");\n+        } else {\n+            \/\/ Driver process\n+            testExecuteProcessExit();\n+            testExecuteProcessStdout();\n+            testNewOutputAnalyzerExit();\n+            testNewOutputAnalyzerStdout();\n+        }\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/ProcessToolsExecuteProcessTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -109,0 +109,8 @@\n+    \/**\n+     * Delegate waitFor to the OutputBuffer. This ensures that\n+     * the progress and timestmaps are logged correctly.\n+     *\/\n+    public void waitFor() {\n+        buffer.waitFor();\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,0 +47,6 @@\n+  \/**\n+   * Waits for a process to finish, if there is one assocated with\n+   * this OutputBuffer.\n+   *\/\n+  public void waitFor();\n+\n@@ -70,0 +76,7 @@\n+\n+\n+  \/**\n+   * Returns the exit value\n+   *\n+   * @return exit value\n+   *\/\n@@ -139,11 +152,1 @@\n-    public String getStdout() {\n-      return outTask.get();\n-    }\n-\n-    @Override\n-    public String getStderr() {\n-      return errTask.get();\n-    }\n-\n-    @Override\n-    public int getExitValue() {\n+    public void waitFor() {\n@@ -151,1 +154,2 @@\n-        return exitValue;\n+        \/\/ Already waited for this process\n+        return;\n@@ -153,0 +157,1 @@\n+\n@@ -160,1 +165,0 @@\n-              return exitValue;\n@@ -172,0 +176,16 @@\n+    @Override\n+    public String getStdout() {\n+      return outTask.get();\n+    }\n+\n+    @Override\n+    public String getStderr() {\n+      return errTask.get();\n+    }\n+\n+    @Override\n+    public int getExitValue() {\n+      waitFor();\n+      return exitValue;\n+    }\n+\n@@ -189,0 +209,5 @@\n+    @Override\n+    public void waitFor() {\n+      \/\/ Nothing to do since this buffer is not associated with a Process.\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputBuffer.java","additions":38,"deletions":13,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -700,1 +700,4 @@\n-            p.waitFor();\n+\n+            \/\/ Wait for the process to finish. Call through the output\n+            \/\/ analyzer to get correct logging and timestamps.\n+            output.waitFor();\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}