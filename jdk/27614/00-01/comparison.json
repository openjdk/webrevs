{"files":[{"patch":"@@ -125,1 +125,1 @@\n-        return new Handler(publicKey, null, spec, secureRandom);\n+        return new Handler(publicKey, null, secureRandom);\n@@ -131,1 +131,1 @@\n-        return new Handler(null, privateKey, spec, null);\n+        return new Handler(null, privateKey, null);\n@@ -138,1 +138,0 @@\n-        private final AlgorithmParameterSpec spec;\n@@ -142,2 +141,2 @@\n-        Handler(PublicKey pk, PrivateKey sk, AlgorithmParameterSpec spec,\n-                SecureRandom sr) throws InvalidKeyException {\n+        Handler(PublicKey pk, PrivateKey sk, SecureRandom sr)\n+                throws InvalidKeyException {\n@@ -146,1 +145,0 @@\n-            this.spec = spec;\n@@ -224,1 +222,2 @@\n-                if (ns.getName().equalsIgnoreCase(\"X25519\")) {\n+                if (ns.getName().equalsIgnoreCase(\n+                        NamedParameterSpec.X25519.getName())) {\n@@ -226,1 +225,2 @@\n-                } else if (ns.getName().equalsIgnoreCase(\"X448\")) {\n+                } else if (ns.getName().equalsIgnoreCase(\n+                        NamedParameterSpec.X448.getName())) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DH.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -653,0 +653,2 @@\n+        \/\/ Post-Quantum Cryptography (PQC) KEM groups\n+        \/\/ Currently used for hybrid named groups\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/NamedGroup.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,0 +98,7 @@\n+    \/**\n+     * Returns a KEM instance for each side of the hybrid algorithm.\n+     * For traditional key exchange algorithms, we use the DH-based KEM\n+     * implementation provided by DH.PROVIDER.\n+     * For ML-KEM post-quantum algorithms, we obtain a KEM instance\n+     * using the given algorithm name.\n+     *\/\n@@ -99,2 +106,1 @@\n-        if (name.startsWith(\"secp\") || name.equals(\"X25519\") ||\n-                name.equals(\"X448\")) {\n+        if (name.startsWith(\"secp\") || name.equals(\"X25519\")) {\n@@ -289,3 +295,11 @@\n-        ByteArrayOutputStream o = new ByteArrayOutputStream();\n-        Arrays.stream(inputs).forEach(o::writeBytes);\n-        return o.toByteArray();\n+        int outLen = 0;\n+        for (byte[] in : inputs) {\n+            outLen += in.length;\n+        }\n+        byte[] out = new byte[outLen];\n+        int pos = 0;\n+        for (byte[] in : inputs) {\n+            System.arraycopy(in, 0, out, pos, in.length);\n+            pos += in.length;\n+        }\n+        return out;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Hybrid.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"}]}