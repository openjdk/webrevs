{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -424,4 +424,1 @@\n-            Object[] array = (Object[]) o;\n-            if (array.length > 0) {\n-                return textify(array[0]) + \"[]\"; \/\/ can it be recursive?\n-            }\n+            return textifyArray((Object[])o);\n@@ -432,0 +429,18 @@\n+    private String textifyArray(Object[] array) {\n+        int length = array.length;\n+        if (length > 0) {\n+            Object element = array[0];\n+            if (element != null) {\n+                if (element instanceof String s) {\n+                    \/\/ Probably an enumeration type, e.g. ThreadState. Remove array indirection\n+                    return textify(s);\n+                }\n+                if (element.getClass().isArray()) {\n+                    Object[] subArray = (Object[]) element;\n+                    return element.getClass().getComponentType().getName() + \"[\" + subArray.length + \"]\" + \"[\" + length + \"]\";\n+                }\n+            }\n+        }\n+        return array.getClass().getComponentType().getName() + \"[\" + length + \"]\";\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ChunkParser.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"}]}