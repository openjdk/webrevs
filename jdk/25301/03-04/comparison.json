{"files":[{"patch":"@@ -52,5 +52,6 @@\n-    \/\/ - a library invoked with -agentlib that ensures that, in the parent JVM, we open a native fd without setting\n-    \/\/   FD_CLOEXEC (libFDLeaker.c). This is necessary because there is no way to do this from Java: if Java functions\n-    \/\/   correctly, all files the user could open via its APIs should be marked with FD_CLOEXEC.\n-    \/\/ - a small native executable that tests - without using \/proc - whether any file descriptors other than\n-    \/\/   stdin\/out\/err are open.\n+    \/\/ - a library invoked with -agentlib that ensures that, in the parent JVM, we open\n+    \/\/   a native fd without setting FD_CLOEXEC (libFDLeaker.c). This is necessary because\n+    \/\/   there is no way to do this from Java: if Java functions correctly, all files the\n+    \/\/   user could open via its APIs should be marked with FD_CLOEXEC.\n+    \/\/ - a small native executable that tests - without using \/proc - whether any file\n+    \/\/   descriptors other than stdin\/out\/err are open.\n@@ -58,3 +59,4 @@\n-    \/\/ What should happen: In the child process, between the initial fork and the exec of the target binary, we should\n-    \/\/ close all filedescriptors that are not stdin\/out\/err. If that works, the child process should not see any other\n-    \/\/ file descriptors save those three.\n+    \/\/ What should happen: In the child process, between the initial fork and the exec of\n+    \/\/ the target binary, we should close all filedescriptors that are not stdin\/out\/err.\n+    \/\/ If that works, the child process should not see any other file descriptors save\n+    \/\/ those three.\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/FDLeakTest\/FDLeakTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}