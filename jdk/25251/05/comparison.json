{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n@@ -50,1 +51,1 @@\n-      return static_cast<ZPageAge>(i + 1);\n+      return to_zpageage(i + 1);\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-  static constexpr uint _relocation_allocators = static_cast<uint>(ZPageAge::old);\n+  static constexpr uint _relocation_allocators = ZPageAgeCount - 1;\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n@@ -37,1 +38,1 @@\n-  return _relocation[static_cast<uint>(page_age) - 1];\n+  return _relocation[untype(page_age - 1)];\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n@@ -702,2 +703,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    const ZPageAge age = static_cast<ZPageAge>(i);\n+  for (ZPageAge age : ZPageAgeRange()) {\n@@ -706,1 +706,1 @@\n-      last_populated_age = i;\n+      last_populated_age = untype(age);\n@@ -845,2 +845,2 @@\n-  for (ZPageAge i = ZPageAge::survivor1; i <= ZPageAge::survivor14; i = static_cast<ZPageAge>(static_cast<uint>(i) + 1)) {\n-    ZAllocator::relocation(i)->retire_pages();\n+  for (ZPageAge age : ZPageAgeRangeSurvivor) {\n+    ZAllocator::relocation(age)->retire_pages();\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"utilities\/enumIterator.hpp\"\n@@ -48,1 +49,14 @@\n-constexpr uint ZPageAgeMax = static_cast<uint>(ZPageAge::old);\n+constexpr uint ZPageAgeCount = static_cast<uint>(ZPageAge::old) + 1;\n+constexpr ZPageAge ZPageAgeLastPlusOne = static_cast<ZPageAge>(ZPageAgeCount);\n+\n+ENUMERATOR_RANGE(ZPageAge,\n+                 ZPageAge::eden,\n+                 ZPageAge::old);\n+\n+using ZPageAgeRange = EnumRange<ZPageAge>;\n+\n+constexpr ZPageAgeRange ZPageAgeRangeEden = ZPageAgeRange::create<ZPageAge::eden, ZPageAge::survivor1>();\n+constexpr ZPageAgeRange ZPageAgeRangeYoung = ZPageAgeRange::create<ZPageAge::eden, ZPageAge::old>();\n+constexpr ZPageAgeRange ZPageAgeRangeSurvivor = ZPageAgeRange::create<ZPageAge::survivor1, ZPageAge::old>();\n+constexpr ZPageAgeRange ZPageAgeRangeRelocation = ZPageAgeRange::create<ZPageAge::survivor1, ZPageAgeLastPlusOne>();\n+constexpr ZPageAgeRange ZPageAgeRangeOld = ZPageAgeRange::create<ZPageAge::old, ZPageAgeLastPlusOne>();\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAge.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZPAGEAGE_INLINE_HPP\n+#define SHARE_GC_Z_ZPAGEAGE_INLINE_HPP\n+\n+#include \"gc\/z\/zPageAge.hpp\"\n+#include \"utilities\/checkedCast.hpp\"\n+\n+#include <type_traits>\n+\n+inline uint untype(ZPageAge age) {\n+  return static_cast<uint>(age);\n+}\n+\n+inline ZPageAge to_zpageage(uint age) {\n+  assert(age < ZPageAgeCount, \"Invalid age\");\n+  return static_cast<ZPageAge>(age);\n+}\n+\n+inline ZPageAge operator+(ZPageAge age, size_t size) {\n+  const auto size_value = checked_cast<std::underlying_type_t<ZPageAge>>(size);\n+  return to_zpageage(untype(age) + size_value);\n+}\n+\n+inline ZPageAge operator-(ZPageAge age, size_t size) {\n+  const auto size_value = checked_cast<std::underlying_type_t<ZPageAge>>(size);\n+  return to_zpageage(untype(age) - size_value);\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZPAGEAGE_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAge.inline.hpp","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -491,1 +491,1 @@\n-    return _shared[static_cast<uint>(age) - 1];\n+    return _shared[untype(age - 1)];\n@@ -495,1 +495,1 @@\n-    _shared[static_cast<uint>(age) - 1] = page;\n+    _shared[untype(age - 1)] = page;\n@@ -573,1 +573,1 @@\n-    return _target[static_cast<uint>(age) - 1];\n+    return _target[untype(age - 1)];\n@@ -577,1 +577,1 @@\n-    _target[static_cast<uint>(age) - 1] = page;\n+    _target[untype(age - 1)] = page;\n@@ -1235,1 +1235,1 @@\n-  const uint age = static_cast<uint>(from_age);\n+  const uint age = untype(from_age);\n@@ -1240,1 +1240,1 @@\n-  return static_cast<ZPageAge>(age + 1);\n+  return to_zpageage(age + 1);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n@@ -120,2 +121,2 @@\n-  size_t npages_selected[ZPageAgeMax + 1] = { 0 };\n-  size_t selected_live_bytes[ZPageAgeMax + 1] = { 0 };\n+  size_t npages_selected[ZPageAgeCount] = { 0 };\n+  size_t selected_live_bytes[ZPageAgeCount] = { 0 };\n@@ -152,2 +153,2 @@\n-      selected_live_bytes[static_cast<uint>(page->age())] += page_live_bytes;\n-      npages_selected[static_cast<uint>(page->age())] += 1;\n+      selected_live_bytes[untype(page->age())] += page_live_bytes;\n+      npages_selected[untype(page->age())] += 1;\n@@ -175,1 +176,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n+  for (uint i = 0; i < ZPageAgeCount; ++i) {\n@@ -203,1 +204,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n+  for (uint i = 0; i < ZPageAgeCount; ++i) {\n@@ -242,2 +243,2 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    const ZPageAge age = static_cast<ZPageAge>(i);\n+  for (ZPageAge age : ZPageAgeRange()) {\n+    const uint i = untype(age);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,3 +65,3 @@\n-  ZRelocationSetSelectorGroupStats _small[ZPageAgeMax + 1];\n-  ZRelocationSetSelectorGroupStats _medium[ZPageAgeMax + 1];\n-  ZRelocationSetSelectorGroupStats _large[ZPageAgeMax + 1];\n+  ZRelocationSetSelectorGroupStats _small[ZPageAgeCount];\n+  ZRelocationSetSelectorGroupStats _medium[ZPageAgeCount];\n+  ZRelocationSetSelectorGroupStats _large[ZPageAgeCount];\n@@ -93,1 +93,1 @@\n-  ZRelocationSetSelectorGroupStats _stats[ZPageAgeMax + 1];\n+  ZRelocationSetSelectorGroupStats _stats[ZPageAgeCount];\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n@@ -63,1 +64,1 @@\n-  return _small[static_cast<uint>(age)];\n+  return _small[untype(age)];\n@@ -67,1 +68,1 @@\n-  return _medium[static_cast<uint>(age)];\n+  return _medium[untype(age)];\n@@ -71,1 +72,1 @@\n-  return _large[static_cast<uint>(age)];\n+  return _large[untype(age)];\n@@ -116,1 +117,1 @@\n-  const uint age = static_cast<uint>(page->age());\n+  const uint age = untype(page->age());\n@@ -125,1 +126,1 @@\n-  const uint age = static_cast<uint>(page->age());\n+  const uint age = untype(page->age());\n@@ -144,1 +145,1 @@\n-  return _stats[static_cast<uint>(age)];\n+  return _stats[untype(age)];\n@@ -191,2 +192,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    const ZPageAge age = static_cast<ZPageAge>(i);\n+  for (ZPageAge age : ZPageAgeRange()) {\n@@ -200,2 +200,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    const ZPageAge age = static_cast<ZPageAge>(i);\n+  for (ZPageAge age : ZPageAgeRange()) {\n@@ -209,2 +208,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    const ZPageAge age = static_cast<ZPageAge>(i);\n+  for (ZPageAge age : ZPageAgeRange()) {\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.inline.hpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n@@ -1502,3 +1503,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    const ZPageAge age = static_cast<ZPageAge>(i);\n-\n+  for (ZPageAge age : ZPageAgeRange()) {\n@@ -1560,2 +1559,2 @@\n-  size_t live[ZPageAgeMax + 1] = {};\n-  size_t total[ZPageAgeMax + 1] = {};\n+  size_t live[ZPageAgeCount] = {};\n+  size_t total[ZPageAgeCount] = {};\n@@ -1565,2 +1564,2 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    ZPageAge age = static_cast<ZPageAge>(i);\n+  for (ZPageAge age : ZPageAgeRange()) {\n+    uint i = untype(age);\n@@ -1582,1 +1581,1 @@\n-    ZPageAge age = static_cast<ZPageAge>(i);\n+    ZPageAge age = to_zpageage(i);\n@@ -1794,2 +1793,1 @@\n-  for (uint i = 0; i <= ZPageAgeMax; ++i) {\n-    const ZPageAge age = static_cast<ZPageAge>(i);\n+  for (ZPageAge age : ZPageAgeRange()) {\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-          range(-1, static_cast<int>(ZPageAgeMax))                          \\\n+          range(-1, static_cast<int>(ZPageAgeCount) - 1)                    \\\n","filename":"src\/hotspot\/share\/gc\/z\/z_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-#include <type_traits>\n-#include <limits>\n@@ -35,0 +33,3 @@\n+#include <limits>\n+#include <type_traits>\n+\n@@ -150,0 +151,6 @@\n+  template <T Value>\n+  static constexpr void assert_in_range() {\n+    static_assert(_start <= static_cast<Underlying>(Value), \"out of range\");\n+    static_assert(static_cast<Underlying>(Value) <= _end, \"out of range\");\n+  }\n+\n@@ -232,0 +239,6 @@\n+  struct ConstExprConstructTag {};\n+\n+  constexpr EnumRange(T start, T end, ConstExprConstructTag) :\n+    _start(Traits::underlying_value(start)),\n+    _end(Traits::underlying_value(end)) {}\n+\n@@ -255,0 +268,8 @@\n+  template <T Start, T End>\n+  static constexpr EnumRange<T> create() {\n+    Traits::template assert_in_range<Start>();\n+    Traits::template assert_in_range<End>();\n+    static_assert(Start <= End, \"invalid range\");\n+    return EnumRange(Start, End, ConstExprConstructTag{});\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/enumIterator.hpp","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"gc\/z\/zPageAge.hpp\"\n+#include \"unittest.hpp\"\n+\n+TEST(ZPageAgeRangeTest, test) {\n+  ZPageAgeRange rangeEden = ZPageAgeRangeEden;\n+  EXPECT_EQ(rangeEden.first(), ZPageAge::eden);\n+  EXPECT_EQ(rangeEden.last(), ZPageAge::eden);\n+\n+  ZPageAgeRange rangeYoung = ZPageAgeRangeYoung;\n+  EXPECT_EQ(rangeYoung.first(), ZPageAge::eden);\n+  EXPECT_EQ(rangeYoung.last(), ZPageAge::survivor14);\n+\n+  ZPageAgeRange rangeSurvivor = ZPageAgeRangeSurvivor;\n+  EXPECT_EQ(rangeSurvivor.first(), ZPageAge::survivor1);\n+  EXPECT_EQ(rangeSurvivor.last(), ZPageAge::survivor14);\n+\n+  ZPageAgeRange rangeRelocation = ZPageAgeRangeRelocation;\n+  EXPECT_EQ(rangeRelocation.first(), ZPageAge::survivor1);\n+  EXPECT_EQ(rangeRelocation.last(), ZPageAge::old);\n+\n+  ZPageAgeRange rangeOld = ZPageAgeRangeOld;\n+  EXPECT_EQ(rangeOld.first(), ZPageAge::old);\n+  EXPECT_EQ(rangeOld.last(), ZPageAge::old);\n+}\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zPageAge.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}