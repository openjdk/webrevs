{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-void Compiler::init_c1_runtime() {\n+bool Compiler::init_c1_runtime() {\n@@ -53,1 +53,3 @@\n-  Runtime1::initialize(buffer_blob);\n+  if (!Runtime1::initialize(buffer_blob)) {\n+    return false;\n+  }\n@@ -61,0 +63,1 @@\n+  return true;\n@@ -69,1 +72,1 @@\n-    if (buffer_blob == nullptr) {\n+    if (buffer_blob == nullptr || !init_c1_runtime()) {\n@@ -74,1 +77,0 @@\n-      init_c1_runtime();\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  static void init_c1_runtime();\n+  static bool init_c1_runtime();\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,2 +235,2 @@\n-                                                 must_gc_arguments);\n-  assert(blob != nullptr, \"blob must exist\");\n+                                                 must_gc_arguments,\n+                                                 false);\n@@ -240,1 +240,1 @@\n-void Runtime1::generate_blob_for(BufferBlob* buffer_blob, StubID id) {\n+bool Runtime1::generate_blob_for(BufferBlob* buffer_blob, StubID id) {\n@@ -262,0 +262,1 @@\n+  return blob != nullptr;\n@@ -264,1 +265,1 @@\n-void Runtime1::initialize(BufferBlob* blob) {\n+bool Runtime1::initialize(BufferBlob* blob) {\n@@ -268,1 +269,5 @@\n-  for (int id = 0; id < number_of_ids; id++) generate_blob_for(blob, (StubID)id);\n+  for (int id = 0; id < number_of_ids; id++) {\n+    if (!generate_blob_for(blob, (StubID) id)) {\n+      return false;\n+    }\n+  }\n@@ -282,1 +287,1 @@\n-  bs->generate_c1_runtime_stubs(blob);\n+  return bs->generate_c1_runtime_stubs(blob);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,1 @@\n-  static void       generate_blob_for(BufferBlob* blob, StubID id);\n+  static bool       generate_blob_for(BufferBlob* blob, StubID id);\n@@ -169,1 +169,1 @@\n-  static void initialize(BufferBlob* blob);\n+  static bool initialize(BufferBlob* blob);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-void G1BarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n+bool G1BarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n@@ -226,0 +226,1 @@\n+  return _pre_barrier_c1_runtime_code_blob != nullptr && _post_barrier_c1_runtime_code_blob != nullptr;\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* buffer_blob) {}\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* buffer_blob) { return true; }\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-void ShenandoahBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n+bool ShenandoahBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n@@ -269,0 +269,1 @@\n+  bool reference_barrier_success = true;\n@@ -292,0 +293,4 @@\n+    reference_barrier_success = _load_reference_barrier_strong_rt_code_blob != nullptr &&\n+                                _load_reference_barrier_strong_native_rt_code_blob != nullptr &&\n+                                _load_reference_barrier_weak_rt_code_blob != nullptr &&\n+                                _load_reference_barrier_phantom_rt_code_blob != nullptr;\n@@ -293,0 +298,1 @@\n+  return _pre_barrier_c1_runtime_code_blob != nullptr && reference_barrier_success;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  return code_blob->code_begin();\n+  return code_blob != nullptr?code_blob->code_begin():nullptr;\n@@ -232,1 +232,1 @@\n-void XBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* blob) {\n+bool XBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* blob) {\n@@ -237,0 +237,2 @@\n+  return _load_barrier_on_oop_field_preloaded_runtime_stub != nullptr &&\n+         _load_barrier_on_weak_oop_field_preloaded_runtime_stub != nullptr;\n","filename":"src\/hotspot\/share\/gc\/x\/c1\/xBarrierSetC1.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* blob);\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* blob);\n","filename":"src\/hotspot\/share\/gc\/x\/c1\/xBarrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -511,1 +511,1 @@\n-  return code_blob->code_begin();\n+  return code_blob != nullptr?code_blob->code_begin():nullptr;\n@@ -531,1 +531,1 @@\n-  return code_blob->code_begin();\n+  return code_blob != nullptr?code_blob->code_begin():nullptr;\n@@ -534,1 +534,1 @@\n-void ZBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* blob) {\n+bool ZBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* blob) {\n@@ -544,0 +544,4 @@\n+  return _load_barrier_on_oop_field_preloaded_runtime_stub != nullptr &&\n+         _load_barrier_on_weak_oop_field_preloaded_runtime_stub != nullptr &&\n+         _store_barrier_on_oop_field_with_healing != nullptr &&\n+         _store_barrier_on_oop_field_without_healing != nullptr;\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* blob);\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* blob);\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3468,0 +3468,1 @@\n+                                                      false,\n@@ -3469,3 +3470,5 @@\n-      assert(rs != nullptr && rs->is_runtime_stub(), \"sanity check\");\n-\n-      C->set_stub_entry_point(rs->entry_point());\n+      if (rs == nullptr) {\n+        C->record_failure(\"CodeCache is full\");\n+      } else {\n+        C->set_stub_entry_point(rs->entry_point());\n+      }\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -79,2 +79,0 @@\n-compiler\/startup\/StartupOutput.java 8326615 generic-x64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}