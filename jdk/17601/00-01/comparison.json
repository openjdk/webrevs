{"files":[{"patch":"@@ -627,23 +627,54 @@\n-  IfNode* iff = if_proj->in(0)->as_If();\n-  BoolNode* bol = iff->in(1)->isa_Bool();\n-  if (bol == nullptr) {\n-    return nullptr;\n-  }\n-  const CmpNode* cmp  = bol->in(1)->as_Cmp();\n-  const TypeInt* cmp2_t = gvn->type(cmp->in(2))->isa_int();\n-  if (cmp->in(1) != val || cmp2_t == nullptr) {\n-    return nullptr;\n-  }\n-\n-  jint lo = cmp2_t->_lo;\n-  jint hi = cmp2_t->_hi;\n-  BoolTest::mask msk = if_proj->Opcode() == Op_IfTrue ? bol->_test._test : bol->_test.negate();\n-  switch (msk) {\n-  case BoolTest::ne: {\n-    \/\/ If val is compared to its lower or upper bound, we can narrow the type\n-    const TypeInt* val_t = gvn->type(val)->isa_int();\n-    if (val_t != nullptr && !val_t->singleton() && cmp2_t->is_con()) {\n-      if (val_t->_lo == lo) {\n-        return TypeInt::make(val_t->_lo + 1, val_t->_hi, val_t->_widen);\n-      } else if (val_t->_hi == hi) {\n-        return TypeInt::make(val_t->_lo, val_t->_hi - 1, val_t->_widen);\n+  if (if_proj->in(0) && if_proj->in(0)->is_If()) {\n+    IfNode* iff = if_proj->in(0)->as_If();\n+    if (iff->in(1) && iff->in(1)->is_Bool()) {\n+      BoolNode* bol = iff->in(1)->as_Bool();\n+      if (bol->in(1) && bol->in(1)->is_Cmp()) {\n+        const CmpNode* cmp  = bol->in(1)->as_Cmp();\n+        if (cmp->in(1) == val) {\n+          const TypeInt* cmp2_t = gvn->type(cmp->in(2))->isa_int();\n+          if (cmp2_t != nullptr) {\n+            jint lo = cmp2_t->_lo;\n+            jint hi = cmp2_t->_hi;\n+            BoolTest::mask msk = if_proj->Opcode() == Op_IfTrue ? bol->_test._test : bol->_test.negate();\n+            switch (msk) {\n+            case BoolTest::ne: {\n+              \/\/ If val is compared to its lower or upper bound, we can narrow the type\n+              const TypeInt* val_t = gvn->type(val)->isa_int();\n+              if (val_t != nullptr && !val_t->singleton() && cmp2_t->is_con()) {\n+                if (val_t->_lo == lo) {\n+                  return TypeInt::make(val_t->_lo + 1, val_t->_hi, val_t->_widen);\n+                } else if (val_t->_hi == hi) {\n+                  return TypeInt::make(val_t->_lo, val_t->_hi - 1, val_t->_widen);\n+                }\n+              }\n+              \/\/ Can't refine type\n+              return nullptr;\n+            }\n+            case BoolTest::eq:\n+              return cmp2_t;\n+            case BoolTest::lt:\n+              lo = TypeInt::INT->_lo;\n+              if (hi != min_jint) {\n+                hi = hi - 1;\n+              }\n+              break;\n+            case BoolTest::le:\n+              lo = TypeInt::INT->_lo;\n+              break;\n+            case BoolTest::gt:\n+              if (lo != max_jint) {\n+                lo = lo + 1;\n+              }\n+              hi = TypeInt::INT->_hi;\n+              break;\n+            case BoolTest::ge:\n+              \/\/ lo unchanged\n+              hi = TypeInt::INT->_hi;\n+              break;\n+            default:\n+              break;\n+            }\n+            const TypeInt* rtn_t = TypeInt::make(lo, hi, cmp2_t->_widen);\n+            return rtn_t;\n+          }\n+        }\n@@ -652,26 +683,0 @@\n-    \/\/ Can't refine type\n-    return nullptr;\n-  }\n-  case BoolTest::eq:\n-    return cmp2_t;\n-  case BoolTest::lt:\n-    lo = TypeInt::INT->_lo;\n-    if (hi != min_jint) {\n-      hi = hi - 1;\n-    }\n-    break;\n-  case BoolTest::le:\n-    lo = TypeInt::INT->_lo;\n-    break;\n-  case BoolTest::gt:\n-    if (lo != max_jint) {\n-      lo = lo + 1;\n-    }\n-    hi = TypeInt::INT->_hi;\n-    break;\n-  case BoolTest::ge:\n-    \/\/ lo unchanged\n-    hi = TypeInt::INT->_hi;\n-    break;\n-  default:\n-    break;\n@@ -679,2 +684,1 @@\n-  const TypeInt* rtn_t = TypeInt::make(lo, hi, cmp2_t->_widen);\n-  return rtn_t;\n+  return nullptr;\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":55,"deletions":51,"binary":false,"changes":106,"status":"modified"}]}