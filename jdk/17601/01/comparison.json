{"files":[{"patch":"@@ -1018,1 +1018,1 @@\n-        if (failtype->_lo > failtype->_hi) {\n+        if (failtype->empty()) {\n@@ -1026,2 +1026,1 @@\n-    lo = nullptr;\n-    hi = nullptr;\n+    return false;\n@@ -1030,7 +1029,24 @@\n-  if (lo && hi) {\n-    Node* hook = new Node(1);\n-    hook->init_req(0, lo); \/\/ Add a use to lo to prevent him from dying\n-    \/\/ Merge the two compares into a single unsigned compare by building (CmpU (n - lo) (hi - lo))\n-    Node* adjusted_val = igvn->transform(new SubINode(n,  lo));\n-    if (adjusted_lim == nullptr) {\n-      adjusted_lim = igvn->transform(new SubINode(hi, lo));\n+  Node* hook = new Node(lo); \/\/ Add a use to lo to prevent him from dying\n+  \/\/ Merge the two compares into a single unsigned compare by building (CmpU (n - lo) (hi - lo))\n+  Node* adjusted_val = igvn->transform(new SubINode(n,  lo));\n+  if (adjusted_lim == nullptr) {\n+    adjusted_lim = igvn->transform(new SubINode(hi, lo));\n+  }\n+  hook->destruct(igvn);\n+\n+  if (igvn->type(adjusted_lim)->is_int()->_lo < 0 &&\n+      !igvn->C->post_loop_opts_phase()) {\n+    \/\/ If range check elimination applies to this comparison, it includes code to protect from overflows that may\n+    \/\/ cause the main loop to be skipped entirely. Delay this transformation.\n+    \/\/ Example:\n+    \/\/ for (int i = 0; i < limit; i++) {\n+    \/\/   if (i < max_jint && i > min_jint) {...\n+    \/\/ }\n+    \/\/ Comparisons folded as:\n+    \/\/ i - min_jint - 1 <u -2\n+    \/\/ when RC applies, main loop limit becomes:\n+    \/\/ min(limit, max(-2 + min_jint + 1, min_jint))\n+    \/\/ = min(limit, min_jint)\n+    \/\/ = min_jint\n+    if (adjusted_val->outcnt() == 0) {\n+      igvn->remove_dead_node(adjusted_val);\n@@ -1038,26 +1054,2 @@\n-    hook->destruct(igvn);\n-\n-    int lo = igvn->type(adjusted_lim)->is_int()->_lo;\n-    if (lo < 0) {\n-      \/\/ If range check elimination applies to this comparison, it includes code to protect from overflows that may\n-      \/\/ cause the main loop to be skipped entirely. Delay this transformation.\n-      \/\/ Example:\n-      \/\/ for (int i = 0; i < limit; i++) {\n-      \/\/   if (i < max_jint && i > min_jint) {...\n-      \/\/ }\n-      \/\/ Comparisons folded as:\n-      \/\/ i - min_jint - 1 <u -2\n-      \/\/ when RC applies, main loop limit becomes:\n-      \/\/ min(limit, max(-2 + min_jint + 1, min_jint))\n-      \/\/ = min(limit, min_jint)\n-      \/\/ = min_jint\n-      if (!igvn->C->post_loop_opts_phase()) {\n-        if (adjusted_val->outcnt() == 0) {\n-          igvn->remove_dead_node(adjusted_val);\n-        }\n-        if (adjusted_lim->outcnt() == 0) {\n-          igvn->remove_dead_node(adjusted_lim);\n-        }\n-        igvn->C->record_for_post_loop_opts_igvn(this);\n-        return false;\n-      }\n+    if (adjusted_lim->outcnt() == 0) {\n+      igvn->remove_dead_node(adjusted_lim);\n@@ -1065,0 +1057,3 @@\n+    igvn->C->record_for_post_loop_opts_igvn(this);\n+    return false;\n+  }\n@@ -1066,2 +1061,2 @@\n-    Node* newcmp = igvn->transform(new CmpUNode(adjusted_val, adjusted_lim));\n-    Node* newbool = igvn->transform(new BoolNode(newcmp, cond));\n+  Node* newcmp = igvn->transform(new CmpUNode(adjusted_val, adjusted_lim));\n+  Node* newbool = igvn->transform(new BoolNode(newcmp, cond));\n@@ -1069,2 +1064,2 @@\n-    igvn->replace_input_of(dom_iff, 1, igvn->intcon(proj->_con));\n-    igvn->replace_input_of(this, 1, newbool);\n+  igvn->replace_input_of(dom_iff, 1, igvn->intcon(proj->_con));\n+  igvn->replace_input_of(this, 1, newbool);\n@@ -1072,3 +1067,1 @@\n-    return true;\n-  }\n-  return false;\n+  return true;\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":36,"deletions":43,"binary":false,"changes":79,"status":"modified"}]}