{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-MallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags) {\n+LiveMallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags) {\n@@ -139,1 +139,1 @@\n-      MallocSite* site = head->data();\n+      LiveMallocSite* site = head->data();\n@@ -165,1 +165,1 @@\n-MallocSite* MallocSiteTable::malloc_site(uint32_t marker) {\n+LiveMallocSite* MallocSiteTable::malloc_site(uint32_t marker) {\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-class MallocSite : public AllocationSite {\n-  MemoryCounter _c;\n+class LiveMallocSite : public AllocationSite {\n+  LiveMemoryCounter _c;\n@@ -41,1 +41,1 @@\n-  MallocSite(const NativeCallStack& stack, MEMFLAGS flags) :\n+  LiveMallocSite(const NativeCallStack& stack, MEMFLAGS flags) :\n@@ -47,0 +47,15 @@\n+  \/\/ Memory allocated from this code path\n+  size_t size()  const { return _c.size(); }\n+\n+  \/\/ The number of calls were made\n+  size_t count() const { return _c.count(); }\n+\/\/\n+  const LiveMemoryCounter* counter() const { return &_c; }\n+};\n+\n+class FlatMallocSite : public AllocationSite {\n+  FlatMemoryCounter _c;\n+ public:\n+  FlatMallocSite(const LiveMallocSite* lms) :\n+          AllocationSite(*lms->call_stack(), lms->flag()), _c(*lms->counter()) {}\n+\n@@ -54,1 +69,1 @@\n-  const MemoryCounter* counter() const { return &_c; }\n+  const FlatMemoryCounter* counter() const { return &_c; }\n@@ -60,1 +75,1 @@\n-  MallocSite                         _malloc_site;\n+  LiveMallocSite                     _malloc_site;\n@@ -82,2 +97,2 @@\n-  inline const MallocSite* peek() const { return &_malloc_site; }\n-  inline MallocSite* data()             { return &_malloc_site; }\n+  inline const LiveMallocSite* peek() const { return &_malloc_site; }\n+  inline LiveMallocSite* data()             { return &_malloc_site; }\n@@ -96,1 +111,1 @@\n-   virtual bool do_malloc_site(const MallocSite* e) { return false; }\n+   virtual bool do_malloc_site(const LiveMallocSite* e) { return false; }\n@@ -135,1 +150,1 @@\n-    MallocSite* site = malloc_site(header.mst_marker());\n+    LiveMallocSite* site = malloc_site(header.mst_marker());\n@@ -151,1 +166,1 @@\n-    MallocSite* site = lookup_or_add(stack, marker, flags);\n+    LiveMallocSite* site = lookup_or_add(stack, marker, flags);\n@@ -159,1 +174,1 @@\n-    MallocSite* site = malloc_site(marker);\n+    LiveMallocSite* site = malloc_site(marker);\n@@ -175,2 +190,2 @@\n-  static MallocSite* lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags);\n-  static MallocSite* malloc_site(uint32_t marker);\n+  static LiveMallocSite* lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags);\n+  static LiveMallocSite* malloc_site(uint32_t marker);\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.hpp","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-MallocMemorySnapshot MallocMemorySummary::_snapshot;\n+LiveMallocMemorySnapshot MallocMemorySummary::_snapshot;\n@@ -50,1 +50,1 @@\n-void MemoryCounter::update_peak(size_t size, size_t cnt) {\n+void LiveMemoryCounter::update_peak(size_t size, size_t cnt) {\n@@ -64,1 +64,1 @@\n-void MallocMemorySnapshot::copy_to(MallocMemorySnapshot* s) {\n+void LiveMallocMemorySnapshot::copy_to(FlatMallocMemorySnapshot* s) {\n@@ -69,1 +69,1 @@\n-  s->_all_mallocs = _all_mallocs;\n+  s->_all_mallocs = FlatMemoryCounter(_all_mallocs);\n@@ -73,1 +73,1 @@\n-    s->_malloc[index] = _malloc[index];\n+    s->_malloc[index] = FlatMallocMemory(_malloc[index]);\n@@ -82,1 +82,10 @@\n-size_t MallocMemorySnapshot::total_arena() const {\n+size_t FlatMallocMemorySnapshot::total_arena() const {\n+  size_t amount = 0;\n+  for (int index = 0; index < mt_number_of_types; index ++) {\n+    amount += _malloc[index].arena_size();\n+  }\n+  return amount;\n+}\n+\n+\/\/ Total malloc'd memory used by arenas\n+size_t LiveMallocMemorySnapshot::total_arena() const {\n@@ -92,1 +101,1 @@\n-void MallocMemorySnapshot::make_adjustment() {\n+void FlatMallocMemorySnapshot::make_adjustment() {\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-class MemoryCounter {\n+class LiveMemoryCounter {\n@@ -56,1 +56,1 @@\n-  MemoryCounter() : _count(0), _size(0), _peak_count(0), _peak_size(0) {}\n+  LiveMemoryCounter() : _count(0), _size(0), _peak_count(0), _peak_size(0) {}\n@@ -101,0 +101,35 @@\n+class FlatMemoryCounter {\n+  friend class LiveMemoryCounter;\n+private:\n+  size_t   _count;\n+  size_t   _size;\n+\n+  \/\/ Peak size and count. Note: Peak count is the count at the point\n+  \/\/ peak size was reached, not the absolute highest peak count.\n+  size_t _peak_count;\n+  size_t _peak_size;\n+\n+public:\n+  FlatMemoryCounter() : _count(0), _size(0), _peak_count(0), _peak_size(0) {}\n+  FlatMemoryCounter(LiveMemoryCounter lmc) : _count(lmc.count()), _size(lmc.size()), _peak_count(lmc.peak_count()), _peak_size(lmc.peak_size()) {}\n+\n+  inline void set_size_and_count(size_t size, size_t count) {\n+    _size = size;\n+    _count = count;\n+  }\n+\n+  inline void deallocate(size_t sz) {\n+    assert(count() > 0, \"Nothing allocated yet\");\n+    assert(size() >= sz, \"deallocation > allocated\");\n+    _count--;\n+    if (sz > 0) {\n+      _size -= sz;\n+    }\n+  }\n+\n+  inline size_t count() const { return _count; }\n+  inline size_t size()  const { return _size;  }\n+  inline size_t peak_count() const { return _peak_count; }\n+  inline size_t peak_size() const { return _peak_size; }\n+};\n+\n@@ -106,1 +141,1 @@\n-class MallocMemory {\n+class LiveMallocMemory {\n@@ -108,2 +143,2 @@\n-  MemoryCounter _malloc;\n-  MemoryCounter _arena;\n+  LiveMemoryCounter _malloc;\n+  LiveMemoryCounter _arena;\n@@ -112,1 +147,1 @@\n-  MallocMemory() { }\n+  LiveMallocMemory() { }\n@@ -134,0 +169,20 @@\n+  inline size_t malloc_size()  const { return _malloc.size(); }\n+  inline size_t arena_size()   const { return _arena.size();  }\n+\n+  const LiveMemoryCounter* malloc_counter() const { return &_malloc; }\n+  const LiveMemoryCounter* arena_counter()  const { return &_arena;  }\n+};\n+\n+class FlatMallocMemory {\n+private:\n+  FlatMemoryCounter _malloc;\n+  FlatMemoryCounter _arena;\n+\n+public:\n+  FlatMallocMemory() { }\n+  FlatMallocMemory(LiveMallocMemory lmm) : _malloc(*lmm.malloc_counter()), _arena(*lmm.arena_counter()) { }\n+\n+  inline void record_free(size_t sz) {\n+    _malloc.deallocate(sz);\n+  }\n+\n@@ -141,2 +196,2 @@\n-  const MemoryCounter* malloc_counter() const { return &_malloc; }\n-  const MemoryCounter* arena_counter()  const { return &_arena;  }\n+  const FlatMemoryCounter* malloc_counter() const { return &_malloc; }\n+  const FlatMemoryCounter* arena_counter()  const { return &_arena;  }\n@@ -147,3 +202,2 @@\n-\/\/ A snapshot of malloc'd memory, includes malloc memory\n-\/\/ usage by types and memory used by tracking itself.\n-class MallocMemorySnapshot {\n+\n+class FlatMallocMemorySnapshot {\n@@ -151,0 +205,1 @@\n+  friend class LiveMallocMemorySnapshot;\n@@ -152,3 +207,3 @@\n- private:\n-  MallocMemory      _malloc[mt_number_of_types];\n-  MemoryCounter     _all_mallocs;\n+private:\n+  FlatMallocMemory      _malloc[mt_number_of_types];\n+  FlatMemoryCounter     _all_mallocs;\n@@ -157,2 +212,2 @@\n- public:\n-  inline MallocMemory* by_type(MEMFLAGS flags) {\n+public:\n+  inline FlatMallocMemory* by_type(MEMFLAGS flags) {\n@@ -163,1 +218,1 @@\n-  inline const MallocMemory* by_type(MEMFLAGS flags) const {\n+  inline const FlatMallocMemory* by_type(MEMFLAGS flags) const {\n@@ -195,2 +250,0 @@\n-  void copy_to(MallocMemorySnapshot* s);\n-\n@@ -202,0 +255,41 @@\n+\/\/ A snapshot of malloc'd memory, includes malloc memory\n+\/\/ usage by types and memory used by tracking itself.\n+class LiveMallocMemorySnapshot {\n+  friend class MallocMemorySummary;\n+\n+ private:\n+  LiveMallocMemory      _malloc[mt_number_of_types];\n+  LiveMemoryCounter     _all_mallocs;\n+\n+\n+ public:\n+  inline LiveMallocMemory* by_type(MEMFLAGS flags) {\n+    int index = NMTUtil::flag_to_index(flags);\n+    return &_malloc[index];\n+  }\n+\n+  inline const LiveMallocMemory* by_type(MEMFLAGS flags) const {\n+    int index = NMTUtil::flag_to_index(flags);\n+    return &_malloc[index];\n+  }\n+\n+  inline size_t malloc_overhead() const {\n+    return _all_mallocs.count() * sizeof(MallocHeader);\n+  }\n+\n+  \/\/ Total malloc invocation count\n+  size_t total_count() const {\n+    return _all_mallocs.count();\n+  }\n+\n+  \/\/ Total malloc'd memory amount\n+  size_t total() const {\n+    return _all_mallocs.size() + malloc_overhead() + total_arena();\n+  }\n+\n+  \/\/ Total malloc'd memory used by arenas\n+  size_t total_arena() const;\n+\n+  void copy_to(FlatMallocMemorySnapshot* s);\n+};\n+\n@@ -208,1 +302,1 @@\n-  static MallocMemorySnapshot _snapshot;\n+  static LiveMallocMemorySnapshot _snapshot;\n@@ -244,1 +338,1 @@\n-   static void snapshot(MallocMemorySnapshot* s) {\n+   static void snapshot(FlatMallocMemorySnapshot* s) {\n@@ -254,1 +348,1 @@\n-  static MallocMemorySnapshot* as_snapshot() {\n+  static LiveMallocMemorySnapshot* as_snapshot() {\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.hpp","additions":116,"deletions":22,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        const MallocMemory* mm = as_snapshot()->by_type(f);\n+        const LiveMallocMemory* mm = as_snapshot()->by_type(f);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-int compare_malloc_size(const MallocSite& s1, const MallocSite& s2) {\n+int compare_malloc_size(const FlatMallocSite& s1, const FlatMallocSite& s2) {\n@@ -60,1 +60,1 @@\n-int compare_malloc_site(const MallocSite& s1, const MallocSite& s2) {\n+int compare_malloc_site(const FlatMallocSite& s1, const FlatMallocSite& s2) {\n@@ -65,1 +65,1 @@\n-int compare_malloc_site_and_type(const MallocSite& s1, const MallocSite& s2) {\n+int compare_malloc_site_and_type(const FlatMallocSite& s1, const FlatMallocSite& s2) {\n@@ -84,1 +84,1 @@\n-  SortedLinkedList<MallocSite, compare_malloc_size> _malloc_sites;\n+  SortedLinkedList<FlatMallocSite, compare_malloc_size> _malloc_sites;\n@@ -90,1 +90,1 @@\n-  LinkedList<MallocSite>* malloc_sites() {\n+  LinkedList<FlatMallocSite>* malloc_sites() {\n@@ -94,3 +94,4 @@\n-  bool do_malloc_site(const MallocSite* site) {\n-    if (site->size() > 0) {\n-      if (_malloc_sites.add(*site) != nullptr) {\n+  bool do_malloc_site(const LiveMallocSite* site) {\n+    FlatMallocSite fms(site);\n+    if (fms.size() > 0) {\n+      if (_malloc_sites.add(fms) != nullptr) {\n@@ -265,1 +266,1 @@\n-    SortedLinkedList<MallocSite, compare_malloc_size> tmp;\n+    SortedLinkedList<FlatMallocSite, compare_malloc_size> tmp;\n@@ -277,1 +278,1 @@\n-    SortedLinkedList<MallocSite, compare_malloc_site> tmp;\n+    SortedLinkedList<FlatMallocSite, compare_malloc_site> tmp;\n@@ -288,1 +289,1 @@\n-    SortedLinkedList<MallocSite, compare_malloc_site_and_type> tmp;\n+    SortedLinkedList<FlatMallocSite, compare_malloc_site_and_type> tmp;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-typedef LinkedListIterator<MallocSite>                   MallocSiteIterator;\n+typedef LinkedListIterator<FlatMallocSite>                   MallocSiteIterator;\n@@ -61,2 +61,2 @@\n-  MallocMemorySnapshot   _malloc_memory_snapshot;\n-  VirtualMemorySnapshot  _virtual_memory_snapshot;\n+  FlatMallocMemorySnapshot   _malloc_memory_snapshot;\n+  FlatVirtualMemorySnapshot  _virtual_memory_snapshot;\n@@ -71,1 +71,1 @@\n-  LinkedListImpl<MallocSite>                  _malloc_sites;\n+  LinkedListImpl<FlatMallocSite>                  _malloc_sites;\n@@ -96,1 +96,1 @@\n-  MallocMemorySnapshot* malloc_memory_snapshot() {\n+  FlatMallocMemorySnapshot* malloc_memory_snapshot() {\n@@ -100,1 +100,1 @@\n-  VirtualMemorySnapshot* virtual_memory_snapshot() {\n+  FlatVirtualMemorySnapshot* virtual_memory_snapshot() {\n@@ -147,1 +147,1 @@\n-  MallocMemory* malloc_memory(MEMFLAGS flag) {\n+  FlatMallocMemory* malloc_memory(MEMFLAGS flag) {\n@@ -152,1 +152,1 @@\n-  VirtualMemory* virtual_memory(MEMFLAGS flag) {\n+  FlatVirtualMemory* virtual_memory(MEMFLAGS flag) {\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-size_t MemReporterBase::reserved_total(const MallocMemory* malloc, const VirtualMemory* vm) {\n+size_t MemReporterBase::reserved_total(const FlatMallocMemory* malloc, const FlatVirtualMemory* vm) {\n@@ -60,1 +60,1 @@\n-size_t MemReporterBase::committed_total(const MallocMemory* malloc, const VirtualMemory* vm) {\n+size_t MemReporterBase::committed_total(const FlatMallocMemory* malloc, const FlatVirtualMemory* vm) {\n@@ -73,1 +73,1 @@\n-void MemReporterBase::print_malloc(const MemoryCounter* c, MEMFLAGS flag) const {\n+void MemReporterBase::print_malloc(const FlatMemoryCounter* c, MEMFLAGS flag) const {\n@@ -118,1 +118,1 @@\n-void MemReporterBase::print_arena(const MemoryCounter* c) const {\n+void MemReporterBase::print_arena(const FlatMemoryCounter* c) const {\n@@ -184,2 +184,2 @@\n-    MallocMemory* malloc_memory = _malloc_snapshot->by_type(flag);\n-    VirtualMemory* virtual_memory = _vm_snapshot->by_type(flag);\n+    FlatMallocMemory* malloc_memory = _malloc_snapshot->by_type(flag);\n+    FlatVirtualMemory* virtual_memory = _vm_snapshot->by_type(flag);\n@@ -192,1 +192,1 @@\n-  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory) {\n+  FlatMallocMemory*  malloc_memory, FlatVirtualMemory* virtual_memory) {\n@@ -199,2 +199,2 @@\n-    const VirtualMemory* thread_stack_usage =\n-      (const VirtualMemory*)_vm_snapshot->by_type(mtThreadStack);\n+    const FlatVirtualMemory* thread_stack_usage =\n+      (const FlatVirtualMemory*)_vm_snapshot->by_type(mtThreadStack);\n@@ -241,1 +241,1 @@\n-    const VirtualMemory* thread_stack_usage =\n+    const FlatVirtualMemory* thread_stack_usage =\n@@ -331,1 +331,1 @@\n-  const MallocSite* malloc_site;\n+  const FlatMallocSite* malloc_site;\n@@ -598,1 +598,1 @@\n-  const MallocMemory* early_malloc, const VirtualMemory* early_vm,\n+  const FlatMallocMemory* early_malloc, const FlatVirtualMemory* early_vm,\n@@ -600,1 +600,1 @@\n-  const MallocMemory* current_malloc, const VirtualMemory* current_vm,\n+  const FlatMallocMemory* current_malloc, const FlatVirtualMemory* current_vm,\n@@ -617,1 +617,1 @@\n-    const VirtualMemory* early_thread_stack_usage =\n+    const FlatVirtualMemory* early_thread_stack_usage =\n@@ -619,1 +619,1 @@\n-    const VirtualMemory* current_thread_stack_usage =\n+    const FlatVirtualMemory* current_thread_stack_usage =\n@@ -682,1 +682,1 @@\n-      const VirtualMemory* current_thread_stack =\n+      const FlatVirtualMemory* current_thread_stack =\n@@ -684,1 +684,1 @@\n-      const VirtualMemory* early_thread_stack =\n+      const FlatVirtualMemory* early_thread_stack =\n@@ -801,2 +801,2 @@\n-  const MallocSite* early_site   = early_itr.next();\n-  const MallocSite* current_site = current_itr.next();\n+  const FlatMallocSite* early_site   = early_itr.next();\n+  const FlatMallocSite* current_site = current_itr.next();\n@@ -867,1 +867,1 @@\n-void MemDetailDiffReporter::new_malloc_site(const MallocSite* malloc_site) const {\n+void MemDetailDiffReporter::new_malloc_site(const FlatMallocSite* malloc_site) const {\n@@ -872,1 +872,1 @@\n-void MemDetailDiffReporter::old_malloc_site(const MallocSite* malloc_site) const {\n+void MemDetailDiffReporter::old_malloc_site(const FlatMallocSite* malloc_site) const {\n@@ -877,2 +877,2 @@\n-void MemDetailDiffReporter::diff_malloc_site(const MallocSite* early,\n-  const MallocSite* current)  const {\n+void MemDetailDiffReporter::diff_malloc_site(const FlatMallocSite* early,\n+  const FlatMallocSite* current)  const {\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-  static size_t reserved_total(const MallocMemory* malloc, const VirtualMemory* vm);\n-  static size_t committed_total(const MallocMemory* malloc, const VirtualMemory* vm);\n+  static size_t reserved_total(const FlatMallocMemory* malloc, const FlatVirtualMemory* vm);\n+  static size_t committed_total(const FlatMallocMemory* malloc, const FlatVirtualMemory* vm);\n@@ -111,1 +111,1 @@\n-  void print_malloc(const MemoryCounter* c, MEMFLAGS flag = mtNone) const;\n+  void print_malloc(const FlatMemoryCounter* c, MEMFLAGS flag = mtNone) const;\n@@ -113,1 +113,1 @@\n-  void print_arena(const MemoryCounter* c) const;\n+  void print_arena(const FlatMemoryCounter* c) const;\n@@ -123,2 +123,2 @@\n-  MallocMemorySnapshot*   _malloc_snapshot;\n-  VirtualMemorySnapshot*  _vm_snapshot;\n+  FlatMallocMemorySnapshot*   _malloc_snapshot;\n+  FlatVirtualMemorySnapshot*  _vm_snapshot;\n@@ -142,2 +142,2 @@\n-  void report_summary_of_type(MEMFLAGS type, MallocMemory* malloc_memory,\n-    VirtualMemory* virtual_memory);\n+  void report_summary_of_type(MEMFLAGS type, FlatMallocMemory* malloc_memory,\n+    FlatVirtualMemory* virtual_memory);\n@@ -208,1 +208,1 @@\n-    const MallocMemory* early_malloc, const VirtualMemory* early_vm,\n+    const FlatMallocMemory* early_malloc, const FlatVirtualMemory* early_vm,\n@@ -210,1 +210,1 @@\n-    const MallocMemory* current_malloc, const VirtualMemory* current_vm,\n+    const FlatMallocMemory* current_malloc, const FlatVirtualMemory* current_vm,\n@@ -250,1 +250,1 @@\n-  void new_malloc_site (const MallocSite* site) const;\n+  void new_malloc_site (const FlatMallocSite* site) const;\n@@ -252,1 +252,1 @@\n-  void old_malloc_site (const MallocSite* site) const;\n+  void old_malloc_site (const FlatMallocSite* site) const;\n@@ -254,1 +254,1 @@\n-  void diff_malloc_site(const MallocSite* early, const MallocSite* current)  const;\n+  void diff_malloc_site(const FlatMallocSite* early, const FlatMallocSite* current)  const;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    VirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_flag(i));\n+    FlatVirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_flag(i));\n@@ -59,1 +59,1 @@\n-    VirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_flag(i));\n+    FlatVirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_flag(i));\n@@ -181,1 +181,1 @@\n-void MemoryFileTracker::summary_snapshot(VirtualMemorySnapshot* snapshot) const {\n+void MemoryFileTracker::summary_snapshot(FlatVirtualMemorySnapshot* snapshot) const {\n@@ -185,2 +185,2 @@\n-      VirtualMemory* snap = snapshot->by_type(NMTUtil::index_to_flag(i));\n-      const VirtualMemory* current = file->_summary.by_type(NMTUtil::index_to_flag(i));\n+      FlatVirtualMemory* snap = snapshot->by_type(NMTUtil::index_to_flag(i));\n+      const FlatVirtualMemory* current = file->_summary.by_type(NMTUtil::index_to_flag(i));\n@@ -193,1 +193,1 @@\n-void MemoryFileTracker::Instance::summary_snapshot(VirtualMemorySnapshot* snapshot) {\n+void MemoryFileTracker::Instance::summary_snapshot(FlatVirtualMemorySnapshot* snapshot) {\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    VirtualMemorySnapshot _summary;\n+    FlatVirtualMemorySnapshot _summary;\n@@ -75,1 +75,1 @@\n-  void summary_snapshot(VirtualMemorySnapshot* snapshot) const;\n+  void summary_snapshot(FlatVirtualMemorySnapshot* snapshot) const;\n@@ -102,1 +102,1 @@\n-    static void summary_snapshot(VirtualMemorySnapshot* snapshot);\n+    static void summary_snapshot(FlatVirtualMemorySnapshot* snapshot);\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  const MallocMemorySnapshot* ms = MallocMemorySummary::as_snapshot();\n+  const LiveMallocMemorySnapshot* ms = MallocMemorySummary::as_snapshot();\n@@ -62,1 +62,1 @@\n-    const MallocMemory* mm = ms->by_type(flag);\n+    const LiveMallocMemory* mm = ms->by_type(flag);\n@@ -79,1 +79,1 @@\n-  const VirtualMemorySnapshot* vms = VirtualMemorySummary::as_snapshot();\n+  const LiveVirtualMemorySnapshot* vms = VirtualMemorySummary::as_snapshot();\n@@ -86,1 +86,1 @@\n-    const VirtualMemory* vm = vms->by_type(flag);\n+    const LiveVirtualMemory* vm = vms->by_type(flag);\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-VirtualMemorySnapshot VirtualMemorySummary::_snapshot;\n+LiveVirtualMemorySnapshot VirtualMemorySummary::_snapshot;\n@@ -38,1 +38,1 @@\n-void VirtualMemory::update_peak(size_t size) {\n+void LiveVirtualMemory::update_peak(size_t size) {\n@@ -50,1 +50,1 @@\n-void VirtualMemorySummary::snapshot(VirtualMemorySnapshot* s) {\n+void VirtualMemorySummary::snapshot(FlatVirtualMemorySnapshot* s) {\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-class VirtualMemory {\n+class LiveVirtualMemory {\n@@ -43,3 +43,2 @@\n-  size_t     _reserved;\n-  size_t     _committed;\n-\n+  volatile size_t _reserved;\n+  volatile size_t _committed;\n@@ -50,1 +49,1 @@\n-  VirtualMemory() : _reserved(0), _committed(0), _peak_size(0) {}\n+  LiveVirtualMemory() : _reserved(0), _committed(0), _peak_size(0) {}\n@@ -52,1 +51,3 @@\n-  inline void reserve_memory(size_t sz) { _reserved += sz; }\n+  inline void reserve_memory(size_t sz) {\n+    Atomic::add(&_reserved, sz, memory_order_relaxed);\n+  }\n@@ -54,3 +55,3 @@\n-    _committed += sz;\n-    assert(_committed <= _reserved, \"Sanity check\");\n-    update_peak(_committed);\n+    size_t sum = Atomic::add(&_committed, sz, memory_order_relaxed);\n+    assert(sum <= _reserved, \"Sanity check\");\n+    update_peak(sum);\n@@ -61,1 +62,1 @@\n-    _reserved -= sz;\n+    Atomic::sub(&_reserved, sz, memory_order_relaxed);\n@@ -66,1 +67,1 @@\n-    _committed -= sz;\n+    Atomic::sub(&_committed, sz, memory_order_relaxed);\n@@ -69,2 +70,2 @@\n-  inline size_t reserved()  const { return _reserved;  }\n-  inline size_t committed() const { return _committed; }\n+  inline size_t reserved()  const { return  Atomic::load(&_reserved);  }\n+  inline size_t committed() const { return Atomic::load(&_committed); }\n@@ -76,0 +77,18 @@\n+class FlatVirtualMemory {\n+ private:\n+  size_t     _reserved;\n+  size_t     _committed;\n+  size_t _peak_size;\n+  void update_peak(size_t size);\n+\n+ public:\n+  FlatVirtualMemory() : _reserved(0), _committed(0), _peak_size(0) {}\n+  FlatVirtualMemory(LiveVirtualMemory lvm) : _reserved(lvm.reserved()), _committed(lvm.committed()), _peak_size(lvm.peak_size()) {}\n+  inline void reserve_memory(size_t sz) { _reserved += sz; }\n+  inline void commit_memory (size_t sz) { _committed += sz; }\n+\n+  inline size_t reserved()  const { return _reserved;  }\n+  inline size_t committed() const { return _committed; }\n+  inline size_t peak_size() const { return _peak_size; }\n+};\n+\n@@ -78,1 +97,1 @@\n-  VirtualMemory _c;\n+  FlatVirtualMemory _c;\n@@ -94,1 +113,1 @@\n-class VirtualMemorySnapshot : public ResourceObj {\n+class FlatVirtualMemorySnapshot : public ResourceObj {\n@@ -96,0 +115,1 @@\n+  friend class LiveVirtualMemorySnapshot;\n@@ -97,2 +117,2 @@\n- private:\n-  VirtualMemory  _virtual_memory[mt_number_of_types];\n+private:\n+  FlatVirtualMemory  _virtual_memory[mt_number_of_types];\n@@ -100,2 +120,2 @@\n- public:\n-  inline VirtualMemory* by_type(MEMFLAGS flag) {\n+public:\n+  inline FlatVirtualMemory* by_type(MEMFLAGS flag) {\n@@ -106,1 +126,1 @@\n-  inline const VirtualMemory* by_type(MEMFLAGS flag) const {\n+  inline const FlatVirtualMemory* by_type(MEMFLAGS flag) const {\n@@ -126,0 +146,18 @@\n+};\n+\n+class LiveVirtualMemorySnapshot : public ResourceObj {\n+  friend class VirtualMemorySummary;\n+\n+ private:\n+  LiveVirtualMemory  _virtual_memory[mt_number_of_types];\n+\n+ public:\n+  inline LiveVirtualMemory* by_type(MEMFLAGS flag) {\n+    int index = NMTUtil::flag_to_index(flag);\n+    return &_virtual_memory[index];\n+  }\n+\n+  inline const LiveVirtualMemory* by_type(MEMFLAGS flag) const {\n+    int index = NMTUtil::flag_to_index(flag);\n+    return &_virtual_memory[index];\n+  }\n@@ -127,1 +165,1 @@\n-  void copy_to(VirtualMemorySnapshot* s) {\n+  void copy_to(FlatVirtualMemorySnapshot* s) {\n@@ -129,1 +167,1 @@\n-      s->_virtual_memory[index] = _virtual_memory[index];\n+      s->_virtual_memory[index] = FlatVirtualMemory(_virtual_memory[index]);\n@@ -167,1 +205,1 @@\n-  static void snapshot(VirtualMemorySnapshot* s);\n+  static void snapshot(FlatVirtualMemorySnapshot* s);\n@@ -169,1 +207,1 @@\n-  static VirtualMemorySnapshot* as_snapshot() {\n+  static LiveVirtualMemorySnapshot* as_snapshot() {\n@@ -174,1 +212,1 @@\n-  static VirtualMemorySnapshot _snapshot;\n+  static LiveVirtualMemorySnapshot _snapshot;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":64,"deletions":26,"binary":false,"changes":90,"status":"modified"}]}