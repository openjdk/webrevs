{"files":[{"patch":"@@ -141,1 +141,1 @@\n-     *       add any LOC entries. That is, addCenEntry should be called before\n+     *       adding any LOC entries. That is, addCenEntry should be called before\n@@ -147,1 +147,1 @@\n-        static EntryEncounter PLACE_HOLDER = new EntryEncounter(0, 0);\n+        static final EntryEncounter PLACE_HOLDER = new EntryEncounter(0, 0);\n@@ -170,1 +170,1 @@\n-                return count == 0;\n+                return this == PLACE_HOLDER;\n@@ -185,1 +185,1 @@\n-        \/\/ Encounter order in LOC, step by 1 for new LOC entry exist in CEN\n+        \/\/ Encounter order in LOC, step by 1 for new LOC entry that exists in CEN\n@@ -208,1 +208,1 @@\n-         * We compare entry order based on the CEN. Thus do not step LOC\n+         * We compare entry order based on the CEN. Thus do not increase LOC\n@@ -238,1 +238,1 @@\n-         * Each entry must appeared at least oncee in CEN or LOC.\n+         * Each entry must appeare at least once in the CEN or LOC.\n@@ -265,1 +265,1 @@\n-         * Validate the jar entries by check each entry in encounter order\n+         * Validate the jar entries by checking each entry in encounter order\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Validator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-a non-zero exit code would be returned.\n+an exit code >0 would be returned.\n","filename":"src\/jdk.jartool\/share\/man\/jar.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-    public void testValidateJar() throws IOException {\n+    public void testValidJar() throws IOException {\n@@ -227,5 +227,1 @@\n-        try {\n-            jar(\"--validate --file \" + zip.toString());\n-        } catch (IOException e) {\n-            fail(\"Expecting zero exit code\");\n-        }\n+        jar(\"--validate --file \" + zip.toString());\n@@ -235,1 +231,1 @@\n-    public void testValidate() throws IOException {\n+    public void testMultiManifestJar() throws IOException {\n@@ -293,0 +289,1 @@\n+            System.out.println(err);\n@@ -308,1 +305,1 @@\n-                assertTrue(err.contains(\"Warning: entry name \" + entryName + \" is not valid\"));\n+                assertTrue(err.contains(\"Warning: entry name \" + entryName + \" is not valid\"), \"missing warning for \" + entryName);\n@@ -326,0 +323,1 @@\n+                assertTrue(rc > 0, \"exit code: \" + rc);\n","filename":"test\/jdk\/tools\/jar\/ValidatorTest.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"}]}