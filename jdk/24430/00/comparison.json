{"files":[{"patch":"@@ -450,2 +450,5 @@\n-        try (ZipFile zf = new ZipFile(file)) {\n-            return Validator.validate(this, zf);\n+        try (ZipFile zf = new ZipFile(file);\n+            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(\n+                    new FileInputStream(file)))) {\n+\n+            return Validator.validate(this, zf, zis);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -36,0 +35,1 @@\n+import java.util.ArrayList;\n@@ -47,0 +47,1 @@\n+import java.util.zip.ZipInputStream;\n@@ -48,1 +49,0 @@\n-import static java.util.jar.JarFile.MANIFEST_NAME;\n@@ -65,0 +65,3 @@\n+    private final ZipInputStream zis;\n+    private final Set<String> entryNames = new HashSet<>();\n+    private final List<String> duplicateEntries = new ArrayList<>();\n@@ -66,1 +69,1 @@\n-    private Validator(Main main, ZipFile zf) {\n+    private Validator(Main main, ZipFile zf, ZipInputStream zis) {\n@@ -69,0 +72,1 @@\n+        this.zis = zis;\n@@ -72,2 +76,32 @@\n-    static boolean validate(Main main, ZipFile zf) throws IOException {\n-        return new Validator(main, zf).validate();\n+    static boolean validate(Main main, ZipFile zf, ZipInputStream zis) throws IOException {\n+        return new Validator(main, zf, zis).validate();\n+    }\n+\n+    private void checkDuplicates(ZipEntry e) {\n+        if (!entryNames.add(e.getName())) {\n+            duplicateEntries.add(e.getName());\n+        }\n+    }\n+\n+    private void checkZipInputStream() {\n+        var locEntryNames = new HashSet<String>();\n+        var missingEntryNames = new ArrayList<String>();\n+        try {\n+            ZipEntry e;\n+            while ((e = zis.getNextEntry()) != null) {\n+                var entryName = e.getName();\n+                if (!locEntryNames.add(entryName)) {\n+                    isValid = false;\n+                    warn(formatMsg(\"warn.validator.duplicate.entry\", entryName));\n+                }\n+                if (!entryNames.contains(entryName)) {\n+                    missingEntryNames.add(entryName);\n+                }\n+            }\n+            if (!missingEntryNames.isEmpty() || locEntryNames.size() != entryNames.size()) {\n+                isValid = false;\n+                warn(getMsg(\"warn.validator.inconsistent.content\"));\n+            }\n+        } catch (IOException ioe) {\n+           throw new InvalidJarException(ioe.getMessage());\n+        }\n@@ -79,0 +113,1 @@\n+              .peek(this::checkDuplicates)\n@@ -94,0 +129,5 @@\n+            if (!duplicateEntries.isEmpty()) {\n+                duplicateEntries.forEach(name -> warn(formatMsg(\"warn.validator.duplicate.entry\", name)));\n+                isValid = false;\n+            }\n+            checkZipInputStream();\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Validator.java","additions":46,"deletions":6,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,0 +146,4 @@\n+warn.validator.duplicate.entry=\\\n+        Warning: More than one copy of {0} is detected\n+warn.validator.inconsistent.content=\\\n+        Warning: The list of entries does not match the content\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8335912\n+ * @bug 8335912 8345431\n@@ -103,1 +103,5 @@\n-    public void writeManifestAsFirstSecondAndFourthEntry() throws IOException {\n+    public void beforeAll() throws IOException {\n+        writeManifestAsFirstSecondAndFourthEntry(zip, true, true);\n+    }\n+\n+    private void writeManifestAsFirstSecondAndFourthEntry(Path path, boolean useCen, boolean useLoc) throws IOException {\n@@ -129,8 +133,14 @@\n-        var loc = s.indexOf(\"AANIFEST.MF\", locPosA);\n-        var cen = s.indexOf(\"AANIFEST.MF\", cenPos);\n-        template[loc] = template[cen] = (byte) 'M';\n-        \/\/ change META-INF\/BANIFEST.MF to META-INF\/MANIFEST.MF\n-        loc = s.indexOf(\"BANIFEST.MF\", locPosB);\n-        cen = s.indexOf(\"BANIFEST.MF\", cenPos);\n-        template[loc] = template[cen] = (byte) 'M';\n-        Files.write(zip, template);\n+        if (useCen) {\n+            var cen = s.indexOf(\"AANIFEST.MF\", cenPos);\n+            template[cen] = (byte) 'M';\n+            \/\/ change META-INF\/BANIFEST.MF to META-INF\/MANIFEST.MF\n+            cen = s.indexOf(\"BANIFEST.MF\", cenPos);\n+            template[cen] = (byte) 'M';\n+        }\n+        if (useLoc) {\n+            var loc = s.indexOf(\"AANIFEST.MF\", locPosA);\n+            template[loc] = (byte) 'M';\n+            loc = s.indexOf(\"BANIFEST.MF\", locPosB);\n+            template[loc] = (byte) 'M';\n+        }\n+        Files.write(path, template);\n@@ -176,0 +186,39 @@\n+    @Test\n+    public void testValidate() {\n+        try {\n+            jar(\"--validate --file \" + zip.toString());\n+        } catch (IOException e) {\n+            var err = e.getMessage();\n+            System.out.println(err);\n+            Assertions.assertTrue(err.contains(\"Warning: More than one copy of META-INF\/MANIFEST.MF is detected\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testOnlyLocModified() throws IOException {\n+        Path f = Path.of(\"LocHacked.jar\");\n+        writeManifestAsFirstSecondAndFourthEntry(f, false, true);\n+        try {\n+            jar(\"--validate --file \" + f.toString());\n+        } catch (IOException e) {\n+            var err = e.getMessage();\n+            System.out.println(err);\n+            Assertions.assertTrue(err.contains(\"Warning: More than one copy of META-INF\/MANIFEST.MF is detected\"));\n+            Assertions.assertTrue(err.contains(\"Warning: The list of entries does not match the content\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testOnlyCenModified() throws IOException {\n+        Path f = Path.of(\"CenHacked.jar\");\n+        writeManifestAsFirstSecondAndFourthEntry(f, true, false);\n+        try {\n+            jar(\"--validate --file \" + f.toString());\n+        } catch (IOException e) {\n+            var err = e.getMessage();\n+            System.out.println(err);\n+            Assertions.assertTrue(err.contains(\"Warning: More than one copy of META-INF\/MANIFEST.MF is detected\"));\n+            Assertions.assertTrue(err.contains(\"Warning: The list of entries does not match the content\"));\n+        }\n+    }\n+\n","filename":"test\/jdk\/tools\/jar\/MultipleManifestTest.java","additions":60,"deletions":11,"binary":false,"changes":71,"status":"modified"}]}