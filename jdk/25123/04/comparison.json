{"files":[{"patch":"@@ -59,0 +59,1 @@\n+import java.util.stream.Collectors;\n@@ -265,0 +266,4 @@\n+     * For methods, any interface method coming from an undocumented supertype\n+     * will be removed if this class (or one of its superclasses) provides\n+     * an override.\n+     *\n@@ -273,1 +278,29 @@\n-        return getVisibleMembers(kind, declaredAndLeafMembers);\n+        List<Element> members = getVisibleMembers(kind, declaredAndLeafMembers);\n+\n+        if (kind == Kind.METHODS) {\n+            members = removeDuplicates(members);\n+        }\n+\n+        return members;\n+    }\n+\n+    \/**\n+     * Drop any methods that were inlined from an undocumented interface\n+     * and have a local override in this class hierarchy.\n+     *\/\n+    private List<Element> removeDuplicates(List<Element> methods) {\n+        Set<ExecutableElement> localMethods = overriddenMethodTable.values().stream()\n+                .map(info -> info.overriddenMethod)\n+                .collect(Collectors.toSet());\n+\n+        return methods.stream()\n+                .filter(e -> shouldKeepInheritedMethod(e, localMethods))\n+                .toList();\n+    }\n+\n+    private boolean shouldKeepInheritedMethod(Element e, Set<ExecutableElement> overridden) {\n+        if (!(e instanceof ExecutableElement ee)) return true;\n+        TypeElement encl = utils.getEnclosingTypeElement(ee);\n+        boolean hiddenInterface = !Objects.equals(encl, te)\n+                && utils.isUndocumentedEnclosure(encl);\n+        return !hiddenInterface || !overridden.contains(ee);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8177100\n+ * @summary Test to check for duplicate methods\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestDuplicateMethods\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestDuplicateMethods extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestDuplicateMethods();\n+        tester.runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+    Path src = Path.of(\"src\");\n+\n+\n+    TestDuplicateMethods() throws IOException {\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                 interface A {\n+                    \/**\n+                    * JavaDoc for method in class A.\n+                    *\/\n+                    abstract void testA ( );\n+                 }\"\"\",\"\"\"\n+                 package p;\n+                 interface B extends A {\n+                    \/**\n+                    * JavaDoc for method in class B.\n+                    *\/\n+                    abstract void testB ( );\n+                 }\"\"\", \"\"\"\n+                 package p;\n+                 abstract class C implements A {\n+                    \/**\n+                    * Inherited JavaDoc for method in class C.\n+                    *\/\n+                    public final void testA ( ) {\n+                       \/\/ Do nothing.\n+                    }\n+                 }\"\"\",\"\"\"\n+                 package p;\n+                 public final class D extends C implements B {\n+                    \/**\n+                    * Inherited JavaDoc\n+                    *\/\n+                    public final void testB ( ) {\n+                       \/\/ Do nothing.\n+                    }\n+                 }\n+                 \"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testDuplicateMethodWarning(Path base) {\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"p\/D.html\", true, \"\"\"\n+                <div class=\"block\">Inherited JavaDoc for method in class C.<\/div>\"\"\",\"\"\"\n+                <div class=\"horizontal-scroll\">\n+                <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">testA<\/span>()<\/div>\n+                <div class=\"block\">Inherited JavaDoc for method in class C.<\/div>\"\"\");\n+        checkOutput(\"p\/D.html\", false, \"\"\"\n+                <div class=\"block\">JavaDoc for method in class A.<\/div>\"\"\", \"\"\"\n+                <div class=\"member-signature\"><span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">testA<\/span>()<\/div>\n+                <div class=\"block\">JavaDoc for method in class A.<\/div>\"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDuplicateMethodsWarn\/TestDuplicateMethods.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}