[{"commit":{"message":"Fix indentation"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/copy_aarch64.hpp"}],"sha":"06c6e2347ec96c763ba515e843aa35113009b4ad"},{"commit":{"message":"Merge branch 'master' into enable-bti-runtime"},"files":[],"sha":"6c79d0fc4ec9680206d03f72c297e68acc4a5a70"},{"commit":{"message":"Clean up makefile"},"files":[{"filename":"make\/autoconf\/flags-cflags.m4"},{"filename":"make\/autoconf\/flags-other.m4"},{"filename":"make\/autoconf\/spec.gmk.template"}],"sha":"114953da2246676aba24ccc38788e008a0e6f8a8"},{"commit":{"message":"Merge branch 'master' into enable-bti-runtime"},"files":[],"sha":"7d7f744eb13b1fdfe63365b389403fba4db872ce"},{"commit":{"message":"8337536: AArch64: Enable BTI branch protection for runtime part\n\nThis patch enables BTI branch protection for runtime part on\nLinux\/aarch64 platform.\n\nMotivation\n\n1. Since Fedora 33, glibc+kernel are PAC\/BTI enabled by default.\nUser-level packages can gain additional hardening by compiling with the\nGCC\/Clang flag `-mbranch-protection=flag`. See [1].\n\n2. In JDK-8277204 [2], `--enable-branch-protection` was introduced as\none VM configure flag, which would pass `-mbranch-protection=standard`\ncompilation flags to all c\/c++ files. Note that `standard` turns on both\n`pac-ret` and `bti` branch protections. For more details about code\nreuse attacks and hardware-assisted branch protections on AArch64, see\n[3].\n\nHowever, we checked the `.note.gnu.property` section of all the shared\nlibraries under `jdk\/lib` on Fedora 40, and found that only libjvm.so\ndidn't set these two target feature bits:\n\n```\n  GNU_PROPERTY_AARCH64_FEATURE_1_BTI\n  GNU_PROPERTY_AARCH64_FEATURE_1_PAC\n```\n\nNote-1: BTI is an all or nothing property for a link unit [4]. That is,\nlibjvm.so is not BTI-enabled.\n\nNote-2: PAC bit in `.note.gnu.property` section is used to protect\n`.got.plt` table. It's independent of whether the relocatable objects\nuse PAC or not.\n\nGoal\n\nHence, this patch aims to set PAC\/BTI feature bits of the\n`.note.gnu.property` section for libjvm.so.\n\nImplementation\n\nTask-1: find out the problematic input objects\n\nFrom [5], \"Static linkers processing ELF relocatable objects must set\nthe feature bit in the output object or image only if all the input\nobjects have the corresponding feature bit set.\" Hence we suspect that\nthe root cause is probably that the PAC\/BTI feature bits are not set\nonly for some input objects of libjvm.so.\n\nIn order to find out these inputs, we passed `--force-bti` linker flag\n[4] in my local test. This linker flag would warn if any input object\ndoes not have GNU_PROPERTY_AARCH64_FEATURE_1_BTI. We got the following\nlist:\n\n```\n  src\/hotspot\/os_cpu\/linux_aarch64\/atomic_linux_aarch64.S\n  src\/hotspot\/os_cpu\/linux_aarch64\/copy_linux_aarch64.S\n  src\/hotspot\/os_cpu\/linux_aarch64\/safefetch_linux_aarch64.S\n  src\/hotspot\/os_cpu\/linux_aarch64\/threadLS_linux_aarch64.S\n```\n\nTask-2: add `.note.gnu.property` section for these assembly files\n\nAs mentioned in Motivation-2 part, `-mbranch-protection=standard` is\npassed to compile c\/c++ files but these assembly files are missed.\n\nIn this patch, we also pass `-mbranch-protection=standard` flag to\nassembler (See the update in flags-cflags.m4 and flags-other.m4), and\nadd `.note.gnu.property` section at the end of these assembler files.\n\nWith this change, we can see PAC\/BTI feature bits in the final\nlibjvm.so.\n\nTask-3: add BTI landing pads for hand written assembly\n\nIn the local test on Fedora 40 with PAC\/BTI-capable hardware, we got\n`SIGILL` error, which is one typical BTI error (branch target exception).\nThe root cause is that we should add the missing BTI landing pads for\nhand written assembly in hotspot.\n\nFile-1 copy_aarch64.hpp: It's a switch-case statement and we add `bti j`\nfor these indirect jumps.\n\nFile-2 atomic_linux_aarch64.S: We add landings pads `bti c` at the\nfunction entries.\n\nFile-3 copy_linux_aarch64.S: There is no need to add `bti c` at the\nfunction entries since they are called via `bl`. And we should handle\nthe indirect jumps.\n\nFile-4 safefetch_linux_aarch64.S: Similar to file-3, there is no need to\nhandle these function entries.\n\nFile-5 threadLS_linux_aarch64.S: No need to handle the function entry\nbecause `paciasp` can act as the landing pad.\n\nEvaluation\n\n1. jtreg test\n\nWe ran tier 1-3 jtreg tests on Fedora 40 + GCC 14 + the following AArch64\nhardware and all tests passed.\n\n```\n  1. w\/o PAC and w\/o BTI\n  2. w\/ PAC and w\/o BTI\n  3. w\/ PAC and w\/ BTI\n```\n\nWe also ran the jtreg tests on Fedora 40 + Clang 18 + hardware w\/ PAC\nand w\/ BTI. The test passed too.\n\n2. code size\n\nWe got about 2% code size increase before and after\n`--enbale-branch-protection` is used. This code size change looks\nreasonable. See the evaluation on glibc [6].\n\n[1] https:\/\/fedoraproject.org\/wiki\/Changes\/Aarch64_PointerAuthentication\n[2] https:\/\/bugs.openjdk.org\/browse\/JDK-8277204\n[3] https:\/\/community.arm.com\/arm-community-blogs\/b\/tools-software-ides-blog\/posts\/code-reuse-attacks-the-compiler-story\n[4] https:\/\/reviews.llvm.org\/D62609\n[5] https:\/\/github.com\/ARM-software\/abi-aa\/blob\/2a70c42d62e9c3eb5887fa50b71257f20daca6f9\/aaelf64\/aaelf64.rst#program-property\n[6] https:\/\/developer.arm.com\/documentation\/102433\/0100\/Applying-these-techniques-to-real-code"},"files":[{"filename":"make\/autoconf\/flags-cflags.m4"},{"filename":"make\/autoconf\/flags-other.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/copy_aarch64.hpp"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/atomic_linux_aarch64.S"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/copy_linux_aarch64.S"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/safefetch_linux_aarch64.S"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/threadLS_linux_aarch64.S"}],"sha":"d1506d7d84c0a497b1333ac8cbb988e73afb4108"}]