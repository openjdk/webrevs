{"files":[{"patch":"@@ -79,3 +79,1 @@\n-    \/**\n-     * Paint MenuItem.\n-     *\/\n+    @Override\n@@ -87,5 +85,8 @@\n-            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n-                    arrowIcon, background, foreground,\n-                    disabledForeground, acceleratorSelectionForeground,\n-                    acceleratorForeground, defaultTextIconGap,\n-                    menuItem, getPropertyPrefix());\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c,\n+                                            checkIcon, arrowIcon,\n+                                            background, foreground,\n+                                            disabledForeground,\n+                                            acceleratorSelectionForeground,\n+                                            acceleratorForeground,\n+                                            defaultTextIconGap,\n+                                            menuItem, getPropertyPrefix());\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsCheckBoxMenuItemUI.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.awt.Insets;\n@@ -36,1 +35,0 @@\n-import java.util.Enumeration;\n@@ -38,2 +36,0 @@\n-import javax.swing.AbstractButton;\n-import javax.swing.ButtonGroup;\n@@ -41,1 +37,0 @@\n-import javax.swing.DefaultButtonModel;\n@@ -135,21 +130,0 @@\n-    protected void installDefaults() {\n-        super.installDefaults();\n-        String prefix = getPropertyPrefix();\n-\n-        if (acceleratorSelectionForeground == null ||\n-                acceleratorSelectionForeground instanceof UIResource) {\n-            acceleratorSelectionForeground =\n-                    UIManager.getColor(prefix + \".acceleratorSelectionForeground\");\n-        }\n-        if (acceleratorForeground == null ||\n-                acceleratorForeground instanceof UIResource) {\n-            acceleratorForeground =\n-                    UIManager.getColor(prefix + \".acceleratorForeground\");\n-        }\n-        if (disabledForeground == null ||\n-                disabledForeground instanceof UIResource) {\n-            disabledForeground =\n-                    UIManager.getColor(prefix + \".disabledForeground\");\n-        }\n-    }\n-\n@@ -168,0 +142,1 @@\n+    @Override\n@@ -173,4 +148,7 @@\n-            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n-                                            arrowIcon, background, foreground,\n-                                            disabledForeground, acceleratorSelectionForeground,\n-                                            acceleratorForeground, defaultTextIconGap, menuItem,\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c,\n+                                            checkIcon, arrowIcon,\n+                                            background, foreground,\n+                                            disabledForeground,\n+                                            acceleratorSelectionForeground,\n+                                            acceleratorForeground,\n+                                            defaultTextIconGap, menuItem,\n@@ -185,1 +163,2 @@\n-                              JComponent c, Icon checkIcon, Icon arrowIcon,\n+                              JComponent c,\n+                              Icon checkIcon, Icon arrowIcon,\n@@ -190,1 +169,4 @@\n-                              int defaultTextIconGap, JMenuItem menuItem, String prefix) {\n+                              int defaultTextIconGap, JMenuItem menuItem,\n+                              String prefix) {\n+        assert c == menuItem : \"menuItem passed as 'c' must be the same\";\n+\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuItemUI.java","additions":14,"deletions":32,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -134,3 +134,1 @@\n-    \/**\n-     * Paint MenuItem.\n-     *\/\n+    @Override\n@@ -138,3 +136,4 @@\n-                              Icon checkIcon, Icon arrowIcon,\n-                              Color background, Color foreground,\n-                              int defaultTextIconGap) {\n+                                 Icon checkIcon, Icon arrowIcon,\n+                                 Color background, Color foreground,\n+                                 int defaultTextIconGap) {\n+        assert c == menuItem : \"menuItem passed as 'c' must be the same\";\n@@ -142,1 +141,2 @@\n-            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon, arrowIcon,\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c,\n+                                            checkIcon, arrowIcon,\n@@ -144,2 +144,4 @@\n-                                            disabledForeground, acceleratorSelectionForeground,\n-                                            acceleratorForeground, defaultTextIconGap, menuItem,\n+                                            disabledForeground,\n+                                            acceleratorSelectionForeground,\n+                                            acceleratorForeground,\n+                                            defaultTextIconGap, menuItem,\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuUI.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -79,3 +79,1 @@\n-    \/**\n-     * Paint MenuItem.\n-     *\/\n+    @Override\n@@ -87,5 +85,8 @@\n-            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n-                    arrowIcon, background, foreground,\n-                    disabledForeground, acceleratorSelectionForeground,\n-                    acceleratorForeground, defaultTextIconGap,\n-                    menuItem, getPropertyPrefix());\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c,\n+                                            checkIcon, arrowIcon,\n+                                            background, foreground,\n+                                            disabledForeground,\n+                                            acceleratorSelectionForeground,\n+                                            acceleratorForeground,\n+                                            defaultTextIconGap,\n+                                            menuItem, getPropertyPrefix());\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRadioButtonMenuItemUI.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.Box;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.UIManager;\n+\n+import static javax.swing.BorderFactory.createEmptyBorder;\n+\n+\/*\n+ * @test id=windows\n+ * @bug 8348760 8365375 8365389 8365625\n+ * @requires (os.family == \"windows\")\n+ * @summary Verify that Windows Look & Feel allows changing\n+ *          accelerator colors\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuItemAcceleratorColor\n+ *\/\n+\n+\/*\n+ * @test id=classic\n+ * @bug 8348760 8365375 8365389 8365625\n+ * @requires (os.family == \"windows\")\n+ * @summary Verify that Windows Classic Look & Feel allows changing\n+ *          accelerator colors\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuItemAcceleratorColor classic\n+ *\/\n+public final class MenuItemAcceleratorColor {\n+    private static final String INSTRUCTIONS =\n+            \"Click the Menu to open it.\\n\" +\n+            \"\\n\" +\n+            \"Verify that the first and the last menu items render \" +\n+            \"their accelerators using the default colors, the color \" +\n+            \"should match that of the menu item itself in regular and \" +\n+            \"selected states.\\n\" +\n+            \"\\n\" +\n+            \"Verify that the second menu item renders its accelerator \" +\n+            \"with green and that the color changes to red when selected.\\n\" +\n+            \"\\n\" +\n+            \"Verify that the third menu item renders its accelerator \" +\n+            \"with magenta and yellow correspondingly.\\n\" +\n+            \"\\n\" +\n+            \"Verify that only the fifth menu item renders its accelerator \" +\n+            \"with blue; both the fourth and sixth should render their \" +\n+            \"accelerator with a shade of gray.\\n\" +\n+            \"\\n\" +\n+            \"If the above conditions are satisfied, press the Pass button; \" +\n+            \"otherwise, press the Fail button.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel((args.length > 0 && \"classic\".equals(args[0]))\n+                                 ? \"com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel\"\n+                                 : \"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+\n+        PassFailJFrame.builder()\n+                      .instructions(INSTRUCTIONS)\n+                      .rows(20)\n+                      .columns(60)\n+                      .testUI(MenuItemAcceleratorColor::createUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static Box createInfoPanel() {\n+        Box box = Box.createVerticalBox();\n+        box.add(new JLabel(\"Look and Feel: \"\n+                           + UIManager.getLookAndFeel()\n+                                      .getName()));\n+        box.add(new JLabel(\"Java version: \"\n+                           + System.getProperty(\"java.runtime.version\")));\n+        return box;\n+    }\n+\n+    private static JFrame createUI() {\n+        JPanel content = new JPanel(new BorderLayout());\n+        content.setBorder(createEmptyBorder(8, 8, 8, 8));\n+        content.add(createInfoPanel(),\n+                    BorderLayout.SOUTH);\n+\n+        JFrame frame = new JFrame(\"Accelerator colors in Windows L&F\");\n+        frame.setJMenuBar(createMenuBar());\n+        frame.add(content, BorderLayout.CENTER);\n+        frame.setSize(350, 370);\n+        return frame;\n+    }\n+\n+    private static JMenuBar createMenuBar() {\n+        JMenuItem first = new JMenuItem(\"First menu item\");\n+        first.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,\n+                                                    InputEvent.CTRL_DOWN_MASK));\n+\n+        \/\/ Modify colors for accelerator rendering\n+        Color acceleratorForeground = UIManager.getColor(\"MenuItem.acceleratorForeground\");\n+        Color acceleratorSelectionForeground = UIManager.getColor(\"MenuItem.acceleratorSelectionForeground\");\n+        UIManager.put(\"MenuItem.acceleratorForeground\", Color.GREEN);\n+        UIManager.put(\"MenuItem.acceleratorSelectionForeground\", Color.RED);\n+\n+        JMenuItem second = new JMenuItem(\"Second menu item\");\n+        second.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,\n+                                                     InputEvent.SHIFT_DOWN_MASK\n+                                                     | InputEvent.CTRL_DOWN_MASK));\n+\n+        UIManager.put(\"MenuItem.acceleratorForeground\", Color.MAGENTA);\n+        UIManager.put(\"MenuItem.acceleratorSelectionForeground\", Color.YELLOW);\n+        JMenuItem third = new JMenuItem(\"Third menu item\");\n+        third.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T,\n+                                                    InputEvent.ALT_DOWN_MASK));\n+\n+        \/\/ Restore colors\n+        UIManager.put(\"MenuItem.acceleratorForeground\", acceleratorForeground);\n+        UIManager.put(\"MenuItem.acceleratorSelectionForeground\", acceleratorSelectionForeground);\n+\n+\n+        \/\/ Disabled foreground\n+        JMenuItem fourth = new JMenuItem(\"Fourth menu item\");\n+        fourth.setEnabled(false);\n+        fourth.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,\n+                                                     InputEvent.CTRL_DOWN_MASK));\n+\n+        Color disabledForeground = UIManager.getColor(\"MenuItem.disabledForeground\");\n+        UIManager.put(\"MenuItem.disabledForeground\", Color.BLUE);\n+\n+        JMenuItem fifth = new JMenuItem(\"Fifth menu item\");\n+        fifth.setEnabled(false);\n+        fifth.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,\n+                                                    InputEvent.CTRL_DOWN_MASK\n+                                                    | InputEvent.SHIFT_DOWN_MASK));\n+\n+        \/\/ Restore disabled foreground\n+        UIManager.put(\"MenuItem.disabledForeground\", disabledForeground);\n+\n+        JMenuItem sixth = new JMenuItem(\"Sixth menu item\");\n+        sixth.setEnabled(false);\n+        sixth.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,\n+                                                    InputEvent.CTRL_DOWN_MASK\n+                                                    | InputEvent.ALT_DOWN_MASK));\n+\n+\n+        JMenuItem quit = new JMenuItem(\"Quit\");\n+        quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,\n+                                                   InputEvent.CTRL_DOWN_MASK));\n+\n+        JMenu menu = new JMenu(\"Menu\");\n+        menu.add(first);\n+        menu.add(second);\n+        menu.add(third);\n+        menu.addSeparator();\n+        menu.add(fourth);\n+        menu.add(fifth);\n+        menu.add(sixth);\n+        menu.addSeparator();\n+        menu.add(quit);\n+\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.add(menu);\n+\n+        return menuBar;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/MenuItem\/MenuItemAcceleratorColor.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"}]}