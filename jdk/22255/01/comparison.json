{"files":[{"patch":"@@ -247,1 +247,0 @@\n-}\n@@ -249,2 +248,0 @@\n-void G1Arguments::initialize_heap_flags_and_sizes() {\n-  GCArguments::initialize_heap_flags_and_sizes();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-  virtual void initialize_heap_flags_and_sizes();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -86,0 +86,2 @@\n+\n+  FullGCForwarding::initialize_flags(heap_reserved_size_bytes());\n@@ -131,1 +133,0 @@\n-  FullGCForwarding::initialize_flags(heap_reserved_size_bytes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/shared\/genArguments.hpp\"\n+#include \"gc\/shared\/gcArguments.hpp\"\n@@ -31,2 +31,2 @@\n-void SerialArguments::initialize_heap_flags_and_sizes() {\n-  GenArguments::initialize_heap_flags_and_sizes();\n+void SerialArguments::initialize() {\n+  GCArguments::initialize();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialArguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+  virtual void initialize();\n@@ -35,1 +36,0 @@\n-  virtual void initialize_heap_flags_and_sizes();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialArguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,0 +179,2 @@\n+\n+  FullGCForwarding::initialize_flags(MaxHeapSize);\n@@ -202,5 +204,0 @@\n-void ShenandoahArguments::initialize_heap_flags_and_sizes() {\n-  GCArguments::initialize_heap_flags_and_sizes();\n-  FullGCForwarding::initialize_flags(MaxHeapSize);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-  virtual void initialize_heap_flags_and_sizes();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"oops\/objLayout.hpp\"\n@@ -875,0 +876,2 @@\n+  ObjLayout::initialize();\n+\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3657,0 +3657,4 @@\n+  return JNI_OK;\n+}\n+\n+void Arguments::setup_compact_headers() {\n@@ -3662,3 +3666,0 @@\n-  if (UseCompactObjectHeaders && LockingMode != LM_LIGHTWEIGHT) {\n-    FLAG_SET_DEFAULT(LockingMode, LM_LIGHTWEIGHT);\n-  }\n@@ -3670,1 +3671,1 @@\n-    \/\/ If UseObjectMonitorTable is on the command line, turn off UseCompactObjectHeaders.\n+      \/\/ If UseObjectMonitorTable is on the command line, turn off UseCompactObjectHeaders.\n@@ -3673,1 +3674,1 @@\n-    \/\/ If neither on the command line, the defaults are incompatible, but turn on UseObjectMonitorTable.\n+      \/\/ If neither on the command line, the defaults are incompatible, but turn on UseObjectMonitorTable.\n@@ -3678,0 +3679,3 @@\n+  if (UseCompactObjectHeaders && LockingMode != LM_LIGHTWEIGHT) {\n+    FLAG_SET_DEFAULT(LockingMode, LM_LIGHTWEIGHT);\n+  }\n@@ -3682,2 +3686,0 @@\n-\n-  return JNI_OK;\n@@ -3696,0 +3698,2 @@\n+  setup_compact_headers();\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -267,0 +267,1 @@\n+  static void setup_compact_headers();\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -500,3 +500,0 @@\n-  \/\/ Initialize object layout after parsing the args\n-  ObjLayout::initialize();\n-\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}