{"files":[{"patch":"@@ -1579,2 +1579,2 @@\n-  \/\/ concurrent cycle in the prologue of the heap inspect\/dump operation. This is how\n-  \/\/ other concurrent collectors in the JVM handle this scenario as well.\n+  \/\/ concurrent cycle in the prologue of the heap inspect\/dump operation (see VM_HeapDumper::doit_prologue).\n+  \/\/ This is how other concurrent collectors in the JVM handle this scenario as well.\n@@ -1590,1 +1590,4 @@\n-  \/\/assert(false, \"Shouldn't need to do full collections\");\n+  \/\/ This method is only called by `CollectedHeap::collect_as_vm_thread`, which we have\n+  \/\/ overridden to do nothing. See the comment there for an explanation of how heap inspections\n+  \/\/ work for Shenandoah.\n+  ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}