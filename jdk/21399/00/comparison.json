{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.classfile.FieldBuilder;\n@@ -42,1 +41,0 @@\n-import java.lang.constant.DynamicConstantDesc;\n@@ -54,1 +52,1 @@\n-import java.lang.classfile.constantpool.MethodRefEntry;\n+\n@@ -58,2 +56,0 @@\n-import static java.lang.invoke.MethodHandles.Lookup.ClassOption.NESTMATE;\n-import static java.lang.invoke.MethodHandles.Lookup.ClassOption.STRONG;\n@@ -64,0 +60,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -74,1 +71,2 @@\n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    private static final int ARG_NAME_CACHE_SIZE = 8; \/\/ Arbitrary cache size for common capture arg names\n+    private static final @Stable String[] ARG_NAME_CACHE;\n@@ -91,0 +89,6 @@\n+\n+        var argNameCache = new String[ARG_NAME_CACHE_SIZE];\n+        for (int i = 0; i < ARG_NAME_CACHE_SIZE; i++) {\n+            argNameCache[i] = computeArgName(i);\n+        }\n+        ARG_NAME_CACHE = argNameCache;\n@@ -99,1 +103,0 @@\n-    private final String[] argNames;                 \/\/ Generated names for the constructor arguments\n@@ -177,0 +180,2 @@\n+        ClassDesc[] argDescs;\n+        MethodTypeDesc constructorTypeDesc;\n@@ -178,1 +183,0 @@\n-            argNames = new String[parameterCount];\n@@ -181,1 +185,0 @@\n-                argNames[i] = \"arg$\" + (i + 1);\n@@ -184,0 +187,1 @@\n+            constructorTypeDesc = MethodTypeDescImpl.ofValidated(CD_void, argDescs);\n@@ -185,1 +189,0 @@\n-            argNames = EMPTY_STRING_ARRAY;\n@@ -187,0 +190,1 @@\n+            constructorTypeDesc = MTD_void;\n@@ -188,1 +192,12 @@\n-        constructorTypeDesc = MethodTypeDescImpl.ofValidated(CD_void, argDescs);\n+        this.argDescs = argDescs;\n+        this.constructorTypeDesc = constructorTypeDesc;\n+    }\n+\n+    private static String argName(int i) {\n+        if (i < ARG_NAME_CACHE_SIZE)\n+            return ARG_NAME_CACHE[i];\n+        return computeArgName(i);\n+    }\n+\n+    private static String computeArgName(int i) {\n+        return \"arg$\".concat(Integer.toString(i + 1));\n@@ -316,1 +331,1 @@\n-                    clb.withField(argNames[i], argDescs[i], ACC_PRIVATE | ACC_FINAL);\n+                    clb.withField(argName(i), argDescs[i], ACC_PRIVATE | ACC_FINAL);\n@@ -400,1 +415,1 @@\n-                            cob.putfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argNames[i], argDescs[i])));\n+                            cob.putfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argName(i), argDescs[i])));\n@@ -452,1 +467,1 @@\n-                               .getfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argNames[i], argDescs[i])));\n+                               .getfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argName(i), argDescs[i])));\n@@ -509,1 +524,1 @@\n-                for (int i = 0; i < argNames.length; i++) {\n+                for (int i = 0; i < argDescs.length; i++) {\n@@ -511,1 +526,1 @@\n-                       .getfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argNames[i], argDescs[i])));\n+                       .getfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argName(i), argDescs[i])));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":31,"deletions":16,"binary":false,"changes":47,"status":"modified"}]}