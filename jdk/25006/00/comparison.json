{"files":[{"patch":"@@ -3394,1 +3394,1 @@\n-         (use->is_If() || use->is_CMove() || use->is_Bool()) &&\n+         (use->is_If() || use->is_CMove() || use->is_Bool() || use->is_OpaqueInitializedAssertionPredicate()) &&\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8355674\n+ * @summary Check that we do not introduce a Phi above a OpaqueInitializedAssertionPredicateNode during Partial Peeling.\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.predicates.assertion.TestPhiAboveOpaqueInitializedAssertionPredicate::test\n+ *                   compiler.predicates.assertion.TestPhiAboveOpaqueInitializedAssertionPredicate\n+ *\/\n+\n+package compiler.predicates.assertion;\n+\n+public class TestPhiAboveOpaqueInitializedAssertionPredicate {\n+     public static void main(String[] o) {\n+        test();\n+    }\n+\n+    static void test() {\n+        int e;\n+        int h = 8;\n+        int[][] iArr = new int[100][100];\n+        for (float j = 8; j < 100 ; ++j) {\n+            for (int f = 5; f > 1; f -= 2) {\n+                for (int g = 1; 3 > g; ++g) {\n+                    try {\n+                        e = iArr[(int) j][g] \/ h;\n+                    } catch (ArithmeticException k) {\n+                    }\n+                    h += g;\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/assertion\/TestPhiAboveOpaqueInitializedAssertionPredicate.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}