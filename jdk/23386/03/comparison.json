{"files":[{"patch":"@@ -7101,0 +7101,93 @@\n+\/\/ ----------------------------------------------------------------------\n+\/\/ We are using bitwise ternary logic insturction VPTERNLOG which can\n+\/\/ absorb complex binary expressions involving 3 boolean variables.\n+\/\/\n+\/\/ For copySign we set the truth table value as 0xE4.\n+\/\/ First column of truth table represents magnitude, second column\n+\/\/ represents sign operand while the third column is a conditional\n+\/\/ operand with fixed value of 0x7FFFFFFF.\n+\/\/\n+\/\/ Whenever condition bit is 1 corresponding magnitude bit gets selected\n+\/\/ else corresponding sign bit is picked.\n+\/\/ Our condition mask is such that apart for sign bit i.e. MSB bit all\n+\/\/ other bits are set to 1, this ensures that all the bits of result\n+\/\/ apart from MSB bit are copied from magnitude operand while sign bit\n+\/\/ is borrowed from sign operand.\n+\/\/\n+\/\/ Magnitude Sign Condition Result\n+\/\/ 0          0       0       0\n+\/\/ 0          0       1       0\n+\/\/ 0          1       0       1\n+\/\/ 0          1       1       0\n+\/\/ 1          0       0       0\n+\/\/ 1          0       1       1\n+\/\/ 1          1       0       1\n+\/\/ 1          1       1       1\n+\/\/\n+\/\/ ----------------------------------------------------------------------\n+\n+void C2_MacroAssembler::vector_copy_sign_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src,\n+                                              XMMRegister xtmp, int vlen_enc) {\n+  assert(is_floating_point_type(elem_bt), \"\");\n+  vpternlogq(xtmp, 0xFF, xtmp, xtmp, vlen_enc);\n+  if (elem_bt == T_FLOAT) {\n+    vpsrld(xtmp, xtmp, 1, vlen_enc);\n+    vpternlogd(dst, 0xE4, src, xtmp, vlen_enc);\n+  } else {\n+    assert(elem_bt == T_DOUBLE, \"\");\n+    vpsrlq(xtmp, xtmp, 1, vlen_enc);\n+    vpternlogq(dst, 0xE4, src, xtmp, vlen_enc);\n+  }\n+}\n+\n+void C2_MacroAssembler::vandpsd(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n+  if (elem_bt == T_FLOAT) {\n+    vandps(dst, src1, src2, vlen_enc);\n+  } else {\n+    assert(elem_bt == T_DOUBLE, \"\");\n+    vandpd(dst, src1, src2, vlen_enc);\n+  }\n+}\n+\n+void C2_MacroAssembler::vpslldq_imm(BasicType elem_bt, XMMRegister dst, XMMRegister src, int shift, int vlen_enc) {\n+  int elem_sz = type2aelembytes(elem_bt);\n+  if (elem_sz == 2) {\n+    vpsllw(dst, src, shift, vlen_enc);\n+  } else if (elem_sz == 4) {\n+    vpslld(dst, src, shift, vlen_enc);\n+  } else if (elem_sz == 8) {\n+    vpsllq(dst, src, shift, vlen_enc);\n+  } else {\n+    fatal(\"Unsupported lane size %s\", type2name(elem_bt));\n+  }\n+}\n+\n+void C2_MacroAssembler::vpsrldq_imm(BasicType elem_bt, XMMRegister dst, XMMRegister src, int shift, int vlen_enc) {\n+  int elem_sz = type2aelembytes(elem_bt);\n+  if (elem_sz == 2) {\n+    vpsrlw(dst, src, shift, vlen_enc);\n+  } else if (elem_sz == 4) {\n+    vpsrld(dst, src, shift, vlen_enc);\n+  } else if (elem_sz == 8) {\n+    vpsrlq(dst, src, shift, vlen_enc);\n+  } else {\n+    fatal(\"Unsupported lane size %s\", type2name(elem_bt));\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_copy_sign_avx(BasicType elem_bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp, int vlen_enc) {\n+  int sign_mask_shift = elem_bt == T_DOUBLE ? 63 : 31;\n+  \/\/ set all double lanes of temporary vector to 0xFFFFFFFF\n+  vcmpps(xtmp, xtmp, xtmp, Assembler::EQ_UQ, vlen_enc);\n+  \/\/ compute mask for magnitude bits i.e. 0x7FFFFFFFF\n+  vpsrldq_imm(elem_bt, xtmp, xtmp, 1, vlen_enc);\n+  \/\/ extract magnitude bits from destination lanes.\n+  vandpsd(elem_bt, dst, dst, xtmp, vlen_enc);\n+  \/\/ compute mask for sign bit i.e. 0x80000000\n+  vpslldq_imm(elem_bt, xtmp, xtmp, sign_mask_shift, vlen_enc);\n+  \/\/ extract sign bit from source lanes.\n+  vandpsd(elem_bt, xtmp, xtmp, src, vlen_enc);\n+  \/\/ merge extracted sign with magnitude bits.\n+  vpor(dst, dst, xtmp, vlen_enc);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":93,"deletions":0,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -571,0 +571,10 @@\n+  void vandpsd(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n+\n+  void vpsrldq_imm(BasicType elem_bt, XMMRegister dst, XMMRegister src, int shift, int vlen_enc);\n+\n+  void vpslldq_imm(BasicType elem_bt, XMMRegister dst, XMMRegister src, int shift, int vlen_enc);\n+\n+  void vector_copy_sign_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp, int vlen_enc);\n+\n+  void vector_copy_sign_avx(BasicType elem_bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp, int vlen_enc);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1541,4 +1541,1 @@\n-      if (UseAVX < 3)  {\n-        return false;\n-      }\n-      if (!VM_Version::supports_avx512vl()) {\n+      if (UseAVX < 1)  {\n@@ -1672,0 +1669,6 @@\n+    case Op_CopySignVD:\n+    case Op_CopySignVF:\n+      if (UseAVX < 1)  {\n+        return false;\n+      }\n+      break;\n@@ -6522,19 +6525,25 @@\n-\/\/ ---------------------------------------\n-\/\/ For copySign use 0xE4 as writemask for vpternlog\n-\/\/ Desired Truth Table: A -> xmm0 bit, B -> xmm1 bit, C -> xmm2 bit\n-\/\/ C (xmm2) is set to 0x7FFFFFFF\n-\/\/ Wherever xmm2 is 0, we want to pick from B (sign)\n-\/\/ Wherever xmm2 is 1, we want to pick from A (src)\n-\/\/\n-\/\/ A B C Result\n-\/\/ 0 0 0 0\n-\/\/ 0 0 1 0\n-\/\/ 0 1 0 1\n-\/\/ 0 1 1 0\n-\/\/ 1 0 0 0\n-\/\/ 1 0 1 1\n-\/\/ 1 1 0 1\n-\/\/ 1 1 1 1\n-\/\/\n-\/\/ Result going from high bit to low bit is 0x11100100 = 0xe4\n-\/\/ ---------------------------------------\n+#ifdef _LP64\n+instruct copySignF_reg(regF dst, regF src, regF xtmp) %{\n+  predicate(VM_Version::supports_avx512vl());\n+  match(Set dst (CopySignF dst src));\n+  effect(TEMP xtmp);\n+  format %{ \"CopySignF $dst, $src\\t! using $xtmp as TEMP\" %}\n+  ins_encode %{\n+    __ vector_copy_sign_evex(T_FLOAT, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct copySignD_imm(regD dst, regD src, regD xtmp, immD zero) %{\n+  predicate(VM_Version::supports_avx512vl());\n+  match(Set dst (CopySignD dst (Binary src zero)));\n+  ins_cost(100);\n+  effect(TEMP xtmp);\n+  format %{ \"CopySignD  $dst, $src\\t! using $xtmp as TEMP\" %}\n+  ins_encode %{\n+    __ vector_copy_sign_evex(T_DOUBLE, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+#endif \/\/ _LP64\n@@ -6542,1 +6551,2 @@\n-instruct copySignF_reg(regF dst, regF src, regF tmp1, rRegI tmp2) %{\n+instruct copySignF_reg_avx(regF dst, regF src, regF xtmp) %{\n+  predicate(!VM_Version::supports_avx512vl());\n@@ -6544,2 +6554,2 @@\n-  effect(TEMP tmp1, TEMP tmp2);\n-  format %{ \"CopySignF $dst, $src\\t! using $tmp1 and $tmp2 as TEMP\" %}\n+  effect(TEMP_DEF dst,TEMP xtmp);\n+  format %{ \"CopySignF $dst, $src\\t! using $xtmp as TEMP\" %}\n@@ -6547,3 +6557,1 @@\n-    __ movl($tmp2$$Register, 0x7FFFFFFF);\n-    __ movdl($tmp1$$XMMRegister, $tmp2$$Register);\n-    __ vpternlogd($dst$$XMMRegister, 0xE4, $src$$XMMRegister, $tmp1$$XMMRegister, Assembler::AVX_128bit);\n+    __ vector_copy_sign_avx(T_FLOAT, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister, Assembler::AVX_128bit);\n@@ -6554,1 +6562,2 @@\n-instruct copySignD_imm(regD dst, regD src, regD tmp1, rRegL tmp2, immD zero) %{\n+instruct copySignD_imm_avx(regD dst, regD src, regD xtmp, immD zero) %{\n+  predicate(!VM_Version::supports_avx512vl());\n@@ -6557,2 +6566,13 @@\n-  effect(TEMP tmp1, TEMP tmp2);\n-  format %{ \"CopySignD  $dst, $src\\t! using $tmp1 and $tmp2 as TEMP\" %}\n+  effect(TEMP_DEF dst,TEMP xtmp);\n+  format %{ \"CopySignD  $dst, $src\\t! using $xtmp as TEMP\" %}\n+  ins_encode %{\n+    __ vector_copy_sign_avx(T_DOUBLE, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct copySignV_reg(vec dst, vec src, vec xtmp) %{\n+  match(Set dst (CopySignVF dst src));\n+  match(Set dst (CopySignVD dst src));\n+  effect(TEMP xtmp);\n+  format %{ \"vector_copysign $dst, $src\\t! using $xtmp as TEMP\" %}\n@@ -6560,3 +6580,7 @@\n-    __ mov64($tmp2$$Register, 0x7FFFFFFFFFFFFFFF);\n-    __ movq($tmp1$$XMMRegister, $tmp2$$Register);\n-    __ vpternlogq($dst$$XMMRegister, 0xE4, $src$$XMMRegister, $tmp1$$XMMRegister, Assembler::AVX_128bit);\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    if (VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(this) == 64) {\n+      __ vector_copy_sign_evex(bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister, vlen_enc);\n+    } else {\n+      __ vector_copy_sign_avx(bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister, vlen_enc);\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":59,"deletions":35,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -4371,1 +4371,1 @@\n-    \"MaskAll\", \"AndVMask\", \"OrVMask\", \"XorVMask\", \"VectorMaskCast\",\n+    \"MaskAll\", \"AndVMask\", \"OrVMask\", \"XorVMask\", \"VectorMaskCast\", \"CopySignVF\", \"CopySignVD\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,0 +346,2 @@\n+macro(CopySignVF)\n+macro(CopySignVD)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,0 +161,3 @@\n+  } else if (opc == Op_CopySignD) {\n+    assert(p0->req() == 4, \"CopySignD should have 3 operands\");\n+    vtn = new (_vtransform.arena()) VTransformElementWiseVectorNode(_vtransform, 3, pack_size);\n@@ -168,2 +171,2 @@\n-           opc == Op_FmaD  ||\n-           opc == Op_FmaF  ||\n+           opc == Op_FmaD ||\n+           opc == Op_FmaF ||\n@@ -171,0 +174,1 @@\n+           opc == Op_CopySignF ||\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -283,0 +283,4 @@\n+  case Op_CopySignF:\n+    return Op_CopySignVF;\n+  case Op_CopySignD:\n+    return Op_CopySignVD;\n@@ -752,0 +756,3 @@\n+  case Op_CopySignVF: return new CopySignVFNode(n1, n2, vt);\n+  case Op_CopySignVD: return new CopySignVDNode(n1, n2, vt);\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2092,0 +2092,16 @@\n+class CopySignVFNode : public VectorNode {\n+public:\n+  CopySignVFNode(Node* in1, Node* in2, const TypeVect* vt)\n+  : VectorNode(in1, in2, vt) {}\n+\n+  virtual int Opcode() const;\n+};\n+\n+class CopySignVDNode : public VectorNode {\n+public:\n+  CopySignVDNode(Node* in1, Node* in2, const TypeVect* vt)\n+  : VectorNode(in1, in2, vt) {}\n+\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8349138\n+ * @key randomness\n+ * @summary Optimize Math.copySign API for Intel e-core targets\n+ * @library \/test\/lib \/\n+ * @run driver compiler.intrinsics.math.TestCopySignIntrinsic\n+*\/\n+\n+package compiler.intrinsics.math;\n+\n+import compiler.lib.ir_framework.Check;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.Setup;\n+import compiler.lib.verify.*;\n+import java.util.stream.IntStream;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+import compiler.lib.generators.Generator;\n+import static compiler.lib.generators.Generators.G;\n+\n+public class TestCopySignIntrinsic {\n+    private static final Random rd = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        new TestFramework(TestCopySignIntrinsic.class).run();\n+    }\n+\n+    public final int SIZE = 1024;\n+    public float [] fmagnitude;\n+    public float [] fsign;\n+    public float [] afresult;\n+    public float [] efresult;\n+\n+    public double [] dmagnitude;\n+    public double [] dsign;\n+    public double [] adresult;\n+    public double [] edresult;\n+\n+    public TestCopySignIntrinsic() {\n+        fmagnitude = new float[SIZE];\n+        fsign = new float[SIZE];\n+\n+        dmagnitude = new double[SIZE];\n+        dsign = new double[SIZE];\n+\n+        afresult = new float[SIZE];\n+        efresult = new float[SIZE];\n+\n+        adresult = new double[SIZE];\n+        edresult = new double[SIZE];\n+\n+        Generator<Float> genFloat = G.floats();\n+        Generator<Double> genDouble = G.doubles();\n+        for (int i = 0; i < SIZE; i++) {\n+            fmagnitude[i] = genFloat.next();\n+            dmagnitude[i] = genFloat.next();\n+            fsign[i]      = genFloat.next();\n+            dsign[i]      = genFloat.next();\n+        }\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            efresult[i] = Math.copySign(fmagnitude[i], fsign[i]);\n+            edresult[i] = Math.copySign(dmagnitude[i], dsign[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COPYSIGN_F, \" >0 \", IRNode.COPYSIGN_VF, \" >0 \"}, applyIfCPUFeature = { \"avx\", \"true\"})\n+    public void testCopySignF() {\n+        for (int i = 0; i < SIZE; i++) {\n+            afresult[i] = Math.copySign(fmagnitude[i], fsign[i]);\n+        }\n+    }\n+\n+    @Check(test = \"testCopySignF\")\n+    public void checkCopySignF() {\n+        for (int i = 0; i < SIZE; i++) {\n+            Verify.checkEQ(afresult[i], efresult[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COPYSIGN_D, \" >0 \", IRNode.COPYSIGN_VD, \" >0 \"}, applyIfCPUFeature = { \"avx\", \"true\"})\n+    public void testCopySignD() {\n+        for (int i = 0; i < SIZE; i++) {\n+            adresult[i] = Math.copySign(dmagnitude[i], dsign[i]);\n+        }\n+    }\n+\n+    @Check(test = \"testCopySignD\")\n+    public void checkCopySignD() {\n+        for (int i = 0; i < SIZE; i++) {\n+            Verify.checkEQ(adresult[i], edresult[i]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestCopySignIntrinsic.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -1833,0 +1833,20 @@\n+    public static final String COPYSIGN_F = PREFIX + \"COPYSIGN_F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COPYSIGN_F, \"CopySignF\");\n+    }\n+\n+    public static final String COPYSIGN_D = PREFIX + \"COPYSIGN_D\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COPYSIGN_D, \"CopySignD\");\n+    }\n+\n+    public static final String COPYSIGN_VD = VECTOR_PREFIX + \"COPYSIGN_VD\" + POSTFIX;\n+    static {\n+        vectorNode(COPYSIGN_VD, \"CopySignVD\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String COPYSIGN_VF = VECTOR_PREFIX + \"COPYSIGN_VF\" + POSTFIX;\n+    static {\n+        vectorNode(COPYSIGN_VF, \"CopySignVF\", TYPE_FLOAT);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}