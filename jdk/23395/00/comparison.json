{"files":[{"patch":"@@ -82,0 +82,2 @@\n+    -taglet build.tools.taglet.PreviewNote \\\n+    --preview-note-tag previewNote \\\n","filename":"make\/Docs.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package build.tools.taglet;\n+\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+\n+import javax.lang.model.element.Element;\n+import javax.tools.Diagnostic;\n+\n+\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.UnknownInlineTagTree;\n+import jdk.javadoc.doclet.Doclet;\n+import jdk.javadoc.doclet.DocletEnvironment;\n+import jdk.javadoc.doclet.Reporter;\n+import jdk.javadoc.doclet.StandardDoclet;\n+import jdk.javadoc.doclet.Taglet;\n+\n+import static com.sun.source.doctree.DocTree.Kind.UNKNOWN_INLINE_TAG;\n+\n+\/**\n+ * An inline tag to insert a note formatted as preview note.\n+ * The tag can be used as follows:\n+ *\n+ * <pre>\n+ * {&commat;previewNote jep-number [Preview note heading]}\n+ * Preview note content\n+ * {&commat;previewNote}\n+ * <\/pre>\n+ *\n+ *\/\n+public class PreviewNote implements Taglet {\n+\n+    static final String TAG_NAME = \"previewNote\";\n+    Reporter reporter = null;\n+\n+    @Override\n+    public void init(DocletEnvironment env, Doclet doclet) {\n+        if (doclet instanceof StandardDoclet stdoclet) {\n+            reporter = stdoclet.getReporter();\n+        }\n+    }\n+\n+    \/**\n+     * Returns the set of locations in which the tag may be used.\n+     *\/\n+    @Override\n+    public Set<Location> getAllowedLocations() {\n+        return EnumSet.allOf(Taglet.Location.class);\n+    }\n+\n+    @Override\n+    public boolean isInlineTag() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return TAG_NAME;\n+    }\n+\n+    @Override\n+    public String toString(List<? extends DocTree> tags, Element elem) {\n+\n+        for (DocTree tag : tags) {\n+            if (tag.getKind() == UNKNOWN_INLINE_TAG) {\n+                UnknownInlineTagTree inlineTag = (UnknownInlineTagTree) tag;\n+                String[] content = inlineTag.getContent().toString().trim().split(\"\\\\s+\", 2);\n+                if (!content[0].isBlank()) {\n+                    StringBuilder sb = new StringBuilder(\"\"\"\n+                       <div class=\"preview-block\" style=\"margin-top:10px; display:block; max-width:max-content;\">\n+                       \"\"\");\n+                    if (content.length == 2) {\n+                        sb.append(\"\"\"\n+                                <div class=\"preview-label\">\n+                                \"\"\")\n+                          .append(content[1])\n+                          .append(\"\"\"\n+                                <\/div>\n+                                \"\"\");\n+                    }\n+                    sb.append(\"\"\"\n+                            <div class=\"preview-comment\">\n+                            \"\"\");\n+                    return sb.toString();\n+                } else {\n+                    return \"\"\"\n+                             <\/div>\n+                             <\/div>\n+                            \"\"\";\n+                }\n+            }\n+        }\n+\n+        if (reporter == null) {\n+            throw new IllegalArgumentException(\"@\" + TAG_NAME + \" taglet content must be begin or end\");\n+        }\n+        reporter.print(Diagnostic.Kind.ERROR, \"@\" + TAG_NAME + \" taglet content must be begin or end\");\n+        return \"\";\n+    }\n+}\n","filename":"make\/jdk\/src\/classes\/build\/tools\/taglet\/PreviewNote.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.javadoc.internal.html.HtmlId;\n@@ -99,0 +100,16 @@\n+    @Override\n+    protected void addExtraSection(Content content) {\n+        var notes = builder.getElementNotes();\n+        if (!notes.isEmpty()) {\n+            addSummaryAPI(notes, HtmlId.of(\"preview-api-notes\"),\n+                    \"doclet.Preview_Notes_Elements\", \"doclet.Element\", content);\n+        }\n+    }\n+\n+    @Override\n+    protected void addExtraIndexLink(Content target) {\n+        if (!builder.getElementNotes().isEmpty()) {\n+            addIndexLink(HtmlId.of(\"preview-api-notes\"), \"doclet.Preview_Notes\", target);\n+        }\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PreviewListWriter.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -139,0 +139,2 @@\n+doclet.Preview_Notes=Preview API Notes\n+doclet.Preview_Notes_Elements=Elements containing Preview Notes\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,0 +239,8 @@\n+\n+    \/**\n+     * Argument for command-line option {@code --preview-note-tag}.\n+     * If set, the JavaDoc inline tag with the given name is considered\n+     * a preview note and added to the preview API page.\n+     *\/\n+    private String previewNoteTag = null;\n+\n@@ -552,0 +560,8 @@\n+                new Hidden(resources, \"--preview-note-tag\", 1) {\n+                    @Override\n+                    public boolean process(String option, List<String> args) {\n+                        previewNoteTag = args.getFirst();\n+                        return true;\n+                    }\n+                },\n+\n@@ -943,0 +959,6 @@\n+    \/**\n+     * Argument for command-line option {@code --preview-note-tag}.\n+     * Name of inline tag for preview notes.\n+     *\/\n+    public String previewNoteTag() { return previewNoteTag; }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseOptions.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -399,28 +399,0 @@\n-    \/**\n-     * Returns a map containing {@code jdk.internal.javac.PreviewFeature.JEP} element values associated with the\n-     * {@code jdk.internal.javac.PreviewFeature.Feature} enum constant identified by {@code feature}.\n-     *\n-     * This method uses internal javac features (although only reflectively).\n-     *\n-     * @param feature the name of the PreviewFeature.Feature enum value\n-     * @return the map of PreviewFeature.JEP annotation element values, or an empty map\n-     *\/\n-    public Map<String, Object> getJepInfo(String feature) {\n-        TypeElement featureType = elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.Feature\");\n-        TypeElement jepType = elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.JEP\");\n-        var featureVar = featureType.getEnclosedElements().stream()\n-                .filter(e -> feature.equals(e.getSimpleName().toString())).findFirst();\n-        if (featureVar.isPresent()) {\n-            for (AnnotationMirror anno : featureVar.get().getAnnotationMirrors()) {\n-                if (anno.getAnnotationType().asElement().equals(jepType)) {\n-                    return anno.getElementValues().entrySet()\n-                            .stream()\n-                            .collect(Collectors.toMap(\n-                                    e -> e.getKey().getSimpleName().toString(),\n-                                    e -> e.getValue().getValue()));\n-                }\n-            }\n-        }\n-        return Map.of();\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.UnknownInlineTagTree;\n@@ -30,0 +32,2 @@\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.AnnotationValue;\n@@ -31,0 +35,2 @@\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n@@ -34,0 +40,1 @@\n+import java.util.Optional;\n@@ -35,0 +42,1 @@\n+import java.util.SortedSet;\n@@ -36,1 +44,0 @@\n-import java.util.stream.Collectors;\n@@ -44,0 +51,1 @@\n+    private final SortedSet<Element> elementNotes = createSummarySet();\n@@ -45,1 +53,1 @@\n-    private static final JEP NULL_SENTINEL = new JEP(0, \"\", \"\");\n+    private final String previewNoteTag;\n@@ -64,1 +72,40 @@\n-        buildSummaryAPIInfo();\n+        this.previewNoteTag = configuration.getOptions().previewNoteTag();\n+        \/\/ retrieve preview JEPs\n+        buildPreviewFeatureInfo();\n+        if (!jeps.isEmpty()) {\n+            \/\/ map elements to preview JEPs and preview tags\n+            buildSummaryAPIInfo();\n+            \/\/ remove unused preview JEPs\n+            jeps.entrySet().removeIf(e -> !elementJeps.containsValue(e.getValue()));\n+        }\n+    }\n+\n+    private void buildPreviewFeatureInfo() {\n+        TypeElement featureType = utils.elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.Feature\");\n+        if (featureType == null) {\n+            return;\n+        }\n+        TypeElement jepType = utils.elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.JEP\");\n+        featureType.getEnclosedElements().forEach(elem -> {\n+            for (AnnotationMirror anno : elem.getAnnotationMirrors()) {\n+                if (anno.getAnnotationType().asElement().equals(jepType)) {\n+                    Map<? extends ExecutableElement, ? extends AnnotationValue> values = anno.getElementValues();\n+                    jeps.put(elem.getSimpleName().toString(), new JEP(\n+                            getAnnotationElementValue(values, \"number\", 0),\n+                            getAnnotationElementValue(values, \"title\", \"\"),\n+                            getAnnotationElementValue(values, \"status\", \"Preview\"))\n+                    );\n+                }\n+            }\n+        });\n+    }\n+\n+    \/\/ Extract a single annotation element value with the given name and default value\n+    @SuppressWarnings(\"unchecked\")\n+    private <R> R getAnnotationElementValue(Map<? extends ExecutableElement, ? extends AnnotationValue> values,\n+                                            String name, R defaultValue) {\n+        Optional<R> value = values.entrySet().stream()\n+                .filter(e -> Objects.equals(e.getKey().getSimpleName().toString(), name))\n+                .map(e -> (R) e.getValue().getValue())\n+                .findFirst();\n+        return value.orElse(defaultValue);\n@@ -69,2 +116,9 @@\n-        if (!utils.isPreviewAPI(element)) {\n-            return false;\n+        if (utils.isPreviewAPI(element)) {\n+            String feature = Objects.requireNonNull(utils.getPreviewFeature(element),\n+                    \"Preview feature not specified\").toString();\n+            \/\/ Preview features without JEP are not included in the list.\n+            JEP jep = jeps.get(feature);\n+            if (jep != null) {\n+                elementJeps.put(element, jep);\n+                return true;\n+            }\n@@ -72,15 +126,15 @@\n-        String feature = Objects.requireNonNull(utils.getPreviewFeature(element),\n-                \"Preview feature not specified\").toString();\n-        JEP jep = jeps.computeIfAbsent(feature, featureName -> {\n-            Map<String, Object> jepInfo = configuration.workArounds.getJepInfo(featureName);\n-            if (!jepInfo.isEmpty()) {\n-                int number = 0;\n-                String title = \"\";\n-                String status = \"Preview\"; \/\/ Default value is not returned by the method we used above.\n-                for (var entry : jepInfo.entrySet()) {\n-                    switch (entry.getKey()) {\n-                        case \"number\" -> number = (int) entry.getValue();\n-                        case \"title\" -> title = (String) entry.getValue();\n-                        case \"status\" -> status = (String) entry.getValue();\n-                        default -> throw new IllegalArgumentException(entry.getKey());\n-                    }\n+        \/\/ If preview tag is defined map elements to preview tags\n+        if (previewNoteTag != null) {\n+            CommentHelper ch = utils.getCommentHelper(element);\n+            if (ch.dcTree != null) {\n+                var jep = ch.dcTree.getFullBody().stream()\n+                        .filter(dt -> dt.getKind() == DocTree.Kind.UNKNOWN_INLINE_TAG)\n+                        .map(dt -> (UnknownInlineTagTree) dt)\n+                        .filter(t -> previewNoteTag.equals(t.getTagName()) && !t.getContent().isEmpty())\n+                        .map(this::findJEP)\n+                        .filter(Objects::nonNull)\n+                        .findFirst();\n+                if (jep.isPresent()) {\n+                    elementNotes.add(element);\n+                    elementJeps.put(element, jep.get());\n+                    \/\/ Don't return true as this is not actual preview API.\n@@ -88,1 +142,0 @@\n-                return new JEP(number, title, status);\n@@ -90,5 +143,0 @@\n-            return NULL_SENTINEL;\n-        });\n-        if (jep != NULL_SENTINEL) {\n-            elementJeps.put(element, jep);\n-            return true;\n@@ -96,1 +144,0 @@\n-        \/\/ Preview features without JEP are not included.\n@@ -104,4 +151,1 @@\n-        return jeps.values()\n-                .stream()\n-                .filter(jep -> jep != NULL_SENTINEL)\n-                .collect(Collectors.toCollection(TreeSet::new));\n+        return new TreeSet<>(jeps.values());\n@@ -116,0 +160,22 @@\n+\n+    \/**\n+     * {@return a sorted set containing elements tagged with preview notes}\n+     *\/\n+    public SortedSet<Element> getElementNotes() {\n+        return elementNotes;\n+    }\n+\n+    private JEP findJEP(UnknownInlineTagTree tag) {\n+        var content = tag.getContent().toString().trim().split(\"\\\\s+\", 2);\n+        try {\n+            var jnum = Integer.parseInt(content[0]);\n+            for (var jep : jeps.values()) {\n+                if (jep.number == jnum) {\n+                    return jep;\n+                }\n+            }\n+        } catch (NumberFormatException nfe) {\n+            \/\/ print warning?\n+        }\n+        return null;\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/PreviewAPIListBuilder.java","additions":97,"deletions":31,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *           8331947 8281533 8343239 8318416\n+ *           8331947 8281533 8343239 8318416 8346109\n@@ -299,0 +299,50 @@\n+\n+    \/\/ Test for JDK hidden option to add an entry for a non-preview element\n+    \/\/ in the preview page based on the presence of a javadoc tag.\n+    @Test\n+    public void testPreviewNoteTag(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                import jdk.internal.javac.PreviewFeature;\n+\n+                \/**\n+                 * Preview feature\n+                 *\/\n+                @PreviewFeature(feature= PreviewFeature.Feature.TEST)\n+                public interface CoreInterface {\n+                }\n+                \"\"\", \"\"\"\n+                package p;\n+\n+                 \/**\n+                  * Non preview feature.\n+                  * {@previewNote 2147483647 Preview API Note}\n+                  *\/\n+                 public interface NonPrevieFeature {\n+                 }\n+                \"\"\");\n+        javadoc(\"-d\", \"out-preview-note-tag\",\n+                \"--add-exports\", \"java.base\/jdk.internal.javac=ALL-UNNAMED\",\n+                \"-tag\", \"previewNote:a:Preview Note:\",\n+                \"--preview-note-tag\", \"previewNote\",\n+                \"--source-path\",\n+                src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"preview-list.html\", true,\n+                \"\"\"\n+                    <h2 title=\"Contents\">Contents<\/h2>\n+                    <ul class=\"contents-list\">\n+                    <li id=\"contents-preview-api-notes\"><a href=\"#preview-api-notes\">Preview API Notes<\/a><\/li>\n+                    <li id=\"contents-interface\"><a href=\"#interface\">Interfaces<\/a><\/li>\"\"\",\n+                \"\"\"\n+                    <div class=\"caption\"><span>Elements containing Preview Notes<\/span><\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"col-summary-item-name even-row-color preview-api-notes preview-api-notes-tab1\\\n+                    \"><a href=\"p\/NonPrevieFeature.html\" title=\"interface in p\">p.NonPrevieFeature<\/a><\/div>\n+                    <div class=\"col-second even-row-color preview-api-notes preview-api-notes-tab1\">Test Feature<\/div>\n+                    <div class=\"col-last even-row-color preview-api-notes preview-api-notes-tab1\">\n+                    <div class=\"block\">Non preview feature.<\/div>\"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/TestPreview.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"}]}