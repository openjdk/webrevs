{"files":[{"patch":"@@ -624,1 +624,2 @@\n-size_t os::pre_alloc(void** raw_ptr, void* old_ptr, size_t size, bool check_limit, MemTag mem_tag) {\n+\/\/ Use pre-init if too early for NMT and check for size overflow and if we are still under MallocLimit\n+size_t os::pre_init_and_check_size(void** raw_ptr, void* old_ptr, size_t size, MemTag mem_tag) {\n@@ -641,1 +642,1 @@\n-  if (check_limit && MemTracker::check_exceeds_limit(size, mem_tag)) {\n+  if ((old_ptr == nullptr) && MemTracker::check_exceeds_limit(size, mem_tag)) {\n@@ -654,1 +655,2 @@\n-void* os::post_alloc(void* raw_ptr, size_t size, size_t old_size, MemTag mem_tag, const NativeCallStack& stack) {\n+\/\/ Record the allocated pointer with NMT and clear bits as needed\n+void* os::record_and_clear_bits(void* raw_ptr, size_t size, size_t old_size, MemTag mem_tag, const NativeCallStack& stack) {\n@@ -658,0 +660,1 @@\n+  \/\/ Clear bits\n@@ -679,4 +682,5 @@\n-  void* rc = nullptr;\n-  size_t outer_size = os::pre_alloc(&rc, nullptr, size, true, mem_tag);\n-  if (rc != nullptr) {\n-    return rc;\n+  void* ptr = nullptr;\n+  void* old_ptr = nullptr;\n+  size_t outer_size = os::pre_init_and_check_size(&ptr, old_ptr, size, mem_tag);\n+  if (ptr != nullptr) {\n+    return ptr;\n@@ -692,2 +696,2 @@\n-\n-  return post_alloc(outer_ptr, size, 0, mem_tag, stack);\n+ \n+  return record_and_clear_bits(outer_ptr, size, 0, mem_tag, stack);\n@@ -711,4 +715,4 @@\n-  void* rc = nullptr;\n-  size_t outer_size = os::pre_alloc(&rc, memblock, size, false, mem_tag);\n-  if (rc != nullptr) {\n-    return rc;\n+  void* ptr = nullptr;\n+  size_t outer_size = os::pre_init_and_check_size(&ptr, memblock, size, mem_tag);\n+  if (ptr != nullptr) {\n+    return ptr;\n@@ -754,1 +758,1 @@\n-    rc = post_alloc(outer_ptr, size, old_size, mem_tag, stack);\n+    ptr = record_and_clear_bits(outer_ptr, size, old_size, mem_tag, stack);\n@@ -757,2 +761,2 @@\n-    ALLOW_C_FUNCTION(::realloc, rc = ::realloc(memblock, size);)\n-    if (rc == nullptr) {\n+    ALLOW_C_FUNCTION(::realloc, ptr = ::realloc(memblock, size);)\n+    if (ptr == nullptr) {\n@@ -761,1 +765,1 @@\n-    DEBUG_ONLY(break_if_ptr_caught(rc);)\n+    DEBUG_ONLY(break_if_ptr_caught(ptr);)\n@@ -764,1 +768,1 @@\n-  return rc;\n+  return ptr;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1090,2 +1090,2 @@\n-  static size_t pre_alloc(void** raw_ptr, void* old_ptr, size_t size, bool check_limit, MemTag mem_tag);\n-  static void* post_alloc(void* raw_ptr, size_t size, size_t chunk, MemTag mem_tag, const NativeCallStack& stack);\n+  static size_t pre_init_and_check_size(void** raw_ptr, void* old_ptr, size_t size, MemTag mem_tag);\n+  static void* record_and_clear_bits(void* raw_ptr, size_t size, size_t old_size, MemTag mem_tag, const NativeCallStack& stack);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}