{"files":[{"patch":"@@ -240,0 +240,1 @@\n+    private boolean hasMultipleManifests = false;\n@@ -1255,0 +1256,5 @@\n+\n+            if (hasMultipleManifests) {\n+                warnings.add(String.format(rb.getString(\"multiple.manifest.warning.\")));\n+            }\n+\n@@ -1968,0 +1974,9 @@\n+        try (JarFile asJar = new JarFile(jarFile)) {\n+            if (JUZFA.getManifestNum(asJar) > 1) {\n+                hasMultipleManifests = true;\n+            }\n+        } catch (IOException ioe) {\n+            \/\/ intentionally \"eat\" this, since we don't want to fail, if we\n+            \/\/ cannot perform the multiple manifest check to output the warning\n+        }\n+\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+multiple.manifest.warning.=Duplicate manifest entries were detected in the jar file. JarSigner operated on only one, and the others have been discarded.\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/resources\/jarsigner.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -925,0 +925,4 @@\n+hasMultipleManifests\n+:   This JAR contained multiple manifest files. During signing, one of the files\n+was selected, and the others were discarded.\n+\n","filename":"src\/jdk.jartool\/share\/man\/jarsigner.md","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341775\n+ * @summary Print warning that duplicate manifest files are removed by jarsigner\n+ *  after signing whether or not -verbose is passed\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.jar.JarFile;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+public class MultiManifest {\n+\n+    private static final String META_INF = \"META-INF\/\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        writeMultiManifestJar();\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \"\n+                + \"-keypass changeit -alias a -dname CN=a -keyalg rsa \"\n+                + \"-genkey -validity 300\");\n+\n+        SecurityTools.jarsigner(\"-verbose -keystore ks -storepass changeit \"\n+                                + \"MultiManifest.jar -signedjar MultiManifest.signed.jar a\")\n+                .shouldHaveExitValue(0)\n+                .shouldContain(\"Duplicate manifest entries were detected\")\n+                .shouldContain(\"discarded\");\n+\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \"\n+                                + \"MultiManifest.jar -signedjar MultiManifest.signed.jar a\")\n+                 .shouldHaveExitValue(0)\n+                 .shouldContain(\"Duplicate manifest entries were detected\")\n+                 .shouldContain(\"discarded\");\n+\n+    }\n+\n+    public static void writeMultiManifestJar() throws IOException {\n+        int locPosA, locPosB, cenPos;\n+        var out = new ByteArrayOutputStream(1024);\n+        try (var zos = new ZipOutputStream(out)) {\n+            zos.putNextEntry(new ZipEntry(JarFile.MANIFEST_NAME));\n+            zos.closeEntry();\n+            locPosA = out.size();\n+            zos.putNextEntry(new ZipEntry(META_INF + \"AANIFEST.MF\"));\n+            zos.closeEntry();\n+            locPosB = out.size();\n+            zos.putNextEntry(new ZipEntry(META_INF + \"BANIFEST.MF\"));\n+            zos.flush();\n+            cenPos = out.size();\n+        }\n+        var template = out.toByteArray();\n+        \/\/ ISO_8859_1 to keep the 8-bit value\n+        var s = new String(template, StandardCharsets.ISO_8859_1);\n+        \/\/ change META-INF\/AANIFEST.MF to META-INF\/MANIFEST.MF\n+        var loc = s.indexOf(\"AANIFEST.MF\", locPosA);\n+        var cen = s.indexOf(\"AANIFEST.MF\", cenPos);\n+        template[loc] = template[cen] = (byte) 'M';\n+        \/\/ change META-INF\/BANIFEST.MF to META-INF\/MANIFEST.MF\n+        loc = s.indexOf(\"BANIFEST.MF\", locPosB);\n+        cen = s.indexOf(\"BANIFEST.MF\", cenPos);\n+        template[loc] = template[cen] = (byte) 'M';\n+        Files.write(Path.of(\"MultiManifest.jar\"), template);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/MultiManifest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}