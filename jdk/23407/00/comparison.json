{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,4 +34,1 @@\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.*;\n@@ -87,1 +84,2 @@\n-        System.err.println(\"(read) \" + Thread.currentThread().getName() + \": \" + new String(b));\n+        System.err.println(\"(read) \" + Thread.currentThread().getName() + \": \" +\n+            new String(b));\n@@ -94,1 +92,2 @@\n-        System.err.println(\"(write)\" + Thread.currentThread().getName() + \": \" + new String(data));\n+        System.err.println(\"(write)\" + Thread.currentThread().getName() + \": \" +\n+            new String(data));\n@@ -151,1 +150,0 @@\n-        Thread t;\n@@ -154,5 +152,2 @@\n-            r -> {\n-                Thread t = Executors.defaultThreadFactory().newThread(r);\n-                return t;\n-            });\n-\n+            r -> Executors.defaultThreadFactory().newThread(r));\n+        CountDownLatch serverLatch = new CountDownLatch(1);\n@@ -171,1 +166,1 @@\n-                System.out.println(\"Server Port: \" + serverPort);\n+                System.err.println(\"Server Port: \" + serverPort);\n@@ -178,1 +173,1 @@\n-            t = new Thread(() -> {\n+            new Thread(() -> {\n@@ -180,1 +175,3 @@\n-                    while (true) {\n+                    System.err.println(\"Server starting to accept\");\n+                    serverLatch.countDown();\n+                    do {\n@@ -183,1 +180,1 @@\n-                    }\n+                    } while (true);\n@@ -190,2 +187,1 @@\n-            });\n-            t.start();\n+            }).start();\n@@ -199,1 +195,2 @@\n-                System.err.println(\"ServerThread(\"+sock.getPort()+\")\");\n+                System.err.println(\"(Server) client connection on port \" +\n+                    sock.getPort());\n@@ -207,1 +204,1 @@\n-                    System.out.println(\"Caught \" + e.getMessage());\n+                    System.err.println(\"Caught \" + e.getMessage());\n@@ -292,1 +289,2 @@\n-                sslContext.init(TLSBase.getKeyManager(km), TLSBase.getTrustManager(tm), null);\n+                sslContext.init(TLSBase.getKeyManager(km),\n+                    TLSBase.getTrustManager(tm), null);\n@@ -315,3 +313,6 @@\n-                socket.connect(new InetSocketAddress(InetAddress.getLoopbackAddress(), serverPort));\n-                System.err.println(\"Client (\" + Thread.currentThread().getName() + \") connected using port \" +\n-                    socket.getLocalPort() + \" to \" + socket.getPort());\n+                socket.connect(new InetSocketAddress(\n+                    InetAddress.getLoopbackAddress(), serverPort));\n+                System.err.println(\"Client (\" +\n+                    Thread.currentThread().getName() +\n+                    \") connected using port \" + socket.getLocalPort() + \" to \" +\n+                    socket.getPort());\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/TLSBase.java","additions":26,"deletions":25,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-                    if (svr.regionMatches(svr.length() - 16, cli, cli.length() - 16, 16)) {\n+                    if (svr.regionMatches(svr.length() - 16, cli,\n+                        cli.length() - 16, 16)) {\n@@ -105,1 +106,2 @@\n-                        System.out.println(\"entry \" + (i + 1) + \" server and client PSK didn't match:\");\n+                        System.out.println(\"entry \" + (i + 1) +\n+                            \" server and client PSK didn't match:\");\n@@ -130,2 +132,2 @@\n-\n-        System.out.println(\"------  Start connection\");\n+        server.serverLatch.await();\n+        System.out.println(\"------  Server ready, starting original client.\");\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/MultiNSTClient.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -79,2 +79,2 @@\n-\n-        System.out.println(\"------  Initial connection\");\n+        server.serverLatch.await();\n+        System.out.println(\"------  Server ready, starting initial client.\");\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/MultiNSTNoSessionCreation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-            System.err.println(\"waiting \" + Thread.currentThread().getName());\n+            System.err.println(name + \" is ready\");\n@@ -87,0 +87,1 @@\n+            System.err.println(sb);\n@@ -136,1 +137,8 @@\n-\n+                if (list.size() == 0 || serverPSK.size() == 0) {\n+                    throw new Exception(\"Error setting up test.  No server \" +\n+                        \"PSKs found in debug log.\");\n+                }\n+                if (clientPSK.size() == 0) {\n+                        throw new Exception(\"Error setting up test.  No \" +\n+                            \"client PSKs found in debug log.\");\n+                }\n@@ -174,4 +182,4 @@\n-\n-        System.out.println(\"------  Start connection\");\n-        TLSBase.Client initial = new TLSBase.Client();\n-        SSLSession initialSession = initial.getSession();\n+        server.serverLatch.await();\n+        System.out.println(\"------  Server ready, starting initial client.\");\n+        TLSBase.Client initialClient = new TLSBase.Client();\n+        SSLSession initialSession = initialClient.connect().getSession();\n@@ -180,2 +188,1 @@\n-\n-        System.out.println(\"------  getNewSession from original client\");\n+        System.out.println(\"------  Initial client context ready.\");\n@@ -185,1 +192,1 @@\n-        System.out.println(\"tx \" + ticketCount);\n+        System.out.println(\"Client count = \" + ticketCount);\n@@ -187,2 +194,2 @@\n-            Thread t = new ClientThread(initial);\n-            t.setName(\"Iteration \" + i);\n+            Thread t = new ClientThread(initialClient);\n+            t.setName(\"client \" + i);\n@@ -200,1 +207,1 @@\n-        initial.close();\n+        initialClient.close();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/MultiNSTParallel.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -67,2 +67,1 @@\n-                    \" -Djavax.net.debug=ssl,handshake \" + params\n-                              );\n+                    \" -Djavax.net.debug=ssl,handshake \" + params);\n@@ -118,2 +117,2 @@\n-\n-        System.out.println(\"------  Initial connection\");\n+        server.serverLatch.await();\n+        System.out.println(\"------  Server ready, starting initial client.\");\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/MultiNSTSequence.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}