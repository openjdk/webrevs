[{"commit":{"message":"Apply StringUTF16.coderFromArrayLen"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"}],"sha":"d201344b631bf2cc9fb1990874fc7d42d523eeab"},{"commit":{"message":"Merge pull request #4 from cl4es\/8311906_x64_intr_opt\n\nSimplified and slightly optimized x86 char_array_compress"},"files":[],"sha":"0256b9e0a16366452e08582289897f748eb01985"},{"commit":{"message":"Simplified and slightly optimized x86 char_array_compress"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"d4bd5c9325b7d95afa66478c94acdf1b24931044"},{"commit":{"message":"undo noise chars"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"}],"sha":"04d5877926bb7d26d5c78e713d6ae39a790db7dd"},{"commit":{"message":"Normalize the spec for undefined behavior of String constructors, StringBuilder, and\nAppendable methods in the case where the input arguments are modified during\nconstruction or a StringBuilder or Appendable method call."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/Appendable.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"}],"sha":"7924118b0621252e5d647efec2ae254354191cef"},{"commit":{"message":"Speed up getting the coder from a byte array returned from StringUTF16.compress and normalize calling sequence"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"}],"sha":"6419fd5e8539fe55ee5ebce773893275c3ff77d1"},{"commit":{"message":"Remove trailing whitespace"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringConstructionIntrinsics.java"}],"sha":"3e3607e96e0bc4ed8985b5226d22ee1ef1bd79b6"},{"commit":{"message":"Merge pull request #3 from cl4es\/8311906_intrinsic_fixes\n\nFix crash with jmpb in AVX3 intrinsic"},"files":[],"sha":"626d7bf14fcef15c49de5ac0231afbcdac277f30"},{"commit":{"message":"Fix crash with jmpb in AVX3 intrinsic"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringConstructionIntrinsics.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/patches\/java.base\/java\/lang\/Helper.java"}],"sha":"f7d8225013805625091d8fe9667be7d1d45b8fe7"},{"commit":{"message":"Additional corrections from review comments, dropped informational output"},"files":[{"filename":"test\/jdk\/java\/lang\/String\/StringRacyConstructor.java"}],"sha":"5dda14c4d0ef76894e3532ab8edea77e9722a641"},{"commit":{"message":"Cleanup of test with review comment recommendations"},"files":[{"filename":"test\/jdk\/java\/lang\/String\/StringRacyConstructor.java"}],"sha":"b84d09db8b88b936096523d968bd2366aa09aac4"},{"commit":{"message":"Enable racy constructor tests iff COMPACT_STRINGS is true\nTest of string_compress intrinsic is always enabled"},"files":[{"filename":"test\/jdk\/java\/lang\/String\/StringRacyConstructor.java"}],"sha":"5136b80c41513eef049b98f0c72722dabd6302a1"},{"commit":{"message":"Update PPC implementation of string_compress to return the index of the non-latin1 char\nPatch supplied by TheRealMDoerr"},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/ppc.ad"}],"sha":"08f365f943557ed2f99a592d353c50121f3ad0ab"},{"commit":{"message":"code and doc cleanup in StringRacyConstructor test"},"files":[{"filename":"test\/jdk\/java\/lang\/String\/StringRacyConstructor.java"}],"sha":"f60805951ebb687b6fd123b0ef2ea10a6f21e5d6"},{"commit":{"message":"Update of string_compress for the s390 port to return the index of the non-latin1 char.\nContributed by Amit Kumar."},"files":[{"filename":"src\/hotspot\/cpu\/s390\/s390.ad"}],"sha":"89bd337f8ef23cfdde5f71342148f6547f9d53aa"},{"commit":{"message":"Refactored extractCodePoints to avoid multiple resizes if the array was modified"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"}],"sha":"ad73a2a6dd90a7939e97708e08cb6cb57bb7f4f4"},{"commit":{"message":"Replaced isLatin1 implementation with `getChar(buf, ndx) <= 0xff`\nIt performs better than the single byte array access by avoiding the bounds check."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"}],"sha":"55ab9203ea0680aa8c3ffbe8b79c91c44b2b9ee2"},{"commit":{"message":"Misc updates for review comments, javadoc cleanup\nExtra checking on maximum string lengths when calling toBytes()."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"}],"sha":"00a5d066c587c9f58eeb15f54faca7cebe345c0a"},{"commit":{"message":"Cleanup javadoc, whitespace, and formatting in the JMH benchmark"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConstructor.java"}],"sha":"4662dec7a2e937dc35b48f4b2fdb48367cf8d23a"},{"commit":{"message":"Update RiscV implementation of intrinsic for java.lang.StringUTF16.compress\nto return the index of the first non-latin1 character or the length if none.\nNot yet built or tested on RiscV.\nThe test StringRacyConstructor verifies the behavior of the compress intrinsic.\n\nUpdated comments on intrinsic implementations of char_array_compress to reflect\nthe change in the behavior of StringUTF16.compress.\n\nDamon Fenacci (@damon_fenacci) authored the changes to macroAssembler_aarch64.cpp\nand macroAssembler_aarch64.cpp."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"c665cbd8b3a6b18774b9f59c2b89ca07f90ebbaa"},{"commit":{"message":"Javadoc formatting"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"}],"sha":"43f937d9dd10a6ebe34c72b74b1d6439c16a7f83"},{"commit":{"message":"8311906: Improve robustness of String constructors with mutable array arguments\nEnsure that mutations of input arguments to constructors can not invalidate the latin1 vs non-latin1 coding.\n\n8313982: Non-conforming CharSequence implementation can break StringBuilder\nIncrease AbstractStringBuilder\/StringBuilder robustness when appending a CharSequence\nthat may throw exceptions while returning characters from the sequence."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/Appendable.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"},{"filename":"test\/jdk\/java\/lang\/String\/Chars.java"},{"filename":"test\/jdk\/java\/lang\/String\/StringRacyConstructor.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConstructor.java"}],"sha":"faa5acec042a8ba61b158a6d7edbd9fb66b56208"}]