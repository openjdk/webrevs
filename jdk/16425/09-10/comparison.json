{"files":[{"patch":"@@ -8502,1 +8502,1 @@\n-  Label copy_chars_loop, return_length, done, reset_sp, copy_tail;\n+  Label copy_chars_loop, done, reset_sp, copy_tail;\n@@ -8517,1 +8517,1 @@\n-  push(len);\n+  movl(result, len);\n@@ -8534,2 +8534,2 @@\n-    movl(result, 0x00FF);\n-    evpbroadcastw(tmp2Reg, result, Assembler::AVX_512bit);\n+    movl(tmp5, 0x00FF);\n+    evpbroadcastw(tmp2Reg, tmp5, Assembler::AVX_512bit);\n@@ -8550,4 +8550,5 @@\n-    movl(result, 0xFFFFFFFF);\n-    shlxl(result, result, tmp5);\n-    notl(result);\n-    kmovdl(mask2, result);\n+    movl(len, 0xFFFFFFFF);\n+    shlxl(len, len, tmp5);\n+    notl(len);\n+    kmovdl(mask2, len);\n+    movl(len, result);\n@@ -8594,1 +8595,1 @@\n-    jcc(Assembler::zero, return_length);\n+    jcc(Assembler::zero, done);\n@@ -8599,3 +8600,3 @@\n-    movl(result, 0xFFFFFFFF);\n-    shlxl(result, result, len);\n-    notl(result);\n+    movl(tmp5, 0xFFFFFFFF);\n+    shlxl(tmp5, tmp5, len);\n+    notl(tmp5);\n@@ -8603,1 +8604,1 @@\n-    kmovdl(mask2, result);\n+    kmovdl(mask2, tmp5);\n@@ -8611,1 +8612,1 @@\n-    jmp(return_length);\n+    jmp(done);\n@@ -8623,1 +8624,1 @@\n-    Label copy_32_loop, copy_16, copy_tail_sse, reset_for_copy_tail, reset_for_copy_tail_16;\n+    Label copy_32_loop, copy_16, copy_tail_sse, reset_for_copy_tail;\n@@ -8625,1 +8626,3 @@\n-    movl(result, len);\n+    \/\/ vectored compression\n+    testl(len, 0xfffffff8);\n+    jcc(Assembler::zero, copy_tail);\n@@ -8628,0 +8631,2 @@\n+    movdl(tmp1Reg, tmp5);\n+    pshufd(tmp1Reg, tmp1Reg, 0);   \/\/ store Unicode mask in tmp1Reg\n@@ -8629,5 +8634,2 @@\n-    \/\/ vectored compression\n-    andl(len, 0xfffffff0);    \/\/ vector count (in chars)\n-    andl(result, 0x0000000f);    \/\/ tail count (in chars)\n-    testl(len, len);\n-    jcc(Assembler::zero, copy_16);\n+    andl(len, 0xfffffff0);\n+    jccb(Assembler::zero, copy_16);\n@@ -8636,2 +8638,0 @@\n-    movdl(tmp1Reg, tmp5);\n-    pshufd(tmp1Reg, tmp1Reg, 0);   \/\/ store Unicode mask in tmp1Reg\n@@ -8650,1 +8650,1 @@\n-    jcc(Assembler::notZero, reset_for_copy_tail);\n+    jccb(Assembler::notZero, reset_for_copy_tail);\n@@ -8654,1 +8654,1 @@\n-    jcc(Assembler::notZero, copy_32_loop);\n+    jccb(Assembler::notZero, copy_32_loop);\n@@ -8658,4 +8658,2 @@\n-    movl(len, result);\n-    andl(len, 0xfffffff8);    \/\/ vector count (in chars)\n-    andl(result, 0x00000007);    \/\/ tail count (in chars)\n-    testl(len, len);\n+    \/\/ len = 0\n+    testl(result, 0x00000008);     \/\/ check if there's a block of 8 chars to compress\n@@ -8664,2 +8662,0 @@\n-    movdl(tmp1Reg, tmp5);\n-    pshufd(tmp1Reg, tmp1Reg, 0);   \/\/ store Unicode mask in tmp1Reg\n@@ -8670,1 +8666,1 @@\n-    jccb(Assembler::notZero, reset_for_copy_tail_16);\n+    jccb(Assembler::notZero, reset_for_copy_tail);\n@@ -8675,1 +8671,1 @@\n-    jmp(copy_tail_sse);\n+    jmpb(copy_tail_sse);\n@@ -8678,10 +8674,5 @@\n-    lea(src, Address(src, result, Address::times_2));\n-    lea(dst, Address(dst, result, Address::times_1));\n-    subptr(len, result);\n-    jmpb(copy_chars_loop);\n-\n-    bind(reset_for_copy_tail_16);\n-    addl(len, result);\n-    lea(src, Address(src, len, Address::times_2));\n-    lea(dst, Address(dst, len, Address::times_1));\n-    negptr(len);\n+    movl(tmp5, result);\n+    andl(tmp5, 0x0000000f);\n+    lea(src, Address(src, tmp5, Address::times_2));\n+    lea(dst, Address(dst, tmp5, Address::times_1));\n+    subptr(len, tmp5);\n@@ -8692,0 +8683,1 @@\n+    andl(len, 0x00000007);    \/\/ tail count (in chars)\n@@ -8696,1 +8688,1 @@\n-  jccb(Assembler::zero, return_length);\n+  jccb(Assembler::zero, done);\n@@ -8702,2 +8694,2 @@\n-  load_unsigned_short(result, Address(src, len, Address::times_2));\n-  testl(result, 0xff00);      \/\/ check if Unicode char\n+  load_unsigned_short(tmp5, Address(src, len, Address::times_2));\n+  testl(tmp5, 0xff00);      \/\/ check if Unicode char\n@@ -8705,1 +8697,1 @@\n-  movb(Address(dst, len, Address::times_1), result);  \/\/ ASCII char; compress to 1 byte\n+  movb(Address(dst, len, Address::times_1), tmp5);  \/\/ ASCII char; compress to 1 byte\n@@ -8707,6 +8699,1 @@\n-  jcc(Assembler::notZero, copy_chars_loop);\n-\n-  \/\/ if compression succeeded, return length\n-  bind(return_length);\n-  pop(result);\n-  jmpb(done);\n+  jccb(Assembler::notZero, copy_chars_loop);\n@@ -8714,0 +8701,1 @@\n+  \/\/ add len then return (len will be zero if compress succeeded, otherwise negative)\n@@ -8715,1 +8703,0 @@\n-  pop(result);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":41,"deletions":54,"binary":false,"changes":95,"status":"modified"}]}