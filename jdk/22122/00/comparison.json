{"files":[{"patch":"@@ -988,1 +988,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -990,3 +989,1 @@\n-            java.security.AccessController.doPrivileged(\n-                new sun.security.action.GetBooleanAction(\n-                    \"java.util.Arrays.useLegacyMergeSort\")).booleanValue();\n+                Boolean.getBoolean(\"java.util.Arrays.useLegacyMergeSort\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,6 +46,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PermissionCollection;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n@@ -3567,15 +3561,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static class CalendarAccessControlContext {\n-        private static final AccessControlContext INSTANCE;\n-        static {\n-            RuntimePermission perm = new RuntimePermission(\"accessClassInPackage.sun.util.calendar\");\n-            PermissionCollection perms = perm.newPermissionCollection();\n-            perms.add(perm);\n-            INSTANCE = new AccessControlContext(new ProtectionDomain[] {\n-                                                    new ProtectionDomain(null, perms)\n-                                                });\n-        }\n-        private CalendarAccessControlContext() {\n-        }\n-    }\n-\n@@ -3585,1 +3564,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -3620,10 +3598,2 @@\n-            zi = AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<>() {\n-                        @Override\n-                        public ZoneInfo run() throws Exception {\n-                            return (ZoneInfo) input.readObject();\n-                        }\n-                    },\n-                    CalendarAccessControlContext.INSTANCE);\n-        } catch (PrivilegedActionException pae) {\n-            Exception e = pae.getException();\n+            zi = (ZoneInfo) input.readObject();\n+        } catch (Exception e) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Calendar.java","additions":2,"deletions":32,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -216,1 +214,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -218,26 +215,0 @@\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Void run() {\n-                try {\n-                    try (InputStream in = getClass().getResourceAsStream(\"\/java\/util\/currency.data\")) {\n-                        if (in == null) {\n-                            throw new InternalError(\"Currency data not found\");\n-                        }\n-                        DataInputStream dis = new DataInputStream(new BufferedInputStream(in));\n-                        if (dis.readInt() != MAGIC_NUMBER) {\n-                            throw new InternalError(\"Currency data is possibly corrupted\");\n-                        }\n-                        formatVersion = dis.readInt();\n-                        if (formatVersion != VALID_FORMAT_VERSION) {\n-                            throw new InternalError(\"Currency data format is incorrect\");\n-                        }\n-                        dataVersion = dis.readInt();\n-                        mainTable = readIntArray(dis, A_TO_Z * A_TO_Z);\n-                        int scCount = dis.readInt();\n-                        specialCasesList = readSpecialCases(dis, scCount);\n-                        int ocCount = dis.readInt();\n-                        otherCurrenciesList = readOtherCurrencies(dis, ocCount);\n-                    }\n-                } catch (IOException e) {\n-                    throw new InternalError(e);\n-                }\n@@ -245,5 +216,12 @@\n-                \/\/ look for the properties file for overrides\n-                String propsFile = System.getProperty(\"java.util.currency.data\");\n-                if (propsFile == null) {\n-                    propsFile = StaticProperty.javaHome() + File.separator + \"lib\" +\n-                        File.separator + \"currency.properties\";\n+        try {\n+            try (InputStream in = Currency.class.getResourceAsStream(\"\/java\/util\/currency.data\")) {\n+                if (in == null) {\n+                    throw new InternalError(\"Currency data not found\");\n+                }\n+                DataInputStream dis = new DataInputStream(new BufferedInputStream(in));\n+                if (dis.readInt() != MAGIC_NUMBER) {\n+                    throw new InternalError(\"Currency data is possibly corrupted\");\n+                }\n+                formatVersion = dis.readInt();\n+                if (formatVersion != VALID_FORMAT_VERSION) {\n+                    throw new InternalError(\"Currency data format is incorrect\");\n@@ -251,18 +229,23 @@\n-                try {\n-                    File propFile = new File(propsFile);\n-                    if (propFile.exists()) {\n-                        Properties props = new Properties();\n-                        try (FileReader fr = new FileReader(propFile)) {\n-                            props.load(fr);\n-                        }\n-                        Pattern propertiesPattern =\n-                                Pattern.compile(\"([A-Z]{3})\\\\s*,\\\\s*(\\\\d{3})\\\\s*,\\\\s*\" +\n-                                        \"(\\\\d+)\\\\s*,?\\\\s*(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\" +\n-                                        \"\\\\d{2}:\\\\d{2})?\");\n-                        List<CurrencyProperty> currencyEntries\n-                                = getValidCurrencyData(props, propertiesPattern);\n-                        currencyEntries.forEach(Currency::replaceCurrencyData);\n-                    }\n-                } catch (IOException e) {\n-                    CurrencyProperty.info(\"currency.properties is ignored\"\n-                            + \" because of an IOException\", e);\n+                dataVersion = dis.readInt();\n+                mainTable = readIntArray(dis, A_TO_Z * A_TO_Z);\n+                int scCount = dis.readInt();\n+                specialCasesList = readSpecialCases(dis, scCount);\n+                int ocCount = dis.readInt();\n+                otherCurrenciesList = readOtherCurrencies(dis, ocCount);\n+            }\n+        } catch (IOException e) {\n+            throw new InternalError(e);\n+        }\n+\n+        \/\/ look for the properties file for overrides\n+        String propsFile = System.getProperty(\"java.util.currency.data\");\n+        if (propsFile == null) {\n+            propsFile = StaticProperty.javaHome() + File.separator + \"lib\" +\n+                File.separator + \"currency.properties\";\n+        }\n+        try {\n+            File propFile = new File(propsFile);\n+            if (propFile.exists()) {\n+                Properties props = new Properties();\n+                try (FileReader fr = new FileReader(propFile)) {\n+                    props.load(fr);\n@@ -270,1 +253,7 @@\n-                return null;\n+                Pattern propertiesPattern =\n+                        Pattern.compile(\"([A-Z]{3})\\\\s*,\\\\s*(\\\\d{3})\\\\s*,\\\\s*\" +\n+                                \"(\\\\d+)\\\\s*,?\\\\s*(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\" +\n+                                \"\\\\d{2}:\\\\d{2})?\");\n+                List<CurrencyProperty> currencyEntries\n+                        = getValidCurrencyData(props, propertiesPattern);\n+                currencyEntries.forEach(Currency::replaceCurrencyData);\n@@ -272,1 +261,4 @@\n-        });\n+        } catch (IOException e) {\n+            CurrencyProperty.info(\"currency.properties is ignored\"\n+                    + \" because of an IOException\", e);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Currency.java","additions":46,"deletions":54,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -1219,4 +1219,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) sm.checkPermission(new PropertyPermission\n-                        (\"user.language\", \"write\"));\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -953,2 +953,0 @@\n-        \/\/ and so doesn't need any security manager checks to make the value accessible\n-        \/\/ to the callers\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -135,3 +134,3 @@\n-    private static final String encoding = GetPropertyAction\n-        .privilegedGetProperty(\"java.util.PropertyResourceBundle.encoding\", \"\")\n-        .toUpperCase(Locale.ROOT);\n+    private static final String encoding =\n+            System.getProperty(\"java.util.PropertyResourceBundle.encoding\", \"\")\n+                    .toUpperCase(Locale.ROOT);\n","filename":"src\/java.base\/share\/classes\/java\/util\/PropertyResourceBundle.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.io.UncheckedIOException;\n@@ -56,4 +55,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -73,1 +68,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -77,2 +71,0 @@\n-import static sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION;\n-\n@@ -584,1 +576,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -586,2 +577,1 @@\n-        PrivilegedAction<ClassLoader> pa = module::getClassLoader;\n-        return AccessController.doPrivileged(pa);\n+        return module.getClassLoader();\n@@ -1509,5 +1499,0 @@\n-        private static final PrivilegedAction<List<ResourceBundleControlProvider>> pa =\n-            () -> ServiceLoader.load(ResourceBundleControlProvider.class,\n-                                   ClassLoader.getSystemClassLoader()).stream()\n-                             .map(ServiceLoader.Provider::get)\n-                             .toList();\n@@ -1515,1 +1500,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1517,1 +1501,4 @@\n-            AccessController.doPrivileged(pa);\n+                ServiceLoader.load(ResourceBundleControlProvider.class,\n+                                ClassLoader.getSystemClassLoader()).stream()\n+                        .map(ServiceLoader.Provider::get)\n+                        .toList();\n@@ -1597,7 +1584,0 @@\n-        if (callerModule != module) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(GET_CLASSLOADER_PERMISSION);\n-            }\n-        }\n@@ -1888,1 +1868,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1903,15 +1882,9 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                @Override\n-                public Class<ResourceBundleProvider> run() {\n-                    try {\n-                        Class<?> c = Class.forName(providerName, false, loader);\n-                        if (ResourceBundleProvider.class.isAssignableFrom(c)) {\n-                            @SuppressWarnings(\"unchecked\")\n-                            Class<ResourceBundleProvider> s = (Class<ResourceBundleProvider>) c;\n-                            return s;\n-                        }\n-                    } catch (ClassNotFoundException e) {}\n-                    return null;\n-                }\n-            });\n+        try {\n+            Class<?> c = Class.forName(providerName, false, loader);\n+            if (ResourceBundleProvider.class.isAssignableFrom(c)) {\n+                @SuppressWarnings(\"unchecked\")\n+                Class<ResourceBundleProvider> s = (Class<ResourceBundleProvider>) c;\n+                return s;\n+            }\n+        } catch (ClassNotFoundException e) {}\n+        return null;\n@@ -1923,1 +1896,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1931,28 +1903,22 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    public ResourceBundle run() {\n-                        for (Iterator<ResourceBundleProvider> itr = providers.iterator(); itr.hasNext(); ) {\n-                            try {\n-                                ResourceBundleProvider provider = itr.next();\n-                                if (cacheKey != null && cacheKey.callerHasProvider == null\n-                                        && cacheKey.getModule() == provider.getClass().getModule()) {\n-                                    cacheKey.callerHasProvider = Boolean.TRUE;\n-                                }\n-                                ResourceBundle bundle = provider.getBundle(baseName, locale);\n-                                trace(\"provider %s %s locale: %s bundle: %s%n\", provider, baseName, locale, bundle);\n-                                if (bundle != null) {\n-                                    return bundle;\n-                                }\n-                            } catch (ServiceConfigurationError | SecurityException e) {\n-                                if (cacheKey != null) {\n-                                    cacheKey.setCause(e);\n-                                }\n-                            }\n-                        }\n-                        if (cacheKey != null && cacheKey.callerHasProvider == null) {\n-                            cacheKey.callerHasProvider = Boolean.FALSE;\n-                        }\n-                        return null;\n-                    }\n-                });\n-\n+        for (Iterator<ResourceBundleProvider> itr = providers.iterator(); itr.hasNext(); ) {\n+            try {\n+                ResourceBundleProvider provider = itr.next();\n+                if (cacheKey != null && cacheKey.callerHasProvider == null\n+                        && cacheKey.getModule() == provider.getClass().getModule()) {\n+                    cacheKey.callerHasProvider = Boolean.TRUE;\n+                }\n+                ResourceBundle bundle = provider.getBundle(baseName, locale);\n+                trace(\"provider %s %s locale: %s bundle: %s%n\", provider, baseName, locale, bundle);\n+                if (bundle != null) {\n+                    return bundle;\n+                }\n+            } catch (ServiceConfigurationError e) {\n+                if (cacheKey != null) {\n+                    cacheKey.setCause(e);\n+                }\n+            }\n+        }\n+        if (cacheKey != null && cacheKey.callerHasProvider == null) {\n+            cacheKey.callerHasProvider = Boolean.FALSE;\n+        }\n+        return null;\n@@ -3156,1 +3122,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -3180,7 +3145,1 @@\n-                            Constructor<ResourceBundle> ctor = AccessController.doPrivileged(\n-                                new PrivilegedExceptionAction<>() {\n-                                    @Override\n-                                    public Constructor<ResourceBundle> run() throws NoSuchMethodException {\n-                                        return bundleClass.getDeclaredConstructor();\n-                                    }\n-                                });\n+                            Constructor<ResourceBundle> ctor = bundleClass.getDeclaredConstructor();\n@@ -3193,2 +3152,1 @@\n-                            PrivilegedAction<Void> pa1 = () -> { ctor.setAccessible(true); return null; };\n-                            AccessController.doPrivileged(pa1);\n+                            ctor.setAccessible(true);\n@@ -3198,2 +3156,1 @@\n-                        } catch (PrivilegedActionException e) {\n-                            assert e.getCause() instanceof NoSuchMethodException;\n+                        } catch (NoSuchMethodException e) {\n@@ -3201,1 +3158,1 @@\n-                                \"does not exist in \" + bundleClass.getName());\n+                                    \"does not exist in \" + bundleClass.getName());\n@@ -3215,20 +3172,8 @@\n-                final boolean reloadFlag = reload;\n-                InputStream stream = null;\n-                try {\n-                    stream = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<>() {\n-                            public InputStream run() throws IOException {\n-                                URL url = loader.getResource(resourceName);\n-                                if (url == null) return null;\n-\n-                                URLConnection connection = url.openConnection();\n-                                if (reloadFlag) {\n-                                    \/\/ Disable caches to get fresh data for\n-                                    \/\/ reloading.\n-                                    connection.setUseCaches(false);\n-                                }\n-                                return connection.getInputStream();\n-                            }\n-                        });\n-                } catch (PrivilegedActionException e) {\n-                    throw (IOException) e.getCause();\n+                URL url = loader.getResource(resourceName);\n+                if (url == null) return null;\n+\n+                URLConnection connection = url.openConnection();\n+                if (reload) {\n+                    \/\/ Disable caches to get fresh data for\n+                    \/\/ reloading.\n+                    connection.setUseCaches(false);\n@@ -3236,0 +3181,1 @@\n+                InputStream stream = connection.getInputStream();\n@@ -3566,1 +3512,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -3576,2 +3521,1 @@\n-                PrivilegedAction<Void> pa = () -> { ctor.setAccessible(true); return null;};\n-                AccessController.doPrivileged(pa);\n+                ctor.setAccessible(true);\n@@ -3605,3 +3549,1 @@\n-                PrivilegedAction<Class<?>> pa = () -> Class.forName(module, bundleName);\n-                @SuppressWarnings(\"removal\")\n-                Class<?> c = AccessController.doPrivileged(pa, null, GET_CLASSLOADER_PERMISSION);\n+                Class<?> c = Class.forName(module, bundleName);\n@@ -3665,39 +3607,18 @@\n-            PrivilegedAction<InputStream> pa = () -> {\n-                try {\n-                    String resourceName = Control.INSTANCE\n-                        .toResourceName0(bundleName, \"properties\");\n-                    if (resourceName == null) {\n-                        return null;\n-                    }\n-                    trace(\"local in %s %s caller %s%n\", module, resourceName, callerModule);\n-\n-                    \/\/ if the package is in the given module but not opened\n-                    \/\/ locate it from the given module first.\n-                    String pn = toPackageName(bundleName);\n-                    trace(\"   %s\/%s is accessible to %s : %s%n\",\n-                            module.getName(), pn, callerModule,\n-                            isAccessible(callerModule, module, pn));\n-                    if (isAccessible(callerModule, module, pn)) {\n-                        InputStream in = module.getResourceAsStream(resourceName);\n-                        if (in != null) {\n-                            return in;\n-                        }\n-                    }\n-\n-                    ClassLoader loader = module.getClassLoader();\n-                    trace(\"loader for %s %s caller %s%n\", module, resourceName, callerModule);\n-\n-                    try {\n-                        if (loader != null) {\n-                            return loader.getResourceAsStream(resourceName);\n-                        } else {\n-                            URL url = BootLoader.findResource(resourceName);\n-                            if (url != null) {\n-                                return url.openStream();\n-                            }\n-                        }\n-                    } catch (Exception e) {}\n-                    return null;\n-\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n+            String resourceName = Control.INSTANCE\n+                .toResourceName0(bundleName, \"properties\");\n+            if (resourceName == null) {\n+                return null;\n+            }\n+            trace(\"local in %s %s caller %s%n\", module, resourceName, callerModule);\n+\n+\n+            \/\/ if the package is in the given module but not opened\n+            \/\/ locate it from the given module first.\n+            String pn = toPackageName(bundleName);\n+            trace(\"   %s\/%s is accessible to %s : %s%n\",\n+                    module.getName(), pn, callerModule,\n+                    isAccessible(callerModule, module, pn));\n+            if (isAccessible(callerModule, module, pn)) {\n+                InputStream in = module.getResourceAsStream(resourceName);\n+                if (in != null) {\n+                    return new PropertyResourceBundle(in);\n@@ -3705,1 +3626,3 @@\n-            };\n+            }\n+            ClassLoader loader = module.getClassLoader();\n+            trace(\"loader for %s %s caller %s%n\", module, resourceName, callerModule);\n@@ -3707,1 +3630,10 @@\n-            try (@SuppressWarnings(\"removal\") InputStream stream = AccessController.doPrivileged(pa)) {\n+            try {\n+                InputStream stream = null;\n+                if (loader != null) {\n+                    stream = loader.getResourceAsStream(resourceName);\n+                } else {\n+                    URL url = BootLoader.findResource(resourceName);\n+                    if (url != null) {\n+                        stream = url.openStream();\n+                    }\n+                }\n@@ -3713,2 +3645,2 @@\n-            } catch (UncheckedIOException e) {\n-                throw e.getCause();\n+            } catch (Exception e) {\n+                return null;\n@@ -3725,2 +3657,2 @@\n-    private static final boolean TRACE_ON = Boolean.parseBoolean(\n-        GetPropertyAction.privilegedGetProperty(\"resource.bundle.debug\", \"false\"));\n+    private static final boolean TRACE_ON = Boolean.getBoolean(\n+        System.getProperty(\"resource.bundle.debug\", \"false\"));\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":86,"deletions":154,"binary":false,"changes":240,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -686,1 +685,1 @@\n-        Properties props = GetPropertyAction.privilegedGetProperties();\n+        Properties props = System.getProperties();\n@@ -732,6 +731,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new PropertyPermission\n-                               (\"user.timezone\", \"write\"));\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -52,3 +49,1 @@\n-    @SuppressWarnings(\"removal\")\n-    static final boolean ENABLED = AccessController.doPrivileged(\n-            (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(TRIPWIRE_PROPERTY));\n+    static final boolean ENABLED = Boolean.getBoolean(TRIPWIRE_PROPERTY);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Tripwire.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -40,1 +38,0 @@\n-import static sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION;\n@@ -81,1 +78,1 @@\n- *\n+ * <p>\n@@ -85,1 +82,1 @@\n- *      Resource Bundles and Named Modules<\/a>\n+ * Resource Bundles and Named Modules<\/a>\n@@ -225,5 +222,2 @@\n-    private static ResourceBundle loadResourceBundle(Module module, String bundleName)\n-    {\n-        PrivilegedAction<Class<?>> pa = () -> Class.forName(module, bundleName);\n-        @SuppressWarnings(\"removal\")\n-        Class<?> c = AccessController.doPrivileged(pa, null, GET_CLASSLOADER_PERMISSION);\n+    private static ResourceBundle loadResourceBundle(Module module, String bundleName) {\n+        Class<?> c = Class.forName(module, bundleName);\n@@ -244,2 +238,1 @@\n-        throws IOException\n-    {\n+            throws IOException {\n@@ -251,15 +244,5 @@\n-        PrivilegedAction<InputStream> pa = () -> {\n-            try {\n-                return module.getResourceAsStream(resourceName);\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n-        };\n-        try (@SuppressWarnings(\"removal\") InputStream stream = AccessController.doPrivileged(pa)) {\n-            if (stream != null) {\n-                return new PropertyResourceBundle(stream);\n-            } else {\n-                return null;\n-            }\n-        } catch (UncheckedIOException e) {\n-            throw e.getCause();\n+        InputStream stream = module.getResourceAsStream(resourceName);\n+        if (stream != null) {\n+            return new PropertyResourceBundle(stream);\n+        } else {\n+            return null;\n","filename":"src\/java.base\/share\/classes\/java\/util\/spi\/AbstractResourceBundleProvider.java","additions":11,"deletions":28,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -225,10 +225,0 @@\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"localeServiceProvider\"));\n-        }\n-        return null;\n-    }\n-    private LocaleServiceProvider(Void ignore) { }\n-\n@@ -238,3 +228,1 @@\n-    protected LocaleServiceProvider() {\n-        this(checkPermission());\n-    }\n+    protected LocaleServiceProvider() {}\n","filename":"src\/java.base\/share\/classes\/java\/util\/spi\/LocaleServiceProvider.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -181,1 +179,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -185,8 +182,6 @@\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<Optional<ToolProvider>>) () -> {\n-                ServiceLoader<ToolProvider> sl =\n-                    ServiceLoader.load(ToolProvider.class, systemClassLoader);\n-                return StreamSupport.stream(sl.spliterator(), false)\n-                    .filter(p -> p.name().equals(name))\n-                    .findFirst();\n-            });\n+\n+        ServiceLoader<ToolProvider> sl =\n+            ServiceLoader.load(ToolProvider.class, systemClassLoader);\n+        return StreamSupport.stream(sl.spliterator(), false)\n+            .filter(p -> p.name().equals(name))\n+            .findFirst();\n@@ -195,1 +190,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/spi\/ToolProvider.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -52,3 +49,1 @@\n-    @SuppressWarnings(\"removal\")\n-    static final boolean ENABLED = AccessController.doPrivileged(\n-            (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(TRIPWIRE_PROPERTY));\n+    static final boolean ENABLED = Boolean.getBoolean(TRIPWIRE_PROPERTY);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Tripwire.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"}]}