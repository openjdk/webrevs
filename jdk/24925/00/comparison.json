{"files":[{"patch":"@@ -153,1 +153,1 @@\n-    private transient int count;\n+    private transient volatile int count;\n@@ -210,1 +210,1 @@\n-    private boolean linkFirst(Node<E> node) {\n+    private void linkFirst(Node<E> node) {\n@@ -212,2 +212,1 @@\n-        if (count >= capacity)\n-            return false;\n+        \/\/ assert count < capacity\n@@ -223,1 +222,0 @@\n-        return true;\n@@ -229,1 +227,1 @@\n-    private boolean linkLast(Node<E> node) {\n+    private void linkLast(Node<E> node) {\n@@ -231,2 +229,1 @@\n-        if (count >= capacity)\n-            return false;\n+        \/\/ assert count < capacity\n@@ -242,1 +239,0 @@\n-        return true;\n@@ -337,0 +333,2 @@\n+        if (count >= capacity)\n+            return false;\n@@ -341,1 +339,4 @@\n-            return linkFirst(node);\n+            if (count >= capacity)\n+                return false;\n+            linkFirst(node);\n+            return true;\n@@ -352,0 +353,2 @@\n+        if (count >= capacity)\n+            return false;\n@@ -356,1 +359,4 @@\n-            return linkLast(node);\n+            if (count >= capacity)\n+                return false;\n+            linkLast(node);\n+            return true;\n@@ -370,1 +376,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n@@ -372,1 +378,1 @@\n-            while (!linkFirst(node))\n+            while (count >= capacity)\n@@ -374,0 +380,1 @@\n+            linkFirst(node);\n@@ -387,1 +394,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n@@ -389,1 +396,1 @@\n-            while (!linkLast(node))\n+            while (count >= capacity)\n@@ -391,0 +398,1 @@\n+            linkLast(node);\n@@ -408,1 +416,1 @@\n-            while (!linkFirst(node)) {\n+            while (count >= capacity) {\n@@ -413,0 +421,1 @@\n+            linkFirst(node);\n@@ -431,1 +440,1 @@\n-            while (!linkLast(node)) {\n+            while (count >= capacity) {\n@@ -436,0 +445,1 @@\n+            linkLast(node);\n@@ -461,0 +471,1 @@\n+        if (count == 0) return null;\n@@ -471,0 +482,1 @@\n+        if (count == 0) return null;\n@@ -482,1 +494,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n@@ -495,1 +507,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n@@ -561,0 +573,1 @@\n+        if (count == 0) return null;\n@@ -571,0 +584,1 @@\n+        if (count == 0) return null;\n@@ -721,7 +735,1 @@\n-        final ReentrantLock lock = this.lock;\n-        lock.lock();\n-        try {\n-            return capacity - count;\n-        } finally {\n-            lock.unlock();\n-        }\n+        return capacity - count;\n@@ -809,7 +817,1 @@\n-        final ReentrantLock lock = this.lock;\n-        lock.lock();\n-        try {\n-            return count;\n-        } finally {\n-            lock.unlock();\n-        }\n+        return count;\n@@ -861,1 +863,1 @@\n-        int n = 0;\n+        long n = 0;\n@@ -888,1 +890,1 @@\n-                count += n;\n+                count = (int) (count + n);\n@@ -897,0 +899,1 @@\n+        beg = end = null; \/\/ help GC\n@@ -997,2 +1000,2 @@\n-                f.prev = null;\n-                f.next = null;\n+                f.prev = f;\n+                f.next = f;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/LinkedBlockingDeque.java","additions":40,"deletions":37,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.concurrent.ExecutionException;\n@@ -48,0 +49,1 @@\n+import java.util.concurrent.Future;\n@@ -1889,0 +1891,74 @@\n+    public void testInterruptedExceptionThrownInBlockingMethods() throws InterruptedException {\n+        \/\/ Ensure that putFirst(), putLast(), takeFirst(), and takeLast()\n+        \/\/ immediately throw an InterruptedException if the thread is\n+        \/\/ interrupted, to be consistent with other blocking queues such as\n+        \/\/ ArrayBlockingQueue and LinkedBlockingQueue\n+        try (var pool = Executors.newSingleThreadExecutor()) {\n+            Future<Void> success = pool.submit(() -> {\n+                var queue = new LinkedBlockingDeque<>();\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.putFirst(42);\n+                    fail(\"Expected InterruptedException in putFirst()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.putLast(42);\n+                    fail(\"Expected InterruptedException in putLast()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+\n+                queue.add(42);\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.takeFirst();\n+                    fail(\"Expected InterruptedException in takeFirst()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+\n+                queue.add(42);\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.takeLast();\n+                    fail(\"Expected InterruptedException in takeLast()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+                return null;\n+            });\n+            try {\n+                success.get();\n+            } catch (ExecutionException e) {\n+                try {\n+                    throw e.getCause();\n+                } catch (Error | RuntimeException unchecked) {\n+                    throw unchecked;\n+                } catch (Throwable cause) {\n+                    throw new AssertionError(cause);\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testWeaklyConsistentIterationWithClear() {\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<>(3);\n+        q.add(one);\n+        q.add(two);\n+        q.add(three);\n+        final Iterator<Item> it = q.iterator();\n+        mustEqual(one, it.next());\n+        q.clear();\n+        q.add(four);\n+        q.add(five);\n+        q.add(six);\n+        mustEqual(two, it.next());\n+        mustEqual(four, it.next());\n+        mustEqual(five, it.next());\n+        mustEqual(six, it.next());\n+        mustEqual(3, q.size());\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedBlockingDequeTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"modified"}]}