{"files":[{"patch":"@@ -114,1 +114,0 @@\n-runtime\/os\/TestTransparentHugePageUsage.java 8324776 linux-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) Ampere Computing and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test TestTransparentHugePageUsage\n- * @bug 8315923\n- * @library \/test\/lib\n- * @requires vm.gc.Serial & os.family == \"linux\" & os.maxMemory > 2G\n- * @summary Check that a pretouched java heap appears to use THPs by checking\n- *          AnonHugePages in smaps\n- * @comment Use SerialGC to increase the time window for pretouching\n- * @run driver runtime.os.TestTransparentHugePageUsage\n- *\/\n-\n-package runtime.os;\n-\n-import java.io.BufferedReader;\n-import java.io.FileReader;\n-import java.io.InputStreamReader;\n-import java.util.AbstractMap.SimpleEntry;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Optional;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestTransparentHugePageUsage {\n-  private static final String[] fixedCmdLine = {\n-    \"-XX:+UseTransparentHugePages\", \"-XX:+AlwaysPreTouch\",\n-    \"-Xlog:startuptime,pagesize,gc+heap=debug\",\n-    \"-XX:+UseSerialGC\", \"-Xms1G\", \"-Xmx1G\",\n-  };\n-\n-  public static void main(String[] args) throws Exception {\n-    ArrayList<String> cmdLine = new ArrayList<>(Arrays.asList(fixedCmdLine));\n-    cmdLine.add(\"runtime.os.TestTransparentHugePageUsage$CatSmaps\");\n-    ProcessBuilder builder = ProcessTools.createTestJavaProcessBuilder(cmdLine);\n-    checkUsage(new BufferedReader(new InputStreamReader(builder.start().getInputStream())));\n-  }\n-\n-  private static void checkUsage(BufferedReader reader) throws Exception {\n-    final Pattern useThp = Pattern.compile(\".*\\\\[info\\\\]\\\\[pagesize\\\\].+UseTransparentHugePages=1.*\");\n-    \/\/ Ensure THP is not disabled by OS.\n-    if (reader.lines().filter(line -> useThp.matcher(line).matches()).findFirst().isPresent()) {\n-      final Pattern heapAddr = Pattern.compile(\".*\\\\sHeap:\\\\s.+base=0x0*(\\\\p{XDigit}+).*\");\n-      final Optional<Long> addr = reader.lines()\n-          .map(line -> new SimpleEntry<String, Matcher>(line, heapAddr.matcher(line)))\n-          .filter(e -> e.getValue().matches())\n-          .findFirst()\n-          .map(e -> Long.valueOf(e.getKey().substring(e.getValue().start(1), e.getValue().end(1)), 16));\n-      if (!addr.isPresent()) throw new RuntimeException(\"Heap base was not found in smaps.\");\n-      \/\/ Match the start of a mapping, for example:\n-      \/\/ 200000000-800000000 rw-p 00000000 00:00 0\n-      final Pattern mapping = Pattern.compile(\"^(\\\\p{XDigit}+)-\\\\p{XDigit}+.*\");\n-      reader.lines()\n-            .filter(line -> {\n-                  Matcher matcher = mapping.matcher(line);\n-                  if (matcher.matches()) {\n-                    Long mappingAddr = Long.valueOf(line.substring(matcher.start(1), matcher.end(1)), 16);\n-                    if (mappingAddr.equals(addr.get())) return true;\n-                  }\n-                  return false;\n-                })\n-            .findFirst();\n-      final Pattern thpUsage = Pattern.compile(\"^AnonHugePages:\\\\s+(\\\\d+)\\\\skB\");\n-      final Optional<Long> usage = reader.lines()\n-          .map(line -> new SimpleEntry<String, Matcher>(line, thpUsage.matcher(line)))\n-          .filter(e -> e.getValue().matches())\n-          .findFirst()\n-          .map(e -> Long.valueOf(e.getKey().substring(e.getValue().start(1), e.getValue().end(1))));\n-      if (!usage.isPresent()) throw new RuntimeException(\"The usage of THP was not found.\");\n-      \/\/ Even with MADV_POPULATE_WRITE, the usage of THP is still one page less than the whole heap.\n-      if (usage.get() < 524288) throw new RuntimeException(\"The usage of THP is not enough.\");\n-    }\n-  }\n-\n-  public static class CatSmaps {\n-    public static void main(String[] args) throws Exception {\n-      new BufferedReader(new FileReader(\"\/proc\/self\/smaps\"))\n-          .lines()\n-          .forEach(line -> System.out.println(line));\n-    }\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTransparentHugePageUsage.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"}]}