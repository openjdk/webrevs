{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @key randomness\n@@ -34,1 +33,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/testlibrary \/\n@@ -37,0 +36,2 @@\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -40,3 +41,2 @@\n-import java.util.ArrayList;\n-import java.util.LinkedList;\n-import java.util.Random;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -44,0 +44,1 @@\n+import jdk.test.lib.Asserts;\n@@ -46,12 +47,1 @@\n-import jdk.test.lib.Utils;\n-\n-\/\/ An object that has a few references to other instances to slow down marking.\n-class ObjectWithSomeRefs {\n-    public ObjectWithSomeRefs other1;\n-    public ObjectWithSomeRefs other2;\n-    public ObjectWithSomeRefs other3;\n-    public ObjectWithSomeRefs other4;\n-}\n-\n-class TestEagerReclaimHumongousRegionsClearMarkBitsReclaimRegionFast {\n-    public static final long MAX_NANOS_FOR_RUN = 50L * 1_000_000_000L; \/\/ The maximum runtime for the actual test.\n+import jdk.test.whitebox.WhiteBox;\n@@ -59,1 +49,16 @@\n-    public static final int M = 1024*1024;\n+public class TestEagerReclaimHumongousRegionsClearMarkBits {\n+    public static void main(String[] args) throws Exception {\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-Xmx20M\",\n+                                                                    \"-Xms20m\",\n+                                                                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                    \"-XX:+VerifyAfterGC\",\n+                                                                    \"-Xbootclasspath\/a:.\",\n+                                                                    \"-Xlog:gc=debug,gc+humongous=debug\",\n+                                                                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                    \"-XX:+WhiteBoxAPI\",\n+                                                                    TestEagerReclaimHumongousRegionsClearMarkBitsRunner.class.getName());\n+\n+        String log = output.getStdout();\n+        System.out.println(log);\n+        output.shouldHaveExitValue(0);\n@@ -61,1 +66,3 @@\n-    public static LinkedList<Object> garbageList = new LinkedList<Object>();\n+        \/\/ Find the log output indicating that the humongous object has been reclaimed, and marked.\n+        Pattern pattern = Pattern.compile(\"Humongous region .* marked 1 .* reclaim candidate 1 type array 1\");\n+        Asserts.assertTrue(pattern.matcher(log).find(), \"Could not find log output matching marked humongous region.\");\n@@ -63,7 +70,2 @@\n-    public static void genGarbage(Object large) {\n-        for (int i = 0; i < 64*1024; i++) {\n-            Object[] garbage = new Object[50];\n-            garbage[0] = large;\n-            garbageList.add(garbage);\n-        }\n-        garbageList.clear();\n+        pattern = Pattern.compile(\"Reclaimed region .*\");\n+        Asserts.assertTrue(pattern.matcher(log).find(), \"Could not find log output reclaiming humongous region\");\n@@ -71,0 +73,1 @@\n+}\n@@ -72,1 +75,3 @@\n-    public static ArrayList<ObjectWithSomeRefs> longList = new ArrayList<ObjectWithSomeRefs>();\n+class TestEagerReclaimHumongousRegionsClearMarkBitsRunner {\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+    private static final int M = 1024 * 1024;\n@@ -75,0 +80,1 @@\n+        WB.fullGC();\n@@ -76,43 +82,1 @@\n-        for (int i = 0; i < 16*1024; i++) {\n-             longList.add(new ObjectWithSomeRefs());\n-        }\n-\n-        Random rnd = Utils.getRandomInstance();\n-        for (int i = 0; i < longList.size(); i++) {\n-             int len = longList.size();\n-             longList.get(i).other1 = longList.get(rnd.nextInt(len));\n-             longList.get(i).other2 = longList.get(rnd.nextInt(len));\n-             longList.get(i).other3 = longList.get(rnd.nextInt(len));\n-             longList.get(i).other4 = longList.get(rnd.nextInt(len));\n-        }\n-\n-        int[] large1 = new int[M];\n-        int[] large2 = null;\n-        int[] large3 = null;\n-        int[] large4 = null;\n-\n-        Object ref_from_stack = large1;\n-\n-        long start_nanos = System.nanoTime();\n-\n-        for (int i = 0; i < 20; i++) {\n-            long current_nanos = System.nanoTime();\n-            if ((current_nanos - start_nanos) > MAX_NANOS_FOR_RUN) {\n-              System.out.println(\"Finishing test because maximum runtime exceeded\");\n-              break;\n-            }\n-            \/\/ A set of large objects that will be reclaimed eagerly - and hopefully marked.\n-            large1 = new int[M - 20];\n-            large2 = new int[M - 20];\n-            large3 = new int[M - 20];\n-            large4 = new int[M - 20];\n-            genGarbage(large1);\n-            \/\/ Make sure that the compiler cannot completely remove\n-            \/\/ the allocation of the large object until here.\n-            System.out.println(large1 + \" \" + large2 + \" \" + large3 + \" \" + large4);\n-        }\n-\n-        \/\/ Keep the reference to the first object alive.\n-        System.out.println(ref_from_stack);\n-    }\n-}\n+        Object largeObj = new int[M]; \/\/ Humongous object.\n@@ -120,16 +84,9 @@\n-public class TestEagerReclaimHumongousRegionsClearMarkBits {\n-    public static void main(String[] args) throws Exception {\n-        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n-            \"-XX:+UseG1GC\",\n-            \"-Xms128M\",\n-            \"-Xmx128M\",\n-            \"-Xmn2M\",\n-            \"-XX:G1HeapRegionSize=1M\",\n-            \"-XX:InitiatingHeapOccupancyPercent=0\", \/\/ Want to have as much as possible mark cycles.\n-            \"-Xlog:gc\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+VerifyAfterGC\",\n-            \"-XX:ConcGCThreads=1\", \/\/ Want to make marking as slow as possible.\n-            \"-XX:+G1VerifyBitmaps\",\n-            TestEagerReclaimHumongousRegionsClearMarkBitsReclaimRegionFast.class.getName());\n-        output.shouldHaveExitValue(0);\n+        WB.concurrentGCAcquireControl();\n+        WB.concurrentGCRunTo(WB.BEFORE_MARKING_COMPLETED);\n+\n+        System.out.println(\"Large object at \" + largeObj);\n+\n+        largeObj = null;\n+        WB.youngGC(); \/\/ Should reclaim marked humongous object.\n+\n+        WB.concurrentGCRunToIdle();\n@@ -138,0 +95,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsClearMarkBits.java","additions":45,"deletions":87,"binary":false,"changes":132,"status":"modified"}]}