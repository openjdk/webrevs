{"files":[{"patch":"@@ -207,0 +207,2 @@\n+        openClipboard(null);\n+\n@@ -208,1 +210,0 @@\n-            openClipboard(null);\n@@ -321,6 +322,1 @@\n-        try {\n-            openClipboard(null);\n-            return getClipboardFormats();\n-        } finally {\n-            closeClipboard();\n-        }\n+        return getClipboardFormats();\n@@ -359,9 +355,1 @@\n-            long[] currentFormats = null;\n-            try {\n-                openClipboard(null);\n-                currentFormats = getClipboardFormats();\n-            } catch (final IllegalStateException ignored) {\n-            } finally {\n-                closeClipboard();\n-            }\n-            this.currentFormats = currentFormats;\n+            this.currentFormats = getClipboardFormats();\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/SunClipboard.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.System.Logger.Level;\n@@ -33,0 +34,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -54,0 +56,2 @@\n+    private final ReentrantLock clipboardLocked = new ReentrantLock();\n+\n@@ -56,0 +60,2 @@\n+        \/\/ Register java side of the clipboard with the native side\n+        registerClipboard();\n@@ -112,5 +118,12 @@\n-    public native void openClipboard(SunClipboard newOwner) throws IllegalStateException;\n-    \/**\n-     * Call the Win32 CloseClipboard function if we have clipboard ownership,\n-     * does nothing if we have not ownership.\n-     *\/\n+    public void openClipboard(SunClipboard newOwner) throws IllegalStateException {\n+        if (!clipboardLocked.tryLock()) {\n+            throw new IllegalStateException(\"Failed to acquire clipboard lock\");\n+        }\n+        try {\n+            openClipboard0(newOwner);\n+        } catch (IllegalStateException ex) {\n+            clipboardLocked.unlock();\n+            throw ex;\n+        }\n+    }\n+\n@@ -118,1 +131,13 @@\n-    public native void closeClipboard();\n+    public void closeClipboard() {\n+        if(clipboardLocked.isLocked()) {\n+            try {\n+                closeClipboard0();\n+            } finally {\n+                clipboardLocked.unlock();\n+            }\n+        }\n+    }\n+\n+    private native void openClipboard0(SunClipboard newOwner) throws IllegalStateException;\n+    private native void closeClipboard0();\n+\n@@ -160,1 +185,0 @@\n-        long[] formats = null;\n@@ -162,6 +186,4 @@\n-            openClipboard(null);\n-            formats = getClipboardFormats();\n-        } catch (IllegalStateException exc) {\n-            \/\/ do nothing to handle the exception, call checkChange(null)\n-        } finally {\n-            closeClipboard();\n+            long[] formats = getClipboardFormats();\n+            checkChange(formats);\n+        } catch (Throwable ex) {\n+            System.getLogger(WClipboard.class.getName()).log(Level.WARNING, \"Failed to process handleContentsChanged\", ex);\n@@ -169,1 +191,0 @@\n-        checkChange(formats);\n@@ -217,0 +238,2 @@\n+\n+    private native void registerClipboard();\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WClipboard.java","additions":37,"deletions":14,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -72,3 +72,2 @@\n-    if (theCurrentClipboard == NULL) {\n-        theCurrentClipboard = env->NewGlobalRef(jclipboard);\n-    }\n+    DASSERT(AwtClipboard::theCurrentClipboard != NULL);\n+    DASSERT(env->IsSameObject(AwtClipboard::theCurrentClipboard, jclipboard));\n@@ -131,1 +130,1 @@\n-Java_sun_awt_windows_WClipboard_openClipboard(JNIEnv *env, jobject self,\n+Java_sun_awt_windows_WClipboard_openClipboard0(JNIEnv *env, jobject self,\n@@ -136,0 +135,2 @@\n+    DASSERT(AwtClipboard::theCurrentClipboard != NULL);\n+    DASSERT(newOwner == NULL || env->IsSameObject(AwtClipboard::theCurrentClipboard, newOwner));\n@@ -145,4 +146,0 @@\n-        if (AwtClipboard::theCurrentClipboard != NULL) {\n-            env->DeleteGlobalRef(AwtClipboard::theCurrentClipboard);\n-        }\n-        AwtClipboard::theCurrentClipboard = env->NewGlobalRef(newOwner);\n@@ -160,1 +157,1 @@\n-Java_sun_awt_windows_WClipboard_closeClipboard(JNIEnv *env, jobject self)\n+Java_sun_awt_windows_WClipboard_closeClipboard0(JNIEnv *env, jobject self)\n@@ -300,1 +297,3 @@\n-    DASSERT(::GetOpenClipboardWindow() == AwtToolkit::GetInstance().GetHWnd());\n+    unsigned int cFormats = 128; \/\/ Allocate enough space to hold all\n+    unsigned int pcFormatsOut = 0;\n+    unsigned int lpuiFormats[128] = { 0 };\n@@ -302,2 +301,3 @@\n-    jsize nFormats = ::CountClipboardFormats();\n-    jlongArray formats = env->NewLongArray(nFormats);\n+    VERIFY(::GetUpdatedClipboardFormats(lpuiFormats, 128, &pcFormatsOut));\n+\n+    jlongArray formats = env->NewLongArray(pcFormatsOut);\n@@ -307,1 +307,1 @@\n-    if (nFormats == 0) {\n+    if (pcFormatsOut == 0) {\n@@ -313,1 +313,0 @@\n-    UINT num = 0;\n@@ -315,2 +314,2 @@\n-    for (jsize i = 0; i < nFormats; i++, lFormats++) {\n-        *lFormats = num = ::EnumClipboardFormats(num);\n+    for (unsigned int i = 0; i < pcFormatsOut; i++, lFormats++) {\n+        *lFormats = lpuiFormats[i];\n@@ -481,0 +480,12 @@\n+\/*\n+ * Class:     sun_awt_windows_WClipboard\n+ * Method:    registerClipboard\n+ * Signature: ()V\n+ *\/\n+JNIEXPORT void JNICALL\n+Java_sun_awt_windows_WClipboard_registerClipboard(JNIEnv *env, jobject self)\n+{\n+    DASSERT(AwtClipboard::theCurrentClipboard == NULL);\n+    AwtClipboard::theCurrentClipboard = env->NewGlobalRef(self);\n+}\n+\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Clipboard.cpp","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"}]}