{"files":[{"patch":"@@ -113,1 +113,2 @@\n-     * we also call EmptyClipboard and take ownership.\n+     * we also call EmptyClipboard and take ownership. If this method call\n+     * succeeds, it must be followed by a call to {@link #closeClipboard()}.\n@@ -130,0 +131,4 @@\n+    \/**\n+     * Call the Win32 CloseClipboard function if we have clipboard ownership,\n+     * does nothing if we have not ownership.\n+     *\/\n@@ -189,1 +194,1 @@\n-            System.getLogger(WClipboard.class.getName()).log(Level.WARNING, \"Failed to process handleContentsChanged\", ex);\n+            System.getLogger(WClipboard.class.getName()).log(Level.DEBUG, \"Failed to process handleContentsChanged\", ex);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WClipboard.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.awt.*;\n+import java.awt.Toolkit;\n@@ -38,2 +38,6 @@\n-        new Thread(new ClipboardLoader()).start();\n-        new Thread(new ClipboardLoader()).start();\n+        Thread clipboardLoader1 = new Thread(new ClipboardLoader());\n+        clipboardLoader1.setDaemon(true);\n+        clipboardLoader1.start();\n+        Thread clipboardLoader2 = new Thread(new ClipboardLoader());\n+        clipboardLoader2.setDaemon(true);\n+        clipboardLoader2.start();\n@@ -51,0 +55,4 @@\n+        \/\/ Test is considered successful if the concurrent repeated reading\n+        \/\/ from clipboard succeeds for the allotted time and the JVM does not\n+        \/\/ crash.\n+        System.out.println(\"Shutdown normally\");\n","filename":"test\/jdk\/java\/awt\/Clipboard\/ConcurrentClipboardAccessTest.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}