{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import sun.util.logging.PlatformLogger;\n@@ -599,0 +600,5 @@\n+        if (ZoneId.SHORT_IDS.containsKey(ID)) {\n+            PlatformLogger.getLogger(TimeZone.class.getName())\n+                .warning(\"Use of the three-letter time zone ID \\\"%s\\\" is deprecated and it will be removed in a future release\"\n+                    .formatted(ID));\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,2 @@\n-import java.util.TimeZone;\n+\n+import sun.util.calendar.ZoneInfo;\n@@ -96,1 +97,1 @@\n-                                       TimeZone.getTimeZone(id).toZoneId().getRules().isFixedOffset());\n+                                       ZoneInfo.getTimeZone(id).toZoneId().getRules().isFixedOffset());\n@@ -134,1 +135,1 @@\n-        boolean noDST = TimeZone.getTimeZone(names[0]).toZoneId().getRules().isFixedOffset();\n+        boolean noDST = ZoneInfo.getTimeZone(names[0]).toZoneId().getRules().isFixedOffset();\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRTimeZoneNameProviderImpl.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8342550\n+ * @summary Three-letter time zone IDs should output a deprecated warning\n+ *          message.\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.ProcessTools\n+ * @run main ThreeLetterZoneID\n+ *\/\n+import java.util.TimeZone;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ThreeLetterZoneID {\n+    public static void main(String... args) throws Exception {\n+        if (args.length > 0) {\n+            TimeZone.getTimeZone(\"PST\");\n+        } else {\n+            checkWarningMessage();\n+        }\n+    }\n+\n+    public static void checkWarningMessage() throws Exception {\n+        ProcessTools.executeTestJava(\"ThreeLetterZoneID\", \"dummy\")\n+            .shouldContain(\"Use of the three-letter time zone ID \\\"PST\\\" is deprecated and it will be removed in a future release\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/TimeZone\/ThreeLetterZoneID.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}