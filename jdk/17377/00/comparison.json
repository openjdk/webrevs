{"files":[{"patch":"@@ -1041,2 +1041,3 @@\n-        if ((publicId != null || literalSystemId != null) &&\n-                staxInputSource == null && (fUseCatalog && fCatalogFile != null)) {\n+        if (staxInputSource == null\n+                && (publicId != null || literalSystemId != null)\n+                && (fUseCatalog && fCatalogFile != null)) {\n@@ -1052,2 +1053,3 @@\n-        if ((publicId != null || literalSystemId != null) &&\n-                staxInputSource == null && JdkXmlUtils.isResolveContinue(fCatalogFeatures)) {\n+        if (staxInputSource == null\n+                && (publicId != null || literalSystemId != null)\n+                && JdkXmlUtils.isResolveContinue(fCatalogFeatures)) {\n@@ -1064,3 +1066,3 @@\n-        } else if ((publicId == null && literalSystemId == null) ||\n-                (JdkXmlUtils.isResolveContinue(fCatalogFeatures) &&\n-                fSecurityManager.is(Limit.JDKCATALOG_RESOLVE, JdkConstants.CONTINUE))) {\n+        } else if ((publicId == null && literalSystemId == null)\n+                || (JdkXmlUtils.isResolveContinue(fCatalogFeatures)\n+                && fSecurityManager.is(Limit.JDKCATALOG_RESOLVE, JdkConstants.CONTINUE))) {\n@@ -1209,2 +1211,3 @@\n-        if ((publicId != null || literalSystemId != null || resourceIdentifier.getNamespace() !=null)\n-                && xmlInputSource == null && (fUseCatalog && fCatalogFile != null)) {\n+        if (xmlInputSource == null\n+                && (publicId != null || literalSystemId != null || resourceIdentifier.getNamespace() !=null)\n+                && (fUseCatalog && fCatalogFile != null)) {\n@@ -1220,2 +1223,3 @@\n-        if ((publicId != null || literalSystemId != null)\n-                && xmlInputSource == null && JdkXmlUtils.isResolveContinue(fCatalogFeatures)) {\n+        if (xmlInputSource == null\n+                && (publicId != null || literalSystemId != null)\n+                && JdkXmlUtils.isResolveContinue(fCatalogFeatures)) {\n@@ -1229,5 +1233,7 @@\n-        \/\/ Note if both publicId and systemId are null, the resolution process continues as usual\n-        if ((publicId == null && literalSystemId == null) ||\n-                ((xmlInputSource == null) && JdkXmlUtils.isResolveContinue(fCatalogFeatures) &&\n-                fSecurityManager.is(Limit.JDKCATALOG_RESOLVE, JdkConstants.CONTINUE))) {\n-            xmlInputSource = new XMLInputSource(publicId, literalSystemId, baseSystemId, false);\n+        if (xmlInputSource == null) {\n+            \/\/ Note if both publicId and systemId are null, the resolution process continues as usual\n+            if ((publicId == null && literalSystemId == null) ||\n+                    (JdkXmlUtils.isResolveContinue(fCatalogFeatures) &&\n+                    fSecurityManager.is(Limit.JDKCATALOG_RESOLVE, JdkConstants.CONTINUE))) {\n+                xmlInputSource = new XMLInputSource(publicId, literalSystemId, baseSystemId, false);\n+            }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityManager.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.catalog;\n+\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSResourceResolver;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.catalog.CatalogFeatures;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+import static javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI;\n+import static javax.xml.catalog.CatalogManager.catalogResolver;\n+import javax.xml.catalog.CatalogResolver;\n+import javax.xml.validation.Validator;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8323571\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng common.catalog.NullIdTest\n+ * @summary Verifies null values are handled properly in the source resolution\n+ * process.\n+ *\/\n+public class NullIdTest {\n+    private static final Map<String, String> SCHEMAS;\n+    \/\/ Source Level JDK 8\n+    static {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"https:\/\/schemas.opentest4j.org\/reporting\/events\/0.1.0\", \"events.xsd\");\n+        map.put(\"https:\/\/schemas.opentest4j.org\/reporting\/core\/0.1.0\", \"core.xsd\");\n+        SCHEMAS = Collections.unmodifiableMap(map);\n+    }\n+\n+    \/*\n+     * Verifies that the source resolution process recognizes the custom InputSource\n+     * correctly even though the public and system IDs are null.\n+    *\/\n+    @Test\n+    public void test() throws Exception {\n+        String xml = \"<events xmlns=\\\"https:\/\/schemas.opentest4j.org\/reporting\/events\/0.1.0\\\"\/>\";\n+        validate(new StreamSource(new StringReader(xml)));\n+        System.out.println(\"Successfully validated\");\n+    }\n+\n+    private static void validate(Source source) throws SAXException, IOException {\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);\n+        Validator validator = schemaFactory.newSchema().newValidator();\n+        validator.setResourceResolver(createResourceResolver());\n+        validator.validate(source);\n+    }\n+\n+    private static LSResourceResolver createResourceResolver() {\n+        return (type, namespaceURI, publicId, systemId, baseURI) -> {\n+            if (namespaceURI != null) {\n+                if (SCHEMAS.containsKey(namespaceURI)) {\n+                    CustomLSInputImpl input = new CustomLSInputImpl();\n+                    input.setPublicId(publicId);\n+                    String schema = SCHEMAS.get(namespaceURI);\n+                    input.setSystemId(requireNonNull(NullIdTest.class.getResource(schema)).toExternalForm());\n+                    input.setBaseURI(baseURI);\n+                    InputStream stream = NullIdTest.class.getResourceAsStream(schema);\n+                    input.setCharacterStream(new InputStreamReader(requireNonNull(stream)));\n+                    return input;\n+                }\n+            }\n+            if (systemId != null) {\n+                CatalogFeatures features = CatalogFeatures.builder()\n+                        .with(CatalogFeatures.Feature.RESOLVE, \"continue\")\n+                        .build();\n+                CatalogResolver catalogResolver = catalogResolver(features);\n+                return catalogResolver.resolveResource(type, namespaceURI, publicId, systemId, baseURI);\n+            }\n+            return null;\n+        };\n+    }\n+\n+    static class CustomLSInputImpl implements LSInput {\n+\n+        private Reader characterStream;\n+        private InputStream byteStream;\n+        private String stringData;\n+        private String systemId;\n+        private String publicId;\n+        private String baseURI;\n+        private String encoding;\n+        private boolean certifiedText;\n+\n+        @Override\n+        public Reader getCharacterStream() {\n+            return characterStream;\n+        }\n+\n+        @Override\n+        public void setCharacterStream(Reader characterStream) {\n+            this.characterStream = characterStream;\n+        }\n+\n+        @Override\n+        public InputStream getByteStream() {\n+            return byteStream;\n+        }\n+\n+        @Override\n+        public void setByteStream(InputStream byteStream) {\n+            this.byteStream = byteStream;\n+        }\n+\n+        @Override\n+        public String getStringData() {\n+            return stringData;\n+        }\n+\n+        @Override\n+        public void setStringData(String stringData) {\n+            this.stringData = stringData;\n+        }\n+\n+        @Override\n+        public String getSystemId() {\n+            return systemId;\n+        }\n+\n+        @Override\n+        public void setSystemId(String systemId) {\n+            this.systemId = systemId;\n+        }\n+\n+        @Override\n+        public String getPublicId() {\n+            return publicId;\n+        }\n+\n+        @Override\n+        public void setPublicId(String publicId) {\n+            this.publicId = publicId;\n+        }\n+\n+        @Override\n+        public String getBaseURI() {\n+            return baseURI;\n+        }\n+\n+        @Override\n+        public void setBaseURI(String baseURI) {\n+            this.baseURI = baseURI;\n+        }\n+\n+        @Override\n+        public String getEncoding() {\n+            return encoding;\n+        }\n+\n+        @Override\n+        public void setEncoding(String encoding) {\n+            this.encoding = encoding;\n+        }\n+\n+        @Override\n+        public boolean getCertifiedText() {\n+            return certifiedText;\n+        }\n+\n+        @Override\n+        public void setCertifiedText(boolean certifiedText) {\n+            this.certifiedText = certifiedText;\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/NullIdTest.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+<xs:schema xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+           xmlns:core=\"https:\/\/schemas.opentest4j.org\/reporting\/core\/0.1.0\"\n+           targetNamespace=\"https:\/\/schemas.opentest4j.org\/reporting\/core\/0.1.0\"\n+           elementFormDefault=\"qualified\">\n+  <xs:element name=\"infrastructure\" type=\"core:Infrastructure\"\/>\n+  <xs:complexType name=\"Infrastructure\">\n+    <xs:sequence>\n+      <xs:element name=\"hostName\" minOccurs=\"0\" type=\"xs:string\"\/>\n+      <xs:element name=\"userName\" minOccurs=\"0\" type=\"xs:string\"\/>\n+      <xs:element name=\"operatingSystem\" minOccurs=\"0\" type=\"xs:string\"\/>\n+      <xs:element name=\"cpuCores\" minOccurs=\"0\" type=\"xs:int\"\/>\n+      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"\/>\n+    <\/xs:sequence>\n+  <\/xs:complexType>\n+  <xs:complexType name=\"TestInfo\">\n+    <xs:sequence>\n+      <xs:element name=\"metadata\" minOccurs=\"0\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"tags\" minOccurs=\"0\">\n+              <xs:complexType>\n+                <xs:sequence>\n+                  <xs:element name=\"tag\" type=\"xs:string\" maxOccurs=\"unbounded\"\/>\n+                <\/xs:sequence>\n+              <\/xs:complexType>\n+            <\/xs:element>\n+            <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"\/>\n+          <\/xs:sequence>\n+        <\/xs:complexType>\n+      <\/xs:element>\n+      <xs:element name=\"sources\" minOccurs=\"0\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"directorySource\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+              <xs:complexType>\n+                <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\"\/>\n+              <\/xs:complexType>\n+            <\/xs:element>\n+            <xs:element name=\"fileSource\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+              <xs:complexType>\n+                <xs:sequence>\n+                  <xs:element name=\"filePosition\" type=\"core:FilePosition\" minOccurs=\"0\"\/>\n+                <\/xs:sequence>\n+                <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\"\/>\n+              <\/xs:complexType>\n+            <\/xs:element>\n+            <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"\/>\n+          <\/xs:sequence>\n+        <\/xs:complexType>\n+      <\/xs:element>\n+      <xs:element name=\"attachments\" minOccurs=\"0\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"data\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+              <xs:complexType>\n+                <xs:sequence>\n+                  <xs:element name=\"entry\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xs:complexType>\n+                      <xs:simpleContent>\n+                        <xs:extension base=\"xs:string\">\n+                          <xs:attribute name=\"key\" type=\"xs:string\" use=\"required\"\/>\n+                        <\/xs:extension>\n+                      <\/xs:simpleContent>\n+                    <\/xs:complexType>\n+                  <\/xs:element>\n+                <\/xs:sequence>\n+                <xs:attribute name=\"time\" type=\"xs:dateTime\" use=\"required\"\/>\n+              <\/xs:complexType>\n+            <\/xs:element>\n+            <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"\/>\n+          <\/xs:sequence>\n+        <\/xs:complexType>\n+      <\/xs:element>\n+      <xs:element name=\"result\" minOccurs=\"0\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"reason\" type=\"xs:string\" minOccurs=\"0\"\/>\n+            <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"\/>\n+          <\/xs:sequence>\n+          <xs:attribute name=\"status\" type=\"core:Status\"\/>\n+        <\/xs:complexType>\n+      <\/xs:element>\n+    <\/xs:sequence>\n+  <\/xs:complexType>\n+  <xs:simpleType name=\"Status\">\n+    <xs:restriction base=\"xs:string\">\n+      <xs:enumeration value=\"SUCCESSFUL\"\/>\n+      <xs:enumeration value=\"SKIPPED\"\/>\n+      <xs:enumeration value=\"ABORTED\"\/>\n+      <xs:enumeration value=\"FAILED\"\/>\n+    <\/xs:restriction>\n+  <\/xs:simpleType>\n+  <xs:complexType name=\"FilePosition\">\n+    <xs:attribute name=\"line\" type=\"xs:int\" use=\"required\"\/>\n+    <xs:attribute name=\"column\" type=\"xs:int\"\/>\n+  <\/xs:complexType>\n+<\/xs:schema>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/core.xsd","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+<xs:schema xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+           xmlns:core=\"https:\/\/schemas.opentest4j.org\/reporting\/core\/0.1.0\"\n+           xmlns:e=\"https:\/\/schemas.opentest4j.org\/reporting\/events\/0.1.0\"\n+           targetNamespace=\"https:\/\/schemas.opentest4j.org\/reporting\/events\/0.1.0\"\n+           elementFormDefault=\"qualified\">\n+  <xs:import schemaLocation=\"core.xsd\" namespace=\"https:\/\/schemas.opentest4j.org\/reporting\/core\/0.1.0\"\/>\n+  <xs:element name=\"events\">\n+    <xs:complexType>\n+      <xs:sequence>\n+        <xs:element ref=\"core:infrastructure\" minOccurs=\"0\"\/>\n+        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n+          <xs:element name=\"started\" type=\"e:Started\"\/>\n+          <xs:element name=\"reported\" type=\"e:Event\"\/>\n+          <xs:element name=\"finished\" type=\"e:Event\"\/>\n+        <\/xs:choice>\n+      <\/xs:sequence>\n+    <\/xs:complexType>\n+  <\/xs:element>\n+  <xs:complexType name=\"Event\">\n+    <xs:complexContent>\n+      <xs:extension base=\"core:TestInfo\">\n+        <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"\/>\n+        <xs:attribute name=\"time\" type=\"xs:dateTime\" use=\"required\"\/>\n+      <\/xs:extension>\n+    <\/xs:complexContent>\n+  <\/xs:complexType>\n+  <xs:complexType name=\"Started\">\n+    <xs:complexContent>\n+      <xs:extension base=\"e:Event\">\n+        <xs:attribute name=\"parentId\" type=\"xs:string\"\/>\n+        <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\"\/>\n+      <\/xs:extension>\n+    <\/xs:complexContent>\n+  <\/xs:complexType>\n+<\/xs:schema>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/events.xsd","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}