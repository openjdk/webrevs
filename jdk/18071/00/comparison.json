{"files":[{"patch":"@@ -97,1 +97,1 @@\n- * @LastModified: Jan 2024\n+ * @LastModified: Feb 2024\n@@ -1121,2 +1121,3 @@\n-    private XMLInputSource resolveEntityOrURI(CatalogResolver cr, String publicId, String systemId, String base) {\n-        XMLInputSource xis = resolveEntity(cr, publicId, systemId, base);\n+    private XMLInputSource resolveEntityOrURI(String catalogName, CatalogResolver cr,\n+            String publicId, String systemId, String base) {\n+        XMLInputSource xis = resolveEntity(catalogName, cr, publicId, systemId, base);\n@@ -1140,1 +1141,2 @@\n-    private XMLInputSource resolveEntity(CatalogResolver cr, String publicId, String systemId, String base) {\n+    private XMLInputSource resolveEntity(String catalogName, CatalogResolver cr,\n+            String publicId, String systemId, String base) {\n@@ -1146,1 +1148,8 @@\n-        } catch (CatalogException e) {}\n+        } catch (CatalogException e) {\n+            \/\/Note: XSDHandler does not set ErrorReporter on EntityManager\n+            if (fErrorReporter != null) {\n+                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"CatalogException\",\n+                    new Object[]{SecuritySupport.sanitizePath(catalogName)},\n+                    XMLErrorReporter.SEVERITY_FATAL_ERROR, e );\n+            }\n+        }\n@@ -1219,1 +1228,1 @@\n-            xmlInputSource = resolveEntityOrURI(fCatalogResolver, pid, literalSystemId, baseSystemId);\n+            xmlInputSource = resolveEntityOrURI(fCatalogFile, fCatalogResolver, pid, literalSystemId, baseSystemId);\n@@ -1228,1 +1237,1 @@\n-            xmlInputSource = resolveEntity(fDefCR, publicId, literalSystemId, baseSystemId);\n+            xmlInputSource = resolveEntity(\"JDKCatalog\", fDefCR, publicId, literalSystemId, baseSystemId);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityManager.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,1 +390,1 @@\n-     * Strip off path from an URI\n+     * Strips off path from a URI or file path.\n@@ -392,1 +392,1 @@\n-     * @param uri an URI with full path\n+     * @param input a URI or file path\n@@ -395,2 +395,2 @@\n-    public static String sanitizePath(String uri) {\n-        if (uri == null) {\n+    public static String sanitizePath(String input) {\n+        if (input == null) {\n@@ -399,1 +399,2 @@\n-        int i = uri.lastIndexOf(\"\/\");\n+        input = input.replace('\\\\', '\/');\n+        int i = input.lastIndexOf('\/');\n@@ -401,1 +402,1 @@\n-            return uri.substring(i+1, uri.length());\n+            return input.substring(i+1, input.length());\n@@ -403,1 +404,1 @@\n-        return \"\";\n+        return input;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sbd.test;\n+\n+import java.io.File;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.xml.sax.SAXParseException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+\/*\n+ * @test\n+ * @bug 8326915\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng\/othervm sbd.test.ExternalRefTest\n+ * @summary Part of the Secure-By-Default (SBD) project. This test verifies issues\n+ * and error message improvements related to external references.\n+ *\/\n+public class ExternalRefTest {\n+    \/**\n+     * @bug 8326915\n+     * Verifies that SAXParseException rather than NPE is thrown when a validating\n+     * parser is restricted from processing external references.\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test\n+    public void testDisallowDTD() throws Exception {\n+        Assert.assertThrows(SAXParseException.class, () -> validateWithParser());\n+    }\n+\n+    private void validateWithParser() throws Exception {\n+            SAXParserFactory spf = SAXParserFactory.newInstance();\n+\n+            spf.setNamespaceAware(true);\n+            spf.setValidating(true);\n+\n+            SAXParser parser = spf.newSAXParser();\n+            parser.setProperty(\"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaLanguage\",\n+                    \"http:\/\/www.w3.org\/2001\/XMLSchema\");\n+\n+            parser.setProperty(\"jdk.xml.jdkcatalog.resolve\", \"strict\");\n+            File xmlFile = new File(getClass().getResource(\"ExternalRefTest.xml\").getPath());\n+\n+            parser.parse(xmlFile, new DefaultHandler());\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sbd\/test\/ExternalRefTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<test:a\n+    xmlns:test=\"test\"\n+    xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+    xsi:schemaLocation=\"test ExternalRefTest.xsd\">\n+<b>1<\/b>\n+<b>2<\/b>\n+<\/test:a>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sbd\/test\/ExternalRefTest.xml","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\"?>\n+\n+<xsd:schema\n+  xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+  xmlns=\"test\"\n+  targetNamespace=\"test\">\n+\n+     <xsd:element name=\"a\" type=\"A\"\/>\n+     <xsd:complexType name=\"A\">\n+          <xsd:sequence>\n+\t       <xsd:element name=\"b\" type=\"xsd:string\" maxOccurs=\"100\"\/>\n+\t  <\/xsd:sequence>\n+     <\/xsd:complexType>\n+\n+<\/xsd:schema>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sbd\/test\/ExternalRefTest.xsd","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"}]}