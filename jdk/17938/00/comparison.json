{"files":[{"patch":"@@ -28,2 +28,2 @@\n-# It contains the SetupNativeCompilation macro, but is supported by helper\n-# macros in the make\/common\/native directory.\n+# It contains the SetupNativeCompilation function, but is supported by helper\n+# functions in the make\/common\/native directory.\n@@ -132,9 +132,4 @@\n-  # When reading this code, note that macros named Setup<Foo> are just setting\n-  # variables, and macros called Create<Foo> are setting up rules to create\n-  # files. Macros starting with any other verb are more complicated, and can do\n-  # all of the above, and also call directly to the shell.\n-\n-  ###\n-  ### Prepare for compilation and linking\n-  ###\n-\n+  # Setup variables for the rest of the function to work with\n+  $$(eval $$(call SetupBasicVariables1,$1))\n+  $$(eval $$(call SetupDebugSymbols,$1))\n+  $$(eval $$(call SetupBasicVariables2,$1))\n@@ -142,0 +137,1 @@\n+  $$(eval $$(call SetupBasicVariables3,$1))\n@@ -143,2 +139,2 @@\n-  # Setup variables for the rest of this macro to work with\n-  $$(eval $$(call SetupBasicVariables,$1))\n+  # Need to make sure TARGET is first on list\n+  $1 := $$($1_TARGET)\n@@ -149,2 +145,4 @@\n-  # Find all source files to compile and determine the output object file names\n-  $$(eval $$(call SetupSourceFiles,$1))\n+  # Figure out all source files to compile\n+  $$(eval $$(call LocateSourceFiles,$1))\n+\n+  # ... and what the output object files will be\n@@ -159,12 +157,0 @@\n-  $$(eval $$(call RemoveSuperfluousOutputFiles,$1))\n-\n-  # Need to make sure TARGET is first on list before starting to create files\n-  $1 := $$($1_TARGET)\n-\n-  # Have make print information about the library when we start compiling\n-  $$(eval $$(call PrintStartInfo,$1))\n-\n-  ###\n-  ### Compile all native source code files\n-  ###\n-\n@@ -174,1 +160,1 @@\n-  # Now call CreateCompiledNativeFile for each source file we are going to compile.\n+  # Now call SetupCompileNativeFile for each source file we are going to compile.\n@@ -176,1 +162,1 @@\n-      $$(eval $$(call CreateCompiledNativeFile,$1_$$(notdir $$(file)),\\\n+      $$(eval $$(call SetupCompileNativeFile,$1_$$(notdir $$(file)),\\\n@@ -182,0 +168,3 @@\n+  # Have make print information about the library when we start compiling\n+  $$(eval $$(call PrintInfo,$1))\n+\n@@ -192,3 +181,4 @@\n-  ###\n-  ### Link the object files into a native output library\/executable\n-  ###\n+  # Prepare for linking\n+  $$(eval $$(call SetupLinkerFlags,$1))\n+\n+  $$(eval $$(call SetupMapfile,$1))\n@@ -199,3 +189,1 @@\n-  # Prepare for linking\n-  $$(eval $$(call SetupLinkerFlags,$1))\n-  $$(eval $$(call SetupLinking,$1))\n+  $$(eval $$(call SetupStrip,$1))\n@@ -215,24 +203,2 @@\n-# Verify that user passed arguments are valid\n-define VerifyArguments\n-  ifneq ($$($1_NAME), $(basename $$($1_NAME)))\n-    $$(error NAME must not contain any directory path in $1)\n-  endif\n-  ifneq ($(findstring $$($1_SUFFIX), $$($1_NAME)), )\n-    $$(error NAME should be specified without suffix: $$($1_SUFFIX) in $1)\n-  endif\n-  ifneq ($(findstring $$($1_PREFIX), $$($1_NAME)), )\n-    $$(error NAME should be specified without prefix: $$($1_PREFIX) in $1)\n-  endif\n-  ifeq ($$($1_OUTPUT_DIR), )\n-    $$(error OUTPUT_DIR is missing in $1)\n-  endif\n-  ifneq ($$($1_MANIFEST), )\n-    ifeq ($$($1_MANIFEST_VERSION), )\n-      $$(error If MANIFEST is provided, then MANIFEST_VERSION is required in $1)\n-    endif\n-  endif\n-endef\n-\n-################################################################################\n-# Setup basic variables\n-define SetupBasicVariables\n+# Setup basic variables, part 1\n+define SetupBasicVariables1\n@@ -251,0 +217,1 @@\n+endef\n@@ -252,0 +219,3 @@\n+################################################################################\n+# Setup basic variables, part 2\n+define SetupBasicVariables2\n@@ -280,0 +250,23 @@\n+endef\n+\n+################################################################################\n+# Verify that user passed arguments are valid\n+define VerifyArguments\n+  ifneq ($$($1_NAME), $(basename $$($1_NAME)))\n+    $$(error NAME must not contain any directory path in $1)\n+  endif\n+  ifneq ($(findstring $$($1_SUFFIX), $$($1_NAME)), )\n+    $$(error NAME should be specified without suffix: $$($1_SUFFIX) in $1)\n+  endif\n+  ifneq ($(findstring $$($1_PREFIX), $$($1_NAME)), )\n+    $$(error NAME should be specified without prefix: $$($1_PREFIX) in $1)\n+  endif\n+  ifeq ($$($1_OUTPUT_DIR), )\n+    $$(error OUTPUT_DIR is missing in $1)\n+  endif\n+  ifneq ($$($1_MANIFEST), )\n+    ifeq ($$($1_MANIFEST_VERSION), )\n+      $$(error If MANIFEST is provided, then MANIFEST_VERSION is required in $1)\n+    endif\n+  endif\n+endef\n@@ -281,0 +274,3 @@\n+################################################################################\n+# Setup basic variables, part 3\n+define SetupBasicVariables3\n@@ -290,0 +286,2 @@\n+  $1_BUILD_INFO := $$($1_OBJECT_DIR)\/_build-info.marker\n+\n@@ -302,1 +300,1 @@\n-define PrintStartInfo\n+define PrintInfo\n@@ -309,2 +307,0 @@\n-  $1_BUILD_INFO := $$($1_OBJECT_DIR)\/_build-info.marker\n-\n","filename":"make\/common\/NativeCompilation.gmk","additions":58,"deletions":62,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -103,2 +103,2 @@\n-CreateCompiledNativeFile = $(NamedParamsMacroTemplate)\n-define CreateCompiledNativeFileBody\n+SetupCompileNativeFile = $(NamedParamsMacroTemplate)\n+define SetupCompileNativeFileBody\n@@ -123,1 +123,1 @@\n-    $$(eval $$(call SetupCompileFileFlags,$1,$$($1_BASE)))\n+    $$(eval $$(call SetupCompileFileFlags,$1))\n@@ -253,1 +253,1 @@\n-        $$(eval $$(call CreateCompiledNativeFile, $1_$$(notdir $$($1_GENERATED_PCH_SRC)), \\\n+        $$(eval $$(call SetupCompileNativeFile, $1_$$(notdir $$($1_GENERATED_PCH_SRC)), \\\n","filename":"make\/common\/native\/CompileFile.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,17 @@\n+################################################################################\n+define SetupDebugSymbols\n+  $$(call SetIfEmpty, $1_COMPILE_WITH_DEBUG_SYMBOLS, $$(COMPILE_WITH_DEBUG_SYMBOLS))\n+\n+  ifeq ($(STATIC_LIBS), true)\n+    # For release builds where debug symbols are configured to be moved to\n+    # separate debuginfo files, disable debug symbols for static libs instead.\n+    # We don't currently support this configuration and we don't want symbol\n+    # information in release builds unless explicitly asked to provide it.\n+    ifeq ($(DEBUG_LEVEL), release)\n+      ifeq ($(COPY_DEBUG_SYMBOLS), true)\n+        $1_COMPILE_WITH_DEBUG_SYMBOLS := false\n+      endif\n+    endif\n+  endif\n+endef\n+\n","filename":"make\/common\/native\/DebugSymbols.gmk","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-# $1 is the prefix of the file to be compiled\n-# $2 is the prefix of the library, i.e. $$($1_BASE)\n@@ -36,2 +34,2 @@\n-    $1_OPT_CFLAGS := $$($2_OPT_CFLAGS)\n-    $1_OPT_CXXFLAGS := $$($2_OPT_CXXFLAGS)\n+    $1_OPT_CFLAGS := $$($$($1_BASE)_OPT_CFLAGS)\n+    $1_OPT_CXXFLAGS := $$($$($1_BASE)_OPT_CXXFLAGS)\n@@ -62,3 +60,3 @@\n-  ifneq ($$($2_PRECOMPILED_HEADER), )\n-    ifeq ($$(filter $$($1_FILENAME), $$($2_PRECOMPILED_HEADER_EXCLUDE)), )\n-      $1_USE_PCH_FLAGS := $$($2_USE_PCH_FLAGS)\n+  ifneq ($$($$($1_BASE)_PRECOMPILED_HEADER), )\n+    ifeq ($$(filter $$($1_FILENAME), $$($$($1_BASE)_PRECOMPILED_HEADER_EXCLUDE)), )\n+      $1_USE_PCH_FLAGS := $$($$($1_BASE)_USE_PCH_FLAGS)\n@@ -70,2 +68,2 @@\n-      $$($2_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$$($1_FILENAME)) \\\n-      $$($2_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)_$$($1_FILENAME)))\n+      $$($$($1_BASE)_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$$($1_FILENAME)) \\\n+      $$($$($1_BASE)_DISABLED_WARNINGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)_$$($1_FILENAME)))\n@@ -74,5 +72,5 @@\n-  $1_BASE_CFLAGS :=  $$($2_CFLAGS) $$($2_EXTRA_CFLAGS) \\\n-      $$($2_SYSROOT_CFLAGS)\n-  $1_BASE_CXXFLAGS := $$($2_CXXFLAGS) $$($2_EXTRA_CXXFLAGS) \\\n-      $$($2_SYSROOT_CFLAGS) $$($1_EXTRA_CXXFLAGS)\n-  $1_BASE_ASFLAGS := $$($2_ASFLAGS) $$($2_EXTRA_ASFLAGS)\n+  $1_BASE_CFLAGS :=  $$($$($1_BASE)_CFLAGS) $$($$($1_BASE)_EXTRA_CFLAGS) \\\n+      $$($$($1_BASE)_SYSROOT_CFLAGS)\n+  $1_BASE_CXXFLAGS := $$($$($1_BASE)_CXXFLAGS) $$($$($1_BASE)_EXTRA_CXXFLAGS) \\\n+      $$($$($1_BASE)_SYSROOT_CFLAGS) $$($1_EXTRA_CXXFLAGS)\n+  $1_BASE_ASFLAGS := $$($$($1_BASE)_ASFLAGS) $$($$($1_BASE)_EXTRA_ASFLAGS)\n@@ -134,14 +132,0 @@\n-  $$(call SetIfEmpty, $1_COMPILE_WITH_DEBUG_SYMBOLS, $$(COMPILE_WITH_DEBUG_SYMBOLS))\n-\n-  ifeq ($(STATIC_LIBS), true)\n-    # For release builds where debug symbols are configured to be moved to\n-    # separate debuginfo files, disable debug symbols for static libs instead.\n-    # We don't currently support this configuration and we don't want symbol\n-    # information in release builds unless explicitly asked to provide it.\n-    ifeq ($(DEBUG_LEVEL), release)\n-      ifeq ($(COPY_DEBUG_SYMBOLS), true)\n-        $1_COMPILE_WITH_DEBUG_SYMBOLS := false\n-      endif\n-    endif\n-  endif\n-\n","filename":"make\/common\/native\/Flags.gmk","additions":12,"deletions":28,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -30,0 +30,24 @@\n+################################################################################\n+# Create exported symbols file for static libraries\n+################################################################################\n+\n+# get the exported symbols from mapfiles and if there\n+# is no mapfile, get them from the archive\n+define GetSymbols\n+  $(RM) $$(@D)\/$$(basename $$(@F)).symbols; \\\n+  if [ ! -z $$($1_MAPFILE) -a -e $$($1_MAPFILE) ]; then \\\n+    $(ECHO) \"Getting symbols from mapfile $$($1_MAPFILE)\"; \\\n+    $(AWK) '\/global:\/','\/local:\/' $$($1_MAPFILE) | \\\n+        $(SED) -e 's\/#.*\/\/;s\/global:\/\/;s\/local:\/\/;s\/\\;\/\/;s\/^[ \t]*\/_\/;\/^_$$$$\/d' | \\\n+        $(EGREP) -v \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" > \\\n+        $$(@D)\/$$(basename $$(@F)).symbols || true; \\\n+    $(NM) $(NMFLAGS) $$($1_TARGET) | $(GREP)  \" T \" | \\\n+        $(EGREP) \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" | \\\n+        $(CUT) -d ' ' -f 3 >>  $$(@D)\/$$(basename $$(@F)).symbols || true;\\\n+  else \\\n+    $(ECHO) \"Getting symbols from nm\"; \\\n+    $(NM) $(NMFLAGS) -m $$($1_TARGET) | $(GREP)  \"__TEXT\" | \\\n+        $(EGREP) -v \"non-external|private extern|__TEXT,__eh_frame\" | \\\n+        $(SED) -e  's\/.* \/\/' > $$(@D)\/$$(basename $$(@F)).symbols; \\\n+  fi\n+endef\n@@ -36,0 +60,8 @@\n+ENTITLEMENTS_DIR := $(TOPDIR)\/make\/data\/macosxsigning\n+ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+  CODESIGN_PLIST_SUFFIX := -debug\n+else\n+  CODESIGN_PLIST_SUFFIX :=\n+endif\n+DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default$(CODESIGN_PLIST_SUFFIX).plist\n+\n@@ -42,1 +74,1 @@\n-define SetupLinking\n+define SetupMapfile\n@@ -50,0 +82,1 @@\n+endef\n@@ -51,0 +84,2 @@\n+################################################################################\n+define SetupStrip\n@@ -62,8 +97,0 @@\n-\n-  ENTITLEMENTS_DIR := $(TOPDIR)\/make\/data\/macosxsigning\n-  ifeq ($(MACOSX_CODESIGN_MODE), debug)\n-    CODESIGN_PLIST_SUFFIX := -debug\n-  else\n-    CODESIGN_PLIST_SUFFIX :=\n-  endif\n-  DEFAULT_ENTITLEMENTS_FILE := $$(ENTITLEMENTS_DIR)\/default$$(CODESIGN_PLIST_SUFFIX).plist\n@@ -75,12 +102,5 @@\n-    $$(eval $$(call CreateStaticLibrary,$1))\n-  else\n-    $$(eval $$(call CreateDynamicLibraryOrExecutable,$1))\n-  endif\n-endef\n-\n-################################################################################\n-define CreateStaticLibrary\n-  # Include partial linking when building the static library with clang on linux.\n-  ifeq ($(call isTargetOs, linux), true)\n-    ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n-      $1_ENABLE_PARTIAL_LINKING := true\n+    # Include partial linking when building the static library with clang on linux.\n+    ifeq ($(call isTargetOs, linux), true)\n+      ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n+        $1_ENABLE_PARTIAL_LINKING := true\n+      endif\n@@ -88,1 +108,0 @@\n-  endif\n@@ -90,7 +109,7 @@\n-  $1_VARDEPS := $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $$($1_LIBS) \\\n-      $$($1_EXTRA_LIBS)\n-  ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-    $1_VARDEPS += $$($1_LD) $$($1_SYSROOT_LDFLAGS)\n-  endif\n-  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n-      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+    $1_VARDEPS := $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $$($1_LIBS) \\\n+        $$($1_EXTRA_LIBS)\n+    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+      $1_VARDEPS += $$($1_LD) $$($1_SYSROOT_LDFLAGS)\n+    endif\n+    $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+        $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n@@ -98,4 +117,5 @@\n-  # Generating a static library, ie object file archive.\n-  ifeq ($(STATIC_BUILD), true)\n-    ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n-      STATIC_MAPFILE_DEP := $$($1_MAPFILE)\n+    # Generating a static library, ie object file archive.\n+    ifeq ($(STATIC_BUILD), true)\n+      ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n+        STATIC_MAPFILE_DEP := $$($1_MAPFILE)\n+      endif\n@@ -103,1 +123,0 @@\n-  endif\n@@ -105,1 +124,1 @@\n-  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE) $$(STATIC_MAPFILE_DEP)\n+    $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE) $$(STATIC_MAPFILE_DEP)\n@@ -107,7 +126,7 @@\n-  $1_AR_OBJ_ARG := $$($1_LD_OBJ_ARG)\n-  # With clang on linux, partial linking is enabled and 'AR' takes the output\n-  # object from the partial linking step.\n-  ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-    $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n-    $1_AR_OBJ_ARG := $$($1_TARGET_RELOCATABLE)\n-  endif\n+    $1_AR_OBJ_ARG := $$($1_LD_OBJ_ARG)\n+    # With clang on linux, partial linking is enabled and 'AR' takes the output\n+    # object from the partial linking step.\n+    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+      $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n+      $1_AR_OBJ_ARG := $$($1_TARGET_RELOCATABLE)\n+    endif\n@@ -115,1 +134,1 @@\n-  $$($1_TARGET): $$($1_TARGET_DEPS)\n+    $$($1_TARGET): $$($1_TARGET_DEPS)\n@@ -131,1 +150,1 @@\n-\t        $$($1_LD_OBJ_ARG))\n+                $$($1_LD_OBJ_ARG))\n@@ -141,18 +160,1 @@\n-            # get the exported symbols from mapfiles and if there\n-            # is no mapfile, get them from the archive\n-\t    $(RM) $$(@D)\/$$(basename $$(@F)).symbols; \\\n-\t    if [ ! -z $$($1_MAPFILE) -a -e $$($1_MAPFILE) ]; then \\\n-\t      $(ECHO) \"Getting symbols from mapfile $$($1_MAPFILE)\"; \\\n-\t      $(AWK) '\/global:\/','\/local:\/' $$($1_MAPFILE) | \\\n-\t\t  $(SED) -e 's\/#.*\/\/;s\/global:\/\/;s\/local:\/\/;s\/\\;\/\/;s\/^[ \t]*\/_\/;\/^_$$$$\/d' | \\\n-\t\t  $(EGREP) -v \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" > \\\n-\t\t  $$(@D)\/$$(basename $$(@F)).symbols || true; \\\n-\t      $(NM) $(NMFLAGS) $$($1_TARGET) | $(GREP)  \" T \" | \\\n-\t\t  $(EGREP) \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" | \\\n-\t\t  $(CUT) -d ' ' -f 3 >>  $$(@D)\/$$(basename $$(@F)).symbols || true;\\\n-\t    else \\\n-\t      $(ECHO) \"Getting symbols from nm\"; \\\n-\t      $(NM) $(NMFLAGS) -m $$($1_TARGET) | $(GREP)  \"__TEXT\" | \\\n-\t\t  $(EGREP) -v \"non-external|private extern|__TEXT,__eh_frame\" | \\\n-\t\t  $(SED) -e  's\/.* \/\/' > $$(@D)\/$$(basename $$(@F)).symbols; \\\n-\t    fi\n+\t    $(GetSymbols)\n@@ -161,14 +163,5 @@\n-endef\n-\n-################################################################################\n-define CreateDynamicLibraryOrExecutable\n-  # A shared dynamic library or an executable binary has been specified\n-  ifeq ($$($1_TYPE), LIBRARY)\n-    # Generating a dynamic library.\n-    $1_EXTRA_LDFLAGS += $$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n-\n-    # Create loadmap on AIX. Helps in diagnosing some problems.\n-    ifneq ($(COMPILER_BINDCMD_FILE_FLAG), )\n-      $1_EXTRA_LDFLAGS += $(COMPILER_BINDCMD_FILE_FLAG)$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).loadmap\n-    endif\n-  endif\n+  else\n+    # A shared dynamic library or an executable binary has been specified\n+    ifeq ($$($1_TYPE), LIBRARY)\n+      # Generating a dynamic library.\n+      $1_EXTRA_LDFLAGS += $$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n@@ -176,3 +169,4 @@\n-  ifeq ($(call isTargetOs, windows), true)\n-    ifeq ($$($1_EMBED_MANIFEST), true)\n-      $1_EXTRA_LDFLAGS += -manifest:embed\n+      # Create loadmap on AIX. Helps in diagnosing some problems.\n+      ifneq ($(COMPILER_BINDCMD_FILE_FLAG), )\n+        $1_EXTRA_LDFLAGS += $(COMPILER_BINDCMD_FILE_FLAG)$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).loadmap\n+      endif\n@@ -181,11 +175,3 @@\n-    $1_IMPORT_LIBRARY := $$($1_OBJECT_DIR)\/$$($1_NAME).lib\n-    $1_EXTRA_LDFLAGS += \"-implib:$$($1_IMPORT_LIBRARY)\"\n-    ifeq ($$($1_TYPE), LIBRARY)\n-      # To properly trigger downstream dependants of the import library, just as\n-      # for debug files, we must have a recipe in the rule. To avoid rerunning\n-      # the recipe every time have it touch the target. If an import library\n-      # file is deleted by something external, explicitly delete the target to\n-      # trigger a rebuild of both.\n-      ifneq ($$(wildcard $$($1_IMPORT_LIBRARY)), $$($1_IMPORT_LIBRARY))\n-        $$(call LogDebug, Deleting $$($1_BASENAME) because import library is missing)\n-        $$(shell $(RM) $$($1_TARGET))\n+    ifeq ($(call isTargetOs, windows), true)\n+      ifeq ($$($1_EMBED_MANIFEST), true)\n+        $1_EXTRA_LDFLAGS += -manifest:embed\n@@ -193,2 +179,0 @@\n-      $$($1_IMPORT_LIBRARY): $$($1_TARGET)\n-\t$(TOUCH) $$@\n@@ -196,1 +180,17 @@\n-      $1 += $$($1_IMPORT_LIBRARY)\n+      $1_IMPORT_LIBRARY := $$($1_OBJECT_DIR)\/$$($1_NAME).lib\n+      $1_EXTRA_LDFLAGS += \"-implib:$$($1_IMPORT_LIBRARY)\"\n+      ifeq ($$($1_TYPE), LIBRARY)\n+        # To properly trigger downstream dependants of the import library, just as\n+        # for debug files, we must have a recipe in the rule. To avoid rerunning\n+        # the recipe every time have it touch the target. If an import library\n+        # file is deleted by something external, explicitly delete the target to\n+        # trigger a rebuild of both.\n+        ifneq ($$(wildcard $$($1_IMPORT_LIBRARY)), $$($1_IMPORT_LIBRARY))\n+          $$(call LogDebug, Deleting $$($1_BASENAME) because import library is missing)\n+          $$(shell $(RM) $$($1_TARGET))\n+        endif\n+        $$($1_IMPORT_LIBRARY): $$($1_TARGET)\n+\t\t$(TOUCH) $$@\n+\n+        $1 += $$($1_IMPORT_LIBRARY)\n+      endif\n@@ -198,1 +198,0 @@\n-  endif\n@@ -200,6 +199,6 @@\n-  $1_VARDEPS := $$($1_LD) $$($1_SYSROOT_LDFLAGS) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) \\\n-      $$($1_LIBS) $$($1_EXTRA_LIBS) $$($1_MT) \\\n-      $$($1_CREATE_DEBUGINFO_CMDS) $$($1_MANIFEST_VERSION) \\\n-      $$($1_STRIP_CMD) $$($1_CREATE_DEBUGLINK_CMDS)\n-  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n-      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+    $1_VARDEPS := $$($1_LD) $$($1_SYSROOT_LDFLAGS) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) \\\n+        $$($1_LIBS) $$($1_EXTRA_LIBS) $$($1_MT) \\\n+        $$($1_CREATE_DEBUGINFO_CMDS) $$($1_MANIFEST_VERSION) \\\n+        $$($1_STRIP_CMD) $$($1_CREATE_DEBUGLINK_CMDS)\n+    $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+        $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n@@ -207,2 +206,2 @@\n-  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_MANIFEST) \\\n-      $$($1_REAL_MAPFILE) $$($1_VARDEPS_FILE)\n+    $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_MANIFEST) \\\n+        $$($1_REAL_MAPFILE) $$($1_VARDEPS_FILE)\n@@ -210,51 +209,53 @@\n-  $$($1_TARGET): $$($1_TARGET_DEPS)\n-        ifneq ($$($1_OBJ_FILE_LIST), )\n-          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n-          else\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n-          endif\n-        endif\n-        # Keep as much as possible on one execution line for best performance\n-        # on Windows\n-\t$$(call LogInfo, Linking $$($1_BASENAME))\n-\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n-        ifeq ($(call isTargetOs, windows), true)\n-\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n-\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n-\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) \\\n-\t      | $(GREP) -v \"^   Creating library .*\\.lib and object .*\\.exp\" || \\\n-\t          test \"$$$$?\" = \"1\" ; \\\n-\t  $$($1_CREATE_DEBUGINFO_CMDS)\n-\t  $$($1_STRIP_CMD)\n-\t  $$($1_CREATE_DEBUGLINK_CMDS)\n-          ifeq ($(call isBuildOsEnv, windows.wsl2), true)\n-\t    $$(CHMOD) +x $$($1_TARGET)\n-          endif\n-        else\n-\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t      $$(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n-\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n-\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n-\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) ; \\\n-\t  $$($1_CREATE_DEBUGINFO_CMDS)\n-\t  $$($1_STRIP_CMD)\n-\t  $$($1_CREATE_DEBUGLINK_CMDS)\n-        endif\n-        ifeq ($(call isTargetOs, windows), true)\n-          ifneq ($$($1_MANIFEST), )\n-\t    $$($1_MT) -nologo -manifest $$($1_MANIFEST) -identity:\"$$($1_NAME).exe, version=$$($1_MANIFEST_VERSION)\" -outputresource:$$@;#1\n-          endif\n-        endif\n-        # On macosx, optionally run codesign on every binary.\n-        # Remove signature explicitly first to avoid warnings if the linker\n-        # added a default adhoc signature.\n-        ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n-\t  $(CODESIGN) --remove-signature $$@\n-\t  $(CODESIGN) -f -s \"$(MACOSX_CODESIGN_IDENTITY)\" --timestamp --options runtime \\\n-\t      --entitlements $$(call GetEntitlementsFile, $$@) $$@\n-        else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n-\t  $(CODESIGN) --remove-signature $$@\n-\t  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@\n-        endif\n+    $$($1_TARGET): $$($1_TARGET_DEPS)\n+                ifneq ($$($1_OBJ_FILE_LIST), )\n+                  ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+                  else\n+\t\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+                  endif\n+                endif\n+                # Keep as much as possible on one execution line for best performance\n+                # on Windows\n+\t\t$$(call LogInfo, Linking $$($1_BASENAME))\n+\t\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n+                ifeq ($(call isTargetOs, windows), true)\n+\n+\t\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n+\t\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n+\t\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) \\\n+\t\t      | $(GREP) -v \"^   Creating library .*\\.lib and object .*\\.exp\" || \\\n+\t\t          test \"$$$$?\" = \"1\" ; \\\n+\t\t  $$($1_CREATE_DEBUGINFO_CMDS)\n+\t\t  $$($1_STRIP_CMD)\n+\t\t  $$($1_CREATE_DEBUGLINK_CMDS)\n+                 ifeq ($(call isBuildOsEnv, windows.wsl2), true)\n+\t\t    $$(CHMOD) +x $$($1_TARGET)\n+                 endif\n+                else\n+\t\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t\t      $$(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n+\t\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n+\t\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) ; \\\n+\t\t  $$($1_CREATE_DEBUGINFO_CMDS)\n+\t\t  $$($1_STRIP_CMD)\n+\t\t  $$($1_CREATE_DEBUGLINK_CMDS)\n+                endif\n+                ifeq ($(call isTargetOs, windows), true)\n+                  ifneq ($$($1_MANIFEST), )\n+\t\t    $$($1_MT) -nologo -manifest $$($1_MANIFEST) -identity:\"$$($1_NAME).exe, version=$$($1_MANIFEST_VERSION)\" -outputresource:$$@;#1\n+                  endif\n+                endif\n+                # On macosx, optionally run codesign on every binary.\n+                # Remove signature explicitly first to avoid warnings if the linker\n+                # added a default adhoc signature.\n+                ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n+\t\t  $(CODESIGN) --remove-signature $$@\n+\t\t  $(CODESIGN) -f -s \"$(MACOSX_CODESIGN_IDENTITY)\" --timestamp --options runtime \\\n+\t\t      --entitlements $$(call GetEntitlementsFile, $$@) $$@\n+                else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+\t\t  $(CODESIGN) --remove-signature $$@\n+\t\t  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@\n+                endif\n+  endif\n","filename":"make\/common\/native\/Link.gmk","additions":154,"deletions":153,"binary":false,"changes":307,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-define SetupSourceFiles\n+define LocateSourceFiles\n@@ -146,0 +146,2 @@\n+  # There can be only a single bin dir root, no need to foreach over the roots.\n+  $1_BINS := $$(wildcard $$($1_OBJECT_DIR)\/*$(OBJ_SUFFIX))\n@@ -147,0 +149,1 @@\n+  # and we have a list of all existing object files: $$($1_BINS)\n@@ -184,0 +187,6 @@\n+  # Are there too many object files on disk? Perhaps because some source file was removed?\n+  $1_SUPERFLOUS_OBJS := $$(sort $$(filter-out $$($1_EXPECTED_OBJS), $$($1_BINS)))\n+  # Clean out the superfluous object files.\n+  ifneq ($$($1_SUPERFLUOUS_OBJS), )\n+    $$(shell $(RM) -f $$($1_SUPERFLUOUS_OBJS))\n+  endif\n@@ -194,11 +203,0 @@\n-################################################################################\n-define RemoveSuperfluousOutputFiles\n-  # Are there too many object files on disk? Perhaps because some source file was removed?\n-  $1_BINS := $$(wildcard $$($1_OBJECT_DIR)\/*$(OBJ_SUFFIX))\n-  $1_SUPERFLOUS_OBJS := $$(sort $$(filter-out $$($1_EXPECTED_OBJS), $$($1_BINS)))\n-  # Clean out the superfluous object files.\n-  ifneq ($$($1_SUPERFLUOUS_OBJS), )\n-    $$(shell $(RM) -f $$($1_SUPERFLUOUS_OBJS))\n-  endif\n-endef\n-\n","filename":"make\/common\/native\/Paths.gmk","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"}]}