{"files":[{"patch":"@@ -561,6 +561,6 @@\n-     * Parses a {@code Number} from the input text. The value returned is the\n-     * {@code limit} corresponding to the {@code format} that is the longest\n-     * substring of the input text. Matching is done in ascending order, when\n-     * multiple {@code formats} match the text equivalently in strength, the\n-     * first matching {@code limit} is returned. If there is no match, {@code\n-     * Double.NaN} is returned.\n+     * Parses a {@code Number} from the input text, the subtype of which is always\n+     * {@code Double}. The value returned is the {@code limit} corresponding\n+     * to the {@code format} that is the longest substring of the input text.\n+     * Matching is done in ascending order, when multiple {@code formats} match\n+     * the text equivalently in strength, the first matching {@code limit} is\n+     * returned. If there is no match, {@code Double.NaN} is returned.\n@@ -571,1 +571,1 @@\n-     * fmt.parse(\"baz\", new ParsePosition(0)); \/\/ returns 2\n+     * fmt.parse(\"baz\", new ParsePosition(0)); \/\/ returns 2.0\n@@ -575,3 +575,0 @@\n-     * @implNote The {@code Number} subtype returned by the JDK reference\n-     * implementation of this method is always {@code Double}.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}