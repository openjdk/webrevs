{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -561,1 +561,17 @@\n-     * Parses a Number from the input text.\n+     * Parses a {@code Number} from the input text. The value returned is the\n+     * {@code limit} corresponding to the {@code format} that is the longest\n+     * substring of the input text. Matching is done in ascending order, when\n+     * multiple {@code formats} match the text equivalently in strength, the\n+     * first matching {@code limit} is returned. If there is no match, {@code\n+     * Double.NaN} is returned.\n+     * <p>\n+     * For example,\n+     * {@snippet lang=java :\n+     * var fmt = new ChoiceFormat(\"0#foo|1#bar|2#baz\");\n+     * fmt.parse(\"baz\", new ParsePosition(0)); \/\/ returns 2\n+     * fmt.parse(\"quux\", new ParsePosition(0)); \/\/ returns NaN\n+     * }\n+     *\n+     * @implNote The {@code Number} subtype returned by the JDK reference\n+     * implementation of this method is always {@code Double}.\n+     *\n@@ -570,1 +586,2 @@\n-     * @return A Number representing the value of the number parsed.\n+     * @return A Number which represents the {@code limit} corresponding to the {@code\n+     * format} parsed.\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}