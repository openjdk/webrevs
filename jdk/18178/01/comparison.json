{"files":[{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 1996, 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.net.www.protocol.http;\n-\n-import java.net.URL;\n-\n-\/**\n- * An interface for all objects that implement HTTP authentication.\n- * See the HTTP spec for details on how this works in general.\n- * A single class or object can implement an arbitrary number of\n- * authentication schemes.\n- *\n- * @author David Brown\n- *\n- * @deprecated -- use java.net.Authenticator instead\n- * @see java.net.Authenticator\n- *\/\n-\/\/\n-\/\/ REMIND:  Unless compatibility with sun.* API's from 1.2 to 2.0 is\n-\/\/ a goal, there's no reason to carry this forward into JDK 2.0.\n-@Deprecated\n-public interface HttpAuthenticator {\n-\n-\n-    \/**\n-     * Indicate whether the specified authentication scheme is\n-     * supported.  In accordance with HTTP specifications, the\n-     * scheme name should be checked in a case-insensitive fashion.\n-     *\/\n-\n-    boolean schemeSupported (String scheme);\n-\n-    \/**\n-     * Returns the String that should be included in the HTTP\n-     * <B>Authorization<\/B> field.  Return null if no info was\n-     * supplied or could be found.\n-     * <P>\n-     * Example:\n-     * <pre>{@code\n-     * --> GET http:\/\/www.authorization-required.com\/ HTTP\/1.0\n-     * <-- HTTP\/1.0 403 Unauthorized\n-     * <-- WWW-Authenticate: Basic realm=\"WallyWorld\"\n-     * call schemeSupported(\"Basic\"); (return true)\n-     * call authString(u, \"Basic\", \"WallyWorld\", null);\n-     *   return \"QWadhgWERghghWERfdfQ==\"\n-     * --> GET http:\/\/www.authorization-required.com\/ HTTP\/1.0\n-     * --> Authorization: Basic QWadhgWERghghWERfdfQ==\n-     * <-- HTTP\/1.0 200 OK}\n-     * <B> YAY!!!<\/B>\n-     * <\/pre>\n-     *\/\n-\n-    public String authString (URL u, String scheme, String realm);\n-\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpAuthenticator.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,7 +338,0 @@\n-    \/* We only have a single static authenticator for now.\n-     * REMIND:  backwards compatibility with JDK 1.1.  Should be\n-     * eliminated for JDK 2.0.\n-     *\/\n-    @Deprecated\n-    private static HttpAuthenticator defaultAuth;\n-\n@@ -948,8 +941,0 @@\n-    \/**\n-     * @deprecated.  Use java.net.Authenticator.setDefault() instead.\n-     *\/\n-    @Deprecated\n-    public static void setDefaultAuthenticator(HttpAuthenticator a) {\n-        defaultAuth = a;\n-    }\n-\n@@ -2527,16 +2512,0 @@\n-            \/\/ For backwards compatibility, we also try defaultAuth\n-            \/\/ REMIND:  Get rid of this for JDK2.0.\n-\n-            if (ret == null && defaultAuth != null\n-                && defaultAuth.schemeSupported(scheme)) {\n-                try {\n-                    @SuppressWarnings(\"deprecation\")\n-                    URL u = new URL(\"http\", host, port, \"\/\");\n-                    String a = defaultAuth.authString(u, scheme, realm);\n-                    if (a != null) {\n-                        ret = new BasicAuthentication (true, host, port, realm, a);\n-                        \/\/ not in cache by default - cache on success\n-                    }\n-                } catch (java.net.MalformedURLException ignored) {\n-                }\n-            }\n@@ -2700,13 +2669,0 @@\n-\n-            \/\/ For backwards compatibility, we also try defaultAuth\n-            \/\/ REMIND:  Get rid of this for JDK2.0.\n-\n-            if (ret == null && defaultAuth != null\n-                && defaultAuth.schemeSupported(scheme)) {\n-                String a = defaultAuth.authString(url, scheme, realm);\n-                if (a != null) {\n-                    ret = new BasicAuthentication (false, url, realm, a);\n-                    \/\/ not in cache by default - cache on success\n-                }\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":1,"deletions":45,"binary":false,"changes":46,"status":"modified"}]}