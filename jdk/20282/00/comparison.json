{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,2 +96,2 @@\n- *   WARNING: No not 'return' or 'goto' out of the BEGIN_CALLBACK\/END_CALLBACK\n- *            block, this will mess up the count.\n+ *   WARNING: Do not 'return' or 'goto' out of the BEGIN_CALLBACK\/END_CALLBACK\n+ *            block. This will mess up the active_callbacks count.\n@@ -1712,0 +1712,12 @@\n+void\n+callback_lock(void)\n+{\n+    debugMonitorEnter(callbackLock);\n+}\n+\n+void\n+callback_unlock(void)\n+{\n+    debugMonitorExit(callbackLock);\n+}\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventHandler.c","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,3 @@\n+void callback_lock(void);\n+void callback_unlock(void);\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventHandler.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -722,1 +722,3 @@\n-    eventHandler_lock(); \/* for proper lock order *\/\n+    callback_lock();     \/* for proper lock order in threadControl getLocks() *\/\n+    eventHandler_lock(); \/* for proper lock order in threadControl getLocks() *\/\n+    stepControl_lock();  \/* for proper lock order in threadControl getLocks() *\/\n@@ -775,1 +777,1 @@\n-     * after writing the respone.\n+     * after writing the response.\n@@ -793,0 +795,1 @@\n+    stepControl_unlock();\n@@ -794,0 +797,1 @@\n+    callback_unlock();\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/invoker.c","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -808,1 +808,2 @@\n-    eventHandler_lock(); \/* for proper lock order *\/\n+    callback_lock();     \/* for proper lock order in threadControl getLocks() *\/\n+    eventHandler_lock(); \/* for proper lock order in threadControl getLocks() *\/\n@@ -855,0 +856,1 @@\n+    callback_unlock();\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/stepControl.c","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -645,0 +645,5 @@\n+     *\n+     * stepControl_beginStep() grabs the eventHandler lock and stepControl lock\n+     * before eventually ending up here, so we need to maintain that order here.\n+     * Similarly, invoker_completeInvokeRequest() grabs the eventHandler lock\n+     * and invoker lock.\n@@ -646,1 +651,1 @@\n-\n+    callback_lock();\n@@ -648,0 +653,1 @@\n+    stepControl_lock();\n@@ -650,2 +656,0 @@\n-    stepControl_lock();\n-    commonRef_lock();\n@@ -653,1 +657,1 @@\n-\n+    commonRef_lock();\n@@ -659,1 +663,0 @@\n-    debugMonitorExit(threadLock);\n@@ -661,1 +664,1 @@\n-    stepControl_unlock();\n+    debugMonitorExit(threadLock);\n@@ -664,0 +667,1 @@\n+    stepControl_unlock();\n@@ -665,0 +669,1 @@\n+    callback_unlock();\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/threadControl.c","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}