{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,6 @@\n+ * To release resources used by the {@code Array} object, applications must call\n+ * either the {@link #free()} or the {@link #close()} method.  Any attempt to\n+ * invoke a method other than {@link #free()} or {@link #close()} after the\n+ * {@code Array} object has been closed, will result in a {@link SQLException}\n+ * being thrown.\n+ * <P>\n@@ -70,1 +76,1 @@\n-public interface Array {\n+public interface Array extends AutoCloseable {\n@@ -348,3 +354,1 @@\n-     * This method frees the {@code Array} object and releases the resources that\n-     * it holds. The object is invalid once the {@code free}\n-     * method is called.\n+     * Closes and releases the resources held by this {@code Array} object.\n@@ -352,4 +356,2 @@\n-     * After {@code free} has been called, any attempt to invoke a\n-     * method other than {@code free} will result in a {@code SQLException}\n-     * being thrown.  If {@code free} is called multiple times, the subsequent\n-     * calls to {@code free} are treated as a no-op.\n+     * If the {@code Array} object is already closed, then invoking this method\n+     * has no effect.\n@@ -362,0 +364,1 @@\n+     * @see #close()\n@@ -365,0 +368,17 @@\n+    \/**\n+     * Closes and releases the resources held by this {@code Array} object.\n+     * <p>\n+     * If the {@code Array} object is already closed, then invoking this method\n+     * has no effect.\n+     *\n+     * @throws SQLException                    if an error occurs releasing\n+     *                                         the Array's resources\n+     * @throws SQLFeatureNotSupportedException if the JDBC driver\n+     *                                         does not support this method\n+     * @implSpec The default implementation calls the {@link #free()} method.\n+     * @see #free()\n+     * @since 26\n+     *\/\n+    default void close() throws SQLException {\n+      free();\n+    };\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Array.java","additions":29,"deletions":9,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * a database table. By default drivers implement {@code Blob} using\n+ * a database table. By default, drivers implement {@code Blob} using\n@@ -53,0 +53,6 @@\n+ * To release resources used by the {@code Blob} object, applications must call\n+ * either the {@link #free()} or the {@link #close()} method.  Any attempt to\n+ * invoke a method other than {@link #free()} or {@link #close()} after the\n+ * {@code Blob} object has been closed, will result in a {@link SQLException}\n+ * being thrown.\n+ * <P>\n@@ -59,1 +65,1 @@\n-public interface Blob {\n+public interface Blob extends AutoCloseable {\n@@ -269,3 +275,1 @@\n-     * This method frees the {@code Blob} object and releases the resources that\n-     * it holds. The object is invalid once the {@code free}\n-     * method is called.\n+     * Closes and releases the resources held by this {@code Blob} object.\n@@ -273,4 +277,2 @@\n-     * After {@code free} has been called, any attempt to invoke a\n-     * method other than {@code free} will result in an {@code SQLException}\n-     * being thrown.  If {@code free} is called multiple times, the subsequent\n-     * calls to {@code free} are treated as a no-op.\n+     * If the {@code Blob} object is already closed, then invoking this method\n+     * has no effect.\n@@ -283,0 +285,1 @@\n+     * @see #close()\n@@ -306,0 +309,19 @@\n+\n+    \/**\n+     * Closes and releases the resources held by this {@code Blob} object.\n+     * <p>\n+     * If the {@code Blob} object is already closed, then invoking this method\n+     * has no effect.\n+     *\n+     * @implSpec The default implementation calls the {@link #free()} method.\n+     *\n+     * @throws SQLException if an error occurs releasing\n+     *         the Blob's resources\n+     * @throws SQLFeatureNotSupportedException if the JDBC driver\n+     *         does not support this method\n+     * @since 26\n+     * @see #free()\n+     *\/\n+    default void close() throws SQLException {\n+      free();\n+    };\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Blob.java","additions":32,"deletions":10,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * By default drivers implement a {@code Clob} object using an SQL\n+ * By default, drivers implement a {@code Clob} object using an SQL\n@@ -52,0 +52,6 @@\n+ * To release resources used by the {@code Clob} object, applications must call\n+ * either the {@link #free()} or the {@link #close()} method.  Any attempt to\n+ * invoke a method other than {@link #free()} or {@link #close()} after the\n+ * {@code Clob} object has been closed, will result in a {@link SQLException}\n+ * being thrown.\n+ * <P>\n@@ -58,1 +64,1 @@\n-public interface Clob {\n+public interface Clob extends AutoCloseable {\n@@ -313,3 +319,1 @@\n-     * This method releases the resources that the {@code Clob} object\n-     * holds.  The object is invalid once the {@code free} method\n-     * is called.\n+     * Closes and releases the resources held by this {@code Clob} object.\n@@ -317,4 +321,2 @@\n-     * After {@code free} has been called, any attempt to invoke a\n-     * method other than {@code free} will result in a {@code SQLException}\n-     * being thrown.  If {@code free} is called multiple times, the subsequent\n-     * calls to {@code free} are treated as a no-op.\n+     * If the {@code Clob} object is already closed, then invoking this method\n+     * has no effect.\n@@ -328,0 +330,1 @@\n+     * @see #close()\n@@ -353,0 +356,17 @@\n+  \/**\n+   * Closes and releases the resources held by this {@code Clob} object.\n+   * <p>\n+   * If the {@code Clob} object is already closed, then invoking this method\n+   * has no effect.\n+   *\n+   * @throws SQLException                    if an error occurs releasing\n+   *                                         the Clob's resources\n+   * @throws SQLFeatureNotSupportedException if the JDBC driver\n+   *                                         does not support this method\n+   * @implSpec The default implementation calls the {@link #free()} method.\n+   * @see #free()\n+   * @since 26\n+   *\/\n+  default void close() throws SQLException {\n+    free();\n+  };\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Clob.java","additions":30,"deletions":10,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.regex.Pattern;\n@@ -46,2 +47,2 @@\n- *   configuration when there is a JDBC method available.  By default a {@code Connection} object is in\n- * auto-commit mode, which means that it automatically commits changes\n+ *  configuration when there is a JDBC method available.  By default, a {@code Connection}\n+ *  object is in auto-commit mode, which means that it automatically commits changes\n@@ -1679,0 +1680,1 @@\n+    \/\/ JDBC 4.5\n@@ -1680,0 +1682,271 @@\n+    \/**\n+     * Returns a {@code String} enclosed in single quotes. Any occurrence of a\n+     * single quote within the string will be replaced by two single quotes.\n+     *\n+     * <blockquote>\n+     * <table class=\"striped\">\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr><th scope=\"col\">Value<\/th><th scope=\"col\">Result<\/th><\/tr>\n+     * <\/thead>\n+     * <tbody style=\"text-align:center\">\n+     * <tr> <th scope=\"row\">Hello<\/th> <td>'Hello'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">G'Day<\/th> <td>'G''Day'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">'G''Day'<\/th>\n+     * <td>'''G''''Day'''<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">I'''M<\/th> <td>'I''''''M'<\/td>\n+     * <\/tr>\n+     *\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     * @implNote\n+     * JDBC driver implementations may need to provide their own implementation\n+     * of this method in order to meet the requirements of the underlying\n+     * datasource.\n+     * @param val a character string\n+     * @return A string enclosed by single quotes with every single quote\n+     * converted to two single quotes\n+     * @throws NullPointerException if val is {@code null}\n+     * @throws SQLException if a database access error occurs\n+     *\n+     * @since 26\n+     *\/\n+    default String enquoteLiteral(String val)  throws SQLException {\n+        return \"'\" + val.replace(\"'\", \"''\") +  \"'\";\n+    }\n+\n+    \/**\n+     * Returns a SQL identifier. If {@code identifier} is a simple SQL identifier:\n+     * <ul>\n+     * <li>Return the original value if {@code alwaysQuote} is\n+     * {@code false}<\/li>\n+     * <li>Return a delimited identifier if {@code alwaysQuote} is\n+     * {@code true}<\/li>\n+     * <\/ul>\n+     *\n+     * If {@code identifier} is not a simple SQL identifier, {@code identifier} will be\n+     * enclosed in double quotes if not already present. If the datasource does\n+     * not support double quotes for delimited identifiers, the\n+     * identifier should be enclosed by the string returned from\n+     * {@link DatabaseMetaData#getIdentifierQuoteString}.  If the datasource\n+     * does not support delimited identifiers, a\n+     * {@code SQLFeatureNotSupportedException} should be thrown.\n+     * <p>\n+     * A {@code SQLException} will be thrown if {@code identifier} contains any\n+     * characters invalid in a delimited identifier or the identifier length is\n+     * invalid for the datasource.\n+     *\n+     * @implSpec\n+     * The default implementation uses the following criteria to\n+     * determine a valid simple SQL identifier:\n+     * <ul>\n+     * <li>The string is not enclosed in double quotes<\/li>\n+     * <li>The first character is an alphabetic character from a through z, or\n+     * from A through Z<\/li>\n+     * <li>The name only contains alphanumeric characters or the character \"_\"<\/li>\n+     * <\/ul>\n+     *\n+     * The default implementation will throw a {@code SQLException} if:\n+     * <ul>\n+     * <li>{@code identifier} contains a {@code null} character or double quote and is not\n+     * a simple SQL identifier.<\/li>\n+     * <li>The length of {@code identifier} is less than 1 or greater than 128 characters\n+     * <\/ul>\n+     * <blockquote>\n+     * <table class=\"striped\" >\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr>\n+     * <th scope=\"col\">identifier<\/th>\n+     * <th scope=\"col\">alwaysQuote<\/th>\n+     * <th scope=\"col\">Result<\/th><\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr>\n+     * <th scope=\"row\">Hello<\/th>\n+     * <td>false<\/td>\n+     * <td>Hello<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">Hello<\/th>\n+     * <td>true<\/td>\n+     * <td>\"Hello\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">G'Day<\/th>\n+     * <td>false<\/td>\n+     * <td>\"G'Day\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Bruce Wayne\"<\/th>\n+     * <td>false<\/td>\n+     * <td>\"Bruce Wayne\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Bruce Wayne\"<\/th>\n+     * <td>true<\/td>\n+     * <td>\"Bruce Wayne\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">GoodDay$<\/th>\n+     * <td>false<\/td>\n+     * <td>\"GoodDay$\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">Hello\"World<\/th>\n+     * <td>false<\/td>\n+     * <td>SQLException<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Hello\"World\"<\/th>\n+     * <td>false<\/td>\n+     * <td>SQLException<\/td>\n+     * <\/tr>\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     * @implNote\n+     * JDBC driver implementations may need to provide their own implementation\n+     * of this method in order to meet the requirements of the underlying\n+     * datasource.\n+     * @param identifier a SQL identifier\n+     * @param alwaysQuote indicates if a simple SQL identifier should be\n+     * returned as a quoted identifier\n+     * @return A simple SQL identifier or a delimited identifier\n+     * @throws SQLException if identifier is not a valid identifier\n+     * @throws SQLFeatureNotSupportedException if the datasource does not support\n+     * delimited identifiers\n+     * @throws NullPointerException if identifier is {@code null}\n+     *\n+     * @since 26\n+     *\/\n+    default String enquoteIdentifier(String identifier, boolean alwaysQuote) throws SQLException {\n+        int len = identifier.length();\n+        if (len < 1 || len > 128) {\n+            throw new SQLException(\"Invalid name\");\n+        }\n+        if (Pattern.compile(\"[\\\\p{Alpha}][\\\\p{Alnum}_]*\").matcher(identifier).matches()) {\n+            return alwaysQuote ?  \"\\\"\" + identifier + \"\\\"\" : identifier;\n+        }\n+        if (identifier.matches(\"^\\\".+\\\"$\")) {\n+            identifier = identifier.substring(1, len - 1);\n+        }\n+        if (Pattern.compile(\"[^\\u0000\\\"]+\").matcher(identifier).matches()) {\n+            return \"\\\"\" + identifier + \"\\\"\";\n+        } else {\n+            throw new SQLException(\"Invalid name\");\n+        }\n+    }\n+\n+    \/**\n+     * Retrieves whether {@code identifier} is a simple SQL identifier.\n+     *\n+     * @implSpec The default implementation uses the following criteria to\n+     * determine a valid simple SQL identifier:\n+     * <ul>\n+     * <li>The string is not enclosed in double quotes<\/li>\n+     * <li>The first character is an alphabetic character from a through z, or\n+     * from A through Z<\/li>\n+     * <li>The string only contains alphanumeric characters or the character\n+     * \"_\"<\/li>\n+     * <li>The string is between 1 and 128 characters in length inclusive<\/li>\n+     * <\/ul>\n+     *\n+     * <blockquote>\n+     * <table class=\"striped\" >\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr>\n+     * <th scope=\"col\">identifier<\/th>\n+     * <th scope=\"col\">Simple Identifier<\/th>\n+     * <\/thead>\n+     *\n+     * <tbody>\n+     * <tr>\n+     * <th scope=\"row\">Hello<\/th>\n+     * <td>true<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">G'Day<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Bruce Wayne\"<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">GoodDay$<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">Hello\"World<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Hello\"World\"<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     * @implNote JDBC driver implementations may need to provide their own\n+     * implementation of this method in order to meet the requirements of the\n+     * underlying datasource.\n+     * @param identifier a SQL identifier\n+     * @return  true if a simple SQL identifier, false otherwise\n+     * @throws NullPointerException if identifier is {@code null}\n+     * @throws SQLException if a database access error occurs\n+     *\n+     * @since 26\n+     *\/\n+    default boolean isSimpleIdentifier(String identifier) throws SQLException {\n+        int len = identifier.length();\n+        return len >= 1 && len <= 128\n+                && Pattern.compile(\"[\\\\p{Alpha}][\\\\p{Alnum}_]*\").matcher(identifier).matches();\n+    }\n+\n+    \/**\n+     * Returns a {@code String} representing a National Character Set Literal\n+     * enclosed in single quotes and prefixed with a upper case letter N.\n+     * Any occurrence of a single quote within the string will be replaced\n+     * by two single quotes.\n+     *\n+     * <blockquote>\n+     * <table class=\"striped\">\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr>\n+     * <th scope=\"col\">Value<\/th>\n+     * <th scope=\"col\">Result<\/th>\n+     * <\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr> <th scope=\"row\">Hello<\/th> <td>N'Hello'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">G'Day<\/th> <td>N'G''Day'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">'G''Day'<\/th>\n+     * <td>N'''G''''Day'''<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">I'''M<\/th> <td>N'I''''''M'<\/td>\n+     * <tr> <th scope=\"row\">N'Hello'<\/th> <td>N'N''Hello'''<\/td> <\/tr>\n+     *\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     * @implNote\n+     * JDBC driver implementations may need to provide their own implementation\n+     * of this method in order to meet the requirements of the underlying\n+     * datasource. An implementation of enquoteNCharLiteral may accept a different\n+     * set of characters than that accepted by the same drivers implementation of\n+     * enquoteLiteral.\n+     * @param val a character string\n+     * @return the result of replacing every single quote character in the\n+     * argument by two single quote characters where this entire result is\n+     * then prefixed with 'N'.\n+     * @throws NullPointerException if val is {@code null}\n+     * @throws SQLException if a database access error occurs\n+     *\n+     * @since 26\n+     *\/\n+    default String enquoteNCharLiteral(String val)  throws SQLException {\n+        return \"N'\" + val.replace(\"'\", \"''\") +  \"'\";\n+    }\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Connection.java","additions":275,"deletions":2,"binary":false,"changes":277,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.Properties;\n+\n@@ -30,4 +32,3 @@\n- * {@code DriverPropertyInfo} class is of interest only to advanced programmers\n- * who need to interact with a Driver via the method\n- * {@code getDriverProperties} to discover\n- * and supply properties for connections.\n+ * {@code DriverPropertyInfo} class is of interest only to advanced programmers.\n+ * The method {@link Driver#getPropertyInfo(String, Properties)} may be used\n+ * to discover Driver properties.\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/DriverPropertyInfo.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -203,1 +203,15 @@\n-    TIMESTAMP_WITH_TIMEZONE(Types.TIMESTAMP_WITH_TIMEZONE);\n+    TIMESTAMP_WITH_TIMEZONE(Types.TIMESTAMP_WITH_TIMEZONE),\n+\n+    \/* JDBC 4.5 Types *\/\n+\n+    \/**\n+     * Identifies the generic SQL type {@code DECFLOAT}.\n+     * @since 26\n+     *\/\n+    DECFLOAT(Types.DECFLOAT),\n+\n+    \/**\n+     * Identifies the generic SQL type {@code JSON}.\n+     * @since 26\n+     *\/\n+    JSON(Types.JSON);\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/JDBCType.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,2 @@\n- * <P>The {@code NClob} interface extends the {@code Clob} interface\n+ * <P>\n+ * The {@code NClob} interface extends the {@code Clob} interface\n@@ -47,0 +48,6 @@\n+ * To release resources used by the {@code NClob} object, applications must call\n+ * either the {@link #free()} or the {@link #close()} method.  Any attempt to\n+ * invoke a method other than {@link #free()} or {@link #close()} after the\n+ * {@code NClob} object has been closed, will result in a {@link SQLException}\n+ * being thrown.\n+ * <P>\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/NClob.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,14 +32,2 @@\n- * A {@code SQLPermission} object contains\n- * a name (also referred to as a \"target name\") but no actions\n- * list; there is either a named permission or there is not.\n- * The target name is the name of the permission. The\n- * naming convention follows the  hierarchical property naming convention.\n- * In addition, an asterisk\n- * may appear at the end of the name, following a \".\", or by itself, to\n- * signify a wildcard match. For example: {@code loadLibrary.*}\n- * and {@code *} signify a wildcard match,\n- * while {@code *loadLibrary} and {@code a*b} do not.\n- *\n- * @apiNote\n- * This permission cannot be used for controlling access to resources\n- * as the Security Manager is no longer supported.\n+ * This class was only useful in conjunction with the {@link java.lang.SecurityManager},\n+ * which is no longer supported. There is no replacement for this class.\n@@ -48,5 +36,0 @@\n- * @see java.security.BasicPermission\n- * @see java.security.Permission\n- * @see java.security.Permissions\n- * @see java.security.PermissionCollection\n- * @see java.lang.SecurityManager\n@@ -54,0 +37,1 @@\n+ * @deprecated There is no replacement for this class.\n@@ -55,1 +39,1 @@\n-\n+@Deprecated(since=\"26\", forRemoval=true)\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/SQLPermission.java","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,1 @@\n- * The state moves from readable to not readable once free() or any of the\n+ * The state moves from readable to not readable once close(), free() or any of the\n@@ -177,1 +177,1 @@\n- * The state moves from writable to not writable once free() or any of the\n+ * The state moves from writable to not writable once close(), free() or any of the\n@@ -180,1 +180,6 @@\n- *\n+ * <p>\n+ * To release resources used by the {@code SQLXML} object, applications must call\n+ * either the {@link #free()} or the {@link #close()} method.  Any attempt to\n+ * invoke a method other than {@link #free()} or {@link #close()} after the\n+ * {@code SQLXML} object has been closed, will result in a {@link SQLException}\n+ * being thrown.\n@@ -191,1 +196,1 @@\n-public interface SQLXML\n+public interface SQLXML extends AutoCloseable\n@@ -194,3 +199,4 @@\n-   * This method closes this object and releases the resources that it held.\n-   * The SQL XML object becomes invalid and neither readable or writable\n-   * when this method is called.\n+   * Closes and releases the resources held by this {@code SQLXML} object.\n+   * <p>\n+   * If the {@code SQLXML} object is already closed, then invoking this method\n+   * has no effect.\n@@ -198,4 +204,0 @@\n-   * After {@code free} has been called, any attempt to invoke a\n-   * method other than {@code free} will result in a {@code SQLException}\n-   * being thrown.  If {@code free} is called multiple times, the subsequent\n-   * calls to {@code free} are treated as a no-op.\n@@ -206,0 +208,1 @@\n+   * @see #close()\n@@ -427,0 +430,17 @@\n+  \/**\n+   * Closes and releases the resources held by this {@code SQLXML} object.\n+   * <p>\n+   * If the {@code SQLXML} object is already closed, then invoking this method\n+   * has no effect.\n+   *\n+   * @throws SQLException                    if an error occurs releasing\n+   *                                         the SQLXML's resources\n+   * @throws SQLFeatureNotSupportedException if the JDBC driver\n+   *                                         does not support this method\n+   * @implSpec The default implementation calls the {@link #free()} method.\n+   * @see #free()\n+   * @since 26\n+   *\/\n+  default void close() throws SQLException {\n+    free();\n+  };\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/SQLXML.java","additions":32,"deletions":12,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -57,4 +57,1 @@\n- * {@code java.util.Date.equals(Object)}\n- * method.  Also, the {@code hashCode} method uses the underlying\n- * {@code java.util.Date}\n- * implementation and therefore does not include nanos in its computation.\n+ * {@code java.util.Date.equals(Object)} method.\n@@ -468,1 +465,7 @@\n-     * {@inheritDoc}\n+     * Returns a hash code value for this Timestamp. The result is the\n+     * exclusive OR of the two halves of the primitive {@code long}\n+     * value returned by the {@link #getTime} method. That is,\n+     * the hash code is the value of the expression:\n+     * {@snippet :\n+     *   (int)(this.getTime()^(this.getTime() >>> 32))\n+     * }\n@@ -470,2 +473,1 @@\n-     * The {@code hashCode} method uses the underlying {@code java.util.Date}\n-     * implementation and therefore does not include nanos in its computation.\n+     * @return a hash code value for this Timestamp.\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Timestamp.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -342,0 +342,21 @@\n+\n+    \/\/--------------------------JDBC 4.5 -----------------------------\n+\n+    \/**\n+     * The constant in the Java programming language, sometimes referred to\n+     * as a type code, that identifies the generic SQL type\n+     * {@code DECFLOAT}.\n+     *\n+     * @since 26\n+     *\/\n+    public static final int DECFLOAT = 2015;\n+\n+    \/**\n+     * The constant in the Java programming language, sometimes referred to\n+     * as a type code, that identifies the generic SQL type\n+     * {@code JSON}.\n+     *\n+     * @since 26\n+     *\/\n+    public static final int JSON = 2016;\n+\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Types.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * <h2>What the JDBC 4.3 API Includes<\/h2>\n- * The JDBC 4.3 API includes both\n+ * <h2>What the JDBC 4.5 API Includes<\/h2>\n+ * The JDBC 4.5 API includes both\n@@ -46,1 +46,1 @@\n- * is included in the Java Standard Edition (Java SE), version 7.\n+ * is included in the Java Standard Edition (Java SE).\n@@ -53,1 +53,1 @@\n- * The JDBC 4.3 API incorporates all of the previous JDBC API versions:\n+ * The JDBC 4.5 API incorporates all the previous JDBC API versions:\n@@ -55,0 +55,2 @@\n+ *     <LI> The JDBC 4.4 API<\/li>\n+ *     <LI> The JDBC 4.3 API<\/li>\n@@ -73,0 +75,4 @@\n+ *     <LI>Since 26 -- new in the JDBC 4.5 API and part of the Java SE platform,\n+ *         version 26<\/li>\n+ *      <LI>Since 24 -- new in the JDBC 4.4 API and part of the Java SE platform,\n+ *         version 24<\/li>\n@@ -129,0 +135,1 @@\n+ *       <LI>{@code JDBCType} class -- provides enum constants for SQL types\n@@ -169,0 +176,20 @@\n+ *     <h3>{@code java.sql} and {@code javax.sql} Features Introduced in the JDBC 4.5 API<\/h3>\n+ *  <UL>\n+ *      <LI>The interfaces {@code Array}, {@code Blob}, {@code Clob}, {@code NClob}\n+ *      and  {@code SQLXML} now extend the {@code AutoCloseable} interface and\n+ *      include a default {@code close} method implentation<\/LI>\n+ *     <LI>Added support to {@code Connection} for enquoting literals\n+ *     and simple identifiers<\/LI>\n+ *      <LI> {@code SQLPermissions} has been deprecated for removal<\/LI>\n+ *      <LI> The SQL Types {@code JSON} and {@code DECFLOAT} have been added to\n+ *           {@code JDBCType} and {@code Types}<\/LI>\n+ *  <\/UL>\n+ *     <h3>{@code java.sql} and {@code javax.sql} Features Introduced in the JDBC 4.4 API<\/h3>\n+ *  <UL>\n+ *      <LI>Remove mention of {@code SecurityManager} and {@code SecurityException}\n+ *            as the {@code SecurityManager} is no longer supported<\/LI>\n+ *      <LI> {@code SQLPermissions} can no longer be used to control access to\n+ *            resources as the {@code SecurityManager} is no longer supported<\/LI>\n+ *     <LI>Added support to {@code Connection} for enquoting literals\n+ *     and simple identifiers<\/LI>\n+ *  <\/UL>\n@@ -320,1 +347,1 @@\n- *   <li><a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=221\">JDBC 4.3 Specification<\/a>\n+ *   <li><a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=221\">JDBC 4.5 Specification<\/a>\n@@ -329,1 +356,0 @@\n- *  <li>&ldquo;<i>JDBC API Tutorial and Reference, Third Edition<\/i>&rdquo;\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/package-info.java","additions":33,"deletions":7,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-import java.sql.SQLException;\n-import static org.testng.Assert.assertEquals;\n@@ -32,1 +30,1 @@\n-import util.StubStatement;\n+import util.StubConnection;\n@@ -34,1 +32,1 @@\n-public class StatementTests extends BaseTest {\n+import java.sql.SQLException;\n@@ -36,1 +34,5 @@\n-    protected StubStatement stmt;\n+import static org.testng.Assert.assertEquals;\n+\n+public class ConnectionTests extends BaseTest {\n+\n+    protected StubConnection conn;\n@@ -41,1 +43,1 @@\n-        stmt = new StubStatement();\n+        conn = new StubConnection();\n@@ -53,0 +55,1 @@\n+\n@@ -60,1 +63,1 @@\n-        assertEquals(stmt.enquoteLiteral(s), expected);\n+        assertEquals(conn.enquoteLiteral(s), expected);\n@@ -69,2 +72,1 @@\n-        stmt.enquoteLiteral(null);\n-\n+        conn.enquoteLiteral(null);\n@@ -78,2 +80,1 @@\n-        assertEquals(stmt.enquoteIdentifier(s, alwaysQuote), expected);\n-\n+        assertEquals(conn.enquoteIdentifier(s, alwaysQuote), expected);\n@@ -89,2 +90,1 @@\n-        stmt.enquoteIdentifier(s, alwaysQuote);\n-\n+        conn.enquoteIdentifier(s, alwaysQuote);\n@@ -100,2 +100,1 @@\n-        stmt.enquoteIdentifier(null, alwaysQuote);\n-\n+        conn.enquoteIdentifier(null, alwaysQuote);\n@@ -109,1 +108,1 @@\n-        assertEquals(stmt.isSimpleIdentifier(s), expected);\n+        assertEquals(conn.isSimpleIdentifier(s), expected);\n@@ -118,2 +117,1 @@\n-        stmt.isSimpleIdentifier(null);\n-\n+        conn.isSimpleIdentifier(null);\n@@ -128,1 +126,1 @@\n-        assertEquals(stmt.enquoteNCharLiteral(s), expected);\n+        assertEquals(conn.enquoteNCharLiteral(s), expected);\n@@ -137,1 +135,1 @@\n-        stmt.enquoteNCharLiteral(null);\n+        conn.enquoteNCharLiteral(null);\n@@ -153,1 +151,0 @@\n-\n@@ -229,1 +226,0 @@\n-\n","filename":"test\/jdk\/java\/sql\/testng\/test\/sql\/ConnectionTests.java","additions":19,"deletions":23,"binary":false,"changes":42,"previous_filename":"test\/jdk\/java\/sql\/testng\/test\/sql\/StatementTests.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -670,0 +670,38 @@\n+    \/*\n+     * Validate that two Timestamp hashCode values are equal when\n+     * the Timestamp values match, including the nanos.\n+     *\/\n+    @Test\n+    public void test54() {\n+        long t = System.currentTimeMillis();\n+        Timestamp ts1 = new Timestamp(t);\n+        Timestamp ts2 = new Timestamp(t);\n+        ts1.setNanos(123456789);\n+        ts2.setNanos(123456789);\n+        assertTrue(ts1.equals(ts1));\n+        assertTrue(ts2.equals(ts2));\n+        assertTrue(ts1.equals(ts2));\n+        \/\/ As the Timestamp values, including the nanos are the same, the hashCode's\n+        \/\/ should be equal\n+        assertEquals(ts1.hashCode(), ts2.hashCode());\n+    }\n+\n+    \/*\n+     * Validate that two Timestamp hashCode values are not equal when only\n+     * the nanos value for the Timestamp differ.\n+     *\/\n+    @Test\n+    public void test55() {\n+        long t = System.currentTimeMillis();\n+        Timestamp ts1 = new Timestamp(t);\n+        Timestamp ts2 = new Timestamp(t);\n+        \/\/ Modify the nanos so that the Timestamp values differ\n+        ts1.setNanos(123456789);\n+        ts2.setNanos(987654321);\n+        assertTrue(ts1.equals(ts1));\n+        assertTrue(ts2.equals(ts2));\n+        assertFalse(ts1.equals(ts2));\n+        \/\/ As the nanos differ, the hashCode values should differ\n+        assertNotEquals(ts1.hashCode(), ts2.hashCode());\n+    }\n+\n","filename":"test\/jdk\/java\/sql\/testng\/test\/sql\/TimestampTests.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -95,7 +95,0 @@\n-    \/*\n-     * Utility Method used to set the current Policy\n-     *\/\n-    protected static void setPolicy(Policy p) {\n-        Policy.setPolicy(p);\n-    }\n-\n","filename":"test\/jdk\/java\/sql\/testng\/util\/BaseTest.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}