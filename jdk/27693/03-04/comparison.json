{"files":[{"patch":"@@ -356,17 +356,17 @@\n-  \/**\n-   * Closes and releases the resources held by this {@code Clob} object.\n-   * <p>\n-   * If the {@code Clob} object is already closed, then invoking this method\n-   * has no effect.\n-   *\n-   * @throws SQLException                    if an error occurs releasing\n-   *                                         the Clob's resources\n-   * @throws SQLFeatureNotSupportedException if the JDBC driver\n-   *                                         does not support this method\n-   * @implSpec The default implementation calls the {@link #free()} method.\n-   * @see #free()\n-   * @since 26\n-   *\/\n-  default void close() throws SQLException {\n-    free();\n-  };\n+    \/**\n+     * Closes and releases the resources held by this {@code Clob} object.\n+     * <p>\n+     * If the {@code Clob} object is already closed, then invoking this method\n+     * has no effect.\n+     *\n+     * @throws SQLException                    if an error occurs releasing\n+     *                                         the Clob's resources\n+     * @throws SQLFeatureNotSupportedException if the JDBC driver\n+     *                                         does not support this method\n+     * @implSpec The default implementation calls the {@link #free()} method.\n+     * @see #free()\n+     * @since 26\n+     *\/\n+    default void close() throws SQLException {\n+      free();\n+    };\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Clob.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.regex.Pattern;\n@@ -81,1 +80,1 @@\n- * @see DriverManager#getConnection\n+ * @see DriverManager#getConnection(String)\n@@ -1509,1 +1508,1 @@\n-     * @see endRequest\n+     * @see #endRequest()\n@@ -1552,1 +1551,1 @@\n-     * @see beginRequest\n+     * @see #beginRequest()\n@@ -1715,2 +1714,2 @@\n-    default String enquoteLiteral(String val)  throws SQLException {\n-        return \"'\" + val.replace(\"'\", \"''\") +  \"'\";\n+    default String enquoteLiteral(String val) throws SQLException {\n+        return SQLUtils.enquoteLiteral(val);\n@@ -1825,15 +1824,1 @@\n-        int len = identifier.length();\n-        if (len < 1 || len > 128) {\n-            throw new SQLException(\"Invalid name\");\n-        }\n-        if (Pattern.compile(\"[\\\\p{Alpha}][\\\\p{Alnum}_]*\").matcher(identifier).matches()) {\n-            return alwaysQuote ?  \"\\\"\" + identifier + \"\\\"\" : identifier;\n-        }\n-        if (identifier.matches(\"^\\\".+\\\"$\")) {\n-            identifier = identifier.substring(1, len - 1);\n-        }\n-        if (Pattern.compile(\"[^\\u0000\\\"]+\").matcher(identifier).matches()) {\n-            return \"\\\"\" + identifier + \"\\\"\";\n-        } else {\n-            throw new SQLException(\"Invalid name\");\n-        }\n+        return SQLUtils.enquoteIdentifier(identifier, alwaysQuote);\n@@ -1904,3 +1889,1 @@\n-        int len = identifier.length();\n-        return len >= 1 && len <= 128\n-                && Pattern.compile(\"[\\\\p{Alpha}][\\\\p{Alnum}_]*\").matcher(identifier).matches();\n+        return SQLUtils.isSimpleIdentifier(identifier);\n@@ -1950,2 +1933,2 @@\n-    default String enquoteNCharLiteral(String val)  throws SQLException {\n-        return \"N'\" + val.replace(\"'\", \"''\") +  \"'\";\n+    default String enquoteNCharLiteral(String val) throws SQLException {\n+        return SQLUtils.enquoteNCharLiteral(val);\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Connection.java","additions":9,"deletions":26,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,304 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.sql;\n+\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Utility class used by the Connection & Statement interfaces for their\n+ * shared default methods.\n+ *\/\n+class SQLUtils {\n+    \/\/ Pattern used to verify if an identifier is a Simple SQL identifier\n+    static final Pattern SIMPLE_IDENTIFIER_PATTERN\n+            = Pattern.compile(\"[\\\\p{Alpha}][\\\\p{Alnum}_]*\");\n+    \/\/ Pattern to check if an identifier contains a null character or a double quote\n+     static final Pattern INVALID_IDENTIFIER_CHARACTERS_PATTERN\n+            = Pattern.compile(\"[^\\u0000\\\"]+\");\n+\n+    \/**\n+     * Returns a {@code String} enclosed in single quotes. Any occurrence of a\n+     * single quote within the string will be replaced by two single quotes.\n+     *\n+     * <blockquote>\n+     * <table class=\"striped\">\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr><th scope=\"col\">Value<\/th><th scope=\"col\">Result<\/th><\/tr>\n+     * <\/thead>\n+     * <tbody style=\"text-align:center\">\n+     * <tr> <th scope=\"row\">Hello<\/th> <td>'Hello'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">G'Day<\/th> <td>'G''Day'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">'G''Day'<\/th>\n+     * <td>'''G''''Day'''<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">I'''M<\/th> <td>'I''''''M'<\/td>\n+     * <\/tr>\n+     *\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     *\n+     * @param val a character string\n+     * @return A string enclosed by single quotes with every single quote\n+     * converted to two single quotes\n+     * @throws NullPointerException if val is {@code null}\n+     * @throws SQLException         if a database access error occurs\n+     * @implNote JDBC driver implementations may need to provide their own implementation\n+     * of this method in order to meet the requirements of the underlying\n+     * datasource.\n+     *\/\n+    static String enquoteLiteral(String val) throws SQLException {\n+        return \"'\" + val.replace(\"'\", \"''\") + \"'\";\n+    }\n+\n+    \/**\n+     * Returns a SQL identifier. If {@code identifier} is a simple SQL identifier:\n+     * <ul>\n+     * <li>Return the original value if {@code alwaysQuote} is\n+     * {@code false}<\/li>\n+     * <li>Return a delimited identifier if {@code alwaysQuote} is\n+     * {@code true}<\/li>\n+     * <\/ul>\n+     * <p>\n+     * If {@code identifier} is not a simple SQL identifier, {@code identifier} will be\n+     * enclosed in double quotes if not already present. If the datasource does\n+     * not support double quotes for delimited identifiers, the\n+     * identifier should be enclosed by the string returned from\n+     * {@link DatabaseMetaData#getIdentifierQuoteString}.  If the datasource\n+     * does not support delimited identifiers, a\n+     * {@code SQLFeatureNotSupportedException} should be thrown.\n+     * <p>\n+     * A {@code SQLException} will be thrown if {@code identifier} contains any\n+     * characters invalid in a delimited identifier or the identifier length is\n+     * invalid for the datasource.\n+     *\n+     * @param identifier  a SQL identifier\n+     * @param alwaysQuote indicates if a simple SQL identifier should be\n+     *                    returned as a quoted identifier\n+     * @return A simple SQL identifier or a delimited identifier\n+     * @throws SQLException                    if identifier is not a valid identifier\n+     * @throws SQLFeatureNotSupportedException if the datasource does not support\n+     *                                         delimited identifiers\n+     * @throws NullPointerException            if identifier is {@code null}\n+     * @implSpec The default implementation uses the following criteria to\n+     * determine a valid simple SQL identifier:\n+     * <ul>\n+     * <li>The string is not enclosed in double quotes<\/li>\n+     * <li>The first character is an alphabetic character from a through z, or\n+     * from A through Z<\/li>\n+     * <li>The name only contains alphanumeric characters or the character \"_\"<\/li>\n+     * <\/ul>\n+     * <p>\n+     * The default implementation will throw a {@code SQLException} if:\n+     * <ul>\n+     * <li>{@code identifier} contains a {@code null} character or double quote and is not\n+     * a simple SQL identifier.<\/li>\n+     * <li>The length of {@code identifier} is less than 1 or greater than 128 characters\n+     * <\/ul>\n+     * <blockquote>\n+     * <table class=\"striped\" >\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr>\n+     * <th scope=\"col\">identifier<\/th>\n+     * <th scope=\"col\">alwaysQuote<\/th>\n+     * <th scope=\"col\">Result<\/th><\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr>\n+     * <th scope=\"row\">Hello<\/th>\n+     * <td>false<\/td>\n+     * <td>Hello<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">Hello<\/th>\n+     * <td>true<\/td>\n+     * <td>\"Hello\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">G'Day<\/th>\n+     * <td>false<\/td>\n+     * <td>\"G'Day\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Bruce Wayne\"<\/th>\n+     * <td>false<\/td>\n+     * <td>\"Bruce Wayne\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Bruce Wayne\"<\/th>\n+     * <td>true<\/td>\n+     * <td>\"Bruce Wayne\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">GoodDay$<\/th>\n+     * <td>false<\/td>\n+     * <td>\"GoodDay$\"<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">Hello\"World<\/th>\n+     * <td>false<\/td>\n+     * <td>SQLException<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Hello\"World\"<\/th>\n+     * <td>false<\/td>\n+     * <td>SQLException<\/td>\n+     * <\/tr>\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     * @implNote JDBC driver implementations may need to provide their own implementation\n+     * of this method in order to meet the requirements of the underlying\n+     * datasource.\n+     *\/\n+    static String enquoteIdentifier(String identifier, boolean alwaysQuote) throws SQLException {\n+        int len = identifier.length();\n+        if (len < 1 || len > 128) {\n+            throw new SQLException(\"Invalid name\");\n+        }\n+        if (SIMPLE_IDENTIFIER_PATTERN.matcher(identifier).matches()) {\n+            return alwaysQuote ? \"\\\"\" + identifier + \"\\\"\" : identifier;\n+        }\n+        if (identifier.matches(\"^\\\".+\\\"$\")) {\n+            identifier = identifier.substring(1, len - 1);\n+        }\n+        \/\/ Enclose the identifier in double quotes.  If the identifier\n+        \/\/ contains a null character or a double quote, throw a SQLException\n+        if (INVALID_IDENTIFIER_CHARACTERS_PATTERN.matcher(identifier).matches()) {\n+            return \"\\\"\" + identifier + \"\\\"\";\n+        } else {\n+            throw new SQLException(\"Invalid name\");\n+        }\n+    }\n+\n+    \/**\n+     * Retrieves whether {@code identifier} is a simple SQL identifier.\n+     *\n+     * @param identifier a SQL identifier\n+     * @return true if a simple SQL identifier, false otherwise\n+     * @throws NullPointerException if identifier is {@code null}\n+     * @throws SQLException         if a database access error occurs\n+     * @implSpec The default implementation uses the following criteria to\n+     * determine a valid simple SQL identifier:\n+     * <ul>\n+     * <li>The string is not enclosed in double quotes<\/li>\n+     * <li>The first character is an alphabetic character from a through z, or\n+     * from A through Z<\/li>\n+     * <li>The string only contains alphanumeric characters or the character\n+     * \"_\"<\/li>\n+     * <li>The string is between 1 and 128 characters in length inclusive<\/li>\n+     * <\/ul>\n+     *\n+     * <blockquote>\n+     * <table class=\"striped\" >\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr>\n+     * <th scope=\"col\">identifier<\/th>\n+     * <th scope=\"col\">Simple Identifier<\/th>\n+     * <\/thead>\n+     *\n+     * <tbody>\n+     * <tr>\n+     * <th scope=\"row\">Hello<\/th>\n+     * <td>true<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">G'Day<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Bruce Wayne\"<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">GoodDay$<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">Hello\"World<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <tr>\n+     * <th scope=\"row\">\"Hello\"World\"<\/th>\n+     * <td>false<\/td>\n+     * <\/tr>\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     * @implNote JDBC driver implementations may need to provide their own\n+     * implementation of this method in order to meet the requirements of the\n+     * underlying datasource.\n+     *\/\n+    static boolean isSimpleIdentifier(String identifier) throws SQLException {\n+        int len = identifier.length();\n+        return len >= 1 && len <= 128\n+                && SIMPLE_IDENTIFIER_PATTERN.matcher(identifier).matches();\n+    }\n+\n+    \/**\n+     * Returns a {@code String} representing a National Character Set Literal\n+     * enclosed in single quotes and prefixed with an upper case letter N.\n+     * Any occurrence of a single quote within the string will be replaced\n+     * by two single quotes.\n+     *\n+     * <blockquote>\n+     * <table class=\"striped\">\n+     * <caption>Examples of the conversion:<\/caption>\n+     * <thead>\n+     * <tr>\n+     * <th scope=\"col\">Value<\/th>\n+     * <th scope=\"col\">Result<\/th>\n+     * <\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr> <th scope=\"row\">Hello<\/th> <td>N'Hello'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">G'Day<\/th> <td>N'G''Day'<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">'G''Day'<\/th>\n+     * <td>N'''G''''Day'''<\/td> <\/tr>\n+     * <tr> <th scope=\"row\">I'''M<\/th> <td>N'I''''''M'<\/td>\n+     * <tr> <th scope=\"row\">N'Hello'<\/th> <td>N'N''Hello'''<\/td> <\/tr>\n+     *\n+     * <\/tbody>\n+     * <\/table>\n+     * <\/blockquote>\n+     *\n+     * @param val a character string\n+     * @return the result of replacing every single quote character in the\n+     * argument by two single quote characters where this entire result is\n+     * then prefixed with 'N'.\n+     * @throws NullPointerException if val is {@code null}\n+     * @throws SQLException         if a database access error occurs\n+     * @implNote JDBC driver implementations may need to provide their own implementation\n+     * of this method in order to meet the requirements of the underlying\n+     * datasource. An implementation of enquoteNCharLiteral may accept a different\n+     * set of characters than that accepted by the same drivers implementation of\n+     * enquoteLiteral.\n+     *\/\n+    static String enquoteNCharLiteral(String val) throws SQLException {\n+        return \"N'\" + val.replace(\"'\", \"''\") + \"'\";\n+    }\n+}\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/SQLUtils.java","additions":304,"deletions":0,"binary":false,"changes":304,"status":"added"},{"patch":"@@ -28,3 +28,0 @@\n-import java.util.regex.Pattern;\n-import static java.util.stream.Collectors.joining;\n-\n@@ -1410,2 +1407,2 @@\n-     default String enquoteLiteral(String val)  throws SQLException {\n-         return \"'\" + val.replace(\"'\", \"''\") +  \"'\";\n+     default String enquoteLiteral(String val) throws SQLException {\n+         return SQLUtils.enquoteLiteral(val);\n@@ -1414,1 +1411,0 @@\n-\n@@ -1521,15 +1517,1 @@\n-        int len = identifier.length();\n-        if (len < 1 || len > 128) {\n-            throw new SQLException(\"Invalid name\");\n-        }\n-        if (Pattern.compile(\"[\\\\p{Alpha}][\\\\p{Alnum}_]*\").matcher(identifier).matches()) {\n-            return alwaysQuote ?  \"\\\"\" + identifier + \"\\\"\" : identifier;\n-        }\n-        if (identifier.matches(\"^\\\".+\\\"$\")) {\n-            identifier = identifier.substring(1, len - 1);\n-        }\n-        if (Pattern.compile(\"[^\\u0000\\\"]+\").matcher(identifier).matches()) {\n-            return \"\\\"\" + identifier + \"\\\"\";\n-        } else {\n-            throw new SQLException(\"Invalid name\");\n-        }\n+        return SQLUtils.enquoteIdentifier(identifier, alwaysQuote);\n@@ -1600,3 +1582,1 @@\n-        int len = identifier.length();\n-        return len >= 1 && len <= 128\n-                && Pattern.compile(\"[\\\\p{Alpha}][\\\\p{Alnum}_]*\").matcher(identifier).matches();\n+        return SQLUtils.isSimpleIdentifier(identifier);\n@@ -1646,2 +1626,2 @@\n-    default String enquoteNCharLiteral(String val)  throws SQLException {\n-        return \"N'\" + val.replace(\"'\", \"''\") +  \"'\";\n+    default String enquoteNCharLiteral(String val) throws SQLException {\n+        return SQLUtils.enquoteNCharLiteral(val);\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Statement.java","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -173,1 +173,2 @@\n-            {\"GoodDay$\", true, \"\\\"GoodDay$\\\"\"},};\n+            {\"GoodDay$\", true, \"\\\"GoodDay$\\\"\"},\n+        };\n@@ -187,1 +188,2 @@\n-            {maxIdentifier + 'a', false},};\n+            {maxIdentifier + 'a', false},\n+        };\n@@ -208,1 +210,2 @@\n-            {\"\", false},};\n+            {\"\", false},\n+        };\n","filename":"test\/jdk\/java\/sql\/testng\/test\/sql\/ConnectionTests.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}