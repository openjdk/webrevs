{"files":[{"patch":"@@ -183,7 +183,11 @@\n-      add2 = add1->clone();\n-      add2->set_req(2, in(2));\n-      add2 = phase->transform(add2);\n-      set_req_X(1, add2, phase);\n-      set_req_X(2, a12, phase);\n-      progress = this;\n-      add2 = a12;\n+      if (add2->Opcode() == Op_Proj && add2->in(0)->is_CallJava()) {\n+        \/\/ Do nothing when y is a CallJavaNode.\n+      } else {\n+        add2 = add1->clone();\n+        add2->set_req(2, in(2));\n+        add2 = phase->transform(add2);\n+        set_req_X(1, add2, phase);\n+        set_req_X(2, a12, phase);\n+        progress = this;\n+        add2 = a12;\n+      }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 2, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 2, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 1)\n+\n+public class CallNode {\n+  private long val = 10;\n+\n+  @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+  public long callNotInlined(long arg1, long arg2) {\n+    return arg1 + arg2;\n+  }\n+\n+  @Benchmark\n+  public long test() {\n+     long ret = 0;\n+     for (int i = 0; i< 20000; i++) {\n+       long tmp = val + 3;\n+       ret = callNotInlined(1, 2);\n+       ret += tmp;\n+     }\n+     return ret;\n+  }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CallNode.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}