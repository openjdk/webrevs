{"files":[{"patch":"@@ -431,2 +431,2 @@\n-            throw new NoSuchAlgorithmException(\"Unsupported secret key \"\n-                                               + \"algorithm: \"+ algorithm);\n+            throw new NoSuchAlgorithmException(\n+                    \"Unsupported secret key algorithm \" + algorithm);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKeyAgreement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -668,1 +668,1 @@\n-     *      Use \"Generic\" if the output will be used as the input keying\n+     *      Specify \"Generic\" if the output will be used as the input keying\n@@ -674,1 +674,2 @@\n-     *      is specified as \"Generic\", the full shared secret will be returned.\n+     *      is specified as \"Generic\" and it is supported by the implementation,\n+     *      the full shared secret will be returned.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreement.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-     *      Use \"Generic\" if the output will be used as the input keying\n+     *      Specify \"Generic\" if the output will be used as the input keying\n@@ -220,1 +220,2 @@\n-     *      is specified as \"Generic\", the full shared secret will be returned.\n+     *      is specified as \"Generic\" and it is supported by the implementation,\n+     *      the full shared secret will be returned.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreementSpi.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -259,2 +259,2 @@\n-            throw new NoSuchAlgorithmException\n-                (\"Only supported for algorithm TlsPremasterSecret\");\n+            throw new NoSuchAlgorithmException(\n+                    \"Unsupported secret key algorithm \" + algorithm);\n@@ -262,1 +262,1 @@\n-        return new SecretKeySpec(engineGenerateSecret(), \"TlsPremasterSecret\");\n+        return new SecretKeySpec(engineGenerateSecret(), algorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECDHKeyAgreement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-                    \"Only supported for algorithm TlsPremasterSecret\");\n+                    \"Unsupported secret key algorithm \" + algorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/XDHKeyAgreement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,2 +174,2 @@\n-            throw new NoSuchAlgorithmException\n-                (\"Only supported for algorithm TlsPremasterSecret\");\n+            throw new NoSuchAlgorithmException(\n+                    \"Unsupported secret key algorithm \" + algorithm);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11ECDHKeyAgreement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -281,2 +281,2 @@\n-            throw new NoSuchAlgorithmException(\"Unsupported secret key \"\n-                                               + \"algorithm: \" + algorithm);\n+            throw new NoSuchAlgorithmException(\n+                    \"Unsupported secret key algorithm \" + algorithm);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyAgreement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -37,0 +39,1 @@\n+import java.util.List;\n@@ -59,6 +62,6 @@\n-                    ka.init(kp1.getPrivate());\n-                    ka.doPhase(kp2.getPublic(), true);\n-                    ka.generateSecret(\"TlsPremasterSecret\");\n-                    ka.init(kp1.getPrivate());\n-                    ka.doPhase(kp2.getPublic(), true);\n-                    ka.generateSecret(\"Generic\");\n+                    for (var alg : List.of(\"TlsPremasterSecret\", \"Generic\")) {\n+                        ka.init(kp1.getPrivate());\n+                        ka.doPhase(kp2.getPublic(), true);\n+                        Asserts.assertEquals(\n+                                ka.generateSecret(alg).getAlgorithm(), alg);\n+                    }\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/Generic.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}