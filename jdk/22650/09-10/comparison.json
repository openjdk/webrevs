{"files":[{"patch":"@@ -29,0 +29,3 @@\n+ * @run main Generic builtin\n+ * @run main\/othervm Generic nss\n+ * @run main\/othervm -DCUSTOM_P11_CONFIG_NAME=p11-nss-sensitive.txt Generic nss\n@@ -32,0 +35,1 @@\n+import java.security.Provider;\n@@ -37,19 +41,26 @@\n-        Security.addProvider(PKCS11Test.getSunPKCS11(PKCS11Test.getNssConfig()));\n-        for (var p : Security.getProviders()) {\n-            for (var s : p.getServices()) {\n-                if (s.getType().equalsIgnoreCase(\"KeyAgreement\")) {\n-                    try {\n-                        System.out.println(s.getProvider().getName() + \".\" + s.getAlgorithm());\n-                        var g = KeyPairGenerator.getInstance(ka2kpg(s.getAlgorithm()), p);\n-                        var kp1 = g.generateKeyPair();\n-                        var kp2 = g.generateKeyPair();\n-                        var ka = KeyAgreement.getInstance(s.getAlgorithm(), s.getProvider());\n-                        ka.init(kp1.getPrivate());\n-                        ka.doPhase(kp2.getPublic(), true);\n-                        ka.generateSecret(\"TlsPremasterSecret\");\n-                        ka.init(kp1.getPrivate());\n-                        ka.doPhase(kp2.getPublic(), true);\n-                        ka.generateSecret(\"Generic\");\n-                    } catch (Exception e) {\n-                        throw e;\n-                    }\n+        if (args[0].equals(\"nss\")) {\n+            test(PKCS11Test.getSunPKCS11(PKCS11Test.getNssConfig()));\n+        } else {\n+            for (var p : Security.getProviders()) {\n+                test(p);\n+            }\n+        }\n+    }\n+\n+    static void test(Provider p) throws Exception {\n+        for (var s : p.getServices()) {\n+            if (s.getType().equalsIgnoreCase(\"KeyAgreement\")) {\n+                try {\n+                    System.out.println(s.getProvider().getName() + \".\" + s.getAlgorithm());\n+                    var g = KeyPairGenerator.getInstance(ka2kpg(s.getAlgorithm()), p);\n+                    var kp1 = g.generateKeyPair();\n+                    var kp2 = g.generateKeyPair();\n+                    var ka = KeyAgreement.getInstance(s.getAlgorithm(), s.getProvider());\n+                    ka.init(kp1.getPrivate());\n+                    ka.doPhase(kp2.getPublic(), true);\n+                    ka.generateSecret(\"TlsPremasterSecret\");\n+                    ka.init(kp1.getPrivate());\n+                    ka.doPhase(kp2.getPublic(), true);\n+                    ka.generateSecret(\"Generic\");\n+                } catch (Exception e) {\n+                    throw e;\n@@ -63,4 +74,1 @@\n-        return switch (ka) {\n-            case \"ECDH\" -> \"EC\";\n-            default -> ka;\n-        };\n+        return ka.equals(\"ECDH\") ? \"EC\" : ka;\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/Generic.java","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+  CKA_EXTRACTABLE = false\n@@ -58,0 +59,1 @@\n+  CKA_EXTRACTABLE = false\n","filename":"test\/jdk\/sun\/security\/pkcs11\/nss\/p11-nss-sensitive.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}