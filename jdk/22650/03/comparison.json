{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,1 +382,1 @@\n-        if (!algorithm.equalsIgnoreCase(\"TlsPremasterSecret\") &&\n+        if (!KeyUtil.isSupportedKeyAgreementOutputAlgorithm(algorithm) &&\n@@ -422,3 +422,4 @@\n-        } else if (algorithm.equals(\"TlsPremasterSecret\")) {\n-            \/\/ remove leading zero bytes per RFC 5246 Section 8.1.2\n-            return new SecretKeySpec(\n+        } else if (KeyUtil.isSupportedKeyAgreementOutputAlgorithm(algorithm)) {\n+            if (algorithm.equalsIgnoreCase(\"TlsPremasterSecret\")) {\n+                \/\/ remove leading zero bytes per RFC 5246 Section 8.1.2\n+                return new SecretKeySpec(\n@@ -426,0 +427,3 @@\n+            } else {\n+                return new SecretKeySpec(secret, algorithm);\n+            }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKeyAgreement.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -662,3 +662,13 @@\n-     * @param algorithm the requested secret-key algorithm\n-     *\n-     * @return the shared secret key\n+     * @param algorithm the requested secret-key algorithm. This is different\n+     *      from the {@code KeyAgreement} algorithm provided to the\n+     *      {@code getInstance} method. See the SecretKey Algorithms section in the\n+     *      <a href=\"{@docRoot}\/..\/specs\/security\/standard-names.html#secretkey-algorithms\">\n+     *      Java Security Standard Algorithm Names Specification<\/a>\n+     *      for information about standard secret key algorithm names.\n+     *      Use \"Generic\" if the output will be used as the input keying\n+     *      material of a {@link javax.crypto.KDF}.\n+     *\n+     * @return the shared secret key. The length of the key material\n+     *      may be adjusted to be compatible with the specified algorithm,\n+     *      regardless of whether the key is extractable. If {@code algorithm}\n+     *      is specified as \"Generic\", the full shared secret will be returned.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreement.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -208,1 +208,5 @@\n-     * @param algorithm the requested secret key algorithm\n+     * @param algorithm the requested secret-key algorithm. This is\n+     *      different from the {@code KeyAgreement} algorithm provided\n+     *      to the {@code getInstance} method. Use \"Generic\" if\n+     *      the output will be used as the input keying material of a\n+     *      {@link javax.crypto.KDF}.\n@@ -210,1 +214,4 @@\n-     * @return the shared secret key\n+     * @return the shared secret key. The length of the key material\n+     *      may be adjusted to be compatible with the specified algorithm,\n+     *      regardless of whether the key is extractable. If {@code algorithm}\n+     *      is specified as \"Generic\", the full shared secret will be returned.\n@@ -215,1 +222,1 @@\n-     * @exception NoSuchAlgorithmException if the requested secret key\n+     * @exception NoSuchAlgorithmException if the specified secret-key\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreementSpi.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import sun.security.util.KeyUtil;\n@@ -257,1 +258,1 @@\n-        if (!(algorithm.equals(\"TlsPremasterSecret\"))) {\n+        if (!KeyUtil.isSupportedKeyAgreementOutputAlgorithm(algorithm)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECDHKeyAgreement.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import sun.security.util.KeyUtil;\n+\n@@ -210,1 +212,1 @@\n-        if (!(algorithm.equals(\"TlsPremasterSecret\"))) {\n+        if (!KeyUtil.isSupportedKeyAgreementOutputAlgorithm(algorithm)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/XDHKeyAgreement.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -448,0 +448,5 @@\n+\n+    public static boolean isSupportedKeyAgreementOutputAlgorithm(String alg) {\n+        return alg.equalsIgnoreCase(\"TlsPremasterSecret\")\n+                || alg.equalsIgnoreCase(\"Generic\");\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import sun.security.util.KeyUtil;\n+\n@@ -171,1 +173,1 @@\n-        if (!algorithm.equals(\"TlsPremasterSecret\")) {\n+        if (!KeyUtil.isSupportedKeyAgreementOutputAlgorithm(algorithm)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11ECDHKeyAgreement.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -271,1 +271,1 @@\n-        if (algorithm.equals(\"TlsPremasterSecret\")) {\n+        if (KeyUtil.isSupportedKeyAgreementOutputAlgorithm(algorithm)) {\n@@ -273,1 +273,1 @@\n-            \/\/ as that is required for FIPS compliance.\n+            \/\/ as that is required for FIPS compliance and Generic for KDF.\n@@ -280,3 +280,1 @@\n-        if (!algorithm.equalsIgnoreCase(\"TlsPremasterSecret\") &&\n-            !AllowKDF.VALUE) {\n-\n+        if (!AllowKDF.VALUE) {\n@@ -298,2 +296,0 @@\n-        } else if (algorithm.equalsIgnoreCase(\"TlsPremasterSecret\")) {\n-            keyLen = secret.length;\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyAgreement.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8189441\n+ * @library \/test\/lib \/test\/jdk\/sun\/security\/pkcs11\n+ * @summary make sure Generic is accepted by all KeyAgreement implementations\n+ *\/\n+import javax.crypto.KeyAgreement;\n+import java.security.KeyPairGenerator;\n+import java.security.Security;\n+\n+public class Generic {\n+\n+    public static void main(String[] args) throws Exception {\n+        Security.addProvider(PKCS11Test.getSunPKCS11(PKCS11Test.getNssConfig()));\n+        for (var p : Security.getProviders()) {\n+            for (var s : p.getServices()) {\n+                if (s.getType().equalsIgnoreCase(\"KeyAgreement\")) {\n+                    try {\n+                        System.out.println(s.getProvider().getName() + \".\" + s.getAlgorithm());\n+                        var g = KeyPairGenerator.getInstance(ka2kpg(s.getAlgorithm()), p);\n+                        var kp1 = g.generateKeyPair();\n+                        var kp2 = g.generateKeyPair();\n+                        var ka = KeyAgreement.getInstance(s.getAlgorithm(), s.getProvider());\n+                        ka.init(kp1.getPrivate());\n+                        ka.doPhase(kp2.getPublic(), true);\n+                        ka.generateSecret(\"TlsPremasterSecret\");\n+                        ka.init(kp1.getPrivate());\n+                        ka.doPhase(kp2.getPublic(), true);\n+                        ka.generateSecret(\"Generic\");\n+                    } catch (Exception e) {\n+                        throw e;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Find key algorithm from KeyAgreement algorithm\n+    private static String ka2kpg(String ka) {\n+        return switch (ka) {\n+            case \"ECDH\" -> \"EC\";\n+            default -> ka;\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/Generic.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}