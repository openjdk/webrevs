{"files":[{"patch":"@@ -284,30 +284,0 @@\n-    \/**\n-     * Actions that append an element, and are expected to\n-     * leave at most one slack node at tail.\n-     *\/\n-    @DataProvider\n-    public Object[][] addActions() {\n-        return List.<Consumer<ConcurrentLinkedQueue>>of(\n-            q -> q.add(1),\n-            q -> q.offer(1))\n-            .stream().map(x -> new Object[]{ x }).toArray(Object[][]::new);\n-    }\n-\n-    @Test(dataProvider = \"addActions\")\n-    public void addActionsOneNodeSlack(\n-        Consumer<ConcurrentLinkedQueue> addAction) {\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n-        int n = 1 + rnd.nextInt(5);\n-        for (int i = 0; i < n; i++) {\n-            boolean slack = next(tail(q)) != null;\n-            addAction.accept(q);\n-            if (slack)\n-                assertNull(next(tail(q)));\n-            else {\n-                assertNotNull(next(tail(q)));\n-                assertNull(next(next(tail(q))));\n-            }\n-            assertInvariants(q);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/ConcurrentLinkedQueue\/WhiteBox.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"}]}