{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.constant.PrimitiveClassDescImpl;\n@@ -35,0 +36,2 @@\n+import static jdk.internal.constant.PrimitiveClassDescImpl.*;\n+\n@@ -242,2 +245,22 @@\n-     * {@return the type associated with the specified field descriptor}\n-     * @param descriptor the field descriptor\n+     * {@return the type associated with the specified ClassDesc}\n+     * @param desc the ClassDesc\n+     *\/\n+    public static TypeKind from(ClassDesc desc) {\n+        if (desc == null) throw new NullPointerException();\n+        if (desc instanceof PrimitiveClassDescImpl) {\n+            if (desc == CD_void   ) return VOID;\n+            if (desc == CD_boolean) return BOOLEAN;\n+            if (desc == CD_int    ) return INT;\n+            if (desc == CD_long   ) return LONG;\n+            if (desc == CD_byte   ) return BYTE;\n+            if (desc == CD_float  ) return FLOAT;\n+            if (desc == CD_double ) return DOUBLE;\n+            if (desc == CD_short  ) return SHORT;\n+            else                    return CHAR;\n+        }\n+        return REFERENCE;\n+    }\n+\n+    \/**\n+     * {@return the type associated with the specified class}\n+     * @param cl the class\n@@ -245,4 +268,13 @@\n-    public static TypeKind from(TypeDescriptor.OfField<?> descriptor) {\n-        return descriptor.isPrimitive() \/\/ implicit null check\n-                ? fromDescriptor(descriptor.descriptorString())\n-                : REFERENCE;\n+    public static TypeKind from(Class<?> cl) {\n+        if (cl.isPrimitive()) {\n+            if (cl == void.class   ) return VOID;\n+            if (cl == boolean.class) return BOOLEAN;\n+            if (cl == int.class    ) return INT;\n+            if (cl == long.class   ) return LONG;\n+            if (cl == byte.class   ) return BYTE;\n+            if (cl == float.class  ) return FLOAT;\n+            if (cl == double.class ) return DOUBLE;\n+            if (cl == char.class   ) return CHAR;\n+            return SHORT;\n+        }\n+        return REFERENCE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -39,1 +40,2 @@\n-        assertThrows(NullPointerException.class, () -> TypeKind.from(null));\n+        assertThrows(NullPointerException.class, () -> TypeKind.from((Class) null));\n+        assertThrows(NullPointerException.class, () -> TypeKind.from((ClassDesc) null));\n","filename":"test\/jdk\/jdk\/classfile\/TypeKindTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.classfile;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.classfile.TypeKind;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 1, time = 2)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(jvmArgsAppend = \"--enable-preview\", value = 3)\n+@State(Scope.Thread)\n+public class TypeKindFrom {\n+    @Param({\"B\", \"C\", \"Z\", \"S\", \"I\", \"F\", \"J\", \"D\", \"V\", \"java.lang.Object\"})\n+    public String typeName;\n+    public Class<?> type;\n+    public ClassDesc classDesc;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        type = switch (typeName) {\n+            case \"B\" -> byte.class;\n+            case \"C\" -> char.class;\n+            case \"Z\" -> boolean.class;\n+            case \"S\" -> short.class;\n+            case \"I\" -> int.class;\n+            case \"J\" -> long.class;\n+            case \"F\" -> float.class;\n+            case \"D\" -> void.class;\n+            case \"V\" -> void.class;\n+            default -> Class.forName(typeName);\n+        };\n+        classDesc = ClassDesc.ofInternalName(typeName.replace('.', '\/'));\n+    }\n+\n+    @Benchmark\n+    public void fromClass(Blackhole bh) {\n+        bh.consume(TypeKind.from(type));\n+    }\n+\n+    @Benchmark\n+    public void fromClassDesc(Blackhole bh) {\n+        bh.consume(TypeKind.from(classDesc));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/classfile\/TypeKindFrom.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}