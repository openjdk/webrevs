{"files":[{"patch":"@@ -579,3 +579,1 @@\n-                println(\"Code:\");\n-                codeWriter.writeInstrs(code);\n-                codeWriter.writeExceptionTable(code);\n+                codeWriter.writeMinimal(code);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,7 +73,5 @@\n-        println(\"Code:\");\n-        indent(+1);\n-        writeVerboseHeader(attr);\n-        writeInstrs(attr);\n-        writeExceptionTable(attr);\n-        attrWriter.write(attr.attributes(), attr);\n-        indent(-1);\n+        writeInternal(attr, false);\n+    }\n+\n+    void writeMinimal(CodeAttribute attr) {\n+        writeInternal(attr, true);\n@@ -262,0 +260,14 @@\n+    private void writeInternal(CodeAttribute attr, boolean minimal) {\n+        println(\"Code:\");\n+        indent(+1);\n+        if (!minimal) {\n+            writeVerboseHeader(attr);\n+        }\n+        writeInstrs(attr);\n+        writeExceptionTable(attr);\n+        if (!minimal) {\n+            attrWriter.write(attr.attributes(), attr);\n+        }\n+        indent(-1);\n+    }\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/CodeWriter.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8034066\n+ * @summary javap incorrect indentation when CodeWriter called via ClassWriter\n+ * @run main ClassWriterCodeIndentTest\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ *\/\n+\n+import java.io.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class ClassWriterCodeIndentTest {\n+    public static void main(String[] args) {\n+        new ClassWriterCodeIndentTest().run();\n+    }\n+\n+    public void run() {\n+        \/*\n+         * Partial expected output within a larger file. There exists another \"Code: \" section above, and thus we\n+         * select the second occurrence in `findNthMatchPrecedingSpaces(output, \"Code:\", 1);`\n+         * ...\n+         *    Code:\n+         *         0: iconst_0\n+         *         1: istore_1\n+         *      StackMap locals:  this int\n+         *      StackMap stack:\n+         * ...\n+         *\/\n+        String output = javap();\n+\n+        int codeHeaderIndent = findNthMatchPrecedingSpaces(output, \"Code:\", 1);\n+        int detailIndent = findNthMatchPrecedingSpaces(output, \"StackMap \", 0);\n+        int bytecodeIndent = findNthMatchPrecedingSpaces(output, \"0: iconst_0\", 0);\n+\n+        if (detailIndent - codeHeaderIndent != 2) {\n+            error(\"Details are not indented correctly with respect to code header.\");\n+        }\n+\n+        if (bytecodeIndent - codeHeaderIndent != 5) {\n+            error(\"Bytecode is not indented correctly with respect to code header.\");\n+        }\n+\n+        if (errors > 0) {\n+            throw new Error(errors + \" found.\");\n+        }\n+    }\n+\n+    String javap() {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter out = new PrintWriter(sw);\n+        int rc = com.sun.tools.javap.Main.run(new String[]{\"-c\", \"-XDdetails:stackMaps\",\n+            System.getProperty(\"test.classes\") + \"\/EmptyLoop.class\"}, out);\n+        if (rc != 0)\n+            throw new Error(\"javap failed. rc=\" + rc);\n+        out.close();\n+        System.out.println(sw.toString());\n+        return sw.toString();\n+    }\n+\n+    public static int findNthMatchPrecedingSpaces(String inputString, String searchString, int occurrence) {\n+        String regex = \"^(\\\\s*)\" + Pattern.quote(searchString);\n+        Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);\n+        Matcher matcher = pattern.matcher(inputString);\n+\n+        int count = 0;\n+        while (matcher.find()) {\n+            if (count == occurrence) {\n+                return matcher.group(1).length();\n+            }\n+            count++;\n+        }\n+\n+        throw new Error(\"Could not find \" + searchString + \" in \" + inputString);\n+    }\n+\n+    void error(String msg) {\n+        System.err.println(msg);\n+        errors++;\n+    }\n+\n+    int errors;\n+}\n+\n+class EmptyLoop {\n+    public void emptyLoop() {\n+        for (int i = 0; i < 10; i++) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javap\/ClassWriterCodeIndentTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}