{"files":[{"patch":"@@ -580,0 +580,1 @@\n+                indent(+1);\n@@ -582,0 +583,1 @@\n+                indent(-1);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * Original source:\n+ * public class EmptyLoop {\n+ *   public void emptyLoop() {\n+ *     for (int i = 0; i < 10; i++) {\n+ *     }\n+ *   }\n+ * }\n+ *\/\n+\n+class EmptyLoop {\n+  0xCAFEBABE;\n+  0;                             \/\/ minor version\n+  68;                            \/\/ version\n+  [] {                           \/\/ Constant Pool\n+    ;                            \/\/ first element is empty\n+    Method #2 #3;                \/\/ #1\n+    class #4;                    \/\/ #2\n+    NameAndType #5 #6;           \/\/ #3\n+    Utf8 \"java\/lang\/Object\";     \/\/ #4\n+    Utf8 \"<init>\";               \/\/ #5\n+    Utf8 \"()V\";                  \/\/ #6\n+    class #8;                    \/\/ #7\n+    Utf8 \"EmptyLoop\";            \/\/ #8\n+    Utf8 \"Code\";                 \/\/ #9\n+    Utf8 \"LineNumberTable\";      \/\/ #10\n+    Utf8 \"LocalVariableTable\";   \/\/ #11\n+    Utf8 \"this\";                 \/\/ #12\n+    Utf8 \"LEmptyLoop;\";          \/\/ #13\n+    Utf8 \"emptyLoop\";            \/\/ #14\n+    Utf8 \"i\";                    \/\/ #15\n+    Utf8 \"I\";                    \/\/ #16\n+    Utf8 \"StackMapTable\";        \/\/ #17\n+    Utf8 \"SourceFile\";           \/\/ #18\n+    Utf8 \"EmptyLoop.java\";       \/\/ #19\n+  }\n+\n+  0x0021;                        \/\/ access\n+  #7;                            \/\/ this_cpx\n+  #2;                            \/\/ super_cpx\n+\n+  [] {                           \/\/ Interfaces\n+  }                              \/\/ end of Interfaces\n+\n+  [] {                           \/\/ Fields\n+  }                              \/\/ end of Fields\n+\n+  [] {                           \/\/ Methods\n+    {                            \/\/ method\n+      0x0001;                    \/\/ access\n+      #5;                        \/\/ name_index\n+      #6;                        \/\/ descriptor_index\n+      [] {                       \/\/ Attributes\n+        Attr(#9) {               \/\/ Code\n+          1;                     \/\/ max_stack\n+          1;                     \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] {                   \/\/ Traps\n+          }                      \/\/ end of Traps\n+          [] {                   \/\/ Attributes\n+            Attr(#10) {          \/\/ LineNumberTable\n+              [] {               \/\/ line_number_table\n+                0  1;\n+              }\n+            }                    \/\/ end of LineNumberTable\n+            ;\n+            Attr(#11) {          \/\/ LocalVariableTable\n+              [] {               \/\/ LocalVariableTable\n+                0 5 12 13 0;\n+              }\n+            }                    \/\/ end of LocalVariableTable\n+          }                      \/\/ end of Attributes\n+        }                        \/\/ end of Code\n+      }                          \/\/ end of Attributes\n+    }\n+    ;\n+    {                            \/\/ method\n+      0x0001;                    \/\/ access\n+      #14;                       \/\/ name_index\n+      #6;                        \/\/ descriptor_index\n+      [] {                       \/\/ Attributes\n+        Attr(#9) {               \/\/ Code\n+          2;                     \/\/ max_stack\n+          2;                     \/\/ max_locals\n+          Bytes[]{\n+            0x033C1B100AA20009;\n+            0x840101A7FFF7B1;\n+          }\n+          [] {                   \/\/ Traps\n+          }                      \/\/ end of Traps\n+          [] {                   \/\/ Attributes\n+            Attr(#10) {          \/\/ LineNumberTable\n+              [] {               \/\/ line_number_table\n+                0  3;\n+                14  5;\n+              }\n+            }                    \/\/ end of LineNumberTable\n+            ;\n+            Attr(#11) {          \/\/ LocalVariableTable\n+              [] {               \/\/ LocalVariableTable\n+                2 12 15 16 1;\n+                0 15 12 13 0;\n+              }\n+            }                    \/\/ end of LocalVariableTable\n+            ;\n+            Attr(#17) {          \/\/ StackMapTable\n+              [] {               \/\/\n+                252b, 2, []z{I}; \/\/ append_frame 1\n+                250b, 11;        \/\/ chop_frame 1\n+              }\n+            }                    \/\/ end of StackMapTable\n+          }                      \/\/ end of Attributes\n+        }                        \/\/ end of Code\n+      }                          \/\/ end of Attributes\n+    }\n+  }                              \/\/ end of Methods\n+\n+  [] {                           \/\/ Attributes\n+    Attr(#18) {                  \/\/ SourceFile\n+      #19;\n+    }                            \/\/ end of SourceFile\n+  }                              \/\/ end of Attributes\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javap\/8034066\/EmptyLoop.jcod","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8034066\n+ * @summary javap incorrect indentation when CodeWriter called via ClassWriter\n+ * @build EmptyLoop\n+ * @run main T8034066\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ *\/\n+\n+import java.io.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class T8034066 {\n+    public static void main(String[] args) throws Exception {\n+        new T8034066().run();\n+    }\n+\n+    public void run() throws IOException {\n+        String output = javap();\n+\n+        int codeHeaderIndent = findNthMatchPrecedingSpaces(output, \"Code:\", 1);\n+        int detailIndent = findNthMatchPrecedingSpaces(output, \"StackMap \", 0);\n+        int bytecodeIndent = findNthMatchPrecedingSpaces(output, \"0: iconst_0\", 0);\n+\n+        if (detailIndent - codeHeaderIndent != 2) {\n+            error(\"Details are not indented correctly with respect to code header.\");\n+        }\n+\n+        if (bytecodeIndent - codeHeaderIndent != 5) {\n+            error(\"Bytecode is not indented correctly with respect to code header.\");\n+        }\n+\n+        if (errors > 0) {\n+            throw new Error(errors + \" found.\");\n+        }\n+    }\n+\n+    String javap() {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter out = new PrintWriter(sw);\n+        int rc = com.sun.tools.javap.Main.run(new String[] { \"-c\", \"-XDdetails:stackMaps\", System.getProperty(\"test.classes\") + \"\/EmptyLoop.class\" }, out);\n+        if (rc != 0)\n+            throw new Error(\"javap failed. rc=\" + rc);\n+        out.close();\n+        System.out.println(sw.toString());\n+        return sw.toString();\n+    }\n+\n+    public static int findNthMatchPrecedingSpaces(String inputString, String searchString, int occurrence) {\n+        String regex = \"^(\\\\s*)\" + Pattern.quote(searchString);\n+        Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);\n+        Matcher matcher = pattern.matcher(inputString);\n+\n+        int count = 0;\n+        while (matcher.find()) {\n+            if (count == occurrence) {\n+                return matcher.group(1).length();\n+            }\n+            count++;\n+        }\n+\n+        throw new Error(\"Could not find \" + searchString + \" in \" + inputString);\n+    }\n+\n+    void error(String msg) {\n+        System.err.println(msg);\n+        errors++;\n+    }\n+\n+    int errors;\n+}\n","filename":"test\/langtools\/tools\/javap\/8034066\/T8034066.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}