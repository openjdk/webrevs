{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n@@ -37,1 +40,1 @@\n-\/**\n+\/*\n@@ -40,1 +43,1 @@\n- * @summary  HttpRequest[.Builder] API and behaviour checks\n+ * @summary HttpRequest[.Builder] API and behaviour checks\n@@ -42,0 +45,1 @@\n+\n@@ -265,7 +269,5 @@\n-        String actualMethod = defaultHeadReq.method();\n-        if (!actualMethod.equals(\"HEAD\")) {\n-            throw new AssertionError(\"failed: expected HEAD method but got method: \" + actualMethod);\n-        }\n-        if (defaultHeadReq.bodyPublisher().isEmpty()) {\n-            throw new AssertionError(\"failed: missing bodyPublisher on HEAD request\");\n-        }\n+        assertEquals(\"HEAD\", defaultHeadReq.method(), \"Method\");\n+        assertEquals(false, defaultHeadReq.bodyPublisher().isEmpty(), \"Body publisher absence\");\n+\n+        verifyCopy();\n+\n@@ -298,7 +300,1 @@\n-\n-        if (expectedMethod.equals(method)) {\n-            System.out.println(\"success: \" + name);\n-        } else {\n-            throw new AssertionError(\"failed: \" + name\n-                    + \". Expected \" + expectedMethod + \", got \" + method);\n-        }\n+        assertEquals(expectedMethod, method, \"Method\");\n@@ -381,0 +377,39 @@\n+    private static void verifyCopy() {\n+\n+        \/\/ Create the request builder\n+        HttpRequest.Builder requestBuilder = HttpRequest\n+                .newBuilder(TEST_URI)\n+                .header(\"X-Foo\", \"1\")\n+                .method(\"GET\", noBody())\n+                .expectContinue(true)\n+                .timeout(Duration.ofSeconds(0xBEEF))\n+                .version(HttpClient.Version.HTTP_2);\n+\n+        \/\/ Create the original and the _copy_ requests\n+        HttpRequest request = requestBuilder.build();\n+        HttpRequest copiedRequest = requestBuilder\n+                .copy()\n+                .header(\"X-Foo\", \"2\")\n+                .header(\"X-Bar\", \"3\")\n+                .build();\n+\n+        \/\/ Verify copied _references_\n+        assertEquals(request.uri(), copiedRequest.uri(), \"URI\");\n+        assertEquals(request.method(), copiedRequest.method(), \"Method\");\n+        assertEquals(request.expectContinue(), copiedRequest.expectContinue(), \"Expect continue setting\");\n+        assertEquals(request.timeout(), copiedRequest.timeout(), \"Timeout\");\n+        assertEquals(request.version(), copiedRequest.version(), \"Version\");\n+\n+        \/\/ Verify headers\n+        assertEquals(request.headers().map(), Map.of(\"X-Foo\", List.of(\"1\")), \"Request headers\");\n+        assertEquals(copiedRequest.headers().map(), Map.of(\"X-Foo\", List.of(\"1\", \"2\"), \"X-Bar\", List.of(\"3\")), \"Copied request headers\");\n+\n+    }\n+\n+    private static void assertEquals(Object expected, Object actual, Object name) {\n+        if (!Objects.equals(expected, actual)) {\n+            String message = String.format(\"%s mismatch!%nExpected: %s%nActual: %s\", name, expected, actual);\n+            throw new AssertionError(message);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestBuilderTest.java","additions":52,"deletions":17,"binary":false,"changes":69,"status":"modified"}]}