{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.util.List;\n+import java.util.Map;\n@@ -272,0 +274,3 @@\n+\n+        verifyCopy();\n+\n@@ -381,0 +386,32 @@\n+    private static void verifyCopy() {\n+\n+        \/\/ Create the request builder\n+        HttpRequest.Builder requestBuilder = HttpRequest\n+                .newBuilder(TEST_URI)\n+                .header(\"X-Foo\", \"1\")\n+                .method(\"GET\", noBody())\n+                .expectContinue(true)\n+                .timeout(Duration.ofSeconds(0xBEEF))\n+                .version(HttpClient.Version.HTTP_2);\n+\n+        \/\/ Create the original and the _copy_ requests\n+        HttpRequest request = requestBuilder.build();\n+        HttpRequest copiedRequest = requestBuilder\n+                .copy()\n+                .header(\"X-Foo\", \"2\")\n+                .header(\"X-Bar\", \"3\")\n+                .build();\n+\n+        \/\/ Verify copied _references_\n+        assert request.uri().equals(copiedRequest.uri());\n+        assert request.method().equals(copiedRequest.method());\n+        assert request.expectContinue() == copiedRequest.expectContinue();\n+        assert request.timeout().equals(copiedRequest.timeout());\n+        assert request.version().equals(copiedRequest.version());\n+\n+        \/\/ Verify headers\n+        assert request.headers().map().equals(Map.of(\"X-Foo\", List.of(\"1\")));\n+        assert copiedRequest.headers().map().equals(Map.of(\"X-Foo\", List.of(\"1\", \"2\"), \"X-Bar\", List.of(\"3\")));\n+\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestBuilderTest.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"}]}