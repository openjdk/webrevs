{"files":[{"patch":"@@ -1275,0 +1275,1 @@\n+  INSN(vfcvt_f_xu_v,     0b1010111, 0b001, 0b00010, 0b010010);\n@@ -1276,0 +1277,1 @@\n+  INSN(vfcvt_rtz_xu_f_v, 0b1010111, 0b001, 0b00110, 0b010010);\n@@ -1279,0 +1281,1 @@\n+  INSN(vfwcvt_f_xu_v,     0b1010111, 0b001, 0b01010, 0b010010);\n@@ -1281,0 +1284,1 @@\n+  INSN(vfwcvt_rtz_xu_f_v, 0b1010111, 0b001, 0b01110, 0b010010);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2424,1 +2424,1 @@\n-                                         VectorRegister src, BasicType src_bt) {\n+                                         VectorRegister src, BasicType src_bt, bool is_signed) {\n@@ -2434,3 +2434,22 @@\n-  if (src_bt == T_BYTE) {\n-    switch (dst_bt) {\n-    case T_SHORT:\n+  if (is_signed) {\n+    if (src_bt == T_BYTE) {\n+      switch (dst_bt) {\n+      case T_SHORT:\n+        vsext_vf2(dst, src);\n+        break;\n+      case T_INT:\n+        vsext_vf4(dst, src);\n+        break;\n+      case T_LONG:\n+        vsext_vf8(dst, src);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+      }\n+    } else if (src_bt == T_SHORT) {\n+      if (dst_bt == T_INT) {\n+        vsext_vf2(dst, src);\n+      } else {\n+        vsext_vf4(dst, src);\n+      }\n+    } else if (src_bt == T_INT) {\n@@ -2438,9 +2457,0 @@\n-      break;\n-    case T_INT:\n-      vsext_vf4(dst, src);\n-      break;\n-    case T_LONG:\n-      vsext_vf8(dst, src);\n-      break;\n-    default:\n-      ShouldNotReachHere();\n@@ -2448,5 +2458,23 @@\n-  } else if (src_bt == T_SHORT) {\n-    if (dst_bt == T_INT) {\n-      vsext_vf2(dst, src);\n-    } else {\n-      vsext_vf4(dst, src);\n+  } else {\n+    if (src_bt == T_BYTE) {\n+      switch (dst_bt) {\n+      case T_SHORT:\n+        vzext_vf2(dst, src);\n+        break;\n+      case T_INT:\n+        vzext_vf4(dst, src);\n+        break;\n+      case T_LONG:\n+        vzext_vf8(dst, src);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+      }\n+    } else if (src_bt == T_SHORT) {\n+      if (dst_bt == T_INT) {\n+        vzext_vf2(dst, src);\n+      } else {\n+        vzext_vf4(dst, src);\n+      }\n+    } else if (src_bt == T_INT) {\n+      vzext_vf2(dst, src);\n@@ -2454,2 +2482,0 @@\n-  } else if (src_bt == T_INT) {\n-    vsext_vf2(dst, src);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":46,"deletions":20,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-                        VectorRegister src, BasicType src_bt);\n+                        VectorRegister src, BasicType src_bt, bool is_signed);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3199,1 +3199,2 @@\n-                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE);\n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE,\n+                          true \/* is_signed *\/);\n@@ -3204,1 +3205,2 @@\n-                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE);\n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE,\n+                          true \/* is_signed *\/);\n@@ -3210,1 +3212,1 @@\n-\/\/ VectorCastS2X\n+\/\/ VectorUCastB2X\n@@ -3212,4 +3214,4 @@\n-instruct vcvtStoB(vReg dst, vReg src) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n-  match(Set dst (VectorCastS2X src));\n-  format %{ \"vcvtStoB $dst, $src\" %}\n+instruct vcvtUBtoX(vReg dst, vReg src) %{\n+  match(Set dst (VectorUCastB2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtUBtoX $dst, $src\" %}\n@@ -3217,2 +3219,12 @@\n-    __ integer_narrow_v(as_VectorRegister($dst$$reg), T_BYTE, Matcher::vector_length(this),\n-                        as_VectorRegister($src$$reg), T_SHORT);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    if (is_floating_point_type(bt)) {\n+      __ integer_extend_v(as_VectorRegister($dst$$reg), bt == T_FLOAT ? T_INT : T_LONG,\n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE,\n+                          false \/* is_signed *\/);\n+      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+      __ vfcvt_f_xu_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    } else {\n+      __ integer_extend_v(as_VectorRegister($dst$$reg), bt,\n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE,\n+                          false \/* is_signed *\/);\n+    }\n@@ -3223,3 +3235,8 @@\n-instruct vcvtStoX_extend(vReg dst, vReg src) %{\n-  predicate((Matcher::vector_element_basic_type(n) == T_INT ||\n-             Matcher::vector_element_basic_type(n) == T_LONG));\n+\/\/ VectorCastS2X, VectorUCastS2X\n+\n+instruct vcvtStoB(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_LONG ||\n+            Matcher::vector_element_basic_type(n) == T_FLOAT ||\n+            Matcher::vector_element_basic_type(n) == T_DOUBLE);\n@@ -3228,1 +3245,1 @@\n-  format %{ \"vcvtStoX_extend $dst, $src\" %}\n+  format %{ \"vcvtStoB $dst, $src\" %}\n@@ -3230,2 +3247,17 @@\n-    __ integer_extend_v(as_VectorRegister($dst$$reg), Matcher::vector_element_basic_type(this),\n-                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    if (bt == T_BYTE) {\n+      __ integer_narrow_v(as_VectorRegister($dst$$reg), T_BYTE, Matcher::vector_length(this),\n+                          as_VectorRegister($src$$reg), T_SHORT);\n+    } else if ((bt == T_INT || bt == T_LONG)) {\n+      __ integer_extend_v(as_VectorRegister($dst$$reg), bt,\n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT,\n+                          true \/* is_signed *\/);\n+    } else {\n+      assert(bt == T_FLOAT || bt == T_DOUBLE, \"must be\");\n+      __ integer_extend_v(as_VectorRegister($dst$$reg), (bt == T_FLOAT ? T_INT : T_LONG),\n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT,\n+                          true \/* is_signed *\/);\n+      __ vsetvli_helper(bt, Matcher::vector_length(this));\n+      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+      __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    }\n@@ -3236,4 +3268,5 @@\n-instruct vcvtStoX_fp_extend(vReg dst, vReg src) %{\n-  predicate((Matcher::vector_element_basic_type(n) == T_FLOAT ||\n-             Matcher::vector_element_basic_type(n) == T_DOUBLE));\n-  match(Set dst (VectorCastS2X src));\n+\n+instruct vcvtUStoX_extend(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (VectorUCastS2X src));\n@@ -3241,1 +3274,1 @@\n-  format %{ \"vcvtStoX_fp_extend $dst, $src\" %}\n+  format %{ \"vcvtUStoX_extend $dst, $src\" %}\n@@ -3243,6 +3276,3 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ integer_extend_v(as_VectorRegister($dst$$reg), (bt == T_FLOAT ? T_INT : T_LONG),\n-                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n-    __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    __ integer_extend_v(as_VectorRegister($dst$$reg), Matcher::vector_element_basic_type(this),\n+                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT,\n+                        false \/* is_signed *\/);\n@@ -3253,1 +3283,1 @@\n-\/\/ VectorCastI2X\n+\/\/ VectorCastI2X, VectorUCastI2X\n@@ -3259,0 +3289,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3275,1 +3306,15 @@\n-                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_INT);\n+                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_INT,\n+                        true \/* is_signed *\/);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtUItoL_extend(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (VectorUCastI2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtUItoL $dst, $src\" %}\n+  ins_encode %{\n+    __ integer_extend_v(as_VectorRegister($dst$$reg), T_LONG,\n+                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_INT,\n+                        false \/* is_signed *\/);\n@@ -3283,0 +3328,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3292,0 +3338,13 @@\n+instruct vcvtUItoF(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (VectorUCastI2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtUItoF $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfcvt_f_xu_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -3305,0 +3364,13 @@\n+instruct vcvtUItoD(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (VectorUCastI2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtUItoD $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfwcvt_f_xu_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -3312,0 +3384,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3324,0 +3397,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3336,0 +3410,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3442,0 +3517,1 @@\n+  effect(TEMP_DEF dst);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":104,"deletions":28,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @key randomness\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on riscv (rvv).\n+ * @requires os.arch == \"riscv64\" & vm.cpu.features ~= \".*v,.*\"\n+ * @library \/test\/lib \/\n+ * @run main\/timeout=300 compiler.vectorapi.reshape.TestVectorCastRVV\n+ *\/\n+public class TestVectorCastRVV {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.RVV_CAST_TESTS.stream(),\n+                \"-XX:+UseRVV\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastRVV.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -36,0 +36,497 @@\n+    public static final List<VectorSpeciesPair> RVV_CAST_TESTS = List.of(\n+        \/\/ ====== from B ======\n+        \/\/ from B 64\n+            \/\/ to X 64\n+            makePair(BSPEC64, SSPEC64),\n+            makePair(BSPEC64, SSPEC64, true),\n+            \/\/ to X 128\n+            makePair(BSPEC64, SSPEC128),\n+            makePair(BSPEC64, SSPEC128, true),\n+            makePair(BSPEC64, ISPEC128),\n+            makePair(BSPEC64, ISPEC128, true),\n+            makePair(BSPEC64, FSPEC128),\n+            \/\/ to X 256\n+            makePair(BSPEC64, SSPEC256),\n+            makePair(BSPEC64, SSPEC256, true),\n+            makePair(BSPEC64, ISPEC256),\n+            makePair(BSPEC64, ISPEC256, true),\n+            makePair(BSPEC64, LSPEC256),\n+            makePair(BSPEC64, LSPEC256, true),\n+            makePair(BSPEC64, FSPEC256),\n+            makePair(BSPEC64, DSPEC256),\n+            \/\/ to X 512\n+            makePair(BSPEC64, SSPEC512),\n+            makePair(BSPEC64, SSPEC512, true),\n+            makePair(BSPEC64, ISPEC512),\n+            makePair(BSPEC64, ISPEC512, true),\n+            makePair(BSPEC64, LSPEC512),\n+            makePair(BSPEC64, LSPEC512, true),\n+            makePair(BSPEC64, FSPEC512),\n+            makePair(BSPEC64, DSPEC512),\n+\n+        \/\/ from B 128\n+            \/\/ to X 64\n+            makePair(BSPEC128, SSPEC64),\n+            makePair(BSPEC128, SSPEC64, true),\n+            \/\/ to X 128\n+            makePair(BSPEC128, SSPEC128),\n+            makePair(BSPEC128, SSPEC128, true),\n+            makePair(BSPEC128, ISPEC128),\n+            makePair(BSPEC128, ISPEC128, true),\n+            makePair(BSPEC128, FSPEC128),\n+            \/\/ to X 256\n+            makePair(BSPEC128, SSPEC256),\n+            makePair(BSPEC128, SSPEC256, true),\n+            makePair(BSPEC128, ISPEC256),\n+            makePair(BSPEC128, ISPEC256, true),\n+            makePair(BSPEC128, LSPEC256),\n+            makePair(BSPEC128, LSPEC256, true),\n+            makePair(BSPEC128, FSPEC256),\n+            makePair(BSPEC128, DSPEC256),\n+            \/\/ to X 512\n+            makePair(BSPEC128, SSPEC512),\n+            makePair(BSPEC128, SSPEC512, true),\n+            makePair(BSPEC128, ISPEC512),\n+            makePair(BSPEC128, ISPEC512, true),\n+            makePair(BSPEC128, LSPEC512),\n+            makePair(BSPEC128, LSPEC512, true),\n+            makePair(BSPEC128, FSPEC512),\n+            makePair(BSPEC128, DSPEC512),\n+\n+        \/\/ from B 256\n+            \/\/ to X 64\n+            makePair(BSPEC256, SSPEC64),\n+            makePair(BSPEC256, SSPEC64, true),\n+            \/\/ to X 128\n+            makePair(BSPEC256, SSPEC128),\n+            makePair(BSPEC256, SSPEC128, true),\n+            makePair(BSPEC256, ISPEC128),\n+            makePair(BSPEC256, ISPEC128, true),\n+            makePair(BSPEC256, FSPEC128),\n+            \/\/ to X 256\n+            makePair(BSPEC256, SSPEC256),\n+            makePair(BSPEC256, SSPEC256, true),\n+            makePair(BSPEC256, ISPEC256),\n+            makePair(BSPEC256, ISPEC256, true),\n+            makePair(BSPEC256, LSPEC256),\n+            makePair(BSPEC256, LSPEC256, true),\n+            makePair(BSPEC256, FSPEC256),\n+            makePair(BSPEC256, DSPEC256),\n+            \/\/ to X 512\n+            makePair(BSPEC256, SSPEC512),\n+            makePair(BSPEC256, SSPEC512, true),\n+            makePair(BSPEC256, ISPEC512),\n+            makePair(BSPEC256, ISPEC512, true),\n+            makePair(BSPEC256, LSPEC512),\n+            makePair(BSPEC256, LSPEC512, true),\n+            makePair(BSPEC256, FSPEC512),\n+            makePair(BSPEC256, DSPEC512),\n+\n+\n+        \/\/ ====== from S ======\n+        \/\/ from S 64\n+            \/\/ to X 64\n+            makePair(SSPEC64, BSPEC64),\n+            \/\/ to X 128\n+            makePair(SSPEC64, BSPEC128),\n+            makePair(SSPEC64, ISPEC128),\n+            makePair(SSPEC64, ISPEC128, true),\n+            makePair(SSPEC64, FSPEC128),\n+            \/\/ to X 256\n+            makePair(SSPEC64, BSPEC256),\n+            makePair(SSPEC64, ISPEC256),\n+            makePair(SSPEC64, ISPEC256, true),\n+            makePair(SSPEC64, LSPEC256),\n+            makePair(SSPEC64, LSPEC256, true),\n+            makePair(SSPEC64, FSPEC256),\n+            makePair(SSPEC64, DSPEC256),\n+            \/\/ to X 512\n+            makePair(SSPEC64, BSPEC512),\n+            makePair(SSPEC64, ISPEC512),\n+            makePair(SSPEC64, ISPEC512, true),\n+            makePair(SSPEC64, LSPEC512),\n+            makePair(SSPEC64, LSPEC512, true),\n+            makePair(SSPEC64, FSPEC512),\n+            makePair(SSPEC64, DSPEC512),\n+\n+        \/\/ from S 128\n+            \/\/ to X 64\n+            makePair(SSPEC128, BSPEC64),\n+            \/\/ to X 128\n+            makePair(SSPEC128, BSPEC128),\n+            makePair(SSPEC128, ISPEC128),\n+            makePair(SSPEC128, ISPEC128, true),\n+            makePair(SSPEC128, FSPEC128),\n+            \/\/ to X 256\n+            makePair(SSPEC128, BSPEC256),\n+            makePair(SSPEC128, ISPEC256),\n+            makePair(SSPEC128, ISPEC256, true),\n+            makePair(SSPEC128, LSPEC256),\n+            makePair(SSPEC128, LSPEC256, true),\n+            makePair(SSPEC128, FSPEC256),\n+            makePair(SSPEC128, DSPEC256),\n+            \/\/ to X 512\n+            makePair(SSPEC128, BSPEC512),\n+            makePair(SSPEC128, ISPEC512),\n+            makePair(SSPEC128, ISPEC512, true),\n+            makePair(SSPEC128, LSPEC512),\n+            makePair(SSPEC128, LSPEC512, true),\n+            makePair(SSPEC128, FSPEC512),\n+            makePair(SSPEC128, DSPEC512),\n+\n+        \/\/ from S 256\n+            \/\/ to X 64\n+            makePair(SSPEC256, BSPEC64),\n+            \/\/ to X 128\n+            makePair(SSPEC256, BSPEC128),\n+            makePair(SSPEC256, ISPEC128),\n+            makePair(SSPEC256, ISPEC128, true),\n+            makePair(SSPEC256, FSPEC128),\n+            \/\/ to X 256\n+            makePair(SSPEC256, BSPEC256),\n+            makePair(SSPEC256, ISPEC256),\n+            makePair(SSPEC256, ISPEC256, true),\n+            makePair(SSPEC256, LSPEC256),\n+            makePair(SSPEC256, LSPEC256, true),\n+            makePair(SSPEC256, FSPEC256),\n+            makePair(SSPEC256, DSPEC256),\n+            \/\/ to X 512\n+            makePair(SSPEC256, BSPEC512),\n+            makePair(SSPEC256, ISPEC512),\n+            makePair(SSPEC256, ISPEC512, true),\n+            makePair(SSPEC256, LSPEC512),\n+            makePair(SSPEC256, LSPEC512, true),\n+            makePair(SSPEC256, FSPEC512),\n+            makePair(SSPEC256, DSPEC512),\n+\n+        \/\/ from S 512\n+            \/\/ to X 64\n+            makePair(SSPEC512, BSPEC64),\n+            \/\/ to X 128\n+            makePair(SSPEC512, BSPEC128),\n+            makePair(SSPEC512, ISPEC128),\n+            makePair(SSPEC512, ISPEC128, true),\n+            makePair(SSPEC512, FSPEC128),\n+            \/\/ to X 256\n+            makePair(SSPEC512, BSPEC256),\n+            makePair(SSPEC512, ISPEC256),\n+            makePair(SSPEC512, ISPEC256, true),\n+            makePair(SSPEC512, LSPEC256),\n+            makePair(SSPEC512, LSPEC256, true),\n+            makePair(SSPEC512, FSPEC256),\n+            makePair(SSPEC512, DSPEC256),\n+            \/\/ to X 512\n+            makePair(SSPEC512, BSPEC512),\n+            makePair(SSPEC512, ISPEC512),\n+            makePair(SSPEC512, ISPEC512, true),\n+            makePair(SSPEC512, LSPEC512),\n+            makePair(SSPEC512, LSPEC512, true),\n+            makePair(SSPEC512, FSPEC512),\n+            makePair(SSPEC512, DSPEC512),\n+\n+\n+        \/\/ ====== from I ======\n+        \/\/ from I 64\n+            \/\/ to X 64\n+            makePair(ISPEC64, FSPEC64),\n+            \/\/ to X 128\n+            makePair(ISPEC64, LSPEC128),\n+            makePair(ISPEC64, LSPEC128, true),\n+            makePair(ISPEC64, FSPEC128),\n+            makePair(ISPEC64, DSPEC128),\n+\n+        \/\/ from I 128\n+            \/\/ to X 64\n+            makePair(ISPEC128, BSPEC64),\n+            makePair(ISPEC128, SSPEC64),\n+            makePair(ISPEC128, FSPEC64),\n+            \/\/ to X 128\n+            makePair(ISPEC128, BSPEC128),\n+            makePair(ISPEC128, SSPEC128),\n+            makePair(ISPEC128, LSPEC128),\n+            makePair(ISPEC128, LSPEC128, true),\n+            makePair(ISPEC128, FSPEC128),\n+            makePair(ISPEC128, DSPEC128),\n+            \/\/ to X 256\n+            makePair(ISPEC128, BSPEC256),\n+            makePair(ISPEC128, SSPEC256),\n+            makePair(ISPEC128, LSPEC256),\n+            makePair(ISPEC128, LSPEC256, true),\n+            makePair(ISPEC128, FSPEC256),\n+            makePair(ISPEC128, DSPEC256),\n+\n+        \/\/ from I 256\n+            \/\/ to X 64\n+            makePair(ISPEC256, BSPEC64),\n+            makePair(ISPEC256, SSPEC64),\n+            makePair(ISPEC256, FSPEC64),\n+            \/\/ to X 128\n+            makePair(ISPEC256, BSPEC128),\n+            makePair(ISPEC256, SSPEC128),\n+            makePair(ISPEC256, LSPEC128),\n+            makePair(ISPEC256, LSPEC128, true),\n+            makePair(ISPEC256, FSPEC128),\n+            makePair(ISPEC256, DSPEC128),\n+            \/\/ to X 256\n+            makePair(ISPEC256, BSPEC256),\n+            makePair(ISPEC256, SSPEC256),\n+            makePair(ISPEC256, LSPEC256),\n+            makePair(ISPEC256, LSPEC256, true),\n+            makePair(ISPEC256, FSPEC256),\n+            makePair(ISPEC256, DSPEC256),\n+\n+        \/\/ from I 512\n+            \/\/ to X 64\n+            makePair(ISPEC512, BSPEC64),\n+            makePair(ISPEC512, SSPEC64),\n+            makePair(ISPEC512, FSPEC64),\n+            \/\/ to X 128\n+            makePair(ISPEC512, BSPEC128),\n+            makePair(ISPEC512, SSPEC128),\n+            makePair(ISPEC512, LSPEC128),\n+            makePair(ISPEC512, LSPEC128, true),\n+            makePair(ISPEC512, FSPEC128),\n+            makePair(ISPEC512, DSPEC128),\n+            \/\/ to X 256\n+            makePair(ISPEC512, BSPEC256),\n+            makePair(ISPEC512, SSPEC256),\n+            makePair(ISPEC512, LSPEC256),\n+            makePair(ISPEC512, LSPEC256, true),\n+            makePair(ISPEC512, FSPEC256),\n+            makePair(ISPEC512, DSPEC256),\n+\n+\n+        \/\/ ====== from L ======\n+        \/\/ from L 128\n+            \/\/ to X 64\n+            makePair(LSPEC128, ISPEC64),\n+            makePair(LSPEC128, FSPEC64),\n+            makePair(LSPEC128, DSPEC64),\n+            \/\/ to X 128\n+            makePair(LSPEC128, ISPEC128),\n+            makePair(LSPEC128, FSPEC128),\n+            makePair(LSPEC128, DSPEC128),\n+            \/\/ to X 256\n+            makePair(LSPEC128, ISPEC256),\n+            makePair(LSPEC128, FSPEC256),\n+            makePair(LSPEC128, DSPEC256),\n+            \/\/ to X 512\n+            makePair(LSPEC128, ISPEC512),\n+            makePair(LSPEC128, FSPEC512),\n+            makePair(LSPEC128, DSPEC512),\n+\n+        \/\/ from L 256\n+            \/\/ to X 64\n+            makePair(LSPEC256, BSPEC64),\n+            makePair(LSPEC256, SSPEC64),\n+            makePair(LSPEC256, ISPEC64),\n+            makePair(LSPEC256, FSPEC64),\n+            \/\/ to X 128\n+            makePair(LSPEC256, BSPEC128),\n+            makePair(LSPEC256, SSPEC128),\n+            makePair(LSPEC256, ISPEC128),\n+            makePair(LSPEC256, FSPEC128),\n+            makePair(LSPEC256, DSPEC128),\n+            \/\/ to X 256\n+            makePair(LSPEC256, BSPEC256),\n+            makePair(LSPEC256, SSPEC256),\n+            makePair(LSPEC256, ISPEC256),\n+            makePair(LSPEC256, FSPEC256),\n+            makePair(LSPEC256, DSPEC256),\n+            \/\/ to X 512\n+            makePair(LSPEC256, BSPEC512),\n+            makePair(LSPEC256, SSPEC512),\n+            makePair(LSPEC256, ISPEC512),\n+            makePair(LSPEC256, FSPEC512),\n+            makePair(LSPEC256, DSPEC512),\n+\n+        \/\/ from L 512\n+            \/\/ to X 64\n+            makePair(LSPEC512, BSPEC64),\n+            makePair(LSPEC512, SSPEC64),\n+            makePair(LSPEC512, ISPEC64),\n+            makePair(LSPEC512, FSPEC64),\n+            \/\/ to X 128\n+            makePair(LSPEC512, BSPEC128),\n+            makePair(LSPEC512, SSPEC128),\n+            makePair(LSPEC512, ISPEC128),\n+            makePair(LSPEC512, FSPEC128),\n+            makePair(LSPEC512, DSPEC128),\n+            \/\/ to X 256\n+            makePair(LSPEC512, BSPEC256),\n+            makePair(LSPEC512, SSPEC256),\n+            makePair(LSPEC512, ISPEC256),\n+            makePair(LSPEC512, FSPEC256),\n+            makePair(LSPEC512, DSPEC256),\n+            \/\/ to X 512\n+            makePair(LSPEC512, BSPEC512),\n+            makePair(LSPEC512, SSPEC512),\n+            makePair(LSPEC512, ISPEC512),\n+            makePair(LSPEC512, FSPEC512),\n+            makePair(LSPEC512, DSPEC512),\n+\n+\n+        \/\/ ====== from F ======\n+        \/\/ from F 64\n+            \/\/ to X 64\n+            makePair(FSPEC64, ISPEC64),\n+            makePair(FSPEC64, ISPEC64, true),\n+            \/\/ to X 128\n+            makePair(FSPEC64, ISPEC128),\n+            makePair(FSPEC64, ISPEC128, true),\n+            makePair(FSPEC64, LSPEC128),\n+            makePair(FSPEC64, LSPEC128, true),\n+            makePair(FSPEC64, DSPEC128),\n+\n+        \/\/ from F 128\n+            \/\/ to X 64\n+            makePair(FSPEC128, BSPEC64),\n+            makePair(FSPEC128, SSPEC64),\n+            makePair(FSPEC128, ISPEC64),\n+            \/\/ to X 128\n+            makePair(FSPEC128, BSPEC128),\n+            makePair(FSPEC128, SSPEC128),\n+            makePair(FSPEC128, ISPEC128),\n+            makePair(FSPEC128, ISPEC128, true),\n+            makePair(FSPEC128, LSPEC128),\n+            makePair(FSPEC128, LSPEC128, true),\n+            makePair(FSPEC128, DSPEC128),\n+            \/\/ to X 256\n+            makePair(FSPEC128, BSPEC256),\n+            makePair(FSPEC128, SSPEC256),\n+            makePair(FSPEC128, ISPEC256),\n+            makePair(FSPEC128, ISPEC256, true),\n+            makePair(FSPEC128, LSPEC256),\n+            makePair(FSPEC128, LSPEC256, true),\n+            makePair(FSPEC128, DSPEC256),\n+\n+        \/\/ from F 256\n+            \/\/ to X 64\n+            makePair(FSPEC256, BSPEC64),\n+            makePair(FSPEC256, SSPEC64),\n+            makePair(FSPEC256, ISPEC64),\n+            \/\/ to X 128\n+            makePair(FSPEC256, BSPEC128),\n+            makePair(FSPEC256, SSPEC128),\n+            makePair(FSPEC256, ISPEC128),\n+            makePair(FSPEC256, ISPEC128, true),\n+            makePair(FSPEC256, LSPEC128),\n+            makePair(FSPEC256, LSPEC128, true),\n+            makePair(FSPEC256, DSPEC128),\n+            \/\/ to X 256\n+            makePair(FSPEC256, BSPEC256),\n+            makePair(FSPEC256, SSPEC256),\n+            makePair(FSPEC256, ISPEC256),\n+            makePair(FSPEC256, ISPEC256, true),\n+            makePair(FSPEC256, LSPEC256),\n+            makePair(FSPEC256, LSPEC256, true),\n+            makePair(FSPEC256, DSPEC256),\n+\n+        \/\/ from F 512\n+            \/\/ to X 64\n+            makePair(FSPEC512, BSPEC64),\n+            makePair(FSPEC512, SSPEC64),\n+            makePair(FSPEC512, ISPEC64),\n+            \/\/ to X 128\n+            makePair(FSPEC512, BSPEC128),\n+            makePair(FSPEC512, SSPEC128),\n+            makePair(FSPEC512, ISPEC128),\n+            makePair(FSPEC512, ISPEC128, true),\n+            makePair(FSPEC512, LSPEC128),\n+            makePair(FSPEC512, LSPEC128, true),\n+            makePair(FSPEC512, DSPEC128),\n+            \/\/ to X 256\n+            makePair(FSPEC512, BSPEC256),\n+            makePair(FSPEC512, SSPEC256),\n+            makePair(FSPEC512, ISPEC256),\n+            makePair(FSPEC512, ISPEC256, true),\n+            makePair(FSPEC512, LSPEC256),\n+            makePair(FSPEC512, LSPEC256, true),\n+            makePair(FSPEC512, DSPEC256),\n+\n+\n+        \/\/ ====== from D ======\n+        \/\/ from D 128\n+            \/\/ to X 64\n+            makePair(DSPEC128, ISPEC64),\n+            makePair(DSPEC128, LSPEC64),\n+            makePair(DSPEC128, LSPEC64, true),\n+            makePair(DSPEC128, FSPEC64),\n+            \/\/ to X 128\n+            makePair(DSPEC128, ISPEC128),\n+            makePair(DSPEC128, LSPEC128),\n+            makePair(DSPEC128, LSPEC128, true),\n+            makePair(DSPEC128, FSPEC128),\n+            \/\/ to X 256\n+            makePair(DSPEC128, ISPEC256),\n+            makePair(DSPEC128, LSPEC256),\n+            makePair(DSPEC128, LSPEC256, true),\n+            makePair(DSPEC128, FSPEC256),\n+            \/\/ to X 512\n+            makePair(DSPEC128, ISPEC512),\n+            makePair(DSPEC128, LSPEC512),\n+            makePair(DSPEC128, LSPEC512, true),\n+            makePair(DSPEC128, FSPEC512),\n+\n+        \/\/ from D 256\n+            \/\/ to X 64\n+            makePair(DSPEC256, BSPEC64),\n+            makePair(DSPEC256, SSPEC64),\n+            makePair(DSPEC256, ISPEC64),\n+            makePair(DSPEC256, LSPEC64),\n+            makePair(DSPEC256, LSPEC64, true),\n+            makePair(DSPEC256, FSPEC64),\n+            \/\/ to X 128\n+            makePair(DSPEC256, BSPEC128),\n+            makePair(DSPEC256, SSPEC128),\n+            makePair(DSPEC256, ISPEC128),\n+            makePair(DSPEC256, LSPEC128),\n+            makePair(DSPEC256, LSPEC128, true),\n+            makePair(DSPEC256, FSPEC128),\n+            \/\/ to X 256\n+            makePair(DSPEC256, BSPEC256),\n+            makePair(DSPEC256, SSPEC256),\n+            makePair(DSPEC256, ISPEC256),\n+            makePair(DSPEC256, LSPEC256),\n+            makePair(DSPEC256, LSPEC256, true),\n+            makePair(DSPEC256, FSPEC256),\n+            \/\/ to X 512\n+            makePair(DSPEC256, BSPEC512),\n+            makePair(DSPEC256, SSPEC512),\n+            makePair(DSPEC256, ISPEC512),\n+            makePair(DSPEC256, LSPEC512),\n+            makePair(DSPEC256, LSPEC512, true),\n+            makePair(DSPEC256, FSPEC512),\n+\n+        \/\/ from D 512\n+            \/\/ to X 64\n+            makePair(DSPEC512, BSPEC64),\n+            makePair(DSPEC512, SSPEC64),\n+            makePair(DSPEC512, ISPEC64),\n+            makePair(DSPEC512, LSPEC64),\n+            makePair(DSPEC512, LSPEC64, true),\n+            makePair(DSPEC512, FSPEC64),\n+            \/\/ to X 128\n+            makePair(DSPEC512, BSPEC128),\n+            makePair(DSPEC512, SSPEC128),\n+            makePair(DSPEC512, ISPEC128),\n+            makePair(DSPEC512, LSPEC128),\n+            makePair(DSPEC512, LSPEC128, true),\n+            makePair(DSPEC512, FSPEC128),\n+            \/\/ to X 256\n+            makePair(DSPEC512, BSPEC256),\n+            makePair(DSPEC512, SSPEC256),\n+            makePair(DSPEC512, ISPEC256),\n+            makePair(DSPEC512, LSPEC256),\n+            makePair(DSPEC512, LSPEC256, true),\n+            makePair(DSPEC512, FSPEC256),\n+            \/\/ to X 512\n+            makePair(DSPEC512, BSPEC512),\n+            makePair(DSPEC512, SSPEC512),\n+            makePair(DSPEC512, ISPEC512),\n+            makePair(DSPEC512, LSPEC512),\n+            makePair(DSPEC512, LSPEC512, true),\n+            makePair(DSPEC512, FSPEC512)\n+\n+    );\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/TestCastMethods.java","additions":497,"deletions":0,"binary":false,"changes":497,"status":"modified"}]}