{"files":[{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.java.text;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-import java.text.DateFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.Throughput)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-@Warmup(iterations = 5, time = 1)\n-@Measurement(iterations = 5, time = 1)\n-@Fork(3)\n-@State(Scope.Benchmark)\n-public class DateFormatterBench {\n-\n-    private Date date;\n-    private Object objDate;\n-    private String dateStr;\n-    private String timeStr;\n-\n-    private final String datePattern = \"EEEE, MMMM d, y\";\n-    private final String timePattern = \"h:mm:ss a zzzz\";\n-\n-    \/\/ Use non-factory methods w\/ pattern to ensure test data can be round\n-    \/\/ tripped and guarantee no re-use of the same instance\n-    private DateFormat dateFormat = new SimpleDateFormat(datePattern);\n-    private DateFormat timeFormat = new SimpleDateFormat(timePattern);\n-\n-    @Setup\n-    public void setup() {\n-        date = new Date();\n-        objDate = new Date();\n-        \/\/ Generate the strings for parsing using dedicated separate instances\n-        dateStr = new SimpleDateFormat(datePattern).format(date);\n-        timeStr = new SimpleDateFormat(timePattern).format(date);\n-    }\n-\n-    @Benchmark\n-    public String testTimeFormat() {\n-        return timeFormat.format(date);\n-    }\n-\n-    @Benchmark\n-    public String testTimeFormatObject() {\n-        return timeFormat.format(objDate);\n-    }\n-\n-    @Benchmark\n-    public String testDateFormat() {\n-        return dateFormat.format(date);\n-    }\n-\n-    @Benchmark\n-    public String testDateFormatObject() {\n-        return dateFormat.format(objDate);\n-    }\n-\n-    @Benchmark\n-    public Date testDateParse() throws ParseException {\n-        return dateFormat.parse(dateStr);\n-    }\n-\n-    @Benchmark\n-    public Date testTimeParse() throws ParseException {\n-        return timeFormat.parse(timeStr);\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        Options opts = new OptionsBuilder().include(DateFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n-        new Runner(opts).run();\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/DateFormatterBench.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.text;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class SimpleDateFormatterBench {\n+\n+    private Date date;\n+    private Object objDate;\n+    private String dateStr;\n+    private String timeStr;\n+\n+    private static final String DATE_PATTERN = \"EEEE, MMMM d, y\";\n+    private static final String TIME_PATTERN = \"h:mm:ss a zzzz\";\n+\n+    \/\/ Use non-factory methods w\/ pattern to ensure test data can be round\n+    \/\/ tripped and guarantee no re-use of the same instance\n+    private DateFormat dateFormat = new SimpleDateFormat(DATE_PATTERN);\n+    private DateFormat timeFormat = new SimpleDateFormat(TIME_PATTERN);\n+\n+    @Setup\n+    public void setup() {\n+        date = new Date();\n+        objDate = new Date();\n+        \/\/ Generate the strings for parsing using dedicated separate instances\n+        dateStr = new SimpleDateFormat(DATE_PATTERN).format(date);\n+        timeStr = new SimpleDateFormat(TIME_PATTERN).format(date);\n+    }\n+\n+    @Benchmark\n+    public String testTimeFormat() {\n+        return timeFormat.format(date);\n+    }\n+\n+    @Benchmark\n+    public String testTimeFormatObject() {\n+        return timeFormat.format(objDate);\n+    }\n+\n+    @Benchmark\n+    public String testDateFormat() {\n+        return dateFormat.format(date);\n+    }\n+\n+    @Benchmark\n+    public String testDateFormatObject() {\n+        return dateFormat.format(objDate);\n+    }\n+\n+    @Benchmark\n+    public Date testDateParse() throws ParseException {\n+        return dateFormat.parse(dateStr);\n+    }\n+\n+    @Benchmark\n+    public Date testTimeParse() throws ParseException {\n+        return timeFormat.parse(timeStr);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        Options opts = new OptionsBuilder().include(org.openjdk.bench.java.text.SimpleDateFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/SimpleDateFormatterBench.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}