{"files":[{"patch":"@@ -233,0 +233,18 @@\n+HeapWord* MutableSpace::block_start(const void* addr) const {\n+  if (addr >= top()) {\n+    return nullptr;\n+  }\n+\n+  HeapWord* cur_addr = bottom();\n+  while (cur_addr <= addr) {\n+    oop obj = cast_to_oop(cur_addr);\n+    assert(oopDesc::is_oop(obj), PTR_FORMAT \" should be an object start\", p2i(cur_addr));\n+    size_t obj_size = obj->size();\n+    if (cur_addr + obj_size > addr) {\n+      return cur_addr;\n+    }\n+    cur_addr += obj_size;\n+  }\n+  ShouldNotReachHere();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -139,0 +139,2 @@\n+  HeapWord* block_start(const void* addr) const;\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -672,3 +672,2 @@\n-    \/\/ called from os::print_location by find or VMError\n-    if (DebuggingContext::is_enabled() || VMError::is_error_reported()) {\n-      return nullptr;\n+    if (young_gen()->eden_space()->contains(addr)) {\n+      return young_gen()->eden_space()->block_start(addr);\n@@ -676,1 +675,5 @@\n-    Unimplemented();\n+    if (young_gen()->from_space()->contains(addr)) {\n+      return young_gen()->from_space()->block_start(addr);\n+    }\n+    assert(young_gen()->to_space()->contains(addr), \"inv\");\n+    return young_gen()->to_space()->block_start(addr);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}