{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8165944\n+ * @bug 8165944 8318971\n@@ -140,0 +140,17 @@\n+    @Test\n+    public void testMultipleFilesInClassesList() throws IOException {\n+        touch(\"test\");\n+        touch(\"classes.list\");\n+        Files.writeString(Path.of(\"classes.list\"), \"\"\"\n+                test\n+                 \"\"\");\n+        jar(\"cf test.jar @classes.list\");\n+        jar(\"tf test.jar\");\n+        println();\n+        String output = \"META-INF\/\" + nl +\n+                \"META-INF\/MANIFEST.MF\" + nl +\n+                \"test\" + nl;\n+        rm(\"test.jar test classes.list\");\n+        Assert.assertEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n@@ -156,0 +173,31 @@\n+    @Test(expectedExceptions = {IOException.class})\n+    public void testNonExistentFileInput() throws IOException {\n+        touch(\"existingTestFile.txt\");\n+        onCompletion = () -> rm(\"existingTestFile.txt\");\n+        try {\n+            jar(\"cf test.jar existingTestFile.txt nonExistentTestFile.txt\");\n+        } catch (IOException e) {\n+            Assert.assertEquals(e.getMessage().trim(), \"nonExistentTestFile.txt : no such file or directory\");\n+            Assert.assertTrue(Files.notExists(Path.of(\"test.jar\")), \"Jar file should not be created.\");\n+            throw e;\n+        }\n+    }\n+\n+    @Test(expectedExceptions = {IOException.class})\n+    public void testNonExistentFileInputClassList() throws IOException {\n+        touch(\"existingTestFile.txt\");\n+        touch(\"classes.list\");\n+        Files.writeString(Path.of(\"classes.list\"), \"\"\"\n+                existingTestFile.txt\n+                nonExistentTestFile.txt\n+                 \"\"\");\n+        onCompletion = () -> rm(\"existingTestFile.txt classes.list\");\n+        try {\n+            jar(\"cf test.jar @classes.list\");\n+        } catch (IOException e) {\n+            Assert.assertEquals(e.getMessage().trim(), \"nonExistentTestFile.txt : no such file or directory\");\n+            Assert.assertTrue(Files.notExists(Path.of(\"test.jar\")), \"Jar file should not be created.\");\n+            throw e;\n+        }\n+    }\n+\n","filename":"test\/jdk\/tools\/jar\/InputFilesTest.java","additions":50,"deletions":2,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import java.nio.file.Paths;\n@@ -215,6 +214,1 @@\n-        expectFail(JAR, \"cvf non-existing.jar non-existing.file\");\n-        if (Files.exists(Paths.get(\"non-existing.jar\"))) {\n-            out.println(\"FAIL: Incomplete non-existing.jar was created\");\n-            failCount++;\n-        }\n-\n+        expectFail(JAR, \"cvf A.jar non-existing.file\");\n","filename":"test\/langtools\/tools\/javac\/Paths\/ClassPath.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}