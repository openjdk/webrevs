{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -207,2 +207,0 @@\n-    char buf[256];\n-    size_t n;\n@@ -210,1 +208,1 @@\n-    jstring why = NULL;\n+    jstring why;\n@@ -212,5 +210,2 @@\n-    n = getLastErrorString(buf, sizeof(buf));\n-    if (n > 0) {\n-        why = JNU_NewStringPlatform(env, buf);\n-        CHECK_NULL(why);\n-    }\n+    why = getLastErrorString(env);\n+    JNU_CHECK_EXCEPTION(env);\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,11 +106,7 @@\n-    char buf[256];\n-    size_t n = getLastErrorString(buf, sizeof(buf));\n-\n-    if (n > 0) {\n-        jstring s = JNU_NewStringPlatform(env, buf);\n-        if (s != NULL) {\n-            jobject x = JNU_NewObjectByName(env, name,\n-                                            \"(Ljava\/lang\/String;)V\", s);\n-            if (x != NULL) {\n-                (*env)->Throw(env, x);\n-            }\n+    jstring s = getLastErrorString(env);\n+\n+    if (s != NULL) {\n+        jobject x = JNU_NewObjectByName(env, name,\n+                                        \"(Ljava\/lang\/String;)V\", s);\n+        if (x != NULL) {\n+            (*env)->Throw(env, x);\n@@ -132,2 +128,0 @@\n-    char buf[256];\n-    size_t n = getLastErrorString(buf, sizeof(buf));\n@@ -136,15 +130,21 @@\n-    if (n > 0) {\n-        jstring s = JNU_NewStringPlatform(env, buf);\n-        if (s != NULL) {\n-            jobject x = NULL;\n-            if (messagelen) {\n-                jstring s2 = NULL;\n-                size_t messageextlen = messagelen + 4;\n-                char *str1 = (char *)malloc((messageextlen) * sizeof(char));\n-                if (str1 == 0) {\n-                    JNU_ThrowOutOfMemoryError(env, 0);\n-                    return;\n-                }\n-                jio_snprintf(str1, messageextlen, \" (%s)\", message);\n-                s2 = (*env)->NewStringUTF(env, str1);\n-                free(str1);\n+    jstring s = getLastErrorString(env);\n+    if (s != NULL) {\n+        jobject x = NULL;\n+        if (messagelen > 0) {\n+            jstring s2 = NULL;\n+            size_t messageextlen = messagelen + 4;\n+            char *str1 = (char *)malloc((messageextlen) * sizeof(char));\n+            if (str1 == NULL) {\n+                JNU_ThrowOutOfMemoryError(env, 0);\n+                return;\n+            }\n+            jio_snprintf(str1, messageextlen, \" (%s)\", message);\n+            s2 = (*env)->NewStringUTF(env, str1);\n+            free(str1);\n+            JNU_CHECK_EXCEPTION(env);\n+            if (s2 != NULL) {\n+                jstring s3 = JNU_CallMethodByName(\n+                                 env, NULL, s, \"concat\",\n+                                 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\",\n+                                 s2).l;\n+                (*env)->DeleteLocalRef(env, s2);\n@@ -152,11 +152,3 @@\n-                if (s2 != NULL) {\n-                    jstring s3 = JNU_CallMethodByName(\n-                                     env, NULL, s, \"concat\",\n-                                     \"(Ljava\/lang\/String;)Ljava\/lang\/String;\",\n-                                     s2).l;\n-                    (*env)->DeleteLocalRef(env, s2);\n-                    JNU_CHECK_EXCEPTION(env);\n-                    if (s3 != NULL) {\n-                        (*env)->DeleteLocalRef(env, s);\n-                        s = s3;\n-                    }\n+                if (s3 != NULL) {\n+                    (*env)->DeleteLocalRef(env, s);\n+                    s = s3;\n@@ -165,4 +157,4 @@\n-            x = JNU_NewObjectByName(env, name, \"(Ljava\/lang\/String;)V\", s);\n-            if (x != NULL) {\n-                (*env)->Throw(env, x);\n-            }\n+        }\n+        x = JNU_NewObjectByName(env, name, \"(Ljava\/lang\/String;)V\", s);\n+        if (x != NULL) {\n+            (*env)->Throw(env, x);\n@@ -173,1 +165,1 @@\n-        if (messagelen) {\n+        if (messagelen > 0) {\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.c","additions":37,"deletions":45,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,2 +339,1 @@\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len);\n+jstring getLastErrorString(JNIEnv *env);\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.h","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -767,1 +767,2 @@\n- * set to NULL. Caller is responsible to free the error message.\n+ * set to NULL. Caller doesn't need to free the error message.\n+ * The error message, if set, points to a static thread-safe buffer.\n@@ -793,1 +794,1 @@\n- * is responsible to free the error message.\n+ * doesn't need to free the error message.\n@@ -812,1 +813,1 @@\n-            *pmsg = strdup(\"zip file name too long\");\n+            *pmsg = \"zip file name too long\";\n@@ -837,1 +838,1 @@\n- * pmsg != 0. Otherwise, *pmsg will be set to NULL. Caller is responsible to\n+ * pmsg != 0. Otherwise, *pmsg will be set to NULL. Caller doesn't need to\n@@ -866,2 +867,2 @@\n-        if (pmsg && getLastErrorString(errbuf, sizeof(errbuf)) > 0)\n-            *pmsg = strdup(errbuf);\n+        if (pmsg)\n+            *pmsg = \"ZFILE_Open failed\";\n@@ -881,1 +882,1 @@\n-                *pmsg = strdup(\"zip file is empty\");\n+                *pmsg = \"zip file is empty\";\n@@ -884,2 +885,2 @@\n-            if (pmsg && getLastErrorString(errbuf, sizeof(errbuf)) > 0)\n-                *pmsg = strdup(errbuf);\n+            if (pmsg)\n+                *pmsg = \"IO_Lseek failed\";\n@@ -897,2 +898,1 @@\n-            if (zip->msg != NULL)\n-                *pmsg = strdup(zip->msg);\n+            *pmsg = zip->msg;\n@@ -921,4 +921,0 @@\n-    if (file == NULL && pmsg != NULL && *pmsg != NULL) {\n-        free(*pmsg);\n-        *pmsg = \"Zip file open error\";\n-    }\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,2 @@\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len)\n+jstring\n+getLastErrorString(JNIEnv *env)\n@@ -66,3 +66,4 @@\n-    if (errno == 0 || len < 1) return 0;\n-    getErrorString(errno, buf, len);\n-    return strlen(buf);\n+    char buf[256] = {0};\n+    if (errno == 0) return NULL;\n+    getErrorString(errno, buf, sizeof(buf));\n+    return (buf[0] != 0) ? JNU_NewStringPlatform(env, buf) : NULL;\n","filename":"src\/java.base\/unix\/native\/libjava\/jni_util_md.c","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,2 @@\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len) {\n+jstring\n+getLastErrorString(JNIEnv *env) {\n@@ -69,0 +69,1 @@\n+#define BUFSIZE 256\n@@ -70,0 +71,1 @@\n+    WCHAR buf[BUFSIZE];\n@@ -73,1 +75,1 @@\n-        size_t n = (size_t)FormatMessage(\n+        jsize n = FormatMessageW(\n@@ -79,1 +81,1 @@\n-                (DWORD)len,\n+                BUFSIZE,\n@@ -83,4 +85,4 @@\n-            if (buf[n - 1] == '\\n') n--;\n-            if (buf[n - 1] == '\\r') n--;\n-            if (buf[n - 1] == '.') n--;\n-            buf[n] = '\\0';\n+            if (buf[n - 1] == L'\\n') n--;\n+            if (buf[n - 1] == L'\\r') n--;\n+            if (buf[n - 1] == L'.') n--;\n+            buf[n] = L'\\0';\n@@ -88,1 +90,2 @@\n-        return n;\n+        jstring s = (*env)->NewString(env, buf, n);\n+        return s;\n@@ -90,4 +93,1 @@\n-\n-    \/\/ C runtime error that has no corresponding DOS error code\n-    if (errno == 0 || len < 1) return 0;\n-    return strerror_s(buf, len, errno);\n+    return NULL;\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Invalid handle\");\n+        JNU_ThrowIOException(env, \"Invalid handle\");\n@@ -88,1 +88,1 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Invalid handle\");\n+        JNU_ThrowIOException(env, \"Invalid handle\");\n@@ -134,1 +134,1 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Invalid handle\");\n+        JNU_ThrowIOException(env, \"Invalid handle\");\n@@ -202,0 +202,3 @@\n+    } else {\n+        JNU_ThrowIOException(env, \"Invalid handle\");\n+        return IOS_THROWN;\n@@ -204,1 +207,1 @@\n-    if ((h == INVALID_HANDLE_VALUE) || (result == 0)) {\n+    if (result == 0) {\n@@ -251,0 +254,3 @@\n+    } else {\n+        JNU_ThrowIOException(env, \"Invalid handle\");\n+        return IOS_THROWN;\n@@ -253,1 +259,1 @@\n-    if ((h == INVALID_HANDLE_VALUE) || (result == 0)) {\n+    if (result == 0) {\n@@ -271,0 +277,4 @@\n+    if (h == INVALID_HANDLE_VALUE) {\n+        JNU_ThrowIOException(env, \"Invalid handle\");\n+        return IOS_THROWN;\n+    }\n@@ -288,1 +298,1 @@\n-    if ((h == INVALID_HANDLE_VALUE) || (result == 0)) {\n+    if (result == 0) {\n@@ -344,1 +354,1 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Force failed\");\n+        JNU_ThrowIOException(env, \"Invalid handle\");\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,0 @@\n-  const char *error_message = NULL;\n@@ -89,1 +88,0 @@\n-  char buffer[JVM_MAXPATHLEN];\n@@ -107,2 +105,1 @@\n-    getLastErrorString(buffer, sizeof(buffer));\n-    error_message = buffer;\n+    JNU_ThrowByNameWithLastError(env, \"sun\/jvm\/hotspot\/debugger\/DebuggerException\", \"GetProcAddress failed\");\n@@ -116,1 +113,1 @@\n-    error_message = dlerror();\n+    JNU_ThrowByName(env, \"sun\/jvm\/hotspot\/debugger\/DebuggerException\", dlerror());\n@@ -121,13 +118,0 @@\n-\n-  if (func == 0) {\n-    \/* Couldn't find entry point.  error_message should contain some\n-     * platform dependent error message.\n-     *\/\n-    jstring s = JNU_NewStringPlatform(env, error_message);\n-    if (s != NULL) {\n-      jobject x = JNU_NewObjectByName(env, \"sun\/jvm\/hotspot\/debugger\/DebuggerException\", \"(Ljava\/lang\/String;)V\", s);\n-      if (x != NULL) {\n-        (*env)->Throw(env, x);\n-      }\n-    }\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/sadis.c","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"}]}