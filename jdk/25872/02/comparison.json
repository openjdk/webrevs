{"files":[{"patch":"@@ -574,2 +574,9 @@\n-      size_t buffer_size = c1_only ? c1_size : (c1_size\/3 + 2*c2_size\/3);\n-      size_t max_count = (ReservedCodeCacheSize - (CodeCacheMinimumUseSpace DEBUG_ONLY(* 3))) \/ buffer_size;\n+      size_t buffer_size = 0;\n+      if (c1_only) {\n+        buffer_size = c1_size;\n+      } else if (c2_only) {\n+        buffer_size = c2_size;\n+      } else {\n+        buffer_size = c1_size \/ 3 + 2 * c2_size \/ 3;\n+      }\n+      size_t max_count = (NonNMethodCodeHeapSize - (CodeCacheMinimumUseSpace DEBUG_ONLY(* 3))) \/ buffer_size;\n@@ -594,1 +601,1 @@\n-#endif\n+#endif \/\/ _LP64\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -100,0 +100,12 @@\n+}\n+\n+JVMFlag::Error PerfDataSamplingIntervalFunc(int value, bool verbose) {\n+  if ((value % PeriodicTask::interval_gran != 0)) {\n+    JVMFlag::printError(verbose,\n+                        \"PerfDataSamplingInterval (%d) must be \"\n+                        \"evenly divisible by PeriodicTask::interval_gran (%d)\\n\",\n+                        value, PeriodicTask::interval_gran);\n+    return JVMFlag::VIOLATES_CONSTRAINT;\n+  } else {\n+    return JVMFlag::SUCCESS;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+  f(int,    PerfDataSamplingIntervalFunc)             \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}