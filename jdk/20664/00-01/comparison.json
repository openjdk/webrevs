{"files":[{"patch":"@@ -485,2 +485,2 @@\n-  case vmIntrinsics::_Continuation_pin:          return inline_native_Continuation_pin();\n-  case vmIntrinsics::_Continuation_unpin:        return inline_native_Continuation_unpin();\n+  case vmIntrinsics::_Continuation_pin:          return inline_native_Continuation_pinning(false);\n+  case vmIntrinsics::_Continuation_unpin:        return inline_native_Continuation_pinning(true);\n@@ -3724,1 +3724,1 @@\n-bool LibraryCallKit::inline_native_Continuation_pinning_shared_impl(bool unpin) {\n+bool LibraryCallKit::inline_native_Continuation_pinning(bool unpin) {\n@@ -3780,1 +3780,2 @@\n-    \/\/ Deoptimize and reexecute in the interpreter to throw IllegalStateException for pin count over\/underflow.\n+    \/\/ Trap (but not deoptimize (Action_none)) and continue in the interpreter\n+    \/\/ which will throw IllegalStateException for pin count over\/underflow.\n@@ -3782,2 +3783,0 @@\n-    PreserveReexecuteState preexecs(this);\n-    jvms()->set_should_reexecute(true);\n@@ -3787,1 +3786,1 @@\n-                        Deoptimization::Action_reinterpret);\n+                        Deoptimization::Action_none);\n@@ -3809,8 +3808,0 @@\n-bool LibraryCallKit::inline_native_Continuation_pin() {\n-  return inline_native_Continuation_pinning_shared_impl(false);\n-}\n-\n-bool LibraryCallKit::inline_native_Continuation_unpin() {\n-  return inline_native_Continuation_pinning_shared_impl(true);\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -244,4 +244,1 @@\n-\n-  bool inline_native_Continuation_pinning_shared_impl(bool unpin);\n-  bool inline_native_Continuation_pin();\n-  bool inline_native_Continuation_unpin();\n+  bool inline_native_Continuation_pinning(bool unpin);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}