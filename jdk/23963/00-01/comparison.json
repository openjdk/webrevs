{"files":[{"patch":"@@ -257,1 +257,1 @@\n-    __ srli($dst$$Register, $dst$$Register, 32);\n+    __ srai($dst$$Register, $dst$$Register, 32);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,2 +51,3 @@\n-  static int output[] = new int[ARRLEN];\n-  static boolean err;\n+  static int outputI[] = new int[ARRLEN];\n+  static long outputL[] = new long[ARRLEN];\n+  static int err;\n@@ -61,1 +62,1 @@\n-  static void test_reverse(int[] input, int[] output) {\n+  static void test_reverse_ia(int[] input, int[] outputI) {\n@@ -63,1 +64,1 @@\n-      output[i] = Integer.reverse(input[i]);\n+      outputI[i] = Integer.reverse(input[i]);\n@@ -67,1 +68,20 @@\n-  @Run(test = \"test_reverse\")\n+  @Test\n+  @IR(counts = {IRNode.REVERSE_I, \"> 0\"})\n+  static void test_reverse_la(int[] input, long[] outputL) {\n+    for (int i = 0; i < input.length; i+=1) {\n+      outputL[i] = Integer.reverse(input[i]);\n+    }\n+  }\n+\n+  @Test\n+  @IR(counts = {IRNode.REVERSE_I, \"> 0\"})\n+  static void test_reverse_l(int input, long expected) {\n+    if (Integer.reverse(input) != expected) {\n+      err++;\n+      System.out.println(\"Test failure, input: \" + input +\n+                         \", actual: \" + Integer.reverse(input) +\n+                         \", expected: \" + expected);\n+    }\n+  }\n+\n+  @Run(test = {\"test_reverse_ia\", \"test_reverse_la\", \"test_reverse_l\"})\n@@ -80,1 +100,5 @@\n-    test_reverse(input, output);\n+    test_reverse_ia(input, outputI);\n+    test_reverse_la(input, outputL);\n+    for (int i = 0; i < ARRLEN; i++) {\n+      test_reverse_l(input[i], golden_reverse_integer(input[i]));\n+    }\n@@ -86,1 +110,2 @@\n-    test_reverse(input, output);\n+    test_reverse_ia(input, outputI);\n+    test_reverse_la(input, outputL);\n@@ -90,4 +115,13 @@\n-      Asserts.assertEquals(output[i], golden_val,\n-                          \"Test failure, input: \" + input[i] +\n-                          \", actual: \" + output[i] +\n-                          \", expected: \" + golden_reverse_integer(input[i]));\n+      Asserts.assertEquals(outputI[i], golden_val,\n+                          \"Test failure (integer array), input: \" + input[i] +\n+                          \", actual: \" + outputI[i] +\n+                          \", expected: \" + golden_val);\n+      Asserts.assertEquals(outputL[i], (long)golden_val,\n+                          \"Test failure (long array), input: \" + input[i] +\n+                          \", actual: \" + outputL[i] +\n+                          \", expected: \" + (long)golden_val);\n+    }\n+\n+    err = 0;\n+    for (int i = 0; i < ARRLEN; i++) {\n+      test_reverse_l(input[i], golden_reverse_integer(input[i]));\n@@ -95,0 +129,1 @@\n+    Asserts.assertTrue(err == 0, \"Some tests(\" + err + \") failed, check previous log for details\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/riscv64\/TestIntegerReverse.java","additions":46,"deletions":11,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-  static boolean err;\n@@ -93,1 +92,1 @@\n-                          \", expected: \" + golden_reverse_long(input[i]));\n+                          \", expected: \" + golden_val);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/riscv64\/TestLongReverse.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}