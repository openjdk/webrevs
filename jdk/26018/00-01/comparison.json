{"files":[{"patch":"@@ -1214,1 +1214,1 @@\n-     * Prints this property list out to the specified {@code PrintStream}.\n+     * Prints this property list out to the specified {@link PrintStream}.\n@@ -1217,7 +1217,11 @@\n-     * @implNote This method first writes a header\n-     * text {@code -- listing properties --} followed by a line separator\n-     * to the {@code out}. Each property is then written to {@code out}\n-     * in the form of {@code key=value} followed by a line separator.\n-     * If any property's value is greater than 40 characters then only\n-     * the first 37 characters of that value are written followed by 3 dot\n-     * characters.\n+     * @implNote If any property's value is greater than 40 characters then\n+     * this method writes only the first 37 characters of that value\n+     * followed by 3 dot characters.\n+     * <p>\n+     * An alternative for listing the {@code Properties} to a {@code PrintStream} is:\n+     * {@snippet lang=java :\n+     *      Properties p = ...\n+     *      PrintStream out = ...\n+     *      \/\/ list the properties to PrintStream\n+     *      p.forEach((k, v) -> out.println(k + \"=\" + v));\n+     * }\n@@ -1244,1 +1248,1 @@\n-     * Prints this property list out to the specified {@code PrintWriter}.\n+     * Prints this property list out to the specified {@link PrintWriter}.\n@@ -1247,7 +1251,11 @@\n-     * @implNote This method first writes a header\n-     * text {@code -- listing properties --} followed by a line separator\n-     * to the {@code out}. Each property is then written to {@code out}\n-     * in the form of {@code key=value} followed by a line separator.\n-     * If any property's value is greater than 40 characters then only\n-     * the first 37 characters of that value are written followed by 3 dot\n-     * characters.\n+     * @implNote If any property's value is greater than 40 characters then\n+     * this method writes only the first 37 characters of that value\n+     * followed by 3 dot characters.\n+     * <p>\n+     * An alternative for listing the {@code Properties} to a {@code PrintWriter} is:\n+     * {@snippet lang=java :\n+     *      Properties p = ...\n+     *      PrintWriter out = ...\n+     *      \/\/ list the properties to PrintWriter\n+     *      p.forEach((k, v) -> out.println(k + \"=\" + v));\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"}]}