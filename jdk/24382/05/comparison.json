{"files":[{"patch":"@@ -2024,0 +2024,21 @@\n+static const Type* reverse_bytes(int opcode, const Type* con) {\n+  switch (opcode) {\n+    case Op_ReverseBytesS:  return TypeInt::make(byteswap(checked_cast<jshort>(con->is_int()->get_con())));\n+    case Op_ReverseBytesUS: return TypeInt::make(byteswap(checked_cast<jchar>(con->is_int()->get_con())));\n+    case Op_ReverseBytesI:  return TypeInt::make(byteswap(checked_cast<jint>(con->is_int()->get_con())));\n+    case Op_ReverseBytesL:  return TypeLong::make(byteswap(checked_cast<jlong>(con->is_long()->get_con())));\n+    default: ShouldNotReachHere();\n+  }\n+}\n+\n+const Type* ReverseBytesNode::Value(PhaseGVN* phase) const {\n+  const Type* type = phase->type(in(1));\n+  if (type == Type::TOP) {\n+    return Type::TOP;\n+  }\n+  if (type->singleton()) {\n+    return reverse_bytes(Opcode(), type);\n+  }\n+  return bottom_type();\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -564,0 +564,6 @@\n+\n+class ReverseBytesNode : public InvolutionNode {\n+public:\n+  ReverseBytesNode(Node* in) : InvolutionNode(in) {}\n+  virtual const Type* Value(PhaseGVN* phase) const;\n+};\n@@ -566,1 +572,1 @@\n-class ReverseBytesINode : public InvolutionNode {\n+class ReverseBytesINode : public ReverseBytesNode {\n@@ -568,1 +574,3 @@\n-  ReverseBytesINode(Node* in) : InvolutionNode(in) {}\n+  ReverseBytesINode(Node* in) : ReverseBytesNode(in) {\n+  }\n+\n@@ -576,1 +584,1 @@\n-class ReverseBytesLNode : public InvolutionNode {\n+class ReverseBytesLNode : public ReverseBytesNode {\n@@ -578,1 +586,1 @@\n-  ReverseBytesLNode(Node* in) : InvolutionNode(in) {}\n+  ReverseBytesLNode(Node* in) : ReverseBytesNode(in) {}\n@@ -586,1 +594,1 @@\n-class ReverseBytesUSNode : public InvolutionNode {\n+class ReverseBytesUSNode : public ReverseBytesNode {\n@@ -588,1 +596,1 @@\n-  ReverseBytesUSNode(Node* in1) : InvolutionNode(in1) {}\n+  ReverseBytesUSNode(Node* in1) : ReverseBytesNode(in1) {}\n@@ -596,1 +604,1 @@\n-class ReverseBytesSNode : public InvolutionNode {\n+class ReverseBytesSNode : public ReverseBytesNode {\n@@ -598,1 +606,1 @@\n-  ReverseBytesSNode(Node* in) : InvolutionNode(in) {}\n+  ReverseBytesSNode(Node* in) : ReverseBytesNode(in) {}\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.gvn;\n+\n+import compiler.lib.generators.Generators;\n+import compiler.lib.generators.RestrictableGenerator;\n+import compiler.lib.ir_framework.DontCompile;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8353551\n+ * @summary Test that ReverseBytes operations constant-fold.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.gvn.ReverseBytesConstantsTests\n+ *\/\n+public class ReverseBytesConstantsTests {\n+\n+    private static final RestrictableGenerator<Integer> GEN_CHAR = Generators.G.safeRestrict(Generators.G.ints(), Character.MIN_VALUE, Character.MAX_VALUE);\n+    private static final char C_CHAR = (char) GEN_CHAR.next().intValue();\n+    private static final RestrictableGenerator<Integer> GEN_SHORT = Generators.G.safeRestrict(Generators.G.ints(), Short.MIN_VALUE, Short.MAX_VALUE);\n+    private static final short C_SHORT = GEN_SHORT.next().shortValue();\n+    private static final RestrictableGenerator<Long> GEN_LONG = Generators.G.longs();\n+    private static final long C_LONG = GEN_LONG.next();\n+    private static final RestrictableGenerator<Integer> GEN_INT = Generators.G.ints();\n+    private static final int C_INT = GEN_INT.next();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\n+        \"testI1\", \"testI2\", \"testI3\",\n+        \"testL1\", \"testL2\", \"testL3\",\n+        \"testS1\", \"testS2\", \"testS3\",\n+        \"testUS1\", \"testUS2\", \"testUS3\",\n+    })\n+    public void runMethod() {\n+        assertResultI();\n+        assertResultL();\n+        assertResultS();\n+        assertResultUS();\n+    }\n+\n+    @DontCompile\n+    public void assertResultI() {\n+        Asserts.assertEQ(Integer.reverseBytes(0x04030201), testI1());\n+        Asserts.assertEQ(Integer.reverseBytes(0x50607080), testI2());\n+        Asserts.assertEQ(Integer.reverseBytes(0x80706050), testI3());\n+        Asserts.assertEQ(Integer.reverseBytes(C_INT), testI4());\n+    }\n+\n+    @DontCompile\n+    public void assertResultL() {\n+        Asserts.assertEQ(Long.reverseBytes(0x0807060504030201L), testL1());\n+        Asserts.assertEQ(Long.reverseBytes(0x1020304050607080L), testL2());\n+        Asserts.assertEQ(Long.reverseBytes(0x8070605040302010L), testL3());\n+        Asserts.assertEQ(Long.reverseBytes(C_LONG), testL4());\n+    }\n+\n+    @DontCompile\n+    public void assertResultS() {\n+        Asserts.assertEQ(Short.reverseBytes((short) 0x0201), testS1());\n+        Asserts.assertEQ(Short.reverseBytes((short) 0x7080), testS2());\n+        Asserts.assertEQ(Short.reverseBytes((short) 0x8070), testS3());\n+        Asserts.assertEQ(Short.reverseBytes(C_SHORT), testS4());\n+    }\n+\n+    @DontCompile\n+    public void assertResultUS() {\n+        Asserts.assertEQ(Character.reverseBytes((char) 0x0201), testUS1());\n+        Asserts.assertEQ(Character.reverseBytes((char) 0x7080), testUS2());\n+        Asserts.assertEQ(Character.reverseBytes((char) 0x8070), testUS3());\n+        Asserts.assertEQ(Character.reverseBytes(C_CHAR), testUS4());\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_I})\n+    public int testI1() {\n+        return Integer.reverseBytes(0x04030201);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_I})\n+    public int testI2() {\n+        return Integer.reverseBytes(0x50607080);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_I})\n+    public int testI3() {\n+        return Integer.reverseBytes(0x80706050);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_I})\n+    public int testI4() {\n+        return Integer.reverseBytes(C_INT);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_L})\n+    public long testL1() {\n+        return Long.reverseBytes(0x0807060504030201L);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_L})\n+    public long testL2() {\n+        return Long.reverseBytes(0x1020304050607080L);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_L})\n+    public long testL3() {\n+        return Long.reverseBytes(0x8070605040302010L);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_L})\n+    public long testL4() {\n+        return Long.reverseBytes(C_LONG);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_S})\n+    public short testS1() {\n+        return Short.reverseBytes((short) 0x0201);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_S})\n+    public short testS2() {\n+        return Short.reverseBytes((short) 0x7080);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_S})\n+    public short testS3() {\n+        return Short.reverseBytes((short) 0x8070);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_S})\n+    public short testS4() {\n+        return Short.reverseBytes(C_SHORT);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_US})\n+    public char testUS1() {\n+        return Character.reverseBytes((char) 0x0201);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_US})\n+    public char testUS2() {\n+        return Character.reverseBytes((char) 0x7080);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_US})\n+    public char testUS3() {\n+        return Character.reverseBytes((char) 0x8070);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_US})\n+    public char testUS4() {\n+        return Character.reverseBytes(C_CHAR);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ReverseBytesConstantsTests.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"}]}