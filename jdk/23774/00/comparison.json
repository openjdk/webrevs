{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,9 @@\n+    \/\/ Wayland clients are by design not allowed to change the resolution in Wayland.\n+    \/\/ XRandR in Xwayland is just an emulation, it doesn't actually change the resolution.\n+    \/\/ This emulation is per window\/x11 client, so different clients can have\n+    \/\/ different emulated resolutions at the same time.\n+    \/\/ So any request to get the current display mode will always return\n+    \/\/ the original screen resolution, even if we are in emulated resolution.\n+    \/\/ To handle this situation, we store the last set display mode in this variable.\n+    private volatile DisplayMode xwlCurrentDisplayMode;\n+\n@@ -120,0 +129,14 @@\n+\n+        if (XToolkit.isOnWayland() && xwlCurrentDisplayMode != null) {\n+            \/\/ XRandR resolution change in Xwayland is an emulation,\n+            \/\/ and implemented in such a way that multiple display modes\n+            \/\/ for a device are only available in a single screen scenario,\n+            \/\/ if we have multiple screens they will each have a single display mode\n+            \/\/ (no emulated resolution change is available).\n+            \/\/ So we don't have to worry about x and y for a screen here.\n+            rect.setSize(\n+                    xwlCurrentDisplayMode.getWidth(),\n+                    xwlCurrentDisplayMode.getHeight()\n+            );\n+        }\n+\n@@ -403,0 +426,4 @@\n+            if (XToolkit.isOnWayland() && xwlCurrentDisplayMode != null) {\n+                return xwlCurrentDisplayMode;\n+            }\n+\n@@ -407,0 +434,5 @@\n+\n+            if (XToolkit.isOnWayland()) {\n+                xwlCurrentDisplayMode = mode;\n+            }\n+\n@@ -477,0 +509,4 @@\n+        if (XToolkit.isOnWayland()) {\n+            xwlCurrentDisplayMode = dm;\n+        }\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -502,1 +502,0 @@\n-java\/awt\/FullScreen\/FullscreenWindowProps\/FullscreenWindowProps.java 8280991 linux-x64\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,4 @@\n+                g.setColor(Color.RED);\n+                DisplayMode displayMode =\n+                        getGraphicsConfiguration().getDevice().getDisplayMode();\n+                g.drawString(displayMode.toString(), 100, 100);\n","filename":"test\/jdk\/java\/awt\/FullScreen\/FullscreenWindowProps\/FullscreenWindowProps.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+ * @library \/test\/lib\n+ * @build   jdk.test.lib.Platform jtreg.SkippedException\n@@ -47,0 +49,7 @@\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n@@ -49,0 +58,1 @@\n+\n@@ -50,0 +60,5 @@\n+        if (Platform.isOnWayland() && getGnomeShellMajorVersion() < 43) {\n+            throw new SkippedException(\"Test skipped because fix was not\" +\n+                    \"delivered in current GnomeShell version\");\n+        }\n+\n@@ -234,0 +249,30 @@\n+\n+    private static int getGnomeShellMajorVersion() {\n+        try {\n+            Process process =\n+                    new ProcessBuilder(\"\/usr\/bin\/gnome-shell\", \"--version\")\n+                            .start();\n+            try (InputStreamReader isr = new InputStreamReader(process.getInputStream());\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+\n+                if (process.waitFor(2, SECONDS) &&  process.exitValue() == 0) {\n+                    String line = reader.readLine();\n+                    if (line != null) {\n+                        String[] versionComponents = line\n+                                .replaceAll(\"[^\\\\d.]\", \"\")\n+                                .split(\"\\\\.\");\n+\n+                        if (versionComponents.length >= 1) {\n+                            return Integer.parseInt(versionComponents[0]);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (IOException\n+                 | InterruptedException\n+                 | IllegalThreadStateException\n+                 | NumberFormatException ignored) {\n+        }\n+\n+        return 1000;\n+    }\n","filename":"test\/jdk\/java\/awt\/FullScreen\/NoResizeEventOnDMChangeTest\/NoResizeEventOnDMChangeTest.java","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"}]}