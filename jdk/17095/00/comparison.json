{"files":[{"patch":"@@ -33,3 +33,5 @@\n- * @requires os.maxMemory >= 7g & vm.bits == 64\n- * @run junit\/othervm -XX:+CompactStrings -Xmx7g MaxSizeUTF16String\n- * @run junit\/othervm -XX:-CompactStrings -Xmx7g MaxSizeUTF16String\n+ * @requires os.maxMemory >= 8g & vm.bits == 64\n+ * @requires vm.flagless\n+ * @run junit\/othervm -XX:+CompactStrings -Xmx8g MaxSizeUTF16String\n+ * @run junit\/othervm -XX:-CompactStrings -Xmx8g MaxSizeUTF16String\n+ * @run junit\/othervm -Xcomp -Xmx8g MaxSizeUTF16String\n@@ -43,0 +45,2 @@\n+    private final static String EXPECTED_VM_LIMIT_MESSAGE = \"Requested array size exceeds VM limit\";\n+    private final static String UNEXPECTED_JAVA_HEAP_SPACE = \"Java heap space\";\n@@ -77,1 +81,6 @@\n-                if (!ex.getMessage().startsWith(EXPECTED_OOME_MESSAGE)) {\n+                if (ex.getMessage().equals(UNEXPECTED_JAVA_HEAP_SPACE)) {\n+                    \/\/ Insufficient heap size\n+                    throw ex;\n+                }\n+                if (!ex.getMessage().startsWith(EXPECTED_OOME_MESSAGE) &&\n+                        !ex.getMessage().startsWith(EXPECTED_VM_LIMIT_MESSAGE)) {\n@@ -101,1 +110,6 @@\n-                if (!ex.getMessage().startsWith(EXPECTED_OOME_MESSAGE)) {\n+                if (ex.getMessage().equals(UNEXPECTED_JAVA_HEAP_SPACE)) {\n+                    \/\/ Insufficient heap size\n+                    throw ex;\n+                }\n+                if (!ex.getMessage().startsWith(EXPECTED_OOME_MESSAGE) &&\n+                        !ex.getMessage().startsWith(EXPECTED_VM_LIMIT_MESSAGE)) {\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/MaxSizeUTF16String.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"}]}