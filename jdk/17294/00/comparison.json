{"files":[{"patch":"@@ -78,0 +78,2 @@\n+    private Icon collapsedIconWrapper = new CollapsedIconWrapper();\n+\n@@ -102,0 +104,5 @@\n+    @Override\n+    public Icon getCollapsedIcon() {\n+        return collapsedIconWrapper;\n+    }\n+\n@@ -821,0 +828,37 @@\n+\n+    private class CollapsedIconWrapper implements SynthIcon {\n+        public void paintIcon(SynthContext context, Graphics g, int x,\n+                              int y, int w, int h) {\n+            if (context == null) {\n+                context = getContext(tree);\n+                SynthGraphicsUtils.paintIcon(collapsedIcon, context, g, x, y, w, h);\n+            }\n+            else {\n+                SynthGraphicsUtils.paintIcon(collapsedIcon, context, g, x, y, w, h);\n+            }\n+        }\n+\n+        public int getIconWidth(SynthContext context) {\n+            int width;\n+            if (context == null) {\n+                context = getContext(tree);\n+                width = SynthGraphicsUtils.getIconWidth(collapsedIcon, context);\n+            }\n+            else {\n+                width = SynthGraphicsUtils.getIconWidth(collapsedIcon, context);\n+            }\n+            return width;\n+        }\n+\n+        public int getIconHeight(SynthContext context) {\n+            int height;\n+            if (context == null) {\n+                context = getContext(tree);\n+                height = SynthGraphicsUtils.getIconHeight(collapsedIcon, context);\n+            }\n+            else {\n+                height = SynthGraphicsUtils.getIconHeight(collapsedIcon, context);\n+            }\n+            return height;\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTreeUI.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,0 +26,2 @@\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n@@ -27,0 +30,2 @@\n+import java.awt.GridLayout;\n+import javax.swing.AbstractAction;\n@@ -28,1 +33,2 @@\n-import javax.swing.JApplet;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n@@ -33,0 +39,2 @@\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n@@ -35,3 +43,7 @@\n- * @bug 8038113\n- * @summary [macosx] JTree icon is not rendered in high resolution on Retina\n- * @run applet\/manual=yesno bug8038113.html\n+ * @key headful\n+ * @bug 8038113 8258979\n+ * @summary [macosx] JTree icon is not rendered in high resolution on Retina,\n+ *          collapsed icon is not rendered for GTK LAF as well.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug8038113\n@@ -39,1 +51,0 @@\n-public class bug8038113 extends JApplet {\n@@ -41,3 +52,8 @@\n-    @Override\n-    public void init() {\n-        SwingUtilities.invokeLater(new Runnable() {\n+public class bug8038113 {\n+    private static JFrame frame;\n+    private static final String INSTRUCTIONS = \"\"\"\n+                Verify that scaled icons are rendered smoothly.\n+                Check that Collapsed  and Expanded JTree icons are drawn smoothly.\n+                Check for different LAFs.\n+                If so, press PASS, else press FAIL.\n+            \"\"\";\n@@ -45,2 +61,13 @@\n-            @Override\n-            public void run() {\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"JTree Expanded\/Collapsed Icon Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(6)\n+                .columns(40)\n+                .screenCapture()\n+                .build();\n+        SwingUtilities.invokeAndWait(\n+                bug8038113::createAndShowUI);\n+        passFailJFrame.awaitAndCheck();\n+    }\n@@ -48,2 +75,4 @@\n-                final JTree tree = new JTree();\n-                final BasicTreeUI treeUI = (BasicTreeUI) tree.getUI();\n+    public static void createAndShowUI() {\n+        final JTree tree = new JTree();\n+        final BasicTreeUI treeUI = (BasicTreeUI) tree.getUI();\n+        frame = new JFrame(\"Test Tree Icon Rendering\");\n@@ -51,1 +80,1 @@\n-                final JPanel panel = new JPanel() {\n+        final JPanel panel = new JPanel() {\n@@ -53,6 +82,6 @@\n-                    @Override\n-                    public void paint(Graphics g) {\n-                        super.paint(g);\n-                        Graphics2D g2 = (Graphics2D) g;\n-                        g2.setStroke(new BasicStroke(0.5f));\n-                        g2.scale(2, 2);\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                Graphics2D g2 = (Graphics2D) g;\n+                g2.setStroke(new BasicStroke(0.5f));\n+                g2.scale(2, 2);\n@@ -60,8 +89,8 @@\n-                        int x = 10;\n-                        int y = 10;\n-                        Icon collapsedIcon = treeUI.getCollapsedIcon();\n-                        Icon expandeIcon = treeUI.getExpandedIcon();\n-                        int w = collapsedIcon.getIconWidth();\n-                        int h = collapsedIcon.getIconHeight();\n-                        collapsedIcon.paintIcon(this, g, x, y);\n-                        g.drawRect(x, y, w, h);\n+                int x = 10;\n+                int y = 10;\n+                Icon collapsedIcon = treeUI.getCollapsedIcon();\n+                Icon expandeIcon = treeUI.getExpandedIcon();\n+                int w = collapsedIcon.getIconWidth();\n+                int h = collapsedIcon.getIconHeight();\n+                collapsedIcon.paintIcon(this, g, x, y);\n+                g.drawRect(x, y, w, h);\n@@ -69,5 +98,7 @@\n-                        y += 10 + h;\n-                        w = expandeIcon.getIconWidth();\n-                        h = expandeIcon.getIconHeight();\n-                        expandeIcon.paintIcon(this, g, x, y);\n-                        g.drawRect(x, y, w, h);\n+                y += 10 + h;\n+                w = expandeIcon.getIconWidth();\n+                h = expandeIcon.getIconHeight();\n+                expandeIcon.paintIcon(this, g, x, y);\n+                g.drawRect(x, y, w, h);\n+            }\n+        };\n@@ -75,4 +106,43 @@\n-                    }\n-                };\n-                getContentPane().setLayout(new BorderLayout());\n-                getContentPane().add(panel, BorderLayout.CENTER);\n+        UIManager.LookAndFeelInfo[] laf = UIManager.getInstalledLookAndFeels();\n+        JPanel buttonPanel = new JPanel();\n+        for (int i = 0; i < laf.length; i++) {\n+            if (laf[i].getName().contains(\"Motif\")) {\n+                continue;\n+            }\n+            JButton button = new JButton(laf[i].getName());\n+            button.setText(laf[i].getName());\n+            button.addActionListener(new MyAction());\n+            buttonPanel.add(button);\n+        }\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(\n+                frame, PassFailJFrame.Position.HORIZONTAL);\n+        frame.getContentPane().setLayout(new BorderLayout());\n+        frame.getContentPane().add(panel, BorderLayout.CENTER);\n+        frame.getContentPane().add(buttonPanel, BorderLayout.SOUTH);\n+        frame.setSize(300, 250);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    public static class MyAction implements ActionListener {\n+        public void actionPerformed(ActionEvent ae) {\n+            String lafClassName = null;\n+            UIManager.LookAndFeelInfo lafs[] = UIManager.getInstalledLookAndFeels();\n+            for (int i = 0; i < lafs.length; i++) {\n+                if (ae.getActionCommand().equals(lafs[i].getName())) {\n+                    lafClassName = lafs[i].getClassName();\n+                    break;\n+                }\n+            }\n+            try {\n+                UIManager.setLookAndFeel(lafClassName);\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                createAndShowUI();\n+            } catch (UnsupportedLookAndFeelException ignored) {\n+                System.out.println(\"Unsupported LAF: \" + lafClassName);\n+            } catch (ClassNotFoundException | InstantiationException\n+                     | IllegalAccessException e) {\n+                throw new RuntimeException(e);\n@@ -80,1 +150,1 @@\n-        });\n+        }\n","filename":"test\/jdk\/javax\/swing\/JTree\/8038113\/bug8038113.java","additions":108,"deletions":38,"binary":false,"changes":146,"status":"modified"}]}