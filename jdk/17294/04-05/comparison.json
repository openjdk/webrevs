{"files":[{"patch":"@@ -115,0 +115,2 @@\n+        expandedIconWrapper = new IconWrapper(expandedIcon);\n+        collapsedIconWrapper = new IconWrapper(collapsedIcon);\n@@ -160,3 +162,0 @@\n-            expandedIconWrapper = new IconWrapper(expandedIcon);\n-            collapsedIconWrapper = new IconWrapper(collapsedIcon);\n-\n@@ -797,0 +796,1 @@\n+\n@@ -806,4 +806,0 @@\n-                SynthGraphicsUtils.paintIcon(iconType, context, g, x, y, w, h);\n-            }\n-            else {\n-                SynthGraphicsUtils.paintIcon(iconType, context, g, x, y, w, h);\n@@ -811,0 +807,1 @@\n+            SynthGraphicsUtils.paintIcon(iconType, context, g, x, y, w, h);\n@@ -814,1 +811,0 @@\n-            int width;\n@@ -817,1 +813,0 @@\n-                width = SynthGraphicsUtils.getIconWidth(iconType, context);\n@@ -819,4 +814,1 @@\n-            else {\n-                width = SynthGraphicsUtils.getIconWidth(iconType, context);\n-            }\n-            return width;\n+            return SynthGraphicsUtils.getIconWidth(iconType, context);\n@@ -826,1 +818,0 @@\n-            int height;\n@@ -829,4 +820,0 @@\n-                height = SynthGraphicsUtils.getIconHeight(iconType, context);\n-            }\n-            else {\n-                height = SynthGraphicsUtils.getIconHeight(iconType, context);\n@@ -834,1 +821,1 @@\n-            return height;\n+            return SynthGraphicsUtils.getIconHeight(iconType, context);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTreeUI.java","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import javax.imageio.ImageIO;\n+import javax.swing.Icon;\n+import javax.swing.JLabel;\n+import javax.swing.JTree;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.basic.BasicTreeUI;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+\n+\/* @test\n+ * @key headful\n+ * @bug 8038113 8258979\n+ * @summary [macosx] JTree icon is not rendered in high resolution on Retina,\n+ *          collapsed icon is not rendered for GTK LAF as well.\n+ * @run main bug8038113\n+ *\/\n+\n+public class bug8038113 {\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (!laf.getName().contains(\"Motif\")) {\n+                System.out.println(\"Testing LAF: \" + laf.getName());\n+                SwingUtilities.invokeAndWait(() -> test(laf));\n+            }\n+        }\n+    }\n+\n+    public static void test(UIManager.LookAndFeelInfo laf) {\n+        setLookAndFeel(laf);\n+        final JTree tree = new JTree();\n+        final BasicTreeUI treeUI = (BasicTreeUI) tree.getUI();\n+\n+        Icon collapsedIcon = treeUI.getCollapsedIcon();\n+        Icon expandedIcon = treeUI.getExpandedIcon();\n+        BufferedImage img1 = paintToImage(expandedIcon);\n+        BufferedImage img2 = paintToImage(collapsedIcon);\n+\n+        if (!isImgRendered(img1)) {\n+            try {\n+                ImageIO.write(img1, \"png\", new File(\"Expanded_Icon_\" + laf.getName() + \".png\"));\n+            } catch (IOException ignored) {\n+            }\n+            throw new RuntimeException(\"Test Failed, Expanded not rendered for: \"+laf.getName());\n+        }\n+\n+        if (!isImgRendered(img2)) {\n+            try {\n+                ImageIO.write(img2, \"png\", new File(\"Collapsed_Icon_\" + laf.getName() + \".png\"));\n+            } catch (IOException ignored) {\n+            }\n+            throw new RuntimeException(\"Test Failed, Collapsed Icon not rendered for: \"+laf.getName());\n+        }\n+        System.out.println(\"Test Passed\");\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static BufferedImage paintToImage(Icon content) {\n+        BufferedImage im = new BufferedImage(content.getIconWidth(),\n+                content.getIconHeight(), TYPE_INT_RGB);\n+        Graphics2D g = (Graphics2D) im.getGraphics();\n+        g.setBackground(Color.WHITE);\n+        g.clearRect(0, 0, content.getIconWidth(), content.getIconHeight());\n+        content.paintIcon(new JLabel(), g, 0, 0);\n+        g.dispose();\n+        return im;\n+    }\n+\n+    private static boolean isImgRendered(BufferedImage img) {\n+        Color white = new Color(255, 255, 255);\n+        for (int x = 0; x < img.getWidth(); ++x) {\n+            for (int y = 0; y < img.getHeight(); ++y) {\n+                if (img.getRGB(x, y) != white.getRGB()) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug8038113.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}