{"files":[{"patch":"@@ -1257,1 +1257,1 @@\n-    <Field type=\"Ticks\" name=\"invocationTime\" label=\"Invocation Time\" description=\"The time the deprecated method was invoked for the first time.\" \/>\n+    <Field type=\"Ticks\" name=\"invocationTime\" label=\"Invocation Time\" description=\"The time the deprecated method was invoked for the first time\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -547,1 +547,1 @@\n-  JfrCheckpointWriter writer(true, thread, STATICS);\n+  JfrCheckpointWriter writer(true \/* prev epoch *\/, thread, true \/* header *\/, STATICS);\n@@ -558,1 +558,1 @@\n-  JfrCheckpointWriter writer(true, thread, THREADS);\n+  JfrCheckpointWriter writer(true \/* prev epoch *\/, thread, true \/* header *\/, THREADS);\n@@ -586,2 +586,2 @@\n-  JfrCheckpointWriter leakp_writer(true, thread);\n-  JfrCheckpointWriter writer(true, thread);\n+  JfrCheckpointWriter leakp_writer(true \/* prev epoch *\/, thread);\n+  JfrCheckpointWriter writer(true \/* prev epoch *\/, thread);\n@@ -610,2 +610,2 @@\n-    JfrCheckpointWriter leakp_writer(true, thread);\n-    JfrCheckpointWriter writer(true, thread);\n+    JfrCheckpointWriter leakp_writer(true \/* prev epoch *\/, thread);\n+    JfrCheckpointWriter writer(true \/* prev epoch *\/, thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -63,15 +63,1 @@\n-JfrCheckpointWriter::JfrCheckpointWriter(bool previous_epoch, Thread* thread, JfrCheckpointType type \/* GENERIC *\/) :\n-  JfrCheckpointWriterBase(JfrCheckpointManager::lease_global(thread, previous_epoch), thread),\n-  _time(JfrTicks::now()),\n-  _offset(0),\n-  _count(0),\n-  _type(type),\n-  _header(true) {\n-  assert(this->is_acquired(), \"invariant\");\n-  assert(0 == this->current_offset(), \"invariant\");\n-  if (_header) {\n-    reserve(sizeof(JfrCheckpointEntry));\n-  }\n-}\n-\n-JfrCheckpointWriter::JfrCheckpointWriter(bool previous_epoch, bool header, Thread* thread, JfrCheckpointType type \/* GENERIC *\/) :\n+JfrCheckpointWriter::JfrCheckpointWriter(bool previous_epoch, Thread* thread, bool header \/* true *\/, JfrCheckpointType type \/* GENERIC *\/) :\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointWriter.cpp","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -72,3 +72,2 @@\n-  JfrCheckpointWriter(bool previous_epoch, Thread* thread, JfrCheckpointType type = GENERIC);\n-public:\n-  JfrCheckpointWriter(bool previous_epoch, bool header, Thread* thread, JfrCheckpointType type = GENERIC);\n+ public:\n+  JfrCheckpointWriter(bool previous_epoch, Thread* thread, bool header = true, JfrCheckpointType type = GENERIC);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointWriter.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-    JfrCheckpointWriter writer(true, false, jt);\n+    JfrCheckpointWriter writer(true \/* prev epoch *\/, jt,  false \/* header *\/);\n@@ -307,1 +307,1 @@\n-static void save_type_set_blob(JfrCheckpointWriter& writer) {\n+static void save_type_set_blob(JfrCheckpointWriter& writer, bool copy = false) {\n@@ -309,1 +309,1 @@\n-  const JfrBlobHandle blob = writer.move();\n+  const JfrBlobHandle blob = copy ? writer.copy() : writer.move();\n@@ -319,1 +319,1 @@\n-    save_type_set_blob(writer);\n+    save_type_set_blob(writer, true);\n@@ -341,1 +341,1 @@\n-  JfrCheckpointWriter writer(!on_error, false, thread);\n+  JfrCheckpointWriter writer(!on_error, thread, false);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationManager.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-  if (frame_type == JfrStackFrame::FRAME_JIT) {\n+  if (frame_type == JfrStackFrame::FRAME_JIT && !stream.at_end()) {\n@@ -118,1 +118,1 @@\n-    if (!stream.at_end() && id == stream.frame_id()) {\n+    if (id == stream.frame_id()) {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}