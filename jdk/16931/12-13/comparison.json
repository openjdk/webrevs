{"files":[{"patch":"@@ -1255,1 +1255,1 @@\n-  <Event name=\"DeprecatedInvocation\" description= \"A unique invocation of a method or class that is annotated with @Deprecated. Packages and modules that are deprecated are ignored.\" category=\"Java Application, Statistics\" label=\"Deprecated Method Invocation\" thread=\"false\" stackTrace=\"true\" startTime=\"false\" level=\"forRemoval,all\">\n+  <Event name=\"DeprecatedInvocation\" description= \"A unique invocation of a method that is annotated with @Deprecated. Packages and modules that are deprecated are ignored.\" category=\"Java Application, Statistics\" label=\"Deprecated Method Invocation\" thread=\"false\" stackTrace=\"true\" startTime=\"false\" level=\"forRemoval,all\">\n@@ -1258,1 +1258,1 @@\n-    <Field type=\"boolean\" name=\"forRemoval\" label=\"Method Deprecated For Removal\" \/>\n+    <Field type=\"boolean\" name=\"forRemoval\" label=\"For Removal\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"logging\/log.hpp\"\n@@ -53,16 +54,0 @@\n-static constexpr const size_t max_num_edges = 10000;\n-static size_t _num_edges = 0;\n-\n-static inline size_t increment() {\n-  return Atomic::add(&_num_edges, static_cast<size_t>(1));\n-}\n-\n-static inline bool max_limit_not_exceded() {\n-  const size_t value = increment();\n-  if (value <= max_num_edges) {\n-    return true;\n-  }\n-  \/\/ Logging here\n-  return false;\n-}\n-\n@@ -146,0 +131,23 @@\n+static constexpr const size_t max_num_edges = 10000;\n+\n+static void log_max_num_edges_reached() {\n+  log_info(jfr)(\"The number of deprecated method invocations recorded has reached a maximum limit of %d.\", max_num_edges);\n+  log_info(jfr)(\"Deprecated method invocations will not be recorded from now on.\");\n+  log_info(jfr)(\"Reduce the number of deprecated method invocations and try again.\");\n+}\n+\n+static bool max_limit_not_reached() {\n+  static size_t num_edges = 0;\n+  size_t compare_value;\n+  do {\n+    compare_value = Atomic::load(&num_edges);\n+    if (compare_value == max_num_edges) {\n+      return false;\n+    }\n+  } while (compare_value != Atomic::cmpxchg(&num_edges, compare_value, compare_value + 1));\n+  if (compare_value + 1 == max_num_edges) {\n+    log_max_num_edges_reached();\n+  }\n+  return true;\n+}\n+\n@@ -174,1 +182,5 @@\n-static bool should_report(const Method* method, const Method* sender, JavaThread* jt) {\n+static inline bool is_not_jdk_module(const ModuleEntry* module, JavaThread* jt) {\n+  return !is_jdk_module(module, jt);\n+}\n+\n+static bool should_record(const Method* method, const Method* sender, JavaThread* jt) {\n@@ -182,2 +194,2 @@\n-  if (!is_jdk_module(deprecated_module, jt)) {\n-    \/\/ Only report invoked deprecated methods in the JDK.\n+  \/\/ Only report invoked deprecated methods in the JDK.\n+  if (is_not_jdk_module(deprecated_module, jt)) {\n@@ -187,2 +199,2 @@\n-  \/\/ Only report senders not in the JDK.\n-  return !is_jdk_module(sender_module, jt) && max_limit_not_exceded();\n+  \/\/ Only report senders not in the JDK and if we are still within budget.\n+  return is_not_jdk_module(sender_module, jt) && max_limit_not_reached();\n@@ -200,1 +212,1 @@\n-    if (should_report(method, sender, jt)) {\n+    if (should_record(method, sender, jt)) {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationManager.cpp","additions":34,"deletions":22,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-\/\/ of the deprecated annotation as part of parsing bytecodes of the callee method.\n+\/\/ of the deprecated annotation already as part of parsing bytecodes of the callee method.\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}