{"files":[{"patch":"@@ -441,1 +441,0 @@\n-  assert_locked_or_safepoint(ClassLoaderDataGraph_lock);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -142,4 +142,0 @@\n-void JfrCheckpointManager::set_chunkwriter(JfrChunkWriter* cw) {\n-  _chunkwriter = cw;\n-}\n-\n@@ -587,2 +583,0 @@\n-  MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n-  JfrDeprecationManager::prepare_type_set(thread); \/\/ marks leakp\n@@ -592,2 +586,6 @@\n-    MutexLocker module_lock(Module_lock);\n-    JfrTypeSet::clear(&writer, &leakp_writer);\n+    MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n+    JfrDeprecationManager::prepare_type_set(thread); \/\/ marks leakp\n+    {\n+      MutexLocker module_lock(Module_lock);\n+      JfrTypeSet::clear(&writer, &leakp_writer);\n+    }\n@@ -596,2 +594,4 @@\n-  \/\/ This data is not committed to the system,\n-  \/\/ because it has not started yet.\n+  \/\/ We placed a blob in the Deprecated subsystem by copying the information\n+  \/\/ in the leakp writer. For the real writer, the data will not be\n+  \/\/ committed, because it has not yet been started. Therefore,\n+  \/\/ both writers are cancelled before their destructors are run.\n@@ -608,2 +608,0 @@\n-    MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n-    MutexLocker module_lock(thread, Module_lock);\n@@ -612,3 +610,8 @@\n-    JfrDeprecationManager::prepare_type_set(thread);\n-    JfrTypeSet::serialize(&writer, &leakp_writer, false, false);\n-    JfrDeprecationManager::on_type_set(leakp_writer, _chunkwriter, thread);\n+    {\n+      MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n+      JfrDeprecationManager::prepare_type_set(thread);\n+      {\n+        MutexLocker module_lock(thread, Module_lock);\n+        JfrTypeSet::serialize(&writer, &leakp_writer, false, false);\n+      }\n+    }\n@@ -618,0 +621,4 @@\n+    JfrDeprecationManager::on_type_set(leakp_writer, _chunkwriter, thread);\n+    \/\/ We placed blobs in both the LeakProfiler and Deprecation\n+    \/\/ subsystems.by copying the information in the leakp writer.\n+    \/\/ It is now is cancelled before destruction.\n@@ -627,1 +634,0 @@\n-  JfrDeprecationManager::on_type_set_unload(writer);\n@@ -631,0 +637,1 @@\n+  JfrDeprecationManager::on_type_set_unload(writer);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-  void set_chunkwriter(JfrChunkWriter* cw);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -319,1 +319,0 @@\n-  assert_locked_or_safepoint(ClassLoaderDataGraph_lock);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationManager.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    public static int staticCounter;\n+    public static int counter;\n@@ -30,1 +30,1 @@\n-        staticCounter++;\n+        counter++;\n@@ -35,1 +35,1 @@\n-        staticCounter++;\n+        counter++;\n@@ -40,1 +40,1 @@\n-        staticCounter++;\n+        counter++;\n@@ -45,1 +45,1 @@\n-        staticCounter++;\n+        counter++;\n@@ -50,1 +50,1 @@\n-        staticCounter++;\n+        counter++;\n@@ -55,1 +55,1 @@\n-        staticCounter++;\n+        counter++;\n@@ -60,1 +60,1 @@\n-        staticCounter++;\n+        counter++;\n@@ -65,1 +65,1 @@\n-        staticCounter++;\n+        counter++;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/test\/DeprecatedMethods.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}