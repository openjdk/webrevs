{"files":[{"patch":"@@ -105,2 +105,2 @@\n-void Jfr::on_deprecated_invocation(const Method* deprecated_method, JavaThread* jt) {\n-  JfrResolution::on_deprecated_invocation(deprecated_method, jt);\n+void Jfr::on_backpatching_deprecated_invocation(const Method* deprecated_method, JavaThread* jt) {\n+  JfrResolution::on_backpatching_deprecated_invocation(deprecated_method, jt);\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  static void on_deprecated_invocation(const Method* deprecated_method, JavaThread* jt);\n+  static void on_backpatching_deprecated_invocation(const Method* deprecated_method, JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/jfr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,1 +146,3 @@\n-void JfrResolution::on_deprecated_invocation(const Method* method, JavaThread* jt) {\n+\/\/ We can circumvent the need to hook into backpatching if ciMethod is made aware\n+\/\/ of the deprecated annotation as part of parsing bytecodes of the callee method.\n+void JfrResolution::on_backpatching_deprecated_invocation(const Method* method, JavaThread* jt) {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static void on_deprecated_invocation(const Method* deprecated_method, JavaThread* jt);\n+  static void on_backpatching_deprecated_invocation(const Method* deprecated_method, JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,0 +84,3 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/jfr.hpp\"\n+#endif\n@@ -1345,0 +1348,1 @@\n+  bool patched_caller = false;\n@@ -1374,0 +1378,1 @@\n+          patched_caller = true;\n@@ -1386,1 +1391,4 @@\n-        if (ssc->is_clean()) ssc->set(static_call_info);\n+        if (ssc->is_clean()) {\n+          ssc->set(static_call_info);\n+          patched_caller = true;\n+        }\n@@ -1390,0 +1398,1 @@\n+  JFR_ONLY(if (patched_caller && callee_method()->deprecated()) Jfr::on_backpatching_deprecated_invocation(callee_method(), THREAD);)\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}