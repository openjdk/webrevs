{"files":[{"patch":"@@ -105,2 +105,2 @@\n-void Jfr::on_backpatching_deprecated_invocation(const Method* deprecated_method, JavaThread* jt) {\n-  JfrResolution::on_backpatching_deprecated_invocation(deprecated_method, jt);\n+void Jfr::on_backpatching(const Method* callee_method, JavaThread* jt) {\n+  JfrResolution::on_backpatching(callee_method, jt);\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  static void on_backpatching_deprecated_invocation(const Method* deprecated_method, JavaThread* jt);\n+  static void on_backpatching(const Method* callee_method, JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/jfr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1257,0 +1257,1 @@\n+    <Field type=\"Ticks\" name=\"invocationTime\" label=\"Invocation Time\" description=\"The time the deprecated method was invoked for the first time.\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -583,0 +583,3 @@\n+  MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n+  \/\/ Marks leakp. Place prepare_type_set before writer construction.\n+  JfrDeprecationManager::prepare_type_set(thread);\n@@ -586,6 +589,2 @@\n-    MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n-    JfrDeprecationManager::prepare_type_set(thread); \/\/ marks leakp\n-    {\n-      MutexLocker module_lock(Module_lock);\n-      JfrTypeSet::clear(&writer, &leakp_writer);\n-    }\n+    MutexLocker module_lock(Module_lock);\n+    JfrTypeSet::clear(&writer, &leakp_writer);\n@@ -594,4 +593,5 @@\n-  \/\/ We placed a blob in the Deprecated subsystem by copying the information\n-  \/\/ in the leakp writer. For the real writer, the data will not be\n-  \/\/ committed, because the JFR system has not yet been started.\n-  \/\/ Therefore, both writers are cancelled before their destructors are run.\n+  \/\/ We placed a blob in the Deprecated subsystem by moving the information\n+  \/\/ from the leakp writer. For the real writer, the data will not be\n+  \/\/ committed, because the JFR system is yet to be started.\n+  \/\/ Therefore, the writer is cancelled before its destructor is run,\n+  \/\/ to avoid writing unnecessary inforamation into the checkpoint system.\n@@ -599,1 +599,0 @@\n-  leakp_writer.cancel();\n@@ -608,0 +607,3 @@\n+    MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n+    \/\/ Marks leakp. Place prepare_type_set before writer construction.\n+    JfrDeprecationManager::prepare_type_set(thread);\n@@ -611,6 +613,2 @@\n-      MutexLocker cld_lock(thread, ClassLoaderDataGraph_lock);\n-      JfrDeprecationManager::prepare_type_set(thread);\n-      {\n-        MutexLocker module_lock(thread, Module_lock);\n-        JfrTypeSet::serialize(&writer, &leakp_writer, false, false);\n-      }\n+      MutexLocker module_lock(thread, Module_lock);\n+      JfrTypeSet::serialize(&writer, &leakp_writer, false, false);\n@@ -621,0 +619,1 @@\n+    \/\/ Place this call after ObjectSampleCheckpoint::on_type_set.\n@@ -622,4 +621,0 @@\n-    \/\/ We placed blobs in both the LeakProfiler and Deprecation\n-    \/\/ subsystems.by copying the information in the leakp writer.\n-    \/\/ It is now is cancelled before destruction.\n-    leakp_writer.cancel();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -179,2 +179,4 @@\n-  write_checkpoint_header(const_cast<u1*>(this->start_pos()), this->used_offset(), _time, (u4)_type, count());\n-  _header = false; \/\/ the header was just written\n+  if (_header) {\n+    write_checkpoint_header(const_cast<u1*>(this->start_pos()), this->used_offset(), _time, (u4)_type, count());\n+    _header = false; \/\/ the header was just written\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointWriter.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-    JfrDeprecationManager::write_events(_chunkwriter, thread, true);\n+    JfrDeprecationManager::write_edges(_chunkwriter, thread, true);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-#include \"jfrfiles\/jfrEventClasses.hpp\"\n-#include \"jfr\/recorder\/checkpoint\/jfrCheckpointManager.hpp\"\n+#include \"jfrfiles\/jfrEventIds.hpp\"\n+#include \"jfr\/recorder\/checkpoint\/jfrCheckpointWriter.hpp\"\n@@ -32,2 +32,0 @@\n-#include \"jfr\/support\/jfrThreadLocal.hpp\"\n-#include \"jfr\/utilities\/jfrTime.hpp\"\n@@ -36,1 +34,0 @@\n-#include \"jfr\/writers\/jfrBigEndianWriter.hpp\"\n@@ -66,24 +63,1 @@\n-JfrDeprecatedBlobConstruction::JfrDeprecatedBlobConstruction(JavaThread* jt) : JfrDeprecatedEventWriterBase(jt) {\n-  assert(this->is_acquired(), \"invariant\");\n-  assert(0 == this->current_offset(), \"invariant\");\n-  assert(this->available_size() > 255, \"invariant\");\n-}\n-\n-JfrBlobHandle JfrDeprecatedBlobConstruction::event(const JfrDeprecatedEdge* edge, bool stacktrace) {\n-  assert(edge != nullptr, \"invariant\");\n-  assert(this->used_offset() == 0, \"invariant\");\n-  _size_pos = this->reserve(sizeof(u1));\n-  this->write(JfrDeprecatedInvocationEvent);\n-  this->write(JfrTicks::now());\n-  this->write(stacktrace ? edge->stacktrace_id() : 0);\n-  this->write(edge->deprecated_methodid());\n-  this->write(edge->for_removal());\n-  const size_t event_size = this->used_size();\n-  assert(event_size < 255, \"invariant\");\n-  write_at_offset(event_size, _size_pos);\n-  JfrBlobHandle blob = JfrBlob::make(this->start_pos(), event_size);\n-  this->reset();\n-  return blob;\n-}\n-\n-JfrBlobHandle JfrDeprecatedBlobConstruction::stacktrace(const JfrDeprecatedEdge* edge) {\n+void JfrDeprecatedStackTraceWriter::install_stacktrace_blob(JfrDeprecatedEdge* edge, JfrCheckpointWriter& writer, JavaThread* jt) {\n@@ -91,11 +65,11 @@\n-  assert(this->used_offset() == 0, \"invariant\");\n-  this->write(edge->stacktrace_id());\n-  this->write(true); \/\/ truncated\n-  this->write(1); \/\/ number of frames\n-  this->write(edge->sender_methodid());\n-  this->write<u4>(edge->linenumber());\n-  this->write<u4>(edge->bci());\n-  this->write<u1>(edge->frame_type());\n-  JfrBlobHandle blob = JfrBlob::make(this->start_pos(), this->used_size());\n-  this->reset();\n-  return blob;\n+  assert(!edge->has_stacktrace(), \"invariant\");\n+  assert(writer.used_offset() == 0, \"invariant\");\n+  writer.write(edge->stacktrace_id());\n+  writer.write(true); \/\/ truncated\n+  writer.write(1); \/\/ number of frames\n+  writer.write(edge->sender_methodid());\n+  writer.write<u4>(edge->linenumber());\n+  writer.write<u4>(edge->bci());\n+  writer.write<u1>(edge->frame_type());\n+  JfrBlobHandle blob = writer.move();\n+  edge->set_stacktrace(blob);\n@@ -145,1 +119,4 @@\n-static inline void write_event(const JfrDeprecatedEdge* edge, JfrChunkWriter& cw, bool has_stacktrace) {\n+JfrDeprecatedEventWriter::JfrDeprecatedEventWriter(JfrChunkWriter& cw, bool stacktrace) :\n+  _now(JfrTicks::now()),_cw(cw), _for_removal(only_for_removal()), _stacktrace(stacktrace), _did_write(false) {}\n+\n+static size_t calculate_event_size(const JfrDeprecatedEdge* edge, JfrChunkWriter& cw, const JfrTicks& now, bool stacktrace) {\n@@ -147,6 +124,7 @@\n-  assert(edge->has_event(), \"invariant\");\n-  if (has_stacktrace) {\n-    edge->event()->write(cw);\n-    return;\n-  }\n-  edge->event_no_stacktrace()->write(cw);\n+  size_t bytes = cw.size_in_bytes(JfrDeprecatedInvocationEvent);\n+  bytes += cw.size_in_bytes(now); \/\/ starttime\n+  bytes += cw.size_in_bytes(stacktrace ? edge->stacktrace_id() : 0); \/\/ stacktrace\n+  bytes += cw.size_in_bytes(edge->deprecated_methodid());\n+  bytes += cw.size_in_bytes(edge->invocation_time());\n+  bytes += cw.size_in_bytes(edge->for_removal());\n+  return bytes + cw.size_in_bytes(bytes + cw.size_in_bytes(bytes));\n@@ -155,2 +133,10 @@\n-JfrDeprecatedEventWriter::JfrDeprecatedEventWriter(JfrChunkWriter& cw, bool stacktrace) :\n-  _cw(cw), _for_removal(only_for_removal()), _stacktrace(stacktrace), _did_write(false) {}\n+static void write_event(const JfrDeprecatedEdge* edge, JfrChunkWriter& cw, const JfrTicks& now, bool stacktrace) {\n+  assert(edge != nullptr, \"invariant\");\n+  cw.write(calculate_event_size(edge, cw, now, stacktrace));\n+  cw.write(JfrDeprecatedInvocationEvent);\n+  cw.write(now);\n+  cw.write(stacktrace ? edge->stacktrace_id() : 0);\n+  cw.write(edge->deprecated_methodid());\n+  cw.write(edge->invocation_time());\n+  cw.write(edge->for_removal());\n+}\n@@ -163,1 +149,1 @@\n-  write_event(edge, _cw, _stacktrace);\n+  write_event(edge, _cw,_now, _stacktrace);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationEventWriter.cpp","additions":36,"deletions":50,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -30,3 +30,1 @@\n-#include \"jfr\/writers\/jfrEventWriterHost.inline.hpp\"\n-#include \"jfr\/writers\/jfrMemoryWriterHost.inline.hpp\"\n-#include \"jfr\/writers\/jfrStorageAdapter.hpp\"\n+#include \"jfr\/utilities\/jfrTime.hpp\"\n@@ -34,0 +32,1 @@\n+class JfrCheckpointWriter;\n@@ -37,12 +36,0 @@\n-typedef AcquireReleaseMemoryWriterHost<MallocAdapter<>, StackObj> JfrTransactionalDeprecatedEventWriter;\n-typedef EventWriterHost<BigEndianEncoder, CompressedIntegerEncoder, JfrTransactionalDeprecatedEventWriter> JfrDeprecatedEventWriterBase;\n-\n-class JfrDeprecatedBlobConstruction : public JfrDeprecatedEventWriterBase {\n- private:\n-  uint64_t _size_pos;\n- public:\n-  JfrDeprecatedBlobConstruction(JavaThread* jt);\n-  JfrBlobHandle stacktrace(const JfrDeprecatedEdge* edge);\n-  JfrBlobHandle event(const JfrDeprecatedEdge* edge, bool stacktrace);\n-};\n-\n@@ -64,0 +51,2 @@\n+\n+  static void install_stacktrace_blob(JfrDeprecatedEdge* edge, JfrCheckpointWriter& writer, JavaThread* jt);\n@@ -68,0 +57,1 @@\n+  JfrTicks _now;\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationEventWriter.hpp","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -52,0 +53,16 @@\n+static constexpr const size_t max_num_edges = 10000;\n+static size_t _num_edges = 0;\n+\n+static inline size_t increment() {\n+  return Atomic::add(&_num_edges, static_cast<size_t>(1));\n+}\n+\n+static inline bool max_limit_not_exceded() {\n+  const size_t value = increment();\n+  if (value <= max_num_edges) {\n+    return true;\n+  }\n+  \/\/ Logging here\n+  return false;\n+}\n+\n@@ -65,3 +82,1 @@\n-  _starttime(JfrTicks::now()),\n-  _event(),\n-  _event_no_stacktrace(),\n+  _invocation_time(JfrTicks::now()),\n@@ -83,14 +98,0 @@\n-bool JfrDeprecatedEdge::has_event() const {\n-  return _event.valid();\n-}\n-\n-const JfrBlobHandle& JfrDeprecatedEdge::event() const {\n-  assert(has_event(), \"invariant\");\n-  return _event;\n-}\n-\n-const JfrBlobHandle& JfrDeprecatedEdge::event_no_stacktrace() const {\n-  assert(_event_no_stacktrace.valid(), \"invariant\");\n-  return _event_no_stacktrace;\n-}\n-\n@@ -101,0 +102,5 @@\n+void JfrDeprecatedEdge::set_stacktrace(const JfrBlobHandle& blob) {\n+  assert(!has_stacktrace(), \"invariant\");\n+  _stacktrace = blob;\n+}\n+\n@@ -182,1 +188,1 @@\n-  return !is_jdk_module(sender_module, jt);\n+  return !is_jdk_module(sender_module, jt) && max_limit_not_exceded();\n@@ -251,10 +257,0 @@\n-\/\/ Creates and install blobs.\n-void JfrDeprecatedEdge::install_blobs(JavaThread* jt) {\n-  assert(!has_event(), \"invariant\");\n-  assert(!has_stacktrace(), \"invariant\");\n-  JfrDeprecatedBlobConstruction bc(jt);\n-  _stacktrace = bc.stacktrace(this);\n-  _event = bc.event(this, true);\n-  _event_no_stacktrace = bc.event(this, false);\n-}\n-\n@@ -267,0 +263,1 @@\n+  JfrCheckpointWriter& _writer;\n@@ -269,1 +266,1 @@\n-  PendingListProcessor(JavaThread* jt) : _jt(jt) {}\n+  PendingListProcessor(JfrCheckpointWriter& writer, JavaThread* jt) : _writer(writer), _jt(jt) {}\n@@ -272,1 +269,2 @@\n-    edge->install_blobs(_jt);\n+    JfrDeprecatedStackTraceWriter::install_stacktrace_blob(edge, _writer, _jt);\n+    assert(edge->has_stacktrace(), \"invariant\");\n@@ -287,1 +285,2 @@\n-    PendingListProcessor plp(jt);\n+    JfrCheckpointWriter writer(true, false, jt);\n+    PendingListProcessor plp(writer, jt);\n@@ -310,1 +309,1 @@\n-  const JfrBlobHandle blob = writer.copy();\n+  const JfrBlobHandle blob = writer.move();\n@@ -324,1 +323,1 @@\n-static inline bool stacktrace_is_enabled() {\n+static inline bool has_stacktrace() {\n@@ -330,1 +329,1 @@\n-  JfrDeprecatedEventWriter ebw(cw, stacktrace_is_enabled());\n+  JfrDeprecatedEventWriter ebw(cw, has_stacktrace());\n@@ -336,4 +335,8 @@\n-  if (stacktrace_is_enabled()) {\n-    JfrDeprecatedStackTraceWriter scw(cw);\n-    _resolved_list.iterate(scw);\n-  }\n+  assert(has_stacktrace(), \"invariant\");\n+  JfrDeprecatedStackTraceWriter scw(cw);\n+  _resolved_list.iterate(scw);\n+}\n+\n+static inline void write_type_sets(Thread* thread, bool on_error) {\n+  JfrCheckpointWriter writer(!on_error, false, thread);\n+  write_type_set_blobs(writer);\n@@ -343,1 +346,1 @@\n-\/\/ Secondly, we serialize all event blobs to the chunk.\n+\/\/ Secondly, we serialize all events to the chunk.\n@@ -346,12 +349,7 @@\n-static void write_edges(JfrChunkWriter& cw, Thread* thread, bool on_error) {\n-  write_stacktraces(cw);\n-  if (write_events(cw)) {\n-    JfrCheckpointWriter writer(!on_error, false, thread);\n-    write_type_set_blobs(writer);\n-  }\n-}\n-\n-void JfrDeprecationManager::write_events(JfrChunkWriter& cw, Thread* thread, bool on_error \/* false *\/) {\n-  if (JfrEventSetting::is_enabled(JfrDeprecatedInvocationEvent)) {\n-    if (_resolved_list.is_nonempty()) {\n-      write_edges(cw, thread, on_error);\n+void JfrDeprecationManager::write_edges(JfrChunkWriter& cw, Thread* thread, bool on_error \/* false *\/) {\n+  if (_resolved_list.is_nonempty() && JfrEventSetting::is_enabled(JfrDeprecatedInvocationEvent)) {\n+    if (has_stacktrace()) {\n+      write_stacktraces(cw);\n+    }\n+    if (write_events(cw)) {\n+      write_type_sets(thread, on_error);\n@@ -368,1 +366,1 @@\n-    write_events(*cw, thread);\n+    write_edges(*cw, thread);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationManager.cpp","additions":50,"deletions":52,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+  friend class JfrDeprecatedStackTraceWriter;\n@@ -42,3 +43,1 @@\n-  JfrTicks _starttime;\n-  JfrBlobHandle _event;\n-  JfrBlobHandle _event_no_stacktrace;\n+  JfrTicks _invocation_time;\n@@ -57,0 +56,2 @@\n+  void set_stacktrace(const JfrBlobHandle& blob);\n+\n@@ -68,1 +69,1 @@\n-  void install_blobs(JavaThread* jt);\n+  void install_stacktrace_blob(JavaThread* jt);\n@@ -76,1 +77,1 @@\n-  const JfrTicks& starttime() const { return _starttime; }\n+  const JfrTicks& invocation_time() const { return _invocation_time; }\n@@ -93,1 +94,1 @@\n-  static void write_events(JfrChunkWriter& cw, Thread* thread, bool on_error = false);\n+  static void write_edges(JfrChunkWriter& cw, Thread* thread, bool on_error = false);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationManager.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-static Method* find_real_caller(vframeStream& stream, JavaThread* jt) {\n+static Method* find_real_sender(vframeStream& stream, JavaThread* jt) {\n@@ -88,1 +88,0 @@\n-  stream.next();\n@@ -90,3 +89,0 @@\n-    if (!exclude_frame(stream.method())) {\n-      break;\n-    }\n@@ -94,0 +90,4 @@\n+    Method* method = stream.method();\n+    if (!exclude_frame(method)) {\n+      return method;\n+    }\n@@ -95,1 +95,1 @@\n-  return stream.method();\n+  return nullptr;\n@@ -106,1 +106,4 @@\n-    method = find_real_caller(stream, jt);\n+    method = find_real_sender(stream, jt);\n+    if (method == nullptr) {\n+      return nullptr;\n+    }\n@@ -139,2 +142,2 @@\n-    if (sender == nullptr) {\n-      return;\n+    if (sender != nullptr) {\n+      JfrDeprecationManager::on_link(method, sender, bci, frame_type, jt);\n@@ -142,1 +145,0 @@\n-    JfrDeprecationManager::on_link(method, sender, bci, frame_type, jt);\n@@ -148,2 +150,4 @@\n-void JfrResolution::on_backpatching_deprecated_invocation(const Method* method, JavaThread* jt) {\n-  assert(jt->has_last_Java_frame(), \"Invariant\");\n+static void on_backpatching_deprecated(const Method* deprecated_method, JavaThread* jt) {\n+  assert(deprecated_method != nullptr, \"invariant\");\n+  assert(deprecated_method->deprecated(), \"invariant\");\n+  assert(jt->has_last_Java_frame(), \"invariant\");\n@@ -158,2 +162,2 @@\n-    if (sender == nullptr) {\n-      return;\n+    if (sender != nullptr) {\n+      JfrDeprecationManager::on_link(deprecated_method, sender, bci, frame_type, jt);\n@@ -161,1 +165,8 @@\n-    JfrDeprecationManager::on_link(method, sender, bci, frame_type, jt);\n+  }\n+}\n+\n+void JfrResolution::on_backpatching(const Method* callee_method, JavaThread* jt) {\n+  assert(callee_method != nullptr, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n+  if (callee_method->deprecated()) {\n+    on_backpatching_deprecated(callee_method, jt);\n@@ -251,4 +262,0 @@\n-  if (target->deprecated()) {\n-    on_compiler_resolve_deprecated(target, builder->bci(), sender);\n-    return;\n-  }\n@@ -257,0 +264,4 @@\n+    return;\n+  }\n+  if (target->deprecated()) {\n+    on_compiler_resolve_deprecated(target, builder->bci(), sender);\n@@ -265,4 +276,0 @@\n-  if (target->deprecated()) {\n-    on_compiler_resolve_deprecated(target, parse->bci(), sender);\n-    return;\n-  }\n@@ -271,0 +278,4 @@\n+    return;\n+  }\n+  if (target->deprecated()) {\n+    on_compiler_resolve_deprecated(target, parse->bci(), sender);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.cpp","additions":34,"deletions":23,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static void on_backpatching_deprecated_invocation(const Method* deprecated_method, JavaThread* jt);\n+  static void on_backpatching(const Method* callee_method, JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1398,1 +1398,1 @@\n-  JFR_ONLY(if (patched_caller && callee_method()->deprecated()) Jfr::on_backpatching_deprecated_invocation(callee_method(), THREAD);)\n+  JFR_ONLY(if (patched_caller) Jfr::on_backpatching(callee_method(), THREAD);)\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+    public static int counter;\n@@ -92,0 +93,5 @@\n+    @Deprecated(forRemoval = true)\n+    public static void userDeprecatedForRemoval() {\n+        counter++;\n+    }\n+\n@@ -105,0 +111,4 @@\n+        \/\/ Invoke a deprecated method in the users code\n+        \/\/ to verify the negative case, i.e. that this\n+        \/\/ invocation is not reported.\n+        userDeprecatedForRemoval();\n@@ -118,0 +128,7 @@\n+        \/\/ Negative case\n+        try {\n+            assertMethod(events, \"testLevelAll\", \"userDeprecatedForRemoval\");\n+            throw new RuntimeException(\"Invocation of a deprecated method in user code should not be reported\");\n+        } catch (Exception e) {\n+            \/\/ Expected\n+        }\n@@ -190,2 +207,0 @@\n-            int bci = frame.getBytecodeIndex();\n-            int lineNumber = frame.getLineNumber();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestDeprecatedEvent.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}