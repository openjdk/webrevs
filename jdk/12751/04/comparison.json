{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -219,4 +219,12 @@\n-                if (timeout == 0) {\n-                    latch.await();\n-                } else {\n-                    if (!latch.await(Utils.adjustTimeout(timeout), unit)) {\n+                \/\/ Every second check if line is printed and if process is still alive\n+                Utils.waitForCondition(() -> latch.getCount() == 0 || !p.isAlive(),\n+                        unit.toMillis(Utils.adjustTimeout(timeout)), 1000);\n+\n+                if (latch.getCount() > 0) {\n+                    if (!p.isAlive()) {\n+                        \/\/ Give some extra time for the StreamPumper to run after the process completed\n+                        Thread.sleep(1000);\n+                        if (latch.getCount() > 0) {\n+                            throw new RuntimeException(\"Started process \" + name + \" terminated before producing the expected output.\");\n+                        }\n+                    } else {\n@@ -227,1 +235,1 @@\n-        } catch (TimeoutException | InterruptedException e) {\n+        } catch (TimeoutException | RuntimeException | InterruptedException e) {\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,3 +153,9 @@\n-            this.process = ProcessTools.startProcess(name, processBuilder, waitfor);\n-            \/\/ Release when process is started\n-            latch.countDown();\n+            try {\n+                this.process = ProcessTools.startProcess(name, processBuilder, waitfor);\n+            } catch (Throwable t) {\n+                System.out.println(String.format(\"ProcessThread[%s] failed: %s\", name, t.toString()));\n+                throw t;\n+            } finally {\n+                \/\/ Release when process is started or failed\n+                latch.countDown();\n+            }\n@@ -157,1 +163,0 @@\n-            \/\/ Will block...\n@@ -159,1 +164,0 @@\n-                this.process.waitFor();\n@@ -161,0 +165,2 @@\n+                \/\/ Will block...\n+                this.process.waitFor();\n@@ -162,1 +168,0 @@\n-                String name = Thread.currentThread().getName();\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/ProcessThread.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}