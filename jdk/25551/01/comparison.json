{"files":[{"patch":"@@ -7764,2 +7764,1 @@\n-  format %{ \"movw   $src, $src\\n\\t\"\n-            \"mov    $tmp, $src\\t# vector (1D)\\n\\t\"\n+  format %{ \"fmovs  $tmp, $src\\t# vector (1S)\\n\\t\"\n@@ -7770,2 +7769,1 @@\n-    __ movw($src$$Register, $src$$Register); \/\/ ensure top 32 bits 0\n-    __ mov($tmp$$FloatRegister, __ D, 0, $src$$Register);\n+    __ fmovs($tmp$$FloatRegister, $src$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8353266\n+ * @summary Integer.bitCount modifies input register\n+ * @library \/test\/lib \/\n+ *\n+ * @run main\/othervm\n+ *      -Xbatch\n+ *      -XX:CompileOnly=compiler.intrinsics.BitCountIAarch64PreservesArgument::test\n+ *      compiler.intrinsics.BitCountIAarch64PreservesArgument\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8353266\n+ * @library \/test\/lib \/\n+ *\n+ * @run main compiler.intrinsics.BitCountIAarch64PreservesArgument\n+ *\/\n+\n+package compiler.intrinsics;\n+\n+import static compiler.lib.generators.Generators.G;\n+\n+public class BitCountIAarch64PreservesArgument {\n+    static long lFld;\n+    static long result;\n+\n+    public static void main(String[] args) {\n+        lFld = 0xfedc_ba98_7654_3210L;\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+            if (result != 0xfedc_ba98_7654_3210L) {\n+                \/\/ Wrongly outputs the cut input 0x7654_3210 == 1985229328\n+                throw new RuntimeException(\"Wrong result. Expected result = \" + lFld + \"; Actual result = \" + result);\n+            }\n+        }\n+\n+        lFld = G.longs().next();\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+            if (result != lFld) {\n+                throw new RuntimeException(\"Wrong result. Expected result = \" + lFld + \"; Actual result = \" + result);\n+            }\n+        }\n+    }\n+\n+    static void test() {\n+        long x = lFld;\n+        try {\n+            result = Integer.bitCount((int) x); \/\/ Cut input: 0x7654_3210 == 1985229328\n+            throw new RuntimeException();\n+        } catch (RuntimeException _) {\n+        }\n+        result = x;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/BitCountIAarch64PreservesArgument.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}