{"files":[{"patch":"@@ -121,5 +121,0 @@\n-<li><a href=\"#cross-compiling-the-easy-way-with-openjdk-devkits\"\n-id=\"toc-cross-compiling-the-easy-way-with-openjdk-devkits\">Cross\n-compiling the easy way with OpenJDK devkits<\/a><\/li>\n-<li><a href=\"#boot-jdk-and-build-jdk\"\n-id=\"toc-boot-jdk-and-build-jdk\">Boot JDK and Build JDK<\/a><\/li>\n@@ -129,0 +124,2 @@\n+<li><a href=\"#boot-jdk-and-build-jdk\"\n+id=\"toc-boot-jdk-and-build-jdk\">Boot JDK and Build JDK<\/a><\/li>\n@@ -133,9 +130,0 @@\n-<li><a href=\"#cross-compiling-with-debian-sysroots\"\n-id=\"toc-cross-compiling-with-debian-sysroots\">Cross compiling with\n-Debian sysroots<\/a><\/li>\n-<li><a href=\"#building-for-armaarch64\"\n-id=\"toc-building-for-armaarch64\">Building for ARM\/aarch64<\/a><\/li>\n-<li><a href=\"#building-for-risc-v\" id=\"toc-building-for-risc-v\">Building\n-for RISC-V<\/a><\/li>\n-<li><a href=\"#building-for-musl\" id=\"toc-building-for-musl\">Building for\n-musl<\/a><\/li>\n@@ -144,0 +132,6 @@\n+<li><a href=\"#cross-compiling-the-easy-way\"\n+id=\"toc-cross-compiling-the-easy-way\">Cross compiling the easy\n+way<\/a><\/li>\n+<li><a href=\"#considerations-for-specific-targets\"\n+id=\"toc-considerations-for-specific-targets\">Considerations for specific\n+targets<\/a><\/li>\n@@ -216,4 +210,4 @@\n-<p>If you are eager to try out building the JDK, these simple steps\n-works most of the time. They assume that you have installed Git (and\n-Cygwin if running on Windows) and cloned the top-level JDK repository\n-that you want to build.<\/p>\n+<p>If you are eager to try out building the JDK, these simple steps work\n+most of the time. They assume that you have installed Git (and Cygwin,\n+MSYS2 or WSL if running on Windows), and want to clone the main-line JDK\n+repository.<\/p>\n@@ -223,1 +217,1 @@\n-<code>git clone https:\/\/git.openjdk.org\/jdk\/<\/code><\/p><\/li>\n+<code>git clone https:\/\/git.openjdk.org\/jdk<\/code><\/p><\/li>\n@@ -239,2 +233,2 @@\n-<li><p><a href=\"##running-tests\">Run basic tests<\/a>:<br \/>\n-<code>make run-test-tier1<\/code><\/p><\/li>\n+<li><p><a href=\"#running-tests\">Run basic tests<\/a>:<br \/>\n+<code>make test-tier1<\/code><\/p><\/li>\n@@ -254,3 +248,1 @@\n-<p>Make sure you are getting the correct version. As of JDK 10, the\n-source is no longer split into separate repositories so you only need to\n-clone one single repository. At the <a\n+<p>Make sure you are getting the correct version. At the <a\n@@ -258,4 +250,14 @@\n-of all available repositories. If you want to build an older version,\n-e.g. JDK 11, it is recommended that you get the <code>jdk11u<\/code>\n-repo, which contains incremental updates, instead of the\n-<code>jdk11<\/code> repo, which was frozen at JDK 11 GA.<\/p>\n+of all available repositories. Commonly used repositories are:<\/p>\n+<ul>\n+<li><p>The <a href=\"https:\/\/openjdk.org\/projects\/jdk\">JDK Project<\/a>\n+(the main-line currently in development):\n+https:\/\/git.openjdk.org\/jdk<\/p><\/li>\n+<li><p>The <a href=\"https:\/\/openjdk.org\/projects\/jdk-updates\/\">JDK\n+Updates Project<\/a>, which has one repository per update release, e.g.\n+https:\/\/git.openjdk.org\/jdk17u for JDK 17.<\/p><\/li>\n+<\/ul>\n+<p>If you want to build an older version, e.g. JDK 17, it is strongly\n+recommended that you use the JDK Updates repository, e.g. the\n+<code>jdk17u<\/code>, which contains incremental updates, instead of the\n+JDK Project repository <code>jdk17<\/code>, which was frozen at JDK 17\n+GA.<\/p>\n@@ -365,2 +367,2 @@\n-<td>Linux<\/td>\n-<td>Oracle Enterprise Linux 6.4 \/ 7.6<\/td>\n+<td>Linux\/x64<\/td>\n+<td>Oracle Enterprise Linux 6.4 \/ 8.x<\/td>\n@@ -369,2 +371,2 @@\n-<td>macOS<\/td>\n-<td>macOS 13 (Ventura)<\/td>\n+<td>Linux\/aarch64<\/td>\n+<td>Oracle Enterprise Linux 7.6 \/ 8.x<\/td>\n@@ -373,0 +375,4 @@\n+<td>macOS<\/td>\n+<td>macOS 13.x (Ventura)<\/td>\n+<\/tr>\n+<tr class=\"even\">\n@@ -374,1 +380,1 @@\n-<td>Windows Server 2012 R2<\/td>\n+<td>Windows Server 2016<\/td>\n@@ -393,5 +399,4 @@\n-Windows. Currently, the only supported such layers are Cygwin, Windows\n-Subsystem for Linux (WSL), and MSYS2. (MSYS is no longer supported due\n-to an outdated bash; While OpenJDK can be built with MSYS2, support for\n-it is still experimental, so build failures and unusual errors are not\n-uncommon.)<\/p>\n+Windows. Currently, the supported such layers are Cygwin, MSYS2 and\n+Windows Subsystem for Linux (WSL). Of these, Cygwin is the one that has\n+received the most real-world testing and is likely to cause least\n+trouble.<\/p>\n@@ -408,3 +413,3 @@\n-<p>A functioning <a href=\"https:\/\/www.cygwin.com\/\">Cygwin<\/a>\n-environment is required for building the JDK on Windows. If you have a\n-64-bit OS, we strongly recommend using the 64-bit version of Cygwin.<\/p>\n+<p>Install <a href=\"https:\/\/www.cygwin.com\/\">Cygwin<\/a> as instructed on\n+the home page. It is strongly recommended to use the 64-bit version of\n+Cygwin.<\/p>\n@@ -438,0 +443,14 @@\n+<h4 id=\"msys2\">MSYS2<\/h4>\n+<p>Install <a href=\"https:\/\/www.msys2.org\/\">MSYS2<\/a> as instructed on\n+the home page.<\/p>\n+<p>Apart from the basic MSYS2 installation, the following packages must\n+also be installed:<\/p>\n+<ul>\n+<li><code>autoconf<\/code><\/li>\n+<li><code>tar<\/code><\/li>\n+<li><code>make<\/code><\/li>\n+<li><code>zip<\/code><\/li>\n+<li><code>unzip<\/code><\/li>\n+<\/ul>\n+<p>You can install these packages using the following command line:<\/p>\n+<pre><code>pacman -S autoconf tar make zip unzip<\/code><\/pre>\n@@ -440,5 +459,9 @@\n-<p>Windows 10 1809 or newer is supported due to a dependency on the\n-wslpath utility and support for environment variable sharing through\n-WSLENV. Version 1803 can work but intermittent build failures have been\n-observed.<\/p>\n-<p>It's possible to build both Windows and Linux binaries from WSL. To\n+<p>WSL comes in two flavors, WSL1 and WSL2. These are drastically\n+different under the hood. WSL1 runs the binaries natively by translating\n+Linux kernel calls into Windows kernel calls, while WSL2 runs Linux in a\n+virtual machine. Both solutions have their pros and cons, and you might\n+need to test both before deciding which works best for you. Both WSL1\n+and WSL2 are supported, but to varying degrees.<\/p>\n+<p>To use WSL for building the JDK, you will need Windows 10 version\n+1809 or later, and you will need to install an Ubuntu guest.<\/p>\n+<p>It is possible to build both Windows and Linux binaries from WSL. To\n@@ -497,4 +520,1 @@\n-system and toolchain. There are ongoing efforts to loosen this strict\n-coupling between compiler and operating system (see <a\n-href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8288293\">JDK-8288293<\/a>) but\n-it will likely be a very long time before this goal can be realized.<\/p>\n+system and toolchain.<\/p>\n@@ -555,4 +575,2 @@\n-<p>All compilers are expected to be able to compile to the C99 language\n-standard, as some C99 features are used in the source code. Microsoft\n-Visual Studio doesn't fully support C99 so in practice shared code is\n-limited to using C99 features that it does support.<\/p>\n+<p>All compilers are expected to be able to handle the C11 language\n+standard for C, and C++14 for C++.<\/p>\n@@ -560,3 +578,2 @@\n-<p>The minimum accepted version of gcc is 5.0. Older versions will\n-generate a warning by <code>configure<\/code> and are unlikely to\n-work.<\/p>\n+<p>The minimum accepted version of gcc is 6.0. Older versions will not\n+be accepted by <code>configure<\/code>.<\/p>\n@@ -584,2 +601,2 @@\n-is that the setting is system wide and you may have to revert it after\n-an OpenJDK build.<\/li>\n+is that the setting is system wide and you may have to revert it after a\n+JDK build.<\/li>\n@@ -588,1 +605,1 @@\n-This allows using a specific Xcode version for an OpenJDK build,\n+This allows using a specific Xcode version for a JDK build,\n@@ -626,1 +643,1 @@\n-building JDK 9 a JDK 8 would be suitable as boot JDK. However, the JDK\n+building JDK 18 a JDK 17 would be suitable as boot JDK. However, the JDK\n@@ -630,1 +647,1 @@\n-JDK 8 GA might not be able to build JDK 9 on all platforms.<\/p>\n+e.g. JDK 8 GA might not be able to build JDK 9 on all platforms.<\/p>\n@@ -634,1 +651,4 @@\n-<p>If the boot JDK is not automatically detected, or the wrong JDK is\n+<p>The <code>configure<\/code> scripts tries to locate a suitable boot\n+JDK automatically, but due to the lack of standard installation\n+locations on most platforms, this heuristics has a high likelihood to\n+fail. If the boot JDK is not automatically detected, or the wrong JDK is\n@@ -637,7 +657,6 @@\n-<p>JDK binaries for Linux, Windows and macOS can be downloaded from <a\n-href=\"https:\/\/jdk.java.net\">jdk.java.net<\/a>. An alternative is to\n-download the <a\n-href=\"https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\">Oracle\n-JDK<\/a>. Another is the <a href=\"https:\/\/adoptopenjdk.net\/\">Adopt\n-OpenJDK Project<\/a>, which publishes experimental prebuilt binaries for\n-various platforms.<\/p>\n+<p>An overview of common ways to download and install prebuilt JDK\n+binaries can be found on https:\/\/openjdk.org\/install. An alternative is\n+to download the <a\n+href=\"https:\/\/www.oracle.com\/java\/technologies\/downloads\">Oracle\n+JDK<\/a>. Another is <a href=\"https:\/\/adoptium.net\/\">Adoptium<\/a>, which\n+publishes prebuilt binaries for various platforms.<\/p>\n@@ -659,2 +678,2 @@\n-<code>--with-&lt;LIB&gt;-include=&lt;path to include&gt; --with-&lt;LIB&gt;-lib=&lt;path to lib&gt;<\/code>.\n-The first variant is more concise, but require the include files and\n+<code>--with-&lt;LIB&gt;-include=&lt;path to include&gt; --with-&lt;LIB&gt;-lib=&lt;path to lib&gt;<\/code>.<\/p>\n+<p>The first variant is more concise, but require the include files and\n@@ -662,3 +681,2 @@\n-most cases, it works fine.<\/p>\n-<p>As a fallback, the second version allows you to point to the include\n-directory and the lib directory separately.<\/p>\n+most cases, it works fine. As a fallback, the second version allows you\n+to point to the include directory and the lib directory separately.<\/p>\n@@ -673,1 +691,1 @@\n-<code>sudo apt-get install     libfreetype6-dev<\/code>.<\/li>\n+<code>sudo apt-get install libfreetype6-dev<\/code>.<\/li>\n@@ -675,1 +693,1 @@\n-<code>sudo yum install     freetype-devel<\/code>.<\/li>\n+<code>sudo yum install freetype-devel<\/code>.<\/li>\n@@ -690,1 +708,1 @@\n-<code>sudo apt-get install     libfontconfig-dev<\/code>.<\/li>\n+<code>sudo apt-get install libfontconfig-dev<\/code>.<\/li>\n@@ -692,1 +710,1 @@\n-<code>sudo yum install     fontconfig-devel<\/code>.<\/li>\n+<code>sudo yum install fontconfig-devel<\/code>.<\/li>\n@@ -703,1 +721,1 @@\n-<code>sudo apt-get install     libcups2-dev<\/code>.<\/li>\n+<code>sudo apt-get install libcups2-dev<\/code>.<\/li>\n@@ -705,1 +723,1 @@\n-<code>sudo yum install     cups-devel<\/code>.<\/li>\n+<code>sudo yum install cups-devel<\/code>.<\/li>\n@@ -716,1 +734,1 @@\n-<code>sudo apt-get install     libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n+<code>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n@@ -718,1 +736,1 @@\n-<code>sudo yum install     libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-devel<\/code>.<\/li>\n+<code>sudo yum install libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-devel<\/code>.<\/li>\n@@ -720,1 +738,1 @@\n-<code>sudo apk add libx11-dev     libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n+<code>sudo apk add libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n@@ -730,1 +748,1 @@\n-<code>sudo apt-get install     libasound2-dev<\/code>.<\/li>\n+<code>sudo apt-get install libasound2-dev<\/code>.<\/li>\n@@ -732,1 +750,1 @@\n-<code>sudo yum install     alsa-lib-devel<\/code>.<\/li>\n+<code>sudo yum install alsa-lib-devel<\/code>.<\/li>\n@@ -744,1 +762,1 @@\n-<code>sudo apt-get install     libffi-dev<\/code>.<\/li>\n+<code>sudo apt-get install libffi-dev<\/code>.<\/li>\n@@ -746,1 +764,1 @@\n-<code>sudo yum install     libffi-devel<\/code>.<\/li>\n+<code>sudo yum install libffi-devel<\/code>.<\/li>\n@@ -754,1 +772,1 @@\n-<p>The JDK requires <a\n+<p>The JDK build requires <a\n@@ -759,1 +777,1 @@\n-<code>sudo apt-get install     autoconf<\/code>.<\/li>\n+<code>sudo apt-get install autoconf<\/code>.<\/li>\n@@ -761,1 +779,1 @@\n-<code>sudo yum install     autoconf<\/code>.<\/li>\n+<code>sudo yum install autoconf<\/code>.<\/li>\n@@ -767,1 +785,1 @@\n-<code>&lt;path to Cygwin setup&gt;\/setup-x86_64 -q     -P autoconf<\/code>.<\/li>\n+<code>&lt;path to Cygwin setup&gt;\/setup-x86_64 -q -P autoconf<\/code>.<\/li>\n@@ -774,2 +792,3 @@\n-<p>The JDK requires <a href=\"https:\/\/www.gnu.org\/software\/make\">GNU\n-Make<\/a>. No other flavors of make are supported.<\/p>\n+<p>The JDK build requires <a\n+href=\"https:\/\/www.gnu.org\/software\/make\">GNU Make<\/a>. No other flavors\n+of make are supported.<\/p>\n@@ -795,2 +814,3 @@\n-<p>The JDK requires <a href=\"https:\/\/www.gnu.org\/software\/bash\">GNU\n-Bash<\/a>. No other shells are supported.<\/p>\n+<p>The JDK build requires <a\n+href=\"https:\/\/www.gnu.org\/software\/bash\">GNU Bash<\/a>. No other shells\n+are supported.<\/p>\n@@ -1023,1 +1043,1 @@\n-these followin patterns. A phase can be either of <code>gensrc<\/code>,\n+these following patterns. A phase can be either of <code>gensrc<\/code>,\n@@ -1081,0 +1101,2 @@\n+<li><code>TEST_OPTS<\/code><\/li>\n+<li><code>TEST_VM_OPTS<\/code><\/li>\n@@ -1083,0 +1105,1 @@\n+<li><code>MICRO<\/code><\/li>\n@@ -1120,3 +1143,4 @@\n-href=\"https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.14.0\">here<\/a><\/li>\n-<li>or by checking out <code>v1.14.0<\/code> tag of\n-<code>googletest<\/code> project:\n+href=\"https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.14.0\">here<\/a>,\n+or<\/li>\n+<li>by checking out <code>v1.14.0<\/code> tag of <code>googletest<\/code>\n+project:\n@@ -1126,1 +1150,1 @@\n-<pre><code>make run-test-tier1<\/code><\/pre>\n+<pre><code>make test-tier1<\/code><\/pre>\n@@ -1191,82 +1215,5 @@\n-<h3 id=\"cross-compiling-the-easy-way-with-openjdk-devkits\">Cross\n-compiling the easy way with OpenJDK devkits<\/h3>\n-<p>The OpenJDK build system provides out-of-the box support for creating\n-and using so called devkits. A <code>devkit<\/code> is basically a\n-collection of a cross-compiling toolchain and a sysroot environment\n-which can easily be used together with the <code>--with-devkit<\/code>\n-configure option to cross compile the OpenJDK. On Linux\/x86_64, the\n-following command:<\/p>\n-<pre><code>bash configure --with-devkit=&lt;devkit-path&gt; --openjdk-target=ppc64-linux-gnu &amp;&amp; make<\/code><\/pre>\n-<p>will configure and build OpenJDK for Linux\/ppc64 assuming that\n-<code>&lt;devkit-path&gt;<\/code> points to a Linux\/x86_64 to Linux\/ppc64\n-devkit.<\/p>\n-<p>Devkits can be created from the <code>make\/devkit<\/code> directory by\n-executing:<\/p>\n-<pre><code>make [ TARGETS=&quot;&lt;TARGET_TRIPLET&gt;+&quot; ] [ BASE_OS=&lt;OS&gt; ] [ BASE_OS_VERSION=&lt;VER&gt; ]<\/code><\/pre>\n-<p>where <code>TARGETS<\/code> contains one or more\n-<code>TARGET_TRIPLET<\/code>s of the form described in <a\n-href=\"https:\/\/sourceware.org\/autobook\/autobook\/autobook_17.html\">section\n-3.4 of the GNU Autobook<\/a>. If no targets are given, a native toolchain\n-for the current platform will be created. Currently, at least the\n-following targets are known to work:<\/p>\n-<table>\n-<thead>\n-<tr class=\"header\">\n-<th>Supported devkit targets<\/th>\n-<\/tr>\n-<\/thead>\n-<tbody>\n-<tr class=\"odd\">\n-<td>x86_64-linux-gnu<\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td>aarch64-linux-gnu<\/td>\n-<\/tr>\n-<tr class=\"odd\">\n-<td>arm-linux-gnueabihf<\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td>ppc64-linux-gnu<\/td>\n-<\/tr>\n-<tr class=\"odd\">\n-<td>ppc64le-linux-gnu<\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td>s390x-linux-gnu<\/td>\n-<\/tr>\n-<\/tbody>\n-<\/table>\n-<p><code>BASE_OS<\/code> must be one of \"OEL6\" for Oracle Enterprise\n-Linux 6 or \"Fedora\" (if not specified \"OEL6\" will be the default). If\n-the base OS is \"Fedora\" the corresponding Fedora release can be\n-specified with the help of the <code>BASE_OS_VERSION<\/code> option (with\n-\"27\" as default version). If the build is successful, the new devkits\n-can be found in the <code>build\/devkit\/result<\/code> subdirectory:<\/p>\n-<pre><code>cd make\/devkit\n-make TARGETS=&quot;ppc64le-linux-gnu aarch64-linux-gnu&quot; BASE_OS=Fedora BASE_OS_VERSION=21\n-ls -1 ..\/..\/build\/devkit\/result\/\n-x86_64-linux-gnu-to-aarch64-linux-gnu\n-x86_64-linux-gnu-to-ppc64le-linux-gnu<\/code><\/pre>\n-<p>Notice that devkits are not only useful for targeting different build\n-platforms. Because they contain the full build dependencies for a system\n-(i.e. compiler and root file system), they can easily be used to build\n-well-known, reliable and reproducible build environments. You can for\n-example create and use a devkit with GCC 7.3 and a Fedora 12 sysroot\n-environment (with glibc 2.11) on Ubuntu 14.04 (which doesn't have GCC\n-7.3 by default) to produce OpenJDK binaries which will run on all Linux\n-systems with runtime libraries newer than the ones from Fedora 12 (e.g.\n-Ubuntu 16.04, SLES 11 or RHEL 6).<\/p>\n-<h3 id=\"boot-jdk-and-build-jdk\">Boot JDK and Build JDK<\/h3>\n-<p>When cross-compiling, make sure you use a boot JDK that runs on the\n-<em>build<\/em> system, and not on the <em>target<\/em> system.<\/p>\n-<p>To be able to build, we need a \"Build JDK\", which is a JDK built from\n-the current sources (that is, the same as the end result of the entire\n-build process), but able to run on the <em>build<\/em> system, and not\n-the <em>target<\/em> system. (In contrast, the Boot JDK should be from an\n-older release, e.g. JDK 8 when building JDK 9.)<\/p>\n-<p>The build process will create a minimal Build JDK for you, as part of\n-building. To speed up the build, you can use\n-<code>--with-build-jdk<\/code> to <code>configure<\/code> to point to a\n-pre-built Build JDK. Please note that the build result is unpredictable,\n-and can possibly break in subtle ways, if the Build JDK does not\n-<strong>exactly<\/strong> match the current sources.<\/p>\n+<p>Setting up a cross-compilation environment by hand is time-consuming\n+and error prone. It is highly recommended that you use one of the\n+automated methods described in <a\n+href=\"#cross-compiling-the-easy-way\">Cross compiling the easy\n+way<\/a>.<\/p>\n@@ -1289,0 +1236,14 @@\n+<h3 id=\"boot-jdk-and-build-jdk\">Boot JDK and Build JDK<\/h3>\n+<p>When cross-compiling, make sure you use a boot JDK that runs on the\n+<em>build<\/em> system, and not on the <em>target<\/em> system.<\/p>\n+<p>To be able to build, we need a \"Build JDK\", which is a JDK built from\n+the current sources (that is, the same as the end result of the entire\n+build process), but able to run on the <em>build<\/em> system, and not\n+the <em>target<\/em> system. (In contrast, the Boot JDK should be from an\n+older release, e.g. JDK 8 when building JDK 9.)<\/p>\n+<p>The build process will create a minimal Build JDK for you, as part of\n+building. To speed up the build, you can use\n+<code>--with-build-jdk<\/code> to <code>configure<\/code> to point to a\n+pre-built Build JDK. Please note that the build result is unpredictable,\n+and can possibly break in subtle ways, if the Build JDK does not\n+<strong>exactly<\/strong> match the current sources.<\/p>\n@@ -1293,3 +1254,3 @@\n-on the build system (the <em>build<\/em> toolchain). Note that\n-cross-compiling is only supported for gcc at the time being. The gcc\n-standard is to prefix cross-compiling toolchains with the target\n+on the build system (the <em>build<\/em> toolchain).<\/p>\n+<p>If you are cross-compiling using gcc, it is recommended to use the\n+gcc standard where you prefix cross-compiling tools with the target\n@@ -1298,4 +1259,4 @@\n-<p>The <em>build<\/em> toolchain will be autodetected just the same way\n-the normal <em>build<\/em>\/<em>target<\/em> toolchain will be autodetected\n-when not cross-compiling. If this is not what you want, or if the\n-autodetection fails, you can specify a devkit containing the\n+<p>The <em>build<\/em> toolchain will be auto-detected just the same way\n+the normal <em>build<\/em>\/<em>target<\/em> toolchain will be\n+auto-detected when not cross-compiling. If this is not what you want, or\n+if the auto-detection fails, you can specify a devkit containing the\n@@ -1312,1 +1273,2 @@\n-correctly setup. (See <code>basics.m4<\/code> for details.)<\/p>\n+correctly setup. (See <code>make\/autoconf\/basics.m4<\/code> for\n+details.)<\/p>\n@@ -1351,19 +1313,19 @@\n-<li>libxi<\/li>\n-<li>libxi-dev<\/li>\n-<li>x11proto-core-dev<\/li>\n-<li>x11proto-input-dev<\/li>\n-<li>x11proto-kb-dev<\/li>\n-<li>x11proto-render-dev<\/li>\n-<li>x11proto-xext-dev<\/li>\n-<li>libice-dev<\/li>\n-<li>libxrender<\/li>\n-<li>libxrender-dev<\/li>\n-<li>libxrandr-dev<\/li>\n-<li>libsm-dev<\/li>\n-<li>libxt-dev<\/li>\n-<li>libx11<\/li>\n-<li>libx11-dev<\/li>\n-<li>libxtst<\/li>\n-<li>libxtst-dev<\/li>\n-<li>libxext<\/li>\n-<li>libxext-dev<\/li>\n+<li><code>libxi<\/code><\/li>\n+<li><code>libxi-dev<\/code><\/li>\n+<li><code>x11proto-core-dev<\/code><\/li>\n+<li><code>x11proto-input-dev<\/code><\/li>\n+<li><code>x11proto-kb-dev<\/code><\/li>\n+<li><code>x11proto-render-dev<\/code><\/li>\n+<li><code>x11proto-xext-dev<\/code><\/li>\n+<li><code>libice-dev<\/code><\/li>\n+<li><code>libxrender<\/code><\/li>\n+<li><code>libxrender-dev<\/code><\/li>\n+<li><code>libxrandr-dev<\/code><\/li>\n+<li><code>libsm-dev<\/code><\/li>\n+<li><code>libxt-dev<\/code><\/li>\n+<li><code>libx11<\/code><\/li>\n+<li><code>libx11-dev<\/code><\/li>\n+<li><code>libxtst<\/code><\/li>\n+<li><code>libxtst-dev<\/code><\/li>\n+<li><code>libxext<\/code><\/li>\n+<li><code>libxext-dev<\/code><\/li>\n@@ -1389,8 +1351,91 @@\n-<h3 id=\"cross-compiling-with-debian-sysroots\">Cross compiling with\n-Debian sysroots<\/h3>\n-<p>Fortunately, you can create sysroots for foreign architectures with\n-tools provided by your OS. On Debian\/Ubuntu systems, one could use\n-<code>debootstrap<\/code> to create the <em>target<\/em> system chroot,\n-which would have the native libraries and headers specific to that\n-<em>target<\/em> system. After that, we can use the cross-compiler on the\n-<em>build<\/em> system, pointing into chroot to get the build\n+<h3 id=\"verifying-the-build\">Verifying the Build<\/h3>\n+<p>The build will end up in a directory named like\n+<code>build\/linux-arm-normal-server-release<\/code>.<\/p>\n+<p>Inside this build output directory, the <code>images\/jdk<\/code> will\n+contain the newly built JDK, for your <em>target<\/em> system.<\/p>\n+<p>Copy these folders to your <em>target<\/em> system. Then you can run\n+e.g. <code>images\/jdk\/bin\/java -version<\/code>.<\/p>\n+<h3 id=\"cross-compiling-the-easy-way\">Cross compiling the easy way<\/h3>\n+<p>Setting up a proper cross-compilation environment can be a lot of\n+work. Fortunately there are ways that more or less automate this\n+process. Here are two recommended methods, using the \"devkits\" that can\n+be generated by the JDK build system, or by using the\n+<code>debootstrap<\/code> command in Debian. The former works on all\n+Linux distributions, the latter only on Debian and derivatives. Both\n+solution only work for gcc.<\/p>\n+<p>The devkit method is regularly used for testing by Oracle, and the\n+debootstrap method is regularly used in GitHub Actions testing.<\/p>\n+<h4 id=\"using-openjdk-devkits\">Using OpenJDK devkits<\/h4>\n+<p>The JDK build system provides out-of-the box support for creating and\n+using so called devkits. A <code>devkit<\/code> is basically a collection\n+of a cross-compiling toolchain and a sysroot environment which can\n+easily be used together with the <code>--with-devkit<\/code> configure\n+option to cross compile the JDK. On Linux\/x86_64, the following\n+command:<\/p>\n+<pre><code>bash configure --with-devkit=&lt;devkit-path&gt; --openjdk-target=ppc64-linux-gnu &amp;&amp; make<\/code><\/pre>\n+<p>will configure and build the JDK for Linux\/ppc64 assuming that\n+<code>&lt;devkit-path&gt;<\/code> points to a Linux\/x86_64 to Linux\/ppc64\n+devkit.<\/p>\n+<p>Devkits can be created from the <code>make\/devkit<\/code> directory by\n+executing:<\/p>\n+<pre><code>make [ TARGETS=&quot;&lt;TARGET_TRIPLET&gt;+&quot; ] [ BASE_OS=&lt;OS&gt; ] [ BASE_OS_VERSION=&lt;VER&gt; ]<\/code><\/pre>\n+<p>where <code>TARGETS<\/code> contains one or more\n+<code>TARGET_TRIPLET<\/code>s of the form described in <a\n+href=\"https:\/\/sourceware.org\/autobook\/autobook\/autobook_17.html\">section\n+3.4 of the GNU Autobook<\/a>. If no targets are given, a native toolchain\n+for the current platform will be created. Currently, at least the\n+following targets are known to work:<\/p>\n+<table>\n+<thead>\n+<tr class=\"header\">\n+<th>Supported devkit targets<\/th>\n+<\/tr>\n+<\/thead>\n+<tbody>\n+<tr class=\"odd\">\n+<td>x86_64-linux-gnu<\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td>aarch64-linux-gnu<\/td>\n+<\/tr>\n+<tr class=\"odd\">\n+<td>arm-linux-gnueabihf<\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td>ppc64-linux-gnu<\/td>\n+<\/tr>\n+<tr class=\"odd\">\n+<td>ppc64le-linux-gnu<\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td>s390x-linux-gnu<\/td>\n+<\/tr>\n+<\/tbody>\n+<\/table>\n+<p><code>BASE_OS<\/code> must be one of \"OEL6\" for Oracle Enterprise\n+Linux 6 or \"Fedora\" (if not specified \"OEL6\" will be the default). If\n+the base OS is \"Fedora\" the corresponding Fedora release can be\n+specified with the help of the <code>BASE_OS_VERSION<\/code> option (with\n+\"27\" as default version). If the build is successful, the new devkits\n+can be found in the <code>build\/devkit\/result<\/code> subdirectory:<\/p>\n+<pre><code>cd make\/devkit\n+make TARGETS=&quot;ppc64le-linux-gnu aarch64-linux-gnu&quot; BASE_OS=Fedora BASE_OS_VERSION=21\n+ls -1 ..\/..\/build\/devkit\/result\/\n+x86_64-linux-gnu-to-aarch64-linux-gnu\n+x86_64-linux-gnu-to-ppc64le-linux-gnu<\/code><\/pre>\n+<p>Notice that devkits are not only useful for targeting different build\n+platforms. Because they contain the full build dependencies for a system\n+(i.e. compiler and root file system), they can easily be used to build\n+well-known, reliable and reproducible build environments. You can for\n+example create and use a devkit with GCC 7.3 and a Fedora 12 sysroot\n+environment (with glibc 2.11) on Ubuntu 14.04 (which doesn't have GCC\n+7.3 by default) to produce JDK binaries which will run on all Linux\n+systems with runtime libraries newer than the ones from Fedora 12 (e.g.\n+Ubuntu 16.04, SLES 11 or RHEL 6).<\/p>\n+<h4 id=\"using-debian-debootstrap\">Using Debian debootstrap<\/h4>\n+<p>On Debian (or a derivative like Ubuntu), you can create sysroots for\n+foreign architectures with tools provided by the OS. You can use\n+<code>debootstrap<\/code> to create a <em>target<\/em> system chroot\n+directory, which would have the native libraries and headers specific to\n+that <em>target<\/em> system. After that, you can use the cross-compiler\n+on the <em>build<\/em> system, pointing into the chroot to get the build\n@@ -1413,3 +1458,3 @@\n-  https:\/\/httpredir.debian.org\/debian\/\n-# If the target architecture is `riscv64`,\n-# the path should be `debian-ports` instead of `debian`.<\/code><\/pre><\/li>\n+  https:\/\/httpredir.debian.org\/debian\/<\/code><\/pre>\n+<p>If the target architecture is <code>riscv64<\/code>, the path should\n+be <code>debian-ports<\/code> instead of <code>debian<\/code>.<\/p><\/li>\n@@ -1425,2 +1470,3 @@\n-  http:\/\/ports.ubuntu.com\/ubuntu-ports\/\n-# symlinks is in the universe repository<\/code><\/pre><\/li>\n+  http:\/\/ports.ubuntu.com\/ubuntu-ports\/<\/code><\/pre>\n+<p>Note that <code>symlinks<\/code> is in the universe\n+repository.<\/p><\/li>\n@@ -1573,1 +1619,3 @@\n-<h3 id=\"building-for-armaarch64\">Building for ARM\/aarch64<\/h3>\n+<h3 id=\"considerations-for-specific-targets\">Considerations for specific\n+targets<\/h3>\n+<h4 id=\"building-for-arm32\">Building for ARM32<\/h4>\n@@ -1575,6 +1623,7 @@\n-ARM, it is useful to set the ABI profile. A number of pre-defined ABI\n-profiles are available using <code>--with-abi-profile<\/code>:\n-arm-vfp-sflt, arm-vfp-hflt, arm-sflt, armv5-vfp-sflt, armv6-vfp-hflt.\n-Note that soft-float ABIs are no longer properly supported by the\n-JDK.<\/p>\n-<h3 id=\"building-for-risc-v\">Building for RISC-V<\/h3>\n+ARM, it is recommended to set the ABI profile. A number of pre-defined\n+ABI profiles are available using <code>--with-abi-profile<\/code>:\n+<code>arm-vfp-sflt<\/code>, <code>arm-vfp-hflt<\/code>,\n+<code>arm-sflt<\/code>, <code>armv5-vfp-sflt<\/code> and\n+<code>armv6-vfp-hflt<\/code>. Note that soft-float ABIs are no longer\n+properly supported by the JDK.<\/p>\n+<h4 id=\"building-for-risc-v\">Building for RISC-V<\/h4>\n@@ -1583,2 +1632,2 @@\n-toolchain<\/a>, but the <a href=\"#External-Library-Requirements\">external\n-libraries<\/a> required by OpenJDK complicate the building process. The\n+toolchain<\/a>, but the <a href=\"#external-library-requirements\">external\n+libraries<\/a> required by the JDK complicate the building process. The\n@@ -1601,1 +1650,1 @@\n-<li><p>Configure and build OpenJDK:<\/p>\n+<li><p>Configure and build the JDK:<\/p>\n@@ -1610,1 +1659,1 @@\n-<h3 id=\"building-for-musl\">Building for musl<\/h3>\n+<h4 id=\"building-for-musl\">Building for musl<\/h4>\n@@ -1612,4 +1661,5 @@\n-possible to cross-compile for musl libc on a glibc-based <em>build<\/em>\n-system. A devkit suitable for most target CPU architectures can be\n-obtained from <a href=\"https:\/\/musl.cc\">musl.cc<\/a>. After installing\n-the required packages in the sysroot, configure the build with\n+possible to cross-compile for <code>musl<\/code> libc on a glibc-based\n+<em>build<\/em> system. A devkit suitable for most target CPU\n+architectures can be obtained from <a\n+href=\"https:\/\/musl.cc\">musl.cc<\/a>. After installing the required\n+packages in the sysroot, configure the build with\n@@ -1624,7 +1674,0 @@\n-<h3 id=\"verifying-the-build\">Verifying the Build<\/h3>\n-<p>The build will end up in a directory named like\n-<code>build\/linux-arm-normal-server-release<\/code>.<\/p>\n-<p>Inside this build output directory, the <code>images\/jdk<\/code> will\n-contain the newly built JDK, for your <em>target<\/em> system.<\/p>\n-<p>Copy these folders to your <em>target<\/em> system. Then you can run\n-e.g. <code>images\/jdk\/bin\/java -version<\/code>.<\/p>\n@@ -1682,1 +1725,1 @@\n-<p>By default, the Hotspot build uses preccompiled headers (PCH) on the\n+<p>By default, the Hotspot build uses pre-compiled headers (PCH) on the\n@@ -1686,1 +1729,1 @@\n-<p>You can experiment by disabling precompiled headers using\n+<p>You can experiment by disabling pre-compiled headers using\n@@ -1725,1 +1768,1 @@\n-\/localhome\/git\/jdk-sandbox\/hotspot\/src\/share\/vm\/services\/psMemoryPool.cpp:1:1: error: &#39;failhere&#39; does not name a type\n+\/src\/jdk\/hotspot\/src\/share\/vm\/services\/psMemoryPool.cpp:1:1: error: &#39;failhere&#39; does not name a type\n@@ -1728,1 +1771,1 @@\n-* All command lines available in \/localhome\/git\/jdk-sandbox\/build\/linux-x64\/make-support\/failure-logs.\n+* All command lines available in \/src\/jdk\/build\/linux-x64\/make-support\/failure-logs.\n@@ -1732,1 +1775,1 @@\n-lib\/CompileJvm.gmk:207: recipe for target &#39;\/localhome\/git\/jdk-sandbox\/build\/linux-x64\/hotspot\/variant-server\/libjvm\/objs\/psMemoryPool.o&#39; failed\n+lib\/CompileJvm.gmk:207: recipe for target &#39;\/src\/jdk\/build\/linux-x64\/hotspot\/variant-server\/libjvm\/objs\/psMemoryPool.o&#39; failed\n@@ -1736,2 +1779,2 @@\n-Hint: Try searching the build log for the name of the first failed target.\n-Hint: If caused by a warning, try configure --disable-warnings-as-errors.<\/code><\/pre>\n+HELP: Try searching the build log for the name of the first failed target.\n+HELP: Run &#39;make doctor&#39; to diagnose build problems.<\/code><\/pre>\n@@ -1799,0 +1842,43 @@\n+<h4 id=\"running-make-doctor\">Running \"make doctor\"<\/h4>\n+<p>The build system comes with a built-in problem diagnosing system. If\n+you encounter unexpected build failures, you are highly encouraged to\n+run <code>make doctor<\/code>. The build system will check for common\n+sources of build problems and suggest suitable actions to take to fix\n+those problems.<\/p>\n+<p>These checks are not done during normal build time since they are\n+either too expensive performance-wise to perform, or since they are not\n+conclusive and just an indication about a potential problem.<\/p>\n+<p>The output from <code>make doctor<\/code> can look like this:<\/p>\n+<pre><code>&quot;make doctor&quot; will help you analyze your build environment. It can highlight\n+certain well-known problems, but it can never find all possible errors.\n+\n+* Verifying that configure has picked up git...\n+\n+* Checking for warnings from configure...\n+ ---\n+The following warnings were produced. Repeated here for convenience:\n+WARNING: pandoc is version 3.1.9, not the recommended version 2.19.2\n+ ---\n+! Inspect the warnings, fix any problems, and re-run configure\n+\n+* Checking for left-over core files...\n+Found these potential core files. They might interfere with the build process:\n+ ---\n+src\/hotspot\/core.1337\n+ ---\n+! Remove left-over core files\n+\n+* Checking for untracked files with illegal names...\n+\n+* If all else fails, try removing the entire build directory and re-creating\n+the same configuration using:\n+ ---\n+configure_command_line=$(make print-configuration)\n+make dist-clean\n+bash configure $configure_command_line\n+ ---\n+\n+* The build README (doc\/building.md) is a great source of information,\n+especially the chapter &quot;Fixing Unexpected Build Failures&quot;. Check it out!\n+\n+* If you still need assistance please contact build-dev@openjdk.org.<\/code><\/pre>\n@@ -1893,1 +1979,1 @@\n-href=\"#contributing-to-openjdk\">Contributing to OpenJDK<\/a> for more\n+href=\"#contributing-to-the-jdk\">Contributing to OpenJDK<\/a> for more\n@@ -1904,1 +1990,1 @@\n-<p>Currently, it is not possible to build OpenJDK fully reproducibly,\n+<p>Currently, it is not possible to build the JDK fully reproducibly,\n@@ -1906,1 +1992,1 @@\n-<p>An absolute prerequisite for building reproducible is to speficy a\n+<p>An absolute prerequisite for building reproducible is to specify a\n@@ -1943,1 +2029,2 @@\n-<li><p><code>--with-source-date<\/code><\/p>\n+<li><code>--with-source-date<\/code><\/li>\n+<\/ul>\n@@ -1960,2 +2047,4 @@\n-<code>current<\/code>.<\/p><\/li>\n-<li><p><code>--with-hotspot-build-time<\/code><\/p>\n+<code>current<\/code>.<\/p>\n+<ul>\n+<li><code>--with-hotspot-build-time<\/code><\/li>\n+<\/ul>\n@@ -1968,2 +2057,4 @@\n-the current time when building hotspot.<\/p><\/li>\n-<li><p><code>--with-copyright-year<\/code><\/p>\n+the current time when building hotspot.<\/p>\n+<ul>\n+<li><code>--with-copyright-year<\/code><\/li>\n+<\/ul>\n@@ -1976,2 +2067,4 @@\n-<code>--with-copyright-year=&lt;year&gt;<\/code>.<\/p><\/li>\n-<li><p><code>--enable-reproducible-build<\/code><\/p>\n+<code>--with-copyright-year=&lt;year&gt;<\/code>.<\/p>\n+<ul>\n+<li><code>--enable-reproducible-build<\/code><\/li>\n+<\/ul>\n@@ -1982,2 +2075,1 @@\n-turned off, the build might not be reproducible.<\/p><\/li>\n-<\/ul>\n+turned off, the build might not be reproducible.<\/p>\n@@ -2101,4 +2193,2 @@\n-<blockquote>\n-<p><strong>Note that if used incorrectly, this can lead to a broken\n-build!<\/strong><\/p>\n-<\/blockquote>\n+<p><strong>Note that if used incorrectly, this method can lead to a\n+broken build!<\/strong><\/p>\n@@ -2116,11 +2206,10 @@\n-<p>If you are modifying files in <code>java.base<\/code>, which is the by\n-far largest module in the JDK, then you need to rebuild all those files\n-whenever a single file has changed. (This inefficiency will hopefully be\n-addressed in JDK 10.)<\/p>\n-<p>As a hack, you can use the make control variable\n-<code>JDK_FILTER<\/code> to specify a pattern that will be used to limit\n-the set of files being recompiled. For instance,\n-<code>make java.base JDK_FILTER=javax\/crypto<\/code> (or, to combine\n-methods, <code>make java.base-java-only JDK_FILTER=javax\/crypto<\/code>)\n-will limit the compilation to files in the <code>javax.crypto<\/code>\n-package.<\/p>\n+<p>In older versions of the JDK, inefficiencies when building\n+<code>java.base<\/code> (by far the largest module in the JDK) could be\n+overcome by using the make control variable <code>JDK_FILTER<\/code>.\n+This is not needed anymore for performance reasons, but the\n+functionality is still present.<\/p>\n+<p>To use this, set the make control variable <code>JDK_FILTER<\/code> to\n+specify a pattern that will be used to limit the set of files being\n+recompiled. For instance,\n+<code>make java.base JDK_FILTER=javax\/crypto<\/code> will limit the\n+compilation to files in the <code>javax.crypto<\/code> package.<\/p>\n@@ -2190,4 +2279,40 @@\n-<p>This conversion is done by the <code>fixpath<\/code> tool, which is a\n-small wrapper that modifies unix-style paths to Windows-style paths in\n-command lines. Fixpath is compiled automatically by\n-<code>configure<\/code>.<\/p>\n+<p>This conversion is done by the <code>fixpath.sh<\/code> tool, which is\n+a small wrapper that modifies Unix-style paths to Windows-style paths.\n+The fixpath tool is called with the first argument as a sub-command\n+describing the action it should take. Available actions are\n+<code>import<\/code>, <code>exec<\/code>, <code>print<\/code> and\n+<code>verify<\/code>.<\/p>\n+<ul>\n+<li><p><code>import<\/code> is called at configure time to convert a path\n+given by the user and that might be in Windows format to Unix path,\n+which is used internally.<\/p><\/li>\n+<li><p><code>exec<\/code> is called at build time. This will take the\n+command line provided, complete with arguments, converting the paths in\n+the command line, and then execute the command.<\/p><\/li>\n+<li><p><code>print<\/code> is called at build time, in the rare cases\n+where a path might be needed in Windows format, but not as an argument\n+to a command to execute.<\/p><\/li>\n+<li><p><code>verify<\/code> is called at configure time to check that a\n+path is correctly specified and reachable by Windows.<\/p><\/li>\n+<\/ul>\n+<p>The fixpath tool uses a somewhat complex heuristic to infer which\n+part of the command line arguments refer to paths, and converts those.\n+In some circumstances, these heuristics can fail.<\/p>\n+<p>If you are having strange build issues related to path conversion,\n+you might need to debug how fixpath treats your paths. Here are some\n+ways to do this.<\/p>\n+<p>One way is to define the environment variable\n+<code>DEBUG_FIXPATH<\/code>, e.g. <code>DEBUG_FIXPATH=1 make jdk<\/code>.\n+When set, any call to <code>fixpath exec<\/code> will result in an output\n+like this:<\/p>\n+<pre><code>fixpath: debug: input: ls \/mnt\/c\/windows\n+fixpath: debug: output: ls c:\\windows<\/code><\/pre>\n+<p>You can also call fixpath yourself manually with your paths to see\n+how they are translated. For this, use <code>print<\/code> and\n+<code>import<\/code>. For example:<\/p>\n+<pre><code>$ bash make\/scripts\/fixpath.sh print \/mnt\/c\/windows\n+c:\\windows\n+$ bash make\/scripts\/fixpath.sh import &quot;c:\\\\windows&quot;\n+\/mnt\/c\/windows<\/code><\/pre>\n+<p>Remember that backslash is used as an escape character in the shell,\n+and needs to be doubled when used in Windows paths.<\/p>\n@@ -2223,2 +2348,2 @@\n-<p>The <code>configure<\/code> script is based on the autoconf framework,\n-but in some details deviate from a normal autoconf\n+<p>The <code>configure<\/code> script is using the autoconf framework,\n+but it has grown to deviate quite a lot from a traditional autoconf\n@@ -2239,3 +2364,0 @@\n-<p>In previous versions of the JDK, the generated script was checked in\n-at <code>make\/autoconf\/generated-configure.sh<\/code>. This is no longer\n-the case.<\/p>\n","filename":"doc\/building.html","additions":410,"deletions":288,"binary":false,"changes":698,"status":"modified"},{"patch":"@@ -5,3 +5,3 @@\n-If you are eager to try out building the JDK, these simple steps works most of\n-the time. They assume that you have installed Git (and Cygwin if running\n-on Windows) and cloned the top-level JDK repository that you want to build.\n+If you are eager to try out building the JDK, these simple steps work most of\n+the time. They assume that you have installed Git (and Cygwin, MSYS2 or WSL if\n+running on Windows), and want to clone the main-line JDK repository.\n@@ -10,1 +10,1 @@\n-    `git clone https:\/\/git.openjdk.org\/jdk\/`\n+    `git clone https:\/\/git.openjdk.org\/jdk`\n@@ -29,2 +29,2 @@\n- 5. [Run basic tests](##running-tests): \\\n-    `make run-test-tier1`\n+ 5. [Run basic tests](#running-tests): \\\n+    `make test-tier1`\n@@ -42,3 +42,2 @@\n-for you. See for instance [OpenJDK installation](\n-https:\/\/openjdk.org\/install) for some methods of installing a prebuilt\n-JDK.\n+for you. See for instance [OpenJDK installation](https:\/\/openjdk.org\/install)\n+for some methods of installing a prebuilt JDK.\n@@ -48,6 +47,15 @@\n-Make sure you are getting the correct version. As of JDK 10, the source is no\n-longer split into separate repositories so you only need to clone one single\n-repository. At the [OpenJDK Git site](https:\/\/git.openjdk.org\/) you\n-can see a list of all available repositories. If you want to build an older version,\n-e.g. JDK 11, it is recommended that you get the `jdk11u` repo, which contains\n-incremental updates, instead of the `jdk11` repo, which was frozen at JDK 11 GA.\n+Make sure you are getting the correct version. At the [OpenJDK Git\n+site](https:\/\/git.openjdk.org\/) you can see a list of all available\n+repositories. Commonly used repositories are:\n+\n+* The [JDK Project](https:\/\/openjdk.org\/projects\/jdk) (the main-line currently\n+  in development): https:\/\/git.openjdk.org\/jdk\n+\n+* The [JDK Updates Project](https:\/\/openjdk.org\/projects\/jdk-updates\/), which\n+  has one repository per update release, e.g. https:\/\/git.openjdk.org\/jdk17u for\n+  JDK 17.\n+\n+If you want to build an older version, e.g. JDK 17, it is strongly recommended\n+that you use the JDK Updates repository, e.g. the `jdk17u`, which contains\n+incremental updates, instead of the JDK Project repository `jdk17`, which was\n+frozen at JDK 17 GA.\n@@ -64,46 +72,46 @@\n-  * Do not check out the source code in a path which contains spaces. Chances\n-    are the build will not work. This is most likely to be an issue on Windows\n-    systems.\n-\n-  * Do not check out the source code in a path which has a very long name or is\n-    nested many levels deep. Chances are you will hit an OS limitation during\n-    the build.\n-\n-  * Put the source code on a local disk, not a network share. If possible, use\n-    an SSD. The build process is very disk intensive, and having slow disk\n-    access will significantly increase build times. If you need to use a\n-    network share for the source code, see below for suggestions on how to keep\n-    the build artifacts on a local disk.\n-\n-  * On Windows, if using [Cygwin](#cygwin), extra care must be taken to make sure\n-    the environment is consistent. It is recommended that you follow this\n-    procedure:\n-\n-      * Create the directory that is going to contain the top directory of the\n-        JDK clone by using the `mkdir` command in the Cygwin bash shell.\n-        That is, do *not* create it using Windows Explorer. This will ensure\n-        that it will have proper Cygwin attributes, and that it's children will\n-        inherit those attributes.\n-\n-      * Do not put the JDK clone in a path under your Cygwin home\n-        directory. This is especially important if your user name contains\n-        spaces and\/or mixed upper and lower case letters.\n-\n-      * You need to install a git client. You have two choices, Cygwin git or\n-        Git for Windows. Unfortunately there are pros and cons with each choice.\n-\n-        * The Cygwin `git` client has no line ending issues and understands\n-          Cygwin paths (which are used throughout the JDK build system).\n-          However, it does not currently work well with the Skara CLI tooling.\n-          Please see the [Skara wiki on Git clients](\n-          https:\/\/wiki.openjdk.org\/display\/SKARA\/Skara#Skara-Git) for\n-          up-to-date information about the Skara git client support.\n-\n-        * The [Git for Windows](https:\/\/gitforwindows.org) client has issues\n-          with line endings, and do not understand Cygwin paths. It does work\n-          well with the Skara CLI tooling, however. To alleviate the line ending\n-          problems, make sure you set `core.autocrlf` to `false` (this is asked\n-          during installation).\n-\n-    Failure to follow this procedure might result in hard-to-debug build\n-    problems.\n+* Do not check out the source code in a path which contains spaces. Chances\n+  are the build will not work. This is most likely to be an issue on Windows\n+  systems.\n+\n+* Do not check out the source code in a path which has a very long name or is\n+  nested many levels deep. Chances are you will hit an OS limitation during\n+  the build.\n+\n+* Put the source code on a local disk, not a network share. If possible, use\n+  an SSD. The build process is very disk intensive, and having slow disk\n+  access will significantly increase build times. If you need to use a\n+  network share for the source code, see below for suggestions on how to keep\n+  the build artifacts on a local disk.\n+\n+* On Windows, if using [Cygwin](#cygwin), extra care must be taken to make sure\n+  the environment is consistent. It is recommended that you follow this\n+  procedure:\n+\n+  * Create the directory that is going to contain the top directory of the\n+    JDK clone by using the `mkdir` command in the Cygwin bash shell.\n+    That is, do *not* create it using Windows Explorer. This will ensure\n+    that it will have proper Cygwin attributes, and that it's children will\n+    inherit those attributes.\n+\n+  * Do not put the JDK clone in a path under your Cygwin home\n+    directory. This is especially important if your user name contains\n+    spaces and\/or mixed upper and lower case letters.\n+\n+  * You need to install a git client. You have two choices, Cygwin git or\n+    Git for Windows. Unfortunately there are pros and cons with each choice.\n+\n+    * The Cygwin `git` client has no line ending issues and understands\n+      Cygwin paths (which are used throughout the JDK build system).\n+      However, it does not currently work well with the Skara CLI tooling.\n+      Please see the [Skara wiki on Git clients](\n+      https:\/\/wiki.openjdk.org\/display\/SKARA\/Skara#Skara-Git) for\n+      up-to-date information about the Skara git client support.\n+\n+    * The [Git for Windows](https:\/\/gitforwindows.org) client has issues\n+      with line endings, and do not understand Cygwin paths. It does work\n+      well with the Skara CLI tooling, however. To alleviate the line ending\n+      problems, make sure you set `core.autocrlf` to `false` (this is asked\n+      during installation).\n+\n+  Failure to follow this procedure might result in hard-to-debug build\n+  problems.\n@@ -169,3 +177,4 @@\n-| Linux             | Oracle Enterprise Linux 6.4 \/ 7.6  |\n-| macOS             | macOS 13 (Ventura)                 |\n-| Windows           | Windows Server 2012 R2             |\n+| Linux\/x64         | Oracle Enterprise Linux 6.4 \/ 8.x  |\n+| Linux\/aarch64     | Oracle Enterprise Linux 7.6 \/ 8.x  |\n+| macOS             | macOS 13.x (Ventura)               |\n+| Windows           | Windows Server 2016                |\n@@ -173,3 +182,3 @@\n-The double version numbers for Linux are due to the hybrid model\n-used at Oracle, where header files and external libraries from an older version\n-are used when building on a more modern version of the OS.\n+The double version numbers for Linux are due to the hybrid model used at\n+Oracle, where header files and external libraries from an older version are\n+used when building on a more modern version of the OS.\n@@ -192,4 +201,3 @@\n-Currently, the only supported such layers are Cygwin, Windows Subsystem for\n-Linux (WSL), and MSYS2. (MSYS is no longer supported due to an outdated bash;\n-While OpenJDK can be built with MSYS2, support for it is still experimental, so\n-build failures and unusual errors are not uncommon.)\n+Currently, the supported such layers are Cygwin, MSYS2 and Windows Subsystem for\n+Linux (WSL). Of these, Cygwin is the one that has received the most real-world\n+testing and is likely to cause least trouble.\n@@ -208,3 +216,2 @@\n-A functioning [Cygwin](https:\/\/www.cygwin.com\/) environment is required for\n-building the JDK on Windows. If you have a 64-bit OS, we strongly recommend\n-using the 64-bit version of Cygwin.\n+Install [Cygwin](https:\/\/www.cygwin.com\/) as instructed on the home page. It is\n+strongly recommended to use the 64-bit version of Cygwin.\n@@ -225,4 +232,4 @@\n-  * `autoconf`\n-  * `make`\n-  * `zip`\n-  * `unzip`\n+* `autoconf`\n+* `make`\n+* `zip`\n+* `unzip`\n@@ -231,0 +238,1 @@\n+\n@@ -241,0 +249,19 @@\n+#### MSYS2\n+\n+Install [MSYS2](https:\/\/www.msys2.org\/) as instructed on the home page.\n+\n+Apart from the basic MSYS2 installation, the following packages must also be\n+installed:\n+\n+* `autoconf`\n+* `tar`\n+* `make`\n+* `zip`\n+* `unzip`\n+\n+You can install these packages using the following command line:\n+\n+```\n+pacman -S autoconf tar make zip unzip\n+```\n+\n@@ -243,3 +270,9 @@\n-Windows 10 1809 or newer is supported due to a dependency on the wslpath utility\n-and support for environment variable sharing through WSLENV. Version 1803 can\n-work but intermittent build failures have been observed.\n+WSL comes in two flavors, WSL1 and WSL2. These are drastically different under\n+the hood. WSL1 runs the binaries natively by translating Linux kernel calls\n+into Windows kernel calls, while WSL2 runs Linux in a virtual machine. Both\n+solutions have their pros and cons, and you might need to test both before\n+deciding which works best for you. Both WSL1 and WSL2 are supported, but to\n+varying degrees.\n+\n+To use WSL for building the JDK, you will need Windows 10 version 1809 or\n+later, and you will need to install an Ubuntu guest.\n@@ -247,1 +280,1 @@\n-It's possible to build both Windows and Linux binaries from WSL. To build\n+It is possible to build both Windows and Linux binaries from WSL. To build\n@@ -291,0 +324,1 @@\n+\n@@ -296,0 +330,1 @@\n+\n@@ -318,4 +353,1 @@\n-one-to-one correlation between target operating system and toolchain. There are\n-ongoing efforts to loosen this strict coupling between compiler and operating\n-system (see [JDK-8288293](https:\/\/bugs.openjdk.org\/browse\/JDK-8288293)) but it\n-will likely be a very long time before this goal can be realized.\n+one-to-one correlation between target operating system and toolchain.\n@@ -343,4 +375,2 @@\n-All compilers are expected to be able to compile to the C99 language standard,\n-as some C99 features are used in the source code. Microsoft Visual Studio\n-doesn't fully support C99 so in practice shared code is limited to using C99\n-features that it does support.\n+All compilers are expected to be able to handle the C11 language standard for\n+C, and C++14 for C++.\n@@ -350,2 +380,2 @@\n-The minimum accepted version of gcc is 5.0. Older versions will generate a warning\n-by `configure` and are unlikely to work.\n+The minimum accepted version of gcc is 6.0. Older versions will not be\n+accepted by `configure`.\n@@ -372,0 +402,1 @@\n+\n@@ -379,4 +410,4 @@\n-  * Use `xcode-select -s` before running `configure`, e.g. `xcode-select -s \/Applications\/Xcode13.1.app`. The drawback is that the setting\n-    is system wide and you may have to revert it after an OpenJDK build.\n-  * Use configure option `--with-xcode-path`, e.g. `configure --with-xcode-path=\/Applications\/Xcode13.1.app`\n-    This allows using a specific Xcode version for an OpenJDK build, independently of the active Xcode version by `xcode-select`.\n+* Use `xcode-select -s` before running `configure`, e.g. `xcode-select -s \/Applications\/Xcode13.1.app`. The drawback is that the setting\n+  is system wide and you may have to revert it after a JDK build.\n+* Use configure option `--with-xcode-path`, e.g. `configure --with-xcode-path=\/Applications\/Xcode13.1.app`\n+  This allows using a specific Xcode version for a JDK build, independently of the active Xcode version by `xcode-select`.\n@@ -410,1 +441,0 @@\n-\n@@ -415,1 +445,1 @@\n-the source code available in the OpenJDK Community.  If you are porting the JDK\n+the source code available in the OpenJDK Community. If you are porting the JDK\n@@ -420,1 +450,1 @@\n-should be a JDK of major version *N-1*, so for building JDK 9 a JDK 8 would be\n+should be a JDK of major version *N-1*, so for building JDK 18 a JDK 17 would be\n@@ -424,1 +454,1 @@\n-version, since JDK 8 GA might not be able to build JDK 9 on all platforms.\n+version, since e.g. JDK 8 GA might not be able to build JDK 9 on all platforms.\n@@ -430,2 +460,5 @@\n-If the boot JDK is not automatically detected, or the wrong JDK is picked, use\n-`--with-boot-jdk` to point to the JDK to use.\n+The `configure` scripts tries to locate a suitable boot JDK automatically, but\n+due to the lack of standard installation locations on most platforms, this\n+heuristics has a high likelihood to fail. If the boot JDK is not automatically\n+detected, or the wrong JDK is picked, use `--with-boot-jdk` to point to the JDK\n+to use.\n@@ -435,5 +468,5 @@\n-JDK binaries for Linux, Windows and macOS can be downloaded from\n-[jdk.java.net](https:\/\/jdk.java.net). An alternative is to download the\n-[Oracle JDK](https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads). Another\n-is the [Adopt OpenJDK Project](https:\/\/adoptopenjdk.net\/), which publishes\n-experimental prebuilt binaries for various platforms.\n+An overview of common ways to download and install prebuilt JDK binaries\n+can be found on https:\/\/openjdk.org\/install. An alternative is to download the\n+[Oracle JDK](https:\/\/www.oracle.com\/java\/technologies\/downloads). Another is\n+[Adoptium](https:\/\/adoptium.net\/), which publishes prebuilt binaries for\n+various platforms.\n@@ -454,3 +487,1 @@\n-include> --with-<LIB>-lib=<path to lib>`. The first variant is more concise,\n-but require the include files and library files to reside in a default\n-hierarchy under this directory. In most cases, it works fine.\n+include> --with-<LIB>-lib=<path to lib>`.\n@@ -458,2 +489,4 @@\n-As a fallback, the second version allows you to point to the include directory\n-and the lib directory separately.\n+The first variant is more concise, but require the include files and library\n+files to reside in a default hierarchy under this directory. In most cases, it\n+works fine. As a fallback, the second version allows you to point to the\n+include directory and the lib directory separately.\n@@ -468,6 +501,6 @@\n-  * To install on an apt-based Linux, try running `sudo apt-get install\n-    libfreetype6-dev`.\n-  * To install on an rpm-based Linux, try running `sudo yum install\n-    freetype-devel`.\n-  * To install on Alpine Linux, try running `sudo apk add freetype-dev`.\n-  * To install on macOS, try running `brew install freetype`.\n+* To install on an apt-based Linux, try running `sudo apt-get install\n+libfreetype6-dev`.\n+* To install on an rpm-based Linux, try running `sudo yum install\n+freetype-devel`.\n+* To install on Alpine Linux, try running `sudo apk add freetype-dev`.\n+* To install on macOS, try running `brew install freetype`.\n@@ -483,4 +516,4 @@\n-  * To install on an apt-based Linux, try running `sudo apt-get install\n-    libfontconfig-dev`.\n-  * To install on an rpm-based Linux, try running `sudo yum install\n-    fontconfig-devel`.\n+* To install on an apt-based Linux, try running `sudo apt-get install\n+libfontconfig-dev`.\n+* To install on an rpm-based Linux, try running `sudo yum install\n+fontconfig-devel`.\n@@ -497,5 +530,5 @@\n-  * To install on an apt-based Linux, try running `sudo apt-get install\n-    libcups2-dev`.\n-  * To install on an rpm-based Linux, try running `sudo yum install\n-    cups-devel`.\n-  * To install on Alpine Linux, try running `sudo apk add cups-dev`.\n+* To install on an apt-based Linux, try running `sudo apt-get install\n+libcups2-dev`.\n+* To install on an rpm-based Linux, try running `sudo yum install\n+cups-devel`.\n+* To install on Alpine Linux, try running `sudo apk add cups-dev`.\n@@ -511,6 +544,6 @@\n-  * To install on an apt-based Linux, try running `sudo apt-get install\n-    libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev`.\n-  * To install on an rpm-based Linux, try running `sudo yum install\n-    libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-devel`.\n-  * To install on Alpine Linux, try running `sudo apk add libx11-dev\n-    libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev`.\n+* To install on an apt-based Linux, try running `sudo apt-get install\n+libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev`.\n+* To install on an rpm-based Linux, try running `sudo yum install\n+libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-devel`.\n+* To install on Alpine Linux, try running `sudo apk add libx11-dev\n+libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev`.\n@@ -525,5 +558,5 @@\n-  * To install on an apt-based Linux, try running `sudo apt-get install\n-    libasound2-dev`.\n-  * To install on an rpm-based Linux, try running `sudo yum install\n-    alsa-lib-devel`.\n-  * To install on Alpine Linux, try running `sudo apk add alsa-lib-dev`.\n+* To install on an apt-based Linux, try running `sudo apt-get install\n+libasound2-dev`.\n+* To install on an rpm-based Linux, try running `sudo yum install\n+alsa-lib-devel`.\n+* To install on Alpine Linux, try running `sudo apk add alsa-lib-dev`.\n@@ -540,5 +573,5 @@\n-  * To install on an apt-based Linux, try running `sudo apt-get install\n-    libffi-dev`.\n-  * To install on an rpm-based Linux, try running `sudo yum install\n-    libffi-devel`.\n-  * To install on Alpine Linux, try running `sudo apk add libffi-dev`.\n+* To install on an apt-based Linux, try running `sudo apt-get install\n+libffi-dev`.\n+* To install on an rpm-based Linux, try running `sudo yum install\n+libffi-devel`.\n+* To install on Alpine Linux, try running `sudo apk add libffi-dev`.\n@@ -553,1 +586,1 @@\n-The JDK requires [Autoconf](https:\/\/www.gnu.org\/software\/autoconf) on all\n+The JDK build requires [Autoconf](https:\/\/www.gnu.org\/software\/autoconf) on all\n@@ -556,8 +589,8 @@\n-  * To install on an apt-based Linux, try running `sudo apt-get install\n-    autoconf`.\n-  * To install on an rpm-based Linux, try running `sudo yum install\n-    autoconf`.\n-  * To install on Alpine Linux, try running `sudo apk add autoconf`.\n-  * To install on macOS, try running `brew install autoconf`.\n-  * To install on Windows, try running `<path to Cygwin setup>\/setup-x86_64 -q\n-    -P autoconf`.\n+* To install on an apt-based Linux, try running `sudo apt-get install\n+autoconf`.\n+* To install on an rpm-based Linux, try running `sudo yum install\n+autoconf`.\n+* To install on Alpine Linux, try running `sudo apk add autoconf`.\n+* To install on macOS, try running `brew install autoconf`.\n+* To install on Windows, try running `<path to Cygwin setup>\/setup-x86_64 -q\n+-P autoconf`.\n@@ -574,2 +607,2 @@\n-The JDK requires [GNU Make](https:\/\/www.gnu.org\/software\/make). No other flavors\n-of make are supported.\n+The JDK build requires [GNU Make](https:\/\/www.gnu.org\/software\/make). No other\n+flavors of make are supported.\n@@ -596,2 +629,2 @@\n-The JDK requires [GNU Bash](https:\/\/www.gnu.org\/software\/bash). No other shells\n-are supported.\n+The JDK build requires [GNU Bash](https:\/\/www.gnu.org\/software\/bash). No other\n+shells are supported.\n@@ -628,1 +661,1 @@\n-  * Create a 32-bit build for Windows with FreeType2 in `C:\\freetype-i586`:\n+* Create a 32-bit build for Windows with FreeType2 in `C:\\freetype-i586`:\n@@ -630,3 +663,3 @@\n-    ```\n-    bash configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-bits=32\n-    ```\n+  ```\n+  bash configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-bits=32\n+  ```\n@@ -634,1 +667,1 @@\n-  * Create a debug build with the `server` JVM and DTrace enabled:\n+* Create a debug build with the `server` JVM and DTrace enabled:\n@@ -636,3 +669,3 @@\n-    ```\n-    bash configure --enable-debug --with-jvm-variants=server --enable-dtrace\n-    ```\n+  ```\n+  bash configure --enable-debug --with-jvm-variants=server --enable-dtrace\n+  ```\n@@ -646,0 +679,1 @@\n+\n@@ -656,31 +690,31 @@\n-  * `--enable-debug` - Set the debug level to `fastdebug` (this is a shorthand\n-    for `--with-debug-level=fastdebug`)\n-  * `--with-debug-level=<level>` - Set the debug level, which can be `release`,\n-    `fastdebug`, `slowdebug` or `optimized`. Default is `release`. `optimized`\n-    is variant of `release` with additional Hotspot debug code.\n-  * `--with-native-debug-symbols=<method>` - Specify if and how native debug\n-    symbols should be built. Available methods are `none`, `internal`,\n-    `external`, `zipped`. Default behavior depends on platform. See [Native\n-    Debug Symbols](#native-debug-symbols) for more details.\n-  * `--with-version-string=<string>` - Specify the version string this build\n-    will be identified with.\n-  * `--with-version-<part>=<value>` - A group of options, where `<part>` can be\n-    any of `pre`, `opt`, `build`, `major`, `minor`, `security` or `patch`. Use\n-    these options to modify just the corresponding part of the version string\n-    from the default, or the value provided by `--with-version-string`.\n-  * `--with-jvm-variants=<variant>[,<variant>...]` - Build the specified variant\n-    (or variants) of Hotspot. Valid variants are: `server`, `client`,\n-    `minimal`, `core`, `zero`, `custom`. Note that not all\n-    variants are possible to combine in a single build.\n-  * `--enable-jvm-feature-<feature>` or `--disable-jvm-feature-<feature>` -\n-    Include (or exclude) `<feature>` as a JVM feature in Hotspot. You can also\n-    specify a list of features to be enabled, separated by space or comma, as\n-    `--with-jvm-features=<feature>[,<feature>...]`. If you prefix `<feature>`\n-    with a `-`, it will be disabled. These options will modify the default list\n-    of features for the JVM variant(s) you are building. For the `custom` JVM\n-    variant, the default list is empty. A complete list of valid JVM features\n-    can be found using `bash configure --help`.\n-  * `--with-target-bits=<bits>` - Create a target binary suitable for running\n-    on a `<bits>` platform. Use this to create 32-bit output on a 64-bit build\n-    platform, instead of doing a full cross-compile. (This is known as a\n-    *reduced* build.)\n+* `--enable-debug` - Set the debug level to `fastdebug` (this is a shorthand\n+  for `--with-debug-level=fastdebug`)\n+* `--with-debug-level=<level>` - Set the debug level, which can be `release`,\n+  `fastdebug`, `slowdebug` or `optimized`. Default is `release`. `optimized`\n+  is variant of `release` with additional Hotspot debug code.\n+* `--with-native-debug-symbols=<method>` - Specify if and how native debug\n+  symbols should be built. Available methods are `none`, `internal`,\n+  `external`, `zipped`. Default behavior depends on platform. See [Native\n+  Debug Symbols](#native-debug-symbols) for more details.\n+* `--with-version-string=<string>` - Specify the version string this build\n+  will be identified with.\n+* `--with-version-<part>=<value>` - A group of options, where `<part>` can be\n+  any of `pre`, `opt`, `build`, `major`, `minor`, `security` or `patch`. Use\n+  these options to modify just the corresponding part of the version string\n+  from the default, or the value provided by `--with-version-string`.\n+* `--with-jvm-variants=<variant>[,<variant>...]` - Build the specified variant\n+  (or variants) of Hotspot. Valid variants are: `server`, `client`,\n+  `minimal`, `core`, `zero`, `custom`. Note that not all\n+  variants are possible to combine in a single build.\n+* `--enable-jvm-feature-<feature>` or `--disable-jvm-feature-<feature>` -\n+  Include (or exclude) `<feature>` as a JVM feature in Hotspot. You can also\n+  specify a list of features to be enabled, separated by space or comma, as\n+  `--with-jvm-features=<feature>[,<feature>...]`. If you prefix `<feature>`\n+  with a `-`, it will be disabled. These options will modify the default list\n+  of features for the JVM variant(s) you are building. For the `custom` JVM\n+  variant, the default list is empty. A complete list of valid JVM features\n+  can be found using `bash configure --help`.\n+* `--with-target-bits=<bits>` - Create a target binary suitable for running\n+  on a `<bits>` platform. Use this to create 32-bit output on a 64-bit build\n+  platform, instead of doing a full cross-compile. (This is known as a\n+  *reduced* build.)\n@@ -693,2 +727,2 @@\n-  * `--with-jni-libpath=<path>` - Use the specified path as a default\n-  when searching for runtime libraries.\n+* `--with-jni-libpath=<path>` - Use the specified path as a default\n+when searching for runtime libraries.\n@@ -698,12 +732,12 @@\n-  * `--with-devkit=<path>` - Use this devkit for compilers, tools and resources\n-  * `--with-sysroot=<path>` - Use this directory as sysroot\n-  * `--with-extra-path=<path>[;<path>]` - Prepend these directories to the\n-    default path when searching for all kinds of binaries\n-  * `--with-toolchain-path=<path>[;<path>]` - Prepend these directories when\n-    searching for toolchain binaries (compilers etc)\n-  * `--with-extra-cflags=<flags>` - Append these flags when compiling JDK C\n-    files\n-  * `--with-extra-cxxflags=<flags>` - Append these flags when compiling JDK C++\n-    files\n-  * `--with-extra-ldflags=<flags>` - Append these flags when linking JDK\n-    libraries\n+* `--with-devkit=<path>` - Use this devkit for compilers, tools and resources\n+* `--with-sysroot=<path>` - Use this directory as sysroot\n+* `--with-extra-path=<path>[;<path>]` - Prepend these directories to the\n+  default path when searching for all kinds of binaries\n+* `--with-toolchain-path=<path>[;<path>]` - Prepend these directories when\n+  searching for toolchain binaries (compilers etc)\n+* `--with-extra-cflags=<flags>` - Append these flags when compiling JDK C\n+  files\n+* `--with-extra-cxxflags=<flags>` - Append these flags when compiling JDK C++\n+  files\n+* `--with-extra-ldflags=<flags>` - Append these flags when linking JDK\n+  libraries\n@@ -713,9 +747,9 @@\n-  * `--with-boot-jdk=<path>` - Set the path to the [Boot JDK](\n-    #boot-jdk-requirements)\n-  * `--with-freetype=<path>` - Set the path to [FreeType](#freetype)\n-  * `--with-cups=<path>` - Set the path to [CUPS](#cups)\n-  * `--with-x=<path>` - Set the path to [X11](#x11)\n-  * `--with-alsa=<path>` - Set the path to [ALSA](#alsa)\n-  * `--with-libffi=<path>` - Set the path to [libffi](#libffi)\n-  * `--with-jtreg=<path>` - Set the path to JTReg. See [Running Tests](\n-    #running-tests)\n+* `--with-boot-jdk=<path>` - Set the path to the [Boot JDK](\n+  #boot-jdk-requirements)\n+* `--with-freetype=<path>` - Set the path to [FreeType](#freetype)\n+* `--with-cups=<path>` - Set the path to [CUPS](#cups)\n+* `--with-x=<path>` - Set the path to [X11](#x11)\n+* `--with-alsa=<path>` - Set the path to [ALSA](#alsa)\n+* `--with-libffi=<path>` - Set the path to [libffi](#libffi)\n+* `--with-jtreg=<path>` - Set the path to JTReg. See [Running Tests](\n+  #running-tests)\n@@ -732,5 +766,5 @@\n-  * `--with-libjpeg=<source>` - Use the specified source for libjpeg\n-  * `--with-giflib=<source>` - Use the specified source for giflib\n-  * `--with-libpng=<source>` - Use the specified source for libpng\n-  * `--with-lcms=<source>` - Use the specified source for lcms\n-  * `--with-zlib=<source>` - Use the specified source for zlib\n+* `--with-libjpeg=<source>` - Use the specified source for libjpeg\n+* `--with-giflib=<source>` - Use the specified source for giflib\n+* `--with-libpng=<source>` - Use the specified source for libpng\n+* `--with-lcms=<source>` - Use the specified source for lcms\n+* `--with-zlib=<source>` - Use the specified source for zlib\n@@ -742,2 +776,2 @@\n-  * `--with-stdc++lib=<method>` - Use the specified method (`static`, `dynamic`\n-    or `default`) for linking the C++ runtime.\n+* `--with-stdc++lib=<method>` - Use the specified method (`static`, `dynamic`\n+  or `default`) for linking the C++ runtime.\n@@ -791,11 +825,11 @@\n-  * `hotspot` - Build all of hotspot (but only hotspot)\n-  * `hotspot-<variant>` - Build just the specified jvm variant\n-  * `images` or `product-images` - Build the JDK image\n-  * `docs` or `docs-image` - Build the documentation image\n-  * `test-image` - Build the test image\n-  * `all` or `all-images` - Build all images (product, docs and test)\n-  * `bootcycle-images` - Build images twice, second time with newly built JDK\n-    (good for testing)\n-  * `clean` - Remove all files generated by make, but not those generated by\n-    configure\n-  * `dist-clean` - Remove all files, including configuration\n+* `hotspot` - Build all of hotspot (but only hotspot)\n+* `hotspot-<variant>` - Build just the specified jvm variant\n+* `images` or `product-images` - Build the JDK image\n+* `docs` or `docs-image` - Build the documentation image\n+* `test-image` - Build the test image\n+* `all` or `all-images` - Build all images (product, docs and test)\n+* `bootcycle-images` - Build images twice, second time with newly built JDK\n+  (good for testing)\n+* `clean` - Remove all files generated by make, but not those generated by\n+  configure\n+* `dist-clean` - Remove all files, including configuration\n@@ -807,1 +841,1 @@\n-of a single module, by creating make targets according to these followin\n+of a single module, by creating make targets according to these following\n@@ -812,4 +846,4 @@\n-  * `<phase>` - Build the specified phase and everything it depends on\n-  * `<module>` - Build the specified module and everything it depends on\n-  * `<module>-<phase>` - Compile the specified phase for the specified module\n-    and everything it depends on\n+* `<phase>` - Build the specified phase and everything it depends on\n+* `<module>` - Build the specified module and everything it depends on\n+* `<module>-<phase>` - Compile the specified phase for the specified module\n+  and everything it depends on\n@@ -820,6 +854,6 @@\n-  * `clean-<outputdir>` - Remove the subdir in the output dir with the name\n-  * `clean-<phase>` - Remove all build results related to a certain build\n-    phase\n-  * `clean-<module>` - Remove all build results related to a certain module\n-  * `clean-<module>-<phase>` - Remove all build results related to a certain\n-    module and phase\n+* `clean-<outputdir>` - Remove the subdir in the output dir with the name\n+* `clean-<phase>` - Remove all build results related to a certain build\n+  phase\n+* `clean-<module>` - Remove all build results related to a certain module\n+* `clean-<module>-<phase>` - Remove all build results related to a certain\n+  module and phase\n@@ -842,6 +876,6 @@\n-  * `JOBS` - Specify the number of jobs to build with. See [Build\n-    Performance](#build-performance).\n-  * `LOG` - Specify the logging level and functionality. See [Checking the\n-    Build Log File](#checking-the-build-log-file)\n-  * `CONF` and `CONF_NAME` - Selecting the configuration(s) to use. See [Using\n-    Multiple Configurations](#using-multiple-configurations)\n+* `JOBS` - Specify the number of jobs to build with. See [Build\n+  Performance](#build-performance).\n+* `LOG` - Specify the logging level and functionality. See [Checking the\n+  Build Log File](#checking-the-build-log-file)\n+* `CONF` and `CONF_NAME` - Selecting the configuration(s) to use. See [Using\n+  Multiple Configurations](#using-multiple-configurations)\n@@ -854,4 +888,7 @@\n-  * `TEST`\n-  * `TEST_JOBS`\n-  * `JTREG`\n-  * `GTEST`\n+* `TEST`\n+* `TEST_JOBS`\n+* `TEST_OPTS`\n+* `TEST_VM_OPTS`\n+* `JTREG`\n+* `GTEST`\n+* `MICRO`\n@@ -865,5 +902,5 @@\n-  * `SPEC`\n-  * `CONF_CHECK`\n-  * `COMPARE_BUILD`\n-  * `JDK_FILTER`\n-  * `SPEC_FILTER`\n+* `SPEC`\n+* `CONF_CHECK`\n+* `COMPARE_BUILD`\n+* `JDK_FILTER`\n+* `SPEC_FILTER`\n@@ -887,1 +924,1 @@\n-Test framework.  The top directory, which contains both `googletest`\n+Test framework. The top directory, which contains both `googletest`\n@@ -892,2 +929,2 @@\n- * by downloading and unpacking the source bundle from [here](https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.14.0)\n- * or by checking out `v1.14.0` tag of `googletest` project: `git clone -b v1.14.0 https:\/\/github.com\/google\/googletest`\n+* by downloading and unpacking the source bundle from [here](https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.14.0), or\n+* by checking out `v1.14.0` tag of `googletest` project: `git clone -b v1.14.0 https:\/\/github.com\/google\/googletest`\n@@ -896,0 +933,1 @@\n+\n@@ -897,1 +935,1 @@\n-make run-test-tier1\n+make test-tier1\n@@ -967,1 +1005,3 @@\n-### Cross compiling the easy way with OpenJDK devkits\n+Setting up a cross-compilation environment by hand is time-consuming and error\n+prone. It is highly recommended that you use one of the automated methods\n+described in [Cross compiling the easy way](#cross-compiling-the-easy-way).\n@@ -969,31 +1009,1 @@\n-The OpenJDK build system provides out-of-the box support for creating and using\n-so called devkits. A `devkit` is basically a collection of a cross-compiling\n-toolchain and a sysroot environment which can easily be used together with the\n-`--with-devkit` configure option to cross compile the OpenJDK. On Linux\/x86_64,\n-the following command:\n-```\n-bash configure --with-devkit=<devkit-path> --openjdk-target=ppc64-linux-gnu && make\n-```\n-\n-will configure and build OpenJDK for Linux\/ppc64 assuming that `<devkit-path>`\n-points to a Linux\/x86_64 to Linux\/ppc64 devkit.\n-\n-Devkits can be created from the `make\/devkit` directory by executing:\n-```\n-make [ TARGETS=\"<TARGET_TRIPLET>+\" ] [ BASE_OS=<OS> ] [ BASE_OS_VERSION=<VER> ]\n-```\n-\n-where `TARGETS` contains one or more `TARGET_TRIPLET`s of the form\n-described in [section 3.4 of the GNU Autobook](\n-https:\/\/sourceware.org\/autobook\/autobook\/autobook_17.html). If no\n-targets are given, a native toolchain for the current platform will be\n-created. Currently, at least the following targets are known to work:\n-\n-| Supported devkit targets |\n-| ------------------------ |\n-| x86_64-linux-gnu         |\n-| aarch64-linux-gnu        |\n-| arm-linux-gnueabihf      |\n-| ppc64-linux-gnu          |\n-| ppc64le-linux-gnu        |\n-| s390x-linux-gnu          |\n+### Specifying the Target Platform\n@@ -1001,13 +1011,8 @@\n-`BASE_OS` must be one of \"OEL6\" for Oracle Enterprise Linux 6 or\n-\"Fedora\" (if not specified \"OEL6\" will be the default). If the base OS\n-is \"Fedora\" the corresponding Fedora release can be specified with the\n-help of the `BASE_OS_VERSION` option (with \"27\" as default version).\n-If the build is successful, the new devkits can be found in the\n-`build\/devkit\/result` subdirectory:\n-```\n-cd make\/devkit\n-make TARGETS=\"ppc64le-linux-gnu aarch64-linux-gnu\" BASE_OS=Fedora BASE_OS_VERSION=21\n-ls -1 ..\/..\/build\/devkit\/result\/\n-x86_64-linux-gnu-to-aarch64-linux-gnu\n-x86_64-linux-gnu-to-ppc64le-linux-gnu\n-```\n+You *must* specify the target platform when cross-compiling. Doing so will also\n+automatically turn the build into a cross-compiling mode. The simplest way to\n+do this is to use the `--openjdk-target` argument, e.g.\n+`--openjdk-target=arm-linux-gnueabihf`. or `--openjdk-target=aarch64-oe-linux`.\n+This will automatically set the `--host` and `--target` options for\n+autoconf, which can otherwise be confusing. (In autoconf terminology, the\n+\"target\" is known as \"host\", and \"target\" is used for building a Canadian\n+cross-compiler.)\n@@ -1015,9 +1020,4 @@\n-Notice that devkits are not only useful for targeting different build\n-platforms. Because they contain the full build dependencies for a\n-system (i.e. compiler and root file system), they can easily be used\n-to build well-known, reliable and reproducible build environments. You\n-can for example create and use a devkit with GCC 7.3 and a Fedora 12\n-sysroot environment (with glibc 2.11) on Ubuntu 14.04 (which doesn't\n-have GCC 7.3 by default) to produce OpenJDK binaries which will run on\n-all Linux systems with runtime libraries newer than the ones from\n-Fedora 12 (e.g. Ubuntu 16.04, SLES 11 or RHEL 6).\n+If `--build` has not been explicitly passed to configure, `--openjdk-target`\n+will autodetect the build platform and internally set the flag automatically,\n+otherwise the platform that was explicitly passed to `--build` will be used\n+instead.\n@@ -1042,16 +1042,0 @@\n-### Specifying the Target Platform\n-\n-You *must* specify the target platform when cross-compiling. Doing so will also\n-automatically turn the build into a cross-compiling mode. The simplest way to\n-do this is to use the `--openjdk-target` argument, e.g.\n-`--openjdk-target=arm-linux-gnueabihf`. or `--openjdk-target=aarch64-oe-linux`.\n-This will automatically set the `--host` and `--target` options for\n-autoconf, which can otherwise be confusing. (In autoconf terminology, the\n-\"target\" is known as \"host\", and \"target\" is used for building a Canadian\n-cross-compiler.)\n-\n-If `--build` has not been explicitly passed to configure, `--openjdk-target`\n-will autodetect the build platform and internally set the flag automatically,\n-otherwise the platform that was explicitly passed to `--build` will be used\n-instead.\n-\n@@ -1062,9 +1046,9 @@\n-generates output that can run on the build system (the *build* toolchain). Note\n-that cross-compiling is only supported for gcc at the time being. The gcc\n-standard is to prefix cross-compiling toolchains with the target denominator.\n-If you follow this standard, `configure` is likely to pick up the toolchain\n-correctly.\n-\n-The *build* toolchain will be autodetected just the same way the normal\n-*build*\/*target* toolchain will be autodetected when not cross-compiling. If\n-this is not what you want, or if the autodetection fails, you can specify a\n+generates output that can run on the build system (the *build* toolchain).\n+\n+If you are cross-compiling using gcc, it is recommended to use the gcc standard\n+where you prefix cross-compiling tools with the target denominator. If you\n+follow this standard, `configure` is likely to pick up the toolchain correctly.\n+\n+The *build* toolchain will be auto-detected just the same way the normal\n+*build*\/*target* toolchain will be auto-detected when not cross-compiling. If\n+this is not what you want, or if the auto-detection fails, you can specify a\n@@ -1079,2 +1063,2 @@\n-to point to a single directory, if it is correctly setup. (See `basics.m4` for\n-details.)\n+to point to a single directory, if it is correctly setup. (See\n+`make\/autoconf\/basics.m4` for details.)\n@@ -1100,3 +1084,3 @@\n-  * Go to [Debian Package Search](https:\/\/www.debian.org\/distrib\/packages) and\n-    search for the `libasound2` and `libasound2-dev` packages for your *target*\n-    system. Download them to \/tmp.\n+* Go to [Debian Package Search](https:\/\/www.debian.org\/distrib\/packages) and\n+  search for the `libasound2` and `libasound2-dev` packages for your *target*\n+  system. Download them to \/tmp.\n@@ -1104,1 +1088,1 @@\n-  * Install the libraries into the cross-compilation toolchain. For instance:\n+* Install the libraries into the cross-compilation toolchain. For instance:\n@@ -1106,5 +1090,5 @@\n-    ```\n-    cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\n-    dpkg-deb -x \/tmp\/libasound2_1.0.25-4_armhf.deb .\n-    dpkg-deb -x \/tmp\/libasound2-dev_1.0.25-4_armhf.deb .\n-    ```\n+  ```\n+  cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\n+  dpkg-deb -x \/tmp\/libasound2_1.0.25-4_armhf.deb .\n+  dpkg-deb -x \/tmp\/libasound2-dev_1.0.25-4_armhf.deb .\n+  ```\n@@ -1112,2 +1096,2 @@\n-  * If alsa is not properly detected by `configure`, you can point it out by\n-    `--with-alsa`.\n+* If alsa is not properly detected by `configure`, you can point it out by\n+  `--with-alsa`.\n@@ -1122,24 +1106,47 @@\n-  * Go to [Debian Package Search](https:\/\/www.debian.org\/distrib\/packages),\n-    search for the following packages for your *target* system, and download them\n-    to \/tmp\/target-x11:\n-      * libxi\n-      * libxi-dev\n-      * x11proto-core-dev\n-      * x11proto-input-dev\n-      * x11proto-kb-dev\n-      * x11proto-render-dev\n-      * x11proto-xext-dev\n-      * libice-dev\n-      * libxrender\n-      * libxrender-dev\n-      * libxrandr-dev\n-      * libsm-dev\n-      * libxt-dev\n-      * libx11\n-      * libx11-dev\n-      * libxtst\n-      * libxtst-dev\n-      * libxext\n-      * libxext-dev\n-\n-  * Install the libraries into the cross-compilation toolchain. For instance:\n+* Go to [Debian Package Search](https:\/\/www.debian.org\/distrib\/packages),\n+  search for the following packages for your *target* system, and download them\n+  to \/tmp\/target-x11:\n+\n+  * `libxi`\n+  * `libxi-dev`\n+  * `x11proto-core-dev`\n+  * `x11proto-input-dev`\n+  * `x11proto-kb-dev`\n+  * `x11proto-render-dev`\n+  * `x11proto-xext-dev`\n+  * `libice-dev`\n+  * `libxrender`\n+  * `libxrender-dev`\n+  * `libxrandr-dev`\n+  * `libsm-dev`\n+  * `libxt-dev`\n+  * `libx11`\n+  * `libx11-dev`\n+  * `libxtst`\n+  * `libxtst-dev`\n+  * `libxext`\n+  * `libxext-dev`\n+\n+* Install the libraries into the cross-compilation toolchain. For instance:\n+\n+  ```\n+  cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\/usr\n+  mkdir X11R6\n+  cd X11R6\n+  for deb in \/tmp\/target-x11\/*.deb ; do dpkg-deb -x $deb . ; done\n+  mv usr\/* .\n+  cd lib\n+  cp arm-linux-gnueabihf\/* .\n+  ```\n+\n+  You can ignore the following messages. These libraries are not needed to\n+  successfully complete a full JDK build.\n+\n+  ```\n+  cp: cannot stat `arm-linux-gnueabihf\/libICE.so': No such file or directory\n+  cp: cannot stat `arm-linux-gnueabihf\/libSM.so': No such file or directory\n+  cp: cannot stat `arm-linux-gnueabihf\/libXt.so': No such file or directory\n+  ```\n+\n+* If the X11 libraries are not properly detected by `configure`, you can\n+  point them out by `--with-x`.\n@@ -1147,9 +1154,1 @@\n-    ```\n-    cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\/usr\n-    mkdir X11R6\n-    cd X11R6\n-    for deb in \/tmp\/target-x11\/*.deb ; do dpkg-deb -x $deb . ; done\n-    mv usr\/* .\n-    cd lib\n-    cp arm-linux-gnueabihf\/* .\n-    ```\n+### Verifying the Build\n@@ -1157,7 +1156,17 @@\n-    You can ignore the following messages. These libraries are not needed to\n-    successfully complete a full JDK build.\n-    ```\n-    cp: cannot stat `arm-linux-gnueabihf\/libICE.so': No such file or directory\n-    cp: cannot stat `arm-linux-gnueabihf\/libSM.so': No such file or directory\n-    cp: cannot stat `arm-linux-gnueabihf\/libXt.so': No such file or directory\n-    ```\n+The build will end up in a directory named like\n+`build\/linux-arm-normal-server-release`.\n+\n+Inside this build output directory, the `images\/jdk` will contain the newly\n+built JDK, for your *target* system.\n+\n+Copy these folders to your *target* system. Then you can run e.g.\n+`images\/jdk\/bin\/java -version`.\n+\n+### Cross compiling the easy way\n+\n+Setting up a proper cross-compilation environment can be a lot of work.\n+Fortunately there are ways that more or less automate this process. Here are\n+two recommended methods, using the \"devkits\" that can be generated by the JDK\n+build system, or by using the `debootstrap` command in Debian. The former works\n+on all Linux distributions, the latter only on Debian and derivatives. Both\n+solution only work for gcc.\n@@ -1165,2 +1174,2 @@\n-  * If the X11 libraries are not properly detected by `configure`, you can\n-    point them out by `--with-x`.\n+The devkit method is regularly used for testing by Oracle, and the debootstrap\n+method is regularly used in GitHub Actions testing.\n@@ -1168,1 +1177,1 @@\n-### Cross compiling with Debian sysroots\n+#### Using OpenJDK devkits\n@@ -1170,6 +1179,68 @@\n-Fortunately, you can create sysroots for foreign architectures with tools\n-provided by your OS. On Debian\/Ubuntu systems, one could use `debootstrap` to\n-create the *target* system chroot, which would have the native libraries and headers\n-specific to that *target* system. After that, we can use the cross-compiler on the *build*\n-system, pointing into chroot to get the build dependencies right. This allows building\n-for foreign architectures with native compilation speed.\n+The JDK build system provides out-of-the box support for creating and using\n+so called devkits. A `devkit` is basically a collection of a cross-compiling\n+toolchain and a sysroot environment which can easily be used together with the\n+`--with-devkit` configure option to cross compile the JDK. On Linux\/x86_64,\n+the following command:\n+\n+```\n+bash configure --with-devkit=<devkit-path> --openjdk-target=ppc64-linux-gnu && make\n+```\n+\n+will configure and build the JDK for Linux\/ppc64 assuming that `<devkit-path>`\n+points to a Linux\/x86_64 to Linux\/ppc64 devkit.\n+\n+Devkits can be created from the `make\/devkit` directory by executing:\n+\n+```\n+make [ TARGETS=\"<TARGET_TRIPLET>+\" ] [ BASE_OS=<OS> ] [ BASE_OS_VERSION=<VER> ]\n+```\n+\n+where `TARGETS` contains one or more `TARGET_TRIPLET`s of the form\n+described in [section 3.4 of the GNU Autobook](\n+https:\/\/sourceware.org\/autobook\/autobook\/autobook_17.html). If no\n+targets are given, a native toolchain for the current platform will be\n+created. Currently, at least the following targets are known to work:\n+\n+| Supported devkit targets |\n+| ------------------------ |\n+| x86_64-linux-gnu         |\n+| aarch64-linux-gnu        |\n+| arm-linux-gnueabihf      |\n+| ppc64-linux-gnu          |\n+| ppc64le-linux-gnu        |\n+| s390x-linux-gnu          |\n+\n+`BASE_OS` must be one of \"OEL6\" for Oracle Enterprise Linux 6 or\n+\"Fedora\" (if not specified \"OEL6\" will be the default). If the base OS\n+is \"Fedora\" the corresponding Fedora release can be specified with the\n+help of the `BASE_OS_VERSION` option (with \"27\" as default version).\n+If the build is successful, the new devkits can be found in the\n+`build\/devkit\/result` subdirectory:\n+\n+```\n+cd make\/devkit\n+make TARGETS=\"ppc64le-linux-gnu aarch64-linux-gnu\" BASE_OS=Fedora BASE_OS_VERSION=21\n+ls -1 ..\/..\/build\/devkit\/result\/\n+x86_64-linux-gnu-to-aarch64-linux-gnu\n+x86_64-linux-gnu-to-ppc64le-linux-gnu\n+```\n+\n+Notice that devkits are not only useful for targeting different build\n+platforms. Because they contain the full build dependencies for a\n+system (i.e. compiler and root file system), they can easily be used\n+to build well-known, reliable and reproducible build environments. You\n+can for example create and use a devkit with GCC 7.3 and a Fedora 12\n+sysroot environment (with glibc 2.11) on Ubuntu 14.04 (which doesn't\n+have GCC 7.3 by default) to produce JDK binaries which will run on\n+all Linux systems with runtime libraries newer than the ones from\n+Fedora 12 (e.g. Ubuntu 16.04, SLES 11 or RHEL 6).\n+\n+#### Using Debian debootstrap\n+\n+On Debian (or a derivative like Ubuntu), you can create sysroots for foreign\n+architectures with tools provided by the OS. You can use `debootstrap` to\n+create a *target* system chroot directory, which would have the native\n+libraries and headers specific to that *target* system. After that, you can use\n+the cross-compiler on the *build* system, pointing into the chroot to get the\n+build dependencies right. This allows building for foreign architectures with\n+native compilation speed.\n@@ -1179,1 +1250,1 @@\n-  * Install cross-compiler on the *build* system:\n+* Install cross-compiler on the *build* system:\n@@ -1181,3 +1252,3 @@\n-    ```\n-    apt install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu\n-    ```\n+  ```\n+  apt install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu\n+  ```\n@@ -1185,1 +1256,1 @@\n-  * Create chroot on the *build* system, configuring it for *target* system:\n+* Create chroot on the *build* system, configuring it for *target* system:\n@@ -1187,12 +1258,10 @@\n-    ```\n-    sudo debootstrap \\\n-      --arch=arm64 \\\n-      --verbose \\\n-      --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\\n-      --resolve-deps \\\n-      buster \\\n-      ~\/sysroot-arm64 \\\n-      https:\/\/httpredir.debian.org\/debian\/\n-    # If the target architecture is `riscv64`,\n-    # the path should be `debian-ports` instead of `debian`.\n-    ```\n+  ```\n+  sudo debootstrap \\\n+    --arch=arm64 \\\n+    --verbose \\\n+    --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\\n+    --resolve-deps \\\n+    buster \\\n+    ~\/sysroot-arm64 \\\n+    https:\/\/httpredir.debian.org\/debian\/\n+  ```\n@@ -1200,1 +1269,2 @@\n-  * To create a Ubuntu-based chroot:\n+  If the target architecture is `riscv64`, the path should be `debian-ports`\n+  instead of `debian`.\n@@ -1202,12 +1272,1 @@\n-    ```\n-    sudo debootstrap \\\n-      --arch=arm64 \\\n-      --verbose \\\n-      --components=main,universe \\\n-      --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\\n-      --resolve-deps \\\n-      jammy \\\n-      ~\/sysroot-arm64 \\\n-      http:\/\/ports.ubuntu.com\/ubuntu-ports\/\n-    # symlinks is in the universe repository\n-    ```\n+* To create a Ubuntu-based chroot:\n@@ -1215,1 +1274,11 @@\n-  * Make sure the symlinks inside the newly created chroot point to proper locations:\n+  ```\n+  sudo debootstrap \\\n+    --arch=arm64 \\\n+    --verbose \\\n+    --components=main,universe \\\n+    --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\\n+    --resolve-deps \\\n+    jammy \\\n+    ~\/sysroot-arm64 \\\n+    http:\/\/ports.ubuntu.com\/ubuntu-ports\/\n+  ```\n@@ -1217,3 +1286,1 @@\n-    ```\n-    sudo chroot ~\/sysroot-arm64 symlinks -cr .\n-    ```\n+  Note that `symlinks` is in the universe repository.\n@@ -1221,1 +1288,1 @@\n-  * Configure and build with newly created chroot as sysroot\/toolchain-path:\n+* Make sure the symlinks inside the newly created chroot point to proper locations:\n@@ -1223,7 +1290,13 @@\n-    ```\n-    sh .\/configure \\\n-      --openjdk-target=aarch64-linux-gnu \\\n-      --with-sysroot=~\/sysroot-arm64\n-    make images\n-    ls build\/linux-aarch64-server-release\/\n-    ```\n+  ```\n+  sudo chroot ~\/sysroot-arm64 symlinks -cr .\n+  ```\n+\n+* Configure and build with newly created chroot as sysroot\/toolchain-path:\n+\n+  ```\n+  sh .\/configure \\\n+    --openjdk-target=aarch64-linux-gnu \\\n+    --with-sysroot=~\/sysroot-arm64\n+  make images\n+  ls build\/linux-aarch64-server-release\/\n+  ```\n@@ -1237,1 +1310,1 @@\n-  * Native compilers: override `CC` or `CXX` for `.\/configure`\n+* Native compilers: override `CC` or `CXX` for `.\/configure`\n@@ -1239,1 +1312,1 @@\n-  * Freetype lib location: override `--with-freetype-lib`, for example `${sysroot}\/usr\/lib\/${target}\/`\n+* Freetype lib location: override `--with-freetype-lib`, for example `${sysroot}\/usr\/lib\/${target}\/`\n@@ -1241,1 +1314,1 @@\n-  * Freetype includes location: override `--with-freetype-include` for example `${sysroot}\/usr\/include\/freetype2\/`\n+* Freetype includes location: override `--with-freetype-include` for example `${sysroot}\/usr\/include\/freetype2\/`\n@@ -1243,1 +1316,1 @@\n-  * X11 libraries location: override `--x-libraries`, for example `${sysroot}\/usr\/lib\/${target}\/`\n+* X11 libraries location: override `--x-libraries`, for example `${sysroot}\/usr\/lib\/${target}\/`\n@@ -1264,1 +1337,3 @@\n-### Building for ARM\/aarch64\n+### Considerations for specific targets\n+\n+#### Building for ARM32\n@@ -1267,4 +1342,4 @@\n-useful to set the ABI profile. A number of pre-defined ABI profiles are\n-available using `--with-abi-profile`: arm-vfp-sflt, arm-vfp-hflt, arm-sflt,\n-armv5-vfp-sflt, armv6-vfp-hflt. Note that soft-float ABIs are no longer\n-properly supported by the JDK.\n+recommended to set the ABI profile. A number of pre-defined ABI profiles are\n+available using `--with-abi-profile`: `arm-vfp-sflt`, `arm-vfp-hflt`,\n+`arm-sflt`, `armv5-vfp-sflt` and `armv6-vfp-hflt`. Note that soft-float ABIs are\n+no longer properly supported by the JDK.\n@@ -1272,1 +1347,1 @@\n-### Building for RISC-V\n+#### Building for RISC-V\n@@ -1276,1 +1351,1 @@\n-but the [external libraries](#External-Library-Requirements) required by OpenJDK\n+but the [external libraries](#external-library-requirements) required by the JDK\n@@ -1280,34 +1355,34 @@\n-  * Install the RISC-V GNU compiler toolchain:\n-\n-    ```\n-    git clone --recursive https:\/\/github.com\/riscv-collab\/riscv-gnu-toolchain\n-    cd riscv-gnu-toolchain\n-    .\/configure --prefix=<toolchain-installed-path>\n-    make linux\n-    export PATH=<toolchain-installed-path>\/bin:$PATH\n-    ```\n-\n-  * Cross-compile all the required libraries:\n-\n-    ```\n-    # An example for libffi\n-    git clone https:\/\/github.com\/libffi\/libffi\n-    cd libffi\n-    .\/configure --host=riscv64-unknown-linux-gnu --prefix=<toolchain-installed-path>\/sysroot\/usr\n-    make\n-    make install\n-    ```\n-\n-  * Configure and build OpenJDK:\n-\n-    ```\n-    bash configure \\\n-      --with-boot-jdk=$BOOT_JDK \\\n-      --openjdk-target=riscv64-linux-gnu \\\n-      --with-sysroot=<toolchain-installed-path>\/sysroot \\\n-      --with-toolchain-path=<toolchain-installed-path>\/bin \\\n-      --with-extra-path=<toolchain-installed-path>\/bin\n-    make images\n-    ```\n-\n-### Building for musl\n+* Install the RISC-V GNU compiler toolchain:\n+\n+  ```\n+  git clone --recursive https:\/\/github.com\/riscv-collab\/riscv-gnu-toolchain\n+  cd riscv-gnu-toolchain\n+  .\/configure --prefix=<toolchain-installed-path>\n+  make linux\n+  export PATH=<toolchain-installed-path>\/bin:$PATH\n+  ```\n+\n+* Cross-compile all the required libraries:\n+\n+  ```\n+  # An example for libffi\n+  git clone https:\/\/github.com\/libffi\/libffi\n+  cd libffi\n+  .\/configure --host=riscv64-unknown-linux-gnu --prefix=<toolchain-installed-path>\/sysroot\/usr\n+  make\n+  make install\n+  ```\n+\n+* Configure and build the JDK:\n+\n+  ```\n+  bash configure \\\n+    --with-boot-jdk=$BOOT_JDK \\\n+    --openjdk-target=riscv64-linux-gnu \\\n+    --with-sysroot=<toolchain-installed-path>\/sysroot \\\n+    --with-toolchain-path=<toolchain-installed-path>\/bin \\\n+    --with-extra-path=<toolchain-installed-path>\/bin\n+  make images\n+  ```\n+\n+#### Building for musl\n@@ -1316,1 +1391,1 @@\n-cross-compile for musl libc on a glibc-based *build* system.\n+cross-compile for `musl` libc on a glibc-based *build* system.\n@@ -1332,11 +1407,0 @@\n-### Verifying the Build\n-\n-The build will end up in a directory named like\n-`build\/linux-arm-normal-server-release`.\n-\n-Inside this build output directory, the `images\/jdk` will contain the newly\n-built JDK, for your *target* system.\n-\n-Copy these folders to your *target* system. Then you can run e.g.\n-`images\/jdk\/bin\/java -version`.\n-\n@@ -1352,2 +1416,2 @@\n-  * `--with-num-cores` -- number of cores in the build system, e.g.\n-    `--with-num-cores=8`.\n+* `--with-num-cores` -- number of cores in the build system, e.g.\n+  `--with-num-cores=8`.\n@@ -1355,2 +1419,2 @@\n-  * `--with-memory-size` -- memory (in MB) available in the build system, e.g.\n-    `--with-memory-size=1024`\n+* `--with-memory-size` -- memory (in MB) available in the build system, e.g.\n+  `--with-memory-size=1024`\n@@ -1403,1 +1467,1 @@\n-By default, the Hotspot build uses preccompiled headers (PCH) on the toolchains\n+By default, the Hotspot build uses pre-compiled headers (PCH) on the toolchains\n@@ -1408,1 +1472,1 @@\n-You can experiment by disabling precompiled headers using\n+You can experiment by disabling pre-compiled headers using\n@@ -1458,1 +1522,1 @@\n-\/localhome\/git\/jdk-sandbox\/hotspot\/src\/share\/vm\/services\/psMemoryPool.cpp:1:1: error: 'failhere' does not name a type\n+\/src\/jdk\/hotspot\/src\/share\/vm\/services\/psMemoryPool.cpp:1:1: error: 'failhere' does not name a type\n@@ -1461,1 +1525,1 @@\n-* All command lines available in \/localhome\/git\/jdk-sandbox\/build\/linux-x64\/make-support\/failure-logs.\n+* All command lines available in \/src\/jdk\/build\/linux-x64\/make-support\/failure-logs.\n@@ -1465,1 +1529,1 @@\n-lib\/CompileJvm.gmk:207: recipe for target '\/localhome\/git\/jdk-sandbox\/build\/linux-x64\/hotspot\/variant-server\/libjvm\/objs\/psMemoryPool.o' failed\n+lib\/CompileJvm.gmk:207: recipe for target '\/src\/jdk\/build\/linux-x64\/hotspot\/variant-server\/libjvm\/objs\/psMemoryPool.o' failed\n@@ -1469,2 +1533,2 @@\n-Hint: Try searching the build log for the name of the first failed target.\n-Hint: If caused by a warning, try configure --disable-warnings-as-errors.\n+HELP: Try searching the build log for the name of the first failed target.\n+HELP: Run 'make doctor' to diagnose build problems.\n@@ -1533,0 +1597,49 @@\n+#### Running \"make doctor\"\n+\n+The build system comes with a built-in problem diagnosing system. If you\n+encounter unexpected build failures, you are highly encouraged to run `make\n+doctor`. The build system will check for common sources of build problems and\n+suggest suitable actions to take to fix those problems.\n+\n+These checks are not done during normal build time since they are either too\n+expensive performance-wise to perform, or since they are not conclusive and\n+just an indication about a potential problem.\n+\n+The output from `make doctor` can look like this:\n+\n+```\n+\"make doctor\" will help you analyze your build environment. It can highlight\n+certain well-known problems, but it can never find all possible errors.\n+\n+* Verifying that configure has picked up git...\n+\n+* Checking for warnings from configure...\n+ ---\n+The following warnings were produced. Repeated here for convenience:\n+WARNING: pandoc is version 3.1.9, not the recommended version 2.19.2\n+ ---\n+! Inspect the warnings, fix any problems, and re-run configure\n+\n+* Checking for left-over core files...\n+Found these potential core files. They might interfere with the build process:\n+ ---\n+src\/hotspot\/core.1337\n+ ---\n+! Remove left-over core files\n+\n+* Checking for untracked files with illegal names...\n+\n+* If all else fails, try removing the entire build directory and re-creating\n+the same configuration using:\n+ ---\n+configure_command_line=$(make print-configuration)\n+make dist-clean\n+bash configure $configure_command_line\n+ ---\n+\n+* The build README (doc\/building.md) is a great source of information,\n+especially the chapter \"Fixing Unexpected Build Failures\". Check it out!\n+\n+* If you still need assistance please contact build-dev@openjdk.org.\n+```\n+\n@@ -1601,0 +1714,1 @@\n+\n@@ -1605,0 +1719,1 @@\n+\n@@ -1617,0 +1732,1 @@\n+\n@@ -1622,0 +1738,1 @@\n+\n@@ -1644,1 +1761,1 @@\n-#contributing-to-openjdk) for more information.\n+#contributing-to-the-jdk) for more information.\n@@ -1655,1 +1772,1 @@\n-Currently, it is not possible to build OpenJDK fully reproducibly, but getting\n+Currently, it is not possible to build the JDK fully reproducibly, but getting\n@@ -1658,1 +1775,1 @@\n-An absolute prerequisite for building reproducible is to speficy a fixed build\n+An absolute prerequisite for building reproducible is to specify a fixed build\n@@ -1694,1 +1811,1 @@\n- * `--with-source-date`\n+* `--with-source-date`\n@@ -1696,3 +1813,3 @@\n-    This option controls how the JDK build sets `SOURCE_DATE_EPOCH` when\n-    building. It can be set to a value describing a date, either an epoch based\n-    timestamp as an integer, or a valid ISO-8601 date.\n+ This option controls how the JDK build sets `SOURCE_DATE_EPOCH` when\n+ building. It can be set to a value describing a date, either an epoch based\n+ timestamp as an integer, or a valid ISO-8601 date.\n@@ -1700,6 +1817,6 @@\n-    It can also be set to one of the special values `current`, `updated` or\n-    `version`. `current` means that the time of running `configure` will be\n-    used. `version` will use the nominal release date for the current JDK\n-    version. `updated`, which means that `SOURCE_DATE_EPOCH` will be set to the\n-    current time each time you are running `make`. All choices, except for\n-    `updated`, will set a fixed value for the source date timestamp.\n+ It can also be set to one of the special values `current`, `updated` or\n+ `version`. `current` means that the time of running `configure` will be\n+ used. `version` will use the nominal release date for the current JDK\n+ version. `updated`, which means that `SOURCE_DATE_EPOCH` will be set to the\n+ current time each time you are running `make`. All choices, except for\n+ `updated`, will set a fixed value for the source date timestamp.\n@@ -1707,3 +1824,3 @@\n-    When `SOURCE_DATE_EPOCH` is set, the default value for `--with-source-date`\n-    will be the value given by `SOURCE_DATE_EPOCH`. Otherwise, the default value\n-    is `current`.\n+ When `SOURCE_DATE_EPOCH` is set, the default value for `--with-source-date`\n+ will be the value given by `SOURCE_DATE_EPOCH`. Otherwise, the default value\n+ is `current`.\n@@ -1711,1 +1828,1 @@\n- * `--with-hotspot-build-time`\n+* `--with-hotspot-build-time`\n@@ -1713,6 +1830,6 @@\n-    This option controls the build time string that will be included in the\n-    hotspot library (`libjvm.so` or `jvm.dll`). When the source date is fixed\n-    (e.g. by setting `SOURCE_DATE_EPOCH`), the default value for\n-    `--with-hotspot-build-time` will be an ISO 8601 representation of that time\n-    stamp. Otherwise the default value will be the current time when building\n-    hotspot.\n+ This option controls the build time string that will be included in the\n+ hotspot library (`libjvm.so` or `jvm.dll`). When the source date is fixed\n+ (e.g. by setting `SOURCE_DATE_EPOCH`), the default value for\n+ `--with-hotspot-build-time` will be an ISO 8601 representation of that time\n+ stamp. Otherwise the default value will be the current time when building\n+ hotspot.\n@@ -1720,1 +1837,1 @@\n- * `--with-copyright-year`\n+* `--with-copyright-year`\n@@ -1722,5 +1839,5 @@\n-    This option controls the copyright year in some generated text files. When\n-    the source date is fixed (e.g. by setting `SOURCE_DATE_EPOCH`), the default\n-    value for `--with-copyright-year` will be the year of that time stamp.\n-    Otherwise the default is the current year at the time of running configure.\n-    This can be overridden by `--with-copyright-year=<year>`.\n+ This option controls the copyright year in some generated text files. When\n+ the source date is fixed (e.g. by setting `SOURCE_DATE_EPOCH`), the default\n+ value for `--with-copyright-year` will be the year of that time stamp.\n+ Otherwise the default is the current year at the time of running configure.\n+ This can be overridden by `--with-copyright-year=<year>`.\n@@ -1728,1 +1845,1 @@\n- * `--enable-reproducible-build`\n+* `--enable-reproducible-build`\n@@ -1730,5 +1847,5 @@\n-    This option controls some additional behavior needed to make the build\n-    reproducible. When the source date is fixed (e.g. by setting\n-    `SOURCE_DATE_EPOCH`), this flag will be turned on by default. Otherwise, the\n-    value is determined by heuristics. If it is explicitly turned off, the build\n-    might not be reproducible.\n+ This option controls some additional behavior needed to make the build\n+ reproducible. When the source date is fixed (e.g. by setting\n+ `SOURCE_DATE_EPOCH`), this flag will be turned on by default. Otherwise, the\n+ value is determined by heuristics. If it is explicitly turned off, the build\n+ might not be reproducible.\n@@ -1834,6 +1951,6 @@\n-  * `gensrc` (Generate source code to compile)\n-  * `gendata` (Generate non-source code artifacts)\n-  * `copy` (Copy resource artifacts)\n-  * `java` (Compile Java code)\n-  * `launchers` (Compile native executables)\n-  * `libs` (Compile native libraries)\n+* `gensrc` (Generate source code to compile)\n+* `gendata` (Generate non-source code artifacts)\n+* `copy` (Copy resource artifacts)\n+* `java` (Compile Java code)\n+* `launchers` (Compile native executables)\n+* `libs` (Compile native libraries)\n@@ -1856,1 +1973,1 @@\n-> **Note that if used incorrectly, this can lead to a broken build!**\n+**Note that if used incorrectly, this method can lead to a broken build!**\n@@ -1868,3 +1985,4 @@\n-If you are modifying files in `java.base`, which is the by far largest module\n-in the JDK, then you need to rebuild all those files whenever a single file has\n-changed. (This inefficiency will hopefully be addressed in JDK 10.)\n+In older versions of the JDK, inefficiencies when building `java.base` (by far\n+the largest module in the JDK) could be overcome by using the make control\n+variable `JDK_FILTER`. This is not needed anymore for performance reasons, but\n+the functionality is still present.\n@@ -1872,1 +1990,1 @@\n-As a hack, you can use the make control variable `JDK_FILTER` to specify a\n+To use this, set the make control variable `JDK_FILTER` to specify a\n@@ -1874,2 +1992,1 @@\n-instance, `make java.base JDK_FILTER=javax\/crypto` (or, to combine methods,\n-`make java.base-java-only JDK_FILTER=javax\/crypto`) will limit the compilation\n+instance, `make java.base JDK_FILTER=javax\/crypto` will limit the compilation\n@@ -1915,2 +2032,2 @@\n-  * `images`: This is the directory were the output of the `*-image` make\n-    targets end up. For instance, `make jdk-image` ends up in `images\/jdk`.\n+* `images`: This is the directory were the output of the `*-image` make\n+  targets end up. For instance, `make jdk-image` ends up in `images\/jdk`.\n@@ -1918,2 +2035,2 @@\n-  * `jdk`: This is the \"exploded image\". After `make jdk`, you will be able to\n-    launch the newly built JDK by running `$BUILD\/jdk\/bin\/java`.\n+* `jdk`: This is the \"exploded image\". After `make jdk`, you will be able to\n+  launch the newly built JDK by running `$BUILD\/jdk\/bin\/java`.\n@@ -1921,1 +2038,1 @@\n-  * `test-results`: This directory contains the results from running tests.\n+* `test-results`: This directory contains the results from running tests.\n@@ -1923,6 +2040,6 @@\n-  * `support`: This is an area for intermediate files needed during the build,\n-    e.g. generated source code, object files and class files. Some noteworthy\n-    directories in `support` is `gensrc`, which contains the generated source\n-    code, and the `modules_*` directories, which contains the files in a\n-    per-module hierarchy that will later be collapsed into the `jdk` directory\n-    of the exploded image.\n+* `support`: This is an area for intermediate files needed during the build,\n+  e.g. generated source code, object files and class files. Some noteworthy\n+  directories in `support` is `gensrc`, which contains the generated source\n+  code, and the `modules_*` directories, which contains the files in a\n+  per-module hierarchy that will later be collapsed into the `jdk` directory\n+  of the exploded image.\n@@ -1930,2 +2047,2 @@\n-  * `buildtools`: This is an area for tools compiled for the build platform\n-    that are used during the rest of the build.\n+* `buildtools`: This is an area for tools compiled for the build platform\n+  that are used during the rest of the build.\n@@ -1933,2 +2050,2 @@\n-  * `hotspot`: This is an area for intermediate files needed when building\n-    hotspot.\n+* `hotspot`: This is an area for intermediate files needed when building\n+  hotspot.\n@@ -1936,3 +2053,3 @@\n-  * `configure-support`, `make-support` and `test-support`: These directories\n-    contain files that are needed by the build system for `configure`, `make`\n-    and for running tests.\n+* `configure-support`, `make-support` and `test-support`: These directories\n+  contain files that are needed by the build system for `configure`, `make`\n+  and for running tests.\n@@ -1950,3 +2067,46 @@\n-This conversion is done by the `fixpath` tool, which is a small wrapper that\n-modifies unix-style paths to Windows-style paths in command lines. Fixpath is\n-compiled automatically by `configure`.\n+This conversion is done by the `fixpath.sh` tool, which is a small wrapper that\n+modifies Unix-style paths to Windows-style paths. The fixpath tool is called\n+with the first argument as a sub-command describing the action it should take.\n+Available actions are `import`, `exec`, `print` and `verify`.\n+\n+* `import` is called at configure time to convert a path given by the user and\n+  that might be in Windows format to Unix path, which is used internally.\n+\n+* `exec` is called at build time. This will take the command line provided,\n+  complete with arguments, converting the paths in the command line, and then\n+  execute the command.\n+\n+* `print` is called at build time, in the rare cases where a path might be\n+  needed in Windows format, but not as an argument to a command to execute.\n+\n+* `verify` is called at configure time to check that a path is correctly\n+  specified and reachable by Windows.\n+\n+The fixpath tool uses a somewhat complex heuristic to infer which part of the\n+command line arguments refer to paths, and converts those. In some\n+circumstances, these heuristics can fail.\n+\n+If you are having strange build issues related to path conversion, you might\n+need to debug how fixpath treats your paths. Here are some ways to do this.\n+\n+One way is to define the environment variable `DEBUG_FIXPATH`, e.g.\n+`DEBUG_FIXPATH=1 make jdk`. When set, any call to `fixpath exec` will result in\n+an output like this:\n+\n+```\n+fixpath: debug: input: ls \/mnt\/c\/windows\n+fixpath: debug: output: ls c:\\windows\n+```\n+\n+You can also call fixpath yourself manually with your paths to see how they are\n+translated. For this, use `print` and `import`. For example:\n+\n+```\n+$ bash make\/scripts\/fixpath.sh print \/mnt\/c\/windows\n+c:\\windows\n+$ bash make\/scripts\/fixpath.sh import \"c:\\\\windows\"\n+\/mnt\/c\/windows\n+```\n+\n+Remember that backslash is used as an escape character in the shell, and needs\n+to be doubled when used in Windows paths.\n@@ -1965,1 +2125,1 @@\n-  * `none` means that no debug symbols will be generated during the build.\n+* `none` means that no debug symbols will be generated during the build.\n@@ -1967,2 +2127,2 @@\n-  * `internal` means that debug symbols will be generated during the build, and\n-    they will be stored in the generated binary.\n+* `internal` means that debug symbols will be generated during the build, and\n+  they will be stored in the generated binary.\n@@ -1970,3 +2130,3 @@\n-  * `external` means that debug symbols will be generated during the build, and\n-    after the compilation, they will be moved into a separate `.debuginfo` file.\n-    (This was previously known as FDS, Full Debug Symbols).\n+* `external` means that debug symbols will be generated during the build, and\n+  after the compilation, they will be moved into a separate `.debuginfo` file.\n+  (This was previously known as FDS, Full Debug Symbols).\n@@ -1974,2 +2134,2 @@\n-  * `zipped` is like `external`, but the .debuginfo file will also be zipped\n-    into a `.diz` file.\n+* `zipped` is like `external`, but the .debuginfo file will also be zipped\n+  into a `.diz` file.\n@@ -1983,2 +2143,2 @@\n-The `configure` script is based on the autoconf framework, but in some details\n-deviate from a normal autoconf `configure` script.\n+The `configure` script is using the autoconf framework, but it has grown to\n+deviate quite a lot from a traditional autoconf `configure` script.\n@@ -1998,3 +2158,0 @@\n-In previous versions of the JDK, the generated script was checked in at\n-`make\/autoconf\/generated-configure.sh`. This is no longer the case.\n-\n@@ -2040,0 +2197,1 @@\n+\n@@ -2043,0 +2201,1 @@\n+\n","filename":"doc\/building.md","additions":758,"deletions":599,"binary":false,"changes":1357,"status":"modified"}]}