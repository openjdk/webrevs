{"files":[{"patch":"@@ -725,1 +725,2 @@\n-\/\/ Support class with a collection of functions used when dumping the heap\n+class DumperClassCacheTable;\n+class DumperClassCacheTableEntry;\n@@ -727,0 +728,1 @@\n+\/\/ Support class with a collection of functions used when dumping the heap\n@@ -741,1 +743,1 @@\n-  static u4 instance_size(Klass* k);\n+  static u4 instance_size(Klass* k, DumperClassCacheTableEntry* class_cache_entry = nullptr);\n@@ -754,1 +756,1 @@\n-  static void dump_instance_fields(AbstractDumpWriter* writer, oop o);\n+  static void dump_instance_fields(AbstractDumpWriter* writer, oop o, DumperClassCacheTableEntry* class_cache_entry);\n@@ -760,1 +762,1 @@\n-  static void dump_instance(AbstractDumpWriter* writer, oop o);\n+  static void dump_instance(AbstractDumpWriter* writer, oop o, DumperClassCacheTable* class_cache);\n@@ -790,0 +792,85 @@\n+\/\/ Hash table of klasses to the klass metadata. This should greatly improve the\n+\/\/ hash dumping performance. This hash table is supposed to be used by a single\n+\/\/ thread only.\n+\/\/\n+class DumperClassCacheTableEntry : public CHeapObj<mtServiceability> {\n+  friend class DumperClassCacheTable;\n+private:\n+  GrowableArray<char> _sigs_start;\n+  GrowableArray<int> _offsets;\n+  u4 _instance_size;\n+  int _entries;\n+\n+public:\n+  DumperClassCacheTableEntry() : _instance_size(0), _entries(0) {};\n+\n+  int field_count()             { return _entries; }\n+  char sig_start(int field_idx) { return _sigs_start.at(field_idx); }\n+  int offset(int field_idx)     { return _offsets.at(field_idx); }\n+  u4 instance_size()            { return _instance_size; }\n+};\n+\n+class DumperClassCacheTable : public StackObj {\n+private:\n+  static unsigned int ptr_hash(void* const& s1) {\n+    \/\/ 2654435761 = 2^32 * Phi (golden ratio)\n+    return (unsigned int)(((uint32_t)(uintptr_t)s1) * 2654435761u);\n+  }\n+\n+  \/\/ ResourceHashtable SIZE is specified at compile time so we\n+  \/\/ use 1031 which is the first prime after 1024.\n+  typedef ResourceHashtable<void*, DumperClassCacheTableEntry*, 1031, AnyObj::C_HEAP, mtServiceability,\n+          &DumperClassCacheTable::ptr_hash> PtrTable;\n+  PtrTable* _ptrs;\n+\n+  \/\/ Single-slot cache to handle the major case of objects of the same\n+  \/\/ class back-to-back, e.g. from T[].\n+  InstanceKlass* _last_ik;\n+  DumperClassCacheTableEntry* _last_entry;\n+\n+public:\n+  DumperClassCacheTableEntry* lookup_or_create(InstanceKlass* ik) {\n+    if (_last_ik == ik) {\n+      return _last_entry;\n+    }\n+\n+    DumperClassCacheTableEntry* entry;\n+    DumperClassCacheTableEntry** from_cache = _ptrs->get(ik);\n+    if (from_cache == nullptr) {\n+      entry = new DumperClassCacheTableEntry();\n+      for (HierarchicalFieldStream<JavaFieldStream> fld(ik); !fld.done(); fld.next()) {\n+        if (!fld.access_flags().is_static()) {\n+          Symbol* sig = fld.signature();\n+          entry->_sigs_start.push(sig->char_at(0));\n+          entry->_offsets.push(fld.offset());\n+          entry->_entries++;\n+          entry->_instance_size += DumperSupport::sig2size(sig);\n+        }\n+      }\n+      _ptrs->put(ik, entry);\n+    } else {\n+      entry = *from_cache;\n+    }\n+\n+    \/\/ Remember for single-slot cache.\n+    _last_ik = ik;\n+    _last_entry = entry;\n+\n+    return entry;\n+  }\n+\n+  DumperClassCacheTable() : _ptrs(new (mtServiceability) PtrTable), _last_ik(nullptr), _last_entry(nullptr) {}\n+\n+  ~DumperClassCacheTable() {\n+    class CleanupEntry: StackObj {\n+    public:\n+      bool do_entry(void*& key, DumperClassCacheTableEntry*& entry) {\n+        delete entry;\n+        return true;\n+      }\n+    } cleanup;\n+    _ptrs->unlink(&cleanup);\n+    delete _ptrs;\n+  }\n+};\n+\n@@ -934,7 +1021,10 @@\n-u4 DumperSupport::instance_size(Klass* k) {\n-  InstanceKlass* ik = InstanceKlass::cast(k);\n-  u4 size = 0;\n-\n-  for (HierarchicalFieldStream<JavaFieldStream> fld(ik); !fld.done(); fld.next()) {\n-    if (!fld.access_flags().is_static()) {\n-      size += sig2size(fld.signature());\n+u4 DumperSupport::instance_size(Klass* k, DumperClassCacheTableEntry* class_cache_entry) {\n+  if (class_cache_entry != nullptr) {\n+    return class_cache_entry->instance_size();\n+  } else {\n+    InstanceKlass* ik = InstanceKlass::cast(k);\n+    u4 size = 0;\n+    for (HierarchicalFieldStream<JavaFieldStream> fld(ik); !fld.done(); fld.next()) {\n+      if (!fld.access_flags().is_static()) {\n+        size += sig2size(fld.signature());\n+      }\n@@ -942,0 +1032,1 @@\n+    return size;\n@@ -943,1 +1034,0 @@\n-  return size;\n@@ -1015,8 +1105,4 @@\n-void DumperSupport::dump_instance_fields(AbstractDumpWriter* writer, oop o) {\n-  InstanceKlass* ik = InstanceKlass::cast(o->klass());\n-\n-  for (HierarchicalFieldStream<JavaFieldStream> fld(ik); !fld.done(); fld.next()) {\n-    if (!fld.access_flags().is_static()) {\n-      Symbol* sig = fld.signature();\n-      dump_field_value(writer, sig->char_at(0), o, fld.offset());\n-    }\n+void DumperSupport::dump_instance_fields(AbstractDumpWriter* writer, oop o, DumperClassCacheTableEntry* class_cache_entry) {\n+  assert(class_cache_entry, \"Pre-condition: should be provided\");\n+  for (int idx = 0; idx < class_cache_entry->field_count(); idx++) {\n+    dump_field_value(writer, class_cache_entry->sig_start(idx), o, class_cache_entry->offset(idx));\n@@ -1053,1 +1139,1 @@\n-void DumperSupport::dump_instance(AbstractDumpWriter* writer, oop o) {\n+void DumperSupport::dump_instance(AbstractDumpWriter* writer, oop o, DumperClassCacheTable* class_cache) {\n@@ -1055,1 +1141,4 @@\n-  u4 is = instance_size(ik);\n+\n+  DumperClassCacheTableEntry* cache_entry = class_cache->lookup_or_create(ik);\n+\n+  u4 is = instance_size(ik, cache_entry);\n@@ -1069,1 +1158,1 @@\n-  dump_instance_fields(writer, o);\n+  dump_instance_fields(writer, o, cache_entry);\n@@ -1766,0 +1855,2 @@\n+  DumperClassCacheTable _class_cache;\n+\n@@ -1790,1 +1881,1 @@\n-    DumperSupport::dump_instance(writer(), o);\n+    DumperSupport::dump_instance(writer(), o, &_class_cache);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":115,"deletions":24,"binary":false,"changes":139,"status":"modified"}]}