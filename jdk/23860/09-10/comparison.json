{"files":[{"patch":"@@ -43,0 +43,2 @@\n+#define XMMBYTES 64\n+\n@@ -48,1 +50,0 @@\n-    16382, \/\/ toMont((dilithium_n)^-1 (mod dilithium_q))\n@@ -50,1 +51,1 @@\n-    5373807 \/\/ addend for modular reduce\n+    5373807 \/\/ Barrett addend for modular reduction\n@@ -53,2 +54,7 @@\n-static address dilithiumAvx512ConstsAddr() {\n-  return (address) dilithiumAvx512Consts;\n+const int montQInvModRIdx = 0;\n+const int dilithium_qIdx = 4;\n+const int montRSquareModQIdx = 8;\n+const int barrettAddendIdx = 12;\n+\n+static address dilithiumAvx512ConstsAddr(int offset) {\n+  return ((address) dilithiumAvx512Consts) + offset;\n@@ -59,1 +65,0 @@\n-const XMMRegister montRSquareModQ = xmm29;\n@@ -68,0 +73,1 @@\n+    \/\/ level 4\n@@ -70,0 +76,1 @@\n+    \/\/ level 5\n@@ -72,0 +79,1 @@\n+    \/\/ level 6\n@@ -74,0 +82,1 @@\n+    \/\/ level 7\n@@ -78,0 +87,1 @@\n+\n@@ -79,0 +89,1 @@\n+    \/\/ level 0\n@@ -81,0 +92,1 @@\n+    \/\/ level 1\n@@ -83,0 +95,1 @@\n+    \/\/ level 2\n@@ -85,0 +98,1 @@\n+    \/\/ level 3\n@@ -87,0 +101,1 @@\n+    \/\/ level 4\n@@ -91,0 +106,11 @@\n+const int montMulPermsIdx = 0;\n+const int nttL4PermsIdx = 64;\n+const int nttL5PermsIdx = 192;\n+const int nttL6PermsIdx = 320;\n+const int nttL7PermsIdx = 448;\n+const int nttInvL0PermsIdx = 704;\n+const int nttInvL1PermsIdx = 832;\n+const int nttInvL2PermsIdx = 960;\n+const int nttInvL3PermsIdx = 1088;\n+const int nttInvL4PermsIdx = 1216;\n+\n@@ -244,9 +270,0 @@\n-static void loadZetas(int destinationRegs[], Register zetas,\n-                      int offset, int incr, MacroAssembler *_masm) {\n-  for (int i = 0; i < 4; i++) {\n-    __ evmovdqul(xmm(destinationRegs[i]), Address(zetas, offset + i * incr),\n-                 Assembler::AVX_512bit);\n-  }\n-}\n-\n-\n@@ -263,0 +280,20 @@\n+static void load4Xmms(int destinationRegs[], Register source, int offset,\n+                       MacroAssembler *_masm) {\n+  for (int i = 0; i < 4; i++) {\n+    __ evmovdqul(xmm(destinationRegs[i]), Address(source, offset + i * XMMBYTES),\n+                 Assembler::AVX_512bit);\n+  }\n+}\n+\n+static void loadXmm29(Register source, int offset, MacroAssembler *_masm) {\n+    __ evmovdqul(xmm29, Address(source, offset), Assembler::AVX_512bit);\n+}\n+\n+static void store4Xmms(Register destination, int offset, int xmmRegs[],\n+                       MacroAssembler *_masm) {\n+  for (int i = 0; i < 4; i++) {\n+    __ evmovdqul(Address(destination, offset + i * XMMBYTES), xmm(xmmRegs[i]),\n+                 Assembler::AVX_512bit);\n+  }\n+}\n+\n@@ -274,0 +311,1 @@\n+static int xmm20_23[] = {20, 21, 22, 23};\n@@ -308,3 +346,6 @@\n-  __ evmovdqul(montMulPerm, Address(perms, 0), Assembler::AVX_512bit);\n-  __ evmovdqul(xmm29, Address(zetas, 0), Assembler::AVX_512bit);\n-  __ vpbroadcastd(montQInvModR, ExternalAddress(dilithiumAvx512ConstsAddr()),\n+  __ evmovdqul(montMulPerm, Address(perms, montMulPermsIdx), Assembler::AVX_512bit);\n+  \/\/ For levels 0 and 1 the zetas are not different within the 4 xmm registers\n+  \/\/ that we would use for them, so we use only one, xmm29.\n+  loadXmm29(zetas, 0, _masm);\n+  __ vpbroadcastd(montQInvModR,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(montQInvModRIdx)),\n@@ -312,1 +353,2 @@\n-  __ vpbroadcastd(dilithium_q, ExternalAddress(dilithiumAvx512ConstsAddr() + 4),\n+  __ vpbroadcastd(dilithium_q,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(dilithium_qIdx)),\n@@ -315,1 +357,0 @@\n-\n@@ -318,3 +359,4 @@\n-  for (int i = 0; i < 16; i++) {\n-    __ evmovdqul(xmm(i), Address(coeffs, i * 64), Assembler::AVX_512bit);\n-  }\n+  load4Xmms(xmm0_3, coeffs, 0, _masm);\n+  load4Xmms(xmm4_7, coeffs, 4 * XMMBYTES, _masm);\n+  load4Xmms(xmm8_11, coeffs, 8 * XMMBYTES, _masm);\n+  load4Xmms(xmm12_15, coeffs, 12 * XMMBYTES, _masm);\n@@ -326,1 +368,0 @@\n-\n@@ -330,1 +371,1 @@\n-  __ evmovdqul(xmm29, Address(zetas, 512), Assembler::AVX_512bit); \/\/ for level 1\n+  loadXmm29(zetas, 512, _masm); \/\/ for level 1\n@@ -336,1 +377,1 @@\n-  __ evmovdqul(xmm29, Address(zetas, 768), Assembler::AVX_512bit);\n+  loadXmm29(zetas, 768, _masm);\n@@ -347,3 +388,4 @@\n-  for (int i = 0; i < 16; i++) {\n-    __ evmovdqul(Address(coeffs, i * 64), xmm(i), Assembler::AVX_512bit);\n-  }\n+  store4Xmms(coeffs, 0, xmm0_3, _masm);\n+  store4Xmms(coeffs, 4 * XMMBYTES, xmm4_7, _masm);\n+  store4Xmms(coeffs, 8 * XMMBYTES, xmm8_11, _masm);\n+  store4Xmms(coeffs, 12 * XMMBYTES, xmm12_15, _masm);\n@@ -359,1 +401,1 @@\n-  loadZetas(xmm12_15, zetas, 2 * 512, 64, _masm);\n+  load4Xmms(xmm12_15, zetas, 2 * 512, _masm);\n@@ -361,1 +403,1 @@\n-  loadZetas(xmm12_15, zetas, 3 * 512, 64, _masm); \/\/ for level 3\n+  load4Xmms(xmm12_15, zetas, 3 * 512, _masm); \/\/ for level 3\n@@ -370,3 +412,3 @@\n-  loadPerm(xmm16_19, perms, 64, _masm);\n-  loadPerm(xmm12_15, perms, 128, _masm);\n-  loadZetas(xmm24_27, zetas, 4 * 512, 64, _masm); \/\/ for level 3\n+  loadPerm(xmm16_19, perms, nttL4PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttL4PermsIdx + 64, _masm);\n+  load4Xmms(xmm24_27, zetas, 4 * 512, _masm); \/\/ for level 3\n@@ -385,3 +427,3 @@\n-  loadPerm(xmm16_19, perms, 192, _masm);\n-  loadPerm(xmm12_15, perms, 256, _masm);\n-  loadZetas(xmm24_27, zetas, 5 * 512, 64, _masm);\n+  loadPerm(xmm16_19, perms, nttL5PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttL5PermsIdx + 64, _masm);\n+  load4Xmms(xmm24_27, zetas, 5 * 512, _masm);\n@@ -400,3 +442,3 @@\n-  loadPerm(xmm16_19, perms, 320, _masm);\n-  loadPerm(xmm12_15, perms, 384, _masm);\n-  loadZetas(xmm24_27, zetas, 6 * 512, 64, _masm);\n+  loadPerm(xmm16_19, perms, nttL6PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttL6PermsIdx + 64, _masm);\n+  load4Xmms(xmm24_27, zetas, 6 * 512, _masm);\n@@ -415,3 +457,3 @@\n-  loadPerm(xmm16_19, perms, 448, _masm);\n-  loadPerm(xmm12_15, perms, 512, _masm);\n-  loadZetas(xmm24_27, zetas, 7 * 512, 64, _masm);\n+  loadPerm(xmm16_19, perms, nttL7PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttL7PermsIdx + 64, _masm);\n+  load4Xmms(xmm24_27, zetas, 7 * 512, _masm);\n@@ -427,2 +469,2 @@\n-  loadPerm(xmm0246, perms, 576, _masm);\n-  loadPerm(xmm1357, perms, 640, _masm);\n+  loadPerm(xmm0246, perms, nttL7PermsIdx + 2 * XMMBYTES, _masm);\n+  loadPerm(xmm1357, perms, nttL7PermsIdx + 3 * XMMBYTES, _masm);\n@@ -439,3 +481,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(Address(coeffs, i * 64), xmm(i), Assembler::AVX_512bit);\n-  }\n+  store4Xmms(coeffs, 0, xmm0_3, _masm);\n+  store4Xmms(coeffs, 4 * XMMBYTES, xmm4_7, _masm);\n@@ -443,3 +484,2 @@\n-  for (int i = 8; i < 16; i++) {\n-    __ evmovdqul(xmm(i - 8), Address(coeffs, i * 64), Assembler::AVX_512bit);\n-  }\n+  load4Xmms(xmm0_3, coeffs, 8 * XMMBYTES, _masm);\n+  load4Xmms(xmm4_7, coeffs, 12 * XMMBYTES, _masm);\n@@ -447,1 +487,1 @@\n-  __ addptr(zetas, 256);\n+  __ addptr(zetas, 4 * XMMBYTES);\n@@ -453,3 +493,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(Address(coeffs, (i + 8) * 64), xmm(i), Assembler::AVX_512bit);\n-  }\n+  store4Xmms(coeffs, 8 * XMMBYTES, xmm0_3, _masm);\n+  store4Xmms(coeffs, 12 * XMMBYTES, xmm4_7, _masm);\n@@ -490,5 +529,7 @@\n-  __ evmovdqul(montMulPerm, Address(perms, 0), Assembler::AVX_512bit);\n-__ vpbroadcastd(montQInvModR, ExternalAddress(dilithiumAvx512ConstsAddr()),\n-                Assembler::AVX_512bit, scratch); \/\/ q^-1 mod 2^32\n-__ vpbroadcastd(dilithium_q, ExternalAddress(dilithiumAvx512ConstsAddr() + 4),\n-                Assembler::AVX_512bit, scratch); \/\/ q\n+  __ evmovdqul(montMulPerm, Address(perms, montMulPermsIdx), Assembler::AVX_512bit);\n+  __ vpbroadcastd(montQInvModR,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(montQInvModRIdx)),\n+                  Assembler::AVX_512bit, scratch); \/\/ q^-1 mod 2^32\n+  __ vpbroadcastd(dilithium_q,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(dilithium_qIdx)),\n+                  Assembler::AVX_512bit, scratch); \/\/ q\n@@ -497,3 +538,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(xmm(i), Address(coeffs, i * 64), Assembler::AVX_512bit);\n-  }\n+  load4Xmms(xmm0_3, coeffs, 0, _masm);\n+  load4Xmms(xmm4_7, coeffs, 4 * XMMBYTES, _masm);\n@@ -509,2 +549,2 @@\n-  loadPerm(xmm8_11, perms, 704, _masm);\n-  loadPerm(xmm12_15, perms, 768, _masm);\n+  loadPerm(xmm8_11, perms, nttInvL0PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttInvL0PermsIdx + 64, _masm);\n@@ -517,1 +557,1 @@\n-  loadZetas(xmm4_7, zetas, 0, 64, _masm);\n+  load4Xmms(xmm4_7, zetas, 0, _masm);\n@@ -522,2 +562,2 @@\n-  loadPerm(xmm8_11, perms, 832, _masm);\n-  loadPerm(xmm12_15, perms, 896, _masm);\n+  loadPerm(xmm8_11, perms, nttInvL1PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttInvL1PermsIdx + 64, _masm);\n@@ -530,1 +570,1 @@\n-  loadZetas(xmm4_7, zetas, 512, 64, _masm);\n+  load4Xmms(xmm4_7, zetas, 512, _masm);\n@@ -535,2 +575,2 @@\n-  loadPerm(xmm8_11, perms, 960, _masm);\n-  loadPerm(xmm12_15, perms, 1024, _masm);\n+  loadPerm(xmm8_11, perms, nttInvL2PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttInvL2PermsIdx + 64, _masm);\n@@ -543,1 +583,1 @@\n-  loadZetas(xmm4_7, zetas, 2 * 512, 64, _masm);\n+  load4Xmms(xmm4_7, zetas, 2 * 512, _masm);\n@@ -548,2 +588,2 @@\n-  loadPerm(xmm8_11, perms, 1088, _masm);\n-  loadPerm(xmm12_15, perms, 1152, _masm);\n+  loadPerm(xmm8_11, perms, nttInvL3PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttInvL3PermsIdx + 64, _masm);\n@@ -556,1 +596,1 @@\n-  loadZetas(xmm4_7, zetas, 3 * 512, 64, _masm);\n+  load4Xmms(xmm4_7, zetas, 3 * 512, _masm);\n@@ -561,2 +601,2 @@\n-  loadPerm(xmm8_11, perms, 1216, _masm);\n-  loadPerm(xmm12_15, perms, 1280, _masm);\n+  loadPerm(xmm8_11, perms, nttInvL4PermsIdx, _masm);\n+  loadPerm(xmm12_15, perms, nttInvL4PermsIdx + 64, _masm);\n@@ -569,1 +609,1 @@\n-  loadZetas(xmm4_7, zetas, 4 * 512, 64, _masm);\n+  load4Xmms(xmm4_7, zetas, 4 * 512, _masm);\n@@ -574,1 +614,1 @@\n-  loadZetas(xmm12_15, zetas, 5 * 512, 64, _masm);\n+  load4Xmms(xmm12_15, zetas, 5 * 512, _masm);\n@@ -579,1 +619,1 @@\n-  loadZetas(xmm12_15, zetas, 6 * 512, 64, _masm);\n+  load4Xmms(xmm12_15, zetas, 6 * 512, _masm);\n@@ -588,3 +628,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(Address(coeffs, i * 64), xmm(i), Assembler::AVX_512bit);\n-  }\n+  store4Xmms(coeffs, 0, xmm0_3, _masm);\n+  store4Xmms(coeffs, 4 * XMMBYTES, xmm4_7, _masm);\n@@ -592,1 +631,1 @@\n-  __ addptr(zetas, 256);\n+  __ addptr(zetas, 4 * XMMBYTES);\n@@ -594,3 +633,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(xmm(i), Address(coeffs, i * 64 + 512), Assembler::AVX_512bit);\n-  }\n+  load4Xmms(xmm0_3, coeffs, 8 * XMMBYTES, _masm);\n+  load4Xmms(xmm4_7, coeffs, 12 * XMMBYTES, _masm);\n@@ -605,3 +643,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(xmm(i + 8), Address(coeffs, i * 64), Assembler::AVX_512bit);\n-  }\n+  load4Xmms(xmm8_11, coeffs, 0, _masm);\n+  load4Xmms(xmm12_15, coeffs, 4 * XMMBYTES, _masm);\n@@ -611,1 +648,1 @@\n-  __ evmovdqul(xmm29, Address(zetas, 7 * 512), Assembler::AVX_512bit);\n+  loadXmm29(zetas, 7 * 512, _masm);\n@@ -621,3 +658,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(Address(coeffs, i * 64), xmm(i + 16), Assembler::AVX_512bit);\n-  }\n+  store4Xmms(coeffs, 0, xmm16_19, _masm);\n+  store4Xmms(coeffs, 4 * XMMBYTES, xmm20_23, _masm);\n@@ -625,4 +661,2 @@\n-\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(Address(coeffs, i * 64 + 512), xmm(i), Assembler::AVX_512bit);\n-  }\n+  store4Xmms(coeffs, 8 * XMMBYTES, xmm0_3, _masm);\n+  store4Xmms(coeffs, 12 * XMMBYTES, xmm4_7, _masm);\n@@ -663,1 +697,4 @@\n-  __ vpbroadcastd(montQInvModR, ExternalAddress(dilithiumAvx512ConstsAddr()),\n+  const XMMRegister montRSquareModQ = xmm29;\n+\n+  __ vpbroadcastd(montQInvModR,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(montQInvModRIdx)),\n@@ -665,1 +702,2 @@\n-  __ vpbroadcastd(dilithium_q, ExternalAddress(dilithiumAvx512ConstsAddr() + 4),\n+  __ vpbroadcastd(dilithium_q,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(dilithium_qIdx)),\n@@ -667,1 +705,2 @@\n-  __ vpbroadcastd(montRSquareModQ, ExternalAddress(dilithiumAvx512ConstsAddr() + 12),\n+  __ vpbroadcastd(montRSquareModQ,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(montRSquareModQIdx)),\n@@ -671,1 +710,1 @@\n-  __ evmovdqul(montMulPerm, Address(perms, 0), Assembler::AVX_512bit);\n+  __ evmovdqul(montMulPerm, Address(perms, montMulPermsIdx), Assembler::AVX_512bit);\n@@ -678,5 +717,2 @@\n-  for (int i = 0; i < 4; i++) {\n-    __ evmovdqul(xmm(i + 4), Address(poly2, i * 64), Assembler::AVX_512bit);\n-    __ evmovdqul(xmm(i), Address(poly1, i * 64), Assembler::AVX_512bit);\n-  }\n-\n+  load4Xmms(xmm4_7, poly2, 0, _masm);\n+  load4Xmms(xmm0_3, poly1, 0, _masm);\n@@ -685,0 +721,1 @@\n+  store4Xmms(result, 0, xmm0_3, _masm);\n@@ -686,3 +723,0 @@\n-  for (int i = 0; i < 4; i++) {\n-    __ evmovdqul(Address(result, i * 64), xmm(i), Assembler::AVX_512bit);\n-  }\n@@ -690,3 +724,3 @@\n-  __ addptr(poly1, 256);\n-  __ addptr(poly2, 256);\n-  __ addptr(result, 256);\n+  __ addptr(poly1, 4 * XMMBYTES);\n+  __ addptr(poly2, 4 * XMMBYTES);\n+  __ addptr(result, 4 * XMMBYTES);\n@@ -731,1 +765,2 @@\n-  __ vpbroadcastd(montQInvModR, ExternalAddress(dilithiumAvx512ConstsAddr()),\n+  __ vpbroadcastd(montQInvModR,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(montQInvModRIdx)),\n@@ -733,1 +768,2 @@\n-  __ vpbroadcastd(dilithium_q, ExternalAddress(dilithiumAvx512ConstsAddr() + 4),\n+  __ vpbroadcastd(dilithium_q,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(dilithium_qIdx)),\n@@ -735,1 +771,1 @@\n-  __ evmovdqul(montMulPerm, Address(perms, 0), Assembler::AVX_512bit);\n+  __ evmovdqul(montMulPerm, Address(perms, montMulPermsIdx), Assembler::AVX_512bit);\n@@ -743,4 +779,2 @@\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(xmm(i), Address(coeffs, i * 64), Assembler::AVX_512bit);\n-  }\n-\n+  load4Xmms(xmm0_3, coeffs, 0, _masm);\n+  load4Xmms(xmm4_7, coeffs, 4 * XMMBYTES, _masm);\n@@ -748,4 +782,2 @@\n-\n-  for (int i = 0; i < 8; i++) {\n-    __ evmovdqul(Address(coeffs, i * 64), xmm(i), Assembler::AVX_512bit);\n-  }\n+  store4Xmms(coeffs, 0, xmm0_3, _masm);\n+  store4Xmms(coeffs, 4 * XMMBYTES, xmm4_7, _masm);\n@@ -803,1 +835,2 @@\n-  __ vpbroadcastd(dilithium_q, ExternalAddress(dilithiumAvx512ConstsAddr() + 4),\n+  __ vpbroadcastd(dilithium_q,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(dilithium_qIdx)),\n@@ -805,1 +838,2 @@\n-  __ vpbroadcastd(barrettAddend, ExternalAddress(dilithiumAvx512ConstsAddr() + 16),\n+  __ vpbroadcastd(barrettAddend,\n+                  ExternalAddress(dilithiumAvx512ConstsAddr(barrettAddendIdx)),\n@@ -828,4 +862,1 @@\n-  __ evmovdqul(xmm0, Address(input, 0), Assembler::AVX_512bit);\n-  __ evmovdqul(xmm1, Address(input, 64), Assembler::AVX_512bit);\n-  __ evmovdqul(xmm2, Address(input, 128), Assembler::AVX_512bit);\n-  __ evmovdqul(xmm3, Address(input, 192), Assembler::AVX_512bit);\n+  load4Xmms(xmm0_3, input, 0, _masm);\n@@ -833,1 +864,1 @@\n-  __ addptr(input, 256);\n+  __ addptr(input, 4 * XMMBYTES);\n@@ -856,1 +887,0 @@\n-\n@@ -873,1 +903,0 @@\n-\n@@ -885,1 +914,0 @@\n-\n@@ -897,1 +925,0 @@\n-\n@@ -909,1 +936,0 @@\n-\n@@ -921,1 +947,0 @@\n-\n@@ -955,1 +980,0 @@\n-\n@@ -967,1 +991,0 @@\n-\n@@ -979,1 +1002,0 @@\n-\n@@ -998,1 +1020,0 @@\n-\n@@ -1010,1 +1031,0 @@\n-\n@@ -1017,1 +1037,0 @@\n-\n@@ -1021,13 +1040,6 @@\n-  __ evmovdqul(Address(highPart, 0), xmm0, Assembler::AVX_512bit);\n-  __ evmovdqul(Address(highPart, 64), xmm1, Assembler::AVX_512bit);\n-  __ evmovdqul(Address(highPart, 128), xmm2, Assembler::AVX_512bit);\n-  __ evmovdqul(Address(highPart, 192), xmm3, Assembler::AVX_512bit);\n-\n-  __ evmovdqul(Address(lowPart, 0), xmm8, Assembler::AVX_512bit);\n-  __ evmovdqul(Address(lowPart, 64), xmm9, Assembler::AVX_512bit);\n-  __ evmovdqul(Address(lowPart, 128), xmm10, Assembler::AVX_512bit);\n-  __ evmovdqul(Address(lowPart, 192), xmm11, Assembler::AVX_512bit);\n-\n-  __ subl(len, 256);\n-  __ addptr(highPart, 256);\n-  __ addptr(lowPart, 256);\n+  store4Xmms(highPart, 0, xmm0_3, _masm);\n+  store4Xmms(lowPart, 0, xmm8_11, _masm);\n+\n+  __ subl(len, 4 * XMMBYTES);\n+  __ addptr(highPart, 4 * XMMBYTES);\n+  __ addptr(lowPart, 4 * XMMBYTES);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_dilithium.cpp","additions":167,"deletions":155,"binary":false,"changes":322,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import sun.security.provider.SHA3.SHAKE128;\n@@ -1320,0 +1319,1 @@\n+        assert coeffs.length == ML_DSA_N;\n@@ -1346,0 +1346,1 @@\n+        assert coeffs.length == ML_DSA_N;\n@@ -1385,0 +1386,1 @@\n+        assert (coeffs1.length == ML_DSA_N) && (coeffs2.length == ML_DSA_N);\n@@ -1415,0 +1417,2 @@\n+        assert (input.length == ML_DSA_N) && (lowPart.length == ML_DSA_N)\n+                && (highPart.length == ML_DSA_N);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}