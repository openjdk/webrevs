{"files":[{"patch":"@@ -144,1 +144,1 @@\n-    size_t live_data_for_evacuation = r->get_live_data_bytes();\n+    const size_t live_data_for_evacuation = r->get_live_data_bytes();\n@@ -172,1 +172,3 @@\n-        \/\/ There is not room to evacuate this region or any that come after it in within the candidates array.\n+        \/\/ There is no room to evacuate this region or any that come after it in within the candidates array.\n+        log_debug(gc, cset)(\"Not enough unfragmented memory (%zu) to hold evacuees (%zu) from region: (%zu)\",\n+                            unfragmented_available, live_data_for_evacuation, r->index());\n@@ -190,1 +192,3 @@\n-        \/\/ There is not room to evacuate this region or any that come after it in within the candidates array.\n+        \/\/ There is no room to evacuate this region or any that come after it in within the candidates array.\n+        log_debug(gc, cset)(\"Not enough unfragmented memory (%zu) to hold evacuees (%zu) from region: (%zu)\",\n+                            unfragmented_available, live_data_for_evacuation, r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -228,3 +228,3 @@\n-      const size_t young_evac_bytes = get_young_bytes_reserved_for_evacuation();\n-      const size_t promote_evac_bytes = get_young_bytes_to_be_promoted();\n-      const size_t old_evac_bytes = get_old_bytes_reserved_for_evacuation();\n+      const size_t young_evac_bytes = get_live_bytes_in_untenurable_regions();\n+      const size_t promote_evac_bytes = get_live_bytes_in_tenurable_regions();\n+      const size_t old_evac_bytes = get_live_bytes_in_old_regions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,2 +112,2 @@\n-  \/\/ Returns the amount of live bytes in young regions in the collection set. It is not known how many of these bytes will be promoted.\n-  inline size_t get_young_bytes_reserved_for_evacuation() const;\n+  \/\/ Returns the amount of live bytes in young regions with an age below the tenuring threshold.\n+  inline size_t get_live_bytes_in_untenurable_regions() const;\n@@ -116,1 +116,1 @@\n-  inline size_t get_old_bytes_reserved_for_evacuation() const;\n+  inline size_t get_live_bytes_in_old_regions() const;\n@@ -118,2 +118,2 @@\n-  \/\/ Returns the amount of live bytes in young regions with an age above the tenuring threshold.\n-  inline size_t get_young_bytes_to_be_promoted() const;\n+  \/\/ Returns the amount of live bytes in young regions with an age at or above the tenuring threshold.\n+  inline size_t get_live_bytes_in_tenurable_regions() const;\n@@ -128,1 +128,1 @@\n-    assert(_preselected_regions != nullptr, \"Missing etsablish after abandon\");\n+    assert(_preselected_regions != nullptr, \"Missing establish after abandon\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-size_t ShenandoahCollectionSet::get_old_bytes_reserved_for_evacuation() const {\n+size_t ShenandoahCollectionSet::get_live_bytes_in_old_regions() const {\n@@ -61,1 +61,1 @@\n-size_t ShenandoahCollectionSet::get_young_bytes_reserved_for_evacuation() const {\n+size_t ShenandoahCollectionSet::get_live_bytes_in_untenurable_regions() const {\n@@ -65,1 +65,1 @@\n-size_t ShenandoahCollectionSet::get_young_bytes_to_be_promoted() const {\n+size_t ShenandoahCollectionSet::get_live_bytes_in_tenurable_regions() const {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -385,1 +385,1 @@\n-  size_t region_size_bytes = ShenandoahHeapRegion::region_size_bytes();\n+  const size_t region_size_bytes = ShenandoahHeapRegion::region_size_bytes();\n@@ -389,1 +389,1 @@\n-  size_t old_evacuated = collection_set->get_old_bytes_reserved_for_evacuation();\n+  const size_t old_evacuated = collection_set->get_live_bytes_in_old_regions();\n@@ -402,0 +402,1 @@\n+    log_debug(gc, cset)(\"Shrinking old evac reserve to match old_evac_commited: \" PROPERFMT, PROPERFMTARGS(old_evacuated_committed));\n@@ -406,1 +407,1 @@\n-  size_t young_advance_promoted = collection_set->get_young_bytes_to_be_promoted();\n+  size_t young_advance_promoted = collection_set->get_live_bytes_in_tenurable_regions();\n@@ -409,1 +410,1 @@\n-  size_t young_evacuated = collection_set->get_young_bytes_reserved_for_evacuation();\n+  size_t young_evacuated = collection_set->get_live_bytes_in_untenurable_regions();\n@@ -527,1 +528,1 @@\n-size_t ShenandoahGeneration::select_aged_regions(size_t old_available) {\n+size_t ShenandoahGeneration::select_aged_regions(const size_t old_promotion_reserve) {\n@@ -540,1 +541,0 @@\n-  size_t old_consumed = 0;\n@@ -563,1 +563,1 @@\n-        \/\/ We prefer to promote this region in place because is has a small amount of garbage and a large usage.\n+        \/\/ We prefer to promote this region in place because it has a small amount of garbage and a large usage.\n@@ -623,0 +623,3 @@\n+\n+  log_info(gc, ergo)(\"Promotion potential of aged regions with sufficient garbage: \" PROPERFMT, PROPERFMTARGS(promo_potential));\n+\n@@ -625,0 +628,1 @@\n+  size_t old_consumed = 0;\n@@ -631,3 +635,3 @@\n-      size_t region_live_data = sorted_regions[i]._live_data;\n-      size_t promotion_need = (size_t) (region_live_data * ShenandoahPromoEvacWaste);\n-      if (old_consumed + promotion_need <= old_available) {\n+      const size_t region_live_data = sorted_regions[i]._live_data;\n+      const size_t promotion_need = (size_t) (region_live_data * ShenandoahPromoEvacWaste);\n+      if (old_consumed + promotion_need <= old_promotion_reserve) {\n@@ -647,3 +651,3 @@\n-    log_debug(gc)(\"Preselected %zu regions containing %zu live bytes,\"\n-                 \" consuming: %zu of budgeted: %zu\",\n-                 selected_regions, selected_live, old_consumed, old_available);\n+    log_debug(gc, ergo)(\"Preselected %zu regions containing \" PROPERFMT \" live data,\"\n+                        \" consuming: \" PROPERFMT \" of budgeted: \" PROPERFMT,\n+                        selected_regions, PROPERFMTARGS(selected_live), PROPERFMTARGS(old_consumed), PROPERFMTARGS(old_promotion_reserve));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  size_t select_aged_regions(size_t old_available);\n+  size_t select_aged_regions(size_t old_promotion_reserve);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,0 @@\n-  size_t initial_capacity_old = max_capacity() - max_capacity_young;\n@@ -270,0 +269,1 @@\n+              \/\/ Shrinking the desired PLAB size may allow us to eke out a small PLAB while staying beneath evacuation reserve.\n@@ -439,2 +439,0 @@\n-  \/\/ New object should fit the PLAB size\n-\n@@ -442,0 +440,1 @@\n+\n@@ -454,1 +453,1 @@\n-  size_t future_size = MIN2(cur_size * 2, plab_max_size());\n+  const size_t future_size = MIN2(cur_size * 2, plab_max_size());\n@@ -458,2 +457,2 @@\n-          \", card_size: %zu, cur_size: %zu, max: %zu\",\n-         future_size, (size_t) CardTable::card_size_in_words(), cur_size, plab_max_size());\n+          \", card_size: %u, cur_size: %zu, max: %zu\",\n+         future_size, CardTable::card_size_in_words(), cur_size, plab_max_size());\n@@ -465,1 +464,1 @@\n-  log_debug(gc, free)(\"Set new PLAB size: %zu\", future_size);\n+  log_debug(gc, plab)(\"Set next PLAB refill size: %zu bytes\", future_size * HeapWordSize);\n@@ -467,0 +466,1 @@\n+\n@@ -470,1 +470,1 @@\n-    log_debug(gc, free)(\"Current PLAB size (%zu) is too small for %zu\", cur_size, size);\n+    log_debug(gc, plab)(\"Current PLAB size (%zu) is too small for %zu\", cur_size * HeapWordSize, size * HeapWordSize);\n@@ -556,0 +556,1 @@\n+    log_debug(gc, plab)(\"Retire PLAB, unexpend unpromoted: %zu\", not_promoted * HeapWordSize);\n@@ -567,2 +568,2 @@\n-    log_debug(gc)(\"retire_plab() is registering remnant of size %zu at \" PTR_FORMAT,\n-                  plab->waste() - original_waste, p2i(top));\n+    log_debug(gc, plab)(\"retire_plab() is registering remnant of size %zu at \" PTR_FORMAT,\n+                        (plab->waste() - original_waste) * HeapWordSize, p2i(top));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1267,1 +1267,1 @@\n-    \/\/ Java threads take this lock while they are being attached and added to the list of thread.\n+    \/\/ Java threads take this lock while they are being attached and added to the list of threads.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,6 +72,0 @@\n-    \/\/ Believe verification following old-gen concurrent mark needs to be different than verification following\n-    \/\/ young-gen concurrent mark, so am commenting this out for now:\n-    \/\/   if (ShenandoahVerify) {\n-    \/\/     heap->verifier()->verify_after_concmark();\n-    \/\/   }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -302,0 +302,2 @@\n+        log_debug(gc, plab)(\"Thread can promote using PLAB of %zu bytes. Expended: %zu, available: %zu\",\n+                            actual_size, get_promoted_expended(), get_promoted_reserve());\n@@ -309,0 +311,2 @@\n+        log_debug(gc, plab)(\"Thread cannot promote using PLAB of %zu bytes. Expended: %zu, available: %zu, mixed evacuations? %s\",\n+                            actual_size, get_promoted_expended(), get_promoted_reserve(), BOOL_TO_STR(ShenandoahHeap::heap()->collection_set()->has_old_regions()));\n@@ -312,0 +316,1 @@\n+      log_debug(gc, plab)(\"Expend shared promotion of %zu bytes\", actual_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-    e.set_collectedOld(cset->get_old_bytes_reserved_for_evacuation());\n-    e.set_collectedPromoted(cset->get_young_bytes_to_be_promoted());\n-    e.set_collectedYoung(cset->get_young_bytes_reserved_for_evacuation());\n+    e.set_collectedOld(cset->get_live_bytes_in_old_regions());\n+    e.set_collectedPromoted(cset->get_live_bytes_in_tenurable_regions());\n+    e.set_collectedYoung(cset->get_live_bytes_in_untenurable_regions());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTrace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -390,7 +390,7 @@\n-          \"expressed as a percentage. The default value 75 denotes that no\" \\\n-          \"more than 75% of the collection set evacuation workload may be \" \\\n-          \"towards evacuation of old-gen heap regions. This limits both the\"\\\n-          \"promotion of aged regions and the compaction of existing old \"   \\\n-          \"regions.  A value of 75 denotes that the total evacuation work\"  \\\n-          \"may increase to up to four times the young gen evacuation work.\" \\\n-          \"A larger value allows quicker promotion and allows\"              \\\n+          \"expressed as a percentage. The default value 75 denotes that \"   \\\n+          \"no more than 75% of the collection set evacuation workload may \" \\\n+          \"be towards evacuation of old-gen heap regions. This limits both \"\\\n+          \"the promotion of aged regions and the compaction of existing \"   \\\n+          \"old regions. A value of 75 denotes that the total evacuation \"   \\\n+          \"work may increase to up to four times the young gen evacuation \" \\\n+          \"work. A larger value allows quicker promotion and allows \"       \\\n@@ -404,1 +404,1 @@\n-          \"replenished.  A value of 0 allows a mixed evacuation to\"         \\\n+          \"replenished.  A value of 0 allows a mixed evacuation to \"        \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}