{"files":[{"patch":"@@ -2075,0 +2075,5 @@\n+size_t G1CollectedHeap::soft_max_capacity() const {\n+  return clamp(align_up(Atomic::load(&SoftMaxHeapSize), HeapAlignment), MinHeapSize,\n+               max_capacity());\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1200,1 +1200,1 @@\n-  \/\/ Print the maximum heap capacity.\n+  \/\/ Returns the maximum heap capacity.\n@@ -1203,0 +1203,3 @@\n+  \/\/ Returns the soft maximum heap capacity.\n+  size_t soft_max_capacity() const;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-  if (_g1h->capacity() <= _g1h->max_capacity() \/ 2) {\n-    threshold *= (double)_g1h->capacity() \/ (double)(_g1h->max_capacity() \/ 2);\n+  if (_g1h->capacity() <= _g1h->soft_max_capacity() \/ 2) {\n+    threshold *= (double)_g1h->capacity() \/ (double)(_g1h->soft_max_capacity() \/ 2);\n@@ -94,0 +94,1 @@\n+  size_t soft_max_capacity = _g1h->soft_max_capacity();\n@@ -95,1 +96,1 @@\n-  if (_g1h->capacity() == _g1h->max_capacity()) {\n+  if (_g1h->capacity() >= soft_max_capacity) {\n@@ -126,1 +127,0 @@\n-    size_t reserved_bytes = _g1h->max_capacity();\n@@ -128,1 +128,1 @@\n-    size_t uncommitted_bytes = reserved_bytes - committed_bytes;\n+    size_t uncommitted_bytes = soft_max_capacity - committed_bytes;\n@@ -246,1 +246,2 @@\n-  \/\/ Should not be greater than the heap max size. No need to adjust\n+  size_t soft_max_capacity = _g1h->soft_max_capacity();\n+  \/\/ Should not be greater than the soft max capacity. No need to adjust\n@@ -249,5 +250,4 @@\n-  minimum_desired_capacity = MIN2(minimum_desired_capacity, MaxHeapSize);\n-  \/\/ Should not be less than the heap min size. No need to adjust it\n-  \/\/ with respect to the heap max size as it's an upper bound (i.e.,\n-  \/\/ we'll try to make the capacity smaller than it, not greater).\n-  maximum_desired_capacity =  MAX2(maximum_desired_capacity, MinHeapSize);\n+  minimum_desired_capacity = MIN2(minimum_desired_capacity, soft_max_capacity);\n+  \/\/ Should not be less than the heap min size, and should not exceed\n+  \/\/ the soft max capacity.\n+  maximum_desired_capacity = clamp(maximum_desired_capacity, MinHeapSize, soft_max_capacity);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -53,0 +53,6 @@\n+size_t G1IHOPControl::default_conc_mark_start_threshold() {\n+  guarantee(_target_occupancy > 0, \"Target occupancy must have been initialized.\");\n+  size_t actual_target_occupancy = MIN2(G1CollectedHeap::heap()->soft_max_capacity(), _target_occupancy);\n+  return (size_t) (_initial_ihop_percent * actual_target_occupancy \/ 100.0);\n+}\n+\n@@ -111,1 +117,1 @@\n-  return (size_t)MIN2(\n+  return (size_t)MIN3(\n@@ -113,0 +119,1 @@\n+    static_cast<double>(G1CollectedHeap::heap()->soft_max_capacity()),\n@@ -145,1 +152,1 @@\n-    return (size_t)(_initial_ihop_percent * _target_occupancy \/ 100.0);\n+    return default_conc_mark_start_threshold();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,4 @@\n+\n+  \/\/ Default non-young occupancy at which concurrent marking should start.\n+  size_t default_conc_mark_start_threshold();\n+\n@@ -95,2 +99,1 @@\n-    guarantee(_target_occupancy > 0, \"Target occupancy must have been initialized.\");\n-    return (size_t) (_initial_ihop_percent * _target_occupancy \/ 100.0);\n+    return default_conc_mark_start_threshold();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test\n+ * @bug 8236073\n+ * @requires vm.gc.G1\n+ * @requires vm.opt.ExplicitGCInvokesConcurrent != true\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx256m -XX:MinHeapSize=4m -XX:MinHeapFreeRatio=99\n+        -XX:MaxHeapFreeRatio=99 gc.g1.TestSoftMaxHeapSize\n+ * @summary SoftMaxHeapSize should limit G1's heap size when resizing.\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.LinkedList;\n+import java.util.List;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+\n+public class TestSoftMaxHeapSize {\n+\n+  private static final int OBJECT_SIZE = 1000;\n+  private static final long ALLOCATED_BYTES = 20_000_000; \/\/ About 20M\n+\n+  \/\/ Uses power-of-two value so it is aligned and is the actual effective value.\n+  private static final long SOFT_MAX_HEAP =\n+      32 * 1024 * 1024; \/\/ 32MiB, leaving ~12MiB headroom above ALLOCATED_BYTES.\n+\n+  private static final List<byte[]> holder = new LinkedList<>();\n+\n+  private static long getCurrentHeapSize() {\n+    return ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getCommitted();\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+\n+    long count = ALLOCATED_BYTES \/ OBJECT_SIZE;\n+    for (long i = 0; i < count; ++i) {\n+      holder.add(new byte[OBJECT_SIZE]);\n+    }\n+\n+    System.gc();\n+    long heapSize = getCurrentHeapSize();\n+    if (heapSize != ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax()) {\n+      throw new RuntimeException(\n+          \"Heap size did not fully expand to Xmx after full GC: heapSize = \" + heapSize);\n+    }\n+\n+    PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+    jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + SOFT_MAX_HEAP, true);\n+\n+    System.gc();\n+    heapSize = getCurrentHeapSize();\n+    if (heapSize != SOFT_MAX_HEAP) {\n+      throw new RuntimeException(\n+          \"Heap size did not shrink to SoftMaxHeapSize after full GC: heapSize = \" + heapSize);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSoftMaxHeapSize.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test id=normal\n+ * @bug 8236073 8352765\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx100m -XX:MinHeapSize=4m -XX:SoftMaxHeapSize=4m\n+        gc.g1.TestSoftMaxHeapSizeNoOOM\n+ * @summary Setting SoftMaxHeapSize to a small value won't trigger\n+ *          OutOfMemoryError for normal allocations.\n+ *\/\n+\n+\/*\n+ * @test id=humongous\n+ * @bug 8236073 8352765\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx100m -XX:MinHeapSize=4m -XX:SoftMaxHeapSize=4m\n+        -Dhumongous=true gc.g1.TestSoftMaxHeapSizeNoOOM\n+ * @summary Setting SoftMaxHeapSize to a small value won't trigger\n+ *          OutOfMemoryError for humongous allocations.\n+ *\/\n+\n+import java.util.ArrayList;\n+\n+public class TestSoftMaxHeapSizeNoOOM {\n+\n+  private static final long ALLOCATED_BYTES = 20_000_000; \/\/ About 20M\n+  private static final int OBJECT_SIZE = 1000;\n+  private static final int ITERATIONS = 100000;\n+  private static final int HUMONGOUS_OBJECT_SIZE = 1_500_000; \/\/ About 1.5M\n+  private static final int HUMONGOUS_ITERATIONS = 1000;\n+\n+  private static final ArrayList<byte[]> holder = new ArrayList<>();\n+\n+  private static void work(int objSize, int iterations) {\n+    long count = ALLOCATED_BYTES \/ objSize;\n+    for (long i = 0; i < count; ++i) {\n+      holder.add(new byte[objSize]);\n+    }\n+    \/\/ Mutate old objects while allocating new objects.\n+    \/\/ This is effective to trigger concurrent collections for G1,\n+    \/\/ and is necessary to reproduce OutOfMemoryError in JDK-8352765.\n+    for (long i = 0; i < iterations; ++i) {\n+      holder.remove(0);\n+      holder.add(new byte[objSize]);\n+    }\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    if (Boolean.getBoolean(\"humongous\")) {\n+      work(HUMONGOUS_OBJECT_SIZE, HUMONGOUS_ITERATIONS);\n+    } else {\n+      work(OBJECT_SIZE, ITERATIONS);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSoftMaxHeapSizeNoOOM.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}