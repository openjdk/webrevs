{"files":[{"patch":"@@ -1200,1 +1200,1 @@\n-  \/\/ Print the maximum heap capacity.\n+  \/\/ Returns the maximum heap capacity.\n@@ -1203,1 +1203,1 @@\n-  \/\/ Print the soft maximum heap capacity.\n+  \/\/ Returns the soft maximum heap capacity.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -117,2 +117,3 @@\n-  return (size_t)MIN2(\n-    G1CollectedHeap::heap()->soft_max_capacity() * (100.0 - safe_total_heap_percentage) \/ 100.0,\n+  return (size_t)MIN3(\n+    G1CollectedHeap::heap()->max_capacity() * (100.0 - safe_total_heap_percentage) \/ 100.0,\n+    static_cast<double>(G1CollectedHeap::heap()->soft_max_capacity()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n- * @requires vm.gc.G1 & vm.opt.ExplicitGCInvokesConcurrent != true\n+ * @requires vm.gc.G1\n+ * @requires vm.opt.ExplicitGCInvokesConcurrent != true\n@@ -45,3 +46,0 @@\n-  private static final long MAX_HEAP_SIZE =\n-      200 * 1024 * 1024; \/\/ 200MiB, must match -Xmx on command line.\n-\n@@ -49,1 +47,1 @@\n-      30 * 1024 * 1024; \/\/ 30MiB, leaving ~10MiB headroom above ALLOCATED_BYTES.\n+      50 * 1024 * 1024; \/\/ 50MiB, leaving ~30MiB headroom above ALLOCATED_BYTES.\n@@ -66,1 +64,1 @@\n-    if (heapSize != MAX_HEAP_SIZE) {\n+    if (heapSize != ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax()) {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSoftMaxHeapSize.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}