{"files":[{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test\n+ * @bug 8236073\n+ * @requires vm.gc.G1 & vm.opt.ExplicitGCInvokesConcurrent != true\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx200m -XX:MinHeapSize=4m -XX:MinHeapFreeRatio=99\n+        -XX:MaxHeapFreeRatio=99 gc.g1.TestSoftMaxHeapSize\n+ * @summary Test that SoftMaxHeapSize could limit G1's heap size when resizing.\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.LinkedList;\n+import java.util.List;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+\n+public class TestSoftMaxHeapSize {\n+\n+  private static final int OBJECT_SIZE = 1000;\n+  private static final long ALLOCATED_BYTES = 20_000_000; \/\/ About 20M\n+  private static final long MAX_HEAP_SIZE =\n+      200 * 1024 * 1024; \/\/ 200MiB, must match -Xmx on command line.\n+\n+  private static final long SOFT_MAX_HEAP =\n+      30 * 1024 * 1024; \/\/ 30MiB, leaving ~10MiB headroom above ALLOCATED_BYTES.\n+\n+  private static final List<byte[]> holder = new LinkedList<>();\n+\n+  private static long getCurrentHeapSize() {\n+    return ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getCommitted();\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+\n+    long count = ALLOCATED_BYTES \/ OBJECT_SIZE;\n+    for (long i = 0; i < count; ++i) {\n+      holder.add(new byte[OBJECT_SIZE]);\n+    }\n+\n+    System.gc();\n+    long heapSize = getCurrentHeapSize();\n+    if (heapSize != MAX_HEAP_SIZE) {\n+      throw new RuntimeException(\n+          \"Heap size did not fully expand to Xmx after full GC: heapSize = \" + heapSize);\n+    }\n+\n+    PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+    jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + SOFT_MAX_HEAP, true);\n+\n+    System.gc();\n+    heapSize = getCurrentHeapSize();\n+    if (heapSize != SOFT_MAX_HEAP) {\n+      throw new RuntimeException(\n+          \"Heap size did not shrink to SoftMaxHeapSize after full GC: heapSize = \" + heapSize);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSoftMaxHeapSize.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test id=normal\n+ * @bug 8236073 8352765\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx100m -XX:MinHeapSize=4m -XX:SoftMaxHeapSize=4m\n+        gc.g1.TestSoftMaxHeapSizeNoOOM\n+ * @summary Test that setting TestSoftMaxHeapSize to a small value won't\n+ *          trigger OutOfMemoryError for normal allocations.\n+ *\/\n+\n+\/*\n+ * @test id=humongous\n+ * @bug 8236073 8352765\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx100m -XX:MinHeapSize=4m -XX:SoftMaxHeapSize=4m\n+        -Dhumongous=true gc.g1.TestSoftMaxHeapSizeNoOOM\n+ * @summary Test that setting TestSoftMaxHeapSize to a small value won't\n+ *          trigger OutOfMemoryError for humongous allocations.\n+ *\/\n+\n+import java.util.ArrayList;\n+\n+public class TestSoftMaxHeapSizeNoOOM {\n+\n+  private static final long ALLOCATED_BYTES = 20_000_000; \/\/ About 20M\n+  private static final int OBJECT_SIZE = 1000;\n+  private static final int ITERATIONS = 100000;\n+  private static final int HUMONGOUS_OBJECT_SIZE = 1_500_000; \/\/ About 1.5M\n+  private static final int HUMONGOUS_ITERATIONS = 1000;\n+\n+  private static final ArrayList<byte[]> holder = new ArrayList<>();\n+\n+  private static void work(int objSize, int iterations) {\n+    long count = ALLOCATED_BYTES \/ objSize;\n+    for (long i = 0; i < count; ++i) {\n+      holder.add(new byte[objSize]);\n+    }\n+    \/\/ Mutate old objects while allocating new objects.\n+    \/\/ This is effective to trigger concurrent collections for G1,\n+    \/\/ and is necessary to reproduce OutOfMemoryError in JDK-8352765.\n+    for (long i = 0; i < iterations; ++i) {\n+      holder.remove(0);\n+      holder.add(new byte[objSize]);\n+    }\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    if (Boolean.getBoolean(\"humongous\")) {\n+      work(HUMONGOUS_OBJECT_SIZE, HUMONGOUS_ITERATIONS);\n+    } else {\n+      work(OBJECT_SIZE, ITERATIONS);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSoftMaxHeapSizeNoOOM.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}