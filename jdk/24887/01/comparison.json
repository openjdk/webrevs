{"files":[{"patch":"@@ -624,1 +624,0 @@\n-            FT_LAST_WRAPPER    = Wrapper.COUNT-1,\n@@ -626,2 +625,2 @@\n-            FT_CHECKED_REF     = FT_LAST_WRAPPER+1,\n-            FT_LIMIT           = FT_LAST_WRAPPER+2;\n+            FT_CHECKED_REF     = Wrapper.VOID.ordinal(),\n+            FT_LIMIT           = Wrapper.COUNT;\n@@ -686,16 +685,13 @@\n-    private static final Wrapper[] ALL_WRAPPERS = Wrapper.values();\n-\n-    private static Kind getFieldKind(boolean isGetter, boolean isVolatile, Wrapper wrapper) {\n-        if (isGetter) {\n-            if (isVolatile) {\n-                switch (wrapper) {\n-                    case BOOLEAN: return GET_BOOLEAN_VOLATILE;\n-                    case BYTE:    return GET_BYTE_VOLATILE;\n-                    case SHORT:   return GET_SHORT_VOLATILE;\n-                    case CHAR:    return GET_CHAR_VOLATILE;\n-                    case INT:     return GET_INT_VOLATILE;\n-                    case LONG:    return GET_LONG_VOLATILE;\n-                    case FLOAT:   return GET_FLOAT_VOLATILE;\n-                    case DOUBLE:  return GET_DOUBLE_VOLATILE;\n-                    case OBJECT:  return GET_REFERENCE_VOLATILE;\n-                }\n+    private static final @Stable Wrapper[] ALL_WRAPPERS = Wrapper.values();\n+\n+    \/\/ Names in kind may overload but differ from their basic type\n+    private static Kind getFieldKind(boolean isVolatile, boolean needsInit, boolean needsCast, Wrapper wrapper) {\n+        if (isVolatile) {\n+            if (needsInit) {\n+                return switch (wrapper) {\n+                    case BYTE -> VOLATILE_FIELD_ACCESS_INIT_B;\n+                    case CHAR -> VOLATILE_FIELD_ACCESS_INIT_C;\n+                    case SHORT -> VOLATILE_FIELD_ACCESS_INIT_S;\n+                    case BOOLEAN -> VOLATILE_FIELD_ACCESS_INIT_Z;\n+                    default -> needsCast ? VOLATILE_FIELD_ACCESS_INIT_CAST : VOLATILE_FIELD_ACCESS_INIT;\n+                };\n@@ -703,11 +699,7 @@\n-                switch (wrapper) {\n-                    case BOOLEAN: return GET_BOOLEAN;\n-                    case BYTE:    return GET_BYTE;\n-                    case SHORT:   return GET_SHORT;\n-                    case CHAR:    return GET_CHAR;\n-                    case INT:     return GET_INT;\n-                    case LONG:    return GET_LONG;\n-                    case FLOAT:   return GET_FLOAT;\n-                    case DOUBLE:  return GET_DOUBLE;\n-                    case OBJECT:  return GET_REFERENCE;\n-                }\n+                return switch (wrapper) {\n+                    case BYTE -> VOLATILE_FIELD_ACCESS_B;\n+                    case CHAR -> VOLATILE_FIELD_ACCESS_C;\n+                    case SHORT -> VOLATILE_FIELD_ACCESS_S;\n+                    case BOOLEAN -> VOLATILE_FIELD_ACCESS_Z;\n+                    default -> needsCast ? VOLATILE_FIELD_ACCESS_CAST : VOLATILE_FIELD_ACCESS;\n+                };\n@@ -716,12 +708,8 @@\n-            if (isVolatile) {\n-                switch (wrapper) {\n-                    case BOOLEAN: return PUT_BOOLEAN_VOLATILE;\n-                    case BYTE:    return PUT_BYTE_VOLATILE;\n-                    case SHORT:   return PUT_SHORT_VOLATILE;\n-                    case CHAR:    return PUT_CHAR_VOLATILE;\n-                    case INT:     return PUT_INT_VOLATILE;\n-                    case LONG:    return PUT_LONG_VOLATILE;\n-                    case FLOAT:   return PUT_FLOAT_VOLATILE;\n-                    case DOUBLE:  return PUT_DOUBLE_VOLATILE;\n-                    case OBJECT:  return PUT_REFERENCE_VOLATILE;\n-                }\n+            if (needsInit) {\n+                return switch (wrapper) {\n+                    case BYTE -> FIELD_ACCESS_INIT_B;\n+                    case CHAR -> FIELD_ACCESS_INIT_C;\n+                    case SHORT -> FIELD_ACCESS_INIT_S;\n+                    case BOOLEAN -> FIELD_ACCESS_INIT_Z;\n+                    default -> needsCast ? FIELD_ACCESS_INIT_CAST : FIELD_ACCESS_INIT;\n+                };\n@@ -729,11 +717,7 @@\n-                switch (wrapper) {\n-                    case BOOLEAN: return PUT_BOOLEAN;\n-                    case BYTE:    return PUT_BYTE;\n-                    case SHORT:   return PUT_SHORT;\n-                    case CHAR:    return PUT_CHAR;\n-                    case INT:     return PUT_INT;\n-                    case LONG:    return PUT_LONG;\n-                    case FLOAT:   return PUT_FLOAT;\n-                    case DOUBLE:  return PUT_DOUBLE;\n-                    case OBJECT:  return PUT_REFERENCE;\n-                }\n+                return switch (wrapper) {\n+                    case BYTE -> FIELD_ACCESS_B;\n+                    case CHAR -> FIELD_ACCESS_C;\n+                    case SHORT -> FIELD_ACCESS_S;\n+                    case BOOLEAN -> FIELD_ACCESS_Z;\n+                    default -> needsCast ? FIELD_ACCESS_CAST : FIELD_ACCESS;\n+                };\n@@ -742,1 +726,22 @@\n-        throw new AssertionError(\"Invalid arguments\");\n+    }\n+\n+    private static String unsafeMethodName(boolean isGetter, boolean isVolatile, Wrapper wrapper) {\n+        var name = switch (wrapper) {\n+            case BOOLEAN -> \"Boolean\";\n+            case BYTE -> \"Byte\";\n+            case CHAR -> \"Char\";\n+            case SHORT -> \"Short\";\n+            case INT -> \"Int\";\n+            case FLOAT -> \"Float\";\n+            case LONG -> \"Long\";\n+            case DOUBLE -> \"Double\";\n+            case OBJECT -> \"Reference\";\n+            case VOID -> throw new InternalError();\n+        };\n+        var sb = new StringBuilder(3 + name.length() + (isVolatile ? 8 : 0))\n+                .append(isGetter ? \"get\" : \"put\")\n+                .append(name);\n+        if (isVolatile) {\n+            sb.append(\"Volatile\");\n+        }\n+        return sb.toString();\n@@ -755,1 +760,3 @@\n-        Kind kind = getFieldKind(isGetter, isVolatile, fw);\n+        String unsafeMethodName = unsafeMethodName(isGetter, isVolatile, fw);\n+        \/\/ isGetter and isStatic is reflected in field type; basic type clash for subwords\n+        Kind kind = getFieldKind(isVolatile, needsInit, needsCast, fw);\n@@ -762,1 +769,1 @@\n-        MemberName linker = new MemberName(Unsafe.class, kind.methodName, linkerType, REF_invokeVirtual);\n+        MemberName linker = new MemberName(Unsafe.class, unsafeMethodName, linkerType, REF_invokeVirtual);\n@@ -820,7 +827,1 @@\n-        LambdaForm form;\n-        if (needsCast || needsInit) {\n-            \/\/ can't use the pre-generated form when casting and\/or initializing\n-            form = LambdaForm.create(ARG_LIMIT, names, RESULT);\n-        } else {\n-            form = LambdaForm.create(ARG_LIMIT, names, RESULT, kind);\n-        }\n+        LambdaForm form = LambdaForm.create(ARG_LIMIT, names, RESULT, kind);\n@@ -831,1 +832,1 @@\n-            StringBuilder nameBuilder = new StringBuilder(kind.methodName);\n+            StringBuilder nameBuilder = new StringBuilder(unsafeMethodName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":65,"deletions":64,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -433,3 +433,1 @@\n-            if (wrapper == Wrapper.VOID) {\n-                continue;\n-            }\n+            int ftype = wrapper == Wrapper.VOID ? DirectMethodHandle.FT_CHECKED_REF : DirectMethodHandle.ftypeKind(wrapper.primitiveType());\n@@ -437,1 +435,0 @@\n-                int ftype = DirectMethodHandle.ftypeKind(wrapper.primitiveType());\n@@ -440,4 +437,4 @@\n-                if (form.kind != LambdaForm.Kind.GENERIC) {\n-                    forms.add(form);\n-                    names.add(form.kind.defaultLambdaName);\n-                }\n+                if (form.kind == GENERIC)\n+                    throw new InternalError(b + \" non-volatile \" + ftype);\n+                forms.add(form);\n+                names.add(form.kind.defaultLambdaName);\n@@ -447,4 +444,4 @@\n-                if (form.kind != LambdaForm.Kind.GENERIC) {\n-                    forms.add(form);\n-                    names.add(form.kind.defaultLambdaName);\n-                }\n+                if (form.kind == GENERIC)\n+                    throw new InternalError(b + \" volatile \" + ftype);\n+                forms.add(form);\n+                names.add(form.kind.defaultLambdaName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -471,18 +471,24 @@\n-            case GET_REFERENCE:             \/\/ fall-through\n-            case GET_BOOLEAN:               \/\/ fall-through\n-            case GET_BYTE:                  \/\/ fall-through\n-            case GET_CHAR:                  \/\/ fall-through\n-            case GET_SHORT:                 \/\/ fall-through\n-            case GET_INT:                   \/\/ fall-through\n-            case GET_LONG:                  \/\/ fall-through\n-            case GET_FLOAT:                 \/\/ fall-through\n-            case GET_DOUBLE:                \/\/ fall-through\n-            case PUT_REFERENCE:             \/\/ fall-through\n-            case PUT_BOOLEAN:               \/\/ fall-through\n-            case PUT_BYTE:                  \/\/ fall-through\n-            case PUT_CHAR:                  \/\/ fall-through\n-            case PUT_SHORT:                 \/\/ fall-through\n-            case PUT_INT:                   \/\/ fall-through\n-            case PUT_LONG:                  \/\/ fall-through\n-            case PUT_FLOAT:                 \/\/ fall-through\n-            case PUT_DOUBLE:                \/\/ fall-through\n+            case FIELD_ACCESS:              \/\/ fall-through\n+            case FIELD_ACCESS_INIT:         \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS:     \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_INIT:\/\/ fall-through\n+            case FIELD_ACCESS_B:              \/\/ fall-through\n+            case FIELD_ACCESS_INIT_B:         \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_B:     \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_INIT_B:\/\/ fall-through\n+            case FIELD_ACCESS_C:              \/\/ fall-through\n+            case FIELD_ACCESS_INIT_C:         \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_C:     \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_INIT_C:\/\/ fall-through\n+            case FIELD_ACCESS_S:              \/\/ fall-through\n+            case FIELD_ACCESS_INIT_S:         \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_S:     \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_INIT_S:\/\/ fall-through\n+            case FIELD_ACCESS_Z:              \/\/ fall-through\n+            case FIELD_ACCESS_INIT_Z:         \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_Z:     \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_INIT_Z:\/\/ fall-through\n+            case FIELD_ACCESS_CAST:              \/\/ fall-through\n+            case FIELD_ACCESS_INIT_CAST:         \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_CAST:     \/\/ fall-through\n+            case VOLATILE_FIELD_ACCESS_INIT_CAST:\/\/ fall-through\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":24,"deletions":18,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -266,36 +266,24 @@\n-        GET_REFERENCE(\"getReference\"),\n-        PUT_REFERENCE(\"putReference\"),\n-        GET_REFERENCE_VOLATILE(\"getReferenceVolatile\"),\n-        PUT_REFERENCE_VOLATILE(\"putReferenceVolatile\"),\n-        GET_INT(\"getInt\"),\n-        PUT_INT(\"putInt\"),\n-        GET_INT_VOLATILE(\"getIntVolatile\"),\n-        PUT_INT_VOLATILE(\"putIntVolatile\"),\n-        GET_BOOLEAN(\"getBoolean\"),\n-        PUT_BOOLEAN(\"putBoolean\"),\n-        GET_BOOLEAN_VOLATILE(\"getBooleanVolatile\"),\n-        PUT_BOOLEAN_VOLATILE(\"putBooleanVolatile\"),\n-        GET_BYTE(\"getByte\"),\n-        PUT_BYTE(\"putByte\"),\n-        GET_BYTE_VOLATILE(\"getByteVolatile\"),\n-        PUT_BYTE_VOLATILE(\"putByteVolatile\"),\n-        GET_CHAR(\"getChar\"),\n-        PUT_CHAR(\"putChar\"),\n-        GET_CHAR_VOLATILE(\"getCharVolatile\"),\n-        PUT_CHAR_VOLATILE(\"putCharVolatile\"),\n-        GET_SHORT(\"getShort\"),\n-        PUT_SHORT(\"putShort\"),\n-        GET_SHORT_VOLATILE(\"getShortVolatile\"),\n-        PUT_SHORT_VOLATILE(\"putShortVolatile\"),\n-        GET_LONG(\"getLong\"),\n-        PUT_LONG(\"putLong\"),\n-        GET_LONG_VOLATILE(\"getLongVolatile\"),\n-        PUT_LONG_VOLATILE(\"putLongVolatile\"),\n-        GET_FLOAT(\"getFloat\"),\n-        PUT_FLOAT(\"putFloat\"),\n-        GET_FLOAT_VOLATILE(\"getFloatVolatile\"),\n-        PUT_FLOAT_VOLATILE(\"putFloatVolatile\"),\n-        GET_DOUBLE(\"getDouble\"),\n-        PUT_DOUBLE(\"putDouble\"),\n-        GET_DOUBLE_VOLATILE(\"getDoubleVolatile\"),\n-        PUT_DOUBLE_VOLATILE(\"putDoubleVolatile\"),\n+        FIELD_ACCESS(\"fieldAccess\"),\n+        FIELD_ACCESS_INIT(\"fieldAccessInit\"),\n+        VOLATILE_FIELD_ACCESS(\"volatileFieldAccess\"),\n+        VOLATILE_FIELD_ACCESS_INIT(\"volatileFieldAccessInit\"),\n+        FIELD_ACCESS_B(\"fieldAccessB\"),\n+        FIELD_ACCESS_INIT_B(\"fieldAccessInitB\"),\n+        VOLATILE_FIELD_ACCESS_B(\"volatileFieldAccessB\"),\n+        VOLATILE_FIELD_ACCESS_INIT_B(\"volatileFieldAccessInitB\"),\n+        FIELD_ACCESS_C(\"fieldAccessC\"),\n+        FIELD_ACCESS_INIT_C(\"fieldAccessInitC\"),\n+        VOLATILE_FIELD_ACCESS_C(\"volatileFieldAccessC\"),\n+        VOLATILE_FIELD_ACCESS_INIT_C(\"volatileFieldAccessInitC\"),\n+        FIELD_ACCESS_S(\"fieldAccessS\"),\n+        FIELD_ACCESS_INIT_S(\"fieldAccessInitS\"),\n+        VOLATILE_FIELD_ACCESS_S(\"volatileFieldAccessS\"),\n+        VOLATILE_FIELD_ACCESS_INIT_S(\"volatileFieldAccessInitS\"),\n+        FIELD_ACCESS_Z(\"fieldAccessZ\"),\n+        FIELD_ACCESS_INIT_Z(\"fieldAccessInitZ\"),\n+        VOLATILE_FIELD_ACCESS_Z(\"volatileFieldAccessZ\"),\n+        VOLATILE_FIELD_ACCESS_INIT_Z(\"volatileFieldAccessInitZ\"),\n+        FIELD_ACCESS_CAST(\"fieldAccessCast\"),\n+        FIELD_ACCESS_INIT_CAST(\"fieldAccessInitCast\"),\n+        VOLATILE_FIELD_ACCESS_CAST(\"volatileFieldAccessCast\"),\n+        VOLATILE_FIELD_ACCESS_INIT_CAST(\"volatileFieldAccessInitCast\"),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":24,"deletions":36,"binary":false,"changes":60,"status":"modified"}]}