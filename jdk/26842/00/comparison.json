{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -361,2 +361,12 @@\n-            List<? extends DocTree> ref2 = transform(tree.reference);\n-            return (equal(ref2, tree.getReference()))\n+            \/\/ Some extra work is required to accommodate various forms of @see tags, as a\n+            \/\/ leading reference affects the position of the label following it (JDK-8356411),\n+            var ref = tree.reference;\n+            var hasReference = !ref.isEmpty() && ref.getFirst().getKind() == DocTree.Kind.REFERENCE;\n+            List<DCTree> transformed  = new ArrayList<>();\n+            if (hasReference) {\n+                transformed.add(ref.getFirst());\n+                transformed.addAll(transform(ref.subList(1, ref.size())));\n+            } else {\n+                transformed.addAll(transform(ref));\n+            }\n+            return (equal(ref, transformed))\n@@ -364,1 +374,1 @@\n-                    : m.at(tree.pos).newSeeTree(ref2);\n+                    : m.at(tree.pos).newSeeTree(transformed);\n","filename":"src\/jdk.internal.md\/share\/classes\/jdk\/internal\/markdown\/MarkdownTransformer.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-    public DocCommentTester(boolean useBreakIterator, boolean useIdentityTtransformer) {\n+    public DocCommentTester(boolean useBreakIterator, boolean useIdentityTransformer) {\n@@ -133,1 +133,1 @@\n-        this.useIdentityTransformer = useIdentityTtransformer;\n+        this.useIdentityTransformer = useIdentityTransformer;\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8298405\n+ * @bug 8298405 8356411\n@@ -662,0 +662,24 @@\n+    \/\/\/ @see Ref label\n+    \/\/\/ @see <a href=\"..\">link<a>\n+    \/\/\/ @see \"Text\"\n+    void seeTags() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: empty\n+  body: empty\n+  block tags: 3\n+    See[SEE, pos:0\n+      reference: 2\n+        Reference[REFERENCE, pos:5, Ref]\n+        RawText[MARKDOWN, pos:9, label]\n+    ]\n+    See[SEE, pos:15\n+      reference: 1\n+        RawText[MARKDOWN, pos:20, <a_href=\"..\">link<a>]\n+    ]\n+    See[SEE, pos:41\n+      reference: 1\n+        Text[TEXT, pos:46, \"Text\"]\n+    ]\n+]\n+*\/\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTest.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8332858\n+ * @bug 8332858 8356411\n@@ -56,0 +56,1 @@\n+        t.testSeeTags();\n@@ -86,0 +87,13 @@\n+    private void testSeeTags() throws Exception {\n+        \/\/ @see \"Text\" does not produce a Markdown text\n+        runTest(\"\"\"\n+                \/\/\/ @see Ref label\n+                \/\/\/ @see <a href=\"..\">link<a>\n+                \/\/\/ @see \"Text\"\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"label\",\n+                \"<a href=\\\"..\\\">link<a>\");\n+    }\n+\n@@ -181,1 +195,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTransformerPositionTest.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"}]}