{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,1 +140,1 @@\n-    if ((UseEmptySlotsInSupers && !super_klass->has_contended_annotations()) || !has_fields) {\n+    if (!super_klass->has_contended_annotations() || !has_fields) {\n@@ -367,14 +367,0 @@\n-  if (!UseEmptySlotsInSupers) {\n-    \/\/ Add an empty slots to align fields of the subclass on a heapOopSize boundary\n-    \/\/ in order to emulate the behavior of the previous algorithm\n-    int align = (b->offset() + b->size()) % heapOopSize;\n-    if (align != 0) {\n-      int sz = heapOopSize - align;\n-      LayoutRawBlock* p = new LayoutRawBlock(LayoutRawBlock::EMPTY, sz);\n-      p->set_offset(b->offset() + b->size());\n-      b->set_next_block(p);\n-      p->set_prev_block(b);\n-      b = p;\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1951,4 +1951,0 @@\n-  product(bool, UseEmptySlotsInSupers, true,                                \\\n-          \"(Deprecated) Allow allocating fields in empty slots of \"         \\\n-          \"super-classes\")                                                  \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8239014\n- * @summary -XX:-UseEmptySlotsInSupers sometime fails to reproduce the layout of the old code\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @requires vm.bits == \"64\" & vm.opt.final.UseCompressedOops == true & vm.gc != \"Z\"\n- * @run main\/othervm -XX:+UseCompressedClassPointers -XX:-UseEmptySlotsInSupers OldLayoutCheck\n- *\/\n-\n-\/*\n- * @test\n- * @requires vm.bits == \"32\"\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run main\/othervm -XX:-UseEmptySlotsInSupers OldLayoutCheck\n- *\/\n-\n-import java.lang.reflect.Field;\n-import java.util.Arrays;\n-import java.util.Comparator;\n-import jdk.internal.misc.Unsafe;\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Platform;\n-\n-public class OldLayoutCheck {\n-\n-    static class LIClass {\n-        public long l;\n-        public int i;\n-    }\n-\n-    \/\/ 32-bit VMs: @0:  8 byte header,  @8: long field, @16:  int field\n-    \/\/ 64-bit VMs: @0: 12 byte header, @12:  int field, @16: long field\n-    static final long INT_OFFSET  = Platform.is64bit() ? 12L : 16L;\n-    static final long LONG_OFFSET = Platform.is64bit() ? 16L :  8L;\n-\n-    static public void main(String[] args) {\n-        Unsafe unsafe = Unsafe.getUnsafe();\n-        Class c = LIClass.class;\n-        Field[] fields = c.getFields();\n-        for (int i = 0; i < fields.length; i++) {\n-            long offset = unsafe.objectFieldOffset(fields[i]);\n-            if (fields[i].getType() == int.class) {\n-                Asserts.assertEquals(offset, INT_OFFSET, \"Misplaced int field\");\n-            } else if (fields[i].getType() == long.class) {\n-                Asserts.assertEquals(offset, LONG_OFFSET, \"Misplaced long field\");\n-            } else {\n-                Asserts.fail(\"Unexpected field type\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/OldLayoutCheck.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"}]}