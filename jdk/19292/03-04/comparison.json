{"files":[{"patch":"@@ -3,1 +3,5 @@\n-import javax.annotation.processing.Processor;\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n@@ -6,0 +10,1 @@\n+import java.util.Set;\n@@ -19,1 +24,0 @@\n-    final String processorName = \"AP\";\n@@ -24,0 +28,4 @@\n+            import java.lang.annotation.ElementType;\n+            import java.lang.annotation.Retention;\n+            import java.lang.annotation.RetentionPolicy;\n+            import java.lang.annotation.Target;\n@@ -32,32 +40,4 @@\n-            }\n-            \"\"\";\n-\n-    final String annotationSource = \"\"\"\n-            import java.lang.annotation.ElementType;\n-            import java.lang.annotation.Retention;\n-            import java.lang.annotation.RetentionPolicy;\n-            import java.lang.annotation.Target;\n-            @Retention(RetentionPolicy.RUNTIME)\n-            @Target(ElementType.METHOD)\n-            public @interface Ann {\n-            }\n-            \"\"\";\n-\n-    final String processorSource = \"\"\"\n-            import module java.base;\n-            import javax.annotation.processing.AbstractProcessor;\n-            import javax.annotation.processing.RoundEnvironment;\n-            import javax.annotation.processing.SupportedAnnotationTypes;\n-            import javax.annotation.processing.SupportedSourceVersion;\n-            import javax.lang.model.element.TypeElement;\n-            import javax.lang.model.SourceVersion;\n-            @SupportedAnnotationTypes(\"*\")\n-            public class AP extends AbstractProcessor {\n-                @Override\n-                public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n-                    return false;\n-                }\n-                @Override\n-                public SourceVersion getSupportedSourceVersion() {\n-                    return SourceVersion.latestSupported();\n-                }\n+              @Retention(RetentionPolicy.RUNTIME)\n+              @Target(ElementType.METHOD)\n+              public @interface Ann {\n+              }\n@@ -77,1 +57,0 @@\n-        var procJarPath = createProcessorJarFile();\n@@ -79,2 +58,0 @@\n-        tb.writeJavaFiles(base, annotationSource);\n-\n@@ -82,1 +59,0 @@\n-                .classpath(procJarPath)\n@@ -84,1 +60,2 @@\n-                        \"-processorpath\", procJarPath.toString()\n+                        \"-processor\", AP.class.getName(),\n+                        \"--enable-preview\"\n@@ -93,11 +70,2 @@\n-    private Path createProcessorJarFile() throws Exception {\n-        var apDir = base;\n-\n-        toolbox.JarTask jarTask = new toolbox.JarTask(tb, processorName + \".jar\");\n-\n-        \/\/ write out META-INF\/services file for the processor\n-        var servicesFile =\n-                apDir.resolve(\"META-INF\")\n-                        .resolve(\"services\")\n-                        .resolve(Processor.class.getCanonicalName());\n-        tb.writeFile(servicesFile, processorName);\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class AP extends AbstractProcessor {\n@@ -105,2 +73,4 @@\n-        \/\/ write out processor source file\n-        tb.writeJavaFiles(apDir, processorSource);\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n@@ -108,5 +78,4 @@\n-        \/\/ Compile the processor\n-        new toolbox.JavacTask(tb)\n-                .files(processorName + \".java\")\n-                .run(Task.Expect.SUCCESS)\n-                .writeAll();\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n@@ -114,3 +83,0 @@\n-        \/\/ Create jar file\n-        jarTask.files(servicesFile.toString(), apDir.resolve(processorName + \".class\").toString()).run();\n-        return base.resolve(processorName + \".jar\");\n","filename":"test\/langtools\/tools\/javac\/annotations\/8332497\/T8332497.java","additions":26,"deletions":60,"binary":false,"changes":86,"status":"modified"}]}