{"files":[{"patch":"@@ -1,114 +1,114 @@\n-import toolbox.*;\r\n-\r\n-import javax.annotation.processing.Processor;\r\n-import java.nio.file.Path;\r\n-import java.nio.file.Paths;\r\n-\r\n-\/**\r\n- * @test\r\n- * @bug 8332497\r\n- * @summary error: javac crashes when annotation processing runs on program with module imports\r\n- * @library \/tools\/lib\r\n- * @modules jdk.compiler\/com.sun.tools.javac.api\r\n- * jdk.compiler\/com.sun.tools.javac.main\r\n- * @build toolbox.JavacTask toolbox.TestRunner toolbox.ToolBox toolbox.Assert toolbox.Task\r\n- * @run main T8332497\r\n- *\/\r\n-public class T8332497 extends TestRunner {\r\n-    final toolbox.ToolBox tb = new ToolBox();\r\n-    final String processorName = \"AP\";\r\n-    final Path base = Paths.get(\".\");\r\n-    final String processedSource = \"\"\"\r\n-            import module java.base;\r\n-            import java.util.List;\r\n-            public class Main {\r\n-              public static void main(String[] args) {\r\n-                List.of();\r\n-              }\r\n-              @Ann\r\n-              private void test() {\r\n-                List.of();\r\n-              }\r\n-            }\r\n-            \"\"\";\r\n-\r\n-    final String annotationSource = \"\"\"\r\n-            import java.lang.annotation.ElementType;\r\n-            import java.lang.annotation.Retention;\r\n-            import java.lang.annotation.RetentionPolicy;\r\n-            import java.lang.annotation.Target;\r\n-            @Retention(RetentionPolicy.RUNTIME)\r\n-            @Target(ElementType.METHOD)\r\n-            public @interface Ann {\r\n-            }\r\n-            \"\"\";\r\n-\r\n-    final String processorSource = \"\"\"\r\n-            import module java.base;\r\n-            import javax.annotation.processing.AbstractProcessor;\r\n-            import javax.annotation.processing.RoundEnvironment;\r\n-            import javax.annotation.processing.SupportedAnnotationTypes;\r\n-            import javax.annotation.processing.SupportedSourceVersion;\r\n-            import javax.lang.model.element.TypeElement;\r\n-            import javax.lang.model.SourceVersion;\r\n-            @SupportedAnnotationTypes(\"*\")\r\n-            @SupportedSourceVersion(SourceVersion.RELEASE_23)\r\n-            public class AP extends AbstractProcessor {\r\n-                @Override\r\n-                public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n-                    return false;\r\n-                }\r\n-            }\r\n-            \"\"\";\r\n-\r\n-    public T8332497() {\r\n-        super(System.err);\r\n-    }\r\n-\r\n-    public static void main(String[] args) throws Exception {\r\n-        var t = new T8332497();\r\n-        t.test();\r\n-    }\r\n-\r\n-    public void test() throws Exception {\r\n-        var procJarPath = createProcessorJarFile();\r\n-        tb.writeJavaFiles(base, processedSource);\r\n-        tb.writeJavaFiles(base, annotationSource);\r\n-\r\n-        new toolbox.JavacTask(tb)\r\n-                .classpath(procJarPath)\r\n-                .options(\r\n-                        \"-processorpath\", procJarPath.toString()\r\n-                )\r\n-                .outdir(base.toString())\r\n-                .files(base.resolve(\"Main.java\"), base.resolve(\"Ann.java\"))\r\n-                .run(Task.Expect.SUCCESS)\r\n-                .writeAll()\r\n-                .getOutputLines(Task.OutputKind.DIRECT);\r\n-    }\r\n-\r\n-    private Path createProcessorJarFile() throws Exception {\r\n-        var apDir = base;\r\n-\r\n-        toolbox.JarTask jarTask = new toolbox.JarTask(tb, processorName + \".jar\");\r\n-\r\n-        \/\/ write out META-INF\/services file for the processor\r\n-        var servicesFile =\r\n-                apDir.resolve(\"META-INF\")\r\n-                        .resolve(\"services\")\r\n-                        .resolve(Processor.class.getCanonicalName());\r\n-        tb.writeFile(servicesFile, processorName);\r\n-\r\n-        \/\/ write out processor source file\r\n-        tb.writeJavaFiles(apDir, processorSource);\r\n-\r\n-        \/\/ Compile the processor\r\n-        new toolbox.JavacTask(tb)\r\n-                .files(processorName + \".java\")\r\n-                .run(Task.Expect.SUCCESS)\r\n-                .writeAll();\r\n-\r\n-        \/\/ Create jar file\r\n-        jarTask.files(servicesFile.toString(), apDir.resolve(processorName + \".class\").toString()).run();\r\n-        return base.resolve(processorName + \".jar\");\r\n-    }\r\n+import toolbox.*;\n+\n+import javax.annotation.processing.Processor;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+\/**\n+ * @test\n+ * @bug 8332497\n+ * @summary error: javac crashes when annotation processing runs on program with module imports\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ * jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.JavacTask toolbox.TestRunner toolbox.ToolBox toolbox.Assert toolbox.Task\n+ * @run main T8332497\n+ *\/\n+public class T8332497 extends TestRunner {\n+    final toolbox.ToolBox tb = new ToolBox();\n+    final String processorName = \"AP\";\n+    final Path base = Paths.get(\".\");\n+    final String processedSource = \"\"\"\n+            import module java.base;\n+            import java.util.List;\n+            public class Main {\n+              public static void main(String[] args) {\n+                List.of();\n+              }\n+              @Ann\n+              private void test() {\n+                List.of();\n+              }\n+            }\n+            \"\"\";\n+\n+    final String annotationSource = \"\"\"\n+            import java.lang.annotation.ElementType;\n+            import java.lang.annotation.Retention;\n+            import java.lang.annotation.RetentionPolicy;\n+            import java.lang.annotation.Target;\n+            @Retention(RetentionPolicy.RUNTIME)\n+            @Target(ElementType.METHOD)\n+            public @interface Ann {\n+            }\n+            \"\"\";\n+\n+    final String processorSource = \"\"\"\n+            import module java.base;\n+            import javax.annotation.processing.AbstractProcessor;\n+            import javax.annotation.processing.RoundEnvironment;\n+            import javax.annotation.processing.SupportedAnnotationTypes;\n+            import javax.annotation.processing.SupportedSourceVersion;\n+            import javax.lang.model.element.TypeElement;\n+            import javax.lang.model.SourceVersion;\n+            @SupportedAnnotationTypes(\"*\")\n+            @SupportedSourceVersion(SourceVersion.RELEASE_23)\n+            public class AP extends AbstractProcessor {\n+                @Override\n+                public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+                    return false;\n+                }\n+            }\n+            \"\"\";\n+\n+    public T8332497() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        var t = new T8332497();\n+        t.test();\n+    }\n+\n+    public void test() throws Exception {\n+        var procJarPath = createProcessorJarFile();\n+        tb.writeJavaFiles(base, processedSource);\n+        tb.writeJavaFiles(base, annotationSource);\n+\n+        new toolbox.JavacTask(tb)\n+                .classpath(procJarPath)\n+                .options(\n+                        \"-processorpath\", procJarPath.toString()\n+                )\n+                .outdir(base.toString())\n+                .files(base.resolve(\"Main.java\"), base.resolve(\"Ann.java\"))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+    }\n+\n+    private Path createProcessorJarFile() throws Exception {\n+        var apDir = base;\n+\n+        toolbox.JarTask jarTask = new toolbox.JarTask(tb, processorName + \".jar\");\n+\n+        \/\/ write out META-INF\/services file for the processor\n+        var servicesFile =\n+                apDir.resolve(\"META-INF\")\n+                        .resolve(\"services\")\n+                        .resolve(Processor.class.getCanonicalName());\n+        tb.writeFile(servicesFile, processorName);\n+\n+        \/\/ write out processor source file\n+        tb.writeJavaFiles(apDir, processorSource);\n+\n+        \/\/ Compile the processor\n+        new toolbox.JavacTask(tb)\n+                .files(processorName + \".java\")\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll();\n+\n+        \/\/ Create jar file\n+        jarTask.files(servicesFile.toString(), apDir.resolve(processorName + \".class\").toString()).run();\n+        return base.resolve(processorName + \".jar\");\n+    }\n","filename":"test\/langtools\/tools\/javac\/annotations\/8332497\/T8332497.java","additions":114,"deletions":114,"binary":false,"changes":228,"status":"modified"}]}