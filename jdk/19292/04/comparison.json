{"files":[{"patch":"@@ -88,0 +88,5 @@\n+    @Override\n+    public void visitModuleImport(JCModuleImport tree) {\n+        scan(tree.module);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeScanner.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+import toolbox.*;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+\n+\/**\n+ * @test\n+ * @bug 8332497\n+ * @summary error: javac crashes when annotation processing runs on program with module imports\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ * jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.JavacTask toolbox.TestRunner toolbox.ToolBox toolbox.Assert toolbox.Task\n+ * @run main T8332497\n+ *\/\n+public class T8332497 extends TestRunner {\n+    final toolbox.ToolBox tb = new ToolBox();\n+    final Path base = Paths.get(\".\");\n+    final String processedSource = \"\"\"\n+            import module java.base;\n+            import java.util.List;\n+            import java.lang.annotation.ElementType;\n+            import java.lang.annotation.Retention;\n+            import java.lang.annotation.RetentionPolicy;\n+            import java.lang.annotation.Target;\n+            public class Main {\n+              public static void main(String[] args) {\n+                List.of();\n+              }\n+              @Ann\n+              private void test() {\n+                List.of();\n+              }\n+              @Retention(RetentionPolicy.RUNTIME)\n+              @Target(ElementType.METHOD)\n+              public @interface Ann {\n+              }\n+            }\n+            \"\"\";\n+\n+    public T8332497() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        var t = new T8332497();\n+        t.test();\n+    }\n+\n+    public void test() throws Exception {\n+        tb.writeJavaFiles(base, processedSource);\n+        new toolbox.JavacTask(tb)\n+                .options(\n+                        \"-processor\", AP.class.getName(),\n+                        \"--enable-preview\"\n+                )\n+                .outdir(base.toString())\n+                .files(base.resolve(\"Main.java\"), base.resolve(\"Ann.java\"))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class AP extends AbstractProcessor {\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n+\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/annotations\/8332497\/T8332497.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}