{"files":[{"patch":"@@ -63,1 +63,0 @@\n-extern int wcanonicalizeWithPrefix(const WCHAR *canonicalPrefix, const WCHAR *pathWithCanonicalPrefix, WCHAR *out, int len);\n@@ -299,35 +298,0 @@\n-JNIEXPORT jstring JNICALL\n-Java_java_io_WinNTFileSystem_canonicalizeWithPrefix0(JNIEnv *env, jobject this,\n-                                                     jstring canonicalPrefixString,\n-                                                     jstring pathWithCanonicalPrefixString)\n-{\n-    jstring rv = NULL;\n-    WCHAR canonicalPath[MAX_PATH_LENGTH];\n-    WITH_UNICODE_STRING(env, canonicalPrefixString, canonicalPrefix) {\n-        WITH_UNICODE_STRING(env, pathWithCanonicalPrefixString, pathWithCanonicalPrefix) {\n-            int len = (int)wcslen(canonicalPrefix) + MAX_PATH;\n-            if (len > MAX_PATH_LENGTH) {\n-                WCHAR *cp = (WCHAR*)malloc(len * sizeof(WCHAR));\n-                if (cp != NULL) {\n-                    if (wcanonicalizeWithPrefix(canonicalPrefix,\n-                                                pathWithCanonicalPrefix,\n-                                                cp, len) >= 0) {\n-                      rv = (*env)->NewString(env, cp, (jsize)wcslen(cp));\n-                    }\n-                    free(cp);\n-                } else {\n-                    JNU_ThrowOutOfMemoryError(env, \"native memory allocation failed\");\n-                }\n-            } else if (wcanonicalizeWithPrefix(canonicalPrefix,\n-                                               pathWithCanonicalPrefix,\n-                                               canonicalPath, MAX_PATH_LENGTH) >= 0) {\n-                rv = (*env)->NewString(env, canonicalPath, (jsize)wcslen(canonicalPath));\n-            }\n-        } END_UNICODE_STRING(env, pathWithCanonicalPrefix);\n-    } END_UNICODE_STRING(env, canonicalPrefix);\n-    if (rv == NULL && !(*env)->ExceptionCheck(env)) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"Bad pathname\");\n-    }\n-    return rv;\n-}\n-\n","filename":"src\/java.base\/windows\/native\/libjava\/WinNTFileSystem_md.c","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -271,58 +271,0 @@\n-\/* Convert a pathname to canonical form.  The input prefix is assumed\n-   to be in canonical form already, and the trailing filename must not\n-   contain any wildcard, dot\/double dot, or other \"tricky\" characters\n-   that are rejected by the canonicalize() routine above.  This\n-   routine is present to allow the canonicalization prefix cache to be\n-   used while still returning canonical names with the correct\n-   capitalization. *\/\n-int\n-wcanonicalizeWithPrefix(WCHAR *canonicalPrefix, WCHAR *pathWithCanonicalPrefix, WCHAR *result, int size)\n-{\n-    WIN32_FIND_DATAW fd;\n-    HANDLE h;\n-    WCHAR *src, *dst, *dend;\n-    WCHAR *pathbuf;\n-    int pathlen;\n-\n-    src = pathWithCanonicalPrefix;\n-    dst = result;        \/* Place results here *\/\n-    dend = dst + size;   \/* Don't go to or past here *\/\n-\n-\n-    if ((pathlen=(int)wcslen(pathWithCanonicalPrefix)) > MAX_PATH - 1) {\n-        pathbuf = getPrefixed(pathWithCanonicalPrefix, pathlen);\n-        h = FindFirstFileW(pathbuf, &fd);    \/* Look up prefix *\/\n-        free(pathbuf);\n-    } else\n-        h = FindFirstFileW(pathWithCanonicalPrefix, &fd);    \/* Look up prefix *\/\n-    if (h != INVALID_HANDLE_VALUE) {\n-        \/* Lookup succeeded; append true name to result and continue *\/\n-        FindClose(h);\n-        if (!(dst = wcp(dst, dend, L'\\0',\n-                        canonicalPrefix,\n-                        canonicalPrefix + wcslen(canonicalPrefix)))) {\n-            return -1;\n-        }\n-        if (!(dst = wcp(dst, dend, L'\\\\',\n-                        fd.cFileName,\n-                        fd.cFileName + wcslen(fd.cFileName)))) {\n-            return -1;\n-        }\n-    } else {\n-        if (!lastErrorReportable()) {\n-            if (!(dst = wcp(dst, dend, L'\\0', src, src + wcslen(src)))) {\n-                return -1;\n-            }\n-        } else {\n-            return -1;\n-        }\n-    }\n-\n-    if (dst >= dend) {\n-        errno = ENAMETOOLONG;\n-        return -1;\n-    }\n-    *dst = L'\\0';\n-    return 0;\n-}\n-\n","filename":"src\/java.base\/windows\/native\/libjava\/canonicalize_md.c","additions":0,"deletions":58,"binary":false,"changes":58,"status":"modified"}]}