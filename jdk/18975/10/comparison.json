{"files":[{"patch":"@@ -156,1 +156,1 @@\n-  E first() const {\n+  E& first() {\n@@ -161,1 +161,1 @@\n-  E top() const {\n+  E const& first() const {\n@@ -163,1 +163,15 @@\n-    return _data[_len-1];\n+    return _data[0];\n+  }\n+\n+  E& top() {\n+    assert(_len > 0, \"empty\");\n+    return _data[_len - 1];\n+  }\n+\n+  E const& top() const {\n+    assert(_len > 0, \"empty\");\n+    return _data[_len - 1];\n+  }\n+\n+  E& last() {\n+    return top();\n@@ -166,1 +180,1 @@\n-  E last() const {\n+  E const& last() const {\n@@ -411,1 +425,1 @@\n-  E at_grow(int i, const E& fill = E()) {\n+  E& at_grow(int i, const E& fill = E()) {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -666,0 +666,27 @@\n+\n+TEST(GrowableArrayCHeap, returning_references_works_as_expected) {\n+  GrowableArrayCHeap<int, mtTest> arr(8, 8, -1); \/\/ Pre-fill with 8 -1s\n+  int& x = arr.at_grow(9, -1);\n+  EXPECT_EQ(-1, arr.at(9));\n+  EXPECT_EQ(-1, x);\n+  x = 2;\n+  EXPECT_EQ(2, arr.at(9));\n+  int& x2 = arr.top();\n+  EXPECT_EQ(2, arr.at(9));\n+  x2 = 5;\n+  EXPECT_EQ(5, arr.at(9));\n+\n+  int y = arr.at_grow(10, -1);\n+  EXPECT_EQ(-1, arr.at(10));\n+  y = arr.top();\n+  EXPECT_EQ(-1, arr.at(10));\n+\n+  GrowableArrayCHeap<int, mtTest> arr2(1, 1, -1);\n+  int& first = arr2.first();\n+  int& last = arr2.last();\n+  EXPECT_EQ(-1, first);\n+  EXPECT_EQ(-1, last);\n+  first = 5;\n+  EXPECT_EQ(5, first);\n+  EXPECT_EQ(5, last);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}