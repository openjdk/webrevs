{"files":[{"patch":"@@ -1089,2 +1089,1 @@\n-    \/\/ Note: Tracker contains a ThreadCritical.\n-    Tracker tkr(Tracker::release);\n+    ThreadCritical tc;\n@@ -1093,1 +1092,1 @@\n-      tkr.record((address)addr, bytes);\n+      MemTracker::record_virtual_memory_release((address)addr, bytes);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1806,1 +1806,1 @@\n-    Tracker tkr(Tracker::release);\n+    ThreadCritical tc;\n@@ -1808,1 +1808,1 @@\n-    tkr.record((address)addr, bytes);\n+    MemTracker::record_virtual_memory_release((address)addr, bytes);\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -286,5 +286,3 @@\n-  if (MemTracker::enabled()) {\n-    const uintptr_t addr = XAddress::marked0(offset);\n-    Tracker tracker(Tracker::uncommit);\n-    tracker.record((address)addr, size);\n-  }\n+  const uintptr_t addr = XAddress::marked0(offset);\n+  ThreadCritical tc;\n+  MemTracker::record_virtual_memory_uncommit((address)addr, size);\n","filename":"src\/hotspot\/share\/gc\/x\/xPhysicalMemory.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -76,4 +76,2 @@\n-      if (MemTracker::enabled()) {\n-        Tracker tracker(Tracker::uncommit);\n-        tracker.record((address)sub_range_addr, sub_range_size);\n-      }\n+      ThreadCritical tc;\n+      MemTracker::record_virtual_memory_uncommit((address)sub_range_addr, sub_range_size);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,14 +98,0 @@\n-void Tracker::record(address addr, size_t size) {\n-  if (MemTracker::tracking_level() < NMT_summary) return;\n-  switch(_type) {\n-    case uncommit:\n-      VirtualMemoryTracker::remove_uncommitted_region(addr, size);\n-      break;\n-    case release:\n-      VirtualMemoryTracker::remove_released_region(addr, size);\n-        break;\n-    default:\n-      ShouldNotReachHere();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/nmt\/memTracker.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,19 +44,0 @@\n-\/\/ Tracker is used for guarding 'release' semantics of virtual memory operation, to avoid\n-\/\/ the other thread obtains and records the same region that is just 'released' by current\n-\/\/ thread but before it can record the operation.\n-class Tracker : public StackObj {\n- public:\n-  enum TrackerType {\n-     uncommit,\n-     release\n-  };\n-\n- public:\n-  Tracker(enum TrackerType type) : _type(type) { }\n-  void record(address addr, size_t size);\n- private:\n-  enum TrackerType  _type;\n-  \/\/ Virtual memory tracking data structures are protected by ThreadCritical lock.\n-  ThreadCritical    _tc;\n-};\n-\n@@ -151,0 +132,16 @@\n+  static inline void record_virtual_memory_release(address addr, size_t size) {\n+    assert_post_init();\n+    if (!enabled()) return;\n+    if (addr != nullptr) {\n+      VirtualMemoryTracker::remove_released_region((address)addr, size);\n+    }\n+  }\n+\n+  static inline void record_virtual_memory_uncommit(address addr, size_t size) {\n+    assert_post_init();\n+    if (!enabled()) return;\n+    if (addr != nullptr) {\n+      VirtualMemoryTracker::remove_uncommitted_region((address)addr, size);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":16,"deletions":19,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2066,1 +2066,1 @@\n-    Tracker tkr(Tracker::uncommit);\n+    ThreadCritical tc;\n@@ -2069,1 +2069,1 @@\n-      tkr.record((address)addr, bytes);\n+      MemTracker::record_virtual_memory_uncommit((address)addr, bytes);\n@@ -2081,2 +2081,1 @@\n-    \/\/ Note: Tracker contains a ThreadCritical.\n-    Tracker tkr(Tracker::release);\n+    ThreadCritical tc;\n@@ -2085,1 +2084,1 @@\n-      tkr.record((address)addr, bytes);\n+      MemTracker::record_virtual_memory_release((address)addr, bytes);\n@@ -2172,1 +2171,1 @@\n-    Tracker tkr(Tracker::release);\n+    ThreadCritical tc;\n@@ -2175,1 +2174,1 @@\n-      tkr.record((address)addr, bytes);\n+      MemTracker::record_virtual_memory_release((address)addr, bytes);\n@@ -2208,2 +2207,1 @@\n-    \/\/ Note: Tracker contains a ThreadCritical.\n-    Tracker tkr(Tracker::release);\n+    ThreadCritical tc;\n@@ -2212,1 +2210,1 @@\n-      tkr.record((address)addr, bytes);\n+      MemTracker::record_virtual_memory_release((address)addr, bytes);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"}]}