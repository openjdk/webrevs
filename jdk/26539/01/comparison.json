{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,1 +152,1 @@\n-    static boolean isKnownType(Class<?> type) {\n+    public static boolean isKnownType(Class<?> type) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-        for (Field field : Utils.getVisibleEventFields(clazz)) {\n+        for (Field field : Utils.getEventFields(clazz)) {\n@@ -346,3 +346,1 @@\n-            if (vd != null) {\n-                type.add(vd);\n-            }\n+            type.add(vd);\n@@ -387,7 +385,0 @@\n-        int mod = field.getModifiers();\n-        if (Modifier.isTransient(mod)) {\n-            return null;\n-        }\n-        if (Modifier.isStatic(mod)) {\n-            return null;\n-        }\n@@ -395,3 +386,0 @@\n-        if (!Type.isKnownType(fieldType)) {\n-            return null;\n-        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/TypeLibrary.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-    public static List<Field> getVisibleEventFields(Class<?> clazz) {\n+    public static List<Field> getEventFields(Class<?> clazz) {\n@@ -218,3 +218,5 @@\n-                \/\/ skip private field in base classes\n-                if (c == clazz || !Modifier.isPrivate(field.getModifiers())) {\n-                    fields.add(field);\n+                if (isSupportedField(field)) {\n+                    \/\/ skip private field in base classes\n+                    if (c == clazz || !Modifier.isPrivate(field.getModifiers())) {\n+                        fields.add(field);\n+                    }\n@@ -314,3 +316,0 @@\n-        Class<?> cMirror = Objects.requireNonNull(mirror);\n-        Class<?> cReal = Objects.requireNonNull(real);\n-\n@@ -318,5 +317,8 @@\n-        while (cMirror != null) {\n-            for (Field f : cMirror.getDeclaredFields()) {\n-                if (isSupportedType(f.getType())) {\n-                    mirrorFields.put(f.getName(), f);\n-                }\n+        for (Field f : mirror.getDeclaredFields()) {\n+            mirrorFields.put(f.getName(), f);\n+        }\n+        for (Field realField : Utils.getEventFields(real)) {\n+            String fieldName = realField.getName();\n+            Field mirrorField = mirrorFields.remove(fieldName);\n+            if (mirrorField == null) {\n+                throw new InternalError(\"Missing mirror field for \" + real.getName() + \"#\" + fieldName);\n@@ -324,18 +326,5 @@\n-            cMirror = cMirror.getSuperclass();\n-        }\n-        while (cReal != null) {\n-            for (Field realField : cReal.getDeclaredFields()) {\n-                if (isSupportedType(realField.getType()) && !realField.isSynthetic()) {\n-                    String fieldName = realField.getName();\n-                    Field mirrorField = mirrorFields.get(fieldName);\n-                    if (mirrorField == null) {\n-                        throw new InternalError(\"Missing mirror field for \" + cReal.getName() + \"#\" + fieldName);\n-                    }\n-                    if (realField.getType() != mirrorField.getType()) {\n-                        throw new InternalError(\"Incorrect type for mirror field \" + fieldName);\n-                    }\n-                    if (realField.getModifiers() != mirrorField.getModifiers()) {\n-                        throw new InternalError(\"Incorrect modifier for mirror field \" + fieldName);\n-                    }\n-                    mirrorFields.remove(fieldName);\n-                }\n+            if (realField.getType() != mirrorField.getType()) {\n+                throw new InternalError(\"Incorrect type for mirror field \" + fieldName);\n+            }\n+            if (realField.getModifiers() != mirrorField.getModifiers()) {\n+                throw new InternalError(\"Incorrect modifier for mirror field \" + fieldName);\n@@ -343,1 +332,0 @@\n-            cReal = cReal.getSuperclass();\n@@ -345,1 +333,0 @@\n-\n@@ -351,2 +338,3 @@\n-    private static boolean isSupportedType(Class<?> type) {\n-        if (Modifier.isTransient(type.getModifiers()) || Modifier.isStatic(type.getModifiers())) {\n+    public static boolean isSupportedField(Field field) {\n+        int modifiers = field.getModifiers();\n+        if (Modifier.isTransient(modifiers) || Modifier.isStatic(modifiers)) {\n@@ -355,1 +343,1 @@\n-        return Type.isValidJavaFieldType(type.getName());\n+        return Type.isKnownType(field.getType());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Utils.java","additions":23,"deletions":35,"binary":false,"changes":58,"status":"modified"}]}