{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import jdk.jfr.internal.settings.MethodSetting;\n@@ -238,1 +239,1 @@\n-        if (MethodTimingEvent.enabled()) {\n+        if (MethodSetting.isInitialized() && MethodTimingEvent.enabled()) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JDKEvents.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    private volatile static boolean initialized;\n@@ -56,0 +57,1 @@\n+        ensureInitialized();\n@@ -58,0 +60,13 @@\n+\n+    \/\/ Expected to be called when holding external lock, so no extra\n+    \/\/ synchronization is required here.\n+    private static void ensureInitialized() {\n+        if (!initialized) {\n+            PlatformTracer.initialize();\n+            initialized = true;\n+        }\n+    }\n+\n+    public static boolean isInitialized() {\n+        return initialized;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/MethodSetting.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-    private static boolean initialized;\n-\n@@ -166,1 +164,0 @@\n-        ensureInitialized();\n@@ -259,8 +256,0 @@\n-    \/\/ Expected to be called when holding external lock, so no extra\n-    \/\/ synchronization is required here.\n-    private static void ensureInitialized() {\n-        if (!initialized) {\n-            initialize();\n-            initialized = true;\n-        }\n-    }\n@@ -281,1 +270,1 @@\n-    private static void initialize() {\n+    public static void initialize() {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/PlatformTracer.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.event.tracing;\n+\n+import jdk.internal.misc.Unsafe;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Recording;\n+\/**\n+* @test\n+* @summary Tests that PlatformTracer is not initialized if a method filter has not been set.\n+* @requires vm.flagless\n+* @requires vm.hasJFR\n+* @modules java.base\/jdk.internal.misc jdk.jfr\/jdk.jfr.internal.tracing\n+* @library \/test\/lib\n+* @run main\/othervm -XX:StartFlightRecording jdk.jfr.event.tracing.TestLazyPlatformTracer\n+*\/\n+public class TestLazyPlatformTracer {\n+\n+    public static void main(String... args) throws Exception {\n+        \/\/ Stop recording so end chunk events are emitted\n+        FlightRecorder.getFlightRecorder().getRecordings().getFirst().stop();\n+        if (!Unsafe.getUnsafe().shouldBeInitialized(jdk.jfr.internal.tracing.PlatformTracer.class)) {\n+            throw new AssertionError(\"PlatformTracer should not have been initialized\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/tracing\/TestLazyPlatformTracer.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}