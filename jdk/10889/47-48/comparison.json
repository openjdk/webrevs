{"files":[{"patch":"@@ -104,2 +104,0 @@\n- * @see SimpleProcessor\n- * @see StringProcessor\n@@ -411,1 +409,1 @@\n-     * This {@link StringProcessor} instance is conventionally used for the string interpolation\n+     * This {@link Processor} instance is conventionally used for the string interpolation\n@@ -429,1 +427,1 @@\n-    StringProcessor STR = StringTemplate::interpolate;\n+    Processor<String, RuntimeException> STR = StringTemplate::interpolate;\n@@ -432,1 +430,1 @@\n-     * This {@link SimpleProcessor} instance is conventionally used to indicate that the\n+     * This {@link Processor} instance is conventionally used to indicate that the\n@@ -447,1 +445,1 @@\n-    SimpleProcessor<StringTemplate> RAW = st -> st;\n+    Processor<StringTemplate, RuntimeException> RAW = st -> st;\n@@ -516,22 +514,0 @@\n-     * The {@link FunctionalInterface} {@link SimpleProcessor} is supplied to avoid\n-     * the use of checked exceptions;\n-     * {@snippet :\n-     * SimpleProcessor<String> processor = st -> {\n-     *     List<String> fragments = st.fragments();\n-     *     List<Object> values = st.values();\n-     *     \/\/ check or manipulate the fragments and\/or values\n-     *     ...\n-     *     return StringTemplate.interpolate(fragments, values);\n-     * };\n-     * }\n-     * The {@link FunctionalInterface} {@link StringProcessor} is supplied if\n-     * the processor returns {@link String};\n-     * {@snippet :\n-     * StringProcessor processor = st -> {\n-     *     List<String> fragments = st.fragments();\n-     *     List<Object> values = st.values();\n-     *     \/\/ check or manipulate the fragments and\/or values\n-     *     ...\n-     *     return StringTemplate.interpolate(fragments, values);\n-     * };\n-     * }\n@@ -541,1 +517,1 @@\n-     * StringProcessor processor = StringTemplate::interpolate;\n+     * Processor<String, RuntimeException> processor = StringTemplate::interpolate;\n@@ -546,1 +522,1 @@\n-     * SimpleProcessor<JSONObject> jsonProcessor = st -> new JSONObject(st.interpolate());\n+     * Processor<JSONObject, RuntimeException> jsonProcessor = st -> new JSONObject(st.interpolate());\n@@ -553,2 +529,0 @@\n-     * @see SimpleProcessor\n-     * @see StringProcessor\n@@ -578,0 +552,29 @@\n+        \/**\n+         * This factory method can be used to create a {@link Processor} containing a\n+         * {@link Processor#process} method derived from a lambda expression. As an example;\n+         * {@snippet :\n+         * Processor<String, RuntimeException> mySTR = Processor.of(StringTemplate::interpolate);\n+         * int x = 10;\n+         * int y = 20;\n+         * String str = mySTR.\"\\{x} + \\{y} = \\{x + y}\";\n+         * }\n+         * The result type of the constructed {@link Processor} may be derived from\n+         * the lambda expression, thus this method may be used in a var\n+         * statement. For example, {@code mySTR} from above can also be declared using;\n+         * {@snippet :\n+         * var mySTR = Processor.of(StringTemplate::interpolate);\n+         * }\n+         * {@link RuntimeException} is the assumed exception thrown type.\n+         *\n+         * @param process a function that takes a {@link StringTemplate} as an argument\n+         *                and returns the inferred result type\n+         *\n+         * @return a {@link Processor}\n+         *\n+         * @param <R>  Processor's process result type\n+         * @param <E>  Exception thrown type\n+         *\/\n+        static <R, E extends Throwable> Processor<R, E> of(Function<StringTemplate, R> process) {\n+            return process::apply;\n+        }\n+\n@@ -610,80 +613,0 @@\n-    \/**\n-     * This interface is used to implement template processors that do not throw checked\n-     * exceptions. Any implementation must supply a\n-     * {@link SimpleProcessor#process(StringTemplate)} method that constructs a result\n-     * from the information provided by the supplied {@link StringTemplate} instance.\n-     * <p>\n-     * For example:\n-     * {@snippet :\n-     * SimpleProcessor<Integer> processor = st -> {\n-     *     String interpolation = st.interpolate();\n-     *     return Integer.valueOf(interpolation);\n-     * };\n-     * }\n-     *\n-     * @param <R>  Processor's process result type.\n-     *\n-     * @see Processor\n-     * @see StringProcessor\n-     * @see StringTemplate\n-     *\n-     * @since 21\n-     *\n-     * @implNote It is recommended that {@link StringProcessor} be used instead of\n-     * {@code SimpleProcessor<String>} when the result type is {@link String}.\n-     *\n-     * @jls 15.8.6 Process Template Expressions\n-     *\/\n-    @PreviewFeature(feature=PreviewFeature.Feature.STRING_TEMPLATES)\n-    @FunctionalInterface\n-    public interface SimpleProcessor<R> extends Processor<R, RuntimeException> {\n-        \/**\n-         * Constructs a result based on the template fragments and values in the\n-         * supplied {@link StringTemplate stringTemplate} instance.\n-         *\n-         * @param stringTemplate  a {@link StringTemplate} instance\n-         *\n-         * @return constructed object of type R\n-         *\/\n-        @Override\n-        R process(StringTemplate stringTemplate);\n-    }\n-\n-    \/**\n-     * This interface is used to implement template processors that only produce {@link String}\n-     * results. Any implementation must supply a\n-     * {@link StringProcessor#process(StringTemplate)} method that constructs a result\n-     * from the information provided by the supplied {@link StringTemplate} instance.\n-     * <p>\n-     * For example:\n-     * {@snippet :\n-     * StringProcessor processor = st -> st.interpolate().toUpperCase();\n-     * }\n-     *\n-     * @see Processor\n-     * @see SimpleProcessor\n-     * @see StringTemplate\n-     *\n-     * @since 21\n-     *\n-     * @implNote Implementations using {@link StringProcessor} are equivalent to implementations using\n-     * {@code TemplateProcessor<String>} or {@code ValidatingProcessor<String, RuntimeException>}.\n-     * However, StringProcessor is cleaner and easier to understand.\n-     *\n-     * @jls 15.8.6 Process Template Expressions\n-     *\/\n-    @PreviewFeature(feature=PreviewFeature.Feature.STRING_TEMPLATES)\n-    @FunctionalInterface\n-    public interface StringProcessor extends SimpleProcessor<String> {\n-        \/**\n-         * Constructs a {@link String} based on the template fragments and values in the\n-         * supplied {@code stringTemplate} object.\n-         *\n-         * @param stringTemplate  a {@link StringTemplate} instance\n-         *\n-         * @return constructed {@link String}\n-         *\/\n-        @Override\n-        String process(StringTemplate stringTemplate);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringTemplate.java","additions":35,"deletions":112,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -1046,1 +1046,1 @@\n-     * to MAX_INDY_CONCAT_ARG_SLOTS.\n+     * to {@value #MAX_INDY_CONCAT_ARG_SLOTS}.\n@@ -1051,1 +1051,1 @@\n-     * @return {@link MethodHandle}\n+     * @return the {@link MethodHandle} for concatenation\n@@ -1169,1 +1169,1 @@\n-     * {@link java.lang.invoke.StringConcatFactory#makeConcatWithTemplate}\n+     * {@link #makeConcatWithTemplate}\n@@ -1246,1 +1246,1 @@\n-     * {@link java.lang.invoke.StringConcatFactory#makeConcatWithTemplateCluster}\n+     * {@link #makeConcatWithTemplateCluster}\n@@ -1254,1 +1254,1 @@\n-     * @return {@link MethodHandle}\n+     * @return the {@link MethodHandle} for concatenation\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-                methodTypeCache = ReferencedKeyMap.create(() -> new ConcurrentHashMap<>());\n+                methodTypeCache = ReferencedKeyMap.create(ConcurrentHashMap::new);\n@@ -421,1 +421,1 @@\n-            this.primitives = createPrimitivesArray(primitiveCount );\n+            this.primitives = createPrimitivesArray(primitiveCount);\n@@ -776,1 +776,1 @@\n-        static CarrierElements of(Class < ? >...ptypes) {\n+        static CarrierElements of(Class<?>...ptypes) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/Carriers.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-     * {@return the value of the unwrapped key.}\n+     * {@return the value of the unwrapped key}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ReferenceKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -127,3 +126,2 @@\n-    create(boolean isSoft, Supplier<Map<?, ?>> supplier) {\n-        return new ReferencedKeyMap<K, V>(isSoft,\n-                (Map<ReferenceKey<K>, V>)supplier.get());\n+    create(boolean isSoft, Supplier<Map<ReferenceKey<K>, V>> supplier) {\n+        return new ReferencedKeyMap<K, V>(isSoft, supplier.get());\n@@ -143,1 +141,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -145,3 +142,2 @@\n-    create(Supplier<Map<?, ?>> supplier) {\n-        return new ReferencedKeyMap<K, V>(false,\n-                (Map<ReferenceKey<K>, V>)supplier.get());\n+    create(Supplier<Map<ReferenceKey<K>, V>> supplier) {\n+        return new ReferencedKeyMap<K, V>(false, supplier.get());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ReferencedKeyMap.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-     * @param type       method type\n+     * @param type       values types with StringTemplate return\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/StringTemplateImplFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.StringTemplate.StringProcessor;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/TemplateSupport.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.StringTemplate.Processor;\n@@ -32,1 +33,0 @@\n-import java.lang.StringTemplate.StringProcessor;\n@@ -38,1 +38,1 @@\n- * This {@link StringProcessor} constructs a {@link String} result using\n+ * This {@link Processor} constructs a {@link String} result using\n@@ -95,1 +95,1 @@\n- * @see StringProcessor\n+ * @see Processor\n@@ -98,1 +98,1 @@\n-public final class FormatProcessor implements StringProcessor, Linkage {\n+public final class FormatProcessor implements Processor<String, RuntimeException>, Linkage {\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatProcessor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    static void  mapTest(boolean isSoft, Supplier<Map<?, ?>> supplier) {\n+    static void  mapTest(boolean isSoft, Supplier<Map<ReferenceKey<Long>, String>> supplier) {\n","filename":"test\/jdk\/java\/lang\/runtime\/ReferencedKeyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-    public static final SimpleProcessor<StringTemplate> STRINGIFY = st -> {\n+    public static final Processor<StringTemplate, RuntimeException> STRINGIFY = st -> {\n@@ -387,1 +387,1 @@\n-    public static final SimpleProcessor<StringTemplate> UPPER = st -> {\n+    public static final Processor<StringTemplate, RuntimeException> UPPER = st -> {\n@@ -396,1 +396,1 @@\n-    public static final StringProcessor CHAIN = st -> {\n+    public static final Processor<String, RuntimeException> CHAIN = st -> {\n@@ -463,1 +463,1 @@\n-    static SimpleProcessor<String> processor2 = st -> st.interpolate();\n+    static Processor<String, RuntimeException> processor2 = st -> st.interpolate();\n@@ -465,1 +465,1 @@\n-    static StringProcessor processor3 = st -> st.interpolate();\n+    static Processor<String, RuntimeException> processor3 = st -> st.interpolate();\n@@ -467,1 +467,1 @@\n-    static StringProcessor processor4 = st ->\n+    static Processor<String, RuntimeException> processor4 = st ->\n","filename":"test\/jdk\/java\/lang\/template\/Basic.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.lang.StringTemplate;\n-import java.lang.StringTemplate.StringProcessor;\n@@ -55,1 +53,1 @@\n-    static void suite(StringProcessor fmt) {\n+    static void suite(FormatProcessor fmt) {\n","filename":"test\/jdk\/java\/lang\/template\/FormatterBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- \/\/ key: compiler.err.cant.resolve.location\n@@ -30,1 +29,0 @@\n- \/\/ key: compiler.misc.location\n@@ -34,0 +32,1 @@\n+import java.lang.StringTemplate.Processor;\n@@ -37,1 +36,1 @@\n-        SimpleProcessor processor = ts -> ts.interpolate();\n+        Processor processor = ts -> ts.interpolate();\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/StringTemplateRawProcessor.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}