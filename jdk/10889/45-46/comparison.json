{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.Object;\n@@ -44,1 +43,0 @@\n- *\n@@ -56,1 +54,1 @@\n- * first produces an instance of {@link StringTemplate}, representing the template\n+ * first produces an instance of {@link StringTemplate}, representing the right hand side\n@@ -69,2 +67,2 @@\n- * The value of {@code fragments} will be equivalent to {@code List.of(\"\", \" + \", \" = \", \"\")},\n- * which includes the empty first and last fragments. The {@code values} will be the\n+ * {@code fragments} will be equivalent to {@code List.of(\"\", \" + \", \" = \", \"\")},\n+ * which includes the empty first and last fragments. {@code values} will be the\n@@ -431,1 +429,1 @@\n-    static final StringProcessor STR = StringTemplate::interpolate;\n+    StringProcessor STR = StringTemplate::interpolate;\n@@ -449,1 +447,1 @@\n-    static final SimpleProcessor<StringTemplate> RAW = st -> st;\n+    SimpleProcessor<StringTemplate> RAW = st -> st;\n@@ -455,1 +453,1 @@\n-     *\n+     * <p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringTemplate.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-    static StringTemplate newStringTemplate(String[] fragments, Object[] values) {\n+    static StringTemplate newTrustedStringTemplate(String[] fragments, Object[] values) {\n@@ -169,1 +169,1 @@\n-    static StringTemplate newStringTemplate(List<String> fragments, Object[] values) {\n+    static StringTemplate newTrustedStringTemplate(List<String> fragments, Object[] values) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/StringTemplateImplFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-     * {@link MethodHandle} to {@link TemplateRuntime#fromArrays}.\n+     * {@link MethodHandle} to {@link TemplateRuntime#newTrustedStringTemplate}.\n@@ -74,1 +74,1 @@\n-    private static final MethodHandle FROM_ARRAYS;\n+    private static final MethodHandle NEW_TRUSTED_STRING_TEMPLATE;\n@@ -85,1 +85,2 @@\n-            DEFAULT_PROCESS_MH = lookup.findStatic(TemplateRuntime.class, \"defaultProcess\", mt);\n+            DEFAULT_PROCESS_MH =\n+                lookup.findStatic(TemplateRuntime.class, \"defaultProcess\", mt);\n@@ -88,1 +89,2 @@\n-            FROM_ARRAYS = lookup.findStatic(TemplateRuntime.class, \"fromArrays\", mt);\n+            NEW_TRUSTED_STRING_TEMPLATE =\n+                lookup.findStatic(StringTemplateImplFactory.class, \"newTrustedStringTemplate\", mt);\n@@ -121,1 +123,1 @@\n-        return new ConstantCallSite(FROM_ARRAYS.asType(type));\n+        return new ConstantCallSite(NEW_TRUSTED_STRING_TEMPLATE.asType(type));\n@@ -222,13 +224,0 @@\n-\n-     \/**\n-     * Used to create a {@link StringTemplate} when number of value slots exceeds\n-     * {@link java.lang.invoke.StringConcatFactory#MAX_INDY_CONCAT_ARG_SLOTS}.\n-     *\n-     * @param fragments  array of string fragments\n-     * @param values     array of values\n-     *\n-     * @return new {@link StringTemplate}\n-     *\/\n-    private static StringTemplate fromArrays(String[] fragments, Object[] values) {\n-        return StringTemplateImplFactory.newStringTemplate(fragments, values);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/TemplateRuntime.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-        return StringTemplateImplFactory.newStringTemplate(combinedFragments, combinedValues);\n+        return StringTemplateImplFactory.newTrustedStringTemplate(combinedFragments, combinedValues);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/TemplateSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -68,0 +69,1 @@\n+        @Stable\n@@ -169,0 +171,1 @@\n+        @Stable\n@@ -228,0 +231,1 @@\n+        @Stable\n","filename":"src\/java.base\/share\/classes\/java\/util\/Digits.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        Object[] values = stringTemplate.values().toArray(new Object[0]);\n+        Object[] values = stringTemplate.values().toArray();\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}