{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -810,4 +810,4 @@\n-        int top = insets.top;\n-        int bottom = target.height - insets.bottom;\n-        int left = insets.left;\n-        int right = target.width - insets.right;\n+        int top = Math.min(target.height, insets.top);\n+        int bottom = Math.max(top, target.height - insets.bottom);\n+        int left = Math.min(target.width, insets.left);\n+        int right = Math.max(left, target.width - insets.right);\n@@ -821,2 +821,4 @@\n-            c.setBounds(left, top, right - left, d.height);\n-            top += d.height + vgap;\n+            int cTop = top;\n+            int cBottom = Math.min(bottom, top + d.height);\n+            c.setBounds(left, cTop, right - left, cBottom - cTop);\n+            top = Math.min(bottom, cBottom + vgap);\n@@ -827,2 +829,4 @@\n-            c.setBounds(left, bottom - d.height, right - left, d.height);\n-            bottom -= d.height + vgap;\n+            int cTop = Math.max(top, bottom - d.height);\n+            int cBottom = bottom;\n+            c.setBounds(left, cTop, right - left, cBottom - cTop);\n+            bottom = Math.max(top, cTop - vgap);\n@@ -833,2 +837,4 @@\n-            c.setBounds(right - d.width, top, d.width, bottom - top);\n-            right -= d.width + hgap;\n+            int cLeft = Math.max(left, right - d.width);\n+            int cRight = right;\n+            c.setBounds(cLeft, top, cRight - cLeft, bottom - top);\n+            right = Math.max(left, cLeft - hgap);\n@@ -839,2 +845,4 @@\n-            c.setBounds(left, top, d.width, bottom - top);\n-            left += d.width + hgap;\n+            int cLeft = left;\n+            int cRight = Math.min(right, left + d.width);\n+            c.setBounds(cLeft, top, cRight - cLeft, bottom - top);\n+            left = Math.min(right, cRight + hgap);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/BorderLayout.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,256 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4811995\n+  @summary This makes sure that children in a BorderLayout are given valid bounds.\n+*\/\n+\n+import java.awt.Dimension;\n+import java.awt.BorderLayout;\n+import java.awt.Rectangle;\n+import javax.swing.JPanel;\n+import javax.swing.border.EmptyBorder;\n+\n+\/**\n+ * When a BorderLayout is too small to fully accommodate its children's preferred size,\n+ * we need to make sure the children's bounds are allocated responsibly. This means\n+ * they should never have a negative (x,y) position or a negative width\/height. (They\n+ * may have a width=0 or height=0, though.\n+ *\/\n+public class ConstrainedBorderLayoutChildrenTest {\n+\n+    public static void main(String[] args) {\n+        new ConstrainedBorderLayoutChildrenTest().run();\n+    }\n+\n+    private void run() {\n+        boolean test1 = test1_southChildHasPositiveY();\n+        boolean test2 = test2_centerChildHasPositiveHeight();\n+        boolean test3 = test3_competingNorthAndSouthHeights();\n+        boolean test4 = test4_northChildHasPositiveY_largeInsets();\n+        boolean test5 = test5_northChildConstrainsHeightForLargeBorder();\n+        boolean test6 = test6_northChildHasPositiveWidth_largeBorder();\n+\n+        if (!(test1 && test2 && test3 && test4 && test5 && test6))\n+            throw new Error(\"Test failed\");\n+    }\n+\n+    \/**\n+     * This makes sure the SOUTH component isn't assigned a negative y-value.\n+     *\n+     * @return true if the test passes, false if it fails.\n+     *\/\n+    private boolean test1_southChildHasPositiveY() {\n+        try {\n+            JPanel container = new JPanel(new BorderLayout());\n+            JPanel southPanel = createStub(200, 240);\n+            container.add(southPanel, BorderLayout.SOUTH);\n+            container.setSize(25, 50);\n+            container.getLayout().layoutContainer(container);\n+\n+            \/\/ specifically one failure we were seeing is: southPanel's y values was -190.\n+            assertTrue(southPanel.getY() >= 0,\n+                    \"southPanel.getY() = \" + southPanel.getY());\n+\n+            \/\/ Let's also codify the expected bounds. This is not necessarily\n+            \/\/ required\/defined in the specs, so it may be OK to change this\n+            \/\/ assertion someday. Here we're expecting southPanel to get the\n+            \/\/ full height of the container but NOT to overflow:\n+            assertEquals(new Rectangle(0, 0, 25, 50), southPanel.getBounds());\n+\n+            return true;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    \/**\n+     * This makes sure the CENTER component isn't assigned a negative height.\n+     * The SOUTH component is going to get the container's full height, and\n+     * nothing will be leftover for the CENTER component.\n+     *\n+     * @return true if the test passes, false if it fails.\n+     *\/\n+    private boolean test2_centerChildHasPositiveHeight() {\n+        try {\n+            JPanel container = new JPanel(new BorderLayout());\n+            JPanel southPanel = createStub(200, 240);\n+            container.add(southPanel, BorderLayout.SOUTH);\n+            JPanel centerPanel = createStub(200, 250);\n+            container.add(centerPanel, BorderLayout.CENTER);\n+            container.setSize(100, 200);\n+            container.getLayout().layoutContainer(container);\n+\n+            \/\/ this is the core criteria for this test:\n+            assertTrue(centerPanel.getHeight() >= 0,\n+                    \"centerPanel.getHeight() = \" + centerPanel.getHeight());\n+\n+            \/\/ Let's also codify the expected bounds. This is not necessarily\n+            \/\/ required\/defined in the specs, so it may be OK to change this\n+            \/\/ assertion someday. Here we're expecting southPanel to get the\n+            \/\/ full height of the container, and for centerPanel to get a\n+            \/\/ height of zero.\n+            assertEquals(new Rectangle(0, 0, 100, 200), southPanel.getBounds());\n+            assertEquals(new Rectangle(0, 0, 100, 0), centerPanel.getBounds());\n+\n+            return true;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    \/**\n+     * This explores what happens if our NORTH and SOUTH components may overlap when given their\n+     * preferred sizes.\n+     *\n+     * @return true if the test passes, false if it fails.\n+     *\/\n+    private boolean test3_competingNorthAndSouthHeights() {\n+        try {\n+            JPanel container = new JPanel(new BorderLayout());\n+            JPanel northPanel = createStub(200, 200);\n+            container.add(northPanel, BorderLayout.NORTH);\n+            JPanel southPanel = createStub(200, 200);\n+            container.add(southPanel, BorderLayout.SOUTH);\n+            container.setSize(300, 300);\n+            container.getLayout().layoutContainer(container);\n+\n+            \/\/ this is the core criteria for this test:\n+            assertTrue(!northPanel.getBounds().intersects(southPanel.getBounds()),\n+                    \"northPanel.getBounds() = \" + northPanel.getBounds() +\n+                    \", southPanel.getBounds() = \" + southPanel.getBounds());\n+\n+            \/\/ Let's also codify the expected bounds. This is not necessarily\n+            \/\/ required\/defined in the specs, so it may be OK to change this\n+            \/\/ assertion someday. Here we're expecting northPanel to get its\n+            \/\/ full preferred height, and southPanel gets what is leftover:\n+            assertEquals(new Rectangle(0,0,300,200), northPanel.getBounds());\n+            assertEquals(new Rectangle(0,200,300,100), southPanel.getBounds());\n+\n+            return true;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    \/**\n+     * This explores what happens if our container is so small that\n+     * 2 * border > container.getHeight()\n+     *\n+     * @return true if the test passes, false if it fails.\n+     *\/\n+    private boolean test4_northChildHasPositiveY_largeInsets() {\n+        try {\n+            JPanel container = new JPanel(new BorderLayout());\n+            container.setBorder(new EmptyBorder(100, 0, 100, 0));\n+            JPanel northPanel = createStub(50, 50);\n+            container.add(northPanel, BorderLayout.NORTH);\n+            container.setSize(150, 150);\n+            container.getLayout().layoutContainer(container);\n+\n+            \/\/ if we respect the border: there's 0 height leftover for us:\n+            assertTrue(northPanel.getHeight() == 0,\n+                    \"northPanel.getHeight() = \" + northPanel.getHeight());\n+\n+            return true;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    \/**\n+     * This explores what happens if our container is so small that\n+     * 2 * border + prefHeight > container.getHeight()\n+     *\n+     * @return true if the test passes, false if it fails.\n+     *\/\n+    private boolean test5_northChildConstrainsHeightForLargeBorder() {\n+        try {\n+            JPanel container = new JPanel(new BorderLayout());\n+            container.setBorder(new EmptyBorder(100, 0, 100, 0));\n+            JPanel northPanel = createStub(50, 50);\n+            container.add(northPanel, BorderLayout.NORTH);\n+            container.setSize(150, 225);\n+            container.getLayout().layoutContainer(container);\n+\n+            \/\/ if we respect the border: we only get 25 pixels\n+            assertEquals(new Rectangle(0, 100, 150, 25), northPanel.getBounds());\n+\n+            return true;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    \/**\n+     * This explores what happens if our container has large left\/right\n+     * border insets that prevent our NORTH component from showing at all\n+     *\n+     * @return true if the test passes, false if it fails.\n+     *\/\n+    private boolean test6_northChildHasPositiveWidth_largeBorder() {\n+        try {\n+            JPanel container = new JPanel(new BorderLayout());\n+            container.setBorder(new EmptyBorder(0, 100, 0, 100));\n+            JPanel northPanel = createStub(50, 50);\n+            container.add(northPanel, BorderLayout.NORTH);\n+            container.setSize(150, 500);\n+            container.getLayout().layoutContainer(container);\n+\n+            \/\/ if we respect our left\/right border: there's no width leftover for us\n+            assertTrue(northPanel.getWidth() == 0,\n+                    \"northPanel.getWidth() = \" + northPanel.getWidth());\n+\n+            return true;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    private void assertTrue(boolean actualValue, String msg) {\n+        if (!actualValue) {\n+            throw new AssertionError(msg);\n+        }\n+    }\n+\n+    private void assertEquals(Object expectedValue, Object actualValue) {\n+        if (!expectedValue.toString().equals(actualValue.toString())) {\n+            throw new AssertionError(\"expected = \" + expectedValue +\n+                    \", actual = \" + actualValue);\n+        }\n+    }\n+\n+    private JPanel createStub(int prefWidth, int prefHeight) {\n+        JPanel comp = new JPanel();\n+        comp.setPreferredSize(new Dimension(prefWidth, prefHeight));\n+        return comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/BorderLayout\/ConstrainedBorderLayoutChildrenTest.java","additions":256,"deletions":0,"binary":false,"changes":256,"status":"added"}]}