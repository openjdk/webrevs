{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -309,10 +309,8 @@\n-\n-static int sort_pairs(BlockPair** a, BlockPair** b) {\n-  if ((*a)->from() == (*b)->from()) {\n-    return (*a)->to()->block_id() - (*b)->to()->block_id();\n-  } else {\n-    return (*a)->from()->block_id() - (*b)->from()->block_id();\n-  }\n-}\n-\n-\n+\/\/ The functionality of this class is to insert a new block between\n+\/\/ the 'from' and 'to' block of a critical edge.\n+\/\/ It first collects the block pairs, and then processes them.\n+\/\/\n+\/\/ Some instructions may introduce more than one edge between two blocks.\n+\/\/ By checking if the current 'to' block sets critical_edge_split_flag\n+\/\/ (all new blocks set this flag) we can avoid repeated processing.\n+\/\/ This is why BlockPair contains the index rather than the original 'to' block.\n@@ -321,1 +319,0 @@\n-  IR*       _ir;\n@@ -324,1 +321,4 @@\n-  CriticalEdgeFinder(IR* ir): _ir(ir) {}\n+  CriticalEdgeFinder(IR* ir) {\n+    ir->iterate_preorder(this);\n+  }\n+\n@@ -332,1 +332,1 @@\n-          blocks.append(new BlockPair(bb, sux));\n+          blocks.append(new BlockPair(bb, i));\n@@ -339,2 +339,0 @@\n-    BlockPair* last_pair = nullptr;\n-    blocks.sort(sort_pairs);\n@@ -343,1 +341,0 @@\n-      if (last_pair != nullptr && pair->is_same(last_pair)) continue;\n@@ -345,1 +342,6 @@\n-      BlockBegin* to = pair->to();\n+      int index = pair->index();\n+      BlockBegin* to = from->end()->sux_at(index);\n+      if (to->is_set(BlockBegin::critical_edge_split_flag)) {\n+        \/\/ inserted\n+        continue;\n+      }\n@@ -353,1 +355,0 @@\n-      last_pair = pair;\n@@ -360,2 +361,0 @@\n-\n-  iterate_preorder(&cef);\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -589,0 +589,2 @@\n+  assert(!sux->is_set(critical_edge_split_flag), \"sanity check\");\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2426,1 +2426,1 @@\n-  BlockBegin* _to;\n+  int _index; \/\/ sux index of 'to' block\n@@ -2428,1 +2428,1 @@\n-  BlockPair(BlockBegin* from, BlockBegin* to): _from(from), _to(to) {}\n+  BlockPair(BlockBegin* from, int index): _from(from), _index(index) {}\n@@ -2430,5 +2430,1 @@\n-  BlockBegin* to() const   { return _to;   }\n-  bool is_same(BlockBegin* from, BlockBegin* to) const { return  _from == from && _to == to; }\n-  bool is_same(BlockPair* p) const { return  _from == p->from() && _to == p->to(); }\n-  void set_to(BlockBegin* b)   { _to = b; }\n-  void set_from(BlockBegin* b) { _from = b; }\n+  int index() const        { return _index; }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"}]}