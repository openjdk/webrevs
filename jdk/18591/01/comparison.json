{"files":[{"patch":"@@ -767,1 +767,1 @@\n-  template(decodeAndThrowThrowable_signature,          \"(IJZ)V\")                                                  \\\n+  template(decodeAndThrowThrowable_signature,          \"(IJZZ)V\")                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -43,1 +44,0 @@\n-#include \"runtime\/thread.inline.hpp\"\n@@ -418,0 +418,5 @@\n+  static bool debug_translated_exception() {\n+      const char* prop_value = Arguments::get_property(\"jdk.internal.vm.TranslatedException.debug\");\n+      return prop_value != nullptr && strcmp(\"true\", prop_value) == 0;\n+  }\n+\n@@ -513,1 +518,1 @@\n-                                format, buffer, false);\n+                                format, buffer, false, debug_translated_exception());\n@@ -546,0 +551,1 @@\n+    jargs.push_int(debug_translated_exception());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -125,2 +125,2 @@\n-    private static void debugPrintStackTrace(Throwable throwable) {\n-        if (Boolean.getBoolean(\"jdk.internal.vm.TranslatedException.debug\")) {\n+    private static void debugPrintStackTrace(Throwable throwable, boolean debug) {\n+        if (debug) {\n@@ -132,1 +132,1 @@\n-    private static Throwable initCause(Throwable throwable, Throwable cause) {\n+    private static Throwable initCause(Throwable throwable, Throwable cause, boolean debug) {\n@@ -138,1 +138,1 @@\n-                debugPrintStackTrace(e);\n+                debugPrintStackTrace(e, debug);\n@@ -144,1 +144,1 @@\n-    private static Throwable create(String className, String message, Throwable cause) {\n+    private static Throwable create(String className, String message, Throwable cause, boolean debug) {\n@@ -160,1 +160,1 @@\n-                return initCause((Throwable) cons.newInstance(), cause);\n+                return initCause((Throwable) cons.newInstance(), cause, debug);\n@@ -163,1 +163,1 @@\n-            return initCause((Throwable) cons.newInstance(message), cause);\n+            return initCause((Throwable) cons.newInstance(message), cause, debug);\n@@ -165,2 +165,2 @@\n-            debugPrintStackTrace(translationFailure);\n-            return initCause(new TranslatedException(message, className), cause);\n+            debugPrintStackTrace(translationFailure, debug);\n+            return initCause(new TranslatedException(message, className), cause, debug);\n@@ -256,1 +256,1 @@\n-    static Throwable decodeThrowable(byte[] encodedThrowable) {\n+    static Throwable decodeThrowable(byte[] encodedThrowable, boolean debug) {\n@@ -265,1 +265,1 @@\n-                throwable = create(exceptionClassName, exceptionMessage, cause);\n+                throwable = create(exceptionClassName, exceptionMessage, cause, debug);\n@@ -313,1 +313,1 @@\n-            debugPrintStackTrace(translationFailure);\n+            debugPrintStackTrace(translationFailure, debug);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/TranslatedException.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+     * @param debug specifies whether debug stack traces should be enabled in case of translation failure\n@@ -129,1 +130,1 @@\n-    public static void decodeAndThrowThrowable(int format, long buffer, boolean inJVMHeap) throws Throwable {\n+    public static void decodeAndThrowThrowable(int format, long buffer, boolean inJVMHeap, boolean debug) throws Throwable {\n@@ -145,1 +146,1 @@\n-        throw TranslatedException.decodeThrowable(bufferToBytes(buffer));\n+        throw TranslatedException.decodeThrowable(bufferToBytes(buffer), debug);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            VMSupport.decodeAndThrowThrowable(0, 0L, true);\n+            VMSupport.decodeAndThrowThrowable(0, 0L, true, false);\n@@ -72,1 +72,1 @@\n-            VMSupport.decodeAndThrowThrowable(1, 0L, true);\n+            VMSupport.decodeAndThrowThrowable(1, 0L, true, false);\n@@ -83,1 +83,1 @@\n-            VMSupport.decodeAndThrowThrowable(2, 0L, true);\n+            VMSupport.decodeAndThrowThrowable(2, 0L, true, false);\n@@ -92,1 +92,1 @@\n-            VMSupport.decodeAndThrowThrowable(3, 0L, true);\n+            VMSupport.decodeAndThrowThrowable(3, 0L, true, false);\n@@ -101,1 +101,1 @@\n-            VMSupport.decodeAndThrowThrowable(4, 0L, true);\n+            VMSupport.decodeAndThrowThrowable(4, 0L, true, false);\n@@ -115,1 +115,1 @@\n-            VMSupport.decodeAndThrowThrowable(3, buffer, true);\n+            VMSupport.decodeAndThrowThrowable(3, buffer, true, false);\n@@ -142,1 +142,1 @@\n-                        VMSupport.decodeAndThrowThrowable(format, buffer, true);\n+                        VMSupport.decodeAndThrowThrowable(format, buffer, true, false);\n","filename":"test\/jdk\/jdk\/internal\/vm\/TestTranslatedException.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}