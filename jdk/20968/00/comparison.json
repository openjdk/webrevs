{"files":[{"patch":"@@ -96,1 +96,1 @@\n-  const static size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  static const size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zAddress_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  const static size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  static const size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zAddress_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  const static size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  static const  size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zAddress_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -639,1 +639,1 @@\n-  __ andq(dst, _zpointer_address_mask);\n+  __ andq(dst, ZPointerAddressMask);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  static const int32_t _zpointer_address_mask = 0xFFFF0000;\n+  static const int32_t ZPointerAddressMask = 0xFFFF0000;\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    __ testq($op$$Address, ZBarrierSetAssembler::_zpointer_address_mask);\n+    __ testq($op$$Address, ZBarrierSetAssembler::ZPointerAddressMask);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-static const char* z_preferred_tmpfs_mountpoints[] = {\n+static const char* ZPreferredTmpfsMountpoints[] = {\n@@ -113,1 +113,1 @@\n-static const char* z_preferred_hugetlbfs_mountpoints[] = {\n+static const char* ZPreferredHugetlbfsMountpoints[] = {\n@@ -229,2 +229,2 @@\n-                                             ? z_preferred_hugetlbfs_mountpoints\n-                                             : z_preferred_tmpfs_mountpoints;\n+                                             ? ZPreferredHugetlbfsMountpoints\n+                                             : ZPreferredTmpfsMountpoints;\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zPhysicalMemoryBacking_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-template<typename K, typename V, size_t _table_size>\n+template<typename K, typename V, size_t TableSize>\n@@ -58,1 +58,1 @@\n-  static const size_t _table_mask = _table_size - 1;\n+  static const size_t TableMask = TableSize - 1;\n@@ -61,1 +61,1 @@\n-  ZArenaHashtableEntry* _table[_table_size];\n+  ZArenaHashtableEntry* _table[TableSize];\n@@ -87,1 +87,1 @@\n-      while (_current_entry == nullptr && ++_current_index < _table_size) {\n+      while (_current_entry == nullptr && ++_current_index < TableSize) {\n@@ -103,2 +103,2 @@\n-    entry->_next = _table[key & _table_mask];\n-    _table[key & _table_mask] = entry;\n+    entry->_next = _table[key & TableMask];\n+    _table[key & TableMask] = entry;\n@@ -108,1 +108,1 @@\n-    for (ZArenaHashtableEntry* e = _table[key & _table_mask]; e != nullptr; e = e->_next) {\n+    for (ZArenaHashtableEntry* e = _table[key & TableMask]; e != nullptr; e = e->_next) {\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  static const BarrierSet::Name value = BarrierSet::ZBarrierSet;\n+  static const BarrierSet::Name Value = BarrierSet::ZBarrierSet;\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -841,1 +841,1 @@\n-  const uint64_t interval_ms = MILLIUNITS \/ decision_hz;\n+  const uint64_t interval_ms = MILLIUNITS \/ DecisionHz;\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  static const uint64_t decision_hz = 100;\n+  static const uint64_t DecisionHz = 100;\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-static size_t bitmap_size(uint32_t size, size_t nsegments) {\n+static size_t bitmap_size(uint32_t size, size_t NumSegments) {\n@@ -40,1 +40,1 @@\n-  return MAX2<size_t>(size, nsegments) * 2;\n+  return MAX2<size_t>(size, NumSegments) * 2;\n@@ -49,1 +49,1 @@\n-    _bitmap(bitmap_size(size, nsegments)),\n+    _bitmap(bitmap_size(size, NumSegments)),\n@@ -130,1 +130,1 @@\n-  const size_t new_bitmap_size = bitmap_size(size, nsegments);\n+  const size_t new_bitmap_size = bitmap_size(size, NumSegments);\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  static const size_t nsegments = 64;\n+  static const size_t NumSegments = 64;\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  return BitMapView(const_cast<BitMap::bm_word_t*>(&_segment_live_bits), nsegments);\n+  return BitMapView(const_cast<BitMap::bm_word_t*>(&_segment_live_bits), NumSegments);\n@@ -59,1 +59,1 @@\n-  return BitMapView(const_cast<BitMap::bm_word_t*>(&_segment_claim_bits), nsegments);\n+  return BitMapView(const_cast<BitMap::bm_word_t*>(&_segment_claim_bits), NumSegments);\n@@ -63,1 +63,1 @@\n-  return BitMapView(&_segment_live_bits, nsegments);\n+  return BitMapView(&_segment_live_bits, NumSegments);\n@@ -67,1 +67,1 @@\n-  return BitMapView(&_segment_claim_bits, nsegments);\n+  return BitMapView(&_segment_claim_bits, NumSegments);\n@@ -83,1 +83,1 @@\n-  return segment_live_bits().find_first_set_bit(0, nsegments);\n+  return segment_live_bits().find_first_set_bit(0, NumSegments);\n@@ -87,1 +87,1 @@\n-  return segment_live_bits().find_first_set_bit(segment + 1, nsegments);\n+  return segment_live_bits().find_first_set_bit(segment + 1, NumSegments);\n@@ -91,1 +91,1 @@\n-  return _bitmap.size() \/ nsegments;\n+  return _bitmap.size() \/ NumSegments;\n@@ -170,1 +170,1 @@\n-  for (BitMap::idx_t segment = first_live_segment(); segment < nsegments; segment = next_live_segment(segment)) {\n+  for (BitMap::idx_t segment = first_live_segment(); segment < NumSegments; segment = next_live_segment(segment)) {\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-  static const size_t reference_type_count = REF_PHANTOM + 1;\n-  typedef size_t Counters[reference_type_count];\n+  static const size_t ReferenceTypeCount = REF_PHANTOM + 1;\n+  typedef size_t Counters[ReferenceTypeCount];\n","filename":"src\/hotspot\/share\/gc\/z\/zReferenceProcessor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-    assert(_old_watermarks_newest < _old_watermarks_max, \"Unexpected amount of old watermarks\");\n+    assert(_old_watermarks_newest < OldWatermarksMax, \"Unexpected amount of old watermarks\");\n","filename":"src\/hotspot\/share\/gc\/z\/zStackWatermark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-  const static int      _old_watermarks_max = 3;\n-  ZColorWatermark       _old_watermarks[_old_watermarks_max];\n+  static const int      OldWatermarksMax = 3;\n+  ZColorWatermark       _old_watermarks[OldWatermarksMax];\n","filename":"src\/hotspot\/share\/gc\/z\/zStackWatermark.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1022,1 +1022,1 @@\n-  : _metronome(sample_hz) {\n+  : _metronome(SampleHz) {\n@@ -1101,1 +1101,1 @@\n-  static const size_t _buffer_size = 256;\n+  static const size_t BufferSize = 256;\n@@ -1105,1 +1105,1 @@\n-  char         _buffer[_buffer_size];\n+  char         _buffer[BufferSize];\n@@ -1122,1 +1122,1 @@\n-      const int res = jio_vsnprintf(_buffer + position, _buffer_size - position, fmt, va);\n+      const int res = jio_vsnprintf(_buffer + position, BufferSize - position, fmt, va);\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-  static const uint64_t sample_hz = 1;\n+  static const uint64_t SampleHz = 1;\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    _current(ZBufferStoreBarriers ? _buffer_size_bytes : 0) {}\n+    _current(ZBufferStoreBarriers ? BufferSizeBytes : 0) {}\n@@ -66,1 +66,1 @@\n-  _current = _buffer_size_bytes;\n+  _current = BufferSizeBytes;\n@@ -70,1 +70,1 @@\n-  return _current == _buffer_size_bytes;\n+  return _current == BufferSizeBytes;\n@@ -82,1 +82,1 @@\n-  for (size_t i = current(); i < _buffer_length; ++i) {\n+  for (size_t i = current(); i < BufferLength; ++i) {\n@@ -232,1 +232,1 @@\n-  for (size_t i = current(); i < _buffer_length; ++i) {\n+  for (size_t i = current(); i < BufferLength; ++i) {\n@@ -262,1 +262,1 @@\n-  for (size_t i = current(); i < _buffer_length; ++i) {\n+  for (size_t i = current(); i < BufferLength; ++i) {\n@@ -279,1 +279,1 @@\n-  for (size_t i = current(); i < _buffer_length; ++i) {\n+  for (size_t i = current(); i < BufferLength; ++i) {\n@@ -299,1 +299,1 @@\n-    for (size_t i = buffer->current(); i < _buffer_length; ++i) {\n+    for (size_t i = buffer->current(); i < BufferLength; ++i) {\n","filename":"src\/hotspot\/share\/gc\/z\/zStoreBarrierBuffer.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-  static const size_t _buffer_length     = 32;\n-  static const size_t _buffer_size_bytes = _buffer_length * sizeof(ZStoreBarrierEntry);\n+  static const size_t BufferLength    = 32;\n+  static const size_t BufferSizeBytes = BufferLength * sizeof(ZStoreBarrierEntry);\n@@ -48,1 +48,1 @@\n-  ZStoreBarrierEntry _buffer[_buffer_length];\n+  ZStoreBarrierEntry _buffer[BufferLength];\n@@ -57,1 +57,1 @@\n-  zaddress_unsafe    _base_pointers[_buffer_length];\n+  zaddress_unsafe    _base_pointers[BufferLength];\n","filename":"src\/hotspot\/share\/gc\/z\/zStoreBarrierBuffer.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  static const size_t offset = 4 * K;\n+  static const size_t Offset = 4 * K;\n","filename":"src\/hotspot\/share\/gc\/z\/zValue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  assert(size <= offset, \"Allocation too large\");\n+  assert(size <= Offset, \"Allocation too large\");\n@@ -59,2 +59,2 @@\n-  const size_t block_alignment = offset;\n-  const size_t block_size = offset * S::count();\n+  const size_t block_alignment = Offset;\n+  const size_t block_size = Offset * S::count();\n@@ -62,1 +62,1 @@\n-  _end = _top + offset;\n+  _end = _top + Offset;\n@@ -122,1 +122,1 @@\n-  return _addr + (value_id * S::offset);\n+  return _addr + (value_id * S::Offset);\n","filename":"src\/hotspot\/share\/gc\/z\/zValue.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -592,1 +592,1 @@\n-    for (size_t i = buffer->current(); i < ZStoreBarrierBuffer::_buffer_length; ++i) {\n+    for (size_t i = buffer->current(); i < ZStoreBarrierBuffer::BufferLength; ++i) {\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}