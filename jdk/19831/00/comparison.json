{"files":[{"patch":"@@ -1312,13 +1312,0 @@\n-Node* PhaseIdealLoop::cast_incr_before_loop(Node* incr, Node* ctrl, Node* loop) {\n-  Node* castii = new CastIINode(ctrl, incr, TypeInt::INT, ConstraintCastNode::UnconditionalDependency);\n-  register_new_node(castii, ctrl);\n-  for (DUIterator_Fast imax, i = incr->fast_outs(imax); i < imax; i++) {\n-    Node* n = incr->fast_out(i);\n-    if (n->is_Phi() && n->in(0) == loop) {\n-      int nrep = n->replace_edge(incr, castii, &_igvn);\n-      return castii;\n-    }\n-  }\n-  return nullptr;\n-}\n-\n@@ -1686,3 +1673,0 @@\n-  \/\/ CastII for the main loop:\n-  Node* castii = cast_incr_before_loop(pre_incr, min_taken, main_head);\n-  assert(castii != nullptr, \"no castII inserted\");\n@@ -1690,1 +1674,1 @@\n-  copy_assertion_predicates_to_main_loop(pre_head, castii, stride, outer_loop, outer_main_head, dd_main_head,\n+  copy_assertion_predicates_to_main_loop(pre_head, pre_incr, stride, outer_loop, outer_main_head, dd_main_head,\n@@ -1693,1 +1677,1 @@\n-  copy_assertion_predicates_to_post_loop(outer_main_head, post_head, post_incr, stride);\n+  copy_assertion_predicates_to_post_loop(outer_main_head, post_head, stride);\n@@ -1818,1 +1802,1 @@\n-  copy_assertion_predicates_to_post_loop(main_head->skip_strip_mined(), post_head, incr, main_head->stride());\n+  copy_assertion_predicates_to_post_loop(main_head->skip_strip_mined(), post_head, main_head->stride());\n@@ -1921,4 +1905,0 @@\n-  \/\/ CastII for the new post loop:\n-  incr = cast_incr_before_loop(zer_opaq->in(1), zer_taken, post_head);\n-  assert(incr != nullptr, \"no castII inserted\");\n-\n@@ -1940,6 +1920,0 @@\n-  if (init->is_CastII()) {\n-    \/\/ skip over the cast added by PhaseIdealLoop::cast_incr_before_loop() when pre\/post\/main loops are created because\n-    \/\/ it can get in the way of type propagation\n-    assert(init->as_CastII()->carry_dependency() && loop_head->skip_assertion_predicates_with_halt() == init->in(0), \"casted iv phi from pre loop expected\");\n-    init = init->in(1);\n-  }\n@@ -1996,1 +1970,3 @@\n-                                                            Node* init, Node* stride) {\n+                                                            Node* stride) {\n+  Node* opaq = post_loop_head->is_canonical_loop_entry();\n+  Node* init = opaq->in(1);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":6,"deletions":30,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -936,2 +936,0 @@\n-  Node* cast_incr_before_loop(Node* incr, Node* ctrl, Node* loop);\n-\n@@ -957,1 +955,1 @@\n-  void copy_assertion_predicates_to_post_loop(LoopNode* main_loop_head, CountedLoopNode* post_loop_head, Node* init,\n+  void copy_assertion_predicates_to_post_loop(LoopNode* main_loop_head, CountedLoopNode* post_loop_head,\n@@ -1529,1 +1527,3 @@\n-  \/\/ Check for aggressive application of 'split-if' optimization,\n+  bool split_thru_phi_could_prevent_vectorization(Node* n, Node* n_blk);\n+\n+\/\/ Check for aggressive application of 'split-if' optimization,\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1078,0 +1078,19 @@\n+\/\/ Split some nodes that take a counted loop phi as input at a counted\n+\/\/ loop can cause vectorization of some expressions to fail\n+bool PhaseIdealLoop::split_thru_phi_could_prevent_vectorization(Node* n, Node* n_blk) {\n+  if (!n_blk->is_CountedLoop()) {\n+    return false;\n+  }\n+\n+  int opcode = n->Opcode();\n+\n+  if (opcode != Op_AndI &&\n+      opcode != Op_MulI &&\n+      opcode != Op_RotateRight &&\n+      opcode != Op_RShiftI) {\n+    return false;\n+  }\n+\n+  return n->in(1) == n_blk->as_BaseCountedLoop()->phi();\n+}\n+\n@@ -1164,0 +1183,4 @@\n+  if (split_thru_phi_could_prevent_vectorization(n, n_blk)) {\n+    return n;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}