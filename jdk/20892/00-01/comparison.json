{"files":[{"patch":"@@ -440,1 +440,1 @@\n-                int pktTimeout = (timeout * (1 << retry));\n+                long pktTimeout = (timeout * (1L << retry));\n@@ -444,1 +444,1 @@\n-                int timeoutLeft = pktTimeout;\n+                long timeoutLeft = Math.clamp(pktTimeout, 0, Integer.MAX_VALUE);\n@@ -475,4 +475,3 @@\n-                    \/\/ Math.max ensures that the timeout is decreased\n-                    long elapsedMillis = Math.max(1,\n-                            TimeUnit.NANOSECONDS.toMillis(end - start));\n-                    timeoutLeft = timeoutLeft - (int) elapsedMillis;\n+                    long elapsedMillis = TimeUnit.NANOSECONDS.toMillis(end - start);\n+                    \/\/ Setting the Math.clamp min to 1 ensures that the timeout is decreased\n+                    timeoutLeft = timeoutLeft - Math.clamp(elapsedMillis, 1, Integer.MAX_VALUE);\n","filename":"src\/jdk.naming.dns\/share\/classes\/com\/sun\/jndi\/dns\/DnsClient.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -62,2 +62,0 @@\n-    private long startTime;\n-\n@@ -144,0 +142,1 @@\n+            long startTime = 0;\n","filename":"test\/jdk\/com\/sun\/jndi\/dns\/ConfigTests\/TimeoutWithEmptyDatagrams.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}