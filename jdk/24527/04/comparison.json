{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.ref.Reference;\n@@ -28,0 +29,3 @@\n+import java.lang.reflect.InaccessibleObjectException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -559,0 +563,50 @@\n+  \/\/ Infrastructure for waitForReferenceProcessing()\n+  private Method waitForReferenceProcessingMethod = null;\n+\n+  private Method getWaitForReferenceProcessingMethod() {\n+    Method wfrp = waitForReferenceProcessingMethod;\n+    if (wfrp == null) {\n+      try {\n+        wfrp = Reference.class.getDeclaredMethod(\"waitForReferenceProcessing\");\n+        wfrp.setAccessible(true);\n+        assert wfrp.getReturnType() == Boolean.class;\n+        Class<?>[] ev = wfrp.getExceptionTypes();\n+        assert ev.length == 1;\n+        assert ev[0] == InterruptedException.class;\n+        waitForReferenceProcessingMethod = wfrp;\n+      } catch (InaccessibleObjectException e) {\n+        throw new RuntimeException(\"Need to add @modules java.base\/java.lang.ref:open to test?\", e);\n+      } catch (NoSuchMethodException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    return wfrp;\n+  }\n+\n+  \/**\n+   * Wait for reference processing, via Reference.waitForReferenceProcessing().\n+   * Callers of this method will need the\n+   * @modules java.base\/java.lang.ref:open\n+   * jtreg tag.\n+   *\n+   * This method should usually be called after a call to WhiteBox.fullGC().\n+   *\/\n+  public boolean waitForReferenceProcessing() throws InterruptedException {\n+    try {\n+      Method wfrp = getWaitForReferenceProcessingMethod();\n+      return (Boolean) wfrp.invoke(null);\n+    } catch (InvocationTargetException e) {\n+      Throwable cause = e.getCause();\n+      if (cause instanceof InterruptedException) {\n+        throw (InterruptedException) cause;\n+      } else {\n+        throw new RuntimeException(e);\n+      }\n+    } catch (RuntimeException e) {\n+      \/\/ Just rethrow any RuntimeExceptions from getWaitForReferenceProcessingMethod()\n+      throw e;\n+    } catch (Throwable t) {\n+      throw new RuntimeException(t);\n+    }\n+  }\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}