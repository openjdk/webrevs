{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n@@ -110,25 +107,0 @@\n-\n-    private static Method wfrp = null;\n-    \/* Wait for reference processing, via Reference.waitForReferenceProcessing().\n-     * Callers of this method will need the\n-     * @modules java.base\/java.lang.ref:open\n-     * jtreg tag.\n-     *\n-     * This method should usually be called after a call to WhiteBox.fullGC().\n-     *\/\n-    public static void waitForReferenceProcessing() {\n-        try {\n-            if (wfrp == null) {\n-                Class refClass = Class.forName(\"java.lang.ref.Reference\");\n-                Method[] methods = refClass.getDeclaredMethods();\n-                wfrp = Arrays.stream(methods).filter((m) -> m.getName().equals(\"waitForReferenceProcessing\")).findFirst().get();\n-                wfrp.setAccessible(true);\n-            }\n-            wfrp.invoke(null, new Object[0]);\n-        } catch (IllegalAccessException iae) {\n-            throw new RuntimeException(\"Need to add @modules java.base\/java.lang.ref:open?\",\n-                    iae);\n-        } catch (ClassNotFoundException | InvocationTargetException e) {\n-            throw new RuntimeException(\"Reflection problem\", e);\n-        }\n-    }\n@@ -136,0 +108,1 @@\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ForceGC.java","additions":2,"deletions":29,"binary":false,"changes":31,"status":"modified"}]}