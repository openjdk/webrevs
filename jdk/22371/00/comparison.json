{"files":[{"patch":"@@ -35,1 +35,1 @@\n-import jdk.test.lib.Platform;\n+\n@@ -39,2 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -47,5 +45,0 @@\n-        \/\/ This test is intended only for Windows\n-        if (!AccessController.doPrivileged((PrivilegedAction<Boolean>) Platform::isWindows)) {\n-            System.out.println(\"The test is for Windows platform only\");\n-            return;\n-        }\n","filename":"test\/jdk\/java\/awt\/Desktop\/8064934\/bug8064934.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -157,11 +154,3 @@\n-    static Field getField(final Class clz, final String fieldName) {\n-        Field res = null;\n-        try {\n-            res = (Field)AccessController.doPrivileged((PrivilegedExceptionAction) () -> {\n-                Field f = clz.getDeclaredField(fieldName);\n-                f.setAccessible(true);\n-                return f;\n-            });\n-        } catch (PrivilegedActionException ex) {\n-            ex.printStackTrace();\n-        }\n+    static Field getField(final Class clz, final String fieldName) throws NoSuchFieldException {\n+        Field res = clz.getDeclaredField(fieldName);\n+        res.setAccessible(true);\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SystemTrayIconHelper.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.security.PublicKey;\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleComponentTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,11 +81,0 @@\n-    public void checkSecurity() {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null)  {\n-            System.out.println(\"security manager is not there\");\n-            getPrimaryClipboard();\n-        } else {\n-            sm.checkPermission(new AWTPermission(\"accessClipboard\"));\n-            getPrimaryClipboard();\n-        }\n-    }\n-\n@@ -151,1 +140,1 @@\n-        checkSecurity();\n+        getPrimaryClipboard();\n","filename":"test\/jdk\/java\/awt\/datatransfer\/Independence\/IndependenceAWTTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -88,11 +88,0 @@\n-    public void checkSecurity() {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null)  {\n-            System.out.println(\"security manager is not there\");\n-            getPrimaryClipboard();\n-        } else {\n-            sm.checkPermission(new AWTPermission(\"accessClipboard\"));\n-            getPrimaryClipboard();\n-        }\n-    }\n-\n@@ -158,1 +147,1 @@\n-        checkSecurity();\n+        getPrimaryClipboard();\n","filename":"test\/jdk\/java\/awt\/datatransfer\/Independence\/IndependenceSwingTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -77,18 +77,0 @@\n-    \/\/ Check whether Security manager is there\n-    public void checkSecurity() {\n-        SecurityManager sm = System.getSecurityManager();\n-\n-        if (sm == null) {\n-            System.out.println(\"security manager is not there\");\n-            getPrimaryClipboard();\n-        } else {\n-            try {\n-                sm.checkPermission(new AWTPermission(\"accessClipboard\"));\n-                getPrimaryClipboard();\n-            } catch(SecurityException e) {\n-                clip = null;\n-                System.out.println(\"Access to System selection is not allowed\");\n-            }\n-        }\n-    }\n-\n@@ -137,1 +119,1 @@\n-        checkSecurity();\n+        getPrimaryClipboard();\n","filename":"test\/jdk\/java\/awt\/datatransfer\/SystemSelection\/SystemSelectionAWTTest.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -78,18 +78,0 @@\n-    \/\/ Check whether Security manager is there\n-    public void checkSecurity() {\n-        SecurityManager sm = System.getSecurityManager();\n-\n-        if (sm == null) {\n-            System.out.println(\"security manager is not there\");\n-            getPrimaryClipboard();\n-        } else {\n-            try {\n-                sm.checkPermission(new AWTPermission(\"accessClipboard\"));\n-                getPrimaryClipboard();\n-            } catch(SecurityException e) {\n-                clip = null;\n-                System.out.println(\"Access to System selection is not allowed\");\n-            }\n-        }\n-    }\n-\n@@ -139,1 +121,1 @@\n-        checkSecurity();\n+        getPrimaryClipboard();\n","filename":"test\/jdk\/java\/awt\/datatransfer\/SystemSelection\/SystemSelectionSwingTest.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -55,16 +53,12 @@\n-        Object obj = AccessController.doPrivileged(\n-                                            new PrivilegedAction() {\n-                                                public Object run() {\n-                                                    try {\n-                                                        Class clazz = Class.forName(\"java.awt.event.InputEvent\");\n-                                                        Method method  = clazz.getDeclaredMethod(\"getButtonDownMasks\",new Class [] {});\n-                                                        if (method != null) {\n-                                                            method.setAccessible(true);\n-                                                            return method.invoke(null, (Object[])null);\n-                                                        }\n-                                                    }catch (Exception e){\n-                                                        throw new RuntimeException(\"Test failed. Exception occured:\", e);\n-                                                    }\n-                                                    return null;\n-                                                }\n-                                            });\n+        Object obj =  null;\n+\n+        try {\n+            Class clazz = Class.forName(\"java.awt.event.InputEvent\");\n+            Method method  = clazz.getDeclaredMethod(\"getButtonDownMasks\",new Class [] {});\n+            if (method != null) {\n+                method.setAccessible(true);\n+                obj = method.invoke(null, (Object[])null);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test failed. Exception occurred:\", e);\n+        }\n","filename":"test\/jdk\/java\/awt\/event\/InputEvent\/ButtonArraysEquality\/ButtonArraysEquality.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -53,14 +51,7 @@\n-        Object obj = AccessController.doPrivileged(\n-                new PrivilegedAction() {\n-            public Object run() {\n-                try {\n-                    Class clazz = Class.forName(\"java.awt.event.InputEvent\");\n-                    Method method  = clazz.getDeclaredMethod(\"getButtonDownMasks\",new Class [] {});\n-                    if (method != null) {\n-                        method.setAccessible(true);\n-                        return method.invoke(null, (Object[])null);\n-                    }\n-                }catch (Exception e){\n-                    throw new RuntimeException(\"Test failed. Exception occured:\", e);\n-                }\n-                return null;\n+        Object obj = null;\n+        try {\n+            Class clazz = Class.forName(\"java.awt.event.InputEvent\");\n+            Method method  = clazz.getDeclaredMethod(\"getButtonDownMasks\",new Class [] {});\n+            if (method != null) {\n+                method.setAccessible(true);\n+                obj = method.invoke(null, (Object[])null);\n@@ -68,1 +59,3 @@\n-        });\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test failed. Exception occured:\", e);\n+        }\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/CheckGetMaskForButton\/CheckGetMaskForButton.java","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.util.PropertyPermission;\n@@ -125,11 +124,0 @@\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            System.out.println(\"Security manager detected\");\n-            try {\n-                security.checkPermission(new FilePermission(\"<<ALL FILES>>\", \"read,write\"));\n-                security.checkPermission(new PropertyPermission(\"user.dir\", \"read\"));\n-            } catch (SecurityException se) {\n-                System.out.println(\"Security requirement not obtained.  TEST PASSED\");\n-                return;\n-            }\n-        }\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintToDir.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -71,3 +71,0 @@\n-import java.security.PrivilegedAction;\n-import java.security.AccessController;\n-\n@@ -455,26 +452,13 @@\n-            @SuppressWarnings(\"removal\")\n-            Method m_getWMID = (Method)AccessController.doPrivileged(new PrivilegedAction() {\n-                    public Object run() {\n-                        try {\n-                            Method method = _clazz.getDeclaredMethod(\"getWMID\", new Class[] {});\n-                            if (method != null) {\n-                                method.setAccessible(true);\n-                            }\n-                            return method;\n-                        } catch (NoSuchMethodException e) {\n-                            assert false;\n-                        } catch (SecurityException e) {\n-                            assert false;\n-                        }\n-                        return null;\n-                    }\n-                });\n-            return ((Integer)m_getWMID.invoke(null, new Object[] {})).intValue();\n-        } catch (ClassNotFoundException cnfe) {\n-            cnfe.printStackTrace();\n-        } catch (NoSuchMethodException nsme) {\n-            nsme.printStackTrace();\n-        } catch (IllegalAccessException iae) {\n-            iae.printStackTrace();\n-        } catch (InvocationTargetException ite) {\n-            ite.printStackTrace();\n+            Method m_getWMID = null;\n+            try {\n+                m_getWMID = _clazz.getDeclaredMethod(\"getWMID\", new Class[] {});\n+                if (m_getWMID != null) {\n+                    m_getWMID.setAccessible(true);\n+                }\n+            } catch (NoSuchMethodException e) {\n+                assert false;\n+            }\n+            return (Integer) m_getWMID.invoke(null, new Object[]{});\n+        } catch (ClassNotFoundException | NoSuchMethodException\n+                 | IllegalAccessException | InvocationTargetException e) {\n+            e.printStackTrace();\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/Util.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -60,7 +60,1 @@\n-            ClassLoader loader = (ClassLoader)\n-                java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction() {\n-                            public Object run() {\n-                                return Thread.currentThread().getContextClassLoader();\n-                            }\n-                        });\n+            ClassLoader loader = (ClassLoader) Thread.currentThread().getContextClassLoader();\n@@ -87,7 +81,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction() {\n-                    public Object run() {\n-                        t.setContextClassLoader(loader);\n-                        return null;\n-                    }\n-                });\n+        t.setContextClassLoader(loader);\n","filename":"test\/jdk\/javax\/imageio\/metadata\/IIOMetadataFormat\/MetadataFormatThreadTest.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -261,6 +261,1 @@\n-#\n-# please note that we need to use \"==\" in setup of the java.security.policy\n-# property in order to overwrite policies defined in the user policy file\n-# For more details see:\n-#  http:\/\/java.sun.com\/j2se\/1.5.0\/docs\/guide\/security\/PolicyFiles.html)\n-#\n+\n","filename":"test\/jdk\/javax\/imageio\/spi\/AppletContextTest\/BadPluginConfigurationTest.sh","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}