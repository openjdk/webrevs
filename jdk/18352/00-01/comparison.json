{"files":[{"patch":"@@ -30,1 +30,0 @@\n- * @library \/test\/lib\n@@ -41,2 +40,0 @@\n-import jdk.test.lib.Utils;\n-\n@@ -51,5 +48,7 @@\n-        Path tmp = Utils.createTempFile(null, null);\n-        try (BufferedWriter writer =\n-            Files.newBufferedWriter(tmp, Charset.defaultCharset())) {\n-            for (int i = 0; i < SIZE; i++) {\n-                writer.write('1');\n+        Path tmp = Files.createTempFile(null, null);\n+        try {\n+            try (BufferedWriter writer =\n+                         Files.newBufferedWriter(tmp, Charset.defaultCharset())) {\n+                for (int i = 0; i < SIZE; i++) {\n+                    writer.write('1');\n+                }\n@@ -57,1 +56,0 @@\n-        }\n@@ -59,5 +57,13 @@\n-        File tempFile = tmp.toFile();\n-        try (FileInputStream fis = new FileInputStream(tempFile)) {\n-            if (tempFile.length() != SIZE) {\n-                throw new RuntimeException(\"unexpected file size = \"\n-                                           + tempFile.length());\n+            File tempFile = tmp.toFile();\n+            try (FileInputStream fis = new FileInputStream(tempFile)) {\n+                if (tempFile.length() != SIZE) {\n+                    throw new RuntimeException(\"unexpected file size = \"\n+                            + tempFile.length());\n+                }\n+                long space = skipBytes(fis, SKIP, SIZE);\n+                space = skipBytes(fis, NEGATIVE_SKIP, space);\n+                space = skipBytes(fis, SKIP, space);\n+                space = skipBytes(fis, SKIP, space);\n+                space = skipBytes(fis, SKIP, space);\n+                space = skipBytes(fis, NEGATIVE_SKIP, space);\n+                space = skipBytes(fis, NEGATIVE_SKIP, space);\n@@ -65,7 +71,2 @@\n-            long space = skipBytes(fis, SKIP, SIZE);\n-            space = skipBytes(fis, NEGATIVE_SKIP, space);\n-            space = skipBytes(fis, SKIP, space);\n-            space = skipBytes(fis, SKIP, space);\n-            space = skipBytes(fis, SKIP, space);\n-            space = skipBytes(fis, NEGATIVE_SKIP, space);\n-            space = skipBytes(fis, NEGATIVE_SKIP, space);\n+        } finally {\n+            Files.deleteIfExists(tmp);\n@@ -73,1 +74,0 @@\n-        Files.deleteIfExists(tmp);\n","filename":"test\/jdk\/java\/io\/FileInputStream\/NegativeAvailable.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -162,2 +162,1 @@\n-            server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-            UnixDomainSocketAddress usa =  UnixDomainSocketAddress.of(\"with space\"); \/\/ relative to CWD\n+            UnixDomainSocketAddress usa =  UnixDomainSocketAddress.of(\"with space\");\n@@ -165,4 +164,9 @@\n-            server.bind(usa);\n-            client = SocketChannel.open(usa);\n-            Files.delete(usa.getPath());\n-            assertAddress(client.getRemoteAddress(), usa, \"address\");\n+            try {\n+                server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n+                \/\/ relative to CWD\n+                server.bind(usa);\n+                client = SocketChannel.open(usa);\n+                assertAddress(client.getRemoteAddress(), usa, \"address\");\n+            } finally {\n+                Files.deleteIfExists(usa.getPath());\n+            }\n@@ -188,7 +192,11 @@\n-            server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-            server.bind(null);\n-            UnixDomainSocketAddress usa = (UnixDomainSocketAddress)server.getLocalAddress();\n-            usa.getPath().toFile().deleteOnExit();\n-            if (usa.getPath().toString().isEmpty())\n-                throw new RuntimeException(\"expected non zero address length\");\n-            System.out.println(\"Null server address: \" + server.getLocalAddress());\n+            UnixDomainSocketAddress usa = null;\n+            try {\n+                server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n+                server.bind(null);\n+                usa = (UnixDomainSocketAddress) server.getLocalAddress();\n+                if (usa.getPath().toString().isEmpty())\n+                    throw new RuntimeException(\"expected non zero address length\");\n+                System.out.println(\"Null server address: \" + server.getLocalAddress());\n+            } finally {\n+                Files.deleteIfExists(usa.getPath());\n+            }\n@@ -311,6 +319,9 @@\n-            ServerSocketChannel server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-            server.bind(address);\n-            SocketChannel client = SocketChannel.open(address);\n-            assertAddress(server.getLocalAddress(), address, \"server\");\n-            assertAddress(client.getRemoteAddress(), address, \"client\");\n-            Files.delete(address.getPath());\n+            try {\n+                ServerSocketChannel server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n+                server.bind(address);\n+                SocketChannel client = SocketChannel.open(address);\n+                assertAddress(server.getLocalAddress(), address, \"server\");\n+                assertAddress(client.getRemoteAddress(), address, \"client\");\n+            } finally {\n+                Files.deleteIfExists(address.getPath());\n+            }\n@@ -321,8 +332,11 @@\n-            server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-            server.bind(null);\n-            UnixDomainSocketAddress usa = (UnixDomainSocketAddress)server.getLocalAddress();\n-            usa.getPath().toFile().deleteOnExit();\n-            client = SocketChannel.open(usa);\n-            accept1 = server.accept();\n-            assertAddress(client.getRemoteAddress(), usa, \"server\");\n-            Files.delete(usa.getPath());\n+            UnixDomainSocketAddress usa = null;\n+            try {\n+                server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n+                server.bind(null);\n+                usa = (UnixDomainSocketAddress) server.getLocalAddress();\n+                client = SocketChannel.open(usa);\n+                accept1 = server.accept();\n+                assertAddress(client.getRemoteAddress(), usa, \"server\");\n+            } finally {\n+                Files.deleteIfExists(usa.getPath());\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Bind.java","additions":41,"deletions":27,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import java.nio.file.Files;\n+\n@@ -52,0 +54,1 @@\n+        UnixDomainSocketAddress addr = null;\n@@ -58,3 +61,1 @@\n-            UnixDomainSocketAddress addr =\n-                    (UnixDomainSocketAddress) serverSocketChannel.getLocalAddress();\n-            addr.getPath().toFile().deleteOnExit();\n+            addr = (UnixDomainSocketAddress) serverSocketChannel.getLocalAddress();\n@@ -66,0 +67,2 @@\n+        } finally {\n+            Files.deleteIfExists(addr.getPath());\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/NonBlockingAccept.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -56,13 +56,13 @@\n-        Path path = Utils.createTempFile(\"bad\", \".zip\");\n-        try (OutputStream os = Files.newOutputStream(path);\n-                ZipOutputStream zos = new ZipOutputStream(os)) {\n-            ZipEntry e = new ZipEntry(\"x\");\n-            zos.putNextEntry(e);\n-            zos.write((int) 'x');\n-        }\n-        int len = (int) Files.size(path);\n-        byte[] data = new byte[len];\n-        try (InputStream is = Files.newInputStream(path)) {\n-            is.read(data);\n-        }\n-        Files.delete(path);\n+        Path path = Files.createTempFile(\"bad\", \".zip\");\n+        try {\n+            try (OutputStream os = Files.newOutputStream(path);\n+                 ZipOutputStream zos = new ZipOutputStream(os)) {\n+                ZipEntry e = new ZipEntry(\"x\");\n+                zos.putNextEntry(e);\n+                zos.write((int) 'x');\n+            }\n+            int len = (int) Files.size(path);\n+            byte[] data = new byte[len];\n+            try (InputStream is = Files.newInputStream(path)) {\n+                is.read(data);\n+            }\n@@ -70,11 +70,14 @@\n-        \/\/ year, month, day are zero\n-        testDate(data.clone(), 0, LocalDate.of(1979, 11, 30).atStartOfDay());\n-        \/\/ only year is zero\n-        testDate(data.clone(), 0 << 25 | 4 << 21 | 5 << 16, LocalDate.of(1980, 4, 5).atStartOfDay());\n-        \/\/ month is greater than 12\n-        testDate(data.clone(), 0 << 25 | 13 << 21 | 1 << 16, LocalDate.of(1981, 1, 1).atStartOfDay());\n-        \/\/ 30th of February\n-        testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16, LocalDate.of(1980, 3, 1).atStartOfDay());\n-        \/\/ 30th of February, 24:60:60\n-        testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16 | 24 << 11 | 60 << 5 | 60 >> 1,\n-                LocalDateTime.of(1980, 3, 2, 1, 1, 0));\n+            \/\/ year, month, day are zero\n+            testDate(data.clone(), 0, LocalDate.of(1979, 11, 30).atStartOfDay());\n+            \/\/ only year is zero\n+            testDate(data.clone(), 0 << 25 | 4 << 21 | 5 << 16, LocalDate.of(1980, 4, 5).atStartOfDay());\n+            \/\/ month is greater than 12\n+            testDate(data.clone(), 0 << 25 | 13 << 21 | 1 << 16, LocalDate.of(1981, 1, 1).atStartOfDay());\n+            \/\/ 30th of February\n+            testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16, LocalDate.of(1980, 3, 1).atStartOfDay());\n+            \/\/ 30th of February, 24:60:60\n+            testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16 | 24 << 11 | 60 << 5 | 60 >> 1,\n+                    LocalDateTime.of(1980, 3, 2, 1, 1, 0));\n+        } finally {\n+            Files.delete(path);\n+        }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ZeroDate.java","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -61,13 +61,13 @@\n-        Path path = Utils.createTempFile(\"bad\", \".zip\");\n-        try (OutputStream os = Files.newOutputStream(path);\n-                ZipOutputStream zos = new ZipOutputStream(os)) {\n-            ZipEntry e = new ZipEntry(\"x\");\n-            zos.putNextEntry(e);\n-            zos.write((int) 'x');\n-        }\n-        int len = (int) Files.size(path);\n-        byte[] data = new byte[len];\n-        try (InputStream is = Files.newInputStream(path)) {\n-            is.read(data);\n-        }\n-        Files.delete(path);\n+        Path path = Files.createTempFile(\"bad\", \".zip\");\n+        try {\n+            try (OutputStream os = Files.newOutputStream(path);\n+                 ZipOutputStream zos = new ZipOutputStream(os)) {\n+                ZipEntry e = new ZipEntry(\"x\");\n+                zos.putNextEntry(e);\n+                zos.write((int) 'x');\n+            }\n+            int len = (int) Files.size(path);\n+            byte[] data = new byte[len];\n+            try (InputStream is = Files.newInputStream(path)) {\n+                is.read(data);\n+            }\n@@ -75,11 +75,14 @@\n-        \/\/ year, month, day are zero\n-        testDate(data.clone(), 0, LocalDate.of(1979, 11, 30).atStartOfDay());\n-        \/\/ only year is zero\n-        testDate(data.clone(), 0 << 25 | 4 << 21 | 5 << 16, LocalDate.of(1980, 4, 5).atStartOfDay());\n-        \/\/ month is greater than 12\n-        testDate(data.clone(), 0 << 25 | 13 << 21 | 1 << 16, LocalDate.of(1981, 1, 1).atStartOfDay());\n-        \/\/ 30th of February\n-        testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16, LocalDate.of(1980, 3, 1).atStartOfDay());\n-        \/\/ 30th of February, 24:60:60\n-        testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16 | 24 << 11 | 60 << 5 | 60 >> 1,\n-                LocalDateTime.of(1980, 3, 2, 1, 1, 0));\n+            \/\/ year, month, day are zero\n+            testDate(data.clone(), 0, LocalDate.of(1979, 11, 30).atStartOfDay());\n+            \/\/ only year is zero\n+            testDate(data.clone(), 0 << 25 | 4 << 21 | 5 << 16, LocalDate.of(1980, 4, 5).atStartOfDay());\n+            \/\/ month is greater than 12\n+            testDate(data.clone(), 0 << 25 | 13 << 21 | 1 << 16, LocalDate.of(1981, 1, 1).atStartOfDay());\n+            \/\/ 30th of February\n+            testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16, LocalDate.of(1980, 3, 1).atStartOfDay());\n+            \/\/ 30th of February, 24:60:60\n+            testDate(data.clone(), 0 << 25 | 2 << 21 | 30 << 16 | 24 << 11 | 60 << 5 | 60 >> 1,\n+                    LocalDateTime.of(1980, 3, 2, 1, 1, 0));\n+        } finally {\n+            Files.delete(path);\n+        }\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZeroDate.java","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"}]}