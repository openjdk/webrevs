{"files":[{"patch":"@@ -904,0 +904,44 @@\n+    case C1StubId::is_instance_of_id:\n+      {\n+        \/\/ Mirror: c_rarg0\n+        \/\/ Object: c_rarg1\n+        \/\/ Temps: r3, r4, r5, r6\n+        \/\/ Result: r0\n+\n+        \/\/ Get the Klass* into c_rarg6\n+        Register klass = c_rarg6, obj = c_rarg1, result = r0;\n+        __ ldr(klass, Address(c_rarg0, java_lang_Class::klass_offset()));\n+\n+        Label fail, is_secondary, success;\n+\n+        __ cbz(klass, fail); \/\/ Klass is null\n+        __ cbz(obj, fail); \/\/ obj is null\n+\n+        __ ldrw(r3, Address(klass, in_bytes(Klass::super_check_offset_offset())));\n+        __ cmpw(r3, in_bytes(Klass::secondary_super_cache_offset()));\n+        __ br(Assembler::EQ, is_secondary); \/\/ Klass is a secondary superclass\n+\n+        \/\/ Klass is a concrete class\n+        __ load_klass(r5, obj);\n+        __ ldr(rscratch1, Address(r5, r3));\n+        __ cmp(klass, rscratch1);\n+        __ cset(result, Assembler::EQ);\n+        __ ret(lr);\n+\n+        __ bind(is_secondary);\n+\n+        __ load_klass(obj, obj);\n+        __ lookup_secondary_supers_table_var(obj, klass,\n+                                             \/*temps*\/r3, r4, r5, v0,\n+                                             result,\n+                                             &success);\n+        __ bind(fail);\n+        __ mov(result, 0);\n+        __ ret(lr);\n+\n+        __ bind(success);\n+        __ mov(result, 1);\n+        __ ret(lr);\n+      }\n+      break;\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1321,0 +1321,44 @@\n+    case C1StubId::is_instance_of_id:\n+      {\n+        \/\/ Mirror: c_rarg0\n+        \/\/ Object: c_rarg1\n+        \/\/ Temps: rdx, rcx, r8, r9\n+        \/\/ Result: rax\n+\n+        \/\/ Get the Klass* into c_rarg0\n+        Register klass = c_rarg0, obj = c_rarg1, result = rax;\n+        __ movptr(klass, Address(c_rarg0, java_lang_Class::klass_offset()));\n+\n+        Label done, is_secondary;\n+\n+        __ xorq(result, result);\n+        __ testq(klass, klass);\n+        __ jcc(Assembler::equal, done); \/\/ Klass is null\n+\n+        __ testq(obj, obj);\n+        __ jcc(Assembler::equal, done); \/\/ obj is null\n+\n+        __ movl(rdx, Address(klass, in_bytes(Klass::super_check_offset_offset())));\n+        __ cmpl(rdx, in_bytes(Klass::secondary_super_cache_offset()));\n+        __ jcc(Assembler::equal, is_secondary); \/\/ Klass is a secondary superclass\n+\n+        \/\/ Klass is a concrete class\n+        __ load_klass(r8, obj, \/*tmp*\/r9);\n+        __ cmpptr(klass, Address(r8, rdx));\n+        __ setcc(Assembler::equal, result);\n+        __ ret(0);\n+\n+        __ bind(is_secondary);\n+\n+        __ load_klass(obj, obj, \/*tmp*\/r9);\n+        __ lookup_secondary_supers_table_var(obj, klass,\n+                                             \/*temps*\/rdx, rcx, r8, r9,\n+                                             result);\n+        __ testq(result, result);\n+        __ setcc(Assembler::equal, result);\n+\n+        __ bind(done);\n+        __ ret(0);\n+      }\n+      break;\n+\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1235,7 +1235,0 @@\n-  \/\/ TODO could try to substitute this node with an equivalent InstanceOf\n-  \/\/ if clazz is known to be a constant Class. This will pick up newly found\n-  \/\/ constants after HIR construction. I'll leave this to a future change.\n-\n-  \/\/ as a first cut, make a simple leaf call to runtime to stay platform independent.\n-  \/\/ could follow the aastore example in a future change.\n-\n@@ -1254,0 +1247,4 @@\n+  address pd_instanceof_fn = Runtime1::entry_for(C1StubId::is_instance_of_id);\n+  if (pd_instanceof_fn == nullptr) {\n+    pd_instanceof_fn = CAST_FROM_FN_PTR(address, Runtime1::is_instance_of);\n+  }\n@@ -1255,1 +1252,1 @@\n-                                     CAST_FROM_FN_PTR(address, Runtime1::is_instance_of),\n+                                     pd_instanceof_fn,\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -255,0 +255,1 @@\n+  case C1StubId::is_instance_of_id:\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+  do_blob(is_instance_of)                                              \\\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}