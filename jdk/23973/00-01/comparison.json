{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -116,1 +117,1 @@\n-    private static final ConcurrentMap<String, Location> LOCATIONS = new ConcurrentHashMap<>();\n+    private static final ConcurrentHashMap<String, Location> LOCATIONS = new ConcurrentHashMap<>();\n@@ -118,1 +119,1 @@\n-    private static class PatternHolder {\n+    private static class LazyPatternHolder {\n@@ -126,1 +127,1 @@\n-        return PatternHolder.MODULE_WORD_PATTERN.matcher(name).matches();\n+        return LazyPatternHolder.MODULE_WORD_PATTERN.matcher(name).matches();\n@@ -142,1 +143,1 @@\n-        name.getClass(); \/* null-check *\/\n+        Objects.requireNonNull(name, \"name\");\n@@ -161,1 +162,1 @@\n-        \/\/ Brand new non-standard location, compute the fitting instance.\n+        \/\/ Compute the fitting instance for non-standard location, if needed.\n@@ -172,0 +173,1 @@\n+        \/\/ Thread-safe install\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/StandardLocation.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.tools;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+import javax.tools.JavaFileManager.Location;\n+import javax.tools.StandardLocation;\n+\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class LocationProps {\n+\n+    @Benchmark\n+    public void standard(Blackhole bh) {\n+        for (Location loc : StandardLocation.values()) {\n+            bh.consume(loc.getName());\n+            bh.consume(loc.isModuleOrientedLocation());\n+            bh.consume(loc.isOutputLocation());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void custom(Blackhole bh) {\n+        Location loc = StandardLocation.locationFor(\"MY_LOCATION\");\n+        bh.consume(loc.getName());\n+        bh.consume(loc.isModuleOrientedLocation());\n+        bh.consume(loc.isOutputLocation());\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/tools\/LocationProps.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}