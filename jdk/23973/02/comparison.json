{"files":[{"patch":"@@ -173,1 +173,1 @@\n-            return getName().matches(\"\\\\bMODULE\\\\b\");\n+            return StandardLocation.computeIsModuleOrientedLocation(getName());\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/JavaFileManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -31,0 +32,1 @@\n+import java.util.regex.Pattern;\n@@ -112,0 +114,16 @@\n+    \/**\n+     * Canonical location instances.\n+     *\/\n+    private static final ConcurrentHashMap<String, Location> LOCATIONS = new ConcurrentHashMap<>();\n+\n+    private static class LazyPatternHolder {\n+        \/**\n+         * Regexp that checks for the word \"MODULE\".\n+         *\/\n+        static final Pattern MODULE_WORD_PATTERN = Pattern.compile(\"\\\\bMODULE\\\\b\");\n+    }\n+\n+    \/* package private *\/ static final boolean computeIsModuleOrientedLocation(String name) {\n+        return LazyPatternHolder.MODULE_WORD_PATTERN.matcher(name).matches();\n+    }\n+\n@@ -125,4 +143,17 @@\n-        if (locations.isEmpty()) {\n-            \/\/ can't use valueOf which throws IllegalArgumentException\n-            for (Location location : values())\n-                locations.putIfAbsent(location.getName(), location);\n+        Objects.requireNonNull(name, \"name\");\n+\n+        \/\/ Check for immediate hit.\n+        Location loc = LOCATIONS.get(name);\n+        if (loc != null) {\n+            return loc;\n+        }\n+\n+        \/\/ Need to create the cache entry.\n+        Location newLoc = null;\n+\n+        \/\/ See if this is one of the known Locations first.\n+        for (Location location : values()) {\n+            if (location.getName().equals(name)) {\n+                newLoc = location;\n+                break;\n+            }\n@@ -130,8 +161,15 @@\n-        name.getClass(); \/* null-check *\/\n-        locations.putIfAbsent(name, new Location() {\n-                @Override\n-                public String getName() { return name; }\n-                @Override\n-                public boolean isOutputLocation() { return name.endsWith(\"_OUTPUT\"); }\n-            });\n-        return locations.get(name);\n+\n+        \/\/ Compute the fitting instance for unknown location, if needed.\n+        if (newLoc == null) {\n+            boolean isOutputLocation = name.endsWith(\"_OUTPUT\");\n+            boolean isModuleOrientedLocation = computeIsModuleOrientedLocation(name);\n+            newLoc = new Location() {\n+                @Override public String getName() { return name; }\n+                @Override public boolean isOutputLocation() { return isOutputLocation; }\n+                @Override public boolean isModuleOrientedLocation() { return isModuleOrientedLocation; }\n+            };\n+        }\n+\n+        \/\/ Thread-safe install.\n+        Location exist = LOCATIONS.putIfAbsent(name, newLoc);\n+        return (exist != null) ? exist : newLoc;\n@@ -139,3 +177,0 @@\n-    \/\/where\n-        private static final ConcurrentMap<String,Location> locations\n-            = new ConcurrentHashMap<>();\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/StandardLocation.java","additions":50,"deletions":15,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8351556\n+ * @summary Test Location.locationFor\n+ * @modules java.compiler jdk.compiler\n+ * @run main LocationFor\n+ *\/\n+\n+import javax.tools.JavaFileManager.Location;\n+import javax.tools.StandardLocation;\n+\n+public class LocationFor {\n+\n+    public static void main(String... args) throws Exception {\n+        \/\/ Non-output, non-module location.\n+        {\n+            Location loc = StandardLocation.locationFor(\"MY_LOCATION\");\n+            assertFalse(loc.isOutputLocation());\n+            assertFalse(loc.isModuleOrientedLocation());\n+        }\n+\n+        \/\/ Output, non-module location.\n+        {\n+            Location loc = StandardLocation.locationFor(\"MY_LOCATION_OUTPUT\");\n+            assertTrue(loc.isOutputLocation());\n+            assertFalse(loc.isModuleOrientedLocation());\n+        }\n+\n+        \/\/ Non-output, module location.\n+        {\n+            Location loc = StandardLocation.locationFor(\"MODULE\");\n+            assertFalse(loc.isOutputLocation());\n+            assertTrue(loc.isModuleOrientedLocation());\n+        }\n+\n+        \/\/ Output, module location.\n+        if (false) { \/\/ JDK-8351561\n+            Location loc = StandardLocation.locationFor(\"MODULE_OUTPUT\");\n+            assertTrue(loc.isOutputLocation());\n+            assertTrue(loc.isModuleOrientedLocation());\n+        }\n+\n+        \/\/ Test standard locations identity.\n+        for (Location loc : StandardLocation.values()) {\n+            Location cached = StandardLocation.locationFor(loc.getName());\n+            assertTrue(loc == cached);\n+        }\n+    }\n+\n+    private static void assertFalse(boolean cond) {\n+        if (cond) {\n+            throw new AssertionError(\"Assertion failed\");\n+        }\n+    }\n+\n+    private static void assertTrue(boolean cond) {\n+        if (!cond) {\n+            throw new AssertionError(\"Assertion failed\");\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/api\/location\/LocationFor.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.tools;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+import javax.tools.JavaFileManager.Location;\n+import javax.tools.StandardLocation;\n+\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class LocationFor {\n+\n+    @Benchmark\n+    public void standard(Blackhole bh) {\n+        for (Location loc : StandardLocation.values()) {\n+            bh.consume(StandardLocation.locationFor(loc.getName()));\n+        }\n+    }\n+\n+    @Benchmark\n+    public Location custom() {\n+        return StandardLocation.locationFor(\"MY_LOCATION\");\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/tools\/LocationFor.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.tools;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+import javax.tools.JavaFileManager.Location;\n+import javax.tools.StandardLocation;\n+\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class LocationProps {\n+\n+    @Benchmark\n+    public void standard(Blackhole bh) {\n+        for (Location loc : StandardLocation.values()) {\n+            bh.consume(loc.getName());\n+            bh.consume(loc.isModuleOrientedLocation());\n+            bh.consume(loc.isOutputLocation());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void custom(Blackhole bh) {\n+        Location loc = StandardLocation.locationFor(\"MY_LOCATION\");\n+        bh.consume(loc.getName());\n+        bh.consume(loc.isModuleOrientedLocation());\n+        bh.consume(loc.isOutputLocation());\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/tools\/LocationProps.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}