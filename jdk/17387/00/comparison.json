{"files":[{"patch":"@@ -253,1 +253,1 @@\n-          ALLOW_C_FUNCTION(::free, ::free(demangled_name));\n+          ALLOW_C_FUNCTION(::free, (demangled_name));\n","filename":"src\/hotspot\/os\/aix\/porting_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-      \/\/ call c library's free\n-      ALLOW_C_FUNCTION(::free, ::free(result);)\n+      \/\/ call C library's free\n+      ALLOW_C_FUNCTION(::free, (result);)\n","filename":"src\/hotspot\/os\/linux\/decoder_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    ALLOW_C_FUNCTION(::free, ::free(line_mountpoint);)\n+    ALLOW_C_FUNCTION(::free, (line_mountpoint);)\n@@ -70,1 +70,1 @@\n-  ALLOW_C_FUNCTION(::free, ::free(line_filesystem);)\n+  ALLOW_C_FUNCTION(::free, (line_filesystem);)\n@@ -94,1 +94,1 @@\n-  ALLOW_C_FUNCTION(::free, ::free(line);)\n+  ALLOW_C_FUNCTION(::free, (line);)\n@@ -101,1 +101,1 @@\n-    ALLOW_C_FUNCTION(::free, ::free(mountpoint);) \/\/ *not* os::free\n+    ALLOW_C_FUNCTION(::free, (mountpoint);) \/\/ *not* os::free\n","filename":"src\/hotspot\/os\/linux\/gc\/x\/xMountPoint_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    ALLOW_C_FUNCTION(::free, ::free(line_mountpoint);)\n+    ALLOW_C_FUNCTION(::free, (line_mountpoint);)\n@@ -70,1 +70,1 @@\n-  ALLOW_C_FUNCTION(::free, ::free(line_filesystem);)\n+  ALLOW_C_FUNCTION(::free, (line_filesystem);)\n@@ -94,1 +94,1 @@\n-  ALLOW_C_FUNCTION(::free, ::free(line);)\n+  ALLOW_C_FUNCTION(::free, (line);)\n@@ -101,1 +101,1 @@\n-    ALLOW_C_FUNCTION(::free, ::free(mountpoint);) \/\/ *not* os::free\n+    ALLOW_C_FUNCTION(::free, (mountpoint);) \/\/ *not* os::free\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zMountPoint_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  ALLOW_C_FUNCTION(::open_memstream, FILE* stream = ::open_memstream(&buf, &size);)\n+  FILE* stream = ALLOW_C_FUNCTION(::open_memstream, (&buf, &size);)\n@@ -47,1 +47,1 @@\n-    ALLOW_C_FUNCTION(::fflush, fflush(stream);)\n+    ALLOW_C_FUNCTION(::fflush, (stream);)\n@@ -57,2 +57,2 @@\n-  ALLOW_C_FUNCTION(::fclose, ::fclose(stream);)\n-  ALLOW_C_FUNCTION(::free, ::free(buf);)\n+  ALLOW_C_FUNCTION(::fclose, (stream);)\n+  ALLOW_C_FUNCTION(::free, (buf);)\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include <stdlib.h>\n+#include <cstdlib>\n@@ -35,1 +35,1 @@\n-  ALLOW_C_FUNCTION(::posix_memalign, int rc = posix_memalign(&res, alignment, size);)\n+  int rc = ALLOW_C_FUNCTION(::posix_memalign, (&res, alignment, size);)\n","filename":"src\/hotspot\/os\/posix\/gc\/x\/xUtils_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include <stdlib.h>\n+#include <cstdlib>\n@@ -35,1 +35,1 @@\n-  ALLOW_C_FUNCTION(::posix_memalign, int rc = posix_memalign(&res, alignment, size);)\n+  int rc = ALLOW_C_FUNCTION(::posix_memalign, (&res, alignment, size);)\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zUtils_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -418,1 +418,1 @@\n-  ALLOW_C_FUNCTION(::vsnprintf, int result = ::vsnprintf(buf, len, fmt, args);)\n+  int result = ALLOW_C_FUNCTION(::vsnprintf, (buf, len, fmt, args);)\n@@ -824,1 +824,1 @@\n-  ALLOW_C_FUNCTION(::exit, ::exit(num);)\n+  ALLOW_C_FUNCTION(::exit, (num);)\n@@ -828,1 +828,1 @@\n-  ALLOW_C_FUNCTION(::_exit, ::_exit(num);)\n+  ALLOW_C_FUNCTION(::_exit, (num);)\n@@ -926,1 +926,1 @@\n-  ALLOW_C_FUNCTION(::realpath, char* p = ::realpath(filename, nullptr);)\n+  char* p = ALLOW_C_FUNCTION(::realpath, (filename, nullptr);)\n@@ -934,1 +934,1 @@\n-    ALLOW_C_FUNCTION(::free, ::free(p);) \/\/ *not* os::free\n+    ALLOW_C_FUNCTION(::free, (p);) \/\/ *not* os::free\n@@ -943,1 +943,1 @@\n-      ALLOW_C_FUNCTION(::realpath, p = ::realpath(filename, outbuf);)\n+      p = ALLOW_C_FUNCTION(::realpath, (filename, outbuf);)\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1723,1 +1723,1 @@\n-  ALLOW_C_FUNCTION(::vsnprintf, int result = ::vsnprintf(buf, len, fmt, args);)\n+  int result = ALLOW_C_FUNCTION(::vsnprintf, (buf, len, fmt, args);)\n@@ -4236,1 +4236,1 @@\n-    ALLOW_C_FUNCTION(::exit, ::exit(exit_code);)\n+    ALLOW_C_FUNCTION(::exit, (exit_code);)\n@@ -4238,1 +4238,1 @@\n-    ALLOW_C_FUNCTION(::_exit, ::_exit(exit_code);)\n+    ALLOW_C_FUNCTION(::_exit, (exit_code);)\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -594,1 +594,1 @@\n-    ALLOW_C_FUNCTION(::free((void*) _init_error_msg));\n+    ALLOW_C_FUNCTION(::free, ((void*) _init_error_msg));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-    ALLOW_C_FUNCTION(::malloc, char* newbuf = (char*)::malloc(newbuf_len * sizeof(char));)\n+    char* newbuf = static_cast<char*>(ALLOW_C_FUNCTION(::malloc, (newbuf_len * sizeof(char))));\n@@ -162,1 +162,1 @@\n-      ALLOW_C_FUNCTION(::free, ::free(newbuf);)\n+      ALLOW_C_FUNCTION(::free, (newbuf);)\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,2 +45,1 @@\n-  ALLOW_C_FUNCTION(::calloc,\n-                   _table = (MallocSiteHashtableEntry**)::calloc(table_size, sizeof(MallocSiteHashtableEntry*));)\n+  _table = (MallocSiteHashtableEntry**) ALLOW_C_FUNCTION(::calloc, (table_size, sizeof(MallocSiteHashtableEntry*));)\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -96,2 +96,2 @@\n-    ALLOW_C_FUNCTION(free, ::free(_ranges);)\n-    ALLOW_C_FUNCTION(free, ::free(_flags);)\n+    ALLOW_C_FUNCTION(::free, (_ranges);)\n+    ALLOW_C_FUNCTION(::free, (_flags);)\n@@ -112,2 +112,2 @@\n-      ALLOW_C_FUNCTION(realloc, _ranges = (Range*)::realloc(_ranges, new_capacity * sizeof(Range));)\n-      ALLOW_C_FUNCTION(realloc, _flags = (MEMFLAGS*)::realloc(_flags, new_capacity * sizeof(MEMFLAGS));)\n+      _ranges = (Range*) ALLOW_C_FUNCTION(::realloc, (_ranges, new_capacity * sizeof(Range));)\n+      _flags = (MEMFLAGS*) ALLOW_C_FUNCTION(::realloc, (_flags, new_capacity * sizeof(MEMFLAGS));)\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,3 +36,3 @@\n-static void* raw_malloc(size_t s)               { ALLOW_C_FUNCTION(::malloc, return ::malloc(s);) }\n-static void* raw_realloc(void* old, size_t s)   { ALLOW_C_FUNCTION(::realloc, return ::realloc(old, s);) }\n-static void  raw_free(void* p)                  { ALLOW_C_FUNCTION(::free, ::free(p);) }\n+static void* raw_malloc(size_t s)               { return ALLOW_C_FUNCTION(::malloc, (s);) }\n+static void* raw_realloc(void* old, size_t s)   { return ALLOW_C_FUNCTION(::realloc, (old, s);) }\n+static void  raw_free(void* p)                  {        ALLOW_C_FUNCTION(::free, (p);) }\n","filename":"src\/hotspot\/share\/nmt\/nmtPreInit.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -658,1 +658,1 @@\n-  ALLOW_C_FUNCTION(::malloc, void* const outer_ptr = ::malloc(outer_size);)\n+  void* const outer_ptr = ALLOW_C_FUNCTION(::malloc, (outer_size);)\n@@ -725,1 +725,1 @@\n-    ALLOW_C_FUNCTION(::realloc, void* const new_outer_ptr = ::realloc(header, new_outer_size);)\n+    void* const new_outer_ptr = ALLOW_C_FUNCTION(::realloc, (header, new_outer_size);)\n@@ -753,1 +753,1 @@\n-    ALLOW_C_FUNCTION(::realloc, rc = ::realloc(memblock, size);)\n+    rc = ALLOW_C_FUNCTION(::realloc, (memblock, size);)\n@@ -781,1 +781,1 @@\n-  ALLOW_C_FUNCTION(::free, ::free(old_outer_ptr);)\n+  ALLOW_C_FUNCTION(::free, (old_outer_ptr);)\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-#define FORBID_C_FUNCTION(signature, alternative)\n+#define FORBID_C_FUNCTION(signature, alternative) namespace { [[deprecated(alternative)]] signature noexcept = delete; }\n@@ -103,1 +103,1 @@\n-#define ALLOW_C_FUNCTION(name, ...) __VA_ARGS__\n+#define ALLOW_C_FUNCTION(name, ...) name __VA_ARGS__\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,28 +70,0 @@\n-#if (__GNUC__ >= 10)\n-\/\/ TODO: Re-enable warning attribute for Clang once\n-\/\/ https:\/\/github.com\/llvm\/llvm-project\/issues\/56519 is fixed and released.\n-\/\/ || (defined(__clang_major__) && (__clang_major__ >= 14))\n-\n-\/\/ Use \"warning\" attribute to detect uses of \"forbidden\" functions.\n-\/\/\n-\/\/ Note: The warning attribute is available since GCC 9, but disabling pragmas\n-\/\/ does not work reliably in ALLOW_C_FUNCTION. GCC 10+ and up work fine.\n-\/\/\n-\/\/ Note: _FORTIFY_SOURCE transforms calls to certain functions into calls to\n-\/\/ associated \"checking\" functions, and that transformation seems to occur\n-\/\/ *before* the attribute check.  We use fortification in fastdebug builds,\n-\/\/ so uses of functions that are both forbidden and fortified won't cause\n-\/\/ forbidden warnings in such builds.\n-#define FORBID_C_FUNCTION(signature, alternative) \\\n-  extern \"C\" __attribute__((__warning__(alternative))) signature;\n-\n-\/\/ Disable warning attribute over the scope of the affected statement.\n-\/\/ The name serves only to document the intended function.\n-#define ALLOW_C_FUNCTION(name, ...)                     \\\n-  PRAGMA_DIAG_PUSH                                      \\\n-  PRAGMA_DISABLE_GCC_WARNING(\"-Wattribute-warning\")     \\\n-  __VA_ARGS__                                           \\\n-  PRAGMA_DIAG_POP\n-\n-#endif \/\/ gcc10+\n-\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,35 +33,0 @@\n-\/\/ The Visual Studio implementation of FORBID_C_FUNCTION explicitly does\n-\/\/ nothing, because there doesn't seem to be a way to implement it for Visual\n-\/\/ Studio.  What seems the most likely approach is to use deprecation warnings,\n-\/\/ but that runs into problems.\n-\/\/\n-\/\/ (1) Declaring the function deprecated (using either __declspec(deprecated)\n-\/\/ or the C++14 [[deprecated]] attribute) fails with warnings like this:\n-\/\/   warning C4273: 'exit': inconsistent dll linkage\n-\/\/ It seems attributes are not simply additive with this compiler.\n-\/\/\n-\/\/ (2) Additionally adding __declspec(dllimport) to deal with (1) fails with\n-\/\/ warnings like this:\n-\/\/   error C2375: 'vsnprintf': redefinition; different linkage\n-\/\/ It seems some functions in the set of interest have different linkage than\n-\/\/ others (\"exit\" is marked imported while \"vsnprintf\" is not, for example).\n-\/\/ That makes it difficult to provide a generic macro.\n-\/\/\n-\/\/ (3) Using __pragma(deprecated(name)) fails with\n-\/\/   warning C4995: 'frobnicate': name was marked as #pragma deprecated\n-\/\/ for a *declaration* (not a use) of a 'frobnicate' function.\n-\/\/\n-\/\/ ALLOW_C_FUNCTIONS disables deprecation warnings over the statement scope.\n-\/\/ Some of the functions we're interested in allowing are conditionally\n-\/\/ deprecated on Windows, under the control of various preprocessor defines\n-\/\/ such as _CRT_SECURE_NO_WARNINGS.  Annotating vetted uses allows those\n-\/\/ warnings to catch unchecked uses.\n-\n-#define FORBID_C_FUNCTION(signature, alternative)\n-\n-#define ALLOW_C_FUNCTION(name, ...)             \\\n-  PRAGMA_DIAG_PUSH                              \\\n-  PRAGMA_DISABLE_MSVC_WARNING(4996)             \\\n-  __VA_ARGS__                                   \\\n-  PRAGMA_DIAG_POP\n-\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_visCPP.hpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-  ALLOW_C_FUNCTION(::malloc, char** new_argv = (char**) malloc(sizeof(char*) * argc);)\n+  char** new_argv = static_cast<char**>(ALLOW_C_FUNCTION(::malloc, (sizeof(char*) * argc)));\n@@ -292,1 +292,1 @@\n-  ALLOW_C_FUNCTION(::free, ::free(argv);)\n+  ALLOW_C_FUNCTION(::free, (argv);)\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}