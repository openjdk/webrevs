{"files":[{"patch":"@@ -168,1 +168,1 @@\n-        return withField(name, descriptor, fb -> fb.withFlags(flags));\n+        return withField(name, descriptor, Util.buildingFlags(flags));\n@@ -197,1 +197,1 @@\n-        return withField(name, descriptor, fb -> fb.withFlags(flags));\n+        return withField(name, descriptor, Util.buildingFlags(flags));\n@@ -244,1 +244,1 @@\n-        return withMethod(name, descriptor, methodFlags, mb -> mb.withCode(handler));\n+        return withMethod(name, descriptor, methodFlags, Util.buildingCode(handler));\n@@ -279,1 +279,1 @@\n-        return withMethod(name, descriptor, methodFlags, mb -> mb.withCode(handler));\n+        return withMethod(name, descriptor, methodFlags, Util.buildingCode(handler));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.lang.invoke.InnerClassLambdaMetafactory.MethodBody;\n@@ -71,2 +70,0 @@\n-    private static final Consumer<FieldBuilder> STATIC_FIELD_FLAGS = new InnerClassLambdaMetafactory.FieldFlags(ACC_STATIC);\n-    private static final Consumer<FieldBuilder> FINAL_FIELD_FLAGS = new InnerClassLambdaMetafactory.FieldFlags(ACC_FINAL);\n@@ -628,1 +625,1 @@\n-                       .withField(sdFieldName, CD_SPECIES_DATA, STATIC_FIELD_FLAGS);\n+                       .withField(sdFieldName, CD_SPECIES_DATA, ACC_STATIC);\n@@ -712,1 +709,1 @@\n-                        clb.withField(field.name, field.desc, FINAL_FIELD_FLAGS);\n+                        clb.withField(field.name, field.desc, ACC_FINAL);\n@@ -716,2 +713,2 @@\n-                    clb.withMethod(SPECIES_DATA_NAME, MTD_SPECIES_DATA, (SPECIES_DATA_MODS & ACC_PPP) | ACC_FINAL,\n-                            new MethodBody(new Consumer<CodeBuilder>() {\n+                    clb.withMethodBody(SPECIES_DATA_NAME, MTD_SPECIES_DATA, (SPECIES_DATA_MODS & ACC_PPP) | ACC_FINAL,\n+                            new Consumer<>() {\n@@ -723,1 +720,1 @@\n-                            }));\n+                            });\n@@ -730,2 +727,2 @@\n-                    clb.withMethod(INIT_NAME, methodDesc(thisCtorType), ACC_PRIVATE,\n-                            new MethodBody(new Consumer<CodeBuilder>() {\n+                    clb.withMethodBody(INIT_NAME, methodDesc(thisCtorType), ACC_PRIVATE,\n+                            new Consumer<>() {\n@@ -756,1 +753,1 @@\n-                            }));\n+                            });\n@@ -760,2 +757,2 @@\n-                    clb.withMethod(\"make\", methodDesc(ftryType), ACC_STATIC,\n-                            new MethodBody(new Consumer<CodeBuilder>() {\n+                    clb.withMethodBody(\"make\", methodDesc(ftryType), ACC_STATIC,\n+                            new Consumer<>() {\n@@ -776,1 +773,1 @@\n-                            }));\n+                            });\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -75,14 +75,0 @@\n-    \/\/ Static builders to avoid lambdas\n-    record FieldFlags(int flags) implements Consumer<FieldBuilder> {\n-        @Override\n-        public void accept(FieldBuilder fb) {\n-            fb.withFlags(flags);\n-        }\n-    };\n-    record MethodBody(Consumer<CodeBuilder> code) implements Consumer<MethodBuilder> {\n-        @Override\n-        public void accept(MethodBuilder mb) {\n-            mb.withCode(code);\n-        }\n-    };\n-\n@@ -327,1 +313,1 @@\n-                    clb.withField(argNames[i], argDescs[i], new FieldFlags(ACC_PRIVATE | ACC_FINAL));\n+                    clb.withField(argNames[i], argDescs[i], ACC_PRIVATE | ACC_FINAL);\n@@ -337,1 +323,1 @@\n-                clb.withMethod(interfaceMethodName,\n+                clb.withMethodBody(interfaceMethodName,\n@@ -345,1 +331,1 @@\n-                        clb.withMethod(interfaceMethodName,\n+                        clb.withMethodBody(interfaceMethodName,\n@@ -379,1 +365,1 @@\n-        clb.withField(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, new FieldFlags(ACC_PRIVATE | ACC_STATIC | ACC_FINAL));\n+        clb.withField(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n@@ -382,1 +368,1 @@\n-        clb.withMethod(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new MethodBody(new Consumer<CodeBuilder>() {\n+        clb.withMethodBody(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new Consumer<>() {\n@@ -392,1 +378,1 @@\n-        }));\n+        });\n@@ -400,2 +386,2 @@\n-        clb.withMethod(INIT_NAME, constructorTypeDesc, ACC_PRIVATE,\n-                new MethodBody(new Consumer<CodeBuilder>() {\n+        clb.withMethodBody(INIT_NAME, constructorTypeDesc, ACC_PRIVATE,\n+                new Consumer<>() {\n@@ -415,1 +401,1 @@\n-                }));\n+                });\n@@ -442,2 +428,2 @@\n-        clb.withMethod(SerializationSupport.NAME_METHOD_WRITE_REPLACE, SerializationSupport.MTD_Object, ACC_PRIVATE | ACC_FINAL,\n-                new MethodBody(new Consumer<CodeBuilder>() {\n+        clb.withMethodBody(SerializationSupport.NAME_METHOD_WRITE_REPLACE, SerializationSupport.MTD_Object, ACC_PRIVATE | ACC_FINAL,\n+                new Consumer<>() {\n@@ -471,1 +457,1 @@\n-                }));\n+                });\n@@ -507,2 +493,2 @@\n-    Consumer<MethodBuilder> forwardingMethod(MethodType methodType) {\n-        return new MethodBody(new Consumer<CodeBuilder>() {\n+    Consumer<CodeBuilder> forwardingMethod(MethodType methodType) {\n+        return new Consumer<>() {\n@@ -545,1 +531,1 @@\n-        });\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":15,"deletions":29,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,15 +86,0 @@\n-    \/\/ Static builders to avoid lambdas\n-    private static final Consumer<FieldBuilder> STATIC_FINAL_FIELD = new Consumer<FieldBuilder>() {\n-        @Override\n-        public void accept(FieldBuilder fb) {\n-            fb.withFlags(ACC_STATIC | ACC_FINAL);\n-        }\n-    };\n-\n-    record MethodBody(Consumer<CodeBuilder> code) implements Consumer<MethodBuilder> {\n-        @Override\n-        public void accept(MethodBuilder mb) {\n-            mb.withCode(code);\n-        }\n-    };\n-\n@@ -331,1 +316,1 @@\n-            clb.withField(p.name, p.desc, STATIC_FINAL_FIELD);\n+            clb.withField(p.name, p.desc, ACC_STATIC | ACC_FINAL);\n@@ -334,1 +319,1 @@\n-        clb.withMethod(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new MethodBody(new Consumer<CodeBuilder>() {\n+        clb.withMethodBody(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new Consumer<>() {\n@@ -359,1 +344,1 @@\n-        }));\n+        });\n@@ -1674,1 +1659,1 @@\n-            clb.withMethod(\"dummy\", MTD_void, ACC_STATIC, new MethodBody(new Consumer<CodeBuilder>() {\n+            clb.withMethodBody(\"dummy\", MTD_void, ACC_STATIC, new Consumer<>() {\n@@ -1681,1 +1666,1 @@\n-            }));\n+            });\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -176,6 +176,1 @@\n-            builder.withCode(new Consumer<>() {\n-                @Override\n-                public void accept(CodeBuilder cb) {\n-                    forEach(cb);\n-                }\n-            });\n+            builder.withCode(Util.writingAll(this));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,6 +107,1 @@\n-            builder.withField(name, desc, new Consumer<>() {\n-                @Override\n-                public void accept(FieldBuilder fieldBuilder) {\n-                    elements.forEach(fieldBuilder);\n-                }\n-            });\n+            builder.withField(name, desc, Util.writingAll(this));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -208,6 +208,1 @@\n-            builder.withMethod(methodName(), methodType(), methodFlags(), new Consumer<>() {\n-                @Override\n-                public void accept(MethodBuilder mb) {\n-                    forEach(mb);\n-                }\n-            });\n+            builder.withMethod(methodName(), methodType(), methodFlags(), Util.writingAll(this));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -150,6 +150,1 @@\n-                                    new Consumer<CodeBuilder>() {\n-                                        @Override\n-                                        public void accept(CodeBuilder cb) {\n-                                            forEach(cb);\n-                                        }\n-                                    },\n+                                    Util.writingAll(this),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -102,6 +102,1 @@\n-            builder.withField(fieldName(), fieldType(), new Consumer<>() {\n-                @Override\n-                public void accept(FieldBuilder fb) {\n-                    FieldImpl.this.forEach(fb);\n-                }\n-            });\n+            builder.withField(fieldName(), fieldType(), Util.writingAll(this));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -139,7 +139,1 @@\n-            builder.withMethod(methodName(), methodType(), methodFlags(),\n-                               new Consumer<>() {\n-                @Override\n-                public void accept(MethodBuilder mb) {\n-                    MethodImpl.this.forEach(mb);\n-                }\n-            });\n+            builder.withMethod(methodName(), methodType(), methodFlags(), Util.writingAll(this));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -28,0 +29,2 @@\n+import java.lang.classfile.FieldBuilder;\n+import java.lang.classfile.MethodBuilder;\n@@ -66,0 +69,30 @@\n+    public static <T> Consumer<Consumer<T>> writingAll(Iterable<T> container) {\n+        record ForEachConsumer<T>(Iterable<T> container) implements Consumer<Consumer<T>> {\n+            @Override\n+            public void accept(Consumer<T> consumer) {\n+                container.forEach(consumer);\n+            }\n+        }\n+        return new ForEachConsumer<>(container);\n+    }\n+\n+    public static Consumer<MethodBuilder> buildingCode(Consumer<? super CodeBuilder> codeHandler) {\n+        record WithCodeMethodHandler(Consumer<? super CodeBuilder> codeHandler) implements Consumer<MethodBuilder> {\n+            @Override\n+            public void accept(MethodBuilder builder) {\n+                builder.withCode(codeHandler);\n+            }\n+        }\n+        return new WithCodeMethodHandler(codeHandler);\n+    }\n+\n+    public static Consumer<FieldBuilder> buildingFlags(int flags) {\n+        record WithFlagFieldHandler(int flags) implements Consumer<FieldBuilder> {\n+            @Override\n+            public void accept(FieldBuilder builder) {\n+                builder.withFlags(flags);\n+            }\n+        }\n+        return new WithFlagFieldHandler(flags);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"}]}