{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,3 @@\n-import java.util.List;\n+import java.lang.module.ModuleDescriptor;\n+import java.lang.module.ModuleFinder;\n+import java.lang.module.ModuleReference;\n@@ -26,0 +28,2 @@\n+import java.util.List;\n+import java.util.stream.Collectors;\n@@ -44,0 +48,5 @@\n+            } else if (arg.startsWith(PRINT_MODULES)) {\n+                lines.add(ModuleFinder.ofSystem().findAll().stream()\n+                        .map(ModuleReference::descriptor)\n+                        .map(ModuleDescriptor::name)\n+                        .collect(Collectors.joining(\",\")));\n@@ -54,0 +63,1 @@\n+    private final static String PRINT_MODULES = \"--print-modules\";\n","filename":"test\/jdk\/tools\/jpackage\/apps\/PrintEnv.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-record Comm<T>(Set<T> common, Set<T> unique1, Set<T> unique2) {\n+public record Comm<T>(Set<T> common, Set<T> unique1, Set<T> unique2) {\n@@ -30,1 +30,1 @@\n-    static <T> Comm<T> compare(Set<T> a, Set<T> b) {\n+    public static <T> Comm<T> compare(Set<T> a, Set<T> b) {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Comm.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.nio.file.Path;\n@@ -27,1 +28,4 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -29,0 +33,2 @@\n+import jdk.jpackage.test.Comm;\n+import jdk.jpackage.test.HelloApp;\n@@ -44,1 +50,0 @@\n-    @Parameters\n@@ -114,9 +119,0 @@\n-    public JLinkOptionsTest(String javaAppDesc, String[] jpackageArgs, String[] required, String[] prohibited) {\n-        this.required = required;\n-        this.prohibited = prohibited;\n-        cmd = JPackageCommand\n-                .helloAppImage(javaAppDesc)\n-                .ignoreDefaultRuntime(true)\n-                .addArguments(jpackageArgs);\n-    }\n-\n@@ -124,1 +120,4 @@\n-    public void test() {\n+    @ParameterSupplier(\"input\")\n+    public void test(String javaAppDesc, String[] jpackageArgs, String[] required, String[] prohibited) {\n+        final var cmd = createJPackageCommand(javaAppDesc).addArguments(jpackageArgs);\n+\n@@ -141,3 +140,33 @@\n-    private final String[] required;\n-    private final String[] prohibited;\n-    private final JPackageCommand cmd;\n+    @Test\n+    public void testNoBindServicesByDefault() {\n+        final var defaultModules = getModulesInRuntime();\n+        final var modulesWithBindServices = getModulesInRuntime(\"--bind-services\");\n+\n+        final var moduleComm = Comm.compare(defaultModules, modulesWithBindServices);\n+\n+        TKit.assertStringListEquals(List.of(), moduleComm.unique1().stream().toList(),\n+                \"Check '--bind-services' option doesn't remove modules\");\n+        TKit.assertNotEquals(\"\", moduleComm.unique2().stream().sorted().collect(Collectors.joining(\",\")),\n+                \"Check '--bind-services' option adds modules\");\n+    }\n+\n+    private final JPackageCommand createJPackageCommand(String javaAppDesc) {\n+        return JPackageCommand.helloAppImage(javaAppDesc).ignoreDefaultRuntime(true);\n+    }\n+\n+    private final Set<String> getModulesInRuntime(String ... jlinkOptions) {\n+        final var cmd = createJPackageCommand(PRINT_ENV_APP + \"*\");\n+        if (jlinkOptions.length != 0) {\n+            cmd.addArguments(\"--jlink-options\");\n+            cmd.addArguments(jlinkOptions);\n+        }\n+\n+        cmd.executeAndAssertImageCreated();\n+\n+        final var output = HelloApp.assertApp(cmd.appLauncherPath())\n+                .saveOutput(true).execute(\"--print-modules\").getFirstLineOfOutput();\n+\n+        return Stream.of(output.split(\",\")).collect(Collectors.toSet());\n+    }\n+\n+    private static final Path PRINT_ENV_APP = TKit.TEST_SRC_ROOT.resolve(\"apps\/PrintEnv.java\");\n","filename":"test\/jdk\/tools\/jpackage\/share\/JLinkOptionsTest.java","additions":45,"deletions":16,"binary":false,"changes":61,"status":"modified"}]}