{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires (os.family == \"windows\")\n@@ -40,5 +41,0 @@\n-        if (!System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            System.out.println(\"Test skipped as it verifies a Windows specific bug\");\n-            return;\n-        }\n-\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/HelperSlowToDie.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires (os.family != \"windows\")\n@@ -47,4 +48,0 @@\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            System.err.println(\"WARNING: Still does not work on Windows!\");\n-            return;\n-        }\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/AsyncCloseChannel.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires (os.family == \"windows\")\n@@ -141,3 +142,0 @@\n-        if (!System.getProperty(\"os.name\").startsWith(\"Windows\"))\n-            return;\n-\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/SocketInheritance.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,0 @@\n-    private static final String TEST_SRC = System.getProperty(\"test.src\");\n@@ -66,5 +65,0 @@\n-    private static final String OS_NAME = System.getProperty(\"os.name\").toLowerCase();\n-\n-    private static final String ARCH = System.getProperty(\"os.arch\");\n-    private static final String OS_ARCH = ARCH.equals(\"i386\") ? \"i586\" : ARCH;\n-\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/InheritedChannelTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+   @requires (os.family != \"windows\")\n@@ -38,3 +39,0 @@\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName.startsWith(\"Windows\"))\n-            return;\n","filename":"test\/jdk\/java\/nio\/charset\/RemovingSunIO\/TestCOMP.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires (os.family == \"windows\")\n@@ -38,5 +39,0 @@\n-        String os = System.getProperty(\"os.name\");\n-        if (!os.startsWith(\"Windows\")) {\n-            System.out.println(\"This is Windows specific test\");\n-            return;\n-        }\n","filename":"test\/jdk\/java\/nio\/file\/DirectoryStream\/DriveLetter.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @requires (os.family == \"linux\")\n@@ -539,9 +540,7 @@\n-        if (System.getProperty(\"os.name\").equals(\"Linux\")) {\n-            Path path = Paths.get(\"\/proc\/cpuinfo\");\n-            if (Files.exists(path)) {\n-                String NEW_LINE = System.getProperty(\"line.separator\");\n-                String s =\n-                    Files.lines(path).collect(Collectors.joining(NEW_LINE));\n-                if (s.length() == 0) {\n-                    fail(\"Files.lines(\\\"\" + path + \"\\\") returns no data\");\n-                }\n+        Path path = Paths.get(\"\/proc\/cpuinfo\");\n+        if (Files.exists(path)) {\n+            String NEW_LINE = System.getProperty(\"line.separator\");\n+            String s =\n+                Files.lines(path).collect(Collectors.joining(NEW_LINE));\n+            if (s.length() == 0) {\n+                fail(\"Files.lines(\\\"\" + path + \"\\\") returns no data\");\n","filename":"test\/jdk\/java\/nio\/file\/Files\/StreamTest.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires (os.family == \"windows\")\n@@ -132,5 +133,0 @@\n-        if (!System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            System.out.println(\"This is Windows-only test at this time!\");\n-            return;\n-        }\n-\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/FileTreeModifier.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}