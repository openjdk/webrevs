{"files":[{"patch":"@@ -1492,5 +1492,8 @@\n-          \/\/ Split if pin array accesses that are control dependent on a range check to prevent an array load from\n-          \/\/ floating above its range check. If a range check is replaced by a regular if then, that logic won't trigger.\n-          \/\/ Pin the array access nodes here to make sure no array access is then missed at split if.\n-          dominated_by(prevdom->as_IfProj(), n->as_If(), false,\n-                       n->Opcode() == Op_RangeCheck && prevdom->in(0)->Opcode() != Op_RangeCheck);\n+          \/\/ Split if: pin array accesses that are control dependent on a range check and moved to a regular if,\n+          \/\/ to prevent an array load from floating above its range check. There are three cases:\n+          \/\/ 1. Move from RangeCheck \"a\" to RangeCheck \"b\": don't need to pin. If we ever remove b, then we pin all its array accesses at that point.\n+          \/\/ 2. We move from RangeCheck \"a\" to regular if \"b\": need to pin. If we ever remove b, then its array accesses would start to float, since we don't pin at that point.\n+          \/\/ 3. If we move from regular if: don't pin. All array accesses are already assumed to be pinned.\n+          bool pin_array_access_nodes =  n->Opcode() == Op_RangeCheck &&\n+                                         prevdom->in(0)->Opcode() != Op_RangeCheck\n+          dominated_by(prevdom->as_IfProj(), n->as_If(), false, pin_array_access_nodes);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}