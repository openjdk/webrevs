{"files":[{"patch":"@@ -684,1 +684,1 @@\n-bool ArrayCopyNode::may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, CallNode*& call) {\n+bool ArrayCopyNode::may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, ArrayCopyNode*& ac) {\n@@ -686,4 +686,3 @@\n-      n->is_Call() &&\n-      n->as_Call()->may_modify(t_oop, phase) &&\n-      (n->as_Call()->is_ArrayCopy() || n->as_Call()->is_call_to_arraycopystub())) {\n-    call = n->as_Call();\n+      n->is_ArrayCopy() &&\n+      n->as_ArrayCopy()->may_modify(t_oop, phase)) {\n+    ac = n->as_ArrayCopy();\n@@ -696,0 +695,4 @@\n+  if (mb->trailing_expanded_array_copy()) {\n+    return true;\n+  }\n+\n@@ -708,2 +711,1 @@\n-        if (may_modify_helper(t_oop, n, phase, call)) {\n-          ac = call->isa_ArrayCopy();\n+        if (may_modify_helper(t_oop, n, phase, ac)) {\n@@ -715,2 +717,1 @@\n-  } else if (may_modify_helper(t_oop, c->in(0), phase, call)) {\n-    ac = call->isa_ArrayCopy();\n+  } else if (may_modify_helper(t_oop, c->in(0), phase, ac)) {\n@@ -720,1 +721,1 @@\n-    assert(c == mb->in(0) || (ac != nullptr && ac->is_clonebasic() && !use_ReduceInitialCardMarks), \"only for clone\");\n+    assert(c == mb->in(0) || (ac->is_clonebasic() && !use_ReduceInitialCardMarks), \"only for clone\");\n@@ -723,2 +724,0 @@\n-  } else if (mb->trailing_partial_array_copy()) {\n-    return true;\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  static bool may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, CallNode*& call);\n+  static bool may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, ArrayCopyNode*& ac);\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -842,5 +842,3 @@\n-  if (is_partial_array_copy) {\n-    assert((*ctrl)->is_Proj(), \"MemBar control projection\");\n-    assert((*ctrl)->in(0)->isa_MemBar(), \"MemBar node\");\n-    (*ctrl)->in(0)->isa_MemBar()->set_trailing_partial_array_copy();\n-  }\n+  assert((*ctrl)->is_Proj(), \"MemBar control projection\");\n+  assert((*ctrl)->in(0)->isa_MemBar(), \"MemBar node\");\n+  (*ctrl)->in(0)->isa_MemBar()->set_trailing_expanded_array_copy();\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1135,1 +1135,1 @@\n-    TrailingPartialArrayCopy\n+    TrailingExpandedArrayCopy\n@@ -1172,2 +1172,2 @@\n-  void set_trailing_partial_array_copy() { _kind = TrailingPartialArrayCopy; }\n-  bool trailing_partial_array_copy() const { return _kind == TrailingPartialArrayCopy; }\n+  void set_trailing_expanded_array_copy() { _kind = TrailingExpandedArrayCopy; }\n+  bool trailing_expanded_array_copy() const { return _kind == TrailingExpandedArrayCopy; }\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}