{"files":[{"patch":"@@ -684,1 +684,1 @@\n-bool ArrayCopyNode::may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, CallNode*& call) {\n+bool ArrayCopyNode::may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, ArrayCopyNode*& ac) {\n@@ -686,4 +686,3 @@\n-      n->is_Call() &&\n-      n->as_Call()->may_modify(t_oop, phase) &&\n-      (n->as_Call()->is_ArrayCopy() || n->as_Call()->is_call_to_arraycopystub())) {\n-    call = n->as_Call();\n+      n->is_ArrayCopy() &&\n+      n->as_ArrayCopy()->may_modify(t_oop, phase)) {\n+    ac = n->as_ArrayCopy();\n@@ -696,0 +695,4 @@\n+  if (mb->trailing_expanded_array_copy()) {\n+    return true;\n+  }\n+\n@@ -708,2 +711,1 @@\n-        if (may_modify_helper(t_oop, n, phase, call)) {\n-          ac = call->isa_ArrayCopy();\n+        if (may_modify_helper(t_oop, n, phase, ac)) {\n@@ -715,2 +717,1 @@\n-  } else if (may_modify_helper(t_oop, c->in(0), phase, call)) {\n-    ac = call->isa_ArrayCopy();\n+  } else if (may_modify_helper(t_oop, c->in(0), phase, ac)) {\n@@ -720,1 +721,1 @@\n-    assert(c == mb->in(0) || (ac != nullptr && ac->is_clonebasic() && !use_ReduceInitialCardMarks), \"only for clone\");\n+    assert(c == mb->in(0) || (ac->is_clonebasic() && !use_ReduceInitialCardMarks), \"only for clone\");\n@@ -723,2 +724,0 @@\n-  } else if (mb->trailing_partial_array_copy()) {\n-    return true;\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  static bool may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, CallNode*& call);\n+  static bool may_modify_helper(const TypeOopPtr* t_oop, Node* n, PhaseValues* phase, ArrayCopyNode*& ac);\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4321,3 +4321,7 @@\n-    int stride_con  = cl->stride_con();\n-    if (stride_con > 0) tty->print(\"+\");\n-    tty->print(\"%d\", stride_con);\n+    if (cl->stride() != nullptr) {\n+      int stride_con  = cl->stride_con();\n+      if (stride_con > 0) tty->print(\"+\");\n+      tty->print(\"%d\", stride_con);\n+    } else {\n+      tty->print(\"unknown stride\");\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-  void insert_mem_bar(Node** ctrl, Node** mem, int opcode, Node* precedent = nullptr);\n+  void insert_mem_bar(Node** ctrl, Node** mem, int opcode, int alias_idx, Node* precedent = nullptr);\n","filename":"src\/hotspot\/share\/opto\/macro.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-void PhaseMacroExpand::insert_mem_bar(Node** ctrl, Node** mem, int opcode, Node* precedent) {\n-  MemBarNode* mb = MemBarNode::make(C, opcode, Compile::AliasIdxBot, precedent);\n+void PhaseMacroExpand::insert_mem_bar(Node** ctrl, Node** mem, int opcode, int alias_idx, Node* precedent) {\n+  MemBarNode* mb = MemBarNode::make(C, opcode, alias_idx, precedent);\n@@ -48,1 +48,8 @@\n-  *mem = mem_proj;\n+  if (alias_idx == Compile::AliasIdxBot) {\n+    *mem = mem_proj;\n+  } else {\n+    MergeMemNode* mm = (*mem)->clone()->as_MergeMem();\n+    mm->set_memory_at(alias_idx, mem_proj);\n+    transform_later(mm);\n+    *mem = mm;\n+  }\n@@ -821,1 +828,2 @@\n-    insert_mem_bar(ctrl, &out_mem, Op_MemBarStoreStore);\n+    assert(ac->_dest_type == TypeOopPtr::BOTTOM, \"non escaping destination shouldn't have narrow slice\");\n+    insert_mem_bar(ctrl, &out_mem, Op_MemBarStoreStore, Compile::AliasIdxBot);\n@@ -823,1 +831,9 @@\n-    insert_mem_bar(ctrl, &out_mem, Op_MemBarCPUOrder);\n+    int mem_bar_alias_idx = Compile::AliasIdxBot;\n+    if (ac->_dest_type != TypeOopPtr::BOTTOM) {\n+      \/\/ The graph was transformed under the assumption the ArrayCopy node only had an effect on a narrow slice. We can't\n+      \/\/ insert a wide membar now that it's being expanded: a load that uses the input memory state of the ArrayCopy\n+      \/\/ could then become anti dependent on the membar when it was not anti dependent on the ArrayCopy leading to a\n+      \/\/ broken graph.\n+      mem_bar_alias_idx = C->get_alias_index(ac->_dest_type->add_offset(Type::OffsetBot)->is_ptr());\n+    }\n+    insert_mem_bar(ctrl, &out_mem, Op_MemBarCPUOrder, mem_bar_alias_idx);\n@@ -826,5 +842,3 @@\n-  if (is_partial_array_copy) {\n-    assert((*ctrl)->is_Proj(), \"MemBar control projection\");\n-    assert((*ctrl)->in(0)->isa_MemBar(), \"MemBar node\");\n-    (*ctrl)->in(0)->isa_MemBar()->set_trailing_partial_array_copy();\n-  }\n+  assert((*ctrl)->is_Proj(), \"MemBar control projection\");\n+  assert((*ctrl)->in(0)->isa_MemBar(), \"MemBar node\");\n+  (*ctrl)->in(0)->isa_MemBar()->set_trailing_expanded_array_copy();\n@@ -1314,1 +1328,1 @@\n-      insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder);\n+      insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder, Compile::AliasIdxBot);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1135,1 +1135,1 @@\n-    TrailingPartialArrayCopy\n+    TrailingExpandedArrayCopy\n@@ -1172,2 +1172,2 @@\n-  void set_trailing_partial_array_copy() { _kind = TrailingPartialArrayCopy; }\n-  bool trailing_partial_array_copy() const { return _kind == TrailingPartialArrayCopy; }\n+  void set_trailing_expanded_array_copy() { _kind = TrailingExpandedArrayCopy; }\n+  bool trailing_expanded_array_copy() const { return _kind == TrailingExpandedArrayCopy; }\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341976\n+ * @summary C2: use_mem_state != load->find_exact_control(load->in(0)) assert failure\n+ * @run main\/othervm -XX:-BackgroundCompilation TestSunkLoadAntiDependency\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+TraceLoopOpts TestSunkLoadAntiDependency\n+ *\/\n+\n+public class TestSunkLoadAntiDependency {\n+    private static volatile  int volatileField;\n+\n+    public static void main(String[] args) {\n+        int[] array = new int[100];\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(array, 2);\n+            inlined1(array, 100, 0, 100, array);\n+        }\n+    }\n+\n+    private static int test1(int[] src, int length) {\n+        length = Integer.max(1, length);\n+        int[] dst = new int[2];\n+        int stop;\n+        for (stop = 0; stop < 10; stop++) {\n+            for (int i = 0; i < 10; i++) {\n+            }\n+        }\n+        int start;\n+        for (start = 0; start < 9; start++) {\n+            for (int i = 0; i < 10; i++) {\n+            }\n+        }\n+        inlined1(src, length, start, stop, dst);\n+        return dst[0] + dst[1];\n+    }\n+\n+    private static void inlined1(int[] src, int length, int start, int stop, int[] dst) {\n+        for (int i = start; i < stop; i++) {\n+            volatileField = 42;\n+            System.arraycopy(src, 0, dst, 0, length);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestSunkLoadAntiDependency.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}