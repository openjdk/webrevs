{"files":[{"patch":"@@ -114,1 +114,1 @@\n-  void insert_mem_bar(Node** ctrl, Node** mem, int opcode, Node* precedent = nullptr);\n+  void insert_mem_bar(Node** ctrl, Node** mem, int opcode, int alias_idx, Node* precedent = nullptr);\n","filename":"src\/hotspot\/share\/opto\/macro.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-void PhaseMacroExpand::insert_mem_bar(Node** ctrl, Node** mem, int opcode, Node* precedent) {\n-  MemBarNode* mb = MemBarNode::make(C, opcode, Compile::AliasIdxBot, precedent);\n+void PhaseMacroExpand::insert_mem_bar(Node** ctrl, Node** mem, int opcode, int alias_idx, Node* precedent) {\n+  MemBarNode* mb = MemBarNode::make(C, opcode, alias_idx, precedent);\n@@ -48,1 +48,8 @@\n-  *mem = mem_proj;\n+  if (alias_idx == Compile::AliasIdxBot) {\n+    *mem = mem_proj;\n+  } else {\n+    MergeMemNode* mm = (*mem)->clone()->as_MergeMem();\n+    mm->set_memory_at(alias_idx, mem_proj);\n+    transform_later(mm);\n+    *mem = mm;\n+  }\n@@ -821,1 +828,2 @@\n-    insert_mem_bar(ctrl, &out_mem, Op_MemBarStoreStore);\n+    assert(ac->_dest_type == TypeOopPtr::BOTTOM, \"non escaping destination shouldn't have narrow slice\");\n+    insert_mem_bar(ctrl, &out_mem, Op_MemBarStoreStore, Compile::AliasIdxBot);\n@@ -823,1 +831,9 @@\n-    insert_mem_bar(ctrl, &out_mem, Op_MemBarCPUOrder);\n+    int alias_idx = Compile::AliasIdxBot;\n+    if (ac->_dest_type != TypeOopPtr::BOTTOM) {\n+      \/\/ The graph was transformed under the assumption the ArrayCopy node only had an effect on a narrow slice. We can't\n+      \/\/ insert a wide membar now that it's being expanded: a load that uses the input memory state of the ArrayCopy\n+      \/\/ could then become anti dependent on the membar when it was not anti dependent on the ArrayCopy leading to a\n+      \/\/ broken graph.\n+      alias_idx = C->get_alias_index(ac->_dest_type->add_offset(Type::OffsetBot)->is_ptr());\n+    }\n+    insert_mem_bar(ctrl, &out_mem, Op_MemBarCPUOrder, alias_idx);\n@@ -1314,1 +1330,1 @@\n-      insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder);\n+      insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder, Compile::AliasIdxBot);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341976\n+ * @summary C2: use_mem_state != load->find_exact_control(load->in(0)) assert failure\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement\n+ *                    -XX:CompileOnly=TestSunkLoadAntiDependency::test1 TestSunkLoadAntiDependency\n+ *\/\n+\n+public class TestSunkLoadAntiDependency {\n+    private static volatile  int volatileField;\n+\n+    public static void main(String[] args) {\n+        int[] array = new int[100];\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(array, 2);\n+            inlined1(array, 100, 0, 100, array);\n+        }\n+    }\n+\n+    private static int test1(int[] src, int length) {\n+        length = Integer.max(1, length);\n+        int[] dst = new int[2];\n+        int stop;\n+        for (stop = 0; stop < 10; stop++) {\n+            for (int i = 0; i < 10; i++) {\n+            }\n+        }\n+        int start;\n+        for (start = 0; start < 9; start++) {\n+            for (int i = 0; i < 10; i++) {\n+            }\n+        }\n+        inlined1(src, length, start, stop, dst);\n+        return dst[0] + dst[1];\n+    }\n+\n+    private static void inlined1(int[] src, int length, int start, int stop, int[] dst) {\n+        for (int i = start; i < stop; i++) {\n+            volatileField = 42;\n+            System.arraycopy(src, 0, dst, 0, length);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestSunkLoadAntiDependency.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}