{"files":[{"patch":"@@ -434,2 +434,3 @@\n-                    try (InputStream in = new FileInputStream(FileDescriptor.in)) {\n-                        Files.copy(in, file.toPath());\n+                    try (InputStream in = new FileInputStream(FileDescriptor.in);\n+                         OutputStream os = Files.newOutputStream(file.toPath())) {\n+                        in.transferTo(os);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.jar.JarFile;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+import java.util.zip.ZipEntry;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @bug 8345506\n+ * @summary verifies that the \"jar\" operations that are expected to work\n+ *          without the \"--file\" option work as expected\n+ * @library \/test\/lib\n+ * @run junit JarNoFileArgOperations\n+ *\/\n+public class JarNoFileArgOperations {\n+\n+    private static final Path SCRATCH_DIR = Path.of(\".\");\n+    private static final Path JAR_TOOL = Path.of(JDKToolFinder.getJDKTool(\"jar\")).toAbsolutePath();\n+    private static final String JAR_ENTRY_NAME = \"foobarhello.txt\";\n+\n+    private static Path SIMPLE_JAR;\n+\n+    private static void makeSimpleJar(final Path path) throws IOException {\n+        final Manifest manifest = new Manifest();\n+        manifest.getMainAttributes().putValue(\"Manifest-Version\", \"1.0\");\n+        try (OutputStream fos = Files.newOutputStream(path);\n+             JarOutputStream jaros = new JarOutputStream(fos, manifest)) {\n+            jaros.putNextEntry(new ZipEntry(JAR_ENTRY_NAME));\n+            jaros.write(\"foobar-8345506\".getBytes(US_ASCII));\n+            jaros.closeEntry();\n+        }\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() throws Exception {\n+        final Path jarFile = Files.createTempFile(SCRATCH_DIR, \"8345506\", \".jar\");\n+        makeSimpleJar(jarFile);\n+        SIMPLE_JAR = jarFile;\n+        System.out.println(\"created JAR file \" + jarFile);\n+    }\n+\n+    \/*\n+     * Launches \"jar --validate\" by streaming the JAR file content through the \"jar\" tool\n+     * process' STDIN and expects that the command completes normally.\n+     *\/\n+    @Test\n+    public void testValidate() throws Exception {\n+        System.out.println(\"launching jar --validate\");\n+        final ProcessBuilder pb = new ProcessBuilder()\n+                .command(JAR_TOOL.toString(), \"--validate\")\n+                \/\/ stream the JAR file content to the jar command through the process' STDIN\n+                .redirectInput(SIMPLE_JAR.toFile());\n+        final OutputAnalyzer oa = ProcessTools.executeCommand(pb);\n+        oa.shouldHaveExitValue(0);\n+    }\n+\n+    \/*\n+     * Launches \"jar --list\" and \"jar -t\" by streaming the JAR file content through the \"jar\" tool\n+     * process' STDIN and expects that the command completes normally.\n+     *\/\n+    @Test\n+    public void testListing() throws Exception {\n+        for (String opt : new String[]{\"-t\", \"--list\"}) {\n+            final ProcessBuilder pb = new ProcessBuilder()\n+                    .command(JAR_TOOL.toString(), opt)\n+                    \/\/ stream the JAR file content to the jar command through the process' STDIN\n+                    .redirectInput(SIMPLE_JAR.toFile());\n+            final OutputAnalyzer oa = ProcessTools.executeCommand(pb);\n+            oa.shouldHaveExitValue(0);\n+            \/\/ verify the listing contained the JAR entry name\n+            oa.contains(JAR_ENTRY_NAME);\n+        }\n+    }\n+\n+    \/*\n+     * Launches \"jar --extract\" and \"jar -x\" by streaming the JAR file content through\n+     * the \"jar\" tool process' STDIN and expects that the command completes normally.\n+     *\/\n+    @Test\n+    public void testExtract() throws Exception {\n+        for (String opt : new String[]{\"-x\", \"--extract\"}) {\n+            final Path tmpDestDir = Files.createTempDirectory(SCRATCH_DIR, \"8345506\");\n+            final ProcessBuilder pb = new ProcessBuilder()\n+                    .command(JAR_TOOL.toString(), opt, \"--dir\", tmpDestDir.toString())\n+                    \/\/ stream the JAR file content to the jar command through the process' STDIN\n+                    .redirectInput(SIMPLE_JAR.toFile());\n+            final OutputAnalyzer oa = ProcessTools.executeCommand(pb);\n+            oa.shouldHaveExitValue(0);\n+            \/\/ verify the file content was extracted\n+            assertTrue(Files.exists(tmpDestDir.resolve(JAR_ENTRY_NAME)),\n+                    JAR_ENTRY_NAME + \" wasn't extracted to \" + tmpDestDir);\n+        }\n+    }\n+\n+    \/*\n+     * Launches \"jar --update\" and \"jar -u\" by streaming the JAR file content through\n+     * the \"jar\" tool process' STDIN and expects that the command completes normally.\n+     *\/\n+    @Test\n+    public void testUpdate() throws Exception {\n+        for (String opt : new String[]{\"-u\", \"--update\"}) {\n+            \/\/ the updated JAR will be written out to this file\n+            final Path destUpdatedJar = Files.createTempFile(SCRATCH_DIR, \"8345506\", \".jar\");\n+            \/\/ an arbitrary file that will be added to the JAR file as\n+            \/\/ part of the update operation\n+            final Path fileToAdd = Files.createTempFile(SCRATCH_DIR, \"8345506\", \".txt\");\n+            final String expectedNewEntry = fileToAdd.getFileName().toString();\n+            final ProcessBuilder pb = new ProcessBuilder()\n+                    .command(JAR_TOOL.toString(), opt, expectedNewEntry)\n+                    \/\/ stream the JAR file content to the jar command through the process' STDIN\n+                    .redirectInput(SIMPLE_JAR.toFile())\n+                    \/\/ redirect the updated JAR to a file so that its contents can be verified\n+                    \/\/ later\n+                    .redirectOutput(destUpdatedJar.toFile());\n+            final OutputAnalyzer oa = ProcessTools.executeProcess(pb);\n+            oa.shouldHaveExitValue(0);\n+            System.out.println(\"updated JAR file at \" + destUpdatedJar.toAbsolutePath());\n+            \/\/ verify, by listing the updated JAR file contents,\n+            \/\/ that the JAR file has been updated to include the new file\n+            try (final JarFile jar = new JarFile(destUpdatedJar.toFile())) {\n+                jar.stream()\n+                        .map(ZipEntry::getName)\n+                        .filter((name) -> name.equals(expectedNewEntry))\n+                        .findFirst()\n+                        .orElseThrow(\n+                                () -> new AssertionError(\"missing entry \" + expectedNewEntry\n+                                        + \" in updated JAR file \" + destUpdatedJar)\n+                        );\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/JarNoFileArgOperations.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}