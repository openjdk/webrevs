{"files":[{"patch":"@@ -28,0 +28,4 @@\n+import java.lang.classfile.ClassFile;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n@@ -29,9 +33,26 @@\n- * Class file format versions of the Java virtual machine.\n- *\n- * See the appropriate edition of <cite>The Java Virtual Machine\n- * Specification<\/cite> for information about a particular class file\n- * format version.\n- *\n- * <p>Note that additional class file format version constants will be\n- * added to model future releases of the Java Virtual Machine\n- * Specification.\n+ * Class file format versions of the Java virtual machine.  Each class file\n+ * format has a particular set of VM features.  See <cite>The Java Virtual\n+ * Machine Specification, Section {@jvms 4.1}<\/cite> for the list of class\n+ * file format versions supported by the current release. The JVMS also\n+ * describes, for each VM feature, the versions that support that feature, if\n+ * it is not supported by all class file format versions.\n+ * <p>\n+ * Future editions of the JVMS may retroactively loosen restrictions imposed on\n+ * a class file format version; for example, the {@linkplain #RELEASE_1 version\n+ * for 1.1} is later extended to allow invocations of static methods in\n+ * interfaces, introduced by Java SE 8; such a class file might not run on the\n+ * release that introduced its format version.  For each Java SE release, see\n+ * the corresponding edition of the JVMS for requirements on class files to run\n+ * on that Java SE release.\n+ * <p>\n+ * Additional class file format version constants will be added to model future\n+ * class file formats defined by future releases of the JVMS.\n+ * <p>\n+ * A special constant, {@link #CURRENT_PREVIEW}, representing the\n+ * preview VM features of the current Java SE release, is not a class file\n+ * format version, but can be viewed as a future class file format version.\n+ * Each of the preview VM features is described by a separate document on the\n+ * site that hosts the corresponding edition of JVMS.  Unlike the features in\n+ * class file format versions, the preview VM features are only supported when\n+ * preview features are enabled, and are not {@linkplain #isSupported()\n+ * supported by future releases}.\n@@ -40,5 +61,4 @@\n- * The complete version used in a class file includes a major version\n- * and a minor version; this enum only models the major version. A\n- * Java virtual machine implementation is required to support a range\n- * of major versions; see the corresponding edition of the <cite>The\n- * Java Virtual Machine Specification<\/cite> for details.\n+ * Each class file format version corresponds to exactly one major version and\n+ * one or more minor versions.  Each major version corresponds to one class file\n+ * format version, except for {@value ClassFile#JAVA_1_VERSION}, which {@link\n+ * #RELEASE_0} and {@link #RELEASE_1} both correspond to.\n@@ -53,2 +73,2 @@\n-     * Summary of class file format evolution; previews are listed for\n-     * convenience, but they are not modeled by this enum.\n+     * Summary of class file format evolution; previews listed for convenience\n+     *\n@@ -92,0 +112,1 @@\n+     *  25: no changes\n@@ -319,2 +340,0 @@\n-     * @since 21\n-     *\n@@ -324,0 +343,1 @@\n+     * @since 21\n@@ -331,2 +351,0 @@\n-     * @since 22\n-     *\n@@ -336,0 +354,1 @@\n+     * @since 22\n@@ -343,2 +362,0 @@\n-     * @since 23\n-     *\n@@ -348,0 +365,1 @@\n+     * @since 23\n@@ -355,2 +373,0 @@\n-     * @since 24\n-     *\n@@ -360,0 +376,1 @@\n+     * @since 24\n@@ -367,2 +384,0 @@\n-     * @since 25\n-     *\n@@ -372,0 +387,1 @@\n+     * @since 25\n@@ -386,1 +402,0 @@\n-    ; \/\/ Reduce code churn when appending new constants\n@@ -388,2 +403,40 @@\n-    \/\/ Note to maintainers: when adding constants for newer releases,\n-    \/\/ the implementation of latest() must be updated too.\n+    \/\/ Note to maintainers: Add new constants right above.\n+    \/\/ The implementation of latest() must be updated too.\n+    \/**\n+     * An enum constant representing all preview VM features of the {@linkplain\n+     * #latest() current Java SE release} in addition to those of the latest\n+     * class file format version.  Unlike VM features associated to enum\n+     * constants representing a class file format version, VM features\n+     * associated to this enum constant are not {@linkplain #isSupported()\n+     * supported} by later Java SE releases.\n+     * <p>\n+     * {@code class} files using any preview feature from the current Java SE\n+     * release uses the same major version from that release, but uses the minor\n+     * version {@value %04x ClassFile#PREVIEW_MINOR_VERSION} with all bits set\n+     * to {@code 1}.  This Java Runtime Environment does not load any {@code\n+     * class} file using preview features from other Java SE releases.\n+     *\n+     * @apiNote\n+     * While this is not a class file format version, it can be considered as\n+     * the class file format version of an arbitrary future Java SE release.\n+     * Programmers should test their programs with preview features enabled to\n+     * ensure the program is compatible with future Java SE releases.\n+     * <p>\n+     * This is a reflective preview API to allow tools running in Java runtime\n+     * environments with no preview feature enabled to access information\n+     * related to preview features.\n+     * <p>\n+     * As each Java SE release does not support preview features from any other\n+     * release, this constant does not represent those features, and there is\n+     * no constant representing such features this Java Runtime Environment is\n+     * unaware of.  <b>Programmers must check the current Java SE version when\n+     * accessing the preview VM features with this constant.<\/b>\n+     *\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/12\">\n+     * JEP 12: Preview Features<\/a>\n+     * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\">\n+     * <cite>Java SE Specifications<\/cite><\/a>\n+     * @since 25\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.LANGUAGE_MODEL, reflective = true)\n+    CURRENT_PREVIEW(ClassFile.latestMajorVersion());\n@@ -404,0 +457,11 @@\n+    \/**\n+     * {@return whether VM features associated with this enum constant will be\n+     * supported by future Java SE releases}  Returns {@code false} only for\n+     * {@link #CURRENT_PREVIEW}.\n+     *\n+     * @since 25\n+     *\/\n+    public boolean isSupported() {\n+        return this != CURRENT_PREVIEW;\n+    }\n+\n@@ -451,1 +515,1 @@\n-     *\n+     * <p>\n@@ -453,1 +517,3 @@\n-     * RELEASE_6} have non-{@code null} results.\n+     * #RELEASE_6} have non-{@code null} results.  {@link #isSupported()\n+     * isSupported()} determines if runtime versions with greater\n+     * feature support this class file format version.\n@@ -456,0 +522,2 @@\n+        if (this == CURRENT_PREVIEW)\n+            return latest().runtimeVersion();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ClassFileFormatVersion.java","additions":99,"deletions":31,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -83,0 +83,4 @@\n+        \/**\n+         * Reflective preview APIs to access preview language and VM\n+         * features as a whole.\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.javac.PreviewFeature;\n+\n@@ -34,3 +36,12 @@\n- *\n- * <p>Note that additional source version constants will be added to\n- * model future releases of the language.\n+ * <p>\n+ * Additional source version constants will be added to model future releases\n+ * of the language.\n+ * <p>\n+ * A special constant, {@link #CURRENT_PREVIEW}, representing the\n+ * preview language features of the current Java SE release, is not a source\n+ * version, but can be viewed as a future source version.  Each of the preview\n+ * language features is described by a separate document on the site that hosts\n+ * the corresponding edition of JLS.  Unlike the features in source versions,\n+ * the preview language features are only supported when preview features are\n+ * enabled, and are not {@linkplain #isSupported() supported by future\n+ * releases}.\n@@ -174,1 +185,0 @@\n-     * @since 1.7\n@@ -181,0 +191,1 @@\n+     * @since 1.7\n@@ -189,1 +200,0 @@\n-     * @since 1.8\n@@ -196,0 +206,1 @@\n+     * @since 1.8\n@@ -206,2 +217,0 @@\n-     * @since 9\n-     *\n@@ -215,0 +224,1 @@\n+     * @since 9\n@@ -225,2 +235,0 @@\n-     * @since 10\n-     *\n@@ -232,0 +240,1 @@\n+     * @since 10\n@@ -242,2 +251,0 @@\n-     * @since 11\n-     *\n@@ -249,0 +256,1 @@\n+     * @since 11\n@@ -257,2 +265,0 @@\n-     * @since 12\n-     *\n@@ -262,0 +268,1 @@\n+     * @since 12\n@@ -270,2 +277,0 @@\n-     * @since 13\n-     *\n@@ -275,0 +280,1 @@\n+     * @since 13\n@@ -284,2 +290,0 @@\n-     * @since 14\n-     *\n@@ -291,0 +295,1 @@\n+     * @since 14\n@@ -300,2 +305,0 @@\n-     * @since 15\n-     *\n@@ -307,0 +310,1 @@\n+     * @since 15\n@@ -317,2 +321,0 @@\n-     * @since 16\n-     *\n@@ -326,0 +328,1 @@\n+     * @since 16\n@@ -336,2 +339,0 @@\n-     * @since 17\n-     *\n@@ -345,0 +346,1 @@\n+     * @since 17\n@@ -354,2 +356,0 @@\n-     * @since 18\n-     *\n@@ -359,0 +359,1 @@\n+     * @since 18\n@@ -368,2 +369,0 @@\n-     * @since 19\n-     *\n@@ -373,0 +372,1 @@\n+     * @since 19\n@@ -382,2 +382,0 @@\n-     * @since 20\n-     *\n@@ -387,0 +385,1 @@\n+     * @since 20\n@@ -397,2 +396,0 @@\n-     * @since 21\n-     *\n@@ -406,0 +403,1 @@\n+     * @since 21\n@@ -416,2 +414,0 @@\n-     * @since 22\n-     *\n@@ -423,0 +419,1 @@\n+     * @since 22\n@@ -430,2 +427,0 @@\n-     * @since 23\n-     *\n@@ -435,0 +430,1 @@\n+     * @since 23\n@@ -442,2 +438,0 @@\n-     * @since 24\n-     *\n@@ -447,0 +441,1 @@\n+     * @since 24\n@@ -458,2 +453,0 @@\n-     * @since 25\n-     *\n@@ -469,0 +462,1 @@\n+     * @since 25\n@@ -483,1 +477,0 @@\n-    ; \/\/ Reduce code churn when appending new constants\n@@ -485,2 +478,35 @@\n-    \/\/ Note that when adding constants for newer releases, the\n-    \/\/ behavior of latest() and latestSupported() must be updated too.\n+    \/\/ Note to maintainers: Add new constants right above.\n+    \/\/ The implementation of latest() must be updated too.\n+    \/\/ Also update the dummy SourceVersion for processing\/model\/TestSourceVersion.\n+    \/**\n+     * An enum constant representing all preview language features of the\n+     * {@linkplain #latest() current Java SE release} in addition to those of\n+     * the latest source version.  Unlike language features associated to enum\n+     * constants representing a source version, language features associated to\n+     * this enum constant are not {@linkplain #isSupported() supported} by later\n+     * Java SE releases.\n+     *\n+     * @apiNote\n+     * While this is not a source version, it can be considered as the source\n+     * version of an arbitrary future Java SE release.  Programmers should test\n+     * compiling their programs with preview features enabled to ensure the\n+     * program is compatible with future Java SE releases.\n+     * <p>\n+     * This is a reflective preview API to allows tools running in Java runtime\n+     * environments with no preview feature enabled to access information\n+     * related to preview features.\n+     * <p>\n+     * As each Java SE release does not support preview features from any other\n+     * release, this constant does not represent those features, and there is\n+     * no constant representing such features this Java Runtime Environment is\n+     * unaware of.  <b>Programmers must check the current Java SE version when\n+     * accessing the preview language features with this constant.<\/b>\n+     *\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/12\">\n+     * JEP 12: Preview Features<\/a>\n+     * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\">\n+     * <cite>Java SE Specifications<\/cite><\/a>\n+     * @since 25\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.LANGUAGE_MODEL, reflective = true)\n+    CURRENT_PREVIEW;\n@@ -507,1 +533,1 @@\n-            valueOf(\"RELEASE_\" + Math.min(26, intVersion)):\n+            valueOf(\"RELEASE_\" + Math.min(latest().ordinal(), intVersion)):\n@@ -516,1 +542,1 @@\n-     * @apiNote This method is included alongside {@link latest} to\n+     * @apiNote This method is included alongside {@link #latest} to\n@@ -764,0 +790,11 @@\n+    \/**\n+     * {@return whether language features associated with this enum constant\n+     * will be supported by future Java SE releases}  Returns {@code false} only\n+     * for {@link #CURRENT_PREVIEW}.\n+     *\n+     * @since 25\n+     *\/\n+    public boolean isSupported() {\n+        return this != CURRENT_PREVIEW;\n+    }\n+\n@@ -770,1 +807,1 @@\n-     *\n+     * <p>\n@@ -772,1 +809,4 @@\n-     * have non-{@code null} results.\n+     * have non-{@code null} results.  {@link #isSupported() isSupported()}\n+     * determines if runtime versions with greater feature support this source\n+     * version.\n+     *\n@@ -776,0 +816,2 @@\n+        if (this == CURRENT_PREVIEW)\n+            return latest().runtimeVersion();\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/SourceVersion.java","additions":88,"deletions":46,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.reflect.ClassFileFormatVersion;\n+import java.util.Arrays;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.lang.reflect.ClassFileFormatVersion.CURRENT_PREVIEW;\n+import static java.lang.reflect.ClassFileFormatVersion.latest;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8355536\n+ * @summary Sanity test for ClassFileFormatVersion\n+ * @run junit ClassFileFormatVersionTest\n+ *\/\n+class ClassFileFormatVersionTest {\n+    @Test\n+    void testLatest() {\n+        var latest = ClassFileFormatVersion.latest();\n+        assertNotSame(CURRENT_PREVIEW, latest);\n+        assertEquals(ClassFile.latestMajorVersion(), latest.major());\n+        assertTrue(latest.isSupported());\n+        assertEquals(ClassFileFormatVersion.values().length - 2, latest.ordinal());\n+    }\n+\n+    @Test\n+    void testCurrentPreview() {\n+        assertTrue(ClassFileFormatVersion.latest().compareTo(CURRENT_PREVIEW) < 0);\n+        assertEquals(ClassFile.latestMajorVersion(), CURRENT_PREVIEW.major());\n+        assertFalse(CURRENT_PREVIEW.isSupported());\n+        assertEquals(ClassFileFormatVersion.values().length - 1, CURRENT_PREVIEW.ordinal());\n+        assertEquals(latest().runtimeVersion(), CURRENT_PREVIEW.runtimeVersion());\n+    }\n+\n+    static Stream<ClassFileFormatVersion> actualCffvs() {\n+        return Arrays.stream(ClassFileFormatVersion.values()).filter(ClassFileFormatVersion::isSupported);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"actualCffvs\")\n+    void testEachVersion(ClassFileFormatVersion cffv) {\n+        if (cffv.compareTo(ClassFileFormatVersion.RELEASE_6) >= 0) {\n+            assertEquals(cffv.major() - 44, cffv.runtimeVersion().feature());\n+            assertEquals(cffv, ClassFileFormatVersion.valueOf(cffv.runtimeVersion()));\n+        }\n+        if (cffv != ClassFileFormatVersion.RELEASE_0) {\n+            assertEquals(cffv, ClassFileFormatVersion.fromMajor(cffv.major()));\n+        }\n+    }\n+\n+    @Test\n+    void testFromMajor() {\n+        for (int i = -1; i < ClassFile.JAVA_1_VERSION; i++) {\n+            final int major = i;\n+            assertThrows(IllegalArgumentException.class, () -> ClassFileFormatVersion.fromMajor(major));\n+        }\n+        for (int i = ClassFile.JAVA_1_VERSION; i <= ClassFile.latestMajorVersion(); i++) {\n+            var cffv = ClassFileFormatVersion.fromMajor(i);\n+            assertTrue(cffv.isSupported());\n+            assertEquals(i, cffv.major());\n+            assertNotSame(CURRENT_PREVIEW, cffv);\n+        }\n+        assertThrows(IllegalArgumentException.class, () -> ClassFileFormatVersion.fromMajor(ClassFile.latestMajorVersion() + 1));\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/ClassFileFormatVersionTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n- * @bug 7025809 8028543 6415644 8028544 8029942 8187951 8193291 8196551 8233096 8275308\n+ * @bug 7025809 8028543 6415644 8028544 8029942 8187951 8193291 8196551 8233096\n+ *      8275308 8355536\n@@ -31,0 +32,3 @@\n+ * @run junit\/othervm -DTestSourceVersion.DIFFERENT_LATEST_SUPPORTED=false TestSourceVersion\n+ * @build java.compiler\/javax.lang.model.SourceVersion\n+ * @run junit\/othervm -DTestSourceVersion.DIFFERENT_LATEST_SUPPORTED=true TestSourceVersion\n@@ -35,0 +39,2 @@\n+import java.util.stream.Stream;\n+\n@@ -36,0 +42,5 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -37,0 +48,1 @@\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,0 +52,2 @@\n+ * There's a copy of \"updated\" SourceVersion in java.compiler subdirectory\n+ * to emulate running with a newer java.compiler module.\n@@ -42,9 +56,0 @@\n-    public static void main(String... args) {\n-        testLatestSupported();\n-        testVersionVaryingKeywords();\n-        testRestrictedKeywords();\n-        testVar();\n-        testYield();\n-        testValueOfRV();\n-        testRuntimeVersion();\n-    }\n@@ -52,1 +57,4 @@\n-    private static void testLatestSupported() {\n+    private static final boolean DIFFERENT_LATEST_SUPPORTED = Boolean.getBoolean(\"TestSourceVersion.DIFFERENT_LATEST_SUPPORTED\");\n+\n+    @Test\n+    void testLatestSupported() {\n@@ -54,1 +62,1 @@\n-        SourceVersion last = values[values.length - 1];\n+        SourceVersion last = values[values.length - 2];\n@@ -58,10 +66,7 @@\n-        if (latest == last &&\n-            latestSupported == SourceVersion.valueOf(\"RELEASE_\" +\n-                                                     Runtime.version().feature()) &&\n-            (latest == latestSupported ||\n-             (latest.ordinal() - latestSupported.ordinal() == 1)) )\n-            return;\n-        else {\n-            throw new RuntimeException(\"Unexpected release value(s) found:\\n\" +\n-                                       \"latest:\\t\" + latest + \"\\n\" +\n-                                       \"latestSupported:\\t\" + latestSupported);\n+        assertSame(last, latest);\n+        assertSame(latestSupported, SourceVersion.valueOf(\"RELEASE_\" + Runtime.version().feature()));\n+        assertSame(Runtime.version().feature(), latestSupported.runtimeVersion().feature());\n+        if (DIFFERENT_LATEST_SUPPORTED) {\n+            assertEquals(latestSupported.ordinal(), latest.ordinal() - 1, () -> latestSupported.toString() + \" ordinal\");\n+        } else {\n+            assertSame(latest, latestSupported);\n@@ -71,1 +76,32 @@\n-    private static void testVersionVaryingKeywords() {\n+    @Test\n+    void testCurrentPreview() {\n+        final SourceVersion preview = CURRENT_PREVIEW;\n+\n+        assertFalse(preview.isSupported());\n+        assertNotSame(CURRENT_PREVIEW, SourceVersion.latest());\n+        assertNotSame(CURRENT_PREVIEW, SourceVersion.latestSupported());\n+        assertEquals(values().length - 1, CURRENT_PREVIEW.ordinal());\n+\n+        assertEquals(latest().runtimeVersion(), CURRENT_PREVIEW.runtimeVersion());\n+    }\n+\n+    static Stream<SourceVersion> actualSvs() {\n+        return Arrays.stream(SourceVersion.values()).filter(SourceVersion::isSupported);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"actualSvs\")\n+    void testEachVersion(SourceVersion sv) {\n+        if (sv.compareTo(SourceVersion.RELEASE_6) >= 0) {\n+            assertEquals(sv, SourceVersion.valueOf(sv.runtimeVersion()));\n+        }\n+        Runtime.Version result = sv.runtimeVersion();\n+        if (sv.compareTo(RELEASE_6) < 0) {\n+            assertNull(result);\n+        } else {\n+            Runtime.Version expected = Runtime.Version.parse(Integer.toString(sv.ordinal()));\n+            assertEquals(expected, result);\n+        }\n+    }\n+\n+    static Stream<Arguments> keywordStart() {\n@@ -78,3 +114,2 @@\n-        for (Map.Entry<String, SourceVersion> entry : keyWordStart.entrySet()) {\n-            String key = entry.getKey();\n-            SourceVersion value = entry.getValue();\n+        return keyWordStart.entrySet().stream().map(e -> Arguments.of(e.getKey(), e.getValue()));\n+    }\n@@ -82,2 +117,5 @@\n-            check(true,  key, (String s) -> isKeyword(s), \"keyword\", latest());\n-            check(false, key, (String s) -> isName(s),    \"name\",    latest());\n+    @ParameterizedTest\n+    @MethodSource(\"keywordStart\")\n+    void testVersionVaryingKeywords(String key, SourceVersion value) {\n+        check(true,  key, (String s) -> isKeyword(s), \"keyword\", latest());\n+        check(false, key, (String s) -> isName(s),    \"name\",    latest());\n@@ -85,2 +123,2 @@\n-            for(SourceVersion version : SourceVersion.values()) {\n-                boolean isKeyword = version.compareTo(value) >= 0;\n+        for(SourceVersion version : SourceVersion.values()) {\n+            boolean isKeyword = version.compareTo(value) >= 0;\n@@ -88,3 +126,2 @@\n-                check(isKeyword,  key, (String s) -> isKeyword(s, version), \"keyword\", version);\n-                check(!isKeyword, key, (String s) -> isName(s, version),    \"name\",    version);\n-            }\n+            check(isKeyword,  key, (String s) -> isKeyword(s, version), \"keyword\", version);\n+            check(!isKeyword, key, (String s) -> isName(s, version),    \"name\",    version);\n@@ -94,1 +131,2 @@\n-    private static void testRestrictedKeywords() {\n+    @Test\n+    void testRestrictedKeywords() {\n@@ -117,1 +155,2 @@\n-    private static void testVar() {\n+    @Test\n+    void testVar() {\n@@ -129,1 +168,2 @@\n-    private static void testYield() {\n+    @Test\n+    void testYield() {\n@@ -141,5 +181,5 @@\n-    private static void check(boolean expected,\n-                              String input,\n-                              Predicate<String> predicate,\n-                              String message,\n-                              SourceVersion version) {\n+    void check(boolean expected,\n+               String input,\n+               Predicate<String> predicate,\n+               String message,\n+               SourceVersion version) {\n@@ -158,1 +198,2 @@\n-    private static void testValueOfRV() {\n+    @Test\n+    void testValueOfRV() {\n@@ -160,3 +201,1 @@\n-            if (sv == RELEASE_0) {\n-                continue;\n-            } else {\n+            if (sv != RELEASE_0 && sv.isSupported()) {\n@@ -182,1 +221,1 @@\n-    private static void checkValueOfResult(SourceVersion expected, String versionString) {\n+    void checkValueOfResult(SourceVersion expected, String versionString) {\n@@ -191,18 +230,0 @@\n-\n-    private static void testRuntimeVersion() {\n-        for (SourceVersion sv : SourceVersion.values()) {\n-            Runtime.Version result = sv.runtimeVersion();\n-            if (sv.compareTo(RELEASE_6) < 0) {\n-                if (result != null) {\n-                    throw new RuntimeException(\"Unexpected result non-null \" + result +\n-                                               \" as runtime version of  \" + sv);\n-                }\n-            } else {\n-                Runtime.Version expected = Runtime.Version.parse(Integer.toString(sv.ordinal()));\n-                if (!result.equals(expected)) {\n-                    throw new RuntimeException(\"Unexpected result \" + result +\n-                                               \" as runtime version of \" + sv);\n-                }\n-            }\n-        }\n-    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/TestSourceVersion.java","additions":86,"deletions":65,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -0,0 +1,827 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Source versions of the Java programming language.\n+ *\n+ * See the appropriate edition of\n+ * <cite>The Java Language Specification<\/cite>\n+ * for information about a particular source version.\n+ * <p>\n+ * Additional source version constants will be added to model future releases\n+ * of the language.\n+ * <p>\n+ * A special constant, {@link #CURRENT_PREVIEW}, representing the\n+ * preview language features of the current Java SE release, is not a source\n+ * version, but can be viewed as a future source version.  Each of the preview\n+ * language features is described by a separate document on the site that hosts\n+ * the corresponding edition of JLS.  Unlike the features in source versions,\n+ * the preview language features are only supported when preview features are\n+ * enabled, and are not {@linkplain #isSupported() supported by future\n+ * releases}.\n+ *\n+ * @since 1.6\n+ * @see java.lang.reflect.ClassFileFormatVersion\n+ *\/\n+public enum SourceVersion {\n+    \/*\n+     * Summary of language evolution\n+     * 1.1: nested classes\n+     * 1.2: strictfp\n+     * 1.3: no changes\n+     * 1.4: assert\n+     * 1.5: annotations, generics, autoboxing, var-args...\n+     * 1.6: no changes\n+     * 1.7: diamond syntax, try-with-resources, etc.\n+     * 1.8: lambda expressions and default methods\n+     *   9: modules, small cleanups to 1.7 and 1.8 changes\n+     *  10: local-variable type inference (var)\n+     *  11: local-variable syntax for lambda parameters\n+     *  12: no changes (switch expressions in preview)\n+     *  13: no changes (text blocks in preview; switch expressions in\n+     *      second preview)\n+     *  14: switch expressions (pattern matching and records in\n+     *      preview; text blocks in second preview)\n+     *  15: text blocks (sealed classes in preview; records and pattern\n+     *      matching in second preview)\n+     *  16: records and pattern matching (sealed classes in second preview)\n+     *  17: sealed classes, floating-point always strict (pattern\n+     *      matching for switch in preview)\n+     *  18: no changes (pattern matching for switch in second preview)\n+     *  19: no changes (pattern matching for switch in third preview,\n+     *      record patterns in preview)\n+     *  20: no changes (pattern matching for switch in fourth preview,\n+     *      record patterns in second preview)\n+     *  21: pattern matching for switch and record patterns (string\n+     *      templates in preview, unnamed patterns and variables in\n+     *      preview, unnamed classes and instance main methods in preview)\n+     *  22: unnamed variables & patterns (statements before super(...)\n+     *      in preview, string templates in second preview, implicitly\n+     *      declared classes and instance main methods in second preview)\n+     *  23: no changes (primitive Types in Patterns, instanceof, and\n+     *      switch in preview, module Import Declarations in preview,\n+     *      implicitly declared classes and instance main in third\n+     *      preview, flexible constructor bodies in second preview)\n+     *  24: no changes (primitive Types in Patterns, instanceof, and\n+     *      switch in second preview, module Import Declarations in second\n+     *      preview, simple source files and instance main in fourth\n+     *      preview, flexible constructor bodies in third preview)\n+     *  25: module import declarations, compact source files and\n+     *      instance main methods, and flexible constructor bodies\n+     *\/\n+\n+    \/**\n+     * The original version.\n+     *\n+     * The language described in\n+     * <cite>The Java Language Specification, First Edition<\/cite>.\n+     *\/\n+    RELEASE_0,\n+\n+    \/**\n+     * The version introduced by the Java Platform 1.1.\n+     *\n+     * The language is {@code RELEASE_0} augmented with nested classes\n+     * as described in the 1.1 update to <cite>The Java Language\n+     * Specification, First Edition<\/cite>.\n+     *\/\n+    RELEASE_1,\n+\n+    \/**\n+     * The version introduced by the Java 2 Platform, Standard Edition,\n+     * v 1.2.\n+     *\n+     * The language described in\n+     * <cite>The Java Language Specification,\n+     * Second Edition<\/cite>, which includes the {@code\n+     * strictfp} modifier.\n+     *\/\n+    RELEASE_2,\n+\n+    \/**\n+     * The version introduced by the Java 2 Platform, Standard Edition,\n+     * v 1.3.\n+     *\n+     * No major changes from {@code RELEASE_2}.\n+     *\/\n+    RELEASE_3,\n+\n+    \/**\n+     * The version introduced by the Java 2 Platform, Standard Edition,\n+     * v 1.4.\n+     *\n+     * Added a simple assertion facility.\n+     *\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=41\">\n+     * JSR 41: A Simple Assertion Facility<\/a>\n+     *\/\n+    RELEASE_4,\n+\n+    \/**\n+     * The version introduced by the Java 2 Platform, Standard\n+     * Edition 5.0.\n+     *\n+     * The language described in\n+     * <cite>The Java Language Specification,\n+     * Third Edition<\/cite>.  First release to support\n+     * generics, annotations, autoboxing, var-args, enhanced {@code\n+     * for} loop, and hexadecimal floating-point literals.\n+     *\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=14\">\n+     * JSR 14: Add Generic Types To The Java&trade; Programming Language<\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=175\">\n+     * JSR 175: A Metadata Facility for the Java&trade; Programming Language<\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=201\">\n+     * JSR 201: Extending the Java&trade; Programming Language with Enumerations,\n+     * Autoboxing, Enhanced for loops and Static Import<\/a>\n+     *\/\n+    RELEASE_5,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 6.\n+     *\n+     * No major changes from {@code RELEASE_5}.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se6\/html\/j3TOC.html\">\n+     * <cite>The Java Language Specification, Third Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_6,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 7.\n+     *\n+     * Additions in this release include diamond syntax for\n+     * constructors, {@code try}-with-resources, strings in switch,\n+     * binary literals, and multi-catch.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 7 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=334\">\n+     * JSR 334: Small Enhancements to the Java&trade; Programming Language<\/a>\n+     * @since 1.7\n+     *\/\n+    RELEASE_7,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 8.\n+     *\n+     * Additions in this release include lambda expressions and default methods.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 8 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=335\">\n+     * JSR 335: Lambda Expressions for the Java&trade; Programming Language<\/a>\n+     * @since 1.8\n+     *\/\n+    RELEASE_8,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 9.\n+     *\n+     * Additions in this release include modules and removal of a\n+     * single underscore from the set of legal identifier names.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se9\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 9 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=376\">\n+     * JSR 376: Java&trade; Platform Module System<\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/213\">\n+     * JEP 213: Milling Project Coin<\/a>\n+     * @since 9\n+     *\/\n+    RELEASE_9,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 10.\n+     *\n+     * Additions in this release include local-variable type inference\n+     * ({@code var}).\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se10\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 10 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/286\">\n+     * JEP 286: Local-Variable Type Inference<\/a>\n+     * @since 10\n+     *\/\n+    RELEASE_10,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 11.\n+     *\n+     * Additions in this release include local-variable syntax for\n+     * lambda parameters.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se11\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 11 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/323\">\n+     * JEP 323: Local-Variable Syntax for Lambda Parameters<\/a>\n+     * @since 11\n+     *\/\n+    RELEASE_11,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 12.\n+     * No major changes from the prior release.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se12\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 12 Edition<\/cite><\/a>\n+     * @since 12\n+     *\/\n+    RELEASE_12,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 13.\n+     * No major changes from the prior release.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se13\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 13 Edition<\/cite><\/a>\n+     * @since 13\n+     *\/\n+    RELEASE_13,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 14.\n+     *\n+     * Additions in this release include switch expressions.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se14\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 14 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/361\">\n+     * JEP 361: Switch Expressions<\/a>\n+     * @since 14\n+     *\/\n+    RELEASE_14,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 15.\n+     *\n+     * Additions in this release include text blocks.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se15\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 15 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/378\">\n+     * JEP 378: Text Blocks<\/a>\n+     * @since 15\n+     *\/\n+    RELEASE_15,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 16.\n+     *\n+     * Additions in this release include records and pattern matching\n+     * for {@code instanceof}.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se16\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 16 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/394\">\n+     * JEP 394: Pattern Matching for instanceof<\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/395\">\n+     * JEP 395: Records<\/a>\n+     * @since 16\n+     *\/\n+    RELEASE_16,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 17.\n+     *\n+     * Additions in this release include sealed classes and\n+     * restoration of always-strict floating-point semantics.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se17\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 17 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/306\">\n+     * JEP 306: Restore Always-Strict Floating-Point Semantics<\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/409\">\n+     * JEP 409: Sealed Classes<\/a>\n+     * @since 17\n+     *\/\n+    RELEASE_17,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 18.\n+     *\n+     * No major changes from the prior release.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se18\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 18 Edition<\/cite><\/a>\n+     * @since 18\n+     *\/\n+    RELEASE_18,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 19.\n+     *\n+     * No major changes from the prior release.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se19\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 19 Edition<\/cite><\/a>\n+     * @since 19\n+     *\/\n+    RELEASE_19,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 20.\n+     *\n+     * No major changes from the prior release.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se20\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 20 Edition<\/cite><\/a>\n+     * @since 20\n+     *\/\n+    RELEASE_20,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 21.\n+     *\n+     * Additions in this release include record patterns and pattern\n+     * matching for {@code switch}.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se21\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 21 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/440\">\n+     * JEP 440: Record Patterns<\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/441\">\n+     * JEP 441: Pattern Matching for switch<\/a>\n+     * @since 21\n+     *\/\n+    RELEASE_21,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 22.\n+     *\n+     * Additions in this release include unnamed variables and unnamed\n+     * patterns.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 22 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/456\">\n+     * JEP 456: Unnamed Variables &amp; Patterns<\/a>\n+     * @since 22\n+     *\/\n+    RELEASE_22,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 23.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se23\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 23 Edition<\/cite><\/a>\n+     * @since 23\n+     *\/\n+    RELEASE_23,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 24.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se24\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 24 Edition<\/cite><\/a>\n+     * @since 24\n+     *\/\n+    RELEASE_24,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 25.\n+     *\n+     * Additions in this release include module import declarations,\n+     * compact source files and instance main methods, and flexible\n+     * constructor bodies.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se25\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 25 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/511\">\n+     * JEP 511: Module Import Declarations<\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/512\">\n+     * JEP 512: Compact Source Files and Instance Main Methods<\/a>\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/513\">\n+     * JEP 513: Flexible Constructor Bodies<\/a>\n+     * @since 25\n+     *\/\n+    RELEASE_25,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 26.\n+     *\n+     * @since 26\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se26\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 26 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_26,\n+    RELEASE_27,\n+\n+    \/\/ Note to maintainers: Add new constants right above.\n+    \/\/ The implementation of latest() must be updated too.\n+    \/\/ Also update the dummy SourceVersion for processing\/model\/TestSourceVersion.\n+    \/**\n+     * An enum constant representing all preview language features of the\n+     * {@linkplain #latest() current Java SE release} in addition to those of\n+     * the latest source version.  Unlike language features associated to enum\n+     * constants representing a source version, language features associated to\n+     * this enum constant are not {@linkplain #isSupported() supported} by later\n+     * Java SE releases.\n+     *\n+     * @apiNote\n+     * While this is not a source version, it can be considered as the source\n+     * version of an arbitrary future Java SE release.  Programmers should test\n+     * compiling their programs with preview features enabled to ensure the\n+     * program is compatible with future Java SE releases.\n+     * <p>\n+     * This is a reflective preview API to allows tools running in Java runtime\n+     * environments with no preview feature enabled to access information\n+     * related to preview features.\n+     * <p>\n+     * As each Java SE release does not support preview features from any other\n+     * release, this constant does not represent those features, and there is\n+     * no constant representing such features this Java Runtime Environment is\n+     * unaware of.  <b>Programmers must check the current Java SE version when\n+     * accessing the preview language features with this constant.<\/b>\n+     *\n+     * @see <a href=\"https:\/\/openjdk.org\/jeps\/12\">\n+     * JEP 12: Preview Features<\/a>\n+     * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\">\n+     * <cite>Java SE Specifications<\/cite><\/a>\n+     * @since 25\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.LANGUAGE_MODEL, reflective = true)\n+    CURRENT_PREVIEW;\n+\n+    \/**\n+     * {@return the latest source version that can be modeled}\n+     *\/\n+    public static SourceVersion latest() {\n+        return RELEASE_27;\n+    }\n+\n+    private static final SourceVersion latestSupported = getLatestSupported();\n+\n+    \/*\n+     * The integer version to enum constant mapping implemented by\n+     * this method assumes the JEP 322: \"Time-Based Release\n+     * Versioning\" scheme is in effect. This scheme began in JDK\n+     * 10. If the JDK versioning scheme is revised, this method may\n+     * need to be updated accordingly.\n+     *\/\n+    private static SourceVersion getLatestSupported() {\n+        int intVersion = Runtime.version().feature();\n+        return (intVersion >= 11) ?\n+                valueOf(\"RELEASE_\" + Math.min(latest().ordinal(), intVersion)):\n+                RELEASE_10;\n+    }\n+\n+    \/**\n+     * {@return the latest source version fully supported by the\n+     * current execution environment}  {@code RELEASE_9} or later must\n+     * be returned.\n+     *\n+     * @apiNote This method is included alongside {@link #latest} to\n+     * allow identification of situations where the language model API\n+     * is running on a platform version different from the latest\n+     * version modeled by the API. One way that sort of situation can\n+     * occur is if an IDE or similar tool is using the API to model\n+     * source version <i>N<\/i> while running on platform version\n+     * (<i>N<\/i>&nbsp;-&nbsp;1). Running in this configuration is\n+     * supported by the API. Running an API on platform versions\n+     * earlier than (<i>N<\/i>&nbsp;-&nbsp;1) or later than <i>N<\/i>\n+     * may or may not work as an implementation detail. If an\n+     * annotation processor was generating code to run under the\n+     * current execution environment, the processor should only use\n+     * platform features up to the {@code latestSupported} release,\n+     * which may be earlier than the {@code latest} release.\n+     *\/\n+    public static SourceVersion latestSupported() {\n+        return latestSupported;\n+    }\n+\n+    \/**\n+     * Returns whether or not {@code name} is a syntactically valid\n+     * identifier (simple name) or keyword in the latest source\n+     * version.  The method returns {@code true} if the name consists\n+     * of an initial character for which {@link\n+     * Character#isJavaIdentifierStart(int)} returns {@code true},\n+     * followed only by characters for which {@link\n+     * Character#isJavaIdentifierPart(int)} returns {@code true}.\n+     * This pattern matches regular identifiers, keywords, contextual\n+     * keywords, boolean literals, and the null literal.\n+     *\n+     * The method returns {@code false} for all other strings.\n+     *\n+     * @param name the string to check\n+     * @return {@code true} if this string is a\n+     * syntactically valid identifier or keyword, {@code false}\n+     * otherwise.\n+     *\n+     * @jls 3.8 Identifiers\n+     *\/\n+    public static boolean isIdentifier(CharSequence name) {\n+        String id = name.toString();\n+\n+        if (id.length() == 0) {\n+            return false;\n+        }\n+        int cp = id.codePointAt(0);\n+        if (!Character.isJavaIdentifierStart(cp)) {\n+            return false;\n+        }\n+        for (int i = Character.charCount(cp);\n+             i < id.length();\n+             i += Character.charCount(cp)) {\n+            cp = id.codePointAt(i);\n+            if (!Character.isJavaIdentifierPart(cp)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    \/**\n+     * Returns whether or not {@code name} is a syntactically valid\n+     * qualified name in the latest source version.\n+     *\n+     * Syntactically, a qualified name is a sequence of identifiers\n+     * separated by period characters (\"{@code .}\"). This method\n+     * splits the input string into period-separated segments and\n+     * applies checks to each segment in turn.\n+     *\n+     * Unlike {@link #isIdentifier isIdentifier}, this method returns\n+     * {@code false} for keywords, boolean literals, and the null\n+     * literal in any segment.\n+     *\n+     * This method returns {@code true} for <i>contextual\n+     * keywords<\/i>.\n+     *\n+     * @param name the string to check\n+     * @return {@code true} if this string is a\n+     * syntactically valid name, {@code false} otherwise.\n+     * @jls 3.9 Keywords\n+     * @jls 6.2 Names and Identifiers\n+     *\/\n+    public static boolean isName(CharSequence name) {\n+        return isName(name, latest());\n+    }\n+\n+    \/**\n+     * Returns whether or not {@code name} is a syntactically valid\n+     * qualified name in the given source version.\n+     *\n+     * Syntactically, a qualified name is a sequence of identifiers\n+     * separated by period characters (\"{@code .}\"). This method\n+     * splits the input string into period-separated segments and\n+     * applies checks to each segment in turn.\n+     *\n+     * Unlike {@link #isIdentifier isIdentifier}, this method returns\n+     * {@code false} for keywords, boolean literals, and the null\n+     * literal in any segment.\n+     *\n+     * This method returns {@code true} for <i>contextual\n+     * keywords<\/i>.\n+     *\n+     * @param name the string to check\n+     * @param version the version to use\n+     * @return {@code true} if this string is a\n+     * syntactically valid name, {@code false} otherwise.\n+     * @jls 3.9 Keywords\n+     * @jls 6.2 Names and Identifiers\n+     * @since 9\n+     *\/\n+    public static boolean isName(CharSequence name, SourceVersion version) {\n+        String id = name.toString();\n+\n+        for(String s : id.split(\"\\\\.\", -1)) {\n+            if (!isIdentifier(s) || isKeyword(s, version))\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    \/**\n+     * Returns whether or not {@code s} is a keyword, a boolean literal,\n+     * or the null literal in the latest source version.\n+     * This method returns {@code false} for <i>contextual\n+     * keywords<\/i>.\n+     *\n+     * @param s the string to check\n+     * @return {@code true} if {@code s} is a keyword, a boolean\n+     * literal, or the null literal, {@code false} otherwise.\n+     * @jls 3.9 Keywords\n+     * @jls 3.10.3 Boolean Literals\n+     * @jls 3.10.8 The Null Literal\n+     *\/\n+    public static boolean isKeyword(CharSequence s) {\n+        return isKeyword(s, latest());\n+    }\n+\n+    \/**\n+     * Returns whether or not {@code s} is a keyword, a boolean literal,\n+     * or the null literal in the given source version.\n+     * This method returns {@code false} for <i>contextual\n+     * keywords<\/i>.\n+     *\n+     * @param s the string to check\n+     * @param version the version to use\n+     * @return {@code true} if {@code s} is a keyword, a boolean\n+     * literal, or the null literal, {@code false} otherwise.\n+     * @jls 3.9 Keywords\n+     * @jls 3.10.3 Boolean Literals\n+     * @jls 3.10.8 The Null Literal\n+     * @since 9\n+     *\/\n+    public static boolean isKeyword(CharSequence s, SourceVersion version) {\n+        String id = s.toString();\n+        switch(id) {\n+            \/\/ A trip through history\n+            case \"strictfp\":\n+                return version.compareTo(RELEASE_2) >= 0;\n+\n+            case \"assert\":\n+                return version.compareTo(RELEASE_4) >= 0;\n+\n+            case \"enum\":\n+                return version.compareTo(RELEASE_5) >= 0;\n+\n+            case \"_\":\n+                return version.compareTo(RELEASE_9) >= 0;\n+\n+            \/\/ case \"non-sealed\": can be added once it is a keyword only\n+            \/\/ dependent on release and not also preview features being\n+            \/\/ enabled.\n+\n+            \/\/ Keywords common across versions\n+\n+            \/\/ Modifiers\n+            case \"public\":    case \"protected\": case \"private\":\n+            case \"abstract\":  case \"static\":    case \"final\":\n+            case \"transient\": case \"volatile\":  case \"synchronized\":\n+            case \"native\":\n+\n+                \/\/ Declarations\n+            case \"class\":     case \"interface\": case \"extends\":\n+            case \"package\":   case \"throws\":    case \"implements\":\n+\n+                \/\/ Primitive types and void\n+            case \"boolean\":   case \"byte\":      case \"char\":\n+            case \"short\":     case \"int\":       case \"long\":\n+            case \"float\":     case \"double\":\n+            case \"void\":\n+\n+                \/\/ Control flow\n+            case \"if\":      case \"else\":\n+            case \"try\":     case \"catch\":    case \"finally\":\n+            case \"do\":      case \"while\":\n+            case \"for\":     case \"continue\":\n+            case \"switch\":  case \"case\":     case \"default\":\n+            case \"break\":   case \"throw\":    case \"return\":\n+\n+                \/\/ Other keywords\n+            case  \"this\":   case \"new\":      case \"super\":\n+            case \"import\":  case \"instanceof\":\n+\n+                \/\/ Forbidden!\n+            case \"goto\":        case \"const\":\n+\n+                \/\/ literals\n+            case \"null\":         case \"true\":       case \"false\":\n+                return true;\n+\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    \/**\n+     * {@return the latest source version that is usable under the\n+     * runtime version argument} If the runtime version's {@linkplain\n+     * Runtime.Version#feature() feature} is greater than the feature\n+     * of the {@linkplain #runtimeVersion() runtime version} of the\n+     * {@linkplain #latest() latest source version}, an {@code\n+     * IllegalArgumentException} is thrown.\n+     *\n+     * <p>Because the source versions of the Java programming language\n+     * have so far followed a linear progression, only the feature\n+     * component of a runtime version is queried to determine the\n+     * mapping to a source version. If that linearity changes in the\n+     * future, other components of the runtime version may influence\n+     * the result.\n+     *\n+     * @apiNote\n+     * An expression to convert from a string value, for example\n+     * {@code \"17\"}, to the corresponding source version, {@code\n+     * RELEASE_17}, is:\n+     *\n+     * {@snippet lang=\"java\" :\n+     * SourceVersion.valueOf(Runtime.Version.parse(\"17\"))}\n+     *\n+     * @param rv runtime version to map to a source version\n+     * @throws IllegalArgumentException if the feature of version\n+     * argument is greater than the feature of the platform version.\n+     * @since 18\n+     *\/\n+    public static SourceVersion valueOf(Runtime.Version rv) {\n+        \/\/ Could also implement this as a switch where a case was\n+        \/\/ added with each new release.\n+        return valueOf(\"RELEASE_\" + rv.feature());\n+    }\n+\n+    \/**\n+     * {@return whether language features associated with this enum constant\n+     * will be supported by future Java SE releases}  Returns {@code false} only\n+     * for {@link #CURRENT_PREVIEW}.\n+     *\n+     * @since 25\n+     *\/\n+    public boolean isSupported() {\n+        return this != CURRENT_PREVIEW;\n+    }\n+\n+    \/**\n+     * {@return the least runtime version that supports this source\n+     * version; otherwise {@code null}} The returned runtime version\n+     * has a {@linkplain Runtime.Version#feature() feature} large\n+     * enough to support this source version and has no other elements\n+     * set.\n+     * <p>\n+     * Source versions greater than or equal to {@link RELEASE_6}\n+     * have non-{@code null} results.  {@link #isSupported() isSupported()}\n+     * determines if runtime versions with greater feature support this source\n+     * version.\n+     *\n+     * @since 18\n+     *\/\n+    public Runtime.Version runtimeVersion() {\n+        if (this == CURRENT_PREVIEW)\n+            return latest().runtimeVersion();\n+        \/\/ The javax.lang.model API was added in JDK 6; for now,\n+        \/\/ limiting supported range to 6 and up.\n+        if (this.compareTo(RELEASE_6) >= 0) {\n+            return Runtime.Version.parse(Integer.toString(ordinal()));\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/java.compiler\/javax\/lang\/model\/SourceVersion.java","additions":827,"deletions":0,"binary":false,"changes":827,"status":"added"}]}