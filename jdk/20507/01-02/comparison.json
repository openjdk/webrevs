{"files":[{"patch":"@@ -359,1 +359,1 @@\n-    case VECTOR_OP_SATURATING_ADD: {\n+    case VECTOR_OP_SADD: {\n@@ -369,1 +369,1 @@\n-    case VECTOR_OP_SATURATING_SUB: {\n+    case VECTOR_OP_SSUB: {\n@@ -379,1 +379,1 @@\n-    case VECTOR_OP_SATURATING_UADD: {\n+    case VECTOR_OP_SUADD: {\n@@ -389,1 +389,1 @@\n-    case VECTOR_OP_SATURATING_USUB: {\n+    case VECTOR_OP_SUSUB: {\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -124,4 +124,4 @@\n-    VECTOR_OP_SATURATING_ADD  = 119,\n-    VECTOR_OP_SATURATING_SUB  = 120,\n-    VECTOR_OP_SATURATING_UADD = 121,\n-    VECTOR_OP_SATURATING_USUB = 122,\n+    VECTOR_OP_SADD  = 119,\n+    VECTOR_OP_SSUB  = 120,\n+    VECTOR_OP_SUADD = 121,\n+    VECTOR_OP_SUSUB = 122,\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-    public static byte umax(byte a, byte b) {\n+    public static byte maxUnsigned(byte a, byte b) {\n@@ -609,1 +609,1 @@\n-    public static byte umin(byte a, byte b) {\n+    public static byte minUnsigned(byte a, byte b) {\n@@ -624,1 +624,1 @@\n-    public static byte saturatingAdd(byte a, byte b) {\n+    public static byte addSaturating(byte a, byte b) {\n@@ -646,1 +646,1 @@\n-    public static byte saturatingSub(byte a, byte b) {\n+    public static byte subSaturating(byte a, byte b) {\n@@ -669,1 +669,1 @@\n-    public static byte saturatingUnsignedAdd(byte a, byte b) {\n+    public static byte addSaturatingUnsigned(byte a, byte b) {\n@@ -689,1 +689,1 @@\n-    public static byte saturatingUnsignedSub(byte a, byte b) {\n+    public static byte subSaturatingUnsigned(byte a, byte b) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2006,1 +2006,1 @@\n-    public static int umax(int a, int b) {\n+    public static int maxUnsigned(int a, int b) {\n@@ -2019,1 +2019,1 @@\n-    public static int umin(int a, int b) {\n+    public static int minUnsigned(int a, int b) {\n@@ -2035,1 +2035,1 @@\n-    public static int saturatingAdd(int a, int b) {\n+    public static int addSaturating(int a, int b) {\n@@ -2057,1 +2057,1 @@\n-    public static int saturatingSub(int a, int b) {\n+    public static int subSaturating(int a, int b) {\n@@ -2080,1 +2080,1 @@\n-    public static int saturatingUnsignedAdd(int a, int b) {\n+    public static int addSaturatingUnsigned(int a, int b) {\n@@ -2100,1 +2100,1 @@\n-    public static int saturatingUnsignedSub(int a, int b) {\n+    public static int subSaturatingUnsigned(int a, int b) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1957,1 +1957,1 @@\n-    public static long umax(long a, long b) {\n+    public static long maxUnsigned(long a, long b) {\n@@ -1970,1 +1970,1 @@\n-    public static long umin(long a, long b) {\n+    public static long minUnsigned(long a, long b) {\n@@ -1985,1 +1985,1 @@\n-    public static long saturatingAdd(long a, long b) {\n+    public static long addSaturating(long a, long b) {\n@@ -2007,1 +2007,1 @@\n-    public static long saturatingSub(long a, long b) {\n+    public static long subSaturating(long a, long b) {\n@@ -2030,1 +2030,1 @@\n-    public static long saturatingUnsignedAdd(long a, long b) {\n+    public static long addSaturatingUnsigned(long a, long b) {\n@@ -2050,1 +2050,1 @@\n-    public static long saturatingUnsignedSub(long a, long b) {\n+    public static long subSaturatingUnsigned(long a, long b) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-    public static short umax(short a, short b) {\n+    public static short maxUnsigned(short a, short b) {\n@@ -644,1 +644,1 @@\n-    public static short umin(short a, short b) {\n+    public static short minUnsigned(short a, short b) {\n@@ -659,1 +659,1 @@\n-    public static short saturatingAdd(short a, short b) {\n+    public static short addSaturating(short a, short b) {\n@@ -681,1 +681,1 @@\n-    public static short saturatingSub(short a, short b) {\n+    public static short subSaturating(short a, short b) {\n@@ -704,1 +704,1 @@\n-    public static short saturatingUnsignedAdd(short a, short b) {\n+    public static short addSaturatingUnsigned(short a, short b) {\n@@ -724,1 +724,1 @@\n-    public static short saturatingUnsignedSub(short a, short b) {\n+    public static short subSaturatingUnsigned(short a, short b) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -117,4 +117,4 @@\n-    public static final int VECTOR_OP_SATURATING_ADD  = 119;\n-    public static final int VECTOR_OP_SATURATING_SUB  = 120;\n-    public static final int VECTOR_OP_SATURATING_UADD = 121;\n-    public static final int VECTOR_OP_SATURATING_USUB = 122;\n+    public static final int VECTOR_OP_SADD  = 119;\n+    public static final int VECTOR_OP_SSUB  = 120;\n+    public static final int VECTOR_OP_SUADD = 121;\n+    public static final int VECTOR_OP_SUSUB = 122;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)Byte.umax(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)Byte.maxUnsigned(a, b));\n@@ -877,9 +877,9 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)Byte.umin(a, b));\n-            case VECTOR_OP_SATURATING_ADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.saturatingAdd(a, b)));\n-            case VECTOR_OP_SATURATING_SUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.saturatingSub(a, b)));\n-            case VECTOR_OP_SATURATING_UADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.saturatingUnsignedAdd(a, b)));\n-            case VECTOR_OP_SATURATING_USUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.saturatingUnsignedSub(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)Byte.minUnsigned(a, b));\n+            case VECTOR_OP_SADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.addSaturating(a, b)));\n+            case VECTOR_OP_SSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.subSaturating(a, b)));\n+            case VECTOR_OP_SUADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.addSaturatingUnsigned(a, b)));\n+            case VECTOR_OP_SUSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)Integer.umax(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)Integer.maxUnsigned(a, b));\n@@ -877,9 +877,9 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)Integer.umin(a, b));\n-            case VECTOR_OP_SATURATING_ADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.saturatingAdd(a, b)));\n-            case VECTOR_OP_SATURATING_SUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.saturatingSub(a, b)));\n-            case VECTOR_OP_SATURATING_UADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.saturatingUnsignedAdd(a, b)));\n-            case VECTOR_OP_SATURATING_USUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.saturatingUnsignedSub(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)Integer.minUnsigned(a, b));\n+            case VECTOR_OP_SADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.addSaturating(a, b)));\n+            case VECTOR_OP_SSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.subSaturating(a, b)));\n+            case VECTOR_OP_SUADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.addSaturatingUnsigned(a, b)));\n+            case VECTOR_OP_SUSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -833,1 +833,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)Long.umax(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)Long.maxUnsigned(a, b));\n@@ -835,9 +835,9 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)Long.umin(a, b));\n-            case VECTOR_OP_SATURATING_ADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.saturatingAdd(a, b)));\n-            case VECTOR_OP_SATURATING_SUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.saturatingSub(a, b)));\n-            case VECTOR_OP_SATURATING_UADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.saturatingUnsignedAdd(a, b)));\n-            case VECTOR_OP_SATURATING_USUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.saturatingUnsignedSub(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)Long.minUnsigned(a, b));\n+            case VECTOR_OP_SADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.addSaturating(a, b)));\n+            case VECTOR_OP_SSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.subSaturating(a, b)));\n+            case VECTOR_OP_SUADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.addSaturatingUnsigned(a, b)));\n+            case VECTOR_OP_SUSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)Short.umax(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)Short.maxUnsigned(a, b));\n@@ -877,9 +877,9 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)Short.umin(a, b));\n-            case VECTOR_OP_SATURATING_ADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.saturatingAdd(a, b)));\n-            case VECTOR_OP_SATURATING_SUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.saturatingSub(a, b)));\n-            case VECTOR_OP_SATURATING_UADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.saturatingUnsignedAdd(a, b)));\n-            case VECTOR_OP_SATURATING_USUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.saturatingUnsignedSub(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)Short.minUnsigned(a, b));\n+            case VECTOR_OP_SADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.addSaturating(a, b)));\n+            case VECTOR_OP_SSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.subSaturating(a, b)));\n+            case VECTOR_OP_SUADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.addSaturatingUnsigned(a, b)));\n+            case VECTOR_OP_SUSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -571,1 +571,1 @@\n-    public static final Associative SATURATING_ADD = assoc(\"SATURATING_ADD\", \"+\", VectorSupport.VECTOR_OP_SATURATING_ADD, VO_NOFP+VO_ASSOC);\n+    public static final Associative SADD = assoc(\"SADD\", \"+\", VectorSupport.VECTOR_OP_SADD, VO_NOFP+VO_ASSOC);\n@@ -573,1 +573,1 @@\n-    public static final Associative SATURATING_UADD = assoc(\"SATURATING_UADD\", \"+\", VectorSupport.VECTOR_OP_SATURATING_UADD, VO_NOFP+VO_ASSOC);\n+    public static final Associative SUADD = assoc(\"SUADD\", \"+\", VectorSupport.VECTOR_OP_SUADD, VO_NOFP+VO_ASSOC);\n@@ -575,1 +575,1 @@\n-    public static final Binary SATURATING_SUB = binary(\"SATURATING_SUB\", \"-\", VectorSupport.VECTOR_OP_SATURATING_SUB, VO_NOFP);\n+    public static final Binary SSUB = binary(\"SSUB\", \"-\", VectorSupport.VECTOR_OP_SSUB, VO_NOFP);\n@@ -577,1 +577,1 @@\n-    public static final Binary SATURATING_USUB = binary(\"SATURATING_USUB\", \"-\", VectorSupport.VECTOR_OP_SATURATING_USUB, VO_NOFP);\n+    public static final Binary SUSUB = binary(\"SUSUB\", \"-\", VectorSupport.VECTOR_OP_SUSUB, VO_NOFP);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -971,1 +971,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)$Boxtype$.umax(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)$Boxtype$.maxUnsigned(a, b));\n@@ -973,9 +973,9 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)$Boxtype$.umin(a, b));\n-            case VECTOR_OP_SATURATING_ADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.saturatingAdd(a, b)));\n-            case VECTOR_OP_SATURATING_SUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.saturatingSub(a, b)));\n-            case VECTOR_OP_SATURATING_UADD: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.saturatingUnsignedAdd(a, b)));\n-            case VECTOR_OP_SATURATING_USUB: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.saturatingUnsignedSub(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)$Boxtype$.minUnsigned(a, b));\n+            case VECTOR_OP_SADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.addSaturating(a, b)));\n+            case VECTOR_OP_SSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.subSaturating(a, b)));\n+            case VECTOR_OP_SUADD: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.addSaturatingUnsigned(a, b)));\n+            case VECTOR_OP_SUSUB: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2975,1 +2975,1 @@\n-        return (byte)(Byte.umin(a, b));\n+        return (byte)(Byte.minUnsigned(a, b));\n@@ -3016,1 +3016,1 @@\n-        return (byte)(Byte.umax(a, b));\n+        return (byte)(Byte.maxUnsigned(a, b));\n@@ -3056,2 +3056,2 @@\n-    static byte SATURATING_ADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingAdd(a, b));\n+    static byte SADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturating(a, b));\n@@ -3061,1 +3061,1 @@\n-    static void SATURATING_ADDByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SADDByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3070,1 +3070,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3074,1 +3074,1 @@\n-        assertArraysEquals(r, a, b, Byte128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Byte128VectorTests::SADD);\n@@ -3078,1 +3078,1 @@\n-    static void SATURATING_ADDByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SADDByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3090,1 +3090,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3094,1 +3094,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SADD);\n@@ -3097,2 +3097,2 @@\n-    static byte SATURATING_SUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingSub(a, b));\n+    static byte SSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturating(a, b));\n@@ -3102,1 +3102,1 @@\n-    static void SATURATING_SUBByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SSUBByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3111,1 +3111,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3115,1 +3115,1 @@\n-        assertArraysEquals(r, a, b, Byte128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Byte128VectorTests::SSUB);\n@@ -3119,1 +3119,1 @@\n-    static void SATURATING_SUBByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SSUBByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3131,1 +3131,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3135,1 +3135,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SSUB);\n@@ -3138,2 +3138,2 @@\n-    static byte SATURATING_UADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedAdd(a, b));\n+    static byte SUADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturatingUnsigned(a, b));\n@@ -3143,1 +3143,1 @@\n-    static void SATURATING_UADDByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUADDByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3152,1 +3152,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3156,1 +3156,1 @@\n-        assertArraysEquals(r, a, b, Byte128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Byte128VectorTests::SUADD);\n@@ -3160,1 +3160,1 @@\n-    static void SATURATING_UADDByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUADDByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3172,1 +3172,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3176,1 +3176,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SUADD);\n@@ -3179,2 +3179,2 @@\n-    static byte SATURATING_USUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedSub(a, b));\n+    static byte SUSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturatingUnsigned(a, b));\n@@ -3184,1 +3184,1 @@\n-    static void SATURATING_USUBByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUSUBByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3193,1 +3193,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3197,1 +3197,1 @@\n-        assertArraysEquals(r, a, b, Byte128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Byte128VectorTests::SUSUB);\n@@ -3201,1 +3201,1 @@\n-    static void SATURATING_USUBByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUSUBByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3213,1 +3213,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3217,1 +3217,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Byte128VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2975,1 +2975,1 @@\n-        return (byte)(Byte.umin(a, b));\n+        return (byte)(Byte.minUnsigned(a, b));\n@@ -3016,1 +3016,1 @@\n-        return (byte)(Byte.umax(a, b));\n+        return (byte)(Byte.maxUnsigned(a, b));\n@@ -3056,2 +3056,2 @@\n-    static byte SATURATING_ADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingAdd(a, b));\n+    static byte SADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturating(a, b));\n@@ -3061,1 +3061,1 @@\n-    static void SATURATING_ADDByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SADDByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3070,1 +3070,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3074,1 +3074,1 @@\n-        assertArraysEquals(r, a, b, Byte256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Byte256VectorTests::SADD);\n@@ -3078,1 +3078,1 @@\n-    static void SATURATING_ADDByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SADDByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3090,1 +3090,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3094,1 +3094,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SADD);\n@@ -3097,2 +3097,2 @@\n-    static byte SATURATING_SUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingSub(a, b));\n+    static byte SSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturating(a, b));\n@@ -3102,1 +3102,1 @@\n-    static void SATURATING_SUBByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SSUBByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3111,1 +3111,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3115,1 +3115,1 @@\n-        assertArraysEquals(r, a, b, Byte256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Byte256VectorTests::SSUB);\n@@ -3119,1 +3119,1 @@\n-    static void SATURATING_SUBByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SSUBByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3131,1 +3131,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3135,1 +3135,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SSUB);\n@@ -3138,2 +3138,2 @@\n-    static byte SATURATING_UADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedAdd(a, b));\n+    static byte SUADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturatingUnsigned(a, b));\n@@ -3143,1 +3143,1 @@\n-    static void SATURATING_UADDByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUADDByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3152,1 +3152,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3156,1 +3156,1 @@\n-        assertArraysEquals(r, a, b, Byte256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Byte256VectorTests::SUADD);\n@@ -3160,1 +3160,1 @@\n-    static void SATURATING_UADDByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUADDByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3172,1 +3172,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3176,1 +3176,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SUADD);\n@@ -3179,2 +3179,2 @@\n-    static byte SATURATING_USUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedSub(a, b));\n+    static byte SUSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturatingUnsigned(a, b));\n@@ -3184,1 +3184,1 @@\n-    static void SATURATING_USUBByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUSUBByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3193,1 +3193,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3197,1 +3197,1 @@\n-        assertArraysEquals(r, a, b, Byte256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Byte256VectorTests::SUSUB);\n@@ -3201,1 +3201,1 @@\n-    static void SATURATING_USUBByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUSUBByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3213,1 +3213,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3217,1 +3217,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Byte256VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2975,1 +2975,1 @@\n-        return (byte)(Byte.umin(a, b));\n+        return (byte)(Byte.minUnsigned(a, b));\n@@ -3016,1 +3016,1 @@\n-        return (byte)(Byte.umax(a, b));\n+        return (byte)(Byte.maxUnsigned(a, b));\n@@ -3056,2 +3056,2 @@\n-    static byte SATURATING_ADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingAdd(a, b));\n+    static byte SADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturating(a, b));\n@@ -3061,1 +3061,1 @@\n-    static void SATURATING_ADDByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SADDByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3070,1 +3070,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3074,1 +3074,1 @@\n-        assertArraysEquals(r, a, b, Byte512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Byte512VectorTests::SADD);\n@@ -3078,1 +3078,1 @@\n-    static void SATURATING_ADDByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SADDByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3090,1 +3090,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3094,1 +3094,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SADD);\n@@ -3097,2 +3097,2 @@\n-    static byte SATURATING_SUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingSub(a, b));\n+    static byte SSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturating(a, b));\n@@ -3102,1 +3102,1 @@\n-    static void SATURATING_SUBByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SSUBByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3111,1 +3111,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3115,1 +3115,1 @@\n-        assertArraysEquals(r, a, b, Byte512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Byte512VectorTests::SSUB);\n@@ -3119,1 +3119,1 @@\n-    static void SATURATING_SUBByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SSUBByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3131,1 +3131,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3135,1 +3135,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SSUB);\n@@ -3138,2 +3138,2 @@\n-    static byte SATURATING_UADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedAdd(a, b));\n+    static byte SUADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturatingUnsigned(a, b));\n@@ -3143,1 +3143,1 @@\n-    static void SATURATING_UADDByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUADDByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3152,1 +3152,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3156,1 +3156,1 @@\n-        assertArraysEquals(r, a, b, Byte512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Byte512VectorTests::SUADD);\n@@ -3160,1 +3160,1 @@\n-    static void SATURATING_UADDByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUADDByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3172,1 +3172,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3176,1 +3176,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SUADD);\n@@ -3179,2 +3179,2 @@\n-    static byte SATURATING_USUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedSub(a, b));\n+    static byte SUSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturatingUnsigned(a, b));\n@@ -3184,1 +3184,1 @@\n-    static void SATURATING_USUBByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUSUBByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3193,1 +3193,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3197,1 +3197,1 @@\n-        assertArraysEquals(r, a, b, Byte512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Byte512VectorTests::SUSUB);\n@@ -3201,1 +3201,1 @@\n-    static void SATURATING_USUBByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUSUBByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3213,1 +3213,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3217,1 +3217,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Byte512VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2975,1 +2975,1 @@\n-        return (byte)(Byte.umin(a, b));\n+        return (byte)(Byte.minUnsigned(a, b));\n@@ -3016,1 +3016,1 @@\n-        return (byte)(Byte.umax(a, b));\n+        return (byte)(Byte.maxUnsigned(a, b));\n@@ -3056,2 +3056,2 @@\n-    static byte SATURATING_ADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingAdd(a, b));\n+    static byte SADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturating(a, b));\n@@ -3061,1 +3061,1 @@\n-    static void SATURATING_ADDByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SADDByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3070,1 +3070,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3074,1 +3074,1 @@\n-        assertArraysEquals(r, a, b, Byte64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Byte64VectorTests::SADD);\n@@ -3078,1 +3078,1 @@\n-    static void SATURATING_ADDByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SADDByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3090,1 +3090,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3094,1 +3094,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SADD);\n@@ -3097,2 +3097,2 @@\n-    static byte SATURATING_SUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingSub(a, b));\n+    static byte SSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturating(a, b));\n@@ -3102,1 +3102,1 @@\n-    static void SATURATING_SUBByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SSUBByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3111,1 +3111,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3115,1 +3115,1 @@\n-        assertArraysEquals(r, a, b, Byte64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Byte64VectorTests::SSUB);\n@@ -3119,1 +3119,1 @@\n-    static void SATURATING_SUBByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SSUBByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3131,1 +3131,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3135,1 +3135,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SSUB);\n@@ -3138,2 +3138,2 @@\n-    static byte SATURATING_UADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedAdd(a, b));\n+    static byte SUADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturatingUnsigned(a, b));\n@@ -3143,1 +3143,1 @@\n-    static void SATURATING_UADDByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUADDByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3152,1 +3152,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3156,1 +3156,1 @@\n-        assertArraysEquals(r, a, b, Byte64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Byte64VectorTests::SUADD);\n@@ -3160,1 +3160,1 @@\n-    static void SATURATING_UADDByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUADDByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3172,1 +3172,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3176,1 +3176,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SUADD);\n@@ -3179,2 +3179,2 @@\n-    static byte SATURATING_USUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedSub(a, b));\n+    static byte SUSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturatingUnsigned(a, b));\n@@ -3184,1 +3184,1 @@\n-    static void SATURATING_USUBByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUSUBByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3193,1 +3193,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3197,1 +3197,1 @@\n-        assertArraysEquals(r, a, b, Byte64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Byte64VectorTests::SUSUB);\n@@ -3201,1 +3201,1 @@\n-    static void SATURATING_USUBByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUSUBByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3213,1 +3213,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3217,1 +3217,1 @@\n-        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Byte64VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2980,1 +2980,1 @@\n-        return (byte)(Byte.umin(a, b));\n+        return (byte)(Byte.minUnsigned(a, b));\n@@ -3021,1 +3021,1 @@\n-        return (byte)(Byte.umax(a, b));\n+        return (byte)(Byte.maxUnsigned(a, b));\n@@ -3061,2 +3061,2 @@\n-    static byte SATURATING_ADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingAdd(a, b));\n+    static byte SADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturating(a, b));\n@@ -3066,1 +3066,1 @@\n-    static void SATURATING_ADDByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SADDByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3075,1 +3075,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3079,1 +3079,1 @@\n-        assertArraysEquals(r, a, b, ByteMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, ByteMaxVectorTests::SADD);\n@@ -3083,1 +3083,1 @@\n-    static void SATURATING_ADDByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SADDByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3095,1 +3095,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3099,1 +3099,1 @@\n-        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SADD);\n@@ -3102,2 +3102,2 @@\n-    static byte SATURATING_SUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingSub(a, b));\n+    static byte SSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturating(a, b));\n@@ -3107,1 +3107,1 @@\n-    static void SATURATING_SUBByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SSUBByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3116,1 +3116,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3120,1 +3120,1 @@\n-        assertArraysEquals(r, a, b, ByteMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, ByteMaxVectorTests::SSUB);\n@@ -3124,1 +3124,1 @@\n-    static void SATURATING_SUBByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SSUBByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3136,1 +3136,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3140,1 +3140,1 @@\n-        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SSUB);\n@@ -3143,2 +3143,2 @@\n-    static byte SATURATING_UADD(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedAdd(a, b));\n+    static byte SUADD(byte a, byte b) {\n+        return (byte)(Byte.addSaturatingUnsigned(a, b));\n@@ -3148,1 +3148,1 @@\n-    static void SATURATING_UADDByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUADDByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3157,1 +3157,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3161,1 +3161,1 @@\n-        assertArraysEquals(r, a, b, ByteMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, ByteMaxVectorTests::SUADD);\n@@ -3165,1 +3165,1 @@\n-    static void SATURATING_UADDByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUADDByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3177,1 +3177,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3181,1 +3181,1 @@\n-        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SUADD);\n@@ -3184,2 +3184,2 @@\n-    static byte SATURATING_USUB(byte a, byte b) {\n-        return (byte)(Byte.saturatingUnsignedSub(a, b));\n+    static byte SUSUB(byte a, byte b) {\n+        return (byte)(Byte.subSaturatingUnsigned(a, b));\n@@ -3189,1 +3189,1 @@\n-    static void SATURATING_USUBByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void SUSUBByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -3198,1 +3198,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3202,1 +3202,1 @@\n-        assertArraysEquals(r, a, b, ByteMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, ByteMaxVectorTests::SUSUB);\n@@ -3206,1 +3206,1 @@\n-    static void SATURATING_USUBByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void SUSUBByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -3218,1 +3218,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3222,1 +3222,1 @@\n-        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3019,1 +3019,1 @@\n-        return (int)(Integer.umin(a, b));\n+        return (int)(Integer.minUnsigned(a, b));\n@@ -3060,1 +3060,1 @@\n-        return (int)(Integer.umax(a, b));\n+        return (int)(Integer.maxUnsigned(a, b));\n@@ -3100,2 +3100,2 @@\n-    static int SATURATING_ADD(int a, int b) {\n-        return (int)(Integer.saturatingAdd(a, b));\n+    static int SADD(int a, int b) {\n+        return (int)(Integer.addSaturating(a, b));\n@@ -3105,1 +3105,1 @@\n-    static void SATURATING_ADDInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SADDInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3114,1 +3114,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3118,1 +3118,1 @@\n-        assertArraysEquals(r, a, b, Int128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Int128VectorTests::SADD);\n@@ -3122,1 +3122,1 @@\n-    static void SATURATING_ADDInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SADDInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3134,1 +3134,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3138,1 +3138,1 @@\n-        assertArraysEquals(r, a, b, mask, Int128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Int128VectorTests::SADD);\n@@ -3141,2 +3141,2 @@\n-    static int SATURATING_SUB(int a, int b) {\n-        return (int)(Integer.saturatingSub(a, b));\n+    static int SSUB(int a, int b) {\n+        return (int)(Integer.subSaturating(a, b));\n@@ -3146,1 +3146,1 @@\n-    static void SATURATING_SUBInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SSUBInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3155,1 +3155,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3159,1 +3159,1 @@\n-        assertArraysEquals(r, a, b, Int128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Int128VectorTests::SSUB);\n@@ -3163,1 +3163,1 @@\n-    static void SATURATING_SUBInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SSUBInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3175,1 +3175,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3179,1 +3179,1 @@\n-        assertArraysEquals(r, a, b, mask, Int128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Int128VectorTests::SSUB);\n@@ -3182,2 +3182,2 @@\n-    static int SATURATING_UADD(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedAdd(a, b));\n+    static int SUADD(int a, int b) {\n+        return (int)(Integer.addSaturatingUnsigned(a, b));\n@@ -3187,1 +3187,1 @@\n-    static void SATURATING_UADDInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUADDInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3196,1 +3196,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3200,1 +3200,1 @@\n-        assertArraysEquals(r, a, b, Int128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Int128VectorTests::SUADD);\n@@ -3204,1 +3204,1 @@\n-    static void SATURATING_UADDInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUADDInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3216,1 +3216,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3220,1 +3220,1 @@\n-        assertArraysEquals(r, a, b, mask, Int128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Int128VectorTests::SUADD);\n@@ -3223,2 +3223,2 @@\n-    static int SATURATING_USUB(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedSub(a, b));\n+    static int SUSUB(int a, int b) {\n+        return (int)(Integer.subSaturatingUnsigned(a, b));\n@@ -3228,1 +3228,1 @@\n-    static void SATURATING_USUBInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUSUBInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3237,1 +3237,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3241,1 +3241,1 @@\n-        assertArraysEquals(r, a, b, Int128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Int128VectorTests::SUSUB);\n@@ -3245,1 +3245,1 @@\n-    static void SATURATING_USUBInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUSUBInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3257,1 +3257,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3261,1 +3261,1 @@\n-        assertArraysEquals(r, a, b, mask, Int128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Int128VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3019,1 +3019,1 @@\n-        return (int)(Integer.umin(a, b));\n+        return (int)(Integer.minUnsigned(a, b));\n@@ -3060,1 +3060,1 @@\n-        return (int)(Integer.umax(a, b));\n+        return (int)(Integer.maxUnsigned(a, b));\n@@ -3100,2 +3100,2 @@\n-    static int SATURATING_ADD(int a, int b) {\n-        return (int)(Integer.saturatingAdd(a, b));\n+    static int SADD(int a, int b) {\n+        return (int)(Integer.addSaturating(a, b));\n@@ -3105,1 +3105,1 @@\n-    static void SATURATING_ADDInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SADDInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3114,1 +3114,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3118,1 +3118,1 @@\n-        assertArraysEquals(r, a, b, Int256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Int256VectorTests::SADD);\n@@ -3122,1 +3122,1 @@\n-    static void SATURATING_ADDInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SADDInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3134,1 +3134,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3138,1 +3138,1 @@\n-        assertArraysEquals(r, a, b, mask, Int256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Int256VectorTests::SADD);\n@@ -3141,2 +3141,2 @@\n-    static int SATURATING_SUB(int a, int b) {\n-        return (int)(Integer.saturatingSub(a, b));\n+    static int SSUB(int a, int b) {\n+        return (int)(Integer.subSaturating(a, b));\n@@ -3146,1 +3146,1 @@\n-    static void SATURATING_SUBInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SSUBInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3155,1 +3155,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3159,1 +3159,1 @@\n-        assertArraysEquals(r, a, b, Int256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Int256VectorTests::SSUB);\n@@ -3163,1 +3163,1 @@\n-    static void SATURATING_SUBInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SSUBInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3175,1 +3175,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3179,1 +3179,1 @@\n-        assertArraysEquals(r, a, b, mask, Int256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Int256VectorTests::SSUB);\n@@ -3182,2 +3182,2 @@\n-    static int SATURATING_UADD(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedAdd(a, b));\n+    static int SUADD(int a, int b) {\n+        return (int)(Integer.addSaturatingUnsigned(a, b));\n@@ -3187,1 +3187,1 @@\n-    static void SATURATING_UADDInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUADDInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3196,1 +3196,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3200,1 +3200,1 @@\n-        assertArraysEquals(r, a, b, Int256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Int256VectorTests::SUADD);\n@@ -3204,1 +3204,1 @@\n-    static void SATURATING_UADDInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUADDInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3216,1 +3216,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3220,1 +3220,1 @@\n-        assertArraysEquals(r, a, b, mask, Int256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Int256VectorTests::SUADD);\n@@ -3223,2 +3223,2 @@\n-    static int SATURATING_USUB(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedSub(a, b));\n+    static int SUSUB(int a, int b) {\n+        return (int)(Integer.subSaturatingUnsigned(a, b));\n@@ -3228,1 +3228,1 @@\n-    static void SATURATING_USUBInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUSUBInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3237,1 +3237,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3241,1 +3241,1 @@\n-        assertArraysEquals(r, a, b, Int256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Int256VectorTests::SUSUB);\n@@ -3245,1 +3245,1 @@\n-    static void SATURATING_USUBInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUSUBInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3257,1 +3257,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3261,1 +3261,1 @@\n-        assertArraysEquals(r, a, b, mask, Int256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Int256VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3019,1 +3019,1 @@\n-        return (int)(Integer.umin(a, b));\n+        return (int)(Integer.minUnsigned(a, b));\n@@ -3060,1 +3060,1 @@\n-        return (int)(Integer.umax(a, b));\n+        return (int)(Integer.maxUnsigned(a, b));\n@@ -3100,2 +3100,2 @@\n-    static int SATURATING_ADD(int a, int b) {\n-        return (int)(Integer.saturatingAdd(a, b));\n+    static int SADD(int a, int b) {\n+        return (int)(Integer.addSaturating(a, b));\n@@ -3105,1 +3105,1 @@\n-    static void SATURATING_ADDInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SADDInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3114,1 +3114,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3118,1 +3118,1 @@\n-        assertArraysEquals(r, a, b, Int512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Int512VectorTests::SADD);\n@@ -3122,1 +3122,1 @@\n-    static void SATURATING_ADDInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SADDInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3134,1 +3134,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3138,1 +3138,1 @@\n-        assertArraysEquals(r, a, b, mask, Int512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Int512VectorTests::SADD);\n@@ -3141,2 +3141,2 @@\n-    static int SATURATING_SUB(int a, int b) {\n-        return (int)(Integer.saturatingSub(a, b));\n+    static int SSUB(int a, int b) {\n+        return (int)(Integer.subSaturating(a, b));\n@@ -3146,1 +3146,1 @@\n-    static void SATURATING_SUBInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SSUBInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3155,1 +3155,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3159,1 +3159,1 @@\n-        assertArraysEquals(r, a, b, Int512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Int512VectorTests::SSUB);\n@@ -3163,1 +3163,1 @@\n-    static void SATURATING_SUBInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SSUBInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3175,1 +3175,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3179,1 +3179,1 @@\n-        assertArraysEquals(r, a, b, mask, Int512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Int512VectorTests::SSUB);\n@@ -3182,2 +3182,2 @@\n-    static int SATURATING_UADD(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedAdd(a, b));\n+    static int SUADD(int a, int b) {\n+        return (int)(Integer.addSaturatingUnsigned(a, b));\n@@ -3187,1 +3187,1 @@\n-    static void SATURATING_UADDInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUADDInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3196,1 +3196,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3200,1 +3200,1 @@\n-        assertArraysEquals(r, a, b, Int512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Int512VectorTests::SUADD);\n@@ -3204,1 +3204,1 @@\n-    static void SATURATING_UADDInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUADDInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3216,1 +3216,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3220,1 +3220,1 @@\n-        assertArraysEquals(r, a, b, mask, Int512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Int512VectorTests::SUADD);\n@@ -3223,2 +3223,2 @@\n-    static int SATURATING_USUB(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedSub(a, b));\n+    static int SUSUB(int a, int b) {\n+        return (int)(Integer.subSaturatingUnsigned(a, b));\n@@ -3228,1 +3228,1 @@\n-    static void SATURATING_USUBInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUSUBInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3237,1 +3237,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3241,1 +3241,1 @@\n-        assertArraysEquals(r, a, b, Int512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Int512VectorTests::SUSUB);\n@@ -3245,1 +3245,1 @@\n-    static void SATURATING_USUBInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUSUBInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3257,1 +3257,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3261,1 +3261,1 @@\n-        assertArraysEquals(r, a, b, mask, Int512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Int512VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3019,1 +3019,1 @@\n-        return (int)(Integer.umin(a, b));\n+        return (int)(Integer.minUnsigned(a, b));\n@@ -3060,1 +3060,1 @@\n-        return (int)(Integer.umax(a, b));\n+        return (int)(Integer.maxUnsigned(a, b));\n@@ -3100,2 +3100,2 @@\n-    static int SATURATING_ADD(int a, int b) {\n-        return (int)(Integer.saturatingAdd(a, b));\n+    static int SADD(int a, int b) {\n+        return (int)(Integer.addSaturating(a, b));\n@@ -3105,1 +3105,1 @@\n-    static void SATURATING_ADDInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SADDInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3114,1 +3114,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3118,1 +3118,1 @@\n-        assertArraysEquals(r, a, b, Int64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Int64VectorTests::SADD);\n@@ -3122,1 +3122,1 @@\n-    static void SATURATING_ADDInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SADDInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3134,1 +3134,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3138,1 +3138,1 @@\n-        assertArraysEquals(r, a, b, mask, Int64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Int64VectorTests::SADD);\n@@ -3141,2 +3141,2 @@\n-    static int SATURATING_SUB(int a, int b) {\n-        return (int)(Integer.saturatingSub(a, b));\n+    static int SSUB(int a, int b) {\n+        return (int)(Integer.subSaturating(a, b));\n@@ -3146,1 +3146,1 @@\n-    static void SATURATING_SUBInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SSUBInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3155,1 +3155,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3159,1 +3159,1 @@\n-        assertArraysEquals(r, a, b, Int64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Int64VectorTests::SSUB);\n@@ -3163,1 +3163,1 @@\n-    static void SATURATING_SUBInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SSUBInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3175,1 +3175,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3179,1 +3179,1 @@\n-        assertArraysEquals(r, a, b, mask, Int64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Int64VectorTests::SSUB);\n@@ -3182,2 +3182,2 @@\n-    static int SATURATING_UADD(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedAdd(a, b));\n+    static int SUADD(int a, int b) {\n+        return (int)(Integer.addSaturatingUnsigned(a, b));\n@@ -3187,1 +3187,1 @@\n-    static void SATURATING_UADDInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUADDInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3196,1 +3196,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3200,1 +3200,1 @@\n-        assertArraysEquals(r, a, b, Int64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Int64VectorTests::SUADD);\n@@ -3204,1 +3204,1 @@\n-    static void SATURATING_UADDInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUADDInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3216,1 +3216,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3220,1 +3220,1 @@\n-        assertArraysEquals(r, a, b, mask, Int64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Int64VectorTests::SUADD);\n@@ -3223,2 +3223,2 @@\n-    static int SATURATING_USUB(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedSub(a, b));\n+    static int SUSUB(int a, int b) {\n+        return (int)(Integer.subSaturatingUnsigned(a, b));\n@@ -3228,1 +3228,1 @@\n-    static void SATURATING_USUBInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUSUBInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3237,1 +3237,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3241,1 +3241,1 @@\n-        assertArraysEquals(r, a, b, Int64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Int64VectorTests::SUSUB);\n@@ -3245,1 +3245,1 @@\n-    static void SATURATING_USUBInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUSUBInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3257,1 +3257,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3261,1 +3261,1 @@\n-        assertArraysEquals(r, a, b, mask, Int64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Int64VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3024,1 +3024,1 @@\n-        return (int)(Integer.umin(a, b));\n+        return (int)(Integer.minUnsigned(a, b));\n@@ -3065,1 +3065,1 @@\n-        return (int)(Integer.umax(a, b));\n+        return (int)(Integer.maxUnsigned(a, b));\n@@ -3105,2 +3105,2 @@\n-    static int SATURATING_ADD(int a, int b) {\n-        return (int)(Integer.saturatingAdd(a, b));\n+    static int SADD(int a, int b) {\n+        return (int)(Integer.addSaturating(a, b));\n@@ -3110,1 +3110,1 @@\n-    static void SATURATING_ADDIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SADDIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3119,1 +3119,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3123,1 +3123,1 @@\n-        assertArraysEquals(r, a, b, IntMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, IntMaxVectorTests::SADD);\n@@ -3127,1 +3127,1 @@\n-    static void SATURATING_ADDIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SADDIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3139,1 +3139,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3143,1 +3143,1 @@\n-        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SADD);\n@@ -3146,2 +3146,2 @@\n-    static int SATURATING_SUB(int a, int b) {\n-        return (int)(Integer.saturatingSub(a, b));\n+    static int SSUB(int a, int b) {\n+        return (int)(Integer.subSaturating(a, b));\n@@ -3151,1 +3151,1 @@\n-    static void SATURATING_SUBIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SSUBIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3160,1 +3160,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3164,1 +3164,1 @@\n-        assertArraysEquals(r, a, b, IntMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, IntMaxVectorTests::SSUB);\n@@ -3168,1 +3168,1 @@\n-    static void SATURATING_SUBIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SSUBIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3180,1 +3180,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3184,1 +3184,1 @@\n-        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SSUB);\n@@ -3187,2 +3187,2 @@\n-    static int SATURATING_UADD(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedAdd(a, b));\n+    static int SUADD(int a, int b) {\n+        return (int)(Integer.addSaturatingUnsigned(a, b));\n@@ -3192,1 +3192,1 @@\n-    static void SATURATING_UADDIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUADDIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3201,1 +3201,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3205,1 +3205,1 @@\n-        assertArraysEquals(r, a, b, IntMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, IntMaxVectorTests::SUADD);\n@@ -3209,1 +3209,1 @@\n-    static void SATURATING_UADDIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUADDIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3221,1 +3221,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3225,1 +3225,1 @@\n-        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SUADD);\n@@ -3228,2 +3228,2 @@\n-    static int SATURATING_USUB(int a, int b) {\n-        return (int)(Integer.saturatingUnsignedSub(a, b));\n+    static int SUSUB(int a, int b) {\n+        return (int)(Integer.subSaturatingUnsigned(a, b));\n@@ -3233,1 +3233,1 @@\n-    static void SATURATING_USUBIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void SUSUBIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -3242,1 +3242,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3246,1 +3246,1 @@\n-        assertArraysEquals(r, a, b, IntMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, IntMaxVectorTests::SUSUB);\n@@ -3250,1 +3250,1 @@\n-    static void SATURATING_USUBIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void SUSUBIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -3262,1 +3262,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3266,1 +3266,1 @@\n-        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3041,1 +3041,1 @@\n-        return (long)(Long.umin(a, b));\n+        return (long)(Long.minUnsigned(a, b));\n@@ -3082,1 +3082,1 @@\n-        return (long)(Long.umax(a, b));\n+        return (long)(Long.maxUnsigned(a, b));\n@@ -3122,2 +3122,2 @@\n-    static long SATURATING_ADD(long a, long b) {\n-        return (long)(Long.saturatingAdd(a, b));\n+    static long SADD(long a, long b) {\n+        return (long)(Long.addSaturating(a, b));\n@@ -3127,1 +3127,1 @@\n-    static void SATURATING_ADDLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SADDLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3136,1 +3136,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3140,1 +3140,1 @@\n-        assertArraysEquals(r, a, b, Long128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Long128VectorTests::SADD);\n@@ -3144,1 +3144,1 @@\n-    static void SATURATING_ADDLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SADDLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3156,1 +3156,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3160,1 +3160,1 @@\n-        assertArraysEquals(r, a, b, mask, Long128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Long128VectorTests::SADD);\n@@ -3163,2 +3163,2 @@\n-    static long SATURATING_SUB(long a, long b) {\n-        return (long)(Long.saturatingSub(a, b));\n+    static long SSUB(long a, long b) {\n+        return (long)(Long.subSaturating(a, b));\n@@ -3168,1 +3168,1 @@\n-    static void SATURATING_SUBLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SSUBLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3177,1 +3177,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3181,1 +3181,1 @@\n-        assertArraysEquals(r, a, b, Long128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Long128VectorTests::SSUB);\n@@ -3185,1 +3185,1 @@\n-    static void SATURATING_SUBLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SSUBLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3197,1 +3197,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3201,1 +3201,1 @@\n-        assertArraysEquals(r, a, b, mask, Long128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Long128VectorTests::SSUB);\n@@ -3204,2 +3204,2 @@\n-    static long SATURATING_UADD(long a, long b) {\n-        return (long)(Long.saturatingUnsignedAdd(a, b));\n+    static long SUADD(long a, long b) {\n+        return (long)(Long.addSaturatingUnsigned(a, b));\n@@ -3209,1 +3209,1 @@\n-    static void SATURATING_UADDLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUADDLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3218,1 +3218,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3222,1 +3222,1 @@\n-        assertArraysEquals(r, a, b, Long128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Long128VectorTests::SUADD);\n@@ -3226,1 +3226,1 @@\n-    static void SATURATING_UADDLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUADDLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3238,1 +3238,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3242,1 +3242,1 @@\n-        assertArraysEquals(r, a, b, mask, Long128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Long128VectorTests::SUADD);\n@@ -3245,2 +3245,2 @@\n-    static long SATURATING_USUB(long a, long b) {\n-        return (long)(Long.saturatingUnsignedSub(a, b));\n+    static long SUSUB(long a, long b) {\n+        return (long)(Long.subSaturatingUnsigned(a, b));\n@@ -3250,1 +3250,1 @@\n-    static void SATURATING_USUBLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUSUBLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3259,1 +3259,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3263,1 +3263,1 @@\n-        assertArraysEquals(r, a, b, Long128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Long128VectorTests::SUSUB);\n@@ -3267,1 +3267,1 @@\n-    static void SATURATING_USUBLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUSUBLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3279,1 +3279,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3283,1 +3283,1 @@\n-        assertArraysEquals(r, a, b, mask, Long128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Long128VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3041,1 +3041,1 @@\n-        return (long)(Long.umin(a, b));\n+        return (long)(Long.minUnsigned(a, b));\n@@ -3082,1 +3082,1 @@\n-        return (long)(Long.umax(a, b));\n+        return (long)(Long.maxUnsigned(a, b));\n@@ -3122,2 +3122,2 @@\n-    static long SATURATING_ADD(long a, long b) {\n-        return (long)(Long.saturatingAdd(a, b));\n+    static long SADD(long a, long b) {\n+        return (long)(Long.addSaturating(a, b));\n@@ -3127,1 +3127,1 @@\n-    static void SATURATING_ADDLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SADDLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3136,1 +3136,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3140,1 +3140,1 @@\n-        assertArraysEquals(r, a, b, Long256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Long256VectorTests::SADD);\n@@ -3144,1 +3144,1 @@\n-    static void SATURATING_ADDLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SADDLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3156,1 +3156,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3160,1 +3160,1 @@\n-        assertArraysEquals(r, a, b, mask, Long256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Long256VectorTests::SADD);\n@@ -3163,2 +3163,2 @@\n-    static long SATURATING_SUB(long a, long b) {\n-        return (long)(Long.saturatingSub(a, b));\n+    static long SSUB(long a, long b) {\n+        return (long)(Long.subSaturating(a, b));\n@@ -3168,1 +3168,1 @@\n-    static void SATURATING_SUBLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SSUBLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3177,1 +3177,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3181,1 +3181,1 @@\n-        assertArraysEquals(r, a, b, Long256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Long256VectorTests::SSUB);\n@@ -3185,1 +3185,1 @@\n-    static void SATURATING_SUBLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SSUBLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3197,1 +3197,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3201,1 +3201,1 @@\n-        assertArraysEquals(r, a, b, mask, Long256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Long256VectorTests::SSUB);\n@@ -3204,2 +3204,2 @@\n-    static long SATURATING_UADD(long a, long b) {\n-        return (long)(Long.saturatingUnsignedAdd(a, b));\n+    static long SUADD(long a, long b) {\n+        return (long)(Long.addSaturatingUnsigned(a, b));\n@@ -3209,1 +3209,1 @@\n-    static void SATURATING_UADDLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUADDLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3218,1 +3218,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3222,1 +3222,1 @@\n-        assertArraysEquals(r, a, b, Long256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Long256VectorTests::SUADD);\n@@ -3226,1 +3226,1 @@\n-    static void SATURATING_UADDLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUADDLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3238,1 +3238,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3242,1 +3242,1 @@\n-        assertArraysEquals(r, a, b, mask, Long256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Long256VectorTests::SUADD);\n@@ -3245,2 +3245,2 @@\n-    static long SATURATING_USUB(long a, long b) {\n-        return (long)(Long.saturatingUnsignedSub(a, b));\n+    static long SUSUB(long a, long b) {\n+        return (long)(Long.subSaturatingUnsigned(a, b));\n@@ -3250,1 +3250,1 @@\n-    static void SATURATING_USUBLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUSUBLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3259,1 +3259,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3263,1 +3263,1 @@\n-        assertArraysEquals(r, a, b, Long256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Long256VectorTests::SUSUB);\n@@ -3267,1 +3267,1 @@\n-    static void SATURATING_USUBLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUSUBLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3279,1 +3279,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3283,1 +3283,1 @@\n-        assertArraysEquals(r, a, b, mask, Long256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Long256VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3041,1 +3041,1 @@\n-        return (long)(Long.umin(a, b));\n+        return (long)(Long.minUnsigned(a, b));\n@@ -3082,1 +3082,1 @@\n-        return (long)(Long.umax(a, b));\n+        return (long)(Long.maxUnsigned(a, b));\n@@ -3122,2 +3122,2 @@\n-    static long SATURATING_ADD(long a, long b) {\n-        return (long)(Long.saturatingAdd(a, b));\n+    static long SADD(long a, long b) {\n+        return (long)(Long.addSaturating(a, b));\n@@ -3127,1 +3127,1 @@\n-    static void SATURATING_ADDLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SADDLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3136,1 +3136,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3140,1 +3140,1 @@\n-        assertArraysEquals(r, a, b, Long512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Long512VectorTests::SADD);\n@@ -3144,1 +3144,1 @@\n-    static void SATURATING_ADDLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SADDLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3156,1 +3156,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3160,1 +3160,1 @@\n-        assertArraysEquals(r, a, b, mask, Long512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Long512VectorTests::SADD);\n@@ -3163,2 +3163,2 @@\n-    static long SATURATING_SUB(long a, long b) {\n-        return (long)(Long.saturatingSub(a, b));\n+    static long SSUB(long a, long b) {\n+        return (long)(Long.subSaturating(a, b));\n@@ -3168,1 +3168,1 @@\n-    static void SATURATING_SUBLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SSUBLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3177,1 +3177,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3181,1 +3181,1 @@\n-        assertArraysEquals(r, a, b, Long512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Long512VectorTests::SSUB);\n@@ -3185,1 +3185,1 @@\n-    static void SATURATING_SUBLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SSUBLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3197,1 +3197,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3201,1 +3201,1 @@\n-        assertArraysEquals(r, a, b, mask, Long512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Long512VectorTests::SSUB);\n@@ -3204,2 +3204,2 @@\n-    static long SATURATING_UADD(long a, long b) {\n-        return (long)(Long.saturatingUnsignedAdd(a, b));\n+    static long SUADD(long a, long b) {\n+        return (long)(Long.addSaturatingUnsigned(a, b));\n@@ -3209,1 +3209,1 @@\n-    static void SATURATING_UADDLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUADDLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3218,1 +3218,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3222,1 +3222,1 @@\n-        assertArraysEquals(r, a, b, Long512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Long512VectorTests::SUADD);\n@@ -3226,1 +3226,1 @@\n-    static void SATURATING_UADDLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUADDLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3238,1 +3238,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3242,1 +3242,1 @@\n-        assertArraysEquals(r, a, b, mask, Long512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Long512VectorTests::SUADD);\n@@ -3245,2 +3245,2 @@\n-    static long SATURATING_USUB(long a, long b) {\n-        return (long)(Long.saturatingUnsignedSub(a, b));\n+    static long SUSUB(long a, long b) {\n+        return (long)(Long.subSaturatingUnsigned(a, b));\n@@ -3250,1 +3250,1 @@\n-    static void SATURATING_USUBLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUSUBLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3259,1 +3259,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3263,1 +3263,1 @@\n-        assertArraysEquals(r, a, b, Long512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Long512VectorTests::SUSUB);\n@@ -3267,1 +3267,1 @@\n-    static void SATURATING_USUBLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUSUBLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3279,1 +3279,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3283,1 +3283,1 @@\n-        assertArraysEquals(r, a, b, mask, Long512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Long512VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3041,1 +3041,1 @@\n-        return (long)(Long.umin(a, b));\n+        return (long)(Long.minUnsigned(a, b));\n@@ -3082,1 +3082,1 @@\n-        return (long)(Long.umax(a, b));\n+        return (long)(Long.maxUnsigned(a, b));\n@@ -3122,2 +3122,2 @@\n-    static long SATURATING_ADD(long a, long b) {\n-        return (long)(Long.saturatingAdd(a, b));\n+    static long SADD(long a, long b) {\n+        return (long)(Long.addSaturating(a, b));\n@@ -3127,1 +3127,1 @@\n-    static void SATURATING_ADDLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SADDLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3136,1 +3136,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3140,1 +3140,1 @@\n-        assertArraysEquals(r, a, b, Long64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Long64VectorTests::SADD);\n@@ -3144,1 +3144,1 @@\n-    static void SATURATING_ADDLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SADDLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3156,1 +3156,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3160,1 +3160,1 @@\n-        assertArraysEquals(r, a, b, mask, Long64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Long64VectorTests::SADD);\n@@ -3163,2 +3163,2 @@\n-    static long SATURATING_SUB(long a, long b) {\n-        return (long)(Long.saturatingSub(a, b));\n+    static long SSUB(long a, long b) {\n+        return (long)(Long.subSaturating(a, b));\n@@ -3168,1 +3168,1 @@\n-    static void SATURATING_SUBLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SSUBLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3177,1 +3177,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3181,1 +3181,1 @@\n-        assertArraysEquals(r, a, b, Long64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Long64VectorTests::SSUB);\n@@ -3185,1 +3185,1 @@\n-    static void SATURATING_SUBLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SSUBLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3197,1 +3197,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3201,1 +3201,1 @@\n-        assertArraysEquals(r, a, b, mask, Long64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Long64VectorTests::SSUB);\n@@ -3204,2 +3204,2 @@\n-    static long SATURATING_UADD(long a, long b) {\n-        return (long)(Long.saturatingUnsignedAdd(a, b));\n+    static long SUADD(long a, long b) {\n+        return (long)(Long.addSaturatingUnsigned(a, b));\n@@ -3209,1 +3209,1 @@\n-    static void SATURATING_UADDLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUADDLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3218,1 +3218,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3222,1 +3222,1 @@\n-        assertArraysEquals(r, a, b, Long64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Long64VectorTests::SUADD);\n@@ -3226,1 +3226,1 @@\n-    static void SATURATING_UADDLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUADDLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3238,1 +3238,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3242,1 +3242,1 @@\n-        assertArraysEquals(r, a, b, mask, Long64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Long64VectorTests::SUADD);\n@@ -3245,2 +3245,2 @@\n-    static long SATURATING_USUB(long a, long b) {\n-        return (long)(Long.saturatingUnsignedSub(a, b));\n+    static long SUSUB(long a, long b) {\n+        return (long)(Long.subSaturatingUnsigned(a, b));\n@@ -3250,1 +3250,1 @@\n-    static void SATURATING_USUBLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUSUBLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3259,1 +3259,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3263,1 +3263,1 @@\n-        assertArraysEquals(r, a, b, Long64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Long64VectorTests::SUSUB);\n@@ -3267,1 +3267,1 @@\n-    static void SATURATING_USUBLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUSUBLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3279,1 +3279,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3283,1 +3283,1 @@\n-        assertArraysEquals(r, a, b, mask, Long64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Long64VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3046,1 +3046,1 @@\n-        return (long)(Long.umin(a, b));\n+        return (long)(Long.minUnsigned(a, b));\n@@ -3087,1 +3087,1 @@\n-        return (long)(Long.umax(a, b));\n+        return (long)(Long.maxUnsigned(a, b));\n@@ -3127,2 +3127,2 @@\n-    static long SATURATING_ADD(long a, long b) {\n-        return (long)(Long.saturatingAdd(a, b));\n+    static long SADD(long a, long b) {\n+        return (long)(Long.addSaturating(a, b));\n@@ -3132,1 +3132,1 @@\n-    static void SATURATING_ADDLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SADDLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3141,1 +3141,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3145,1 +3145,1 @@\n-        assertArraysEquals(r, a, b, LongMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, LongMaxVectorTests::SADD);\n@@ -3149,1 +3149,1 @@\n-    static void SATURATING_ADDLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SADDLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3161,1 +3161,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3165,1 +3165,1 @@\n-        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SADD);\n@@ -3168,2 +3168,2 @@\n-    static long SATURATING_SUB(long a, long b) {\n-        return (long)(Long.saturatingSub(a, b));\n+    static long SSUB(long a, long b) {\n+        return (long)(Long.subSaturating(a, b));\n@@ -3173,1 +3173,1 @@\n-    static void SATURATING_SUBLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SSUBLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3182,1 +3182,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3186,1 +3186,1 @@\n-        assertArraysEquals(r, a, b, LongMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, LongMaxVectorTests::SSUB);\n@@ -3190,1 +3190,1 @@\n-    static void SATURATING_SUBLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SSUBLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3202,1 +3202,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3206,1 +3206,1 @@\n-        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SSUB);\n@@ -3209,2 +3209,2 @@\n-    static long SATURATING_UADD(long a, long b) {\n-        return (long)(Long.saturatingUnsignedAdd(a, b));\n+    static long SUADD(long a, long b) {\n+        return (long)(Long.addSaturatingUnsigned(a, b));\n@@ -3214,1 +3214,1 @@\n-    static void SATURATING_UADDLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUADDLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3223,1 +3223,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3227,1 +3227,1 @@\n-        assertArraysEquals(r, a, b, LongMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, LongMaxVectorTests::SUADD);\n@@ -3231,1 +3231,1 @@\n-    static void SATURATING_UADDLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUADDLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3243,1 +3243,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3247,1 +3247,1 @@\n-        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SUADD);\n@@ -3250,2 +3250,2 @@\n-    static long SATURATING_USUB(long a, long b) {\n-        return (long)(Long.saturatingUnsignedSub(a, b));\n+    static long SUSUB(long a, long b) {\n+        return (long)(Long.subSaturatingUnsigned(a, b));\n@@ -3255,1 +3255,1 @@\n-    static void SATURATING_USUBLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void SUSUBLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -3264,1 +3264,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3268,1 +3268,1 @@\n-        assertArraysEquals(r, a, b, LongMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, LongMaxVectorTests::SUSUB);\n@@ -3272,1 +3272,1 @@\n-    static void SATURATING_USUBLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void SUSUBLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -3284,1 +3284,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3288,1 +3288,1 @@\n-        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2966,1 +2966,1 @@\n-        return (short)(Short.umin(a, b));\n+        return (short)(Short.minUnsigned(a, b));\n@@ -3007,1 +3007,1 @@\n-        return (short)(Short.umax(a, b));\n+        return (short)(Short.maxUnsigned(a, b));\n@@ -3047,2 +3047,2 @@\n-    static short SATURATING_ADD(short a, short b) {\n-        return (short)(Short.saturatingAdd(a, b));\n+    static short SADD(short a, short b) {\n+        return (short)(Short.addSaturating(a, b));\n@@ -3052,1 +3052,1 @@\n-    static void SATURATING_ADDShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SADDShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3061,1 +3061,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3065,1 +3065,1 @@\n-        assertArraysEquals(r, a, b, Short128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Short128VectorTests::SADD);\n@@ -3069,1 +3069,1 @@\n-    static void SATURATING_ADDShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SADDShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3081,1 +3081,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3085,1 +3085,1 @@\n-        assertArraysEquals(r, a, b, mask, Short128VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Short128VectorTests::SADD);\n@@ -3088,2 +3088,2 @@\n-    static short SATURATING_SUB(short a, short b) {\n-        return (short)(Short.saturatingSub(a, b));\n+    static short SSUB(short a, short b) {\n+        return (short)(Short.subSaturating(a, b));\n@@ -3093,1 +3093,1 @@\n-    static void SATURATING_SUBShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SSUBShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3102,1 +3102,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3106,1 +3106,1 @@\n-        assertArraysEquals(r, a, b, Short128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Short128VectorTests::SSUB);\n@@ -3110,1 +3110,1 @@\n-    static void SATURATING_SUBShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SSUBShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3122,1 +3122,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3126,1 +3126,1 @@\n-        assertArraysEquals(r, a, b, mask, Short128VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Short128VectorTests::SSUB);\n@@ -3129,2 +3129,2 @@\n-    static short SATURATING_UADD(short a, short b) {\n-        return (short)(Short.saturatingUnsignedAdd(a, b));\n+    static short SUADD(short a, short b) {\n+        return (short)(Short.addSaturatingUnsigned(a, b));\n@@ -3134,1 +3134,1 @@\n-    static void SATURATING_UADDShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUADDShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3143,1 +3143,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3147,1 +3147,1 @@\n-        assertArraysEquals(r, a, b, Short128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Short128VectorTests::SUADD);\n@@ -3151,1 +3151,1 @@\n-    static void SATURATING_UADDShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUADDShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3163,1 +3163,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3167,1 +3167,1 @@\n-        assertArraysEquals(r, a, b, mask, Short128VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Short128VectorTests::SUADD);\n@@ -3170,2 +3170,2 @@\n-    static short SATURATING_USUB(short a, short b) {\n-        return (short)(Short.saturatingUnsignedSub(a, b));\n+    static short SUSUB(short a, short b) {\n+        return (short)(Short.subSaturatingUnsigned(a, b));\n@@ -3175,1 +3175,1 @@\n-    static void SATURATING_USUBShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUSUBShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3184,1 +3184,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3188,1 +3188,1 @@\n-        assertArraysEquals(r, a, b, Short128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Short128VectorTests::SUSUB);\n@@ -3192,1 +3192,1 @@\n-    static void SATURATING_USUBShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUSUBShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3204,1 +3204,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3208,1 +3208,1 @@\n-        assertArraysEquals(r, a, b, mask, Short128VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Short128VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2966,1 +2966,1 @@\n-        return (short)(Short.umin(a, b));\n+        return (short)(Short.minUnsigned(a, b));\n@@ -3007,1 +3007,1 @@\n-        return (short)(Short.umax(a, b));\n+        return (short)(Short.maxUnsigned(a, b));\n@@ -3047,2 +3047,2 @@\n-    static short SATURATING_ADD(short a, short b) {\n-        return (short)(Short.saturatingAdd(a, b));\n+    static short SADD(short a, short b) {\n+        return (short)(Short.addSaturating(a, b));\n@@ -3052,1 +3052,1 @@\n-    static void SATURATING_ADDShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SADDShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3061,1 +3061,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3065,1 +3065,1 @@\n-        assertArraysEquals(r, a, b, Short256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Short256VectorTests::SADD);\n@@ -3069,1 +3069,1 @@\n-    static void SATURATING_ADDShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SADDShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3081,1 +3081,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3085,1 +3085,1 @@\n-        assertArraysEquals(r, a, b, mask, Short256VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Short256VectorTests::SADD);\n@@ -3088,2 +3088,2 @@\n-    static short SATURATING_SUB(short a, short b) {\n-        return (short)(Short.saturatingSub(a, b));\n+    static short SSUB(short a, short b) {\n+        return (short)(Short.subSaturating(a, b));\n@@ -3093,1 +3093,1 @@\n-    static void SATURATING_SUBShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SSUBShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3102,1 +3102,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3106,1 +3106,1 @@\n-        assertArraysEquals(r, a, b, Short256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Short256VectorTests::SSUB);\n@@ -3110,1 +3110,1 @@\n-    static void SATURATING_SUBShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SSUBShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3122,1 +3122,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3126,1 +3126,1 @@\n-        assertArraysEquals(r, a, b, mask, Short256VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Short256VectorTests::SSUB);\n@@ -3129,2 +3129,2 @@\n-    static short SATURATING_UADD(short a, short b) {\n-        return (short)(Short.saturatingUnsignedAdd(a, b));\n+    static short SUADD(short a, short b) {\n+        return (short)(Short.addSaturatingUnsigned(a, b));\n@@ -3134,1 +3134,1 @@\n-    static void SATURATING_UADDShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUADDShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3143,1 +3143,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3147,1 +3147,1 @@\n-        assertArraysEquals(r, a, b, Short256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Short256VectorTests::SUADD);\n@@ -3151,1 +3151,1 @@\n-    static void SATURATING_UADDShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUADDShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3163,1 +3163,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3167,1 +3167,1 @@\n-        assertArraysEquals(r, a, b, mask, Short256VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Short256VectorTests::SUADD);\n@@ -3170,2 +3170,2 @@\n-    static short SATURATING_USUB(short a, short b) {\n-        return (short)(Short.saturatingUnsignedSub(a, b));\n+    static short SUSUB(short a, short b) {\n+        return (short)(Short.subSaturatingUnsigned(a, b));\n@@ -3175,1 +3175,1 @@\n-    static void SATURATING_USUBShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUSUBShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3184,1 +3184,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3188,1 +3188,1 @@\n-        assertArraysEquals(r, a, b, Short256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Short256VectorTests::SUSUB);\n@@ -3192,1 +3192,1 @@\n-    static void SATURATING_USUBShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUSUBShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3204,1 +3204,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3208,1 +3208,1 @@\n-        assertArraysEquals(r, a, b, mask, Short256VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Short256VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2966,1 +2966,1 @@\n-        return (short)(Short.umin(a, b));\n+        return (short)(Short.minUnsigned(a, b));\n@@ -3007,1 +3007,1 @@\n-        return (short)(Short.umax(a, b));\n+        return (short)(Short.maxUnsigned(a, b));\n@@ -3047,2 +3047,2 @@\n-    static short SATURATING_ADD(short a, short b) {\n-        return (short)(Short.saturatingAdd(a, b));\n+    static short SADD(short a, short b) {\n+        return (short)(Short.addSaturating(a, b));\n@@ -3052,1 +3052,1 @@\n-    static void SATURATING_ADDShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SADDShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3061,1 +3061,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3065,1 +3065,1 @@\n-        assertArraysEquals(r, a, b, Short512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Short512VectorTests::SADD);\n@@ -3069,1 +3069,1 @@\n-    static void SATURATING_ADDShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SADDShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3081,1 +3081,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3085,1 +3085,1 @@\n-        assertArraysEquals(r, a, b, mask, Short512VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Short512VectorTests::SADD);\n@@ -3088,2 +3088,2 @@\n-    static short SATURATING_SUB(short a, short b) {\n-        return (short)(Short.saturatingSub(a, b));\n+    static short SSUB(short a, short b) {\n+        return (short)(Short.subSaturating(a, b));\n@@ -3093,1 +3093,1 @@\n-    static void SATURATING_SUBShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SSUBShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3102,1 +3102,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3106,1 +3106,1 @@\n-        assertArraysEquals(r, a, b, Short512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Short512VectorTests::SSUB);\n@@ -3110,1 +3110,1 @@\n-    static void SATURATING_SUBShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SSUBShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3122,1 +3122,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3126,1 +3126,1 @@\n-        assertArraysEquals(r, a, b, mask, Short512VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Short512VectorTests::SSUB);\n@@ -3129,2 +3129,2 @@\n-    static short SATURATING_UADD(short a, short b) {\n-        return (short)(Short.saturatingUnsignedAdd(a, b));\n+    static short SUADD(short a, short b) {\n+        return (short)(Short.addSaturatingUnsigned(a, b));\n@@ -3134,1 +3134,1 @@\n-    static void SATURATING_UADDShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUADDShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3143,1 +3143,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3147,1 +3147,1 @@\n-        assertArraysEquals(r, a, b, Short512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Short512VectorTests::SUADD);\n@@ -3151,1 +3151,1 @@\n-    static void SATURATING_UADDShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUADDShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3163,1 +3163,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3167,1 +3167,1 @@\n-        assertArraysEquals(r, a, b, mask, Short512VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Short512VectorTests::SUADD);\n@@ -3170,2 +3170,2 @@\n-    static short SATURATING_USUB(short a, short b) {\n-        return (short)(Short.saturatingUnsignedSub(a, b));\n+    static short SUSUB(short a, short b) {\n+        return (short)(Short.subSaturatingUnsigned(a, b));\n@@ -3175,1 +3175,1 @@\n-    static void SATURATING_USUBShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUSUBShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3184,1 +3184,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3188,1 +3188,1 @@\n-        assertArraysEquals(r, a, b, Short512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Short512VectorTests::SUSUB);\n@@ -3192,1 +3192,1 @@\n-    static void SATURATING_USUBShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUSUBShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3204,1 +3204,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3208,1 +3208,1 @@\n-        assertArraysEquals(r, a, b, mask, Short512VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Short512VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2966,1 +2966,1 @@\n-        return (short)(Short.umin(a, b));\n+        return (short)(Short.minUnsigned(a, b));\n@@ -3007,1 +3007,1 @@\n-        return (short)(Short.umax(a, b));\n+        return (short)(Short.maxUnsigned(a, b));\n@@ -3047,2 +3047,2 @@\n-    static short SATURATING_ADD(short a, short b) {\n-        return (short)(Short.saturatingAdd(a, b));\n+    static short SADD(short a, short b) {\n+        return (short)(Short.addSaturating(a, b));\n@@ -3052,1 +3052,1 @@\n-    static void SATURATING_ADDShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SADDShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3061,1 +3061,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3065,1 +3065,1 @@\n-        assertArraysEquals(r, a, b, Short64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, Short64VectorTests::SADD);\n@@ -3069,1 +3069,1 @@\n-    static void SATURATING_ADDShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SADDShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3081,1 +3081,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3085,1 +3085,1 @@\n-        assertArraysEquals(r, a, b, mask, Short64VectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, Short64VectorTests::SADD);\n@@ -3088,2 +3088,2 @@\n-    static short SATURATING_SUB(short a, short b) {\n-        return (short)(Short.saturatingSub(a, b));\n+    static short SSUB(short a, short b) {\n+        return (short)(Short.subSaturating(a, b));\n@@ -3093,1 +3093,1 @@\n-    static void SATURATING_SUBShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SSUBShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3102,1 +3102,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3106,1 +3106,1 @@\n-        assertArraysEquals(r, a, b, Short64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, Short64VectorTests::SSUB);\n@@ -3110,1 +3110,1 @@\n-    static void SATURATING_SUBShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SSUBShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3122,1 +3122,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3126,1 +3126,1 @@\n-        assertArraysEquals(r, a, b, mask, Short64VectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, Short64VectorTests::SSUB);\n@@ -3129,2 +3129,2 @@\n-    static short SATURATING_UADD(short a, short b) {\n-        return (short)(Short.saturatingUnsignedAdd(a, b));\n+    static short SUADD(short a, short b) {\n+        return (short)(Short.addSaturatingUnsigned(a, b));\n@@ -3134,1 +3134,1 @@\n-    static void SATURATING_UADDShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUADDShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3143,1 +3143,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3147,1 +3147,1 @@\n-        assertArraysEquals(r, a, b, Short64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, Short64VectorTests::SUADD);\n@@ -3151,1 +3151,1 @@\n-    static void SATURATING_UADDShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUADDShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3163,1 +3163,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3167,1 +3167,1 @@\n-        assertArraysEquals(r, a, b, mask, Short64VectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, Short64VectorTests::SUADD);\n@@ -3170,2 +3170,2 @@\n-    static short SATURATING_USUB(short a, short b) {\n-        return (short)(Short.saturatingUnsignedSub(a, b));\n+    static short SUSUB(short a, short b) {\n+        return (short)(Short.subSaturatingUnsigned(a, b));\n@@ -3175,1 +3175,1 @@\n-    static void SATURATING_USUBShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUSUBShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3184,1 +3184,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3188,1 +3188,1 @@\n-        assertArraysEquals(r, a, b, Short64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, Short64VectorTests::SUSUB);\n@@ -3192,1 +3192,1 @@\n-    static void SATURATING_USUBShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUSUBShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3204,1 +3204,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3208,1 +3208,1 @@\n-        assertArraysEquals(r, a, b, mask, Short64VectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, Short64VectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2971,1 +2971,1 @@\n-        return (short)(Short.umin(a, b));\n+        return (short)(Short.minUnsigned(a, b));\n@@ -3012,1 +3012,1 @@\n-        return (short)(Short.umax(a, b));\n+        return (short)(Short.maxUnsigned(a, b));\n@@ -3052,2 +3052,2 @@\n-    static short SATURATING_ADD(short a, short b) {\n-        return (short)(Short.saturatingAdd(a, b));\n+    static short SADD(short a, short b) {\n+        return (short)(Short.addSaturating(a, b));\n@@ -3057,1 +3057,1 @@\n-    static void SATURATING_ADDShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SADDShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3066,1 +3066,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv).intoArray(r, i);\n@@ -3070,1 +3070,1 @@\n-        assertArraysEquals(r, a, b, ShortMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, ShortMaxVectorTests::SADD);\n@@ -3074,1 +3074,1 @@\n-    static void SATURATING_ADDShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SADDShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3086,1 +3086,1 @@\n-                av.lanewise(VectorOperators.SATURATING_ADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SADD, bv, vmask).intoArray(r, i);\n@@ -3090,1 +3090,1 @@\n-        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SATURATING_ADD);\n+        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SADD);\n@@ -3093,2 +3093,2 @@\n-    static short SATURATING_SUB(short a, short b) {\n-        return (short)(Short.saturatingSub(a, b));\n+    static short SSUB(short a, short b) {\n+        return (short)(Short.subSaturating(a, b));\n@@ -3098,1 +3098,1 @@\n-    static void SATURATING_SUBShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SSUBShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3107,1 +3107,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv).intoArray(r, i);\n@@ -3111,1 +3111,1 @@\n-        assertArraysEquals(r, a, b, ShortMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, ShortMaxVectorTests::SSUB);\n@@ -3115,1 +3115,1 @@\n-    static void SATURATING_SUBShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SSUBShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3127,1 +3127,1 @@\n-                av.lanewise(VectorOperators.SATURATING_SUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SSUB, bv, vmask).intoArray(r, i);\n@@ -3131,1 +3131,1 @@\n-        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SATURATING_SUB);\n+        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SSUB);\n@@ -3134,2 +3134,2 @@\n-    static short SATURATING_UADD(short a, short b) {\n-        return (short)(Short.saturatingUnsignedAdd(a, b));\n+    static short SUADD(short a, short b) {\n+        return (short)(Short.addSaturatingUnsigned(a, b));\n@@ -3139,1 +3139,1 @@\n-    static void SATURATING_UADDShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUADDShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3148,1 +3148,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv).intoArray(r, i);\n@@ -3152,1 +3152,1 @@\n-        assertArraysEquals(r, a, b, ShortMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, ShortMaxVectorTests::SUADD);\n@@ -3156,1 +3156,1 @@\n-    static void SATURATING_UADDShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUADDShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3168,1 +3168,1 @@\n-                av.lanewise(VectorOperators.SATURATING_UADD, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUADD, bv, vmask).intoArray(r, i);\n@@ -3172,1 +3172,1 @@\n-        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SATURATING_UADD);\n+        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SUADD);\n@@ -3175,2 +3175,2 @@\n-    static short SATURATING_USUB(short a, short b) {\n-        return (short)(Short.saturatingUnsignedSub(a, b));\n+    static short SUSUB(short a, short b) {\n+        return (short)(Short.subSaturatingUnsigned(a, b));\n@@ -3180,1 +3180,1 @@\n-    static void SATURATING_USUBShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void SUSUBShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -3189,1 +3189,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv).intoArray(r, i);\n@@ -3193,1 +3193,1 @@\n-        assertArraysEquals(r, a, b, ShortMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, ShortMaxVectorTests::SUSUB);\n@@ -3197,1 +3197,1 @@\n-    static void SATURATING_USUBShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void SUSUBShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -3209,1 +3209,1 @@\n-                av.lanewise(VectorOperators.SATURATING_USUB, bv, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.SUSUB, bv, vmask).intoArray(r, i);\n@@ -3213,1 +3213,1 @@\n-        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SATURATING_USUB);\n+        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::SUSUB);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -471,6 +471,6 @@\n-gen_binary_op \"UMIN\" \"\\$Wideboxtype\\$.umin(a, b)\" \"BITWISE\"\n-gen_binary_op \"UMAX\" \"\\$Wideboxtype\\$.umax(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SATURATING_ADD\" \"\\$Wideboxtype\\$.saturatingAdd(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SATURATING_SUB\" \"\\$Wideboxtype\\$.saturatingSub(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SATURATING_UADD\" \"\\$Wideboxtype\\$.saturatingUnsignedAdd(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SATURATING_USUB\" \"\\$Wideboxtype\\$.saturatingUnsignedSub(a, b)\" \"BITWISE\"\n+gen_binary_op \"UMIN\" \"\\$Wideboxtype\\$.minUnsigned(a, b)\" \"BITWISE\"\n+gen_binary_op \"UMAX\" \"\\$Wideboxtype\\$.maxUnsigned(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SADD\" \"\\$Wideboxtype\\$.addSaturating(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SSUB\" \"\\$Wideboxtype\\$.subSaturating(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SUADD\" \"\\$Wideboxtype\\$.addSaturatingUnsigned(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SUSUB\" \"\\$Wideboxtype\\$.subSaturatingUnsigned(a, b)\" \"BITWISE\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}