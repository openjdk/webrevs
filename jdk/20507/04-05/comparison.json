{"files":[{"patch":"@@ -560,0 +560,1 @@\n+#ifndef PRODUCT\n@@ -565,0 +566,1 @@\n+#endif\n@@ -8469,2 +8471,1 @@\n-  assert(vector_len == AVX_128bit ? VM_Version::supports_avx() :\n-        (vector_len == AVX_256bit ? VM_Version::supports_avx2() : VM_Version::supports_avx512bw()), \"\");\n+  assert(UseAVX > 0, \"\");\n@@ -8478,2 +8479,1 @@\n-  assert(vector_len == AVX_128bit ? VM_Version::supports_avx() :\n-        (vector_len == AVX_256bit ? VM_Version::supports_avx2() : VM_Version::supports_avx512bw()), \"\");\n+  assert(UseAVX > 0, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -930,16 +930,17 @@\n- \/\/ T1 = -1\n- vpcmpeqq(xtmp1, xtmp1, xtmp1, vlen_enc);\n- \/\/ T1 = -1 << 63\n- vpsllq(xtmp1, xtmp1, 63, vlen_enc);\n- \/\/ Convert SRC2 to signed value i.e. T2 = T1 + SRC2\n- vpaddq(xtmp2, xtmp1, src2, vlen_enc);\n- \/\/ Convert SRC1 to signed value i.e. T1 = T1 + SRC1\n- vpaddq(xtmp1, xtmp1, src1, vlen_enc);\n- \/\/ Mask = T2 > T1\n- vpcmpgtq(xtmp1, xtmp2, xtmp1, vlen_enc);\n- \/\/ Res = Mask ? Src2 : Src1\n- if (opcode == Op_UMaxV) {\n-   vpblendvb(dst, src1, src2, xtmp1, vlen_enc);\n- } else {\n-   vpblendvb(dst, src2, src1, xtmp1, vlen_enc);\n- }\n+  \/\/ T1 = -1\n+  vpcmpeqq(xtmp1, xtmp1, xtmp1, vlen_enc);\n+  \/\/ T1 = -1 << 63\n+  vpsllq(xtmp1, xtmp1, 63, vlen_enc);\n+  \/\/ Convert SRC2 to signed value i.e. T2 = T1 + SRC2\n+  vpaddq(xtmp2, xtmp1, src2, vlen_enc);\n+  \/\/ Convert SRC1 to signed value i.e. T1 = T1 + SRC1\n+  vpaddq(xtmp1, xtmp1, src1, vlen_enc);\n+  \/\/ Mask = T2 > T1\n+  vpcmpgtq(xtmp1, xtmp2, xtmp1, vlen_enc);\n+  if (opcode == Op_UMaxV) {\n+    \/\/ Res = Mask ? Src2 : Src1\n+    vpblendvb(dst, src1, src2, xtmp1, vlen_enc);\n+  } else {\n+    \/\/ Res = Mask ? Src1 : Src2\n+    vpblendvb(dst, src2, src1, xtmp1, vlen_enc);\n+  }\n@@ -4675,1 +4676,1 @@\n-void C2_MacroAssembler::evmasked_saturating_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n+void C2_MacroAssembler::evmasked_saturating_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1,\n@@ -4678,1 +4679,1 @@\n-    evmasked_saturating_unsigned_op(ideal_opc, mask, dst, src1, src2, merge, vlen_enc);\n+    evmasked_saturating_unsigned_op(ideal_opc, elem_bt, mask, dst, src1, src2, merge, vlen_enc);\n@@ -4680,1 +4681,1 @@\n-    evmasked_saturating_signed_op(ideal_opc, mask, dst, src1, src2, merge, vlen_enc);\n+    evmasked_saturating_signed_op(ideal_opc, elem_bt, mask, dst, src1, src2, merge, vlen_enc);\n@@ -4684,11 +4685,10 @@\n-void C2_MacroAssembler::evmasked_saturating_signed_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n-                                                     XMMRegister src2, bool merge, int vlen_enc) {\n-  switch (ideal_opc) {\n-    case Op_SaturatingAddVB:\n-      evpaddsb(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      evpaddsw(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      evpsubsb(dst, mask, src1, src2, merge, vlen_enc);\n+void C2_MacroAssembler::evmasked_saturating_signed_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst,\n+                                                      XMMRegister src1, XMMRegister src2, bool merge, int vlen_enc) {\n+  switch (elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddsb(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubsb(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4696,2 +4696,7 @@\n-    case Op_SaturatingSubVS:\n-      evpsubsw(dst, mask, src1, src2, merge, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddsw(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubsw(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4699,4 +4704,0 @@\n-    case Op_SaturatingAddVI:\n-    case Op_SaturatingAddVL:\n-    case Op_SaturatingSubVI:\n-    case Op_SaturatingSubVL:\n@@ -4704,1 +4705,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[ideal_opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -4709,11 +4710,10 @@\n-void C2_MacroAssembler::evmasked_saturating_unsigned_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n-                                                        XMMRegister src2, bool merge, int vlen_enc) {\n-  switch (ideal_opc) {\n-    case Op_SaturatingAddVB:\n-      evpaddusb(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      evpaddusw(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      evpsubusb(dst, mask, src1, src2, merge, vlen_enc);\n+void C2_MacroAssembler::evmasked_saturating_unsigned_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst,\n+                                                        XMMRegister src1, XMMRegister src2, bool merge, int vlen_enc) {\n+  switch (elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddusb(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubusb(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4721,2 +4721,7 @@\n-    case Op_SaturatingSubVS:\n-      evpsubusw(dst, mask, src1, src2, merge, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddusw(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubusw(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4724,4 +4729,0 @@\n-    case Op_SaturatingAddVI:\n-    case Op_SaturatingAddVL:\n-    case Op_SaturatingSubVI:\n-    case Op_SaturatingSubVL:\n@@ -4729,1 +4730,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[ideal_opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -4734,1 +4735,1 @@\n-void C2_MacroAssembler::evmasked_saturating_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n+void C2_MacroAssembler::evmasked_saturating_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1,\n@@ -4737,1 +4738,1 @@\n-    evmasked_saturating_unsigned_op(ideal_opc, mask, dst, src1, src2, merge, vlen_enc);\n+    evmasked_saturating_unsigned_op(ideal_opc, elem_bt, mask, dst, src1, src2, merge, vlen_enc);\n@@ -4739,1 +4740,1 @@\n-    evmasked_saturating_signed_op(ideal_opc, mask, dst, src1, src2, merge, vlen_enc);\n+    evmasked_saturating_signed_op(ideal_opc, elem_bt, mask, dst, src1, src2, merge, vlen_enc);\n@@ -4743,11 +4744,10 @@\n-void C2_MacroAssembler::evmasked_saturating_signed_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n-                                                      Address src2, bool merge, int vlen_enc) {\n-  switch (ideal_opc) {\n-    case Op_SaturatingAddVB:\n-      evpaddsb(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      evpaddsw(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      evpsubsb(dst, mask, src1, src2, merge, vlen_enc);\n+void C2_MacroAssembler::evmasked_saturating_signed_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst,\n+                                                      XMMRegister src1, Address src2, bool merge, int vlen_enc) {\n+  switch (elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddsb(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubsb(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4755,2 +4755,7 @@\n-    case Op_SaturatingSubVS:\n-      evpsubsw(dst, mask, src1, src2, merge, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddsw(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubsw(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4758,4 +4763,0 @@\n-    case Op_SaturatingAddVI:\n-    case Op_SaturatingAddVL:\n-    case Op_SaturatingSubVI:\n-    case Op_SaturatingSubVL:\n@@ -4763,1 +4764,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[ideal_opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -4768,11 +4769,10 @@\n-void C2_MacroAssembler::evmasked_saturating_unsigned_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n-                                                        Address src2, bool merge, int vlen_enc) {\n-  switch (ideal_opc) {\n-    case Op_SaturatingAddVB:\n-      evpaddusb(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      evpaddusw(dst, mask, src1, src2, merge, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      evpsubusb(dst, mask, src1, src2, merge, vlen_enc);\n+void C2_MacroAssembler::evmasked_saturating_unsigned_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst,\n+                                                        XMMRegister src1, Address src2, bool merge, int vlen_enc) {\n+  switch (elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddusb(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubusb(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4780,2 +4780,7 @@\n-    case Op_SaturatingSubVS:\n-      evpsubusw(dst, mask, src1, src2, merge, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        evpaddusw(dst, mask, src1, src2, merge, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        evpsubusw(dst, mask, src1, src2, merge, vlen_enc);\n+      }\n@@ -4783,4 +4788,0 @@\n-    case Op_SaturatingAddVI:\n-    case Op_SaturatingAddVL:\n-    case Op_SaturatingSubVI:\n-    case Op_SaturatingSubVL:\n@@ -4788,1 +4789,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[ideal_opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -6644,10 +6645,9 @@\n-void C2_MacroAssembler::saturating_signed_vector_op(int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n-  switch(opc) {\n-    case Op_SaturatingAddVB:\n-      vpaddsb(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      vpaddsw(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      vpsubsb(dst, src1, src2, vlen_enc);\n+void C2_MacroAssembler::vector_saturating_op(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n+  switch(elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddsb(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubsb(dst, src1, src2, vlen_enc);\n+      }\n@@ -6655,2 +6655,7 @@\n-    case Op_SaturatingSubVS:\n-      vpsubsw(dst, src1, src2, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddsw(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubsw(dst, src1, src2, vlen_enc);\n+      }\n@@ -6659,1 +6664,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -6664,10 +6669,9 @@\n-void C2_MacroAssembler::saturating_unsigned_vector_op(int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n-  switch(opc) {\n-    case Op_SaturatingAddVB:\n-      vpaddusb(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      vpaddusw(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      vpsubusb(dst, src1, src2, vlen_enc);\n+void C2_MacroAssembler::vector_saturating_unsigned_op(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n+  switch(elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddusb(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubusb(dst, src1, src2, vlen_enc);\n+      }\n@@ -6675,2 +6679,7 @@\n-    case Op_SaturatingSubVS:\n-      vpsubusw(dst, src1, src2, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddusw(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubusw(dst, src1, src2, vlen_enc);\n+      }\n@@ -6679,1 +6688,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -6684,2 +6693,2 @@\n-void C2_MacroAssembler::saturating_unsigned_sub_dq_evex(BasicType etype, XMMRegister dst, XMMRegister src1,\n-                                                        XMMRegister src2, KRegister ktmp, int vlen_enc) {\n+void C2_MacroAssembler::vector_sub_dq_saturating_unsigned_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1,\n+                                                              XMMRegister src2, KRegister ktmp, int vlen_enc) {\n@@ -6687,5 +6696,4 @@\n-  \/\/ overflow = Inp1 <u Inp2\n-  evpcmpu(etype, ktmp,  src2, src1, Assembler::lt, vlen_enc);\n-  \/\/ Res = INP1 - INP2 (non-commutative and non-associative)\n-  \/\/ Res = Mask ? Zero : Res\n-  evmasked_op(etype == T_INT ? Op_SubVI : Op_SubVL, etype, ktmp, dst, src1, src2, false, vlen_enc, false);\n+  \/\/ overflow_mask = Inp1 <u Inp2\n+  evpcmpu(elem_bt, ktmp,  src2, src1, Assembler::lt, vlen_enc);\n+  \/\/ Res = overflow_mask ? Zero : INP1 - INP2 (non-commutative and non-associative)\n+  evmasked_op(elem_bt == T_INT ? Op_SubVI : Op_SubVL, elem_bt, ktmp, dst, src1, src2, false, vlen_enc, false);\n@@ -6694,2 +6702,2 @@\n-void C2_MacroAssembler::saturating_unsigned_sub_dq_avx(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                                       XMMRegister xtmp1, XMMRegister xtmp2, int vlen_enc) {\n+void C2_MacroAssembler::vector_sub_dq_saturating_unsigned_avx(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                                              XMMRegister xtmp1, XMMRegister xtmp2, int vlen_enc) {\n@@ -6698,3 +6706,3 @@\n-  vpgenmin_value(etype, xtmp1, xtmp1, vlen_enc, true);\n-  vpadd(etype, xtmp2, src1, xtmp1, vlen_enc);\n-  vpadd(etype, xtmp1, src2, xtmp1, vlen_enc);\n+  vpgenmin_value(elem_bt, xtmp1, xtmp1, vlen_enc, true);\n+  vpadd(elem_bt, xtmp2, src1, xtmp1, vlen_enc);\n+  vpadd(elem_bt, xtmp1, src2, xtmp1, vlen_enc);\n@@ -6702,1 +6710,1 @@\n-  vpcmpgt(etype, xtmp2, xtmp1, xtmp2, vlen_enc);\n+  vpcmpgt(elem_bt, xtmp2, xtmp1, xtmp2, vlen_enc);\n@@ -6705,1 +6713,1 @@\n-  vpsub(etype, dst, src1, src2, vlen_enc);\n+  vpsub(elem_bt, dst, src1, src2, vlen_enc);\n@@ -6711,3 +6719,2 @@\n-void C2_MacroAssembler::saturating_unsigned_add_dq_evex(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                                        XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, KRegister ktmp,\n-                                                        int vlen_enc) {\n+void C2_MacroAssembler::vector_add_dq_saturating_unsigned_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                                               XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp, int vlen_enc) {\n@@ -6717,1 +6724,1 @@\n-  vpadd(etype, dst, src1, src2, vlen_enc);\n+  vpadd(elem_bt, dst, src1, src2, vlen_enc);\n@@ -6721,1 +6728,1 @@\n-  vpternlogd(xtmp3, 0xff, xtmp3, xtmp3, vlen_enc);\n+  vpternlogd(xtmp2, 0xff, xtmp2, xtmp2, vlen_enc);\n@@ -6723,1 +6730,1 @@\n-  evpcmpu(etype, ktmp, dst, xtmp1, Assembler::lt, vlen_enc);\n+  evpcmpu(elem_bt, ktmp, dst, xtmp1, Assembler::lt, vlen_enc);\n@@ -6725,1 +6732,1 @@\n-  evpblend(etype, dst, ktmp,  dst, xtmp3, true, vlen_enc);\n+  evpblend(elem_bt, dst, ktmp,  dst, xtmp2, true, vlen_enc);\n@@ -6729,1 +6736,1 @@\n-\/\/ Section 2-13 Hacker Delight list following overflow detection check for saturating\n+\/\/ Section 2-13 Hacker's Delight list following overflow detection check for saturating\n@@ -6740,2 +6747,2 @@\n-void C2_MacroAssembler::saturating_unsigned_add_dq_avx(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                                       XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, int vlen_enc) {\n+void C2_MacroAssembler::vector_add_dq_saturating_unsigned_avx(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                                              XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, int vlen_enc) {\n@@ -6743,1 +6750,1 @@\n-  vpadd(etype, dst, src1, src2, vlen_enc);\n+  vpadd(elem_bt, dst, src1, src2, vlen_enc);\n@@ -6747,1 +6754,1 @@\n-  vpgenmin_value(etype, xtmp2, xtmp1, vlen_enc, true);\n+  vpgenmin_value(elem_bt, xtmp2, xtmp1, vlen_enc, true);\n@@ -6749,1 +6756,1 @@\n-  vpadd(etype, xtmp3, xtmp3, xtmp2, vlen_enc);\n+  vpadd(elem_bt, xtmp3, xtmp3, xtmp2, vlen_enc);\n@@ -6751,1 +6758,1 @@\n-  vpadd(etype, xtmp2, xtmp2, dst, vlen_enc);\n+  vpadd(elem_bt, xtmp2, xtmp2, dst, vlen_enc);\n@@ -6753,1 +6760,1 @@\n-  if (etype == T_INT) {\n+  if (elem_bt == T_INT) {\n@@ -6756,1 +6763,1 @@\n-    assert(etype == T_LONG, \"\");\n+    assert(elem_bt == T_LONG, \"\");\n@@ -6791,2 +6798,2 @@\n-void C2_MacroAssembler::vpsign_extend_dq(BasicType etype, XMMRegister dst, XMMRegister src, int vlen_enc) {\n-  if (etype == T_LONG) {\n+void C2_MacroAssembler::vpsign_extend_dq(BasicType elem_bt, XMMRegister dst, XMMRegister src, int vlen_enc) {\n+  if (elem_bt == T_LONG) {\n@@ -6800,1 +6807,1 @@\n-    assert(etype == T_INT, \"\");\n+    assert(elem_bt == T_INT, \"\");\n@@ -6805,1 +6812,1 @@\n-void C2_MacroAssembler::vpgenmax_value(BasicType etype, XMMRegister dst, XMMRegister allones, int vlen_enc, bool compute_allones) {\n+void C2_MacroAssembler::vpgenmax_value(BasicType elem_bt, XMMRegister dst, XMMRegister allones, int vlen_enc, bool compute_allones) {\n@@ -6813,1 +6820,1 @@\n-  if (etype == T_LONG) {\n+  if (elem_bt == T_LONG) {\n@@ -6816,1 +6823,1 @@\n-    assert(etype == T_INT, \"\");\n+    assert(elem_bt == T_INT, \"\");\n@@ -6821,1 +6828,1 @@\n-void C2_MacroAssembler::vpgenmin_value(BasicType etype, XMMRegister dst, XMMRegister allones, int vlen_enc, bool compute_allones) {\n+void C2_MacroAssembler::vpgenmin_value(BasicType elem_bt, XMMRegister dst, XMMRegister allones, int vlen_enc, bool compute_allones) {\n@@ -6829,1 +6836,1 @@\n-  if (etype == T_LONG) {\n+  if (elem_bt == T_LONG) {\n@@ -6832,1 +6839,1 @@\n-    assert(etype == T_INT, \"\");\n+    assert(elem_bt == T_INT, \"\");\n@@ -6837,1 +6844,1 @@\n-void C2_MacroAssembler::evpcmpu(BasicType etype, KRegister kmask,  XMMRegister src1, XMMRegister src2,\n+void C2_MacroAssembler::evpcmpu(BasicType elem_bt, KRegister kmask,  XMMRegister src1, XMMRegister src2,\n@@ -6839,1 +6846,1 @@\n-  switch(etype) {\n+  switch(elem_bt) {\n@@ -6844,1 +6851,1 @@\n-    default: fatal(\"Unsupported type %s\", type2name(etype)); break;\n+    default: fatal(\"Unsupported type %s\", type2name(elem_bt)); break;\n@@ -6848,2 +6855,2 @@\n-void C2_MacroAssembler::vpcmpgt(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n-  switch(etype) {\n+void C2_MacroAssembler::vpcmpgt(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n+  switch(elem_bt) {\n@@ -6854,1 +6861,1 @@\n-    default: fatal(\"Unsupported type %s\", type2name(etype)); break;\n+    default: fatal(\"Unsupported type %s\", type2name(elem_bt)); break;\n@@ -6858,1 +6865,1 @@\n-void C2_MacroAssembler::evpmov_vec_to_mask(BasicType etype, KRegister ktmp, XMMRegister src, XMMRegister xtmp1,\n+void C2_MacroAssembler::evpmov_vec_to_mask(BasicType elem_bt, KRegister ktmp, XMMRegister src, XMMRegister xtmp1,\n@@ -6860,1 +6867,1 @@\n-  if (etype == T_LONG) {\n+  if (elem_bt == T_LONG) {\n@@ -6863,1 +6870,1 @@\n-    assert(etype == T_INT, \"\");\n+    assert(elem_bt == T_INT, \"\");\n@@ -6868,3 +6875,4 @@\n-void C2_MacroAssembler::saturating_signed_add_sub_dq_evex(BasicType etype, int opc, XMMRegister dst, XMMRegister src1,\n-                                                          XMMRegister src2, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                                          KRegister ktmp1, KRegister ktmp2, int vlen_enc) {\n+void C2_MacroAssembler::vector_addsub_dq_saturating_evex(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1,\n+                                                         XMMRegister src2, XMMRegister xtmp1, XMMRegister xtmp2,\n+                                                         KRegister ktmp1, KRegister ktmp2, int vlen_enc) {\n+  assert(elem_bt == T_INT || elem_bt == T_LONG, \"\");\n@@ -6873,1 +6881,1 @@\n-  if (opc == Op_SaturatingAddVI || opc == Op_SaturatingAddVL) {\n+  if (ideal_opc == Op_SaturatingAddV) {\n@@ -6875,1 +6883,1 @@\n-    vpadd(etype, dst, src1, src2, vlen_enc);\n+    vpadd(elem_bt, dst, src1, src2, vlen_enc);\n@@ -6882,1 +6890,1 @@\n-    assert(opc == Op_SaturatingSubVI || opc == Op_SaturatingSubVL, \"\");\n+    assert(ideal_opc == Op_SaturatingSubV, \"\");\n@@ -6884,1 +6892,1 @@\n-    vpsub(etype, dst, src1, src2, vlen_enc);\n+    vpsub(elem_bt, dst, src1, src2, vlen_enc);\n@@ -6894,1 +6902,1 @@\n-  evpmov_vec_to_mask(etype, ktmp1, xtmp2, xtmp2, xtmp1, vlen_enc);\n+  evpmov_vec_to_mask(elem_bt, ktmp1, xtmp2, xtmp2, xtmp1, vlen_enc);\n@@ -6898,1 +6906,1 @@\n-  evpmov_vec_to_mask(etype, ktmp2, src1, xtmp2, xtmp1, vlen_enc, true);\n+  evpmov_vec_to_mask(elem_bt, ktmp2, src1, xtmp2, xtmp1, vlen_enc, true);\n@@ -6900,2 +6908,2 @@\n-  vpgenmax_value(etype, xtmp2, xtmp1, vlen_enc, true);\n-  vpgenmin_value(etype, xtmp1, xtmp1, vlen_enc);\n+  vpgenmax_value(elem_bt, xtmp2, xtmp1, vlen_enc, true);\n+  vpgenmin_value(elem_bt, xtmp1, xtmp1, vlen_enc);\n@@ -6905,1 +6913,1 @@\n-  evpblend(etype, xtmp2, ktmp2, xtmp2, xtmp1, true, vlen_enc);\n+  evpblend(elem_bt, xtmp2, ktmp2, xtmp2, xtmp1, true, vlen_enc);\n@@ -6907,1 +6915,1 @@\n-  evpblend(etype, dst, ktmp1, dst, xtmp2, true, vlen_enc);\n+  evpblend(elem_bt, dst, ktmp1, dst, xtmp2, true, vlen_enc);\n@@ -6911,3 +6919,4 @@\n-void C2_MacroAssembler::saturating_signed_add_sub_dq_avx(BasicType etype, int opc, XMMRegister dst, XMMRegister src1,\n-                                                         XMMRegister src2, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                                         XMMRegister xtmp3, XMMRegister xtmp4, int vlen_enc) {\n+void C2_MacroAssembler::vector_addsub_dq_saturating_avx(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1,\n+                                                        XMMRegister src2, XMMRegister xtmp1, XMMRegister xtmp2,\n+                                                        XMMRegister xtmp3, XMMRegister xtmp4, int vlen_enc) {\n+  assert(elem_bt == T_INT || elem_bt == T_LONG, \"\");\n@@ -6916,1 +6925,1 @@\n-  if (opc == Op_SaturatingAddVI || opc == Op_SaturatingAddVL) {\n+  if (ideal_opc == Op_SaturatingAddV) {\n@@ -6918,1 +6927,1 @@\n-    vpadd(etype, dst, src1, src2, vlen_enc);\n+    vpadd(elem_bt, dst, src1, src2, vlen_enc);\n@@ -6925,1 +6934,1 @@\n-    assert(opc == Op_SaturatingSubVI || opc == Op_SaturatingSubVL, \"\");\n+    assert(ideal_opc == Op_SaturatingSubV, \"\");\n@@ -6927,1 +6936,1 @@\n-    vpsub(etype, dst, src1, src2, vlen_enc);\n+    vpsub(elem_bt, dst, src1, src2, vlen_enc);\n@@ -6937,1 +6946,1 @@\n-  vpsign_extend_dq(etype, xtmp3, xtmp2, vlen_enc);\n+  vpsign_extend_dq(elem_bt, xtmp3, xtmp2, vlen_enc);\n@@ -6940,2 +6949,2 @@\n-  vpgenmax_value(etype, xtmp2, xtmp1, vlen_enc);\n-  vpgenmin_value(etype, xtmp1, xtmp1, vlen_enc);\n+  vpgenmax_value(elem_bt, xtmp2, xtmp1, vlen_enc);\n+  vpgenmin_value(elem_bt, xtmp1, xtmp1, vlen_enc);\n@@ -6944,1 +6953,1 @@\n-  vpsign_extend_dq(etype, xtmp4, src1, vlen_enc);\n+  vpsign_extend_dq(elem_bt, xtmp4, src1, vlen_enc);\n@@ -6951,10 +6960,9 @@\n-void C2_MacroAssembler::saturating_signed_vector_op(int opc, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc) {\n-  switch(opc) {\n-    case Op_SaturatingAddVB:\n-      vpaddsb(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      vpaddsw(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      vpsubsb(dst, src1, src2, vlen_enc);\n+void C2_MacroAssembler::vector_saturating_op(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc) {\n+  switch(elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddsb(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubsb(dst, src1, src2, vlen_enc);\n+      }\n@@ -6962,2 +6970,7 @@\n-    case Op_SaturatingSubVS:\n-      vpsubsw(dst, src1, src2, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddsw(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubsw(dst, src1, src2, vlen_enc);\n+      }\n@@ -6966,1 +6979,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -6971,10 +6984,9 @@\n-void C2_MacroAssembler::saturating_unsigned_vector_op(int opc, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc) {\n-  switch(opc) {\n-    case Op_SaturatingAddVB:\n-      vpaddusb(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingAddVS:\n-      vpaddusw(dst, src1, src2, vlen_enc);\n-      break;\n-    case Op_SaturatingSubVB:\n-      vpsubusb(dst, src1, src2, vlen_enc);\n+void C2_MacroAssembler::vector_saturating_unsigned_op(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc) {\n+  switch(elem_bt) {\n+    case T_BYTE:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddusb(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubusb(dst, src1, src2, vlen_enc);\n+      }\n@@ -6982,2 +6994,7 @@\n-    case Op_SaturatingSubVS:\n-      vpsubusw(dst, src1, src2, vlen_enc);\n+    case T_SHORT:\n+      if (ideal_opc == Op_SaturatingAddV) {\n+        vpaddusw(dst, src1, src2, vlen_enc);\n+      } else {\n+        assert(ideal_opc == Op_SaturatingSubV, \"\");\n+        vpsubusw(dst, src1, src2, vlen_enc);\n+      }\n@@ -6986,1 +7003,1 @@\n-      fatal(\"Unsupported operation  %s\", NodeClassNames[opc]);\n+      fatal(\"Unsupported type %s\", type2name(elem_bt));\n@@ -6991,1 +7008,1 @@\n-void C2_MacroAssembler::saturating_vector_op(int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2, bool is_unsigned, int vlen_enc) {\n+void C2_MacroAssembler::vector_saturating_op(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, bool is_unsigned, int vlen_enc) {\n@@ -6993,1 +7010,1 @@\n-    saturating_unsigned_vector_op(opc, dst, src1, src2, vlen_enc);\n+    vector_saturating_unsigned_op(ideal_opc, elem_bt, dst, src1, src2, vlen_enc);\n@@ -6995,1 +7012,1 @@\n-    saturating_signed_vector_op(opc, dst, src1, src2, vlen_enc);\n+    vector_saturating_op(ideal_opc, elem_bt, dst, src1, src2, vlen_enc);\n@@ -6999,1 +7016,1 @@\n-void C2_MacroAssembler::saturating_vector_op(int opc, XMMRegister dst, XMMRegister src1, Address src2, bool is_unsigned, int vlen_enc) {\n+void C2_MacroAssembler::vector_saturating_op(int ideal_opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, Address src2, bool is_unsigned, int vlen_enc) {\n@@ -7001,1 +7018,1 @@\n-    saturating_unsigned_vector_op(opc, dst, src1, src2, vlen_enc);\n+    vector_saturating_unsigned_op(ideal_opc, elem_bt, dst, src1, src2, vlen_enc);\n@@ -7003,1 +7020,1 @@\n-    saturating_signed_vector_op(opc, dst, src1, src2, vlen_enc);\n+    vector_saturating_op(ideal_opc, elem_bt, dst, src1, src2, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":241,"deletions":224,"binary":false,"changes":465,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-  void saturating_vector_op(int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2, bool is_unsigned, int vlen_enc);\n+  void vector_saturating_op(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, bool is_unsigned, int vlen_enc);\n@@ -522,1 +522,1 @@\n-  void saturating_vector_op(int opc, XMMRegister dst, XMMRegister src1, Address src2, bool is_unsigned, int vlen_enc);\n+  void vector_saturating_op(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, Address src2, bool is_unsigned, int vlen_enc);\n@@ -524,1 +524,1 @@\n-  void saturating_signed_vector_op(int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n+  void vector_saturating_op(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n@@ -526,1 +526,1 @@\n-  void saturating_signed_vector_op(int opc, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc);\n+  void vector_saturating_op(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc);\n@@ -528,1 +528,1 @@\n-  void saturating_unsigned_vector_op(int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n+  void vector_saturating_unsigned_op(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n@@ -530,1 +530,1 @@\n-  void saturating_unsigned_vector_op(int opc, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc);\n+  void vector_saturating_unsigned_op(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, Address src2, int vlen_enc);\n@@ -532,1 +532,1 @@\n-  void saturating_unsigned_sub_dq_evex(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2, KRegister ktmp, int vlen_enc);\n+  void vector_sub_dq_saturating_unsigned_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, KRegister ktmp, int vlen_enc);\n@@ -534,2 +534,2 @@\n-  void saturating_unsigned_sub_dq_avx(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                      XMMRegister xtmp1, XMMRegister xtmp2, int vlen_enc);\n+  void vector_sub_dq_saturating_unsigned_avx(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                             XMMRegister xtmp1, XMMRegister xtmp2, int vlen_enc);\n@@ -537,2 +537,2 @@\n-  void saturating_unsigned_add_dq_evex(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                       XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, KRegister ktmp, int vlen_enc);\n+  void vector_add_dq_saturating_unsigned_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                              XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp, int vlen_enc);\n@@ -540,2 +540,2 @@\n-  void saturating_unsigned_add_dq_avx(BasicType etype, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                      XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, int vlen_enc);\n+  void vector_add_dq_saturating_unsigned_avx(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                             XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, int vlen_enc);\n@@ -543,2 +543,2 @@\n-  void saturating_signed_add_sub_dq_avx(BasicType etype, int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                        XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4, int vlen_enc);\n+  void vector_addsub_dq_saturating_avx(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                       XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4, int vlen_enc);\n@@ -546,2 +546,2 @@\n-  void saturating_signed_add_sub_dq_evex(BasicType etype, int opc, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n-                                         XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, int vlen_enc);\n+  void vector_addsub_dq_saturating_evex(int opc, BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+                                        XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, int vlen_enc);\n@@ -566,1 +566,1 @@\n-  void evmasked_saturating_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+  void evmasked_saturating_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n@@ -569,1 +569,1 @@\n-  void evmasked_saturating_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1, Address src2,\n+  void evmasked_saturating_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1, Address src2,\n@@ -572,1 +572,1 @@\n-  void evmasked_saturating_signed_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n+  void evmasked_saturating_signed_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1, XMMRegister src2,\n@@ -575,1 +575,1 @@\n-  void evmasked_saturating_signed_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1, Address src2,\n+  void evmasked_saturating_signed_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1, Address src2,\n@@ -578,1 +578,1 @@\n-  void evmasked_saturating_unsigned_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n+  void evmasked_saturating_unsigned_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1,\n@@ -581,1 +581,1 @@\n-  void evmasked_saturating_unsigned_op(int ideal_opc, KRegister mask, XMMRegister dst, XMMRegister src1,\n+  void evmasked_saturating_unsigned_op(int ideal_opc, BasicType elem_bt, KRegister mask, XMMRegister dst, XMMRegister src1,\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1944,13 +1944,3 @@\n-    case Op_SaturatingAddVB:\n-    case Op_SaturatingAddVS:\n-    case Op_SaturatingSubVB:\n-    case Op_SaturatingSubVS:\n-       if (UseAVX < 1 || size_in_bits < 128 || (size_in_bits == 512 && !VM_Version::supports_avx512bw())) {\n-         return false;\n-       }\n-       break;\n-    case Op_SaturatingAddVI:\n-    case Op_SaturatingAddVL:\n-    case Op_SaturatingSubVI:\n-    case Op_SaturatingSubVL:\n-      if (UseAVX < 1 || size_in_bits < 128) {\n+    case Op_SaturatingAddV:\n+    case Op_SaturatingSubV:\n+      if (UseAVX < 1) {\n@@ -1959,0 +1949,3 @@\n+      if (is_subword_type(bt) && size_in_bits == 512 && !VM_Version::supports_avx512bw()) {\n+        return false;\n+      }\n@@ -2145,4 +2138,5 @@\n-    case Op_SaturatingAddVB:\n-    case Op_SaturatingAddVS:\n-    case Op_SaturatingSubVB:\n-    case Op_SaturatingSubVS:\n+    case Op_SaturatingAddV:\n+    case Op_SaturatingSubV:\n+      if (!is_subword_type(bt)) {\n+        return false;\n+      }\n@@ -6514,1 +6508,1 @@\n-instruct uminmax_reg(vec dst, vec a, vec b) %{\n+instruct vector_uminmax_reg(vec dst, vec a, vec b) %{\n@@ -6529,1 +6523,1 @@\n-instruct uminmax_mem(vec dst, vec a, memory b) %{\n+instruct vector_uminmax_mem(vec dst, vec a, memory b) %{\n@@ -6544,1 +6538,1 @@\n-instruct uminmaxq_reg(vec dst, vec a, vec b, vec xtmp1, vec xtmp2) %{\n+instruct vector_uminmaxq_reg(vec dst, vec a, vec b, vec xtmp1, vec xtmp2) %{\n@@ -6558,1 +6552,1 @@\n-instruct uminmax_reg_masked(vec dst, vec src1, vec src2, kReg mask) %{\n+instruct vector_uminmax_reg_masked(vec dst, vec src1, vec src2, kReg mask) %{\n@@ -6572,1 +6566,1 @@\n-instruct uminmax_mem_masked(vec dst, vec src1, memory src2, kReg mask) %{\n+instruct vector_uminmax_mem_masked(vec dst, vec src1, memory src2, kReg mask) %{\n@@ -10578,0 +10572,15 @@\n+instruct vector_saturating_subword_reg(vec dst, vec src1, vec src2)\n+%{\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV src1 src2));\n+  match(Set dst (SaturatingSubV src1 src2));\n+  format %{ \"vector_saturating_subword $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_saturating_op(this->ideal_Opcode(), elem_bt, $dst$$XMMRegister,\n+                            $src1$$XMMRegister, $src2$$XMMRegister, false, vlen_enc);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -10579,1 +10588,1 @@\n-instruct saturating_subword_op_reg(vec dst, vec src1, vec src2)\n+instruct vector_saturating_unsigned_subword_reg(vec dst, vec src1, vec src2)\n@@ -10581,5 +10590,5 @@\n-  match(Set dst (SaturatingAddVB src1 src2));\n-  match(Set dst (SaturatingAddVS src1 src2));\n-  match(Set dst (SaturatingSubVB src1 src2));\n-  match(Set dst (SaturatingSubVS src1 src2));\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t!\" %}\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV src1 src2));\n+  match(Set dst (SaturatingSubV src1 src2));\n+  format %{ \"vector_saturating_unsigned_subword $dst, $src1, $src2\" %}\n@@ -10588,2 +10597,3 @@\n-    bool is_unsigned = Type::is_utype(Matcher::vector_element_type(this));\n-    __ saturating_vector_op(this->ideal_Opcode(), $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, is_unsigned, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_saturating_op(this->ideal_Opcode(), elem_bt, $dst$$XMMRegister,\n+                            $src1$$XMMRegister, $src2$$XMMRegister, true, vlen_enc);\n@@ -10594,1 +10604,1 @@\n-instruct saturating_op_reg_evex(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2)\n+instruct vector_saturating_reg_evex(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2)\n@@ -10596,5 +10606,5 @@\n-  predicate(!Type::is_utype(Matcher::vector_element_type(n)) && (Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()));\n-  match(Set dst (SaturatingAddVI src1 src2));\n-  match(Set dst (SaturatingAddVL src1 src2));\n-  match(Set dst (SaturatingSubVI src1 src2));\n-  match(Set dst (SaturatingSubVL src1 src2));\n+  predicate(!is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned() &&\n+            (Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()));\n+  match(Set dst (SaturatingAddV src1 src2));\n+  match(Set dst (SaturatingSubV src1 src2));\n@@ -10602,1 +10612,1 @@\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2, $ktmp1 and $ktmp2 as TEMP\" %}\n+  format %{ \"vector_saturating_evex $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2, $ktmp1 and $ktmp2 as TEMP\" %}\n@@ -10605,4 +10615,5 @@\n-    BasicType etype = Matcher::vector_element_basic_type(this);\n-    int opc = this->ideal_Opcode();\n-    __ saturating_signed_add_sub_dq_evex(etype, opc, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, $xtmp1$$XMMRegister,\n-                                         $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_addsub_dq_saturating_evex(this->ideal_Opcode(), elem_bt, $dst$$XMMRegister,\n+                                        $src1$$XMMRegister, $src2$$XMMRegister,\n+                                        $xtmp1$$XMMRegister, $xtmp2$$XMMRegister,\n+                                        $ktmp1$$KRegister, $ktmp2$$KRegister, vlen_enc);\n@@ -10613,1 +10624,1 @@\n-instruct saturating_op_reg_avx(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4)\n+instruct vector_saturating_reg_avx(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4)\n@@ -10615,5 +10626,5 @@\n-  predicate(!Type::is_utype(Matcher::vector_element_type(n)) && Matcher::vector_length_in_bytes(n) <= 32 && !VM_Version::supports_avx512vl());\n-  match(Set dst (SaturatingAddVI src1 src2));\n-  match(Set dst (SaturatingAddVL src1 src2));\n-  match(Set dst (SaturatingSubVI src1 src2));\n-  match(Set dst (SaturatingSubVL src1 src2));\n+  predicate(!is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned() &&\n+            Matcher::vector_length_in_bytes(n) <= 32 && !VM_Version::supports_avx512vl());\n+  match(Set dst (SaturatingAddV src1 src2));\n+  match(Set dst (SaturatingSubV src1 src2));\n@@ -10621,1 +10632,1 @@\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2, $xtmp3 and $xtmp4 as TEMP\" %}\n+  format %{ \"vector_saturating_avx $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2, $xtmp3 and $xtmp4 as TEMP\" %}\n@@ -10624,4 +10635,4 @@\n-    BasicType etype = Matcher::vector_element_basic_type(this);\n-    int opc = this->ideal_Opcode();\n-    __ saturating_signed_add_sub_dq_avx(etype, opc, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, $xtmp1$$XMMRegister,\n-                                        $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_addsub_dq_saturating_avx(this->ideal_Opcode(), elem_bt, $dst$$XMMRegister, $src1$$XMMRegister,\n+                                       $src2$$XMMRegister, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister,\n+                                       $xtmp3$$XMMRegister, $xtmp4$$XMMRegister, vlen_enc);\n@@ -10632,1 +10643,1 @@\n-instruct saturating_unsigned_add_reg_evex(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, vec xtmp3, kReg ktmp)\n+instruct vector_add_saturating_unsigned_reg_evex(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, kReg ktmp)\n@@ -10634,5 +10645,6 @@\n-  predicate(Type::is_utype(Matcher::vector_element_type(n)) && (Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()));\n-  match(Set dst (SaturatingAddVI src1 src2));\n-  match(Set dst (SaturatingAddVL src1 src2));\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP ktmp);\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2, $xtmp3 and $ktmp as TEMP\" %}\n+  predicate(!is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned() &&\n+            (Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()));\n+  match(Set dst (SaturatingAddV src1 src2));\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP ktmp);\n+  format %{ \"vector_add_saturating_unsigned_evex $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2 and $ktmp as TEMP\" %}\n@@ -10641,3 +10653,3 @@\n-    BasicType etype = Matcher::vector_element_basic_type(this);\n-    __ saturating_unsigned_add_dq_evex(etype, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, $xtmp1$$XMMRegister,\n-                                       $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $ktmp$$KRegister, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_add_dq_saturating_unsigned_evex(elem_bt, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister,\n+                                              $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp$$KRegister, vlen_enc);\n@@ -10648,1 +10660,1 @@\n-instruct saturating_unsigned_add_reg_avx(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, vec xtmp3)\n+instruct vector_add_saturating_unsigned_reg_avx(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2, vec xtmp3)\n@@ -10650,3 +10662,4 @@\n-  predicate(Type::is_utype(Matcher::vector_element_type(n)) && Matcher::vector_length_in_bytes(n) <= 32 && !VM_Version::supports_avx512vl());\n-  match(Set dst (SaturatingAddVI src1 src2));\n-  match(Set dst (SaturatingAddVL src1 src2));\n+  predicate(!is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned() &&\n+            Matcher::vector_length_in_bytes(n) <= 32 && !VM_Version::supports_avx512vl());\n+  match(Set dst (SaturatingAddV src1 src2));\n@@ -10654,1 +10667,1 @@\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2 and $xtmp3 as TEMP\" %}\n+  format %{ \"vector_add_saturating_unsigned_avx $dst, $src1, $src2 \\t! using $xtmp1, $xtmp2 and $xtmp3 as TEMP\" %}\n@@ -10657,3 +10670,3 @@\n-    BasicType etype = Matcher::vector_element_basic_type(this);\n-    __ saturating_unsigned_add_dq_avx(etype, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, $xtmp1$$XMMRegister,\n-                                      $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_add_dq_saturating_unsigned_avx(elem_bt, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister,\n+                                             $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, vlen_enc);\n@@ -10664,1 +10677,1 @@\n-instruct saturating_unsigned_sub_reg_evex(vec dst, vec src1, vec src2, kReg ktmp)\n+instruct vector_sub_saturating_unsigned_reg_evex(vec dst, vec src1, vec src2, kReg ktmp)\n@@ -10666,3 +10679,4 @@\n-  predicate(Type::is_utype(Matcher::vector_element_type(n)) && (Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()));\n-  match(Set dst (SaturatingSubVI src1 src2));\n-  match(Set dst (SaturatingSubVL src1 src2));\n+  predicate(!is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned() &&\n+            (Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()));\n+  match(Set dst (SaturatingSubV src1 src2));\n@@ -10670,1 +10684,1 @@\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t! using $ktmp as TEMP\" %}\n+  format %{ \"vector_sub_saturating_unsigned_evex $dst, $src1, $src2 \\t! using $ktmp as TEMP\" %}\n@@ -10673,2 +10687,3 @@\n-    BasicType etype = Matcher::vector_element_basic_type(this);\n-    __ saturating_unsigned_sub_dq_evex(etype, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, $ktmp$$KRegister, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_sub_dq_saturating_unsigned_evex(elem_bt, $dst$$XMMRegister, $src1$$XMMRegister,\n+                                              $src2$$XMMRegister, $ktmp$$KRegister, vlen_enc);\n@@ -10679,1 +10694,1 @@\n-instruct saturating_unsigned_sub_reg_avx(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2)\n+instruct vector_sub_saturating_unsigned_reg_avx(vec dst, vec src1, vec src2, vec xtmp1, vec xtmp2)\n@@ -10681,5 +10696,6 @@\n-  predicate(Type::is_utype(Matcher::vector_element_type(n)) && Matcher::vector_length_in_bytes(n) <= 32 && !VM_Version::supports_avx512vl());\n-  match(Set dst (SaturatingSubVI src1 src2));\n-  match(Set dst (SaturatingSubVL src1 src2));\n-  effect(TEMP xtmp1, TEMP xtmp2);\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t! using $xtmp1 and $xtmp2 as TEMP\" %}\n+  predicate(!is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned() &&\n+            Matcher::vector_length_in_bytes(n) <= 32 && !VM_Version::supports_avx512vl());\n+  match(Set dst (SaturatingSubV src1 src2));\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2);\n+  format %{ \"vector_sub_saturating_unsigned_avx $dst, $src1, $src2 \\t! using $xtmp1 and $xtmp2 as TEMP\" %}\n@@ -10688,3 +10704,3 @@\n-    BasicType etype = Matcher::vector_element_basic_type(this);\n-    __ saturating_unsigned_sub_dq_avx(etype, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, $xtmp1$$XMMRegister,\n-                                      $xtmp2$$XMMRegister, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_sub_dq_saturating_unsigned_avx(elem_bt, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister,\n+                                             $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, vlen_enc);\n@@ -10695,1 +10711,1 @@\n-instruct saturating_subword_op_mem(vec dst, vec src1, memory src2)\n+instruct vector_saturating_subword_mem(vec dst, vec src1, memory src2)\n@@ -10697,5 +10713,5 @@\n-  match(Set dst (SaturatingAddVB src1 (LoadVector src2)));\n-  match(Set dst (SaturatingAddVS src1 (LoadVector src2)));\n-  match(Set dst (SaturatingSubVB src1 (LoadVector src2)));\n-  match(Set dst (SaturatingSubVS src1 (LoadVector src2)));\n-  format %{ \"saturating_vector_op $dst, $src1, $src2 \\t!\" %}\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV src1 (LoadVector src2)));\n+  match(Set dst (SaturatingSubV src1 (LoadVector src2)));\n+  format %{ \"vector_saturating_subword $dst, $src1, $src2\" %}\n@@ -10704,2 +10720,3 @@\n-    bool is_unsigned = Type::is_utype(Matcher::vector_element_type(this));\n-    __ saturating_vector_op(this->ideal_Opcode(), $dst$$XMMRegister, $src1$$XMMRegister, $src2$$Address, is_unsigned, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_saturating_op(this->ideal_Opcode(), elem_bt, $dst$$XMMRegister,\n+                            $src1$$XMMRegister, $src2$$Address, false, vlen_enc);\n@@ -10710,6 +10727,7 @@\n-instruct saturating_subword_masked_op_reg(vec dst, vec src, kReg mask) %{\n-  match(Set dst (SaturatingAddVB (Binary dst src) mask));\n-  match(Set dst (SaturatingAddVS (Binary dst src) mask));\n-  match(Set dst (SaturatingSubVB (Binary dst src) mask));\n-  match(Set dst (SaturatingSubVS (Binary dst src) mask));\n-  format %{ \"saturating_vector_masked_op $dst, $mask, $src \\t!\" %}\n+instruct vector_saturating_unsigned_subword_mem(vec dst, vec src1, memory src2)\n+%{\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV src1 (LoadVector src2)));\n+  match(Set dst (SaturatingSubV src1 (LoadVector src2)));\n+  format %{ \"vector_saturating_unsigned_subword $dst, $src1, $src2\" %}\n@@ -10718,4 +10736,18 @@\n-    int opc = this->ideal_Opcode();\n-    bool is_unsigned = Type::is_utype(Matcher::vector_element_type(this));\n-    __ evmasked_saturating_op(opc, $mask$$KRegister, $dst$$XMMRegister,\n-                              $dst$$XMMRegister, $src$$XMMRegister, is_unsigned, true, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_saturating_op(this->ideal_Opcode(), elem_bt, $dst$$XMMRegister,\n+                            $src1$$XMMRegister, $src2$$Address, true, vlen_enc);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vector_saturating_subword_masked_reg(vec dst, vec src, kReg mask) %{\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV (Binary dst src) mask));\n+  match(Set dst (SaturatingSubV (Binary dst src) mask));\n+  format %{ \"vector_saturating_masked $dst, $mask, $src\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ evmasked_saturating_op(this->ideal_Opcode(), elem_bt, $mask$$KRegister, $dst$$XMMRegister,\n+                              $dst$$XMMRegister, $src$$XMMRegister, false, true, vlen_enc);\n@@ -10726,6 +10758,6 @@\n-instruct saturating_subword_masked_op_mem(vec dst, memory src, kReg mask) %{\n-  match(Set dst (SaturatingAddVB (Binary dst (LoadVector src)) mask));\n-  match(Set dst (SaturatingAddVS (Binary dst (LoadVector src)) mask));\n-  match(Set dst (SaturatingSubVB (Binary dst (LoadVector src)) mask));\n-  match(Set dst (SaturatingSubVS (Binary dst (LoadVector src)) mask));\n-  format %{ \"saturating_vector_masked_op $dst, $mask, $src \\t!\" %}\n+instruct vector_saturating_unsigned_subword_masked_reg(vec dst, vec src, kReg mask) %{\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV (Binary dst src) mask));\n+  match(Set dst (SaturatingSubV (Binary dst src) mask));\n+  format %{ \"vector_saturating_unsigned_masked $dst, $mask, $src\" %}\n@@ -10734,4 +10766,33 @@\n-    int opc = this->ideal_Opcode();\n-    bool is_unsigned = Type::is_utype(Matcher::vector_element_type(this));\n-    __ evmasked_saturating_op(opc, $mask$$KRegister, $dst$$XMMRegister,\n-                              $dst$$XMMRegister, $src$$Address, is_unsigned, true, vlen_enc);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ evmasked_saturating_op(this->ideal_Opcode(), elem_bt, $mask$$KRegister, $dst$$XMMRegister,\n+                              $dst$$XMMRegister, $src$$XMMRegister, true, true, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vector_saturating_subword_masked_mem(vec dst, memory src, kReg mask) %{\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV (Binary dst (LoadVector src)) mask));\n+  match(Set dst (SaturatingSubV (Binary dst (LoadVector src)) mask));\n+  format %{ \"vector_saturating_masked $dst, $mask, $src\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ evmasked_saturating_op(this->ideal_Opcode(), elem_bt, $mask$$KRegister, $dst$$XMMRegister,\n+                              $dst$$XMMRegister, $src$$Address, false, true, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vector_saturating_unsigned_subword_masked_mem(vec dst, memory src, kReg mask) %{\n+  predicate(is_subword_type(Matcher::vector_element_basic_type(n)) &&\n+            n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV (Binary dst (LoadVector src)) mask));\n+  match(Set dst (SaturatingSubV (Binary dst (LoadVector src)) mask));\n+  format %{ \"vector_saturating_unsigned_masked $dst, $mask, $src\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+    __ evmasked_saturating_op(this->ideal_Opcode(), elem_bt, $mask$$KRegister, $dst$$XMMRegister,\n+                              $dst$$XMMRegister, $src$$Address, true, true, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":174,"deletions":113,"binary":false,"changes":287,"status":"modified"},{"patch":"@@ -4362,3 +4362,1 @@\n-    \"CountLeadingZerosV\", \"CountTrailingZerosV\", \"SignumVF\", \"SignumVD\",\n-    \"SaturatingAddVB\", \"SaturatingAddVS\", \"SaturatingAddVI\", \"SaturatingAddVL\",\n-    \"SaturatingSubVB\", \"SaturatingSubVS\", \"SaturatingSubVI\", \"SaturatingSubVL\",\n+    \"CountLeadingZerosV\", \"CountTrailingZerosV\", \"SignumVF\", \"SignumVD\", \"SaturatingAddV\", \"SaturatingSubV\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,66 +190,0 @@\n-\/\/------------------------------Saturating Operations ------------------------\n-\n-class SaturatingAddINode : public Node {\n-public:\n-  SaturatingAddINode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeInt::INT; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-class SaturatingAddLNode : public Node {\n-public:\n-  SaturatingAddLNode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeLong::LONG; }\n-  virtual uint ideal_reg() const { return Op_RegL; }\n-};\n-\n-class SaturatingSubINode : public Node {\n-public:\n-  SaturatingSubINode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeInt::INT; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-class SaturatingSubLNode : public Node {\n-public:\n-  SaturatingSubLNode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeLong::LONG; }\n-  virtual uint ideal_reg() const { return Op_RegL; }\n-};\n-\n-class SaturatingUAddINode : public Node {\n-public:\n-  SaturatingUAddINode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeInt::UINT; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-class SaturatingUAddLNode : public Node {\n-public:\n-  SaturatingUAddLNode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeLong::ULONG; }\n-  virtual uint ideal_reg() const { return Op_RegL; }\n-};\n-\n-class SaturatingUSubINode : public Node {\n-public:\n-  SaturatingUSubINode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeInt::UINT; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-class SaturatingUSubLNode : public Node {\n-public:\n-  SaturatingUSubLNode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeLong::ULONG; }\n-  virtual uint ideal_reg() const { return Op_RegL; }\n-};\n-\n@@ -402,20 +336,0 @@\n-\/\/------------------------------UMaxINode---------------------------------------\n-\/\/ Maximum of 2 unsigned integers.\n-class UMaxINode : public Node {\n-public:\n-  UMaxINode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeInt::UINT; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-\/\/------------------------------UMinINode---------------------------------------\n-\/\/ Minimum of 2 unsigned integers.\n-class UMinINode : public Node {\n-public:\n-  UMinINode(Node* in1, Node* in2 ) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeInt::UINT; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n@@ -460,20 +374,0 @@\n-\/\/------------------------------UMaxINode---------------------------------------\n-\/\/ Maximum of 2 unsigned integers.\n-class UMaxLNode : public Node {\n-public:\n-  UMaxLNode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeLong::ULONG; }\n-  virtual uint ideal_reg() const { return Op_RegL; }\n-};\n-\n-\/\/------------------------------UMinINode---------------------------------------\n-\/\/ Minimum of 2 unsigned integers.\n-class UMinLNode : public Node {\n-public:\n-  UMinLNode(Node* in1, Node* in2) : Node(in1,in2) {}\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeLong::ULONG; }\n-  virtual uint ideal_reg() const { return Op_RegL; }\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":0,"deletions":106,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -224,2 +224,0 @@\n-macro(UMaxI)\n-macro(UMaxL)\n@@ -241,2 +239,0 @@\n-macro(UMinI)\n-macro(UMinL)\n@@ -335,16 +331,2 @@\n-macro(SaturatingAddI)\n-macro(SaturatingAddL)\n-macro(SaturatingUAddI)\n-macro(SaturatingUAddL)\n-macro(SaturatingSubI)\n-macro(SaturatingSubL)\n-macro(SaturatingUSubI)\n-macro(SaturatingUSubL)\n-macro(SaturatingAddVB)\n-macro(SaturatingAddVS)\n-macro(SaturatingAddVI)\n-macro(SaturatingAddVL)\n-macro(SaturatingSubVB)\n-macro(SaturatingSubVS)\n-macro(SaturatingSubVI)\n-macro(SaturatingSubVL)\n+macro(SaturatingAddV)\n+macro(SaturatingSubV)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2817,12 +2817,0 @@\n-const Type* Matcher::vector_element_type(const Node* n) {\n-  const TypeVect* vt = n->bottom_type()->is_vect();\n-  return vt->element_type();\n-}\n-\n-const Type* Matcher::vector_element_type(const MachNode* use, const MachOper* opnd) {\n-  int def_idx = use->operand_index(opnd);\n-  Node* def = use->in(def_idx);\n-  return def->bottom_type()->is_vect()->element_type();\n-}\n-\n-\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -379,2 +379,0 @@\n-  static const Type* vector_element_type(const Node* n);\n-  static const Type* vector_element_type(const MachNode* use, const MachOper* opnd);\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,3 +161,0 @@\n-    if (this == TypeInt::UBYTE)  return T_BYTE;\n-    if (this == TypeInt::USHORT) return T_SHORT;\n-    if (this == TypeInt::UINT)   return T_INT;\n@@ -488,1 +485,1 @@\n-  TypeInt::UBYTE   = TypeInt::make(0, 255,       WidenMin); \/\/ Unsigned Bytes\n+  TypeInt::UBYTE   = TypeInt::make(0, 255,       WidenMin); \/\/ Unsigned bytes\n@@ -491,1 +488,0 @@\n-  TypeInt::USHORT  = TypeInt::make(0,65535,      WidenMin); \/\/ Unsigned shorts\n@@ -495,1 +491,0 @@\n-  TypeInt::UINT    = TypeInt::make(0, max_juint, WidenMin); \/\/ Unsigned ints\n@@ -516,1 +511,0 @@\n-  TypeLong::ULONG   = TypeLong::make(0, max_julong, WidenMin); \/\/ Unsigned longs\n@@ -1532,20 +1526,0 @@\n-const Type* Type::get_utype(BasicType bt) {\n-  switch(bt) {\n-    case T_BYTE:  return TypeInt::UBYTE;\n-    case T_SHORT: return TypeInt::USHORT;\n-    case T_INT:   return TypeInt::UINT;\n-    case T_LONG:  return TypeLong::ULONG;\n-    default: fatal(\"Unexpected type: %s\", type2name(bt)); break;\n-  }\n-}\n-\n-bool Type::is_utype(const Type* elem_ty) {\n-  if (elem_ty == TypeInt::UBYTE  ||\n-      elem_ty == TypeInt::USHORT ||\n-      elem_ty == TypeInt::UINT   ||\n-      elem_ty == TypeLong::ULONG) {\n-    return true;\n-  }\n-  return false;\n-}\n-\n@@ -1610,1 +1584,0 @@\n-const TypeInt *TypeInt::USHORT; \/\/ Unsigned shorts, 0-65535\n@@ -1614,1 +1587,0 @@\n-const TypeInt *TypeInt::UINT;\n@@ -1878,1 +1850,0 @@\n-const TypeLong *TypeLong::ULONG; \/\/ 64-bit unsigned long.\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -468,2 +468,0 @@\n-  static const Type* get_utype(BasicType elem_bt);\n-  static bool is_utype(const Type* elem_ty);\n@@ -630,1 +628,0 @@\n-  static const TypeInt *USHORT;\n@@ -634,1 +631,0 @@\n-  static const TypeInt *UINT;\n@@ -693,1 +689,0 @@\n-  static const TypeLong *ULONG;  \/\/ 64-bit unsigned [0..max_julong]\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -368,0 +368,3 @@\n+  bool has_scalar_op = VectorSupport::has_scalar_op(opr->get_con());\n+  bool is_unsigned = VectorSupport::is_unsigned_op(opr->get_con());\n+\n@@ -370,1 +373,1 @@\n-  int sopc = VectorNode::opcode(opc, elem_bt);\n+  int sopc = has_scalar_op ? VectorNode::opcode(opc, elem_bt) : opc;\n@@ -469,1 +472,0 @@\n-  bool is_unsigned_op = VectorNode::is_unsigned_opcode(opc);\n@@ -481,6 +483,1 @@\n-    const TypeVect* vt = nullptr;\n-    if (!is_unsigned_op) {\n-      vt = TypeVect::make(elem_bt, num_elem, is_vector_mask(vbox_klass));\n-    } else {\n-      vt = TypeVect::make(Type::get_utype(elem_bt), num_elem, is_vector_mask(vbox_klass));\n-    }\n+    const TypeVect* vt = TypeVect::make(elem_bt, num_elem, is_vector_mask(vbox_klass));\n@@ -490,1 +487,1 @@\n-        operation = VectorNode::make(sopc, opd1, opd2, vt, is_vector_mask(vbox_klass), VectorNode::is_shift_opcode(opc), is_unsigned_op);\n+        operation = VectorNode::make(sopc, opd1, opd2, vt, is_vector_mask(vbox_klass), VectorNode::is_shift_opcode(opc), is_unsigned);\n@@ -500,2 +497,1 @@\n-  \/\/ Reinterpret unsigned vector nodes to signed vectors before boxing it to\n-  \/\/ facilitate seamless unboxing-boxing optimization.\n+\n@@ -506,5 +502,0 @@\n-      operation = gvn().transform(operation);\n-      if (is_unsigned_op) {\n-        const TypeVect* to_vect_type = TypeVect::make(elem_bt, num_elem, is_vector_mask(vbox_klass));\n-        operation = gvn().transform(new VectorReinterpretNode(operation, operation->bottom_type()->is_vect(), to_vect_type));\n-      }\n@@ -514,4 +505,0 @@\n-      if (is_unsigned_op) {\n-        const TypeVect* to_vect_type = TypeVect::make(elem_bt, num_elem, is_vector_mask(vbox_klass));\n-        operation = gvn().transform(new VectorReinterpretNode(operation, operation->bottom_type()->is_vect(), to_vect_type));\n-      }\n@@ -519,7 +506,0 @@\n-      operation = gvn().transform(operation);\n-    }\n-  } else {\n-    operation = gvn().transform(operation);\n-    if (is_unsigned_op) {\n-      const TypeVect* to_vect_type = TypeVect::make(elem_bt, num_elem, is_vector_mask(vbox_klass));\n-      operation = gvn().transform(new VectorReinterpretNode(operation, operation->bottom_type()->is_vect(), to_vect_type));\n@@ -528,0 +508,1 @@\n+  operation = gvn().transform(operation);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":8,"deletions":27,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -271,36 +271,0 @@\n-  case Op_UMinI:\n-  case Op_UMinL:\n-    switch(bt) {\n-    case T_BYTE:\n-    case T_SHORT:\n-    case T_INT:\n-    case T_LONG: return Op_UMinV;\n-    default: return 0;\n-    }\n-  case Op_UMaxI:\n-  case Op_UMaxL:\n-    switch(bt) {\n-    case T_BYTE:\n-    case T_SHORT:\n-    case T_INT:\n-    case T_LONG: return Op_UMaxV;\n-    default: return 0;\n-    }\n-  case Op_SaturatingAddI:\n-  case Op_SaturatingUAddI:\n-    switch (bt) {\n-    case T_BYTE: return Op_SaturatingAddVB;\n-    case T_SHORT: return Op_SaturatingAddVS;\n-    case T_INT:  return Op_SaturatingAddVI;\n-    case T_LONG: return Op_SaturatingAddVL;\n-    default: return 0;\n-    }\n-  case Op_SaturatingSubI:\n-  case Op_SaturatingUSubI:\n-    switch (bt) {\n-    case T_BYTE: return Op_SaturatingSubVB;\n-    case T_SHORT: return Op_SaturatingSubVS;\n-    case T_INT:  return Op_SaturatingSubVI;\n-    case T_LONG: return Op_SaturatingSubVL;\n-    default: return 0;\n-    }\n@@ -546,12 +510,0 @@\n-bool VectorNode::is_unsigned_opcode(int opc) {\n-  switch (opc) {\n-  case Op_SaturatingUAddI:\n-  case Op_SaturatingUSubI:\n-  case Op_SaturatingUSubL:\n-  case Op_SaturatingUAddL:\n-    return true;\n-  default:\n-    return false;\n-  }\n-}\n-\n@@ -814,8 +766,2 @@\n-  case Op_SaturatingAddVB: return new SaturatingAddVBNode(n1, n2, vt, is_unsigned);\n-  case Op_SaturatingAddVS: return new SaturatingAddVSNode(n1, n2, vt, is_unsigned);\n-  case Op_SaturatingSubVB: return new SaturatingSubVBNode(n1, n2, vt, is_unsigned);\n-  case Op_SaturatingSubVS: return new SaturatingSubVSNode(n1, n2, vt, is_unsigned);\n-  case Op_SaturatingAddVI: return new SaturatingAddVINode(n1, n2, vt, is_unsigned);\n-  case Op_SaturatingAddVL: return new SaturatingAddVLNode(n1, n2, vt, is_unsigned);\n-  case Op_SaturatingSubVI: return new SaturatingSubVINode(n1, n2, vt, is_unsigned);\n-  case Op_SaturatingSubVL: return new SaturatingSubVLNode(n1, n2, vt, is_unsigned);\n+  case Op_SaturatingAddV: return new SaturatingAddVNode(n1, n2, vt, is_unsigned);\n+  case Op_SaturatingSubV: return new SaturatingSubVNode(n1, n2, vt, is_unsigned);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":2,"deletions":56,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-  static bool is_unsigned_opcode(int opc);\n@@ -148,0 +147,3 @@\n+\/\/ Base IR node for saturating signed \/ unsigned operations.\n+\/\/ Saturating operation prevents wrapping result value in over\/underflowing\n+\/\/ scenarios, instead returns delimiting MAX\/MIN value of result type.\n@@ -170,6 +172,0 @@\n-class SaturatingAddVBNode : public SaturatingVectorNode {\n- public:\n-  SaturatingAddVBNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1, in2, vt, is_unsigned) {}\n-  virtual int Opcode() const;\n-};\n-\n@@ -184,7 +180,0 @@\n-class SaturatingAddVSNode : public SaturatingVectorNode {\n- public:\n-  SaturatingAddVSNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1, in2, vt, is_unsigned) {}\n-  virtual int Opcode() const;\n-};\n-\n-\n@@ -199,5 +188,0 @@\n-class SaturatingAddVINode : public SaturatingVectorNode {\n- public:\n-  SaturatingAddVINode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1, in2, vt, is_unsigned) {}\n-  virtual int Opcode() const;\n-};\n@@ -213,6 +197,0 @@\n-class SaturatingAddVLNode : public SaturatingVectorNode {\n- public:\n-  SaturatingAddVLNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1, in2, vt, is_unsigned) {}\n-  virtual int Opcode() const;\n-};\n-\n@@ -373,6 +351,0 @@\n-class SaturatingSubVBNode : public SaturatingVectorNode {\n- public:\n-  SaturatingSubVBNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1,in2,vt,is_unsigned) {}\n-  virtual int Opcode() const;\n-};\n-\n@@ -387,6 +359,0 @@\n-class SaturatingSubVSNode : public SaturatingVectorNode {\n- public:\n-  SaturatingSubVSNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1,in2,vt,is_unsigned) {}\n-  virtual int Opcode() const;\n-};\n-\n@@ -401,6 +367,0 @@\n-class SaturatingSubVINode : public SaturatingVectorNode {\n- public:\n-  SaturatingSubVINode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1,in2,vt,is_unsigned) {}\n-  virtual int Opcode() const;\n-};\n-\n@@ -415,1 +375,11 @@\n-class SaturatingSubVLNode : public SaturatingVectorNode {\n+\/\/------------------------------SaturatingAddVNode-----------------------------\n+\/\/ Vector saturating addition.\n+class SaturatingAddVNode : public SaturatingVectorNode {\n+ public:\n+  SaturatingAddVNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1, in2, vt, is_unsigned) {}\n+  virtual int Opcode() const;\n+};\n+\n+\/\/------------------------------SaturatingSubVNode-----------------------------\n+\/\/ Vector saturating subtraction.\n+class SaturatingSubVNode : public SaturatingVectorNode {\n@@ -417,1 +387,1 @@\n-  SaturatingSubVLNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1,in2,vt,is_unsigned) {}\n+  SaturatingSubVNode(Node* in1, Node* in2, const TypeVect* vt, bool is_unsigned) : SaturatingVectorNode(in1,in2,vt,is_unsigned) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":15,"deletions":45,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -202,0 +202,26 @@\n+bool VectorSupport::has_scalar_op(jint id) {\n+  VectorOperation vop = (VectorOperation)id;\n+  switch (vop) {\n+    case VECTOR_OP_COMPRESS:\n+    case VECTOR_OP_EXPAND:\n+    case VECTOR_OP_SADD:\n+    case VECTOR_OP_SUADD:\n+    case VECTOR_OP_SSUB:\n+    case VECTOR_OP_SUSUB:\n+      return false;\n+    default:\n+      return true;\n+  }\n+}\n+\n+bool VectorSupport::is_unsigned_op(jint id) {\n+  VectorOperation vop = (VectorOperation)id;\n+  switch (vop) {\n+    case VECTOR_OP_SUADD:\n+    case VECTOR_OP_SUSUB:\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n@@ -281,2 +307,2 @@\n-        case T_INT:    return Op_UMinI;\n-        case T_LONG:   return Op_UMinL;\n+        case T_INT:\n+        case T_LONG:   return Op_UMinV;\n@@ -291,2 +317,2 @@\n-        case T_INT:    return Op_UMaxI;\n-        case T_LONG:   return Op_UMaxL;\n+        case T_INT:\n+        case T_LONG:   return Op_UMaxV;\n@@ -359,40 +385,0 @@\n-    case VECTOR_OP_SADD: {\n-      switch (bt) {\n-        case T_BYTE:   \/\/ fall-through\n-        case T_SHORT:  \/\/ fall-through\n-        case T_INT:  return Op_SaturatingAddI;\n-        case T_LONG: return Op_SaturatingAddL;\n-        default: fatal(\"RSHIFT: %s\", type2name(bt));\n-      }\n-      break;\n-    }\n-    case VECTOR_OP_SSUB: {\n-      switch (bt) {\n-        case T_BYTE:   \/\/ fall-through\n-        case T_SHORT:  \/\/ fall-through\n-        case T_INT:  return Op_SaturatingSubI;\n-        case T_LONG: return Op_SaturatingSubL;\n-        default: fatal(\"RSHIFT: %s\", type2name(bt));\n-      }\n-      break;\n-    }\n-    case VECTOR_OP_SUADD: {\n-      switch (bt) {\n-        case T_BYTE:   \/\/ fall-through\n-        case T_SHORT:  \/\/ fall-through\n-        case T_INT:  return Op_SaturatingUAddI;\n-        case T_LONG: return Op_SaturatingUAddL;\n-        default: fatal(\"RSHIFT: %s\", type2name(bt));\n-      }\n-      break;\n-    }\n-    case VECTOR_OP_SUSUB: {\n-      switch (bt) {\n-        case T_BYTE:   \/\/ fall-through\n-        case T_SHORT:  \/\/ fall-through\n-        case T_INT:  return Op_SaturatingUSubI;\n-        case T_LONG: return Op_SaturatingUSubL;\n-        default: fatal(\"RSHIFT: %s\", type2name(bt));\n-      }\n-      break;\n-    }\n@@ -596,0 +582,22 @@\n+    case VECTOR_OP_SADD:\n+    case VECTOR_OP_SUADD: {\n+      switch(bt) {\n+        case T_BYTE:   \/\/ fall-through\n+        case T_SHORT:  \/\/ fall-through\n+        case T_INT:    \/\/ fall-through\n+        case T_LONG:   return Op_SaturatingAddV;\n+        default: fatal(\"S[U]ADD: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n+    case VECTOR_OP_SSUB:\n+    case VECTOR_OP_SUSUB: {\n+      switch(bt) {\n+        case T_BYTE:   \/\/ fall-through\n+        case T_SHORT:  \/\/ fall-through\n+        case T_INT:    \/\/ fall-through\n+        case T_LONG:   return Op_SaturatingSubV;\n+        default: fatal(\"S[U}SUB: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":52,"deletions":44,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -128,2 +128,2 @@\n-    VECTOR_OP_UMIN = 123,\n-    VECTOR_OP_UMAX = 124,\n+    VECTOR_OP_UMIN  = 123,\n+    VECTOR_OP_UMAX  = 124,\n@@ -152,0 +152,2 @@\n+  static bool has_scalar_op(jint id);\n+  static bool is_unsigned_op(jint id);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -577,109 +577,0 @@\n-    \/**\n-     * Based on the unsigned comparison returns the greater of two {@code byte} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static byte maxUnsigned(byte a, byte b) {\n-        return compareUnsigned(a, b) > 0 ? a : b;\n-    }\n-\n-    \/**\n-     * Based on the unsigned comparison returns the smaller of two {@code byte} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static byte minUnsigned(byte a, byte b) {\n-        return compareUnsigned(a, b) < 0 ? a : b;\n-    }\n-\n-    \/**\n-     * Saturating addition of two {@code byte} values,\n-     * which returns a {@code Byte.MIN_VALUE} in underflowing or\n-     * {@code Byte.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code byte} value range else delimiting {@code Byte.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static byte addSaturating(byte a, byte b) {\n-        int res = a + b;\n-        if (res > Byte.MAX_VALUE) {\n-            return Byte.MAX_VALUE;\n-        } else if (res < Byte.MIN_VALUE) {\n-            return Byte.MIN_VALUE;\n-        } else {\n-           return (byte)res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating subtraction of two {@code byte} values,\n-     * which returns a {@code Byte.MIN_VALUE} in underflowing or\n-     * {@code Byte.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code byte} value range else delimiting {@code Byte.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static byte subSaturating(byte a, byte b) {\n-        int res = a - b;\n-        if (res > Byte.MAX_VALUE) {\n-            return Byte.MAX_VALUE;\n-        } else if (res < Byte.MIN_VALUE) {\n-            return Byte.MIN_VALUE;\n-        } else {\n-            return (byte)res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned addition of two {@code byte} values,\n-     * which returns an maximum unsigned byte value (0xFF) in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned byte value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static byte addSaturatingUnsigned(byte a, byte b) {\n-        byte res = (byte)(a + b);\n-        boolean overflow = Byte.compareUnsigned(res, (byte)(a | b)) < 0;\n-        if (overflow) {\n-           return (byte)(-1);\n-        } else {\n-           return res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned subtraction of two {@code byte} values,\n-     * which returns a zero in underflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static byte subSaturatingUnsigned(byte a, byte b) {\n-        if (Byte.compareUnsigned(b, a) < 0) {\n-            return (byte)(a - b);\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":0,"deletions":109,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -1987,109 +1987,0 @@\n-    \/**\n-     * Based on the unsigned comparison returns the greater of two {@code int} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 1.8\n-     *\/\n-    public static int maxUnsigned(int a, int b) {\n-        return compareUnsigned(a, b) > 0 ? a : b;\n-    }\n-\n-    \/**\n-     * Based on the unsigned comparison returns the smaller of two {@code int} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 1.8\n-     *\/\n-    public static int minUnsigned(int a, int b) {\n-        return compareUnsigned(a, b) < 0 ? a : b;\n-    }\n-\n-\n-    \/**\n-     * Saturating addition of two {@code int} values,\n-     * which returns an {@code Integer.MIN_VALUE} in underflowing or\n-     * {@code Integer.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code int} value range else delimiting {@code Integer.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static int addSaturating(int a, int b) {\n-        long res = (long)a + (long)b;\n-        if (res > Integer.MAX_VALUE) {\n-            return Integer.MAX_VALUE;\n-        } else if (res < Integer.MIN_VALUE) {\n-            return Integer.MIN_VALUE;\n-        } else {\n-            return (int)res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating subtraction of two {@code int} values,\n-     * which returns an {@code Integer.MIN_VALUE} in underflowing or\n-     * {@code Integer.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code int} value range else delimiting {@code Integer.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static int subSaturating(int a, int b) {\n-        long res = (long)a - (long)b;\n-        if (res > Integer.MAX_VALUE) {\n-            return Integer.MAX_VALUE;\n-        } else if (res < Integer.MIN_VALUE) {\n-            return Integer.MIN_VALUE;\n-        } else {\n-            return (int)res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned addition of two {@code int} values,\n-     * which returns maximum unsigned int value in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned int value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static int addSaturatingUnsigned(int a, int b) {\n-        int res = a + b;\n-        boolean overflow = Integer.compareUnsigned(res, (a | b)) < 0;\n-        if (overflow)  {\n-           return -1;\n-        } else {\n-           return res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned subtraction of two {@code int} values,\n-     * which returns a zero in underflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static int subSaturatingUnsigned(int a, int b) {\n-        if (Integer.compareUnsigned(b, a) < 0) {\n-           return a - b;\n-        } else {\n-           return 0;\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":0,"deletions":109,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -1948,107 +1948,0 @@\n-    \/**\n-     * Based on the unsigned comparison returns the greater of two {@code long} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static long maxUnsigned(long a, long b) {\n-        return compareUnsigned(a, b) > 0 ? a : b;\n-    }\n-\n-    \/**\n-     * Based on the unsigned comparison returns the smaller of two {@code long} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static long minUnsigned(long a, long b) {\n-        return compareUnsigned(a, b) < 0 ? a : b;\n-    }\n-\n-    \/**\n-     * Saturating addition of two {@code long} values,\n-     * which returns a {@code Long.MIN_VALUE} in underflowing or\n-     * {@code Long.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code long} value range else delimiting {@code Long.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static long addSaturating(long a, long b) {\n-        long res = a + b;\n-        \/\/ HD 2-12 Overflow iff both arguments have the opposite sign of the result\n-        if (((a ^ res) & (b ^ res)) < 0) {\n-            return res < 0 ? Long.MAX_VALUE : Long.MIN_VALUE;\n-        } else {\n-            return res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating subtraction of two {@code long} values,\n-     * which returns a {@code Long.MIN_VALUE} in underflowing or\n-     * {@code Long.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code long} value range else delimiting {@code Long.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static long subSaturating(long a, long b) {\n-        long res = a - b;\n-        \/\/ HD 2-12 Overflow iff the arguments have different signs and\n-        \/\/ the sign of the result is different from the sign of x\n-        if (((a ^ res) & (b ^ res)) < 0) {\n-            return res < 0 ? Long.MAX_VALUE : Long.MIN_VALUE;\n-        } else {\n-            return res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned addition of two {@code long} values,\n-     * which returns maximum unsigned long value in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned long value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static long addSaturatingUnsigned(long a, long b) {\n-        long res = a + b;\n-        boolean overflow = Long.compareUnsigned(res, (a | b)) < 0;\n-        if (overflow) {\n-           return Long.UNSIGNED_MAX;\n-        } else {\n-           return res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned subtraction of two {@code long} values,\n-     * which returns a zero in underflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static long subSaturatingUnsigned(long a, long b) {\n-        if (Long.compareUnsigned(b, a) < 0) {\n-           return a - b;\n-        } else {\n-           return 0;\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -612,109 +612,0 @@\n-    \/**\n-     * Based on the unsigned comparison returns the greater of two {@code short} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static short maxUnsigned(short a, short b) {\n-        return compareUnsigned(a, b) > 0 ? a : b;\n-    }\n-\n-    \/**\n-     * Based on the unsigned comparison returns the smaller of two {@code short} values.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static short minUnsigned(short a, short b) {\n-        return compareUnsigned(a, b) < 0 ? a : b;\n-    }\n-\n-    \/**\n-     * Saturating addition of two {@code short} values,\n-     * which returns a {@code Short.MIN_VALUE} in underflowing or\n-     * {@code Short.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code short} value range else delimiting {@code Short.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static short addSaturating(short a, short b) {\n-        int res = a + b;\n-        if (res > Short.MAX_VALUE) {\n-            return Short.MAX_VALUE;\n-        } else if (res < Short.MIN_VALUE) {\n-            return Short.MIN_VALUE;\n-        } else {\n-            return (short)res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating subtraction of two {@code short} values,\n-     * which returns a {@code Short.MIN_VALUE} in underflowing or\n-     * {@code Short.MAX_VALUE} in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code short} value range else delimiting {@code Short.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static short subSaturating(short a, short b) {\n-        int res = a - b;\n-        if (res > Short.MAX_VALUE) {\n-            return Short.MAX_VALUE;\n-        } else if (res < Short.MIN_VALUE) {\n-            return Short.MIN_VALUE;\n-        } else {\n-            return (short)res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned addition of two {@code short} values,\n-     * which returns maximum unsigned short value in overflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned short value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static short addSaturatingUnsigned(short a, short b) {\n-        short res = (short)(a + b);\n-        boolean overflow = Short.compareUnsigned(res, (short)(a | b)) < 0;\n-        if (overflow) {\n-           return (short)(-1);\n-        } else {\n-           return res;\n-        }\n-    }\n-\n-    \/**\n-     * Saturating unsigned subtraction of two {@code short} values,\n-     * which returns a zero in underflowing scenario.\n-     *\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n-     * @see java.util.function.BinaryOperator\n-     * @since 24\n-     *\/\n-    public static short subSaturatingUnsigned(short a, short b) {\n-        if (Short.compareUnsigned(b, a) < 0) {\n-            return (short)(a - b);\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":0,"deletions":109,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -394,2 +394,0 @@\n-    \/* ============================================================================ *\/\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)Byte.maxUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)VectorMathUtils.maxUnsigned(a, b));\n@@ -877,1 +877,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)Byte.minUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)VectorMathUtils.minUnsigned(a, b));\n@@ -879,1 +879,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.addSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(VectorMathUtils.addSaturating(a, b)));\n@@ -881,1 +881,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.subSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(VectorMathUtils.subSaturating(a, b)));\n@@ -883,1 +883,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.addSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(VectorMathUtils.addSaturatingUnsigned(a, b)));\n@@ -885,1 +885,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(Byte.subSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (byte)(VectorMathUtils.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)Integer.maxUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)VectorMathUtils.maxUnsigned(a, b));\n@@ -877,1 +877,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)Integer.minUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)VectorMathUtils.minUnsigned(a, b));\n@@ -879,1 +879,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.addSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(VectorMathUtils.addSaturating(a, b)));\n@@ -881,1 +881,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.subSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(VectorMathUtils.subSaturating(a, b)));\n@@ -883,1 +883,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.addSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(VectorMathUtils.addSaturatingUnsigned(a, b)));\n@@ -885,1 +885,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(Integer.subSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (int)(VectorMathUtils.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -833,1 +833,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)Long.maxUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)VectorMathUtils.maxUnsigned(a, b));\n@@ -835,1 +835,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)Long.minUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)VectorMathUtils.minUnsigned(a, b));\n@@ -837,1 +837,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.addSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(VectorMathUtils.addSaturating(a, b)));\n@@ -839,1 +839,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.subSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(VectorMathUtils.subSaturating(a, b)));\n@@ -841,1 +841,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.addSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(VectorMathUtils.addSaturatingUnsigned(a, b)));\n@@ -843,1 +843,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(Long.subSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (long)(VectorMathUtils.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)Short.maxUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)VectorMathUtils.maxUnsigned(a, b));\n@@ -877,1 +877,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)Short.minUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)VectorMathUtils.minUnsigned(a, b));\n@@ -879,1 +879,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.addSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(VectorMathUtils.addSaturating(a, b)));\n@@ -881,1 +881,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.subSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(VectorMathUtils.subSaturating(a, b)));\n@@ -883,1 +883,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.addSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(VectorMathUtils.addSaturatingUnsigned(a, b)));\n@@ -885,1 +885,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(Short.subSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> (short)(VectorMathUtils.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,456 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.incubator.vector;\n+\n+\n+\/**\n+ * Following class declares utility routines used in the fallback implementation\n+ * various vector APIs.\n+ *\n+ *\/\n+public class VectorMathUtils {\n+\n+   \/**\n+    * Default Constructor definition.\n+    *\/\n+    private VectorMathUtils() {\n+    }\n+\n+    \/**\n+     * Based on the unsigned comparison returns the greater of two {@code long} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the greater of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static long maxUnsigned(long a, long b) {\n+        return Long.compareUnsigned(a, b) > 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Based on the unsigned comparison returns the smaller of two {@code long} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the smaller of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static long minUnsigned(long a, long b) {\n+        return Long.compareUnsigned(a, b) < 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Saturating addition of two {@code long} values,\n+     * which returns a {@code Long.MIN_VALUE} in underflowing or\n+     * {@code Long.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the sum of {@code a} and {@code b} iff within {@code long} value range else delimiting {@code Long.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static long addSaturating(long a, long b) {\n+        long res = a + b;\n+        \/\/ HD 2-12 Overflow iff both arguments have the opposite sign of the result\n+        if (((a ^ res) & (b ^ res)) < 0) {\n+            return res < 0 ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        } else {\n+            return res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating subtraction of two {@code long} values,\n+     * which returns a {@code Long.MIN_VALUE} in underflowing or\n+     * {@code Long.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the difference between {@code a} and {@code b} iff within {@code long} value range else delimiting {@code Long.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static long subSaturating(long a, long b) {\n+        long res = a - b;\n+        \/\/ HD 2-12 Overflow iff the arguments have different signs and\n+        \/\/ the sign of the result is different from the sign of a\n+        if (((a ^ b) & (a ^ res)) < 0) {\n+            return a < 0 ? Long.MIN_VALUE : Long.MAX_VALUE;\n+        } else {\n+            return res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating unsigned addition of two {@code long} values,\n+     * which returns maximum unsigned long value in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned long value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static long addSaturatingUnsigned(long a, long b) {\n+        long res = a + b;\n+        boolean overflow = Long.compareUnsigned(res, (a | b)) < 0;\n+        if (overflow) {\n+           return Long.UNSIGNED_MAX;\n+        } else {\n+           return res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating unsigned subtraction of two {@code long} values,\n+     * which returns a zero in underflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static long subSaturatingUnsigned(long a, long b) {\n+        if (Long.compareUnsigned(b, a) < 0) {\n+           return a - b;\n+        } else {\n+           return 0;\n+        }\n+    }\n+\n+    \/**\n+     * Based on the unsigned comparison returns the greater of two {@code int} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the greater of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static int maxUnsigned(int a, int b) {\n+        return Integer.compareUnsigned(a, b) > 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Based on the unsigned comparison returns the smaller of two {@code int} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the smaller of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static int minUnsigned(int a, int b) {\n+        return Integer.compareUnsigned(a, b) < 0 ? a : b;\n+    }\n+\n+\n+    \/**\n+     * Saturating addition of two {@code int} values,\n+     * which returns an {@code Integer.MIN_VALUE} in underflowing or\n+     * {@code Integer.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the sum of {@code a} and {@code b} iff within {@code int} value range else delimiting {@code Integer.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static int addSaturating(int a, int b) {\n+        long res = (long)a + (long)b;\n+        if (res > Integer.MAX_VALUE) {\n+            return Integer.MAX_VALUE;\n+        } else if (res < Integer.MIN_VALUE) {\n+            return Integer.MIN_VALUE;\n+        } else {\n+            return (int)res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating subtraction of two {@code int} values,\n+     * which returns an {@code Integer.MIN_VALUE} in underflowing or\n+     * {@code Integer.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the difference between {@code a} and {@code b} iff within {@code int} value range else delimiting {@code Integer.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static int subSaturating(int a, int b) {\n+        long res = (long)a - (long)b;\n+        if (res > Integer.MAX_VALUE) {\n+            return Integer.MAX_VALUE;\n+        } else if (res < Integer.MIN_VALUE) {\n+            return Integer.MIN_VALUE;\n+        } else {\n+            return (int)res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating unsigned addition of two {@code int} values,\n+     * which returns maximum unsigned int value in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned int value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static int addSaturatingUnsigned(int a, int b) {\n+        int res = a + b;\n+        boolean overflow = Integer.compareUnsigned(res, (a | b)) < 0;\n+        if (overflow)  {\n+           return -1;\n+        } else {\n+           return res;\n+        }\n+    }\n+\n+\n+    \/**\n+     * Based on the unsigned comparison returns the greater of two {@code short} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the greater of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static short maxUnsigned(short a, short b) {\n+        return Short.compareUnsigned(a, b) > 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Based on the unsigned comparison returns the smaller of two {@code short} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the smaller of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static short minUnsigned(short a, short b) {\n+        return Short.compareUnsigned(a, b) < 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Saturating addition of two {@code short} values,\n+     * which returns a {@code Short.MIN_VALUE} in underflowing or\n+     * {@code Short.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the sum of {@code a} and {@code b} iff within {@code short} value range else delimiting {@code Short.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static short addSaturating(short a, short b) {\n+        int res = a + b;\n+        if (res > Short.MAX_VALUE) {\n+            return Short.MAX_VALUE;\n+        } else if (res < Short.MIN_VALUE) {\n+            return Short.MIN_VALUE;\n+        } else {\n+            return (short)res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating subtraction of two {@code short} values,\n+     * which returns a {@code Short.MIN_VALUE} in underflowing or\n+     * {@code Short.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the difference between {@code a} and {@code b} iff within {@code short} value range else delimiting {@code Short.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static short subSaturating(short a, short b) {\n+        int res = a - b;\n+        if (res > Short.MAX_VALUE) {\n+            return Short.MAX_VALUE;\n+        } else if (res < Short.MIN_VALUE) {\n+            return Short.MIN_VALUE;\n+        } else {\n+            return (short)res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating unsigned addition of two {@code short} values,\n+     * which returns maximum unsigned short value in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned short value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static short addSaturatingUnsigned(short a, short b) {\n+        short res = (short)(a + b);\n+        boolean overflow = Short.compareUnsigned(res, (short)(a | b)) < 0;\n+        if (overflow) {\n+           return (short)(-1);\n+        } else {\n+           return res;\n+        }\n+    }\n+\n+\n+    \/**\n+     * Saturating unsigned subtraction of two {@code short} values,\n+     * which returns a zero in underflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static short subSaturatingUnsigned(short a, short b) {\n+        if (Short.compareUnsigned(b, a) < 0) {\n+            return (short)(a - b);\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    \/**\n+     * Based on the unsigned comparison returns the greater of two {@code byte} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the greater of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static byte maxUnsigned(byte a, byte b) {\n+        return Byte.compareUnsigned(a, b) > 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Based on the unsigned comparison returns the smaller of two {@code byte} values.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the smaller of {@code a} and {@code b}\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static byte minUnsigned(byte a, byte b) {\n+        return Byte.compareUnsigned(a, b) < 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Saturating addition of two {@code byte} values,\n+     * which returns a {@code Byte.MIN_VALUE} in underflowing or\n+     * {@code Byte.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the sum of {@code a} and {@code b} iff within {@code byte} value range else delimiting {@code Byte.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static byte addSaturating(byte a, byte b) {\n+        int res = a + b;\n+        if (res > Byte.MAX_VALUE) {\n+            return Byte.MAX_VALUE;\n+        } else if (res < Byte.MIN_VALUE) {\n+            return Byte.MIN_VALUE;\n+        } else {\n+           return (byte)res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating subtraction of two {@code byte} values,\n+     * which returns a {@code Byte.MIN_VALUE} in underflowing or\n+     * {@code Byte.MAX_VALUE} in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the difference between {@code a} and {@code b} iff within {@code byte} value range else delimiting {@code Byte.MIN_VALUE\/MAX_VALUE} value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static byte subSaturating(byte a, byte b) {\n+        int res = a - b;\n+        if (res > Byte.MAX_VALUE) {\n+            return Byte.MAX_VALUE;\n+        } else if (res < Byte.MIN_VALUE) {\n+            return Byte.MIN_VALUE;\n+        } else {\n+            return (byte)res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating unsigned addition of two {@code byte} values,\n+     * which returns an maximum unsigned byte value (0xFF) in overflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned byte value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static byte addSaturatingUnsigned(byte a, byte b) {\n+        byte res = (byte)(a + b);\n+        boolean overflow = Byte.compareUnsigned(res, (byte)(a | b)) < 0;\n+        if (overflow) {\n+           return (byte)(-1);\n+        } else {\n+           return res;\n+        }\n+    }\n+\n+    \/**\n+     * Saturating unsigned subtraction of two {@code byte} values,\n+     * which returns a zero in underflowing scenario.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n+     * @see java.util.function.BinaryOperator\n+     * @since 24\n+     *\/\n+    public static byte subSaturatingUnsigned(byte a, byte b) {\n+        if (Byte.compareUnsigned(b, a) < 0) {\n+            return (byte)(a - b);\n+        } else {\n+            return 0;\n+        }\n+    }\n+}\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMathUtils.java","additions":456,"deletions":0,"binary":false,"changes":456,"status":"added"},{"patch":"@@ -971,1 +971,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)$Boxtype$.maxUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)VectorMathUtils.maxUnsigned(a, b));\n@@ -973,1 +973,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)$Boxtype$.minUnsigned(a, b));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)VectorMathUtils.minUnsigned(a, b));\n@@ -975,1 +975,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.addSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(VectorMathUtils.addSaturating(a, b)));\n@@ -977,1 +977,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.subSaturating(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(VectorMathUtils.subSaturating(a, b)));\n@@ -979,1 +979,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.addSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(VectorMathUtils.addSaturatingUnsigned(a, b)));\n@@ -981,1 +981,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)($Boxtype$.subSaturatingUnsigned(a, b)));\n+                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(VectorMathUtils.subSaturatingUnsigned(a, b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2975,1 +2976,1 @@\n-        return (byte)(Byte.minUnsigned(a, b));\n+        return (byte)(VectorMathUtils.minUnsigned(a, b));\n@@ -3016,1 +3017,1 @@\n-        return (byte)(Byte.maxUnsigned(a, b));\n+        return (byte)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3057,1 +3058,1 @@\n-        return (byte)(Byte.addSaturating(a, b));\n+        return (byte)(VectorMathUtils.addSaturating(a, b));\n@@ -3098,1 +3099,1 @@\n-        return (byte)(Byte.subSaturating(a, b));\n+        return (byte)(VectorMathUtils.subSaturating(a, b));\n@@ -3139,1 +3140,1 @@\n-        return (byte)(Byte.addSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3180,1 +3181,1 @@\n-        return (byte)(Byte.subSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2975,1 +2976,1 @@\n-        return (byte)(Byte.minUnsigned(a, b));\n+        return (byte)(VectorMathUtils.minUnsigned(a, b));\n@@ -3016,1 +3017,1 @@\n-        return (byte)(Byte.maxUnsigned(a, b));\n+        return (byte)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3057,1 +3058,1 @@\n-        return (byte)(Byte.addSaturating(a, b));\n+        return (byte)(VectorMathUtils.addSaturating(a, b));\n@@ -3098,1 +3099,1 @@\n-        return (byte)(Byte.subSaturating(a, b));\n+        return (byte)(VectorMathUtils.subSaturating(a, b));\n@@ -3139,1 +3140,1 @@\n-        return (byte)(Byte.addSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3180,1 +3181,1 @@\n-        return (byte)(Byte.subSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2975,1 +2976,1 @@\n-        return (byte)(Byte.minUnsigned(a, b));\n+        return (byte)(VectorMathUtils.minUnsigned(a, b));\n@@ -3016,1 +3017,1 @@\n-        return (byte)(Byte.maxUnsigned(a, b));\n+        return (byte)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3057,1 +3058,1 @@\n-        return (byte)(Byte.addSaturating(a, b));\n+        return (byte)(VectorMathUtils.addSaturating(a, b));\n@@ -3098,1 +3099,1 @@\n-        return (byte)(Byte.subSaturating(a, b));\n+        return (byte)(VectorMathUtils.subSaturating(a, b));\n@@ -3139,1 +3140,1 @@\n-        return (byte)(Byte.addSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3180,1 +3181,1 @@\n-        return (byte)(Byte.subSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2975,1 +2976,1 @@\n-        return (byte)(Byte.minUnsigned(a, b));\n+        return (byte)(VectorMathUtils.minUnsigned(a, b));\n@@ -3016,1 +3017,1 @@\n-        return (byte)(Byte.maxUnsigned(a, b));\n+        return (byte)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3057,1 +3058,1 @@\n-        return (byte)(Byte.addSaturating(a, b));\n+        return (byte)(VectorMathUtils.addSaturating(a, b));\n@@ -3098,1 +3099,1 @@\n-        return (byte)(Byte.subSaturating(a, b));\n+        return (byte)(VectorMathUtils.subSaturating(a, b));\n@@ -3139,1 +3140,1 @@\n-        return (byte)(Byte.addSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3180,1 +3181,1 @@\n-        return (byte)(Byte.subSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2980,1 +2981,1 @@\n-        return (byte)(Byte.minUnsigned(a, b));\n+        return (byte)(VectorMathUtils.minUnsigned(a, b));\n@@ -3021,1 +3022,1 @@\n-        return (byte)(Byte.maxUnsigned(a, b));\n+        return (byte)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3062,1 +3063,1 @@\n-        return (byte)(Byte.addSaturating(a, b));\n+        return (byte)(VectorMathUtils.addSaturating(a, b));\n@@ -3103,1 +3104,1 @@\n-        return (byte)(Byte.subSaturating(a, b));\n+        return (byte)(VectorMathUtils.subSaturating(a, b));\n@@ -3144,1 +3145,1 @@\n-        return (byte)(Byte.addSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3185,1 +3186,1 @@\n-        return (byte)(Byte.subSaturatingUnsigned(a, b));\n+        return (byte)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3019,1 +3020,1 @@\n-        return (int)(Integer.minUnsigned(a, b));\n+        return (int)(VectorMathUtils.minUnsigned(a, b));\n@@ -3060,1 +3061,1 @@\n-        return (int)(Integer.maxUnsigned(a, b));\n+        return (int)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3101,1 +3102,1 @@\n-        return (int)(Integer.addSaturating(a, b));\n+        return (int)(VectorMathUtils.addSaturating(a, b));\n@@ -3142,1 +3143,1 @@\n-        return (int)(Integer.subSaturating(a, b));\n+        return (int)(VectorMathUtils.subSaturating(a, b));\n@@ -3183,1 +3184,1 @@\n-        return (int)(Integer.addSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3224,1 +3225,1 @@\n-        return (int)(Integer.subSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3019,1 +3020,1 @@\n-        return (int)(Integer.minUnsigned(a, b));\n+        return (int)(VectorMathUtils.minUnsigned(a, b));\n@@ -3060,1 +3061,1 @@\n-        return (int)(Integer.maxUnsigned(a, b));\n+        return (int)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3101,1 +3102,1 @@\n-        return (int)(Integer.addSaturating(a, b));\n+        return (int)(VectorMathUtils.addSaturating(a, b));\n@@ -3142,1 +3143,1 @@\n-        return (int)(Integer.subSaturating(a, b));\n+        return (int)(VectorMathUtils.subSaturating(a, b));\n@@ -3183,1 +3184,1 @@\n-        return (int)(Integer.addSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3224,1 +3225,1 @@\n-        return (int)(Integer.subSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3019,1 +3020,1 @@\n-        return (int)(Integer.minUnsigned(a, b));\n+        return (int)(VectorMathUtils.minUnsigned(a, b));\n@@ -3060,1 +3061,1 @@\n-        return (int)(Integer.maxUnsigned(a, b));\n+        return (int)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3101,1 +3102,1 @@\n-        return (int)(Integer.addSaturating(a, b));\n+        return (int)(VectorMathUtils.addSaturating(a, b));\n@@ -3142,1 +3143,1 @@\n-        return (int)(Integer.subSaturating(a, b));\n+        return (int)(VectorMathUtils.subSaturating(a, b));\n@@ -3183,1 +3184,1 @@\n-        return (int)(Integer.addSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3224,1 +3225,1 @@\n-        return (int)(Integer.subSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3019,1 +3020,1 @@\n-        return (int)(Integer.minUnsigned(a, b));\n+        return (int)(VectorMathUtils.minUnsigned(a, b));\n@@ -3060,1 +3061,1 @@\n-        return (int)(Integer.maxUnsigned(a, b));\n+        return (int)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3101,1 +3102,1 @@\n-        return (int)(Integer.addSaturating(a, b));\n+        return (int)(VectorMathUtils.addSaturating(a, b));\n@@ -3142,1 +3143,1 @@\n-        return (int)(Integer.subSaturating(a, b));\n+        return (int)(VectorMathUtils.subSaturating(a, b));\n@@ -3183,1 +3184,1 @@\n-        return (int)(Integer.addSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3224,1 +3225,1 @@\n-        return (int)(Integer.subSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3024,1 +3025,1 @@\n-        return (int)(Integer.minUnsigned(a, b));\n+        return (int)(VectorMathUtils.minUnsigned(a, b));\n@@ -3065,1 +3066,1 @@\n-        return (int)(Integer.maxUnsigned(a, b));\n+        return (int)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3106,1 +3107,1 @@\n-        return (int)(Integer.addSaturating(a, b));\n+        return (int)(VectorMathUtils.addSaturating(a, b));\n@@ -3147,1 +3148,1 @@\n-        return (int)(Integer.subSaturating(a, b));\n+        return (int)(VectorMathUtils.subSaturating(a, b));\n@@ -3188,1 +3189,1 @@\n-        return (int)(Integer.addSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3229,1 +3230,1 @@\n-        return (int)(Integer.subSaturatingUnsigned(a, b));\n+        return (int)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3041,1 +3042,1 @@\n-        return (long)(Long.minUnsigned(a, b));\n+        return (long)(VectorMathUtils.minUnsigned(a, b));\n@@ -3082,1 +3083,1 @@\n-        return (long)(Long.maxUnsigned(a, b));\n+        return (long)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3123,1 +3124,1 @@\n-        return (long)(Long.addSaturating(a, b));\n+        return (long)(VectorMathUtils.addSaturating(a, b));\n@@ -3164,1 +3165,1 @@\n-        return (long)(Long.subSaturating(a, b));\n+        return (long)(VectorMathUtils.subSaturating(a, b));\n@@ -3205,1 +3206,1 @@\n-        return (long)(Long.addSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3246,1 +3247,1 @@\n-        return (long)(Long.subSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3041,1 +3042,1 @@\n-        return (long)(Long.minUnsigned(a, b));\n+        return (long)(VectorMathUtils.minUnsigned(a, b));\n@@ -3082,1 +3083,1 @@\n-        return (long)(Long.maxUnsigned(a, b));\n+        return (long)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3123,1 +3124,1 @@\n-        return (long)(Long.addSaturating(a, b));\n+        return (long)(VectorMathUtils.addSaturating(a, b));\n@@ -3164,1 +3165,1 @@\n-        return (long)(Long.subSaturating(a, b));\n+        return (long)(VectorMathUtils.subSaturating(a, b));\n@@ -3205,1 +3206,1 @@\n-        return (long)(Long.addSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3246,1 +3247,1 @@\n-        return (long)(Long.subSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3041,1 +3042,1 @@\n-        return (long)(Long.minUnsigned(a, b));\n+        return (long)(VectorMathUtils.minUnsigned(a, b));\n@@ -3082,1 +3083,1 @@\n-        return (long)(Long.maxUnsigned(a, b));\n+        return (long)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3123,1 +3124,1 @@\n-        return (long)(Long.addSaturating(a, b));\n+        return (long)(VectorMathUtils.addSaturating(a, b));\n@@ -3164,1 +3165,1 @@\n-        return (long)(Long.subSaturating(a, b));\n+        return (long)(VectorMathUtils.subSaturating(a, b));\n@@ -3205,1 +3206,1 @@\n-        return (long)(Long.addSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3246,1 +3247,1 @@\n-        return (long)(Long.subSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3041,1 +3042,1 @@\n-        return (long)(Long.minUnsigned(a, b));\n+        return (long)(VectorMathUtils.minUnsigned(a, b));\n@@ -3082,1 +3083,1 @@\n-        return (long)(Long.maxUnsigned(a, b));\n+        return (long)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3123,1 +3124,1 @@\n-        return (long)(Long.addSaturating(a, b));\n+        return (long)(VectorMathUtils.addSaturating(a, b));\n@@ -3164,1 +3165,1 @@\n-        return (long)(Long.subSaturating(a, b));\n+        return (long)(VectorMathUtils.subSaturating(a, b));\n@@ -3205,1 +3206,1 @@\n-        return (long)(Long.addSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3246,1 +3247,1 @@\n-        return (long)(Long.subSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -3046,1 +3047,1 @@\n-        return (long)(Long.minUnsigned(a, b));\n+        return (long)(VectorMathUtils.minUnsigned(a, b));\n@@ -3087,1 +3088,1 @@\n-        return (long)(Long.maxUnsigned(a, b));\n+        return (long)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3128,1 +3129,1 @@\n-        return (long)(Long.addSaturating(a, b));\n+        return (long)(VectorMathUtils.addSaturating(a, b));\n@@ -3169,1 +3170,1 @@\n-        return (long)(Long.subSaturating(a, b));\n+        return (long)(VectorMathUtils.subSaturating(a, b));\n@@ -3210,1 +3211,1 @@\n-        return (long)(Long.addSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3251,1 +3252,1 @@\n-        return (long)(Long.subSaturatingUnsigned(a, b));\n+        return (long)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2966,1 +2967,1 @@\n-        return (short)(Short.minUnsigned(a, b));\n+        return (short)(VectorMathUtils.minUnsigned(a, b));\n@@ -3007,1 +3008,1 @@\n-        return (short)(Short.maxUnsigned(a, b));\n+        return (short)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3048,1 +3049,1 @@\n-        return (short)(Short.addSaturating(a, b));\n+        return (short)(VectorMathUtils.addSaturating(a, b));\n@@ -3089,1 +3090,1 @@\n-        return (short)(Short.subSaturating(a, b));\n+        return (short)(VectorMathUtils.subSaturating(a, b));\n@@ -3130,1 +3131,1 @@\n-        return (short)(Short.addSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3171,1 +3172,1 @@\n-        return (short)(Short.subSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2966,1 +2967,1 @@\n-        return (short)(Short.minUnsigned(a, b));\n+        return (short)(VectorMathUtils.minUnsigned(a, b));\n@@ -3007,1 +3008,1 @@\n-        return (short)(Short.maxUnsigned(a, b));\n+        return (short)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3048,1 +3049,1 @@\n-        return (short)(Short.addSaturating(a, b));\n+        return (short)(VectorMathUtils.addSaturating(a, b));\n@@ -3089,1 +3090,1 @@\n-        return (short)(Short.subSaturating(a, b));\n+        return (short)(VectorMathUtils.subSaturating(a, b));\n@@ -3130,1 +3131,1 @@\n-        return (short)(Short.addSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3171,1 +3172,1 @@\n-        return (short)(Short.subSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2966,1 +2967,1 @@\n-        return (short)(Short.minUnsigned(a, b));\n+        return (short)(VectorMathUtils.minUnsigned(a, b));\n@@ -3007,1 +3008,1 @@\n-        return (short)(Short.maxUnsigned(a, b));\n+        return (short)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3048,1 +3049,1 @@\n-        return (short)(Short.addSaturating(a, b));\n+        return (short)(VectorMathUtils.addSaturating(a, b));\n@@ -3089,1 +3090,1 @@\n-        return (short)(Short.subSaturating(a, b));\n+        return (short)(VectorMathUtils.subSaturating(a, b));\n@@ -3130,1 +3131,1 @@\n-        return (short)(Short.addSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3171,1 +3172,1 @@\n-        return (short)(Short.subSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2966,1 +2967,1 @@\n-        return (short)(Short.minUnsigned(a, b));\n+        return (short)(VectorMathUtils.minUnsigned(a, b));\n@@ -3007,1 +3008,1 @@\n-        return (short)(Short.maxUnsigned(a, b));\n+        return (short)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3048,1 +3049,1 @@\n-        return (short)(Short.addSaturating(a, b));\n+        return (short)(VectorMathUtils.addSaturating(a, b));\n@@ -3089,1 +3090,1 @@\n-        return (short)(Short.subSaturating(a, b));\n+        return (short)(VectorMathUtils.subSaturating(a, b));\n@@ -3130,1 +3131,1 @@\n-        return (short)(Short.addSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3171,1 +3172,1 @@\n-        return (short)(Short.subSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n@@ -2971,1 +2972,1 @@\n-        return (short)(Short.minUnsigned(a, b));\n+        return (short)(VectorMathUtils.minUnsigned(a, b));\n@@ -3012,1 +3013,1 @@\n-        return (short)(Short.maxUnsigned(a, b));\n+        return (short)(VectorMathUtils.maxUnsigned(a, b));\n@@ -3053,1 +3054,1 @@\n-        return (short)(Short.addSaturating(a, b));\n+        return (short)(VectorMathUtils.addSaturating(a, b));\n@@ -3094,1 +3095,1 @@\n-        return (short)(Short.subSaturating(a, b));\n+        return (short)(VectorMathUtils.subSaturating(a, b));\n@@ -3135,1 +3136,1 @@\n-        return (short)(Short.addSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.addSaturatingUnsigned(a, b));\n@@ -3176,1 +3177,1 @@\n-        return (short)(Short.subSaturatingUnsigned(a, b));\n+        return (short)(VectorMathUtils.subSaturatingUnsigned(a, b));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -317,1 +317,0 @@\n-#  gen_op_tmpl $binary_scalar \"$@\"\n@@ -471,6 +470,6 @@\n-gen_binary_op \"UMIN\" \"\\$Wideboxtype\\$.minUnsigned(a, b)\" \"BITWISE\"\n-gen_binary_op \"UMAX\" \"\\$Wideboxtype\\$.maxUnsigned(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SADD\" \"\\$Wideboxtype\\$.addSaturating(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SSUB\" \"\\$Wideboxtype\\$.subSaturating(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SUADD\" \"\\$Wideboxtype\\$.addSaturatingUnsigned(a, b)\" \"BITWISE\"\n-gen_saturating_binary_op \"SUSUB\" \"\\$Wideboxtype\\$.subSaturatingUnsigned(a, b)\" \"BITWISE\"\n+gen_binary_op \"UMIN\" \"VectorMathUtils.minUnsigned(a, b)\" \"BITWISE\"\n+gen_binary_op \"UMAX\" \"VectorMathUtils.maxUnsigned(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SADD\" \"VectorMathUtils.addSaturating(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SSUB\" \"VectorMathUtils.subSaturating(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SUADD\" \"VectorMathUtils.addSaturatingUnsigned(a, b)\" \"BITWISE\"\n+gen_saturating_binary_op \"SUSUB\" \"VectorMathUtils.subSaturatingUnsigned(a, b)\" \"BITWISE\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.vector.VectorMathUtils;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}