{"files":[{"patch":"@@ -27,1 +27,0 @@\n-\n@@ -31,1 +30,0 @@\n- *\n@@ -33,1 +31,1 @@\n-public class VectorMath {\n+public final class VectorMath {\n@@ -35,3 +33,0 @@\n-   \/**\n-    * Default Constructor definition.\n-    *\/\n@@ -42,1 +37,4 @@\n-     * Based on the unsigned comparison returns the greater of two {@code long} values.\n+     * Returns the smaller of two {@code long} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0L}. If the operands have the\n+     * same value, the result is that same value.\n@@ -44,4 +42,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the smaller of {@code a} and {@code b}.\n+     * @see VectorOperators#UMIN\n@@ -50,2 +48,2 @@\n-    public static long maxUnsigned(long a, long b) {\n-        return Long.compareUnsigned(a, b) > 0 ? a : b;\n+    public static long minUnsigned(long a, long b) {\n+        return Long.compareUnsigned(a, b) < 0 ? a : b;\n@@ -55,1 +53,5 @@\n-     * Based on the unsigned comparison returns the smaller of two {@code long} values.\n+     * Returns the greater of two {@code long} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0xFFFFFFFF_FFFFFFFFL} numerically\n+     * treating it as unsigned. If the operands have the same value,\n+     * the result is that same value.\n@@ -57,4 +59,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the larger of {@code a} and {@code b}.\n+     * @see VectorOperators#UMAX\n@@ -63,2 +65,2 @@\n-    public static long minUnsigned(long a, long b) {\n-        return Long.compareUnsigned(a, b) < 0 ? a : b;\n+    public static long maxUnsigned(long a, long b) {\n+        return Long.compareUnsigned(a, b) > 0 ? a : b;\n@@ -68,3 +70,10 @@\n-     * Saturating addition of two {@code long} values,\n-     * which returns a {@code Long.MIN_VALUE} in underflowing or\n-     * {@code Long.MAX_VALUE} in overflowing scenario.\n+     * Adds two {@code long} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Long.MIN_VALUE} and {@code Long.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the addition would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Long.MAX_VALUE}.\n+     * If the result of the addition would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Long.MIN_VALUE}.\n@@ -72,4 +81,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code long} value range else delimiting {@code Long.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -89,3 +98,10 @@\n-     * Saturating subtraction of two {@code long} values,\n-     * which returns a {@code Long.MIN_VALUE} in underflowing or\n-     * {@code Long.MAX_VALUE} in overflowing scenario.\n+     * Subtracts two {@code long} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Long.MIN_VALUE} and {@code Long.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the subtraction would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Long.MAX_VALUE}.\n+     * If the result of the subtraction would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Long.MIN_VALUE}.\n@@ -93,4 +109,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code long} value range else delimiting {@code Long.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n@@ -111,2 +127,9 @@\n-     * Saturating unsigned addition of two {@code long} values,\n-     * which returns maximum unsigned long value in overflowing scenario.\n+     * Adds two {@code long} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0L} and {@code 0xFFFFFFFF_FFFFFFFFL}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned addition would otherwise overflow\n+     * from the greater of the two operands to a lesser value then the\n+     * result is clamped to the upper bound {@code 0xFFFFFFFF_FFFFFFFFL}.\n@@ -114,4 +137,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned long value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -131,2 +154,9 @@\n-     * Saturating unsigned subtraction of two {@code long} values,\n-     * which returns a zero in underflowing scenario.\n+     * Subtracts two {@code long} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0L} and {@code 0xFFFFFFFF_FFFFFFFFL}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned subtraction would otherwise underflow\n+     * from the lesser of the two operands to a greater value then the\n+     * result is clamped to the lower bound {@code 0L}.\n@@ -134,4 +164,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n@@ -148,0 +178,1 @@\n+\n@@ -149,1 +180,4 @@\n-     * Based on the unsigned comparison returns the greater of two {@code int} values.\n+     * Returns the smaller of two {@code int} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0}. If the operands have the\n+     * same value, the result is that same value.\n@@ -151,4 +185,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the smaller of {@code a} and {@code b}.\n+     * @see VectorOperators#UMIN\n@@ -157,2 +191,2 @@\n-    public static int maxUnsigned(int a, int b) {\n-        return Integer.compareUnsigned(a, b) > 0 ? a : b;\n+    public static int minUnsigned(int a, int b) {\n+        return Integer.compareUnsigned(a, b) < 0 ? a : b;\n@@ -162,1 +196,5 @@\n-     * Based on the unsigned comparison returns the smaller of two {@code int} values.\n+     * Returns the greater of two {@code int} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0xFFFFFFFF} numerically\n+     * treating it as unsigned. If the operands have the same value,\n+     * the result is that same value.\n@@ -164,4 +202,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the larger of {@code a} and {@code b}.\n+     * @see VectorOperators#UMAX\n@@ -170,2 +208,2 @@\n-    public static int minUnsigned(int a, int b) {\n-        return Integer.compareUnsigned(a, b) < 0 ? a : b;\n+    public static int maxUnsigned(int a, int b) {\n+        return Integer.compareUnsigned(a, b) > 0 ? a : b;\n@@ -174,1 +212,0 @@\n-\n@@ -176,3 +213,10 @@\n-     * Saturating addition of two {@code int} values,\n-     * which returns an {@code Integer.MIN_VALUE} in underflowing or\n-     * {@code Integer.MAX_VALUE} in overflowing scenario.\n+     * Adds two {@code int} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Integer.MIN_VALUE} and {@code Integer.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the addition would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Integer.MAX_VALUE}.\n+     * If the result of the addition would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Integer.MIN_VALUE}.\n@@ -180,4 +224,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code int} value range else delimiting {@code Integer.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -198,3 +242,10 @@\n-     * Saturating subtraction of two {@code int} values,\n-     * which returns an {@code Integer.MIN_VALUE} in underflowing or\n-     * {@code Integer.MAX_VALUE} in overflowing scenario.\n+     * Subtracts two {@code int} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Integer.MIN_VALUE} and {@code Integer.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the subtraction would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Integer.MAX_VALUE}.\n+     * If the result of the subtraction would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Integer.MIN_VALUE}.\n@@ -202,4 +253,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code int} value range else delimiting {@code Integer.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n@@ -220,2 +271,9 @@\n-     * Saturating unsigned addition of two {@code int} values,\n-     * which returns maximum unsigned int value in overflowing scenario.\n+     * Adds two {@code int} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0} and {@code 0xFFFFFFFF}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned addition would otherwise overflow\n+     * from the greater of the two operands to a lesser value then the\n+     * result is clamped to the upper bound {@code 0xFFFFFFFF}.\n@@ -223,4 +281,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned int value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -233,1 +291,1 @@\n-           return -1;\n+            return -1;\n@@ -235,1 +293,1 @@\n-           return res;\n+            return res;\n@@ -239,1 +297,0 @@\n-\n@@ -241,1 +298,9 @@\n-     * Based on the unsigned comparison returns the greater of two {@code short} values.\n+     * Subtracts two {@code int} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0} and {@code -0xFFFFFFFF}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned subtraction would otherwise underflow\n+     * from the lesser of the two operands to a greater value then the\n+     * result is clamped to the lower bound {@code 0}.\n@@ -243,4 +308,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n@@ -249,2 +314,6 @@\n-    public static short maxUnsigned(short a, short b) {\n-        return Short.compareUnsigned(a, b) > 0 ? a : b;\n+    public static int subSaturatingUnsigned(int a, int b) {\n+        if (Integer.compareUnsigned(b, a) < 0) {\n+            return a - b;\n+        } else {\n+            return 0;\n+        }\n@@ -253,0 +322,1 @@\n+\n@@ -254,1 +324,4 @@\n-     * Based on the unsigned comparison returns the smaller of two {@code short} values.\n+     * Returns the smaller of two {@code short} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0}. If the operands have the\n+     * same value, the result is that same value.\n@@ -256,4 +329,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the smaller of {@code a} and {@code b}.\n+     * @see VectorOperators#UMIN\n@@ -267,3 +340,5 @@\n-     * Saturating addition of two {@code short} values,\n-     * which returns a {@code Short.MIN_VALUE} in underflowing or\n-     * {@code Short.MAX_VALUE} in overflowing scenario.\n+     * Returns the greater of two {@code short} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0xFFFF} numerically\n+     * treating it as unsigned. If the operands have the same value,\n+     * the result is that same value.\n@@ -271,4 +346,26 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code short} value range else delimiting {@code Short.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the larger of {@code a} and {@code b}.\n+     * @see VectorOperators#UMAX\n+     * @since 24\n+     *\/\n+    public static short maxUnsigned(short a, short b) {\n+        return Short.compareUnsigned(a, b) > 0 ? a : b;\n+    }\n+\n+    \/**\n+     * Adds two {@code short} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Short.MIN_VALUE} and {@code Short.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the addition would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Short.MAX_VALUE}.\n+     * If the result of the addition would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Short.MIN_VALUE}.\n+     *\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -289,3 +386,10 @@\n-     * Saturating subtraction of two {@code short} values,\n-     * which returns a {@code Short.MIN_VALUE} in underflowing or\n-     * {@code Short.MAX_VALUE} in overflowing scenario.\n+     * Subtracts two {@code short} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Short.MIN_VALUE} and {@code Short.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the subtraction would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Short.MAX_VALUE}.\n+     * If the result of the subtraction would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Short.MIN_VALUE}.\n@@ -293,4 +397,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code short} value range else delimiting {@code Short.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n@@ -311,2 +415,9 @@\n-     * Saturating unsigned addition of two {@code short} values,\n-     * which returns maximum unsigned short value in overflowing scenario.\n+     * Adds two {@code short} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0} and {@code 0xFFFF}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned addition would otherwise overflow\n+     * from the greater of the two operands to a lesser value then the\n+     * result is clamped to the upper bound {@code 0xFFFF}.\n@@ -314,4 +425,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned short value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -330,1 +441,0 @@\n-\n@@ -332,2 +442,9 @@\n-     * Saturating unsigned subtraction of two {@code short} values,\n-     * which returns a zero in underflowing scenario.\n+     * Subtracts two {@code short} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0} and {@code 0xFFFF}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned subtraction would otherwise underflow\n+     * from the lesser of the two operands to a greater value then the\n+     * result is clamped to the lower bound {@code 0}.\n@@ -335,4 +452,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n@@ -349,0 +466,1 @@\n+\n@@ -350,1 +468,4 @@\n-     * Based on the unsigned comparison returns the greater of two {@code byte} values.\n+     * Returns the smaller of two {@code byte} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0}. If the operands have the\n+     * same value, the result is that same value.\n@@ -352,4 +473,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the greater of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the smaller of {@code a} and {@code b}.\n+     * @see VectorOperators#UMIN\n@@ -358,2 +479,2 @@\n-    public static byte maxUnsigned(byte a, byte b) {\n-        return Byte.compareUnsigned(a, b) > 0 ? a : b;\n+    public static byte minUnsigned(byte a, byte b) {\n+        return Byte.compareUnsigned(a, b) < 0 ? a : b;\n@@ -363,1 +484,5 @@\n-     * Based on the unsigned comparison returns the smaller of two {@code byte} values.\n+     * Returns the greater of two {@code byte} values numerically treating\n+     * the values as unsigned. That is, the result is the operand closer\n+     * to the value of the expression {@code 0xFF} numerically\n+     * treating it as unsigned. If the operands have the same value,\n+     * the result is that same value.\n@@ -365,4 +490,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the smaller of {@code a} and {@code b}\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the larger of {@code a} and {@code b}.\n+     * @see VectorOperators#UMAX\n@@ -371,2 +496,2 @@\n-    public static byte minUnsigned(byte a, byte b) {\n-        return Byte.compareUnsigned(a, b) < 0 ? a : b;\n+    public static byte maxUnsigned(byte a, byte b) {\n+        return Byte.compareUnsigned(a, b) > 0 ? a : b;\n@@ -376,3 +501,10 @@\n-     * Saturating addition of two {@code byte} values,\n-     * which returns a {@code Byte.MIN_VALUE} in underflowing or\n-     * {@code Byte.MAX_VALUE} in overflowing scenario.\n+     * Adds two {@code byte} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Byte.MIN_VALUE} and {@code Byte.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the addition would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Byte.MAX_VALUE}.\n+     * If the result of the addition would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Byte.MIN_VALUE}.\n@@ -380,4 +512,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the sum of {@code a} and {@code b} iff within {@code byte} value range else delimiting {@code Byte.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -398,3 +530,10 @@\n-     * Saturating subtraction of two {@code byte} values,\n-     * which returns a {@code Byte.MIN_VALUE} in underflowing or\n-     * {@code Byte.MAX_VALUE} in overflowing scenario.\n+     * Subtracts two {@code byte} values using saturation\n+     * arithemetic. The lower and upper (inclusive) bounds are\n+     * {@code Byte.MIN_VALUE} and {@code Byte.MAX_VALUE}, respectively.\n+     * <p>\n+     * If the result of the subtraction would otherwise overflow from\n+     * a positive value to a negative value then the result is clamped\n+     * to the upper bound {@code Byte.MAX_VALUE}.\n+     * If the result of the subtraction would otherwise underflow from\n+     * a negative value to a positive value then the result is clamped\n+     * to lower bound {@code Byte.MIN_VALUE}.\n@@ -402,4 +541,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the difference between {@code a} and {@code b} iff within {@code byte} value range else delimiting {@code Byte.MIN_VALUE\/MAX_VALUE} value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n@@ -420,2 +559,9 @@\n-     * Saturating unsigned addition of two {@code byte} values,\n-     * which returns an maximum unsigned byte value (0xFF) in overflowing scenario.\n+     * Adds two {@code byte} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0} and {@code 0xFF}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned addition would otherwise overflow\n+     * from the greater of the two operands to a lesser value then the\n+     * result is clamped to the upper bound {@code 0xFF}.\n@@ -423,4 +569,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned sum of {@code a} and {@code b} iff within unsigned value range else delimiting maximum unsigned byte value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating addition of the operands.\n+     * @see VectorOperators#SADD\n@@ -440,2 +586,9 @@\n-     * Saturating unsigned subtraction of two {@code byte} values,\n-     * which returns a zero in underflowing scenario.\n+     * Subtracts two {@code byte} values using saturation\n+     * arithemetic and numerically treating the values\n+     * as unsigned. The lower and upper (inclusive) bounds\n+     * are {@code 0} and {@code 0xFF}, respectively,\n+     * numerically treating them as unsigned.\n+     * <p>\n+     * If the result of the unsigned subtraction would otherwise underflow\n+     * from the lesser of the two operands to a greater value then the\n+     * result is clamped to the lower bound {@code 0}.\n@@ -443,4 +596,4 @@\n-     * @param a the first operand\n-     * @param b the second operand\n-     * @return the unsigned difference between {@code a} and {@code b} iff within unsigned value range else delimiting zero value.\n-     * @see java.util.function.BinaryOperator\n+     * @param a the first operand.\n+     * @param b the second operand.\n+     * @return the saturating difference of the operands.\n+     * @see VectorOperators#SSUB\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMath.java","additions":316,"deletions":163,"binary":false,"changes":479,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -570,1 +570,3 @@\n-    \/** Produce {@code a [+] b}.  *\/\n+    \/** Produce saturating {@code a+b}.  Integral only.\n+     * @see VectorMath#addSaturating(int, int)\n+     *\/\n@@ -572,1 +574,3 @@\n-    \/** Produce {@code a [u+] b}. *\/\n+    \/** Produce saturating unsigned {@code a+b}.  Integral only.\n+     * @see VectorMath#addSaturatingUnsigned(int, int)\n+     *\/\n@@ -574,1 +578,3 @@\n-    \/** Produce {@code a [-] b}.  *\/\n+    \/** Produce saturating {@code a-b}.  Integral only.\n+     * @see VectorMath#subSaturating(int, int)\n+     *\/\n@@ -576,1 +582,3 @@\n-    \/** Produce {@code a [u-] b}. *\/\n+    \/** Produce saturating unsigned {@code a-b}.  Integral only.\n+     * @see VectorMath#subSaturatingUnsigned(int, int)\n+     *\/\n@@ -578,1 +586,3 @@\n-    \/** Produce {@code umin(a,b)}. *\/\n+    \/** Produce unsigned {@code min(a,b)}.  Integral only.\n+     * @see VectorMath#minUnsigned(int, int) (int, int)\n+     *\/\n@@ -580,1 +590,3 @@\n-    \/** Produce {@code umax(a,b)}. *\/\n+    \/** Produce unsigned {@code max(a,b)}.  Integral only.\n+     * @see VectorMath#maxUnsigned(int, int) (int, int)\n+     *\/\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"}]}