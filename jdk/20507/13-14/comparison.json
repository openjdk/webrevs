{"files":[{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1117,18 +1116,0 @@\n-    static final List<IntFunction<double[]>> DOUBLE_SATURATING_GENERATORS = List.of(\n-            withToString(\"double[Double.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE - 100));\n-            }),\n-            withToString(\"double[Double.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1143,4 +1124,0 @@\n-    static final List<List<IntFunction<double[]>>> DOUBLE_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(DOUBLE_GENERATORS.get(0)).\n-                flatMap(fa -> DOUBLE_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1166,5 +1143,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpProvider() {\n-        return DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1178,8 +1150,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1117,18 +1116,0 @@\n-    static final List<IntFunction<double[]>> DOUBLE_SATURATING_GENERATORS = List.of(\n-            withToString(\"double[Double.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE - 100));\n-            }),\n-            withToString(\"double[Double.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1143,4 +1124,0 @@\n-    static final List<List<IntFunction<double[]>>> DOUBLE_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(DOUBLE_GENERATORS.get(0)).\n-                flatMap(fa -> DOUBLE_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1166,5 +1143,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpProvider() {\n-        return DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1178,8 +1150,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1117,18 +1116,0 @@\n-    static final List<IntFunction<double[]>> DOUBLE_SATURATING_GENERATORS = List.of(\n-            withToString(\"double[Double.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE - 100));\n-            }),\n-            withToString(\"double[Double.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1143,4 +1124,0 @@\n-    static final List<List<IntFunction<double[]>>> DOUBLE_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(DOUBLE_GENERATORS.get(0)).\n-                flatMap(fa -> DOUBLE_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1166,5 +1143,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpProvider() {\n-        return DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1178,8 +1150,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1117,18 +1116,0 @@\n-    static final List<IntFunction<double[]>> DOUBLE_SATURATING_GENERATORS = List.of(\n-            withToString(\"double[Double.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE - 100));\n-            }),\n-            withToString(\"double[Double.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1143,4 +1124,0 @@\n-    static final List<List<IntFunction<double[]>>> DOUBLE_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(DOUBLE_GENERATORS.get(0)).\n-                flatMap(fa -> DOUBLE_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1166,5 +1143,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpProvider() {\n-        return DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1178,8 +1150,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1122,18 +1121,0 @@\n-    static final List<IntFunction<double[]>> DOUBLE_SATURATING_GENERATORS = List.of(\n-            withToString(\"double[Double.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE));\n-            }),\n-            withToString(\"double[Double.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MAX_VALUE - 100));\n-            }),\n-            withToString(\"double[Double.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (double)(Double.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1148,4 +1129,0 @@\n-    static final List<List<IntFunction<double[]>>> DOUBLE_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(DOUBLE_GENERATORS.get(0)).\n-                flatMap(fa -> DOUBLE_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1171,5 +1148,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpProvider() {\n-        return DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1183,8 +1155,0 @@\n-    @DataProvider\n-    public Object[][] doubleSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> DOUBLE_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1128,18 +1127,0 @@\n-    static final List<IntFunction<float[]>> FLOAT_SATURATING_GENERATORS = List.of(\n-            withToString(\"float[Float.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE - 100));\n-            }),\n-            withToString(\"float[Float.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1154,4 +1135,0 @@\n-    static final List<List<IntFunction<float[]>>> FLOAT_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(FLOAT_GENERATORS.get(0)).\n-                flatMap(fa -> FLOAT_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1177,5 +1154,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpProvider() {\n-        return FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1189,8 +1161,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1128,18 +1127,0 @@\n-    static final List<IntFunction<float[]>> FLOAT_SATURATING_GENERATORS = List.of(\n-            withToString(\"float[Float.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE - 100));\n-            }),\n-            withToString(\"float[Float.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1154,4 +1135,0 @@\n-    static final List<List<IntFunction<float[]>>> FLOAT_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(FLOAT_GENERATORS.get(0)).\n-                flatMap(fa -> FLOAT_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1177,5 +1154,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpProvider() {\n-        return FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1189,8 +1161,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1128,18 +1127,0 @@\n-    static final List<IntFunction<float[]>> FLOAT_SATURATING_GENERATORS = List.of(\n-            withToString(\"float[Float.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE - 100));\n-            }),\n-            withToString(\"float[Float.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1154,4 +1135,0 @@\n-    static final List<List<IntFunction<float[]>>> FLOAT_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(FLOAT_GENERATORS.get(0)).\n-                flatMap(fa -> FLOAT_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1177,5 +1154,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpProvider() {\n-        return FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1189,8 +1161,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1128,18 +1127,0 @@\n-    static final List<IntFunction<float[]>> FLOAT_SATURATING_GENERATORS = List.of(\n-            withToString(\"float[Float.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE - 100));\n-            }),\n-            withToString(\"float[Float.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1154,4 +1135,0 @@\n-    static final List<List<IntFunction<float[]>>> FLOAT_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(FLOAT_GENERATORS.get(0)).\n-                flatMap(fa -> FLOAT_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1177,5 +1154,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpProvider() {\n-        return FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1189,8 +1161,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.incubator.vector.VectorMath;\n@@ -1133,18 +1132,0 @@\n-    static final List<IntFunction<float[]>> FLOAT_SATURATING_GENERATORS = List.of(\n-            withToString(\"float[Float.MIN_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE));\n-            }),\n-            withToString(\"float[Float.MAX_VALUE - 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MAX_VALUE - 100));\n-            }),\n-            withToString(\"float[Float.MIN_VALUE + 100]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> (float)(Float.MIN_VALUE + 100));\n-            })\n-    );\n@@ -1159,4 +1140,0 @@\n-    static final List<List<IntFunction<float[]>>> FLOAT_SATURATING_GENERATOR_PAIRS =\n-        Stream.of(FLOAT_GENERATORS.get(0)).\n-                flatMap(fa -> FLOAT_SATURATING_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).\n-                collect(Collectors.toList());\n@@ -1182,5 +1159,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpProvider() {\n-        return FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(List::toArray).\n-                toArray(Object[][]::new);\n-    }\n@@ -1194,8 +1166,0 @@\n-    @DataProvider\n-    public Object[][] floatSaturatingBinaryOpMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                flatMap(fm -> FLOAT_SATURATING_GENERATOR_PAIRS.stream().map(lfa -> {\n-                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();\n-                })).\n-                toArray(Object[][]::new);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#if[!FP]\n@@ -42,0 +43,1 @@\n+#end[!FP]\n@@ -1220,0 +1222,1 @@\n+#if[!FP]\n@@ -1238,0 +1241,1 @@\n+#end[!FP]\n@@ -1246,0 +1250,1 @@\n+#if[!FP]\n@@ -1250,0 +1255,1 @@\n+#end[!FP]\n@@ -1269,0 +1275,1 @@\n+#if[!FP]\n@@ -1274,0 +1281,1 @@\n+#end[!FP]\n@@ -1281,0 +1289,1 @@\n+#if[!FP]\n@@ -1289,0 +1298,1 @@\n+#end[!FP]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}