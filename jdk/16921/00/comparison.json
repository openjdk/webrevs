{"files":[{"patch":"@@ -32,1 +32,0 @@\n-    public static final String SAFEPOINT_WHILE_PRINTING_MESSAGE = \"<!-- safepoint while printing -->\";\n@@ -41,5 +40,0 @@\n-    \/**\n-     * Stores an incomplete line that was interrupted by a safepoint.\n-     * Needs to be merged with the immediately following line.\n-     *\/\n-    private String incompleteLine = \"\";\n@@ -95,16 +89,1 @@\n-        line = mergeWithIncompleteLine(line);\n-        if (line.endsWith(SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n-            line = removeSafepointMessage(line);\n-            incompleteLine = line;\n-        } else {\n-            appendLine(line);\n-        }\n-    }\n-\n-    private String mergeWithIncompleteLine(String line) {\n-        if (!incompleteLine.isEmpty()) {\n-            line = incompleteLine + line;\n-            incompleteLine = \"\";\n-        }\n-        return line;\n-    }\n+        builder.append(escapeXML(line)).append(System.lineSeparator());\n@@ -112,2 +91,0 @@\n-    private static String removeSafepointMessage(String line) {\n-        return line.substring(0, line.lastIndexOf(SAFEPOINT_WHILE_PRINTING_MESSAGE));\n@@ -120,4 +97,0 @@\n-    private void appendLine(String line) {\n-        builder.append(escapeXML(line)).append(System.lineSeparator());\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/hotspot\/CompilePhaseBlock.java","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-    private final WriterThreads writerThreads;\n-    private WriterThread writerThread;\n@@ -41,1 +39,0 @@\n-        this.writerThreads = new WriterThreads();\n@@ -49,3 +46,1 @@\n-        if (WriterThread.isWriterThreadLine(line)) {\n-            processWriterThreadLine(line);\n-        } else if (compileQueueMessages.isTestMethodQueuedLine(line)) {\n+        if (compileQueueMessages.isTestMethodQueuedLine(line)) {\n@@ -62,9 +57,0 @@\n-    private void processWriterThreadLine(String line) {\n-        if (loggedMethod.hasActiveBlock()) {\n-            \/\/ The current compile phase block was interrupted due to a safepoint. Save and restore later.\n-            writerThread.saveLoggedMethod(loggedMethod);\n-        }\n-        writerThread = writerThreads.parse(line);\n-        loggedMethod = writerThread.restoreLoggedMethod();\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/hotspot\/State.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.ir_framework.driver.irmatching.parser.hotspot;\n-\n-\/**\n- * This class represents a writer thread that emits log messages with LogCompilation. It saves and restores a currently\n- * parsed {@link LoggedMethod} if a {@link CompilePhaseBlock} was interrupted before reaching the block end tag.\n- *\n- * @see LoggedMethod\n- * @see CompilePhaseBlock\n- *\/\n-class WriterThread {\n-    private LoggedMethod loggedMethod = LoggedMethod.DONT_CARE;\n-\n-    public static boolean isWriterThreadLine(String line) {\n-        return line.startsWith(\"<writer\");\n-    }\n-\n-    public void saveLoggedMethod(LoggedMethod loggedMethod) {\n-        this.loggedMethod = loggedMethod;\n-    }\n-\n-    public LoggedMethod restoreLoggedMethod() {\n-        LoggedMethod restoredLoggedMethod = loggedMethod;\n-        if (restoredLoggedMethod != LoggedMethod.DONT_CARE) {\n-            loggedMethod = LoggedMethod.DONT_CARE;\n-        }\n-        return restoredLoggedMethod;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/hotspot\/WriterThread.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.ir_framework.driver.irmatching.parser.hotspot;\n-\n-import compiler.lib.ir_framework.TestFramework;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-\/**\n- * This class keeps track of all {@link WriterThread} instances.\n- *\/\n-class WriterThreads {\n-    private final Map<Integer, WriterThread> mapIdToThread = new HashMap<>();\n-\n-    WriterThread parse(String line) {\n-        int writerThreadId = parseWriterThreadId(line);\n-        return mapIdToThread.computeIfAbsent(writerThreadId, c -> new WriterThread());\n-    }\n-\n-    private static int parseWriterThreadId(String line) {\n-        Pattern pattern = Pattern.compile(\"='(\\\\d+)'\");\n-        Matcher matcher = pattern.matcher(line);\n-        TestFramework.check(matcher.find(), \"should find writer thread id\");\n-        return Integer.parseInt(matcher.group(1));\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/hotspot\/WriterThreads.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.testlibrary_tests.ir_framework.tests;\n-\n-import compiler.lib.ir_framework.CompilePhase;\n-import compiler.lib.ir_framework.IR;\n-import compiler.lib.ir_framework.IRNode;\n-import compiler.lib.ir_framework.Test;\n-import compiler.lib.ir_framework.driver.irmatching.IRMatcher;\n-import compiler.lib.ir_framework.driver.irmatching.Matchable;\n-import compiler.lib.ir_framework.driver.irmatching.parser.TestClassParser;\n-import jdk.test.lib.Utils;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-\n-\/*\n- * @test\n- * @bug 8300273\n- * @requires vm.debug == true & vm.flagless\n- * @summary Test TestClassParser such that it correctly parses the hotspot_pid* files with safepoint interruption messages\n- * @library \/test\/lib \/testlibrary_tests \/\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm -Xbootclasspath\/a:. -DSkipWhiteBoxInstall=true -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                    -XX:+WhiteBoxAPI compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting\n- *\/\n-public class TestSafepointWhilePrinting {\n-    static int iFld;\n-\n-    @org.junit.Test\n-    public void test() throws IOException {\n-        String hotspotPidFileName = \"safepoint_while_printing_hotspot_pid.log\";\n-        Path hotspotPidFilePath = Paths.get(Utils.TEST_SRC).resolve(hotspotPidFileName);\n-        \/\/ Copy file to current workdir\n-        Files.copy(hotspotPidFilePath, Paths.get(\"\").resolve(hotspotPidFileName),\n-                   StandardCopyOption.REPLACE_EXISTING);\n-\n-        String irEncoding =\n-                \"\"\"\n-                ##### IRMatchRulesEncoding - used by TestFramework #####\n-                <method>,{comma separated applied @IR rule ids}\n-                test1,1\n-                test2,1\n-                testSafepointInBlock,1\n-                testQueueInBlock1,1\n-                testQueueInBlock2,1\n-                testDoubleInterruptOuter,1\n-                testDoubleInterruptMiddle,1\n-                testDoubleInterruptInner,1\n-                testCompilePhaseBackToBackFirst,1\n-                testCompilePhaseBackToBackLast,1\n-                ----- END -----\n-                ##### IRMatchingVMInfo - used by TestFramework #####\n-                <key>:<value>\n-                cpuFeatures:empty_cpu_info\n-                MaxVectorSize:64\n-                MaxVectorSizeIsDefault:1\n-                LoopMaxUnroll:64\n-                UseAVX:1\n-                UseAVXIsDefault:1\n-                ----- END VMInfo -----\n-                \"\"\";\n-        TestClassParser testClassParser = new TestClassParser(TestSafepointWhilePrinting.class);\n-        Matchable testClassMatchable = testClassParser.parse(hotspotPidFileName, irEncoding);\n-        IRMatcher matcher = new IRMatcher(testClassMatchable);\n-        matcher.match();\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.CMP_UL3, \"1\"})\n-    public void test1() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.CMP_UL3, \"1\"})\n-    public void test2() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {\"testSafepointInBlock @ bci:-1\", \"1\"}, phase = CompilePhase.PRINT_IDEAL)\n-    public void testSafepointInBlock() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {\"testQueueInBlock1 @ bci:-1\", \"1\"}, phase = CompilePhase.PRINT_IDEAL)\n-    public void testQueueInBlock1() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {\"testQueueInBlock2 @ bci:-1\", \"1\"}, phase = CompilePhase.PRINT_IDEAL)\n-    public void testQueueInBlock2() {\n-        iFld = 34;\n-    }\n-    @Test\n-    @IR(counts = {\"!jvms: TestSafepointWhilePrinting::testDoubleInterruptOuter\", \"1\"}, phase = CompilePhase.PRINT_IDEAL)\n-    public void testDoubleInterruptOuter() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {\"testDoubleInterruptMiddle @ bci:-1\", \"1\", IRNode.CMP_UL3, \"1\"}, phase = CompilePhase.PRINT_IDEAL)\n-    public void testDoubleInterruptMiddle() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.CON_L, \"1\"}, phase = CompilePhase.PRINT_IDEAL)\n-    public void testDoubleInterruptInner() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {\"(line 115)\", \"1\", IRNode.CMP_UL3, \"1\"}, phase = {CompilePhase.AFTER_PARSING, CompilePhase.BEFORE_MATCHING})\n-    public void testCompilePhaseBackToBackFirst() {\n-        iFld = 34;\n-    }\n-\n-    @Test\n-    @IR(counts = {\"(line 115)\", \"1\", IRNode.CMP_UL3, \"1\"}, phase = {CompilePhase.AFTER_PARSING, CompilePhase.BEFORE_MATCHING})\n-    public void testCompilePhaseBackToBackLast() {\n-        iFld = 34;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSafepointWhilePrinting.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"},{"patch":"@@ -1,163 +0,0 @@\n-<writer thread='1683653'\/>\n-   1682  967    b  3       jdk.test.lib.Asserts::assertEquals (7 bytes)\n-<nmethod compile_id='967' compiler='c1' level='3' entry='0x00007f29791d6440' size='912' address='0x00007f29791d6290' relocation_offset='352' insts_offset='432' stub_offset='648' scopes_data_offset='768' scopes_pcs_offset='808' dependencies_offset='904' oops_offset='752' metadata_offset='760' method='jdk.test.lib.Asserts assertEquals (Ljava\/lang\/Object;Ljava\/lang\/Object;)V' bytes='7' count='256' iicount='256' stamp='1.683'\/>\n-<writer thread='1683665'\/>\n-<task_queued compile_id='1013' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting test2 (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='1683661'\/>\n-<task_queued compile_id='1008' method='java.util.Arrays copyOfRange ([Ljava\/lang\/Object;IILjava\/lang\/Class;)[Ljava\/lang\/Object;' bytes='90' count='257' iicount='257' level='3' blocking='1' stamp='1.714' comment='tiered' hot_count='256'\/>\n-<writer thread='1683666'\/>\n-<task_queued compile_id='1018' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting test1 (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='1683670'\/>\n-<make_not_entrant thread='1683670' compile_id='995' compiler='c1' level='3' stamp='1.716'\/>\n-   1716  995       3       compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting::compareLongWithImm5 (8 bytes)   made not entrant\n-<writer thread='1683652'\/>\n-   1716 1018    b  4       compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting::test1 (8 bytes)\n-<writer thread='1683665'\/>\n-<task_queued compile_id='53' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testSafepointInBlock (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='1683653'\/>\n-   1716 1008    b  3       java.util.Arrays::copyOfRange (90 bytes)\n-<writer thread='1683670'\/>\n-   1716 1013    b  4       compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting::test2 (8 bytes)\n-<writer thread='1683663'\/>\n-<task_queued compile_id='1019' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting notATest (I)I' bytes='7' count='1000' iicount='1000' blocking='1' stamp='1.716' comment='whitebox' hot_count='1000'\/>\n-<writer thread='1683652'\/>\n-<ideal compile_id='1018' compile_phase='print_ideal'>\n-AFTER: print_ideal\n-  0  Root  === 0 26  [[ 0 1 3 24 ]] inner\n-  3  Start  === 3 0  [[ 3 5 6 7 8 9 11 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:compiler\/intrinsics\/TestSafepointWhilePrinting:NotNull *, 6:long, 7:half}\n-  5  Parm  === 3  [[ 26 ]] Control !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n-  6  Parm  === 3  [[ 26 ]] I_O !jvms:<!-- safepoint while printing -->\n-<writer thread='1683670'\/>\n-<ideal compile_id='1013' compile_phase='print_ideal'>\n-AFTER: print_ideal\n-  0  Root  === 0 26  [[ 0 1 3 24 ]] inner\n-  3  Start  === 3 0  [[ 3 5 6 7 8 9 11 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:compiler\/intrinsics\/TestSafepointWhilePrinting:NotNull *, 6:long, 7:half}\n-  5  Parm  === 3  [[ 26 ]] Control !jvms: TestSafepointWhilePrinting::test2 @ bci:-1 (line 109)\n-  6  Parm  === 3  [[ 26 ]] I_O !jvms: TestSafepointWhilePrinting::test2 @ bci:-1 (line 109)\n-  7  Parm  === 3  [[ 26 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !jvms: TestSafepointWhilePrinting::test2 @ bci:-1 (line 109)\n-  8  Parm  === 3  [[ 26 ]] FramePtr !jvms: TestSafepointWhilePrinting::test2 @ bci:-1 (line 109)\n-  9  Parm  === 3  [[ 26 ]] ReturnAdr !jvms: TestSafepointWhilePrinting::test2 @ bci:-1 (line 109)\n- 11  Parm  === 3  [[ 25 ]] Parm1: long !jvms: TestSafepointWhilePrinting::test2 @ bci:-1 (line 109)\n- 24  ConL  === 0  [[ 25 ]]  #long:42\n- 25  CmpUL3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test2 @ bci:4 (line 109)\n- 26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<writer thread='1683652'\/>\n- TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n-  7  Parm  === 3  [[ 26 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n-  8  Parm  === 3  [[ 26 ]] FramePtr !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n-  9  Parm  === 3  [[ 26 ]] ReturnAdr !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n- 11  Parm  === 3  [[ 25 ]] Parm1: long !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n- 24  ConL  === 0  [[ 25 ]]  #long:172032\n- 25  CmpUL3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test1 @ bci:4 (line 115)\n- 26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<writer thread='1875264'\/>\n-<nmethod compile_id='1017' compiler='c2' level='4' entry='0x00007fa74cc08ea0' size='664' address='0x00007fa74cc08d10' relocation_offset='352' insts_offset='400' stub_offset='536' scopes_data_offset='576'\n- scopes_pcs_offset='592' dependencies_offset='656' oops_offset='560' metadata_offset='568' method='compiler.intrinsics.TestCompareUnsigned compareLongWithImm3 (J)I' bytes='8' count='1000' iicount='1000'\n-stamp='1.785'\/>\n-<make_not_entrant thread='1875264' compile_id='993' compiler='c1' level='3' stamp='1.785'\/>\n-   1784  993       3       compiler.intrinsics.TestCompareUnsigned::compareLongWithImm3 (8 bytes)   made not entrant\n-   1784 1013    b  4       compiler.intrinsics.TestCompareUnsigned::compareLongWithImm1 (8 bytes)\n-<ideal compile_id='53' compile_phase='print_ideal'>\n-AFTER: print_ideal\n-  0  Root  === 0 26  [[ 0 1 3 24 ]] inner\n-  8  Parm  === 3  [[ 26 ]] FramePtr !jvms: TestSafepointWhilePrinting::testSafepointInBlock<!-- safepoint while printing -->\n- @ bci:-1 (line 109)\n- 24  ConL  === 0  [[ 25 ]]  #long:42\n- 26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<writer thread='5165446'\/>\n-<task_queued compile_id='54' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testQueueInBlock1 (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='234'\/>\n-<ideal compile_id='54' compile_phase='print_ideal'>\n-AFTER: print_ideal\n-  0  Root  === 0 26  [[ 0 1 3 24 ]] inner\n-  8  Parm  === 3  [[ 26 ]] FramePtr !jvms: TestSafepointWhilePrinting::testQueueInBlock1<!-- safepoint while printing -->\n-<writer thread='235'\/>\n-<task_queued compile_id='55' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testQueueInBlock2 (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='234'\/>\n- @ bci:-1 (line 109)\n- 24  ConL  === 0  [[ 25 ]]  #long:42\n- 26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<ideal compile_id='55' compile_phase='print_ideal'>\n-AFTER: print_ideal\n-  0  Root  === 0 26  [[ 0 1 3 24 ]] inner\n-  8  Parm  === 3  [[ 26 ]] FramePtr !jvms: TestSafepointWhilePrinting::testQueueInBlock2<!-- safepoint while printing -->\n- @ bci:-1 (line 109)\n- 24  ConL  === 0  [[ 25 ]]  #long:42\n- 26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<writer thread='343523525'\/>\n-<task_queued compile_id='61' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testDoubleInterruptOuter (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='343523525'\/>\n-<task_queued compile_id='62' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testDoubleInterruptMiddle (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='1001'\/>\n-<ideal compile_id='61' compile_phase='print_ideal'>\n-AFTER: print_ideal\n-  0  Root  === 0 26  [[ 0 1 3 24 ]] inner\n-  3  Start  === 3 0  [[ 3 5 6 7 8 9 11 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:compiler\/intrinsics\/TestSafepointWhilePrinting:NotNull *, 6:long, 7:half}\n-  6  Parm  === 3  [[ 26 ]] I_O !jvms:<!-- safepoint while printing -->\n-<writer thread='1002'\/>\n-<ideal compile_id='62' compile_phase='print_ideal'>\n-AFTER: print_ideal\n-  0  Root  === 0 26  [[ 0 1 3 24 ]] inner\n-  8  Parm  === 3  [[ 26 ]] FramePtr !jvms: TestSafepointWhilePrinting::testDoubleInterruptMiddle<!-- safepoint while printing -->\n- @ bci:-1 (line 109)\n- 25  Cmp<!-- safepoint while printing -->\n-<writer thread='9999'\/>\n-<task_queued compile_id='63' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testDoubleInterruptInner (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='1003'\/>\n-<ideal compile_id='63' compile_phase='print_ideal'>\n-  24  ConL  === 0  [[ 25 ]]  #long:42\n-  26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<writer thread='1002'\/>\n-UL3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test2 @ bci:4 (line 109)\n- 26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<writer thread='1001'\/>\n- TestSafepointWhilePrinting::testDoubleInterruptOuter @ bci:-1 (line 115)\n-  7  Parm  === 3  [[ 26 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n-  8  Parm  === 3  [[ 26 ]] FramePtr !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n-  9  Parm  === 3  [[ 26 ]] ReturnAdr !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n- 11  Parm  === 3  [[ 25 ]] Parm1: long !jvms: TestSafepointWhilePrinting::test1 @ bci:-1 (line 115)\n- 24  ConL  === 0  [[ 25 ]]  #long:172032\n- 25  CmpUL3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test1 @ bci:4 (line 115)\n- 26  Return  === 5 6 7 8 9 returns 25  [[ 0 ]]\n-<\/ideal>\n-<writer thread='100000'\/>\n-<task_queued compile_id='72' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testCompilePhaseBackToBackFirst (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='72'\/>\n-<ideal compile_id='72' compile_phase='AFTER_PARSING'>\n- 24  ConL  === 0  [[ 25 ]]  #long:172032\n- 25  CmpUL<!-- safepoint while printing -->\n-<writer thread='71'\/>\n-<task_queued compile_id='71' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting testCompilePhaseBackToBackLast (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<ideal compile_id='71' compile_phase='AFTER_PARSING'>\n- 24  ConL  === 0  [[ 25 ]]  #long:172032\n- 25  CmpUL3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test1 @ bci:4 (line 115)\n-<\/ideal>\n-<ideal compile_id='71' compile_phase='BEFORE_MATCHING'>\n- 24  ConL  === 0  [[ 25 ]]  #long:172032\n- 25  CmpU<!-- safepoint while printing -->\n-<writer thread='72'\/>\n-3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test1 @ bci:4 (<!-- safepoint while printing -->\n-<writer thread='71'\/>\n-L3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test1 @ bci:4 (line <!-- safepoint while printing -->\n-<writer thread='72'\/>\n-line 115)\n-<\/ideal>\n-<writer thread='9999'\/>\n-<task_queued compile_id='3333' method='compiler.testlibrary_tests.ir_framework.tests.TestSafepointWhilePrinting asdf (J)I' bytes='8' count='1000' iicount='1000' blocking='1' stamp='1.715' comment='whitebox' hot_count='1000'\/>\n-<writer thread='72'\/>\n-<ideal compile_id='72' compile_phase='BEFORE_MATCHING'>\n- 24  ConL  === 0  [[ 25 ]]  #long:172032\n- 25  CmpU<!-- safepoint while printing -->\n-<writer thread='71'\/>\n-115)\n-<\/ideal>\n-<writer thread='72'\/>\n-L3  === _ 11 24  [[ 26 ]]  !jvms: TestSafepointWhilePrinting::test1 @ bci:4 (line 115)\n-<\/ideal>\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/safepoint_while_printing_hotspot_pid.log","additions":0,"deletions":163,"binary":false,"changes":163,"status":"deleted"}]}