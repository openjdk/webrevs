{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"jfrfiles\/jfrEventIds.hpp\"\n@@ -29,0 +30,2 @@\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -37,3 +40,38 @@\n-static JfrEventThrottler* _disabled_cpu_time_sample_throttler = nullptr;\n-static JfrEventThrottler* _object_allocation_throttler = nullptr;\n-static JfrEventThrottler* _safepoint_latency_throttler = nullptr;\n+constexpr static const JfrEventId throttleble_events[] = {\n+    JfrCPUTimeSampleEvent, JfrObjectAllocationSampleEvent,  JfrSafepointLatencyEvent\n+};\n+constexpr static int num_throttled_events = sizeof(throttleble_events) \/ sizeof(throttleble_events[0]);\n+\n+\/\/ Throttler-by-ID lookup table\n+class ThrottlerLookupTable {\n+  static constexpr int max = (int)LAST_EVENT_ID;\n+  STATIC_ASSERT(max < 1000); \/\/ should this ever get unreasonably large, we rethink this table.\n+  JfrEventThrottler* _table[max];\n+public:\n+  ThrottlerLookupTable() { memset(_table, 0, sizeof(_table)); }\n+\n+  bool initialize() {\n+    for (int i = 0; i < num_throttled_events; i++) {\n+      const JfrEventId id = throttleble_events[i];\n+      JfrEventThrottler* p = JfrEventThrottler::create_throttler(id);\n+      _table[(int)id] = p;\n+      if (p == nullptr) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  void destroy() {\n+    for (int i = 0; i < max; i++) {\n+      delete _table[i];\n+      _table[i] = nullptr;\n+    }\n+  }\n+\n+  JfrEventThrottler* at(JfrEventId id) const {\n+    return _table[(int)id];\n+  }\n+};\n+\n+static ThrottlerLookupTable _throttler_table;\n@@ -52,7 +90,3 @@\n-  assert(_disabled_cpu_time_sample_throttler == nullptr, \"invariant\");\n-  _disabled_cpu_time_sample_throttler = new JfrEventThrottler(JfrCPUTimeSampleEvent);\n-  _disabled_cpu_time_sample_throttler->_disabled = true;\n-  assert(_object_allocation_throttler == nullptr, \"invariant\");\n-  _object_allocation_throttler = new JfrEventThrottler(JfrObjectAllocationSampleEvent);\n-  if (_object_allocation_throttler == nullptr || !_object_allocation_throttler->initialize()) {\n-    return false;\n+  bool rc = _throttler_table.initialize();\n+  if (rc) {\n+    _throttler_table.at(JfrCPUTimeSampleEvent)->_disabled = true; \/\/ CPU time sampler disabled\n@@ -60,3 +94,1 @@\n-  assert(_safepoint_latency_throttler == nullptr, \"invariant\");\n-  _safepoint_latency_throttler = new JfrEventThrottler(JfrSafepointLatencyEvent);\n-  return _safepoint_latency_throttler != nullptr && _safepoint_latency_throttler->initialize();\n+  return rc;\n@@ -66,6 +98,1 @@\n-  delete _disabled_cpu_time_sample_throttler;\n-  _disabled_cpu_time_sample_throttler = nullptr;\n-  delete _object_allocation_throttler;\n-  _object_allocation_throttler = nullptr;\n-  delete _safepoint_latency_throttler;\n-  _safepoint_latency_throttler = nullptr;\n+  _throttler_table.destroy();\n@@ -78,14 +105,3 @@\n-  assert(_disabled_cpu_time_sample_throttler != nullptr, \"Disabled CPU time throttler has not been properly initialized\");\n-  assert(_object_allocation_throttler != nullptr, \"ObjectAllocation throttler has not been properly initialized\");\n-  assert(_safepoint_latency_throttler != nullptr, \"SafepointLatency throttler has not been properly initialized\");\n-  assert(event_id == JfrObjectAllocationSampleEvent || event_id == JfrSafepointLatencyEvent || event_id == JfrCPUTimeSampleEvent, \"Event type has an unconfigured throttler\");\n-  if (event_id == JfrObjectAllocationSampleEvent) {\n-    return _object_allocation_throttler;\n-  }\n-  if (event_id == JfrSafepointLatencyEvent) {\n-    return _safepoint_latency_throttler;\n-  }\n-  if (event_id == JfrCPUTimeSampleEvent) {\n-    return _disabled_cpu_time_sample_throttler;\n-  }\n-  return nullptr;\n+  JfrEventThrottler* const throttler = _throttler_table.at(event_id);\n+  assert(throttler != nullptr, \"Event type %d has an unconfigured throttler\", (int)event_id);\n+  return throttler;\n@@ -95,8 +111,10 @@\n-  if (event_id == JfrObjectAllocationSampleEvent) {\n-    assert(_object_allocation_throttler != nullptr, \"ObjectAllocation throttler has not been properly initialized\");\n-    _object_allocation_throttler->configure(sample_size, period_ms);\n-    return;\n-  }\n-  if (event_id == JfrSafepointLatencyEvent) {\n-    assert(_safepoint_latency_throttler != nullptr, \"SafepointLatency throttler has not been properly initialized\");\n-    _safepoint_latency_throttler->configure(sample_size, period_ms);\n+  JfrEventThrottler* const throttler = _throttler_table.at(event_id);\n+  assert(throttler != nullptr, \"Event type %d has an unconfigured throttler\", (int)event_id);\n+  throttler->configure(sample_size, period_ms);\n+}\n+\n+JfrEventThrottler* JfrEventThrottler::create_throttler(JfrEventId id) {\n+  JfrEventThrottler* p = new JfrEventThrottler(id);\n+  if (p->initialize() == false) {\n+    delete p;\n+    p = nullptr;\n@@ -104,0 +122,1 @@\n+  return p;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEventThrottler.cpp","additions":60,"deletions":41,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+  static JfrEventThrottler* create_throttler(JfrEventId event_id);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEventThrottler.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}