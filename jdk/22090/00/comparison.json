{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.security.AccessController;\n@@ -39,2 +38,0 @@\n-import sun.security.action.GetPropertyAction;\n-\n@@ -84,1 +81,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -89,3 +85,1 @@\n-                    RECONFIGURE_ON_NULL = Boolean.valueOf(\n-                        AccessController.doPrivileged(new GetPropertyAction(\n-                        \"swing.actions.reconfigureOnNull\", \"false\")));\n+                    RECONFIGURE_ON_NULL = Boolean.getBoolean(\"swing.actions.reconfigureOnNull\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/AbstractAction.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -82,1 +80,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -90,8 +87,1 @@\n-            StackWalker walker = AccessController.doPrivileged(new PrivilegedAction<StackWalker>() {\n-                @Override\n-                public StackWalker run() {\n-                    StackWalker stackwalker = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n-                    return stackwalker;\n-                }\n-            });\n-\n+            StackWalker walker = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/DebugGraphics.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,4 +47,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n@@ -108,1 +104,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -110,5 +105,1 @@\n-    protected static final Component component\n-            = AccessController.doPrivileged(new PrivilegedAction<Component>() {\n-        public Component run() {\n-            try {\n-                final Component component = createNoPermsComponent();\n+    protected static final Component component = createComponent();\n@@ -116,11 +107,8 @@\n-                \/\/ 6482575 - clear the appContext field so as not to leak it\n-                AWTAccessor.getComponentAccessor().\n-                        setAppContext(component, null);\n-\n-                return component;\n-            } catch (Throwable e) {\n-                \/\/ We don't care about component.\n-                \/\/ So don't prevent class initialisation.\n-                e.printStackTrace();\n-                return null;\n-            }\n+    private static final Component createComponent() {\n+        try {\n+            Component component = new Component() {};\n+            \/\/ 6482575 - clear the appContext field so as not to leak it\n+            AWTAccessor.getComponentAccessor().setAppContext(component, null);\n+            return component;\n+        } catch (Throwable t) {\n+            return null;\n@@ -128,1 +116,1 @@\n-    });\n+    }\n@@ -138,17 +126,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Component createNoPermsComponent() {\n-        \/\/ 7020198 - set acc field to no permissions and no subject\n-        \/\/ Note, will have appContext set.\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<Component>() {\n-                    public Component run() {\n-                        return new Component() {\n-                        };\n-                    }\n-                },\n-                new AccessControlContext(new ProtectionDomain[]{\n-                        new ProtectionDomain(null, null)\n-                })\n-        );\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ImageIcon.java","additions":10,"deletions":39,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -819,1 +817,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -821,8 +818,2 @@\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    Toolkit.getDefaultToolkit().\n-                            addAWTEventListener(LayerEventController.this, eventMask);\n-                    return null;\n-                }\n-            });\n-\n+            Toolkit.getDefaultToolkit().\n+                    addAWTEventListener(LayerEventController.this, eventMask);\n@@ -831,1 +822,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -833,7 +823,2 @@\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    Toolkit.getDefaultToolkit().\n-                            removeAWTEventListener(LayerEventController.this);\n-                    return null;\n-                }\n-            });\n+            Toolkit.getDefaultToolkit().\n+                    removeAWTEventListener(LayerEventController.this);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JLayer.java","additions":4,"deletions":19,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -124,3 +123,1 @@\n-            java.security.AccessController.doPrivileged(\n-                new sun.security.action.GetPropertyAction(\n-                    \"javax.swing.adjustPopupLocationToFit\",\"\")).equals(\"false\");\n+         System.getProperty(\"javax.swing.adjustPopupLocationToFit\",\"\").equals(\"false\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JPopupMenu.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.security.AccessController;\n@@ -34,2 +33,0 @@\n-import sun.security.action.GetBooleanAction;\n-\n@@ -205,1 +202,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -207,2 +203,1 @@\n-            = AccessController.doPrivileged(new GetBooleanAction(\n-                                   \"swing.logDoubleBufferingDisable\"));\n+            = Boolean.getBoolean(\"swing.logDoubleBufferingDisable\");\n@@ -214,1 +209,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -216,2 +210,1 @@\n-            = AccessController.doPrivileged(new GetBooleanAction(\n-                                   \"swing.ignoreDoubleBufferingDisable\"));\n+           = Boolean.getBoolean(\"swing.ignoreDoubleBufferingDisable\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JRootPane.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -214,5 +211,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var t1 = \"true\".equals(AccessController.\n-                doPrivileged(new GetPropertyAction(\n-                \"swing.volatileImageBufferEnabled\", \"true\")));\n-        volatileImageBufferEnabled = t1;\n+        volatileImageBufferEnabled = \"true\".equals(System.getProperty(\"swing.volatileImageBufferEnabled\", \"true\"));\n@@ -223,7 +216,2 @@\n-        @SuppressWarnings(\"removal\")\n-        var t2 = \"true\".equals(AccessController.doPrivileged(\n-                    new GetPropertyAction(\"awt.nativeDoubleBuffering\")));\n-        nativeDoubleBuffering = t2;\n-        @SuppressWarnings(\"removal\")\n-        String bs = AccessController.doPrivileged(\n-                          new GetPropertyAction(\"swing.bufferPerWindow\"));\n+        nativeDoubleBuffering = \"true\".equals(System.getProperty(\"awt.nativeDoubleBuffering\"));\n+        String bs = System.getProperty(\"swing.bufferPerWindow\");\n@@ -242,4 +230,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var t3 = \"true\".equals(AccessController.doPrivileged(\n-               new GetPropertyAction(\"swing.handleTopLevelPaint\", \"true\")));\n-        HANDLE_TOP_LEVEL_PAINT = t3;\n+        HANDLE_TOP_LEVEL_PAINT = \"true\".equals(System.getProperty(\"swing.handleTopLevelPaint\", \"true\"));\n@@ -614,15 +599,1 @@\n-            runnableList.add(new Runnable() {\n-                public void run() {\n-                    @SuppressWarnings(\"removal\")\n-                    AccessControlContext stack = AccessController.getContext();\n-                    @SuppressWarnings(\"removal\")\n-                    AccessControlContext acc =\n-                        AWTAccessor.getComponentAccessor().getAccessControlContext(c);\n-                    javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<Void>() {\n-                        public Void run() {\n-                            r.run();\n-                            return null;\n-                        }\n-                    }, stack, acc);\n-                }\n-            });\n+            runnableList.add(r);\n@@ -749,12 +720,1 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext stack = AccessController.getContext();\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc =\n-                AWTAccessor.getComponentAccessor().getAccessControlContext(c);\n-            javaSecurityAccess.doIntersectionPrivilege(\n-                new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        c.validate();\n-                        return null;\n-                    }\n-                }, stack, acc);\n+            c.validate();\n@@ -856,13 +816,6 @@\n-                @SuppressWarnings(\"removal\")\n-                AccessControlContext stack = AccessController.getContext();\n-                @SuppressWarnings(\"removal\")\n-                AccessControlContext acc =\n-                    AWTAccessor.getComponentAccessor().getAccessControlContext(dirtyComponent);\n-                javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        Rectangle rect = tmpDirtyComponents.get(dirtyComponent);\n-                        \/\/ Sometimes when RepaintManager is changed during the painting\n-                        \/\/ we may get null here, see #6995769 for details\n-                        if (rect == null) {\n-                            return null;\n-                        }\n+                Rectangle rect = tmpDirtyComponents.get(dirtyComponent);\n+                \/\/ Sometimes when RepaintManager is changed during the painting\n+                \/\/ we may get null here, see #6995769 for details\n+                if (rect == null) {\n+                    continue;\n+                }\n@@ -870,36 +823,22 @@\n-                        int localBoundsH = dirtyComponent.getHeight();\n-                        int localBoundsW = dirtyComponent.getWidth();\n-                        SwingUtilities.computeIntersection(0,\n-                                                           0,\n-                                                           localBoundsW,\n-                                                           localBoundsH,\n-                                                           rect);\n-                        if (dirtyComponent instanceof JComponent) {\n-                            ((JComponent)dirtyComponent).paintImmediately(\n-                                rect.x,rect.y,rect.width, rect.height);\n-                        }\n-                        else if (dirtyComponent.isShowing()) {\n-                            Graphics g = JComponent.safelyGetGraphics(\n-                                    dirtyComponent, dirtyComponent);\n-                            \/\/ If the Graphics goes away, it means someone disposed of\n-                            \/\/ the window, don't do anything.\n-                            if (g != null) {\n-                                g.setClip(rect.x, rect.y, rect.width, rect.height);\n-                                try {\n-                                    dirtyComponent.paint(g);\n-                                } finally {\n-                                    g.dispose();\n-                                }\n-                            }\n-                        }\n-                        \/\/ If the repaintRoot has been set, service it now and\n-                        \/\/ remove any components that are children of repaintRoot.\n-                        if (repaintRoot != null) {\n-                            adjustRoots(repaintRoot, roots, i + 1);\n-                            count.set(roots.size());\n-                            paintManager.isRepaintingRoot = true;\n-                            repaintRoot.paintImmediately(0, 0, repaintRoot.getWidth(),\n-                                                         repaintRoot.getHeight());\n-                            paintManager.isRepaintingRoot = false;\n-                            \/\/ Only service repaintRoot once.\n-                            repaintRoot = null;\n+                int localBoundsH = dirtyComponent.getHeight();\n+                int localBoundsW = dirtyComponent.getWidth();\n+                SwingUtilities.computeIntersection(0,\n+                                                   0,\n+                                                   localBoundsW,\n+                                                   localBoundsH,\n+                                                   rect);\n+                if (dirtyComponent instanceof JComponent) {\n+                    ((JComponent)dirtyComponent).paintImmediately(\n+                        rect.x,rect.y,rect.width, rect.height);\n+                }\n+                else if (dirtyComponent.isShowing()) {\n+                    Graphics g = JComponent.safelyGetGraphics(\n+                            dirtyComponent, dirtyComponent);\n+                    \/\/ If the Graphics goes away, it means someone disposed of\n+                    \/\/ the window, don't do anything.\n+                    if (g != null) {\n+                        g.setClip(rect.x, rect.y, rect.width, rect.height);\n+                        try {\n+                            dirtyComponent.paint(g);\n+                        } finally {\n+                            g.dispose();\n@@ -907,2 +846,0 @@\n-\n-                        return null;\n@@ -910,1 +847,13 @@\n-                }, stack, acc);\n+                }\n+                \/\/ If the repaintRoot has been set, service it now and\n+                \/\/ remove any components that are children of repaintRoot.\n+                if (repaintRoot != null) {\n+                    adjustRoots(repaintRoot, roots, i + 1);\n+                    count.set(roots.size());\n+                    paintManager.isRepaintingRoot = true;\n+                    repaintRoot.paintImmediately(0, 0, repaintRoot.getWidth(),\n+                                                 repaintRoot.getHeight());\n+                    paintManager.isRepaintingRoot = false;\n+                    \/\/ Only service repaintRoot once.\n+                    repaintRoot = null;\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java","additions":47,"deletions":98,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import sun.security.action.GetPropertyAction;\n-import java.security.AccessController;\n@@ -98,1 +96,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -100,2 +97,1 @@\n-            AccessController.doPrivileged(\n-                    new GetPropertyAction(\"swing.legacySortingFTPEnabled\", \"true\")));\n+        System.getProperty(\"swing.legacySortingFTPEnabled\", \"true\"));\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SortingFocusTraversalPolicy.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.GetPropertyAction;\n@@ -44,1 +42,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -50,4 +47,4 @@\n-        SHOW_FROM_DOUBLE_BUFFER = \"true\".equals(AccessController.doPrivileged(\n-              new GetPropertyAction(\"swing.showFromDoubleBuffer\", \"true\")));\n-        ERASE_BACKGROUND = AccessController.doPrivileged(\n-                                 new GetBooleanAction(\"swing.nativeErase\"));\n+        SHOW_FROM_DOUBLE_BUFFER =\n+              \"true\".equals(System.getProperty(\"swing.showFromDoubleBuffer\", \"true\"));\n+        ERASE_BACKGROUND =\n+              \"true\".equals(System.getProperty(\"swing.swing.nativeErase\", \"false\"));\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingPaintEventDispatcher.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-import java.security.AccessController;\n-import sun.security.action.GetPropertyAction;\n@@ -78,1 +76,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -81,3 +78,1 @@\n-            suppressDropSupport = Boolean.parseBoolean(\n-                AccessController.doPrivileged(\n-                    new GetPropertyAction(\"suppressSwingDropSupport\")));\n+            suppressDropSupport = Boolean.getBoolean(\"suppressSwingDropSupport\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingUtilities.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -800,1 +798,0 @@\n-                    @SuppressWarnings(\"removal\")\n@@ -810,8 +807,1 @@\n-                                AccessController.doPrivileged(\n-                                    new PrivilegedAction<Void>() {\n-                                        public Void run() {\n-                                            executorService.shutdown();\n-                                            return null;\n-                                        }\n-                                    }\n-                                );\n+                                executorService.shutdown();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingWorker.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,3 +35,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -212,19 +209,0 @@\n-    \/*\n-     * The timer's AccessControlContext.\n-     *\/\n-     @SuppressWarnings(\"removal\")\n-     private transient volatile AccessControlContext acc =\n-            AccessController.getContext();\n-\n-    \/**\n-      * Returns the acc this timer was constructed with.\n-      *\/\n-     @SuppressWarnings(\"removal\")\n-     final AccessControlContext getAccessControlContext() {\n-       if (acc == null) {\n-           throw new SecurityException(\n-                   \"Timer is missing AccessControlContext\");\n-       }\n-       return acc;\n-     }\n-\n@@ -612,1 +590,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -614,7 +591,2 @@\n-         if (notify.compareAndSet(false, true) || !coalesce) {\n-             AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                 public Void run() {\n-                     SwingUtilities.invokeLater(doPostEvent);\n-                     return null;\n-                }\n-            }, getAccessControlContext());\n+        if (notify.compareAndSet(false, true) || !coalesce) {\n+             SwingUtilities.invokeLater(doPostEvent);\n@@ -633,1 +605,0 @@\n-        this.acc = AccessController.getContext();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/Timer.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -86,1 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -95,9 +92,5 @@\n-                AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-                    String name = \"TimerQueue\";\n-                    Thread timerThread =\n-                        new Thread(threadGroup, this, name, 0, false);\n-                    timerThread.setDaemon(true);\n-                    timerThread.setPriority(Thread.NORM_PRIORITY);\n-                    timerThread.start();\n-                    return null;\n-                });\n+                String name = \"TimerQueue\";\n+                Thread timerThread = new Thread(threadGroup, this, name, 0, false);\n+                timerThread.setDaemon(true);\n+                timerThread.setPriority(Thread.NORM_PRIORITY);\n+                timerThread.start();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/TimerQueue.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-import java.security.PrivilegedAction;\n@@ -344,1 +343,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -347,14 +345,9 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n-            @Override\n-            public Boolean run() {\n-                Class<?> c = Class.forName(thisModule, baseName);\n-                if (c != null) {\n-                    return true;\n-                } else {\n-                    String resourceName = baseName.replace('.', '\/') + \".properties\";\n-                    try (InputStream in = thisModule.getResourceAsStream(resourceName)) {\n-                        return in != null;\n-                    } catch (IOException e) {\n-                        throw new UncheckedIOException(e);\n-                    }\n-                }\n+        Class<?> c = Class.forName(thisModule, baseName);\n+        if (c != null) {\n+            return true;\n+        } else {\n+            String resourceName = baseName.replace('.', '\/') + \".properties\";\n+            try (InputStream in = thisModule.getResourceAsStream(resourceName)) {\n+                return in != null;\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n@@ -362,1 +355,1 @@\n-        });\n+        }\n@@ -1144,1 +1137,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1146,40 +1138,11 @@\n-            \/\/ In order to pick up the security policy in effect at the\n-            \/\/ time of creation we use a doPrivileged with the\n-            \/\/ AccessControlContext that was in place when this was created.\n-            if (acc == null && System.getSecurityManager() != null) {\n-                throw new SecurityException(\"null AccessControlContext\");\n-            }\n-            return AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                public Object run() {\n-                    try {\n-                        Class<?> c;\n-                        Object cl;\n-                        \/\/ See if we should use a separate ClassLoader\n-                        if (table == null || !((cl = table.get(\"ClassLoader\"))\n-                                               instanceof ClassLoader)) {\n-                            cl = Thread.currentThread().\n-                                        getContextClassLoader();\n-                            if (cl == null) {\n-                                \/\/ Fallback to the system class loader.\n-                                cl = ClassLoader.getSystemClassLoader();\n-                            }\n-                        }\n-                        ReflectUtil.checkPackageAccess(className);\n-                        c = Class.forName(className, true, (ClassLoader)cl);\n-                        SwingUtilities2.checkAccess(c.getModifiers());\n-                        if (methodName != null) {\n-                            Class<?>[] types = getClassArray(args);\n-                            Method m = c.getMethod(methodName, types);\n-                            return MethodUtil.invoke(m, c, args);\n-                        } else {\n-                            Class<?>[] types = getClassArray(args);\n-                            Constructor<?> constructor = c.getConstructor(types);\n-                            SwingUtilities2.checkAccess(constructor.getModifiers());\n-                            return constructor.newInstance(args);\n-                        }\n-                    } catch(Exception e) {\n-                        \/\/ Ideally we would throw an exception, unfortunately\n-                        \/\/ often times there are errors as an initial look and\n-                        \/\/ feel is loaded before one can be switched. Perhaps a\n-                        \/\/ flag should be added for debugging, so that if true\n-                        \/\/ the exception would be thrown.\n+            try {\n+                Class<?> c;\n+                Object cl;\n+                \/\/ See if we should use a separate ClassLoader\n+                if (table == null || !((cl = table.get(\"ClassLoader\"))\n+                                       instanceof ClassLoader)) {\n+                    cl = Thread.currentThread().\n+                                getContextClassLoader();\n+                    if (cl == null) {\n+                        \/\/ Fallback to the system class loader.\n+                        cl = ClassLoader.getSystemClassLoader();\n@@ -1187,1 +1150,0 @@\n-                    return null;\n@@ -1189,1 +1151,21 @@\n-            }, acc);\n+                ReflectUtil.checkPackageAccess(className);\n+                c = Class.forName(className, true, (ClassLoader)cl);\n+                SwingUtilities2.checkAccess(c.getModifiers());\n+                if (methodName != null) {\n+                    Class<?>[] types = getClassArray(args);\n+                    Method m = c.getMethod(methodName, types);\n+                    return MethodUtil.invoke(m, c, args);\n+                } else {\n+                    Class<?>[] types = getClassArray(args);\n+                    Constructor<?> constructor = c.getConstructor(types);\n+                    SwingUtilities2.checkAccess(constructor.getModifiers());\n+                    return constructor.newInstance(args);\n+                }\n+            } catch(Exception e) {\n+                \/\/ Ideally we would throw an exception, unfortunately\n+                \/\/ often times there are errors as an initial look and\n+                \/\/ feel is loaded before one can be switched. Perhaps a\n+                \/\/ flag should be added for debugging, so that if true\n+                \/\/ the exception would be thrown.\n+            }\n+            return null;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/UIDefaults.java","additions":42,"deletions":60,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-import java.security.AccessController;\n-\n@@ -58,1 +56,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -295,2 +292,0 @@\n-        \/\/ No need to wrap this in a doPrivileged as it's called from\n-        \/\/ a doPrivileged.\n@@ -653,3 +648,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String systemLAF = AccessController.doPrivileged(\n-                             new GetPropertyAction(\"swing.systemlaf\"));\n+        String systemLAF = System.getProperty(\"swing.systemlaf\");\n@@ -694,3 +687,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String laf = AccessController.doPrivileged(\n-                             new GetPropertyAction(\"swing.crossplatformlaf\"));\n+        String laf = System.getProperty(\"swing.crossplatformlaf\");\n@@ -1285,6 +1276,3 @@\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Object>() {\n-                public Object run() {\n-                    if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n-                        props.put(defaultLAFKey, getSystemLookAndFeelClassName());\n-                    }\n+            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+                props.put(defaultLAFKey, getSystemLookAndFeelClassName());\n+            }\n@@ -1292,2 +1280,2 @@\n-                    try {\n-                        File file = new File(makeSwingPropertiesFilename());\n+            try {\n+                File file = new File(makeSwingPropertiesFilename());\n@@ -1295,10 +1283,5 @@\n-                        if (file.exists()) {\n-                            \/\/ InputStream has been buffered in Properties\n-                            \/\/ class\n-                            try (FileInputStream ins = new FileInputStream(file)) {\n-                                props.load(ins);\n-                            }\n-                        }\n-                    }\n-                    catch (Exception e) {\n-                        \/\/ No such file, or file is otherwise non-readable.\n+                if (file.exists()) {\n+                    \/\/ InputStream has been buffered in Properties\n+                    \/\/ class\n+                    try (FileInputStream ins = new FileInputStream(file)) {\n+                        props.load(ins);\n@@ -1306,10 +1289,0 @@\n-\n-                    \/\/ Check whether any properties were overridden at the\n-                    \/\/ command line.\n-                    checkProperty(props, defaultLAFKey);\n-                    checkProperty(props, auxiliaryLAFsKey);\n-                    checkProperty(props, multiplexingLAFKey);\n-                    checkProperty(props, installedLAFsKey);\n-                    checkProperty(props, disableMnemonicKey);\n-                    \/\/ Don't care about return value.\n-                    return null;\n@@ -1317,1 +1290,13 @@\n-            });\n+            }\n+            catch (Exception e) {\n+                \/\/ No such file, or file is otherwise non-readable.\n+            }\n+\n+            \/\/ Check whether any properties were overridden at the\n+            \/\/ command line.\n+            checkProperty(props, defaultLAFKey);\n+            checkProperty(props, auxiliaryLAFsKey);\n+            checkProperty(props, multiplexingLAFKey);\n+            checkProperty(props, installedLAFsKey);\n+            checkProperty(props, disableMnemonicKey);\n+\n@@ -1323,2 +1308,0 @@\n-        \/\/ No need to do catch the SecurityException here, this runs\n-        \/\/ in a doPrivileged.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/UIManager.java","additions":25,"deletions":42,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -920,7 +918,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String path = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-            public String run() {\n-                return dir.getAbsolutePath();\n-            }\n-        });\n-\n+        String path = dir.getAbsolutePath();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/filechooser\/FileSystemView.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -396,1 +396,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -399,3 +398,1 @@\n-                useOV = java.security.AccessController.doPrivileged(\n-                    new sun.security.action.GetBooleanAction(\n-                        \"swing.html.object\"));\n+                useOV = Boolean.getBoolean(\"swing.html.object\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicHTML.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -197,1 +195,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -215,1 +212,1 @@\n-            AccessController.doPrivileged(invocator);\n+            invocator.run();\n@@ -2085,17 +2082,7 @@\n-        @SuppressWarnings(\"removal\")\n-        byte[] buffer = AccessController.doPrivileged(\n-                                                 new PrivilegedAction<byte[]>() {\n-                public byte[] run() {\n-                    try {\n-                        InputStream resource = BasicLookAndFeel.this.\n-                            getClass().getResourceAsStream(soundFile);\n-                        if (resource == null) {\n-                            return null;\n-                        }\n-                        try (BufferedInputStream in = new BufferedInputStream(resource)) {\n-                            return in.readAllBytes();\n-                        }\n-                    } catch (IOException ioe) {\n-                        System.err.println(ioe.toString());\n-                        return null;\n-                    }\n+        byte[] buffer = null;\n+        try {\n+            InputStream resource = BasicLookAndFeel.this.\n+                getClass().getResourceAsStream(soundFile);\n+            if (resource != null) {\n+                try (BufferedInputStream in = new BufferedInputStream(resource)) {\n+                    buffer = in.readAllBytes();\n@@ -2103,1 +2090,4 @@\n-            });\n+            }\n+        } catch (IOException ioe) {\n+            System.err.println(ioe.toString());\n+        }\n@@ -2193,2 +2183,1 @@\n-    class AWTEventHelper implements AWTEventListener,PrivilegedAction<Object> {\n-        @SuppressWarnings(\"removal\")\n+    class AWTEventHelper implements AWTEventListener {\n@@ -2197,1 +2186,1 @@\n-            AccessController.doPrivileged(this);\n+            run();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicLookAndFeel.java","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -779,1 +779,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -783,12 +782,5 @@\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Object>() {\n-                    public Object run() {\n-                        tk.addAWTEventListener(MouseGrabber.this,\n-                                AWTEvent.MOUSE_EVENT_MASK |\n-                                AWTEvent.MOUSE_MOTION_EVENT_MASK |\n-                                AWTEvent.MOUSE_WHEEL_EVENT_MASK |\n-                                AWTEvent.WINDOW_EVENT_MASK | sun.awt.SunToolkit.GRAB_EVENT_MASK);\n-                        return null;\n-                    }\n-                }\n-            );\n+            tk.addAWTEventListener(MouseGrabber.this,\n+                    AWTEvent.MOUSE_EVENT_MASK |\n+                    AWTEvent.MOUSE_MOTION_EVENT_MASK |\n+                    AWTEvent.MOUSE_WHEEL_EVENT_MASK |\n+                    AWTEvent.WINDOW_EVENT_MASK | sun.awt.SunToolkit.GRAB_EVENT_MASK);\n@@ -815,1 +807,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -819,8 +810,1 @@\n-             java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Object>() {\n-                    public Object run() {\n-                        tk.removeAWTEventListener(MouseGrabber.this);\n-                        return null;\n-                    }\n-                }\n-            );\n+            tk.removeAWTEventListener(MouseGrabber.this);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicPopupMenuUI.java","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -185,3 +184,1 @@\n-        @SuppressWarnings(\"removal\")\n-        Object boldProperty = java.security.AccessController.doPrivileged(\n-            new GetPropertyAction(\"swing.boldMetal\"));\n+        Object boldProperty = System.getProperty(\"swing.boldMetal\");\n@@ -374,1 +371,1 @@\n-                Font f = getPrivilegedFont(mappedType);\n+                Font f = getFontForType(mappedType);\n@@ -388,2 +385,1 @@\n-         * <code>Font.getFont(key)<\/code>, with the exception\n-         * that it is wrapped inside a <code>doPrivileged<\/code> call.\n+         * <code>Font.getFont(key)<\/code>\n@@ -391,9 +387,2 @@\n-        @SuppressWarnings(\"removal\")\n-        protected Font getPrivilegedFont(final int key) {\n-            return java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Font>() {\n-                    public Font run() {\n-                        return Font.getFont(getDefaultPropertyName(key));\n-                    }\n-                }\n-                );\n+        protected Font getFontForType(final int key) {\n+            return Font.getFont(getDefaultPropertyName(key));\n@@ -408,1 +397,1 @@\n-        private boolean[] checkedPrivileged;\n+        private boolean[] checked;\n@@ -412,1 +401,1 @@\n-            checkedPrivileged = new boolean[6];\n+            checked = new boolean[6];\n@@ -419,2 +408,2 @@\n-            if (!checkedPrivileged[type]) {\n-                Font f = getPrivilegedFont(type);\n+            if (!checked[type]) {\n+                Font f = getFontForType(type);\n@@ -422,1 +411,1 @@\n-                checkedPrivileged[type] = true;\n+                checked[type] = true;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/DefaultMetalTheme.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.security.AccessController;\n@@ -148,3 +147,1 @@\n-                @SuppressWarnings(\"removal\")\n-                String systemFonts = AccessController.doPrivileged(\n-                    new GetPropertyAction(\"swing.useSystemFontSettings\"));\n+                String systemFonts = System.getProperty(\"swing.useSystemFontSettings\");\n@@ -1665,3 +1662,1 @@\n-                @SuppressWarnings(\"removal\")\n-                String theme = AccessController.doPrivileged(\n-                               new GetPropertyAction(\"swing.metalTheme\"));\n+                String theme = System.getProperty(\"swing.metalTheme\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalLookAndFeel.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -150,8 +150,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String o = java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<String>() {\n-                    public String run() {\n-                        return System.getProperty(I18NProperty);\n-                    }\n-                }\n-            );\n+            String o = System.getProperty(I18NProperty);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/AbstractDocument.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -3972,11 +3969,6 @@\n-            return AccessController.doPrivileged(\n-                    new PrivilegedAction<Boolean>() {\n-                        public Boolean run() {\n-                            try {\n-                                type.getDeclaredMethod(\"processInputMethodEvent\", InputMethodEvent.class);\n-                                return Boolean.TRUE;\n-                            } catch (NoSuchMethodException exception) {\n-                                return Boolean.FALSE;\n-                            }\n-                        }\n-                    });\n+            try {\n+                type.getDeclaredMethod(\"processInputMethodEvent\", InputMethodEvent.class);\n+                return Boolean.TRUE;\n+            } catch (NoSuchMethodException exception) {\n+                return Boolean.FALSE;\n+            }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/JTextComponent.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -842,1 +840,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -847,9 +844,3 @@\n-        return AccessController\n-                .doPrivileged(new PrivilegedAction<Boolean>() {\n-                    @Override\n-                    public Boolean run() {\n-                        return isFPMethodOverridden(methodName, className,\n-                                                    methodArgs.getMethodArguments(false),\n-                                                    methodArgs.getMethodArguments(true));\n-                    }\n-                });\n+        return isFPMethodOverridden(methodName, className,\n+                                    methodArgs.getMethodArguments(false),\n+                                    methodArgs.getMethodArguments(true));\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/PlainView.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -474,3 +472,0 @@\n-     * If this is called on 1.2 the loading will occur under the\n-     * protection of a doPrivileged call to allow the HTMLEditorKit\n-     * to function when used in an applet.\n@@ -482,1 +477,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -484,6 +478,1 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<InputStream>() {\n-                    public InputStream run() {\n-                        return HTMLEditorKit.class.getResourceAsStream(name);\n-                    }\n-                });\n+        return HTMLEditorKit.class.getResourceAsStream(name);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/HTMLEditorKit.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -134,1 +132,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -136,6 +133,1 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<InputStream>() {\n-                    public InputStream run() {\n-                        return ParserDelegator.class.getResourceAsStream(name);\n-                    }\n-                });\n+        return ParserDelegator.class.getResourceAsStream(name);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/parser\/ParserDelegator.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,2 +40,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -647,7 +645,1 @@\n-        @SuppressWarnings(\"removal\")\n-        InputStream charsetStream = AccessController.doPrivileged(\n-                new PrivilegedAction<InputStream>() {\n-                    public InputStream run() {\n-                        return RTFReader.class.getResourceAsStream(\"charsets\/\" + name + \".txt\");\n-                    }\n-                });\n+        InputStream charsetStream = RTFReader.class.getResourceAsStream(\"charsets\/\" + name + \".txt\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/rtf\/RTFReader.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -64,4 +64,6 @@\n-                text = new WeakReference<JTextField>(new JTextField(\"Text\"));\n-                p = new WeakReference<JPanel>(new JPanel(new FlowLayout()));\n-                p.get().add(text.get());\n-                frame.add(p.get());\n+                JTextField tf = new JTextField(\"Text\");\n+                text = new WeakReference<JTextField>(tf);\n+                JPanel jp = new JPanel(new FlowLayout());\n+                p = new WeakReference<JPanel>(jp);\n+                jp.add(tf);\n+                frame.add(jp);\n@@ -82,0 +84,2 @@\n+                \/\/ after this the JTextField as well as the JPanel\n+                \/\/ are eligible to be GC'd\n@@ -88,1 +92,5 @@\n-        Thread.sleep(text.get().getCaret().getBlinkRate() * 2);\n+        JTextField tf = text.get();\n+        if (tf != null) {\n+            Thread.sleep(tf.getCaret().getBlinkRate() * 2);\n+            tf = null; \/\/ allow to be GCed\n+        }\n","filename":"test\/jdk\/java\/awt\/im\/memoryleak\/InputContextMemoryLeakTest.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"}]}