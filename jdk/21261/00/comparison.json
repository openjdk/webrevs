{"files":[{"patch":"@@ -179,1 +179,10 @@\n-            return sourceToSnippets(userSource);\n+            List<Snippet> result = sourceToSnippetsWithWrappers(userSource);\n+            result.forEach(snippet -> {\n+                if (snippet.diagnostics() == null || snippet.diagnostics().isEmpty()) {\n+                    \/\/if no better diagnostics set yet, do trial compilation, and\n+                    \/\/set diagnostic found:\n+                    DiagList fullDiagnostics = state.taskFactory.analyze(snippet.outerWrap(), AnalyzeTask::getDiagnostics);\n+                    snippet.setDiagnostics(fullDiagnostics);\n+                }\n+            });\n+            return result;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Eval.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -681,0 +681,6 @@\n+     *\n+     * <p>This method will return best-effort diagnostics for snippets returned\n+     * from {@link SourceCodeAnalysis#sourceToSnippets(java.lang.String) }. The\n+     * diagnostics returned for such snippets may differ from diagnostics provided\n+     * after the snippet is {@link #eval(java.lang.String) }-ed.\n+     *\n@@ -689,1 +695,1 @@\n-        return checkValidSnippet(snippet).diagnostics().stream();\n+        return checkValidSnippet(snippet, true).diagnostics().stream();\n@@ -904,0 +910,12 @@\n+        return checkValidSnippet(sn, false);\n+    }\n+\n+    \/**\n+     * Check a Snippet parameter coming from the API user\n+     * @param sn the Snippet to check\n+     * @param acceptUnassociated  accept snippets that are unassociated\n+     * @throws NullPointerException if Snippet parameter is null\n+     * @throws IllegalArgumentException if Snippet is not from this JShell\n+     * @return the input Snippet (for chained calls)\n+     *\/\n+    private Snippet checkValidSnippet(Snippet sn, boolean acceptUnassociated) {\n@@ -907,1 +925,1 @@\n-            if (sn.key().state() != this || sn.id() == Snippet.UNASSOCIATED_ID) {\n+            if (sn.key().state() != this || (!acceptUnassociated && sn.id() == Snippet.UNASSOCIATED_ID)) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/JShell.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -148,1 +148,2 @@\n-     * methods will throw an {@code IllegalArgumentException}.\n+     * methods will throw an {@code IllegalArgumentException}, unless otherwise\n+     * noted.\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysis.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8182270\n+ * @bug 8182270 8341176\n@@ -35,0 +35,1 @@\n+import java.util.stream.Stream;\n@@ -37,0 +38,1 @@\n+import jdk.jshell.Diag;\n@@ -55,0 +57,1 @@\n+import jdk.jshell.SourceCodeAnalysis.SnippetWrapper;\n@@ -144,0 +147,43 @@\n+    public void testDiagnosticsForSourceSnippet() {\n+        Snippet sn;\n+        sn = assertSnippet(\"unknown()\", UNKNOWN_SUBKIND);\n+        assertDiagnostics(sn, \"0-7:compiler.err.cant.resolve.location.args\");\n+        sn = assertSnippet(\"new String(null, )\", UNKNOWN_SUBKIND);\n+        assertDiagnostics(sn, \"17-17:compiler.err.illegal.start.of.expr\");\n+        sn = assertSnippet(\"1 + \", UNKNOWN_SUBKIND);\n+        assertDiagnostics(sn, \"3-3:compiler.err.premature.eof\");\n+        sn = assertSnippet(\"class C {\", UNKNOWN_SUBKIND);\n+        assertDiagnostics(sn, \"9-9:compiler.err.premature.eof\");\n+        sn = assertSnippet(\"class C {}\", CLASS_SUBKIND);\n+        assertDiagnostics(sn);\n+        sn = assertSnippet(\"void t() { throw new java.io.IOException(); }\", METHOD_SUBKIND);\n+        assertDiagnostics(sn, \"11-43:compiler.err.unreported.exception.need.to.catch.or.throw\");\n+        sn = assertSnippet(\"void t() { unknown(); }\", METHOD_SUBKIND);\n+        assertDiagnostics(sn, \"11-18:compiler.err.cant.resolve.location.args\");\n+        sn = assertSnippet(\"import unknown.unknown;\", SINGLE_TYPE_IMPORT_SUBKIND);\n+        assertDiagnostics(sn, \"7-22:compiler.err.doesnt.exist\");\n+    }\n+\n+    public void testSnippetWrapper() {\n+        SourceCodeAnalysis analysis = state.sourceCodeAnalysis();\n+        Snippet sn;\n+        String code = \"unknown()\";\n+        sn = assertSnippet(code, UNKNOWN_SUBKIND);\n+        SnippetWrapper wrapper = analysis.wrapper(sn);\n+        String wrapped = wrapper.wrapped();\n+        assertEquals(wrapped, \"\"\"\n+                              package REPL;\n+\n+                              class $JShell$DOESNOTMATTER {\n+                                  public static java.lang.Object do_it$() throws java.lang.Throwable {\n+                                      return unknown();\n+                                  }\n+                              }\n+                              \"\"\");\n+        for (int pos = 0; pos < code.length(); pos++) {\n+            int wrappedPos = wrapper.sourceToWrappedPosition(pos);\n+            assertEquals(wrapped.charAt(wrappedPos), code.charAt(pos));\n+            assertEquals(wrapper.wrappedToSourcePosition(wrappedPos), pos);\n+        }\n+    }\n+\n@@ -162,0 +208,10 @@\n+\n+    private String diagToString(Diag d) {\n+        return d.getStartPosition() + \"-\" + d.getEndPosition() + \":\" + d.getCode();\n+    }\n+\n+    private void assertDiagnostics(Snippet s, String... expectedDiags) {\n+        List<String> actual = state.diagnostics(s).map(this::diagToString).toList();\n+        List<String> expected = List.of(expectedDiags);\n+        assertEquals(actual, expected);\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/AnalyzeSnippetTest.java","additions":58,"deletions":2,"binary":false,"changes":60,"status":"modified"}]}