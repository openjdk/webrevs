[{"commit":{"message":"8350748: VectorAPI: Method \"checkMaskFromIndexSize\" should be force inlined\n\nMethod `checkMaskFromIndexSize` is called by some vector masked APIs like\n`fromArray\/intoArray\/fromMemorySegment\/...`. It is used to check whether\nthe index of any active lanes in a mask will reach out of the boundary\nof the given Array\/MemorySegment. This function should be force inlined,\nor a VectorMask object is generated once the function call is not inlined\nby C2 compiler, which affects the API performance a lot.\n\nThis patch changed to call the `VectorMask.checkFromIndexSize` method\ndirectly inside of these APIs instead of `checkMaskFromIndexSize`. Since\nit has added the `@ForceInline` annotation already, it will be inlined\nand intrinsified by C2. And then the expected vector instructions can be\ngenerated. With this change, the unused `checkMaskFromIndexSize` can be\nremoved.\n\nPerformance of some JMH benchmarks can improve up to 14x on a NVIDIA\nGrace CPU (AArch64 SVE2, 128-bit vectors). We can also observe the similar\nperformance improvement on a Intel CPU which supports AVX512.\n\nFollowing is the performance data on Grace:\n\n```\nBenchmark                                             Mode  Cnt  Units     Before      After   Gain\nLoadMaskedIOOBEBenchmark.byteLoadArrayMaskIOOBE      thrpt   30  ops\/ms  31544.304  31610.598  1.002\nLoadMaskedIOOBEBenchmark.doubleLoadArrayMaskIOOBE    thrpt   30  ops\/ms   3896.202   3903.249  1.001\nLoadMaskedIOOBEBenchmark.floatLoadArrayMaskIOOBE     thrpt   30  ops\/ms    570.415   7174.320  12.57\nLoadMaskedIOOBEBenchmark.intLoadArrayMaskIOOBE       thrpt   30  ops\/ms    566.694   7193.520  12.69\nLoadMaskedIOOBEBenchmark.longLoadArrayMaskIOOBE      thrpt   30  ops\/ms   3899.269   3878.258  0.994\nLoadMaskedIOOBEBenchmark.shortLoadArrayMaskIOOBE     thrpt   30  ops\/ms   1134.301  16053.847  14.15\nStoreMaskedIOOBEBenchmark.byteStoreArrayMaskIOOBE    thrpt   30  ops\/ms  26449.558  28699.480  1.085\nStoreMaskedIOOBEBenchmark.doubleStoreArrayMaskIOOBE  thrpt   30  ops\/ms   1922.167   5781.077  3.007\nStoreMaskedIOOBEBenchmark.floatStoreArrayMaskIOOBE   thrpt   30  ops\/ms   3784.190  11789.276  3.115\nStoreMaskedIOOBEBenchmark.intStoreArrayMaskIOOBE     thrpt   30  ops\/ms   3694.082  15633.547  4.232\nStoreMaskedIOOBEBenchmark.longStoreArrayMaskIOOBE    thrpt   30  ops\/ms   1966.956   6049.790  3.075\nStoreMaskedIOOBEBenchmark.shortStoreArrayMaskIOOBE   thrpt   30  ops\/ms   7647.309  27412.387  3.584\n```"},"files":[{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template"}],"sha":"09b4ae313edae2fc5ef78b9bd6824ca4b09ebcd6"}]