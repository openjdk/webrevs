{"files":[{"patch":"@@ -79,0 +79,1 @@\n+        libjava\/nio\/ch \\\n@@ -90,1 +91,1 @@\n-    LIBS_windows := advapi32.lib mswsock.lib ws2_32.lib, \\\n+    LIBS_windows := advapi32.lib ws2_32.lib, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+    EXTRA_HEADER_DIRS := \\\n+        libjava\/nio\/ch, \\\n@@ -65,1 +67,1 @@\n-    LIBS_linux := $(LIBDL), \\\n+    LIBS_linux := $(LIBDL) -lpthread, \\\n@@ -69,0 +71,1 @@\n+        -framework CoreServices \\\n@@ -71,1 +74,1 @@\n-    LIBS_windows := advapi32.lib ole32.lib shell32.lib version.lib, \\\n+    LIBS_windows := advapi32.lib mswsock.lib ole32.lib shell32.lib version.lib ws2_32.lib, \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-          java.base:libnio \\\n-          java.base:libnio\/ch, \\\n+          java.base:libjava\/nio \\\n+          java.base:libjava\/nio\/ch, \\\n","filename":"make\/modules\/jdk.sctp\/Lib.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPoll.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-            long fds = IOUtil.makePipe(true);\n+            long fds = NIOUtil.makePipe(true);\n@@ -139,1 +139,1 @@\n-                IOUtil.write1(sp[1], (byte)0);\n+                NIOUtil.write1(sp[1], (byte)0);\n@@ -222,1 +222,1 @@\n-                                        nread = IOUtil.drain1(sp[0]);\n+                                        nread = NIOUtil.drain1(sp[0]);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollPort.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private static final int NUM_EPOLLEVENTS = Math.min(IOUtil.fdLimit(), 1024);\n+    private static final int NUM_EPOLLEVENTS = Math.min(NIOUtil.fdLimit(), 1024);\n@@ -82,1 +82,1 @@\n-            IOUtil.configureBlocking(IOUtil.newFD(eventfd.efd()), false);\n+            NIOUtil.configureBlocking(NIOUtil.newFD(eventfd.efd()), false);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        IOUtil.drain(efd);\n+        NIOUtil.drain(efd);\n@@ -71,1 +71,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EventFD.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-        IOUtil.load();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/FileDispatcherImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-        jdk.internal.loader.BootLoader.loadLibrary(\"nio\");\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxNativeDispatcher.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"","filename":"src\/java.base\/linux\/native\/libjava\/nio\/ch\/FileDispatcherImpl.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/linux\/native\/libnio\/ch\/FileDispatcherImpl.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/linux\/native\/libjava\/nio\/fs\/LinuxNativeDispatcher.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/linux\/native\/libnio\/fs\/LinuxNativeDispatcher.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/linux\/native\/libjava\/nio\/fs\/LinuxWatchService.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/linux\/native\/libnio\/fs\/LinuxWatchService.c","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-            long fds = IOUtil.makePipe(true);\n+            long fds = NIOUtil.makePipe(true);\n@@ -136,1 +136,1 @@\n-                IOUtil.write1(sp[1], (byte)0);\n+                NIOUtil.write1(sp[1], (byte)0);\n@@ -223,1 +223,1 @@\n-                                        nread = IOUtil.drain1(sp[0]);\n+                                        nread = NIOUtil.drain1(sp[0]);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueuePort.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-            long fds = IOUtil.makePipe(false);\n+            long fds = NIOUtil.makePipe(false);\n@@ -326,1 +326,1 @@\n-                    IOUtil.write1(fd1, (byte)0);\n+                    NIOUtil.write1(fd1, (byte)0);\n@@ -338,1 +338,1 @@\n-            IOUtil.drain(fd0);\n+            NIOUtil.drain(fd0);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueueSelectorImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"","filename":"src\/java.base\/macosx\/native\/libjava\/nio\/ch\/FileDispatcherImpl.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/macosx\/native\/libnio\/ch\/FileDispatcherImpl.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/macosx\/native\/libjava\/nio\/fs\/BsdFileSystem.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdFileSystem.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/macosx\/native\/libjava\/nio\/fs\/BsdNativeDispatcher.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdNativeDispatcher.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/macosx\/native\/libjava\/nio\/fs\/MacOSXNativeDispatcher.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/macosx\/native\/libnio\/fs\/MacOSXNativeDispatcher.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/macosx\/native\/libjava\/nio\/fs\/UTIFileTypeDetector.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/macosx\/native\/libnio\/fs\/UTIFileTypeDetector.c","status":"renamed"},{"patch":"@@ -1147,1 +1147,1 @@\n-                IOUtil.configureBlocking(fd, block);\n+                NIOUtil.configureBlocking(fd, block);\n@@ -1160,1 +1160,1 @@\n-                IOUtil.configureBlocking(fd, block);\n+                NIOUtil.configureBlocking(fd, block);\n@@ -1177,1 +1177,1 @@\n-                IOUtil.configureBlocking(fd, false);\n+                NIOUtil.configureBlocking(fd, false);\n@@ -1415,1 +1415,1 @@\n-                IOUtil.configureBlocking(newfd, false);\n+                NIOUtil.configureBlocking(newfd, false);\n@@ -1962,1 +1962,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -562,32 +562,0 @@\n-    public static FileDescriptor newFD(int i) {\n-        FileDescriptor fd = new FileDescriptor();\n-        setfdVal(fd, i);\n-        return fd;\n-    }\n-\n-    static native boolean randomBytes(byte[] someBytes);\n-\n-    \/**\n-     * Returns two file descriptors for a pipe encoded in a long.\n-     * The read end of the pipe is returned in the high 32 bits,\n-     * while the write end is returned in the low 32 bits.\n-     *\/\n-    static native long makePipe(boolean blocking) throws IOException;\n-\n-    static native int write1(int fd, byte b) throws IOException;\n-\n-    \/**\n-     * Read and discard all bytes.\n-     *\/\n-    static native boolean drain(int fd) throws IOException;\n-\n-    \/**\n-     * Read and discard at most one byte\n-     * @return the number of bytes read or IOS_INTERRUPTED\n-     *\/\n-    static native int drain1(int fd) throws IOException;\n-\n-    public static native void configureBlocking(FileDescriptor fd,\n-                                                boolean blocking)\n-        throws IOException;\n-\n@@ -598,3 +566,1 @@\n-    static native int fdLimit();\n-\n-    static native int iovMax();\n+    private static native int iovMax();\n@@ -602,1 +568,1 @@\n-    static native long writevMax();\n+    private static native long writevMax();\n@@ -604,1 +570,1 @@\n-    static native void initIDs();\n+    private static native void initIDs();\n@@ -607,1 +573,2 @@\n-     * Used to trigger loading of native libraries\n+     * Used to trigger initialization of static final fields and of\n+     * FileDescriptor field IDs in the native layer\n@@ -612,2 +579,1 @@\n-        jdk.internal.loader.BootLoader.loadLibrary(\"net\");\n-        jdk.internal.loader.BootLoader.loadLibrary(\"nio\");\n+        \/\/ Initialize FileDescriptor field IDs in the native layer\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":6,"deletions":40,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.ch;\n+\n+import java.io.FileDescriptor;\n+import java.io.IOException;\n+\n+\/**\n+ * File-descriptor based I\/O utilities that are shared by NIO classes.\n+ *\/\n+\n+public final class NIOUtil {\n+\n+    private NIOUtil() { }                \/\/ No instantiation\n+\n+    public static FileDescriptor newFD(int i) {\n+        FileDescriptor fd = new FileDescriptor();\n+        IOUtil.setfdVal(fd, i);\n+        return fd;\n+    }\n+\n+    \/**\n+     * Returns two file descriptors for a pipe encoded in a long.\n+     * The read end of the pipe is returned in the high 32 bits,\n+     * while the write end is returned in the low 32 bits.\n+     *\/\n+    static native long makePipe(boolean blocking) throws IOException;\n+\n+    static native int write1(int fd, byte b) throws IOException;\n+\n+    \/**\n+     * Read and discard all bytes.\n+     *\/\n+    static native boolean drain(int fd) throws IOException;\n+\n+    \/**\n+     * Read and discard at most one byte\n+     * @return the number of bytes read or IOS_INTERRUPTED\n+     *\/\n+    static native int drain1(int fd) throws IOException;\n+\n+    public static native void configureBlocking(FileDescriptor fd,\n+                                                boolean blocking)\n+        throws IOException;\n+\n+    static native int fdLimit();\n+\n+    \/**\n+     * Used to trigger loading of native libraries\n+     *\/\n+    public static void load() { }\n+\n+    static {\n+        jdk.internal.loader.BootLoader.loadLibrary(\"net\");\n+        jdk.internal.loader.BootLoader.loadLibrary(\"nio\");\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NIOUtil.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -344,1 +344,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NativeSocketAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -497,1 +497,1 @@\n-        return IOUtil.newFD(socket0(preferIPv6, stream, false, FAST_LOOPBACK));\n+        return NIOUtil.newFD(socket0(preferIPv6, stream, false, FAST_LOOPBACK));\n@@ -507,1 +507,1 @@\n-        return IOUtil.newFD(socket0(preferIPv6, stream, true, FAST_LOOPBACK));\n+        return NIOUtil.newFD(socket0(preferIPv6, stream, true, FAST_LOOPBACK));\n@@ -779,1 +779,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-            IOUtil.configureBlocking(fd, false);\n+            NIOUtil.configureBlocking(fd, false);\n@@ -757,1 +757,1 @@\n-            IOUtil.configureBlocking(newfd, true);\n+            NIOUtil.configureBlocking(newfd, true);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-            IOUtil.configureBlocking(newfd, true);\n+            NIOUtil.configureBlocking(newfd, true);\n@@ -514,1 +514,1 @@\n-                IOUtil.configureBlocking(fd, block);\n+                NIOUtil.configureBlocking(fd, block);\n@@ -528,1 +528,1 @@\n-                IOUtil.configureBlocking(fd, block);\n+                NIOUtil.configureBlocking(fd, block);\n@@ -544,1 +544,1 @@\n-                IOUtil.configureBlocking(fd, false);\n+                NIOUtil.configureBlocking(fd, false);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -728,1 +728,1 @@\n-                IOUtil.configureBlocking(fd, block);\n+                NIOUtil.configureBlocking(fd, block);\n@@ -742,1 +742,1 @@\n-                IOUtil.configureBlocking(fd, block);\n+                NIOUtil.configureBlocking(fd, block);\n@@ -758,1 +758,1 @@\n-                IOUtil.configureBlocking(fd, false);\n+                NIOUtil.configureBlocking(fd, false);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        return IOUtil.newFD(socket0());\n+        return NIOUtil.newFD(socket0());\n@@ -164,1 +164,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"","filename":"src\/java.base\/share\/native\/libjava\/nio\/ch\/nio.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/native\/libnio\/ch\/nio.h","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,4 +38,0 @@\n-    static {\n-        IOUtil.load();\n-    }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/DatagramDispatcher.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,1 +268,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/InheritedChannel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,0 @@\n-        IOUtil.load();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/NativeThread.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-        long pipeFds = IOUtil.makePipe(true);\n+        long pipeFds = NIOUtil.makePipe(true);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            long fds = IOUtil.makePipe(false);\n+            long fds = NIOUtil.makePipe(false);\n@@ -244,1 +244,1 @@\n-                    IOUtil.write1(fd1, (byte)0);\n+                    NIOUtil.write1(fd1, (byte)0);\n@@ -256,1 +256,1 @@\n-            IOUtil.drain(fd0);\n+            NIOUtil.drain(fd0);\n@@ -387,1 +387,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PollSelectorImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-                IOUtil.configureBlocking(fd, false);\n+                NIOUtil.configureBlocking(fd, false);\n@@ -222,1 +222,1 @@\n-                    IOUtil.configureBlocking(fd, block);\n+                    NIOUtil.configureBlocking(fd, block);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SinkChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,4 +90,0 @@\n-\n-    static {\n-        IOUtil.load();\n-    }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SocketDispatcher.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-                IOUtil.configureBlocking(fd, false);\n+                NIOUtil.configureBlocking(fd, false);\n@@ -222,1 +222,1 @@\n-                    IOUtil.configureBlocking(fd, block);\n+                    NIOUtil.configureBlocking(fd, block);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SourceChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-            IOUtil.configureBlocking(fd, false);\n+            NIOUtil.configureBlocking(fd, false);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixAsynchronousServerSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-            IOUtil.configureBlocking(fd, false);\n+            NIOUtil.configureBlocking(fd, false);\n@@ -125,1 +125,1 @@\n-        IOUtil.configureBlocking(fd, false);\n+        NIOUtil.configureBlocking(fd, false);\n@@ -767,1 +767,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixAsynchronousSocketChannelImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDispatcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -563,1 +563,0 @@\n-        jdk.internal.loader.BootLoader.loadLibrary(\"nio\");\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <sys\/types.h>\n+#include <string.h>\n+#include <sys\/resource.h>\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+#include \"sun_nio_ch_IOUtil.h\"\n+#include \"java_lang_Integer.h\"\n+#include \"java_lang_Long.h\"\n+#include \"nio.h\"\n+#include \"nio_util.h\"\n+\n+static jfieldID fd_fdID;        \/* for jint 'fd' in java.io.FileDescriptor *\/\n+\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_IOUtil_initIDs(JNIEnv *env, jclass clazz)\n+{\n+    CHECK_NULL(clazz = (*env)->FindClass(env, \"java\/io\/FileDescriptor\"));\n+    CHECK_NULL(fd_fdID = (*env)->GetFieldID(env, clazz, \"fd\", \"I\"));\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_IOUtil_fdVal(JNIEnv *env, jclass clazz, jobject fdo)\n+{\n+    return (*env)->GetIntField(env, fdo, fd_fdID);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_IOUtil_setfdVal(JNIEnv *env, jclass clazz, jobject fdo, jint val)\n+{\n+    setfdval(env, fdo, val);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_IOUtil_iovMax(JNIEnv *env, jclass this)\n+{\n+    jlong iov_max = sysconf(_SC_IOV_MAX);\n+    if (iov_max == -1)\n+        iov_max = 16;\n+    return (jint)iov_max;\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n+{\n+#if defined(MACOSX) || defined(__linux__)\n+    \/\/\n+    \/\/ The man pages of writev() on both Linux and macOS specify this\n+    \/\/ constraint on the sum of all byte lengths in the iovec array:\n+    \/\/\n+    \/\/ [EINVAL] The sum of the iov_len values in the iov array\n+    \/\/          overflows a 32-bit integer.\n+    \/\/\n+    \/\/ As of macOS 11 Big Sur, Darwin version 20, writev() started to\n+    \/\/ actually enforce the constraint which had been previously ignored.\n+    \/\/\n+    \/\/ In practice on Linux writev() has been observed not to write more\n+    \/\/ than 0x7fff0000 (aarch64) or 0x7ffff000 (x64) bytes in one call.\n+    \/\/\n+    return java_lang_Integer_MAX_VALUE;\n+#else\n+    return java_lang_Long_MAX_VALUE;\n+#endif\n+}\n+\n+\/\/ Declared in nio_util.h for use elsewhere in NIO\n+\n+JNIEXPORT jint\n+convertReturnVal(JNIEnv *env, jint n, jboolean reading)\n+{\n+    if (n > 0) \/\/ Number of bytes written\n+        return n;\n+    else if (n == 0) {\n+        if (reading) {\n+            return IOS_EOF; \/\/ EOF is -1 in javaland\n+        } else {\n+            return 0;\n+        }\n+    }\n+    else if (errno == EAGAIN || errno == EWOULDBLOCK)\n+        return IOS_UNAVAILABLE;\n+    else if (errno == EINTR)\n+        return IOS_INTERRUPTED;\n+    else {\n+        const char *msg = reading ? \"Read failed\" : \"Write failed\";\n+        JNU_ThrowIOExceptionWithLastError(env, msg);\n+        return IOS_THROWN;\n+    }\n+}\n+\n+\/\/ Declared in nio_util.h for use elsewhere in NIO\n+\n+JNIEXPORT jlong\n+convertLongReturnVal(JNIEnv *env, jlong n, jboolean reading)\n+{\n+    if (n > 0) \/\/ Number of bytes written\n+        return n;\n+    else if (n == 0) {\n+        if (reading) {\n+            return IOS_EOF; \/\/ EOF is -1 in javaland\n+        } else {\n+            return 0;\n+        }\n+    }\n+    else if (errno == EAGAIN || errno == EWOULDBLOCK)\n+        return IOS_UNAVAILABLE;\n+    else if (errno == EINTR)\n+        return IOS_INTERRUPTED;\n+    else {\n+        const char *msg = reading ? \"Read failed\" : \"Write failed\";\n+        JNU_ThrowIOExceptionWithLastError(env, msg);\n+        return IOS_THROWN;\n+    }\n+}\n+\n+JNIEXPORT jint\n+fdval(JNIEnv *env, jobject fdo)\n+{\n+    return (*env)->GetIntField(env, fdo, fd_fdID);\n+}\n+\n+JNIEXPORT void\n+setfdval(JNIEnv *env, jobject fdo, jint val) {\n+    (*env)->SetIntField(env, fdo, fd_fdID, val);\n+}\n","filename":"src\/java.base\/unix\/native\/libjava\/IOUtil.c","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"","filename":"src\/java.base\/unix\/native\/libjava\/nio\/MappedMemoryUtils.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/unix\/native\/libnio\/MappedMemoryUtils.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/unix\/native\/libjava\/nio\/ch\/FileKey.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileKey.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/unix\/native\/libjava\/nio\/ch\/NativeThread.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/unix\/native\/libnio\/ch\/NativeThread.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/unix\/native\/libjava\/nio\/ch\/UnixFileDispatcherImpl.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixFileDispatcherImpl.c","status":"renamed"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+#include <errno.h>\n+#include <sys\/types.h>\n+#include <sys\/un.h>\n+\n+\/* NIO utility procedures *\/\n+\n+\n+\/* Defined in IOUtil.c *\/\n+\n+jint fdval(JNIEnv *env, jobject fdo);\n+void setfdval(JNIEnv *env, jobject fdo, jint value);\n+\n+jint convertReturnVal(JNIEnv *env, jint n, jboolean reading);\n+jlong convertLongReturnVal(JNIEnv *env, jlong n, jboolean reading);\n+\n","filename":"src\/java.base\/unix\/native\/libjava\/nio\/ch\/nio_util.h","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"","filename":"src\/java.base\/unix\/native\/libjava\/nio\/fs\/UnixFileSystem.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixFileSystem.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/unix\/native\/libjava\/nio\/fs\/UnixNativeDispatcher.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,2 @@\n+#include \"Net.h\"\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/DatagramChannelImpl.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,261 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <sys\/types.h>\n-#include <string.h>\n-#include <sys\/resource.h>\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm.h\"\n-#include \"jlong.h\"\n-#include \"sun_nio_ch_IOUtil.h\"\n-#include \"java_lang_Integer.h\"\n-#include \"java_lang_Long.h\"\n-#include \"nio.h\"\n-#include \"nio_util.h\"\n-\n-static jfieldID fd_fdID;        \/* for jint 'fd' in java.io.FileDescriptor *\/\n-\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_IOUtil_initIDs(JNIEnv *env, jclass clazz)\n-{\n-    CHECK_NULL(clazz = (*env)->FindClass(env, \"java\/io\/FileDescriptor\"));\n-    CHECK_NULL(fd_fdID = (*env)->GetFieldID(env, clazz, \"fd\", \"I\"));\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_sun_nio_ch_IOUtil_randomBytes(JNIEnv *env, jclass clazz,\n-                                  jbyteArray randArray)\n-{\n-    JNU_ThrowByName(env, \"java\/lang\/UnsupportedOperationException\", NULL);\n-    return JNI_FALSE;\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_fdVal(JNIEnv *env, jclass clazz, jobject fdo)\n-{\n-    return (*env)->GetIntField(env, fdo, fd_fdID);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_IOUtil_setfdVal(JNIEnv *env, jclass clazz, jobject fdo, jint val)\n-{\n-    setfdval(env, fdo, val);\n-}\n-\n-static int\n-configureBlocking(int fd, jboolean blocking)\n-{\n-    int flags = fcntl(fd, F_GETFL);\n-    int newflags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n-\n-    return (flags == newflags) ? 0 : fcntl(fd, F_SETFL, newflags);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_IOUtil_configureBlocking(JNIEnv *env, jclass clazz,\n-                                         jobject fdo, jboolean blocking)\n-{\n-    if (configureBlocking(fdval(env, fdo), blocking) < 0)\n-        JNU_ThrowIOExceptionWithLastError(env, \"Configure blocking failed\");\n-}\n-\n-JNIEXPORT jlong JNICALL\n-Java_sun_nio_ch_IOUtil_makePipe(JNIEnv *env, jobject this, jboolean blocking)\n-{\n-    int fd[2];\n-\n-    if (pipe(fd) < 0) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"Pipe failed\");\n-        return 0;\n-    }\n-    if (blocking == JNI_FALSE) {\n-        if ((configureBlocking(fd[0], JNI_FALSE) < 0)\n-            || (configureBlocking(fd[1], JNI_FALSE) < 0)) {\n-            JNU_ThrowIOExceptionWithLastError(env, \"Configure blocking failed\");\n-            close(fd[0]);\n-            close(fd[1]);\n-            return 0;\n-        }\n-    }\n-    return ((jlong) fd[0] << 32) | (jlong) fd[1];\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_write1(JNIEnv *env, jclass cl, jint fd, jbyte b)\n-{\n-    char c = (char)b;\n-    return convertReturnVal(env, write(fd, &c, 1), JNI_FALSE);\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_sun_nio_ch_IOUtil_drain(JNIEnv *env, jclass cl, jint fd)\n-{\n-    char buf[16];\n-    int tn = 0;\n-\n-    for (;;) {\n-        int n = read(fd, buf, sizeof(buf));\n-        tn += n;\n-        if ((n < 0) && (errno != EAGAIN && errno != EWOULDBLOCK))\n-            JNU_ThrowIOExceptionWithLastError(env, \"Drain\");\n-        if (n == (int)sizeof(buf))\n-            continue;\n-        return (tn > 0) ? JNI_TRUE : JNI_FALSE;\n-    }\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_drain1(JNIEnv *env, jclass cl, jint fd)\n-{\n-    int res;\n-    char buf[1];\n-\n-    res = read(fd, buf, 1);\n-    if (res < 0) {\n-        if (errno == EAGAIN || errno == EWOULDBLOCK) {\n-            res = 0;\n-        } else if (errno == EINTR) {\n-            return IOS_INTERRUPTED;\n-        } else {\n-            JNU_ThrowIOExceptionWithLastError(env, \"read\");\n-            return IOS_THROWN;\n-        }\n-    }\n-    return res;\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_fdLimit(JNIEnv *env, jclass this)\n-{\n-    struct rlimit rlp;\n-    if (getrlimit(RLIMIT_NOFILE, &rlp) < 0) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"getrlimit failed\");\n-        return -1;\n-    }\n-    if (rlp.rlim_max == RLIM_INFINITY ||\n-        rlp.rlim_max > (rlim_t)java_lang_Integer_MAX_VALUE) {\n-        return java_lang_Integer_MAX_VALUE;\n-    } else {\n-        return (jint)rlp.rlim_max;\n-    }\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_iovMax(JNIEnv *env, jclass this)\n-{\n-    jlong iov_max = sysconf(_SC_IOV_MAX);\n-    if (iov_max == -1)\n-        iov_max = 16;\n-    return (jint)iov_max;\n-}\n-\n-JNIEXPORT jlong JNICALL\n-Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n-{\n-#if defined(MACOSX) || defined(__linux__)\n-    \/\/\n-    \/\/ The man pages of writev() on both Linux and macOS specify this\n-    \/\/ constraint on the sum of all byte lengths in the iovec array:\n-    \/\/\n-    \/\/ [EINVAL] The sum of the iov_len values in the iov array\n-    \/\/          overflows a 32-bit integer.\n-    \/\/\n-    \/\/ As of macOS 11 Big Sur, Darwin version 20, writev() started to\n-    \/\/ actually enforce the constraint which had been previously ignored.\n-    \/\/\n-    \/\/ In practice on Linux writev() has been observed not to write more\n-    \/\/ than 0x7fff0000 (aarch64) or 0x7ffff000 (x64) bytes in one call.\n-    \/\/\n-    return java_lang_Integer_MAX_VALUE;\n-#else\n-    return java_lang_Long_MAX_VALUE;\n-#endif\n-}\n-\n-\/* Declared in nio_util.h for use elsewhere in NIO *\/\n-\n-jint\n-convertReturnVal(JNIEnv *env, jint n, jboolean reading)\n-{\n-    if (n > 0) \/* Number of bytes written *\/\n-        return n;\n-    else if (n == 0) {\n-        if (reading) {\n-            return IOS_EOF; \/* EOF is -1 in javaland *\/\n-        } else {\n-            return 0;\n-        }\n-    }\n-    else if (errno == EAGAIN || errno == EWOULDBLOCK)\n-        return IOS_UNAVAILABLE;\n-    else if (errno == EINTR)\n-        return IOS_INTERRUPTED;\n-    else {\n-        const char *msg = reading ? \"Read failed\" : \"Write failed\";\n-        JNU_ThrowIOExceptionWithLastError(env, msg);\n-        return IOS_THROWN;\n-    }\n-}\n-\n-\/* Declared in nio_util.h for use elsewhere in NIO *\/\n-\n-jlong\n-convertLongReturnVal(JNIEnv *env, jlong n, jboolean reading)\n-{\n-    if (n > 0) \/* Number of bytes written *\/\n-        return n;\n-    else if (n == 0) {\n-        if (reading) {\n-            return IOS_EOF; \/* EOF is -1 in javaland *\/\n-        } else {\n-            return 0;\n-        }\n-    }\n-    else if (errno == EAGAIN || errno == EWOULDBLOCK)\n-        return IOS_UNAVAILABLE;\n-    else if (errno == EINTR)\n-        return IOS_INTERRUPTED;\n-    else {\n-        const char *msg = reading ? \"Read failed\" : \"Write failed\";\n-        JNU_ThrowIOExceptionWithLastError(env, msg);\n-        return IOS_THROWN;\n-    }\n-}\n-\n-jint\n-fdval(JNIEnv *env, jobject fdo)\n-{\n-    return (*env)->GetIntField(env, fdo, fd_fdID);\n-}\n-\n-void\n-setfdval(JNIEnv *env, jobject fdo, jint val) {\n-    (*env)->SetIntField(env, fdo, fd_fdID, val);\n-}\n-\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/IOUtil.c","additions":0,"deletions":261,"binary":false,"changes":261,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,5 @@\n+\/* Defined in UnixDomainSockets.c *\/\n+extern jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env,\n+                                             struct sockaddr_un *sa,\n+                                             socklen_t len);\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/InheritedChannel.c","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <sys\/types.h>\n+#include <string.h>\n+#include <sys\/resource.h>\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+#include \"sun_nio_ch_NIOUtil.h\"\n+#include \"java_lang_Integer.h\"\n+#include \"java_lang_Long.h\"\n+#include \"nio.h\"\n+#include \"nio_util.h\"\n+\n+static int\n+configureBlocking(int fd, jboolean blocking)\n+{\n+    int flags = fcntl(fd, F_GETFL);\n+    int newflags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n+\n+    return (flags == newflags) ? 0 : fcntl(fd, F_SETFL, newflags);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_NIOUtil_configureBlocking(JNIEnv *env, jclass clazz,\n+                                         jobject fdo, jboolean blocking)\n+{\n+    if (configureBlocking(fdval(env, fdo), blocking) < 0)\n+        JNU_ThrowIOExceptionWithLastError(env, \"Configure blocking failed\");\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_NIOUtil_makePipe(JNIEnv *env, jobject this, jboolean blocking)\n+{\n+    int fd[2];\n+\n+    if (pipe(fd) < 0) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"Pipe failed\");\n+        return 0;\n+    }\n+    if (blocking == JNI_FALSE) {\n+        if ((configureBlocking(fd[0], JNI_FALSE) < 0)\n+            || (configureBlocking(fd[1], JNI_FALSE) < 0)) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Configure blocking failed\");\n+            close(fd[0]);\n+            close(fd[1]);\n+            return 0;\n+        }\n+    }\n+    return ((jlong) fd[0] << 32) | (jlong) fd[1];\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_NIOUtil_write1(JNIEnv *env, jclass cl, jint fd, jbyte b)\n+{\n+    char c = (char)b;\n+    return convertReturnVal(env, write(fd, &c, 1), JNI_FALSE);\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_sun_nio_ch_NIOUtil_drain(JNIEnv *env, jclass cl, jint fd)\n+{\n+    char buf[16];\n+    int tn = 0;\n+\n+    for (;;) {\n+        int n = read(fd, buf, sizeof(buf));\n+        tn += n;\n+        if ((n < 0) && (errno != EAGAIN && errno != EWOULDBLOCK))\n+            JNU_ThrowIOExceptionWithLastError(env, \"Drain\");\n+        if (n == (int)sizeof(buf))\n+            continue;\n+        return (tn > 0) ? JNI_TRUE : JNI_FALSE;\n+    }\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_NIOUtil_drain1(JNIEnv *env, jclass cl, jint fd)\n+{\n+    int res;\n+    char buf[1];\n+\n+    res = read(fd, buf, 1);\n+    if (res < 0) {\n+        if (errno == EAGAIN || errno == EWOULDBLOCK) {\n+            res = 0;\n+        } else if (errno == EINTR) {\n+            return IOS_INTERRUPTED;\n+        } else {\n+            JNU_ThrowIOExceptionWithLastError(env, \"read\");\n+            return IOS_THROWN;\n+        }\n+    }\n+    return res;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_NIOUtil_fdLimit(JNIEnv *env, jclass this)\n+{\n+    struct rlimit rlp;\n+    if (getrlimit(RLIMIT_NOFILE, &rlp) < 0) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"getrlimit failed\");\n+        return -1;\n+    }\n+    if (rlp.rlim_max == RLIM_INFINITY ||\n+        rlp.rlim_max > (rlim_t)java_lang_Integer_MAX_VALUE) {\n+        return java_lang_Integer_MAX_VALUE;\n+    } else {\n+        return (jint)rlp.rlim_max;\n+    }\n+}\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/NIOUtil.c","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+#include \"Net.h\"\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/Net.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-#ifndef JNI_UTIL_MD_H\n-#define JNI_UTIL_MD_H\n+#include \"jni.h\"\n@@ -29,1 +28,0 @@\n-#endif \/* JNI_UTIL_MD_H *\/\n@@ -31,0 +29,3 @@\n+\/* Defined in Net.c *\/\n+\n+jint handleSocketError(JNIEnv *env, jint errorValue);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/Net.h","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.h","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+#include \"Net.h\"\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixAsynchronousSocketChannelImpl.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,8 @@\n+#include \"Net.h\"\n+\n+\/* 2 bytes to allow for null at end of string and null at start of string\n+ * for abstract name\n+ *\/\n+#define MAX_UNIX_DOMAIN_PATH_LEN \\\n+        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixDomainSockets.c","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm.h\"\n-#include \"jlong.h\"\n-#include <errno.h>\n-#include <sys\/types.h>\n-#include <sys\/un.h>\n-\n-\/* Defines SO_REUSEPORT *\/\n-#ifndef SO_REUSEPORT\n-#ifdef __linux__\n-#define SO_REUSEPORT 15\n-#elif defined(AIX) || defined(MACOSX)\n-#define SO_REUSEPORT 0x0200\n-#else\n-#define SO_REUSEPORT 0\n-#endif\n-#endif\n-\n-\/* 2 bytes to allow for null at end of string and null at start of string\n- * for abstract name\n- *\/\n-#define MAX_UNIX_DOMAIN_PATH_LEN \\\n-        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n-\n-\/* NIO utility procedures *\/\n-\n-\n-\/* Defined in IOUtil.c *\/\n-\n-jint fdval(JNIEnv *env, jobject fdo);\n-void setfdval(JNIEnv *env, jobject fdo, jint value);\n-\n-jint convertReturnVal(JNIEnv *env, jint n, jboolean reading);\n-jlong convertLongReturnVal(JNIEnv *env, jlong n, jboolean reading);\n-\n-\n-\/* Defined in Net.c *\/\n-\n-jint handleSocketError(JNIEnv *env, jint errorValue);\n-\n-\/* Defined in UnixDomainSockets.c *\/\n-\n-jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env,\n-                                      struct sockaddr_un *sa,\n-                                      socklen_t len);\n-\n-jint unixSocketAddressToSockaddr(JNIEnv *env,\n-                                jbyteArray uaddr,\n-                                struct sockaddr_un *sa,\n-                                int *len);\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/nio_util.h","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -65,0 +65,2 @@\n+        jdk.internal.loader.BootLoader.loadLibrary(\"net\");\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/net\/www\/protocol\/http\/ntlm\/NTLMAuthentication.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/DatagramDispatcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -436,1 +436,0 @@\n-        IOUtil.load();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/Iocp.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/SocketDispatcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WEPoll.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-                    IOUtil.write1(fd1Val, (byte) 0);\n+                    NIOUtil.write1(fd1Val, (byte) 0);\n@@ -247,1 +247,1 @@\n-            IOUtil.drain(fd0Val);\n+            NIOUtil.drain(fd0Val);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WEPollSelectorImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -748,4 +748,0 @@\n-\n-    static {\n-        IOUtil.load();\n-    }\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousFileChannelImpl.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -338,1 +338,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousServerSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -916,1 +916,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -626,1 +626,1 @@\n-        IOUtil.load();\n+        NIOUtil.load();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsSelectorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,6 +65,0 @@\n-\n-    static {\n-        \/\/ nio.dll has dependency on net.dll\n-        jdk.internal.loader.BootLoader.loadLibrary(\"net\");\n-        jdk.internal.loader.BootLoader.loadLibrary(\"nio\");\n-    }\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/RegistryFileTypeDetector.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1097,3 +1097,0 @@\n-        \/\/ nio.dll has dependency on net.dll\n-        jdk.internal.loader.BootLoader.loadLibrary(\"net\");\n-        jdk.internal.loader.BootLoader.loadLibrary(\"nio\");\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsNativeDispatcher.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <windows.h>\n+#include <winsock2.h>\n+#include <io.h>\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+\n+#include \"java_lang_Long.h\"\n+#include \"nio.h\"\n+#include \"nio_util.h\"\n+#include \"sun_nio_ch_IOUtil.h\"\n+\n+\/* field id for jlong 'handle' in java.io.FileDescriptor used for file fds *\/\n+static jfieldID handle_fdID;\n+\n+\/* field id for jint 'fd' in java.io.FileDescriptor used for socket fds *\/\n+static jfieldID fd_fdID;\n+\n+JNIEXPORT jboolean JNICALL\n+Java_sun_security_provider_NativeSeedGenerator_nativeGenerateSeed\n+(JNIEnv *env, jclass clazz, jbyteArray randArray);\n+\n+\/**************************************************************\n+ * static method to store field IDs in initializers\n+ *\/\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_IOUtil_initIDs(JNIEnv *env, jclass clazz)\n+{\n+    CHECK_NULL(clazz = (*env)->FindClass(env, \"java\/io\/FileDescriptor\"));\n+    CHECK_NULL(fd_fdID = (*env)->GetFieldID(env, clazz, \"fd\", \"I\"));\n+    CHECK_NULL(handle_fdID = (*env)->GetFieldID(env, clazz, \"handle\", \"J\"));\n+}\n+\n+\/**************************************************************\n+ * IOUtil.c\n+ *\/\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_IOUtil_iovMax(JNIEnv *env, jclass this)\n+{\n+    return 16;\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n+{\n+    return java_lang_Long_MAX_VALUE;\n+}\n+\n+JNIEXPORT jint\n+convertReturnVal(JNIEnv *env, jint n, jboolean reading)\n+{\n+    if (n > 0) \/* Number of bytes written *\/\n+        return n;\n+    if (n == 0) {\n+        if (reading) {\n+            return IOS_EOF; \/* EOF is -1 in javaland *\/\n+        } else {\n+            return 0;\n+        }\n+    }\n+    JNU_ThrowIOExceptionWithLastError(env, \"Read\/write failed\");\n+    return IOS_THROWN;\n+}\n+\n+JNIEXPORT jlong\n+convertLongReturnVal(JNIEnv *env, jlong n, jboolean reading)\n+{\n+    if (n > 0) \/* Number of bytes written *\/\n+        return n;\n+    if (n == 0) {\n+        if (reading) {\n+            return IOS_EOF; \/* EOF is -1 in javaland *\/\n+        } else {\n+            return 0;\n+        }\n+    }\n+    JNU_ThrowIOExceptionWithLastError(env, \"Read\/write failed\");\n+    return IOS_THROWN;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_IOUtil_fdVal(JNIEnv *env, jclass clazz, jobject fdo)\n+{\n+    return fdval(env, fdo);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_IOUtil_setfdVal(JNIEnv *env, jclass clazz, jobject fdo, jint val)\n+{\n+    setfdval(env, fdo, val);\n+}\n+\n+\/* Note: This function returns the int fd value from file descriptor.\n+   It is mostly used for sockets which should use the int fd value.\n+*\/\n+JNIEXPORT jint\n+fdval(JNIEnv *env, jobject fdo)\n+{\n+    return (*env)->GetIntField(env, fdo, fd_fdID);\n+}\n+\n+JNIEXPORT void\n+setfdval(JNIEnv *env, jobject fdo, jint val)\n+{\n+    (*env)->SetIntField(env, fdo, fd_fdID, val);\n+}\n+\n+JNIEXPORT jlong\n+handleval(JNIEnv *env, jobject fdo)\n+{\n+    return (*env)->GetLongField(env, fdo, handle_fdID);\n+}\n","filename":"src\/java.base\/windows\/native\/libjava\/IOUtil.c","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"","filename":"src\/java.base\/windows\/native\/libjava\/nio\/MappedMemoryUtils.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/windows\/native\/libnio\/MappedMemoryUtils.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/windows\/native\/libjava\/nio\/ch\/FileDispatcherImpl.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileDispatcherImpl.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/windows\/native\/libjava\/nio\/ch\/FileKey.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileKey.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/windows\/native\/libjava\/nio\/ch\/Iocp.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/windows\/native\/libnio\/ch\/Iocp.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/windows\/native\/libjava\/nio\/ch\/WindowsAsynchronousFileChannelImpl.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/windows\/native\/libnio\/ch\/WindowsAsynchronousFileChannelImpl.c","status":"renamed"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <winsock2.h>\n+#include <ws2tcpip.h>\n+#include <afunix.h>\n+\n+#include \"jni.h\"\n+\n+\/* Defined in IOUtil.c *\/\n+\n+JNIEXPORT jint fdval(JNIEnv *env, jobject fdo);\n+JNIEXPORT void setfdval(JNIEnv *env, jobject fdo, jint val);\n+JNIEXPORT jlong handleval(JNIEnv *env, jobject fdo);\n+JNIEXPORT jint convertReturnVal(JNIEnv *env, jint n, jboolean r);\n+JNIEXPORT jlong convertLongReturnVal(JNIEnv *env, jlong n, jboolean r);\n+\n+#ifdef _WIN64\n+\n+struct iovec {\n+    jlong  iov_base;\n+    jint  iov_len;\n+};\n+\n+#else\n+\n+struct iovec {\n+    jint  iov_base;\n+    jint  iov_len;\n+};\n+\n+#endif\n+\n+\/* Defined in UnixDomainSockets.c *\/\n+\n+jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len);\n+\n+jint unixSocketAddressToSockaddr(JNIEnv *env, jbyteArray uaddr,\n+                                struct sockaddr_un *sa, int *len);\n","filename":"src\/java.base\/windows\/native\/libjava\/nio\/ch\/nio_util.h","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"","filename":"src\/java.base\/windows\/native\/libjava\/nio\/fs\/RegistryFileTypeDetector.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/windows\/native\/libnio\/fs\/RegistryFileTypeDetector.c","status":"renamed"},{"patch":"","filename":"src\/java.base\/windows\/native\/libjava\/nio\/fs\/WindowsNativeDispatcher.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/windows\/native\/libnio\/fs\/WindowsNativeDispatcher.c","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,3 @@\n+\/* Defined in DatagramChannelImpl.c *\/\n+extern jboolean purgeOutstandingICMP(JNIEnv *env, jclass clazz, jint fd);\n+\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/DatagramDispatcher.c","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,207 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <windows.h>\n-#include <winsock2.h>\n-#include <io.h>\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm.h\"\n-#include \"jlong.h\"\n-\n-#include \"java_lang_Long.h\"\n-#include \"nio.h\"\n-#include \"nio_util.h\"\n-#include \"net_util.h\"\n-#include \"sun_nio_ch_IOUtil.h\"\n-\n-\/* field id for jlong 'handle' in java.io.FileDescriptor used for file fds *\/\n-static jfieldID handle_fdID;\n-\n-\/* field id for jint 'fd' in java.io.FileDescriptor used for socket fds *\/\n-static jfieldID fd_fdID;\n-\n-JNIEXPORT jboolean JNICALL\n-Java_sun_security_provider_NativeSeedGenerator_nativeGenerateSeed\n-(JNIEnv *env, jclass clazz, jbyteArray randArray);\n-\n-\/**************************************************************\n- * static method to store field IDs in initializers\n- *\/\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_IOUtil_initIDs(JNIEnv *env, jclass clazz)\n-{\n-    CHECK_NULL(clazz = (*env)->FindClass(env, \"java\/io\/FileDescriptor\"));\n-    CHECK_NULL(fd_fdID = (*env)->GetFieldID(env, clazz, \"fd\", \"I\"));\n-    CHECK_NULL(handle_fdID = (*env)->GetFieldID(env, clazz, \"handle\", \"J\"));\n-}\n-\n-\/**************************************************************\n- * IOUtil.c\n- *\/\n-JNIEXPORT jboolean JNICALL\n-Java_sun_nio_ch_IOUtil_randomBytes(JNIEnv *env, jclass clazz,\n-                                  jbyteArray randArray)\n-{\n-    return\n-        Java_sun_security_provider_NativeSeedGenerator_nativeGenerateSeed(env,\n-                                                                    clazz,\n-                                                                    randArray);\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_iovMax(JNIEnv *env, jclass this)\n-{\n-    return 16;\n-}\n-\n-JNIEXPORT jlong JNICALL\n-Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n-{\n-    return java_lang_Long_MAX_VALUE;\n-}\n-\n-jint\n-convertReturnVal(JNIEnv *env, jint n, jboolean reading)\n-{\n-    if (n > 0) \/* Number of bytes written *\/\n-        return n;\n-    if (n == 0) {\n-        if (reading) {\n-            return IOS_EOF; \/* EOF is -1 in javaland *\/\n-        } else {\n-            return 0;\n-        }\n-    }\n-    JNU_ThrowIOExceptionWithLastError(env, \"Read\/write failed\");\n-    return IOS_THROWN;\n-}\n-\n-jlong\n-convertLongReturnVal(JNIEnv *env, jlong n, jboolean reading)\n-{\n-    if (n > 0) \/* Number of bytes written *\/\n-        return n;\n-    if (n == 0) {\n-        if (reading) {\n-            return IOS_EOF; \/* EOF is -1 in javaland *\/\n-        } else {\n-            return 0;\n-        }\n-    }\n-    JNU_ThrowIOExceptionWithLastError(env, \"Read\/write failed\");\n-    return IOS_THROWN;\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_fdVal(JNIEnv *env, jclass clazz, jobject fdo)\n-{\n-    return fdval(env, fdo);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_IOUtil_setfdVal(JNIEnv *env, jclass clazz, jobject fdo, jint val)\n-{\n-    setfdval(env, fdo, val);\n-}\n-\n-\n-#define SET_BLOCKING 0\n-#define SET_NONBLOCKING 1\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_IOUtil_configureBlocking(JNIEnv *env, jclass clazz,\n-                                        jobject fdo, jboolean blocking)\n-{\n-    u_long argp;\n-    int result = 0;\n-    jint fd = fdval(env, fdo);\n-\n-    if (blocking == JNI_FALSE) {\n-        argp = SET_NONBLOCKING;\n-    } else {\n-        argp = SET_BLOCKING;\n-        \/* Blocking fd cannot be registered with EventSelect *\/\n-        WSAEventSelect(fd, NULL, 0);\n-    }\n-    result = ioctlsocket(fd, FIONBIO, &argp);\n-    if (result == SOCKET_ERROR) {\n-        NET_ThrowNew(env, WSAGetLastError(), \"ioctlsocket\");\n-    }\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_sun_nio_ch_IOUtil_drain(JNIEnv *env, jclass cl, jint fd)\n-{\n-    char buf[16];\n-    jboolean readBytes = JNI_FALSE;\n-    for (;;) {\n-        int n = recv((SOCKET) fd, buf, sizeof(buf), 0);\n-        if (n == SOCKET_ERROR) {\n-            if (WSAGetLastError() != WSAEWOULDBLOCK) {\n-                JNU_ThrowIOExceptionWithLastError(env, \"recv failed\");\n-            }\n-            return readBytes;\n-        }\n-        if (n <= 0)\n-            return readBytes;\n-        if (n < (int)sizeof(buf))\n-            return JNI_TRUE;\n-        readBytes = JNI_TRUE;\n-    }\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_write1(JNIEnv *env, jclass cl, jint fd, jbyte b)\n-{\n-    int n = send((SOCKET) fd, &b, 1, 0);\n-    if (n == SOCKET_ERROR && WSAGetLastError() != WSAEWOULDBLOCK) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"send failed\");\n-        return IOS_THROWN;\n-    }\n-    return (n == 1) ? 1 : 0;\n-}\n-\n-\/* Note: This function returns the int fd value from file descriptor.\n-   It is mostly used for sockets which should use the int fd value.\n-*\/\n-jint\n-fdval(JNIEnv *env, jobject fdo)\n-{\n-    return (*env)->GetIntField(env, fdo, fd_fdID);\n-}\n-\n-void\n-setfdval(JNIEnv *env, jobject fdo, jint val)\n-{\n-    (*env)->SetIntField(env, fdo, fd_fdID, val);\n-}\n-\n-jlong\n-handleval(JNIEnv *env, jobject fdo)\n-{\n-    return (*env)->GetLongField(env, fdo, handle_fdID);\n-}\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/IOUtil.c","additions":0,"deletions":207,"binary":false,"changes":207,"status":"deleted"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <windows.h>\n+#include <winsock2.h>\n+#include <io.h>\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+\n+#include \"java_lang_Long.h\"\n+#include \"nio.h\"\n+#include \"nio_util.h\"\n+#include \"net_util.h\"\n+#include \"sun_nio_ch_NIOUtil.h\"\n+\n+\/**************************************************************\n+ * NIOUtil.c\n+ *\/\n+\n+#define SET_BLOCKING 0\n+#define SET_NONBLOCKING 1\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_NIOUtil_configureBlocking(JNIEnv *env, jclass clazz,\n+                                         jobject fdo, jboolean blocking)\n+{\n+    u_long argp;\n+    int result = 0;\n+    jint fd = fdval(env, fdo);\n+\n+    if (blocking == JNI_FALSE) {\n+        argp = SET_NONBLOCKING;\n+    } else {\n+        argp = SET_BLOCKING;\n+        \/* Blocking fd cannot be registered with EventSelect *\/\n+        WSAEventSelect(fd, NULL, 0);\n+    }\n+    result = ioctlsocket(fd, FIONBIO, &argp);\n+    if (result == SOCKET_ERROR) {\n+        NET_ThrowNew(env, WSAGetLastError(), \"ioctlsocket\");\n+    }\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_sun_nio_ch_NIOUtil_drain(JNIEnv *env, jclass cl, jint fd)\n+{\n+    char buf[16];\n+    jboolean readBytes = JNI_FALSE;\n+    for (;;) {\n+        int n = recv((SOCKET) fd, buf, sizeof(buf), 0);\n+        if (n == SOCKET_ERROR) {\n+            if (WSAGetLastError() != WSAEWOULDBLOCK) {\n+                JNU_ThrowIOExceptionWithLastError(env, \"recv failed\");\n+            }\n+            return readBytes;\n+        }\n+        if (n <= 0)\n+            return readBytes;\n+        if (n < (int)sizeof(buf))\n+            return JNI_TRUE;\n+        readBytes = JNI_TRUE;\n+    }\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_NIOUtil_drain1(JNIEnv *env, jclass cl, jint fd)\n+{\n+    JNU_ThrowByName(env, \"java\/lang\/UnsupportedOperationException\", \"drain1\");\n+    return IOS_THROWN;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_NIOUtil_write1(JNIEnv *env, jclass cl, jint fd, jbyte b)\n+{\n+    int n = send((SOCKET) fd, &b, 1, 0);\n+    if (n == SOCKET_ERROR && WSAGetLastError() != WSAEWOULDBLOCK) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"send failed\");\n+        return IOS_THROWN;\n+    }\n+    return (n == 1) ? 1 : 0;\n+}\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/NIOUtil.c","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,9 @@\n+\/**\n+ * The maximum buffer size for WSASend\/WSARecv. Microsoft recommendation for\n+ * blocking operations is to use buffers no larger than 64k. We need the\n+ * maximum to be less than 128k to support asynchronous close on Windows\n+ * Server 2003 and newer editions of Windows.\n+ *\/\n+#define MAX_BUFFER_SIZE             ((128*1024)-1)\n+\n+\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/SocketDispatcher.c","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,0 +41,6 @@\n+\/* 2 bytes to allow for null at end of string and null at start of string\n+ * for abstract name\n+ *\/\n+#define MAX_UNIX_DOMAIN_PATH_LEN \\\n+        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n+\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/UnixDomainSockets.c","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <winsock2.h>\n-#include <ws2tcpip.h>\n-#include <afunix.h>\n-\n-#include \"jni.h\"\n-\n-\/**\n- * The maximum buffer size for WSASend\/WSARecv. Microsoft recommendation for\n- * blocking operations is to use buffers no larger than 64k. We need the\n- * maximum to be less than 128k to support asynchronous close on Windows\n- * Server 2003 and newer editions of Windows.\n- *\/\n-#define MAX_BUFFER_SIZE             ((128*1024)-1)\n-\n-#define MAX_UNIX_DOMAIN_PATH_LEN \\\n-        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n-\n-jint fdval(JNIEnv *env, jobject fdo);\n-void setfdval(JNIEnv *env, jobject fdo, jint val);\n-jlong handleval(JNIEnv *env, jobject fdo);\n-jint convertReturnVal(JNIEnv *env, jint n, jboolean r);\n-jlong convertLongReturnVal(JNIEnv *env, jlong n, jboolean r);\n-jboolean purgeOutstandingICMP(JNIEnv *env, jclass clazz, jint fd);\n-\n-struct iovec {\n-    jlong  iov_base;\n-    jint  iov_len;\n-};\n-\n-\/* Defined in UnixDomainSockets.c *\/\n-\n-jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len);\n-\n-jint unixSocketAddressToSockaddr(JNIEnv *env, jbyteArray uaddr,\n-                                struct sockaddr_un *sa, int *len);\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/nio_util.h","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -37,0 +37,1 @@\n+import sun.nio.ch.NIOUtil;\n@@ -236,1 +237,1 @@\n-            IOUtil.configureBlocking(fd, block);\n+            NIOUtil.configureBlocking(fd, block);\n","filename":"src\/jdk.net\/share\/classes\/jdk\/nio\/Channels.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+import sun.nio.ch.NIOUtil;\n@@ -534,1 +535,1 @@\n-        IOUtil.configureBlocking(fd, block);\n+        NIOUtil.configureBlocking(fd, block);\n@@ -1087,1 +1088,1 @@\n-        IOUtil.load();   \/* loads nio & net native libraries *\/\n+        NIOUtil.load();   \/* loads nio & net native libraries *\/\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+import sun.nio.ch.NIOUtil;\n@@ -283,1 +284,1 @@\n-        IOUtil.configureBlocking(fd, block);\n+        NIOUtil.configureBlocking(fd, block);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import sun.nio.ch.NIOUtil;\n@@ -77,1 +78,1 @@\n-        return IOUtil.newFD(nativefd);\n+        return NIOUtil.newFD(nativefd);\n@@ -254,1 +255,1 @@\n-        return IOUtil.newFD(nativefd);\n+        return NIOUtil.newFD(nativefd);\n@@ -309,1 +310,1 @@\n-        IOUtil.load();   \/\/ loads nio & net native libraries\n+        NIOUtil.load();   \/\/ loads nio & net native libraries\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpNet.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import sun.nio.ch.NIOUtil;\n@@ -241,1 +242,1 @@\n-            IOUtil.configureBlocking(newfd, true);\n+            NIOUtil.configureBlocking(newfd, true);\n@@ -248,1 +249,1 @@\n-        IOUtil.configureBlocking(fd, block);\n+        NIOUtil.configureBlocking(fd, block);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,4 @@\n+        \/\/ Manually load the \"net\" library which is needed for Inet6AddressImpl.\n+        \/\/ In normal scenarios this library is loaded automatically.\n+        jdk.internal.loader.BootLoader.loadLibrary(\"net\");\n+\n","filename":"test\/jdk\/java\/net\/InetAddress\/java.base\/java\/net\/NullCharInHostname.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-import sun.nio.ch.IOUtil;\n+import sun.nio.ch.NIOUtil;\n@@ -240,1 +240,1 @@\n-        FileDescriptor fd = IOUtil.newFD(-1);\n+        FileDescriptor fd = NIOUtil.newFD(-1);\n","filename":"test\/jdk\/jdk\/nio\/Basic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}