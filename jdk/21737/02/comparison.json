{"files":[{"patch":"@@ -120,1 +120,1 @@\n-            if (archivedCache == null || archivedCache.length != size) {\n+            if (archivedCache == null) {\n@@ -127,0 +127,2 @@\n+            } else if (archivedCache.length != size) {\n+                throw new InternalError(\"CDS archive is broken: ByteCache mismatch\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8987,1 +8987,1 @@\n-            if (archivedCache == null || archivedCache.length != size) {\n+            if (archivedCache == null) {\n@@ -8993,0 +8993,2 @@\n+            } else if (archivedCache.length != size) {\n+                throw new InternalError(\"CDS archive is broken: CharacterCache mismatch\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -963,1 +963,11 @@\n-                for(int i = 0; i < c.length; i++) {\n+                \/\/ If archive has Integer cache, we must use all instances from it.\n+                \/\/ Otherwise, the identity checks between archived Integers and\n+                \/\/ runtime-cached Integers would fail.\n+                int archivedIdx = (archivedCache == null) ? 0 : archivedCache.length;\n+                for (int i = 0; i < archivedIdx; i++) {\n+                    c[i] = archivedCache[i];\n+                    assert j == archivedCache[i];\n+                    j++;\n+                }\n+                \/\/ Fill the rest of the cache.\n+                for (int i = archivedIdx; i < size; i++) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -965,1 +965,1 @@\n-            if (archivedCache == null || archivedCache.length != size) {\n+            if (archivedCache == null) {\n@@ -972,0 +972,2 @@\n+            } else if (archivedCache.length != size) {\n+                throw new InternalError(\"CDS archive is broken: LongCache mismatch\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-            if (archivedCache == null || archivedCache.length != size) {\n+            if (archivedCache == null) {\n@@ -254,0 +254,2 @@\n+            } else if (archivedCache.length != size) {\n+                throw new InternalError(\"CDS archive is broken: ShortCache mismatch\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile CheckIntegerCacheApp.java\n+ * @compile --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED CheckIntegerCacheApp.java ArchivedIntegerHolder.java\n@@ -32,0 +32,1 @@\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar boxCache-boot.jar ArchivedIntegerHolder\n@@ -44,0 +45,13 @@\n+    public static String[] mixArgs(String... args) {\n+        String bootJar = ClassFileInstaller.getJarPath(\"boxCache-boot.jar\");\n+\n+        String[] newArgs = new String[args.length + 5];\n+        newArgs[0] = \"--add-exports\";\n+        newArgs[1] = \"java.base\/jdk.internal.misc=ALL-UNNAMED\";\n+        newArgs[2] = \"-Xbootclasspath\/a:\" + bootJar;\n+        newArgs[3] = \"-XX:+IgnoreUnrecognizedVMOptions\";\n+        newArgs[4] = \"-XX:ArchiveHeapTestClass=ArchivedIntegerHolder\";\n+        System.arraycopy(args, 0, newArgs, 5, args.length);\n+        return newArgs;\n+    }\n+\n@@ -54,1 +68,2 @@\n-                TestCommon.list(\"CheckIntegerCacheApp\"));\n+                TestCommon.list(\"CheckIntegerCacheApp\"),\n+                mixArgs());\n@@ -61,2 +76,1 @@\n-                \"CheckIntegerCacheApp\",\n-                \"127\");\n+                mixArgs(\"CheckIntegerCacheApp\", \"127\"));\n@@ -70,3 +84,2 @@\n-                \"-XX:AutoBoxCacheMax=20000\",\n-                \"CheckIntegerCacheApp\",\n-                \"20000\");\n+                mixArgs(\"-XX:AutoBoxCacheMax=20000\",\n+                        \"CheckIntegerCacheApp\", \"20000\"));\n@@ -80,1 +93,1 @@\n-                \"-XX:AutoBoxCacheMax=20000\");\n+                mixArgs(\"-XX:AutoBoxCacheMax=20000\"));\n@@ -88,4 +101,2 @@\n-                \"--module-path\",\n-                moduleDir.toString(),\n-                \"CheckIntegerCacheApp\",\n-                \"127\");\n+                mixArgs(\"--module-path\", moduleDir.toString(),\n+                        \"CheckIntegerCacheApp\", \"127\"));\n@@ -100,5 +111,3 @@\n-                \"--module-path\",\n-                moduleDir.toString(),\n-                \"-XX:AutoBoxCacheMax=20000\",\n-                \"CheckIntegerCacheApp\",\n-                \"20000\");\n+                mixArgs(\"--module-path\", moduleDir.toString(),\n+                        \"-XX:AutoBoxCacheMax=20000\",\n+                        \"CheckIntegerCacheApp\", \"20000\"));\n@@ -112,5 +121,3 @@\n-                \"--module-path\",\n-                moduleDir.toString(),\n-                \"-XX:AutoBoxCacheMax=30000\",\n-                \"CheckIntegerCacheApp\",\n-                \"30000\");\n+                mixArgs(\"--module-path\", moduleDir.toString(),\n+                        \"-XX:AutoBoxCacheMax=30000\",\n+                        \"CheckIntegerCacheApp\", \"30000\"));\n@@ -123,6 +130,6 @@\n-                \"-XX:AutoBoxCacheMax=2000000\",\n-                \"-Xmx1g\",\n-                \"-XX:NewSize=1g\",\n-                \"-Xlog:cds+heap=info\",\n-                \"-Xlog:gc+region+cds\",\n-                \"-Xlog:gc+region=trace\");\n+                mixArgs(\"-XX:AutoBoxCacheMax=2000000\",\n+                        \"-Xmx1g\",\n+                        \"-XX:NewSize=1g\",\n+                        \"-Xlog:cds+heap=info\",\n+                        \"-Xlog:gc+region+cds\",\n+                        \"-Xlog:gc+region=trace\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/ArchivedIntegerCacheTest.java","additions":35,"deletions":28,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import jdk.internal.misc.CDS;\n+\n+public class ArchivedIntegerHolder {\n+    public static Object[] archivedObjects;\n+    static {\n+        CDS.initializeFromArchive(ArchivedIntegerHolder.class);\n+        if (archivedObjects == null) {\n+            archivedObjects = new Object[256];\n+            for (int i = -128; i <= 127; i++) {\n+                archivedObjects[i + 128] = Integer.valueOf(i);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/ArchivedIntegerHolder.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -65,0 +65,8 @@\n+        \/\/ Check that archived integer cache agrees with runtime integer cache.\n+        for (int i = -128; i <= 127; i++) {\n+            if (ArchivedIntegerHolder.archivedObjects[i + 128] != Integer.valueOf(i)) {\n+                throw new RuntimeException(\n+                        \"FAILED. Archived and runtime caches disagree for \" + i);\n+            }\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/CheckIntegerCacheApp.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}