{"files":[{"patch":"@@ -163,1 +163,4 @@\n-  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find_if([&](LGRPSpace* space) {\n+    return space->lgrp_id() == (uint)lgrp_id;\n+  });\n+\n@@ -182,1 +185,3 @@\n-  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find_if([&](LGRPSpace* space) {\n+    return space->lgrp_id() == (uint)lgrp_id;\n+  });\n@@ -202,1 +207,3 @@\n-  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find_if([&](LGRPSpace* space) {\n+    return space->lgrp_id() == (uint)lgrp_id;\n+  });\n@@ -585,2 +592,3 @@\n-\n-  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find_if([&](LGRPSpace* space) {\n+    return space->lgrp_id() == (uint)lgrp_id;\n+  });\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-  return _elements->find(e, GrowableCache::equals);\n+  return _elements->find_if([&](GrowableElement* other_e) { return e->equals(other_e); });\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,8 +504,0 @@\n-bool PerfDataList::by_name(void* name, PerfData* const& pd) {\n-\n-  if (pd == nullptr)\n-    return false;\n-\n-  return strcmp((const char*)name, pd->name()) == 0;\n-}\n-\n@@ -513,2 +505,6 @@\n-\n-  int i = _set->find((void*)name, PerfDataList::by_name);\n+  auto name_predicate = [&](PerfData* pd) {\n+    if (pd == nullptr)\n+      return false;\n+    return strcmp((const char*)name, pd->name()) == 0;\n+  };\n+  int i = _set->find_if(name_predicate);\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -578,3 +578,0 @@\n-    \/\/ method to search for a instrumentation object by name\n-    static bool by_name(void* name, PerfData* const& pd);\n-\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,1 +86,4 @@\n-  int i = _oop_list->find_from_end(op, match_oop_entry);\n+  auto predicate = [&](const UnhandledOopEntry& e) {\n+    return (const_cast<UnhandledOopEntry&>(e).oop_ptr() == op);\n+  };\n+  int i = _oop_list->find_from_end_if(predicate);\n@@ -107,2 +110,4 @@\n-\n-  int i = _oop_list->find_from_end(op, match_oop_entry);\n+  auto predicate = [&](const UnhandledOopEntry& e) {\n+    return (const_cast<UnhandledOopEntry&>(e).oop_ptr() == op);\n+  };\n+  int i = _oop_list->find_from_end_if(predicate);\n","filename":"src\/hotspot\/share\/runtime\/unhandledOops.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -147,5 +147,0 @@\n-bool DCmdInfo::by_name(void* cmd_name, DCmdInfo* const& info) {\n-  if (info == nullptr) return false;\n-  return strcmp((const char*)cmd_name, info->name()) == 0;\n-}\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -149,1 +149,0 @@\n-  static bool by_name(void* name, DCmdInfo* const& info);\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2007,1 +2007,5 @@\n-    int pos = info_list->find((void*)cmd_name,DCmdInfo::by_name);\n+    auto name_predicate = [&](DCmdInfo* info) {\n+        if (info == nullptr) return false;\n+        return strcmp((const char*)cmd_name, info->name()) == 0;\n+    };\n+    int pos = info_list->find_if(name_predicate);\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -212,2 +212,2 @@\n-  template<typename T, typename F>\n-  int find(T* token, F f) const {\n+  template<typename F>\n+  int find_if(F f) const {\n@@ -215,1 +215,1 @@\n-      if (f(token, _data[i])) return i;\n+      if (f(_data[i])) return i;\n@@ -220,2 +220,2 @@\n-  template<typename T, typename F>\n-  int find_from_end(T* token, F f) const {\n+  template<typename F>\n+  int find_from_end_if(F f) const {\n@@ -224,1 +224,1 @@\n-      if (f(token, _data[i])) return i;\n+      if (f(_data[i])) return i;\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}