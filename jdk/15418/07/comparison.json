{"files":[{"patch":"@@ -163,1 +163,1 @@\n-  int i = lgrp_spaces()->find(&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n@@ -182,1 +182,1 @@\n-  int i = lgrp_spaces()->find(&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n@@ -202,1 +202,1 @@\n-  int i = lgrp_spaces()->find(&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n@@ -586,1 +586,1 @@\n-  int i = lgrp_spaces()->find(&lgrp_id, LGRPSpace::equals);\n+  int i = lgrp_spaces()->find((uint*)&lgrp_id, LGRPSpace::equals);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -99,2 +99,2 @@\n-    static bool equals(void* lgrp_id_value, LGRPSpace* p) {\n-      return *(uint*)lgrp_id_value == p->lgrp_id();\n+    static bool equals(uint* lgrp_id_value, LGRPSpace* const& p) {\n+      return *lgrp_id_value == p->lgrp_id();\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,2 +122,1 @@\n-bool GrowableCache::equals(void* v, GrowableElement *e2) {\n-  GrowableElement *e1 = (GrowableElement *) v;\n+bool GrowableCache::equals(GrowableElement* e1, GrowableElement* const& e2) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,3 +69,3 @@\n-  virtual address getCacheValue()          =0;\n-  virtual bool equals(GrowableElement* e)  =0;\n-  virtual GrowableElement *clone()         =0;\n+  virtual address getCacheValue()                =0;\n+  virtual bool equals(const GrowableElement* e)  =0;\n+  virtual GrowableElement *clone()               =0;\n@@ -91,1 +91,1 @@\n-  static bool equals(void *, GrowableElement *);\n+  static bool equals(GrowableElement*, GrowableElement* const&);\n@@ -180,1 +180,1 @@\n-  bool equals(GrowableElement* e) { return equals((JvmtiBreakpoint&) *e); }\n+  bool equals(const GrowableElement* e) { return equals((JvmtiBreakpoint&) *e); }\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-bool PerfDataList::by_name(void* name, PerfData* pd) {\n+bool PerfDataList::by_name(void* name, PerfData* const& pd) {\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -579,1 +579,1 @@\n-    static bool by_name(void* name, PerfData* pd);\n+    static bool by_name(void* name, PerfData* const& pd);\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-bool match_oop_entry(void *op, UnhandledOopEntry e) {\n-  return (e.oop_ptr() == op);\n+bool match_oop_entry(oop *op, const UnhandledOopEntry& e) {\n+  return (const_cast<UnhandledOopEntry&>(e).oop_ptr() == op);\n","filename":"src\/hotspot\/share\/runtime\/unhandledOops.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-bool DCmdInfo::by_name(void* cmd_name, DCmdInfo* info) {\n+bool DCmdInfo::by_name(void* cmd_name, DCmdInfo* const& info) {\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  static bool by_name(void* name, DCmdInfo* info);\n+  static bool by_name(void* name, DCmdInfo* const& info);\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,1 +212,2 @@\n-  int  find(void* token, bool f(void*, E)) const {\n+  template<typename T, typename F>\n+  int find(T* token, F f) const {\n@@ -219,1 +220,2 @@\n-  int  find_from_end(void* token, bool f(void*, E)) const {\n+  template<typename T, typename F>\n+  int find_from_end(T* token, F f) const {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}