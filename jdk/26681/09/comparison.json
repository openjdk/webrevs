{"files":[{"patch":"@@ -29,2 +29,1 @@\n-\/\/ measurements made in November 2018. This list excludes files named\n-\/\/ *.inline.hpp, since including them decreased build performance.\n+\/\/ measurements made in August 2025.\n@@ -32,3 +31,37 @@\n-#include \"classfile\/classLoaderData.hpp\"\n-#include \"classfile\/javaClasses.hpp\"\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/codeBuffer.hpp\"\n+#include \"asm\/macroAssembler.hpp\"\n+#include \"asm\/register.hpp\"\n+#include \"c1\/c1_globals.hpp\"\n+#include \"cds\/aotLinkedClassBulkLoader.hpp\"\n+#include \"cds\/cds_globals.hpp\"\n+#include \"classfile\/classLoaderData.inline.hpp\"\n+#include \"classfile\/compactHashtable.hpp\"\n+#include \"classfile\/javaClasses.inline.hpp\"\n+#include \"classfile\/vmClassID.hpp\"\n+#include \"classfile\/vmClassMacros.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n+#include \"classfile\/vmIntrinsics.hpp\"\n+#include \"code\/codeBlob.inline.hpp\"\n+#include \"code\/codeCache.inline.hpp\"\n+#include \"code\/compressedStream.hpp\"\n+#include \"code\/debugInfo.hpp\"\n+#include \"code\/location.hpp\"\n+#include \"code\/nativeInst.hpp\"\n+#include \"code\/nmethod.inline.hpp\"\n+#include \"code\/oopRecorder.hpp\"\n+#include \"code\/pcDesc.hpp\"\n+#include \"code\/relocInfo.hpp\"\n+#include \"code\/stubs.hpp\"\n+#include \"code\/vmreg.inline.hpp\"\n+#include \"code\/vmregTypes.hpp\"\n+#include \"compiler\/compilerDefinitions.hpp\"\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"compiler\/compiler_globals_pd.hpp\"\n+#include \"compiler\/oopMap.inline.hpp\"\n+#include \"gc\/serial\/serial_globals.hpp\"\n+#include \"gc\/shared\/barrierSet.inline.hpp\"\n+#include \"gc\/shared\/barrierSetConfig.inline.hpp\"\n+#include \"gc\/shared\/barrierSetStackChunk.hpp\"\n+#include \"gc\/shared\/cardTable.hpp\"\n+#include \"gc\/shared\/cardTableBarrierSet.inline.hpp\"\n@@ -36,0 +69,1 @@\n+#include \"gc\/shared\/gcBehaviours.hpp\"\n@@ -37,0 +71,43 @@\n+#include \"gc\/shared\/gcId.hpp\"\n+#include \"gc\/shared\/gcThreadLocalData.hpp\"\n+#include \"gc\/shared\/gcUtil.hpp\"\n+#include \"gc\/shared\/gcWhen.hpp\"\n+#include \"gc\/shared\/gc_globals.hpp\"\n+#include \"gc\/shared\/modRefBarrierSet.inline.hpp\"\n+#include \"gc\/shared\/oopStorage.inline.hpp\"\n+#include \"gc\/shared\/referenceDiscoverer.hpp\"\n+#include \"gc\/shared\/referencePolicy.hpp\"\n+#include \"gc\/shared\/referenceProcessor.hpp\"\n+#include \"gc\/shared\/referenceProcessorStats.hpp\"\n+#include \"gc\/shared\/softRefPolicy.hpp\"\n+#include \"gc\/shared\/threadLocalAllocBuffer.hpp\"\n+#include \"gc\/shared\/verifyOption.hpp\"\n+#include \"gc\/shared\/workerThread.hpp\"\n+#include \"interpreter\/abstractInterpreter.hpp\"\n+#include \"interpreter\/bootstrapInfo.hpp\"\n+#include \"interpreter\/bytecodes.hpp\"\n+#include \"interpreter\/interp_masm.hpp\"\n+#include \"interpreter\/interpreter.hpp\"\n+#include \"interpreter\/invocationCounter.hpp\"\n+#include \"interpreter\/linkResolver.hpp\"\n+#include \"interpreter\/templateInterpreter.hpp\"\n+#include \"interpreter\/templateTable.hpp\"\n+#include \"interpreter\/zero\/zeroInterpreter.hpp\"\n+#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n+#include \"jfr\/periodic\/sampling\/jfrSampleRequest.hpp\"\n+#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.hpp\"\n+#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdMacros.hpp\"\n+#include \"jfr\/recorder\/storage\/jfrBuffer.hpp\"\n+#include \"jfr\/support\/jfrIntrinsics.hpp\"\n+#include \"jfr\/support\/jfrKlassExtension.hpp\"\n+#include \"jfr\/support\/jfrThreadExtension.hpp\"\n+#include \"jfr\/support\/jfrThreadId.hpp\"\n+#include \"jfr\/support\/jfrThreadLocal.hpp\"\n+#include \"jfr\/support\/jfrTraceIdExtension.hpp\"\n+#include \"jfr\/utilities\/jfrAllocation.hpp\"\n+#include \"jfr\/utilities\/jfrBlob.hpp\"\n+#include \"jfr\/utilities\/jfrRefCountPointer.hpp\"\n+#include \"jfr\/utilities\/jfrTime.hpp\"\n+#include \"jfr\/utilities\/jfrTypes.hpp\"\n+#include \"jvmci\/jvmci_globals.hpp\"\n@@ -38,0 +115,13 @@\n+#include \"logging\/logDecorations.hpp\"\n+#include \"logging\/logDecorators.hpp\"\n+#include \"logging\/logHandle.hpp\"\n+#include \"logging\/logLevel.hpp\"\n+#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logMessageBuffer.hpp\"\n+#include \"logging\/logOutputList.hpp\"\n+#include \"logging\/logPrefix.hpp\"\n+#include \"logging\/logSelection.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"logging\/logTag.hpp\"\n+#include \"logging\/logTagSet.hpp\"\n+#include \"memory\/allStatic.hpp\"\n@@ -39,1 +129,4 @@\n-#include \"memory\/iterator.hpp\"\n+#include \"memory\/arena.hpp\"\n+#include \"memory\/classLoaderMetaspace.hpp\"\n+#include \"memory\/heap.hpp\"\n+#include \"memory\/iterator.inline.hpp\"\n@@ -41,0 +134,6 @@\n+#include \"memory\/metadataFactory.hpp\"\n+#include \"memory\/metaspace.hpp\"\n+#include \"memory\/metaspaceClosure.hpp\"\n+#include \"memory\/padded.hpp\"\n+#include \"memory\/referenceType.hpp\"\n+#include \"memory\/reservedSpace.hpp\"\n@@ -43,3 +142,30 @@\n-#include \"nmt\/memTracker.hpp\"\n-#include \"oops\/instanceKlass.hpp\"\n-#include \"oops\/klass.hpp\"\n+#include \"memory\/virtualspace.hpp\"\n+#include \"metaprogramming\/enableIf.hpp\"\n+#include \"metaprogramming\/primitiveConversions.hpp\"\n+#include \"nmt\/memTag.hpp\"\n+#include \"oops\/access.inline.hpp\"\n+#include \"oops\/accessBackend.inline.hpp\"\n+#include \"oops\/accessDecorators.hpp\"\n+#include \"oops\/annotations.hpp\"\n+#include \"oops\/array.inline.hpp\"\n+#include \"oops\/arrayKlass.hpp\"\n+#include \"oops\/arrayOop.hpp\"\n+#include \"oops\/compressedKlass.inline.hpp\"\n+#include \"oops\/compressedOops.inline.hpp\"\n+#include \"oops\/constMethod.hpp\"\n+#include \"oops\/constMethodFlags.hpp\"\n+#include \"oops\/constantPool.hpp\"\n+#include \"oops\/cpCache.hpp\"\n+#include \"oops\/fieldInfo.inline.hpp\"\n+#include \"oops\/instanceClassLoaderKlass.inline.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/instanceKlassFlags.hpp\"\n+#include \"oops\/instanceMirrorKlass.inline.hpp\"\n+#include \"oops\/instanceOop.hpp\"\n+#include \"oops\/instanceRefKlass.inline.hpp\"\n+#include \"oops\/instanceStackChunkKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n+#include \"oops\/klassFlags.hpp\"\n+#include \"oops\/klassVtable.hpp\"\n+#include \"oops\/markWord.inline.hpp\"\n+#include \"oops\/metadata.hpp\"\n@@ -47,3 +173,7 @@\n-#include \"oops\/objArrayKlass.hpp\"\n-#include \"oops\/objArrayOop.hpp\"\n-#include \"oops\/oop.hpp\"\n+#include \"oops\/methodData.hpp\"\n+#include \"oops\/methodFlags.hpp\"\n+#include \"oops\/objArrayKlass.inline.hpp\"\n+#include \"oops\/objArrayOop.inline.hpp\"\n+#include \"oops\/objLayout.inline.hpp\"\n+#include \"oops\/oop.inline.hpp\"\n+#include \"oops\/oopHandle.inline.hpp\"\n@@ -51,0 +181,9 @@\n+#include \"oops\/stackChunkOop.inline.hpp\"\n+#include \"oops\/symbol.hpp\"\n+#include \"oops\/typeArrayKlass.inline.hpp\"\n+#include \"oops\/typeArrayOop.inline.hpp\"\n+#include \"oops\/weakHandle.inline.hpp\"\n+#include \"opto\/adlcVMDeps.hpp\"\n+#include \"opto\/c2_globals.hpp\"\n+#include \"prims\/vectorSupport.hpp\"\n+#include \"runtime\/abstract_vm_version.hpp\"\n@@ -52,0 +191,7 @@\n+#include \"runtime\/basicLock.hpp\"\n+#include \"runtime\/continuation.hpp\"\n+#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationJavaClasses.inline.hpp\"\n+#include \"runtime\/deoptimization.hpp\"\n+#include \"runtime\/flags\/flagSetting.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n@@ -53,1 +199,5 @@\n-#include \"runtime\/handles.hpp\"\n+#include \"runtime\/globals_shared.hpp\"\n+#include \"runtime\/handles.inline.hpp\"\n+#include \"runtime\/handshake.hpp\"\n+#include \"runtime\/icache.hpp\"\n+#include \"runtime\/javaFrameAnchor.hpp\"\n@@ -55,0 +205,2 @@\n+#include \"runtime\/lockStack.hpp\"\n+#include \"runtime\/monitorChunk.hpp\"\n@@ -56,0 +208,3 @@\n+#include \"runtime\/mutexLocker.hpp\"\n+#include \"runtime\/nonJavaThread.hpp\"\n+#include \"runtime\/objectMonitor.hpp\"\n@@ -58,0 +213,25 @@\n+#include \"runtime\/osInfo.hpp\"\n+#include \"runtime\/park.hpp\"\n+#include \"runtime\/perfDataTypes.hpp\"\n+#include \"runtime\/registerMap.hpp\"\n+#include \"runtime\/safepoint.hpp\"\n+#include \"runtime\/safepointMechanism.hpp\"\n+#include \"runtime\/semaphore.hpp\"\n+#include \"runtime\/sharedRuntime.hpp\"\n+#include \"runtime\/smallRegisterMap.inline.hpp\"\n+#include \"runtime\/stackChunkFrameStream.hpp\"\n+#include \"runtime\/stackOverflow.hpp\"\n+#include \"runtime\/stackWatermarkKind.hpp\"\n+#include \"runtime\/stackWatermarkSet.hpp\"\n+#include \"runtime\/stubCodeGenerator.hpp\"\n+#include \"runtime\/stubDeclarations.hpp\"\n+#include \"runtime\/stubInfo.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"runtime\/suspendResumeManager.hpp\"\n+#include \"runtime\/task.hpp\"\n+#include \"runtime\/thread.hpp\"\n+#include \"runtime\/threadHeapSampler.hpp\"\n+#include \"runtime\/threadIdentifier.hpp\"\n+#include \"runtime\/threadLocalStorage.hpp\"\n+#include \"runtime\/threadStatisticalInfo.hpp\"\n+#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -59,0 +239,6 @@\n+#include \"runtime\/unhandledOops.hpp\"\n+#include \"runtime\/vmOperation.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n+#include \"runtime\/vm_version.hpp\"\n+#include \"services\/memoryUsage.hpp\"\n+#include \"utilities\/accessFlags.hpp\"\n@@ -60,1 +246,8 @@\n-#include \"utilities\/bitMap.hpp\"\n+#include \"utilities\/autoRestore.hpp\"\n+#include \"utilities\/bitMap.inline.hpp\"\n+#include \"utilities\/breakpoint.hpp\"\n+#include \"utilities\/bytes.hpp\"\n+#include \"utilities\/byteswap.hpp\"\n+#include \"utilities\/checkedCast.hpp\"\n+#include \"utilities\/compilerWarnings.hpp\"\n+#include \"utilities\/constantTag.hpp\"\n@@ -62,0 +255,2 @@\n+#include \"utilities\/count_leading_zeros.hpp\"\n+#include \"utilities\/count_trailing_zeros.hpp\"\n@@ -63,0 +258,2 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n+#include \"utilities\/enumIterator.hpp\"\n@@ -64,0 +261,4 @@\n+#include \"utilities\/fakeRttiSupport.hpp\"\n+#include \"utilities\/filterQueue.hpp\"\n+#include \"utilities\/forbiddenFunctions.hpp\"\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -66,0 +267,1 @@\n+#include \"utilities\/linkedlist.hpp\"\n@@ -67,0 +269,1 @@\n+#include \"utilities\/numberSeq.hpp\"\n@@ -68,0 +271,8 @@\n+#include \"utilities\/population_count.hpp\"\n+#include \"utilities\/powerOfTwo.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n+#include \"utilities\/resourceHash.hpp\"\n+#include \"utilities\/rotate_bits.hpp\"\n+#include \"utilities\/singleWriterSynchronizer.hpp\"\n+#include \"utilities\/sizes.hpp\"\n+#include \"utilities\/tableStatistics.hpp\"\n@@ -69,9 +280,5 @@\n-\n-#ifdef TARGET_COMPILER_visCPP\n-\/\/ For Visual Studio, including the *.inline.hpp files actually\n-\/\/ increased performance.\n-#include \"memory\/allocation.inline.hpp\"\n-#include \"oops\/access.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-#include \"runtime\/handles.inline.hpp\"\n-#endif \/\/ TARGET_COMPILER_visCPP\n+#include \"utilities\/unsigned5.hpp\"\n+#include \"utilities\/utf8.hpp\"\n+#include \"utilities\/vmEnums.hpp\"\n+#include \"utilities\/waitBarrier.hpp\"\n+#include \"utilities\/waitBarrier_generic.hpp\"\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":230,"deletions":23,"binary":false,"changes":253,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public final class PrecompiledHeaders {\n+\n+    private static final Pattern DEPENDENCY_LINE_PATTERN = Pattern.compile(\"\\\\s*(\\\\S+.hpp)\\\\s*\\\\\\\\?\");\n+    private static final Pattern INCLUDE_PATTERN = Pattern.compile(\"^#\\\\s*include \\\"([^\\\"]+)\\\"$\");\n+    private static final String OBJS_PATH = \"hotspot\/variant-server\/libjvm\/objs\";\n+    private static final String PRECOMPILED_HPP_NAME = \"precompiled.hpp\";\n+    private static final String PRECOMPILED_HPP_PATH = \"src\/hotspot\/share\/precompiled\/\" + PRECOMPILED_HPP_NAME;\n+    private static final String INLINE_HPP_SUFFIX = \".inline.hpp\";\n+    private static final String HOTSPOT_SOURCE_PREFIX = \"\/jdk\/src\/hotspot\/share\/\";\n+\n+    private PrecompiledHeaders() {\n+        throw new UnsupportedOperationException(\"Instances not allowed\");\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length < 2 || args.length > 3) {\n+            System.err.println(\"Usage: min_inclusion_count build_root [jdk_root=.]\");\n+            System.exit(1);\n+        }\n+\n+        int minInclusionCount = Integer.parseInt(args[0]);\n+        Path buildRoot = Path.of(args[1]).toAbsolutePath();\n+        if (!Files.isDirectory(buildRoot)) {\n+            throw new IllegalArgumentException(\"build_root is not a directory: \" + buildRoot);\n+        }\n+        Path jdkRoot = Path.of(args.length == 3 ? args[2] : \".\").toAbsolutePath();\n+        if (!Files.isDirectory(jdkRoot)) {\n+            throw new IllegalArgumentException(\"jdk_root is not a directory: \" + jdkRoot);\n+        }\n+\n+        Path objsPath = buildRoot.resolve(OBJS_PATH);\n+        if (!Files.isDirectory(objsPath)) {\n+            throw new IllegalArgumentException(\"Could not find 'objs' directory: \" + objsPath);\n+        }\n+\n+        \/\/ Count inclusion times for each header\n+        Map<String, Integer> occurrences;\n+        try (Stream<Path> files = Files.list(objsPath)) {\n+            occurrences = files\n+                    .filter(file -> file.getFileName().toString().endsWith(\".d\"))\n+                    .filter(Predicate.not(file -> file.getFileName().toString().startsWith(\"BUILD_LIBJVM\")))\n+                    .filter(Predicate.not(file -> file.getFileName().toString().contains(PRECOMPILED_HPP_NAME)))\n+                    .flatMap(file -> {\n+                        try {\n+                            \/\/ The first line contains the object name\n+                            return Files.lines(file).skip(1).distinct();\n+                        } catch (IOException exception) {\n+                            throw new UncheckedIOException(exception);\n+                        }\n+                    })\n+                    .map(DEPENDENCY_LINE_PATTERN::matcher)\n+                    .filter(Matcher::matches)\n+                    .map(matcher -> matcher.group(1))\n+                    .filter(dependency -> dependency.startsWith(HOTSPOT_SOURCE_PREFIX))\n+                    \/\/ Avoid compiler specific headers\n+                    .filter(Predicate.not(dependency -> dependency.endsWith(\"_gcc.hpp\")))\n+                    .filter(Predicate.not(dependency -> dependency.endsWith(\"_visCPP.hpp\")))\n+                    .filter(Predicate.not(dependency -> dependency.endsWith(\"\/\" + PRECOMPILED_HPP_NAME)))\n+                    .map(dependency -> dependency.replace(HOTSPOT_SOURCE_PREFIX, \"\"))\n+                    .collect(Collectors.toMap(Function.identity(), s -> 1, Integer::sum));\n+        }\n+\n+        \/\/ Keep only the headers which are included at least 'minInclusionCount' times\n+        Set<String> headers = occurrences.entrySet().stream()\n+                .filter(entry -> entry.getValue() >= minInclusionCount)\n+                .map(Map.Entry::getKey)\n+                .collect(Collectors.toSet());\n+\n+        List<String> inlineIncludes = occurrences.keySet().stream()\n+                .filter(s -> s.endsWith(INLINE_HPP_SUFFIX))\n+                .toList();\n+        \/\/ If both inline and non-inline headers are to be included, prefer the inline header\n+        for (String inlineInclude : inlineIncludes) {\n+            if (headers.contains(inlineInclude)) {\n+                String noInlineInclude = inlineInclude.replace(INLINE_HPP_SUFFIX, \".hpp\");\n+                headers.remove(noInlineInclude);\n+            }\n+        }\n+\n+        Path precompiledHpp = jdkRoot.resolve(PRECOMPILED_HPP_PATH);\n+        try (Stream<String> lines = Files.lines(precompiledHpp)) {\n+            String precompiledHppHeader = lines\n+                    .takeWhile(Predicate.not(s -> INCLUDE_PATTERN.matcher(s).matches()))\n+                    .collect(Collectors.joining(System.lineSeparator()));\n+            Files.write(precompiledHpp, precompiledHppHeader.getBytes());\n+        }\n+\n+        String headerLines = headers.stream()\n+                .sorted()\n+                .map(header -> String.format(\"#include \\\"%s\\\"\", header))\n+                .collect(Collectors.joining(System.lineSeparator()));\n+        Files.write(precompiledHpp,\n+                (System.lineSeparator() + headerLines + System.lineSeparator()).getBytes(),\n+                StandardOpenOption.APPEND);\n+    }\n+\n+}\n","filename":"src\/utils\/PrecompiledHeaders\/PrecompiledHeaders.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+# Hotspot precompiled headers\n+\n+This directory contains a simple tool to refresh the current set of precompiled headers\n+in `src\/hotspot`. The headers are selected according to how frequently they are included\n+in Hotspot source code.\n+\n+## Usage\n+\n+The script requires two parameters:\n+- The minimum inclusion count a header must reach in order to be precompiled;\n+- The path to a build, which will be used to extract dependency information for each Hotspot\n+    source file.\n+Optionally, the root path to the JDK project can be specified as the second parameter.\n+\n+```bash\n+$ javac src\/utils\/PrecompiledHeaders\/PrecompiledHeaders.java\n+$ java -cp src\/utils\/PrecompiledHeaders PrecompiledHeaders min_inclusion_count build_root [jdk_root=.]\n+```\n+\n+The script will write to `src\/hotspot\/share\/precompiled\/precompiled.hpp` the new set of\n+headers selected to be precompiled.\n+\n+## Related tickets\n+\n+- [JDK-8213339](https:\/\/bugs.openjdk.org\/browse\/JDK-8213339)\n+- [JDK-8365053](https:\/\/bugs.openjdk.org\/browse\/JDK-8365053)\n","filename":"src\/utils\/PrecompiledHeaders\/README.md","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"}]}