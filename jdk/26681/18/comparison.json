{"files":[{"patch":"@@ -0,0 +1,101 @@\n+#!\/bin\/sh\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+\n+# The output of this script may require some degree of human curation:\n+# - Redundant headers, e.g. both x.hpp, x.inline.hpp are included;\n+# - Headers relative to a non-default feature should be protected by an\n+#   appropriate 'if' clause to make sure all variants can build without \n+#   errors.\n+\n+# Time threshold for header compilation, if the time exceeds the\n+# threshold the header will be precompiled.\n+if [ -z \"$MIN_MS\" ]; then\n+  MIN_MS=100000\n+fi\n+\n+if [ -z \"$CLEAN\" ]; then\n+  CLEAN=true\n+elif [ \"$CLEAN\" != \"true\" ] && [ \"$CLEAN\" != \"false\" ]; then\n+  echo \"Expected either 'true' or 'false' for CLEAN\"\n+fi\n+\n+# CBA_PATH should point to a valid ClangBuildAnalyzer executable.\n+# Build steps:\n+# git clone --depth 1 git@github.com:aras-p\/ClangBuildAnalyzer.git\n+# cd ClangBuildAnalyzer\n+# make -f projects\/make\/Makefile\n+if [ -z \"$CBA_PATH\" ]; then\n+  CBA_PATH=\".\/ClangBuildAnalyzer\/build\/ClangBuildAnalyzer\"\n+fi\n+\n+set -eux\n+\n+PRECOMPILED_HPP=\"src\/hotspot\/share\/precompiled\/precompiled.hpp\"\n+CBA_CONFIG=\"ClangBuildAnalyzer.ini\"\n+TIMESTAMP=\"$(date +%Y%m%d-%H%M)\"\n+RUN_NAME=\"pch_update_$TIMESTAMP\"\n+CBA_OUTPUT=\"cba_out_$TIMESTAMP\"\n+\n+if [ \"$CLEAN\" = \"true\" ]; then\n+  trap 'rm -rf \"build\/'\"$RUN_NAME\"'\" \"$CBA_OUTPUT\" \"$CBA_CONFIG\"' EXIT\n+fi\n+\n+sh configure --with-toolchain-type=clang \\\n+             --with-conf-name=\"$RUN_NAME\" \\\n+             --disable-precompiled-headers \\\n+             --with-extra-cxxflags=\"-ftime-trace\" \\\n+             --with-extra-cflags=\"-ftime-trace\"\n+\n+make clean CONF_NAME=\"$RUN_NAME\"\n+make hotspot CONF_NAME=\"$RUN_NAME\"\n+\"$CBA_PATH\" --all \".\/build\/$RUN_NAME\/hotspot\/variant-server\/libjvm\/objs\" \\\n+  \"$CBA_OUTPUT\"\n+\n+# Preserve license and comments on top\n+cat \"$PRECOMPILED_HPP\" | awk '\/^#include\/ {exit} {print}' > \"$PRECOMPILED_HPP.tmp\"\n+\n+if [ ! -f \"$CBA_CONFIG\" ]; then\n+cat <<EOF > \"$CBA_CONFIG\"\n+[counts]\n+header=100\n+headerChain=0\n+template=0\n+function=0\n+fileCodegen=0\n+fileParse=0\n+\n+[misc]\n+onlyRootHeaders=true\n+EOF\n+fi\n+\n+\"$CBA_PATH\" --analyze \"$CBA_OUTPUT\" | \\\n+  grep \" ms: \" | \\\n+  # Keep the headers more expensive than ${1}ms\n+  awk -v x=\"$MIN_MS\" '$1 < x { exit } { print $3 }' | \\\n+  # Filter away non-hotspot headers\n+  grep hotspot\/share | \\\n+  awk -F \"hotspot\/share\/\" '{ printf \"#include \\\"%s\\\"\\n\", $2 }' \\\n+  >> \"$PRECOMPILED_HPP.tmp\"\n+mv \"$PRECOMPILED_HPP.tmp\" \"$PRECOMPILED_HPP\"\n+\n+java \/jdk\/test\/hotspot\/jtreg\/sources\/SortIncludes.java --update \/jdk\/src\/hotspot\/share\/precompiled\n","filename":"make\/scripts\/update_pch.sh","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -28,3 +28,3 @@\n-\/\/ These header files are included in at least 130 C++ files, as of\n-\/\/ measurements made in November 2018. This list excludes files named\n-\/\/ *.inline.hpp, since including them decreased build performance.\n+\/\/ These header files are selected using the output of Clang\n+\/\/ '-ftime-trace' as a measure of how much time we spend\n+\/\/ compiling them.\n@@ -32,6 +32,1 @@\n-#include \"classfile\/classLoaderData.hpp\"\n-#include \"classfile\/javaClasses.hpp\"\n-#include \"classfile\/systemDictionary.hpp\"\n-#include \"gc\/shared\/collectedHeap.hpp\"\n-#include \"gc\/shared\/gcCause.hpp\"\n-#include \"logging\/log.hpp\"\n+#include \"classfile\/javaClasses.inline.hpp\"\n@@ -39,35 +34,1 @@\n-#include \"memory\/iterator.hpp\"\n-#include \"memory\/memRegion.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-#include \"memory\/universe.hpp\"\n-#include \"nmt\/memTracker.hpp\"\n-#include \"oops\/instanceKlass.hpp\"\n-#include \"oops\/klass.hpp\"\n-#include \"oops\/method.hpp\"\n-#include \"oops\/objArrayKlass.hpp\"\n-#include \"oops\/objArrayOop.hpp\"\n-#include \"oops\/oop.hpp\"\n-#include \"oops\/oopsHierarchy.hpp\"\n-#include \"runtime\/atomic.hpp\"\n-#include \"runtime\/globals.hpp\"\n-#include \"runtime\/handles.hpp\"\n-#include \"runtime\/javaThread.hpp\"\n-#include \"runtime\/mutex.hpp\"\n-#include \"runtime\/orderAccess.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/timer.hpp\"\n-#include \"utilities\/align.hpp\"\n-#include \"utilities\/bitMap.hpp\"\n-#include \"utilities\/copy.hpp\"\n-#include \"utilities\/debug.hpp\"\n-#include \"utilities\/exceptions.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/growableArray.hpp\"\n-#include \"utilities\/macros.hpp\"\n-#include \"utilities\/ostream.hpp\"\n-#include \"utilities\/ticks.hpp\"\n-\n-#ifdef TARGET_COMPILER_visCPP\n-\/\/ For Visual Studio, including the *.inline.hpp files actually\n-\/\/ increased performance.\n-#include \"memory\/allocation.inline.hpp\"\n+#include \"memory\/iterator.inline.hpp\"\n@@ -75,0 +36,2 @@\n+#include \"oops\/instanceStackChunkKlass.inline.hpp\"\n+#include \"oops\/objArrayOop.inline.hpp\"\n@@ -76,2 +39,13 @@\n-#include \"runtime\/handles.inline.hpp\"\n-#endif \/\/ TARGET_COMPILER_visCPP\n+#include \"oops\/oopHandle.inline.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n+#include \"runtime\/javaThread.inline.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#if INCLUDE_SHENANDOAHGC\n+#include \"gc\/shenandoah\/shenandoahBarrierSet.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n+#endif\n+#if INCLUDE_ZGC\n+#include \"gc\/z\/zBarrier.inline.hpp\"\n+#include \"gc\/z\/zGeneration.inline.hpp\"\n+#include \"gc\/z\/zHeap.inline.hpp\"\n+#endif\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":20,"deletions":46,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+                    \"share\/precompiled\",\n","filename":"test\/hotspot\/jtreg\/sources\/TestIncludesAreSorted.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}