{"files":[{"patch":"@@ -41,0 +41,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n@@ -237,2 +238,0 @@\n-#include \"include\/jvm_constants.h\"\n-#include \"include\/jvm_io.h\"\n@@ -249,1 +248,1 @@\n-#include \"jfr\/jfr.inline.hpp\"\n+#include \"jfr\/jfr.hpp\"\n@@ -252,1 +251,0 @@\n-#include \"jfr\/periodic\/sampling\/jfrThreadSampling.hpp\"\n@@ -292,0 +290,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -300,0 +299,6 @@\n+#include \"nmt\/allocationSite.hpp\"\n+#include \"nmt\/arrayWithFreeList.hpp\"\n+#include \"nmt\/mallocHeader.hpp\"\n+#include \"nmt\/mallocSiteTable.hpp\"\n+#include \"nmt\/mallocTracker.hpp\"\n+#include \"nmt\/memBaseline.hpp\"\n@@ -301,0 +306,9 @@\n+#include \"nmt\/memTracker.hpp\"\n+#include \"nmt\/memoryFileTracker.hpp\"\n+#include \"nmt\/nmtCommon.hpp\"\n+#include \"nmt\/nmtNativeCallStackStorage.hpp\"\n+#include \"nmt\/nmtTreap.hpp\"\n+#include \"nmt\/regionsTree.hpp\"\n+#include \"nmt\/threadStackTracker.hpp\"\n+#include \"nmt\/virtualMemoryTracker.hpp\"\n+#include \"nmt\/vmatree.hpp\"\n@@ -365,1 +379,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -388,2 +401,1 @@\n-#include \"runtime\/safepointMechanism.inline.hpp\"\n-#include \"runtime\/safepointVerifiers.hpp\"\n+#include \"runtime\/safepointMechanism.hpp\"\n@@ -392,0 +404,1 @@\n+#include \"runtime\/signature.hpp\"\n@@ -409,1 +422,0 @@\n-#include \"runtime\/threadSMR.hpp\"\n@@ -415,1 +427,0 @@\n-#include \"runtime\/vmOperations.hpp\"\n@@ -431,1 +442,0 @@\n-#include \"utilities\/compilerWarnings_gcc.hpp\"\n@@ -437,0 +447,1 @@\n+#include \"utilities\/deferredStatic.hpp\"\n@@ -445,1 +456,0 @@\n-#include \"utilities\/globalDefinitions_gcc.hpp\"\n@@ -450,0 +460,1 @@\n+#include \"utilities\/nativeCallStack.hpp\"\n@@ -456,1 +467,0 @@\n-#include \"utilities\/preserveException.hpp\"\n@@ -470,1 +480,1 @@\n-#include \"utilities\/waitBarrier_generic.hpp\"\n\\ No newline at end of file\n+#include \"utilities\/waitBarrier_generic.hpp\"\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private static final Pattern DEPENDENCY_LINE_PATTERN = Pattern.compile(\"\\\\s*(\\\\S+)\\\\s*\\\\\\\\?\");\n+    private static final Pattern DEPENDENCY_LINE_PATTERN = Pattern.compile(\"\\\\s*(\\\\S+.hpp)\\\\s*\\\\\\\\?\");\n@@ -45,1 +45,2 @@\n-    private static final String PRECOMPILED_HPP = \"src\/hotspot\/share\/precompiled\/precompiled.hpp\";\n+    private static final String PRECOMPILED_HPP_NAME = \"precompiled.hpp\";\n+    private static final String PRECOMPILED_HPP_PATH = \"src\/hotspot\/share\/precompiled\/\" + PRECOMPILED_HPP_NAME;\n@@ -79,0 +80,3 @@\n+                    .filter(Predicate.not(file -> file.getFileName().toString().startsWith(\"BUILD_LIBJVM\")))\n+                    .filter(Predicate.not(file -> file.getFileName().toString().startsWith(\"BUILD_LIBJVM\")))\n+                    .filter(Predicate.not(file -> file.getFileName().toString().contains(PRECOMPILED_HPP_NAME)))\n@@ -92,0 +96,4 @@\n+                    \/\/ Avoid compiler specific headers\n+                    .filter(Predicate.not(dependency -> dependency.endsWith(\"_gcc.hpp\")))\n+                    .filter(Predicate.not(dependency -> dependency.endsWith(\"_visCPP.hpp\")))\n+                    .filter(Predicate.not(dependency -> dependency.endsWith(\"\/\" + PRECOMPILED_HPP_NAME)))\n@@ -113,1 +121,1 @@\n-        Path precompiledHpp = jdkRoot.resolve(PRECOMPILED_HPP);\n+        Path precompiledHpp = jdkRoot.resolve(PRECOMPILED_HPP_PATH);\n@@ -126,1 +134,1 @@\n-                (System.lineSeparator() + headerLines).getBytes(),\n+                (System.lineSeparator() + headerLines + System.lineSeparator()).getBytes(),\n","filename":"src\/utils\/PrecompiledHeaders\/PrecompiledHeaders.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}