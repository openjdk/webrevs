{"files":[{"patch":"@@ -1559,1 +1559,1 @@\n-were it is properly supported (clang, gcc, and Visual Studio). Normally, this\n+where it is properly supported (clang, gcc, and Visual Studio). Normally, this\n","filename":"doc\/building.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-\/\/ These header files are included in at least 130 C++ files, as of\n-\/\/ measurements made in August 2025.\n+\/\/ These header files are selected using the output of Clang\n+\/\/ '-ftime-trace' as a measure of how much time we spend\n+\/\/ compiling them.\n@@ -31,9 +32,0 @@\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/codeBuffer.hpp\"\n-#include \"asm\/macroAssembler.hpp\"\n-#include \"asm\/register.hpp\"\n-#include \"c1\/c1_globals.hpp\"\n-#include \"cds\/aotLinkedClassBulkLoader.hpp\"\n-#include \"cds\/cds_globals.hpp\"\n-#include \"classfile\/classLoaderData.inline.hpp\"\n-#include \"classfile\/compactHashtable.hpp\"\n@@ -41,87 +33,9 @@\n-#include \"classfile\/vmClassID.hpp\"\n-#include \"classfile\/vmClassMacros.hpp\"\n-#include \"classfile\/vmClasses.hpp\"\n-#include \"classfile\/vmIntrinsics.hpp\"\n-#include \"code\/codeBlob.inline.hpp\"\n-#include \"code\/codeCache.inline.hpp\"\n-#include \"code\/compressedStream.hpp\"\n-#include \"code\/debugInfo.hpp\"\n-#include \"code\/location.hpp\"\n-#include \"code\/nativeInst.hpp\"\n-#include \"code\/nmethod.inline.hpp\"\n-#include \"code\/oopRecorder.hpp\"\n-#include \"code\/pcDesc.hpp\"\n-#include \"code\/relocInfo.hpp\"\n-#include \"code\/stubs.hpp\"\n-#include \"code\/vmreg.inline.hpp\"\n-#include \"code\/vmregTypes.hpp\"\n-#include \"compiler\/compilerDefinitions.hpp\"\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"compiler\/compiler_globals_pd.hpp\"\n-#include \"compiler\/oopMap.inline.hpp\"\n-#include \"gc\/serial\/serial_globals.hpp\"\n-#include \"gc\/shared\/barrierSet.inline.hpp\"\n-#include \"gc\/shared\/barrierSetConfig.inline.hpp\"\n-#include \"gc\/shared\/barrierSetStackChunk.hpp\"\n-#include \"gc\/shared\/cardTable.hpp\"\n-#include \"gc\/shared\/cardTableBarrierSet.inline.hpp\"\n-#include \"gc\/shared\/collectedHeap.hpp\"\n-#include \"gc\/shared\/gcBehaviours.hpp\"\n-#include \"gc\/shared\/gcCause.hpp\"\n-#include \"gc\/shared\/gcId.hpp\"\n-#include \"gc\/shared\/gcThreadLocalData.hpp\"\n-#include \"gc\/shared\/gcUtil.hpp\"\n-#include \"gc\/shared\/gcWhen.hpp\"\n-#include \"gc\/shared\/gc_globals.hpp\"\n-#include \"gc\/shared\/modRefBarrierSet.inline.hpp\"\n-#include \"gc\/shared\/oopStorage.inline.hpp\"\n-#include \"gc\/shared\/referenceDiscoverer.hpp\"\n-#include \"gc\/shared\/referencePolicy.hpp\"\n-#include \"gc\/shared\/referenceProcessor.hpp\"\n-#include \"gc\/shared\/referenceProcessorStats.hpp\"\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n-#include \"gc\/shared\/threadLocalAllocBuffer.hpp\"\n-#include \"gc\/shared\/verifyOption.hpp\"\n-#include \"gc\/shared\/workerThread.hpp\"\n-#include \"interpreter\/abstractInterpreter.hpp\"\n-#include \"interpreter\/bootstrapInfo.hpp\"\n-#include \"interpreter\/bytecodes.hpp\"\n-#include \"interpreter\/interp_masm.hpp\"\n-#include \"interpreter\/interpreter.hpp\"\n-#include \"interpreter\/invocationCounter.hpp\"\n-#include \"interpreter\/linkResolver.hpp\"\n-#include \"interpreter\/templateInterpreter.hpp\"\n-#include \"interpreter\/templateTable.hpp\"\n-#include \"interpreter\/zero\/zeroInterpreter.hpp\"\n-#include \"jfr\/jfr.hpp\"\n-#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n-#include \"jfr\/periodic\/sampling\/jfrSampleRequest.hpp\"\n-#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.hpp\"\n-#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdMacros.hpp\"\n-#include \"jfr\/recorder\/storage\/jfrBuffer.hpp\"\n-#include \"jfr\/support\/jfrIntrinsics.hpp\"\n-#include \"jfr\/support\/jfrKlassExtension.hpp\"\n-#include \"jfr\/support\/jfrThreadExtension.hpp\"\n-#include \"jfr\/support\/jfrThreadId.hpp\"\n-#include \"jfr\/support\/jfrThreadLocal.hpp\"\n-#include \"jfr\/support\/jfrTraceIdExtension.hpp\"\n-#include \"jfr\/utilities\/jfrAllocation.hpp\"\n-#include \"jfr\/utilities\/jfrBlob.hpp\"\n-#include \"jfr\/utilities\/jfrRefCountPointer.hpp\"\n-#include \"jfr\/utilities\/jfrTime.hpp\"\n-#include \"jfr\/utilities\/jfrTypes.hpp\"\n-#include \"jvmci\/jvmci_globals.hpp\"\n-#include \"logging\/log.hpp\"\n-#include \"logging\/logDecorations.hpp\"\n-#include \"logging\/logDecorators.hpp\"\n-#include \"logging\/logHandle.hpp\"\n-#include \"logging\/logLevel.hpp\"\n-#include \"logging\/logMessage.hpp\"\n-#include \"logging\/logMessageBuffer.hpp\"\n-#include \"logging\/logOutputList.hpp\"\n-#include \"logging\/logPrefix.hpp\"\n-#include \"logging\/logSelection.hpp\"\n-#include \"logging\/logStream.hpp\"\n-#include \"logging\/logTag.hpp\"\n-#include \"logging\/logTagSet.hpp\"\n-#include \"memory\/allStatic.hpp\"\n+#if INCLUDE_SHENANDOAHGC\n+#include \"gc\/shenandoah\/shenandoahBarrierSet.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n+#endif\n+#if INCLUDE_ZGC\n+#include \"gc\/z\/zBarrier.inline.hpp\"\n+#include \"gc\/z\/zGeneration.inline.hpp\"\n+#include \"gc\/z\/zHeap.inline.hpp\"\n+#endif\n@@ -129,3 +43,0 @@\n-#include \"memory\/arena.hpp\"\n-#include \"memory\/classLoaderMetaspace.hpp\"\n-#include \"memory\/heap.hpp\"\n@@ -133,13 +44,0 @@\n-#include \"memory\/memRegion.hpp\"\n-#include \"memory\/metadataFactory.hpp\"\n-#include \"memory\/metaspace.hpp\"\n-#include \"memory\/metaspaceClosure.hpp\"\n-#include \"memory\/padded.hpp\"\n-#include \"memory\/referenceType.hpp\"\n-#include \"memory\/reservedSpace.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-#include \"memory\/universe.hpp\"\n-#include \"memory\/virtualspace.hpp\"\n-#include \"metaprogramming\/enableIf.hpp\"\n-#include \"metaprogramming\/primitiveConversions.hpp\"\n-#include \"nmt\/memTag.hpp\"\n@@ -147,19 +45,0 @@\n-#include \"oops\/accessBackend.inline.hpp\"\n-#include \"oops\/accessDecorators.hpp\"\n-#include \"oops\/annotations.hpp\"\n-#include \"oops\/array.inline.hpp\"\n-#include \"oops\/arrayKlass.hpp\"\n-#include \"oops\/arrayOop.hpp\"\n-#include \"oops\/compressedKlass.inline.hpp\"\n-#include \"oops\/compressedOops.inline.hpp\"\n-#include \"oops\/constMethod.hpp\"\n-#include \"oops\/constMethodFlags.hpp\"\n-#include \"oops\/constantPool.hpp\"\n-#include \"oops\/cpCache.hpp\"\n-#include \"oops\/fieldInfo.inline.hpp\"\n-#include \"oops\/instanceClassLoaderKlass.inline.hpp\"\n-#include \"oops\/instanceKlass.inline.hpp\"\n-#include \"oops\/instanceKlassFlags.hpp\"\n-#include \"oops\/instanceMirrorKlass.inline.hpp\"\n-#include \"oops\/instanceOop.hpp\"\n-#include \"oops\/instanceRefKlass.inline.hpp\"\n@@ -167,9 +46,0 @@\n-#include \"oops\/klass.inline.hpp\"\n-#include \"oops\/klassFlags.hpp\"\n-#include \"oops\/klassVtable.hpp\"\n-#include \"oops\/markWord.inline.hpp\"\n-#include \"oops\/metadata.hpp\"\n-#include \"oops\/method.hpp\"\n-#include \"oops\/methodData.hpp\"\n-#include \"oops\/methodFlags.hpp\"\n-#include \"oops\/objArrayKlass.inline.hpp\"\n@@ -177,2 +47,0 @@\n-#include \"oops\/objLayout.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n@@ -180,17 +48,1 @@\n-#include \"oops\/oopsHierarchy.hpp\"\n-#include \"oops\/stackChunkOop.inline.hpp\"\n-#include \"oops\/symbol.hpp\"\n-#include \"oops\/typeArrayKlass.inline.hpp\"\n-#include \"oops\/typeArrayOop.inline.hpp\"\n-#include \"oops\/weakHandle.inline.hpp\"\n-#include \"opto\/adlcVMDeps.hpp\"\n-#include \"opto\/c2_globals.hpp\"\n-#include \"prims\/vectorSupport.hpp\"\n-#include \"runtime\/abstract_vm_version.hpp\"\n-#include \"runtime\/atomic.hpp\"\n-#include \"runtime\/basicLock.hpp\"\n-#include \"runtime\/continuation.hpp\"\n-#include \"runtime\/continuationEntry.hpp\"\n-#include \"runtime\/continuationJavaClasses.inline.hpp\"\n-#include \"runtime\/deoptimization.hpp\"\n-#include \"runtime\/flags\/flagSetting.hpp\"\n+#include \"oops\/oop.inline.hpp\"\n@@ -198,67 +50,1 @@\n-#include \"runtime\/globals.hpp\"\n-#include \"runtime\/globals_shared.hpp\"\n-#include \"runtime\/handles.inline.hpp\"\n-#include \"runtime\/handshake.hpp\"\n-#include \"runtime\/icache.hpp\"\n-#include \"runtime\/javaFrameAnchor.hpp\"\n-#include \"runtime\/javaThread.hpp\"\n-#include \"runtime\/lockStack.hpp\"\n-#include \"runtime\/monitorChunk.hpp\"\n-#include \"runtime\/mutex.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n-#include \"runtime\/nonJavaThread.hpp\"\n-#include \"runtime\/objectMonitor.hpp\"\n-#include \"runtime\/orderAccess.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/osInfo.hpp\"\n-#include \"runtime\/park.hpp\"\n-#include \"runtime\/perfDataTypes.hpp\"\n-#include \"runtime\/registerMap.hpp\"\n-#include \"runtime\/safepoint.hpp\"\n-#include \"runtime\/safepointMechanism.hpp\"\n-#include \"runtime\/semaphore.hpp\"\n-#include \"runtime\/sharedRuntime.hpp\"\n-#include \"runtime\/smallRegisterMap.inline.hpp\"\n-#include \"runtime\/stackChunkFrameStream.hpp\"\n-#include \"runtime\/stackOverflow.hpp\"\n-#include \"runtime\/stackWatermarkKind.hpp\"\n-#include \"runtime\/stackWatermarkSet.hpp\"\n-#include \"runtime\/stubCodeGenerator.hpp\"\n-#include \"runtime\/stubDeclarations.hpp\"\n-#include \"runtime\/stubInfo.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"runtime\/suspendResumeManager.hpp\"\n-#include \"runtime\/task.hpp\"\n-#include \"runtime\/thread.hpp\"\n-#include \"runtime\/threadHeapSampler.hpp\"\n-#include \"runtime\/threadIdentifier.hpp\"\n-#include \"runtime\/threadLocalStorage.hpp\"\n-#include \"runtime\/threadStatisticalInfo.hpp\"\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n-#include \"runtime\/timer.hpp\"\n-#include \"runtime\/unhandledOops.hpp\"\n-#include \"runtime\/vmOperation.hpp\"\n-#include \"runtime\/vmThread.hpp\"\n-#include \"runtime\/vm_version.hpp\"\n-#include \"services\/memoryUsage.hpp\"\n-#include \"utilities\/accessFlags.hpp\"\n-#include \"utilities\/align.hpp\"\n-#include \"utilities\/autoRestore.hpp\"\n-#include \"utilities\/bitMap.inline.hpp\"\n-#include \"utilities\/breakpoint.hpp\"\n-#include \"utilities\/bytes.hpp\"\n-#include \"utilities\/byteswap.hpp\"\n-#include \"utilities\/checkedCast.hpp\"\n-#include \"utilities\/compilerWarnings.hpp\"\n-#include \"utilities\/constantTag.hpp\"\n-#include \"utilities\/copy.hpp\"\n-#include \"utilities\/count_leading_zeros.hpp\"\n-#include \"utilities\/count_trailing_zeros.hpp\"\n-#include \"utilities\/debug.hpp\"\n-#include \"utilities\/devirtualizer.inline.hpp\"\n-#include \"utilities\/enumIterator.hpp\"\n-#include \"utilities\/exceptions.hpp\"\n-#include \"utilities\/fakeRttiSupport.hpp\"\n-#include \"utilities\/filterQueue.hpp\"\n-#include \"utilities\/forbiddenFunctions.hpp\"\n-#include \"utilities\/formatBuffer.hpp\"\n+#include \"runtime\/javaThread.inline.hpp\"\n@@ -266,116 +52,0 @@\n-#include \"utilities\/growableArray.hpp\"\n-#include \"utilities\/linkedlist.hpp\"\n-#include \"utilities\/macros.hpp\"\n-#include \"utilities\/numberSeq.hpp\"\n-#include \"utilities\/ostream.hpp\"\n-#include \"utilities\/population_count.hpp\"\n-#include \"utilities\/powerOfTwo.hpp\"\n-#include \"utilities\/resizeableResourceHash.hpp\"\n-#include \"utilities\/resourceHash.hpp\"\n-#include \"utilities\/rotate_bits.hpp\"\n-#include \"utilities\/singleWriterSynchronizer.hpp\"\n-#include \"utilities\/sizes.hpp\"\n-#include \"utilities\/tableStatistics.hpp\"\n-#include \"utilities\/ticks.hpp\"\n-#include \"utilities\/unsigned5.hpp\"\n-#include \"utilities\/utf8.hpp\"\n-#include \"utilities\/vmEnums.hpp\"\n-#include \"utilities\/waitBarrier.hpp\"\n-#include \"utilities\/waitBarrier_generic.hpp\"\n-\n-#ifdef COMPILER2\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/codeBuffer.hpp\"\n-#include \"cds\/cds_globals.hpp\"\n-#include \"classfile\/vmIntrinsics.hpp\"\n-#include \"code\/codeBlob.hpp\"\n-#include \"code\/debugInfo.hpp\"\n-#include \"code\/location.hpp\"\n-#include \"code\/nmethod.hpp\"\n-#include \"code\/oopRecorder.hpp\"\n-#include \"code\/pcDesc.hpp\"\n-#include \"code\/relocInfo.hpp\"\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"jfr\/support\/jfrIntrinsics.hpp\"\n-#include \"logging\/logDecorations.hpp\"\n-#include \"logging\/logHandle.hpp\"\n-#include \"logging\/logMessage.hpp\"\n-#include \"logging\/logMessageBuffer.hpp\"\n-#include \"logging\/logStream.hpp\"\n-#include \"opto\/adlcVMDeps.hpp\"\n-#include \"opto\/c2_globals.hpp\"\n-#include \"runtime\/nonJavaThread.hpp\"\n-#include \"runtime\/stubDeclarations.hpp\"\n-#include \"runtime\/stubInfo.hpp\"\n-#include \"utilities\/resizeableResourceHash.hpp\"\n-#endif\n-\n-#if INCLUDE_JFR\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/codeBuffer.hpp\"\n-#include \"cds\/cds_globals.hpp\"\n-#include \"classfile\/vmIntrinsics.hpp\"\n-#include \"code\/codeBlob.hpp\"\n-#include \"code\/nmethod.hpp\"\n-#include \"code\/oopRecorder.hpp\"\n-#include \"code\/pcDesc.hpp\"\n-#include \"code\/relocInfo.hpp\"\n-#include \"code\/vmreg.inline.hpp\"\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"gc\/epsilon\/epsilon_globals.hpp\"\n-#include \"gc\/shared\/gc_globals.hpp\"\n-#include \"jfr\/jfr.hpp\"\n-#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n-#include \"jfr\/periodic\/sampling\/jfrSampleRequest.hpp\"\n-#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.hpp\"\n-#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdMacros.hpp\"\n-#include \"jfr\/recorder\/storage\/jfrBuffer.hpp\"\n-#include \"jfr\/support\/jfrIntrinsics.hpp\"\n-#include \"jfr\/support\/jfrKlassExtension.hpp\"\n-#include \"jfr\/support\/jfrThreadExtension.hpp\"\n-#include \"jfr\/support\/jfrThreadId.hpp\"\n-#include \"jfr\/support\/jfrThreadLocal.hpp\"\n-#include \"jfr\/support\/jfrTraceIdExtension.hpp\"\n-#include \"jfr\/utilities\/jfrAllocation.hpp\"\n-#include \"jfr\/utilities\/jfrBlob.hpp\"\n-#include \"jfr\/utilities\/jfrRefCountPointer.hpp\"\n-#include \"jfr\/utilities\/jfrTime.hpp\"\n-#include \"jfr\/utilities\/jfrTypes.hpp\"\n-#include \"logging\/logDecorations.hpp\"\n-#include \"logging\/logHandle.hpp\"\n-#include \"logging\/logMessage.hpp\"\n-#include \"logging\/logMessageBuffer.hpp\"\n-#include \"logging\/logStream.hpp\"\n-#include \"runtime\/nonJavaThread.hpp\"\n-#include \"runtime\/stubDeclarations.hpp\"\n-#include \"runtime\/stubInfo.hpp\"\n-#include \"utilities\/resizeableResourceHash.hpp\"\n-#endif\n-\n-#if INCLUDE_G1GC\n-#include \"asm\/codeBuffer.hpp\"\n-#include \"code\/oopRecorder.hpp\"\n-#include \"code\/relocInfo.hpp\"\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"logging\/logDecorations.hpp\"\n-#include \"logging\/logMessageBuffer.hpp\"\n-#include \"utilities\/resizeableResourceHash.hpp\"\n-#endif\n-\n-#if INCLUDE_SHENANDOAHGC\n-#include \"asm\/codeBuffer.hpp\"\n-#include \"code\/codeBlob.hpp\"\n-#include \"code\/oopRecorder.hpp\"\n-#include \"code\/relocInfo.hpp\"\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"logging\/logDecorations.hpp\"\n-#include \"logging\/logHandle.hpp\"\n-#include \"logging\/logMessage.hpp\"\n-#include \"logging\/logMessageBuffer.hpp\"\n-#include \"logging\/logStream.hpp\"\n-#include \"utilities\/resizeableResourceHash.hpp\"\n-#endif\n-\n-#if INCLUDE_ZGC\n-#include \"compiler\/compiler_globals.hpp\"\n-#endif\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":14,"deletions":344,"binary":false,"changes":358,"status":"modified"},{"patch":"@@ -1,152 +0,0 @@\n-\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.DirectoryStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.StandardOpenOption;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.function.Function;\n-import java.util.function.Predicate;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-public final class PrecompiledHeaders {\n-\n-    private static final Pattern DEPENDENCY_LINE_PATTERN = Pattern.compile(\"\\\\s*(\\\\S+.hpp)\\\\s*\\\\\\\\?\");\n-    private static final Pattern INCLUDE_PATTERN = Pattern.compile(\"^#\\\\s*include \\\"([^\\\"]+)\\\"$\");\n-    private static final String PRECOMPILED_HPP_NAME = \"precompiled.hpp\";\n-    private static final String PRECOMPILED_HPP_PATH = \"src\/hotspot\/share\/precompiled\/\" + PRECOMPILED_HPP_NAME;\n-    private static final String INLINE_HPP_SUFFIX = \".inline.hpp\";\n-    private static final String HOTSPOT_SOURCE_PREFIX = \"\/jdk\/src\/hotspot\/share\/\";\n-\n-    private PrecompiledHeaders() {\n-        throw new UnsupportedOperationException(\"Instances not allowed\");\n-    }\n-\n-    public static void main(String[] args) throws IOException {\n-        if (args.length < 2 || args.length > 3) {\n-            System.err.println(\"Usage: min_inclusion_count build_root [jdk_root=.]\");\n-            System.exit(1);\n-        }\n-\n-        int minInclusionCount = Integer.parseInt(args[0]);\n-        Path buildRoot = Path.of(args[1]).toAbsolutePath();\n-        if (!Files.isDirectory(buildRoot)) {\n-            throw new IllegalArgumentException(\"build_root is not a directory: \" + buildRoot);\n-        }\n-        Path jdkRoot = Path.of(args.length == 3 ? args[2] : \".\").toAbsolutePath();\n-        if (!Files.isDirectory(jdkRoot)) {\n-            throw new IllegalArgumentException(\"jdk_root is not a directory: \" + jdkRoot);\n-        }\n-\n-        Path hotspotBuild = buildRoot.resolve(\"hotspot\");\n-        if (!Files.isDirectory(hotspotBuild)) {\n-            throw new IllegalArgumentException(\"Could not find 'hotspot' directory: \" + hotspotBuild);\n-        }\n-        Path objs = getVariantDirectory(hotspotBuild).resolve(\"objs\");\n-\n-        \/\/ Count inclusion times for each header\n-        Map<String, Integer> occurrences;\n-        try (Stream<Path> files = Files.list(objs)) {\n-            occurrences = files\n-                    .filter(file -> file.getFileName().toString().endsWith(\".d\"))\n-                    .filter(Predicate.not(file -> file.getFileName().toString().startsWith(\"BUILD_LIBJVM\")))\n-                    .filter(Predicate.not(file -> file.getFileName().toString().contains(PRECOMPILED_HPP_NAME)))\n-                    .flatMap(file -> {\n-                        try {\n-                            \/\/ The first line contains the object name\n-                            return Files.lines(file).skip(1).distinct();\n-                        } catch (IOException exception) {\n-                            throw new UncheckedIOException(exception);\n-                        }\n-                    })\n-                    .map(DEPENDENCY_LINE_PATTERN::matcher)\n-                    .filter(Matcher::matches)\n-                    .map(matcher -> matcher.group(1))\n-                    .filter(dependency -> dependency.startsWith(HOTSPOT_SOURCE_PREFIX))\n-                    \/\/ Avoid compiler specific headers\n-                    .filter(Predicate.not(dependency -> dependency.endsWith(\"_gcc.hpp\")))\n-                    .filter(Predicate.not(dependency -> dependency.endsWith(\"_visCPP.hpp\")))\n-                    .filter(Predicate.not(dependency -> dependency.endsWith(\"\/\" + PRECOMPILED_HPP_NAME)))\n-                    .map(dependency -> dependency.replace(HOTSPOT_SOURCE_PREFIX, \"\"))\n-                    .collect(Collectors.toMap(Function.identity(), s -> 1, Integer::sum));\n-        }\n-\n-        \/\/ Keep only the headers which are included at least 'minInclusionCount' times\n-        Set<String> headers = occurrences.entrySet().stream()\n-                .filter(entry -> entry.getValue() >= minInclusionCount)\n-                .map(Map.Entry::getKey)\n-                .collect(Collectors.toSet());\n-\n-        List<String> inlineIncludes = occurrences.keySet().stream()\n-                .filter(s -> s.endsWith(INLINE_HPP_SUFFIX))\n-                .toList();\n-        \/\/ If both inline and non-inline headers are to be included, prefer the inline header\n-        for (String inlineInclude : inlineIncludes) {\n-            if (headers.contains(inlineInclude)) {\n-                String noInlineInclude = inlineInclude.replace(INLINE_HPP_SUFFIX, \".hpp\");\n-                headers.remove(noInlineInclude);\n-            }\n-        }\n-\n-        Path precompiledHpp = jdkRoot.resolve(PRECOMPILED_HPP_PATH);\n-        try (Stream<String> lines = Files.lines(precompiledHpp)) {\n-            String precompiledHppHeader = lines\n-                    .takeWhile(Predicate.not(s -> INCLUDE_PATTERN.matcher(s).matches()))\n-                    .collect(Collectors.joining(System.lineSeparator()));\n-            Files.write(precompiledHpp, precompiledHppHeader.getBytes());\n-        }\n-\n-        String headerLines = headers.stream()\n-                .sorted()\n-                .map(header -> String.format(\"#include \\\"%s\\\"\", header))\n-                .collect(Collectors.joining(System.lineSeparator()));\n-        Files.write(precompiledHpp,\n-                (System.lineSeparator() + headerLines + System.lineSeparator()).getBytes(),\n-                StandardOpenOption.APPEND);\n-    }\n-\n-    private static Path getVariantDirectory(Path hotspotBuild) {\n-        try (DirectoryStream<Path> stream = Files.newDirectoryStream(hotspotBuild, \"variant-*\")) {\n-            for (Path variant : stream) {\n-                Path libjvmDirectory = variant.resolve(\"libjvm\");\n-                if (Files.isDirectory(libjvmDirectory)) {\n-                    return libjvmDirectory;\n-                }\n-            }\n-        } catch (IOException exception) {\n-            throw new UncheckedIOException(exception);\n-        }\n-        throw new IllegalArgumentException(\"'variant-*\/libjvm' not found in \" + hotspotBuild);\n-    }\n-\n-}\n","filename":"src\/utils\/PrecompiledHeaders\/PrecompiledHeaders.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-# Hotspot precompiled headers\n-\n-This directory contains a simple tool to refresh the current set of precompiled headers\n-in `src\/hotspot`. The headers are selected according to how frequently they are included\n-in Hotspot source code.\n-\n-## Usage\n-\n-The script requires two parameters:\n-- The minimum inclusion count a header must reach in order to be precompiled;\n-- The path to a build, which will be used to extract dependency information for each Hotspot\n-    source file.\n-Optionally, the root path to the JDK project can be specified as the second parameter.\n-\n-```bash\n-$ javac src\/utils\/PrecompiledHeaders\/PrecompiledHeaders.java\n-$ java -cp src\/utils\/PrecompiledHeaders PrecompiledHeaders min_inclusion_count build_root [jdk_root=.]\n-```\n-\n-The script will write to `src\/hotspot\/share\/precompiled\/precompiled.hpp` the new set of\n-headers selected to be precompiled.\n-\n-## Related tickets\n-\n-- [JDK-8213339](https:\/\/bugs.openjdk.org\/browse\/JDK-8213339)\n-- [JDK-8365053](https:\/\/bugs.openjdk.org\/browse\/JDK-8365053)\n","filename":"src\/utils\/PrecompiledHeaders\/README.md","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"}]}