{"files":[{"patch":"@@ -285,0 +285,97 @@\n+\n+#ifdef COMPILER2\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/codeBuffer.hpp\"\n+#include \"cds\/cds_globals.hpp\"\n+#include \"classfile\/vmIntrinsics.hpp\"\n+#include \"code\/codeBlob.hpp\"\n+#include \"code\/debugInfo.hpp\"\n+#include \"code\/location.hpp\"\n+#include \"code\/nmethod.hpp\"\n+#include \"code\/oopRecorder.hpp\"\n+#include \"code\/pcDesc.hpp\"\n+#include \"code\/relocInfo.hpp\"\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"jfr\/support\/jfrIntrinsics.hpp\"\n+#include \"logging\/logDecorations.hpp\"\n+#include \"logging\/logHandle.hpp\"\n+#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logMessageBuffer.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"opto\/adlcVMDeps.hpp\"\n+#include \"opto\/c2_globals.hpp\"\n+#include \"runtime\/nonJavaThread.hpp\"\n+#include \"runtime\/stubDeclarations.hpp\"\n+#include \"runtime\/stubInfo.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n+#endif\n+\n+#if INCLUDE_JFR\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/codeBuffer.hpp\"\n+#include \"cds\/cds_globals.hpp\"\n+#include \"classfile\/vmIntrinsics.hpp\"\n+#include \"code\/codeBlob.hpp\"\n+#include \"code\/nmethod.hpp\"\n+#include \"code\/oopRecorder.hpp\"\n+#include \"code\/pcDesc.hpp\"\n+#include \"code\/relocInfo.hpp\"\n+#include \"code\/vmreg.inline.hpp\"\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"gc\/epsilon\/epsilon_globals.hpp\"\n+#include \"gc\/shared\/gc_globals.hpp\"\n+#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n+#include \"jfr\/periodic\/sampling\/jfrSampleRequest.hpp\"\n+#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.hpp\"\n+#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdMacros.hpp\"\n+#include \"jfr\/recorder\/storage\/jfrBuffer.hpp\"\n+#include \"jfr\/support\/jfrIntrinsics.hpp\"\n+#include \"jfr\/support\/jfrKlassExtension.hpp\"\n+#include \"jfr\/support\/jfrThreadExtension.hpp\"\n+#include \"jfr\/support\/jfrThreadId.hpp\"\n+#include \"jfr\/support\/jfrThreadLocal.hpp\"\n+#include \"jfr\/support\/jfrTraceIdExtension.hpp\"\n+#include \"jfr\/utilities\/jfrAllocation.hpp\"\n+#include \"jfr\/utilities\/jfrBlob.hpp\"\n+#include \"jfr\/utilities\/jfrRefCountPointer.hpp\"\n+#include \"jfr\/utilities\/jfrTime.hpp\"\n+#include \"jfr\/utilities\/jfrTypes.hpp\"\n+#include \"logging\/logDecorations.hpp\"\n+#include \"logging\/logHandle.hpp\"\n+#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logMessageBuffer.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"runtime\/nonJavaThread.hpp\"\n+#include \"runtime\/stubDeclarations.hpp\"\n+#include \"runtime\/stubInfo.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n+#endif\n+\n+#if INCLUDE_G1GC\n+#include \"asm\/codeBuffer.hpp\"\n+#include \"code\/oopRecorder.hpp\"\n+#include \"code\/relocInfo.hpp\"\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"logging\/logDecorations.hpp\"\n+#include \"logging\/logMessageBuffer.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n+#endif\n+\n+#if INCLUDE_SHENANDOAHGC\n+#include \"asm\/codeBuffer.hpp\"\n+#include \"code\/codeBlob.hpp\"\n+#include \"code\/oopRecorder.hpp\"\n+#include \"code\/relocInfo.hpp\"\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"logging\/logDecorations.hpp\"\n+#include \"logging\/logHandle.hpp\"\n+#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logMessageBuffer.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n+#endif\n+\n+#if INCLUDE_ZGC\n+#include \"compiler\/compiler_globals.hpp\"\n+#endif\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":97,"deletions":0,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.nio.file.DirectoryStream;\n@@ -32,0 +33,1 @@\n+import java.util.Optional;\n@@ -44,1 +46,0 @@\n-    private static final String OBJS_PATH = \"hotspot\/variant-server\/libjvm\/objs\";\n@@ -70,3 +71,3 @@\n-        Path objsPath = buildRoot.resolve(OBJS_PATH);\n-        if (!Files.isDirectory(objsPath)) {\n-            throw new IllegalArgumentException(\"Could not find 'objs' directory: \" + objsPath);\n+        Path hotspotBuild = buildRoot.resolve(\"hotspot\");\n+        if (!Files.isDirectory(hotspotBuild)) {\n+            throw new IllegalArgumentException(\"Could not find 'hotspot' directory: \" + hotspotBuild);\n@@ -74,0 +75,1 @@\n+        Path objs = getVariantDirectory(hotspotBuild).resolve(\"objs\");\n@@ -77,1 +79,1 @@\n-        try (Stream<Path> files = Files.list(objsPath)) {\n+        try (Stream<Path> files = Files.list(objs)) {\n@@ -136,0 +138,14 @@\n+    private static Path getVariantDirectory(Path hotspotBuild) {\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(hotspotBuild, \"variant-*\")) {\n+            for (Path variant : stream) {\n+                Path libjvmDirectory = variant.resolve(\"libjvm\");\n+                if (Files.isDirectory(libjvmDirectory)) {\n+                    return libjvmDirectory;\n+                }\n+            }\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        throw new IllegalArgumentException(\"'variant-*\/libjvm' not found in \" + hotspotBuild);\n+    }\n+\n","filename":"src\/utils\/PrecompiledHeaders\/PrecompiledHeaders.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"}]}