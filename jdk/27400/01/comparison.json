{"files":[{"patch":"@@ -258,1 +258,0 @@\n-sun\/java2d\/X11SurfaceData\/SharedMemoryPixmapsTest\/SharedMemoryPixmapsTest.sh 7184899,8221451 linux-all,macosx-aarch64\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.awt.AWTException;\n@@ -28,0 +27,1 @@\n+import java.awt.EventQueue;\n@@ -45,2 +45,0 @@\n- *\n- * @author Dmitri.Trembovetski\n@@ -50,5 +48,6 @@\n-    static final int IMAGE_SIZE = 100;\n-    static boolean show = false;\n-    final Frame testFrame;\n-    \/** Creates a new instance of SharedMemoryPixmapsTest *\/\n-    public SharedMemoryPixmapsTest() {\n+    static final int IMAGE_SIZE = 200;\n+    static volatile boolean show = false;\n+    static volatile Frame testFrame;\n+    static volatile TestComponent testComponent;\n+\n+    static void createUI() {\n@@ -56,1 +55,2 @@\n-        testFrame.add(new TestComponent());\n+        testComponent = new TestComponent();\n+        testFrame.add(testComponent);\n@@ -65,1 +65,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -73,1 +73,33 @@\n-        new SharedMemoryPixmapsTest();\n+        EventQueue.invokeAndWait(SharedMemoryPixmapsTest::createUI);\n+        if (testRendering()) {\n+            System.err.println(\"Test Passed\");\n+        } else {\n+            System.err.println(\"Test Failed\");\n+        }\n+        if (!show && testFrame != null) {\n+            EventQueue.invokeAndWait(testFrame::dispose);\n+        }\n+    }\n+\n+    static boolean testRendering() throws Exception {\n+        Robot r = new Robot();\n+        r.waitForIdle();\n+        r.delay(2000);\n+        Point p = testComponent.getLocationOnScreen();\n+        BufferedImage b =\n+            r.createScreenCapture(new Rectangle(p, testComponent.getPreferredSize()));\n+        for (int y = 20; y < b.getHeight() - 40; y++) {\n+            for (int x = 20; x < b.getWidth() - 40; x++) {\n+                if (b.getRGB(x, y) != Color.red.getRGB()) {\n+                    System.err.println(\"Incorrect pixel at \"\n+                        + x + \"x\" + y + \" : \" +\n+                        Integer.toHexString(b.getRGB(x, y)));\n+                    if (show) {\n+                        return false;\n+                    }\n+                    System.err.println(\"Test Failed\");\n+                    System.exit(1);\n+                }\n+            }\n+        }\n+        return true;\n@@ -76,1 +108,1 @@\n-    private class TestComponent extends Component {\n+    static class TestComponent extends Component {\n@@ -78,1 +110,0 @@\n-        boolean tested = false;\n@@ -107,0 +138,1 @@\n+                vi = null;\n@@ -110,45 +142,0 @@\n-\n-            Toolkit.getDefaultToolkit().sync();\n-            if (!tested) {\n-                if (testRendering()) {\n-                    System.err.println(\"Test Passed\");\n-                } else {\n-                    System.err.println(\"Test Failed\");\n-                }\n-                tested = true;\n-            }\n-            if (!show) {\n-                testFrame.setVisible(false);\n-                testFrame.dispose();\n-            }\n-        }\n-\n-        private boolean testRendering() throws RuntimeException {\n-            try {\n-                Thread.sleep(2000);\n-            } catch (InterruptedException ex) {}\n-            Robot r = null;\n-            try {\n-                r = new Robot();\n-            } catch (AWTException ex) {\n-                ex.printStackTrace();\n-                throw new RuntimeException(\"Can't create Robot\");\n-            }\n-            Point p = getLocationOnScreen();\n-            BufferedImage b =\n-                r.createScreenCapture(new Rectangle(p, getPreferredSize()));\n-            for (int y = 0; y < b.getHeight(); y++) {\n-                for (int x = 0; x < b.getWidth(); x++) {\n-                    if (b.getRGB(x, y) != Color.red.getRGB()) {\n-                        System.err.println(\"Incorrect pixel\" + \" at \"\n-                            + x + \"x\" + y + \" : \" +\n-                            Integer.toHexString(b.getRGB(x, y)));\n-                        if (show) {\n-                            return false;\n-                        }\n-                        System.err.println(\"Test Failed\");\n-                        System.exit(1);\n-                    }\n-                }\n-            }\n-            return true;\n@@ -162,1 +149,0 @@\n-\n","filename":"test\/jdk\/sun\/java2d\/X11SurfaceData\/SharedMemoryPixmapsTest\/SharedMemoryPixmapsTest.java","additions":46,"deletions":60,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2005, 2008, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-# @author Dmitri.Trembovetski\n","filename":"test\/jdk\/sun\/java2d\/X11SurfaceData\/SharedMemoryPixmapsTest\/SharedMemoryPixmapsTest.sh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}