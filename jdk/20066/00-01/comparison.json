{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,3 +75,1 @@\n-    @IR(applyIfCPUFeature = {\"asimd\", \"true\"},\n-        counts = {IRNode.AND_VB, \">0\"})\n-    @IR(applyIfCPUFeatureAnd = {\"avx512f\", \"false\", \"sse2\", \"true\"},\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n@@ -78,2 +77,0 @@\n-    @IR(applyIfCPUFeature = {\"avx512f\", \"true\"},\n-        counts = {IRNode.MACRO_LOGIC_V, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicBooleanOpTest.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,3 @@\n+    private boolean[] boolsA;\n+    private boolean[] boolsB;\n+    private boolean[] resZ;\n@@ -61,0 +64,3 @@\n+        boolsA = new boolean[COUNT];\n+        boolsB = new boolean[COUNT];\n+        resZ = new boolean[COUNT];\n@@ -76,0 +82,2 @@\n+            boolsA[i] = r.nextBoolean();\n+            boolsB[i] = r.nextBoolean();\n@@ -369,0 +377,7 @@\n+    @Benchmark\n+    public void andZ() {\n+        for (int i = 0; i < COUNT; i++) {\n+            resZ[i] = boolsA[i] & boolsB[i];\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/TypeVectorOperations.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}