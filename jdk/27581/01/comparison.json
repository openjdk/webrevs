{"files":[{"patch":"@@ -30,2 +30,0 @@\n-import java.util.Arrays;\n-\n@@ -105,1 +103,0 @@\n-        int getChars(byte[] result);\n@@ -120,14 +117,0 @@\n-        \/**\n-         * Indicates the sign of the value.\n-         * @return {@code value < 0.0}.\n-         *\/\n-        boolean isNegative();\n-\n-        \/**\n-         * Indicates whether the value is either infinite or not a number.\n-         *\n-         * @return <code>true<\/code> if and only if the value is <code>NaN<\/code>\n-         * or infinite.\n-         *\/\n-        boolean isExceptional();\n-\n@@ -150,51 +133,0 @@\n-    \/**\n-     * A <code>BinaryToASCIIConverter<\/code> which represents <code>NaN<\/code>\n-     * and infinite values.\n-     *\/\n-    private static class ExceptionalBinaryToASCIIBuffer implements BinaryToASCIIConverter {\n-        private final String image;\n-        private final boolean isNegative;\n-\n-        public ExceptionalBinaryToASCIIBuffer(String image, boolean isNegative) {\n-            this.image = image;\n-            this.isNegative = isNegative;\n-        }\n-\n-        @Override\n-        @SuppressWarnings(\"deprecation\")\n-        public int getChars(byte[] chars) {\n-            image.getBytes(0, image.length(), chars, 0);\n-            return image.length();\n-        }\n-\n-        @Override\n-        public int getDecimalExponent() {\n-            throw new IllegalArgumentException(\"Exceptional value does not have an exponent\");\n-        }\n-\n-        @Override\n-        public int getDigits(byte[] digits) {\n-            throw new IllegalArgumentException(\"Exceptional value does not have digits\");\n-        }\n-\n-        @Override\n-        public boolean isNegative() {\n-            return isNegative;\n-        }\n-\n-        @Override\n-        public boolean isExceptional() {\n-            return true;\n-        }\n-\n-        @Override\n-        public boolean digitsRoundedUp() {\n-            throw new IllegalArgumentException(\"Exceptional value is not rounded\");\n-        }\n-\n-        @Override\n-        public boolean decimalDigitsExact() {\n-            throw new IllegalArgumentException(\"Exceptional value is not exact\");\n-        }\n-    }\n-\n@@ -204,3 +136,0 @@\n-    private static final BinaryToASCIIConverter B2AC_POSITIVE_INFINITY = new ExceptionalBinaryToASCIIBuffer(INFINITY_REP, false);\n-    private static final BinaryToASCIIConverter B2AC_NEGATIVE_INFINITY = new ExceptionalBinaryToASCIIBuffer(\"-\" + INFINITY_REP, true);\n-    private static final BinaryToASCIIConverter B2AC_NOT_A_NUMBER = new ExceptionalBinaryToASCIIBuffer(NAN_REP, false);\n@@ -263,10 +192,0 @@\n-        @Override\n-        public boolean isNegative() {\n-            return isNegative;\n-        }\n-\n-        @Override\n-        public boolean isExceptional() {\n-            return false;\n-        }\n-\n@@ -829,77 +748,0 @@\n-        \/**\n-         * Converts the decimal representation of a floating-point number into its\n-         * ASCII character representation and stores it in the provided byte array.\n-         *\n-         * @param result the byte array to store the ASCII representation, must have length at least 26\n-         * @return the number of characters written to the result array\n-         *\/\n-        public int getChars(byte[] result) {\n-            assert nDigits <= 19 : nDigits; \/\/ generous bound on size of nDigits\n-            int i = 0;\n-            if (isNegative) {\n-                result[0] = '-';\n-                i = 1;\n-            }\n-            if (decExponent > 0 && decExponent < 8) {\n-                \/\/ print digits.digits.\n-                int charLength = Math.min(nDigits, decExponent);\n-                System.arraycopy(digits, firstDigitIndex, result, i, charLength);\n-                i += charLength;\n-                if (charLength < decExponent) {\n-                    charLength = decExponent - charLength;\n-                    Arrays.fill(result, i, i + charLength, (byte) '0');\n-                    i += charLength;\n-                    result[i++] = '.';\n-                    result[i++] = '0';\n-                } else {\n-                    result[i++] = '.';\n-                    if (charLength < nDigits) {\n-                        int t = nDigits - charLength;\n-                        System.arraycopy(digits, firstDigitIndex + charLength, result, i, t);\n-                        i += t;\n-                    } else {\n-                        result[i++] = '0';\n-                    }\n-                }\n-            } else if (decExponent <= 0 && decExponent > -3) {\n-                result[i++] = '0';\n-                result[i++] = '.';\n-                if (decExponent != 0) {\n-                    Arrays.fill(result, i, i-decExponent, (byte) '0');\n-                    i -= decExponent;\n-                }\n-                System.arraycopy(digits, firstDigitIndex, result, i, nDigits);\n-                i += nDigits;\n-            } else {\n-                result[i++] = digits[firstDigitIndex];\n-                result[i++] = '.';\n-                if (nDigits > 1) {\n-                    System.arraycopy(digits, firstDigitIndex+1, result, i, nDigits - 1);\n-                    i += nDigits - 1;\n-                } else {\n-                    result[i++] = '0';\n-                }\n-                result[i++] = 'E';\n-                int e;\n-                if (decExponent <= 0) {\n-                    result[i++] = '-';\n-                    e = -decExponent + 1;\n-                } else {\n-                    e = decExponent - 1;\n-                }\n-                \/\/ decExponent has 1, 2, or 3, digits\n-                if (e <= 9) {\n-                    result[i++] = (byte) (e + '0');\n-                } else if (e <= 99) {\n-                    result[i++] = (byte) (e \/ 10 + '0');\n-                    result[i++] = (byte) (e % 10 + '0');\n-                } else {\n-                    result[i++] = (byte) (e \/ 100 + '0');\n-                    e %= 100;\n-                    result[i++] = (byte) (e \/ 10 + '0');\n-                    result[i++] = (byte) (e % 10 + '0');\n-                }\n-            }\n-            return i;\n-        }\n-\n@@ -1710,1 +1552,1 @@\n-                return isNegative ? B2AC_NEGATIVE_INFINITY : B2AC_POSITIVE_INFINITY;\n+                throw new IllegalArgumentException((isNegative ? \"-\" : \"\") + INFINITY_REP);\n@@ -1712,1 +1554,1 @@\n-                return B2AC_NOT_A_NUMBER;\n+                throw new IllegalArgumentException(NAN_REP);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FloatingDecimal.java","additions":2,"deletions":160,"binary":false,"changes":162,"status":"modified"}]}