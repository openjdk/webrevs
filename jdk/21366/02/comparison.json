{"files":[{"patch":"@@ -217,0 +217,1 @@\n+java\/awt\/TrayIcon\/TrayIconTest.java 8341559 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,613 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.CheckboxGroup;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Image;\n+import java.awt.Insets;\n+import java.awt.Label;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.PopupMenu;\n+import java.awt.RenderingHints;\n+import java.awt.SystemTray;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.TrayIcon;\n+import java.awt.TrayIcon.MessageType;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionAdapter;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.BufferedImage;\n+import java.beans.PropertyChangeEvent;\n+import java.util.HashMap;\n+import java.util.Map;\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4310333\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @summary  A unit test for TrayIcon RFE\n+ * @run main\/manual TrayIconTest\n+ *\/\n+\n+public class TrayIconTest {\n+    private static SystemTray tray;\n+    static Frame frame = new Frame(\"TrayIcon Test\");\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The test frame contains CheckboxGroup of tray icons.\n+            A selected checkbox represents the TrayIcon (or null\n+            TrayIcon) whose functionality is currently tested.\n+\n+            If you are under Linux make sure your Application Panel has\n+            System Tray (on Gnome it is called Notification Area).\n+\n+            Perform all the cases (1-7) documented below.\n+\n+            CASE 1: Testing ADD\/REMOVE\/PropertyChange functionality.\n+            --------------------------------------------------------\n+             1. Select null TrayIcon and pressAdd button:\n+                - NullPointerException should be thrown.\n+             2. Select some of the valid TrayIcons and press Add button:\n+                - The selected TrayIcon should appear in the SystemTray.\n+                - PropertyChangeEvent should be fired (the property is\n+                  an array of TrayIcons added to the system tray).\n+             3. Press Add button again:\n+                - IllegalArgumentException should be thrown.\n+                - No PropertyChangeEvent should be fired.\n+             4. Press Remove button:\n+                - The TrayIcon should disappear from the SystemTray.\n+                - PropertyChangeEvent should be fired.\n+             5. Press Remove button again:\n+                - It should have no effect.\n+                - No PropertyChangeEvent should be fired.\n+             6. Add all the valid TrayIcons (by selecting everyone and pressing Add\n+                button):\n+                - All the TrayIcons should appear in the SystemTray.\n+                - PropertyChangeEvent should be fired on each adding.\n+             7. Remove all the TrayIcons (again by selecting everyone and pressing\n+                Remove):\n+                - All the TrayIcons should disappear from the SystemTray.\n+                - PropertyChangeEvent should be fired on each removing.\n+             8. Not for Windows! Remove the system tray (Notification Area) from\n+                the desktop. Try to add some valid TrayIcon:\n+                - AWTException should be thrown.\n+                - No PropertyChangeEvent should be fired.\n+             9. Not for Windows! Add the system tray back to the desktop. Add all the\n+                valid TrayIcons:\n+                - All the TrayIcons should appear in the system tray.\n+                - PropertyChangeEvent should be fired on each adding.\n+             11. Not for Windows! Remove the system tray from the desktop:\n+                - All the TrayIcons should disappear.\n+                - PropertyChangeEvent should be fired for each TrayIcon\n+                  removal.\n+                - PropertyChangeEvent should be fired for SystemTray removal.\n+             12. Add the system tray and go to the next step.\n+                - All the TrayIcons should appear again.\n+                - PropertyChangeEvent should be fired for SystemTray addition.\n+                - PropertyChangeEvent shouldn't be fired for TrayIcon removal.\n+\n+            CASE 2: Testing RESIZE functionality.\n+            -------------------------------------\n+             1. Select some of the TrayIcons and add it. Then press resize button:\n+                - The TrayIcon selected should be resized to fit the area it occupies.\n+             2. Press resize button again:\n+                - The TrayIcon should be resized to the original size.\n+             3. Repeat the 1-2 steps for other TrayIcons:\n+                - The TrayIcons should be resized appropriately.\n+\n+            CASE 3: Testing EVENTS functionality\n+            ---------------------------------\n+             1. Select some of the TrayIcons and add it. Select MouseEvent from the\n+                group of checkboxes at the top-right of the test frame.\n+                Click on the TrayIcon in the SystemTray:\n+                - MOUSE_PRESSED MOUSE_RELEASED and MOUSE_CLICKED events should be\n+                  generated.\n+             2. Press mouse inside the TrayIcon dragging mouse and releasing it.\n+                - Make sure that MOUSE_CLICKED event is not triggered.\n+             3. Click on the TrayIcon with different modification keys:\n+                - there should be appropriate modifiers in the events.\n+             4. Keep clicking on the TrayIcon:\n+               - there should be correct absolute coordinates in the events.\n+             5. Only for Windows! Focus the system tray using keyboard:\n+               - press WIN key once to bring up the start menu then press ESC once to\n+                 close the menu the focus should be on the start button\n+               - press TAB key for several times until you focus on the system\n+                 tray then use ARROW keys to move to the TrayIcon\n+               - press ENTER or SPACE should trigger ACTION_PERFORMED message\n+                 make sure that mouse events are not  triggered.\n+             6. Select MouseMotionEvent checkbox. Move mouse over the TrayIcon:\n+               - MOUSE_MOVED event should be generated. It should contain\n+                 correct coordinates.\n+             7. Deselect both the checkboxes and then select AWTEventListener.\n+                Click on the TrayIcon and then move mouse over it:\n+                - Appropriate mouse events should be generated (catched by the\n+                  AWTEventListener).\n+             8. Deselect all the checkboxes and go to the following step.\n+\n+            CASE 4: Testing DISPLAY MESSAGE functionality.\n+            ----------------------------------------------\n+             1. Select some of the TrayIcons and add it. Then press Display message\n+                button:\n+                - A balloon message should appear near the TrayIcon.\n+             2. After the message is displayed wait for some period:\n+                - The message window should be closed automatically.\n+             3. Display the message again. Close it by pressing X in its top-right\n+                corner:\n+                - The message window should be closed immediately.\n+             4. Display the message again. Click inside it:\n+                - The message should be closed an ACTION_PERFORMED event should be\n+                  generated with correct information and an Ok dialog should appear.\n+                  Close the dialog.\n+             5. Select a message type from the Type choice and display the message\n+                again:\n+                - It should contain an icon appropriate to the message type selected\n+                  or no icon if NONE is selected.\n+             6. Change the content of the Message and Caption text fields and\n+                display the message:\n+                - The message content should be changed in the accordance with the text\n+                  typed.\n+             7. Not for Windows! Type some too long or too short text for the Caption\n+                and Message:\n+                - The message should process the text correctly. The long text should\n+                  be cut.\n+             8. Not for Windows! Type null in the Message text field and display\n+                the message:\n+                - The message body should contain no text.\n+             9. Type null in the Caption text field and display the message:\n+                - The message caption should contain no text.\n+             10. Type null in the both Message and Caption fields and display\n+                 the message:\n+                - NullPointerException should be generated and no message should be\n+                  displayed.\n+             11. Try to hide the taskbar. Click Display message for several times.\n+                 Then restore the taskbar. Click on the TrayIcon:\n+                 - No message should appear.\n+                 Try to display the message once more:\n+                 - It should appear appropriately.\n+             12. Try to display the message for other TrayIcons:\n+                 - The messages should be displayed appropriately.\n+\n+            CASE 5: Testing POPUP MENU functionality.\n+            -----------------------------------------\n+             1. Add some TrayIcon to the system tray. Press Set button in the\n+                Popup menu test area. Trigger the popup menu for the TrayIcon with\n+                the mouse:\n+                - A popup menu should appear. Make sure it behaves properly.\n+                - Make sure the 'duke.gif' image is animated while the popup menu is shown.\n+             2. Press Remove button for the popup menu and try to trigger it again:\n+                - No popup menu should appear.\n+             3. Perform 1-2 steps for other TrayIcons:\n+                - Make sure the popup menu behaves properly.\n+             4. Add more than one TrayIcons to the system tray. Press Set button in\n+                the PopupMenu test area for some of the TrayIcon added. Trigger\n+                the popup menu for this TrayIcon:\n+                - A popup menu should appear properly.\n+             5. Try to set the popup menu to the same TrayIcon again:\n+                - It should have no effect\n+             6. Try to set the popup menu for other TrayIcons you've added to the system\n+                tray:\n+                - for each one IllegalArgumentException should be thrown.\n+\n+            CASE 6: Testing TOOLTIP functionality.\n+            --------------------------------------\n+             1. Type something in the Tooltip text field and press Set button.\n+                Then move mouse cursor over the TrayIcon and wait for a second:\n+                - A tooltip should appear containing the text typed.\n+             2. Show a tooltip again and keep your mouse over the TrayIcon for some period:\n+                - The tooltip should disappear automatically.\n+             3. Show a tooltip again and leave the TrayIcon:\n+                - The tooltip should disappear immediately.\n+             4. Type null in the Tooltip field and press set then move your\n+                mouse to the SystemTray:\n+                - The tooltip shouldn't appear.\n+             5. Type something too long in the Tooltip field and show the tooltip:\n+                - The tooltip text should be cut.\n+\n+            CASE 7: Testing ACTION functionality.\n+            -------------------------------------\n+             1. Add some TrayIcon to the system tray. Double click it with the left mouse\n+                button:\n+                - An ACTION_PERFORMED event should be generated.\n+             2. Double click the TrayIcon with the left mouse button several times:\n+                - Several ACTION_PERFORMED events should be generated\n+                - Make sure that the time-stamp of each event ('when' field) is increased.\n+\n+            If all the above cases work as expected Press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!SystemTray.isSupported()) {\n+            throw new SkippedException(\"Test not applicable as\"\n+                                       + \" System Tray not supported\");\n+        }\n+        try {\n+            PassFailJFrame.builder()\n+                          .title(\"TrayIconTest Instructions\")\n+                          .instructions(INSTRUCTIONS)\n+                          .columns(50)\n+                          .rows(40)\n+                          .testUI(TrayIconTest::createAndShowUI)\n+                          .logArea(10)\n+                          .build()\n+                          .awaitAndCheck();\n+\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (tray != null) {\n+                    \/\/Remove any remaining tray icons before ending the test.\n+                    TrayIcon[] icons = tray.getTrayIcons();\n+                    for (TrayIcon icon : icons) {\n+                        tray.remove(icon);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private static Frame createAndShowUI() {\n+        final TrayIconControl ctrl = new TrayIconControl();\n+        frame.setLayout(new BorderLayout());\n+        frame.add(ctrl.cont, BorderLayout.CENTER);\n+        frame.setBackground(Color.LIGHT_GRAY);\n+\n+        frame.addWindowListener(new WindowAdapter() {\n+                public void windowClosing(WindowEvent e) {\n+                    ctrl.dispose();\n+                }\n+            });\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    private static class TrayIconControl {\n+        final String RED_ICON = \"RED ICON\";\n+        final String BLUE_ICON = \"BLUE ICON\";\n+        final String GREEN_ICON = \"GREEN ICON\";\n+\n+        CheckboxGroup cbg = new CheckboxGroup();\n+        Button addButton = new PackedButton(\"   Add   \");\n+        Button remButton = new PackedButton(\"Remove\");\n+        Button resizeButton = new PackedButton(\"Resize\");\n+        Button balloonButton = new PackedButton(\"Display message\");\n+        Choice balloonChoice = new Choice();\n+        String[] balloonTypes = new String[] { \"ERROR\", \"WARNING\", \"INFO\", \"NONE\" };\n+\n+        TextField balloonText = new TextField(\n+                                \"A TrayIcon can generate various MouseEvents and\"\n+                                + \" supports adding corresponding listeners to receive\"\n+                                + \" notification of these events. TrayIcon processes\"\n+                                + \" some of the events by itself. For example,\"\n+                                + \" by default, when the right-mouse click\", 70);\n+        TextField balloonCaption = new TextField(\"TrayIcon\", 70);\n+\n+        MessageType[] typeArr = new MessageType[] { MessageType.ERROR, MessageType.WARNING,\n+                MessageType.INFO, MessageType.NONE };\n+        Checkbox mouseListenerCbox =  new Checkbox(\"MouseEvent\");\n+        Checkbox motionListenerCbox = new Checkbox(\"  MouseMotionEvent\");\n+        Checkbox awtListenerCbox =    new Checkbox(\"  AWTEventListener\");\n+        TextField tipText = new TextField(\"TrayIcon\", 50);\n+        Button tipButton = new PackedButton(\"Set\");\n+        Button setPopupButton = new PackedButton(\"Set\");\n+        Button remPopupButton = new PackedButton(\"Remove\");\n+\n+        PopupMenu popupMenu = new PopupMenu();\n+\n+        Map<String, TrayIcon> resToObjMap = new HashMap<>();\n+\n+        Container cont = new Container();\n+\n+        TrayIconControl() {\n+            Toolkit.getDefaultToolkit().addAWTEventListener(e -> {\n+                if (e.getSource() instanceof TrayIcon && awtListenerCbox.getState()) {\n+                    PassFailJFrame.log(e.toString());\n+                }\n+            }, MouseEvent.MOUSE_EVENT_MASK | MouseEvent.MOUSE_MOTION_EVENT_MASK |\n+                   ActionEvent.ACTION_EVENT_MASK);\n+\n+            cont.setLayout(new GridLayout(4, 1));\n+\n+            Container raw1 = new Container();\n+            raw1.setLayout(new GridLayout(1, 4));\n+            cont.add(raw1);\n+\n+            InsetsPanel cbgPanel = new InsetsPanel();\n+            cbgPanel.setLayout(new GridLayout(4, 1));\n+            Checkbox nullCbox = new Checkbox(\"null\", cbg, true);\n+            Checkbox redCbox = new Checkbox(RED_ICON, cbg, false);\n+            Checkbox blueCbox = new Checkbox(BLUE_ICON, cbg, false);\n+            Checkbox greenCbox = new Checkbox(GREEN_ICON, cbg, false);\n+            cbgPanel.add(nullCbox);\n+            cbgPanel.add(redCbox);\n+            cbgPanel.add(blueCbox);\n+            cbgPanel.add(greenCbox);\n+            cbgPanel.addTo(raw1);\n+\n+            InsetsPanel addremPanel = new InsetsPanel();\n+            addremPanel.setLayout(new BorderLayout());\n+            addremPanel.add(addButton.getParent(), BorderLayout.NORTH);\n+            addremPanel.add(remButton.getParent(), BorderLayout.SOUTH);\n+            addremPanel.addTo(raw1);\n+\n+            InsetsPanel resizePanel = new InsetsPanel();\n+            resizePanel.add(resizeButton);\n+            resizePanel.addTo(raw1);\n+\n+            InsetsPanel lstPanel = new InsetsPanel();\n+            lstPanel.setLayout(new GridLayout(3, 1));\n+            lstPanel.add(mouseListenerCbox);\n+            lstPanel.add(motionListenerCbox);\n+            lstPanel.add(awtListenerCbox);\n+            lstPanel.addTo(raw1);\n+\n+            Container raw2 = new Container();\n+            raw2.setLayout(new BorderLayout());\n+            cont.add(raw2);\n+\n+            InsetsPanel balloonPanel = new InsetsPanel();\n+            balloonPanel.setLayout(new BorderLayout());\n+            balloonPanel.add(balloonButton.getParent(), BorderLayout.NORTH);\n+            Container bc = new Container();\n+            bc.setLayout(new FlowLayout());\n+            bc.add(new Label(\"  Type:\"));\n+            bc.add(balloonChoice);\n+            balloonPanel.add(bc, BorderLayout.SOUTH);\n+            balloonPanel.addTo(raw2, BorderLayout.WEST);\n+\n+            InsetsPanel blnTextPanel = new InsetsPanel();\n+            blnTextPanel.setLayout(new GridLayout(2, 2));\n+            Container c1 = new Panel();\n+            c1.setLayout(new FlowLayout());\n+            blnTextPanel.add(c1);\n+            c1.add(new Label(\"Message:\"));\n+            c1.add(balloonText);\n+\n+            Container c2 = new Panel();\n+            c2.setLayout(new FlowLayout());\n+            blnTextPanel.add(c2);\n+            c2.add(new Label(\"Caption:\"));\n+            c2.add(balloonCaption);\n+            blnTextPanel.addTo(raw2, BorderLayout.CENTER);\n+\n+\n+            Container raw3 = new Container();\n+            raw3.setLayout(new BorderLayout());\n+            cont.add(raw3);\n+\n+            InsetsPanel popupPanel = new InsetsPanel();\n+            popupPanel.setLayout(new FlowLayout());\n+            popupPanel.add(new Label(\"Popup menu:\"));\n+            popupPanel.add(setPopupButton);\n+            popupPanel.add(remPopupButton);\n+            popupPanel.addTo(raw3);\n+\n+\n+            Container raw4 = new Container();\n+            raw4.setLayout(new BorderLayout());\n+            cont.add(raw4);\n+\n+            InsetsPanel tipPanel = new InsetsPanel();\n+            tipPanel.setLayout(new FlowLayout());\n+            tipPanel.add(new Label(\"Tooltip:\"));\n+            tipPanel.add(tipText);\n+            tipPanel.add(tipButton);\n+            tipPanel.addTo(raw4);\n+\n+            addButton.addActionListener(e -> {\n+                try {\n+                    tray.add(getCurIcon());\n+                } catch (NullPointerException npe) {\n+                    if (npe.getMessage() == null) {\n+                        PassFailJFrame.log(\"Probably wrong path to the images.\");\n+                        throw npe; \/\/ if wrong images path was set\n+                    }\n+                    PassFailJFrame.log(npe.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    PassFailJFrame.log(iae.toString());\n+                } catch (AWTException ise) {\n+                    PassFailJFrame.log(ise.toString());\n+                }\n+            });\n+            remButton.addActionListener(e -> tray.remove(getCurIcon()));\n+\n+            resizeButton.addActionListener(\n+                    e -> getCurIcon().setImageAutoSize(!getCurIcon().isImageAutoSize()));\n+\n+            balloonButton.addActionListener(e -> {\n+                String text = null, caption = null;\n+                if (balloonText.getText().compareToIgnoreCase(\"null\") != 0) {\n+                    text = balloonText.getText();\n+                }\n+                if (balloonCaption.getText().compareToIgnoreCase(\"null\") != 0) {\n+                    caption = balloonCaption.getText();\n+                }\n+                try {\n+                    getCurIcon().displayMessage(caption, text, typeArr[balloonChoice.getSelectedIndex()]);\n+                } catch (NullPointerException npe) {\n+                    PassFailJFrame.log(npe.toString());\n+                }\n+            });\n+\n+            tipButton.addActionListener(e -> {\n+                String tip = null;\n+                if (tipText.getText().compareToIgnoreCase(\"null\") != 0) {\n+                    tip = tipText.getText();\n+                }\n+                getCurIcon().setToolTip(tip);\n+            });\n+\n+            setPopupButton.addActionListener(e -> {\n+                try {\n+                    getCurIcon().setPopupMenu(popupMenu);\n+                } catch (IllegalArgumentException iae) {\n+                    PassFailJFrame.log(iae.toString());\n+                }\n+            });\n+\n+            remPopupButton.addActionListener(e -> getCurIcon().setPopupMenu(null));\n+            for (String s: balloonTypes) {\n+                balloonChoice.add(s);\n+            }\n+\n+            init();\n+        }\n+\n+        void init() {\n+            tray = SystemTray.getSystemTray();\n+            tray.addPropertyChangeListener(\"trayIcons\",\n+                                           e -> printPropertyChangeEvent(e));\n+\n+            tray.addPropertyChangeListener(\"systemTray\",\n+                                           e -> printPropertyChangeEvent(e));\n+\n+            configureTrayIcon(RED_ICON);\n+            configureTrayIcon(BLUE_ICON);\n+            configureTrayIcon(GREEN_ICON);\n+\n+            for (String s: balloonTypes) {\n+                popupMenu.add(new MenuItem(s));\n+            }\n+        }\n+\n+        void printPropertyChangeEvent(PropertyChangeEvent e) {\n+            String name = e.getPropertyName();\n+            Object oldValue = e.getOldValue();\n+            Object newValue = e.getNewValue();\n+\n+            PassFailJFrame.log(\"PropertyChangeEvent[name=\" + name\n+                               + \",oldValue=\" + oldValue + \",newValue=\" + newValue + \"]\");\n+        }\n+\n+        void configureTrayIcon(String icon) {\n+            Color color = Color.WHITE;\n+            switch (icon) {\n+                case \"RED ICON\" -> color = Color.RED;\n+                case \"BLUE ICON\" -> color = Color.BLUE;\n+                case \"GREEN ICON\" -> color = Color.GREEN;\n+            }\n+            Image image = createIcon(color);\n+            TrayIcon trayIcon = new TrayIcon(image);\n+\n+            trayIcon.addMouseListener(new MouseAdapter() {\n+                public void mousePressed(MouseEvent e) {\n+                    if (mouseListenerCbox.getState())\n+                        PassFailJFrame.log(e.toString());\n+                }\n+                public void mouseReleased(MouseEvent e) {\n+                    if (mouseListenerCbox.getState())\n+                        PassFailJFrame.log(e.toString());\n+                }\n+                public void mouseClicked(MouseEvent e) {\n+                    if (mouseListenerCbox.getState())\n+                        PassFailJFrame.log(e.toString());\n+                }\n+            });\n+            trayIcon.addMouseMotionListener(new MouseMotionAdapter() {\n+                public void mouseMoved(MouseEvent e) {\n+                    if (motionListenerCbox.getState())\n+                        PassFailJFrame.log(e.toString());\n+                }\n+            });\n+            trayIcon.addActionListener(e -> PassFailJFrame.log(e.toString()));\n+\n+            resToObjMap.remove(icon);\n+            resToObjMap.put(icon, trayIcon);\n+        }\n+\n+        String getCurImgName() {\n+            return cbg.getSelectedCheckbox().getLabel();\n+        }\n+\n+        TrayIcon getCurIcon() {\n+            return resToObjMap.get(getCurImgName());\n+        }\n+\n+        public void dispose() {\n+            tray.remove(getCurIcon());\n+        }\n+\n+        private static Image createIcon(Color color) {\n+            BufferedImage image = new BufferedImage(16, 16,\n+                                                    BufferedImage.TYPE_INT_ARGB);\n+            Graphics2D g = image.createGraphics();\n+            g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                               RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+            g.setColor(color);\n+            g.fillRect(0, 0, 16, 16);\n+            g.dispose();\n+            return image;\n+        }\n+\n+    }\n+\n+    private static class InsetsPanel extends Panel {\n+        Container parent = new Container() {\n+            public Insets getInsets() {\n+                return new Insets(2, 2, 2, 2);\n+            }\n+        };\n+\n+        InsetsPanel() {\n+            parent.setLayout(new BorderLayout());\n+            setBackground(new Color(240, 240, 240));\n+        }\n+\n+        void addTo(Container c) {\n+            parent.add(this);\n+            c.add(parent);\n+        }\n+\n+        void addTo(Container c, String pos) {\n+            parent.add(this);\n+            c.add(parent, pos);\n+        }\n+    }\n+\n+    private static class PackedButton extends Button {\n+        Container parent = new Container();\n+        PackedButton(String l) {\n+            super(l);\n+            parent.setLayout(new FlowLayout());\n+            parent.add(this);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconTest.java","additions":613,"deletions":0,"binary":false,"changes":613,"status":"added"}]}