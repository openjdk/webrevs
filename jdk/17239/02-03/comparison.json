{"files":[{"patch":"@@ -39,0 +39,2 @@\n+    private static record PlatformTestCase(Class<?> clazz, String expected) {}\n+\n@@ -45,10 +47,15 @@\n-        Map<Class<?>, String> platformTestCases =\n-            Map.of(\/\/int.class,                          \"int\",\n-                   void.class,                         \"void\",\n-                   args.getClass(),                    \"java.lang.String[]\",\n-                   nested.getClass(),                  \"java.lang.String[][]\",\n-                   intArray.getClass(),                \"int[][]\",\n-                   java.lang.Enum.class,               \"public abstract class java.lang.Enum<E extends java.lang.Enum<E>>\",\n-                   java.util.Map.class,                \"public abstract interface java.util.Map<K,V>\",\n-                   java.util.EnumMap.class,            \"public class java.util.EnumMap<K extends java.lang.Enum<K>,V>\",\n-                   java.util.EventListenerProxy.class, \"public abstract class java.util.EventListenerProxy<T extends java.util.EventListener>\",\n+       List<PlatformTestCase> platformTestCases =\n+           List.of(new PlatformTestCase(int.class,           \"int\"),\n+                   new PlatformTestCase(void.class,          \"void\"),\n+                   new PlatformTestCase(args.getClass(),     \"java.lang.String[]\"),\n+                   new PlatformTestCase(nested.getClass(),   \"java.lang.String[][]\"),\n+                   new PlatformTestCase(intArray.getClass(), \"int[][]\"),\n+\n+                   new PlatformTestCase(java.lang.Enum.class,\n+                                     \"public abstract class java.lang.Enum<E extends java.lang.Enum<E>>\"),\n+                   new PlatformTestCase(java.util.Map.class,\n+                                     \"public abstract interface java.util.Map<K,V>\"),\n+                   new PlatformTestCase(java.util.EnumMap.class,\n+                                     \"public class java.util.EnumMap<K extends java.lang.Enum<K>,V>\"),\n+                   new PlatformTestCase(java.util.EventListenerProxy.class,\n+                                     \"public abstract class java.util.EventListenerProxy<T extends java.util.EventListener>\"),\n@@ -57,1 +64,2 @@\n-                   java.lang.ref.Reference.class,      \"public abstract sealed class java.lang.ref.Reference<T>\",\n+                   new PlatformTestCase(java.lang.ref.Reference.class,\n+                                     \"public abstract sealed class java.lang.ref.Reference<T>\"),\n@@ -59,1 +67,2 @@\n-                   java.lang.ref.WeakReference.class,  \"public non-sealed class java.lang.ref.WeakReference<T>\"\n+                   new PlatformTestCase(java.lang.ref.WeakReference.class,\n+                                     \"public non-sealed class java.lang.ref.WeakReference<T>\")\n@@ -62,3 +71,3 @@\n-        for (Map.Entry<Class<?>, String> platformTestCase : platformTestCases.entrySet()) {\n-            failures += checkToGenericString(platformTestCase.getKey(),\n-                                             platformTestCase.getValue());\n+        for (PlatformTestCase platformTestCase : platformTestCases) {\n+            failures += checkToGenericString(platformTestCase.clazz,\n+                                             platformTestCase.expected);\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"}]}