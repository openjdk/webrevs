{"files":[{"patch":"@@ -98,1 +98,17 @@\n-                                     SealedRootClass.ChildC.GrandChildACC.GreatGrandChildACC.class)) {\n+                                     SealedRootClass.ChildC.GrandChildACC.GreatGrandChildACCA.class,\n+                                     SealedRootClass.ChildC.GrandChildACC.GreatGrandChildACCB.class,\n+\n+                                     SealedRootIntf.class,\n+                                     SealedRootIntf.ChildA.class,\n+                                     SealedRootIntf.ChildB.class,\n+                                     SealedRootIntf.ChildB.GrandChildAB.class,\n+                                     SealedRootIntf.ChildC.class,\n+                                     SealedRootIntf.ChildC.GrandChildACA.class,\n+                                     SealedRootIntf.ChildC.GrandChildACB.class,\n+                                     SealedRootIntf.ChildC.GrandChildACC.class,\n+                                     SealedRootIntf.ChildC.GrandChildACC.GreatGrandChildACCA.class,\n+                                     SealedRootIntf.ChildC.GrandChildACC.GreatGrandChildACCB.class,\n+                                     SealedRootIntf.IntfA.class,\n+                                     SealedRootIntf.IntfA.IntfAImpl.class,\n+                                     SealedRootIntf.IntfB.class,\n+                                     SealedRootIntf.IntfB.IntfAImpl.class)) {\n@@ -143,0 +159,1 @@\n+\/\/ Test cases for sealed\/non-sealed _class_ hierarchy.\n@@ -159,1 +176,0 @@\n-    \/\/ Test cases for sealed\/non-sealed hierarchies.\n@@ -172,2 +188,46 @@\n-            @ExpectedGenericString(\"final class SealedRootClass$ChildC$GrandChildACC$GreatGrandChildACC\")\n-            final class GreatGrandChildACC extends GrandChildACC {}\n+            @ExpectedGenericString(\"final class SealedRootClass$ChildC$GrandChildACC$GreatGrandChildACCA\")\n+            final class GreatGrandChildACCA extends GrandChildACC {}\n+\n+            @ExpectedGenericString(\"non-sealed class SealedRootClass$ChildC$GrandChildACC$GreatGrandChildACCB\")\n+            non-sealed class GreatGrandChildACCB extends GrandChildACC {}\n+        }\n+    }\n+}\n+\n+\/\/ Test cases for sealed\/non-sealed _interface_ hierarchy.\n+@ExpectedGenericString(\"abstract sealed interface SealedRootIntf\")\n+sealed interface SealedRootIntf\n+    permits\n+    SealedRootIntf.ChildA,\n+    SealedRootIntf.ChildB,\n+    SealedRootIntf.ChildC,\n+\n+    SealedRootIntf.IntfA,\n+    SealedRootIntf.IntfB {\n+\n+    @ExpectedGenericString(\"public static final class SealedRootIntf$ChildA\")\n+    final class ChildA implements SealedRootIntf {}\n+\n+    @ExpectedGenericString(\"public static sealed class SealedRootIntf$ChildB\")\n+    sealed class ChildB implements SealedRootIntf permits SealedRootIntf.ChildB.GrandChildAB {\n+        @ExpectedGenericString(\"final class SealedRootIntf$ChildB$GrandChildAB\")\n+        final class GrandChildAB extends ChildB {}\n+    }\n+\n+    @ExpectedGenericString(\"public static non-sealed class SealedRootIntf$ChildC\")\n+    non-sealed class ChildC implements SealedRootIntf {\n+        \/\/ The subclasses of ChildC do not themselves have to be\n+        \/\/ sealed, non-sealed, or final.\n+        @ExpectedGenericString(\"class SealedRootIntf$ChildC$GrandChildACA\")\n+        class GrandChildACA extends ChildC {}\n+\n+        @ExpectedGenericString(\"final class SealedRootIntf$ChildC$GrandChildACB\")\n+        final class GrandChildACB extends ChildC {}\n+\n+        @ExpectedGenericString(\"sealed class SealedRootIntf$ChildC$GrandChildACC\")\n+        sealed class GrandChildACC extends ChildC {\n+            @ExpectedGenericString(\"final class SealedRootIntf$ChildC$GrandChildACC$GreatGrandChildACCA\")\n+            final class GreatGrandChildACCA extends GrandChildACC {}\n+\n+            @ExpectedGenericString(\"non-sealed class SealedRootIntf$ChildC$GrandChildACC$GreatGrandChildACCB\")\n+            non-sealed class GreatGrandChildACCB extends GrandChildACC {}\n@@ -176,0 +236,13 @@\n+\n+    @ExpectedGenericString(\"public abstract static sealed interface SealedRootIntf$IntfA\")\n+    sealed interface IntfA extends  SealedRootIntf {\n+        @ExpectedGenericString(\"public static non-sealed class SealedRootIntf$IntfA$IntfAImpl\")\n+        non-sealed class IntfAImpl implements IntfA {}\n+    }\n+\n+    @ExpectedGenericString(\"public abstract static non-sealed interface SealedRootIntf$IntfB\")\n+    non-sealed interface IntfB extends  SealedRootIntf {\n+        \/\/ Check that non-sealing can be allowed with a second superinterface being sealed.\n+        @ExpectedGenericString(\"public static non-sealed class SealedRootIntf$IntfB$IntfAImpl\")\n+        non-sealed class IntfAImpl implements IntfB, IntfA  {}\n+    }\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":77,"deletions":4,"binary":false,"changes":81,"status":"modified"}]}