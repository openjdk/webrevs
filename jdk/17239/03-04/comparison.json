{"files":[{"patch":"@@ -264,1 +264,2 @@\n-     * information about modifiers, {@linkplain #isSealed() sealing}, and type parameters.\n+     * information about modifiers, {@link #isSealed() sealed}\/{@code\n+     * non-sealed} status, and type parameters.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                                     \"public abstract class java.lang.Enum<E extends java.lang.Enum<E>>\"),\n+                                        \"public abstract class java.lang.Enum<E extends java.lang.Enum<E>>\"),\n@@ -57,1 +57,1 @@\n-                                     \"public abstract interface java.util.Map<K,V>\"),\n+                                        \"public abstract interface java.util.Map<K,V>\"),\n@@ -59,1 +59,1 @@\n-                                     \"public class java.util.EnumMap<K extends java.lang.Enum<K>,V>\"),\n+                                        \"public class java.util.EnumMap<K extends java.lang.Enum<K>,V>\"),\n@@ -61,1 +61,1 @@\n-                                     \"public abstract class java.util.EventListenerProxy<T extends java.util.EventListener>\"),\n+                                        \"public abstract class java.util.EventListenerProxy<T extends java.util.EventListener>\"),\n@@ -88,1 +88,11 @@\n-                                     AnotherEnum.class)) {\n+                                     AnotherEnum.class,\n+\n+                                     SealedRootClass.class,\n+                                     SealedRootClass.ChildA.class,\n+                                     SealedRootClass.ChildB.class,\n+                                     SealedRootClass.ChildB.GrandChildAB.class,\n+                                     SealedRootClass.ChildC.class,\n+                                     SealedRootClass.ChildC.GrandChildACA.class,\n+                                     SealedRootClass.ChildC.GrandChildACB.class,\n+                                     SealedRootClass.ChildC.GrandChildACC.class,\n+                                     SealedRootClass.ChildC.GrandChildACC.GreatGrandChildACC.class)) {\n@@ -132,0 +142,35 @@\n+\n+@ExpectedGenericString(\"sealed class SealedRootClass\")\n+sealed class SealedRootClass\n+    permits\n+    SealedRootClass.ChildA,\n+    SealedRootClass.ChildB,\n+    SealedRootClass.ChildC {\n+\n+    @ExpectedGenericString(\"final class SealedRootClass$ChildA\")\n+    final class ChildA extends SealedRootClass {}\n+\n+    @ExpectedGenericString(\"sealed class SealedRootClass$ChildB\")\n+    sealed class ChildB extends SealedRootClass permits SealedRootClass.ChildB.GrandChildAB {\n+        @ExpectedGenericString(\"final class SealedRootClass$ChildB$GrandChildAB\")\n+        final class GrandChildAB extends ChildB {}\n+    }\n+\n+    \/\/ Test cases for sealed\/non-sealed hierarchies.\n+    @ExpectedGenericString(\"non-sealed class SealedRootClass$ChildC\")\n+    non-sealed class ChildC extends SealedRootClass {\n+        \/\/ The subclasses of ChildC do not themselves have to be\n+        \/\/ sealed, non-sealed, or final.\n+        @ExpectedGenericString(\"class SealedRootClass$ChildC$GrandChildACA\")\n+        class GrandChildACA extends ChildC {}\n+\n+        @ExpectedGenericString(\"final class SealedRootClass$ChildC$GrandChildACB\")\n+        final class GrandChildACB extends ChildC {}\n+\n+        @ExpectedGenericString(\"sealed class SealedRootClass$ChildC$GrandChildACC\")\n+        sealed class GrandChildACC extends ChildC {\n+            @ExpectedGenericString(\"final class SealedRootClass$ChildC$GrandChildACC$GreatGrandChildACC\")\n+            final class GreatGrandChildACC extends GrandChildACC {}\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":50,"deletions":5,"binary":false,"changes":55,"status":"modified"}]}