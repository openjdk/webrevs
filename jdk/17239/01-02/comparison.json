{"files":[{"patch":"@@ -357,2 +357,1 @@\n-            boolean isSealed = isSealed();\n-            if (isSealed) {\n+            if (isSealed()) {\n@@ -372,0 +371,15 @@\n+        \/\/ From JLS 8.1.1.2:\n+        \/\/ \"It is a compile-time error if a class has a sealed direct\n+        \/\/ superclass or a sealed direct superinterface, and is not\n+        \/\/ declared final, sealed, or non-sealed either explicitly or\n+        \/\/ implicitly.\n+        \/\/ Thus, an effect of the sealed keyword is to force all\n+        \/\/ direct subclasses to explicitly declare whether they are\n+        \/\/ final, sealed, or non-sealed. This avoids accidentally\n+        \/\/ exposing a sealed class hierarchy to unwanted subclassing.\n+        \/\/ [...]\n+        \/\/ Thus, a subclass of a non-sealed class cannot itself be\n+        \/\/ declared non-sealed.\"\n+\n+        \/\/ Therefore, will just check direct superclass and\n+        \/\/ superinterfaces.\n@@ -373,3 +387,2 @@\n-        if (superclass != null) {\n-            if (superclass.isSealed() || hasSealedAncestor(superclass))\n-                return true;\n+        if (superclass != null && superclass.isSealed()) {\n+            return true;\n@@ -378,1 +391,1 @@\n-            if (superinterface.isSealed() || hasSealedAncestor(superinterface))\n+            if (superinterface.isSealed()) {\n@@ -380,0 +393,1 @@\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"}]}