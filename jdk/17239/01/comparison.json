{"files":[{"patch":"@@ -264,1 +264,1 @@\n-     * information about modifiers and type parameters.\n+     * information about modifiers, {@linkplain #isSealed() sealing}, and type parameters.\n@@ -317,0 +317,5 @@\n+                \/\/ A class cannot be strictfp and sealed\/non-sealed so\n+                \/\/ it is sufficient to check for sealed-ness after all\n+                \/\/ modifiers are printed.\n+                addSealingInfo(modifiers, sb);\n+\n@@ -347,0 +352,32 @@\n+    private void addSealingInfo(int modifiers, StringBuilder sb) {\n+        \/\/ A class can be final XOR sealed XOR non-sealed.\n+        if (Modifier.isFinal(modifiers)) {\n+            return; \/\/ no-op\n+        } else {\n+            boolean isSealed = isSealed();\n+            if (isSealed) {\n+                sb.append(\"sealed \");\n+                return;\n+            } else {\n+                \/\/ Check for sealed ancestor, which implies this class\n+                \/\/ is non-sealed.\n+                if (hasSealedAncestor(this)) {\n+                    sb.append(\"non-sealed \");\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean hasSealedAncestor(Class<?> clazz) {\n+        var superclass = clazz.getSuperclass();\n+        if (superclass != null) {\n+            if (superclass.isSealed() || hasSealedAncestor(superclass))\n+                return true;\n+        }\n+        for (var superinterface : clazz.getInterfaces()) {\n+            if (superinterface.isSealed() || hasSealedAncestor(superinterface))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6298888 6992705 8161500 6304578\n+ * @bug 6298888 6992705 8161500 6304578 8322878\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -46,2 +45,2 @@\n-        Map<Class<?>, String> testCases =\n-            Map.of(int.class,                          \"int\",\n+        Map<Class<?>, String> platformTestCases =\n+            Map.of(\/\/int.class,                          \"int\",\n@@ -55,1 +54,1 @@\n-                   java.util.EventListenerProxy.class, \"public abstract class java.util.EventListenerProxy<T extends java.util.EventListener>\");\n+                   java.util.EventListenerProxy.class, \"public abstract class java.util.EventListenerProxy<T extends java.util.EventListener>\",\n@@ -57,2 +56,9 @@\n-        for (Map.Entry<Class<?>, String> testCase : testCases.entrySet()) {\n-            failures += checkToGenericString(testCase.getKey(), testCase.getValue());\n+                   \/\/ Sealed class\n+                   java.lang.ref.Reference.class,      \"public abstract sealed class java.lang.ref.Reference<T>\",\n+                   \/\/ non-sealed class\n+                   java.lang.ref.WeakReference.class,  \"public non-sealed class java.lang.ref.WeakReference<T>\"\n+                   );\n+\n+        for (Map.Entry<Class<?>, String> platformTestCase : platformTestCases.entrySet()) {\n+            failures += checkToGenericString(platformTestCase.getKey(),\n+                                             platformTestCase.getValue());\n@@ -110,1 +116,4 @@\n-@ExpectedGenericString(\"enum AnotherEnum\")\n+\/\/ If an enum class has a specialized enum constant, that is compiled\n+\/\/ by having the enum class as being sealed rather than final. See JLS\n+\/\/ 8.9 Enum Classes.\n+@ExpectedGenericString(\"sealed enum AnotherEnum\")\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"}]}