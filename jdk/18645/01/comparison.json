{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,3 @@\n- * implemented by: <B>SocketImpl<\/B> and  <B>DatagramSocketImpl<\/B>.\n- * Subclasses of these should override the methods\n- * of this interface in order to support their own options.\n+ * implemented by {@link SocketImpl} and {@link DatagramSocketImpl}.\n+ * Subclasses of these two classes should override the {@link #getOption(int)} and\n+ * {@link #setOption(int, Object)} methods of this interface in order to support their own options.\n@@ -36,5 +36,5 @@\n- * The methods and constants which specify options in this interface are\n- * for implementation only.  If you're not subclassing SocketImpl or\n- * DatagramSocketImpl, <B>you won't use these directly.<\/B> There are\n- * type-safe methods to get\/set each of these options in Socket, ServerSocket,\n- * DatagramSocket and MulticastSocket.\n+ * The methods and constants defined in this interface are\n+ * for implementation only. If you're not subclassing {@code SocketImpl} or\n+ * {@code DatagramSocketImpl}, then you won't use these directly. There are\n+ * type-safe methods to get\/set each of these options in {@link Socket}, {@link ServerSocket},\n+ *  {@link DatagramSocket} and {@link MulticastSocket}.\n@@ -50,5 +50,5 @@\n-     * Enable\/disable the option specified by <I>optID<\/I>.  If the option\n-     * is to be enabled, and it takes an option-specific \"value\",  this is\n-     * passed in <I>value<\/I>.  The actual type of value is option-specific,\n-     * and it is an error to pass something that isn't of the expected type:\n-     * <BR><PRE>\n+     * Enable\/disable the option specified by {@code optID}. If the option\n+     * is to be enabled, and it takes an option-specific \"value\", this is passed in {@code value}.\n+     * The actual type of {@code value} is option-specific, and it is an error to pass something\n+     * that isn't of the expected type:\n+     * {@snippet lang=java :\n@@ -61,4 +61,3 @@\n-     *<\/PRE>\n-     * If the requested option is binary, it can be set using this method by\n-     * a java.lang.Boolean:\n-     * <BR><PRE>\n+     *}\n+     * If the requested option is binary, it can be set using this method by a {@link Boolean}:\n+     * {@snippet lang=java :\n@@ -67,4 +66,3 @@\n-     * <\/PRE>\n-     * <BR>\n-     * Any option can be disabled using this method with a Boolean.FALSE:\n-     * <BR><PRE>\n+     * }\n+     * Any option can be disabled using this method with a {@link Boolean#FALSE}:\n+     * {@snippet lang=java :\n@@ -75,9 +73,4 @@\n-     * <\/PRE>\n-     * <BR>\n-     * For an option that has a notion of on and off, and requires\n-     * a non-boolean parameter, setting its value to anything other than\n-     * <I>Boolean.FALSE<\/I> implicitly enables it.\n-     * <BR>\n-     * Throws SocketException if the option is unrecognized,\n-     * the socket is closed, or some low-level error occurred\n-     * <BR>\n+     * }\n+     * For an option that has a notion of on and off, and requires a non-boolean parameter, setting\n+     * its value to anything other than {@link Boolean#FALSE} implicitly enables it.\n+     *\n@@ -86,2 +79,2 @@\n-     * @throws SocketException if the option is unrecognized,\n-     *         the socket is closed, or some low-level error occurred\n+     * @throws SocketException if the option is unrecognized, the socket is closed, or some\n+     *                         low-level error occurred\n@@ -90,2 +83,1 @@\n-    public void\n-        setOption(int optID, Object value) throws SocketException;\n+    public void setOption(int optID, Object value) throws SocketException;\n@@ -94,4 +86,3 @@\n-     * Fetch the value of an option.\n-     * Binary options will return java.lang.Boolean.TRUE\n-     * if enabled, java.lang.Boolean.FALSE if disabled, e.g.:\n-     * <BR><PRE>\n+     * Fetch the value of an option. Binary options will return {@link Boolean#TRUE} if enabled,\n+     * {@link Boolean#FALSE} if disabled, e.g.:\n+     * {@snippet lang=java :\n@@ -105,1 +96,1 @@\n-     * <\/PRE>\n+     * }\n@@ -107,4 +98,3 @@\n-     * For options that take a particular type as a parameter,\n-     * getOption(int) will return the parameter's value, else\n-     * it will return java.lang.Boolean.FALSE:\n-     * <PRE>\n+     * For options that take a particular type as a parameter, this method will return the\n+     * parameter's value, else it will return {@link Boolean#FALSE}:\n+     * {@snippet lang=java :\n@@ -117,1 +107,1 @@\n-     * <\/PRE>\n+     * }\n@@ -121,3 +111,2 @@\n-     * @throws SocketException if the socket is closed\n-     * @throws SocketException if <I>optID<\/I> is unknown along the\n-     *         protocol stack (including the SocketImpl)\n+     * @throws SocketException if the socket is closed or if {@code optID} is unknown along the\n+     *                         protocol stack\n@@ -128,3 +117,1 @@\n-    \/**\n-     * The java-supported BSD-style options.\n-     *\/\n+    \/\/ Java supported BSD-style options follow\n@@ -133,5 +120,1 @@\n-     * Disable Nagle's algorithm for this connection.  Written data\n-     * to the network is not buffered pending acknowledgement of\n-     * previously written data.\n-     *<P>\n-     * Valid for TCP only: SocketImpl.\n+     * See {@link StandardSocketOptions#TCP_NODELAY} for description of this socket option.\n@@ -142,1 +125,0 @@\n-\n@@ -146,5 +128,4 @@\n-     * Fetch the local address binding of a socket (this option cannot\n-     * be \"set\" only \"gotten\", since sockets are bound at creation time,\n-     * and so the locally bound address cannot be changed).  The default local\n-     * address of a socket is INADDR_ANY, meaning any local address on a\n-     * multi-homed host.  A multi-homed host can use this option to accept\n+     * Fetch the local address binding of a socket. This option cannot be set and can only be\n+     * fetched. The default local address of a socket is\n+     * {@link InetAddress#isAnyLocalAddress() INADDR_ANY}, meaning any local\n+     * address on a multi-homed host. A multi-homed host can use this option to accept\n@@ -152,7 +133,3 @@\n-     * ServerSocket or DatagramSocket), or to specify its return address\n-     * to the peer (for a Socket or DatagramSocket).  The parameter of\n-     * this option is an InetAddress.\n-     * <P>\n-     * This option <B>must<\/B> be specified in the constructor.\n-     * <P>\n-     * Valid for: SocketImpl, DatagramSocketImpl\n+     * {@link ServerSocket} or {@link DatagramSocket}), or to specify its return address\n+     * to the peer (for a {@link Socket} or {@link DatagramSocket}). The type of this option's\n+     * value is an {@link InetAddress}.\n@@ -163,1 +140,0 @@\n-\n@@ -166,4 +142,2 @@\n-    \/** Sets SO_REUSEADDR for a socket.  This is used only for MulticastSockets\n-     * in java, and it is set by default for MulticastSockets.\n-     * <P>\n-     * Valid for: DatagramSocketImpl\n+    \/**\n+     * See {@link StandardSocketOptions#SO_REUSEADDR} for description of this socket option.\n@@ -171,1 +145,0 @@\n-\n@@ -174,6 +147,2 @@\n-    \/** Sets SO_REUSEPORT for a socket. This option enables and disables\n-     *  the ability to have multiple sockets listen to the same address\n-     *  and port.\n-     * <P>\n-     * Valid for: SocketImpl, DatagramSocketImpl\n-     *\n+    \/**\n+     * See {@link StandardSocketOptions#SO_REUSEPORT} for description of this socket option.\n@@ -181,1 +150,0 @@\n-     * @see StandardSocketOptions#SO_REUSEPORT\n@@ -186,5 +154,1 @@\n-     * Sets SO_BROADCAST for a socket. This option enables and disables\n-     * the ability of the process to send broadcast messages. It is supported\n-     * for only datagram sockets and only on networks that support\n-     * the concept of a broadcast message (e.g. Ethernet, token ring, etc.),\n-     * and it is set by default for DatagramSockets.\n+     * See {@link StandardSocketOptions#SO_BROADCAST} for description of this socket option.\n@@ -193,1 +157,0 @@\n-\n@@ -196,5 +159,2 @@\n-    \/** Set which outgoing interface on which to send multicast packets.\n-     * Useful on hosts with multiple network interfaces, where applications\n-     * want to use other than the system default.  Takes\/returns an InetAddress.\n-     * <P>\n-     * Valid for Multicast: DatagramSocketImpl\n+    \/**\n+     * See {@link StandardSocketOptions#IP_MULTICAST_IF} for description of this socket option.\n@@ -205,1 +165,0 @@\n-\n@@ -208,4 +167,5 @@\n-    \/** Same as above. This option is introduced so that the behaviour\n-     *  with IP_MULTICAST_IF will be kept the same as before, while\n-     *  this new option can support setting outgoing interfaces with either\n-     *  IPv4 and IPv6 addresses.\n+    \/**\n+     * This option is used to both set and fetch the outgoing interface on which the multicast\n+     * packets are sent. Useful on hosts with multiple network interfaces, where applications\n+     * want to use other than the system default. This option supports setting outgoing interfaces\n+     * with either IPv4 and IPv6 addresses.\n@@ -213,1 +173,0 @@\n-     *  NOTE: make sure there is no conflict with this\n@@ -221,2 +180,1 @@\n-     * This option enables or disables local loopback of multicast datagrams.\n-     * This option is enabled by default for Multicast Sockets.\n+     * See {@link StandardSocketOptions#IP_MULTICAST_LOOP} for description of this socket option.\n@@ -225,1 +183,0 @@\n-\n@@ -229,2 +186,1 @@\n-     * This option sets the type-of-service or traffic class field\n-     * in the IP header for a TCP or UDP socket.\n+     * See {@link StandardSocketOptions#IP_TOS} for description of this socket option.\n@@ -233,1 +189,0 @@\n-\n@@ -237,11 +192,1 @@\n-     * Specify a linger-on-close timeout.  This option disables\/enables\n-     * immediate return from a <B>close()<\/B> of a TCP Socket.  Enabling\n-     * this option with a non-zero Integer <I>timeout<\/I> means that a\n-     * <B>close()<\/B> will block pending the transmission and acknowledgement\n-     * of all data written to the peer, at which point the socket is closed\n-     * <I>gracefully<\/I>.  Upon reaching the linger timeout, the socket is\n-     * closed <I>forcefully<\/I>, with a TCP RST. Enabling the option with a\n-     * timeout of zero does a forceful close immediately. If the specified\n-     * timeout value exceeds 65,535 it will be reduced to 65,535.\n-     * <P>\n-     * Valid only for TCP: SocketImpl\n+     * See {@link StandardSocketOptions#SO_LINGER} for description of this socket option.\n@@ -254,12 +199,8 @@\n-    \/** Set a timeout on blocking Socket operations:\n-     * <PRE>\n-     * ServerSocket.accept();\n-     * SocketInputStream.read();\n-     * DatagramSocket.receive();\n-     * <\/PRE>\n-     *\n-     * <P> The option must be set prior to entering a blocking\n-     * operation to take effect.  If the timeout expires and the\n-     * operation would continue to block,\n-     * <B>java.io.InterruptedIOException<\/B> is raised.  The Socket is\n-     * not closed in this case.\n+    \/**\n+     * This option is used to both set and fetch a timeout value on blocking\n+     * {@code Socket} operations:\n+     * <ul>\n+     *     <li>{@linkplain ServerSocket#accept() ServerSocket.accept()}<\/li>\n+     *     <li>{@linkplain Socket#getInputStream()  Socket InputStream.read()}<\/li>\n+     *     <li>{@linkplain DatagramSocket#receive(DatagramPacket) DatagramSocket.receive()}<\/li>\n+     * <\/ul>\n@@ -267,1 +208,5 @@\n-     * <P> Valid for all sockets: SocketImpl, DatagramSocketImpl\n+     * <P>\n+     * This option must be set prior to entering a blocking operation to take effect. If the\n+     * timeout expires and the operation would continue to block, then\n+     * {@link java.io.InterruptedIOException} is raised. The {@code Socket} is not closed\n+     * in such cases.\n@@ -276,8 +221,1 @@\n-     * Set a hint the size of the underlying buffers used by the\n-     * platform for outgoing network I\/O. When used in set, this is a\n-     * suggestion to the kernel from the application about the size of\n-     * buffers to use for the data to be sent over the socket. When\n-     * used in get, this must return the size of the buffer actually\n-     * used by the platform when sending out data on this socket.\n-     *\n-     * Valid for all sockets: SocketImpl, DatagramSocketImpl\n+     * See {@link StandardSocketOptions#SO_SNDBUF} for description of this socket option.\n@@ -293,9 +231,1 @@\n-     * Set a hint the size of the underlying buffers used by the\n-     * platform for incoming network I\/O. When used in set, this is a\n-     * suggestion to the kernel from the application about the size of\n-     * buffers to use for the data to be received over the\n-     * socket. When used in get, this must return the size of the\n-     * buffer actually used by the platform when receiving in data on\n-     * this socket.\n-     *\n-     * Valid for all sockets: SocketImpl, DatagramSocketImpl\n+     * See {@link StandardSocketOptions#SO_RCVBUF} for description of this socket option.\n@@ -311,16 +241,1 @@\n-     * When the keepalive option is set for a TCP socket and no data\n-     * has been exchanged across the socket in either direction for\n-     * 2 hours (NOTE: the actual value is implementation dependent),\n-     * TCP automatically sends a keepalive probe to the peer. This probe is a\n-     * TCP segment to which the peer must respond.\n-     * One of three responses is expected:\n-     * 1. The peer responds with the expected ACK. The application is not\n-     *    notified (since everything is OK). TCP will send another probe\n-     *    following another 2 hours of inactivity.\n-     * 2. The peer responds with an RST, which tells the local TCP that\n-     *    the peer host has crashed and rebooted. The socket is closed.\n-     * 3. There is no response from the peer. The socket is closed.\n-     *\n-     * The purpose of this option is to detect if the peer host crashes.\n-     *\n-     * Valid only for TCP socket: SocketImpl\n+     * See {@link StandardSocketOptions#SO_KEEPALIVE} for description of this socket option.\n@@ -334,4 +249,3 @@\n-     * When the OOBINLINE option is set, any TCP urgent data received on\n-     * the socket will be received through the socket input stream.\n-     * When the option is disabled (which is the default) urgent data\n-     * is silently discarded.\n+     * When this option is set, any TCP urgent data received on the socket will be received\n+     * through the socket input stream. When the option is disabled (which is the default)\n+     * urgent data is silently discarded.\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketOptions.java","additions":80,"deletions":166,"binary":false,"changes":246,"status":"modified"}]}