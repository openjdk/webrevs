{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import java.security.Permission;\n+\n@@ -139,2 +139,5 @@\n-    private URL jarFileURL;\n-    private String entryName;\n+    \/\/ The URL to the JAR file this connection reads from\n+    private final URL jarFileURL;\n+\n+    \/\/ The entry this connection reads from, if any\n+    private final String entryName;\n@@ -155,1 +158,0 @@\n-\n@@ -158,2 +160,0 @@\n-        parseSpecs(url);\n-    }\n@@ -161,4 +161,1 @@\n-    \/* get the specs for a given url out of the cache, and compute and\n-     * cache them if they're not there.\n-     *\/\n-    private void parseSpecs(URL url) throws MalformedURLException {\n+        \/\/ Extract JAR file URL and entry name components from the URL\n@@ -166,1 +163,0 @@\n-\n@@ -168,3 +164,2 @@\n-        \/*\n-         * REMIND: we don't handle nested JAR URLs\n-         *\/\n+\n+        \/\/ REMIND: we don't handle nested JAR URLs\n@@ -175,2 +170,3 @@\n-        @SuppressWarnings(\"deprecation\")\n-        var _unused = jarFileURL = new URL(spec.substring(0, separator++));\n+        jarFileURL = parseJarFileURL(spec, separator, url);\n+        entryName = parseEntryName(spec, separator);\n+    }\n@@ -178,0 +174,15 @@\n+    \/**\n+     * Parse the URL of the JAR file backing this JarURLConnection,\n+     * appending any #runtime fragment as neccessary\n+     *\n+     * @param spec the URL spec of this connection\n+     * @param separator the index of the '!\/' separator\n+     * @param connectionURL the URL passed to the constructor\n+     * @return a URL to the JAR file this connection reads from\n+     *\n+     * @throws MalformedURLException if a malformed URL is found\n+     *\/\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL parseJarFileURL(String spec, int separator, URL connectionURL) throws MalformedURLException {\n+\n+        URL url = new URL(spec.substring(0, separator));\n@@ -179,1 +190,1 @@\n-         * The url argument may have had a runtime fragment appended, so\n+         * The url passed to the constructor may have had a runtime fragment appended, so\n@@ -183,3 +194,2 @@\n-        if (\"runtime\".equals(url.getRef())) {\n-            @SuppressWarnings(\"deprecation\")\n-            var _unused2 = jarFileURL = new URL(jarFileURL, \"#runtime\");\n+        if (\"runtime\".equals(connectionURL.getRef())) {\n+            return new URL(url, \"#runtime\");\n@@ -187,1 +197,2 @@\n-        entryName = null;\n+        return url;\n+    }\n@@ -189,4 +200,15 @@\n-        \/* if ! is the last letter of the innerURL, entryName is null *\/\n-        if (++separator != spec.length()) {\n-            entryName = spec.substring(separator, spec.length());\n-            entryName = ParseUtil.decode (entryName);\n+    \/**\n+     * Parse the entry name (if any) of this JarURLConnection\n+     *\n+     * @param spec the URL spec of this connection\n+     * @param separator the index of the '!\/' separator\n+     * @return the decoded entry name, or null if this URL has no entry name\n+     *\/\n+    private static String parseEntryName(String spec, int separator) {\n+        \/\/ If the URL ends with the '!\/' separator, entryName is null\n+        int nameIdx = separator + 2;\n+        if (nameIdx == spec.length()) {\n+            return null;\n+        } else {\n+            String encodedName = spec.substring(nameIdx, spec.length());\n+            return ParseUtil.decode(encodedName);\n","filename":"src\/java.base\/share\/classes\/java\/net\/JarURLConnection.java","additions":48,"deletions":26,"binary":false,"changes":74,"status":"modified"}]}