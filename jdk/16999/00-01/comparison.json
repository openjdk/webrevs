{"files":[{"patch":"@@ -331,3 +331,3 @@\n-    public void testStringGetWithCharset(SupportedCharset charset, HeapSegment segment) {\n-        for (int offset = 0 ; offset <= charset.align ; offset++) {\n-            segment.segment.getString(offset, charset.charset);\n+    public void testStringGetWithCharset(Charset charset, MemorySegment segment) {\n+        for (int offset = 0 ; offset < Long.BYTES ; offset++) {\n+            segment.getString(offset, charset);\n@@ -338,3 +338,3 @@\n-    public void testStringSetWithCharset(SupportedCharset charset, HeapSegment segment) {\n-        for (int offset = 0 ; offset <= charset.align ; offset++) {\n-            segment.segment.setString(offset, \"H\", charset.charset);\n+    public void testStringSetWithCharset(Charset charset, MemorySegment segment) {\n+        for (int offset = 0 ; offset < Long.BYTES ; offset++) {\n+            segment.setString(offset, \"H\", charset);\n@@ -345,3 +345,3 @@\n-    public void testStringAllocateFromWithCharset(SupportedCharset charset, HeapSegment segment) {\n-        for (int offset = 0 ; offset <= charset.align ; offset++) {\n-            SegmentAllocator.prefixAllocator(segment.segment.asSlice(offset)).allocateFrom(\"H\", charset.charset);\n+    public void testStringAllocateFromWithCharset(Charset charset, MemorySegment segment) {\n+        for (int offset = 0 ; offset < Long.BYTES ; offset++) {\n+            SegmentAllocator.prefixAllocator(segment.asSlice(offset)).allocateFrom(\"H\", charset);\n@@ -379,1 +379,1 @@\n-    boolean isStandard(Charset charset) {\n+    static boolean isStandard(Charset charset) {\n@@ -392,1 +392,1 @@\n-    List<Charset> standardCharsets() {\n+    static List<Charset> standardCharsets() {\n@@ -394,1 +394,1 @@\n-                .filter(this::isStandard)\n+                .filter(TestStringEncoding::isStandard)\n@@ -474,36 +474,10 @@\n-    enum SupportedCharset {\n-        ISO_8859_1(StandardCharsets.ISO_8859_1, 1),\n-        US_ASCII(StandardCharsets.US_ASCII, 1),\n-        UTF_8(StandardCharsets.UTF_8, 1),\n-        UTF_16(StandardCharsets.UTF_16, 2),\n-        UTF_16BE(StandardCharsets.UTF_16BE, 2),\n-        UTF_16LE(StandardCharsets.UTF_16LE, 2),\n-        UTF_32(StandardCharsets.UTF_32, 4),\n-        UTF_32BE(StandardCharsets.UTF_32BE, 4),\n-        UTF_32LE(StandardCharsets.UTF_32LE, 4);\n-\n-        final Charset charset;\n-        final long align;\n-\n-        SupportedCharset(Charset charset, long align) {\n-            this.charset = charset;\n-            this.align = align;\n-        }\n-    }\n-\n-    enum HeapSegment {\n-        BYTE(MemorySegment.ofArray(new byte[80]), 1),\n-        CHAR(MemorySegment.ofArray(new char[40]), 2),\n-        SHORT(MemorySegment.ofArray(new short[40]), 2),\n-        INT(MemorySegment.ofArray(new int[20]), 4),\n-        FLOAT(MemorySegment.ofArray(new float[20]), 4),\n-        LONG(MemorySegment.ofArray(new long[10]), 8),\n-        DOUBLE(MemorySegment.ofArray(new double[10]), 8);\n-\n-        final MemorySegment segment;\n-        final long maxAlign;\n-\n-        HeapSegment(MemorySegment segment, long maxAlign) {\n-            this.segment = segment;\n-            this.maxAlign = maxAlign;\n-        }\n+    static MemorySegment[] heapSegments() {\n+        return new MemorySegment[]{\n+                MemorySegment.ofArray(new byte[80]),\n+                MemorySegment.ofArray(new char[40]),\n+                MemorySegment.ofArray(new short[40]),\n+                MemorySegment.ofArray(new int[20]),\n+                MemorySegment.ofArray(new float[20]),\n+                MemorySegment.ofArray(new long[10]),\n+                MemorySegment.ofArray(new double[10])\n+        };\n@@ -515,3 +489,3 @@\n-        for (SupportedCharset charset : SupportedCharset.values()) {\n-            for (HeapSegment heapSegments : HeapSegment.values()) {\n-                values.add(new Object[] { charset, heapSegments });\n+        for (Charset charset : standardCharsets()) {\n+            for (MemorySegment heapSegment : heapSegments()) {\n+                values.add(new Object[] { charset, heapSegment });\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":25,"deletions":51,"binary":false,"changes":76,"status":"modified"}]}