{"files":[{"patch":"@@ -85,1 +85,1 @@\n-        segment.set(JAVA_SHORT, offset + bytes, (short)0);\n+        segment.set(JAVA_SHORT_UNALIGNED, offset + bytes, (short)0);\n@@ -97,1 +97,1 @@\n-        segment.set(JAVA_INT, offset + bytes, 0);\n+        segment.set(JAVA_INT_UNALIGNED, offset + bytes, 0);\n@@ -225,1 +225,1 @@\n-            short curr = segment.get(JAVA_SHORT, start + offset);\n+            short curr = segment.get(JAVA_SHORT_UNALIGNED, start + offset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.io.IOException;\n-import java.io.RandomAccessFile;\n@@ -36,1 +34,0 @@\n-import java.nio.channels.FileChannel;\n@@ -39,3 +36,1 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n+import java.util.ArrayList;\n@@ -45,1 +40,0 @@\n-import java.util.function.Consumer;\n@@ -336,0 +330,21 @@\n+    @Test(dataProvider = \"charsetsAndSegments\")\n+    public void testStringGetWithCharset(Charset charset, MemorySegment segment) {\n+        for (int offset = 0 ; offset < Long.BYTES ; offset++) {\n+            segment.getString(offset, charset);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"charsetsAndSegments\")\n+    public void testStringSetWithCharset(Charset charset, MemorySegment segment) {\n+        for (int offset = 0 ; offset < Long.BYTES ; offset++) {\n+            segment.setString(offset, \"H\", charset);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"charsetsAndSegments\")\n+    public void testStringAllocateFromWithCharset(Charset charset, MemorySegment segment) {\n+        for (int offset = 0 ; offset < Long.BYTES ; offset++) {\n+            SegmentAllocator.prefixAllocator(segment.asSlice(offset)).allocateFrom(\"H\", charset);\n+        }\n+    }\n+\n@@ -364,1 +379,1 @@\n-    boolean isStandard(Charset charset) {\n+    static boolean isStandard(Charset charset) {\n@@ -377,1 +392,1 @@\n-    List<Charset> standardCharsets() {\n+    static List<Charset> standardCharsets() {\n@@ -379,1 +394,1 @@\n-                .filter(this::isStandard)\n+                .filter(TestStringEncoding::isStandard)\n@@ -459,0 +474,22 @@\n+    static MemorySegment[] heapSegments() {\n+        return new MemorySegment[]{\n+                MemorySegment.ofArray(new byte[80]),\n+                MemorySegment.ofArray(new char[40]),\n+                MemorySegment.ofArray(new short[40]),\n+                MemorySegment.ofArray(new int[20]),\n+                MemorySegment.ofArray(new float[20]),\n+                MemorySegment.ofArray(new long[10]),\n+                MemorySegment.ofArray(new double[10])\n+        };\n+    }\n+\n+    @DataProvider\n+    public static Object[][] charsetsAndSegments() {\n+        List<Object[]> values = new ArrayList<>();\n+        for (Charset charset : standardCharsets()) {\n+            for (MemorySegment heapSegment : heapSegments()) {\n+                values.add(new Object[] { charset, heapSegment });\n+            }\n+        }\n+        return values.toArray(Object[][]::new);\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":47,"deletions":10,"binary":false,"changes":57,"status":"modified"}]}