{"files":[{"patch":"@@ -822,16 +822,1 @@\n-  \/\/ Create input type (domain)\n-  int argcnt = NOT_LP64(3) LP64_ONLY(4);\n-  const Type** const domain_fields = TypeTuple::fields(argcnt);\n-  int argp = TypeFunc::Parms;\n-  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ src\n-  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ dst\n-  domain_fields[argp++] = TypeX_X;               \/\/ size lower\n-  LP64_ONLY(domain_fields[argp++] = Type::HALF); \/\/ size upper\n-  assert(argp == TypeFunc::Parms+argcnt, \"correct decoding\");\n-  const TypeTuple* const domain = TypeTuple::make(TypeFunc::Parms + argcnt, domain_fields);\n-\n-  \/\/ Create result type (range)\n-  const Type** const range_fields = TypeTuple::fields(0);\n-  const TypeTuple* const range = TypeTuple::make(TypeFunc::Parms + 0, range_fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::clone_type_Type();\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -438,10 +438,1 @@\n-  const Type **fields = TypeTuple::fields(2);\n-  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL; \/\/ original field value\n-  fields[TypeFunc::Parms+1] = TypeRawPtr::NOTNULL; \/\/ thread\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+2, fields);\n-\n-  \/\/ create result type (range)\n-  fields = TypeTuple::fields(0);\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::write_ref_field_pre_Type();\n@@ -451,9 +442,1 @@\n-  const Type **fields = TypeTuple::fields(1);\n-  fields[TypeFunc::Parms+0] = TypeOopPtr::NOTNULL; \/\/ src oop\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+1, fields);\n-\n-  \/\/ create result type (range)\n-  fields = TypeTuple::fields(0);\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::clone_barrier_Type();\n@@ -463,12 +446,1 @@\n-  const Type **fields = TypeTuple::fields(2);\n-  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM; \/\/ original field value\n-  fields[TypeFunc::Parms+1] = TypeRawPtr::BOTTOM; \/\/ original load address\n-\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+2, fields);\n-\n-  \/\/ create result type (range)\n-  fields = TypeTuple::fields(1);\n-  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM;\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+1, fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::load_reference_barrier_Type();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -254,13 +254,1 @@\n-  \/\/ Create input type (domain)\n-  const Type** domain_fields = TypeTuple::fields(4);\n-  domain_fields[TypeFunc::Parms + 0] = TypeInstPtr::NOTNULL;  \/\/ src\n-  domain_fields[TypeFunc::Parms + 1] = TypeInstPtr::NOTNULL;  \/\/ dst\n-  domain_fields[TypeFunc::Parms + 2] = TypeLong::LONG;        \/\/ size lower\n-  domain_fields[TypeFunc::Parms + 3] = Type::HALF;            \/\/ size upper\n-  const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms + 4, domain_fields);\n-\n-  \/\/ Create result type (range)\n-  const Type** range_fields = TypeTuple::fields(0);\n-  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms + 0, range_fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::clone_type_barrier_set_c2_Type();\n","filename":"src\/hotspot\/share\/gc\/x\/c2\/xBarrierSetC2.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+const TypeFunc* ArrayCopyNode::_arraycopy_type_tf = nullptr;\n+\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+  static const TypeFunc* _arraycopy_type_tf;\n@@ -68,0 +69,2 @@\n+public:\n+\n@@ -69,0 +72,6 @@\n+    assert(_arraycopy_type_tf != nullptr, \"should be initialized\");\n+    return _arraycopy_type_tf;\n+  }\n+\n+  static void arraycopy_type_init() {\n+    assert(_arraycopy_type_tf == nullptr, \"should be\");\n@@ -86,1 +95,1 @@\n-    return TypeFunc::make(domain, range);\n+    _arraycopy_type_tf =  TypeFunc::make(domain, range);\n@@ -89,0 +98,1 @@\n+private:\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -259,0 +259,6 @@\n+const TypeFunc* OptoRuntime::_clone_type_tf = nullptr;\n+const TypeFunc* OptoRuntime::_load_reference_barrier_tf = nullptr;\n+const TypeFunc* OptoRuntime::_write_ref_field_pre_tf = nullptr;\n+const TypeFunc* OptoRuntime::_clone_barrier_tf = nullptr;\n+const TypeFunc* OptoRuntime::_clone_type_barrier_set_c2_tf = nullptr;\n+\n@@ -1961,0 +1967,79 @@\n+void OptoRuntime::clone_type_init() {\n+  assert(_clone_type_tf == nullptr, \"should be\");\n+  \/\/ Create input type (domain)\n+  int argcnt = NOT_LP64(3) LP64_ONLY(4);\n+  const Type** const domain_fields = TypeTuple::fields(argcnt);\n+  int argp = TypeFunc::Parms;\n+  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ src\n+  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ dst\n+  domain_fields[argp++] = TypeX_X;               \/\/ size lower\n+  LP64_ONLY(domain_fields[argp++] = Type::HALF); \/\/ size upper\n+  assert(argp == TypeFunc::Parms+argcnt, \"correct decoding\");\n+  const TypeTuple* const domain = TypeTuple::make(TypeFunc::Parms + argcnt, domain_fields);\n+\n+  \/\/ Create result type (range)\n+  const Type** const range_fields = TypeTuple::fields(0);\n+  const TypeTuple* const range = TypeTuple::make(TypeFunc::Parms + 0, range_fields);\n+\n+  _clone_type_tf = TypeFunc::make(domain, range);\n+}\n+\n+void OptoRuntime::load_reference_barrier_init() {\n+  assert(_load_reference_barrier_tf == nullptr, \"should be\");\n+  const Type **fields = TypeTuple::fields(2);\n+  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM; \/\/ original field value\n+  fields[TypeFunc::Parms+1] = TypeRawPtr::BOTTOM; \/\/ original load address\n+\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+2, fields);\n+\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM;\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+1, fields);\n+\n+  _load_reference_barrier_tf = TypeFunc::make(domain, range);\n+}\n+\n+void OptoRuntime::write_ref_field_pre_init() {\n+  assert(_write_ref_field_pre_tf == nullptr, \"should be\");\n+  const Type **fields = TypeTuple::fields(2);\n+  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL; \/\/ original field value\n+  fields[TypeFunc::Parms+1] = TypeRawPtr::NOTNULL; \/\/ thread\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+2, fields);\n+\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(0);\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n+\n+  _write_ref_field_pre_tf = TypeFunc::make(domain, range);\n+}\n+\n+void OptoRuntime::clone_barrier_init() {\n+  assert(_clone_barrier_tf == nullptr, \"should be\");\n+  const Type **fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = TypeOopPtr::NOTNULL; \/\/ src oop\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+1, fields);\n+\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(0);\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n+\n+  _clone_barrier_tf = TypeFunc::make(domain, range);\n+}\n+\n+void OptoRuntime::clone_type_barrier_set_c2_init() {\n+  assert(_clone_type_barrier_set_c2_tf == nullptr, \"should be\");\n+  \/\/ Create input type (domain)\n+  const Type** domain_fields = TypeTuple::fields(4);\n+  domain_fields[TypeFunc::Parms + 0] = TypeInstPtr::NOTNULL;  \/\/ src\n+  domain_fields[TypeFunc::Parms + 1] = TypeInstPtr::NOTNULL;  \/\/ dst\n+  domain_fields[TypeFunc::Parms + 2] = TypeLong::LONG;        \/\/ size lower\n+  domain_fields[TypeFunc::Parms + 3] = Type::HALF;            \/\/ size upper\n+  const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms + 4, domain_fields);\n+\n+  \/\/ Create result type (range)\n+  const Type** range_fields = TypeTuple::fields(0);\n+  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms + 0, range_fields);\n+\n+  _clone_type_barrier_set_c2_tf = TypeFunc::make(domain, range);\n+}\n@@ -2109,0 +2194,2 @@\n+  clone_type_init();\n+  load_reference_barrier_init();\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -201,0 +201,5 @@\n+  static const TypeFunc *_clone_type_tf;\n+  static const TypeFunc *_load_reference_barrier_tf;\n+  static const TypeFunc *_write_ref_field_pre_tf;\n+  static const TypeFunc *_clone_barrier_tf;\n+  static const TypeFunc *_clone_type_barrier_set_c2_tf;\n@@ -334,0 +339,2 @@\n+  static void clone_type_init();\n+  static void load_reference_barrier_init();\n@@ -401,0 +408,18 @@\n+  static void write_ref_field_pre_init();\n+  static void clone_barrier_init();\n+  static void clone_type_barrier_set_c2_init();\n+\n+  static inline const TypeFunc *clone_type_barrier_set_c2_Type() {\n+    assert(_clone_type_barrier_set_c2_tf != nullptr, \"should be initialized\");\n+    return _clone_type_barrier_set_c2_tf;\n+  }\n+\n+  static inline const TypeFunc *clone_barrier_Type() {\n+    assert(_clone_barrier_tf != nullptr, \"should be initialized\");\n+    return _clone_barrier_tf;\n+  }\n+\n+  static inline const TypeFunc *write_ref_field_pre_Type() {\n+    assert(_write_ref_field_pre_tf != nullptr, \"should be initialized\");\n+    return _write_ref_field_pre_tf;\n+  }\n@@ -762,0 +787,10 @@\n+  static inline const TypeFunc* clone_type_Type() {\n+    assert(_clone_type_tf != nullptr, \"should be initialized\");\n+    return _clone_type_tf;\n+  }\n+\n+  static inline const TypeFunc* load_reference_barrier_Type() {\n+    assert(_load_reference_barrier_tf != nullptr, \"should be initialized\");\n+    return _load_reference_barrier_tf;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"opto\/arraycopynode.hpp\"\n@@ -716,0 +717,1 @@\n+  ArrayCopyNode::arraycopy_type_init();\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}