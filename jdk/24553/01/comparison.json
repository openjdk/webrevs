{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -360,2 +360,1 @@\n-                Log.DeferredDiagnosticHandler deferredDiagnosticHandler =\n-                        new Log.DeferredDiagnosticHandler(log);\n+                Log.DeferredDiagnosticHandler deferredDiagnosticHandler = log.new DeferredDiagnosticHandler();\n@@ -391,2 +390,1 @@\n-        Log.DeferredDiagnosticHandler deferredDiagnosticHandler =\n-                new Log.DeferredDiagnosticHandler(log);\n+        Log.DeferredDiagnosticHandler deferredDiagnosticHandler = log.new DeferredDiagnosticHandler();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -733,1 +733,1 @@\n-            return new Log.DeferredDiagnosticHandler(log, d -> {\n+            return log.new DeferredDiagnosticHandler(d -> {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Analyzer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2041,1 +2041,1 @@\n-            Log.DiagnosticHandler discardHandler = new Log.DiscardDiagnosticHandler(log);\n+            Log.DiagnosticHandler discardHandler = log.new DiscardDiagnosticHandler();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3678,1 +3678,1 @@\n-        final Log.DiagnosticHandler diagHandler = new Log.DiscardDiagnosticHandler(log);\n+        final Log.DiagnosticHandler diagHandler = log.new DiscardDiagnosticHandler();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -550,1 +550,1 @@\n-                super(log, d -> {\n+                log.super(d -> {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-            diagHandler = new Log.DiscardDiagnosticHandler(log);\n+            diagHandler = log.new DiscardDiagnosticHandler();\n@@ -260,1 +260,1 @@\n-        Log.DiagnosticHandler diagHandler = new Log.DiscardDiagnosticHandler(log);\n+        Log.DiagnosticHandler diagHandler = log.new DiscardDiagnosticHandler();\n@@ -277,1 +277,1 @@\n-        Log.DiagnosticHandler diagHandler = new Log.DiscardDiagnosticHandler(log);\n+        Log.DiagnosticHandler diagHandler = log.new DiscardDiagnosticHandler();\n@@ -294,1 +294,1 @@\n-        Log.DiagnosticHandler diagHandler = new Log.DiscardDiagnosticHandler(log);\n+        Log.DiagnosticHandler diagHandler = log.new DiscardDiagnosticHandler();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1169,1 +1169,1 @@\n-                deferredDiagnosticHandler = new Log.DeferredDiagnosticHandler(log);\n+                deferredDiagnosticHandler = log.new DeferredDiagnosticHandler();\n@@ -1901,1 +1901,1 @@\n-        DiagnosticHandler dh = new DiscardDiagnosticHandler(log);\n+        DiagnosticHandler dh = log.new DiscardDiagnosticHandler();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-        Log.DeferredDiagnosticHandler dh = new Log.DeferredDiagnosticHandler(fac.log);\n+        Log.DeferredDiagnosticHandler dh = fac.log.new DeferredDiagnosticHandler();\n@@ -281,3 +281,4 @@\n-        JCDiagnostic d = h.getDiagnostics().peek();\n-        if (d != null) {\n-            throw new ParseException(offset + ((int) d.getPosition()), \"dc.ref.syntax.error\");\n+        java.util.List<JCDiagnostic> diagnostics = h.getDiagnostics();\n+        if (!diagnostics.isEmpty()) {\n+            int pos = offset + (int)diagnostics.get(0).getPosition();\n+            throw new ParseException(pos, \"dc.ref.syntax.error\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/ReferenceParser.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import javax.tools.Diagnostic;\n@@ -1007,1 +1008,1 @@\n-                this.deferredDiagnosticHandler = new Log.DeferredDiagnosticHandler(log);\n+                this.deferredDiagnosticHandler = log.new DeferredDiagnosticHandler();\n@@ -1110,15 +1111,3 @@\n-            for (JCDiagnostic d: deferredDiagnosticHandler.getDiagnostics()) {\n-                switch (d.getKind()) {\n-                    case WARNING:\n-                        if (werror)\n-                            return true;\n-                        break;\n-\n-                    case ERROR:\n-                        if (fatalErrors || !d.isFlagSet(RECOVERABLE))\n-                            return true;\n-                        break;\n-                }\n-            }\n-\n-            return false;\n+            return deferredDiagnosticHandler.getDiagnostics().stream()\n+              .anyMatch(d -> (d.getKind() == Diagnostic.Kind.WARNING && werror) ||\n+                             (d.getKind() == Diagnostic.Kind.ERROR && (fatalErrors || !d.isFlagSet(RECOVERABLE))));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.ArrayList;\n@@ -33,0 +34,1 @@\n+import java.util.List;\n@@ -34,1 +36,1 @@\n-import java.util.Queue;\n+import java.util.Optional;\n@@ -86,1 +88,1 @@\n-     * should install itself as the current diagnostic handler. When a\n+     * will install itself as the current diagnostic handler. When a\n@@ -93,1 +95,1 @@\n-    public abstract static class DiagnosticHandler {\n+    public abstract class DiagnosticHandler {\n@@ -97,1 +99,1 @@\n-        protected DiagnosticHandler prev;\n+        protected final DiagnosticHandler prev;\n@@ -103,3 +105,3 @@\n-        protected void install(Log log) {\n-            prev = log.diagnosticHandler;\n-            log.diagnosticHandler = this;\n+        protected DiagnosticHandler() {\n+            prev = diagnosticHandler;\n+            diagnosticHandler = this;\n@@ -117,5 +119,1 @@\n-    public static class DiscardDiagnosticHandler extends DiagnosticHandler {\n-        @SuppressWarnings(\"this-escape\")\n-        public DiscardDiagnosticHandler(Log log) {\n-            install(log);\n-        }\n+    public class DiscardDiagnosticHandler extends DiagnosticHandler {\n@@ -134,2 +132,2 @@\n-    public static class DeferredDiagnosticHandler extends DiagnosticHandler {\n-        private Queue<JCDiagnostic> deferred = new ListBuffer<>();\n+    public class DeferredDiagnosticHandler extends DiagnosticHandler {\n+        private List<JCDiagnostic> deferred = new ArrayList<>();\n@@ -139,2 +137,2 @@\n-        public DeferredDiagnosticHandler(Log log) {\n-            this(log, null);\n+        public DeferredDiagnosticHandler() {\n+            this(null);\n@@ -143,2 +141,2 @@\n-        public DeferredDiagnosticHandler(Log log, Predicate<JCDiagnostic> filter) {\n-            this(log, filter, true);\n+        public DeferredDiagnosticHandler(Predicate<JCDiagnostic> filter) {\n+            this(filter, true);\n@@ -147,3 +145,2 @@\n-        @SuppressWarnings(\"this-escape\")\n-        public DeferredDiagnosticHandler(Log log, Predicate<JCDiagnostic> filter, boolean passOnNonDeferrable) {\n-            this.filter = filter;\n+        public DeferredDiagnosticHandler(Predicate<JCDiagnostic> filter, boolean passOnNonDeferrable) {\n+            this.filter = Optional.ofNullable(filter).orElse(d -> true);\n@@ -151,1 +148,4 @@\n-            install(log);\n+        }\n+\n+        private boolean deferrable(JCDiagnostic diag) {\n+            return !(diag.isFlagSet(DiagnosticFlag.NON_DEFERRABLE) && passOnNonDeferrable) && filter.test(diag);\n@@ -156,4 +156,1 @@\n-            boolean deferrable = !passOnNonDeferrable ||\n-                                 !diag.isFlagSet(JCDiagnostic.DiagnosticFlag.NON_DEFERRABLE);\n-            if (deferrable &&\n-                (filter == null || filter.test(diag))) {\n+            if (deferrable(diag)) {\n@@ -166,1 +163,1 @@\n-        public Queue<JCDiagnostic> getDiagnostics() {\n+        public List<JCDiagnostic> getDiagnostics() {\n@@ -177,5 +174,5 @@\n-            JCDiagnostic d;\n-            while ((d = deferred.poll()) != null) {\n-                if (accepter.test(d))\n-                    prev.report(d);\n-            }\n+\n+            \/\/ Flush matching reports to the previous handler\n+            deferred.stream()\n+              .filter(accepter)\n+              .forEach(prev::report);\n@@ -185,1 +182,1 @@\n-        \/** Report selected deferred diagnostics. *\/\n+        \/** Report all deferred diagnostics in the specified order. *\/\n@@ -187,6 +184,2 @@\n-            JCDiagnostic[] diags = deferred.toArray(s -> new JCDiagnostic[s]);\n-            Arrays.sort(diags, order);\n-            for (JCDiagnostic d : diags) {\n-                prev.report(d);\n-            }\n-            deferred = null; \/\/ prevent accidental ongoing use\n+            deferred.sort(order);   \/\/ ok to sort in place: reportDeferredDiagnostics() is going to discard it\n+            reportDeferredDiagnostics();\n@@ -486,0 +479,1 @@\n+        Assert.check(h.prev != null);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":33,"deletions":39,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -720,1 +720,1 @@\n-                DiscardDiagnosticHandler h = new DiscardDiagnosticHandler(log);\n+                DiscardDiagnosticHandler h = log.new DiscardDiagnosticHandler();\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TaskFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}