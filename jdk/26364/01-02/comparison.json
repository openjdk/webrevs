{"files":[{"patch":"@@ -50,2 +50,7 @@\n-    private boolean exact;  \/\/ this decimal is an exact fp\n-    private boolean away;  \/\/ this decimal has a larger magnitude than fp\n+    \/* Whether the decimal exactly represents the double *\/\n+    private boolean exact;\n+    \/*\n+     * When not exact, whether the magnitude of the decimal is larger than\n+     * the magnitude of the double. Aka \"away from zero\".\n+     *\/\n+    private boolean away;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FormattedFPDecimal.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8362448\n+ * @summary Verify DecimalFormat::format on doubles.\n+ * @run junit\/othervm DoubleFormattingTest\n+ * @run junit\/othervm -Djdk.compat.DecimalFormat=true DoubleFormattingTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.text.DecimalFormat;\n+import java.text.NumberFormat;\n+import java.util.Formatter;\n+import java.util.Locale;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class DoubleFormattingTest {\n+\n+    private static final boolean COMPAT = Boolean.getBoolean(\"jdk.compat.DecimalFormat\");\n+\n+    \/\/ 4.8726570057E288 7.3879E20 6.3E-322 1.9400994884341945E25\n+\n+    @Test\n+    void testXL() {\n+        double v = 4.8726570057E288;\n+        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ROOT);\n+        df.setGroupingUsed(false);\n+        String actual = df.format(v);\n+        Formatter fmt = new Formatter(Locale.ROOT);\n+        fmt.format(\"%.0f\", v);\n+        String expected = fmt.toString();\n+        if (COMPAT) {\n+            assertNotEquals(expected, actual);\n+        } else {\n+            assertEquals(expected, actual);\n+        }\n+    }\n+\n+    @Test\n+    void testM() {\n+        double v = 7.3879E20;\n+        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ROOT);\n+        df.setGroupingUsed(false);\n+        String actual = df.format(v);\n+        Formatter fmt = new Formatter(Locale.ROOT);\n+        fmt.format(\"%.0f\", v);\n+        String expected = fmt.toString();\n+        if (COMPAT) {\n+            assertNotEquals(expected, actual);\n+        } else {\n+            assertEquals(expected, actual);\n+        }\n+    }\n+\n+    @Test\n+    void testL() {\n+        double v = 1.9400994884341945E25;\n+        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ROOT);\n+        df.setGroupingUsed(false);\n+        String actual = df.format(v);\n+        Formatter fmt = new Formatter(Locale.ROOT);\n+        fmt.format(\"%.0f\", v);\n+        String expected = fmt.toString();\n+        if (COMPAT) {\n+            assertNotEquals(expected, actual);\n+        } else {\n+            assertEquals(expected, actual);\n+        }\n+    }\n+\n+    @Test\n+    void testXS() {\n+        double v = 6.3E-322;\n+        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ROOT);\n+        df.setGroupingUsed(false);\n+        df.setMinimumFractionDigits(324);\n+        String actual = df.format(v);\n+        Formatter fmt = new Formatter(Locale.ROOT);\n+        fmt.format(\"%.324f\", v);\n+        String expected = fmt.toString();\n+        if (COMPAT) {\n+            assertNotEquals(expected, actual);\n+        } else {\n+            assertEquals(expected, actual);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/DoubleFormattingTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}