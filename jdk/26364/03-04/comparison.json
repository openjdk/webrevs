{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @run junit\/othervm DoubleFormattingTest\n+ * @run junit DoubleFormattingTest\n@@ -32,1 +32,3 @@\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -38,0 +40,1 @@\n+import java.util.stream.Stream;\n@@ -45,46 +48,7 @@\n-    @Test\n-    void testXL() {\n-        double v = 4.8726570057E288;\n-        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ROOT);\n-        df.setGroupingUsed(false);\n-        String actual = df.format(v);\n-        Formatter fmt = new Formatter(Locale.ROOT);\n-        fmt.format(\"%.0f\", v);\n-        String expected = fmt.toString();\n-        if (COMPAT) {\n-            assertNotEquals(expected, actual);\n-        } else {\n-            assertEquals(expected, actual);\n-        }\n-    }\n-\n-    @Test\n-    void testM() {\n-        double v = 7.3879E20;\n-        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ROOT);\n-        df.setGroupingUsed(false);\n-        String actual = df.format(v);\n-        Formatter fmt = new Formatter(Locale.ROOT);\n-        fmt.format(\"%.0f\", v);\n-        String expected = fmt.toString();\n-        if (COMPAT) {\n-            assertNotEquals(expected, actual);\n-        } else {\n-            assertEquals(expected, actual);\n-        }\n-    }\n-\n-    @Test\n-    void testL() {\n-        double v = 1.9400994884341945E25;\n-        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ROOT);\n-        df.setGroupingUsed(false);\n-        String actual = df.format(v);\n-        Formatter fmt = new Formatter(Locale.ROOT);\n-        fmt.format(\"%.0f\", v);\n-        String expected = fmt.toString();\n-        if (COMPAT) {\n-            assertNotEquals(expected, actual);\n-        } else {\n-            assertEquals(expected, actual);\n-        }\n+    static Stream<Arguments> testFormat() {\n+        return Stream.of(\n+                Arguments.of(4.8726570057E288, 0),\n+                Arguments.of(7.3879E20, 0),\n+                Arguments.of(1.9400994884341945E25, 0),\n+                Arguments.of(6.3E-322, 324)\n+        );\n@@ -93,3 +57,3 @@\n-    @Test\n-    void testXS() {\n-        double v = 6.3E-322;\n+    @ParameterizedTest\n+    @MethodSource\n+    void testFormat(double v, int minFractionDigits) {\n@@ -98,1 +62,1 @@\n-        df.setMinimumFractionDigits(324);\n+        df.setMinimumFractionDigits(minFractionDigits);\n@@ -101,1 +65,1 @@\n-        fmt.format(\"%.324f\", v);\n+        fmt.format(\"%.\" + minFractionDigits + \"f\", v);\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/DoubleFormattingTest.java","additions":17,"deletions":53,"binary":false,"changes":70,"status":"modified"}]}