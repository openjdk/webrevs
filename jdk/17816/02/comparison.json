{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.security.spec.ECPoint;\n@@ -40,1 +39,1 @@\n-import sun.security.ec.point.*;\n+\n@@ -77,1 +76,1 @@\n-        this.params = ECUtil.getECParameterSpec(null, keySize);\n+        this.params = ECUtil.getECParameterSpec(keySize);\n@@ -94,1 +93,1 @@\n-            ecSpec = ECUtil.getECParameterSpec(null, ecParams);\n+            ecSpec = ECUtil.getECParameterSpec(ecParams);\n@@ -101,1 +100,1 @@\n-            ecSpec = ECUtil.getECParameterSpec(null, name);\n+            ecSpec = ECUtil.getECParameterSpec(name);\n@@ -123,1 +122,1 @@\n-        AlgorithmParameters ecParams = ECUtil.getECParameters(null);\n+        AlgorithmParameters ecParams = ECUtil.getECParameters();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECKeyPairGenerator.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-    public static AlgorithmParameters getECParameters(Provider p) {\n+    public static AlgorithmParameters getECParameters() {\n@@ -145,4 +145,0 @@\n-            if (p != null) {\n-                return AlgorithmParameters.getInstance(\"EC\", p);\n-            }\n-\n@@ -155,3 +151,2 @@\n-    public static byte[] encodeECParameterSpec(Provider p,\n-                                               ECParameterSpec spec) {\n-        AlgorithmParameters parameters = getECParameters(p);\n+    public static byte[] encodeECParameterSpec(ECParameterSpec spec) {\n+        AlgorithmParameters parameters = getECParameters();\n@@ -173,3 +168,2 @@\n-    public static ECParameterSpec getECParameterSpec(Provider p,\n-                                                     ECParameterSpec spec) {\n-        AlgorithmParameters parameters = getECParameters(p);\n+    public static ECParameterSpec getECParameterSpec(ECParameterSpec spec) {\n+        AlgorithmParameters parameters = getECParameters();\n@@ -185,2 +179,1 @@\n-    public static ECParameterSpec getECParameterSpec(Provider p,\n-                                                     byte[] params)\n+    public static ECParameterSpec getECParameterSpec(byte[] params)\n@@ -188,1 +181,1 @@\n-        AlgorithmParameters parameters = getECParameters(p);\n+        AlgorithmParameters parameters = getECParameters();\n@@ -199,2 +192,2 @@\n-    public static ECParameterSpec getECParameterSpec(Provider p, String name) {\n-        AlgorithmParameters parameters = getECParameters(p);\n+    public static ECParameterSpec getECParameterSpec(String name) {\n+        AlgorithmParameters parameters = getECParameters();\n@@ -210,2 +203,2 @@\n-    public static ECParameterSpec getECParameterSpec(Provider p, int keySize) {\n-        AlgorithmParameters parameters = getECParameters(p);\n+    public static ECParameterSpec getECParameterSpec(int keySize) {\n+        AlgorithmParameters parameters = getECParameters();\n@@ -222,1 +215,1 @@\n-    public static String getCurveName(Provider p, ECParameterSpec spec) {\n+    public static String getCurveName(ECParameterSpec spec) {\n@@ -224,1 +217,1 @@\n-        AlgorithmParameters parameters = getECParameters(p);\n+        AlgorithmParameters parameters = getECParameters();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ECUtil.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-                \/\/ See ECUtil.getECParameterSpec(Provider, String).\n+                \/\/ See ECUtil.getECParameterSpec(String).\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-        return ECUtil.getECParameterSpec(getSunECProvider(), name);\n+        return ECUtil.getECParameterSpec(name);\n@@ -71,1 +71,1 @@\n-        return ECUtil.getECParameterSpec(getSunECProvider(), keySize);\n+        return ECUtil.getECParameterSpec(keySize);\n@@ -77,1 +77,1 @@\n-        return ECUtil.getECParameterSpec(getSunECProvider(), spec);\n+        return ECUtil.getECParameterSpec(spec);\n@@ -81,1 +81,1 @@\n-        return ECUtil.getECParameterSpec(getSunECProvider(), params);\n+        return ECUtil.getECParameterSpec(params);\n@@ -85,1 +85,1 @@\n-        return ECUtil.encodeECParameterSpec(getSunECProvider(), params);\n+        return ECUtil.encodeECParameterSpec(params);\n@@ -223,1 +223,1 @@\n-            ECUtil.encodeECParameterSpec(getSunECProvider(), params);\n+            ECUtil.encodeECParameterSpec(params);\n@@ -257,1 +257,1 @@\n-            ECUtil.encodeECParameterSpec(getSunECProvider(), params);\n+            ECUtil.encodeECParameterSpec(params);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11ECKeyFactory.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1381,1 +1381,1 @@\n-                    ECUtil.getECParameterSpec(null, encodedParams);\n+                    ECUtil.getECParameterSpec(encodedParams);\n@@ -1779,1 +1779,1 @@\n-                ECUtil.encodeECParameterSpec(null, ecKey.getParams());\n+                ECUtil.encodeECParameterSpec(ecKey.getParams());\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyStore.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -779,1 +779,1 @@\n-                AlgorithmParameters ap = AlgorithmParameters.getInstance(\"RSASSA-PSS\");\n+                AlgorithmParameters ap = AlgorithmParameters.getInstance(\"RSASSA-PSS\", token.provider);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import com.sun.crypto.provider.DHParameters;\n@@ -46,0 +47,1 @@\n+import sun.security.rsa.PSSParameters;\n@@ -710,0 +712,8 @@\n+        dA(AGP, \"RSASSA-PSS\",\n+                \"sun.security.rsa.PSSParameters\",\n+                m(CKM_RSA_PKCS_PSS));\n+\n+        dA(AGP, \"DiffieHellman\",\n+                \"com.sun.crypto.provider.DHParameters\",\n+                m(CKM_DH_PKCS_DERIVE));\n+\n@@ -1499,0 +1509,4 @@\n+                } else if (algorithm == \"RSASSA-PSS\") {\n+                    return new PSSParameters(); \/\/ from SunRsaSign\n+                } else if (algorithm == \"DiffieHellman\") {\n+                    return new DHParameters(); \/\/ from SunJCE\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @bug 8080462 8226651 8242332\n+ * @bug 8080462 8226651 8242332 8325164\n@@ -54,0 +54,3 @@\n+        Provider sunRsaSign = Security.getProvider(\"SunRsaSign\");\n+        Security.removeProvider(\"SunRsaSign\");\n+\n@@ -56,1 +59,1 @@\n-                Signature.getInstance(\"RSASSA-PSS\", \"SunRsaSign\");\n+                Signature.getInstance(\"RSASSA-PSS\", sunRsaSign);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/SigInteropPSS2.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8029661\n+ * @bug 8029661 8325164\n@@ -415,0 +415,12 @@\n+            \/\/ verify that FFDHE named groups are available\n+            boolean ffdheAvailable = Arrays.stream(sslParameters.getNamedGroups())\n+                    .anyMatch(ng -> ng.startsWith(\"ffdhe\"));\n+            if (!ffdheAvailable) {\n+                throw new RuntimeException(\"No FFDHE named groups available\");\n+            }\n+            \/\/ verify that ECDHE named groups are available\n+            boolean ecdheAvailable = Arrays.stream(sslParameters.getNamedGroups())\n+                    .anyMatch(ng -> ng.startsWith(\"secp\"));\n+            if (!ecdheAvailable) {\n+                throw new RuntimeException(\"No ECDHE named groups available\");\n+            }\n@@ -429,22 +441,0 @@\n-        \/\/\n-        \/\/ RSASSA-PSS algorithm is not currently supported in SunPKCS11\n-        \/\/ but in SUN provider. As a result, it can be negotiated by the\n-        \/\/ TLS engine. The problem is that SunPKCS11 keys are sensitive\n-        \/\/ in FIPS mode and cannot be used in a SUN algorithm (conversion\n-        \/\/ fails as plain values cannot be extracted).\n-        \/\/\n-        \/\/ To workaround this issue, we disable RSASSA-PSS algorithm for\n-        \/\/ TLS connections. Once JDK-8222937 is fixed, this workaround can\n-        \/\/ (and should) be removed.\n-        \/\/\n-        \/\/ On a final note, the list of disabled TLS algorithms\n-        \/\/ (jdk.tls.disabledAlgorithms) has to be updated at this point,\n-        \/\/ before it is read in sun.security.ssl.SSLAlgorithmConstraints\n-        \/\/ class initialization.\n-        String disabledAlgorithms =\n-                Security.getProperty(\"jdk.tls.disabledAlgorithms\");\n-        if (disabledAlgorithms.length() > 0) {\n-            disabledAlgorithms += \", \";\n-        }\n-        disabledAlgorithms += \"RSASSA-PSS\";\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\", disabledAlgorithms);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/tls12\/FipsModeTLS12.java","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        ECParameterSpec ecParams = ECUtil.getECParameterSpec(null, keySize);\n+        ECParameterSpec ecParams = ECUtil.getECParameterSpec(keySize);\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/java.base\/sun\/security\/ec\/ECKeyPairGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}