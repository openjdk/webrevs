{"files":[{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Arm Limited. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n- * @test\n- * @bug 8320725\n- * @summary Ensure strictly ordered AddReductionVF\/VD nodes are generated on SVE machines\n- * while being disabled on Neon\n- * @library \/test\/lib \/\n- * @run driver compiler.c2.irTests.TestVectorFPReduction\n- *\/\n-\n-public class TestVectorFPReduction {\n-\n-    final private static int SIZE = 1024;\n-\n-    private static double[] da = new double[SIZE];\n-    private static double[] db = new double[SIZE];\n-    private static float[] fa = new float[SIZE];\n-    private static float[] fb = new float[SIZE];\n-    private static float fresult;\n-    private static double dresult;\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"}, failOn = {IRNode.ADD_REDUCTION_VF})\n-    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {\"requires_strict_order\", \">=1\", IRNode.ADD_REDUCTION_VF, \">=1\"},\n-        failOn = {\"no_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n-    private static void testAddReductionVF() {\n-        float result = 1;\n-        for (int i = 0; i < SIZE; i++) {\n-            result += (fa[i] + fb[i]);\n-        }\n-        fresult += result;\n-    }\n-\n-    @Test\n-    @IR(applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"}, failOn = {IRNode.ADD_REDUCTION_VD})\n-    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {\"requires_strict_order\", \">=1\", IRNode.ADD_REDUCTION_VD, \">=1\"},\n-        failOn = {\"no_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n-    private static void testAddReductionVD() {\n-        double result = 1;\n-        for (int i = 0; i < SIZE; i++) {\n-            result += (da[i] + db[i]);\n-        }\n-        dresult += result;\n-    }\n-\n-    @Test\n-    @IR(applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"}, failOn = {IRNode.MUL_REDUCTION_VF})\n-    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {\"requires_strict_order\", \">=1\", IRNode.MUL_REDUCTION_VF, \">=1\"},\n-        failOn = {\"no_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n-    private static void testMulReductionVF() {\n-        float result = 1;\n-        for (int i = 0; i < SIZE; i++) {\n-            result *= (fa[i] + fb[i]);\n-        }\n-        fresult += result;\n-    }\n-\n-    @Test\n-    @IR(applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"}, failOn = {IRNode.MUL_REDUCTION_VD})\n-    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {\"requires_strict_order\", \">=1\", IRNode.MUL_REDUCTION_VD, \">=1\"},\n-        failOn = {\"no_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n-    private static void testMulReductionVD() {\n-        double result = 1;\n-        for (int i = 0; i < SIZE; i++) {\n-            result *= (da[i] + db[i]);\n-        }\n-        dresult += result;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorFPReduction.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8320725\n+ * @summary Ensure strictly ordered AddReductionVF\/VD and MulReductionVF\/VD nodes\n+            are generated when these operations are auto-vectorized\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestVectorFPReduction\n+ *\/\n+\n+public class TestVectorFPReduction {\n+\n+    final private static int SIZE = 1024;\n+\n+    private static double[] da = new double[SIZE];\n+    private static double[] db = new double[SIZE];\n+    private static float[] fa = new float[SIZE];\n+    private static float[] fb = new float[SIZE];\n+    private static float fresult;\n+    private static double dresult;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_REDUCTION_VF},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(counts = {\"requires_strict_order\", \">=1\", IRNode.ADD_REDUCTION_VF, \">=1\"},\n+        failOn = {\"no_strict_order\"},\n+        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n+    private static void testAddReductionVF() {\n+        float result = 1;\n+        for (int i = 0; i < SIZE; i++) {\n+            result += (fa[i] + fb[i]);\n+        }\n+        fresult += result;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_REDUCTION_VD},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(counts = {\"requires_strict_order\", \">=1\", IRNode.ADD_REDUCTION_VD, \">=1\"},\n+        failOn = {\"no_strict_order\"},\n+        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n+    private static void testAddReductionVD() {\n+        double result = 1;\n+        for (int i = 0; i < SIZE; i++) {\n+            result += (da[i] + db[i]);\n+        }\n+        dresult += result;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL_REDUCTION_VF},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(counts = {\"requires_strict_order\", \">=1\", IRNode.MUL_REDUCTION_VF, \">=1\"},\n+        failOn = {\"no_strict_order\"},\n+        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n+    private static void testMulReductionVF() {\n+        float result = 1;\n+        for (int i = 0; i < SIZE; i++) {\n+            result *= (fa[i] + fb[i]);\n+        }\n+        fresult += result;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL_REDUCTION_VD},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(counts = {\"requires_strict_order\", \">=1\", IRNode.MUL_REDUCTION_VD, \">=1\"},\n+        failOn = {\"no_strict_order\"},\n+        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n+    private static void testMulReductionVD() {\n+        double result = 1;\n+        for (int i = 0; i < SIZE; i++) {\n+            result *= (da[i] + db[i]);\n+        }\n+        dresult += result;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestVectorFPReduction.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -42,1 +42,0 @@\n- * @requires os.arch == \"aarch64\"\n@@ -44,1 +43,1 @@\n- * nodes are generated for float and double types in VectorAPI\n+ *          nodes are generated in VectorAPI\n@@ -46,1 +45,0 @@\n- *\n@@ -81,2 +79,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=8\"}, counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=8\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -88,2 +89,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=16\"}, counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -95,2 +99,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=32\"}, counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=32\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -102,2 +109,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=64\"}, counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.ADD_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=64\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -118,2 +128,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=16\"}, counts = {IRNode.ADD_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.ADD_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -125,2 +138,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=32\"}, counts = {IRNode.ADD_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.ADD_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=32\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -132,2 +148,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=64\"}, counts = {IRNode.ADD_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.ADD_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=64\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -151,2 +170,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=8\"}, counts = {IRNode.MUL_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.MUL_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=8\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -158,2 +180,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=16\"}, counts = {IRNode.MUL_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.MUL_REDUCTION_VF, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -174,2 +199,5 @@\n-    @IR(applyIf = {\"MaxVectorSize\", \">=16\"}, counts = {IRNode.MUL_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n-        failOn = {\"requires_strict_order\"}, phase = CompilePhase.PRINT_IDEAL)\n+    @IR(counts = {IRNode.MUL_REDUCTION_VD, \">=1\", \"no_strict_order\", \">=1\"},\n+        failOn = {\"requires_strict_order\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n@@ -181,2 +209,1 @@\n-        TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n-                                   \"--add-modules=jdk.incubator.vector\");\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorAddMulReduction.java","additions":52,"deletions":25,"binary":false,"changes":77,"status":"modified"}]}