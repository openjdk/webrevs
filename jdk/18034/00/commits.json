[{"commit":{"message":"8320725: C2: Add \"requires_strict_order\" flag for floating-point add-reduction\n\nFloating-point addition is non-associative, that is adding\nfloating-point elements in arbitrary order may get different value.\nSpecially, Vector API does not define the order of reduction\nintentionally, which allows platforms to generate more efficient codes\n[1]. So that needs a node to represent non strictly-ordered\nadd-reduction for floating-point type in C2.\n\nTo avoid introducing new nodes, this patch adds a bool field in\n`AddReductionVF\/D` to distinguish whether they require strict order. It\nalso removes `UnorderedReductionNode` and adds a virtual function\n`bool requires_strict_order()` in `ReductionNode`. Besides\n`AddReductionVF\/D`, other reduction nodes' `requires_strict_order()`\nhave a fixed value.\n\nWith this patch, Vector API would always generate non strictly-ordered\n`AddReductionVF\/D' on SVE machines with vector length <= 16B as it is\nmore beneficial to generate non-strictly ordered instructions on such\nmachines compared to strictly ordered ones.\n\n[AArch64]\nOn Neon, non strictly-ordered `AddReductionVF\/D` cannot be generated.\nAuto-vectorization has already banned these nodes in JDK-8275275 [2].\n\nThis patch adds matching rules for non strictly-ordered\n`AddReductionVF\/D`.\n\nNo effects on other platforms.\n\n[Performance]\nFloatMaxVector.ADDLanes [3] measures the performance of add reduction\nfor floating-point type. With this patch, it improves ~3x on my SVE\nmachine (128-bit).\n\nADDLanes\nBenchmark                 Before     After      Unit\nFloatMaxVector.ADDLanes   1789.513   5264.226   ops\/ms\n\nFinal code is as below:\n\n```\nBefore:\n        fadda        z17.s, p7\/m, z17.s, z16.s\n\nAfter:\n        faddp        v17.4s, v21.4s, v21.4s\n        faddp        s18, v17.2s\n        fadd         s18, s18, s19\n\n```\n\n[Test]\nFull jtreg passed on AArch64 and x86.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java#L2529\n[2] https:\/\/bugs.openjdk.org\/browse\/JDK-8275275\n[3] https:\/\/github.com\/openjdk\/panama-vector\/blob\/vectorIntrinsics\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java#L316"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"f8492ece3c58d6ab0894820fe3b0ae51339ca298"}]