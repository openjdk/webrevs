{"files":[{"patch":"@@ -120,0 +120,1 @@\n+    static Debugee             debuggee      = null;\n@@ -140,2 +141,0 @@\n-        Debugee debuggee;\n-\n@@ -343,0 +342,10 @@\n+\n+                \/\/ don't do vm.suspend() until mainThread is waiting\n+                line = pipe.readln();\n+                if (line.equals(\"waiting\")) {\n+                    log2(\"     : returned string is 'waiting'\");\n+                } else {\n+                    log3(\"ERROR: returned string is not 'waiting': \" + line);\n+                    expresult = returnCode4;\n+                    break label1;\n+                }\n@@ -345,0 +354,1 @@\n+\n@@ -355,7 +365,0 @@\n-\n-                \/\/ We need to resume the main thread because thread2 might be blocked on it,\n-                \/\/ but we want to keep thread2 suspended.\n-                log2(\"       allow main thead (and others) to run while keeping thread2 suspended\");\n-                thread2.suspend();\n-                vm.resume();\n-\n@@ -371,1 +374,1 @@\n-                log2(\"      resuming the thread2\");\n+                log2(\"       resuming the thread2\");\n@@ -373,1 +376,8 @@\n-\n+                \n+                log2(\"       undo the vm.suspend() with vm.resume()\");\n+                vm.resume();\n+            }\n+            \/\/ These are only needed if we break out of the loop due to an error\n+            if (expresult != returnCode0) {\n+                vm.resume();\n+                vm.resume();  \/\/ for case error when both VirtualMachine and the thread2 were suspended\n@@ -375,1 +385,0 @@\n-            vm.resume();  \/\/ for case error when both VirtualMachine and the thread2 were suspended\n@@ -496,0 +505,1 @@\n+                        debuggee.printThreadsInfo(vm);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/resume\/resume001.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -84,1 +84,7 @@\n-            log1(\"waiting for an instruction from the debugger ...\");\n+            log1(\"waiting for an instruction from the debugger: iteration \" + i);\n+            if (i == 1) {\n+                \/\/ Let the debugger know we finished the first iteration and are now\n+                \/\/ waiting for next command. This is needed so we don't suspend the\n+                \/\/ main thread while it is doing a log(), which can hold a needed lock.\n+                pipe.println(\"waiting\");\n+            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/resume\/resume001a.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -598,1 +598,1 @@\n-    protected void printThreadsInfo(VirtualMachine vm)  {\n+    public void printThreadsInfo(VirtualMachine vm)  {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/Debugee.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}