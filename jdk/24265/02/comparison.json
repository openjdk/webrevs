{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2172,8 +2172,4 @@\n-     * Sets the maximum number of digits allowed in the integer portion of a\n-     * number.\n-     * The maximum allowed integer range is 309, if the {@code newValue} &gt; 309,\n-     * then the maximum integer digits count is set to 309. Negative input\n-     * values are replaced with 0.\n-     *\n-     * @param newValue the maximum number of integer digits to be shown\n-     * @see #getMaximumIntegerDigits()\n+     * {@inheritDoc NumberFormat}\n+     * <p>The maximum allowed integer range is 309, if the {@code newValue} &gt;\n+     * 309, then the maximum integer digits count is set to 309.\n+     * @param newValue the maximum number of integer digits to be shown.\n@@ -2197,8 +2193,4 @@\n-     * Sets the minimum number of digits allowed in the integer portion of a\n-     * number.\n-     * The maximum allowed integer range is 309, if the {@code newValue} &gt; 309,\n-     * then the minimum integer digits count is set to 309. Negative input\n-     * values are replaced with 0.\n-     *\n-     * @param newValue the minimum number of integer digits to be shown\n-     * @see #getMinimumIntegerDigits()\n+     * {@inheritDoc NumberFormat}\n+     * <p>The maximum allowed integer range is 309, if the {@code newValue} &gt;\n+     * 309, then the minimum integer digits count is set to 309.\n+     * @param newValue the minimum number of integer digits to be shown.\n@@ -2222,8 +2214,4 @@\n-     * Sets the minimum number of digits allowed in the fraction portion of a\n-     * number.\n-     * The maximum allowed fraction range is 340, if the {@code newValue} &gt; 340,\n-     * then the minimum fraction digits count is set to 340. Negative input\n-     * values are replaced with 0.\n-     *\n-     * @param newValue the minimum number of fraction digits to be shown\n-     * @see #getMinimumFractionDigits()\n+     * {@inheritDoc NumberFormat}\n+     * <p>The maximum allowed fraction range is 340, if the {@code newValue} &gt;\n+     * 340, then the minimum fraction digits count is set to 340.\n+     * @param newValue the minimum number of fraction digits to be shown.\n@@ -2248,8 +2236,4 @@\n-     * Sets the maximum number of digits allowed in the fraction portion of a\n-     * number.\n-     * The maximum allowed fraction range is 340, if the {@code newValue} &gt; 340,\n-     * then the maximum fraction digits count is set to 340. Negative input\n-     * values are replaced with 0.\n-     *\n-     * @param newValue the maximum number of fraction digits to be shown\n-     * @see #getMaximumFractionDigits()\n+     * {@inheritDoc NumberFormat}\n+     * <p>The maximum allowed fraction range is 340, if the {@code newValue} &gt;\n+     * 340, then the maximum fraction digits count is set to 340.\n+     * @param newValue the maximum number of fraction digits to be shown.\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":17,"deletions":33,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -113,0 +113,4 @@\n+ * The integer and fraction digit limits are set by either applying a {@link ##patterns\n+ * pattern} or using one of the appropriate {@code DecimalFormat} setter methods,\n+ * for example, {@link #setMinimumFractionDigits(int)}. These limits have no impact\n+ * on parsing behavior.\n@@ -3975,3 +3979,3 @@\n-     * Sets the maximum number of digits allowed in the integer portion of a\n-     * number. Negative input values are replaced with 0.\n-     * @see NumberFormat#setMaximumIntegerDigits\n+     * {@inheritDoc NumberFormat}\n+     * @param newValue the maximum number of integer digits to be shown.\n+     * @see #getMaximumIntegerDigits()\n@@ -3992,3 +3996,3 @@\n-     * Sets the minimum number of digits allowed in the integer portion of a\n-     * number. Negative input values are replaced with 0.\n-     * @see NumberFormat#setMinimumIntegerDigits\n+     * {@inheritDoc NumberFormat}\n+     * @param newValue the minimum number of integer digits to be shown.\n+     * @see #getMinimumIntegerDigits()\n@@ -4009,3 +4013,3 @@\n-     * Sets the maximum number of digits allowed in the fraction portion of a\n-     * number. Negative input values are replaced with 0.\n-     * @see NumberFormat#setMaximumFractionDigits\n+     * {@inheritDoc NumberFormat}\n+     * @param newValue the maximum number of fraction digits to be shown.\n+     * @see #getMaximumFractionDigits()\n@@ -4026,3 +4030,3 @@\n-     * Sets the minimum number of digits allowed in the fraction portion of a\n-     * number. Negative input values are replaced with 0.\n-     * @see NumberFormat#setMinimumFractionDigits\n+     * {@inheritDoc NumberFormat}\n+     * @param newValue the minimum number of fraction digits to be shown.\n+     * @see #getMinimumFractionDigits()\n@@ -4043,4 +4047,3 @@\n-     * Gets the maximum number of digits allowed in the integer portion of a\n-     * number. The maximum number of integer digits can be set by either {@link #setMaximumIntegerDigits(int)}\n-     * or {@link #applyPattern(String)}. See the {@link ##patterns Pattern Section} for\n-     * comprehensive rules regarding maximum integer digits in patterns.\n+     * {@inheritDoc NumberFormat}\n+     * <p>Unlike the other digit limits, {@code maximumIntegerDigits} is not\n+     * updated by {@code DecimalFormats} created or updated with a string pattern.\n@@ -4048,0 +4051,1 @@\n+     * @see ##patterns Pattern Section\n@@ -4056,2 +4060,1 @@\n-     * Gets the minimum number of digits allowed in the integer portion of a\n-     * number.\n+     * {@inheritDoc NumberFormat}\n@@ -4067,2 +4070,1 @@\n-     * Gets the maximum number of digits allowed in the fraction portion of a\n-     * number.\n+     * {@inheritDoc NumberFormat}\n@@ -4078,2 +4080,1 @@\n-     * Gets the minimum number of digits allowed in the fraction portion of a\n-     * number.\n+     * {@inheritDoc NumberFormat}\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -132,3 +132,3 @@\n- * <li> {@link #setMinimumFractionDigits(int)}; Use to adjust the expected digits when\n- * formatting. Use any of the other minimum\/maximum or fraction\/integer setter methods\n- * in the same manner.\n+ * <li> {@link #setMinimumFractionDigits(int)}; Use to adjust the expected digits\n+ * when formatting. Use any of the other minimum\/maximum or fraction\/integer\n+ * setter methods in the same manner. These methods have no impact on parsing behavior.\n@@ -921,1 +921,1 @@\n-     * number.\n+     * number during formatting.\n@@ -932,4 +932,5 @@\n-     * number. maximumIntegerDigits must be &ge; minimumIntegerDigits.  If the\n-     * new value for maximumIntegerDigits is less than the current value\n-     * of minimumIntegerDigits, then minimumIntegerDigits will also be set to\n-     * the new value.\n+     * number during formatting. {@code maximumIntegerDigits} must be &ge;\n+     * {@code minimumIntegerDigits}. If the new value for {@code\n+     * maximumIntegerDigits} is less than the current value of\n+     * {@code minimumIntegerDigits}, then {@code minimumIntegerDigits} will\n+     * also be set to the new value. Negative input values are replaced with 0.\n@@ -937,3 +938,3 @@\n-     * @param newValue the maximum number of integer digits to be shown; if\n-     * less than zero, then zero is used. The concrete subclass may enforce an\n-     * upper limit to this value appropriate to the numeric type being formatted.\n+     * @param newValue the maximum number of integer digits to be shown. The\n+     * concrete subclass may enforce an upper limit to this value appropriate to\n+     * the numeric type being formatted.\n@@ -951,1 +952,1 @@\n-     * number.\n+     * number during formatting.\n@@ -962,4 +963,5 @@\n-     * number. minimumIntegerDigits must be &le; maximumIntegerDigits.  If the\n-     * new value for minimumIntegerDigits exceeds the current value\n-     * of maximumIntegerDigits, then maximumIntegerDigits will also be set to\n-     * the new value\n+     * number during formatting. {@code minimumIntegerDigits} must be &le;\n+     * {@code maximumIntegerDigits}. If the new value for {@code minimumIntegerDigits}\n+     * exceeds the current value of {@code maximumIntegerDigits}, then {@code\n+     * maximumIntegerDigits} will also be set to the new value. Negative input\n+     * values are replaced with 0.\n@@ -967,3 +969,3 @@\n-     * @param newValue the minimum number of integer digits to be shown; if\n-     * less than zero, then zero is used. The concrete subclass may enforce an\n-     * upper limit to this value appropriate to the numeric type being formatted.\n+     * @param newValue the minimum number of integer digits to be shown. The\n+     * concrete subclass may enforce an upper limit to this value appropriate to\n+     * the numeric type being formatted.\n@@ -981,1 +983,1 @@\n-     * number.\n+     * number during formatting.\n@@ -992,4 +994,5 @@\n-     * number. maximumFractionDigits must be &ge; minimumFractionDigits.  If the\n-     * new value for maximumFractionDigits is less than the current value\n-     * of minimumFractionDigits, then minimumFractionDigits will also be set to\n-     * the new value.\n+     * number during formatting. {@code maximumFractionDigits} must be &ge;\n+     * {@code minimumFractionDigits}. If the new value for {@code maximumFractionDigits}\n+     * is less than the current value of {@code minimumFractionDigits}, then\n+     * {@code minimumFractionDigits} will also be set to the new value. Negative\n+     * input values are replaced with 0.\n@@ -997,3 +1000,3 @@\n-     * @param newValue the maximum number of fraction digits to be shown; if\n-     * less than zero, then zero is used. The concrete subclass may enforce an\n-     * upper limit to this value appropriate to the numeric type being formatted.\n+     * @param newValue the maximum number of fraction digits to be shown. The\n+     * concrete subclass may enforce an upper limit to this value appropriate to\n+     * the numeric type being formatted.\n@@ -1011,1 +1014,1 @@\n-     * number.\n+     * number during formatting.\n@@ -1022,4 +1025,5 @@\n-     * number. minimumFractionDigits must be &le; maximumFractionDigits.  If the\n-     * new value for minimumFractionDigits exceeds the current value\n-     * of maximumFractionDigits, then maximumFractionDigits will also be set to\n-     * the new value\n+     * number during formatting. {@code minimumFractionDigits} must be &le;\n+     * {@code maximumFractionDigits}. If the new value for {@code\n+     * minimumFractionDigits} exceeds the current value of {@code\n+     * maximumFractionDigits}, then {@code maximumFractionDigits} will also be\n+     * set to the new value. Negative input values are replaced with 0.\n@@ -1027,3 +1031,3 @@\n-     * @param newValue the minimum number of fraction digits to be shown; if\n-     * less than zero, then zero is used. The concrete subclass may enforce an\n-     * upper limit to this value appropriate to the numeric type being formatted.\n+     * @param newValue the minimum number of fraction digits to be shown. The\n+     * concrete subclass may enforce an upper limit to this value appropriate to\n+     * the numeric type being formatted.\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":39,"deletions":35,"binary":false,"changes":74,"status":"modified"}]}