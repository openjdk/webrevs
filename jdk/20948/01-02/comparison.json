{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import static java.lang.Double.MIN_VALUE;\n@@ -3325,1 +3324,1 @@\n-                return d * longBitsToDouble((long) (scaleFactor + DoubleConsts.EXP_BIAS) << PRECISION - 1);\n+                return d * primPowerOfTwoD(scaleFactor);\n@@ -3328,1 +3327,1 @@\n-                return d * longBitsToDouble((long) scaleFactor << PRECISION - 1) * F_UP;\n+                return d * primPowerOfTwoD(scaleFactor - DoubleConsts.EXP_BIAS) * F_UP;\n@@ -3331,1 +3330,1 @@\n-                return d * longBitsToDouble((long) (scaleFactor - DoubleConsts.EXP_BIAS) << PRECISION - 1) * F_UP * F_UP;\n+                return d * primPowerOfTwoD(scaleFactor - 2 * DoubleConsts.EXP_BIAS) * F_UP * F_UP;\n@@ -3336,1 +3335,1 @@\n-            return d * longBitsToDouble((long) (scaleFactor + 2 * DoubleConsts.EXP_BIAS) << PRECISION - 1) * F_DOWN;\n+            return d * primPowerOfTwoD(scaleFactor + DoubleConsts.EXP_BIAS) * F_DOWN;\n@@ -3339,1 +3338,1 @@\n-            return d * longBitsToDouble((long) (scaleFactor + 3 * DoubleConsts.EXP_BIAS) << PRECISION - 1) * F_DOWN * F_DOWN;\n+            return d * primPowerOfTwoD(scaleFactor + 2 * DoubleConsts.EXP_BIAS) * F_DOWN * F_DOWN;\n@@ -3400,3 +3399,9 @@\n-        return Double.longBitsToDouble((((long)n + (long)DoubleConsts.EXP_BIAS) <<\n-                                        (DoubleConsts.SIGNIFICAND_WIDTH-1))\n-                                       & DoubleConsts.EXP_BIT_MASK);\n+        return primPowerOfTwoD(n);\n+    }\n+\n+    \/**\n+     * Returns a floating-point power of two in the normal range.\n+     * No checks are performed on the argument.\n+     *\/\n+    private static double primPowerOfTwoD(int n) {\n+        return longBitsToDouble((long) (n + DoubleConsts.EXP_BIAS) << PRECISION - 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}