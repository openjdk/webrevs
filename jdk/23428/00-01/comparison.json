{"files":[{"patch":"@@ -1265,5 +1265,13 @@\n-  \/\/ It's possible that evacuation succeeded, but we could still be cancelled when we get here.\n-  \/\/ A cancellation at this point means the degenerated cycle must resume from update-refs.\n-  set_gc_state_concurrent(EVACUATION, false);\n-  set_gc_state_concurrent(WEAK_ROOTS, false);\n-  set_gc_state_concurrent(UPDATE_REFS, true);\n+  {\n+    \/\/ Taking the thread lock here assures that any thread created after we change the gc\n+    \/\/ state will have the correct state. It also prevents attaching threads from seeing\n+    \/\/ an inconsistent state. If another thread holds this lock while it is being created,\n+    \/\/ they will have the wrong GC state, but they will be added to the list of java threads\n+    \/\/ and so will be corrected by the handshake.\n+    MutexLocker lock(Threads_lock);\n+\n+    \/\/ A cancellation at this point means the degenerated cycle must resume from update-refs.\n+    set_gc_state_concurrent(EVACUATION, false);\n+    set_gc_state_concurrent(WEAK_ROOTS, false);\n+    set_gc_state_concurrent(UPDATE_REFS, true);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"}]}