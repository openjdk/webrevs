{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+ * @library \/testlibrary\/asm\n@@ -43,2 +44,0 @@\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.Platform;\n@@ -47,0 +46,1 @@\n+\n@@ -48,0 +48,2 @@\n+import java.nio.file.Files;\n+\n@@ -53,3 +55,1 @@\n-        \/\/ ======= Configure the test\n-        String jarFile = System.getProperty(\"test.src\") +\n-            File.separator + \"JsrRewritingTestCase.jar\";\n+        \/\/ create a file in the scratch dir\n@@ -57,0 +57,2 @@\n+        File classFile = new File(className + \".class\");\n+        classFile.createNewFile();\n@@ -58,11 +60,3 @@\n-        \/\/ limit is 768MB in native words\n-        int mallocMaxTestWords = (1024 * 1024 * 768 \/ 4);\n-        if (Platform.is64bit())\n-            mallocMaxTestWords = (mallocMaxTestWords \/ 2);\n-\n-        \/\/ ======= extract the test class\n-        ProcessBuilder pb = new ProcessBuilder(new String[] {\n-            JDKToolFinder.getJDKTool(\"jar\"),\n-            \"xvf\", jarFile } );\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n+        \/\/ fill it with the binary data of the class file\n+        byte[] bytes = OOMCrashClass4000_1.dump();\n+        Files.write(classFile.toPath(), bytes);\n@@ -73,1 +67,1 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n@@ -80,1 +74,1 @@\n-        output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/JsrRewriting.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/JsrRewritingTestCase.jar","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+\n+\/*\n+This is class is a dumper for the original OOMCrashClass1960_2.class, i.e. its dump() method\n+produces a byte array with the original class file data.\n+\n+To get this source code, one needs to run the following command:\n+java jdk.internal.org.objectweb.asm.util.ASMifier OOMCrashClass1960_2.class >> OOMCrashClass1960_2.java\n+\n+The resulting java source code is large (>2 mb), so certain refactoring is applied.\n+ *\/\n+\n+public class OOMCrashClass1960_2 implements Opcodes {\n+\n+    public static byte[] dump() throws Exception {\n+\n+        ClassWriter classWriter = new ClassWriter(0);\n+        MethodVisitor methodVisitor;\n+\n+        classWriter.visit(V1_1, ACC_PUBLIC | ACC_SUPER, \"OOMCrashClass1960_2\", null, \"java\/lang\/Object\", null);\n+\n+        classWriter.visitSource(\"<generated>\", null);\n+\n+        {\n+            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, \"main0\", \"([Ljava\/lang\/String;)V\", null, null);\n+            methodVisitor.visitCode();\n+            Label label0 = new Label();\n+            methodVisitor.visitLabel(label0);\n+            methodVisitor.visitVarInsn(ALOAD, 0);\n+            methodVisitor.visitInsn(ICONST_0);\n+            methodVisitor.visitInsn(AALOAD);\n+            methodVisitor.visitMethodInsn(INVOKESTATIC, \"java\/lang\/Integer\", \"parseInt\", \"(Ljava\/lang\/String;)I\", false);\n+            methodVisitor.visitVarInsn(ISTORE, 1);\n+            Label label1 = new Label();\n+            methodVisitor.visitJumpInsn(GOTO, label1);\n+            Label label2 = new Label();\n+            methodVisitor.visitLabel(label2);\n+            methodVisitor.visitInsn(RETURN);\n+\n+            \/\/ This line overflows the jump target for jsr\n+\n+            Label prevLabel = label2;\n+            for (int i = 0; i < 1959; ++i) {\n+                Label curLabel = getCurLabel(methodVisitor, prevLabel);\n+                prevLabel = curLabel;\n+            }\n+\n+            Label label5877 = prevLabel;\n+\n+            methodVisitor.visitLabel(label1);\n+            methodVisitor.visitVarInsn(ILOAD, 1);\n+            methodVisitor.visitJumpInsn(IFEQ, label5877);\n+            Label label5880 = new Label();\n+            methodVisitor.visitJumpInsn(JSR, label5880);\n+            Label label5881 = new Label();\n+            methodVisitor.visitJumpInsn(GOTO, label5881);\n+            methodVisitor.visitLabel(label5880);\n+            methodVisitor.visitInsn(RETURN);\n+            methodVisitor.visitLabel(label5881);\n+            methodVisitor.visitInsn(ACONST_NULL);\n+            methodVisitor.visitJumpInsn(GOTO, label1);\n+            Label label5882 = new Label();\n+            methodVisitor.visitLabel(label5882);\n+            methodVisitor.visitLocalVariable(\"argv\", \"[Ljava\/lang\/String;\", null, label0, label5882, 0);\n+            methodVisitor.visitMaxs(65535, 2);\n+            methodVisitor.visitEnd();\n+        }\n+        {\n+            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+            methodVisitor.visitCode();\n+            Label label0 = new Label();\n+            methodVisitor.visitLabel(label0);\n+            methodVisitor.visitVarInsn(ALOAD, 0);\n+            methodVisitor.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n+            methodVisitor.visitInsn(RETURN);\n+            Label label1 = new Label();\n+            methodVisitor.visitLabel(label1);\n+            methodVisitor.visitLocalVariable(\"this\", \"LOOMCrashClass1960_2;\", null, label0, label1, 0);\n+            methodVisitor.visitMaxs(1, 1);\n+            methodVisitor.visitEnd();\n+        }\n+        classWriter.visitEnd();\n+\n+        return classWriter.toByteArray();\n+    }\n+\n+    public static Label getCurLabel(final MethodVisitor methodVisitor, final Label prevLabel) {\n+        final Label curLabel = new Label();\n+        methodVisitor.visitLabel(curLabel);\n+        methodVisitor.visitVarInsn(ILOAD, 1);\n+        methodVisitor.visitJumpInsn(IFEQ, prevLabel);\n+        Label tmpLabel1 = new Label();\n+        methodVisitor.visitJumpInsn(JSR, tmpLabel1);\n+        Label tmpLabel2 = new Label();\n+        methodVisitor.visitJumpInsn(GOTO, tmpLabel2);\n+        methodVisitor.visitLabel(tmpLabel1);\n+        methodVisitor.visitInsn(RETURN);\n+        methodVisitor.visitLabel(tmpLabel2);\n+        methodVisitor.visitInsn(ACONST_NULL);\n+        methodVisitor.visitJumpInsn(GOTO, curLabel);\n+        return curLabel;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/OOMCrashClass1960_2.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+\n+\/*\n+This is class is a dumper for the original OOMCrashClass4000_1.class, i.e. its dump() method\n+produces a byte array with the original class file data.\n+\n+To get this source code, one needs to run the following command:\n+java jdk.internal.org.objectweb.asm.util.ASMifier OOMCrashClass4000_1.class >> OOMCrashClass4000_1.java\n+\n+The resulting java source code is large (>2 mb), so certain refactoring is applied.\n+ *\/\n+\n+public class OOMCrashClass4000_1 implements Opcodes {\n+\n+    public static byte[] dump() throws Exception {\n+\n+        ClassWriter classWriter = new ClassWriter(0);\n+        MethodVisitor methodVisitor;\n+\n+        classWriter.visit(V1_1, ACC_PUBLIC | ACC_SUPER, \"OOMCrashClass4000_1\", null, \"java\/lang\/Object\", null);\n+\n+        classWriter.visitSource(\"<generated>\", null);\n+\n+        {\n+            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, \"main0\", \"([Ljava\/lang\/String;)V\", null, null);\n+            methodVisitor.visitCode();\n+            Label label0 = new Label();\n+            methodVisitor.visitLabel(label0);\n+            methodVisitor.visitVarInsn(ALOAD, 0);\n+            methodVisitor.visitInsn(ICONST_0);\n+            methodVisitor.visitInsn(AALOAD);\n+            methodVisitor.visitMethodInsn(INVOKESTATIC, \"java\/lang\/Integer\", \"parseInt\", \"(Ljava\/lang\/String;)I\", false);\n+            methodVisitor.visitVarInsn(ISTORE, 1);\n+            Label label1 = new Label();\n+            methodVisitor.visitJumpInsn(GOTO, label1);\n+            Label label2 = new Label();\n+            methodVisitor.visitLabel(label2);\n+            methodVisitor.visitInsn(RETURN);\n+\n+            \/\/ This line overflows the jump target for jsr\n+\n+            Label prevLabel = label2;\n+            for (int i = 0; i < 3999; ++i) {\n+                Label curLabel = getCurLabel(methodVisitor, prevLabel);\n+                prevLabel = curLabel;\n+            }\n+\n+            Label label11997 = prevLabel;\n+\n+            methodVisitor.visitLabel(label1);\n+            methodVisitor.visitVarInsn(ILOAD, 1);\n+            methodVisitor.visitJumpInsn(IFEQ, label11997);\n+            Label label12000 = new Label();\n+            methodVisitor.visitJumpInsn(JSR, label12000);\n+            Label label12001 = new Label();\n+            methodVisitor.visitJumpInsn(GOTO, label12001);\n+            methodVisitor.visitLabel(label12000);\n+            methodVisitor.visitInsn(RETURN);\n+            methodVisitor.visitLabel(label12001);\n+            methodVisitor.visitInsn(ACONST_NULL);\n+            methodVisitor.visitJumpInsn(GOTO, label1);\n+            Label label12002 = new Label();\n+            methodVisitor.visitLabel(label12002);\n+            methodVisitor.visitLocalVariable(\"argv\", \"[Ljava\/lang\/String;\", null, label0, label12002, 0);\n+            methodVisitor.visitMaxs(65535, 2);\n+            methodVisitor.visitEnd();\n+        }\n+        {\n+            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+            methodVisitor.visitCode();\n+            Label label0 = new Label();\n+            methodVisitor.visitLabel(label0);\n+            methodVisitor.visitVarInsn(ALOAD, 0);\n+            methodVisitor.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n+            methodVisitor.visitInsn(RETURN);\n+            Label label1 = new Label();\n+            methodVisitor.visitLabel(label1);\n+            methodVisitor.visitLocalVariable(\"this\", \"LOOMCrashClass4000_1;\", null, label0, label1, 0);\n+            methodVisitor.visitMaxs(1, 1);\n+            methodVisitor.visitEnd();\n+        }\n+        classWriter.visitEnd();\n+\n+        return classWriter.toByteArray();\n+    }\n+\n+    public static Label getCurLabel(final MethodVisitor methodVisitor, final Label prevLabel) {\n+        final Label curLabel = new Label();\n+        methodVisitor.visitLabel(curLabel);\n+        methodVisitor.visitVarInsn(ILOAD, 1);\n+        methodVisitor.visitJumpInsn(IFEQ, prevLabel);\n+        Label tmpLabel1 = new Label();\n+        methodVisitor.visitJumpInsn(JSR, tmpLabel1);\n+        Label tmpLabel2 = new Label();\n+        methodVisitor.visitJumpInsn(GOTO, tmpLabel2);\n+        methodVisitor.visitLabel(tmpLabel1);\n+        methodVisitor.visitInsn(RETURN);\n+        methodVisitor.visitLabel(tmpLabel2);\n+        methodVisitor.visitInsn(ACONST_NULL);\n+        methodVisitor.visitJumpInsn(GOTO, curLabel);\n+        return curLabel;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/OOMCrashClass4000_1.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+ * @library \/testlibrary\/asm\n@@ -44,2 +45,0 @@\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.Platform;\n@@ -49,0 +48,3 @@\n+import java.io.File;\n+import java.nio.file.Files;\n+\n@@ -53,2 +55,0 @@\n-        \/\/ ======= Configure the test\n-        String jarFile = System.getProperty(\"test.src\") + \"\/testcase.jar\";\n@@ -57,6 +57,7 @@\n-        \/\/ ======= extract the test class\n-        ProcessBuilder pb = new ProcessBuilder(new String[] {\n-            JDKToolFinder.getJDKTool(\"jar\"),\n-            \"xvf\", jarFile } );\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n+        \/\/ create a file in the scratch dir\n+        File classFile = new File(className + \".class\");\n+        classFile.createNewFile();\n+\n+        \/\/ fill it with the binary data of the class file\n+        byte[] bytes = OOMCrashClass1960_2.dump();\n+        Files.write(classFile.toPath(), bytes);\n@@ -67,2 +68,2 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-cp\", \".\",\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                \"-cp\", \".\",\n@@ -74,1 +75,1 @@\n-        output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/OomWhileParsingRepeatedJsr.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/testcase.jar","binary":true,"status":"deleted"}]}