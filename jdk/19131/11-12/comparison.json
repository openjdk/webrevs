{"files":[{"patch":"@@ -616,1 +616,3 @@\n-     * signal during deactivation.\n+     * signal during deactivation.  Because idle workers are often not\n+     * yet blocked (parked), we use a WorkQueue field to advertise\n+     * that a waiter actually needs unparking upon signal.\n@@ -1215,0 +1217,2 @@\n+        @jdk.internal.vm.annotation.Contended(\"w\")\n+        volatile int parking;      \/\/ nonzero if parked in awaitWork\n@@ -1906,1 +1910,2 @@\n-                    U.unpark(v.owner);\n+                    if (v.parking != 0)\n+                        U.unpark(v.owner);\n@@ -1929,1 +1934,2 @@\n-                U.unpark(v.owner);\n+                if (v.parking != 0)\n+                    U.unpark(v.owner);\n@@ -2111,0 +2117,1 @@\n+            w.parking = 1;                 \/\/ enable unpark\n@@ -2126,0 +2133,1 @@\n+            w.parking = 0;\n@@ -2214,1 +2222,2 @@\n-                U.unpark(v.owner);\n+                if (v.parking != 0)\n+                    U.unpark(v.owner);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -34,1 +34,1 @@\n-    static final AtomicBoolean stop = new AtomicBoolean();\n+    static final AtomicInteger count = new AtomicInteger();\n@@ -38,5 +38,6 @@\n-    static final Callable<Void> awaitStop = new Callable<Void>() {\n-            public Void call() {\n-                while (!stop.get()) Thread.onSpinWait();\n-                stop.set(false);\n-                return null; }};\n+    static final class AwaitCount implements Callable<Void> {\n+        private int c;\n+        AwaitCount(int c) { this.c = c; }\n+        public Void call() {\n+            while (count.get() == c) Thread.onSpinWait();\n+            return null; }};\n@@ -47,1 +48,1 @@\n-                var future1 = pool.submit(awaitStop);\n+                var future1 = pool.submit(new AwaitCount(i));\n@@ -50,1 +51,1 @@\n-                stop.set(true);\n+                count.set(i + 1);\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/Starvation.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"}]}