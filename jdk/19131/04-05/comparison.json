{"files":[{"patch":"@@ -2014,1 +2014,0 @@\n-                                        Thread.onSpinWait();\n@@ -2021,0 +2020,1 @@\n+                                Thread.onSpinWait();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322732\n+ * @summary ForkJoinPool utilizes available workers even with arbitrary task dependencies\n+ *\/\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class Starvation {\n+\n+    public static void main(String[] args) throws Exception {\n+        try (var pool = new ForkJoinPool(2)) {\n+            for (int i = 0; i < 1_000_000; i++) {\n+                var stop = new AtomicBoolean();\n+                var future1 = pool.submit(() -> {\n+                    while (!stop.get()) {\n+                        Thread.onSpinWait();\n+                    }\n+                });\n+                var future2 = pool.submit(() -> null);\n+                future2.get();\n+                stop.set(true);\n+                future1.get();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/Starvation.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}