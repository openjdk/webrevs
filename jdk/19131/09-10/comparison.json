{"files":[{"patch":"@@ -1993,1 +1993,1 @@\n-                for (int l = n; l > 0; --l, i += step) {  \/\/ scan queues\n+                for (int l = -n; l < n; ++l, i += step) {  \/\/ scan queues (twice)\n@@ -2028,2 +2028,1 @@\n-                                taken = true;\n-                                if (a[nk] != null)\n+                                if (taken != (taken = true) && a[nk] != null)\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.concurrent.Callable;\n@@ -33,0 +34,9 @@\n+    static final AtomicBoolean stop = new AtomicBoolean();\n+    static final Callable<Void> noop = new Callable<Void>() {\n+            public Void call() {\n+                return null; }};\n+    static final Callable<Void> awaitStop = new Callable<Void>() {\n+            public Void call() {\n+                while (!stop.get()) Thread.onSpinWait();\n+                stop.set(false);\n+                return null; }};\n@@ -36,8 +46,3 @@\n-            for (int i = 0; i < 1_000_000; i++) {\n-                var stop = new AtomicBoolean();\n-                var future1 = pool.submit(() -> {\n-                    while (!stop.get()) {\n-                        Thread.onSpinWait();\n-                    }\n-                });\n-                var future2 = pool.submit(() -> null);\n+            for (int i = 0; i < 100_000; i++) {\n+                var future1 = pool.submit(awaitStop);\n+                var future2 = pool.submit(noop);\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/Starvation.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}