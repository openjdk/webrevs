{"files":[{"patch":"@@ -616,3 +616,1 @@\n-     * signal during deactivation.  Because idle workers are often not\n-     * yet blocked (parked), we use a WorkQueue field to advertise\n-     * that a waiter actually needs unparking upon signal.\n+     * signal during deactivation.\n@@ -1217,2 +1215,0 @@\n-        @jdk.internal.vm.annotation.Contended(\"w\")\n-        volatile int parking;      \/\/ nonzero if parked in awaitWork\n@@ -1225,0 +1221,1 @@\n+        private static final long SOURCE;\n@@ -1236,0 +1233,3 @@\n+        final void updateSource(int v) {\n+            U.getAndSetInt(this, SOURCE, v);\n+        }\n@@ -1601,0 +1601,1 @@\n+            SOURCE = U.objectFieldOffset(klass, \"source\");\n@@ -1905,2 +1906,1 @@\n-                    if (v.parking != 0)\n-                        U.unpark(v.owner);\n+                    U.unpark(v.owner);\n@@ -1929,2 +1929,1 @@\n-                if (v.parking != 0)\n-                    U.unpark(v.owner);\n+                U.unpark(v.owner);\n@@ -2027,1 +2026,1 @@\n-                                w.source = j;             \/\/ volatile write\n+                                w.updateSource(j);        \/\/ fully fenced\n@@ -2112,1 +2111,0 @@\n-            w.parking = 1;                 \/\/ enable unpark\n@@ -2128,1 +2126,0 @@\n-            w.parking = 0;\n@@ -2217,2 +2214,1 @@\n-                if (v.parking != 0)\n-                    U.unpark(v.owner);\n+                U.unpark(v.owner);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"}]}