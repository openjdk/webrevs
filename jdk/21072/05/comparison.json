{"files":[{"patch":"@@ -1138,0 +1138,20 @@\n+bool OopStorage::print_containing(const oop* addr, outputStream* st) {\n+  if (addr != nullptr) {\n+    Block* block = find_block_or_null(addr);\n+    if (block != nullptr && block->print_containing(addr, st)) {\n+      st->print(\" in oop storage \\\"%s\\\"\", name());\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+bool OopStorage::Block::print_containing(const oop* addr, outputStream* st) {\n+  if (contains(addr)) {\n+    st->print(PTR_FORMAT \" is a pointer %u\/%zu into block %zu\",\n+              p2i(addr), get_index(addr), ARRAY_SIZE(_data), _active_index);\n+    return true;\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -216,0 +216,1 @@\n+  bool print_containing(const oop* addr, outputStream* st);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -199,0 +199,2 @@\n+\n+  bool print_containing(const oop* addr, outputStream* st);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,17 @@\n+bool OopStorageSet::print_containing(const void* addr, outputStream* st) {\n+  if (addr != nullptr) {\n+    const void* aligned_addr = align_down(addr, alignof(oop));\n+    for (OopStorage* storage : Range<Id>()) {\n+      if (storage->print_containing((oop*) aligned_addr, st)) {\n+        if (aligned_addr != addr) {\n+          st->print_cr(\" (unaligned)\");\n+        } else {\n+          st->cr();\n+        }\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"oops\/oop.hpp\"\n@@ -92,0 +93,2 @@\n+  \/\/ Debugging: print location info, if in storage.\n+  static bool print_containing(const void* addr, outputStream* st);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/shared\/oopStorageSet.hpp\"\n@@ -1320,0 +1321,5 @@\n+  \/\/ Ask if any OopStorage knows about this address.\n+  if (OopStorageSet::print_containing(addr, st)) {\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shared\/oopStorage.hpp\"\n+#include \"gc\/shared\/oopStorage.inline.hpp\"\n@@ -29,0 +29,3 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n+#include \"runtime\/vmOperations.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n@@ -35,0 +38,3 @@\n+using ::testing::HasSubstr;\n+using ::testing::Not;\n+\n@@ -86,0 +92,2 @@\n+\n+  class VM_PrintAtSafepoint;\n@@ -99,0 +107,74 @@\n+\n+class OopStorageSetTest::VM_PrintAtSafepoint : public VM_GTestExecuteAtSafepoint {\n+private:\n+  class PrintContainingClosure : public Closure {\n+    public:\n+      void do_oop(oop* addr) {\n+        \/\/ Direct slot hit.\n+        {\n+          stringStream ss;\n+          bool printed = OopStorageSet::print_containing(addr, &ss);\n+          ASSERT_TRUE(printed);\n+          ASSERT_THAT(ss.freeze(), HasSubstr(\"is a pointer\"));\n+          ASSERT_THAT(ss.freeze(), HasSubstr(\"into block\"));\n+          ASSERT_THAT(ss.freeze(), HasSubstr(\"in oop storage\"));\n+          ASSERT_THAT(ss.freeze(), Not(HasSubstr(\"(unaligned)\")));\n+        }\n+\n+        \/\/ Unaligned pointer to adjacent slot, should still be in oop storage range.\n+        {\n+          char* unaligned_addr = (char*)addr + 1;\n+          stringStream ss;\n+          bool printed = OopStorageSet::print_containing(unaligned_addr, &ss);\n+          ASSERT_TRUE(printed);\n+          ASSERT_THAT(ss.freeze(), HasSubstr(\"is a pointer\"));\n+          ASSERT_THAT(ss.freeze(), HasSubstr(\"into block\"));\n+          ASSERT_THAT(ss.freeze(), HasSubstr(\"in oop storage\"));\n+          ASSERT_THAT(ss.freeze(), HasSubstr(\"(unaligned)\"));\n+        }\n+      }\n+  };\n+\n+public:\n+  void doit() {\n+    PrintContainingClosure cl;\n+    for (OopStorage* storage : OopStorageSet::Range<OopStorageSet::Id>()) {\n+      storage->oops_do(&cl);\n+    }\n+  }\n+};\n+\n+TEST_VM_F(OopStorageSetTest, print_containing) {\n+  \/\/ nullptrs print nothing\n+  {\n+    stringStream ss;\n+    bool printed = OopStorageSet::print_containing(nullptr, &ss);\n+    ASSERT_FALSE(printed);\n+    EXPECT_STREQ(\"\", ss.freeze());\n+  }\n+\n+  \/\/ Goofy values print nothing: unaligned out of storage pointer.\n+  {\n+    stringStream ss;\n+    bool printed = OopStorageSet::print_containing((char*)0x1, &ss);\n+    ASSERT_FALSE(printed);\n+    EXPECT_STREQ(\"\", ss.freeze());\n+  }\n+\n+  \/\/ Goofy values print nothing: aligned out of storage pointer.\n+  {\n+    stringStream ss;\n+    bool printed = OopStorageSet::print_containing((char*)alignof(oop), &ss);\n+    ASSERT_FALSE(printed);\n+    EXPECT_STREQ(\"\", ss.freeze());\n+  }\n+\n+  \/\/ All slot addresses should print well.\n+  {\n+    VM_PrintAtSafepoint op;\n+    {\n+      ThreadInVMfromNative invm(JavaThread::current());\n+      VMThread::execute(&op);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorageSet.cpp","additions":83,"deletions":1,"binary":false,"changes":84,"status":"modified"}]}