{"files":[{"patch":"@@ -48,1 +48,1 @@\n- * @summary tests the CharBuffer implementations behaving as CharSequence in various states (position, limit, offset)\n+ * @summary Tests CharBuffer implementations of CharSequence\n@@ -86,1 +86,1 @@\n-        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(), type + \"  at \" + rndRange.position() + \" through \" + rndRange.limit()));\n+        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(), type + \" at \" + rndRange.position() + \" through \" + rndRange.limit()));\n@@ -90,1 +90,3 @@\n-        cases.add(Arguments.of(rndSlicedRange, buf, rndRange.position() + rndSlicedRange.position(), rndRange.position() + rndSlicedRange.limit(), type + \" sliced at \" + rndRange.position() + \" with position \" + rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n+        cases.add(Arguments.of(rndSlicedRange, buf, rndRange.position() + rndSlicedRange.position(),\n+                rndRange.position() + rndSlicedRange.limit(), type + \" sliced at \" + rndRange.position()\n+                        + \" with position \" + rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n@@ -93,0 +95,10 @@\n+    \/**\n+     * Returns a {@code List} of {@link Arguments}, with each entry representing a test case scenario.\n+     * <ul>\n+     * <li>CharBuffer - the instance to be tested<\/li>\n+     * <li>char[] - the data expected to be backing the current state of the CharBuffer<\/li>\n+     * <li>int start - index (inclusive) into char[] where the CharBuffer should be positioned<\/li>\n+     * <li>int stop - index (exclusive) into char[] where the CharBuffer should be limited<\/li>\n+     * <li>String - description of the test scenario<\/li>\n+     * <\/ul>\n+     *\/\n@@ -97,4 +109,4 @@\n-        populateAndAddCases(\"BEHeapByteBuffer\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"LEHeapByteBuffer\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"BEDirectByteBuffer\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"LEDirectByteBuffer\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer BE\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer LE\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer BE\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer LE\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n@@ -133,1 +145,1 @@\n-            args.add(Arguments.of(lehbbAsCB, buf, i, buf.length, \"LE HeapByteBuffer as CharBuffer index \" + i + \" to end\"));\n+            args.add(Arguments.of(lehbbAsCB, buf, i, buf.length, \"HeapByteBuffer LE as CharBuffer index \" + i + \" to end\"));\n@@ -141,1 +153,1 @@\n-                    \"BE DirectByteBuffer as CharBuffer index \" + i + \" to end\"));\n+                    \"DirectByteBuffer BE as CharBuffer index \" + i + \" to end\"));\n@@ -170,1 +182,1 @@\n-                args.add(Arguments.of(behbbAsCB, buf, i, buf.length - i, \"BE HeapByteBuffer as CharBuffer index \" + i + \" to \" + end));\n+                args.add(Arguments.of(behbbAsCB, buf, i, buf.length - i, \"HeapByteBuffer BE as CharBuffer index \" + i + \" to \" + end));\n@@ -180,1 +192,1 @@\n-                args.add(Arguments.of(ledbbAsCB, buf, i, buf.length - i, \"LE DirectByteBuffer as CharBuffer index \" + i + \" to \" + end));\n+                args.add(Arguments.of(ledbbAsCB, buf, i, buf.length - i, \"DirectByteBuffer LE as CharBuffer index \" + i + \" to \" + end));\n@@ -227,1 +239,1 @@\n-    void testGetCharsNegativeSourceBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeSrcBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -234,1 +246,1 @@\n-    void testGetCharsNegativeSourceEnd(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeSrcEnd(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -241,1 +253,1 @@\n-    void testGetCharsSourceEndBeforeBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsSrcEndBeforeBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -248,1 +260,1 @@\n-    void testGetCharsNegativeDestBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeDstBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -255,1 +267,1 @@\n-    void testGetCharsDestBegOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsDstBeginOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -262,1 +274,1 @@\n-    void testGetCharsDestLengthOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsDstLengthOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n","filename":"test\/jdk\/java\/nio\/Buffer\/CharBufferAsCharSequenceTest.java","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"}]}