{"files":[{"patch":"@@ -65,1 +65,2 @@\n-     * Randomly adjusts the position and limit such that the position will be in the first 1\/4th and the limit in the last half.\n+     * Randomly adjusts the position and limit such that the position will be in the\n+     * first 1\/4th and the limit in the last half.\n@@ -77,4 +78,7 @@\n-     * Generates random content to use for populating <i>cb<\/i> then calling through to {@code addCases(String, char[], CharBuffer, List)}\n-     * @param type String description of the type of CharBuffer under test.\n-     * @param cb CharBuffer instance to populate as base of creating cases.\n-     * @param cases The {@code List} to populate with the cases for use from {@link #charBufferArguments()}.\n+     * Generates random content to use for populating <i>cb<\/i> then calling through\n+     * to {@code addCases(String, char[], CharBuffer, List)}\n+     * \n+     * @param type  String description of the type of CharBuffer under test.\n+     * @param cb    CharBuffer instance to populate as base of creating cases.\n+     * @param cases The {@code List} to populate with the cases for use from\n+     *              {@link #charBufferArguments()}.\n@@ -94,1 +98,3 @@\n-     * <li>A duplicate of <i>cb<\/i> with a randomized position and limit. See {@code randomizeRange(CharBuffer)}<li>\n+     * <li>A duplicate of <i>cb<\/i> with a randomized position and limit. See\n+     * {@code randomizeRange(CharBuffer)}\n+     * <li>\n@@ -96,1 +102,2 @@\n-     * <li>A {@link CharBuffer#slice() sliced} copy of randomized range with a randomized position and limit.<\/li>\n+     * <li>A {@link CharBuffer#slice() sliced} copy of randomized range with a\n+     * randomized position and limit.<\/li>\n@@ -104,2 +111,4 @@\n-        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(), type + \" at \" + rndRange.position() + \" through \" + rndRange.limit()));\n-        cases.add(Arguments.of(rndRange.slice(), buf, rndRange.position(), rndRange.limit(), type + \" sliced at \" + rndRange.position() + \" through \" + rndRange.limit()));\n+        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(),\n+                type + \" at \" + rndRange.position() + \" through \" + rndRange.limit()));\n+        cases.add(Arguments.of(rndRange.slice(), buf, rndRange.position(), rndRange.limit(),\n+                type + \" sliced at \" + rndRange.position() + \" through \" + rndRange.limit()));\n@@ -108,3 +117,6 @@\n-        cases.add(Arguments.of(rndSlicedRange, buf, rndRange.position() + rndSlicedRange.position(),\n-                rndRange.position() + rndSlicedRange.limit(), type + \" sliced at \" + rndRange.position()\n-                        + \" with position \" + rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n+        cases.add(Arguments.of(rndSlicedRange,\n+                               buf,\n+                               rndRange.position() + rndSlicedRange.position(),\n+                               rndRange.position() + rndSlicedRange.limit(),\n+                               type + \" sliced at \" + rndRange.position() + \" with position \" +\n+                               rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n@@ -136,1 +148,2 @@\n-     *     <li>Randomly generated content into {@link CharBuffer#wrap(CharSequence) StringCharBuffer} - see {@code addCases(String, char[], CharBuffer, List)}.\n+     *     <li>Randomly generated content into {@link CharBuffer#wrap(CharSequence) StringCharBuffer}\n+     *         - see {@code addCases(String, char[], CharBuffer, List)}.\n@@ -138,1 +151,2 @@\n-     *         <li>StringCharBuffer wrapping a {@code CharBuffer} created from {@link CharBuffer#wrap(char[])}<\/li>\n+     *         <li>StringCharBuffer wrapping a {@code CharBuffer}\n+     *             created from {@link CharBuffer#wrap(char[])}<\/li>\n@@ -150,4 +164,8 @@\n-        populateAndAddCases(\"HeapByteBuffer BE\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"HeapByteBuffer LE\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"DirectByteBuffer BE\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"DirectByteBuffer LE\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer BE\",\n+                ByteBuffer.allocate(SIZE * 2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer LE\",\n+                ByteBuffer.allocate(SIZE * 2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer BE\",\n+                ByteBuffer.allocateDirect(SIZE * 2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer LE\",\n+                ByteBuffer.allocateDirect(SIZE * 2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n","filename":"test\/jdk\/java\/nio\/Buffer\/CharBufferAsCharSequenceTest.java","additions":36,"deletions":18,"binary":false,"changes":54,"status":"modified"}]}