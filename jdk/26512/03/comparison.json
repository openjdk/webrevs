{"files":[{"patch":"@@ -44,1 +44,1 @@\n- * @bug 8343110 8361299\n+ * @bug 8343110 8361299 8364345\n@@ -48,1 +48,1 @@\n- * @summary tests the CharBuffer implementations behaving as CharSequence in various states (position, limit, offset)\n+ * @summary Tests CharBuffer implementations of CharSequence\n@@ -64,0 +64,4 @@\n+    \/**\n+     * Randomly adjusts the position and limit such that the position will be in the\n+     * first 1\/4th and the limit in the last half.\n+     *\/\n@@ -66,2 +70,2 @@\n-        int start = RAND.nextInt(mid - 3); \/\/ from 0 to mid\n-        int end = RAND.nextInt(mid + 3, cb.capacity()); \/\/ from mid to capacity\n+        int start = RAND.nextInt(mid >> 1); \/\/ from 0 to 1\/4\n+        int end = RAND.nextInt(mid + 1, cb.capacity()); \/\/ from mid to capacity\n@@ -73,0 +77,9 @@\n+    \/**\n+     * Generates random content to use for populating <i>cb<\/i> then calling through\n+     * to {@code addCases(String, char[], CharBuffer, List)}\n+     *\n+     * @param type  String description of the type of CharBuffer under test.\n+     * @param cb    CharBuffer instance to populate as base of creating cases.\n+     * @param cases The {@code List} to populate with the cases for use from\n+     *              {@link #charBufferArguments()}.\n+     *\/\n@@ -81,0 +94,12 @@\n+    \/**\n+     * Adds 4 cases to <i>cases<\/i>.\n+     * <ul>\n+     * <li>Full use of cb<\/li>.\n+     * <li>A duplicate of <i>cb<\/i> with a randomized position and limit. See\n+     * {@code randomizeRange(CharBuffer)}\n+     * <li>\n+     * <li>A {@link CharBuffer#slice() sliced} copy of randomized range.<\/li>\n+     * <li>A {@link CharBuffer#slice() sliced} copy of randomized range with a\n+     * randomized position and limit.<\/li>\n+     * <\/ul>\n+     *\/\n@@ -86,2 +111,4 @@\n-        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(), type + \"  at \" + rndRange.position() + \" through \" + rndRange.limit()));\n-        cases.add(Arguments.of(rndRange.slice(), buf, rndRange.position(), rndRange.limit(), type + \" sliced at \" + rndRange.position() + \" through \" + rndRange.limit()));\n+        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(),\n+                type + \" at \" + rndRange.position() + \" through \" + rndRange.limit()));\n+        cases.add(Arguments.of(rndRange.slice(), buf, rndRange.position(), rndRange.limit(),\n+                type + \" sliced at \" + rndRange.position() + \" through \" + rndRange.limit()));\n@@ -90,1 +117,6 @@\n-        cases.add(Arguments.of(rndSlicedRange, buf, rndRange.position() + rndSlicedRange.position(), rndRange.position() + rndSlicedRange.limit(), type + \" sliced at \" + rndRange.position() + \" with position \" + rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n+        cases.add(Arguments.of(rndSlicedRange,\n+                               buf,\n+                               rndRange.position() + rndSlicedRange.position(),\n+                               rndRange.position() + rndSlicedRange.limit(),\n+                               type + \" sliced at \" + rndRange.position() + \" with position \" +\n+                               rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n@@ -93,0 +125,35 @@\n+    \/**\n+     * Returns a {@code List} of {@link Arguments}, with each entry representing a test case scenario.\n+     * <ul>\n+     * <li>CharBuffer - the instance to be tested<\/li>\n+     * <li>char[] - the data expected to be backing the current state of the CharBuffer<\/li>\n+     * <li>int start - index (inclusive) into char[] where the CharBuffer should be positioned<\/li>\n+     * <li>int stop - index (exclusive) into char[] where the CharBuffer should be limited<\/li>\n+     * <li>String - description of the test scenario<\/li>\n+     * <\/ul>\n+     *\n+     * Generates the following sets of arguments\/test cases.\n+     * <ul>\n+     * <li>Randomly generated content\n+     *   <ul>\n+     *     <li>See {@code populateAndAddCases(String, CharBuffer, List)} for the following types:\n+     *       <ul>\n+     *         <li>HeapCharBuffer<\/i>\n+     *         <li>HeapByteBuffer Big Endian<\/i>\n+     *         <li>HeapByteBuffer Little Endian<\/i>\n+     *         <li>DirectByteBuffer Big Endian<\/i>\n+     *         <li>DirectByteBuffer Little Endian<\/i>\n+     *       <\/ul>\n+     *     <\/li>\n+     *     <li>Randomly generated content into {@link CharBuffer#wrap(CharSequence) StringCharBuffer}\n+     *         - see {@code addCases(String, char[], CharBuffer, List)}.\n+     *       <ul>\n+     *         <li>StringCharBuffer wrapping a {@code CharBuffer}\n+     *             created from {@link CharBuffer#wrap(char[])}<\/li>\n+     *         <li>StringCharBuffer wrapping a {@code String}<\/li>\n+     *       <\/ul>\n+     *     <\/li>\n+     *   <\/ul>\n+     * <\/li>\n+     * <\/ul>\n+     *\/\n@@ -97,4 +164,8 @@\n-        populateAndAddCases(\"BEHeapByteBuffer\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"LEHeapByteBuffer\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"BEDirectByteBuffer\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"LEDirectByteBuffer\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer BE\",\n+                ByteBuffer.allocate(SIZE * 2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer LE\",\n+                ByteBuffer.allocate(SIZE * 2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer BE\",\n+                ByteBuffer.allocateDirect(SIZE * 2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer LE\",\n+                ByteBuffer.allocateDirect(SIZE * 2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n@@ -133,1 +204,1 @@\n-            args.add(Arguments.of(lehbbAsCB, buf, i, buf.length, \"LE HeapByteBuffer as CharBuffer index \" + i + \" to end\"));\n+            args.add(Arguments.of(lehbbAsCB, buf, i, buf.length, \"HeapByteBuffer LE as CharBuffer index \" + i + \" to end\"));\n@@ -141,1 +212,1 @@\n-                    \"BE DirectByteBuffer as CharBuffer index \" + i + \" to end\"));\n+                    \"DirectByteBuffer BE as CharBuffer index \" + i + \" to end\"));\n@@ -170,1 +241,1 @@\n-                args.add(Arguments.of(behbbAsCB, buf, i, buf.length - i, \"BE HeapByteBuffer as CharBuffer index \" + i + \" to \" + end));\n+                args.add(Arguments.of(behbbAsCB, buf, i, buf.length - i, \"HeapByteBuffer BE as CharBuffer index \" + i + \" to \" + end));\n@@ -180,1 +251,1 @@\n-                args.add(Arguments.of(ledbbAsCB, buf, i, buf.length - i, \"LE DirectByteBuffer as CharBuffer index \" + i + \" to \" + end));\n+                args.add(Arguments.of(ledbbAsCB, buf, i, buf.length - i, \"DirectByteBuffer LE as CharBuffer index \" + i + \" to \" + end));\n@@ -227,1 +298,1 @@\n-    void testGetCharsNegativeSourceBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeSrcBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -234,1 +305,1 @@\n-    void testGetCharsNegativeSourceEnd(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeSrcEnd(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -241,1 +312,1 @@\n-    void testGetCharsSourceEndBeforeBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsSrcEndBeforeBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -248,1 +319,1 @@\n-    void testGetCharsNegativeDestBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeDstBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -255,1 +326,1 @@\n-    void testGetCharsDestBegOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsDstBeginOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -262,1 +333,1 @@\n-    void testGetCharsDestLengthOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsDstLengthOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n","filename":"test\/jdk\/java\/nio\/Buffer\/CharBufferAsCharSequenceTest.java","additions":92,"deletions":21,"binary":false,"changes":113,"status":"modified"}]}