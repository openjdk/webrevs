{"files":[{"patch":"@@ -44,1 +44,1 @@\n- * @bug 8343110 8361299\n+ * @bug 8343110 8361299 8364345\n@@ -48,1 +48,1 @@\n- * @summary tests the CharBuffer implementations behaving as CharSequence in various states (position, limit, offset)\n+ * @summary Tests CharBuffer implementations of CharSequence\n@@ -64,0 +64,4 @@\n+    \/**\n+     * Randomly adjusts the position and limit such that the position will be in the\n+     * first 1\/4th and the limit in the last half.\n+     *\/\n@@ -66,2 +70,2 @@\n-        int start = RAND.nextInt(mid - 3); \/\/ from 0 to mid\n-        int end = RAND.nextInt(mid + 3, cb.capacity()); \/\/ from mid to capacity\n+        int start = RAND.nextInt(mid >> 1); \/\/ from 0 to 1\/4\n+        int end = RAND.nextInt(mid + 1, cb.capacity()); \/\/ from mid to capacity\n@@ -73,0 +77,9 @@\n+    \/**\n+     * Generates random content to use for populating <i>cb<\/i> then calling through\n+     * to {@code addCases(String, char[], CharBuffer, List)}\n+     *\n+     * @param type  String description of the type of CharBuffer under test.\n+     * @param cb    CharBuffer instance to populate as base of creating cases.\n+     * @param cases The {@code List} to populate with the cases for use from\n+     *              {@link #charBufferArguments()}.\n+     *\/\n@@ -81,0 +94,12 @@\n+    \/**\n+     * Adds 4 cases to <i>cases<\/i>.\n+     * <ul>\n+     * <li>Full use of cb<\/li>.\n+     * <li>A duplicate of <i>cb<\/i> with a randomized position and limit. See\n+     * {@code randomizeRange(CharBuffer)}\n+     * <li>\n+     * <li>A {@link CharBuffer#slice() sliced} copy of randomized range.<\/li>\n+     * <li>A {@link CharBuffer#slice() sliced} copy of randomized range with a\n+     * randomized position and limit.<\/li>\n+     * <\/ul>\n+     *\/\n@@ -86,2 +111,4 @@\n-        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(), type + \"  at \" + rndRange.position() + \" through \" + rndRange.limit()));\n-        cases.add(Arguments.of(rndRange.slice(), buf, rndRange.position(), rndRange.limit(), type + \" sliced at \" + rndRange.position() + \" through \" + rndRange.limit()));\n+        cases.add(Arguments.of(rndRange, buf, rndRange.position(), rndRange.limit(),\n+                type + \" at \" + rndRange.position() + \" through \" + rndRange.limit()));\n+        cases.add(Arguments.of(rndRange.slice(), buf, rndRange.position(), rndRange.limit(),\n+                type + \" sliced at \" + rndRange.position() + \" through \" + rndRange.limit()));\n@@ -90,1 +117,6 @@\n-        cases.add(Arguments.of(rndSlicedRange, buf, rndRange.position() + rndSlicedRange.position(), rndRange.position() + rndSlicedRange.limit(), type + \" sliced at \" + rndRange.position() + \" with position \" + rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n+        cases.add(Arguments.of(rndSlicedRange,\n+                               buf,\n+                               rndRange.position() + rndSlicedRange.position(),\n+                               rndRange.position() + rndSlicedRange.limit(),\n+                               type + \" sliced at \" + rndRange.position() + \" with position \" +\n+                               rndSlicedRange.position() + \" and limit \" + rndSlicedRange.limit()));\n@@ -93,0 +125,33 @@\n+    \/**\n+     * Returns a {@code List} of {@link Arguments}, with each entry representing a\n+     * test case scenario.\n+     * <ul>\n+     *   <li>CharBuffer - the instance to be tested<\/li>\n+     *   <li>char[] - the data expected to be backing the current state of the CharBuffer<\/li>\n+     *   <li>int start - index (inclusive) into char[] where the CharBuffer should be positioned<\/li>\n+     *   <li>int stop - index (exclusive) into char[] where the CharBuffer should be limited<\/li>\n+     *   <li>String - description of the test scenario<\/li>\n+     * <\/ul>\n+     *\n+     * Generates the following sets of arguments\/test cases.\n+     * <ul>\n+     *   <li>See {@code populateAndAddCases(String, CharBuffer, List)} for the\n+     *       following types:\n+     *     <ul>\n+     *       <li>HeapCharBuffer<\/i>\n+     *       <li>HeapByteBuffer Big Endian<\/i>\n+     *       <li>HeapByteBuffer Little Endian<\/i>\n+     *       <li>DirectByteBuffer Big Endian<\/i>\n+     *       <li>DirectByteBuffer Little Endian<\/i>\n+     *     <\/ul>\n+     *   <\/li>\n+     *   <li>Randomly generated content into {@link CharBuffer#wrap(CharSequence)\n+     *       StringCharBuffer} - see {@code addCases(String, char[], CharBuffer, List)}.\n+     *     <ul>\n+     *       <li>StringCharBuffer wrapping a {@code CharBuffer} created from\n+     *           {@link CharBuffer#wrap(char[])}<\/li>\n+     *       <li>StringCharBuffer wrapping a {@code String}<\/li>\n+     *     <\/ul>\n+     *   <\/li>\n+     * <\/ul>\n+     *\/\n@@ -97,4 +162,8 @@\n-        populateAndAddCases(\"BEHeapByteBuffer\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"LEHeapByteBuffer\", ByteBuffer.allocate(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"BEDirectByteBuffer\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n-        populateAndAddCases(\"LEDirectByteBuffer\", ByteBuffer.allocateDirect(SIZE*2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer BE\",\n+                ByteBuffer.allocate(SIZE * 2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"HeapByteBuffer LE\",\n+                ByteBuffer.allocate(SIZE * 2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer BE\",\n+                ByteBuffer.allocateDirect(SIZE * 2).order(ByteOrder.BIG_ENDIAN).asCharBuffer(), args);\n+        populateAndAddCases(\"DirectByteBuffer LE\",\n+                ByteBuffer.allocateDirect(SIZE * 2).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer(), args);\n@@ -108,75 +177,0 @@\n-        \/\/ nothing magic about 1273, it is just larger than 1k and an odd number - eliminating any alignment assumptions\n-        char[] buf = new char[1273];\n-        for (int i = 0; i < buf.length; ++i) {\n-            buf[i] = (char) i;\n-        }\n-        String stringBuf = new String(buf);\n-\n-        \/\/ nothing magic about 7, it is simply an odd number to advance - making sure no expectations of alignment\n-        \/\/ comparing to 29 results in 5 loops (0, 7, 14, 21, 28), giving decent coverage of offset and limits\n-        for (int i = 0; i < 29; i += 7) {\n-            CharBuffer buffer = CharBuffer.wrap(buf, i, buf.length - i);\n-            args.add(Arguments.of(buffer, buf, i, buf.length, \"HeapCharBuffer index \" + i + \" to end\"));\n-            args.add(Arguments.of(buffer.slice(), buf, i, buf.length, \"HeapCharBuffer slice \" + i + \" to end\"));\n-\n-            args.add(Arguments.of(CharBuffer.wrap(new String(buf, i, buf.length - i)), buf, i, buf.length,\n-                    \"StringCharBuffer index \" + i + \" to end\"));\n-            buffer = CharBuffer.wrap(stringBuf);\n-            buffer.position(i);\n-            args.add(Arguments.of(buffer.slice(), buf, i, buf.length, \"StringCharBuffer slice \" + i + \" to end\"));\n-\n-            CharBuffer lehbbAsCB = ByteBuffer.allocate(buf.length * 2)\n-                                             .order(ByteOrder.LITTLE_ENDIAN)\n-                                             .asCharBuffer()\n-                                             .put(buf)\n-                                             .position(i);\n-            args.add(Arguments.of(lehbbAsCB, buf, i, buf.length, \"LE HeapByteBuffer as CharBuffer index \" + i + \" to end\"));\n-\n-            CharBuffer behbdAsCB = ByteBuffer.allocateDirect(buf.length * 2)\n-                                             .order(ByteOrder.BIG_ENDIAN)\n-                                             .asCharBuffer()\n-                                             .put(buf)\n-                                             .position(i);\n-            args.add(Arguments.of(behbdAsCB, buf, i, buf.length,\n-                    \"BE DirectByteBuffer as CharBuffer index \" + i + \" to end\"));\n-\n-            if (i > 0) {\n-                buffer = CharBuffer.wrap(buf, 1, buf.length - 1).slice();\n-                buffer.position(i - 1);\n-                args.add(Arguments.of(buffer, buf, i, buf.length,\n-                        \"HeapCharBuffer slice\/offset 1 index \" + (i - 1) + \" to end\"));\n-\n-                int end = buf.length - i;\n-\n-                buffer = CharBuffer.wrap(buf, i, buf.length - (2 * i));\n-                args.add(Arguments.of(buffer, buf, i, end, \"HeapCharBuffer index \" + i + \" to \" + end));\n-                args.add(Arguments.of(buffer.slice(), buf, i, end, \"HeapCharBuffer slice \" + i + \" to \" + end));\n-\n-                args.add(Arguments.of(CharBuffer.wrap(new String(buf, i, buf.length - (2 * i))), buf, i, end,\n-                        \"StringCharBuffer index \" + i + \" to \" + end));\n-                buffer = CharBuffer.wrap(stringBuf);\n-                buffer.position(i);\n-                buffer.limit(end);\n-                args.add(Arguments.of(buffer.slice(), buf, i, end, \"StringCharBuffer slice \" + i + \" to \" + end));\n-\n-                CharBuffer behbbAsCB = ByteBuffer.allocate(buf.length * 2)\n-                                                 .order(ByteOrder.BIG_ENDIAN)\n-                                                 .asCharBuffer()\n-                                                 .put(buf)\n-                                                 .position(1)\n-                                                 .slice()\n-                                                 .position(i - 1)\n-                                                 .limit(end - 1);\n-                args.add(Arguments.of(behbbAsCB, buf, i, buf.length - i, \"BE HeapByteBuffer as CharBuffer index \" + i + \" to \" + end));\n-\n-                CharBuffer ledbbAsCB = ByteBuffer.allocateDirect(buf.length * 2)\n-                                                 .order(ByteOrder.LITTLE_ENDIAN)\n-                                                 .asCharBuffer()\n-                                                 .put(buf)\n-                                                 .position(1)\n-                                                 .slice()\n-                                                 .position(i - 1)\n-                                                 .limit(end - 1);\n-                args.add(Arguments.of(ledbbAsCB, buf, i, buf.length - i, \"LE DirectByteBuffer as CharBuffer index \" + i + \" to \" + end));\n-            }\n-        }\n@@ -227,1 +221,1 @@\n-    void testGetCharsNegativeSourceBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeSrcBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -234,1 +228,1 @@\n-    void testGetCharsNegativeSourceEnd(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeSrcEnd(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -241,1 +235,1 @@\n-    void testGetCharsSourceEndBeforeBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsSrcEndBeforeBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -248,1 +242,1 @@\n-    void testGetCharsNegativeDestBeg(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsNegativeDstBegin(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -255,1 +249,1 @@\n-    void testGetCharsDestBegOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsDstBeginOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n@@ -262,1 +256,1 @@\n-    void testGetCharsDestLengthOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n+    void testGetCharsDstLengthOOB(CharSequence actual, char[] expected, int start, int stop, String description) {\n","filename":"test\/jdk\/java\/nio\/Buffer\/CharBufferAsCharSequenceTest.java","additions":86,"deletions":92,"binary":false,"changes":178,"status":"modified"}]}