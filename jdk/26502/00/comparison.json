{"files":[{"patch":"@@ -1744,4 +1744,7 @@\n-\n-  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false)) {\n-    log_warning(gc)(\"Could not commit native memory for auxiliary marking bitmap for heap iteration\");\n-    return false;\n+  if (!_aux_bitmap_region_special) {\n+    bool success = os::commit_memory((char *) _aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false);\n+    if (!success) {\n+      log_warning(gc)(\"Auxiliary marking bitmap commit failed: \" PTR_FORMAT \" (%zu bytes)\",\n+                      p2i(_aux_bitmap_region.start()), _aux_bitmap_region.byte_size());\n+      return false;\n+    }\n@@ -1749,1 +1752,0 @@\n-  \/\/ Reset bitmap\n@@ -1765,2 +1767,7 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n-    log_warning(gc)(\"Could not uncommit native memory for auxiliary marking bitmap for heap iteration\");\n+  if (!_aux_bitmap_region_special) {\n+    bool success = os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size());\n+    if (!success) {\n+      log_warning(gc)(\"Auxiliary marking bitmap uncommit failed: \" PTR_FORMAT \" (%zu bytes)\",\n+                      p2i(_aux_bitmap_region.start()), _aux_bitmap_region.byte_size());\n+      assert(false, \"Auxiliary marking bitmap uncommit should always succeed\");\n+    }\n@@ -2558,1 +2565,1 @@\n-bool ShenandoahHeap::commit_bitmap_slice(ShenandoahHeapRegion* r) {\n+void ShenandoahHeap::commit_bitmap_slice(ShenandoahHeapRegion* r) {\n@@ -2560,5 +2567,1 @@\n-\n-  \/\/ Bitmaps in special regions do not need commits\n-  if (_bitmap_region_special) {\n-    return true;\n-  }\n+  assert(!is_bitmap_region_special(), \"Not for special memory\");\n@@ -2569,1 +2572,1 @@\n-    return true;\n+    return;\n@@ -2578,3 +2581,1 @@\n-  if (!os::commit_memory(start, len, false)) {\n-    return false;\n-  }\n+  os::commit_memory_or_exit(start, len, false, \"Unable to commit bitmap slice\");\n@@ -2585,2 +2586,0 @@\n-\n-  return true;\n@@ -2589,1 +2588,1 @@\n-bool ShenandoahHeap::uncommit_bitmap_slice(ShenandoahHeapRegion *r) {\n+void ShenandoahHeap::uncommit_bitmap_slice(ShenandoahHeapRegion *r) {\n@@ -2591,5 +2590,1 @@\n-\n-  \/\/ Bitmaps in special regions do not need uncommits\n-  if (_bitmap_region_special) {\n-    return true;\n-  }\n+  assert(!is_bitmap_region_special(), \"Not for special memory\");\n@@ -2600,1 +2595,1 @@\n-    return true;\n+    return;\n@@ -2607,2 +2602,6 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len)) {\n-    return false;\n+\n+  char* addr = (char*) _bitmap_region.start() + off;\n+  bool success = os::uncommit_memory(addr, len);\n+  if (!success) {\n+    log_warning(gc)(\"Bitmap slice uncommit failed: \" PTR_FORMAT \" (%zu bytes)\", p2i(addr), len);\n+    assert(false, \"Bitmap slice uncommit should always succeed\");\n@@ -2610,1 +2609,0 @@\n-  return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":27,"deletions":29,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -760,2 +760,3 @@\n-  bool commit_bitmap_slice(ShenandoahHeapRegion *r);\n-  bool uncommit_bitmap_slice(ShenandoahHeapRegion *r);\n+  void commit_bitmap_slice(ShenandoahHeapRegion *r);\n+  void uncommit_bitmap_slice(ShenandoahHeapRegion *r);\n+  bool is_bitmap_region_special() { return _bitmap_region_special; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -807,2 +807,2 @@\n-  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, false)) {\n-    report_java_out_of_memory(\"Unable to commit region\");\n+  if (!heap->is_heap_region_special()) {\n+    os::commit_memory_or_exit((char*) bottom(), RegionSizeBytes, false, \"Unable to commit region\");\n@@ -810,2 +810,2 @@\n-  if (!heap->commit_bitmap_slice(this)) {\n-    report_java_out_of_memory(\"Unable to commit bitmaps for region\");\n+  if (!heap->is_bitmap_region_special()) {\n+    heap->commit_bitmap_slice(this);\n@@ -816,0 +816,3 @@\n+  if (ZapUnusedHeapArea) {\n+    SpaceMangler::mangle_region(MemRegion(bottom(), end()));\n+  }\n@@ -821,2 +824,6 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes)) {\n-    report_java_out_of_memory(\"Unable to uncommit region\");\n+  if (!heap->is_heap_region_special()) {\n+    bool success = os::uncommit_memory((char *) bottom(), RegionSizeBytes);\n+    if (!success) {\n+      log_warning(gc)(\"Region uncommit failed: \" PTR_FORMAT \" (%zu bytes)\", p2i(bottom()), RegionSizeBytes);\n+      assert(false, \"Region uncommit should always succeed\");\n+    }\n@@ -824,2 +831,2 @@\n-  if (!heap->uncommit_bitmap_slice(this)) {\n-    report_java_out_of_memory(\"Unable to uncommit bitmaps for region\");\n+  if (!heap->is_bitmap_region_special()) {\n+    heap->uncommit_bitmap_slice(this);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"}]}