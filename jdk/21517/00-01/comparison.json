{"files":[{"patch":"@@ -935,1 +935,1 @@\n-  \/\/ we can technically use STW closure here, as long as it only updates\n+  \/\/ we can use non-concurrent closure here, as long as it only updates\n@@ -937,3 +937,1 @@\n-  \/\/ For extra safety, and to avoid future accidents when\/if that condition\n-  \/\/ would not hold true, we use concurrent closure instead.\n-  ShenandoahConcUpdateRefsClosure _cl;\n+  ShenandoahNonConcUpdateRefsClosure _cl;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    ShenandoahSTWUpdateRefsClosure cl;\n+    ShenandoahNonConcUpdateRefsClosure cl;\n@@ -73,1 +73,1 @@\n-      _root_updater->roots_do<ShenandoahForwardedIsAliveClosure, ShenandoahSTWUpdateRefsClosure>(worker_id, &is_alive, &cl);\n+      _root_updater->roots_do<ShenandoahForwardedIsAliveClosure, ShenandoahNonConcUpdateRefsClosure>(worker_id, &is_alive, &cl);\n@@ -76,1 +76,1 @@\n-      _root_updater->roots_do<AlwaysTrueClosure, ShenandoahSTWUpdateRefsClosure>(worker_id, &always_true, &cl);\n+      _root_updater->roots_do<AlwaysTrueClosure, ShenandoahNonConcUpdateRefsClosure>(worker_id, &always_true, &cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGC.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2015,2 +2015,2 @@\n-    ShenandoahSTWUpdateRefsClosure keep_alive;\n-    ShenandoahParallelWeakRootsCleaningTask<ShenandoahForwardedIsAliveClosure, ShenandoahSTWUpdateRefsClosure>\n+    ShenandoahNonConcUpdateRefsClosure keep_alive;\n+    ShenandoahParallelWeakRootsCleaningTask<ShenandoahForwardedIsAliveClosure, ShenandoahNonConcUpdateRefsClosure>\n@@ -2200,1 +2200,1 @@\n-      do_work<ShenandoahSTWUpdateRefsClosure>(worker_id);\n+      do_work<ShenandoahNonConcUpdateRefsClosure>(worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -663,1 +663,1 @@\n-  inline void update_with_forwarded(T* p);\n+  inline void non_conc_update_with_forwarded(T* p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-inline void ShenandoahHeap::update_with_forwarded(T* p) {\n+inline void ShenandoahHeap::non_conc_update_with_forwarded(T* p) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-\n@@ -106,1 +105,1 @@\n-class ShenandoahSTWUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n+class ShenandoahNonConcUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n@@ -112,3 +111,1 @@\n-  ShenandoahSTWUpdateRefsClosure() : ShenandoahUpdateRefsSuperClosure() {\n-    assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"Must only be used at safepoints\");\n-  }\n+  ShenandoahNonConcUpdateRefsClosure() : ShenandoahUpdateRefsSuperClosure() {}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  _heap->update_with_forwarded(p);\n+  _heap->non_conc_update_with_forwarded(p);\n@@ -49,2 +49,2 @@\n-inline void ShenandoahSTWUpdateRefsClosure::work(T* p) {\n-  _heap->update_with_forwarded(p);\n+inline void ShenandoahNonConcUpdateRefsClosure::work(T* p) {\n+  _heap->non_conc_update_with_forwarded(p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}