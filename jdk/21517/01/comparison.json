{"files":[{"patch":"@@ -80,12 +80,0 @@\n-class ShenandoahUpdateRefsClosure: public ShenandoahOopClosureBase {\n-private:\n-  ShenandoahHeap* _heap;\n-public:\n-  inline ShenandoahUpdateRefsClosure();\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-private:\n-  template <class T>\n-  inline void do_oop_work(T* p);\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -100,12 +100,0 @@\n-ShenandoahUpdateRefsClosure::ShenandoahUpdateRefsClosure() :\n-  _heap(ShenandoahHeap::heap()) {\n-}\n-\n-template <class T>\n-void ShenandoahUpdateRefsClosure::do_oop_work(T* p) {\n-  _heap->update_with_forwarded(p);\n-}\n-\n-void ShenandoahUpdateRefsClosure::do_oop(oop* p)       { do_oop_work(p); }\n-void ShenandoahUpdateRefsClosure::do_oop(narrowOop* p) { do_oop_work(p); }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -934,1 +934,4 @@\n-  ShenandoahUpdateRefsClosure _cl;\n+  \/\/ This closure runs when thread is stopped for handshake, which means\n+  \/\/ we can use non-concurrent closure here, as long as it only updates\n+  \/\/ locations modified by the thread itself, i.e. stack locations.\n+  ShenandoahNonConcUpdateRefsClosure _cl;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n@@ -69,1 +70,1 @@\n-    ShenandoahUpdateRefsClosure cl;\n+    ShenandoahNonConcUpdateRefsClosure cl;\n@@ -72,1 +73,1 @@\n-      _root_updater->roots_do<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>(worker_id, &is_alive, &cl);\n+      _root_updater->roots_do<ShenandoahForwardedIsAliveClosure, ShenandoahNonConcUpdateRefsClosure>(worker_id, &is_alive, &cl);\n@@ -74,2 +75,2 @@\n-      AlwaysTrueClosure always_true;;\n-      _root_updater->roots_do<AlwaysTrueClosure, ShenandoahUpdateRefsClosure>(worker_id, &always_true, &cl);\n+      AlwaysTrueClosure always_true;\n+      _root_updater->roots_do<AlwaysTrueClosure, ShenandoahNonConcUpdateRefsClosure>(worker_id, &always_true, &cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGC.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2015,2 +2015,2 @@\n-    ShenandoahUpdateRefsClosure keep_alive;\n-    ShenandoahParallelWeakRootsCleaningTask<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>\n+    ShenandoahNonConcUpdateRefsClosure keep_alive;\n+    ShenandoahParallelWeakRootsCleaningTask<ShenandoahForwardedIsAliveClosure, ShenandoahNonConcUpdateRefsClosure>\n@@ -2200,1 +2200,1 @@\n-      do_work<ShenandoahSTWUpdateRefsClosure>(worker_id);\n+      do_work<ShenandoahNonConcUpdateRefsClosure>(worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -663,1 +663,1 @@\n-  inline void update_with_forwarded(T* p);\n+  inline void non_conc_update_with_forwarded(T* p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-inline void ShenandoahHeap::update_with_forwarded(T* p) {\n+inline void ShenandoahHeap::non_conc_update_with_forwarded(T* p) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-\n@@ -106,1 +105,1 @@\n-class ShenandoahSTWUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n+class ShenandoahNonConcUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n@@ -112,3 +111,1 @@\n-  ShenandoahSTWUpdateRefsClosure() : ShenandoahUpdateRefsSuperClosure() {\n-    assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"Must only be used at safepoints\");\n-  }\n+  ShenandoahNonConcUpdateRefsClosure() : ShenandoahUpdateRefsSuperClosure() {}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  _heap->update_with_forwarded(p);\n+  _heap->non_conc_update_with_forwarded(p);\n@@ -49,2 +49,2 @@\n-inline void ShenandoahSTWUpdateRefsClosure::work(T* p) {\n-  _heap->update_with_forwarded(p);\n+inline void ShenandoahNonConcUpdateRefsClosure::work(T* p) {\n+  _heap->non_conc_update_with_forwarded(p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}