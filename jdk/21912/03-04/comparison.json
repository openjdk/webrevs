{"files":[{"patch":"@@ -241,3 +241,6 @@\n- * caller.  This technique reduces heap memory use, but it prevents the\n- * implementation class from unloading when the caller is a {@linkplain\n- * MethodHandles.Lookup.ClassOption#STRONG hidden class} and is unloaded.\n+ * caller, like classes and interfaces in Java source code.  This technique\n+ * reduces heap memory use, but as a consequence, the implementation classes can\n+ * be unloaded only if the caller class can be unloaded.  In particular, if the\n+ * caller is a {@linkplain MethodHandles.Lookup.ClassOption#STRONG weak hidden\n+ * class}, the implementation class, a strong hidden class, may not be unloaded\n+ * even if the caller may be unloaded.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}