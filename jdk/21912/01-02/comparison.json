{"files":[{"patch":"@@ -210,13 +210,0 @@\n- * <p>Uses besides evaluation of lambda expressions and method references are\n- * unintended.  These linkage methods may change their unspecified behaviors at\n- * any time to better suit the Java language features, which may impact\n- * unintended uses.  For example, classes and interfaces in Java source code\n- * are all strongly reachable from their defining loaders (JLS {@jls 12.7}).\n- * Thus, the class implementing the \"function objects\" returned by these methods\n- * may be similarly strongly reachable from the defining class loader of the\n- * caller of these methods, because these objects are logically a part of the\n- * caller class or interface.  These methods do not have to consider the scenario\n- * where the caller is {@linkplain MethodHandles.Lookup#defineHiddenClass not\n- * strongly reachable} from its defining class loader, and such use cases may\n- * lead to resource leaks.\n- *\n@@ -245,0 +232,14 @@\n+ * <p>Uses besides evaluation of lambda expressions and method references are\n+ * unintended.  These linkage methods may change their unspecified behaviors at\n+ * any time to better suit the Java language features they were designed to\n+ * support, and such changes may impact unintended uses.  Unintended uses of\n+ * these linkage methods may lead to resource leaks, or other unspecified\n+ * negative effects.\n+ *\n+ * @implNote In the reference implementation, the classes implementing the created\n+ * function objects are strongly reachable from the defining class loader of the\n+ * caller.  This technique reduces heap memory use, but it prevents the\n+ * implementation class from unloading when the caller is a {@linkplain\n+ * MethodHandles.Lookup.ClassOption#STRONG hidden class} and is unloaded, or when\n+ * the returned call site is no longer strongly reachable.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}