{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.Serializable;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.IntSupplier;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @bug 8343064\n+ * @summary Test about when lambda caller\/target class is a hidden class\n+ * @run junit LambdaHiddenCaller\n+ *\/\n+public class LambdaHiddenCaller {\n+    static Hooks hiddenCaller;\n+\n+    @BeforeAll\n+    static void setup() throws Throwable {\n+        byte[] bytes;\n+        try (var in = LambdaHiddenCaller.class.getResourceAsStream(\"HiddenHooks.class\")) {\n+            bytes = in.readAllBytes();\n+        }\n+        var hiddenClassLookup = MethodHandles.lookup().defineHiddenClass(bytes, true);\n+        hiddenCaller = (Hooks) hiddenClassLookup.findConstructor(hiddenClassLookup.lookupClass(), MethodType.methodType(void.class))\n+                .asType(MethodType.methodType(Hooks.class)).invokeExact();\n+    }\n+\n+    @Test\n+    void testStaticMethod() {\n+        var is = hiddenCaller.callStaticMethodLambda();\n+        assertEquals(42, is.getAsInt());\n+    }\n+\n+    @Test\n+    void testSerializableLambda() {\n+        var is = hiddenCaller.callSerializableLambda();\n+        assertEquals(42, is.getAsInt());\n+        assertTrue(Serializable.class.isAssignableFrom(is.getClass()));\n+        \/\/ We do not guarantee serialization functionalities yet\n+    }\n+}\n+\n+\/**\n+ * Hooks to call hidden class methods easily.\n+ *\/\n+interface Hooks {\n+    IntSupplier callStaticMethodLambda();\n+\n+    IntSupplier callSerializableLambda();\n+}\n+\n+class HiddenHooks implements Hooks {\n+    private static int compute() {\n+        return 42;\n+    }\n+\n+    @Override\n+    public IntSupplier callStaticMethodLambda() {\n+        return HiddenHooks::compute;\n+    }\n+\n+    @Override\n+    public IntSupplier callSerializableLambda() {\n+        return (IntSupplier & Serializable) HiddenHooks::compute;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaHiddenCaller.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}