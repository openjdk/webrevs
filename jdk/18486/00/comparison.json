{"files":[{"patch":"@@ -72,0 +72,1 @@\n+    LIBJPEG_LIBS=\"-ljpeg\"\n@@ -77,0 +78,1 @@\n+  AC_SUBST(LIBJPEG_LIBS)\n@@ -105,0 +107,1 @@\n+    GIFLIB_LIBS=-lgif\n@@ -110,0 +113,1 @@\n+  AC_SUBST(GIFLIB_LIBS)\n","filename":"make\/autoconf\/lib-bundled.m4","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -798,0 +798,1 @@\n+LIBJPEG_LIBS := @LIBJPEG_LIBS@\n@@ -799,0 +800,1 @@\n+GIFLIB_LIBS := @GIFLIB_LIBS@\n","filename":"make\/autoconf\/spec.gmk.template","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,0 @@\n-################################################################################\n-# Create the libjsound library\n-\n@@ -44,0 +41,3 @@\n+  ##############################################################################\n+  # Build libjsound\n+  ##############################################################################\n@@ -67,1 +67,2 @@\n-      LIBS_unix := -ljava -ljvm, \\\n+      JDK_LIBS_unix := -ljava -ljvm, \\\n+      JDK_LIBS_windows := $(WIN_JAVA_LIB), \\\n@@ -69,4 +70,8 @@\n-      LIBS_macosx := -framework CoreAudio -framework CoreFoundation \\\n-          -framework CoreServices -framework AudioUnit \\\n-          -framework CoreMIDI -framework AudioToolbox, \\\n-      LIBS_windows := $(WIN_JAVA_LIB) advapi32.lib dsound.lib winmm.lib user32.lib ole32.lib, \\\n+      LIBS_macosx := \\\n+          -framework AudioToolbox \\\n+          -framework AudioUnit \\\n+          -framework CoreAudio \\\n+          -framework CoreFoundation \\\n+          -framework CoreMIDI \\\n+          -framework CoreServices, \\\n+      LIBS_windows := advapi32.lib dsound.lib ole32.lib user32.lib winmm.lib, \\\n@@ -78,1 +83,0 @@\n-\n@@ -81,3 +85,0 @@\n-################################################################################\n-# Create the macosx specific osxapp and osx libraries\n-\n@@ -85,0 +86,3 @@\n+  ##############################################################################\n+  # Build libosxapp\n+  ##############################################################################\n@@ -89,4 +93,6 @@\n-      DISABLED_WARNINGS_clang_NSApplicationAWT.m := deprecated-declarations format-nonliteral, \\\n-      DISABLED_WARNINGS_clang_QueuingApplicationDelegate.m := objc-method-access, \\\n-      LIBS := \\\n-          -ljava \\\n+      DISABLED_WARNINGS_clang_NSApplicationAWT.m := deprecated-declarations \\\n+          format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_QueuingApplicationDelegate.m := \\\n+          objc-method-access, \\\n+      JDK_LIBS_macosx := -ljava, \\\n+      LIBS_macosx := \\\n@@ -98,1 +104,0 @@\n-          -framework Security \\\n@@ -100,0 +105,1 @@\n+          -framework IOSurface \\\n@@ -102,2 +108,2 @@\n-          -framework IOSurface \\\n-          -framework QuartzCore, \\\n+          -framework QuartzCore \\\n+          -framework Security, \\\n@@ -110,0 +116,2 @@\n+  ##############################################################################\n+  # Build libosx\n@@ -118,3 +126,2 @@\n-      LIBS := \\\n-          -losxapp \\\n-          -framework Cocoa \\\n+      JDK_LIBS_macosx := $(JDKLIB_LIBS) -losxapp, \\\n+      LIBS_macosx := \\\n@@ -122,0 +129,1 @@\n+          -framework Cocoa \\\n@@ -123,2 +131,1 @@\n-          -framework SystemConfiguration \\\n-          $(JDKLIB_LIBS), \\\n+          -framework SystemConfiguration, \\\n@@ -132,1 +139,0 @@\n-\n","filename":"make\/modules\/java.desktop\/Lib.gmk","additions":31,"deletions":25,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-\n-BUILD_LIBMLIB_CFLAGS := -D__USE_J2D_NAMES -D__MEDIALIB_OLD_NAMES -DMLIB_NO_LIBSUNMATH\n+## Build libmlib_image\n+################################################################################\n@@ -42,1 +42,1 @@\n-  BUILD_LIBMLIB_CFLAGS += -DMLIB_OS64BIT\n+  LIBMLIB_IMAGE_CFLAGS := -DMLIB_OS64BIT\n@@ -49,1 +49,0 @@\n-    EXCLUDE_SRC_PATTERNS := $(BUILD_LIBMLIB_EXCLUDE_SRC_PATTERNS), \\\n@@ -51,1 +50,2 @@\n-    CFLAGS := $(BUILD_LIBMLIB_CFLAGS), \\\n+    CFLAGS := -D__USE_J2D_NAMES -D__MEDIALIB_OLD_NAMES -DMLIB_NO_LIBSUNMATH \\\n+        $(LIBMLIB_IMAGE_CFLAGS), \\\n@@ -53,2 +53,2 @@\n-    LIBS := $(JDKLIB_LIBS), \\\n-    LIBS_unix := $(LIBM) $(LIBDL), \\\n+    JDK_LIBS := $(JDKLIB_LIBS), \\\n+    LIBS_unix := $(LIBDL) $(LIBM), \\\n@@ -61,0 +61,2 @@\n+################################################################################\n+## Build libawt\n@@ -78,1 +80,1 @@\n-  LIBAWT_EXFILES += awt_Font.c CUPSfuncs.c fontpath.c X11Color.c\n+  LIBAWT_EXCLUDE_FILES += awt_Font.c CUPSfuncs.c fontpath.c X11Color.c\n@@ -82,1 +84,1 @@\n-  LIBAWT_EXFILES += initIDs.c awt\/image\/cvutils\/img_colors.c\n+  LIBAWT_EXCLUDE_FILES += initIDs.c img_colors.c\n@@ -86,4 +88,1 @@\n-  LIBAWT_EXFILES += \\\n-      java2d\/d3d\/D3DShaderGen.c \\\n-      awt\/image\/cvutils\/img_colors.c \\\n-      #\n+  LIBAWT_EXCLUDE_FILES += D3DShaderGen.c img_colors.c\n@@ -106,3 +105,1 @@\n-LIBAWT_CFLAGS += -D__MEDIALIB_OLD_NAMES -D__USE_J2D_NAMES $(X_CFLAGS)\n-\n-LIBAWT_CFLAGS += -DMLIB_NO_LIBSUNMATH\n+LIBAWT_CFLAGS := -D__MEDIALIB_OLD_NAMES -D__USE_J2D_NAMES -DMLIB_NO_LIBSUNMATH\n@@ -117,6 +114,2 @@\n-  LIBAWT_VERSIONINFO_RESOURCE := $(TOPDIR)\/src\/$(MODULE)\/windows\/native\/libawt\/windows\/awt.rc\n-endif\n-\n-ifeq ($(TOOLCHAIN_TYPE), gcc)\n-  # This option improves performance of MaskFill in Java2D by 20% for some gcc\n-  LIBAWT_CFLAGS += -fgcse-after-reload\n+  LIBAWT_VERSIONINFO_RESOURCE := \\\n+      $(TOPDIR)\/src\/$(MODULE)\/windows\/native\/libawt\/windows\/awt.rc\n@@ -125,0 +118,2 @@\n+# -fgcse-after-reload improves performance of MaskFill in Java2D by 20% for\n+# some gcc\n@@ -128,2 +123,1 @@\n-    EXCLUDES := $(LIBAWT_EXCLUDES), \\\n-    EXCLUDE_FILES := $(LIBAWT_EXFILES), \\\n+    EXCLUDE_FILES := $(LIBAWT_EXCLUDE_FILES), \\\n@@ -131,2 +125,3 @@\n-    CFLAGS := $(LIBAWT_CFLAGS), \\\n-    CXXFLAGS := $(LIBAWT_CFLAGS), \\\n+    CFLAGS := $(X_CFLAGS) $(LIBAWT_CFLAGS), \\\n+    CFLAGS_gcc := -fgcse-after-reload, \\\n+    CXXFLAGS := $(LIBAWT_CFLAGS) $(X_CFLAGS), \\\n@@ -147,7 +142,9 @@\n-    LDFLAGS_windows := -delayload:user32.dll -delayload:gdi32.dll \\\n-        -delayload:shell32.dll -delayload:winmm.dll \\\n-        -delayload:winspool.drv -delayload:imm32.dll \\\n-        -delayload:ole32.dll -delayload:comdlg32.dll \\\n-        -delayload:comctl32.dll -delayload:shlwapi.dll, \\\n-    LIBS_unix := -ljvm -ljava $(LIBM), \\\n-    LIBS_linux :=  $(LIBDL), \\\n+    LDFLAGS_windows := -delayload:comctl32.dll -delayload:comdlg32.dll \\\n+        -delayload:gdi32.dll -delayload:imm32.dll -delayload:ole32.dll \\\n+        -delayload:shell32.dll -delayload:shlwapi.dll -delayload:user32.dll \\\n+        -delayload:winmm.dll -delayload:winspool.drv, \\\n+    JDK_LIBS_unix := -ljava -ljvm, \\\n+    JDK_LIBS_macosx := -lmlib_image, \\\n+    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    LIBS_unix := $(LIBM), \\\n+    LIBS_linux := $(LIBDL), \\\n@@ -155,1 +152,3 @@\n-    LIBS_macosx := -lmlib_image \\\n+    LIBS_macosx := \\\n+        -framework ApplicationServices \\\n+        -framework AudioToolbox \\\n@@ -157,2 +156,0 @@\n-        -framework OpenGL \\\n-        -framework Metal \\\n@@ -160,6 +157,5 @@\n-        -framework ApplicationServices \\\n-        -framework AudioToolbox, \\\n-    LIBS_windows := kernel32.lib user32.lib gdi32.lib winspool.lib \\\n-        imm32.lib ole32.lib uuid.lib shell32.lib \\\n-        comdlg32.lib winmm.lib comctl32.lib shlwapi.lib \\\n-        delayimp.lib jvm.lib $(WIN_JAVA_LIB) advapi32.lib, \\\n+        -framework Metal \\\n+        -framework OpenGL, \\\n+    LIBS_windows := advapi32.lib comctl32.lib comdlg32.lib delayimp.lib \\\n+        gdi32.lib imm32.lib kernel32.lib ole32.lib shell32.lib shlwapi.lib \\\n+        user32.lib uuid.lib winmm.lib winspool.lib, \\\n@@ -178,4 +174,4 @@\n-################################################################################\n-\n-ifeq ($(call isTargetOs, windows macosx), false)\n-  ifeq ($(ENABLE_HEADLESS_ONLY), false)\n+ifeq ($(call isTargetOs, windows macosx)+$(ENABLE_HEADLESS_ONLY), false+false)\n+  ##############################################################################\n+  ## Build libawt_xawt\n+  ##############################################################################\n@@ -183,7 +179,5 @@\n-    LIBAWT_XAWT_EXTRA_SRC := \\\n-        common\/awt \\\n-        common\/java2d \\\n-        common\/font \\\n-        #\n-\n-    LIBAWT_XAWT_EXCLUDES := medialib debug\n+  LIBAWT_XAWT_EXTRA_SRC := \\\n+      common\/awt \\\n+      common\/java2d \\\n+      common\/font \\\n+      #\n@@ -191,2 +185,11 @@\n-    LIBPIPEWIRE_HEADER_DIRS := \\\n-        $(TOPDIR)\/src\/$(MODULE)\/unix\/native\/libpipewire\/include\n+  LIBAWT_XAWT_EXTRA_HEADER_DIRS := \\\n+      $(LIBAWT_DEFAULT_HEADER_DIRS) \\\n+      libawt_xawt\/awt \\\n+      include \\\n+      common\/awt\/debug \\\n+      common\/awt\/systemscale \\\n+      common\/font \\\n+      common\/java2d\/opengl \\\n+      common\/java2d\/x11 \\\n+      libpipewire\/include \\\n+      #\n@@ -194,19 +197,3 @@\n-    LIBAWT_XAWT_EXTRA_HEADER_DIRS := \\\n-        $(LIBAWT_DEFAULT_HEADER_DIRS) \\\n-        libawt_xawt\/awt \\\n-        include \\\n-        common\/awt\/debug \\\n-        common\/awt\/systemscale \\\n-        common\/font \\\n-        common\/java2d\/opengl \\\n-        common\/java2d\/x11 \\\n-        $(LIBPIPEWIRE_HEADER_DIRS)\n-\n-    LIBAWT_XAWT_CFLAGS += -DXAWT -DXAWT_HACK \\\n-        $(FONTCONFIG_CFLAGS) \\\n-        $(CUPS_CFLAGS)\n-\n-    ifeq ($(call isTargetOs, linux), true)\n-      ifeq ($(DISABLE_XRENDER), true)\n-        LIBAWT_XAWT_CFLAGS += -DDISABLE_XRENDER_BY_DEFAULT=true\n-      endif\n+  ifeq ($(call isTargetOs, linux), true)\n+    ifeq ($(DISABLE_XRENDER), true)\n+      LIBAWT_XAWT_CFLAGS += -DDISABLE_XRENDER_BY_DEFAULT=true\n@@ -214,0 +201,1 @@\n+  endif\n@@ -215,1 +203,7 @@\n-    LIBAWT_XAWT_LIBS := $(LIBM) -lawt -lXext -lX11 -lXrender $(LIBDL) -lXtst -lXi -ljava -ljvm\n+  # These are the object files provided by the awt native\n+  # library. Do not include these external (non-awt_xawt library)\n+  # objects in the static library. When statically linking the java\n+  # launcher with all JDK and VM static libraries, we use the\n+  # --whole-archive linker option. The duplicate objects in different\n+  # static libraries cause linking errors due to duplicate symbols.\n+  LIBAWT_XAWT_STATIC_EXCLUDE_OBJS := systemScale.o\n@@ -217,3 +211,50 @@\n-    ifeq ($(call isTargetOs, linux), true)\n-      LIBAWT_XAWT_LIBS += -lpthread\n-    endif\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBAWT_XAWT, \\\n+      NAME := awt_xawt, \\\n+      EXTRA_SRC := $(LIBAWT_XAWT_EXTRA_SRC), \\\n+      EXTRA_HEADER_DIRS := $(LIBAWT_XAWT_EXTRA_HEADER_DIRS), \\\n+      EXCLUDES := medialib debug, \\\n+      OPTIMIZATION := LOW, \\\n+      CFLAGS := -DXAWT -DXAWT_HACK $(LIBAWT_XAWT_CFLAGS) \\\n+          $(FONTCONFIG_CFLAGS) $(CUPS_CFLAGS) $(X_CFLAGS), \\\n+      DISABLED_WARNINGS_gcc := int-to-pointer-cast, \\\n+      DISABLED_WARNINGS_gcc_awt_Taskbar.c := parentheses, \\\n+      DISABLED_WARNINGS_gcc_GLXSurfaceData.c := unused-function, \\\n+      DISABLED_WARNINGS_gcc_gtk2_interface.c := parentheses type-limits, \\\n+      DISABLED_WARNINGS_gcc_gtk3_interface.c := parentheses type-limits \\\n+          unused-function, \\\n+      DISABLED_WARNINGS_gcc_OGLBufImgOps.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_gcc_OGLPaints.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_gcc_screencast_pipewire.c := undef, \\\n+      DISABLED_WARNINGS_gcc_screencast_portal.c := undef, \\\n+      DISABLED_WARNINGS_gcc_sun_awt_X11_GtkFileDialogPeer.c := parentheses, \\\n+      DISABLED_WARNINGS_gcc_X11SurfaceData.c := implicit-fallthrough \\\n+          pointer-to-int-cast, \\\n+      DISABLED_WARNINGS_gcc_XlibWrapper.c := type-limits pointer-to-int-cast, \\\n+      DISABLED_WARNINGS_gcc_XRBackendNative.c := maybe-uninitialized, \\\n+      DISABLED_WARNINGS_gcc_XToolkit.c := unused-result, \\\n+      DISABLED_WARNINGS_gcc_XWindow.c := unused-function, \\\n+      DISABLED_WARNINGS_clang_awt_Taskbar.c := parentheses, \\\n+      DISABLED_WARNINGS_clang_gtk2_interface.c := parentheses, \\\n+      DISABLED_WARNINGS_clang_gtk3_interface.c := parentheses, \\\n+      DISABLED_WARNINGS_clang_OGLBufImgOps.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_OGLPaints.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_screencast_pipewire.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_sun_awt_X11_GtkFileDialogPeer.c := parentheses, \\\n+      DISABLED_WARNINGS_clang_aix := deprecated-non-prototype, \\\n+      DISABLED_WARNINGS_clang_aix_awt_Taskbar.c := parentheses, \\\n+      DISABLED_WARNINGS_clang_aix_OGLPaints.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_aix_OGLBufImgOps.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_aix_gtk2_interface.c := parentheses \\\n+          logical-op-parentheses, \\\n+      DISABLED_WARNINGS_clang_aix_gtk3_interface.c := parentheses \\\n+          logical-op-parentheses, \\\n+      DISABLED_WARNINGS_clang_aix_sun_awt_X11_GtkFileDialogPeer.c := \\\n+          parentheses, \\\n+      DISABLED_WARNINGS_clang_aix_awt_InputMethod.c := sign-compare, \\\n+      LDFLAGS := -L$(INSTALL_LIBRARIES_HERE), \\\n+      JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n+      LIBS_unix := $(LIBDL) $(LIBM) $(X_LIBS) -lX11 -lXext -lXi -lXrender \\\n+          -lXtst, \\\n+      LIBS_linux := -lpthread, \\\n+      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_XAWT_STATIC_EXCLUDE_OBJS), \\\n+  ))\n@@ -221,55 +262,1 @@\n-    # These are the object files provided by the awt native\n-    # library. Do not include these external (non-awt_xawt library)\n-    # objects in the static library. When statically linking the java\n-    # launcher with all JDK and VM static libraries, we use the\n-    # --whole-archive linker option. The duplicate objects in different\n-    # static libraries cause linking errors due to duplicate symbols.\n-    LIBAWT_XAWT_STATIC_EXCLUDE_OBJS := systemScale.o\n-\n-    $(eval $(call SetupJdkLibrary, BUILD_LIBAWT_XAWT, \\\n-        NAME := awt_xawt, \\\n-        EXTRA_SRC := $(LIBAWT_XAWT_EXTRA_SRC), \\\n-        EXTRA_HEADER_DIRS := $(LIBAWT_XAWT_EXTRA_HEADER_DIRS), \\\n-        EXCLUDES := $(LIBAWT_XAWT_EXCLUDES), \\\n-        OPTIMIZATION := LOW, \\\n-        CFLAGS := $(LIBAWT_XAWT_CFLAGS) $(X_CFLAGS), \\\n-        DISABLED_WARNINGS_gcc := int-to-pointer-cast, \\\n-        DISABLED_WARNINGS_gcc_awt_Taskbar.c := parentheses, \\\n-        DISABLED_WARNINGS_gcc_GLXSurfaceData.c := unused-function, \\\n-        DISABLED_WARNINGS_gcc_gtk2_interface.c := parentheses type-limits, \\\n-        DISABLED_WARNINGS_gcc_gtk3_interface.c := parentheses type-limits unused-function, \\\n-        DISABLED_WARNINGS_gcc_OGLBufImgOps.c := format-nonliteral, \\\n-        DISABLED_WARNINGS_gcc_OGLPaints.c := format-nonliteral, \\\n-        DISABLED_WARNINGS_gcc_screencast_pipewire.c := undef, \\\n-        DISABLED_WARNINGS_gcc_screencast_portal.c := undef, \\\n-        DISABLED_WARNINGS_gcc_sun_awt_X11_GtkFileDialogPeer.c := parentheses, \\\n-        DISABLED_WARNINGS_gcc_X11SurfaceData.c := implicit-fallthrough pointer-to-int-cast, \\\n-        DISABLED_WARNINGS_gcc_XlibWrapper.c := type-limits pointer-to-int-cast, \\\n-        DISABLED_WARNINGS_gcc_XRBackendNative.c := maybe-uninitialized, \\\n-        DISABLED_WARNINGS_gcc_XToolkit.c := unused-result, \\\n-        DISABLED_WARNINGS_gcc_XWindow.c := unused-function, \\\n-        DISABLED_WARNINGS_clang_awt_Taskbar.c := parentheses, \\\n-        DISABLED_WARNINGS_clang_gtk2_interface.c := parentheses, \\\n-        DISABLED_WARNINGS_clang_gtk3_interface.c := parentheses, \\\n-        DISABLED_WARNINGS_clang_OGLBufImgOps.c := format-nonliteral, \\\n-        DISABLED_WARNINGS_clang_OGLPaints.c := format-nonliteral, \\\n-        DISABLED_WARNINGS_clang_screencast_pipewire.c := format-nonliteral, \\\n-        DISABLED_WARNINGS_clang_sun_awt_X11_GtkFileDialogPeer.c := parentheses, \\\n-        DISABLED_WARNINGS_clang_aix := deprecated-non-prototype, \\\n-        DISABLED_WARNINGS_clang_aix_awt_Taskbar.c := parentheses, \\\n-        DISABLED_WARNINGS_clang_aix_OGLPaints.c := format-nonliteral, \\\n-        DISABLED_WARNINGS_clang_aix_OGLBufImgOps.c := format-nonliteral, \\\n-        DISABLED_WARNINGS_clang_aix_gtk2_interface.c := parentheses logical-op-parentheses, \\\n-        DISABLED_WARNINGS_clang_aix_gtk3_interface.c := parentheses logical-op-parentheses, \\\n-        DISABLED_WARNINGS_clang_aix_sun_awt_X11_GtkFileDialogPeer.c := parentheses, \\\n-        DISABLED_WARNINGS_clang_aix_awt_InputMethod.c := sign-compare, \\\n-        LDFLAGS := -L$(INSTALL_LIBRARIES_HERE), \\\n-        LIBS := $(X_LIBS) $(LIBAWT_XAWT_LIBS), \\\n-        STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_XAWT_STATIC_EXCLUDE_OBJS), \\\n-    ))\n-\n-    $(BUILD_LIBAWT_XAWT): $(call FindLib, java.base, java)\n-\n-    $(BUILD_LIBAWT_XAWT): $(BUILD_LIBAWT)\n-\n-    TARGETS += $(BUILD_LIBAWT_XAWT)\n+  $(BUILD_LIBAWT_XAWT): $(call FindLib, java.base, java)\n@@ -277,1 +264,3 @@\n-  endif\n+  $(BUILD_LIBAWT_XAWT): $(BUILD_LIBAWT)\n+\n+  TARGETS += $(BUILD_LIBAWT_XAWT)\n@@ -281,3 +270,2 @@\n-\n-# The fast floor code loses precision.\n-LCMS_CFLAGS=-DCMS_DONT_USE_FAST_FLOOR -DCMS_NO_HALF_SUPPORT\n+## Build liblcms\n+################################################################################\n@@ -288,1 +276,1 @@\n-  BUILD_LIBLCMS_INCLUDE_FILES := LCMS.c\n+  LIBLCMS_INCLUDE_FILES := LCMS.c\n@@ -292,2 +280,2 @@\n-else\n-  BUILD_LIBLCMS_INCLUDE_FILES :=\n+  # FIXME: Keep old behavior and reset LCMS_CFLAGS. This is likely a bug.\n+  LCMS_CFLAGS :=\n@@ -296,5 +284,3 @@\n-ifeq ($(TOOLCHAIN_TYPE), clang)\n- ifeq ($(TOOLCHAIN_VERSION), 10.1)\n-   # Work around an optimizer bug seen with Xcode 10.1, but fixed by 10.3\n-   BUILD_LIBLCMS_cmsopt.c_CFLAGS := -O0\n- endif\n+ifeq ($(TOOLCHAIN_TYPE)+$(TOOLCHAIN_VERSION), clang+10.1)\n+  # Work around an optimizer bug seen with Xcode 10.1, but fixed by 10.3\n+  BUILD_LIBLCMS_cmsopt.c_CFLAGS := -O0\n@@ -303,0 +289,2 @@\n+# We use CMS_DONT_USE_FAST_FLOOR and CMS_NO_HALF_SUPPORT since the fast floor\n+# code loses precision.\n@@ -305,1 +293,1 @@\n-    INCLUDE_FILES := $(BUILD_LIBLCMS_INCLUDE_FILES), \\\n+    INCLUDE_FILES := $(LIBLCMS_INCLUDE_FILES), \\\n@@ -307,1 +295,1 @@\n-    CFLAGS := $(LCMS_CFLAGS), \\\n+    CFLAGS := -DCMS_DONT_USE_FAST_FLOOR -DCMS_NO_HALF_SUPPORT $(LCMS_CFLAGS), \\\n@@ -313,1 +301,2 @@\n-    DISABLED_WARNINGS_gcc := format-nonliteral type-limits stringop-truncation, \\\n+    DISABLED_WARNINGS_gcc := format-nonliteral type-limits \\\n+        stringop-truncation, \\\n@@ -316,2 +305,3 @@\n-    LIBS_unix := -lawt -ljvm -ljava $(LCMS_LIBS) $(LIBM), \\\n-    LIBS_windows := $(WIN_AWT_LIB) $(WIN_JAVA_LIB), \\\n+    JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n+    JDK_LIBS_windows := $(WIN_AWT_LIB) $(WIN_JAVA_LIB), \\\n+    LIBS_unix := $(LCMS_LIBS) $(LIBM), \\\n@@ -325,8 +315,2 @@\n-\n-# \"DISABLED_WARNINGS_gcc := clobbered\" rationale:\n-# Suppress gcc warnings like \"variable might be clobbered by 'longjmp'\n-# or 'vfork'\": this warning indicates that some variable is placed to\n-# a register by optimized compiler and it's value might be lost on longjmp().\n-# Recommended way to avoid such warning is to declare the variable as\n-# volatile to prevent the optimization. However, this approach does not\n-# work because we have to declare all variables as volatile in result.\n+## Build libjavajpeg\n+################################################################################\n@@ -335,2 +319,1 @@\n-  LIBJPEG_LIBS := -ljpeg\n-  BUILD_LIBJAVAJPEG_INCLUDE_FILES := \\\n+  LIBJAVAJPEG_INCLUDE_FILES := \\\n@@ -341,4 +324,1 @@\n-  LIBJPEG_HEADERS_FROM_SRC := false\n-else\n-  LIBJPEG_LIBS :=\n-  BUILD_LIBJAVAJPEG_INCLUDE_FILES :=\n+  LIBJAVAJPEG_HEADERS_FROM_SRC := false\n@@ -347,0 +327,7 @@\n+# \"DISABLED_WARNINGS_gcc := clobbered\" rationale:\n+# Suppress gcc warnings like \"variable might be clobbered by 'longjmp'\n+# or 'vfork'\": this warning indicates that some variable is placed to\n+# a register by optimized compiler and it's value might be lost on longjmp().\n+# Recommended way to avoid such warning is to declare the variable as\n+# volatile to prevent the optimization. However, this approach does not\n+# work because we have to declare all variables as volatile in result.\n@@ -349,1 +336,1 @@\n-    INCLUDE_FILES := $(BUILD_LIBJAVAJPEG_INCLUDE_FILES), \\\n+    INCLUDE_FILES := $(LIBJAVAJPEG_INCLUDE_FILES), \\\n@@ -351,1 +338,1 @@\n-    HEADERS_FROM_SRC := $(LIBJPEG_HEADERS_FROM_SRC), \\\n+    HEADERS_FROM_SRC := $(LIBJAVAJPEG_HEADERS_FROM_SRC), \\\n@@ -355,2 +342,3 @@\n-    LIBS := $(LIBJPEG_LIBS) $(JDKLIB_LIBS), \\\n-    LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    JDK_LIBS := $(JDKLIB_LIBS), \\\n+    JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+    LIBS := $(LIBJPEG_LIBS), \\\n@@ -363,1 +351,0 @@\n-################################################################################\n@@ -367,0 +354,3 @@\n+  ##############################################################################\n+  ## Build libawt_headless\n+  ##############################################################################\n@@ -374,2 +364,0 @@\n-  LIBAWT_HEADLESS_EXCLUDES := medialib\n-\n@@ -383,3 +371,0 @@\n-  LIBAWT_HEADLESS_CFLAGS := $(CUPS_CFLAGS) $(FONTCONFIG_CFLAGS) $(X_CFLAGS) \\\n-      -DHEADLESS=true\n-\n@@ -397,1 +382,1 @@\n-      EXCLUDES := $(LIBAWT_HEADLESS_EXCLUDES), \\\n+      EXCLUDES := medialib, \\\n@@ -399,1 +384,2 @@\n-      CFLAGS := $(LIBAWT_HEADLESS_CFLAGS), \\\n+      CFLAGS := -DHEADLESS=true $(CUPS_CFLAGS) $(FONTCONFIG_CFLAGS) \\\n+          $(X_CFLAGS), \\\n@@ -404,2 +390,2 @@\n-      LIBS_unix := -lawt -ljvm -ljava, \\\n-      LIBS_linux := $(LIBM) $(LIBDL), \\\n+      JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n+      LIBS_linux := $(LIBDL) $(LIBM), \\\n@@ -412,1 +398,0 @@\n-\n@@ -415,0 +400,2 @@\n+################################################################################\n+## Build libfreetype\n@@ -417,18 +404,2 @@\n-ifeq ($(FREETYPE_TO_USE), system)\n-  # For use by libfontmanager:\n-  LIBFREETYPE_CFLAGS := $(FREETYPE_CFLAGS)\n-  LIBFREETYPE_LIBS := $(FREETYPE_LIBS)\n-else\n-  BUILD_LIBFREETYPE_HEADER_DIRS := $(TOPDIR)\/src\/$(MODULE)\/share\/native\/libfreetype\/include\n-  BUILD_LIBFREETYPE_CFLAGS := -DFT2_BUILD_LIBRARY\n-\n-  # For use by libfontmanager:\n-  LIBFREETYPE_CFLAGS := -I$(BUILD_LIBFREETYPE_HEADER_DIRS)\n-  ifeq ($(call isTargetOs, windows), true)\n-    LIBFREETYPE_LIBS := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libfreetype\/freetype.lib\n-    # freetype now requires you to manually define this (see ftconfig.h)\n-    BUILD_LIBFREETYPE_CFLAGS += -DDLL_EXPORT\n-  else\n-    LIBFREETYPE_LIBS := -lfreetype\n-  endif\n-\n+ifeq ($(FREETYPE_TO_USE), bundled)\n+  # freetype requires you to manually define DLL_EXPORT for windows (see ftconfig.h)\n@@ -438,2 +409,3 @@\n-      CFLAGS := $(BUILD_LIBFREETYPE_CFLAGS), \\\n-      EXTRA_HEADER_DIRS := $(BUILD_LIBFREETYPE_HEADER_DIRS), \\\n+      CFLAGS := -DFT2_BUILD_LIBRARY, \\\n+      CFLAGS_windows := -DDLL_EXPORT, \\\n+      EXTRA_HEADER_DIRS := libfreetype\/include, \\\n@@ -447,2 +419,3 @@\n-###########################################################################\n-\n+################################################################################\n+## Build libfontmanager\n+################################################################################\n@@ -452,1 +425,1 @@\n-   BUILD_LIBFONTMANAGER_FONTLIB += $(HARFBUZZ_LIBS)\n+   LIBFONTMANAGER_LIBS += $(HARFBUZZ_LIBS)\n@@ -458,2 +431,2 @@\n-                        -DHAVE_SYSCONF -DHAVE_SYS_MMAN_H -DHAVE_UNISTD_H \\\n-                        -DHB_NO_PRAGMA_GCC_DIAGNOSTIC\n+        -DHAVE_SYSCONF -DHAVE_SYS_MMAN_H -DHAVE_UNISTD_H \\\n+        -DHB_NO_PRAGMA_GCC_DIAGNOSTIC\n@@ -466,6 +439,9 @@\n-   # hb-subset and hb-style APIs are not needed, excluded to cut on compilation time.\n-   LIBFONTMANAGER_EXCLUDE_FILES += hb-ft.cc hb-subset-cff-common.cc \\\n-       hb-subset-cff1.cc hb-subset-cff2.cc hb-subset-input.cc hb-subset-plan.cc \\\n-       hb-subset.cc hb-subset-instancer-solver.cc gsubgpos-context.cc hb-style.cc\n-\n-   # list of disabled warnings and the compilers for which it was specifically added.\n+   # hb-subset and hb-style APIs are not needed, excluded to cut on compilation\n+   # time.\n+   LIBFONTMANAGER_EXCLUDE_FILES += gsubgpos-context.cc hb-ft.cc hb-style.cc \\\n+      hb-subset-cff-common.cc hb-subset-cff1.cc hb-subset-cff2.cc \\\n+      hb-subset-input.cc hb-subset-instancer-solver.cc hb-subset-plan.cc \\\n+      hb-subset.cc\n+\n+   # list of disabled warnings and the compilers for which it was specifically\n+   # added.\n@@ -476,2 +452,2 @@\n-   HARFBUZZ_DISABLED_WARNINGS_gcc := missing-field-initializers strict-aliasing \\\n-       unused-result array-bounds parentheses\n+   HARFBUZZ_DISABLED_WARNINGS_gcc := missing-field-initializers \\\n+       strict-aliasing unused-result array-bounds parentheses\n@@ -481,1 +457,2 @@\n-   # calloc-transposed-args required for GCC 14 builds. (fixed upstream in Harfbuzz 032c931e1c0cfb20f18e5acb8ba005775242bd92)\n+   # calloc-transposed-args required for GCC 14 builds. (fixed upstream in\n+   #  Harfbuzz 032c931e1c0cfb20f18e5acb8ba005775242bd92)\n@@ -485,1 +462,2 @@\n-   HARFBUZZ_DISABLED_WARNINGS_clang := missing-field-initializers range-loop-analysis\n+   HARFBUZZ_DISABLED_WARNINGS_clang := missing-field-initializers \\\n+      range-loop-analysis\n@@ -489,1 +467,0 @@\n-\n@@ -502,2 +479,13 @@\n-LIBFONTMANAGER_CFLAGS += $(LIBFREETYPE_CFLAGS)\n-BUILD_LIBFONTMANAGER_FONTLIB +=  $(LIBFREETYPE_LIBS)\n+ifeq ($(FREETYPE_TO_USE), system)\n+  LIBFONTMANAGER_CFLAGS += $(FREETYPE_CFLAGS)\n+  LIBFONTMANAGER_LIBS += $(FREETYPE_LIBS)\n+else\n+  LIBFONTMANAGER_EXTRA_HEADER_DIRS += libfreetype\/include\n+\n+  ifeq ($(call isTargetOs, windows), true)\n+    LIBFONTMANAGER_JDK_LIBS += \\\n+        $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libfreetype\/freetype.lib\n+  else\n+    LIBFONTMANAGER_JDK_LIBS += -lfreetype\n+  endif\n+endif\n@@ -516,2 +504,1 @@\n-  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c \\\n-      X11TextRenderer.c\n+  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c X11TextRenderer.c\n@@ -520,4 +507,2 @@\n-  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c \\\n-      X11TextRenderer.c \\\n-      fontpath.c \\\n-      lcdglyph.c\n+  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c X11TextRenderer.c \\\n+      fontpath.c lcdglyph.c\n@@ -525,2 +510,1 @@\n-  LIBFONTMANAGER_EXCLUDE_FILES += fontpath.c \\\n-      lcdglyph.c\n+  LIBFONTMANAGER_EXCLUDE_FILES += fontpath.c lcdglyph.c\n@@ -554,5 +538,11 @@\n-    LIBS := $(BUILD_LIBFONTMANAGER_FONTLIB), \\\n-    LIBS_unix := -lawt -ljava -ljvm $(LIBM), \\\n-    LIBS_macosx := -lawt_lwawt -framework CoreText -framework CoreFoundation -framework CoreGraphics, \\\n-    LIBS_windows := $(WIN_JAVA_LIB) advapi32.lib user32.lib gdi32.lib \\\n-        $(WIN_AWT_LIB), \\\n+    JDK_LIBS := $(LIBFONTMANAGER_JDK_LIBS), \\\n+    JDK_LIBS_unix := -lawt -ljava -ljvm, \\\n+    JDK_LIBS_macosx := -lawt_lwawt, \\\n+    JDK_LIBS_windows := $(WIN_AWT_LIB) $(WIN_JAVA_LIB), \\\n+    LIBS := $(LIBFONTMANAGER_LIBS), \\\n+    LIBS_unix := $(LIBM), \\\n+    LIBS_macosx := \\\n+        -framework CoreFoundation \\\n+        -framework CoreGraphics \\\n+        -framework CoreText, \\\n+    LIBS_windows := advapi32.lib gdi32.lib user32.lib, \\\n@@ -573,0 +563,2 @@\n+################################################################################\n+## Build libjawt\n@@ -575,3 +567,3 @@\n-ifeq ($(call isTargetOs, windows), true)\n-\n-  LIBJAWT_CFLAGS := -EHsc -DUNICODE -D_UNICODE\n+LIBJAWT_EXTRA_HEADER_DIRS := \\\n+    include \\\n+    #\n@@ -579,2 +571,2 @@\n-  LIBJAWT_EXTRA_HEADER_DIRS := \\\n-      include \\\n+ifeq ($(call isTargetOs, windows), true)\n+  LIBJAWT_EXTRA_HEADER_DIRS += \\\n@@ -589,0 +581,5 @@\n+else\n+  LIBJAWT_EXTRA_HEADER_DIRS += \\\n+      common\/awt \\\n+      #\n+endif\n@@ -590,24 +587,4 @@\n-  ifeq ($(call isTargetCpu, x86), true)\n-    KERNEL32_LIB := kernel32.lib\n-  endif\n-\n-  $(eval $(call SetupJdkLibrary, BUILD_LIBJAWT, \\\n-      NAME := jawt, \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(LIBJAWT_CFLAGS), \\\n-      CXXFLAGS := $(LIBJAWT_CFLAGS), \\\n-      EXTRA_HEADER_DIRS := $(LIBJAWT_EXTRA_HEADER_DIRS), \\\n-      LDFLAGS := $(LDFLAGS_CXX_JDK), \\\n-      LIBS := $(JDKLIB_LIBS) $(KERNEL32_LIB) advapi32.lib $(WIN_AWT_LIB), \\\n-  ))\n-\n-  $(BUILD_LIBJAWT): $(BUILD_LIBAWT)\n-\n-  $(eval $(call SetupCopyFiles, COPY_JAWT_LIB, \\\n-      FILES := $(BUILD_LIBJAWT_IMPORT_LIBRARY), \\\n-      DEST := $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(MODULE), \\\n-  ))\n-\n-  $(COPY_JAWT_LIB): $(BUILD_LIBJAWT)\n-\n-  TARGETS += $(COPY_JAWT_LIB)\n+ifeq ($(call isTargetOs, macosx), true)\n+  # libjawt on macosx do not use the unix code\n+  LIBJAWT_EXCLUDE_SRC_PATTERNS := \/unix\/\n+endif\n@@ -615,1 +592,3 @@\n-else # not windows\n+ifeq ($(call isTargetOs, linux)+$(ENABLE_HEADLESS_ONLY), true+true)\n+  LIBJAWT_CFLAGS += -DHEADLESS\n+endif\n@@ -617,4 +596,3 @@\n-  ifeq ($(call isTargetOs, macosx), true)\n-    # libjawt on macosx do not use the unix code\n-    LIBJAWT_EXCLUDE_SRC_PATTERNS := \/unix\/\n-  endif\n+ifeq ($(call isTargetOs, windows)+$(call isTargetCpu, x86), true+true)\n+  LIBJAWT_LIBS_windows := kernel32.lib\n+endif\n@@ -622,2 +600,4 @@\n-  ifeq ($(call isTargetOs, macosx), true)\n-    JAWT_LIBS := -lawt_lwawt\n+ifeq ($(call isTargetOsType, unix)+$(call isTargetOs, macosx), true+false)\n+  LIBJAWT_JDK_LIBS_unix := -lawt\n+  ifeq ($(ENABLE_HEADLESS_ONLY), false)\n+    LIBJAWT_JDK_LIBS_unix += -lawt_xawt\n@@ -625,9 +605,1 @@\n-    JAWT_LIBS := -lawt\n-    ifeq ($(ENABLE_HEADLESS_ONLY), false)\n-      JAWT_LIBS += -lawt_xawt\n-    else\n-      JAWT_LIBS += -lawt_headless\n-      ifeq ($(call isTargetOs, linux), true)\n-        JAWT_CFLAGS += -DHEADLESS\n-      endif\n-    endif\n+    LIBJAWT_JDK_LIBS_unix += -lawt_headless\n@@ -635,0 +607,1 @@\n+endif\n@@ -636,15 +609,18 @@\n-  $(eval $(call SetupJdkLibrary, BUILD_LIBJAWT, \\\n-      NAME := jawt, \\\n-      EXCLUDE_SRC_PATTERNS := $(LIBJAWT_EXCLUDE_SRC_PATTERNS), \\\n-      INCLUDE_FILES := $(JAWT_FILES), \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(JAWT_CFLAGS), \\\n-      DISABLED_WARNINGS_clang_jawt.m := sign-compare, \\\n-      EXTRA_HEADER_DIRS := \\\n-          include \\\n-          common\/awt, \\\n-      LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n-      LDFLAGS_macosx := -Wl$(COMMA)-rpath$(COMMA)@loader_path, \\\n-      LIBS_unix := $(JAWT_LIBS) $(JDKLIB_LIBS), \\\n-      LIBS_macosx := -framework Cocoa, \\\n-  ))\n+$(eval $(call SetupJdkLibrary, BUILD_LIBJAWT, \\\n+    NAME := jawt, \\\n+    EXCLUDE_SRC_PATTERNS := $(LIBJAWT_EXCLUDE_SRC_PATTERNS), \\\n+    OPTIMIZATION := LOW, \\\n+    CFLAGS := $(LIBJAWT_CFLAGS), \\\n+    CFLAGS_windows := -EHsc -DUNICODE -D_UNICODE, \\\n+    CXXFLAGS_windows := -EHsc -DUNICODE -D_UNICODE, \\\n+    DISABLED_WARNINGS_clang_jawt.m := sign-compare, \\\n+    EXTRA_HEADER_DIRS := $(LIBJAWT_EXTRA_HEADER_DIRS), \\\n+    LDFLAGS_windows := $(LDFLAGS_CXX_JDK), \\\n+    LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n+    LDFLAGS_macosx := -Wl$(COMMA)-rpath$(COMMA)@loader_path, \\\n+    JDK_LIBS_unix := $(LIBJAWT_JDK_LIBS_unix) $(JDKLIB_LIBS), \\\n+    JDK_LIBS_macosx := -lawt_lwawt, \\\n+    JDK_LIBS_windows := $(WIN_AWT_LIB), \\\n+    LIBS_macosx := -framework Cocoa, \\\n+    LIBS_windows := advapi32.lib $(LIBJAWT_LIBS_windows), \\\n+))\n@@ -652,0 +628,5 @@\n+ifeq ($(call isTargetOs, windows), true)\n+  $(BUILD_LIBJAWT): $(BUILD_LIBAWT)\n+else ifeq ($(call isTargetOs, macosx), true)\n+   $(BUILD_LIBJAWT): $(call FindLib, $(MODULE), awt_lwawt)\n+else\n@@ -657,5 +638,0 @@\n-\n-  ifeq ($(call isTargetOs, macosx), true)\n-   $(BUILD_LIBJAWT): $(call FindLib, $(MODULE), awt_lwawt)\n-  endif\n-\n@@ -666,0 +642,13 @@\n+ifeq ($(call isTargetOs, windows), true)\n+  $(eval $(call SetupCopyFiles, COPY_JAWT_LIB, \\\n+      FILES := $(BUILD_LIBJAWT_IMPORT_LIBRARY), \\\n+      DEST := $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(MODULE), \\\n+  ))\n+\n+  $(COPY_JAWT_LIB): $(BUILD_LIBJAWT)\n+\n+  TARGETS += $(COPY_JAWT_LIB)\n+endif\n+\n+################################################################################\n+## Build libsplashscreen\n@@ -669,1 +658,0 @@\n-\n@@ -674,1 +662,5 @@\n-  LIBSPLASHSCREEN_HEADER_DIRS += common\/awt\/utility\n+  LIBSPLASHSCREEN_HEADER_DIRS := \\\n+      common\/awt\/utility \\\n+      libosxapp \\\n+      java.base:libjava \\\n+      #\n@@ -679,2 +671,1 @@\n-    LIBSPLASHSCREEN_EXCLUDES := giflib\n-    GIFLIB_LIBS := -lgif\n+    LIBSPLASHSCREEN_EXCLUDES += giflib\n@@ -684,6 +675,1 @@\n-    # While the following ought to work, it will currently pull in the closed\n-    # additions to this library, and this was not done previously in the build.\n-    # LIBSPLASHSCREEN_EXTRA_SRC += libjavajpeg\n-    LIBSPLASHSCREEN_EXTRA_SRC += $(TOPDIR)\/src\/java.desktop\/share\/native\/libjavajpeg\n-  else\n-    LIBJPEG_LIBS := -ljpeg\n+    LIBSPLASHSCREEN_EXTRA_SRC += libjavajpeg\n@@ -702,5 +688,0 @@\n-  ifeq ($(call isTargetOs, macosx), true)\n-    # libsplashscreen on macosx do not use the unix code\n-    LIBSPLASHSCREEN_EXCLUDE_SRC_PATTERNS := \/unix\/\n-  endif\n-\n@@ -708,1 +689,1 @@\n-                            -DPNG_ARM_NEON_OPT=0 -DPNG_ARM_NEON_IMPLEMENTATION=0\n+      -DPNG_ARM_NEON_OPT=0 -DPNG_ARM_NEON_IMPLEMENTATION=0\n@@ -710,4 +691,2 @@\n-  ifeq ($(call isTargetOs, linux), true)\n-    ifeq ($(call isTargetCpuArch, ppc), true)\n-      LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n-    endif\n+  ifeq ($(call isTargetOs, linux)+$(call isTargetCpuArch, ppc), true+true)\n+    LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n@@ -725,3 +704,1 @@\n-    ifeq ($(TOOLCHAIN_TYPE), clang)\n-      LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n-    endif\n+    LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n@@ -731,1 +708,2 @@\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_MACOSX\n+    # libsplashscreen on macosx do not use the unix code\n+    LIBSPLASHSCREEN_EXCLUDE_SRC_PATTERNS := \/unix\/\n@@ -740,5 +718,0 @@\n-\n-  else ifeq ($(call isTargetOs, windows), true)\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_WIN32\n-  else\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_X11 $(X_CFLAGS)\n@@ -747,2 +720,0 @@\n-  LIBSPLASHSCREEN_LIBS :=\n-\n@@ -750,7 +721,1 @@\n-    LIBSPLASHSCREEN_LIBS += \\\n-        $(LIBM) -lpthread -liconv -losxapp \\\n-        -framework ApplicationServices \\\n-        -framework Foundation \\\n-        -framework Security \\\n-        -framework Cocoa \\\n-        -framework Metal\n+    LIBSPLASHSCREEN_CFLAGS += -DWITH_MACOSX\n@@ -758,1 +723,1 @@\n-    LIBSPLASHSCREEN_LIBS += kernel32.lib user32.lib gdi32.lib delayimp.lib $(WIN_JAVA_LIB) jvm.lib\n+    LIBSPLASHSCREEN_CFLAGS += -DWITH_WIN32\n@@ -760,1 +725,1 @@\n-    LIBSPLASHSCREEN_LIBS += $(X_LIBS) -lX11 -lXext $(LIBM) -lpthread -ldl\n+    LIBSPLASHSCREEN_CFLAGS += -DWITH_X11 $(X_CFLAGS)\n@@ -763,5 +728,0 @@\n-  LIBSPLASHSCREEN_HEADER_DIRS += \\\n-      libosxapp \\\n-      java.base:libjava \\\n-      #\n-\n@@ -785,2 +745,4 @@\n-      DISABLED_WARNINGS_gcc_splashscreen_gfx_impl.c := implicit-fallthrough maybe-uninitialized, \\\n-      DISABLED_WARNINGS_gcc_splashscreen_impl.c := implicit-fallthrough sign-compare unused-function, \\\n+      DISABLED_WARNINGS_gcc_splashscreen_gfx_impl.c := implicit-fallthrough \\\n+          maybe-uninitialized, \\\n+      DISABLED_WARNINGS_gcc_splashscreen_impl.c := implicit-fallthrough \\\n+          sign-compare unused-function, \\\n@@ -792,1 +754,2 @@\n-      DISABLED_WARNINGS_clang_splashscreen_png.c := incompatible-pointer-types, \\\n+      DISABLED_WARNINGS_clang_splashscreen_png.c := \\\n+          incompatible-pointer-types, \\\n@@ -800,3 +763,14 @@\n-      LIBS := $(JDKLIB_LIBS) $(LIBSPLASHSCREEN_LIBS) $(LIBZ_LIBS) \\\n-          $(GIFLIB_LIBS) $(LIBJPEG_LIBS) $(PNG_LIBS), \\\n-      LIBS_aix := -liconv, \\\n+      JDK_LIBS := $(JDKLIB_LIBS), \\\n+      JDK_LIBS_macosx := -losxapp, \\\n+      JDK_LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n+      LIBS := $(GIFLIB_LIBS) $(LIBJPEG_LIBS) $(LIBZ_LIBS) $(PNG_LIBS), \\\n+      LIBS_unix := $(LIBM) -lpthread, \\\n+      LIBS_linux := $(LIBDL) $(X_LIBS) -lX11 -lXext, \\\n+      LIBS_macosx := -liconv \\\n+          -framework ApplicationServices \\\n+          -framework Cocoa \\\n+          -framework Foundation \\\n+          -framework Metal \\\n+          -framework Security, \\\n+      LIBS_aix := $(LIBDL) -liconv $(X_LIBS) -lX11 -lXext, \\\n+      LIBS_windows := delayimp.lib gdi32.lib kernel32.lib user32.lib, \\\n@@ -810,1 +784,0 @@\n-\n@@ -813,2 +786,0 @@\n-################################################################################\n-\n@@ -816,0 +787,3 @@\n+  ##############################################################################\n+  ## Build libawt_lwawt\n+  ##############################################################################\n@@ -835,3 +809,1 @@\n-  LIBAWT_LWAWT_CFLAGS := $(X_CFLAGS) $(X_LIBS)\n-\n-  LIBAWT_LWAWT_EXFILES := fontpath.c awt_Font.c X11Color.c\n+  LIBAWT_LWAWT_EXCLUDE_FILES := fontpath.c awt_Font.c X11Color.c\n@@ -843,2 +815,1 @@\n-      INCLUDE_FILES := $(LIBAWT_LWAWT_FILES), \\\n-      EXCLUDE_FILES := $(LIBAWT_LWAWT_EXFILES), \\\n+      EXCLUDE_FILES := $(LIBAWT_LWAWT_EXCLUDE_FILES), \\\n@@ -847,1 +818,0 @@\n-      CFLAGS := $(LIBAWT_LWAWT_CFLAGS), \\\n@@ -849,2 +819,3 @@\n-      DISABLED_WARNINGS_clang := incomplete-implementation deprecated-declarations \\\n-          objc-method-access incompatible-pointer-types extra-tokens sign-compare undef, \\\n+      DISABLED_WARNINGS_clang := incomplete-implementation \\\n+          deprecated-declarations objc-method-access \\\n+          incompatible-pointer-types extra-tokens sign-compare undef, \\\n@@ -855,1 +826,2 @@\n-      DISABLED_WARNINGS_clang_ImageSurfaceData.m := enum-conversion parentheses-equality, \\\n+      DISABLED_WARNINGS_clang_ImageSurfaceData.m := enum-conversion \\\n+          parentheses-equality, \\\n@@ -857,1 +829,2 @@\n-      DISABLED_WARNINGS_clang_MTLPipelineStatesStorage.m := semicolon-before-method-body, \\\n+      DISABLED_WARNINGS_clang_MTLPipelineStatesStorage.m := \\\n+          semicolon-before-method-body, \\\n@@ -864,1 +837,2 @@\n-      LIBS := -lawt -lmlib_image -losxapp -ljvm $(LIBM) \\\n+      JDK_LIBS_macosx := -lawt -ljava -ljvm -lmlib_image -losxapp, \\\n+      LIBS_macosx := $(LIBM) \\\n@@ -870,2 +844,0 @@\n-          -framework Metal \\\n-          -framework Security \\\n@@ -874,0 +846,1 @@\n+          -framework Metal \\\n@@ -875,1 +848,2 @@\n-          -framework QuartzCore -ljava, \\\n+          -framework QuartzCore \\\n+          -framework Security, \\\n@@ -888,3 +862,3 @@\n-endif\n-\n-################################################################################\n+  ##############################################################################\n+  ## Build libosxui\n+  ##############################################################################\n@@ -892,2 +866,2 @@\n-ifeq ($(call isTargetOs, macosx), true)\n-  SHADERS_SRC := $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/shaders.metal\n+  SHADERS_SRC := \\\n+      $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/shaders.metal\n@@ -924,1 +898,2 @@\n-      DISABLED_WARNINGS_clang_AquaFileView.m := deprecated-declarations sign-compare, \\\n+      DISABLED_WARNINGS_clang_AquaFileView.m := deprecated-declarations \\\n+          sign-compare, \\\n@@ -928,4 +903,2 @@\n-      LIBS := -lawt -losxapp -lawt_lwawt \\\n-          -framework Cocoa \\\n-          -framework Metal \\\n-          -framework Carbon \\\n+      JDK_LIBS_macosx := -lawt -lawt_lwawt -ljava -ljvm -losxapp, \\\n+      LIBS_macosx := \\\n@@ -933,0 +906,2 @@\n+          -framework Carbon \\\n+          -framework Cocoa \\\n@@ -934,1 +909,1 @@\n-          -ljava -ljvm, \\\n+          -framework Metal, \\\n@@ -938,0 +913,1 @@\n+\n@@ -945,1 +921,0 @@\n-\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":350,"deletions":375,"binary":false,"changes":725,"status":"modified"}]}