{"files":[{"patch":"@@ -312,0 +312,1 @@\n+    assert(method_entry->has_resolved_references_index(), \"sanity\");\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  if (has_resolved_ref_index()) {\n+  if (has_resolved_references_index()) {\n@@ -44,1 +44,1 @@\n-    _entry_specific._resolved_references_index = saved_resolved_references_index;\n+    set_resolved_references_index(saved_resolved_references_index);\n","filename":"src\/hotspot\/share\/oops\/resolvedMethodEntry.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,0 +80,4 @@\n+  DEBUG_ONLY(\n+      bool _has_interface_klass;\n+      bool _has_table_index;\n+  )\n@@ -90,1 +94,7 @@\n-      _bytecode2(0) { _entry_specific._interface_klass = nullptr; }\n+      _bytecode2(0) {\n+        _entry_specific._interface_klass = nullptr;\n+        DEBUG_ONLY(\n+          _has_interface_klass = false;\n+          _has_table_index = false;\n+        )\n+      }\n@@ -104,0 +114,8 @@\n+  \/\/ Flags\n+  bool is_vfinal()                     const { return (_flags & (1 << is_vfinal_shift))           != 0; }\n+  bool is_final()                      const { return (_flags & (1 << is_final_shift))            != 0; }\n+  bool is_forced_virtual()             const { return (_flags & (1 << is_forced_virtual_shift))   != 0; }\n+  bool has_appendix()                  const { return (_flags & (1 << has_appendix_shift))        != 0; }\n+  bool has_local_signature()           const { return (_flags & (1 << has_local_signature_shift)) != 0; }\n+  bool has_resolved_references_index() const { return (_flags & (1 << has_resolved_ref_shift))    != 0; }\n+\n@@ -108,0 +126,1 @@\n+    assert(_has_interface_klass, \"sanity\");\n@@ -112,0 +131,1 @@\n+    assert(has_resolved_references_index(), \"sanity\");\n@@ -116,0 +136,1 @@\n+    assert(_has_table_index, \"sanity\");\n@@ -124,8 +145,0 @@\n-  \/\/ Flags\n-  bool is_vfinal()              const { return (_flags & (1 << is_vfinal_shift))           != 0; }\n-  bool is_final()               const { return (_flags & (1 << is_final_shift))            != 0; }\n-  bool is_forced_virtual()      const { return (_flags & (1 << is_forced_virtual_shift))   != 0; }\n-  bool has_appendix()           const { return (_flags & (1 << has_appendix_shift))        != 0; }\n-  bool has_local_signature()    const { return (_flags & (1 << has_local_signature_shift)) != 0; }\n-  bool has_resolved_ref_index() const { return (_flags & (1 << has_resolved_ref_shift))    != 0; }\n-\n@@ -181,0 +194,6 @@\n+    DEBUG_ONLY(\n+      assert(has_resolved_references_index() == false &&\n+             _has_table_index                == false,\n+             \"Mutually exclusive fields %d %d %d\", has_resolved_references_index(), _has_interface_klass, _has_table_index);\n+      _has_interface_klass = true;\n+    )\n@@ -185,0 +204,5 @@\n+    DEBUG_ONLY(\n+      assert(_has_interface_klass            == false &&\n+             _has_table_index                == false,\n+             \"Mutually exclusive fields %d %d %d\", has_resolved_references_index(), _has_interface_klass, _has_table_index);\n+    )\n@@ -190,0 +214,6 @@\n+    DEBUG_ONLY(\n+      assert(has_resolved_references_index() == false &&\n+             _has_interface_klass            == false,\n+             \"Mutually exclusive fields %d %d %d\", has_resolved_references_index(), _has_interface_klass, _has_table_index);\n+      _has_table_index = true;\n+    )\n","filename":"src\/hotspot\/share\/oops\/resolvedMethodEntry.hpp","additions":39,"deletions":9,"binary":false,"changes":48,"status":"modified"}]}