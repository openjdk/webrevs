{"files":[{"patch":"@@ -73,1 +73,1 @@\n-    result = os::attempt_reserve_memory_at((char*)immediate, size, false);\n+    result = os::attempt_reserve_memory_at((char*)immediate, size, mtNone);\n@@ -117,1 +117,1 @@\n-    result = os::reserve_memory_aligned(size, alignment, false);\n+    result = os::reserve_memory_aligned(size, alignment, mtNone);\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtJavaHeap);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4580,1 +4580,1 @@\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtThread);\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, mtThread);\n@@ -4588,1 +4588,1 @@\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtThread);\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size, mtThread);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -494,1 +494,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, MemTag mem_tag, bool exec) {\n@@ -496,1 +496,1 @@\n-  char* extra_base = os::reserve_memory(extra_size, exec);\n+  char* extra_base = os::reserve_memory(extra_size, mem_tag, exec);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, mtInternal);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3022,1 +3022,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtNone);\n@@ -3083,1 +3083,1 @@\n-                                                  bytes_to_release, CALLER_PC);\n+                                                  bytes_to_release, CALLER_PC, mtNone);\n@@ -3101,1 +3101,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC, mtNone);\n@@ -3103,1 +3103,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, mtNone);\n@@ -3243,1 +3243,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MemTag mem_tag = mtNone) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MemTag mem_tag) {\n@@ -3257,1 +3257,1 @@\n-                                         os::reserve_memory(extra_size, false, mem_tag);\n+                                         os::reserve_memory(extra_size, mem_tag);\n@@ -3274,1 +3274,1 @@\n-                                     os::attempt_reserve_memory_at(aligned_base, size, false, mem_tag);\n+                                     os::attempt_reserve_memory_at(aligned_base, size, mem_tag);\n@@ -3283,1 +3283,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, MemTag mem_tag, bool exec) {\n@@ -3285,1 +3285,1 @@\n-  return map_or_reserve_memory_aligned(size, alignment, -1 \/* file_desc *\/);\n+  return map_or_reserve_memory_aligned(size, alignment, -1\/* file_desc *\/, mem_tag);\n@@ -5190,1 +5190,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC, mtNone);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, mtInternal);\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -312,1 +312,2 @@\n-                                             os::vm_page_size());\n+                                             os::vm_page_size(),\n+                                             mtClassShared);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1069,1 +1069,1 @@\n-                        bool allow_exec, MemTag mem_tag = mtNone) {\n+                        bool allow_exec, MemTag mem_tag) {\n@@ -1071,2 +1071,2 @@\n-                             AlwaysPreTouch ? false : read_only,\n-                             allow_exec, mem_tag);\n+                             mem_tag, AlwaysPreTouch ? false : read_only,\n+                             allow_exec);\n@@ -1097,1 +1097,1 @@\n-                              addr, size, false \/* !read_only *\/,\n+                              addr, size, mtNone, false \/* !read_only *\/,\n@@ -1623,1 +1623,1 @@\n-                      r->allow_exec());\n+                      r->allow_exec(), mtJavaHeap);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1348,1 +1348,1 @@\n-                                                  false, MemTag::mtClassShared);\n+                                                  mtClassShared);\n@@ -1540,1 +1540,2 @@\n-                                               os::vm_page_size());\n+                                               os::vm_page_size(),\n+                                               mtNone);\n@@ -1608,1 +1609,2 @@\n-                                                 os::vm_page_size());\n+                                                 os::vm_page_size(),\n+                                                 mtNone);\n@@ -1612,1 +1614,2 @@\n-                                                 os::vm_page_size());\n+                                                 os::vm_page_size(),\n+                                                 mtNone);\n@@ -1625,1 +1628,2 @@\n-                                               os::vm_page_size());\n+                                               os::vm_page_size(),\n+                                               mtNone);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false);\n+  _base = os::map_memory(_fd, filename, 0, nullptr, _size, mtNone, true, false);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1233,1 +1233,2 @@\n-                                             preferred_page_size);\n+                                             preferred_page_size,\n+                                             mtGC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,2 @@\n-                                             page_sz);\n+                                             page_sz,\n+                                             mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -249,1 +249,2 @@\n-                                             page_sz);\n+                                             page_sz,\n+                                             mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  ReservedSpace rs = MemoryReserver::reserve(_byte_map_size, rs_align, _page_size);\n+  ReservedSpace rs = MemoryReserver::reserve(_byte_map_size, rs_align, _page_size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  ReservedSpace write_space = MemoryReserver::reserve(_byte_map_size, rs_align, _page_size);\n+  ReservedSpace write_space = MemoryReserver::reserve(_byte_map_size, rs_align, _page_size, mtGC);\n@@ -63,1 +63,1 @@\n-  ReservedSpace read_space = MemoryReserver::reserve(_byte_map_size, rs_align, _page_size);\n+  ReservedSpace read_space = MemoryReserver::reserve(_byte_map_size, rs_align, _page_size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-  const ReservedSpace reserved = MemoryReserver::reserve(size, alignment, preferred_page_size);\n+  const ReservedSpace reserved = MemoryReserver::reserve(size, alignment, preferred_page_size, mtGC);\n@@ -383,1 +383,1 @@\n-      cset_rs = MemoryReserver::reserve(req_addr, cset_size, cset_align, cset_page_size);\n+      cset_rs = MemoryReserver::reserve(req_addr, cset_size, cset_align, cset_page_size, mtGC);\n@@ -392,1 +392,1 @@\n-      cset_rs = MemoryReserver::reserve(cset_size, cset_align, os::vm_page_size());\n+      cset_rs = MemoryReserver::reserve(cset_size, cset_align, os::vm_page_size(), mtGC);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,1 +109,2 @@\n-                                os::vm_page_size());\n+                                os::vm_page_size(),\n+                                mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  char* addr = os::reserve_memory(size, !ExecMem, mem_tag);\n+  char* addr = os::reserve_memory(size, mem_tag);\n@@ -78,1 +78,1 @@\n-  char* addr = os::reserve_memory(size, !ExecMem, mem_tag);\n+  char* addr = os::reserve_memory(size, mem_tag);\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    return os::attempt_reserve_memory_at(requested_address, size, exec, mem_tag);\n+    return os::attempt_reserve_memory_at(requested_address, size, mem_tag, exec);\n@@ -99,1 +99,1 @@\n-  char* base = os::reserve_memory(size, exec, mem_tag);\n+  char* base = os::reserve_memory(size, mem_tag, exec);\n@@ -110,1 +110,1 @@\n-  return os::reserve_memory_aligned(size, alignment, exec);\n+  return os::reserve_memory_aligned(size, alignment, mem_tag, exec);\n@@ -264,1 +264,1 @@\n-  char* base = os::map_memory_to_file(size, fd);\n+  char* base = os::map_memory_to_file(size, fd, mem_tag);\n","filename":"src\/hotspot\/share\/memory\/memoryReserver.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                               MemTag mem_tag = mtNone);\n+                               MemTag mem_tag);\n@@ -66,1 +66,1 @@\n-                               MemTag mem_tag = mtNone);\n+                               MemTag mem_tag);\n","filename":"src\/hotspot\/share\/memory\/memoryReserver.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -597,1 +597,1 @@\n-    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), false);\n+    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), mtClass);\n@@ -770,1 +770,2 @@\n-                                   os::vm_page_size());\n+                                   os::vm_page_size(),\n+                                   mtClass);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    _rs = MemoryReserver::reserve(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size());\n+    _rs = MemoryReserver::reserve(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size(), mtTest);\n@@ -145,1 +145,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-                                             os::vm_page_size());\n+                                             os::vm_page_size(), mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-    print_malloc(malloc_memory->malloc_counter());\n+    print_malloc(malloc_memory->malloc_counter(), mem_tag);\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  void print_malloc(const MemoryCounter* c, MemTag mem_tag = mtNone) const;\n+  void print_malloc(const MemoryCounter* c, MemTag mem_tag) const;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-    MemTag mem_tag = mtNone) {\n+    MemTag mem_tag) {\n@@ -156,1 +156,1 @@\n-    const NativeCallStack& stack, MemTag mem_tag = mtNone) {\n+    const NativeCallStack& stack, MemTag mem_tag) {\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-    MemTag mem_tag = mtNone) :\n+    MemTag mem_tag) :\n@@ -383,1 +383,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemTag mem_tag = mtNone);\n+  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemTag mem_tag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2403,1 +2403,1 @@\n-    bad_address = os::reserve_memory(size, false, mtInternal);\n+    bad_address = os::reserve_memory(size, mtInternal);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -731,1 +731,1 @@\n-  return (jlong)(uintptr_t)os::reserve_memory(size, false, mtTest);\n+  return (jlong)(uintptr_t)os::reserve_memory(size, mtTest);\n@@ -735,1 +735,1 @@\n-  return (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, false, mtTest);\n+  return (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, mtTest);\n@@ -1527,1 +1527,1 @@\n-  p = os::reserve_memory(os::vm_allocation_granularity());\n+  p = os::reserve_memory(os::vm_allocation_granularity(), mtTest);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1919,1 +1919,1 @@\n-char* os::reserve_memory(size_t bytes, bool executable, MemTag mem_tag) {\n+char* os::reserve_memory(size_t bytes, MemTag mem_tag, bool executable) {\n@@ -1930,1 +1930,1 @@\n-char* os::attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MemTag mem_tag) {\n+char* os::attempt_reserve_memory_at(char* addr, size_t bytes, MemTag mem_tag, bool executable) {\n@@ -2136,1 +2136,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC, mtNone);\n@@ -2303,2 +2303,2 @@\n-                           char *addr, size_t bytes, bool read_only,\n-                           bool allow_exec, MemTag mem_tag) {\n+                           char *addr, size_t bytes, MemTag mem_tag,\n+                            bool read_only, bool allow_exec) {\n@@ -2342,1 +2342,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC, mtNone);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n+  static char*  reserve_memory(size_t bytes, MemTag mem_tag, bool executable = false);\n@@ -463,1 +463,1 @@\n-  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable = false);\n+  static char*  reserve_memory_aligned(size_t size, size_t alignment, MemTag mem_tag, bool executable = false);\n@@ -467,1 +467,1 @@\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, MemTag mem_tag, bool executable = false);\n@@ -519,2 +519,2 @@\n-  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag = mtNone);\n-  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag = mtNone);\n+  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag);\n@@ -522,1 +522,1 @@\n-  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag = mtNone);\n+  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag);\n@@ -527,2 +527,2 @@\n-                           char *addr, size_t bytes, bool read_only = false,\n-                           bool allow_exec = false, MemTag mem_tag = mtNone);\n+                           char *addr, size_t bytes, MemTag mem_tag, bool read_only = false,\n+                           bool allow_exec = false);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    char* polling_page = os::reserve_memory(allocation_size, !ExecMem, mtSafepoint);\n+    char* polling_page = os::reserve_memory(allocation_size, mtSafepoint);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -715,1 +715,1 @@\n-  char* page = os::reserve_memory(os::vm_page_size(), !ExecMem, mtInternal);\n+  char* page = os::reserve_memory(os::vm_page_size(), mtInternal);\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,2 @@\n-                                             os::vm_page_size());\n+                                             os::vm_page_size(),\n+                                             mtTest);\n@@ -93,1 +94,1 @@\n-                                         mtGC);\n+                                         mtTest);\n@@ -111,1 +112,2 @@\n-                                             os::vm_page_size());\n+                                             os::vm_page_size(),\n+                                             mtTest);\n@@ -118,1 +120,1 @@\n-                                         mtGC);\n+                                         mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, false \/* executable *\/);\n+      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-      char* const result = os::attempt_reserve_memory_at((char*)untype(blocked), ZGranuleSize, !ExecMem, mtTest);\n+      char* const result = os::attempt_reserve_memory_at((char*)untype(blocked), ZGranuleSize, mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zVirtualMemoryManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    ReservedSpace rs = MemoryReserver::reserve(size, alignment, page_size);\n+    ReservedSpace rs = MemoryReserver::reserve(size, alignment, page_size, mtTest);\n@@ -104,1 +104,1 @@\n-    ReservedSpace rs = MemoryReserver::reserve(size, alignment, page_size);\n+    ReservedSpace rs = MemoryReserver::reserve(size, alignment, page_size, mtTest);\n@@ -220,1 +220,2 @@\n-                                       os::vm_page_size());\n+                                       os::vm_page_size(),\n+                                       mtTest);\n@@ -299,1 +300,1 @@\n-  ReservedSpace reserved = MemoryReserver::reserve(large_page_size, large_page_size, large_page_size);\n+  ReservedSpace reserved = MemoryReserver::reserve(large_page_size, large_page_size, large_page_size, mtTest);\n@@ -368,1 +369,2 @@\n-                                               page_size);\n+                                               page_size,\n+                                               mtTest);\n@@ -413,1 +415,2 @@\n-                                               page_size);\n+                                               page_size,\n+                                               mtTest);\n@@ -517,1 +520,2 @@\n-      return MemoryReserver::reserve(reserve_size_aligned, mtTest);\n+      return MemoryReserver::reserve(reserve_size_aligned,\n+                                     mtTest);\n@@ -522,1 +526,2 @@\n-                                     os::vm_page_size());\n+                                     os::vm_page_size(),\n+                                     mtTest);\n@@ -579,1 +584,2 @@\n-                                                     large_page_size);\n+                                                     large_page_size,\n+                                                     mtTest);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  char* addr = os::reserve_memory(sz, false, mtTest);\n+  char* addr = os::reserve_memory(sz, mtTest);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_locationprinting.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    char* base = os::reserve_memory(size, !ExecMem, mtThreadStack);\n+    char* base = os::reserve_memory(size, mtThreadStack);\n@@ -162,1 +162,1 @@\n-    char* base = os::reserve_memory(size, !ExecMem, mtTest);\n+    char* base = os::reserve_memory(size, mtTest);\n@@ -208,1 +208,1 @@\n-    char* base = os::reserve_memory(size, !ExecMem, mtTest);\n+    char* base = os::reserve_memory(size, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-  char* two_pages = os::reserve_memory(ps * 2, false, mtTest);\n+  char* two_pages = os::reserve_memory(ps * 2, mtTest);\n@@ -495,1 +495,1 @@\n-  char* p = os::reserve_memory(len, executable);\n+  char* p = os::reserve_memory(len, mtTest, executable);\n@@ -533,1 +533,1 @@\n-    p = (address)os::reserve_memory(total_range_len);\n+    p = (address)os::reserve_memory(total_range_len, mtTest);\n@@ -547,1 +547,1 @@\n-      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);\n+      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, mtTest, executable);\n@@ -567,1 +567,1 @@\n-  address p = (address)os::reserve_memory(total_range_len);\n+  address p = (address)os::reserve_memory(total_range_len, mtTest);\n@@ -634,1 +634,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len, mtTest);\n@@ -657,1 +657,1 @@\n-  char* p = os::reserve_memory(4 * M);\n+  char* p = os::reserve_memory(4 * M, mtTest);\n@@ -692,1 +692,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len, mtTest);\n@@ -733,1 +733,1 @@\n-  char* p = os::reserve_memory(1 * M, false, mtInternal);\n+  char* p = os::reserve_memory(1 * M, mtTest);\n@@ -757,1 +757,1 @@\n-    address p = (address)os::reserve_memory(total_range_len);\n+    address p = (address)os::reserve_memory(total_range_len, mtTest);\n@@ -1062,1 +1062,1 @@\n-  char* p1 = os::reserve_memory(M, false, mtTest);\n+  char* p1 = os::reserve_memory(M, mtTest);\n@@ -1064,1 +1064,1 @@\n-  char* p2 = os::attempt_reserve_memory_at(p1, M);\n+  char* p2 = os::attempt_reserve_memory_at(p1, M, mtTest);\n@@ -1072,1 +1072,1 @@\n-    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, false);\n+    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, mtTest);\n@@ -1098,1 +1098,1 @@\n-  char* base = os::reserve_memory(size, false, mtTest);\n+  char* base = os::reserve_memory(size, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M);\n+    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M, mtTest);\n@@ -39,1 +39,1 @@\n-    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M);\n+    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-  char* const heap = os::reserve_memory(size, false, mtInternal);\n+  char* const heap = os::reserve_memory(size, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-        _base = os::attempt_reserve_memory_at((char*)candidate, _len);\n+        _base = os::attempt_reserve_memory_at((char*)candidate, _len, mtTest);\n@@ -168,2 +168,2 @@\n-    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size);\n-    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size);\n+    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size, mtTest);\n+    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                        \"(malloc=\" + numKB + \"KB #1) (at peak)\"\n+                        \"(malloc=\" + numKB + \"KB tag=Test #1) (at peak)\" \/\/ (malloc=1KB tag=Test #1) (at peak)\n@@ -68,1 +68,1 @@\n-                        \"(malloc=0KB) (peak=\" + numKB + \"KB #1)\"\n+                        \"(malloc=0KB tag=Test) (peak=\" + numKB + \"KB #1)\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocRoundingReportTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                         \"(malloc=384KB #2) (at peak)\"});\n+                         \"(malloc=384KB tag=Test #2) (at peak)\"});\n@@ -57,1 +57,1 @@\n-                         \"(malloc=512KB #1) (peak=768KB #2)\"});\n+                         \"(malloc=512KB tag=Test #1) (peak=768KB #2)\"});\n@@ -64,1 +64,1 @@\n-                         \"(malloc=0KB) (peak=768KB #2)\"});\n+                         \"(malloc=0KB tag=Test) (peak=768KB #2)\"});\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocTestType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                \"(malloc=4KB #\" + mallocd_memory.size() + \") (at peak)\"\n+                \"(malloc=4KB tag=Test #\" + mallocd_memory.size() + \") (at peak)\"\n@@ -86,1 +86,1 @@\n-                \"(malloc=0KB) (peak=4KB #\" + + mallocd_memory.size() + \")\"\n+                \"(malloc=0KB tag=Test) (peak=4KB #\" + + mallocd_memory.size() + \")\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocTrackingVerify.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-            \"(malloc=896KB #3) (at peak)\"\n+            \"(malloc=896KB tag=Test #3) (at peak)\"\n@@ -81,1 +81,1 @@\n-            \"(malloc=0KB) (peak=896KB #3)\"\n+            \"(malloc=0KB tag=Test) (peak=896KB #3)\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/ThreadedMallocTestType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}