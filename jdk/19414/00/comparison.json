{"files":[{"patch":"@@ -116,1 +116,1 @@\n-        return ArraysSupport.vectorizedHashCode(a, off, len, 1, ArraysSupport.T_BYTE);\n+        return ArraysSupport.hashCode(a, off, len, 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,5 +306,1 @@\n-        return switch (value.length) {\n-            case 0 -> 0;\n-            case 1 -> value[0] & 0xff;\n-            default -> ArraysSupport.vectorizedHashCode(value, 0, value.length, 0, ArraysSupport.T_BOOLEAN);\n-        };\n+        return ArraysSupport.hashCodeOfUnsigned(value, 0, value.length, 0);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -588,5 +588,1 @@\n-        return switch (value.length) {\n-            case 0 -> 0;\n-            case 2 -> getChar(value, 0);\n-            default -> ArraysSupport.vectorizedHashCode(value, 0, value.length >> 1, 0, ArraysSupport.T_CHAR);\n-        };\n+        return ArraysSupport.hashCodeOfUTF16(value, 0, value.length >> 1, 0);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4100,2 +4100,1 @@\n-        return ArraysSupport.vectorizedHashCode(mag, 0, mag.length, 0,\n-                ArraysSupport.T_INT) * signum;\n+        return ArraysSupport.hashCode(mag, 0, mag.length, 0) * signum;\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -710,1 +710,1 @@\n-        return ArraysSupport.vectorizedHashCode(hb, ix(position()), remaining(), 1, ArraysSupport.T_BYTE);\n+        return ArraysSupport.hashCode(hb, ix(position()), remaining(), 1);\n@@ -741,1 +741,1 @@\n-        return ArraysSupport.vectorizedHashCode(hb, ix(position()), remaining(), 1, ArraysSupport.T_CHAR);\n+        return ArraysSupport.hashCode(hb, ix(position()), remaining(), 1);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4361,5 +4361,1 @@\n-        return switch (a.length) {\n-            case 0 -> 1;\n-            case 1 -> 31 + a[0];\n-            default -> ArraysSupport.vectorizedHashCode(a, 0, a.length, 1, ArraysSupport.T_INT);\n-        };\n+        return ArraysSupport.hashCode(a, 0, a.length, 1);\n@@ -4388,5 +4384,1 @@\n-        return switch (a.length) {\n-            case 0 -> 1;\n-            case 1 -> 31 + (int)a[0];\n-            default -> ArraysSupport.vectorizedHashCode(a, 0, a.length, 1, ArraysSupport.T_SHORT);\n-        };\n+        return ArraysSupport.hashCode(a, 0, a.length, 1);\n@@ -4415,5 +4407,1 @@\n-        return switch (a.length) {\n-            case 0 -> 1;\n-            case 1 -> 31 + (int)a[0];\n-            default -> ArraysSupport.vectorizedHashCode(a, 0, a.length, 1, ArraysSupport.T_CHAR);\n-        };\n+        return ArraysSupport.hashCode(a, 0, a.length, 1);\n@@ -4442,5 +4430,1 @@\n-        return switch (a.length) {\n-            case 0 -> 1;\n-            case 1 -> 31 + (int)a[0];\n-            default -> ArraysSupport.vectorizedHashCode(a, 0, a.length, 1, ArraysSupport.T_BYTE);\n-        };\n+        return ArraysSupport.hashCode(a, 0, a.length, 1);\n@@ -4552,1 +4536,1 @@\n-        if (a == null)\n+        if (a == null) {\n@@ -4554,7 +4538,2 @@\n-\n-        int result = 1;\n-\n-        for (Object element : a)\n-            result = 31 * result + Objects.hashCode(element);\n-\n-        return result;\n+        }\n+        return ArraysSupport.hashCode(a, 0, a.length, 1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":8,"deletions":29,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -293,2 +293,1 @@\n-            \/\/ T_BOOLEAN to treat the array as unsigned bytes, in line with StringLatin1.hashCode\n-            int h = ArraysSupport.vectorizedHashCode(a, off, len, 0, ArraysSupport.T_BOOLEAN);\n+            int h = ArraysSupport.hashCodeOfUnsigned(a, off, len, 0);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-            int hash = ArraysSupport.vectorizedHashCode(rawBytes, offset, singleBytes, 0, ArraysSupport.T_BOOLEAN);\n+            int hash = ArraysSupport.hashCodeOfUnsigned(rawBytes, offset, singleBytes, 0);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.util.Objects;\n+\n@@ -167,0 +169,160 @@\n+    \/**\n+     * Calculates the hash code for the subrange of an integer array.\n+     *\n+     * <p> This method does not perform type checks or bounds checks. It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\n+     * @param a the array\n+     * @param fromIndex the first index of the subrange of the array\n+     * @param length the number of elements in the subrange\n+     * @param initialValue the initial hash value, typically 0 or 1\n+     *\n+     * @return the calculated hash value\n+     *\/\n+    public static int hashCode(int[] a, int fromIndex, int length, int initialValue) {\n+        return switch (length) {\n+            case 0 -> initialValue;\n+            case 1 -> 31 * initialValue + a[fromIndex];\n+            default -> vectorizedHashCode(a, fromIndex, length, initialValue, T_INT);\n+        };\n+    }\n+\n+    \/**\n+     * Calculates the hash code for the subrange of a short array.\n+     *\n+     * <p> This method does not perform type checks or bounds checks. It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\n+     * @param a the array\n+     * @param fromIndex the first index of the subrange of the array\n+     * @param length the number of elements in the subrange\n+     * @param initialValue the initial hash value, typically 0 or 1\n+     *\n+     * @return the calculated hash value\n+     *\/\n+    public static int hashCode(short[] a, int fromIndex, int length, int initialValue) {\n+        return switch (length) {\n+            case 0 -> initialValue;\n+            case 1 -> 31 * initialValue + (int) a[fromIndex];\n+            default -> vectorizedHashCode(a, fromIndex, length, initialValue, T_SHORT);\n+        };\n+    }\n+\n+    \/**\n+     * Calculates the hash code for the subrange of a char array.\n+     *\n+     * <p> This method does not perform type checks or bounds checks. It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\n+     * @param a the array\n+     * @param fromIndex the first index of the subrange of the array\n+     * @param length the number of elements in the subrange\n+     * @param initialValue the initial hash value, typically 0 or 1\n+     *\n+     * @return the calculated hash value\n+     *\/\n+    public static int hashCode(char[] a, int fromIndex, int length, int initialValue) {\n+        return switch (length) {\n+            case 0 -> initialValue;\n+            case 1 -> 31 * initialValue + (int) a[fromIndex];\n+            default -> vectorizedHashCode(a, fromIndex, length, initialValue, T_CHAR);\n+        };\n+    }\n+\n+    \/**\n+     * Calculates the hash code for the subrange of a byte array.\n+     *\n+     * <p> This method does not perform type checks or bounds checks. It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\n+     * @param a the array\n+     * @param fromIndex the first index of the subrange of the array\n+     * @param length the number of elements in the subrange\n+     * @param initialValue the initial hash value, typically 0 or 1\n+     *\n+     * @return the calculated hash value\n+     *\/\n+    public static int hashCode(byte[] a, int fromIndex, int length, int initialValue) {\n+        return switch (length) {\n+            case 0 -> initialValue;\n+            case 1 -> 31 * initialValue + (int) a[fromIndex];\n+            default -> vectorizedHashCode(a, fromIndex, length, initialValue, T_BYTE);\n+        };\n+    }\n+\n+    \/**\n+     * Calculates the hash code for the subrange of a byte array whose elements\n+     * are treated as unsigned bytes.\n+     *\n+     * <p> This method does not perform type checks or bounds checks. It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\n+     * @param a the array\n+     * @param fromIndex the first index of the subrange of the array\n+     * @param length the number of elements in the subrange\n+     * @param initialValue the initial hash value, typically 0 or 1\n+     *\n+     * @return the calculated hash value\n+     *\/\n+    public static int hashCodeOfUnsigned(byte[] a, int fromIndex, int length, int initialValue) {\n+        return switch (length) {\n+            case 0 -> initialValue;\n+            case 1 -> 31 * initialValue + (a[fromIndex] & 0xff);\n+            default -> vectorizedHashCode(a, fromIndex, length, initialValue, T_BOOLEAN);\n+        };\n+    }\n+\n+    \/**\n+     * Calculates the hash code for the subrange of a byte array whose contents\n+     * are treated as UTF-16 chars.\n+     *\n+     * <p> This method does not perform type checks or bounds checks. It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\n+     * <p> {@code fromIndex} and {@code length} must be scaled down to char\n+     * indexes.\n+     *\n+     * @param a the array\n+     * @param fromIndex the first index of a char in the subrange of the array\n+     * @param length the number of chars in the subrange\n+     * @param initialValue the initial hash value, typically 0 or 1\n+     *\n+     * @return the calculated hash value\n+     *\/\n+    public static int hashCodeOfUTF16(byte[] a, int fromIndex, int length, int initialValue) {\n+        return switch (length) {\n+            case 0 -> 0;\n+            case 2 -> JLA.getUTF16Char(a, 0);\n+            default -> vectorizedHashCode(a, fromIndex, length, initialValue, T_CHAR);\n+        };\n+    }\n+\n+    \/**\n+     * Calculates the hash code for the subrange of an object array.\n+     *\n+     * <p> This method does not perform type checks or bounds checks. It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\n+     * @param a the array\n+     * @param fromIndex the first index of the subrange of the array\n+     * @param length the number of elements in the subrange\n+     * @param initialValue the initial hash value, typically 0 or 1\n+     *\n+     * @return the calculated hash value\n+     *\/\n+    public static int hashCode(Object[] a, int fromIndex, int length, int initialValue) {\n+        int result = initialValue;\n+        int end = fromIndex + length;\n+        for (int i = fromIndex; i < end; i++) {\n+            result = 31 * result + Objects.hashCode(a[i]);\n+        }\n+        return result;\n+    }\n+\n@@ -170,8 +332,8 @@\n-    public static final int T_BOOLEAN = 4;\n-    public static final int T_CHAR = 5;\n-    public static final int T_FLOAT = 6;\n-    public static final int T_DOUBLE = 7;\n-    public static final int T_BYTE = 8;\n-    public static final int T_SHORT = 9;\n-    public static final int T_INT = 10;\n-    public static final int T_LONG = 11;\n+    private static final int T_BOOLEAN = 4;\n+    private static final int T_CHAR = 5;\n+    private static final int T_FLOAT = 6;\n+    private static final int T_DOUBLE = 7;\n+    private static final int T_BYTE = 8;\n+    private static final int T_SHORT = 9;\n+    private static final int T_INT = 10;\n+    private static final int T_LONG = 11;\n@@ -200,2 +362,2 @@\n-    public static int vectorizedHashCode(Object array, int fromIndex, int length, int initialValue,\n-                                         int basicType) {\n+    private static int vectorizedHashCode(Object array, int fromIndex, int length, int initialValue,\n+                                          int basicType) {\n@@ -258,1 +420,1 @@\n-    public static int utf16hashCode(int result, byte[] value, int fromIndex, int length) {\n+    private static int utf16hashCode(int result, byte[] value, int fromIndex, int length) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java","additions":173,"deletions":11,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -1270,1 +1270,1 @@\n-        return ArraysSupport.vectorizedHashCode(buffer, start, end - start, tag, ArraysSupport.T_BYTE);\n+        return ArraysSupport.hashCode(buffer, start, end - start, tag);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DerValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -806,2 +806,1 @@\n-            h = ArraysSupport.vectorizedHashCode(path, 0, path.length, 0,\n-                    \/* unsigned bytes *\/ ArraysSupport.T_BOOLEAN);\n+            h = ArraysSupport.hashCodeOfUnsigned(path, 0, path.length, 0);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.util\n+ * @modules java.base\/jdk.internal.util:+open\n@@ -35,1 +35,3 @@\n-import jdk.internal.util.ArraysSupport;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -39,0 +41,17 @@\n+    private static final Method vectorizedHashCode;\n+    private static final int T_BOOLEAN;\n+\n+    static {\n+        try {\n+            var arraysSupport = Class.forName(\"jdk.internal.util.ArraysSupport\");\n+            vectorizedHashCode = arraysSupport.getDeclaredMethod(\"vectorizedHashCode\",\n+                    Object.class, int.class, int.class, int.class, int.class);\n+            vectorizedHashCode.setAccessible(true);\n+            Field f = arraysSupport.getDeclaredField(\"T_BOOLEAN\");\n+            f.setAccessible(true);\n+            T_BOOLEAN = f.getInt(null);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n@@ -42,1 +61,2 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args)\n+            throws InvocationTargetException, IllegalAccessException {\n@@ -45,1 +65,1 @@\n-        type = ArraysSupport.T_BOOLEAN;\n+        type = T_BOOLEAN;\n@@ -50,1 +70,2 @@\n-    private static void testIntrinsicWithConstantType() {\n+    private static void testIntrinsicWithConstantType()\n+            throws InvocationTargetException, IllegalAccessException {\n@@ -52,1 +73,1 @@\n-            testIntrinsic(bytes, ArraysSupport.T_BOOLEAN);\n+            testIntrinsic(bytes, T_BOOLEAN);\n@@ -57,2 +78,3 @@\n-    private static void testIntrinsicWithNonConstantType() {\n-        type = ArraysSupport.T_BOOLEAN;\n+    private static void testIntrinsicWithNonConstantType()\n+            throws InvocationTargetException, IllegalAccessException {\n+        type = T_BOOLEAN;\n@@ -64,2 +86,3 @@\n-    private static int testIntrinsic(byte[] bytes, int type) {\n-        return ArraysSupport.vectorizedHashCode(bytes, 0, 256, 1, type);\n+    private static int testIntrinsic(byte[] bytes, int type)\n+            throws InvocationTargetException, IllegalAccessException {\n+        return (int) vectorizedHashCode.invoke(null, bytes, 0, 256, 1, type);\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestArraysHashCode.java","additions":33,"deletions":10,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.util=ALL-UNNAMED -Xcomp -Xbatch HashCode\n+ * @run main\/othervm --add-exports java.base\/jdk.internal.util=ALL-UNNAMED\n+ *     --add-opens java.base\/jdk.internal.util=ALL-UNNAMED -Xcomp -Xbatch HashCode\n","filename":"test\/jdk\/java\/util\/Arrays\/HashCode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}