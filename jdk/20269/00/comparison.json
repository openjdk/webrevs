{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.channels.ClosedSelectorException;\n@@ -95,5 +94,0 @@\n-    private void ensureOpen() {\n-        if (!isOpen())\n-            throw new ClosedSelectorException();\n-    }\n-\n@@ -246,1 +240,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.channels.ClosedSelectorException;\n@@ -100,5 +99,0 @@\n-    private void ensureOpen() {\n-        if (!isOpen())\n-            throw new ClosedSelectorException();\n-    }\n-\n@@ -288,1 +282,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueueSelectorImpl.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,2 @@\n+            if (keys == null)\n+                return;\n@@ -236,1 +238,1 @@\n-                    k = ((AbstractSelector)sel).register(this, ops, att);\n+                    k = ((AbstractSelector) sel).register(this, ops, att);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelectableChannel.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,1 +191,1 @@\n-                    SelectionKeyImpl ski = (SelectionKeyImpl)i.next();\n+                    SelectionKeyImpl ski = (SelectionKeyImpl) i.next();\n@@ -195,1 +195,1 @@\n-                        ((SelChImpl)selch).kill();\n+                        ((SelChImpl) selch).kill();\n@@ -224,1 +224,4 @@\n-        } catch (ClosedSelectorException e) {\n+        } catch (CancelledKeyException e) {\n+            \/\/ key observed and cancelled. Okay to return a cancelled key.\n+        }\n+        if (!isOpen()) {\n@@ -228,3 +231,1 @@\n-            throw e;\n-        } catch (CancelledKeyException e) {\n-            \/\/ key observed and cancelled. Okay to return a cancelled key.\n+            throw new ClosedSelectorException();\n@@ -280,1 +281,1 @@\n-                    ((SelChImpl)ch).kill();\n+                    ((SelChImpl) ch).kill();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorImpl.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -234,1 +234,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PollSelectorImpl.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.nio.channels.ClosedSelectorException;\n@@ -92,5 +91,0 @@\n-    private void ensureOpen() {\n-        if (!isOpen())\n-            throw new ClosedSelectorException();\n-    }\n-\n@@ -231,1 +225,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WEPollSelectorImpl.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -609,1 +609,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsSelectorImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336339\n+ * @summary Race registration and selection key updates with Selector.close\n+ * @run junit RaceUpdatesAndClose\n+ *\/\n+\n+import java.nio.channels.CancelledKeyException;\n+import java.nio.channels.ClosedSelectorException;\n+import java.nio.channels.DatagramChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Phaser;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.RepeatedTest;\n+\n+class RaceUpdatesAndClose {\n+    private static ExecutorService executor;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        executor = Executors.newFixedThreadPool(2);\n+    }\n+\n+    @AfterAll\n+    static void finish() {\n+        executor.shutdown();\n+    }\n+\n+    \/**\n+     * Race SelectableChannel.register and Selector.close.\n+     *\/\n+    @RepeatedTest(100)\n+    void raceRegisterAndClose() throws Exception {\n+        try (Selector sel = Selector.open();\n+             DatagramChannel dc = DatagramChannel.open()) {\n+\n+            dc.configureBlocking(false);\n+            SelectionKey key = dc.register(sel, SelectionKey.OP_READ);\n+\n+            Phaser phaser = new Phaser(2);\n+\n+            \/\/ register\n+            var task1 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                try {\n+                    dc.register(sel, SelectionKey.OP_READ);\n+                } catch (ClosedSelectorException e) { }\n+                return null;\n+            });\n+\n+            \/\/ close selector\n+            var task2 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                sel.close();\n+                return null;\n+            });\n+\n+            task1.get();\n+            task2.get();\n+        }\n+    }\n+\n+    \/**\n+     * Race SelectionKey.interestOps and Selector.close.\n+     *\/\n+    @RepeatedTest(100)\n+    void raceInterestOpsAndClose() throws Exception {\n+        try (Selector sel = Selector.open();\n+             DatagramChannel dc = DatagramChannel.open()) {\n+\n+            dc.configureBlocking(false);\n+            SelectionKey key = dc.register(sel, SelectionKey.OP_READ);\n+\n+            Phaser phaser = new Phaser(2);\n+\n+            \/\/ interestOps\n+            var task1 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                try {\n+                    key.interestOps(0);\n+                } catch (CancelledKeyException e) { }\n+            });\n+\n+            \/\/ close selector\n+            var task2 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                sel.close();\n+                return null;\n+            });\n+\n+            task1.get();\n+            task2.get();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/RaceUpdatesAndClose.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"}]}