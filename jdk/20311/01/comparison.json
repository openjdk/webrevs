{"files":[{"patch":"@@ -135,0 +135,1 @@\n+  ReallocMark _nesting; \/\/ Safety checks for arena reallocation\n@@ -604,0 +605,1 @@\n+        _nesting.check(); \/\/ Check if a reallocation in the resource arena is safe\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,4 @@\n+  _nesting.check(_set_arena); \/\/ Check if a potential reallocation in the arena is safe\n+  if (new_word_capacity < _size) {\n+    return; \/\/ No need to grow\n+  }\n","filename":"src\/hotspot\/share\/libadt\/vectset.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  ReallocMark _nesting; \/\/ Safety checks for arena reallocation\n@@ -80,4 +81,1 @@\n-    if (word >= _size) {\n-      \/\/ Then grow\n-      grow(word);\n-    }\n+    grow(word);\n@@ -112,3 +110,1 @@\n-    if (word >= _size) {\n-      grow(word);\n-    }\n+    grow(word);\n","filename":"src\/hotspot\/share\/libadt\/vectset.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-void ReallocMark::check() {\n+void ReallocMark::check(Arena* arena) {\n@@ -242,1 +242,2 @@\n-  if (_nesting != Thread::current()->resource_area()->nesting()) {\n+  if ((arena == nullptr || arena == Thread::current()->resource_area()) &&\n+      _nesting != Thread::current()->resource_area()->nesting()) {\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -559,2 +559,2 @@\n-  ReallocMark()   PRODUCT_RETURN;\n-  void check()    PRODUCT_RETURN;\n+  ReallocMark() PRODUCT_RETURN;\n+  void check(Arena* arena = nullptr) PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,4 @@\n-  assert(i >= Max(), \"must be an overflow\");\n+  _nesting.check(_arena); \/\/ Check if a potential reallocation in the arena is safe\n+  if (i < Max()) {\n+    return; \/\/ No need to grow\n+  }\n@@ -377,0 +380,1 @@\n+, _blocks(arena)\n@@ -1420,1 +1424,1 @@\n-  _nesting.check();\n+  _nesting.check(); \/\/ Check if a potential reallocation in the resource arena is safe\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+  ReallocMark _nesting;         \/\/ Safety checks for arena reallocation\n@@ -71,1 +72,1 @@\n-  void map( uint i, Block *n ) { if( i>=Max() ) grow(i); _blocks[i] = n; }\n+  void map( uint i, Block *n ) { grow(i); _blocks[i] = n; }\n@@ -80,1 +81,3 @@\n-  Block_List() : Block_Array(Thread::current()->resource_area()), _cnt(0) {}\n+  Block_List() : Block_List(Thread::current()->resource_area()) { }\n+  Block_List(Arena* a) : Block_Array(a), _cnt(0) { }\n+\n@@ -658,1 +661,1 @@\n-  ReallocMark _nesting;  \/\/ assertion check for reallocations\n+  ReallocMark _nesting; \/\/ Safety checks for arena reallocation\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n-  \/\/ Pre-grow the blocks array, prior to the ResourceMark kicking in\n-  _blocks.map(number_of_blocks(), nullptr);\n-\n","filename":"src\/hotspot\/share\/opto\/domgraph.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5251,0 +5251,1 @@\n+  _nesting.check(); \/\/ Check if a potential reallocation in the resource arena is safe\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -843,0 +843,2 @@\n+  ReallocMark _nesting; \/\/ Safety checks for arena reallocation\n+\n@@ -855,0 +857,1 @@\n+    _nesting.check(); \/\/ Check if a potential re-allocation in the resource arena is safe\n@@ -865,0 +868,1 @@\n+    _nesting.check(); \/\/ Check if a potential re-allocation in the resource arena is safe\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2769,0 +2769,4 @@\n+  _nesting.check(_a); \/\/ Check if a potential reallocation in the arena is safe\n+  if (i < _max) {\n+    return; \/\/ No need to grow\n+  }\n@@ -2976,0 +2980,4 @@\n+  _nesting.check(_a); \/\/ Check if a potential reallocation in the arena is safe\n+  if (_inode_top < _inode_max) {\n+    return; \/\/ No need to grow\n+  }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1599,0 +1599,2 @@\n+  ReallocMark _nesting;         \/\/ Safety checks for arena reallocation\n+\n@@ -1617,1 +1619,1 @@\n-  void map( uint i, Node *n ) { if( i>=_max ) grow(i); _nodes[i] = n; }\n+  void map( uint i, Node *n ) { grow(i); _nodes[i] = n; }\n@@ -1847,0 +1849,1 @@\n+  ReallocMark _nesting; \/\/ Safety checks for arena reallocation\n@@ -1870,1 +1873,1 @@\n-    if (_inode_top >= _inode_max) grow();\n+    grow();\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2354,0 +2354,1 @@\n+  assert(_a == Compile::current()->comp_arena(), \"Should be allocated in comp_arena\");\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-    Unique_Node_List calls(C->comp_arena());\n+    Unique_Node_List calls;\n@@ -241,1 +241,1 @@\n-  Unique_Node_List safepoints(C->comp_arena());\n+  Unique_Node_List safepoints;\n@@ -243,1 +243,1 @@\n-  Unique_Node_List worklist(C->comp_arena());\n+  Unique_Node_List worklist;\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}