{"files":[{"patch":"@@ -1296,1 +1296,1 @@\n-  char* rp = os::Posix::realpath((char *)dlinfo.dli_fname, buf, buflen);\n+  char* rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n@@ -1327,1 +1327,1 @@\n-        rp = os::Posix::realpath(java_home_var, buf, buflen);\n+        rp = os::realpath(java_home_var, buf, buflen);\n@@ -1348,1 +1348,1 @@\n-          rp = os::Posix::realpath((char *)dlinfo.dli_fname, buf, buflen);\n+          rp = os::realpath((char *)dlinfo.dli_fname, buf, buflen);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1512,1 +1512,1 @@\n-    rp = os::Posix::realpath(dli_fname, buf, buflen);\n+    rp = os::realpath(dli_fname, buf, buflen);\n@@ -1544,1 +1544,1 @@\n-        rp = os::Posix::realpath(java_home_var, buf, buflen);\n+        rp = os::realpath(java_home_var, buf, buflen);\n@@ -1578,1 +1578,1 @@\n-          rp = os::Posix::realpath(dli_fname, buf, buflen);\n+          rp = os::realpath(dli_fname, buf, buflen);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2766,1 +2766,1 @@\n-    rp = os::Posix::realpath(dli_fname, buf, buflen);\n+    rp = os::realpath(dli_fname, buf, buflen);\n@@ -2800,1 +2800,1 @@\n-        rp = os::Posix::realpath(java_home_var, buf, buflen);\n+        rp = os::realpath(java_home_var, buf, buflen);\n@@ -2821,1 +2821,1 @@\n-          rp = os::Posix::realpath(dli_fname, buf, buflen);\n+          rp = os::realpath(dli_fname, buf, buflen);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -792,1 +792,1 @@\n-  return os::Posix::realpath(buffer, _exePath, PATH_MAX);\n+  return os::realpath(buffer, _exePath, PATH_MAX);\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -894,0 +894,4 @@\n+char* os::realpath(const char* filename, char* outbuf, size_t outbuflen) {\n+  return os::Posix::realpath(filename, outbuf, outbuflen);\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+  static char* realpath(const char* filename, char* outbuf, size_t outbuflen);\n+\n@@ -76,7 +78,0 @@\n-  \/\/ A safe implementation of realpath which will not cause a buffer overflow if the resolved path\n-  \/\/   is longer than PATH_MAX.\n-  \/\/ On success, returns 'outbuf', which now contains the path.\n-  \/\/ On error, it will return null and set errno. The content of 'outbuf' is undefined.\n-  \/\/ On truncation error ('outbuf' too small), it will return null and set errno to ENAMETOOLONG.\n-  static char* realpath(const char* filename, char* outbuf, size_t outbuflen);\n-\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -5318,0 +5318,39 @@\n+char* os::realpath(const char* filename, char* outbuf, size_t outbuflen) {\n+  return os::win32::realpath(filename, outbuf, outbuflen);\n+}\n+\n+char* os::win32::realpath(const char* filename, char* outbuf, size_t outbuflen) {\n+\n+  if (filename == nullptr || outbuf == nullptr || outbuflen < 1) {\n+    assert(false, \"os::realpath: invalid arguments.\");\n+    errno = EINVAL;\n+    return nullptr;\n+  }\n+\n+  char* result = nullptr;\n+  ALLOW_C_FUNCTION(::_fullpath, char* p = ::_fullpath(nullptr, filename, 0);)\n+  if (p != nullptr) {\n+    if (strlen(p) < outbuflen) {\n+      strcpy(outbuf, p);\n+      result = outbuf;\n+    } else {\n+      errno = ENAMETOOLONG;\n+    }\n+    ALLOW_C_FUNCTION(::free, ::free(p);) \/\/ *not* os::free\n+  } else {\n+    \/\/ there was a error\n+    \/\/ In this case, use the user provided buffer but at least check whether _fullpath caused\n+    \/\/ a memory overwrite.\n+    if (errno == EINVAL) {\n+      outbuf[outbuflen - 1] = '\\0';\n+      ALLOW_C_FUNCTION(::_fullpath, p = ::_fullpath(outbuf, filename, outbuflen - 1);)\n+      if (p != nullptr) {\n+        guarantee(outbuf[outbuflen - 1] == '\\0', \"_fullpath buffer overwrite detected.\");\n+        result = p;\n+      }\n+    }\n+  }\n+  return result;\n+\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+  static char* realpath(const char* filename, char* outbuf, size_t outbuflen);\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -671,0 +671,7 @@\n+  \/\/ A safe implementation of realpath which will not cause a buffer overflow if the resolved path\n+  \/\/   is longer than PATH_MAX.\n+  \/\/ On success, returns 'outbuf', which now contains the path.\n+  \/\/ On error, it will return null and set errno. The content of 'outbuf' is undefined.\n+  \/\/ On truncation error ('outbuf' too small), it will return null and set errno to ENAMETOOLONG.\n+  static char* realpath(const char* filename, char* outbuf, size_t outbuflen);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1202,1 +1202,1 @@\n-    const char* absname = os::Posix::realpath(name, tmp, sizeof(tmp));\n+    const char* absname = os::realpath(name, tmp, sizeof(tmp));\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-FORBID_C_FUNCTION(char* realpath(const char* path, char* resolved_path), \"use os::Posix::realpath\");\n+FORBID_C_FUNCTION(char* realpath(const char* path, char* resolved_path), \"use os::realpath\");\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}