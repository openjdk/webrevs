{"files":[{"patch":"@@ -567,0 +567,1 @@\n+            String subformatPattern = null;\n@@ -580,1 +581,2 @@\n-                        result.append(\",number,\").append(((DecimalFormat)fmt).toPattern());\n+                        result.append(\",number\");\n+                        subformatPattern = ((DecimalFormat)fmt).toPattern();\n@@ -582,1 +584,2 @@\n-                        result.append(\",choice,\").append(((ChoiceFormat)fmt).toPattern());\n+                        result.append(\",choice\");\n+                        subformatPattern = ((ChoiceFormat)fmt).toPattern();\n@@ -605,1 +608,2 @@\n-                        result.append(\",date,\").append(((SimpleDateFormat)fmt).toPattern());\n+                        result.append(\",date\");\n+                        subformatPattern = ((SimpleDateFormat)fmt).toPattern();\n@@ -615,0 +619,4 @@\n+            if (subformatPattern != null) {\n+                result.append(',');\n+                copyAndQuoteExtraClosingBraces(subformatPattern, result);\n+            }\n@@ -1643,0 +1651,38 @@\n+    \/\/ Quote runs of extra unquoted closing braces, where \"extra\" means not matching some unquoted opening brace.\n+    \/\/ Why? Because when a subformat pattern with unquoted extra closing braces is concatenated into a larger\n+    \/\/ containing pattern, the extra closing braces suddenly become significant because they can now match an\n+    \/\/ opening brace in the containing pattern. See JDK-8323699 for an example.\n+    private static void copyAndQuoteExtraClosingBraces(String source, StringBuilder target) {\n+        int braceDepth = 0;\n+        boolean quoted = false;\n+        for (int i = 0; i < source.length(); i++) {\n+            char ch = source.charAt(i);\n+            switch (ch) {\n+            case '\\'':\n+                quoted = !quoted;\n+                break;\n+            case '{':\n+                if (!quoted)\n+                    braceDepth++;\n+                break;\n+            case '}':\n+                if (quoted)\n+                    break;\n+                if (braceDepth > 0) {\n+                    braceDepth--;\n+                    break;\n+                }\n+                target.append(\"'}\");\n+                while (i + 1 < source.length() && source.charAt(i + 1) == '}') {\n+                    target.append('}');\n+                    i++;\n+                }\n+                target.append('\\'');\n+                continue;\n+            default:\n+                break;\n+            }\n+            target.append(ch);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":49,"deletions":3,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Check MessageFormat.toPattern() is equivalent to original pattern\n+ * @bug 8323699\n+ * @run junit MessageFormatToPatternTest\n+ *\/\n+\n+import java.text.MessageFormat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class MessageFormatToPatternTest {\n+\n+    \/\/ Converting from MessageFormat to pattern string and back should give the same result.\n+    \/\/ For this to work the pattern string needs to quote any \"extra\" closing brace \"}\" characters.\n+    @Test\n+    public void toPatternTest() {\n+\n+        String pattern1 = \"{0,choice,0.0#option A: {1}|1.0#option B: {1}'}'}\";\n+        MessageFormat format1 = new MessageFormat(pattern1);\n+        String result1 = format1.format(new Object[] { 0, 5 });\n+\n+        String pattern2 = format1.toPattern();\n+        MessageFormat format2 = new MessageFormat(pattern2);\n+        String result2 = format2.format(new Object[] { 0, 5 });\n+\n+        assertEquals(result1, result2);\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageFormatToPatternTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}