{"files":[{"patch":"@@ -1674,1 +1674,1 @@\n-                } else\n+                } else {\n@@ -1676,0 +1676,1 @@\n+                }\n@@ -1693,1 +1694,1 @@\n-            if (ch == '\\'')\n+            if (ch == '\\'') {\n@@ -1695,1 +1696,1 @@\n-            else if (qchar.quoted() != quoted) {\n+            } else if (qchar.quoted() != quoted) {\n@@ -1701,1 +1702,1 @@\n-        if (quoted)\n+        if (quoted) {\n@@ -1703,0 +1704,1 @@\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Verify MessageFormat.toPattern() is equivalent to original pattern\n+ * @summary Verify that MessageFormat.toPattern() properly escapes special curly braces\n@@ -115,0 +115,4 @@\n+            \/\/ Absurd double quote examples\n+            Arguments.of(\"Foo '}''''''''}' {0,number,bar'}' '}' } baz \", \"Foo }''''} bar} } 1 baz \"),\n+            Arguments.of(\"'''}''{'''}''''}'\", \"'}'{'}''}\"),\n+\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageFormatToPatternTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageFormatsByArgumentIndex.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageRegression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}