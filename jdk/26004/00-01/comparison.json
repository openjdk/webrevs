{"files":[{"patch":"@@ -109,1 +109,1 @@\n-protected:\n+ protected:\n@@ -118,1 +118,1 @@\n-  BlobId blob_id()                        { return _blob_id; }\n+  BlobId blob_id()                               { return _blob_id; }\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1235,1 +1235,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-SharedRuntime::_jbyte_array_copy_ctr++;      \/\/ Slow-path byte array copy\n+  SharedRuntime::_jbyte_array_copy_ctr++;      \/\/ Slow-path byte array copy\n@@ -235,1 +235,1 @@\n-Copy::conjoint_jbytes_atomic(src, dest, count);\n+  Copy::conjoint_jbytes_atomic(src, dest, count);\n@@ -242,1 +242,1 @@\n-Copy::conjoint_jshorts_atomic(src, dest, count);\n+  Copy::conjoint_jshorts_atomic(src, dest, count);\n@@ -249,1 +249,1 @@\n-Copy::conjoint_jints_atomic(src, dest, count);\n+  Copy::conjoint_jints_atomic(src, dest, count);\n@@ -256,1 +256,1 @@\n-Copy::conjoint_jlongs_atomic(src, dest, count);\n+  Copy::conjoint_jlongs_atomic(src, dest, count);\n@@ -263,2 +263,2 @@\n-assert(count != 0, \"count should be non-zero\");\n-ArrayAccess<>::oop_arraycopy_raw((HeapWord*)src, (HeapWord*)dest, count);\n+  assert(count != 0, \"count should be non-zero\");\n+  ArrayAccess<>::oop_arraycopy_raw((HeapWord*)src, (HeapWord*)dest, count);\n@@ -271,2 +271,2 @@\n-assert(count != 0, \"count should be non-zero\");\n-ArrayAccess<IS_DEST_UNINITIALIZED>::oop_arraycopy_raw((HeapWord*)src, (HeapWord*)dest, count);\n+  assert(count != 0, \"count should be non-zero\");\n+  ArrayAccess<IS_DEST_UNINITIALIZED>::oop_arraycopy_raw((HeapWord*)src, (HeapWord*)dest, count);\n@@ -279,1 +279,1 @@\n-Copy::arrayof_conjoint_jbytes(src, dest, count);\n+  Copy::arrayof_conjoint_jbytes(src, dest, count);\n@@ -286,1 +286,1 @@\n-Copy::arrayof_conjoint_jshorts(src, dest, count);\n+  Copy::arrayof_conjoint_jshorts(src, dest, count);\n@@ -293,1 +293,1 @@\n-Copy::arrayof_conjoint_jints(src, dest, count);\n+  Copy::arrayof_conjoint_jints(src, dest, count);\n@@ -300,1 +300,1 @@\n-Copy::arrayof_conjoint_jlongs(src, dest, count);\n+  Copy::arrayof_conjoint_jlongs(src, dest, count);\n@@ -307,2 +307,2 @@\n-assert(count != 0, \"count should be non-zero\");\n-ArrayAccess<ARRAYCOPY_ARRAYOF>::oop_arraycopy_raw(src, dest, count);\n+  assert(count != 0, \"count should be non-zero\");\n+  ArrayAccess<ARRAYCOPY_ARRAYOF>::oop_arraycopy_raw(src, dest, count);\n@@ -315,2 +315,2 @@\n-assert(count != 0, \"count should be non-zero\");\n-ArrayAccess<ARRAYCOPY_ARRAYOF | IS_DEST_UNINITIALIZED>::oop_arraycopy_raw(src, dest, count);\n+  assert(count != 0, \"count should be non-zero\");\n+  ArrayAccess<ARRAYCOPY_ARRAYOF | IS_DEST_UNINITIALIZED>::oop_arraycopy_raw(src, dest, count);\n@@ -320,3 +320,3 @@\n-#define RETURN_STUB(xxx_fill) {                 \\\n-    name = #xxx_fill;                           \\\n-    return StubRoutines::xxx_fill(); }\n+#define RETURN_STUB(xxx_fill) { \\\n+  name = #xxx_fill; \\\n+  return StubRoutines::xxx_fill(); }\n@@ -372,3 +372,3 @@\n-#define RETURN_STUB(xxx_arraycopy) {            \\\n-    name = #xxx_arraycopy;                      \\\n-    return StubRoutines::xxx_arraycopy(); }\n+#define RETURN_STUB(xxx_arraycopy) { \\\n+  name = #xxx_arraycopy; \\\n+  return StubRoutines::xxx_arraycopy(); }\n@@ -376,3 +376,3 @@\n-#define RETURN_STUB_PARM(xxx_arraycopy, parm) {                 \\\n-    name = parm ? #xxx_arraycopy \"_uninit\": #xxx_arraycopy;     \\\n-    return StubRoutines::xxx_arraycopy(parm); }\n+#define RETURN_STUB_PARM(xxx_arraycopy, parm) { \\\n+  name = parm ? #xxx_arraycopy \"_uninit\": #xxx_arraycopy; \\\n+  return StubRoutines::xxx_arraycopy(parm); }\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"}]}