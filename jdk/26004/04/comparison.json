{"files":[{"patch":"@@ -59,1 +59,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::counter_overflow_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_counter_overflow_id)));\n@@ -68,1 +68,1 @@\n-    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -81,1 +81,1 @@\n-  C1StubId stub_id;\n+  StubId stub_id;\n@@ -83,1 +83,1 @@\n-    stub_id = C1StubId::throw_index_exception_id;\n+    stub_id = StubId::c1_throw_index_exception_id;\n@@ -87,1 +87,1 @@\n-    stub_id = C1StubId::throw_range_check_failed_id;\n+    stub_id = StubId::c1_throw_range_check_failed_id;\n@@ -102,1 +102,1 @@\n-  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -114,1 +114,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::throw_div0_exception_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_throw_div0_exception_id)));\n@@ -126,1 +126,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, StubId stub_id) {\n@@ -131,3 +131,3 @@\n-  assert(stub_id == C1StubId::new_instance_id                 ||\n-         stub_id == C1StubId::fast_new_instance_id            ||\n-         stub_id == C1StubId::fast_new_instance_init_check_id,\n+  assert(stub_id == StubId::c1_new_instance_id                 ||\n+         stub_id == StubId::c1_fast_new_instance_id            ||\n+         stub_id == StubId::c1_fast_new_instance_init_check_id,\n@@ -169,1 +169,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_type_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_new_type_array_id)));\n@@ -192,1 +192,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_object_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_new_object_array_id)));\n@@ -204,1 +204,1 @@\n-  C1StubId enter_id;\n+  StubId enter_id;\n@@ -206,1 +206,1 @@\n-    enter_id = C1StubId::monitorenter_id;\n+    enter_id = StubId::c1_monitorenter_id;\n@@ -208,1 +208,1 @@\n-    enter_id = C1StubId::monitorenter_nofpu_id;\n+    enter_id = StubId::c1_monitorenter_nofpu_id;\n@@ -225,1 +225,1 @@\n-  C1StubId exit_id;\n+  StubId exit_id;\n@@ -227,1 +227,1 @@\n-    exit_id = C1StubId::monitorexit_id;\n+    exit_id = StubId::c1_monitorexit_id;\n@@ -229,1 +229,1 @@\n-    exit_id = C1StubId::monitorexit_nofpu_id;\n+    exit_id = StubId::c1_monitorexit_nofpu_id;\n@@ -257,1 +257,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::deoptimize_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_deoptimize_id)));\n@@ -267,1 +267,1 @@\n-    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -269,1 +269,1 @@\n-    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(StubId::c1_throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-    target = Runtime1::entry_for(C1StubId::access_field_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_access_field_patching_id);\n@@ -327,1 +327,1 @@\n-    target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_load_klass_patching_id);\n@@ -331,1 +331,1 @@\n-    target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_load_mirror_patching_id);\n@@ -335,1 +335,1 @@\n-    target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_load_appendix_patching_id);\n@@ -377,1 +377,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_handle_exception_from_callee_id)));\n@@ -434,1 +434,1 @@\n-  __ far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::unwind_exception_id)));\n+  __ far_jump(RuntimeAddress(Runtime1::entry_for(StubId::c1_unwind_exception_id)));\n@@ -877,1 +877,1 @@\n-    target = Runtime1::entry_for(C1StubId::access_field_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_access_field_patching_id);\n@@ -881,1 +881,1 @@\n-    target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_load_klass_patching_id);\n@@ -885,1 +885,1 @@\n-    target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_load_mirror_patching_id);\n@@ -889,1 +889,1 @@\n-    target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n+    target = Runtime1::entry_for(StubId::c1_load_appendix_patching_id);\n@@ -1361,1 +1361,1 @@\n-        __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+        __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -1372,1 +1372,1 @@\n-      __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+      __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -1450,1 +1450,1 @@\n-    __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+    __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -2036,1 +2036,1 @@\n-  C1StubId unwind_id;\n+  StubId unwind_id;\n@@ -2055,1 +2055,1 @@\n-    unwind_id = C1StubId::handle_exception_id;\n+    unwind_id = StubId::c1_handle_exception_id;\n@@ -2057,1 +2057,1 @@\n-    unwind_id = C1StubId::handle_exception_nofpu_id;\n+    unwind_id = StubId::c1_handle_exception_nofpu_id;\n@@ -2328,1 +2328,1 @@\n-      __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+      __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1248,1 +1248,1 @@\n-  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(StubId::c1_new_multi_array_id),\n@@ -1279,1 +1279,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n@@ -1286,1 +1286,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_class_cast_exception_id, obj.result(), info_for_exception);\n@@ -1321,1 +1321,1 @@\n-  return Runtime1::entry_for(C1StubId::is_instance_of_id);\n+  return Runtime1::entry_for(StubId::c1_is_instance_of_id);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)));\n@@ -315,1 +315,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n+    } else if (_stub_id == (int)StubId::c1_forward_exception_id) {\n@@ -105,1 +105,1 @@\n-      far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n+      far_jump(RuntimeAddress(Runtime1::entry_for(StubId::c1_forward_exception_id)));\n@@ -353,2 +353,2 @@\n-  assert(cb == Runtime1::blob_for(C1StubId::monitorenter_id) ||\n-         cb == Runtime1::blob_for(C1StubId::monitorenter_nofpu_id), \"must be\");\n+  assert(cb == Runtime1::blob_for(StubId::c1_monitorenter_id) ||\n+         cb == Runtime1::blob_for(StubId::c1_monitorenter_nofpu_id), \"must be\");\n@@ -380,1 +380,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(StubId id, StubAssembler *sasm) {\n@@ -392,1 +392,1 @@\n-  case C1StubId::forward_exception_id:\n+  case StubId::c1_forward_exception_id:\n@@ -412,2 +412,2 @@\n-  case C1StubId::handle_exception_nofpu_id:\n-  case C1StubId::handle_exception_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_id:\n@@ -415,1 +415,1 @@\n-    oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n+    oop_map = save_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id);\n@@ -417,1 +417,1 @@\n-  case C1StubId::handle_exception_from_callee_id: {\n+  case StubId::c1_handle_exception_from_callee_id: {\n@@ -475,3 +475,3 @@\n-  case C1StubId::forward_exception_id:\n-  case C1StubId::handle_exception_nofpu_id:\n-  case C1StubId::handle_exception_id:\n+  case StubId::c1_forward_exception_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_id:\n@@ -479,1 +479,1 @@\n-    restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n+    restore_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id);\n@@ -481,1 +481,1 @@\n-  case C1StubId::handle_exception_from_callee_id:\n+  case StubId::c1_handle_exception_from_callee_id:\n@@ -633,1 +633,1 @@\n-OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(StubId id, StubAssembler* sasm) {\n@@ -650,1 +650,1 @@\n-    case C1StubId::forward_exception_id:\n+    case StubId::c1_forward_exception_id:\n@@ -658,1 +658,1 @@\n-    case C1StubId::throw_div0_exception_id:\n+    case StubId::c1_throw_div0_exception_id:\n@@ -664,1 +664,1 @@\n-    case C1StubId::throw_null_pointer_exception_id:\n+    case StubId::c1_throw_null_pointer_exception_id:\n@@ -670,3 +670,3 @@\n-    case C1StubId::new_instance_id:\n-    case C1StubId::fast_new_instance_id:\n-    case C1StubId::fast_new_instance_init_check_id:\n+    case StubId::c1_new_instance_id:\n+    case StubId::c1_fast_new_instance_id:\n+    case StubId::c1_fast_new_instance_init_check_id:\n@@ -677,1 +677,1 @@\n-        if (id == C1StubId::new_instance_id) {\n+        if (id == StubId::c1_new_instance_id) {\n@@ -679,1 +679,1 @@\n-        } else if (id == C1StubId::fast_new_instance_id) {\n+        } else if (id == StubId::c1_fast_new_instance_id) {\n@@ -682,1 +682,1 @@\n-          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n+          assert(id == StubId::c1_fast_new_instance_init_check_id, \"bad StubId\");\n@@ -701,1 +701,1 @@\n-    case C1StubId::counter_overflow_id:\n+    case StubId::c1_counter_overflow_id:\n@@ -719,2 +719,2 @@\n-    case C1StubId::new_type_array_id:\n-    case C1StubId::new_object_array_id:\n+    case StubId::c1_new_type_array_id:\n+    case StubId::c1_new_object_array_id:\n@@ -726,1 +726,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -739,1 +739,1 @@\n-          int tag = ((id == C1StubId::new_type_array_id)\n+          int tag = ((id == StubId::c1_new_type_array_id)\n@@ -754,1 +754,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -772,1 +772,1 @@\n-    case C1StubId::new_multi_array_id:\n+    case StubId::c1_new_multi_array_id:\n@@ -792,1 +792,1 @@\n-    case C1StubId::register_finalizer_id:\n+    case StubId::c1_register_finalizer_id:\n@@ -824,1 +824,1 @@\n-    case C1StubId::throw_class_cast_exception_id:\n+    case StubId::c1_throw_class_cast_exception_id:\n@@ -830,1 +830,1 @@\n-    case C1StubId::throw_incompatible_class_change_error_id:\n+    case StubId::c1_throw_incompatible_class_change_error_id:\n@@ -836,1 +836,1 @@\n-    case C1StubId::slow_subtype_check_id:\n+    case StubId::c1_slow_subtype_check_id:\n@@ -885,1 +885,1 @@\n-    case C1StubId::monitorenter_nofpu_id:\n+    case StubId::c1_monitorenter_nofpu_id:\n@@ -888,1 +888,1 @@\n-    case C1StubId::monitorenter_id:\n+    case StubId::c1_monitorenter_id:\n@@ -906,1 +906,1 @@\n-    case C1StubId::is_instance_of_id:\n+    case StubId::c1_is_instance_of_id:\n@@ -955,1 +955,1 @@\n-    case C1StubId::monitorexit_nofpu_id:\n+    case StubId::c1_monitorexit_nofpu_id:\n@@ -958,1 +958,1 @@\n-    case C1StubId::monitorexit_id:\n+    case StubId::c1_monitorexit_id:\n@@ -978,1 +978,1 @@\n-    case C1StubId::deoptimize_id:\n+    case StubId::c1_deoptimize_id:\n@@ -995,1 +995,1 @@\n-    case C1StubId::throw_range_check_failed_id:\n+    case StubId::c1_throw_range_check_failed_id:\n@@ -1001,1 +1001,1 @@\n-    case C1StubId::unwind_exception_id:\n+    case StubId::c1_unwind_exception_id:\n@@ -1009,1 +1009,1 @@\n-    case C1StubId::access_field_patching_id:\n+    case StubId::c1_access_field_patching_id:\n@@ -1016,1 +1016,1 @@\n-    case C1StubId::load_klass_patching_id:\n+    case StubId::c1_load_klass_patching_id:\n@@ -1023,1 +1023,1 @@\n-    case C1StubId::load_mirror_patching_id:\n+    case StubId::c1_load_mirror_patching_id:\n@@ -1030,1 +1030,1 @@\n-    case C1StubId::load_appendix_patching_id:\n+    case StubId::c1_load_appendix_patching_id:\n@@ -1037,2 +1037,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -1044,1 +1044,1 @@\n-    case C1StubId::handle_exception_from_callee_id:\n+    case StubId::c1_handle_exception_from_callee_id:\n@@ -1050,1 +1050,1 @@\n-    case C1StubId::throw_index_exception_id:\n+    case StubId::c1_throw_index_exception_id:\n@@ -1056,1 +1056,1 @@\n-    case C1StubId::throw_array_store_exception_id:\n+    case StubId::c1_throw_array_store_exception_id:\n@@ -1064,1 +1064,1 @@\n-    case C1StubId::predicate_failed_trap_id:\n+    case StubId::c1_predicate_failed_trap_id:\n@@ -1082,1 +1082,1 @@\n-    case C1StubId::dtrace_object_alloc_id:\n+    case StubId::c1_dtrace_object_alloc_id:\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -444,2 +444,2 @@\n-  if (cb == Runtime1::blob_for(C1StubId::monitorenter_id) ||\n-      cb == Runtime1::blob_for(C1StubId::monitorenter_nofpu_id)) {\n+  if (cb == Runtime1::blob_for(StubId::c1_monitorenter_id) ||\n+      cb == Runtime1::blob_for(StubId::c1_monitorenter_nofpu_id)) {\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::uncommon_trap_id);\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, (uint)OptoStubId::uncommon_trap_id, name);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_uncommon_trap_id);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, BlobId::c2_uncommon_trap_id);\n@@ -257,1 +257,1 @@\n-  AOTCodeCache::store_code_blob(*ut_blob, AOTCodeEntry::C2Blob, (uint)OptoStubId::uncommon_trap_id, name);\n+  AOTCodeCache::store_code_blob(*ut_blob, AOTCodeEntry::C2Blob, BlobId::c2_uncommon_trap_id);\n@@ -294,2 +294,2 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::exception_id);\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, (uint)OptoStubId::exception_id, name);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_exception_id);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, (uint)BlobId::c2_exception_id, name);\n@@ -401,1 +401,1 @@\n-  AOTCodeCache::store_code_blob(*ex_blob, AOTCodeEntry::C2Blob, (uint)OptoStubId::exception_id, name);\n+  AOTCodeCache::store_code_blob(*ex_blob, AOTCodeEntry::C2Blob, BlobId::c2_exception_id);\n","filename":"src\/hotspot\/cpu\/aarch64\/runtime_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2204,2 +2204,2 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)SharedStubId::deopt_id, name);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_deopt_id);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, BlobId::shared_deopt_id);\n@@ -2575,1 +2575,1 @@\n-  AOTCodeCache::store_code_blob(*_deopt_blob, AOTCodeEntry::SharedBlob, (uint)SharedStubId::deopt_id, name);\n+  AOTCodeCache::store_code_blob(*_deopt_blob, AOTCodeEntry::SharedBlob, BlobId::shared_deopt_id);\n@@ -2601,1 +2601,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(StubId id, address call_ptr) {\n@@ -2606,1 +2606,1 @@\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -2620,2 +2620,2 @@\n-  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n-  RegisterSaver reg_save(id == SharedStubId::polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n+  bool cause_return = (id == StubId::shared_polling_page_return_handler_id);\n+  RegisterSaver reg_save(id == StubId::shared_polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n@@ -2724,1 +2724,1 @@\n-  AOTCodeCache::store_code_blob(*sp_blob, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  AOTCodeCache::store_code_blob(*sp_blob, AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -2736,1 +2736,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(StubId id, address destination) {\n@@ -2741,1 +2741,1 @@\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -2822,1 +2822,1 @@\n-  AOTCodeCache::store_code_blob(*rs_blob, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  AOTCodeCache::store_code_blob(*rs_blob, AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -2842,1 +2842,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(StubId id, address runtime_entry) {\n@@ -2866,1 +2866,1 @@\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -2931,1 +2931,1 @@\n-  AOTCodeCache::store_code_blob(*stub, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  AOTCodeCache::store_code_blob(*stub, AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -2962,1 +2962,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_write_checkpoint_id);\n@@ -3001,1 +3001,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_return_lease_id);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-    StubGenStubId stub_id = StubGenStubId::call_stub_id;\n+    StubId stub_id = StubId::stubgen_call_stub_id;\n@@ -425,1 +425,1 @@\n-    StubGenStubId stub_id = StubGenStubId::catch_exception_id;\n+    StubId stub_id = StubId::stubgen_catch_exception_id;\n@@ -481,1 +481,1 @@\n-    StubGenStubId stub_id = StubGenStubId::forward_exception_id;\n+    StubId stub_id = StubId::stubgen_forward_exception_id;\n@@ -571,1 +571,1 @@\n-    StubGenStubId stub_id = StubGenStubId::verify_oop_id;\n+    StubId stub_id = StubId::stubgen_verify_oop_id;\n@@ -620,1 +620,1 @@\n-  address generate_iota_indices(StubGenStubId stub_id) {\n+  address generate_iota_indices(StubId stub_id) {\n@@ -665,1 +665,1 @@\n-    StubGenStubId stub_id = StubGenStubId::zero_blocks_id;\n+    StubId stub_id = StubId::stubgen_zero_blocks_id;\n@@ -805,1 +805,1 @@\n-  void generate_copy_longs(StubGenStubId stub_id, DecoratorSet decorators, Label &start, Register s, Register d, Register count) {\n+  void generate_copy_longs(StubId stub_id, DecoratorSet decorators, Label &start, Register s, Register d, Register count) {\n@@ -810,1 +810,1 @@\n-    case copy_byte_f_id:\n+    case StubId::stubgen_copy_byte_f_id:\n@@ -814,1 +814,1 @@\n-    case copy_byte_b_id:\n+    case StubId::stubgen_copy_byte_b_id:\n@@ -818,1 +818,1 @@\n-    case copy_oop_f_id:\n+    case StubId::stubgen_copy_oop_f_id:\n@@ -822,1 +822,1 @@\n-    case copy_oop_b_id:\n+    case StubId::stubgen_copy_oop_b_id:\n@@ -826,1 +826,1 @@\n-    case copy_oop_uninit_f_id:\n+    case StubId::stubgen_copy_oop_uninit_f_id:\n@@ -830,1 +830,1 @@\n-    case copy_oop_uninit_b_id:\n+    case StubId::stubgen_copy_oop_uninit_b_id:\n@@ -1529,1 +1529,1 @@\n-  address generate_disjoint_copy(StubGenStubId stub_id, address *entry) {\n+  address generate_disjoint_copy(StubId stub_id, address *entry) {\n@@ -1537,1 +1537,1 @@\n-    case jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_jbyte_disjoint_arraycopy_id:\n@@ -1543,1 +1543,1 @@\n-    case arrayof_jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id:\n@@ -1549,1 +1549,1 @@\n-    case jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_jshort_disjoint_arraycopy_id:\n@@ -1555,1 +1555,1 @@\n-    case arrayof_jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id:\n@@ -1561,1 +1561,1 @@\n-    case jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_jint_disjoint_arraycopy_id:\n@@ -1567,1 +1567,1 @@\n-    case arrayof_jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_disjoint_arraycopy_id:\n@@ -1573,1 +1573,1 @@\n-    case jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_jlong_disjoint_arraycopy_id:\n@@ -1575,1 +1575,1 @@\n-      \/\/ stub as for case arrayof_jlong_disjoint_arraycopy\n+      \/\/ stub as for case StubId::stubgen_arrayof_jlong_disjoint_arraycopy\n@@ -1578,1 +1578,1 @@\n-    case arrayof_jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id:\n@@ -1584,1 +1584,1 @@\n-    case oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -1590,1 +1590,1 @@\n-    case arrayof_oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_id:\n@@ -1596,1 +1596,1 @@\n-    case oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_uninit_id:\n@@ -1602,1 +1602,1 @@\n-    case arrayof_oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id:\n@@ -1685,1 +1685,1 @@\n-  address generate_conjoint_copy(StubGenStubId stub_id, address nooverlap_target, address *entry) {\n+  address generate_conjoint_copy(StubId stub_id, address nooverlap_target, address *entry) {\n@@ -1693,1 +1693,1 @@\n-    case jbyte_arraycopy_id:\n+    case StubId::stubgen_jbyte_arraycopy_id:\n@@ -1699,1 +1699,1 @@\n-    case arrayof_jbyte_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_arraycopy_id:\n@@ -1705,1 +1705,1 @@\n-    case jshort_arraycopy_id:\n+    case StubId::stubgen_jshort_arraycopy_id:\n@@ -1711,1 +1711,1 @@\n-    case arrayof_jshort_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_arraycopy_id:\n@@ -1717,1 +1717,1 @@\n-    case jint_arraycopy_id:\n+    case StubId::stubgen_jint_arraycopy_id:\n@@ -1723,1 +1723,1 @@\n-    case arrayof_jint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_arraycopy_id:\n@@ -1729,1 +1729,1 @@\n-    case jlong_arraycopy_id:\n+    case StubId::stubgen_jlong_arraycopy_id:\n@@ -1731,1 +1731,1 @@\n-      \/\/ stub as for case arrayof_jlong_disjoint_arraycopy\n+      \/\/ stub as for case StubId::stubgen_arrayof_jlong_disjoint_arraycopy\n@@ -1734,1 +1734,1 @@\n-    case arrayof_jlong_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_arraycopy_id:\n@@ -1740,1 +1740,1 @@\n-    case oop_arraycopy_id:\n+    case StubId::stubgen_oop_arraycopy_id:\n@@ -1746,1 +1746,1 @@\n-    case arrayof_oop_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_id:\n@@ -1752,1 +1752,1 @@\n-    case oop_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_arraycopy_uninit_id:\n@@ -1758,1 +1758,1 @@\n-    case arrayof_oop_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_uninit_id:\n@@ -1853,1 +1853,1 @@\n-  address generate_checkcast_copy(StubGenStubId stub_id, address *entry) {\n+  address generate_checkcast_copy(StubId stub_id, address *entry) {\n@@ -1856,1 +1856,1 @@\n-    case checkcast_arraycopy_id:\n+    case StubId::stubgen_checkcast_arraycopy_id:\n@@ -1859,1 +1859,1 @@\n-    case checkcast_arraycopy_uninit_id:\n+    case StubId::stubgen_checkcast_arraycopy_uninit_id:\n@@ -2074,1 +2074,1 @@\n-    StubGenStubId stub_id = StubGenStubId::unsafe_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_unsafe_arraycopy_id;\n@@ -2127,1 +2127,1 @@\n-    StubGenStubId stub_id = StubGenStubId::generic_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_generic_arraycopy_id;\n@@ -2398,1 +2398,1 @@\n-  address generate_fill(StubGenStubId stub_id) {\n+  address generate_fill(StubId stub_id) {\n@@ -2403,1 +2403,1 @@\n-    case jbyte_fill_id:\n+    case StubId::stubgen_jbyte_fill_id:\n@@ -2407,1 +2407,1 @@\n-    case jshort_fill_id:\n+    case StubId::stubgen_jshort_fill_id:\n@@ -2411,1 +2411,1 @@\n-    case jint_fill_id:\n+    case StubId::stubgen_jint_fill_id:\n@@ -2415,1 +2415,1 @@\n-    case arrayof_jbyte_fill_id:\n+    case StubId::stubgen_arrayof_jbyte_fill_id:\n@@ -2419,1 +2419,1 @@\n-    case arrayof_jshort_fill_id:\n+    case StubId::stubgen_arrayof_jshort_fill_id:\n@@ -2423,1 +2423,1 @@\n-    case arrayof_jint_fill_id:\n+    case StubId::stubgen_arrayof_jint_fill_id:\n@@ -2593,1 +2593,1 @@\n-    StubCodeMark mark(this, StubGenStubId::unsafe_setmemory_id);\n+    StubCodeMark mark(this, StubId::stubgen_unsafe_setmemory_id);\n@@ -2691,1 +2691,1 @@\n-    StubGenStubId stub_id = StubGenStubId::data_cache_writeback_id;\n+    StubId stub_id = StubId::stubgen_data_cache_writeback_id;\n@@ -2708,1 +2708,1 @@\n-    StubGenStubId stub_id = StubGenStubId::data_cache_writeback_sync_id;\n+    StubId stub_id = StubId::stubgen_data_cache_writeback_sync_id;\n@@ -2738,2 +2738,2 @@\n-    generate_copy_longs(StubGenStubId::copy_byte_f_id, IN_HEAP | IS_ARRAY, copy_f, r0, r1, r15);\n-    generate_copy_longs(StubGenStubId::copy_byte_b_id, IN_HEAP | IS_ARRAY, copy_b, r0, r1, r15);\n+    generate_copy_longs(StubId::stubgen_copy_byte_f_id, IN_HEAP | IS_ARRAY, copy_f, r0, r1, r15);\n+    generate_copy_longs(StubId::stubgen_copy_byte_b_id, IN_HEAP | IS_ARRAY, copy_b, r0, r1, r15);\n@@ -2741,2 +2741,2 @@\n-    generate_copy_longs(StubGenStubId::copy_oop_f_id, IN_HEAP | IS_ARRAY, copy_obj_f, r0, r1, r15);\n-    generate_copy_longs(StubGenStubId::copy_oop_b_id, IN_HEAP | IS_ARRAY, copy_obj_b, r0, r1, r15);\n+    generate_copy_longs(StubId::stubgen_copy_oop_f_id, IN_HEAP | IS_ARRAY, copy_obj_f, r0, r1, r15);\n+    generate_copy_longs(StubId::stubgen_copy_oop_b_id, IN_HEAP | IS_ARRAY, copy_obj_b, r0, r1, r15);\n@@ -2744,2 +2744,2 @@\n-    generate_copy_longs(StubGenStubId::copy_oop_uninit_f_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, copy_obj_uninit_f, r0, r1, r15);\n-    generate_copy_longs(StubGenStubId::copy_oop_uninit_b_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, copy_obj_uninit_b, r0, r1, r15);\n+    generate_copy_longs(StubId::stubgen_copy_oop_uninit_f_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, copy_obj_uninit_f, r0, r1, r15);\n+    generate_copy_longs(StubId::stubgen_copy_oop_uninit_b_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, copy_obj_uninit_b, r0, r1, r15);\n@@ -2751,4 +2751,4 @@\n-    StubRoutines::_jbyte_disjoint_arraycopy         = generate_disjoint_copy(StubGenStubId::jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jbyte_arraycopy                  = generate_conjoint_copy(StubGenStubId::jbyte_arraycopy_id, entry, &entry_jbyte_arraycopy);\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy = generate_disjoint_copy(StubGenStubId::arrayof_jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jbyte_arraycopy          = generate_conjoint_copy(StubGenStubId::arrayof_jbyte_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jbyte_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_jbyte_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jbyte_arraycopy_id, entry, &entry_jbyte_arraycopy);\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jbyte_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id, entry, nullptr);\n@@ -2758,4 +2758,4 @@\n-    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubGenStubId::jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubGenStubId::jshort_arraycopy_id, entry, &entry_jshort_arraycopy);\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubGenStubId::arrayof_jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubGenStubId::arrayof_jshort_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jshort_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jshort_arraycopy_id, entry, &entry_jshort_arraycopy);\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jshort_arraycopy_id, entry, nullptr);\n@@ -2765,2 +2765,2 @@\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy = generate_disjoint_copy(StubGenStubId::arrayof_jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jint_arraycopy          = generate_conjoint_copy(StubGenStubId::arrayof_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jint_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n@@ -2769,2 +2769,2 @@\n-    StubRoutines::_jint_disjoint_arraycopy         = generate_disjoint_copy(StubGenStubId::jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubGenStubId::jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    StubRoutines::_jint_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n@@ -2774,2 +2774,2 @@\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubGenStubId::arrayof_jlong_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubGenStubId::arrayof_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n@@ -2786,1 +2786,1 @@\n-        = generate_disjoint_copy(StubGenStubId::arrayof_oop_disjoint_arraycopy_id, &entry);\n+        = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_id, &entry);\n@@ -2788,1 +2788,1 @@\n-        = generate_conjoint_copy(StubGenStubId::arrayof_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n+        = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n@@ -2791,1 +2791,1 @@\n-        = generate_disjoint_copy(StubGenStubId::arrayof_oop_disjoint_arraycopy_uninit_id, &entry);\n+        = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id, &entry);\n@@ -2793,1 +2793,1 @@\n-        = generate_conjoint_copy(StubGenStubId::arrayof_oop_arraycopy_uninit_id, entry, nullptr);\n+        = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_uninit_id, entry, nullptr);\n@@ -2801,2 +2801,2 @@\n-    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n-    StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_uninit_id, nullptr);\n+    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n+    StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_uninit_id, nullptr);\n@@ -2816,6 +2816,6 @@\n-    StubRoutines::_jbyte_fill = generate_fill(StubGenStubId::jbyte_fill_id);\n-    StubRoutines::_jshort_fill = generate_fill(StubGenStubId::jshort_fill_id);\n-    StubRoutines::_jint_fill = generate_fill(StubGenStubId::jint_fill_id);\n-    StubRoutines::_arrayof_jbyte_fill = generate_fill(StubGenStubId::arrayof_jbyte_fill_id);\n-    StubRoutines::_arrayof_jshort_fill = generate_fill(StubGenStubId::arrayof_jshort_fill_id);\n-    StubRoutines::_arrayof_jint_fill = generate_fill(StubGenStubId::arrayof_jint_fill_id);\n+    StubRoutines::_jbyte_fill = generate_fill(StubId::stubgen_jbyte_fill_id);\n+    StubRoutines::_jshort_fill = generate_fill(StubId::stubgen_jshort_fill_id);\n+    StubRoutines::_jint_fill = generate_fill(StubId::stubgen_jint_fill_id);\n+    StubRoutines::_arrayof_jbyte_fill = generate_fill(StubId::stubgen_arrayof_jbyte_fill_id);\n+    StubRoutines::_arrayof_jshort_fill = generate_fill(StubId::stubgen_arrayof_jshort_fill_id);\n+    StubRoutines::_arrayof_jint_fill = generate_fill(StubId::stubgen_arrayof_jint_fill_id);\n@@ -2835,1 +2835,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_encryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_encryptBlock_id;\n@@ -2869,1 +2869,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_decryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_decryptBlock_id;\n@@ -2908,1 +2908,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_encryptAESCrypt_id;\n+    StubId stub_id = StubId::stubgen_cipherBlockChaining_encryptAESCrypt_id;\n@@ -3013,1 +3013,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_decryptAESCrypt_id;\n+    StubId stub_id = StubId::stubgen_cipherBlockChaining_decryptAESCrypt_id;\n@@ -3200,1 +3200,1 @@\n-    StubGenStubId stub_id = StubGenStubId::counterMode_AESCrypt_id;\n+    StubId stub_id = StubId::stubgen_counterMode_AESCrypt_id;\n@@ -3410,1 +3410,1 @@\n-    StubGenStubId stub_id = StubGenStubId::galoisCounterMode_AESCrypt_id;\n+    StubId stub_id = StubId::stubgen_galoisCounterMode_AESCrypt_id;\n@@ -3620,1 +3620,1 @@\n-  address generate_md5_implCompress(StubGenStubId stub_id) {\n+  address generate_md5_implCompress(StubId stub_id) {\n@@ -3623,1 +3623,1 @@\n-    case md5_implCompress_id:\n+    case StubId::stubgen_md5_implCompress_id:\n@@ -3626,1 +3626,1 @@\n-    case md5_implCompressMB_id:\n+    case StubId::stubgen_md5_implCompressMB_id:\n@@ -3773,1 +3773,1 @@\n-  address generate_sha1_implCompress(StubGenStubId stub_id) {\n+  address generate_sha1_implCompress(StubId stub_id) {\n@@ -3776,1 +3776,1 @@\n-    case sha1_implCompress_id:\n+    case StubId::stubgen_sha1_implCompress_id:\n@@ -3779,1 +3779,1 @@\n-    case sha1_implCompressMB_id:\n+    case StubId::stubgen_sha1_implCompressMB_id:\n@@ -3878,1 +3878,1 @@\n-  address generate_sha256_implCompress(StubGenStubId stub_id) {\n+  address generate_sha256_implCompress(StubId stub_id) {\n@@ -3881,1 +3881,1 @@\n-    case sha256_implCompress_id:\n+    case StubId::stubgen_sha256_implCompress_id:\n@@ -3884,1 +3884,1 @@\n-    case sha256_implCompressMB_id:\n+    case StubId::stubgen_sha256_implCompressMB_id:\n@@ -4034,1 +4034,1 @@\n-  address generate_sha512_implCompress(StubGenStubId stub_id) {\n+  address generate_sha512_implCompress(StubId stub_id) {\n@@ -4037,1 +4037,1 @@\n-    case sha512_implCompress_id:\n+    case StubId::stubgen_sha512_implCompress_id:\n@@ -4040,1 +4040,1 @@\n-    case sha512_implCompressMB_id:\n+    case StubId::stubgen_sha512_implCompressMB_id:\n@@ -4284,1 +4284,1 @@\n-  address generate_sha3_implCompress(StubGenStubId stub_id) {\n+  address generate_sha3_implCompress(StubId stub_id) {\n@@ -4287,1 +4287,1 @@\n-    case sha3_implCompress_id:\n+    case StubId::stubgen_sha3_implCompress_id:\n@@ -4290,1 +4290,1 @@\n-    case sha3_implCompressMB_id:\n+    case StubId::stubgen_sha3_implCompressMB_id:\n@@ -4570,1 +4570,1 @@\n-    StubGenStubId stub_id = StubGenStubId::chacha20Block_id;\n+    StubId stub_id = StubId::stubgen_chacha20Block_id;\n@@ -5206,1 +5206,1 @@\n-    StubGenStubId stub_id = StubGenStubId::kyberNtt_id;\n+    StubId stub_id = StubId::stubgen_kyberNtt_id;\n@@ -5444,1 +5444,1 @@\n-    StubGenStubId stub_id = StubGenStubId::kyberInverseNtt_id;\n+    StubId stub_id = StubId::stubgen_kyberInverseNtt_id;\n@@ -5731,1 +5731,1 @@\n-    StubGenStubId stub_id = StubGenStubId::kyberNttMult_id;\n+    StubId stub_id = StubId::stubgen_kyberNttMult_id;\n@@ -5848,1 +5848,1 @@\n-    StubGenStubId stub_id = StubGenStubId::kyberAddPoly_2_id;\n+    StubId stub_id = StubId::stubgen_kyberAddPoly_2_id;\n@@ -5933,1 +5933,1 @@\n-    StubGenStubId stub_id = StubGenStubId::kyberAddPoly_3_id;\n+    StubId stub_id = StubId::stubgen_kyberAddPoly_3_id;\n@@ -6041,1 +6041,1 @@\n-    StubGenStubId stub_id = StubGenStubId::kyber12To16_id;\n+    StubId stub_id = StubId::stubgen_kyber12To16_id;\n@@ -6244,1 +6244,1 @@\n-    StubGenStubId stub_id = StubGenStubId::kyberBarrettReduce_id;\n+    StubId stub_id = StubId::stubgen_kyberBarrettReduce_id;\n@@ -6491,1 +6491,1 @@\n-    StubGenStubId stub_id = StubGenStubId::dilithiumAlmostNtt_id;\n+    StubId stub_id = StubId::stubgen_dilithiumAlmostNtt_id;\n@@ -6698,1 +6698,1 @@\n-    StubGenStubId stub_id = StubGenStubId::dilithiumAlmostInverseNtt_id;\n+    StubId stub_id = StubId::stubgen_dilithiumAlmostInverseNtt_id;\n@@ -6811,1 +6811,1 @@\n-    StubGenStubId stub_id = StubGenStubId::dilithiumNttMult_id;\n+    StubId stub_id = StubId::stubgen_dilithiumNttMult_id;\n@@ -6875,1 +6875,1 @@\n-    StubGenStubId stub_id = StubGenStubId::dilithiumMontMulByConstant_id;\n+    StubId stub_id = StubId::stubgen_dilithiumMontMulByConstant_id;\n@@ -6939,1 +6939,1 @@\n-    StubGenStubId stub_id = StubGenStubId::dilithiumDecomposePoly_id;\n+    StubId stub_id = StubId::stubgen_dilithiumDecomposePoly_id;\n@@ -7208,1 +7208,1 @@\n-  address generate_sha3_implCompress_gpr(StubGenStubId stub_id) {\n+  address generate_sha3_implCompress_gpr(StubId stub_id) {\n@@ -7211,1 +7211,1 @@\n-    case sha3_implCompress_id:\n+    case StubId::stubgen_sha3_implCompress_id:\n@@ -7214,1 +7214,1 @@\n-    case sha3_implCompressMB_id:\n+    case StubId::stubgen_sha3_implCompressMB_id:\n@@ -7459,1 +7459,1 @@\n-    StubGenStubId stub_id = StubGenStubId::updateBytesCRC32_id;\n+    StubId stub_id = StubId::stubgen_updateBytesCRC32_id;\n@@ -7501,1 +7501,1 @@\n-    StubGenStubId stub_id = StubGenStubId::updateBytesCRC32C_id;\n+    StubId stub_id = StubId::stubgen_updateBytesCRC32C_id;\n@@ -7540,1 +7540,1 @@\n-    StubGenStubId stub_id = StubGenStubId::updateBytesAdler32_id;\n+    StubId stub_id = StubId::stubgen_updateBytesAdler32_id;\n@@ -7762,1 +7762,1 @@\n-    StubGenStubId stub_id = StubGenStubId::multiplyToLen_id;\n+    StubId stub_id = StubId::stubgen_multiplyToLen_id;\n@@ -7795,1 +7795,1 @@\n-    StubGenStubId stub_id = StubGenStubId::squareToLen_id;\n+    StubId stub_id = StubId::stubgen_squareToLen_id;\n@@ -7829,1 +7829,1 @@\n-    StubGenStubId stub_id = StubGenStubId::mulAdd_id;\n+    StubId stub_id = StubId::stubgen_mulAdd_id;\n@@ -7860,1 +7860,1 @@\n-    StubGenStubId stub_id = StubGenStubId::bigIntegerRightShiftWorker_id;\n+    StubId stub_id = StubId::stubgen_bigIntegerRightShiftWorker_id;\n@@ -7983,1 +7983,1 @@\n-    StubGenStubId stub_id = StubGenStubId::bigIntegerLeftShiftWorker_id;\n+    StubId stub_id = StubId::stubgen_bigIntegerLeftShiftWorker_id;\n@@ -8092,1 +8092,1 @@\n-    StubGenStubId stub_id = StubGenStubId::count_positives_id;\n+    StubId stub_id = StubId::stubgen_count_positives_id;\n@@ -8354,1 +8354,1 @@\n-    StubGenStubId stub_id = StubGenStubId::large_array_equals_id;\n+    StubId stub_id = StubId::stubgen_large_array_equals_id;\n@@ -8480,1 +8480,1 @@\n-    StubGenStubId stub_id;\n+    StubId stub_id;\n@@ -8483,1 +8483,1 @@\n-      stub_id = StubGenStubId::large_arrays_hashcode_boolean_id;\n+      stub_id = StubId::stubgen_large_arrays_hashcode_boolean_id;\n@@ -8486,1 +8486,1 @@\n-      stub_id = StubGenStubId::large_arrays_hashcode_byte_id;\n+      stub_id = StubId::stubgen_large_arrays_hashcode_byte_id;\n@@ -8489,1 +8489,1 @@\n-      stub_id = StubGenStubId::large_arrays_hashcode_char_id;\n+      stub_id = StubId::stubgen_large_arrays_hashcode_char_id;\n@@ -8492,1 +8492,1 @@\n-      stub_id = StubGenStubId::large_arrays_hashcode_short_id;\n+      stub_id = StubId::stubgen_large_arrays_hashcode_short_id;\n@@ -8495,1 +8495,1 @@\n-      stub_id = StubGenStubId::large_arrays_hashcode_int_id;\n+      stub_id = StubId::stubgen_large_arrays_hashcode_int_id;\n@@ -8498,1 +8498,1 @@\n-      stub_id = StubGenStubId::NO_STUBID;\n+      stub_id = StubId::NO_STUBID;\n@@ -8741,1 +8741,1 @@\n-    StubGenStubId stub_id = (isCos ? StubGenStubId::dcos_id : StubGenStubId::dsin_id);\n+    StubId stub_id = (isCos ? StubId::stubgen_dcos_id : StubId::stubgen_dsin_id);\n@@ -8793,1 +8793,1 @@\n-    StubGenStubId stub_id = (isLU ? StubGenStubId::compare_long_string_LU_id : StubGenStubId::compare_long_string_UL_id);\n+    StubId stub_id = (isLU ? StubId::stubgen_compare_long_string_LU_id : StubId::stubgen_compare_long_string_UL_id);\n@@ -8903,1 +8903,1 @@\n-    StubGenStubId stub_id = StubGenStubId::hf2f_id;\n+    StubId stub_id = StubId::stubgen_hf2f_id;\n@@ -8917,1 +8917,1 @@\n-    StubGenStubId stub_id = StubGenStubId::f2hf_id;\n+    StubId stub_id = StubId::stubgen_f2hf_id;\n@@ -8928,1 +8928,1 @@\n-    StubGenStubId stub_id = StubGenStubId::method_entry_barrier_id;\n+    StubId stub_id = StubId::stubgen_method_entry_barrier_id;\n@@ -8994,1 +8994,1 @@\n-    StubGenStubId stub_id = (isLL ? StubGenStubId::compare_long_string_LL_id : StubGenStubId::compare_long_string_UU_id);\n+    StubId stub_id = (isLL ? StubId::stubgen_compare_long_string_LL_id : StubId::stubgen_compare_long_string_UU_id);\n@@ -9125,1 +9125,1 @@\n-    StubGenStubId stub_id;\n+    StubId stub_id;\n@@ -9127,4 +9127,4 @@\n-      case LL: stub_id = StubGenStubId::compare_long_string_LL_id;  break;\n-      case LU: stub_id = StubGenStubId::compare_long_string_LU_id; break;\n-      case UL: stub_id = StubGenStubId::compare_long_string_UL_id; break;\n-      case UU: stub_id = StubGenStubId::compare_long_string_UU_id; break;\n+      case LL: stub_id = StubId::stubgen_compare_long_string_LL_id;  break;\n+      case LU: stub_id = StubId::stubgen_compare_long_string_LU_id; break;\n+      case UL: stub_id = StubId::stubgen_compare_long_string_UL_id; break;\n+      case UU: stub_id = StubId::stubgen_compare_long_string_UU_id; break;\n@@ -9261,1 +9261,1 @@\n-    StubGenStubId stub_id;\n+    StubId stub_id;\n@@ -9264,1 +9264,1 @@\n-        stub_id = StubGenStubId::string_indexof_linear_ll_id;\n+        stub_id = StubId::stubgen_string_indexof_linear_ll_id;\n@@ -9266,1 +9266,1 @@\n-        stub_id = StubGenStubId::string_indexof_linear_ul_id;\n+        stub_id = StubId::stubgen_string_indexof_linear_ul_id;\n@@ -9272,1 +9272,1 @@\n-        stub_id = StubGenStubId::string_indexof_linear_uu_id;\n+        stub_id = StubId::stubgen_string_indexof_linear_uu_id;\n@@ -9574,1 +9574,1 @@\n-    StubGenStubId stub_id = StubGenStubId::large_byte_array_inflate_id;\n+    StubId stub_id = StubId::stubgen_large_byte_array_inflate_id;\n@@ -9640,1 +9640,1 @@\n-    StubGenStubId stub_id = StubGenStubId::ghash_processBlocks_id;\n+    StubId stub_id = StubId::stubgen_ghash_processBlocks_id;\n@@ -9707,1 +9707,1 @@\n-    StubGenStubId stub_id = StubGenStubId::ghash_processBlocks_wide_id;\n+    StubId stub_id = StubId::stubgen_ghash_processBlocks_wide_id;\n@@ -9819,1 +9819,1 @@\n-    StubGenStubId stub_id = StubGenStubId::base64_encodeBlock_id;\n+    StubId stub_id = StubId::stubgen_base64_encodeBlock_id;\n@@ -10088,1 +10088,1 @@\n-    StubGenStubId stub_id = StubGenStubId::base64_decodeBlock_id;\n+    StubId stub_id = StubId::stubgen_base64_decodeBlock_id;\n@@ -10205,1 +10205,1 @@\n-    StubGenStubId stub_id = StubGenStubId::spin_wait_id;\n+    StubId stub_id = StubId::stubgen_spin_wait_id;\n@@ -10216,1 +10216,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_id;\n@@ -10245,1 +10245,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_slow_path_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_slow_path_id;\n@@ -10400,1 +10400,1 @@\n-    StubGenStubId stub_id = StubGenStubId::atomic_entry_points_id;\n+    StubId stub_id = StubId::stubgen_atomic_entry_points_id;\n@@ -10560,1 +10560,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_thaw_id;\n+    StubId stub_id = StubId::stubgen_cont_thaw_id;\n@@ -10571,1 +10571,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_returnBarrier_id;\n+    StubId stub_id = StubId::stubgen_cont_returnBarrier_id;\n@@ -10583,1 +10583,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_returnBarrierExc_id;\n+    StubId stub_id = StubId::stubgen_cont_returnBarrierExc_id;\n@@ -10594,1 +10594,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_preempt_id;\n+    StubId stub_id = StubId::stubgen_cont_preempt_id;\n@@ -10677,1 +10677,1 @@\n-    StubGenStubId stub_id = StubGenStubId::poly1305_processBlocks_id;\n+    StubId stub_id = StubId::stubgen_poly1305_processBlocks_id;\n@@ -10792,1 +10792,1 @@\n-    StubGenStubId stub_id = StubGenStubId::upcall_stub_exception_handler_id;\n+    StubId stub_id = StubId::stubgen_upcall_stub_exception_handler_id;\n@@ -10810,1 +10810,1 @@\n-    StubGenStubId stub_id = StubGenStubId::upcall_stub_load_target_id;\n+    StubId stub_id = StubId::stubgen_upcall_stub_load_target_id;\n@@ -11755,1 +11755,1 @@\n-      StubRoutines::aarch64::_vector_iota_indices = generate_iota_indices(StubGenStubId::vector_iota_indices_id);\n+      StubRoutines::aarch64::_vector_iota_indices = generate_iota_indices(StubId::stubgen_vector_iota_indices_id);\n@@ -11799,1 +11799,1 @@\n-      StubGenStubId stub_id = StubGenStubId::montgomeryMultiply_id;\n+      StubId stub_id = StubId::stubgen_montgomeryMultiply_id;\n@@ -11806,1 +11806,1 @@\n-      StubGenStubId stub_id = StubGenStubId::montgomerySquare_id;\n+      StubId stub_id = StubId::stubgen_montgomerySquare_id;\n@@ -11863,2 +11863,2 @@\n-      StubRoutines::_md5_implCompress      = generate_md5_implCompress(StubGenStubId::md5_implCompress_id);\n-      StubRoutines::_md5_implCompressMB    = generate_md5_implCompress(StubGenStubId::md5_implCompressMB_id);\n+      StubRoutines::_md5_implCompress      = generate_md5_implCompress(StubId::stubgen_md5_implCompress_id);\n+      StubRoutines::_md5_implCompressMB    = generate_md5_implCompress(StubId::stubgen_md5_implCompressMB_id);\n@@ -11867,2 +11867,2 @@\n-      StubRoutines::_sha1_implCompress     = generate_sha1_implCompress(StubGenStubId::sha1_implCompress_id);\n-      StubRoutines::_sha1_implCompressMB   = generate_sha1_implCompress(StubGenStubId::sha1_implCompressMB_id);\n+      StubRoutines::_sha1_implCompress     = generate_sha1_implCompress(StubId::stubgen_sha1_implCompress_id);\n+      StubRoutines::_sha1_implCompressMB   = generate_sha1_implCompress(StubId::stubgen_sha1_implCompressMB_id);\n@@ -11871,2 +11871,2 @@\n-      StubRoutines::_sha256_implCompress   = generate_sha256_implCompress(StubGenStubId::sha256_implCompress_id);\n-      StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(StubGenStubId::sha256_implCompressMB_id);\n+      StubRoutines::_sha256_implCompress   = generate_sha256_implCompress(StubId::stubgen_sha256_implCompress_id);\n+      StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(StubId::stubgen_sha256_implCompressMB_id);\n@@ -11875,2 +11875,2 @@\n-      StubRoutines::_sha512_implCompress   = generate_sha512_implCompress(StubGenStubId::sha512_implCompress_id);\n-      StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(StubGenStubId::sha512_implCompressMB_id);\n+      StubRoutines::_sha512_implCompress   = generate_sha512_implCompress(StubId::stubgen_sha512_implCompress_id);\n+      StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(StubId::stubgen_sha512_implCompressMB_id);\n@@ -11882,2 +11882,2 @@\n-         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(StubGenStubId::sha3_implCompress_id);\n-         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(StubGenStubId::sha3_implCompressMB_id);\n+         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(StubId::stubgen_sha3_implCompress_id);\n+         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(StubId::stubgen_sha3_implCompressMB_id);\n@@ -11885,2 +11885,2 @@\n-         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress_gpr(StubGenStubId::sha3_implCompress_id);\n-         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress_gpr(StubGenStubId::sha3_implCompressMB_id);\n+         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress_gpr(StubId::stubgen_sha3_implCompress_id);\n+         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress_gpr(StubId::stubgen_sha3_implCompressMB_id);\n@@ -11903,1 +11903,1 @@\n-  StubGenerator(CodeBuffer* code, StubGenBlobId blob_id) : StubCodeGenerator(code, blob_id) {\n+  StubGenerator(CodeBuffer* code, BlobId blob_id) : StubCodeGenerator(code, blob_id) {\n@@ -11905,1 +11905,1 @@\n-    case preuniverse_id:\n+    case BlobId::stubgen_preuniverse_id:\n@@ -11908,1 +11908,1 @@\n-    case initial_id:\n+    case BlobId::stubgen_initial_id:\n@@ -11911,1 +11911,1 @@\n-     case continuation_id:\n+     case BlobId::stubgen_continuation_id:\n@@ -11914,1 +11914,1 @@\n-    case compiler_id:\n+    case BlobId::stubgen_compiler_id:\n@@ -11917,1 +11917,1 @@\n-    case final_id:\n+    case BlobId::stubgen_final_id:\n@@ -11921,1 +11921,1 @@\n-      fatal(\"unexpected blob id: %d\", blob_id);\n+      fatal(\"unexpected blob id: %s\", StubInfo::name(blob_id));\n@@ -11927,1 +11927,1 @@\n-void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id) {\n+void StubGenerator_generate(CodeBuffer* code, BlobId blob_id) {\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":196,"deletions":196,"binary":false,"changes":392,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  __ call(Runtime1::entry_for(C1StubId::counter_overflow_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(StubId::c1_counter_overflow_id), relocInfo::runtime_call_type);\n@@ -59,1 +59,1 @@\n-    __ call(Runtime1::entry_for(C1StubId::predicate_failed_trap_id), relocInfo::runtime_call_type);\n+    __ call(Runtime1::entry_for(StubId::c1_predicate_failed_trap_id), relocInfo::runtime_call_type);\n@@ -75,1 +75,1 @@\n-    __ call(Runtime1::entry_for(C1StubId::throw_index_exception_id), relocInfo::runtime_call_type);\n+    __ call(Runtime1::entry_for(StubId::c1_throw_index_exception_id), relocInfo::runtime_call_type);\n@@ -78,1 +78,1 @@\n-    __ call(Runtime1::entry_for(C1StubId::throw_range_check_failed_id), relocInfo::runtime_call_type);\n+    __ call(Runtime1::entry_for(StubId::c1_throw_range_check_failed_id), relocInfo::runtime_call_type);\n@@ -91,1 +91,1 @@\n-  __ call(Runtime1::entry_for(C1StubId::predicate_failed_trap_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(StubId::c1_predicate_failed_trap_id), relocInfo::runtime_call_type);\n@@ -102,1 +102,1 @@\n-  __ call(Runtime1::entry_for(C1StubId::throw_div0_exception_id),\n+  __ call(Runtime1::entry_for(StubId::c1_throw_div0_exception_id),\n@@ -111,1 +111,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, StubId stub_id) {\n@@ -116,3 +116,3 @@\n-  assert(stub_id == C1StubId::new_instance_id                 ||\n-         stub_id == C1StubId::fast_new_instance_id            ||\n-         stub_id == C1StubId::fast_new_instance_init_check_id,\n+  assert(stub_id == StubId::c1_new_instance_id                 ||\n+         stub_id == StubId::c1_fast_new_instance_id            ||\n+         stub_id == StubId::c1_fast_new_instance_init_check_id,\n@@ -150,1 +150,1 @@\n-  __ call(Runtime1::entry_for(C1StubId::new_type_array_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(StubId::c1_new_type_array_id), relocInfo::runtime_call_type);\n@@ -172,1 +172,1 @@\n-  __ call(Runtime1::entry_for(C1StubId::new_object_array_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(StubId::c1_new_object_array_id), relocInfo::runtime_call_type);\n@@ -191,3 +191,3 @@\n-  C1StubId enter_id = ce->compilation()->has_fpu_code() ?\n-                              C1StubId::monitorenter_id :\n-                              C1StubId::monitorenter_nofpu_id;\n+  StubId enter_id = ce->compilation()->has_fpu_code() ?\n+                              StubId::c1_monitorenter_id :\n+                              StubId::c1_monitorenter_nofpu_id;\n@@ -212,3 +212,3 @@\n-  C1StubId exit_id = ce->compilation()->has_fpu_code() ?\n-                             C1StubId::monitorexit_id :\n-                             C1StubId::monitorexit_nofpu_id;\n+  StubId exit_id = ce->compilation()->has_fpu_code() ?\n+                             StubId::c1_monitorexit_id :\n+                             StubId::c1_monitorexit_nofpu_id;\n@@ -324,4 +324,4 @@\n-    case access_field_id:  target = Runtime1::entry_for(C1StubId::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for(C1StubId::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n-    case load_mirror_id:   target = Runtime1::entry_for(C1StubId::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n-    case load_appendix_id: target = Runtime1::entry_for(C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case access_field_id:  target = Runtime1::entry_for(StubId::c1_access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for(StubId::c1_load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n+    case load_mirror_id:   target = Runtime1::entry_for(StubId::c1_load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case load_appendix_id: target = Runtime1::entry_for(StubId::c1_load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n@@ -353,1 +353,1 @@\n-  __ call(Runtime1::entry_for(C1StubId::deoptimize_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(StubId::c1_deoptimize_id), relocInfo::runtime_call_type);\n@@ -364,1 +364,1 @@\n-    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -366,1 +366,1 @@\n-    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(StubId::c1_throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-  __ call(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(StubId::c1_handle_exception_from_callee_id), relocInfo::runtime_call_type);\n@@ -255,1 +255,1 @@\n-  __ jump(Runtime1::entry_for(C1StubId::unwind_exception_id), relocInfo::runtime_call_type, Rtemp);\n+  __ jump(Runtime1::entry_for(StubId::c1_unwind_exception_id), relocInfo::runtime_call_type, Rtemp);\n@@ -1139,1 +1139,1 @@\n-      __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n+      __ call(Runtime1::entry_for(StubId::c1_slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1213,1 +1213,1 @@\n-          __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n+          __ call(Runtime1::entry_for(StubId::c1_slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1230,1 +1230,1 @@\n-        __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n+        __ call(Runtime1::entry_for(StubId::c1_slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1306,1 +1306,1 @@\n-          __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n+          __ call(Runtime1::entry_for(StubId::c1_slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1337,1 +1337,1 @@\n-        __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n+        __ call(Runtime1::entry_for(StubId::c1_slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1984,3 +1984,3 @@\n-  C1StubId handle_id = compilation()->has_fpu_code() ?\n-                               C1StubId::handle_exception_id :\n-                               C1StubId::handle_exception_nofpu_id;\n+  StubId handle_id = compilation()->has_fpu_code() ?\n+                               StubId::c1_handle_exception_id :\n+                               StubId::c1_handle_exception_nofpu_id;\n@@ -2263,1 +2263,1 @@\n-      __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type); \/\/ does not blow any registers except R0, LR and Rtemp\n+      __ call(Runtime1::entry_for(StubId::c1_slow_subtype_check_id), relocInfo::runtime_call_type); \/\/ does not blow any registers except R0, LR and Rtemp\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1060,1 +1060,1 @@\n-  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(StubId::c1_new_multi_array_id),\n@@ -1089,1 +1089,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id,\n+    stub = new SimpleExceptionStub(StubId::c1_throw_incompatible_class_change_error_id,\n@@ -1097,1 +1097,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id,\n+    stub = new SimpleExceptionStub(StubId::c1_throw_class_cast_exception_id,\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  if (_stub_id != (int)C1StubId::forward_exception_id) {\n+  if (_stub_id != (int)StubId::c1_forward_exception_id) {\n@@ -83,1 +83,1 @@\n-  if (_stub_id != (int)C1StubId::forward_exception_id) {\n+  if (_stub_id != (int)StubId::c1_forward_exception_id) {\n@@ -86,1 +86,1 @@\n-    jump(Runtime1::entry_for(C1StubId::forward_exception_id), relocInfo::runtime_call_type, Rtemp, ne);\n+    jump(Runtime1::entry_for(StubId::c1_forward_exception_id), relocInfo::runtime_call_type, Rtemp, ne);\n@@ -286,1 +286,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(StubId id, StubAssembler* sasm) {\n@@ -296,1 +296,1 @@\n-  case C1StubId::forward_exception_id: {\n+  case StubId::c1_forward_exception_id: {\n@@ -305,1 +305,1 @@\n-  case C1StubId::handle_exception_id:\n+  case StubId::c1_handle_exception_id:\n@@ -308,1 +308,1 @@\n-  case C1StubId::handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n@@ -312,1 +312,1 @@\n-  case C1StubId::handle_exception_from_callee_id:\n+  case StubId::c1_handle_exception_from_callee_id:\n@@ -334,3 +334,3 @@\n-  case C1StubId::forward_exception_id:\n-  case C1StubId::handle_exception_nofpu_id:\n-  case C1StubId::handle_exception_id:\n+  case StubId::c1_forward_exception_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_id:\n@@ -340,1 +340,1 @@\n-  case C1StubId::handle_exception_from_callee_id:\n+  case StubId::c1_handle_exception_from_callee_id:\n@@ -409,1 +409,1 @@\n-OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(StubId id, StubAssembler* sasm) {\n@@ -417,1 +417,1 @@\n-    case C1StubId::forward_exception_id:\n+    case StubId::c1_forward_exception_id:\n@@ -424,3 +424,3 @@\n-    case C1StubId::new_instance_id:\n-    case C1StubId::fast_new_instance_id:\n-    case C1StubId::fast_new_instance_init_check_id:\n+    case StubId::c1_new_instance_id:\n+    case StubId::c1_fast_new_instance_id:\n+    case StubId::c1_fast_new_instance_init_check_id:\n@@ -442,1 +442,1 @@\n-    case C1StubId::counter_overflow_id:\n+    case StubId::c1_counter_overflow_id:\n@@ -454,2 +454,2 @@\n-    case C1StubId::new_type_array_id:\n-    case C1StubId::new_object_array_id:\n+    case StubId::c1_new_type_array_id:\n+    case StubId::c1_new_object_array_id:\n@@ -457,1 +457,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -469,1 +469,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -483,1 +483,1 @@\n-    case C1StubId::new_multi_array_id:\n+    case StubId::c1_new_multi_array_id:\n@@ -506,1 +506,1 @@\n-    case C1StubId::register_finalizer_id:\n+    case StubId::c1_register_finalizer_id:\n@@ -527,1 +527,1 @@\n-    case C1StubId::throw_range_check_failed_id:\n+    case StubId::c1_throw_range_check_failed_id:\n@@ -534,1 +534,1 @@\n-    case C1StubId::throw_index_exception_id:\n+    case StubId::c1_throw_index_exception_id:\n@@ -541,1 +541,1 @@\n-    case C1StubId::throw_div0_exception_id:\n+    case StubId::c1_throw_div0_exception_id:\n@@ -548,1 +548,1 @@\n-    case C1StubId::throw_null_pointer_exception_id:\n+    case StubId::c1_throw_null_pointer_exception_id:\n@@ -555,2 +555,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -563,1 +563,1 @@\n-    case C1StubId::handle_exception_from_callee_id:\n+    case StubId::c1_handle_exception_from_callee_id:\n@@ -570,1 +570,1 @@\n-    case C1StubId::unwind_exception_id:\n+    case StubId::c1_unwind_exception_id:\n@@ -577,1 +577,1 @@\n-    case C1StubId::throw_array_store_exception_id:\n+    case StubId::c1_throw_array_store_exception_id:\n@@ -584,1 +584,1 @@\n-    case C1StubId::throw_class_cast_exception_id:\n+    case StubId::c1_throw_class_cast_exception_id:\n@@ -591,1 +591,1 @@\n-    case C1StubId::throw_incompatible_class_change_error_id:\n+    case StubId::c1_throw_incompatible_class_change_error_id:\n@@ -598,1 +598,1 @@\n-    case C1StubId::slow_subtype_check_id:\n+    case StubId::c1_slow_subtype_check_id:\n@@ -631,1 +631,1 @@\n-    case C1StubId::monitorenter_nofpu_id:\n+    case StubId::c1_monitorenter_nofpu_id:\n@@ -634,1 +634,1 @@\n-    case C1StubId::monitorenter_id:\n+    case StubId::c1_monitorenter_id:\n@@ -649,1 +649,1 @@\n-    case C1StubId::monitorexit_nofpu_id:\n+    case StubId::c1_monitorexit_nofpu_id:\n@@ -652,1 +652,1 @@\n-    case C1StubId::monitorexit_id:\n+    case StubId::c1_monitorexit_id:\n@@ -665,1 +665,1 @@\n-    case C1StubId::deoptimize_id:\n+    case StubId::c1_deoptimize_id:\n@@ -681,1 +681,1 @@\n-    case C1StubId::access_field_patching_id:\n+    case StubId::c1_access_field_patching_id:\n@@ -688,1 +688,1 @@\n-    case C1StubId::load_klass_patching_id:\n+    case StubId::c1_load_klass_patching_id:\n@@ -695,1 +695,1 @@\n-    case C1StubId::load_appendix_patching_id:\n+    case StubId::c1_load_appendix_patching_id:\n@@ -702,1 +702,1 @@\n-    case C1StubId::load_mirror_patching_id:\n+    case StubId::c1_load_mirror_patching_id:\n@@ -709,1 +709,1 @@\n-    case C1StubId::predicate_failed_trap_id:\n+    case StubId::c1_predicate_failed_trap_id:\n","filename":"src\/hotspot\/cpu\/arm\/c1_Runtime1_arm.cpp","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::uncommon_trap_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_uncommon_trap_id);\n@@ -213,1 +213,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::exception_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_exception_id);\n","filename":"src\/hotspot\/cpu\/arm\/runtime_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1369,1 +1369,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_deopt_id);\n@@ -1611,1 +1611,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(StubId id, address call_ptr) {\n@@ -1621,1 +1621,1 @@\n-  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n+  bool cause_return = (id == StubId::shared_polling_page_return_handler_id);\n@@ -1683,1 +1683,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(StubId id, address destination) {\n@@ -1747,1 +1747,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(StubId id, address runtime_entry) {\n@@ -1811,1 +1811,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_write_checkpoint_id);\n@@ -1855,1 +1855,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_return_lease_id);\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  do_arch_entry(Arm, initial, atomic_load_long,                         \\\n+  do_arch_entry(Arm, initial, atomic_store_long,                        \\\n","filename":"src\/hotspot\/cpu\/arm\/stubDeclarations_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-    StubGenStubId stub_id = StubGenStubId::call_stub_id;\n+    StubId stub_id = StubId::stubgen_call_stub_id;\n@@ -255,1 +255,1 @@\n-    StubGenStubId stub_id = StubGenStubId::catch_exception_id;\n+    StubId stub_id = StubId::stubgen_catch_exception_id;\n@@ -268,1 +268,1 @@\n-    StubGenStubId stub_id = StubGenStubId::forward_exception_id;\n+    StubId stub_id = StubId::stubgen_forward_exception_id;\n@@ -318,1 +318,1 @@\n-    StubGenStubId stub_id = StubGenStubId::idiv_irem_id;\n+    StubId stub_id = StubId::stubgen_idiv_irem_id;\n@@ -461,1 +461,1 @@\n-    StubGenStubId stub_id = StubGenStubId::atomic_add_id;\n+    StubId stub_id = StubId::stubgen_atomic_add_id;\n@@ -513,1 +513,1 @@\n-    StubGenStubId stub_id = StubGenStubId::atomic_xchg_id;\n+    StubId stub_id = StubId::stubgen_atomic_xchg_id;\n@@ -564,1 +564,1 @@\n-    StubGenStubId stub_id = StubGenStubId::atomic_cmpxchg_id;\n+    StubId stub_id = StubId::stubgen_atomic_cmpxchg_id;\n@@ -603,1 +603,1 @@\n-    StubGenStubId stub_id = StubGenStubId::atomic_cmpxchg_long_id;\n+    StubId stub_id = StubId::stubgen_atomic_cmpxchg_long_id;\n@@ -641,1 +641,1 @@\n-    StubGenStubId stub_id = StubGenStubId::atomic_load_long_id;\n+    StubId stub_id = StubId::stubgen_atomic_load_long_id;\n@@ -666,1 +666,1 @@\n-    StubGenStubId stub_id = StubGenStubId::atomic_store_long_id;\n+    StubId stub_id = StubId::stubgen_atomic_store_long_id;\n@@ -709,1 +709,1 @@\n-    StubGenStubId stub_id = StubGenStubId::partial_subtype_check_id;\n+    StubId stub_id = StubId::stubgen_partial_subtype_check_id;\n@@ -799,1 +799,1 @@\n-    StubGenStubId stub_id = StubGenStubId::verify_oop_id;\n+    StubId stub_id = StubId::stubgen_verify_oop_id;\n@@ -2030,1 +2030,1 @@\n-  address generate_primitive_copy(StubGenStubId stub_id, address nooverlap_target = nullptr) {\n+  address generate_primitive_copy(StubId stub_id, address nooverlap_target = nullptr) {\n@@ -2037,1 +2037,1 @@\n-    case jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_jbyte_disjoint_arraycopy_id:\n@@ -2043,1 +2043,1 @@\n-    case jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_jshort_disjoint_arraycopy_id:\n@@ -2049,1 +2049,1 @@\n-    case jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_jint_disjoint_arraycopy_id:\n@@ -2055,1 +2055,1 @@\n-    case jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_jlong_disjoint_arraycopy_id:\n@@ -2061,1 +2061,1 @@\n-    case arrayof_jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id:\n@@ -2067,1 +2067,1 @@\n-    case arrayof_jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id:\n@@ -2073,1 +2073,1 @@\n-    case arrayof_jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_disjoint_arraycopy_id:\n@@ -2079,1 +2079,1 @@\n-    case arrayof_jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id:\n@@ -2085,1 +2085,1 @@\n-    case jbyte_arraycopy_id:\n+    case StubId::stubgen_jbyte_arraycopy_id:\n@@ -2091,1 +2091,1 @@\n-    case jshort_arraycopy_id:\n+    case StubId::stubgen_jshort_arraycopy_id:\n@@ -2097,1 +2097,1 @@\n-    case jint_arraycopy_id:\n+    case StubId::stubgen_jint_arraycopy_id:\n@@ -2103,1 +2103,1 @@\n-    case jlong_arraycopy_id:\n+    case StubId::stubgen_jlong_arraycopy_id:\n@@ -2109,1 +2109,1 @@\n-    case arrayof_jbyte_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_arraycopy_id:\n@@ -2115,1 +2115,1 @@\n-    case arrayof_jshort_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_arraycopy_id:\n@@ -2121,1 +2121,1 @@\n-    case arrayof_jint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_arraycopy_id:\n@@ -2304,1 +2304,1 @@\n-  address generate_oop_copy(StubGenStubId stub_id, address nooverlap_target = nullptr) {\n+  address generate_oop_copy(StubId stub_id, address nooverlap_target = nullptr) {\n@@ -2310,1 +2310,1 @@\n-    case oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -2315,1 +2315,1 @@\n-    case arrayof_oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_id:\n@@ -2320,1 +2320,1 @@\n-    case oop_arraycopy_id:\n+    case StubId::stubgen_oop_arraycopy_id:\n@@ -2325,1 +2325,1 @@\n-    case arrayof_oop_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_id:\n@@ -2479,1 +2479,1 @@\n-    StubGenStubId stub_id = StubGenStubId::unsafe_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_unsafe_arraycopy_id;\n@@ -2607,1 +2607,1 @@\n-    StubGenStubId stub_id = StubGenStubId::checkcast_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_checkcast_arraycopy_id;\n@@ -2775,1 +2775,1 @@\n-    StubGenStubId stub_id = StubGenStubId::generic_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_generic_arraycopy_id;\n@@ -3011,11 +3011,11 @@\n-    StubRoutines::_jbyte_disjoint_arraycopy  = generate_primitive_copy(StubGenStubId::jbyte_disjoint_arraycopy_id);\n-    StubRoutines::_jshort_disjoint_arraycopy = generate_primitive_copy(StubGenStubId::jshort_disjoint_arraycopy_id);\n-    StubRoutines::_jint_disjoint_arraycopy   = generate_primitive_copy(StubGenStubId::jint_disjoint_arraycopy_id);\n-    StubRoutines::_jlong_disjoint_arraycopy  = generate_primitive_copy(StubGenStubId::jlong_disjoint_arraycopy_id);\n-    StubRoutines::_oop_disjoint_arraycopy    = generate_oop_copy      (StubGenStubId::oop_disjoint_arraycopy_id);\n-\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = generate_primitive_copy(StubGenStubId::arrayof_jbyte_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_primitive_copy(StubGenStubId::arrayof_jshort_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy   = generate_primitive_copy(StubGenStubId::arrayof_jint_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy  = generate_primitive_copy(StubGenStubId::arrayof_jlong_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_oop_disjoint_arraycopy    = generate_oop_copy      (StubGenStubId::arrayof_oop_disjoint_arraycopy_id);\n+    StubRoutines::_jbyte_disjoint_arraycopy  = generate_primitive_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id);\n+    StubRoutines::_jshort_disjoint_arraycopy = generate_primitive_copy(StubId::stubgen_jshort_disjoint_arraycopy_id);\n+    StubRoutines::_jint_disjoint_arraycopy   = generate_primitive_copy(StubId::stubgen_jint_disjoint_arraycopy_id);\n+    StubRoutines::_jlong_disjoint_arraycopy  = generate_primitive_copy(StubId::stubgen_jlong_disjoint_arraycopy_id);\n+    StubRoutines::_oop_disjoint_arraycopy    = generate_oop_copy      (StubId::stubgen_oop_disjoint_arraycopy_id);\n+\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = generate_primitive_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_primitive_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy   = generate_primitive_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy  = generate_primitive_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_oop_disjoint_arraycopy    = generate_oop_copy      (StubId::stubgen_arrayof_oop_disjoint_arraycopy_id);\n@@ -3024,8 +3024,8 @@\n-    StubRoutines::_jbyte_arraycopy  = generate_primitive_copy(StubGenStubId::jbyte_arraycopy_id, StubRoutines::_jbyte_disjoint_arraycopy);\n-    StubRoutines::_jshort_arraycopy = generate_primitive_copy(StubGenStubId::jshort_arraycopy_id, StubRoutines::_jshort_disjoint_arraycopy);\n-    StubRoutines::_jint_arraycopy   = generate_primitive_copy(StubGenStubId::jint_arraycopy_id, StubRoutines::_jint_disjoint_arraycopy);\n-    StubRoutines::_jlong_arraycopy  = generate_primitive_copy(StubGenStubId::jlong_arraycopy_id, StubRoutines::_jlong_disjoint_arraycopy);\n-    StubRoutines::_oop_arraycopy    = generate_oop_copy      (StubGenStubId::oop_arraycopy_id, StubRoutines::_oop_disjoint_arraycopy);\n-\n-    StubRoutines::_arrayof_jbyte_arraycopy    = generate_primitive_copy(StubGenStubId::arrayof_jbyte_arraycopy_id, StubRoutines::_arrayof_jbyte_disjoint_arraycopy);\n-    StubRoutines::_arrayof_jshort_arraycopy   = generate_primitive_copy(StubGenStubId::arrayof_jshort_arraycopy_id, StubRoutines::_arrayof_jshort_disjoint_arraycopy);\n+    StubRoutines::_jbyte_arraycopy  = generate_primitive_copy(StubId::stubgen_jbyte_arraycopy_id, StubRoutines::_jbyte_disjoint_arraycopy);\n+    StubRoutines::_jshort_arraycopy = generate_primitive_copy(StubId::stubgen_jshort_arraycopy_id, StubRoutines::_jshort_disjoint_arraycopy);\n+    StubRoutines::_jint_arraycopy   = generate_primitive_copy(StubId::stubgen_jint_arraycopy_id, StubRoutines::_jint_disjoint_arraycopy);\n+    StubRoutines::_jlong_arraycopy  = generate_primitive_copy(StubId::stubgen_jlong_arraycopy_id, StubRoutines::_jlong_disjoint_arraycopy);\n+    StubRoutines::_oop_arraycopy    = generate_oop_copy      (StubId::stubgen_oop_arraycopy_id, StubRoutines::_oop_disjoint_arraycopy);\n+\n+    StubRoutines::_arrayof_jbyte_arraycopy    = generate_primitive_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id, StubRoutines::_arrayof_jbyte_disjoint_arraycopy);\n+    StubRoutines::_arrayof_jshort_arraycopy   = generate_primitive_copy(StubId::stubgen_arrayof_jshort_arraycopy_id, StubRoutines::_arrayof_jshort_disjoint_arraycopy);\n@@ -3034,1 +3034,1 @@\n-    StubRoutines::_arrayof_jint_arraycopy     = generate_primitive_copy(StubGenStubId::arrayof_jint_arraycopy_id, StubRoutines::_arrayof_jint_disjoint_arraycopy);\n+    StubRoutines::_arrayof_jint_arraycopy     = generate_primitive_copy(StubId::stubgen_arrayof_jint_arraycopy_id, StubRoutines::_arrayof_jint_disjoint_arraycopy);\n@@ -3039,1 +3039,1 @@\n-      StubRoutines::_arrayof_oop_arraycopy    = generate_oop_copy      (StubGenStubId::arrayof_oop_arraycopy_id, StubRoutines::_arrayof_oop_disjoint_arraycopy);\n+      StubRoutines::_arrayof_oop_arraycopy    = generate_oop_copy      (StubId::stubgen_arrayof_oop_arraycopy_id, StubRoutines::_arrayof_oop_disjoint_arraycopy);\n@@ -3054,1 +3054,1 @@\n-    StubGenStubId stub_id = StubGenStubId::method_entry_barrier_id;\n+    StubId stub_id = StubId::stubgen_method_entry_barrier_id;\n@@ -3108,1 +3108,1 @@\n-  address generate_cont_thaw(StubGenStubId stub_id) {\n+  address generate_cont_thaw(StubId stub_id) {\n@@ -3115,1 +3115,1 @@\n-    return generate_cont_thaw(StubGenStubId::cont_thaw_id);\n+    return generate_cont_thaw(StubId::stubgen_cont_thaw_id);\n@@ -3119,1 +3119,1 @@\n-    return generate_cont_thaw(StubGenStubId::cont_returnBarrier_id);\n+    return generate_cont_thaw(StubId::stubgen_cont_returnBarrier_id);\n@@ -3123,1 +3123,1 @@\n-    return generate_cont_thaw(StubGenStubId::cont_returnBarrierExc_id);\n+    return generate_cont_thaw(StubId::stubgen_cont_returnBarrierExc_id);\n@@ -3206,1 +3206,1 @@\n-  StubGenerator(CodeBuffer* code, StubGenBlobId blob_id) : StubCodeGenerator(code, blob_id) {\n+  StubGenerator(CodeBuffer* code, BlobId blob_id) : StubCodeGenerator(code, blob_id) {\n@@ -3208,1 +3208,1 @@\n-    case preuniverse_id:\n+    case BlobId::stubgen_preuniverse_id:\n@@ -3211,1 +3211,1 @@\n-    case initial_id:\n+    case BlobId::stubgen_initial_id:\n@@ -3214,1 +3214,1 @@\n-     case continuation_id:\n+     case BlobId::stubgen_continuation_id:\n@@ -3217,1 +3217,1 @@\n-    case compiler_id:\n+    case BlobId::stubgen_compiler_id:\n@@ -3220,1 +3220,1 @@\n-    case final_id:\n+    case BlobId::stubgen_final_id:\n@@ -3224,1 +3224,1 @@\n-      fatal(\"unexpected blob id: %d\", blob_id);\n+      fatal(\"unexpected blob id: %s\", StubInfo::name(blob_id));\n@@ -3230,1 +3230,1 @@\n-void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id) {\n+void StubGenerator_generate(CodeBuffer* code, BlobId blob_id) {\n","filename":"src\/hotspot\/cpu\/arm\/stubGenerator_arm.cpp","additions":70,"deletions":70,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-  StubGenStubId stub_id = StubGenStubId::aescrypt_encryptBlock_id;\n+  StubId stub_id = StubId::stubgen_aescrypt_encryptBlock_id;\n@@ -320,1 +320,1 @@\n-  StubGenStubId stub_id = StubGenStubId::aescrypt_decryptBlock_id;\n+  StubId stub_id = StubId::stubgen_aescrypt_decryptBlock_id;\n@@ -541,1 +541,1 @@\n-  StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_encryptAESCrypt_id;\n+  StubId stub_id = StubId::stubgen_cipherBlockChaining_encryptAESCrypt_id;\n@@ -607,1 +607,1 @@\n-  StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_decryptAESCrypt_id;\n+  StubId stub_id = StubId::stubgen_cipherBlockChaining_decryptAESCrypt_id;\n","filename":"src\/hotspot\/cpu\/arm\/stubRoutinesCrypto_arm.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -64,2 +64,2 @@\n-  address stub = _throw_index_out_of_bounds_exception ? Runtime1::entry_for(C1StubId::throw_index_exception_id)\n-                                                      : Runtime1::entry_for(C1StubId::throw_range_check_failed_id);\n+  address stub = _throw_index_out_of_bounds_exception ? Runtime1::entry_for(StubId::c1_throw_index_exception_id)\n+                                                      : Runtime1::entry_for(StubId::c1_throw_range_check_failed_id);\n@@ -94,1 +94,1 @@\n-  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -118,1 +118,1 @@\n-  address a = Runtime1::entry_for(C1StubId::counter_overflow_id);\n+  address a = Runtime1::entry_for(StubId::c1_counter_overflow_id);\n@@ -135,1 +135,1 @@\n-  address stub = Runtime1::entry_for(C1StubId::throw_div0_exception_id);\n+  address stub = Runtime1::entry_for(StubId::c1_throw_div0_exception_id);\n@@ -150,1 +150,1 @@\n-    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -152,1 +152,1 @@\n-    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(StubId::c1_throw_null_pointer_exception_id);\n@@ -184,1 +184,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, StubId stub_id) {\n@@ -189,3 +189,3 @@\n-  assert(stub_id == C1StubId::new_instance_id                 ||\n-         stub_id == C1StubId::fast_new_instance_id            ||\n-         stub_id == C1StubId::fast_new_instance_init_check_id,\n+  assert(stub_id == StubId::c1_new_instance_id                 ||\n+         stub_id == StubId::c1_fast_new_instance_id            ||\n+         stub_id == StubId::c1_fast_new_instance_init_check_id,\n@@ -221,1 +221,1 @@\n-  address entry = Runtime1::entry_for(C1StubId::new_type_array_id);\n+  address entry = Runtime1::entry_for(StubId::c1_new_type_array_id);\n@@ -244,1 +244,1 @@\n-  address entry = Runtime1::entry_for(C1StubId::new_object_array_id);\n+  address entry = Runtime1::entry_for(StubId::c1_new_object_array_id);\n@@ -257,1 +257,1 @@\n-  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? C1StubId::monitorenter_id : C1StubId::monitorenter_nofpu_id);\n+  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? StubId::c1_monitorenter_id : StubId::c1_monitorenter_nofpu_id);\n@@ -274,1 +274,1 @@\n-  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? C1StubId::monitorexit_id : C1StubId::monitorexit_nofpu_id);\n+  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? StubId::c1_monitorexit_id : StubId::c1_monitorexit_nofpu_id);\n@@ -388,2 +388,2 @@\n-    case access_field_id:  target = Runtime1::entry_for(C1StubId::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n+    case access_field_id:  target = Runtime1::entry_for(StubId::c1_access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for(StubId::c1_load_klass_patching_id);\n@@ -391,1 +391,1 @@\n-    case load_mirror_id:   target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n+    case load_mirror_id:   target = Runtime1::entry_for(StubId::c1_load_mirror_patching_id);\n@@ -393,1 +393,1 @@\n-    case load_appendix_id: target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n+    case load_appendix_id: target = Runtime1::entry_for(StubId::c1_load_appendix_patching_id);\n@@ -419,1 +419,1 @@\n-  address stub = Runtime1::entry_for(C1StubId::deoptimize_id);\n+  address stub = Runtime1::entry_for(StubId::c1_deoptimize_id);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-  address entry_point = CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::handle_exception_from_callee_id));\n+  address entry_point = CAST_FROM_FN_PTR(address, Runtime1::entry_for(StubId::c1_handle_exception_from_callee_id));\n@@ -244,1 +244,1 @@\n-  address unwind_stub = Runtime1::entry_for(C1StubId::unwind_exception_id);\n+  address unwind_stub = Runtime1::entry_for(StubId::c1_unwind_exception_id);\n@@ -1791,2 +1791,2 @@\n-  address stub = Runtime1::entry_for(compilation()->has_fpu_code() ? C1StubId::handle_exception_id\n-                                                                   : C1StubId::handle_exception_nofpu_id);\n+  address stub = Runtime1::entry_for(compilation()->has_fpu_code() ? StubId::c1_handle_exception_id\n+                                                                   : StubId::c1_handle_exception_nofpu_id);\n@@ -1983,1 +1983,1 @@\n-      address slow_stc = Runtime1::entry_for(C1StubId::slow_subtype_check_id);\n+      address slow_stc = Runtime1::entry_for(StubId::c1_slow_subtype_check_id);\n@@ -2411,1 +2411,1 @@\n-      address entry = Runtime1::entry_for(C1StubId::slow_subtype_check_id);\n+      address entry = Runtime1::entry_for(StubId::c1_slow_subtype_check_id);\n@@ -2502,1 +2502,1 @@\n-    const address slow_path = Runtime1::entry_for(C1StubId::slow_subtype_check_id);\n+    const address slow_path = Runtime1::entry_for(StubId::c1_slow_subtype_check_id);\n@@ -2804,3 +2804,3 @@\n-  if (dest == Runtime1::entry_for(C1StubId::register_finalizer_id) ||\n-      dest == Runtime1::entry_for(C1StubId::new_multi_array_id   ) ||\n-      dest == Runtime1::entry_for(C1StubId::is_instance_of_id    )) {\n+  if (dest == Runtime1::entry_for(StubId::c1_register_finalizer_id) ||\n+      dest == Runtime1::entry_for(StubId::c1_new_multi_array_id   ) ||\n+      dest == Runtime1::entry_for(StubId::c1_is_instance_of_id    )) {\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -979,1 +979,1 @@\n-  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(StubId::c1_new_multi_array_id),\n@@ -1014,1 +1014,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id,\n+    stub = new SimpleExceptionStub(StubId::c1_throw_incompatible_class_change_error_id,\n@@ -1022,1 +1022,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_class_cast_exception_id, obj.result(), info_for_exception);\n@@ -1056,1 +1056,1 @@\n-  return Runtime1::entry_for(C1StubId::is_instance_of_id);\n+  return Runtime1::entry_for(StubId::c1_is_instance_of_id);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-\/\/    call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)),\n+\/\/    call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)),\n@@ -387,1 +387,1 @@\n-    \/\/call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)),\n+    \/\/call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)),\n@@ -416,1 +416,1 @@\n-    \/\/const address exception_entry = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n+    \/\/const address exception_entry = Runtime1::entry_for(StubId::c1_throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n+    } else if (_stub_id == (int)StubId::c1_forward_exception_id) {\n@@ -104,2 +104,2 @@\n-      \/\/load_const_optimized(R0, Runtime1::entry_for(C1StubId::forward_exception_id));\n-      add_const_optimized(R0, R29_TOC, MacroAssembler::offset_to_global_toc(Runtime1::entry_for(C1StubId::forward_exception_id)));\n+      \/\/load_const_optimized(R0, Runtime1::entry_for(StubId::c1_forward_exception_id));\n+      add_const_optimized(R0, R29_TOC, MacroAssembler::offset_to_global_toc(Runtime1::entry_for(StubId::c1_forward_exception_id)));\n@@ -394,1 +394,1 @@\n-OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(StubId id, StubAssembler* sasm) {\n@@ -403,1 +403,1 @@\n-    case C1StubId::forward_exception_id:\n+    case StubId::c1_forward_exception_id:\n@@ -409,3 +409,3 @@\n-    case C1StubId::new_instance_id:\n-    case C1StubId::fast_new_instance_id:\n-    case C1StubId::fast_new_instance_init_check_id:\n+    case StubId::c1_new_instance_id:\n+    case StubId::c1_fast_new_instance_id:\n+    case StubId::c1_fast_new_instance_init_check_id:\n@@ -413,1 +413,1 @@\n-        if (id == C1StubId::new_instance_id) {\n+        if (id == StubId::c1_new_instance_id) {\n@@ -415,1 +415,1 @@\n-        } else if (id == C1StubId::fast_new_instance_id) {\n+        } else if (id == StubId::c1_fast_new_instance_id) {\n@@ -418,1 +418,1 @@\n-          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n+          assert(id == StubId::c1_fast_new_instance_init_check_id, \"bad StubId\");\n@@ -428,1 +428,1 @@\n-    case C1StubId::counter_overflow_id:\n+    case StubId::c1_counter_overflow_id:\n@@ -433,2 +433,2 @@\n-    case C1StubId::new_type_array_id:\n-    case C1StubId::new_object_array_id:\n+    case StubId::c1_new_type_array_id:\n+    case StubId::c1_new_object_array_id:\n@@ -436,1 +436,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -445,1 +445,1 @@\n-          int tag = (id == C1StubId::new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value;\n+          int tag = (id == StubId::c1_new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value;\n@@ -459,1 +459,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -467,1 +467,1 @@\n-    case C1StubId::new_multi_array_id:\n+    case StubId::c1_new_multi_array_id:\n@@ -477,1 +477,1 @@\n-    case C1StubId::register_finalizer_id:\n+    case StubId::c1_register_finalizer_id:\n@@ -507,1 +507,1 @@\n-    case C1StubId::throw_range_check_failed_id:\n+    case StubId::c1_throw_range_check_failed_id:\n@@ -514,1 +514,1 @@\n-    case C1StubId::throw_index_exception_id:\n+    case StubId::c1_throw_index_exception_id:\n@@ -521,1 +521,1 @@\n-    case C1StubId::throw_div0_exception_id:\n+    case StubId::c1_throw_div0_exception_id:\n@@ -528,1 +528,1 @@\n-    case C1StubId::throw_null_pointer_exception_id:\n+    case StubId::c1_throw_null_pointer_exception_id:\n@@ -535,2 +535,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -543,1 +543,1 @@\n-    case C1StubId::handle_exception_from_callee_id:\n+    case StubId::c1_handle_exception_from_callee_id:\n@@ -550,1 +550,1 @@\n-    case C1StubId::unwind_exception_id:\n+    case StubId::c1_unwind_exception_id:\n@@ -578,1 +578,1 @@\n-    case C1StubId::throw_array_store_exception_id:\n+    case StubId::c1_throw_array_store_exception_id:\n@@ -585,1 +585,1 @@\n-    case C1StubId::throw_class_cast_exception_id:\n+    case StubId::c1_throw_class_cast_exception_id:\n@@ -592,1 +592,1 @@\n-    case C1StubId::throw_incompatible_class_change_error_id:\n+    case StubId::c1_throw_incompatible_class_change_error_id:\n@@ -599,1 +599,1 @@\n-    case C1StubId::slow_subtype_check_id:\n+    case StubId::c1_slow_subtype_check_id:\n@@ -610,1 +610,1 @@\n-    case C1StubId::is_instance_of_id:\n+    case StubId::c1_is_instance_of_id:\n@@ -677,2 +677,2 @@\n-    case C1StubId::monitorenter_nofpu_id:\n-    case C1StubId::monitorenter_id:\n+    case StubId::c1_monitorenter_nofpu_id:\n+    case StubId::c1_monitorenter_id:\n@@ -682,1 +682,1 @@\n-        int save_fpu_registers = (id == C1StubId::monitorenter_id);\n+        int save_fpu_registers = (id == StubId::c1_monitorenter_id);\n@@ -696,2 +696,2 @@\n-    case C1StubId::monitorexit_nofpu_id:\n-    case C1StubId::monitorexit_id:\n+    case StubId::c1_monitorexit_nofpu_id:\n+    case StubId::c1_monitorexit_id:\n@@ -704,1 +704,1 @@\n-        int save_fpu_registers = (id == C1StubId::monitorexit_id);\n+        int save_fpu_registers = (id == StubId::c1_monitorexit_id);\n@@ -718,1 +718,1 @@\n-    case C1StubId::deoptimize_id:\n+    case StubId::c1_deoptimize_id:\n@@ -734,1 +734,1 @@\n-    case C1StubId::access_field_patching_id:\n+    case StubId::c1_access_field_patching_id:\n@@ -741,1 +741,1 @@\n-    case C1StubId::load_klass_patching_id:\n+    case StubId::c1_load_klass_patching_id:\n@@ -748,1 +748,1 @@\n-    case C1StubId::load_mirror_patching_id:\n+    case StubId::c1_load_mirror_patching_id:\n@@ -755,1 +755,1 @@\n-    case C1StubId::load_appendix_patching_id:\n+    case StubId::c1_load_appendix_patching_id:\n@@ -762,1 +762,1 @@\n-    case C1StubId::dtrace_object_alloc_id:\n+    case StubId::c1_dtrace_object_alloc_id:\n@@ -782,1 +782,1 @@\n-    case C1StubId::predicate_failed_trap_id:\n+    case StubId::c1_predicate_failed_trap_id:\n@@ -826,1 +826,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(StubId id, StubAssembler* sasm) {\n@@ -836,1 +836,1 @@\n-  case C1StubId::forward_exception_id:\n+  case StubId::c1_forward_exception_id:\n@@ -852,2 +852,2 @@\n-  case C1StubId::handle_exception_nofpu_id:\n-  case C1StubId::handle_exception_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_id:\n@@ -855,1 +855,1 @@\n-    oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id, Rexception_pc);\n+    oop_map = save_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id, Rexception_pc);\n@@ -857,1 +857,1 @@\n-  case C1StubId::handle_exception_from_callee_id:\n+  case StubId::c1_handle_exception_from_callee_id:\n@@ -896,4 +896,4 @@\n-  case C1StubId::forward_exception_id:\n-  case C1StubId::handle_exception_nofpu_id:\n-  case C1StubId::handle_exception_id:\n-    restore_live_registers(sasm, noreg, noreg, id != C1StubId::handle_exception_nofpu_id);\n+  case StubId::c1_forward_exception_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_id:\n+    restore_live_registers(sasm, noreg, noreg, id != StubId::c1_handle_exception_nofpu_id);\n@@ -902,1 +902,1 @@\n-  case C1StubId::handle_exception_from_callee_id: {\n+  case StubId::c1_handle_exception_from_callee_id: {\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::exception_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_exception_id);\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2950,1 +2950,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_deopt_id);\n@@ -3173,1 +3173,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::uncommon_trap_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_uncommon_trap_id);\n@@ -3305,1 +3305,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(StubId id, address call_ptr) {\n@@ -3323,1 +3323,1 @@\n-  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n+  bool cause_return = (id == StubId::shared_polling_page_return_handler_id);\n@@ -3333,1 +3333,1 @@\n-  bool save_vectors = (id == SharedStubId::polling_page_vectors_safepoint_handler_id);\n+  bool save_vectors = (id == StubId::shared_polling_page_vectors_safepoint_handler_id);\n@@ -3420,1 +3420,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(StubId id, address destination) {\n@@ -3524,1 +3524,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(StubId id, address runtime_entry) {\n@@ -3847,1 +3847,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_write_checkpoint_id);\n@@ -3884,1 +3884,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_return_lease_id);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-    StubGenStubId stub_id = StubGenStubId::call_stub_id;\n+    StubId stub_id = StubId::stubgen_call_stub_id;\n@@ -368,1 +368,1 @@\n-    StubGenStubId stub_id = StubGenStubId::catch_exception_id;\n+    StubId stub_id = StubId::stubgen_catch_exception_id;\n@@ -424,1 +424,1 @@\n-    StubGenStubId stub_id = StubGenStubId::forward_exception_id;\n+    StubId stub_id = StubId::stubgen_forward_exception_id;\n@@ -709,1 +709,1 @@\n-  address generate_fill(StubGenStubId stub_id) {\n+  address generate_fill(StubId stub_id) {\n@@ -714,1 +714,1 @@\n-    case jbyte_fill_id:\n+    case StubId::stubgen_jbyte_fill_id:\n@@ -718,1 +718,1 @@\n-    case jshort_fill_id:\n+    case StubId::stubgen_jshort_fill_id:\n@@ -722,1 +722,1 @@\n-    case jint_fill_id:\n+    case StubId::stubgen_jint_fill_id:\n@@ -726,1 +726,1 @@\n-    case arrayof_jbyte_fill_id:\n+    case StubId::stubgen_arrayof_jbyte_fill_id:\n@@ -730,1 +730,1 @@\n-    case arrayof_jshort_fill_id:\n+    case StubId::stubgen_arrayof_jshort_fill_id:\n@@ -734,1 +734,1 @@\n-    case arrayof_jint_fill_id:\n+    case StubId::stubgen_arrayof_jint_fill_id:\n@@ -985,1 +985,1 @@\n-  address generate_disjoint_byte_copy(StubGenStubId stub_id) {\n+  address generate_disjoint_byte_copy(StubId stub_id) {\n@@ -988,1 +988,1 @@\n-    case jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_jbyte_disjoint_arraycopy_id:\n@@ -991,1 +991,1 @@\n-    case arrayof_jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id:\n@@ -1152,1 +1152,1 @@\n-  address generate_conjoint_byte_copy(StubGenStubId stub_id) {\n+  address generate_conjoint_byte_copy(StubId stub_id) {\n@@ -1155,1 +1155,1 @@\n-    case jbyte_arraycopy_id:\n+    case StubId::stubgen_jbyte_arraycopy_id:\n@@ -1158,1 +1158,1 @@\n-    case arrayof_jbyte_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_arraycopy_id:\n@@ -1253,1 +1253,1 @@\n-  address generate_disjoint_short_copy(StubGenStubId stub_id) {\n+  address generate_disjoint_short_copy(StubId stub_id) {\n@@ -1256,1 +1256,1 @@\n-    case jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_jshort_disjoint_arraycopy_id:\n@@ -1259,1 +1259,1 @@\n-    case arrayof_jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id:\n@@ -1425,1 +1425,1 @@\n-  address generate_conjoint_short_copy(StubGenStubId stub_id) {\n+  address generate_conjoint_short_copy(StubId stub_id) {\n@@ -1428,1 +1428,1 @@\n-    case jshort_arraycopy_id:\n+    case StubId::stubgen_jshort_arraycopy_id:\n@@ -1431,1 +1431,1 @@\n-    case arrayof_jshort_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_arraycopy_id:\n@@ -1586,1 +1586,1 @@\n-  address generate_disjoint_int_copy(StubGenStubId stub_id) {\n+  address generate_disjoint_int_copy(StubId stub_id) {\n@@ -1589,1 +1589,1 @@\n-    case jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_jint_disjoint_arraycopy_id:\n@@ -1592,1 +1592,1 @@\n-    case arrayof_jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_disjoint_arraycopy_id:\n@@ -1724,1 +1724,1 @@\n-  address generate_conjoint_int_copy(StubGenStubId stub_id) {\n+  address generate_conjoint_int_copy(StubId stub_id) {\n@@ -1727,1 +1727,1 @@\n-    case jint_arraycopy_id:\n+    case StubId::stubgen_jint_arraycopy_id:\n@@ -1730,1 +1730,1 @@\n-    case arrayof_jint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_arraycopy_id:\n@@ -1845,1 +1845,1 @@\n-  address generate_disjoint_long_copy(StubGenStubId stub_id) {\n+  address generate_disjoint_long_copy(StubId stub_id) {\n@@ -1848,1 +1848,1 @@\n-    case jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_jlong_disjoint_arraycopy_id:\n@@ -1851,1 +1851,1 @@\n-    case arrayof_jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id:\n@@ -1962,1 +1962,1 @@\n-  address generate_conjoint_long_copy(StubGenStubId stub_id) {\n+  address generate_conjoint_long_copy(StubId stub_id) {\n@@ -1965,1 +1965,1 @@\n-    case jlong_arraycopy_id:\n+    case StubId::stubgen_jlong_arraycopy_id:\n@@ -1968,1 +1968,1 @@\n-    case arrayof_jlong_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_arraycopy_id:\n@@ -2003,1 +2003,1 @@\n-  address generate_conjoint_oop_copy(StubGenStubId stub_id) {\n+  address generate_conjoint_oop_copy(StubId stub_id) {\n@@ -2007,1 +2007,1 @@\n-    case oop_arraycopy_id:\n+    case StubId::stubgen_oop_arraycopy_id:\n@@ -2011,1 +2011,1 @@\n-    case arrayof_oop_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_id:\n@@ -2015,1 +2015,1 @@\n-    case oop_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_arraycopy_uninit_id:\n@@ -2019,1 +2019,1 @@\n-    case arrayof_oop_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_uninit_id:\n@@ -2074,1 +2074,1 @@\n-  address generate_disjoint_oop_copy(StubGenStubId stub_id) {\n+  address generate_disjoint_oop_copy(StubId stub_id) {\n@@ -2078,1 +2078,1 @@\n-    case oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -2082,1 +2082,1 @@\n-    case arrayof_oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_id:\n@@ -2086,1 +2086,1 @@\n-    case oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_uninit_id:\n@@ -2090,1 +2090,1 @@\n-    case arrayof_oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id:\n@@ -2166,1 +2166,1 @@\n-  address generate_checkcast_copy(StubGenStubId stub_id) {\n+  address generate_checkcast_copy(StubId stub_id) {\n@@ -2182,1 +2182,1 @@\n-    case checkcast_arraycopy_id:\n+    case StubId::stubgen_checkcast_arraycopy_id:\n@@ -2185,1 +2185,1 @@\n-    case checkcast_arraycopy_uninit_id:\n+    case StubId::stubgen_checkcast_arraycopy_uninit_id:\n@@ -2324,1 +2324,1 @@\n-    StubGenStubId stub_id = StubGenStubId::unsafe_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_unsafe_arraycopy_id;\n@@ -2437,1 +2437,1 @@\n-    StubCodeMark mark(this, StubGenStubId::unsafe_setmemory_id);\n+    StubCodeMark mark(this, StubId::stubgen_unsafe_setmemory_id);\n@@ -2530,1 +2530,1 @@\n-    StubGenStubId stub_id = StubGenStubId::generic_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_generic_arraycopy_id;\n@@ -2733,1 +2733,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_encryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_encryptBlock_id;\n@@ -2941,1 +2941,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_decryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_decryptBlock_id;\n@@ -3179,1 +3179,1 @@\n-  address generate_sha256_implCompress(StubGenStubId stub_id) {\n+  address generate_sha256_implCompress(StubId stub_id) {\n@@ -3183,1 +3183,1 @@\n-    case sha256_implCompress_id:\n+    case StubId::stubgen_sha256_implCompress_id:\n@@ -3186,1 +3186,1 @@\n-    case sha256_implCompressMB_id:\n+    case StubId::stubgen_sha256_implCompressMB_id:\n@@ -3201,1 +3201,1 @@\n-  address generate_sha512_implCompress(StubGenStubId stub_id) {\n+  address generate_sha512_implCompress(StubId stub_id) {\n@@ -3205,1 +3205,1 @@\n-    case sha512_implCompress_id:\n+    case StubId::stubgen_sha512_implCompress_id:\n@@ -3208,1 +3208,1 @@\n-    case sha512_implCompressMB_id:\n+    case StubId::stubgen_sha512_implCompressMB_id:\n@@ -3225,1 +3225,1 @@\n-    StubGenStubId stub_id = StubGenStubId::data_cache_writeback_id;\n+    StubId stub_id = StubId::stubgen_data_cache_writeback_id;\n@@ -3239,1 +3239,1 @@\n-    StubGenStubId stub_id = StubGenStubId::data_cache_writeback_sync_id;\n+    StubId stub_id = StubId::stubgen_data_cache_writeback_sync_id;\n@@ -3260,6 +3260,6 @@\n-    StubRoutines::_jbyte_disjoint_arraycopy       = generate_disjoint_byte_copy(StubGenStubId::jbyte_disjoint_arraycopy_id);\n-    StubRoutines::_jshort_disjoint_arraycopy      = generate_disjoint_short_copy(StubGenStubId::jshort_disjoint_arraycopy_id);\n-    StubRoutines::_jint_disjoint_arraycopy        = generate_disjoint_int_copy(StubGenStubId::jint_disjoint_arraycopy_id);\n-    StubRoutines::_jlong_disjoint_arraycopy       = generate_disjoint_long_copy(StubGenStubId::jlong_disjoint_arraycopy_id);\n-    StubRoutines::_oop_disjoint_arraycopy         = generate_disjoint_oop_copy(StubGenStubId::oop_disjoint_arraycopy_id);\n-    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_oop_copy(StubGenStubId::oop_disjoint_arraycopy_uninit_id);\n+    StubRoutines::_jbyte_disjoint_arraycopy       = generate_disjoint_byte_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id);\n+    StubRoutines::_jshort_disjoint_arraycopy      = generate_disjoint_short_copy(StubId::stubgen_jshort_disjoint_arraycopy_id);\n+    StubRoutines::_jint_disjoint_arraycopy        = generate_disjoint_int_copy(StubId::stubgen_jint_disjoint_arraycopy_id);\n+    StubRoutines::_jlong_disjoint_arraycopy       = generate_disjoint_long_copy(StubId::stubgen_jlong_disjoint_arraycopy_id);\n+    StubRoutines::_oop_disjoint_arraycopy         = generate_disjoint_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_id);\n+    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id);\n@@ -3268,6 +3268,6 @@\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy      = generate_disjoint_byte_copy(StubGenStubId::arrayof_jbyte_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy     = generate_disjoint_short_copy(StubGenStubId::arrayof_jshort_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy       = generate_disjoint_int_copy(StubGenStubId::arrayof_jint_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy      = generate_disjoint_long_copy(StubGenStubId::arrayof_jlong_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_oop_disjoint_arraycopy        = generate_disjoint_oop_copy(StubGenStubId::arrayof_oop_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit = generate_disjoint_oop_copy(StubGenStubId::oop_disjoint_arraycopy_uninit_id);\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy      = generate_disjoint_byte_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy     = generate_disjoint_short_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy       = generate_disjoint_int_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy      = generate_disjoint_long_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_oop_disjoint_arraycopy        = generate_disjoint_oop_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit = generate_disjoint_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id);\n@@ -3276,6 +3276,6 @@\n-    StubRoutines::_jbyte_arraycopy      = generate_conjoint_byte_copy(StubGenStubId::jbyte_arraycopy_id);\n-    StubRoutines::_jshort_arraycopy     = generate_conjoint_short_copy(StubGenStubId::jshort_arraycopy_id);\n-    StubRoutines::_jint_arraycopy       = generate_conjoint_int_copy(StubGenStubId::jint_arraycopy_id);\n-    StubRoutines::_jlong_arraycopy      = generate_conjoint_long_copy(StubGenStubId::jlong_arraycopy_id);\n-    StubRoutines::_oop_arraycopy        = generate_conjoint_oop_copy(StubGenStubId::oop_arraycopy_id);\n-    StubRoutines::_oop_arraycopy_uninit = generate_conjoint_oop_copy(StubGenStubId::oop_arraycopy_uninit_id);\n+    StubRoutines::_jbyte_arraycopy      = generate_conjoint_byte_copy(StubId::stubgen_jbyte_arraycopy_id);\n+    StubRoutines::_jshort_arraycopy     = generate_conjoint_short_copy(StubId::stubgen_jshort_arraycopy_id);\n+    StubRoutines::_jint_arraycopy       = generate_conjoint_int_copy(StubId::stubgen_jint_arraycopy_id);\n+    StubRoutines::_jlong_arraycopy      = generate_conjoint_long_copy(StubId::stubgen_jlong_arraycopy_id);\n+    StubRoutines::_oop_arraycopy        = generate_conjoint_oop_copy(StubId::stubgen_oop_arraycopy_id);\n+    StubRoutines::_oop_arraycopy_uninit = generate_conjoint_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id);\n@@ -3284,6 +3284,6 @@\n-    StubRoutines::_arrayof_jbyte_arraycopy      = generate_conjoint_byte_copy(StubGenStubId::arrayof_jbyte_arraycopy_id);\n-    StubRoutines::_arrayof_jshort_arraycopy     = generate_conjoint_short_copy(StubGenStubId::arrayof_jshort_arraycopy_id);\n-    StubRoutines::_arrayof_jint_arraycopy       = generate_conjoint_int_copy(StubGenStubId::arrayof_jint_arraycopy_id);\n-    StubRoutines::_arrayof_jlong_arraycopy      = generate_conjoint_long_copy(StubGenStubId::arrayof_jlong_arraycopy_id);\n-    StubRoutines::_arrayof_oop_arraycopy        = generate_conjoint_oop_copy(StubGenStubId::arrayof_oop_arraycopy_id);\n-    StubRoutines::_arrayof_oop_arraycopy_uninit = generate_conjoint_oop_copy(StubGenStubId::arrayof_oop_arraycopy_id);\n+    StubRoutines::_arrayof_jbyte_arraycopy      = generate_conjoint_byte_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id);\n+    StubRoutines::_arrayof_jshort_arraycopy     = generate_conjoint_short_copy(StubId::stubgen_arrayof_jshort_arraycopy_id);\n+    StubRoutines::_arrayof_jint_arraycopy       = generate_conjoint_int_copy(StubId::stubgen_arrayof_jint_arraycopy_id);\n+    StubRoutines::_arrayof_jlong_arraycopy      = generate_conjoint_long_copy(StubId::stubgen_arrayof_jlong_arraycopy_id);\n+    StubRoutines::_arrayof_oop_arraycopy        = generate_conjoint_oop_copy(StubId::stubgen_arrayof_oop_arraycopy_id);\n+    StubRoutines::_arrayof_oop_arraycopy_uninit = generate_conjoint_oop_copy(StubId::stubgen_arrayof_oop_arraycopy_id);\n@@ -3292,2 +3292,2 @@\n-    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_id);\n-    StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_uninit_id);\n+    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id);\n+    StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_uninit_id);\n@@ -3310,6 +3310,6 @@\n-      StubRoutines::_jbyte_fill          = generate_fill(StubGenStubId::jbyte_fill_id);\n-      StubRoutines::_jshort_fill         = generate_fill(StubGenStubId::jshort_fill_id);\n-      StubRoutines::_jint_fill           = generate_fill(StubGenStubId::jint_fill_id);\n-      StubRoutines::_arrayof_jbyte_fill  = generate_fill(StubGenStubId::arrayof_jbyte_fill_id);\n-      StubRoutines::_arrayof_jshort_fill = generate_fill(StubGenStubId::arrayof_jshort_fill_id);\n-      StubRoutines::_arrayof_jint_fill   = generate_fill(StubGenStubId::arrayof_jint_fill_id);\n+      StubRoutines::_jbyte_fill          = generate_fill(StubId::stubgen_jbyte_fill_id);\n+      StubRoutines::_jshort_fill         = generate_fill(StubId::stubgen_jshort_fill_id);\n+      StubRoutines::_jint_fill           = generate_fill(StubId::stubgen_jint_fill_id);\n+      StubRoutines::_arrayof_jbyte_fill  = generate_fill(StubId::stubgen_arrayof_jbyte_fill_id);\n+      StubRoutines::_arrayof_jshort_fill = generate_fill(StubId::stubgen_arrayof_jshort_fill_id);\n+      StubRoutines::_arrayof_jint_fill   = generate_fill(StubId::stubgen_arrayof_jint_fill_id);\n@@ -3334,1 +3334,1 @@\n-    StubGenStubId stub_id = StubGenStubId::multiplyToLen_id;\n+    StubId stub_id = StubId::stubgen_multiplyToLen_id;\n@@ -3411,1 +3411,1 @@\n-    StubGenStubId stub_id = StubGenStubId::mulAdd_id;\n+    StubId stub_id = StubId::stubgen_mulAdd_id;\n@@ -3442,1 +3442,1 @@\n-    StubGenStubId stub_id = StubGenStubId::squareToLen_id;\n+    StubId stub_id = StubId::stubgen_squareToLen_id;\n@@ -3676,1 +3676,1 @@\n-  address generate_CRC32_updateBytes(StubGenStubId stub_id) {\n+  address generate_CRC32_updateBytes(StubId stub_id) {\n@@ -3679,1 +3679,1 @@\n-    case updateBytesCRC32_id:\n+    case StubId::stubgen_updateBytesCRC32_id:\n@@ -3682,1 +3682,1 @@\n-    case updateBytesCRC32C_id:\n+    case StubId::stubgen_updateBytesCRC32C_id:\n@@ -3716,1 +3716,1 @@\n-    StubGenStubId stub_id = StubGenStubId::method_entry_barrier_id;\n+    StubId stub_id = StubId::stubgen_method_entry_barrier_id;\n@@ -3814,1 +3814,1 @@\n-    StubGenStubId stub_id = StubGenStubId::base64_decodeBlock_id;\n+    StubId stub_id = StubId::stubgen_base64_decodeBlock_id;\n@@ -4403,1 +4403,1 @@\n-    StubGenStubId stub_id = StubGenStubId::base64_encodeBlock_id;\n+    StubId stub_id = StubId::stubgen_base64_encodeBlock_id;\n@@ -4694,1 +4694,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_id;\n@@ -4717,1 +4717,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_slow_path_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_slow_path_id;\n@@ -4735,1 +4735,1 @@\n-  address generate_cont_thaw(StubGenStubId stub_id) {\n+  address generate_cont_thaw(StubId stub_id) {\n@@ -4743,1 +4743,1 @@\n-    case cont_thaw_id:\n+    case StubId::stubgen_cont_thaw_id:\n@@ -4748,1 +4748,1 @@\n-    case cont_returnBarrier_id:\n+    case StubId::stubgen_cont_returnBarrier_id:\n@@ -4753,1 +4753,1 @@\n-    case cont_returnBarrierExc_id:\n+    case StubId::stubgen_cont_returnBarrierExc_id:\n@@ -4850,1 +4850,1 @@\n-    return generate_cont_thaw(StubGenStubId::cont_thaw_id);\n+    return generate_cont_thaw(StubId::stubgen_cont_thaw_id);\n@@ -4856,1 +4856,1 @@\n-    return generate_cont_thaw(StubGenStubId::cont_returnBarrier_id);\n+    return generate_cont_thaw(StubId::stubgen_cont_returnBarrier_id);\n@@ -4860,1 +4860,1 @@\n-    return generate_cont_thaw(StubGenStubId::cont_returnBarrierExc_id);\n+    return generate_cont_thaw(StubId::stubgen_cont_returnBarrierExc_id);\n@@ -4865,1 +4865,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_preempt_id;\n+    StubId stub_id = StubId::stubgen_cont_preempt_id;\n@@ -4901,1 +4901,1 @@\n-    StubGenStubId stub_id = StubGenStubId::upcall_stub_exception_handler_id;\n+    StubId stub_id = StubId::stubgen_upcall_stub_exception_handler_id;\n@@ -4920,1 +4920,1 @@\n-    StubGenStubId stub_id = StubGenStubId::upcall_stub_load_target_id;\n+    StubId stub_id = StubId::stubgen_upcall_stub_load_target_id;\n@@ -4965,1 +4965,1 @@\n-      StubRoutines::_updateBytesCRC32 = generate_CRC32_updateBytes(StubGenStubId::updateBytesCRC32_id);\n+      StubRoutines::_updateBytesCRC32 = generate_CRC32_updateBytes(StubId::stubgen_updateBytesCRC32_id);\n@@ -4971,1 +4971,1 @@\n-      StubRoutines::_updateBytesCRC32C = generate_CRC32_updateBytes(StubGenStubId::updateBytesCRC32C_id);\n+      StubRoutines::_updateBytesCRC32C = generate_CRC32_updateBytes(StubId::stubgen_updateBytesCRC32C_id);\n@@ -5053,2 +5053,2 @@\n-      StubRoutines::_sha256_implCompress   = generate_sha256_implCompress(StubGenStubId::sha256_implCompress_id);\n-      StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(StubGenStubId::sha256_implCompressMB_id);\n+      StubRoutines::_sha256_implCompress   = generate_sha256_implCompress(StubId::stubgen_sha256_implCompress_id);\n+      StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(StubId::stubgen_sha256_implCompressMB_id);\n@@ -5057,2 +5057,2 @@\n-      StubRoutines::_sha512_implCompress   = generate_sha512_implCompress(StubGenStubId::sha512_implCompress_id);\n-      StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(StubGenStubId::sha512_implCompressMB_id);\n+      StubRoutines::_sha512_implCompress   = generate_sha512_implCompress(StubId::stubgen_sha512_implCompress_id);\n+      StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(StubId::stubgen_sha512_implCompressMB_id);\n@@ -5072,1 +5072,1 @@\n-  StubGenerator(CodeBuffer* code, StubGenBlobId blob_id) : StubCodeGenerator(code, blob_id) {\n+  StubGenerator(CodeBuffer* code, BlobId blob_id) : StubCodeGenerator(code, blob_id) {\n@@ -5074,1 +5074,1 @@\n-    case preuniverse_id:\n+    case BlobId::stubgen_preuniverse_id:\n@@ -5077,1 +5077,1 @@\n-    case initial_id:\n+    case BlobId::stubgen_initial_id:\n@@ -5080,1 +5080,1 @@\n-     case continuation_id:\n+    case BlobId::stubgen_continuation_id:\n@@ -5083,1 +5083,1 @@\n-    case compiler_id:\n+    case BlobId::stubgen_compiler_id:\n@@ -5086,1 +5086,1 @@\n-    case final_id:\n+    case BlobId::stubgen_final_id:\n@@ -5090,1 +5090,1 @@\n-      fatal(\"unexpected blob id: %d\", blob_id);\n+      fatal(\"unexpected blob id: %s\", StubInfo::name(blob_id));\n@@ -5096,1 +5096,1 @@\n-void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id) {\n+void StubGenerator_generate(CodeBuffer* code, BlobId blob_id) {\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":127,"deletions":127,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::counter_overflow_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_counter_overflow_id)));\n@@ -69,1 +69,1 @@\n-    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -82,1 +82,1 @@\n-  C1StubId stub_id;\n+  StubId stub_id;\n@@ -84,1 +84,1 @@\n-    stub_id = C1StubId::throw_index_exception_id;\n+    stub_id = StubId::c1_throw_index_exception_id;\n@@ -88,1 +88,1 @@\n-    stub_id = C1StubId::throw_range_check_failed_id;\n+    stub_id = StubId::c1_throw_range_check_failed_id;\n@@ -104,1 +104,1 @@\n-  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -116,1 +116,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::throw_div0_exception_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_throw_div0_exception_id)));\n@@ -125,1 +125,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, StubId stub_id) {\n@@ -130,3 +130,3 @@\n-  assert(stub_id == C1StubId::new_instance_id                 ||\n-         stub_id == C1StubId::fast_new_instance_id            ||\n-         stub_id == C1StubId::fast_new_instance_init_check_id,\n+  assert(stub_id == StubId::c1_new_instance_id                 ||\n+         stub_id == StubId::c1_fast_new_instance_id            ||\n+         stub_id == StubId::c1_fast_new_instance_init_check_id,\n@@ -161,1 +161,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_type_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_new_type_array_id)));\n@@ -181,1 +181,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_object_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_new_object_array_id)));\n@@ -193,1 +193,1 @@\n-  C1StubId enter_id;\n+  StubId enter_id;\n@@ -195,1 +195,1 @@\n-    enter_id = C1StubId::monitorenter_id;\n+    enter_id = StubId::c1_monitorenter_id;\n@@ -197,1 +197,1 @@\n-    enter_id = C1StubId::monitorenter_nofpu_id;\n+    enter_id = StubId::c1_monitorenter_nofpu_id;\n@@ -213,1 +213,1 @@\n-  C1StubId exit_id;\n+  StubId exit_id;\n@@ -215,1 +215,1 @@\n-    exit_id = C1StubId::monitorexit_id;\n+    exit_id = StubId::c1_monitorexit_id;\n@@ -217,1 +217,1 @@\n-    exit_id = C1StubId::monitorexit_nofpu_id;\n+    exit_id = StubId::c1_monitorexit_nofpu_id;\n@@ -242,1 +242,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::deoptimize_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_deoptimize_id)));\n@@ -251,1 +251,1 @@\n-    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -253,1 +253,1 @@\n-    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(StubId::c1_throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-    __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+    __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_handle_exception_from_callee_id)));\n@@ -363,1 +363,1 @@\n-  __ far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::unwind_exception_id)));\n+  __ far_jump(RuntimeAddress(Runtime1::entry_for(StubId::c1_unwind_exception_id)));\n@@ -1099,1 +1099,1 @@\n-      __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+      __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -1114,1 +1114,1 @@\n-    __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+    __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -1402,1 +1402,1 @@\n-  C1StubId unwind_id;\n+  StubId unwind_id;\n@@ -1421,1 +1421,1 @@\n-    unwind_id = C1StubId::handle_exception_id;\n+    unwind_id = StubId::c1_handle_exception_id;\n@@ -1423,1 +1423,1 @@\n-    unwind_id = C1StubId::handle_exception_nofpu_id;\n+    unwind_id = StubId::c1_handle_exception_nofpu_id;\n@@ -2056,1 +2056,1 @@\n-      target = Runtime1::entry_for(C1StubId::access_field_patching_id);\n+      target = Runtime1::entry_for(StubId::c1_access_field_patching_id);\n@@ -2059,1 +2059,1 @@\n-      target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n+      target = Runtime1::entry_for(StubId::c1_load_klass_patching_id);\n@@ -2062,1 +2062,1 @@\n-      target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n+      target = Runtime1::entry_for(StubId::c1_load_mirror_patching_id);\n@@ -2065,1 +2065,1 @@\n-      target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n+      target = Runtime1::entry_for(StubId::c1_load_appendix_patching_id);\n@@ -2154,1 +2154,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1032,1 +1032,1 @@\n-  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(StubId::c1_new_multi_array_id),\n@@ -1064,1 +1064,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr,\n+    stub = new SimpleExceptionStub(StubId::c1_throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr,\n@@ -1072,1 +1072,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_class_cast_exception_id, obj.result(), info_for_exception);\n@@ -1107,1 +1107,1 @@\n-  return Runtime1::entry_for(C1StubId::is_instance_of_id);\n+  return Runtime1::entry_for(StubId::c1_is_instance_of_id);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)));\n@@ -324,1 +324,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n+    } else if (_stub_id == (int)StubId::c1_forward_exception_id) {\n@@ -103,1 +103,1 @@\n-      far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n+      far_jump(RuntimeAddress(Runtime1::entry_for(StubId::c1_forward_exception_id)));\n@@ -373,2 +373,2 @@\n-  assert(cb == Runtime1::blob_for(C1StubId::monitorenter_id) ||\n-         cb == Runtime1::blob_for(C1StubId::monitorenter_nofpu_id), \"must be\");\n+  assert(cb == Runtime1::blob_for(StubId::c1_monitorenter_id) ||\n+         cb == Runtime1::blob_for(StubId::c1_monitorenter_nofpu_id), \"must be\");\n@@ -402,1 +402,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(StubId id, StubAssembler *sasm) {\n@@ -414,1 +414,1 @@\n-    case C1StubId::forward_exception_id:\n+    case StubId::c1_forward_exception_id:\n@@ -433,2 +433,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -436,1 +436,1 @@\n-      oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n+      oop_map = save_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id);\n@@ -438,1 +438,1 @@\n-    case C1StubId::handle_exception_from_callee_id: {\n+    case StubId::c1_handle_exception_from_callee_id: {\n@@ -495,3 +495,3 @@\n-    case C1StubId::forward_exception_id:\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_forward_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -499,1 +499,1 @@\n-      restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n+      restore_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id);\n@@ -501,1 +501,1 @@\n-    case C1StubId::handle_exception_from_callee_id:\n+    case StubId::c1_handle_exception_from_callee_id:\n@@ -647,1 +647,1 @@\n-OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(StubId id, StubAssembler* sasm) {\n@@ -658,1 +658,1 @@\n-    case C1StubId::forward_exception_id:\n+    case StubId::c1_forward_exception_id:\n@@ -666,1 +666,1 @@\n-    case C1StubId::throw_div0_exception_id:\n+    case StubId::c1_throw_div0_exception_id:\n@@ -673,1 +673,1 @@\n-    case C1StubId::throw_null_pointer_exception_id:\n+    case StubId::c1_throw_null_pointer_exception_id:\n@@ -679,3 +679,3 @@\n-    case C1StubId::new_instance_id:\n-    case C1StubId::fast_new_instance_id:\n-    case C1StubId::fast_new_instance_init_check_id:\n+    case StubId::c1_new_instance_id:\n+    case StubId::c1_fast_new_instance_id:\n+    case StubId::c1_fast_new_instance_init_check_id:\n@@ -686,1 +686,1 @@\n-        if (id == C1StubId::new_instance_id) {\n+        if (id == StubId::c1_new_instance_id) {\n@@ -688,1 +688,1 @@\n-        } else if (id == C1StubId::fast_new_instance_id) {\n+        } else if (id == StubId::c1_fast_new_instance_id) {\n@@ -691,1 +691,1 @@\n-          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n+          assert(id == StubId::c1_fast_new_instance_init_check_id, \"bad StubId\");\n@@ -712,1 +712,1 @@\n-    case C1StubId::counter_overflow_id:\n+    case StubId::c1_counter_overflow_id:\n@@ -736,2 +736,2 @@\n-    case C1StubId::new_type_array_id:\n-    case C1StubId::new_object_array_id:\n+    case StubId::c1_new_type_array_id:\n+    case StubId::c1_new_object_array_id:\n@@ -743,1 +743,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -756,1 +756,1 @@\n-          int tag = ((id == C1StubId::new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value);\n+          int tag = ((id == StubId::c1_new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value);\n@@ -769,1 +769,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -788,1 +788,1 @@\n-    case C1StubId::new_multi_array_id:\n+    case StubId::c1_new_multi_array_id:\n@@ -811,1 +811,1 @@\n-    case C1StubId::register_finalizer_id:\n+    case StubId::c1_register_finalizer_id:\n@@ -845,1 +845,1 @@\n-    case C1StubId::throw_class_cast_exception_id:\n+    case StubId::c1_throw_class_cast_exception_id:\n@@ -852,1 +852,1 @@\n-    case C1StubId::throw_incompatible_class_change_error_id:\n+    case StubId::c1_throw_incompatible_class_change_error_id:\n@@ -860,1 +860,1 @@\n-    case C1StubId::slow_subtype_check_id:\n+    case StubId::c1_slow_subtype_check_id:\n@@ -906,1 +906,1 @@\n-    case C1StubId::monitorenter_nofpu_id:\n+    case StubId::c1_monitorenter_nofpu_id:\n@@ -909,1 +909,1 @@\n-    case C1StubId::monitorenter_id:\n+    case StubId::c1_monitorenter_id:\n@@ -928,1 +928,1 @@\n-    case C1StubId::is_instance_of_id:\n+    case StubId::c1_is_instance_of_id:\n@@ -974,1 +974,1 @@\n-    case C1StubId::monitorexit_nofpu_id:\n+    case StubId::c1_monitorexit_nofpu_id:\n@@ -977,1 +977,1 @@\n-    case C1StubId::monitorexit_id:\n+    case StubId::c1_monitorexit_id:\n@@ -998,1 +998,1 @@\n-    case C1StubId::deoptimize_id:\n+    case StubId::c1_deoptimize_id:\n@@ -1017,1 +1017,1 @@\n-    case C1StubId::throw_range_check_failed_id:\n+    case StubId::c1_throw_range_check_failed_id:\n@@ -1024,1 +1024,1 @@\n-    case C1StubId::unwind_exception_id:\n+    case StubId::c1_unwind_exception_id:\n@@ -1033,1 +1033,1 @@\n-    case C1StubId::access_field_patching_id:\n+    case StubId::c1_access_field_patching_id:\n@@ -1041,1 +1041,1 @@\n-    case C1StubId::load_klass_patching_id:\n+    case StubId::c1_load_klass_patching_id:\n@@ -1049,1 +1049,1 @@\n-    case C1StubId::load_mirror_patching_id:\n+    case StubId::c1_load_mirror_patching_id:\n@@ -1057,1 +1057,1 @@\n-    case C1StubId::load_appendix_patching_id:\n+    case StubId::c1_load_appendix_patching_id:\n@@ -1065,2 +1065,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -1073,1 +1073,1 @@\n-    case C1StubId::handle_exception_from_callee_id:\n+    case StubId::c1_handle_exception_from_callee_id:\n@@ -1080,1 +1080,1 @@\n-    case C1StubId::throw_index_exception_id:\n+    case StubId::c1_throw_index_exception_id:\n@@ -1087,1 +1087,1 @@\n-    case C1StubId::throw_array_store_exception_id:\n+    case StubId::c1_throw_array_store_exception_id:\n@@ -1096,1 +1096,1 @@\n-    case C1StubId::predicate_failed_trap_id:\n+    case StubId::c1_predicate_failed_trap_id:\n@@ -1116,1 +1116,1 @@\n-    case C1StubId::dtrace_object_alloc_id:\n+    case StubId::c1_dtrace_object_alloc_id:\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -417,2 +417,2 @@\n-  if (cb == Runtime1::blob_for(C1StubId::monitorenter_id) ||\n-      cb == Runtime1::blob_for(C1StubId::monitorenter_nofpu_id)) {\n+  if (cb == Runtime1::blob_for(StubId::c1_monitorenter_id) ||\n+      cb == Runtime1::blob_for(StubId::c1_monitorenter_nofpu_id)) {\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::uncommon_trap_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_uncommon_trap_id);\n@@ -286,1 +286,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::exception_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_exception_id);\n","filename":"src\/hotspot\/cpu\/riscv\/runtime_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2103,1 +2103,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_deopt_id);\n@@ -2486,1 +2486,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(StubId id, address call_ptr) {\n@@ -2503,2 +2503,2 @@\n-  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n-  RegisterSaver reg_saver(id == SharedStubId::polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n+  bool cause_return = (id == StubId::shared_polling_page_return_handler_id);\n+  RegisterSaver reg_saver(id == StubId::shared_polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n@@ -2611,1 +2611,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(StubId id, address destination) {\n@@ -2708,1 +2708,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(StubId id, address runtime_entry) {\n@@ -2819,1 +2819,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_write_checkpoint_id);\n@@ -2858,1 +2858,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_return_lease_id);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-    StubGenStubId stub_id = StubGenStubId::call_stub_id;\n+    StubId stub_id = StubId::stubgen_call_stub_id;\n@@ -479,1 +479,1 @@\n-    StubGenStubId stub_id = StubGenStubId::catch_exception_id;\n+    StubId stub_id = StubId::stubgen_catch_exception_id;\n@@ -532,1 +532,1 @@\n-    StubGenStubId stub_id = StubGenStubId::forward_exception_id;\n+    StubId stub_id = StubId::stubgen_forward_exception_id;\n@@ -619,1 +619,1 @@\n-    StubGenStubId stub_id = StubGenStubId::verify_oop_id;\n+    StubId stub_id = StubId::stubgen_verify_oop_id;\n@@ -681,1 +681,1 @@\n-    StubGenStubId stub_id = StubGenStubId::zero_blocks_id;\n+    StubId stub_id = StubId::stubgen_zero_blocks_id;\n@@ -734,1 +734,1 @@\n-  void generate_copy_longs(StubGenStubId stub_id, Label &start,\n+  void generate_copy_longs(StubId stub_id, Label &start,\n@@ -739,1 +739,1 @@\n-    case copy_byte_f_id:\n+    case StubId::stubgen_copy_byte_f_id:\n@@ -743,1 +743,1 @@\n-    case copy_byte_b_id:\n+    case StubId::stubgen_copy_byte_b_id:\n@@ -1117,1 +1117,1 @@\n-  address generate_disjoint_copy(StubGenStubId stub_id, address* entry) {\n+  address generate_disjoint_copy(StubId stub_id, address* entry) {\n@@ -1123,1 +1123,1 @@\n-    case jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_jbyte_disjoint_arraycopy_id:\n@@ -1129,1 +1129,1 @@\n-    case arrayof_jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id:\n@@ -1135,1 +1135,1 @@\n-    case jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_jshort_disjoint_arraycopy_id:\n@@ -1141,1 +1141,1 @@\n-    case arrayof_jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id:\n@@ -1147,1 +1147,1 @@\n-    case jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_jint_disjoint_arraycopy_id:\n@@ -1153,1 +1153,1 @@\n-    case arrayof_jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_disjoint_arraycopy_id:\n@@ -1159,1 +1159,1 @@\n-    case jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_jlong_disjoint_arraycopy_id:\n@@ -1164,1 +1164,1 @@\n-    case arrayof_jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id:\n@@ -1170,1 +1170,1 @@\n-    case oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -1176,1 +1176,1 @@\n-    case arrayof_oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_id:\n@@ -1182,1 +1182,1 @@\n-    case oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_uninit_id:\n@@ -1188,1 +1188,1 @@\n-    case arrayof_oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id:\n@@ -1274,1 +1274,1 @@\n-  address generate_conjoint_copy(StubGenStubId stub_id, address nooverlap_target, address *entry) {\n+  address generate_conjoint_copy(StubId stub_id, address nooverlap_target, address *entry) {\n@@ -1282,1 +1282,1 @@\n-    case jbyte_arraycopy_id:\n+    case StubId::stubgen_jbyte_arraycopy_id:\n@@ -1288,1 +1288,1 @@\n-    case arrayof_jbyte_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_arraycopy_id:\n@@ -1294,1 +1294,1 @@\n-    case jshort_arraycopy_id:\n+    case StubId::stubgen_jshort_arraycopy_id:\n@@ -1300,1 +1300,1 @@\n-    case arrayof_jshort_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_arraycopy_id:\n@@ -1306,1 +1306,1 @@\n-    case jint_arraycopy_id:\n+    case StubId::stubgen_jint_arraycopy_id:\n@@ -1312,1 +1312,1 @@\n-    case arrayof_jint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_arraycopy_id:\n@@ -1318,1 +1318,1 @@\n-    case jlong_arraycopy_id:\n+    case StubId::stubgen_jlong_arraycopy_id:\n@@ -1323,1 +1323,1 @@\n-    case arrayof_jlong_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_arraycopy_id:\n@@ -1329,1 +1329,1 @@\n-    case oop_arraycopy_id:\n+    case StubId::stubgen_oop_arraycopy_id:\n@@ -1335,1 +1335,1 @@\n-    case arrayof_oop_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_id:\n@@ -1341,1 +1341,1 @@\n-    case oop_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_arraycopy_uninit_id:\n@@ -1347,1 +1347,1 @@\n-    case arrayof_oop_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_uninit_id:\n@@ -1447,1 +1447,1 @@\n-  address generate_checkcast_copy(StubGenStubId stub_id, address* entry) {\n+  address generate_checkcast_copy(StubId stub_id, address* entry) {\n@@ -1450,1 +1450,1 @@\n-    case checkcast_arraycopy_id:\n+    case StubId::stubgen_checkcast_arraycopy_id:\n@@ -1453,1 +1453,1 @@\n-    case checkcast_arraycopy_uninit_id:\n+    case StubId::stubgen_checkcast_arraycopy_uninit_id:\n@@ -1656,1 +1656,1 @@\n-    StubGenStubId stub_id = StubGenStubId::unsafe_setmemory_id;\n+    StubId stub_id = StubId::stubgen_unsafe_setmemory_id;\n@@ -1779,1 +1779,1 @@\n-    StubGenStubId stub_id = StubGenStubId::unsafe_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_unsafe_arraycopy_id;\n@@ -1846,1 +1846,1 @@\n-    StubGenStubId stub_id = StubGenStubId::generic_arraycopy_id;\n+    StubId stub_id = StubId::stubgen_generic_arraycopy_id;\n@@ -2103,1 +2103,1 @@\n-  address generate_fill(StubGenStubId stub_id) {\n+  address generate_fill(StubId stub_id) {\n@@ -2108,1 +2108,1 @@\n-    case jbyte_fill_id:\n+    case StubId::stubgen_jbyte_fill_id:\n@@ -2112,1 +2112,1 @@\n-    case jshort_fill_id:\n+    case StubId::stubgen_jshort_fill_id:\n@@ -2116,1 +2116,1 @@\n-    case jint_fill_id:\n+    case StubId::stubgen_jint_fill_id:\n@@ -2120,1 +2120,1 @@\n-    case arrayof_jbyte_fill_id:\n+    case StubId::stubgen_arrayof_jbyte_fill_id:\n@@ -2124,1 +2124,1 @@\n-    case arrayof_jshort_fill_id:\n+    case StubId::stubgen_arrayof_jshort_fill_id:\n@@ -2128,1 +2128,1 @@\n-    case arrayof_jint_fill_id:\n+    case StubId::stubgen_arrayof_jint_fill_id:\n@@ -2304,2 +2304,2 @@\n-    generate_copy_longs(StubGenStubId::copy_byte_f_id, copy_f, c_rarg0, c_rarg1, t1);\n-    generate_copy_longs(StubGenStubId::copy_byte_b_id, copy_b, c_rarg0, c_rarg1, t1);\n+    generate_copy_longs(StubId::stubgen_copy_byte_f_id, copy_f, c_rarg0, c_rarg1, t1);\n+    generate_copy_longs(StubId::stubgen_copy_byte_b_id, copy_b, c_rarg0, c_rarg1, t1);\n@@ -2314,4 +2314,4 @@\n-    StubRoutines::_jbyte_disjoint_arraycopy          = generate_disjoint_copy(StubGenStubId::jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jbyte_arraycopy                   = generate_conjoint_copy(StubGenStubId::jbyte_arraycopy_id, entry, &entry_jbyte_arraycopy);\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = generate_disjoint_copy(StubGenStubId::arrayof_jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jbyte_arraycopy           = generate_conjoint_copy(StubGenStubId::arrayof_jbyte_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jbyte_disjoint_arraycopy          = generate_disjoint_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_jbyte_arraycopy                   = generate_conjoint_copy(StubId::stubgen_jbyte_arraycopy_id, entry, &entry_jbyte_arraycopy);\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = generate_disjoint_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jbyte_arraycopy           = generate_conjoint_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id, entry, nullptr);\n@@ -2321,4 +2321,4 @@\n-    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubGenStubId::jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubGenStubId::jshort_arraycopy_id, entry, &entry_jshort_arraycopy);\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubGenStubId::arrayof_jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubGenStubId::arrayof_jshort_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jshort_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jshort_arraycopy_id, entry, &entry_jshort_arraycopy);\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jshort_arraycopy_id, entry, nullptr);\n@@ -2328,2 +2328,2 @@\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy   = generate_disjoint_copy(StubGenStubId::arrayof_jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jint_arraycopy            = generate_conjoint_copy(StubGenStubId::arrayof_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy   = generate_disjoint_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jint_arraycopy            = generate_conjoint_copy(StubId::stubgen_arrayof_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n@@ -2332,2 +2332,2 @@\n-    StubRoutines::_jint_disjoint_arraycopy           = generate_disjoint_copy(StubGenStubId::jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubGenStubId::jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    StubRoutines::_jint_disjoint_arraycopy           = generate_disjoint_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n@@ -2337,2 +2337,2 @@\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubGenStubId::arrayof_jlong_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubGenStubId::arrayof_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n@@ -2344,1 +2344,1 @@\n-      = generate_disjoint_copy(StubGenStubId::arrayof_oop_disjoint_arraycopy_id, &entry);\n+      = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_id, &entry);\n@@ -2346,1 +2346,1 @@\n-      = generate_conjoint_copy(StubGenStubId::arrayof_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n+      = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n@@ -2349,1 +2349,1 @@\n-      = generate_disjoint_copy(StubGenStubId::arrayof_oop_disjoint_arraycopy_uninit_id, &entry);\n+      = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id, &entry);\n@@ -2351,1 +2351,1 @@\n-      = generate_conjoint_copy(StubGenStubId::arrayof_oop_arraycopy_uninit_id, entry, nullptr);\n+      = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_uninit_id, entry, nullptr);\n@@ -2358,2 +2358,2 @@\n-    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n-    StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_uninit_id, nullptr);\n+    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n+    StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_uninit_id, nullptr);\n@@ -2374,6 +2374,6 @@\n-    StubRoutines::_jbyte_fill = generate_fill(StubGenStubId::jbyte_fill_id);\n-    StubRoutines::_jshort_fill = generate_fill(StubGenStubId::jshort_fill_id);\n-    StubRoutines::_jint_fill = generate_fill(StubGenStubId::jint_fill_id);\n-    StubRoutines::_arrayof_jbyte_fill = generate_fill(StubGenStubId::arrayof_jbyte_fill_id);\n-    StubRoutines::_arrayof_jshort_fill = generate_fill(StubGenStubId::arrayof_jshort_fill_id);\n-    StubRoutines::_arrayof_jint_fill = generate_fill(StubGenStubId::arrayof_jint_fill_id);\n+    StubRoutines::_jbyte_fill = generate_fill(StubId::stubgen_jbyte_fill_id);\n+    StubRoutines::_jshort_fill = generate_fill(StubId::stubgen_jshort_fill_id);\n+    StubRoutines::_jint_fill = generate_fill(StubId::stubgen_jint_fill_id);\n+    StubRoutines::_arrayof_jbyte_fill = generate_fill(StubId::stubgen_arrayof_jbyte_fill_id);\n+    StubRoutines::_arrayof_jshort_fill = generate_fill(StubId::stubgen_arrayof_jshort_fill_id);\n+    StubRoutines::_arrayof_jint_fill = generate_fill(StubId::stubgen_arrayof_jint_fill_id);\n@@ -2417,1 +2417,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_encryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_encryptBlock_id;\n@@ -2496,1 +2496,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_decryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_decryptBlock_id;\n@@ -2598,1 +2598,1 @@\n-  address generate_compare_long_string_different_encoding(StubGenStubId stub_id) {\n+  address generate_compare_long_string_different_encoding(StubId stub_id) {\n@@ -2601,1 +2601,1 @@\n-    case compare_long_string_LU_id:\n+    case StubId::stubgen_compare_long_string_LU_id:\n@@ -2604,1 +2604,1 @@\n-    case compare_long_string_UL_id:\n+    case StubId::stubgen_compare_long_string_UL_id:\n@@ -2700,1 +2700,1 @@\n-    StubGenStubId stub_id = StubGenStubId::method_entry_barrier_id;\n+    StubId stub_id = StubId::stubgen_method_entry_barrier_id;\n@@ -2771,1 +2771,1 @@\n-  address generate_compare_long_string_same_encoding(StubGenStubId stub_id) {\n+  address generate_compare_long_string_same_encoding(StubId stub_id) {\n@@ -2774,1 +2774,1 @@\n-    case compare_long_string_LL_id:\n+    case StubId::stubgen_compare_long_string_LL_id:\n@@ -2777,1 +2777,1 @@\n-    case compare_long_string_UU_id:\n+    case StubId::stubgen_compare_long_string_UU_id:\n@@ -2883,4 +2883,4 @@\n-    StubRoutines::riscv::_compare_long_string_LL = generate_compare_long_string_same_encoding(StubGenStubId::compare_long_string_LL_id);\n-    StubRoutines::riscv::_compare_long_string_UU = generate_compare_long_string_same_encoding(StubGenStubId::compare_long_string_UU_id);\n-    StubRoutines::riscv::_compare_long_string_LU = generate_compare_long_string_different_encoding(StubGenStubId::compare_long_string_LU_id);\n-    StubRoutines::riscv::_compare_long_string_UL = generate_compare_long_string_different_encoding(StubGenStubId::compare_long_string_UL_id);\n+    StubRoutines::riscv::_compare_long_string_LL = generate_compare_long_string_same_encoding(StubId::stubgen_compare_long_string_LL_id);\n+    StubRoutines::riscv::_compare_long_string_UU = generate_compare_long_string_same_encoding(StubId::stubgen_compare_long_string_UU_id);\n+    StubRoutines::riscv::_compare_long_string_LU = generate_compare_long_string_different_encoding(StubId::stubgen_compare_long_string_LU_id);\n+    StubRoutines::riscv::_compare_long_string_UL = generate_compare_long_string_different_encoding(StubId::stubgen_compare_long_string_UL_id);\n@@ -2894,1 +2894,1 @@\n-  address generate_string_indexof_linear(StubGenStubId stub_id)\n+  address generate_string_indexof_linear(StubId stub_id)\n@@ -2899,1 +2899,1 @@\n-    case string_indexof_linear_ll_id:\n+    case StubId::stubgen_string_indexof_linear_ll_id:\n@@ -2903,1 +2903,1 @@\n-    case string_indexof_linear_ul_id:\n+    case StubId::stubgen_string_indexof_linear_ul_id:\n@@ -2907,1 +2907,1 @@\n-    case string_indexof_linear_uu_id:\n+    case StubId::stubgen_string_indexof_linear_uu_id:\n@@ -3143,3 +3143,3 @@\n-    StubRoutines::riscv::_string_indexof_linear_ll = generate_string_indexof_linear(StubGenStubId::string_indexof_linear_ll_id);\n-    StubRoutines::riscv::_string_indexof_linear_uu = generate_string_indexof_linear(StubGenStubId::string_indexof_linear_uu_id);\n-    StubRoutines::riscv::_string_indexof_linear_ul = generate_string_indexof_linear(StubGenStubId::string_indexof_linear_ul_id);\n+    StubRoutines::riscv::_string_indexof_linear_ll = generate_string_indexof_linear(StubId::stubgen_string_indexof_linear_ll_id);\n+    StubRoutines::riscv::_string_indexof_linear_uu = generate_string_indexof_linear(StubId::stubgen_string_indexof_linear_uu_id);\n+    StubRoutines::riscv::_string_indexof_linear_ul = generate_string_indexof_linear(StubId::stubgen_string_indexof_linear_ul_id);\n@@ -3150,1 +3150,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_id;\n@@ -3176,1 +3176,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_slow_path_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_slow_path_id;\n@@ -3198,1 +3198,1 @@\n-    StubGenStubId stub_id = StubGenStubId::mulAdd_id;\n+    StubId stub_id = StubId::stubgen_mulAdd_id;\n@@ -3232,1 +3232,1 @@\n-    StubGenStubId stub_id = StubGenStubId::multiplyToLen_id;\n+    StubId stub_id = StubId::stubgen_multiplyToLen_id;\n@@ -3263,1 +3263,1 @@\n-    StubGenStubId stub_id = StubGenStubId::squareToLen_id;\n+    StubId stub_id = StubId::stubgen_squareToLen_id;\n@@ -3304,1 +3304,1 @@\n-    StubGenStubId stub_id = StubGenStubId::bigIntegerLeftShiftWorker_id;\n+    StubId stub_id = StubId::stubgen_bigIntegerLeftShiftWorker_id;\n@@ -3356,1 +3356,1 @@\n-    StubGenStubId stub_id = StubGenStubId::bigIntegerRightShiftWorker_id;\n+    StubId stub_id = StubId::stubgen_bigIntegerRightShiftWorker_id;\n@@ -4183,1 +4183,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_thaw_id;\n+    StubId stub_id = StubId::stubgen_cont_thaw_id;\n@@ -4194,1 +4194,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_returnBarrier_id;\n+    StubId stub_id = StubId::stubgen_cont_returnBarrier_id;\n@@ -4206,1 +4206,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_returnBarrierExc_id;\n+    StubId stub_id = StubId::stubgen_cont_returnBarrierExc_id;\n@@ -4217,1 +4217,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cont_preempt_id;\n+    StubId stub_id = StubId::stubgen_cont_preempt_id;\n@@ -4255,1 +4255,1 @@\n-      address generate_sha256_implCompress(StubGenStubId stub_id) {\n+      address generate_sha256_implCompress(StubId stub_id) {\n@@ -4258,1 +4258,1 @@\n-      address generate_sha512_implCompress(StubGenStubId stub_id) {\n+      address generate_sha512_implCompress(StubId stub_id) {\n@@ -4392,1 +4392,1 @@\n-    address generate_sha2_implCompress(Assembler::SEW vset_sew, StubGenStubId stub_id) {\n+    address generate_sha2_implCompress(Assembler::SEW vset_sew, StubId stub_id) {\n@@ -4444,1 +4444,1 @@\n-      case sha256_implCompress_id:\n+      case StubId::stubgen_sha256_implCompress_id:\n@@ -4448,1 +4448,1 @@\n-      case sha256_implCompressMB_id:\n+      case StubId::stubgen_sha256_implCompressMB_id:\n@@ -4452,1 +4452,1 @@\n-      case sha512_implCompress_id:\n+      case StubId::stubgen_sha512_implCompress_id:\n@@ -4456,1 +4456,1 @@\n-      case sha512_implCompressMB_id:\n+      case StubId::stubgen_sha512_implCompressMB_id:\n@@ -4811,1 +4811,1 @@\n-  address generate_md5_implCompress(StubGenStubId stub_id) {\n+  address generate_md5_implCompress(StubId stub_id) {\n@@ -4815,1 +4815,1 @@\n-    case md5_implCompress_id:\n+    case StubId::stubgen_md5_implCompress_id:\n@@ -4818,1 +4818,1 @@\n-    case md5_implCompressMB_id:\n+    case StubId::stubgen_md5_implCompressMB_id:\n@@ -5078,1 +5078,1 @@\n-    StubGenStubId stub_id = StubGenStubId::chacha20Block_id;\n+    StubId stub_id = StubId::stubgen_chacha20Block_id;\n@@ -5378,1 +5378,1 @@\n-  address generate_sha1_implCompress(StubGenStubId stub_id) {\n+  address generate_sha1_implCompress(StubId stub_id) {\n@@ -5381,1 +5381,1 @@\n-      case sha1_implCompress_id:\n+      case StubId::stubgen_sha1_implCompress_id:\n@@ -5384,1 +5384,1 @@\n-      case sha1_implCompressMB_id:\n+      case StubId::stubgen_sha1_implCompressMB_id:\n@@ -5601,1 +5601,1 @@\n-    StubGenStubId stub_id = StubGenStubId::base64_encodeBlock_id;\n+    StubId stub_id = StubId::stubgen_base64_encodeBlock_id;\n@@ -5858,1 +5858,1 @@\n-    StubGenStubId stub_id = StubGenStubId::base64_decodeBlock_id;\n+    StubId stub_id = StubId::stubgen_base64_decodeBlock_id;\n@@ -6103,1 +6103,1 @@\n-    StubGenStubId stub_id = StubGenStubId::updateBytesAdler32_id;\n+    StubId stub_id = StubId::stubgen_updateBytesAdler32_id;\n@@ -6281,1 +6281,1 @@\n-    StubGenStubId stub_id = StubGenStubId::hf2f_id;\n+    StubId stub_id = StubId::stubgen_hf2f_id;\n@@ -6332,1 +6332,1 @@\n-    StubGenStubId stub_id = StubGenStubId::f2hf_id;\n+    StubId stub_id = StubId::stubgen_f2hf_id;\n@@ -6460,1 +6460,1 @@\n-    StubGenStubId stub_id = StubGenStubId::poly1305_processBlocks_id;\n+    StubId stub_id = StubId::stubgen_poly1305_processBlocks_id;\n@@ -6598,1 +6598,1 @@\n-    StubGenStubId stub_id = StubGenStubId::updateBytesCRC32_id;\n+    StubId stub_id = StubId::stubgen_updateBytesCRC32_id;\n@@ -6623,1 +6623,1 @@\n-    StubGenStubId stub_id = StubGenStubId::upcall_stub_exception_handler_id;\n+    StubId stub_id = StubId::stubgen_upcall_stub_exception_handler_id;\n@@ -6641,1 +6641,1 @@\n-    StubGenStubId stub_id = StubGenStubId::upcall_stub_load_target_id;\n+    StubId stub_id = StubId::stubgen_upcall_stub_load_target_id;\n@@ -6750,1 +6750,1 @@\n-      StubGenStubId stub_id = StubGenStubId::montgomeryMultiply_id;\n+      StubId stub_id = StubId::stubgen_montgomeryMultiply_id;\n@@ -6757,1 +6757,1 @@\n-      StubGenStubId stub_id = StubGenStubId::montgomerySquare_id;\n+      StubId stub_id = StubId::stubgen_montgomerySquare_id;\n@@ -6779,2 +6779,2 @@\n-      StubRoutines::_sha256_implCompress   = sha2.generate_sha256_implCompress(StubGenStubId::sha256_implCompress_id);\n-      StubRoutines::_sha256_implCompressMB = sha2.generate_sha256_implCompress(StubGenStubId::sha256_implCompressMB_id);\n+      StubRoutines::_sha256_implCompress   = sha2.generate_sha256_implCompress(StubId::stubgen_sha256_implCompress_id);\n+      StubRoutines::_sha256_implCompressMB = sha2.generate_sha256_implCompress(StubId::stubgen_sha256_implCompressMB_id);\n@@ -6785,2 +6785,2 @@\n-      StubRoutines::_sha512_implCompress   = sha2.generate_sha512_implCompress(StubGenStubId::sha512_implCompress_id);\n-      StubRoutines::_sha512_implCompressMB = sha2.generate_sha512_implCompress(StubGenStubId::sha512_implCompressMB_id);\n+      StubRoutines::_sha512_implCompress   = sha2.generate_sha512_implCompress(StubId::stubgen_sha512_implCompress_id);\n+      StubRoutines::_sha512_implCompressMB = sha2.generate_sha512_implCompress(StubId::stubgen_sha512_implCompressMB_id);\n@@ -6790,2 +6790,2 @@\n-      StubRoutines::_md5_implCompress   = generate_md5_implCompress(StubGenStubId::md5_implCompress_id);\n-      StubRoutines::_md5_implCompressMB = generate_md5_implCompress(StubGenStubId::md5_implCompressMB_id);\n+      StubRoutines::_md5_implCompress   = generate_md5_implCompress(StubId::stubgen_md5_implCompress_id);\n+      StubRoutines::_md5_implCompressMB = generate_md5_implCompress(StubId::stubgen_md5_implCompressMB_id);\n@@ -6799,2 +6799,2 @@\n-      StubRoutines::_sha1_implCompress     = generate_sha1_implCompress(StubGenStubId::sha1_implCompress_id);\n-      StubRoutines::_sha1_implCompressMB   = generate_sha1_implCompress(StubGenStubId::sha1_implCompressMB_id);\n+      StubRoutines::_sha1_implCompress     = generate_sha1_implCompress(StubId::stubgen_sha1_implCompress_id);\n+      StubRoutines::_sha1_implCompressMB   = generate_sha1_implCompress(StubId::stubgen_sha1_implCompressMB_id);\n@@ -6820,1 +6820,1 @@\n-  StubGenerator(CodeBuffer* code, StubGenBlobId blob_id) : StubCodeGenerator(code, blob_id) {\n+  StubGenerator(CodeBuffer* code, BlobId blob_id) : StubCodeGenerator(code, blob_id) {\n@@ -6822,1 +6822,1 @@\n-    case preuniverse_id:\n+    case BlobId::stubgen_preuniverse_id:\n@@ -6825,1 +6825,1 @@\n-    case initial_id:\n+    case BlobId::stubgen_initial_id:\n@@ -6828,1 +6828,1 @@\n-     case continuation_id:\n+    case BlobId::stubgen_continuation_id:\n@@ -6831,1 +6831,1 @@\n-    case compiler_id:\n+    case BlobId::stubgen_compiler_id:\n@@ -6834,1 +6834,1 @@\n-    case final_id:\n+    case BlobId::stubgen_final_id:\n@@ -6838,1 +6838,1 @@\n-      fatal(\"unexpected blob id: %d\", blob_id);\n+      fatal(\"unexpected blob id: %s\", StubInfo::name(blob_id));\n@@ -6844,1 +6844,1 @@\n-void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id) {\n+void StubGenerator_generate(CodeBuffer* code, BlobId blob_id) {\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":147,"deletions":147,"binary":false,"changes":294,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    address a = Runtime1::entry_for (C1StubId::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for (StubId::c1_predicate_failed_trap_id);\n@@ -66,1 +66,1 @@\n-  C1StubId stub_id;\n+  StubId stub_id;\n@@ -68,1 +68,1 @@\n-    stub_id = C1StubId::throw_index_exception_id;\n+    stub_id = StubId::c1_throw_index_exception_id;\n@@ -70,1 +70,1 @@\n-    stub_id = C1StubId::throw_range_check_failed_id;\n+    stub_id = StubId::c1_throw_range_check_failed_id;\n@@ -86,1 +86,1 @@\n-  address a = Runtime1::entry_for (C1StubId::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for (StubId::c1_predicate_failed_trap_id);\n@@ -104,1 +104,1 @@\n-  ce->emit_call_c(Runtime1::entry_for (C1StubId::counter_overflow_id));\n+  ce->emit_call_c(Runtime1::entry_for (StubId::c1_counter_overflow_id));\n@@ -116,1 +116,1 @@\n-  ce->emit_call_c(Runtime1::entry_for (C1StubId::throw_div0_exception_id));\n+  ce->emit_call_c(Runtime1::entry_for (StubId::c1_throw_div0_exception_id));\n@@ -126,1 +126,1 @@\n-    a = Runtime1::entry_for (C1StubId::predicate_failed_trap_id);\n+    a = Runtime1::entry_for (StubId::c1_predicate_failed_trap_id);\n@@ -128,1 +128,1 @@\n-    a = Runtime1::entry_for (C1StubId::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for (StubId::c1_throw_null_pointer_exception_id);\n@@ -153,1 +153,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, StubId stub_id) {\n@@ -158,3 +158,3 @@\n-  assert(stub_id == C1StubId::new_instance_id                 ||\n-         stub_id == C1StubId::fast_new_instance_id            ||\n-         stub_id == C1StubId::fast_new_instance_init_check_id,\n+  assert(stub_id == StubId::c1_new_instance_id                 ||\n+         stub_id == StubId::c1_fast_new_instance_id            ||\n+         stub_id == StubId::c1_fast_new_instance_init_check_id,\n@@ -188,1 +188,1 @@\n-  address a = Runtime1::entry_for (C1StubId::new_type_array_id);\n+  address a = Runtime1::entry_for (StubId::c1_new_type_array_id);\n@@ -208,1 +208,1 @@\n-  address a = Runtime1::entry_for (C1StubId::new_object_array_id);\n+  address a = Runtime1::entry_for (StubId::c1_new_object_array_id);\n@@ -219,1 +219,1 @@\n-  C1StubId enter_id;\n+  StubId enter_id;\n@@ -221,1 +221,1 @@\n-    enter_id = C1StubId::monitorenter_id;\n+    enter_id = StubId::c1_monitorenter_id;\n@@ -223,1 +223,1 @@\n-    enter_id = C1StubId::monitorenter_nofpu_id;\n+    enter_id = StubId::c1_monitorenter_nofpu_id;\n@@ -244,1 +244,1 @@\n-  C1StubId exit_id;\n+  StubId exit_id;\n@@ -246,1 +246,1 @@\n-    exit_id = C1StubId::monitorexit_id;\n+    exit_id = StubId::c1_monitorexit_id;\n@@ -248,1 +248,1 @@\n-    exit_id = C1StubId::monitorexit_nofpu_id;\n+    exit_id = StubId::c1_monitorexit_nofpu_id;\n@@ -380,4 +380,4 @@\n-    case access_field_id:  target = Runtime1::entry_for (C1StubId::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for (C1StubId::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n-    case load_mirror_id:   target = Runtime1::entry_for (C1StubId::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n-    case load_appendix_id: target = Runtime1::entry_for (C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case access_field_id:  target = Runtime1::entry_for (StubId::c1_access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for (StubId::c1_load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n+    case load_mirror_id:   target = Runtime1::entry_for (StubId::c1_load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case load_appendix_id: target = Runtime1::entry_for (StubId::c1_load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n@@ -408,1 +408,1 @@\n-  ce->emit_call_c(Runtime1::entry_for (C1StubId::deoptimize_id));\n+  ce->emit_call_c(Runtime1::entry_for (StubId::c1_deoptimize_id));\n","filename":"src\/hotspot\/cpu\/s390\/c1_CodeStubs_s390.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-  address a = Runtime1::entry_for (C1StubId::handle_exception_from_callee_id);\n+  address a = Runtime1::entry_for (StubId::c1_handle_exception_from_callee_id);\n@@ -228,1 +228,1 @@\n-    \/\/ C1StubId::monitorexit_id expects lock address in Z_R1_scratch.\n+    \/\/ StubId::c1_monitorexit_id expects lock address in Z_R1_scratch.\n@@ -261,1 +261,1 @@\n-  __ load_const_optimized(Z_R5, Runtime1::entry_for (C1StubId::unwind_exception_id));\n+  __ load_const_optimized(Z_R5, Runtime1::entry_for (StubId::c1_unwind_exception_id));\n@@ -1934,2 +1934,2 @@\n-  address stub = Runtime1::entry_for (compilation()->has_fpu_code() ? C1StubId::handle_exception_id\n-                                                                    : C1StubId::handle_exception_nofpu_id);\n+  address stub = Runtime1::entry_for (compilation()->has_fpu_code() ? StubId::c1_handle_exception_id\n+                                                                    : StubId::c1_handle_exception_nofpu_id);\n@@ -2132,1 +2132,1 @@\n-      emit_call_c(Runtime1::entry_for (C1StubId::slow_subtype_check_id));\n+      emit_call_c(Runtime1::entry_for (StubId::c1_slow_subtype_check_id));\n@@ -2552,1 +2552,1 @@\n-      address a = Runtime1::entry_for (C1StubId::slow_subtype_check_id);\n+      address a = Runtime1::entry_for (StubId::c1_slow_subtype_check_id);\n@@ -2627,1 +2627,1 @@\n-    address a = Runtime1::entry_for (C1StubId::slow_subtype_check_id);\n+    address a = Runtime1::entry_for (StubId::c1_slow_subtype_check_id);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -893,1 +893,1 @@\n-  __ call_runtime(Runtime1::entry_for (C1StubId::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for (StubId::c1_new_multi_array_id),\n@@ -924,1 +924,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n@@ -931,1 +931,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_class_cast_exception_id, obj.result(), info_for_exception);\n@@ -964,1 +964,1 @@\n-  return Runtime1::entry_for(C1StubId::is_instance_of_id);\n+  return Runtime1::entry_for(StubId::c1_is_instance_of_id);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-  \/\/    call(RuntimeAddress(Runtime1::entry_for (C1StubId::dtrace_object_alloc_id)));\n+  \/\/    call(RuntimeAddress(Runtime1::entry_for (StubId::c1_dtrace_object_alloc_id)));\n@@ -326,1 +326,1 @@\n-  \/\/   call(RuntimeAddress(Runtime1::entry_for (C1StubId::dtrace_object_alloc_id)));\n+  \/\/   call(RuntimeAddress(Runtime1::entry_for (StubId::c1_dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n+    } else if (_stub_id == (int)StubId::c1_forward_exception_id) {\n@@ -103,1 +103,1 @@\n-      load_const_optimized(Z_R1, Runtime1::entry_for (C1StubId::forward_exception_id));\n+      load_const_optimized(Z_R1, Runtime1::entry_for (StubId::c1_forward_exception_id));\n@@ -312,1 +312,1 @@\n-OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(StubId id, StubAssembler* sasm) {\n@@ -325,1 +325,1 @@\n-    case C1StubId::forward_exception_id:\n+    case StubId::c1_forward_exception_id:\n@@ -332,3 +332,3 @@\n-    case C1StubId::new_instance_id:\n-    case C1StubId::fast_new_instance_id:\n-    case C1StubId::fast_new_instance_init_check_id:\n+    case StubId::c1_new_instance_id:\n+    case StubId::c1_fast_new_instance_id:\n+    case StubId::c1_fast_new_instance_init_check_id:\n@@ -339,1 +339,1 @@\n-        if (id == C1StubId::new_instance_id) {\n+        if (id == StubId::c1_new_instance_id) {\n@@ -341,1 +341,1 @@\n-        } else if (id == C1StubId::fast_new_instance_id) {\n+        } else if (id == StubId::c1_fast_new_instance_id) {\n@@ -344,1 +344,1 @@\n-          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n+          assert(id == StubId::c1_fast_new_instance_init_check_id, \"bad StubId\");\n@@ -359,1 +359,1 @@\n-    case C1StubId::counter_overflow_id:\n+    case StubId::c1_counter_overflow_id:\n@@ -378,2 +378,2 @@\n-    case C1StubId::new_type_array_id:\n-    case C1StubId::new_object_array_id:\n+    case StubId::c1_new_type_array_id:\n+    case StubId::c1_new_object_array_id:\n@@ -385,1 +385,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -398,1 +398,1 @@\n-          int tag = ((id == C1StubId::new_type_array_id)\n+          int tag = ((id == StubId::c1_new_type_array_id)\n@@ -410,1 +410,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -425,1 +425,1 @@\n-    case C1StubId::new_multi_array_id:\n+    case StubId::c1_new_multi_array_id:\n@@ -443,1 +443,1 @@\n-    case C1StubId::register_finalizer_id:\n+    case StubId::c1_register_finalizer_id:\n@@ -466,1 +466,1 @@\n-    case C1StubId::throw_range_check_failed_id:\n+    case StubId::c1_throw_range_check_failed_id:\n@@ -472,1 +472,1 @@\n-    case C1StubId::throw_index_exception_id:\n+    case StubId::c1_throw_index_exception_id:\n@@ -477,1 +477,1 @@\n-    case C1StubId::throw_div0_exception_id:\n+    case StubId::c1_throw_div0_exception_id:\n@@ -482,1 +482,1 @@\n-    case C1StubId::throw_null_pointer_exception_id:\n+    case StubId::c1_throw_null_pointer_exception_id:\n@@ -487,2 +487,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -493,1 +493,1 @@\n-    case C1StubId::handle_exception_from_callee_id:\n+    case StubId::c1_handle_exception_from_callee_id:\n@@ -498,1 +498,1 @@\n-    case C1StubId::unwind_exception_id:\n+    case StubId::c1_unwind_exception_id:\n@@ -505,1 +505,1 @@\n-    case C1StubId::throw_array_store_exception_id:\n+    case StubId::c1_throw_array_store_exception_id:\n@@ -510,1 +510,1 @@\n-    case C1StubId::throw_class_cast_exception_id:\n+    case StubId::c1_throw_class_cast_exception_id:\n@@ -516,1 +516,1 @@\n-    case C1StubId::throw_incompatible_class_change_error_id:\n+    case StubId::c1_throw_incompatible_class_change_error_id:\n@@ -521,1 +521,1 @@\n-    case C1StubId::slow_subtype_check_id:\n+    case StubId::c1_slow_subtype_check_id:\n@@ -592,1 +592,1 @@\n-    case C1StubId::is_instance_of_id:\n+    case StubId::c1_is_instance_of_id:\n@@ -653,2 +653,2 @@\n-    case C1StubId::monitorenter_nofpu_id:\n-    case C1StubId::monitorenter_id:\n+    case StubId::c1_monitorenter_nofpu_id:\n+    case StubId::c1_monitorenter_id:\n@@ -659,1 +659,1 @@\n-        int save_fpu_registers = (id == C1StubId::monitorenter_id);\n+        int save_fpu_registers = (id == StubId::c1_monitorenter_id);\n@@ -673,2 +673,2 @@\n-    case C1StubId::monitorexit_nofpu_id:\n-    case C1StubId::monitorexit_id:\n+    case StubId::c1_monitorexit_nofpu_id:\n+    case StubId::c1_monitorexit_id:\n@@ -681,1 +681,1 @@\n-        int save_fpu_registers = (id == C1StubId::monitorexit_id);\n+        int save_fpu_registers = (id == StubId::c1_monitorexit_id);\n@@ -695,1 +695,1 @@\n-    case C1StubId::deoptimize_id:\n+    case StubId::c1_deoptimize_id:\n@@ -712,1 +712,1 @@\n-    case C1StubId::access_field_patching_id:\n+    case StubId::c1_access_field_patching_id:\n@@ -718,1 +718,1 @@\n-    case C1StubId::load_klass_patching_id:\n+    case StubId::c1_load_klass_patching_id:\n@@ -725,1 +725,1 @@\n-    case C1StubId::load_mirror_patching_id:\n+    case StubId::c1_load_mirror_patching_id:\n@@ -731,1 +731,1 @@\n-    case C1StubId::load_appendix_patching_id:\n+    case StubId::c1_load_appendix_patching_id:\n@@ -737,1 +737,1 @@\n-    case C1StubId::dtrace_object_alloc_id:\n+    case StubId::c1_dtrace_object_alloc_id:\n@@ -752,1 +752,1 @@\n-    case C1StubId::fpu2long_stub_id:\n+    case StubId::c1_fpu2long_stub_id:\n@@ -827,1 +827,1 @@\n-    case C1StubId::predicate_failed_trap_id:\n+    case StubId::c1_predicate_failed_trap_id:\n@@ -855,1 +855,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(StubId id, StubAssembler *sasm) {\n@@ -866,1 +866,1 @@\n-    case C1StubId::forward_exception_id: {\n+    case StubId::c1_forward_exception_id: {\n@@ -893,2 +893,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -897,1 +897,1 @@\n-      oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id, Z_EXC_PC);\n+      oop_map = save_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id, Z_EXC_PC);\n@@ -899,1 +899,1 @@\n-    case C1StubId::handle_exception_from_callee_id: {\n+    case StubId::c1_handle_exception_from_callee_id: {\n@@ -948,3 +948,3 @@\n-    case C1StubId::forward_exception_id:\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_forward_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -953,1 +953,1 @@\n-      restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);  \/\/ Pops as well the frame.\n+      restore_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id);  \/\/ Pops as well the frame.\n@@ -956,1 +956,1 @@\n-    case C1StubId::handle_exception_from_callee_id: {\n+    case StubId::c1_handle_exception_from_callee_id: {\n","filename":"src\/hotspot\/cpu\/s390\/c1_Runtime1_s390.cpp","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::exception_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_exception_id);\n","filename":"src\/hotspot\/cpu\/s390\/runtime_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2547,1 +2547,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_deopt_id);\n@@ -2770,1 +2770,1 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::uncommon_trap_id);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_uncommon_trap_id);\n@@ -2898,1 +2898,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(StubId id, address call_ptr) {\n@@ -2916,1 +2916,1 @@\n-  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n+  bool cause_return = (id == StubId::shared_polling_page_return_handler_id);\n@@ -2922,1 +2922,1 @@\n-  bool save_vectors = (id == SharedStubId::polling_page_vectors_safepoint_handler_id);\n+  bool save_vectors = (id == StubId::shared_polling_page_vectors_safepoint_handler_id);\n@@ -3002,1 +3002,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(StubId id, address destination) {\n@@ -3101,1 +3101,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(StubId id, address runtime_entry) {\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-    StubGenStubId stub_id = StubGenStubId::call_stub_id;\n+    StubId stub_id = StubId::stubgen_call_stub_id;\n@@ -462,1 +462,1 @@\n-    StubGenStubId stub_id = StubGenStubId::catch_exception_id;\n+    StubId stub_id = StubId::stubgen_catch_exception_id;\n@@ -514,1 +514,1 @@\n-    StubGenStubId stub_id = StubGenStubId::forward_exception_id;\n+    StubId stub_id = StubId::stubgen_forward_exception_id;\n@@ -595,1 +595,1 @@\n-    StubGenStubId stub_id = StubGenStubId::partial_subtype_check_id;\n+    StubId stub_id = StubId::stubgen_partial_subtype_check_id;\n@@ -629,1 +629,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_id;\n@@ -652,1 +652,1 @@\n-    StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_slow_path_id;\n+    StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_slow_path_id;\n@@ -1268,1 +1268,1 @@\n-  address generate_disjoint_nonoop_copy(StubGenStubId stub_id) {\n+  address generate_disjoint_nonoop_copy(StubId stub_id) {\n@@ -1272,1 +1272,1 @@\n-    case jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_jbyte_disjoint_arraycopy_id:\n@@ -1276,1 +1276,1 @@\n-    case arrayof_jbyte_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id:\n@@ -1280,1 +1280,1 @@\n-    case jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_jshort_disjoint_arraycopy_id:\n@@ -1284,1 +1284,1 @@\n-    case arrayof_jshort_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id:\n@@ -1288,1 +1288,1 @@\n-    case jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_jint_disjoint_arraycopy_id:\n@@ -1292,1 +1292,1 @@\n-    case arrayof_jint_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_disjoint_arraycopy_id:\n@@ -1296,1 +1296,1 @@\n-    case jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_jlong_disjoint_arraycopy_id:\n@@ -1300,1 +1300,1 @@\n-    case arrayof_jlong_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id:\n@@ -1313,1 +1313,1 @@\n-  address generate_disjoint_oop_copy(StubGenStubId stub_id) {\n+  address generate_disjoint_oop_copy(StubId stub_id) {\n@@ -1317,1 +1317,1 @@\n-    case oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -1321,1 +1321,1 @@\n-    case arrayof_oop_disjoint_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_id:\n@@ -1325,1 +1325,1 @@\n-    case oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_disjoint_arraycopy_uninit_id:\n@@ -1329,1 +1329,1 @@\n-    case arrayof_oop_disjoint_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id:\n@@ -1360,1 +1360,1 @@\n-  address generate_conjoint_nonoop_copy(StubGenStubId stub_id) {\n+  address generate_conjoint_nonoop_copy(StubId stub_id) {\n@@ -1365,1 +1365,1 @@\n-    case jbyte_arraycopy_id:\n+    case StubId::stubgen_jbyte_arraycopy_id:\n@@ -1370,1 +1370,1 @@\n-    case arrayof_jbyte_arraycopy_id:\n+    case StubId::stubgen_arrayof_jbyte_arraycopy_id:\n@@ -1375,1 +1375,1 @@\n-    case jshort_arraycopy_id:\n+    case StubId::stubgen_jshort_arraycopy_id:\n@@ -1380,1 +1380,1 @@\n-    case arrayof_jshort_arraycopy_id:\n+    case StubId::stubgen_arrayof_jshort_arraycopy_id:\n@@ -1385,1 +1385,1 @@\n-    case jint_arraycopy_id:\n+    case StubId::stubgen_jint_arraycopy_id:\n@@ -1390,1 +1390,1 @@\n-    case arrayof_jint_arraycopy_id:\n+    case StubId::stubgen_arrayof_jint_arraycopy_id:\n@@ -1395,1 +1395,1 @@\n-    case jlong_arraycopy_id:\n+    case StubId::stubgen_jlong_arraycopy_id:\n@@ -1400,1 +1400,1 @@\n-    case arrayof_jlong_arraycopy_id:\n+    case StubId::stubgen_arrayof_jlong_arraycopy_id:\n@@ -1415,1 +1415,1 @@\n-  address generate_conjoint_oop_copy(StubGenStubId stub_id) {\n+  address generate_conjoint_oop_copy(StubId stub_id) {\n@@ -1420,1 +1420,1 @@\n-    case oop_arraycopy_id:\n+    case StubId::stubgen_oop_arraycopy_id:\n@@ -1425,1 +1425,1 @@\n-    case arrayof_oop_arraycopy_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_id:\n@@ -1430,1 +1430,1 @@\n-    case oop_arraycopy_uninit_id:\n+    case StubId::stubgen_oop_arraycopy_uninit_id:\n@@ -1435,1 +1435,1 @@\n-    case arrayof_oop_arraycopy_uninit_id:\n+    case StubId::stubgen_arrayof_oop_arraycopy_uninit_id:\n@@ -1483,1 +1483,1 @@\n-    StubCodeMark mark(this, StubGenStubId::unsafe_setmemory_id);\n+    StubCodeMark mark(this, StubId::stubgen_unsafe_setmemory_id);\n@@ -1585,27 +1585,27 @@\n-    StubRoutines::_jbyte_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubGenStubId::jbyte_disjoint_arraycopy_id);\n-    StubRoutines::_jshort_disjoint_arraycopy     = generate_disjoint_nonoop_copy(StubGenStubId::jshort_disjoint_arraycopy_id);\n-    StubRoutines::_jint_disjoint_arraycopy       = generate_disjoint_nonoop_copy  (StubGenStubId::jint_disjoint_arraycopy_id);\n-    StubRoutines::_jlong_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubGenStubId::jlong_disjoint_arraycopy_id);\n-    StubRoutines::_oop_disjoint_arraycopy        = generate_disjoint_oop_copy  (StubGenStubId::oop_disjoint_arraycopy_id);\n-    StubRoutines::_oop_disjoint_arraycopy_uninit = generate_disjoint_oop_copy  (StubGenStubId::oop_disjoint_arraycopy_uninit_id);\n-\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubGenStubId::arrayof_jbyte_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy     = generate_disjoint_nonoop_copy(StubGenStubId::arrayof_jshort_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy       = generate_disjoint_nonoop_copy  (StubGenStubId::arrayof_jint_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubGenStubId::arrayof_jlong_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_oop_disjoint_arraycopy        = generate_disjoint_oop_copy  (StubGenStubId::arrayof_oop_disjoint_arraycopy_id);\n-    StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit = generate_disjoint_oop_copy  (StubGenStubId::arrayof_oop_disjoint_arraycopy_uninit_id);\n-\n-    StubRoutines::_jbyte_arraycopy           = generate_conjoint_nonoop_copy(StubGenStubId::jbyte_arraycopy_id);\n-    StubRoutines::_jshort_arraycopy          = generate_conjoint_nonoop_copy(StubGenStubId::jshort_arraycopy_id);\n-    StubRoutines::_jint_arraycopy            = generate_conjoint_nonoop_copy(StubGenStubId::jint_arraycopy_id);\n-    StubRoutines::_jlong_arraycopy           = generate_conjoint_nonoop_copy(StubGenStubId::jlong_arraycopy_id);\n-    StubRoutines::_oop_arraycopy             = generate_conjoint_oop_copy(StubGenStubId::oop_arraycopy_id);\n-    StubRoutines::_oop_arraycopy_uninit      = generate_conjoint_oop_copy(StubGenStubId::oop_arraycopy_uninit_id);\n-\n-    StubRoutines::_arrayof_jbyte_arraycopy      = generate_conjoint_nonoop_copy(StubGenStubId::arrayof_jbyte_arraycopy_id);\n-    StubRoutines::_arrayof_jshort_arraycopy     = generate_conjoint_nonoop_copy(StubGenStubId::arrayof_jshort_arraycopy_id);\n-    StubRoutines::_arrayof_jint_arraycopy       = generate_conjoint_nonoop_copy (StubGenStubId::arrayof_jint_arraycopy_id);\n-    StubRoutines::_arrayof_jlong_arraycopy      = generate_conjoint_nonoop_copy(StubGenStubId::arrayof_jlong_arraycopy_id);\n-    StubRoutines::_arrayof_oop_arraycopy        = generate_conjoint_oop_copy(StubGenStubId::arrayof_oop_arraycopy_id);\n-    StubRoutines::_arrayof_oop_arraycopy_uninit = generate_conjoint_oop_copy(StubGenStubId::arrayof_oop_arraycopy_uninit_id);\n+    StubRoutines::_jbyte_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubId::stubgen_jbyte_disjoint_arraycopy_id);\n+    StubRoutines::_jshort_disjoint_arraycopy     = generate_disjoint_nonoop_copy(StubId::stubgen_jshort_disjoint_arraycopy_id);\n+    StubRoutines::_jint_disjoint_arraycopy       = generate_disjoint_nonoop_copy  (StubId::stubgen_jint_disjoint_arraycopy_id);\n+    StubRoutines::_jlong_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubId::stubgen_jlong_disjoint_arraycopy_id);\n+    StubRoutines::_oop_disjoint_arraycopy        = generate_disjoint_oop_copy  (StubId::stubgen_oop_disjoint_arraycopy_id);\n+    StubRoutines::_oop_disjoint_arraycopy_uninit = generate_disjoint_oop_copy  (StubId::stubgen_oop_disjoint_arraycopy_uninit_id);\n+\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy     = generate_disjoint_nonoop_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy       = generate_disjoint_nonoop_copy  (StubId::stubgen_arrayof_jint_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy      = generate_disjoint_nonoop_copy (StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_oop_disjoint_arraycopy        = generate_disjoint_oop_copy  (StubId::stubgen_arrayof_oop_disjoint_arraycopy_id);\n+    StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit = generate_disjoint_oop_copy  (StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id);\n+\n+    StubRoutines::_jbyte_arraycopy           = generate_conjoint_nonoop_copy(StubId::stubgen_jbyte_arraycopy_id);\n+    StubRoutines::_jshort_arraycopy          = generate_conjoint_nonoop_copy(StubId::stubgen_jshort_arraycopy_id);\n+    StubRoutines::_jint_arraycopy            = generate_conjoint_nonoop_copy(StubId::stubgen_jint_arraycopy_id);\n+    StubRoutines::_jlong_arraycopy           = generate_conjoint_nonoop_copy(StubId::stubgen_jlong_arraycopy_id);\n+    StubRoutines::_oop_arraycopy             = generate_conjoint_oop_copy(StubId::stubgen_oop_arraycopy_id);\n+    StubRoutines::_oop_arraycopy_uninit      = generate_conjoint_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id);\n+\n+    StubRoutines::_arrayof_jbyte_arraycopy      = generate_conjoint_nonoop_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id);\n+    StubRoutines::_arrayof_jshort_arraycopy     = generate_conjoint_nonoop_copy(StubId::stubgen_arrayof_jshort_arraycopy_id);\n+    StubRoutines::_arrayof_jint_arraycopy       = generate_conjoint_nonoop_copy (StubId::stubgen_arrayof_jint_arraycopy_id);\n+    StubRoutines::_arrayof_jlong_arraycopy      = generate_conjoint_nonoop_copy(StubId::stubgen_arrayof_jlong_arraycopy_id);\n+    StubRoutines::_arrayof_oop_arraycopy        = generate_conjoint_oop_copy(StubId::stubgen_arrayof_oop_arraycopy_id);\n+    StubRoutines::_arrayof_oop_arraycopy_uninit = generate_conjoint_oop_copy(StubId::stubgen_arrayof_oop_arraycopy_uninit_id);\n@@ -1901,1 +1901,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_encryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_encryptBlock_id;\n@@ -1913,1 +1913,1 @@\n-    StubGenStubId stub_id = StubGenStubId::aescrypt_decryptBlock_id;\n+    StubId stub_id = StubId::stubgen_aescrypt_decryptBlock_id;\n@@ -1974,1 +1974,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_encryptAESCrypt_id;\n+    StubId stub_id = StubId::stubgen_cipherBlockChaining_encryptAESCrypt_id;\n@@ -1986,1 +1986,1 @@\n-    StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_decryptAESCrypt_id;\n+    StubId stub_id = StubId::stubgen_cipherBlockChaining_decryptAESCrypt_id;\n@@ -2693,1 +2693,1 @@\n-    StubGenStubId stub_id = StubGenStubId::counterMode_AESCrypt_id;\n+    StubId stub_id = StubId::stubgen_counterMode_AESCrypt_id;\n@@ -2707,1 +2707,1 @@\n-    StubGenStubId stub_id = StubGenStubId::ghash_processBlocks_id;\n+    StubId stub_id = StubId::stubgen_ghash_processBlocks_id;\n@@ -2785,1 +2785,1 @@\n-  address generate_SHA1_stub(StubGenStubId stub_id) {\n+  address generate_SHA1_stub(StubId stub_id) {\n@@ -2788,1 +2788,1 @@\n-    case sha1_implCompress_id:\n+    case StubId::stubgen_sha1_implCompress_id:\n@@ -2791,1 +2791,1 @@\n-    case sha1_implCompressMB_id:\n+    case StubId::stubgen_sha1_implCompressMB_id:\n@@ -2878,1 +2878,1 @@\n-  address generate_SHA256_stub(StubGenStubId stub_id) {\n+  address generate_SHA256_stub(StubId stub_id) {\n@@ -2881,1 +2881,1 @@\n-    case sha256_implCompress_id:\n+    case StubId::stubgen_sha256_implCompress_id:\n@@ -2884,1 +2884,1 @@\n-    case sha256_implCompressMB_id:\n+    case StubId::stubgen_sha256_implCompressMB_id:\n@@ -2969,1 +2969,1 @@\n-  address generate_SHA512_stub(StubGenStubId stub_id) {\n+  address generate_SHA512_stub(StubId stub_id) {\n@@ -2972,1 +2972,1 @@\n-    case sha512_implCompress_id:\n+    case StubId::stubgen_sha512_implCompress_id:\n@@ -2975,1 +2975,1 @@\n-    case sha512_implCompressMB_id:\n+    case StubId::stubgen_sha512_implCompressMB_id:\n@@ -3105,1 +3105,1 @@\n-    StubGenStubId stub_id =  StubGenStubId::updateBytesCRC32_id;\n+    StubId stub_id =  StubId::stubgen_updateBytesCRC32_id;\n@@ -3125,1 +3125,1 @@\n-    StubGenStubId stub_id =  StubGenStubId::updateBytesCRC32C_id;\n+    StubId stub_id =  StubId::stubgen_updateBytesCRC32C_id;\n@@ -3150,1 +3150,1 @@\n-    StubGenStubId stub_id =  StubGenStubId::multiplyToLen_id;\n+    StubId stub_id =  StubId::stubgen_multiplyToLen_id;\n@@ -3182,1 +3182,1 @@\n-    StubGenStubId stub_id =  StubGenStubId::method_entry_barrier_id;\n+    StubId stub_id =  StubId::stubgen_method_entry_barrier_id;\n@@ -3248,1 +3248,1 @@\n-    StubGenStubId stub_id =  StubGenStubId::upcall_stub_exception_handler_id;\n+    StubId stub_id =  StubId::stubgen_upcall_stub_exception_handler_id;\n@@ -3266,1 +3266,1 @@\n-    StubGenStubId stub_id =  StubGenStubId::upcall_stub_load_target_id;\n+    StubId stub_id =  StubId::stubgen_upcall_stub_load_target_id;\n@@ -3394,2 +3394,2 @@\n-      StubRoutines::_sha1_implCompress     = generate_SHA1_stub(StubGenStubId::sha1_implCompress_id);\n-      StubRoutines::_sha1_implCompressMB   = generate_SHA1_stub(StubGenStubId::sha1_implCompressMB_id);\n+      StubRoutines::_sha1_implCompress     = generate_SHA1_stub(StubId::stubgen_sha1_implCompress_id);\n+      StubRoutines::_sha1_implCompressMB   = generate_SHA1_stub(StubId::stubgen_sha1_implCompressMB_id);\n@@ -3398,2 +3398,2 @@\n-      StubRoutines::_sha256_implCompress   = generate_SHA256_stub(StubGenStubId::sha256_implCompress_id);\n-      StubRoutines::_sha256_implCompressMB = generate_SHA256_stub(StubGenStubId::sha256_implCompressMB_id);\n+      StubRoutines::_sha256_implCompress   = generate_SHA256_stub(StubId::stubgen_sha256_implCompress_id);\n+      StubRoutines::_sha256_implCompressMB = generate_SHA256_stub(StubId::stubgen_sha256_implCompressMB_id);\n@@ -3402,2 +3402,2 @@\n-      StubRoutines::_sha512_implCompress   = generate_SHA512_stub(StubGenStubId::sha512_implCompress_id);\n-      StubRoutines::_sha512_implCompressMB = generate_SHA512_stub(StubGenStubId::sha512_implCompressMB_id);\n+      StubRoutines::_sha512_implCompress   = generate_SHA512_stub(StubId::stubgen_sha512_implCompress_id);\n+      StubRoutines::_sha512_implCompressMB = generate_SHA512_stub(StubId::stubgen_sha512_implCompressMB_id);\n@@ -3423,1 +3423,1 @@\n-  StubGenerator(CodeBuffer* code, StubGenBlobId blob_id) : StubCodeGenerator(code, blob_id) {\n+  StubGenerator(CodeBuffer* code, BlobId blob_id) : StubCodeGenerator(code, blob_id) {\n@@ -3425,1 +3425,1 @@\n-    case preuniverse_id:\n+    case BlobId::stubgen_preuniverse_id:\n@@ -3428,1 +3428,1 @@\n-    case initial_id:\n+    case BlobId::stubgen_initial_id:\n@@ -3431,1 +3431,1 @@\n-     case continuation_id:\n+    case BlobId::stubgen_continuation_id:\n@@ -3434,1 +3434,1 @@\n-    case compiler_id:\n+    case BlobId::stubgen_compiler_id:\n@@ -3437,1 +3437,1 @@\n-    case final_id:\n+    case BlobId::stubgen_final_id:\n@@ -3441,1 +3441,1 @@\n-      fatal(\"unexpected blob id: %d\", blob_id);\n+      fatal(\"unexpected blob id: %s\", StubInfo::name(blob_id));\n@@ -3480,1 +3480,1 @@\n-void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id) {\n+void StubGenerator_generate(CodeBuffer* code, BlobId blob_id) {\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":97,"deletions":97,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::counter_overflow_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_counter_overflow_id)));\n@@ -67,1 +67,1 @@\n-    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -81,1 +81,1 @@\n-  C1StubId stub_id;\n+  StubId stub_id;\n@@ -83,1 +83,1 @@\n-    stub_id = C1StubId::throw_index_exception_id;\n+    stub_id = StubId::c1_throw_index_exception_id;\n@@ -85,1 +85,1 @@\n-    stub_id = C1StubId::throw_range_check_failed_id;\n+    stub_id = StubId::c1_throw_range_check_failed_id;\n@@ -100,1 +100,1 @@\n-  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -112,1 +112,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::throw_div0_exception_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_throw_div0_exception_id)));\n@@ -120,1 +120,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, StubId stub_id) {\n@@ -125,3 +125,3 @@\n-  assert(stub_id == C1StubId::new_instance_id                 ||\n-         stub_id == C1StubId::fast_new_instance_id            ||\n-         stub_id == C1StubId::fast_new_instance_init_check_id,\n+  assert(stub_id == StubId::c1_new_instance_id                 ||\n+         stub_id == StubId::c1_fast_new_instance_id            ||\n+         stub_id == StubId::c1_fast_new_instance_init_check_id,\n@@ -160,1 +160,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_type_array_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_new_type_array_id)));\n@@ -183,1 +183,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_object_array_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_new_object_array_id)));\n@@ -195,1 +195,1 @@\n-  C1StubId enter_id;\n+  StubId enter_id;\n@@ -197,1 +197,1 @@\n-    enter_id = C1StubId::monitorenter_id;\n+    enter_id = StubId::c1_monitorenter_id;\n@@ -199,1 +199,1 @@\n-    enter_id = C1StubId::monitorenter_nofpu_id;\n+    enter_id = StubId::c1_monitorenter_nofpu_id;\n@@ -216,1 +216,1 @@\n-  C1StubId exit_id;\n+  StubId exit_id;\n@@ -218,1 +218,1 @@\n-    exit_id = C1StubId::monitorexit_id;\n+    exit_id = StubId::c1_monitorexit_id;\n@@ -220,1 +220,1 @@\n-    exit_id = C1StubId::monitorexit_nofpu_id;\n+    exit_id = StubId::c1_monitorexit_nofpu_id;\n@@ -349,4 +349,4 @@\n-    case access_field_id:  target = Runtime1::entry_for(C1StubId::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for(C1StubId::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n-    case load_mirror_id:   target = Runtime1::entry_for(C1StubId::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n-    case load_appendix_id:      target = Runtime1::entry_for(C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case access_field_id:  target = Runtime1::entry_for(StubId::c1_access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for(StubId::c1_load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n+    case load_mirror_id:   target = Runtime1::entry_for(StubId::c1_load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case load_appendix_id:      target = Runtime1::entry_for(StubId::c1_load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n@@ -382,1 +382,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::deoptimize_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_deoptimize_id)));\n@@ -392,1 +392,1 @@\n-    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(StubId::c1_predicate_failed_trap_id);\n@@ -394,1 +394,1 @@\n-    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(StubId::c1_throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -380,1 +380,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_handle_exception_from_callee_id)));\n@@ -436,1 +436,1 @@\n-  __ jump(RuntimeAddress(Runtime1::entry_for(C1StubId::unwind_exception_id)));\n+  __ jump(RuntimeAddress(Runtime1::entry_for(StubId::c1_unwind_exception_id)));\n@@ -1390,1 +1390,1 @@\n-        __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+        __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -1404,1 +1404,1 @@\n-      __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+      __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -1483,1 +1483,1 @@\n-    __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+    __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n@@ -2220,1 +2220,1 @@\n-  C1StubId unwind_id;\n+  StubId unwind_id;\n@@ -2232,1 +2232,1 @@\n-    unwind_id = C1StubId::handle_exception_id;\n+    unwind_id = StubId::c1_handle_exception_id;\n@@ -2234,1 +2234,1 @@\n-    unwind_id = C1StubId::handle_exception_nofpu_id;\n+    unwind_id = StubId::c1_handle_exception_nofpu_id;\n@@ -2549,1 +2549,1 @@\n-      __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n+      __ call(RuntimeAddress(Runtime1::entry_for(StubId::c1_slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1246,1 +1246,1 @@\n-  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(StubId::c1_new_multi_array_id),\n@@ -1279,1 +1279,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n@@ -1284,1 +1284,1 @@\n-    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(StubId::c1_throw_class_cast_exception_id, obj.result(), info_for_exception);\n@@ -1320,1 +1320,1 @@\n-  return Runtime1::entry_for(C1StubId::is_instance_of_id);\n+  return Runtime1::entry_for(StubId::c1_is_instance_of_id);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-    call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n+    call(RuntimeAddress(Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)));\n@@ -294,1 +294,1 @@\n-    call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n+    call(RuntimeAddress(Runtime1::entry_for(StubId::c1_dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  align_stack = (stub_id() == (int)C1StubId::handle_exception_from_callee_id);\n+  align_stack = (stub_id() == (int)StubId::c1_handle_exception_from_callee_id);\n@@ -114,1 +114,1 @@\n-    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n+    } else if (_stub_id == (int)StubId::c1_forward_exception_id) {\n@@ -117,1 +117,1 @@\n-      jump(RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n+      jump(RuntimeAddress(Runtime1::entry_for(StubId::c1_forward_exception_id)));\n@@ -506,1 +506,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(StubId id, StubAssembler *sasm) {\n@@ -519,1 +519,1 @@\n-  case C1StubId::forward_exception_id:\n+  case StubId::c1_forward_exception_id:\n@@ -538,2 +538,2 @@\n-  case C1StubId::handle_exception_nofpu_id:\n-  case C1StubId::handle_exception_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_id:\n@@ -541,1 +541,1 @@\n-    oop_map = save_live_registers(sasm, 1 \/*thread*\/, id != C1StubId::handle_exception_nofpu_id);\n+    oop_map = save_live_registers(sasm, 1 \/*thread*\/, id != StubId::c1_handle_exception_nofpu_id);\n@@ -543,1 +543,1 @@\n-  case C1StubId::handle_exception_from_callee_id: {\n+  case StubId::c1_handle_exception_from_callee_id: {\n@@ -600,3 +600,3 @@\n-  case C1StubId::forward_exception_id:\n-  case C1StubId::handle_exception_nofpu_id:\n-  case C1StubId::handle_exception_id:\n+  case StubId::c1_forward_exception_id:\n+  case StubId::c1_handle_exception_nofpu_id:\n+  case StubId::c1_handle_exception_id:\n@@ -604,1 +604,1 @@\n-    restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n+    restore_live_registers(sasm, id != StubId::c1_handle_exception_nofpu_id);\n@@ -606,1 +606,1 @@\n-  case C1StubId::handle_exception_from_callee_id:\n+  case StubId::c1_handle_exception_from_callee_id:\n@@ -742,1 +742,1 @@\n-               RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n+               RuntimeAddress(Runtime1::entry_for(StubId::c1_forward_exception_id)));\n@@ -814,1 +814,1 @@\n-OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(StubId id, StubAssembler* sasm) {\n@@ -826,1 +826,1 @@\n-    case C1StubId::forward_exception_id:\n+    case StubId::c1_forward_exception_id:\n@@ -834,3 +834,3 @@\n-    case C1StubId::new_instance_id:\n-    case C1StubId::fast_new_instance_id:\n-    case C1StubId::fast_new_instance_init_check_id:\n+    case StubId::c1_new_instance_id:\n+    case StubId::c1_fast_new_instance_id:\n+    case StubId::c1_fast_new_instance_init_check_id:\n@@ -841,1 +841,1 @@\n-        if (id == C1StubId::new_instance_id) {\n+        if (id == StubId::c1_new_instance_id) {\n@@ -843,1 +843,1 @@\n-        } else if (id == C1StubId::fast_new_instance_id) {\n+        } else if (id == StubId::c1_fast_new_instance_id) {\n@@ -846,1 +846,1 @@\n-          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n+          assert(id == StubId::c1_fast_new_instance_init_check_id, \"bad StubId\");\n@@ -865,1 +865,1 @@\n-    case C1StubId::counter_overflow_id:\n+    case StubId::c1_counter_overflow_id:\n@@ -883,2 +883,2 @@\n-    case C1StubId::new_type_array_id:\n-    case C1StubId::new_object_array_id:\n+    case StubId::c1_new_type_array_id:\n+    case StubId::c1_new_object_array_id:\n@@ -890,1 +890,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -903,1 +903,1 @@\n-          int tag = ((id == C1StubId::new_type_array_id)\n+          int tag = ((id == StubId::c1_new_type_array_id)\n@@ -917,1 +917,1 @@\n-        if (id == C1StubId::new_type_array_id) {\n+        if (id == StubId::c1_new_type_array_id) {\n@@ -935,1 +935,1 @@\n-    case C1StubId::new_multi_array_id:\n+    case StubId::c1_new_multi_array_id:\n@@ -952,1 +952,1 @@\n-    case C1StubId::register_finalizer_id:\n+    case StubId::c1_register_finalizer_id:\n@@ -985,1 +985,1 @@\n-    case C1StubId::throw_range_check_failed_id:\n+    case StubId::c1_throw_range_check_failed_id:\n@@ -991,1 +991,1 @@\n-    case C1StubId::throw_index_exception_id:\n+    case StubId::c1_throw_index_exception_id:\n@@ -997,1 +997,1 @@\n-    case C1StubId::throw_div0_exception_id:\n+    case StubId::c1_throw_div0_exception_id:\n@@ -1003,1 +1003,1 @@\n-    case C1StubId::throw_null_pointer_exception_id:\n+    case StubId::c1_throw_null_pointer_exception_id:\n@@ -1009,2 +1009,2 @@\n-    case C1StubId::handle_exception_nofpu_id:\n-    case C1StubId::handle_exception_id:\n+    case StubId::c1_handle_exception_nofpu_id:\n+    case StubId::c1_handle_exception_id:\n@@ -1016,1 +1016,1 @@\n-    case C1StubId::handle_exception_from_callee_id:\n+    case StubId::c1_handle_exception_from_callee_id:\n@@ -1022,1 +1022,1 @@\n-    case C1StubId::unwind_exception_id:\n+    case StubId::c1_unwind_exception_id:\n@@ -1030,1 +1030,1 @@\n-    case C1StubId::throw_array_store_exception_id:\n+    case StubId::c1_throw_array_store_exception_id:\n@@ -1038,1 +1038,1 @@\n-    case C1StubId::throw_class_cast_exception_id:\n+    case StubId::c1_throw_class_cast_exception_id:\n@@ -1044,1 +1044,1 @@\n-    case C1StubId::throw_incompatible_class_change_error_id:\n+    case StubId::c1_throw_incompatible_class_change_error_id:\n@@ -1050,1 +1050,1 @@\n-    case C1StubId::slow_subtype_check_id:\n+    case StubId::c1_slow_subtype_check_id:\n@@ -1103,1 +1103,1 @@\n-    case C1StubId::is_instance_of_id:\n+    case StubId::c1_is_instance_of_id:\n@@ -1157,1 +1157,1 @@\n-    case C1StubId::monitorenter_nofpu_id:\n+    case StubId::c1_monitorenter_nofpu_id:\n@@ -1160,1 +1160,1 @@\n-    case C1StubId::monitorenter_id:\n+    case StubId::c1_monitorenter_id:\n@@ -1178,1 +1178,1 @@\n-    case C1StubId::monitorexit_nofpu_id:\n+    case StubId::c1_monitorexit_nofpu_id:\n@@ -1181,1 +1181,1 @@\n-    case C1StubId::monitorexit_id:\n+    case StubId::c1_monitorexit_id:\n@@ -1201,1 +1201,1 @@\n-    case C1StubId::deoptimize_id:\n+    case StubId::c1_deoptimize_id:\n@@ -1218,1 +1218,1 @@\n-    case C1StubId::access_field_patching_id:\n+    case StubId::c1_access_field_patching_id:\n@@ -1225,1 +1225,1 @@\n-    case C1StubId::load_klass_patching_id:\n+    case StubId::c1_load_klass_patching_id:\n@@ -1232,1 +1232,1 @@\n-    case C1StubId::load_mirror_patching_id:\n+    case StubId::c1_load_mirror_patching_id:\n@@ -1239,1 +1239,1 @@\n-    case C1StubId::load_appendix_patching_id:\n+    case StubId::c1_load_appendix_patching_id:\n@@ -1246,1 +1246,1 @@\n-    case C1StubId::dtrace_object_alloc_id:\n+    case StubId::c1_dtrace_object_alloc_id:\n@@ -1260,1 +1260,1 @@\n-    case C1StubId::fpu2long_stub_id:\n+    case StubId::c1_fpu2long_stub_id:\n@@ -1276,1 +1276,1 @@\n-    case C1StubId::predicate_failed_trap_id:\n+    case StubId::c1_predicate_failed_trap_id:\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2024, 2025, Intel Corporation. All rights reserved.\n@@ -208,1 +208,1 @@\n-  StubGenStubId stub_id = (isLL ?  StubGenStubId::string_indexof_linear_ll_id : (isUL ? StubGenStubId::string_indexof_linear_ul_id : StubGenStubId::string_indexof_linear_uu_id));\n+  StubId stub_id = (isLL ?  StubId::stubgen_string_indexof_linear_ll_id : (isUL ? StubId::stubgen_string_indexof_linear_ul_id : StubId::stubgen_string_indexof_linear_uu_id));\n","filename":"src\/hotspot\/cpu\/x86\/c2_stubGenerator_x86_64_string.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -433,2 +433,2 @@\n-  if (cb == Runtime1::blob_for(C1StubId::monitorenter_id) ||\n-      cb == Runtime1::blob_for(C1StubId::monitorenter_nofpu_id)) {\n+  if (cb == Runtime1::blob_for(StubId::c1_monitorenter_id) ||\n+      cb == Runtime1::blob_for(StubId::c1_monitorenter_nofpu_id)) {\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::uncommon_trap_id);\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, (uint)OptoStubId::uncommon_trap_id, name);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_uncommon_trap_id);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, BlobId::c2_uncommon_trap_id);\n@@ -239,1 +239,1 @@\n-  AOTCodeCache::store_code_blob(*ut_blob, AOTCodeEntry::C2Blob, (uint)OptoStubId::uncommon_trap_id, name);\n+  AOTCodeCache::store_code_blob(*ut_blob, AOTCodeEntry::C2Blob, BlobId::c2_uncommon_trap_id);\n@@ -276,2 +276,2 @@\n-  const char* name = OptoRuntime::stub_name(OptoStubId::exception_id);\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, (uint)OptoStubId::exception_id, name);\n+  const char* name = OptoRuntime::stub_name(StubId::c2_exception_id);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, BlobId::c2_exception_id);\n@@ -380,1 +380,1 @@\n-  AOTCodeCache::store_code_blob(*ex_blob, AOTCodeEntry::C2Blob, (uint)OptoStubId::exception_id, name);\n+  AOTCodeCache::store_code_blob(*ex_blob, AOTCodeEntry::C2Blob, BlobId::c2_exception_id);\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2620,2 +2620,2 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)SharedStubId::deopt_id, name);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_deopt_id);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, BlobId::shared_deopt_id);\n@@ -2979,1 +2979,1 @@\n-  AOTCodeCache::store_code_blob(*_deopt_blob, AOTCodeEntry::SharedBlob, (uint)SharedStubId::deopt_id, name);\n+  AOTCodeCache::store_code_blob(*_deopt_blob, AOTCodeEntry::SharedBlob, BlobId::shared_deopt_id);\n@@ -2987,1 +2987,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(StubId id, address call_ptr) {\n@@ -2994,1 +2994,1 @@\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -3008,2 +3008,2 @@\n-  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n-  bool save_wide_vectors = (id == SharedStubId::polling_page_vectors_safepoint_handler_id);\n+  bool cause_return = (id == StubId::shared_polling_page_return_handler_id);\n+  bool save_wide_vectors = (id == StubId::shared_polling_page_vectors_safepoint_handler_id);\n@@ -3163,1 +3163,1 @@\n-  AOTCodeCache::store_code_blob(*sp_blob, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  AOTCodeCache::store_code_blob(*sp_blob, AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -3175,1 +3175,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(StubId id, address destination) {\n@@ -3180,1 +3180,1 @@\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -3257,1 +3257,1 @@\n-  AOTCodeCache::store_code_blob(*rs_blob, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  AOTCodeCache::store_code_blob(*rs_blob, AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -3276,1 +3276,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(StubId id, address runtime_entry) {\n@@ -3299,1 +3299,1 @@\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -3362,1 +3362,1 @@\n-  AOTCodeCache::store_code_blob(*stub, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  AOTCodeCache::store_code_blob(*stub, AOTCodeEntry::SharedBlob, StubInfo::blob(id));\n@@ -3646,1 +3646,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_write_checkpoint_id);\n@@ -3691,1 +3691,1 @@\n-  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  const char* name = SharedRuntime::stub_name(StubId::shared_jfr_return_lease_id);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  do_arch_entry(x86, compiler, vector_int_shuffle_mask,                 \\\n+  do_arch_entry(x86, compiler, vector_byte_shuffle_mask,                 \\\n@@ -121,1 +121,1 @@\n-  do_arch_entry(x86, compiler, vector_int_shuffle_mask,                 \\\n+  do_arch_entry(x86, compiler, vector_short_shuffle_mask,               \\\n","filename":"src\/hotspot\/cpu\/x86\/stubDeclarations_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  StubGenStubId stub_id = StubGenStubId::call_stub_id;\n+  StubId stub_id = StubId::stubgen_call_stub_id;\n@@ -413,1 +413,1 @@\n-  StubGenStubId stub_id = StubGenStubId::catch_exception_id;\n+  StubId stub_id = StubId::stubgen_catch_exception_id;\n@@ -469,1 +469,1 @@\n-  StubGenStubId stub_id = StubGenStubId::forward_exception_id;\n+  StubId stub_id = StubId::stubgen_forward_exception_id;\n@@ -533,1 +533,1 @@\n-  StubGenStubId stub_id = StubGenStubId::fence_id;\n+  StubId stub_id = StubId::stubgen_fence_id;\n@@ -549,1 +549,1 @@\n-  StubGenStubId stub_id = StubGenStubId::get_previous_sp_id;\n+  StubId stub_id = StubId::stubgen_get_previous_sp_id;\n@@ -568,1 +568,1 @@\n-  StubGenStubId stub_id = StubGenStubId::verify_mxcsr_id;\n+  StubId stub_id = StubId::stubgen_verify_mxcsr_id;\n@@ -597,1 +597,1 @@\n-  StubGenStubId stub_id = StubGenStubId::f2i_fixup_id;\n+  StubId stub_id = StubId::stubgen_f2i_fixup_id;\n@@ -636,1 +636,1 @@\n-  StubGenStubId stub_id = StubGenStubId::f2l_fixup_id;\n+  StubId stub_id = StubId::stubgen_f2l_fixup_id;\n@@ -674,1 +674,1 @@\n-  StubGenStubId stub_id = StubGenStubId::d2i_fixup_id;\n+  StubId stub_id = StubId::stubgen_d2i_fixup_id;\n@@ -722,1 +722,1 @@\n-  StubGenStubId stub_id = StubGenStubId::d2l_fixup_id;\n+  StubId stub_id = StubId::stubgen_d2l_fixup_id;\n@@ -771,1 +771,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_count_leading_zeros_lut_id;\n+  StubId stub_id = StubId::stubgen_vector_count_leading_zeros_lut_id;\n@@ -789,1 +789,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_popcount_lut_id;\n+  StubId stub_id = StubId::stubgen_vector_popcount_lut_id;\n@@ -807,1 +807,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_iota_indices_id;\n+  StubId stub_id = StubId::stubgen_vector_iota_indices_id;\n@@ -869,1 +869,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_reverse_bit_lut_id;\n+  StubId stub_id = StubId::stubgen_vector_reverse_bit_lut_id;\n@@ -887,1 +887,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_reverse_byte_perm_mask_long_id;\n+  StubId stub_id = StubId::stubgen_vector_reverse_byte_perm_mask_long_id;\n@@ -905,1 +905,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_reverse_byte_perm_mask_int_id;\n+  StubId stub_id = StubId::stubgen_vector_reverse_byte_perm_mask_int_id;\n@@ -923,1 +923,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_reverse_byte_perm_mask_short_id;\n+  StubId stub_id = StubId::stubgen_vector_reverse_byte_perm_mask_short_id;\n@@ -941,1 +941,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_byte_shuffle_mask_id;\n+  StubId stub_id = StubId::stubgen_vector_byte_shuffle_mask_id;\n@@ -953,1 +953,1 @@\n-address StubGenerator::generate_fp_mask(StubGenStubId stub_id, int64_t mask) {\n+address StubGenerator::generate_fp_mask(StubId stub_id, int64_t mask) {\n@@ -964,1 +964,1 @@\n-address StubGenerator::generate_compress_perm_table(StubGenStubId stub_id) {\n+address StubGenerator::generate_compress_perm_table(StubId stub_id) {\n@@ -967,1 +967,1 @@\n-  case compress_perm_table32_id:\n+  case StubId::stubgen_compress_perm_table32_id:\n@@ -970,1 +970,1 @@\n-  case compress_perm_table64_id:\n+  case StubId::stubgen_compress_perm_table64_id:\n@@ -1019,1 +1019,1 @@\n-address StubGenerator::generate_expand_perm_table(StubGenStubId stub_id) {\n+address StubGenerator::generate_expand_perm_table(StubId stub_id) {\n@@ -1022,1 +1022,1 @@\n-  case expand_perm_table32_id:\n+  case StubId::stubgen_expand_perm_table32_id:\n@@ -1025,1 +1025,1 @@\n-  case expand_perm_table64_id:\n+  case StubId::stubgen_expand_perm_table64_id:\n@@ -1072,1 +1072,1 @@\n-address StubGenerator::generate_vector_mask(StubGenStubId stub_id, int64_t mask) {\n+address StubGenerator::generate_vector_mask(StubId stub_id, int64_t mask) {\n@@ -1091,1 +1091,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vector_byte_perm_mask_id;\n+  StubId stub_id = StubId::stubgen_vector_byte_perm_mask_id;\n@@ -1107,1 +1107,1 @@\n-address StubGenerator::generate_vector_fp_mask(StubGenStubId stub_id, int64_t mask) {\n+address StubGenerator::generate_vector_fp_mask(StubId stub_id, int64_t mask) {\n@@ -1124,1 +1124,1 @@\n-address StubGenerator::generate_vector_custom_i32(StubGenStubId stub_id, Assembler::AvxVectorLen len,\n+address StubGenerator::generate_vector_custom_i32(StubId stub_id, Assembler::AvxVectorLen len,\n@@ -1174,1 +1174,1 @@\n-  StubGenStubId stub_id = StubGenStubId::verify_oop_id;\n+  StubId stub_id = StubId::stubgen_verify_oop_id;\n@@ -1372,1 +1372,1 @@\n-  StubGenStubId stub_id = StubGenStubId::data_cache_writeback_id;\n+  StubId stub_id = StubId::stubgen_data_cache_writeback_id;\n@@ -1390,1 +1390,1 @@\n-  StubGenStubId stub_id = StubGenStubId::data_cache_writeback_sync_id;\n+  StubId stub_id = StubId::stubgen_data_cache_writeback_sync_id;\n@@ -1412,1 +1412,1 @@\n-address StubGenerator::generate_md5_implCompress(StubGenStubId stub_id) {\n+address StubGenerator::generate_md5_implCompress(StubId stub_id) {\n@@ -1415,1 +1415,1 @@\n-  case md5_implCompress_id:\n+  case StubId::stubgen_md5_implCompress_id:\n@@ -1418,1 +1418,1 @@\n-  case md5_implCompressMB_id:\n+  case StubId::stubgen_md5_implCompressMB_id:\n@@ -1461,1 +1461,1 @@\n-  StubGenStubId stub_id = StubGenStubId::upper_word_mask_id;\n+  StubId stub_id = StubId::stubgen_upper_word_mask_id;\n@@ -1473,1 +1473,1 @@\n-  StubGenStubId stub_id = StubGenStubId::shuffle_byte_flip_mask_id;\n+  StubId stub_id = StubId::stubgen_shuffle_byte_flip_mask_id;\n@@ -1485,1 +1485,1 @@\n-address StubGenerator::generate_sha1_implCompress(StubGenStubId stub_id) {\n+address StubGenerator::generate_sha1_implCompress(StubId stub_id) {\n@@ -1488,1 +1488,1 @@\n-  case sha1_implCompress_id:\n+  case StubId::stubgen_sha1_implCompress_id:\n@@ -1491,1 +1491,1 @@\n-  case sha1_implCompressMB_id:\n+  case StubId::stubgen_sha1_implCompressMB_id:\n@@ -1533,1 +1533,1 @@\n-  StubGenStubId stub_id = StubGenStubId::pshuffle_byte_flip_mask_id;\n+  StubId stub_id = StubId::stubgen_pshuffle_byte_flip_mask_id;\n@@ -1561,1 +1561,1 @@\n-  StubGenStubId stub_id = StubGenStubId::pshuffle_byte_flip_mask_sha512_id;\n+  StubId stub_id = StubId::stubgen_pshuffle_byte_flip_mask_sha512_id;\n@@ -1581,1 +1581,1 @@\n-address StubGenerator::generate_sha256_implCompress(StubGenStubId stub_id) {\n+address StubGenerator::generate_sha256_implCompress(StubId stub_id) {\n@@ -1584,1 +1584,1 @@\n-  case sha256_implCompress_id:\n+  case StubId::stubgen_sha256_implCompress_id:\n@@ -1587,1 +1587,1 @@\n-  case sha256_implCompressMB_id:\n+  case StubId::stubgen_sha256_implCompressMB_id:\n@@ -1634,1 +1634,1 @@\n-address StubGenerator::generate_sha512_implCompress(StubGenStubId stub_id) {\n+address StubGenerator::generate_sha512_implCompress(StubId stub_id) {\n@@ -1637,1 +1637,1 @@\n-  case sha512_implCompress_id:\n+  case StubId::stubgen_sha512_implCompress_id:\n@@ -1640,1 +1640,1 @@\n-  case sha512_implCompressMB_id:\n+  case StubId::stubgen_sha512_implCompressMB_id:\n@@ -1684,1 +1684,1 @@\n-  StubGenStubId stub_id = StubGenStubId::shuffle_base64_id;\n+  StubId stub_id = StubId::stubgen_shuffle_base64_id;\n@@ -1704,1 +1704,1 @@\n-  StubGenStubId stub_id = StubGenStubId::avx2_shuffle_base64_id;\n+  StubId stub_id = StubId::stubgen_avx2_shuffle_base64_id;\n@@ -1718,1 +1718,1 @@\n-  StubGenStubId stub_id = StubGenStubId::avx2_input_mask_base64_id;\n+  StubId stub_id = StubId::stubgen_avx2_input_mask_base64_id;\n@@ -1732,1 +1732,1 @@\n-  StubGenStubId stub_id = StubGenStubId::avx2_lut_base64_id;\n+  StubId stub_id = StubId::stubgen_avx2_lut_base64_id;\n@@ -1752,1 +1752,1 @@\n-  StubGenStubId stub_id = StubGenStubId::encoding_table_base64_id;\n+  StubId stub_id = StubId::stubgen_encoding_table_base64_id;\n@@ -1786,1 +1786,1 @@\n-  StubGenStubId stub_id = StubGenStubId::base64_encodeBlock_id;\n+  StubId stub_id = StubId::stubgen_base64_encodeBlock_id;\n@@ -2169,1 +2169,1 @@\n-  StubGenStubId stub_id = StubGenStubId::lookup_lo_base64_id;\n+  StubId stub_id = StubId::stubgen_lookup_lo_base64_id;\n@@ -2189,1 +2189,1 @@\n-  StubGenStubId stub_id = StubGenStubId::lookup_hi_base64_id;\n+  StubId stub_id = StubId::stubgen_lookup_hi_base64_id;\n@@ -2208,1 +2208,1 @@\n-  StubGenStubId stub_id = StubGenStubId::lookup_lo_base64url_id;\n+  StubId stub_id = StubId::stubgen_lookup_lo_base64url_id;\n@@ -2228,1 +2228,1 @@\n-  StubGenStubId stub_id = StubGenStubId::lookup_hi_base64url_id;\n+  StubId stub_id = StubId::stubgen_lookup_hi_base64url_id;\n@@ -2248,1 +2248,1 @@\n-  StubGenStubId stub_id = StubGenStubId::pack_vec_base64_id;\n+  StubId stub_id = StubId::stubgen_pack_vec_base64_id;\n@@ -2268,1 +2268,1 @@\n-  StubGenStubId stub_id = StubGenStubId::join_0_1_base64_id;\n+  StubId stub_id = StubId::stubgen_join_0_1_base64_id;\n@@ -2288,1 +2288,1 @@\n-  StubGenStubId stub_id = StubGenStubId::join_1_2_base64_id;\n+  StubId stub_id = StubId::stubgen_join_1_2_base64_id;\n@@ -2308,1 +2308,1 @@\n-  StubGenStubId stub_id = StubGenStubId::join_2_3_base64_id;\n+  StubId stub_id = StubId::stubgen_join_2_3_base64_id;\n@@ -2328,1 +2328,1 @@\n-  StubGenStubId stub_id = StubGenStubId::avx2_decode_tables_base64_id;\n+  StubId stub_id = StubId::stubgen_avx2_decode_tables_base64_id;\n@@ -2363,1 +2363,1 @@\n-  StubGenStubId stub_id = StubGenStubId::avx2_decode_lut_tables_base64_id;\n+  StubId stub_id = StubId::stubgen_avx2_decode_lut_tables_base64_id;\n@@ -2403,1 +2403,1 @@\n-  StubGenStubId stub_id = StubGenStubId::decoding_table_base64_id;\n+  StubId stub_id = StubId::stubgen_decoding_table_base64_id;\n@@ -2486,1 +2486,1 @@\n-  StubGenStubId stub_id = StubGenStubId::base64_decodeBlock_id;\n+  StubId stub_id = StubId::stubgen_base64_decodeBlock_id;\n@@ -3020,1 +3020,1 @@\n-  StubGenStubId stub_id = StubGenStubId::updateBytesCRC32_id;\n+  StubId stub_id = StubId::stubgen_updateBytesCRC32_id;\n@@ -3077,1 +3077,1 @@\n-  StubGenStubId stub_id = StubGenStubId::updateBytesCRC32C_id;\n+  StubId stub_id = StubId::stubgen_updateBytesCRC32C_id;\n@@ -3158,1 +3158,1 @@\n-  StubGenStubId stub_id = StubGenStubId::multiplyToLen_id;\n+  StubId stub_id = StubId::stubgen_multiplyToLen_id;\n@@ -3215,1 +3215,1 @@\n-  StubGenStubId stub_id = StubGenStubId::vectorizedMismatch_id;\n+  StubId stub_id = StubId::stubgen_vectorizedMismatch_id;\n@@ -3267,1 +3267,1 @@\n-  StubGenStubId stub_id = StubGenStubId::squareToLen_id;\n+  StubId stub_id = StubId::stubgen_squareToLen_id;\n@@ -3303,1 +3303,1 @@\n-  StubGenStubId stub_id = StubGenStubId::method_entry_barrier_id;\n+  StubId stub_id = StubId::stubgen_method_entry_barrier_id;\n@@ -3393,1 +3393,1 @@\n-  StubGenStubId stub_id = StubGenStubId::mulAdd_id;\n+  StubId stub_id = StubId::stubgen_mulAdd_id;\n@@ -3435,1 +3435,1 @@\n-  StubGenStubId stub_id = StubGenStubId::bigIntegerRightShiftWorker_id;\n+  StubId stub_id = StubId::stubgen_bigIntegerRightShiftWorker_id;\n@@ -3571,1 +3571,1 @@\n-  StubGenStubId stub_id = StubGenStubId::bigIntegerLeftShiftWorker_id;\n+  StubId stub_id = StubId::stubgen_bigIntegerLeftShiftWorker_id;\n@@ -3723,1 +3723,1 @@\n-  StubGenStubId stub_id = StubGenStubId::hf2f_id;\n+  StubId stub_id = StubId::stubgen_hf2f_id;\n@@ -3749,1 +3749,1 @@\n-  StubGenStubId stub_id = StubGenStubId::f2hf_id;\n+  StubId stub_id = StubId::stubgen_f2hf_id;\n@@ -3765,1 +3765,1 @@\n-address StubGenerator::generate_cont_thaw(StubGenStubId stub_id) {\n+address StubGenerator::generate_cont_thaw(StubId stub_id) {\n@@ -3773,1 +3773,1 @@\n-  case cont_thaw_id:\n+  case StubId::stubgen_cont_thaw_id:\n@@ -3778,1 +3778,1 @@\n-  case cont_returnBarrier_id:\n+  case StubId::stubgen_cont_returnBarrier_id:\n@@ -3783,1 +3783,1 @@\n-  case cont_returnBarrierExc_id:\n+  case StubId::stubgen_cont_returnBarrierExc_id:\n@@ -3909,1 +3909,1 @@\n-  return generate_cont_thaw(StubGenStubId::cont_thaw_id);\n+  return generate_cont_thaw(StubId::stubgen_cont_thaw_id);\n@@ -3915,1 +3915,1 @@\n-  return generate_cont_thaw(StubGenStubId::cont_returnBarrier_id);\n+  return generate_cont_thaw(StubId::stubgen_cont_returnBarrier_id);\n@@ -3919,1 +3919,1 @@\n-  return generate_cont_thaw(StubGenStubId::cont_returnBarrierExc_id);\n+  return generate_cont_thaw(StubId::stubgen_cont_returnBarrierExc_id);\n@@ -3924,1 +3924,1 @@\n-  StubGenStubId stub_id = StubGenStubId::cont_preempt_id;\n+  StubId stub_id = StubId::stubgen_cont_preempt_id;\n@@ -3955,1 +3955,1 @@\n-  StubGenStubId stub_id = StubGenStubId::upcall_stub_exception_handler_id;\n+  StubId stub_id = StubId::stubgen_upcall_stub_exception_handler_id;\n@@ -3976,1 +3976,1 @@\n-  StubGenStubId stub_id = StubGenStubId::upcall_stub_load_target_id;\n+  StubId stub_id = StubId::stubgen_upcall_stub_load_target_id;\n@@ -3996,1 +3996,1 @@\n-  StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_id;\n+  StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_id;\n@@ -4016,1 +4016,1 @@\n-  StubGenStubId stub_id = StubGenStubId::lookup_secondary_supers_table_slow_path_id;\n+  StubId stub_id = StubId::stubgen_lookup_secondary_supers_table_slow_path_id;\n@@ -4092,4 +4092,4 @@\n-  StubRoutines::x86::_float_sign_mask       = generate_fp_mask(StubGenStubId::float_sign_mask_id,  0x7FFFFFFF7FFFFFFF);\n-  StubRoutines::x86::_float_sign_flip       = generate_fp_mask(StubGenStubId::float_sign_flip_id,  0x8000000080000000);\n-  StubRoutines::x86::_double_sign_mask      = generate_fp_mask(StubGenStubId::double_sign_mask_id, 0x7FFFFFFFFFFFFFFF);\n-  StubRoutines::x86::_double_sign_flip      = generate_fp_mask(StubGenStubId::double_sign_flip_id, 0x8000000000000000);\n+  StubRoutines::x86::_float_sign_mask       = generate_fp_mask(StubId::stubgen_float_sign_mask_id,  0x7FFFFFFF7FFFFFFF);\n+  StubRoutines::x86::_float_sign_flip       = generate_fp_mask(StubId::stubgen_float_sign_flip_id,  0x8000000080000000);\n+  StubRoutines::x86::_double_sign_mask      = generate_fp_mask(StubId::stubgen_double_sign_mask_id, 0x7FFFFFFFFFFFFFFF);\n+  StubRoutines::x86::_double_sign_flip      = generate_fp_mask(StubId::stubgen_double_sign_flip_id, 0x8000000000000000);\n@@ -4168,7 +4168,7 @@\n-  StubRoutines::x86::_vector_float_sign_mask = generate_vector_mask(StubGenStubId::vector_float_sign_mask_id, 0x7FFFFFFF7FFFFFFF);\n-  StubRoutines::x86::_vector_float_sign_flip = generate_vector_mask(StubGenStubId::vector_float_sign_flip_id, 0x8000000080000000);\n-  StubRoutines::x86::_vector_double_sign_mask = generate_vector_mask(StubGenStubId::vector_double_sign_mask_id, 0x7FFFFFFFFFFFFFFF);\n-  StubRoutines::x86::_vector_double_sign_flip = generate_vector_mask(StubGenStubId::vector_double_sign_flip_id, 0x8000000000000000);\n-  StubRoutines::x86::_vector_all_bits_set = generate_vector_mask(StubGenStubId::vector_all_bits_set_id, 0xFFFFFFFFFFFFFFFF);\n-  StubRoutines::x86::_vector_int_mask_cmp_bits = generate_vector_mask(StubGenStubId::vector_int_mask_cmp_bits_id, 0x0000000100000001);\n-  StubRoutines::x86::_vector_short_to_byte_mask = generate_vector_mask(StubGenStubId::vector_short_to_byte_mask_id, 0x00ff00ff00ff00ff);\n+  StubRoutines::x86::_vector_float_sign_mask = generate_vector_mask(StubId::stubgen_vector_float_sign_mask_id, 0x7FFFFFFF7FFFFFFF);\n+  StubRoutines::x86::_vector_float_sign_flip = generate_vector_mask(StubId::stubgen_vector_float_sign_flip_id, 0x8000000080000000);\n+  StubRoutines::x86::_vector_double_sign_mask = generate_vector_mask(StubId::stubgen_vector_double_sign_mask_id, 0x7FFFFFFFFFFFFFFF);\n+  StubRoutines::x86::_vector_double_sign_flip = generate_vector_mask(StubId::stubgen_vector_double_sign_flip_id, 0x8000000000000000);\n+  StubRoutines::x86::_vector_all_bits_set = generate_vector_mask(StubId::stubgen_vector_all_bits_set_id, 0xFFFFFFFFFFFFFFFF);\n+  StubRoutines::x86::_vector_int_mask_cmp_bits = generate_vector_mask(StubId::stubgen_vector_int_mask_cmp_bits_id, 0x0000000100000001);\n+  StubRoutines::x86::_vector_short_to_byte_mask = generate_vector_mask(StubId::stubgen_vector_short_to_byte_mask_id, 0x00ff00ff00ff00ff);\n@@ -4176,3 +4176,3 @@\n-  StubRoutines::x86::_vector_int_to_byte_mask = generate_vector_mask(StubGenStubId::vector_int_to_byte_mask_id, 0x000000ff000000ff);\n-  StubRoutines::x86::_vector_int_to_short_mask = generate_vector_mask(StubGenStubId::vector_int_to_short_mask_id, 0x0000ffff0000ffff);\n-  StubRoutines::x86::_vector_32_bit_mask = generate_vector_custom_i32(StubGenStubId::vector_32_bit_mask_id, Assembler::AVX_512bit,\n+  StubRoutines::x86::_vector_int_to_byte_mask = generate_vector_mask(StubId::stubgen_vector_int_to_byte_mask_id, 0x000000ff000000ff);\n+  StubRoutines::x86::_vector_int_to_short_mask = generate_vector_mask(StubId::stubgen_vector_int_to_short_mask_id, 0x0000ffff0000ffff);\n+  StubRoutines::x86::_vector_32_bit_mask = generate_vector_custom_i32(StubId::stubgen_vector_32_bit_mask_id, Assembler::AVX_512bit,\n@@ -4180,1 +4180,1 @@\n-  StubRoutines::x86::_vector_64_bit_mask = generate_vector_custom_i32(StubGenStubId::vector_64_bit_mask_id, Assembler::AVX_512bit,\n+  StubRoutines::x86::_vector_64_bit_mask = generate_vector_custom_i32(StubId::stubgen_vector_64_bit_mask_id, Assembler::AVX_512bit,\n@@ -4182,1 +4182,1 @@\n-  StubRoutines::x86::_vector_int_shuffle_mask = generate_vector_mask(StubGenStubId::vector_int_shuffle_mask_id, 0x0302010003020100);\n+  StubRoutines::x86::_vector_int_shuffle_mask = generate_vector_mask(StubId::stubgen_vector_int_shuffle_mask_id, 0x0302010003020100);\n@@ -4184,3 +4184,3 @@\n-  StubRoutines::x86::_vector_short_shuffle_mask = generate_vector_mask(StubGenStubId::vector_short_shuffle_mask_id, 0x0100010001000100);\n-  StubRoutines::x86::_vector_long_shuffle_mask = generate_vector_mask(StubGenStubId::vector_long_shuffle_mask_id, 0x0000000100000000);\n-  StubRoutines::x86::_vector_long_sign_mask = generate_vector_mask(StubGenStubId::vector_long_sign_mask_id, 0x8000000000000000);\n+  StubRoutines::x86::_vector_short_shuffle_mask = generate_vector_mask(StubId::stubgen_vector_short_shuffle_mask_id, 0x0100010001000100);\n+  StubRoutines::x86::_vector_long_shuffle_mask = generate_vector_mask(StubId::stubgen_vector_long_shuffle_mask_id, 0x0000000100000000);\n+  StubRoutines::x86::_vector_long_sign_mask = generate_vector_mask(StubId::stubgen_vector_long_sign_mask_id, 0x8000000000000000);\n@@ -4195,4 +4195,4 @@\n-    StubRoutines::x86::_compress_perm_table32 = generate_compress_perm_table(StubGenStubId::compress_perm_table32_id);\n-    StubRoutines::x86::_compress_perm_table64 = generate_compress_perm_table(StubGenStubId::compress_perm_table64_id);\n-    StubRoutines::x86::_expand_perm_table32 = generate_expand_perm_table(StubGenStubId::expand_perm_table32_id);\n-    StubRoutines::x86::_expand_perm_table64 = generate_expand_perm_table(StubGenStubId::expand_perm_table64_id);\n+    StubRoutines::x86::_compress_perm_table32 = generate_compress_perm_table(StubId::stubgen_compress_perm_table32_id);\n+    StubRoutines::x86::_compress_perm_table64 = generate_compress_perm_table(StubId::stubgen_compress_perm_table64_id);\n+    StubRoutines::x86::_expand_perm_table32 = generate_expand_perm_table(StubId::stubgen_expand_perm_table32_id);\n+    StubRoutines::x86::_expand_perm_table64 = generate_expand_perm_table(StubId::stubgen_expand_perm_table64_id);\n@@ -4242,2 +4242,2 @@\n-    StubRoutines::_md5_implCompress = generate_md5_implCompress(StubGenStubId::md5_implCompress_id);\n-    StubRoutines::_md5_implCompressMB = generate_md5_implCompress(StubGenStubId::md5_implCompressMB_id);\n+    StubRoutines::_md5_implCompress = generate_md5_implCompress(StubId::stubgen_md5_implCompress_id);\n+    StubRoutines::_md5_implCompressMB = generate_md5_implCompress(StubId::stubgen_md5_implCompressMB_id);\n@@ -4249,2 +4249,2 @@\n-    StubRoutines::_sha1_implCompress = generate_sha1_implCompress(StubGenStubId::sha1_implCompress_id);\n-    StubRoutines::_sha1_implCompressMB = generate_sha1_implCompress(StubGenStubId::sha1_implCompressMB_id);\n+    StubRoutines::_sha1_implCompress = generate_sha1_implCompress(StubId::stubgen_sha1_implCompress_id);\n+    StubRoutines::_sha1_implCompressMB = generate_sha1_implCompress(StubId::stubgen_sha1_implCompressMB_id);\n@@ -4263,2 +4263,2 @@\n-    StubRoutines::_sha256_implCompress = generate_sha256_implCompress(StubGenStubId::sha256_implCompress_id);\n-    StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(StubGenStubId::sha256_implCompressMB_id);\n+    StubRoutines::_sha256_implCompress = generate_sha256_implCompress(StubId::stubgen_sha256_implCompress_id);\n+    StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(StubId::stubgen_sha256_implCompressMB_id);\n@@ -4270,2 +4270,2 @@\n-    StubRoutines::_sha512_implCompress = generate_sha512_implCompress(StubGenStubId::sha512_implCompress_id);\n-    StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(StubGenStubId::sha512_implCompressMB_id);\n+    StubRoutines::_sha512_implCompress = generate_sha512_implCompress(StubId::stubgen_sha512_implCompress_id);\n+    StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(StubId::stubgen_sha512_implCompressMB_id);\n@@ -4347,1 +4347,1 @@\n-StubGenerator::StubGenerator(CodeBuffer* code, StubGenBlobId blob_id) : StubCodeGenerator(code, blob_id) {\n+StubGenerator::StubGenerator(CodeBuffer* code, BlobId blob_id) : StubCodeGenerator(code, blob_id) {\n@@ -4349,1 +4349,1 @@\n-  case preuniverse_id:\n+  case BlobId::stubgen_preuniverse_id:\n@@ -4352,1 +4352,1 @@\n-  case initial_id:\n+  case BlobId::stubgen_initial_id:\n@@ -4355,1 +4355,1 @@\n-  case continuation_id:\n+  case BlobId::stubgen_continuation_id:\n@@ -4358,1 +4358,1 @@\n-  case compiler_id:\n+  case BlobId::stubgen_compiler_id:\n@@ -4361,1 +4361,1 @@\n-  case final_id:\n+  case BlobId::stubgen_final_id:\n@@ -4365,1 +4365,1 @@\n-    fatal(\"unexpected blob id: %d\", blob_id);\n+    fatal(\"unexpected blob id: %s\", StubInfo::name(blob_id));\n@@ -4370,1 +4370,1 @@\n-void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id) {\n+void StubGenerator_generate(CodeBuffer* code, BlobId blob_id) {\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":128,"deletions":128,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  address generate_fp_mask(StubGenStubId stub_id, int64_t mask);\n+  address generate_fp_mask(StubId stub_id, int64_t mask);\n@@ -103,1 +103,1 @@\n-  address generate_compress_perm_table(StubGenStubId stub_id);\n+  address generate_compress_perm_table(StubId stub_id);\n@@ -105,1 +105,1 @@\n-  address generate_expand_perm_table(StubGenStubId stub_id);\n+  address generate_expand_perm_table(StubId stub_id);\n@@ -107,1 +107,1 @@\n-  address generate_vector_mask(StubGenStubId stub_id, int64_t mask);\n+  address generate_vector_mask(StubId stub_id, int64_t mask);\n@@ -111,1 +111,1 @@\n-  address generate_vector_fp_mask(StubGenStubId stub_id, int64_t mask);\n+  address generate_vector_fp_mask(StubId stub_id, int64_t mask);\n@@ -113,1 +113,1 @@\n-  address generate_vector_custom_i32(StubGenStubId stub_id, Assembler::AvxVectorLen len,\n+  address generate_vector_custom_i32(StubId stub_id, Assembler::AvxVectorLen len,\n@@ -183,1 +183,1 @@\n-  address generate_disjoint_copy_avx3_masked(StubGenStubId stub_id, address* entry);\n+  address generate_disjoint_copy_avx3_masked(StubId stub_id, address* entry);\n@@ -185,1 +185,1 @@\n-  address generate_conjoint_copy_avx3_masked(StubGenStubId stub_id, address* entry,\n+  address generate_conjoint_copy_avx3_masked(StubId stub_id, address* entry,\n@@ -233,1 +233,1 @@\n-  address generate_fill(StubGenStubId stub_id);\n+  address generate_fill(StubId stub_id);\n@@ -236,2 +236,2 @@\n-  address generate_disjoint_int_oop_copy(StubGenStubId stub_id, address* entry);\n-  address generate_conjoint_int_oop_copy(StubGenStubId stub_id, address nooverlap_target,\n+  address generate_disjoint_int_oop_copy(StubId stub_id, address* entry);\n+  address generate_conjoint_int_oop_copy(StubId stub_id, address nooverlap_target,\n@@ -239,2 +239,2 @@\n-  address generate_disjoint_long_oop_copy(StubGenStubId stub_id, address* entry);\n-  address generate_conjoint_long_oop_copy(StubGenStubId stub_id, address nooverlap_target,\n+  address generate_disjoint_long_oop_copy(StubId stub_id, address* entry);\n+  address generate_conjoint_long_oop_copy(StubId stub_id, address nooverlap_target,\n@@ -251,1 +251,1 @@\n-  address generate_checkcast_copy(StubGenStubId stub_id, address *entry);\n+  address generate_checkcast_copy(StubId stub_id, address *entry);\n@@ -297,1 +297,1 @@\n-  address generate_md5_implCompress(StubGenStubId stub_id);\n+  address generate_md5_implCompress(StubId stub_id);\n@@ -304,1 +304,1 @@\n-  address generate_sha1_implCompress(StubGenStubId stub_id);\n+  address generate_sha1_implCompress(StubId stub_id);\n@@ -308,2 +308,2 @@\n-  address generate_sha256_implCompress(StubGenStubId stub_id);\n-  address generate_sha512_implCompress(StubGenStubId stub_id);\n+  address generate_sha256_implCompress(StubId stub_id);\n+  address generate_sha512_implCompress(StubId stub_id);\n@@ -593,1 +593,1 @@\n-  address generate_cont_thaw(StubGenStubId stub_id);\n+  address generate_cont_thaw(StubId stub_id);\n@@ -644,1 +644,1 @@\n-  StubGenerator(CodeBuffer* code, StubGenBlobId blob_id);\n+  StubGenerator(CodeBuffer* code, BlobId blob_id);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2021, 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2021, 2025, Intel Corporation. All rights reserved.\n@@ -69,1 +69,1 @@\n-  StubGenStubId stub_id = StubGenStubId::updateBytesAdler32_id;\n+  StubId stub_id = StubId::stubgen_updateBytesAdler32_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_adler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2019, 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2019, 2025, Intel Corporation. All rights reserved.\n@@ -252,1 +252,1 @@\n-  StubGenStubId stub_id = StubGenStubId::galoisCounterMode_AESCrypt_id;\n+  StubId stub_id = StubId::stubgen_galoisCounterMode_AESCrypt_id;\n@@ -339,1 +339,1 @@\n-  StubGenStubId stub_id = StubGenStubId::galoisCounterMode_AESCrypt_id;\n+  StubId stub_id = StubId::stubgen_galoisCounterMode_AESCrypt_id;\n@@ -411,1 +411,1 @@\n-  StubGenStubId stub_id = StubGenStubId::counterMode_AESCrypt_id;\n+  StubId stub_id = StubId::stubgen_counterMode_AESCrypt_id;\n@@ -500,1 +500,1 @@\n-  StubGenStubId stub_id = StubGenStubId::counterMode_AESCrypt_id;\n+  StubId stub_id = StubId::stubgen_counterMode_AESCrypt_id;\n@@ -788,1 +788,1 @@\n-  StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_decryptAESCrypt_id;\n+  StubId stub_id = StubId::stubgen_cipherBlockChaining_decryptAESCrypt_id;\n@@ -1071,1 +1071,1 @@\n-  StubGenStubId stub_id = StubGenStubId::aescrypt_encryptBlock_id;\n+  StubId stub_id = StubId::stubgen_aescrypt_encryptBlock_id;\n@@ -1166,1 +1166,1 @@\n-  StubGenStubId stub_id = StubGenStubId::aescrypt_decryptBlock_id;\n+  StubId stub_id = StubId::stubgen_aescrypt_decryptBlock_id;\n@@ -1268,1 +1268,1 @@\n-  StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_encryptAESCrypt_id;\n+  StubId stub_id = StubId::stubgen_cipherBlockChaining_encryptAESCrypt_id;\n@@ -1420,1 +1420,1 @@\n-  StubGenStubId stub_id = StubGenStubId::cipherBlockChaining_decryptAESCrypt_id;\n+  StubId stub_id = StubId::stubgen_cipherBlockChaining_decryptAESCrypt_id;\n@@ -1663,1 +1663,1 @@\n-  StubGenStubId stub_id = StubGenStubId::electronicCodeBook_encryptAESCrypt_id;\n+  StubId stub_id = StubId::stubgen_electronicCodeBook_encryptAESCrypt_id;\n@@ -1684,1 +1684,1 @@\n-  StubGenStubId stub_id = StubGenStubId::electronicCodeBook_decryptAESCrypt_id;\n+  StubId stub_id = StubId::stubgen_electronicCodeBook_decryptAESCrypt_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_aes.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n-  StubRoutines::_jint_disjoint_arraycopy   = generate_disjoint_int_oop_copy(StubGenStubId::jint_disjoint_arraycopy_id, &entry);\n-  StubRoutines::_jint_arraycopy            = generate_conjoint_int_oop_copy(StubGenStubId::jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+  StubRoutines::_jint_disjoint_arraycopy   = generate_disjoint_int_oop_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &entry);\n+  StubRoutines::_jint_arraycopy            = generate_conjoint_int_oop_copy(StubId::stubgen_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n@@ -96,2 +96,2 @@\n-  StubRoutines::_jlong_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubGenStubId::jlong_disjoint_arraycopy_id, &entry);\n-  StubRoutines::_jlong_arraycopy           = generate_conjoint_long_oop_copy(StubGenStubId::jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n+  StubRoutines::_jlong_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubId::stubgen_jlong_disjoint_arraycopy_id, &entry);\n+  StubRoutines::_jlong_arraycopy           = generate_conjoint_long_oop_copy(StubId::stubgen_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n@@ -99,4 +99,4 @@\n-    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_int_oop_copy(StubGenStubId::oop_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_oop_arraycopy           = generate_conjoint_int_oop_copy(StubGenStubId::oop_arraycopy_id, entry, &entry_oop_arraycopy);\n-    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_int_oop_copy(StubGenStubId::oop_disjoint_arraycopy_uninit_id, &entry);\n-    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_int_oop_copy(StubGenStubId::oop_arraycopy_uninit_id, entry, nullptr);\n+    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_int_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_oop_arraycopy           = generate_conjoint_int_oop_copy(StubId::stubgen_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n+    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_int_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id, &entry);\n+    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_int_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id, entry, nullptr);\n@@ -104,4 +104,4 @@\n-    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubGenStubId::oop_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_oop_arraycopy           = generate_conjoint_long_oop_copy(StubGenStubId::oop_arraycopy_id, entry, &entry_oop_arraycopy);\n-    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_long_oop_copy(StubGenStubId::oop_disjoint_arraycopy_uninit_id, &entry);\n-    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_long_oop_copy(StubGenStubId::oop_arraycopy_uninit_id, entry, nullptr);\n+    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_id, &entry);\n+    StubRoutines::_oop_arraycopy           = generate_conjoint_long_oop_copy(StubId::stubgen_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n+    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_long_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id, &entry);\n+    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_long_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id, entry, nullptr);\n@@ -110,2 +110,2 @@\n-  StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n-  StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubGenStubId::checkcast_arraycopy_uninit_id, nullptr);\n+  StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n+  StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_uninit_id, nullptr);\n@@ -124,6 +124,6 @@\n-  StubRoutines::_jbyte_fill = generate_fill(StubGenStubId::jbyte_fill_id);\n-  StubRoutines::_jshort_fill = generate_fill(StubGenStubId::jshort_fill_id);\n-  StubRoutines::_jint_fill = generate_fill(StubGenStubId::jint_fill_id);\n-  StubRoutines::_arrayof_jbyte_fill = generate_fill(StubGenStubId::arrayof_jbyte_fill_id);\n-  StubRoutines::_arrayof_jshort_fill = generate_fill(StubGenStubId::arrayof_jshort_fill_id);\n-  StubRoutines::_arrayof_jint_fill = generate_fill(StubGenStubId::arrayof_jint_fill_id);\n+  StubRoutines::_jbyte_fill = generate_fill(StubId::stubgen_jbyte_fill_id);\n+  StubRoutines::_jshort_fill = generate_fill(StubId::stubgen_jshort_fill_id);\n+  StubRoutines::_jint_fill = generate_fill(StubId::stubgen_jint_fill_id);\n+  StubRoutines::_arrayof_jbyte_fill = generate_fill(StubId::stubgen_arrayof_jbyte_fill_id);\n+  StubRoutines::_arrayof_jshort_fill = generate_fill(StubId::stubgen_arrayof_jshort_fill_id);\n+  StubRoutines::_arrayof_jint_fill = generate_fill(StubId::stubgen_arrayof_jint_fill_id);\n@@ -487,1 +487,1 @@\n-address StubGenerator::generate_disjoint_copy_avx3_masked(StubGenStubId stub_id, address* entry) {\n+address StubGenerator::generate_disjoint_copy_avx3_masked(StubId stub_id, address* entry) {\n@@ -495,1 +495,1 @@\n-  case jbyte_disjoint_arraycopy_id:\n+  case StubId::stubgen_jbyte_disjoint_arraycopy_id:\n@@ -500,1 +500,1 @@\n-  case jshort_disjoint_arraycopy_id:\n+  case StubId::stubgen_jshort_disjoint_arraycopy_id:\n@@ -505,1 +505,1 @@\n-  case jint_disjoint_arraycopy_id:\n+  case StubId::stubgen_jint_disjoint_arraycopy_id:\n@@ -510,1 +510,1 @@\n-  case jlong_disjoint_arraycopy_id:\n+  case StubId::stubgen_jlong_disjoint_arraycopy_id:\n@@ -515,1 +515,1 @@\n-  case oop_disjoint_arraycopy_id:\n+  case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -520,1 +520,1 @@\n-  case oop_disjoint_arraycopy_uninit_id:\n+  case StubId::stubgen_oop_disjoint_arraycopy_uninit_id:\n@@ -825,1 +825,1 @@\n-address StubGenerator::generate_conjoint_copy_avx3_masked(StubGenStubId stub_id, address* entry, address nooverlap_target) {\n+address StubGenerator::generate_conjoint_copy_avx3_masked(StubId stub_id, address* entry, address nooverlap_target) {\n@@ -833,1 +833,1 @@\n-  case jbyte_arraycopy_id:\n+  case StubId::stubgen_jbyte_arraycopy_id:\n@@ -838,1 +838,1 @@\n-  case jshort_arraycopy_id:\n+  case StubId::stubgen_jshort_arraycopy_id:\n@@ -843,1 +843,1 @@\n-  case jint_arraycopy_id:\n+  case StubId::stubgen_jint_arraycopy_id:\n@@ -848,1 +848,1 @@\n-  case jlong_arraycopy_id:\n+  case StubId::stubgen_jlong_arraycopy_id:\n@@ -853,1 +853,1 @@\n-  case oop_arraycopy_id:\n+  case StubId::stubgen_oop_arraycopy_id:\n@@ -858,1 +858,1 @@\n-  case oop_arraycopy_uninit_id:\n+  case StubId::stubgen_oop_arraycopy_uninit_id:\n@@ -1337,1 +1337,1 @@\n-  StubGenStubId stub_id = StubGenStubId::jbyte_disjoint_arraycopy_id;\n+  StubId stub_id = StubId::stubgen_jbyte_disjoint_arraycopy_id;\n@@ -1455,1 +1455,1 @@\n-  StubGenStubId stub_id = StubGenStubId::jbyte_arraycopy_id;\n+  StubId stub_id = StubId::stubgen_jbyte_arraycopy_id;\n@@ -1568,1 +1568,1 @@\n-  StubGenStubId stub_id = StubGenStubId::jshort_disjoint_arraycopy_id;\n+  StubId stub_id = StubId::stubgen_jshort_disjoint_arraycopy_id;\n@@ -1665,1 +1665,1 @@\n-address StubGenerator::generate_fill(StubGenStubId stub_id) {\n+address StubGenerator::generate_fill(StubId stub_id) {\n@@ -1670,1 +1670,1 @@\n-  case jbyte_fill_id:\n+  case StubId::stubgen_jbyte_fill_id:\n@@ -1674,1 +1674,1 @@\n-  case jshort_fill_id:\n+  case StubId::stubgen_jshort_fill_id:\n@@ -1678,1 +1678,1 @@\n-  case jint_fill_id:\n+  case StubId::stubgen_jint_fill_id:\n@@ -1682,1 +1682,1 @@\n-  case arrayof_jbyte_fill_id:\n+  case StubId::stubgen_arrayof_jbyte_fill_id:\n@@ -1686,1 +1686,1 @@\n-  case arrayof_jshort_fill_id:\n+  case StubId::stubgen_arrayof_jshort_fill_id:\n@@ -1690,1 +1690,1 @@\n-  case arrayof_jint_fill_id:\n+  case StubId::stubgen_arrayof_jint_fill_id:\n@@ -1740,1 +1740,1 @@\n-  StubGenStubId stub_id = StubGenStubId::jshort_arraycopy_id;\n+  StubId stub_id = StubId::stubgen_jshort_arraycopy_id;\n@@ -1846,1 +1846,1 @@\n-address StubGenerator::generate_disjoint_int_oop_copy(StubGenStubId stub_id, address* entry) {\n+address StubGenerator::generate_disjoint_int_oop_copy(StubId stub_id, address* entry) {\n@@ -1852,1 +1852,1 @@\n-  case StubGenStubId::jint_disjoint_arraycopy_id:\n+  case StubId::stubgen_jint_disjoint_arraycopy_id:\n@@ -1856,1 +1856,1 @@\n-  case StubGenStubId::oop_disjoint_arraycopy_id:\n+  case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -1861,1 +1861,1 @@\n-  case StubGenStubId::oop_disjoint_arraycopy_uninit_id:\n+  case StubId::stubgen_oop_disjoint_arraycopy_uninit_id:\n@@ -1977,1 +1977,1 @@\n-address StubGenerator::generate_conjoint_int_oop_copy(StubGenStubId stub_id, address nooverlap_target, address *entry) {\n+address StubGenerator::generate_conjoint_int_oop_copy(StubId stub_id, address nooverlap_target, address *entry) {\n@@ -1983,1 +1983,1 @@\n-  case StubGenStubId::jint_arraycopy_id:\n+  case StubId::stubgen_jint_arraycopy_id:\n@@ -1987,1 +1987,1 @@\n-  case StubGenStubId::oop_arraycopy_id:\n+  case StubId::stubgen_oop_arraycopy_id:\n@@ -1992,1 +1992,1 @@\n-  case StubGenStubId::oop_arraycopy_uninit_id:\n+  case StubId::stubgen_oop_arraycopy_uninit_id:\n@@ -2110,1 +2110,1 @@\n-address StubGenerator::generate_disjoint_long_oop_copy(StubGenStubId stub_id, address *entry) {\n+address StubGenerator::generate_disjoint_long_oop_copy(StubId stub_id, address *entry) {\n@@ -2116,1 +2116,1 @@\n-  case StubGenStubId::jlong_disjoint_arraycopy_id:\n+  case StubId::stubgen_jlong_disjoint_arraycopy_id:\n@@ -2120,1 +2120,1 @@\n-  case StubGenStubId::oop_disjoint_arraycopy_id:\n+  case StubId::stubgen_oop_disjoint_arraycopy_id:\n@@ -2125,1 +2125,1 @@\n-  case StubGenStubId::oop_disjoint_arraycopy_uninit_id:\n+  case StubId::stubgen_oop_disjoint_arraycopy_uninit_id:\n@@ -2243,1 +2243,1 @@\n-address StubGenerator::generate_conjoint_long_oop_copy(StubGenStubId stub_id, address nooverlap_target, address *entry) {\n+address StubGenerator::generate_conjoint_long_oop_copy(StubId stub_id, address nooverlap_target, address *entry) {\n@@ -2249,1 +2249,1 @@\n-  case StubGenStubId::jlong_arraycopy_id:\n+  case StubId::stubgen_jlong_arraycopy_id:\n@@ -2253,1 +2253,1 @@\n-  case StubGenStubId::oop_arraycopy_id:\n+  case StubId::stubgen_oop_arraycopy_id:\n@@ -2258,1 +2258,1 @@\n-  case StubGenStubId::oop_arraycopy_uninit_id:\n+  case StubId::stubgen_oop_arraycopy_uninit_id:\n@@ -2394,1 +2394,1 @@\n-address StubGenerator::generate_checkcast_copy(StubGenStubId stub_id, address *entry) {\n+address StubGenerator::generate_checkcast_copy(StubId stub_id, address *entry) {\n@@ -2398,1 +2398,1 @@\n-  case StubGenStubId::checkcast_arraycopy_id:\n+  case StubId::stubgen_checkcast_arraycopy_id:\n@@ -2401,1 +2401,1 @@\n-  case StubGenStubId::checkcast_arraycopy_uninit_id:\n+  case StubId::stubgen_checkcast_arraycopy_uninit_id:\n@@ -2626,1 +2626,1 @@\n-  StubGenStubId stub_id = StubGenStubId::unsafe_arraycopy_id;\n+  StubId stub_id = StubId::stubgen_unsafe_arraycopy_id;\n@@ -2762,1 +2762,1 @@\n-  StubGenStubId stub_id = StubGenStubId::unsafe_setmemory_id;\n+  StubId stub_id = StubId::stubgen_unsafe_setmemory_id;\n@@ -2932,1 +2932,1 @@\n-  StubGenStubId stub_id = StubGenStubId::generic_arraycopy_id;\n+  StubId stub_id = StubId::stubgen_generic_arraycopy_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dcbrt_id;\n+  StubId stub_id = StubId::stubgen_dcbrt_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_cbrt.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-  StubGenStubId stub_id = StubGenStubId::chacha20Block_id;\n+  StubId stub_id = StubId::stubgen_chacha20Block_id;\n@@ -304,1 +304,1 @@\n-  StubGenStubId stub_id = StubGenStubId::chacha20Block_id;\n+  StubId stub_id = StubId::stubgen_chacha20Block_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_chacha.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2016, 2024, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2016, 2025, Intel Corporation. All rights reserved.\n@@ -176,1 +176,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dcos_id;\n+  StubId stub_id = StubId::stubgen_dcos_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_cos.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-  StubGenStubId stub_id = dilithiumAlmostNtt_id;\n+  StubId stub_id = StubId::stubgen_dilithiumAlmostNtt_id;\n@@ -467,1 +467,1 @@\n-  StubGenStubId stub_id = dilithiumAlmostInverseNtt_id;\n+  StubId stub_id = StubId::stubgen_dilithiumAlmostInverseNtt_id;\n@@ -648,1 +648,1 @@\n-  StubGenStubId stub_id = dilithiumNttMult_id;\n+  StubId stub_id = StubId::stubgen_dilithiumNttMult_id;\n@@ -712,1 +712,1 @@\n-  StubGenStubId stub_id = dilithiumMontMulByConstant_id;\n+  StubId stub_id = StubId::stubgen_dilithiumMontMulByConstant_id;\n@@ -776,1 +776,1 @@\n-  StubGenStubId stub_id = dilithiumDecomposePoly_id;\n+  StubId stub_id = StubId::stubgen_dilithiumDecomposePoly_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_dilithium.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2016, 2025, Intel Corporation. All rights reserved.\n@@ -168,1 +168,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dexp_id;\n+  StubId stub_id = StubId::stubgen_dexp_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_exp.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2023, 2025, Intel Corporation. All rights reserved.\n@@ -76,1 +76,1 @@\n-  StubGenStubId stub_id = StubGenStubId::fmod_id;\n+  StubId stub_id = StubId::stubgen_fmod_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_fmod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2019, 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2019, 2025, Intel Corporation. All rights reserved.\n@@ -85,1 +85,1 @@\n-  StubGenStubId stub_id = StubGenStubId::ghash_processBlocks_id;\n+  StubId stub_id = StubId::stubgen_ghash_processBlocks_id;\n@@ -222,1 +222,1 @@\n-  StubGenStubId stub_id = StubGenStubId::ghash_processBlocks_id;\n+  StubId stub_id = StubId::stubgen_ghash_processBlocks_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_ghash.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-  StubGenStubId stub_id = kyberNtt_id;\n+  StubId stub_id = StubId::stubgen_kyberNtt_id;\n@@ -468,1 +468,1 @@\n-  StubGenStubId stub_id = kyberInverseNtt_id;\n+  StubId stub_id = StubId::stubgen_kyberInverseNtt_id;\n@@ -593,1 +593,1 @@\n-  StubGenStubId stub_id = kyberNttMult_id;\n+  StubId stub_id = StubId::stubgen_kyberNttMult_id;\n@@ -713,1 +713,1 @@\n-  StubGenStubId stub_id = kyberAddPoly_2_id;\n+  StubId stub_id = StubId::stubgen_kyberAddPoly_2_id;\n@@ -759,1 +759,1 @@\n-  StubGenStubId stub_id = kyberAddPoly_3_id;\n+  StubId stub_id = StubId::stubgen_kyberAddPoly_3_id;\n@@ -813,1 +813,1 @@\n-  StubGenStubId stub_id = kyber12To16_id;\n+  StubId stub_id = StubId::stubgen_kyber12To16_id;\n@@ -910,1 +910,1 @@\n-  StubGenStubId stub_id = kyberBarrettReduce_id;\n+  StubId stub_id = StubId::stubgen_kyberBarrettReduce_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_kyber.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2016, 2025, Intel Corporation. All rights reserved.\n@@ -179,1 +179,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dlog_id;\n+  StubId stub_id = StubId::stubgen_dlog_id;\n@@ -518,1 +518,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dlog10_id;\n+  StubId stub_id = StubId::stubgen_dlog10_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_log.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2022, 2025, Intel Corporation. All rights reserved.\n@@ -913,1 +913,1 @@\n-  StubGenStubId stub_id = StubGenStubId::poly1305_processBlocks_id;\n+  StubId stub_id = StubId::stubgen_poly1305_processBlocks_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_poly1305.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -562,1 +562,1 @@\n-  StubGenStubId stub_id = StubGenStubId::intpoly_montgomeryMult_P256_id;\n+  StubId stub_id = StubId::stubgen_intpoly_montgomeryMult_P256_id;\n@@ -684,1 +684,1 @@\n-  StubGenStubId stub_id = StubGenStubId::intpoly_assign_id;\n+  StubId stub_id = StubId::stubgen_intpoly_assign_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_poly_mont.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2016, 2025, Intel Corporation. All rights reserved.\n@@ -762,1 +762,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dpow_id;\n+  StubId stub_id = StubId::stubgen_dpow_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_pow.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-static address generate_sha3_implCompress(StubGenStubId stub_id,\n+static address generate_sha3_implCompress(StubId stub_id,\n@@ -98,1 +98,1 @@\n-  case sha3_implCompress_id:\n+  case StubId::stubgen_sha3_implCompress_id:\n@@ -101,1 +101,1 @@\n-  case sha3_implCompressMB_id:\n+  case StubId::stubgen_sha3_implCompressMB_id:\n@@ -330,1 +330,1 @@\n-  StubGenStubId stub_id = double_keccak_id;\n+  StubId stub_id = StubId::stubgen_double_keccak_id;\n@@ -504,1 +504,1 @@\n-      generate_sha3_implCompress(StubGenStubId::sha3_implCompress_id, this, _masm);\n+      generate_sha3_implCompress(StubId::stubgen_sha3_implCompress_id, this, _masm);\n@@ -508,1 +508,1 @@\n-      generate_sha3_implCompress(StubGenStubId::sha3_implCompressMB_id, this, _masm);\n+      generate_sha3_implCompress(StubId::stubgen_sha3_implCompressMB_id, this, _masm);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_sha3.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2016, 2025, Intel Corporation. All rights reserved.\n@@ -183,1 +183,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dsin_id;\n+  StubId stub_id = StubId::stubgen_dsin_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_sin.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2016, 2025, Intel Corporation. All rights reserved.\n@@ -458,1 +458,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dtan_id;\n+  StubId stub_id = StubId::stubgen_dtan_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tan.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-  StubGenStubId stub_id = StubGenStubId::dtanh_id;\n+  StubId stub_id = StubId::stubgen_dtanh_id;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tanh.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(StubId id, address call_ptr) {\n@@ -115,1 +115,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(StubId id, address destination) {\n@@ -119,1 +119,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(StubId id, address runtime_entry) {\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-  StubGenerator(CodeBuffer* code, StubGenBlobId blob_id) : StubCodeGenerator(code, blob_id) {\n+  StubGenerator(CodeBuffer* code, BlobId blob_id) : StubCodeGenerator(code, blob_id) {\n@@ -220,1 +220,1 @@\n-    case preuniverse_id:\n+    case BlobId::stubgen_preuniverse_id:\n@@ -223,1 +223,1 @@\n-    case initial_id:\n+    case BlobId::stubgen_initial_id:\n@@ -226,1 +226,1 @@\n-     case continuation_id:\n+     case BlobId::stubgen_continuation_id:\n@@ -229,1 +229,1 @@\n-    case compiler_id:\n+    case BlobId::stubgen_compiler_id:\n@@ -232,1 +232,1 @@\n-    case final_id:\n+    case BlobId::stubgen_final_id:\n@@ -236,1 +236,1 @@\n-      fatal(\"unexpected blob id: %d\", blob_id);\n+      fatal(\"unexpected blob id: %s\", StubInfo::name(blob_id));\n@@ -242,1 +242,1 @@\n-void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id) {\n+void StubGenerator_generate(CodeBuffer* code, BlobId blob_id) {\n","filename":"src\/hotspot\/cpu\/zero\/stubGenerator_zero.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,1 +267,1 @@\n-  C1StubId         _stub_id;\n+  StubId           _stub_id;\n@@ -270,1 +270,1 @@\n-  NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id);\n+  NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, StubId stub_id);\n@@ -518,1 +518,1 @@\n-  C1StubId         _stub;\n+  StubId           _stub;\n@@ -522,1 +522,1 @@\n-  SimpleExceptionStub(C1StubId stub, LIR_Opr obj, CodeEmitInfo* info):\n+  SimpleExceptionStub(StubId stub, LIR_Opr obj, CodeEmitInfo* info):\n@@ -549,1 +549,1 @@\n-  ArrayStoreExceptionStub(LIR_Opr obj, CodeEmitInfo* info): SimpleExceptionStub(C1StubId::throw_array_store_exception_id, obj, info) {}\n+  ArrayStoreExceptionStub(LIR_Opr obj, CodeEmitInfo* info): SimpleExceptionStub(StubId::c1_throw_array_store_exception_id, obj, info) {}\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -661,1 +661,1 @@\n-    C1StubId stub_id = klass->is_initialized() ? C1StubId::fast_new_instance_id : C1StubId::fast_new_instance_init_check_id;\n+    StubId stub_id = klass->is_initialized() ? StubId::c1_fast_new_instance_id : StubId::c1_fast_new_instance_init_check_id;\n@@ -672,1 +672,1 @@\n-    CodeStub* slow_path = new NewInstanceStub(klass_reg, dst, klass, info, C1StubId::new_instance_id);\n+    CodeStub* slow_path = new NewInstanceStub(klass_reg, dst, klass, info, StubId::c1_new_instance_id);\n@@ -1399,1 +1399,1 @@\n-               CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::register_finalizer_id)),\n+               CAST_FROM_FN_PTR(address, Runtime1::entry_for(StubId::c1_register_finalizer_id)),\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"runtime\/stubInfo.hpp\"\n@@ -106,8 +107,1 @@\n-\n-CodeBlob* Runtime1::_blobs[(int)C1StubId::NUM_STUBIDS];\n-\n-#define C1_BLOB_NAME_DEFINE(name)  \"C1 Runtime \" # name \"_blob\",\n-const char *Runtime1::_blob_names[] = {\n-  C1_STUBS_DO(C1_BLOB_NAME_DEFINE)\n-};\n-#undef C1_STUB_NAME_DEFINE\n+CodeBlob* Runtime1::_blobs[StubInfo::C1_STUB_COUNT];\n@@ -191,1 +185,1 @@\n-class C1StubIdStubAssemblerCodeGenClosure: public StubAssemblerCodeGenClosure {\n+class C1StubAssemblerCodeGenClosure: public StubAssemblerCodeGenClosure {\n@@ -193,1 +187,1 @@\n-  C1StubId _id;\n+  StubId _id;\n@@ -195,1 +189,3 @@\n-  C1StubIdStubAssemblerCodeGenClosure(C1StubId id) : _id(id) {}\n+  C1StubAssemblerCodeGenClosure(StubId id) : _id(id) {\n+    assert(StubInfo::is_c1(_id), \"not a c1 stub id %s\", StubInfo::name(_id));\n+  }\n@@ -201,3 +197,3 @@\n-CodeBlob* Runtime1::generate_blob(BufferBlob* buffer_blob, C1StubId id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure* cl) {\n-  if ((int)id >= 0) {\n-    CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C1Blob, (uint)id, name, 0, nullptr);\n+CodeBlob* Runtime1::generate_blob(BufferBlob* buffer_blob, StubId id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure* cl) {\n+  if (id != StubId::NO_STUBID) {\n+    CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C1Blob, StubInfo::blob(id));\n@@ -243,1 +239,1 @@\n-    AOTCodeCache::store_code_blob(*blob, AOTCodeEntry::C1Blob, (uint)id, name, 0, nullptr);\n+    AOTCodeCache::store_code_blob(*blob, AOTCodeEntry::C1Blob, StubInfo::blob(id));\n@@ -248,2 +244,2 @@\n-bool Runtime1::generate_blob_for(BufferBlob* buffer_blob, C1StubId id) {\n-  assert(C1StubId::NO_STUBID < id && id < C1StubId::NUM_STUBIDS, \"illegal stub id\");\n+bool Runtime1::generate_blob_for(BufferBlob* buffer_blob, StubId id) {\n+  assert(StubInfo::is_c1(id), \"not a c1 stub %s\", StubInfo::name(id));\n@@ -255,6 +251,6 @@\n-  case C1StubId::dtrace_object_alloc_id:\n-  case C1StubId::slow_subtype_check_id:\n-  case C1StubId::fpu2long_stub_id:\n-  case C1StubId::unwind_exception_id:\n-  case C1StubId::counter_overflow_id:\n-  case C1StubId::is_instance_of_id:\n+  case StubId::c1_dtrace_object_alloc_id:\n+  case StubId::c1_slow_subtype_check_id:\n+  case StubId::c1_fpu2long_stub_id:\n+  case StubId::c1_unwind_exception_id:\n+  case StubId::c1_counter_overflow_id:\n+  case StubId::c1_is_instance_of_id:\n@@ -267,1 +263,1 @@\n-  C1StubIdStubAssemblerCodeGenClosure cl(id);\n+  C1StubAssemblerCodeGenClosure cl(id);\n@@ -270,1 +266,2 @@\n-  _blobs[(int)id] = blob;\n+  int idx = StubInfo::c1_offset(id);   \/\/ will assert on non-c1 id\n+  _blobs[idx] = blob;\n@@ -277,4 +274,5 @@\n-  \/\/ generate stubs\n-  int limit = (int)C1StubId::NUM_STUBIDS;\n-  for (int id = 0; id <= (int)C1StubId::forward_exception_id; id++) {\n-    if (!generate_blob_for(blob, (C1StubId) id)) {\n+  \/\/ iterate blobs in C1 group and generate a single stub per blob\n+  StubId id = StubInfo::stub_base(StubGroup::C1);\n+  StubId limit = StubInfo::next(StubInfo::stub_max(StubGroup::C1));\n+  for (; id != limit; id = StubInfo::next(id)) {\n+    if (!generate_blob_for(blob, id)) {\n@@ -283,5 +281,3 @@\n-  }\n-  AOTCodeCache::init_early_c1_table();\n-  for (int id = (int)C1StubId::forward_exception_id+1; id < limit; id++) {\n-    if (!generate_blob_for(blob, (C1StubId) id)) {\n-      return false;\n+    if (id == StubId::c1_forward_exception_id) {\n+      \/\/ publish early c1 stubs at this point so later stubs can refer to them\n+      AOTCodeCache::init_early_c1_table();\n@@ -294,4 +290,6 @@\n-    for (int id = 0; id < limit; id++) {\n-      _blobs[id]->print();\n-      if (_blobs[id]->oop_maps() != nullptr) {\n-        _blobs[id]->oop_maps()->print();\n+    id = StubInfo::stub_base(StubGroup::C1);\n+    for (; id != limit; id = StubInfo::next(id)) {\n+      CodeBlob* blob = blob_for(id);\n+      blob->print();\n+      if (blob->oop_maps() != nullptr) {\n+        blob->oop_maps()->print();\n@@ -306,3 +304,3 @@\n-CodeBlob* Runtime1::blob_for(C1StubId id) {\n-  assert(C1StubId::NO_STUBID < id && id < C1StubId::NUM_STUBIDS, \"illegal stub id\");\n-  return _blobs[(int)id];\n+CodeBlob* Runtime1::blob_for(StubId id) {\n+  int idx = StubInfo::c1_offset(id);   \/\/ will assert on non-c1 id\n+  return _blobs[idx];\n@@ -312,3 +310,2 @@\n-const char* Runtime1::name_for(C1StubId id) {\n-  assert(C1StubId::NO_STUBID < id && id < C1StubId::NUM_STUBIDS, \"illegal stub id\");\n-  return _blob_names[(int)id];\n+const char* Runtime1::name_for(StubId id) {\n+  return StubInfo::name(id);\n@@ -318,4 +315,5 @@\n-  int limit = (int)C1StubId::NUM_STUBIDS;\n-  for (int i = 0; i < limit; i++) {\n-    C1StubId id = (C1StubId)i;\n-    if (entry == entry_for(id)) return name_for(id);\n+  \/\/ iterate stubs starting from C1 group base\n+  StubId id = StubInfo::stub_base(StubGroup::C1);\n+  StubId limit = StubInfo::next(StubInfo::stub_max(StubGroup::C1));\n+  for (; id != limit; id = StubInfo::next(id)) {\n+    if (entry == entry_for(id)) return StubInfo::name(id);\n@@ -453,1 +451,1 @@\n-JRT_ENTRY(void, Runtime1::unimplemented_entry(JavaThread* current, C1StubId id))\n+JRT_ENTRY(void, Runtime1::unimplemented_entry(JavaThread* current, StubId id))\n@@ -553,2 +551,2 @@\n-  if (current->last_frame().cb() == Runtime1::blob_for(C1StubId::handle_exception_from_callee_id)) {\n-    \/\/ The C1StubId::handle_exception_from_callee_id handler is invoked after the\n+  if (current->last_frame().cb() == Runtime1::blob_for(StubId::c1_handle_exception_from_callee_id)) {\n+    \/\/ The StubId::c1_handle_exception_from_callee_id handler is invoked after the\n@@ -950,1 +948,1 @@\n-JRT_ENTRY(void, Runtime1::patch_code(JavaThread* current, C1StubId stub_id ))\n+JRT_ENTRY(void, Runtime1::patch_code(JavaThread* current, StubId stub_id ))\n@@ -987,1 +985,1 @@\n-    (stub_id == C1StubId::load_klass_patching_id || stub_id == C1StubId::load_mirror_patching_id);\n+    (stub_id == StubId::c1_load_klass_patching_id || stub_id == StubId::c1_load_mirror_patching_id);\n@@ -989,1 +987,1 @@\n-  if (stub_id == C1StubId::access_field_patching_id) {\n+  if (stub_id == StubId::c1_access_field_patching_id) {\n@@ -1072,1 +1070,1 @@\n-  } else if (stub_id == C1StubId::load_appendix_patching_id) {\n+  } else if (stub_id == StubId::c1_load_appendix_patching_id) {\n@@ -1156,1 +1154,1 @@\n-                        p2i(instr_pc), (stub_id == C1StubId::access_field_patching_id) ? \"field\" : \"klass\");\n+                        p2i(instr_pc), (stub_id == StubId::c1_access_field_patching_id) ? \"field\" : \"klass\");\n@@ -1172,1 +1170,1 @@\n-        if (stub_id == C1StubId::access_field_patching_id) {\n+        if (stub_id == StubId::c1_access_field_patching_id) {\n@@ -1198,1 +1196,1 @@\n-            if (stub_id == C1StubId::load_klass_patching_id) {\n+            if (stub_id == StubId::c1_load_klass_patching_id) {\n@@ -1210,1 +1208,1 @@\n-        } else if (stub_id == C1StubId::load_appendix_patching_id) {\n+        } else if (stub_id == StubId::c1_load_appendix_patching_id) {\n@@ -1229,1 +1227,1 @@\n-              stub_id == C1StubId::load_appendix_patching_id) &&\n+              stub_id == StubId::c1_load_appendix_patching_id) &&\n@@ -1237,2 +1235,2 @@\n-                assert(stub_id == C1StubId::load_mirror_patching_id ||\n-                       stub_id == C1StubId::load_appendix_patching_id, \"wrong stub id\");\n+                assert(stub_id == StubId::c1_load_mirror_patching_id ||\n+                       stub_id == StubId::c1_load_appendix_patching_id, \"wrong stub id\");\n@@ -1243,1 +1241,1 @@\n-                assert(stub_id == C1StubId::load_klass_patching_id, \"wrong stub id\");\n+                assert(stub_id == StubId::c1_load_klass_patching_id, \"wrong stub id\");\n@@ -1266,1 +1264,1 @@\n-              stub_id == C1StubId::load_appendix_patching_id) {\n+              stub_id == StubId::c1_load_appendix_patching_id) {\n@@ -1268,1 +1266,1 @@\n-              (stub_id == C1StubId::load_klass_patching_id) ?\n+              (stub_id == StubId::c1_load_klass_patching_id) ?\n@@ -1302,3 +1300,3 @@\n-static bool is_patching_needed(JavaThread* current, C1StubId stub_id) {\n-  if (stub_id == C1StubId::load_klass_patching_id ||\n-      stub_id == C1StubId::load_mirror_patching_id) {\n+static bool is_patching_needed(JavaThread* current, StubId stub_id) {\n+  if (stub_id == StubId::c1_load_klass_patching_id ||\n+      stub_id == StubId::c1_load_mirror_patching_id) {\n@@ -1333,1 +1331,1 @@\n-void Runtime1::patch_code(JavaThread* current, C1StubId stub_id) {\n+void Runtime1::patch_code(JavaThread* current, StubId stub_id) {\n@@ -1388,1 +1386,1 @@\n-    patch_code(current, C1StubId::load_klass_patching_id);\n+    patch_code(current, StubId::c1_load_klass_patching_id);\n@@ -1405,1 +1403,1 @@\n-    patch_code(current, C1StubId::load_mirror_patching_id);\n+    patch_code(current, StubId::c1_load_mirror_patching_id);\n@@ -1422,1 +1420,1 @@\n-    patch_code(current, C1StubId::load_appendix_patching_id);\n+    patch_code(current, StubId::c1_load_appendix_patching_id);\n@@ -1449,1 +1447,1 @@\n-    patch_code(current, C1StubId::access_field_patching_id);\n+    patch_code(current, StubId::c1_access_field_patching_id);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":71,"deletions":73,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/stubInfo.hpp\"\n@@ -45,10 +46,0 @@\n-\/\/ define C1StubId enum tags: unwind_exception_id etc\n-\n-#define C1_STUB_ID_ENUM_DECLARE(name) STUB_ID_NAME(name),\n-enum class C1StubId :int {\n-  NO_STUBID = -1,\n-  C1_STUBS_DO(C1_STUB_ID_ENUM_DECLARE)\n-  NUM_STUBIDS\n-};\n-#undef C1_STUB_ID_ENUM_DECLARE\n-\n@@ -83,2 +74,1 @@\n-  static CodeBlob* _blobs[(int)C1StubId::NUM_STUBIDS];\n-  static const char* _blob_names[];\n+  static CodeBlob* _blobs[(int)StubInfo::C1_STUB_COUNT];\n@@ -88,3 +78,3 @@\n-  static CodeBlob*  generate_blob(BufferBlob* buffer_blob, C1StubId id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure *cl);\n-  static bool       generate_blob_for(BufferBlob* blob, C1StubId id);\n-  static OopMapSet* generate_code_for(C1StubId id, StubAssembler* sasm);\n+  static CodeBlob*  generate_blob(BufferBlob* buffer_blob, StubId id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure *cl);\n+  static bool       generate_blob_for(BufferBlob* blob, StubId id);\n+  static OopMapSet* generate_code_for(StubId id, StubAssembler* sasm);\n@@ -93,1 +83,1 @@\n-  static OopMapSet* generate_handle_exception(C1StubId id, StubAssembler* sasm);\n+  static OopMapSet* generate_handle_exception(StubId id, StubAssembler* sasm);\n@@ -108,1 +98,1 @@\n-  static void unimplemented_entry(JavaThread* current, C1StubId id);\n+  static void unimplemented_entry(JavaThread* current, StubId id);\n@@ -130,1 +120,1 @@\n-  static void patch_code(JavaThread* current, C1StubId stub_id);\n+  static void patch_code(JavaThread* current, StubId stub_id);\n@@ -141,3 +131,3 @@\n-  static CodeBlob* blob_for (C1StubId id);\n-  static address   entry_for(C1StubId id)          { return blob_for(id)->code_begin(); }\n-  static const char* name_for (C1StubId id);\n+  static CodeBlob* blob_for (StubId id);\n+  static address   entry_for(StubId id)          { return blob_for(id)->code_begin(); }\n+  static const char* name_for (StubId id);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"runtime\/stubInfo.hpp\"\n@@ -114,0 +115,1 @@\n+    assert(StubInfo::is_shared(static_cast<BlobId>(id)), \"not a shared blob id %d\", id);\n@@ -116,1 +118,2 @@\n-    return (int)SharedStubId::NUM_STUBIDS + id;\n+    assert(StubInfo::is_c1(static_cast<BlobId>(id)), \"not a c1 blob id %d\", id);\n+    return id;\n@@ -119,1 +122,2 @@\n-    return (int)SharedStubId::NUM_STUBIDS + COMPILER1_PRESENT((int)C1StubId::NUM_STUBIDS) + id;\n+    assert(StubInfo::is_c2(static_cast<BlobId>(id)), \"not a c2 blob id %d\", id);\n+    return id;\n@@ -853,0 +857,6 @@\n+bool AOTCodeCache::store_code_blob(CodeBlob& blob, AOTCodeEntry::Kind entry_kind, BlobId id, int entry_offset_count, int* entry_offsets) {\n+  assert(AOTCodeEntry::is_blob(entry_kind),\n+         \"wrong entry kind for blob id %s\", StubInfo::name(id));\n+  return store_code_blob(blob, entry_kind, (uint)id, StubInfo::name(id), entry_offset_count, entry_offsets);\n+}\n+\n@@ -880,0 +890,6 @@\n+CodeBlob* AOTCodeCache::load_code_blob(AOTCodeEntry::Kind entry_kind, BlobId id, int entry_offset_count, int* entry_offsets) {\n+  assert(AOTCodeEntry::is_blob(entry_kind),\n+         \"wrong entry kind for blob id %s\", StubInfo::name(id));\n+  return load_code_blob(entry_kind, (uint)id, StubInfo::name(id), entry_offset_count, entry_offsets);\n+}\n+\n@@ -1413,2 +1429,4 @@\n-  for (int i = 0; i <= (int)C1StubId::forward_exception_id; i++) {\n-    C1StubId id = (C1StubId)i;\n+  StubId id = StubInfo::stub_base(StubGroup::C1);\n+  \/\/ include forward_exception in range we publish\n+  StubId limit = StubInfo::next(StubId::c1_forward_exception_id);\n+  for (; id != limit; id = StubInfo::next(id)) {\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"runtime\/stubInfo.hpp\"\n+\n@@ -328,0 +330,1 @@\n+  \/\/ save and restore API for non-enumerable code blobs\n@@ -339,0 +342,12 @@\n+  \/\/ save and restore API for enumerable code blobs\n+  static bool store_code_blob(CodeBlob& blob,\n+                              AOTCodeEntry::Kind entry_kind,\n+                              BlobId id,\n+                              int entry_offset_count = 0,\n+                              int* entry_offsets = nullptr) NOT_CDS_RETURN_(false);\n+\n+  static CodeBlob* load_code_blob(AOTCodeEntry::Kind kind,\n+                                  BlobId id,\n+                                  int entry_offset_count = 0,\n+                                  int* entry_offsets = nullptr) NOT_CDS_RETURN_(nullptr);\n+\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -460,0 +460,1 @@\n+  static const int ENTRY_COUNT = 1;\n@@ -562,0 +563,1 @@\n+  static const int ENTRY_COUNT = 4 JVMTI_ONLY(+ 2);\n@@ -692,0 +694,1 @@\n+  static const int ENTRY_COUNT = 1;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID, \"g1_pre_barrier_slow\",\n+  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, StubId::NO_STUBID, \"g1_pre_barrier_slow\",\n@@ -223,1 +223,1 @@\n-  _post_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID, \"g1_post_barrier_slow\",\n+  _post_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, StubId::NO_STUBID, \"g1_post_barrier_slow\",\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n+  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, StubId::NO_STUBID,\n@@ -285,1 +285,1 @@\n-    _load_reference_barrier_strong_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n+    _load_reference_barrier_strong_rt_code_blob = Runtime1::generate_blob(buffer_blob, StubId::NO_STUBID,\n@@ -293,1 +293,1 @@\n-    _load_reference_barrier_strong_native_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n+    _load_reference_barrier_strong_native_rt_code_blob = Runtime1::generate_blob(buffer_blob, StubId::NO_STUBID,\n@@ -301,1 +301,1 @@\n-    _load_reference_barrier_weak_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n+    _load_reference_barrier_weak_rt_code_blob = Runtime1::generate_blob(buffer_blob, StubId::NO_STUBID,\n@@ -309,1 +309,1 @@\n-    _load_reference_barrier_phantom_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n+    _load_reference_barrier_phantom_rt_code_blob = Runtime1::generate_blob(buffer_blob, StubId::NO_STUBID,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -509,1 +509,1 @@\n-  CodeBlob* const code_blob = Runtime1::generate_blob(blob, C1StubId::NO_STUBID \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n+  CodeBlob* const code_blob = Runtime1::generate_blob(blob, StubId::NO_STUBID \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n@@ -529,1 +529,1 @@\n-  CodeBlob* const code_blob = Runtime1::generate_blob(blob, C1StubId::NO_STUBID \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n+  CodeBlob* const code_blob = Runtime1::generate_blob(blob, StubId::NO_STUBID \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -976,1 +976,3 @@\n-    CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, _stub_id, stub_name);\n+    StubId stub_id = static_cast<StubId>(_stub_id);\n+    BlobId blob_id = StubInfo::blob(stub_id);\n+    CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, blob_id);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3493,1 +3493,3 @@\n-        AOTCodeCache::store_code_blob(*rs, AOTCodeEntry::C2Blob, C->stub_id(), stub_name);\n+        StubId stub_id = static_cast<StubId>(C->stub_id());\n+        BlobId blob_id = StubInfo::blob(stub_id);\n+        AOTCodeCache::store_code_blob(*rs, AOTCodeEntry::C2Blob, blob_id);\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  type OptoRuntime:: BLOB_FIELD_NAME(name)  = nullptr;\n+  type* OptoRuntime:: BLOB_FIELD_NAME(name)  = nullptr;\n@@ -102,10 +102,0 @@\n-#define C2_BLOB_NAME_DEFINE(name, type)  \"C2 Runtime \" # name \"_blob\",\n-#define C2_STUB_NAME_DEFINE(name, f, t, r)  \"C2 Runtime \" # name,\n-#define C2_JVMTI_STUB_NAME_DEFINE(name)  \"C2 Runtime \" # name,\n-const char* OptoRuntime::_stub_names[] = {\n-  C2_STUBS_DO(C2_BLOB_NAME_DEFINE, C2_STUB_NAME_DEFINE, C2_JVMTI_STUB_NAME_DEFINE)\n-};\n-#undef C2_BLOB_NAME_DEFINE\n-#undef C2_STUB_NAME_DEFINE\n-#undef C2_JVMTI_STUB_NAME_DEFINE\n-\n@@ -142,2 +132,2 @@\n-#define C2_STUB_NAME(name) stub_name(OptoStubId::name ## _id)\n-#define C2_STUB_ID(name) OptoStubId::name ## _id\n+#define C2_STUB_ID(name) StubId:: JOIN3(c2, name, id)\n+#define C2_STUB_NAME(name) stub_name(C2_STUB_ID(name))\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/stubInfo.hpp\"\n@@ -100,14 +101,0 @@\n-\/\/ define OptoStubId enum tags: uncommon_trap_id etc\n-\n-#define C2_BLOB_ID_ENUM_DECLARE(name, type) STUB_ID_NAME(name),\n-#define C2_STUB_ID_ENUM_DECLARE(name, f, t, r) STUB_ID_NAME(name),\n-#define C2_JVMTI_STUB_ID_ENUM_DECLARE(name) STUB_ID_NAME(name),\n-enum class OptoStubId :int {\n-  NO_STUBID = -1,\n-  C2_STUBS_DO(C2_BLOB_ID_ENUM_DECLARE, C2_STUB_ID_ENUM_DECLARE, C2_JVMTI_STUB_ID_ENUM_DECLARE)\n-  NUM_STUBIDS\n-};\n-#undef C2_BLOB_ID_ENUM_DECLARE\n-#undef C2_STUB_ID_ENUM_DECLARE\n-#undef C2_JVMTI_STUB_ID_ENUM_DECLARE\n-\n@@ -121,1 +108,1 @@\n-  static type        BLOB_FIELD_NAME(name);\n+  static type*       BLOB_FIELD_NAME(name);\n@@ -216,3 +203,0 @@\n-  \/\/ Stub names indexed by sharedStubId\n-  static const char *_stub_names[];\n-\n@@ -286,3 +270,3 @@\n-  static const char* stub_name(OptoStubId id) {\n-    assert(id > OptoStubId::NO_STUBID && id < OptoStubId::NUM_STUBIDS, \"stub id out of range\");\n-    return _stub_names[(int)id];\n+  static const char* stub_name(StubId id) {\n+    assert(StubInfo::is_c2(id), \"not a C2 stub %s\", StubInfo::name(id));\n+    return StubInfo::name(id);\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+void initialize_stub_info();    \/\/ must precede all blob\/stub generation\n@@ -133,0 +134,2 @@\n+  \/\/ ensure we know about all blobs, stubs and entries\n+  initialize_stub_info();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  type        SharedRuntime::BLOB_FIELD_NAME(name);\n+  type*       SharedRuntime::BLOB_FIELD_NAME(name);\n@@ -104,0 +104,2 @@\n+#if 0\n+\/\/ TODO tweak global stub name generation to match this\n@@ -108,0 +110,1 @@\n+#endif\n@@ -113,1 +116,1 @@\n-    generate_throw_exception(SharedStubId::throw_StackOverflowError_id,\n+    generate_throw_exception(StubId::shared_throw_StackOverflowError_id,\n@@ -119,1 +122,1 @@\n-    generate_resolve_blob(SharedStubId::wrong_method_id,\n+    generate_resolve_blob(StubId::shared_wrong_method_id,\n@@ -122,1 +125,1 @@\n-    generate_resolve_blob(SharedStubId::wrong_method_abstract_id,\n+    generate_resolve_blob(StubId::shared_wrong_method_abstract_id,\n@@ -125,1 +128,1 @@\n-    generate_resolve_blob(SharedStubId::ic_miss_id,\n+    generate_resolve_blob(StubId::shared_ic_miss_id,\n@@ -128,1 +131,1 @@\n-    generate_resolve_blob(SharedStubId::resolve_opt_virtual_call_id,\n+    generate_resolve_blob(StubId::shared_resolve_opt_virtual_call_id,\n@@ -131,1 +134,1 @@\n-    generate_resolve_blob(SharedStubId::resolve_virtual_call_id,\n+    generate_resolve_blob(StubId::shared_resolve_virtual_call_id,\n@@ -134,1 +137,1 @@\n-    generate_resolve_blob(SharedStubId::resolve_static_call_id,\n+    generate_resolve_blob(StubId::shared_resolve_static_call_id,\n@@ -138,1 +141,1 @@\n-    generate_throw_exception(SharedStubId::throw_delayed_StackOverflowError_id,\n+    generate_throw_exception(StubId::shared_throw_delayed_StackOverflowError_id,\n@@ -142,1 +145,1 @@\n-    generate_throw_exception(SharedStubId::throw_AbstractMethodError_id,\n+    generate_throw_exception(StubId::shared_throw_AbstractMethodError_id,\n@@ -146,1 +149,1 @@\n-    generate_throw_exception(SharedStubId::throw_IncompatibleClassChangeError_id,\n+    generate_throw_exception(StubId::shared_throw_IncompatibleClassChangeError_id,\n@@ -150,1 +153,1 @@\n-    generate_throw_exception(SharedStubId::throw_NullPointerException_at_call_id,\n+    generate_throw_exception(StubId::shared_throw_NullPointerException_at_call_id,\n@@ -158,1 +161,1 @@\n-      generate_handler_blob(SharedStubId::polling_page_vectors_safepoint_handler_id,\n+      generate_handler_blob(StubId::shared_polling_page_vectors_safepoint_handler_id,\n@@ -163,1 +166,1 @@\n-    generate_handler_blob(SharedStubId::polling_page_safepoint_handler_id,\n+    generate_handler_blob(StubId::shared_polling_page_safepoint_handler_id,\n@@ -166,1 +169,1 @@\n-    generate_handler_blob(SharedStubId::polling_page_return_handler_id,\n+    generate_handler_blob(StubId::shared_polling_page_return_handler_id,\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"runtime\/stubDeclarations.hpp\"\n+#include \"runtime\/stubInfo.hpp\"\n@@ -48,10 +48,0 @@\n-\/\/ define SharedStubId enum tags: wrong_method_id, etc\n-\n-#define SHARED_STUB_ID_ENUM_DECLARE(name, type) STUB_ID_NAME(name),\n-enum class SharedStubId :int {\n-  NO_STUBID = -1,\n-  SHARED_STUBS_DO(SHARED_STUB_ID_ENUM_DECLARE)\n-  NUM_STUBIDS\n-};\n-#undef SHARED_STUB_ID_ENUM_DECLARE\n-\n@@ -62,1 +52,1 @@\n-  static type        BLOB_FIELD_NAME(name);\n+  static type*       BLOB_FIELD_NAME(name);\n@@ -67,7 +57,7 @@\n-  static bool is_resolve_id(SharedStubId id) {\n-    return (id == SharedStubId::wrong_method_id ||\n-            id == SharedStubId::wrong_method_abstract_id ||\n-            id == SharedStubId::ic_miss_id ||\n-            id == SharedStubId::resolve_opt_virtual_call_id ||\n-            id == SharedStubId::resolve_virtual_call_id ||\n-            id == SharedStubId::resolve_static_call_id);\n+  static bool is_resolve_id(StubId id) {\n+    return (id == StubId::shared_wrong_method_id ||\n+            id == StubId::shared_wrong_method_abstract_id ||\n+            id == StubId::shared_ic_miss_id ||\n+            id == StubId::shared_resolve_opt_virtual_call_id ||\n+            id == StubId::shared_resolve_virtual_call_id ||\n+            id == StubId::shared_resolve_static_call_id);\n@@ -75,4 +65,4 @@\n-  static bool is_polling_page_id(SharedStubId id) {\n-    return (id == SharedStubId::polling_page_vectors_safepoint_handler_id ||\n-            id == SharedStubId::polling_page_safepoint_handler_id ||\n-            id == SharedStubId::polling_page_return_handler_id);\n+  static bool is_polling_page_id(StubId id) {\n+    return (id == StubId::shared_polling_page_vectors_safepoint_handler_id ||\n+            id == StubId::shared_polling_page_safepoint_handler_id ||\n+            id == StubId::shared_polling_page_return_handler_id);\n@@ -80,6 +70,6 @@\n-  static bool is_throw_id(SharedStubId id) {\n-    return (id == SharedStubId::throw_AbstractMethodError_id ||\n-            id == SharedStubId::throw_IncompatibleClassChangeError_id ||\n-            id == SharedStubId::throw_NullPointerException_at_call_id ||\n-            id == SharedStubId::throw_StackOverflowError_id ||\n-            id == SharedStubId::throw_delayed_StackOverflowError_id);\n+  static bool is_throw_id(StubId id) {\n+    return (id == StubId::shared_throw_AbstractMethodError_id ||\n+            id == StubId::shared_throw_IncompatibleClassChangeError_id ||\n+            id == StubId::shared_throw_NullPointerException_at_call_id ||\n+            id == StubId::shared_throw_StackOverflowError_id ||\n+            id == StubId::shared_throw_delayed_StackOverflowError_id);\n@@ -95,3 +85,0 @@\n-  \/\/ Stub names indexed by SharedStubId\n-  static const char *_stub_names[];\n-\n@@ -104,3 +91,3 @@\n-  static SafepointBlob* generate_handler_blob(SharedStubId id, address call_ptr);\n-  static RuntimeStub*   generate_resolve_blob(SharedStubId id, address destination);\n-  static RuntimeStub*   generate_throw_exception(SharedStubId id, address runtime_entry);\n+  static SafepointBlob* generate_handler_blob(StubId id, address call_ptr);\n+  static RuntimeStub*   generate_resolve_blob(StubId id, address destination);\n+  static RuntimeStub*   generate_throw_exception(StubId id, address runtime_entry);\n@@ -121,3 +108,3 @@\n-  static const char *stub_name(SharedStubId id) {\n-    assert(id > SharedStubId::NO_STUBID && id < SharedStubId::NUM_STUBIDS, \"stub id out of range\");\n-    return _stub_names[(int)id];\n+  static const char *stub_name(StubId id) {\n+    assert(StubInfo::is_shared(id), \"not a shared stub %s\", StubInfo::name(id));\n+    return StubInfo::name(id);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":25,"deletions":38,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  _blob_id = StubGenBlobId::NO_BLOBID;\n+  _blob_id = BlobId::NO_BLOBID;\n@@ -76,1 +76,3 @@\n-StubCodeGenerator::StubCodeGenerator(CodeBuffer* code, StubGenBlobId blob_id, bool print_code) {\n+StubCodeGenerator::StubCodeGenerator(CodeBuffer* code, BlobId blob_id, bool print_code) {\n+  assert(StubInfo::is_stubgen(blob_id),\n+         \"not a stubgen blob %s\", StubInfo::name(blob_id));\n@@ -122,1 +124,1 @@\n-void StubCodeGenerator::verify_stub(StubGenStubId stub_id) {\n+void StubCodeGenerator::verify_stub(StubId stub_id) {\n@@ -137,1 +139,1 @@\n-StubCodeMark::StubCodeMark(StubCodeGenerator* cgen, StubGenStubId stub_id) : StubCodeMark(cgen, \"StubRoutines\", StubRoutines::get_stub_name(stub_id)) {\n+StubCodeMark::StubCodeMark(StubCodeGenerator* cgen, StubId stub_id) : StubCodeMark(cgen, \"StubRoutines\", StubRoutines::get_stub_name(stub_id)) {\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/stubInfo.hpp\"\n@@ -101,3 +102,0 @@\n-enum StubGenBlobId : int;\n-enum StubGenStubId : int;\n-\n@@ -110,1 +108,1 @@\n-  StubGenBlobId _blob_id;\n+  BlobId _blob_id;\n@@ -116,1 +114,1 @@\n-  StubCodeGenerator(CodeBuffer* code, StubGenBlobId blob_id, bool print_code = false);\n+  StubCodeGenerator(CodeBuffer* code, BlobId blob_id, bool print_code = false);\n@@ -120,1 +118,1 @@\n-  StubGenBlobId blob_id()                        { return _blob_id; }\n+  BlobId blob_id()                               { return _blob_id; }\n@@ -126,1 +124,1 @@\n-  void verify_stub(StubGenStubId stub_id);\n+  void verify_stub(StubId stub_id);\n@@ -142,1 +140,1 @@\n-  StubCodeMark(StubCodeGenerator* cgen, StubGenStubId stub_id);\n+  StubCodeMark(StubCodeGenerator* cgen, StubId stub_id);\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.hpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"code\/codeBlob.hpp\"\n+#include \"oops\/klass.hpp\"\n@@ -31,2 +33,17 @@\n-\/\/ macros for generating definitions and declarations for shared, c1\n-\/\/ and opto blob fields and associated stub ids\n+\/\/ Macros for generating definitions and declarations for shared, c1,\n+\/\/ opto and stubgen blobs and associated stub and entry ids.\n+\/\/\n+\/\/ The template macros that follow define blobs, stubs and entries in\n+\/\/ each stub group. Invocations of the macros with different macro\n+\/\/ arguments can be used to generate definitions and declarations of\n+\/\/ types, data and methods\/functions which support blob, stub and\n+\/\/ entry management.\n+\/\/\n+\/\/ In particular, they are used to generate 3 global enums that list\n+\/\/ all blobs, stubs and entries across stub groups. They are also used\n+\/\/ to generate local (per-stub group) enums listing every stub in the\n+\/\/ group. The former are provided ot allow systematic management of\n+\/\/ blobs, stubs and entries by generic code. The latter are used by\n+\/\/ code which generates and consumes stubs in a specific group. An API\n+\/\/ is provided to convert between global and local ids where needed\n+\/\/ (see class StubInfo).\n@@ -34,2 +51,25 @@\n-\/\/ Different shared stubs can have different blob types and may\n-\/\/ include some JFR stubs\n+\/\/ Shared stub declarations\n+\/\/\n+\/\/ Every shared stub has a unique associated blob whose type must be\n+\/\/ defined as part of the stub declaration. The blob type determines\n+\/\/ how many entries are associated with the stub, normally 1. A build\n+\/\/ may optionally include some JFR stubs.\n+\/\/\n+\/\/ n.b resolve, handler and throw stubs must remain grouped\n+\/\/ contiguously and in the same order so that id values can be range\n+\/\/ checked\n+\/\/\n+\/\/ Alongside the global and local enums, shared declations are used to\n+\/\/ generate the following code elements in class SharedRuntime:\n+\/\/\n+\/\/ Shared Stub blob fields\n+\/\/\n+\/\/ Static field declarations\/definitons for fields of class\n+\/\/ SharedRuntime are generated to store shared blobs\n+\/\/\n+\/\/ static <blobtype>* _<stubname>;\n+\/\/\n+\/\/ Shared stub field names\n+\/\/\n+\/\/ Stubs are provided with names in the format \"Shared Runtime\n+\/\/ <stubname> _blob\".\n@@ -37,2 +77,0 @@\n-\/\/ n.b resolve, handler and throw stubs must remain grouped in the\n-\/\/ same order to allow id values to be range checked\n@@ -43,2 +81,2 @@\n-  do_blob(jfr_write_checkpoint, RuntimeStub*)                          \\\n-  do_blob(jfr_return_lease, RuntimeStub*)                              \\\n+  do_blob(jfr_write_checkpoint, RuntimeStub)                           \\\n+  do_blob(jfr_return_lease, RuntimeStub)                               \\\n@@ -54,1 +92,1 @@\n-  do_blob(deopt, DeoptimizationBlob*)                                  \\\n+  do_blob(deopt, DeoptimizationBlob)                                   \\\n@@ -56,6 +94,6 @@\n-  do_blob(wrong_method, RuntimeStub*)                                  \\\n-  do_blob(wrong_method_abstract, RuntimeStub*)                         \\\n-  do_blob(ic_miss, RuntimeStub*)                                       \\\n-  do_blob(resolve_opt_virtual_call, RuntimeStub*)                      \\\n-  do_blob(resolve_virtual_call, RuntimeStub*)                          \\\n-  do_blob(resolve_static_call, RuntimeStub*)                           \\\n+  do_blob(wrong_method, RuntimeStub)                                   \\\n+  do_blob(wrong_method_abstract, RuntimeStub)                          \\\n+  do_blob(ic_miss, RuntimeStub)                                        \\\n+  do_blob(resolve_opt_virtual_call, RuntimeStub)                       \\\n+  do_blob(resolve_virtual_call, RuntimeStub)                           \\\n+  do_blob(resolve_static_call, RuntimeStub)                            \\\n@@ -63,3 +101,3 @@\n-  do_blob(polling_page_vectors_safepoint_handler, SafepointBlob*)      \\\n-  do_blob(polling_page_safepoint_handler, SafepointBlob*)              \\\n-  do_blob(polling_page_return_handler, SafepointBlob*)                 \\\n+  do_blob(polling_page_vectors_safepoint_handler, SafepointBlob)       \\\n+  do_blob(polling_page_safepoint_handler, SafepointBlob)               \\\n+  do_blob(polling_page_return_handler, SafepointBlob)                  \\\n@@ -67,5 +105,5 @@\n-  do_blob(throw_AbstractMethodError, RuntimeStub*)                     \\\n-  do_blob(throw_IncompatibleClassChangeError, RuntimeStub*)            \\\n-  do_blob(throw_NullPointerException_at_call, RuntimeStub*)            \\\n-  do_blob(throw_StackOverflowError, RuntimeStub*)                      \\\n-  do_blob(throw_delayed_StackOverflowError, RuntimeStub*)              \\\n+  do_blob(throw_AbstractMethodError, RuntimeStub)                      \\\n+  do_blob(throw_IncompatibleClassChangeError, RuntimeStub)             \\\n+  do_blob(throw_NullPointerException_at_call, RuntimeStub)             \\\n+  do_blob(throw_StackOverflowError, RuntimeStub)                       \\\n+  do_blob(throw_delayed_StackOverflowError, RuntimeStub)               \\\n@@ -75,1 +113,6 @@\n-\/\/ C1 stubs are always generated in a generic CodeBlob\n+\/\/ C1 stub declarations\n+\/\/\n+\/\/ C1 stubs are always generated in a unique associated generic\n+\/\/ CodeBlob with a single entry. C1 stubs are stored in an array\n+\/\/ indexed by local enum. So, no other code elements need to be\n+\/\/ generated via this macro.\n@@ -121,2 +164,1 @@\n-\/\/ Opto stubs can be stored as entries with just an address or as\n-\/\/ blobs of different types. The former may include some JVMTI stubs.\n+\/\/ C2 stub declarations\n@@ -124,1 +166,9 @@\n-\/\/ n.b. blobs and stub defines are generated in the order defined by\n+\/\/ C2 stubs are always generated in a unique associated generic\n+\/\/ CodeBlob and have a single entry. In some cases, including JVMTI\n+\/\/ stubs, a standard code blob is employed and only the stub entry\n+\/\/ address is retained. In others a specialized code blob with\n+\/\/ stub-specific properties (e.g. frame size) is required so the blob\n+\/\/ address needs to be stored. In these latter cases the declaration\n+\/\/ includes the relevant storage type.\n+\/\/\n+\/\/ n.b. blob and stub enum tags are generated in the order defined by\n@@ -129,0 +179,21 @@\n+\/\/\n+\/\/ Alongside the local and global enums, C2 declarations are used to\n+\/\/ generate several elements of class OptoRuntime.\n+\/\/\n+\/\/ C2 Stub blob\/address fields\n+\/\/\n+\/\/ Static field declarations\/definitions for fields of class\n+\/\/ OptoRuntime are generated to store either C2 blob or C2 blob entry\n+\/\/ addresses:\n+\/\/\n+\/\/ static <blobtype>* _<stubname>_Java;\n+\/\/ static address _<stubname>;\n+\/\/\n+\/\/ C2 stub blob\/field names\n+\/\/\n+\/\/ C2 stubs are provided with names in the format \"C2 Runtime\n+\/\/ <stubname> _blob\".\n+\/\/\n+\/\/ A stub creation method OptoRuntime::generate(ciEnv* env) is\n+\/\/ generated which invokes the C2 compiler to generate each stub in\n+\/\/ declaration order.\n@@ -149,3 +220,11 @@\n-\/\/ n.b. non-jvmti stubs may employ a special type of jump (0, 1 or 2)\n-\/\/ and require access to TLS and the return pc. jvmti stubs always\n-\/\/ employ jump 0, and require no special access\n+\/\/ do_blob is used for stubs that are generated via direct invocation\n+\/\/ of the assembler to write into a blob of the appropriate type\n+\/\/\n+\/\/ do_stub is used for stubs that are generated as C2 compiler IR\n+\/\/ intrinsics, using the supplied arguments to determine wheher nodes\n+\/\/ in the IR graph employ a special type of jump (0, 1 or 2) or\n+\/\/ provide access to TLS and the return pc.\n+\/\/\n+\/\/ do_jvmti_stub generates a JVMTI stub as an IR intrinsic which\n+\/\/ employs jump 0, and requires no special access\n+\n@@ -153,2 +232,2 @@\n-  do_blob(uncommon_trap, UncommonTrapBlob*)                            \\\n-  do_blob(exception, ExceptionBlob*)                                   \\\n+  do_blob(uncommon_trap, UncommonTrapBlob)                             \\\n+  do_blob(exception, ExceptionBlob)                                    \\\n@@ -175,1 +254,3 @@\n-\/\/ Stub Generator Blobs and Stubs Overview\n+\/\/ Stubgen stub declarations\n+\/\/\n+\/\/ Stub Generator Blobs, Stubs and Entries Overview\n@@ -186,1 +267,4 @@\n-\/\/ Creation of each successive BufferBlobs is staged to ensure that\n+\/\/ Most StubGen stubs have a single entry point. However, in some\n+\/\/ cases there are additional entry points.\n+\/\/\n+\/\/ Creation of each successive BufferBlob is staged to ensure that\n@@ -188,1 +272,1 @@\n-\/\/ initialized before generated code attempt to reference data or\n+\/\/ initialized before generated code attempts to reference data or\n@@ -193,42 +277,21 @@\n-\/\/ StubGenerator stubs are declared using template macros, one set of\n-\/\/ declarations per blob (see below), with arch-specific stubs for any\n-\/\/ gven blob declared after generic stubs for that blob. Blobs are\n-\/\/ created in a fixed order during startup, which is reflected in the\n-\/\/ order of the declaration set. Stubs within a blob are currently\n-\/\/ created in an order determined by the arch-specific generator code\n-\/\/ which may not reflect the order of stub declarations. It is not\n-\/\/ straightforward to enforce a strict ordering. not least because\n-\/\/ arch-specific stub creation may need to be interleaved with generic\n-\/\/ stub creation.\n-\/\/\n-\/\/ Blob and stub declaration templates are used to generate a variety\n-\/\/ of C++ code elements needed to manage stubs.\n-\/\/\n-\/\/ Blob identifiers:\n-\/\/\n-\/\/ public enum StubGenBlobId is generated to identify each of the\n-\/\/ StubGenerator blobs in blob declaration order. This enum is\n-\/\/ provided for use by client code to identify a specific blob. For a\n-\/\/ blob declared with name <blob_name> the associated enum value is\n-\/\/ StubGenBlobId::<blob_name>_id.\n-\/\/\n-\/\/ Global stub identifiers:\n-\/\/\n-\/\/ public enum StubGenStubId is generated to identify all declared\n-\/\/ stubs across all blobs, sorted first by blob declaration order and\n-\/\/ then within a blob by stub declaration order, generic stubs before\n-\/\/ arch-specific stubs. This enum is provided for use by client code\n-\/\/ to identify a specific stub, independent of the blob it belongs to.\n-\/\/ For a stub declared with name <stub_name> the associated enum value\n-\/\/ is StubGenStubId::<stub_name>_id.\n-\/\/\n-\/\/ Blob-local stub identifiers:\n-\/\/\n-\/\/ For each blob <blob_name>, public enum StubGenStubId_<blob_name> is\n-\/\/ generated to enumerate all stubs within the blob in stub\n-\/\/ declaration order, generic stubs before arch-specific stubs. This\n-\/\/ enum is provided only in a non-product build and is intended for\n-\/\/ internal use by class StubRoutines to validate stub declarations.\n-\/\/ For a stub declared with name <stub_name> belonging to blob\n-\/\/ <blob_name> the associated enum value is\n-\/\/ StubGenStubId::<blob_name>_<stub_name>_id.\n+\/\/ StubGen blobs, stubs and entries are declared using template\n+\/\/ macros, grouped hierarchically by blob and stub, with arch-specific\n+\/\/ stubs for any given blob declared after generic stubs for that\n+\/\/ blob. Stub declarations must follow the blob start (do_blob)\n+\/\/ declaration for their containing blob. Entry declarations must\n+\/\/ follow the the stub start (do_stub) declaration for their\n+\/\/ containing stub.\n+\/\/\n+\/\/ Blob and stub declarations are used to generate a variety of C++\n+\/\/ code elements needed to manage stubs, including the global and\n+\/\/ local blob, stub and entry enum types mentioned above. The blob\n+\/\/ declaration order must reflect the order in which blob create\n+\/\/ operations are invoked during startup. Stubs within a blob are\n+\/\/ currently generated in an order determined by the arch-specific\n+\/\/ generator code which may not always reflect the order of stub\n+\/\/ declarations (it is not straightforward to enforce a strict\n+\/\/ ordering, not least because arch-specific stub creation may need to\n+\/\/ be interleaved with generic stub creation).\n+\/\/\n+\/\/ Alongside the global enums, the stubgen declarations are used to\n+\/\/ define the following elements of class StubRoutines:\n@@ -238,5 +301,2 @@\n-\/\/ Two private static fields are generated to hold the names of the\n-\/\/ four generated blobs and all the generated stubs.\n-\/\/\n-\/\/  const char* StubRoutines::_blob_names[];\n-\/\/  const char* StubRoutines::_stub_names[];\n+\/\/ Name strings are generated for each blob where a blob declared with\n+\/\/ name argument <blob_name> will be named using string \"<blob_name>\".\n@@ -244,5 +304,3 @@\n-\/\/ The entry in _blob_names for a blob declared with name <blob_name>\n-\/\/ will be \"<blob_name>\".\n-\/\/\n-\/\/ The entry in _stub_names for a stub declared with name <stub_name>\n-\/\/ will be \"<stub_name>\".\n+\/\/ Name strings are also generated for each stub where a stub declared\n+\/\/ with name argument <stub_name> will be named using string\n+\/\/ \"<stub_name>\".\n@@ -253,2 +311,2 @@\n-\/\/  const char* StubRoutines::get_blob_name(StubGenBlobId id)\n-\/\/  const char* StubRoutines::get_stub_name(StubGenStubId id)\n+\/\/  const char* StubRoutines::get_blob_name(BlobId id)\n+\/\/  const char* StubRoutines::get_stub_name(StubId id)\n@@ -352,1 +410,0 @@\n-\n@@ -418,1 +475,2 @@\n-\/\/ The do_stub template receives a blob name and stub name as argument.\n+\/\/ The do_stub template receives a blob name and stub name as\n+\/\/ argument.\n@@ -422,5 +480,6 @@\n-\/\/ do_stub is primarily used to define a global enum tag for a stub\n-\/\/ and a constant string name, both for use by client code. It is also\n-\/\/ used to declare a tag within the blob-local enum type used to\n-\/\/ validate correct use of stubs within their declared blob. Finally,\n-\/\/ it is also used to declare a name for each stub.\n+\/\/ do_stub is primarily used to define values associated with the stub\n+\/\/ wiht name stub_name, a global enum tag for it and a constant string\n+\/\/ name, both for use by client code. It is also used to declare a tag\n+\/\/ within the blob-local enum type used to validate correct use of\n+\/\/ stubs within their declared blob. Finally, it is also used to\n+\/\/ declare a name string for the stub.\n@@ -456,0 +515,8 @@\n+\/\/ All the above entry macros are used to declare enum tages that\n+\/\/ identify the entry. Three different enums are generated via these\n+\/\/ macros: a per-stub enum that indexes and provides a count for the\n+\/\/ entries associated with the owning stub; a per-blob enume that\n+\/\/ indexes and provides a count for the entries associated with the\n+\/\/ owning blob; and a global enum that indexes and provides a count\n+\/\/ for all entries associated with generated stubs.\n+\/\/\n@@ -637,1 +704,2 @@\n-                                      do_arch_entry, do_arch_entry_init) \\\n+                                      do_arch_entry,                    \\\n+                                      do_arch_entry_init)               \\\n@@ -642,1 +710,1 @@\n-  do_entry(continuation, cont_prempt, cont_preempt_stub,                \\\n+  do_entry(continuation, cont_preempt, cont_preempt_stub,               \\\n@@ -651,1 +719,1 @@\n-  STUBGEN_CONTINUATION_BLOBS_ARCH_DO(do_stub,  do_arch_blob,            \\\n+  STUBGEN_CONTINUATION_BLOBS_ARCH_DO(do_stub, do_arch_blob,             \\\n@@ -805,1 +873,1 @@\n-  STUBGEN_COMPILER_BLOBS_ARCH_DO(do_stub,  do_arch_blob,                \\\n+  STUBGEN_COMPILER_BLOBS_ARCH_DO(do_stub, do_arch_blob,                 \\\n@@ -974,0 +1042,41 @@\n+\/\/ The whole shebang!\n+\/\/\n+\/\/ client macro for emitting StubGenerator blobs, stubs and entries\n+\n+#define STUBGEN_ALL_DO(do_blob, end_blob,                               \\\n+                       do_stub,                                         \\\n+                       do_entry, do_entry_init,                         \\\n+                       do_entry_array,                                  \\\n+                       do_arch_blob,                                    \\\n+                       do_arch_entry, do_arch_entry_init)               \\\n+  STUBGEN_PREUNIVERSE_BLOBS_DO(do_blob, end_blob,                       \\\n+                               do_stub,                                 \\\n+                               do_entry, do_entry_init,                 \\\n+                               do_entry_array,                          \\\n+                               do_arch_blob,                            \\\n+                               do_arch_entry, do_arch_entry_init)       \\\n+  STUBGEN_INITIAL_BLOBS_DO(do_blob, end_blob,                           \\\n+                           do_stub,                                     \\\n+                           do_entry, do_entry_init,                     \\\n+                           do_entry_array,                              \\\n+                           do_arch_blob,                                \\\n+                           do_arch_entry, do_arch_entry_init)           \\\n+  STUBGEN_CONTINUATION_BLOBS_DO(do_blob, end_blob,                      \\\n+                                do_stub,                                \\\n+                                do_entry, do_entry_init,                \\\n+                                do_entry_array,                         \\\n+                                do_arch_blob,                           \\\n+                                do_arch_entry, do_arch_entry_init)      \\\n+  STUBGEN_COMPILER_BLOBS_DO(do_blob, end_blob,                          \\\n+                            do_stub,                                    \\\n+                            do_entry, do_entry_init,                    \\\n+                            do_entry_array,                             \\\n+                            do_arch_blob,                               \\\n+                            do_arch_entry, do_arch_entry_init)          \\\n+  STUBGEN_FINAL_BLOBS_DO(do_blob, end_blob,                             \\\n+                         do_stub,                                       \\\n+                         do_entry, do_entry_init,                       \\\n+                         do_entry_array,                                \\\n+                         do_arch_blob,                                  \\\n+                         do_arch_entry, do_arch_entry_init)             \\\n+\n@@ -976,1 +1085,10 @@\n-#define STUB_ID_NAME(base) base##_id\n+#define JOIN2(name, suffix)                     \\\n+  name ## _ ## suffix\n+\n+#define JOIN3(prefix, name, suffix)             \\\n+  prefix ## _ ## name ## _ ## suffix\n+\n+#define JOIN4(prefix, prefix2, name, suffix)            \\\n+  prefix ## _ ## prefix2 ## _ ## name ## _ ## suffix\n+\n+#define STUB_ID_NAME(base) JOIN2(base, id)\n@@ -984,1 +1102,1 @@\n-#define BLOB_FIELD_NAME(base) _##base##_blob\n+#define BLOB_FIELD_NAME(base) _## base ## _blob\n@@ -990,0 +1108,23 @@\n+\/\/ first some macros that add an increment\n+\n+#define COUNT1(_1)                              \\\n+  + 1\n+\n+#define COUNT2(_1, _2)                          \\\n+  + 1\n+\n+#define COUNT4(_1, _2, _3, _4)                  \\\n+  + 1\n+\n+#define COUNT5(_1, _2, _3, _4, _5)              \\\n+  + 1\n+\n+#define COUNT6(_1, _2, _3, _4, _5, _6)          \\\n+  + 1\n+\n+#define SHARED_COUNT2(_1, type)                 \\\n+  + type :: ENTRY_COUNT\n+\n+#define STUBGEN_COUNT5(_1, _2, _3, _4, count)   \\\n+  + count\n+\n@@ -1023,41 +1164,0 @@\n-\/\/ The whole shebang!\n-\/\/\n-\/\/ client macro for emitting StubGenerator blobs, stubs and entries\n-\n-#define STUBGEN_ALL_DO(do_blob, end_blob,                               \\\n-                       do_stub,                                         \\\n-                       do_entry, do_entry_init,                         \\\n-                       do_entry_array,                                  \\\n-                       do_arch_blob,                                    \\\n-                       do_arch_entry, do_arch_entry_init)               \\\n-  STUBGEN_PREUNIVERSE_BLOBS_DO(do_blob, end_blob,                       \\\n-                               do_stub,                                 \\\n-                               do_entry, do_entry_init,                 \\\n-                               do_entry_array,                          \\\n-                               do_arch_blob,                            \\\n-                               do_arch_entry, do_arch_entry_init)       \\\n-  STUBGEN_INITIAL_BLOBS_DO(do_blob, end_blob,                           \\\n-                           do_stub,                                     \\\n-                           do_entry, do_entry_init,                     \\\n-                           do_entry_array,                              \\\n-                           do_arch_blob,                                \\\n-                           do_arch_entry, do_arch_entry_init)           \\\n-  STUBGEN_CONTINUATION_BLOBS_DO(do_blob, end_blob,                      \\\n-                                do_stub,                                \\\n-                                do_entry, do_entry_init,                \\\n-                                do_entry_array,                         \\\n-                                do_arch_blob,                           \\\n-                                do_arch_entry, do_arch_entry_init)      \\\n-  STUBGEN_COMPILER_BLOBS_DO(do_blob, end_blob,                          \\\n-                            do_stub,                                    \\\n-                            do_entry, do_entry_init,                    \\\n-                            do_entry_array,                             \\\n-                            do_arch_blob,                               \\\n-                            do_arch_entry, do_arch_entry_init)          \\\n-  STUBGEN_FINAL_BLOBS_DO(do_blob, end_blob,                             \\\n-                         do_stub,                                       \\\n-                         do_entry, do_entry_init,                       \\\n-                         do_entry_array,                                \\\n-                         do_arch_blob,                                  \\\n-                         do_arch_entry, do_arch_entry_init)             \\\n-\n@@ -1084,1 +1184,1 @@\n-\/\/ client macro to operate only on StubGenerator blobs and stubs\n+\/\/ client macros to operate only on StubGenerator blobs and stubs\n@@ -1094,0 +1194,11 @@\n+\/\/ client macro to operate only on StubGenerator generci and arch entries\n+\n+#define STUBGEN_ALL_ENTRIES_DO(do_entry, do_entry_init, do_entry_array, \\\n+                               do_arch_entry, do_arch_entry_init)       \\\n+  STUBGEN_ALL_DO(DO_BLOB_EMPTY1, DO_BLOB_EMPTY1,                        \\\n+                 DO_STUB_EMPTY2,                                        \\\n+                 do_entry, do_entry_init,                               \\\n+                 do_entry_array,                                        \\\n+                 DO_ARCH_BLOB_EMPTY2,                                   \\\n+                 do_arch_entry, do_arch_entry_init)                     \\\n+\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":255,"deletions":144,"binary":false,"changes":399,"status":"modified"},{"patch":"@@ -0,0 +1,1080 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"code\/codeBlob.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"runtime\/stubDeclarations.hpp\"\n+#include \"runtime\/stubInfo.hpp\"\n+\n+\/\/ define static data fields of class Stubdata\n+\n+struct StubInfo::GroupDetails StubInfo::_group_table[StubInfo::GROUP_TABLE_SIZE];\n+struct StubInfo::BlobDetails StubInfo::_blob_table[StubInfo::BLOB_TABLE_SIZE];\n+struct StubInfo::StubDetails StubInfo::_stub_table[StubInfo::STUB_TABLE_SIZE];\n+struct StubInfo::EntryDetails StubInfo::_entry_table[StubInfo::ENTRY_TABLE_SIZE];\n+\n+\/\/ helpers to access table elements using enums as indices\n+\n+struct StubInfo::GroupDetails& StubInfo::group_details(StubGroup g) {\n+  int idx = static_cast<int>(g);\n+  assert(idx >= 0 && idx < GROUP_TABLE_SIZE, \"invalid stub group index %d\", idx);\n+  return _group_table[idx];\n+}\n+\n+struct StubInfo::BlobDetails& StubInfo::blob_details(BlobId b) {\n+  int idx = static_cast<int>(b);\n+  assert(idx >= 0 && idx < BLOB_TABLE_SIZE, \"invalid blob index %d\", idx);\n+  return _blob_table[idx];\n+}\n+\n+struct StubInfo::StubDetails& StubInfo::stub_details(StubId s) {\n+  int idx = static_cast<int>(s);\n+  assert(idx >= 0 && idx < STUB_TABLE_SIZE, \"invalid stub index %d\", idx);\n+  return _stub_table[idx];\n+}\n+\n+struct StubInfo::EntryDetails& StubInfo::entry_details(EntryId e) {\n+  int idx = static_cast<int>(e);\n+  assert(idx >= 0 && idx < ENTRY_TABLE_SIZE, \"invalid entry index %d\", idx);\n+  return _entry_table[idx];\n+}\n+\n+\/\/ helpers to step through blob, stub or entry enum sequences\n+\n+BlobId StubInfo::next(BlobId id) {\n+  int idx = static_cast<int>(id);\n+  \/\/ allow for id to be NO_BLOBID but not NUM_BLOBIDS\n+  assert(idx >= -1 && idx < BLOB_TABLE_SIZE, \"invalid blob index %d\", idx);\n+  return static_cast<BlobId>(idx + 1);\n+}\n+\n+StubId StubInfo::next(StubId id) {\n+  int idx = static_cast<int>(id);\n+  \/\/ allow for id to be NO_STUBID but not NUM_STUBIDS\n+  assert(idx >= -1 && idx < STUB_TABLE_SIZE, \"invalid stub index %d\", idx);\n+  return static_cast<StubId>(idx + 1);\n+}\n+\n+EntryId StubInfo::next(EntryId id) {\n+  int idx = static_cast<int>(id);\n+  \/\/ allow for id to be NO_ENTRYID but not NUM_ENTRYIDS\n+  assert(idx >= -1 && idx < ENTRY_TABLE_SIZE, \"invalid entry index %d\", idx);\n+  return static_cast<EntryId>(idx + 1);\n+}\n+\n+BlobId StubInfo::next_in_group(StubGroup stub_group, BlobId blob_id) {\n+  int idx = static_cast<int>(blob_id);\n+  \/\/ id must be strictly between NO_BLOBID and NUM_BLOBIDS\n+  assert(idx > -1 && idx < STUB_TABLE_SIZE, \"invalid stub index %d\", idx);\n+  assert(blob_details(blob_id)._group == stub_group, \"blob does not belong to stub group!\");\n+  struct GroupDetails& group = group_details(stub_group);\n+  if (blob_id == group._max) {\n+    return BlobId::NO_BLOBID;\n+  } else {\n+    return static_cast<BlobId>(idx + 1);\n+  }\n+}\n+\n+StubId StubInfo::next_in_blob(BlobId blob_id, StubId stub_id) {\n+  int idx = static_cast<int>(stub_id);\n+  \/\/ id must be strictly between NO_STUBID and NUM_STUBIDS\n+  assert(idx > -1 && idx < STUB_TABLE_SIZE, \"invalid stub index %d\", idx);\n+  assert(stub_details(stub_id)._blob == blob_id, \"stub does not belong to blob!\");\n+  struct BlobDetails& blob = blob_details(blob_id);\n+  if (stub_id == blob._max) {\n+    return StubId::NO_STUBID;\n+  } else {\n+    return static_cast<StubId>(idx + 1);\n+  }\n+}\n+\n+EntryId StubInfo::next_in_stub(StubId stub_id, EntryId entry_id) {\n+  int idx = static_cast<int>(entry_id);\n+  \/\/ id must be strictly between NO_ENTRYID and NUM_ENTRYIDS\n+  assert(idx > -1 && idx < ENTRY_TABLE_SIZE, \"invalid entry index %d\", idx);\n+  assert(entry_details(entry_id)._stub == stub_id, \"entry does not belong to stub!\");\n+  struct StubDetails& stub = stub_details(stub_id);\n+  if (entry_id == stub._max) {\n+    return EntryId::NO_ENTRYID;\n+  } else {\n+    return static_cast<EntryId>(idx + 1);\n+  }\n+}\n+\n+\/\/ name retrieval\n+\n+const char* StubInfo::name(StubGroup stub_group) {\n+  return group_details(stub_group)._name;\n+}\n+\n+const char* StubInfo::name(BlobId id) {\n+  return blob_details(id)._name;\n+}\n+\n+const char* StubInfo::name(StubId id) {\n+  return stub_details(id)._name;\n+}\n+\n+const char* StubInfo::name(EntryId id) {\n+  return entry_details(id)._name;\n+}\n+\n+int StubInfo::span(EntryId second, EntryId first) {\n+  \/\/ normally when the two ids are equal the entry span is 1 but we\n+  \/\/ have a special case when the base and max are both NO_ENTRYID in\n+  \/\/ which case the entry count is 0\n+  int idx1 = static_cast<int>(first);\n+  int idx2 = static_cast<int>(second);\n+  assert ((idx1 < 0 && idx2  < 0) || (idx1 >= 0 && idx2 >= idx1), \"bad entry ids first %d and second %d\", idx1, idx2);\n+  if (idx1 < 0) {\n+    return 0;\n+  }\n+  \/\/ span is inclusive of first and second\n+  return idx2 + 1 - idx1;\n+}\n+\n+int StubInfo::span(StubId second, StubId first) {\n+  int idx1 = static_cast<int>(first);\n+  int idx2 = static_cast<int>(second);\n+  assert(idx2 >= 0 && idx2 >= idx1, \"bad stub ids first %d and second %d\", idx1, idx2);\n+  \/\/ span is inclusive of first and second\n+  return idx2 + 1 - idx1;\n+}\n+\n+int StubInfo::span(BlobId second, BlobId first) {\n+  int idx1 = static_cast<int>(first);\n+  int idx2 = static_cast<int>(second);\n+  assert(idx2 >= 0 && idx2 >= idx1, \"bad blob ids first %d and second %d\", idx1, idx2);\n+  \/\/ span is inclusive of first and second\n+  return idx2 + 1 - idx1;\n+}\n+\n+#ifdef ASSERT\n+\/\/ helpers to check sequencing of blobs stubs and entries\n+bool StubInfo::is_next(BlobId second, BlobId first) {\n+  return next(first) == second;\n+}\n+\n+bool StubInfo::is_next(StubId second, StubId first) {\n+  return next(first) == second;\n+}\n+\n+bool StubInfo::is_next(EntryId second, EntryId first) {\n+  return next(first) == second;\n+}\n+#endif \/\/ ASSERT\n+\n+\/\/ implementation of the counting methods used to populate the\n+\/\/ stubgroup, blob, stub and entry tables\n+\n+void StubInfo::process_shared_blob(StubGroup& group_cursor,\n+                                   BlobId&  blob_cursor,\n+                                   StubId& stub_cursor,\n+                                   EntryId& entry_cursor,\n+                                   const char* name,\n+                                   BlobId declaredBlob,\n+                                   StubId declaredStub,\n+                                   EntryId declaredEntry,\n+                                   EntryId declaredMax) {\n+  \/\/ for shared declarations we update the blob, stub and entry tables\n+  \/\/ all in one go based on each unique blob declaration. We may need\n+  \/\/ to write more than one entry table element if the stub has\n+  \/\/ multiple entries\n+  assert(group_cursor == StubGroup::SHARED, \"must be\");\n+  assert(is_next (declaredBlob, blob_cursor), \"Out of order declaration for shared blob %s\", name);\n+  assert(is_next(declaredStub, stub_cursor), \"Out of order declaration for shared stub %s\", name);\n+  assert(is_next(declaredEntry, entry_cursor), \"Out of order declaration for shared entry %s\", name);\n+  assert(span(declaredMax, declaredEntry) > 0, \"Invalid entry count %d for entry %s\", span(declaredMax, declaredEntry), name);\n+  \/\/ if this is the first shared blob then record it as teh base id\n+  \/\/ and also update entry base\n+  if (group_details(group_cursor)._base == BlobId::NO_BLOBID) {\n+    group_details(group_cursor)._base = declaredBlob;\n+    group_details(group_cursor)._entry_base = declaredEntry;\n+  }\n+  \/\/ update the high water mark for blobs and entries in the stub\n+  \/\/ group unconditionally\n+  group_details(group_cursor)._max = declaredBlob;\n+  group_details(group_cursor)._entry_max = declaredMax;\n+  \/\/ move forward to this blob\n+  blob_cursor = declaredBlob;\n+  \/\/ link the blob to its group and its unique stub\n+  blob_details(blob_cursor)._group = group_cursor;\n+  blob_details(blob_cursor)._base = declaredStub;\n+  blob_details(blob_cursor)._max = declaredStub;\n+  blob_details(blob_cursor)._name = name;\n+  \/\/ move forward to this stub\n+  stub_cursor = declaredStub;\n+  \/\/ link the stub to its blob and its entries\n+  stub_details(stub_cursor)._blob = declaredBlob;\n+  stub_details(stub_cursor)._base = declaredEntry;\n+  stub_details(stub_cursor)._max = declaredMax;\n+  stub_details(stub_cursor)._is_entry_array = false;\n+  stub_details(stub_cursor)._name = name;\n+  \/\/ move forward to last entry\n+  entry_cursor = declaredMax;\n+  \/\/ fill out the entry table for the the declared entry up to last entry\n+  EntryId id = declaredEntry;\n+  entry_details(id)._stub = declaredStub;\n+  entry_details(id)._array_base = EntryId::NO_ENTRYID;\n+  entry_details(id)._name = name;\n+  \/\/ fill any subsequent entries\n+  while (id != declaredMax) {\n+    id = next(id);\n+    entry_details(id)._stub = declaredStub;\n+    entry_details(id)._array_base = EntryId::NO_ENTRYID;\n+    entry_details(id)._name = name;\n+  }\n+}\n+\n+void StubInfo::process_c1_blob(StubGroup& group_cursor,\n+                               BlobId&  blob_cursor,\n+                               StubId& stub_cursor,\n+                               EntryId& entry_cursor,\n+                               const char* name,\n+                               BlobId declaredBlob,\n+                               StubId declaredStub,\n+                               EntryId declaredEntry) {\n+  \/\/ for c1 declarations we update the blob, stub and entry tables all\n+  \/\/ in one go based on each unique blob declaration\n+  assert(group_cursor == StubGroup::C1, \"must be\");\n+  assert(is_next(declaredBlob, blob_cursor), \"Out of order declaration for c1 blob %s\", name);\n+  assert(is_next(declaredStub, stub_cursor), \"Out of order declaration for c1 stub %s\", name);\n+  assert(is_next(declaredEntry, entry_cursor), \"Out of order declaration for c1 entry %s\", name);\n+  \/\/ if this is the first c1 blob then record it and the entry\n+  if (group_details(group_cursor)._base == BlobId::NO_BLOBID) {\n+    group_details(group_cursor)._base = declaredBlob;\n+    group_details(group_cursor)._entry_base = declaredEntry;\n+  }\n+  \/\/ update the high water mark for blobs and entries in the stub\n+  \/\/ group unconditionally\n+  group_details(group_cursor)._max = declaredBlob;\n+  group_details(group_cursor)._entry_max = declaredEntry;\n+  \/\/ move forward to this blob\n+  blob_cursor = declaredBlob;\n+  \/\/ link the blob to its group and its unique stub\n+  blob_details(blob_cursor)._group = group_cursor;\n+  blob_details(blob_cursor)._base = declaredStub;\n+  blob_details(blob_cursor)._max = declaredStub;\n+  blob_details(blob_cursor)._name = name;\n+  \/\/ move forward to this stub\n+  stub_cursor = declaredStub;\n+  \/\/ link the stub to its blob and its entries\n+  stub_details(stub_cursor)._blob = declaredBlob;\n+  stub_details(stub_cursor)._base = declaredEntry;\n+  stub_details(stub_cursor)._max = declaredEntry;\n+  stub_details(stub_cursor)._is_entry_array = false;\n+  stub_details(stub_cursor)._name = name;\n+  \/\/ move forward to entry\n+  entry_cursor = declaredEntry;\n+  \/\/ fill out the entry table element\n+  entry_details(entry_cursor)._stub = declaredStub;\n+  entry_details(entry_cursor)._array_base = EntryId::NO_ENTRYID;\n+  entry_details(entry_cursor)._name = name;\n+}\n+\n+void StubInfo::process_c2_blob(StubGroup& group_cursor,\n+                               BlobId&  blob_cursor,\n+                               StubId& stub_cursor,\n+                               EntryId& entry_cursor,\n+                               const char* name,\n+                               BlobId declaredBlob,\n+                               StubId declaredStub,\n+                               EntryId declaredEntry) {\n+  \/\/ for c2 declarations we update the blob, stub and entry tables all\n+  \/\/ in one go based on the same details garnered from each unique\n+  \/\/ blob, stub r jvmti stub declaration\n+  assert(group_cursor == StubGroup::C2, \"must be\");\n+  assert(is_next(declaredBlob, blob_cursor), \"Out of order declaration for c2 blob %s\", name);\n+  assert(is_next(declaredStub, stub_cursor), \"Out of order declaration for c2 stub %s\", name);\n+  assert(is_next(declaredEntry, entry_cursor), \"Out of order declaration for c2 entry %s\", name);\n+  \/\/ if this is the first c2 blob then record it and the entry\n+  if (group_details(group_cursor)._base == BlobId::NO_BLOBID) {\n+    group_details(group_cursor)._base = declaredBlob;\n+    group_details(group_cursor)._entry_base = declaredEntry;\n+  }\n+  \/\/ update the high water mark for blobs and entries in the stub\n+  \/\/ group unconditionally\n+  group_details(group_cursor)._max = declaredBlob;\n+  group_details(group_cursor)._entry_max = declaredEntry;\n+  \/\/ move forward to this blob\n+  blob_cursor = declaredBlob;\n+  \/\/ link the blob to its group and its unique stub\n+  blob_details(blob_cursor)._group = group_cursor;\n+  blob_details(blob_cursor)._base = declaredStub;\n+  blob_details(blob_cursor)._max = declaredStub;\n+  blob_details(blob_cursor)._name = name;\n+  \/\/ move forward to this stub\n+  stub_cursor = declaredStub;\n+  \/\/ link the stub to its blob and its entries\n+  stub_details(stub_cursor)._blob = declaredBlob;\n+  stub_details(stub_cursor)._base = declaredEntry;\n+  stub_details(stub_cursor)._max = declaredEntry;\n+  stub_details(stub_cursor)._is_entry_array = false;\n+  stub_details(stub_cursor)._name = name;\n+  \/\/ move forward to entry\n+  entry_cursor = declaredEntry;\n+  \/\/ fill out the entry table element\n+  entry_details(entry_cursor)._stub = declaredStub;\n+  entry_details(entry_cursor)._array_base = EntryId::NO_ENTRYID;\n+  entry_details(entry_cursor)._name = name;\n+}\n+\n+void StubInfo::process_stubgen_blob(StubGroup& group_cursor,\n+                                    BlobId&  blob_cursor,\n+                                    StubId& stub_cursor,\n+                                    EntryId& entry_cursor,\n+                                    const char* name,\n+                                    BlobId declaredBlob) {\n+  \/\/ for stubgen blob declarations we update the blob table, allowing\n+  \/\/ us to link subsequent stubs to that blob\n+  assert(group_cursor == StubGroup::STUBGEN, \"must be\");\n+  assert(is_next(declaredBlob, blob_cursor), \"Out of order declaration for stubgen blob %s\", name);\n+  \/\/ if this is the first stubgen blob then record it\n+  if (group_details(group_cursor)._base == BlobId::NO_BLOBID) {\n+    group_details(group_cursor)._base = declaredBlob;\n+  }\n+  \/\/ update the high water mark for blobs in the stub group unconditionally\n+  group_details(group_cursor)._max = declaredBlob;\n+  \/\/ move forward to this blob\n+  blob_cursor = declaredBlob;\n+  \/\/ link the blob to its group\n+  blob_details(blob_cursor)._group = group_cursor;\n+  \/\/ clear the blob table base and max - they are set when we first\n+  \/\/ encounter a stub. likewise the blob table entry base and entry\n+  \/\/ max -- they are set when we first encounter an entry\n+  blob_details(blob_cursor)._base = StubId::NO_STUBID;\n+  blob_details(blob_cursor)._max = StubId::NO_STUBID;\n+  blob_details(blob_cursor)._entry_base = EntryId::NO_ENTRYID;\n+  blob_details(blob_cursor)._entry_max = EntryId::NO_ENTRYID;\n+  blob_details(blob_cursor)._name = name;\n+}\n+\n+void StubInfo::process_stubgen_stub(StubGroup& group_cursor,\n+                                    BlobId&  blob_cursor,\n+                                    StubId& stub_cursor,\n+                                    EntryId& entry_cursor,\n+                                    const char* name,\n+                                    BlobId declaredBlob,\n+                                    StubId declaredStub) {\n+  \/\/ for stubgen stub declarations we update the stub table, allowing\n+  \/\/ us to link subsequent entries to that stub\n+  assert(group_cursor == StubGroup::STUBGEN, \"must be\");\n+  \/\/ FIXME use stub name here\n+  assert(declaredBlob == blob_cursor, \"Stubgen stub %s in scope of incorrect blob %s\", name, blob_details(blob_cursor)._name);\n+  assert(is_next(declaredStub, stub_cursor), \"Out of order declaration for stubgen stub %s\", name);\n+  \/\/ if this is the first stubgen stub then record it\n+  if (blob_details(blob_cursor)._base == StubId::NO_STUBID) {\n+    blob_details(blob_cursor)._base = declaredStub;\n+  }\n+  \/\/ update the high water mark for stubs in the blob unconditionally\n+  blob_details(blob_cursor)._max = declaredStub;\n+  \/\/ move forward to this stub\n+  stub_cursor = declaredStub;\n+  \/\/ link the stub to its blob\n+  stub_details(stub_cursor)._blob = blob_cursor;\n+  \/\/ clear the stub table base and max - they are set when we\n+  \/\/ encounter an entry\n+  stub_details(stub_cursor)._base = EntryId::NO_ENTRYID;\n+  stub_details(stub_cursor)._max = EntryId::NO_ENTRYID;\n+  stub_details(stub_cursor)._name = name;;\n+}\n+\n+void StubInfo::process_stubgen_entry(StubGroup& group_cursor,\n+                                     BlobId&  blob_cursor,\n+                                     StubId& stub_cursor,\n+                                     EntryId& entry_cursor,\n+                                     const char* name,\n+                                     BlobId declaredBlob,\n+                                     StubId declaredStub,\n+                                     EntryId declaredEntry,\n+                                     int arrayCount) {\n+  \/\/ for stubgen entry declarations we update the entry table\n+  assert(group_cursor == StubGroup::STUBGEN, \"must be\");\n+  assert(declaredBlob == blob_cursor, \"Stubgen entry %s in scope of wrong blob %s\", name, blob_details(blob_cursor)._name);\n+  assert(declaredStub == stub_cursor, \"Stubgen entry %s declares stub in scope of wrong stub %s\", name, stub_details(stub_cursor)._name);\n+  assert(is_next(declaredEntry, entry_cursor), \"Out of order declaration for stubgen entry %s\", name);\n+  assert(arrayCount >= 0, \"Invalid array count %d\", arrayCount);\n+  \/\/ if this is the first stubgen entry in the group then record it\n+  if (group_details(group_cursor)._entry_base == EntryId::NO_ENTRYID) {\n+    group_details(group_cursor)._entry_base = declaredEntry;\n+  }\n+  \/\/ update the high water mark for entries in the group unconditionally\n+  group_details(group_cursor)._entry_max = declaredEntry;\n+  \/\/ if this is the first stubgen entry in the blob then record it\n+  if (blob_details(blob_cursor)._entry_base == EntryId::NO_ENTRYID) {\n+    blob_details(blob_cursor)._entry_base = declaredEntry;\n+  }\n+  \/\/ update the high water mark for entries in the group unconditionally\n+  blob_details(blob_cursor)._entry_max = declaredEntry;\n+  \/\/ if this is the first stubgen entry in the stub then record it\n+  if (stub_details(stub_cursor)._base == EntryId::NO_ENTRYID) {\n+    stub_details(stub_cursor)._base = declaredEntry;\n+  }\n+  \/\/ move forward to this entry\n+  if (arrayCount == 0) {\n+    \/\/ simply link the entry to its blob\n+    entry_cursor = declaredEntry;\n+    entry_details(entry_cursor)._stub = stub_cursor;\n+    entry_details(entry_cursor)._array_base = EntryId::NO_ENTRYID;\n+    entry_details(entry_cursor)._name = name;\n+  } else {\n+    \/\/ populate multiple entries and link them all to the first entry\n+    for (int i = 0; i < arrayCount; i++) {\n+      entry_cursor = next(entry_cursor);\n+      entry_details(entry_cursor)._stub = stub_cursor;\n+      entry_details(entry_cursor)._array_base = declaredEntry;\n+      \/\/ TODO: consider allocating names labelled with index\n+      entry_details(entry_cursor)._name = name;\n+    }\n+  }\n+  \/\/ update the high water mark for entries in the stub unconditionally\n+  stub_details(stub_cursor)._max = entry_cursor;\n+}\n+\n+\/\/ The stubgroup, blob, stub and entry tables defined above are\n+\/\/ populated by iterating over all blob, stub and entry declarations\n+\/\/ and incrementally updating the associated table entries. The\n+\/\/ following macros invoke static methods of StubInfo that receive\n+\/\/ and, where appropriate, update cursors identifying current\n+\/\/ positions in each table.\n+\n+#define PROCESS_SHARED_BLOB(name, type)                                 \\\n+  process_shared_blob(_group_cursor, _blob_cursor,                      \\\n+                      _stub_cursor, _entry_cursor,                      \\\n+                      \"Shared Runtime \" # name \"_blob\",                 \\\n+                      BlobId:: JOIN3(shared, name, id),                 \\\n+                      StubId:: JOIN3(shared, name, id),                 \\\n+                      EntryId:: JOIN3(shared, name, id),                \\\n+                      EntryId:: JOIN3(shared, name, max));              \\\n+\n+#define PROCESS_C1_BLOB(name)                                     \\\n+  process_c1_blob(_group_cursor, _blob_cursor,                    \\\n+                  _stub_cursor, _entry_cursor,                    \\\n+                  \"C1 Runtime \" # name \"_blob\",                   \\\n+                  BlobId:: JOIN3(c1, name, id),                   \\\n+                  StubId:: JOIN3(c1, name, id),                   \\\n+                  EntryId:: JOIN3(c1, name, id));                 \\\n+\n+#define PROCESS_C2_BLOB(name, type)                         \\\n+  process_c2_blob(_group_cursor, _blob_cursor,              \\\n+                  _stub_cursor, _entry_cursor,              \\\n+                  \"C2 Runtime \" # name \"_blob\",             \\\n+                  BlobId:: JOIN3(c2, name, id),             \\\n+                  StubId:: JOIN3(c2, name, id),             \\\n+                  EntryId:: JOIN3(c2, name, id));           \\\n+\n+#define PROCESS_C2_STUB(name, fancy_jump, pass_tls, return_pc)    \\\n+  process_c2_blob(_group_cursor, _blob_cursor,                    \\\n+                  _stub_cursor, _entry_cursor,                    \\\n+                  \"C2 Runtime \" # name \"_blob\",                   \\\n+                  BlobId:: JOIN3(c2, name, id),                   \\\n+                  StubId:: JOIN3(c2, name, id),                   \\\n+                  EntryId:: JOIN3(c2, name, id));                 \\\n+\n+#define PROCESS_C2_JVMTI_STUB(name)                               \\\n+  process_c2_blob(_group_cursor, _blob_cursor,                    \\\n+                  _stub_cursor, _entry_cursor,                    \\\n+                  \"C2 Runtime \" # name \"_blob\",                   \\\n+                  BlobId:: JOIN3(c2, name, id),                   \\\n+                  StubId:: JOIN3(c2, name, id),                   \\\n+                  EntryId:: JOIN3(c2, name, id));                 \\\n+\n+#define PROCESS_STUBGEN_BLOB(blob)                                \\\n+  process_stubgen_blob(_group_cursor, _blob_cursor,               \\\n+                       _stub_cursor, _entry_cursor,               \\\n+                       \"Stub Generator \" # blob \"_blob\",          \\\n+                       BlobId:: JOIN3(stubgen, blob, id));        \\\n+\n+#define PROCESS_STUBGEN_STUB(blob, stub)                          \\\n+  process_stubgen_stub(_group_cursor, _blob_cursor,               \\\n+                       _stub_cursor, _entry_cursor,               \\\n+                       \"Stub Generator \" # stub \"_stub\",          \\\n+                       BlobId:: JOIN3(stubgen, blob, id),         \\\n+                       StubId:: JOIN3(stubgen, stub, id));        \\\n+\n+#define PROCESS_STUBGEN_ENTRY(blob, stub, field_name, getter_name)      \\\n+  process_stubgen_entry(_group_cursor, _blob_cursor,                    \\\n+                        _stub_cursor, _entry_cursor,                    \\\n+                        \"Stub Generator \" # field_name \"_entry\",        \\\n+                        BlobId:: JOIN3(stubgen, blob, id),              \\\n+                        StubId:: JOIN3(stubgen, stub, id),              \\\n+                        EntryId:: JOIN3(stubgen, field_name, id),       \\\n+                        0);                                             \\\n+\n+#define PROCESS_STUBGEN_ENTRY_INIT(blob, stub, field_name, getter_name, \\\n+                                   init_funcion)                        \\\n+  process_stubgen_entry(_group_cursor, _blob_cursor,                    \\\n+                        _stub_cursor, _entry_cursor,                    \\\n+                        \"Stub Generator \" # field_name \"_entry\",        \\\n+                        BlobId:: JOIN3(stubgen, blob, id),              \\\n+                        StubId:: JOIN3(stubgen, stub, id),              \\\n+                        EntryId:: JOIN3(stubgen, field_name, id),       \\\n+                        0);                                             \\\n+\n+#define PROCESS_STUBGEN_ENTRY_ARRAY(blob, stub, field_name, getter_name, \\\n+                                    count)                              \\\n+  process_stubgen_entry(_group_cursor, _blob_cursor,                    \\\n+                        _stub_cursor, _entry_cursor,                    \\\n+                        \"Stub Generator \" # field_name \"_entry\",        \\\n+                        BlobId:: JOIN3(stubgen, blob, id),              \\\n+                        StubId:: JOIN3(stubgen, stub, id),              \\\n+                        EntryId:: JOIN3(stubgen, field_name, id),       \\\n+                        count);                                         \\\n+\n+#define PROCESS_STUBGEN_ENTRY_ARCH(arch_name, blob, stub, field_name,   \\\n+                                   getter_name)                         \\\n+  process_stubgen_entry(_group_cursor, _blob_cursor,                    \\\n+                        _stub_cursor, _entry_cursor,                    \\\n+                        #arch_name \"_\" # field_name,                    \\\n+                        BlobId:: JOIN3(stubgen, blob, id),              \\\n+                        StubId:: JOIN3(stubgen, stub, id),              \\\n+                        EntryId:: JOIN4(stubgen, arch_name,             \\\n+                                        field_name, id),                \\\n+                        0);                                             \\\n+\n+#define PROCESS_STUBGEN_ENTRY_ARCH_INIT(arch_name, blob, stub,          \\\n+                                        field_name, getter_name,        \\\n+                                        init_function)                  \\\n+  process_stubgen_entry(_group_cursor, _blob_cursor,                    \\\n+                        _stub_cursor, _entry_cursor,                    \\\n+                        \"Stub Generator \" # arch_name \"_\" # field_name \"_entry\", \\\n+                        BlobId:: JOIN3(stubgen, blob, id),              \\\n+                        StubId:: JOIN3(stubgen, stub, id),              \\\n+                        EntryId:: JOIN4(stubgen, arch_name,             \\\n+                                        field_name, id),                \\\n+                        0);                                             \\\n+\n+void StubInfo::populate_stub_tables() {\n+  StubGroup _group_cursor;\n+  BlobId _blob_cursor = BlobId::NO_BLOBID;\n+  StubId _stub_cursor = StubId::NO_STUBID;\n+  EntryId _entry_cursor = EntryId::NO_ENTRYID;\n+\n+  _group_cursor = StubGroup::SHARED;\n+  group_details(_group_cursor)._name = \"Shared Stubs\";\n+  group_details(_group_cursor)._base = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._max = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._entry_base = EntryId::NO_ENTRYID;\n+  group_details(_group_cursor)._entry_max = EntryId::NO_ENTRYID;\n+  SHARED_STUBS_DO(PROCESS_SHARED_BLOB);\n+\n+  _group_cursor = StubGroup::C1;\n+  group_details(_group_cursor)._name = \"C1 Stubs\";\n+  group_details(_group_cursor)._base = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._max = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._entry_base = EntryId::NO_ENTRYID;\n+  group_details(_group_cursor)._entry_max = EntryId::NO_ENTRYID;\n+  C1_STUBS_DO(PROCESS_C1_BLOB);\n+\n+  _group_cursor = StubGroup::C2;\n+  group_details(_group_cursor)._name = \"C2 Stubs\";\n+  group_details(_group_cursor)._base = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._max = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._entry_base = EntryId::NO_ENTRYID;\n+  group_details(_group_cursor)._entry_max = EntryId::NO_ENTRYID;\n+  C2_STUBS_DO(PROCESS_C2_BLOB, PROCESS_C2_STUB, PROCESS_C2_JVMTI_STUB);\n+\n+  _group_cursor = StubGroup::STUBGEN;\n+  group_details(_group_cursor)._name = \"StubGen Stubs\";\n+  group_details(_group_cursor)._base = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._max = BlobId::NO_BLOBID;\n+  group_details(_group_cursor)._entry_base = EntryId::NO_ENTRYID;\n+  group_details(_group_cursor)._entry_max = EntryId::NO_ENTRYID;\n+  STUBGEN_ALL_DO(PROCESS_STUBGEN_BLOB, DO_BLOB_EMPTY1,\n+                 PROCESS_STUBGEN_STUB,\n+                 PROCESS_STUBGEN_ENTRY, PROCESS_STUBGEN_ENTRY_INIT,\n+                 PROCESS_STUBGEN_ENTRY_ARRAY,\n+                 DO_ARCH_BLOB_EMPTY2,\n+                 PROCESS_STUBGEN_ENTRY_ARCH, PROCESS_STUBGEN_ENTRY_ARCH_INIT);\n+  assert(next(_blob_cursor) == BlobId::NUM_BLOBIDS, \"should have exhausted all blob ids!\");\n+  assert(next(_stub_cursor) == StubId::NUM_STUBIDS, \"should have exhausted all stub ids!\");\n+  assert(next(_entry_cursor) == EntryId::NUM_ENTRYIDS, \"should have exhausted all entry ids!\");\n+#ifdef ASSERT\n+  \/\/ run further sanity checks\n+  verify_stub_tables();\n+#endif \/\/ ASSERT\n+}\n+\n+#undef PROCESS_SHARED_BLOB\n+#undef PROCESS_C1_BLOB\n+#undef PROCESS_C2_BLOB\n+#undef PROCESS_C2_STUB\n+#undef PROCESS_C2_JVMTI_STUB\n+#undef PROCESS_STUBGEN_BLOB\n+#undef PROCESS_STUBGEN_STUB\n+#undef PROCESS_STUBGEN_ENTRY\n+#undef PROCESS_STUBGEN_ENTRY_INIT\n+#undef PROCESS_STUBGEN_ENTRY_ARRAY\n+#undef PROCESS_STUBGEN_ENTRY_ARCH\n+#undef PROCESS_STUBGEN_ENTRY_ARCH_INIT\n+\n+#ifdef ASSERT\n+\n+void StubInfo::verify_stub_tables() {\n+  \/\/ exercise the traversal and interconversion APIs\n+  const int NUM_STUBGROUPS = static_cast<int>(StubGroup::NUM_STUBGROUPS);\n+  StubGroup groups[NUM_STUBGROUPS] = {\n+    StubGroup::SHARED,\n+    StubGroup::C1,\n+    StubGroup::C2,\n+    StubGroup::STUBGEN };\n+\n+  \/\/ check that the statically defined blob, stub and entry counts\n+  \/\/ match the computed totals\n+  assert(blob_count(StubGroup::SHARED) == StubInfo::SHARED_STUB_COUNT,\n+         \"miscounted number of shared blobs %d vs %d\",\n+         blob_count(StubGroup::SHARED), StubInfo::SHARED_STUB_COUNT);\n+\n+  assert(stub_count(StubGroup::SHARED) == StubInfo::SHARED_STUB_COUNT,\n+         \"miscounted number of shared stubs %d vs %d\",\n+         stub_count(StubGroup::SHARED), StubInfo::SHARED_STUB_COUNT);\n+\n+  assert(entry_count(StubGroup::SHARED) == StubInfo::SHARED_ENTRY_COUNT,\n+         \"miscounted number of shared entries %d vs %d\",\n+         entry_count(StubGroup::SHARED), StubInfo::SHARED_ENTRY_COUNT);\n+\n+  assert(blob_count(StubGroup::C1) == StubInfo::C1_STUB_COUNT,\n+         \"miscounted number of c1 blobs %d vs %d\",\n+         blob_count(StubGroup::C1), StubInfo::C1_STUB_COUNT);\n+\n+  assert(stub_count(StubGroup::C1) == StubInfo::C1_STUB_COUNT,\n+         \"miscounted number of c1 stubs %d vs %d\",\n+         stub_count(StubGroup::C1), StubInfo::C1_STUB_COUNT);\n+\n+  assert(entry_count(StubGroup::C1) == StubInfo::C1_STUB_COUNT,\n+         \"miscounted number of c1 entries %d vs %d\",\n+         entry_count(StubGroup::C1), StubInfo::C1_STUB_COUNT);\n+\n+  assert(blob_count(StubGroup::C2) == StubInfo::C2_STUB_COUNT,\n+         \"miscounted number of c2 blobs %d vs %d\",\n+         blob_count(StubGroup::C2), StubInfo::C2_STUB_COUNT);\n+\n+  assert(stub_count(StubGroup::C2) == StubInfo::C2_STUB_COUNT,\n+         \"miscounted number of c2 stubs %d vs %d\",\n+         stub_count(StubGroup::C2), StubInfo::C2_STUB_COUNT);\n+\n+  assert(entry_count(StubGroup::C2) == StubInfo::C2_STUB_COUNT,\n+         \"miscounted number of c2 entries %d vs %d\",\n+         entry_count(StubGroup::C2), StubInfo::C2_STUB_COUNT);\n+\n+  assert(blob_count(StubGroup::STUBGEN) == StubInfo::STUBGEN_BLOB_COUNT,\n+         \"miscounted number of stubgen blobs %d vs %d\",\n+         blob_count(StubGroup::STUBGEN), StubInfo::STUBGEN_STUB_COUNT);\n+\n+  assert(stub_count(StubGroup::STUBGEN) == StubInfo::STUBGEN_STUB_COUNT,\n+         \"miscounted number of stubgen stubs %d vs %d\",\n+         stub_count(StubGroup::STUBGEN), StubInfo::STUBGEN_STUB_COUNT);\n+\n+  assert(entry_count(StubGroup::STUBGEN) == StubInfo::STUBGEN_ENTRY_COUNT,\n+         \"miscounted number of stubgen entries %d vs %d\",\n+         entry_count(StubGroup::STUBGEN), StubInfo::STUBGEN_ENTRY_COUNT);\n+\n+  \/\/ 1) check that the per-group blob counts add up\n+  for (int gidx = 0; gidx < NUM_STUBGROUPS ; gidx++) {\n+    StubGroup group = groups[gidx];\n+    BlobId blob = blob_base(group);\n+    int group_blob_total = blob_count(group);\n+    while (blob != BlobId::NO_BLOBID) {\n+      \/\/ predecrement total\n+      group_blob_total--;\n+      assert(group_blob_total > 0 || blob == blob_max(group), \"must be!\");\n+      assert(stubgroup(blob) == group, \"iterated out of group %s to blob %s\", name(group), name(blob));\n+      blob = next_in_group(group, blob);\n+    }\n+    assert(group_blob_total == 0, \"must be!\");\n+  }\n+\n+  \/\/ 2) check that the per-group and per-blob stub counts add up\n+  for (int gidx = 0; gidx < NUM_STUBGROUPS; gidx++) {\n+    StubGroup group = groups[gidx];\n+    BlobId blob = blob_base(group);\n+    StubId group_stub = stub_base(group);\n+    int group_stub_total = stub_count(group);\n+    while (blob != BlobId::NO_BLOBID) {\n+      StubId stub = stub_base(blob);\n+      int stub_total = stub_count(blob);\n+      while (stub != StubId::NO_STUBID) {\n+        \/\/ iterations via group and blob should proceed in parallel\n+        assert(stub == group_stub, \"must be!\");\n+        \/\/ predecrement totals\n+        group_stub_total--;\n+        stub_total--;\n+        assert(stub_total > 0 || stub == stub_max(blob), \"must be!\");\n+        assert(group_stub_total > 0 || stub == stub_max(group), \"must be!\");\n+        assert(stubgroup(stub) == group, \"iterated out of group %s to stub %s\", name(group), name(stub));\n+        stub = next_in_blob(blob, stub);\n+        group_stub = next(group_stub);\n+      }\n+      assert(stub_total == 0, \"must be!\");\n+      blob = next_in_group(group, blob);\n+    }\n+    assert(group_stub_total == 0, \"must be!\");\n+  }\n+\n+  \/\/ 3) check that the per-group, per-blob and per-stub entry counts add up\n+  for (int gidx = 0; gidx < NUM_STUBGROUPS; gidx++) {\n+    StubGroup group = groups[gidx];\n+    BlobId blob = blob_base(group);\n+    StubId group_stub = stub_base(group);\n+    EntryId group_entry = entry_base(group);\n+    int group_entry_total = entry_count(group);\n+    while (blob != BlobId::NO_BLOBID) {\n+      StubId stub = stub_base(blob);\n+      while (stub != StubId::NO_STUBID) {\n+        EntryId entry = entry_base(stub);\n+        int entry_total = entry_count(stub);\n+        while (entry != EntryId::NO_ENTRYID) {\n+          \/\/ iterations via group and blob should proceed in parallel\n+          assert(entry == group_entry, \"must be!\");\n+          \/\/ predecrement totals\n+          group_entry_total--;\n+          entry_total--;\n+          assert(entry_total > 0 || entry == entry_max(stub), \"must be!\");\n+          assert(group_entry_total > 0 || entry == entry_max(group), \"must be!\");\n+          assert(stubgroup(entry) == group, \"iterated out of group %s to entry %s\", name(group), name(entry));\n+          entry = next_in_stub(stub, entry);\n+          group_entry = next(group_entry);\n+        }\n+        assert(entry_total == 0, \"must be!\");\n+        stub = next_in_blob(blob, stub);\n+        group_stub = next(group_stub);\n+      }\n+      blob = next_in_group(group, blob);\n+    }\n+    assert(group_entry_total == 0, \"must be!\");\n+  }\n+}\n+\n+#endif \/\/ ASSERT\n+\n+\/\/ info support\n+\n+void StubInfo::dump_group_table(LogStream& ls) {\n+  ls.print_cr(\"STUB GROUP TABLE\");\n+  for (int i = 0; i < GROUP_TABLE_SIZE; i++) {\n+    GroupDetails& g = _group_table[i];\n+    ls.print_cr(\"%1d: %-8s\", i, g._name);\n+    if (g._base == g._max) {\n+      ls.print_cr(\"  blobs: %s(%d)\",\n+                  blob_details(g._base)._name,\n+                  static_cast<int>(g._base));\n+    } else {\n+      ls.print_cr(\" blobs: %s(%d) ... %s(%d)\",\n+                  blob_details(g._base)._name,\n+                  static_cast<int>(g._base),\n+                  blob_details(g._max)._name,\n+                  static_cast<int>(g._max));\n+    }\n+  }\n+}\n+\n+void StubInfo::dump_blob_table(LogStream& ls) {\n+  ls.print_cr(\"BLOB TABLE\");\n+  for (int i = 0; i < BLOB_TABLE_SIZE; i++) {\n+    BlobDetails& b = _blob_table[i];\n+    ls.print_cr(\"%-3d: %s\", i, b._name);\n+    if (b._base == b._max) {\n+      ls.print_cr(\"  stubs: %s(%d)\",\n+                  stub_details(b._base)._name,\n+                  static_cast<int>(b._base));\n+    } else {\n+      ls.print_cr(\"  stubs: %s(%d) ... %s(%d)\",\n+                  stub_details(b._base)._name,\n+                  static_cast<int>(b._base),\n+                  stub_details(b._max)._name,\n+                  static_cast<int>(b._max));\n+    }\n+  }\n+}\n+\n+void StubInfo::dump_stub_table(LogStream& ls) {\n+  ls.print_cr(\"STUB TABLE\");\n+  for (int i = 0; i < STUB_TABLE_SIZE; i++) {\n+    StubDetails& s = _stub_table[i];\n+    ls.print_cr(\"%-3d: %s %s\", i, s._name,\n+                (s._is_entry_array ? \"array\" : \"\"));\n+    ls.print_cr(\"  blob: %d\", static_cast<int>(s._blob));\n+    if (s._base == s._max) {\n+      \/\/ some stubs don't have an entry\n+      if (s._base == EntryId::NO_ENTRYID) {\n+        ls.print_cr(\"  entries: %s(%d)\",\n+                    \"no_entry\",\n+                    static_cast<int>(s._base));\n+      } else {\n+        ls.print_cr(\"  entries: %s(%d)\",\n+                    entry_details(s._base)._name,\n+                    static_cast<int>(s._base));\n+      }\n+    } else {\n+      ls.print_cr(\"  entries: %s(%d) ... %s(%d)\",\n+                  entry_details(s._base)._name,\n+                  static_cast<int>(s._base),\n+                  entry_details(s._max)._name,\n+                  static_cast<int>(s._max));\n+    }\n+  }\n+}\n+\n+void StubInfo::dump_entry_table(LogStream& ls) {\n+  ls.print_cr(\"ENTRY TABLE\");\n+  for (int i = 0; i < ENTRY_TABLE_SIZE; i++) {\n+    EntryDetails& e = _entry_table[i];\n+    ls.print_cr(\"%-3d: %s\", i, e._name);\n+    if (e._array_base != EntryId::NO_ENTRYID) {\n+      ls.print_cr(\"  array base: %d\", static_cast<int>(e._array_base));\n+    }\n+    ls.print_cr(\"  stub: %d\", static_cast<int>(e._stub));\n+  }\n+}\n+\n+void StubInfo::dump_tables(LogStream& ls) {\n+  dump_group_table(ls);\n+  ls.print_cr(\"\");\n+  dump_blob_table(ls);\n+  ls.print_cr(\"\");\n+  dump_stub_table(ls);\n+  ls.print_cr(\"\");\n+  dump_entry_table(ls);\n+}\n+\n+\/\/ Global Group\/Blob\/Stub\/Entry Id Hierarchy Traversal:\n+\n+\/\/ traverse up\n+\n+StubGroup StubInfo::stubgroup(EntryId id) {\n+  \/\/ delegate\n+  return stubgroup(stub(id));\n+}\n+\n+StubGroup StubInfo::stubgroup(BlobId id) {\n+  return blob_details(id)._group;\n+}\n+\n+StubGroup StubInfo::stubgroup(StubId id) {\n+  \/\/ delegate\n+  return stubgroup(blob(id));\n+}\n+\n+StubId StubInfo::stub(EntryId id) {\n+  return entry_details(id)._stub;\n+}\n+\n+BlobId StubInfo::blob(EntryId id) {\n+  \/\/ delegate\n+  return blob(stub(id));\n+}\n+\n+BlobId StubInfo::blob(StubId id) {\n+  return stub_details(id)._blob;\n+}\n+\n+\/\/ traverse down\n+\n+BlobId StubInfo::blob_base(StubGroup stub_group) {\n+  return group_details(stub_group)._base;\n+}\n+\n+BlobId StubInfo::blob_max(StubGroup stub_group) {\n+  return group_details(stub_group)._max;\n+}\n+\n+int StubInfo::blob_count(StubGroup stub_group) {\n+  return span(blob_max(stub_group), blob_base(stub_group));\n+}\n+\n+StubId StubInfo::stub_base(StubGroup stub_group) {\n+  \/\/ delegate\n+  return stub_base(blob_base(stub_group));\n+}\n+\n+StubId StubInfo::stub_max(StubGroup stub_group) {\n+  \/\/ delegate\n+  return stub_max(blob_max(stub_group));\n+}\n+\n+int StubInfo::stub_count(StubGroup stub_group) {\n+  return span(stub_max(stub_group), stub_base(stub_group));\n+}\n+\n+EntryId StubInfo::entry_base(StubGroup stub_group) {\n+  return group_details(stub_group)._entry_base;\n+}\n+\n+EntryId StubInfo::entry_max(StubGroup stub_group) {\n+  return group_details(stub_group)._entry_max;\n+}\n+\n+int StubInfo::entry_count(StubGroup stub_group) {\n+  return span(entry_max(stub_group), entry_base(stub_group));\n+}\n+\n+StubId StubInfo::stub_base(BlobId id) {\n+  return blob_details(id)._base;\n+}\n+\n+StubId StubInfo::stub_max(BlobId id) {\n+  return blob_details(id)._max;\n+}\n+\n+int StubInfo::stub_count(BlobId id) {\n+  return span(stub_max(id), stub_base(id));\n+}\n+\n+EntryId StubInfo::entry_base(StubId id) {\n+  return stub_details(id)._base;\n+}\n+\n+EntryId StubInfo::entry_max(StubId id) {\n+  return stub_details(id)._max;\n+}\n+\n+int StubInfo::entry_count(StubId id) {\n+  return span(entry_max(id), entry_base(id));\n+}\n+\n+EntryId StubInfo::entry_base(BlobId id) {\n+  return blob_details(id)._entry_base;\n+}\n+\n+EntryId StubInfo::entry_max(BlobId id) {\n+  return blob_details(id)._entry_max;\n+}\n+\n+int StubInfo::entry_count(BlobId id) {\n+  return span(entry_base(id), entry_max(id));\n+}\n+\n+\/\/ Global <-> Local Id Management:\n+\n+\/\/ private helpers\n+\n+bool StubInfo::has_group(BlobId id, StubGroup group) {\n+  return stubgroup(id) == group;\n+}\n+\n+bool StubInfo::has_group(StubId id, StubGroup group) {\n+  return stubgroup(id) == group;\n+}\n+\n+bool StubInfo::has_group(EntryId id, StubGroup group) {\n+  return stubgroup(id) == group;\n+}\n+\n+\/\/ Convert a blob, entry or stub id to a unique, zero-based offset in\n+\/\/ the range of blob\/stub\/entry ids for a given stub group.\n+\n+int StubInfo::local_offset(StubGroup group, BlobId id) {\n+  assert(has_group(id, group), \"id %s is not a %s blob!\", name(id), name(group));\n+  BlobId base = blob_base(group);\n+  int s = span(id, base);\n+  assert(s >= 1, \"must be\");\n+  return s - 1;\n+}\n+\n+int StubInfo::local_offset(StubGroup group, StubId id) {\n+  assert(has_group(id, group), \"id %s is not a %s stub!\", name(id), name(group));\n+  StubId base = stub_base(group);\n+  int s = span(id, base);\n+  assert(s >= 1, \"must be\");\n+  return s - 1;\n+}\n+\n+int StubInfo::local_offset(StubGroup group, EntryId id) {\n+  assert(has_group(id, group), \"id %s is not a %s entry!\", name(id), name(group));\n+  EntryId base = entry_base(group);\n+  int s = span(id, base);\n+  assert(s >= 1, \"must be\");\n+  return s - 1;\n+}\n+\n+\/\/ public API\n+\n+\/\/ check that a stub belongs to an expected stub group\n+\n+bool StubInfo::is_shared(StubId id) {\n+  return has_group(id, StubGroup::SHARED);\n+}\n+\n+bool StubInfo::is_c1(StubId id) {\n+  return has_group(id, StubGroup::C1);\n+}\n+\n+bool StubInfo::is_c2(StubId id) {\n+  return has_group(id, StubGroup::C2);\n+}\n+\n+bool StubInfo::is_stubgen(StubId id) {\n+  return has_group(id, StubGroup::STUBGEN);\n+}\n+\n+\/\/ check that a stub belongs to an expected stub group\n+\n+bool StubInfo::is_shared(BlobId id) {\n+  return has_group(id, StubGroup::SHARED);\n+}\n+\n+bool StubInfo::is_c1(BlobId id) {\n+  return has_group(id, StubGroup::C1);\n+}\n+\n+bool StubInfo::is_c2(BlobId id) {\n+  return has_group(id, StubGroup::C2);\n+}\n+\n+bool StubInfo::is_stubgen(BlobId id) {\n+  return has_group(id, StubGroup::STUBGEN);\n+}\n+\n+\/\/ Convert a stub id to a unique, zero-based offset in the range of\n+\/\/ stub ids for a given stub group.\n+\n+int StubInfo::shared_offset(StubId id) {\n+  return local_offset(StubGroup::SHARED, id);\n+}\n+\n+int StubInfo::c1_offset(StubId id) {\n+  return local_offset(StubGroup::C1, id);\n+}\n+\n+int StubInfo::c2_offset(StubId id) {\n+  return local_offset(StubGroup::C2, id);\n+}\n+\n+int StubInfo::stubgen_offset(StubId id) {\n+  return local_offset(StubGroup::STUBGEN, id);\n+}\n+\n+\/\/ initialization function called to populate blob. stub and entry\n+\/\/ tables. this must be called before any stubs are generated\n+void initialize_stub_info() {\n+  ResourceMark rm;\n+  StubInfo::populate_stub_tables();\n+\n+  LogTarget(Debug, stubs) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    StubInfo::dump_tables(ls);\n+  }\n+}\n","filename":"src\/hotspot\/share\/runtime\/stubInfo.cpp","additions":1080,"deletions":0,"binary":false,"changes":1080,"status":"added"},{"patch":"@@ -0,0 +1,684 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_STUBINFO_HPP\n+#define SHARE_RUNTIME_STUBINFO_HPP\n+\n+#include \"logging\/logStream.hpp\"\n+#include \"runtime\/stubDeclarations.hpp\"\n+\n+\/\/ class StubInfo records details of the global stubgroup, blob, stub\n+\/\/ and entry hierarchy and provides APIs that\n+\/\/\n+\/\/ 1) allow relationships between blobs, stubs and their entries to be\n+\/\/ identified.\n+\/\/\n+\/\/ 2) Support conversion from a global blob\/stub\/entry id to a\n+\/\/ corresponding, unique, group-local blob\/stub\/entry offset from the\n+\/\/ first blob\/stub\/entry in the same stubgroup\n+\n+\/\/ We have four distinct stub groups, each of which includes multiple\n+\/\/ blobs, stubs and entries.\n+\n+enum class StubGroup : int {\n+  SHARED,\n+  C1,\n+  C2,\n+  STUBGEN,\n+  NUM_STUBGROUPS\n+};\n+\n+\/\/ Generated code elements are used to implement the following enums:\n+\/\/\n+\/\/ Global and Stub Group Local Blob\/Stub\/Entry Enumerations:\n+\/\/\n+\/\/ The following enums uniquely list every generated blob, stub and\n+\/\/ entry across all four stub groups.\n+\/\/\n+\/\/ enum StubId;   \/\/ unique id for every stub in the above groups\n+\/\/ enum BlobId;   \/\/ unique id for every blob in the above groups\n+\/\/ enum EntryId;  \/\/ unique id for every entry in the above groups\n+\/\/\n+\/\/\n+\/\/ Management APIs for these enums are defined in class StubInfo. The\n+\/\/ API methods rely on a small amount of code and data genertaed from\n+\/\/ the blob, stub and entry declarations.\n+\/\/\n+\/\/ Global Group\/Blob\/Stub\/Entry Id Hierarchy Traversal:\n+\/\/\n+\/\/ traverse up\n+\/\/\n+\/\/ StubGroup StubInfo::stubgroup(EntryId);\n+\/\/ StubGroup StubInfo::stubgroup(BlobId);\n+\/\/ StubGroup StubInfo::stubgroup(StubId);\n+\/\/\n+\/\/ StubId  StubInfo::stub(EntryId);\n+\/\/ BlobId  StubInfo::blob(EntryId);\n+\/\/ BlobId  StubInfo::blob(StubId);\n+\/\/\n+\/\/ traverse down\n+\/\/\n+\/\/ BlobId  StubInfo::blob_base(StubGroup)\n+\/\/ BlobId  StubInfo::blob_max(StubGroup)\n+\/\/ int           StubInfo::blob_count(StubGroup)\n+\/\/\n+\/\/ StubId  StubInfo::stub_base(StubGroup)\n+\/\/ StubId  StubInfo::stub_max(StubGroup)\n+\/\/ int     StubInfo::stub_count(StubGroup)\n+\/\/\n+\/\/ EntryId StubInfo::entry_base(StubGroup)\n+\/\/ EntryId StubInfo::entry_max(StubGroup)\n+\/\/ int     StubInfo::entry_count(StubGroup)\n+\/\/\n+\/\/ StubId  StubInfo::stub_base(BlobId);\n+\/\/ StubId  StubInfo::stub_max(BlobId);\n+\/\/ int     StubInfo::stub_count(BlobId);\n+\/\/\n+\/\/ EntryId StubInfo::entry_base(StubId);\n+\/\/ EntryId StubInfo::entry_max(StubId);\n+\/\/ int     StubInfo::entry_count(StubId);\n+\/\/\n+\/\/ EntryId StubInfo::entry_base(BlobId);\n+\/\/ EntryId StubInfo::entry_max(BlobId);\n+\/\/ int     StubInfo::entry_count(BlobId);\n+\/\/\n+\/\/\n+\/\/ Global <-> Local Id Management:\n+\/\/\n+\/\/ check that a stub belongs to an expected stub group\n+\/\/\n+\/\/ bool StubInfo::is_shared(StubId id);\n+\/\/ bool StubInfo::is_c1(StubId id);\n+\/\/ bool StubInfo::is_c2(StubId id);\n+\/\/ bool StubInfo::is_stubgen(StubId id);\n+\/\/\n+\/\/ Convert a stub id to a unique, zero-based offset in the range of\n+\/\/ stub ids for a given stub group.\n+\/\/\n+\/\/ int  StubInfo::shared_offset(StubId id);\n+\/\/ int  StubInfo::c1_offset(StubId id);\n+\/\/ int  StubInfo::c2_offset(StubId id);\n+\/\/ int  StubInfo::stubgen_offset(StubId id);\n+\/\/\n+\/\/ Convert a blob id to a unique, zero-based offset in the range of\n+\/\/ blob ids for a given stub group. we only need this for stubgen\n+\/\/ blobs as for all other stub groups the stub indices and blob\n+\/\/ indices are identical.\n+\/\/\n+\/\/ int  StubInfo::stubgen_offset(BlobId id);\n+\/\/\n+\/\/ Convert an entry id to a unique, zero-based offset in the range\n+\/\/ of entry ids for a given stub group. we only need this for shared\n+\/\/ and stubgen blobs as for all other stub groups the stub indices\n+\/\/ and entry indices are identical.\n+\/\/\n+\/\/ int  StubInfo::shared_offset(EntryId id);\n+\/\/ int  StubInfo::stubgen_offset(EntryId id);\n+\/\/\n+\/\/ n.b. invalid interconversions from a global id to the wrong type of\n+\/\/ group id are caught by asserts\n+\n+\n+\/\/ Generate global blob, stub and entry enums from blob, stubs and\n+\/\/ entry declarations\n+\n+\/\/ Global enumeration for all blobs\n+\/\/\n+\/\/ n.b. the stubgroup is included in tag because the same name may be\n+\/\/ reused across groups (e.g. c1 and c2 both use new_instance)\n+\/\/\n+\/\/    enum BlobId {\n+\/\/      shared_deopt_id,\n+\/\/      . . .\n+\/\/      c1_unwind_exception_id,\n+\/\/      . . .\n+\/\/      c2_uncommon_trap_id,\n+\/\/      . . .\n+\/\/      stubgen_initial_id,\n+\/\/      . . .\n+\/\/      NUM_BLOBIDS,\n+\/\/    };\n+\n+\n+#define SHARED_DECLARE_TAG(name, type) JOIN3(shared, name, id) ,\n+#define C1_DECLARE_TAG(name) JOIN3(c1, name, id) ,\n+#define C2_DECLARE_TAG1(name) JOIN3(c2, name, id) ,\n+#define C2_DECLARE_TAG2(name, _1) JOIN3(c2, name, id) ,\n+#define C2_DECLARE_TAG4(name, _1, _2, _3) JOIN3(c2, name, id) ,\n+#define STUBGEN_DECLARE_TAG(name) JOIN3(stubgen, name, id) ,\n+\n+enum class BlobId : int {\n+  NO_BLOBID = -1,\n+  \/\/ declare an enum tag for each shared runtime blob\n+  SHARED_STUBS_DO(SHARED_DECLARE_TAG)\n+  \/\/ declare an enum tag for each c1 runtime blob\n+  C1_STUBS_DO(C1_DECLARE_TAG)\n+  \/\/ declare an enum tag for each opto runtime blob or stub\n+  C2_STUBS_DO(C2_DECLARE_TAG2,\n+              C2_DECLARE_TAG4,\n+              C2_DECLARE_TAG1)\n+  \/\/ declare an enum tag for each stubgen blob\n+  STUBGEN_BLOBS_DO(STUBGEN_DECLARE_TAG)\n+  NUM_BLOBIDS\n+};\n+\n+#undef SHARED_DECLARE_TAG\n+#undef C1_DECLARE_TAG\n+#undef C2_DECLARE_TAG1\n+#undef C2_DECLARE_TAG2\n+#undef C2_DECLARE_TAG4\n+#undef STUBGEN_DECLARE_TAG\n+\n+\/\/ Global enumeration for all stubs\n+\/\/\n+\/\/ n.b. the stubgroup is included in tag because the same name may be\n+\/\/ reused across groups (e.g. c1 and c2 both use new_instance). For\n+\/\/ stubgen stubs the blob name is omitted from the tag because all\n+\/\/ stub names may not be reused scross different stubgen blobs.\n+\/\/\n+\/\/    enum StubId {\n+\/\/      shared_deopt_id,\n+\/\/      . . .\n+\/\/      c1_unwind_exception_id,\n+\/\/      . . .\n+\/\/      c2_uncommon_trap_id,\n+\/\/      . . .\n+\/\/      stubgen_call_stub_id,\n+\/\/      stubgen_forward_exception_id,\n+\/\/      . . .\n+\/\/      NUM_BLOBIDS,\n+\/\/    };\n+\/\/\n+\n+#define SHARED_DECLARE_TAG(name, type) JOIN3(shared, name, id) ,\n+#define C1_DECLARE_TAG(name) JOIN3(c1, name, id) ,\n+#define C2_DECLARE_TAG1(name) JOIN3(c2, name, id) ,\n+#define C2_DECLARE_TAG2(name, _1) JOIN3(c2, name, id) ,\n+#define C2_DECLARE_TAG4(name, _1, _2, _3) JOIN3(c2, name, id) ,\n+#define STUBGEN_DECLARE_TAG(blob, name) JOIN3(stubgen, name, id) ,\n+\n+enum class StubId : int {\n+  NO_STUBID = -1,\n+  \/\/ declare an enum tag for each shared runtime blob\n+  SHARED_STUBS_DO(SHARED_DECLARE_TAG)\n+  \/\/ declare an enum tag for each c1 runtime blob\n+  C1_STUBS_DO(C1_DECLARE_TAG)\n+  \/\/ declare an enum tag for each opto runtime blob or stub\n+  C2_STUBS_DO(C2_DECLARE_TAG2,\n+              C2_DECLARE_TAG4,\n+              C2_DECLARE_TAG1)\n+  \/\/ declare an enum tag for each stubgen runtime stub\n+  STUBGEN_STUBS_DO(STUBGEN_DECLARE_TAG)\n+  NUM_STUBIDS\n+};\n+\n+#undef SHARED_DECLARE_TAG\n+#undef C1_DECLARE_TAG\n+#undef C2_DECLARE_TAG1\n+#undef C2_DECLARE_TAG2\n+#undef C2_DECLARE_TAG4\n+#undef STUBGEN_DECLARE_TAG\n+\n+\n+\/\/\n+\/\/ Global enumeration for all entries\n+\/\/\n+\/\/ n.b. the stubgroup is included in tag because the same name may be\n+\/\/ reused across groups (e.g. c1 and c2 both use new_instance)\n+\/\/\n+\/\/    enum EntryId : int {\n+\/\/      NO_ENTRYID = -1,\n+\/\/      shared_deopt_id,\n+\/\/      shared_deopt_max =\n+\/\/        shared_deopt_id + DeoptimzationBlob::NUM_ENTRIES -1,\n+\/\/      . . .\n+\/\/      c1_unwind_exception_id,\n+\/\/      . . .\n+\/\/      c2_uncommon_trap_id,\n+\/\/      . . .\n+\/\/      stubgen_call_stub_id,\n+\/\/      stubgen_call_stub_return_address_id,\n+\/\/      stubgen_forward_exception_id,\n+\/\/      . . .\n+\/\/      stubgen_aarch64_large_array_equals_id,\n+\/\/      . . .\n+\/\/      stubgen_lookup_secondary_supers_table_stubs_id,\n+\/\/      stubgen_lookup_secondary_supers_table_stubs_max =\n+\/\/        stubgen_lookup_secondary_supers_table_stubs_id +\n+\/\/        Klass::SECONDARY_SUPERS_TABLE_SIZE,\n+\/\/      . . .\n+\/\/      NUM_ENTRYIDS,\n+\/\/    };\n+\/\/\n+\/\/ - global id tags include a stub group prefix because some of the\n+\/\/ stub names are used in more than one group (e.g. new_instance,\n+\/\/ forward_exception). arch specific stubgen stubs also include the\n+\/\/ arch name in the tag.\n+\/\/\n+\/\/ - for shared stub entries we only need to allocate a single enum\n+\/\/ tag for most blobs since they have only one entry. However, we need\n+\/\/ to bump up the index by an extra 3 (or 5 with JVMCI included) when\n+\/\/ we are generating the deoptimization blob because it has 4\n+\/\/ (respectively, 6) entries. So, in that case we allocate a single\n+\/\/ enum tag identifying the index of the first entry and a max tag\n+\/\/ identifying the index of the last entry\n+\/\/\n+\/\/ - for stubgen stubs which employ an array of entries we allocate a\n+\/\/ single enum tag identifying the index of the first entry and a max\n+\/\/ tag identifying the index of the last entry e.g. for\n+\/\/ lookup_secondary_supers_table we generate\n+\/\/\n+\/\/      . . .\n+\/\/      stubgen_lookup_secondary_supers_table_stubs_id,\n+\/\/      stubgen_lookup_secondary_supers_table_stubs_max = stubgen_lookup_secondary_supers_table_stubs_id + Klass::SECONDARY_SUPERS_TABLE_SIZE,\n+\/\/      . . .\n+\/\/\n+\n+\/\/ macro to declare tags for shared entries with a base id for the\n+\/\/ first (and usually only) entry and a max id that identifies the\n+\/\/ last (usually same as first) entry in the blob, ensuring the entry\n+\/\/ for the next stub has the correct index.\n+\n+#define SHARED_DECLARE_TAG(name, type)                                  \\\n+  JOIN3(shared, name, id),                                              \\\n+  JOIN3(shared, name, max) = JOIN3(shared, name, id) +                  \\\n+    type ::ENTRY_COUNT - 1,                                             \\\n+\n+\/\/ macros to declare a tag for a C1 generated blob or a C2 generated\n+\/\/ blob, stub or JVMTI stub all of which have a single unique entry\n+\n+#define C1_DECLARE_TAG(name)           \\\n+  JOIN3(c1, name, id),                 \\\n+\n+#define C2_DECLARE_BLOB_TAG(name, type)                               \\\n+  JOIN3(c2, name, id),                                                \\\n+\n+#define C2_DECLARE_STUB_TAG(name, fancy_jump, pass_tls, return_pc)    \\\n+  JOIN3(c2, name, id),                                                \\\n+\n+#define C2_DECLARE_JVMTI_STUB_TAG(name)                               \\\n+  JOIN3(c2, name, id),                                                \\\n+\n+\/\/ macros to declare a tag for a StubGen normal entry or initialized\n+\/\/ entry\n+\n+#define STUBGEN_DECLARE_TAG(blob_name, stub_name,                       \\\n+                            field_name, getter_name)                    \\\n+  JOIN3(stubgen, field_name, id),                                       \\\n+\n+#define STUBGEN_DECLARE_INIT_TAG(blob_name, stub_name,                  \\\n+                                 field_name, getter_name,               \\\n+                                 init_function)                         \\\n+  JOIN3(stubgen, field_name, id),                                       \\\n+\n+\/\/ macro to declare a tag for a StubGen entry array. this macro\n+\/\/ declares a base id for the first entry then a max id that\n+\/\/ identifies the last entry in the array, ensuring the entry for the\n+\/\/ next stub has the correct index.\n+\n+#define STUBGEN_DECLARE_ARRAY_TAG(blob_name, stub_name,                 \\\n+                                  field_name, getter_name,              \\\n+                                  count)                                \\\n+  JOIN3(stubgen, field_name, id),                                       \\\n+  JOIN3(stubgen, field_name, max) = JOIN3(stubgen, field_name, id) +    \\\n+    count - 1,                                                          \\\n+\n+\/\/ macros to declare a tag for StubGen arch entries\n+\n+#define STUBGEN_DECLARE_ARCH_TAG(arch_name, blob_name, stub_name,       \\\n+                                 field_name, getter_name)               \\\n+  JOIN4(stubgen, arch_name, field_name, id),                            \\\n+\n+#define STUBGEN_DECLARE_ARCH_INIT_TAG(arch_name, blob_name, stub_name,  \\\n+                                      field_name, getter_name,          \\\n+                                      init_function)                    \\\n+  JOIN4(stubgen, arch_name, field_name, id),                            \\\n+\n+\/\/ the above macros are enough to declare the enum\n+\n+enum class EntryId : int {\n+  NO_ENTRYID = -1,\n+  \/\/ declare an enum tag for each shared runtime blob\n+  SHARED_STUBS_DO(SHARED_DECLARE_TAG)\n+  \/\/ declare an enum tag for each c1 runtime blob\n+  C1_STUBS_DO(C1_DECLARE_TAG)\n+  \/\/ declare an enum tag for each opto runtime blob or stub\n+  C2_STUBS_DO(C2_DECLARE_BLOB_TAG,\n+              C2_DECLARE_STUB_TAG,\n+              C2_DECLARE_JVMTI_STUB_TAG)\n+  \/\/ declare an enum tag for each stubgen entry or, in the case of an\n+  \/\/ array of entries for the first and last entries.\n+  STUBGEN_ALL_ENTRIES_DO(STUBGEN_DECLARE_TAG,\n+                         STUBGEN_DECLARE_INIT_TAG,\n+                         STUBGEN_DECLARE_ARRAY_TAG,\n+                         STUBGEN_DECLARE_ARCH_TAG,\n+                         STUBGEN_DECLARE_ARCH_INIT_TAG)\n+  NUM_ENTRYIDS\n+};\n+\n+#undef SHARED_DECLARE_TAG\n+#undef C1_DECLARE_TAG\n+#undef C2_DECLARE_BLOB_TAG\n+#undef C2_DECLARE_STUB_TAG\n+#undef C2_DECLARE_JVMTI_STUB_TAG\n+#undef STUBGEN_DECLARE_TAG\n+#undef STUBGEN_DECLARE_INIT_TAG\n+#undef STUBGEN_DECLARE_ARRAY_TAG\n+#undef STUBGEN_DECLARE_ARCH_TAG\n+#undef STUBGEN_DECLARE_ARCH_INIT_TAG\n+\n+\/\/ we need static init expressions for blob, stub and entry counts in\n+\/\/ each stubgroup\n+\n+#define SHARED_STUB_COUNT_INITIALIZER           \\\n+  0 SHARED_STUBS_DO(COUNT2)\n+\n+#define SHARED_ENTRY_COUNT_INITIALIZER          \\\n+  0 SHARED_STUBS_DO(SHARED_COUNT2)\n+\n+#define C1_STUB_COUNT_INITIALIZER               \\\n+  0 C1_STUBS_DO(COUNT1)\n+\n+#define C2_STUB_COUNT_INITIALIZER               \\\n+  0 C2_STUBS_DO(COUNT2, COUNT4, COUNT1)\n+\n+#define STUBGEN_BLOB_COUNT_INITIALIZER          \\\n+  0 STUBGEN_BLOBS_DO(COUNT1)\n+\n+#define STUBGEN_STUB_COUNT_INITIALIZER          \\\n+  0 STUBGEN_STUBS_DO(COUNT2)\n+\n+#define STUBGEN_ENTRY_COUNT_INITIALIZER          \\\n+  0 STUBGEN_ALL_ENTRIES_DO(COUNT4, COUNT5,       \\\n+                           STUBGEN_COUNT5,       \\\n+                           COUNT5, COUNT6)\n+\n+\/\/ Declare management class StubInfo\n+\n+class StubInfo: AllStatic {\n+private:\n+  \/\/ element types for tables recording stubgroup, blob, stub and\n+  \/\/ entry properties and relationships\n+\n+  \/\/ map each stubgroup to its initial and final blobs\n+  struct GroupDetails {\n+    BlobId _base;       \/\/ first blob id belonging to stub group\n+    BlobId _max;        \/\/ last blob id belonging to stub group\n+    \/\/ some stubs have no entries so we have to explicitly track the\n+    \/\/ first and last entry associated with the group rather than\n+    \/\/ deriving it from the first and last blob\/stub pair\n+    EntryId _entry_base;  \/\/ first entry id belonging to stub\n+    EntryId _entry_max;   \/\/ last entry id belonging to stub\n+    const char* _name;          \/\/ name of stubgroup\n+  };\n+\n+  \/\/ a blob table element enables the stub group of a guven blob to be\n+  \/\/ identified and all stubs within the blob to be identified\n+  \/\/\n+  \/\/ invariant: the number of stubs in a blob must be 1 unless the\n+  \/\/ blob belongs to the StubGen stub group\n+\n+  struct BlobDetails {\n+    StubGroup _group;           \/\/ stub group to which blob belongs\n+    StubId _base;         \/\/ first stub id belonging to blob\n+    StubId _max;          \/\/ last stub id belonging to blob\n+    \/\/ some stubs have no entries so we have to explicitly track the\n+    \/\/ first and last entry associated with the blob rather than\n+    \/\/ deriving it from the first and last stub\n+    EntryId _entry_base;  \/\/ first entry id belonging to stub\n+    EntryId _entry_max;   \/\/ last entry id belonging to stub\n+    const char* _name;          \/\/ name of blob\n+  };\n+\n+  \/\/ a stub table element enables the blob of a given stub to be\n+  \/\/ identified and all entries within the stub to be identified\n+  \/\/\n+  \/\/ invariant: the number of entries in a blob must be 1 unless the\n+  \/\/ blob belongs to the StubGen group or the Shared stub group\n+\n+  struct StubDetails {\n+    BlobId _blob;         \/\/ blob to which stub belongs\n+    EntryId _base;        \/\/ first entry id belonging to stub\n+    EntryId _max;         \/\/ last entry id belonging to stub\n+    bool _is_entry_array;       \/\/ true iff stub has array of entries\n+    const char* _name;          \/\/ name of stub\n+  };\n+\n+  \/\/ a stub table element enables the blob of a given stub to be\n+  \/\/ identified and all entries within the stub to be identified\n+  \/\/\n+  \/\/ invariant: the number of entries in a blob must be 1 unless the\n+  \/\/ blob belongs to the StubGen group or the Shared stub group\n+\n+  struct EntryDetails {\n+    StubId _stub;          \/\/ stub to which the entry belongs\n+    EntryId _array_base;   \/\/ base entry id for entry array stubs\n+    const char* _name;           \/\/ name of stub\n+  };\n+\n+  \/\/ tables are sized and indexed using the global ids\n+  static const int GROUP_TABLE_SIZE = static_cast<int>(StubGroup::NUM_STUBGROUPS);\n+  static const int BLOB_TABLE_SIZE = static_cast<int>(BlobId::NUM_BLOBIDS);\n+  static const int STUB_TABLE_SIZE = static_cast<int>(StubId::NUM_STUBIDS);\n+  static const int ENTRY_TABLE_SIZE = static_cast<int>(EntryId::NUM_ENTRYIDS);\n+\n+  static struct GroupDetails _group_table[GROUP_TABLE_SIZE];\n+  static struct BlobDetails _blob_table[BLOB_TABLE_SIZE];\n+  static struct StubDetails _stub_table[STUB_TABLE_SIZE];\n+  static struct EntryDetails _entry_table[ENTRY_TABLE_SIZE];\n+\n+  \/\/ helpers to access table elements using enums as indices\n+  static struct GroupDetails& group_details(StubGroup g);\n+  static struct BlobDetails& blob_details(BlobId b);\n+  static struct StubDetails& stub_details(StubId s);\n+  static struct EntryDetails& entry_details(EntryId e);\n+\n+  \/\/ helpers for counting entries\/stubs in a given stub\/blob\n+\n+  static int span(EntryId second, EntryId first);\n+  static int span(StubId second, StubId first);\n+  static int span(BlobId second, BlobId first);\n+\n+  \/\/ helper for testing whether a blob, stub or entry lies in a\n+  \/\/ specific stubgroup\n+  static bool has_group(BlobId id, StubGroup group);\n+  static bool has_group(StubId id, StubGroup group);\n+  static bool has_group(EntryId id, StubGroup group);\n+\n+  \/\/ helpers for computing blob, stub or entry offsets within\n+  \/\/ a specific stub group\n+\n+  static int local_offset(StubGroup group, BlobId id);\n+  static int local_offset(StubGroup group, StubId id);\n+  static int local_offset(StubGroup group, EntryId id);\n+\n+  \/\/ implementation of methods used to populate the stubgroup, blob,\n+  \/\/ stub and entry tables\n+  static void process_shared_blob(StubGroup& group_cursor,\n+                                  BlobId&  blob_cursor,\n+                                  StubId& stub_cursor,\n+                                  EntryId& entry_cursor,\n+                                  const char* name,\n+                                  BlobId declaredBlob,\n+                                  StubId declaredStub,\n+                                  EntryId declaredEntry,\n+                                  EntryId declaredMax);\n+  static void process_c1_blob(StubGroup& group_cursor,\n+                              BlobId&  blob_cursor,\n+                              StubId& stub_cursor,\n+                              EntryId& entry_cursor,\n+                              const char* name,\n+                              BlobId declaredBlob,\n+                              StubId declaredStub,\n+                              EntryId declaredEntry);\n+  static void process_c2_blob(StubGroup& group_cursor,\n+                              BlobId&  blob_cursor,\n+                              StubId& stub_cursor,\n+                              EntryId& entry_cursor,\n+                              const char* name,\n+                              BlobId declaredBlob,\n+                              StubId declaredStub,\n+                              EntryId declaredEntry);\n+  static void process_stubgen_blob(StubGroup& group_cursor,\n+                                   BlobId&  blob_cursor,\n+                                   StubId& stub_cursor,\n+                                   EntryId& entry_cursor,\n+                                   const char* name,\n+                                   BlobId declaredBlob);\n+  static void process_stubgen_stub(StubGroup& group_cursor,\n+                                   BlobId&  blob_cursor,\n+                                   StubId& stub_cursor,\n+                                   EntryId& entry_cursor,\n+                                   const char* name,\n+                                   BlobId declaredBlob,\n+                                   StubId declaredStub);\n+  static void process_stubgen_entry(StubGroup& group_cursor,\n+                                    BlobId&  blob_cursor,\n+                                    StubId& stub_cursor,\n+                                    EntryId& entry_cursor,\n+                                    const char* name,\n+                                    BlobId declaredBlob,\n+                                    StubId declaredStub,\n+                                    EntryId declaredEntry,\n+                                    int arrayCount);\n+\n+  static void dump_group_table(LogStream& ls);\n+  static void dump_blob_table(LogStream& ls);\n+  static void dump_stub_table(LogStream& ls);\n+  static void dump_entry_table(LogStream& ls);\n+\n+  static void verify_stub_tables();\n+public:\n+\n+  \/\/ Define statically sized counts for blobs, stubs and entries in\n+  \/\/ each stub group. n.b. we omit cases where the blob or entry count\n+  \/\/ equals the stub count.\n+  static const int SHARED_STUB_COUNT = SHARED_STUB_COUNT_INITIALIZER;\n+  static const int SHARED_ENTRY_COUNT = SHARED_ENTRY_COUNT_INITIALIZER;\n+\n+  static const int C1_STUB_COUNT = C1_STUB_COUNT_INITIALIZER;\n+\n+  static const int C2_STUB_COUNT = C2_STUB_COUNT_INITIALIZER;\n+\n+  static const int STUBGEN_STUB_COUNT = STUBGEN_STUB_COUNT_INITIALIZER;\n+  static const int STUBGEN_BLOB_COUNT = STUBGEN_BLOB_COUNT_INITIALIZER;\n+  static const int STUBGEN_ENTRY_COUNT = STUBGEN_ENTRY_COUNT_INITIALIZER;\n+\n+  \/\/ init method called from a static initializer\n+  static void populate_stub_tables();\n+  \/\/ for logging\n+  static void dump_tables(LogStream& ls);\n+\n+  \/\/ helpers to step through blob, stub or entry enum sequences.\n+  \/\/ input id may be NO_BLOB\/STUB\/ENTRYID. returned id may be\n+  \/\/ NUM_BLOB\/STUB\/ENTRYIDs\n+  static BlobId next(BlobId id);\n+  static StubId next(StubId id);\n+  static EntryId next(EntryId id);\n+\n+  \/\/ helpers to step through blob\/stub\/entry enum sequence within\n+  \/\/ (respectively) the enclosing group\/blob\/stub. returned id will be\n+  \/\/ a valid blob\/stub\/entry id or NO_BLOB\/STUB\/ENTRYID if the\n+  \/\/ group\/blob\/stub contains no more stubs\/entries.\n+  static BlobId next_in_group(StubGroup stub_group, BlobId blob_id);\n+  static StubId next_in_blob(BlobId blob_id, StubId stub_id);\n+  static EntryId next_in_stub(StubId stub_id, EntryId entry_id);\n+\n+#ifdef ASSERT\n+  \/\/ helpers to check sequencing of blobs stubs and entries\n+  static bool is_next(BlobId second, BlobId first);\n+  static bool is_next(StubId second, StubId first);\n+  static bool is_next(EntryId second, EntryId first);\n+#endif \/\/ ASSERT\n+\n+  \/\/ name retrieval\n+  static const char* name(StubGroup stub_group);\n+  static const char* name(BlobId id);\n+  static const char* name(StubId id);\n+  static const char* name(EntryId id);\n+\n+  \/\/ Global Group\/Blob\/Stub\/Entry Id Hierarchy Traversal:\n+\n+  \/\/ traverse up\n+\n+  static StubGroup stubgroup(EntryId id);\n+  static StubGroup stubgroup(BlobId id);\n+  static StubGroup stubgroup(StubId id);\n+\n+  static StubId  stub(EntryId id);\n+  static BlobId  blob(EntryId id);\n+  static BlobId  blob(StubId id);\n+\n+  \/\/ traverse down\n+\n+  static BlobId  blob_base(StubGroup stub_group);\n+  static BlobId  blob_max(StubGroup stub_group);\n+  static int     blob_count(StubGroup stub_group);\n+\n+  static StubId  stub_base(StubGroup stub_group);\n+  static StubId  stub_max(StubGroup stub_group);\n+  static int     stub_count(StubGroup stub_group);\n+\n+  static EntryId entry_base(StubGroup stub_group);\n+  static EntryId entry_max(StubGroup stub_group);\n+  static int     entry_count(StubGroup stub_group);\n+\n+  static StubId  stub_base(BlobId id);\n+  static StubId  stub_max(BlobId id);\n+  static int     stub_count(BlobId id);\n+\n+  static EntryId entry_base(BlobId id);\n+  static EntryId entry_max(BlobId id);\n+  static int     entry_count(BlobId id);\n+\n+  static EntryId entry_base(StubId id);\n+  static EntryId entry_max(StubId id);\n+  static int     entry_count(StubId id);\n+\n+  \/\/ Global <-> Local Id Management:\n+\n+  \/\/ check that a blob\/stub belongs to an expected stub group\n+\n+  static bool is_shared(StubId id);\n+  static bool is_c1(StubId id);\n+  static bool is_c2(StubId id);\n+  static bool is_stubgen(StubId id);\n+\n+  static bool is_shared(BlobId id);\n+  static bool is_c1(BlobId id);\n+  static bool is_c2(BlobId id);\n+  static bool is_stubgen(BlobId id);\n+\n+  \/\/ Convert a stub id to a unique, zero-based offset in the range of\n+  \/\/ stub ids for a given stub group.\n+\n+  static int  shared_offset(StubId id);\n+  static int  c1_offset(StubId id);\n+  static int  c2_offset(StubId id);\n+  static int  stubgen_offset(StubId id);\n+};\n+\n+\n+#endif \/\/ SHARE_RUNTIME_STUBINFO_HPP\n","filename":"src\/hotspot\/share\/runtime\/stubInfo.hpp","additions":684,"deletions":0,"binary":false,"changes":684,"status":"added"},{"patch":"@@ -51,23 +51,0 @@\n-\/\/ define arrays to hold stub and blob names\n-\n-\/\/ use a template to generate the initializer for the blob names array\n-\n-#define DEFINE_BLOB_NAME(blob_name)             \\\n-  # blob_name,\n-\n-const char* StubRoutines::_blob_names[StubGenBlobId::NUM_BLOBIDS] = {\n-  STUBGEN_BLOBS_DO(DEFINE_BLOB_NAME)\n-};\n-\n-#undef DEFINE_BLOB_NAME\n-\n-#define DEFINE_STUB_NAME(blob_name, stub_name)          \\\n-  # stub_name ,                                         \\\n-\n-\/\/ use a template to generate the initializer for the stub names array\n-const char* StubRoutines::_stub_names[StubGenStubId::NUM_STUBIDS] = {\n-  STUBGEN_STUBS_DO(DEFINE_STUB_NAME)\n-};\n-\n-#undef DEFINE_STUB_NAME\n-\n@@ -76,1 +53,1 @@\n-#define DEFINE_BLOB_FIELD(blob_name) \\\n+#define DEFINE_STUBGEN_BLOB_FIELD(blob_name)                            \\\n@@ -79,1 +56,1 @@\n-STUBGEN_BLOBS_DO(DEFINE_BLOB_FIELD)\n+STUBGEN_BLOBS_DO(DEFINE_STUBGEN_BLOB_FIELD)\n@@ -81,1 +58,1 @@\n-#undef DEFINE_BLOB_FIELD\n+#undef DEFINE_STUBGEN_BLOB_FIELD\n@@ -83,1 +60,1 @@\n-\/\/ Define fields used to store stub entries\n+\/\/ Define fields used to store stubgen stub entries\n@@ -85,1 +62,1 @@\n-#define DEFINE_ENTRY_FIELD(blob_name, stub_name, field_name, getter_name) \\\n+#define DEFINE_STUBGEN_ENTRY_FIELD(blob_name, stub_name, field_name, getter_name) \\\n@@ -88,1 +65,1 @@\n-#define DEFINE_ENTRY_FIELD_INIT(blob_name, stub_name, field_name, getter_name, init_function) \\\n+#define DEFINE_STUBGEN_ENTRY_FIELD_INIT(blob_name, stub_name, field_name, getter_name, init_function) \\\n@@ -91,1 +68,1 @@\n-#define DEFINE_ENTRY_FIELD_ARRAY(blob_name, stub_name, field_name, getter_name, count) \\\n+#define DEFINE_STUBGEN_ENTRY_FIELD_ARRAY(blob_name, stub_name, field_name, getter_name, count) \\\n@@ -94,1 +71,1 @@\n-STUBGEN_ENTRIES_DO(DEFINE_ENTRY_FIELD, DEFINE_ENTRY_FIELD_INIT, DEFINE_ENTRY_FIELD_ARRAY)\n+STUBGEN_ENTRIES_DO(DEFINE_STUBGEN_ENTRY_FIELD, DEFINE_STUBGEN_ENTRY_FIELD_INIT, DEFINE_STUBGEN_ENTRY_FIELD_ARRAY)\n@@ -96,3 +73,3 @@\n-#undef DEFINE_ENTRY_FIELD_ARRAY\n-#undef DEFINE_ENTRY_FIELD_INIT\n-#undef DEFINE_ENTRY_FIELD\n+#undef DEFINE_STUBGEN_ENTRY_FIELD_ARRAY\n+#undef DEFINE_STUBGEN_ENTRY_FIELD_INIT\n+#undef DEFINE_STUBGEN_ENTRY_FIELD\n@@ -105,3 +82,3 @@\n-const char* StubRoutines::get_blob_name(StubGenBlobId id) {\n-  assert(0 <= id && id < StubGenBlobId::NUM_BLOBIDS, \"invalid blob id\");\n-  return _blob_names[id];\n+const char* StubRoutines::get_blob_name(BlobId id) {\n+  assert(StubInfo::is_stubgen(id), \"not a stubgen blob %s\", StubInfo::name(id));\n+  return StubInfo::name(id);\n@@ -110,3 +87,3 @@\n-const char* StubRoutines::get_stub_name(StubGenStubId id) {\n-  assert(0 <= id && id < StubGenStubId::NUM_STUBIDS, \"invalid stub id\");\n-  return _stub_names[id];\n+const char* StubRoutines::get_stub_name(StubId id) {\n+  assert(StubInfo::is_stubgen(id), \"not a stubgen stub %s\", StubInfo::name(id));\n+  return StubInfo::name(id);\n@@ -116,0 +93,2 @@\n+\/\/ translate a stub id to an associated blob id while checking that it\n+\/\/ is a stubgen stub\n@@ -117,62 +96,3 @@\n-\/\/ array holding start and end indices for stub ids associated with a\n-\/\/ given blob. Given a blob with id (StubGenBlobId) blob_id for any\n-\/\/ stub with id (StubGenStubId) stub_id declared within the blob:\n-\/\/ _blob_offsets[blob_id] <= stub_id < _blob_offsets[blob_id+1]\n-\n-static int _blob_limits[StubGenBlobId::NUM_BLOBIDS + 1];\n-\n-\/\/ macro used to compute blob limits\n-#define BLOB_COUNT(blob_name)                                           \\\n-  counter += StubGenStubId_ ## blob_name :: NUM_STUBIDS_ ## blob_name;  \\\n-  _blob_limits[++index] = counter;                                      \\\n-\n-\/\/ macro that checks stubs are associated with the correct blobs\n-#define STUB_VERIFY(blob_name, stub_name)                               \\\n-  localStubId = (int) (StubGenStubId_ ## blob_name :: blob_name ## _ ## stub_name ## _id); \\\n-  globalStubId = (int) (StubGenStubId:: stub_name ## _id);              \\\n-  blobId = (int) (StubGenBlobId:: blob_name ## _id);                    \\\n-  assert((globalStubId >= _blob_limits[blobId] &&                       \\\n-          globalStubId < _blob_limits[blobId+1]),                       \\\n-         \"stub \" # stub_name \" uses incorrect blob name \" # blob_name); \\\n-  assert(globalStubId == _blob_limits[blobId] + localStubId,            \\\n-         \"stub \" # stub_name \" id found at wrong offset!\");             \\\n-\n-bool verifyStubIds() {\n-  \/\/ first compute the blob limits\n-  int counter = 0;\n-  int index = 0;\n-  \/\/ populate offsets table with cumulative total of local enum counts\n-  STUBGEN_BLOBS_DO(BLOB_COUNT);\n-\n-  \/\/ ensure 1) global stub ids lie in the range of the associated blob\n-  \/\/ and 2) each blob's base + local stub id == global stub id\n-  int globalStubId, blobId, localStubId;\n-  STUBGEN_STUBS_DO(STUB_VERIFY);\n-  return true;\n-}\n-\n-#undef BLOB_COUNT\n-#undef STUB_VERIFY\n-\n-\/\/ ensure we verify the blob ids when this compile unit is first entered\n-bool _verified_stub_ids = verifyStubIds();\n-\n-\n-\/\/ macro used by stub to blob translation\n-\n-#define BLOB_CHECK_OFFSET(blob_name)                                \\\n-  if (id < _blob_limits[((int)blobId) + 1]) { return blobId; }      \\\n-  blobId = StubGenBlobId:: blob_name ## _id;                        \\\n-\n-\/\/ translate a global stub id to an associated blob id based on the\n-\/\/ computed blob limits\n-\n-StubGenBlobId StubRoutines::stub_to_blob(StubGenStubId stubId) {\n-  int id = (int)stubId;\n-  assert(id > ((int)StubGenStubId::NO_STUBID) && id < ((int)StubGenStubId::NUM_STUBIDS), \"stub id out of range!\");\n-  \/\/ start with no blob to catch stub id == -1\n-  StubGenBlobId blobId = StubGenBlobId::NO_BLOBID;\n-  STUBGEN_BLOBS_DO(BLOB_CHECK_OFFSET);\n-  \/\/ if we reach here we should have the last blob id\n-  assert(blobId == StubGenBlobId::NUM_BLOBIDS - 1, \"unexpected blob id\");\n-  return blobId;\n+BlobId StubRoutines::stub_to_blob(StubId id) {\n+  assert(StubInfo::is_stubgen(id), \"not a stubgen stub %s\", StubInfo::name(id));\n+  return StubInfo::blob(id);\n@@ -189,1 +109,1 @@\n-extern void StubGenerator_generate(CodeBuffer* code, StubGenBlobId blob_id); \/\/ only interface to generators\n+extern void StubGenerator_generate(CodeBuffer* code, BlobId blob_id); \/\/ only interface to generators\n@@ -217,1 +137,1 @@\n-static BufferBlob* initialize_stubs(StubGenBlobId blob_id,\n+static BufferBlob* initialize_stubs(BlobId blob_id,\n@@ -222,0 +142,1 @@\n+  assert(StubInfo::is_stubgen(blob_id), \"not a stubgen blob %s\", StubInfo::name(blob_id));\n@@ -257,1 +178,1 @@\n-      StubGenBlobId blob_id = StubGenBlobId:: STUB_ID_NAME(blob_name);  \\\n+      BlobId blob_id = BlobId:: JOIN3(stubgen, blob_name, id);          \\\n@@ -261,1 +182,1 @@\n-      const char* name = \"StubRoutines (\" # blob_name \"stubs)\";         \\\n+      const char* name = \"StubRoutines (\" # blob_name \" stubs)\";        \\\n@@ -276,3 +197,3 @@\n-void blob_name ## _stubs_init()  {                      \\\n-  StubRoutines::initialize_ ## blob_name ## _stubs();   \\\n-}\n+  void blob_name ## _stubs_init()  {                    \\\n+    StubRoutines::initialize_ ## blob_name ## _stubs(); \\\n+  }\n@@ -288,1 +209,1 @@\n- * point and have adeterminate ordered init.\n+ * point and have a determinate ordered init.\n@@ -306,1 +227,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":31,"deletions":111,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"runtime\/stubDeclarations.hpp\"\n+#include \"runtime\/stubInfo.hpp\"\n@@ -154,45 +154,0 @@\n-\/\/ declare stubgen blob id enum\n-\n-#define BLOB_ENUM_DECLARE(blob_name) \\\n-  STUB_ID_NAME(blob_name),\n-\n-enum StubGenBlobId : int {\n-  NO_BLOBID = -1,\n-  STUBGEN_BLOBS_DO(BLOB_ENUM_DECLARE)\n-  NUM_BLOBIDS\n-};\n-\n-#undef BLOB_ENUM_DECLARE\n-\n-\/\/ declare blob local stub id enums\n-\n-#define BLOB_LOCAL_ENUM_START(blob_name)        \\\n-  enum StubGenStubId_ ## blob_name {            \\\n-    NO_STUBID_ ## blob_name = -1,\n-\n-#define BLOB_LOCAL_ENUM_END(blob_name)   \\\n-    NUM_STUBIDS_ ## blob_name            \\\n-  };\n-\n-#define BLOB_LOCAL_STUB_ENUM_DECLARE(blob_name, stub_name) \\\n-  blob_name ## _ ## stub_name ## _id,\n-\n-STUBGEN_BLOBS_STUBS_DO(BLOB_LOCAL_ENUM_START, BLOB_LOCAL_ENUM_END, BLOB_LOCAL_STUB_ENUM_DECLARE)\n-\n-#undef BLOB_LOCAL_ENUM_START\n-#undef BLOB_LOCAL_ENUM_END\n-#undef BLOB_LOCAL_STUB_ENUM_DECLARE\n-\n-\/\/ declare global stub id enum\n-\n-#define STUB_ENUM_DECLARE(blob_name, stub_name) \\\n-  STUB_ID_NAME(stub_name) ,\n-\n-enum StubGenStubId : int {\n-  NO_STUBID = -1,\n-  STUBGEN_STUBS_DO(STUB_ENUM_DECLARE)\n-  NUM_STUBIDS\n-};\n-\n-#undef STUB_ENUM_DECLARE\n-\n@@ -211,11 +166,2 @@\n-\/\/ declare blob and stub name storage and associated lookup methods\n-\n-private:\n-  static bool _inited_names;\n-  static const char* _blob_names[StubGenBlobId::NUM_BLOBIDS];\n-  static const char* _stub_names[StubGenStubId::NUM_STUBIDS];\n-\n-public:\n-  static bool init_names();\n-  static const char* get_blob_name(StubGenBlobId id);\n-  static const char* get_stub_name(StubGenStubId id);\n+  static const char* get_blob_name(BlobId id);\n+  static const char* get_stub_name(StubId id);\n@@ -332,2 +278,1 @@\n-  \/\/ provide a translation from stub id to its associated blob id\n-  static StubGenBlobId stub_to_blob(StubGenStubId stubId);\n+  static BlobId stub_to_blob(StubId id);\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":4,"deletions":59,"binary":false,"changes":63,"status":"modified"}]}