{"files":[{"patch":"@@ -927,1 +927,1 @@\n-      __ convert(x->op(), value.result(), reg, nullptr);\n+      __ convert(x->op(), value.result(), reg);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,30 +130,0 @@\n-class ConversionStub: public CodeStub {\n- private:\n-  Bytecodes::Code _bytecode;\n-  LIR_Opr         _input;\n-  LIR_Opr         _result;\n-\n-  static float float_zero;\n-  static double double_zero;\n- public:\n-  ConversionStub(Bytecodes::Code bytecode, LIR_Opr input, LIR_Opr result)\n-    : _bytecode(bytecode), _input(input), _result(result) {\n-    ShouldNotReachHere();\n-  }\n-\n-  Bytecodes::Code bytecode() { return _bytecode; }\n-  LIR_Opr         input()    { return _input; }\n-  LIR_Opr         result()   { return _result; }\n-\n-  virtual void emit_code(LIR_Assembler* e);\n-  virtual void visit(LIR_OpVisitState* visitor) {\n-    visitor->do_slow_case();\n-    visitor->do_input(_input);\n-    visitor->do_output(_result);\n-  }\n-#ifndef PRODUCT\n-  virtual void print_name(outputStream* out) const { out->print(\"ConversionStub\"); }\n-#endif \/\/ PRODUCT\n-};\n-\n-\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -504,1 +504,0 @@\n-      do_stub(opConvert->_stub);\n@@ -1012,3 +1011,0 @@\n-  if (stub() != nullptr) {\n-    masm->append_code_stub(stub());\n-  }\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1433,2 +1433,0 @@\n-class ConversionStub;\n-\n@@ -1440,1 +1438,0 @@\n-   ConversionStub* _stub;\n@@ -1443,1 +1440,1 @@\n-   LIR_OpConvert(Bytecodes::Code code, LIR_Opr opr, LIR_Opr result, ConversionStub* stub)\n+   LIR_OpConvert(Bytecodes::Code code, LIR_Opr opr, LIR_Opr result)\n@@ -1445,2 +1442,1 @@\n-     , _bytecode(code)\n-     , _stub(stub)                               {}\n+     , _bytecode(code)                           {}\n@@ -1449,1 +1445,0 @@\n-  ConversionStub* stub() const                   { return _stub; }\n@@ -2174,1 +2169,1 @@\n-  void convert(Bytecodes::Code code, LIR_Opr left, LIR_Opr dst, ConversionStub* stub = nullptr\/*, bool is_32bit = false*\/) { append(new LIR_OpConvert(code, left, dst, stub)); }\n+  void convert(Bytecodes::Code code, LIR_Opr left, LIR_Opr dst) { append(new LIR_OpConvert(code, left, dst)); }\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}