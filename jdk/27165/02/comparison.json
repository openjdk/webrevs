{"files":[{"patch":"@@ -80,0 +80,1 @@\n+\n@@ -81,2 +82,1 @@\n-class PSScavengeFromCLDClosure: public OopClosure {\n-private:\n+class PSScavengeCLDOopClosure : public OopClosure {\n@@ -84,3 +84,1 @@\n-  \/\/ Used to redirty a scanned cld if it has oops\n-  \/\/ pointing to the young generation after being scanned.\n-  ClassLoaderData*    _scanned_cld;\n+\n@@ -88,1 +86,5 @@\n-  PSScavengeFromCLDClosure(PSPromotionManager* pm) : _pm(pm), _scanned_cld(nullptr) { }\n+  \/\/ Records whether this CLD contains oops pointing into young-gen after scavenging.\n+  bool _has_oops_into_young_gen;\n+\n+  PSScavengeCLDOopClosure(PSPromotionManager* pm) : _pm(pm), _has_oops_into_young_gen(false) {}\n+\n@@ -90,1 +92,1 @@\n-  void do_oop(oop* p)       {\n+  void do_oop(oop* p) {\n@@ -100,2 +102,2 @@\n-      if (PSScavenge::is_obj_in_young(new_obj)) {\n-        do_cld_barrier();\n+      if (PSScavenge::is_obj_in_young(new_obj) && !_has_oops_into_young_gen) {\n+        _has_oops_into_young_gen = true;\n@@ -105,11 +107,0 @@\n-\n-  void set_scanned_cld(ClassLoaderData* cld) {\n-    assert(_scanned_cld == nullptr || cld == nullptr, \"Should always only handling one cld at a time\");\n-    _scanned_cld = cld;\n-  }\n-\n-private:\n-  void do_cld_barrier() {\n-    assert(_scanned_cld != nullptr, \"Should not be called without having a scanned cld\");\n-    _scanned_cld->record_modified_oops();\n-  }\n@@ -120,2 +111,1 @@\n-private:\n-  PSScavengeFromCLDClosure _oop_closure;\n+  PSPromotionManager* _pm;\n@@ -123,4 +113,1 @@\n-  PSScavengeCLDClosure(PSPromotionManager* pm) : _oop_closure(pm) { }\n-  void do_cld(ClassLoaderData* cld) {\n-    \/\/ If the cld has not been dirtied we know that there's\n-    \/\/ no references into  the young gen and we can skip it.\n+  PSScavengeCLDClosure(PSPromotionManager* pm) : _pm(pm) { }\n@@ -128,4 +115,6 @@\n-    if (cld->has_modified_oops()) {\n-      \/\/ Setup the promotion manager to redirty this cld\n-      \/\/ if references are left in the young gen.\n-      _oop_closure.set_scanned_cld(cld);\n+  void do_cld(ClassLoaderData* cld) {\n+    \/\/ If the cld has not been dirtied we know that there are\n+    \/\/ no references into the young gen, so we can skip it.\n+    if (!cld->has_modified_oops()) {\n+      return;\n+    }\n@@ -133,2 +122,3 @@\n-      \/\/ Clean the cld since we're going to scavenge all the metadata.\n-      cld->oops_do(&_oop_closure, ClassLoaderData::_claim_none, \/*clear_modified_oops*\/true);\n+    PSScavengeCLDOopClosure oop_closure{_pm};\n+    \/\/ Clean the cld since we're going to scavenge all the metadata.\n+    cld->oops_do(&oop_closure, ClassLoaderData::_claim_none, \/*clear_modified_oops*\/true);\n@@ -136,1 +126,2 @@\n-      _oop_closure.set_scanned_cld(nullptr);\n+    if (oop_closure._has_oops_into_young_gen) {\n+      cld->record_modified_oops();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psClosure.inline.hpp","additions":24,"deletions":33,"binary":false,"changes":57,"status":"modified"}]}