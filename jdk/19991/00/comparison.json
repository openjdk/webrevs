{"files":[{"patch":"@@ -216,10 +216,19 @@\n-        @SuppressWarnings(\"removal\")\n-        MethodType mtype = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public MethodType run() {\n-                return MethodType.fromMethodDescriptorString(descriptorString(),\n-                                                             lookup.lookupClass().getClassLoader());\n-            }\n-        });\n-\n-        \/\/ let's check that the lookup has access to all the types in the method type\n+        MethodType mtype;\n+        try {\n+            @SuppressWarnings(\"removal\")\n+            MethodType mt = AccessController.doPrivileged(new PrivilegedAction<>() {\n+                @Override\n+                public MethodType run() {\n+                    return MethodType.fromMethodDescriptorString(descriptorString(),\n+                        lookup.lookupClass().getClassLoader());\n+                }\n+            });\n+            mtype = mt;\n+        } catch (TypeNotPresentException ex) {\n+            throw (ClassNotFoundException) ex.getCause();\n+        }\n+\n+        \/\/ Some method types, like ones containing a package private class not accessible\n+        \/\/ to the overriding method, can be valid method descriptors and obtained from\n+        \/\/ MethodType.fromMethodDescriptor, but ldc instruction will fail to resolve such\n+        \/\/ MethodType constants due to access control (JVMS 5.4.3.1 and 5.4.3.5)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/MethodTypeDescImpl.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -307,0 +308,5 @@\n+\n+    public void testMissingClass() {\n+        var mtd = MTD_void.insertParameterTypes(0, ClassDesc.of(\"does.not.exist.DoesNotExist\"));\n+        assertThrows(ReflectiveOperationException.class, () -> mtd.resolveConstantDesc(MethodHandles.publicLookup()));\n+    }\n","filename":"test\/jdk\/java\/lang\/constant\/MethodTypeDescTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}