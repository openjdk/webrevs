{"files":[{"patch":"@@ -375,0 +375,5 @@\n+\n+            if (!serviceIterator.hasNext()) {\n+                serviceIterator = GetInstance.getServices(\"KeyAgreement\", algorithm);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreement.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run main KeyAgreementReinit\n+ *\/\n+\n+\n+import javax.crypto.KeyAgreement;\n+import java.math.BigInteger;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.interfaces.ECPrivateKey;\n+import java.security.spec.ECPrivateKeySpec;\n+\n+public class KeyAgreementReinit {\n+\n+    public static void main(String[] args) throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\");\n+        kpg.initialize(256);\n+        KeyPair kp = kpg.generateKeyPair();\n+        ECPrivateKey privateKey = (ECPrivateKey) kp.getPrivate();\n+\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"EC\");\n+        ECPrivateKey invalidPrivateKey\n+                = (ECPrivateKey) keyFactory.generatePrivate(\n+                new ECPrivateKeySpec(BigInteger.ZERO,\n+                        privateKey.getParams()));\n+\n+        KeyAgreement ka = KeyAgreement.getInstance(\"ECDH\");\n+\n+        try {\n+            \/\/ The first initialization with invalid key should fail.\n+            ka.init(invalidPrivateKey);\n+            throw new Exception(\"Expected exception was not thrown.\");\n+        } catch (InvalidKeyException e) {\n+            \/\/ Do nothing\n+        }\n+\n+\n+        ka.init(privateKey);\n+\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/KeyAgreementReinit.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}