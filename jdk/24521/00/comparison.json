{"files":[{"patch":"@@ -153,1 +153,1 @@\n-    private transient int count;\n+    private transient volatile int count;\n@@ -210,1 +210,1 @@\n-    private boolean linkFirst(Node<E> node) {\n+    private void linkFirst(Node<E> node) {\n@@ -212,2 +212,1 @@\n-        if (count >= capacity)\n-            return false;\n+        \/\/ assert count < capacity\n@@ -223,1 +222,0 @@\n-        return true;\n@@ -229,1 +227,1 @@\n-    private boolean linkLast(Node<E> node) {\n+    private void linkLast(Node<E> node) {\n@@ -231,2 +229,1 @@\n-        if (count >= capacity)\n-            return false;\n+        \/\/ assert count < capacity\n@@ -242,1 +239,0 @@\n-        return true;\n@@ -337,0 +333,2 @@\n+        if (count >= capacity)\n+            return false;\n@@ -341,1 +339,4 @@\n-            return linkFirst(node);\n+            if (count >= capacity)\n+                return false;\n+            linkFirst(node);\n+            return true;\n@@ -352,0 +353,2 @@\n+        if (count >= capacity)\n+            return false;\n@@ -356,1 +359,4 @@\n-            return linkLast(node);\n+            if (count >= capacity)\n+                return false;\n+            linkLast(node);\n+            return true;\n@@ -372,1 +378,1 @@\n-            while (!linkFirst(node))\n+            while (count >= capacity)\n@@ -374,0 +380,1 @@\n+            linkFirst(node);\n@@ -389,1 +396,1 @@\n-            while (!linkLast(node))\n+            while (count >= capacity)\n@@ -391,0 +398,1 @@\n+            linkLast(node);\n@@ -408,1 +416,1 @@\n-            while (!linkFirst(node)) {\n+            while (count >= capacity) {\n@@ -413,0 +421,1 @@\n+            linkFirst(node);\n@@ -431,1 +440,1 @@\n-            while (!linkLast(node)) {\n+            while (count >= capacity) {\n@@ -436,0 +445,1 @@\n+            linkLast(node);\n@@ -461,0 +471,1 @@\n+        if (count == 0) return null;\n@@ -471,0 +482,1 @@\n+        if (count == 0) return null;\n@@ -561,0 +573,1 @@\n+        if (count == 0) return null;\n@@ -571,0 +584,1 @@\n+        if (count == 0) return null;\n@@ -721,7 +735,1 @@\n-        final ReentrantLock lock = this.lock;\n-        lock.lock();\n-        try {\n-            return capacity - count;\n-        } finally {\n-            lock.unlock();\n-        }\n+        return capacity - count;\n@@ -809,7 +817,1 @@\n-        final ReentrantLock lock = this.lock;\n-        lock.lock();\n-        try {\n-            return count;\n-        } finally {\n-            lock.unlock();\n-        }\n+        return count;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/LinkedBlockingDeque.java","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"}]}