{"files":[{"patch":"@@ -644,8 +644,0 @@\n-\/\/ the fancy casts are a hopefully portable way\n-\/\/ to do unsigned 32 to 64 bit type conversion\n-inline void set_low (jlong* value, jint low )    { *value &= (jlong)0xffffffff << 32;\n-                                                   *value |= (jlong)(julong)(juint)low; }\n-\n-inline void set_high(jlong* value, jint high)    { *value &= (jlong)(julong)(juint)0xffffffff;\n-                                                   *value |= (jlong)high       << 32; }\n-\n@@ -653,4 +645,4 @@\n-  jlong result = 0; \/\/ initialization to avoid warning\n-  set_high(&result, h);\n-  set_low(&result,  l);\n-  return result;\n+  \/\/ First cast jint values to juint, so cast to julong will zero-extend.\n+  julong high = (julong)(juint)h << 32;\n+  julong low = (julong)(juint)l;\n+  return (jlong)(high | low);\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -298,0 +298,28 @@\n+\n+TEST(globalDefinitions, jlong_from) {\n+  jlong val = jlong_from(0xFF, 0);\n+  EXPECT_EQ(val, 0x00000000FF00000000);\n+\n+  val = jlong_from(0, 0xFF);\n+  EXPECT_EQ(val, 0x00000000000000FF);\n+\n+  val = jlong_from(0xFFFFFFFF, 0);\n+  EXPECT_EQ(                    val, (signed long long)0xFFFFFFFF00000000);\n+  EXPECT_EQ((unsigned long long)val,                   0xFFFFFFFF00000000);\n+\n+  val = jlong_from(0, 0xFFFFFFFF);\n+  EXPECT_EQ(val, 0x00000000FFFFFFFF);\n+\n+  val = jlong_from(0, -1);\n+  EXPECT_EQ(val, 0x00000000FFFFFFFF);\n+\n+  val = jlong_from(-1, 0);\n+  EXPECT_EQ(val, (signed long long)0xFFFFFFFF00000000);\n+\n+  val = jlong_from(-1, -1);\n+  EXPECT_EQ(val, (signed long long)0xFFFFFFFFFFFFFFFF);\n+  EXPECT_EQ(val, -1);\n+\n+  val = jlong_from(0xABCD, 0xEFEF);\n+  EXPECT_EQ(val, 0x0000ABCD0000EFEF);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}