{"files":[{"patch":"@@ -644,0 +644,7 @@\n+inline jlong jlong_from(jint h, jint l) {\n+  \/\/ First cast jint values to juint, so cast to julong will zero-extend.\n+  julong high = (julong)(juint)h << 32;\n+  julong low = (julong)(juint)l;\n+  return (jlong)(high | low);\n+}\n+\n@@ -1058,22 +1065,0 @@\n-\/\/ the fancy casts are a hopefully portable way\n-\/\/ to do unsigned 32 to 64 bit type conversion\n-inline void set_low (jlong* value, jint low ) {\n-  *value &= (jlong)0xffffffff << 32;\n-  *value |= (jlong)(julong)(juint)low;\n-}\n-\n-inline void set_high(jlong* value, jint high) {\n-  *value &= (jlong)(julong)(juint)0xffffffff;\n-  jlong low_32bits = right_n_bits_typed<jlong>(32);\n-  \/\/ high 32 bits are cleared before left-shift, since left-shift of a negative value is UB\n-  assert((high & low_32bits) << 32 == ((jlong)high << 32), \"must be\");\n-  *value |= (high & low_32bits) << 32;\n-}\n-\n-inline jlong jlong_from(jint h, jint l) {\n-  jlong result = 0; \/\/ initialization to avoid warning\n-  set_high(&result, h);\n-  set_low(&result,  l);\n-  return result;\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"}]}