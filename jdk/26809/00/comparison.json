{"files":[{"patch":"@@ -644,15 +644,0 @@\n-\/\/ the fancy casts are a hopefully portable way\n-\/\/ to do unsigned 32 to 64 bit type conversion\n-inline void set_low (jlong* value, jint low )    { *value &= (jlong)0xffffffff << 32;\n-                                                   *value |= (jlong)(julong)(juint)low; }\n-\n-inline void set_high(jlong* value, jint high)    { *value &= (jlong)(julong)(juint)0xffffffff;\n-                                                   *value |= (jlong)high       << 32; }\n-\n-inline jlong jlong_from(jint h, jint l) {\n-  jlong result = 0; \/\/ initialization to avoid warning\n-  set_high(&result, h);\n-  set_low(&result,  l);\n-  return result;\n-}\n-\n@@ -1073,0 +1058,22 @@\n+\/\/ the fancy casts are a hopefully portable way\n+\/\/ to do unsigned 32 to 64 bit type conversion\n+inline void set_low (jlong* value, jint low ) {\n+  *value &= (jlong)0xffffffff << 32;\n+  *value |= (jlong)(julong)(juint)low;\n+}\n+\n+inline void set_high(jlong* value, jint high) {\n+  *value &= (jlong)(julong)(juint)0xffffffff;\n+  jlong low_32bits = right_n_bits_typed<jlong>(32);\n+  \/\/ high 32 bits are cleared before left-shift, since left-shift of a negative value is UB\n+  assert((high & low_32bits) << 32 == ((jlong)high << 32), \"must be\");\n+  *value |= (high & low_32bits) << 32;\n+}\n+\n+inline jlong jlong_from(jint h, jint l) {\n+  jlong result = 0; \/\/ initialization to avoid warning\n+  set_high(&result, h);\n+  set_low(&result,  l);\n+  return result;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"}]}