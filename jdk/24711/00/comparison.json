{"files":[{"patch":"@@ -833,2 +833,8 @@\n-      assert(is_instance_klass(), \"sanity\");\n-      assert(InstanceKlass::cast(this)->is_shared_unregistered_class(), \"sanity\");\n+      if (is_instance_klass()) {\n+        assert(InstanceKlass::cast(this)->is_shared_unregistered_class(), \"sanity\");\n+      } else {\n+        precond(is_objArray_klass());\n+        Klass *k = ObjArrayKlass::cast(this)->bottom_klass();\n+        precond(k->is_instance_klass());\n+        assert(InstanceKlass::cast(k)->is_shared_unregistered_class(), \"sanity\");\n+      }\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8353298\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib\n+ * @build AOTCacheSupportForCustomLoaders\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar AppWithCustomLoaders AppWithCustomLoaders$MyLoader\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar AppWithCustomLoaders$MyLoadeeA AppWithCustomLoaders$MyLoadeeB\n+ * @run driver AOTCacheSupportForCustomLoaders AOT\n+ *\/\n+\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.io.File;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AOTCacheSupportForCustomLoaders {\n+    public static void main(String... args) throws Exception {\n+        SimpleCDSAppTester.of(\"AOTCacheSupportForCustomLoaders\")\n+            .classpath(\"app.jar\")\n+            .addVmArgs(\"-Xlog:cds+class=debug\", \"-Xlog:cds\")\n+            .appCommandLine(\"AppWithCustomLoaders\")\n+            .setAssemblyChecker((OutputAnalyzer out) -> {\n+                    out.shouldMatch(\"cds,class.*unreg AppWithCustomLoaders[$]MyLoadeeA\")\n+                       .shouldMatch(\"cds,class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\");\n+                })\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"Using AOT-linked classes: true\");\n+                })\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+class AppWithCustomLoaders {\n+    public static void main(String args[]) throws Exception {\n+        File custJar = new File(\"cust.jar\");\n+        URL[] urls = new URL[] {custJar.toURI().toURL()};\n+        MyLoader loader = new MyLoader(urls, AppWithCustomLoaders.class.getClassLoader());\n+\n+        \/\/ Test 1: array class of MyLoadeeA (JDK-8353298)\n+        Class klass = loader.loadClass(\"AppWithCustomLoaders$MyLoadeeA\");\n+        klass.newInstance();\n+    }\n+\n+    public static class MyLoader extends URLClassLoader {\n+        public MyLoader(URL[] urls, ClassLoader parent) {\n+            super(urls, parent);\n+        }\n+    }\n+\n+    public static class MyLoadeeA {\n+        static Object[] array1;\n+\n+        public MyLoadeeA() {\n+            if (array1 == null) {\n+                test();\n+                Object o = array1[0];\n+                System.out.println(\"array1[0] is of class: \" + o.getClass());\n+                if (!(o instanceof MyLoadeeA)) {\n+                    throw new RuntimeException(\"array1[0] should be an instanceof MyLoadeeA\");\n+                }\n+            }\n+        }\n+\n+        static void test() {\n+            array1 = new MyLoadeeA[10];\n+            for (int i = 0; i < 10; i++) {\n+                if ((i % 2) == 0) {\n+                    array1[i] = new MyLoadeeB();\n+                } else {\n+                    array1[i] = new MyLoadeeA();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static class MyLoadeeB extends MyLoadeeA {}\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTCacheSupportForCustomLoaders.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}