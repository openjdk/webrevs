{"files":[{"patch":"@@ -127,1 +127,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,0 +311,8 @@\n+public:\n+  static void assert_heap_locked() NOT_DEBUG_RETURN;\n+  static void assert_heap_locked_or_at_safepoint(bool should_be_vm_thread) NOT_DEBUG_RETURN;\n+  static void assert_heap_locked_and_not_at_safepoint() NOT_DEBUG_RETURN;\n+  static void assert_heap_not_locked() NOT_DEBUG_RETURN;\n+  static void assert_heap_not_locked_and_not_at_safepoint() NOT_DEBUG_RETURN;\n+  static void assert_at_safepoint_on_vm_thread() NOT_DEBUG_RETURN;\n+  static void assert_used_and_recalculate_used_equal(G1CollectedHeap* g1h) NOT_DEBUG_RETURN;\n@@ -312,8 +320,1 @@\n-  void assert_heap_locked() const NOT_DEBUG_RETURN;\n-  void assert_heap_locked_or_at_safepoint(bool should_be_vm_thread) const NOT_DEBUG_RETURN;\n-  void assert_heap_locked_and_not_at_safepoint() const NOT_DEBUG_RETURN;\n-  void assert_heap_not_locked() const NOT_DEBUG_RETURN;\n-  void assert_heap_not_locked_and_not_at_safepoint() const NOT_DEBUG_RETURN;\n-  void assert_at_safepoint_on_vm_thread() const NOT_DEBUG_RETURN;\n-  void assert_used_and_recalculate_used_equal() const NOT_DEBUG_RETURN;\n-\n+private:\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-inline void G1CollectedHeap::assert_heap_locked() const {\n+inline void G1CollectedHeap::assert_heap_locked() {\n@@ -329,1 +329,1 @@\n-assert_heap_locked_or_at_safepoint(bool should_be_vm_thread) const {\n+assert_heap_locked_or_at_safepoint(bool should_be_vm_thread) {\n@@ -337,1 +337,1 @@\n-inline void G1CollectedHeap::assert_heap_locked_and_not_at_safepoint() const {\n+inline void G1CollectedHeap::assert_heap_locked_and_not_at_safepoint() {\n@@ -344,1 +344,1 @@\n-inline void G1CollectedHeap::assert_heap_not_locked() const {\n+inline void G1CollectedHeap::assert_heap_not_locked() {\n@@ -349,1 +349,1 @@\n-inline void G1CollectedHeap::assert_heap_not_locked_and_not_at_safepoint() const {\n+inline void G1CollectedHeap::assert_heap_not_locked_and_not_at_safepoint() {\n@@ -356,1 +356,1 @@\n-inline void G1CollectedHeap::assert_at_safepoint_on_vm_thread() const {\n+inline void G1CollectedHeap::assert_at_safepoint_on_vm_thread() {\n@@ -362,1 +362,2 @@\n-inline void G1CollectedHeap::assert_used_and_recalculate_used_equal() const {\n+inline void G1CollectedHeap::\n+assert_used_and_recalculate_used_equal(G1CollectedHeap* g1h) {\n@@ -364,2 +365,2 @@\n-  size_t cur_used_bytes = used();\n-  size_t recal_used_bytes = recalculate_used();\n+  size_t cur_used_bytes = g1h->used();\n+  size_t recal_used_bytes = g1h->recalculate_used();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -99,1 +99,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -128,1 +128,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -236,1 +236,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -505,1 +505,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -628,1 +628,1 @@\n-    assert_at_safepoint_on_vm_thread();\n+    G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -794,1 +794,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -867,1 +867,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -1306,1 +1306,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -1525,1 +1525,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -425,1 +425,1 @@\n-  assert_heap_locked_or_at_safepoint(true \/* should_be_vm_thread *\/);\n+  G1CollectedHeap::assert_heap_locked_or_at_safepoint(true \/* should_be_vm_thread *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-  assert_heap_locked_or_at_safepoint(true);\n+  G1CollectedHeap::assert_heap_locked_or_at_safepoint(true);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArenaFreeMemoryTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-  assert_used_and_recalculate_used_equal(_g1h);\n+  G1CollectedHeap::assert_used_and_recalculate_used_equal(_g1h);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1015,1 +1015,1 @@\n-  assert_used_and_recalculate_used_equal(_g1h);\n+  G1CollectedHeap::assert_used_and_recalculate_used_equal(_g1h);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}