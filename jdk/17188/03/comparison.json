{"files":[{"patch":"@@ -127,1 +127,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-  \/\/ These are macros so that, if the assert fires, we get the correct\n+  \/\/ These are assert functions so that, if the assert fires, we get the correct\n@@ -311,0 +311,8 @@\n+public:\n+  inline static void assert_heap_locked() NOT_DEBUG_RETURN;\n+  inline static void assert_heap_locked_or_at_safepoint(bool should_be_vm_thread) NOT_DEBUG_RETURN;\n+  inline static void assert_heap_locked_and_not_at_safepoint() NOT_DEBUG_RETURN;\n+  inline static void assert_heap_not_locked() NOT_DEBUG_RETURN;\n+  inline static void assert_heap_not_locked_and_not_at_safepoint() NOT_DEBUG_RETURN;\n+  inline static void assert_at_safepoint_on_vm_thread() NOT_DEBUG_RETURN;\n+  inline static void assert_used_and_recalculate_used_equal(G1CollectedHeap* g1h) NOT_DEBUG_RETURN;\n@@ -312,64 +320,1 @@\n-#define heap_locking_asserts_params(_extra_message_)                          \\\n-  \"%s : Heap_lock locked: %s, at safepoint: %s, is VM thread: %s\",            \\\n-  (_extra_message_),                                                          \\\n-  BOOL_TO_STR(Heap_lock->owned_by_self()),                                    \\\n-  BOOL_TO_STR(SafepointSynchronize::is_at_safepoint()),                       \\\n-  BOOL_TO_STR(Thread::current()->is_VM_thread())\n-\n-#define assert_heap_locked()                                                  \\\n-  do {                                                                        \\\n-    assert(Heap_lock->owned_by_self(),                                        \\\n-           heap_locking_asserts_params(\"should be holding the Heap_lock\"));   \\\n-  } while (0)\n-\n-#define assert_heap_locked_or_at_safepoint(_should_be_vm_thread_)             \\\n-  do {                                                                        \\\n-    assert(Heap_lock->owned_by_self() ||                                      \\\n-           (SafepointSynchronize::is_at_safepoint() &&                        \\\n-             ((_should_be_vm_thread_) == Thread::current()->is_VM_thread())), \\\n-           heap_locking_asserts_params(\"should be holding the Heap_lock or \"  \\\n-                                        \"should be at a safepoint\"));         \\\n-  } while (0)\n-\n-#define assert_heap_locked_and_not_at_safepoint()                             \\\n-  do {                                                                        \\\n-    assert(Heap_lock->owned_by_self() &&                                      \\\n-                                    !SafepointSynchronize::is_at_safepoint(), \\\n-          heap_locking_asserts_params(\"should be holding the Heap_lock and \"  \\\n-                                       \"should not be at a safepoint\"));      \\\n-  } while (0)\n-\n-#define assert_heap_not_locked()                                              \\\n-  do {                                                                        \\\n-    assert(!Heap_lock->owned_by_self(),                                       \\\n-        heap_locking_asserts_params(\"should not be holding the Heap_lock\"));  \\\n-  } while (0)\n-\n-#define assert_heap_not_locked_and_not_at_safepoint()                         \\\n-  do {                                                                        \\\n-    assert(!Heap_lock->owned_by_self() &&                                     \\\n-                                    !SafepointSynchronize::is_at_safepoint(), \\\n-      heap_locking_asserts_params(\"should not be holding the Heap_lock and \"  \\\n-                                   \"should not be at a safepoint\"));          \\\n-  } while (0)\n-\n-#define assert_at_safepoint_on_vm_thread()                                        \\\n-  do {                                                                            \\\n-    assert_at_safepoint();                                                        \\\n-    assert(Thread::current_or_null() != nullptr, \"no current thread\");            \\\n-    assert(Thread::current()->is_VM_thread(), \"current thread is not VM thread\"); \\\n-  } while (0)\n-\n-#ifdef ASSERT\n-#define assert_used_and_recalculate_used_equal(g1h)                           \\\n-  do {                                                                        \\\n-    size_t cur_used_bytes = g1h->used();                                      \\\n-    size_t recal_used_bytes = g1h->recalculate_used();                        \\\n-    assert(cur_used_bytes == recal_used_bytes, \"Used(\" SIZE_FORMAT \") is not\" \\\n-           \" same as recalculated used(\" SIZE_FORMAT \").\",                    \\\n-           cur_used_bytes, recal_used_bytes);                                 \\\n-  } while (0)\n-#else\n-#define assert_used_and_recalculate_used_equal(g1h) do {} while(0)\n-#endif\n-\n+private:\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":10,"deletions":65,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -316,0 +316,64 @@\n+#define heap_locking_asserts_params(_extra_message_)                          \\\n+  \"%s : Heap_lock locked: %s, at safepoint: %s, is VM thread: %s\",            \\\n+  (_extra_message_),                                                          \\\n+  BOOL_TO_STR(Heap_lock->owned_by_self()),                                    \\\n+  BOOL_TO_STR(SafepointSynchronize::is_at_safepoint()),                       \\\n+  BOOL_TO_STR(Thread::current()->is_VM_thread())\n+\n+DEBUG_ONLY(\n+inline void G1CollectedHeap::assert_heap_locked() {\n+  assert(Heap_lock->owned_by_self(),\n+          heap_locking_asserts_params(\"should be holding the Heap_lock\"));\n+})\n+\n+DEBUG_ONLY(\n+inline void G1CollectedHeap::\n+assert_heap_locked_or_at_safepoint(bool should_be_vm_thread) {\n+  assert(Heap_lock->owned_by_self() ||\n+          (SafepointSynchronize::is_at_safepoint() &&\n+            ((should_be_vm_thread) == Thread::current()->is_VM_thread())),\n+          heap_locking_asserts_params(\"should be holding the Heap_lock or \"\n+                                      \"should be at a safepoint\"));\n+})\n+\n+DEBUG_ONLY(\n+inline void G1CollectedHeap::assert_heap_locked_and_not_at_safepoint() {\n+  assert(Heap_lock->owned_by_self() &&\n+                                  !SafepointSynchronize::is_at_safepoint(),\n+        heap_locking_asserts_params(\"should be holding the Heap_lock and \"\n+                                      \"should not be at a safepoint\"));\n+})\n+\n+DEBUG_ONLY(\n+inline void G1CollectedHeap::assert_heap_not_locked() {\n+  assert(!Heap_lock->owned_by_self(),\n+      heap_locking_asserts_params(\"should not be holding the Heap_lock\"));\n+})\n+\n+DEBUG_ONLY(\n+inline void G1CollectedHeap::assert_heap_not_locked_and_not_at_safepoint() {\n+  assert(!Heap_lock->owned_by_self() &&\n+                                  !SafepointSynchronize::is_at_safepoint(),\n+    heap_locking_asserts_params(\"should not be holding the Heap_lock and \"\n+                                  \"should not be at a safepoint\"));\n+})\n+\n+DEBUG_ONLY(\n+inline void G1CollectedHeap::assert_at_safepoint_on_vm_thread() {\n+  assert_at_safepoint();\n+  assert(Thread::current_or_null() != nullptr, \"no current thread\");\n+  assert(Thread::current()->is_VM_thread(), \"current thread is not VM thread\");\n+})\n+\n+DEBUG_ONLY(\n+inline void G1CollectedHeap::\n+assert_used_and_recalculate_used_equal(G1CollectedHeap* g1h) {\n+#ifdef ASSERT\n+  size_t cur_used_bytes = g1h->used();\n+  size_t recal_used_bytes = g1h->recalculate_used();\n+  assert(cur_used_bytes == recal_used_bytes, \"Used(\" SIZE_FORMAT \") is not\"\n+          \" same as recalculated used(\" SIZE_FORMAT \").\",\n+          cur_used_bytes, recal_used_bytes);\n+#endif\n+})\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -99,1 +99,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -128,1 +128,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -236,1 +236,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -505,1 +505,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -628,1 +628,1 @@\n-    assert_at_safepoint_on_vm_thread();\n+    G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -794,1 +794,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -867,1 +867,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -1306,1 +1306,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -1525,1 +1525,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n@@ -425,1 +425,1 @@\n-  assert_heap_locked_or_at_safepoint(true \/* should_be_vm_thread *\/);\n+  G1CollectedHeap::assert_heap_locked_or_at_safepoint(true \/* should_be_vm_thread *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-  assert_heap_locked_or_at_safepoint(true);\n+  G1CollectedHeap::assert_heap_locked_or_at_safepoint(true);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArenaFreeMemoryTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-  assert_used_and_recalculate_used_equal(_g1h);\n+  G1CollectedHeap::assert_used_and_recalculate_used_equal(_g1h);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  assert_at_safepoint_on_vm_thread();\n+  G1CollectedHeap::assert_at_safepoint_on_vm_thread();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1015,1 +1015,1 @@\n-  assert_used_and_recalculate_used_equal(_g1h);\n+  G1CollectedHeap::assert_used_and_recalculate_used_equal(_g1h);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}