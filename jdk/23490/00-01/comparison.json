{"files":[{"patch":"@@ -1994,0 +1994,4 @@\n+  if (thread->is_suspended()) {\n+    \/\/ suspend here if there is a suspend request\n+    ThreadBlockInVM tbivm(thread, true \/* allow suspend *\/);\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -707,3 +707,0 @@\n-  if (_handshakee->is_virtual()) {\n-    _lock.notify();\n-  }\n@@ -742,3 +739,0 @@\n-    if (_handshakee->is_virtual()) {\n-      _lock.notify();\n-    }\n@@ -795,11 +789,0 @@\n-\n-    if (st.did_suspend() && _handshakee->is_virtual()) {\n-      \/\/ Thread suspension works under JvmtiVTMSTransitionDisabler protection, so we need to wait\n-      \/\/ for virtual thread to reach a safe state before the JVMTI SuspendThread is returned.\n-      while (_handshakee->thread_state() != _thread_blocked &&\n-             _handshakee->thread_state() != _thread_in_native) {\n-        ThreadBlockInVM tbivm(self);\n-        MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n-        _lock.wait_without_safepoint_check(1);\n-      }\n-    }\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -707,5 +707,0 @@\n-  inline bool is_virtual() const {\n-    ContinuationEntry* ce = last_continuation();\n-    return ce != nullptr && ce->is_virtual_thread();\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}