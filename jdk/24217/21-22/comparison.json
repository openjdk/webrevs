{"files":[{"patch":"@@ -1,176 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.template_framework;\n-\n-\/**\n- * Represents a Template with filled arguments, ready for instantiation, either\n- * as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n- *\/\n-public sealed abstract class FilledTemplate implements Token\n-                                            permits FilledTemplate.ZeroArgs,\n-                                                    FilledTemplate.OneArgs,\n-                                                    FilledTemplate.TwoArgs,\n-                                                    FilledTemplate.ThreeArgs\n-{\n-    private FilledTemplate() {}\n-\n-    \/**\n-     * Represents a zero-argument {@link FilledTemplate}, already filled with arguments, ready for\n-     * instantiation either as a {@link Token} inside another {@link UnfilledTemplate} or\n-     * with {@link #render}.\n-     *\/\n-    public static final class ZeroArgs extends FilledTemplate implements Token, TemplateBinding.Bindable {\n-        private final UnfilledTemplate.ZeroArgs zeroArgs;\n-\n-        ZeroArgs(UnfilledTemplate.ZeroArgs zeroArgs) {\n-            this.zeroArgs = zeroArgs;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return zeroArgs.instantiate();\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {}\n-    }\n-\n-    \/**\n-     * Represents a one-argument {@link FilledTemplate}, already filled with arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n-     *\n-     * @param <A> The type of the (first) argument.\n-     *\/\n-    public static final class OneArgs<A> extends FilledTemplate implements Token {\n-        private final UnfilledTemplate.OneArgs<A> oneArgs;\n-        private final A a;\n-\n-        OneArgs(UnfilledTemplate.OneArgs<A> oneArgs, A a) {\n-            this.oneArgs = oneArgs;\n-            this.a = a;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return oneArgs.instantiate(a);\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {\n-            visitor.visit(oneArgs.arg0Name(), a);\n-        }\n-    }\n-\n-    \/**\n-     * Represents a two-argument {@link FilledTemplate}, already filled with arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n-     *\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     *\/\n-    public static final class TwoArgs<A, B> extends FilledTemplate implements Token {\n-        private final UnfilledTemplate.TwoArgs<A, B> twoArgs;\n-        private final A a;\n-        private final B b;\n-\n-        TwoArgs(UnfilledTemplate.TwoArgs<A, B> twoArgs, A a, B b) {\n-            this.twoArgs = twoArgs;\n-            this.a = a;\n-            this.b = b;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return twoArgs.instantiate(a, b);\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {\n-            visitor.visit(twoArgs.arg0Name(), a);\n-            visitor.visit(twoArgs.arg1Name(), b);\n-        }\n-    }\n-\n-    \/**\n-     * Represents a three-argument {@link FilledTemplate}, already filled with arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n-     *\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     * @param <C> The type of the second argument.\n-     *\/\n-    public static final class ThreeArgs<A, B, C> extends FilledTemplate implements Token {\n-        private final UnfilledTemplate.ThreeArgs<A, B, C> threeArgs;\n-        private final A a;\n-        private final B b;\n-        private final C c;\n-\n-        ThreeArgs(UnfilledTemplate.ThreeArgs<A, B, C> threeArgs, A a, B b, C c) {\n-            this.threeArgs = threeArgs;\n-            this.a = a;\n-            this.b = b;\n-            this.c = c;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return threeArgs.instantiate(a, b, c);\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {\n-            visitor.visit(threeArgs.arg0Name(), a);\n-            visitor.visit(threeArgs.arg1Name(), b);\n-            visitor.visit(threeArgs.arg2Name(), c);\n-        }\n-    }\n-\n-    abstract TemplateBody instantiate();\n-\n-    @FunctionalInterface\n-    interface ArgumentVisitor {\n-        void visit(String name, Object value);\n-    }\n-\n-    abstract void visitArguments(ArgumentVisitor visitor);\n-\n-    \/**\n-     * Renders the {@link FilledTemplate} to a {@link String}.\n-     *\n-     * @return The {@link FilledTemplate} rendered to a {@link String}.\n-     *\/\n-    public final String render() {\n-        return Renderer.render(this);\n-    }\n-\n-    \/**\n-     * Renders the {@link FilledTemplate} to a {@link String}.\n-     *\n-     * @param fuel The amount of fuel provided for recursive Template instantiations.\n-     * @return The {@link FilledTemplate} rendered to a {@link String}.\n-     *\/\n-    public final String render(float fuel) {\n-        return Renderer.render(this, fuel);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/FilledTemplate.java","additions":0,"deletions":176,"binary":false,"changes":176,"status":"deleted"},{"patch":"@@ -83,1 +83,1 @@\n-     * Inserts a {@link FilledTemplate} to the innermost location where this {@link Hook} was {@link #set}.\n+     * Inserts a {@link TemplateToken} to the innermost location where this {@link Hook} was {@link #set}.\n@@ -86,1 +86,1 @@\n-     * @param filledTemplate The Template with applied arguments to be inserted at the {@link Hook}.\n+     * @param templateToken The Template with applied arguments to be inserted at the {@link Hook}.\n@@ -89,2 +89,2 @@\n-    public Token insert(FilledTemplate filledTemplate) {\n-        return new HookInsertToken(this, filledTemplate);\n+    public Token insert(TemplateToken templateToken) {\n+        return new HookInsertToken(this, templateToken);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Hook.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-record HookInsertToken(Hook hook, FilledTemplate filledTemplate) implements Token {}\n+record HookInsertToken(Hook hook, TemplateToken templateToken) implements Token {}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/HookInsertToken.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-    static String render(FilledTemplate filledTemplate) {\n-        return render(filledTemplate, Template.DEFAULT_FUEL);\n+    static String render(TemplateToken templateToken) {\n+        return render(templateToken, Template.DEFAULT_FUEL);\n@@ -77,1 +77,1 @@\n-    static String render(FilledTemplate filledTemplate, float fuel) {\n+    static String render(TemplateToken templateToken, float fuel) {\n@@ -84,1 +84,1 @@\n-            renderer.renderFilledTemplate(filledTemplate);\n+            renderer.renderTemplateToken(templateToken);\n@@ -189,1 +189,1 @@\n-    private void renderFilledTemplate(FilledTemplate filledTemplate) {\n+    private void renderTemplateToken(TemplateToken templateToken) {\n@@ -193,2 +193,2 @@\n-        filledTemplate.visitArguments((name, value) -> addHashtagReplacement(name, format(value)));\n-        TemplateBody body = filledTemplate.instantiate();\n+        templateToken.visitArguments((name, value) -> addHashtagReplacement(name, format(value)));\n+        TemplateBody body = templateToken.instantiate();\n@@ -233,1 +233,1 @@\n-            case HookInsertToken(Hook hook, FilledTemplate t) -> {\n+            case HookInsertToken(Hook hook, TemplateToken t) -> {\n@@ -239,2 +239,2 @@\n-                \/\/ by the FilledTemplate can be collected, and hook insertions from it can still\n-                \/\/ be made to the hookCodeFrame before the code from the FilledTemplate is added to\n+                \/\/ by the TemplateToken can be collected, and hook insertions from it can still\n+                \/\/ be made to the hookCodeFrame before the code from the TemplateToken is added to\n@@ -243,1 +243,1 @@\n-                \/\/ the hookCodeFrame, and are not limited to the CodeFrame for the FilledTemplate.\n+                \/\/ the hookCodeFrame, and are not limited to the CodeFrame for the TemplateToken.\n@@ -246,1 +246,1 @@\n-                renderFilledTemplate(t);\n+                renderTemplateToken(t);\n@@ -253,1 +253,1 @@\n-            case FilledTemplate t -> {\n+            case TemplateToken t -> {\n@@ -258,1 +258,1 @@\n-                renderFilledTemplate(t);\n+                renderTemplateToken(t);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Renderer.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n- *     \/\/ list of lists of FilledTemplate:\n+ *     \/\/ list of lists of (Template) Tokens:\n@@ -114,1 +114,1 @@\n- *             testTemplate.fillWith(type.name(), operator, type.generator())).toList()\n+ *             testTemplate.asToken(type.name(), operator, type.generator())).toList()\n@@ -137,1 +137,1 @@\n- * return classTemplate.fillWith(types).render();\n+ * return classTemplate.render(types);\n@@ -144,3 +144,2 @@\n- * {@link Template#make(String, Function)}. At first, the Template is an {@link UnfilledTemplate}, i.e.\n- * a Template where the arguments are not yet filled. For each number of arguments there is an implementation\n- * (e.g. {@code UnfilledTemplate.TwoArgs} for two arguments). This allows the use of Generics for the\n+ * {@link Template#make(String, Function)}. For each number of arguments there is an implementation\n+ * (e.g. {@code Template.TwoArgs} for two arguments). This allows the use of Generics for the\n@@ -150,8 +149,3 @@\n- * Given an {@link UnfilledTemplate}, one must apply the required number of arguments, i.e. fill\n- * the Template, to arrive at a {@link FilledTemplate}. Note: {@link Template#make(Supplier)},\n- * i.e. making a Template with zero arguments directly returns a {@link FilledTemplate},\n- * because there are no arguments to be filled.\n- *\n- * <p>\n- * The {@link FilledTemplate} can then be used to render to String, or for nesting inside other\n- * Templates.\n+ * A {@link Template} can be rendered to a String (e.g. {@link Template.ZeroArgs#render()}).\n+ * Alternatively, we can generate a {@link Token} (e.g. {@link Template.ZeroArgs#asToken()}),\n+ * and use the {@link Token} inside another {@link Template#body}.\n@@ -174,9 +168,4 @@\n- * To render a Template to a {@link String}, one first has to apply the arguments (e.g. with\n- * {@link UnfilledTemplate.TwoArgs#fillWith}) and then the resulting {@link FilledTemplate} can either be used as a\n- * {@link Token} inside another {@link Template#body}, or rendered to a {@link String} with {@link FilledTemplate#render}.\n- *\n- * <p>\n- * A {@link FilledTemplate} can be used directly as a {@link Token} inside the {@link Template#body} to\n- * nest the Templates. Alternatively, code can be {@link Hook#insert}ed to where a {@link Hook}\n- * was {@link Hook#set} earlier (in some outer scope of the code). For example, while generating code in\n- * a method, one can reach out to the scope of the class, and insert a new field, or define a utility method.\n+ * A {@link TemplateToken} can not just be used in {@link Template#body}, but but it can also be\n+ * {@link Hook#insert}ed to where a {@link Hook} was {@link Hook#set} earlier (in some outer scope of the code).\n+ * For example, while generating code in a method, one can reach out to the scope of the class, and insert a\n+ * new field, or define a utility method.\n@@ -204,1 +193,217 @@\n-public interface Template {\n+public sealed interface Template permits Template.ZeroArgs,\n+                                         Template.OneArgs,\n+                                         Template.TwoArgs,\n+                                         Template.ThreeArgs {\n+\n+    \/**\n+     * A {@link Template} with no arguments.\n+     *\n+     * @param function The {@link Supplier} that creates the {@link TemplateBody}.\n+     *\/\n+    public record ZeroArgs(Supplier<TemplateBody> function) implements Template {\n+        TemplateBody instantiate() {\n+            return function.get();\n+        }\n+\n+        \/**\n+         * Creates a {@link TemplateToken} which can be used as a {@link Token} inside\n+         * a {@link Template} for nested code generation.\n+         *\n+         * @return The template all (zero) arguments applied.\n+         *\/\n+        public TemplateToken asToken() {\n+            return new TemplateToken.ZeroArgs(this);\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render() {\n+            return new TemplateToken.ZeroArgs(this).render();\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @param fuel The amount of fuel provided for recursive Template instantiations.\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render(float fuel) {\n+            return new TemplateToken.ZeroArgs(this).render(fuel);\n+        }\n+    }\n+\n+    \/**\n+     * A {@link Template} with one argument.\n+     *\n+     * @param arg0Name The name of the (first) argument, used for hashtag replacements in the {@link Template}.\n+     * @param <A> The type of the (first) argument.\n+     * @param function The {@link Function} that creates the {@link TemplateBody} given the template argument.\n+     *\/\n+    public record OneArgs<A>(String arg0Name, Function<A, TemplateBody> function) implements Template {\n+        TemplateBody instantiate(A a) {\n+            return function.apply(a);\n+        }\n+\n+        \/**\n+         * Creates a {@link TemplateToken} which can be used as a {@link Token} inside\n+         * a {@link Template} for nested code generation.\n+         *\n+         * @param a The value for the (first) argument.\n+         * @return The template its argument applied.\n+         *\/\n+        public TemplateToken asToken(A a) {\n+            return new TemplateToken.OneArgs<>(this, a);\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @param a The value for the first argument.\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render(A a) {\n+            return new TemplateToken.OneArgs(this, a).render();\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @param a The value for the first argument.\n+         * @param fuel The amount of fuel provided for recursive Template instantiations.\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render(float fuel, A a) {\n+            return new TemplateToken.OneArgs(this, a).render(fuel);\n+        }\n+    }\n+\n+    \/**\n+     * A {@link Template} with two arguments.\n+     *\n+     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link Template}.\n+     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link Template}.\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     * @param function The {@link BiFunction} that creates the {@link TemplateBody} given the template arguments.\n+     *\/\n+    public record TwoArgs<A, B>(String arg0Name, String arg1Name, BiFunction<A, B, TemplateBody> function) implements Template {\n+        TemplateBody instantiate(A a, B b) {\n+            return function.apply(a, b);\n+        }\n+\n+        \/**\n+         * Creates a {@link TemplateToken} which can be used as a {@link Token} inside\n+         * a {@link Template} for nested code generation.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @return The template all (two) arguments applied.\n+         *\/\n+        public TemplateToken asToken(A a, B b) {\n+            return new TemplateToken.TwoArgs<>(this, a, b);\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render(A a, B b) {\n+            return new TemplateToken.TwoArgs(this, a, b).render();\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @param fuel The amount of fuel provided for recursive Template instantiations.\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render(float fuel, A a, B b) {\n+            return new TemplateToken.TwoArgs(this, a, b).render(fuel);\n+        }\n+    }\n+\n+    \/**\n+     * Interface for function with three arguments.\n+     *\n+     * @param <T> Type of the first argument.\n+     * @param <U> Type of the second argument.\n+     * @param <V> Type of the third argument.\n+     * @param <R> Type of the return value.\n+     *\/\n+    @FunctionalInterface\n+    public interface TriFunction<T, U, V, R> {\n+\n+        \/**\n+         * Function definition for the three argument functions.\n+         *\n+         * @param t The first argument.\n+         * @param u The second argument.\n+         * @param v The third argument.\n+         * @return Return value of the three argument function.\n+         *\/\n+        R apply(T t, U u, V v);\n+    }\n+\n+    \/**\n+     * A {@link Template} with three arguments.\n+     *\n+     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link Template}.\n+     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link Template}.\n+     * @param arg2Name The name of the third argument, used for hashtag replacements in the {@link Template}.\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     * @param <C> The type of the third argument.\n+     * @param function The function with three arguments that creates the {@link TemplateBody} given the template arguments.\n+     *\/\n+    public record ThreeArgs<A, B, C>(String arg0Name, String arg1Name, String arg2Name, TriFunction<A, B, C, TemplateBody> function) implements Template {\n+        TemplateBody instantiate(A a, B b, C c) {\n+            return function.apply(a, b, c);\n+        }\n+\n+        \/**\n+         * Creates a {@link TemplateToken} which can be used as a {@link Token} inside\n+         * a {@link Template} for nested code generation.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @param c The value for the third argument.\n+         * @return The template all (three) arguments applied.\n+         *\/\n+        public TemplateToken asToken(A a, B b, C c) {\n+            return new TemplateToken.ThreeArgs<>(this, a, b, c);\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @param c The value for the third argument.\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render(A a, B b, C c) {\n+            return new TemplateToken.ThreeArgs(this, a, b, c).render();\n+        }\n+\n+        \/**\n+         * Renders the {@link Template} to String.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @param c The value for the third argument.\n+         * @param fuel The amount of fuel provided for recursive Template instantiations.\n+         * @return The String, resulting from rendering the {@link Template}.\n+         *\/\n+        public String render(float fuel, A a, B b, C c) {\n+            return new TemplateToken.ThreeArgs(this, a, b, c).render(fuel);\n+        }\n+    }\n+\n@@ -207,1 +412,1 @@\n-     * Creates a {@link FilledTemplate} with no arguments.\n+     * Creates a {@link Template} with no arguments.\n@@ -221,1 +426,1 @@\n-     * @return A {@link FilledTemplate} with zero arguments.\n+     * @return A {@link Template} with zero arguments.\n@@ -223,2 +428,2 @@\n-    static FilledTemplate.ZeroArgs make(Supplier<TemplateBody> body) {\n-        return new UnfilledTemplate.ZeroArgs(body).fillWithNothing();\n+    static Template.ZeroArgs make(Supplier<TemplateBody> body) {\n+        return new Template.ZeroArgs(body);\n@@ -228,1 +433,1 @@\n-     * Creates an {@link UnfilledTemplate} with one argument.\n+     * Creates a {@link Template} with one argument.\n@@ -248,1 +453,1 @@\n-     * @return An {@link UnfilledTemplate} with one argument.\n+     * @return An {@link Template} with one argument.\n@@ -250,2 +455,2 @@\n-    static <A> UnfilledTemplate.OneArgs<A> make(String arg0Name, Function<A, TemplateBody> body) {\n-        return new UnfilledTemplate.OneArgs<>(arg0Name, body);\n+    static <A> Template.OneArgs<A> make(String arg0Name, Function<A, TemplateBody> body) {\n+        return new Template.OneArgs<>(arg0Name, body);\n@@ -255,1 +460,1 @@\n-     * Creates an {@link UnfilledTemplate} with two arguments.\n+     * Creates a {@link Template} with two arguments.\n@@ -277,1 +482,1 @@\n-     * @return An {@link UnfilledTemplate} with two arguments.\n+     * @return A {@link Template} with two arguments.\n@@ -279,2 +484,2 @@\n-    static <A, B> UnfilledTemplate.TwoArgs<A, B> make(String arg0Name, String arg1Name, BiFunction<A, B, TemplateBody> body) {\n-        return new UnfilledTemplate.TwoArgs<>(arg0Name, arg1Name, body);\n+    static <A, B> Template.TwoArgs<A, B> make(String arg0Name, String arg1Name, BiFunction<A, B, TemplateBody> body) {\n+        return new Template.TwoArgs<>(arg0Name, arg1Name, body);\n@@ -284,1 +489,1 @@\n-     * Creates an {@link UnfilledTemplate} with three arguments.\n+     * Creates a {@link Template} with three arguments.\n@@ -294,1 +499,1 @@\n-     * @return An {@link UnfilledTemplate} with three arguments.\n+     * @return A {@link Template} with three arguments.\n@@ -296,2 +501,2 @@\n-    static <A, B, C> UnfilledTemplate.ThreeArgs<A, B, C> make(String arg0Name, String arg1Name, String arg2Name, UnfilledTemplate.TriFunction<A, B, C, TemplateBody> body) {\n-        return new UnfilledTemplate.ThreeArgs<>(arg0Name, arg1Name, arg2Name, body);\n+    static <A, B, C> Template.ThreeArgs<A, B, C> make(String arg0Name, String arg1Name, String arg2Name, Template.TriFunction<A, B, C, TemplateBody> body) {\n+        return new Template.ThreeArgs<>(arg0Name, arg1Name, arg2Name, body);\n@@ -312,1 +517,1 @@\n-     *     nestedTemplate.fillWith(42)\n+     *     nestedTemplate.asToken(42)\n@@ -339,1 +544,1 @@\n-     *     otherTemplate.fillWith($(\"var\"))\n+     *     otherTemplate.asToken($(\"var\"))\n@@ -399,1 +604,1 @@\n-     * Default amount of fuel for {@link FilledTemplate#render}. It guides the nesting depth of Templates.\n+     * Default amount of fuel for Template rendering. It guides the nesting depth of Templates.\n@@ -418,1 +623,1 @@\n-     * the recursive use of Templates. We {@link FilledTemplate#render} with {@code 30} total fuel, and spend {@code 5} fuel at each recursion level.\n+     * the recursive use of Templates. We {@link Template.OneArgs#render} with {@code 30} total fuel, and spend {@code 5} fuel at each recursion level.\n@@ -420,1 +625,1 @@\n-     * var binding = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n+     * var binding = new TemplateBinding<Template.OneArgs<Integer>>();\n@@ -427,1 +632,1 @@\n-     *     (fuel() > 0) ? binding.get().fillWith(depth + 1)\n+     *     (fuel() > 0) ? binding.get().asToken(depth + 1)\n@@ -431,1 +636,1 @@\n-     * String code = template.fillWith(0).render(30.0f);\n+     * String code = template.render(30.0f, 0);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":252,"deletions":47,"binary":false,"changes":299,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-public class TemplateBinding<T extends TemplateBinding.Bindable> {\n+public class TemplateBinding<T extends Template> {\n@@ -40,8 +40,0 @@\n-    \/**\n-     * A collection of Bindable types.\n-     *\/\n-    public sealed interface Bindable permits UnfilledTemplate.OneArgs,\n-                                             UnfilledTemplate.TwoArgs,\n-                                             UnfilledTemplate.ThreeArgs,\n-                                             FilledTemplate.ZeroArgs {}\n-\n@@ -66,1 +58,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateBinding.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,8 +30,8 @@\n- * The {@link TemplateFrame} is the frame for a {@link FilledTemplate}. It ensures\n- * that each template use has its own unique {@link id} used to deconflict names\n- * using {@link Template#$}. It also has a set of hashtag replacements, which combine the\n- * key-value pairs from the template argument and the {@link Template#let} definitions.\n- * The {@link parent} relationship provides a trace for the use chain of templates.\n- * The {@link fuel} is reduced over this chain, to give a heuristic on how much time\n- * is spent on the code from the template corresponding to the frame, and to give a\n- * termination criterion to avoid nesting templates too deeply.\n+ * The {@link TemplateFrame} is the frame for a {@link Template}, i.e. the corresponding\n+ * {@link TemplateToken}. It ensures that each template use has its own unique {@link id}\n+ * used to deconflict names using {@link Template#$}. It also has a set of hashtag\n+ * replacements, which combine the key-value pairs from the template argument and the\n+ * {@link Template#let} definitions. The {@link parent} relationship provides a trace\n+ * for the use chain of templates. The {@link fuel} is reduced over this chain, to give\n+ * a heuristic on how much time is spent on the code from the template corresponding to\n+ * the frame, and to give a termination criterion to avoid nesting templates too deeply.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateFrame.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.template_framework;\n+\n+\/**\n+ * Represents a Template with filled arguments, ready for instantiation, either\n+ * as a {@link Token} inside another {@link Template} or with {@link #render}.\n+ *\/\n+public sealed abstract class TemplateToken implements Token\n+                                           permits TemplateToken.ZeroArgs,\n+                                                   TemplateToken.OneArgs,\n+                                                   TemplateToken.TwoArgs,\n+                                                   TemplateToken.ThreeArgs\n+{\n+    private TemplateToken() {}\n+\n+    \/**\n+     * Represents a zero-argument {@link TemplateToken}, already filled with arguments, ready for\n+     * instantiation either as a {@link Token} inside another {@link Template} or\n+     * with {@link #render}.\n+     *\/\n+    static final class ZeroArgs extends TemplateToken implements Token {\n+        private final Template.ZeroArgs zeroArgs;\n+\n+        ZeroArgs(Template.ZeroArgs zeroArgs) {\n+            this.zeroArgs = zeroArgs;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return zeroArgs.instantiate();\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {}\n+    }\n+\n+    \/**\n+     * Represents a one-argument {@link TemplateToken}, already filled with arguments, ready for instantiation\n+     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n+     *\n+     * @param <A> The type of the (first) argument.\n+     *\/\n+    static final class OneArgs<A> extends TemplateToken implements Token {\n+        private final Template.OneArgs<A> oneArgs;\n+        private final A a;\n+\n+        OneArgs(Template.OneArgs<A> oneArgs, A a) {\n+            this.oneArgs = oneArgs;\n+            this.a = a;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return oneArgs.instantiate(a);\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {\n+            visitor.visit(oneArgs.arg0Name(), a);\n+        }\n+    }\n+\n+    \/**\n+     * Represents a two-argument {@link TemplateToken}, already filled with arguments, ready for instantiation\n+     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n+     *\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     *\/\n+    static final class TwoArgs<A, B> extends TemplateToken implements Token {\n+        private final Template.TwoArgs<A, B> twoArgs;\n+        private final A a;\n+        private final B b;\n+\n+        TwoArgs(Template.TwoArgs<A, B> twoArgs, A a, B b) {\n+            this.twoArgs = twoArgs;\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return twoArgs.instantiate(a, b);\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {\n+            visitor.visit(twoArgs.arg0Name(), a);\n+            visitor.visit(twoArgs.arg1Name(), b);\n+        }\n+    }\n+\n+    \/**\n+     * Represents a three-argument {@link TemplateToken}, already filled with arguments, ready for instantiation\n+     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n+     *\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     * @param <C> The type of the second argument.\n+     *\/\n+    static final class ThreeArgs<A, B, C> extends TemplateToken implements Token {\n+        private final Template.ThreeArgs<A, B, C> threeArgs;\n+        private final A a;\n+        private final B b;\n+        private final C c;\n+\n+        ThreeArgs(Template.ThreeArgs<A, B, C> threeArgs, A a, B b, C c) {\n+            this.threeArgs = threeArgs;\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return threeArgs.instantiate(a, b, c);\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {\n+            visitor.visit(threeArgs.arg0Name(), a);\n+            visitor.visit(threeArgs.arg1Name(), b);\n+            visitor.visit(threeArgs.arg2Name(), c);\n+        }\n+    }\n+\n+    abstract TemplateBody instantiate();\n+\n+    @FunctionalInterface\n+    interface ArgumentVisitor {\n+        void visit(String name, Object value);\n+    }\n+\n+    abstract void visitArguments(ArgumentVisitor visitor);\n+\n+    final String render() {\n+        return Renderer.render(this);\n+    }\n+\n+    final String render(float fuel) {\n+        return Renderer.render(this, fuel);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateToken.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -37,5 +37,5 @@\n-                               FilledTemplate,\n-                               FilledTemplate.ZeroArgs,\n-                               FilledTemplate.OneArgs,\n-                               FilledTemplate.TwoArgs,\n-                               FilledTemplate.ThreeArgs,\n+                               TemplateToken,\n+                               TemplateToken.ZeroArgs,\n+                               TemplateToken.OneArgs,\n+                               TemplateToken.TwoArgs,\n+                               TemplateToken.ThreeArgs,\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Token.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,170 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.template_framework;\n-\n-import java.util.function.BiFunction;\n-import java.util.function.Function;\n-import java.util.function.Supplier;\n-\n-\/**\n- * Represents a Template with arguments that are not yet filled, but can be filled\n- * by calling {@code fillWith} (e.g. {@link OneArgs#fillWith(Object)} to obtain\n- * a {@link FilledTemplate}.\n- *\/\n-public interface UnfilledTemplate {\n-    \/**\n-     * An {@link UnfilledTemplate} with no arguments.\n-     *\n-     * @param function The {@link Supplier} that creates the {@link TemplateBody}.\n-     *\/\n-    public record ZeroArgs(Supplier<TemplateBody> function) implements UnfilledTemplate {\n-        TemplateBody instantiate() {\n-            return function.get();\n-        }\n-\n-        \/**\n-         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n-         * an {@link UnfilledTemplate} for nested code generation, and it can also be used with\n-         * {@link FilledTemplate#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @return The template all (zero) arguments applied.\n-         *\/\n-        FilledTemplate.ZeroArgs fillWithNothing() {\n-            return new FilledTemplate.ZeroArgs(this);\n-        }\n-    }\n-\n-    \/**\n-     * An {@link UnfilledTemplate} with one argument.\n-     *\n-     * @param arg0Name The name of the (first) argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n-     * @param <A> The type of the (first) argument.\n-     * @param function The {@link Function} that creates the {@link TemplateBody} given the template argument.\n-     *\/\n-    public record OneArgs<A>(String arg0Name, Function<A, TemplateBody> function)\n-            implements UnfilledTemplate, TemplateBinding.Bindable {\n-        TemplateBody instantiate(A a) {\n-            return function.apply(a);\n-        }\n-\n-        \/**\n-         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n-         * an {@link UnfilledTemplate} for nested code generation, and it can also be used with\n-         * {@link FilledTemplate#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @param a The value for the (first) argument.\n-         * @return The template its argument applied.\n-         *\/\n-        public FilledTemplate fillWith(A a) {\n-            return new FilledTemplate.OneArgs<>(this, a);\n-        }\n-    }\n-\n-    \/**\n-     * An {@link UnfilledTemplate} with two arguments.\n-     *\n-     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n-     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     * @param function The {@link BiFunction} that creates the {@link TemplateBody} given the template arguments.\n-     *\/\n-    public record TwoArgs<A, B>(String arg0Name, String arg1Name, BiFunction<A, B, TemplateBody> function)\n-            implements UnfilledTemplate, TemplateBinding.Bindable {\n-        TemplateBody instantiate(A a, B b) {\n-            return function.apply(a, b);\n-        }\n-\n-        \/**\n-         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n-         * an {@link UnfilledTemplate} for nested code generation, and it can also be used with\n-         * {@link FilledTemplate#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @param a The value for the first argument.\n-         * @param b The value for the second argument.\n-         * @return The template all (two) arguments applied.\n-         *\/\n-        public FilledTemplate fillWith(A a, B b) {\n-            return new FilledTemplate.TwoArgs<>(this, a, b);\n-        }\n-    }\n-\n-    \/**\n-     * Interface for function with three arguments.\n-     *\n-     * @param <T> Type of the first argument.\n-     * @param <U> Type of the second argument.\n-     * @param <V> Type of the third argument.\n-     * @param <R> Type of the return value.\n-     *\/\n-    @FunctionalInterface\n-    public interface TriFunction<T, U, V, R> {\n-\n-        \/**\n-         * Function definition for the three argument functions.\n-         *\n-         * @param t The first argument.\n-         * @param u The second argument.\n-         * @param v The third argument.\n-         * @return Return value of the three argument function.\n-         *\/\n-        R apply(T t, U u, V v);\n-    }\n-\n-    \/**\n-     * An {@link UnfilledTemplate} with three arguments.\n-     *\n-     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n-     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n-     * @param arg2Name The name of the third argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     * @param <C> The type of the third argument.\n-     * @param function The function with three arguments that creates the {@link TemplateBody} given the template arguments.\n-     *\/\n-    public record ThreeArgs<A, B, C>(String arg0Name, String arg1Name, String arg2Name, TriFunction<A, B, C, TemplateBody> function)\n-            implements UnfilledTemplate, TemplateBinding.Bindable {\n-        TemplateBody instantiate(A a, B b, C c) {\n-            return function.apply(a, b, c);\n-        }\n-\n-        \/**\n-         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n-         * an {@link UnfilledTemplate} for nested code generation, and it can also be used with\n-         * {@link FilledTemplate#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @param a The value for the first argument.\n-         * @param b The value for the second argument.\n-         * @param c The value for the third argument.\n-         * @return The template all (three) arguments applied.\n-         *\/\n-        public FilledTemplate fillWith(A a, B b, C c) {\n-            return new FilledTemplate.ThreeArgs<>(this, a, b, c);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/UnfilledTemplate.java","additions":0,"deletions":170,"binary":false,"changes":170,"status":"deleted"},{"patch":"@@ -141,1 +141,1 @@\n-            \/\/ list of lists of FilledTemplate:\n+            \/\/ list of lists of TemplateToken:\n@@ -144,1 +144,1 @@\n-                    testTemplate.fillWith(type.name(), operator, type.generator())).toList()\n+                    testTemplate.asToken(type.name(), operator, type.generator())).toList()\n@@ -163,1 +163,1 @@\n-        return classTemplate.fillWith(types).render();\n+        return classTemplate.render(types);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestAdvanced.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        return template.fillWith(42, \"7\").render();\n+        return template.render(42, \"7\");\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestSimple.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import compiler.lib.template_framework.UnfilledTemplate;\n@@ -159,3 +158,3 @@\n-                    templateHello,\n-                    templateCompare.fillWith(7),\n-                    templateCompare.fillWith(42),\n+                    templateHello.asToken(),\n+                    templateCompare.asToken(7),\n+                    templateCompare.asToken(42),\n@@ -198,1 +197,1 @@\n-                    template1.fillWith(y)\n+                    template1.asToken(y)\n@@ -217,1 +216,1 @@\n-            template3.fillWith($(\"var\"), 42),\n+            template3.asToken($(\"var\"), 42),\n@@ -230,5 +229,5 @@\n-                    template1.fillWith(1),\n-                    template1.fillWith(7),\n-                    template2.fillWith(2),\n-                    template2.fillWith(5),\n-                    template4,\n+                    template1.asToken(1),\n+                    template1.asToken(7),\n+                    template2.asToken(2),\n+                    template2.asToken(5),\n+                    template4.asToken(),\n@@ -264,1 +263,1 @@\n-            myHook.insert(template1.fillWith($(\"field\"), x)),\n+            myHook.insert(template1.asToken($(\"field\"), x)),\n@@ -285,2 +284,2 @@\n-                    template2.fillWith(5),\n-                    template2.fillWith(7),\n+                    template2.asToken(5),\n+                    template2.asToken(7),\n@@ -321,2 +320,2 @@\n-            Hooks.CLASS_HOOK.insert(templateStaticField.fillWith($(\"field\"), 5)),\n-            Hooks.METHOD_HOOK.insert(templateLocalVariable.fillWith($(\"var\"), 11)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.asToken($(\"field\"), 5)),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.asToken($(\"var\"), 11)),\n@@ -347,1 +346,1 @@\n-                    templateMethodBody,\n+                    templateMethodBody.asToken(),\n@@ -364,1 +363,1 @@\n-                    templateMethodBody,\n+                    templateMethodBody.asToken(),\n@@ -387,1 +386,1 @@\n-        var binding1 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n+        var binding1 = new TemplateBinding<Template.OneArgs<Integer>>();\n@@ -398,1 +397,1 @@\n-            (fuel() > 0) ? binding1.get().fillWith(depth + 1)\n+            (fuel() > 0) ? binding1.get().asToken(depth + 1)\n@@ -414,1 +413,1 @@\n-                    template1.fillWith(0),\n+                    template1.asToken(0),\n@@ -477,6 +476,6 @@\n-            templateStatus,\n-            Hooks.METHOD_HOOK.insert(templateLocalVariable.fillWith(myInt)),\n-            Hooks.METHOD_HOOK.insert(templateLocalVariable.fillWith(myLong)),\n-            Hooks.CLASS_HOOK.insert(templateStaticField.fillWith(myInt)),\n-            Hooks.CLASS_HOOK.insert(templateStaticField.fillWith(myLong)),\n-            templateStatus,\n+            templateStatus.asToken(),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.asToken(myInt)),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.asToken(myLong)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.asToken(myInt)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.asToken(myLong)),\n+            templateStatus.asToken(),\n@@ -484,3 +483,3 @@\n-            Collections.nCopies(5, templateSample.fillWith(myInt)),\n-            Collections.nCopies(5, templateSample.fillWith(myLong)),\n-            templateStatus,\n+            Collections.nCopies(5, templateSample.asToken(myInt)),\n+            Collections.nCopies(5, templateSample.asToken(myLong)),\n+            templateStatus.asToken(),\n@@ -496,1 +495,1 @@\n-            templateStatus,\n+            templateStatus.asToken(),\n@@ -498,3 +497,3 @@\n-            Collections.nCopies(5, templateSample.fillWith(myInt)),\n-            Collections.nCopies(5, templateSample.fillWith(myLong)),\n-            templateStatus,\n+            Collections.nCopies(5, templateSample.asToken(myInt)),\n+            Collections.nCopies(5, templateSample.asToken(myLong)),\n+            templateStatus.asToken(),\n@@ -523,1 +522,1 @@\n-                    templateMain,\n+                    templateMain.asToken(),\n@@ -540,1 +539,1 @@\n-                    templateOther,\n+                    templateOther.asToken(),\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":35,"deletions":36,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-            list.stream().map(info -> template1.fillWith(info)).toList(),\n+            list.stream().map(info -> template1.asToken(info)).toList(),\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-import compiler.lib.template_framework.FilledTemplate;\n-import compiler.lib.template_framework.UnfilledTemplate;\n@@ -164,3 +162,3 @@\n-        checkEQ(template1.fillWith(\"x\").render(), \"start x end\");\n-        checkEQ(template1.fillWith(\"a\").render(), \"start a end\");\n-        checkEQ(template1.fillWith(\"\" ).render(), \"start  end\");\n+        checkEQ(template1.render(\"x\"), \"start x end\");\n+        checkEQ(template1.render(\"a\"), \"start a end\");\n+        checkEQ(template1.render(\"\" ), \"start  end\");\n@@ -170,3 +168,3 @@\n-        checkEQ(template2.fillWith(\"x\").render(), \"start x end\");\n-        checkEQ(template2.fillWith(\"a\").render(), \"start a end\");\n-        checkEQ(template2.fillWith(\"\" ).render(), \"start  end\");\n+        checkEQ(template2.render(\"x\"), \"start x end\");\n+        checkEQ(template2.render(\"a\"), \"start a end\");\n+        checkEQ(template2.render(\"\" ), \"start  end\");\n@@ -176,3 +174,3 @@\n-        checkEQ(template3.fillWith(0  ).render(), \"start 0 end\");\n-        checkEQ(template3.fillWith(22 ).render(), \"start 22 end\");\n-        checkEQ(template3.fillWith(444).render(), \"start 444 end\");\n+        checkEQ(template3.render(0  ), \"start 0 end\");\n+        checkEQ(template3.render(22 ), \"start 22 end\");\n+        checkEQ(template3.render(444), \"start 444 end\");\n@@ -182,3 +180,3 @@\n-        checkEQ(template4.fillWith(0  ).render(), \"start 0 end\");\n-        checkEQ(template4.fillWith(22 ).render(), \"start 22 end\");\n-        checkEQ(template4.fillWith(444).render(), \"start 444 end\");\n+        checkEQ(template4.render(0  ), \"start 0 end\");\n+        checkEQ(template4.render(22 ), \"start 22 end\");\n+        checkEQ(template4.render(444), \"start 444 end\");\n@@ -188,3 +186,3 @@\n-        checkEQ(template5.fillWith(\"\/\").render(), \"start \/ \/ end\");\n-        checkEQ(template5.fillWith(\"\\\\\").render(), \"start \\\\ \\\\ end\");\n-        checkEQ(template5.fillWith(\"\\\\\\\\\").render(), \"start \\\\\\\\ \\\\\\\\ end\");\n+        checkEQ(template5.render(\"\/\"), \"start \/ \/ end\");\n+        checkEQ(template5.render(\"\\\\\"), \"start \\\\ \\\\ end\");\n+        checkEQ(template5.render(\"\\\\\\\\\"), \"start \\\\\\\\ \\\\\\\\ end\");\n@@ -196,3 +194,3 @@\n-        checkEQ(template1.fillWith(\"x\", \"y\").render(), \"start x y end\");\n-        checkEQ(template1.fillWith(\"a\", \"b\").render(), \"start a b end\");\n-        checkEQ(template1.fillWith(\"\",  \"\" ).render(), \"start   end\");\n+        checkEQ(template1.render(\"x\", \"y\"), \"start x y end\");\n+        checkEQ(template1.render(\"a\", \"b\"), \"start a b end\");\n+        checkEQ(template1.render(\"\",  \"\" ), \"start   end\");\n@@ -202,3 +200,3 @@\n-        checkEQ(template2.fillWith(\"x\", \"y\").render(), \"start x y end\");\n-        checkEQ(template2.fillWith(\"a\", \"b\").render(), \"start a b end\");\n-        checkEQ(template2.fillWith(\"\",  \"\" ).render(), \"start   end\");\n+        checkEQ(template2.render(\"x\", \"y\"), \"start x y end\");\n+        checkEQ(template2.render(\"a\", \"b\"), \"start a b end\");\n+        checkEQ(template2.render(\"\",  \"\" ), \"start   end\");\n@@ -208,3 +206,3 @@\n-        checkEQ(template3.fillWith(0,   1  ).render(), \"start 0 1 end\");\n-        checkEQ(template3.fillWith(22,  33 ).render(), \"start 22 33 end\");\n-        checkEQ(template3.fillWith(444, 555).render(), \"start 444 555 end\");\n+        checkEQ(template3.render(0,   1  ), \"start 0 1 end\");\n+        checkEQ(template3.render(22,  33 ), \"start 22 33 end\");\n+        checkEQ(template3.render(444, 555), \"start 444 555 end\");\n@@ -214,3 +212,3 @@\n-        checkEQ(template4.fillWith(0,   1  ).render(), \"start 0 1 end\");\n-        checkEQ(template4.fillWith(22,  33 ).render(), \"start 22 33 end\");\n-        checkEQ(template4.fillWith(444, 555).render(), \"start 444 555 end\");\n+        checkEQ(template4.render(0,   1  ), \"start 0 1 end\");\n+        checkEQ(template4.render(22,  33 ), \"start 22 33 end\");\n+        checkEQ(template4.render(444, 555), \"start 444 555 end\");\n@@ -222,3 +220,3 @@\n-        checkEQ(template1.fillWith(\"x\", \"y\", \"z\").render(), \"start x y z end\");\n-        checkEQ(template1.fillWith(\"a\", \"b\", \"c\").render(), \"start a b c end\");\n-        checkEQ(template1.fillWith(\"\",  \"\", \"\" ).render(),  \"start    end\");\n+        checkEQ(template1.render(\"x\", \"y\", \"z\"), \"start x y z end\");\n+        checkEQ(template1.render(\"a\", \"b\", \"c\"), \"start a b c end\");\n+        checkEQ(template1.render(\"\",  \"\", \"\" ),  \"start    end\");\n@@ -228,3 +226,3 @@\n-        checkEQ(template1.fillWith(\"x\", \"y\", \"z\").render(), \"start x y z end\");\n-        checkEQ(template1.fillWith(\"a\", \"b\", \"c\").render(), \"start a b c end\");\n-        checkEQ(template1.fillWith(\"\",  \"\", \"\" ).render(),  \"start    end\");\n+        checkEQ(template1.render(\"x\", \"y\", \"z\"), \"start x y z end\");\n+        checkEQ(template1.render(\"a\", \"b\", \"c\"), \"start a b c end\");\n+        checkEQ(template1.render(\"\",  \"\", \"\" ),  \"start    end\");\n@@ -234,3 +232,3 @@\n-        checkEQ(template3.fillWith(0,   1  , 2  ).render(), \"start 0 1 2 end\");\n-        checkEQ(template3.fillWith(22,  33 , 44 ).render(), \"start 22 33 44 end\");\n-        checkEQ(template3.fillWith(444, 555, 666).render(), \"start 444 555 666 end\");\n+        checkEQ(template3.render(0,   1  , 2  ), \"start 0 1 2 end\");\n+        checkEQ(template3.render(22,  33 , 44 ), \"start 22 33 44 end\");\n+        checkEQ(template3.render(444, 555, 666), \"start 444 555 666 end\");\n@@ -240,3 +238,3 @@\n-        checkEQ(template3.fillWith(0,   1  , 2  ).render(), \"start 0 1 2 end\");\n-        checkEQ(template3.fillWith(22,  33 , 44 ).render(), \"start 22 33 44 end\");\n-        checkEQ(template3.fillWith(444, 555, 666).render(), \"start 444 555 666 end\");\n+        checkEQ(template3.render(0,   1  , 2  ), \"start 0 1 2 end\");\n+        checkEQ(template3.render(22,  33 , 44 ), \"start 22 33 44 end\");\n+        checkEQ(template3.render(444, 555, 666), \"start 444 555 666 end\");\n@@ -254,3 +252,3 @@\n-            \"Universe \", template1, \" {\\n\",\n-                template2.fillWith(\"up\", \"down\"),\n-                template2.fillWith(a1, a2),\n+            \"Universe \", template1.asToken(), \" {\\n\",\n+                template2.asToken(\"up\", \"down\"),\n+                template2.asToken(a1, a2),\n@@ -261,1 +259,1 @@\n-            template3.fillWith(\"low\", \"high\"),\n+            template3.asToken(\"low\", \"high\"),\n@@ -263,1 +261,1 @@\n-                template3.fillWith(\"42\", \"24\"),\n+                template3.asToken(\"42\", \"24\"),\n@@ -296,1 +294,1 @@\n-                hook1.insert(template1)\n+                hook1.insert(template1.asToken())\n@@ -316,1 +314,1 @@\n-        var template1 = Template.make(() -> body(\"Hello\\n\", template0));\n+        var template1 = Template.make(() -> body(\"Hello\\n\", template0.asToken()));\n@@ -320,1 +318,1 @@\n-            template0,\n+            template0.asToken(),\n@@ -323,2 +321,2 @@\n-                template0,\n-                hook1.insert(template1)\n+                template0.asToken(),\n+                hook1.insert(template1.asToken())\n@@ -326,1 +324,1 @@\n-            template0,\n+            template0.asToken(),\n@@ -355,5 +353,5 @@\n-                template1.fillWith(\"one\"),\n-                template1.fillWith(\"two\"),\n-                hook1.insert(template1.fillWith(\"intoHook1a\")),\n-                hook1.insert(template1.fillWith(\"intoHook1b\")),\n-                template1.fillWith(\"three\"),\n+                template1.asToken(\"one\"),\n+                template1.asToken(\"two\"),\n+                hook1.insert(template1.asToken(\"intoHook1a\")),\n+                hook1.insert(template1.asToken(\"intoHook1b\")),\n+                template1.asToken(\"three\"),\n@@ -361,3 +359,3 @@\n-                    template1.fillWith(\"four\"),\n-                    hook1.insert(template1.fillWith(\"intoHook1c\")),\n-                    template1.fillWith(\"five\")\n+                    template1.asToken(\"four\"),\n+                    hook1.insert(template1.asToken(\"intoHook1c\")),\n+                    template1.asToken(\"five\")\n@@ -365,1 +363,1 @@\n-                template1.fillWith(\"six\"),\n+                template1.asToken(\"six\"),\n@@ -367,3 +365,3 @@\n-                template1.fillWith(\"seven\"),\n-                hook1.insert(template1.fillWith(\"intoHook1d\")),\n-                template1.fillWith(\"eight\"),\n+                template1.asToken(\"seven\"),\n+                hook1.insert(template1.asToken(\"intoHook1d\")),\n+                template1.asToken(\"eight\"),\n@@ -371,3 +369,3 @@\n-                    template1.fillWith(\"nine\"),\n-                    hook1.insert(template1.fillWith(\"intoHook1e\")),\n-                    template1.fillWith(\"ten\")\n+                    template1.asToken(\"nine\"),\n+                    hook1.insert(template1.asToken(\"intoHook1e\")),\n+                    template1.asToken(\"ten\")\n@@ -375,1 +373,1 @@\n-                template1.fillWith(\"eleven\")\n+                template1.asToken(\"eleven\")\n@@ -413,4 +411,4 @@\n-            template1.fillWith(b + \"A\"),\n-            hook1.insert(template1.fillWith(b + \"B\")),\n-            hook2.insert(template1.fillWith(b + \"C\")),\n-            template1.fillWith(b + \"D\"),\n+            template1.asToken(b + \"A\"),\n+            hook1.insert(template1.asToken(b + \"B\")),\n+            hook2.insert(template1.asToken(b + \"C\")),\n+            template1.asToken(b + \"D\"),\n@@ -418,4 +416,4 @@\n-                template1.fillWith(b + \"E\"),\n-                hook1.insert(template1.fillWith(b + \"F\")),\n-                hook2.insert(template1.fillWith(b + \"G\")),\n-                template1.fillWith(b + \"H\"),\n+                template1.asToken(b + \"E\"),\n+                hook1.insert(template1.asToken(b + \"F\")),\n+                hook2.insert(template1.asToken(b + \"G\")),\n+                template1.asToken(b + \"H\"),\n@@ -423,4 +421,4 @@\n-                    template1.fillWith(b + \"I\"),\n-                    hook1.insert(template1.fillWith(b + \"J\")),\n-                    hook2.insert(template1.fillWith(b + \"K\")),\n-                    template1.fillWith(b + \"L\")\n+                    template1.asToken(b + \"I\"),\n+                    hook1.insert(template1.asToken(b + \"J\")),\n+                    hook2.insert(template1.asToken(b + \"K\")),\n+                    template1.asToken(b + \"L\")\n@@ -428,4 +426,4 @@\n-                template1.fillWith(b + \"M\"),\n-                hook1.insert(template1.fillWith(b + \"N\")),\n-                hook2.insert(template1.fillWith(b + \"O\")),\n-                template1.fillWith(b + \"O\")\n+                template1.asToken(b + \"M\"),\n+                hook1.insert(template1.asToken(b + \"N\")),\n+                hook2.insert(template1.asToken(b + \"O\")),\n+                template1.asToken(b + \"O\")\n@@ -433,4 +431,4 @@\n-            template1.fillWith(b + \"P\"),\n-            hook1.insert(template1.fillWith(b + \"Q\")),\n-            hook2.insert(template1.fillWith(b + \"R\")),\n-            template1.fillWith(b + \"S\"),\n+            template1.asToken(b + \"P\"),\n+            hook1.insert(template1.asToken(b + \"Q\")),\n+            hook2.insert(template1.asToken(b + \"R\")),\n+            template1.asToken(b + \"S\"),\n@@ -448,1 +446,1 @@\n-                    template2.fillWith(\"sub-\"),\n+                    template2.asToken(\"sub-\"),\n@@ -501,3 +499,3 @@\n-            template1.fillWith(b + \"A\"),\n-            hook1.insert(template1.fillWith(b + \"B\")), \/\/ sub-B is rendered before template2.\n-            template1.fillWith(b + \"C\"),\n+            template1.asToken(b + \"A\"),\n+            hook1.insert(template1.asToken(b + \"B\")), \/\/ sub-B is rendered before template2.\n+            template1.asToken(b + \"C\"),\n@@ -507,3 +505,3 @@\n-                template1.fillWith(b + \"E\"),\n-                hook1.insert(template1.fillWith(b + \"E\")),\n-                template1.fillWith(b + \"F\")\n+                template1.asToken(b + \"E\"),\n+                hook1.insert(template1.asToken(b + \"E\")),\n+                template1.asToken(b + \"F\")\n@@ -520,1 +518,1 @@\n-                hook1.insert(template2.fillWith(\"sub-\")),\n+                hook1.insert(template2.asToken(\"sub-\")),\n@@ -558,1 +556,1 @@\n-            template1.fillWith($(\"name\")),\n+            template1.asToken($(\"name\")),\n@@ -568,3 +566,3 @@\n-            template1.fillWith(\"name\"),     \/\/ does not capture -> literal \"$name\"\n-            template1.fillWith(\"$name\"),    \/\/ does not capture -> literal \"$name\"\n-            template1.fillWith($(\"name\")),  \/\/ capture replacement name \"name_1\"\n+            template1.asToken(\"name\"),     \/\/ does not capture -> literal \"$name\"\n+            template1.asToken(\"$name\"),    \/\/ does not capture -> literal \"$name\"\n+            template1.asToken($(\"name\")),  \/\/ capture replacement name \"name_1\"\n@@ -577,1 +575,1 @@\n-                hook1.insert(template1.fillWith($(\"name\"))),\n+                hook1.insert(template1.asToken($(\"name\"))),\n@@ -579,1 +577,1 @@\n-                template1.fillWith($(\"name\")),\n+                template1.asToken($(\"name\")),\n@@ -581,1 +579,1 @@\n-                hook1.insert(template2.fillWith($(\"name\"))),\n+                hook1.insert(template2.asToken($(\"name\"))),\n@@ -636,1 +634,1 @@\n-            template1.fillWith(\"alpha\"),\n+            template1.asToken(\"alpha\"),\n@@ -641,1 +639,1 @@\n-                template1.fillWith(\"beta\"),\n+                template1.asToken(\"beta\"),\n@@ -648,1 +646,1 @@\n-            template2.fillWith(5),\n+            template2.asToken(5),\n@@ -694,2 +692,2 @@\n-            a > 0 ? template1.fillWith(\"A_\" + a)\n-                  : template2.fillWith(\"B_\" + a),\n+            a > 0 ? template1.asToken(\"A_\" + a)\n+                  : template2.asToken(\"B_\" + a),\n@@ -701,1 +699,1 @@\n-            template3.fillWith(-1),\n+            template3.asToken(-1),\n@@ -703,1 +701,1 @@\n-            template3.fillWith(0),\n+            template3.asToken(0),\n@@ -705,1 +703,1 @@\n-            template3.fillWith(1),\n+            template3.asToken(1),\n@@ -707,1 +705,1 @@\n-            template3.fillWith(2),\n+            template3.asToken(2),\n@@ -749,1 +747,1 @@\n-        var binding1 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n+        var binding1 = new TemplateBinding<Template.OneArgs<Integer>>();\n@@ -755,1 +753,1 @@\n-            i < 0 ? \"done\\n\" : binding1.get().fillWith(i - 1),\n+            i < 0 ? \"done\\n\" : binding1.get().asToken(i - 1),\n@@ -763,1 +761,1 @@\n-            template1.fillWith(3),\n+            template1.asToken(3),\n@@ -795,1 +793,1 @@\n-        var binding2 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n+        var binding2 = new TemplateBinding<Template.OneArgs<Integer>>();\n@@ -800,2 +798,2 @@\n-            template1,\n-            fuel() <= 60.f ? \"done\" : binding2.get().fillWith(i - 1),\n+            template1.asToken(),\n+            fuel() <= 60.f ? \"done\" : binding2.get().asToken(i - 1),\n@@ -808,1 +806,1 @@\n-            template2.fillWith(3),\n+            template2.asToken(3),\n@@ -842,1 +840,1 @@\n-        var binding2 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n+        var binding2 = new TemplateBinding<Template.OneArgs<Integer>>();\n@@ -848,2 +846,2 @@\n-            template1,\n-            fuel() <= 5.f ? \"done\\n\" : binding2.get().fillWith(i - 1),\n+            template1.asToken(),\n+            fuel() <= 5.f ? \"done\\n\" : binding2.get().asToken(i - 1),\n@@ -859,1 +857,1 @@\n-            template2.fillWith(3),\n+            template2.asToken(3),\n@@ -898,1 +896,1 @@\n-            template1\n+            template1.asToken()\n@@ -903,1 +901,1 @@\n-            hook1.insert(template2.fillWith($(\"name\"), myInt)),\n+            hook1.insert(template2.asToken($(\"name\"), myInt)),\n@@ -910,1 +908,1 @@\n-            template1,\n+            template1.asToken(),\n@@ -912,1 +910,1 @@\n-                template1,\n+                template1.asToken(),\n@@ -914,1 +912,1 @@\n-                template3,\n+                template3.asToken(),\n@@ -916,1 +914,1 @@\n-                template1,\n+                template1.asToken(),\n@@ -918,1 +916,1 @@\n-                template2.fillWith($(\"name\"), myInt),\n+                template2.asToken($(\"name\"), myInt),\n@@ -920,1 +918,1 @@\n-                template1\n+                template1.asToken()\n@@ -922,1 +920,1 @@\n-            template1,\n+            template1.asToken(),\n@@ -962,1 +960,1 @@\n-            template1.fillWith(type)\n+            template1.asToken(type)\n@@ -968,1 +966,1 @@\n-            template1.fillWith(type)\n+            template1.asToken(type)\n@@ -973,1 +971,1 @@\n-            hook1.insert(template2.fillWith($(\"name\"), type)),\n+            hook1.insert(template2.asToken($(\"name\"), type)),\n@@ -980,1 +978,1 @@\n-            hook1.insert(template3.fillWith($(\"name\"), type)),\n+            hook1.insert(template3.asToken($(\"name\"), type)),\n@@ -1001,1 +999,1 @@\n-            template1.fillWith(myInt),\n+            template1.asToken(myInt),\n@@ -1004,1 +1002,1 @@\n-                template1.fillWith(myInt),\n+                template1.asToken(myInt),\n@@ -1006,1 +1004,1 @@\n-                template5.fillWith(myInt),\n+                template5.asToken(myInt),\n@@ -1008,2 +1006,2 @@\n-                template7.fillWith(myInt),\n-                template1.fillWith(myInt),\n+                template7.asToken(myInt),\n+                template1.asToken(myInt),\n@@ -1011,1 +1009,1 @@\n-                template4.fillWith(myInt),\n+                template4.asToken(myInt),\n@@ -1013,2 +1011,2 @@\n-                template6.fillWith(myInt),\n-                template1.fillWith(myInt)\n+                template6.asToken(myInt),\n+                template1.asToken(myInt)\n@@ -1016,1 +1014,1 @@\n-            template1.fillWith(myInt),\n+            template1.asToken(myInt),\n@@ -1064,1 +1062,1 @@\n-            template1.fillWith(myInt),\n+            template1.asToken(myInt),\n@@ -1067,1 +1065,1 @@\n-                template1.fillWith(myInt),\n+                template1.asToken(myInt),\n@@ -1070,1 +1068,1 @@\n-                template1.fillWith(myInt),\n+                template1.asToken(myInt),\n@@ -1073,1 +1071,1 @@\n-                template1.fillWith(myInt)\n+                template1.asToken(myInt)\n@@ -1075,1 +1073,1 @@\n-            template1.fillWith(myInt),\n+            template1.asToken(myInt),\n@@ -1108,1 +1106,1 @@\n-            list.stream().map(item -> template1.fillWith(item)).toList(),\n+            list.stream().map(item -> template1.asToken(item)).toList(),\n@@ -1121,1 +1119,1 @@\n-        String code = template2.fillWith(list).render();\n+        String code = template2.render(list);\n@@ -1163,1 +1161,1 @@\n-            hook1.insert(template1),\n+            hook1.insert(template1.asToken()),\n@@ -1184,1 +1182,1 @@\n-        String code = template1.fillWith(\"x\", \"y\").render();\n+        String code = template1.render(\"x\", \"y\");\n@@ -1193,1 +1191,1 @@\n-        String code = template1.fillWith(\"y\").render();\n+        String code = template1.render(\"y\");\n@@ -1215,1 +1213,1 @@\n-        var binding = new TemplateBinding<FilledTemplate.ZeroArgs>();\n+        var binding = new TemplateBinding<Template.ZeroArgs>();\n@@ -1224,1 +1222,1 @@\n-        var binding = new TemplateBinding<FilledTemplate.ZeroArgs>();\n+        var binding = new TemplateBinding<Template.ZeroArgs>();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":155,"deletions":157,"binary":false,"changes":312,"status":"modified"}]}