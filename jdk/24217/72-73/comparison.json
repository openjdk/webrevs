{"files":[{"patch":"@@ -91,1 +91,1 @@\n-     * from the parent frame, allowing {@link Template#defineName} to persist in the outer\n+     * from the parent frame, allowing {@link Template#addName} to persist in the outer\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/CodeFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,0 +87,3 @@\n+            if (w < 0) {\n+                throw new RuntimeException(\"Negative weight not allowed: \" + w);\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/NameSet.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -338,0 +338,10 @@\n+    \/**\n+     * We split a {@link String} by \"#\" and \"$\", and then look at each part.\n+     * Example:\n+     *\n+     *  s:    \"abcdefghijklmnop #name abcdefgh${var_name} 12345#{name2}_con $field_name something\"\n+     *  parts: --------0-------- ------1------ --------2------- ------3----- ----------4---------\n+     *  start: ^                 ^             ^                ^            ^\n+     *  next:                   ^             ^                ^            ^                    ^\n+     *         none             hashtag       dollar           hashtag      dollar               done\n+     *\/\n@@ -346,0 +356,2 @@\n+            \/\/ If the character was not found, we want to have the rest of the\n+            \/\/ String s, so instead of \"-1\" take the end\/length of the String.\n@@ -348,0 +360,1 @@\n+            \/\/ Take the first one.\n@@ -350,0 +363,1 @@\n+\n@@ -355,21 +369,1 @@\n-                final boolean isDollar = startIsAfterDollar; \/\/ final alias for lambda capture.\n-                Matcher matcher = NAME_PATTERN.matcher(part);\n-                \/\/ Let's catch cases where we have bad patterns, such as:\n-                \/\/  \"##name\" or \"#1name\" or \"anything#\" etc.\n-                if (!matcher.find()) {\n-                    String replacement = isDollar ? \"$\" : \"#\";\n-                    throw new RendererException(\"Is not a valid '\" + replacement + \"' replacement pattern: '\" +\n-                                                replacement + part + \"' in '\" + s + \"'.\");\n-                }\n-                currentCodeFrame.addString(matcher.replaceFirst(\n-                    (MatchResult result) -> {\n-                        \/\/ There are two groups: (1) for \"name\" and (2) for \"{name}\"\n-                        String name = result.group(1) != null ? result.group(1) : result.group(2);\n-                        if (isDollar) {\n-                            return $(name);\n-                        } else {\n-                            \/\/ replaceFirst needs some special escaping of backslashes and ollar signs.\n-                            return getHashtagReplacement(name).replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\");\n-                        }\n-                    }\n-                ));\n+                renderStringWithDollarAndHashtagReplacementsPart(s, part, startIsAfterDollar);\n@@ -377,0 +371,1 @@\n+\n@@ -378,1 +373,2 @@\n-                \/\/ No new \"#\" or \"$\" was found, terminate now.\n+                \/\/ No new \"#\" or \"$\" was found, we just processed the rest of the String,\n+                \/\/ terminate now.\n@@ -381,2 +377,2 @@\n-            start = next + 1; \/\/ drop the \"#\" or \"$\"\n-            startIsAfterDollar = next == dollar;\n+            start = next + 1; \/\/ skip over the \"#\" or \"$\"\n+            startIsAfterDollar = next == dollar; \/\/ remember which character we just split with\n@@ -387,0 +383,46 @@\n+    \/**\n+     * We are parsing a part now. Befor the part, there was either a \"#\" or \"$\":\n+     * isDollar = false:\n+     *   \"#part\"\n+     *   \"#name abcdefgh\"\n+     *     ----\n+     *   \"#{name2}_con \"\n+     *     -------\n+     *\n+     * isDollar = true:\n+     *   \"$part\"\n+     *   \"${var_name} 12345\"\n+     *     ----------\n+     *   \"$field_name something\"\n+     *     ----------\n+     *\n+     * We now want to find the name pattern at the beginning of the part, and replace\n+     * it according to the hashtag or dollar replacement strategy.\n+     *\/\n+    private void renderStringWithDollarAndHashtagReplacementsPart(String s, String part, final boolean isDollar) {\n+        Matcher matcher = NAME_PATTERN.matcher(part);\n+        \/\/ If the string has a \"#\" or \"$\" that is not followed by a correct name\n+        \/\/ pattern, then the matcher will not match. These can be cases like:\n+        \/\/   \"##name\" -> the first hashtag leads to an empty part, and an empty name.\n+        \/\/   \"#1name\" -> the name pattern does not allow a digit as the first character.\n+        \/\/   \"anything#\" -> a hashtag at the end of the string leads to an empty name.\n+        if (!matcher.find()) {\n+            String replacement = isDollar ? \"$\" : \"#\";\n+            throw new RendererException(\"Is not a valid '\" + replacement + \"' replacement pattern: '\" +\n+                                        replacement + part + \"' in '\" + s + \"'.\");\n+        }\n+        \/\/ We know that there is a correct pattern, and now we replace it.\n+        currentCodeFrame.addString(matcher.replaceFirst(\n+            (MatchResult result) -> {\n+                \/\/ There are two groups: (1) for \"name\" and (2) for \"{name}\"\n+                String name = result.group(1) != null ? result.group(1) : result.group(2);\n+                if (isDollar) {\n+                    return $(name);\n+                } else {\n+                    \/\/ replaceFirst needs some special escaping of backslashes and ollar signs.\n+                    return getHashtagReplacement(name).replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\");\n+                }\n+            }\n+        ));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Renderer.java","additions":66,"deletions":24,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private static void parseList(List<Object> inputList, List<Token> outputList) {\n+    private static void parseList(List<?> inputList, List<Token> outputList) {\n@@ -74,1 +74,1 @@\n-            case List l    -> parseList(l, outputList);\n+            case List<?> l -> parseList(l, outputList);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Token.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public abstract class Hooks {\n+public final class Hooks {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/library\/Hooks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}