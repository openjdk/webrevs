{"files":[{"patch":"@@ -93,6 +93,1 @@\n-    \/\/ Model methods, but only of type \"(II)I\".\n-    \/\/ Should you ever work on a test where there are methods with different signatures,\n-    \/\/ then you would have to very carefully study and design the subtype relation between\n-    \/\/ methods. You may want to read up about covariance and contravariance. This\n-    \/\/ example ignores all of that, because we only have \"(II)I\" methods.\n-    private record MyMethodType() implements StructuralName.Type {\n+    private record MyStructuralType(String name) implements StructuralName.Type {\n@@ -101,1 +96,1 @@\n-            return other instanceof MyMethodType();\n+            return other instanceof MyStructuralType(String n) && name().startsWith(n);\n@@ -105,1 +100,1 @@\n-        public String name() { return \"<not used, don't worry>\"; }\n+        public String toString() { return name(); }\n@@ -107,1 +102,5 @@\n-    private static final MyMethodType myMethodType = new MyMethodType();\n+    private static final MyStructuralType myStructuralTypeA = new MyStructuralType(\"StructuralA\");\n+    private static final MyStructuralType myStructuralTypeA1 = new MyStructuralType(\"StructuralA1\");\n+    private static final MyStructuralType myStructuralTypeA2 = new MyStructuralType(\"StructuralA2\");\n+    private static final MyStructuralType myStructuralTypeA11 = new MyStructuralType(\"StructuralA11\");\n+    private static final MyStructuralType myStructuralTypeB = new MyStructuralType(\"StructuralB\");\n@@ -132,0 +131,2 @@\n+        testStructuralNames1();\n+        testStructuralNames2();\n@@ -1374,0 +1375,253 @@\n+    public static void testStructuralNames1() {\n+        var hook1 = new Hook(\"Hook1\");\n+\n+        var template1 = Template.make(\"type\", (StructuralName.Type type) -> body(\n+            \"[#type:\\n\",\n+            \"  exact: \",\n+            structuralNames().exactOf(type).hasAny(),\n+            \", \",\n+            structuralNames().exactOf(type).count(),\n+            \", {\",\n+            String.join(\", \", structuralNames().exactOf(type).toList().stream().map(StructuralName::name).toList()),\n+            \"}\\n\",\n+            \"  subtype: \",\n+            structuralNames().subtypeOf(type).hasAny(),\n+            \", \",\n+            structuralNames().subtypeOf(type).count(),\n+            \", {\",\n+            String.join(\", \", structuralNames().subtypeOf(type).toList().stream().map(StructuralName::name).toList()),\n+            \"}\\n\",\n+            \"  supertype: \",\n+            structuralNames().supertypeOf(type).hasAny(),\n+            \", \",\n+            structuralNames().supertypeOf(type).count(),\n+            \", {\",\n+            String.join(\", \", structuralNames().supertypeOf(type).toList().stream().map(StructuralName::name).toList()),\n+            \"}\\n\",\n+            \"]\\n\"\n+        ));\n+\n+        List<StructuralName.Type> types = List.of(myStructuralTypeA,\n+                                                  myStructuralTypeA1,\n+                                                  myStructuralTypeA2,\n+                                                  myStructuralTypeA11,\n+                                                  myStructuralTypeB);\n+        var template2 = Template.make(() -> body(\n+            \"StructuralNames:\\n\",\n+            types.stream().map(t -> template1.asToken(t)).toList()\n+        ));\n+\n+        var template3 = Template.make(\"type\", (StructuralName.Type type) -> body(\n+            let(\"name\", structuralNames().subtypeOf(type).sample()),\n+            \"Sample #type: #name\\n\"\n+        ));\n+\n+        var template4 = Template.make(() -> body(\n+            \"class $Q {\\n\",\n+            template2.asToken(),\n+            hook1.anchor(\n+                \"Create name for myStructuralTypeA11, should be visible for the supertypes\\n\",\n+                addStructuralName($(\"v1\"), myStructuralTypeA11),\n+                template3.asToken(myStructuralTypeA11),\n+                template3.asToken(myStructuralTypeA1),\n+                template3.asToken(myStructuralTypeA),\n+                \"Create name for myStructuralTypeA, should never be visible for the subtypes\\n\",\n+                addStructuralName($(\"v2\"), myStructuralTypeA),\n+                template3.asToken(myStructuralTypeA11),\n+                template3.asToken(myStructuralTypeA1),\n+                template2.asToken()\n+            ),\n+            template2.asToken(),\n+            \"}\\n\"\n+        ));\n+\n+        String code = template4.render();\n+        String expected =\n+            \"\"\"\n+            class Q_1 {\n+            StructuralNames:\n+            [StructuralA:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralA1:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralA2:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralA11:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralB:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            Create name for myStructuralTypeA11, should be visible for the supertypes\n+            Sample StructuralA11: StructuralName[name=v1_1, type=StructuralA11, weight=1]\n+            Sample StructuralA1: StructuralName[name=v1_1, type=StructuralA11, weight=1]\n+            Sample StructuralA: StructuralName[name=v1_1, type=StructuralA11, weight=1]\n+            Create name for myStructuralTypeA, should never be visible for the subtypes\n+            Sample StructuralA11: StructuralName[name=v1_1, type=StructuralA11, weight=1]\n+            Sample StructuralA1: StructuralName[name=v1_1, type=StructuralA11, weight=1]\n+            StructuralNames:\n+            [StructuralA:\n+              exact: true, 1, {v2_1}\n+              subtype: true, 2, {v1_1, v2_1}\n+              supertype: true, 1, {v2_1}\n+            ]\n+            [StructuralA1:\n+              exact: false, 0, {}\n+              subtype: true, 1, {v1_1}\n+              supertype: true, 1, {v2_1}\n+            ]\n+            [StructuralA2:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: true, 1, {v2_1}\n+            ]\n+            [StructuralA11:\n+              exact: true, 1, {v1_1}\n+              subtype: true, 1, {v1_1}\n+              supertype: true, 2, {v1_1, v2_1}\n+            ]\n+            [StructuralB:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            StructuralNames:\n+            [StructuralA:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralA1:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralA2:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralA11:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            [StructuralB:\n+              exact: false, 0, {}\n+              subtype: false, 0, {}\n+              supertype: false, 0, {}\n+            ]\n+            }\n+            \"\"\";\n+        checkEQ(code, expected);\n+    }\n+\n+    public static void testStructuralNames2() {\n+        var hook1 = new Hook(\"Hook1\");\n+\n+        var template1 = Template.make(\"type\", (StructuralName.Type type) -> body(\n+            \"[#type: \",\n+            structuralNames().exactOf(type).hasAny(),\n+            \", \",\n+            structuralNames().exactOf(type).count(),\n+            \", names: {\",\n+            String.join(\", \", structuralNames().exactOf(type).toList().stream().map(StructuralName::name).toList()),\n+            \"}]\\n\"\n+        ));\n+\n+        var template2 = Template.make(\"name\", \"type\", (String name, StructuralName.Type type) -> body(\n+            addStructuralName(name, type),\n+            \"define #type #name\\n\"\n+        ));\n+\n+        var template3 = Template.make(\"type\", (StructuralName.Type type) -> body(\n+            \"{ $access\\n\",\n+            hook1.insert(template2.asToken($(\"name\"), type)),\n+            \"$name = 5\\n\",\n+            \"} $access\\n\"\n+        ));\n+\n+        var template4 = Template.make(\"type\", (StructuralName.Type type) -> body(\n+            let(\"v\", structuralNames().exactOf(type).sample().name()),\n+            \"{ $sample\\n\",\n+            \"blackhole(#v)\\n\",\n+            \"} $sample\\n\"\n+        ));\n+\n+        var template8 = Template.make(() -> body(\n+            \"class $X {\\n\",\n+            template1.asToken(myStructuralTypeA),\n+            template1.asToken(myStructuralTypeB),\n+            hook1.anchor(\n+                \"begin $body\\n\",\n+                template1.asToken(myStructuralTypeA),\n+                template1.asToken(myStructuralTypeB),\n+                \"start with A\\n\",\n+                template3.asToken(myStructuralTypeA),\n+                \"then access it\\n\",\n+                template4.asToken(myStructuralTypeA),\n+                template1.asToken(myStructuralTypeA),\n+                template1.asToken(myStructuralTypeB),\n+                \"now make a B\\n\",\n+                template3.asToken(myStructuralTypeB),\n+                \"then access to it\\n\",\n+                template4.asToken(myStructuralTypeB),\n+                template1.asToken(myStructuralTypeA),\n+                template1.asToken(myStructuralTypeB)\n+            ),\n+            template1.asToken(myStructuralTypeA),\n+            template1.asToken(myStructuralTypeB),\n+            \"}\\n\"\n+        ));\n+\n+        String code = template8.render();\n+        String expected =\n+            \"\"\"\n+            class X_1 {\n+            [StructuralA: false, 0, names: {}]\n+            [StructuralB: false, 0, names: {}]\n+            define StructuralA name_6\n+            define StructuralB name_11\n+            begin body_1\n+            [StructuralA: false, 0, names: {}]\n+            [StructuralB: false, 0, names: {}]\n+            start with A\n+            { access_6\n+            name_6 = 5\n+            } access_6\n+            then access it\n+            { sample_8\n+            blackhole(name_6)\n+            } sample_8\n+            [StructuralA: true, 1, names: {name_6}]\n+            [StructuralB: false, 0, names: {}]\n+            now make a B\n+            { access_11\n+            name_11 = 5\n+            } access_11\n+            then access to it\n+            { sample_13\n+            blackhole(name_11)\n+            } sample_13\n+            [StructuralA: true, 1, names: {name_6}]\n+            [StructuralB: true, 1, names: {name_11}]\n+            [StructuralA: false, 0, names: {}]\n+            [StructuralB: false, 0, names: {}]\n+            }\n+            \"\"\";\n+        checkEQ(code, expected);\n+    }\n+\n@@ -1549,1 +1803,1 @@\n-            addStructuralName(\"name\", myMethodType, 0)\n+            addStructuralName(\"name\", myStructuralTypeA, 0)\n@@ -1556,1 +1810,1 @@\n-            addStructuralName(\"name\", myMethodType, -1)\n+            addStructuralName(\"name\", myStructuralTypeA, -1)\n@@ -1563,1 +1817,1 @@\n-            addStructuralName(\"name\", myMethodType, 1001)\n+            addStructuralName(\"name\", myStructuralTypeA, 1001)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":266,"deletions":12,"binary":false,"changes":278,"status":"modified"}]}