{"files":[{"patch":"@@ -127,1 +127,1 @@\n-        testDataNames();\n+        testDataNames1();\n@@ -131,0 +131,1 @@\n+        testDataNames5();\n@@ -166,0 +167,8 @@\n+        expectRendererException(() -> testFailingAddNameDuplication1(), \"Duplicate name:\");\n+        expectRendererException(() -> testFailingAddNameDuplication2(), \"Duplicate name:\");\n+        expectRendererException(() -> testFailingAddNameDuplication3(), \"Duplicate name:\");\n+        expectRendererException(() -> testFailingAddNameDuplication4(), \"Duplicate name:\");\n+        expectRendererException(() -> testFailingAddNameDuplication5(), \"Duplicate name:\");\n+        expectRendererException(() -> testFailingAddNameDuplication6(), \"Duplicate name:\");\n+        expectRendererException(() -> testFailingAddNameDuplication7(), \"Duplicate name:\");\n+        expectRendererException(() -> testFailingAddNameDuplication8(), \"Duplicate name:\");\n@@ -933,1 +942,1 @@\n-    public static void testDataNames() {\n+    public static void testDataNames1() {\n@@ -1375,0 +1384,58 @@\n+    \/\/ Test duplicate names in safe cases.\n+    public static void testDataNames5() {\n+        var hook1 = new Hook(\"Hook1\");\n+        var hook2 = new Hook(\"Hook2\");\n+\n+        \/\/ It is safe in separate Hook scopes.\n+        var template1 = Template.make(() -> body(\n+            hook1.anchor(\n+                addDataName(\"name1\", myInt, MUTABLE)\n+            ),\n+            hook1.anchor(\n+                addDataName(\"name1\", myInt, MUTABLE)\n+            )\n+        ));\n+\n+        \/\/ It is safe in separate Template scopes.\n+        var template2 = Template.make(() -> body(\n+            addDataName(\"name2\", myInt, MUTABLE)\n+        ));\n+        var template3 = Template.make(() -> body(\n+            template2.asToken(),\n+            template2.asToken()\n+        ));\n+\n+        var template4 = Template.make(() -> body(\n+            \/\/ The following is not safe, it would collide\n+            \/\/ with (1), because it would be inserted to the\n+            \/\/ hook1.anchor in template5, and hence be available\n+            \/\/ inside the scope where (1) is available.\n+            \/\/ See: testFailingAddNameDuplication8\n+            \/\/ addDataName(\"name\", myInt, MUTABLE),\n+            hook2.anchor(\n+                \/\/ (2) This one is added second. Since it is\n+                \/\/     inside the hook2.anchor, it does not go\n+                \/\/     out to the hook1.anchor, and is not\n+                \/\/     available inside the scope of (1).\n+                addDataName(\"name3\", myInt, MUTABLE)\n+            )\n+        ));\n+        var template5 = Template.make(() -> body(\n+            hook1.anchor(\n+                \/\/ (1) this is the first one we add.\n+                addDataName(\"name3\", myInt, MUTABLE)\n+            )\n+        ));\n+\n+        \/\/ Put it all together into a single test.\n+        var template6 = Template.make(() -> body(\n+            template1.asToken(),\n+            template3.asToken(),\n+            template5.asToken()\n+        ));\n+\n+        String code = template1.render();\n+        String expected = \"\";\n+        checkEQ(code, expected);\n+    }\n+\n@@ -1822,0 +1889,87 @@\n+    \/\/ Duplicate name in the same scope, name identical -> expect RendererException.\n+    public static void testFailingAddNameDuplication1() {\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE),\n+            addDataName(\"name\", myInt, MUTABLE)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    \/\/ Duplicate name in the same scope, names have different mutability -> expect RendererException.\n+    public static void testFailingAddNameDuplication2() {\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE),\n+            addDataName(\"name\", myInt, IMMUTABLE)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    \/\/ Duplicate name in the same scope, names have different type -> expect RendererException.\n+    public static void testFailingAddNameDuplication3() {\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE),\n+            addDataName(\"name\", myLong, MUTABLE)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    \/\/ Duplicate name in the same scope, name identical -> expect RendererException.\n+    public static void testFailingAddNameDuplication4() {\n+        var template1 = Template.make(() -> body(\n+            addStructuralName(\"name\", myStructuralTypeA),\n+            addStructuralName(\"name\", myStructuralTypeA)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    \/\/ Duplicate name in the same scope, names have different type -> expect RendererException.\n+    public static void testFailingAddNameDuplication5() {\n+        var template1 = Template.make(() -> body(\n+            addStructuralName(\"name\", myStructuralTypeA),\n+            addStructuralName(\"name\", myStructuralTypeB)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    \/\/ Duplicate name in inner Template, name identical -> expect RendererException.\n+    public static void testFailingAddNameDuplication6() {\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE)\n+        ));\n+        var template2 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE),\n+            template1.asToken()\n+        ));\n+        String code = template2.render();\n+    }\n+\n+    \/\/ Duplicate name in Hook scope, name identical -> expect RendererException.\n+    public static void testFailingAddNameDuplication7() {\n+        var hook1 = new Hook(\"Hook1\");\n+\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE),\n+            hook1.anchor(\n+                addDataName(\"name\", myInt, MUTABLE)\n+            )\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    \/\/ Duplicate name in Hook.insert, name identical -> expect RendererException.\n+    public static void testFailingAddNameDuplication8() {\n+        var hook1 = new Hook(\"Hook1\");\n+\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE)\n+        ));\n+\n+        var template2 = Template.make(() -> body(\n+            hook1.anchor(\n+                addDataName(\"name\", myInt, MUTABLE),\n+                hook1.insert(template1.asToken())\n+            )\n+        ));\n+        String code = template2.render();\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":156,"deletions":2,"binary":false,"changes":158,"status":"modified"}]}