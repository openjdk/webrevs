{"files":[{"patch":"@@ -6,1 +6,1 @@\n-The Template Framework provides a facility to generate code with Templates. Templates are essencially a list of tokens that are concatenated (i.e. rendered) to a String. The Templates can have \"holes\", which are filled (replaced) by different values at each Template instantiation. For example, these \"holes\" can be filled with different types, operators or constants. Templates can also be nested, allowing a modular use of Templates.\n+The Template Framework provides a facility to generate code with Templates. Templates are essentially a list of tokens that are concatenated (i.e. rendered) to a String. The Templates can have \"holes\", which are filled (replaced) by different values at each Template instantiation. For example, these \"holes\" can be filled with different types, operators or constants. Templates can also be nested, allowing a modular use of Templates.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n- * Given a {@link UnfilledTemplate}, one must apply the required number of arguments, i.e. fill\n+ * Given an {@link UnfilledTemplate}, one must apply the required number of arguments, i.e. fill\n@@ -152,1 +152,1 @@\n- * i.e. the making a Template with zero arguments directly returns a {@link FilledTemplate},\n+ * i.e. making a Template with zero arguments directly returns a {@link FilledTemplate},\n@@ -168,1 +168,1 @@\n- * For this, Templates provide <strong>dollar replacements<\/strong>, which automaticall rename any\n+ * For this, Templates provide <strong>dollar replacements<\/strong>, which automatically rename any\n@@ -228,1 +228,1 @@\n-     * Creates a {@link UnfilledTemplate} with one argument.\n+     * Creates an {@link UnfilledTemplate} with one argument.\n@@ -232,1 +232,1 @@\n-     * Here an example with template argument {@code 'a'}, captured once as string name\n+     * Here is an example with template argument {@code 'a'}, captured once as string name\n@@ -248,1 +248,1 @@\n-     * @return A {@link UnfilledTemplate} with one argument.\n+     * @return An {@link UnfilledTemplate} with one argument.\n@@ -255,1 +255,1 @@\n-     * Creates a {@link UnfilledTemplate} with two arguments.\n+     * Creates an {@link UnfilledTemplate} with two arguments.\n@@ -277,1 +277,1 @@\n-     * @return A {@link UnfilledTemplate} with two arguments.\n+     * @return An {@link UnfilledTemplate} with two arguments.\n@@ -284,1 +284,1 @@\n-     * Creates a {@link UnfilledTemplate} with three arguments.\n+     * Creates an {@link UnfilledTemplate} with three arguments.\n@@ -294,1 +294,1 @@\n-     * @return A {@link UnfilledTemplate} with three arguments.\n+     * @return An {@link UnfilledTemplate} with three arguments.\n@@ -328,1 +328,1 @@\n-     * current Template that is being instanciated. It returns the same\n+     * current Template that is being instantiated. It returns the same\n@@ -357,1 +357,1 @@\n-     *     System.out.prinln(\"Use a and b with hashtag replacement: #a and #b\");\n+     *     System.out.println(\"Use a and b with hashtag replacement: #a and #b\");\n@@ -364,1 +364,1 @@\n-     * @return A token that does nothing, so that the {@link #let} cal can easily be put in a list of tokens\n+     * @return A token that does nothing, so that the {@link #let} can easily be put in a list of tokens\n@@ -390,1 +390,1 @@\n-     * @return A token that does nothing, so that the {@link #let} cal can easily be put in a list of tokens\n+     * @return A token that does nothing, so that the {@link #let} can easily be put in a list of tokens\n@@ -405,1 +405,1 @@\n-     * The default amount of fuel spent per Template. It is suptracted from the current {@link #fuel} at every\n+     * The default amount of fuel spent per Template. It is subtracted from the current {@link #fuel} at every\n@@ -411,1 +411,1 @@\n-     * The current remaining fuel for nested Templates. Every level of Template nestig\n+     * The current remaining fuel for nested Templates. Every level of Template nesting\n@@ -419,1 +419,1 @@\n-     * the recursive use of Templates. We {@link FilledTemplate#render} with {@code 30} total fuel, and spending {@code 5} fuel at each recursion level.\n+     * the recursive use of Templates. We {@link FilledTemplate#render} with {@code 30} total fuel, and spend {@code 5} fuel at each recursion level.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * itself, where a template needs to be referenced before it is fully defined,\n+ * itself and needs to be referenced before it is fully defined,\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * is spend on the code from the template corrsponding to the frame, and to give a\n+ * is spent on the code from the template corresponding to the frame, and to give a\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        \/\/ Object ret = p.xyz.InnterTest.main();\n+        \/\/ Object ret = p.xyz.InnerTest.main();\n@@ -96,1 +96,1 @@\n-        \/\/   if we instanciate the template multiple times. Thus, we use the $ prefix\n+        \/\/   if we instantiate the template multiple times. Thus, we use the $ prefix\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestAdvanced.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        \/\/ Object ret = p.xyz.InnterTest.test();\n+        \/\/ Object ret = p.xyz.InnerTest.test();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestSimple.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        \/\/ Object ret = p.xyz.InnterTest1.main();\n+        \/\/ Object ret = p.xyz.InnerTest1.main();\n@@ -140,1 +140,1 @@\n-            \/\/ looks awkward, given al the additional quotes and commans required.\n+            \/\/ looks awkward, given all the additional quotes and commands required.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}