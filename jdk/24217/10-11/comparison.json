{"files":[{"patch":"@@ -83,3 +83,3 @@\n- * To get an executable test, we define a class Template, which takes a list of types,\n- * and calls the {@code testTemplate} defined above for each type and operator. We use the {@code TestFramework}\n- * to call our {@code @Test} methods.\n+ * To get an executable test, we define a Template that produces a class body with a main method. The Template\n+ * takes a list of types, and calls the {@code testTemplate} defined above for each type and operator. We use\n+ * the {@code TestFramework} to call our {@code @Test} methods.\n@@ -124,7 +124,7 @@\n- *     new Type(\"byte\",   () -> GEN_BYTE.next(),   List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n- *     new Type(\"char\",   () -> GEN_CHAR.next(),   List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n- *     new Type(\"short\",  () -> GEN_SHORT.next(),  List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n- *     new Type(\"int\",    () -> GEN_INT.next(),    List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n- *     new Type(\"long\",   () -> GEN_LONG.next(),   List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n- *     new Type(\"float\",  () -> GEN_FLOAT.next(),  List.of(\"+\", \"-\", \"*\", \"\/\")),\n- *     new Type(\"double\", () -> GEN_DOUBLE.next(), List.of(\"+\", \"-\", \"*\", \"\/\"))\n+ *     new Type(\"byte\",   GEN_BYTE::next,   List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n+ *     new Type(\"char\",   GEN_CHAR::next,   List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n+ *     new Type(\"short\",  GEN_SHORT::next,  List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n+ *     new Type(\"int\",    GEN_INT::next,    List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n+ *     new Type(\"long\",   GEN_LONG::next,   List.of(\"+\", \"-\", \"*\", \"&\", \"|\", \"^\")),\n+ *     new Type(\"float\",  GEN_FLOAT::next,  List.of(\"+\", \"-\", \"*\", \"\/\")),\n+ *     new Type(\"double\", GEN_DOUBLE::next, List.of(\"+\", \"-\", \"*\", \"\/\"))\n@@ -185,0 +185,4 @@\n+ *\n+ * <p>\n+ * More examples for these functionalities can be found in {@link TestTutorial}, {@link TestSimple}, and\n+ * {@link TestAdvanced}.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -71,0 +71,3 @@\n+        \/\/ Hint: if you want to see the generated source code, you can enable\n+        \/\/       printing of the source code that the CompileFramework receives,\n+        \/\/       with -DCompileFrameworkVerbose=true\n@@ -98,2 +101,2 @@\n-            \"int a = \", Integer.valueOf(1), \";\\n\",\n-            \"float b = \", Float.valueOf(1.5f), \";\\n\",\n+            \"int a = \", 1, \";\\n\",\n+            \"float b = \", 1.5f, \";\\n\",\n@@ -101,2 +104,2 @@\n-            \"float nan = \", Float.valueOf(Float.POSITIVE_INFINITY), \";\\n\",\n-            \"boolean c = \", Boolean.valueOf(true), \";\\n\",\n+            \"float nan = \", Float.POSITIVE_INFINITY, \";\\n\",\n+            \"boolean c = \", true, \";\\n\",\n@@ -105,2 +108,3 @@\n-            \/\/ That can be great for streaming \/ mapping over an existing list:\n-            Stream.of(3, 5, 7, 11).map(i -> \"System.out.println(\" + i + \");\\n\").toList(),\n+            \/\/ We can also stream \/ map over an existing list, or one created on\n+            \/\/ the fly:\n+            List.of(3, 5, 7, 11).stream().map(i -> \"System.out.println(\" + i + \");\\n\").toList(),\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}