{"files":[{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.template_framework;\n+\n+\/**\n+ * Represents a Template with filled arguments, ready for instantiation, either\n+ * as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n+ *\/\n+public sealed abstract class FilledTemplate implements Token\n+                                            permits FilledTemplate.ZeroArgs,\n+                                                    FilledTemplate.OneArgs,\n+                                                    FilledTemplate.TwoArgs,\n+                                                    FilledTemplate.ThreeArgs\n+{\n+    private FilledTemplate() {}\n+\n+    \/**\n+     * Represents a zero-argument {@link FilledTemplate}, already filled with arguments, ready for\n+     * instantiation either as a {@link Token} inside another {@link UnfilledTemplate} or\n+     * with {@link #render}.\n+     *\/\n+    public static final class ZeroArgs extends FilledTemplate implements Token, TemplateBinding.Bindable {\n+        private final UnfilledTemplate.ZeroArgs zeroArgs;\n+\n+        ZeroArgs(UnfilledTemplate.ZeroArgs zeroArgs) {\n+            this.zeroArgs = zeroArgs;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return zeroArgs.instantiate();\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {}\n+    }\n+\n+    \/**\n+     * Represents a one-argument {@link FilledTemplate}, already filled with arguments, ready for instantiation\n+     * either as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n+     *\n+     * @param <A> The type of the (first) argument.\n+     *\/\n+    public static final class OneArgs<A> extends FilledTemplate implements Token {\n+        private final UnfilledTemplate.OneArgs<A> oneArgs;\n+        private final A a;\n+\n+        OneArgs(UnfilledTemplate.OneArgs<A> oneArgs, A a) {\n+            this.oneArgs = oneArgs;\n+            this.a = a;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return oneArgs.instantiate(a);\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {\n+            visitor.visit(oneArgs.arg0Name(), a);\n+        }\n+    }\n+\n+    \/**\n+     * Represents a two-argument {@link FilledTemplate}, already filled with arguments, ready for instantiation\n+     * either as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n+     *\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     *\/\n+    public static final class TwoArgs<A, B> extends FilledTemplate implements Token {\n+        private final UnfilledTemplate.TwoArgs<A, B> twoArgs;\n+        private final A a;\n+        private final B b;\n+\n+        TwoArgs(UnfilledTemplate.TwoArgs<A, B> twoArgs, A a, B b) {\n+            this.twoArgs = twoArgs;\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return twoArgs.instantiate(a, b);\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {\n+            visitor.visit(twoArgs.arg0Name(), a);\n+            visitor.visit(twoArgs.arg1Name(), b);\n+        }\n+    }\n+\n+    \/**\n+     * Represents a three-argument {@link FilledTemplate}, already filled with arguments, ready for instantiation\n+     * either as a {@link Token} inside another {@link UnfilledTemplate} or with {@link #render}.\n+     *\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     * @param <C> The type of the second argument.\n+     *\/\n+    public static final class ThreeArgs<A, B, C> extends FilledTemplate implements Token {\n+        private final UnfilledTemplate.ThreeArgs<A, B, C> threeArgs;\n+        private final A a;\n+        private final B b;\n+        private final C c;\n+\n+        ThreeArgs(UnfilledTemplate.ThreeArgs<A, B, C> threeArgs, A a, B b, C c) {\n+            this.threeArgs = threeArgs;\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+\n+        @Override\n+        public TemplateBody instantiate() {\n+            return threeArgs.instantiate(a, b, c);\n+        }\n+\n+        @Override\n+        public void visitArguments(ArgumentVisitor visitor) {\n+            visitor.visit(threeArgs.arg0Name(), a);\n+            visitor.visit(threeArgs.arg1Name(), b);\n+            visitor.visit(threeArgs.arg2Name(), c);\n+        }\n+    }\n+\n+    abstract TemplateBody instantiate();\n+\n+    @FunctionalInterface\n+    interface ArgumentVisitor {\n+        void visit(String name, Object value);\n+    }\n+\n+    abstract void visitArguments(ArgumentVisitor visitor);\n+\n+    \/**\n+     * Renders the {@link FilledTemplate} to a {@link String}.\n+     *\n+     * @return The {@link FilledTemplate} rendered to a {@link String}.\n+     *\/\n+    public final String render() {\n+        return Renderer.render(this);\n+    }\n+\n+    \/**\n+     * Renders the {@link FilledTemplate} to a {@link String}.\n+     *\n+     * @param fuel The amount of fuel provided for recursive Template instantiations.\n+     * @return The {@link FilledTemplate} rendered to a {@link String}.\n+     *\/\n+    public final String render(float fuel) {\n+        return Renderer.render(this, fuel);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/FilledTemplate.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"},{"patch":"@@ -56,1 +56,1 @@\n- *         myHook.insert(template1.withArgs($(\"field\"))),\n+ *         myHook.insert(template1.fillWith($(\"field\"))),\n@@ -83,1 +83,1 @@\n-     * Inserts a {@link TemplateWithArgs} to the innermost location where this {@link Hook} was {@link #set}.\n+     * Inserts a {@link FilledTemplate} to the innermost location where this {@link Hook} was {@link #set}.\n@@ -86,1 +86,1 @@\n-     * @param templateWithArgs The {@link Template} with applied arguments to be inserted at the {@link Hook}.\n+     * @param filledTemplate The {@link Template} with applied arguments to be inserted at the {@link Hook}.\n@@ -89,2 +89,2 @@\n-    public Token insert(TemplateWithArgs templateWithArgs) {\n-        return new HookInsertToken(this, templateWithArgs);\n+    public Token insert(FilledTemplate filledTemplate) {\n+        return new HookInsertToken(this, filledTemplate);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Hook.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-record HookInsertToken(Hook hook, TemplateWithArgs templateWithArgs) implements Token {}\n+record HookInsertToken(Hook hook, FilledTemplate filledTemplate) implements Token {}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/HookInsertToken.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-    static String render(TemplateWithArgs templateWithArgs) {\n-        return render(templateWithArgs, Template.DEFAULT_FUEL);\n+    static String render(FilledTemplate filledTemplate) {\n+        return render(filledTemplate, Template.DEFAULT_FUEL);\n@@ -77,1 +77,1 @@\n-    static String render(TemplateWithArgs templateWithArgs, float fuel) {\n+    static String render(FilledTemplate filledTemplate, float fuel) {\n@@ -80,1 +80,1 @@\n-            throw new RendererException(\"Nested render not allowed. Please only use 'withArgs' inside Templates, and call 'render' only once at the end.\");\n+            throw new RendererException(\"Nested render not allowed. Please only use 'fillWith' inside Templates, and call 'render' only once at the end.\");\n@@ -84,1 +84,1 @@\n-            renderer.renderTemplateWithArgs(templateWithArgs);\n+            renderer.renderFilledTemplate(filledTemplate);\n@@ -189,1 +189,1 @@\n-    private void renderTemplateWithArgs(TemplateWithArgs templateWithArgs) {\n+    private void renderFilledTemplate(FilledTemplate filledTemplate) {\n@@ -193,2 +193,2 @@\n-        templateWithArgs.visitArguments((name, value) -> addHashtagReplacement(name, format(value)));\n-        TemplateBody body = templateWithArgs.instantiate();\n+        filledTemplate.visitArguments((name, value) -> addHashtagReplacement(name, format(value)));\n+        TemplateBody body = filledTemplate.instantiate();\n@@ -233,1 +233,1 @@\n-            case HookInsertToken(Hook hook, TemplateWithArgs t) -> {\n+            case HookInsertToken(Hook hook, FilledTemplate t) -> {\n@@ -239,2 +239,2 @@\n-                \/\/ by the TemplateWithArgs can be collected, and hook insertions from it can still\n-                \/\/ be made to the hookCodeFrame before the code from the TemplateWithArgs is added to\n+                \/\/ by the FilledTemplate can be collected, and hook insertions from it can still\n+                \/\/ be made to the hookCodeFrame before the code from the FilledTemplate is added to\n@@ -243,1 +243,1 @@\n-                \/\/ the hookCodeFrame, and are not limited to the CodeFrame for the TemplateWithArgs.\n+                \/\/ the hookCodeFrame, and are not limited to the CodeFrame for the FilledTemplate.\n@@ -246,1 +246,1 @@\n-                renderTemplateWithArgs(t);\n+                renderFilledTemplate(t);\n@@ -253,1 +253,1 @@\n-            case TemplateWithArgs t -> {\n+            case FilledTemplate t -> {\n@@ -258,1 +258,1 @@\n-                renderTemplateWithArgs(t);\n+                renderFilledTemplate(t);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Renderer.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n- *     \/\/ list of lists of TemplateWithArgs:\n+ *     \/\/ list of lists of FilledTemplate:\n@@ -111,1 +111,1 @@\n- *             testTemplate.withArgs(type.name(), operator, type.generator())).toList()\n+ *             testTemplate.fillWith(type.name(), operator, type.generator())).toList()\n@@ -134,1 +134,1 @@\n- * return classTemplate.withArgs(types).render();\n+ * return classTemplate.fillWith(types).render();\n@@ -143,8 +143,5 @@\n- * A {@link Template} can have zero or more arguments, and for each number of arguments there is an implementation\n- * (e.g. {@link ZeroArgs} for zero arguments and {@link TwoArgs} for two arguments). This allows the use of Generics\n- * for the template argument types, i.e. the template arguments can be type checked. Ideally, we would have used\n- * String Templates to inject these arguments into the strings. But since String Templates are not (yet) available,\n- * the {@link Template}s provide <strong>hashtag replacements<\/strong> in the Strings: the {@link Template} argument\n- * names are captured, and the argument values automatically replace any {@code \"#name\"} in the Strings. See the\n- * different overloads of {@link #make} for examples. Additional hashtag replacements can be defined\n- * with {@link #let}.\n+ * A Template can have zero or more arguments. A template can be created with {@code make} methods like\n+ * {@link Template#make(String, Function)}. At first, the Template is an {@link UnfilledTemplate}, i.e.\n+ * a Template where the arguments are not yet filled. For each number of arguments there is an implementation\n+ * (e.g. {@link UnfilledTemplate.TwoArgs} for two arguments). This allows the use of Generics for the\n+ * Template argument types, i.e. the Template arguments can be type checked.\n@@ -153,2 +150,19 @@\n- * When using nested {@link Template}s, there can be collisions with identifiers (e.g. variable names and method names).\n- * For this, {@link Template}s provide <strong>dollar replacements<\/strong>, which automaticall rename any\n+ * Given a {@link UnfilledTemplate}, one must apply the required number of arguments, i.e. fill\n+ * the Template, to arrive at a {@link FilledTemplate}. Note: {@link Template#make(Supplier)},\n+ * i.e. the making a Template with zero arguments directly returns a {@link FilledTemplate},\n+ * because there are no arguments to be filled.\n+ *\n+ * <p>\n+ * The {@link FilledTemplate} can then be used to render to String, or for nesting inside other\n+ * Templates.\n+ *\n+ * <p>\n+ * Ideally, we would have used String Templates to inject these Template arguments into the strings.\n+ * But since String Templates are not (yet) available, the Templates provide <strong>hashtag replacements<\/strong>\n+ * in the Strings: the Template argument names are captured, and the argument values automatically replace any\n+ * {@code \"#name\"} in the Strings. See the different overloads of {@link #make} for examples. Additional hashtag\n+ * replacements can be defined with {@link #let}.\n+ *\n+ * <p>\n+ * When using nested Templates, there can be collisions with identifiers (e.g. variable names and method names).\n+ * For this, Templates provide <strong>dollar replacements<\/strong>, which automaticall rename any\n@@ -156,2 +170,2 @@\n- * a {@link Template}. The dollar replacement can also be captured with {@link #$}, and passed to nested\n- * {@link Template}s, which allows sharing of these identifier names between {@link Template}s.\n+ * a Template. The dollar replacement can also be captured with {@link #$}, and passed to nested\n+ * Templates, which allows sharing of these identifier names between Templates.\n@@ -160,3 +174,3 @@\n- * To render a {@link Template} to a {@link String}, one first has to apply the arguments (e.g. with\n- * {@link TwoArgs#withArgs}) and then the resulting {@link TemplateWithArgs} can either be used as a\n- * {@link Token} inside another {@link Template}, or rendered to a {@link String} with {@link TemplateWithArgs#render}.\n+ * To render a Template to a {@link String}, one first has to apply the arguments (e.g. with\n+ * {@link TwoArgs#fillWith}) and then the resulting {@link FilledTemplate} can either be used as a\n+ * {@link Token} inside another {@link Template#body}, or rendered to a {@link String} with {@link FilledTemplate#render}.\n@@ -165,2 +179,2 @@\n- * A {@link TemplateWithArgs} can be used directly as a {@link Token} inside the {@link Template#body} to\n- * nest the {@link Template}s. Alternatively, code can be {@link Hook#insert}ed to where a {@link Hook}\n+ * A {@link FilledTemplate} can be used directly as a {@link Token} inside the {@link Template#body} to\n+ * nest the Templates. Alternatively, code can be {@link Hook#insert}ed to where a {@link Hook}\n@@ -171,3 +185,3 @@\n- * A {@link TemplateBinding} allows the recursive use of {@link Template}s. With the indirection of such a binding,\n- * a {@link Template} can reference itself. To ensure the termination of recursion, the templates are rendered\n- * with a certain amount of {@link #fuel}, which is decreased at each {@link Template} nesting by a certain amount\n+ * A {@link TemplateBinding} allows the recursive use of Templates. With the indirection of such a binding,\n+ * a Template can reference itself. To ensure the termination of recursion, the templates are rendered\n+ * with a certain amount of {@link #fuel}, which is decreased at each Template nesting by a certain amount\n@@ -193,2 +207,2 @@\n-     * Creates a {@link Template} with no arguments.\n-     * See {@link #body} for more details about how to construct a {@link Template} with {@link Token}s.\n+     * Creates a {@link FilledTemplate} with no arguments.\n+     * See {@link #body} for more details about how to construct a Template with {@link Token}s.\n@@ -207,1 +221,1 @@\n-     * @return A {@link Template} with zero arguments.\n+     * @return A {@link FilledTemplate} with zero arguments.\n@@ -209,2 +223,2 @@\n-    static ZeroArgs make(Supplier<TemplateBody> body) {\n-        return new ZeroArgs(body);\n+    static FilledTemplate.ZeroArgs make(Supplier<TemplateBody> body) {\n+        return new UnfilledTemplate.ZeroArgs(body).fillWithNothing();\n@@ -214,2 +228,2 @@\n-     * Creates a {@link Template} with one argument.\n-     * See {@link #body} for more details about how to construct a {@link Template} with {@link Token}s.\n+     * Creates a {@link UnfilledTemplate} with one argument.\n+     * See {@link #body} for more details about how to construct a Template with {@link Token}s.\n@@ -234,1 +248,1 @@\n-     * @return A {@link Template} with one argument.\n+     * @return A {@link UnfilledTemplate} with one argument.\n@@ -236,2 +250,2 @@\n-    static <A> OneArgs<A> make(String arg0Name, Function<A, TemplateBody> body) {\n-        return new OneArgs<>(arg0Name, body);\n+    static <A> UnfilledTemplate.OneArgs<A> make(String arg0Name, Function<A, TemplateBody> body) {\n+        return new UnfilledTemplate.OneArgs<>(arg0Name, body);\n@@ -241,2 +255,2 @@\n-     * Creates a {@link Template} with two arguments.\n-     * See {@link #body} for more details about how to construct a {@link Template} with {@link Token}s.\n+     * Creates a {@link UnfilledTemplate} with two arguments.\n+     * See {@link #body} for more details about how to construct a Template with {@link Token}s.\n@@ -263,1 +277,1 @@\n-     * @return A {@link Template} with two arguments.\n+     * @return A {@link UnfilledTemplate} with two arguments.\n@@ -265,2 +279,2 @@\n-    static <A, B> TwoArgs<A, B> make(String arg0Name, String arg1Name, BiFunction<A, B, TemplateBody> body) {\n-        return new TwoArgs<>(arg0Name, arg1Name, body);\n+    static <A, B> UnfilledTemplate.TwoArgs<A, B> make(String arg0Name, String arg1Name, BiFunction<A, B, TemplateBody> body) {\n+        return new UnfilledTemplate.TwoArgs<>(arg0Name, arg1Name, body);\n@@ -270,24 +284,2 @@\n-     * Interface for function with three arguments.\n-     *\n-     * @param <T> Type of the first argument.\n-     * @param <U> Type of the second argument.\n-     * @param <V> Type of the third argument.\n-     * @param <R> Type of the return value.\n-     *\/\n-    @FunctionalInterface\n-    public interface TriFunction<T, U, V, R> {\n-\n-        \/**\n-         * Function definition for the three argument functions.\n-         *\n-         * @param t The first argument.\n-         * @param u The second argument.\n-         * @param v The third argument.\n-         * @return Return value of the three argument function.\n-         *\/\n-        R apply(T t, U u, V v);\n-    }\n-\n-    \/**\n-     * Creates a {@link Template} with three arguments.\n-     * See {@link #body} for more details about how to construct a {@link Template} with {@link Token}s.\n+     * Creates a {@link UnfilledTemplate} with three arguments.\n+     * See {@link #body} for more details about how to construct a Template with {@link Token}s.\n@@ -302,1 +294,1 @@\n-     * @return A {@link Template} with three arguments.\n+     * @return A {@link UnfilledTemplate} with three arguments.\n@@ -304,115 +296,2 @@\n-    static <A, B, C> ThreeArgs<A, B, C> make(String arg0Name, String arg1Name, String arg2Name, TriFunction<A, B, C, TemplateBody> body) {\n-        return new ThreeArgs<>(arg0Name, arg1Name, arg2Name, body);\n-    }\n-\n-    \/**\n-     * A {@link Template} with no arguments.\n-     *\n-     * @param function The {@link Supplier} that creates the {@link TemplateBody}.\n-     *\/\n-    record ZeroArgs(Supplier<TemplateBody> function) implements Template {\n-        TemplateBody instantiate() {\n-            return function.get();\n-        }\n-\n-        \/**\n-         * Creates a {@link TemplateWithArgs} which can be used as a {@link Token} inside\n-         * a {@link Template} for nested code generation, and it can also be used with\n-         * {@link TemplateWithArgs#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @return The template all (zero) arguments applied.\n-         *\/\n-        public TemplateWithArgs withArgs() {\n-            return new TemplateWithArgs.ZeroArgsUse(this);\n-        }\n-    }\n-\n-\n-    \/**\n-     * A {@link Template} with one argument.\n-     *\n-     * @param arg0Name The name of the (first) argument, used for hashtag replacements in the {@link Template}.\n-     * @param <A> The type of the (first) argument.\n-     * @param function The {@link Function} that creates the {@link TemplateBody} given the template argument.\n-     *\/\n-    record OneArgs<A>(String arg0Name, Function<A, TemplateBody> function) implements Template {\n-        TemplateBody instantiate(A a) {\n-            return function.apply(a);\n-        }\n-\n-        \/**\n-         * Creates a {@link TemplateWithArgs} which can be used as a {@link Token} inside\n-         * a {@link Template} for nested code generation, and it can also be used with\n-         * {@link TemplateWithArgs#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @param a The value for the (first) argument.\n-         * @return The template its argument applied.\n-         *\/\n-        public TemplateWithArgs withArgs(A a) {\n-            return new TemplateWithArgs.OneArgsUse<>(this, a);\n-        }\n-    }\n-\n-    \/**\n-     * A {@link Template} with two arguments.\n-     *\n-     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link Template}.\n-     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link Template}.\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     * @param function The {@link BiFunction} that creates the {@link TemplateBody} given the template arguments.\n-     *\/\n-    record TwoArgs<A, B>(String arg0Name, String arg1Name,\n-                         BiFunction<A, B, TemplateBody> function) implements Template {\n-        TemplateBody instantiate(A a, B b) {\n-            return function.apply(a, b);\n-        }\n-\n-        \/**\n-         * Creates a {@link TemplateWithArgs} which can be used as a {@link Token} inside\n-         * a {@link Template} for nested code generation, and it can also be used with\n-         * {@link TemplateWithArgs#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @param a The value for the first argument.\n-         * @param b The value for the second argument.\n-         * @return The template all (two) arguments applied.\n-         *\/\n-        public TemplateWithArgs withArgs(A a, B b) {\n-            return new TemplateWithArgs.TwoArgsUse<>(this, a, b);\n-        }\n-    }\n-\n-    \/**\n-     * A {@link Template} with three arguments.\n-     *\n-     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link Template}.\n-     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link Template}.\n-     * @param arg2Name The name of the third argument, used for hashtag replacements in the {@link Template}.\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     * @param <C> The type of the third argument.\n-     * @param function The function with three arguments that creates the {@link TemplateBody} given the template arguments.\n-     *\/\n-    record ThreeArgs<A, B, C>(String arg0Name, String arg1Name, String arg2Name,\n-                              TriFunction<A, B, C, TemplateBody> function) implements Template {\n-        TemplateBody instantiate(A a, B b, C c) {\n-            return function.apply(a, b, c);\n-        }\n-\n-        \/**\n-         * Creates a {@link TemplateWithArgs} which can be used as a {@link Token} inside\n-         * a {@link Template} for nested code generation, and it can also be used with\n-         * {@link TemplateWithArgs#render} to render the template to a {@link String}\n-         * directly.\n-         *\n-         * @param a The value for the first argument.\n-         * @param b The value for the second argument.\n-         * @param c The value for the third argument.\n-         * @return The template all (three) arguments applied.\n-         *\/\n-        public TemplateWithArgs withArgs(A a, B b, C c) {\n-            return new TemplateWithArgs.ThreeArgsUse<>(this, a, b, c);\n-        }\n+    static <A, B, C> UnfilledTemplate.ThreeArgs<A, B, C> make(String arg0Name, String arg1Name, String arg2Name, UnfilledTemplate.TriFunction<A, B, C, TemplateBody> body) {\n+        return new UnfilledTemplate.ThreeArgs<>(arg0Name, arg1Name, arg2Name, body);\n@@ -433,1 +312,1 @@\n-     *     nestedTemplate.withArgs(42)\n+     *     nestedTemplate.fillWith(42)\n@@ -449,1 +328,1 @@\n-     * current {@link Template} that is being instanciated. It returns the same\n+     * current Template that is being instanciated. It returns the same\n@@ -452,1 +331,1 @@\n-     * Here an example where a {@link Template} creates a local variable {@code 'var'},\n+     * Here an example where a Template creates a local variable {@code 'var'},\n@@ -460,1 +339,1 @@\n-     *     otherTemplate.withArgs($(\"var\"))\n+     *     otherTemplate.fillWith($(\"var\"))\n@@ -521,1 +400,1 @@\n-     * Default amount of fuel for {@link TemplateWithArgs#render}. It guides the nesting depth of {@link Template}s.\n+     * Default amount of fuel for {@link FilledTemplate#render}. It guides the nesting depth of Templates.\n@@ -526,1 +405,1 @@\n-     * The default amount of fuel spent per {@link Template}. It is suptracted from the current {@link #fuel} at every\n+     * The default amount of fuel spent per Template. It is suptracted from the current {@link #fuel} at every\n@@ -532,2 +411,2 @@\n-     * The current remaining fuel for nested {@link Template}s. Every level of {@link Template} nestig\n-     * subtracts a certain amount of fuel, and when it reaches zero, {@link Template}s are supposed to\n+     * The current remaining fuel for nested Templates. Every level of Template nestig\n+     * subtracts a certain amount of fuel, and when it reaches zero, Templates are supposed to\n@@ -535,1 +414,1 @@\n-     * termination in recursive {@link Template} instantiations.\n+     * termination in recursive Template instantiations.\n@@ -538,1 +417,1 @@\n-     * Example of a recursive {@link Template}, which checks the remaining {@link #fuel} at every level,\n+     * Example of a recursive Template, which checks the remaining {@link #fuel} at every level,\n@@ -540,1 +419,1 @@\n-     * the recursive use of {@link Template}s. We {@link TemplateWithArgs#render} with {@code 30} total fuel, and spending {@code 5} fuel at each recursion level.\n+     * the recursive use of Templates. We {@link FilledTemplate#render} with {@code 30} total fuel, and spending {@code 5} fuel at each recursion level.\n@@ -542,1 +421,1 @@\n-     * var binding = new TemplateBinding<Template.OneArgs<Integer>>();\n+     * var binding = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n@@ -549,1 +428,1 @@\n-     *     (fuel() > 0) ? binding.get().withArgs(depth + 1)\n+     *     (fuel() > 0) ? binding.get().fillWith(depth + 1)\n@@ -553,1 +432,1 @@\n-     * String code = template.withArgs(0).render(30.0f);\n+     * String code = template.fillWith(0).render(30.0f);\n@@ -556,1 +435,1 @@\n-     * @return The amount of fuel left for nested {@link Template} use.\n+     * @return The amount of fuel left for nested Template use.\n@@ -563,1 +442,1 @@\n-     * Changes the amount of fuel used for the current {@link Template}, where the default is\n+     * Changes the amount of fuel used for the current Template, where the default is\n@@ -566,1 +445,1 @@\n-     * @param fuelCost The amount of fuel used for the current {@link Template}.\n+     * @param fuelCost The amount of fuel used for the current Template.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":74,"deletions":195,"binary":false,"changes":269,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-public class TemplateBinding<T extends Template> {\n+public class TemplateBinding<T extends TemplateBinding.Bindable> {\n@@ -40,0 +40,5 @@\n+    public sealed interface Bindable permits UnfilledTemplate.OneArgs,\n+                                             UnfilledTemplate.TwoArgs,\n+                                             UnfilledTemplate.ThreeArgs,\n+                                             FilledTemplate.ZeroArgs {}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateBinding.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * The {@link TemplateFrame} is the frame for a {@link TemplateWithArgs}. It ensures\n+ * The {@link TemplateFrame} is the frame for a {@link FilledTemplate}. It ensures\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,175 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.template_framework;\n-\n-\/**\n- * Represents a {@link Template} with applied arguments, ready for instantiation, either\n- * as a {@link Token} inside another {@link Template} or with {@link #render}.\n- *\/\n-public sealed abstract class TemplateWithArgs implements Token\n-                                              permits TemplateWithArgs.ZeroArgsUse,\n-                                                      TemplateWithArgs.OneArgsUse,\n-                                                      TemplateWithArgs.TwoArgsUse,\n-                                                      TemplateWithArgs.ThreeArgsUse\n-{\n-    private TemplateWithArgs() {}\n-\n-    \/**\n-     * Represents a zero-argument {@link Template} with applied arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n-     *\/\n-    public static final class ZeroArgsUse extends TemplateWithArgs implements Token {\n-        private final Template.ZeroArgs zeroArgs;\n-\n-        ZeroArgsUse(Template.ZeroArgs zeroArgs) {\n-            this.zeroArgs = zeroArgs;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return zeroArgs.instantiate();\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {}\n-    }\n-\n-    \/**\n-     * Represents a one-argument {@link Template} with applied arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n-     *\n-     * @param <A> The type of the (first) argument.\n-     *\/\n-    public static final class OneArgsUse<A> extends TemplateWithArgs implements Token {\n-        private final Template.OneArgs<A> oneArgs;\n-        private final A a;\n-\n-        OneArgsUse(Template.OneArgs<A> oneArgs, A a) {\n-            this.oneArgs = oneArgs;\n-            this.a = a;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return oneArgs.instantiate(a);\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {\n-            visitor.visit(oneArgs.arg0Name(), a);\n-        }\n-    }\n-\n-    \/**\n-     * Represents a two-argument {@link Template} with applied arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n-     *\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     *\/\n-    public static final class TwoArgsUse<A, B> extends TemplateWithArgs implements Token {\n-        private final Template.TwoArgs<A, B> twoArgs;\n-        private final A a;\n-        private final B b;\n-\n-        TwoArgsUse(Template.TwoArgs<A, B> twoArgs, A a, B b) {\n-            this.twoArgs = twoArgs;\n-            this.a = a;\n-            this.b = b;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return twoArgs.instantiate(a, b);\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {\n-            visitor.visit(twoArgs.arg0Name(), a);\n-            visitor.visit(twoArgs.arg1Name(), b);\n-        }\n-    }\n-\n-    \/**\n-     * Represents a three-argument {@link Template} with applied arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n-     *\n-     * @param <A> The type of the first argument.\n-     * @param <B> The type of the second argument.\n-     * @param <C> The type of the second argument.\n-     *\/\n-    public static final class ThreeArgsUse<A, B, C> extends TemplateWithArgs implements Token {\n-        private final Template.ThreeArgs<A, B, C> threeArgs;\n-        private final A a;\n-        private final B b;\n-        private final C c;\n-\n-        ThreeArgsUse(Template.ThreeArgs<A, B, C> threeArgs, A a, B b, C c) {\n-            this.threeArgs = threeArgs;\n-            this.a = a;\n-            this.b = b;\n-            this.c = c;\n-        }\n-\n-        @Override\n-        public TemplateBody instantiate() {\n-            return threeArgs.instantiate(a, b, c);\n-        }\n-\n-        @Override\n-        public void visitArguments(ArgumentVisitor visitor) {\n-            visitor.visit(threeArgs.arg0Name(), a);\n-            visitor.visit(threeArgs.arg1Name(), b);\n-            visitor.visit(threeArgs.arg2Name(), c);\n-        }\n-    }\n-\n-    abstract TemplateBody instantiate();\n-\n-    @FunctionalInterface\n-    interface ArgumentVisitor {\n-        void visit(String name, Object value);\n-    }\n-\n-    abstract void visitArguments(ArgumentVisitor visitor);\n-\n-    \/**\n-     * Renders the {@link Template} with applied arguments to a {@link String}.\n-     *\n-     * @return The {@link Template} rendered to a {@link String}.\n-     *\/\n-    public final String render() {\n-        return Renderer.render(this);\n-    }\n-\n-    \/**\n-     * Renders the {@link Template} with applied arguments to a {@link String}.\n-     *\n-     * @param fuel The amount of fuel provided for recursive {@link Template} instantiations.\n-     * @return The {@link Template} rendered to a {@link String}.\n-     *\/\n-    public final String render(float fuel) {\n-        return Renderer.render(this, fuel);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateWithArgs.java","additions":0,"deletions":175,"binary":false,"changes":175,"status":"deleted"},{"patch":"@@ -37,5 +37,5 @@\n-                               TemplateWithArgs,\n-                               TemplateWithArgs.ZeroArgsUse,\n-                               TemplateWithArgs.OneArgsUse,\n-                               TemplateWithArgs.TwoArgsUse,\n-                               TemplateWithArgs.ThreeArgsUse,\n+                               FilledTemplate,\n+                               FilledTemplate.ZeroArgs,\n+                               FilledTemplate.OneArgs,\n+                               FilledTemplate.TwoArgs,\n+                               FilledTemplate.ThreeArgs,\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Token.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.template_framework;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+public interface UnfilledTemplate {\n+    \/**\n+     * A {@link UnfilledTemplate} with no arguments.\n+     *\n+     * @param function The {@link Supplier} that creates the {@link TemplateBody}.\n+     *\/\n+    public record ZeroArgs(Supplier<TemplateBody> function) implements UnfilledTemplate {\n+        TemplateBody instantiate() {\n+            return function.get();\n+        }\n+\n+        \/**\n+         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n+         * a {@link UnfilledTemplate} for nested code generation, and it can also be used with\n+         * {@link FilledTemplate#render} to render the template to a {@link String}\n+         * directly.\n+         *\n+         * @return The template all (zero) arguments applied.\n+         *\/\n+        FilledTemplate.ZeroArgs fillWithNothing() {\n+            return new FilledTemplate.ZeroArgs(this);\n+        }\n+    }\n+\n+    \/**\n+     * A {@link UnfilledTemplate} with one argument.\n+     *\n+     * @param arg0Name The name of the (first) argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n+     * @param <A> The type of the (first) argument.\n+     * @param function The {@link Function} that creates the {@link TemplateBody} given the template argument.\n+     *\/\n+    public record OneArgs<A>(String arg0Name, Function<A, TemplateBody> function)\n+            implements UnfilledTemplate, TemplateBinding.Bindable {\n+        TemplateBody instantiate(A a) {\n+            return function.apply(a);\n+        }\n+\n+        \/**\n+         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n+         * a {@link UnfilledTemplate} for nested code generation, and it can also be used with\n+         * {@link FilledTemplate#render} to render the template to a {@link String}\n+         * directly.\n+         *\n+         * @param a The value for the (first) argument.\n+         * @return The template its argument applied.\n+         *\/\n+        public FilledTemplate fillWith(A a) {\n+            return new FilledTemplate.OneArgs<>(this, a);\n+        }\n+    }\n+\n+    \/**\n+     * A {@link UnfilledTemplate} with two arguments.\n+     *\n+     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n+     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     * @param function The {@link BiFunction} that creates the {@link TemplateBody} given the template arguments.\n+     *\/\n+    public record TwoArgs<A, B>(String arg0Name, String arg1Name, BiFunction<A, B, TemplateBody> function)\n+            implements UnfilledTemplate, TemplateBinding.Bindable {\n+        TemplateBody instantiate(A a, B b) {\n+            return function.apply(a, b);\n+        }\n+\n+        \/**\n+         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n+         * a {@link UnfilledTemplate} for nested code generation, and it can also be used with\n+         * {@link FilledTemplate#render} to render the template to a {@link String}\n+         * directly.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @return The template all (two) arguments applied.\n+         *\/\n+        public FilledTemplate fillWith(A a, B b) {\n+            return new FilledTemplate.TwoArgs<>(this, a, b);\n+        }\n+    }\n+\n+    \/**\n+     * Interface for function with three arguments.\n+     *\n+     * @param <T> Type of the first argument.\n+     * @param <U> Type of the second argument.\n+     * @param <V> Type of the third argument.\n+     * @param <R> Type of the return value.\n+     *\/\n+    @FunctionalInterface\n+    public interface TriFunction<T, U, V, R> {\n+\n+        \/**\n+         * Function definition for the three argument functions.\n+         *\n+         * @param t The first argument.\n+         * @param u The second argument.\n+         * @param v The third argument.\n+         * @return Return value of the three argument function.\n+         *\/\n+        R apply(T t, U u, V v);\n+    }\n+\n+    \/**\n+     * A {@link UnfilledTemplate} with three arguments.\n+     *\n+     * @param arg0Name The name of the first argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n+     * @param arg1Name The name of the second argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n+     * @param arg2Name The name of the third argument, used for hashtag replacements in the {@link UnfilledTemplate}.\n+     * @param <A> The type of the first argument.\n+     * @param <B> The type of the second argument.\n+     * @param <C> The type of the third argument.\n+     * @param function The function with three arguments that creates the {@link TemplateBody} given the template arguments.\n+     *\/\n+    public record ThreeArgs<A, B, C>(String arg0Name, String arg1Name, String arg2Name, TriFunction<A, B, C, TemplateBody> function)\n+            implements UnfilledTemplate, TemplateBinding.Bindable {\n+        TemplateBody instantiate(A a, B b, C c) {\n+            return function.apply(a, b, c);\n+        }\n+\n+        \/**\n+         * Creates a {@link FilledTemplate} which can be used as a {@link Token} inside\n+         * a {@link UnfilledTemplate} for nested code generation, and it can also be used with\n+         * {@link FilledTemplate#render} to render the template to a {@link String}\n+         * directly.\n+         *\n+         * @param a The value for the first argument.\n+         * @param b The value for the second argument.\n+         * @param c The value for the third argument.\n+         * @return The template all (three) arguments applied.\n+         *\/\n+        public FilledTemplate fillWith(A a, B b, C c) {\n+            return new FilledTemplate.ThreeArgs<>(this, a, b, c);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/UnfilledTemplate.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -141,1 +141,1 @@\n-            \/\/ list of lists of TemplateWithArgs:\n+            \/\/ list of lists of FilledTemplate:\n@@ -144,1 +144,1 @@\n-                    testTemplate.withArgs(type.name(), operator, type.generator())).toList()\n+                    testTemplate.fillWith(type.name(), operator, type.generator())).toList()\n@@ -163,1 +163,1 @@\n-        return classTemplate.withArgs(types).render();\n+        return classTemplate.fillWith(types).render();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestAdvanced.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        return template.withArgs(42, \"7\").render();\n+        return template.fillWith(42, \"7\").render();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestSimple.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import compiler.lib.template_framework.UnfilledTemplate;\n@@ -119,1 +120,1 @@\n-        return templateClass.withArgs().render();\n+        return templateClass.render();\n@@ -158,3 +159,3 @@\n-                    templateHello.withArgs(),\n-                    templateCompare.withArgs(7),\n-                    templateCompare.withArgs(42),\n+                    templateHello,\n+                    templateCompare.fillWith(7),\n+                    templateCompare.fillWith(42),\n@@ -168,1 +169,1 @@\n-        return templateClass.withArgs().render();\n+        return templateClass.render();\n@@ -197,1 +198,1 @@\n-                    template1.withArgs(y)\n+                    template1.fillWith(y)\n@@ -216,1 +217,1 @@\n-            template3.withArgs($(\"var\"), 42),\n+            template3.fillWith($(\"var\"), 42),\n@@ -229,5 +230,5 @@\n-                    template1.withArgs(1),\n-                    template1.withArgs(7),\n-                    template2.withArgs(2),\n-                    template2.withArgs(5),\n-                    template4.withArgs(),\n+                    template1.fillWith(1),\n+                    template1.fillWith(7),\n+                    template2.fillWith(2),\n+                    template2.fillWith(5),\n+                    template4,\n@@ -241,1 +242,1 @@\n-        return templateClass.withArgs().render();\n+        return templateClass.render();\n@@ -261,1 +262,1 @@\n-            myHook.insert(template1.withArgs($(\"field\"), x)),\n+            myHook.insert(template1.fillWith($(\"field\"), x)),\n@@ -282,2 +283,2 @@\n-                    template2.withArgs(5),\n-                    template2.withArgs(7),\n+                    template2.fillWith(5),\n+                    template2.fillWith(7),\n@@ -294,1 +295,1 @@\n-        return templateClass.withArgs().render();\n+        return templateClass.render();\n@@ -318,2 +319,2 @@\n-            Hooks.CLASS_HOOK.insert(templateStaticField.withArgs($(\"field\"), 5)),\n-            Hooks.METHOD_HOOK.insert(templateLocalVariable.withArgs($(\"var\"), 11)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.fillWith($(\"field\"), 5)),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.fillWith($(\"var\"), 11)),\n@@ -344,1 +345,1 @@\n-                    templateMethodBody.withArgs(),\n+                    templateMethodBody,\n@@ -361,1 +362,1 @@\n-                    templateMethodBody.withArgs(),\n+                    templateMethodBody,\n@@ -376,1 +377,1 @@\n-        return templateClass.withArgs().render();\n+        return templateClass.render();\n@@ -384,1 +385,1 @@\n-        var binding1 = new TemplateBinding<Template.OneArgs<Integer>>();\n+        var binding1 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n@@ -395,1 +396,1 @@\n-            (fuel() > 0) ? binding1.get().withArgs(depth + 1)\n+            (fuel() > 0) ? binding1.get().fillWith(depth + 1)\n@@ -411,1 +412,1 @@\n-                    template1.withArgs(0),\n+                    template1.fillWith(0),\n@@ -419,1 +420,1 @@\n-        return templateClass.withArgs().render();\n+        return templateClass.render();\n@@ -474,6 +475,6 @@\n-            templateStatus.withArgs(),\n-            Hooks.METHOD_HOOK.insert(templateLocalVariable.withArgs(myInt)),\n-            Hooks.METHOD_HOOK.insert(templateLocalVariable.withArgs(myLong)),\n-            Hooks.CLASS_HOOK.insert(templateStaticField.withArgs(myInt)),\n-            Hooks.CLASS_HOOK.insert(templateStaticField.withArgs(myLong)),\n-            templateStatus.withArgs(),\n+            templateStatus,\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.fillWith(myInt)),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.fillWith(myLong)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.fillWith(myInt)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.fillWith(myLong)),\n+            templateStatus,\n@@ -481,3 +482,3 @@\n-            Collections.nCopies(5, templateSample.withArgs(myInt)),\n-            Collections.nCopies(5, templateSample.withArgs(myLong)),\n-            templateStatus.withArgs(),\n+            Collections.nCopies(5, templateSample.fillWith(myInt)),\n+            Collections.nCopies(5, templateSample.fillWith(myLong)),\n+            templateStatus,\n@@ -493,1 +494,1 @@\n-            templateStatus.withArgs(),\n+            templateStatus,\n@@ -495,3 +496,3 @@\n-            Collections.nCopies(5, templateSample.withArgs(myInt)),\n-            Collections.nCopies(5, templateSample.withArgs(myLong)),\n-            templateStatus.withArgs(),\n+            Collections.nCopies(5, templateSample.fillWith(myInt)),\n+            Collections.nCopies(5, templateSample.fillWith(myLong)),\n+            templateStatus,\n@@ -520,1 +521,1 @@\n-                    templateMain.withArgs(),\n+                    templateMain,\n@@ -537,1 +538,1 @@\n-                    templateOther.withArgs(),\n+                    templateOther,\n@@ -552,1 +553,1 @@\n-        return templateClass.withArgs().render();\n+        return templateClass.render();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":43,"deletions":42,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-            list.stream().map(info -> template1.withArgs(info)).toList(),\n+            list.stream().map(info -> template1.fillWith(info)).toList(),\n@@ -109,1 +109,1 @@\n-        return template2.withArgs().render();\n+        return template2.render();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestFormat.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import compiler.lib.template_framework.FilledTemplate;\n+import compiler.lib.template_framework.UnfilledTemplate;\n@@ -123,1 +125,1 @@\n-        String code = template.withArgs().render();\n+        String code = template.render();\n@@ -134,1 +136,1 @@\n-        String code = template.withArgs().render();\n+        String code = template.render();\n@@ -155,1 +157,1 @@\n-        String code = template.withArgs().render();\n+        String code = template.render();\n@@ -162,3 +164,3 @@\n-        checkEQ(template1.withArgs(\"x\").render(), \"start x end\");\n-        checkEQ(template1.withArgs(\"a\").render(), \"start a end\");\n-        checkEQ(template1.withArgs(\"\" ).render(), \"start  end\");\n+        checkEQ(template1.fillWith(\"x\").render(), \"start x end\");\n+        checkEQ(template1.fillWith(\"a\").render(), \"start a end\");\n+        checkEQ(template1.fillWith(\"\" ).render(), \"start  end\");\n@@ -168,3 +170,3 @@\n-        checkEQ(template2.withArgs(\"x\").render(), \"start x end\");\n-        checkEQ(template2.withArgs(\"a\").render(), \"start a end\");\n-        checkEQ(template2.withArgs(\"\" ).render(), \"start  end\");\n+        checkEQ(template2.fillWith(\"x\").render(), \"start x end\");\n+        checkEQ(template2.fillWith(\"a\").render(), \"start a end\");\n+        checkEQ(template2.fillWith(\"\" ).render(), \"start  end\");\n@@ -174,3 +176,3 @@\n-        checkEQ(template3.withArgs(0  ).render(), \"start 0 end\");\n-        checkEQ(template3.withArgs(22 ).render(), \"start 22 end\");\n-        checkEQ(template3.withArgs(444).render(), \"start 444 end\");\n+        checkEQ(template3.fillWith(0  ).render(), \"start 0 end\");\n+        checkEQ(template3.fillWith(22 ).render(), \"start 22 end\");\n+        checkEQ(template3.fillWith(444).render(), \"start 444 end\");\n@@ -180,3 +182,3 @@\n-        checkEQ(template4.withArgs(0  ).render(), \"start 0 end\");\n-        checkEQ(template4.withArgs(22 ).render(), \"start 22 end\");\n-        checkEQ(template4.withArgs(444).render(), \"start 444 end\");\n+        checkEQ(template4.fillWith(0  ).render(), \"start 0 end\");\n+        checkEQ(template4.fillWith(22 ).render(), \"start 22 end\");\n+        checkEQ(template4.fillWith(444).render(), \"start 444 end\");\n@@ -186,3 +188,3 @@\n-        checkEQ(template5.withArgs(\"\/\").render(), \"start \/ \/ end\");\n-        checkEQ(template5.withArgs(\"\\\\\").render(), \"start \\\\ \\\\ end\");\n-        checkEQ(template5.withArgs(\"\\\\\\\\\").render(), \"start \\\\\\\\ \\\\\\\\ end\");\n+        checkEQ(template5.fillWith(\"\/\").render(), \"start \/ \/ end\");\n+        checkEQ(template5.fillWith(\"\\\\\").render(), \"start \\\\ \\\\ end\");\n+        checkEQ(template5.fillWith(\"\\\\\\\\\").render(), \"start \\\\\\\\ \\\\\\\\ end\");\n@@ -194,3 +196,3 @@\n-        checkEQ(template1.withArgs(\"x\", \"y\").render(), \"start x y end\");\n-        checkEQ(template1.withArgs(\"a\", \"b\").render(), \"start a b end\");\n-        checkEQ(template1.withArgs(\"\",  \"\" ).render(), \"start   end\");\n+        checkEQ(template1.fillWith(\"x\", \"y\").render(), \"start x y end\");\n+        checkEQ(template1.fillWith(\"a\", \"b\").render(), \"start a b end\");\n+        checkEQ(template1.fillWith(\"\",  \"\" ).render(), \"start   end\");\n@@ -200,3 +202,3 @@\n-        checkEQ(template2.withArgs(\"x\", \"y\").render(), \"start x y end\");\n-        checkEQ(template2.withArgs(\"a\", \"b\").render(), \"start a b end\");\n-        checkEQ(template2.withArgs(\"\",  \"\" ).render(), \"start   end\");\n+        checkEQ(template2.fillWith(\"x\", \"y\").render(), \"start x y end\");\n+        checkEQ(template2.fillWith(\"a\", \"b\").render(), \"start a b end\");\n+        checkEQ(template2.fillWith(\"\",  \"\" ).render(), \"start   end\");\n@@ -206,3 +208,3 @@\n-        checkEQ(template3.withArgs(0,   1  ).render(), \"start 0 1 end\");\n-        checkEQ(template3.withArgs(22,  33 ).render(), \"start 22 33 end\");\n-        checkEQ(template3.withArgs(444, 555).render(), \"start 444 555 end\");\n+        checkEQ(template3.fillWith(0,   1  ).render(), \"start 0 1 end\");\n+        checkEQ(template3.fillWith(22,  33 ).render(), \"start 22 33 end\");\n+        checkEQ(template3.fillWith(444, 555).render(), \"start 444 555 end\");\n@@ -212,3 +214,3 @@\n-        checkEQ(template4.withArgs(0,   1  ).render(), \"start 0 1 end\");\n-        checkEQ(template4.withArgs(22,  33 ).render(), \"start 22 33 end\");\n-        checkEQ(template4.withArgs(444, 555).render(), \"start 444 555 end\");\n+        checkEQ(template4.fillWith(0,   1  ).render(), \"start 0 1 end\");\n+        checkEQ(template4.fillWith(22,  33 ).render(), \"start 22 33 end\");\n+        checkEQ(template4.fillWith(444, 555).render(), \"start 444 555 end\");\n@@ -220,3 +222,3 @@\n-        checkEQ(template1.withArgs(\"x\", \"y\", \"z\").render(), \"start x y z end\");\n-        checkEQ(template1.withArgs(\"a\", \"b\", \"c\").render(), \"start a b c end\");\n-        checkEQ(template1.withArgs(\"\",  \"\", \"\" ).render(),  \"start    end\");\n+        checkEQ(template1.fillWith(\"x\", \"y\", \"z\").render(), \"start x y z end\");\n+        checkEQ(template1.fillWith(\"a\", \"b\", \"c\").render(), \"start a b c end\");\n+        checkEQ(template1.fillWith(\"\",  \"\", \"\" ).render(),  \"start    end\");\n@@ -226,3 +228,3 @@\n-        checkEQ(template1.withArgs(\"x\", \"y\", \"z\").render(), \"start x y z end\");\n-        checkEQ(template1.withArgs(\"a\", \"b\", \"c\").render(), \"start a b c end\");\n-        checkEQ(template1.withArgs(\"\",  \"\", \"\" ).render(),  \"start    end\");\n+        checkEQ(template1.fillWith(\"x\", \"y\", \"z\").render(), \"start x y z end\");\n+        checkEQ(template1.fillWith(\"a\", \"b\", \"c\").render(), \"start a b c end\");\n+        checkEQ(template1.fillWith(\"\",  \"\", \"\" ).render(),  \"start    end\");\n@@ -232,3 +234,3 @@\n-        checkEQ(template3.withArgs(0,   1  , 2  ).render(), \"start 0 1 2 end\");\n-        checkEQ(template3.withArgs(22,  33 , 44 ).render(), \"start 22 33 44 end\");\n-        checkEQ(template3.withArgs(444, 555, 666).render(), \"start 444 555 666 end\");\n+        checkEQ(template3.fillWith(0,   1  , 2  ).render(), \"start 0 1 2 end\");\n+        checkEQ(template3.fillWith(22,  33 , 44 ).render(), \"start 22 33 44 end\");\n+        checkEQ(template3.fillWith(444, 555, 666).render(), \"start 444 555 666 end\");\n@@ -238,3 +240,3 @@\n-        checkEQ(template3.withArgs(0,   1  , 2  ).render(), \"start 0 1 2 end\");\n-        checkEQ(template3.withArgs(22,  33 , 44 ).render(), \"start 22 33 44 end\");\n-        checkEQ(template3.withArgs(444, 555, 666).render(), \"start 444 555 666 end\");\n+        checkEQ(template3.fillWith(0,   1  , 2  ).render(), \"start 0 1 2 end\");\n+        checkEQ(template3.fillWith(22,  33 , 44 ).render(), \"start 22 33 44 end\");\n+        checkEQ(template3.fillWith(444, 555, 666).render(), \"start 444 555 666 end\");\n@@ -252,3 +254,3 @@\n-            \"Universe \", template1.withArgs(), \" {\\n\",\n-                template2.withArgs(\"up\", \"down\"),\n-                template2.withArgs(a1, a2),\n+            \"Universe \", template1, \" {\\n\",\n+                template2.fillWith(\"up\", \"down\"),\n+                template2.fillWith(a1, a2),\n@@ -259,1 +261,1 @@\n-            template3.withArgs(\"low\", \"high\"),\n+            template3.fillWith(\"low\", \"high\"),\n@@ -261,1 +263,1 @@\n-                template3.withArgs(\"42\", \"24\"),\n+                template3.fillWith(\"42\", \"24\"),\n@@ -265,1 +267,1 @@\n-        String code = template4.withArgs().render();\n+        String code = template4.render();\n@@ -294,1 +296,1 @@\n-                hook1.insert(template1.withArgs())\n+                hook1.insert(template1)\n@@ -299,1 +301,1 @@\n-        String code = template2.withArgs().render();\n+        String code = template2.render();\n@@ -314,1 +316,1 @@\n-        var template1 = Template.make(() -> body(\"Hello\\n\", template0.withArgs()));\n+        var template1 = Template.make(() -> body(\"Hello\\n\", template0));\n@@ -318,1 +320,1 @@\n-            template0.withArgs(),\n+            template0,\n@@ -321,2 +323,2 @@\n-                template0.withArgs(),\n-                hook1.insert(template1.withArgs())\n+                template0,\n+                hook1.insert(template1)\n@@ -324,1 +326,1 @@\n-            template0.withArgs(),\n+            template0,\n@@ -328,1 +330,1 @@\n-        String code = template2.withArgs().render();\n+        String code = template2.render();\n@@ -353,5 +355,5 @@\n-                template1.withArgs(\"one\"),\n-                template1.withArgs(\"two\"),\n-                hook1.insert(template1.withArgs(\"intoHook1a\")),\n-                hook1.insert(template1.withArgs(\"intoHook1b\")),\n-                template1.withArgs(\"three\"),\n+                template1.fillWith(\"one\"),\n+                template1.fillWith(\"two\"),\n+                hook1.insert(template1.fillWith(\"intoHook1a\")),\n+                hook1.insert(template1.fillWith(\"intoHook1b\")),\n+                template1.fillWith(\"three\"),\n@@ -359,3 +361,3 @@\n-                    template1.withArgs(\"four\"),\n-                    hook1.insert(template1.withArgs(\"intoHook1c\")),\n-                    template1.withArgs(\"five\")\n+                    template1.fillWith(\"four\"),\n+                    hook1.insert(template1.fillWith(\"intoHook1c\")),\n+                    template1.fillWith(\"five\")\n@@ -363,1 +365,1 @@\n-                template1.withArgs(\"six\"),\n+                template1.fillWith(\"six\"),\n@@ -365,3 +367,3 @@\n-                template1.withArgs(\"seven\"),\n-                hook1.insert(template1.withArgs(\"intoHook1d\")),\n-                template1.withArgs(\"eight\"),\n+                template1.fillWith(\"seven\"),\n+                hook1.insert(template1.fillWith(\"intoHook1d\")),\n+                template1.fillWith(\"eight\"),\n@@ -369,3 +371,3 @@\n-                    template1.withArgs(\"nine\"),\n-                    hook1.insert(template1.withArgs(\"intoHook1e\")),\n-                    template1.withArgs(\"ten\")\n+                    template1.fillWith(\"nine\"),\n+                    hook1.insert(template1.fillWith(\"intoHook1e\")),\n+                    template1.fillWith(\"ten\")\n@@ -373,1 +375,1 @@\n-                template1.withArgs(\"eleven\")\n+                template1.fillWith(\"eleven\")\n@@ -378,1 +380,1 @@\n-        String code = template2.withArgs().render();\n+        String code = template2.render();\n@@ -411,4 +413,4 @@\n-            template1.withArgs(b + \"A\"),\n-            hook1.insert(template1.withArgs(b + \"B\")),\n-            hook2.insert(template1.withArgs(b + \"C\")),\n-            template1.withArgs(b + \"D\"),\n+            template1.fillWith(b + \"A\"),\n+            hook1.insert(template1.fillWith(b + \"B\")),\n+            hook2.insert(template1.fillWith(b + \"C\")),\n+            template1.fillWith(b + \"D\"),\n@@ -416,4 +418,4 @@\n-                template1.withArgs(b + \"E\"),\n-                hook1.insert(template1.withArgs(b + \"F\")),\n-                hook2.insert(template1.withArgs(b + \"G\")),\n-                template1.withArgs(b + \"H\"),\n+                template1.fillWith(b + \"E\"),\n+                hook1.insert(template1.fillWith(b + \"F\")),\n+                hook2.insert(template1.fillWith(b + \"G\")),\n+                template1.fillWith(b + \"H\"),\n@@ -421,4 +423,4 @@\n-                    template1.withArgs(b + \"I\"),\n-                    hook1.insert(template1.withArgs(b + \"J\")),\n-                    hook2.insert(template1.withArgs(b + \"K\")),\n-                    template1.withArgs(b + \"L\")\n+                    template1.fillWith(b + \"I\"),\n+                    hook1.insert(template1.fillWith(b + \"J\")),\n+                    hook2.insert(template1.fillWith(b + \"K\")),\n+                    template1.fillWith(b + \"L\")\n@@ -426,4 +428,4 @@\n-                template1.withArgs(b + \"M\"),\n-                hook1.insert(template1.withArgs(b + \"N\")),\n-                hook2.insert(template1.withArgs(b + \"O\")),\n-                template1.withArgs(b + \"O\")\n+                template1.fillWith(b + \"M\"),\n+                hook1.insert(template1.fillWith(b + \"N\")),\n+                hook2.insert(template1.fillWith(b + \"O\")),\n+                template1.fillWith(b + \"O\")\n@@ -431,4 +433,4 @@\n-            template1.withArgs(b + \"P\"),\n-            hook1.insert(template1.withArgs(b + \"Q\")),\n-            hook2.insert(template1.withArgs(b + \"R\")),\n-            template1.withArgs(b + \"S\"),\n+            template1.fillWith(b + \"P\"),\n+            hook1.insert(template1.fillWith(b + \"Q\")),\n+            hook2.insert(template1.fillWith(b + \"R\")),\n+            template1.fillWith(b + \"S\"),\n@@ -446,1 +448,1 @@\n-                    template2.withArgs(\"sub-\"),\n+                    template2.fillWith(\"sub-\"),\n@@ -455,1 +457,1 @@\n-        String code = template3.withArgs().render();\n+        String code = template3.render();\n@@ -499,3 +501,3 @@\n-            template1.withArgs(b + \"A\"),\n-            hook1.insert(template1.withArgs(b + \"B\")), \/\/ sub-B is rendered before template2.\n-            template1.withArgs(b + \"C\"),\n+            template1.fillWith(b + \"A\"),\n+            hook1.insert(template1.fillWith(b + \"B\")), \/\/ sub-B is rendered before template2.\n+            template1.fillWith(b + \"C\"),\n@@ -505,3 +507,3 @@\n-                template1.withArgs(b + \"E\"),\n-                hook1.insert(template1.withArgs(b + \"E\")),\n-                template1.withArgs(b + \"F\")\n+                template1.fillWith(b + \"E\"),\n+                hook1.insert(template1.fillWith(b + \"E\")),\n+                template1.fillWith(b + \"F\")\n@@ -518,1 +520,1 @@\n-                hook1.insert(template2.withArgs(\"sub-\")),\n+                hook1.insert(template2.fillWith(\"sub-\")),\n@@ -525,1 +527,1 @@\n-        String code = template3.withArgs().render();\n+        String code = template3.render();\n@@ -556,1 +558,1 @@\n-            template1.withArgs($(\"name\")),\n+            template1.fillWith($(\"name\")),\n@@ -566,3 +568,3 @@\n-            template1.withArgs(\"name\"),     \/\/ does not capture -> literal \"$name\"\n-            template1.withArgs(\"$name\"),    \/\/ does not capture -> literal \"$name\"\n-            template1.withArgs($(\"name\")),  \/\/ capture replacement name \"name_1\"\n+            template1.fillWith(\"name\"),     \/\/ does not capture -> literal \"$name\"\n+            template1.fillWith(\"$name\"),    \/\/ does not capture -> literal \"$name\"\n+            template1.fillWith($(\"name\")),  \/\/ capture replacement name \"name_1\"\n@@ -575,1 +577,1 @@\n-                hook1.insert(template1.withArgs($(\"name\"))),\n+                hook1.insert(template1.fillWith($(\"name\"))),\n@@ -577,1 +579,1 @@\n-                template1.withArgs($(\"name\")),\n+                template1.fillWith($(\"name\")),\n@@ -579,1 +581,1 @@\n-                hook1.insert(template2.withArgs($(\"name\"))),\n+                hook1.insert(template2.fillWith($(\"name\"))),\n@@ -585,1 +587,1 @@\n-        String code = template3.withArgs().render();\n+        String code = template3.render();\n@@ -634,1 +636,1 @@\n-            template1.withArgs(\"alpha\"),\n+            template1.fillWith(\"alpha\"),\n@@ -639,1 +641,1 @@\n-                template1.withArgs(\"beta\"),\n+                template1.fillWith(\"beta\"),\n@@ -646,1 +648,1 @@\n-            template2.withArgs(5),\n+            template2.fillWith(5),\n@@ -650,1 +652,1 @@\n-        String code = template3.withArgs().render();\n+        String code = template3.render();\n@@ -692,2 +694,2 @@\n-            a > 0 ? template1.withArgs(\"A_\" + a)\n-                  : template2.withArgs(\"B_\" + a),\n+            a > 0 ? template1.fillWith(\"A_\" + a)\n+                  : template2.fillWith(\"B_\" + a),\n@@ -699,1 +701,1 @@\n-            template3.withArgs(-1),\n+            template3.fillWith(-1),\n@@ -701,1 +703,1 @@\n-            template3.withArgs(0),\n+            template3.fillWith(0),\n@@ -703,1 +705,1 @@\n-            template3.withArgs(1),\n+            template3.fillWith(1),\n@@ -705,1 +707,1 @@\n-            template3.withArgs(2),\n+            template3.fillWith(2),\n@@ -709,1 +711,1 @@\n-        String code = template4.withArgs().render();\n+        String code = template4.render();\n@@ -747,1 +749,1 @@\n-        var binding1 = new TemplateBinding<Template.OneArgs<Integer>>();\n+        var binding1 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n@@ -753,1 +755,1 @@\n-            i < 0 ? \"done\\n\" : binding1.get().withArgs(i - 1),\n+            i < 0 ? \"done\\n\" : binding1.get().fillWith(i - 1),\n@@ -761,1 +763,1 @@\n-            template1.withArgs(3),\n+            template1.fillWith(3),\n@@ -765,1 +767,1 @@\n-        String code = template2.withArgs().render();\n+        String code = template2.render();\n@@ -793,1 +795,1 @@\n-        var binding2 = new TemplateBinding<Template.OneArgs<Integer>>();\n+        var binding2 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n@@ -798,2 +800,2 @@\n-            template1.withArgs(),\n-            fuel() <= 60.f ? \"done\" : binding2.get().withArgs(i - 1),\n+            template1,\n+            fuel() <= 60.f ? \"done\" : binding2.get().fillWith(i - 1),\n@@ -806,1 +808,1 @@\n-            template2.withArgs(3),\n+            template2.fillWith(3),\n@@ -810,1 +812,1 @@\n-        String code = template3.withArgs().render();\n+        String code = template3.render();\n@@ -840,1 +842,1 @@\n-        var binding2 = new TemplateBinding<Template.OneArgs<Integer>>();\n+        var binding2 = new TemplateBinding<UnfilledTemplate.OneArgs<Integer>>();\n@@ -846,2 +848,2 @@\n-            template1.withArgs(),\n-            fuel() <= 5.f ? \"done\\n\" : binding2.get().withArgs(i - 1),\n+            template1,\n+            fuel() <= 5.f ? \"done\\n\" : binding2.get().fillWith(i - 1),\n@@ -857,1 +859,1 @@\n-            template2.withArgs(3),\n+            template2.fillWith(3),\n@@ -861,1 +863,1 @@\n-        String code = template3.withArgs().render(20.0f);\n+        String code = template3.render(20.0f);\n@@ -896,1 +898,1 @@\n-            template1.withArgs()\n+            template1\n@@ -901,1 +903,1 @@\n-            hook1.insert(template2.withArgs($(\"name\"), myInt)),\n+            hook1.insert(template2.fillWith($(\"name\"), myInt)),\n@@ -908,1 +910,1 @@\n-            template1.withArgs(),\n+            template1,\n@@ -910,1 +912,1 @@\n-                template1.withArgs(),\n+                template1,\n@@ -912,1 +914,1 @@\n-                template3.withArgs(),\n+                template3,\n@@ -914,1 +916,1 @@\n-                template1.withArgs(),\n+                template1,\n@@ -916,1 +918,1 @@\n-                template2.withArgs($(\"name\"), myInt),\n+                template2.fillWith($(\"name\"), myInt),\n@@ -918,1 +920,1 @@\n-                template1.withArgs()\n+                template1\n@@ -920,1 +922,1 @@\n-            template1.withArgs(),\n+            template1,\n@@ -924,1 +926,1 @@\n-        String code = template4.withArgs().render();\n+        String code = template4.render();\n@@ -960,1 +962,1 @@\n-            template1.withArgs(type)\n+            template1.fillWith(type)\n@@ -966,1 +968,1 @@\n-            template1.withArgs(type)\n+            template1.fillWith(type)\n@@ -971,1 +973,1 @@\n-            hook1.insert(template2.withArgs($(\"name\"), type)),\n+            hook1.insert(template2.fillWith($(\"name\"), type)),\n@@ -978,1 +980,1 @@\n-            hook1.insert(template3.withArgs($(\"name\"), type)),\n+            hook1.insert(template3.fillWith($(\"name\"), type)),\n@@ -999,1 +1001,1 @@\n-            template1.withArgs(myInt),\n+            template1.fillWith(myInt),\n@@ -1002,1 +1004,1 @@\n-                template1.withArgs(myInt),\n+                template1.fillWith(myInt),\n@@ -1004,1 +1006,1 @@\n-                template5.withArgs(myInt),\n+                template5.fillWith(myInt),\n@@ -1006,2 +1008,2 @@\n-                template7.withArgs(myInt),\n-                template1.withArgs(myInt),\n+                template7.fillWith(myInt),\n+                template1.fillWith(myInt),\n@@ -1009,1 +1011,1 @@\n-                template4.withArgs(myInt),\n+                template4.fillWith(myInt),\n@@ -1011,2 +1013,2 @@\n-                template6.withArgs(myInt),\n-                template1.withArgs(myInt)\n+                template6.fillWith(myInt),\n+                template1.fillWith(myInt)\n@@ -1014,1 +1016,1 @@\n-            template1.withArgs(myInt),\n+            template1.fillWith(myInt),\n@@ -1018,1 +1020,1 @@\n-        String code = template8.withArgs().render();\n+        String code = template8.render();\n@@ -1064,1 +1066,1 @@\n-            template1.withArgs(myInt),\n+            template1.fillWith(myInt),\n@@ -1067,1 +1069,1 @@\n-                template1.withArgs(myInt),\n+                template1.fillWith(myInt),\n@@ -1070,1 +1072,1 @@\n-                template1.withArgs(myInt),\n+                template1.fillWith(myInt),\n@@ -1073,1 +1075,1 @@\n-                template1.withArgs(myInt)\n+                template1.fillWith(myInt)\n@@ -1075,1 +1077,1 @@\n-            template1.withArgs(myInt),\n+            template1.fillWith(myInt),\n@@ -1079,1 +1081,1 @@\n-        String code = template2.withArgs().render();\n+        String code = template2.render();\n@@ -1108,1 +1110,1 @@\n-            list.stream().map(item -> template1.withArgs(item)).toList(),\n+            list.stream().map(item -> template1.fillWith(item)).toList(),\n@@ -1121,1 +1123,1 @@\n-        String code = template2.withArgs(list).render();\n+        String code = template2.fillWith(list).render();\n@@ -1146,1 +1148,1 @@\n-            template1.withArgs().render(),\n+            template1.render(),\n@@ -1150,1 +1152,1 @@\n-        String code = template2.withArgs().render();\n+        String code = template2.render();\n@@ -1163,1 +1165,1 @@\n-            hook1.insert(template1.withArgs()),\n+            hook1.insert(template1),\n@@ -1167,1 +1169,1 @@\n-        String code = template2.withArgs().render();\n+        String code = template2.render();\n@@ -1176,1 +1178,1 @@\n-        String code = template1.withArgs().render();\n+        String code = template1.render();\n@@ -1184,1 +1186,1 @@\n-        String code = template1.withArgs(\"x\", \"y\").render();\n+        String code = template1.fillWith(\"x\", \"y\").render();\n@@ -1193,1 +1195,1 @@\n-        String code = template1.withArgs(\"y\").render();\n+        String code = template1.fillWith(\"y\").render();\n@@ -1203,1 +1205,1 @@\n-        String code = template1.withArgs().render();\n+        String code = template1.render();\n@@ -1211,1 +1213,1 @@\n-        String code = template1.withArgs().render();\n+        String code = template1.render();\n@@ -1215,1 +1217,1 @@\n-        var binding = new TemplateBinding<Template.ZeroArgs>();\n+        var binding = new TemplateBinding<FilledTemplate.ZeroArgs>();\n@@ -1224,1 +1226,1 @@\n-        var binding = new TemplateBinding<Template.ZeroArgs>();\n+        var binding = new TemplateBinding<FilledTemplate.ZeroArgs>();\n@@ -1227,1 +1229,1 @@\n-            binding.get().withArgs()\n+            binding.get()\n@@ -1229,1 +1231,1 @@\n-        String code = template1.withArgs().render();\n+        String code = template1.render();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":183,"deletions":181,"binary":false,"changes":364,"status":"modified"}]}