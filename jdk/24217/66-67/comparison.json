{"files":[{"patch":"@@ -397,2 +397,13 @@\n-    \/\/ We saw the use of custom hooks above, but now we look at the use of CLASS_HOOK and METHOD_HOOK\n-    \/\/ from the Template Library.\n+    \/\/ We saw the use of custom hooks above, but now we look at the use of CLASS_HOOK and METHOD_HOOK.\n+    \/\/ By convention, we use the CLASS_HOOK for class scopes, and METHOD_HOOK for method scopes.\n+    \/\/ Whenever we open a class scope, we should anchor a CLASS_HOOK for that scope, and whenever we\n+    \/\/ open a method, we should anchor a METHOD_HOOK. Conversely, this allows us to check if we are\n+    \/\/ inside a class or method scope by querying \"isAnchored\". This convention helps us when building\n+    \/\/ a large library of Templates. But if you are writing your own self-contained set of Templates,\n+    \/\/ you do not have to follow this convention.\n+    \/\/\n+    \/\/ Hooks are \"re-entrant\", that is we can anchor the same hook inside a scope that we already\n+    \/\/ anchored it previously. The \"Hook.insert\" always goes to the innermost anchoring of that\n+    \/\/ hook. There are cases where \"re-entrant\" Hooks are helpful such as nested classes, where\n+    \/\/ there is a class scope inside another class scope. Similarly, we can nest lambda bodies\n+    \/\/ inside method bodies, so also METHOD_HOOK can be used in such a \"re-entrant\" way.\n@@ -495,0 +506,3 @@\n+            \/\/\n+            \/\/ Note: if we forget to check the fuel(), the renderer causes a\n+            \/\/       StackOverflowException, because the recursion never ends.\n@@ -526,2 +540,2 @@\n-    \/\/ add some fields and registers in one Template, and later on, in another Template, we\n-    \/\/ can access these fields and registers again with \"dataNames()\".\n+    \/\/ add some fields and variables in one Template, and later on, in another Template, we\n+    \/\/ can access these fields and variables again with \"dataNames()\".\n@@ -636,1 +650,1 @@\n-            return other instanceof MyPrimitive(String n) && n == name();\n+            return other instanceof MyPrimitive(String n) && n.equals(name());\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"}]}