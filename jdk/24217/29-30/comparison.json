{"files":[{"patch":"@@ -53,1 +53,1 @@\n- * Once we rendered the source code to a {@link String}, we can compile it with the {@code CompileFramework}.\n+ * Once we rendered the source code to a {@link String}, we can compile it with the {@link CompileFramework}.\n@@ -86,1 +86,1 @@\n- * To get an executable test, we define a Template that produces a class body with a main method. The Template\n+ * To get an executable test, we define a {@link Template} that produces a class body with a main method. The Template\n@@ -88,1 +88,1 @@\n- * the {@code TestFramework} to call our {@code @Test} methods.\n+ * the {@link TestFramework} to call our {@code @Test} methods.\n@@ -111,1 +111,1 @@\n- *     \/\/ list of lists of (Template) Tokens:\n+ *     \/\/ list of lists of TemplateToken:\n@@ -125,0 +125,1 @@\n+ * <p>\n@@ -143,1 +144,1 @@\n- * A Template can have zero or more arguments. A template can be created with {@code make} methods like\n+ * A {@link Template} can have zero or more arguments. A template can be created with {@code make} methods like\n@@ -145,2 +146,2 @@\n- * (e.g. {@code Template.TwoArgs} for two arguments). This allows the use of Generics for the\n- * Template argument types, i.e. the Template arguments can be type checked.\n+ * (e.g. {@link Template.TwoArgs} for two arguments). This allows the use of Generics for the\n+ * Template argument types which enables type checking of the Template arguments.\n@@ -150,2 +151,2 @@\n- * Alternatively, we can generate a {@link Token} (e.g. {@link Template.ZeroArgs#asToken()}),\n- * and use the {@link Token} inside another {@link Template#body}.\n+ * Alternatively, we can generate a {@link Token} (more specifically, a {@link TemplateToken}) with {@code asToken()}\n+ * (e.g. {@link Template.ZeroArgs#asToken()}), and use the {@link Token} inside another {@link Template#body}.\n@@ -168,1 +169,1 @@\n- * A {@link TemplateToken} can not just be used in {@link Template#body}, but but it can also be\n+ * A {@link TemplateToken} can not just be used in {@link Template#body}, but it can also be\n@@ -176,3 +177,5 @@\n- * with a certain amount of {@link #fuel}, which is decreased at each Template nesting by a certain amount\n- * (can be changed with {@link #setFuelCost}). Recursive templates are supposed to terminate once the {@link #fuel}\n- * is depleted (i.e. reaches zero).\n+ * with a certain amount of {@link #fuel} (default: 100, see {@link #DEFAULT_FUEL}), which is decreased at each\n+ * Template nesting by a certain amount (default: 10, see {@link #DEFAULT_FUEL_COST}). The default fuel for a\n+ * template can be changed when we {@code render()} it (e.g. {@link ZeroArgs#render(float)}) and the default\n+ * fuel cost with {@link #setFuelCost}) when defining the {@link #body(Object...)}. Recursive templates are\n+ * supposed to terminate once the {@link #fuel} is depleted (i.e. reaches zero).\n@@ -229,1 +232,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n@@ -410,1 +413,1 @@\n-            return new TemplateToken.ThreeArgs(this, a, b, c).render(fuel);\n+            return new TemplateToken.ThreeArgs<>(this, a, b, c).render(fuel);\n@@ -414,1 +417,0 @@\n-\n@@ -612,1 +614,2 @@\n-     * Default amount of fuel for Template rendering. It guides the nesting depth of Templates.\n+     * Default amount of fuel for Template rendering. It guides the nesting depth of Templates. Can be changed when\n+     * rendering a template with {@code render(fuel)} (e.g. {@link ZeroArgs#render(float)}).\n@@ -618,1 +621,2 @@\n-     * nesting level, and once the {@link #fuel} reaches zero, the nesting is supposed to terminate.\n+     * nesting level, and once the {@link #fuel} reaches zero, the nesting is supposed to terminate. Can be changed\n+     * with {@link #setFuelCost(float)} inside {@link #body(Object...)}.\n@@ -631,1 +635,4 @@\n-     * the recursive use of Templates. We {@link Template.OneArgs#render} with {@code 30} total fuel, and spend {@code 5} fuel at each recursion level.\n+     * the recursive use of Templates. We {@link Template.OneArgs#render} with {@code 30} total fuel, \n+     * and spend {@code 5} fuel at each recursion level.\n+     * \n+     * <p>\n@@ -640,1 +647,1 @@\n-     *     (fuel() > 0) ? binding.get().asToken(depth + 1)\n+     *     (fuel() > 0) ? binding.get().asToken(depth + 1) :\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":27,"deletions":20,"binary":false,"changes":47,"status":"modified"}]}