{"files":[{"patch":"@@ -7,2 +7,0 @@\n-\n-The [Template Library](..\/template_library\/README.md) provides a large number of Templates which can be used to create anything from simple regression tests to complex fuzzers.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/README.md","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.template_framework.library;\n+\n+import compiler.lib.template_framework.Hook;\n+\n+\/**\n+ * Provides a hook for class and method scopes, to be used in Templates.\n+ *\/\n+public abstract class Hooks {\n+    private Hooks() {} \/\/ Avoid instanciation and need for documentation.\n+\n+    \/**\n+     * Template {@link Hook} used by the Template Library for class scopes, to insert\n+     * fields and methods.\n+     *\/\n+    public static final Hook CLASS_HOOK = new Hook(\"Class\");\n+\n+    \/**\n+     * Template {@link Hook} used by the Template Library for method scopes, to insert\n+     * local variables, and computations for local variables at the beginning of a\n+     * method.\n+     *\/\n+    public static final Hook METHOD_HOOK = new Hook(\"Method\");\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/library\/Hooks.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.template_library;\n-\n-import compiler.lib.template_framework.Hook;\n-\n-\/**\n- * The Library provides a collection of helpful Templates and Hooks.\n- *\/\n-public abstract class Library {\n-    private Library() {} \/\/ Avoid instanciation and need for documentation.\n-\n-    \/**\n-     * Template {@link Hook} used by the Template Library for class scopes, to insert\n-     * fields and methods.\n-     *\/\n-    public static final Hook CLASS_HOOK = new Hook(\"Class\");\n-\n-    \/**\n-     * Template {@link Hook} used by the Template Library for method scopes, to insert\n-     * local variables, and computations for local variables at the beginning of a\n-     * method.\n-     *\/\n-    public static final Hook METHOD_HOOK = new Hook(\"Method\");\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_library\/Library.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -53,1 +53,1 @@\n-import compiler.lib.template_library.Library;\n+import compiler.lib.template_framework.library.Hooks;\n@@ -232,1 +232,1 @@\n-        \/\/ Note: generally we prefer using the pre-defined Library.CLASS_HOOK and Library.METHOD_HOOK from the Library,\n+        \/\/ Note: generally we prefer using the pre-defined CLASS_HOOK and METHOD_HOOK from the library,\n@@ -282,1 +282,1 @@\n-    \/\/ We saw the use of custom hooks above, but now we look at the use of Library.CLASS_HOOK and Library.METHOD_HOOK\n+    \/\/ We saw the use of custom hooks above, but now we look at the use of CLASS_HOOK and METHOD_HOOK\n@@ -303,2 +303,2 @@\n-            Library.CLASS_HOOK.insert(templateStaticField.withArgs($(\"field\"), 5)),\n-            Library.METHOD_HOOK.insert(templateLocalVariable.withArgs($(\"var\"), 11)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.withArgs($(\"field\"), 5)),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.withArgs($(\"var\"), 11)),\n@@ -319,1 +319,1 @@\n-            Library.CLASS_HOOK.set(\n+            Hooks.CLASS_HOOK.set(\n@@ -324,1 +324,1 @@\n-                Library.METHOD_HOOK.set(\n+                Hooks.METHOD_HOOK.set(\n@@ -342,1 +342,1 @@\n-                Library.METHOD_HOOK.set(\n+                Hooks.METHOD_HOOK.set(\n@@ -460,4 +460,4 @@\n-            Library.METHOD_HOOK.insert(templateLocalVariable.withArgs(myInt)),\n-            Library.METHOD_HOOK.insert(templateLocalVariable.withArgs(myLong)),\n-            Library.CLASS_HOOK.insert(templateStaticField.withArgs(myInt)),\n-            Library.CLASS_HOOK.insert(templateStaticField.withArgs(myLong)),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.withArgs(myInt)),\n+            Hooks.METHOD_HOOK.insert(templateLocalVariable.withArgs(myLong)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.withArgs(myInt)),\n+            Hooks.CLASS_HOOK.insert(templateStaticField.withArgs(myLong)),\n@@ -495,1 +495,1 @@\n-            Library.CLASS_HOOK.set(\n+            Hooks.CLASS_HOOK.set(\n@@ -500,1 +500,1 @@\n-                Library.METHOD_HOOK.set(\n+                Hooks.METHOD_HOOK.set(\n@@ -518,1 +518,1 @@\n-                Library.METHOD_HOOK.set(\n+                Hooks.METHOD_HOOK.set(\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}