{"files":[{"patch":"@@ -226,1 +226,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n@@ -270,1 +270,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n@@ -280,1 +280,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n@@ -319,1 +319,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n@@ -330,1 +330,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n@@ -395,1 +395,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n@@ -407,1 +407,1 @@\n-         * Renders the {@link Template} to {@link String}.\n+         * Renders the {@link Template} to a {@link String}.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,0 +72,16 @@\n+    \/\/ Simulate a Classes. Subtypes start with the name of the super type.\n+    private record MyClass(String name) implements Name.Type {\n+        @Override\n+        public boolean isSubtypeOf(Name.Type other) {\n+            return other instanceof MyClass(String n) && name().startsWith(n);\n+        }\n+\n+        @Override\n+        public String toString() { return name(); }\n+    }\n+    private static final MyClass myClassA   = new MyClass(\"myClassA\");\n+    private static final MyClass myClassA1  = new MyClass(\"myClassA1\");\n+    private static final MyClass myClassA2  = new MyClass(\"myClassA2\");\n+    private static final MyClass myClassA11 = new MyClass(\"myClassA11\");\n+    private static final MyClass myClassB   = new MyClass(\"myClassB\");\n+\n@@ -94,0 +110,1 @@\n+        testNames4();\n@@ -1094,0 +1111,71 @@\n+    public static void testNames4() {\n+        var hook1 = new Hook(\"Hook1\");\n+\n+        var template1 = Template.make(\"type\", (Name.Type type) -> body(\n+            \"  [#type: \", weighNames(type, true), \" and \", weighNames(type, false), \"]\\n\"\n+        ));\n+\n+        List<Name.Type> types = List.of(myClassA, myClassA1, myClassA2, myClassA11, myClassB);\n+        var template2 = Template.make(() -> body(\n+            \"Weigh Names:\\n\",\n+            types.stream().map(t -> template1.asToken(t)).toList()\n+        ));\n+\n+        var template3 = Template.make(\"type\", (Name.Type type) -> body(\n+            let(\"name\", sampleName(type, true)),\n+            \"Sample #type: #name\\n\"\n+        ));\n+\n+        var template4 = Template.make(() -> body(\n+            \"class $W {\\n\",\n+            template2.asToken(),\n+            hook1.set(\n+                \"Create name for myClassA11, should be visible for the super classes\\n\",\n+                addName(new Name($(\"v1\"), myClassA11, true, 1)),\n+                template3.asToken(myClassA11),\n+                template3.asToken(myClassA1),\n+                template3.asToken(myClassA),\n+                \"Create name for myClassA, should never be visible for the sub classes\\n\",\n+                addName(new Name($(\"v2\"), myClassA, true, 1)),\n+                template3.asToken(myClassA11),\n+                template3.asToken(myClassA1),\n+                template2.asToken()\n+            ),\n+            template2.asToken(),\n+            \"}\\n\"\n+        ));\n+\n+        String code = template4.render();\n+        String expected =\n+            \"\"\"\n+            class W_1 {\n+            Weigh Names:\n+              [myClassA: 0L and 0L]\n+              [myClassA1: 0L and 0L]\n+              [myClassA2: 0L and 0L]\n+              [myClassA11: 0L and 0L]\n+              [myClassB: 0L and 0L]\n+            Create name for myClassA11, should be visible for the super classes\n+            Sample myClassA11: Name[name=v1_1, type=myClassA11, mutable=true, weight=1]\n+            Sample myClassA1: Name[name=v1_1, type=myClassA11, mutable=true, weight=1]\n+            Sample myClassA: Name[name=v1_1, type=myClassA11, mutable=true, weight=1]\n+            Create name for myClassA, should never be visible for the sub classes\n+            Sample myClassA11: Name[name=v1_1, type=myClassA11, mutable=true, weight=1]\n+            Sample myClassA1: Name[name=v1_1, type=myClassA11, mutable=true, weight=1]\n+            Weigh Names:\n+              [myClassA: 2L and 2L]\n+              [myClassA1: 1L and 1L]\n+              [myClassA2: 0L and 0L]\n+              [myClassA11: 1L and 1L]\n+              [myClassB: 0L and 0L]\n+            Weigh Names:\n+              [myClassA: 0L and 0L]\n+              [myClassA1: 0L and 0L]\n+              [myClassA2: 0L and 0L]\n+              [myClassA11: 0L and 0L]\n+              [myClassB: 0L and 0L]\n+            }\n+            \"\"\";\n+        checkEQ(code, expected);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"modified"}]}