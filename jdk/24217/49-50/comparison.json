{"files":[{"patch":"@@ -47,2 +47,28 @@\n-    private static final Pattern DOLLAR_NAME_PATTERN = Pattern.compile(\"\\\\$(\" + NAME_CHARACTERS + \")\");\n-    private static final Pattern HASHTAG_REPLACEMENT_PATTERN = Pattern.compile(\"#(\" + NAME_CHARACTERS + \")\");\n+    private static final Pattern DOLLAR_NAME_PATTERN = Pattern.compile(\n+        \"\\\\$\" +\n+        \/\/ After the dollar, we either have \"name\" or \"{name}\"\n+        \"(?:\" + \/\/ non-capturing group for the OR\n+            \/\/ capturing group for \"name\"\n+            \"(\" + NAME_CHARACTERS + \")\" +\n+        \"|\" + \/\/ OR\n+            \/\/ We want to trim off the brackets, so have\n+            \/\/ another non-capturing group.\n+            \"(?:\\\\{\" +\n+                \/\/ capturing group for \"name\" inside of \"{name}\"\n+                \"(\" + NAME_CHARACTERS + \")\" +\n+            \"\\\\})\" +\n+        \")\");\n+    private static final Pattern HASHTAG_REPLACEMENT_PATTERN = Pattern.compile(\n+        \"#\" +\n+        \/\/ After the hashtag, we either have \"name\" or \"{name}\"\n+        \"(?:\" + \/\/ non-capturing group for the OR\n+            \/\/ capturing group for \"name\"\n+            \"(\" + NAME_CHARACTERS + \")\" +\n+        \"|\" + \/\/ OR\n+            \/\/ We want to trim off the brackets, so have\n+            \/\/ another non-capturing group.\n+            \"(?:\\\\{\" +\n+                \/\/ capturing group for \"name\" inside of \"{name}\"\n+                \"(\" + NAME_CHARACTERS + \")\" +\n+            \"\\\\})\" +\n+        \")\");\n@@ -319,1 +345,4 @@\n-            (MatchResult result) -> $(result.group(1))\n+            (MatchResult result) -> $(\n+                \/\/ There are two groups: (1) for \"$name\" and (2) for \"${name}\"\n+                result.group(1) != null ? result.group(1) : result.group(2)\n+            )\n@@ -323,1 +352,4 @@\n-            (MatchResult result) -> getHashtagReplacement(result.group(1)).replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\")\n+            (MatchResult result) -> getHashtagReplacement(\n+                \/\/ There are two groups: (1) for \"#name\" and (2) for \"#{name}\"\n+                result.group(1) != null ? result.group(1) : result.group(2)\n+            ).replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\")\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Renderer.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -65,0 +65,3 @@\n+        if (name == null) {\n+            throw new RendererException(\"A '$' name should not be null.\");\n+        }\n@@ -72,0 +75,3 @@\n+        if (key == null) {\n+            throw new RendererException(\"A hashtag replacement should not be null.\");\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateFrame.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -148,0 +148,1 @@\n+            \"System.out.println(#{arg});\\n\",     \/\/ capture arg via hashtag replacement with brackets\n@@ -264,1 +265,1 @@\n-            let(\"TYPE_CON\", type.toUpperCase() + \"_CON\"),\n+            let(\"TYPE\", type.toUpperCase()),\n@@ -266,1 +267,1 @@\n-            static final #type #TYPE_CON = 42;\n+            static final #type #{TYPE}_CON = 42;\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+        testDollarAndHashtagBrackets();\n@@ -147,0 +148,2 @@\n+        expectRendererException(() -> testFailingDollarName4(), \"A '$' name should not be null.\");\n+        expectRendererException(() -> testFailingLetName1(), \"A hashtag replacement should not be null.\");\n@@ -738,0 +741,25 @@\n+    public static void testDollarAndHashtagBrackets() {\n+        var template1 = Template.make(() -> body(\n+            let(\"xyz\", \"abc\"),\n+            let(\"xyz_\", \"def\"),\n+            let(\"xyz_klm\", \"ghi\"),\n+            let(\"klm\", \"jkl\"),\n+            \"\"\"\n+            no bracket: #xyz #xyz_klm #xyz_#klm\n+            no bracket: $var $var_two $var_$two\n+            with bracket: #{xyz} #{xyz_klm} #{xyz}_#{klm}\n+            with bracket: ${var} ${var_two} ${var}_${two}\n+            \"\"\"\n+        ));\n+\n+        String code = template1.render();\n+        String expected =\n+            \"\"\"\n+            no bracket: abc ghi defjkl\n+            no bracket: var_1 var_two_1 var__1two_1\n+            with bracket: abc ghi abc_jkl\n+            with bracket: var_1 var_two_1 var_1_two_1\n+            \"\"\";\n+        checkEQ(code, expected);\n+    }\n+\n@@ -1780,0 +1808,14 @@\n+    public static void testFailingDollarName4() {\n+        var template1 = Template.make(() -> body(\n+            let(\"x\", $(null)) \/\/ Null input to dollar\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    public static void testFailingLetName1() {\n+        var template1 = Template.make(() -> body(\n+            let(null, $(\"abc\")) \/\/ Null input for hashtag name\n+        ));\n+        String code = template1.render();\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}