{"files":[{"patch":"@@ -47,17 +47,4 @@\n-    private static final Pattern DOLLAR_NAME_PATTERN = Pattern.compile(\n-        \"\\\\$\" +\n-        \/\/ After the dollar, we either have \"name\" or \"{name}\"\n-        \"(?:\" + \/\/ non-capturing group for the OR\n-            \/\/ capturing group for \"name\"\n-            \"(\" + NAME_CHARACTERS + \")\" +\n-        \"|\" + \/\/ OR\n-            \/\/ We want to trim off the brackets, so have\n-            \/\/ another non-capturing group.\n-            \"(?:\\\\{\" +\n-                \/\/ capturing group for \"name\" inside of \"{name}\"\n-                \"(\" + NAME_CHARACTERS + \")\" +\n-            \"\\\\})\" +\n-        \")\");\n-    private static final Pattern HASHTAG_REPLACEMENT_PATTERN = Pattern.compile(\n-        \"#\" +\n-        \/\/ After the hashtag, we either have \"name\" or \"{name}\"\n+    private static final Pattern NAME_PATTERN = Pattern.compile(\n+        \/\/ The pattern must be at the beginning of the String part.\n+        \"^\" +\n+        \/\/ We either have \"name\" or \"{name}\"\n@@ -270,1 +257,1 @@\n-                currentCodeFrame.addString(templateString(s));\n+                renderStringWithDollarAndHashtagReplacements(s);\n@@ -343,14 +330,34 @@\n-    private String templateString(String s) {\n-        var temp = DOLLAR_NAME_PATTERN.matcher(s).replaceAll(\n-            (MatchResult result) -> $(\n-                \/\/ There are two groups: (1) for \"$name\" and (2) for \"${name}\"\n-                result.group(1) != null ? result.group(1) : result.group(2)\n-            )\n-        );\n-        return HASHTAG_REPLACEMENT_PATTERN.matcher(temp).replaceAll(\n-            \/\/ We must escape \"$\", because it has a special meaning in replaceAll.\n-            (MatchResult result) -> getHashtagReplacement(\n-                \/\/ There are two groups: (1) for \"#name\" and (2) for \"#{name}\"\n-                result.group(1) != null ? result.group(1) : result.group(2)\n-            ).replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\")\n-        );\n+    private void renderStringWithDollarAndHashtagReplacements(String s) {\n+        int count = 0;\n+        int start = 0;\n+        boolean lastWasDollar = false;\n+        do {\n+            int dollar  = s.indexOf(\"$\", start);\n+            int hashtag = s.indexOf(\"#\", start);\n+            dollar  = (dollar == -1)  ? s.length() : dollar;\n+            hashtag = (hashtag == -1) ? s.length() : hashtag;\n+            int next = Math.min(dollar, hashtag);\n+            String part = s.substring(start, next);\n+            if (count == 0) {\n+                \/\/ First part has no \"#\" or \"$\" before it.\n+                currentCodeFrame.addString(part);\n+            } else {\n+                \/\/ All others must do the replacement.\n+                final boolean isDollar = lastWasDollar;\n+                \/\/ TODO: add verification if we do not match? Add tests?\n+                currentCodeFrame.addString(NAME_PATTERN.matcher(part).replaceFirst(\n+                    (MatchResult result) -> {\n+                        \/\/ There are two groups: (1) for \"name\" and (2) for \"{name}\"\n+                        String name = result.group(1) != null ? result.group(1) : result.group(2);\n+                        if (isDollar) {\n+                            return $(name);\n+                        } else {\n+                            return getHashtagReplacement(name).replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\");\n+                        }\n+                    }\n+                ));\n+            }\n+            start = next + 1; \/\/ drop the \"#\" or \"$\"\n+            lastWasDollar = next == dollar;\n+            count++;\n+        } while (start < s.length());\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Renderer.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"}]}