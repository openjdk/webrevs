{"files":[{"patch":"@@ -75,1 +75,1 @@\n-     * Creates a base frame, which has no {@link parent}.\n+     * Creates a base frame, which has no {@link #parent}.\n@@ -82,1 +82,1 @@\n-     * Creates a normal frame, which has a {@link parent} and which defines an inner\n+     * Creates a normal frame, which has a {@link #parent} and which defines an inner\n@@ -91,1 +91,1 @@\n-     * Creates a special frame, which has a {@link parent} but uses the {@link NameSet}\n+     * Creates a special frame, which has a {@link #parent} but uses the {@link NameSet}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/CodeFrame.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,3 +34,4 @@\n- * The {@link Renderer} class is used to keep track of the states during a nested\n- * Template rendering. There can only be a single {@link Renderer} active\n- * at any point, since there are static methods that reference {@link Renderer#getCurrent}.\n+ * The {@link Renderer} class renders a tokenized {@link Template} in the form of a {@link TemplateToken}.\n+ * It also keeps track of the states during a nested Template rendering. There can only be a single\n+ * {@link Renderer} active at any point, since there are static methods that reference \n+ * {@link Renderer#getCurrent}.\n@@ -38,2 +39,5 @@\n- * The {@link Renderer} instance keeps track of the current frames,\n- * see {@link TemplateFrame} and {@link CodeFrame}.\n+ * <p>\n+ * The {@link Renderer} instance keeps track of the current frames.\n+ * \n+ * @see TemplateFrame\n+ * @see CodeFrame\n@@ -48,0 +52,1 @@\n+     * <p>\n@@ -57,0 +62,1 @@\n+     * <p>\n@@ -62,0 +68,1 @@\n+     * <p>\n@@ -69,1 +76,1 @@\n-    private TemplateFrame baseTemplateFrame;\n+    private final TemplateFrame baseTemplateFrame;\n@@ -71,1 +78,1 @@\n-    private CodeFrame baseCodeFrame;\n+    private final CodeFrame baseCodeFrame;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Renderer.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * {@link TemplateToken}. It ensures that each template use has its own unique {@link id}\n+ * {@link TemplateToken}. It ensures that each template use has its own unique {@link #id}\n@@ -34,2 +34,2 @@\n- * {@link Template#let} definitions. The {@link parent} relationship provides a trace\n- * for the use chain of templates. The {@link fuel} is reduced over this chain, to give\n+ * {@link Template#let} definitions. The {@link #parent} relationship provides a trace\n+ * for the use chain of templates. The {@link #fuel} is reduced over this chain, to give\n@@ -44,2 +44,2 @@\n-    final int id;\n-    final Map<String, String> hashtagReplacements = new HashMap<>();\n+    private final int id;\n+    private final Map<String, String> hashtagReplacements = new HashMap<>();\n@@ -47,1 +47,1 @@\n-    float fuelCost;\n+    private float fuelCost;\n@@ -69,3 +69,2 @@\n-        if (!hashtagReplacements.containsKey(key)) {\n-            hashtagReplacements.put(key, value);\n-            return;\n+        if (hashtagReplacements.putIfAbsent(key, value) != null) {\n+            throw new RendererException(\"Duplicate hashtag replacement for #\" + key);\n@@ -73,1 +72,0 @@\n-        throw new RendererException(\"Duplicate hashtag replacement for #\" + key);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateFrame.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,2 +27,3 @@\n- * Represents a Template with filled arguments, ready for instantiation, either\n- * as a {@link Token} inside another {@link Template} or with {@link #render}.\n+ * Represents a tokenized {@link Template} (after calling {@code asToken()}) ready for\n+ * instantiation either as a {@link Token} inside another {@link Template} or as\n+ * a {@link String} with {@link #render}.\n@@ -39,2 +40,2 @@\n-     * Represents a zero-argument {@link TemplateToken}, already filled with arguments, ready for\n-     * instantiation either as a {@link Token} inside another {@link Template} or\n+     * Represents a tokenized zero-argument {@link Template} ready for instantiation\n+     * either as a {@link Token} inside another {@link Template} or as a {@link String}\n@@ -60,2 +61,3 @@\n-     * Represents a one-argument {@link TemplateToken}, already filled with arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n+     * Represents a tokenized one-argument {@link Template}, already filled with arguments, ready for\n+     * instantiation either as a {@link Token} inside another {@link Template} or as a {@link String} \n+     * with {@link #render}.\n@@ -86,2 +88,3 @@\n-     * Represents a two-argument {@link TemplateToken}, already filled with arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n+     * Represents a tokenized two-argument {@link Template}, already filled with arguments, ready for\n+     * instantiation either as a {@link Token} inside another {@link Template} or as a {@link String}\n+     * with {@link #render}.\n@@ -116,2 +119,3 @@\n-     * Represents a three-argument {@link TemplateToken}, already filled with arguments, ready for instantiation\n-     * either as a {@link Token} inside another {@link Template} or with {@link #render}.\n+     * Represents a tokenized three-argument {@link TemplateToken}, already filled with arguments, ready for\n+     * instantiation either as a {@link Token} inside another {@link Template} or as a {@link String}\n+     * with {@link #render}.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/TemplateToken.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * and all non {@link Token}s are converted to {@link StringToken}s. The parsing also flattens\n+ * and all non-{@link Token}s are converted to {@link StringToken}s. The parsing also flattens\n@@ -51,1 +51,1 @@\n-        List<Token> outputList = new ArrayList<Token>();\n+        List<Token> outputList = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Token.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}