{"files":[{"patch":"@@ -774,1 +774,1 @@\n-        if (0 >= weight || weight > 1000) {\n+        if (weight <= 0 || 1000 < weight) {\n@@ -817,1 +817,1 @@\n-        if (0 >= weight || weight > 1000) {\n+        if (weight <= 0 || 1000 < weight) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+        \/\/       The code may not be nicely formatted, especially regarding\n+        \/\/       indentation. You might consider dumping the generated code\n+        \/\/       into an IDE or other auto-formatting tool.\n@@ -152,11 +155,24 @@\n-            \/\/ The Template Framework allows two ways of formatting Strings, either\n-            \/\/ by appending to the comma-separated list of Tokens passed to body(), or by hashtag\n-            \/\/ replacements inside a single string. Appending as a Token works whenever one has a reference\n-            \/\/ to the Object in Java code. But often, this is rather cumbersome and\n-            \/\/ looks awkward, given all the additional quotes and commands required.\n-            \/\/ Optimal would have been Java String Templates, but since those do not\n-            \/\/ currently exist, we use hashtag replacements. These can be either\n-            \/\/ defined by capturing arguments as string names, or by using a \"let\" definition,\n-            \/\/ see further down for examples. Which one should be preferred is a code\n-            \/\/ style question. Generally, we prefer the use of hashtag replacements\n-            \/\/ because that allows easy use of multiline strings (i.e. text blocks).\n+            \/\/ It would have been optimal to use Java String Templates to format\n+            \/\/ argument values into Strings. However, since these are (yet) available,\n+            \/\/ the Template Framework provides two alternative ways of formatting\n+            \/\/ Strings:\n+            \/\/ 1) By appending to the comma-separated list of Tokens passed to body().\n+            \/\/    Appending as a Token works whenever one has a reference to the Object\n+            \/\/    in Java code. But often, this is rather cumbersome and looks awkward,\n+            \/\/    given all the additional quotes and commands required. Hence, it\n+            \/\/    is encouraged to only use this method when necessary.\n+            \/\/ 2) By hashtag replacements inside a single string. One can either\n+            \/\/    use \"#arg\" directly, or use brackets \"#{arg}\". When possible, one\n+            \/\/    should prefer avoiding the brackets, as they create additional\n+            \/\/    noise. However, there are cases where they are useful, for\n+            \/\/    example \"#TYPE_CON\" would be parsed as a hashtag replacement\n+            \/\/    for the hashtag name \"TYPE_CON\", whereas \"#{TYPE}_CON\" is\n+            \/\/    parsed as hashtag name \"TYPE\", followed by literal string \"_CON\".\n+            \/\/    See also: generateWithHashtagAndDollarReplacements2\n+            \/\/    There are two ways to define the value of a hashtag replacement:\n+            \/\/    a) Capturing Template arguments as Strings.\n+            \/\/    b) Using a \"let\" definition (see examples further down).\n+            \/\/ Which one should be preferred is a code style question. Generally, we\n+            \/\/ prefer the use of hashtag replacements because that allows easy use of\n+            \/\/ multiline strings (i.e. text blocks).\n+            \/\/ TODO: example where other is required.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            return other instanceof MyPrimitive(String n) && n == name();\n+            return other instanceof MyPrimitive(String n) && n.equals(name());\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}