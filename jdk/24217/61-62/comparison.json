{"files":[{"patch":"@@ -159,6 +159,5 @@\n- * Ideally, we would have used <a href=\"https:\/\/openjdk.org\/jeps\/430\">string templates<\/a> to inject these Template arguments into the strings.\n- * But since string templates are not (yet) available, the Templates provide <strong>hashtag replacements<\/strong>\n-\n- * in the {@link String}s: the Template argument names are captured, and the argument values automatically replace any\n- * {@code \"#name\"} in the {@link String}s. See the different overloads of {@link #make} for examples. Additional hashtag\n- * replacements can be defined with {@link #let}.\n+ * Ideally, we would have used <a href=\"https:\/\/openjdk.org\/jeps\/430\">string templates<\/a> to inject these Template\n+ * arguments into the strings. But since string templates are not (yet) available, the Templates provide\n+ * <strong>hashtag replacements<\/strong> in the {@link String}s: the Template argument names are captured, and\n+ * the argument values automatically replace any {@code \"#name\"} in the {@link String}s. See the different overloads\n+ * of {@link #make} for examples. Additional hashtag replacements can be defined with {@link #let}.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Random;\n@@ -60,2 +59,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestAdvanced.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        \/\/ Add java source files.\n+        \/\/ Add Java source files.\n@@ -153,2 +153,2 @@\n-            \/\/ by appending to the comma-separated list of Tokens, or by hashtag\n-            \/\/ replacements. Appending as a Token works whenever one has a reference\n+            \/\/ by appending to the comma-separated list of Tokens passed to body(), or by hashtag\n+            \/\/ replacements inside a single string. Appending as a Token works whenever one has a reference\n@@ -199,1 +199,2 @@\n-            \/\/ we automatically rename the names that have a $ prepended.\n+            \/\/ we automatically rename the names that have a $ prepended with\n+            \/\/ var_1, var_2, etc.\n@@ -208,1 +209,1 @@\n-            \/\/ with let, but also to capture the variable.\n+            \/\/ with let, but also to capture the variable to use it as lambda parameter.\n@@ -298,1 +299,1 @@\n-    \/\/ scopes. For example, we can reach out from inside a method body to a hook set at\n+    \/\/ scopes. For example, we can reach out from inside a method body to a hook anchored at\n@@ -314,1 +315,4 @@\n-            \/\/ Let us go back to the hook, and define a field named $field...\n+            \/\/ Let us go back to where we anchored the hook with anchor() and define a field named $field there.\n+            \/\/ Note that in the Java code we have not defined anchor() on the hook, yet. But since it's a lambda\n+            \/\/ expression, it is not evaluated, yet! Eventually, anchor() will be evaluated before insert() in\n+            \/\/ this example.\n@@ -525,1 +529,1 @@\n-    \/\/ In this Example, we generate 3 fields, and add their names to the\n+    \/\/ In this example, we generate 3 fields, and add their names to the\n@@ -779,1 +783,1 @@\n-    \/\/ templateClass, then going to templateMain and last to templateInnner.\n+    \/\/ templateClass, then going to templateMain and last to templateInner.\n@@ -857,1 +861,1 @@\n-            \/\/ But why is this DataName now availabe inside the scope of\n+            \/\/ But why is this DataName now available inside the scope of\n@@ -868,1 +872,1 @@\n-            \/\/ add any DataNames to the class scope any more, and we could\n+            \/\/ add any DataNames to the class scope anymore, and we could\n@@ -1055,1 +1059,1 @@\n-                        myClassList.stream().map(c -> templateLoad.asToken(c)).toList(),\n+                        myClassList.stream().map(templateLoad::asToken).toList(),\n@@ -1059,1 +1063,1 @@\n-                        myClassList.stream().map(c -> templateStore.asToken(c)).toList(),\n+                        myClassList.stream().map(templateStore::asToken).toList(),\n@@ -1063,1 +1067,1 @@\n-                        myClassList.stream().map(c -> templateLoad.asToken(c)).toList(),\n+                        myClassList.stream().map(templateLoad::asToken).toList(),\n@@ -1081,1 +1085,1 @@\n-    \/\/ useful for modeling method names an class names, and possibly more. Anything\n+    \/\/ useful for modeling method names and class names, and possibly more. Anything\n@@ -1094,1 +1098,1 @@\n-    \/\/ Let us show an example with Method names. But for simplicity, we assume they\n+    \/\/ Let us look at an example with Method names. But for simplicity, we assume they\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestTutorial.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        List<FormatInfo> list = new ArrayList();\n+        List<FormatInfo> list = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}