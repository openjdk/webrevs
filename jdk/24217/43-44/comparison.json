{"files":[{"patch":"@@ -764,1 +764,1 @@\n-        return new AddNameToken(new DataName(name, type, mutable, 1));\n+        return new AddNameToken(new DataName(name, type, mutable, weight));\n@@ -803,1 +803,1 @@\n-        return new AddNameToken(new StructuralName(name, type, 1));\n+        return new AddNameToken(new StructuralName(name, type, weight));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/Template.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import compiler.lib.template_framework.StructuralName;\n@@ -53,0 +54,2 @@\n+import static compiler.lib.template_framework.Template.addStructuralName;\n+import static compiler.lib.template_framework.Template.structuralNames;\n@@ -90,0 +93,16 @@\n+    \/\/ Model methods, but only of type \"(II)I\".\n+    \/\/ Should you ever work on a test where there are methods with different signatures,\n+    \/\/ then you would have to very carefully study and design the subtype relation between\n+    \/\/ methods. You may want to read up about covariance and contravariance. This\n+    \/\/ example ignores all of that, because we only have \"(II)I\" methods.\n+    private record MyMethodType() implements StructuralName.Type {\n+        @Override\n+        public boolean isSubtypeOf(StructuralName.Type other) {\n+            return other instanceof MyMethodType();\n+        }\n+\n+        @Override\n+        public String name() { return \"<not used, don't worry>\"; }\n+    }\n+    private static final MyMethodType myMethodType = new MyMethodType();\n+\n@@ -138,1 +157,7 @@\n-        expectIllegalArgumentException(() -> testFailingAddDataName(), \"Unexpected mutability: MUTABLE_OR_IMMUTABLE\");\n+        expectIllegalArgumentException(() -> testFailingAddDataName1(), \"Unexpected mutability: MUTABLE_OR_IMMUTABLE\");\n+        expectIllegalArgumentException(() -> testFailingAddDataName2(), \"Unexpected weight: \");\n+        expectIllegalArgumentException(() -> testFailingAddDataName3(), \"Unexpected weight: \");\n+        expectIllegalArgumentException(() -> testFailingAddDataName4(), \"Unexpected weight: \");\n+        expectIllegalArgumentException(() -> testFailingAddStructuralName1(), \"Unexpected weight: \");\n+        expectIllegalArgumentException(() -> testFailingAddStructuralName2(), \"Unexpected weight: \");\n+        expectIllegalArgumentException(() -> testFailingAddStructuralName3(), \"Unexpected weight: \");\n@@ -1494,1 +1519,1 @@\n-    public static void testFailingAddDataName() {\n+    public static void testFailingAddDataName1() {\n@@ -1501,0 +1526,42 @@\n+    public static void testFailingAddDataName2() {\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE, 0)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    public static void testFailingAddDataName3() {\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE, -1)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    public static void testFailingAddDataName4() {\n+        var template1 = Template.make(() -> body(\n+            addDataName(\"name\", myInt, MUTABLE, 1001)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    public static void testFailingAddStructuralName1() {\n+        var template1 = Template.make(() -> body(\n+            addStructuralName(\"name\", myMethodType, 0)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    public static void testFailingAddStructuralName2() {\n+        var template1 = Template.make(() -> body(\n+            addStructuralName(\"name\", myMethodType, -1)\n+        ));\n+        String code = template1.render();\n+    }\n+\n+    public static void testFailingAddStructuralName3() {\n+        var template1 = Template.make(() -> body(\n+            addStructuralName(\"name\", myMethodType, 1001)\n+        ));\n+        String code = template1.render();\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/tests\/TestTemplate.java","additions":69,"deletions":2,"binary":false,"changes":71,"status":"modified"}]}