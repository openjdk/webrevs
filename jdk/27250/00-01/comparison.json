{"files":[{"patch":"@@ -1165,1 +1165,1 @@\n-  Node* _new_init;\n+  Node* const _new_init;\n@@ -1191,2 +1191,2 @@\n-\/\/ For a int counted loop, try_make_short_running_loop() transform the loop from:\n-\/\/ for (int = start; i < stop; i+= stride) {\n+\/\/ For an int counted loop, try_make_short_running_loop() transforms the loop from:\n+\/\/     for (int = start; i < stop; i+= stride) { ... }\n@@ -1194,3 +1194,9 @@\n-\/\/ for (int = 0; i < stop - start; i+= stride) {\n-\/\/ Assertion Predicate added so far were with an init value of start. They need to be updated with the new init value of\n-\/\/ 0.\n+\/\/     for (int = 0; i < stop - start; i+= stride) { ... }\n+\/\/ Template Assertion Predicates added so far were with an init value of start. They need to be updated with the new \n+\/\/ init value of 0:\n+\/\/                                zero      \n+\/\/        init                     |       \n+\/\/         |           ===>   OpaqueLoopInit   init\n+\/\/  OpaqueLoopInit                         \\   \/\n+\/\/                                          AddI\n+\/\/\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -206,1 +206,2 @@\n-\/\/ Clone this Template Assertion Predicate and use the expression passed as argument as init.\n+\/\/ Clone this Template Assertion Predicate and replace the old OpaqueLoopInit node with 'new_init'.\n+\/\/ Note: 'new_init' could also have the 'OpaqueLoopInit` as parent node further up.\n@@ -1144,1 +1145,2 @@\n-\/\/ replace current OpaqueLoopInit with the expression passed as argument.\n+\/\/ replaces the current OpaqueLoopInit with 'new_init'.\n+\/\/  Note: 'new_init' could also have the 'OpaqueLoopInit` as parent node further up.\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}