{"files":[{"patch":"@@ -2168,1 +2168,4 @@\n-  virtual void target_node_action(Node* node, uint i) = 0;\n+  \/\/ To give more freedom, we pass the direct child node to the target node such that\n+  \/\/ child->in(i) == target node. This allows to also directly replace the target node instead\n+  \/\/ of only updating its inputs.\n+  virtual void target_node_action(Node* child, uint i) = 0;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -250,2 +250,3 @@\n-  void target_node_action(Node* node, uint i) override {\n-    _igvn.replace_input_of(node->in(i), 1, _new_opaque_stride_input);\n+  void target_node_action(Node* child, uint i) override {\n+    assert(child->in(i)->is_OpaqueLoopStride(), \"must be OpaqueLoopStride\");\n+    _igvn.replace_input_of(child->in(i), 1, _new_opaque_stride_input);\n@@ -280,2 +281,3 @@\n-  void target_node_action(Node* node, uint i) override {\n-    _igvn.replace_input_of(node, i, _new_opaque_init_node);\n+  void target_node_action(Node* child, uint i) override {\n+    assert(child->in(i)->is_OpaqueLoopInit(), \"must be old OpaqueLoopInit\");\n+    _igvn.replace_input_of(child, i, _new_opaque_init_node);\n@@ -357,2 +359,2 @@\n-  void target_node_action(Node* node, uint i) override {\n-    Node* target_node = node->in(i);\n+  void target_node_action(Node* child, uint i) override {\n+    Node* target_node = child->in(i);\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"}]}