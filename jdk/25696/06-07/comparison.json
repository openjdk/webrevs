{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.util.List;\n@@ -67,0 +68,10 @@\n+    static final int[] INTS = new int[] {\n+        Integer.MIN_VALUE,\n+        -100,\n+        -1,\n+        0,\n+        1,\n+        100,\n+        Integer.MAX_VALUE,\n+    };\n+\n@@ -68,0 +79,1 @@\n+        List<String> options = List.of(\"-XX:-TieredCompilation\", \"-Xlog:jit+compilation=trace\");\n@@ -70,1 +82,1 @@\n-        framework.addFlags(\"-XX:-TieredCompilation\", \"-Xlog:jit+compilation=trace\").start();\n+        framework.addFlags(options.toArray(new String[0])).start();\n@@ -75,1 +87,1 @@\n-        framework.addFlags(\"-XX:-TieredCompilation\", \"-Xlog:jit+compilation=trace\").start();\n+        framework.addFlags(options.toArray(new String[0])).start();\n@@ -81,1 +93,1 @@\n-        framework.addFlags(\"-XX:-TieredCompilation\", \"-Xlog:jit+compilation=trace\").start();\n+        framework.addFlags(options.toArray(new String[0])).start();\n@@ -86,1 +98,1 @@\n-        framework.addFlags(\"-XX:-TieredCompilation\", \"-Xlog:jit+compilation=trace\").start();\n+        framework.addFlags(options.toArray(new String[0])).start();\n@@ -95,1 +107,1 @@\n-    public static int test_float_BoolTest_ge(float x, float y) {\n+    public static int test_float_BoolTest_ge_fixed_1_0(float x, float y) {\n@@ -104,1 +116,1 @@\n-    public static int golden_float_BoolTest_ge(float x, float y) {\n+    public static int golden_float_BoolTest_ge_fixed_1_0(float x, float y) {\n@@ -110,1 +122,1 @@\n-    public static int test_double_BoolTest_ge(double x, double y) {\n+    public static int test_double_BoolTest_ge_fixed_1_0(double x, double y) {\n@@ -119,1 +131,1 @@\n-    public static int golden_double_BoolTest_ge(double x, double y) {\n+    public static int golden_double_BoolTest_ge_fixed_1_0(double x, double y) {\n@@ -123,1 +135,64 @@\n-    @Run(test = {\"test_float_BoolTest_ge\", \"test_double_BoolTest_ge\"})\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge_fixed_0_1(float x, float y) {\n+        return !(x <= y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_ge_fixed_0_1(float x, float y) {\n+        return !(x <= y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge_fixed_0_1(double x, double y) {\n+        return !(x <= y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_ge_fixed_0_1(double x, double y) {\n+        return !(x <= y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge_fixed_10_20(float x, float y) {\n+        return !(x <= y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_ge_fixed_10_20(float x, float y) {\n+        return !(x <= y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge_fixed_10_20(double x, double y) {\n+        return !(x <= y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_ge_fixed_10_20(double x, double y) {\n+        return !(x <= y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge_variable_results(float x, float y, int a, int b) {\n+        return !(x <= y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_ge_variable_results(float x, float y, int a, int b) {\n+        return !(x <= y) ? a : b;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge_variable_results(double x, double y, int a, int b) {\n+        return !(x <= y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_ge_variable_results(double x, double y, int a, int b) {\n+        return !(x <= y) ? a : b;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_ge_fixed_1_0\", \"test_double_BoolTest_ge_fixed_1_0\",\n+                 \"test_float_BoolTest_ge_fixed_0_1\", \"test_double_BoolTest_ge_fixed_0_1\",\n+                 \"test_float_BoolTest_ge_fixed_10_20\", \"test_double_BoolTest_ge_fixed_10_20\",\n+                 \"test_float_BoolTest_ge_variable_results\", \"test_double_BoolTest_ge_variable_results\"})\n@@ -131,2 +206,2 @@\n-                int actual = test_float_BoolTest_ge(x, y);\n-                int expected = golden_float_BoolTest_ge(x, y);\n+                int actual = test_float_BoolTest_ge_fixed_1_0(x, y);\n+                int expected = golden_float_BoolTest_ge_fixed_1_0(x, y);\n@@ -134,1 +209,1 @@\n-                    System.out.println(\"Float failed (ge), x: \" + x + \", y: \" + y +\n+                    System.out.println(\"Float failed (ge, 1, 0), x: \" + x + \", y: \" + y +\n@@ -145,2 +220,2 @@\n-                int actual = test_double_BoolTest_ge(x, y);\n-                int expected = golden_double_BoolTest_ge(x, y);\n+                int actual = test_double_BoolTest_ge_fixed_1_0(x, y);\n+                int expected = golden_double_BoolTest_ge_fixed_1_0(x, y);\n@@ -148,1 +223,1 @@\n-                    System.out.println(\"Double failed (ge), x: \" + x + \", y: \" + y +\n+                    System.out.println(\"Double failed (ge, 1, 0), x: \" + x + \", y: \" + y +\n@@ -155,0 +230,96 @@\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_ge_fixed_0_1(x, y);\n+                int expected = golden_float_BoolTest_ge_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (ge, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_ge_fixed_0_1(x, y);\n+                int expected = golden_double_BoolTest_ge_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (ge, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_ge_fixed_10_20(x, y);\n+                int expected = golden_float_BoolTest_ge_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (ge, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_ge_fixed_10_20(x, y);\n+                int expected = golden_double_BoolTest_ge_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (ge, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_float_BoolTest_ge_variable_results(x, y, a, b);\n+                        int expected = golden_float_BoolTest_ge_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Float failed (ge), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_double_BoolTest_ge_variable_results(x, y, a, b);\n+                        int expected = golden_double_BoolTest_ge_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Double failed (ge), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -164,1 +335,1 @@\n-    public static int test_float_BoolTest_ge(float x, float y) {\n+    public static int test_float_BoolTest_ge_fixed_1_0(float x, float y) {\n@@ -173,1 +344,1 @@\n-    public static int golden_float_BoolTest_ge(float x, float y) {\n+    public static int golden_float_BoolTest_ge_fixed_1_0(float x, float y) {\n@@ -179,1 +350,1 @@\n-    public static int test_double_BoolTest_ge(double x, double y) {\n+    public static int test_double_BoolTest_ge_fixed_1_0(double x, double y) {\n@@ -188,1 +359,1 @@\n-    public static int golden_double_BoolTest_ge(double x, double y) {\n+    public static int golden_double_BoolTest_ge_fixed_1_0(double x, double y) {\n@@ -192,1 +363,64 @@\n-    @Run(test = {\"test_float_BoolTest_ge\", \"test_double_BoolTest_ge\"})\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge_fixed_0_1(float x, float y) {\n+        return !(x >= y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_ge_fixed_0_1(float x, float y) {\n+        return !(x >= y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge_fixed_0_1(double x, double y) {\n+        return !(x >= y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_ge_fixed_0_1(double x, double y) {\n+        return !(x >= y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge_fixed_10_20(float x, float y) {\n+        return !(x >= y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_ge_fixed_10_20(float x, float y) {\n+        return !(x >= y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge_fixed_10_20(double x, double y) {\n+        return !(x >= y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_ge_fixed_10_20(double x, double y) {\n+        return !(x >= y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge_variable_results(float x, float y, int a, int b) {\n+        return !(x >= y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_ge_variable_results(float x, float y, int a, int b) {\n+        return !(x >= y) ? a : b;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge_variable_results(double x, double y, int a, int b) {\n+        return !(x >= y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_ge_variable_results(double x, double y, int a, int b) {\n+        return !(x >= y) ? a : b;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_ge_fixed_1_0\", \"test_double_BoolTest_ge_fixed_1_0\",\n+                 \"test_float_BoolTest_ge_fixed_0_1\", \"test_double_BoolTest_ge_fixed_0_1\",\n+                 \"test_float_BoolTest_ge_fixed_10_20\", \"test_double_BoolTest_ge_fixed_10_20\",\n+                 \"test_float_BoolTest_ge_variable_results\", \"test_double_BoolTest_ge_variable_results\"})\n@@ -200,2 +434,2 @@\n-                int actual = test_float_BoolTest_ge(x, y);\n-                int expected = golden_float_BoolTest_ge(x, y);\n+                int actual = test_float_BoolTest_ge_fixed_1_0(x, y);\n+                int expected = golden_float_BoolTest_ge_fixed_1_0(x, y);\n@@ -214,2 +448,2 @@\n-                int actual = test_double_BoolTest_ge(x, y);\n-                int expected = golden_double_BoolTest_ge(x, y);\n+                int actual = test_double_BoolTest_ge_fixed_1_0(x, y);\n+                int expected = golden_double_BoolTest_ge_fixed_1_0(x, y);\n@@ -224,0 +458,96 @@\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_ge_fixed_0_1(x, y);\n+                int expected = golden_float_BoolTest_ge_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (ge, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_ge_fixed_0_1(x, y);\n+                int expected = golden_double_BoolTest_ge_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (ge, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_ge_fixed_10_20(x, y);\n+                int expected = golden_float_BoolTest_ge_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (ge, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_ge_fixed_10_20(x, y);\n+                int expected = golden_double_BoolTest_ge_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (ge, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_float_BoolTest_ge_variable_results(x, y, a, b);\n+                        int expected = golden_float_BoolTest_ge_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Float failed (ge), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_double_BoolTest_ge_variable_results(x, y, a, b);\n+                        int expected = golden_double_BoolTest_ge_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Double failed (ge), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -233,1 +563,1 @@\n-    public static int test_float_BoolTest_gt(float x, float y) {\n+    public static int test_float_BoolTest_gt_fixed_1_0(float x, float y) {\n@@ -242,1 +572,1 @@\n-    public static int golden_float_BoolTest_gt(float x, float y) {\n+    public static int golden_float_BoolTest_gt_fixed_1_0(float x, float y) {\n@@ -248,1 +578,1 @@\n-    public static int test_double_BoolTest_gt(double x, double y) {\n+    public static int test_double_BoolTest_gt_fixed_1_0(double x, double y) {\n@@ -257,1 +587,1 @@\n-    public static int golden_double_BoolTest_gt(double x, double y) {\n+    public static int golden_double_BoolTest_gt_fixed_1_0(double x, double y) {\n@@ -261,1 +591,64 @@\n-    @Run(test = {\"test_float_BoolTest_gt\", \"test_double_BoolTest_gt\"})\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt_fixed_0_1(float x, float y) {\n+        return !(x < y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_gt_fixed_0_1(float x, float y) {\n+        return !(x < y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt_fixed_0_1(double x, double y) {\n+        return !(x < y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_gt_fixed_0_1(double x, double y) {\n+        return !(x < y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt_fixed_10_20(float x, float y) {\n+        return !(x < y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_gt_fixed_10_20(float x, float y) {\n+        return !(x < y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt_fixed_10_20(double x, double y) {\n+        return !(x < y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_gt_fixed_10_20(double x, double y) {\n+        return !(x < y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt_variable_results(float x, float y, int a, int b) {\n+        return !(x < y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_gt_variable_results(float x, float y, int a, int b) {\n+        return !(x < y) ? a : b;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt_variable_results(double x, double y, int a, int b) {\n+        return !(x < y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_gt_variable_results(double x, double y, int a, int b) {\n+        return !(x < y) ? a : b;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_gt_fixed_1_0\", \"test_double_BoolTest_gt_fixed_1_0\",\n+                 \"test_float_BoolTest_gt_fixed_0_1\", \"test_double_BoolTest_gt_fixed_0_1\",\n+                 \"test_float_BoolTest_gt_fixed_10_20\", \"test_double_BoolTest_gt_fixed_10_20\",\n+                 \"test_float_BoolTest_gt_variable_results\", \"test_double_BoolTest_gt_variable_results\"})\n@@ -269,2 +662,2 @@\n-                int actual = test_float_BoolTest_gt(x, y);\n-                int expected = golden_float_BoolTest_gt(x, y);\n+                int actual = test_float_BoolTest_gt_fixed_1_0(x, y);\n+                int expected = golden_float_BoolTest_gt_fixed_1_0(x, y);\n@@ -283,2 +676,2 @@\n-                int actual = test_double_BoolTest_gt(x, y);\n-                int expected = golden_double_BoolTest_gt(x, y);\n+                int actual = test_double_BoolTest_gt_fixed_1_0(x, y);\n+                int expected = golden_double_BoolTest_gt_fixed_1_0(x, y);\n@@ -293,0 +686,96 @@\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_gt_fixed_0_1(x, y);\n+                int expected = golden_float_BoolTest_gt_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (gt, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_gt_fixed_0_1(x, y);\n+                int expected = golden_double_BoolTest_gt_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (gt, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_gt_fixed_10_20(x, y);\n+                int expected = golden_float_BoolTest_gt_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (gt, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_gt_fixed_10_20(x, y);\n+                int expected = golden_double_BoolTest_gt_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (gt, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_float_BoolTest_gt_variable_results(x, y, a, b);\n+                        int expected = golden_float_BoolTest_gt_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Float failed (gt), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_double_BoolTest_gt_variable_results(x, y, a, b);\n+                        int expected = golden_double_BoolTest_gt_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Double failed (gt), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -302,1 +791,1 @@\n-    public static int test_float_BoolTest_gt(float x, float y) {\n+    public static int test_float_BoolTest_gt_fixed_1_0(float x, float y) {\n@@ -311,1 +800,1 @@\n-    public static int golden_float_BoolTest_gt(float x, float y) {\n+    public static int golden_float_BoolTest_gt_fixed_1_0(float x, float y) {\n@@ -317,1 +806,1 @@\n-    public static int test_double_BoolTest_gt(double x, double y) {\n+    public static int test_double_BoolTest_gt_fixed_1_0(double x, double y) {\n@@ -326,1 +815,1 @@\n-    public static int golden_double_BoolTest_gt(double x, double y) {\n+    public static int golden_double_BoolTest_gt_fixed_1_0(double x, double y) {\n@@ -330,1 +819,64 @@\n-    @Run(test = {\"test_float_BoolTest_gt\", \"test_double_BoolTest_gt\"})\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt_fixed_0_1(float x, float y) {\n+        return !(x > y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_gt_fixed_0_1(float x, float y) {\n+        return !(x > y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt_fixed_0_1(double x, double y) {\n+        return !(x > y) ? 0 : 1;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_gt_fixed_0_1(double x, double y) {\n+        return !(x > y) ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt_fixed_10_20(float x, float y) {\n+        return !(x > y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_gt_fixed_10_20(float x, float y) {\n+        return !(x > y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt_fixed_10_20(double x, double y) {\n+        return !(x > y) ? 10 : 20;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_gt_fixed_10_20(double x, double y) {\n+        return !(x > y) ? 10 : 20;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt_variable_results(float x, float y, int a, int b) {\n+        return !(x > y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_float_BoolTest_gt_variable_results(float x, float y, int a, int b) {\n+        return !(x > y) ? a : b;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt_variable_results(double x, double y, int a, int b) {\n+        return !(x > y) ? a : b;\n+    }\n+    @DontCompile\n+    public static int golden_double_BoolTest_gt_variable_results(double x, double y, int a, int b) {\n+        return !(x > y) ? a : b;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_gt_fixed_1_0\", \"test_double_BoolTest_gt_fixed_1_0\",\n+                 \"test_float_BoolTest_gt_fixed_0_1\", \"test_double_BoolTest_gt_fixed_0_1\",\n+                 \"test_float_BoolTest_gt_fixed_10_20\", \"test_double_BoolTest_gt_fixed_10_20\",\n+                 \"test_float_BoolTest_gt_variable_results\", \"test_double_BoolTest_gt_variable_results\"})\n@@ -338,2 +890,2 @@\n-                int actual = test_float_BoolTest_gt(x, y);\n-                int expected = golden_float_BoolTest_gt(x, y);\n+                int actual = test_float_BoolTest_gt_fixed_1_0(x, y);\n+                int expected = golden_float_BoolTest_gt_fixed_1_0(x, y);\n@@ -352,2 +904,2 @@\n-                int actual = test_double_BoolTest_gt(x, y);\n-                int expected = golden_double_BoolTest_gt(x, y);\n+                int actual = test_double_BoolTest_gt_fixed_1_0(x, y);\n+                int expected = golden_double_BoolTest_gt_fixed_1_0(x, y);\n@@ -362,0 +914,96 @@\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_gt_fixed_0_1(x, y);\n+                int expected = golden_float_BoolTest_gt_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (gt, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_gt_fixed_0_1(x, y);\n+                int expected = golden_double_BoolTest_gt_fixed_0_1(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (gt, 0, 1), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_gt_fixed_10_20(x, y);\n+                int expected = golden_float_BoolTest_gt_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (gt, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_gt_fixed_10_20(x, y);\n+                int expected = golden_double_BoolTest_gt_fixed_10_20(x, y);\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (gt, 10, 20), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_float_BoolTest_gt_variable_results(x, y, a, b);\n+                        int expected = golden_float_BoolTest_gt_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Float failed (gt), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                for (int m = 0; m < TestFPComparison2.INTS.length; m++) {\n+                    for (int n = 0; n < TestFPComparison2.INTS.length; n++) {\n+                        int a = TestFPComparison2.INTS[m];\n+                        int b = TestFPComparison2.INTS[n];\n+                        int actual = test_double_BoolTest_gt_variable_results(x, y, a, b);\n+                        int expected = golden_double_BoolTest_gt_variable_results(x, y, a, b);\n+                        if (actual != expected) {\n+                            System.out.println(\"Double failed (gt), x: \" + x + \", y: \" + y + \", a: \" + a + \", b: \" + b +\n+                                               \", actual: \" + actual + \", expected: \" + expected);\n+                            err++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFPComparison2.java","additions":690,"deletions":42,"binary":false,"changes":732,"status":"modified"}]}