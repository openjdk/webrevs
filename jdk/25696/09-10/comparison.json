{"files":[{"patch":"@@ -2164,1 +2164,0 @@\n-      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::eq\");\n@@ -2168,1 +2167,0 @@\n-      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ne\");\n@@ -2172,1 +2170,0 @@\n-      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::le\");\n@@ -2176,2 +2173,0 @@\n-      \/\/ This log is for JDK-8358892\n-      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\");\n@@ -2181,1 +2176,0 @@\n-      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::lt\");\n@@ -2185,2 +2179,0 @@\n-      \/\/ This log is for JDK-8358892\n-      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\");\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1271,0 +1271,11 @@\n+\/\/\n+\/\/ For CmpF\/D + CMoveI\/L, ordered ones are quite straight and simple,\n+\/\/ so, just list behaviour of unordered ones as follow.\n+\/\/\n+\/\/ Set dst (CMoveI (Binary cop (CmpF\/D op1 op2)) (Binary dst src))\n+\/\/    1. (op1 lt NaN) => true  => CMove: dst = src\n+\/\/    2. (op1 le NaN) => true  => CMove: dst = src\n+\/\/    3. (op1 gt NaN) => false => CMove: dst = dst\n+\/\/    4. (op1 ge NaN) => false => CMove: dst = dst\n+\/\/    5. (op1 eq NaN) => false => CMove: dst = dst\n+\/\/    6. (op1 ne NaN) => true  => CMove: dst = src\n@@ -1272,5 +1283,0 @@\n-\/\/ Move src to dst only if cmp1 == cmp2,\n-\/\/ otherwise leave dst unchanged, including the case where one of them is NaN.\n-\/\/ Clarification:\n-\/\/   java code      :  cmp1 != cmp2 ? dst : src\n-\/\/   transformed to :  CMove dst, (cmp1 eq cmp2), dst, src\n@@ -1301,5 +1307,0 @@\n-\/\/ Keep dst unchanged only if cmp1 == cmp2,\n-\/\/ otherwise move src to dst, including the case where one of them is NaN.\n-\/\/ Clarification:\n-\/\/   java code      :  cmp1 == cmp2 ? dst : src\n-\/\/   transformed to :  CMove dst, (cmp1 ne cmp2), dst, src\n@@ -1330,8 +1331,0 @@\n-\/\/ When cmp1 <= cmp2 or any of them is NaN then dst = src, otherwise, dst = dst\n-\/\/ Clarification\n-\/\/   scenario 1:\n-\/\/     java code      :  cmp2 < cmp1 ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n-\/\/   scenario 2:\n-\/\/     java code      :  cmp1 > cmp2 ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n@@ -1362,8 +1355,0 @@\n-\/\/ When cmp1 < cmp2 or any of them is NaN then dst = dst, otherwise, dst = src\n-\/\/ Clarification\n-\/\/   scenario 1:\n-\/\/     java code      :  !(cmp2 >= cmp1) ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 ge cmp2), dst, src\n-\/\/   scenario 2:\n-\/\/     java code      :  !(cmp1 <= cmp2) ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 ge cmp2), dst, src\n@@ -1394,8 +1379,0 @@\n-\/\/ When cmp1 < cmp2 or any of them is NaN then dst = src, otherwise, dst = dst\n-\/\/ Clarification\n-\/\/   scenario 1:\n-\/\/     java code      :  cmp2 <= cmp1 ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n-\/\/   scenario 2:\n-\/\/     java code      :  cmp1 >= cmp2 ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n@@ -1426,8 +1403,0 @@\n-\/\/ When cmp1 <= cmp2 or any of them is NaN then dst = dst, otherwise, dst = src\n-\/\/ Clarification\n-\/\/   scenario 1:\n-\/\/     java code      :  !(cmp2 > cmp1) ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 gt cmp2), dst, src\n-\/\/   scenario 2:\n-\/\/     java code      :  !(cmp1 < cmp2) ? dst : src\n-\/\/     transformed to :  CMove dst, (cmp1 gt cmp2), dst, src\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":11,"deletions":42,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -82,3 +82,0 @@\n-        if (!TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\")) {\n-            System.out.println(\"====== Not trigger BoolTest::ge\");\n-        }\n@@ -88,3 +85,0 @@\n-        if (!TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\")) {\n-            System.out.println(\"====== Not trigger BoolTest::ge\");\n-        }\n@@ -95,3 +89,0 @@\n-        if (!TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\")) {\n-            System.out.println(\"====== Not trigger BoolTest::gt\");\n-        }\n@@ -101,3 +92,0 @@\n-        if (!TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\")) {\n-            System.out.println(\"====== Not trigger BoolTest::gt\");\n-        }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFPComparison2.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}