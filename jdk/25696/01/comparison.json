{"files":[{"patch":"@@ -2173,2 +2173,3 @@\n-      assert(false, \"Should go to BoolTest::le case\");\n-      ShouldNotReachHere();\n+      \/\/ This log is for JDK-8358892\n+      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\");\n+      cmov_cmp_fp_ge(op1, op2, dst, src, is_single);\n@@ -2180,2 +2181,3 @@\n-      assert(false, \"Should go to BoolTest::lt case\");\n-      ShouldNotReachHere();\n+      \/\/ This log is for JDK-8358892\n+      log_develop_trace(jit, compilation)(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\");\n+      cmov_cmp_fp_gt(op2, op1, dst, src, is_single);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1362,0 +1362,32 @@\n+\/\/ When cmp1 < cmp2 or any of them is NaN then dst = dst, otherwise, dst = src\n+\/\/ Clarification\n+\/\/   scenario 1:\n+\/\/     java code      :  !(cmp2 >= cmp1) ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 ge cmp2), dst, src\n+\/\/   scenario 2:\n+\/\/     java code      :  !(cmp1 <= cmp2) ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 ge cmp2), dst, src\n+void MacroAssembler::cmov_cmp_fp_ge(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n+  if (UseZicond) {\n+    if (is_single) {\n+      fle_s(t0, cmp2, cmp1);\n+    } else {\n+      fle_d(t0, cmp2, cmp1);\n+    }\n+    czero_nez(dst, dst, t0);\n+    czero_eqz(t0 , src, t0);\n+    orr(dst, dst, t0);\n+    return;\n+  }\n+  Label no_set;\n+  if (is_single) {\n+    \/\/ jump if cmp1 < cmp2 or either is NaN\n+    \/\/ not jump (i.e. move src to dst) if cmp1 >= cmp2\n+    float_blt(cmp1, cmp2, no_set, false, true);\n+  } else {\n+    double_blt(cmp1, cmp2, no_set, false, true);\n+  }\n+  mv(dst, src);\n+  bind(no_set);\n+}\n+\n@@ -1394,0 +1426,32 @@\n+\/\/ When cmp1 >= cmp2 or any of them is NaN then dst = dst, otherwise, dst = src\n+\/\/ Clarification\n+\/\/   scenario 1:\n+\/\/     java code      :  cmp2 > cmp1 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 gt cmp2), dst, src\n+\/\/   scenario 2:\n+\/\/     java code      :  cmp1 < cmp2 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 gt cmp2), dst, src\n+void MacroAssembler::cmov_cmp_fp_gt(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n+  if (UseZicond) {\n+    if (is_single) {\n+      flt_s(t0, cmp1, cmp2);\n+    } else {\n+      flt_d(t0, cmp1, cmp2);\n+    }\n+    czero_nez(dst, dst, t0);\n+    czero_eqz(t0 , src, t0);\n+    orr(dst, dst, t0);\n+    return;\n+  }\n+  Label no_set;\n+  if (is_single) {\n+    \/\/ jump if cmp1 >= cmp2 or either is NaN\n+    \/\/ not jump (i.e. move src to dst) if cmp1 < cmp2\n+    float_bge(cmp1, cmp2, no_set, false, true);\n+  } else {\n+    double_bge(cmp1, cmp2, no_set, false, true);\n+  }\n+  mv(dst, src);\n+  bind(no_set);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -663,0 +663,1 @@\n+  void cmov_cmp_fp_ge(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n@@ -664,0 +665,1 @@\n+  void cmov_cmp_fp_gt(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,361 @@\n+\/*\n+ * Copyright (c) 2025, Rivos Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8358892\n+ * @summary The test is to trigger code path of BoolTest::ge\/gt in C2_MacroAssembler::enc_cmove_cmp_fp\n+ * @requires os.arch == \"riscv64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestFPComparison2\n+ *\/\n+public class TestFPComparison2 {\n+    static final double[] DOUBLES = new double[] {\n+        Double.NEGATIVE_INFINITY,\n+        -Double.MAX_VALUE,\n+        -1.0,\n+        -Double.MIN_VALUE,\n+        -0.0,\n+        0.0,\n+        Double.MIN_VALUE,\n+        1.0,\n+        Double.MAX_VALUE,\n+        Double.POSITIVE_INFINITY,\n+        Double.NaN,\n+    };\n+\n+    static final float[] FLOATS = new float[] {\n+        Float.NEGATIVE_INFINITY,\n+        -Float.MAX_VALUE,\n+        -1.0F,\n+        -Float.MIN_VALUE,\n+        -0.0F,\n+        0.0F,\n+        Float.MIN_VALUE,\n+        1.0F,\n+        Float.MAX_VALUE,\n+        Float.POSITIVE_INFINITY,\n+        Float.NaN,\n+    };\n+\n+    public static void main(String[] args) {\n+        \/\/ Booltest::ge\n+        TestFramework framework = new TestFramework(Test_ge_1.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:+UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                 .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\"),\n+                           \"Not trigger BoolTest::ge\");\n+\n+        framework = new TestFramework(Test_ge_1.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:-UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                 .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\"),\n+                           \"Not trigger BoolTest::ge\");\n+\n+        framework = new TestFramework(Test_ge_2.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:+UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\"),\n+                            \"Not trigger BoolTest::ge\");\n+\n+        framework = new TestFramework(Test_ge_2.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:-UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::ge\"),\n+                            \"Not trigger BoolTest::ge\");\n+\n+        \/\/ Booltest::gt\n+        framework = new TestFramework(Test_gt_1.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:+UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                 .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\"),\n+                           \"Not trigger BoolTest::gt\");\n+\n+        framework = new TestFramework(Test_gt_1.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:-UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                 .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\"),\n+                           \"Not trigger BoolTest::gt\");\n+\n+        framework = new TestFramework(Test_gt_2.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:+UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\"),\n+                            \"Not trigger BoolTest::gt\");\n+\n+        framework = new TestFramework(Test_gt_2.class);\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:-UseZicond\", \"-Xlog:jit+compilation=trace\")\n+                .start();\n+        Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"C2_MacroAssembler::enc_cmove_cmp_fp => BoolTest::gt\"),\n+                            \"Not trigger BoolTest::gt\");\n+    }\n+}\n+\n+class Test_ge_1 {\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge(float x, float y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x > y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x <= y\n+        return !(x <= y) ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge(double x, double y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x > y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x <= y\n+        return !(x <= y) ? 1 : 0;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_ge\", \"test_double_BoolTest_ge\"})\n+    public void runTests() {\n+        int err = 0;\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_ge(x, y);\n+                int expected = !(x <= y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (ge), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_ge(x, y);\n+                int expected = !(x <= y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (ge), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        if (err != 0) {\n+            throw new RuntimeException(\"Some tests failed\");\n+        }\n+    }\n+}\n+\n+class Test_ge_2 {\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_ge(float x, float y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x > y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x <= y\n+        return !(x >= y) ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_ge(double x, double y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x > y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x <= y\n+        return !(x >= y) ? 1 : 0;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_ge\", \"test_double_BoolTest_ge\"})\n+    public void runTests() {\n+        int err = 0;\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_ge(x, y);\n+                int expected = !(x >= y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (ge), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_ge(x, y);\n+                int expected = !(x >= y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (ge), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        if (err != 0) {\n+            throw new RuntimeException(\"Some tests failed\");\n+        }\n+    }\n+}\n+\n+class Test_gt_1 {\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt(float x, float y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x >= y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x < y\n+        return !(x < y) ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt(double x, double y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x >= y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x < y\n+        return !(x < y) ? 1 : 0;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_gt\", \"test_double_BoolTest_gt\"})\n+    public void runTests() {\n+        int err = 0;\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_gt(x, y);\n+                int expected = !(x < y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (gt), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_gt(x, y);\n+                int expected = !(x < y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (gt), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        if (err != 0) {\n+            throw new RuntimeException(\"Some tests failed\");\n+        }\n+    }\n+}\n+\n+class Test_gt_2 {\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_float_BoolTest_gt(float x, float y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x >= y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x < y\n+        return !(x > y) ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVE_I, \"1\"})\n+    public static int test_double_BoolTest_gt(double x, double y) {\n+        \/\/ return 1\n+        \/\/      when either x or y is NaN\n+        \/\/      when neither is NaN, and x >= y\n+        \/\/ return 0\n+        \/\/      when neither is NaN, and x < y\n+        return !(x > y) ? 1 : 0;\n+    }\n+\n+    @Run(test = {\"test_float_BoolTest_gt\", \"test_double_BoolTest_gt\"})\n+    public void runTests() {\n+        int err = 0;\n+\n+        for (int i = 0; i < TestFPComparison2.FLOATS.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.FLOATS.length; j++) {\n+                float x = TestFPComparison2.FLOATS[i];\n+                float y = TestFPComparison2.FLOATS[j];\n+                int actual = test_float_BoolTest_gt(x, y);\n+                int expected = !(x > y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Float failed (gt), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < TestFPComparison2.DOUBLES.length; i++) {\n+            for (int j = 0; j < TestFPComparison2.DOUBLES.length; j++) {\n+                double x = TestFPComparison2.DOUBLES[i];\n+                double y = TestFPComparison2.DOUBLES[j];\n+                int actual = test_double_BoolTest_gt(x, y);\n+                int expected = !(x > y) ? 1 : 0;\n+                if (actual != expected) {\n+                    System.out.println(\"Double failed (gt), x: \" + x + \", y: \" + y +\n+                                        \", actual: \" + actual + \", expected: \" + expected);\n+                    err++;\n+                }\n+            }\n+        }\n+\n+        if (err != 0) {\n+            throw new RuntimeException(\"Some tests failed\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFPComparison2.java","additions":361,"deletions":0,"binary":false,"changes":361,"status":"added"}]}