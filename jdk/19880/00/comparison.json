{"files":[{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.Random;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 1)\n+public abstract class VectorLoadToStoreForwarding {\n+    @Param({\"2048\"})\n+    public int SIZE;\n+\n+    private int[] aI;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private Random r = new Random(seed);\n+\n+    @Setup\n+    public void init() {\n+        aI = new int[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            aI[i] = r.nextInt();\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_00() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 0] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_01() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 1] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_02() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 2] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_03() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 3] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_04() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 4] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_05() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 5] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_06() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 6] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_07() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 7] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_08() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 8] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_09() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 9] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_10() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 10] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_11() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 11] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_12() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 12] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_13() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 13] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_14() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 14] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_15() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 15] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_16() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 16] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_17() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 17] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_18() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 18] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_19() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 19] + 1;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmark_20() {\n+        for (int i = 20; i < SIZE; i++) {\n+            aI[i] = aI[i - 20] + 1;\n+        }\n+    }\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\n+        \"-XX:+UseSuperWord\"\n+    })\n+    public static class VectorLoadToStoreForwardingSuperWord extends VectorLoadToStoreForwarding {}\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\n+        \"-XX:-UseSuperWord\"\n+    })\n+    public static class VectorLoadToStoreForwardingNoSuperWord extends VectorLoadToStoreForwarding {}\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorLoadToStoreForwarding.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"}]}