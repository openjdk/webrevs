{"files":[{"patch":"@@ -977,45 +977,0 @@\n-\/\/ Vector element size statistics for loop vectorization with vector masks\n-class VectorElementSizeStats {\n- private:\n-  static const int NO_SIZE = -1;\n-  static const int MIXED_SIZE = -2;\n-  int* _stats;\n-\n- public:\n-  VectorElementSizeStats(Arena* a) : _stats(NEW_ARENA_ARRAY(a, int, 4)) {\n-    clear();\n-  }\n-\n-  void clear() { memset(_stats, 0, sizeof(int) * 4); }\n-\n-  void record_size(int size) {\n-    assert(1 <= size && size <= 8 && is_power_of_2(size), \"Illegal size\");\n-    _stats[exact_log2(size)]++;\n-  }\n-\n-  int count_size(int size) {\n-    assert(1 <= size && size <= 8 && is_power_of_2(size), \"Illegal size\");\n-    return _stats[exact_log2(size)];\n-  }\n-\n-  int smallest_size() {\n-    for (int i = 0; i <= 3; i++) {\n-      if (_stats[i] > 0) return (1 << i);\n-    }\n-    return NO_SIZE;\n-  }\n-\n-  int largest_size() {\n-    for (int i = 3; i >= 0; i--) {\n-      if (_stats[i] > 0) return (1 << i);\n-    }\n-    return NO_SIZE;\n-  }\n-\n-  int unique_size() {\n-    int small = smallest_size();\n-    int large = largest_size();\n-    return (small == large) ? small : MIXED_SIZE;\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"}]}