{"files":[{"patch":"@@ -573,1 +573,1 @@\n-\/\/ Node: if the base is known, then it is in the 0th summand. A base can be:\n+\/\/ Note: if the base is known, then it is in the 0th summand. A base can be:\n","filename":"src\/hotspot\/share\/opto\/mempointer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -712,2 +712,2 @@\n-\/\/   pointer = base + invar + iv_scale * iv + con\n-\/\/\n+\/\/   pointer = base + invar + iv_summand + con\n+\/\/ with\n@@ -715,0 +715,1 @@\n+\/\/   iv_summand = iv_scale * iv\n@@ -723,1 +724,3 @@\n-\/\/       a summand where its variable is main-loop variant.\n+\/\/       a summand where its variable is main-loop variant. Note: MemPointer already\n+\/\/       ensures that there is at most one summand per variable, so there is at\n+\/\/       most one summand with iv.\n@@ -728,11 +731,0 @@\n-\/\/ A VPointer can be marked \"invalid\", if some of these conditions are not met, or\n-\/\/ it is unknown if they are met. If a VPointer is marked \"invalid\", it always\n-\/\/ returns conservative answers to aliasing queries, which means that we do not\n-\/\/ optimize in these cases. For example:\n-\/\/    - is_adjacent_to_and_before: returning true would allow optimizations such as\n-\/\/                                 packing into vectors. So for \"invalid\" VPointers\n-\/\/                                 we always return false (i.e. unknown).\n-\/\/    - never_overlaps_with: returning true would allow optimizations such as\n-\/\/                           swapping the order of memops. So for \"invalid\" VPointers\n-\/\/                           we always return false (i.e. unknown).\n-\/\/\n@@ -748,0 +740,10 @@\n+\/\/ If a VPointer is marked \"invalid\", it always returns conservative answers to\n+\/\/ aliasing queries, which means that we do not optimize in these cases.\n+\/\/ For example:\n+\/\/    - is_adjacent_to_and_before: returning true would allow optimizations such as\n+\/\/                                 packing into vectors. So for \"invalid\" VPointers,\n+\/\/                                 we always return false (i.e. unknown).\n+\/\/    - never_overlaps_with: returning true would allow optimizations such as\n+\/\/                           swapping the order of memops. So for \"invalid\" VPointers,\n+\/\/                           we always return false (i.e. unknown).\n+\/\/\n@@ -926,2 +928,2 @@\n-  \/\/ We may for example have failed to fully decompose the MemPointer, possibly\n-  \/\/ because such a decomposition is not considered safe.\n+  \/\/ We may, for example, have failed to fully decompose the MemPointer,\n+  \/\/ possibly because such a decomposition is not considered safe.\n@@ -939,1 +941,1 @@\n-  \/\/ All summands, except the iv-summand must be pre-loop invariant. This is necessary\n+  \/\/ All summands, except the iv-summand, must be pre-loop invariant. This is necessary\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"}]}