{"files":[{"patch":"@@ -343,4 +343,0 @@\n-bool NativeInstruction::is_sigill_not_entrant() {\n-  return uint_at(0) == 0xd4bbd5a1; \/\/ dcps1 #0xdead\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,0 @@\n-  bool is_sigill_not_entrant();\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -72,7 +72,0 @@\n-  \/\/ We use an illtrap for marking a method as not_entrant.\n-  bool is_sigill_not_entrant() {\n-    \/\/ Work around a C++ compiler bug which changes 'this'.\n-    return NativeInstruction::is_sigill_not_entrant_at(addr_at(0));\n-  }\n-  static bool is_sigill_not_entrant_at(address addr);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -411,6 +411,0 @@\n-\/\/ A 16-bit instruction with all bits ones is permanently reserved as an illegal instruction.\n-bool NativeInstruction::is_sigill_not_entrant() {\n-  \/\/ jvmci\n-  return uint_at(0) == 0xffffffff;\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-  bool is_sigill_not_entrant();\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -88,3 +88,0 @@\n-  \/\/ We use an illtrap for marking a method as not_entrant.\n-  bool is_sigill_not_entrant();\n-\n","filename":"src\/hotspot\/cpu\/s390\/nativeInst_s390.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}