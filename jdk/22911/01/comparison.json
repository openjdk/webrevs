{"files":[{"patch":"@@ -881,9 +881,3 @@\n-                if (isSelfSigned) {\n-                    \/\/ If a self-signed certificate has trust settings without specific entries,\n-                    \/\/ trust it for all purposes\n-                    tce.trustedKeyUsageValue = KnownOIDs.anyExtendedKeyUsage.value();\n-                } else {\n-                    \/\/ Otherwise, return immediately. The certificate is not\n-                    \/\/ added into entries.\n-                    return;\n-                }\n+               \/\/ If there is no trust settings then the certificate was verified against other trusted certificates already\n+               \/\/ or it is self-signed\n+               tce.trustedKeyUsageValue = KnownOIDs.anyExtendedKeyUsage.value();\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -461,0 +461,28 @@\n+static bool validateCertificate(SecCertificateRef certRef) {\n+    SecTrustRef secTrust = NULL;\n+    CFMutableArrayRef subjCerts = CFArrayCreateMutable(NULL, 1, &kCFTypeArrayCallBacks);\n+    CFArraySetValueAtIndex(subjCerts, 0, certRef);\n+\n+    SecPolicyRef policy = SecPolicyCreateBasicX509();\n+    OSStatus ortn = SecTrustCreateWithCertificates(subjCerts, policy, &secTrust);\n+    bool result = false;\n+    if (ortn) {\n+        \/* should never happen *\/\n+        cssmPerror(\"SecTrustCreateWithCertificates\", ortn);\n+        goto errOut;\n+    }\n+\n+    result = SecTrustEvaluateWithError(secTrust, NULL);\n+errOut:\n+   if (policy) {\n+       CFRelease(policy);\n+   }\n+   if (secTrust) {\n+       CFRelease(secTrust);\n+   }\n+   if (subjCerts) {\n+       CFRelease(subjCerts);\n+   }\n+   return result;\n+}\n+\n@@ -495,1 +523,1 @@\n-            \/\/ Only add certificates with trust settings\n+            \/\/ If no trust settings we need to verify the certificate first\n@@ -497,1 +525,6 @@\n-                continue;\n+                bool valid = validateCertificate(certRef);\n+                if (valid) {\n+                  inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+                } else {\n+                    continue;\n+                }\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -660,1 +660,2 @@\n-    sun\/security\/krb5\/config\/native\/TestDynamicStore.java\n+    sun\/security\/krb5\/config\/native\/TestDynamicStore.java \\\n+    java\/security\/KeyStore\/CheckMacOSKeyChainIntermediateCATrust.java\n","filename":"test\/jdk\/TEST.groups","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.StreamSupport;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8347067\n+ * @library \/test\/lib\n+ * @requires os.family == \"mac\"\n+ * @summary Check whether loading of certificates from macOS Keychain correctly\n+ *          loads intermediate CA certificates\n+ * @run junit\/manual CheckMacOSKeyChainIntermediateCATrust\n+ *\/\n+public class CheckMacOSKeyChainIntermediateCATrust {\n+\n+    private static final String DIR = System.getProperty(\"test.src\", \".\");\n+\n+    @Test\n+    public void test() throws Throwable {\n+        KeyStore ks = KeyStore.getInstance(\"KeychainStore\");\n+        ks.load(null, null);\n+\n+        Iterator<String> iterator = ks.aliases().asIterator();\n+        List<X509Certificate> certificates = StreamSupport.stream(\n+                        Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED), false)\n+                .sorted()\n+                .map(alias -> {\n+                    try {\n+                        return (X509Certificate) ks.getCertificate(alias);\n+                    } catch (KeyStoreException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                })\n+                .toList();\n+\n+        System.out.println(\"Verifying expected certificates are trusted\");\n+\n+        String rootCASubjectName = \"CN=Example CA,O=Example,C=US\";\n+        assertThat(containsSubjectName(certificates, rootCASubjectName), \"Root CA not found \" + rootCASubjectName, certificates);\n+\n+        String intermediateCASubjectName = \"CN=Example Intermediate CA,O=Example,C=US\";\n+        assertThat(containsSubjectName(certificates, intermediateCASubjectName), \"Intermediate CA not found \" + intermediateCASubjectName, certificates);\n+\n+        String nonTrustedCASubjectName = \"CN=Non Trusted Example CA,O=Example,C=US\";\n+        assertThat(not(containsSubjectName(certificates, nonTrustedCASubjectName)), \"Non trusted CA found \" + nonTrustedCASubjectName, certificates);\n+    }\n+\n+    @BeforeAll\n+    static void setup() {\n+        System.out.println(\"Adding certificates to key chain\");\n+        addCertificatesToKeyChain();\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        System.out.println(\"Cleaning up\");\n+        deleteCertificatesFromKeyChain();\n+    }\n+\n+    private static void addCertificatesToKeyChain() {\n+        String loginKeyChain = getLoginKeyChain();\n+\n+        Path caPath = Path.of(\"%s\/%s\".formatted(DIR, \"test-ca.pem\"));\n+        List<String> args = List.of(\n+                \"\/usr\/bin\/security\",\n+                \"add-trusted-cert\",\n+                \"-k\", loginKeyChain,\n+                caPath.toString()\n+        );\n+        executeProcess(args);\n+\n+        caPath = Path.of(\"%s\/%s\".formatted(DIR, \"non-trusted-test-ca.pem\"));\n+        args = List.of(\n+                \"\/usr\/bin\/security\",\n+                \"add-certificates\",\n+                \"-k\", loginKeyChain,\n+                caPath.toString()\n+        );\n+        executeProcess(args);\n+\n+        caPath = Path.of(\"%s\/%s\".formatted(DIR, \"test-intermediate-ca.pem\"));\n+        args = List.of(\n+                \"\/usr\/bin\/security\",\n+                \"add-certificates\",\n+                \"-k\", loginKeyChain,\n+                caPath.toString()\n+        );\n+        executeProcess(args);\n+\n+    }\n+\n+    private static String getLoginKeyChain() {\n+        return Path.of(System.getProperty(\"user.home\"), \"Library\/Keychains\/login.keychain-db\").toString();\n+    }\n+\n+    private static void executeProcess(List<String> params) {\n+        System.out.println(\"Command line: \" + params);\n+        try {\n+            ProcessTools.executeProcess(params.toArray(new String[0]))\n+                    .shouldHaveExitValue(0);\n+        } catch (Exception e) {\n+            fail(\"Unexpected exception: \" + e);\n+        }\n+    }\n+\n+    private static void deleteCertificatesFromKeyChain() {\n+        executeProcess(\n+                List.of(\n+                        \"\/usr\/bin\/security\",\n+                        \"delete-certificate\",\n+                        \"-c\", \"Non Trusted Example CA\",\n+                        \"-t\"\n+                )\n+        );\n+\n+        executeProcess(\n+                List.of(\n+                        \"\/usr\/bin\/security\",\n+                        \"delete-certificate\",\n+                        \"-c\", \"Example CA\",\n+                        \"-t\"\n+                )\n+        );\n+\n+        executeProcess(\n+                List.of(\n+                        \"\/usr\/bin\/security\",\n+                        \"delete-certificate\",\n+                        \"-c\", \"Example Intermediate CA\",\n+                        \"-t\"\n+                )\n+        );\n+    }\n+\n+    private static boolean not(boolean condition) {\n+        return !condition;\n+    }\n+\n+    private static boolean containsSubjectName(List<X509Certificate> certificates, String subjectName) {\n+        return certificates.stream()\n+                .map(cert -> cert.getSubjectX500Principal().getName())\n+                .anyMatch(name -> name.contains(subjectName));\n+    }\n+\n+    private static List<String> getSubjects(List<X509Certificate> certificates) {\n+        return certificates.stream()\n+                .map(cert -> cert.getSubjectX500Principal().getName())\n+                .toList();\n+    }\n+\n+    private static void assertThat(boolean expected, String message, List<X509Certificate> certificates) {\n+        if (!expected) {\n+            throw new AssertionError(message + \", subjects: \" + getSubjects(certificates));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/KeyStore\/CheckMacOSKeyChainIntermediateCATrust.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+#!\/usr\/bin\/env bash\n+\n+set -ex\n+\n+cd \"$(dirname \"$0\")\"\n+\n+openssl genrsa -out root.key 2048\n+openssl req -x509 -sha256 -nodes -extensions v3_ca -key root.key -subj \"\/C=US\/O=Example\/CN=Example CA\" -days 3650 -out test-ca.pem\n+\n+openssl genrsa -out intermediate.key 2048\n+openssl req -new -sha256 -nodes -key intermediate.key  \\\n+  -subj \"\/C=US\/O=Example\/CN=Example Intermediate CA\" -out test-intermediate-ca.csr\n+\n+openssl x509 -req \\\n+ -extensions v3_ca \\\n+ -extfile openssl.cnf \\\n+ -in test-intermediate-ca.csr \\\n+ -CA test-ca.pem \\\n+ -CAkey root.key \\\n+ -CAcreateserial \\\n+ -out test-intermediate-ca.pem \\\n+ -days 3650 \\\n+ -sha256\n+\n+openssl genrsa -out non-trusted-root.key 2048\n+openssl req -x509 -sha256 -nodes -extensions v3_ca -key non-trusted-root.key -subj \"\/C=US\/O=Example\/CN=Non Trusted Example CA\" -days 3650 -out non-trusted-test-ca.pem\n+\n+rm -f non-trusted-root.key root.key test-intermediate-ca.csr intermediate.key test-ca.srl\n","filename":"test\/jdk\/java\/security\/KeyStore\/generate-mac-os-intermediate-ca-certs.sh","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDYTCCAkmgAwIBAgIUfsgXAir7EToLxt+9WCYfhfuiGt8wDQYJKoZIhvcNAQEL\n+BQAwQDELMAkGA1UEBhMCVVMxEDAOBgNVBAoMB0V4YW1wbGUxHzAdBgNVBAMMFk5v\n+biBUcnVzdGVkIEV4YW1wbGUgQ0EwHhcNMjUwMTI2MjIyNDQzWhcNMzUwMTI0MjIy\n+NDQzWjBAMQswCQYDVQQGEwJVUzEQMA4GA1UECgwHRXhhbXBsZTEfMB0GA1UEAwwW\n+Tm9uIFRydXN0ZWQgRXhhbXBsZSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\n+AQoCggEBALQyfO8sEDsp7qDH8OWjotinxyjTNjJ0I0Cke8pPHU73wL18ZFV8OvoI\n+OGTcYGFjRjOnjKUDFT6qC4oupGh8+NSfslqNQ35l4nU1tYRB81QHfAyCMq3gSVoU\n+hgaZle9x2rJrawAkxLE8xMrOkmM0r805O7x+hu9Bj3PwxQ0ubN5cb3SFvBhhlkss\n+8q9qUfK9mLQavgfp\/U1WgtlnX4GP+HFAzthcz4ENagMpUuD1h9aDtFPNJREkTGhX\n+mh+U7zkVZjP9waN5p2monsZIsSLvrdAfnySBjceueHHOi9l\/OYUG3wayWvNmxnpV\n+RtI1Zs4l7qs\/mWGrqy4Fl2iwGZ3sy0UCAwEAAaNTMFEwHQYDVR0OBBYEFAY88dZY\n++LJgqAqbFYtmGzqyyD1oMB8GA1UdIwQYMBaAFAY88dZY+LJgqAqbFYtmGzqyyD1o\n+MA8GA1UdEwEB\/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAGSr3ifbi5AX4EO\/\n+eN1CK+XKPgbnVI6NrtyZfjDja1RmbYPFcuRaSDdH\/8y3oHLhgJzyu\/vFtvMJps\/B\n+JslYlIZHxhSC2sSqg2FrA5JQZlNfDSF2pRqk0Gs9xQj+ZtGbmUj0c+aOB5edjD\/C\n+h0GIh0WL+WtKAl6VNI+urqYuiQ19CBPuF8OAMkpC\/MYQocAtGhsRrlsMtMApJcvX\n+NAzf+3a+eUyEZnpcj7fkpGuBsKS0giNWVVtyNXMOoHL3L1PBqbI7lIQdHiBdivTm\n+Cg+icgOLBXsouJzovjT1bNL3JTU3v7z2\/hYr0x5gC9yK\/rS79uVcpxvTU3gub8WB\n+HK1MYhc=\n+-----END CERTIFICATE-----\n","filename":"test\/jdk\/java\/security\/KeyStore\/non-trusted-test-ca.pem","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+[ v3_ca ]\n+\n+\n+# Extensions for a typical CA\n+\n+\n+# PKIX recommendation.\n+\n+subjectKeyIdentifier=hash\n+\n+authorityKeyIdentifier=keyid:always,issuer:always\n+\n+# This is what PKIX recommends but some broken software chokes on critical\n+# extensions.\n+#basicConstraints = critical,CA:true\n+# So we do this instead.\n+basicConstraints = CA:true\n","filename":"test\/jdk\/java\/security\/KeyStore\/openssl.cnf","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDSTCCAjGgAwIBAgIUHYTHHRJWyWjKpg5H2acbXj0aDeUwDQYJKoZIhvcNAQEL\n+BQAwNDELMAkGA1UEBhMCVVMxEDAOBgNVBAoMB0V4YW1wbGUxEzARBgNVBAMMCkV4\n+YW1wbGUgQ0EwHhcNMjUwMTA3MTUxMzExWhcNMzUwMTA1MTUxMzExWjA0MQswCQYD\n+VQQGEwJVUzEQMA4GA1UECgwHRXhhbXBsZTETMBEGA1UEAwwKRXhhbXBsZSBDQTCC\n+ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANQtNFDwJ8KayH0hFHCioT18\n+aMToU8SNBT+ogKT7rQhWkqC4aBVS+H3JSN1vG\/RN+qWFS\/DrTpUb5tVY9mYH5s4p\n+PqnXXN1EIoOgn+2vYB7sMY\/MyAzn3MynDNHE0QYKdxK3H06BrmTgDiDcpYEexRex\n+B\/3p9daJrU9L\/EK4l41Vk7jOqu3wq39ECvAdMpt1eIg02nUS1EIxLmfoFRSHHtRf\n+rRPAU84BdGCYMWuBfxcXqMn4PumfkS3AoG6ul277FUNsvjlmEoQeotuXwCz1ELyy\n+U3uHnSFItPs\/69Bg2FxAeig9zbAnYO9eCYPrhME452tROnOqhm0LjZjR8R4Lbl0C\n+AwEAAaNTMFEwHQYDVR0OBBYEFGt4wbms5GC1yWwh2TytpEuHpMReMB8GA1UdIwQY\n+MBaAFGt4wbms5GC1yWwh2TytpEuHpMReMA8GA1UdEwEB\/wQFMAMBAf8wDQYJKoZI\n+hvcNAQELBQADggEBAAaq5JrVfinF53fBQKwBZYXv7Afr\/H04GYVhXqAtl1n65Maj\n+si4GRBDSyhMWUrwHFNH4SIGHu4LZU2aROXIXrJl3qFXFl3WfdyVZTNjssgVcKFxl\n+Uav+pISUiIpAZPV55tFkE\/2gmpkLUyhaiUQvql4XTZDSU8mTcWovzMVusXQtfo+L\n+O848Fspo30BvPEUUt1BOhqKwWbHV\/2WJ4vYJPt6jFGnDMZHdILCp\/DOXBxHS0pxd\n+0Tofrfum0MUbtScuzjM\/otMduwjSalrDhkNLsLxLueXTf6dtnE9CLxaWXhWlAJ70\n+0mGFdwvYtLEbLTJKtqqq+lafAt5Af69VoqM1jjo=\n+-----END CERTIFICATE-----\n","filename":"test\/jdk\/java\/security\/KeyStore\/test-ca.pem","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDpTCCAo2gAwIBAgIUBdWVSNEFs3LuTagptBgmihEZrVowDQYJKoZIhvcNAQEL\n+BQAwNDELMAkGA1UEBhMCVVMxEDAOBgNVBAoMB0V4YW1wbGUxEzARBgNVBAMMCkV4\n+YW1wbGUgQ0EwHhcNMjUwMTA3MTUxMzExWhcNMzUwMTA1MTUxMzExWjBBMQswCQYD\n+VQQGEwJVUzEQMA4GA1UECgwHRXhhbXBsZTEgMB4GA1UEAwwXRXhhbXBsZSBJbnRl\n+cm1lZGlhdGUgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCXK7MQ\n+\/LfR\/zm8fV677S2NCsBVdizTsE5ugYuXGNlrbF26pcyJhK8N\/T2l2HAz2UszzRB2\n+ZpqyE21SpepYATvG9M3moPEkFiojmhS+3mPhRhgTAxAIYA+hQ+8ics6C2zCvl2vw\n+5PpHdbZiL+2K\/j+DtZxfmJoG0HYWMHeqlbA3smEkNOfOS9rc0kGpu3Q4mCLO+kmb\n+IofGf9ASsuyWH9GgxCcmUlu6UTRvt57LlTcaz3mncq6V++UDZHOmyTa6q9GIgTUc\n+sTfcS0aMXfBvsw6eZhlTcWvkXQaJRVb6UeGJwx\/Kq715XphWJ9wXc4pT\/f7nHinc\n+utdXjnayO+o3Vk85AgMBAAGjgaEwgZ4wHQYDVR0OBBYEFGlsam1VG6UErlvVa1+p\n+40CuawniMG8GA1UdIwRoMGaAFGt4wbms5GC1yWwh2TytpEuHpMReoTikNjA0MQsw\n+CQYDVQQGEwJVUzEQMA4GA1UECgwHRXhhbXBsZTETMBEGA1UEAwwKRXhhbXBsZSBD\n+QYIUHYTHHRJWyWjKpg5H2acbXj0aDeUwDAYDVR0TBAUwAwEB\/zANBgkqhkiG9w0B\n+AQsFAAOCAQEAS9n0MIie2TCo+5Wbur7RrX4aOMrKooZwSYxyvb4c+U6zNYBZmkwI\n+Pqk\/LYNU6FMCKCg\/PT4kcgGAu+UeYb6K2Llwyej4Tjy\/8bCOXgrPTzP4f0COg2wi\n+y1SlMSEolhslJV46HlZHtrASpE8mj7mh3RRTAkn86gCEd7A\/CdQgMrTiwVjOGrza\n+B5\/UGJpVUvm7W5H1UXunYqFrVaMIN0zWfaj4lRgzLAkZ7ldLdBA7mIbc2\/C9JSvX\n+dCezRkjJpIHbXjojtDek1vDy\/UopyQRYpz2CPu62o8iM9Iw6M7SzF6d8ud9rzeZ1\n+zwtxTCJqohwP3t132oxoYwEyYpF+Xcrvhg==\n+-----END CERTIFICATE-----\n","filename":"test\/jdk\/java\/security\/KeyStore\/test-intermediate-ca.pem","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"}]}