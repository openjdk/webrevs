{"files":[{"patch":"@@ -1789,0 +1789,10 @@\n+void C2_MacroAssembler::unordered_reduce_operation_128(BasicType typ, int opcode, XMMRegister dst, XMMRegister src) {\n+  switch (opcode) {\n+    case Op_AddReductionVF: addps(dst, src); break;\n+    case Op_AddReductionVD: addpd(dst, src); break;\n+    case Op_MulReductionVF: mulps(dst, src); break;\n+    case Op_MulReductionVD: mulpd(dst, src); break;\n+    default:                assert(false, \"wrong opcode\");\n+  }\n+}\n+\n@@ -1837,0 +1847,12 @@\n+void C2_MacroAssembler::unordered_reduce_operation_256(BasicType typ, int opcode, XMMRegister dst,  XMMRegister src1, XMMRegister src2) {\n+  int vector_len = Assembler::AVX_256bit;\n+\n+  switch (opcode) {\n+    case Op_AddReductionVF: vaddps(dst, src1, src2, vector_len); break;\n+    case Op_AddReductionVD: vaddpd(dst, src1, src2, vector_len); break;\n+    case Op_MulReductionVF: vmulps(dst, src1, src2, vector_len); break;\n+    case Op_MulReductionVD: vmulpd(dst, src1, src2, vector_len); break;\n+    default:                assert(false, \"wrong opcode\");\n+  }\n+}\n+\n@@ -1855,0 +1877,18 @@\n+void C2_MacroAssembler::unordered_reduce_fp(int opcode, int vlen,\n+                                            XMMRegister dst, XMMRegister src,\n+                                            XMMRegister vtmp1, XMMRegister vtmp2) {\n+  switch (opcode) {\n+    case Op_AddReductionVF:\n+    case Op_MulReductionVF:\n+      unorderedReduceF(opcode, vlen, dst, src, vtmp1, vtmp2);\n+      break;\n+\n+    case Op_AddReductionVD:\n+    case Op_MulReductionVD:\n+      unorderedReduceD(opcode, vlen, dst, src, vtmp1, vtmp2);\n+      break;\n+\n+    default: assert(false, \"wrong opcode\");\n+  }\n+}\n+\n@@ -1957,0 +1997,39 @@\n+void C2_MacroAssembler::unorderedReduceF(int opcode, int vlen, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2) {\n+  switch (vlen) {\n+    case 2:\n+      assert(vtmp1 == xnoreg, \"\");\n+      assert(vtmp2 == xnoreg, \"\");\n+      unorderedReduce2F(opcode, dst, src);\n+      break;\n+    case 4:\n+      assert(vtmp2 == xnoreg, \"\");\n+      unorderedReduce4F(opcode, dst, src, vtmp1);\n+      break;\n+    case 8:\n+      unorderedReduce8F(opcode, dst, src, vtmp1, vtmp2);\n+      break;\n+    case 16:\n+      unorderedReduce16F(opcode, dst, src, vtmp1, vtmp2);\n+      break;\n+    default: assert(false, \"wrong vector length\");\n+  }\n+}\n+\n+void C2_MacroAssembler::unorderedReduceD(int opcode, int vlen, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2) {\n+  switch (vlen) {\n+    case 2:\n+      assert(vtmp1 == xnoreg, \"\");\n+      assert(vtmp2 == xnoreg, \"\");\n+      unorderedReduce2D(opcode, dst, src);\n+      break;\n+    case 4:\n+      assert(vtmp2 == xnoreg, \"\");\n+      unorderedReduce4D(opcode, dst, src, vtmp1);\n+      break;\n+    case 8:\n+      unorderedReduce8D(opcode, dst, src, vtmp1, vtmp2);\n+      break;\n+    default: assert(false, \"wrong vector length\");\n+  }\n+}\n+\n@@ -2184,0 +2263,23 @@\n+void C2_MacroAssembler::unorderedReduce2F(int opcode, XMMRegister dst, XMMRegister src) {\n+  pshufd(dst, src, 0x1);\n+  reduce_operation_128(T_FLOAT, opcode, dst, src);\n+}\n+\n+void C2_MacroAssembler::unorderedReduce4F(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp) {\n+  pshufd(vtmp, src, 0xE);\n+  unordered_reduce_operation_128(T_FLOAT, opcode, vtmp, src);\n+  unorderedReduce2F(opcode, dst, vtmp);\n+}\n+\n+void C2_MacroAssembler::unorderedReduce8F(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2) {\n+  vextractf128_high(vtmp1, src);\n+  unordered_reduce_operation_128(T_FLOAT, opcode, vtmp1, src);\n+  unorderedReduce4F(opcode, dst, vtmp1, vtmp2);\n+}\n+\n+void C2_MacroAssembler::unorderedReduce16F(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2) {\n+  vextractf64x4_high(vtmp2, src);\n+  unordered_reduce_operation_256(T_FLOAT, opcode, vtmp2, vtmp2, src);\n+  unorderedReduce8F(opcode, dst, vtmp2, vtmp1, vtmp2);\n+}\n+\n@@ -2202,0 +2304,17 @@\n+void C2_MacroAssembler::unorderedReduce2D(int opcode, XMMRegister dst, XMMRegister src) {\n+  pshufd(dst, src, 0xE);\n+  reduce_operation_128(T_DOUBLE, opcode, dst, src);\n+}\n+\n+void C2_MacroAssembler::unorderedReduce4D(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp) {\n+  vextractf128_high(vtmp, src);\n+  unordered_reduce_operation_128(T_DOUBLE, opcode, vtmp, src);\n+  unorderedReduce2D(opcode, dst, vtmp);\n+}\n+\n+void C2_MacroAssembler::unorderedReduce8D(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2) {\n+  vextractf64x4_high(vtmp2, src);\n+  unordered_reduce_operation_256(T_DOUBLE, opcode, vtmp2, vtmp2, src);\n+  unorderedReduce4D(opcode, dst, vtmp2, vtmp1);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":119,"deletions":0,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -152,0 +152,3 @@\n+  void unordered_reduce_fp(int opcode, int vlen,\n+                           XMMRegister dst, XMMRegister src,\n+                           XMMRegister vtmp1 = xnoreg, XMMRegister vtmp2 = xnoreg);\n@@ -164,0 +167,2 @@\n+  void unorderedReduceF(int opcode, int vlen, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2);\n+  void unorderedReduceD(int opcode, int vlen, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2);\n@@ -200,0 +205,6 @@\n+  \/\/ Unordered Float Reduction\n+  void unorderedReduce2F(int opcode, XMMRegister dst, XMMRegister src);\n+  void unorderedReduce4F(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp);\n+  void unorderedReduce8F(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2);\n+  void unorderedReduce16F(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2);\n+\n@@ -205,0 +216,5 @@\n+  \/\/ Unordered Double Reduction\n+  void unorderedReduce2D(int opcode, XMMRegister dst, XMMRegister src);\n+  void unorderedReduce4D(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp);\n+  void unorderedReduce8D(int opcode, XMMRegister dst, XMMRegister src, XMMRegister vtmp1, XMMRegister vtmp2);\n+\n@@ -208,0 +224,2 @@\n+  void unordered_reduce_operation_128(BasicType typ, int opcode, XMMRegister dst, XMMRegister src);\n+  void unordered_reduce_operation_256(BasicType typ, int opcode, XMMRegister dst, XMMRegister src1, XMMRegister src2);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5112,1 +5112,1 @@\n-  predicate(Matcher::vector_length(n->in(2)) <= 4); \/\/ src\n+  predicate(n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) <= 4); \/\/ src\n@@ -5126,1 +5126,1 @@\n-  predicate(Matcher::vector_length(n->in(2)) == 8); \/\/ src\n+  predicate(n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 8); \/\/ src\n@@ -5140,1 +5140,1 @@\n-  predicate(Matcher::vector_length(n->in(2)) == 16); \/\/ src\n+  predicate(n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 16); \/\/ src\n@@ -5153,0 +5153,69 @@\n+\n+instruct unordered_reduction2F(regF dst, regF src1, vec src2) %{\n+  \/\/ Non-strictly ordered floating-point add reduction for doubles. This rule is\n+  \/\/ intended for the VectorAPI (which allows for non-strictly ordered add reduction).\n+  \/\/ src1 contains reduction identity\n+  predicate(!n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 2); \/\/ src2\n+  match(Set dst (AddReductionVF src1 src2));\n+  match(Set dst (MulReductionVF src1 src2));\n+  effect(TEMP dst);\n+  format %{ \"vector_reduction_float  $dst,$src1,$src2 ;\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ unordered_reduce_fp(opcode, vlen, $dst$$XMMRegister, $src2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct unordered_reduction4F(regF dst, regF src1, vec src2, vec vtmp) %{\n+  \/\/ Non-strictly ordered floating-point add reduction for doubles. This rule is\n+  \/\/ intended for the VectorAPI (which allows for non-strictly ordered add reduction).\n+  \/\/ src1 contains reduction identity\n+  predicate(!n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 4); \/\/ src2\n+  match(Set dst (AddReductionVF src1 src2));\n+  match(Set dst (MulReductionVF src1 src2));\n+  effect(TEMP dst, TEMP vtmp);\n+  format %{ \"vector_reduction_float  $dst,$src1,$src2 ; using $vtmp as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ unordered_reduce_fp(opcode, vlen, $dst$$XMMRegister, $src2$$XMMRegister, $vtmp$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct unordered_reduction8F(regF dst, regF src1, vec src2, vec vtmp1, vec vtmp2) %{\n+  \/\/ Non-strictly ordered floating-point add reduction for doubles. This rule is\n+  \/\/ intended for the VectorAPI (which allows for non-strictly ordered add reduction).\n+  \/\/ src1 contains reduction identity\n+  predicate(!n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 8); \/\/ src2\n+  match(Set dst (AddReductionVF src1 src2));\n+  match(Set dst (MulReductionVF src1 src2));\n+  effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);\n+  format %{ \"vector_reduction_float $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ unordered_reduce_fp(opcode, vlen, $dst$$XMMRegister, $src2$$XMMRegister, $vtmp1$$XMMRegister, $vtmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct unordered_reduction16F(regF dst, regF src1, legVec src2, legVec vtmp1, legVec vtmp2) %{\n+  \/\/ Non-strictly ordered floating-point add reduction for doubles. This rule is\n+  \/\/ intended for the VectorAPI (which allows for non-strictly ordered add reduction).\n+  \/\/ src1 contains reduction identity\n+  predicate(!n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 16); \/\/ src2\n+  match(Set dst (AddReductionVF src1 src2));\n+  match(Set dst (MulReductionVF src1 src2));\n+  effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);\n+  format %{ \"vector_reduction_float $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ unordered_reduce_fp(opcode, vlen, $dst$$XMMRegister, $src2$$XMMRegister, $vtmp1$$XMMRegister, $vtmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -5156,1 +5225,1 @@\n-  predicate(Matcher::vector_length(n->in(2)) == 2); \/\/ src\n+  predicate(n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 2); \/\/ src\n@@ -5170,1 +5239,1 @@\n-  predicate(Matcher::vector_length(n->in(2)) == 4); \/\/ src\n+  predicate(n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 4); \/\/ src\n@@ -5184,1 +5253,1 @@\n-  predicate(Matcher::vector_length(n->in(2)) == 8); \/\/ src\n+  predicate(n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 8); \/\/ src\n@@ -5197,0 +5266,51 @@\n+instruct unordered_reduction2D(regD dst, regD src1, vec src2) %{\n+  \/\/ Non-strictly ordered floating-point add reduction for doubles. This rule is\n+  \/\/ intended for the VectorAPI (which allows for non-strictly ordered add reduction).\n+  \/\/ src1 contains reduction identity\n+  predicate(!n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 2); \/\/ src2\n+  match(Set dst (AddReductionVD src1 src2));\n+  match(Set dst (MulReductionVD src1 src2));\n+  effect(TEMP dst);\n+  format %{ \"vector_reduction_double $dst,$src1,$src2 ;\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ unordered_reduce_fp(opcode, vlen, $dst$$XMMRegister, $src2$$XMMRegister);\n+%}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct unordered_reduction4D(regD dst, regD src1, vec src2, vec vtmp) %{\n+  \/\/ Non-strictly ordered floating-point add reduction for doubles. This rule is\n+  \/\/ intended for the VectorAPI (which allows for non-strictly ordered add reduction).\n+  \/\/ src1 contains reduction identity\n+  predicate(!n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 4); \/\/ src2\n+  match(Set dst (AddReductionVD src1 src2));\n+  match(Set dst (MulReductionVD src1 src2));\n+  effect(TEMP dst, TEMP vtmp);\n+  format %{ \"vector_reduction_double $dst,$src1,$src2 ; using $vtmp as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ unordered_reduce_fp(opcode, vlen, $dst$$XMMRegister, $src2$$XMMRegister, $vtmp$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct unordered_reduction8D(regD dst, regD src1, legVec src2, legVec vtmp1, legVec vtmp2) %{\n+  \/\/ Non-strictly ordered floating-point add reduction for doubles. This rule is\n+  \/\/ intended for the VectorAPI (which allows for non-strictly ordered add reduction).\n+  \/\/ src1 contains reduction identity\n+  predicate(!n->as_Reduction()->requires_strict_order() && Matcher::vector_length(n->in(2)) == 8); \/\/ src2\n+  match(Set dst (AddReductionVD src1 src2));\n+  match(Set dst (MulReductionVD src1 src2));\n+  effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);\n+  format %{ \"vector_reduction_double $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen = Matcher::vector_length(this, $src2);\n+    __ unordered_reduce_fp(opcode, vlen, $dst$$XMMRegister, $src2$$XMMRegister, $vtmp1$$XMMRegister, $vtmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":126,"deletions":6,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (double)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (double)100.0;\n@@ -132,1 +135,1 @@\n-                                            double relativeError) {\n+                                            double relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2197,1 +2200,1 @@\n-                Double128VectorTests::ADDReduce, Double128VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double128VectorTests::ADDReduce, Double128VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2243,1 +2246,1 @@\n-                Double128VectorTests::ADDReduceMasked, Double128VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double128VectorTests::ADDReduceMasked, Double128VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2286,1 +2289,1 @@\n-                Double128VectorTests::MULReduce, Double128VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double128VectorTests::MULReduce, Double128VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2332,1 +2335,1 @@\n-                Double128VectorTests::MULReduceMasked, Double128VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double128VectorTests::MULReduceMasked, Double128VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (double)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (double)100.0;\n@@ -132,1 +135,1 @@\n-                                            double relativeError) {\n+                                            double relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2197,1 +2200,1 @@\n-                Double256VectorTests::ADDReduce, Double256VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double256VectorTests::ADDReduce, Double256VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2243,1 +2246,1 @@\n-                Double256VectorTests::ADDReduceMasked, Double256VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double256VectorTests::ADDReduceMasked, Double256VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2286,1 +2289,1 @@\n-                Double256VectorTests::MULReduce, Double256VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double256VectorTests::MULReduce, Double256VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2332,1 +2335,1 @@\n-                Double256VectorTests::MULReduceMasked, Double256VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double256VectorTests::MULReduceMasked, Double256VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (double)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (double)100.0;\n@@ -132,1 +135,1 @@\n-                                            double relativeError) {\n+                                            double relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2197,1 +2200,1 @@\n-                Double512VectorTests::ADDReduce, Double512VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double512VectorTests::ADDReduce, Double512VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2243,1 +2246,1 @@\n-                Double512VectorTests::ADDReduceMasked, Double512VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double512VectorTests::ADDReduceMasked, Double512VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2286,1 +2289,1 @@\n-                Double512VectorTests::MULReduce, Double512VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double512VectorTests::MULReduce, Double512VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2332,1 +2335,1 @@\n-                Double512VectorTests::MULReduceMasked, Double512VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double512VectorTests::MULReduceMasked, Double512VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (double)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (double)100.0;\n@@ -132,1 +135,1 @@\n-                                            double relativeError) {\n+                                            double relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2197,1 +2200,1 @@\n-                Double64VectorTests::ADDReduce, Double64VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double64VectorTests::ADDReduce, Double64VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2243,1 +2246,1 @@\n-                Double64VectorTests::ADDReduceMasked, Double64VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double64VectorTests::ADDReduceMasked, Double64VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2286,1 +2289,1 @@\n-                Double64VectorTests::MULReduce, Double64VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Double64VectorTests::MULReduce, Double64VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2332,1 +2335,1 @@\n-                Double64VectorTests::MULReduceMasked, Double64VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Double64VectorTests::MULReduceMasked, Double64VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -71,2 +71,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (double)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (double)100.0;\n@@ -137,1 +140,1 @@\n-                                            double relativeError) {\n+                                            double relativeErrorFactor) {\n@@ -140,1 +143,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -142,1 +145,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -145,2 +148,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2202,1 +2205,1 @@\n-                DoubleMaxVectorTests::ADDReduce, DoubleMaxVectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                DoubleMaxVectorTests::ADDReduce, DoubleMaxVectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2248,1 +2251,1 @@\n-                DoubleMaxVectorTests::ADDReduceMasked, DoubleMaxVectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                DoubleMaxVectorTests::ADDReduceMasked, DoubleMaxVectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2291,1 +2294,1 @@\n-                DoubleMaxVectorTests::MULReduce, DoubleMaxVectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                DoubleMaxVectorTests::MULReduce, DoubleMaxVectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2337,1 +2340,1 @@\n-                DoubleMaxVectorTests::MULReduceMasked, DoubleMaxVectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                DoubleMaxVectorTests::MULReduceMasked, DoubleMaxVectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (float)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (float)100.0;\n@@ -132,1 +135,1 @@\n-                                            float relativeError) {\n+                                            float relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2208,1 +2211,1 @@\n-                Float128VectorTests::ADDReduce, Float128VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float128VectorTests::ADDReduce, Float128VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2254,1 +2257,1 @@\n-                Float128VectorTests::ADDReduceMasked, Float128VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float128VectorTests::ADDReduceMasked, Float128VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2297,1 +2300,1 @@\n-                Float128VectorTests::MULReduce, Float128VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float128VectorTests::MULReduce, Float128VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2343,1 +2346,1 @@\n-                Float128VectorTests::MULReduceMasked, Float128VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float128VectorTests::MULReduceMasked, Float128VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (float)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (float)100.0;\n@@ -132,1 +135,1 @@\n-                                            float relativeError) {\n+                                            float relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2208,1 +2211,1 @@\n-                Float256VectorTests::ADDReduce, Float256VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float256VectorTests::ADDReduce, Float256VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2254,1 +2257,1 @@\n-                Float256VectorTests::ADDReduceMasked, Float256VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float256VectorTests::ADDReduceMasked, Float256VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2297,1 +2300,1 @@\n-                Float256VectorTests::MULReduce, Float256VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float256VectorTests::MULReduce, Float256VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2343,1 +2346,1 @@\n-                Float256VectorTests::MULReduceMasked, Float256VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float256VectorTests::MULReduceMasked, Float256VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (float)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (float)100.0;\n@@ -132,1 +135,1 @@\n-                                            float relativeError) {\n+                                            float relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2208,1 +2211,1 @@\n-                Float512VectorTests::ADDReduce, Float512VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float512VectorTests::ADDReduce, Float512VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2254,1 +2257,1 @@\n-                Float512VectorTests::ADDReduceMasked, Float512VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float512VectorTests::ADDReduceMasked, Float512VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2297,1 +2300,1 @@\n-                Float512VectorTests::MULReduce, Float512VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float512VectorTests::MULReduce, Float512VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2343,1 +2346,1 @@\n-                Float512VectorTests::MULReduceMasked, Float512VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float512VectorTests::MULReduceMasked, Float512VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,2 +66,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (float)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (float)100.0;\n@@ -132,1 +135,1 @@\n-                                            float relativeError) {\n+                                            float relativeErrorFactor) {\n@@ -135,1 +138,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -137,1 +140,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -140,2 +143,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2208,1 +2211,1 @@\n-                Float64VectorTests::ADDReduce, Float64VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float64VectorTests::ADDReduce, Float64VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2254,1 +2257,1 @@\n-                Float64VectorTests::ADDReduceMasked, Float64VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float64VectorTests::ADDReduceMasked, Float64VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2297,1 +2300,1 @@\n-                Float64VectorTests::MULReduce, Float64VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                Float64VectorTests::MULReduce, Float64VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2343,1 +2346,1 @@\n-                Float64VectorTests::MULReduceMasked, Float64VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                Float64VectorTests::MULReduceMasked, Float64VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -71,2 +71,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_ADD = (float)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR_FACTOR_MUL = (float)100.0;\n@@ -137,1 +140,1 @@\n-                                            float relativeError) {\n+                                            float relativeErrorFactor) {\n@@ -140,1 +143,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -142,1 +145,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -145,2 +148,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n@@ -2213,1 +2216,1 @@\n-                FloatMaxVectorTests::ADDReduce, FloatMaxVectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n+                FloatMaxVectorTests::ADDReduce, FloatMaxVectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2259,1 +2262,1 @@\n-                FloatMaxVectorTests::ADDReduceMasked, FloatMaxVectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                FloatMaxVectorTests::ADDReduceMasked, FloatMaxVectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_ADD);\n@@ -2302,1 +2305,1 @@\n-                FloatMaxVectorTests::MULReduce, FloatMaxVectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n+                FloatMaxVectorTests::MULReduce, FloatMaxVectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n@@ -2348,1 +2351,1 @@\n-                FloatMaxVectorTests::MULReduceMasked, FloatMaxVectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                FloatMaxVectorTests::MULReduceMasked, FloatMaxVectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_MUL);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,1 +224,0 @@\n-  gen_perf_tests=true\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-                $vectorteststype$::[[TEST]]ReduceMasked, $vectorteststype$::[[TEST]]ReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+                $vectorteststype$::[[TEST]]ReduceMasked, $vectorteststype$::[[TEST]]ReduceAllMasked, RELATIVE_ROUNDING_ERROR_FACTOR_[[TEST]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-                $vectorteststype$::[[TEST]]Reduce, $vectorteststype$::[[TEST]]ReduceAll, RELATIVE_ROUNDING_ERROR);\n+                $vectorteststype$::[[TEST]]Reduce, $vectorteststype$::[[TEST]]ReduceAll, RELATIVE_ROUNDING_ERROR_FACTOR_[[TEST]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,2 +99,5 @@\n-    \/\/ for floating point reduction ops that may introduce rounding errors\n-    private static final $type$ RELATIVE_ROUNDING_ERROR = ($type$)0.000001;\n+    \/\/ for floating point addition reduction ops that may introduce rounding errors\n+    private static final $type$ RELATIVE_ROUNDING_ERROR_FACTOR_ADD = ($type$)10.0;\n+\n+    \/\/ for floating point multiplication reduction ops that may introduce rounding errors\n+    private static final $type$ RELATIVE_ROUNDING_ERROR_FACTOR_MUL = ($type$)100.0;\n@@ -180,1 +183,1 @@\n-                                            $type$ relativeError) {\n+                                            $type$ relativeErrorFactor) {\n@@ -183,1 +186,1 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor);\n@@ -185,1 +188,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor);\n@@ -188,2 +191,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.ulp(rc) * relativeErrorFactor, \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.ulp(r[i]) * relativeErrorFactor, \"at index #\" + i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}