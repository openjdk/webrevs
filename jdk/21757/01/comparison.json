{"files":[{"patch":"@@ -58,1 +58,0 @@\n-compiler\/codecache\/CheckLargePages.java 8332654 linux-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+import java.util.Scanner;\n+import java.io.File;\n@@ -50,0 +52,1 @@\n+    private final static String LARGE_PAGE_NUMBER_FILE_BASE = \"\/sys\/kernel\/mm\/hugepages\/hugepages-%skB\/nr_hugepages\";\n@@ -61,0 +64,9 @@\n+    private static int numberOfLargePages(long size) {\n+        String largePageNumberFile = String.format(LARGE_PAGE_NUMBER_FILE_BASE, size \/ 1024);\n+        Scanner scanner = new Scanner(new File(largePageNumberFile));\n+        if (scanner.hasNextInt()) {\n+            return scanner.nextInt();\n+        }\n+        return 0;\n+    }\n+\n@@ -116,0 +128,1 @@\n+\n@@ -119,2 +132,7 @@\n-            testDefaultCodeCacheWith1GbLargePages();\n-            testNonSegmented1GbCodeCacheWith1GbLargePages();\n+            if (numberOfLargePages(LP_1G) > 0) {\n+                testDefaultCodeCacheWith1GbLargePages();\n+                testNonSegmented1GbCodeCacheWith1GbLargePages();\n+            } else {\n+                System.out.println(\"Skipping testDefaultCodeCacheWith1GbLargePages and \" +\n+                        \"testNonSegmented1GbCodeCacheWith1GbLargePages, no 1Gb pages available\");\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CheckLargePages.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"}]}