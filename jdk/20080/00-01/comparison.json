{"files":[{"patch":"@@ -1810,1 +1810,1 @@\n-void os::pd_free_memory_without_uncommit(char *addr, size_t bytes) {\n+void os::pd_disclaim_memory(char *addr, size_t bytes) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1687,1 +1687,1 @@\n-void os::pd_free_memory_without_uncommit(char *addr, size_t bytes) {\n+void os::pd_disclaim_memory(char *addr, size_t bytes) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3038,1 +3038,3 @@\n-void os::pd_free_memory_without_uncommit(char *addr, size_t bytes) {\n+\/\/ Hints to the OS that the memory is no longer needed and may be reclaimed by the OS when convenient.\n+\/\/ The memory will be re-acquired on touch without needing explicit recommitting.\n+void os::pd_disclaim_memory(char *addr, size_t bytes) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3896,1 +3896,1 @@\n-void os::pd_free_memory_without_uncommit(char *addr, size_t bytes) { }\n+void os::pd_disclaim_memory(char *addr, size_t bytes) { }\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-    os::free_memory_without_uncommit((char*)aligned_region.start(), aligned_region.byte_size());\n+    os::disclaim_memory((char*)aligned_region.start(), aligned_region.byte_size());\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        os::free_memory_without_uncommit((char*)start, size);\n+        os::disclaim_memory((char*)start, size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2238,2 +2238,2 @@\n-void os::free_memory_without_uncommit(char *addr, size_t bytes) {\n-  pd_free_memory_without_uncommit(addr, bytes);\n+void os::disclaim_memory(char *addr, size_t bytes) {\n+  pd_disclaim_memory(addr, bytes);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-  static void   pd_free_memory_without_uncommit(char *addr, size_t bytes);\n+  static void   pd_disclaim_memory(char *addr, size_t bytes);\n@@ -523,1 +523,1 @@\n-  static void   free_memory_without_uncommit(char *addr, size_t bytes);\n+  static void   disclaim_memory(char *addr, size_t bytes);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-    os::free_memory_without_uncommit(base, size);\n+    os::disclaim_memory(base, size);\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,4 +41,0 @@\n-#if !defined(_WINDOWS) && !defined(_AIX)\n-#include <sys\/mman.h>\n-#endif\n-\n@@ -988,1 +984,1 @@\n-  char *base = os::reserve_memory(size, false, mtTest);\n+  char* base = os::reserve_memory(size, false, mtTest);\n@@ -996,8 +992,1 @@\n-  os::free_memory_without_uncommit(base, size);\n-\n-#ifdef __linux__\n-  \/\/ Check that memory has been freed. Skip on BSD since MADV_DONTNEED doesn't free memory.\n-  size_t committed_size;\n-  address committed_start;\n-  ASSERT_FALSE(os::committed_in_range((address) base, size, committed_start, committed_size));\n-#endif\n+  os::disclaim_memory(base, size);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"}]}