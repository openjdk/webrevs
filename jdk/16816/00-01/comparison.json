{"files":[{"patch":"@@ -911,1 +911,1 @@\n-  INSN(_auipc, 0b0010111);\n+  INSN(auipc, 0b0010111);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    __ auipc(t0, safepoint_pc.target(), offset);\n+    __ la(t0, safepoint_pc.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -405,1 +405,1 @@\n-  __ _auipc(ra, 0);\n+  __ auipc(ra, 0);\n@@ -1428,1 +1428,1 @@\n-    __ auipc(exceptionPC->as_register(), pc_for_athrow, offset);\n+    __ la(exceptionPC->as_register(), pc_for_athrow.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    __ auipc(t0, safepoint_pc.target(), offset);\n+    __ la(t0, safepoint_pc.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_CodeStubs_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-    auipc(xdispatch, target, offset);\n+    la(xdispatch, target.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    __ auipc(rcounter_addr, target, offset);\n+    __ la(rcounter_addr, target.target(), offset);\n@@ -99,1 +99,1 @@\n-      __ auipc(result, target, offset);\n+      __ la(result, target.target(), offset);\n@@ -179,1 +179,1 @@\n-      __ auipc(t0, target, offset);\n+      __ la(t0, target.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/jniFastGetField_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-      auipc(t0, target, offset);\n+      la(t0, target.target(), offset);\n@@ -424,1 +424,1 @@\n-    auipc(t1, target, offset);\n+    la(t1, target.target(), offset);\n@@ -469,1 +469,1 @@\n-    auipc(t1, target, offset);\n+    la(t1, target.target(), offset);\n@@ -720,2 +720,2 @@\n-void MacroAssembler::la(Register Rd, const address dest) {\n-  int64_t offset = dest - pc();\n+void MacroAssembler::la(Register Rd, const address addr) {\n+  int64_t offset = addr - pc();\n@@ -723,1 +723,1 @@\n-    _auipc(Rd, (int32_t)offset + 0x800);  \/\/0x800, Note:the 11th sign bit\n+    auipc(Rd, (int32_t)offset + 0x800);  \/\/0x800, Note:the 11th sign bit\n@@ -726,1 +726,23 @@\n-    movptr(Rd, dest);\n+    movptr(Rd, addr);\n+  }\n+}\n+\n+void MacroAssembler::la(Register Rd, const address addr, int32_t &offset) {\n+  assert((uintptr_t)addr < (1ull << 48), \"bad address\");\n+\n+  unsigned long target_address = (uintptr_t)addr;\n+  unsigned long low_address = (uintptr_t)CodeCache::low_bound();\n+  unsigned long high_address = (uintptr_t)CodeCache::high_bound();\n+  long offset_low = target_address - low_address;\n+  long offset_high = target_address - high_address;\n+\n+  \/\/ RISC-V doesn't compute a page-aligned address, in order to partially\n+  \/\/ compensate for the use of *signed* offsets in its base+disp12\n+  \/\/ addressing mode (RISC-V's PC-relative reach remains asymmetric\n+  \/\/ [-(2G + 2K), 2G - 2K).\n+  if (offset_high >= -((1L << 31) + (1L << 11)) && offset_low < (1L << 31) - (1L << 11)) {\n+    int64_t distance = addr - pc();\n+    auipc(Rd, (int32_t)distance + 0x800);\n+    offset = ((int32_t)distance << 20) >> 20;\n+  } else {\n+    movptr(Rd, addr, offset);\n@@ -1567,1 +1589,1 @@\n-        auipc(xheapbase, target, offset);\n+        la(xheapbase, target.target(), offset);\n@@ -2122,1 +2144,1 @@\n-    _masm->auipc(t0, target, offset);\n+    _masm->la(t0, target.target(), offset);\n@@ -3009,1 +3031,1 @@\n-    auipc(tmp, entry, offset);\n+    la(tmp, entry.target(), offset);\n@@ -3026,1 +3048,1 @@\n-    auipc(tmp, entry, offset);\n+    la(tmp, entry.target(), offset);\n@@ -3251,23 +3273,0 @@\n-void MacroAssembler::auipc(Register reg, const Address &dest, int32_t &offset) {\n-  unsigned long low_address = (uintptr_t)CodeCache::low_bound();\n-  unsigned long high_address = (uintptr_t)CodeCache::high_bound();\n-  unsigned long dest_address = (uintptr_t)dest.target();\n-  long offset_low = dest_address - low_address;\n-  long offset_high = dest_address - high_address;\n-\n-  assert(dest.getMode() == Address::literal, \"auipc must be applied to a literal address\");\n-  assert((uintptr_t)dest.target() < (1ull << 48), \"bad address\");\n-\n-  \/\/ RISC-V doesn't compute a page-aligned address, in order to partially\n-  \/\/ compensate for the use of *signed* offsets in its base+disp12\n-  \/\/ addressing mode (RISC-V's PC-relative reach remains asymmetric\n-  \/\/ [-(2G + 2K), 2G - 2K).\n-  if (offset_high >= -((1L << 31) + (1L << 11)) && offset_low < (1L << 31) - (1L << 11)) {\n-    int64_t distance = dest.target() - pc();\n-    _auipc(reg, (int32_t)distance + 0x800);\n-    offset = ((int32_t)distance << 20) >> 20;\n-  } else {\n-    movptr(reg, dest.target(), offset);\n-  }\n-}\n-\n@@ -3531,1 +3530,1 @@\n-    auipc(t0, src2, offset);\n+    la(t0, src2.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":34,"deletions":35,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -721,1 +721,2 @@\n-  void la(Register Rd, const address dest);\n+  void la(Register Rd, const address addr);\n+  void la(Register Rd, const address addr, int32_t &offset);\n@@ -823,1 +824,1 @@\n-      _auipc(Rd, (int32_t)distance + 0x800);                                                       \\\n+      auipc(Rd, (int32_t)distance + 0x800);                                                       \\\n@@ -880,1 +881,1 @@\n-      _auipc(temp, (int32_t)distance + 0x800);                                                     \\\n+      auipc(temp, (int32_t)distance + 0x800);                                                     \\\n@@ -941,1 +942,1 @@\n-      _auipc(temp, (int32_t)distance + 0x800);                                                     \\\n+      auipc(temp, (int32_t)distance + 0x800);                                                     \\\n@@ -986,1 +987,1 @@\n-      _auipc(temp, (int32_t)distance + 0x800);                                                     \\\n+      auipc(temp, (int32_t)distance + 0x800);                                                     \\\n@@ -1088,2 +1089,0 @@\n-  void auipc(Register reg, const Address &dest, int32_t &offset);\n-\n@@ -1464,1 +1463,1 @@\n-        auipc(dest, target, offset);\n+        la(dest, target.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1881,1 +1881,1 @@\n-  __ _auipc(ra, 0);\n+  __ auipc(ra, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1620,1 +1620,1 @@\n-      __ auipc(t0, target, offset);\n+      __ la(t0, target.target(), offset);\n@@ -1844,1 +1844,1 @@\n-      __ auipc(t0, target, offset);\n+      __ la(t0, target.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2474,1 +2474,1 @@\n-      __ auipc(t0, target, offset);\n+      __ la(t0, target.target(), offset);\n@@ -2685,1 +2685,1 @@\n-      __ auipc(t0, target, offset);\n+      __ la(t0, target.target(), offset);\n@@ -2978,1 +2978,1 @@\n-      __ auipc(t0, target, offset);\n+      __ la(t0, target.target(), offset);\n@@ -3114,1 +3114,1 @@\n-      __ auipc(t0, target, offset);\n+      __ la(t0, target.target(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}