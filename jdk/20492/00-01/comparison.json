{"files":[{"patch":"@@ -86,0 +86,11 @@\n+inline oop reference_coop_decode_raw(narrowOop v) {\n+  return CompressedOops::is_null(v) ? nullptr : CompressedOops::decode_raw(v);\n+}\n+\n+inline oop reference_coop_decode_raw(oop v) {\n+  return v;\n+}\n+\n+\/\/ Raw referent, it can be dead. You cannot dereference it, only use for nullptr\n+\/\/ and bitmap checks. The decoding uses a special-case inlined CompressedOops::decode\n+\/\/ method that bypasses normal oop-ness checks.\n@@ -87,1 +98,1 @@\n-static oop reference_referent(oop reference) {\n+static oop reference_referent_raw(oop reference) {\n@@ -89,1 +100,1 @@\n-  return CompressedOops::decode(heap_oop);\n+  return reference_coop_decode_raw(heap_oop);\n@@ -281,1 +292,1 @@\n-  const oop referent = reference_referent<T>(reference);\n+  const oop referent = reference_referent_raw<T>(reference);\n@@ -306,1 +317,1 @@\n-    assert(ShenandoahHeap::heap()->marking_context()->is_marked(reference_referent<T>(reference)), \"only make inactive final refs with alive referents\");\n+    assert(ShenandoahHeap::heap()->marking_context()->is_marked(reference_referent_raw<T>(reference)), \"only make inactive final refs with alive referents\");\n@@ -379,1 +390,1 @@\n-  oop referent = reference_referent<T>(reference);\n+  oop referent = reference_referent_raw<T>(reference);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -54,7 +54,0 @@\n-class ShenandoahIgnoreReferenceDiscoverer : public ReferenceDiscoverer {\n-public:\n-  virtual bool discover_reference(oop obj, ReferenceType type) {\n-    return true;\n-  }\n-};\n-\n@@ -71,0 +64,1 @@\n+  ReferenceIterationMode _ref_mode;\n@@ -85,1 +79,7 @@\n-      set_ref_discoverer_internal(new ShenandoahIgnoreReferenceDiscoverer());\n+      \/\/ Unknown status for Reference.referent field. Do not touch it, it might be dead.\n+      \/\/ Normally, barriers would prevent us from seeing the dead referents, but verifier\n+      \/\/ runs with barriers disabled.\n+      _ref_mode = DO_FIELDS_EXCEPT_REFERENT;\n+    } else {\n+      \/\/ Otherwise do all fields.\n+      _ref_mode = DO_FIELDS;\n@@ -89,0 +89,4 @@\n+  ReferenceIterationMode reference_iteration_mode() {\n+    return _ref_mode;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}