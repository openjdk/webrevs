{"files":[{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6354810\n+ * @summary Items in the list are not grayed out when disabled, XToolkit\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DisabledListIsGreyTest\n+*\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+\n+public class DisabledListIsGreyTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1) After the test started you will see two lists.\n+            2) One of them is enabled, and the second is disabled.\n+            3) Check that the items of the disabled list are grayed.\n+            4) If so, the test passed. Otherwise, failed.\"\"\";\n+\n+\n+    public static void main(String[] args) throws Exception {\n+         PassFailJFrame.builder()\n+                .title(\"DisabledListIsGreyTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(DisabledListIsGreyTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        Frame frame = new Frame(\"DisabledListIsGreyTest Frame\");\n+        frame.setLayout(new FlowLayout());\n+\n+        List list1 = new List(3);\n+        List list2 = new List(3);\n+        for(int i = 0; i < 5; i++) {\n+            list1.addItem(\"Item \" + i);\n+            list2.addItem(\"Item \" + i);\n+        }\n+        frame.add(list1);\n+\n+        list2.setEnabled(false);\n+        frame.add(list2);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/List\/DisabledListIsGreyTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4085379\n+ * @summary List component not properly \"resized\" with GridBagLayout\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListFrameResizeTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.List;\n+\n+public class ListFrameResizeTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test is for windows only.\n+\n+        1. A Frame will appear with a List\n+           (the List occupies the whole Frame)\n+        2. Minimize the Frame, the Frame is now in the Task Bar (ie.,iconified)\n+        3. Right click (right mouse button) the icon in the task bar\n+           and click on the 'maximize' menuitem to maximize the Frame\n+        4. If you notice the List has not been resized\n+           (ie.,if it partly occupies the Frame), then press FAIL else press PASS\".\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ListFrameResizeTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(ListFrameResizeTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        wintest client = new wintest(\"ListFrameResizeTest Frame\");\n+        client.resize(500,300);\n+        client.setBackground(Color.blue);\n+        return client;\n+    }\n+\n+}\n+\n+class wintest extends Frame {\n+    private List msg;\n+\n+    public wintest(String title) {\n+        super(title);\n+        msg = new List();\n+        for (int i = 0; i < 100; i++) {\n+            msg.add(\"\" + i);\n+        }\n+\n+        GridBagLayout gridbag = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+\n+        setLayout(gridbag);\n+\n+        constraints.fill = GridBagConstraints.BOTH;\n+\n+        constraints.anchor = GridBagConstraints.CENTER;\n+        constraints.insets = new Insets(10, 10, 10, 10);\n+        constraints.ipadx = 0;\n+        constraints.ipady = 0;\n+        constraints.weightx = 1;\n+        constraints.weighty = 1;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.gridwidth = GridBagConstraints.REMAINDER;\n+        constraints.gridheight = GridBagConstraints.REMAINDER;\n+        gridbag.setConstraints(msg, constraints);\n+        add(msg);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListFrameResizeTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4201967\n+ * @summary tests that a multiselection list doesn't causes crash when FileDialog is invoked\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MultiSelectionListCrashTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class MultiSelectionListCrashTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+         Press \"Invoke dialog\" button to invoke a FileDialog.\n+         When it appears close it by pressing cancel button.\n+         If all remaining frames are enabled and\n+         page fault didn't occur the test passed. Otherwise the test failed.\n+\n+         Try to invoke a FileDialog several times to verify that the bug doesn't exist.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"MultiSelectionListCrashTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(MultiSelectionListCrashTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+\n+        Frame frame = new Frame(\"MultiSelectionListCrashTest frame\");\n+        Button button = new Button(\"Invoke dialog\");\n+        button.addActionListener(new FileDialogInvoker(frame));\n+        List list = new List(4, true);\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        frame.setLayout(new FlowLayout());\n+        frame.add(button);\n+        frame.add(list);\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n+\n+class FileDialogInvoker implements ActionListener {\n+     FileDialog fileDialog;\n+\n+     public FileDialogInvoker(Frame frame) {\n+         fileDialog = new FileDialog(frame);\n+     }\n+\n+     public void actionPerformed(ActionEvent e) {\n+         fileDialog.setVisible(true);\n+     }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/List\/MultiSelectionListCrashTest.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4024943\n+ * @summary  Test for position of List scrollbar when it is added\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollbarPositionTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class ScrollbarPositionTest {\n+    static int item = 0;\n+    static List list;\n+    static Button addButton, delButton;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Click on the \"Add List Item\" button many times\n+        until the vertical scrollbar appears.\n+        Verify that the displayed vertical scrollbar does not take the space\n+        that was occupied by buttons before the scrollbar is shown.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ScrollbarPositionTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(ScrollbarPositionTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        Panel pan;\n+\n+        Frame frame = new Frame(\"ScrollbarPositionTest Frame\");\n+        frame.setLayout(new GridLayout(1, 2));\n+        list = new List();\n+        frame.add(list);\n+        frame.add(pan = new Panel());\n+        pan.setLayout(new GridLayout(4, 1));\n+\n+        MyListener listener = new MyListener();\n+        addButton = new Button(\"Add List Item\");\n+        addButton.addActionListener(listener);\n+        pan.add(addButton);\n+\n+        delButton = new Button(\"Delete List Item\");\n+        delButton.addActionListener(listener);\n+        pan.add(delButton);\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static class MyListener implements ActionListener {\n+        public void actionPerformed(ActionEvent evt) {\n+            if (evt.getSource() == addButton) {\n+                String s = \"item\";\n+                for (int i = 0; i <= item; i++) {\n+                    s = s +\" \"+Integer.toString(i);\n+                }\n+                item++;\n+                list.addItem(s);\n+            } else if (evt.getSource() == delButton) {\n+                int i;\n+                if ((i = list.countItems()) > 0) {\n+                    list.delItem(i - 1);\n+                    --item;\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ScrollbarPositionTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4676536\n+ * @summary REGRESSION: makeVisible() method of List Component does not perform\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SelectedItemVisibilityTest\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.List;\n+\n+public class SelectedItemVisibilityTest {\n+\n+    static List list1, list2;\n+    static int visibleItem = 4;\n+    static int selectedItems[] = {6, 7, 8};\n+    static String selectedItemsStr = \"\";\n+\n+    static {\n+        for (int i = 0 ; i < selectedItems.length ; i++) {\n+            selectedItemsStr += \"\"+selectedItems[i]+\" \";\n+        }\n+    }\n+\n+    private static final String INSTRUCTIONS =\n+            \"You should see two lists.\\n\" +\n+            \"\\n\" +\n+            \"list1: \\n\" +\n+            \"\\t1. the first visible item should be \" + visibleItem +\n+            \"\\n\\t2. the selected item should be \" + selectedItems[0] +\n+            \"\\n\" +\n+            \"list2:\\n\" +\n+            \"\\t1. the first visible item should be \" + visibleItem +\n+            \"\\n\\t2. the selected items should be \" + selectedItemsStr +\n+            \"\\n\" +\n+            \"\\nIf it is so the test passed else failed.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"SelectedItemVisibilityTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(SelectedItemVisibilityTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+\n+        Frame frame = new Frame(\"SelectedItemVisibilityTest Frame\");\n+        frame.setLayout(new FlowLayout());\n+\n+        \/\/ list1\n+        list1 = new List(4);\n+        for (int i = 0; i < 20; i++) {\n+            list1.add(\"\"+i);\n+        }\n+        list1.makeVisible(visibleItem);\n+        list1.select(selectedItems[0]);\n+        frame.add(new Label(\"list1:\"));\n+        frame.add(list1);\n+\n+        \/\/ list2\n+        list2 = new List(4);\n+        list2.setMultipleMode(true);\n+        for (int i = 0; i < 20; i++) {\n+            list2.add(\"\"+i);\n+        }\n+        list2.makeVisible(visibleItem);\n+        for (int i = 0 ; i < selectedItems.length ; i++) {\n+            list2.select(selectedItems[i]);\n+        }\n+        frame.add(new Label(\"list2:\"));\n+        frame.add(list2);\n+        frame.setSize(200, 200);\n+\n+        \/\/ common output\n+        String s;\n+        int sel[];\n+\n+        PassFailJFrame.log(\"list1: \");\n+        PassFailJFrame.log(\"\\tgetVisibleIndex=\"+list1.getVisibleIndex());\n+        sel = list1.getSelectedIndexes();\n+        s = \"\\tgetSelectedIndexes=\";\n+        for (int i = 0 ; i < sel.length ; i++) {\n+            s += \"\" + sel[i] + \" \";\n+        }\n+        PassFailJFrame.log(s);\n+\n+        PassFailJFrame.log(\"list2: \");\n+        PassFailJFrame.log(\"\\tgetVisibleIndex=\"+list2.getVisibleIndex());\n+        sel = list2.getSelectedIndexes();\n+        s = \"\\tgetSelectedIndexes=\";\n+        for (int i = 0 ; i < sel.length ; i++) {\n+            s += \"\" + sel[i] + \" \";\n+        }\n+        PassFailJFrame.log(s);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/SelectedItemVisibilityTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}