{"files":[{"patch":"@@ -4431,0 +4431,30 @@\n+    \/**\n+     * Computes a hash code for a specified sub-range of the given {@code byte} array.\n+     * The sub-range is defined by the indices from {@code fromIndex} (inclusive)\n+     * to {@code toIndex} (exclusive).\n+     *\n+     * <p>The computed hash code is based on the content of the sub-range. Specifically,\n+     * it is equivalent to the hash code that would be produced by a {@code List} of\n+     * {@code Byte} objects representing the elements in the sub-range, in the same order.\n+     * Thus, if two sub-ranges (within the same array) are equal as determined by\n+     * {@link #equals(byte[], int, int, byte[], int, int)}, they will yield the same hash code.\n+     * If the array {@code a} is {@code null}, this method returns {@code 0}.\n+     *\n+     * @param a the array from which to compute the sub-range hash code\n+     * @param fromIndex the starting index (inclusive) of the sub-range\n+     * @param toIndex the ending index (exclusive) of the sub-range\n+     * @return a content-based hash code for the specified sub-range of the array,\n+     *         or {@code 0} if {@code a} is {@code null}\n+     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} or {@code toIndex}\n+     *         are not valid indices for the array {@code a}\n+     * @throws IllegalArgumentException if {@code fromIndex} is greater than {@code toIndex}\n+     * @since 25\n+     *\/\n+    public static int hashCode(byte[] a, int fromIndex, int toIndex) {\n+        if (a == null) {\n+            return 0;\n+        }\n+        rangeCheck(a.length, fromIndex, toIndex);\n+        return ArraysSupport.hashCode(a, fromIndex, toIndex - fromIndex, 1);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}