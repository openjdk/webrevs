{"files":[{"patch":"@@ -71,1 +71,2 @@\n-<li><a href=\"#ibm-xl-cc\" id=\"toc-ibm-xl-cc\">IBM XL C\/C++<\/a><\/li>\n+<li><a href=\"#ibm-open-xl-cc\" id=\"toc-ibm-open-xl-cc\">IBM Open XL\n+C\/C++<\/a><\/li>\n@@ -676,5 +677,4 @@\n-<h3 id=\"ibm-xl-cc\">IBM XL C\/C++<\/h3>\n-<p>Please consult the AIX section of the <a\n-href=\"https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms\">Supported\n-Build Platforms<\/a> OpenJDK Build Wiki page for details about which\n-versions of XLC are supported.<\/p>\n+<h3 id=\"ibm-open-xl-cc\">IBM Open XL C\/C++<\/h3>\n+<p>The minimum accepted version of Open XL is 17.1.1.4. This is in\n+essence clang 13, and will be treated as such by the OpenJDK build\n+system.<\/p>\n","filename":"doc\/building.html","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-### IBM XL C\/C++\n+### IBM Open XL C\/C++\n@@ -492,3 +492,2 @@\n-Please consult the AIX section of the [Supported Build Platforms](\n-https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms) OpenJDK Build\n-Wiki page for details about which versions of XLC are supported.\n+The minimum accepted version of Open XL is 17.1.1.4. This is in essence clang\n+13, and will be treated as such by the OpenJDK build system.\n","filename":"doc\/building.md","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -362,3 +362,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    AC_MSG_RESULT([no, does not work with xlc])\n-    PRECOMPILED_HEADERS_AVAILABLE=false\n","filename":"make\/autoconf\/build-performance.m4","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -80,6 +80,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    SHARED_LIBRARY_FLAGS=\"-qmkshrobj -bM:SRE -bnoentry\"\n-    SET_EXECUTABLE_ORIGIN=\"\"\n-    SET_SHARED_LIBRARY_ORIGIN=''\n-    SET_SHARED_LIBRARY_NAME=''\n-\n@@ -155,2 +149,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    CFLAGS_DEBUG_SYMBOLS=\"-g1\"\n@@ -222,5 +214,1 @@\n-  if test \"x$TOOLCHAIN_TYPE\" != xxlc; then\n-    WARNINGS_AS_ERRORS_DEFAULT=true\n-  else\n-    WARNINGS_AS_ERRORS_DEFAULT=false\n-  fi\n+  WARNINGS_AS_ERRORS_DEFAULT=true\n@@ -276,9 +264,0 @@\n-\n-    xlc)\n-      DISABLE_WARNING_PREFIX=\"-Wno-\"\n-      CFLAGS_WARNINGS_ARE_ERRORS=\"-qhalt=w\"\n-\n-      # Possibly a better subset than \"all\" is \"lan:trx:ret:zea:cmp:ret\"\n-      WARNINGS_ENABLE_ALL=\"-qinfo=all -qformat=all\"\n-      DISABLED_WARNINGS=\"\"\n-      ;;\n@@ -366,9 +345,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    C_O_FLAG_HIGHEST_JVM=\"-O3 -qhot=level=1 -qinline -qinlglue\"\n-    C_O_FLAG_HIGHEST=\"-O3 -qhot=level=1 -qinline -qinlglue\"\n-    C_O_FLAG_HI=\"-O3 -qinline -qinlglue\"\n-    C_O_FLAG_NORM=\"-O2\"\n-    C_O_FLAG_DEBUG=\"-qnoopt\"\n-    # FIXME: Value below not verified.\n-    C_O_FLAG_DEBUG_JVM=\"\"\n-    C_O_FLAG_NONE=\"-qnoopt\"\n@@ -527,6 +497,0 @@\n-    if test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-      # We need '-qminimaltoc' or '-qpic=large -bbigtoc' if the TOC overflows.\n-      # Hotspot now overflows its 64K TOC (currently only for debug),\n-      # so for debug we build with '-qpic=large -bbigtoc'.\n-      DEBUG_CFLAGS_JVM=\"-qpic=large\"\n-    fi\n@@ -549,3 +513,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    ALWAYS_DEFINES_JVM=\"-D_REENTRANT\"\n-    ALWAYS_DEFINES_JDK=\"-D_GNU_SOURCE -D_REENTRANT -DSTDC\"\n@@ -615,6 +576,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    # Suggested additions: -qsrcmsg to get improved error reporting\n-    # set -qtbtable=full for a better traceback table\/better stacks in hs_err when xlc16 is used\n-    TOOLCHAIN_CFLAGS_JDK=\"-qtbtable=full -qchars=signed -qfullpath -qsaveopt -qstackprotect\"  # add on both CFLAGS\n-    TOOLCHAIN_CFLAGS_JVM=\"-qtbtable=full -qtune=balanced -fno-exceptions \\\n-        -qalias=noansi -qstrict -qtls=default -qnortti -qnoeh -qignerrno -qstackprotect\"\n@@ -629,1 +584,1 @@\n-  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang || test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n@@ -637,1 +592,1 @@\n-  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang || test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n@@ -642,1 +597,1 @@\n-    AC_MSG_ERROR([Don't know how to enable C++14 for this toolchain])\n+    AC_MSG_ERROR([Cannot enable C++14 for this toolchain])\n@@ -661,2 +616,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    WARNING_CFLAGS=\"\"  # currently left empty\n@@ -687,17 +640,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xclang && test \"x$OPENJDK_TARGET_OS\" = xaix; then\n-    JVM_PICFLAG=\"-fpic -mcmodel=large -Wl,-bbigtoc\n-    JDK_PICFLAG=\"-fpic\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    # '-qpic' defaults to 'qpic=small'. This means that the compiler generates only\n-    # one instruction for accessing the TOC. If the TOC grows larger than 64K, the linker\n-    # will have to patch this single instruction with a call to some out-of-order code which\n-    # does the load from the TOC. This is of course slower, and we also would have\n-    # to use '-bbigtoc' for linking anyway so we could also change the PICFLAG to 'qpic=large'.\n-    # With 'qpic=large' the compiler will by default generate a two-instruction sequence which\n-    # can be patched directly by the linker and does not require a jump to out-of-order code.\n-    #\n-    # Since large TOC causes perf. overhead, only pay it where we must. Currently this is\n-    # for all libjvm variants (both gtest and normal) but no other binaries. So, build\n-    # libjvm with -qpic=large and link with -bbigtoc.\n-    JVM_PICFLAG=\"-qpic=large\"\n-    JDK_PICFLAG=\"-qpic\"\n@@ -708,4 +644,2 @@\n-  if test \"x$TOOLCHAIN_TYPE\" != xxlc; then\n-    JVM_PICFLAG=\"$PICFLAG\"\n-    JDK_PICFLAG=\"$PICFLAG\"\n-  fi\n+  JVM_PICFLAG=\"$PICFLAG\"\n+  JDK_PICFLAG=\"$PICFLAG\"\n@@ -761,2 +695,1 @@\n-  if test \"x$FLAGS_CPU_BITS\" = x64 && test \"x$FLAGS_OS\" != xaix; then\n-    # xlc on AIX defines _LP64=1 by default and issues a warning if we redefine it.\n+  if test \"x$FLAGS_CPU_BITS\" = x64; then\n@@ -839,5 +772,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    if test \"x$FLAGS_CPU\" = xppc64; then\n-      $1_CFLAGS_CPU_JVM=\"-qarch=ppc64\"\n-    fi\n-\n","filename":"make\/autoconf\/flags-cflags.m4","additions":7,"deletions":79,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -89,5 +89,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    BASIC_LDFLAGS=\"-b64 -brtl -bnorwexec -bnolibpath -bnoexpall -bernotok -btextpsize:64K \\\n-        -bdatapsize:64K -bstackpsize:64K\"\n-    # libjvm.so has gotten too large for normal TOC size; compile with qpic=large and link with bigtoc\n-    BASIC_LDFLAGS_JVM_ONLY=\"-Wl,-lC_r -bbigtoc\"\n@@ -123,8 +118,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    # We need '-qminimaltoc' or '-qpic=large -bbigtoc' if the TOC overflows.\n-    # Hotspot now overflows its 64K TOC (currently only for debug),\n-    # so we build with '-qpic=large -bbigtoc'.\n-    if test \"x$DEBUG_LEVEL\" != xrelease; then\n-      DEBUGLEVEL_LDFLAGS_JVM_ONLY=\"$DEBUGLEVEL_LDFLAGS_JVM_ONLY -bbigtoc\"\n-    fi\n-\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -264,1 +264,0 @@\n-  # For xlc, the word size flag is required for correct behavior.\n@@ -267,3 +266,1 @@\n-  if test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    MACHINE_FLAG=\"-q${OPENJDK_TARGET_CPU_BITS}\"\n-  elif test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n@@ -324,41 +321,0 @@\n-  # COMPILER_TARGET_BITS_FLAG  : option for selecting 32- or 64-bit output\n-  # COMPILER_COMMAND_FILE_FLAG : option for passing a command file to the compiler\n-  # COMPILER_BINDCMD_FILE_FLAG : option for specifying a file which saves the binder\n-  #                              commands produced by the link step (currently AIX only)\n-  if test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    COMPILER_TARGET_BITS_FLAG=\"-q\"\n-    COMPILER_COMMAND_FILE_FLAG=\"-f\"\n-    COMPILER_BINDCMD_FILE_FLAG=\"-bloadmap:\"\n-  else\n-    COMPILER_TARGET_BITS_FLAG=\"-m\"\n-    COMPILER_COMMAND_FILE_FLAG=\"@\"\n-    COMPILER_BINDCMD_FILE_FLAG=\"\"\n-\n-    # Check if @file is supported by gcc\n-    if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n-      AC_MSG_CHECKING([if @file is supported by gcc])\n-      # Extra empty \"\" to prevent ECHO from interpreting '--version' as argument\n-      $ECHO \"\" \"--version\" > command.file\n-      # Redirect stderr and stdout to config.log (AS_MESSAGE_LOG_FD) via merge\n-      if $CXX @command.file 2>&AS_MESSAGE_LOG_FD >&AS_MESSAGE_LOG_FD; then\n-        AC_MSG_RESULT(yes)\n-        COMPILER_COMMAND_FILE_FLAG=\"@\"\n-      else\n-        AC_MSG_RESULT(no)\n-        COMPILER_COMMAND_FILE_FLAG=\n-      fi\n-      $RM command.file\n-    fi\n-  fi\n-\n-  AC_SUBST(COMPILER_TARGET_BITS_FLAG)\n-  AC_SUBST(COMPILER_COMMAND_FILE_FLAG)\n-  AC_SUBST(COMPILER_BINDCMD_FILE_FLAG)\n-\n-  # Check that the compiler supports -mX (or -qX on AIX) flags\n-  # Set COMPILER_SUPPORTS_TARGET_BITS_FLAG to 'true' if it does\n-  FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [${COMPILER_TARGET_BITS_FLAG}${OPENJDK_TARGET_CPU_BITS}],\n-      IF_TRUE: [COMPILER_SUPPORTS_TARGET_BITS_FLAG=true],\n-      IF_FALSE: [COMPILER_SUPPORTS_TARGET_BITS_FLAG=false])\n-  AC_SUBST(COMPILER_SUPPORTS_TARGET_BITS_FLAG)\n-\n@@ -379,2 +335,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    GENDEPS_FLAGS=\"-qmakedep=gcc -MF\"\n","filename":"make\/autoconf\/flags.m4","additions":1,"deletions":47,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-# Toolchain type: gcc, clang, xlc, microsoft...\n+# Toolchain type: gcc, clang, microsoft...\n@@ -489,11 +489,0 @@\n-# Option used to tell the compiler whether to create 32- or 64-bit executables\n-COMPILER_TARGET_BITS_FLAG := @COMPILER_TARGET_BITS_FLAG@\n-COMPILER_SUPPORTS_TARGET_BITS_FLAG := @COMPILER_SUPPORTS_TARGET_BITS_FLAG@\n-\n-# Option used to pass a command file to the compiler\n-COMPILER_COMMAND_FILE_FLAG := @COMPILER_COMMAND_FILE_FLAG@\n-\n-# Option for specifying a file which saves the binder commands\n-# produced by the link step (for debugging, currently AIX only)\n-COMPILER_BINDCMD_FILE_FLAG := @COMPILER_BINDCMD_FILE_FLAG@\n-\n","filename":"make\/autoconf\/spec.gmk.template","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-VALID_TOOLCHAINS_all=\"gcc clang xlc microsoft\"\n+VALID_TOOLCHAINS_all=\"gcc clang microsoft\"\n@@ -43,1 +43,1 @@\n-VALID_TOOLCHAINS_aix=\"xlc clang\"\n+VALID_TOOLCHAINS_aix=\"clang\"\n@@ -50,1 +50,0 @@\n-TOOLCHAIN_DESCRIPTION_xlc=\"IBM XL C\/C++\"\n@@ -56,1 +55,0 @@\n-TOOLCHAIN_MINIMUM_VERSION_xlc=\"17.1.1.4\"\n@@ -237,19 +235,0 @@\n-  # On AIX the default toolchain depends on the installed (found) compiler\n-  #   xlclang++     -> xlc toolchain\n-  #   ibm-clang++_r -> clang toolchain\n-  # The compiler is searched on the PATH and TOOLCHAIN_PATH\n-  # xlclang++ has precedence over ibm-clang++_r if both are installed\n-  if test \"x$OPENJDK_TARGET_OS\" = xaix; then\n-    DEFAULT_TOOLCHAIN=\"clang\"\n-    if test \"x$TOOLCHAIN_PATH\" != x; then\n-      if test -e ${TOOLCHAIN_PATH}\/xlclang++; then\n-        DEFAULT_TOOLCHAIN=\"xlc\"\n-      fi\n-    else\n-      UTIL_LOOKUP_PROGS(XLCLANG_TEST_PATH, xlclang++)\n-      if test \"x$XLCLANG_TEST_PATH\" != x; then\n-        DEFAULT_TOOLCHAIN=\"xlc\"\n-      fi\n-    fi\n-  fi\n-\n@@ -280,30 +259,1 @@\n-  # on AIX, check for xlclang++ on the PATH and TOOLCHAIN_PATH and use it if it is available\n-  if test \"x$OPENJDK_TARGET_OS\" = xaix; then\n-    if test \"x$TOOLCHAIN_PATH\" != x; then\n-      XLC_TEST_PATH=${TOOLCHAIN_PATH}\/\n-    fi\n-    if test \"x$TOOLCHAIN_TYPE\" = xclang; then\n-      TOOLCHAIN_DESCRIPTION_clang=\"IBM Open XL C\/C++\"\n-      XLCLANG_VERSION_OUTPUT=`${XLC_TEST_PATH}ibm-clang++_r --version 2>&1 | $HEAD -n 1`\n-      $ECHO \"$XLCLANG_VERSION_OUTPUT\" | $GREP \"IBM Open XL C\/C++ for AIX\" > \/dev\/null\n-      if test $? -eq 0; then\n-        AC_MSG_NOTICE([ibm-clang++_r output: $XLCLANG_VERSION_OUTPUT])\n-      else\n-        AC_MSG_ERROR([ibm-clang++_r version output check failed, output: $XLCLANG_VERSION_OUTPUT])\n-      fi\n-    else\n-      XLCLANG_VERSION_OUTPUT=`${XLC_TEST_PATH}xlclang++ -qversion 2>&1 | $HEAD -n 1`\n-      $ECHO \"$XLCLANG_VERSION_OUTPUT\" | $GREP \"IBM XL C\/C++ for AIX\" > \/dev\/null\n-      if test $? -eq 0; then\n-        AC_MSG_NOTICE([xlclang++ output: $XLCLANG_VERSION_OUTPUT])\n-      else\n-        AC_MSG_ERROR([xlclang++ version output check failed, output: $XLCLANG_VERSION_OUTPUT])\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$OPENJDK_TARGET_OS\" = xaix; then\n-    TOOLCHAIN_CC_BINARY_clang=\"ibm-clang_r\"\n-  else\n-    TOOLCHAIN_CC_BINARY_clang=\"clang\"\n-  fi\n+  TOOLCHAIN_CC_BINARY_clang=\"ibm-clang_r clang\"\n@@ -312,1 +262,0 @@\n-  TOOLCHAIN_CC_BINARY_xlc=\"xlclang\"\n@@ -314,5 +263,1 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xaix; then\n-    TOOLCHAIN_CXX_BINARY_clang=\"ibm-clang++_r\"\n-  else\n-    TOOLCHAIN_CXX_BINARY_clang=\"clang++\"\n-  fi\n+  TOOLCHAIN_CXX_BINARY_clang=\"ibm-clang++_r clang++\"\n@@ -321,1 +266,0 @@\n-  TOOLCHAIN_CXX_BINARY_xlc=\"xlclang++\"\n@@ -411,19 +355,1 @@\n-  if test  \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    # xlc -qversion output typically looks like\n-    #     IBM XL C\/C++ for AIX, V11.1 (5724-X13)\n-    #     Version: 11.01.0000.0015\n-    COMPILER_VERSION_OUTPUT=`$COMPILER -qversion 2>&1`\n-    # Check that this is likely to be the IBM XL C compiler.\n-    $ECHO \"$COMPILER_VERSION_OUTPUT\" | $GREP \"IBM XL C\" > \/dev\/null\n-    if test $? -ne 0; then\n-      ALT_VERSION_OUTPUT=`$COMPILER --version 2>&1`\n-      AC_MSG_NOTICE([The $COMPILER_NAME compiler (located as $COMPILER) does not seem to be the required $TOOLCHAIN_TYPE compiler.])\n-      AC_MSG_NOTICE([The result from running with -qversion was: \"$COMPILER_VERSION_OUTPUT\"])\n-      AC_MSG_NOTICE([The result from running with --version was: \"$ALT_VERSION_OUTPUT\"])\n-      AC_MSG_ERROR([A $TOOLCHAIN_TYPE compiler is required. Try setting --with-tools-dir.])\n-    fi\n-    # Collapse compiler output into a single line\n-    COMPILER_VERSION_STRING=`$ECHO $COMPILER_VERSION_OUTPUT`\n-    COMPILER_VERSION_NUMBER=`$ECHO $COMPILER_VERSION_OUTPUT | \\\n-        $SED -e 's\/^.*Version: \\(@<:@1-9@:>@@<:@0-9.@:>@*\\).*$\/\\1\/'`\n-  elif test  \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+  if test  \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n@@ -468,2 +394,4 @@\n-    #    Apple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)\n-    #    clang version 3.3 (tags\/RELEASE_33\/final)\n+    #    Apple clang version 15.0.0 (clang-1500.3.9.4)\n+    #    Target: arm64-apple-darwin23.2.0\n+    #    Thread model: posix\n+    #    InstalledDir: \/Library\/Developer\/CommandLineTools\/usr\/bin\n@@ -471,1 +399,4 @@\n-    #    Debian clang version 3.2-7ubuntu1 (tags\/RELEASE_32\/final) (based on LLVM 3.2)\n+    #    clang version 10.0.0-4ubuntu1\n+    #    Target: x86_64-pc-linux-gnu\n+    #    Thread model: posix\n+    #    InstalledDir: \/usr\/bin\n@@ -474,0 +405,5 @@\n+    # or\n+    #    IBM Open XL C\/C++ for AIX 17.1.0 (5725-C72, 5765-J18), clang version 13.0.0\n+    #    Target: powerpc-ibm-aix7.2.0.0\n+    #    Thread model: posix\n+    #    InstalledDir: \/opt\/IBM\/openxlC\/17.1.0\/bin\n@@ -482,2 +418,4 @@\n-    # Collapse compiler output into a single line\n-    COMPILER_VERSION_STRING=`$ECHO $COMPILER_VERSION_OUTPUT`\n+    # Remove \"Thread model:\" and further details from the version string, and\n+    # collapse into a single line\n+    COMPILER_VERSION_STRING=`$ECHO $COMPILER_VERSION_OUTPUT | \\\n+        $SED -e 's\/ *Thread model: .*\/\/'`\n@@ -485,1 +423,1 @@\n-        $SED -e 's\/^.* version \\(@<:@1-9@:>@@<:@0-9.@:>@*\\).*$\/\\1\/'`\n+        $SED -e 's\/^.*clang version \\(@<:@1-9@:>@@<:@0-9.@:>@*\\).*$\/\\1\/'`\n@@ -578,4 +516,1 @@\n-  if test  \"x$TOOLCHAIN_TYPE\" = xxlc; then\n-    LINKER_VERSION_STRING=\"Unknown\"\n-    LINKER_VERSION_NUMBER=\"0.0\"\n-  elif test  \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+  if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n@@ -1003,0 +938,7 @@\n+  if test \"x$OPENJDK_TARGET_OS\" = xaix; then\n+    # Make sure we have the Open XL version of clang on AIX\n+    $ECHO \"$CC_VERSION_OUTPUT\" | $GREP \"IBM Open XL C\/C++ for AIX\" > \/dev\/null\n+    if test $? -ne 0; then\n+      AC_MSG_ERROR([ibm-clang_r version output check failed, output: $CC_VERSION_OUTPUT])\n+    fi\n+  fi\n","filename":"make\/autoconf\/toolchain.m4","additions":31,"deletions":89,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-else ifeq ($(TOOLCHAIN_TYPE), xlc)\n-  LAUNCHER_CFLAGS += -qvisibility=hidden\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,3 +47,0 @@\n-else ifeq ($(TOOLCHAIN_TYPE), xlc)\n-  CFLAGS_JDKLIB += -qvisibility=hidden\n-  CXXFLAGS_JDKLIB += -qvisibility=hidden\n","filename":"make\/common\/modules\/LibCommon.gmk","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -136,5 +136,0 @@\n-\n-    # Create loadmap on AIX. Helps in diagnosing some problems.\n-    ifneq ($(COMPILER_BINDCMD_FILE_FLAG), )\n-      $1_EXTRA_LDFLAGS += $(COMPILER_BINDCMD_FILE_FLAG)$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).loadmap\n-    endif\n","filename":"make\/common\/native\/Link.gmk","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -212,6 +212,1 @@\n-    ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n-      $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n-    else\n-      # ...except for toolchains which don't support them.\n-      $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n-    endif\n+    $1_LD_OBJ_ARG := @$$($1_OBJ_FILE_LIST)\n","filename":"make\/common\/native\/Paths.gmk","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -100,2 +100,0 @@\n-DISABLED_WARNINGS_xlc := tautological-compare shift-negative-value\n-\n@@ -206,1 +204,0 @@\n-    DISABLED_WARNINGS_xlc := $(DISABLED_WARNINGS_xlc), \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-    WARNINGS_AS_ERRORS_xlc := false, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-    WARNINGS_AS_ERRORS_xlc := false, \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -241,1 +241,0 @@\n-        WARNINGS_AS_ERRORS_xlc := false, \\\n@@ -485,8 +484,0 @@\n-   # Early re-canonizing has to be disabled to workaround an internal XlC compiler error\n-   # when building libharfbuzz\n-   ifeq ($(call isTargetOs, aix), true)\n-    ifneq ($(TOOLCHAIN_TYPE), clang)\n-     HARFBUZZ_CFLAGS += -qdebug=necan\n-    endif\n-   endif\n-\n@@ -574,1 +565,0 @@\n-    WARNINGS_AS_ERRORS_xlc := false, \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-#ifdef AIX_XLC_GE_17\n@@ -89,1 +88,0 @@\n-#endif\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,3 +111,2 @@\n-\/\/ gcc10 added both __has_builtin and __builtin_is_constant_evaluated.\n-\/\/ clang has had __has_builtin for a long time, so likely also in xlclang++.\n-\/\/ Similarly, clang has had __builtin_is_constant_evaluated for a long time.\n+\/\/ Both __has_builtin and __builtin_is_constant_evaluated are available in our\n+\/\/ minimum required versions of gcc and clang.\n","filename":"src\/hotspot\/share\/utilities\/debug.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,6 +64,1 @@\n-\/\/ check for xlc16 or higher\n-#ifdef __ibmxl_version__\n-  #if __ibmxl_version__ < 16\n-  #error \"xlc < 16 not supported\"\n-  #endif\n-#elif defined(__open_xl_version__)\n+#if defined(__open_xl_version__)\n@@ -74,1 +69,1 @@\n-  #error \"xlc version not supported, macro __ibmxl_version__ or __open_xl_version__ not found\"\n+  #error \"xlc version not supported, macro __open_xl_version__ not found\"\n@@ -81,5 +76,0 @@\n-\/\/ Shortcut for the new xlc 17 compiler\n-#if defined(AIX) && defined(__open_xl_version__) && __open_xl_version__ >= 17\n-#define AIX_XLC_GE_17\n-#endif\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_xlc.hpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"}]}