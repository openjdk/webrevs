{"files":[{"patch":"@@ -839,0 +839,14 @@\n+\/\/ Insert a new required input at the end\n+void Node::ins_req( uint idx, Node *n ) {\n+  assert( is_not_dead(n), \"can not use dead node\");\n+  add_req(nullptr);                \/\/ Make space\n+  assert( idx < _max, \"Must have allocated enough space\");\n+  \/\/ Slide over\n+  if(_cnt-idx-1 > 0) {\n+    Copy::conjoint_words_to_higher((HeapWord*)&_in[idx], (HeapWord*)&_in[idx+1], ((_cnt-idx-1)*sizeof(Node*)));\n+  }\n+  _in[idx] = n;                            \/\/ Stuff over old required edge\n+  if (n != nullptr) n->add_out((Node *)this); \/\/ Add reciprocal def-use edge\n+  Compile::current()->record_modified_node(this);\n+}\n+\n@@ -957,0 +971,20 @@\n+Node* Node::uncast_helper(const Node* p, bool keep_deps) {\n+#ifdef ASSERT\n+  uint depth_count = 0;\n+  const Node* orig_p = p;\n+#endif\n+\n+  while (true) {\n+#ifdef ASSERT\n+    if (depth_count >= K) {\n+      orig_p->dump(4);\n+      if (p != orig_p)\n+        p->dump(1);\n+    }\n+    assert(depth_count++ < K, \"infinite loop in Node::uncast_helper\");\n+#endif\n+    if (p == nullptr || p->req() != 2) {\n+      break;\n+    } else if (p->is_ConstraintCast()) {\n+      if (keep_deps && p->as_ConstraintCast()->carry_dependency()) {\n+        break; \/\/ stop at casts with dependencies\n@@ -2310,1 +2344,0 @@\n-\/\/ -----------------------------dump_idx---------------------------------------\n@@ -2336,1 +2369,0 @@\n-\/\/ -----------------------------dump_name--------------------------------------\n@@ -2347,1 +2379,0 @@\n-\/\/ -----------------------------Name-------------------------------------------\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"}]}