{"files":[{"patch":"@@ -1183,32 +1183,36 @@\n-      InstanceKlass* method_holder = target->method_holder();\n-      InstanceKlass* interf = interface_method->method_holder();\n-      HandleMark hm(THREAD);\n-      Handle method_holder_loader(THREAD, method_holder->class_loader());\n-      Handle interface_loader(THREAD, interf->class_loader());\n-\n-      if (method_holder_loader() != interface_loader()) {\n-        ResourceMark rm(THREAD);\n-        Symbol* failed_type_symbol =\n-          SystemDictionary::check_signature_loaders(target->signature(),\n-                                                    _klass,\n-                                                    method_holder_loader,\n-                                                    interface_loader,\n-                                                    true);\n-        if (failed_type_symbol != nullptr) {\n-          stringStream ss;\n-          ss.print(\"loader constraint violation in interface itable\"\n-                   \" initialization for class %s: when selecting method '\",\n-                   _klass->external_name());\n-          interface_method->print_external_name(&ss),\n-          ss.print(\"' the class loader %s for super interface %s, and the class\"\n-                   \" loader %s of the selected method's %s, %s have\"\n-                   \" different Class objects for the type %s used in the signature (%s; %s)\",\n-                   interf->class_loader_data()->loader_name_and_id(),\n-                   interf->external_name(),\n-                   method_holder->class_loader_data()->loader_name_and_id(),\n-                   method_holder->external_kind(),\n-                   method_holder->external_name(),\n-                   failed_type_symbol->as_klass_external_name(),\n-                   interf->class_in_module_of_loader(false, true),\n-                   method_holder->class_in_module_of_loader(false, true));\n-          THROW_MSG(vmSymbols::java_lang_LinkageError(), ss.as_string());\n+      \/\/ Do not check loader constraints for overpass methods because overpass\n+      \/\/ methods are created by the jvm to throw exceptions.\n+      if (!target->is_overpass()) {\n+        InstanceKlass* method_holder = target->method_holder();\n+        InstanceKlass* interf = interface_method->method_holder();\n+        HandleMark hm(THREAD);\n+        Handle method_holder_loader(THREAD, method_holder->class_loader());\n+        Handle interface_loader(THREAD, interf->class_loader());\n+\n+        if (method_holder_loader() != interface_loader()) {\n+          ResourceMark rm(THREAD);\n+          Symbol* failed_type_symbol =\n+            SystemDictionary::check_signature_loaders(target->signature(),\n+                                                      _klass,\n+                                                      method_holder_loader,\n+                                                      interface_loader,\n+                                                      true);\n+          if (failed_type_symbol != nullptr) {\n+            stringStream ss;\n+            ss.print(\"loader constraint violation in interface itable\"\n+                     \" initialization for class %s: when selecting method '\",\n+                     _klass->external_name());\n+            interface_method->print_external_name(&ss),\n+              ss.print(\"' the class loader %s for super interface %s, and the class\"\n+                       \" loader %s of the selected method's %s, %s have\"\n+                       \" different Class objects for the type %s used in the signature (%s; %s)\",\n+                       interf->class_loader_data()->loader_name_and_id(),\n+                       interf->external_name(),\n+                       method_holder->class_loader_data()->loader_name_and_id(),\n+                       method_holder->external_kind(),\n+                       method_holder->external_name(),\n+                       failed_type_symbol->as_klass_external_name(),\n+                       interf->class_in_module_of_loader(false, true),\n+                       method_holder->class_in_module_of_loader(false, true));\n+            THROW_MSG(vmSymbols::java_lang_LinkageError(), ss.as_string());\n+          }\n@@ -1336,3 +1340,1 @@\n-    if (target == nullptr || !target->is_public() || target->is_abstract() || target->is_overpass()) {\n-      assert(target == nullptr || !target->is_overpass() || target->is_public(),\n-             \"Non-public overpass method!\");\n+    if (target == nullptr || !target->is_public() || target->is_abstract()) {\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":37,"deletions":35,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -23,2 +23,1 @@\n-\n-public interface Intf2 extends Intf1 {\n+public class C implements I1, I2 {\n","filename":"test\/hotspot\/jtreg\/runtime\/defaultMethods\/C.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/langtools\/tools\/javac\/8351232\/Intf2.java","status":"copied"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -24,3 +23,2 @@\n-\n-module com.test {\n-  exports com.test;\n+public interface I1 {\n+    default Integer m() { return Integer.valueOf(1); }\n","filename":"test\/hotspot\/jtreg\/runtime\/defaultMethods\/I1.java","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/modules\/com.test\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+ public interface I2 version 52:0 {\n+    public Method m:\"()Ljava\/lang\/Integer;\" stack 1 locals 1 {\n+        iconst_2;\n+        invokestatic Method java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+        areturn;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/defaultMethods\/I2.jasm","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -24,3 +23,3 @@\n-\n-module com.test {\n-  exports com.test;\n+public interface I2 {\n+    \/\/ I2.jasm renames this to `m`\n+    default Integer n() { return Integer.valueOf(2); }\n","filename":"test\/hotspot\/jtreg\/runtime\/defaultMethods\/I2.java","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/modules\/com.test\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8356942\n+ * @summary Ensure invokeinterface throws the correct exception when\n+ *          conflicting default methods are found.\n+ * @compile C.java I1.java I2.java\n+ * @comment Now replace I2 with a version that renames the default method\n+ *          to cause a conflict.\n+ * @compile I2.jasm\n+ * @run driver TestConflictingDefaults\n+ *\n+ *\/\n+public class TestConflictingDefaults {\n+    public static void main(String[] args) {\n+        String error = \"Conflicting default methods: I1.m I2.m\";\n+        try {\n+            I1 var1 = new C();\n+            Integer i = var1.m();\n+            throw new RuntimeException(\"Invocation should have failed!\");\n+        }\n+        catch(IncompatibleClassChangeError icce) {\n+            if (!icce.getMessage().contains(error)) {\n+                throw new RuntimeException(\"Unexpected ICCE thrown: \" + icce);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/defaultMethods\/TestConflictingDefaults.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}