{"files":[{"patch":"@@ -177,1 +177,0 @@\n-        jdk.internal.vm.ci,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.util.List;\n@@ -35,2 +34,0 @@\n-import static jdk.vm.ci.code.CodeUtil.listFromTrustedArray;\n-\n@@ -81,1 +78,1 @@\n-     * A list describing the Java kinds in {@link #values}. It records a kind for the locals and\n+     * An array describing the Java kinds in {@link #values}. It records a kind for the locals and\n@@ -84,1 +81,1 @@\n-    private final List<JavaKind> slotKinds;\n+    private final JavaKind[] slotKinds;\n@@ -227,1 +224,1 @@\n-        this.slotKinds = listFromTrustedArray(slotKinds);\n+        this.slotKinds = slotKinds;\n@@ -245,1 +242,1 @@\n-        if (slotKinds.size() != numLocals + numStack) {\n+        if (slotKinds.length != numLocals + numStack) {\n@@ -248,1 +245,1 @@\n-        for (int i = 0; i < slotKinds.size(); i++) {\n+        for (int i = 0; i < slotKinds.length; i++) {\n@@ -250,1 +247,1 @@\n-            JavaKind kind = slotKinds.get(i);\n+            JavaKind kind = slotKinds[i];\n@@ -257,1 +254,1 @@\n-        for (int i = slotKinds.size(); i < values.length; i++) {\n+        for (int i = slotKinds.length; i < values.length; i++) {\n@@ -277,1 +274,1 @@\n-                JavaKind kind = slotKinds.get(i);\n+                JavaKind kind = slotKinds[i];\n@@ -279,2 +276,2 @@\n-                    assert slotKinds.size() > i + 1 : String.format(\"missing second word %s\", this);\n-                    assert slotKinds.get(i + 1) == JavaKind.Illegal : this;\n+                    assert slotKinds.length > i + 1 : String.format(\"missing second word %s\", this);\n+                    assert slotKinds[i + 1] == JavaKind.Illegal : this;\n@@ -296,1 +293,1 @@\n-        return slotKinds.get(i);\n+        return slotKinds[i];\n@@ -308,1 +305,1 @@\n-        return slotKinds.get(i + numLocals);\n+        return slotKinds[i + numLocals];\n@@ -364,1 +361,1 @@\n-                        slotKinds,\n+                        Arrays.hashCode(slotKinds),\n@@ -385,1 +382,1 @@\n-                        slotKinds.equals(that.slotKinds) &&\n+                        Arrays.equals(slotKinds, that.slotKinds) &&\n@@ -395,1 +392,1 @@\n-     * Returns the list describing the Java kinds in {@link #values}.\n+     * Returns a copy of the array describing the Java kinds in {@link #values}.\n@@ -397,2 +394,2 @@\n-    public List<JavaKind> getSlotKinds() {\n-        return slotKinds;\n+    public JavaKind[] getSlotKinds() {\n+        return (slotKinds == null) ? null : slotKinds.clone();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/BytecodeFrame.java","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.List;\n@@ -31,1 +30,0 @@\n-import jdk.internal.access.SharedSecrets;\n@@ -442,10 +440,0 @@\n-\n-    \/**\n-     * Creates an immutable list from a trusted array that has no references retained by the caller.\n-     *\/\n-    static <T> List<T> listFromTrustedArray(Object[] array) {\n-        if (array == null) {\n-            return List.of();\n-        }\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(array);\n-    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/CodeUtil.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.List;\n@@ -36,2 +35,0 @@\n-import static jdk.vm.ci.code.CodeUtil.listFromTrustedArray;\n-\n@@ -47,1 +44,1 @@\n-    private List<JavaKind> slotKinds;\n+    private JavaKind[] slotKinds;\n@@ -124,1 +121,1 @@\n-                                if (vo.slotKinds.get(i).getSlotCount() == 2 && field.getType().getJavaKind().getSlotCount() == 1) {\n+                                if (vo.slotKinds[i].getSlotCount() == 2 && field.getType().getJavaKind().getSlotCount() == 1) {\n@@ -163,1 +160,1 @@\n-                JavaKind slotKind = slotKinds.get(i);\n+                JavaKind slotKind = slotKinds[i];\n@@ -198,1 +195,1 @@\n-                JavaKind slotkind = slotKinds.get(i);\n+                JavaKind slotkind = slotKinds[i];\n@@ -204,1 +201,1 @@\n-                    while (++i < values.length && slotKinds.get(i) == JavaKind.Illegal) {\n+                    while (++i < values.length && slotKinds[i] == JavaKind.Illegal) {\n@@ -250,1 +247,1 @@\n-        return slotKinds.get(index);\n+        return slotKinds[index];\n@@ -282,1 +279,1 @@\n-        this.slotKinds = listFromTrustedArray(slotKinds);\n+        this.slotKinds = slotKinds;\n@@ -320,1 +317,1 @@\n-     * Returns the list containing the Java kinds of the values stored in this virtual object.\n+     * Returns a copy of the array containing the Java kinds of the values stored in this virtual object.\n@@ -322,2 +319,2 @@\n-    public List<JavaKind> getSlotKinds() {\n-        return slotKinds;\n+    public JavaKind[] getSlotKinds() {\n+        return (slotKinds == null) ? null : slotKinds.clone();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/VirtualObject.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.List;\n@@ -30,1 +29,0 @@\n-import jdk.internal.access.SharedSecrets;\n@@ -1081,7 +1079,0 @@\n-    static <T> List<T> listFromTrustedArray(Object[] array) {\n-        if (array == null) {\n-            return List.of();\n-        }\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(array);\n-    }\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import static jdk.vm.ci.hotspot.CompilerToVM.listFromTrustedArray;\n-\n@@ -38,2 +36,0 @@\n-import java.util.List;\n-\n@@ -64,1 +60,1 @@\n-    protected final List<Site> sites;\n+    protected final Site[] sites;\n@@ -69,1 +65,1 @@\n-    protected final List<Assumption> assumptions;\n+    protected final Assumption[] assumptions;\n@@ -73,1 +69,1 @@\n-     * empty, then the compilation did not record method dependencies. Otherwise, the first\n+     * {@code null}, then the compilation did not record method dependencies. Otherwise, the first\n@@ -76,1 +72,1 @@\n-    protected final List<ResolvedJavaMethod> methods;\n+    protected final ResolvedJavaMethod[] methods;\n@@ -81,1 +77,1 @@\n-    protected final List<Comment> comments;\n+    protected final Comment[] comments;\n@@ -96,1 +92,1 @@\n-    protected final List<DataPatch> dataSectionPatches;\n+    protected final DataPatch[] dataSectionPatches;\n@@ -124,23 +120,0 @@\n-    \/**\n-     * @param name                 the name of this compilation unit.\n-     * @param targetCode           the buffer containing the emitted machine code. This array is now owned by this\n-     *                             object and should not be mutated by the caller.\n-     * @param targetCodeSize       the leading number of bytes in {@link #targetCode} containing the emitted machine\n-     *                             code.\n-     * @param sites                an array of code annotations describing special sites in {@link #targetCode}. This\n-     *                             array is now owned by this object and should not be mutated by the caller.\n-     * @param assumptions          an array of {@link Assumption} this code relies on. This array is now owned by this\n-     *                             object and should not be mutated by the caller.\n-     * @param methods              an array of the methods whose bytecodes were used as input to the compilation. This\n-     *                             array is now owned by this object and should not be mutated by the caller.\n-     * @param comments             an array of comments that will be included in code dumps. This array is now owned by\n-     *                             this object and should not be mutated by the caller.\n-     * @param dataSection          the data section containing serialized constants for the emitted machine code. This\n-     *                             array is now owned by this object and should not be mutated by the caller.\n-     * @param dataSectionAlignment the minimum alignment of the data section.\n-     * @param dataSectionPatches   an array of relocations in the {@link #dataSection}. This array is now owned by this\n-     *                             object and should not be mutated by the caller.\n-     * @param isImmutablePIC       the flag determining whether this code is immutable and position independent.\n-     * @param totalFrameSize       the total size of the stack frame of this compiled method.\n-     * @param deoptRescueSlot      the deopt rescue slot. Must be non-null if there is a safepoint in the method.\n-     *\/\n@@ -149,12 +122,12 @@\n-                               byte[] targetCode,\n-                               int targetCodeSize,\n-                               Site[] sites,\n-                               Assumption[] assumptions,\n-                               ResolvedJavaMethod[] methods,\n-                               Comment[] comments,\n-                               byte[] dataSection,\n-                               int dataSectionAlignment,\n-                               DataPatch[] dataSectionPatches,\n-                               boolean isImmutablePIC,\n-                               int totalFrameSize,\n-                               StackSlot deoptRescueSlot) {\n+                    byte[] targetCode,\n+                    int targetCodeSize,\n+                    Site[] sites,\n+                    Assumption[] assumptions,\n+                    ResolvedJavaMethod[] methods,\n+                    Comment[] comments,\n+                    byte[] dataSection,\n+                    int dataSectionAlignment,\n+                    DataPatch[] dataSectionPatches,\n+                    boolean isImmutablePIC,\n+                    int totalFrameSize,\n+                    StackSlot deoptRescueSlot) {\n@@ -164,3 +137,3 @@\n-        this.sites = listFromTrustedArray(sites);\n-        this.assumptions = listFromTrustedArray(assumptions);\n-        this.methods = listFromTrustedArray(methods);\n+        this.sites = sites;\n+        this.assumptions = assumptions;\n+        this.methods = methods;\n@@ -168,1 +141,1 @@\n-        this.comments = listFromTrustedArray(comments);\n+        this.comments = comments;\n@@ -171,1 +144,1 @@\n-        this.dataSectionPatches = listFromTrustedArray(dataSectionPatches);\n+        this.dataSectionPatches = dataSectionPatches;\n@@ -176,1 +149,0 @@\n-        assert targetCode != null && dataSection != null;\n@@ -224,1 +196,1 @@\n-        return targetCode.clone();\n+        return (targetCode == null) ? null : targetCode.clone();\n@@ -235,1 +207,1 @@\n-     * Returns the list of code annotations describing special sites in {@link #targetCode}.\n+     * Returns a copy of the code annotations describing special sites in {@link #targetCode}.\n@@ -237,2 +209,2 @@\n-    public List<Site> getSites() {\n-        return sites;\n+    public Site[] getSites() {\n+        return (sites == null) ? null : sites.clone();\n@@ -242,1 +214,1 @@\n-     * Returns list of {@link Assumption} this code relies on.\n+     * Returns an array copy of the assumptions this code relies on.\n@@ -244,2 +216,2 @@\n-    public List<Assumption> getAssumptions() {\n-        return assumptions;\n+    public Assumption[] getAssumptions() {\n+        return (assumptions == null) ? null : assumptions.clone();\n@@ -249,1 +221,1 @@\n-     * Returns the list of the methods whose bytecodes were used as input to the compilation\n+     * Returns an array copy of the methods whose bytecodes were used as input to the compilation.\n@@ -251,2 +223,2 @@\n-    public List<ResolvedJavaMethod> getMethods() {\n-        return methods;\n+    public ResolvedJavaMethod[] getMethods() {\n+        return (methods == null) ? null : methods.clone();\n@@ -256,1 +228,1 @@\n-     * Returns the list of comments that will be included in code dumps.\n+     * Returns an array copy of the comments that are included in code dumps.\n@@ -258,2 +230,2 @@\n-    public List<Comment> getComments() {\n-        return comments;\n+    public Comment[] getComments() {\n+        return (comments == null) ? null : comments.clone();\n@@ -266,1 +238,1 @@\n-        return dataSection.clone();\n+        return (dataSection == null) ? null : dataSection.clone();\n@@ -277,1 +249,1 @@\n-     * Gets the list of relocations in the {@link #dataSection}.\n+     * Returns a copy of the {@link #dataSection} relocations.\n@@ -279,2 +251,2 @@\n-    public List<DataPatch> getDataSectionPatches() {\n-        return dataSectionPatches;\n+    public DataPatch[] getDataSectionPatches() {\n+        return (dataSectionPatches == null) ? null : dataSectionPatches.clone();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledCode.java","additions":40,"deletions":68,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-import java.util.List;\n@@ -547,2 +546,2 @@\n-        List<ResolvedJavaMethod> methods = withMethods ? code.methods : null;\n-        List<Assumption> assumptions = code.assumptions;\n+        ResolvedJavaMethod[] methods = withMethods ? code.methods : null;\n+        Assumption[] assumptions = code.assumptions;\n@@ -550,1 +549,1 @@\n-        List<Comment> comments = withComments ? code.comments : null;\n+        Comment[] comments = withComments ? code.comments : null;\n@@ -566,1 +565,1 @@\n-                    setIf(HAS_METHODS, nmethod != null && methods != null && !methods.isEmpty() ) |\n+                    setIf(HAS_METHODS, nmethod != null && methods != null && methods.length != 0 ) |\n@@ -587,1 +586,1 @@\n-            writeU2(\"methods:length\", methods.size());\n+            writeU2(\"methods:length\", methods.length);\n@@ -593,1 +592,1 @@\n-        writeInt(\"sites:length\", code.sites.size());\n+        writeInt(\"sites:length\", code.sites.length);\n@@ -609,1 +608,1 @@\n-            writeU2(\"comments:length\", comments.size());\n+            writeU2(\"comments:length\", comments.length);\n@@ -739,1 +738,2 @@\n-        for (Site site : code.sites) {\n+        Site[] sites = code.sites;\n+        for (Site site : sites) {\n@@ -807,2 +807,2 @@\n-    private void writeDataSectionPatches(List<DataPatch> dataSectionPatches) {\n-        writeU2(\"dataSectionPatches:length\", dataSectionPatches.size());\n+    private void writeDataSectionPatches(DataPatch[] dataSectionPatches) {\n+        writeU2(\"dataSectionPatches:length\", dataSectionPatches.length);\n@@ -930,2 +930,2 @@\n-    private void writeAssumptions(List<Assumption> assumptions) {\n-        writeU2(\"assumptions:length\", assumptions.size());\n+    private void writeAssumptions(Assumption[] assumptions) {\n+        writeU2(\"assumptions:length\", assumptions.length);\n@@ -1180,2 +1180,2 @@\n-    private static int setIf(int flag, List<?> array) {\n-        return array != null && !array.isEmpty() ? flag : 0;\n+    private static int setIf(int flag, Object[] array) {\n+        return array != null && array.length > 0 ? flag : 0;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledCodeStream.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -55,2 +55,1 @@\n-    @SuppressFBWarnings(value = \"UWF_UNWRITTEN_FIELD\", justification = \"set by the VM\")\n-    private String installationFailureMessage;\n+    @SuppressFBWarnings(value = \"UWF_UNWRITTEN_FIELD\", justification = \"set by the VM\") private String installationFailureMessage;\n@@ -58,30 +57,0 @@\n-    \/**\n-     * @param name                 the name of this compilation unit.\n-     * @param targetCode           the buffer containing the emitted machine code. This array is now owned by this\n-     *                             object and should not be mutated by the caller.\n-     * @param targetCodeSize       the leading number of bytes in {@link #targetCode} containing the emitted machine\n-     *                             code.\n-     * @param sites                an array of code annotations describing special sites in {@link #targetCode}. This\n-     *                             array is now owned by this object and should not be mutated by the caller.\n-     * @param assumptions          an array of {@link Assumption} this code relies on. This array is now owned by this\n-     *                             object and should not be mutated by the caller.\n-     * @param methods              an array of the methods whose bytecodes were used as input to the compilation. This\n-     *                             array is now owned by this object and should not be mutated by the caller.\n-     * @param comments             an array of comments that will be included in code dumps. This array is now owned by\n-     *                             this object and should not be mutated by the caller.\n-     * @param dataSection          the data section containing serialized constants for the emitted machine code. This\n-     *                             array is now owned by this object and should not be mutated by the caller.\n-     * @param dataSectionAlignment the minimum alignment of the data section.\n-     * @param dataSectionPatches   an array of relocations in the {@link #dataSection}. This array is now owned by this\n-     *                             object and should not be mutated by the caller.\n-     * @param isImmutablePIC       the flag determining whether this code is immutable and position independent.\n-     * @param totalFrameSize       the total size of the stack frame of this compiled method.\n-     * @param deoptRescueSlot      the deopt rescue slot. Must be non-null if there is a safepoint in the method.\n-     * @param method               the method to which this compiled nmethod belongs.\n-     * @param entryBCI             the bytecode index (BCI) in the {@link #method}\n-     * @param id                   the identifier of the compilation request.\n-     * @param compileState         the address of a native {@code JVMCICompileState} object associated with this\n-     *                             compiled nmethod.\n-     * @param hasUnsafeAccess      a flag indicating if this compiled nmethod has a memory access via the\n-     *                             {@code Unsafe} class.\n-     *\/\n@@ -89,17 +58,17 @@\n-                                  byte[] targetCode,\n-                                  int targetCodeSize,\n-                                  Site[] sites,\n-                                  Assumption[] assumptions,\n-                                  ResolvedJavaMethod[] methods,\n-                                  Comment[] comments,\n-                                  byte[] dataSection,\n-                                  int dataSectionAlignment,\n-                                  DataPatch[] dataSectionPatches,\n-                                  boolean isImmutablePIC,\n-                                  int totalFrameSize,\n-                                  StackSlot deoptRescueSlot,\n-                                  HotSpotResolvedJavaMethod method,\n-                                  int entryBCI,\n-                                  int id,\n-                                  long compileState,\n-                                  boolean hasUnsafeAccess) {\n+                    byte[] targetCode,\n+                    int targetCodeSize,\n+                    Site[] sites,\n+                    Assumption[] assumptions,\n+                    ResolvedJavaMethod[] methods,\n+                    Comment[] comments,\n+                    byte[] dataSection,\n+                    int dataSectionAlignment,\n+                    DataPatch[] dataSectionPatches,\n+                    boolean isImmutablePIC,\n+                    int totalFrameSize,\n+                    StackSlot deoptRescueSlot,\n+                    HotSpotResolvedJavaMethod method,\n+                    int entryBCI,\n+                    int id,\n+                    long compileState,\n+                    boolean hasUnsafeAccess) {\n@@ -107,12 +76,12 @@\n-                targetCode,\n-                targetCodeSize,\n-                sites,\n-                assumptions,\n-                methods,\n-                comments,\n-                dataSection,\n-                dataSectionAlignment,\n-                dataSectionPatches,\n-                isImmutablePIC,\n-                totalFrameSize,\n-                deoptRescueSlot);\n+                        targetCode,\n+                        targetCodeSize,\n+                        sites,\n+                        assumptions,\n+                        methods,\n+                        comments,\n+                        dataSection,\n+                        dataSectionAlignment,\n+                        dataSectionPatches,\n+                        isImmutablePIC,\n+                        totalFrameSize,\n+                        deoptRescueSlot);\n@@ -162,0 +131,2 @@\n+     *\n+     * @return the entry BCI of this nmethod or -1 if the entry is the method's beginning\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledNmethod.java","additions":32,"deletions":61,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-            return (encoding == null) ? null : Arrays.copyOf(encoding, encoding.length);\n+            return (encoding == null) ? null : encoding.clone();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotSpeculationLog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-        return (context == null) ? null : Arrays.copyOf(context, context.length);\n+        return (context == null) ? null : context.clone();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/EncodedSpeculationReason.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}