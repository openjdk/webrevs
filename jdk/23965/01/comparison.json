{"files":[{"patch":"@@ -62,2 +62,2 @@\n-  ZPageAge               _from_age;\n-  ZPageAge               _to_age;\n+  const ZPageAge         _from_age;\n+  const ZPageAge         _to_age;\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -392,19 +391,0 @@\n-static void try_deduplicate(ZMarkContext* context, oop obj) {\n-  if (!StringDedup::is_enabled()) {\n-    \/\/ Not enabled\n-    return;\n-  }\n-\n-  if (!java_lang_String::is_instance(obj)) {\n-    \/\/ Not a String object\n-    return;\n-  }\n-\n-  if (java_lang_String::test_and_set_deduplication_requested(obj)) {\n-    \/\/ Already requested deduplication\n-    return;\n-  }\n-\n-  \/\/ Request deduplication\n-  context->string_dedup_requests()->add(obj);\n-}\n@@ -452,7 +432,1 @@\n-      const oop obj = to_oop(addr);\n-      follow_object(obj, finalizable);\n-\n-      if (!finalizable) {\n-        \/\/ Try deduplicate\n-        try_deduplicate(context, obj);\n-      }\n+      follow_object(to_oop(addr), finalizable);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -40,1 +39,0 @@\n-  StringDedup::Requests         _string_dedup_requests;\n@@ -51,1 +49,0 @@\n-  StringDedup::Requests* string_dedup_requests();\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n-    _nstripes(nstripes),\n-    _string_dedup_requests() {}\n+    _nstripes(nstripes) {}\n@@ -54,4 +53,0 @@\n-inline StringDedup::Requests* ZMarkContext::string_dedup_requests() {\n-  return &_string_dedup_requests;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"gc\/z\/zStringDedup.inline.hpp\"\n@@ -562,6 +563,8 @@\n-  Allocator* const   _allocator;\n-  ZForwarding*       _forwarding;\n-  ZPage*             _target[ZAllocator::_relocation_allocators];\n-  ZGeneration* const _generation;\n-  size_t             _other_promoted;\n-  size_t             _other_compacted;\n+  Allocator* const    _allocator;\n+  ZForwarding*        _forwarding;\n+  ZPage*              _target[ZAllocator::_relocation_allocators];\n+  ZGeneration* const  _generation;\n+  size_t              _other_promoted;\n+  size_t              _other_compacted;\n+  ZStringDedupContext _string_dedup_context;\n+\n@@ -798,0 +801,7 @@\n+  void maybe_string_dedup(zaddress to_addr) {\n+    if (_forwarding->is_promotion()) {\n+      \/\/ Only deduplicate promoted objects, and let short-lived strings simply die instead.\n+      _string_dedup_context.request(to_oop(to_addr));\n+    }\n+  }\n+\n@@ -807,0 +817,2 @@\n+    maybe_string_dedup(to_addr);\n+\n@@ -1181,0 +1193,1 @@\n+    ZStringDedupContext        string_dedup_context;\n@@ -1184,0 +1197,1 @@\n+        \/\/ Remap oops and add remset if needed\n@@ -1185,0 +1199,3 @@\n+\n+        \/\/ String dedup\n+        string_dedup_context.request(obj);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZSTRINGDEDUP_HPP\n+#define SHARE_GC_Z_ZSTRINGDEDUP_HPP\n+\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"gc\/z\/zAddress.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+\n+class ZStringDedupContext {\n+private:\n+  StringDedup::Requests _requests;\n+\n+public:\n+  void request(oop obj);\n+};\n+\n+#endif \/\/ SHARE_GC_Z_ZSTRINGDEDUP_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zStringDedup.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZSTRINGDEDUP_INLINE_HPP\n+#define SHARE_GC_Z_ZSTRINGDEDUP_INLINE_HPP\n+\n+#include \"gc\/z\/zStringDedup.hpp\"\n+\n+#include \"classfile\/javaClasses.inline.hpp\"\n+#include \"gc\/shared\/gc_globals.hpp\"\n+\n+inline void ZStringDedupContext::request(oop obj) {\n+  if (!StringDedup::is_enabled()) {\n+    \/\/ Not enabled\n+    return;\n+  }\n+\n+  if (!java_lang_String::is_instance(obj)) {\n+    \/\/ Not a String object\n+    return;\n+  }\n+\n+  if (java_lang_String::test_and_set_deduplication_requested(obj)) {\n+    \/\/ Already requested deduplication\n+    return;\n+  }\n+\n+  \/\/ Request deduplication\n+  _requests.add(obj);\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZSTRINGDEDUP_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zStringDedup.inline.hpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}