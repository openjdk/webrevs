{"files":[{"patch":"@@ -42,1 +42,0 @@\n-import java.io.FileNotFoundException;\n@@ -63,1 +62,0 @@\n-import static org.testng.Assert.fail;\n@@ -159,20 +157,0 @@\n-    @Test\n-    public void testFileNotFound() throws Exception {\n-        out.printf(\"\\n\\n--- testFileNotFound(): starting\\n\");\n-        try (FileSystem fs = newZipFs()) {\n-            Path fileInZip = fs.getPath(\"non-existent.txt\");\n-            BodyPublishers.ofFile(fileInZip);\n-            fail();\n-        } catch (FileNotFoundException e) {\n-            out.println(\"Caught expected: \" + e);\n-        }\n-        var path = Path.of(\"fileNotFound.txt\");\n-        try {\n-            Files.deleteIfExists(path);\n-            BodyPublishers.ofFile(path);\n-            fail();\n-        } catch (FileNotFoundException e) {\n-            out.println(\"Caught expected: \" + e);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisherTest.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.concurrent.Flow.Publisher;\n@@ -54,2 +53,0 @@\n-import static org.testng.Assert.assertThrows;\n-import static org.testng.Assert.assertTrue;\n@@ -109,14 +106,0 @@\n-    @Test\n-    public void testAPIExceptions() {\n-        assertThrows(NPE, () -> fromPublisher(null));\n-        assertThrows(NPE, () -> fromPublisher(null, 1));\n-        assertThrows(IAE, () -> fromPublisher(new BBPublisher(), 0));\n-        assertThrows(IAE, () -> fromPublisher(new BBPublisher(), -1));\n-        assertThrows(IAE, () -> fromPublisher(new BBPublisher(), Long.MIN_VALUE));\n-\n-        Publisher publisher = fromPublisher(new BBPublisher());\n-        assertThrows(NPE, () -> publisher.subscribe(null));\n-    }\n-\n-    \/\/  Flow.Publisher<ByteBuffer>\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterPublisherTest.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @bug 8364733\n+ * @bug 8226303 8364733\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestBodyPublishers\/OfByteArraysTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * @bug 8364733\n+ * @bug 8226303 8235459 8358688 8364733\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestBodyPublishers\/OfFileTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.util.FileUtils;\n-import org.testng.annotations.Test;\n-\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.net.http.HttpRequest.BodyPublisher;\n-import java.net.http.HttpRequest.BodyPublishers;\n-import java.nio.ByteBuffer;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Flow;\n-\n-import static org.testng.Assert.assertEquals;\n-\n-\/*\n- * @test\n- * @summary Verifies that some of the standard BodyPublishers relay exception\n- *          rather than throw it\n- * @bug 8226303 8358688\n- * @library \/test\/lib\n- * @run testng\/othervm RelayingPublishers\n- *\/\n-public class RelayingPublishers {\n-\n-    @Test\n-    public void ofFile0() throws IOException {\n-        Path directory = Files.createDirectory(Path.of(\"d\"));\n-        \/\/ Even though the path exists, the publisher should not be able\n-        \/\/ to read from it, as that path denotes a directory, not a file\n-        BodyPublisher pub = BodyPublishers.ofFile(directory);\n-        CompletableSubscriber<ByteBuffer> s = new CompletableSubscriber<>();\n-        pub.subscribe(s);\n-        s.future().join();\n-        \/\/ Interestingly enough, it's FileNotFoundException if a file\n-        \/\/ is a directory\n-        assertEquals(s.future().join().getClass(), FileNotFoundException.class);\n-    }\n-\n-    @Test\n-    public void ofFile1() throws IOException {\n-        Path file = Files.createFile(Path.of(\"f\"));\n-        BodyPublisher pub = BodyPublishers.ofFile(file);\n-        FileUtils.deleteFileWithRetry(file);\n-        CompletableSubscriber<ByteBuffer> s = new CompletableSubscriber<>();\n-        pub.subscribe(s);\n-        assertEquals(s.future().join().getClass(), FileNotFoundException.class);\n-    }\n-\n-    @Test\n-    public void ofByteArrays() {\n-        List<byte[]> bytes = new ArrayList<>();\n-        bytes.add(null);\n-        BodyPublisher pub = BodyPublishers.ofByteArrays(bytes);\n-        CompletableSubscriber<ByteBuffer> s = new CompletableSubscriber<>();\n-        pub.subscribe(s);\n-        assertEquals(s.future().join().getClass(), NullPointerException.class);\n-    }\n-\n-    static class CompletableSubscriber<T> implements Flow.Subscriber<T> {\n-\n-        final CompletableFuture<Throwable> f = new CompletableFuture<>();\n-\n-        @Override\n-        public void onSubscribe(Flow.Subscription subscription) {\n-            subscription.request(1);\n-        }\n-\n-        @Override\n-        public void onNext(T item) {\n-            f.completeExceptionally(new RuntimeException(\"Unexpected onNext\"));\n-        }\n-\n-        @Override\n-        public void onError(Throwable throwable) {\n-            f.complete(throwable);\n-        }\n-\n-        @Override\n-        public void onComplete() {\n-            f.completeExceptionally(new RuntimeException(\"Unexpected onNext\"));\n-        }\n-\n-        CompletableFuture<Throwable> future() {\n-            return f.copy();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/RelayingPublishers.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.OpenOption;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Flow;\n+import java.net.http.HttpResponse.BodyHandler;\n+import java.net.http.HttpResponse.ResponseInfo;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.net.http.HttpResponse.BodySubscriber;\n+import java.net.http.HttpResponse.BodySubscribers;\n+import java.util.function.Function;\n+\n+import org.testng.annotations.Test;\n+\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardOpenOption.DELETE_ON_CLOSE;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+import static java.nio.file.StandardOpenOption.READ;\n+import static org.testng.Assert.assertThrows;\n+\n+\/*\n+ * @test\n+ * @summary Basic tests for API specified exceptions from Handler,\n+ *          and Subscriber convenience static factory methods.\n+ * @run testng SubscriberAPIExceptions\n+ *\/\n+\n+public class SubscriberAPIExceptions {\n+\n+    static final Class<NullPointerException> NPE = NullPointerException.class;\n+    static final Class<IllegalArgumentException> IAE = IllegalArgumentException.class;\n+    static final Class<IndexOutOfBoundsException> IOB = IndexOutOfBoundsException.class;\n+\n+    @Test\n+    public void handlerAPIExceptions() throws Exception {\n+        Path path = Paths.get(\".\").resolve(\"tt\");\n+        Path file = Files.createFile(Paths.get(\".\").resolve(\"aFile\"));\n+        Path doesNotExist = Paths.get(\".\").resolve(\"doneNotExist\");\n+        if (Files.exists(doesNotExist))\n+            throw new AssertionError(\"Unexpected \" + doesNotExist);\n+\n+        assertThrows(NPE, () -> BodyHandlers.ofByteArrayConsumer(null));\n+        assertThrows(NPE, () -> BodyHandlers.ofFile(null));\n+        assertThrows(NPE, () -> BodyHandlers.ofFile(null, CREATE, WRITE));\n+        assertThrows(NPE, () -> BodyHandlers.ofFile(path, (OpenOption[])null));\n+        assertThrows(NPE, () -> BodyHandlers.ofFile(path, new OpenOption[] {null}));\n+        assertThrows(NPE, () -> BodyHandlers.ofFile(path, new OpenOption[] {CREATE, null}));\n+        assertThrows(NPE, () -> BodyHandlers.ofFile(path, new OpenOption[] {null, CREATE}));\n+        assertThrows(NPE, () -> BodyHandlers.ofFile(null, (OpenOption[])null));\n+        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(null, CREATE, WRITE));\n+        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, (OpenOption[])null));\n+        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, new OpenOption[] {null}));\n+        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, new OpenOption[] {CREATE, null}));\n+        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, new OpenOption[] {null, CREATE}));\n+        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(null, (OpenOption[])null));\n+        assertThrows(IAE, () -> BodyHandlers.ofFileDownload(file, CREATE, WRITE));\n+        assertThrows(IAE, () -> BodyHandlers.ofFileDownload(doesNotExist, CREATE, WRITE));\n+        assertThrows(NPE, () -> BodyHandlers.ofString(null));\n+        assertThrows(NPE, () -> BodyHandlers.buffering(null, 1));\n+        assertThrows(IAE, () -> BodyHandlers.buffering(new NoOpHandler(), 0));\n+        assertThrows(IAE, () -> BodyHandlers.buffering(new NoOpHandler(), -1));\n+        assertThrows(IAE, () -> BodyHandlers.buffering(new NoOpHandler(), Integer.MIN_VALUE));\n+\n+        \/\/ implementation specific exceptions\n+        assertThrows(IAE, () -> BodyHandlers.ofFile(path, READ));\n+        assertThrows(IAE, () -> BodyHandlers.ofFile(path, DELETE_ON_CLOSE));\n+        assertThrows(IAE, () -> BodyHandlers.ofFile(path, READ, DELETE_ON_CLOSE));\n+        assertThrows(IAE, () -> BodyHandlers.ofFileDownload(path, DELETE_ON_CLOSE));\n+    }\n+\n+    @Test\n+    public void subscriberAPIExceptions() {\n+        Path path = Paths.get(\".\").resolve(\"tt\");\n+        assertThrows(NPE, () -> BodySubscribers.ofByteArrayConsumer(null));\n+        assertThrows(NPE, () -> BodySubscribers.ofFile(null));\n+        assertThrows(NPE, () -> BodySubscribers.ofFile(null, CREATE, WRITE));\n+        assertThrows(NPE, () -> BodySubscribers.ofFile(path, (OpenOption[])null));\n+        assertThrows(NPE, () -> BodySubscribers.ofFile(path, new OpenOption[] {null}));\n+        assertThrows(NPE, () -> BodySubscribers.ofFile(path, new OpenOption[] {CREATE, null}));\n+        assertThrows(NPE, () -> BodySubscribers.ofFile(path, new OpenOption[] {null, CREATE}));\n+        assertThrows(NPE, () -> BodySubscribers.ofFile(null, (OpenOption[])null));\n+        assertThrows(NPE, () -> BodySubscribers.ofString(null));\n+        assertThrows(NPE, () -> BodySubscribers.buffering(null, 1));\n+        assertThrows(IAE, () -> BodySubscribers.buffering(new NoOpSubscriber(), 0));\n+        assertThrows(IAE, () -> BodySubscribers.buffering(new NoOpSubscriber(), -1));\n+        assertThrows(IAE, () -> BodySubscribers.buffering(new NoOpSubscriber(), Integer.MIN_VALUE));\n+        assertThrows(NPE, () -> BodySubscribers.mapping(null, Function.identity()));\n+        assertThrows(NPE, () -> BodySubscribers.mapping(BodySubscribers.ofByteArray(), null));\n+        assertThrows(NPE, () -> BodySubscribers.mapping(null, null));\n+\n+        \/\/ implementation specific exceptions\n+        assertThrows(IAE, () -> BodySubscribers.ofFile(path, READ));\n+        assertThrows(IAE, () -> BodySubscribers.ofFile(path, DELETE_ON_CLOSE));\n+        assertThrows(IAE, () -> BodySubscribers.ofFile(path, READ, DELETE_ON_CLOSE));\n+    }\n+\n+    static class NoOpHandler implements BodyHandler<Void> {\n+        @Override public BodySubscriber<Void> apply(ResponseInfo rinfo) { return null; }\n+    }\n+\n+    static class NoOpSubscriber implements BodySubscriber<Void> {\n+        @Override public void onSubscribe(Flow.Subscription subscription) { }\n+        @Override public void onNext(List<ByteBuffer> item) { }\n+        @Override public void onError(Throwable throwable) { }\n+        @Override public void onComplete() { }\n+        @Override public CompletableFuture<Void> getBody() { return null; }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/SubscriberAPIExceptions.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -1,173 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.FileNotFoundException;\n-import java.nio.ByteBuffer;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.OpenOption;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Flow;\n-import java.net.http.HttpHeaders;\n-import java.net.http.HttpRequest.BodyPublishers;\n-import java.net.http.HttpResponse.BodyHandler;\n-import java.net.http.HttpResponse.ResponseInfo;\n-import java.net.http.HttpResponse.BodyHandlers;\n-import java.net.http.HttpResponse.BodySubscriber;\n-import java.net.http.HttpResponse.BodySubscribers;\n-import java.util.function.Function;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static java.nio.file.StandardOpenOption.CREATE;\n-import static java.nio.file.StandardOpenOption.DELETE_ON_CLOSE;\n-import static java.nio.file.StandardOpenOption.WRITE;\n-import static java.nio.file.StandardOpenOption.READ;\n-import static org.testng.Assert.assertThrows;\n-\n-\/*\n- * @test\n- * @summary Basic tests for API specified exceptions from Publisher, Handler,\n- *          and Subscriber convenience static factory methods.\n- * @run testng SubscriberPublisherAPIExceptions\n- *\/\n-\n-public class SubscriberPublisherAPIExceptions {\n-\n-    static final Class<NullPointerException> NPE = NullPointerException.class;\n-    static final Class<IllegalArgumentException> IAE = IllegalArgumentException.class;\n-    static final Class<IndexOutOfBoundsException> IOB = IndexOutOfBoundsException.class;\n-\n-    @Test\n-    public void publisherAPIExceptions() {\n-        assertThrows(NPE, () -> BodyPublishers.ofByteArray(null));\n-        assertThrows(NPE, () -> BodyPublishers.ofByteArray(null, 0, 1));\n-        assertThrows(IOB, () -> BodyPublishers.ofByteArray(new byte[100],    0, 101));\n-        assertThrows(IOB, () -> BodyPublishers.ofByteArray(new byte[100],    1, 100));\n-        assertThrows(IOB, () -> BodyPublishers.ofByteArray(new byte[100],   -1,  10));\n-        assertThrows(IOB, () -> BodyPublishers.ofByteArray(new byte[100],   99,   2));\n-        assertThrows(IOB, () -> BodyPublishers.ofByteArray(new byte[1],   -100,   1));\n-        assertThrows(NPE, () -> BodyPublishers.ofByteArray(null));\n-        assertThrows(NPE, () -> BodyPublishers.ofFile(null));\n-        assertThrows(NPE, () -> BodyPublishers.ofInputStream(null));\n-        assertThrows(NPE, () -> BodyPublishers.ofString(null));\n-        assertThrows(NPE, () -> BodyPublishers.ofString(\"A\", null));\n-        assertThrows(NPE, () -> BodyPublishers.ofString(null, UTF_8));\n-        assertThrows(NPE, () -> BodyPublishers.ofString(null, null));\n-    }\n-\n-    @DataProvider(name = \"nonExistentFiles\")\n-    public Object[][] nonExistentFiles() {\n-        List<Path> paths = List.of(Paths.get(\"doesNotExist\"),\n-                                   Paths.get(\"tsixEtoNseod\"),\n-                                   Paths.get(\"doesNotExist2\"));\n-        paths.forEach(p -> {\n-            if (Files.exists(p))\n-                throw new AssertionError(\"Unexpected \" + p);\n-        });\n-\n-        return paths.stream().map(p -> new Object[] { p }).toArray(Object[][]::new);\n-    }\n-\n-    @Test(dataProvider = \"nonExistentFiles\", expectedExceptions = FileNotFoundException.class)\n-    public void fromFileCheck(Path path) throws Exception {\n-        BodyPublishers.ofFile(path);\n-    }\n-\n-    @Test\n-    public void handlerAPIExceptions() throws Exception {\n-        Path path = Paths.get(\".\").resolve(\"tt\");\n-        Path file = Files.createFile(Paths.get(\".\").resolve(\"aFile\"));\n-        Path doesNotExist = Paths.get(\".\").resolve(\"doneNotExist\");\n-        if (Files.exists(doesNotExist))\n-            throw new AssertionError(\"Unexpected \" + doesNotExist);\n-\n-        assertThrows(NPE, () -> BodyHandlers.ofByteArrayConsumer(null));\n-        assertThrows(NPE, () -> BodyHandlers.ofFile(null));\n-        assertThrows(NPE, () -> BodyHandlers.ofFile(null, CREATE, WRITE));\n-        assertThrows(NPE, () -> BodyHandlers.ofFile(path, (OpenOption[])null));\n-        assertThrows(NPE, () -> BodyHandlers.ofFile(path, new OpenOption[] {null}));\n-        assertThrows(NPE, () -> BodyHandlers.ofFile(path, new OpenOption[] {CREATE, null}));\n-        assertThrows(NPE, () -> BodyHandlers.ofFile(path, new OpenOption[] {null, CREATE}));\n-        assertThrows(NPE, () -> BodyHandlers.ofFile(null, (OpenOption[])null));\n-        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(null, CREATE, WRITE));\n-        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, (OpenOption[])null));\n-        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, new OpenOption[] {null}));\n-        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, new OpenOption[] {CREATE, null}));\n-        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(path, new OpenOption[] {null, CREATE}));\n-        assertThrows(NPE, () -> BodyHandlers.ofFileDownload(null, (OpenOption[])null));\n-        assertThrows(IAE, () -> BodyHandlers.ofFileDownload(file, CREATE, WRITE));\n-        assertThrows(IAE, () -> BodyHandlers.ofFileDownload(doesNotExist, CREATE, WRITE));\n-        assertThrows(NPE, () -> BodyHandlers.ofString(null));\n-        assertThrows(NPE, () -> BodyHandlers.buffering(null, 1));\n-        assertThrows(IAE, () -> BodyHandlers.buffering(new NoOpHandler(), 0));\n-        assertThrows(IAE, () -> BodyHandlers.buffering(new NoOpHandler(), -1));\n-        assertThrows(IAE, () -> BodyHandlers.buffering(new NoOpHandler(), Integer.MIN_VALUE));\n-\n-        \/\/ implementation specific exceptions\n-        assertThrows(IAE, () -> BodyHandlers.ofFile(path, READ));\n-        assertThrows(IAE, () -> BodyHandlers.ofFile(path, DELETE_ON_CLOSE));\n-        assertThrows(IAE, () -> BodyHandlers.ofFile(path, READ, DELETE_ON_CLOSE));\n-        assertThrows(IAE, () -> BodyHandlers.ofFileDownload(path, DELETE_ON_CLOSE));\n-    }\n-\n-    @Test\n-    public void subscriberAPIExceptions() {\n-        Path path = Paths.get(\".\").resolve(\"tt\");\n-        assertThrows(NPE, () -> BodySubscribers.ofByteArrayConsumer(null));\n-        assertThrows(NPE, () -> BodySubscribers.ofFile(null));\n-        assertThrows(NPE, () -> BodySubscribers.ofFile(null, CREATE, WRITE));\n-        assertThrows(NPE, () -> BodySubscribers.ofFile(path, (OpenOption[])null));\n-        assertThrows(NPE, () -> BodySubscribers.ofFile(path, new OpenOption[] {null}));\n-        assertThrows(NPE, () -> BodySubscribers.ofFile(path, new OpenOption[] {CREATE, null}));\n-        assertThrows(NPE, () -> BodySubscribers.ofFile(path, new OpenOption[] {null, CREATE}));\n-        assertThrows(NPE, () -> BodySubscribers.ofFile(null, (OpenOption[])null));\n-        assertThrows(NPE, () -> BodySubscribers.ofString(null));\n-        assertThrows(NPE, () -> BodySubscribers.buffering(null, 1));\n-        assertThrows(IAE, () -> BodySubscribers.buffering(new NoOpSubscriber(), 0));\n-        assertThrows(IAE, () -> BodySubscribers.buffering(new NoOpSubscriber(), -1));\n-        assertThrows(IAE, () -> BodySubscribers.buffering(new NoOpSubscriber(), Integer.MIN_VALUE));\n-        assertThrows(NPE, () -> BodySubscribers.mapping(null, Function.identity()));\n-        assertThrows(NPE, () -> BodySubscribers.mapping(BodySubscribers.ofByteArray(), null));\n-        assertThrows(NPE, () -> BodySubscribers.mapping(null, null));\n-\n-        \/\/ implementation specific exceptions\n-        assertThrows(IAE, () -> BodySubscribers.ofFile(path, READ));\n-        assertThrows(IAE, () -> BodySubscribers.ofFile(path, DELETE_ON_CLOSE));\n-        assertThrows(IAE, () -> BodySubscribers.ofFile(path, READ, DELETE_ON_CLOSE));\n-    }\n-\n-    static class NoOpHandler implements BodyHandler<Void> {\n-        @Override public BodySubscriber<Void> apply(ResponseInfo rinfo) { return null; }\n-    }\n-\n-    static class NoOpSubscriber implements BodySubscriber<Void> {\n-        @Override public void onSubscribe(Flow.Subscription subscription) { }\n-        @Override public void onNext(List<ByteBuffer> item) { }\n-        @Override public void onError(Throwable throwable) { }\n-        @Override public void onComplete() { }\n-        @Override public CompletableFuture<Void> getBody() { return null; }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/SubscriberPublisherAPIExceptions.java","additions":0,"deletions":173,"binary":false,"changes":173,"status":"deleted"}]}