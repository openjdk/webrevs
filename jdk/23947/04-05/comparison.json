{"files":[{"patch":"@@ -296,5 +296,7 @@\n-      \/\/ For upper bound estimation of result value range with a constant input we\n-      \/\/ pessimistically pick max_int value to prevent incorrect constant folding\n-      \/\/ in case input equals above estimated lower bound.\n-      hi = src_type->hi_as_long() == lo ? hi : src_type->hi_as_long();\n-      hi = result_bit_width < mask_bit_width ? (1L << result_bit_width) - 1 : hi;\n+\n+      \/\/ Following rules applies to upper bound estimation of results value range\n+      \/\/ res.hi = src.hi iff src.hi > 0 else max_value\n+      \/\/ if result_bit_width < mask_bit_width, then we can further constrain res.hi as follows.\n+      \/\/ res.hi = MIN(res.hi, (1L << result_bit_width) - 1)\n+      hi = src_type->hi_as_long() >= 0 ? src_type->hi_as_long() : hi;\n+      hi = result_bit_width < mask_bit_width ? MIN2((1L << result_bit_width) - 1, hi) : hi;\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}