{"files":[{"patch":"@@ -302,1 +302,1 @@\n-      hi = result_bit_width < mask_bit_width ? MIN2((1L << result_bit_width) - 1, hi) : hi;\n+      hi = result_bit_width < mask_bit_width ? MIN2((jlong)((1L << result_bit_width) - 1L), hi) : hi;\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -292,0 +292,17 @@\n+    @Test\n+    @IR (counts = { IRNode.COMPRESS_BITS, \" 1 \" })\n+    public int test15(int src, int mask) {\n+        \/\/ src_type = [min_int + 1, -1]\n+        src = Math.max(Integer.MIN_VALUE + 1, Math.min(src, -1));\n+        return Integer.compress(src, mask);\n+    }\n+\n+    @Run (test = \"test15\")\n+    public void run15(RunInfo info) {\n+        int res = 0;\n+        for (int i = 0; i < 100000; i++) {\n+            res |= test15(0, 0);\n+        }\n+        Asserts.assertEQ(0, res);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestBitCompressValueTransform.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}