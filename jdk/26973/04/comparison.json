{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.annotation.Native;\n@@ -553,1 +554,6 @@\n-    private static final boolean istty = istty();\n+    @Native static final int TTY_STDIN_MASK = 0x00000001;\n+    @Native static final int TTY_STDOUT_MASK = 0x00000002;\n+    @Native static final int TTY_STDERR_MASK = 0x00000004;\n+    \/\/ ttyStatus() returns bit patterns above, a bit is set if the corresponding file\n+    \/\/ descriptor is a character device\n+    private static final int ttyStatus = ttyStatus();\n@@ -565,0 +571,3 @@\n+            public boolean isStdinTty() {\n+                return Console.isStdinTty();\n+            }\n@@ -586,1 +595,1 @@\n-                    var jc = jcp.console(istty, STDIN_CHARSET, STDOUT_CHARSET);\n+                    var jc = jcp.console(isStdinTty() && isStdoutTty(), STDIN_CHARSET, STDOUT_CHARSET);\n@@ -597,1 +606,1 @@\n-        if (istty && c == null) {\n+        if (isStdinTty() && isStdoutTty() && c == null) {\n@@ -604,1 +613,10 @@\n-    private static native boolean istty();\n+    private static boolean isStdinTty() {\n+        return (ttyStatus & TTY_STDIN_MASK) != 0;\n+    }\n+    private static boolean isStdoutTty() {\n+        return (ttyStatus & TTY_STDOUT_MASK) != 0;\n+    }\n+    private static boolean isStderrTty() {\n+        return (ttyStatus & TTY_STDERR_MASK) != 0;\n+    }\n+    private static native int ttyStatus();\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+    boolean isStdinTty();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOAccess.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.util.Optional;\n@@ -43,0 +44,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -45,0 +47,1 @@\n+import sun.nio.cs.UTF_8;\n@@ -106,0 +109,34 @@\n+        return readPassword0(false, locale, format, args);\n+    }\n+\n+    \/\/ These two methods are intended for sun.security.util.Password, so tools like keytool can\n+    \/\/ use JdkConsoleImpl even when standard output is redirected. The Password class should first\n+    \/\/ check if `System.console()` returns a Console instance and use it if available. Otherwise,\n+    \/\/ it should call this method to obtain a JdkConsoleImpl. This ensures only one Console\n+    \/\/ instance exists in the Java runtime.\n+    private static final StableValue<Optional<JdkConsoleImpl>> INSTANCE = StableValue.of();\n+    public static Optional<JdkConsoleImpl> passwordConsole() {\n+        return INSTANCE.orElseSet(() -> {\n+            \/\/ If there's already a proper console, throw an exception\n+            if (System.console() != null) {\n+                throw new IllegalStateException(\"Canâ€™t create a dedicated password \" +\n+                    \"console since a real console already exists\");\n+            }\n+\n+            \/\/ If stdin is NOT redirected, return a JdkConsoleImpl instance,\n+            \/\/ otherwise null\n+            return SharedSecrets.getJavaIOAccess().isStdinTty() ?\n+                Optional.of(\n+                    new JdkConsoleImpl(\n+                        Charset.forName(StaticProperty.stdinEncoding(), UTF_8.INSTANCE),\n+                        Charset.forName(StaticProperty.stdoutEncoding(), UTF_8.INSTANCE))) :\n+                Optional.empty();\n+        });\n+    }\n+\n+    \/\/ Dedicated entry for sun.security.util.Password.\n+    public char[] readPasswordNoNewLine() {\n+        return readPassword0(true, Locale.getDefault(Locale.Category.FORMAT), \"\");\n+    }\n+\n+    private char[] readPassword0(boolean noNewLine, Locale locale, String format, Object ... args) {\n@@ -149,1 +186,3 @@\n-                pw.println();\n+                if (!noNewLine) {\n+                    pw.println();\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-JNIEXPORT jboolean JNICALL\n-Java_java_io_Console_istty(JNIEnv *env, jclass cls)\n+JNIEXPORT jint JNICALL\n+Java_java_io_Console_ttyStatus(JNIEnv *env, jclass cls)\n@@ -37,1 +37,12 @@\n-    return isatty(fileno(stdin)) && isatty(fileno(stdout));\n+    jint ret = 0;\n+\n+    if (isatty(fileno(stdin))) {\n+        ret |= java_io_Console_TTY_STDIN_MASK;\n+    }\n+    if (isatty(fileno(stdout))) {\n+        ret |= java_io_Console_TTY_STDOUT_MASK;\n+    }\n+    if (isatty(fileno(stderr))) {\n+        ret |= java_io_Console_TTY_STDERR_MASK;\n+    }\n+    return ret;\n","filename":"src\/java.base\/unix\/native\/libjava\/Console_md.c","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-JNIEXPORT jboolean JNICALL\n-Java_java_io_Console_istty(JNIEnv *env, jclass cls)\n+JNIEXPORT jint JNICALL\n+Java_java_io_Console_ttyStatus(JNIEnv *env, jclass cls)\n@@ -37,0 +37,1 @@\n+    jint ret = 0;\n@@ -39,0 +40,1 @@\n+    HANDLE hStdErr = GetStdHandle(STD_ERROR_HANDLE);\n@@ -40,3 +42,3 @@\n-    if (hStdIn == INVALID_HANDLE_VALUE ||\n-        hStdOut == INVALID_HANDLE_VALUE) {\n-        return JNI_FALSE;\n+    if (hStdIn != INVALID_HANDLE_VALUE &&\n+        GetFileType(hStdIn) == FILE_TYPE_CHAR) {\n+        ret |= java_io_Console_TTY_STDIN_MASK;\n@@ -45,3 +47,3 @@\n-    if (GetFileType(hStdIn) != FILE_TYPE_CHAR ||\n-        GetFileType(hStdOut) != FILE_TYPE_CHAR) {\n-        return JNI_FALSE;\n+    if (hStdOut != INVALID_HANDLE_VALUE &&\n+        GetFileType(hStdOut) == FILE_TYPE_CHAR) {\n+        ret |= java_io_Console_TTY_STDOUT_MASK;\n@@ -50,1 +52,6 @@\n-    return JNI_TRUE;\n+    if (hStdErr != INVALID_HANDLE_VALUE &&\n+        GetFileType(hStdErr) == FILE_TYPE_CHAR) {\n+        ret |= java_io_Console_TTY_STDERR_MASK;\n+    }\n+\n+    return ret;\n","filename":"src\/java.base\/windows\/native\/libjava\/Console_md.c","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -26,1 +26,1 @@\n- * @bug 8295803 8299689 8351435 8361613\n+ * @bug 8295803 8299689 8351435 8361613 8366261\n@@ -95,3 +95,6 @@\n-        var istty = (boolean)MethodHandles.privateLookupIn(Console.class, MethodHandles.lookup())\n-                .findStatic(Console.class, \"istty\", MethodType.methodType(boolean.class))\n-                .invoke();\n+        var lookup = MethodHandles.privateLookupIn(Console.class, MethodHandles.lookup());\n+        var istty = (boolean)lookup.findStatic(Console.class, \"isStdinTty\", MethodType.methodType(boolean.class))\n+                        .invoke() &&\n+                   (boolean)lookup.findStatic(Console.class, \"isStdoutTty\", MethodType.methodType(boolean.class))\n+                        .invoke();\n+\n","filename":"test\/jdk\/java\/io\/Console\/ModuleSelectionTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}