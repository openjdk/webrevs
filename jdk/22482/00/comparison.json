{"files":[{"patch":"@@ -1359,0 +1359,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2566,0 +2566,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2972,0 +2972,3 @@\n+    if (failing()) {\n+      return;\n+    }\n@@ -5044,1 +5047,0 @@\n-  assert(failing_internal(), \"should be failing\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,0 @@\n-#ifdef ASSERT\n@@ -258,0 +257,1 @@\n+#ifdef ASSERT\n@@ -270,1 +270,3 @@\n-    assert(false, \"unscheduable graph\");\n+    assert(false, \"unschedulable graph\");\n+#endif\n+    cfg->C->record_failure(\"unschedulable graph\");\n@@ -273,1 +275,0 @@\n-#endif\n@@ -288,1 +289,4 @@\n-      DEBUG_ONLY(assert_dom(deepb, inb, n, cfg));\n+      assert_dom(deepb, inb, n, cfg);\n+      if (cfg->C->failing()) {\n+        return nullptr;\n+      }\n@@ -375,0 +379,3 @@\n+          if (C->failing()) {\n+            return false;\n+          }\n@@ -526,1 +533,4 @@\n-        DEBUG_ONLY(assert_dom(deepb, inb, load, cfg));\n+        assert_dom(deepb, inb, load, cfg);\n+        if (cfg->C->failing()) {\n+          return nullptr;\n+        }\n@@ -718,0 +728,3 @@\n+    if (C->failing()) {\n+      return nullptr;\n+    }\n@@ -1522,0 +1535,3 @@\n+      if (C->failing()) {\n+        return;\n+      }\n@@ -1614,2 +1630,2 @@\n-    assert(false, \"early schedule failed\");\n-    C->record_method_not_compilable(\"early schedule failed\");\n+    assert(C->failure_is_artificial(), \"early schedule failed\");\n+    C->record_method_not_compilable(\"early schedule failed\" DEBUG_ONLY(COMMA true));\n@@ -1660,0 +1676,3 @@\n+      if (C->failing()) {\n+        return;\n+      }\n@@ -1729,0 +1748,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -496,0 +496,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n@@ -1365,0 +1368,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4902,1 +4902,4 @@\n-    split_if_with_blocks( visited, nstack);\n+    split_if_with_blocks(visited, nstack);\n+    if (C->failing()) {\n+      return;\n+    }\n@@ -6426,0 +6429,1 @@\n+    \/\/ We would like to expose this check in product but it appears to be expensive.\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1551,0 +1551,3 @@\n+  if (C->failing()) {\n+    return;\n+  }\n@@ -1738,1 +1741,5 @@\n-        assert(!n->is_Store() && !n->is_LoadStore(), \"no node with a side effect\");\n+        if (n->is_Store() || n->is_LoadStore()) {\n+            assert(false, \"no node with a side effect\");\n+            C->record_failure(\"no node with a side effect\");\n+            return;\n+        }\n@@ -1986,0 +1993,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1756,1 +1756,0 @@\n-#ifdef ASSERT\n@@ -1763,0 +1762,1 @@\n+#ifdef ASSERT\n@@ -1765,0 +1765,1 @@\n+#endif\n@@ -1766,0 +1767,1 @@\n+    C->record_failure(\"bad AD file\");\n@@ -1767,1 +1769,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}