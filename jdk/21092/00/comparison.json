{"files":[{"patch":"@@ -256,3 +256,0 @@\n-  \/\/ FIXME: not applicable in current system\n-  \/\/  void    patch_pc(Thread* thread, address pc);\n-\n@@ -281,2 +278,3 @@\n-    if (cb != null) {\n-      return cb.isUpcallStub() ? senderForUpcallStub(map, (UpcallStub)cb) : senderForCompiledFrame(map, cb);\n+    if (cb != null && !cb.isUpcallStub()) {\n+      \/\/ Note: Other platforms use the UpcallStub. We use the Backchain instead which works for all ABI compliant frames.\n+      return senderForCompiledFrame(map, cb);\n@@ -317,28 +315,0 @@\n-  private Frame senderForUpcallStub(PPC64RegisterMap map, UpcallStub stub) {\n-    if (DEBUG) {\n-      System.out.println(\"senderForUpcallStub\");\n-    }\n-    if (Assert.ASSERTS_ENABLED) {\n-      Assert.that(map != null, \"map must be set\");\n-    }\n-\n-    var lastJavaFP = stub.getLastJavaFP(this); \/\/ This will be null\n-    var lastJavaSP = stub.getLastJavaSP(this);\n-    var lastJavaPC = stub.getLastJavaPC(this);\n-\n-    if (Assert.ASSERTS_ENABLED) {\n-      Assert.that(lastJavaSP.greaterThan(getSP()), \"must be above this frame on stack\");\n-    }\n-    PPC64Frame fr;\n-    if (lastJavaPC != null) {\n-      fr = new PPC64Frame(lastJavaSP, lastJavaFP, lastJavaPC);\n-    } else {\n-      fr = new PPC64Frame(lastJavaSP, lastJavaFP);\n-    }\n-    map.clear();\n-    if (Assert.ASSERTS_ENABLED) {\n-      Assert.that(map.getIncludeArgumentOops(), \"should be set by clear\");\n-    }\n-    return fr;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ppc64\/PPC64Frame.java","additions":3,"deletions":33,"binary":false,"changes":36,"status":"modified"}]}