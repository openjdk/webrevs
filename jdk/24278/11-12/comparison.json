{"files":[{"patch":"@@ -359,4 +359,0 @@\n-  product(bool, LoopMultiversioningOptimizeSlowLoop, true, DIAGNOSTIC,      \\\n-          \"When using loop multiversioning, and a speculative runtime\"      \\\n-          \" check is added, resume optimization for the stalled slow_loop\") \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -566,13 +566,0 @@\n-  \/\/ If explicitly asked for (e.g. for benchmarking) we do not continue with\n-  \/\/ optimizations. That means the slow_loop should still be correct, but\n-  \/\/ a bit slower, as there is no unrolling etc.\n-  if (!LoopMultiversioningOptimizeSlowLoop) {\n-#ifndef PRODUCT\n-    if (TraceLoopOpts) {\n-      tty->print(\"WARNING: Resumption of Optimization disabled (-XX:-LoopMultiversioningOptimizeSlowLoop)\");\n-      lpt->dump_head();\n-    }\n-#endif\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n- * @run driver compiler.loopopts.superword.TestAliasing noSlowLoopOptimizations\n@@ -107,1 +106,0 @@\n-            case \"noSlowLoopOptimizations\" -> { framework.addFlags(\"-XX:+UnlockExperimentalVMOptions\", \"-XX:-LoopMultiversioningOptimizeSlowLoop\"); }\n@@ -346,1 +344,0 @@\n-                      \"LoopMultiversioningOptimizeSlowLoop\", \"true\",\n@@ -352,13 +349,0 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_B,            \"> 0\",\n-                  IRNode.STORE_VECTOR,             \"> 0\",\n-                  \".*pre .* multiversion_fast.*\",  \"= 1\",\n-                  \".*main .* multiversion_fast.*\", \"= 1\",\n-                  \".*post .* multiversion_fast.*\", \"= 2\", \/\/ vectorized and scalar versions\n-                  \".*multiversion_delayed_slow.*\", \"= 1\", \/\/ effect from flag -> stays delayed\n-                  \".*multiversion.*\",              \"= 5\"},\n-        phase = CompilePhase.PRINT_IDEAL,\n-        applyIfAnd = {\"UseAutoVectorizationSpeculativeAliasingChecks\", \"true\",\n-                      \"LoopMultiversioningOptimizeSlowLoop\", \"false\", \/\/ slow_loop stays delayed\n-                      \"AlignVector\", \"false\"},\n-        applyIfPlatform = {\"64-bit\", \"true\"},\n-        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -441,1 +425,0 @@\n-                      \"LoopMultiversioningOptimizeSlowLoop\", \"true\",\n@@ -447,13 +430,0 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_I,            \"> 0\",\n-                  IRNode.STORE_VECTOR,             \"> 0\",\n-                  \".*pre .* multiversion_fast.*\",  \"= 1\",\n-                  \".*main .* multiversion_fast.*\", \"= 1\",\n-                  \".*post .* multiversion_fast.*\", \"= 2\", \/\/ vectorized and scalar versions\n-                  \".*multiversion_delayed_slow.*\", \"= 1\", \/\/ effect from flag -> stays delayed\n-                  \".*multiversion.*\",              \"= 5\"},\n-        phase = CompilePhase.PRINT_IDEAL,\n-        applyIfAnd = {\"UseAutoVectorizationSpeculativeAliasingChecks\", \"true\",\n-                      \"LoopMultiversioningOptimizeSlowLoop\", \"false\", \/\/ slow_loop stays delayed\n-                      \"AlignVector\", \"false\"},\n-        applyIfPlatform = {\"64-bit\", \"true\"},\n-        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -482,1 +452,0 @@\n-                      \"LoopMultiversioningOptimizeSlowLoop\", \"true\",\n@@ -488,12 +457,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR,             \"> 0\",\n-                  \".*pre .* multiversion_fast.*\",  \"= 1\",\n-                  \".*main .* multiversion_fast.*\", \"= 1\",\n-                  \".*post .* multiversion_fast.*\", \"= 2\", \/\/ vectorized and scalar versions\n-                  \".*multiversion_delayed_slow.*\", \"= 1\", \/\/ effect from flag -> stays delayed\n-                  \".*multiversion.*\",              \"= 5\"},\n-        phase = CompilePhase.PRINT_IDEAL,\n-        applyIfAnd = {\"UseAutoVectorizationSpeculativeAliasingChecks\", \"true\",\n-                      \"LoopMultiversioningOptimizeSlowLoop\", \"false\", \/\/ slow_loop stays delayed\n-                      \"AlignVector\", \"false\"},\n-        applyIfPlatform = {\"64-bit\", \"true\"},\n-        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestAliasing.java","additions":1,"deletions":43,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -210,1 +210,0 @@\n-            \"-XX:\" + randomPlusMinus(5, 1) + \"LoopMultiversioningOptimizeSlowLoop\",\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestAliasingFuzzer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -225,7 +225,0 @@\n-    @Fork(value = 1, jvmArgs = {\n-        \"-XX:+UseSuperWord\",\n-        \"-XX:+UnlockDiagnosticVMOptions\",\n-        \"-XX:-LoopMultiversioningOptimizeSlowLoop\"\n-    })\n-    public static class VectorAliasingSuperWordWithoutSlowLoopOptimizations extends VectorAliasing {}\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorAliasing.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}