{"files":[{"patch":"@@ -53,0 +53,2 @@\n+    private int iteration = 0;\n+\n@@ -123,0 +125,1 @@\n+    \/\/ Vectorizes with static analysis, since using same index -> iterations trivially independent.\n@@ -128,0 +131,1 @@\n+    \/\/ Vectorizes with static analysis, since using same index -> iterations trivially independent.\n@@ -133,0 +137,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -138,0 +143,1 @@\n+    \/\/ never vectorizes, with our without runtime check\n@@ -142,0 +148,11 @@\n+    @Benchmark\n+    \/\/ Requires multiversioning for vectorization.\n+    \/\/ With only the predicate, we will eventually deopt and compile without vectorization.\n+    public void bench_copy_array_B_differentIndex_mixed() {\n+        if ((iteration++) % 2 == 0) {\n+            copy_B(bB, aB, 0, 0, aB.length); \/\/ noalias\n+        } else {\n+            copy_B(aB, aB, 0, 0, aB.length); \/\/ alias\n+        }\n+    }\n+\n@@ -143,0 +160,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -149,0 +167,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -155,0 +174,1 @@\n+    \/\/ Vectorizes with static analysis, since using same index -> iterations trivially independent.\n@@ -160,0 +180,1 @@\n+    \/\/ Vectorizes with static analysis, since using same index -> iterations trivially independent.\n@@ -165,0 +186,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -170,0 +192,1 @@\n+    \/\/ never vectorizes, with our without runtime check\n@@ -174,0 +197,11 @@\n+    @Benchmark\n+    \/\/ Requires multiversioning for vectorization.\n+    \/\/ With only the predicate, we will eventually deopt and compile without vectorization.\n+    public void bench_copy_array_I_differentIndex_mixed() {\n+        if ((iteration++) % 2 == 0) {\n+            copy_I(bI, aI, 0, 0, aI.length); \/\/ noalias\n+        } else {\n+            copy_I(aI, aI, 0, 0, aI.length); \/\/ alias\n+        }\n+    }\n+\n@@ -175,0 +209,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -181,0 +216,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -187,0 +223,1 @@\n+    \/\/ Vectorizes with static analysis, since using same index -> iterations trivially independent.\n@@ -192,0 +229,1 @@\n+    \/\/ Vectorizes with static analysis, since using same index -> iterations trivially independent.\n@@ -197,0 +235,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -202,0 +241,1 @@\n+    \/\/ never vectorizes, with our without runtime check\n@@ -206,0 +246,11 @@\n+    @Benchmark\n+    \/\/ Requires multiversioning for vectorization.\n+    \/\/ With only the predicate, we will eventually deopt and compile without vectorization.\n+    public void bench_copy_array_L_differentIndex_mixed() {\n+        if ((iteration++) % 2 == 0) {\n+            copy_L(bL, aL, 0, 0, aL.length); \/\/ noalias\n+        } else {\n+            copy_L(aL, aL, 0, 0, aL.length); \/\/ alias\n+        }\n+    }\n+\n@@ -207,0 +258,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -213,0 +265,1 @@\n+    \/\/ Vectorizes if has at least one of: predicate or multiversioning\n@@ -225,0 +278,14 @@\n+    @Fork(value = 1, jvmArgs = {\n+        \"-XX:+UseSuperWord\",\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-XX:-UseAutoVectorizationPredicate\"\n+    })\n+    public static class VectorAliasingSuperWordWithoutAutoVectorizationPredicate extends VectorAliasing {}\n+\n+    @Fork(value = 1, jvmArgs = {\n+        \"-XX:+UseSuperWord\",\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-XX:-LoopMultiversioning\"\n+    })\n+    public static class VectorAliasingSuperWordWithoutMultiversioning extends VectorAliasing {}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorAliasing.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"}]}