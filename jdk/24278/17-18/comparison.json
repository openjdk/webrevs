{"files":[{"patch":"@@ -1052,16 +1052,25 @@\n-                        (containerKind == ContainerKind.MEMORY_SEGMENT_AT_INDEX\n-                         ?  \"\"\"\n-                            \/\/ Due to cases like JDK-8360204, there can be issues with RCE leading\n-                            \/\/ cases where we remove predicates and then unroll again and then\n-                            \/\/ end up multiversioning. These cases seem relatively rare but prevent\n-                            \/\/ us from asserting that there is never multiversioning in these cases.\n-                            \"\"\"\n-                         :  \"\"\"\n-                            \/\/ Aliasing check should never fail at runtime, so the predicate\n-                            \/\/ should never fail, and we do not have to use multiversioning.\n-                            @IR(counts = {\".*multiversion.*\", \"= 0\"},\n-                                phase = CompilePhase.PRINT_IDEAL,\n-                                applyIf = {\"UseAutoVectorizationPredicate\", \"true\"},\n-                                applyIfPlatform = {\"64-bit\", \"true\"},\n-                                applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n-                            \"\"\");\n+                        \/\/ We would have liked to check that there is no multiversioning.\n+                        \/\/ But sadly there are some cases that have issues with RCE and\/or\n+                        \/\/ predicates, and so we end up using multiversioning anyway. We\n+                        \/\/ should fix those cases eventually, to strengthen the checks here.\n+                        \"\"\"\n+                        \/\/ Due to cases like JDK-8360204 and JDK-8365982, there can be issues\n+                        \/\/ with RCE leading cases where we remove predicates and then unroll again\n+                        \/\/ and then end up multiversioning. These cases seem relatively rare but\n+                        \/\/ prevent us from asserting that there is never multiversioning in these cases.\n+                        \"\"\";\n+                        \/\/ Once these cases are fixed, we want to use this IR rule:\n+                        \/\/ \"\"\"\n+                        \/\/ \/\/ Aliasing check should never fail at runtime, so the predicate\n+                        \/\/ \/\/ should never fail, and we do not have to use multiversioning.\n+                        \/\/ \/\/ Failure could have a few causes:\n+                        \/\/ \/\/ - issues with doing RCE \/ missing predicates\n+                        \/\/ \/\/   -> other loop-opts need to be fixed\n+                        \/\/ \/\/ - predicate fails: recompile with multiversioning\n+                        \/\/ \/\/   -> logic in runtime check may be wrong\n+                        \/\/ @IR(counts = {\".*multiversion.*\", \"= 0\"},\n+                        \/\/     phase = CompilePhase.PRINT_IDEAL,\n+                        \/\/     applyIf = {\"UseAutoVectorizationPredicate\", \"true\"},\n+                        \/\/     applyIfPlatform = {\"64-bit\", \"true\"},\n+                        \/\/     applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+                        \/\/ \"\"\");\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestAliasingFuzzer.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"}]}