{"files":[{"patch":"@@ -361,1 +361,1 @@\n-          \"check is added, resume optimization for the stalled slow_loop\")  \\\n+          \" check is added, resume optimization for the stalled slow_loop\") \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,4 +49,5 @@\n- *                    - Loop Parse Predicate:             The Parse Predicate added for Loop Predicates.\n- *                    - Profiled Loop Parse Predicate:    The Parse Predicate added for Profiled Loop Predicates.\n- *                    - AutoVectorization Predicate:      The Parse Predicate added for AutoVectorization runtime checks.\n- *                    - Loop Limit Check Parse Predicate: The Parse Predicate added for a Loop Limit Check Predicate.\n+ *                    - Loop Parse Predicate:               The Parse Predicate added for Loop Predicates.\n+ *                    - Profiled Loop Parse Predicate:      The Parse Predicate added for Profiled Loop Predicates.\n+ *                    - Loop Limit Check Parse Predicate:   The Parse Predicate added for a Loop Limit Check Predicate.\n+ *                    - Short Running Loop Parse Predicate: The Parse Predicate added for the short running long loop check.\n+ *                    - AutoVectorization Parse Predicate:  The Parse Predicate added for AutoVectorization runtime checks.\n@@ -54,1 +55,2 @@\n- *                      Loop Predicate) or a Loop Limit Check Predicate. These predicates will be checked at runtime while\n+ *                      Loop Predicate), a Loop Limit Check Predicate, a Short Running Long Loop Predicate, or a\n+ *                      AutoVectorization Runtime Check Predicate. These predicates will be checked at runtime while\n@@ -86,0 +88,15 @@\n+ *     - AutoVectorization:  This predicate is used for speculative runtime checks required for AutoVectorization.\n+ *       Runtime Check       There are multiple reasons why we need a runtime check to allow vectorization:\n+ *       Predicate           - Unknown aliasing:\n+ *                             An important compoinent of AutoVectorization is proving that memory addresses do not\n+ *                             alias, and can therefore be reordered. In some cases, this cannot be done statically\n+ *                             and a runtime check is necessary.\n+ *                           - Unknown alignment of native memory:\n+ *                             While heap objects have 8-byte alignment, off-heap (native) memory often has no alignment\n+ *                             guarantees. On platforms that require vectors to be aligned, we need to prove alignment.\n+ *                             We cannot do that statically with native memory, hence we need a runtime check.\n+ *                           The benefit of using a predicate is that we only have to compile the vectorized loop. If\n+ *                           the runtime check fails, we simply deoptimize. Should we eventually recompile, then the\n+ *                           predicate is not available any more, and we instead use a multiversioning approach with\n+ *                           both a vectorized and a scalar loop, where the runtime determines which loop is taken.\n+ *                           See: PhaseIdealLoop::maybe_multiversion_for_auto_vectorization_runtime_checks\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"}]}