{"files":[{"patch":"@@ -484,0 +484,2 @@\n+\/\/ For more descriptions on multiversioning:\n+\/\/ See: PhaseIdealLoop::maybe_multiversion_for_auto_vectorization_runtime_checks\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+\/\/ Runtime Checks:\n+\/\/   Some required properties cannot be proven statically, and require a\n+\/\/   runtime check. See VTransform::add_speculative_check\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+\/\/\n+\/\/ For more documentation, see: SuperWord::SLP_extract\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -400,0 +400,23 @@\n+\/\/ Runtime Checks:\n+\/\/   Some required properties cannot be proven statically, and require a\n+\/\/   runtime check:\n+\/\/   - Alignment:\n+\/\/       See VTransform::add_speculative_alignment_check\n+\/\/   - Aliasing:\n+\/\/       See VTransform::apply_speculative_aliasing_runtime_checks\n+\/\/   There is a two staged approach for compilation:\n+\/\/   - AutoVectorization Predicate:\n+\/\/       See VM flag UseAutoVectorizationPredicate and documentation in predicates.hpp\n+\/\/       We speculate that the checks pass, and only compile a vectorized  loop.\n+\/\/       We expect the checks to pass in almost all cases, and so we only need\n+\/\/       to compile and cache the vectorized loop.\n+\/\/       If the predicate ever fails, we deoptimize, and eventually compile\n+\/\/       without predicate. This means we will recompile with multiversioning.\n+\/\/    - Multiversioning:\n+\/\/       See VM Flag LoopMultiversioning and documentaiton in loopUnswitch.cpp\n+\/\/       If the predicate is not available or previously failed, then we compile\n+\/\/       a vectorized and a scalar loop. If the runtime check passes we take the\n+\/\/       vectorized loop, else the scalar loop.\n+\/\/       Multiversioning takes more compile time and code cache, but it also\n+\/\/       produces fast code for when the runtime check passes (vectorized) and\n+\/\/       when it fails (scalar performance).\n","filename":"src\/hotspot\/share\/opto\/vtransform.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}