{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,1 +140,3 @@\n-     * Checks that the method is concrete and not abstract.\n+     * Returns true if this element is a method with a concrete implementation, or a type that can\n+     * be instantiated. For example, array types return true for both {@link #isAbstract()} and this\n+     * method.\n@@ -142,1 +144,1 @@\n-     * @return whether the method is a concrete method\n+     * @see ResolvedJavaType#isConcrete()\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ModifiersProvider.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -405,0 +405,5 @@\n+\n+    @Override\n+    default boolean isConcrete() {\n+        return isArray() || !isAbstract();\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ResolvedJavaType.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -199,0 +199,10 @@\n+    @Test\n+    public void isConcreteTest() {\n+        for (Class<?> c : classes) {\n+            ResolvedJavaType type = metaAccess.lookupJavaType(c);\n+            boolean expected = c.isArray() || !isAbstract(c.getModifiers());\n+            boolean actual = type.isConcrete();\n+            assertEquals(expected, actual);\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}