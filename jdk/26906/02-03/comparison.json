{"files":[{"patch":"@@ -31,1 +31,1 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp\"\n@@ -68,2 +68,0 @@\n-  const uint tenuring_threshold = heap->age_census()->tenuring_threshold();\n-\n@@ -101,1 +99,1 @@\n-          assert(region->age() >= tenuring_threshold, \"Preselection filter\");\n+          assert(heap->is_tenurable(region), \"Preselection filter\");\n@@ -106,1 +104,1 @@\n-        } else if (region->is_young() && (region->age() >= tenuring_threshold)) {\n+        } else if (region->is_young() && heap->is_tenurable(region)) {\n@@ -145,1 +143,1 @@\n-        if (region->is_young() && region->age() >= tenuring_threshold) {\n+        if (region->is_young() && heap->is_tenurable(region)) {\n@@ -249,4 +247,0 @@\n-#ifdef ASSERT\n-  const uint tenuring_threshold = ShenandoahGenerationalHeap::heap()->age_census()->tenuring_threshold();\n-#endif\n-\n@@ -260,1 +254,1 @@\n-      assert(r->age() >= tenuring_threshold, \"Preselected regions must have tenure age\");\n+      assert(ShenandoahGenerationalHeap::heap()->is_tenurable(r), \"Preselected regions must have tenure age\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp\"\n@@ -59,1 +59,0 @@\n-  const uint tenuring_threshold = heap->age_census()->tenuring_threshold();\n@@ -103,1 +102,1 @@\n-    if (r->is_old() || (r->age() >= tenuring_threshold)) {\n+    if (r->is_old() || heap->is_tenurable(r)) {\n@@ -117,1 +116,1 @@\n-      assert(r->is_young() && (r->age() < tenuring_threshold), \"DeMorgan's law (assuming r->is_affiliated)\");\n+      assert(r->is_young() && !heap->is_tenurable(r), \"DeMorgan's law (assuming r->is_affiliated)\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp\"\n@@ -72,1 +72,0 @@\n-  const uint tenuring_threshold = heap->age_census()->tenuring_threshold();\n@@ -92,1 +91,1 @@\n-    if (r->age() < tenuring_threshold) {\n+    if (heap->is_tenurable(r)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -114,2 +114,2 @@\n-  uint _epoch;                       \/\/ Current epoch (modulo max age)\n-  uint *_tenuring_threshold;         \/\/ An array of the last N tenuring threshold values we\n+  uint  _epoch;                      \/\/ Current epoch (modulo max age)\n+  uint* _tenuring_threshold;         \/\/ An array of the last N tenuring threshold values we\n@@ -179,0 +179,4 @@\n+  \/\/ Return the most recently computed tenuring threshold.\n+  \/\/ Visible for testing. Use is_tenurable for consistent tenuring comparisons.\n+  uint tenuring_threshold() const { return _tenuring_threshold[_epoch]; }\n+\n@@ -213,3 +217,0 @@\n-  \/\/ Return the most recently computed tenuring threshold\n-  uint tenuring_threshold() const { return _tenuring_threshold[_epoch]; }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAgeCensus.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp\"\n@@ -101,1 +102,1 @@\n-    if (ShenandoahHeap::heap()->mode()->is_generational() && r->age() >= ShenandoahGenerationalHeap::heap()->age_census()->tenuring_threshold()) {\n+    if (ShenandoahHeap::heap()->mode()->is_generational() && ShenandoahGenerationalHeap::heap()->is_tenurable(r)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp\"\n@@ -33,1 +33,0 @@\n-#include \"gc\/shenandoah\/shenandoahMonitoringSupport.hpp\"\n@@ -537,1 +536,0 @@\n-  const uint tenuring_threshold = heap->age_census()->tenuring_threshold();\n@@ -561,1 +559,1 @@\n-    if (r->age() >= tenuring_threshold) {\n+    if (heap->is_tenurable(r)) {\n@@ -616,1 +614,1 @@\n-      if (heap->is_aging_cycle() && (r->age() + 1 == tenuring_threshold)) {\n+      if (heap->is_aging_cycle() && heap->age_census()->is_tenurable(r->age() + 1)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp\"\n@@ -59,2 +59,1 @@\n-  _only_promote_regions(only_promote_regions),\n-  _tenuring_threshold(0)\n+  _only_promote_regions(only_promote_regions)\n@@ -63,1 +62,0 @@\n-  _tenuring_threshold = _heap->age_census()->tenuring_threshold();\n@@ -141,1 +139,1 @@\n-  if (r->is_young() && r->is_active() && (r->age() >= _tenuring_threshold)) {\n+  if (r->is_young() && r->is_active() && _heap->is_tenurable(r)) {\n@@ -179,1 +177,1 @@\n-    assert(region->age() >= _tenuring_threshold, \"Only promote regions that are sufficiently aged\");\n+    assert(_heap->is_tenurable(region), \"Only promote regions that are sufficiently aged\");\n@@ -262,1 +260,1 @@\n-  assert(region->age() >= _tenuring_threshold, \"Only promote regions that are sufficiently aged\");\n+  assert(_heap->is_tenurable(region), \"Only promote regions that are sufficiently aged\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-  uint _tenuring_threshold;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -196,1 +196,0 @@\n-        _tenuring_threshold(0),\n@@ -215,2 +214,0 @@\n-\n-  _tenuring_threshold = _heap->age_census()->tenuring_threshold();\n@@ -282,1 +279,1 @@\n-      (from_region_age + object_age >= _tenuring_threshold)) {\n+      _heap->age_census()->is_tenurable(from_region_age + object_age)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-  uint                              _tenuring_threshold;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+  inline bool is_tenurable(const ShenandoahHeapRegion* r) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP_INLINE_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP_INLINE_HPP\n+\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeapRegion.hpp\"\n+\n+inline bool ShenandoahGenerationalHeap::is_tenurable(const ShenandoahHeapRegion* r) const {\n+  return _age_census->is_tenurable(r->age());\n+}\n+\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP_INLINE_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}