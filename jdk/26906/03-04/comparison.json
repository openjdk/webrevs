{"files":[{"patch":"@@ -67,1 +67,1 @@\n-  auto heap = ShenandoahGenerationalHeap::heap();\n+  const auto heap = ShenandoahGenerationalHeap::heap();\n@@ -69,3 +69,3 @@\n-  size_t capacity = heap->soft_max_capacity();\n-  size_t garbage_threshold = ShenandoahHeapRegion::region_size_bytes() * ShenandoahGarbageThreshold \/ 100;\n-  size_t ignore_threshold = ShenandoahHeapRegion::region_size_bytes() * ShenandoahIgnoreGarbageThreshold \/ 100;\n+  const size_t capacity = heap->soft_max_capacity();\n+  const size_t garbage_threshold = ShenandoahHeapRegion::region_size_bytes() * ShenandoahGarbageThreshold \/ 100;\n+  const size_t ignore_threshold = ShenandoahHeapRegion::region_size_bytes() * ShenandoahIgnoreGarbageThreshold \/ 100;\n@@ -75,1 +75,0 @@\n-  size_t max_cset = (size_t) (heap->young_generation()->get_evacuation_reserve() \/ ShenandoahEvacWaste);\n@@ -77,2 +76,3 @@\n-  size_t free_target = (capacity * ShenandoahMinFreeThreshold) \/ 100 + max_cset;\n-  size_t min_garbage = (free_target > actual_free) ? (free_target - actual_free) : 0;\n+  const size_t max_cset = (size_t) (heap->young_generation()->get_evacuation_reserve() \/ ShenandoahEvacWaste);\n+  const size_t free_target = (capacity * ShenandoahMinFreeThreshold) \/ 100 + max_cset;\n+  const size_t min_garbage = (free_target > actual_free) ? (free_target - actual_free) : 0;\n@@ -91,5 +91,9 @@\n-    if (heap->is_tenurable(r)) {\n-      size_t new_cset = cur_cset + r->get_live_data_bytes();\n-      size_t region_garbage = r->garbage();\n-      size_t new_garbage = cur_young_garbage + region_garbage;\n-      bool add_regardless = (region_garbage > ignore_threshold) && (new_garbage < min_garbage);\n+\n+    \/\/ Note that we do not add tenurable regions if they were not pre-selected.  They were not preselected\n+    \/\/ because there is insufficient room in old-gen to hold their to-be-promoted live objects or because\n+    \/\/ they are to be promoted in place.\n+    if (!heap->is_tenurable(r)) {\n+      const size_t new_cset = cur_cset + r->get_live_data_bytes();\n+      const size_t region_garbage = r->garbage();\n+      const size_t new_garbage = cur_young_garbage + region_garbage;\n+      const bool add_regardless = (region_garbage > ignore_threshold) && (new_garbage < min_garbage);\n@@ -103,3 +107,0 @@\n-    \/\/ Note that we do not add aged regions if they were not pre-selected.  The reason they were not preselected\n-    \/\/ is because there is not sufficient room in old-gen to hold their to-be-promoted live objects or because\n-    \/\/ they are to be promoted in place.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-  log_trace(gc, age)(\"New tenuring threshold %zu (min %zu, max %zu)\",\n+  log_info(gc, age)(\"New tenuring threshold %zu (min %zu, max %zu)\",\n@@ -361,0 +361,8 @@\n+\n+  const LogTarget(Debug, gc, age) lt;\n+  if (!lt.is_enabled()) {\n+    return;\n+  }\n+\n+  LogStream ls(lt);\n+\n@@ -376,1 +384,1 @@\n-    double mr = mortality_rate(prev_pop, cur_pop);\n+    const double mr = mortality_rate(prev_pop, cur_pop);\n@@ -379,3 +387,2 @@\n-      log_info(gc, age)\n-        (\" - age %3u: prev %10zu bytes, curr %10zu bytes, mortality %.2f \",\n-         i, prev_pop*oopSize, cur_pop*oopSize, mr);\n+      ls.print_cr(\" - age %3u: prev %10zu bytes, curr %10zu bytes, mortality %.2f \",\n+         i, prev_pop * oopSize, cur_pop * oopSize, mr);\n@@ -386,1 +393,1 @@\n-      log_info(gc, age)(\"----------------------------------------------------------------------------\");\n+      ls.print_cr(\"----------------------------------------------------------------------------\");\n@@ -389,1 +396,1 @@\n-  CENSUS_NOISE(_global_noise[cur_epoch].print(total);)\n+  CENSUS_NOISE(_global_noise[cur_epoch].print(ls, total);)\n@@ -393,1 +400,1 @@\n-void ShenandoahNoiseStats::print(size_t total) {\n+void ShenandoahNoiseStats::print(LogStream& ls, const size_t total) {\n@@ -395,8 +402,8 @@\n-    float f_skipped = (float)skipped\/(float)total;\n-    float f_aged    = (float)aged\/(float)total;\n-    float f_clamped = (float)clamped\/(float)total;\n-    float f_young   = (float)young\/(float)total;\n-    log_info(gc, age)(\"Skipped: %10zu (%.2f),  R-Aged: %10zu (%.2f),  \"\n-                      \"Clamped: %10zu (%.2f),  R-Young: %10zu (%.2f)\",\n-                      skipped*oopSize, f_skipped, aged*oopSize, f_aged,\n-                      clamped*oopSize, f_clamped, young*oopSize, f_young);\n+    const float f_skipped = (float)skipped\/(float)total;\n+    const float f_aged    = (float)aged\/(float)total;\n+    const float f_clamped = (float)clamped\/(float)total;\n+    const float f_young   = (float)young\/(float)total;\n+    ls.print_cr(\"Skipped: %10zu (%.2f),  R-Aged: %10zu (%.2f),  \"\n+                \"Clamped: %10zu (%.2f),  R-Young: %10zu (%.2f)\",\n+                skipped*oopSize, f_skipped, aged*oopSize, f_aged,\n+                clamped*oopSize, f_clamped, young*oopSize, f_young);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAgeCensus.cpp","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+class LogStream;\n+\n@@ -70,1 +72,1 @@\n-  void print(size_t total);\n+  void print(LogStream& ls, size_t total);\n@@ -183,1 +185,1 @@\n-  \/\/ Return true if this age is above the tenuring threshold.\n+  \/\/ Return true if this age is at or above the tenuring threshold.\n@@ -185,1 +187,1 @@\n-    return age > tenuring_threshold();\n+    return age >= tenuring_threshold();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAgeCensus.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -30,0 +29,2 @@\n+\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -36,1 +37,1 @@\n-#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP_INLINE_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}