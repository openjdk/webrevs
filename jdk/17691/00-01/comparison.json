{"files":[{"patch":"@@ -144,1 +144,1 @@\n-        return (addr.greaterThanOrEqual(bottom()) && addr.lessThan(top()));\n+        return (addr.greaterThanOrEqual(bottom()) && addr.lessThan(end()));\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,4 +126,6 @@\n-\n-        if (Assert.ASSERTS_ENABLED) {\n-          Assert.that(loc.hr != null, \"Should have found this address in a g1 heap region\");\n-        }\n+        \/\/ We don't assert that loc.hr is not null like we do for the SerialHeap. This is\n+        \/\/ because heap.isIn(a) can return true if the address is anywhere in G1's mapped\n+        \/\/ memory, even if that area of memory is not in use by a G1 HeapRegion. So there\n+        \/\/ may in fact be no HeapRegion for the address even though it is in the heap.\n+        \/\/ Leaving loc.hr == null in this case will result in PointerFinder saying that\n+        \/\/ the address is \"In unknown section of Java the heap\", which is what we want.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/PointerFinder.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-            tty.println(\"In unknown section of Java heap\");\n+            tty.println(\"In unknown section of the Java heap\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/PointerLocation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}