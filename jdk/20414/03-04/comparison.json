{"files":[{"patch":"@@ -705,9 +705,7 @@\n-                if (stream instanceof FileInputStream) {\n-                    keystorePath = SharedSecrets\n-                                    .getJavaIOFileInputStreamAccess()\n-                                    .getPath((FileInputStream) stream);\n-                    if (keystorePath != null) {\n-                        debug.println(\"JceKeyStore: Loading \\\"\" + keystorePath.substring(\n-                            keystorePath.lastIndexOf(File.separator) + 1)\n-                            + \"\\\" keystore\");\n-                    }\n+                keystorePath = SharedSecrets\n+                                .getJavaIOInputStreamAccess()\n+                                .getPath(stream);\n+                if (keystorePath != null) {\n+                    debug.println(\"JceKeyStore: Loading \\\"\" + keystorePath.substring(\n+                        keystorePath.lastIndexOf(File.separator) + 1)\n+                        + \"\\\" keystore\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/JceKeyStore.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import jdk.internal.access.JavaIOInputStreamAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -58,0 +61,23 @@\n+    \/\/ Set up JavaIOInputStreamAccess in SharedSecrets\n+    static {\n+        SharedSecrets.setJavaIOInputStreamAccess(\n+            new JavaIOInputStreamAccess() {\n+                public String getPath(InputStream is) {\n+                    if (is instanceof FileInputStream) {\n+                        return SharedSecrets\n+                                .getJavaIOFileInputStreamAccess()\n+                                .getPath((FileInputStream) is);\n+                    } else if (is instanceof FilterInputStream fis) {\n+                        if ((fis.in != null) &&\n+                                (fis.in instanceof FileInputStream)) {\n+                            return SharedSecrets\n+                                    .getJavaIOFileInputStreamAccess()\n+                                    .getPath((FileInputStream) (fis.in));\n+                        }\n+                    }\n+                    return null;\n+                }\n+            }\n+        );\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -811,1 +811,1 @@\n-    \/\/ Set up JavaIOFileInputStreamAccess in SharedSecrets\n+    \/\/ Set up JavaIOInputStreamAccess in SharedSecrets\n@@ -1515,5 +1515,3 @@\n-        if (stream instanceof FileInputStream) {\n-            keystorePath = SharedSecrets\n-                    .getJavaIOFileInputStreamAccess()\n-                    .getPath((FileInputStream) stream);\n-        }\n+        keystorePath = SharedSecrets\n+                .getJavaIOInputStreamAccess()\n+                .getPath(stream);\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.security.KeyStore;\n+import java.io.InputStream;\n@@ -29,2 +29,2 @@\n-public interface JavaSecurityKeyStoreAccess {\n-    public String getPath(KeyStore fis);\n+public interface JavaIOInputStreamAccess {\n+    public String getPath(InputStream is);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOInputStreamAccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaSecurityKeyStoreAccess.java","status":"copied"},{"patch":"@@ -42,0 +42,1 @@\n+import java.io.InputStream;\n@@ -74,0 +75,1 @@\n+    private static JavaIOInputStreamAccess javaIOInputStreamAccess;\n@@ -332,0 +334,12 @@\n+    public static void setJavaIOInputStreamAccess(JavaIOInputStreamAccess jiois) {\n+        javaIOInputStreamAccess = jiois;\n+    }\n+    public static JavaIOInputStreamAccess getJavaIOInputStreamAccess() {\n+        var access = javaIOInputStreamAccess;\n+        if (access == null) {\n+            ensureClassInitialized(InputStream.class);\n+            access = javaIOInputStreamAccess;\n+        }\n+        return access;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1967,9 +1967,7 @@\n-            if (stream instanceof FileInputStream) {\n-                keystorePath = SharedSecrets\n-                                .getJavaIOFileInputStreamAccess()\n-                                .getPath((FileInputStream) stream);\n-                if (keystorePath != null) {\n-                    debug.println(\"PKCS12KeyStore: Loading \\\"\" + keystorePath.substring(\n-                        keystorePath.lastIndexOf(File.separator) + 1)\n-                        + \"\\\" keystore\");\n-                }\n+            keystorePath = SharedSecrets\n+                    .getJavaIOInputStreamAccess()\n+                    .getPath(stream);\n+            if (keystorePath != null) {\n+                debug.println(\"PKCS12KeyStore: Loading \\\"\" + keystorePath.substring(\n+                    keystorePath.lastIndexOf(File.separator) + 1)\n+                    + \"\\\" keystore\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -675,9 +675,7 @@\n-                if (stream instanceof FileInputStream) {\n-                    keystorePath = SharedSecrets\n-                                    .getJavaIOFileInputStreamAccess()\n-                                    .getPath((FileInputStream) stream);\n-                    if (keystorePath != null) {\n-                        debug.println(\"JavaKeyStore: Loading \\\"\" + keystorePath.substring(\n-                            keystorePath.lastIndexOf(File.separator) + 1)\n-                            + \"\\\" keystore\");\n-                    }\n+                keystorePath = SharedSecrets\n+                                .getJavaIOInputStreamAccess()\n+                                .getPath(stream);\n+                if (keystorePath != null) {\n+                    debug.println(\"JavaKeyStore: Loading \\\"\" + keystorePath.substring(\n+                        keystorePath.lastIndexOf(File.separator) + 1)\n+                        + \"\\\" keystore\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/JavaKeyStore.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.io.BufferedInputStream;\n@@ -38,0 +39,1 @@\n+import java.io.InputStream;\n@@ -50,1 +52,1 @@\n-    static void initContext() throws Exception {\n+    static void initContextWithFIS() throws Exception {\n@@ -64,0 +66,15 @@\n+    static void initContextWithBIS() throws Exception {\n+        String keyFilename =\n+            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores +\n+                \"\/\" + keyStoreFile;\n+        FileInputStream fis = new FileInputStream(keyFilename);\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        InputStream bufferedStream = new BufferedInputStream(fis);\n+        ks.load(bufferedStream, passwd.toCharArray());\n+        KeyManagerFactory kmf =\n+                KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+        kmf.init(ks, passwd.toCharArray());\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        tmf.init(ks);\n+    }\n+\n@@ -72,2 +89,2 @@\n-            \/\/initialize the KeyStore\n-            initContext();\n+            \/\/initialize the KeyStore with FIS\n+            initContextWithFIS();\n@@ -81,0 +98,10 @@\n+\n+            \/\/initialize the KeyStore with BIS\n+            initContextWithBIS();\n+\n+            ProcessBuilder pb1 = ProcessTools.createTestJavaProcessBuilder(\n+                    Utils.addTestJavaOpts(\"LogKeyStorePathVerifier\"));\n+            OutputAnalyzer output1 = ProcessTools.executeProcess(pb1);\n+            \/\/ Check for the presence of new message and verify the\n+            \/\/ keystore name in debug logs\n+            output1.shouldContain(\"Loaded \\\"keystore\\\" keystore in pkcs12 format\");\n","filename":"test\/jdk\/java\/security\/KeyStore\/LogKeyStorePathVerifier.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"}]}