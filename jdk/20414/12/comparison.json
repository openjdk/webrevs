{"files":[{"patch":"@@ -32,1 +32,1 @@\n-import java.util.*;\n+import java.nio.file.Path;\n@@ -45,0 +45,1 @@\n+import java.util.*;\n@@ -47,0 +48,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -695,1 +698,1 @@\n-\n+            String storeName = null;\n@@ -699,0 +702,13 @@\n+            if (debug != null) {\n+                String keystorePath = SharedSecrets\n+                                .getJavaIOFileInputStreamAccess()\n+                                .getPath(stream);\n+                if (keystorePath != null) {\n+                    storeName = Path.of(keystorePath).getFileName()\n+                                .toString();\n+                    debug.println(\"JceKeyStore: loading \\\"\"\n+                        + ((storeName != null) ? storeName : \"\")\n+                        + \"\\\" keystore\");\n+                }\n+            }\n+\n@@ -859,4 +875,6 @@\n-                    debug.println(\"JceKeyStore load: private key count: \" +\n-                        privateKeyCount + \". trusted key count: \" +\n-                        trustedKeyCount + \". secret key count: \" +\n-                        secretKeyCount);\n+                    debug.println(\"JceKeyStore loaded: \\\"\"\n+                        + ((storeName != null) ? storeName : \"\")\n+                        + \"\\\" keystore with private key count: \"\n+                        + privateKeyCount + \". trusted key count: \"\n+                        + trustedKeyCount + \". secret key count: \"\n+                        + secretKeyCount);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/JceKeyStore.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n-import jdk.internal.util.ArraysSupport;\n+\n+import jdk.internal.access.JavaIOFileInputStreamAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -32,0 +34,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -85,0 +88,23 @@\n+    static {\n+        SharedSecrets.setJavaIOFileInputStreamAccess(\n+            new JavaIOFileInputStreamAccess() {\n+                public String getPath(InputStream is) {\n+                    if (is == null) {\n+                        return null; \/\/ Handle null InputStream\n+                    }\n+                    return switch (is) {\n+                        case FileInputStream fis -> fis.path;\n+                        case FilterInputStream filter -> {\n+                            InputStream inner = filter.in;\n+                            if (inner instanceof FileInputStream fis) {\n+                                yield fis.path;\n+                            } else {\n+                                yield getPath(inner);\n+                            }\n+                        }\n+                        default -> null;\n+                    };\n+                }\n+            }\n+        );\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -41,0 +41,3 @@\n+import jdk.internal.access.JavaSecurityKeyStoreAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -213,0 +216,3 @@\n+    \/\/ The keystore's InputStream\n+    private static InputStream inputStream;\n+\n@@ -805,0 +811,10 @@\n+    \/\/ Set up JavaSecurityKeyStoreAccess in SharedSecrets\n+    static {\n+        SharedSecrets.setJavaSecurityKeyStoreAccess(\n+                new JavaSecurityKeyStoreAccess() {\n+                    public InputStream getInputStream(KeyStore ks) {\n+                        return inputStream;\n+                    }\n+                }\n+        );\n+    }\n@@ -1499,0 +1515,1 @@\n+        inputStream = stream;\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.io.InputStream;\n+import java.nio.file.Path;\n@@ -31,0 +33,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -32,0 +35,1 @@\n+import sun.security.ssl.SSLLogger;\n@@ -274,0 +278,16 @@\n+        if (ks != null && SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+            InputStream is = SharedSecrets\n+                    .getJavaSecurityKeyStoreAccess()\n+                    .getInputStream(ks);\n+            if (is != null) {\n+                String keystorePath = SharedSecrets\n+                                    .getJavaIOFileInputStreamAccess()\n+                                    .getPath(is);\n+                if (keystorePath != null) {\n+                    SSLLogger.fine(\"Initializing with the keystore: \\\"\" +\n+                                Path.of(keystorePath).getFileName().toString()\n+                                + \"\\\" in \" + ks.getType() + \" format from \"\n+                                + provider.getName() + \" provider\");\n+                }\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/TrustManagerFactory.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.access;\n+\n+import java.io.InputStream;\n+\n+public interface JavaIOFileInputStreamAccess {\n+    public String getPath(InputStream fis);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOFileInputStreamAccess.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.access;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+\n+public interface JavaSecurityKeyStoreAccess {\n+    public InputStream getInputStream(KeyStore fis);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaSecurityKeyStoreAccess.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -33,0 +33,1 @@\n+import java.security.KeyStore;\n@@ -40,0 +41,1 @@\n+import java.io.FileInputStream;\n@@ -75,0 +77,1 @@\n+    private static JavaIOFileInputStreamAccess javaIOFileInputStreamAccess;\n@@ -93,0 +96,1 @@\n+    private static JavaSecurityKeyStoreAccess javaSecurityKeyStoreAccess;\n@@ -294,0 +298,13 @@\n+    public static void setJavaIOFileInputStreamAccess(JavaIOFileInputStreamAccess jiofis) {\n+        javaIOFileInputStreamAccess = jiofis;\n+    }\n+\n+    public static JavaIOFileInputStreamAccess getJavaIOFileInputStreamAccess() {\n+        var access = javaIOFileInputStreamAccess;\n+        if (access == null) {\n+            ensureClassInitialized(FileInputStream.class);\n+            access = javaIOFileInputStreamAccess;\n+        }\n+        return access;\n+    }\n+\n@@ -329,0 +346,13 @@\n+    public static void setJavaSecurityKeyStoreAccess(JavaSecurityKeyStoreAccess jsks) {\n+        javaSecurityKeyStoreAccess = jsks;\n+    }\n+\n+    public static JavaSecurityKeyStoreAccess getJavaSecurityKeyStoreAccess() {\n+        var access = javaSecurityKeyStoreAccess;\n+        if (access == null) {\n+            ensureClassInitialized(KeyStore.class);\n+            access = javaSecurityKeyStoreAccess;\n+        }\n+        return access;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.Path;\n@@ -78,1 +79,1 @@\n-\n+import jdk.internal.access.SharedSecrets;\n@@ -1961,0 +1962,1 @@\n+        String storeName = null;\n@@ -1965,0 +1967,11 @@\n+        if (debug != null) {\n+            String keystorePath = SharedSecrets\n+                    .getJavaIOFileInputStreamAccess()\n+                    .getPath(stream);\n+            if (keystorePath != null) {\n+                storeName = Path.of(keystorePath).getFileName().toString();\n+                debug.println(\"PKCS12KeyStore: loading \\\"\"\n+                    + ((storeName != null) ? storeName : \"\")\n+                    + \"\\\" keystore\");\n+            }\n+        }\n@@ -2226,3 +2239,5 @@\n-            debug.println(\"PKCS12KeyStore load: private key count: \" +\n-                    privateKeyCount + \". secret key count: \" + secretKeyCount +\n-                    \". certificate count: \" + certificateCount);\n+            debug.println(\"PKCS12KeyStore loaded: \\\"\"\n+                    + ((storeName != null) ? storeName : \"\")\n+                    + \"\\\" keystore with private key count: \" + privateKeyCount\n+                    + \". secret key count: \" + secretKeyCount\n+                    + \". certificate count: \" + certificateCount);\n@@ -2230,1 +2245,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.nio.file.Path;\n@@ -43,0 +44,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -661,0 +663,1 @@\n+            String storeName = null;\n@@ -672,0 +675,12 @@\n+            if (debug != null) {\n+                String keystorePath = SharedSecrets\n+                                .getJavaIOFileInputStreamAccess()\n+                                .getPath(stream);\n+                if (keystorePath != null) {\n+                    storeName = Path.of(keystorePath).getFileName()\n+                                .toString();\n+                    debug.println(\"JavaKeyStore: loading \\\"\"\n+                        + ((storeName != null) ? storeName : \"\")\n+                        + \"\\\" keystore\");\n+                }\n+            }\n@@ -789,2 +804,4 @@\n-                debug.println(\"JavaKeyStore load: private key count: \" +\n-                    privateKeyCount + \". trusted key count: \" + trustedKeyCount);\n+                debug.println(\"JavaKeyStore loaded: \\\"\"\n+                    + ((storeName != null) ? storeName : \"\")\n+                    + \"\\\" keystore with private key count: \" + privateKeyCount\n+                    + \". trusted key count: \" + trustedKeyCount);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/JavaKeyStore.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -382,0 +382,4 @@\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                        SSLLogger.fine(\n+                                \"Loaded keystore: \" + descriptor.storeName);\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustStoreManager.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -39,0 +40,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -287,1 +289,8 @@\n-                debug.println(\"Loaded a keystore in \" + type + \" format\");\n+                String keystorePath = SharedSecrets\n+                        .getJavaIOFileInputStreamAccess()\n+                        .getPath(stream);\n+                String storeName = (keystorePath != null)\n+                        ? Path.of(keystorePath).getFileName().toString()\n+                        : \"\";\n+                debug.println(\"Loaded \\\"\" + storeName + \"\\\" keystore in \" +\n+                        type + \" format\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyStoreDelegator.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8329251\n+ * @library \/test\/lib\n+ * @summary Validates the customized keystore\/ truststore paths\n+ * in the debug logs\n+ * @run main\/othervm LogKeyStorePathVerifier launch\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.security.KeyStore;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n+\n+public class LogKeyStorePathVerifier {\n+\n+    static String pathToStores = \"..\/..\/..\/javax\/net\/ssl\/etc\/\";\n+    static String keyStoreFile = \"keystore\";\n+    static String passwd = \"passphrase\";\n+    static String defaultCACertsName = \"cacerts\";\n+    static String fisKeyStoreName = \"FileInputStreamKeyStore\";\n+    static String bisKeyStoreName = \"BufferedInputStreamKeyStore\";\n+    static String bbisKeyStoreName = \"BufferedBufferedInputStreamKeyStore\";\n+    \/\/ JDK-8344924: Introduced a new behavior where default CA certificates\n+    \/\/ are loaded even when a custom keystore is specified during the first\n+    \/\/ TrustManagerFactory.init() call.\n+    \/\/ This test validates the behavior by first loading and verifying the\n+    \/\/ default certificates in the initial instance, followed by checking the\n+    \/\/ custom keystore in subsequent initialization.\n+    static String defaultCACerts\n+            = System.getProperty(\"java.home\") + File.separator + \"lib\"\n+            + File.separator + \"security\" + File.separator + defaultCACertsName;\n+    static Path keyStorePath = Path.of (System.getProperty(\"test.src\", \".\"),\n+            pathToStores, keyStoreFile);\n+\n+    static void initContext() throws Exception {\n+        Files.copy(keyStorePath, Path.of(fisKeyStoreName),\n+                            StandardCopyOption.REPLACE_EXISTING);\n+        Files.copy(keyStorePath, Path.of(bisKeyStoreName),\n+                            StandardCopyOption.REPLACE_EXISTING);\n+        Files.copy(keyStorePath, Path.of(bbisKeyStoreName),\n+                            StandardCopyOption.REPLACE_EXISTING);\n+        try (FileInputStream dfis = new FileInputStream(defaultCACerts);\n+            FileInputStream fis = new FileInputStream(fisKeyStoreName);\n+            BufferedInputStream bis = new BufferedInputStream(\n+            new FileInputStream(bisKeyStoreName));\n+            BufferedInputStream bbis = new BufferedInputStream(\n+            new BufferedInputStream(new FileInputStream(bbisKeyStoreName)))) {\n+                loadAndTestKeyStore(dfis);\n+                loadAndTestKeyStore(fis);\n+                loadAndTestKeyStore(bis);\n+                \/\/ Test nested wrappers on FIStream with BIStream\n+                loadAndTestKeyStore(bbis);\n+        }\n+    }\n+\n+    static void loadAndTestKeyStore(InputStream is) throws Exception {\n+        System.err.println(\"Testing with InputStream: \" +\n+                                        is.getClass().getName());\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        ks.load(is, passwd.toCharArray());\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\n+                KeyManagerFactory.getDefaultAlgorithm());\n+        kmf.init(ks, passwd.toCharArray());\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\n+                TrustManagerFactory.getDefaultAlgorithm());\n+        tmf.init(ks);\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        if (args.length == 0) {\n+            \/\/ Being run via ProcessBuilder, call method to\n+            \/\/ generated debug output\n+            initContext();\n+        } else {\n+            var output = ProcessTools.executeTestJava(\n+                    \"-Djavax.net.debug=trustmanager\",\n+                    \"-Djava.security.debug=pkcs12\",\n+                    \"-Dtest.src=\" + System.getProperty(\"test.src\", \".\"),\n+                    \"LogKeyStorePathVerifier\");\n+            \/\/ Check for the presence of new message and verify\n+            \/\/ the keystore name in debug logs\n+            output.shouldContain(\"PKCS12KeyStore: loading \"\n+                                + \"\\\"\" + defaultCACertsName +\"\\\" keystore\")\n+                .shouldContain(\"PKCS12KeyStore: loading \"\n+                                + \"\\\"\" + fisKeyStoreName +\"\\\" keystore\")\n+                .shouldContain(\"Initializing with the keystore: \\\"\"\n+                                + fisKeyStoreName + \"\\\"\"\n+                                + \" in pkcs12 format from SunJSSE provider\")\n+                .shouldContain(\"PKCS12KeyStore: loading \"\n+                                + \"\\\"\" + bisKeyStoreName +\"\\\" keystore\")\n+                .shouldContain(\"Initializing with the keystore: \\\"\"\n+                                + bisKeyStoreName + \"\\\"\"\n+                                + \" in pkcs12 format from SunJSSE provider\")\n+                .shouldContain(\"PKCS12KeyStore: loading \"\n+                                + \"\\\"\" + bbisKeyStoreName +\"\\\" keystore\")\n+                .shouldContain(\"Initializing with the keystore: \\\"\"\n+                                + bbisKeyStoreName +\"\\\"\"\n+                                + \" in pkcs12 format from SunJSSE provider\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/KeyStore\/LogKeyStorePathVerifier.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}