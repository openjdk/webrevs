{"files":[{"patch":"@@ -32,1 +32,1 @@\n-import java.util.*;\n+import java.nio.file.Paths;\n@@ -47,0 +47,1 @@\n+import java.util.*;\n@@ -706,1 +707,1 @@\n-                                .getJavaIOInputStreamAccess()\n+                                .getJavaIOFileInputStreamAccess()\n@@ -709,1 +710,1 @@\n-                    debug.println(\"JceKeyStore: Loading \\\"\" + keystorePath.substring(\n+                    debug.println(\"JceKeyStore: loading \\\"\" + keystorePath.substring(\n@@ -881,6 +882,5 @@\n-                    if (keystorePath != null) {\n-                        debug.println(\"JceKeyStore: Loaded \\\"\" + keystorePath.substring(\n-                            keystorePath.lastIndexOf(File.separator) + 1)\n-                            + \"\\\" keystore\");\n-                    }\n-                    debug.println(\"JceKeyStore load: private key count: \" +\n+                    String storeName = (keystorePath != null)\n+                            ? Paths.get(keystorePath).getFileName().toString()\n+                            : null;\n+                    debug.println(\"JceKeyStore loaded: \\\"\" + storeName +\n+                        \"\\\" keystore with private key count: \" +\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/JceKeyStore.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import jdk.internal.util.ArraysSupport;\n-import jdk.internal.event.FileReadEvent;\n-import sun.nio.ch.FileChannelImpl;\n@@ -36,0 +33,4 @@\n+import jdk.internal.event.FileReadEvent;\n+import jdk.internal.util.ArraysSupport;\n+import sun.nio.ch.FileChannelImpl;\n+\n@@ -86,1 +87,0 @@\n-    \/\/ Set up JavaIOFileInputStreamAccess in SharedSecrets\n@@ -89,3 +89,4 @@\n-                new JavaIOFileInputStreamAccess() {\n-                    public String getPath(FileInputStream fis) {\n-                        return fis.path;\n+            new JavaIOFileInputStreamAccess() {\n+                public String getPath(InputStream is) {\n+                    if (is == null) {\n+                        return null; \/\/ Handle null InputStream\n@@ -93,0 +94,12 @@\n+                    return switch (is) {\n+                        case FileInputStream fis -> fis.path;\n+                        case FilterInputStream filter -> {\n+                            InputStream inner = filter.in;\n+                            if (inner instanceof FileInputStream fis) {\n+                                yield fis.path;\n+                            } else {\n+                                yield getPath(inner);\n+                            }\n+                        }\n+                        default -> null;\n+                    };\n@@ -94,0 +107,1 @@\n+            }\n@@ -97,0 +111,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import jdk.internal.access.JavaIOInputStreamAccess;\n-import jdk.internal.access.SharedSecrets;\n-\n@@ -61,23 +58,0 @@\n-    \/\/ Set up JavaIOInputStreamAccess in SharedSecrets\n-    static {\n-        SharedSecrets.setJavaIOInputStreamAccess(\n-            new JavaIOInputStreamAccess() {\n-                public String getPath(InputStream is) {\n-                    if (is instanceof FileInputStream) {\n-                        return SharedSecrets\n-                                .getJavaIOFileInputStreamAccess()\n-                                .getPath((FileInputStream) is);\n-                    } else if (is instanceof FilterInputStream fis) {\n-                        if ((fis.in != null) &&\n-                                (fis.in instanceof FileInputStream)) {\n-                            return SharedSecrets\n-                                    .getJavaIOFileInputStreamAccess()\n-                                    .getPath((FileInputStream) (fis.in));\n-                        }\n-                    }\n-                    return null;\n-                }\n-            }\n-        );\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-    private static String keystorePath;\n+    private static String keystorePath = null;\n@@ -1515,3 +1515,5 @@\n-        keystorePath = SharedSecrets\n-                .getJavaIOInputStreamAccess()\n-                .getPath(stream);\n+        if (kdebug != null) {\n+            keystorePath = SharedSecrets\n+                    .getJavaIOFileInputStreamAccess()\n+                    .getPath(stream);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-                SSLLogger.fine(provider.getName() + \": Loaded \\\"\" + keystorePath\n+                SSLLogger.fine(provider.getName() + \": using \\\"\" + keystorePath\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/TrustManagerFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.io.FileInputStream;\n+import java.io.InputStream;\n@@ -30,1 +30,1 @@\n-    public String getPath(FileInputStream fis);\n+    public String getPath(InputStream fis);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOFileInputStreamAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.access;\n-\n-import java.io.InputStream;\n-\n-public interface JavaIOInputStreamAccess {\n-    public String getPath(InputStream is);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOInputStreamAccess.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -42,1 +42,0 @@\n-import java.io.InputStream;\n@@ -75,1 +74,0 @@\n-    private static JavaIOInputStreamAccess javaIOInputStreamAccess;\n@@ -334,12 +332,0 @@\n-    public static void setJavaIOInputStreamAccess(JavaIOInputStreamAccess jiois) {\n-        javaIOInputStreamAccess = jiois;\n-    }\n-    public static JavaIOInputStreamAccess getJavaIOInputStreamAccess() {\n-        var access = javaIOInputStreamAccess;\n-        if (access == null) {\n-            ensureClassInitialized(InputStream.class);\n-            access = javaIOInputStreamAccess;\n-        }\n-        return access;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.Paths;\n@@ -1968,1 +1969,1 @@\n-                    .getJavaIOInputStreamAccess()\n+                    .getJavaIOFileInputStreamAccess()\n@@ -1971,1 +1972,1 @@\n-                debug.println(\"PKCS12KeyStore: Loading \\\"\" + keystorePath.substring(\n+                debug.println(\"PKCS12KeyStore: loading \\\"\" + keystorePath.substring(\n@@ -2237,7 +2238,6 @@\n-            if (keystorePath != null) {\n-                    debug.println(\"PKCS12KeyStore: Loaded \\\"\" + keystorePath.substring(\n-                        keystorePath.lastIndexOf(File.separator) + 1)\n-                        + \"\\\" keystore\");\n-            }\n-            debug.println(\"PKCS12KeyStore load: private key count: \" +\n-                    privateKeyCount + \". secret key count: \" + secretKeyCount +\n+            String storeName = (keystorePath != null)\n+                    ? Paths.get(keystorePath).getFileName().toString()\n+                    : null;\n+            debug.println(\"PKCS12KeyStore loaded: \\\"\" + storeName +\n+                    \"\\\" keystore with private key count: \" + privateKeyCount +\n+                    \". secret key count: \" + secretKeyCount +\n@@ -2246,1 +2246,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.Paths;\n@@ -676,1 +677,1 @@\n-                                .getJavaIOInputStreamAccess()\n+                                .getJavaIOFileInputStreamAccess()\n@@ -679,1 +680,1 @@\n-                    debug.println(\"JavaKeyStore: Loading \\\"\" + keystorePath.substring(\n+                    debug.println(\"JavaKeyStore: loading \\\"\" + keystorePath.substring(\n@@ -801,7 +802,6 @@\n-                if (keystorePath != null) {\n-                        debug.println(\"JavaKeyStore: Loaded \\\"\" + keystorePath.substring(\n-                            keystorePath.lastIndexOf(File.separator) + 1)\n-                            + \"\\\" keystore\");\n-                }\n-                debug.println(\"JavaKeyStore load: private key count: \" +\n-                    privateKeyCount + \". trusted key count: \" + trustedKeyCount);\n+                String storeName = (keystorePath != null)\n+                        ? Paths.get(keystorePath).getFileName().toString()\n+                        : null;\n+                debug.println(\"JavaKeyStore loaded: \\\"\" + storeName +\n+                    \"\\\" keystore with private key count: \" + privateKeyCount +\n+                    \". trusted key count: \" + trustedKeyCount);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/JavaKeyStore.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.file.Paths;\n@@ -39,0 +40,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -287,1 +289,8 @@\n-                debug.println(\"Loaded a keystore in \" + type + \" format\");\n+                String keystorePath = SharedSecrets\n+                        .getJavaIOFileInputStreamAccess()\n+                        .getPath(stream);\n+                String storeName = (keystorePath != null)\n+                        ? Paths.get(keystorePath).getFileName().toString()\n+                        : null;\n+                debug.println(\"Loaded \\\"\" + storeName + \"\\\" keystore in \" +\n+                        type + \" format\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyStoreDelegator.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n- * @run main\/othervm LogKeyStorePathVerifier\n-\n+ * @run main\/othervm LogKeyStorePathVerifier launch\n@@ -40,0 +39,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n@@ -51,0 +54,4 @@\n+    static String fisKeyStoreName = \"FileInputStreamKeyStore\";\n+    static String bisKeyStoreName = \"BufferedInputStreamKeyStore\";\n+    static Path keyStorePath = Path.of (System.getProperty(\"test.src\", \".\"),\n+            pathToStores, keyStoreFile);\n@@ -52,12 +59,14 @@\n-    static void initContextWithFIS() throws Exception {\n-        String keyFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-        FileInputStream fis = new FileInputStream(keyFilename);\n-        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n-        ks.load(fis, passwd.toCharArray());\n-        KeyManagerFactory kmf =\n-                KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-        kmf.init(ks, passwd.toCharArray());\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n-        tmf.init(ks);\n+    static void initContext() throws Exception {\n+        Files.copy(keyStorePath, Path.of(fisKeyStoreName),\n+                            StandardCopyOption.REPLACE_EXISTING);\n+        Files.copy(keyStorePath, Path.of(bisKeyStoreName),\n+                            StandardCopyOption.REPLACE_EXISTING);\n+        try (FileInputStream fis = new FileInputStream(fisKeyStoreName);\n+             BufferedInputStream bis = new BufferedInputStream(\n+             new FileInputStream(bisKeyStoreName));\n+             BufferedInputStream bbis = new BufferedInputStream(bis)) {\n+            loadAndTestKeyStore(fis);\n+            loadAndTestKeyStore(bis);\n+            \/\/ Test nested wrappers on FileInputStream with BufferedInputStream\n+            loadAndTestKeyStore(bbis);\n+        }\n@@ -66,5 +75,3 @@\n-    static void initContextWithBIS() throws Exception {\n-        String keyFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-        FileInputStream fis = new FileInputStream(keyFilename);\n+    static void loadAndTestKeyStore(InputStream is) throws Exception {\n+        System.err.println(\"Testing with InputStream: \" +\n+                                        is.getClass().getName());\n@@ -72,4 +79,4 @@\n-        InputStream bufferedStream = new BufferedInputStream(fis);\n-        ks.load(bufferedStream, passwd.toCharArray());\n-        KeyManagerFactory kmf =\n-                KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+        ks.load(is, passwd.toCharArray());\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\n+                KeyManagerFactory.getDefaultAlgorithm());\n@@ -77,1 +84,2 @@\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\n+                TrustManagerFactory.getDefaultAlgorithm());\n@@ -82,28 +90,20 @@\n-        System.setProperty(\"test.java.opts\",\n-                    \"-Dtest.src=\" + System.getProperty(\"test.src\") +\n-                            \" -Djavax.net.debug=trustmanager\");\n-\n-        System.out.println(\"test.java.opts: \" +\n-                System.getProperty(\"test.java.opts\"));\n-        try {\n-            \/\/initialize the KeyStore with FIS\n-            initContextWithFIS();\n-\n-            ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n-                    Utils.addTestJavaOpts(\"LogKeyStorePathVerifier\"));\n-            OutputAnalyzer output = ProcessTools.executeProcess(pb);\n-            \/\/ Check for the presence of new message and verify the\n-            \/\/ keystore name in debug logs\n-            output.shouldContain(\"Loaded \\\"keystore\\\" keystore in pkcs12 format\");\n-\n-            \/\/initialize the KeyStore with BIS\n-            initContextWithBIS();\n-\n-            ProcessBuilder pb1 = ProcessTools.createTestJavaProcessBuilder(\n-                    Utils.addTestJavaOpts(\"LogKeyStorePathVerifier\"));\n-            OutputAnalyzer output1 = ProcessTools.executeProcess(pb1);\n-            \/\/ Check for the presence of new message and verify the\n-            \/\/ keystore name in debug logs\n-            output1.shouldContain(\"Loaded \\\"keystore\\\" keystore in pkcs12 format\");\n-        } catch (Exception e) {\n-            throw e;\n+        if (args.length == 0) {\n+            \/\/ Being run via ProcessBuilder, call method to\n+            \/\/ generated debug output\n+            initContext();\n+        } else {\n+            var output = ProcessTools.executeTestJava(\n+                    \"-Djavax.net.debug=trustmanager\",\n+                    \"-Djava.security.debug=keystore,pkcs12\",\n+                    \"-Dtest.src=\" + System.getProperty(\"test.src\", \".\"),\n+                    \"LogKeyStorePathVerifier\");\n+            \/\/ Check for the presence of new message and verify\n+            \/\/ the keystore name in debug logs\n+            output.shouldContain(\"PKCS12KeyStore: loading \" +\n+                                    \"\\\"FileInputStreamKeyStore\\\" keystore\")\n+                .shouldContain(\"SunJSSE: using \\\"FileInputStreamKeyStore\\\" \" +\n+                                    \"keystore in pkcs12 format\")\n+                .shouldContain(\"PKCS12KeyStore: loading \" +\n+                                    \"\\\"BufferedInputStreamKeyStore\\\" keystore\")\n+                .shouldContain(\"SunJSSE: using \\\"BufferedInputStreamKeyStore\\\" \" +\n+                                    \"keystore in pkcs12 format\");\n@@ -111,1 +111,0 @@\n-        return;\n","filename":"test\/jdk\/java\/security\/KeyStore\/LogKeyStorePathVerifier.java","additions":52,"deletions":53,"binary":false,"changes":105,"status":"modified"}]}