{"files":[{"patch":"@@ -34,0 +34,2 @@\n+import jdk.internal.access.JavaIOFileInputStreamAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -84,0 +86,11 @@\n+    \/\/ Set up JavaIOFileInputStreamAccess in SharedSecrets\n+    static {\n+        SharedSecrets.setJavaIOFileInputStreamAccess(\n+                new JavaIOFileInputStreamAccess() {\n+                    public String getPath(FileInputStream fis) {\n+                        return fis.path;\n+                    }\n+                }\n+        );\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.access;\n+\n+import java.io.FileInputStream;\n+\n+public interface JavaIOFileInputStreamAccess {\n+    public String getPath(FileInputStream fis);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOFileInputStreamAccess.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -40,0 +40,1 @@\n+import java.io.FileInputStream;\n@@ -71,0 +72,1 @@\n+    private static JavaIOFileInputStreamAccess javaIOFileInputStreamAccess;\n@@ -315,0 +317,13 @@\n+    public static void setJavaIOFileInputStreamAccess(JavaIOFileInputStreamAccess jiofis) {\n+        javaIOFileInputStreamAccess = jiofis;\n+    }\n+\n+    public static JavaIOFileInputStreamAccess getJavaIOFileInputStreamAccess() {\n+        var access = javaIOFileInputStreamAccess;\n+        if (access == null) {\n+            ensureClassInitialized(FileInputStream.class);\n+            access = javaIOFileInputStreamAccess;\n+        }\n+        return access;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.io.File;\n+import java.io.FileInputStream;\n@@ -39,0 +41,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -287,0 +291,11 @@\n+                if (stream instanceof FileInputStream) {\n+                    String keystorePath = SharedSecrets\n+                                    .getJavaIOFileInputStreamAccess()\n+                                    .getPath((FileInputStream) stream);\n+                    if (keystorePath != null) {\n+                        debug.println(\"Loaded \\\"\" + keystorePath.substring(\n+                            keystorePath.lastIndexOf(File.separator) + 1)\n+                            + \"\\\" keystore in \" + type + \" format\");\n+                        return;\n+                    }\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyStoreDelegator.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8329251\n+ * @library \/test\/lib\n+ * @summary Validates the customized keystore\/ truststore paths\n+ * in the debug logs\n+ * @run main\/othervm LogKeyStorePathVerifier\n+\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n+\n+public class LogKeyStorePathVerifier {\n+\n+    static String pathToStores = \"..\/..\/..\/javax\/net\/ssl\/etc\/\";\n+    static String keyStoreFile = \"keystore\";\n+    static String passwd = \"passphrase\";\n+\n+    static void initContext() throws Exception {\n+        String keyFilename =\n+            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores +\n+                \"\/\" + keyStoreFile;\n+        FileInputStream fis = new FileInputStream(keyFilename);\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        ks.load(fis, passwd.toCharArray());\n+        KeyManagerFactory kmf =\n+                KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+        kmf.init(ks, passwd.toCharArray());\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        tmf.init(ks);\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        System.setProperty(\"test.java.opts\",\n+                    \"-Dtest.src=\" + System.getProperty(\"test.src\") +\n+                            \" -Djava.security.debug=keystore\");\n+\n+        System.out.println(\"test.java.opts: \" +\n+                System.getProperty(\"test.java.opts\"));\n+        try {\n+            \/\/initialize the KeyStore\n+            initContext();\n+\n+            ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                    Utils.addTestJavaOpts(\"LogKeyStorePathVerifier\"));\n+            OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+            \/\/ Check for the presence of new message and verify the\n+            \/\/ keystore name in debug logs\n+            output.shouldContain(\"Loaded \\\"keystore\\\" keystore in PKCS12 format\");\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+        return;\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/KeyStore\/LogKeyStorePathVerifier.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}