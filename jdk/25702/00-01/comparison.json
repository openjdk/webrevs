{"files":[{"patch":"@@ -26,1 +26,1 @@\n-#include \"asm\/macroAssembler.hpp\"\n+#include \"asm\/macroAssembler.inline.hpp\"\n@@ -31,1 +31,0 @@\n-#include \"nativeInst_aarch64.hpp\"\n@@ -102,5 +101,1 @@\n-  if (MacroAssembler::codestub_branch_needs_far_jump()) {\n-    NativeGeneralJump::insert_unconditional(method_holder->next_instruction_address(), entry);\n-  } else {\n-    NativeJump::insert(method_holder->next_instruction_address(), entry);\n-  }\n+  MacroAssembler::pd_patch_instruction(method_holder->next_instruction_address(), entry);\n","filename":"src\/hotspot\/cpu\/aarch64\/compiledIC_aarch64.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -362,7 +362,0 @@\n-void NativeJump::insert(address code_pos, address entry) {\n-  CodeBuffer cb(code_pos, instruction_size);\n-  MacroAssembler a(&cb);\n-\n-  a.b(entry);\n-}\n-\n@@ -396,12 +389,0 @@\n-void NativeGeneralJump::insert_unconditional(address code_pos, address entry) {\n-  NativeGeneralJump* n_jump = (NativeGeneralJump*)code_pos;\n-\n-  CodeBuffer cb(code_pos, instruction_size);\n-  MacroAssembler a(&cb);\n-\n-  a.movptr(rscratch1, (uintptr_t)entry);\n-  a.br(rscratch1);\n-\n-  ICache::invalidate_range(code_pos, instruction_size);\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -386,1 +386,0 @@\n-  static void insert_unconditional(address code_pos, address entry);\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}