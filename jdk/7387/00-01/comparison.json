{"files":[{"patch":"@@ -77,3 +77,2 @@\n- * <p>This class and its iterator implement all of the\n- * <em>optional<\/em> methods of the {@link Collection} and {@link\n- * Iterator} interfaces.\n+ * <p>This class and its iterator implement all of the <em>optional<\/em> methods of the\n+ * {@link Collection}, {@link SequencedCollection}, and {@link Iterator} interfaces.\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayDeque.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -431,0 +431,23 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public E getFirst() {\n+        if (size == 0) {\n+            throw new NoSuchElementException();\n+        } else {\n+            return elementData(0);\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public E getLast() {\n+        int sz = size;\n+        if (sz == 0) {\n+            throw new NoSuchElementException();\n+        } else {\n+            return elementData(sz - 1);\n+        }\n+    }\n+\n@@ -494,0 +517,14 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public void addFirst(E element) {\n+        add(0, element);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public void addLast(E element) {\n+        add(element);\n+    }\n+\n@@ -513,0 +550,30 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public E removeFirst() {\n+        if (size == 0) {\n+            throw new NoSuchElementException();\n+        } else {\n+            Object[] es = elementData;\n+            @SuppressWarnings(\"unchecked\") E oldValue = (E) es[0];\n+            fastRemove(es, 0);\n+            return oldValue;\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public E removeLast() {\n+        int sz = size;\n+        if (sz == 0) {\n+            throw new NoSuchElementException();\n+        } else {\n+            Object[] es = elementData;\n+            sz--;\n+            @SuppressWarnings(\"unchecked\") E oldValue = (E) es[sz];\n+            fastRemove(es, sz);\n+            return oldValue;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayList.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -124,2 +124,3 @@\n- * {@link NavigableSet#subSet NavigableSet.subSet}, or\n- * {@link Map#entrySet Map.entrySet}.\n+ * {@link NavigableSet#subSet NavigableSet.subSet},\n+ * {@link Map#entrySet Map.entrySet}, or\n+ * {@link SequencedCollection#reversed SequencedCollection.reversed}.\n@@ -205,1 +206,2 @@\n- * collections. In particular, many <a href=\"#view\">view collections<\/a> are not serializable.\n+ * collections. In particular, many <a href=\"#view\">view collections<\/a> are not serializable,\n+ * even if the original collection is serializable.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collection.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-     * {@link List#reversed List::reversed} method.\n+     * {@link List#reversed List.reversed} method.\n@@ -380,0 +380,1 @@\n+     * @see    List#reversed List.reversed\n@@ -5531,0 +5532,8 @@\n+     * @apiNote\n+     * This method returns a {@code Comparator} that is suitable for sorting\n+     * elements in reverse order. To obtain a reverse-ordered <i>view<\/i> of a\n+     * sequenced collection, use the {@link SequencedCollection#reversed\n+     * SequencedCollection.reversed} method. Or, to obtain a reverse-ordered\n+     * <i>view<\/i> of a sequenced map, use the {@link SequencedMap#reversed\n+     * SequencedMap.reversed} method.\n+     *\n@@ -5577,0 +5586,8 @@\n+     * @apiNote\n+     * This method returns a {@code Comparator} that is suitable for sorting\n+     * elements in reverse order. To obtain a reverse-ordered <i>view<\/i> of a\n+     * sequenced collection, use the {@link SequencedCollection#reversed\n+     * SequencedCollection.reversed} method. Or, to obtain a reverse-ordered\n+     * <i>view<\/i> of a sequenced map, use the {@link SequencedMap#reversed\n+     * SequencedMap.reversed} method.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n- * (<i>insertion-order<\/i>).  Note that insertion order is not affected\n- * if a key is <i>re-inserted<\/i> into the map.  (A key {@code k} is\n- * reinserted into a map {@code m} if {@code m.put(k, v)} is invoked when\n+ * (<i>insertion-order<\/i>).  Note that encounter order is not affected\n+ * if a key is <i>re-inserted<\/i> into the map with the {@code put} method. (A key\n+ * {@code k} is reinserted into a map {@code m} if {@code m.put(k, v)} is invoked when\n@@ -44,1 +44,1 @@\n- * the invocation.) Ordering of existing keys can be changed through use of\n+ * the invocation.) The encounter order of existing keys can be changed by using\n@@ -86,2 +86,2 @@\n- * <p>This class provides all of the optional {@code Map} operations, and\n- * permits null elements.  Like {@code HashMap}, it provides constant-time\n+ * <p>This class provides all of the optional {@code Map} and {@code SequencedMap} operations,\n+ * and it permits null elements.  Like {@code HashMap}, it provides constant-time\n@@ -378,0 +378,4 @@\n+     * <p>\n+     * If this map already contains a mapping for this key, the mapping is relocated if necessary\n+     * so that it is first in encounter order.\n+     *\n@@ -391,0 +395,4 @@\n+     * <p>\n+     * If this map already contains a mapping for this key, the mapping is relocated if necessary\n+     * so that it is last in encounter order.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -34,6 +34,6 @@\n- * (<i>insertion-order<\/i>).  Note that insertion order is <i>not<\/i> affected\n- * if an element is <i>re-inserted<\/i> into the set.  (An element {@code e}\n- * is reinserted into a set {@code s} if {@code s.add(e)} is invoked when\n- * {@code s.contains(e)} would return {@code true} immediately prior to the\n- * invocation.) Ordering of elements already in the set can be changed through\n- * use of the {@link #addFirst addFirst} and {@link #addLast addLast} methods.\n+ * (<i>insertion-order<\/i>). Note that encounter order is <i>not<\/i> affected\n+ * if an element is <i>re-inserted<\/i> into the set with the {@code add} method.\n+ * (An element {@code e} is reinserted into a set {@code s} if {@code s.add(e)} is\n+ * invoked when {@code s.contains(e)} would return {@code true} immediately prior to\n+ * the invocation.) The encounter order of elements already in the set can be changed\n+ * by using the {@link #addFirst addFirst} and {@link #addLast addLast} methods.\n@@ -57,2 +57,2 @@\n- * <p>This class provides all of the optional {@code Set} operations, and\n- * permits null elements.  Like {@code HashSet}, it provides constant-time\n+ * <p>This class provides all of the optional {@link Set} and {@link SequencedSet}\n+ * operations, and it permits null elements. Like {@code HashSet}, it provides constant-time\n@@ -232,0 +232,4 @@\n+     * <p>\n+     * If this set already contains the element, it is relocated if necessary so that it is\n+     * first in encounter order.\n+     *\n@@ -240,0 +244,4 @@\n+     * <p>\n+     * If this set already contains the element, it is relocated if necessary so that it is\n+     * last in encounter order.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n- * A collection's reverse-ordered view is generally not serializable, even if the original\n- * collection is serializable.\n- * <p>\n@@ -72,3 +69,3 @@\n- * This interface does not impose new requirements on the {@code equals} and {@code hashCode}\n- * methods, because requirements imposed by sub-interfaces such as {@link List} and\n- * {@link SequencedSet} would be in conflict. See the specifications for\n+ * This interface does not impose any requirements on the {@code equals} and {@code hashCode}\n+ * methods, because requirements imposed by sub-interfaces {@link List} and {@link SequencedSet}\n+ * (which inherits requirements from {@link Set}) would be in conflict. See the specifications for\n@@ -77,9 +74,0 @@\n- * <p>\n- * The positioned {@code add}, {@code get}, and {@code remove} methods were promoted from\n- * existing methods of the {@link Deque} interface.\n- * <p>\n- * Overrides of the {@link #reversed reversed} method are specified on several subtypes to\n- * have a covariant return type that is that subtype. For example, the\n- * {@link List#reversed List.reversed} method returns a {@code List} instead of a\n- * {@code SequencedCollection}. This allows those subtypes to have the same repertoire\n- * of operations on the reverse-ordered view as on the original.\n","filename":"src\/java.base\/share\/classes\/java\/util\/SequencedCollection.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -224,4 +224,4 @@\n-     * Inserts this mapping into the map if it is not already present, or replaces the value\n-     * of a mapping if it is already present (optional operation).\n-     * After this operation completes normally, the given mapping will present in this map,\n-     * and it will be the first mapping in this map's encounter order.\n+     * Inserts the given mapping into the map if it is not already present, or replaces the\n+     * value of a mapping if it is already present (optional operation). After this operation\n+     * completes normally, the given mapping will be present in this map, and it will be the\n+     * first mapping in this map's encounter order.\n@@ -243,4 +243,4 @@\n-     * Inserts this mapping into the map if it is not already present, or replaces the value\n-     * of a mapping if it is already present (optional operation).\n-     * After this operation completes normally, the given mapping will present in this map,\n-     * and it will be the last mapping in this map's encounter order.\n+     * Inserts the given mapping into the map if it is not already present, or replaces the\n+     * value of a mapping if it is already present (optional operation). After this operation\n+     * completes normally, the given mapping will be present in this map, and it will be the\n+     * last mapping in this map's encounter order.\n@@ -333,1 +333,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/java.base\/share\/classes\/java\/util\/SequencedMap.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -102,0 +102,4 @@\n+ * <p>The {@link #putFirst putFirst} and {@link #putLast putLast} methods of this class\n+ * throw {@code UnsupportedOperationException}. The encounter order of mappings is determined\n+ * by the comparison method; therefore, explicit positioning is not supported.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/TreeMap.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,0 +76,4 @@\n+ * <p>The {@link #addFirst addFirst} and {@link #addLast addLast} methods of this class\n+ * throw {@code UnsupportedOperationException}. The encounter order of elements is determined\n+ * by the comparison method; therefore, explicit positioning is not supported.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/TreeSet.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}