{"files":[{"patch":"@@ -601,1 +601,1 @@\n-            int[] versions = JUZFA.getMetaInfVersions(this);\n+            int[] versions = JUZFA.getMetaInfVersions(this, name);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,17 +40,1 @@\n-import java.util.ArrayDeque;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Deque;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Objects;\n-import java.util.NoSuchElementException;\n-import java.util.Set;\n-import java.util.Spliterator;\n-import java.util.Spliterators;\n-import java.util.TreeSet;\n-import java.util.WeakHashMap;\n+import java.util.*;\n@@ -67,0 +51,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -1099,1 +1084,1 @@\n-    private int[] getMetaInfVersions() {\n+    private int[] getMetaInfVersions(String name) {\n@@ -1102,1 +1087,1 @@\n-            return res.zsrc.metaVersions;\n+            return res.zsrc.metaVersions.getOrDefault(name, Source.EMPTY_META_VERSIONS);\n@@ -1142,2 +1127,2 @@\n-                public int[] getMetaInfVersions(JarFile jar) {\n-                    return ((ZipFile)jar).getMetaInfVersions();\n+                public int[] getMetaInfVersions(JarFile jar, String name) {\n+                    return ((ZipFile)jar).getMetaInfVersions(name);\n@@ -1178,0 +1163,2 @@\n+        \/\/ \"META-INF\/versions\/\/\".length()\n+        private static final int META_INF_VERSIONS_LEN = 19;\n@@ -1195,1 +1182,1 @@\n-        private int[] metaVersions;          \/\/ list of unique versions found in META-INF\/versions\/\n+        private Map<String, int[]> metaVersions; \/\/ Set of versions found in META-INF\/versions\/, by entry name\n@@ -1577,1 +1564,1 @@\n-            metaVersions = EMPTY_META_VERSIONS;\n+            metaVersions = null;\n@@ -1759,2 +1746,3 @@\n-            \/\/ Set of all version numbers seen in META-INF\/versions\/\n-            Set<Integer> metaVersionsSet = null;\n+            \/\/ Map entry name to the set of versions seen in\n+            \/\/ META-INF\/versions\/{version}\/{name}\n+            Map<String, Set<Integer>> metaVersionsMap = null;\n@@ -1799,3 +1787,7 @@\n-                            if (metaVersionsSet == null)\n-                                metaVersionsSet = new TreeSet<>();\n-                            metaVersionsSet.add(version);\n+                            int versionPrefix = META_INF_VERSIONS_LEN + DecimalDigits.stringSize(version);\n+                            \/\/ Extract name from \"META-INF\/versions\/{version)\/{name}\n+                            String name = zipCoderForPos(pos).toString(cen, entryPos + versionPrefix, nlen - versionPrefix);\n+                            \/\/ Add version for name\n+                            if (metaVersionsMap == null)\n+                                metaVersionsMap = new HashMap<>();\n+                            metaVersionsMap.computeIfAbsent(name, n -> new HashSet<>()).add(version);\n@@ -1819,5 +1811,12 @@\n-            if (metaVersionsSet != null) {\n-                metaVersions = new int[metaVersionsSet.size()];\n-                int c = 0;\n-                for (Integer version : metaVersionsSet) {\n-                    metaVersions[c++] = version;\n+            if (metaVersionsMap != null) {\n+                metaVersions = new HashMap<>();\n+                for (var entry : metaVersionsMap.entrySet()) {\n+                    \/\/ Convert Set<Integer> to int[] for performance\n+                    int[] versions = new int[entry.getValue().size()];\n+                    int c = 0;\n+                    for (Integer i : entry.getValue()) {\n+                        versions[c++] = i.intValue();\n+                    }\n+                    \/\/ JarFile::getVersionedEntry expects sorted versions\n+                    Arrays.sort(versions);\n+                    metaVersions.put(entry.getKey(), versions);\n@@ -1826,1 +1825,1 @@\n-                metaVersions = EMPTY_META_VERSIONS;\n+                metaVersions = Map.of();\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":33,"deletions":34,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    public int[] getMetaInfVersions(JarFile zip);\n+    public int[] getMetaInfVersions(JarFile zip, String name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilZipFileAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.jar.Attributes;\n@@ -36,0 +37,1 @@\n+import java.util.jar.Manifest;\n@@ -37,0 +39,1 @@\n+import java.util.zip.ZipFile;\n@@ -74,0 +77,3 @@\n+    @Param({\"false\", \"true\"})\n+    private boolean mr;\n+\n@@ -94,0 +100,5 @@\n+        Manifest man = new Manifest();\n+        man.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n+        if (mr) {\n+            man.getMainAttributes().put(Attributes.Name.MULTI_RELEASE, \"true\");\n+        }\n@@ -95,1 +106,1 @@\n-             JarOutputStream jos = new JarOutputStream(fos)) {\n+             JarOutputStream jos = new JarOutputStream(fos, man)) {\n@@ -97,0 +108,6 @@\n+            if (mr) {\n+                \/\/ Add a few versioned entries\n+                jos.putNextEntry(new ZipEntry(\"META-INF\/versions\/9\/module-info.class\"));\n+                jos.putNextEntry(new ZipEntry(\"META-INF\/versions\/17\/foo\/library\/Library.class\"));\n+                jos.putNextEntry(new ZipEntry(\"META-INF\/versions\/21\/foo\/library\/Library.class\"));\n+            }\n@@ -110,1 +127,1 @@\n-        jarFile = new JarFile(tempFile);\n+        jarFile = new JarFile(tempFile, true, ZipFile.OPEN_READ, mr ? JarFile.runtimeVersion() : JarFile.baseVersion());\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/jar\/JarFileGetEntry.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}