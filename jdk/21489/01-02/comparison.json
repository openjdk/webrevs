{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.util.BitSet;\n@@ -600,19 +601,8 @@\n-        if (!name.startsWith(META_INF)) {\n-            int[] versions = JUZFA.getMetaInfVersions(this, name);\n-            if (BASE_VERSION_FEATURE < versionFeature && versions.length > 0) {\n-                \/\/ search for versioned entry\n-                for (int i = versions.length - 1; i >= 0; i--) {\n-                    int version = versions[i];\n-                    \/\/ skip versions above versionFeature\n-                    if (version > versionFeature) {\n-                        continue;\n-                    }\n-                    \/\/ skip versions below base version\n-                    if (version < BASE_VERSION_FEATURE) {\n-                        break;\n-                    }\n-                    JarFileEntry vje = (JarFileEntry)super.getEntry(\n-                            META_INF_VERSIONS + version + \"\/\" + name);\n-                    if (vje != null) {\n-                        return vje.withBasename(name);\n-                    }\n+        if (BASE_VERSION_FEATURE < versionFeature && !name.startsWith(META_INF)) {\n+            BitSet versions = JUZFA.getMetaInfVersions(this, name);\n+            int version = versions.previousSetBit(versionFeature);\n+            while (version >= BASE_VERSION_FEATURE) {\n+                JarFileEntry vje = (JarFileEntry)super.getEntry(\n+                        META_INF_VERSIONS + version + \"\/\" + name);\n+                if (vje != null) {\n+                    return vje.withBasename(name);\n@@ -620,0 +610,1 @@\n+                version = versions.previousSetBit(version - 1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1078,2 +1078,3 @@\n-     * Returns the versions for which there exists a non-directory\n-     * entry that begin with \"META-INF\/versions\/\" (case ignored).\n+     * Returns a BitSet where the set bits represents versions found for\n+     * the given entry name. For performance reasons, the name is looked\n+     * up only by hashcode, meaning the result is an over-approximation.\n@@ -1082,1 +1083,2 @@\n-     * Returns an empty array if no versioned entries exist.\n+     * Returns an empty BitSet if no versioned entries exist for this\n+     * name.\n@@ -1084,1 +1086,1 @@\n-    private int[] getMetaInfVersions(String name) {\n+    private BitSet getMetaInfVersions(String name) {\n@@ -1087,1 +1089,1 @@\n-            return res.zsrc.metaVersions.getOrDefault(name, Source.EMPTY_META_VERSIONS);\n+            return res.zsrc.metaVersions.getOrDefault(ZipCoder.hash(name), EMPTY_VERSIONS);\n@@ -1091,0 +1093,2 @@\n+    private static final BitSet EMPTY_VERSIONS = new BitSet();\n+\n@@ -1127,1 +1131,1 @@\n-                public int[] getMetaInfVersions(JarFile jar, String name) {\n+                public BitSet getMetaInfVersions(JarFile jar, String name) {\n@@ -1165,1 +1169,0 @@\n-        private static final int[] EMPTY_META_VERSIONS = new int[0];\n@@ -1182,1 +1185,1 @@\n-        private Map<String, int[]> metaVersions; \/\/ Set of versions found in META-INF\/versions\/, by entry name\n+        private Map<Integer, BitSet> metaVersions; \/\/ Versions found in META-INF\/versions\/, by entry name hash\n@@ -1746,3 +1749,0 @@\n-            \/\/ Map entry name to the set of versions seen in\n-            \/\/ META-INF\/versions\/{version}\/{name}\n-            Map<String, Set<Integer>> metaVersionsMap = null;\n@@ -1787,7 +1787,13 @@\n-                            int versionPrefix = META_INF_VERSIONS_LEN + DecimalDigits.stringSize(version);\n-                            \/\/ Extract name from \"META-INF\/versions\/{version)\/{name}\n-                            String name = zipCoderForPos(pos).toString(cen, entryPos + versionPrefix, nlen - versionPrefix);\n-                            \/\/ Add version for name\n-                            if (metaVersionsMap == null)\n-                                metaVersionsMap = new HashMap<>();\n-                            metaVersionsMap.computeIfAbsent(name, n -> new HashSet<>()).add(version);\n+                            try {\n+                                \/\/ Compute hash code of name from \"META-INF\/versions\/{version)\/{name}\n+                                int prefixLen = META_INF_VERSIONS_LEN + DecimalDigits.stringSize(version);\n+                                int hashCode = zipCoderForPos(pos).checkedHash(cen,\n+                                        entryPos + prefixLen,\n+                                        nlen - prefixLen);\n+                                \/\/ Register version for this hash code\n+                                if (metaVersions == null)\n+                                    metaVersions = new HashMap<>();\n+                                metaVersions.computeIfAbsent(hashCode, _ -> new BitSet()).set(version);\n+                            } catch (Exception e) {\n+                                throw new IllegalArgumentException(e);\n+                            }\n@@ -1811,14 +1817,1 @@\n-            if (metaVersionsMap != null) {\n-                metaVersions = new HashMap<>();\n-                for (var entry : metaVersionsMap.entrySet()) {\n-                    \/\/ Convert Set<Integer> to int[] for performance\n-                    int[] versions = new int[entry.getValue().size()];\n-                    int c = 0;\n-                    for (Integer i : entry.getValue()) {\n-                        versions[c++] = i.intValue();\n-                    }\n-                    \/\/ JarFile::getVersionedEntry expects sorted versions\n-                    Arrays.sort(versions);\n-                    metaVersions.put(entry.getKey(), versions);\n-                }\n-            } else {\n+            if (metaVersions == null) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":25,"deletions":32,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.BitSet;\n@@ -41,1 +42,1 @@\n-    public int[] getMetaInfVersions(JarFile zip, String name);\n+    public BitSet getMetaInfVersions(JarFile zip, String name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilZipFileAccess.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}