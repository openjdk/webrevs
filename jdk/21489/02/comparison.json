{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.util.BitSet;\n@@ -600,19 +601,8 @@\n-        if (!name.startsWith(META_INF)) {\n-            int[] versions = JUZFA.getMetaInfVersions(this);\n-            if (BASE_VERSION_FEATURE < versionFeature && versions.length > 0) {\n-                \/\/ search for versioned entry\n-                for (int i = versions.length - 1; i >= 0; i--) {\n-                    int version = versions[i];\n-                    \/\/ skip versions above versionFeature\n-                    if (version > versionFeature) {\n-                        continue;\n-                    }\n-                    \/\/ skip versions below base version\n-                    if (version < BASE_VERSION_FEATURE) {\n-                        break;\n-                    }\n-                    JarFileEntry vje = (JarFileEntry)super.getEntry(\n-                            META_INF_VERSIONS + version + \"\/\" + name);\n-                    if (vje != null) {\n-                        return vje.withBasename(name);\n-                    }\n+        if (BASE_VERSION_FEATURE < versionFeature && !name.startsWith(META_INF)) {\n+            BitSet versions = JUZFA.getMetaInfVersions(this, name);\n+            int version = versions.previousSetBit(versionFeature);\n+            while (version >= BASE_VERSION_FEATURE) {\n+                JarFileEntry vje = (JarFileEntry)super.getEntry(\n+                        META_INF_VERSIONS + version + \"\/\" + name);\n+                if (vje != null) {\n+                    return vje.withBasename(name);\n@@ -620,0 +610,1 @@\n+                version = versions.previousSetBit(version - 1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -40,17 +40,1 @@\n-import java.util.ArrayDeque;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Deque;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Objects;\n-import java.util.NoSuchElementException;\n-import java.util.Set;\n-import java.util.Spliterator;\n-import java.util.Spliterators;\n-import java.util.TreeSet;\n-import java.util.WeakHashMap;\n+import java.util.*;\n@@ -67,0 +51,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -1093,2 +1078,3 @@\n-     * Returns the versions for which there exists a non-directory\n-     * entry that begin with \"META-INF\/versions\/\" (case ignored).\n+     * Returns a BitSet where the set bits represents versions found for\n+     * the given entry name. For performance reasons, the name is looked\n+     * up only by hashcode, meaning the result is an over-approximation.\n@@ -1097,1 +1083,2 @@\n-     * Returns an empty array if no versioned entries exist.\n+     * Returns an empty BitSet if no versioned entries exist for this\n+     * name.\n@@ -1099,1 +1086,1 @@\n-    private int[] getMetaInfVersions() {\n+    private BitSet getMetaInfVersions(String name) {\n@@ -1102,1 +1089,1 @@\n-            return res.zsrc.metaVersions;\n+            return res.zsrc.metaVersions.getOrDefault(ZipCoder.hash(name), EMPTY_VERSIONS);\n@@ -1106,0 +1093,2 @@\n+    private static final BitSet EMPTY_VERSIONS = new BitSet();\n+\n@@ -1142,2 +1131,2 @@\n-                public int[] getMetaInfVersions(JarFile jar) {\n-                    return ((ZipFile)jar).getMetaInfVersions();\n+                public BitSet getMetaInfVersions(JarFile jar, String name) {\n+                    return ((ZipFile)jar).getMetaInfVersions(name);\n@@ -1178,1 +1167,2 @@\n-        private static final int[] EMPTY_META_VERSIONS = new int[0];\n+        \/\/ \"META-INF\/versions\/\/\".length()\n+        private static final int META_INF_VERSIONS_LEN = 19;\n@@ -1195,1 +1185,1 @@\n-        private int[] metaVersions;          \/\/ list of unique versions found in META-INF\/versions\/\n+        private Map<Integer, BitSet> metaVersions; \/\/ Versions found in META-INF\/versions\/, by entry name hash\n@@ -1577,1 +1567,1 @@\n-            metaVersions = EMPTY_META_VERSIONS;\n+            metaVersions = null;\n@@ -1759,2 +1749,0 @@\n-            \/\/ Set of all version numbers seen in META-INF\/versions\/\n-            Set<Integer> metaVersionsSet = null;\n@@ -1799,3 +1787,13 @@\n-                            if (metaVersionsSet == null)\n-                                metaVersionsSet = new TreeSet<>();\n-                            metaVersionsSet.add(version);\n+                            try {\n+                                \/\/ Compute hash code of name from \"META-INF\/versions\/{version)\/{name}\n+                                int prefixLen = META_INF_VERSIONS_LEN + DecimalDigits.stringSize(version);\n+                                int hashCode = zipCoderForPos(pos).checkedHash(cen,\n+                                        entryPos + prefixLen,\n+                                        nlen - prefixLen);\n+                                \/\/ Register version for this hash code\n+                                if (metaVersions == null)\n+                                    metaVersions = new HashMap<>();\n+                                metaVersions.computeIfAbsent(hashCode, _ -> new BitSet()).set(version);\n+                            } catch (Exception e) {\n+                                throw new IllegalArgumentException(e);\n+                            }\n@@ -1819,8 +1817,2 @@\n-            if (metaVersionsSet != null) {\n-                metaVersions = new int[metaVersionsSet.size()];\n-                int c = 0;\n-                for (Integer version : metaVersionsSet) {\n-                    metaVersions[c++] = version;\n-                }\n-            } else {\n-                metaVersions = EMPTY_META_VERSIONS;\n+            if (metaVersions == null) {\n+                metaVersions = Map.of();\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":32,"deletions":40,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.BitSet;\n@@ -41,1 +42,1 @@\n-    public int[] getMetaInfVersions(JarFile zip);\n+    public BitSet getMetaInfVersions(JarFile zip, String name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilZipFileAccess.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.jar.Attributes;\n@@ -36,0 +37,1 @@\n+import java.util.jar.Manifest;\n@@ -37,0 +39,1 @@\n+import java.util.zip.ZipFile;\n@@ -74,0 +77,3 @@\n+    @Param({\"false\", \"true\"})\n+    private boolean mr;\n+\n@@ -94,0 +100,5 @@\n+        Manifest man = new Manifest();\n+        man.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n+        if (mr) {\n+            man.getMainAttributes().put(Attributes.Name.MULTI_RELEASE, \"true\");\n+        }\n@@ -95,1 +106,1 @@\n-             JarOutputStream jos = new JarOutputStream(fos)) {\n+             JarOutputStream jos = new JarOutputStream(fos, man)) {\n@@ -97,0 +108,6 @@\n+            if (mr) {\n+                \/\/ Add a few versioned entries\n+                jos.putNextEntry(new ZipEntry(\"META-INF\/versions\/9\/module-info.class\"));\n+                jos.putNextEntry(new ZipEntry(\"META-INF\/versions\/17\/foo\/library\/Library.class\"));\n+                jos.putNextEntry(new ZipEntry(\"META-INF\/versions\/21\/foo\/library\/Library.class\"));\n+            }\n@@ -110,1 +127,1 @@\n-        jarFile = new JarFile(tempFile);\n+        jarFile = new JarFile(tempFile, true, ZipFile.OPEN_READ, mr ? JarFile.runtimeVersion() : JarFile.baseVersion());\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/jar\/JarFileGetEntry.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}