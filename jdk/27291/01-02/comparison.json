{"files":[{"patch":"@@ -71,1 +71,1 @@\n-  \/* The \/proc file System on AIX does not contain open system files\n+  \/* The \/proc file system on AIX does not contain open system files\n@@ -91,8 +91,6 @@\n-    \/* We rely on the current childProcess() functions semantic.\n-     * When the parent childProcess() function reaches the call of this function\n-     * only the FDs 0,1,2 and 3 are further used until the exec() or the exit(-1).\n-     * So we can close all FDs beginning with 4 (with fcntl(x, F_CLOSEM, 0); AIX\n-     * provides a special fcntl call to close all open FDs greater equal x in one call).\n-     * FD 3 is only used if the exec fails to report the reason to the JVM.\n-     * It should not survive a passing exec(). So we can set the close_on_exec\n-     * flag for FD 3. FDs 0,1 and 2 should survive the exec(), we do not change them.\n+    \/* On AIX, we cannot rely on proc file system iteration to find all open files. Since\n+     * iteration over all possible file descriptors, and subsequently closing them, can\n+     * take a very long time, we use a bulk close via `ioctl` that is available on AIX.\n+     * Since we hard-close, we need to make sure to keep the fail pipe file descriptor\n+     * alive until the exec call. Therefore we mark the fail pipe fd with close on exec\n+     * like the other OSes do, but then proceed to hard-close file descriptors beyond that.\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.c","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"}]}