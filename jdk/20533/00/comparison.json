{"files":[{"patch":"@@ -1820,1 +1820,2 @@\n-     *  arguments.\n+     *  arguments. Note that there can be multiple \"maximally specific\"\n+     *  methods (JLS 15.12.2.5); if so, this returns an AmbiguityError.\n@@ -2013,3 +2014,7 @@\n-                    if (sym.kind == MTH &&\n-                            sym.owner.kind == TYP &&\n-                            (sym.flags() & STATIC) == 0) {\n+                    \/\/ In order to check method found vs. static or early context,\n+                    \/\/ we need to try to resolve a possible AmbiguityError.\n+                    Symbol checkSym = sym.kind == AMBIGUOUS ?\n+                      ((AmbiguityError)sym.baseSymbol()).mergeAbstracts(env1.enclClass.sym.type) : sym;\n+                    if (checkSym.kind == MTH &&\n+                            checkSym.owner.kind == TYP &&\n+                            (checkSym.flags() & STATIC) == 0) {\n@@ -2017,1 +2022,1 @@\n-                            return new StaticError(sym);\n+                            return new StaticError(checkSym);\n@@ -2019,1 +2024,1 @@\n-                            return new RefBeforeCtorCalledError(sym);\n+                            return new RefBeforeCtorCalledError(checkSym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8337980\n+ * @summary Test compiler crash due to failure to resolve method ambiguity\n+ * @compile\/fail\/ref=MethodAmbiguityCrash1.out -XDrawDiagnostics MethodAmbiguityCrash1.java\n+ *\/\n+public class MethodAmbiguityCrash1 {\n+\n+    public interface A {\n+        int op();\n+    }\n+\n+    public abstract static class B {\n+        abstract int op();\n+    }\n+\n+    public abstract static class C extends B implements A {\n+\n+        public static int test() {\n+            return op();    \/\/ compile should fail here\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/resolve\/MethodAmbiguityCrash1.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+MethodAmbiguityCrash1.java:20:20: compiler.err.non-static.cant.be.ref: kindname.method, op()\n+1 error\n","filename":"test\/langtools\/tools\/javac\/resolve\/MethodAmbiguityCrash1.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8337980\n+ * @summary Test compiler crash due to failure to resolve method ambiguity\n+ * @compile\/fail\/ref=MethodAmbiguityCrash2.out -XDrawDiagnostics MethodAmbiguityCrash2.java\n+ *\/\n+public class MethodAmbiguityCrash2 {\n+\n+    public interface A {\n+        int op();\n+    }\n+\n+    public abstract static class B {\n+        public abstract int op();\n+    }\n+\n+    public abstract static class C extends B implements A {\n+\n+        public C(int x) {\n+        }\n+\n+        public C() {\n+            this(op());     \/\/ compile should fail here\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/resolve\/MethodAmbiguityCrash2.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+MethodAmbiguityCrash2.java:23:18: compiler.err.cant.ref.before.ctor.called: op()\n+1 error\n","filename":"test\/langtools\/tools\/javac\/resolve\/MethodAmbiguityCrash2.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}