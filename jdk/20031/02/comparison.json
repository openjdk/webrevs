{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/growableArray.hpp\"\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-  static GrowableArray<const char*>* _non_existent_class_paths;\n+  static GrowableArray<const char*, int>* _non_existent_class_paths;\n@@ -547,2 +547,2 @@\n-  GrowableArray<const char*>* create_dumptime_app_classpath_array() NOT_CDS_RETURN_(nullptr);\n-  GrowableArray<const char*>* create_path_array(const char* path) NOT_CDS_RETURN_(nullptr);\n+  GrowableArray<const char*, int>* create_dumptime_app_classpath_array() NOT_CDS_RETURN_(nullptr);\n+  GrowableArray<const char*, int>* create_path_array(const char* path) NOT_CDS_RETURN_(nullptr);\n@@ -551,1 +551,1 @@\n-                                                       GrowableArray<const char*>* rp_array)\n+                                                       GrowableArray<const char*, int>* rp_array)\n@@ -554,1 +554,1 @@\n-                    GrowableArray<const char*>* rp_array,\n+                    GrowableArray<const char*, int>* rp_array,\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -41,1 +43,0 @@\n-template<class E> class GrowableArray;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-template <typename T>\n+template<typename E, typename Index>\n@@ -146,1 +146,1 @@\n-  GrowableArray<FieldInfo>* _temp_field_info;\n+  GrowableArray<FieldInfo, int>* _temp_field_info;\n@@ -148,1 +148,1 @@\n-  GrowableArray<Method*>* _all_mirandas;\n+  GrowableArray<Method*, int>* _all_mirandas;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-template <typename T> class GrowableArray;\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoadInfo.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-template <typename T> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -202,1 +203,1 @@\n-  static GrowableArray<ModuleClassPathList*>* _patch_mod_entries;\n+  static GrowableArray<ModuleClassPathList*, int>* _patch_mod_entries;\n@@ -209,1 +210,1 @@\n-  static GrowableArray<ModuleClassPathList*>* _exploded_entries;\n+  static GrowableArray<ModuleClassPathList*, int>* _exploded_entries;\n@@ -335,1 +336,1 @@\n-                                                const GrowableArray<ModuleClassPathList*>* const module_list,\n+                                                const GrowableArray<ModuleClassPathList*, int>* const module_list,\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n-template <typename T> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -76,1 +77,1 @@\n-  void remove_from_package_access_cache(GrowableArray<ProtectionDomainEntry*>* delete_list);\n+  void remove_from_package_access_cache(GrowableArray<ProtectionDomainEntry*, int>* delete_list);\n","filename":"src\/hotspot\/share\/classfile\/dictionary.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-template <typename T> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -161,1 +162,1 @@\n-  static void copy_shared_symbol_table(GrowableArray<Symbol*>* symbols,\n+  static void copy_shared_symbol_table(GrowableArray<Symbol*, int>* symbols,\n@@ -165,1 +166,1 @@\n-  static void write_to_archive(GrowableArray<Symbol*>* symbols) NOT_CDS_RETURN;\n+  static void write_to_archive(GrowableArray<Symbol*, int>* symbols) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-template <typename>\n-class GrowableArray;\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,3 +32,0 @@\n-template <typename E, MEMFLAGS F>\n-class GrowableArrayCHeap;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BatchedTask.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-template <typename T>\n+template<typename E, typename Index>\n@@ -37,1 +37,1 @@\n-  GrowableArray<G1HeapRegion*>* _regions;\n+  GrowableArray<G1HeapRegion*, int>* _regions;\n@@ -53,1 +53,1 @@\n-  const GrowableArray<G1HeapRegion*>* regions() const {\n+  const GrowableArray<G1HeapRegion*, int>* regions() const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n-template <class E> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -102,1 +103,1 @@\n-  GrowableArray<GCPhase>* _phases;\n+  GrowableArray<GCPhase, int>* _phases;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTimer.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-template <typename T> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -43,1 +44,1 @@\n-  XNMethodDataOops(const GrowableArray<oop*>& immediates, bool has_non_immediates);\n+  XNMethodDataOops(const GrowableArray<oop*, int>& immediates, bool has_non_immediates);\n@@ -46,1 +47,1 @@\n-  static XNMethodDataOops* create(const GrowableArray<oop*>& immediates, bool has_non_immediates);\n+  static XNMethodDataOops* create(const GrowableArray<oop*, int>& immediates, bool has_non_immediates);\n","filename":"src\/hotspot\/share\/gc\/x\/xNMethodData.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-template <typename T> class GrowableArrayView;\n+template <typename T, typename Index> class GrowableArrayView;\n","filename":"src\/hotspot\/share\/gc\/z\/zRemembered.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-template <typename>\n+template<typename E, typename Index>\n@@ -43,1 +43,1 @@\n-  GrowableArray<JfrThreadGroupEntry*>* _list;\n+  GrowableArray<JfrThreadGroupEntry*, int>* _list;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadGroup.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-template <typename T>\n+template<typename E, typename Index>\n@@ -202,3 +202,3 @@\n-  GrowableArray<const Klass*>* _klass_list;\n-  GrowableArray<const Klass*>* _klass_loader_set;\n-  GrowableArray<const Klass*>* _klass_loader_leakp_set;\n+  GrowableArray<const Klass*, int>* _klass_list;\n+  GrowableArray<const Klass*, int>* _klass_loader_set;\n+  GrowableArray<const Klass*, int>* _klass_loader_leakp_set;\n@@ -258,1 +258,1 @@\n-  bool iterate(Functor& functor, GrowableArray<const Klass*>* list) const {\n+  bool iterate(Functor& functor, GrowableArray<const Klass*, int>* list) const {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSetUtils.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-template <typename>\n+template<typename E, typename Index>\n@@ -80,1 +80,1 @@\n-  static const GrowableArray<const char*>* start_flight_recording_options();\n+  static const GrowableArray<const char*, int>* start_flight_recording_options();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  GrowableArray<Klass*>* compute_secondary_supers(int num_extra_slots,\n+  GrowableArray<Klass*, int>* compute_secondary_supers(int num_extra_slots,\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-  void static print_from_growable_array(outputStream* os, GrowableArray<FieldInfo>* array, ConstantPool* cp);\n+  void static print_from_growable_array(outputStream* os, GrowableArray<FieldInfo, int>* array, ConstantPool* cp);\n@@ -278,1 +278,1 @@\n-  static Array<u1>* create_FieldInfoStream(GrowableArray<FieldInfo>* fields, int java_fields, int injected_fields,\n+  static Array<u1>* create_FieldInfoStream(GrowableArray<FieldInfo, int>* fields, int java_fields, int injected_fields,\n@@ -280,1 +280,1 @@\n-  static GrowableArray<FieldInfo>* create_FieldInfoArray(const Array<u1>* fis, int* java_fields_count, int* injected_fields_count);\n+  static GrowableArray<FieldInfo, int>* create_FieldInfoArray(const Array<u1>* fis, int* java_fields_count, int* injected_fields_count);\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,2 +55,3 @@\n-template <class T> class Array;\n-template <class T> class GrowableArray;\n+template <typename T> class Array;\n+template<typename T, typename Index>\n+class GrowableArray;\n@@ -226,1 +227,1 @@\n-  virtual GrowableArray<Klass*>* compute_secondary_supers(int num_extra_slots,\n+  virtual GrowableArray<Klass*, int>* compute_secondary_supers(int num_extra_slots,\n@@ -395,1 +396,1 @@\n-  static void  hash_insert(Klass* klass, GrowableArray<Klass*>* secondaries, uintx& bitmap);\n+  static void  hash_insert(Klass* klass, GrowableArray<Klass*, int>* secondaries, uintx& bitmap);\n@@ -401,2 +402,2 @@\n-                                              GrowableArray<Klass*>* primaries,\n-                                              GrowableArray<Klass*>* secondaries,\n+                                              GrowableArray<Klass*, int>* primaries,\n+                                              GrowableArray<Klass*, int>* secondaries,\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-template <typename T> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -75,1 +76,1 @@\n-  GrowableArray<jvmtiDeferredLocalVariable*>* _locals;\n+  GrowableArray<jvmtiDeferredLocalVariable*, int>* _locals;\n@@ -92,1 +93,1 @@\n-  void      update_monitors(GrowableArray<MonitorInfo*>* monitors);\n+  void      update_monitors(GrowableArray<MonitorInfo*, int>* monitors);\n@@ -119,1 +120,1 @@\n-  GrowableArray<jvmtiDeferredLocalVariableSet*> _deferred_locals_updates;\n+  GrowableArray<jvmtiDeferredLocalVariableSet*, int> _deferred_locals_updates;\n@@ -131,1 +132,1 @@\n-  GrowableArray<jvmtiDeferredLocalVariableSet*>* deferred_locals() { return &_deferred_locals_updates; }\n+  GrowableArray<jvmtiDeferredLocalVariableSet*, int>* deferred_locals() { return &_deferred_locals_updates; }\n@@ -143,1 +144,1 @@\n-  static GrowableArray<jvmtiDeferredLocalVariableSet*>* deferred_locals(JavaThread* jt) {\n+  static GrowableArray<jvmtiDeferredLocalVariableSet*, int>* deferred_locals(JavaThread* jt) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiDeferredUpdates.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -214,1 +216,1 @@\n-  static GrowableArray<ModulePatchPath*>* _patch_mod_prefix;\n+  static GrowableArray<ModulePatchPath*, int>* _patch_mod_prefix;\n@@ -484,1 +486,1 @@\n-  static GrowableArray<ModulePatchPath*>* get_patch_mod_prefix() { return _patch_mod_prefix; }\n+  static GrowableArray<ModulePatchPath*, int>* get_patch_mod_prefix() { return _patch_mod_prefix; }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-template<class E> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -197,1 +198,1 @@\n-  static bool deoptimize_objects_internal(JavaThread* thread, GrowableArray<compiledVFrame*>* chunk,\n+  static bool deoptimize_objects_internal(JavaThread* thread, GrowableArray<compiledVFrame*, int>* chunk,\n@@ -203,1 +204,1 @@\n-  static bool realloc_objects(JavaThread* thread, frame* fr, RegisterMap* reg_map, GrowableArray<ScopeValue*>* objects, TRAPS);\n+  static bool realloc_objects(JavaThread* thread, frame* fr, RegisterMap* reg_map, GrowableArray<ScopeValue*, int>* objects, TRAPS);\n@@ -206,2 +207,2 @@\n-  static void reassign_fields(frame* fr, RegisterMap* reg_map, GrowableArray<ScopeValue*>* objects, bool realloc_failures, bool skip_internal);\n-  static bool relock_objects(JavaThread* thread, GrowableArray<MonitorInfo*>* monitors,\n+  static void reassign_fields(frame* fr, RegisterMap* reg_map, GrowableArray<ScopeValue*, int>* objects, bool realloc_failures, bool skip_internal);\n+  static bool relock_objects(JavaThread* thread, GrowableArray<MonitorInfo*, int>* monitors,\n@@ -213,1 +214,1 @@\n-  static vframeArray* create_vframeArray(JavaThread* thread, frame fr, RegisterMap *reg_map, GrowableArray<compiledVFrame*>* chunk, bool realloc_failures);\n+  static vframeArray* create_vframeArray(JavaThread* thread, frame fr, RegisterMap *reg_map, GrowableArray<compiledVFrame*, int>* chunk, bool realloc_failures);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-template<typename>\n-class GrowableArray;\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,2 +117,0 @@\n-template<class E> class GrowableArray;\n-\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-template <typename T> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -578,1 +579,1 @@\n-    typedef GrowableArray<PerfData*> PerfDataArray;\n+  typedef GrowableArray<PerfData*, int> PerfDataArray;\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-template <typename T> class GrowableArray;\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -51,1 +52,1 @@\n-                         GrowableArray<ObjectMonitor*>* unlinked_list,\n+                         GrowableArray<ObjectMonitor*, int>* unlinked_list,\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+template<typename E, typename Index>\n+class GrowableArray;\n@@ -63,1 +65,0 @@\n-\n@@ -409,2 +410,2 @@\n-  GrowableArray<Metadata*>* metadata_handles() const          { return _metadata_handles; }\n-  void set_metadata_handles(GrowableArray<Metadata*>* handles){ _metadata_handles = handles; }\n+  GrowableArray<Metadata*, int>* metadata_handles() const          { return _metadata_handles; }\n+  void set_metadata_handles(GrowableArray<Metadata*, int>* handles){ _metadata_handles = handles; }\n@@ -526,1 +527,1 @@\n-  GrowableArray<Metadata*>* _metadata_handles;\n+  GrowableArray<Metadata*, int>* _metadata_handles;\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n-\/\/ Detect unhanded oops in VM code\n+#include \"utilities\/growableArray.hpp\"\n+\n+\/\/ Detect unhandled oops in VM code\n@@ -72,1 +74,1 @@\n-  GrowableArray<UnhandledOopEntry> *_oop_list;\n+  GrowableArray<UnhandledOopEntry, int>* _oop_list;\n","filename":"src\/hotspot\/share\/runtime\/unhandledOops.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -492,2 +492,2 @@\n-  nonstatic_field(GrowableArrayBase,           _len,                                          int)                                   \\\n-  nonstatic_field(GrowableArrayBase,           _capacity,                                     int)                                   \\\n+  nonstatic_field(GrowableArrayBase<int>,      _len,                                          int)                                   \\\n+  nonstatic_field(GrowableArrayBase<int>,      _capacity,                                     int)                                   \\\n@@ -1227,1 +1227,1 @@\n-  declare_toplevel_type(GrowableArrayBase)                                \\\n+  declare_toplevel_type(GrowableArrayBase<int>)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"runtime\/javaThread.hpp\"\n+#include \"runtime\/thread.hpp\"\n@@ -31,3 +31,2 @@\n-void* GrowableArrayResourceAllocator::allocate(int max, int elementSize) {\n-  assert(max >= 0, \"integer overflow\");\n-  size_t byte_size = elementSize * (size_t) max;\n+void* GrowableArrayResourceAllocator::allocate(size_t max, size_t elementSize) {\n+  size_t byte_size = elementSize * max;\n@@ -38,3 +37,2 @@\n-void* GrowableArrayArenaAllocator::allocate(int max, int element_size, Arena* arena) {\n-  assert(max >= 0, \"integer overflow\");\n-  size_t byte_size = element_size * (size_t) max;\n+void* GrowableArrayArenaAllocator::allocate(size_t max, size_t element_size, Arena* arena) {\n+  size_t byte_size = element_size * max;\n@@ -45,3 +43,2 @@\n-void* GrowableArrayCHeapAllocator::allocate(int max, int element_size, MEMFLAGS memflags) {\n-  assert(max >= 0, \"integer overflow\");\n-  size_t byte_size = element_size * (size_t) max;\n+void* GrowableArrayCHeapAllocator::allocate(size_t max, size_t element_size, MEMFLAGS memflags) {\n+  size_t byte_size = element_size * max;\n@@ -73,1 +70,1 @@\n-void GrowableArrayMetadata::init_checks(const GrowableArrayBase* array) const {\n+void GrowableArrayMetadata::init_checks(const GrowableArrayBase<>* array) const {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -69,3 +69,1 @@\n-\/\/ Non-template base class responsible for handling the length and max.\n-\n-\n+template<typename Index = int>\n@@ -77,1 +75,1 @@\n-  int _len;\n+  Index _len;\n@@ -79,1 +77,1 @@\n-  int _capacity;\n+  Index _capacity;\n@@ -81,1 +79,1 @@\n-  GrowableArrayBase(int capacity, int initial_len) :\n+  GrowableArrayBase(Index capacity, Index initial_len) :\n@@ -90,2 +88,2 @@\n-  int   length() const          { return _len; }\n-  int   capacity() const        { return _capacity; }\n+  Index   length() const          { return _len; }\n+  Index   capacity() const        { return _capacity; }\n@@ -98,1 +96,1 @@\n-  void  trunc_to(int length)    {\n+  void  trunc_to(Index length)    {\n@@ -104,1 +102,1 @@\n-template <typename E> class GrowableArrayIterator;\n+template <typename E, typename Index> class GrowableArrayIterator;\n@@ -115,2 +113,2 @@\n-template <typename E>\n-class GrowableArrayView : public GrowableArrayBase {\n+template <typename E, typename Index = int>\n+class GrowableArrayView : public GrowableArrayBase<Index> {\n@@ -120,2 +118,2 @@\n-  GrowableArrayView(E* data, int capacity, int initial_len) :\n-      GrowableArrayBase(capacity, initial_len), _data(data) {}\n+  GrowableArrayView(E* data, Index capacity, Index initial_len) :\n+    GrowableArrayBase<Index>(capacity, initial_len), _data(data) {}\n@@ -126,2 +124,2 @@\n-  bool operator==(const GrowableArrayView& rhs) const {\n-    if (_len != rhs._len)\n+  bool operator==(const GrowableArrayView<E, Index>& rhs) const {\n+    if (this->_len != rhs._len)\n@@ -129,1 +127,1 @@\n-    for (int i = 0; i < _len; i++) {\n+    for (int i = 0; i < this->_len; i++) {\n@@ -141,2 +139,2 @@\n-  E& at(int i) {\n-    assert(0 <= i && i < _len, \"illegal index %d for length %d\", i, _len);\n+  E& at(Index i) {\n+    assert(0 <= i && i < this->_len, \"illegal index %d for length %d\", i, this->_len);\n@@ -146,2 +144,2 @@\n-  E const& at(int i) const {\n-    assert(0 <= i && i < _len, \"illegal index %d for length %d\", i, _len);\n+  E const& at(Index i) const {\n+    assert(0 <= i && i < this->_len, \"illegal index %d for length %d\", i, this->_len);\n@@ -151,2 +149,2 @@\n-  E* adr_at(int i) const {\n-    assert(0 <= i && i < _len, \"illegal index %d for length %d\", i, _len);\n+  E* adr_at(Index i) const {\n+    assert(0 <= i && i < this->_len, \"illegal index %d for length %d\", i, this->_len);\n@@ -157,1 +155,1 @@\n-    assert(_len > 0, \"empty\");\n+    assert(this->_len > 0, \"empty\");\n@@ -162,1 +160,1 @@\n-    assert(_len > 0, \"empty\");\n+    assert(this->_len > 0, \"empty\");\n@@ -167,2 +165,2 @@\n-    assert(_len > 0, \"empty\");\n-    return _data[_len - 1];\n+    assert(this->_len > 0, \"empty\");\n+    return _data[this->_len - 1];\n@@ -172,2 +170,2 @@\n-    assert(_len > 0, \"empty\");\n-    return _data[_len - 1];\n+    assert(this->_len > 0, \"empty\");\n+    return _data[this->_len - 1];\n@@ -184,2 +182,2 @@\n-  GrowableArrayIterator<E> begin() const {\n-    return GrowableArrayIterator<E>(this, 0);\n+  GrowableArrayIterator<E, Index> begin() const {\n+    return GrowableArrayIterator<E, Index>(this, 0);\n@@ -188,2 +186,2 @@\n-  GrowableArrayIterator<E> end() const {\n-    return GrowableArrayIterator<E>(this, length());\n+  GrowableArrayIterator<E, Index> end() const {\n+    return GrowableArrayIterator<E, Index>(this, this->length());\n@@ -193,2 +191,2 @@\n-    assert(_len > 0, \"empty list\");\n-    return _data[--_len];\n+    assert(this->_len > 0, \"empty list\");\n+    return _data[--this->_len];\n@@ -197,2 +195,2 @@\n-  void at_put(int i, const E& elem) {\n-    assert(0 <= i && i < _len, \"illegal index %d for length %d\", i, _len);\n+  void at_put(Index i, const E& elem) {\n+    assert(0 <= i && i < this->_len, \"illegal index %d for length %d\", i, this->_len);\n@@ -203,1 +201,1 @@\n-    for (int i = 0; i < _len; i++) {\n+    for (Index i = 0; i < this->_len; i++) {\n@@ -209,2 +207,2 @@\n-  int  find(const E& elem) const {\n-    for (int i = 0; i < _len; i++) {\n+  Index  find(const E& elem) const {\n+    for (Index i = 0; i < this->_len; i++) {\n@@ -216,2 +214,2 @@\n-  int  find_from_end(const E& elem) const {\n-    for (int i = _len-1; i >= 0; i--) {\n+  Index  find_from_end(const E& elem) const {\n+    for (Index i = this->_len-1; i >= 0; i--) {\n@@ -229,2 +227,2 @@\n-  int find_if(Predicate predicate) const {\n-    for (int i = 0; i < _len; i++) {\n+  Index find_if(Predicate predicate) const {\n+    for (Index i = 0; i < this->_len; i++) {\n@@ -242,1 +240,1 @@\n-  int find_from_end_if(Predicate predicate) const {\n+  Index find_from_end_if(Predicate predicate) const {\n@@ -244,1 +242,1 @@\n-    for (int i = _len-1; i >= 0; i--) {\n+    for (Index i = this->_len-1; i >= 0; i--) {\n@@ -261,1 +259,1 @@\n-    for (int i = 0; i < _len; i++) {\n+    for (Index i = 0; i < this->_len; i++) {\n@@ -270,3 +268,3 @@\n-  void remove_at(int index) {\n-    assert(0 <= index && index < _len, \"illegal index %d for length %d\", index, _len);\n-    for (int j = index + 1; j < _len; j++) {\n+  void remove_at(Index index) {\n+    assert(0 <= index && index < this->_len, \"illegal index %d for length %d\", index, this->_len);\n+    for (Index j = index + 1; j < this->_len; j++) {\n@@ -275,1 +273,1 @@\n-    _len--;\n+    this->_len--;\n@@ -279,1 +277,1 @@\n-  void remove_till(int idx) {\n+  void remove_till(Index idx) {\n@@ -284,1 +282,1 @@\n-  void remove_range(int start, int end) {\n+  void remove_range(Index start, Index end) {\n@@ -286,1 +284,1 @@\n-    assert(start < end && end <= _len, \"erase called with invalid range (%d, %d) for length %d\", start, end, _len);\n+    assert(start < end && end <= this->_len, \"erase called with invalid range (%d, %d) for length %d\", start, end, this->_len);\n@@ -288,1 +286,1 @@\n-    for (int i = start, j = end; j < length(); i++, j++) {\n+    for (Index i = start, j = end; j < this->length(); i++, j++) {\n@@ -291,1 +289,1 @@\n-    trunc_to(length() - (end - start));\n+    this->trunc_to(this->length() - (end - start));\n@@ -295,3 +293,3 @@\n-  void delete_at(int index) {\n-    assert(0 <= index && index < _len, \"illegal index %d for length %d\", index, _len);\n-    if (index < --_len) {\n+  void delete_at(Index index) {\n+    assert(0 <= index && index < this->_len, \"illegal index %d for length %d\", index, this->_len);\n+    if (index < --this->_len) {\n@@ -299,1 +297,1 @@\n-      _data[index] = _data[_len];\n+      _data[index] = _data[this->_len];\n@@ -305,1 +303,1 @@\n-    qsort(_data, length(), sizeof(E), (_sort_Fn)f);\n+    qsort(_data, this->length(), sizeof(E), (_sort_Fn)f);\n@@ -308,1 +306,1 @@\n-  void sort(int f(E*, E*), int stride) {\n+  void sort(int f(E*, E*), Index stride) {\n@@ -310,1 +308,1 @@\n-    qsort(_data, length() \/ stride, sizeof(E) * stride, (_sort_Fn)f);\n+    qsort(_data, this->length() \/ stride, sizeof(E) * stride, (_sort_Fn)f);\n@@ -313,1 +311,1 @@\n-  template <typename K, int compare(const K&, const E&)> int find_sorted(const K& key, bool& found) const {\n+  template <typename K, int compare(const K&, const E&)> Index find_sorted(const K& key, bool& found) const {\n@@ -315,2 +313,2 @@\n-    int min = 0;\n-    int max = length() - 1;\n+    Index min = 0;\n+    Index max = this->length() - 1;\n@@ -319,1 +317,1 @@\n-      int mid = (int)(((uint)max + min) \/ 2);\n+      Index mid = min + ((max - min) \/ 2);\n@@ -335,1 +333,1 @@\n-  int find_sorted(CompareClosure<E>* cc, const K& key, bool& found) {\n+  Index find_sorted(CompareClosure<E>* cc, const K& key, bool& found) {\n@@ -337,2 +335,2 @@\n-    int min = 0;\n-    int max = length() - 1;\n+    Index min = 0;\n+    Index max = this->length() - 1;\n@@ -341,1 +339,1 @@\n-      int mid = (int)(((uint)max + min) \/ 2);\n+      Index mid = min + ((max - min) \/ 2);\n@@ -358,2 +356,2 @@\n-    tty->print(\": length %d (capacity %d) { \", _len, _capacity);\n-    for (int i = 0; i < _len; i++) {\n+    tty->print(\": length %d (capacity %d) { \", this->_len, this->_capacity);\n+    for (Index i = 0; i < this->_len; i++) {\n@@ -366,2 +364,2 @@\n-template <typename E>\n-class GrowableArrayFromArray : public GrowableArrayView<E> {\n+template <typename E, typename Index = int>\n+class GrowableArrayFromArray : public GrowableArrayView<E, Index> {\n@@ -370,2 +368,2 @@\n-  GrowableArrayFromArray(E* data, int len) :\n-    GrowableArrayView<E>(data, len, len) {}\n+  GrowableArrayFromArray(E* data, Index len) :\n+    GrowableArrayView<E, Index>(data, len, len) {}\n@@ -382,2 +380,2 @@\n-template <typename E, typename Derived>\n-class GrowableArrayWithAllocator : public GrowableArrayView<E> {\n+template <typename E, typename Derived, typename Index = int>\n+class GrowableArrayWithAllocator : public GrowableArrayView<E, Index> {\n@@ -386,2 +384,2 @@\n-  void expand_to(int j);\n-  void grow(int j);\n+  void expand_to(Index j);\n+  void grow(Index j);\n@@ -390,1 +388,1 @@\n-  GrowableArrayWithAllocator(E* data, int capacity) :\n+  GrowableArrayWithAllocator(E* data, Index capacity) :\n@@ -392,1 +390,1 @@\n-    for (int i = 0; i < capacity; i++) {\n+    for (Index i = 0; i < capacity; i++) {\n@@ -397,1 +395,1 @@\n-  GrowableArrayWithAllocator(E* data, int capacity, int initial_len, const E& filler) :\n+  GrowableArrayWithAllocator(E* data, Index capacity, Index initial_len, const E& filler) :\n@@ -399,1 +397,1 @@\n-    int i = 0;\n+    Index i = 0;\n@@ -411,1 +409,1 @@\n-  int append(const E& elem) {\n+  Index append(const E& elem) {\n@@ -413,1 +411,1 @@\n-    int idx = this->_len++;\n+    Index idx = this->_len++;\n@@ -427,1 +425,1 @@\n-  E& at_grow(int i, const E& fill = E()) {\n+  E& at_grow(Index i, const E& fill = E()) {\n@@ -431,1 +429,1 @@\n-      for (int j = this->_len; j <= i; j++)\n+      for (Index j = this->_len; j <= i; j++)\n@@ -438,1 +436,1 @@\n-  void at_put_grow(int i, const E& elem, const E& fill = E()) {\n+  void at_put_grow(Index i, const E& elem, const E& fill = E()) {\n@@ -442,1 +440,1 @@\n-      for (int j = this->_len; j < i; j++)\n+      for (Index j = this->_len; j < i; j++)\n@@ -450,1 +448,1 @@\n-  void insert_before(const int idx, const E& elem) {\n+  void insert_before(const Index idx, const E& elem) {\n@@ -453,1 +451,1 @@\n-    for (int j = this->_len - 1; j >= idx; j--) {\n+    for (Index j = this->_len - 1; j >= idx; j--) {\n@@ -460,1 +458,1 @@\n-  void insert_before(const int idx, const GrowableArrayView<E>* array) {\n+  void insert_before(const Index idx, const GrowableArrayView<E>* array) {\n@@ -462,2 +460,2 @@\n-    int array_len = array->length();\n-    int new_len = this->_len + array_len;\n+    Index array_len = array->length();\n+    Index new_len = this->_len + array_len;\n@@ -466,1 +464,1 @@\n-    for (int j = this->_len - 1; j >= idx; j--) {\n+    for (Index j = this->_len - 1; j >= idx; j--) {\n@@ -470,1 +468,1 @@\n-    for (int j = 0; j < array_len; j++) {\n+    for (Index j = 0; j < array_len; j++) {\n@@ -478,1 +476,1 @@\n-    for (int i = 0; i < l->length(); i++) {\n+    for (Index i = 0; i < l->length(); i++) {\n@@ -489,1 +487,1 @@\n-    int location = GrowableArrayView<E>::template find_sorted<E, compare>(key, found);\n+    Index location = GrowableArrayView<E>::template find_sorted<E, compare>(key, found);\n@@ -498,1 +496,1 @@\n-    int location = find_sorted(cc, key, found);\n+    Index location = find_sorted(cc, key, found);\n@@ -512,1 +510,1 @@\n-  void reserve(int new_capacity);\n+  void reserve(Index new_capacity);\n@@ -520,3 +518,3 @@\n-template <typename E, typename Derived>\n-void GrowableArrayWithAllocator<E, Derived>::expand_to(int new_capacity) {\n-  int old_capacity = this->_capacity;\n+template <typename E, typename Derived, typename Index>\n+void GrowableArrayWithAllocator<E, Derived, Index>::expand_to(Index new_capacity) {\n+  Index old_capacity = this->_capacity;\n@@ -527,1 +525,1 @@\n-  int i = 0;\n+  Index i = 0;\n@@ -537,2 +535,2 @@\n-template <typename E, typename Derived>\n-void GrowableArrayWithAllocator<E, Derived>::grow(int j) {\n+template <typename E, typename Derived, typename Index>\n+void GrowableArrayWithAllocator<E, Derived, Index>::grow(Index j) {\n@@ -543,2 +541,2 @@\n-template <typename E, typename Derived>\n-void GrowableArrayWithAllocator<E, Derived>::reserve(int new_capacity) {\n+template <typename E, typename Derived, typename Index>\n+void GrowableArrayWithAllocator<E, Derived, Index>::reserve(Index new_capacity) {\n@@ -550,4 +548,4 @@\n-template <typename E, typename Derived>\n-void GrowableArrayWithAllocator<E, Derived>::shrink_to_fit() {\n-  int old_capacity = this->_capacity;\n-  int len = this->_len;\n+template <typename E, typename Derived, typename Index>\n+void GrowableArrayWithAllocator<E, Derived, Index>::shrink_to_fit() {\n+  Index old_capacity = this->_capacity;\n+  Index len = this->_len;\n@@ -567,1 +565,1 @@\n-    for (int i = 0; i < len; ++i) ::new (&new_data[i]) E(old_data[i]);\n+    for (Index i = 0; i < len; ++i) ::new (&new_data[i]) E(old_data[i]);\n@@ -570,1 +568,1 @@\n-  for (int i = 0; i < old_capacity; ++i) old_data[i].~E();\n+  for (Index i = 0; i < old_capacity; ++i) old_data[i].~E();\n@@ -578,2 +576,2 @@\n-template <typename E, typename Derived>\n-void GrowableArrayWithAllocator<E, Derived>::clear_and_deallocate() {\n+template <typename E, typename Derived, typename Index>\n+void GrowableArrayWithAllocator<E, Derived, Index>::clear_and_deallocate() {\n@@ -586,1 +584,1 @@\n-  static void* allocate(int max, int element_size);\n+  static void* allocate(size_t max, size_t element_size);\n@@ -592,1 +590,1 @@\n-  static void* allocate(int max, int element_size, Arena* arena);\n+  static void* allocate(size_t max, size_t element_size, Arena* arena);\n@@ -598,1 +596,1 @@\n-  static void* allocate(int max, int element_size, MEMFLAGS memflags);\n+  static void* allocate(size_t max, size_t element_size, MEMFLAGS memflags);\n@@ -677,1 +675,1 @@\n-  void init_checks(const GrowableArrayBase* array) const;\n+  void init_checks(const GrowableArrayBase<>* array) const;\n@@ -706,3 +704,3 @@\n-template <typename E>\n-class GrowableArray : public GrowableArrayWithAllocator<E, GrowableArray<E>> {\n-  friend class GrowableArrayWithAllocator<E, GrowableArray>;\n+template <typename E, typename Index = int>\n+class GrowableArray : public GrowableArrayWithAllocator<E, GrowableArray<E, Index>, Index> {\n+  friend class GrowableArrayWithAllocator<E, GrowableArray, Index>;\n@@ -711,1 +709,1 @@\n-  static E* allocate(int max) {\n+  static E* allocate(Index max) {\n@@ -715,1 +713,1 @@\n-  static E* allocate(int max, MEMFLAGS memflags) {\n+  static E* allocate(Index max, MEMFLAGS memflags) {\n@@ -719,1 +717,1 @@\n-  static E* allocate(int max, Arena* arena) {\n+  static E* allocate(Index max, Arena* arena) {\n@@ -755,1 +753,1 @@\n-  explicit GrowableArray(int initial_capacity) :\n+  explicit GrowableArray(Index initial_capacity) :\n@@ -763,1 +761,1 @@\n-  GrowableArray(int initial_capacity, MEMFLAGS memflags) :\n+  GrowableArray(Index initial_capacity, MEMFLAGS memflags) :\n@@ -771,1 +769,1 @@\n-  GrowableArray(int initial_capacity, int initial_len, const E& filler) :\n+  GrowableArray(Index initial_capacity, Index initial_len, const E& filler) :\n@@ -779,1 +777,1 @@\n-  GrowableArray(int initial_capacity, int initial_len, const E& filler, MEMFLAGS memflags) :\n+  GrowableArray(Index initial_capacity, Index initial_len, const E& filler, MEMFLAGS memflags) :\n@@ -787,1 +785,1 @@\n-  GrowableArray(Arena* arena, int initial_capacity, int initial_len, const E& filler) :\n+  GrowableArray(Arena* arena, Index initial_capacity, Index initial_len, const E& filler) :\n@@ -803,3 +801,3 @@\n-template <typename E, MEMFLAGS F>\n-class GrowableArrayCHeap : public GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F> > {\n-  friend class GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F> >;\n+template <typename E, MEMFLAGS F, typename Index = int>\n+class GrowableArrayCHeap : public GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F, Index>, Index > {\n+  friend class GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F, Index>, Index>;\n@@ -809,1 +807,1 @@\n-  static E* allocate(int max, MEMFLAGS flags) {\n+  static E* allocate(Index max, MEMFLAGS flags) {\n@@ -828,1 +826,1 @@\n-  GrowableArrayCHeap(int initial_capacity = 0) :\n+  GrowableArrayCHeap(Index initial_capacity = 0) :\n@@ -833,1 +831,1 @@\n-  GrowableArrayCHeap(int initial_capacity, int initial_len, const E& filler) :\n+  GrowableArrayCHeap(Index initial_capacity, Index initial_len, const E& filler) :\n@@ -856,1 +854,1 @@\n-template <typename E>\n+template <typename E, typename Index = int>\n@@ -858,1 +856,1 @@\n-  friend class GrowableArrayView<E>;\n+  friend class GrowableArrayView<E, Index>;\n@@ -862,1 +860,1 @@\n-  int _position;                      \/\/ The current position in the GrowableArray\n+  Index _position;                      \/\/ The current position in the GrowableArray\n@@ -865,1 +863,1 @@\n-  GrowableArrayIterator(const GrowableArrayView<E>* array, int position) : _array(array), _position(position) {\n+  GrowableArrayIterator(const GrowableArrayView<E, Index>* array, Index position) : _array(array), _position(position) {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":141,"deletions":143,"binary":false,"changes":284,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        BasicType generic = lookupOrFail(\"GrowableArrayBase\");\n+        BasicType generic = lookupOrFail(\"GrowableArrayBase<int>\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HotSpotTypeDataBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    Type type = db.lookupType(\"GrowableArrayBase\");\n+    Type type = db.lookupType(\"GrowableArrayBase<int>\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/GenericGrowableArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}