{"files":[{"patch":"@@ -222,0 +222,2 @@\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n@@ -242,0 +244,2 @@\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECKeyFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,17 +147,7 @@\n-        if (keySpec instanceof X509EncodedKeySpec) {\n-            X509EncodedKeySpec x509Spec = (X509EncodedKeySpec) keySpec;\n-            XDHPublicKeyImpl result =\n-                new XDHPublicKeyImpl(x509Spec.getEncoded());\n-            checkLockedParams(InvalidKeySpecException::new,\n-                result.getParams());\n-            return result;\n-        } else if (keySpec instanceof XECPublicKeySpec) {\n-            XECPublicKeySpec publicKeySpec = (XECPublicKeySpec) keySpec;\n-            XECParameters params = XECParameters.get(\n-                InvalidKeySpecException::new, publicKeySpec.getParams());\n-            checkLockedParams(InvalidKeySpecException::new, params);\n-            return new XDHPublicKeyImpl(params, publicKeySpec.getU());\n-        } else if (keySpec instanceof PKCS8EncodedKeySpec p8) {\n-            PKCS8Key p8key = new XDHPrivateKeyImpl(p8.getEncoded());\n-            if (!p8key.hasPublicKey()) {\n-                throw new InvalidKeySpecException(\"No public key found.\");\n+        return switch (keySpec) {\n+            case X509EncodedKeySpec x509Spec -> {\n+                XDHPublicKeyImpl result =\n+                    new XDHPublicKeyImpl(x509Spec.getEncoded());\n+                checkLockedParams(InvalidKeySpecException::new,\n+                    result.getParams());\n+                yield result;\n@@ -165,9 +155,23 @@\n-            XDHPublicKeyImpl result =\n-                new XDHPublicKeyImpl(p8key.getPubKeyEncoded());\n-            checkLockedParams(InvalidKeySpecException::new,\n-                result.getParams());\n-            return result;\n-        } else {\n-            throw new InvalidKeySpecException(keySpec.getClass().getName() +\n-                \" not supported.\");\n-        }\n+            case XECPublicKeySpec publicKeySpec -> {\n+                XECParameters params = XECParameters.get(\n+                    InvalidKeySpecException::new, publicKeySpec.getParams());\n+                checkLockedParams(InvalidKeySpecException::new, params);\n+                yield new XDHPublicKeyImpl(params, publicKeySpec.getU());\n+            }\n+            case PKCS8EncodedKeySpec p8 -> {\n+                PKCS8Key p8key = new XDHPrivateKeyImpl(p8.getEncoded());\n+                if (!p8key.hasPublicKey()) {\n+                    throw new InvalidKeySpecException(\"No public key found.\");\n+                }\n+                XDHPublicKeyImpl result =\n+                    new XDHPublicKeyImpl(p8key.getPubKeyEncoded());\n+                checkLockedParams(InvalidKeySpecException::new,\n+                    result.getParams());\n+                yield result;\n+            }\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n+            default ->\n+                throw new InvalidKeySpecException(keySpec.getClass().getName() +\n+                    \" not supported.\");\n+        };\n@@ -179,6 +183,6 @@\n-        if (keySpec instanceof PKCS8EncodedKeySpec) {\n-            PKCS8EncodedKeySpec pkcsSpec = (PKCS8EncodedKeySpec) keySpec;\n-            byte[] encoded = pkcsSpec.getEncoded();\n-            try {\n-                XDHPrivateKeyImpl result = new XDHPrivateKeyImpl(encoded);\n-                checkLockedParams(InvalidKeySpecException::new,\n+        return switch (keySpec) {\n+            case PKCS8EncodedKeySpec pkcsSpec -> {\n+                byte[] encoded = pkcsSpec.getEncoded();\n+                try {\n+                    XDHPrivateKeyImpl result = new XDHPrivateKeyImpl(encoded);\n+                    checkLockedParams(InvalidKeySpecException::new,\n@@ -186,3 +190,4 @@\n-                return result;\n-            } finally {\n-                Arrays.fill(encoded, (byte) 0);\n+                    yield result;\n+                } finally {\n+                    Arrays.fill(encoded, (byte) 0);\n+                }\n@@ -190,10 +195,11 @@\n-        } else if (keySpec instanceof XECPrivateKeySpec) {\n-            XECPrivateKeySpec privateKeySpec = (XECPrivateKeySpec) keySpec;\n-            XECParameters params = XECParameters.get(\n-                InvalidKeySpecException::new, privateKeySpec.getParams());\n-            checkLockedParams(InvalidKeySpecException::new, params);\n-            byte[] scalar = privateKeySpec.getScalar();\n-            try {\n-                return new XDHPrivateKeyImpl(params, scalar);\n-            } finally {\n-                Arrays.fill(scalar, (byte)0);\n+            case XECPrivateKeySpec privateKeySpec -> {\n+                XECParameters params = XECParameters.get(\n+                    InvalidKeySpecException::new, privateKeySpec.getParams());\n+                checkLockedParams(InvalidKeySpecException::new, params);\n+\n+                byte[] scalar = privateKeySpec.getScalar();\n+                try {\n+                    yield new XDHPrivateKeyImpl(params, scalar);\n+                } finally {\n+                    Arrays.fill(scalar, (byte) 0);\n+                }\n@@ -201,4 +207,6 @@\n-        } else {\n-            throw new InvalidKeySpecException(\n-                \"Only PKCS8EncodedKeySpec and XECPrivateKeySpec supported\");\n-        }\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n+            default ->\n+                throw new InvalidKeySpecException(keySpec.getClass().getName() +\n+                    \" not supported.\");\n+        };\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/XDHKeyFactory.java","additions":57,"deletions":49,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -140,17 +140,7 @@\n-        if (keySpec instanceof X509EncodedKeySpec) {\n-            X509EncodedKeySpec x509Spec = (X509EncodedKeySpec) keySpec;\n-            EdDSAPublicKeyImpl result =\n-                new EdDSAPublicKeyImpl(x509Spec.getEncoded());\n-            checkLockedParams(InvalidKeySpecException::new,\n-                result.getParams());\n-            return result;\n-        } else if (keySpec instanceof EdECPublicKeySpec) {\n-            EdECPublicKeySpec publicKeySpec = (EdECPublicKeySpec) keySpec;\n-            EdDSAParameters params = EdDSAParameters.get(\n-                InvalidKeySpecException::new, publicKeySpec.getParams());\n-            checkLockedParams(InvalidKeySpecException::new, params);\n-            return new EdDSAPublicKeyImpl(params, publicKeySpec.getPoint());\n-        } else if (keySpec instanceof PKCS8EncodedKeySpec p8) {\n-            PKCS8Key p8key = new EdDSAPrivateKeyImpl(p8.getEncoded());\n-            if (!p8key.hasPublicKey()) {\n-                throw new InvalidKeySpecException(\"No public key found.\");\n+        return switch (keySpec) {\n+            case X509EncodedKeySpec x509Spec -> {\n+                EdDSAPublicKeyImpl result =\n+                    new EdDSAPublicKeyImpl(x509Spec.getEncoded());\n+                checkLockedParams(InvalidKeySpecException::new,\n+                    result.getParams());\n+                yield result;\n@@ -158,5 +148,19 @@\n-            return new EdDSAPublicKeyImpl(p8key.getPubKeyEncoded());\n-        } else {\n-            throw new InvalidKeySpecException(keySpec.getClass().getName() +\n-                \" not supported.\");\n-        }\n+            case EdECPublicKeySpec publicKeySpec -> {\n+                EdDSAParameters params = EdDSAParameters.get(\n+                    InvalidKeySpecException::new, publicKeySpec.getParams());\n+                checkLockedParams(InvalidKeySpecException::new, params);\n+                yield new EdDSAPublicKeyImpl(params, publicKeySpec.getPoint());\n+            }\n+            case PKCS8EncodedKeySpec p8 -> {\n+                PKCS8Key p8key = new EdDSAPrivateKeyImpl(p8.getEncoded());\n+                if (!p8key.hasPublicKey()) {\n+                    throw new InvalidKeySpecException(\"No public key found.\");\n+                }\n+                yield new EdDSAPublicKeyImpl(p8key.getPubKeyEncoded());\n+            }\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n+            default ->\n+                throw new InvalidKeySpecException(keySpec.getClass().getName() +\n+                    \" not supported.\");\n+        };\n@@ -168,5 +172,5 @@\n-        if (keySpec instanceof PKCS8EncodedKeySpec) {\n-            PKCS8EncodedKeySpec pkcsSpec = (PKCS8EncodedKeySpec) keySpec;\n-            byte[] encoded = pkcsSpec.getEncoded();\n-            try {\n-                EdDSAPrivateKeyImpl result =\n+        return switch (keySpec) {\n+            case PKCS8EncodedKeySpec pkcsSpec -> {\n+                byte[] encoded = pkcsSpec.getEncoded();\n+                try {\n+                    EdDSAPrivateKeyImpl result =\n@@ -174,1 +178,1 @@\n-                checkLockedParams(InvalidKeySpecException::new,\n+                    checkLockedParams(InvalidKeySpecException::new,\n@@ -176,3 +180,4 @@\n-                return result;\n-            } finally {\n-                Arrays.fill(encoded, (byte) 0);\n+                    yield result;\n+                } finally {\n+                    Arrays.fill(encoded, (byte) 0);\n+                }\n@@ -180,10 +185,10 @@\n-        } else if (keySpec instanceof EdECPrivateKeySpec) {\n-            EdECPrivateKeySpec privateKeySpec = (EdECPrivateKeySpec) keySpec;\n-            EdDSAParameters params = EdDSAParameters.get(\n-                InvalidKeySpecException::new, privateKeySpec.getParams());\n-            checkLockedParams(InvalidKeySpecException::new, params);\n-            byte[] bytes = privateKeySpec.getBytes();\n-            try {\n-                return new EdDSAPrivateKeyImpl(params, bytes);\n-            } finally {\n-                Arrays.fill(bytes, (byte)0);\n+            case EdECPrivateKeySpec privateKeySpec -> {\n+                EdDSAParameters params = EdDSAParameters.get(\n+                    InvalidKeySpecException::new, privateKeySpec.getParams());\n+                checkLockedParams(InvalidKeySpecException::new, params);\n+                byte[] bytes = privateKeySpec.getBytes();\n+                try {\n+                    yield new EdDSAPrivateKeyImpl(params, bytes);\n+                } finally {\n+                    Arrays.fill(bytes, (byte) 0);\n+                }\n@@ -191,4 +196,6 @@\n-        } else {\n-            throw new InvalidKeySpecException(\n-                \"Only PKCS8EncodedKeySpec and EdECPrivateKeySpec supported\");\n-        }\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n+            default ->\n+                throw new InvalidKeySpecException(keySpec.getClass().getName() +\n+                    \" not supported.\");\n+        };\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ed\/EdDSAKeyFactory.java","additions":52,"deletions":45,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -323,12 +323,14 @@\n-        if (keySpec instanceof X509EncodedKeySpec) {\n-            return RSAPublicKeyImpl.newKey(type, \"X.509\",\n-                    ((X509EncodedKeySpec)keySpec).getEncoded());\n-        } else if (keySpec instanceof RSAPublicKeySpec rsaSpec) {\n-            try {\n-                return new RSAPublicKeyImpl(\n-                    type, rsaSpec.getParams(),\n-                    rsaSpec.getModulus(),\n-                    rsaSpec.getPublicExponent()\n-                );\n-            } catch (ProviderException e) {\n-                throw new InvalidKeySpecException(e);\n+        return switch (keySpec) {\n+            case X509EncodedKeySpec x509 ->\n+                RSAPublicKeyImpl.newKey(type, \"X.509\", x509.getEncoded());\n+\n+            case RSAPublicKeySpec rsaSpec -> {\n+                try {\n+                    yield new RSAPublicKeyImpl(\n+                        type, rsaSpec.getParams(),\n+                        rsaSpec.getModulus(),\n+                        rsaSpec.getPublicExponent()\n+                    );\n+                } catch (ProviderException e) {\n+                    throw new InvalidKeySpecException(e);\n+                }\n@@ -336,4 +338,7 @@\n-        } else if (keySpec instanceof PKCS8EncodedKeySpec p8) {\n-            PKCS8Key p8key = new PKCS8Key(p8.getEncoded());\n-            if (!p8key.hasPublicKey()) {\n-                throw new InvalidKeySpecException(\"No public key found.\");\n+            case PKCS8EncodedKeySpec p8 -> {\n+                PKCS8Key p8key = new PKCS8Key(p8.getEncoded());\n+                if (!p8key.hasPublicKey()) {\n+                    throw new InvalidKeySpecException(\"No public key found.\");\n+                }\n+                yield RSAPublicKeyImpl.newKey(type, \"X.509\",\n+                    p8key.getPubKeyEncoded());\n@@ -341,5 +346,6 @@\n-            return RSAPublicKeyImpl.newKey(type, \"X.509\",\n-                p8key.getPubKeyEncoded());\n-        } else {\n-            throw new InvalidKeySpecException(keySpec.getClass().getName() + \" not supported.\");\n-        }\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n+            default ->\n+                throw new InvalidKeySpecException(keySpec.getClass().getName() +\n+                    \" not supported.\");\n+        };\n@@ -351,6 +357,8 @@\n-        if (keySpec instanceof PKCS8EncodedKeySpec) {\n-            byte[] encoded = ((PKCS8EncodedKeySpec)keySpec).getEncoded();\n-            try {\n-                return RSAPrivateCrtKeyImpl.newKey(type, \"PKCS#8\", encoded);\n-            } finally {\n-                Arrays.fill(encoded, (byte)0);\n+        return switch (keySpec) {\n+            case PKCS8EncodedKeySpec p8 -> {\n+                byte[] encoded = p8.getEncoded();\n+                try {\n+                    yield RSAPrivateCrtKeyImpl.newKey(type, \"PKCS#8\", encoded);\n+                } finally {\n+                    Arrays.fill(encoded, (byte) 0);\n+                }\n@@ -358,15 +366,16 @@\n-        } else if (keySpec instanceof RSAPrivateCrtKeySpec rsaSpec) {\n-            try {\n-                return new RSAPrivateCrtKeyImpl(\n-                    type, rsaSpec.getParams(),\n-                    rsaSpec.getModulus(),\n-                    rsaSpec.getPublicExponent(),\n-                    rsaSpec.getPrivateExponent(),\n-                    rsaSpec.getPrimeP(),\n-                    rsaSpec.getPrimeQ(),\n-                    rsaSpec.getPrimeExponentP(),\n-                    rsaSpec.getPrimeExponentQ(),\n-                    rsaSpec.getCrtCoefficient()\n-                );\n-            } catch (ProviderException e) {\n-                throw new InvalidKeySpecException(e);\n+            case RSAPrivateCrtKeySpec rsaSpec -> {\n+                try {\n+                    yield new RSAPrivateCrtKeyImpl(\n+                        type, rsaSpec.getParams(),\n+                        rsaSpec.getModulus(),\n+                        rsaSpec.getPublicExponent(),\n+                        rsaSpec.getPrivateExponent(),\n+                        rsaSpec.getPrimeP(),\n+                        rsaSpec.getPrimeQ(),\n+                        rsaSpec.getPrimeExponentP(),\n+                        rsaSpec.getPrimeExponentQ(),\n+                        rsaSpec.getCrtCoefficient()\n+                    );\n+                } catch (ProviderException e) {\n+                    throw new InvalidKeySpecException(e);\n+                }\n@@ -374,9 +383,10 @@\n-        } else if (keySpec instanceof RSAPrivateKeySpec rsaSpec) {\n-            try {\n-                return new RSAPrivateKeyImpl(\n-                    type, rsaSpec.getParams(),\n-                    rsaSpec.getModulus(),\n-                    rsaSpec.getPrivateExponent()\n-                );\n-            } catch (ProviderException e) {\n-                throw new InvalidKeySpecException(e);\n+            case RSAPrivateKeySpec rsaSpec -> {\n+                try {\n+                    yield new RSAPrivateKeyImpl(\n+                        type, rsaSpec.getParams(),\n+                        rsaSpec.getModulus(),\n+                        rsaSpec.getPrivateExponent()\n+                    );\n+                } catch (ProviderException e) {\n+                    throw new InvalidKeySpecException(e);\n+                }\n@@ -384,4 +394,6 @@\n-        } else {\n-            throw new InvalidKeySpecException(\"Only RSAPrivate(Crt)KeySpec \"\n-                + \"and PKCS8EncodedKeySpec supported for RSA private keys\");\n-        }\n+            case null -> throw new InvalidKeySpecException(\n+                \"keySpec must not be null\");\n+            default ->\n+                throw new InvalidKeySpecException(keySpec.getClass().getName() +\n+                    \" not supported.\");\n+        };\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyFactory.java","additions":67,"deletions":55,"binary":false,"changes":122,"status":"modified"}]}