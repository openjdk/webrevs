{"files":[{"patch":"@@ -1199,0 +1199,12 @@\n+    private boolean noClassDefIn(JCTree tree) {\n+        var scanner = new TreeScanner() {\n+            boolean noClassDef = true;\n+            @Override\n+            public void visitClassDef(JCClassDecl tree) {\n+                noClassDef = false;\n+            }\n+        };\n+        scanner.scan(tree);\n+        return scanner.noClassDef;\n+    }\n+\n@@ -3033,1 +3045,1 @@\n-        if (isTrue(cond)) {\n+        if (isTrue(cond) && noClassDefIn(tree.falsepart)) {\n@@ -3036,1 +3048,1 @@\n-        } else if (isFalse(cond)) {\n+        } else if (isFalse(cond) && noClassDefIn(tree.truepart)) {\n@@ -3060,1 +3072,1 @@\n-        if (isTrue(cond)) {\n+        if (isTrue(cond) && noClassDefIn(tree.elsepart)) {\n@@ -3063,1 +3075,1 @@\n-        } else if (isFalse(cond)) {\n+        } else if (isFalse(cond) && noClassDefIn(tree.thenpart)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+            \"GraphicalInstaller$1.class\",\n","filename":"test\/langtools\/tools\/javac\/6917288\/GraphicalInstallerTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,0 +73,3 @@\n+            case NONE:\n+                check(classesDir, \"Test.class\", \"Test$Inner.class\");\n+                break;\n@@ -78,1 +81,1 @@\n-                check(classesDir, \"Test.class\", \"Test$Inner.class\");\n+                check(classesDir, \"Test.class\", \"Test$Inner.class\", \"Test$1.class\");\n","filename":"test\/langtools\/tools\/javac\/6917288\/T6917288.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 7199823\n- * @summary javac generates inner class that can't be verified\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n- * @run main InnerClassCannotBeVerified\n- *\/\n-\n-import java.nio.file.NoSuchFileException;\n-import java.util.Arrays;\n-import javax.tools.JavaFileObject;\n-import java.net.URI;\n-import javax.tools.SimpleJavaFileObject;\n-import javax.tools.ToolProvider;\n-import javax.tools.JavaCompiler;\n-import com.sun.source.util.JavacTask;\n-import jdk.internal.classfile.*;\n-import java.io.File;\n-import java.io.IOException;\n-\n-public class InnerClassCannotBeVerified {\n-\n-    enum CompilationKind {\n-        PRE_NESTMATES(\"-source\", \"10\", \"-target\", \"10\"),\n-        POST_NESTMATES();\n-\n-        String[] opts;\n-\n-        CompilationKind(String... opts) {\n-            this.opts = opts;\n-        }\n-    }\n-\n-    private static final String errorMessage =\n-            \"Compile error while compiling the following source:\\n\";\n-\n-    public static void main(String... args) throws Exception {\n-        new InnerClassCannotBeVerified().run();\n-    }\n-\n-    void run() throws Exception {\n-        for (CompilationKind ck : CompilationKind.values()) {\n-            File file = new File(\"Test$1.class\");\n-            if (file.exists()) {\n-                file.delete();\n-            }\n-            JavaCompiler comp = ToolProvider.getSystemJavaCompiler();\n-            JavaSource source = new JavaSource();\n-            JavacTask ct = (JavacTask)comp.getTask(null, null, null,\n-                    Arrays.asList(ck.opts), null, Arrays.asList(source));\n-            try {\n-                if (!ct.call()) {\n-                    throw new AssertionError(errorMessage +\n-                            source.getCharContent(true));\n-                }\n-            } catch (Throwable ex) {\n-                throw new AssertionError(errorMessage +\n-                        source.getCharContent(true));\n-            }\n-            check(ck);\n-        }\n-    }\n-\n-    private void check(CompilationKind ck) throws IOException {\n-        try {\n-            File file = new File(\"Test$1.class\");\n-            ClassModel classFile = Classfile.of().parse(file.toPath());\n-            if (ck == CompilationKind.POST_NESTMATES) {\n-                throw new AssertionError(\"Unexpected constructor tag class!\");\n-            }\n-            boolean inheritsFromObject =\n-                    classFile.superclass().orElseThrow().asInternalName().equals(\"java\/lang\/Object\");\n-            boolean implementsNoInterface = classFile.interfaces().size() == 0;\n-            boolean noMethods = classFile.methods().size() == 0;\n-            if (!(inheritsFromObject &&\n-                    implementsNoInterface &&\n-                    noMethods)) {\n-                throw new AssertionError(\"The inner classes reused as \" +\n-                        \"access constructor tag for this code must be empty\");\n-            }\n-        } catch (NoSuchFileException ex) {\n-            if (ck == CompilationKind.PRE_NESTMATES) {\n-                throw new AssertionError(\"Constructor tag class missing!\");\n-            }\n-        }\n-    }\n-\n-    class JavaSource extends SimpleJavaFileObject {\n-\n-        String internalSource =\n-                              \"public class Test {\\n\" +\n-                              \"    private static class Foo {}\\n\" +\n-                              \"    public static void main(String[] args){ \\n\" +\n-                              \"        new Foo();\\n\" +\n-                              \"        if(false) {\\n\" +\n-                              \"            new Runnable() {\\n\" +\n-                              \"                @Override\\n\" +\n-                              \"                public void run() {\\n\" +\n-                              \"                    System.out.println();\\n\" +\n-                              \"                }\\n\" +\n-                              \"            }.run();\\n\" +\n-                              \"        }\\n\" +\n-                              \"   }\\n\" +\n-                              \"}\";\n-        public JavaSource() {\n-            super(URI.create(\"Test.java\"), JavaFileObject.Kind.SOURCE);\n-        }\n-\n-        @Override\n-        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n-            return internalSource;\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/7199823\/InnerClassCannotBeVerified.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314621\n+ * @summary ClassNotFoundException due to lambda reference to elided anonymous inner class\n+ *\/\n+\n+public class ClassNotFoundExceptionDueToPrunedCodeTest {\n+    public static void main(String... args) {\n+        var o1 = false ? new Object() {} : null;\n+        Runnable r = () -> {\n+            System.out.println(o1 == o1);\n+        };\n+        r.run();\n+\n+        var o2 = true ? null : new Object() {};\n+        r = () -> {\n+            System.out.println(o2 == o2);\n+        };\n+        r.run();\n+\n+        var o3 = switch (0) { default -> { if (false) yield new Object() { }; else yield null; } };\n+        r = () -> System.out.println(o3);\n+        r.run();\n+\n+        var o4 = switch (0) { default -> { if (true) yield null; else yield new Object() { }; } };\n+        r = () -> System.out.println(o4);\n+        r.run();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/ClassNotFoundExceptionDueToPrunedCodeTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}