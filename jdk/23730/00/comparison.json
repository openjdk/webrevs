{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.tools.javac.code.Lint;\n@@ -71,3 +72,0 @@\n-    \/** flag: is the \"preview\" lint category enabled? *\/\n-    private final boolean verbose;\n-\n@@ -87,0 +85,1 @@\n+    private final Lint lint;\n@@ -106,0 +105,1 @@\n+        lint = Lint.instance(context);\n@@ -107,2 +107,1 @@\n-        verbose = Lint.instance(context).isEnabled(LintCategory.PREVIEW);\n-        previewHandler = new MandatoryWarningHandler(log, source, verbose, true, LintCategory.PREVIEW);\n+        previewHandler = new MandatoryWarningHandler(log, source, true, LintCategory.PREVIEW);\n@@ -181,1 +180,1 @@\n-        previewHandler.report(pos, feature.isPlural() ?\n+        previewHandler.report(lint, pos, feature.isPlural() ?\n@@ -193,1 +192,1 @@\n-        if (verbose) {\n+        if (lint.isEnabled(LintCategory.PREVIEW)) {\n@@ -209,1 +208,1 @@\n-        previewHandler.report(pos, warnKey);\n+        previewHandler.report(lint, pos, warnKey);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -165,3 +165,0 @@\n-        boolean verboseDeprecated = lint.isEnabled(LintCategory.DEPRECATION);\n-        boolean verboseRemoval = lint.isEnabled(LintCategory.REMOVAL);\n-        boolean verboseUnchecked = lint.isEnabled(LintCategory.UNCHECKED);\n@@ -170,1 +167,1 @@\n-        deprecationHandler = new MandatoryWarningHandler(log, null, verboseDeprecated,\n+        deprecationHandler = new MandatoryWarningHandler(log, null,\n@@ -172,1 +169,1 @@\n-        removalHandler = new MandatoryWarningHandler(log, null, verboseRemoval,\n+        removalHandler = new MandatoryWarningHandler(log, null,\n@@ -174,1 +171,1 @@\n-        uncheckedHandler = new MandatoryWarningHandler(log, null, verboseUnchecked,\n+        uncheckedHandler = new MandatoryWarningHandler(log, null,\n@@ -243,6 +240,4 @@\n-            if (!lint.isSuppressed(LintCategory.REMOVAL)) {\n-                if (sym.kind == MDL) {\n-                    removalHandler.report(pos, LintWarnings.HasBeenDeprecatedForRemovalModule(sym));\n-                } else {\n-                    removalHandler.report(pos, LintWarnings.HasBeenDeprecatedForRemoval(sym, sym.location()));\n-                }\n+            if (sym.kind == MDL) {\n+                removalHandler.report(lint, pos, LintWarnings.HasBeenDeprecatedForRemovalModule(sym));\n+            } else {\n+                removalHandler.report(lint, pos, LintWarnings.HasBeenDeprecatedForRemoval(sym, sym.location()));\n@@ -250,1 +245,1 @@\n-        } else if (!lint.isSuppressed(LintCategory.DEPRECATION)) {\n+        } else {\n@@ -252,1 +247,1 @@\n-                deprecationHandler.report(pos, LintWarnings.HasBeenDeprecatedModule(sym));\n+                deprecationHandler.report(lint, pos, LintWarnings.HasBeenDeprecatedModule(sym));\n@@ -254,1 +249,1 @@\n-                deprecationHandler.report(pos, LintWarnings.HasBeenDeprecated(sym, sym.location()));\n+                deprecationHandler.report(lint, pos, LintWarnings.HasBeenDeprecated(sym, sym.location()));\n@@ -290,2 +285,1 @@\n-        if (!lint.isSuppressed(LintCategory.UNCHECKED))\n-            uncheckedHandler.report(pos, warnKey);\n+        uncheckedHandler.report(lint, pos, warnKey);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.tools.javac.code.Lint;\n@@ -112,4 +113,0 @@\n-     * @param verbose Specify whether or not detailed messages about\n-     *                individual instances should be given, or whether an aggregate\n-     *                message should be generated at the end of the compilation.\n-     *                Typically set via  -Xlint:option.\n@@ -120,2 +117,2 @@\n-    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, LintCategory lc) {\n-        this(log, source, verbose, enforceMandatory, lc, null);\n+    public MandatoryWarningHandler(Log log, Source source, boolean enforceMandatory, LintCategory lc) {\n+        this(log, source, enforceMandatory, lc, null);\n@@ -129,4 +126,0 @@\n-     * @param verbose Specify whether or not detailed messages about\n-     *                individual instances should be given, or whether an aggregate\n-     *                message should be generated at the end of the compilation.\n-     *                Typically set via  -Xlint:option.\n@@ -139,1 +132,1 @@\n-    public MandatoryWarningHandler(Log log, Source source, boolean verbose, boolean enforceMandatory, LintCategory lc, String prefix) {\n+    public MandatoryWarningHandler(Log log, Source source, boolean enforceMandatory, LintCategory lc, String prefix) {\n@@ -142,1 +135,0 @@\n-        this.verbose = verbose;\n@@ -151,0 +143,1 @@\n+     * @param lint the applicable Lint configuration\n@@ -154,1 +147,1 @@\n-    public void report(DiagnosticPosition pos, LintWarning warnKey) {\n+    public void report(Lint lint, DiagnosticPosition pos, LintWarning warnKey) {\n@@ -158,1 +151,3 @@\n-        if (verbose) {\n+        if (lint.isSuppressed(lintCategory)) {\n+            return;\n+        } else if (lint.isEnabled(lintCategory)) {\n@@ -218,1 +213,1 @@\n-            if (!verbose)\n+            if (!anyWarningGenerated)\n@@ -229,6 +224,0 @@\n-    \/**\n-     * Whether or not to report individual warnings, or simply to report a\n-     * single aggregate warning at the end of the compilation.\n-     *\/\n-    private final boolean verbose;\n-\n@@ -270,0 +259,6 @@\n+    \/**\n+     * Whether we have actually logged a warning yet or just deferred everything.\n+     * In the latter case, the \"recompile\" notice is included in the summary.\n+     *\/\n+    private boolean anyWarningGenerated;\n+\n@@ -290,0 +285,1 @@\n+        anyWarningGenerated = true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningHandler.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"}]}