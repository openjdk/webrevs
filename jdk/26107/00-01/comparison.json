{"files":[{"patch":"@@ -2834,1 +2834,2 @@\n-            JCExpression exactnessCheck = null;\n+            JCStatement sideEffect;\n+            JCExpression exactnessCheck;\n@@ -2837,8 +2838,0 @@\n-            \/\/ preserving the side effects of the value\n-            VarSymbol dollar_s = new VarSymbol(FINAL | SYNTHETIC,\n-                    names.fromString(\"tmp\" + variableIndex++ + this.target.syntheticNameChar()),\n-                    types.erasure(tree.expr.type),\n-                    currentMethodSym);\n-            JCStatement var = make.at(tree.pos())\n-                    .VarDef(dollar_s, instanceOfExpr);\n-\n@@ -2846,1 +2839,2 @@\n-                var = make.Exec(instanceOfExpr);  \/\/ drop redundant variable\n+                \/\/ instanceOfExpr; true\n+                sideEffect = make.Exec(instanceOfExpr);\n@@ -2848,7 +2842,5 @@\n-            }\n-            else if (tree.expr.type.isReference()) {\n-                JCExpression nullCheck =\n-                        makeBinary(NE,\n-                            make.Ident(dollar_s),\n-                            makeNull());\n-\n+            } else if (tree.expr.type.isPrimitive()) {\n+                \/\/ ExactConversionSupport.isXxxExact(instanceOfExpr)\n+                sideEffect = null;\n+                exactnessCheck = getExactnessCheck(tree, instanceOfExpr);\n+            } else if (tree.expr.type.isReference()) {\n@@ -2856,6 +2848,3 @@\n-                    exactnessCheck = nullCheck;\n-                } else if (types.unboxedType(tree.expr.type).isPrimitive()) {\n-                    exactnessCheck =\n-                        makeBinary(AND,\n-                            nullCheck,\n-                            getExactnessCheck(tree, boxIfNeeded(make.Ident(dollar_s), types.unboxedType(tree.expr.type))));\n+                    \/\/ instanceOfExpr != null\n+                    sideEffect = null;\n+                    exactnessCheck = makeBinary(NE, instanceOfExpr, makeNull());\n@@ -2863,6 +2852,26 @@\n-                    exactnessCheck =\n-                        makeBinary(AND,\n-                            nullCheck,\n-                            make.at(tree.pos())\n-                                .TypeTest(make.Ident(dollar_s), make.Type(types.boxedClass(tree.pattern.type).type))\n-                                .setType(syms.booleanType));\n+                    \/\/ We read the result of instanceOfExpr, so create variable\n+                    VarSymbol dollar_s = new VarSymbol(FINAL | SYNTHETIC,\n+                            names.fromString(\"tmp\" + variableIndex++ + this.target.syntheticNameChar()),\n+                            types.erasure(tree.expr.type),\n+                            currentMethodSym);\n+                    sideEffect = make.at(tree.pos())\n+                            .VarDef(dollar_s, instanceOfExpr);\n+\n+                    JCExpression nullCheck =\n+                            makeBinary(NE,\n+                                    make.Ident(dollar_s),\n+                                    makeNull());\n+\n+                    if (types.unboxedType(tree.expr.type).isPrimitive()) {\n+                        exactnessCheck =\n+                            makeBinary(AND,\n+                                nullCheck,\n+                                getExactnessCheck(tree, boxIfNeeded(make.Ident(dollar_s), types.unboxedType(tree.expr.type))));\n+                    } else {\n+                        exactnessCheck =\n+                            makeBinary(AND,\n+                                nullCheck,\n+                                make.at(tree.pos())\n+                                    .TypeTest(make.Ident(dollar_s), make.Type(types.boxedClass(tree.pattern.type).type))\n+                                    .setType(syms.booleanType));\n+                    }\n@@ -2870,0 +2879,2 @@\n+            } else {\n+                throw Assert.error(\"Non primitive or reference type\");\n@@ -2871,5 +2882,1 @@\n-            else if (tree.expr.type.isPrimitive()) {\n-                exactnessCheck = getExactnessCheck(tree, make.Ident(dollar_s));\n-            }\n-\n-            result = make.LetExpr(List.of(var), exactnessCheck)\n+            result = (sideEffect == null ? exactnessCheck : make.LetExpr(List.of(sideEffect), exactnessCheck))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":41,"deletions":34,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8304487 8325257 8327683 8330387\n+ * @bug 8304487 8325257 8327683 8330387 8357185\n@@ -55,0 +55,1 @@\n+        assertEquals(true,  exprMethodSideEffect());\n@@ -176,0 +177,7 @@\n+    static int sideEffect;\n+    public static Integer methSideEffect() { sideEffect++; return 42;}\n+    public static boolean exprMethodSideEffect() {\n+        sideEffect = 5;\n+        return methSideEffect() instanceof int ii && sideEffect == 6;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfPatternOpWithTopLevelPatterns.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8304487 8325257 8327683 8330387\n+ * @bug 8304487 8325257 8327683 8330387 8357185\n@@ -55,0 +55,1 @@\n+        assertEquals(true,  exprMethodSideEffect());\n@@ -176,0 +177,7 @@\n+    static int sideEffect;\n+    public static Integer methSideEffect() { sideEffect++; return 42;}\n+    public static boolean exprMethodSideEffect() {\n+        sideEffect = 5;\n+        return methSideEffect() instanceof int && sideEffect == 6;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfTypeComparisonOp.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -60,1 +59,1 @@\n-    public void testInRecordPattern() {\n+    public void testNoUnusedVarInRecordPattern() {\n@@ -89,0 +88,1 @@\n+        assertTrue(b);\n@@ -90,0 +90,3 @@\n+        b = (a = -24) instanceof int cap;\n+        assertTrue(b);\n+        assertEquals(-24, a);\n@@ -91,0 +94,1 @@\n+        assertTrue(b);\n@@ -92,1 +96,2 @@\n-        b = (a = -28) instanceof double;\n+        b = (a = -28) instanceof double cap2;\n+        assertTrue(b);\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveUnconditionallyExactTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}