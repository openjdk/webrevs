{"files":[{"patch":"@@ -2846,0 +2846,1 @@\n+                var = make.Exec(instanceOfExpr);  \/\/ drop redundant variable\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.util.BitSet;\n+import java.util.Map;\n+\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/*\n+ * @test\n+ * @bug 8357185\n+ * @enablePreview\n+ * @summary Behaviors with unconditionally exact primitive patterns\n+ * @library \/test\/lib\n+ * @run junit PrimitiveUnconditionallyExactTest\n+ *\/\n+public class PrimitiveUnconditionallyExactTest {\n+\n+    private static final String SOURCE = \"\"\"\n+            public class Test {\n+                public record A(int i) {}\n+                public Integer get(A a) {\n+                    if (a instanceof A(int i)) {\n+                        return i;\n+                    }\n+                    return null;\n+                }\n+            }\n+            \"\"\";\n+\n+    @Test\n+    public void testInRecordPattern() {\n+        var testBytes = InMemoryJavaCompiler.compile(Map.of(\"Test\", SOURCE)).get(\"Test\");\n+        var code = ClassFile.of().parse(testBytes).methods().stream()\n+                .filter(m -> m.methodName().equalsString(\"get\")).findFirst()\n+                .orElseThrow().findAttribute(Attributes.code()).orElseThrow();\n+        BitSet stores = new BitSet(code.maxLocals());\n+        BitSet loads = new BitSet(code.maxLocals());\n+        code.forEach(ce -> {\n+            switch (ce) {\n+                case StoreInstruction store -> stores.set(store.slot());\n+                case LoadInstruction load -> loads.set(load.slot());\n+                default -> {}\n+            }\n+        });\n+        \/\/ [this, a] are built-in locals that may be unused\n+        loads.clear(0, 2);\n+        stores.clear(0, 2);\n+        if (!loads.equals(stores)) {\n+            System.err.println(\"Loads: \" + loads);\n+            System.err.println(\"Stores: \" + stores);\n+            System.err.println(code.toDebugString());\n+            fail(\"Store and load mismatch, see stderr\");\n+        }\n+    }\n+\n+    @Test\n+    public void testExpressionExecution() {\n+        int a = 0;\n+        boolean b = (a = 5) instanceof int;\n+        assertEquals(5, a);\n+        b = (a = 42) instanceof long;\n+        assertEquals(42, a);\n+        b = (a = -28) instanceof double;\n+        assertEquals(-28, a);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveUnconditionallyExactTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}