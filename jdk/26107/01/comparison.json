{"files":[{"patch":"@@ -2834,1 +2834,2 @@\n-            JCExpression exactnessCheck = null;\n+            JCStatement sideEffect;\n+            JCExpression exactnessCheck;\n@@ -2837,8 +2838,0 @@\n-            \/\/ preserving the side effects of the value\n-            VarSymbol dollar_s = new VarSymbol(FINAL | SYNTHETIC,\n-                    names.fromString(\"tmp\" + variableIndex++ + this.target.syntheticNameChar()),\n-                    types.erasure(tree.expr.type),\n-                    currentMethodSym);\n-            JCStatement var = make.at(tree.pos())\n-                    .VarDef(dollar_s, instanceOfExpr);\n-\n@@ -2846,0 +2839,2 @@\n+                \/\/ instanceOfExpr; true\n+                sideEffect = make.Exec(instanceOfExpr);\n@@ -2847,7 +2842,5 @@\n-            }\n-            else if (tree.expr.type.isReference()) {\n-                JCExpression nullCheck =\n-                        makeBinary(NE,\n-                            make.Ident(dollar_s),\n-                            makeNull());\n-\n+            } else if (tree.expr.type.isPrimitive()) {\n+                \/\/ ExactConversionSupport.isXxxExact(instanceOfExpr)\n+                sideEffect = null;\n+                exactnessCheck = getExactnessCheck(tree, instanceOfExpr);\n+            } else if (tree.expr.type.isReference()) {\n@@ -2855,6 +2848,3 @@\n-                    exactnessCheck = nullCheck;\n-                } else if (types.unboxedType(tree.expr.type).isPrimitive()) {\n-                    exactnessCheck =\n-                        makeBinary(AND,\n-                            nullCheck,\n-                            getExactnessCheck(tree, boxIfNeeded(make.Ident(dollar_s), types.unboxedType(tree.expr.type))));\n+                    \/\/ instanceOfExpr != null\n+                    sideEffect = null;\n+                    exactnessCheck = makeBinary(NE, instanceOfExpr, makeNull());\n@@ -2862,6 +2852,26 @@\n-                    exactnessCheck =\n-                        makeBinary(AND,\n-                            nullCheck,\n-                            make.at(tree.pos())\n-                                .TypeTest(make.Ident(dollar_s), make.Type(types.boxedClass(tree.pattern.type).type))\n-                                .setType(syms.booleanType));\n+                    \/\/ We read the result of instanceOfExpr, so create variable\n+                    VarSymbol dollar_s = new VarSymbol(FINAL | SYNTHETIC,\n+                            names.fromString(\"tmp\" + variableIndex++ + this.target.syntheticNameChar()),\n+                            types.erasure(tree.expr.type),\n+                            currentMethodSym);\n+                    sideEffect = make.at(tree.pos())\n+                            .VarDef(dollar_s, instanceOfExpr);\n+\n+                    JCExpression nullCheck =\n+                            makeBinary(NE,\n+                                    make.Ident(dollar_s),\n+                                    makeNull());\n+\n+                    if (types.unboxedType(tree.expr.type).isPrimitive()) {\n+                        exactnessCheck =\n+                            makeBinary(AND,\n+                                nullCheck,\n+                                getExactnessCheck(tree, boxIfNeeded(make.Ident(dollar_s), types.unboxedType(tree.expr.type))));\n+                    } else {\n+                        exactnessCheck =\n+                            makeBinary(AND,\n+                                nullCheck,\n+                                make.at(tree.pos())\n+                                    .TypeTest(make.Ident(dollar_s), make.Type(types.boxedClass(tree.pattern.type).type))\n+                                    .setType(syms.booleanType));\n+                    }\n@@ -2869,0 +2879,2 @@\n+            } else {\n+                throw Assert.error(\"Non primitive or reference type\");\n@@ -2870,5 +2882,1 @@\n-            else if (tree.expr.type.isPrimitive()) {\n-                exactnessCheck = getExactnessCheck(tree, make.Ident(dollar_s));\n-            }\n-\n-            result = make.LetExpr(List.of(var), exactnessCheck)\n+            result = (sideEffect == null ? exactnessCheck : make.LetExpr(List.of(sideEffect), exactnessCheck))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":41,"deletions":33,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8304487 8325257 8327683 8330387\n+ * @bug 8304487 8325257 8327683 8330387 8357185\n@@ -55,0 +55,1 @@\n+        assertEquals(true,  exprMethodSideEffect());\n@@ -176,0 +177,7 @@\n+    static int sideEffect;\n+    public static Integer methSideEffect() { sideEffect++; return 42;}\n+    public static boolean exprMethodSideEffect() {\n+        sideEffect = 5;\n+        return methSideEffect() instanceof int ii && sideEffect == 6;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfPatternOpWithTopLevelPatterns.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8304487 8325257 8327683 8330387\n+ * @bug 8304487 8325257 8327683 8330387 8357185\n@@ -55,0 +55,1 @@\n+        assertEquals(true,  exprMethodSideEffect());\n@@ -176,0 +177,7 @@\n+    static int sideEffect;\n+    public static Integer methSideEffect() { sideEffect++; return 42;}\n+    public static boolean exprMethodSideEffect() {\n+        sideEffect = 5;\n+        return methSideEffect() instanceof int && sideEffect == 6;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfTypeComparisonOp.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.util.BitSet;\n+import java.util.Map;\n+\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8357185\n+ * @enablePreview\n+ * @summary Behaviors with unconditionally exact primitive patterns\n+ * @library \/test\/lib\n+ * @run junit PrimitiveUnconditionallyExactTest\n+ *\/\n+public class PrimitiveUnconditionallyExactTest {\n+\n+    private static final String SOURCE = \"\"\"\n+            public class Test {\n+                public record A(int i) {}\n+                public Integer get(A a) {\n+                    if (a instanceof A(int i)) {\n+                        return i;\n+                    }\n+                    return null;\n+                }\n+            }\n+            \"\"\";\n+\n+    @Test\n+    public void testNoUnusedVarInRecordPattern() {\n+        var testBytes = InMemoryJavaCompiler.compile(Map.of(\"Test\", SOURCE)).get(\"Test\");\n+        var code = ClassFile.of().parse(testBytes).methods().stream()\n+                .filter(m -> m.methodName().equalsString(\"get\")).findFirst()\n+                .orElseThrow().findAttribute(Attributes.code()).orElseThrow();\n+        BitSet stores = new BitSet(code.maxLocals());\n+        BitSet loads = new BitSet(code.maxLocals());\n+        code.forEach(ce -> {\n+            switch (ce) {\n+                case StoreInstruction store -> stores.set(store.slot());\n+                case LoadInstruction load -> loads.set(load.slot());\n+                default -> {}\n+            }\n+        });\n+        \/\/ [this, a] are built-in locals that may be unused\n+        loads.clear(0, 2);\n+        stores.clear(0, 2);\n+        if (!loads.equals(stores)) {\n+            System.err.println(\"Loads: \" + loads);\n+            System.err.println(\"Stores: \" + stores);\n+            System.err.println(code.toDebugString());\n+            fail(\"Store and load mismatch, see stderr\");\n+        }\n+    }\n+\n+    @Test\n+    public void testExpressionExecution() {\n+        int a = 0;\n+        boolean b = (a = 5) instanceof int;\n+        assertTrue(b);\n+        assertEquals(5, a);\n+        b = (a = -24) instanceof int cap;\n+        assertTrue(b);\n+        assertEquals(-24, a);\n+        b = (a = 42) instanceof long;\n+        assertTrue(b);\n+        assertEquals(42, a);\n+        b = (a = -28) instanceof double cap2;\n+        assertTrue(b);\n+        assertEquals(-28, a);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveUnconditionallyExactTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}