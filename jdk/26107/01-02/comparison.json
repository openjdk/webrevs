{"files":[{"patch":"@@ -2834,1 +2834,1 @@\n-            JCStatement sideEffect;\n+            JCStatement prefixStatement;\n@@ -2840,1 +2840,1 @@\n-                sideEffect = make.Exec(instanceOfExpr);\n+                prefixStatement = make.Exec(instanceOfExpr);\n@@ -2844,1 +2844,1 @@\n-                sideEffect = null;\n+                prefixStatement = null;\n@@ -2849,1 +2849,1 @@\n-                    sideEffect = null;\n+                    prefixStatement = null;\n@@ -2857,1 +2857,1 @@\n-                    sideEffect = make.at(tree.pos())\n+                    prefixStatement = make.at(tree.pos())\n@@ -2880,1 +2880,1 @@\n-                throw Assert.error(\"Non primitive or reference type\");\n+                throw Assert.error(\"Non primitive or reference type: \" + tree.expr.type);\n@@ -2882,1 +2882,1 @@\n-            result = (sideEffect == null ? exactnessCheck : make.LetExpr(List.of(sideEffect), exactnessCheck))\n+            result = (prefixStatement == null ? exactnessCheck : make.LetExpr(List.of(prefixStatement), exactnessCheck))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.util.BitSet;\n+import java.util.Map;\n+\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8357185\n+ * @enablePreview\n+ * @summary No unused local variable in unconditionally exact primitive patterns\n+ * @library \/test\/lib\n+ * @run junit PrimitiveInstanceOfBytecodeTest\n+ *\/\n+public class PrimitiveInstanceOfBytecodeTest {\n+\n+    private static final String SOURCE = \"\"\"\n+            public class Test {\n+                public record A(int i) {}\n+                public Integer get(A a) {\n+                    if (a instanceof A(int i)) {\n+                        return i;\n+                    }\n+                    return null;\n+                }\n+            }\n+            \"\"\";\n+\n+    @Test\n+    public void testNoUnusedVarInRecordPattern() {\n+        var testBytes = InMemoryJavaCompiler.compile(Map.of(\"Test\", SOURCE)).get(\"Test\");\n+        var code = ClassFile.of().parse(testBytes).methods().stream()\n+                .filter(m -> m.methodName().equalsString(\"get\")).findFirst()\n+                .orElseThrow().findAttribute(Attributes.code()).orElseThrow();\n+        BitSet stores = new BitSet(code.maxLocals());\n+        BitSet loads = new BitSet(code.maxLocals());\n+        code.forEach(ce -> {\n+            switch (ce) {\n+                case StoreInstruction store -> stores.set(store.slot());\n+                case LoadInstruction load -> loads.set(load.slot());\n+                default -> {}\n+            }\n+        });\n+        \/\/ [this, a] are built-in locals that may be unused\n+        loads.clear(0, 2);\n+        stores.clear(0, 2);\n+        if (!loads.equals(stores)) {\n+            System.err.println(\"Loads: \" + loads);\n+            System.err.println(\"Stores: \" + stores);\n+            System.err.println(code.toDebugString());\n+            fail(\"Store and load mismatch, see stderr\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfBytecodeTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.classfile.Attributes;\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.instruction.LoadInstruction;\n-import java.lang.classfile.instruction.StoreInstruction;\n-import java.util.BitSet;\n-import java.util.Map;\n-\n-import jdk.test.lib.compiler.InMemoryJavaCompiler;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-\/*\n- * @test\n- * @bug 8357185\n- * @enablePreview\n- * @summary Behaviors with unconditionally exact primitive patterns\n- * @library \/test\/lib\n- * @run junit PrimitiveUnconditionallyExactTest\n- *\/\n-public class PrimitiveUnconditionallyExactTest {\n-\n-    private static final String SOURCE = \"\"\"\n-            public class Test {\n-                public record A(int i) {}\n-                public Integer get(A a) {\n-                    if (a instanceof A(int i)) {\n-                        return i;\n-                    }\n-                    return null;\n-                }\n-            }\n-            \"\"\";\n-\n-    @Test\n-    public void testNoUnusedVarInRecordPattern() {\n-        var testBytes = InMemoryJavaCompiler.compile(Map.of(\"Test\", SOURCE)).get(\"Test\");\n-        var code = ClassFile.of().parse(testBytes).methods().stream()\n-                .filter(m -> m.methodName().equalsString(\"get\")).findFirst()\n-                .orElseThrow().findAttribute(Attributes.code()).orElseThrow();\n-        BitSet stores = new BitSet(code.maxLocals());\n-        BitSet loads = new BitSet(code.maxLocals());\n-        code.forEach(ce -> {\n-            switch (ce) {\n-                case StoreInstruction store -> stores.set(store.slot());\n-                case LoadInstruction load -> loads.set(load.slot());\n-                default -> {}\n-            }\n-        });\n-        \/\/ [this, a] are built-in locals that may be unused\n-        loads.clear(0, 2);\n-        stores.clear(0, 2);\n-        if (!loads.equals(stores)) {\n-            System.err.println(\"Loads: \" + loads);\n-            System.err.println(\"Stores: \" + stores);\n-            System.err.println(code.toDebugString());\n-            fail(\"Store and load mismatch, see stderr\");\n-        }\n-    }\n-\n-    @Test\n-    public void testExpressionExecution() {\n-        int a = 0;\n-        boolean b = (a = 5) instanceof int;\n-        assertTrue(b);\n-        assertEquals(5, a);\n-        b = (a = -24) instanceof int cap;\n-        assertTrue(b);\n-        assertEquals(-24, a);\n-        b = (a = 42) instanceof long;\n-        assertTrue(b);\n-        assertEquals(42, a);\n-        b = (a = -28) instanceof double cap2;\n-        assertTrue(b);\n-        assertEquals(-28, a);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveUnconditionallyExactTest.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"}]}