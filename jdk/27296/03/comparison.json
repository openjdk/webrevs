{"files":[{"patch":"@@ -175,1 +175,1 @@\n-     * where each day is 86400 seconds which implies a 24 hour day.\n+     * where each day is 86,400 seconds which implies a 24 hour day.\n@@ -190,1 +190,1 @@\n-     * where each hour is 3600 seconds.\n+     * where each hour is 3,600 seconds.\n@@ -378,2 +378,2 @@\n-     *    \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n-     *    \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+     *    \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3,600 seconds)\n+     *    \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86,400 seconds)\n@@ -480,1 +480,1 @@\n-     * To guarantee to obtain a positive duration call {@link #abs()} on the result.\n+     * To guarantee a positive or zero duration call {@link #abs()} on the result.\n@@ -755,1 +755,1 @@\n-     * The number of days is multiplied by 86400 to obtain the number of seconds to add.\n+     * The number of days is multiplied by 86,400 to obtain the number of seconds to add.\n@@ -896,1 +896,1 @@\n-     * The number of days is multiplied by 86400 to obtain the number of seconds to subtract.\n+     * The number of days is multiplied by 86,400 to obtain the number of seconds to subtract.\n@@ -912,1 +912,1 @@\n-     * The number of hours is multiplied by 3600 to obtain the number of seconds to subtract.\n+     * The number of hours is multiplied by 3,600 to obtain the number of seconds to subtract.\n@@ -927,1 +927,1 @@\n-     * The number of hours is multiplied by 60 to obtain the number of seconds to subtract.\n+     * The number of minutes is multiplied by 60 to obtain the number of seconds to subtract.\n@@ -1078,1 +1078,1 @@\n-     * Returns a copy of this duration with a positive length.\n+     * Returns a copy of this duration with a positive or zero length.\n@@ -1080,1 +1080,1 @@\n-     * This method returns a positive duration by effectively removing the sign from any negative total length.\n+     * This method returns a positive or zero duration by effectively removing the sign from any negative total length.\n@@ -1168,1 +1168,1 @@\n-     * number of seconds by 86400.\n+     * number of seconds by 86,400.\n@@ -1183,1 +1183,1 @@\n-     * number of seconds by 3600.\n+     * number of seconds by 3,600.\n@@ -1275,1 +1275,1 @@\n-     * number of seconds by 86400.\n+     * number of seconds by 86,400.\n@@ -1479,1 +1479,1 @@\n-     *    \"20.345 seconds\"                 -- \"PT20.345S\n+     *    \"20.345 seconds\"                 -- \"PT20.345S\"\n@@ -1481,2 +1481,2 @@\n-     *    \"10 hours\" (10 * 3600 seconds)   -- \"PT10H\"\n-     *    \"2 days\" (2 * 86400 seconds)     -- \"PT48H\"\n+     *    \"10 hours\" (10 * 3,600 seconds)  -- \"PT10H\"\n+     *    \"2 days\" (2 * 86,400 seconds)    -- \"PT48H\"\n","filename":"src\/java.base\/share\/classes\/java\/time\/Duration.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n- * forming a 86400 second day.\n+ * forming an 86,400 second day.\n@@ -121,1 +121,1 @@\n- * to be very close to the 86400th fraction of a day.\n+ * to be very close to the 86,400th fraction of a day.\n@@ -125,1 +125,1 @@\n- * As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n+ * As a result, the length of a solar day in 2012 is slightly longer than 86,400 SI seconds.\n@@ -134,1 +134,1 @@\n- * As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n+ * As such, UTC permits a day to have 86,399 SI seconds or 86,401 SI seconds where\n@@ -146,1 +146,1 @@\n- * The Java Time-Scale divides each calendar day into exactly 86400\n+ * The Java Time-Scale divides each calendar day into exactly 86,400\n@@ -174,1 +174,1 @@\n- * exactly 86400 seconds per day.\n+ * exactly 86,400 seconds per day.\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -768,1 +768,1 @@\n-     * @param daysToSubtract  the months to subtract, positive or negative\n+     * @param daysToSubtract  the days to subtract, positive or negative\n","filename":"src\/java.base\/share\/classes\/java\/time\/Period.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -420,1 +420,1 @@\n-     * The offset must be in the range {@code -18:00} to {@code +18:00}, which corresponds to -64800 to +64800.\n+     * The offset must be in the range {@code -18:00} to {@code +18:00}, which corresponds to -64,800 to +64,800.\n@@ -422,1 +422,1 @@\n-     * @param totalSeconds  the total time-zone offset in seconds, from -64800 to +64800\n+     * @param totalSeconds  the total time-zone offset in seconds, from -64,800 to +64,800\n@@ -453,1 +453,1 @@\n-     * @param totalSeconds  the total time-zone offset in seconds, from -64800 to +64800\n+     * @param totalSeconds  the total time-zone offset in seconds, from -64,800 to +64,800\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n- * used, typically \"summer\" time.. Two additional methods,\n+ * used, typically \"summer\" time. Two additional methods,\n@@ -249,1 +249,1 @@\n-     * The local date time and first combined to form a local date-time.\n+     * The local date and time are first combined to form a local date-time.\n@@ -266,1 +266,1 @@\n-     * @return the offset date-time, not null\n+     * @return the zoned date-time, not null\n@@ -336,1 +336,1 @@\n-     * @return the offset date-time, not null\n+     * @return the zoned date-time, not null\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n- * The classes defined here represent the principle date-time concepts,\n+ * The classes defined here represent the principal date-time concepts,\n@@ -153,1 +153,1 @@\n- * This stores a date like '11:30+01:00'.\n+ * This stores a time like '11:30+01:00'.\n@@ -171,1 +171,1 @@\n- * All calculations should check for numeric overflow and throw either an {@link java.lang.ArithmeticException}\n+ * All calculations check for numeric overflow and throw either an {@link java.lang.ArithmeticException}\n@@ -252,1 +252,1 @@\n- * As such, the main classes are ISO-only. The second principle is that most of those that want a\n+ * As such, the main classes are ISO-only. The second principle is that most of those who want a\n","filename":"src\/java.base\/share\/classes\/java\/time\/package-info.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -602,1 +602,1 @@\n-     * For example, during the winter Paris has an offset of {@code +01:00}, which is 3600 seconds.\n+     * For example, during the winter Paris has an offset of {@code +01:00}, which is 3,600 seconds.\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/ChronoField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n- * have a range of '1 - 7', despite that fact that values 3 and 5 are invalid.\n+ * have a range of '1 - 7', despite the fact that values 3 and 5 are invalid.\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/ValueRange.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}