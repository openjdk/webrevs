{"files":[{"patch":"@@ -202,1 +202,1 @@\n-            result.setRect(0, 0, -1, -1);\n+            result.setRect(0, 0, 0, 0);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CStrike.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1023,1 +1023,17 @@\n-}\n\\ No newline at end of file\n+    int MAX_SIZE = 1 << 30;\n+    if (bboxes) {\n+        for (int i = 0; i < count; i++) {\n+           if (bboxes[i].origin.x > (double)MAX_SIZE) bboxes[i].origin.x = 0;\n+           if (bboxes[i].origin.y > (double)MAX_SIZE) bboxes[i].origin.y = 0;\n+           if (bboxes[i].size.width > (double)MAX_SIZE) bboxes[i].size.width = 0;\n+           if (bboxes[i].size.height > (double)MAX_SIZE) bboxes[i].size.height = 0;\n+        }\n+    }\n+    if (advances) {\n+        for (int i = 0; i < count; i++) {\n+           if (advances[i].width > (double)MAX_SIZE) advances[i].width = 0;\n+           if (advances[i].height > (double)MAX_SIZE) advances[i].height = 0;\n+        }\n+    }\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/CGGlyphImages.m","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import sun.java2d.pipe.OutlineTextRenderer;\n@@ -110,0 +111,1 @@\n+    static final int MAX_IMAGE_SIZE = OutlineTextRenderer.THRESHHOLD;\n@@ -700,0 +702,14 @@\n+        if (intPtSize > MAX_IMAGE_SIZE) {\n+            Rectangle.Float obds = getGlyphOutlineBounds(glyphCode);\n+            if (obds.isEmpty()) {\n+                Rectangle bds = getGlyphOutline(glyphCode, pt.x, pt.y).getBounds();\n+                result.setBounds(bds);\n+            } else {\n+                result.x = (int)Math.floor(pt.x + obds.getX() + 0.5f);\n+                result.y = (int)Math.floor(pt.y + obds.getY() + 0.5f);\n+                result.width = (int)Math.floor(obds.getWidth() + 0.5f);\n+                result.height = (int)Math.floor(obds.getHeight() + 0.5f);\n+            }\n+            return;\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FileFontStrike.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -507,0 +507,2 @@\n+#define TOO_LARGE(a, b) (abs((int)(a \/ b)) > 32766)\n+\n@@ -518,0 +520,1 @@\n+        free(context);\n@@ -527,0 +530,4 @@\n+    if (ptsz > 16384) {\n+        ptsz = 16384;    \/\/ far enough from 32767\n+        fm = TEXT_FM_ON; \/\/ avoids calculations which might overflow\n+    }\n@@ -528,0 +535,7 @@\n+    if (TOO_LARGE(dmat[0], ptsz) || TOO_LARGE(dmat[1], ptsz) ||\n+        TOO_LARGE(dmat[2], ptsz) || TOO_LARGE(dmat[3], ptsz))\n+    {\n+        free(context);\n+        return (jlong)0;\n+    }\n+\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/freetypeScaler.c","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+\n+\/*\n+ * @test\n+ * @bug 8328896\n+ * @summary test that using very large font sizes used don't break later uses\n+ *\/\n+\n+public class ExtremeFontSizeTest {\n+\n+    static BufferedImage bi = new BufferedImage(1,1,1);\n+    static Graphics2D g2d = bi.createGraphics();\n+    static String testString = \"M\";\n+    static Font font = new Font(\"SansSerif\", Font.PLAIN, 12);\n+    static int fontSize = 0;\n+    static boolean failed = false;\n+    static int[] fontSizes = { 10, 12, 1000, 2000, 20000, 100000, 8 };\n+    static double[] scales = { 1.0, 900.0};\n+    static boolean[] fms = { false, true };\n+\n+    public static void main(String[] args) {\n+\n+        \/* run tests validating bounds etc are non-zero\n+         * then run with extreme scales for which zero is allowed - but not required\n+         * then run the first tests again to be sure they are still reasonable.\n+        *\/\n+        runTests();\n+        test(5_000_000, 10_000, false, testString, false);\n+        test(5_000_000, 10_000, true, testString, false);\n+        test(0, 0.00000001, false, testString, false);\n+        runTests();\n+\n+        if (failed) {\n+            throw new RuntimeException(\"Test failed. Check stdout log.\");\n+        }\n+    }\n+\n+    static void runTests() {\n+        for (int fontSize : fontSizes) {\n+            for (double scale : scales) {\n+                for (boolean fm : fms) {\n+                    test(fontSize, scale, fm, testString, true);\n+                }\n+            }\n+        }\n+    }\n+\n+    static void test(int size, double scale, boolean fm, String str, boolean checkAll) {\n+\n+        AffineTransform at = AffineTransform.getScaleInstance(scale, scale);\n+        FontRenderContext frc = new FontRenderContext(at, false, fm);\n+        font = font.deriveFont((float)size);\n+        g2d.setTransform(at);\n+        g2d.setFont(font);\n+        FontMetrics metrics = g2d.getFontMetrics();\n+        int height = metrics.getHeight();\n+        double width = font.getStringBounds(str, frc).getWidth();\n+\n+        GlyphVector gv = font.createGlyphVector(frc, str.toCharArray());\n+        Rectangle pixelBounds = gv.getPixelBounds(frc, 0, 0);\n+        Rectangle2D visualBounds = gv.getVisualBounds();\n+\n+        System.out.println(\"Test parameters: size=\"+size+\" scale=\"+scale+\" fm=\"+fm+\" str=\"+str);\n+        System.out.println(\"font height=\"+metrics.getHeight());\n+        System.out.println(\"string bounds width=\"+width);\n+        System.out.println(\"GlyphVector Pixel Bounds=\"+ pixelBounds);\n+        System.out.println(\"GlyphVector Visual Bounds=\"+ visualBounds);\n+\n+\n+        if (height < 0 || width < 0 || pixelBounds.getWidth() < 0 || visualBounds.getWidth() < 0) {\n+            failed = true;\n+            System.out.println(\" *** Unexpected negative size reported  *** \");\n+         }\n+         if (!checkAll) {\n+            System.out.println();\n+            return;\n+        }\n+\n+        if (height == 0 || width == 0 || (pixelBounds.isEmpty()) || visualBounds.isEmpty() ) {\n+            failed = true;\n+            System.out.println(\"Pixel bounds empty=\"+pixelBounds.isEmpty());\n+            System.out.println(\"Visual bounds empty=\"+visualBounds.isEmpty());\n+            System.out.println(\" *** RESULTS NOT AS EXPECTED  *** \");\n+        }\n+        System.out.println();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FontMetrics\/ExtremeFontSizeTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}