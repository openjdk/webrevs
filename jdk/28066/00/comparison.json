{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import com.sun.tools.javac.comp.Check.CheckContext;\n+import com.sun.tools.javac.comp.Check.NestedCheckContext;\n@@ -69,0 +71,1 @@\n+    final Check chk;\n@@ -87,0 +90,1 @@\n+        chk = Check.instance(context);\n@@ -195,0 +199,6 @@\n+                CheckContext recoveryCheckContext = new NestedCheckContext(todo.resultInfo.checkContext) {\n+                    @Override\n+                    public void report(JCDiagnostic.DiagnosticPosition pos, JCDiagnostic details) {\n+                        chk.basicHandler.report(pos, details);\n+                    }\n+                };\n@@ -196,1 +206,1 @@\n-                                 attr.new ResultInfo(todo.resultInfo.pkind, todo.resultInfo.pt.getReturnType(), todo.resultInfo.checkContext, todo.resultInfo.checkMode),\n+                                 attr.new ResultInfo(todo.resultInfo.pkind, todo.resultInfo.pt.getReturnType(), recoveryCheckContext, todo.resultInfo.checkMode),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrRecover.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8301580 8322159 8333107 8332230 8338678 8351260\n+ * @bug 8301580 8322159 8333107 8332230 8338678 8351260 8366196\n@@ -343,0 +343,54 @@\n+\n+\n+    @Test \/\/JDK-8366196\n+    public void testInferenceFailure() throws Exception {\n+        String code = \"\"\"\n+                      import module java.base;\n+                      public class Test {\n+                          public void test(Consumer<String> c) {\n+                            List.of(\"\")\n+                                .stream()\n+                                .filter(\n+                                    buildPredicate(\n+                                        String.class,\n+                                        \/\/missing supplier\n+                                        c,\n+                                        buildSupplier(\n+                                            \/\/ Missing: Class,\n+                                            Integer.class,\n+                                            String.class,\n+                                            i -> { int check; return i; })));\n+                          }\n+\n+                          private static <T> Predicate<T> buildPredicate(\n+                              Class<T> tClass,\n+                              Supplier<T> bSupplier,\n+                              Consumer<T> cConsumer,\n+                              Supplier<T> dSupplier) {\n+                            return null;\n+                          }\n+\n+                          private static <T, A, B> Supplier<String> buildSupplier(\n+                              Class<T> tClass, Class<A> aClass, Class<B> bClass,\n+                              Function<A, B> function) {\n+                            return null;\n+                          }\n+                      }\"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDshould-stop.at=FLOW\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Test.java:7:29: compiler.err.prob.found.req: (compiler.misc.infer.no.conforming.assignment.exists: T, (compiler.misc.inconvertible.types: java.util.function.Consumer<java.lang.String>, java.util.function.Supplier<T>))\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"}]}