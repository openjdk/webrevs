{"files":[{"patch":"@@ -945,6 +945,3 @@\n-    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n-    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n-    \/\/ races during updates for a lower probe effect.\n-    \/\/ This PerfData object can be used in parallel with a safepoint.\n-    \/\/ See the work around in PerfDataManager::destroy().\n-    OM_PERFDATA_OP(FutileWakeups, inc());\n+    \/\/ We are in safepoint safe state, so shutdown can remove the counter\n+    \/\/ under our feet. Make sure we make this access safely.\n+    OM_PERFDATA_SAFE_OP(FutileWakeups, inc());\n@@ -1074,5 +1071,0 @@\n-    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n-    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n-    \/\/ races during updates for a lower probe effect.\n-    \/\/ This PerfData object can be used in parallel with a safepoint.\n-    \/\/ See the work around in PerfDataManager::destroy().\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -205,0 +205,7 @@\n+  #define OM_PERFDATA_OP(f, op_str)                 \\\n+    do {                                            \\\n+      if (ObjectMonitor::_sync_ ## f != nullptr) {  \\\n+        ObjectMonitor::_sync_ ## f->op_str;         \\\n+      }                                             \\\n+    } while (0)\n+\n@@ -209,2 +216,1 @@\n-  \/\/\n-  #define OM_PERFDATA_OP(f, op_str)                 \\\n+  #define OM_PERFDATA_SAFE_OP(f, op_str)            \\\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -248,0 +248,12 @@\n+ * There are possible shutdown races between counter uses and counter\n+ * destruction code. Normal shutdown happens with taking VM_Exit safepoint\n+ * operation, so in the vast majority of uses this is not an issue. On the\n+ * paths where a concurrent access can still happen when VM is at safepoint,\n+ * use the following pattern to coordinate with shutdown:\n+ *\n+ * {\n+ *   GlobalCounter::CriticalSection cs(Thread::current());\n+ *   if (PerfDataManager::has_PerfData()) {\n+ *     <update-counter>\n+ *   }\n+ * }\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}