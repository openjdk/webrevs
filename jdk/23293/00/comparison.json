{"files":[{"patch":"@@ -61,0 +61,1 @@\n+#include \"utilities\/globalCounter.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -207,1 +207,2 @@\n-  \/\/ objects which can happen at normal VM shutdown.\n+  \/\/ objects which can happen at normal VM shutdown. Additionally, we\n+  \/\/ have to enter the critical section to resolve the deletion races.\n@@ -211,3 +212,5 @@\n-      if (ObjectMonitor::_sync_ ## f != nullptr &&  \\\n-          PerfDataManager::has_PerfData()) {        \\\n-        ObjectMonitor::_sync_ ## f->op_str;         \\\n+      if (ObjectMonitor::_sync_ ## f != nullptr) {  \\\n+        GlobalCounter::CriticalSection cs(Thread::current()); \\\n+        if (PerfDataManager::has_PerfData()) {      \\\n+          ObjectMonitor::_sync_ ## f->op_str;       \\\n+        }                                           \\\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/globalCounter.inline.hpp\"\n@@ -261,9 +262,7 @@\n-  \/\/ Clear the flag before we free the PerfData counters. Thus begins\n-  \/\/ the race between this thread and another thread that has just\n-  \/\/ queried PerfDataManager::has_PerfData() and gotten back 'true'.\n-  \/\/ The hope is that the other thread will finish its PerfData\n-  \/\/ manipulation before we free the memory. The two alternatives are\n-  \/\/ 1) leak the PerfData memory or 2) do some form of synchronized\n-  \/\/ access or check before every PerfData operation.\n-  _has_PerfData = false;\n-  os::naked_short_sleep(1);  \/\/ 1ms sleep to let other thread(s) run\n+  \/\/ About to delete the counters than might still be accessed by other threads.\n+  \/\/ The shutdown is performed in two stages: a) clear the flag to notify future\n+  \/\/ counter users that we are at shutdown; b) sync up with current users, waiting\n+  \/\/ for them to finish with counters.\n+  \/\/\n+  Atomic::store(&_has_PerfData, false);\n+  GlobalCounter::write_synchronize();\n@@ -296,1 +295,1 @@\n-    _has_PerfData = true;\n+    Atomic::release_store(&_has_PerfData, true);\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -791,1 +792,1 @@\n-    static bool has_PerfData() { return _has_PerfData; }\n+    static bool has_PerfData() { return Atomic::load_acquire(&_has_PerfData); }\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"utilities\/globalCounter.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}