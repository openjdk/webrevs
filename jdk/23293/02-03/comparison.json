{"files":[{"patch":"@@ -945,0 +945,3 @@\n+    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n+    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n+    \/\/ races during updates for a lower probe effect.\n@@ -1071,0 +1074,3 @@\n+    \/\/ Note that the counter is not protected by a lock or updated by atomics.\n+    \/\/ That is by design - we trade \"lossy\" counters which are exposed to\n+    \/\/ races during updates for a lower probe effect.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -205,0 +205,6 @@\n+  \/\/ Only perform a PerfData operation if the PerfData object has been\n+  \/\/ allocated and if the PerfDataManager has not freed the PerfData\n+  \/\/ objects which can happen at normal VM shutdown. This operation is\n+  \/\/ only safe when thread is not in safepoint-safe code, i.e. PerfDataManager\n+  \/\/ could not reach the safepoint and free the counter while we are using it.\n+  \/\/ If this is not guaranteed, use OM_PERFDATA_SAFE_OP instead.\n@@ -208,1 +214,3 @@\n-        ObjectMonitor::_sync_ ## f->op_str;         \\\n+        if (PerfDataManager::has_PerfData()) {      \\\n+          ObjectMonitor::_sync_ ## f->op_str;       \\\n+        }                                           \\\n@@ -215,1 +223,2 @@\n-  \/\/ have to enter the critical section to resolve the deletion races.\n+  \/\/ enter the critical section to resolve the race against PerfDataManager\n+  \/\/ entering the safepoint and deleting the counter during shutdown.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}