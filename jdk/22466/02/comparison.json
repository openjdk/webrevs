{"files":[{"patch":"@@ -42,8 +42,0 @@\n-  Address(Register b, Register i, address d = 0)\n-    : _base(b), _index(i), _disp((intptr_t)d) {\n-    assert(i == noreg || d == 0, \"can't have both\");\n-  }\n-\n-  Address(Register b, address d = 0)\n-    : _base(b), _index(noreg), _disp((intptr_t)d) {}\n-\n@@ -53,1 +45,1 @@\n-  Address(Register b, intptr_t d)\n+  Address(Register b, intptr_t d = 0)\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-  assert(_pc == *pc_addr || pc == *pc_addr || 0 == *pc_addr,\n+  assert(_pc == *pc_addr || pc == *pc_addr || nullptr == *pc_addr,\n@@ -321,1 +321,1 @@\n-  if (fp() == 0 || (intptr_t(fp()) & (wordSize-1)) != 0) {\n+  if (fp() == nullptr || (intptr_t(fp()) & (wordSize-1)) != 0) {\n@@ -324,1 +324,1 @@\n-  if (sp() == 0 || (intptr_t(sp()) & (wordSize-1)) != 0) {\n+  if (sp() == nullptr || (intptr_t(sp()) & (wordSize-1)) != 0) {\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3299,1 +3299,1 @@\n-  if (CompressedKlassPointers::base() != 0) {\n+  if (CompressedKlassPointers::base() != nullptr) {\n@@ -3359,1 +3359,1 @@\n-      (CompressedKlassPointers::base() == 0 && src != dst)) {  \/\/ Move required.\n+      (CompressedKlassPointers::base() == nullptr && src != dst)) {  \/\/ Move required.\n@@ -3363,1 +3363,1 @@\n-  if (CompressedKlassPointers::base() != 0) {\n+  if (CompressedKlassPointers::base() != nullptr) {\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  if (addr == 0 || ((intptr_t)addr & 3) != 0) {\n+  if (addr == nullptr || ((intptr_t)addr & 3) != 0) {\n@@ -118,1 +118,1 @@\n-    if (trampoline_stub_addr == 0)\n+    if (trampoline_stub_addr == nullptr)\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3341,1 +3341,1 @@\n-      if (entry_point == 0) entry_point = __ pc();\n+      if (entry_point == nullptr) entry_point = __ pc();\n@@ -3380,1 +3380,1 @@\n-      const address entry_point = !($meth$$method) ? 0 : (address)$meth$$method;\n+      const address entry_point = !($meth$$method) ? nullptr : (address)$meth$$method;\n@@ -3613,1 +3613,1 @@\n-    mtctr->add_req(0, loadConLNodes_Entry._last);\n+    mtctr->add_req(nullptr, loadConLNodes_Entry._last);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-  return 0;\n","filename":"src\/hotspot\/cpu\/ppc\/relocInfo_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-    address start = 0;\n+    address start = nullptr;\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2618,1 +2618,1 @@\n-  assert(branch_table[vtos] == 0, \"can't compute twice\");\n+  assert(branch_table[vtos] == nullptr, \"can't compute twice\");\n@@ -2626,1 +2626,1 @@\n-  assert(branch_table[dtos] == 0, \"can't compute twice\");\n+  assert(branch_table[dtos] == nullptr, \"can't compute twice\");\n@@ -2647,1 +2647,1 @@\n-  assert(branch_table[ftos] == 0, \"can't compute twice\");\n+  assert(branch_table[ftos] == nullptr, \"can't compute twice\");\n@@ -2668,1 +2668,1 @@\n-  assert(branch_table[itos] == 0, \"can't compute twice\");\n+  assert(branch_table[itos] == nullptr, \"can't compute twice\");\n@@ -2681,1 +2681,1 @@\n-  assert(branch_table[ltos] == 0, \"can't compute twice\");\n+  assert(branch_table[ltos] == nullptr, \"can't compute twice\");\n@@ -2694,1 +2694,1 @@\n-  assert(branch_table[btos] == 0, \"can't compute twice\");\n+  assert(branch_table[btos] == nullptr, \"can't compute twice\");\n@@ -2708,1 +2708,1 @@\n-  assert(branch_table[ztos] == 0, \"can't compute twice\");\n+  assert(branch_table[ztos] == nullptr, \"can't compute twice\");\n@@ -2722,1 +2722,1 @@\n-  assert(branch_table[ctos] == 0, \"can't compute twice\");\n+  assert(branch_table[ctos] == nullptr, \"can't compute twice\");\n@@ -2735,1 +2735,1 @@\n-  assert(branch_table[stos] == 0, \"can't compute twice\");\n+  assert(branch_table[stos] == nullptr, \"can't compute twice\");\n@@ -2748,1 +2748,1 @@\n-  assert(branch_table[atos] == 0, \"can't compute twice\");\n+  assert(branch_table[atos] == nullptr, \"can't compute twice\");\n@@ -2935,1 +2935,1 @@\n-  assert(branch_table[vtos] == 0, \"can't compute twice\");\n+  assert(branch_table[vtos] == nullptr, \"can't compute twice\");\n@@ -2943,1 +2943,1 @@\n-  assert(branch_table[dtos] == 0, \"can't compute twice\");\n+  assert(branch_table[dtos] == nullptr, \"can't compute twice\");\n@@ -2961,1 +2961,1 @@\n-  assert(branch_table[ftos] == 0, \"can't compute twice\");\n+  assert(branch_table[ftos] == nullptr, \"can't compute twice\");\n@@ -2977,1 +2977,1 @@\n-  assert(branch_table[itos] == 0, \"can't compute twice\");\n+  assert(branch_table[itos] == nullptr, \"can't compute twice\");\n@@ -2993,1 +2993,1 @@\n-  assert(branch_table[ltos] == 0, \"can't compute twice\");\n+  assert(branch_table[ltos] == nullptr, \"can't compute twice\");\n@@ -3009,1 +3009,1 @@\n-  assert(branch_table[btos] == 0, \"can't compute twice\");\n+  assert(branch_table[btos] == nullptr, \"can't compute twice\");\n@@ -3025,1 +3025,1 @@\n-  assert(branch_table[ztos] == 0, \"can't compute twice\");\n+  assert(branch_table[ztos] == nullptr, \"can't compute twice\");\n@@ -3042,1 +3042,1 @@\n-  assert(branch_table[ctos] == 0, \"can't compute twice\");\n+  assert(branch_table[ctos] == nullptr, \"can't compute twice\");\n@@ -3058,1 +3058,1 @@\n-  assert(branch_table[stos] == 0, \"can't compute twice\");\n+  assert(branch_table[stos] == nullptr, \"can't compute twice\");\n@@ -3074,1 +3074,1 @@\n-  assert(branch_table[atos] == 0, \"can't compute twice\");\n+  assert(branch_table[atos] == nullptr, \"can't compute twice\");\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -426,1 +426,1 @@\n-      if (strstr(line, \"qemu\") != 0) {\n+      if (strstr(line, \"qemu\") != nullptr) {\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}