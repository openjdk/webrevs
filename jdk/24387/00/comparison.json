{"files":[{"patch":"@@ -313,0 +313,10 @@\n+void EpsilonHeap::print_on_error(outputStream *st) const {\n+  print_on(st);\n+  st->cr();\n+\n+  BarrierSet* bs = BarrierSet::barrier_set();\n+  if (bs != nullptr) {\n+    bs->print_on(st);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,0 +135,1 @@\n+  void print_on_error(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2164,1 +2164,7 @@\n-  this->CollectedHeap::print_on_error(st);\n+  print_extended_on(st);\n+  st->cr();\n+\n+  BarrierSet* bs = BarrierSet::barrier_set();\n+  if (bs != nullptr) {\n+    bs->print_on(st);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1316,1 +1316,1 @@\n-  void print_extended_on(outputStream* st) const override;\n+  void print_extended_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -676,1 +676,7 @@\n-  this->CollectedHeap::print_on_error(st);\n+  print_on(st);\n+  st->cr();\n+\n+  BarrierSet* bs = BarrierSet::barrier_set();\n+  if (bs != nullptr) {\n+    bs->print_on(st);\n+  }\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -813,0 +813,10 @@\n+void SerialHeap::print_on_error(outputStream* st) const {\n+  print_on(st);\n+  st->cr();\n+\n+  BarrierSet* bs = BarrierSet::barrier_set();\n+  if (bs != nullptr) {\n+    bs->print_on(st);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,0 +210,1 @@\n+  void print_on_error(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -191,11 +191,0 @@\n-void CollectedHeap::print_on_error(outputStream* st) const {\n-  st->print_cr(\"Heap:\");\n-  print_extended_on(st);\n-  st->cr();\n-\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  if (bs != nullptr) {\n-    bs->print_on(st);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -443,9 +443,1 @@\n-  \/\/ Print more detailed heap information on the given\n-  \/\/ outputStream. The default behavior is to call print_on(). It is\n-  \/\/ up to each subclass to override it and add any additional output\n-  \/\/ it needs.\n-  virtual void print_extended_on(outputStream* st) const {\n-    print_on(st);\n-  }\n-\n-  virtual void print_on_error(outputStream* st) const;\n+  virtual void print_on_error(outputStream* st) const = 0;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -652,0 +652,6 @@\n+void ShenandoahHeap::print_on_error(outputStream* st) const {\n+  print_on(st);\n+  st->cr();\n+  print_heap_regions_on(st);\n+}\n+\n@@ -2585,6 +2591,0 @@\n-void ShenandoahHeap::print_extended_on(outputStream *st) const {\n-  print_on(st);\n-  st->cr();\n-  print_heap_regions_on(st);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,1 +206,1 @@\n-  void print_extended_on(outputStream *st)     const override;\n+  void print_on_error(outputStream *st)        const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -362,27 +362,1 @@\n-  st->print_cr(\"ZGC Globals:\");\n-  st->print_cr(\" Young Collection:   %s\/%u\", ZGeneration::young()->phase_to_string(), ZGeneration::young()->seqnum());\n-  st->print_cr(\" Old Collection:     %s\/%u\", ZGeneration::old()->phase_to_string(), ZGeneration::old()->seqnum());\n-  st->print_cr(\" Offset Max:         \" EXACTFMT \" (\" PTR_FORMAT \")\", EXACTFMTARGS(ZAddressOffsetMax), ZAddressOffsetMax);\n-  st->print_cr(\" Page Size Small:    %zuM\", ZPageSizeSmall \/ M);\n-  st->print_cr(\" Page Size Medium:   %zuM\", ZPageSizeMedium \/ M);\n-  st->cr();\n-  st->print_cr(\"ZGC Metadata Bits:\");\n-  st->print_cr(\" LoadGood:           \" PTR_FORMAT, ZPointerLoadGoodMask);\n-  st->print_cr(\" LoadBad:            \" PTR_FORMAT, ZPointerLoadBadMask);\n-  st->print_cr(\" MarkGood:           \" PTR_FORMAT, ZPointerMarkGoodMask);\n-  st->print_cr(\" MarkBad:            \" PTR_FORMAT, ZPointerMarkBadMask);\n-  st->print_cr(\" StoreGood:          \" PTR_FORMAT, ZPointerStoreGoodMask);\n-  st->print_cr(\" StoreBad:           \" PTR_FORMAT, ZPointerStoreBadMask);\n-  st->print_cr(\" ------------------- \");\n-  st->print_cr(\" Remapped:           \" PTR_FORMAT, ZPointerRemapped);\n-  st->print_cr(\" RemappedYoung:      \" PTR_FORMAT, ZPointerRemappedYoungMask);\n-  st->print_cr(\" RemappedOld:        \" PTR_FORMAT, ZPointerRemappedOldMask);\n-  st->print_cr(\" MarkedYoung:        \" PTR_FORMAT, ZPointerMarkedYoung);\n-  st->print_cr(\" MarkedOld:          \" PTR_FORMAT, ZPointerMarkedOld);\n-  st->print_cr(\" Remembered:         \" PTR_FORMAT, ZPointerRemembered);\n-  st->cr();\n-  CollectedHeap::print_on_error(st);\n-}\n-\n-void ZCollectedHeap::print_extended_on(outputStream* st) const {\n-  _heap.print_extended_on(st);\n+  _heap.print_on_error(st);\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,0 @@\n-  void print_extended_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-void ZHeap::print_extended_on(outputStream* st) const {\n+void ZHeap::print_on_error(outputStream* st) const {\n@@ -333,0 +333,31 @@\n+  print_globals_on(st);\n+  st->cr();\n+\n+  print_page_table_on(st);\n+}\n+\n+void ZHeap::print_globals_on(outputStream* st) const {\n+  st->print_cr(\"ZGC Globals:\");\n+  st->print_cr(\" Young Collection:   %s\/%u\", ZGeneration::young()->phase_to_string(), ZGeneration::young()->seqnum());\n+  st->print_cr(\" Old Collection:     %s\/%u\", ZGeneration::old()->phase_to_string(), ZGeneration::old()->seqnum());\n+  st->print_cr(\" Offset Max:         \" EXACTFMT \" (\" PTR_FORMAT \")\", EXACTFMTARGS(ZAddressOffsetMax), ZAddressOffsetMax);\n+  st->print_cr(\" Page Size Small:    %zuM\", ZPageSizeSmall \/ M);\n+  st->print_cr(\" Page Size Medium:   %zuM\", ZPageSizeMedium \/ M);\n+  st->cr();\n+  st->print_cr(\"ZGC Metadata Bits:\");\n+  st->print_cr(\" LoadGood:           \" PTR_FORMAT, ZPointerLoadGoodMask);\n+  st->print_cr(\" LoadBad:            \" PTR_FORMAT, ZPointerLoadBadMask);\n+  st->print_cr(\" MarkGood:           \" PTR_FORMAT, ZPointerMarkGoodMask);\n+  st->print_cr(\" MarkBad:            \" PTR_FORMAT, ZPointerMarkBadMask);\n+  st->print_cr(\" StoreGood:          \" PTR_FORMAT, ZPointerStoreGoodMask);\n+  st->print_cr(\" StoreBad:           \" PTR_FORMAT, ZPointerStoreBadMask);\n+  st->print_cr(\" ------------------- \");\n+  st->print_cr(\" Remapped:           \" PTR_FORMAT, ZPointerRemapped);\n+  st->print_cr(\" RemappedYoung:      \" PTR_FORMAT, ZPointerRemappedYoungMask);\n+  st->print_cr(\" RemappedOld:        \" PTR_FORMAT, ZPointerRemappedOldMask);\n+  st->print_cr(\" MarkedYoung:        \" PTR_FORMAT, ZPointerMarkedYoung);\n+  st->print_cr(\" MarkedOld:          \" PTR_FORMAT, ZPointerMarkedOld);\n+  st->print_cr(\" Remembered:         \" PTR_FORMAT, ZPointerRemembered);\n+}\n+\n+void ZHeap::print_page_table_on(outputStream* st) const {\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,1 +135,3 @@\n-  void print_extended_on(outputStream* st) const;\n+  void print_on_error(outputStream* st) const;\n+  void print_globals_on(outputStream* st) const;\n+  void print_page_table_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1194,0 +1194,1 @@\n+      st->print_cr(\"Heap:\");\n@@ -1377,0 +1378,1 @@\n+    st->print_cr(\"Heap:\");\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}