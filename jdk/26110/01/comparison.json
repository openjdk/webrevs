{"files":[{"patch":"@@ -41,1 +41,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n+#include \"classfile\/classLoader.hpp\"\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/dynamicArchive.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n@@ -1286,1 +1286,41 @@\n-  ClassLoaderExt::record_result_for_builtin_loader(checked_cast<s2>(classpath_index), ik, redefined);\n+  record_result_for_builtin_loader(checked_cast<s2>(classpath_index), ik, redefined);\n+}\n+\n+void ClassLoader::record_result_for_builtin_loader(s2 classpath_index, InstanceKlass* result, bool redefined) {\n+  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n+\n+  oop loader = result->class_loader();\n+  if (SystemDictionary::is_system_class_loader(loader)) {\n+    AOTClassLocationConfig::dumptime_set_has_app_classes();\n+  } else if (SystemDictionary::is_platform_class_loader(loader)) {\n+    AOTClassLocationConfig::dumptime_set_has_platform_classes();\n+  } else {\n+    precond(loader == nullptr);\n+  }\n+\n+  if (CDSConfig::is_dumping_preimage_static_archive() || CDSConfig::is_dumping_dynamic_archive()) {\n+    if (!AOTClassLocationConfig::dumptime()->is_valid_classpath_index(classpath_index, result)) {\n+      classpath_index = -1;\n+    }\n+  }\n+\n+  AOTClassLocationConfig::dumptime_update_max_used_index(classpath_index);\n+  result->set_shared_classpath_index(classpath_index);\n+\n+#if INCLUDE_CDS_JAVA_HEAP\n+  if (CDSConfig::is_dumping_heap() && AllowArchivingWithJavaAgent && result->defined_by_boot_loader() &&\n+      classpath_index < 0 && redefined) {\n+    \/\/ When dumping the heap (which happens only during static dump), classes for the built-in\n+    \/\/ loaders are always loaded from known locations (jimage, classpath or modulepath),\n+    \/\/ so classpath_index should always be >= 0.\n+    \/\/ The only exception is when a java agent is used during dump time (for testing\n+    \/\/ purposes only). If a class is transformed by the agent, the AOTClassLocation of\n+    \/\/ this class may point to an unknown location. This may break heap object archiving,\n+    \/\/ which requires all the boot classes to be from known locations. This is an\n+    \/\/ uncommon scenario (even in test cases). Let's simply disable heap object archiving.\n+    ResourceMark rm;\n+    log_warning(aot)(\"heap objects cannot be written because class %s maybe modified by ClassFileLoadHook.\",\n+                     result->external_name());\n+    CDSConfig::disable_heap_dumping();\n+  }\n+#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n@@ -1311,0 +1351,11 @@\n+\n+void ClassLoader::append_boot_classpath(ClassPathEntry* new_entry) {\n+  if (CDSConfig::is_using_archive()) {\n+    warning(\"Sharing is only supported for boot loader classes because bootstrap classpath has been appended\");\n+    FileMapInfo::current_info()->set_has_platform_or_app_classes(false);\n+    if (DynamicArchive::is_mapped()) {\n+      FileMapInfo::dynamic_info()->set_has_platform_or_app_classes(false);\n+    }\n+  }\n+  add_to_boot_append_entries(new_entry);\n+}\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -348,0 +348,1 @@\n+  static void record_result_for_builtin_loader(s2 classpath_index, InstanceKlass* result, bool redefined);\n@@ -349,0 +350,1 @@\n+  static void append_boot_classpath(ClassPathEntry* new_entry);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"cds\/aotClassLocation.hpp\"\n-#include \"cds\/cds_globals.hpp\"\n-#include \"cds\/cdsConfig.hpp\"\n-#include \"cds\/dynamicArchive.hpp\"\n-#include \"cds\/filemap.hpp\"\n-#include \"cds\/heapShared.hpp\"\n-#include \"classfile\/classFileParser.hpp\"\n-#include \"classfile\/classLoader.inline.hpp\"\n-#include \"classfile\/classLoaderExt.hpp\"\n-#include \"classfile\/classLoaderData.inline.hpp\"\n-#include \"classfile\/classLoadInfo.hpp\"\n-#include \"classfile\/klassFactory.hpp\"\n-#include \"classfile\/modules.hpp\"\n-#include \"classfile\/systemDictionary.hpp\"\n-#include \"classfile\/vmSymbols.hpp\"\n-#include \"gc\/shared\/collectedHeap.hpp\"\n-#include \"logging\/log.hpp\"\n-#include \"memory\/allocation.inline.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-#include \"oops\/instanceKlass.hpp\"\n-#include \"oops\/klass.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-#include \"oops\/symbol.hpp\"\n-#include \"runtime\/arguments.hpp\"\n-#include \"runtime\/handles.inline.hpp\"\n-#include \"runtime\/java.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"utilities\/checkedCast.hpp\"\n-#include \"utilities\/stringUtils.hpp\"\n-\n-void ClassLoaderExt::append_boot_classpath(ClassPathEntry* new_entry) {\n-  if (CDSConfig::is_using_archive()) {\n-    warning(\"Sharing is only supported for boot loader classes because bootstrap classpath has been appended\");\n-    FileMapInfo::current_info()->set_has_platform_or_app_classes(false);\n-    if (DynamicArchive::is_mapped()) {\n-      FileMapInfo::dynamic_info()->set_has_platform_or_app_classes(false);\n-    }\n-  }\n-  ClassLoader::add_to_boot_append_entries(new_entry);\n-}\n-\n-int ClassLoaderExt::compare_module_names(const char** p1, const char** p2) {\n-  return strcmp(*p1, *p2);\n-}\n-\n-void ClassLoaderExt::record_result_for_builtin_loader(s2 classpath_index, InstanceKlass* result, bool redefined) {\n-  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n-\n-  oop loader = result->class_loader();\n-  if (SystemDictionary::is_system_class_loader(loader)) {\n-    AOTClassLocationConfig::dumptime_set_has_app_classes();\n-  } else if (SystemDictionary::is_platform_class_loader(loader)) {\n-    AOTClassLocationConfig::dumptime_set_has_platform_classes();\n-  } else {\n-    precond(loader == nullptr);\n-  }\n-\n-  if (CDSConfig::is_dumping_preimage_static_archive() || CDSConfig::is_dumping_dynamic_archive()) {\n-    if (!AOTClassLocationConfig::dumptime()->is_valid_classpath_index(classpath_index, result)) {\n-      classpath_index = -1;\n-    }\n-  }\n-\n-  AOTClassLocationConfig::dumptime_update_max_used_index(classpath_index);\n-  result->set_shared_classpath_index(classpath_index);\n-\n-#if INCLUDE_CDS_JAVA_HEAP\n-  if (CDSConfig::is_dumping_heap() && AllowArchivingWithJavaAgent && result->defined_by_boot_loader() &&\n-      classpath_index < 0 && redefined) {\n-    \/\/ When dumping the heap (which happens only during static dump), classes for the built-in\n-    \/\/ loaders are always loaded from known locations (jimage, classpath or modulepath),\n-    \/\/ so classpath_index should always be >= 0.\n-    \/\/ The only exception is when a java agent is used during dump time (for testing\n-    \/\/ purposes only). If a class is transformed by the agent, the AOTClassLocation of\n-    \/\/ this class may point to an unknown location. This may break heap object archiving,\n-    \/\/ which requires all the boot classes to be from known locations. This is an\n-    \/\/ uncommon scenario (even in test cases). Let's simply disable heap object archiving.\n-    ResourceMark rm;\n-    log_warning(aot)(\"heap objects cannot be written because class %s maybe modified by ClassFileLoadHook.\",\n-                     result->external_name());\n-    CDSConfig::disable_heap_dumping();\n-  }\n-#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n-}\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_CLASSFILE_CLASSLOADEREXT_HPP\n-#define SHARE_CLASSFILE_CLASSLOADEREXT_HPP\n-\n-#include \"classfile\/classLoader.hpp\"\n-#include \"classfile\/moduleEntry.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-class ClassListParser;\n-\n-class ClassLoaderExt: public ClassLoader { \/\/ AllStatic\n-public:\n-#if INCLUDE_CDS\n-public:\n-  \/\/ Called by JVMTI code to add boot classpath\n-\n-  static void append_boot_classpath(ClassPathEntry* new_entry);\n-\n-  static int compare_module_names(const char** p1, const char** p2);\n-  static void record_result_for_builtin_loader(s2 classpath_index, InstanceKlass* result, bool redefined);\n-#endif \/\/ INCLUDE_CDS\n-};\n-\n-#endif \/\/ SHARE_CLASSFILE_CLASSLOADEREXT_HPP\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n@@ -628,0 +627,5 @@\n+\n+static int compare_module_names(const char** p1, const char** p2) {\n+  return strcmp(*p1, *p2);\n+}\n+\n@@ -668,1 +672,1 @@\n-  list.sort(ClassLoaderExt::compare_module_names);\n+  list.sort(compare_module_names);\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"classfile\/classLoaderExt.hpp\"\n@@ -678,1 +677,1 @@\n-    ClassLoaderExt::append_boot_classpath(zip_entry);\n+    ClassLoader::append_boot_classpath(zip_entry);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}