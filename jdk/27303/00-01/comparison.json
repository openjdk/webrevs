{"files":[{"patch":"@@ -2256,8 +2256,8 @@\n-\/\/ All functions from this section should call the jvmtiThreadSate function:\n-\/\/   Klass* class_to_verify_considering_redefinition(Klass* klass).\n-\/\/ The function returns a Klass* of the _scratch_class if the verifier\n-\/\/ was invoked in the middle of the class redefinition.\n-\/\/ Otherwise it returns its argument value which is the _the_class Klass*.\n-\/\/ Please, refer to the description in the jvmtiThreadState.hpp.\n-\n-inline Klass* get_klass_considering_redefinition(jclass cls, JavaThread *thread) {\n+\/\/ All functions from this section, unless noted otherwise, should call the functions\n+\/\/   get_klass_considering_redefinition(), or\n+\/\/   get_instance_klass_considering_redefinition()\n+\/\/ These function return JvmtiThreadState::_scratch_class if the verifier\n+\/\/ was invoked in the middle of the redefinition of cls.\n+\/\/ See jvmtiThreadState.hpp for details.\n+\n+inline Klass* get_klass_considering_redefinition(jclass cls, JavaThread* thread) {\n@@ -2265,2 +2265,5 @@\n-  k = JvmtiThreadState::class_to_verify_considering_redefinition(k, thread);\n-  return k;\n+  if (k->is_instance_klass()) {\n+    return JvmtiThreadState::class_to_verify_considering_redefinition(InstanceKlass::cast(k), thread);\n+  } else {\n+    return k;\n+  }\n@@ -2269,1 +2272,1 @@\n-inline InstanceKlass* get_instance_klass_considering_redefinition(jclass cls, JavaThread *thread) {\n+inline InstanceKlass* get_instance_klass_considering_redefinition(jclass cls, JavaThread* thread) {\n@@ -2271,2 +2274,1 @@\n-  ik = JvmtiThreadState::class_to_verify_considering_redefinition(ik, thread);\n-  return ik;\n+  return JvmtiThreadState::class_to_verify_considering_redefinition(ik, thread);\n@@ -2281,1 +2283,1 @@\n-  \/\/ This isn't necessary since answer is the same since redefinition\n+  \/\/ This isn't necessary since answer is the same because redefinition\n@@ -2283,1 +2285,1 @@\n-  \/\/ k = JvmtiThreadState::class_to_verify_considering_redefinition(k, thread);\n+  \/\/ k = get_klass_considering_redefinition(cls, thread)\n@@ -2291,1 +2293,2 @@\n-  Klass* k = get_klass_considering_redefinition(cls, thread);\n+  \/\/ No need to call get_klass_considering_redefinition() as redefinition cannot change a class's name.\n+  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(cls));\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"oops\/oopHandle.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"oops\/oopHandle.hpp\"\n@@ -436,13 +436,0 @@\n-  static inline\n-  Klass* class_to_verify_considering_redefinition(Klass* klass,\n-                                                  JavaThread *thread) {\n-    if (!klass->is_instance_klass()) {\n-      \/\/ set_class_being_redefined() records ONLY InstanceKlass* that are being redefined, so\n-      \/\/ other Klasses will never match.\n-      return klass;\n-    } else {\n-      return class_to_verify_considering_redefinition(InstanceKlass::cast(klass),\n-                                                      thread);\n-    }\n-  }\n-\n@@ -451,1 +438,1 @@\n-                                                          JavaThread *thread) {\n+                                                          JavaThread* thread) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"}]}