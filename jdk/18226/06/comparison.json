{"files":[{"patch":"@@ -3882,1 +3882,1 @@\n- * r5: zlen\n+ * r5: tmp0\n@@ -3893,1 +3893,1 @@\n-                                     Register z, Register zlen,\n+                                     Register z, Register tmp0,\n@@ -3897,1 +3897,1 @@\n-  assert_different_registers(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6);\n+  assert_different_registers(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, product_hi);\n@@ -3906,1 +3906,1 @@\n-  const Register x_xstart = zlen;  \/\/ reuse register\n+  const Register x_xstart = tmp0;\n@@ -3922,3 +3922,3 @@\n-  movw(idx, ylen);      \/\/ idx = ylen;\n-  movw(kdx, zlen);      \/\/ kdx = xlen+ylen;\n-  mov(carry, zr);       \/\/ carry = 0;\n+  movw(idx, ylen);       \/\/ idx = ylen;\n+  addw(kdx, xlen, ylen); \/\/ kdx = xlen+ylen;\n+  mov(carry, zr);        \/\/ carry = 0;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1513,1 +1513,1 @@\n-                       Register zlen, Register tmp1, Register tmp2, Register tmp3,\n+                       Register tmp0, Register tmp1, Register tmp2, Register tmp3,\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4648,1 +4648,0 @@\n-   *    c_rarg5   - z length\n@@ -4660,1 +4659,0 @@\n-    const Register zlen  = r5;\n@@ -4662,0 +4660,1 @@\n+    const Register tmp0  = r5;\n@@ -4672,1 +4671,1 @@\n-    __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n+    __ multiply_to_len(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n@@ -4690,1 +4689,0 @@\n-    const Register zlen  = r3;\n@@ -4694,0 +4692,1 @@\n+    const Register tmp0  = r3;\n@@ -4708,1 +4707,1 @@\n-    __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n+    __ multiply_to_len(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3901,1 +3901,1 @@\n-                                     Register z, Register zlen,\n+                                     Register z,\n@@ -3912,1 +3912,1 @@\n-  assert_different_registers(x, xlen, y, ylen, z, zlen,\n+  assert_different_registers(x, xlen, y, ylen, z,\n@@ -3914,1 +3914,1 @@\n-  assert_different_registers(x, xlen, y, ylen, z, zlen,\n+  assert_different_registers(x, xlen, y, ylen, z,\n@@ -3916,1 +3916,1 @@\n-  assert_different_registers(x, xlen, y, ylen, z, zlen,\n+  assert_different_registers(x, xlen, y, ylen, z,\n@@ -3944,1 +3944,1 @@\n-  mr_if_needed(kdx, zlen);        \/\/ kdx = xlen + ylen\n+  add(kdx, xlen, ylen);           \/\/ kdx = xlen + ylen\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -787,1 +787,1 @@\n-                       Register z, Register zlen,\n+                       Register z,\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3207,1 +3207,0 @@\n-  \/\/    R8 - z length\n@@ -3220,1 +3219,0 @@\n-    const Register zlen  = R8;\n@@ -3243,1 +3241,0 @@\n-    __ clrldi(zlen, zlen, 32);\n@@ -3256,1 +3253,1 @@\n-    __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5,\n+    __ multiply_to_len(x, xlen, y, ylen, z, tmp1, tmp2, tmp3, tmp4, tmp5,\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4123,1 +4123,1 @@\n- * x15: zlen\n+ * x15: tmp0\n@@ -4133,1 +4133,1 @@\n-                                     Register z, Register zlen,\n+                                     Register z, Register tmp0,\n@@ -4136,1 +4136,1 @@\n-  assert_different_registers(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6);\n+  assert_different_registers(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6);\n@@ -4145,1 +4145,1 @@\n-  const Register x_xstart = zlen; \/\/ reuse register\n+  const Register x_xstart = tmp0;\n@@ -4147,3 +4147,3 @@\n-  mv(idx, ylen); \/\/ idx = ylen;\n-  mv(kdx, zlen); \/\/ kdx = xlen+ylen;\n-  mv(carry, zr); \/\/ carry = 0;\n+  mv(idx, ylen);         \/\/ idx = ylen;\n+  addw(kdx, xlen, ylen); \/\/ kdx = xlen+ylen;\n+  mv(carry, zr);         \/\/ carry = 0;\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1290,1 +1290,1 @@\n-                       Register z, Register zlen,\n+                       Register z, Register tmp0,\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2843,1 +2843,0 @@\n-   *    c_rarg5   - z length\n@@ -2856,1 +2855,0 @@\n-    const Register zlen  = x15;\n@@ -2858,0 +2856,1 @@\n+    const Register tmp0  = x15;\n@@ -2868,1 +2867,1 @@\n-    __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n+    __ multiply_to_len(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n@@ -2884,1 +2883,0 @@\n-    const Register zlen  = x13;\n@@ -2888,0 +2886,1 @@\n+    const Register tmp0  = x13; \/\/ zlen, unused\n@@ -2900,1 +2899,1 @@\n-    __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n+    __ multiply_to_len(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -5284,3 +5284,0 @@\n-  \/\/ In openJdk, we store the argument as 32-bit value to slot.\n-  Address zlen(Z_SP, _z_abi(remaining_cargs));  \/\/ Int in long on big endian.\n-\n@@ -5311,1 +5308,1 @@\n-  z_llgf(kdx, zlen);         \/\/ C2 does not respect int to long conversion for stub calls, thus load zero-extended.\n+  z_agrk(kdx, xlen, ylen);   \/\/ kdx = xlen + ylen\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2984,1 +2984,0 @@\n-  \/\/   160[Z_SP] - z length\n@@ -2996,2 +2995,0 @@\n-    \/\/ zlen is passed on the stack:\n-    \/\/ Address zlen(Z_SP, _z_abi(remaining_cargs));\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -6986,1 +6986,1 @@\n- * r11: zlen\n+ * r11: tmp0\n@@ -6994,1 +6994,1 @@\n-void MacroAssembler::multiply_to_len(Register x, Register xlen, Register y, Register ylen, Register z, Register zlen,\n+void MacroAssembler::multiply_to_len(Register x, Register xlen, Register y, Register ylen, Register z, Register tmp0,\n@@ -6997,1 +6997,1 @@\n-  assert_different_registers(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, rdx);\n+  assert_different_registers(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, rdx);\n@@ -6999,0 +6999,1 @@\n+  push(tmp0);\n@@ -7006,1 +7007,0 @@\n-  push(zlen);\n@@ -7015,1 +7015,1 @@\n-  const Register x_xstart = zlen;  \/\/ reuse register\n+  const Register x_xstart = tmp0;\n@@ -7031,3 +7031,3 @@\n-  movl(idx, ylen);      \/\/ idx = ylen;\n-  movl(kdx, zlen);      \/\/ kdx = xlen+ylen;\n-  xorq(carry, carry);   \/\/ carry = 0;\n+  movl(idx, ylen);               \/\/ idx = ylen;\n+  lea(kdx, Address(xlen, ylen)); \/\/ kdx = xlen+ylen;\n+  xorq(carry, carry);            \/\/ carry = 0;\n@@ -7137,1 +7137,0 @@\n-  pop(zlen);\n@@ -7145,0 +7144,1 @@\n+  pop(tmp0);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2021,1 +2021,1 @@\n-  void multiply_to_len(Register x, Register xlen, Register y, Register ylen, Register z, Register zlen,\n+  void multiply_to_len(Register x, Register xlen, Register y, Register ylen, Register z, Register tmp0,\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3047,1 +3047,0 @@\n- *    c_rarg5   - z length\n@@ -3050,1 +3049,0 @@\n- *    rsp+48    - z length\n@@ -3064,1 +3062,0 @@\n-  const Register zlen  = r11;\n@@ -3067,0 +3064,1 @@\n+  const Register tmp0  = r11;\n@@ -3076,3 +3074,0 @@\n-#ifndef _WIN64\n-  __ movptr(zlen, r9); \/\/ Save r9 in r11 - zlen\n-#endif\n@@ -3080,1 +3075,1 @@\n-                     \/\/ ylen => rcx, z => r8, zlen => r11\n+                     \/\/ ylen => rcx, z => r8\n@@ -3083,1 +3078,1 @@\n-  \/\/ last 2 arguments (#4, #5) are on stack on Win64\n+  \/\/ last argument (#4) is on stack on Win64\n@@ -3085,1 +3080,0 @@\n-  __ movptr(zlen, Address(rsp, 7 * wordSize));\n@@ -3090,1 +3084,1 @@\n-  __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5);\n+  __ multiply_to_len(x, xlen, y, ylen, z, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -5981,5 +5981,4 @@\n-  \/\/ Set the original stack and the reexecute bit for the interpreter to reexecute\n-  \/\/ the bytecode that invokes BigInteger.multiplyToLen() if deoptimization happens\n-  \/\/ on the return from z array allocation in runtime.\n-  { PreserveReexecuteState preexecs(this);\n-    jvms()->set_should_reexecute(true);\n+  Node* x_start = array_element_address(x, intcon(0), x_elem);\n+  Node* y_start = array_element_address(y, intcon(0), y_elem);\n+  \/\/ 'x_start' points to x array + scaled xlen\n+  \/\/ 'y_start' points to y array + scaled ylen\n@@ -5987,4 +5986,1 @@\n-    Node* x_start = array_element_address(x, intcon(0), x_elem);\n-    Node* y_start = array_element_address(y, intcon(0), y_elem);\n-    \/\/ 'x_start' points to x array + scaled xlen\n-    \/\/ 'y_start' points to y array + scaled ylen\n+  Node* z_start = array_element_address(z, intcon(0), T_INT);\n@@ -5992,54 +5988,4 @@\n-    \/\/ Allocate the result array\n-    Node* zlen = _gvn.transform(new AddINode(xlen, ylen));\n-    ciKlass* klass = ciTypeArrayKlass::make(T_INT);\n-    Node* klass_node = makecon(TypeKlassPtr::make(klass));\n-\n-    IdealKit ideal(this);\n-\n-#define __ ideal.\n-     Node* one = __ ConI(1);\n-     Node* zero = __ ConI(0);\n-     IdealVariable need_alloc(ideal), z_alloc(ideal);  __ declarations_done();\n-     __ set(need_alloc, zero);\n-     __ set(z_alloc, z);\n-     __ if_then(z, BoolTest::eq, null()); {\n-       __ increment (need_alloc, one);\n-     } __ else_(); {\n-       \/\/ Update graphKit memory and control from IdealKit.\n-       sync_kit(ideal);\n-       Node* cast = new CastPPNode(control(), z, TypePtr::NOTNULL);\n-       _gvn.set_type(cast, cast->bottom_type());\n-       C->record_for_igvn(cast);\n-\n-       Node* zlen_arg = load_array_length(cast);\n-       \/\/ Update IdealKit memory and control from graphKit.\n-       __ sync_kit(this);\n-       __ if_then(zlen_arg, BoolTest::lt, zlen); {\n-         __ increment (need_alloc, one);\n-       } __ end_if();\n-     } __ end_if();\n-\n-     __ if_then(__ value(need_alloc), BoolTest::ne, zero); {\n-       \/\/ Update graphKit memory and control from IdealKit.\n-       sync_kit(ideal);\n-       Node * narr = new_array(klass_node, zlen, 1);\n-       \/\/ Update IdealKit memory and control from graphKit.\n-       __ sync_kit(this);\n-       __ set(z_alloc, narr);\n-     } __ end_if();\n-\n-     sync_kit(ideal);\n-     z = __ value(z_alloc);\n-     \/\/ Can't use TypeAryPtr::INTS which uses Bottom offset.\n-     _gvn.set_type(z, TypeOopPtr::make_from_klass(klass));\n-     \/\/ Final sync IdealKit and GraphKit.\n-     final_sync(ideal);\n-#undef __\n-\n-    Node* z_start = array_element_address(z, intcon(0), T_INT);\n-\n-    Node* call = make_runtime_call(RC_LEAF|RC_NO_FP,\n-                                   OptoRuntime::multiplyToLen_Type(),\n-                                   stubAddr, stubName, TypePtr::BOTTOM,\n-                                   x_start, xlen, y_start, ylen, z_start, zlen);\n-  } \/\/ original reexecute is set back here\n+  Node* call = make_runtime_call(RC_LEAF|RC_NO_FP,\n+                                 OptoRuntime::multiplyToLen_Type(),\n+                                 stubAddr, stubName, TypePtr::BOTTOM,\n+                                 x_start, xlen, y_start, ylen, z_start);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":9,"deletions":63,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -1153,1 +1153,1 @@\n-  int num_args      = 6;\n+  int num_args      = 5;\n@@ -1162,1 +1162,0 @@\n-  fields[argp++] = TypeInt::INT;        \/\/ zlen\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1834,0 +1834,4 @@\n+\n+        if (z == null || z.length < (xlen + ylen))\n+            z = new int[xlen + ylen];\n+\n@@ -1842,3 +1846,0 @@\n-        if (z == null || z.length < (xlen+ ylen))\n-             z = new int[xlen+ylen];\n-\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}