{"files":[{"patch":"@@ -5934,1 +5934,0 @@\n-    \/\/ Allocate the result array\n@@ -5936,45 +5935,0 @@\n-    ciKlass* klass = ciTypeArrayKlass::make(T_INT);\n-    Node* klass_node = makecon(TypeKlassPtr::make(klass));\n-\n-    IdealKit ideal(this);\n-\n-#define __ ideal.\n-     Node* one = __ ConI(1);\n-     Node* zero = __ ConI(0);\n-     IdealVariable need_alloc(ideal), z_alloc(ideal);  __ declarations_done();\n-     __ set(need_alloc, zero);\n-     __ set(z_alloc, z);\n-     __ if_then(z, BoolTest::eq, null()); {\n-       __ increment (need_alloc, one);\n-     } __ else_(); {\n-       \/\/ Update graphKit memory and control from IdealKit.\n-       sync_kit(ideal);\n-       Node* cast = new CastPPNode(control(), z, TypePtr::NOTNULL);\n-       _gvn.set_type(cast, cast->bottom_type());\n-       C->record_for_igvn(cast);\n-\n-       Node* zlen_arg = load_array_length(cast);\n-       \/\/ Update IdealKit memory and control from graphKit.\n-       __ sync_kit(this);\n-       __ if_then(zlen_arg, BoolTest::lt, zlen); {\n-         __ increment (need_alloc, one);\n-       } __ end_if();\n-     } __ end_if();\n-\n-     __ if_then(__ value(need_alloc), BoolTest::ne, zero); {\n-       \/\/ Update graphKit memory and control from IdealKit.\n-       sync_kit(ideal);\n-       Node * narr = new_array(klass_node, zlen, 1);\n-       \/\/ Update IdealKit memory and control from graphKit.\n-       __ sync_kit(this);\n-       __ set(z_alloc, narr);\n-     } __ end_if();\n-\n-     sync_kit(ideal);\n-     z = __ value(z_alloc);\n-     \/\/ Can't use TypeAryPtr::INTS which uses Bottom offset.\n-     _gvn.set_type(z, TypeOopPtr::make_from_klass(klass));\n-     \/\/ Final sync IdealKit and GraphKit.\n-     final_sync(ideal);\n-#undef __\n-\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1834,0 +1834,4 @@\n+\n+        if (z == null || z.length < (xlen+ ylen))\n+             z = new int[xlen+ylen];\n+\n@@ -1842,3 +1846,0 @@\n-        if (z == null || z.length < (xlen+ ylen))\n-             z = new int[xlen+ylen];\n-\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}