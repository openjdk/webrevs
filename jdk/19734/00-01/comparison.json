{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,12 +48,0 @@\n-    private static final int HI_BYTE_SHIFT;\n-    private static final int LO_BYTE_SHIFT;\n-    static {\n-        if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) {\n-            HI_BYTE_SHIFT = 8;\n-            LO_BYTE_SHIFT = 0;\n-        } else {\n-            HI_BYTE_SHIFT = 0;\n-            LO_BYTE_SHIFT = 8;\n-        }\n-    }\n-\n@@ -62,3 +50,2 @@\n-    final static VarHandle INT_L = MethodHandles.byteArrayViewVarHandle(int[].class, ByteOrder.LITTLE_ENDIAN);\n-    final static VarHandle INT_B = MethodHandles.byteArrayViewVarHandle(int[].class, ByteOrder.BIG_ENDIAN);\n-\n+    final static VarHandle INT_L  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.LITTLE_ENDIAN);\n+    final static VarHandle INT_B  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.BIG_ENDIAN);\n@@ -67,0 +54,2 @@\n+    final static VarHandle CHAR_L = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.LITTLE_ENDIAN);\n+    final static VarHandle CHAR_B = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.BIG_ENDIAN);\n@@ -69,0 +58,1 @@\n+\n@@ -71,2 +61,3 @@\n-    final int[] ints = new int[NUMBERS];\n-    final long[] longs = new long[NUMBERS];\n+    final int [] ints   = new int [NUMBERS    ];\n+    final long[] longs  = new long[NUMBERS    ];\n+    final char[] chars  = new char[NUMBERS    ];\n@@ -96,0 +87,2 @@\n+     * C Unsafe.getChar & putChar\n+     * S Unsafe.getShort & putShort\n@@ -584,1 +577,1 @@\n-    public void putChars4(Blackhole BH) {\n+    public void getCharB(Blackhole BH) {\n@@ -587,1 +580,180 @@\n-            putChars4(bytes8, i * 4, 'n', 'u', 'l', 'l');\n+            char c = getCharB(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_B.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharBU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharL(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+    @Benchmark\n+    public void getCharLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharLU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+\n+    @Benchmark\n+    public void getCharLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_L.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharC(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = UNSAFE.getChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharBS(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            putShortB(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            CHAR_B.set(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharLS(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            putShortL(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            CHAR_L.set(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharC(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            UNSAFE.putChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    \/*\n+     * putChars4 Test whether four constant chars can be MergeStored\n+     *\n+     *\/\n+    @Benchmark\n+    public void putChars4B(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4B(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4BU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4BU(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4BV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4BV(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4L(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4L(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4LU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4LU(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4LV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4LV(bytes8, i * 4);\n@@ -594,1 +766,1 @@\n-    public void putChars4UB(Blackhole BH) {\n+    public void putChars4C(Blackhole BH) {\n@@ -597,1 +769,1 @@\n-            putChars4UB(bytes8, i * 4, 'n', 'u', 'l', 'l');\n+            putChars4C(bytes8, i * 4);\n@@ -604,1 +776,1 @@\n-    public void putChars4UC(Blackhole BH) {\n+    public void putChars4S(Blackhole BH) {\n@@ -607,1 +779,1 @@\n-            putChars4UC(bytes8, i * 4, 'n', 'u', 'l', 'l');\n+            putChars4S(bytes8, i * 4);\n@@ -661,2 +833,2 @@\n-        UNSAFE.putByte(array, address + 1, (byte) (value >>  8));\n-        UNSAFE.putByte(array, address + 2, (byte) (value >> 16));\n+        UNSAFE.putByte(array, address + 1, (byte) (value >> 16));\n+        UNSAFE.putByte(array, address + 2, (byte) (value >>  8));\n@@ -837,5 +1009,4 @@\n-    public static void putChars4(byte[] array, int offset, char c0, char c1, char c2, char c3) {\n-        putChar(array, offset, c0);\n-        putChar(array, offset + 1, c1);\n-        putChar(array, offset + 2, c2);\n-        putChar(array, offset + 3, c3);\n+    public static char getCharB(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff) << 8)\n+                    | ((val[index + 1] & 0xff)));\n@@ -844,6 +1015,24 @@\n-    public static void putChars4UC(byte[] array, int offset, char c0, char c1, char c2, char c3) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        UNSAFE.putChar(array, address, c0);\n-        UNSAFE.putChar(array, address + 2, c1);\n-        UNSAFE.putChar(array, address + 4, c2);\n-        UNSAFE.putChar(array, address + 6, c3);\n+    public static char getCharBR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharB(val, index));\n+    }\n+\n+    public static char getCharL(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff))\n+                    | ((val[index + 1] & 0xff) << 8));\n+    }\n+\n+    public static char getCharLR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharL(val, index));\n+    }\n+\n+    public static char getCharBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff) << 8)\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff)     ));\n+    }\n+\n+    public static char getCharLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff)     )\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff) << 8));\n@@ -852,5 +1041,6 @@\n-    public static void putChars4UB(byte[] array, int offset, char c0, char c1, char c2, char c3) {\n-        putCharUB(array, offset, c0);\n-        putCharUB(array, offset + 1, c1);\n-        putCharUB(array, offset + 2, c2);\n-        putCharUB(array, offset + 3, c3);\n+    public void putChars4B(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortB(bytes, offset    , c0);\n+        putShortB(bytes, offset + 1, c1);\n+        putShortB(bytes, offset + 2, c2);\n+        putShortB(bytes, offset + 3, c3);\n@@ -859,1 +1049,61 @@\n-    private static void putChar(byte[] val, int index, char c) {\n+    public void putChars4BU(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortBU(bytes, offset    , c0);\n+        putShortBU(bytes, offset + 1, c1);\n+        putShortBU(bytes, offset + 2, c2);\n+        putShortBU(bytes, offset + 3, c3);\n+    }\n+\n+    public void putChars4BV(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        offset <<= 1;\n+        CHAR_B.set(bytes, offset    , c0);\n+        CHAR_B.set(bytes, offset + 2, c1);\n+        CHAR_B.set(bytes, offset + 4, c2);\n+        CHAR_B.set(bytes, offset + 6, c3);\n+    }\n+\n+    public void putChars4L(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortL(bytes, offset    , c0);\n+        putShortL(bytes, offset + 1, c1);\n+        putShortL(bytes, offset + 2, c2);\n+        putShortL(bytes, offset + 3, c3);\n+    }\n+\n+    public void putChars4LV(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        offset <<= 1;\n+        CHAR_L.set(bytes, offset    , c0);\n+        CHAR_L.set(bytes, offset + 2, c1);\n+        CHAR_L.set(bytes, offset + 4, c2);\n+        CHAR_L.set(bytes, offset + 6, c3);\n+    }\n+\n+    public void putChars4LU(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortLU(bytes, offset    , c0);\n+        putShortLU(bytes, offset + 1, c1);\n+        putShortLU(bytes, offset + 2, c2);\n+        putShortLU(bytes, offset + 3, c3);\n+    }\n+\n+    public void putChars4C(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        offset <<= 1;\n+        UNSAFE.putChar(bytes, offset    , c0);\n+        UNSAFE.putChar(bytes, offset + 2, c1);\n+        UNSAFE.putChar(bytes, offset + 4, c2);\n+        UNSAFE.putChar(bytes, offset + 6, c3);\n+    }\n+\n+    public void putChars4S(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        offset <<= 1;\n+        UNSAFE.putShort(bytes, offset    , (short) c0);\n+        UNSAFE.putShort(bytes, offset + 2, (short) c1);\n+        UNSAFE.putShort(bytes, offset + 4, (short) c2);\n+        UNSAFE.putShort(bytes, offset + 6, (short) c3);\n+    }\n+\n+    private static void putShortB(byte[] val, int index, char c) {\n@@ -861,2 +1111,2 @@\n-        val[index    ] = (byte)(c >> HI_BYTE_SHIFT);\n-        val[index + 1] = (byte)(c >> LO_BYTE_SHIFT);\n+        val[index    ] = (byte)(c >> 8);\n+        val[index + 1] = (byte)(c     );\n@@ -865,1 +1115,1 @@\n-    public static void putCharUB(byte[] array, int offset, char c) {\n+    public static void putShortBU(byte[] array, int offset, char c) {\n@@ -870,0 +1120,12 @@\n+\n+    private static void putShortL(byte[] val, int index, char c) {\n+        index <<= 1;\n+        val[index    ] = (byte)(c     );\n+        val[index + 1] = (byte)(c >> 8);\n+    }\n+\n+    public static void putShortLU(byte[] array, int offset, char c) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        UNSAFE.putByte(array, address    , (byte) (c     ));\n+        UNSAFE.putByte(array, address + 1, (byte) (c >> 8));\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MergeStoreBench.java","additions":308,"deletions":46,"binary":false,"changes":354,"status":"modified"}]}