{"files":[{"patch":"@@ -184,0 +184,10 @@\n+    public static final String ADD_REDUCTION_VI = PREFIX + \"ADD_REDUCTION_VI\" + POSTFIX;\n+    static {\n+        superWordNodes(ADD_REDUCTION_VI, \"AddReductionVI\");\n+    }\n+\n+    public static final String ADD_REDUCTION_VL = PREFIX + \"ADD_REDUCTION_VL\" + POSTFIX;\n+    static {\n+        superWordNodes(ADD_REDUCTION_VL, \"AddReductionVL\");\n+    }\n+\n@@ -233,0 +243,5 @@\n+    public static final String AND_REDUCTION_V = PREFIX + \"AND_REDUCTION_V\" + POSTFIX;\n+    static {\n+        superWordNodes(AND_REDUCTION_V, \"AndReductionV\");\n+    }\n+\n@@ -712,0 +727,10 @@\n+    public static final String MUL_REDUCTION_VI = PREFIX + \"MUL_REDUCTION_VI\" + POSTFIX;\n+    static {\n+        superWordNodes(MUL_REDUCTION_VI, \"MulReductionVI\");\n+    }\n+\n+    public static final String MUL_REDUCTION_VL = PREFIX + \"MUL_REDUCTION_VL\" + POSTFIX;\n+    static {\n+        superWordNodes(MUL_REDUCTION_VL, \"MulReductionVL\");\n+    }\n+\n@@ -737,0 +762,5 @@\n+    public static final String OR_REDUCTION_V = PREFIX + \"OR_REDUCTION_V\" + POSTFIX;\n+    static {\n+        superWordNodes(OR_REDUCTION_V, \"OrReductionV\");\n+    }\n+\n@@ -1336,0 +1366,5 @@\n+    public static final String XOR_REDUCTION_V = PREFIX + \"XOR_REDUCTION_V\" + POSTFIX;\n+    static {\n+        superWordNodes(XOR_REDUCTION_V, \"XorReductionV\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.ProdRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.ProdRed_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.ProdRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.ProdRed_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.ProdRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.ProdRed_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.ProdRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.ProdRed_Double\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.ProdRed_Double\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,21 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"prodReductionImplement\",\n+                 \"prodReductionWithStoreImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runTests() throws Exception {\n@@ -81,0 +61,1 @@\n+        double[] c = new double[256 * 1024];\n@@ -88,6 +69,5 @@\n-        if (total == valid) {\n-            System.out.println(\"Success\");\n-        } else {\n-            System.out.println(\"Invalid sum of elements variable in total: \" + total);\n-            System.out.println(\"Expected value = \" + valid);\n-            throw new Exception(\"Failed\");\n+        testCorrectness(valid, total, \"prodReduction\");\n+        total = 0;\n+        for (int j = 0; j < 2000; j++) {\n+            total = j + 1;\n+            total = prodReductionWithStoreImplement(a, b, c, total);\n@@ -95,0 +75,1 @@\n+        testCorrectness(valid, total, \"prodReductionWithStore\");\n@@ -104,0 +85,5 @@\n+    \/* Vectorization is expected but not enabled (SuperWord::implemented).\n+       A positive @IR test should be added later. *\/\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.MUL_REDUCTION_VD})\n@@ -111,0 +97,27 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.MUL_REDUCTION_VD})\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfCPUFeature = {\"sse2\", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VD, \">= 1\"})\n+    public static double prodReductionWithStoreImplement(double[] a, double[] b, double[] c, double total) {\n+        for (int i = 0; i < a.length; i++) {\n+            c[i] = a[i] - b[i];\n+            total *= c[i];\n+        }\n+        return total;\n+    }\n+\n+    public static void testCorrectness(\n+            double total,\n+            double valid,\n+            String op) throws Exception {\n+        if (total == valid) {\n+            System.out.println(op + \": Success\");\n+        } else {\n+            System.out.println(\"Invalid total: \" + total);\n+            System.out.println(\"Expected value = \" + valid);\n+            throw new Exception(op + \": Failed\");\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Double.java","additions":65,"deletions":52,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.ProdRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.ProdRed_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.ProdRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.ProdRed_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.ProdRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.ProdRed_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.ProdRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.ProdRed_Float\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.ProdRed_Float\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,20 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"prodReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runTests() throws Exception {\n@@ -104,0 +83,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.MUL_REDUCTION_VF})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VF, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Float.java","additions":31,"deletions":46,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.ProdRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.ProdRed_Int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.ProdRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.ProdRed_Int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.ProdRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.ProdRed_Int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.ProdRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.ProdRed_Int\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.ProdRed_Int\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,20 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"prodReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runTests() throws Exception {\n@@ -103,0 +82,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.MUL_REDUCTION_VI})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Int.java","additions":31,"deletions":46,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,48 +28,2 @@\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.RedTest_int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.RedTest_int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.RedTest_int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.RedTest_int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.RedTest_int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.RedTest_int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.RedTest_int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.RedTest_int\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.RedTest_int\n@@ -80,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -84,0 +40,28 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+            scenarios[i] = new Scenario(i, \"-XX:+SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll,\n+                                           \"-XX:-TieredCompilation\");\n+            i++;\n+        }\n+        for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+            scenarios[i] = new Scenario(i, \"-XX:-SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+            i++;\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\",\n+                 \"orReductionImplement\",\n+                 \"andReductionImplement\",\n+                 \"xorReductionImplement\",\n+                 \"mulReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runTests() throws Exception {\n@@ -160,0 +144,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VI})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VI, \">= 1\"})\n@@ -173,0 +163,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.OR_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.OR_REDUCTION_V, \">= 1\"})\n@@ -186,0 +182,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.AND_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.AND_REDUCTION_V, \">= 1\"})\n@@ -199,0 +201,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.XOR_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.XOR_REDUCTION_V, \">= 1\"})\n@@ -212,0 +220,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.MUL_REDUCTION_VI})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_int.java","additions":63,"deletions":49,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,48 +28,3 @@\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.RedTest_long\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.RedTest_long\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.RedTest_long\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.RedTest_long\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.RedTest_long\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.RedTest_long\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-TieredCompilation\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.RedTest_long\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.RedTest_long\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.RedTest_long\n@@ -80,0 +35,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -84,0 +41,28 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+            scenarios[i] = new Scenario(i, \"-XX:+SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll,\n+                                           \"-XX:-TieredCompilation\");\n+            i++;\n+        }\n+        for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+            scenarios[i] = new Scenario(i, \"-XX:-SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+            i++;\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\",\n+                 \"orReductionImplement\",\n+                 \"andReductionImplement\",\n+                 \"xorReductionImplement\",\n+                 \"mulReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public static void runTests() throws Exception {\n@@ -160,0 +145,11 @@\n+    \/* Require avx2 due to filtering out small vector lengths\n+       for long and int (SuperWord::implemented). *\/\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VL})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VL})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VL, \">= 1\"})\n@@ -173,0 +169,9 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.OR_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        failOn = {IRNode.OR_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.OR_REDUCTION_V, \">= 1\"})\n@@ -186,0 +191,9 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.AND_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        failOn = {IRNode.AND_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.AND_REDUCTION_V, \">= 1\"})\n@@ -199,0 +213,9 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.XOR_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        failOn = {IRNode.XOR_REDUCTION_V})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.XOR_REDUCTION_V, \">= 1\"})\n@@ -212,0 +235,9 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.MUL_REDUCTION_VL})\n+    @IR(applyIfCPUFeature = {\"avx512dq\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        failOn = {IRNode.MUL_REDUCTION_VL})\n+    @IR(applyIfCPUFeature = {\"avx512dq\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VL, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_long.java","additions":81,"deletions":49,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRedAbsNeg_Double\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.SumRedAbsNeg_Double\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,21 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopUnrollLimit=\" + 250,\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runTests() throws Exception {\n@@ -113,0 +93,5 @@\n+    \/* Does not vectorize due to profitability heuristic\n+       (with or without store) in SuperWord::profitable. *\/\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VD, IRNode.ABS_V, IRNode.NEG_V})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedAbsNeg_Double.java","additions":31,"deletions":46,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRedAbsNeg_Float\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.SumRedAbsNeg_Float\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,21 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopUnrollLimit=\" + 250,\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runTests() throws Exception {\n@@ -82,1 +62,0 @@\n-        float[] d = new float[256 * 1024];\n@@ -88,1 +67,1 @@\n-            total = sumReductionImplement(a, b, c, d, total);\n+            total = sumReductionImplement(a, b, c, total);\n@@ -113,0 +92,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VF, IRNode.ABS_V, IRNode.NEG_V})\n+    @IR(applyIfCPUFeature = {\"sse2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VF, \">= 1\", IRNode.ABS_V, \">= 1\", IRNode.NEG_V, \">= 1\"})\n@@ -117,1 +102,0 @@\n-            float[] d,\n@@ -120,2 +104,1 @@\n-            d[i] = Math.abs(-a[i] * -b[i]) + Math.abs(-a[i] * -c[i]) + Math.abs(-b[i] * -c[i]);\n-            total += d[i];\n+            total += Math.abs(-a[i] * -b[i]) + Math.abs(-a[i] * -c[i]) + Math.abs(-b[i] * -c[i]);\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedAbsNeg_Float.java","additions":34,"deletions":51,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRedSqrt_Double\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.SumRedSqrt_Double\n@@ -78,0 +35,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -80,0 +39,20 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runTests() throws Exception {\n@@ -112,0 +91,10 @@\n+    \/\/ Require avx for SQRT_VD\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VD, IRNode.SQRT_V})\n+    @IR(applyIfCPUFeature = {\"avx\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VD, IRNode.SQRT_V})\n+    @IR(applyIfCPUFeature = {\"avx\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VD, \">= 1\", IRNode.SQRT_V, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedSqrt_Double.java","additions":35,"deletions":46,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRed_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Double\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRed_Double\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRed_Double\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.SumRed_Double\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,20 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public static void runTests() throws Exception {\n@@ -111,0 +90,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VD})\n+    @IR(applyIfCPUFeature = {\"sse2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VD, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Double.java","additions":31,"deletions":46,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRed_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Float\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRed_Float\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRed_Float\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.SumRed_Float\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,20 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public static void runTests() throws Exception {\n@@ -111,0 +90,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VF})\n+    @IR(applyIfCPUFeature = {\"sse2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VF, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Float.java","additions":31,"deletions":46,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,45 +28,2 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=2\n- *      compiler.loopopts.superword.SumRed_Int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Int\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRed_Int\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=16\n- *      compiler.loopopts.superword.SumRed_Int\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.SumRed_Int\n@@ -77,0 +34,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -79,0 +38,20 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[8];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {2, 4, 8, 16}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public static void runTests() throws Exception {\n@@ -111,0 +90,6 @@\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VI})\n+    @IR(applyIfCPUFeature = {\"sse4.1\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VI, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Int.java","additions":31,"deletions":46,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,23 +28,3 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\"\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Long\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=4\n- *      compiler.loopopts.superword.SumRed_Long\n- *\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:+SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Long\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250\n- *      -XX:CompileThresholdScaling=0.1\n- *      -XX:-SuperWordReductions\n- *      -XX:LoopMaxUnroll=8\n- *      compiler.loopopts.superword.SumRed_Long\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.SumRed_Long\n@@ -55,0 +35,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -57,0 +39,20 @@\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        int i = 0;\n+        Scenario[] scenarios = new Scenario[4];\n+        for (String reductionSign : new String[] {\"+\", \"-\"}) {\n+            for (int maxUnroll : new int[] {4, 8}) {\n+                scenarios[i] = new Scenario(i, \"-XX:\" + reductionSign + \"SuperWordReductions\",\n+                                               \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+                i++;\n+            }\n+        }\n+        framework.addScenarios(scenarios);\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"sumReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public static void runTests() throws Exception {\n@@ -90,0 +92,12 @@\n+    \/* Require avx2 due to filtering out small vector lengths\n+       for long and int (SuperWord::implemented).\n+       Additionally providing a negative test for this. *\/\n+    @Test\n+    @IR(applyIfOr = {\"SuperWordReductions\", \"false\", \"LoopMaxUnroll\", \"< 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VL})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        failOn = {IRNode.ADD_REDUCTION_VL})\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VL, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Long.java","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"}]}