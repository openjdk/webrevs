{"files":[{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -56,2 +55,3 @@\n-    @Run(test = {\"prodReductionImplement\"},\n-        mode = RunMode.STANDALONE)\n+    @Run(test = {\"prodReductionImplement\",\n+                 \"prodReductionWithStoreImplement\"},\n+         mode = RunMode.STANDALONE)\n@@ -61,0 +61,1 @@\n+        double[] c = new double[256 * 1024];\n@@ -68,6 +69,5 @@\n-        if (total == valid) {\n-            System.out.println(\"Success\");\n-        } else {\n-            System.out.println(\"Invalid sum of elements variable in total: \" + total);\n-            System.out.println(\"Expected value = \" + valid);\n-            throw new Exception(\"Failed\");\n+        testCorrectness(valid, total, \"prodReduction\");\n+        total = 0;\n+        for (int j = 0; j < 2000; j++) {\n+            total = j + 1;\n+            total = prodReductionWithStoreImplement(a, b, c, total);\n@@ -75,0 +75,1 @@\n+        testCorrectness(valid, total, \"prodReductionWithStore\");\n@@ -84,1 +85,2 @@\n-    \/\/8300865 : No reduction nodes emitted (x86_64)\n+    \/* Vectorization is expected but not enabled (SuperWord::implemented).\n+       A positive @IR test should be added later. *\/\n@@ -95,0 +97,27 @@\n+    @Test\n+    @IR(applyIf = {\"SuperWordReductions\", \"false\"},\n+        failOn = {IRNode.MUL_REDUCTION_VD})\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfCPUFeature = {\"sse2\", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VD, \">= 1\"})\n+    public static double prodReductionWithStoreImplement(double[] a, double[] b, double[] c, double total) {\n+        for (int i = 0; i < a.length; i++) {\n+            c[i] = a[i] - b[i];\n+            total *= c[i];\n+        }\n+        return total;\n+    }\n+\n+    public static void testCorrectness(\n+            double total,\n+            double valid,\n+            String op) throws Exception {\n+        if (total == valid) {\n+            System.out.println(op + \": Success\");\n+        } else {\n+            System.out.println(\"Invalid total: \" + total);\n+            System.out.println(\"Expected value = \" + valid);\n+            throw new Exception(op + \": Failed\");\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Double.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -57,1 +56,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Float.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -57,1 +56,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Int.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,4 +47,4 @@\n-          scenarios[i] = new Scenario(i, \"-XX:+SuperWordReductions\",\n-                                         \"-XX:LoopMaxUnroll=\" + maxUnroll,\n-                                         \"-XX:-TieredCompilation\");\n-          i++;\n+            scenarios[i] = new Scenario(i, \"-XX:+SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll,\n+                                           \"-XX:-TieredCompilation\");\n+            i++;\n@@ -53,3 +53,3 @@\n-          scenarios[i] = new Scenario(i, \"-XX:-SuperWordReductions\",\n-                                         \"-XX:LoopMaxUnroll=\" + maxUnroll);\n-          i++;\n+            scenarios[i] = new Scenario(i, \"-XX:-SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+            i++;\n@@ -66,1 +66,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n@@ -167,2 +167,2 @@\n-            applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n-            counts = {IRNode.OR_REDUCTION_V, \">= 1\"})\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.OR_REDUCTION_V, \">= 1\"})\n@@ -186,2 +186,2 @@\n-            applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n-            counts = {IRNode.AND_REDUCTION_V, \">= 1\"})\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.AND_REDUCTION_V, \">= 1\"})\n@@ -205,2 +205,2 @@\n-            applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n-            counts = {IRNode.XOR_REDUCTION_V, \">= 1\"})\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.XOR_REDUCTION_V, \">= 1\"})\n@@ -224,2 +224,2 @@\n-            applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n-            counts = {IRNode.MUL_REDUCTION_VI, \">= 1\"})\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_int.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -48,4 +48,4 @@\n-          scenarios[i] = new Scenario(i, \"-XX:+SuperWordReductions\",\n-                                         \"-XX:LoopMaxUnroll=\" + maxUnroll,\n-                                         \"-XX:-TieredCompilation\");\n-          i++;\n+            scenarios[i] = new Scenario(i, \"-XX:+SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll,\n+                                           \"-XX:-TieredCompilation\");\n+            i++;\n@@ -54,3 +54,3 @@\n-          scenarios[i] = new Scenario(i, \"-XX:-SuperWordReductions\",\n-                                         \"-XX:LoopMaxUnroll=\" + maxUnroll);\n-          i++;\n+            scenarios[i] = new Scenario(i, \"-XX:-SuperWordReductions\",\n+                                           \"-XX:LoopMaxUnroll=\" + maxUnroll);\n+            i++;\n@@ -67,1 +67,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n@@ -144,0 +144,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_long.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -58,1 +57,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n@@ -94,0 +93,2 @@\n+    \/* Does not vectorize due to profitability heuristic\n+       (with or without store) in SuperWord::profitable. *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedAbsNeg_Double.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -58,1 +57,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n@@ -63,1 +62,0 @@\n-        float[] d = new float[256 * 1024];\n@@ -69,1 +67,1 @@\n-            total = sumReductionImplement(a, b, c, d, total);\n+            total = sumReductionImplement(a, b, c, total);\n@@ -97,0 +95,3 @@\n+    @IR(applyIfCPUFeature = {\"sse2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VF, \">= 1\", IRNode.ABS_V, \">= 1\", IRNode.NEG_V, \">= 1\"})\n@@ -101,1 +102,0 @@\n-            float[] d,\n@@ -104,2 +104,1 @@\n-            d[i] = Math.abs(-a[i] * -b[i]) + Math.abs(-a[i] * -c[i]) + Math.abs(-b[i] * -c[i]);\n-            total += d[i];\n+            total += Math.abs(-a[i] * -b[i]) + Math.abs(-a[i] * -c[i]) + Math.abs(-b[i] * -c[i]);\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedAbsNeg_Float.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -33,0 +32,1 @@\n+\n@@ -39,1 +39,0 @@\n-\n@@ -58,1 +57,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedSqrt_Double.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -57,1 +56,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Double.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -57,1 +56,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Float.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -57,1 +56,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Int.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ * @requires vm.bits == \"64\"\n@@ -57,1 +57,1 @@\n-        mode = RunMode.STANDALONE)\n+         mode = RunMode.STANDALONE)\n@@ -92,0 +92,3 @@\n+    \/* Require avx2 due to filtering out small vector lengths\n+       for long and int (SuperWord::implemented).\n+       Additionally providing a negative test for this. *\/\n@@ -95,0 +98,3 @@\n+    @IR(applyIfCPUFeature = {\"avx2\", \"false\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.ADD_REDUCTION_VL, \"= 0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Long.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}