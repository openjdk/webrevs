{"files":[{"patch":"@@ -368,1 +368,1 @@\n-          \"5=all details printed. \"                                         \\\n+          \"6=all details printed. \"                                         \\\n@@ -371,1 +371,1 @@\n-          range(-1, 5)                                                      \\\n+          range(-1, 6)                                                      \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1044,0 +1044,4 @@\n+#ifndef PRODUCT\n+  Copy::zero_to_bytes(_igv_phase_iter, sizeof(_igv_phase_iter));\n+#endif\n+\n@@ -2400,0 +2404,1 @@\n+  print_method(PHASE_BEFORE_CCP1, 2);\n@@ -2975,0 +2980,2 @@\n+\n+    print_method(PHASE_REGISTER_ALLOCATION, 2);\n@@ -2992,0 +2999,1 @@\n+    print_method(PHASE_BLOCK_ORDERING, 3);\n@@ -2999,0 +3007,1 @@\n+    print_method(PHASE_PEEPHOLE, 3);\n@@ -3005,0 +3014,1 @@\n+    print_method(PHASE_POSTALLOC_EXPAND, 3);\n@@ -5105,0 +5115,4 @@\n+  int iter = ++_igv_phase_iter[cpt];\n+  if (iter > 1) {\n+    ss.print(\" %d\", iter);\n+  }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -346,0 +346,1 @@\n+  uint                  _igv_phase_iter[PHASE_NUM_TYPES]; \/\/ Counters for IGV phase iterations\n@@ -534,0 +535,1 @@\n+  void reset_igv_phase_iter(CompilerPhaseType cpt) { _igv_phase_iter[cpt] = 0; }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1183,0 +1183,1 @@\n+    C->print_method(PHASE_BEFORE_LOOP_PREDICATION_IC, 4, iff);\n@@ -1200,0 +1201,3 @@\n+\n+    C->print_method(PHASE_AFTER_LOOP_PREDICATION_IC, 4, new_predicate_proj->in(0));\n+\n@@ -1210,0 +1214,1 @@\n+    C->print_method(PHASE_BEFORE_LOOP_PREDICATION_RC, 4, iff);\n@@ -1273,0 +1278,2 @@\n+    C->print_method(PHASE_AFTER_LOOP_PREDICATION_RC, 4, new_predicate_proj->in(0));\n+\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -706,0 +706,3 @@\n+\n+  C->print_method(PHASE_BEFORE_LOOP_PEELING, 4, head);\n+\n@@ -798,0 +801,2 @@\n+\n+  C->print_method(PHASE_AFTER_LOOP_PEELING, 4, new_head);\n@@ -1632,0 +1637,2 @@\n+  C->print_method(PHASE_BEFORE_PRE_MAIN_POST, 4, main_head);\n+\n@@ -1828,0 +1835,2 @@\n+\n+  C->print_method(PHASE_AFTER_PRE_MAIN_POST, 4, main_head);\n@@ -2130,0 +2139,3 @@\n+\n+  C->print_method(PHASE_BEFORE_LOOP_UNROLLING, 4, loop_head);\n+\n@@ -2377,0 +2389,2 @@\n+\n+  C->print_method(PHASE_AFTER_LOOP_UNROLLING, 4, clone_head);\n@@ -3006,0 +3020,2 @@\n+      C->print_method(PHASE_BEFORE_RANGE_CHECK_ELIMINATION, 4, iff);\n+\n@@ -3106,0 +3122,3 @@\n+\n+      C->print_method(PHASE_AFTER_RANGE_CHECK_ELIMINATION, 4, cl);\n+\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+  C->print_method(PHASE_BEFORE_LOOP_UNSWITCHING, 4, head);\n+\n@@ -203,0 +205,2 @@\n+  C->print_method(PHASE_AFTER_LOOP_UNSWITCHING, 4, head_clone);\n+\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1449,0 +1449,4 @@\n+    C->print_method(PHASE_BEFORE_SPLIT_IF, 4, iff);\n+    if ((PrintOpto && VerifyLoopOptimizations) || TraceLoopOpts) {\n+      tty->print_cr(\"Split-if\");\n+    }\n@@ -1450,0 +1454,1 @@\n+    C->print_method(PHASE_AFTER_SPLIT_IF, 4, iff);\n@@ -3628,0 +3633,3 @@\n+\n+  C->print_method(PHASE_BEFORE_PARTIAL_PEELING, 4, head);\n+\n@@ -3922,0 +3930,3 @@\n+\n+  C->print_method(PHASE_AFTER_PARTIAL_PEELING, 4, new_head_clone);\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2782,1 +2782,1 @@\n-  constexpr int perBytecode = 5;\n+  constexpr int perBytecode = 6;\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -897,1 +897,1 @@\n-    C->print_method(PHASE_AFTER_ITER_GVN_STEP, 4, n);\n+    C->print_method(PHASE_AFTER_ITER_GVN_STEP, 5, n);\n@@ -1028,0 +1028,1 @@\n+  NOT_PRODUCT(C->reset_igv_phase_iter(PHASE_AFTER_ITER_GVN_STEP);)\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,45 +31,71 @@\n-  flags(BEFORE_STRINGOPTS,            \"Before StringOpts\") \\\n-  flags(AFTER_STRINGOPTS,             \"After StringOpts\") \\\n-  flags(BEFORE_REMOVEUSELESS,         \"Before RemoveUseless\") \\\n-  flags(AFTER_PARSING,                \"After Parsing\") \\\n-  flags(BEFORE_ITER_GVN,              \"Before Iter GVN\") \\\n-  flags(ITER_GVN1,                    \"Iter GVN 1\") \\\n-  flags(AFTER_ITER_GVN_STEP,          \"After Iter GVN Step\") \\\n-  flags(AFTER_ITER_GVN,               \"After Iter GVN\") \\\n-  flags(INCREMENTAL_INLINE_STEP,      \"Incremental Inline Step\") \\\n-  flags(INCREMENTAL_INLINE_CLEANUP,   \"Incremental Inline Cleanup\") \\\n-  flags(INCREMENTAL_INLINE,           \"Incremental Inline\") \\\n-  flags(INCREMENTAL_BOXING_INLINE,    \"Incremental Boxing Inline\") \\\n-  flags(EXPAND_VUNBOX,                \"Expand VectorUnbox\") \\\n-  flags(SCALARIZE_VBOX,               \"Scalarize VectorBox\") \\\n-  flags(INLINE_VECTOR_REBOX,          \"Inline Vector Rebox Calls\") \\\n-  flags(EXPAND_VBOX,                  \"Expand VectorBox\") \\\n-  flags(ELIMINATE_VBOX_ALLOC,         \"Eliminate VectorBoxAllocate\") \\\n-  flags(ITER_GVN_BEFORE_EA,           \"Iter GVN before EA\") \\\n-  flags(ITER_GVN_AFTER_VECTOR,        \"Iter GVN after vector box elimination\") \\\n-  flags(BEFORE_BEAUTIFY_LOOPS,        \"Before beautify loops\") \\\n-  flags(AFTER_BEAUTIFY_LOOPS,         \"After beautify loops\") \\\n-  flags(BEFORE_CLOOPS,                \"Before CountedLoop\") \\\n-  flags(AFTER_CLOOPS,                 \"After CountedLoop\") \\\n-  flags(PHASEIDEAL_BEFORE_EA,         \"PhaseIdealLoop before EA\") \\\n-  flags(AFTER_EA,                     \"After Escape Analysis\") \\\n-  flags(ITER_GVN_AFTER_EA,            \"Iter GVN after EA\") \\\n-  flags(ITER_GVN_AFTER_ELIMINATION,   \"Iter GVN after eliminating allocations and locks\") \\\n-  flags(PHASEIDEALLOOP1,              \"PhaseIdealLoop 1\") \\\n-  flags(PHASEIDEALLOOP2,              \"PhaseIdealLoop 2\") \\\n-  flags(PHASEIDEALLOOP3,              \"PhaseIdealLoop 3\") \\\n-  flags(CCP1,                         \"PhaseCCP 1\") \\\n-  flags(ITER_GVN2,                    \"Iter GVN 2\") \\\n-  flags(PHASEIDEALLOOP_ITERATIONS,    \"PhaseIdealLoop iterations\") \\\n-  flags(MACRO_EXPANSION,              \"Macro expand\") \\\n-  flags(BARRIER_EXPANSION,            \"Barrier expand\") \\\n-  flags(OPTIMIZE_FINISHED,            \"Optimize finished\") \\\n-  flags(BEFORE_MATCHING,              \"Before matching\") \\\n-  flags(MATCHING,                     \"After matching\") \\\n-  flags(GLOBAL_CODE_MOTION,           \"Global code motion\") \\\n-  flags(MACH_ANALYSIS,                \"After mach analysis\") \\\n-  flags(FINAL_CODE,                   \"Final Code\") \\\n-  flags(END,                          \"End\") \\\n-  flags(FAILURE,                      \"Failure\") \\\n-  flags(ALL,                          \"All\") \\\n-  flags(DEBUG,                        \"Debug\")\n+  flags(BEFORE_STRINGOPTS,              \"Before StringOpts\") \\\n+  flags(AFTER_STRINGOPTS,               \"After StringOpts\") \\\n+  flags(BEFORE_REMOVEUSELESS,           \"Before RemoveUseless\") \\\n+  flags(AFTER_PARSING,                  \"After Parsing\") \\\n+  flags(BEFORE_ITER_GVN,                \"Before Iter GVN\") \\\n+  flags(ITER_GVN1,                      \"Iter GVN 1\") \\\n+  flags(AFTER_ITER_GVN_STEP,            \"After Iter GVN Step\") \\\n+  flags(AFTER_ITER_GVN,                 \"After Iter GVN\") \\\n+  flags(INCREMENTAL_INLINE_STEP,        \"Incremental Inline Step\") \\\n+  flags(INCREMENTAL_INLINE_CLEANUP,     \"Incremental Inline Cleanup\") \\\n+  flags(INCREMENTAL_INLINE,             \"Incremental Inline\") \\\n+  flags(INCREMENTAL_BOXING_INLINE,      \"Incremental Boxing Inline\") \\\n+  flags(EXPAND_VUNBOX,                  \"Expand VectorUnbox\") \\\n+  flags(SCALARIZE_VBOX,                 \"Scalarize VectorBox\") \\\n+  flags(INLINE_VECTOR_REBOX,            \"Inline Vector Rebox Calls\") \\\n+  flags(EXPAND_VBOX,                    \"Expand VectorBox\") \\\n+  flags(ELIMINATE_VBOX_ALLOC,           \"Eliminate VectorBoxAllocate\") \\\n+  flags(ITER_GVN_BEFORE_EA,             \"Iter GVN before EA\") \\\n+  flags(ITER_GVN_AFTER_VECTOR,          \"Iter GVN after vector box elimination\") \\\n+  flags(BEFORE_BEAUTIFY_LOOPS,          \"Before beautify loops\") \\\n+  flags(AFTER_BEAUTIFY_LOOPS,           \"After beautify loops\") \\\n+  flags(BEFORE_LOOP_UNROLLING,          \"Before Loop Unrolling\") \\\n+  flags(AFTER_LOOP_UNROLLING,           \"After Loop Unrolling\") \\\n+  flags(BEFORE_SPLIT_IF,                \"Before Split If\") \\\n+  flags(AFTER_SPLIT_IF,                 \"After Split If\") \\\n+  flags(BEFORE_LOOP_PREDICATION_IC,     \"Before Loop Predication IC\") \\\n+  flags(AFTER_LOOP_PREDICATION_IC,      \"After Loop Predication IC\") \\\n+  flags(BEFORE_LOOP_PREDICATION_RC,     \"Before Loop Predication RC\") \\\n+  flags(AFTER_LOOP_PREDICATION_RC,      \"After Loop Predication RC\") \\\n+  flags(BEFORE_PARTIAL_PEELING,         \"Before Partial Peeling\") \\\n+  flags(AFTER_PARTIAL_PEELING,          \"After Partial Peeling\") \\\n+  flags(BEFORE_LOOP_PEELING,            \"Before Loop Peeling\") \\\n+  flags(AFTER_LOOP_PEELING,             \"After Loop Peeling\") \\\n+  flags(BEFORE_LOOP_UNSWITCHING,        \"Before Loop Unswitching\") \\\n+  flags(AFTER_LOOP_UNSWITCHING,         \"After Loop Unswitching\") \\\n+  flags(BEFORE_RANGE_CHECK_ELIMINATION, \"Before Range Check Elimination\") \\\n+  flags(AFTER_RANGE_CHECK_ELIMINATION,  \"After Range Check Elimination\") \\\n+  flags(BEFORE_PRE_MAIN_POST,           \"Before Pre\/Main\/Post Loops\") \\\n+  flags(AFTER_PRE_MAIN_POST,            \"After Pre\/Main\/Post Loops\") \\\n+  flags(SUPERWORD1_BEFORE_SCHEDULE,     \"Superword 1, Before Schedule\") \\\n+  flags(SUPERWORD2_BEFORE_OUTPUT,       \"Superword 2, Before Output\") \\\n+  flags(SUPERWORD3_AFTER_OUTPUT,        \"Superword 3, After Output\") \\\n+  flags(BEFORE_CLOOPS,                  \"Before CountedLoop\") \\\n+  flags(AFTER_CLOOPS,                   \"After CountedLoop\") \\\n+  flags(PHASEIDEAL_BEFORE_EA,           \"PhaseIdealLoop before EA\") \\\n+  flags(AFTER_EA,                       \"After Escape Analysis\") \\\n+  flags(ITER_GVN_AFTER_EA,              \"Iter GVN after EA\") \\\n+  flags(ITER_GVN_AFTER_ELIMINATION,     \"Iter GVN after eliminating allocations and locks\") \\\n+  flags(PHASEIDEALLOOP1,                \"PhaseIdealLoop 1\") \\\n+  flags(PHASEIDEALLOOP2,                \"PhaseIdealLoop 2\") \\\n+  flags(PHASEIDEALLOOP3,                \"PhaseIdealLoop 3\") \\\n+  flags(BEFORE_CCP1,                    \"Before PhaseCCP 1\") \\\n+  flags(CCP1,                           \"PhaseCCP 1\") \\\n+  flags(ITER_GVN2,                      \"Iter GVN 2\") \\\n+  flags(PHASEIDEALLOOP_ITERATIONS,      \"PhaseIdealLoop iterations\") \\\n+  flags(MACRO_EXPANSION,                \"Macro expand\") \\\n+  flags(BARRIER_EXPANSION,              \"Barrier expand\") \\\n+  flags(OPTIMIZE_FINISHED,              \"Optimize finished\") \\\n+  flags(BEFORE_MATCHING,                \"Before matching\") \\\n+  flags(MATCHING,                       \"After matching\") \\\n+  flags(GLOBAL_CODE_MOTION,             \"Global code motion\") \\\n+  flags(REGISTER_ALLOCATION,            \"Register Allocation\") \\\n+  flags(BLOCK_ORDERING,                 \"Block Ordering\") \\\n+  flags(PEEPHOLE,                       \"Peephole\") \\\n+  flags(POSTALLOC_EXPAND,               \"Post-Allocation Expand\") \\\n+  flags(MACH_ANALYSIS,                  \"After mach analysis\") \\\n+  flags(FINAL_CODE,                     \"Final Code\") \\\n+  flags(END,                            \"End\") \\\n+  flags(FAILURE,                        \"Failure\") \\\n+  flags(ALL,                            \"All\") \\\n+  flags(DEBUG,                          \"Debug\")\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":71,"deletions":45,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -594,6 +594,0 @@\n-  if (PrintOpto && VerifyLoopOptimizations) {\n-    tty->print_cr(\"Split-if\");\n-  }\n-  if (TraceLoopOpts) {\n-    tty->print_cr(\"SplitIf\");\n-  }\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2384,0 +2384,3 @@\n+  CountedLoopNode* cl = lpt()->_head->as_CountedLoop();\n+  _phase->C->print_method(PHASE_SUPERWORD1_BEFORE_SCHEDULE, 4, cl);\n+\n@@ -2491,0 +2494,1 @@\n+  _phase->C->print_method(PHASE_SUPERWORD2_BEFORE_OUTPUT, 4, cl);\n@@ -2811,0 +2815,2 @@\n+  _phase->C->print_method(PHASE_SUPERWORD3_AFTER_OUTPUT, 4, cl);\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-* `N=2`: additionally, after every major phase (including loop opts)\n+* `N=2`: additionally, after every major phase \n@@ -33,2 +33,3 @@\n-* `N=4`: additionally, after every effective IGVN step (slow)\n-* `N=5`: additionally, after parsing every bytecode (very slow)\n+* `N=4`: additionally, after every loop optimization\n+* `N=5`: additionally, after every effective IGVN step (slow)\n+* `N=6`: additionally, after parsing every bytecode (very slow)\n","filename":"src\/utils\/IdealGraphVisualizer\/README.md","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -63,0 +63,21 @@\n+    BEFORE_LOOP_UNROLLING(\"Before Loop Unrolling\"),\n+    AFTER_LOOP_UNROLLING(\"After Loop Unrolling\"),\n+    BEFORE_SPLIT_IF(\"Before Split If\"),\n+    AFTER_SPLIT_IF(\"After Split If\"),\n+    BEFORE_LOOP_PREDICATION_IC(\"Before Loop Predication IC\"),\n+    AFTER_LOOP_PREDICATION_IC(\"After Loop Predication IC\"),\n+    BEFORE_LOOP_PREDICATION_RC(\"Before Loop Predication RC\"),\n+    AFTER_LOOP_PREDICATION_RC(\"After Loop Predication RC\"),\n+    BEFORE_PARTIAL_PEELING(\"Before Partial Peeling\"),\n+    AFTER_PARTIAL_PEELING(\"After Partial Peeling\"),\n+    BEFORE_LOOP_PEELING(\"Before Loop Peeling\"),\n+    AFTER_LOOP_PEELING(\"After Loop Peeling\"),\n+    BEFORE_LOOP_UNSWITCHING(\"Before Loop Unswitching\"),\n+    AFTER_LOOP_UNSWITCHING(\"After Loop Unswitching\"),\n+    BEFORE_RANGE_CHECK_ELIMINATION(\"Before Range Check Elimination\"),\n+    AFTER_RANGE_CHECK_ELIMINATION(\"After Range Check Elimination\"),\n+    BEFORE_PRE_MAIN_POST(\"Before Pre\/Main\/Post Loops\"),\n+    AFTER_PRE_MAIN_POST(\"After Pre\/Main\/Post Loops\"),\n+    SUPERWORD1_BEFORE_SCHEDULE(\"Superword 1, Before Schedule\"),\n+    SUPERWORD2_BEFORE_OUTPUT(\"Superword 2, Before Output\"),\n+    SUPERWORD3_AFTER_OUTPUT(\"Superword 3, After Output\"),\n@@ -73,0 +94,1 @@\n+    BEFORE_CCP1(\"Before PhaseCCP 1\"),\n@@ -82,1 +104,0 @@\n-    MACH_ANALYSIS(\"After mach analysis\", RegexType.MACH),\n@@ -84,0 +105,5 @@\n+    REGISTER_ALLOCATION(\"Register Allocation\", RegexType.MACH),\n+    BLOCK_ORDERING(\"Block Ordering\", RegexType.MACH),\n+    PEEPHOLE(\"Peephole\", RegexType.MACH),\n+    POSTALLOC_EXPAND(\"Post-Allocation Expand\", RegexType.MACH),\n+    MACH_ANALYSIS(\"After mach analysis\", RegexType.MACH),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/CompilePhase.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-            Events.assertField(event, \"phaseLevel\").atLeast((short)0).atMost((short)4);\n+            Events.assertField(event, \"phaseLevel\").atLeast((short)0).atMost((short)5);\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCompilerPhase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}