{"files":[{"patch":"@@ -29,1 +29,1 @@\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"test\/langtools\/jdk\/jshell\/AbstractStopExecutionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng AnalysisTest\n+ * @run junit AnalysisTest\n@@ -31,1 +31,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -33,1 +33,0 @@\n-@Test\n@@ -36,0 +35,1 @@\n+    @Test\n@@ -44,0 +44,1 @@\n+    @Test\n@@ -52,0 +53,1 @@\n+    @Test\n@@ -57,0 +59,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/AnalysisTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng AnalyzeSnippetTest\n+ * @run junit AnalyzeSnippetTest\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Test;\n@@ -43,5 +42,3 @@\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.BeforeMethod;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -58,0 +55,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +59,0 @@\n-@Test\n@@ -65,1 +64,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -75,1 +74,1 @@\n-    @AfterMethod\n+    @AfterEach\n@@ -84,0 +83,1 @@\n+    @Test\n@@ -87,1 +87,1 @@\n-        assertEquals(sn.name(), \"List\");\n+        assertEquals(\"List\", sn.name());\n@@ -93,0 +93,1 @@\n+    @Test\n@@ -96,1 +97,1 @@\n-        assertEquals(sn.name(), \"C\");\n+        assertEquals(\"C\", sn.name());\n@@ -101,0 +102,1 @@\n+    @Test\n@@ -104,2 +106,2 @@\n-        assertEquals(sn.name(), \"m\");\n-        assertEquals(sn.signature(), \"(int)int\");\n+        assertEquals(\"m\", sn.name());\n+        assertEquals(\"(int)int\", sn.signature());\n@@ -108,0 +110,1 @@\n+    @Test\n@@ -111,2 +114,2 @@\n-        assertEquals(sn.name(), \"i\");\n-        assertEquals(sn.typeName(), \"int\");\n+        assertEquals(\"i\", sn.name());\n+        assertEquals(\"int\", sn.typeName());\n@@ -119,0 +122,1 @@\n+    @Test\n@@ -123,2 +127,2 @@\n-        assertEquals(sn.name(), \"aa\");\n-        assertEquals(sn.typeName(), \"int\");\n+        assertEquals(\"aa\", sn.name());\n+        assertEquals(\"int\", sn.typeName());\n@@ -127,2 +131,2 @@\n-        assertEquals(sn.name(), \"aa\");\n-        assertEquals(sn.typeName(), \"int\");\n+        assertEquals(\"aa\", sn.name());\n+        assertEquals(\"int\", sn.typeName());\n@@ -133,0 +137,1 @@\n+    @Test\n@@ -140,0 +145,1 @@\n+    @Test\n@@ -147,0 +153,1 @@\n+    @Test\n@@ -167,0 +174,1 @@\n+    @Test\n@@ -174,9 +182,9 @@\n-        assertEquals(wrapped, \"\"\"\n-                              package REPL;\n-\n-                              class $JShell$DOESNOTMATTER {\n-                                  public static java.lang.Object do_it$() throws java.lang.Throwable {\n-                                      return unknown();\n-                                  }\n-                              }\n-                              \"\"\");\n+        assertEquals(\"\"\"\n+                     package REPL;\n+\n+                     class $JShell$DOESNOTMATTER {\n+                         public static java.lang.Object do_it$() throws java.lang.Throwable {\n+                             return unknown();\n+                         }\n+                     }\n+                     \"\"\", wrapped);\n@@ -185,2 +193,2 @@\n-            assertEquals(wrapped.charAt(wrappedPos), code.charAt(pos));\n-            assertEquals(wrapper.wrappedToSourcePosition(wrappedPos), pos);\n+            assertEquals(code.charAt(pos), wrapped.charAt(wrappedPos));\n+            assertEquals(pos, wrapper.wrappedToSourcePosition(wrappedPos));\n@@ -190,0 +198,1 @@\n+    @Test\n@@ -195,1 +204,1 @@\n-        assertEquals(state.varValue(vsn), \"10\");\n+        assertEquals(\"10\", state.varValue(vsn));\n@@ -202,1 +211,1 @@\n-        assertEquals(sns.size(), 1, \"snippet count\");\n+        assertEquals(1, sns.size(), \"snippet count\");\n@@ -204,2 +213,2 @@\n-        assertEquals(sn.id(), \"*UNASSOCIATED*\");\n-        assertEquals(sn.subKind(), sk);\n+        assertEquals(\"*UNASSOCIATED*\", sn.id());\n+        assertEquals(sk, sn.subKind());\n@@ -216,1 +225,1 @@\n-        assertEquals(actual, expected);\n+        assertEquals(expected, actual);\n","filename":"test\/langtools\/jdk\/jshell\/AnalyzeSnippetTest.java","additions":46,"deletions":37,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng BadExecutionControlSpecTest\n+ * @run junit BadExecutionControlSpecTest\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Test;\n@@ -44,1 +43,2 @@\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,0 @@\n-@Test\n@@ -83,0 +82,1 @@\n+    @Test\n@@ -90,0 +90,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/BadExecutionControlSpecTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/timeout=600 ClassMembersTest\n+ * @run junit\/timeout=600 ClassMembersTest\n@@ -39,3 +39,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n@@ -45,0 +42,5 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -46,0 +48,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -48,1 +51,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -54,1 +57,2 @@\n-    @Test(dataProvider = \"memberTestCase\")\n+    @ParameterizedTest\n+    @MethodSource(\"memberTestCaseGenerator\")\n@@ -81,1 +85,2 @@\n-    @Test(dataProvider = \"memberTestCase\")\n+    @ParameterizedTest\n+    @MethodSource(\"memberTestCaseGenerator\")\n@@ -154,1 +159,2 @@\n-    @Test(dataProvider = \"retentionPolicyTestCase\")\n+    @ParameterizedTest\n+    @MethodSource(\"retentionPolicyTestCaseGenerator\")\n@@ -177,1 +183,0 @@\n-    @DataProvider(name = \"retentionPolicyTestCase\")\n@@ -186,1 +191,0 @@\n-    @DataProvider(name = \"memberTestCase\")\n","filename":"test\/langtools\/jdk\/jshell\/ClassMembersTest.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng ClassPathTest\n+ * @run junit ClassPathTest\n@@ -39,1 +39,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,0 @@\n-@Test\n@@ -47,0 +46,1 @@\n+    @Test\n@@ -55,0 +55,1 @@\n+    @Test\n@@ -65,0 +66,1 @@\n+    @Test\n@@ -85,0 +87,1 @@\n+    @Test\n@@ -107,0 +110,1 @@\n+    @Test\n@@ -112,0 +116,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ClassPathTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/timeout=480 ClassesTest\n+ * @run junit\/timeout=480 ClassesTest\n@@ -40,2 +40,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -54,4 +52,8 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-\n-@Test\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -60,0 +62,1 @@\n+    @Test\n@@ -64,0 +67,1 @@\n+    @Test\n@@ -85,0 +89,1 @@\n+    @Test\n@@ -95,0 +100,1 @@\n+    @Test\n@@ -101,0 +107,1 @@\n+    @Test\n@@ -106,0 +113,1 @@\n+    @Test\n@@ -111,0 +119,1 @@\n+    @Test\n@@ -116,0 +125,1 @@\n+    @Test\n@@ -131,0 +141,1 @@\n+    @Test\n@@ -152,0 +163,1 @@\n+    @Test\n@@ -183,0 +195,1 @@\n+    @Test\n@@ -204,0 +217,1 @@\n+    @Test\n@@ -224,2 +238,2 @@\n-        assertEquals(diags.size(), 1, \"Expected one error\");\n-        assertEquals(diags.get(0).getCode(), \"compiler.err.cyclic.inheritance\", \"Expected cyclic inheritance error\");\n+        assertEquals(1, diags.size(), \"Expected one error\");\n+        assertEquals(\"compiler.err.cyclic.inheritance\", diags.get(0).getCode(), \"Expected cyclic inheritance error\");\n@@ -229,0 +243,1 @@\n+    @Test\n@@ -237,0 +252,1 @@\n+    @Test\n@@ -250,0 +266,1 @@\n+    @Test\n@@ -257,0 +274,1 @@\n+    @Test\n@@ -265,0 +283,1 @@\n+    @Test\n@@ -272,0 +291,1 @@\n+    @Test\n@@ -280,1 +300,0 @@\n-    @DataProvider(name = \"innerClasses\")\n@@ -291,1 +310,2 @@\n-    @Test(dataProvider = \"innerClasses\")\n+    @ParameterizedTest\n+    @MethodSource(\"innerClasses\")\n@@ -302,0 +322,1 @@\n+    @Test\n@@ -312,0 +333,1 @@\n+    @Test\n@@ -314,1 +336,1 @@\n-        assertEquals(varKey(assertEval(\"A a = new A();\")).name(), \"a\");\n+        assertEquals(\"a\", varKey(assertEval(\"A a = new A();\")).name());\n@@ -316,1 +338,1 @@\n-        assertEquals(variableKey.typeName(), \"A.B\");\n+        assertEquals(\"A.B\", variableKey.typeName());\n@@ -319,0 +341,1 @@\n+    @Test\n@@ -321,1 +344,1 @@\n-        assertEquals(varKey(assertEval(\"A a = new A();\")).name(), \"a\");\n+        assertEquals(\"a\", varKey(assertEval(\"A a = new A();\")).name());\n@@ -323,1 +346,1 @@\n-        assertEquals(variableKey.typeName(), \"A.I1\");\n+        assertEquals(\"A.I1\", variableKey.typeName());\n@@ -326,0 +349,1 @@\n+    @Test\n@@ -345,0 +369,1 @@\n+    @Test\n@@ -363,0 +388,1 @@\n+    @Test\n@@ -377,0 +403,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ClassesTest.java","additions":42,"deletions":15,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @run testng CommandCompletionTest\n+ * @run junit CommandCompletionTest\n@@ -49,2 +49,0 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.Test;\n@@ -56,3 +54,5 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n@@ -97,1 +97,1 @@\n-        assertEquals(completions, expectedL, \"Command: \" + code + \", output: \" +\n+        assertEquals(expectedL, completions, \"Command: \" + code + \", output: \" +\n@@ -359,3 +359,1 @@\n-        if (selectedFile == null) {\n-            throw new SkipException(\"No suitable file(s) found for this test in \" + home);\n-        }\n+        Assumptions.assumeFalse(selectedFile == null, \"No suitable file(s) found for this test in \" + home);\n","filename":"test\/langtools\/jdk\/jshell\/CommandCompletionTest.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng CompilerOptionsTest\n+ * @run junit CompilerOptionsTest\n@@ -33,2 +33,0 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n@@ -36,0 +34,2 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,0 @@\n-@Test\n@@ -40,1 +39,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -46,0 +45,1 @@\n+    @Test\n@@ -51,0 +51,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/CompilerOptionsTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,2 +67,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -73,0 +71,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -102,1 +102,0 @@\n-    @DataProvider(name = \"crawler\")\n@@ -124,1 +123,2 @@\n-    @Test(dataProvider = \"crawler\")\n+    @ParameterizedTest\n+    @MethodSource(\"dataProvider\")\n","filename":"test\/langtools\/jdk\/jshell\/CompletenessStressTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng CompletenessTest\n+ * @run junit CompletenessTest\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Test;\n@@ -42,1 +41,1 @@\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +43,0 @@\n-@Test\n@@ -281,0 +279,1 @@\n+    @Test\n@@ -285,0 +284,1 @@\n+    @Test\n@@ -289,0 +289,1 @@\n+    @Test\n@@ -293,0 +294,1 @@\n+    @Test\n@@ -297,0 +299,1 @@\n+    @Test\n@@ -301,0 +304,1 @@\n+    @Test\n@@ -305,0 +309,1 @@\n+    @Test\n@@ -312,0 +317,1 @@\n+    @Test\n@@ -319,0 +325,1 @@\n+    @Test\n@@ -335,0 +342,1 @@\n+    @Test\n@@ -341,0 +349,1 @@\n+    @Test\n@@ -348,0 +357,1 @@\n+    @Test\n@@ -355,0 +365,1 @@\n+    @Test\n@@ -362,0 +373,1 @@\n+    @Test\n@@ -366,0 +378,1 @@\n+    @Test\n@@ -371,0 +384,1 @@\n+    @Test\n@@ -385,0 +399,1 @@\n+    @Test\n@@ -393,0 +408,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/CompletenessTest.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/timeout=480 CompletionSuggestionTest\n+ * @run junit\/timeout=480 CompletionSuggestionTest\n@@ -54,2 +54,0 @@\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n@@ -61,0 +59,3 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -62,1 +63,0 @@\n-@Test\n@@ -68,0 +68,1 @@\n+    @Test\n@@ -117,0 +118,1 @@\n+    @Test\n@@ -123,0 +125,1 @@\n+    @Test\n@@ -127,0 +130,1 @@\n+    @Test\n@@ -160,0 +164,1 @@\n+    @Test\n@@ -172,0 +177,1 @@\n+    @Test\n@@ -204,0 +210,1 @@\n+    @Test\n@@ -214,0 +221,1 @@\n+    @Test\n@@ -229,0 +237,1 @@\n+    @Test\n@@ -249,0 +258,1 @@\n+    @Test\n@@ -277,0 +287,1 @@\n+    @Test\n@@ -281,0 +292,1 @@\n+    @Test\n@@ -286,0 +298,1 @@\n+    @Test\n@@ -304,0 +317,1 @@\n+    @Test\n@@ -308,0 +322,1 @@\n+    @Test\n@@ -317,0 +332,1 @@\n+    @Test\n@@ -345,0 +361,1 @@\n+    @Test\n@@ -360,0 +377,1 @@\n+    @Test\n@@ -365,0 +383,1 @@\n+    @Test\n@@ -372,0 +391,1 @@\n+    @Test\n@@ -383,0 +403,1 @@\n+    @Test\n@@ -390,0 +411,1 @@\n+    @Test\n@@ -400,0 +422,1 @@\n+    @Test\n@@ -420,0 +443,1 @@\n+    @Test\n@@ -485,0 +509,1 @@\n+    @Test\n@@ -496,0 +521,1 @@\n+    @Test\n@@ -508,0 +534,1 @@\n+    @Test\n@@ -512,0 +539,1 @@\n+    @Test\n@@ -525,0 +553,1 @@\n+    @Test\n@@ -540,0 +569,1 @@\n+    @Test\n@@ -551,0 +581,1 @@\n+    @Test\n@@ -557,0 +588,1 @@\n+    @Test\n@@ -573,0 +605,1 @@\n+    @Test\n@@ -627,0 +660,1 @@\n+    @Test\n@@ -652,0 +686,1 @@\n+    @Test\n@@ -663,0 +698,1 @@\n+    @Test\n@@ -672,0 +708,1 @@\n+    @Test\n@@ -679,0 +716,1 @@\n+    @Test\n@@ -683,0 +721,1 @@\n+    @Test\n@@ -706,0 +745,1 @@\n+    @Test\n@@ -727,1 +767,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -759,1 +799,2 @@\n-    @Test(enabled = false) \/\/TODO 8171829\n+    @Test \/\/TODO 8171829\n+    @Disabled\n@@ -782,0 +823,1 @@\n+    @Test\n@@ -794,0 +836,1 @@\n+    @Test\n@@ -799,0 +842,1 @@\n+    @Test\n@@ -805,0 +849,1 @@\n+    @Test\n@@ -816,0 +861,1 @@\n+    @Test\n@@ -829,0 +875,1 @@\n+    @Test\n@@ -838,0 +885,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/CompletionSuggestionTest.java","additions":54,"deletions":6,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng ComputeFQNsTest\n+ * @run junit ComputeFQNsTest\n@@ -44,2 +44,3 @@\n-import static org.testng.Assert.*;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +48,0 @@\n-@Test\n@@ -53,0 +53,1 @@\n+    @Test\n@@ -80,1 +81,2 @@\n-    @Test(enabled = false) \/\/TODO 8161165\n+    @Test \/\/TODO 8161165\n+    @Disabled\n@@ -130,2 +132,2 @@\n-        assertEquals(candidates.getNames(), Arrays.asList(), \"Input: \" + code + \", candidates=\" + candidates.getNames());\n-        assertEquals(candidates.isUpToDate(), false, \"Input: \" + code + \", up-to-date=\" + candidates.isUpToDate());\n+        assertEquals(Arrays.asList(), candidates.getNames(), \"Input: \" + code + \", candidates=\" + candidates.getNames());\n+        assertEquals(false, candidates.isUpToDate(), \"Input: \" + code + \", up-to-date=\" + candidates.isUpToDate());\n@@ -139,1 +141,1 @@\n-        assertEquals(candidates.getNames(), Arrays.asList(\"test.FQNTest\"), \"Input: \" + code + \", candidates=\" + candidates.getNames());\n+        assertEquals(Arrays.asList(\"test.FQNTest\"), candidates.getNames(), \"Input: \" + code + \", candidates=\" + candidates.getNames());\n","filename":"test\/langtools\/jdk\/jshell\/ComputeFQNsTest.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng ConsoleTest\n+ * @run junit ConsoleTest\n@@ -48,2 +48,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n@@ -65,1 +65,1 @@\n-                assertEquals(prompt, \"expected\");\n+                assertEquals(\"expected\", prompt);\n@@ -73,1 +73,1 @@\n-                assertEquals(prompt, \"expected\");\n+                assertEquals(\"expected\", prompt);\n@@ -121,1 +121,1 @@\n-                assertEquals(prompt, \"expected\");\n+                assertEquals(\"expected\", prompt);\n@@ -149,1 +149,1 @@\n-        assertEquals(sb.toString(), expected);\n+        assertEquals(expected, sb.toString());\n@@ -174,1 +174,1 @@\n-        assertEquals(sb.toString(), expected);\n+        assertEquals(expected, sb.toString());\n@@ -210,1 +210,1 @@\n-        assertEquals(sb.toString(), expected);\n+        assertEquals(expected, sb.toString());\n","filename":"test\/langtools\/jdk\/jshell\/ConsoleTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng ConsoleToolTest\n+ * @run junit ConsoleToolTest\n@@ -35,1 +35,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"test\/langtools\/jdk\/jshell\/ConsoleToolTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng CustomInputToolBuilder\n+ * @run junit CustomInputToolBuilder\n@@ -41,1 +41,2 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -43,3 +44,0 @@\n-import static org.testng.Assert.assertTrue;\n-\n-@Test\n@@ -50,0 +48,1 @@\n+    @Test\n@@ -105,0 +104,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/CustomInputToolBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng DropTest\n+ * @run junit DropTest\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Test;\n@@ -39,0 +38,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-@Test\n@@ -43,0 +42,1 @@\n+    @Test\n@@ -91,0 +91,1 @@\n+    @Test\n@@ -104,0 +105,1 @@\n+    @Test\n@@ -109,0 +111,1 @@\n+    @Test\n@@ -126,0 +129,1 @@\n+    @Test\n@@ -142,0 +146,1 @@\n+    @Test\n@@ -153,0 +158,1 @@\n+    @Test\n@@ -168,0 +174,1 @@\n+    @Test\n@@ -182,0 +189,1 @@\n+    @Test\n@@ -207,0 +215,1 @@\n+    @Test\n@@ -231,0 +240,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/DropTest.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,4 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -64,1 +64,1 @@\n-        assertEditInput(after, cmd, s -> assertEquals(s, input, \"Input\"), action);\n+        assertEditInput(after, cmd, s -> assertEquals(input, s, \"Input\"), action);\n@@ -68,1 +68,1 @@\n-        assertEditOutput(after, cmd, s -> assertEquals(s.trim(), output.trim(), \"command\"), action);\n+        assertEditOutput(after, cmd, s -> assertEquals(output.trim(), s.trim(), \"command\"), action);\n@@ -222,2 +222,1 @@\n-        testEditor(\n-                a -> assertVariable(a, \"int\", \"a\"),\n+        testEditor(a -> assertVariable(a, \"int\", \"a\"),\n@@ -228,4 +227,4 @@\n-                    assertEquals(ss.length, 3, \"Expected 3 lines: \" + s);\n-                    assertEquals(ss[0], \"int a;\");\n-                    assertEquals(ss[1], \"void f() {}\");\n-                    assertEquals(ss[2], \"class A {}\");\n+                    assertEquals(3, ss.length, \"Expected 3 lines: \" + s);\n+                    assertEquals(\"int a;\", ss[0]);\n+                    assertEquals(\"void f() {}\", ss[1]);\n+                    assertEquals(\"class A {}\", ss[2]);\n@@ -266,1 +265,2 @@\n-    @Test(enabled = false) \/\/ TODO JDK-8191875\n+    @Test \/\/ TODO JDK-8191875\n+    @Disabled\n","filename":"test\/langtools\/jdk\/jshell\/EditorTestBase.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng EmptyTest\n+ * @run junit EmptyTest\n@@ -31,1 +31,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -33,1 +33,0 @@\n-@Test\n@@ -36,0 +35,1 @@\n+    @Test\n@@ -40,0 +40,1 @@\n+    @Test\n@@ -44,0 +45,1 @@\n+    @Test\n@@ -48,0 +50,1 @@\n+    @Test\n@@ -52,0 +55,1 @@\n+    @Test\n@@ -56,0 +60,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/EmptyTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng ErrorRecoveryTest\n+ * @run junit ErrorRecoveryTest\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Test;\n@@ -41,0 +40,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,0 @@\n-@Test\n@@ -45,0 +44,1 @@\n+    @Test\n@@ -54,0 +54,1 @@\n+    @Test\n@@ -61,0 +62,1 @@\n+    @Test\n@@ -70,0 +72,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ErrorRecoveryTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng ErrorTranslationTest\n+ * @run junit ErrorTranslationTest\n@@ -44,1 +44,4 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -46,4 +49,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-\n-@Test\n@@ -52,1 +51,2 @@\n-    @Test(enabled = false) \/\/ TODO 8080353\n+    @Test \/\/ TODO 8080353\n+    @Disabled\n@@ -63,0 +63,1 @@\n+    @Test\n@@ -70,0 +71,1 @@\n+    @Test\n@@ -76,1 +78,2 @@\n-    @Test(enabled = false) \/\/ TODO 8132147\n+    @Test \/\/ TODO 8132147\n+    @Disabled\n@@ -118,1 +121,1 @@\n-            assertEquals(lines[0], kind);\n+            assertEquals(kind, lines[0]);\n@@ -122,1 +125,1 @@\n-                    assertEquals(lines[i + 1], expectedMarkingLine, \"Input: \" + expectedSource + \", marking line: \");\n+                    assertEquals(expectedMarkingLine, lines[i + 1], \"Input: \" + expectedSource + \", marking line: \");\n@@ -149,0 +152,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ErrorTranslationTest.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng ExceptionMessageTest\n+ * @run junit ExceptionMessageTest\n@@ -45,4 +45,3 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +49,0 @@\n-@Test\n@@ -53,0 +51,1 @@\n+    @Test\n@@ -57,0 +56,1 @@\n+    @Test\n@@ -61,0 +61,1 @@\n+    @Test\n@@ -88,1 +89,1 @@\n-        assertEquals(result.size(), 1, \"Expected only one event\");\n+        assertEquals(1, result.size(), \"Expected only one event\");\n@@ -92,1 +93,1 @@\n-        assertEquals(out, expected, \"Exception message not as expected: \" +\n+        assertEquals(expected, out, \"Exception message not as expected: \" +\n","filename":"test\/langtools\/jdk\/jshell\/ExceptionMessageTest.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng ExceptionsTest\n+ * @run junit ExceptionsTest\n@@ -49,1 +49,3 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -51,3 +53,0 @@\n-import static org.testng.Assert.*;\n-\n-@Test\n@@ -59,0 +58,1 @@\n+    @Test\n@@ -67,0 +67,1 @@\n+    @Test\n@@ -75,0 +76,1 @@\n+    @Test\n@@ -87,0 +89,1 @@\n+    @Test\n@@ -99,0 +102,1 @@\n+    @Test\n@@ -125,0 +129,1 @@\n+    @Test\n@@ -147,0 +152,1 @@\n+    @Test\n@@ -159,0 +165,1 @@\n+    @Test\n@@ -171,0 +178,1 @@\n+    @Test\n@@ -185,0 +193,1 @@\n+    @Test\n@@ -201,0 +210,1 @@\n+    @Test\n@@ -222,0 +232,1 @@\n+    @Test\n@@ -235,0 +246,1 @@\n+    @Test\n@@ -253,0 +265,1 @@\n+    @Test\n@@ -264,0 +277,1 @@\n+    @Test\n@@ -295,1 +309,2 @@\n-    @Test(enabled = false) \/\/ TODO 8129427\n+    @Test \/\/ TODO 8129427\n+    @Disabled\n@@ -302,0 +317,1 @@\n+    @Test\n@@ -364,1 +380,1 @@\n-            assertEquals(actualException, expectedException,\n+            assertEquals(expectedException, actualException,\n@@ -368,1 +384,1 @@\n-                assertEquals(ex.getMessage(), exceptionInfo.message,\n+                assertEquals(exceptionInfo.message, ex.getMessage(),\n@@ -398,1 +414,1 @@\n-            assertEquals(ure.getSnippet(), uei.sn);\n+            assertEquals(uei.sn, ure.getSnippet());\n@@ -408,1 +424,1 @@\n-                assertEquals(actual.length, expected.length, message + \" : arrays do not have the same size\");\n+                assertEquals(expected.length, actual.length, message + \" : arrays do not have the same size\");\n@@ -412,1 +428,1 @@\n-                    assertEquals(actualElement.getClassName(), expectedElement.getClassName(), message + \" : class names [\" + i + \"]\");\n+                    assertEquals(expectedElement.getClassName(), actualElement.getClassName(), message + \" : class names [\" + i + \"]\");\n@@ -417,1 +433,1 @@\n-                        assertEquals(actualElement.getMethodName(), expectedElement.getMethodName(), message + \" : method names [\" + i + \"]\");\n+                        assertEquals(expectedElement.getMethodName(), actualElement.getMethodName(), message + \" : method names [\" + i + \"]\");\n@@ -419,1 +435,1 @@\n-                    assertEquals(actualElement.getFileName(), expectedElement.getFileName(), message + \" : file names [\" + i + \"]\");\n+                    assertEquals(expectedElement.getFileName(), actualElement.getFileName(), message + \" : file names [\" + i + \"]\");\n@@ -421,1 +437,1 @@\n-                        assertEquals(actualElement.getLineNumber(), expectedElement.getLineNumber(), message + \" : line numbers [\" + i + \"]\"\n+                        assertEquals(expectedElement.getLineNumber(), actualElement.getLineNumber(), message + \" : line numbers [\" + i + \"]\"\n","filename":"test\/langtools\/jdk\/jshell\/ExceptionsTest.java","additions":31,"deletions":15,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run testng ExecutionControlSpecTest\n+ * @run junit ExecutionControlSpecTest\n@@ -42,3 +42,3 @@\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +50,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -89,1 +89,1 @@\n-    @AfterMethod\n+    @AfterEach\n","filename":"test\/langtools\/jdk\/jshell\/ExecutionControlSpecTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Test;\n@@ -31,0 +30,1 @@\n+import org.junit.jupiter.api.Test;\n","filename":"test\/langtools\/jdk\/jshell\/ExecutionControlTestBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -82,2 +82,2 @@\n-        assertEquals(code, this.code, \"Expected error: \" + this.code + \", got: \" + code);\n-        assertEquals(diagnostic.isError(), kind == Diagnostic.Kind.ERROR);\n+        assertEquals(this.code, code, \"Expected error: \" + this.code + \", got: \" + code);\n+        assertEquals(kind == Diagnostic.Kind.ERROR, diagnostic.isError());\n@@ -85,1 +85,1 @@\n-            assertEquals(diagnostic.getStartPosition(), startPosition, \"Start position\");\n+            assertEquals(startPosition, diagnostic.getStartPosition(), \"Start position\");\n@@ -88,1 +88,1 @@\n-            assertEquals(diagnostic.getEndPosition(), endPosition, \"End position\");\n+            assertEquals(endPosition, diagnostic.getEndPosition(), \"End position\");\n@@ -91,1 +91,1 @@\n-            assertEquals(diagnostic.getPosition(), position, \"Position\");\n+            assertEquals(position, diagnostic.getPosition(), \"Position\");\n","filename":"test\/langtools\/jdk\/jshell\/ExpectedDiagnostic.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng ExternalEditorTest\n+ * @run junit ExternalEditorTest\n@@ -50,8 +50,9 @@\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import org.junit.jupiter.api.AfterAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n@@ -59,0 +60,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -136,2 +138,1 @@\n-        testEditor(\n-                a -> assertCommand(a, \"if (true) {}\", \"\"),\n+        testEditor(a -> assertCommand(a, \"if (true) {}\", \"\"),\n@@ -144,2 +145,1 @@\n-                    assertEquals(getSource(),\n-                            \"if (true) {}\\n\" +\n+                    assertEquals(                            \"if (true) {}\\n\" +\n@@ -150,1 +150,1 @@\n-                            \"System.err.flush();\\n\");\n+                            \"System.err.flush();\\n\", getSource());\n@@ -176,1 +176,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -253,1 +253,2 @@\n-    @Test(enabled = false) \/\/ TODO 8159229\n+    @Test \/\/ TODO 8159229\n+    @Disabled\n@@ -267,1 +268,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"test\/langtools\/jdk\/jshell\/ExternalEditorTest.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run testng FailOverDirectExecutionControlTest\n+ * @run junit FailOverDirectExecutionControlTest\n@@ -51,3 +51,0 @@\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n@@ -56,3 +53,6 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNull;\n-import static org.testng.Assert.assertTrue;\n+import org.junit.jupiter.api.AfterEach;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +60,0 @@\n-@Test\n@@ -96,1 +95,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -137,1 +136,1 @@\n-    @AfterMethod\n+    @AfterEach\n@@ -147,0 +146,1 @@\n+    @Test\n@@ -149,3 +149,3 @@\n-        assertEquals(logged.get(Level.FINEST).size(), 1);\n-        assertEquals(logged.get(Level.FINE).size(), 2);\n-        assertEquals(logged.get(Level.WARNING).size(), 2);\n+        assertEquals(1, logged.get(Level.FINEST).size());\n+        assertEquals(2, logged.get(Level.FINE).size());\n+        assertEquals(2, logged.get(Level.WARNING).size());\n","filename":"test\/langtools\/jdk\/jshell\/FailOverDirectExecutionControlTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng FailOverExecutionControlDyingLaunchTest\n+ * @run junit FailOverExecutionControlDyingLaunchTest\n@@ -35,2 +35,1 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -38,1 +37,0 @@\n-@Test\n@@ -41,1 +39,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlDyingLaunchTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng FailOverExecutionControlHangingLaunchTest\n+ * @run junit FailOverExecutionControlHangingLaunchTest\n@@ -34,2 +34,1 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -37,1 +36,0 @@\n-@Test\n@@ -40,1 +38,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlHangingLaunchTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng FailOverExecutionControlHangingListenTest\n+ * @run junit FailOverExecutionControlHangingListenTest\n@@ -36,2 +36,1 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -39,1 +38,0 @@\n-@Test\n@@ -42,1 +40,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlHangingListenTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng FailOverExecutionControlTest\n+ * @run junit FailOverExecutionControlTest\n@@ -34,2 +34,1 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -37,1 +36,0 @@\n-@Test\n@@ -40,1 +38,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng FileManagerTest\n+ * @run junit FileManagerTest\n@@ -40,2 +40,3 @@\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,3 +44,0 @@\n-import static org.testng.Assert.assertTrue;\n-\n-@Test\n@@ -103,1 +101,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -109,0 +107,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/FileManagerTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng ForwardReferenceImportTest\n+ * @run junit ForwardReferenceImportTest\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Test;\n@@ -36,0 +35,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,0 @@\n-@Test\n@@ -40,0 +39,1 @@\n+    @Test\n@@ -60,0 +60,1 @@\n+    @Test\n@@ -79,0 +80,1 @@\n+    @Test\n@@ -98,0 +100,1 @@\n+    @Test\n@@ -117,0 +120,1 @@\n+    @Test\n@@ -136,0 +140,1 @@\n+    @Test\n@@ -156,0 +161,1 @@\n+    @Test\n@@ -176,0 +182,1 @@\n+    @Test\n@@ -198,0 +205,1 @@\n+    @Test\n@@ -222,0 +230,1 @@\n+    @Test\n@@ -244,0 +253,1 @@\n+    @Test\n@@ -264,0 +274,1 @@\n+    @Test\n@@ -285,0 +296,1 @@\n+    @Test\n@@ -308,0 +320,1 @@\n+    @Test\n@@ -329,0 +342,1 @@\n+    @Test\n@@ -350,0 +364,1 @@\n+    @Test\n@@ -371,0 +386,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ForwardReferenceImportTest.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng ForwardReferenceTest\n+ * @run junit ForwardReferenceTest\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Test;\n@@ -40,1 +39,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -42,1 +41,2 @@\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,0 @@\n-@Test\n@@ -47,0 +46,1 @@\n+    @Test\n@@ -59,0 +59,1 @@\n+    @Test\n@@ -71,0 +72,1 @@\n+    @Test\n@@ -90,0 +92,1 @@\n+    @Test\n@@ -112,0 +115,1 @@\n+    @Test\n@@ -136,0 +140,1 @@\n+    @Test\n@@ -153,0 +158,1 @@\n+    @Test\n@@ -162,3 +168,3 @@\n-        assertEquals(unsn.name(), \"A\", \"Wrong with unresolved\");\n-        assertEquals(getState().unresolvedDependencies(unsn).count(), 1, \"Wrong size unresolved\");\n-        assertEquals(getState().diagnostics(unsn).count(), 0L, \"Expected no diagnostics\");\n+        assertEquals(\"A\", unsn.name(), \"Wrong with unresolved\");\n+        assertEquals(1, getState().unresolvedDependencies(unsn).count(), \"Wrong size unresolved\");\n+        assertEquals(0L, getState().diagnostics(unsn).count(), \"Expected no diagnostics\");\n@@ -177,0 +183,1 @@\n+    @Test\n@@ -203,0 +210,1 @@\n+    @Test\n@@ -218,0 +226,1 @@\n+    @Test\n@@ -235,0 +244,1 @@\n+    @Test\n@@ -254,0 +264,1 @@\n+    @Test\n@@ -272,0 +283,1 @@\n+    @Test\n@@ -290,0 +302,1 @@\n+    @Test\n@@ -308,0 +321,1 @@\n+    @Test\n@@ -314,0 +328,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ForwardReferenceTest.java","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng GetResourceTest\n+ * @run junit GetResourceTest\n@@ -36,1 +36,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,0 @@\n-@Test\n@@ -42,0 +41,1 @@\n+    @Test\n@@ -60,0 +60,1 @@\n+    @Test\n@@ -88,0 +89,1 @@\n+    @Test\n@@ -100,0 +102,1 @@\n+    @Test\n@@ -141,0 +144,1 @@\n+    @Test\n@@ -157,0 +161,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/GetResourceTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run testng HighlightUITest\n+ * @run junit HighlightUITest\n@@ -41,1 +41,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -50,0 +49,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/HighlightUITest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng HistoryTest\n+ * @run junit HistoryTest\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Test;\n@@ -44,2 +43,3 @@\n-import static org.testng.Assert.*;\n-import org.testng.annotations.BeforeMethod;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -183,10 +183,10 @@\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_00\"), \"\/debug 0\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_01\"), \"void test() {\\\\\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_02\"), \"    System.err.println(1);\\\\\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_03\"), \"    System.err.println(`\\\\\\\\\\\\\\\\\\\\\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_04\"), \"    \\\\\\\\\\\\\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_05\"), \"`);\\\\\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_06\"), \"} \/\/test\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_07\"), \"\/debug 0\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_08\"), \"int i\");\n-        assertEquals(prefsMap.get(\"HISTORY_LINE_09\"), \"\/exit\");\n+        assertEquals(\"\/debug 0\", prefsMap.get(\"HISTORY_LINE_00\"));\n+        assertEquals(\"void test() {\\\\\", prefsMap.get(\"HISTORY_LINE_01\"));\n+        assertEquals(\"    System.err.println(1);\\\\\", prefsMap.get(\"HISTORY_LINE_02\"));\n+        assertEquals(\"    System.err.println(`\\\\\\\\\\\\\\\\\\\\\", prefsMap.get(\"HISTORY_LINE_03\"));\n+        assertEquals(\"    \\\\\\\\\\\\\", prefsMap.get(\"HISTORY_LINE_04\"));\n+        assertEquals(\"`);\\\\\", prefsMap.get(\"HISTORY_LINE_05\"));\n+        assertEquals(\"} \/\/test\", prefsMap.get(\"HISTORY_LINE_06\"));\n+        assertEquals(\"\/debug 0\", prefsMap.get(\"HISTORY_LINE_07\"));\n+        assertEquals(\"int i\", prefsMap.get(\"HISTORY_LINE_08\"));\n+        assertEquals(\"\/exit\", prefsMap.get(\"HISTORY_LINE_09\"));\n@@ -207,1 +207,1 @@\n-        assertEquals(history.current().toString(), expected);\n+        assertEquals(expected, history.current().toString());\n@@ -210,1 +210,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/HistoryTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run testng HistoryUITest\n+ * @run junit HistoryUITest\n@@ -41,1 +41,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -50,0 +49,1 @@\n+    @Test\n@@ -81,0 +81,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/HistoryUITest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng IOTest\n+ * @run junit IOTest\n@@ -31,1 +31,2 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -33,3 +34,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n@@ -40,0 +38,1 @@\n+    @Test\n@@ -42,1 +41,1 @@\n-        assertEquals(getOutput(), \"Test\" + LINE_SEPARATOR);\n+        assertEquals(\"Test\" + LINE_SEPARATOR, getOutput());\n@@ -45,0 +44,1 @@\n+    @Test\n@@ -47,1 +47,1 @@\n-        assertEquals(getErrorOutput(), \"Oops\" + LINE_SEPARATOR);\n+        assertEquals(\"Oops\" + LINE_SEPARATOR, getErrorOutput());\n@@ -50,0 +50,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/IOTest.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng IdGeneratorTest\n+ * @run junit IdGeneratorTest\n@@ -41,1 +41,3 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -43,4 +45,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-\n-@Test\n@@ -49,0 +47,1 @@\n+    @Test\n@@ -60,0 +59,1 @@\n+    @Test\n@@ -72,1 +72,1 @@\n-                assertEquals(\"temp\" + (i + 1), v.name(), \"Custom id: \");\n+                assertEquals(v.name(), \"temp\" + (i + 1), \"Custom id: \");\n@@ -77,0 +77,1 @@\n+    @Test\n@@ -86,0 +87,1 @@\n+    @Test\n@@ -102,0 +104,1 @@\n+    @Test\n@@ -119,0 +122,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/IdGeneratorTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng IgnoreTest\n+ * @run junit IgnoreTest\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Test;\n@@ -39,0 +38,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-@Test\n@@ -43,0 +42,1 @@\n+    @Test\n@@ -61,0 +61,1 @@\n+    @Test\n@@ -74,0 +75,1 @@\n+    @Test\n@@ -88,0 +90,1 @@\n+    @Test\n@@ -101,0 +104,1 @@\n+    @Test\n@@ -107,0 +111,1 @@\n+    @Test\n@@ -114,0 +119,1 @@\n+    @Test\n@@ -122,0 +128,1 @@\n+    @Test\n@@ -129,0 +136,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/IgnoreTest.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng IllegalArgumentExceptionTest\n+ * @run junit IllegalArgumentExceptionTest\n@@ -36,3 +36,1 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -40,0 +38,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +40,0 @@\n-@Test\n@@ -57,0 +55,1 @@\n+    @Test\n@@ -61,0 +60,1 @@\n+    @Test\n@@ -65,0 +65,1 @@\n+    @Test\n@@ -69,0 +70,1 @@\n+    @Test\n@@ -73,0 +75,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/IllegalArgumentExceptionTest.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng ImportTest\n+ * @run junit ImportTest\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Test;\n@@ -54,0 +53,3 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n@@ -55,1 +57,0 @@\n-@Test\n@@ -58,0 +59,1 @@\n+    @Test\n@@ -66,0 +68,1 @@\n+    @Test\n@@ -73,0 +76,1 @@\n+    @Test\n@@ -78,0 +82,1 @@\n+    @Test\n@@ -83,0 +88,1 @@\n+    @Test\n@@ -90,0 +96,1 @@\n+    @Test\n@@ -96,0 +103,1 @@\n+    @Test\n@@ -101,0 +109,1 @@\n+    @Test\n@@ -106,0 +115,1 @@\n+    @Test\n@@ -146,0 +156,1 @@\n+    @Test\n@@ -170,0 +181,1 @@\n+    @Test\n@@ -175,0 +187,1 @@\n+    @Test\n@@ -180,3 +193,3 @@\n-    @org.testng.annotations.BeforeMethod\n-    public void setUp(Method m) {\n-        switch (m.getName()) {\n+    @BeforeEach\n+    public void setUp(TestInfo testInfo) {\n+        switch (testInfo.getTestMethod().orElseThrow().getName()) {\n","filename":"test\/langtools\/jdk\/jshell\/ImportTest.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng InaccessibleExpressionTest\n+ * @run junit InaccessibleExpressionTest\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.BeforeMethod;\n@@ -41,1 +40,3 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,3 +44,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n@@ -48,1 +46,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -79,0 +77,1 @@\n+    @Test\n@@ -82,1 +81,1 @@\n-        assertEquals(down.typeName(), \"priv.Packp\");\n+        assertEquals(\"priv.Packp\", down.typeName());\n@@ -85,1 +84,1 @@\n-        assertEquals(list.typeName(), \"priv.MyList\");\n+        assertEquals(\"priv.MyList\", list.typeName());\n@@ -88,1 +87,1 @@\n-        assertEquals(one.typeName(), \"priv.GetPriv.Count\");\n+        assertEquals(\"priv.GetPriv.Count\", one.typeName());\n@@ -93,0 +92,1 @@\n+    @Test\n@@ -101,1 +101,1 @@\n-        assertEquals(n.typeName(), \"Top.Inner\");\n+        assertEquals(\"Top.Inner\", n.typeName());\n","filename":"test\/langtools\/jdk\/jshell\/InaccessibleExpressionTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run testng IndentUITest\n+ * @run junit IndentUITest\n@@ -41,1 +41,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -50,0 +49,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/IndentUITest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng InferTypeTest\n+ * @run junit InferTypeTest\n@@ -36,1 +36,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,0 @@\n-@Test\n@@ -41,0 +40,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/InferTypeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run testng\/othervm -Dstderr.encoding=UTF-8 -Dstdin.encoding=UTF-8 -Dstdout.encoding=UTF-8 InputUITest\n+ * @run junit\/othervm -Dstderr.encoding=UTF-8 -Dstdin.encoding=UTF-8 -Dstdout.encoding=UTF-8 InputUITest\n@@ -43,1 +43,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +45,0 @@\n-@Test\n@@ -56,0 +55,1 @@\n+    @Test\n@@ -71,0 +71,1 @@\n+    @Test\n@@ -88,0 +89,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/InputUITest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng JLCollisionTest\n+ * @run junit JLCollisionTest\n@@ -34,1 +34,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-@Test\n@@ -39,0 +38,1 @@\n+    @Test\n@@ -46,0 +46,1 @@\n+    @Test\n@@ -53,0 +54,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JLCollisionTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng JShellQueryTest\n+ * @run junit JShellQueryTest\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Test;\n@@ -39,1 +38,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,0 @@\n-@Test\n@@ -44,0 +43,1 @@\n+    @Test\n@@ -57,0 +57,1 @@\n+    @Test\n@@ -70,0 +71,1 @@\n+    @Test\n@@ -82,0 +84,1 @@\n+    @Test\n@@ -94,0 +97,1 @@\n+    @Test\n@@ -106,0 +110,1 @@\n+    @Test\n@@ -113,1 +118,1 @@\n-        assertEquals(res, \"compiler.err.cant.resolve.location.args+compiler.err.prob.found.req\");\n+        assertEquals(\"compiler.err.cant.resolve.location.args+compiler.err.prob.found.req\", res);\n@@ -116,0 +121,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JShellQueryTest.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng JShellStateClosedTest\n+ * @run junit JShellStateClosedTest\n@@ -39,1 +39,2 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -41,3 +42,0 @@\n-import static org.testng.Assert.fail;\n-\n-@Test\n@@ -56,0 +54,1 @@\n+    @Test\n@@ -63,0 +62,1 @@\n+    @Test\n@@ -70,0 +70,1 @@\n+    @Test\n@@ -77,0 +78,1 @@\n+    @Test\n@@ -83,0 +85,1 @@\n+    @Test\n@@ -95,0 +98,1 @@\n+    @Test\n@@ -120,0 +124,1 @@\n+    @Test\n@@ -124,0 +129,1 @@\n+    @Test\n@@ -128,0 +134,1 @@\n+    @Test\n@@ -132,0 +139,1 @@\n+    @Test\n@@ -136,0 +144,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JShellStateClosedTest.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng JavadocTest\n+ * @run junit JavadocTest\n@@ -46,1 +46,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -48,1 +48,0 @@\n-@Test\n@@ -53,0 +52,1 @@\n+    @Test\n@@ -68,0 +68,1 @@\n+    @Test\n@@ -110,0 +111,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JavadocTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng JdiBadOptionLaunchExecutionControlTest\n+ * @run junit JdiBadOptionLaunchExecutionControlTest\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Test;\n@@ -36,2 +35,3 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,0 @@\n-@Test\n@@ -45,0 +44,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JdiBadOptionLaunchExecutionControlTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng JdiBadOptionListenExecutionControlTest\n+ * @run junit JdiBadOptionListenExecutionControlTest\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Test;\n@@ -36,2 +35,3 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,0 @@\n-@Test\n@@ -45,0 +44,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JdiBadOptionListenExecutionControlTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng JdiBogusHostListenExecutionControlTest\n+ * @run junit JdiBogusHostListenExecutionControlTest\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Test;\n@@ -36,2 +35,3 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,0 @@\n-@Test\n@@ -47,0 +46,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JdiBogusHostListenExecutionControlTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng JdiFailingLaunchExecutionControlTest\n+ * @run junit JdiFailingLaunchExecutionControlTest\n@@ -33,3 +33,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,0 @@\n-@Test\n@@ -43,0 +42,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JdiFailingLaunchExecutionControlTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng JdiFailingListenExecutionControlTest\n+ * @run junit JdiFailingListenExecutionControlTest\n@@ -33,3 +33,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,0 @@\n-@Test\n@@ -43,0 +42,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JdiFailingListenExecutionControlTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/timeout=480 JdiHangingLaunchExecutionControlTest\n+ * @run junit\/timeout=480 JdiHangingLaunchExecutionControlTest\n@@ -33,3 +33,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,0 @@\n-@Test\n@@ -43,0 +42,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JdiHangingLaunchExecutionControlTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/timeout=480 JdiHangingListenExecutionControlTest\n+ * @run junit\/timeout=480 JdiHangingListenExecutionControlTest\n@@ -34,3 +34,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,0 @@\n-@Test\n@@ -44,0 +43,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/JdiHangingListenExecutionControlTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng JdiLaunchingExecutionControlTest\n+ * @run junit JdiLaunchingExecutionControlTest\n@@ -35,2 +35,1 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -38,1 +37,0 @@\n-@Test\n@@ -41,1 +39,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/JdiLaunchingExecutionControlTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng JdiListeningExecutionControlTest\n+ * @run junit JdiListeningExecutionControlTest\n@@ -35,2 +35,1 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -38,1 +37,0 @@\n-@Test\n@@ -41,1 +39,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/JdiListeningExecutionControlTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng JdiListeningLocalhostExecutionControlTest\n+ * @run junit JdiListeningLocalhostExecutionControlTest\n@@ -35,2 +35,1 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -38,1 +37,0 @@\n-@Test\n@@ -41,1 +39,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/JdiListeningLocalhostExecutionControlTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng JdiStarterTest\n+ * @run junit JdiStarterTest\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Test;\n@@ -44,1 +43,2 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,0 @@\n-@Test\n@@ -49,0 +48,1 @@\n+    @Test\n@@ -53,4 +53,4 @@\n-            assertEquals(parameters.get(JdiExecutionControlProvider.PARAM_HOST_NAME), \"\");\n-            assertEquals(parameters.get(JdiExecutionControlProvider.PARAM_LAUNCH), \"false\");\n-            assertEquals(parameters.get(JdiExecutionControlProvider.PARAM_REMOTE_AGENT), \"jdk.jshell.execution.RemoteExecutionControl\");\n-            assertEquals(parameters.get(JdiExecutionControlProvider.PARAM_TIMEOUT), \"5000\");\n+            assertEquals(\"\", parameters.get(JdiExecutionControlProvider.PARAM_HOST_NAME));\n+            assertEquals(\"false\", parameters.get(JdiExecutionControlProvider.PARAM_LAUNCH));\n+            assertEquals(\"jdk.jshell.execution.RemoteExecutionControl\", parameters.get(JdiExecutionControlProvider.PARAM_REMOTE_AGENT));\n+            assertEquals(\"5000\", parameters.get(JdiExecutionControlProvider.PARAM_TIMEOUT));\n","filename":"test\/langtools\/jdk\/jshell\/JdiStarterTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng KullaCompletenessStressTest\n+ * @run junit KullaCompletenessStressTest\n@@ -34,1 +34,3 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n@@ -36,1 +38,1 @@\n-@Test\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -39,0 +41,1 @@\n+    @Test\n@@ -47,6 +50,5 @@\n-        if (!file.exists()) {\n-            System.out.println(\"jdk.jshell sources are not exist. Test has been skipped. Path: \" + file.toString());\n-            return new File[]{};\n-        }else {\n-            return new File[]{file};\n-        }\n+\n+        Assumptions.assumeTrue(file.exists(),\n+                               \"jdk.jshell sources are not exist. Test has been skipped. Path: \" + file.toString());\n+\n+        return new File[]{file};\n","filename":"test\/langtools\/jdk\/jshell\/KullaCompletenessStressTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,2 +74,0 @@\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.BeforeMethod;\n@@ -83,1 +81,1 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -86,0 +84,2 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -169,1 +169,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -205,1 +205,1 @@\n-    @AfterMethod\n+    @AfterEach\n@@ -229,1 +229,1 @@\n-        assertEquals(unresolved.size(), unresolvedSize, \"Input: \" + key.source() + \", checking unresolved: \");\n+        assertEquals(unresolvedSize, unresolved.size(), \"Input: \" + key.source() + \", checking unresolved: \");\n@@ -236,3 +236,3 @@\n-        assertEquals(unresolved.size(), 1, \"Given input: \" + input + \", checking unresolved\");\n-        assertEquals(unresolved.get(0), name, \"Given input: \" + input + \", checking unresolved: \");\n-        assertEquals(getState().status(key), status, \"Given input: \" + input + \", checking status: \");\n+        assertEquals(1, unresolved.size(), \"Given input: \" + input + \", checking unresolved\");\n+        assertEquals(name, unresolved.get(0), \"Given input: \" + input + \", checking unresolved: \");\n+        assertEquals(status, getState().status(key), \"Given input: \" + input + \", checking status: \");\n@@ -246,3 +246,3 @@\n-        assertEquals(sn.name(), name, \"Given input: \" + input + \", checking name\");\n-        assertEquals(getState().unresolvedDependencies(sn).count(), unresolvedSize, \"Given input: \" + input + \", checking unresolved\");\n-        assertEquals(getState().diagnostics(sn).count(), (long) diagnosticsSize, \"Given input: \" + input + \", checking diagnostics\");\n+        assertEquals(name, sn.name(), \"Given input: \" + input + \", checking name\");\n+        assertEquals(unresolvedSize, getState().unresolvedDependencies(sn).count(), \"Given input: \" + input + \", checking unresolved\");\n+        assertEquals((long) diagnosticsSize, getState().diagnostics(sn).count(), \"Given input: \" + input + \", checking diagnostics\");\n@@ -255,1 +255,1 @@\n-        assertEquals(source, input, \"Key \\\"\" + input + \"\\\" source mismatch, got: \" + source + \", expected: \" + input);\n+        assertEquals(input, source, \"Key \\\"\" + input + \"\\\" source mismatch, got: \" + source + \", expected: \" + input);\n@@ -257,1 +257,1 @@\n-        assertEquals(subkind, expectedSubKind, \"Key \\\"\" + input + \"\\\" subkind mismatch, got: \"\n+        assertEquals(expectedSubKind, subkind, \"Key \\\"\" + input + \"\\\" subkind mismatch, got: \"\n@@ -259,1 +259,1 @@\n-        assertEquals(subkind.isExecutable(), isExecutable, \"Key \\\"\" + input + \"\\\", expected isExecutable: \"\n+        assertEquals(isExecutable, subkind.isExecutable(), \"Key \\\"\" + input + \"\\\", expected isExecutable: \"\n@@ -262,2 +262,2 @@\n-        assertEquals(key.kind(), expectedKind, \"Checking kind: \");\n-        assertEquals(expectedSubKind.kind(), expectedKind, \"Checking kind: \");\n+        assertEquals(expectedKind, key.kind(), \"Checking kind: \");\n+        assertEquals(expectedKind, expectedSubKind.kind(), \"Checking kind: \");\n@@ -313,1 +313,1 @@\n-        assertEquals(importKey.name(), name, \"Input \\\"\" + input +\n+        assertEquals(name, importKey.name(), \"Input \\\"\" + input +\n@@ -315,1 +315,1 @@\n-        assertEquals(importKey.kind(), Kind.IMPORT, \"Checking kind: \");\n+        assertEquals(Kind.IMPORT, importKey.kind(), \"Checking kind: \");\n@@ -324,1 +324,1 @@\n-        assertEquals(declKey.name(), name, \"Input \\\"\" + input +\n+        assertEquals(name, declKey.name(), \"Input \\\"\" + input +\n@@ -334,1 +334,1 @@\n-        assertEquals(signature, typeName, \"Key \\\"\" + input +\n+        assertEquals(typeName, signature, \"Key \\\"\" + input +\n@@ -336,1 +336,1 @@\n-        assertEquals(variableKey.kind(), Kind.VAR, \"Checking kind: \");\n+        assertEquals(Kind.VAR, variableKey.kind(), \"Checking kind: \");\n@@ -344,1 +344,1 @@\n-        assertEquals(exprKey.name(), name, \"Input \\\"\" + input +\n+        assertEquals(name, exprKey.name(), \"Input \\\"\" + input +\n@@ -346,1 +346,1 @@\n-        assertEquals(exprKey.typeName(), typeName, \"Key \\\"\" + input +\n+        assertEquals(typeName, exprKey.typeName(), \"Key \\\"\" + input +\n@@ -348,1 +348,1 @@\n-        assertEquals(exprKey.kind(), Kind.EXPRESSION, \"Checking kind: \");\n+        assertEquals(Kind.EXPRESSION, exprKey.kind(), \"Checking kind: \");\n@@ -406,1 +406,1 @@\n-        assertEquals(sns, exp);\n+        assertEquals(exp, sns);\n@@ -487,1 +487,1 @@\n-        assertEquals(dispatched.size(), events.size(), \"dispatched event size not the same as event size\");\n+        assertEquals(events.size(), dispatched.size(), \"dispatched event size not the same as event size\");\n@@ -489,1 +489,1 @@\n-            assertEquals(dispatched.get(i), events.get(i), \"Event element \" + i + \" does not match\");\n+            assertEquals(events.get(i), dispatched.get(i), \"Event element \" + i + \" does not match\");\n@@ -503,1 +503,1 @@\n-                            assertEquals(old, evt.snippet(),\n+                            assertEquals(evt.snippet(), old,\n@@ -507,1 +507,1 @@\n-                            assertEquals(old, evt.snippet(),\n+                            assertEquals(evt.snippet(), old,\n@@ -515,1 +515,1 @@\n-                                assertNotEquals(old, evt.snippet(),\n+                                assertNotEquals(evt.snippet(), old,\n@@ -520,1 +520,1 @@\n-                                assertEquals(old, evt.snippet(),\n+                                assertEquals(evt.snippet(), old,\n@@ -560,1 +560,1 @@\n-        assertEquals(groupedEvents.size(), eventChains.length, \"Number of main events\");\n+        assertEquals(eventChains.length, groupedEvents.size(), \"Number of main events\");\n@@ -583,1 +583,1 @@\n-                assertEquals(main.value(), eventChain.value, \"Expected execution value of: \" + eventChain.value +\n+                assertEquals(eventChain.value, main.value(), \"Expected execution value of: \" + eventChain.value +\n@@ -588,1 +588,1 @@\n-                    assertEquals(eventChain.exceptionClass, null, \"Expected an exception of class \"\n+                    assertEquals(null, eventChain.exceptionClass, \"Expected an exception of class \"\n@@ -601,1 +601,1 @@\n-                    assertEquals(diagnostics.size(), 0, \"Expected no diagnostics, got: \" + diagnosticsToString(diagnostics));\n+                    assertEquals(0, diagnostics.size(), \"Expected no diagnostics, got: \" + diagnosticsToString(diagnostics));\n@@ -615,1 +615,1 @@\n-                            assertEquals(diagnostics.size(), 0, \"Expected no diagnostics, got: \" + diagnosticsToString(diagnostics));\n+                            assertEquals(0, diagnostics.size(), \"Expected no diagnostics, got: \" + diagnosticsToString(diagnostics));\n@@ -630,1 +630,1 @@\n-        assertEquals(events.size(), 0, \"Expected no events, got: \" + events.size());\n+        assertEquals(0, events.size(), \"Expected no events, got: \" + events.size());\n@@ -664,1 +664,1 @@\n-        assertEquals(value, expected, \"Expected var value of: \" + expected + \", but got: \" + value);\n+        assertEquals(expected, value, \"Expected var value of: \" + expected + \", but got: \" + value);\n@@ -688,1 +688,1 @@\n-        assertEquals(getState().status(key), REJECTED);\n+        assertEquals(REJECTED, getState().status(key));\n@@ -731,1 +731,1 @@\n-        assertEquals(signature, expectedSignature,\n+        assertEquals(expectedSignature, signature,\n@@ -743,1 +743,1 @@\n-        assertEquals(signature, expectedTypeName,\n+        assertEquals(expectedTypeName, signature,\n@@ -754,1 +754,1 @@\n-        assertEquals(declarationKey.name(), expectedName,\n+        assertEquals(expectedName, declarationKey.name(),\n@@ -757,1 +757,1 @@\n-        assertEquals(unresolved, unressz, \"Expected \" + source + \" to have \" + unressz\n+        assertEquals(unressz, unresolved, \"Expected \" + source + \" to have \" + unressz\n@@ -760,1 +760,1 @@\n-        assertEquals(otherCorralledErrorsCount, othersz, \"Expected \" + source + \" to have \" + othersz\n+        assertEquals(othersz, otherCorralledErrorsCount, \"Expected \" + source + \" to have \" + othersz\n@@ -767,1 +767,1 @@\n-        assertEquals(actualSubKind, expectedSubKind,\n+        assertEquals(expectedSubKind, actualSubKind,\n@@ -770,1 +770,1 @@\n-        assertEquals(status, expectedStatus, \"Expected \" + source + \" to be \"\n+        assertEquals(expectedStatus, status, \"Expected \" + source + \" to be \"\n@@ -773,2 +773,2 @@\n-        assertEquals(key.kind(), expectedKind, \"Checking kind: \");\n-        assertEquals(expectedSubKind.kind(), expectedKind, \"Checking kind: \");\n+        assertEquals(expectedKind, key.kind(), \"Checking kind: \");\n+        assertEquals(expectedKind, expectedSubKind.kind(), \"Checking kind: \");\n@@ -799,3 +799,3 @@\n-        if (status != null) assertEquals(ci.completeness(), status, \"Input : \" + input + \", status: \");\n-        assertEquals(ci.source(), source, \"Input : \" + input + \", source: \");\n-        if (remaining != null) assertEquals(ci.remaining(), remaining, \"Input : \" + input + \", remaining: \");\n+        if (status != null) assertEquals(status, ci.completeness(), \"Input : \" + input + \", status: \");\n+        assertEquals(source, ci.source(), \"Input : \" + input + \", source: \");\n+        if (remaining != null) assertEquals(remaining, ci.remaining(), \"Input : \" + input + \", remaining: \");\n@@ -804,1 +804,1 @@\n-            assertEquals(ci.completeness().isComplete(), isExpectedComplete, \"Input : \" + input + \", isComplete: \");\n+            assertEquals(isExpectedComplete, ci.completeness().isComplete(), \"Input : \" + input + \", isComplete: \");\n@@ -809,1 +809,1 @@\n-        assertEquals(getState().variables().count(), cnt, \"Variables : \" + getState().variables().collect(toList()));\n+        assertEquals(cnt, getState().variables().count(), \"Variables : \" + getState().variables().collect(toList()));\n@@ -813,1 +813,1 @@\n-        assertEquals(getState().methods().count(), cnt, \"Methods : \" + getState().methods().collect(toList()));\n+        assertEquals(cnt, getState().methods().count(), \"Methods : \" + getState().methods().collect(toList()));\n@@ -817,1 +817,1 @@\n-        assertEquals(getState().types().count(), cnt, \"Types : \" + getState().types().collect(toList()));\n+        assertEquals(cnt, getState().types().count(), \"Types : \" + getState().types().collect(toList()));\n@@ -823,1 +823,1 @@\n-        assertEquals(allSnippets.size(), snippets.size());\n+        assertEquals(snippets.size(), allSnippets.size());\n@@ -828,1 +828,1 @@\n-                assertEquals(actual, exp, String.format(\"Difference in #%d. Expected: %s, actual: %s\",\n+                assertEquals(exp, actual, String.format(\"Difference in #%d. Expected: %s, actual: %s\",\n@@ -844,1 +844,1 @@\n-                assertEquals(expected[index], key, String.format(\"Difference in #%d. Expected: %s, actual: %s\", index, key, expected[index]));\n+                assertEquals(key, expected[index], String.format(\"Difference in #%d. Expected: %s, actual: %s\", index, key, expected[index]));\n@@ -856,1 +856,1 @@\n-        assertEquals(active, got, label);\n+        assertEquals(got, active, label);\n@@ -876,2 +876,2 @@\n-        assertEquals(got.size(), expected.size(), \"Expected : \" + expected + \", actual : \" + members);\n-        assertEquals(got, expected);\n+        assertEquals(expected.size(), got.size(), \"Expected : \" + expected + \", actual : \" + members);\n+        assertEquals(expected, got);\n@@ -895,1 +895,1 @@\n-            assertEquals(methodKey.parameterTypes(), expectedInfo.type.substring(1, lastIndexOf), \"Parameter types\");\n+            assertEquals(expectedInfo.type.substring(1, lastIndexOf), methodKey.parameterTypes(), \"Parameter types\");\n@@ -909,1 +909,1 @@\n-        assertEquals(completions, Arrays.asList(expected), \"Input: \" + code + \", \" + completions.toString());\n+        assertEquals(Arrays.asList(expected), completions, \"Input: \" + code + \", \" + completions.toString());\n@@ -943,1 +943,1 @@\n-        assertEquals(inferredType, expectedType, \"Input: \" + code + \", \" + inferredType);\n+        assertEquals(expectedType, inferredType, \"Input: \" + code + \", \" + inferredType);\n@@ -955,3 +955,3 @@\n-        assertEquals(candidates.getNames(), Arrays.asList(fqns), \"Input: \" + code + \", candidates=\" + candidates.getNames());\n-        assertEquals(candidates.getSimpleNameLength(), simpleNameLen, \"Input: \" + code + \", simpleNameLen=\" + candidates.getSimpleNameLength());\n-        assertEquals(candidates.isResolvable(), resolvable, \"Input: \" + code + \", resolvable=\" + candidates.isResolvable());\n+        assertEquals(Arrays.asList(fqns), candidates.getNames(), \"Input: \" + code + \", candidates=\" + candidates.getNames());\n+        assertEquals(simpleNameLen, candidates.getSimpleNameLength(), \"Input: \" + code + \", simpleNameLen=\" + candidates.getSimpleNameLength());\n+        assertEquals(resolvable, candidates.isResolvable(), \"Input: \" + code + \", resolvable=\" + candidates.isResolvable());\n@@ -978,1 +978,1 @@\n-        assertEquals(docSet, expectedSet, \"Input: \" + code);\n+        assertEquals(expectedSet, docSet, \"Input: \" + code);\n@@ -990,1 +990,1 @@\n-        assertEquals(docSet, expectedSet, \"Input: \" + code);\n+        assertEquals(expectedSet, docSet, \"Input: \" + code);\n@@ -1186,1 +1186,1 @@\n-                assertEquals(ste.isSignatureChange(), isSignatureChange(),\n+                assertEquals(isSignatureChange(), ste.isSignatureChange(),\n@@ -1209,1 +1209,1 @@\n-                    assertEquals(sn.id(), testKey.id(), \"Expected IDs to match: \" + testKey + \", got: \" + sn\n+                    assertEquals(testKey.id(), sn.id(), \"Expected IDs to match: \" + testKey + \", got: \" + sn\n@@ -1212,1 +1212,1 @@\n-                    assertEquals(sn, testKey, \"Expected key to be: \" + testKey + \", got: \" + sn\n+                    assertEquals(testKey, sn, \"Expected key to be: \" + testKey + \", got: \" + sn\n@@ -1220,1 +1220,1 @@\n-                assertEquals(status, expected, \"Expected status to be: \" + expected + \", got: \" + status +\n+                assertEquals(expected, status, \"Expected status to be: \" + expected + \", got: \" + status +\n","filename":"test\/langtools\/jdk\/jshell\/KullaTesting.java","additions":75,"deletions":75,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng\/othervm LocalExecutionClassPathTest\n+ * @run junit\/othervm LocalExecutionClassPathTest\n@@ -37,1 +37,2 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n@@ -39,0 +40,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionClassPathTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng\/othervm LocalExecutionContextLoaderParentTest\n+ * @run junit\/othervm LocalExecutionContextLoaderParentTest\n@@ -52,2 +52,3 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n@@ -55,0 +56,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -57,1 +59,1 @@\n-    @BeforeTest\n+    @BeforeAll\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionContextLoaderParentTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import org.testng.annotations.BeforeTest;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -52,1 +52,1 @@\n-    @BeforeTest\n+    @BeforeAll\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionTestSupport.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng LocalStopExecutionTest\n+ * @run junit LocalStopExecutionTest\n@@ -43,2 +43,3 @@\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,3 +47,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n@@ -51,1 +49,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/LocalStopExecutionTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng MethodsTest\n+ * @run junit MethodsTest\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Test;\n@@ -43,1 +42,3 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +46,0 @@\n-@Test\n@@ -48,0 +48,1 @@\n+    @Test\n@@ -52,0 +53,1 @@\n+    @Test\n@@ -61,0 +63,1 @@\n+    @Test\n@@ -70,1 +73,2 @@\n-    @Test(enabled = false) \/\/ TODO 8081690\n+    @Test \/\/ TODO 8081690\n+    @Disabled\n@@ -82,0 +86,1 @@\n+    @Test\n@@ -90,0 +95,1 @@\n+    @Test\n@@ -98,0 +104,1 @@\n+    @Test\n@@ -142,0 +149,1 @@\n+    @Test\n@@ -161,0 +169,1 @@\n+    @Test\n@@ -182,0 +191,1 @@\n+    @Test\n@@ -195,0 +205,1 @@\n+    @Test\n@@ -207,0 +218,1 @@\n+    @Test\n@@ -223,0 +235,1 @@\n+    @Test\n@@ -226,2 +239,1 @@\n-        assertEquals(getState().unresolvedDependencies(m1).collect(Collectors.toList()),\n-                List.of(\"method f()\"));\n+        assertEquals(                List.of(\"method f()\"), getState().unresolvedDependencies(m1).collect(Collectors.toList()));\n@@ -231,1 +243,1 @@\n-        assertEquals(unr.size(), 2);\n+        assertEquals(2, unr.size());\n@@ -234,1 +246,1 @@\n-        assertEquals(unr.size(), 0, \"unexpected entry: \" + unr);\n+        assertEquals(0, unr.size(), \"unexpected entry: \" + unr);\n@@ -239,0 +251,1 @@\n+    @Test\n@@ -270,0 +283,1 @@\n+    @Test\n@@ -289,0 +303,1 @@\n+    @Test\n@@ -308,0 +323,1 @@\n+    @Test\n@@ -321,0 +337,1 @@\n+    @Test\n@@ -333,1 +350,2 @@\n-    @Test(enabled = false) \/\/ TODO 8081689\n+    @Test \/\/ TODO 8081689\n+    @Disabled\n@@ -354,0 +372,1 @@\n+    @Test\n@@ -379,0 +398,1 @@\n+    @Test\n@@ -381,1 +401,1 @@\n-        assertEquals(m1.parameterTypes(), \"int...\");\n+        assertEquals(\"int...\", m1.parameterTypes());\n@@ -383,1 +403,1 @@\n-        assertEquals(m2.parameterTypes(), \"int[]...\");\n+        assertEquals(\"int[]...\", m2.parameterTypes());\n@@ -385,1 +405,1 @@\n-        assertEquals(m3.parameterTypes(), \"int[][]\");\n+        assertEquals(\"int[][]\", m3.parameterTypes());\n@@ -388,0 +408,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/MethodsTest.java","additions":35,"deletions":14,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng ModifiersTest\n+ * @run junit ModifiersTest\n@@ -37,2 +37,4 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,1 +42,1 @@\n-@Test\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -43,1 +45,0 @@\n-    @DataProvider(name = \"ignoredModifiers\")\n@@ -80,1 +81,2 @@\n-    @Test(dataProvider = \"ignoredModifiers\")\n+    @ParameterizedTest\n+    @MethodSource(\"getTestCases\")\n@@ -98,0 +100,1 @@\n+    @Test\n@@ -111,0 +114,1 @@\n+    @Test\n@@ -122,0 +126,1 @@\n+    @Test\n@@ -137,0 +142,1 @@\n+    @Test\n@@ -143,0 +149,1 @@\n+    @Test\n@@ -151,0 +158,1 @@\n+    @Test\n@@ -158,0 +166,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ModifiersTest.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n- * @run testng MultipleDocumentationTest\n+ * @run junit MultipleDocumentationTest\n@@ -44,1 +44,0 @@\n-@Test\n@@ -47,0 +46,1 @@\n+    @Test\n@@ -71,1 +71,1 @@\n-                assertEquals(javadocs2, javadocs1);\n+                assertEquals(javadocs1, javadocs2);\n","filename":"test\/langtools\/jdk\/jshell\/MultipleDocumentationTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"test\/langtools\/jdk\/jshell\/MyExecutionControl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng NullTest\n+ * @run junit NullTest\n@@ -31,1 +31,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -33,1 +33,0 @@\n-@Test\n@@ -36,0 +35,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/NullTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n- * @run testng\/othervm PasteAndMeasurementsUITest\n+ * @run junit\/othervm PasteAndMeasurementsUITest\n@@ -49,1 +49,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +51,0 @@\n-@Test\n@@ -58,0 +57,1 @@\n+    @Test\n@@ -80,0 +80,1 @@\n+    @Test\n@@ -94,0 +95,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/PasteAndMeasurementsUITest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng PipeInputStreamTest\n+ * @run junit PipeInputStreamTest\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Test;\n@@ -41,1 +40,2 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -46,0 +45,1 @@\n+    @Test\n@@ -52,2 +52,2 @@\n-        assertEquals(in.read(data), 1);\n-        assertEquals(data[0], 'a');\n+        assertEquals(1, in.read(data));\n+        assertEquals('a', data[0]);\n@@ -55,4 +55,4 @@\n-        assertEquals(in.read(data), 3);\n-        assertEquals(data[0], 'a');\n-        assertEquals(data[1], 'b');\n-        assertEquals(data[2], 'c');\n+        assertEquals(3, in.read(data));\n+        assertEquals('a', data[0]);\n+        assertEquals('b', data[1]);\n+        assertEquals('c', data[2]);\n","filename":"test\/langtools\/jdk\/jshell\/PipeInputStreamTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng PrimitiveInstanceOfTest\n+ * @run junit PrimitiveInstanceOfTest\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Test;\n@@ -35,1 +34,3 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +38,0 @@\n-@Test\n@@ -40,0 +40,1 @@\n+    @Test\n@@ -46,0 +47,1 @@\n+    @Test\n@@ -52,0 +54,1 @@\n+    @Test\n@@ -58,0 +61,1 @@\n+    @Test\n@@ -63,1 +67,1 @@\n-    @org.testng.annotations.BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/PrimitiveInstanceOfTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng RecordsTest\n+ * @run junit RecordsTest\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Test;\n@@ -38,2 +37,2 @@\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.BeforeMethod;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +40,0 @@\n-@Test\n@@ -44,0 +42,1 @@\n+    @Test\n@@ -46,1 +45,1 @@\n-        assertEquals(varKey(assertEval(\"R r = new R(\\\"r\\\", 42);\")).name(), \"r\");\n+        assertEquals(\"r\", varKey(assertEval(\"R r = new R(\\\"r\\\", 42);\")).name());\n@@ -51,0 +50,1 @@\n+    @Test\n@@ -69,0 +69,1 @@\n+    @Test\n@@ -70,1 +71,1 @@\n-        assertEquals(varKey(assertEval(\"String record = \\\"\\\";\")).name(), \"record\");\n+        assertEquals(\"record\", varKey(assertEval(\"String record = \\\"\\\";\")).name());\n@@ -74,0 +75,1 @@\n+    @Test\n@@ -75,1 +77,1 @@\n-        assertEquals(methodKey(assertEval(\"String record(String record) { return record + record; }\")).name(), \"record\");\n+        assertEquals(\"record\", methodKey(assertEval(\"String record(String record) { return record + record; }\")).name());\n","filename":"test\/langtools\/jdk\/jshell\/RecordsTest.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng RejectedFailedTest\n+ * @run junit RejectedFailedTest\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Test;\n@@ -43,2 +42,3 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,0 @@\n-@Test\n@@ -51,1 +50,1 @@\n-        assertEquals(events.size(), 1, \"Expected one event, got: \" + events.size());\n+        assertEquals(1, events.size(), \"Expected one event, got: \" + events.size());\n@@ -55,2 +54,2 @@\n-        assertEquals(e.exception(), null, \"Expected exception to be null.\");\n-        assertEquals(e.value(), null, \"Expected value to be null.\");\n+        assertEquals(null, e.exception(), \"Expected exception to be null.\");\n+        assertEquals(null, e.value(), \"Expected value to be null.\");\n@@ -60,1 +59,1 @@\n-        assertEquals(key.kind(), kind, \"Expected kind: \" + kind + \", got: \" + key.kind());\n+        assertEquals(kind, key.kind(), \"Expected kind: \" + kind + \", got: \" + key.kind());\n@@ -62,1 +61,1 @@\n-        assertEquals(key.subKind(), expectedSubKind, \"SubKind: \");\n+        assertEquals(expectedSubKind, key.subKind(), \"SubKind: \");\n@@ -64,2 +63,2 @@\n-        assertEquals(getState().diagnostics(key).collect(toList()), diagnostics, \"Expected retrieved diagnostics to match, but didn't.\");\n-        assertEquals(key.source(), input, \"Expected retrieved source: \" +\n+        assertEquals(diagnostics, getState().diagnostics(key).collect(toList()), \"Expected retrieved diagnostics to match, but didn't.\");\n+        assertEquals(input, key.source(), \"Expected retrieved source: \" +\n@@ -67,1 +66,1 @@\n-        assertEquals(getState().status(key), Status.REJECTED, \"Expected status of REJECTED, got: \" + getState().status(key));\n+        assertEquals(Status.REJECTED, getState().status(key), \"Expected status of REJECTED, got: \" + getState().status(key));\n@@ -78,0 +77,1 @@\n+    @Test\n@@ -89,0 +89,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/RejectedFailedTest.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import org.testng.annotations.BeforeMethod;\n@@ -53,4 +52,5 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNotNull;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -135,1 +135,1 @@\n-            assertEquals(lines.size(), keys.size(), \"Number of keys\");\n+            assertEquals(keys.size(), lines.size(), \"Number of keys\");\n@@ -158,1 +158,1 @@\n-            assertEquals(lines.size(), set.size(), message + \" : expected: \" + set.keySet() + \"\\ngot:\\n\" + lines);\n+            assertEquals(set.size(), lines.size(), message + \" : expected: \" + set.keySet() + \"\\ngot:\\n\" + lines);\n@@ -274,1 +274,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -334,2 +334,1 @@\n-        assertEquals(ceos,\n-                     expectedErrorOutput,\n+        assertEquals(                     expectedErrorOutput, ceos,\n@@ -566,1 +565,1 @@\n-            assertEquals(got, expected, display + \".\\n\");\n+            assertEquals(expected, got, display + \".\\n\");\n","filename":"test\/langtools\/jdk\/jshell\/ReplToolTesting.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng ReplaceTest\n+ * @run junit ReplaceTest\n@@ -37,3 +37,1 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -42,1 +40,3 @@\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,0 @@\n-@Test\n@@ -47,0 +46,1 @@\n+    @Test\n@@ -72,0 +72,1 @@\n+    @Test\n@@ -95,0 +96,1 @@\n+    @Test\n@@ -109,0 +111,1 @@\n+    @Test\n@@ -122,0 +125,1 @@\n+    @Test\n@@ -133,0 +137,1 @@\n+    @Test\n@@ -147,0 +152,1 @@\n+    @Test\n@@ -162,0 +168,1 @@\n+    @Test\n@@ -181,0 +188,1 @@\n+    @Test\n@@ -196,0 +204,1 @@\n+    @Test\n@@ -216,1 +225,2 @@\n-    @Test(enabled = false) \/\/ TODO 8129420\n+    @Test \/\/ TODO 8129420\n+    @Disabled\n@@ -230,0 +240,1 @@\n+    @Test\n@@ -241,0 +252,1 @@\n+    @Test\n@@ -252,0 +264,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ReplaceTest.java","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng SealedClassesTest\n+ * @run junit SealedClassesTest\n@@ -38,2 +38,0 @@\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n@@ -42,0 +40,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +42,0 @@\n-@Test\n@@ -46,0 +44,1 @@\n+    @Test\n@@ -56,0 +55,1 @@\n+    @Test\n@@ -66,0 +66,1 @@\n+    @Test\n@@ -77,0 +78,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/SealedClassesTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng ShutdownTest\n+ * @run junit ShutdownTest\n@@ -40,5 +40,7 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.Assertions;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n@@ -54,1 +56,2 @@\n-    @Test(enabled = false) \/\/TODO 8139873\n+    @Test \/\/TODO 8139873\n+    @Disabled\n@@ -59,1 +62,1 @@\n-        assertEquals(shutdownCount, 1);\n+        assertEquals(1, shutdownCount);\n@@ -67,1 +70,1 @@\n-        assertEquals(shutdownCount, 1);\n+        assertEquals(1, shutdownCount);\n@@ -76,1 +79,1 @@\n-        assertEquals(shutdownCount, 0);\n+        assertEquals(0, shutdownCount);\n@@ -88,2 +91,2 @@\n-        assertEquals(listener1.getEvents(), 0, \"Checking got events\");\n-        assertEquals(listener2.getEvents(), 1, \"Checking got events\");\n+        assertEquals(0, listener1.getEvents(), \"Checking got events\");\n+        assertEquals(1, listener2.getEvents(), \"Checking got events\");\n@@ -93,2 +96,2 @@\n-        assertEquals(listener1.getEvents(), 0, \"Checking got events\");\n-        assertEquals(listener2.getEvents(), 1, \"Checking got events\");\n+        assertEquals(0, listener1.getEvents(), \"Checking got events\");\n+        assertEquals(1, listener2.getEvents(), \"Checking got events\");\n@@ -99,1 +102,1 @@\n-    @Test(expectedExceptions = IllegalStateException.class)\n+    @Test\n@@ -101,2 +104,4 @@\n-        getState().close();\n-        getState().eval(\"45\");\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            getState().close();\n+            getState().eval(\"45\");\n+        });\n@@ -105,2 +110,2 @@\n-    @Test(expectedExceptions = IllegalStateException.class,\n-          enabled = false) \/\/TODO 8139873\n+    @Test \/\/TODO 8139873\n+    @Disabled\n@@ -108,2 +113,4 @@\n-        assertEval(\"System.exit(0);\");\n-        getState().eval(\"45\");\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            assertEval(\"System.exit(0);\");\n+            getState().eval(\"45\");\n+        });\n@@ -112,1 +119,1 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n+    @Test\n@@ -114,1 +121,3 @@\n-        getState().onShutdown(null);\n+        Assertions.assertThrows(NullPointerException.class, () -> {\n+            getState().onShutdown(null);\n+        });\n@@ -117,1 +126,1 @@\n-    @Test(expectedExceptions = IllegalStateException.class)\n+    @Test\n@@ -119,2 +128,4 @@\n-        getState().close();\n-        getState().onShutdown(e -> {});\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            getState().close();\n+            getState().onShutdown(e -> {});\n+        });\n@@ -123,2 +134,2 @@\n-    @Test(expectedExceptions = IllegalStateException.class,\n-          enabled = false) \/\/TODO 8139873\n+    @Test \/\/TODO 8139873\n+    @Disabled\n@@ -126,2 +137,4 @@\n-        assertEval(\"System.exit(0);\");\n-        getState().onShutdown(e -> {});\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            assertEval(\"System.exit(0);\");\n+            getState().onShutdown(e -> {});\n+        });\n@@ -153,3 +166,3 @@\n-    @BeforeMethod\n-    public void setUp(Method testMethod) {\n-        currentTestMethod = testMethod;\n+    @BeforeEach\n+    public void setUp(TestInfo testInfo) {\n+        currentTestMethod = testInfo.getTestMethod().orElseThrow();\n@@ -159,1 +172,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/ShutdownTest.java","additions":48,"deletions":35,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng SimpleRegressionTest\n+ * @run junit SimpleRegressionTest\n@@ -39,5 +39,3 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -47,1 +45,2 @@\n-import org.testng.annotations.BeforeMethod;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -49,1 +48,0 @@\n-@Test\n@@ -52,1 +50,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -58,0 +56,1 @@\n+    @Test\n@@ -64,0 +63,1 @@\n+    @Test\n@@ -70,0 +70,1 @@\n+    @Test\n@@ -74,0 +75,1 @@\n+    @Test\n@@ -80,3 +82,3 @@\n-        assertEquals(events.get(0).value(), \"3\");\n-        assertEquals(events.get(1).value(), \"6\");\n-        assertEquals(events.get(2).value(), \"600\");\n+        assertEquals(\"3\", events.get(0).value());\n+        assertEquals(\"6\", events.get(1).value());\n+        assertEquals(\"600\", events.get(2).value());\n@@ -86,0 +88,1 @@\n+    @Test\n@@ -95,0 +98,1 @@\n+    @Test\n@@ -99,0 +103,1 @@\n+    @Test\n@@ -103,0 +108,1 @@\n+    @Test\n@@ -107,0 +113,1 @@\n+    @Test\n@@ -114,0 +121,1 @@\n+    @Test\n@@ -118,1 +126,1 @@\n-        assertEquals(sne.typeName(), \"Integer\");\n+        assertEquals(\"Integer\", sne.typeName());\n@@ -121,0 +129,1 @@\n+    @Test\n@@ -130,1 +139,1 @@\n-            assertEquals(el.size(), 1, \"Excepted one event\");\n+            assertEquals(1, el.size(), \"Excepted one event\");\n@@ -136,0 +145,1 @@\n+    @Test\n@@ -146,1 +156,1 @@\n-            assertEquals(el.size(), 1, \"Excepted one event\");\n+            assertEquals(1, el.size(), \"Excepted one event\");\n@@ -153,0 +163,1 @@\n+    @Test\n@@ -164,0 +175,1 @@\n+    @Test\n@@ -169,0 +181,1 @@\n+    @Test\n@@ -186,0 +199,1 @@\n+    @Test\n@@ -202,0 +216,1 @@\n+    @Test\n@@ -223,0 +238,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/SimpleRegressionTest.java","additions":32,"deletions":16,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng SnippetEventToStringTest\n+ * @run junit SnippetEventToStringTest\n@@ -38,3 +38,4 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -42,0 +43,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -44,1 +46,0 @@\n-    @DataProvider(name = \"cases\")\n@@ -53,2 +54,3 @@\n-    @Test(dataProvider = \"cases\")\n-    private void verifySnippetEvent(String source, String match) {\n+    @ParameterizedTest\n+    @MethodSource(\"sourceLevels\")\n+    void verifySnippetEvent(String source, String match) {\n@@ -57,1 +59,1 @@\n-            assertEquals(result.size(), 1);\n+            assertEquals(1, result.size());\n","filename":"test\/langtools\/jdk\/jshell\/SnippetEventToStringTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @run testng SnippetHighlightTest\n+ * @run junit SnippetHighlightTest\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Test;\n@@ -46,1 +45,2 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n@@ -48,1 +48,0 @@\n-@Test\n@@ -51,0 +50,1 @@\n+    @Test\n@@ -102,0 +102,1 @@\n+    @Test\n@@ -117,0 +118,1 @@\n+    @Test\n@@ -125,1 +127,1 @@\n-        assertEquals(completions, Arrays.asList(expected), \"Input: \" + code + \", \" + completions.toString());\n+        assertEquals(Arrays.asList(expected), completions, \"Input: \" + code + \", \" + completions.toString());\n","filename":"test\/langtools\/jdk\/jshell\/SnippetHighlightTest.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng SnippetStatusListenerTest\n+ * @run junit SnippetStatusListenerTest\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Test;\n@@ -43,1 +42,4 @@\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.api.Assertions;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +47,0 @@\n-@Test\n@@ -48,0 +49,1 @@\n+    @Test\n@@ -64,1 +66,1 @@\n-        assertEquals(events1, listener2.getEvents(), \"Checking got events\");\n+        assertEquals(listener2.getEvents(), events1, \"Checking got events\");\n@@ -70,1 +72,1 @@\n-        assertEquals(listener1.getEvents(), events1, \"Checking that unsubscribed listener does not get events\");\n+        assertEquals(events1, listener1.getEvents(), \"Checking that unsubscribed listener does not get events\");\n@@ -75,1 +77,1 @@\n-        assertEquals(events2.size(), 3, \"The second listener got events\");\n+        assertEquals(3, events2.size(), \"The second listener got events\");\n@@ -78,1 +80,1 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n+    @Test\n@@ -80,1 +82,3 @@\n-        getState().onSnippetEvent(null);\n+        Assertions.assertThrows(NullPointerException.class, () -> {\n+            getState().onSnippetEvent(null);\n+        });\n@@ -83,1 +87,1 @@\n-    @Test(expectedExceptions = IllegalStateException.class)\n+    @Test\n@@ -85,2 +89,4 @@\n-        getState().close();\n-        getState().onSnippetEvent(e -> {});\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            getState().close();\n+            getState().onSnippetEvent(e -> {});\n+        });\n@@ -89,2 +95,2 @@\n-    @Test(expectedExceptions = IllegalStateException.class,\n-          enabled = false) \/\/TODO 8139873\n+    @Test \/\/TODO 8139873\n+    @Disabled\n@@ -92,2 +98,4 @@\n-        assertEval(\"System.exit(0);\");\n-        getState().onSnippetEvent(e -> {});\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            assertEval(\"System.exit(0);\");\n+            getState().onSnippetEvent(e -> {});\n+        });\n@@ -96,0 +104,1 @@\n+    @Test\n@@ -102,1 +111,1 @@\n-        assertEquals(Collections.emptyList(), listener.getEvents(), \"No events\");\n+        assertEquals(listener.getEvents(), Collections.emptyList(), \"No events\");\n","filename":"test\/langtools\/jdk\/jshell\/SnippetStatusListenerTest.java","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng SnippetTest\n+ * @run junit SnippetTest\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Test;\n@@ -38,2 +37,2 @@\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,0 +44,2 @@\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +47,0 @@\n-@Test\n@@ -49,0 +49,1 @@\n+    @Test\n@@ -55,0 +56,1 @@\n+    @Test\n@@ -59,0 +61,1 @@\n+    @Test\n@@ -63,0 +66,1 @@\n+    @Test\n@@ -67,0 +71,1 @@\n+    @Test\n@@ -71,0 +76,1 @@\n+    @Test\n@@ -75,0 +81,1 @@\n+    @Test\n@@ -79,0 +86,1 @@\n+    @Test\n@@ -83,0 +91,1 @@\n+    @Test\n@@ -87,0 +96,1 @@\n+    @Test\n@@ -92,0 +102,1 @@\n+    @Test\n@@ -97,0 +108,1 @@\n+    @Test\n@@ -104,0 +116,1 @@\n+    @Test\n@@ -108,0 +121,1 @@\n+    @Test\n@@ -119,1 +133,2 @@\n-    @Test(enabled = false) \/\/ TODO 8081689\n+    @Test \/\/ TODO 8081689\n+    @Disabled\n@@ -139,0 +154,1 @@\n+    @Test\n@@ -157,0 +173,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/SnippetTest.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng SourceLevelTest\n+ * @run junit SourceLevelTest\n@@ -32,2 +32,3 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -35,0 +36,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -37,1 +39,0 @@\n-    @DataProvider(name=\"sourceLevels\")\n@@ -45,1 +46,2 @@\n-    @Test(dataProvider=\"sourceLevels\")\n+    @ParameterizedTest\n+    @MethodSource(\"sourceLevels\")\n","filename":"test\/langtools\/jdk\/jshell\/SourceLevelTest.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm --patch-module jdk.jshell=${test.src}\/StartOptionTest-module-patch StartOptionTest\n+ * @run junit\/othervm --patch-module jdk.jshell=${test.src}\/StartOptionTest-module-patch StartOptionTest\n@@ -55,3 +55,0 @@\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n@@ -59,4 +56,7 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import org.junit.jupiter.api.AfterEach;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -64,1 +64,0 @@\n-@Test\n@@ -119,1 +118,1 @@\n-                assertEquals(out, \"\", label + \": Expected empty -- \");\n+                assertEquals(\"\", out, label + \": Expected empty -- \");\n@@ -142,1 +141,1 @@\n-            assertEquals(ec, 0, \"Expected standard exit code (0), but found: \" + ec);\n+            assertEquals(0, ec, \"Expected standard exit code (0), but found: \" + ec);\n@@ -191,2 +190,1 @@\n-        StartOptionTest.this.startExCoUoCeCn(\n-                (Integer ec) -> assertEquals((int) ec, eec,\n+        StartOptionTest.this.startExCoUoCeCn((Integer ec) -> assertEquals(eec, (int) ec,\n@@ -205,1 +203,1 @@\n-                : s -> assertEquals(s.replaceAll(\"\\\\r\\\\n?\", \"\\n\").trim(), expected.trim(), label);\n+                : s -> assertEquals(expected.trim(), s.replaceAll(\"\\\\r\\\\n?\", \"\\n\").trim(), label);\n@@ -216,2 +214,1 @@\n-        startExCoUoCeCn(\n-                expectedExitCode == 0\n+        startExCoUoCeCn(expectedExitCode == 0\n@@ -219,1 +216,1 @@\n-                        : (Integer i) -> assertEquals((int) i, expectedExitCode,\n+                        : (Integer i) -> assertEquals(expectedExitCode, (int) i,\n@@ -243,1 +240,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -270,0 +267,1 @@\n+    @Test\n@@ -284,0 +282,1 @@\n+    @Test\n@@ -296,0 +295,1 @@\n+    @Test\n@@ -308,0 +308,1 @@\n+    @Test\n@@ -314,0 +315,1 @@\n+    @Test\n@@ -330,0 +332,1 @@\n+    @Test\n@@ -344,0 +347,1 @@\n+    @Test\n@@ -349,0 +353,1 @@\n+    @Test\n@@ -358,0 +363,1 @@\n+    @Test\n@@ -364,0 +370,1 @@\n+    @Test\n@@ -370,0 +377,1 @@\n+    @Test\n@@ -378,0 +386,1 @@\n+    @Test\n@@ -384,0 +393,1 @@\n+    @Test\n@@ -398,0 +408,1 @@\n+    @Test\n@@ -404,0 +415,1 @@\n+    @Test\n@@ -413,0 +425,1 @@\n+    @Test\n@@ -425,0 +438,1 @@\n+    @Test\n@@ -433,1 +447,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\", s),\n@@ -440,1 +454,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"test\\n\", s),\n@@ -442,1 +456,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"test\\n\", s),\n@@ -444,1 +458,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"test\\n\", s),\n@@ -454,1 +468,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prefix\\ntest\\nsuffix\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"prefix\\ntest\\nsuffix\\n\", s),\n@@ -465,1 +479,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prefix\\nHello!\\nsuffix\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"prefix\\nHello!\\nsuffix\\n\", s),\n@@ -485,1 +499,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"Custom start script\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"Custom start script\\n\", s),\n@@ -501,3 +515,3 @@\n-        startCheckCommandUserOutput(s -> assertEquals(s, \"\/set start -retain -default\\n\"),\n-                                    s -> assertEquals(s, \"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n-                                    s -> assertEquals(s, \"\/set start -retain -default\\nprefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n+        startCheckCommandUserOutput(s -> assertEquals(\"\/set start -retain -default\\n\", s),\n+                                    s -> assertEquals(\"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\", s),\n+                                    s -> assertEquals(\"\/set start -retain -default\\nprefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\", s),\n@@ -510,1 +524,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"test\\n\", s),\n@@ -529,3 +543,3 @@\n-        startCheckCommandUserOutput(s -> assertEquals(s, \"\/set start -retain -default\\n\"),\n-                                    s -> assertEquals(s, \"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n-                                    s -> assertEquals(s, \"\/set start -retain -default\\nprefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n+        startCheckCommandUserOutput(s -> assertEquals(\"\/set start -retain -default\\n\", s),\n+                                    s -> assertEquals(\"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\", s),\n+                                    s -> assertEquals(\"\/set start -retain -default\\nprefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\", s),\n@@ -535,0 +549,1 @@\n+    @Test\n@@ -543,1 +558,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prompt: null\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"prompt: null\\n\", s),\n@@ -552,1 +567,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prompt: null\\n\"),\n+        startCheckUserOutput(s -> assertEquals(\"prompt: null\\n\", s),\n@@ -556,0 +571,1 @@\n+    @Test\n@@ -570,1 +586,1 @@\n-        startCheckError(s -> assertEquals(s, expectedError),\n+        startCheckError(s -> assertEquals(expectedError, s),\n@@ -575,1 +591,1 @@\n-    @AfterMethod\n+    @AfterEach\n","filename":"test\/langtools\/jdk\/jshell\/StartOptionTest.java","additions":52,"deletions":36,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng StartupWithFormatSpecifierTest\n+ * @run junit StartupWithFormatSpecifierTest\n@@ -39,1 +39,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,0 @@\n-@Test\n@@ -44,0 +43,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/StartupWithFormatSpecifierTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng StopExecutionTest\n+ * @run junit StopExecutionTest\n@@ -42,1 +42,3 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -44,3 +46,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n@@ -49,1 +48,2 @@\n-    @Test(enabled = false) \/\/ TODO 8129546\n+    @Test \/\/ TODO 8129546\n+    @Disabled\n@@ -54,1 +54,2 @@\n-    @Test(enabled = false) \/\/ TODO 8129546\n+    @Test \/\/ TODO 8129546\n+    @Disabled\n@@ -59,1 +60,2 @@\n-    @Test(enabled = false) \/\/ TODO 8129546\n+    @Test \/\/ TODO 8129546\n+    @Disabled\n@@ -64,0 +66,1 @@\n+    @Test\n@@ -89,1 +92,1 @@\n-            assertEquals(read, c);\n+            assertEquals(c, read);\n@@ -93,0 +96,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/StopExecutionTest.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng\/othervm -Duser.language=ja JShellTest8146368\n+ * @run junit\/othervm -Duser.language=ja JShellTest8146368\n@@ -34,1 +34,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-@Test\n@@ -38,0 +37,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/T8146368\/JShellTest8146368.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm -Duser.language=ja JShellToolTest8146368\n+ * @run junit\/othervm -Duser.language=ja JShellToolTest8146368\n@@ -34,1 +34,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-@Test\n@@ -38,0 +37,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/T8146368\/JShellToolTest8146368.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng Test8294583\n+ * @run junit Test8294583\n@@ -32,2 +32,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +36,0 @@\n-@Test\n@@ -38,0 +38,1 @@\n+    @Test\n@@ -44,1 +45,1 @@\n-    @org.testng.annotations.BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/Test8294583.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng Test8296012\n+ * @run junit Test8296012\n@@ -32,2 +32,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +36,0 @@\n-@Test\n@@ -38,0 +38,1 @@\n+    @Test\n@@ -43,1 +44,1 @@\n-    @org.testng.annotations.BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/jdk\/jshell\/Test8296012.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @run testng\/timeout=600 ToolBasicTest\n+ * @run junit\/timeout=600 ToolBasicTest\n@@ -60,1 +60,6 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -62,6 +67,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.fail;\n-\n-@Test\n@@ -70,0 +69,1 @@\n+    @Test\n@@ -71,2 +71,1 @@\n-        test(\n-                (a) -> assertCommandOutputContains(a, \"123\", \"==> 123\"),\n+        test((a) -> assertCommandOutputContains(a, \"123\", \"==> 123\"),\n@@ -84,1 +83,1 @@\n-                    assertEquals(cnt, 1, \"Expected only one listed line\");\n+                    assertEquals(1, cnt, \"Expected only one listed line\");\n@@ -89,0 +88,1 @@\n+    @Test\n@@ -97,1 +97,1 @@\n-            assertEquals(lines.count(), 1, \"Expected only one saved line\");\n+            assertEquals(1, lines.count(), \"Expected only one saved line\");\n@@ -101,0 +101,1 @@\n+    @Test\n@@ -135,0 +136,1 @@\n+    @Test\n@@ -196,0 +198,1 @@\n+    @Test\n@@ -203,0 +206,1 @@\n+    @Test\n@@ -224,1 +228,1 @@\n-                assertEquals(ss[0], codes[finalI]);\n+                assertEquals(codes[finalI], ss[0]);\n@@ -234,1 +238,1 @@\n-                assertEquals(ss[0], codes[codes.length - finalI - 1]);\n+                assertEquals(codes[codes.length - finalI - 1], ss[0]);\n@@ -244,0 +248,1 @@\n+    @Test\n@@ -248,1 +253,1 @@\n-                            assertEquals(ss[0], code);\n+                            assertEquals(code, ss[0]);\n@@ -259,1 +264,1 @@\n-                (a) -> assertCommandCheckOutput(a, \"add(ONE)\", s -> assertEquals(s.split(\"\\n\")[0], \"|  Error:\")), \/\/ id: e1\n+                (a) -> assertCommandCheckOutput(a, \"add(ONE)\", s -> assertEquals(\"|  Error:\", s.split(\"\\n\")[0])), \/\/ id: e1\n@@ -273,0 +278,1 @@\n+    @Test\n@@ -288,0 +294,1 @@\n+    @Test\n@@ -323,0 +330,1 @@\n+    @Test\n@@ -335,0 +343,1 @@\n+    @Test\n@@ -349,0 +358,1 @@\n+    @Test\n@@ -376,0 +386,1 @@\n+    @Test\n@@ -394,0 +405,1 @@\n+    @Test\n@@ -409,0 +421,1 @@\n+    @Test\n@@ -418,0 +431,1 @@\n+    @Test\n@@ -428,0 +442,1 @@\n+    @Test\n@@ -443,0 +458,1 @@\n+    @Test\n@@ -453,0 +469,1 @@\n+    @Test\n@@ -473,0 +490,1 @@\n+    @Test\n@@ -507,0 +525,1 @@\n+    @Test\n@@ -521,0 +540,1 @@\n+    @Test\n@@ -552,0 +572,1 @@\n+    @Test\n@@ -562,0 +583,1 @@\n+    @Test\n@@ -576,1 +598,1 @@\n-            assertEquals(Files.readAllLines(path), list);\n+            assertEquals(list, Files.readAllLines(path));\n@@ -592,1 +614,1 @@\n-            assertEquals(Files.readAllLines(path), output);\n+            assertEquals(output, Files.readAllLines(path));\n@@ -609,1 +631,1 @@\n-            assertEquals(Files.readAllLines(path), output);\n+            assertEquals(output, Files.readAllLines(path));\n@@ -624,1 +646,1 @@\n-            assertEquals(Files.readAllLines(path), output);\n+            assertEquals(output, Files.readAllLines(path));\n@@ -628,0 +650,1 @@\n+    @Test\n@@ -658,0 +681,1 @@\n+    @Test\n@@ -665,1 +689,1 @@\n-        assertEquals(lines, START_UP);\n+        assertEquals(START_UP, lines);\n@@ -668,0 +692,1 @@\n+    @Test\n@@ -677,0 +702,1 @@\n+    @Test\n@@ -689,0 +715,1 @@\n+    @Test\n@@ -694,0 +721,1 @@\n+    @Test\n@@ -705,0 +733,1 @@\n+    @Test\n@@ -731,0 +760,1 @@\n+    @Test\n@@ -738,0 +768,1 @@\n+    @Test\n@@ -770,0 +801,1 @@\n+    @Test\n@@ -828,1 +860,2 @@\n-    @Test(enabled = false) \/\/ TODO 8158197\n+    @Test \/\/ TODO 8158197\n+    @Disabled\n@@ -841,0 +874,1 @@\n+    @Test\n@@ -857,0 +891,1 @@\n+    @Test\n@@ -868,0 +903,1 @@\n+    @Test\n@@ -879,0 +915,1 @@\n+    @Test\n@@ -890,0 +927,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolBasicTest.java","additions":61,"deletions":23,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng ToolCommandOptionTest\n+ * @run junit ToolCommandOptionTest\n@@ -36,3 +36,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-@Test\n@@ -43,0 +42,1 @@\n+    @Test\n@@ -70,0 +70,1 @@\n+    @Test\n@@ -95,0 +96,1 @@\n+    @Test\n@@ -123,0 +125,1 @@\n+    @Test\n@@ -160,0 +163,1 @@\n+    @Test\n@@ -214,0 +218,1 @@\n+    @Test\n@@ -247,0 +252,1 @@\n+    @Test\n@@ -291,0 +297,1 @@\n+    @Test\n@@ -340,0 +347,1 @@\n+    @Test\n@@ -402,0 +410,1 @@\n+    @Test\n@@ -431,0 +440,1 @@\n+    @Test\n@@ -534,0 +544,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolCommandOptionTest.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run testng ToolCompletionTest\n+ * @run junit ToolCompletionTest\n@@ -44,1 +44,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"test\/langtools\/jdk\/jshell\/ToolCompletionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng ToolEnableNativeAccessTest\n+ * @run junit ToolEnableNativeAccessTest\n@@ -32,3 +32,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n","filename":"test\/langtools\/jdk\/jshell\/ToolEnableNativeAccessTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng ToolEnablePreviewTest\n+ * @run junit ToolEnablePreviewTest\n@@ -36,3 +36,2 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n","filename":"test\/langtools\/jdk\/jshell\/ToolEnablePreviewTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng ToolFormatTest\n+ * @run junit ToolFormatTest\n@@ -41,4 +41,5 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +47,0 @@\n-@Test\n@@ -49,0 +49,1 @@\n+    @Test\n@@ -89,0 +90,1 @@\n+    @Test\n@@ -141,0 +143,1 @@\n+    @Test\n@@ -200,1 +203,2 @@\n-    @Test(enabled = false)\n+    @Test\n+    @Disabled\n@@ -281,0 +285,1 @@\n+    @Test\n@@ -312,0 +317,1 @@\n+    @Test\n@@ -334,0 +340,1 @@\n+    @Test\n@@ -335,2 +342,1 @@\n-        test(\n-                (a) -> assertCommand(a, \"\/set mode tp -quiet\", \"|  Created new feedback mode: tp\"),\n+        test((a) -> assertCommand(a, \"\/set mode tp -quiet\", \"|  Created new feedback mode: tp\"),\n@@ -350,1 +356,1 @@\n-                                assertEquals(rdr.readLine(), \"|  \/set mode tp -quiet\",\n+                                assertEquals(\"|  \/set mode tp -quiet\", rdr.readLine(),\n@@ -352,1 +358,1 @@\n-                                assertEquals(rdr.readLine(), \"|  \/set prompt tp \\\"aaa\\\" \\\"bbb\\\"\",\n+                                assertEquals(\"|  \/set prompt tp \\\"aaa\\\" \\\"bbb\\\"\", rdr.readLine(),\n@@ -358,1 +364,1 @@\n-                                assertEquals(l, \"|  \/set mode -retain tp\",\n+                                assertEquals(\"|  \/set mode -retain tp\", l,\n@@ -360,1 +366,1 @@\n-                                assertEquals(rdr.readLine(), \"|  \",\n+                                assertEquals(\"|  \", rdr.readLine(),\n@@ -362,1 +368,1 @@\n-                                assertEquals(rdr.readLine(), \"|  \/set mode tp -quiet\",\n+                                assertEquals(\"|  \/set mode tp -quiet\", rdr.readLine(),\n@@ -364,1 +370,1 @@\n-                                assertEquals(rdr.readLine(), \"|  \/set prompt tp \\\"ccc\\\" \\\"ddd\\\"\",\n+                                assertEquals(\"|  \/set prompt tp \\\"ccc\\\" \\\"ddd\\\"\", rdr.readLine(),\n@@ -373,0 +379,1 @@\n+    @Test\n@@ -379,0 +386,1 @@\n+    @Test\n@@ -399,0 +407,1 @@\n+    @Test\n@@ -476,0 +485,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolFormatTest.java","additions":26,"deletions":16,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run testng\/othervm\/timeout=480 ToolLocalSimpleTest\n+ * @run junit\/othervm\/timeout=480 ToolLocalSimpleTest\n@@ -37,2 +37,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -54,1 +54,1 @@\n-        assertEquals(System.getProperty(\"LOCAL_CHECK\"), \"Here\");\n+        assertEquals(\"Here\", System.getProperty(\"LOCAL_CHECK\"));\n@@ -59,1 +59,1 @@\n-        assertEquals(System.getProperty(\"LOCAL_CHECK\"), \"After\");\n+        assertEquals(\"After\", System.getProperty(\"LOCAL_CHECK\"));\n","filename":"test\/langtools\/jdk\/jshell\/ToolLocalSimpleTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng ToolLocaleMessageTest\n+ * @run junit ToolLocaleMessageTest\n@@ -39,3 +39,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -70,0 +69,1 @@\n+    @Test\n@@ -76,0 +76,1 @@\n+    @Test\n@@ -101,0 +102,1 @@\n+    @Test\n@@ -135,0 +137,1 @@\n+    @Test\n@@ -156,0 +159,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolLocaleMessageTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng ToolMultilineSnippetHistoryTest\n+ * @run junit ToolMultilineSnippetHistoryTest\n@@ -37,1 +37,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,0 @@\n-@Test\n@@ -46,0 +45,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolMultilineSnippetHistoryTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n- * @run testng\/othervm --patch-module jdk.jshell=${test.src}\/StartOptionTest-module-patch ToolProviderTest\n+ * @run junit\/othervm --patch-module jdk.jshell=${test.src}\/StartOptionTest-module-patch ToolProviderTest\n@@ -48,1 +48,0 @@\n-@Test\n@@ -105,0 +104,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolProviderTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @run testng ToolReloadTest\n+ * @run junit ToolReloadTest\n@@ -42,2 +42,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,0 @@\n-@Test\n@@ -49,0 +48,1 @@\n+    @Test\n@@ -66,0 +66,1 @@\n+    @Test\n@@ -92,0 +93,1 @@\n+    @Test\n@@ -115,0 +117,1 @@\n+    @Test\n@@ -132,0 +135,1 @@\n+    @Test\n@@ -152,0 +156,1 @@\n+    @Test\n@@ -165,0 +170,1 @@\n+    @Test\n@@ -183,0 +189,1 @@\n+    @Test\n@@ -203,0 +210,1 @@\n+    @Test\n@@ -224,0 +232,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolReloadTest.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng ToolRetainTest\n+ * @run junit ToolRetainTest\n@@ -34,1 +34,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-@Test\n@@ -39,0 +38,1 @@\n+    @Test\n@@ -56,0 +56,1 @@\n+    @Test\n@@ -84,0 +85,1 @@\n+    @Test\n@@ -98,0 +100,1 @@\n+    @Test\n@@ -119,0 +122,1 @@\n+    @Test\n@@ -133,0 +137,1 @@\n+    @Test\n@@ -145,0 +150,1 @@\n+    @Test\n@@ -154,0 +160,1 @@\n+    @Test\n@@ -170,0 +177,1 @@\n+    @Test\n@@ -185,0 +193,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolRetainTest.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run testng\/timeout=300 ToolShiftTabTest\n+ * @run junit\/timeout=300 ToolShiftTabTest\n@@ -38,1 +38,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-@Test\n@@ -46,0 +45,1 @@\n+    @Test\n@@ -57,0 +57,1 @@\n+    @Test\n@@ -71,0 +72,1 @@\n+    @Test\n@@ -84,0 +86,1 @@\n+    @Test\n@@ -109,0 +112,1 @@\n+    @Test\n@@ -129,0 +133,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolShiftTabTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run testng\/timeout=480 ToolSimpleTest\n+ * @run junit\/timeout=480 ToolSimpleTest\n@@ -50,4 +50,3 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -546,1 +545,1 @@\n-        assertEquals(res.length, match.size(), \"Got: \" + Arrays.asList(res));\n+        assertEquals(match.size(), res.length, \"Got: \" + Arrays.asList(res));\n@@ -622,1 +621,1 @@\n-                        s -> assertEquals(s.trim().split(\"\\n\").length, 10)),\n+                        s -> assertEquals(10, s.trim().split(\"\\n\").length)),\n","filename":"test\/langtools\/jdk\/jshell\/ToolSimpleTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run testng ToolTabCommandTest\n+ * @run junit ToolTabCommandTest\n@@ -40,1 +40,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,0 @@\n-@Test\n@@ -49,0 +48,1 @@\n+    @Test\n@@ -136,0 +136,1 @@\n+    @Test\n@@ -173,0 +174,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolTabCommandTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run testng\/timeout=300 ToolTabSnippetTest\n+ * @run junit\/timeout=300 ToolTabSnippetTest\n@@ -51,1 +51,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +53,0 @@\n-@Test\n@@ -60,0 +59,1 @@\n+    @Test\n@@ -211,0 +211,1 @@\n+    @Test\n@@ -244,0 +245,1 @@\n+    @Test\n@@ -269,0 +271,1 @@\n+    @Test\n@@ -334,0 +337,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/ToolTabSnippetTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run testng ToolingTest\n+ * @run junit ToolingTest\n@@ -36,2 +36,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"test\/langtools\/jdk\/jshell\/ToolingTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng TypeNameTest\n+ * @run junit TypeNameTest\n@@ -32,1 +32,2 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n@@ -34,3 +35,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n@@ -45,1 +43,1 @@\n-        assertEquals(varKey(assertEval(expr)).typeName(), type);\n+        assertEquals(type, varKey(assertEval(expr)).typeName());\n@@ -49,0 +47,1 @@\n+    @Test\n@@ -78,0 +77,1 @@\n+    @Test\n@@ -98,0 +98,1 @@\n+    @Test\n@@ -147,0 +148,1 @@\n+    @Test\n@@ -200,0 +202,1 @@\n+    @Test\n@@ -216,0 +219,1 @@\n+    @Test\n@@ -221,0 +225,1 @@\n+    @Test\n@@ -227,0 +232,1 @@\n+    @Test\n@@ -232,0 +238,1 @@\n+    @Test\n@@ -236,0 +243,1 @@\n+    @Test\n@@ -240,0 +248,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/TypeNameTest.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    protected void doRunTest(Test test) throws Exception {\n+    protected void doRunTest(UITest test) throws Exception {\n@@ -70,1 +70,1 @@\n-    protected void doRunTest(Test test, boolean setUserInput) throws Exception {\n+    protected void doRunTest(UITest test, boolean setUserInput) throws Exception {\n@@ -144,1 +144,1 @@\n-    protected interface Test {\n+    protected interface UITest {\n","filename":"test\/langtools\/jdk\/jshell\/UITesting.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run testng UndefinedClassTest\n+ * @run junit UndefinedClassTest\n@@ -41,1 +41,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -50,0 +49,1 @@\n+    @Test\n@@ -65,0 +65,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/UndefinedClassTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng UnicodeTest\n+ * @run junit UnicodeTest\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Test;\n@@ -37,2 +36,2 @@\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -41,0 +40,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,0 @@\n-@Test\n@@ -45,0 +44,1 @@\n+    @Test\n@@ -50,0 +50,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/UnicodeTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng UnnamedTest\n+ * @run junit UnnamedTest\n@@ -40,2 +40,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n@@ -47,0 +45,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -54,2 +54,2 @@\n-        Assert.assertEquals(getState().varValue(sn1), \"0\");\n-        Assert.assertEquals(getState().varValue(sn2), \"\\\"x\\\"\");\n+        Assertions.assertEquals(\"0\", getState().varValue(sn1));\n+        Assertions.assertEquals(\"\\\"x\\\"\", getState().varValue(sn2));\n","filename":"test\/langtools\/jdk\/jshell\/UnnamedTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng UserExecutionControlTest\n+ * @run junit UserExecutionControlTest\n@@ -33,3 +33,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.BeforeMethod;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,0 @@\n-@Test\n@@ -40,1 +39,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -46,0 +45,1 @@\n+    @Test\n@@ -48,1 +48,1 @@\n-        assertEquals(System.getProperty(\"LOCAL_CHECK\"), \"TBD\");\n+        assertEquals(\"TBD\", System.getProperty(\"LOCAL_CHECK\"));\n@@ -51,1 +51,1 @@\n-        assertEquals(System.getProperty(\"LOCAL_CHECK\"), \"local\");\n+        assertEquals(\"local\", System.getProperty(\"LOCAL_CHECK\"));\n","filename":"test\/langtools\/jdk\/jshell\/UserExecutionControlTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng UserInputTest\n+ * @run junit UserInputTest\n@@ -36,1 +36,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,0 @@\n-@Test\n@@ -41,0 +40,1 @@\n+    @Test\n@@ -48,0 +48,1 @@\n+    @Test\n@@ -55,0 +56,1 @@\n+    @Test\n@@ -76,0 +78,1 @@\n+    @Test\n@@ -102,0 +105,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/UserInputTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng UserJdiUserRemoteTest\n+ * @run junit UserJdiUserRemoteTest\n@@ -33,2 +33,0 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeMethod;\n@@ -41,1 +39,3 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -49,1 +48,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -56,0 +55,1 @@\n+    @Test\n@@ -59,2 +59,2 @@\n-        assertEquals(vd, \"1.5\");\n-        assertEquals(auxStream.toString(), \"aDouble\");\n+        assertEquals(\"1.5\", vd);\n+        assertEquals(\"aDouble\", auxStream.toString());\n@@ -63,0 +63,1 @@\n+    @Test\n@@ -66,1 +67,1 @@\n-        assertEquals(res, \"ribbit\");\n+        assertEquals(\"ribbit\", res);\n@@ -69,0 +70,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/UserJdiUserRemoteTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run testng\/timeout=480 VariablesTest\n+ * @run junit\/timeout=480 VariablesTest\n@@ -47,2 +47,0 @@\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n@@ -53,2 +51,5 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +57,0 @@\n-@Test\n@@ -59,0 +59,1 @@\n+    @Test\n@@ -72,0 +73,1 @@\n+    @Test\n@@ -92,0 +94,1 @@\n+    @Test\n@@ -100,0 +103,1 @@\n+    @Test\n@@ -119,0 +123,1 @@\n+    @Test\n@@ -129,0 +134,1 @@\n+    @Test\n@@ -140,0 +146,1 @@\n+    @Test\n@@ -142,1 +149,1 @@\n-        assertEquals(sn.typeName(), \"int[]\");\n+        assertEquals(\"int[]\", sn.typeName());\n@@ -148,0 +155,1 @@\n+    @Test\n@@ -150,1 +158,1 @@\n-        assertEquals(sn.typeName(), \"int[]\");\n+        assertEquals(\"int[]\", sn.typeName());\n@@ -156,0 +164,1 @@\n+    @Test\n@@ -173,0 +182,1 @@\n+    @Test\n@@ -183,0 +193,1 @@\n+    @Test\n@@ -197,0 +208,1 @@\n+    @Test\n@@ -207,0 +219,1 @@\n+    @Test\n@@ -226,0 +239,1 @@\n+    @Test\n@@ -232,0 +246,1 @@\n+    @Test\n@@ -240,0 +255,1 @@\n+    @Test\n@@ -246,0 +262,1 @@\n+    @Test\n@@ -264,1 +281,2 @@\n-    @Test(enabled = false) \/\/ TODO 8081689\n+    @Test \/\/ TODO 8081689\n+    @Disabled\n@@ -286,1 +304,2 @@\n-    @Test(enabled = false) \/\/ TODO 8081689\n+    @Test \/\/ TODO 8081689\n+    @Disabled\n@@ -306,0 +325,1 @@\n+    @Test\n@@ -327,0 +347,1 @@\n+    @Test\n@@ -333,0 +354,1 @@\n+    @Test\n@@ -342,1 +364,1 @@\n-        assertEquals(getState().status(undefKey), RECOVERABLE_NOT_DEFINED);\n+        assertEquals(RECOVERABLE_NOT_DEFINED, getState().status(undefKey));\n@@ -344,2 +366,2 @@\n-        assertEquals(unr.size(), 1);\n-        assertEquals(unr.get(0), \"class undefined\");\n+        assertEquals(1, unr.size());\n+        assertEquals(\"class undefined\", unr.get(0));\n@@ -349,0 +371,1 @@\n+    @Test\n@@ -413,0 +436,1 @@\n+    @Test\n@@ -419,0 +443,1 @@\n+    @Test\n@@ -431,0 +456,1 @@\n+    @Test\n@@ -435,0 +461,1 @@\n+    @Test\n@@ -440,0 +467,1 @@\n+    @Test\n@@ -446,0 +474,1 @@\n+    @Test\n@@ -452,0 +481,1 @@\n+    @Test\n@@ -469,0 +499,1 @@\n+    @Test\n@@ -481,0 +512,1 @@\n+    @Test\n@@ -490,0 +522,1 @@\n+    @Test\n@@ -503,0 +536,1 @@\n+    @Test\n@@ -516,0 +550,1 @@\n+    @Test\n@@ -548,1 +583,1 @@\n-        assertEquals(vs.typeName(), typeName);\n+        assertEquals(typeName, vs.typeName());\n@@ -554,1 +589,1 @@\n-        assertEquals(varKey(assertEval(var)).typeName(), typeName);\n+        assertEquals(typeName, varKey(assertEval(var)).typeName());\n@@ -557,1 +592,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -614,0 +649,1 @@\n+    @Test\n@@ -620,0 +656,1 @@\n+    @Test\n@@ -624,0 +661,1 @@\n+    @Test\n@@ -630,0 +668,1 @@\n+    @Test\n","filename":"test\/langtools\/jdk\/jshell\/VariablesTest.java","additions":55,"deletions":16,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng WrapperTest\n+ * @run junit WrapperTest\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Test;\n@@ -40,2 +39,2 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,0 +43,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +45,0 @@\n-@Test\n@@ -48,0 +47,1 @@\n+    @Test\n@@ -51,1 +51,1 @@\n-        assertEquals(swl.size(), 1, \"unexpected list length\");\n+        assertEquals(1, swl.size(), \"unexpected list length\");\n@@ -66,0 +66,1 @@\n+    @Test\n@@ -78,0 +79,1 @@\n+    @Test\n@@ -94,0 +96,1 @@\n+    @Test\n@@ -112,0 +115,1 @@\n+    @Test\n@@ -133,0 +137,1 @@\n+    @Test\n@@ -150,0 +155,1 @@\n+    @Test\n@@ -185,0 +191,1 @@\n+    @Test\n@@ -188,1 +195,1 @@\n-        assertEquals(swl.size(), 1, \"unexpected list length\");\n+        assertEquals(1, swl.size(), \"unexpected list length\");\n@@ -193,2 +200,2 @@\n-        assertEquals(f.kind(), Kind.ERRONEOUS);\n-        assertEquals(((ErroneousSnippet)f).probableKind(), Kind.METHOD);\n+        assertEquals(Kind.ERRONEOUS, f.kind());\n+        assertEquals(Kind.METHOD, ((ErroneousSnippet)f).probableKind());\n@@ -200,0 +207,1 @@\n+    @Test\n@@ -203,1 +211,1 @@\n-        assertEquals(swl.size(), 1, \"unexpected list length\");\n+        assertEquals(1, swl.size(), \"unexpected list length\");\n@@ -213,0 +221,1 @@\n+    @Test\n@@ -216,1 +225,1 @@\n-        assertEquals(swl.size(), 1, \"unexpected list length\");\n+        assertEquals(1, swl.size(), \"unexpected list length\");\n@@ -221,2 +230,2 @@\n-        assertEquals(f.kind(), Kind.ERRONEOUS);\n-        assertEquals(((ErroneousSnippet)f).probableKind(), Kind.VAR);\n+        assertEquals(Kind.ERRONEOUS, f.kind());\n+        assertEquals(Kind.VAR, ((ErroneousSnippet)f).probableKind());\n@@ -228,0 +237,1 @@\n+    @Test\n@@ -231,1 +241,1 @@\n-        assertEquals(swl.size(), 1, \"unexpected list length\");\n+        assertEquals(1, swl.size(), \"unexpected list length\");\n@@ -241,0 +251,1 @@\n+    @Test\n@@ -244,1 +255,1 @@\n-        assertEquals(swl.size(), 1, \"unexpected list length\");\n+        assertEquals(1, swl.size(), \"unexpected list length\");\n@@ -249,2 +260,2 @@\n-        assertEquals(f.kind(), Kind.ERRONEOUS);\n-        assertEquals(((ErroneousSnippet)f).probableKind(), Kind.IMPORT);\n+        assertEquals(Kind.ERRONEOUS, f.kind());\n+        assertEquals(Kind.IMPORT, ((ErroneousSnippet)f).probableKind());\n@@ -256,0 +267,1 @@\n+    @Test\n@@ -259,1 +271,1 @@\n-        assertEquals(swl.size(), 1, \"unexpected list length\");\n+        assertEquals(1, swl.size(), \"unexpected list length\");\n@@ -264,2 +276,2 @@\n-        assertEquals(f.kind(), Kind.ERRONEOUS);\n-        assertEquals(((ErroneousSnippet)f).probableKind(), Kind.ERRONEOUS);\n+        assertEquals(Kind.ERRONEOUS, f.kind());\n+        assertEquals(Kind.ERRONEOUS, ((ErroneousSnippet)f).probableKind());\n@@ -271,0 +283,1 @@\n+    @Test\n@@ -274,1 +287,1 @@\n-        assertEquals(swl.size(), 0, \"expected empty list\");\n+        assertEquals(0, swl.size(), \"expected empty list\");\n@@ -277,0 +290,1 @@\n+    @Test\n@@ -283,1 +297,1 @@\n-        assertEquals(dep.size(), 0);\n+        assertEquals(0, dep.size());\n@@ -285,1 +299,1 @@\n-        assertEquals(dep.size(), 1);\n+        assertEquals(1, dep.size());\n@@ -288,1 +302,1 @@\n-        assertEquals(dep.size(), 2);\n+        assertEquals(2, dep.size());\n@@ -294,2 +308,2 @@\n-        assertEquals(sw.source(), source);\n-        assertEquals(sw.kind(), kind);\n+        assertEquals(source, sw.source());\n+        assertEquals(kind, sw.kind());\n@@ -325,1 +339,1 @@\n-        assertEquals(wrappedPart, sourcePart,\n+        assertEquals(sourcePart, wrappedPart,\n@@ -327,1 +341,1 @@\n-        assertEquals(sw.wrappedToSourcePosition(wpg), start);\n+        assertEquals(start, sw.wrappedToSourcePosition(wpg));\n","filename":"test\/langtools\/jdk\/jshell\/WrapperTest.java","additions":43,"deletions":29,"binary":false,"changes":72,"status":"modified"}]}