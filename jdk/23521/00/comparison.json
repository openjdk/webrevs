{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.attribute.UnknownAttribute;\n@@ -52,1 +53,1 @@\n-                StackMapTableAttribute {\n+                StackMapTableAttribute, UnknownAttribute {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeElement.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n- * User-defined attributes are currently not delivered in the traversal of a\n- * {@link CodeModel}.\n- * <p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CustomAttribute.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n- * This attribute is not delivered in the traversal of a {@link CodeModel}.\n- * <p>\n@@ -48,1 +46,1 @@\n-                ClassElement, MethodElement, FieldElement\n+                ClassElement, MethodElement, FieldElement, CodeElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/UnknownAttribute.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,0 +213,9 @@\n+\n+        @Override\n+        public void writeTo(BufWriterImpl buf) {\n+            if (buf.canWriteDirect(classReader) && buf.labelsMatch(ctx)) {\n+                classReader.copyBytesTo(buf, payloadStart - NAME_AND_LENGTH_PREFIX, payloadLen() + NAME_AND_LENGTH_PREFIX);\n+            } else {\n+                attributeMapper().writeAttribute(buf, this);\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+    private boolean labelsMatch;\n@@ -79,1 +80,1 @@\n-    public void setLabelContext(LabelContext labelContext) {\n+    public void setLabelContext(LabelContext labelContext, boolean labelsMatch) {\n@@ -81,0 +82,1 @@\n+        this.labelsMatch = labelsMatch;\n@@ -82,0 +84,7 @@\n+\n+    public boolean labelsMatch(LabelContext lc) {\n+        return labelsMatch\n+                && labelContext instanceof DirectCodeBuilder dcb\n+                && dcb.original == lc;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.lang.classfile.attribute.UnknownAttribute;\n@@ -171,0 +172,1 @@\n+        generateUserAttributes(consumer);\n@@ -207,0 +209,8 @@\n+    private void generateUserAttributes(Consumer<? super CodeElement> consumer) {\n+        for (var attr : attributes) {\n+            if (attr instanceof CustomAttribute || attr instanceof UnknownAttribute) {\n+                consumer.accept((CodeElement) attr);\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -357,1 +357,0 @@\n-                buf.setLabelContext(dcb);\n@@ -369,0 +368,1 @@\n+                buf.setLabelContext(dcb, codeMatch);\n@@ -387,1 +387,1 @@\n-                buf.setLabelContext(null);\n+                buf.setLabelContext(null, false);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+    default boolean canWriteDirect(LabelContext original) { return false; }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LabelContext.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.constant.ConstantDescs.*;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8347472\n+ * @summary Testing Attribute behavior for those appearing on CodeModel\n+ * @run junit AttributeInCodeTest\n+ *\/\n+class AttributeInCodeTest {\n+\n+    static final String STRANGE_ATTRIBUTE_NAME = \"StrangeAttribute\";\n+    static class StrangeAttribute extends CustomAttribute<StrangeAttribute> {\n+        private final Utf8Entry name;\n+\n+        StrangeAttribute(Utf8Entry name) {\n+            super(STRANGE_ATTRIBUTE_MAPPER);\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public Utf8Entry attributeName() {\n+            return name;\n+        }\n+    }\n+\n+    static final AttributeMapper<StrangeAttribute> STRANGE_ATTRIBUTE_MAPPER = new AttributeMapper<>() {\n+\n+        @Override\n+        public String name() {\n+            return STRANGE_ATTRIBUTE_NAME;\n+        }\n+\n+        @Override\n+        public StrangeAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n+            return new StrangeAttribute(cf.readEntry(pos - 6, Utf8Entry.class));\n+        }\n+\n+        @Override\n+        public void writeAttribute(BufWriter buf, StrangeAttribute attr) {\n+            buf.writeIndex(attr.name);\n+            buf.writeInt(0);\n+        }\n+\n+        @Override\n+        public AttributeMapper.AttributeStability stability() {\n+            return AttributeMapper.AttributeStability.STATELESS;\n+        }\n+    };\n+\n+    @Test\n+    void testUserAttributeDelivery() {\n+        var strangeAwareCf = ClassFile.of(ClassFile.AttributeMapperOption.of(utf8 -> {\n+            if (utf8.equalsString(STRANGE_ATTRIBUTE_NAME)) return STRANGE_ATTRIBUTE_MAPPER;\n+            return null;\n+        }));\n+        var cpb = ConstantPoolBuilder.of();\n+        var entry = cpb.utf8Entry(STRANGE_ATTRIBUTE_NAME);\n+        int pos = entry.index();\n+        var classBytes = ClassFile.of().build(cpb.classEntry(ClassDesc.of(\"StrangeClass\")), cpb, clb -> clb\n+                .withMethodBody(\"dummy\", MTD_void, ACC_STATIC, cob -> cob.return_().with(new StrangeAttribute(entry))));\n+\n+        \/\/ read unknown\n+        var withUnknown = ClassFile.of().parse(classBytes).methods().getFirst()\n+                .code().orElseThrow().elementStream()\n+                .filter(e -> e instanceof Attribute<?>).toList();\n+        assertEquals(1, withUnknown.size());\n+        UnknownAttribute unknown = (UnknownAttribute) withUnknown.getFirst();\n+        assertEquals(pos, unknown.attributeName().index());\n+        assertArrayEquals(new byte[0], unknown.contents());\n+\n+        \/\/ read known\n+        var withKnown = strangeAwareCf.parse(classBytes).methods().getFirst()\n+                .code().orElseThrow().elementStream()\n+                .filter(e -> e instanceof Attribute<?>).toList();\n+        assertEquals(1, withKnown.size());\n+        StrangeAttribute strange = (StrangeAttribute) withKnown.getFirst();\n+        assertEquals(pos, strange.attributeName().index());\n+    }\n+\n+    \/\/ Verifies reusing stack maps updates the label indices.\n+    @Test\n+    void testStackMapReuse() throws Throwable {\n+        ClassModel exampleClass;\n+        try (var is = Objects.requireNonNull(AttributeInCodeTest.class.getResourceAsStream(\"\/ExampleClass.class\"))) {\n+            exampleClass = ClassFile.of().parse(is.readAllBytes());\n+        }\n+\n+        var code = exampleClass.methods().getFirst()\n+                .findAttribute(Attributes.code()).orElseThrow();\n+        var stackMap = code\n+                .findAttribute(Attributes.stackMapTable()).orElseThrow();\n+        assertEquals(1, stackMap.entries().size());\n+        var transform = ClassTransform.transformingMethodBodies(new CodeTransform() {\n+            @Override\n+            public void accept(CodeBuilder builder, CodeElement element) {\n+                builder.with(element);\n+            }\n+\n+            @Override\n+            public void atStart(CodeBuilder builder) {\n+                var ps = ClassDesc.of(\"java.io.PrintStream\");\n+                builder.getstatic(ClassDesc.of(\"java.lang.System\"), \"out\", ps)\n+                       .ldc(\"Injected\")\n+                       .invokevirtual(ps, \"println\", MethodTypeDesc.of(CD_void, CD_String))\n+                       .with(stackMap);\n+            }\n+        });\n+\n+        var cf = ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS);\n+        var bytes = cf.transformClass(exampleClass, transform);\n+        assertEquals(List.of(), cf.verify(bytes));\n+        var l = MethodHandles.lookup().defineHiddenClass(bytes, true, MethodHandles.Lookup.ClassOption.STRONG);\n+        var mh = l.findConstructor(l.lookupClass(), MethodType.methodType(void.class, String.class)).asType(MethodType.methodType(Object.class, String.class));\n+        Object _ = mh.invokeExact((String) \"ape\");\n+    }\n+}\n+\n+class ExampleClass {\n+    ExampleClass(String s) {\n+        if (s.isEmpty()) {\n+            System.out.println(\"Empty\");\n+        }\n+        \/\/ Frame here\n+        System.out.println(s.length());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/AttributeInCodeTest.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-                                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n+                                    case CustomAttribute<?> a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n@@ -94,1 +94,1 @@\n-                                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n+                                    case CustomAttribute<?> a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n@@ -145,1 +145,1 @@\n-                    case CustomAttribute a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n+                    case CustomAttribute<?> a -> throw new AssertionError(\"Unexpected custom attribute: \" + a.attributeName().stringValue());\n@@ -597,1 +597,1 @@\n-                case CustomAttribute a ->\n+                case CustomAttribute<?> a ->\n@@ -599,0 +599,2 @@\n+                case UnknownAttribute a ->\n+                    throw new AssertionError(\"Unexpected unknown attribute: \" + a.attributeName().stringValue());\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}