{"files":[{"patch":"@@ -511,1 +511,3 @@\n-  InstanceKlass* k = UnregisteredClasses::load_class(class_name, _source, CHECK_NULL);\n+  ResourceMark rm;\n+  char * source_path = os::strdup_check_oom(ClassLoader::uri_to_path(_source));\n+  InstanceKlass* k = UnregisteredClasses::load_class(class_name, source_path, CHECK_NULL);\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,0 +177,2 @@\n+    \/\/ NB: the string following \"source: \" is not really a proper file name, but rather\n+    \/\/ a truncated URI referring to a file. It must be decoded after reading.\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -580,1 +580,1 @@\n-  const char* file = ClassLoader::skip_uri_protocol(location->as_C_string());\n+  const char* file = ClassLoader::uri_to_path(location->as_C_string());\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,0 +84,3 @@\n+#include <stdlib.h>\n+#include <ctype.h>\n+\n@@ -1211,1 +1214,1 @@\n-char* ClassLoader::skip_uri_protocol(char* source) {\n+static const char* skip_uri_protocol(const char* source) {\n@@ -1230,0 +1233,41 @@\n+static char decode_percent_encoded(const char *str, size_t& index) {\n+  if (str[index] == '%'\n+      && isxdigit(str[index + 1])\n+      && isxdigit(str[index + 2])) {\n+    char hex[3];\n+    hex[0] = str[index + 1];\n+    hex[1] = str[index + 2];\n+    hex[2] = '\\0';\n+    index += 2;\n+    return (char) strtol(hex, NULL, 16);\n+  }\n+  return str[index];\n+}\n+\n+char* ClassLoader::uri_to_path(const char* uri) {\n+  const size_t len = strlen(uri) + 1;\n+  char* path = NEW_RESOURCE_ARRAY(char, len);\n+\n+  uri = skip_uri_protocol(uri);\n+\n+  if (strncmp(uri, \"\/\/\", 2) == 0) {\n+    \/\/ Skip the empty \"authority\" part\n+    uri += 2;\n+  }\n+\n+#ifdef _WINDOWS\n+  if (uri[0] == '\/') {\n+    \/\/ Absolute path name on Windows does not begin with a slash\n+    uri += 1;\n+  }\n+#endif\n+\n+  size_t path_index = 0;\n+  for (size_t i = 0; i < strlen(uri); ++i) {\n+    char decoded = decode_percent_encoded(uri, i);\n+    path[path_index++] = decoded;\n+  }\n+  path[path_index] = '\\0';\n+  return path;\n+}\n+\n@@ -1263,1 +1307,1 @@\n-    char* path = skip_uri_protocol(src);\n+    const char* path = ClassLoader::uri_to_path(src);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":46,"deletions":2,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -385,1 +385,1 @@\n-  static char* skip_uri_protocol(char* source);\n+  static char* uri_to_path(const char* uri);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,6 +103,4 @@\n-      char* path = m->location()->as_C_string();\n-      if (strncmp(path, \"file:\", 5) == 0) {\n-        path = ClassLoader::skip_uri_protocol(path);\n-        char* path_copy = NEW_RESOURCE_ARRAY(char, strlen(path) + 1);\n-        strcpy(path_copy, path);\n-        _module_paths->append(path_copy);\n+      char* uri = m->location()->as_C_string();\n+      if (strncmp(uri, \"file:\", 5) == 0) {\n+        char* path = ClassLoader::uri_to_path(uri);\n+        _module_paths->append(path);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -438,0 +438,1 @@\n+ -runtime\/cds\/appcds\/complexURI \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/* Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024 JetBrains s.r.o.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verifies that CDS works with jar located in directories\n+ *          with names that need escaping\n+ * @bug 8339460\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile mypackage\/Main.java mypackage\/Another.java\n+ * @run main\/othervm ComplexURITest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Platform;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class ComplexURITest {\n+    final static String moduleName = \"mymodule\";\n+\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"test.noclasspath\", \"true\");\n+        String jarFile = JarBuilder.build(moduleName, \"mypackage\/Main\", \"mypackage\/Another\");\n+\n+        Path subDir = Path.of(\".\", \"dir with space\");\n+        Files.createDirectory(subDir);\n+        Path newJarFilePath = subDir.resolve(moduleName + \".jar\");\n+        Files.move(Path.of(jarFile), newJarFilePath);\n+        jarFile = newJarFilePath.toString();\n+\n+        final String listFileName = \"test-classlist.txt\";\n+        final String staticArchiveName = \"test-static.jsa\";\n+        final String dynamicArchiveName = \"test-dynamic.jsa\";\n+\n+        \/\/ Verify static archive creation and use\n+        File fileList = new File(listFileName);\n+        delete(fileList.toPath());\n+        File staticArchive = new File(staticArchiveName);\n+        delete(staticArchive.toPath());\n+\n+        createClassList(jarFile, listFileName);\n+        if (!fileList.exists()) {\n+            throw new RuntimeException(\"No class list created at \" + fileList);\n+        }\n+\n+        createArchive(jarFile, listFileName, staticArchiveName);\n+        if (!staticArchive.exists()) {\n+            throw new RuntimeException(\"No shared classes archive created at \" + staticArchive);\n+        }\n+\n+        useArchive(jarFile, staticArchiveName);\n+\n+        \/\/ Verify dynamic archive creation and use\n+        File dynamicArchive = new File(dynamicArchiveName);\n+        delete(dynamicArchive.toPath());\n+\n+        createDynamicArchive(jarFile, dynamicArchiveName);\n+        if (!dynamicArchive.exists()) {\n+            throw new RuntimeException(\"No dynamic archive created at \" + dynamicArchive);\n+        }\n+\n+        testDynamicArchive(jarFile, dynamicArchiveName);\n+    }\n+\n+    private static void delete(Path path) throws Exception {\n+        if (Files.exists(path)) {\n+            if (Platform.isWindows()) {\n+                Files.setAttribute(path, \"dos:readonly\", false);\n+            }\n+            Files.delete(path);\n+        }\n+    }\n+\n+    private static void createClassList(String jarFile, String list) throws Exception {\n+        String[] launchArgs  = {\n+                \"-XX:DumpLoadedClassList=\" + list,\n+                \"--module-path\",\n+                jarFile,\n+                \"--module\",\n+                moduleName + \"\/mypackage.Main\"};\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(launchArgs);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, \"create-list\");\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    private static void createArchive(String jarFile, String list, String archive) throws Exception {\n+        String[] launchArgs  = {\n+                \"-Xshare:dump\",\n+                \"-XX:SharedClassListFile=\" + list,\n+                \"-XX:SharedArchiveFile=\" + archive,\n+                \"--module-path\",\n+                jarFile,\n+                \"--module\",\n+                moduleName + \"\/mypackage.Main\"};\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(launchArgs);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, \"dump-archive\");\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    private static void useArchive(String jarFile, String archive) throws Exception {\n+        String[] launchArgs  = {\n+                \"-Xshare:on\",\n+                \"-XX:SharedArchiveFile=\" + archive,\n+                \"--module-path\",\n+                jarFile,\n+                \"--module\",\n+                moduleName + \"\/mypackage.Main\"};\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(launchArgs);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, \"use-archive\");\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    private static void createDynamicArchive(String jarFile, String archive) throws Exception {\n+        String[] launchArgs  = {\n+                \"-XX:ArchiveClassesAtExit=\" + archive,\n+                \"--module-path\",\n+                jarFile,\n+                \"--module\",\n+                moduleName + \"\/mypackage.Main\"};\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(launchArgs);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, \"dynamic-archive\");\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    private static void testDynamicArchive(String jarFile, String archive) throws Exception {\n+        String[] launchArgs  = {\n+                \"-XX:SharedArchiveFile=\" + archive,\n+                \"-XX:+PrintSharedArchiveAndExit\",\n+                \"--module-path\",\n+                jarFile,\n+                \"--module\",\n+                moduleName + \"\/mypackage.Main\"};\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(launchArgs);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, \"dynamic-archive\");\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"archive is valid\");\n+        output.shouldContain(\": mypackage.Main app_loader\");\n+        output.shouldContain(\": mypackage.Another unregistered_loader\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/complexURI\/ComplexURITest.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/* Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024 JetBrains s.r.o.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package mypackage;\n+\n+public class Another {\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/complexURI\/mypackage\/Another.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/* Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024 JetBrains s.r.o.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package mypackage;\n+\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+public class Main {\n+    public static void main(String[] args) throws Exception {\n+        URL url1 = Main.class.getProtectionDomain().getCodeSource().getLocation();\n+        System.out.println(\"Will load Another from \" + url1);\n+        ClassLoader cl = URLClassLoader.newInstance(new URL[] { url1 }, null);\n+        var anotherClass = cl.loadClass(\"mypackage.Another\");\n+        System.out.println(\"Class \" + anotherClass + \" loaded successfully\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/complexURI\/mypackage\/Main.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}