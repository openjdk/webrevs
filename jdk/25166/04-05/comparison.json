{"files":[{"patch":"@@ -206,1 +206,2 @@\n-     * One plus the bitLength of this BigInteger. This is a stable variable.\n+     * One plus the bitLength of the magnitude of this BigInteger.\n+     * This is a stable variable.\n@@ -209,1 +210,1 @@\n-     * @see #bitLength()\n+     * @see #magBitLength()\n@@ -211,1 +212,1 @@\n-    private int bitLengthPlusOne;\n+    private int magBitLengthPlusOne;\n@@ -1757,3 +1758,2 @@\n-                    if ((long)bitLength(mag, mag.length) +\n-                        (long)bitLength(val.mag, val.mag.length) >\n-                        32L*MAX_MAG_LENGTH) {\n+                    if ((long) this.magBitLength() + val.magBitLength() >\n+                        (long) Integer.SIZE * MAX_MAG_LENGTH) {\n@@ -2272,1 +2272,1 @@\n-                    if (bitLength(mag, mag.length) > 16L*MAX_MAG_LENGTH) {\n+                    if (magBitLength() > (Integer.SIZE \/ 2) * MAX_MAG_LENGTH) {\n@@ -2641,1 +2641,1 @@\n-        \/\/ (bitLength(mag, mag.length) - 1L) * exponent + 1L > Integer.MAX_VALUE\n+        \/\/ (magBitLength() - 1L) * exponent + 1L > Integer.MAX_VALUE\n@@ -2825,2 +2825,1 @@\n-     * Calculate bitlength of contents of the first len elements an int array,\n-     * assuming there are no leading zero ints.\n+     * Calculate bitlength of the magnitude of this {@code BigInteger}.\n@@ -2828,2 +2827,8 @@\n-    private static int bitLength(int[] val, int len) {\n-        return len == 0 ? 0 : len * Integer.SIZE - Integer.numberOfLeadingZeros(val[0]);\n+    private int magBitLength() {\n+        int n = magBitLengthPlusOne - 1;\n+        if (n == -1) { \/\/ not initialized\n+            n = mag.length == 0 ? 0\n+                    : mag.length * Integer.SIZE - Integer.numberOfLeadingZeros(mag[0]);\n+            magBitLengthPlusOne = n + 1;\n+        }\n+        return n;\n@@ -3126,1 +3131,1 @@\n-        int ebits = bitLength(exp, exp.length);\n+        int ebits = y.magBitLength();\n@@ -3851,13 +3856,5 @@\n-        int n = bitLengthPlusOne - 1;\n-        if (n == -1) { \/\/ bitLength not initialized yet\n-            \/\/ Calculate the bit length of the magnitude\n-            n = bitLength(mag, mag.length);\n-            if (signum < 0\n-                    \/\/ Check if magnitude is a power of two\n-                    && Integer.lowestOneBit(mag[0]) == mag[0]\n-                    && numberOfTrailingZeroInts() == mag.length - 1) {\n-                n--;\n-            }\n-            bitLengthPlusOne = n + 1;\n-        }\n-        return n;\n+        return signum < 0\n+                \/\/ Check if magnitude is a power of two\n+                && Integer.lowestOneBit(mag[0]) == mag[0]\n+                && numberOfTrailingZeroInts() == mag.length - 1\n+            ? magBitLength() - 1 : magBitLength();\n@@ -4391,1 +4388,1 @@\n-        int exponent = bitLength(mag, mag.length) - 1;\n+        int exponent = magBitLength() - 1;\n@@ -4476,1 +4473,1 @@\n-        int exponent = bitLength(mag, mag.length) - 1;\n+        int exponent = magBitLength() - 1;\n@@ -5037,1 +5034,1 @@\n-        byte[] result = new byte[(bitLength(mag, mag.length) + 7) >>> 3];\n+        byte[] result = new byte[(magBitLength() + 7) >>> 3];\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"}]}