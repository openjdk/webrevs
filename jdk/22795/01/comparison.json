{"files":[{"patch":"@@ -70,4 +70,2 @@\n-  # These libs define DllMain which conflict with Hotspot\n-  BROKEN_STATIC_LIBS += awt dt_shmem dt_socket\n-  # These libs are dependent on any of the above disabled libs\n-  BROKEN_STATIC_LIBS += fontmanager jawt lcms net nio\n+  # dt_shmem define jdwpTransport_OnLoad which conflict with dt_socket\n+  BROKEN_STATIC_LIBS += dt_shmem\n","filename":"make\/StaticLibs.gmk","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -200,2 +200,2 @@\n-  $2LDFLAGS_STATIC_JDK=\"$BASIC_LDFLAGS $BASIC_LDFLAGS_JVM_ONLY \\\n-      $OS_LDFLAGS ${$2EXTRA_LDFLAGS} $REPRODUCIBLE_LDFLAGS $FILE_MACRO_LDFLAGS\"\n+  $2LDFLAGS_STATIC_JDK=\"$BASIC_LDFLAGS $OS_LDFLAGS ${$2EXTRA_LDFLAGS} \\\n+      $REPRODUCIBLE_LDFLAGS $FILE_MACRO_LDFLAGS\"\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -288,0 +288,2 @@\n+#define JVM_LIB_NAME \"jvm.dll\"\n+\n@@ -303,3 +305,4 @@\n-      \/\/ Found the full path to jvm.dll.\n-      \/\/ Now cut the path to <java_home>\/jre if we can.\n-      *(strrchr(home_dir, '\\\\')) = '\\0';  \/\/ get rid of \\jvm.dll\n+      \/\/ Found the full path to the binary. It is normally of this structure:\n+      \/\/   <jdk_path>\/bin\/<hotspot_variant>\/jvm.dll\n+      \/\/ but can also be like this for a statically linked binary:\n+      \/\/   <jdk_path>\/bin\/<executable>.exe\n@@ -308,1 +311,7 @@\n-        *pslash = '\\0';                   \/\/ get rid of \\{client|server}\n+        if (strncmp(pslash + 1, JVM_LIB_NAME, strlen(JVM_LIB_NAME)) == 0) {\n+          \/\/ Binary name is jvm.dll. Get rid of \\jvm.dll.\n+          *pslash = '\\0';\n+        }\n+\n+        \/\/ Get rid of \\hotspot_variant>, if binary is jvm.dll,\n+        \/\/ or cut off \\<executable>, if it is a statically linked binary.\n@@ -311,1 +320,6 @@\n-          *pslash = '\\0';                 \/\/ get rid of \\bin\n+          *pslash = '\\0';\n+          \/\/ Get rid of \\bin\n+          pslash = strrchr(home_dir, '\\\\');\n+          if (pslash != nullptr) {\n+            *pslash = '\\0';\n+          }\n@@ -1405,3 +1419,1 @@\n-  \/\/ This is needed only for static builds which are not supported on Windows\n-  ShouldNotReachHere();\n-  return nullptr; \/\/ Satisfy compiler\n+  return ::GetProcAddress(nullptr, name);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -158,0 +158,6 @@\n+    if (JLI_IsStaticallyLinked()) {\n+        \/\/ With static builds, all JDK and VM natives are statically linked\n+        \/\/ with the launcher executable. The 'jrepath', 'jvmpath' and\n+        \/\/ 'jvmcfg' are not used by the caller for static builds. Simply return.\n+        return;\n+    }\n@@ -225,0 +231,6 @@\n+        if (JLI_IsStaticallyLinked()) {\n+          \/\/ For statically linked builds, we rely on the system msvcrt dlls\n+          loaded = 1;\n+          return JNI_TRUE;\n+        }\n+\n@@ -368,4 +380,8 @@\n-    \/* Load the Java VM DLL *\/\n-    if ((handle = LoadLibrary(jvmpath)) == 0) {\n-        JLI_ReportErrorMessage(DLL_ERROR4, (char *)jvmpath);\n-        return JNI_FALSE;\n+    if (JLI_IsStaticallyLinked()) {\n+      handle = GetModuleHandle(NULL);\n+    } else {\n+        \/* Load the Java VM DLL *\/\n+        if ((handle = LoadLibrary(jvmpath)) == 0) {\n+            JLI_ReportErrorMessage(DLL_ERROR4, (char *)jvmpath);\n+            return JNI_FALSE;\n+        }\n@@ -784,1 +800,5 @@\n-       hJvm = GetModuleHandle(JVM_DLL);\n+       if (JLI_IsStaticallyLinked()) {\n+           hJvm = GetModuleHandle(NULL);\n+       } else {\n+           hJvm = GetModuleHandle(JVM_DLL);\n+       }\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,5 @@\n-        hDLL = ::GetModuleHandle(TEXT(\"mlib_image.dll\"));\n+        if (JVM_IsStaticallyLinked()) {\n+            hDLL = ::GetModuleHandle(NULL);\n+        } else {\n+            hDLL = ::GetModuleHandle(TEXT(\"mlib_image.dll\"));\n+        }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Mlib.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}