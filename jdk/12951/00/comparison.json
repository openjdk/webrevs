{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,1 +233,1 @@\n-    return static_cast<uint>(bm.get_next_one_offset(idx));\n+    return static_cast<uint>(bm.find_first_set_bit(idx));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,1 @@\n-  uint start = (uint) _active.get_next_one_offset(offset);\n+  uint start = (uint) _active.find_first_set_bit(offset);\n@@ -108,1 +108,1 @@\n-  uint end = (uint) _active.get_next_zero_offset(start);\n+  uint end = (uint) _active.find_first_clear_bit(start);\n@@ -119,1 +119,1 @@\n-  uint start = (uint) _active.get_next_zero_offset(offset);\n+  uint start = (uint) _active.find_first_clear_bit(offset);\n@@ -125,1 +125,1 @@\n-  uint end = (uint) _active.get_next_one_offset(start);\n+  uint end = (uint) _active.find_first_set_bit(start);\n@@ -133,1 +133,1 @@\n-  uint start = (uint) _inactive.get_next_one_offset(offset);\n+  uint start = (uint) _inactive.find_first_set_bit(offset);\n@@ -140,1 +140,1 @@\n-  uint end = (uint) _inactive.get_next_zero_offset(start);\n+  uint end = (uint) _inactive.find_first_clear_bit(start);\n@@ -235,1 +235,1 @@\n-  BitMap::idx_t first_inactive = _inactive.get_next_one_offset(0);\n+  BitMap::idx_t first_inactive = _inactive.find_first_set_bit(0);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  BitMap::idx_t offset = _bm.get_next_one_offset(addr_to_offset(mr.start()), end_offset);\n+  BitMap::idx_t offset = _bm.find_first_set_bit(addr_to_offset(mr.start()), end_offset);\n@@ -50,1 +50,1 @@\n-    offset = _bm.get_next_one_offset(offset + (obj_size >> _shifter), end_offset);\n+    offset = _bm.find_first_set_bit(offset + (obj_size >> _shifter), end_offset);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkBitMap.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  return _committed.get_next_zero_offset(start_page, end_page) >= end_page;\n+  return _committed.find_first_clear_bit(start_page, end_page) >= end_page;\n@@ -114,1 +114,1 @@\n-  return _committed.get_next_one_offset(start_page, end_page) >= end_page;\n+  return _committed.find_first_set_bit(start_page, end_page) >= end_page;\n@@ -191,1 +191,1 @@\n-    if (_dirty.get_next_one_offset(start_page, end_page) < end_page) {\n+    if (_dirty.find_first_set_bit(start_page, end_page) < end_page) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-    return _region_commit_map.get_next_zero_offset(start_idx, end) == end;\n+    return _region_commit_map.find_first_clear_bit(start_idx, end) == end;\n@@ -89,1 +89,1 @@\n-    return _region_commit_map.get_next_one_offset(start_idx, end) == end;\n+    return _region_commit_map.find_first_set_bit(start_idx, end) == end;\n@@ -149,1 +149,1 @@\n-    return _region_commit_map.get_next_one_offset(region, region_limit) != region_limit;\n+    return _region_commit_map.find_first_set_bit(region, region_limit) != region_limit;\n@@ -178,1 +178,1 @@\n-    assert(_region_commit_map.get_next_one_offset(start_idx, region_limit) == region_limit,\n+    assert(_region_commit_map.find_first_set_bit(start_idx, region_limit) == region_limit,\n@@ -231,1 +231,1 @@\n-    assert(_region_commit_map.get_next_zero_offset(start_idx, region_limit) == region_limit,\n+    assert(_region_commit_map.find_first_clear_bit(start_idx, region_limit) == region_limit,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  const idx_t end_bit = _end_bits.get_next_one_offset(beg_bit, size());\n+  const idx_t end_bit = _end_bits.find_first_set_bit(beg_bit, size());\n@@ -168,1 +168,1 @@\n-  return _beg_bits.get_next_one_offset_aligned_right(beg, end);\n+  return _beg_bits.find_first_set_bit_aligned_right(beg, end);\n@@ -172,1 +172,1 @@\n-  return _end_bits.get_next_one_offset_aligned_right(beg, end);\n+  return _end_bits.find_first_set_bit_aligned_right(beg, end);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  size_t const nextOffset = _bm.get_next_one_offset(addr_offset, limit_offset);\n+  size_t const nextOffset = _bm.find_first_set_bit(addr_offset, limit_offset);\n","filename":"src\/hotspot\/share\/gc\/shared\/markBitMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -693,2 +693,2 @@\n-  size_t beg_off = _mutator_free_bitmap.get_next_one_offset(0);\n-  size_t end_off = _mutator_free_bitmap.get_next_one_offset(_mutator_rightmost + 1);\n+  size_t beg_off = _mutator_free_bitmap.find_first_set_bit(0);\n+  size_t end_off = _mutator_free_bitmap.find_first_set_bit(_mutator_rightmost + 1);\n@@ -704,2 +704,2 @@\n-  beg_off = _collector_free_bitmap.get_next_one_offset(0);\n-  end_off = _collector_free_bitmap.get_next_one_offset(_collector_rightmost + 1);\n+  beg_off = _collector_free_bitmap.find_first_set_bit(0);\n+  end_off = _collector_free_bitmap.find_first_set_bit(_collector_rightmost + 1);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-  return segment_live_bits().get_next_one_offset(0, nsegments);\n+  return segment_live_bits().find_first_set_bit(0, nsegments);\n@@ -88,1 +88,1 @@\n-  return segment_live_bits().get_next_one_offset(segment + 1, nsegments);\n+  return segment_live_bits().find_first_set_bit(segment + 1, nsegments);\n@@ -141,1 +141,1 @@\n-  BitMap::idx_t index = _bitmap.get_next_one_offset(start_index, end_index);\n+  BitMap::idx_t index = _bitmap.find_first_set_bit(start_index, end_index);\n@@ -162,1 +162,1 @@\n-    index = _bitmap.get_next_one_offset(next_index, end_index);\n+    index = _bitmap.find_first_set_bit(next_index, end_index);\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  \/\/ Helper for get_next_{zero,one}_bit variants.\n+  \/\/ Helper for find_first_{set,clear}_bit variants.\n@@ -102,1 +102,1 @@\n-  inline idx_t get_next_bit_impl(idx_t beg, idx_t end) const;\n+  inline idx_t find_first_bit_impl(idx_t beg, idx_t end) const;\n@@ -104,1 +104,1 @@\n-  \/\/ Values for get_next_bit_impl flip parameter.\n+  \/\/ Values for find_first_bit_impl flip parameter.\n@@ -293,2 +293,2 @@\n-  idx_t get_next_one_offset (idx_t beg, idx_t end) const;\n-  idx_t get_next_zero_offset(idx_t beg, idx_t end) const;\n+  idx_t find_first_set_bit(idx_t beg, idx_t end) const;\n+  idx_t find_first_clear_bit(idx_t beg, idx_t end) const;\n@@ -296,2 +296,2 @@\n-  idx_t get_next_one_offset(idx_t beg) const {\n-    return get_next_one_offset(beg, size());\n+  idx_t find_first_set_bit(idx_t beg) const {\n+    return find_first_set_bit(beg, size());\n@@ -299,2 +299,2 @@\n-  idx_t get_next_zero_offset(idx_t beg) const {\n-    return get_next_zero_offset(beg, size());\n+  idx_t find_first_clear_bit(idx_t beg) const {\n+    return find_first_clear_bit(beg, size());\n@@ -303,1 +303,1 @@\n-  \/\/ Like \"get_next_one_offset\", except requires that \"end\" is\n+  \/\/ Like \"find_first_set_bit\", except requires that \"end\" is\n@@ -305,1 +305,1 @@\n-  idx_t get_next_one_offset_aligned_right(idx_t beg, idx_t end) const;\n+  idx_t find_first_set_bit_aligned_right(idx_t beg, idx_t end) const;\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-inline BitMap::idx_t BitMap::get_next_bit_impl(idx_t beg, idx_t end) const {\n+inline BitMap::idx_t BitMap::find_first_bit_impl(idx_t beg, idx_t end) const {\n@@ -232,2 +232,2 @@\n-BitMap::get_next_one_offset(idx_t beg, idx_t end) const {\n-  return get_next_bit_impl<find_ones_flip, false>(beg, end);\n+BitMap::find_first_set_bit(idx_t beg, idx_t end) const {\n+  return find_first_bit_impl<find_ones_flip, false>(beg, end);\n@@ -237,2 +237,2 @@\n-BitMap::get_next_zero_offset(idx_t beg, idx_t end) const {\n-  return get_next_bit_impl<find_zeros_flip, false>(beg, end);\n+BitMap::find_first_clear_bit(idx_t beg, idx_t end) const {\n+  return find_first_bit_impl<find_zeros_flip, false>(beg, end);\n@@ -242,2 +242,2 @@\n-BitMap::get_next_one_offset_aligned_right(idx_t beg, idx_t end) const {\n-  return get_next_bit_impl<find_ones_flip, true>(beg, end);\n+BitMap::find_first_set_bit_aligned_right(idx_t beg, idx_t end) const {\n+  return find_first_bit_impl<find_ones_flip, true>(beg, end);\n@@ -274,1 +274,1 @@\n-    index = get_next_one_offset(index, end);\n+    index = find_first_set_bit(index, end);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,4 +115,4 @@\n-  \/\/ Test get_next_one_offset with full range of map.\n-  EXPECT_EQ(left, test_ones.get_next_one_offset(0));\n-  EXPECT_EQ(right, test_ones.get_next_one_offset(left + 1));\n-  EXPECT_EQ(BITMAP_SIZE, test_ones.get_next_one_offset(right + 1));\n+  \/\/ Test find_first_set_bit with full range of map.\n+  EXPECT_EQ(left, test_ones.find_first_set_bit(0));\n+  EXPECT_EQ(right, test_ones.find_first_set_bit(left + 1));\n+  EXPECT_EQ(BITMAP_SIZE, test_ones.find_first_set_bit(right + 1));\n@@ -120,4 +120,4 @@\n-  \/\/ Test get_next_one_offset_aligned_right with full range of map.\n-  EXPECT_EQ(left, test_ones.get_next_one_offset_aligned_right(0, BITMAP_SIZE));\n-  EXPECT_EQ(right, test_ones.get_next_one_offset_aligned_right(left + 1, BITMAP_SIZE));\n-  EXPECT_EQ(BITMAP_SIZE, test_ones.get_next_one_offset_aligned_right(right + 1, BITMAP_SIZE));\n+  \/\/ Test find_first_set_bit_aligned_right with full range of map.\n+  EXPECT_EQ(left, test_ones.find_first_set_bit_aligned_right(0, BITMAP_SIZE));\n+  EXPECT_EQ(right, test_ones.find_first_set_bit_aligned_right(left + 1, BITMAP_SIZE));\n+  EXPECT_EQ(BITMAP_SIZE, test_ones.find_first_set_bit_aligned_right(right + 1, BITMAP_SIZE));\n@@ -125,4 +125,4 @@\n-  \/\/ Test get_next_zero_offset with full range of map.\n-  EXPECT_EQ(left, test_zeros.get_next_zero_offset(0));\n-  EXPECT_EQ(right, test_zeros.get_next_zero_offset(left + 1));\n-  EXPECT_EQ(BITMAP_SIZE, test_zeros.get_next_zero_offset(right + 1));\n+  \/\/ Test find_first_clear_bit with full range of map.\n+  EXPECT_EQ(left, test_zeros.find_first_clear_bit(0));\n+  EXPECT_EQ(right, test_zeros.find_first_clear_bit(left + 1));\n+  EXPECT_EQ(BITMAP_SIZE, test_zeros.find_first_clear_bit(right + 1));\n@@ -173,2 +173,2 @@\n-          EXPECT_EQ(expected, test_ones.get_next_one_offset(start, end));\n-          EXPECT_EQ(expected, test_zeros.get_next_zero_offset(start, end));\n+          EXPECT_EQ(expected, test_ones.find_first_set_bit(start, end));\n+          EXPECT_EQ(expected, test_zeros.find_first_clear_bit(start, end));\n@@ -178,1 +178,1 @@\n-              test_ones.get_next_one_offset_aligned_right(start, end));\n+              test_ones.find_first_set_bit_aligned_right(start, end));\n@@ -184,2 +184,2 @@\n-          EXPECT_EQ(expected2, test_ones.get_next_one_offset(start2, end));\n-          EXPECT_EQ(expected2, test_zeros.get_next_zero_offset(start2, end));\n+          EXPECT_EQ(expected2, test_ones.find_first_set_bit(start2, end));\n+          EXPECT_EQ(expected2, test_zeros.find_first_clear_bit(start2, end));\n@@ -189,1 +189,1 @@\n-              test_ones.get_next_one_offset_aligned_right(start2, end));\n+              test_ones.find_first_set_bit_aligned_right(start2, end));\n@@ -207,2 +207,2 @@\n-  EXPECT_EQ(BITMAP_SIZE, test_ones.get_next_one_offset(0));\n-  EXPECT_EQ(BITMAP_SIZE, test_zeros.get_next_zero_offset(0));\n+  EXPECT_EQ(BITMAP_SIZE, test_ones.find_first_set_bit(0));\n+  EXPECT_EQ(BITMAP_SIZE, test_zeros.find_first_clear_bit(0));\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_search.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"}]}