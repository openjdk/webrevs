{"files":[{"patch":"@@ -166,1 +166,1 @@\n-                InnerClassesAttribute innerClasses = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+                InnerClassesAttribute innerClasses = cf.findAttribute(Attributes.innerClasses()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/7003595\/T7003595.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                CodeAttribute code = method.findAttribute(Attributes.CODE).orElse(null);\n+                CodeAttribute code = method.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/8009170\/RedundantByteCodeInArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        InnerClassesAttribute inners = classFile.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+        InnerClassesAttribute inners = classFile.findAttribute(Attributes.innerClasses()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/AnonymousClass\/AnonymousClassFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-        classFile.findAttribute(Attributes.INNER_CLASSES).ifPresent(this::visitInnerClasses);\n+        classFile.findAttribute(Attributes.innerClasses()).ifPresent(this::visitInnerClasses);\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/ClassFileVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-        MethodParametersAttribute attribute = method.findAttribute(Attributes.METHOD_PARAMETERS).orElse(null);\n+        MethodParametersAttribute attribute = method.findAttribute(Attributes.methodParameters()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LegacyOutputTest\/LegacyOutputTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,2 +178,2 @@\n-        MethodParametersAttribute mpattr = baz.methods().get(0).findAttribute(Attributes.METHOD_PARAMETERS).orElse(null);\n-        CodeAttribute cattr = baz.methods().get(0).findAttribute(Attributes.CODE).orElse(null);;\n+        MethodParametersAttribute mpattr = baz.methods().get(0).findAttribute(Attributes.methodParameters()).orElse(null);\n+        CodeAttribute cattr = baz.methods().get(0).findAttribute(Attributes.code()).orElse(null);;\n","filename":"test\/langtools\/tools\/javac\/MethodParametersTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-        MethodParametersAttribute methodParameters = method.findAttribute(Attributes.METHOD_PARAMETERS).orElseThrow();\n+        MethodParametersAttribute methodParameters = method.findAttribute(Attributes.methodParameters()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/RequiredParameterFlags\/ImplicitParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute code = method.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypeSignatures.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute code = method.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/access\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                Assert.checkNonNull(method.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS),\n+                Assert.checkNonNull(method.findAttribute(Attributes.runtimeVisibleAnnotations()),\n@@ -68,1 +68,1 @@\n-                Assert.checkNonNull(method.findAttribute(Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),\n+                Assert.checkNonNull(method.findAttribute(Attributes.runtimeVisibleParameterAnnotations()),\n","filename":"test\/langtools\/tools\/javac\/T6695379\/AnnotationsAreNotCopiedToBridgeMethodsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,2 +97,2 @@\n-                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n-                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                CodeAttribute code = m.findAttribute(Attributes.code()).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.lineNumberTable()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T6970173\/DebugPointerAtBadPositionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -104,2 +104,2 @@\n-                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n-                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                CodeAttribute code = m.findAttribute(Attributes.code()).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.lineNumberTable()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T7008643\/InlinedFinallyConfuseDebuggersTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        CodeAttribute ea = m.findAttribute(Attributes.CODE).orElseThrow();\n+        CodeAttribute ea = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T7053059\/DoubleCastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-            CodeAttribute code = test_method.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute code = test_method.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/T7093325.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        InnerClassesAttribute innerClasses = classFile.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+        InnerClassesAttribute innerClasses = classFile.findAttribute(Attributes.innerClasses()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/T7165659\/InnerClassAttrMustNotHaveStrictFPFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,2 +166,2 @@\n-                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n-                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                CodeAttribute code = method.findAttribute(Attributes.code()).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.lineNumberTable()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T8019486\/WrongLNTForLambdaTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-                CodeAttribute codeAtt = method.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute codeAtt = method.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T8022186\/DeadCodeGeneratedForEmptyTryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-                    CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n+                    CodeAttribute code = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T8024039\/NoDeadCodeGenerationOnTrySmtTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            CodeAttribute code = method.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute code = method.findAttribute(Attributes.code()).orElse(null);\n@@ -57,1 +57,1 @@\n-                if (code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElse(null) != null) {\n+                if (code.findAttribute(Attributes.localVariableTable()).orElse(null) != null) {\n","filename":"test\/langtools\/tools\/javac\/T8028504\/DontGenerateLVTForGNoneOpTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n-                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                CodeAttribute code = m.findAttribute(Attributes.code()).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.lineNumberTable()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T8180141\/MissingLNTEntryForBreakContinueTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,2 +91,2 @@\n-                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n-                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                CodeAttribute code = m.findAttribute(Attributes.code()).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.lineNumberTable()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/T8180660\/MissingLNTEntryForFinalizerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-                CodeAttribute codeAttr = method.findAttribute(Attributes.CODE).orElse(null);\n+                CodeAttribute codeAttr = method.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/T8210435\/NoLocalsMustBeReservedForDCEedVarsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n@@ -219,1 +219,1 @@\n-            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.bootstrapMethods()).orElseThrow();\n@@ -254,1 +254,1 @@\n-            LineNumberTableAttribute lnt = ea.findAttribute(Attributes.LINE_NUMBER_TABLE).orElse(null);\n+            LineNumberTableAttribute lnt = ea.findAttribute(Attributes.lineNumberTable()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/T8222949\/TestConstantDynamic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrSimpleClose.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                    var paAnnos = mm.findAttribute(Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS).orElseThrow().parameterAnnotations();\n+                    var paAnnos = mm.findAttribute(Attributes.runtimeVisibleParameterAnnotations()).orElseThrow().parameterAnnotations();\n@@ -73,1 +73,1 @@\n-                    var annos = mm.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElseThrow().annotations();\n+                    var annos = mm.findAttribute(Attributes.runtimeVisibleAnnotations()).orElseThrow().annotations();\n@@ -80,1 +80,1 @@\n-                var annos = fm.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElseThrow().annotations();\n+                var annos = fm.findAttribute(Attributes.runtimeVisibleAnnotations()).orElseThrow().annotations();\n","filename":"test\/langtools\/tools\/javac\/annotations\/ApplicableAnnotationsOnRecords.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -200,2 +200,2 @@\n-        findAnnotations(cm, m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n-        findAnnotations(cm, m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(cm, m, Attributes.runtimeVisibleTypeAnnotations(), annos);\n+        findAnnotations(cm, m, Attributes.runtimeInvisibleTypeAnnotations(), annos);\n@@ -208,1 +208,1 @@\n-            CodeAttribute cattr = m.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute cattr = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsPositionsOnRecords.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,2 +113,2 @@\n-        findAnnotations(cf, m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n-        findAnnotations(cf, m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(cf, m, Attributes.runtimeVisibleTypeAnnotations(), annos);\n+        findAnnotations(cf, m, Attributes.runtimeInvisibleTypeAnnotations(), annos);\n@@ -121,1 +121,1 @@\n-            CodeAttribute cattr = m.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute cattr = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/VariablesDeclaredWithVarTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-                cm.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n+                cm.findAttribute(Attributes.runtimeVisibleTypeAnnotations()).orElse(null);\n@@ -118,1 +118,1 @@\n-        CodeAttribute cAttr = method.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute cAttr = method.findAttribute(Attributes.code()).orElse(null);\n@@ -129,1 +129,1 @@\n-        CodeAttribute cAttr = method.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute cAttr = method.findAttribute(Attributes.code()).orElse(null);\n@@ -144,1 +144,1 @@\n-            CodeAttribute cAttr = method.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute cAttr = method.findAttribute(Attributes.code()).orElse(null);\n@@ -155,1 +155,1 @@\n-                    cm.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n+                    cm.findAttribute(Attributes.runtimeVisibleTypeAnnotations()).orElse(null);\n@@ -171,1 +171,1 @@\n-        CodeAttribute cAttr1 = method.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute cAttr1 = method.findAttribute(Attributes.code()).orElse(null);\n@@ -178,1 +178,1 @@\n-        CodeAttribute cAttr2 = method.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute cAttr2 = method.findAttribute(Attributes.code()).orElse(null);\n@@ -187,1 +187,1 @@\n-        if (method.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null) != null) {\n+        if (method.findAttribute(Attributes.runtimeVisibleTypeAnnotations()).orElse(null) != null) {\n@@ -191,1 +191,1 @@\n-        CodeAttribute code = method.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute code = method.findAttribute(Attributes.code()).orElse(null);\n@@ -194,1 +194,1 @@\n-                code.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n+                code.findAttribute(Attributes.runtimeVisibleTypeAnnotations()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/AnonymousClassTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -91,4 +91,4 @@\n-        test(m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, local);\n-        test(m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, local);\n-        test(m, Attributes.RUNTIME_VISIBLE_ANNOTATIONS, local);\n-        test(m, Attributes.RUNTIME_INVISIBLE_ANNOTATIONS, local);\n+        test(m, Attributes.runtimeVisibleTypeAnnotations(), local);\n+        test(m, Attributes.runtimeInvisibleTypeAnnotations(), local);\n+        test(m, Attributes.runtimeVisibleAnnotations(), local);\n+        test(m, Attributes.runtimeInvisibleAnnotations(), local);\n@@ -167,1 +167,1 @@\n-            cAttr = m.findAttribute(Attributes.CODE).orElse(null);\n+            cAttr = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/ClassfileTestHelper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,2 +74,2 @@\n-        testDecl(m, Attributes.RUNTIME_VISIBLE_ANNOTATIONS);\n-        testDecl(m, Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n+        testDecl(m, Attributes.runtimeVisibleAnnotations());\n+        testDecl(m, Attributes.runtimeInvisibleAnnotations());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NoTargetAnnotations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,4 +66,4 @@\n-            Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS,\n-            Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS,\n-            Attributes.RUNTIME_VISIBLE_ANNOTATIONS,\n-            Attributes.RUNTIME_INVISIBLE_ANNOTATIONS\n+            Attributes.runtimeVisibleTypeAnnotations(),\n+            Attributes.runtimeInvisibleTypeAnnotations(),\n+            Attributes.runtimeVisibleAnnotations(),\n+            Attributes.runtimeInvisibleAnnotations()\n@@ -178,1 +178,1 @@\n-                CAttr = m.findAttribute(Attributes.CODE).orElse(null);\n+                CAttr = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestAnonInnerClasses.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-                    cAttr = mm.findAttribute(Attributes.CODE).orElse(null);\n+                    cAttr = mm.findAttribute(Attributes.code()).orElse(null);\n@@ -102,1 +102,1 @@\n-                    cAttr = fm.findAttribute(Attributes.CODE).orElse(null);\n+                    cAttr = fm.findAttribute(Attributes.code()).orElse(null);\n@@ -210,1 +210,1 @@\n-                    test(clazz, fm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, false);\n+                    test(clazz, fm, Attributes.runtimeVisibleTypeAnnotations(), false);\n@@ -212,1 +212,1 @@\n-                    test(clazz, mm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, false);\n+                    test(clazz, mm, Attributes.runtimeVisibleTypeAnnotations(), false);\n@@ -215,1 +215,1 @@\n-                    test(clazz, fm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, true);\n+                    test(clazz, fm, Attributes.runtimeVisibleTypeAnnotations(), true);\n@@ -217,1 +217,1 @@\n-                    test(clazz, mm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, true);\n+                    test(clazz, mm, Attributes.runtimeVisibleTypeAnnotations(), true);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestNewCastArray.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        CodeAttribute cattr = f.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute cattr = f.findAttribute(Attributes.code()).orElse(null);\n@@ -63,1 +63,1 @@\n-        RuntimeVisibleTypeAnnotationsAttribute attr = cattr.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n+        RuntimeVisibleTypeAnnotationsAttribute attr = cattr.findAttribute(Attributes.runtimeVisibleTypeAnnotations()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TypeAnnotationPropagationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-        findAnnotations(cm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n-        findAnnotations(cm, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(cm, Attributes.runtimeVisibleTypeAnnotations(), annos);\n+        findAnnotations(cm, Attributes.runtimeInvisibleTypeAnnotations(), annos);\n@@ -52,2 +52,2 @@\n-        findAnnotations(ae, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n-        findAnnotations(ae, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(ae, Attributes.runtimeVisibleTypeAnnotations(), annos);\n+        findAnnotations(ae, Attributes.runtimeInvisibleTypeAnnotations(), annos);\n@@ -81,1 +81,1 @@\n-            CodeAttribute cAttr = mm.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute cAttr = mm.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ReferenceInfoUtil.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-                CodeAttribute code_attribute = method.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute code_attribute = method.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/cast\/intersection\/DuplicatedCheckcastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                EnclosingMethodAttribute encl = cf.findAttribute(Attributes.ENCLOSING_METHOD).orElse(null);\n+                EnclosingMethodAttribute encl = cf.findAttribute(Attributes.enclosingMethod()).orElse(null);\n@@ -57,1 +57,1 @@\n-            InnerClassesAttribute attr = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+            InnerClassesAttribute attr = cf.findAttribute(Attributes.innerClasses()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/InnerClasses\/SyntheticClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-                        method.findAttribute(Attributes.ANNOTATION_DEFAULT).orElse(null);\n+                        method.findAttribute(Attributes.annotationDefault()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-                EnclosingMethodAttribute attr = classFile.findAttribute(Attributes.ENCLOSING_METHOD).orElse(null);\n+                EnclosingMethodAttribute attr = classFile.findAttribute(Attributes.enclosingMethod()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/EnclosingMethod\/EnclosingMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                        CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n+                        CodeAttribute code_attribute = m.findAttribute(Attributes.code()).orElse(null);\n@@ -79,1 +79,1 @@\n-                                countAttributes(Attributes.LINE_NUMBER_TABLE, code_attribute),\n+                                countAttributes(Attributes.lineNumberTable(), code_attribute),\n@@ -83,1 +83,1 @@\n-                        LineNumberTableAttribute tableAttribute = code_attribute.findAttribute(Attributes.LINE_NUMBER_TABLE).orElse(null);\n+                        LineNumberTableAttribute tableAttribute = code_attribute.findAttribute(Attributes.lineNumberTable()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.code()).orElse(null);\n@@ -30,1 +30,1 @@\n-                    if (Attributes.LINE_NUMBER_TABLE.equals(at)) {\n+                    if (Attributes.lineNumberTable().equals(at)) {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/T8050993.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        ModuleAttribute moduleAttribute = classFile.findAttribute(Attributes.MODULE).orElse(null);\n+        ModuleAttribute moduleAttribute = classFile.findAttribute(Attributes.module()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-                            () -> classFile.findAttribute(Attributes.SIGNATURE).orElse(null),\n+                            () -> classFile.findAttribute(Attributes.signature()).orElse(null),\n@@ -176,1 +176,1 @@\n-                    () -> method.findAttribute(Attributes.SIGNATURE).orElse(null),\n+                    () -> method.findAttribute(Attributes.signature()).orElse(null),\n@@ -207,1 +207,1 @@\n-                    () -> field.findAttribute(Attributes.SIGNATURE).orElse(null),\n+                    () -> field.findAttribute(Attributes.signature()).orElse(null),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/Driver.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                ClassFile.of().parse(getClassFile(NoSourceFileAttribute.class).toPath()).findAttribute(Attributes.SOURCE_FILE).orElse(null),\n+                ClassFile.of().parse(getClassFile(NoSourceFileAttribute.class).toPath()).findAttribute(Attributes.sourceFile()).orElse(null),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/NoSourceFileAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        assertEquals(attribute.attributeName(), Attributes.SOURCE_FILE.name(), \"Incorrect attribute name\");\n+        assertEquals(attribute.attributeName(), Attributes.sourceFile().name(), \"Incorrect attribute name\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SourceFileTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-                        () -> classFile.findAttribute(Attributes.SYNTHETIC).orElse(null),\n+                        () -> classFile.findAttribute(Attributes.synthetic()).orElse(null),\n@@ -139,1 +139,1 @@\n-                            () -> method.findAttribute(Attributes.SYNTHETIC).orElse(null),\n+                            () -> method.findAttribute(Attributes.synthetic()).orElse(null),\n@@ -165,1 +165,1 @@\n-                            () -> field.findAttribute(Attributes.SYNTHETIC).orElse(null),\n+                            () -> field.findAttribute(Attributes.synthetic()).orElse(null),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/SyntheticTestDriver.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n+                Attributes.runtimeInvisibleAnnotations());\n@@ -103,1 +103,1 @@\n-                Attributes.RUNTIME_VISIBLE_ANNOTATIONS);\n+                Attributes.runtimeVisibleAnnotations());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsTestBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                Attributes.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);\n+                Attributes.runtimeInvisibleParameterAnnotations());\n@@ -75,1 +75,1 @@\n-                Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);\n+                Attributes.runtimeVisibleParameterAnnotations());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsTestBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-            DeprecatedAttribute attr = cf.findAttribute(Attributes.DEPRECATED).orElse(null);\n+            DeprecatedAttribute attr = cf.findAttribute(Attributes.deprecated()).orElse(null);\n@@ -256,1 +256,1 @@\n-        InnerClassesAttribute innerAttr = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+        InnerClassesAttribute innerAttr = cf.findAttribute(Attributes.innerClasses()).orElse(null);\n@@ -262,1 +262,1 @@\n-            DeprecatedAttribute attr = innerCf.findAttribute(Attributes.DEPRECATED).orElse(null);\n+            DeprecatedAttribute attr = innerCf.findAttribute(Attributes.deprecated()).orElse(null);\n@@ -277,1 +277,1 @@\n-            DeprecatedAttribute attr = m.findAttribute(Attributes.DEPRECATED).orElse(null);\n+            DeprecatedAttribute attr = m.findAttribute(Attributes.deprecated()).orElse(null);\n@@ -286,1 +286,1 @@\n-            DeprecatedAttribute attr = f.findAttribute(Attributes.DEPRECATED).orElse(null);\n+            DeprecatedAttribute attr = f.findAttribute(Attributes.deprecated()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-                InnerClassesAttribute attr = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+                InnerClassesAttribute attr = cf.findAttribute(Attributes.innerClasses()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesHierarchyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-            InnerClassesAttribute attr = classFile.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+            InnerClassesAttribute attr = classFile.findAttribute(Attributes.innerClasses()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesIndexTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-            InnerClassesAttribute innerClasses = cm.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+            InnerClassesAttribute innerClasses = cm.findAttribute(Attributes.innerClasses()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-        BootstrapMethodsAttribute bootAttr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+        BootstrapMethodsAttribute bootAttr = cf.findAttribute(Attributes.bootstrapMethods()).orElseThrow();\n@@ -173,1 +173,1 @@\n-        CodeAttribute codeAttr = cf.methods().get(1).findAttribute(Attributes.CODE).orElseThrow();\n+        CodeAttribute codeAttr = cf.methods().get(1).findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/classwriter\/IndyCorrectInvocationName.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        CodeAttribute codeAttr = cf.methods().get(1).findAttribute(Attributes.CODE).orElseThrow();\n+        CodeAttribute codeAttr = cf.methods().get(1).findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/code\/CharImmediateValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                codeAttr = m.findAttribute(Attributes.CODE).orElse(null);\n+                codeAttr = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/TestDefaultBody.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/super\/TestDirectSuperInterfaceInvoke.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/expression\/_super\/NonDirectSuper\/NonDirectSuper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-        SourceFileAttribute sf = cf.findAttribute(Attributes.SOURCE_FILE).orElseThrow();\n+        SourceFileAttribute sf = cf.findAttribute(Attributes.sourceFile()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,2 +141,2 @@\n-        CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n-        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElseThrow();\n+        CodeAttribute code = method.findAttribute(Attributes.code()).orElseThrow();\n+        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.localVariableTable()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/flow\/LVTHarness.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -426,1 +426,1 @@\n-            BootstrapMethodsAttribute bsmAttr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElse(null);\n+            BootstrapMethodsAttribute bsmAttr = cf.findAttribute(Attributes.bootstrapMethods()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/lambda\/ByteCodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        CodeAttribute code = m.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute code = m.findAttribute(Attributes.code()).orElse(null);\n@@ -99,1 +99,1 @@\n-        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElse(null);\n+        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.localVariableTable()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/lambda\/LocalVariableTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.bootstrapMethods()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestBootstrapMethodsCount.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n@@ -292,1 +292,1 @@\n-                    .findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+                    .findAttribute(Attributes.bootstrapMethods()).orElseThrow();\n@@ -340,1 +340,1 @@\n-            LineNumberTableAttribute lnt = ea.findAttribute(Attributes.LINE_NUMBER_TABLE).orElse(null);\n+            LineNumberTableAttribute lnt = ea.findAttribute(Attributes.lineNumberTable()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestInvokeDynamic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n@@ -246,1 +246,1 @@\n-            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.bootstrapMethods()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n@@ -248,1 +248,1 @@\n-            BootstrapMethodsAttribute bsm_attr = cm.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            BootstrapMethodsAttribute bsm_attr = cm.findAttribute(Attributes.bootstrapMethods()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecodeTargetRelease14.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-            BootstrapMethodsAttribute bsm = cm.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            BootstrapMethodsAttribute bsm = cm.findAttribute(Attributes.bootstrapMethods()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/ConditionalLineNumberTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/FinallyLineNumberTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NestedLineNumberTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElseThrow();\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NullCheckLineNumberTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/meth\/TestCP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElse(null);\n+        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.runtimeVisibleAnnotations()).orElse(null);\n@@ -143,1 +143,1 @@\n-        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElse(null);\n+        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.runtimeVisibleAnnotations()).orElse(null);\n@@ -149,1 +149,1 @@\n-        if (cf.findAttribute(Attributes.DEPRECATED).isPresent()) {\n+        if (cf.findAttribute(Attributes.deprecated()).isPresent()) {\n@@ -194,1 +194,1 @@\n-        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElse(null);\n+        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.runtimeVisibleAnnotations()).orElse(null);\n@@ -317,1 +317,1 @@\n-        RuntimeInvisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS).orElse(null);\n+        RuntimeInvisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.runtimeInvisibleAnnotations()).orElse(null);\n@@ -359,1 +359,1 @@\n-        RuntimeInvisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS).orElse(null);\n+        RuntimeInvisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.runtimeInvisibleAnnotations()).orElse(null);\n@@ -434,1 +434,1 @@\n-        RuntimeInvisibleAnnotationsAttribute invisibleAnnotations = cf.findAttribute(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS).orElse(null);\n+        RuntimeInvisibleAnnotationsAttribute invisibleAnnotations = cf.findAttribute(Attributes.runtimeInvisibleAnnotations()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-        ModuleAttribute modAttr1 = cm1.findAttribute(Attributes.MODULE).orElseThrow();\n+        ModuleAttribute modAttr1 = cm1.findAttribute(Attributes.module()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        ModuleAttribute moduleAttribute = cm.findAttribute(Attributes.MODULE).orElse(null);\n+        ModuleAttribute moduleAttribute = cm.findAttribute(Attributes.module()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/modules\/ModuleVersion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-        ModuleAttribute module = cm.findAttribute(Attributes.MODULE).orElseThrow();\n+        ModuleAttribute module = cm.findAttribute(Attributes.module()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/modules\/OpenModulesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-            CodeAttribute code = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute code = testMethod.findAttribute(Attributes.code()).orElse(null);\n@@ -77,1 +77,1 @@\n-            LocalVariableTypeTableAttribute lvt_table = code.findAttribute(Attributes.LOCAL_VARIABLE_TYPE_TABLE).orElse(null);\n+            LocalVariableTypeTableAttribute lvt_table = code.findAttribute(Attributes.localVariableTypeTable()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/multicatch\/7005371\/T7005371.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/multicatch\/Pos05.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n-                RuntimeInvisibleTypeAnnotationsAttribute annotations = codeAttr.findAttribute(Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS).orElseThrow();\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.code()).orElseThrow();\n+                RuntimeInvisibleTypeAnnotationsAttribute annotations = codeAttr.findAttribute(Attributes.runtimeInvisibleTypeAnnotations()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/patterns\/Annotations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        CodeAttribute code = m.findAttribute(Attributes.CODE).orElse(null);\n+        CodeAttribute code = m.findAttribute(Attributes.code()).orElse(null);\n@@ -96,1 +96,1 @@\n-        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElse(null);\n+        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.localVariableTable()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/patterns\/LocalVariableTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-        CodeAttribute code_attribute = testMethod.findAttribute(Attributes.CODE).orElseThrow();\n+        CodeAttribute code_attribute = testMethod.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedPatternVariablesBytecode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+        CodeAttribute code = method.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/patterns\/NoUnnecessaryCast.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        ModuleAttribute module = cf.findAttribute(Attributes.MODULE).orElseThrow();\n+        ModuleAttribute module = cf.findAttribute(Attributes.module()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestOrigin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1323,1 +1323,1 @@\n-                        CodeAttribute code_attribute = method.findAttribute(Attributes.CODE).orElseThrow();\n+                        CodeAttribute code_attribute = method.findAttribute(Attributes.code()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-        RuntimeVisibleAnnotationsAttribute annotations = attributedElement.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElseThrow();\n+        RuntimeVisibleAnnotationsAttribute annotations = attributedElement.findAttribute(Attributes.runtimeVisibleAnnotations()).orElseThrow();\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/RecordComponentTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        PermittedSubclassesAttribute permittedSubclasses = sealedCF.findAttribute(Attributes.PERMITTED_SUBCLASSES).orElseThrow();\n+        PermittedSubclassesAttribute permittedSubclasses = sealedCF.findAttribute(Attributes.permittedSubclasses()).orElseThrow();\n@@ -155,1 +155,1 @@\n-        Assert.checkNull(subCF1.findAttribute(Attributes.PERMITTED_SUBCLASSES).orElse(null));\n+        Assert.checkNull(subCF1.findAttribute(Attributes.permittedSubclasses()).orElse(null));\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/varargs\/6199075\/T6199075.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/varargs\/7042566\/T7042566.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-        test(mm, Attributes.CODE, CodeAttribute.class);\n-        test(mm, Attributes.EXCEPTIONS, ExceptionsAttribute.class);\n+        test(mm, Attributes.code(), CodeAttribute.class);\n+        test(mm, Attributes.exceptions(), ExceptionsAttribute.class);\n","filename":"test\/langtools\/tools\/javap\/T6716452.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                cm.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+                cm.findAttribute(Attributes.innerClasses()).orElse(null);\n@@ -109,1 +109,1 @@\n-        SignatureAttribute sa = m.findAttribute(Attributes.SIGNATURE).orElse(null);\n+        SignatureAttribute sa = m.findAttribute(Attributes.signature()).orElse(null);\n@@ -176,1 +176,1 @@\n-        RuntimeInvisibleAnnotationsAttribute annots = m.findAttribute(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS).orElse(null);\n+        RuntimeInvisibleAnnotationsAttribute annots = m.findAttribute(Attributes.runtimeInvisibleAnnotations()).orElse(null);\n","filename":"test\/langtools\/tools\/javap\/classfile\/6888367\/T6888367.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        test(mm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n-        test(mm, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n+        test(mm, Attributes.runtimeVisibleTypeAnnotations());\n+        test(mm, Attributes.runtimeInvisibleTypeAnnotations());\n@@ -65,1 +65,1 @@\n-        cAttr = mm.findAttribute(Attributes.CODE).orElse(null);\n+        cAttr = mm.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/NewArray.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-        test(m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n-        test(m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n+        test(m, Attributes.runtimeVisibleTypeAnnotations());\n+        test(m, Attributes.runtimeInvisibleTypeAnnotations());\n@@ -83,1 +83,1 @@\n-            attr_instance = m.findAttribute(Attributes.CODE).orElse(null);\n+            attr_instance = m.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Presence.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,2 +74,2 @@\n-        test(m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n-        test(m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n+        test(m, Attributes.runtimeVisibleTypeAnnotations());\n+        test(m, Attributes.runtimeInvisibleTypeAnnotations());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/PresenceInner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-        test(mm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n-        test(mm, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n+        test(mm, Attributes.runtimeVisibleTypeAnnotations());\n+        test(mm, Attributes.runtimeInvisibleTypeAnnotations());\n@@ -69,1 +69,1 @@\n-        cAttr = mm.findAttribute(Attributes.CODE).orElse(null);\n+        cAttr = mm.findAttribute(Attributes.code()).orElse(null);\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/TypeCasts.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-        test(m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n-        test(m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n+        test(m, Attributes.runtimeVisibleTypeAnnotations());\n+        test(m, Attributes.runtimeInvisibleTypeAnnotations());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Wildcards.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}