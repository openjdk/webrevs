{"files":[{"patch":"@@ -1712,1 +1712,1 @@\n-            if (seltypeUnboxed.isPrimitive() && !intSwitch) {\n+            if (seltype.isPrimitive() && !intSwitch) {\n@@ -1806,3 +1806,6 @@\n-                                    if (!stringSwitch && !intSwitch &&\n-                                            !((pattype.getTag().isInSuperClassesOf(LONG) || pattype.getTag().equals(BOOLEAN)) &&\n-                                              types.isSameType(seltypeUnboxed, pattype))) {\n+                                    boolean isLongFloatDoubleOrBooleanConstant =\n+                                            pattype.getTag().isInSuperClassesOf(LONG) || pattype.getTag().equals(BOOLEAN);\n+                                    if (isLongFloatDoubleOrBooleanConstant) {\n+                                        preview.checkSourceLevel(label.pos(), Feature.PRIMITIVE_PATTERNS);\n+                                    }\n+                                    if (!stringSwitch && !intSwitch && !(isLongFloatDoubleOrBooleanConstant && types.isSameType(seltypeUnboxed, pattype))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8348410\n+ * @summary Ensure --enable-preview is required for primitive switch on a boxed expression\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main PrimitivePatternsSwitchRequirePreview\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task.Expect;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class PrimitivePatternsSwitchRequirePreview extends TestRunner {\n+\n+    ToolBox tb;\n+\n+    public PrimitivePatternsSwitchRequirePreview() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        PrimitivePatternsSwitchRequirePreview t = new PrimitivePatternsSwitchRequirePreview();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testBoolean() throws Exception {\n+        String code = \"\"\"\n+                      class C {\n+                          public static void testBoolean(Boolean value) {\n+                            switch (value) {\n+                                case true   -> System.out.println(\"true\");\n+                                default     -> System.out.println(\"false\");\n+                            }\n+                          }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\", \"-XDshould-stop.at=FLOW\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"C.java:4:16: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testLong() throws Exception {\n+        String code = \"\"\"\n+                      class C {\n+                          public static void testLong(Long value) {\n+                             switch (value) {\n+                                 case 0L      -> System.out.println(\"zero\");\n+                                 default      -> System.out.println(\"non-zero\");\n+                             }\n+                         }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\", \"-XDshould-stop.at=FLOW\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"C.java:4:17: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testFloat() throws Exception {\n+        String code = \"\"\"\n+                      class C {\n+                         public static void testFloat(Float value) {\n+                           switch (value) {\n+                               case 0f      -> System.out.println(\"zero\");\n+                               default      -> System.out.println(\"non-zero\");\n+                           }\n+                         }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\", \"-XDshould-stop.at=FLOW\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"C.java:4:15: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testDouble() throws Exception {\n+        String code = \"\"\"\n+                      class C {\n+                        public static void testDouble(Long value) {\n+                            switch (value) {\n+                                case 0L      -> System.out.println(\"zero\");\n+                                default      -> System.out.println(\"non-zero\");\n+                            }\n+                        }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\", \"-XDshould-stop.at=FLOW\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"C.java:4:16: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreview.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -1,15 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8348410\n- * @summary Ensure --enable-preview is required for primitive switch on a boxed expression\n- * @compile\/fail\/ref=PrimitivePatternsSwitchRequirePreviewBoolean.out -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitivePatternsSwitchRequirePreviewBoolean.java\n- *\/\n-public class PrimitivePatternsSwitchRequirePreviewBoolean {\n-\n-    public static void testBoolean(Boolean value) {\n-        switch (value) {\n-            case true   -> System.out.println(\"true\");\n-            default     -> System.out.println(\"false\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewBoolean.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-PrimitivePatternsSwitchRequirePreviewBoolean.java:10:16: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\n-1 error\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewBoolean.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8348410\n- * @summary Ensure --enable-preview is required for primitive switch on a boxed expression\n- * @compile\/fail\/ref=PrimitivePatternsSwitchRequirePreviewDouble.out -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitivePatternsSwitchRequirePreviewDouble.java\n- *\/\n-public class PrimitivePatternsSwitchRequirePreviewDouble {\n-\n-    public static void testDouble(Long value) {\n-        switch (value) {\n-            case 0L      -> System.out.println(\"zero\");\n-            default      -> System.out.println(\"non-zero\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewDouble.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-PrimitivePatternsSwitchRequirePreviewDouble.java:10:16: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\n-1 error\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewDouble.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8348410\n- * @summary Ensure --enable-preview is required for primitive switch on a boxed expression\n- * @compile\/fail\/ref=PrimitivePatternsSwitchRequirePreviewFloat.out -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitivePatternsSwitchRequirePreviewFloat.java\n- *\/\n-public class PrimitivePatternsSwitchRequirePreviewFloat {\n-\n-    public static void testFloat(Float value) {\n-        switch (value) {\n-            case 0f      -> System.out.println(\"zero\");\n-            default      -> System.out.println(\"non-zero\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewFloat.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-PrimitivePatternsSwitchRequirePreviewFloat.java:10:16: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\n-1 error\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewFloat.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8348410\n- * @summary Ensure --enable-preview is required for primitive switch on a boxed expression\n- * @compile\/fail\/ref=PrimitivePatternsSwitchRequirePreviewLong.out -XDrawDiagnostics -XDshould-stop.at=FLOW PrimitivePatternsSwitchRequirePreviewLong.java\n- *\/\n-public class PrimitivePatternsSwitchRequirePreviewLong {\n-\n-    public static void testLong(Long value) {\n-        switch (value) {\n-            case 0L      -> System.out.println(\"zero\");\n-            default      -> System.out.println(\"non-zero\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewLong.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-PrimitivePatternsSwitchRequirePreviewLong.java:10:16: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\n-1 error\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchRequirePreviewLong.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"}]}