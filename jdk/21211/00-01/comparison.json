{"files":[{"patch":"@@ -913,1 +913,0 @@\n-\n@@ -922,1 +921,1 @@\n-  \/\/ Relinquish the lock after this much time passed.\n+  size_t total_batches = 0;\n@@ -924,3 +923,4 @@\n-  jlong batch_end_time = os::javaTimeNanos();    \/\/ This value will be treated as the initial batch_start_time\n-  \/\/ Process batches of regions until it has been 8 us since the last yield.\n-  static constexpr jlong deadline_ns = 8000;     \/\/ 8 us\n+  jlong recycle_trash_start_time = os::javaTimeNanos();    \/\/ This value will be treated as the initial batch_start_time\n+  jlong batch_end_time = recycle_trash_start_time;\n+  \/\/ Process as many batches as can be processed within 10 us.\n+  static constexpr jlong deadline_ns = 10000;               \/\/ 10 us\n@@ -928,0 +928,2 @@\n+  jlong predicted_next_batch_end_time;\n+  jlong batch_process_time_estimate = 0;\n@@ -932,1 +934,0 @@\n-    ShenandoahHeapLocker locker(_heap->lock());\n@@ -936,0 +937,2 @@\n+\n+    ShenandoahHeapLocker locker(_heap->lock());\n@@ -937,2 +940,4 @@\n-      \/\/ Measurements suggest it typically takes less than 200 ns on average to recycle_trash() for a single region.\n-      \/\/ With an 8 us deadline and a 32-region batch, we find that we typically process 3 batches between yields.\n+      \/\/ Measurements on typical 2024 hardware suggest it typically requires between 1400 and 2000 ns to process a batch of\n+      \/\/ 32 regions, assuming low contention with other threads.  Sometimes this goes higher, when mutator threads\n+      \/\/ are contending for CPU cores and\/or the heap lock.  On this hardware with a 10 us deadline, we expect 3-6 batches\n+      \/\/ to be processed between yields most of the time.\n@@ -949,0 +954,1 @@\n+      total_batches++;\n@@ -950,1 +956,4 @@\n-    } while ((idx < count) && (batch_end_time < deadline));\n+      \/\/ Estimate includes historic combination of yield times and heap lock acquisition times.\n+      batch_process_time_estimate = (batch_end_time - recycle_trash_start_time) \/ total_batches;;\n+      predicted_next_batch_end_time = batch_end_time + batch_process_time_estimate;\n+    } while ((idx < count) && (predicted_next_batch_end_time < deadline));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"}]}