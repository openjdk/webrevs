{"files":[{"patch":"@@ -3316,2 +3316,1 @@\n-void MacroAssembler::cmpxchg_narrow_value_helper(Register addr, Register expected,\n-                                                 Register new_val,\n+void MacroAssembler::cmpxchg_narrow_value_helper(Register addr, Register expected, Register new_val,\n@@ -3319,1 +3318,1 @@\n-                                                 Register tmp1, Register tmp2, Register tmp3) {\n+                                                 Register shift, Register mask, Register aligned_addr) {\n@@ -3322,2 +3321,0 @@\n-  Register aligned_addr = t1, shift = tmp1, mask = tmp2, not_mask = tmp3;\n-\n@@ -3338,2 +3335,0 @@\n-  notr(not_mask, mask);\n-\n@@ -3356,3 +3351,1 @@\n-  Register aligned_addr = t1, shift = tmp1, mask = tmp2, not_mask = tmp3, old = result, tmp = t0;\n-  assert_different_registers(addr, old, mask, not_mask, new_val, expected, shift, tmp);\n-  cmpxchg_narrow_value_helper(addr, expected, new_val, size, tmp1, tmp2, tmp3);\n+  assert_different_registers(addr, expected, new_val, result, tmp1, tmp2, tmp3, t0, t1);\n@@ -3360,1 +3353,4 @@\n-  Label retry, fail, done;\n+  Register scratch0 = t0, aligned_addr = t1;\n+  Register shift = tmp1, mask = tmp2, scratch1 = tmp3;\n+\n+  cmpxchg_narrow_value_helper(addr, expected, new_val, size, shift, mask, aligned_addr);\n@@ -3362,1 +3358,1 @@\n-  bind(retry);\n+  Label retry, fail, done;\n@@ -3365,1 +3361,4 @@\n-    lw(old, aligned_addr);\n+    lw(result, aligned_addr);\n+\n+    bind(retry); \/\/ amocas loads the current value into result\n+    notr(scratch1, mask);\n@@ -3367,3 +3366,3 @@\n-    \/\/ if old & mask != expected\n-    andr(tmp, old, mask);\n-    bne(tmp, expected, fail);\n+    andr(scratch0, result, scratch1);  \/\/ scratch0 = word - cas bits\n+    orr(scratch1, expected, scratch0); \/\/ scratch1 = non-cas bits + cas bits\n+    bne(result, scratch1, fail);       \/\/ cas bits differ, cas failed\n@@ -3371,2 +3370,1 @@\n-    andr(tmp, old, not_mask);\n-    orr(tmp, tmp, new_val);\n+    \/\/ result is the same as expected, use as expected value.\n@@ -3374,2 +3372,7 @@\n-    atomic_cas(old, tmp, aligned_addr, operand_size::int32, acquire, release);\n-    bne(tmp, old, retry);\n+    \/\/ scratch0 is still = word - cas bits\n+    \/\/ Or in the new value to create complete new value.\n+    orr(scratch0, scratch0, new_val);\n+\n+    mv(scratch1, result); \/\/ save our expected value\n+    atomic_cas(result, scratch0, aligned_addr, operand_size::int32, acquire, release);\n+    bne(scratch1, result, retry);\n@@ -3377,3 +3380,6 @@\n-    lr_w(old, aligned_addr, acquire);\n-    andr(tmp, old, mask);\n-    bne(tmp, expected, fail);\n+    notr(scratch1, mask);\n+    bind(retry);\n+\n+    lr_w(result, aligned_addr, acquire);\n+    andr(scratch0, result, mask);\n+    bne(scratch0, expected, fail);\n@@ -3381,4 +3387,4 @@\n-    andr(tmp, old, not_mask);\n-    orr(tmp, tmp, new_val);\n-    sc_w(tmp, tmp, aligned_addr, release);\n-    bnez(tmp, retry);\n+    andr(scratch0, result, scratch1); \/\/ scratch1 is ~mask\n+    orr(scratch0, scratch0, new_val);\n+    sc_w(scratch0, scratch0, aligned_addr, release);\n+    bnez(scratch0, retry);\n@@ -3396,2 +3402,0 @@\n-    andr(tmp, old, mask);\n-\n@@ -3399,1 +3403,3 @@\n-    srl(result, tmp, shift);\n+\n+    andr(scratch0, result, mask);\n+    srl(result, scratch0, shift);\n@@ -3419,3 +3425,6 @@\n-  Register aligned_addr = t1, shift = tmp1, mask = tmp2, not_mask = tmp3, old = result, tmp = t0;\n-  assert_different_registers(addr, old, mask, not_mask, new_val, expected, shift, tmp);\n-  cmpxchg_narrow_value_helper(addr, expected, new_val, size, tmp1, tmp2, tmp3);\n+  assert_different_registers(addr, expected, new_val, result, tmp1, tmp2, tmp3, t0, t1);\n+\n+  Register scratch0 = t0, aligned_addr = t1;\n+  Register shift = tmp1, mask = tmp2, scratch1 = tmp3;\n+\n+  cmpxchg_narrow_value_helper(addr, expected, new_val, size, shift, mask, aligned_addr);\n@@ -3426,1 +3435,1 @@\n-    lw(old, aligned_addr);\n+    lw(result, aligned_addr);\n@@ -3428,3 +3437,1 @@\n-    \/\/ if old & mask != expected\n-    andr(tmp, old, mask);\n-    bne(tmp, expected, fail);\n+    notr(scratch1, mask);\n@@ -3432,2 +3439,3 @@\n-    andr(tmp, old, not_mask);\n-    orr(tmp, tmp, new_val);\n+    andr(scratch0, result, scratch1);  \/\/ scratch0 = word - cas bits\n+    orr(scratch1, expected, scratch0); \/\/ scratch1 = non-cas bits + cas bits\n+    bne(result, scratch1, fail);       \/\/ cas bits differ, cas failed\n@@ -3435,2 +3443,9 @@\n-    atomic_cas(tmp, new_val, addr, operand_size::int32, acquire, release);\n-    bne(tmp, old, fail);\n+    \/\/ result is the same as expected, use as expected value.\n+\n+    \/\/ scratch0 is still = word - cas bits\n+    \/\/ Or in the new value to create complete new value.\n+    orr(scratch0, scratch0, new_val);\n+\n+    mv(scratch1, result); \/\/ save our expected value\n+    atomic_cas(result, scratch0, aligned_addr, operand_size::int32, acquire, release);\n+    bne(scratch1, result, fail); \/\/ This weak, so just bail-out.\n@@ -3438,8 +3453,10 @@\n-    lr_w(old, aligned_addr, acquire);\n-    andr(tmp, old, mask);\n-    bne(tmp, expected, fail);\n-\n-    andr(tmp, old, not_mask);\n-    orr(tmp, tmp, new_val);\n-    sc_w(tmp, tmp, aligned_addr, release);\n-    bnez(tmp, fail);\n+    notr(scratch1, mask);\n+\n+    lr_w(result, aligned_addr, acquire);\n+    andr(scratch0, result, mask);\n+    bne(scratch0, expected, fail);\n+\n+    andr(scratch0, result, scratch1); \/\/ scratch1 is ~mask\n+    orr(scratch0, scratch0, new_val);\n+    sc_w(scratch0, scratch0, aligned_addr, release);\n+    bnez(scratch0, fail);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":66,"deletions":49,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -1149,2 +1149,1 @@\n-  void cmpxchg_narrow_value_helper(Register addr, Register expected,\n-                                   Register new_val,\n+  void cmpxchg_narrow_value_helper(Register addr, Register expected, Register new_val,\n@@ -1152,1 +1151,1 @@\n-                                   Register tmp1, Register tmp2, Register tmp3);\n+                                   Register shift, Register mask, Register aligned_addr);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}