{"files":[{"patch":"@@ -152,1 +152,1 @@\n-    return _reads->contains(m);\n+    return reads()->contains(m);\n@@ -169,1 +169,2 @@\n-      _reads = new (mtModule) GrowableArray<ModuleEntry*>(MODULE_READS_SIZE, mtModule);\n+      GrowableArray<ModuleEntry*>* new_reads = new (mtModule) GrowableArray<ModuleEntry*>(MODULE_READS_SIZE, mtModule);\n+      set_reads(new_reads);\n@@ -177,1 +178,1 @@\n-    _reads->append_if_missing(m);\n+    reads()->append_if_missing(m);\n@@ -211,1 +212,1 @@\n-  return ((_reads != nullptr) && !_reads->is_empty());\n+  return ((reads() != nullptr) && !reads()->is_empty());\n@@ -230,1 +231,1 @@\n-    int len = _reads->length();\n+    int len = reads()->length();\n@@ -232,1 +233,1 @@\n-      ModuleEntry* module_idx = _reads->at(idx);\n+      ModuleEntry* module_idx = reads()->at(idx);\n@@ -235,1 +236,1 @@\n-        _reads->delete_at(idx);\n+        reads()->delete_at(idx);\n@@ -249,1 +250,1 @@\n-    int reads_len = _reads->length();\n+    int reads_len = reads()->length();\n@@ -251,1 +252,1 @@\n-      f->do_module(_reads->at(i));\n+      f->do_module(reads()->at(i));\n@@ -257,1 +258,1 @@\n-  delete _reads;\n+  delete reads();\n@@ -275,1 +276,2 @@\n-    _is_patched(false) {\n+    _is_patched(false),\n+    DEBUG_ONLY(_reads_is_archived(false) COMMA) {\n@@ -469,1 +471,1 @@\n-  Array<ModuleEntry*>* archived_reads = write_growable_array(_reads);\n+  set_archived_reads(write_growable_array(reads()));\n@@ -477,1 +479,0 @@\n-  _reads = (GrowableArray<ModuleEntry*>*)archived_reads;\n@@ -518,1 +519,1 @@\n-  _reads = restore_growable_array((Array<ModuleEntry*>*)_reads);\n+  set_reads(restore_growable_array(archived_reads()));\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -71,1 +71,5 @@\n-  GrowableArray<ModuleEntry*>* _reads; \/\/ list of modules that are readable by this module\n+\n+  union {\n+    GrowableArray<ModuleEntry*>* _reads;  \/\/ list of modules that are readable by this module\n+    Array<ModuleEntry*>* _archived_reads; \/\/ List of readable modules stored in the CDS archive\n+  };\n@@ -80,0 +84,1 @@\n+  DEBUG_ONLY(bool _reads_is_archived);\n@@ -118,0 +123,16 @@\n+  GrowableArray<ModuleEntry*>* reads() const {\n+    DEBUG_ONLY(assert(!_reads_is_archived, \"sanity\"));\n+    return _reads;\n+  }\n+  void set_reads(GrowableArray<ModuleEntry*>* r) {\n+    _reads = r;\n+    DEBUG_ONLY(_reads_is_archived = false);\n+  }\n+  Array<ModuleEntry*>* archived_reads() const {\n+    DEBUG_ONLY(assert(_reads_is_archived, \"sanity\"));\n+    return _archived_reads;\n+  }\n+  void set_archived_reads(Array<ModuleEntry*>* r) {\n+    _archived_reads = r;\n+    DEBUG_ONLY(_reads_is_archived = true);\n+  }\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}