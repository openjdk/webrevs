{"files":[{"patch":"@@ -211,4 +211,11 @@\n-    \/\/ non-public support for computing preferred shapes\n-\n-    \/*package-private*\/\n-    static VectorShape largestShapeFor(Class<?> etype) {\n+    \/**\n+     * Finds the largest vector shape supported by the current\n+     * platform for the element type {@code etype}.\n+     *\n+     * @param etype the element type\n+     * @return the largest vector shape supported by the platform\n+     *         for {@code etype}\n+     * @throws IllegalArgumentException if no such vector shape exists\n+     *         for the element type or the type is not a valid {@code ETYPE}.\n+     *\/\n+    public static VectorShape largestShapeFor(Class<?> etype) {\n@@ -218,0 +225,2 @@\n+    \/\/ non-public support for computing preferred shapes\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @bug 8356549\n@@ -129,0 +130,41 @@\n+\n+    \/\/ Testing VectorShape.largestShapeFor() for 8356549\n+    @Test(dataProvider = \"classesProvider\")\n+    void testLargestShapeFor(Class<?> c) {\n+        final int S_64_BITS = 64;\n+        int elemSize = 0;\n+        VectorSpecies<?> maxVectorSpecies;\n+        if (c == byte.class) {\n+            elemSize = Byte.SIZE;\n+            maxVectorSpecies = ByteVector.SPECIES_MAX;\n+        } else if (c == short.class) {\n+            elemSize = Short.SIZE;\n+            maxVectorSpecies = ShortVector.SPECIES_MAX;\n+        } else if (c == int.class) {\n+            elemSize = Integer.SIZE;\n+            maxVectorSpecies = IntVector.SPECIES_MAX;\n+        } else if (c == long.class) {\n+            elemSize = Long.SIZE;\n+            maxVectorSpecies = LongVector.SPECIES_MAX;\n+        } else if (c == float.class) {\n+            elemSize = Float.SIZE;\n+            maxVectorSpecies = FloatVector.SPECIES_MAX;\n+        } else if (c == double.class) {\n+            elemSize = Double.SIZE;\n+            maxVectorSpecies = DoubleVector.SPECIES_MAX;\n+        } else {\n+            throw new IllegalArgumentException(\"Bad vector element type: \" + c.getName());\n+        }\n+\n+        VectorShape vs = VectorShape.largestShapeFor(c);\n+\n+        int maxLaneCount = VectorSupport.getMaxLaneCount(c);\n+        int max = Math.max(maxLaneCount * elemSize, S_64_BITS);\n+\n+        \/\/Assert we're using the same element when comparing shapes\n+        Assert.assertEquals(c, maxVectorSpecies.elementType());\n+\n+        Assert.assertEquals(vs.vectorBitSize(), max);\n+        Assert.assertEquals(vs.vectorBitSize(), maxVectorSpecies.vectorBitSize());\n+\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/PreferredSpeciesTest.java","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"}]}