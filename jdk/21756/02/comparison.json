{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,4 @@\n+void Jfr::initialize_main_thread(JavaThread* jt) {\n+  JfrThreadLocal::initialize_main_thread(jt);\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,1 @@\n+  static void initialize_main_thread(JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/jfr.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-  JfrJavaThreadIterator javathreads(false); \/\/ include not yet live threads (_thread_new)\n+  JfrJavaThreadIterator javathreads;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-  JfrThreadLocal::assign_thread_id(thread, thread->jfr_thread_local());\n+  assert(JfrThreadLocal::jvm_thread_id(thread) != 0, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,0 @@\n-  _critical_section(0),\n@@ -103,0 +102,8 @@\n+void JfrThreadLocal::initialize_main_thread(JavaThread* jt) {\n+  assert(jt != nullptr, \"invariant\");\n+  assert(Thread::is_starting_thread(jt), \"invariant\");\n+  assert(jt->threadObj() == nullptr, \"invariant\");\n+  assert(jt->jfr_thread_local()->_jvm_thread_id == 0, \"invariant\");\n+  jt->jfr_thread_local()->_jvm_thread_id = 1;\n+}\n+\n@@ -397,1 +404,1 @@\n-  JfrThreadLocal* const tl = t->jfr_thread_local();\n+  const JfrThreadLocal* const tl = t->jfr_thread_local();\n@@ -399,1 +406,1 @@\n-    return jvm_thread_id(t, tl);\n+    return jvm_thread_id(tl);\n@@ -403,1 +410,1 @@\n-    return jvm_thread_id(t, tl);\n+    return jvm_thread_id(tl);\n@@ -424,1 +431,1 @@\n-inline traceid load_java_thread_id(const Thread* t) {\n+static inline traceid load_java_thread_id(const Thread* t) {\n@@ -431,0 +438,11 @@\n+#ifdef ASSERT\n+static bool can_assign(const Thread* t) {\n+  assert(t != nullptr, \"invariant\");\n+  if (!t->is_Java_thread()) {\n+    return true;\n+  }\n+  const JavaThread* jt = JavaThread::cast(t);\n+  return jt->thread_state() == _thread_new || jt->is_attaching_via_jni();\n+}\n+#endif\n+\n@@ -434,1 +452,0 @@\n-  JfrSpinlockHelper spinlock(&tl->_critical_section);\n@@ -437,0 +454,1 @@\n+    assert(can_assign(t), \"invariant\");\n@@ -449,2 +467,1 @@\n-traceid JfrThreadLocal::jvm_thread_id(const Thread* t, JfrThreadLocal* tl) {\n-  assert(t != nullptr, \"invariant\");\n+traceid JfrThreadLocal::jvm_thread_id(const JfrThreadLocal* tl) {\n@@ -452,1 +469,1 @@\n-  return tl->_jvm_thread_id != 0 ? tl->_jvm_thread_id : JfrThreadLocal::assign_thread_id(t, tl);\n+  return tl->_jvm_thread_id;\n@@ -457,1 +474,1 @@\n-  return jvm_thread_id(t, t->jfr_thread_local());\n+  return jvm_thread_id(t->jfr_thread_local());\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-  friend class JfrRecorder;\n@@ -68,1 +67,0 @@\n-  mutable volatile int _critical_section;\n@@ -81,0 +79,1 @@\n+  static void initialize_main_thread(JavaThread* jt);\n@@ -86,0 +85,1 @@\n+  static traceid jvm_thread_id(const JfrThreadLocal* tl);\n@@ -178,1 +178,0 @@\n-  static traceid jvm_thread_id(const Thread* t, JfrThreadLocal* tl);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3852,0 +3852,3 @@\n+  \/\/ Want this inside 'attaching via jni'.\n+  JFR_ONLY(Jfr::on_thread_start(thread);)\n+\n@@ -3866,2 +3869,0 @@\n-  JFR_ONLY(Jfr::on_thread_start(thread);)\n-\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,2 +65,0 @@\n-DEBUG_ONLY(Thread* Thread::_starting_thread = nullptr;)\n-\n@@ -541,0 +539,7 @@\n+\n+Thread* Thread::_starting_thread = nullptr;\n+\n+bool Thread::is_starting_thread(const Thread* t) {\n+  assert(_starting_thread != nullptr, \"invariant\");\n+  return t == _starting_thread;\n+}\n@@ -543,1 +548,2 @@\n-bool Thread::set_as_starting_thread() {\n+bool Thread::set_as_starting_thread(JavaThread* jt) {\n+  assert(jt != nullptr, \"invariant\");\n@@ -546,3 +552,3 @@\n-  \/\/ NOTE: this must be called inside the main thread.\n-  DEBUG_ONLY(_starting_thread = this;)\n-  return os::create_main_thread(JavaThread::cast(this));\n+  \/\/ NOTE: this must be called from Threads::create_vm().\n+  DEBUG_ONLY(_starting_thread = jt;)\n+  return os::create_main_thread(jt);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -166,3 +166,0 @@\n-\n-  DEBUG_ONLY(static Thread* _starting_thread;)\n-\n@@ -214,0 +211,1 @@\n+  DEBUG_ONLY(static Thread* _starting_thread;)\n@@ -220,0 +218,2 @@\n+  static bool is_starting_thread(const Thread* t);\n+\n@@ -503,1 +503,1 @@\n-  \/\/ Sets this thread as starting thread. Returns failure if thread\n+  \/\/ Sets the argument thread as starting thread. Returns failure if thread\n@@ -505,1 +505,1 @@\n-  bool set_as_starting_thread();\n+  static bool set_as_starting_thread(JavaThread* jt);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -169,0 +169,3 @@\n+  JFR_ONLY(assert(JFR_JVM_THREAD_ID(thread) == static_cast<traceid>(java_lang_Thread::thread_id(thread_oop())),\n+             \"initial tid mismatch\");)\n+\n@@ -535,1 +538,1 @@\n-  if (!main_thread->set_as_starting_thread()) {\n+  if (!Thread::set_as_starting_thread(main_thread)) {\n@@ -543,0 +546,2 @@\n+  JFR_ONLY(Jfr::initialize_main_thread(main_thread);)\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}