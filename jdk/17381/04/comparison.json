{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,2 +134,1 @@\n-        List<Service> list = GetInstance.getServices(\"KeyFactory\", algorithm);\n-        serviceIterator = list.iterator();\n+        serviceIterator = GetInstance.getServices(\"KeyFactory\", algorithm);\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyFactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,3 +233,1 @@\n-        List<Service> list =\n-                GetInstance.getServices(\"KeyPairGenerator\", algorithm);\n-        Iterator<Service> t = list.iterator();\n+        Iterator<Service> t = GetInstance.getServices(\"KeyPairGenerator\", algorithm);\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyPairGenerator.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,1 +260,1 @@\n-        List<Service> list;\n+        Iterator<Service> t;\n@@ -262,1 +262,1 @@\n-            list = GetInstance.getServices(rsaIds);\n+            t = GetInstance.getServices(rsaIds);\n@@ -264,1 +264,1 @@\n-            list = GetInstance.getServices(\"Signature\", algorithm);\n+            t = GetInstance.getServices(\"Signature\", algorithm);\n@@ -266,1 +266,0 @@\n-        Iterator<Service> t = list.iterator();\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signature.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -542,1 +542,0 @@\n-        List<Service> services = GetInstance.getServices(cipherServices);\n@@ -545,1 +544,1 @@\n-        Iterator<Service> t = services.iterator();\n+        Iterator<Service> t = GetInstance.getServices(cipherServices);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,1 +157,1 @@\n-        List<Service> services = GetInstance.getServices(type, algorithm);\n+        Iterator<Service> t = GetInstance.getServices(type, algorithm);\n@@ -159,1 +159,2 @@\n-        for (Service s : services) {\n+        while (t.hasNext()) {\n+            Service s = t.next();\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurity.java.template","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Iterator;\n@@ -540,1 +541,1 @@\n-        List<Provider.Service> list = GetInstance.getServices(\n+        Iterator<Provider.Service> t = GetInstance.getServices(\n@@ -544,1 +545,2 @@\n-        for (Provider.Service s : list) {\n+        while (t.hasNext()) {\n+            Provider.Service s = t.next();\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEM.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,2 +183,0 @@\n-        List<Service> services =\n-                GetInstance.getServices(\"KeyAgreement\", algorithm);\n@@ -186,1 +184,1 @@\n-        Iterator<Service> t = services.iterator();\n+        Iterator<Service> t = GetInstance.getServices(\"KeyAgreement\", algorithm);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreement.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,3 +170,1 @@\n-        List<Service> list =\n-                GetInstance.getServices(\"KeyGenerator\", algorithm);\n-        serviceIterator = list.iterator();\n+        serviceIterator = GetInstance.getServices(\"KeyGenerator\", algorithm);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyGenerator.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,1 +180,0 @@\n-        List<Service> services = GetInstance.getServices(\"Mac\", algorithm);\n@@ -182,1 +181,1 @@\n-        Iterator<Service> t = services.iterator();\n+        Iterator<Service> t = GetInstance.getServices(\"Mac\", algorithm);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Mac.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,3 +113,1 @@\n-        List<Service> list =\n-                GetInstance.getServices(\"SecretKeyFactory\", algorithm);\n-        serviceIterator = list.iterator();\n+        serviceIterator = GetInstance.getServices(\"SecretKeyFactory\", algorithm);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/SecretKeyFactory.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,2 +107,2 @@\n-     * Return a List of all the available Services that implement\n-     * (type, algorithm). Note that the list is initialized lazily\n+     * Return an iterator over all the available Services that implement\n+     * (type, algorithm). Note that the iterator is initialized lazily\n@@ -112,1 +112,1 @@\n-    public static List<Service> getServices(String type, String algorithm) {\n+    public static Iterator<Service> getServices(String type, String algorithm) {\n@@ -118,13 +118,1 @@\n-     * This method exists for compatibility with JCE only. It will be removed\n-     * once JCE has been changed to use the replacement method.\n-     * @deprecated use {@code getServices(List<ServiceId>)} instead\n-     *\/\n-    @Deprecated\n-    public static List<Service> getServices(String type,\n-            List<String> algorithms) {\n-        ProviderList list = Providers.getProviderList();\n-        return list.getServices(type, algorithms);\n-    }\n-\n-    \/**\n-     * Return a List of all the available Services that implement any of\n+     * Return an iterator over all the available Services that implement any of\n@@ -133,1 +121,1 @@\n-    public static List<Service> getServices(List<ServiceId> ids) {\n+    public static Iterator<Service> getServices(List<ServiceId> ids) {\n@@ -170,1 +158,3 @@\n-        for (Service s : list.getServices(type, algorithm)) {\n+        Iterator<Service> services = list.getServices(type, algorithm);\n+        while (services.hasNext()) {\n+            Service s = services.next();\n@@ -186,1 +176,1 @@\n-        List<Service> services = getServices(type, algorithm);\n+        Iterator<Service> services = getServices(type, algorithm);\n@@ -188,1 +178,2 @@\n-        for (Service s : services) {\n+        while (services.hasNext()) {\n+            Service s = services.next();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/GetInstance.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -394,1 +394,1 @@\n-     * Return a List containing all the Services describing implementations\n+     * Return an iterator over all the Services describing implementations\n@@ -396,1 +396,1 @@\n-     * exists, this method returns an empty List.\n+     * exists, this method returns an empty iterator.\n@@ -398,1 +398,1 @@\n-     * The elements of this list are determined lazily on demand.\n+     * The elements of this iterator are determined lazily on demand.\n@@ -400,1 +400,1 @@\n-     * The List returned is NOT thread safe.\n+     * The iterator returned is NOT thread safe.\n@@ -402,2 +402,2 @@\n-    public List<Service> getServices(String type, String algorithm) {\n-        return new ServiceList(type, algorithm);\n+    public Iterator<Service> getServices(String type, String algorithm) {\n+        return new ServiceIterator(type, algorithm);\n@@ -406,16 +406,2 @@\n-    \/**\n-     * This method exists for compatibility with JCE only. It will be removed\n-     * once JCE has been changed to use the replacement method.\n-     * @deprecated use {@code getServices(List<ServiceId>)} instead\n-     *\/\n-    @Deprecated\n-    public List<Service> getServices(String type, List<String> algorithms) {\n-        List<ServiceId> ids = new ArrayList<>();\n-        for (String alg : algorithms) {\n-            ids.add(new ServiceId(type, alg));\n-        }\n-        return getServices(ids);\n-    }\n-\n-    public List<Service> getServices(List<ServiceId> ids) {\n-        return new ServiceList(ids);\n+    public Iterator<Service> getServices(List<ServiceId> ids) {\n+        return new ServiceIterator(ids);\n@@ -425,1 +411,1 @@\n-     * Inner class for a List of Services. Custom List implementation in\n+     * Inner class for an iterator over Services. Customized implementation in\n@@ -429,1 +415,1 @@\n-    private final class ServiceList extends AbstractList<Service> {\n+    private final class ServiceIterator implements Iterator<Service> {\n@@ -452,1 +438,1 @@\n-        \/\/ Matching preferred provider list for this ServiceList\n+        \/\/ Matching preferred provider list for this ServiceIterator\n@@ -456,1 +442,1 @@\n-        ServiceList(String type, String algorithm) {\n+        ServiceIterator(String type, String algorithm) {\n@@ -462,1 +448,1 @@\n-        ServiceList(List<ServiceId> ids) {\n+        ServiceIterator(List<ServiceId> ids) {\n@@ -537,1 +523,9 @@\n-        public Service get(int index) {\n+        int index;\n+\n+        @Override\n+        public boolean hasNext() {\n+            return tryGet(index) != null;\n+        }\n+\n+        @Override\n+        public Service next() {\n@@ -540,1 +534,1 @@\n-                throw new IndexOutOfBoundsException();\n+                throw new NoSuchElementException();\n@@ -542,0 +536,1 @@\n+            index++;\n@@ -545,41 +540,3 @@\n-        public int size() {\n-            int n;\n-            if (services != null) {\n-                n = services.size();\n-            } else {\n-                n = (firstService != null) ? 1 : 0;\n-            }\n-            while (tryGet(n) != null) {\n-                n++;\n-            }\n-            return n;\n-        }\n-\n-        \/\/ override isEmpty() and iterator() to not call size()\n-        \/\/ this avoids loading + checking all Providers\n-\n-        public boolean isEmpty() {\n-            return (tryGet(0) == null);\n-        }\n-\n-        public Iterator<Service> iterator() {\n-            return new Iterator<>() {\n-                int index;\n-\n-                public boolean hasNext() {\n-                    return tryGet(index) != null;\n-                }\n-\n-                public Service next() {\n-                    Service s = tryGet(index);\n-                    if (s == null) {\n-                        throw new NoSuchElementException();\n-                    }\n-                    index++;\n-                    return s;\n-                }\n-\n-                public void remove() {\n-                    throw new UnsupportedOperationException();\n-                }\n-            };\n+        @Override\n+        public void remove() {\n+            throw new UnsupportedOperationException();\n@@ -595,1 +552,1 @@\n-         * ServiceList.\n+         * ServiceIterator.\n@@ -597,1 +554,1 @@\n-        ArrayList<PreferredEntry> getAll(ServiceList s) {\n+        ArrayList<PreferredEntry> getAll(ServiceIterator s) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/ProviderList.java","additions":30,"deletions":73,"binary":false,"changes":103,"status":"modified"}]}