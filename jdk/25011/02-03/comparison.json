{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import com.sun.tools.javac.code.Symbol;\n@@ -51,1 +50,0 @@\n-import com.sun.tools.javac.resources.CompilerProperties;\n@@ -54,1 +52,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic;\n@@ -57,1 +54,0 @@\n-import com.sun.tools.javac.util.RichDiagnosticFormatter;\n@@ -60,1 +56,0 @@\n-import static com.sun.tools.javac.code.Flags.SYNTHETIC;\n@@ -62,4 +57,0 @@\n-import static com.sun.tools.javac.code.TypeTag.CLASS;\n-import static com.sun.tools.javac.code.TypeTag.ERROR;\n-import static com.sun.tools.javac.code.TypeTag.NONE;\n-import static com.sun.tools.javac.code.TypeTag.TYPEVAR;\n@@ -103,1 +94,1 @@\n-    InferenceContext supplementaryIC;\n+    InferenceContext parentIC;\n@@ -265,65 +256,9 @@\n-        Type result = types.subst(t, inferencevars, instTypes());\n-        InferenceContext next = supplementaryIC;\n-        \/\/ stop as soon as there are no more supplementary inference context or\n-        \/\/ no more type variables to be instantiated\n-        if (next != null) {\n-            HasTypeVars hasTypeVars = new HasTypeVars();\n-            while (next != null && hasTypeVars.visit(result)) {\n-                result = next.asInstType(result);\n-                next = next.supplementaryIC;\n-            }\n-        }\n-        return result;\n-    }\n-\n-    private static class HasTypeVars extends Types.UnaryVisitor<Boolean> {\n-        public Boolean visit(List<Type> ts) {\n-            for (Type t : ts)\n-                if (visit(t)) {\n-                    return true;\n-                }\n-            return false;\n-        }\n-\n-        @Override\n-        public Boolean visitForAll(Type.ForAll t, Void ignored) {\n-            return visit(t.tvars) || visit(t.qtype);\n-        }\n-\n-        @Override\n-        public Boolean visitMethodType(Type.MethodType t, Void ignored) {\n-            return visit(t.argtypes) || visit(t.restype);\n-        }\n-\n-        @Override\n-        public Boolean visitErrorType(Type.ErrorType t, Void ignored) {\n-            return false;\n-        }\n-\n-        @Override\n-        public Boolean visitArrayType(ArrayType t, Void ignored) {\n-            return visit(t.elemtype);\n-        }\n-\n-        @Override\n-        public Boolean visitWildcardType(WildcardType t, Void ignored) {\n-            return visit(t.type);\n-        }\n-\n-        public Boolean visitType(Type t, Void ignored) {\n-            return false;\n-        }\n-\n-        @Override\n-        public Boolean visitCapturedType(Type.CapturedType t, Void ignored) {\n-            return visit(t.wildcard) || visit(t.lower) || visit(t.getUpperBound());\n-        }\n-\n-        @Override\n-        public Boolean visitClassType(ClassType t, Void ignored) {\n-            return visit(t.getTypeArguments()) || visit(t.getEnclosingType());\n-        }\n-\n-        @Override\n-        public Boolean visitTypeVar(TypeVar t, Void ignored) {\n-            return true;\n+        ListBuffer<Type> from = new ListBuffer<>();\n+        ListBuffer<Type> to = new ListBuffer<>();\n+        from.addAll(inferencevars);\n+        to.addAll(instTypes());\n+        InferenceContext next = parentIC;\n+        while (next != null) {\n+            from.addAll(next.inferencevars);\n+            to.addAll(next.instTypes());\n+            next = next.parentIC;\n@@ -331,0 +266,1 @@\n+        return types.subst(t, from.toList(), to.toList());\n@@ -346,1 +282,1 @@\n-        if (supplementaryIC == null) {\n+        if (parentIC == null) {\n@@ -352,2 +288,2 @@\n-            while (currentIC != null && currentIC.supplementaryIC != null) {\n-                List<Type> suppFreeVars = currentIC.supplementaryIC.freeVarsIn(types);\n+            while (currentIC != null && currentIC.parentIC != null) {\n+                List<Type> suppFreeVars = currentIC.parentIC.freeVarsIn(types);\n@@ -356,1 +292,1 @@\n-                    icToAddListenerTo = currentIC.supplementaryIC;\n+                    icToAddListenerTo = currentIC.parentIC;\n@@ -358,1 +294,1 @@\n-                currentIC = currentIC.supplementaryIC;\n+                currentIC = currentIC.parentIC;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/InferenceContext.java","additions":16,"deletions":80,"binary":false,"changes":96,"status":"modified"}]}