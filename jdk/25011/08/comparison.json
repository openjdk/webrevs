{"files":[{"patch":"@@ -209,1 +209,5 @@\n-                        minContext.dupTo(resultInfo.checkContext.inferenceContext());\n+                        InferenceContext duppedTo = resultInfo.checkContext.inferenceContext();\n+                        minContext.dupTo(duppedTo);\n+                        if (minContext != inferenceContext) {\n+                            duppedTo.parentIC = inferenceContext;\n+                        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,0 +86,8 @@\n+    \/* when an inference context (IC) is minimized, the minimized inference context (MIC) contains a\n+     * proper subset of IC's inference vars (IC_IV). In other words there will be at least one inference variable T\n+     * that belongs to IC_IV which doesn't belong to MIC_IV. We need the field below to, among other things,\n+     * check for set membership for cases where the minimized context or any other context derived from it\n+     * needs to deal with an inference variable that has been eliminated from IC_IV while minimizing it\n+     *\/\n+    InferenceContext parentIC;\n+\n@@ -246,1 +254,11 @@\n-        return types.subst(t, inferencevars, instTypes());\n+        ListBuffer<Type> from = new ListBuffer<>();\n+        ListBuffer<Type> to = new ListBuffer<>();\n+        from.addAll(inferencevars);\n+        to.addAll(instTypes());\n+        InferenceContext next = parentIC;\n+        while (next != null) {\n+            from.addAll(next.inferencevars);\n+            to.addAll(next.instTypes());\n+            next = next.parentIC;\n+        }\n+        return types.subst(t, from.toList(), to.toList());\n@@ -554,2 +572,6 @@\n-        return \"Inference vars: \" + inferencevars + '\\n' +\n-               \"Undet vars: \" + undetvars;\n+        String result = \"Inference vars: \" + inferencevars + '\\n' +\n+               \"Undet vars: \" + undetvars + '\\n';\n+        if (parentIC != null) {\n+            result += \"\\nParent : \" + parentIC.toString();\n+        }\n+        return result;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/InferenceContext.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8325859\n+ * @summary potential information loss during type inference\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n+ *\/\n+\n+import com.sun.tools.javac.util.Assert;\n+\n+public class SupplementaryInferenceContextTest {\n+    static String result;\n+    public static void main(String... args) {\n+        runT(() -> supplyNull(Integer.valueOf(1)));\n+        Assert.check(result.equals(\"class java.lang.Integer\"));\n+    }\n+\n+    static <R, X> R supplyNull(X... varargs) {\n+        result = varargs.getClass().getComponentType().toString();\n+        System.err.println(\"result is =\" + result);\n+        return null;\n+    }\n+\n+    static <T> void runT(Runnable runnable) { runnable.run(); }\n+}\n","filename":"test\/langtools\/tools\/javac\/inference_context_min\/SupplementaryInferenceContextTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}