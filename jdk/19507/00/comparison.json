{"files":[{"patch":"@@ -61,5 +61,4 @@\n- * <blockquote><pre>\n- * try {\n- *     \/\/ Encode a String into bytes\n- *     String inputString = \"blahblahblah\";\n- *     byte[] input = inputString.getBytes(\"UTF-8\");\n+ * {@snippet id=\"compdecomp\" lang=\"java\":\n+ *    \/\/ Encode a String into bytes\n+ *    String inputString = \"blahblahblah\\u20AC\\u20AC\";\n+ *    byte[] input = inputString.getBytes(StandardCharsets.UTF_8);\n@@ -67,7 +66,23 @@\n- *     \/\/ Compress the bytes\n- *     byte[] output = new byte[100];\n- *     Deflater compresser = new Deflater();\n- *     compresser.setInput(input);\n- *     compresser.finish();\n- *     int compressedDataLength = compresser.deflate(output);\n- *     compresser.end();\n+ *    \/\/ Compress the bytes\n+ *    ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+ *    Deflater compressor = new Deflater();\n+ *    try {\n+ *        compressor.setInput(input);\n+ *        \/\/ Let the compressor know that the complete input\n+ *        \/\/ has been made available\n+ *        compressor.finish();\n+ *        \/\/ Keep compressing the input till the compressor\n+ *        \/\/ is finished compressing\n+ *        while (!compressor.finished()) {\n+ *            \/\/ Use some reasonable size for the temporary buffer\n+ *            \/\/ based on the data being compressed\n+ *            byte[] tmpBuffer = new byte[100];\n+ *            int numCompressed = compressor.deflate(tmpBuffer);\n+ *            \/\/ Copy over the compressed bytes from the temporary\n+ *            \/\/ buffer into the final byte array\n+ *            compressedBaos.write(tmpBuffer, 0, numCompressed);\n+ *        }\n+ *    } finally {\n+ *        \/\/ Release the resources held by the compressor\n+ *        compressor.end();\n+ *    }\n@@ -75,13 +90,28 @@\n- *     \/\/ Decompress the bytes\n- *     Inflater decompresser = new Inflater();\n- *     decompresser.setInput(output, 0, compressedDataLength);\n- *     byte[] result = new byte[100];\n- *     int resultLength = decompresser.inflate(result);\n- *     decompresser.end();\n- *\n- *     \/\/ Decode the bytes into a String\n- *     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n- * } catch (java.io.UnsupportedEncodingException ex) {\n- *     \/\/ handle\n- * } catch (java.util.zip.DataFormatException ex) {\n- *     \/\/ handle\n+ *    \/\/ Decompress the bytes\n+ *    Inflater decompressor = new Inflater();\n+ *    ByteArrayOutputStream decompressedBaos = new ByteArrayOutputStream();\n+ *    try {\n+ *        byte[] compressed = compressedBaos.toByteArray();\n+ *        decompressor.setInput(compressed, 0, compressed.length);\n+ *        while (!decompressor.finished()) {\n+ *            \/\/ Use some reasonable size for the temporary buffer\n+ *            \/\/ based on the data being decompressed\n+ *            byte[] tmpBuffer = new byte[100];\n+ *            int numDecompressed = 0;\n+ *            try {\n+ *                numDecompressed = decompressor.inflate(tmpBuffer);\n+ *            } catch (DataFormatException dfe) {\n+ *                \/\/ Handle exception\n+ *                ...\n+ *            }\n+ *            \/\/ Copy over the decompressed bytes from the temporary\n+ *            \/\/ buffer into the final byte array\n+ *            decompressedBaos.write(tmpBuffer, 0, numDecompressed);\n+ *        }\n+ *    } finally {\n+ *        \/\/ Release the resources held by the decompressor\n+ *        decompressor.end();\n+ *    }\n+ *    \/\/ Decode the bytes into a String\n+ *    byte[] decompressed = decompressedBaos.toByteArray();\n+ *    String outputString = new String(decompressed, 0, decompressed.length, StandardCharsets.UTF_8);\n@@ -89,1 +119,0 @@\n- * <\/pre><\/blockquote>\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":55,"deletions":26,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n- * The following code fragment demonstrates a trivial compression\n- * and decompression of a string using {@code Deflater} and\n+ * The {@linkplain Deflater##compdecomp code fragment in Deflater} demonstrates\n+ * a trivial compression and decompression of a string using {@code Deflater} and\n@@ -60,29 +60,0 @@\n- * <blockquote><pre>\n- * try {\n- *     \/\/ Encode a String into bytes\n- *     String inputString = \"blahblahblah\\u20AC\\u20AC\";\n- *     byte[] input = inputString.getBytes(\"UTF-8\");\n- *\n- *     \/\/ Compress the bytes\n- *     byte[] output = new byte[100];\n- *     Deflater compresser = new Deflater();\n- *     compresser.setInput(input);\n- *     compresser.finish();\n- *     int compressedDataLength = compresser.deflate(output);\n- *\n- *     \/\/ Decompress the bytes\n- *     Inflater decompresser = new Inflater();\n- *     decompresser.setInput(output, 0, compressedDataLength);\n- *     byte[] result = new byte[100];\n- *     int resultLength = decompresser.inflate(result);\n- *     decompresser.end();\n- *\n- *     \/\/ Decode the bytes into a String\n- *     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n- * } catch (java.io.UnsupportedEncodingException ex) {\n- *     \/\/ handle\n- * } catch (java.util.zip.DataFormatException ex) {\n- *     \/\/ handle\n- * }\n- * <\/pre><\/blockquote>\n- *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"}]}