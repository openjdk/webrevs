{"files":[{"patch":"@@ -60,30 +60,1 @@\n- *\n- * <blockquote><pre>\n- * try {\n- *     \/\/ Encode a String into bytes\n- *     String inputString = \"blahblahblah\";\n- *     byte[] input = inputString.getBytes(\"UTF-8\");\n- *\n- *     \/\/ Compress the bytes\n- *     byte[] output = new byte[100];\n- *     Deflater compresser = new Deflater();\n- *     compresser.setInput(input);\n- *     compresser.finish();\n- *     int compressedDataLength = compresser.deflate(output);\n- *     compresser.end();\n- *\n- *     \/\/ Decompress the bytes\n- *     Inflater decompresser = new Inflater();\n- *     decompresser.setInput(output, 0, compressedDataLength);\n- *     byte[] result = new byte[100];\n- *     int resultLength = decompresser.inflate(result);\n- *     decompresser.end();\n- *\n- *     \/\/ Decode the bytes into a String\n- *     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n- * } catch (java.io.UnsupportedEncodingException ex) {\n- *     \/\/ handle\n- * } catch (java.util.zip.DataFormatException ex) {\n- *     \/\/ handle\n- * }\n- * <\/pre><\/blockquote>\n+ * {@snippet id=\"compdecomp\" lang=\"java\" class=\"Snippets\" region=\"DeflaterInflaterExample\"}\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -59,29 +59,1 @@\n- *\n- * <blockquote><pre>\n- * try {\n- *     \/\/ Encode a String into bytes\n- *     String inputString = \"blahblahblah\\u20AC\\u20AC\";\n- *     byte[] input = inputString.getBytes(\"UTF-8\");\n- *\n- *     \/\/ Compress the bytes\n- *     byte[] output = new byte[100];\n- *     Deflater compresser = new Deflater();\n- *     compresser.setInput(input);\n- *     compresser.finish();\n- *     int compressedDataLength = compresser.deflate(output);\n- *\n- *     \/\/ Decompress the bytes\n- *     Inflater decompresser = new Inflater();\n- *     decompresser.setInput(output, 0, compressedDataLength);\n- *     byte[] result = new byte[100];\n- *     int resultLength = decompresser.inflate(result);\n- *     decompresser.end();\n- *\n- *     \/\/ Decode the bytes into a String\n- *     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n- * } catch (java.io.UnsupportedEncodingException ex) {\n- *     \/\/ handle\n- * } catch (java.util.zip.DataFormatException ex) {\n- *     \/\/ handle\n- * }\n- * <\/pre><\/blockquote>\n+ * {@snippet id=\"compdecomp\" lang=\"java\" class=\"Snippets\" region=\"DeflaterInflaterExample\"}\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.zip;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+class Snippets {\n+\n+    void deflaterInflaterExample() {\n+        \/\/ @start region=\"DeflaterInflaterExample\"\n+\n+        \/\/ Encode a String into bytes\n+        String inputString = \"blahblahblah\\u20AC\\u20AC\";\n+        byte[] input = inputString.getBytes(StandardCharsets.UTF_8);\n+\n+        \/\/ Compress the bytes\n+        ByteArrayOutputStream compressedBaos = new ByteArrayOutputStream();\n+        Deflater compressor = new Deflater();\n+        try {\n+            compressor.setInput(input);\n+            \/\/ Let the compressor know that the complete input\n+            \/\/ has been made available\n+            compressor.finish();\n+            \/\/ Keep compressing the input till the compressor\n+            \/\/ is finished compressing\n+            while (!compressor.finished()) {\n+                \/\/ Use some reasonable size for the temporary buffer\n+                \/\/ based on the data being compressed\n+                byte[] tmpBuffer = new byte[100];\n+                int numCompressed = compressor.deflate(tmpBuffer);\n+                \/\/ Copy over the compressed bytes from the temporary\n+                \/\/ buffer into the final byte array\n+                compressedBaos.write(tmpBuffer, 0, numCompressed);\n+            }\n+        } finally {\n+            \/\/ Release the resources held by the compressor\n+            compressor.end();\n+        }\n+\n+        \/\/ Decompress the bytes\n+        Inflater decompressor = new Inflater();\n+        ByteArrayOutputStream decompressedBaos = new ByteArrayOutputStream();\n+        try {\n+            byte[] compressed = compressedBaos.toByteArray();\n+            decompressor.setInput(compressed, 0, compressed.length);\n+            while (!decompressor.finished()) {\n+                \/\/ Use some reasonable size for the temporary buffer,\n+                \/\/ based on the data being decompressed; in this example,\n+                \/\/ we use a small buffer size\n+                byte[] tmpBuffer = new byte[100];\n+                int numDecompressed = 0;\n+                try {\n+                    numDecompressed = decompressor.inflate(tmpBuffer);\n+                } catch (DataFormatException dfe) {\n+                    \/\/ Handle the exception suitably, in this example\n+                    \/\/ we just rethrow it\n+                    throw new RuntimeException(dfe);\n+                }\n+                \/\/ Copy over the decompressed bytes from the temporary\n+                \/\/ buffer into the final byte array\n+                decompressedBaos.write(tmpBuffer, 0, numDecompressed);\n+            }\n+        } finally {\n+            \/\/ Release the resources held by the decompressor\n+            decompressor.end();\n+        }\n+        \/\/ Decode the bytes into a String\n+        String outputString = decompressedBaos.toString(StandardCharsets.UTF_8);\n+\n+        \/\/ @end\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/snippet-files\/Snippets.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}