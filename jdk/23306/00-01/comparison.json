{"files":[{"patch":"@@ -307,1 +307,1 @@\n-  if (!metrics.is_good_progress()) {\n+  if (!metrics.is_good_progress(_generation)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -438,3 +438,5 @@\n-  inline size_t capacity()  const { return _partitions.capacity_of(ShenandoahFreeSetPartitionId::Mutator);   }\n-  inline size_t used()      const { return _partitions.used_by(ShenandoahFreeSetPartitionId::Mutator);       }\n-  inline size_t reserved()  const { return _partitions.capacity_of(ShenandoahFreeSetPartitionId::Collector); }\n+  \/\/ Note that capacity is the number of regions that had available memory at most recent rebuild.  It is not the\n+  \/\/ entire size of the young or global generation.  (Regions within the generation that were fully utilized at time of\n+  \/\/ rebuild are not counted as part of capacity.)\n+  inline size_t capacity()  const { return _partitions.capacity_of(ShenandoahFreeSetPartitionId::Mutator); }\n+  inline size_t used()      const { return _partitions.used_by(ShenandoahFreeSetPartitionId::Mutator);     }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-  if (metrics.is_good_progress()) {\n+  if (metrics.is_good_progress(heap->global_generation())) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,3 @@\n-bool ShenandoahMetricsSnapshot::is_good_progress() {\n+\/\/ For degenerated GC, generation is Young for generational mode, Global for non-generational mode.\n+\/\/ For full GC, generation is always Global.\n+bool ShenandoahMetricsSnapshot::is_good_progress(ShenandoahGeneration* generation) {\n@@ -51,2 +53,2 @@\n-  \/\/ The sum of free_set->capacity() and ->reserved represents capacity of young in generational, heap in non-generational.\n-  size_t free_expected = ((free_set->capacity() + free_set->reserved()) \/ 100) * ShenandoahCriticalFreeThreshold;\n+  size_t free_expected = (generation->max_capacity() \/ 100) * ShenandoahCriticalFreeThreshold;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  bool is_good_progress();\n+  bool is_good_progress(ShenandoahGeneration *generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}