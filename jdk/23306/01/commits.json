[{"commit":{"message":"Respond to reviewer feedback\n\nIn testing suggested refinements, I discovered a bug in original\nimplementation.  ShenandoahFreeSet::capacity() does not represent the\nsize of young generation.  It represents the total size of the young\nregions that had available memory at the time we most recently rebuilt\nthe ShenandoahFreeSet.\n\nI am rerunning the performance tests following this suggested change."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.hpp"}],"sha":"7969515da159be3ba669597b0ce65e69f902d297"},{"commit":{"message":"Use freeset to determine goodness of progress\n\nAs previously implemented, we used the heap size to measure goodness of\nprogress.  However, heap size is only appropriate for non-generational\nShenandoah.  Freeset abstraction works for both."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp"}],"sha":"a850e4848d866d2fcd579764fbb77db8780ef582"},{"commit":{"message":"Use size-of young generation to assess progress\n\nPreviously, we were using size of heap to asses progress of generational\ndegenerated cycle.  But that is not appropriate, because the collection\nset is chosen based on the size of young generation."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp"}],"sha":"fe796db9f5a1fdfd23b28854ec155fe5bb7fdfa5"}]