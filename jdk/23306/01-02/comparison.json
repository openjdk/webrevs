{"files":[{"patch":"@@ -47,1 +47,1 @@\n-\/\/ For degenerated GC, generation is Young for generational mode, Global for non-generational mode.\n+\/\/ For degenerated GC, generation is Young in generational mode, Global in non-generational mode.\n@@ -49,0 +49,10 @@\n+\/\/\n+\/\/ Note that the size of the chosen collection set is proportional to the relevant generation's collection set.\n+\/\/ Note also that the generation size may change following selection of the collection set, as a side effect\n+\/\/ of evacuation.  Evacuation may promote objects, causing old to grow and young to shrink.  Or this may be a\n+\/\/ mixed evacuation.  When old regions are evacuated, this typically allows young to expand.  In all of these\n+\/\/ various scenarios, the purpose of asking is_good_progress() is to determine if there is enough memory available\n+\/\/ within young generation to justify making an attempt to perform a concurrent collection.  For this reason, we'll\n+\/\/ use the current size of the generation (which may not be different than when the collection set was chosen) to\n+\/\/ assess how much free memory we require in order to consider the most recent GC to have had good progress.\n+\n@@ -53,0 +63,4 @@\n+\n+  \/\/ ShenandoahCriticalFreeThreshold is expressed as a percentage.  We multiple this percentage by 1\/100th\n+  \/\/ of the generation capacity to determine whether the available memory within the generation exceeds the\n+  \/\/ critical threshold.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}