{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,1 @@\n+import java.net.URI;\n@@ -66,1 +67,0 @@\n-import java.security.*;\n@@ -74,1 +74,0 @@\n-import javax.security.auth.callback.UnsupportedCallbackException;\n@@ -209,2 +208,5 @@\n-                \"com.sun.security.jgss.krb5.initiate {\\n\" +\n-                \"    com.sun.security.auth.module.Krb5LoginModule required;\\n};\\n\"\n+                \"\"\"\n+                        com.sun.security.jgss.krb5.initiate {\n+                            com.sun.security.auth.module.Krb5LoginModule required;\n+                        };\n+                        \"\"\"\n@@ -221,2 +223,2 @@\n-        webUrl = new URL(\"http:\/\/\" + WEB_HOST +\":\" + webPort + \"\/a\/b\/c\");\n-        proxyUrl = new URL(\"http:\/\/nosuchplace\/a\/b\/c\");\n+        webUrl = new URI(\"http:\/\/\" + WEB_HOST + \":\" + webPort + \"\/a\/b\/c\").toURL();\n+        proxyUrl = new URI(\"http:\/\/nosuchplace\/a\/b\/c\").toURL();\n@@ -264,8 +266,0 @@\n-\n-        reader = new BufferedReader(new InputStreamReader(\n-                proxyUrl.openConnection(new Proxy(Proxy.Type.HTTP,\n-                                new InetSocketAddress(PROXY_HOST, proxyPort)))\n-                        .getInputStream()));\n-        if (!reader.readLine().equals(CONTENT)) {\n-            throw new RuntimeException(\"Bad content\");\n-        }\n@@ -274,1 +268,1 @@\n-    static void test6829283() throws Exception {\n+    static void test6829283() {\n@@ -320,13 +314,7 @@\n-        CallbackHandler callback = new CallbackHandler() {\n-            @Override\n-            public void handle(Callback[] pCallbacks)\n-                    throws IOException, UnsupportedCallbackException {\n-                for (Callback cb : pCallbacks) {\n-                    if (cb instanceof NameCallback) {\n-                        NameCallback ncb = (NameCallback)cb;\n-                        ncb.setName(username);\n-\n-                    } else  if (cb instanceof PasswordCallback) {\n-                        PasswordCallback pwdcb = (PasswordCallback) cb;\n-                        pwdcb.setPassword(password);\n-                    }\n+        CallbackHandler callback = pCallbacks -> {\n+            for (Callback cb : pCallbacks) {\n+                if (cb instanceof NameCallback ncb) {\n+                    ncb.setName(username);\n+\n+                } else  if (cb instanceof PasswordCallback pwdcb) {\n+                    pwdcb.setPassword(password);\n@@ -335,1 +323,0 @@\n-\n@@ -377,6 +364,4 @@\n-                = new Callable<Object>() {\n-            public Object call() throws Exception {\n-                testConnect();\n-                return null;\n-            }\n-        };\n+                = () -> {\n+                    testConnect();\n+                    return null;\n+                };\n@@ -467,13 +452,10 @@\n-            cred = Subject.callAs(s, new Callable<GSSCredential>() {\n-                @Override\n-                public GSSCredential call() throws Exception {\n-                    System.err.println(\"Creating GSSCredential\");\n-                    return m.createCredential(\n-                            null,\n-                            GSSCredential.INDEFINITE_LIFETIME,\n-                            MyServerAuthenticator.this.scheme\n-                                        .equalsIgnoreCase(\"Negotiate\") ?\n-                                    GSSUtil.GSS_SPNEGO_MECH_OID :\n-                                    GSSUtil.GSS_KRB5_MECH_OID,\n-                            GSSCredential.ACCEPT_ONLY);\n-                }\n+            cred = Subject.callAs(s, () -> {\n+                System.err.println(\"Creating GSSCredential\");\n+                return m.createCredential(\n+                        null,\n+                        GSSCredential.INDEFINITE_LIFETIME,\n+                        MyServerAuthenticator.this.scheme\n+                                    .equalsIgnoreCase(\"Negotiate\") ?\n+                                GSSUtil.GSS_SPNEGO_MECH_OID :\n+                                GSSUtil.GSS_KRB5_MECH_OID,\n+                        GSSCredential.ACCEPT_ONLY);\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/HttpNegotiateServer.java","additions":31,"deletions":49,"binary":false,"changes":80,"status":"modified"}]}