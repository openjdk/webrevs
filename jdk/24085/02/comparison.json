{"files":[{"patch":"@@ -75,1 +75,1 @@\n-                sendQuitTo(pid);\n+                checkCatchesAndSendQuitTo(pid, false);\n@@ -80,1 +80,1 @@\n-                long time_spend = 0;\n+                long time_spent = 0;\n@@ -82,0 +82,2 @@\n+\n+                boolean timedout = false;\n@@ -89,2 +91,3 @@\n-                    time_spend += delay;\n-                    if (time_spend > timeout\/2 && !socket_file.exists()) {\n+                    timedout = (time_spent += delay) > timeout;\n+\n+                    if (time_spent > timeout\/2 && !socket_file.exists()) {\n@@ -92,1 +95,1 @@\n-                        sendQuitTo(pid);\n+                        checkCatchesAndSendQuitTo(pid, !timedout);\n@@ -94,1 +97,1 @@\n-                } while (time_spend <= timeout && !socket_file.exists());\n+                } while (!timedout && !socket_file.exists());\n@@ -100,1 +103,1 @@\n-                                      pid, time_spend));\n+                                      pid, time_spent));\n@@ -219,1 +222,1 @@\n-    static native void sendQuitTo(int pid) throws IOException;\n+    static native boolean checkCatchesAndSendQuitTo(int pid, boolean throwIfNotReady) throws IOException, AttachNotSupportedException;\n","filename":"src\/jdk.attach\/macosx\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <sys\/sysctl.h>\n@@ -36,0 +37,1 @@\n+#include <stdbool.h>\n@@ -113,1 +115,1 @@\n- * Method:    sendQuitTo\n+ * Method:    checkCatchesAndSendQuitTo\n@@ -116,2 +118,2 @@\n-JNIEXPORT void JNICALL Java_sun_tools_attach_VirtualMachineImpl_sendQuitTo\n-  (JNIEnv *env, jclass cls, jint pid)\n+JNIEXPORT jboolean JNICALL Java_sun_tools_attach_VirtualMachineImpl_checkCatchesAndSendQuitTo\n+  (JNIEnv *env, jclass cls, jint pid, jboolean throwIfNotReady)\n@@ -119,2 +121,41 @@\n-    if (kill((pid_t)pid, SIGQUIT)) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"kill\");\n+    int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, (int)pid };\n+\n+    struct kinfo_proc kiproc;\n+    size_t            kipsz = sizeof(struct kinfo_proc);\n+\n+   \/*\n+    * Early in the lifetime of a JVM it has not yet initialized its signal handlers, in particular the QUIT\n+    * handler, note that the default behavior of QUIT is to terminate the receiving process, if unhandled.\n+    *\n+    * Since we use QUIT to initiate an attach operation, if we signal a JVM during this period early in its\n+    * lifetime before it has initialized its QUIT handler, such a signal delivery will terminate the JVM we\n+    * are attempting to attach to!\n+    *\n+    * The following code guards the QUIT delivery by testing the current signal masks. It is okay to send QUIT\n+    * if the signal is caught but not ignored, as that implies a handler has been installed.\n+    *\/\n+\n+    if (sysctl(mib, sizeof(mib) \/ sizeof(int), &kiproc, &kipsz, NULL, 0) == 0) {\n+        const bool ignored = (kiproc.kp_proc.p_sigignore & sigmask(SIGQUIT)) != 0;\n+        const bool caught  = (kiproc.kp_proc.p_sigcatch & sigmask(SIGQUIT))  != 0;\n+\n+        \/\/ *only* send QUIT if the target is ready to catch and handle the signal to avoid default \"death\" if not\n+\n+        \/\/ note: obviously the masks could change between testing and signalling however this is not the\n+        \/\/ observed behavior of the current JVM implementation.\n+\n+        if (caught && !ignored) {\n+            if (kill((pid_t)pid, SIGQUIT)) {\n+                JNU_ThrowIOExceptionWithLastError(env, \"kill\");\n+            } else {\n+                return JNI_TRUE;\n+            }\n+        } else if (throwIfNotReady) {\n+            char msg[100];\n+\n+            snprintf(msg, sizeof(msg), \"pid: %d, state is not ready to participate in attach handshake!\", (int)pid);\n+\n+            JNU_ThrowByName(env, \"com\/sun\/tools\/attach\/AttachNotSupportedException\", msg);\n+        }\n+    } else {\n+        JNU_ThrowIOExceptionWithLastError(env, \"sysctl\");\n@@ -122,0 +163,2 @@\n+\n+    return JNI_FALSE;\n","filename":"src\/jdk.attach\/macosx\/native\/libattach\/VirtualMachineImpl.c","additions":48,"deletions":5,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -760,3 +760,0 @@\n-jdk\/jfr\/api\/consumer\/streaming\/TestJVMCrash.java                8344671 macosx-all\n-jdk\/jfr\/api\/consumer\/streaming\/TestJVMExit.java                 8344671 macosx-all\n-jdk\/jfr\/api\/consumer\/streaming\/TestOutOfProcessMigration.java   8344671 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}