{"files":[{"patch":"@@ -3327,2 +3327,4 @@\n-  \/\/ NOTE: please load 0 only in r_result, as this is also being used for z_locgr down\n-  clear_reg(r_result, true \/* whole_reg *\/, false \/* set_cc *\/); \/\/ let's hope that search will be a success\n+  \/\/ NOTE: please load 0 only in r_result, for now lookup_secondary_supers_table sets r_result to 0\n+  \/\/ clear_reg(r_result, true \/* whole_reg *\/, false \/* set_cc *\/); \/\/ let's hope that search will be a success\n+  z_cghi(r_result, 0);\n+  asm_assert(bcondEqual, \"r_result required to be 0, used by z_locgr\", 44);\n@@ -3415,8 +3417,3 @@\n-\n-    \/\/ check for 0\n-    z_chi(r_result, 0);\n-    asm_assert(bcondNotLow, \"r_result should be equal or greater than 0\", 33);\n-\n-    \/\/ check for 1\n-    z_chi(r_result, 1);\n-    asm_assert(bcondNotHigh, \"r_result should be equal or less than 1\", 33);\n+    z_srlk(r_array_base, r_result, 1); \/\/ r_array_base will be loaded again, so fine if we use it here\n+    z_chi(r_array_base, 0);\n+    asm_assert(bcondEqual, \"r_result should be either 0 or 1\", 33);\n@@ -3447,0 +3444,1 @@\n+  assert_different_registers(Z_ARG1, r_sub_klass, r_linear_result, r_result);\n@@ -3448,0 +3446,1 @@\n+  assert_different_registers(Z_ARG2, r_linear_result, r_result);\n@@ -3449,0 +3448,1 @@\n+  assert_different_registers(Z_ARG3, r_result);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -721,1 +721,0 @@\n-\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}