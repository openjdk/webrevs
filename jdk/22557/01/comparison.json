{"files":[{"patch":"@@ -318,1 +318,0 @@\n-        java.rmi,\n@@ -331,1 +330,0 @@\n-        java.rmi,\n@@ -346,1 +344,0 @@\n-        java.rmi,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,127 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.rmi.runtime;\n-\n-\/**\n- * A utility class for creating threads. The constructors take a\n- * variety of parameters to configure the thread. The run() method\n- * creates and sets up the thread and returns it, but does not\n- * start it.\n- *\n- * All constructors allow the choice of the Runnable for the new\n- * thread to execute, the name of the new thread (which will be\n- * prefixed with \"RMI \"), and whether or not it will be a daemon\n- * thread.\n- *\n- * The new thread may be created in the system thread group (the root\n- * of the thread group tree) or an internally created non-system\n- * thread group, as specified at construction of this class.\n- *\n- * The new thread will have the system class loader as its initial\n- * context class loader (that is, its context class loader will NOT be\n- * inherited from the current thread).\n- *\n- * @author      Peter Jones\n- **\/\n-public final class NewThreadAction {\n-\n-    \/** cached reference to the system (root) thread group *\/\n-    static final ThreadGroup systemThreadGroup;\n-    static {\n-        ThreadGroup group = Thread.currentThread().getThreadGroup();\n-        ThreadGroup parent;\n-        while ((parent = group.getParent()) != null) {\n-            group = parent;\n-        }\n-        systemThreadGroup = group;\n-    }\n-\n-\n-    \/**\n-     * Special child of the system thread group for running tasks that\n-     * may execute user code. The need for a separate thread group may\n-     * be a vestige of it having had a different security policy from\n-     * the system thread group, so this might no longer be necessary.\n-     *\/\n-    static final ThreadGroup userThreadGroup = new ThreadGroup(systemThreadGroup, \"RMI Runtime\");\n-\n-    private final ThreadGroup group;\n-    private final Runnable runnable;\n-    private final String name;\n-    private final boolean daemon;\n-\n-    NewThreadAction(ThreadGroup group, Runnable runnable,\n-                    String name, boolean daemon)\n-    {\n-        this.group = group;\n-        this.runnable = runnable;\n-        this.name = name;\n-        this.daemon = daemon;\n-    }\n-\n-    \/**\n-     * Creates an action that will create a new thread in the\n-     * system thread group.\n-     *\n-     * @param   runnable the Runnable for the new thread to execute\n-     *\n-     * @param   name the name of the new thread\n-     *\n-     * @param   daemon if true, new thread will be a daemon thread;\n-     * if false, new thread will not be a daemon thread\n-     *\/\n-    public NewThreadAction(Runnable runnable, String name, boolean daemon) {\n-        this(systemThreadGroup, runnable, name, daemon);\n-    }\n-\n-    \/**\n-     * Creates an action that will create a new thread.\n-     *\n-     * @param   runnable the Runnable for the new thread to execute\n-     *\n-     * @param   name the name of the new thread\n-     *\n-     * @param   daemon if true, new thread will be a daemon thread;\n-     * if false, new thread will not be a daemon thread\n-     *\n-     * @param   user if true, thread will be created in a non-system\n-     * thread group; if false, thread will be created in the system\n-     * thread group\n-     *\/\n-    public NewThreadAction(Runnable runnable, String name, boolean daemon,\n-                           boolean user)\n-    {\n-        this(user ? userThreadGroup : systemThreadGroup,\n-             runnable, name, daemon);\n-    }\n-\n-    public Thread run() {\n-        Thread t = new Thread(group, runnable, \"RMI \" + name);\n-        t.setContextClassLoader(ClassLoader.getSystemClassLoader());\n-        t.setDaemon(daemon);\n-        return t;\n-    }\n-}\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/runtime\/NewThreadAction.java","additions":0,"deletions":127,"binary":false,"changes":127,"status":"deleted"},{"patch":"@@ -39,0 +39,14 @@\n+ * This class also contains a couple static methods for creating\n+ * threads. The methods allow the choice of the Runnable for the\n+ * new thread to execute, the name of the new thread (which will\n+ * be prefixed with \"RMI \"), and whether or not it will be a daemon\n+ * thread.\n+ *\n+ * The new thread may be created in the system thread group (the root\n+ * of the thread group tree) or an internally created non-system\n+ * thread group (the \"user\" thread group).\n+ *\n+ * The new thread will have the system class loader as its initial\n+ * context class loader (that is, its context class loader will NOT be\n+ * inherited from the current thread).\n+ *\n@@ -43,0 +57,22 @@\n+    \/**\n+     * Cached reference to the system (root) thread group.\n+     *\/\n+    private static final ThreadGroup systemThreadGroup;\n+    static {\n+        ThreadGroup group = Thread.currentThread().getThreadGroup();\n+        ThreadGroup parent;\n+        while ((parent = group.getParent()) != null) {\n+            group = parent;\n+        }\n+        systemThreadGroup = group;\n+    }\n+\n+    \/**\n+     * Special child of the system thread group for running tasks that\n+     * may execute user code. The need for a separate thread group may\n+     * be a vestige of it having had a different security policy from\n+     * the system thread group, so this might no longer be necessary.\n+     *\/\n+    private static final ThreadGroup userThreadGroup =\n+        new ThreadGroup(systemThreadGroup, \"RMI Runtime\");\n+\n@@ -57,0 +93,8 @@\n+    \/**\n+     * Creates the single instance of RuntimeUtil. Note that this is called\n+     * from a static initializer, and it has a ThreadFactory that calls\n+     * static methods on this class, possibly from other threads. This\n+     * should be ok, as the ScheduledThreadPoolExecutor constructor\n+     * returns immediately without blocking on the creation of threads\n+     * by the factory.\n+     *\/\n@@ -64,1 +108,2 @@\n-                        return new NewThreadAction(runnable,\n+                        return newSystemThread(\n+                            runnable,\n@@ -66,1 +111,1 @@\n-                            true).run();\n+                            true);\n@@ -96,0 +141,44 @@\n+\n+    \/\/ Thread creation methods.\n+\n+    \/**\n+     * Internal method to create a new thread with the given settings.\n+     *\n+     * @param group the thread group, should be systemThreadGroup or userThreadGroup\n+     * @param runnable the thread's task\n+     * @param name the thread's name, which will be prefixed with \"RMI \"\n+     * @param daemon whether the thread should be a daemon\n+     * @return the newly created thread\n+     *\/\n+    private static Thread newThread(ThreadGroup group, Runnable runnable, String name, boolean daemon) {\n+        Thread t = new Thread(group, runnable, \"RMI \" + name);\n+        t.setContextClassLoader(ClassLoader.getSystemClassLoader());\n+        t.setDaemon(daemon);\n+        return t;\n+    }\n+\n+    \/**\n+     * Creates and returns, but does not start, a new thread with the given settings.\n+     * The thread will be in the system (\"root\") thread group.\n+     *\n+     * @param runnable the thread's task\n+     * @param name the thread's name, which will be prefixed with \"RMI \"\n+     * @param daemon whether the thread should be a daemon\n+     * @return the newly created thread\n+     *\/\n+    public static Thread newSystemThread(Runnable runnable, String name, boolean daemon) {\n+        return newThread(systemThreadGroup, runnable, name, daemon);\n+    }\n+\n+    \/**\n+     * Creates and returns, but does not start, a new thread with the given settings.\n+     * The thread will be in the RMI user thread group.\n+     *\n+     * @param runnable the thread's task\n+     * @param name the thread's name, which will be prefixed with \"RMI \"\n+     * @param daemon whether the thread should be a daemon\n+     * @return the newly created thread\n+     *\/\n+    public static Thread newUserThread(Runnable runnable, String name, boolean daemon) {\n+        return newThread(userThreadGroup, runnable, name, daemon);\n+    }\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/runtime\/RuntimeUtil.java","additions":91,"deletions":2,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import sun.rmi.runtime.NewThreadAction;\n+import sun.rmi.runtime.RuntimeUtil;\n@@ -240,2 +240,1 @@\n-                new NewThreadAction(new RenewCleanThread(),\n-                                    \"RenewClean-\" + endpoint, true).run();\n+                RuntimeUtil.newSystemThread(new RenewCleanThread(), \"RenewClean-\" + endpoint, true);\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/DGCClient.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import sun.rmi.runtime.NewThreadAction;\n+import sun.rmi.runtime.RuntimeUtil;\n@@ -274,1 +274,1 @@\n-                reaper = new NewThreadAction(new Reaper(), \"Reaper\", false).run();\n+                reaper = RuntimeUtil.newSystemThread(new Reaper(), \"Reaper\", false);\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/ObjectTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import sun.rmi.runtime.NewThreadAction;\n+import sun.rmi.runtime.RuntimeUtil;\n@@ -315,1 +315,1 @@\n-                new NewThreadAction(() -> {\n+                RuntimeUtil.newUserThread(() -> {\n@@ -318,1 +318,1 @@\n-                }, \"Unreferenced-\" + nextThreadNum++, false, true).run().start();\n+                }, \"Unreferenced-\" + nextThreadNum++, false).start();\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/Target.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import sun.rmi.runtime.NewThreadAction;\n@@ -404,3 +403,3 @@\n-        Thread t = new NewThreadAction(ConnectionAcceptor.this,\n-                                       \"TCPChannel Accept-\" + ++ threadNum,\n-                                       true).run();\n+        Thread t = RuntimeUtil.newSystemThread(ConnectionAcceptor.this,\n+                                               \"TCPChannel Accept-\" + ++ threadNum,\n+                                               true);\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/tcp\/TCPChannel.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-import sun.rmi.runtime.NewThreadAction;\n+import sun.rmi.runtime.RuntimeUtil;\n@@ -755,1 +755,1 @@\n-            Thread t = new NewThreadAction(FQDN.this, \"FQDN Finder\", true).run();\n+            Thread t = RuntimeUtil.newSystemThread(FQDN.this, \"FQDN Finder\", true);\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/tcp\/TCPEndpoint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-import sun.rmi.runtime.NewThreadAction;\n+import sun.rmi.runtime.RuntimeUtil;\n@@ -101,2 +101,1 @@\n-                    return new NewThreadAction(\n-                        runnable, \"TCP Connection(idle)\", true, true).run();\n+                    return RuntimeUtil.newUserThread(runnable, \"TCP Connection(idle)\", true);\n@@ -306,2 +305,2 @@\n-                Thread t = new NewThreadAction(new AcceptLoop(server),\n-                                        \"TCP Accept-\" + port, true).run();\n+                Thread t = RuntimeUtil.newSystemThread(\n+                    new AcceptLoop(server), \"TCP Accept-\" + port, true);\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/tcp\/TCPTransport.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}