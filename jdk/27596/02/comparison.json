{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.util.HashMap;\n@@ -41,1 +40,1 @@\n-import java.util.Map;\n+import java.util.Objects;\n@@ -46,2 +45,7 @@\n-public record LanguageTag(String language, String script, String region, String privateuse,\n-                          List<String> extlangs, List<String> variants, List<String> extensions) {\n+public record LanguageTag(String language,\n+                          String script,\n+                          String region,\n+                          String privateuse,\n+                          List<String> extlangs,\n+                          List<String> variants,\n+                          List<String> extensions) {\n@@ -56,72 +60,0 @@\n-    \/\/ Map contains legacy language tags and its preferred mappings from\n-    \/\/ http:\/\/www.ietf.org\/rfc\/rfc5646.txt\n-    \/\/ Keys are lower-case strings.\n-    private static final Map<String, String[]> LEGACY;\n-\n-    static {\n-        \/\/ grandfathered = irregular           ; non-redundant tags registered\n-        \/\/               \/ regular             ; during the RFC 3066 era\n-        \/\/\n-        \/\/ irregular     = \"en-GB-oed\"         ; irregular tags do not match\n-        \/\/               \/ \"i-ami\"             ; the 'langtag' production and\n-        \/\/               \/ \"i-bnn\"             ; would not otherwise be\n-        \/\/               \/ \"i-default\"         ; considered 'well-formed'\n-        \/\/               \/ \"i-enochian\"        ; These tags are all valid,\n-        \/\/               \/ \"i-hak\"             ; but most are deprecated\n-        \/\/               \/ \"i-klingon\"         ; in favor of more modern\n-        \/\/               \/ \"i-lux\"             ; subtags or subtag\n-        \/\/               \/ \"i-mingo\"           ; combination\n-        \/\/               \/ \"i-navajo\"\n-        \/\/               \/ \"i-pwn\"\n-        \/\/               \/ \"i-tao\"\n-        \/\/               \/ \"i-tay\"\n-        \/\/               \/ \"i-tsu\"\n-        \/\/               \/ \"sgn-BE-FR\"\n-        \/\/               \/ \"sgn-BE-NL\"\n-        \/\/               \/ \"sgn-CH-DE\"\n-        \/\/\n-        \/\/ regular       = \"art-lojban\"        ; these tags match the 'langtag'\n-        \/\/               \/ \"cel-gaulish\"       ; production, but their subtags\n-        \/\/               \/ \"no-bok\"            ; are not extended language\n-        \/\/               \/ \"no-nyn\"            ; or variant subtags: their meaning\n-        \/\/               \/ \"zh-guoyu\"          ; is defined by their registration\n-        \/\/               \/ \"zh-hakka\"          ; and all of these are deprecated\n-        \/\/               \/ \"zh-min\"            ; in favor of a more modern\n-        \/\/               \/ \"zh-min-nan\"        ; subtag or sequence of subtags\n-        \/\/               \/ \"zh-xiang\"\n-\n-        final String[][] entries = {\n-          \/\/{\"tag\",         \"preferred\"},\n-            {\"art-lojban\",  \"jbo\"},\n-            {\"cel-gaulish\", \"xtg-x-cel-gaulish\"},   \/\/ fallback\n-            {\"en-GB-oed\",   \"en-GB-x-oed\"},         \/\/ fallback\n-            {\"i-ami\",       \"ami\"},\n-            {\"i-bnn\",       \"bnn\"},\n-            {\"i-default\",   \"en-x-i-default\"},      \/\/ fallback\n-            {\"i-enochian\",  \"und-x-i-enochian\"},    \/\/ fallback\n-            {\"i-hak\",       \"hak\"},\n-            {\"i-klingon\",   \"tlh\"},\n-            {\"i-lux\",       \"lb\"},\n-            {\"i-mingo\",     \"see-x-i-mingo\"},       \/\/ fallback\n-            {\"i-navajo\",    \"nv\"},\n-            {\"i-pwn\",       \"pwn\"},\n-            {\"i-tao\",       \"tao\"},\n-            {\"i-tay\",       \"tay\"},\n-            {\"i-tsu\",       \"tsu\"},\n-            {\"no-bok\",      \"nb\"},\n-            {\"no-nyn\",      \"nn\"},\n-            {\"sgn-BE-FR\",   \"sfb\"},\n-            {\"sgn-BE-NL\",   \"vgt\"},\n-            {\"sgn-CH-DE\",   \"sgg\"},\n-            {\"zh-guoyu\",    \"cmn\"},\n-            {\"zh-hakka\",    \"hak\"},\n-            {\"zh-min\",      \"nan-x-zh-min\"},        \/\/ fallback\n-            {\"zh-min-nan\",  \"nan\"},\n-            {\"zh-xiang\",    \"hsn\"},\n-        };\n-        LEGACY = HashMap.newHashMap(entries.length);\n-        for (String[] e : entries) {\n-            LEGACY.put(LocaleUtils.toLowerString(e[0]), e);\n-        }\n-    }\n-\n@@ -178,8 +110,4 @@\n-        \/\/ Check if the tag is a legacy language tag\n-        String[] gfmap = LEGACY.get(LocaleUtils.toLowerString(languageTag));\n-        if (gfmap != null) {\n-            \/\/ use preferred mapping\n-            itr = new StringTokenIterator(gfmap[1], SEP);\n-        } else {\n-            itr = new StringTokenIterator(languageTag, SEP);\n-        }\n+        \/\/ Check if the tag is a legacy tag\n+        var pref = legacyToPreferred(LocaleUtils.toLowerString(languageTag));\n+        \/\/ If legacy use preferred mapping, otherwise use the tag as is\n+        itr = new StringTokenIterator(Objects.requireNonNullElse(pref, languageTag), SEP);\n@@ -403,0 +331,2 @@\n+        StringBuilder bldr = new StringBuilder(tag.length());\n+        String[] subtags = tag.split(SEP);\n@@ -405,3 +335,12 @@\n-        String potentialLegacy = tag.toLowerCase(Locale.ROOT);\n-        if (LEGACY.containsKey(potentialLegacy)) {\n-            return LEGACY.get(potentialLegacy)[0];\n+        if (legacyToPreferred(tag.toLowerCase(Locale.ROOT)) != null) {\n+            \/\/ Fold the legacy tag\n+            for (int i = 0; i < subtags.length ; i++) {\n+                \/\/ 2 ALPHA Region subtag(s) are upper, all other subtags are lower\n+                if (i > 0 && subtags[i].length() == 2) {\n+                    bldr.append(LocaleUtils.toUpperString(subtags[i])).append(SEP);\n+                } else {\n+                    bldr.append(LocaleUtils.toLowerString(subtags[i])).append(SEP);\n+                }\n+            }\n+            bldr.setLength(bldr.length() - 1); \/\/ Remove trailing '-'\n+            return bldr.toString();\n@@ -410,2 +349,0 @@\n-        StringBuilder bldr = new StringBuilder(tag.length());\n-        String[] subtags = tag.split(\"-\");\n@@ -438,1 +375,1 @@\n-                bldr.append(\"-\");\n+                bldr.append(SEP);\n@@ -570,0 +507,41 @@\n+    \/*\n+     * Converts a legacy tag to its preferred mapping if it exists, otherwise null.\n+     * The keys are mapped and stored as lower case. (Folded on demand).\n+     * See http:\/\/www.ietf.org\/rfc\/rfc5646.txt Section 2.1 and 2.2.8 for the\n+     * full syntax and case accurate legacy tags.\n+     *\/\n+    private static String legacyToPreferred(String tag) {\n+        if (tag.length() < 5) {\n+            return null;\n+        }\n+        return switch (tag) {\n+            case \"art-lojban\" ->  \"jbo\";\n+            case \"cel-gaulish\" -> \"xtg-x-cel-gaulish\";   \/\/ fallback\n+            case \"en-gb-oed\" ->   \"en-GB-x-oed\";         \/\/ fallback\n+            case \"i-ami\" ->       \"ami\";\n+            case \"i-bnn\" ->       \"bnn\";\n+            case \"i-default\" ->   \"en-x-i-default\";      \/\/ fallback\n+            case \"i-enochian\" ->  \"und-x-i-enochian\";    \/\/ fallback\n+            case \"i-hak\",\n+                 \"zh-hakka\" ->    \"hak\";\n+            case \"i-klingon\" ->   \"tlh\";\n+            case \"i-lux\" ->       \"lb\";\n+            case \"i-mingo\" ->     \"see-x-i-mingo\";       \/\/ fallback\n+            case \"i-navajo\" ->    \"nv\";\n+            case \"i-pwn\" ->       \"pwn\";\n+            case \"i-tao\" ->       \"tao\";\n+            case \"i-tay\" ->       \"tay\";\n+            case \"i-tsu\" ->       \"tsu\";\n+            case \"no-bok\" ->      \"nb\";\n+            case \"no-nyn\" ->      \"nn\";\n+            case \"sgn-be-fr\" ->   \"sfb\";\n+            case \"sgn-be-nl\" ->   \"vgt\";\n+            case \"sgn-ch-de\" ->   \"sgg\";\n+            case \"zh-guoyu\" ->    \"cmn\";\n+            case \"zh-min\" ->      \"nan-x-zh-min\";        \/\/ fallback\n+            case \"zh-min-nan\" ->  \"nan\";\n+            case \"zh-xiang\" ->    \"hsn\";\n+            default -> null;\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LanguageTag.java","additions":68,"deletions":90,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8159337\n+ * @bug 8159337 8368981\n@@ -31,1 +31,0 @@\n-import org.junit.jupiter.api.AfterAll;\n@@ -57,1 +56,1 @@\n-    public void wellFormedTags(String tag, String foldedTag) {\n+    void wellFormedTagsTest(String tag, String foldedTag) {\n@@ -61,0 +60,11 @@\n+    @ParameterizedTest\n+    @MethodSource(\"legacyTags\")\n+    void legacyTagsTest(String tag) {\n+        var lowerTag = tag.toLowerCase(Locale.ROOT);\n+        var upperTag = tag.toUpperCase(Locale.ROOT);\n+        assertEquals(tag, Locale.caseFoldLanguageTag(lowerTag),\n+                String.format(\"Folded %s\", lowerTag));\n+        assertEquals(tag, Locale.caseFoldLanguageTag(upperTag),\n+                String.format(\"Folded %s\", upperTag));\n+    }\n+\n@@ -63,1 +73,1 @@\n-    public void illFormedTags(String tag) {\n+    void illFormedTagsTest(String tag) {\n@@ -69,1 +79,1 @@\n-    public void throwNPE() {\n+    void throwNPETest() {\n@@ -74,1 +84,33 @@\n-    private static Stream<Arguments> wellFormedTags() {\n+    \/\/ Well-formed legacy tags in expected case\n+    static Stream<String> legacyTags() {\n+        return Stream.of(\n+                \"art-lojban\",\n+                \"cel-gaulish\",\n+                \"en-GB-oed\",\n+                \"i-ami\",\n+                \"i-bnn\",\n+                \"i-default\",\n+                \"i-enochian\",\n+                \"i-hak\",\n+                \"i-klingon\",\n+                \"i-lux\",\n+                \"i-mingo\",\n+                \"i-navajo\",\n+                \"i-pwn\",\n+                \"i-tao\",\n+                \"i-tay\",\n+                \"i-tsu\",\n+                \"no-bok\",\n+                \"no-nyn\",\n+                \"sgn-BE-FR\",\n+                \"sgn-BE-NL\",\n+                \"sgn-CH-DE\",\n+                \"zh-guoyu\",\n+                \"zh-hakka\",\n+                \"zh-min\",\n+                \"zh-min-nan\",\n+                \"zh-xiang\"\n+        );\n+    }\n+\n+    static Stream<Arguments> wellFormedTags() {\n@@ -127,10 +169,0 @@\n-                \/\/ Legacy tests\n-                \/\/ irregular\n-                Arguments.of(\"I-AMI\", \"i-ami\"),\n-                Arguments.of(\"EN-gb-OED\", \"en-GB-oed\"),\n-                Arguments.of(\"SGN-be-fr\", \"sgn-BE-FR\"),\n-                \/\/ regular\n-                Arguments.of(\"NO-BOK\", \"no-bok\"),\n-                Arguments.of(\"CEL-GAULISH\", \"cel-gaulish\"),\n-                Arguments.of(\"ZH-MIN-NAN\", \"zh-min-nan\"),\n-\n@@ -153,1 +185,1 @@\n-    private static Stream<Arguments> illFormedTags() {\n+    static Stream<Arguments> illFormedTags() {\n","filename":"test\/jdk\/java\/util\/Locale\/CaseFoldLanguageTagTest.java","additions":50,"deletions":18,"binary":false,"changes":68,"status":"modified"}]}