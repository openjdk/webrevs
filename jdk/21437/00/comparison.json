{"files":[{"patch":"@@ -143,1 +143,1 @@\n-        protected void writeBody(BufWriter buf, CharacterRangeTableAttribute attr) {\n+        protected void writeBody(BufWriter bufWriter, CharacterRangeTableAttribute attr) {\n@@ -145,0 +145,1 @@\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n@@ -147,4 +148,2 @@\n-                buf.writeU2(info.startPc());\n-                buf.writeU2(info.endPc());\n-                buf.writeInt(info.characterRangeStart());\n-                buf.writeInt(info.characterRangeEnd());\n+                buf.writeU2U2(info.startPc(), info.endPc());\n+                buf.writeIntInt(info.characterRangeStart(), info.characterRangeEnd());\n@@ -241,3 +240,4 @@\n-        protected void writeBody(BufWriter buf, EnclosingMethodAttribute attr) {\n-            buf.writeIndex(attr.enclosingClass());\n-            buf.writeIndexOrZero(attr.enclosingMethod().orElse(null));\n+        protected void writeBody(BufWriter bufWriter, EnclosingMethodAttribute attr) {\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n+            buf.writeU2U2(buf.cpIndex(attr.enclosingClass()),\n+                    buf.cpIndexOrZero(attr.enclosingMethod().orElse(null)));\n@@ -278,1 +278,1 @@\n-        protected void writeBody(BufWriter buf, InnerClassesAttribute attr) {\n+        protected void writeBody(BufWriter bufWriter, InnerClassesAttribute attr) {\n@@ -280,0 +280,1 @@\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n@@ -282,3 +283,3 @@\n-                buf.writeIndex(ic.innerClass());\n-                buf.writeIndexOrZero(ic.outerClass().orElse(null));\n-                buf.writeIndexOrZero(ic.innerName().orElse(null));\n+                buf.writeU2U2U2(buf.cpIndex(ic.innerClass()),\n+                        buf.cpIndexOrZero(ic.outerClass().orElse(null)),\n+                        buf.cpIndexOrZero(ic.innerName().orElse(null)));\n@@ -303,1 +304,1 @@\n-        protected void writeBody(BufWriter buf, LineNumberTableAttribute attr) {\n+        protected void writeBody(BufWriter bufWriter, LineNumberTableAttribute attr) {\n@@ -305,0 +306,1 @@\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n@@ -307,2 +309,1 @@\n-                buf.writeU2(line.startPc());\n-                buf.writeU2(line.lineNumber());\n+                buf.writeU2U2(line.startPc(), line.lineNumber());\n@@ -326,1 +327,1 @@\n-        protected void writeBody(BufWriter buf, LocalVariableTableAttribute attr) {\n+        protected void writeBody(BufWriter bufWriter, LocalVariableTableAttribute attr) {\n@@ -328,0 +329,1 @@\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n@@ -330,5 +332,2 @@\n-                buf.writeU2(info.startPc());\n-                buf.writeU2(info.length());\n-                buf.writeIndex(info.name());\n-                buf.writeIndex(info.type());\n-                buf.writeU2(info.slot());\n+                buf.writeU2U2(info.startPc(), info.length());\n+                buf.writeU2U2U2(buf.cpIndex(info.name()), buf.cpIndex(info.type()), info.slot());\n@@ -352,1 +351,1 @@\n-        protected void writeBody(BufWriter buf, LocalVariableTypeTableAttribute attr) {\n+        protected void writeBody(BufWriter bufWriter, LocalVariableTypeTableAttribute attr) {\n@@ -354,0 +353,1 @@\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n@@ -356,5 +356,2 @@\n-                buf.writeU2(info.startPc());\n-                buf.writeU2(info.length());\n-                buf.writeIndex(info.name());\n-                buf.writeIndex(info.signature());\n-                buf.writeU2(info.slot());\n+                buf.writeU2U2(info.startPc(), info.length());\n+                buf.writeU2U2U2(buf.cpIndex(info.name()), buf.cpIndex(info.signature()), info.slot());\n@@ -378,1 +375,1 @@\n-        protected void writeBody(BufWriter buf, MethodParametersAttribute attr) {\n+        protected void writeBody(BufWriter bufWriter, MethodParametersAttribute attr) {\n@@ -380,0 +377,1 @@\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n@@ -382,2 +380,2 @@\n-                buf.writeIndexOrZero(info.name().orElse(null));\n-                buf.writeU2(info.flagsMask());\n+                buf.writeU2U2(buf.cpIndexOrZero(info.name().orElse(null)),\n+                        info.flagsMask());\n@@ -401,4 +399,5 @@\n-        protected void writeBody(BufWriter buf, ModuleAttribute attr) {\n-            buf.writeIndex(attr.moduleName());\n-            buf.writeU2(attr.moduleFlagsMask());\n-            buf.writeIndexOrZero(attr.moduleVersion().orElse(null));\n+        protected void writeBody(BufWriter bufWriter, ModuleAttribute attr) {\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n+            buf.writeU2U2U2(buf.cpIndex(attr.moduleName()),\n+                    attr.moduleFlagsMask(),\n+                    buf.cpIndexOrZero(attr.moduleVersion().orElse(null)));\n@@ -407,3 +406,3 @@\n-                buf.writeIndex(require.requires());\n-                buf.writeU2(require.requiresFlagsMask());\n-                buf.writeIndexOrZero(require.requiresVersion().orElse(null));\n+                buf.writeU2U2U2(buf.cpIndex(require.requires()),\n+                        require.requiresFlagsMask(),\n+                        buf.cpIndexOrZero(require.requiresVersion().orElse(null)));\n@@ -413,2 +412,2 @@\n-                buf.writeIndex(export.exportedPackage());\n-                buf.writeU2(export.exportsFlagsMask());\n+                buf.writeU2U2(buf.cpIndex(export.exportedPackage()),\n+                        export.exportsFlagsMask());\n@@ -419,2 +418,2 @@\n-                buf.writeIndex(open.openedPackage());\n-                buf.writeU2(open.opensFlagsMask());\n+                buf.writeU2U2(buf.cpIndex(open.openedPackage()),\n+                        open.opensFlagsMask());\n@@ -445,2 +444,1 @@\n-        protected void writeBody(BufWriter buf, ModuleHashesAttribute attr) {\n-            buf.writeIndex(attr.algorithm());\n+        protected void writeBody(BufWriter bufWriter, ModuleHashesAttribute attr) {\n@@ -448,1 +446,2 @@\n-            buf.writeU2(hashes.size());\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n+            buf.writeU2U2(buf.cpIndex(attr.algorithm()), hashes.size());\n@@ -450,2 +449,2 @@\n-                buf.writeIndex(hash.moduleName());\n-                buf.writeU2(hash.hash().length);\n+                buf.writeU2U2(buf.cpIndex(hash.moduleName()),\n+                        hash.hash().length);\n@@ -596,1 +595,1 @@\n-        protected void writeBody(BufWriter buf, RecordAttribute attr) {\n+        protected void writeBody(BufWriter bufWriter, RecordAttribute attr) {\n@@ -598,0 +597,1 @@\n+            BufWriterImpl buf = (BufWriterImpl) bufWriter;\n@@ -600,3 +600,3 @@\n-                buf.writeIndex(info.name());\n-                buf.writeIndex(info.descriptor());\n-                Util.writeAttributes((BufWriterImpl) buf, info.attributes());\n+                buf.writeU2U2(buf.cpIndex(info.name()),\n+                        buf.cpIndex(info.descriptor()));\n+                Util.writeAttributes(buf, info.attributes());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":50,"deletions":50,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -91,2 +91,1 @@\n-        b.writeU2(startBci);\n-        b.writeU2(length);\n+        b.writeU2U2(startBci, length);\n@@ -94,2 +93,1 @@\n-            b.writeU2(nameIndex());\n-            b.writeU2(secondaryIndex());\n+            b.writeU2U2(nameIndex(), secondaryIndex());\n@@ -98,2 +96,1 @@\n-            b.writeIndex(name());\n-            b.writeIndex(secondaryEntry());\n+            b.writeU2U2(b.cpIndex(name()), b.cpIndex(secondaryEntry()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractBoundLocalVariable.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -203,5 +203,2 @@\n-            b.writeU2(startBci);\n-            b.writeU2(length);\n-            b.writeIndex(name);\n-            b.writeIndex(descriptor);\n-            b.writeU2(slot());\n+            b.writeU2U2(startBci, length);\n+            b.writeU2U2U2(b.cpIndex(name), b.cpIndex(descriptor), slot());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -285,1 +285,0 @@\n-        buf.writeIndex(annotation.className());\n@@ -287,1 +286,1 @@\n-        buf.writeU2(elements.size());\n+        buf.writeU2U2(buf.cpIndex(annotation.className()), elements.size());\n@@ -335,2 +334,2 @@\n-                buf.writeU2(labelToBci(lr, tat.target(), ta));\n-                buf.writeU1(tat.typeArgumentIndex());\n+                buf.writeU2U1(labelToBci(lr, tat.target(), ta),\n+                        tat.typeArgumentIndex());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -171,0 +171,10 @@\n+    public void writeU2U1(int x1, int x2) {\n+        reserveSpace(3);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) (x1 >> 8);\n+        elems[offset + 1] = (byte) x1;\n+        elems[offset + 2] = (byte) x2;\n+        this.offset = offset + 3;\n+    }\n+\n@@ -207,0 +217,15 @@\n+    public void writeIntInt(int x1, int x2) {\n+        reserveSpace(8);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) (x1 >> 24);\n+        elems[offset + 1] = (byte) (x1 >> 16);\n+        elems[offset + 2] = (byte) (x1 >> 8);\n+        elems[offset + 3] = (byte)  x1;\n+        elems[offset + 4] = (byte) (x2 >> 24);\n+        elems[offset + 5] = (byte) (x2 >> 16);\n+        elems[offset + 6] = (byte) (x2 >> 8);\n+        elems[offset + 7] = (byte)  x2;\n+        this.offset = offset + 8;\n+    }\n+\n@@ -358,0 +383,6 @@\n+    public int cpIndexOrZero(PoolEntry entry) {\n+        if (entry == null || entry.index() == 0)\n+            return 0;\n+        return cpIndex(entry);\n+    }\n+\n@@ -374,4 +405,1 @@\n-        if (entry == null || entry.index() == 0)\n-            writeU2(0);\n-        else\n-            writeIndex(entry);\n+        writeU2(cpIndexOrZero(entry));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -222,3 +222,2 @@\n-        head.writeLong((((long) ClassFile.MAGIC_NUMBER) << 32)\n-                | ((minorVersion & 0xFFFFL) << 16)\n-                | (majorVersion & 0xFFFFL));\n+        head.writeInt(ClassFile.MAGIC_NUMBER);\n+        head.writeU2U2(minorVersion, majorVersion);\n@@ -226,2 +225,1 @@\n-        head.writeU2U2(flags, head.cpIndex(thisClassEntry));\n-        head.writeIndexOrZero(superclass);\n+        head.writeU2U2U2(flags, head.cpIndex(thisClassEntry), head.cpIndexOrZero(superclass));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -260,2 +260,1 @@\n-                                b.writeInt(cr.characterRangeStart());\n-                                b.writeInt(cr.characterRangeEnd());\n+                                b.writeIntInt(cr.characterRangeStart(), cr.characterRangeEnd());\n@@ -643,2 +642,1 @@\n-        bytecodesBufWriter.writeInt(low);\n-        bytecodesBufWriter.writeInt(high);\n+        bytecodesBufWriter.writeIntInt(low, high);\n@@ -671,2 +669,1 @@\n-        bytecodesBufWriter.writeIndex(INVOKEDYNAMIC, ref);\n-        bytecodesBufWriter.writeU2(0);\n+        bytecodesBufWriter.writeU1U2U2(INVOKEDYNAMIC, bytecodesBufWriter.cpIndex(ref), 0);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -83,3 +83,1 @@\n-        buf.writeU2(flags);\n-        buf.writeIndex(name);\n-        buf.writeIndex(desc);\n+        buf.writeU2U2U2(flags, buf.cpIndex(name), buf.cpIndex(desc));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,3 +87,3 @@\n-            buf.writeU2(flags().flagsMask());\n-            buf.writeIndex(fieldName());\n-            buf.writeIndex(fieldType());\n+            buf.writeU2U2U2(flags().flagsMask(),\n+                    buf.cpIndex(fieldName()),\n+                    buf.cpIndex(fieldType()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,3 +106,3 @@\n-            buf.writeU2(flags().flagsMask());\n-            buf.writeIndex(methodName());\n-            buf.writeIndex(methodType());\n+            buf.writeU2U2U2(flags().flagsMask(),\n+                    buf.cpIndex(methodName()),\n+                    buf.cpIndex(methodType()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -138,2 +138,1 @@\n-                    out.writeU1(251 + diffLocalsSize);\n-                    out.writeU2(offsetDelta);\n+                    out.writeU1U2(251 + diffLocalsSize, offsetDelta);\n@@ -148,2 +147,1 @@\n-                out.writeU1(247);\n-                out.writeU2(offsetDelta);\n+                out.writeU1U2(247, offsetDelta);\n@@ -155,3 +153,1 @@\n-        out.writeU1(255);\n-        out.writeU2(offsetDelta);\n-        out.writeU2(fr.locals().size());\n+        out.writeU1U2U2(255, offsetDelta, fr.locals().size());\n@@ -171,2 +167,2 @@\n-        bw.writeU1(vti.tag());\n-        switch (vti.tag()) {\n+        int tag = vti.tag();\n+        switch (tag) {\n@@ -175,1 +171,1 @@\n-                {}\n+                bw.writeU1(tag);\n@@ -177,1 +173,1 @@\n-                bw.writeIndex(((ObjectVerificationTypeInfo)vti).className());\n+                bw.writeU1U2(tag, bw.cpIndex(((ObjectVerificationTypeInfo)vti).className()));\n@@ -179,1 +175,1 @@\n-                bw.writeU2(bw.labelContext().labelToBci(((UninitializedVerificationTypeInfo)vti).newTarget()));\n+                bw.writeU1U2(tag, bw.labelContext().labelToBci(((UninitializedVerificationTypeInfo)vti).newTarget()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1248,2 +1248,1 @@\n-            out.writeU1U2(255, offsetDelta);\n-            out.writeU2(localsSize);\n+            out.writeU1U2U2(255, offsetDelta, localsSize);\n@@ -1416,2 +1415,1 @@\n-        void writeTo(BufWriter bw, ConstantPoolBuilder cp) {\n-            bw.writeU1(tag);\n+        void writeTo(BufWriterImpl bw, ConstantPoolBuilder cp) {\n@@ -1420,1 +1418,1 @@\n-                    bw.writeU2(cp.classEntry(sym).index());\n+                    bw.writeU1U2(tag, cp.classEntry(sym).index());\n@@ -1422,1 +1420,3 @@\n-                    bw.writeU2(bci);\n+                    bw.writeU1U2(tag, bci);\n+                default ->\n+                    bw.writeU1(tag);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -290,2 +290,1 @@\n-                                    b.writeU2(-1);\/\/max stack\n-                                    b.writeU2(-1);\/\/max locals\n+                                    b.writeU2U2(-1, -1);\/\/max stack & locals\n@@ -294,2 +293,1 @@\n-                                    b.writeU2(0);\/\/exception handlers\n-                                    b.writeU2(0);\/\/attributes\n+                                    b.writeU2U2(0, 0);\/\/exception handlers & attributes\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}