{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,19 +261,0 @@\n-    \/**\n-     * Returns a copy of this date with the specified number of weeks added.\n-     * <p>\n-     * This adds the specified period in weeks to the date.\n-     * In some cases, adding weeks can cause the resulting date to become invalid.\n-     * If this occurs, then other fields will be adjusted to ensure that the result is valid.\n-     * <p>\n-     * The default implementation uses {@link #plusDays(long)} using a 7 day week.\n-     * <p>\n-     * This instance is immutable and unaffected by this method call.\n-     *\n-     * @param weeksToAdd  the weeks to add, may be negative\n-     * @return a date based on this one with the weeks added, not null\n-     * @throws DateTimeException if the result exceeds the supported date range\n-     *\/\n-    D plusWeeks(long weeksToAdd) {\n-        return plusDays(Math.multiplyExact(weeksToAdd, 7));\n-    }\n-\n@@ -294,79 +275,0 @@\n-    \/**\n-     * Returns a copy of this date with the specified number of years subtracted.\n-     * <p>\n-     * This subtracts the specified period in years to the date.\n-     * In some cases, subtracting years can cause the resulting date to become invalid.\n-     * If this occurs, then other fields, typically the day-of-month, will be adjusted to ensure\n-     * that the result is valid. Typically this will select the last valid day of the month.\n-     * <p>\n-     * The default implementation uses {@link #plusYears(long)}.\n-     * <p>\n-     * This instance is immutable and unaffected by this method call.\n-     *\n-     * @param yearsToSubtract  the years to subtract, may be negative\n-     * @return a date based on this one with the years subtracted, not null\n-     * @throws DateTimeException if the result exceeds the supported date range\n-     *\/\n-    @SuppressWarnings(\"unchecked\")\n-    D minusYears(long yearsToSubtract) {\n-        return (yearsToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusYears(Long.MAX_VALUE)).plusYears(1) : plusYears(-yearsToSubtract));\n-    }\n-\n-    \/**\n-     * Returns a copy of this date with the specified number of months subtracted.\n-     * <p>\n-     * This subtracts the specified period in months to the date.\n-     * In some cases, subtracting months can cause the resulting date to become invalid.\n-     * If this occurs, then other fields, typically the day-of-month, will be adjusted to ensure\n-     * that the result is valid. Typically this will select the last valid day of the month.\n-     * <p>\n-     * The default implementation uses {@link #plusMonths(long)}.\n-     * <p>\n-     * This instance is immutable and unaffected by this method call.\n-     *\n-     * @param monthsToSubtract  the months to subtract, may be negative\n-     * @return a date based on this one with the months subtracted, not null\n-     * @throws DateTimeException if the result exceeds the supported date range\n-     *\/\n-    @SuppressWarnings(\"unchecked\")\n-    D minusMonths(long monthsToSubtract) {\n-        return (monthsToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusMonths(Long.MAX_VALUE)).plusMonths(1) : plusMonths(-monthsToSubtract));\n-    }\n-\n-    \/**\n-     * Returns a copy of this date with the specified number of weeks subtracted.\n-     * <p>\n-     * This subtracts the specified period in weeks to the date.\n-     * In some cases, subtracting weeks can cause the resulting date to become invalid.\n-     * If this occurs, then other fields will be adjusted to ensure that the result is valid.\n-     * <p>\n-     * The default implementation uses {@link #plusWeeks(long)}.\n-     * <p>\n-     * This instance is immutable and unaffected by this method call.\n-     *\n-     * @param weeksToSubtract  the weeks to subtract, may be negative\n-     * @return a date based on this one with the weeks subtracted, not null\n-     * @throws DateTimeException if the result exceeds the supported date range\n-     *\/\n-    @SuppressWarnings(\"unchecked\")\n-    D minusWeeks(long weeksToSubtract) {\n-        return (weeksToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusWeeks(Long.MAX_VALUE)).plusWeeks(1) : plusWeeks(-weeksToSubtract));\n-    }\n-\n-    \/**\n-     * Returns a copy of this date with the specified number of days subtracted.\n-     * <p>\n-     * This subtracts the specified period in days to the date.\n-     * <p>\n-     * The default implementation uses {@link #plusDays(long)}.\n-     * <p>\n-     * This instance is immutable and unaffected by this method call.\n-     *\n-     * @param daysToSubtract  the days to subtract, may be negative\n-     * @return a date based on this one with the days subtracted, not null\n-     * @throws DateTimeException if the result exceeds the supported date range\n-     *\/\n-    @SuppressWarnings(\"unchecked\")\n-    D minusDays(long daysToSubtract) {\n-        return (daysToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusDays(Long.MAX_VALUE)).plusDays(1) : plusDays(-daysToSubtract));\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ChronoLocalDateImpl.java","additions":1,"deletions":99,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -547,5 +547,0 @@\n-    @Override\n-    HijrahDate plusWeeks(long weeksToAdd) {\n-        return super.plusWeeks(weeksToAdd);\n-    }\n-\n@@ -567,20 +562,0 @@\n-    @Override\n-    HijrahDate minusYears(long yearsToSubtract) {\n-        return super.minusYears(yearsToSubtract);\n-    }\n-\n-    @Override\n-    HijrahDate minusMonths(long monthsToSubtract) {\n-        return super.minusMonths(monthsToSubtract);\n-    }\n-\n-    @Override\n-    HijrahDate minusWeeks(long weeksToSubtract) {\n-        return super.minusWeeks(weeksToSubtract);\n-    }\n-\n-    @Override\n-    HijrahDate minusDays(long daysToSubtract) {\n-        return super.minusDays(daysToSubtract);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahDate.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -619,5 +619,0 @@\n-    @Override\n-    JapaneseDate plusWeeks(long weeksToAdd) {\n-        return with(isoDate.plusWeeks(weeksToAdd));\n-    }\n-\n@@ -639,20 +634,0 @@\n-    @Override\n-    JapaneseDate minusYears(long yearsToSubtract) {\n-        return super.minusYears(yearsToSubtract);\n-    }\n-\n-    @Override\n-    JapaneseDate minusMonths(long monthsToSubtract) {\n-        return super.minusMonths(monthsToSubtract);\n-    }\n-\n-    @Override\n-    JapaneseDate minusWeeks(long weeksToSubtract) {\n-        return super.minusWeeks(weeksToSubtract);\n-    }\n-\n-    @Override\n-    JapaneseDate minusDays(long daysToSubtract) {\n-        return super.minusDays(daysToSubtract);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseDate.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -380,5 +380,0 @@\n-    @Override\n-    MinguoDate plusWeeks(long weeksToAdd) {\n-        return super.plusWeeks(weeksToAdd);\n-    }\n-\n@@ -400,20 +395,0 @@\n-    @Override\n-    MinguoDate minusYears(long yearsToSubtract) {\n-        return super.minusYears(yearsToSubtract);\n-    }\n-\n-    @Override\n-    MinguoDate minusMonths(long monthsToSubtract) {\n-        return super.minusMonths(monthsToSubtract);\n-    }\n-\n-    @Override\n-    MinguoDate minusWeeks(long weeksToSubtract) {\n-        return super.minusWeeks(weeksToSubtract);\n-    }\n-\n-    @Override\n-    MinguoDate minusDays(long daysToSubtract) {\n-        return super.minusDays(daysToSubtract);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoDate.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,5 +382,0 @@\n-    @Override\n-    ThaiBuddhistDate plusWeeks(long weeksToAdd) {\n-        return super.plusWeeks(weeksToAdd);\n-    }\n-\n@@ -402,20 +397,0 @@\n-    @Override\n-    ThaiBuddhistDate minusYears(long yearsToSubtract) {\n-        return super.minusYears(yearsToSubtract);\n-    }\n-\n-    @Override\n-    ThaiBuddhistDate minusMonths(long monthsToSubtract) {\n-        return super.minusMonths(monthsToSubtract);\n-    }\n-\n-    @Override\n-    ThaiBuddhistDate minusWeeks(long weeksToSubtract) {\n-        return super.minusWeeks(weeksToSubtract);\n-    }\n-\n-    @Override\n-    ThaiBuddhistDate minusDays(long daysToSubtract) {\n-        return super.minusDays(daysToSubtract);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistDate.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"}]}