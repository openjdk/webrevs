{"files":[{"patch":"@@ -59,0 +59,1 @@\n+  bool tree_is_changed = false;\n@@ -62,10 +63,10 @@\n-    if (is_uncommit_operation) {\n-      return SummaryDiff(-1);\n-    }\n-    assert(!use_tag_inplace, \"Cannot use the tag inplace if no pre-existing tag exists. From: \" PTR_FORMAT \" To: \" PTR_FORMAT, A, B);\n-    if (use_tag_inplace) {\n-      log_debug(nmt)(\"Cannot use the tag inplace if no pre-existing tag exists. From: \" PTR_FORMAT \" To: \" PTR_FORMAT, A, B);\n-    }\n-    \/\/ No match. We add the A node directly, unless it would have no effect.\n-    if (!stA.is_noop()) {\n-      _tree.upsert(A, stA);\n+    if (!is_uncommit_operation) {\n+      assert(!use_tag_inplace, \"Cannot use the tag inplace if no pre-existing tag exists. From: \" PTR_FORMAT \" To: \" PTR_FORMAT, A, B);\n+      if (use_tag_inplace) {\n+        log_debug(nmt)(\"Cannot use the tag inplace if no pre-existing tag exists. From: \" PTR_FORMAT \" To: \" PTR_FORMAT, A, B);\n+      }\n+      \/\/ No match. We add the A node directly, unless it would have no effect.\n+      if (!stA.is_noop()) {\n+        _tree.upsert(A, stA);\n+        tree_is_changed = true;\n+      }\n@@ -78,3 +79,2 @@\n-    if (is_uncommit_operation && leqA_state == StateType::Released) {\n-      return SummaryDiff(-1);\n-    }\n+    bool is_uncommit_over_released = is_uncommit_operation && leqA_state == StateType::Released;\n+    tty->print_cr(\" == A ..., uncom-over-rel: %d\", is_uncommit_over_released);\n@@ -83,1 +83,1 @@\n-    if (use_tag_inplace) {\n+    if (use_tag_inplace && !is_uncommit_over_released) {\n@@ -98,0 +98,1 @@\n+      tty->print_cr(\"A == ...\");\n@@ -105,10 +106,14 @@\n-      if (stA.is_noop()) {\n-        \/\/ invalidates leqA_n\n-        _tree.remove(leqA_n->key());\n-      } else {\n-        \/\/ If the state is not matching then we have different operations, such as:\n-        \/\/ reserve [x1, A); ... commit [A, x2); or\n-        \/\/ reserve [x1, A), mem_tag1; ... reserve [A, x2), mem_tag2; or\n-        \/\/ reserve [A, x1), mem_tag1; ... reserve [A, x2), mem_tag2;\n-        \/\/ then we re-use the existing out node, overwriting its old metadata.\n-        leqA_n->val() = stA;\n+      if (!is_uncommit_over_released) {\n+        tree_is_changed = true;\n+        tty->print_cr(\"!uncom-over-rel ...\");\n+        if (stA.is_noop()) {\n+          \/\/ invalidates leqA_n\n+          _tree.remove(leqA_n->key());\n+        } else {\n+          \/\/ If the state is not matching then we have different operations, such as:\n+          \/\/ reserve [x1, A); ... commit [A, x2); or\n+          \/\/ reserve [x1, A), mem_tag1; ... reserve [A, x2), mem_tag2; or\n+          \/\/ reserve [A, x1), mem_tag1; ... reserve [A, x2), mem_tag2;\n+          \/\/ then we re-use the existing out node, overwriting its old metadata.\n+          leqA_n->val() = stA;\n+        }\n@@ -116,0 +121,1 @@\n+\n@@ -119,0 +125,1 @@\n+      tty->print_cr(\"A > leqA ...\");\n@@ -124,5 +131,10 @@\n-      if (stA.is_noop()) {\n-        \/\/ Nothing to do.\n-      } else {\n-        \/\/ Add new node.\n-        _tree.upsert(A, stA);\n+      if (!is_uncommit_over_released) {\n+        tty->print_cr(\"Not unc-over-rel...\");\n+        if (stA.is_noop()) {\n+          \/\/ Nothing to do.\n+        } else {\n+          \/\/ Add new node.\n+          _tree.upsert(A, stA);\n+          tree_is_changed = true;\n+          tty->print_cr(\"A upsert ...\");\n+        }\n@@ -139,1 +151,9 @@\n-\n+  auto can_be_deleted = [&](TreapNode* node) -> bool {\n+    if (is_uncommit_operation && node->val().out.type() == StateType::Released) {\n+      return false;\n+    }\n+    if (is_uncommit_operation && node->val().out.type() == StateType::Committed) {\n+      return false;\n+    }\n+    return true;\n+  };\n@@ -142,1 +162,0 @@\n-  bool is_remove_ok = true;\n@@ -145,0 +164,1 @@\n+    tty->print_cr(\"visit..., node: %d\", (int) head->key());\n@@ -146,4 +166,1 @@\n-    if (is_uncommit_operation && head->val().out.type() == StateType::Released)  {\n-      is_remove_ok = false;\n-    }\n-    if (is_remove_ok) {\n+    if (can_be_deleted(head))  {\n@@ -151,0 +168,1 @@\n+        tty->print_cr(\"to-be-deleted\");\n@@ -157,0 +175,1 @@\n+          tty->print_cr(\"to be deleted\");\n@@ -160,0 +179,1 @@\n+          tree_is_changed = true;\n@@ -165,3 +185,0 @@\n-  if (!is_remove_ok) {\n-    return SummaryDiff(-1);\n-  }\n@@ -172,1 +189,5 @@\n-    _tree.upsert(B, stB);\n+      if (!is_uncommit_operation) {\n+        _tree.upsert(B, stB);\n+        tree_is_changed = true;\n+        tty->print_cr(\"upser B after visit ......\");\n+      }\n@@ -183,0 +204,1 @@\n+    tty->print_cr(\"len == 0 && not found LEQ...\");\n@@ -197,0 +219,2 @@\n+    tree_is_changed = true;\n+    tty->print_cr(\"in loop for deleting ...\");\n@@ -209,0 +233,4 @@\n+  if (!tree_is_changed) {\n+    return SummaryDiff();\n+  }\n+\n@@ -213,0 +241,2 @@\n+    tty->print_cr(\"in If !=A and Released...\");\n+\n@@ -222,0 +252,1 @@\n+  tty->print_cr(\"End of routine...\");\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":70,"deletions":39,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -178,6 +178,2 @@\n-    SummaryDiff(int init = 0) {\n-      for (int i = 0; i < mt_number_of_tags; i++) {\n-        tag[i] = SingleDiff{init, init};\n-      }\n-    }\n-    bool has_error() const {\n+\n+    SummaryDiff() {\n@@ -185,2 +181,1 @@\n-        if (tag[i].reserve >= 0 || tag[i].commit >= 0)\n-          return false;\n+        tag[i] = SingleDiff{0, 0};\n@@ -188,1 +183,0 @@\n-      return true;\n@@ -190,0 +184,1 @@\n+\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -747,4 +747,4 @@\n-    VMATree::RegionData rd(si[0], mtTest);\n-    VMATree::RegionData rd2(si[0], mtNone);\n-    VMATree::SummaryDiff diff = tree.uncommit_mapping(40, 20, rd2);\n-    EXPECT_TRUE(diff.has_error());\n+    VMATree::RegionData rd(si[0], mtNone);\n+    VMATree::SummaryDiff diff = tree.uncommit_mapping(40, 20, rd);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].commit);\n@@ -761,1 +761,34 @@\n-    EXPECT_TRUE(diff.has_error());\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].commit);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].commit);\n+  }\n+  {\n+    Tree tree;\n+    VMATree::RegionData rd(si[0], mtTest);\n+    VMATree::RegionData rd2(si[0], mtNone);\n+    tree.commit_mapping(0, 10, rd);\n+    tree.commit_mapping(20, 10, rd);\n+    \/\/0-----10....20-----30\n+    \/\/0----------------------------100\n+    tree.print_on(tty);\n+    VMATree::SummaryDiff diff = tree.uncommit_mapping(0, 100, rd2);\n+    tree.print_on(tty);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].reserve);\n+    EXPECT_EQ(-20, diff.tag[NMTUtil::tag_to_index(mtTest)].commit);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].commit);\n+  }\n+  {\n+    Tree tree;\n+    VMATree::RegionData rd(si[0], mtTest);\n+    VMATree::RegionData rd2(si[0], mtNone);\n+    tree.reserve_mapping(40, 60, rd);\n+    tree.release_mapping(50, 20);\n+    \/\/....40---50....70-----100\n+    \/\/ 20---------60\n+    VMATree::SummaryDiff diff = tree.uncommit_mapping(20, 40, rd2);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].commit);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].commit);\n@@ -772,1 +805,4 @@\n-    EXPECT_TRUE(diff.has_error());\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].commit);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].commit);\n@@ -784,1 +820,0 @@\n-    \/\/ Node 70 should not be changed\n@@ -786,1 +821,5 @@\n-    EXPECT_TRUE(diff.has_error());\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtTest)].commit);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].reserve);\n+    EXPECT_EQ(0, diff.tag[NMTUtil::tag_to_index(mtNone)].commit);\n+    \/\/ Node 70 should not be changed\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":47,"deletions":8,"binary":false,"changes":55,"status":"modified"}]}