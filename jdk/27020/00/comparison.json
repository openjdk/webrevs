{"files":[{"patch":"@@ -264,2 +264,1 @@\n-HeapWord* EpsilonHeap::mem_allocate(size_t size, bool *gc_overhead_limit_was_exceeded) {\n-  *gc_overhead_limit_was_exceeded = false;\n+HeapWord* EpsilonHeap::mem_allocate(size_t size) {\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  HeapWord* mem_allocate(size_t size, bool* gc_overhead_limit_was_exceeded) override;\n+  HeapWord* mem_allocate(size_t size) override;\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -399,2 +399,1 @@\n-G1CollectedHeap::mem_allocate(size_t word_size,\n-                              bool*  gc_overhead_limit_was_exceeded) {\n+G1CollectedHeap::mem_allocate(size_t word_size) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -445,2 +445,1 @@\n-  HeapWord* mem_allocate(size_t word_size,\n-                         bool*  gc_overhead_limit_was_exceeded) override;\n+  HeapWord* mem_allocate(size_t word_size) override;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -270,2 +270,1 @@\n-HeapWord* ParallelScavengeHeap::mem_allocate(size_t size,\n-                                             bool* gc_overhead_limit_was_exceeded) {\n+HeapWord* ParallelScavengeHeap::mem_allocate(size_t size) {\n@@ -277,1 +276,1 @@\n-  return mem_allocate_work(size, is_tlab, gc_overhead_limit_was_exceeded);\n+  return mem_allocate_work(size, is_tlab);\n@@ -280,3 +279,1 @@\n-HeapWord* ParallelScavengeHeap::mem_allocate_work(size_t size,\n-                                                  bool is_tlab,\n-                                                  bool* gc_overhead_limit_was_exceeded) {\n+HeapWord* ParallelScavengeHeap::mem_allocate_work(size_t size, bool is_tlab) {\n@@ -458,1 +455,0 @@\n-  bool dummy;\n@@ -460,2 +456,1 @@\n-                                       true \/* is_tlab *\/,\n-                                       &dummy);\n+                                       true \/* is_tlab *\/);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -105,3 +105,1 @@\n-  HeapWord* mem_allocate_work(size_t size,\n-                              bool is_tlab,\n-                              bool* gc_overhead_limit_was_exceeded);\n+  HeapWord* mem_allocate_work(size_t size, bool is_tlab);\n@@ -200,1 +198,1 @@\n-  HeapWord* mem_allocate(size_t size, bool* gc_overhead_limit_was_exceeded) override;\n+  HeapWord* mem_allocate(size_t size) override;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -364,2 +364,1 @@\n-HeapWord* SerialHeap::mem_allocate(size_t size,\n-                                   bool* gc_overhead_limit_was_exceeded) {\n+HeapWord* SerialHeap::mem_allocate(size_t size) {\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  HeapWord* mem_allocate(size_t size, bool*  gc_overhead_limit_was_exceeded) override;\n+  HeapWord* mem_allocate(size_t size) override;\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,2 +165,1 @@\n-  virtual HeapWord* mem_allocate(size_t size,\n-                                 bool* gc_overhead_limit_was_exceeded) = 0;\n+  virtual HeapWord* mem_allocate(size_t size) = 0;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  bool                _overhead_limit_exceeded;\n@@ -74,1 +73,0 @@\n-      _overhead_limit_exceeded(false),\n@@ -122,1 +120,1 @@\n-  const char* message = _overhead_limit_exceeded ? \"GC overhead limit exceeded\" : \"Java heap space\";\n+  const char* message = \"Java heap space\";\n@@ -136,4 +134,1 @@\n-    oop exception = _overhead_limit_exceeded ?\n-        Universe::out_of_memory_error_gc_overhead_limit() :\n-        Universe::out_of_memory_error_java_heap();\n-    THROW_OOP_(exception, true);\n+    THROW_OOP_(Universe::out_of_memory_error_java_heap(), true);\n@@ -241,1 +236,1 @@\n-  HeapWord* mem = Universe::heap()->mem_allocate(_word_size, &allocation._overhead_limit_exceeded);\n+  HeapWord* mem = Universe::heap()->mem_allocate(_word_size);\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1097,2 +1097,1 @@\n-HeapWord* ShenandoahHeap::mem_allocate(size_t size,\n-                                        bool*  gc_overhead_limit_was_exceeded) {\n+HeapWord* ShenandoahHeap::mem_allocate(size_t size) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -707,1 +707,1 @@\n-  HeapWord* mem_allocate(size_t size, bool* what) override;\n+  HeapWord* mem_allocate(size_t size) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-HeapWord* ZCollectedHeap::mem_allocate(size_t size, bool* gc_overhead_limit_was_exceeded) {\n+HeapWord* ZCollectedHeap::mem_allocate(size_t size) {\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  HeapWord* mem_allocate(size_t size, bool* gc_overhead_limit_was_exceeded) override;\n+  HeapWord* mem_allocate(size_t size) override;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}